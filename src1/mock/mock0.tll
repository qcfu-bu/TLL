program test0 : string = "hello\n"
program test1 : nat = 123
program test2 : ascii = 'A'
program test3 : ascii = '\123'
program test4 : list _ = 1 :: 2 :: 3 :: nil

logical eq_sym_U (A : U) (m n : A) (e : m ≡ n) : n ≡ m.
logical eq_sym_L (A : L) (m n : A) (e : m ≡ n) : n ≡ m.

overload eq_sym<s> : ∀ (A : s) (m n : A) (e : m ≡ n) → n ≡ m =
| <U> of eq_sym_U
| <L> of eq_sym_L

logical append_len {A : U} (xs ys : list A) :
  len _ (append _ xs ys) ≡ (len _ xs) + (len _ ys) =
  match xs as xs0 in
    len _ (append _ xs0 ys) ≡ len _ xs0 + len _ ys
  with
  | nil ⇒ refl
  | x :: xs0 ⇒
    rew [ n, _ ⇒ S (len _ (append _ xs0 ys)) ≡ S n ]
      append_len _ xs0 ys in refl
  end

program snd {A : U} {B : L} (m : A ⊗ B) : B =
  let ⟨_, b⟩ = m in b

logical llen_id {A : L} (ls : llist A) :
  ls ≡ snd _ _ (llen _ ls) =
  match ls as ls0 in
    ls0 ≡ snd _ _ (llen _ ls0)
  with
  | lnil ⇒ refl
  | lcons x xs ⇒
    let p = llen _ xs in
    match p as p0 in
      llen _ xs ≡ p0 → lcons x xs ≡ lcons x (snd _ _ p0)
    with
    | ⟨a, b⟩ ⇒ fn e0 ⇒
      let H = 
        rew [ p0, _ ⇒ snd _ _ p0 ≡ xs ] e0 in llen_id A xs
      in
      rew [ l, _ ⇒ lcons x xs ≡ lcons x l ] H in refl
    end refl
  end
