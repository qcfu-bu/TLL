[(DData ("unit", (PBase (TBase (Type U))),
    [(DCons ("tt", (PBase (TBase (Id "unit")))))]));
  (DData ("nat", (PBase (TBase (Type U))),
     [(DCons ("O", (PBase (TBase (Id "nat")))));
       (DCons ("S", (PBase (TBind (R, "", (Id "nat"), (TBase (Id "nat")))))))
       ]
     ));
  (DData ("list", (PBind ("A", (Type U), (PBase (TBase (Type L))))),
     [(DCons ("nil",
         (PBind ("A", (Type U), (PBase (TBase (App [(Id "list"); (Id "A")])))
            ))
         ));
       (DCons ("cons",
          (PBind ("A", (Type U),
             (PBase
                (TBind (R, "", (Id "A"),
                   (TBind (R, "", (App [(Id "list"); (Id "A")]),
                      (TBase (App [(Id "list"); (Id "A")]))))
                   )))
             ))
          ))
       ]
     ));
  (DData ("ex",
     (PBind ("A", (Type L),
        (PBind ("P", (Pi (R, U, "", (Id "A"), (Type U))),
           (PBase (TBase (Type L)))))
        )),
     [(DCons ("Ex",
         (PBind ("A", (Type L),
            (PBind ("P", (Pi (R, U, "", (Id "A"), (Type U))),
               (PBase
                  (TBind (R, "x", (Id "A"),
                     (TBind (N, "", (App [(Id "P"); (Id "x")]),
                        (TBase (App [(Id "ex"); (Id "A"); (Id "P")]))))
                     )))
               ))
            ))
         ))
       ]
     ));
  (DData ("eq",
     (PBind ("A", (Type U),
        (PBind ("x", (Id "A"),
           (PBase (TBind (R, "", (Id "A"), (TBase (Type U)))))))
        )),
     [(DCons ("refl",
         (PBind ("A", (Type U),
            (PBind ("x", (Id "A"),
               (PBase (TBase (App [(Id "eq"); (Id "A"); (Id "x"); (Id "x")])))
               ))
            ))
         ))
       ]
     ));
  (DTm (N, "rw",
     [(R, "A", (Type U)); (R, "m", (Id "A"));
       (R, "P", (Pi (R, U, "", (Id "A"), (Type U))));
       (R, "pf", (App [(Id "P"); (Id "m")])); (R, "n", (Id "A"));
       (R, "e", (App [(Id "eq"); (Id "A"); (Id "m"); (Id "n")]))],
     (Some (App [(Id "P"); (Id "n")])),
     (Match ((Id "e"),
        (Mot2 ((PData ("eq", ["_"; "_"; "x"])), (App [(Id "P"); (Id "x")]))),
        [((PCons ("refl", [])), (Id "pf"))]))
     ));
  (DTm (R, "add", [(R, "x", (Id "nat")); (R, "y", (Id "nat"))],
     (Some (Id "nat")),
     (Match ((Id "x"), Mot0,
        [((PCons ("O", [])), (Id "y"));
          ((PCons ("S", ["x"])),
           (App [(Id "S"); (App [(Id "add"); (Id "x"); (Id "y")])]))
          ]
        ))
     ));
  (DTm (R, "append",
     [(N, "A", (Type U)); (R, "xs", (App [(Id "list"); (Id "A")]))],
     (Some (Pi (R, L, "", (App [(Id "list"); (Id "A")]),
              (App [(Id "list"); (Id "A")])))),
     (Lam (R, L, "ys",
        (Match ((Id "xs"), Mot0,
           [((PCons ("nil", [])), (Id "ys"));
             ((PCons ("cons", ["x"; "xs"])),
              (App
                 [(Id "cons"); (Id "x");
                   (App [(Id "append"); (Id "_"); (Id "xs"); (Id "ys")])]))
             ]
           ))
        ))
     ));
  (DTm (N, "len",
     [(R, "A", (Type U)); (R, "xs", (App [(Id "list"); (Id "A")]))],
     (Some (Id "nat")),
     (Match ((Id "xs"), Mot0,
        [((PCons ("nil", [])), (Id "O"));
          ((PCons ("cons", ["_"; "xs"])),
           (App [(Id "S"); (App [(Id "len"); (Id "_"); (Id "xs")])]))
          ]
        ))
     ));
  (DTm (N, "append_len",
     [(R, "A", (Type U)); (R, "xs", (App [(Id "list"); (Id "A")]));
       (R, "ys", (App [(Id "list"); (Id "A")]))],
     (Some (App
              [(Id "eq"); (Id "nat");
                (App
                   [(Id "len"); (Id "A");
                     (App [(Id "append"); (Id "A"); (Id "xs"); (Id "ys")])]);
                (App
                   [(Id "add"); (App [(Id "len"); (Id "A"); (Id "xs")]);
                     (App [(Id "len"); (Id "A"); (Id "ys")])])
                ])),
     (Match ((Id "xs"),
        (Mot1 ("xs0",
           (App
              [(Id "eq"); (Id "nat");
                (App
                   [(Id "len"); (Id "A");
                     (App [(Id "append"); (Id "A"); (Id "xs0"); (Id "ys")])]);
                (App
                   [(Id "add"); (App [(Id "len"); (Id "A"); (Id "xs0")]);
                     (App [(Id "len"); (Id "A"); (Id "ys")])])
                ])
           )),
        [((PCons ("nil", [])), (Id "refl"));
          ((PCons ("cons", ["x"; "xs0"])),
           (App
              [(Id "rw"); (Id "nat");
                (App
                   [(Id "len"); (Id "A");
                     (App [(Id "append"); (Id "A"); (Id "xs0"); (Id "ys")])]);
                (Lam (R, U, "n",
                   (App
                      [(Id "eq"); (Id "nat");
                        (App
                           [(Id "S");
                             (App
                                [(Id "len"); (Id "A");
                                  (App
                                     [(Id "append"); (Id "A"); (Id "xs0");
                                       (Id "ys")])
                                  ])
                             ]);
                        (App [(Id "S"); (Id "n")])])
                   ));
                (Id "refl");
                (App
                   [(Id "add"); (App [(Id "len"); (Id "A"); (Id "xs0")]);
                     (App [(Id "len"); (Id "A"); (Id "ys")])]);
                (App [(Id "append_len"); (Id "A"); (Id "xs0"); (Id "ys")])]))
          ]
        ))
     ));
  (DTm (R, "test", [],
     (Some (App
              [(Id "ex"); (App [(Id "list"); (Id "nat")]);
                (Lam (R, U, "ls",
                   (App
                      [(Id "eq"); (Id "nat");
                        (App [(Id "len"); (Id "nat"); (Id "ls")]);
                        (App [(Id "S"); (Id "O")])])
                   ))
                ])),
     (App [(Id "Ex"); (App [(Id "cons"); (Id "O"); (Id "nil")]); (Id "refl")])
     ));
  (DTm (N, "_", [], (Some (Id "unit")),
     (Match ((Id "test"), Mot0, [((PCons ("Ex", ["ls"; "pf"])), (Id "tt"))]))
     ));
  (DTm (R, "list_free",
     [(N, "A", (Type U)); (R, "ls", (App [(Id "list"); (Id "A")]))],
     (Some (Id "unit")),
     (Match ((Id "ls"), Mot0,
        [((PCons ("nil", [])), (Id "tt"));
          ((PCons ("cons", ["_"; "ls"])),
           (App [(Id "list_free"); (Id "_"); (Id "ls")]))
          ]
        ))
     ));
  (DTm (R, "_", [], (Some (Id "unit")),
     (Match ((Id "test"), Mot0,
        [((PCons ("Ex", ["ls"; "pf"])),
          (App [(Id "list_free"); (Id "_"); (Id "ls")]))]
        ))
     ))
  ]
parse success---------------------------------------

inductive unit_d1 : U where
| tt_c1 : unit_d1

inductive nat_d2 : U where
| O_c2 : nat_d2
| S_c3 : nat_d2 -> nat_d2

inductive list_d3 (A_114 : U) : L where
| nil_c4 (A_115 : U) : (list_d3 A_115)
| cons_c5 (A_116 : U) : A_116 -> (list_d3 A_116) -> (list_d3 A_116)

inductive ex_d4 (A_120 : L) (P_121 : A_120 -> U) : L where
| Ex_c6 (A_123 : L) (P_124 : A_123 -> U) :
  ∀ (x_126 : A_123) -> {((P_124) x_126)} -> (ex_d4 A_123 P_124)

inductive eq_d5 (A_128 : U) (x_129 : A_128) : A_128 -> U where
| refl_c7 (A_131 : U) (x_132 : A_131) : (eq_d5 A_131 x_132 x_132)

theorem rw_20 :
  ∀ (A_133 : U) ->
    ∀ (m_135 : A_133) ->
      ∀ (P_139 : A_133 -> U) ->
        ((P_139) m_135) ->
          ∀ (n_145 : A_133) -> (eq_d5 A_133 m_135 n_145) -> ((P_139) n_145) :=
  fun A_148 m_149 P_150 pf_151 n_152 e_153  ->
    match e_153 in (eq_d5 __154 __155 x_156) return ((P_150) x_156) with
    | refl_c7 -> pf_151

def add_41 : nat_d2 -> nat_d2 -> nat_d2 :=
  fix add_160 x_161 y_162  ->
    match x_161 with
    | O_c2 -> y_162 | (S_c3 x_163) -> (S_c3 ((add_160) x_163 y_162))

def append_49 :
  ∀ {A_164 : U} -> (list_d3 A_164) -> (list_d3 A_164) -o (list_d3 A_164) :=
  fix append_169 {A_170} xs_171 ->
    fun ys_172 -o
      match xs_171 with
      | nil_c4 -> ys_172
      | (cons_c5 x_173 xs_174) ->
        (cons_c5 x_173 ((append_169) ??1 xs_174 ys_172))

theorem len_62 : ∀ (A_175 : U) -> (list_d3 A_175) -> nat_d2 :=
  fix len_178 A_179 xs_180  ->
    match xs_180 with
    | nil_c4 -> O_c2
    | (cons_c5 __181 xs_182) -> (S_c3 ((len_178) ??2 xs_182))

theorem append_len_72 :
  ∀ (A_183 : U) ->
    ∀ (xs_185 : (list_d3 A_183)) ->
      ∀ (ys_187 : (list_d3 A_183)) ->
        (eq_d5 nat_d2 ((len_62) A_183 ((append_49) A_183 xs_185 ys_187))
        ((add_41) ((len_62) A_183 xs_185) ((len_62) A_183 ys_187))) :=
  fix append_len_188 A_189 xs_190 ys_191  ->
    match xs_190 as xs0_192 return
      (eq_d5 nat_d2 ((len_62) A_189 ((append_49) A_189 xs0_192 ys_191))
      ((add_41) ((len_62) A_189 xs0_192) ((len_62) A_189 ys_191)))
    with
    | nil_c4 -> refl_c7
    | (cons_c5 x_193 xs0_194) ->
      ((rw_20)
        nat_d2 ((len_62) A_189 ((append_49) A_189 xs0_194 ys_191))
        fun n_195 ->
          (eq_d5 nat_d2
          (S_c3 ((len_62) A_189 ((append_49) A_189 xs0_194 ys_191)))
          (S_c3 n_195))
        refl_c7 ((add_41) ((len_62) A_189 xs0_194) ((len_62) A_189 ys_191))
        ((append_len_188) A_189 xs0_194 ys_191))

def test_88 :
  (ex_d4 (list_d3 nat_d2)
  fun ls_196 -> (eq_d5 nat_d2 ((len_62) nat_d2 ls_196) (S_c3 O_c2))) :=
  (Ex_c6 (cons_c5 O_c2 nil_c4) refl_c7)

theorem __91 : unit_d1 := match test_88 with
                          | (Ex_c6 ls_197 pf_198) -> tt_c1

def list_free_97 : ∀ {A_199 : U} -> (list_d3 A_199) -> unit_d1 :=
  fix list_free_202 {A_203} ls_204 ->
    match ls_204 with
    | nil_c4 -> tt_c1
    | (cons_c5 __205 ls_206) -> ((list_free_202) ??3 ls_206)

def __107 : unit_d1 :=
  match test_88 with
  | (Ex_c6 ls_207 pf_208) -> ((list_free_97) ??4 ls_207)

trans01 success---------------------------------------

inductive unit_d1 : U where
| tt_c1 : unit_d1

inductive nat_d2 : U where
| O_c2 : nat_d2
| S_c3 : nat_d2 -> nat_d2

inductive list_d3 (A_842 : U) : L where
| nil_c4 (A_843 : U) : (list_d3 A_843)
| cons_c5 (A_844 : U) : A_844 -> (list_d3 A_844) -> (list_d3 A_844)

inductive ex_d4 (A_848 : L) (P_849 : A_848 -> U) : L where
| Ex_c6 (A_851 : L) (P_852 : A_851 -> U) :
  ∀ (x_854 : A_851) -> {((P_852) x_854)} -> (ex_d4 A_851 P_852)

inductive eq_d5 (A_856 : U) (x_857 : A_856) : A_856 -> U where
| refl_c7 (A_859 : U) (x_860 : A_859) : (eq_d5 A_859 x_860 x_860)

theorem rw_20 :
  ∀ (A_861 : U) ->
    ∀ (m_863 : A_861) ->
      ∀ (P_867 : A_861 -> U) ->
        ((P_867) m_863) ->
          ∀ (n_873 : A_861) -> (eq_d5 A_861 m_863 n_873) -> ((P_867) n_873) :=
  fun A_876 m_877 P_878 pf_879 n_880 e_881  ->
    match e_881 in (eq_d5 __882 __883 x_884) return ((P_878) x_884) with
    | refl_c7 -> pf_879

def add_41 : nat_d2 -> nat_d2 -> nat_d2 :=
  fix add_888 x_889 y_890  ->
    match x_889 with
    | O_c2 -> y_890 | (S_c3 x_891) -> (S_c3 ((add_888) x_891 y_890))

def append_49 :
  ∀ {A_892 : U} -> (list_d3 A_892) -> (list_d3 A_892) -o (list_d3 A_892) :=
  fix append_897 {A_898} xs_899 ->
    fun ys_900 -o
      match xs_899 with
      | nil_c4 -> ys_900
      | (cons_c5 x_901 xs_902) ->
        (cons_c5 x_901 ((append_897) A_898 xs_902 ys_900))

theorem len_62 : ∀ (A_903 : U) -> (list_d3 A_903) -> nat_d2 :=
  fix len_906 A_907 xs_908  ->
    match xs_908 with
    | nil_c4 -> O_c2
    | (cons_c5 __909 xs_910) -> (S_c3 ((len_906) A_907 xs_910))

theorem append_len_72 :
  ∀ (A_911 : U) ->
    ∀ (xs_913 : (list_d3 A_911)) ->
      ∀ (ys_915 : (list_d3 A_911)) ->
        (eq_d5 nat_d2 ((len_62) A_911 ((append_49) A_911 xs_913 ys_915))
        ((add_41) ((len_62) A_911 xs_913) ((len_62) A_911 ys_915))) :=
  fix append_len_916 A_917 xs_918 ys_919  ->
    match xs_918 as xs0_920 return
      (eq_d5 nat_d2 ((len_62) A_917 ((append_49) A_917 xs0_920 ys_919))
      ((add_41) ((len_62) A_917 xs0_920) ((len_62) A_917 ys_919)))
    with
    | nil_c4 -> refl_c7
    | (cons_c5 x_921 xs0_922) ->
      ((rw_20)
        nat_d2 ((len_62) A_917 ((append_49) A_917 xs0_922 ys_919))
        fun n_923 ->
          (eq_d5 nat_d2
          (S_c3 ((len_62) A_917 ((append_49) A_917 xs0_922 ys_919)))
          (S_c3 n_923))
        refl_c7 ((add_41) ((len_62) A_917 xs0_922) ((len_62) A_917 ys_919))
        ((append_len_916) A_917 xs0_922 ys_919))

def test_88 :
  (ex_d4 (list_d3 nat_d2)
  fun ls_924 -> (eq_d5 nat_d2 ((len_62) nat_d2 ls_924) (S_c3 O_c2))) :=
  (Ex_c6 (cons_c5 O_c2 nil_c4) refl_c7)

theorem __91 : unit_d1 := match test_88 with
                          | (Ex_c6 ls_925 pf_926) -> tt_c1

def list_free_97 : ∀ {A_927 : U} -> (list_d3 A_927) -> unit_d1 :=
  fix list_free_930 {A_931} ls_932 ->
    match ls_932 with
    | nil_c4 -> tt_c1
    | (cons_c5 __933 ls_934) -> ((list_free_930) A_931 ls_934)

def __107 : unit_d1 :=
  match test_88 with
  | (Ex_c6 ls_935 pf_936) -> ((list_free_97) nat_d2 ls_935)

elab1 success---------------------------------------

inductive unit_d1 where
| tt_c1 := 0

inductive nat_d2 where
| O_c2 := 0
| S_c3 := 1

inductive list_d3 where
| nil_c4 := 0
| cons_c5 := 2

inductive ex_d4 where
| Ex_c6 := 2

inductive eq_d5 where
| refl_c7 := 0

def rw_20 := □

def add_41 :=
  fix add_1201 x_1202 y_1203 ->
    match x_1202<U>with
    | O_c2 -> y_1203 | (S_c3 x_1204) -> (S_c3 ((add_1201) x_1204 y_1203))

def append_49 :=
  fix append_1205 A_1206 xs_1207 ->
    fun ys_1208 ->
      match xs_1207<L>with
      | nil_c4 -> ys_1208
      | (cons_c5 x_1209 xs_1210) ->
        (cons_c5 x_1209 ((append_1205) □ xs_1210 ys_1208))

def len_62 := □

def append_len_72 := □

def test_88 := (Ex_c6 (cons_c5 O_c2 nil_c4) □)

def __91 := □

def list_free_97 :=
  fix list_free_1211 A_1212 ls_1213 ->
    match ls_1213<L>with
    | nil_c4 -> tt_c1
    | (cons_c5 __1214 ls_1215) -> ((list_free_1211) □ ls_1215)

def __107 :=
  match test_88<L>with
  | (Ex_c6 ls_1216 pf_1217) -> ((list_free_97) □ ls_1216)

dyntype1 success---------------------------------------

