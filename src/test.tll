#[logical]
inductive vec‹s,r› (A : Type‹s›) : nat -> Type‹r› where
| vnil : vec‹s,r›A zero
| #[multiplicative]
  vcons {n : nat} (hd : A) (tl : vec‹s,r›A n) : vec‹s,r›A (succ n)

def fact (x : nat): nat :=
  match x with
  | zero => one
  | succ x0 => mul x (fact x0)

def bot_elim‹s› {A : Type‹s›} : {bot} -> A
  | #absurd => #absurd

def foo : nat :=
  let function foo
    | x => m
  in
  let function foo (_ : unit) : A :=
    match x with
    | P x => x
  in n

