inductive bool : U where
| true : bool
| false : bool

inductive unit : U where
| tt : unit

#[program]
inductive nat : U where
| zero : nat
| succ (pred : nat) : nat


#[program]
inductive vec‹s,r› (A : Type‹s›) : nat -> Type‹r› where
| vnil : vec‹s,r›A zero
| #[additive]
  vcons {n : nat} (hd : A) (tl : vec‹s,r›A n) : vec‹s,r›A (succ n)

#[logical]
def add (x : nat) : nat -> nat
  | zero => x
  | succ n => succ (add x n)


#[program]
def test (b : bool) :
  match b with
  | true => unit
  | false => nat
:=
  match b as x : bool in
    match x with
    | true => unit
    | false => nat
  with
  | true => tt
  | false => zero
