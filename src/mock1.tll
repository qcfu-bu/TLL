inductive unit : U where
| tt : unit

inductive nat : U where
| O : nat
| S : nat -> nat

inductive tupL (A : L) (B : U) : L where
| TupL : A -> B -> tupL A B

inductive list (A : U) : L where
| nil  : list A
| cons : A -> list A -> list A

inductive ex (A : L) (P : A -> U) : L where
| Ex : ∀ (x : A) -> {P x} -> ex A P

inductive eq (A : L) (x : A) : A -> U where
| refl : eq A x x

theorem rw
  (A : L) (m : A) (P : A -> U) (pf : P m) (n : A) (e : eq A m n) : P n :=
  match e in eq _ _ x return P x with
  | refl -> pf

theorem eq_sym (A : L) (m n : A) (e : eq A m n) : eq A n m :=
  rw A m (λ x -> eq _ x m) refl n e

theorem rwr
  (A : L) (m : A) (P : A -> U) (pf : P m) (n : A) (e : eq A n m) : P n :=
  rw A m (λ x -> P x) pf n (eq_sym _ _ _ e)

def fst {A : L} {B : U} (p : tupL A B) : A :=
  match p with
  | TupL a _ -> a

theorem len (A : U) (xs : list A) : nat :=
  match xs with
  | nil -> O
  | cons _ xs -> S (len _ xs)

def size {A : U} (xs : list A) : tupL (list A) nat :=
  match xs with
  | nil -> TupL nil O
  | cons x xs ->
    match size _ xs with
    | TupL xs sz -> TupL (cons x xs) (S sz)

theorem size_id (A : U) (ls : list A) : eq _ (fst _ _ (size _ ls)) ls :=
  match ls as ls0 return eq (list A) (fst _ _ (size _ ls0)) ls0 with
  | nil -> refl
  | cons x xs ->
    let p := size A xs in
    let e : eq (tupL (list A) nat) p (size A xs) := refl in
    (match p as p0 return
      eq _ p0 (size A xs) ->
      eq _ (fst _ _
             (match p0 with
             | TupL xs0 sz -> TupL (cons x xs0) (S sz)))
           (cons x xs)
    with
    | TupL a b -> λ e0 ->
      let H0 : eq _ (fst _ _ (size A xs)) xs := size_id A xs in
      let H1 : eq _ (fst _ _ (TupL a b)) xs :=
        rwr _ _ (λ p0 -> eq _ (fst _ _ p0) xs) H0 _ e0
      in
      rwr _ _ (λ l -> eq (list A) (cons x l) (cons x xs)) refl _ H1) e
