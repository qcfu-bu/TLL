[Inductive {name = "bool"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)),
          [(DMul ("true", (TBase (Id "bool"))));
            (DMul ("false", (TBase (Id "bool"))))]))
      ))};
  Inductive {name = "unit"; relv = R;
    body =
    (Binder ([],
       (PBase ((TBase (Type U)), [(DMul ("tt", (TBase (Id "unit"))))]))))};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DMul ("zero", (TBase (Id "nat"))));
             (DMul ("succ",
                (TBind (R, (Id "nat"), (Binder ("pred", (TBase (Id "nat"))))
                   ))
                ))
             ]))
       ))};
  Definition {name = "max"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id "nat"),
              (Binder ("x",
                 (Pi (R, U, (Id "nat"), (Binder ("y", (Id "nat")))))))
              )),
           (Binder ((Some "max"),
              [([(PId "x"); (PId "y")],
                (Some (Match (
                         [(R, (Id "x"), (Some ("_", (Id "nat"))));
                           (R, (Id "y"), (Some ("_", (Id "nat"))))],
                         None,
                         [([(PId "zero"); (PId "j")], (Some (Id "j")));
                           ([(PId "i"); (PId "zero")], (Some (Id "i")));
                           ([(PMul ("succ", [(PId "i")]));
                              (PMul ("succ", [(PId "j")]))],
                            (Some (App
                                     [(Id "succ");
                                       (App [(Id "max"); (Id "i"); (Id "j")])
                                       ])))
                           ]
                         ))))
                ]
              ))
           )),
        (Pi (R, U, (Id "nat"),
           (Binder ("x", (Pi (R, U, (Id "nat"), (Binder ("y", (Id "nat")))))
              ))
           )))
       ))};
  Definition {name = "one"; relv = R;
    body = (Binder ([], ((App [(Id "succ"); (Id "zero")]), (Id "nat"))))};
  Definition {name = "two"; relv = R;
    body = (Binder ([], ((App [(Id "succ"); (Id "one")]), (Id "nat"))))};
  Definition {name = "three"; relv = R;
    body = (Binder ([], ((App [(Id "succ"); (Id "two")]), (Id "nat"))))}
  ]

-----------------------------------------

#[program]
inductive bool_1‹› : U where
| true_1 : bool_1
| false_2 : bool_1

#[program]
inductive unit_2‹› : U where
| tt_3 : unit_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_14 : nat_3) : nat_3

#[program]
def max_1‹› : nat_3 -> nat_3 -> nat_3 :=
  function max_17 : nat_3 -> nat_3 -> nat_3
  | x_20 y_21 =>
    match x_20, y_21 in ∀ (__22 : nat_3) -o ∀ (__23 : nat_3) -o ?_1 with
    | zero_4, j_24 => j_24
    | i_25, zero_4 => i_25
    | (succ_5 i_26), (succ_5 j_27) => (succ_5‹› (max_17) i_26 j_27)

#[program]
def one_2‹› : nat_3 := (succ_5‹› zero_4)

#[program]
def two_3‹› : nat_3 := (succ_5‹› one_2)

#[program]
def three_4‹› : nat_3 := (succ_5‹› two_3)

-----------------------------------------

infer_tm(bool_1)
infer_tm(bool_1)
infer_tm(unit_2)
infer_tm(nat_3)
infer_tm(nat_3)
infer_tm(nat_3)
infer_tm(nat_3 -> nat_3 -> nat_3)
infer_tm(nat_3)
infer_tm(nat_3 -> nat_3)
infer_tm(nat_3)
infer_tm(nat_3)
check_tm(function max_37 : nat_3 -> nat_3 -> nat_3
         | x_40 y_41 =>
           match x_40, y_41 in
             ∀ (__42 : nat_3) -o ∀ (__43 : nat_3) -o ?_1
           with
           | zero_4, j_44 => j_44
           | i_45, zero_4 => i_45
           | (succ_5 i_46), (succ_5 j_47) =>
             (succ_5‹› (max_37) i_46 j_47), nat_3 -> nat_3 -> nat_3)
infer_tm(function max_50 : nat_3 -> nat_3 -> nat_3
         | x_53 y_54 =>
           match x_53, y_54 in
             ∀ (__55 : nat_3) -o ∀ (__56 : nat_3) -o ?_1
           with
           | zero_4, j_57 => j_57
           | i_58, zero_4 => i_58
           | (succ_5 i_59), (succ_5 j_60) =>
             (succ_5‹› (max_50) i_59 j_60))
infer_tm(nat_3 -> nat_3 -> nat_3)
infer_tm(nat_3)
infer_tm(nat_3 -> nat_3)
infer_tm(nat_3)
infer_tm(nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #x_71, x_67 : nat_3) eq_pat?( #y_72, y_68 : nat_3) ::: [] =>?
         match #x_67, #y_68 in
           ∀ (__73 : nat_3) -o ∀ (__74 : nat_3) -o ?_1
         with
         | zero_4, j_75 => j_75
         | i_76, zero_4 => i_76
         | (succ_5 i_77), (succ_5 j_78) => (succ_5‹› (max_61) i_77 j_78)
    |}
  |}
|}
solve_pprm( eq_pat?( #x_71, x_67 : nat_3) eq_pat?( #y_72, y_68 : nat_3) )
case_coverage_ok(match #x_71, #y_72 in
                   ∀ (__88 : nat_3) -o ∀ (__89 : nat_3) -o ?_1
                 with
                 | zero_4, j_90 => j_90
                 | i_91, zero_4 => i_91
                 | (succ_5 i_92), (succ_5 j_93) =>
                   (succ_5‹› (max_61) i_92 j_93), nat_3)
check_tm(match #x_71, #y_72 in
           ∀ (__94 : nat_3) -o ∀ (__95 : nat_3) -o ?_1
         with
         | zero_4, j_96 => j_96
         | i_97, zero_4 => i_97
         | (succ_5 i_98), (succ_5 j_99) => (succ_5‹› (max_61) i_98 j_99), nat_3)
infer_tm(match #x_71, #y_72 in
           ∀ (__100 : nat_3) -o ∀ (__101 : nat_3) -o ?_1
         with
         | zero_4, j_102 => j_102
         | i_103, zero_4 => i_103
         | (succ_5 i_104), (succ_5 j_105) =>
           (succ_5‹› (max_61) i_104 j_105))
infer_tm(∀ (__106 : nat_3) -o ∀ (__107 : nat_3) -o ?_1)
infer_tm(nat_3)
infer_tm(∀ (__109 : nat_3) -o ?_1)
infer_tm(nat_3)
infer_tm(?_1)
delay_assert(?_2, ??_1)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3);
    {| eq_pat?( #__119, j_111 : nat_3) ::: [] =>? #j_111 |}
    {| eq_pat?( zero_4, i_112 : nat_3)
       eq_pat?( #__119, zero_4 : nat_3) ::: [] =>? #i_112
    |}
  |}
|}
solve_pprm( eq_term?( nat_3, nat_3) eq_pat?( #__119, j_111 : nat_3) )
case_coverage_ok(#__119, ?_1)
check_tm(#__119, ?_1)
infer_tm(#__119)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3) eq_term?( nat_3, nat_3);
    {| eq_pat?( (succ_5‹› #pred_124), i_112 : nat_3) ::: [] =>? #i_112 |}
  |}
|}
solve_pprm(
  eq_term?( nat_3, nat_3)
  eq_term?( nat_3, nat_3) eq_pat?( (succ_5‹› #pred_124), i_112 : nat_3)
)
case_coverage_ok((succ_5‹› #pred_124), ?_1)
check_tm((succ_5‹› #pred_124), ?_1)
infer_tm((succ_5‹› #pred_124))
check_tm(#pred_124, nat_3)
infer_tm(#pred_124)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3) eq_term?( nat_3, nat_3);
    {| eq_pat?( #pred_124, i_113 : nat_3)
       eq_pat?( #pred_131, j_114 : nat_3) ::: [] =>?
         (succ_5‹› (max_61) #i_113 #j_114)
    |}
  |}
|}
solve_pprm(
  eq_term?( nat_3, nat_3)
  eq_term?( nat_3, nat_3)
  eq_pat?( #pred_124, i_113 : nat_3) eq_pat?( #pred_131, j_114 : nat_3)
)
case_coverage_ok((succ_5‹› (max_61) #pred_124 #pred_131), ?_1)
check_tm((succ_5‹› (max_61) #pred_124 #pred_131), ?_1)
infer_tm((succ_5‹› (max_61) #pred_124 #pred_131))
check_tm((max_61) #pred_124 #pred_131, nat_3)
infer_tm((max_61) #pred_124 #pred_131)
infer_tm((max_61) #pred_124)
infer_tm(max_61)
check_tm(#pred_124, nat_3)
infer_tm(#pred_124)
check_tm(#pred_131, nat_3)
infer_tm(#pred_131)
check_tm(#x_71, nat_3)
infer_tm(#x_71)
check_tm(#y_72, nat_3)
infer_tm(#y_72)
loop_check(nat_3 Type‹??_1›)
infer_tm(Type‹??_1›)
check_tm(nat_3, Type‹??_1›)
infer_tm(nat_3)
infer_tm(nat_3)
check_tm((succ_5‹› zero_4), nat_3)
infer_tm((succ_5‹› zero_4))
check_tm(zero_4, nat_3)
infer_tm(zero_4)
infer_tm(nat_3)
check_tm((succ_5‹› one_2), nat_3)
infer_tm((succ_5‹› one_2))
check_tm(one_2, nat_3)
infer_tm(one_2)
infer_tm(nat_3)
check_tm((succ_5‹› two_3), nat_3)
infer_tm((succ_5‹› two_3))
check_tm(two_3, nat_3)
infer_tm(two_3)
smeta_meta {|
  ??_1 <= U
  
|}
imeta_meta {|
  ?_1 <= nat_3
  ?_2 <= Type‹??_1›
  
|}

#[program]
inductive bool_1‹› : U where
| true_1 : bool_1
| false_2 : bool_1

#[program]
inductive unit_2‹› : U where
| tt_3 : unit_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_192 : nat_3) : nat_3

#[program]
def max_1‹› : nat_3 -> nat_3 -> nat_3 :=
  function max_195 : nat_3 -> nat_3 -> nat_3
  | x_198 y_199 =>
    match x_198, y_199 in nat_3 -o nat_3 -o nat_3 with
    | zero_4, j_202 => j_202
    | i_203, zero_4 => i_203
    | (succ_5 i_204), (succ_5 j_205) => (succ_5‹› (max_195) i_204 j_205)

#[program]
def one_2‹› : nat_3 := (succ_5‹› zero_4)

#[program]
def two_3‹› : nat_3 := (succ_5‹› one_2)

#[program]
def three_4‹› : nat_3 := (succ_5‹› two_3)

-----------------------------------------

