[Inductive {name = "unit"; relv = R;
   body =
   (Binder ([],
      (PBase ((TBase (Type U)), [(DMul ("tt", (TBase (Id "unit"))))]))))};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DMul ("zero", (TBase (Id "nat"))));
             (DMul ("succ",
                (TBind (R, (Id "nat"), (Binder ("n", (TBase (Id "nat"))))))))
             ]))
       ))};
  Inductive {name = "prod"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Type (SId "r")),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DMul ("pair",
                           (TBind (R, (Id "A"),
                              (Binder ("m",
                                 (TBind (R, (Id "B"),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Inst ("prod",
                                                 [(SId "_"); (SId "_");
                                                   (SId "t")]
                                                 ));
                                               (Id "A"); (Id "B")]))
                                       ))
                                    ))
                                 ))
                              ))
                           ))
                         ]))
                   ))
                ))
             ))
          ))
       ))};
  Definition {name = "max"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id "nat"),
              (Binder ("_",
                 (Pi (R, U, (Id "nat"), (Binder ("_", (Id "nat")))))))
              )),
           (Binder ((Some "max"),
              [([(PId "zero"); (PId "y")], (Some (Id "y")));
                ([(PId "x"); (PId "zero")], (Some (Id "x")));
                ([(PMul ("succ", [(PId "x")])); (PMul ("succ", [(PId "y")]))],
                 (Some (App
                          [(Id "succ");
                            (App [(Id "max"); (Id "x"); (Id "y")])])))
                ]
              ))
           )),
        (Pi (R, U, (Id "nat"),
           (Binder ("_", (Pi (R, U, (Id "nat"), (Binder ("_", (Id "nat")))))
              ))
           )))
       ))}
  ]

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive nat_2‹› : U where
| zero_2 : nat_2
| succ_3 (n_22 : nat_2) : nat_2

#[program]
inductive prod_3‹s_23,r_24,t_25› (A_26 : Type‹s_23›) (B_27 : Type‹r_24›):
  Type‹t_25›
where
| pair_4 (m_28 : A_26) (n_29 : B_27) : (prod_3‹??_1,??_2,t_25› A_26 B_27)

#[program]
def max_1‹› : nat_2 -> nat_2 -> nat_2 :=
  function max_32 : nat_2 -> nat_2 -> nat_2
  | zero_2 y_35 => y_35
  | x_36 zero_2 => x_36
  | (succ_3 x_37) (succ_3 y_38) => (succ_3‹› (max_32) x_37 y_38)

-----------------------------------------

group0 {|
  
  
|}

group1 {|
  
  
|}

group2 {|
  equal_tm? (Type‹??_2›, Type‹r_46›);
  equal_tm? (Type‹??_1›, Type‹s_45›);
  equal_sort? (r_46, ??_2);
  equal_sort? (s_45, ??_1)
  
|}

group3 {|
  
  
|}

-----------------------------------------

