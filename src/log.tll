[Definition {name = "llist"; relv = N;
   body =
   (Binder (["s"],
      ((Fun ((Pi (R, U, (Type (SId "s")), (Binder ("A", IMeta)))),
          (Binder ((Some "llist"),
             [([(PId "A")],
               (Some (App [(Inst ("list", [(SId "_"); L], I)); (Id ("A", I))])))
               ]
             )),
          [E])),
       (Pi (R, U, (Type (SId "s")), (Binder ("A", IMeta)))))
      ));
   view = [E]};
  Inductive {name = "opr"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type L)),
                 [(DConstr ("Ins",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("x",
                           (TBase (App [(Id ("opr", I)); (Id ("A", I))]))))
                        )),
                     [E]));
                   (DConstr ("Del",
                      (TBase (App [(Id ("opr", I)); (Id ("A", I))])), 
                      []))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Definition {name = "queue_p"; relv = N;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (R, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                    (Binder ("xs", Proto))))
                 ))
              )),
           (Binder ((Some "queue_p"),
              [([(PId "A"); (PId "xs")],
                (Some (Act (R, false, (App [(Id ("opr", I)); (Id ("A", I))]),
                         (Binder ("o",
                            (Match ([(R, (Id ("o", I)), None)], None,
                               [([(PConstr ("Ins", [(PId "x")]))],
                                 (Some (App
                                          [(Id ("queue_p", I));
                                            (App
                                               [(Id ("rcons", I));
                                                 (Id ("xs", I));
                                                 (Id ("x", I))])
                                            ])));
                                 ([(PId "Del")],
                                  (Some (Match ([(R, (Id ("xs", I)), None)],
                                           None,
                                           [([(PBOpr ("::", (PId "x"),
                                                 (PId "xs")))
                                               ],
                                             (Some (Act (R, true,
                                                      (UOpr ("`",
                                                         (Id ("x", I)))),
                                                      (Binder ("_",
                                                         (Act (R, true,
                                                            (Ch (false,
                                                               (App
                                                                  [(Id (
                                                                    "queue_p",
                                                                    I));
                                                                    (
                                                                    Id ("xs",
                                                                    I))])
                                                               )),
                                                            (Binder ("_", End
                                                               ))
                                                            ))
                                                         ))
                                                      ))));
                                             ([(PId "nil")], (Some End))]
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (R, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                 (Binder ("xs", Proto))))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "queue_ch"; relv = N;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (R, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                    (Binder ("xs", (Type L)))))
                 ))
              )),
           (Binder ((Some "queue_ch"),
              [([(PId "A"); (PId "xs")],
                (Some (Ch (true, (App [(Id ("queue_p", I)); (Id ("xs", I))])
                         ))))
                ]
              )),
           [I; E])),
        (Pi (R, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                 (Binder ("xs", (Type L)))))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "queue_hc"; relv = N;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (R, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                    (Binder ("xs", (Type L)))))
                 ))
              )),
           (Binder ((Some "queue_hc"),
              [([(PId "A"); (PId "xs")],
                (Some (Ch (false, (App [(Id ("queue_p", I)); (Id ("xs", I))])
                         ))))
                ]
              )),
           [I; E])),
        (Pi (R, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                 (Binder ("xs", (Type L)))))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "queue"; relv = N;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (R, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                    (Binder ("xs", (Type L)))))
                 ))
              )),
           (Binder ((Some "queue"),
              [([(PId "A"); (PId "xs")],
                (Some (IO (App [(Id ("queue_hc", I)); (Id ("xs", I))]))))]
              )),
           [I; E])),
        (Pi (R, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                 (Binder ("xs", (Type L)))))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "node_worker"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                    (Binder ("xs",
                       (Pi (R, U, (Id ("A", I)),
                          (Binder ("x",
                             (Pi (R, L,
                                (App [(Id ("queue_hc", I)); (Id ("xs", I))]),
                                (Binder ("_",
                                   (Pi (R, L,
                                      (App
                                         [(Id ("queue_ch", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))))
                                           ]),
                                      (Binder ("_", (IO (Id ("unit", I)))))))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "node_worker"),
              [([(PId "A"); (PId "xs"); (PId "x"); (PId "c_next"); (PId "c")],
                (Some (MLet ((Recv (Id ("c", I))),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "o"),
                               (PId "c"))),
                            (Match (
                               [(R, (Id ("o", I)), (Some ("o0", IMeta)));
                                 (R, (Id ("c", I)),
                                  (Some ("_",
                                         (Ch (true,
                                            (Match (
                                               [(R, (Id ("o0", I)), None)],
                                               None,
                                               [([(PConstr ("Ins",
                                                     [(PId "y")]))
                                                   ],
                                                 (Some (App
                                                          [(Id ("queue_p", I
                                                              ));
                                                            (App
                                                               [(Id ("rcons",
                                                                   I));
                                                                 (BOpr ("::",
                                                                    (
                                                                    Id ("x",
                                                                    I)),
                                                                    (
                                                                    Id ("xs",
                                                                    I))));
                                                                 (Id ("y", I
                                                                    ))
                                                                 ])
                                                            ])));
                                                 ([(PId "Del")],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (Id ("x", I)))),
                                                           (Binder ("_",
                                                              (Act (R, true,
                                                                 (Ch (false,
                                                                    (
                                                                    App
                                                                    [(Id (
                                                                    "queue_p",
                                                                    I));
                                                                    (Id (
                                                                    "xs", I))
                                                                    ]))),
                                                                 (Binder (
                                                                    "_", End
                                                                    ))
                                                                 ))
                                                              ))
                                                           ))))
                                                 ]
                                               ))
                                            )))))
                                 ],
                               None,
                               [([(PConstr ("Ins", [(PId "y")])); (PId "c")],
                                 (Some (MLet (
                                          (App
                                             [(Send (Id ("c_next", I)));
                                               (App
                                                  [(Id ("Ins", I));
                                                    (Id ("y", I))])
                                               ]),
                                          (Binder ((PId "c_next"),
                                             (App
                                                [(Id ("node_worker", I));
                                                  (Id ("x", I));
                                                  (Id ("c_next", I));
                                                  (Id ("c", I))])
                                             ))
                                          ))));
                                 ([(PId "Del"); (PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("c", I)));
                                                (App
                                                   [(Id ("just", I));
                                                     (Id ("x", I))])
                                                ]),
                                           (Binder ((PId "c"),
                                              (MLet (
                                                 (App
                                                    [(Send (Id ("c", I)));
                                                      (Id ("c_next", I))]),
                                                 (Binder ((PId "c"),
                                                    (Close (Id ("c", I)))))
                                                 ))
                                              ))
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [I; I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                 (Binder ("xs",
                    (Pi (R, U, (Id ("A", I)),
                       (Binder ("x",
                          (Pi (R, L,
                             (App [(Id ("queue_hc", I)); (Id ("xs", I))]),
                             (Binder ("_",
                                (Pi (R, L,
                                   (App
                                      [(Id ("queue_ch", I));
                                        (BOpr ("::", (Id ("x", I)),
                                           (Id ("xs", I))))
                                        ]),
                                   (Binder ("_", (IO (Id ("unit", I)))))))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; E]};
  Definition {name = "empty_worker"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U,
                    (App
                       [(Id ("queue_ch", I));
                         (App [(Id ("nil", E)); (Id ("A", I))])]),
                    (Binder ("c", (IO (Id ("unit", I)))))))
                 ))
              )),
           (Binder ((Some "empty_worker"),
              [([(PId "A"); (PId "c")],
                (Some (MLet ((Recv (Id ("c", I))),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "o"),
                               (PId "c"))),
                            (Match (
                               [(R, (Id ("o", I)), (Some ("o0", IMeta)));
                                 (R, (Id ("c", I)),
                                  (Some ("_",
                                         (Ch (true,
                                            (Match (
                                               [(R, (Id ("o0", I)), None)],
                                               None,
                                               [([(PConstr ("Ins",
                                                     [(PId "x")]))
                                                   ],
                                                 (Some (App
                                                          [(Id ("queue_p", I
                                                              ));
                                                            (BOpr ("::",
                                                               (Id ("x", I)),
                                                               (Id ("nil", I
                                                                  ))
                                                               ))
                                                            ])));
                                                 ([(PId "Del")], (Some End))]
                                               ))
                                            )))))
                                 ],
                               None,
                               [([(PConstr ("Ins", [(PId "x")])); (PId "c")],
                                 (Some (MLet (
                                          (Fork
                                             (Fun (
                                                (Pi (R, L,
                                                   (App
                                                      [(Id ("queue_ch", I));
                                                        (Id ("nil", I))]),
                                                   (Binder ("",
                                                      (IO (Id ("unit", I)))))
                                                   )),
                                                (Binder (None,
                                                   [([(PId "c0")],
                                                     (Some (App
                                                              [(Id (
                                                                  "empty_worker",
                                                                  I));
                                                                (Id ("c0", I
                                                                   ))
                                                                ])))
                                                     ]
                                                   )),
                                                []))),
                                          (Binder ((PId "c0"),
                                             (App
                                                [(Id ("node_worker", I));
                                                  (Id ("x", I));
                                                  (Id ("c0", I));
                                                  (Id ("c", I))])
                                             ))
                                          ))));
                                 ([(PId "Del"); (PId "c")],
                                  (Some (Close (Id ("c", I)))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U,
                 (App
                    [(Id ("queue_ch", I));
                      (App [(Id ("nil", E)); (Id ("A", I))])]),
                 (Binder ("c", (IO (Id ("unit", I)))))))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "empty"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (App
                    [(Id ("queue", I));
                      (App [(Id ("nil", E)); (Id ("A", I))])])
                 ))
              )),
           (Binder ((Some "empty"),
              [([(PId "A")],
                (Some (Fork
                         (Fun (
                            (Pi (R, L,
                               (App [(Id ("queue_ch", I)); (Id ("nil", I))]),
                               (Binder ("", (IO (Id ("unit", I))))))),
                            (Binder (None,
                               [([(PId "c")],
                                 (Some (App
                                          [(Id ("empty_worker", I));
                                            (Id ("c", I))])))
                                 ]
                               )),
                            [])))))
                ]
              )),
           [I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (App
                 [(Id ("queue", I)); (App [(Id ("nil", E)); (Id ("A", I))])])
              ))
           )))
       ));
    view = [I]};
  Definition {name = "ins"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                    (Binder ("xs",
                       (Pi (R, U, (Id ("A", I)),
                          (Binder ("x",
                             (Pi (R, L,
                                (App [(Id ("queue", I)); (Id ("xs", I))]),
                                (Binder ("_",
                                   (App
                                      [(Id ("queue", I));
                                        (App
                                           [(Id ("rcons", I));
                                             (Id ("xs", I)); (Id ("x", I))])
                                        ])
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "ins"),
              [([(PId "A"); (PId "xs"); (PId "x"); (PId "q")],
                (Some (MLet ((Id ("q", I)),
                         (Binder ((PId "q"),
                            (MLet (
                               (App
                                  [(Send (Id ("q", I)));
                                    (App [(Id ("Ins", I)); (Id ("x", I))])]),
                               (Binder ((PId "q"), (Return (Id ("q", I)))))))
                            ))
                         ))))
                ]
              )),
           [I; I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                 (Binder ("xs",
                    (Pi (R, U, (Id ("A", I)),
                       (Binder ("x",
                          (Pi (R, L,
                             (App [(Id ("queue", I)); (Id ("xs", I))]),
                             (Binder ("_",
                                (App
                                   [(Id ("queue", I));
                                     (App
                                        [(Id ("rcons", I)); (Id ("xs", I));
                                          (Id ("x", I))])
                                     ])
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; E]};
  Definition {name = "del"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("A", I)),
                    (Binder ("x",
                       (Pi (N, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                          (Binder ("xs",
                             (Pi (R, U,
                                (App
                                   [(Id ("queue", I));
                                     (BOpr ("::", (Id ("x", I)),
                                        (Id ("xs", I))))
                                     ]),
                                (Binder ("q",
                                   (IO
                                      (BOpr ("\226\138\151",
                                         (UOpr ("`", (Id ("x", I)))),
                                         (App
                                            [(Id ("queue", I));
                                              (Id ("xs", I))])
                                         )))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "del"),
              [([(PId "A"); (PId "x"); (PId "xs"); (PId "q")],
                (Some (MLet ((Id ("q", I)),
                         (Binder ((PId "q"),
                            (MLet (
                               (App [(Send (Id ("q", I))); (Id ("Del", I))]),
                               (Binder ((PId "q"),
                                  (MLet ((Recv (Id ("q", I))),
                                     (Binder (
                                        (PBOpr ("\226\159\168,\226\159\169",
                                           (PId "n"), (PId "q"))),
                                        (MLet ((Recv (Id ("q", I))),
                                           (Binder (
                                              (PBOpr (
                                                 "\226\159\168,\226\159\169",
                                                 (PId "q0"), (PId "q"))),
                                              (BOpr (";",
                                                 (Close (Id ("q", I))),
                                                 (Return
                                                    (BOpr (
                                                       "\226\159\168,\226\159\169",
                                                       (Id ("n", I)),
                                                       (Return (Id ("q0", I)))
                                                       )))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [I; I; I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("A", I)),
                 (Binder ("x",
                    (Pi (N, U, (App [(Id ("llist", I)); (Id ("A", I))]),
                       (Binder ("xs",
                          (Pi (R, U,
                             (App
                                [(Id ("queue", I));
                                  (BOpr ("::", (Id ("x", I)), (Id ("xs", I))
                                     ))
                                  ]),
                             (Binder ("q",
                                (IO
                                   (BOpr ("\226\138\151",
                                      (UOpr ("`", (Id ("x", I)))),
                                      (App
                                         [(Id ("queue", I)); (Id ("xs", I))])
                                      )))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; I; E]};
  Definition {name = "free"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U,
                    (App
                       [(Id ("queue", I));
                         (App [(Id ("nil", E)); (Id ("A", I))])]),
                    (Binder ("q", (IO (Id ("unit", I)))))))
                 ))
              )),
           (Binder ((Some "free"),
              [([(PId "A"); (PId "q")],
                (Some (MLet ((Id ("q", I)),
                         (Binder ((PId "q"),
                            (MLet (
                               (App [(Send (Id ("q", I))); (Id ("Del", I))]),
                               (Binder ((PId "q"), (Close (Id ("q", I)))))))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U,
                 (App
                    [(Id ("queue", I));
                      (App [(Id ("nil", E)); (Id ("A", I))])]),
                 (Binder ("q", (IO (Id ("unit", I)))))))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "myqueue"; relv = R;
    body = (Binder ([], ((App [(Id ("empty", E)); Int_t]), IMeta)));
    view = []};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("ins", I)); (Int 0); (Id ("myqueue", I))]), IMeta)));
    view = []};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("ins", I)); (Int 1); (Id ("myqueue", I))]), IMeta)));
    view = []};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("ins", I)); (Int 2); (Id ("myqueue", I))]), IMeta)));
    view = []};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("ins", I)); (Int 3); (Id ("myqueue", I))]), IMeta)));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((MLet ((App [(Id ("del", I)); (Id ("myqueue", I))]),
           (Binder (
              (PBOpr ("\226\159\168,\226\159\169",
                 (PConstr ("just", [(PId "a")])), (PId "myqueue"))),
              (MLet ((App [(Id ("del", I)); (Id ("myqueue", I))]),
                 (Binder (
                    (PBOpr ("\226\159\168,\226\159\169",
                       (PConstr ("just", [(PId "b")])), (PId "myqueue"))),
                    (MLet ((App [(Id ("del", I)); (Id ("myqueue", I))]),
                       (Binder (
                          (PBOpr ("\226\159\168,\226\159\169",
                             (PConstr ("just", [(PId "c")])), (PId "myqueue")
                             )),
                          (MLet (
                             (App [(Id ("del", I)); (Id ("myqueue", I))]),
                             (Binder (
                                (PBOpr ("\226\159\168,\226\159\169",
                                   (PConstr ("just", [(PId "d")])),
                                   (PId "myqueue"))),
                                (MLet (
                                   (App
                                      [(Id ("free", I)); (Id ("myqueue", I))]),
                                   (Binder ((PId "tt"),
                                      (Print
                                         (BOpr ("++",
                                            (BOpr ("++",
                                               (BOpr ("++",
                                                  (BOpr ("++",
                                                     (BOpr ("++",
                                                        (BOpr ("++",
                                                           (BOpr ("++",
                                                              (BOpr ("++",
                                                                 (BOpr ("++",
                                                                    (
                                                                    BOpr (
                                                                    "++",
                                                                    (BOpr (
                                                                    "++",
                                                                    (String
                                                                    "a := "),
                                                                    (App
                                                                    [(Id (
                                                                    "string_of_int",
                                                                    I));
                                                                    (Id ("a",
                                                                    I))]))),
                                                                    (String
                                                                    "\n"))),
                                                                    (
                                                                    String
                                                                    "b := ")
                                                                    )),
                                                                 (App
                                                                    [(Id (
                                                                    "string_of_int",
                                                                    I));
                                                                    (Id ("b",
                                                                    I))])
                                                                 )),
                                                              (String "\n"))),
                                                           (String "c := "))),
                                                        (App
                                                           [(Id (
                                                               "string_of_int",
                                                               I));
                                                             (Id ("c", I))])
                                                        )),
                                                     (String "\n"))),
                                                  (String "d := "))),
                                               (App
                                                  [(Id ("string_of_int", I));
                                                    (Id ("d", I))])
                                               )),
                                            (String "\n"))))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

[parse success]

-----------------------------------------

#[logical]
def llist_34‹s_599› : Type‹s_599› -> ?_66[0;0] :=
  (fun llist_601 : Type‹s_599› -> ?_65[0;0]
  | A_603 => (list_7‹??_62,L› A_603))

#[program]
inductive opr_11‹s_604› (A_605 : Type‹s_604›): L where
| Ins_15 (x_606 : A_605) : (opr_11‹??_63› A_605)
| Del_16 : (opr_11‹??_64› A_605)

#[logical]
def queue_p_35‹s_607› :
  ∀ (A_608 : Type‹s_607›) -> ((llist_34‹??_70›) A_608) -> proto
:=
  (fun queue_p_610 :
    ∀ (A_611 : Type‹s_607›) -> ((llist_34‹??_65›) A_611) -> proto
  | A_613, xs_614 =>
    ⇓(o_615 : (opr_11‹??_66› A_613)) ⇒
      (match o_615 in ?_67[0;0] -o ?_68[0;0] with
      | (Ins_15 x_617) =>
        ((queue_p_610)
          ?_70[0;0] ((rcons_24‹??_67,??_68›) ?_69[0;0] xs_614 x_617))
      | Del_16 =>
        (match xs_614 in ?_71[0;0] -o ?_72[0;0] with
        | (cons_11 x_619 xs_620) =>
          ⇑(__621 : ((ssing_6‹??_69›) ?_73[0;0] x_619)) ⇒
            ⇑(__622 : hc⟨((queue_p_610) ?_74[0;0] xs_620)⟩) ⇒ •
        | nil_10 => •)))

#[logical]
def queue_ch_36‹s_623› :
  ∀ (A_624 : Type‹s_623›) -> ((llist_34‹??_73›) A_624) -> L
:=
  (fun queue_ch_626 :
    ∀ (A_627 : Type‹s_623›) -> ((llist_34‹??_71›) A_627) -> L
  | A_629, xs_630 => ch⟨((queue_p_35‹??_72›) ?_75[0;0] xs_630)⟩)

#[logical]
def queue_hc_37‹s_631› :
  ∀ (A_632 : Type‹s_631›) -> ((llist_34‹??_76›) A_632) -> L
:=
  (fun queue_hc_634 :
    ∀ (A_635 : Type‹s_631›) -> ((llist_34‹??_74›) A_635) -> L
  | A_637, xs_638 => hc⟨((queue_p_35‹??_75›) ?_76[0;0] xs_638)⟩)

#[logical]
def queue_38‹s_639› :
  ∀ (A_640 : Type‹s_639›) -> ((llist_34‹??_79›) A_640) -> L
:=
  (fun queue_642 :
    ∀ (A_643 : Type‹s_639›) -> ((llist_34‹??_77›) A_643) -> L
  | A_645, xs_646 => IO ((queue_hc_37‹??_78›) ?_77[0;0] xs_646))

#[program]
def node_worker_39‹s_647› :
  ∀ {A_648 : Type‹s_647›} ->
    ∀ {xs_649 : ((llist_34‹??_95›) A_648)} ->
      ∀ (x_650 : A_648) ->
        ((queue_hc_37‹??_96›) ?_96[0;0] xs_649) -o
          ((queue_ch_36‹??_99›)
            ?_98[0;0] (cons_11‹??_97,??_98› ?_97[0;0] x_650 xs_649)) -o
            IO unit_9
:=
  (fun node_worker_653 :
    ∀ {A_654 : Type‹s_647›} ->
      ∀ {xs_655 : ((llist_34‹??_80›) A_654)} ->
        ∀ (x_656 : A_654) ->
          ((queue_hc_37‹??_81›) ?_78[0;0] xs_655) -o
            ((queue_ch_36‹??_84›)
              ?_80[0;0] (cons_11‹??_82,??_83› ?_79[0;0] x_656 xs_655)) -o
              IO unit_9
  | A_659, xs_660, x_661, c_next_662, c_663 =>
    let* _664 := recv c_663 in
    (match _664 in ?_95[0;0] -o ?_94[0;0] with
    | (ex1_14 o_666 c_667) =>
      (match o_666, c_667 in
         ∀ (o0_668 : ?_81[0;0]) -o
           ch⟨(match o0_668 in ?_82[0;0] -o ?_83[0;0] with
                | (Ins_15 y_671) =>
                  ((queue_p_35‹??_89›)
                    ?_86[0;0]
                    ((rcons_24‹??_87,??_88›)
                      ?_85[0;0]
                      (cons_11‹??_85,??_86› ?_84[0;0] x_661 xs_660) y_671))
                | Del_16 =>
                  ⇑(__672 : ((ssing_6‹??_90›) ?_87[0;0] x_661)) ⇒
                    ⇑(__673 :
                      hc⟨((queue_p_35‹??_91›) ?_88[0;0] xs_660)⟩) ⇒
                      •)⟩ -o
             ?_89[0;0]
       with
      | (Ins_15 y_674), c_675 =>
        let* c_next_676 :=
          ((send c_next_662) (Ins_15‹??_92› ?_90[0;0] y_674))
        in ((node_worker_653) ?_92[0;0] ?_91[0;0] x_661 c_next_676 c_675)
      | Del_16, c_677 =>
        let* c_678 :=
          ((send c_677) (just_2‹??_93,??_94› ?_93[0;0] x_661))
        in let* c_679 := ((send c_678) c_next_662) in close c_679)))

#[program]
def empty_worker_40‹s_680› :
  ∀ {A_681 : Type‹s_680›} ->
    ((queue_ch_36‹??_114›) ?_114[0;0] (nil_10‹??_112,??_113› A_681)) ->
      IO unit_9
:=
  (fun empty_worker_683 :
    ∀ {A_684 : Type‹s_680›} ->
      ((queue_ch_36‹??_102›) ?_99[0;0] (nil_10‹??_100,??_101› A_684)) ->
        IO unit_9
  | A_686, c_687 =>
    let* _688 := recv c_687 in
    (match _688 in ?_113[0;0] -o ?_112[0;0] with
    | (ex1_14 o_690 c_691) =>
      (match o_690, c_691 in
         ∀ (o0_692 : ?_100[0;0]) -o
           ch⟨(match o0_692 in ?_101[0;0] -o ?_102[0;0] with
                | (Ins_15 x_695) =>
                  ((queue_p_35‹??_107›)
                    ?_105[0;0]
                    (cons_11‹??_105,??_106›
                      ?_104[0;0] x_695 (nil_10‹??_103,??_104› ?_103[0;0])))
                | Del_16 => •)⟩ -o
             ?_106[0;0]
       with
      | (Ins_15 x_696), c_697 =>
        let* c0_698 :=
          fork
            (fun _699 :
              ((queue_ch_36‹??_110›)
                ?_108[0;0] (nil_10‹??_108,??_109› ?_107[0;0])) -o
                IO unit_9
            | c0_701 => ((empty_worker_683) ?_109[0;0] c0_701))
        in
        ((node_worker_39‹??_111›)
          ?_111[0;0] ?_110[0;0] x_696 c0_698 c_697)
      | Del_16, c_702 => close c_702)))

#[program]
def empty_41‹s_703› :
  ∀ {A_704 : Type‹s_703›} ->
    ((queue_38‹??_124›) ?_119[0;0] (nil_10‹??_122,??_123› A_704))
:=
  (fun empty_705 :
    ∀ {A_706 : Type‹s_703›} ->
      ((queue_38‹??_117›) ?_115[0;0] (nil_10‹??_115,??_116› A_706))
  | A_707 =>
    fork
      (fun _708 :
        ((queue_ch_36‹??_120›)
          ?_117[0;0] (nil_10‹??_118,??_119› ?_116[0;0])) -o IO unit_9
      | c_710 => ((empty_worker_40‹??_121›) ?_118[0;0] c_710)))

#[program]
def ins_42‹s_711› :
  ∀ {A_712 : Type‹s_711›} ->
    ∀ {xs_713 : ((llist_34‹??_131›) A_712)} ->
      ∀ (x_714 : A_712) ->
        ((queue_38‹??_132›) ?_124[0;0] xs_713) -o
          ((queue_38‹??_135›)
            ?_126[0;0]
            ((rcons_24‹??_133,??_134›) ?_125[0;0] xs_713 x_714))
:=
  (fun ins_716 :
    ∀ {A_717 : Type‹s_711›} ->
      ∀ {xs_718 : ((llist_34‹??_125›) A_717)} ->
        ∀ (x_719 : A_717) ->
          ((queue_38‹??_126›) ?_120[0;0] xs_718) -o
            ((queue_38‹??_129›)
              ?_122[0;0]
              ((rcons_24‹??_127,??_128›) ?_121[0;0] xs_718 x_719))
  | A_721, xs_722, x_723, q_724 =>
    let* q_725 := q_724 in
    let* q_726 := ((send q_725) (Ins_15‹??_130› ?_123[0;0] x_723)) in
    return q_726)

#[program]
def del_43‹s_727› :
  ∀ {A_728 : Type‹s_727›} ->
    ∀ {x_729 : A_728} ->
      ∀ {xs_730 : ((llist_34‹??_147›) A_728)} ->
        ((queue_38‹??_150›)
          ?_139[0;0] (cons_11‹??_148,??_149› ?_138[0;0] x_729 xs_730)) ->
          IO ((tensor_26‹??_153,??_154›)
               ((ssing_6‹??_151›) ?_140[0;0] x_729)
               ((queue_38‹??_152›) ?_141[0;0] xs_730))
:=
  (fun del_732 :
    ∀ {A_733 : Type‹s_727›} ->
      ∀ {x_734 : A_733} ->
        ∀ {xs_735 : ((llist_34‹??_136›) A_733)} ->
          ((queue_38‹??_139›)
            ?_128[0;0] (cons_11‹??_137,??_138› ?_127[0;0] x_734 xs_735)) ->
            IO ((tensor_26‹??_142,??_143›)
                 ((ssing_6‹??_140›) ?_129[0;0] x_734)
                 ((queue_38‹??_141›) ?_130[0;0] xs_735))
  | A_737, x_738, xs_739, q_740 =>
    let* q_741 := q_740 in
    let* q_742 := ((send q_741) (Del_16‹??_144› ?_131[0;0])) in
    let* _743 := recv q_742 in
    (match _743 in ?_137[0;0] -o ?_136[0;0] with
    | (ex1_14 n_745 q_746) =>
      let* _747 := recv q_746 in
      (match _747 in ?_135[0;0] -o ?_134[0;0] with
      | (ex1_14 q0_749 q_750) =>
        let* __751 := close q_750 in
        return (ex1_14‹??_145,??_146›
                 ?_132[0;0] ?_133[0;0] n_745 return q0_749))))

#[program]
def free_44‹s_752› :
  ∀ {A_753 : Type‹s_752›} ->
    ((queue_38‹??_161›) ?_144[0;0] (nil_10‹??_159,??_160› A_753)) ->
      IO unit_9
:=
  (fun free_755 :
    ∀ {A_756 : Type‹s_752›} ->
      ((queue_38‹??_157›) ?_142[0;0] (nil_10‹??_155,??_156› A_756)) ->
        IO unit_9
  | A_758, q_759 =>
    let* q_760 := q_759 in
    let* q_761 := ((send q_760) (Del_16‹??_158› ?_143[0;0])) in
    close q_761)

#[program]
def myqueue_45‹› : ?_145[0;0] := ((empty_41‹??_162›) int)

#[program]
def myqueue_46‹› : ?_148[0;0] :=
  ((ins_42‹??_163›) ?_147[0;0] ?_146[0;0] 0 myqueue_45)

#[program]
def myqueue_47‹› : ?_151[0;0] :=
  ((ins_42‹??_164›) ?_150[0;0] ?_149[0;0] 1 myqueue_46)

#[program]
def myqueue_48‹› : ?_154[0;0] :=
  ((ins_42‹??_165›) ?_153[0;0] ?_152[0;0] 2 myqueue_47)

#[program]
def myqueue_49‹› : ?_157[0;0] :=
  ((ins_42‹??_166›) ?_156[0;0] ?_155[0;0] 3 myqueue_48)

#[program]
def main_50‹› : IO unit_9 :=
  let* _762 :=
    ((del_43‹??_167›) ?_160[0;0] ?_159[0;0] ?_158[0;0] myqueue_49)
  in
  (match _762 in ?_180[0;0] -o ?_179[0;0] with
  | (ex1_14 (just_2 a_764) myqueue_765) =>
    let* _766 :=
      ((del_43‹??_168›) ?_163[0;0] ?_162[0;0] ?_161[0;0] myqueue_765)
    in
    (match _766 in ?_178[0;0] -o ?_177[0;0] with
    | (ex1_14 (just_2 b_768) myqueue_769) =>
      let* _770 :=
        ((del_43‹??_169›) ?_166[0;0] ?_165[0;0] ?_164[0;0] myqueue_769)
      in
      (match _770 in ?_176[0;0] -o ?_175[0;0] with
      | (ex1_14 (just_2 c_772) myqueue_773) =>
        let* _774 :=
          ((del_43‹??_170›) ?_169[0;0] ?_168[0;0] ?_167[0;0] myqueue_773)
        in
        (match _774 in ?_174[0;0] -o ?_173[0;0] with
        | (ex1_14 (just_2 d_776) myqueue_777) =>
          let* _778 := ((free_44‹??_171›) ?_170[0;0] myqueue_777) in
          (match _778 in ?_172[0;0] -o ?_171[0;0] with
          | tt_3 =>
            print
              (__cat__
                (__cat__
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__
                            (__cat__
                              (__cat__
                                (__cat__
                                  (__cat__ "a := "
                                    ((string_of_int_33) a_764))
                                  "\n")
                                "b := ")
                              ((string_of_int_33) b_768))
                            "\n")
                          "c := ")
                        ((string_of_int_33) c_772))
                      "\n")
                    "d := ")
                  ((string_of_int_33) d_776))
                "\n"))))))

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_41038› :
  ∀ (A_41039 : Type‹s_41038›) -> A_41039 -> A_41039
:=
  (fun id_41041 : ∀ (A_41042 : Type‹s_41038›) -> A_41042 -> A_41042
  | A_41044, m_41045 => m_41045)

#[logical]
inductive eq_1‹s_41046› (A_41047 : Type‹s_41046›) (m_41048 : A_41047):
  A_41047 -> U
where
| refl_1 : (eq_1‹s_41046› A_41047 m_41048 m_41048)

#[program]
def rwl_2‹s_41050,r_41051› :
  ∀ {A_41052 : Type‹s_41050›} ->
    ∀ {m_41053 : A_41052} ->
      ∀ {n_41054 : A_41052} ->
        ∀ {B_41055 : A_41052 -> Type‹r_41051›} ->
          {(eq_1‹s_41050› A_41052 m_41053 n_41054)} ->
            ((B_41055) m_41053) -> ((B_41055) n_41054)
:=
  (fun rwl_41059 :
    ∀ {A_41060 : Type‹s_41050›} ->
      ∀ {m_41061 : A_41060} ->
        ∀ {n_41062 : A_41060} ->
          ∀ {B_41063 : A_41060 -> Type‹r_41051›} ->
            {(eq_1‹s_41050› A_41060 m_41061 n_41062)} ->
              ((B_41063) m_41061) -> ((B_41063) n_41062)
  | A_41067, m_41068, n_41069, B_41070, refl_1, __41071 => __41071)

#[program]
def rwr_3‹s_41072,r_41073› :
  ∀ {A_41074 : Type‹s_41072›} ->
    ∀ {m_41075 : A_41074} ->
      ∀ {n_41076 : A_41074} ->
        ∀ {B_41077 : A_41074 -> Type‹r_41073›} ->
          {(eq_1‹s_41072› A_41074 m_41075 n_41076)} ->
            ((B_41077) n_41076) -> ((B_41077) m_41075)
:=
  (fun rwr_41081 :
    ∀ {A_41082 : Type‹s_41072›} ->
      ∀ {m_41083 : A_41082} ->
        ∀ {n_41084 : A_41082} ->
          ∀ {B_41085 : A_41082 -> Type‹r_41073›} ->
            {(eq_1‹s_41072› A_41082 m_41083 n_41084)} ->
              ((B_41085) n_41084) -> ((B_41085) m_41083)
  | A_41089, m_41090, n_41091, B_41092, refl_1, __41093 => __41093)

#[logical]
def congr_4‹s_41094,r_41095,t_41096› :
  ∀ (A_41097 : Type‹s_41094›) ->
    ∀ (B_41098 : Type‹r_41095›) ->
      ∀ (m_41099 : A_41097) ->
        ∀ (n_41100 : A_41097) ->
          ∀ (f_41101 : forall‹t_41096›(__41102 : A_41097), B_41098) ->
            (eq_1‹s_41094› A_41097 m_41099 n_41100) ->
              (eq_1‹r_41095›
                B_41098 ((f_41101) m_41099) ((f_41101) n_41100))
:=
  (fun congr_41104 :
    ∀ (A_41105 : Type‹s_41094›) ->
      ∀ (B_41106 : Type‹r_41095›) ->
        ∀ (m_41107 : A_41105) ->
          ∀ (n_41108 : A_41105) ->
            ∀ (f_41109 :
              forall‹t_41096›(__41110 : A_41105), B_41106) ->
              (eq_1‹s_41094› A_41105 m_41107 n_41108) ->
                (eq_1‹r_41095›
                  B_41106 ((f_41109) m_41107) ((f_41109) n_41108))
  | A_41112, B_41113, m_41114, n_41115, f_41116, refl_1 =>
    (refl_1‹r_41095› B_41113 ((f_41116) n_41115)))

#[logical]
def axiom_K_5‹› :
  ∀ {A_41117 : U} ->
    ∀ {m_41118 : A_41117} ->
      ∀ (x_41119 : (eq_1‹U› A_41117 m_41118 m_41118)) ->
        (eq_1‹U›
          (eq_1‹U› A_41117 m_41118 m_41118) x_41119
          (refl_1‹U› A_41117 m_41118))
:=
  (fun axiom_K_41120 :
    ∀ {A_41121 : U} ->
      ∀ {m_41122 : A_41121} ->
        ∀ (x_41123 : (eq_1‹U› A_41121 m_41122 m_41122)) ->
          (eq_1‹U›
            (eq_1‹U› A_41121 m_41122 m_41122) x_41123
            (refl_1‹U› A_41121 m_41122))
  | A_41124, m_41125, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_41124 m_41125 m_41125) (refl_1‹U› A_41124 m_41125)))

#[program]
inductive sing_2‹s_41126,t_41127› (A_41128 : Type‹s_41126›):
  A_41128 -> Type‹t_41127›
where
| just_2 (m_41130 : A_41128) : (sing_2‹s_41126,t_41127› A_41128 m_41130)

#[logical]
def ssing_6‹s_41131› :
  ∀ (A_41132 : Type‹s_41131›) -> A_41132 -> Type‹s_41131›
:=
  (fun ssing_41134 :
    ∀ (A_41135 : Type‹s_41131›) -> A_41135 -> Type‹s_41131›
  | A_41137, m_41138 => (sing_2‹s_41131,s_41131› A_41137 m_41138))

#[program]
def sing_elim_7‹s_41139,t_41140› :
  ∀ {A_41141 : Type‹s_41139›} ->
    ∀ {x_41142 : A_41141} ->
      (sing_2‹s_41139,t_41140› A_41141 x_41142) -> A_41141
:=
  (fun sing_elim_41144 :
    ∀ {A_41145 : Type‹s_41139›} ->
      ∀ {x_41146 : A_41145} ->
        (sing_2‹s_41139,t_41140› A_41145 x_41146) -> A_41145
  | A_41148, x_41149, (just_2 m_41150) => m_41150)

#[logical]
def sing_uniq_8‹s_41151,t_41152› :
  ∀ (A_41153 : Type‹s_41151›) ->
    ∀ (x0_41154 : A_41153) ->
      ∀ (x_41155 : (sing_2‹s_41151,t_41152› A_41153 x0_41154)) ->
        (eq_1‹s_41151›
          A_41153 x0_41154
          ((sing_elim_7‹s_41151,t_41152›) A_41153 x0_41154 x_41155))
:=
  (fun sing_uniq_41156 :
    ∀ (A_41157 : Type‹s_41151›) ->
      ∀ (x0_41158 : A_41157) ->
        ∀ (x_41159 : (sing_2‹s_41151,t_41152› A_41157 x0_41158)) ->
          (eq_1‹s_41151›
            A_41157 x0_41158
            ((sing_elim_7‹s_41151,t_41152›) A_41157 x0_41158 x_41159))
  | A_41160, x0_41161, (just_2 m_41162) =>
    (refl_1‹s_41151› A_41160 m_41162))

#[program]
inductive base_3‹s_41163› : Type‹s_41163› where
| tt_3 : base_3‹s_41163›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_41164 : unit_9) -> (eq_1‹U› base_3‹U› x_41164 tt_3‹U›)
:=
  (fun unit_eta_41165 :
    ∀ (x_41166 : unit_9) -> (eq_1‹U› base_3‹U› x_41166 tt_3‹U›)
  | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›))

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  (fun not_41168 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4)

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun and_41172 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __41175 => false_5)

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun or_41178 : bool_4 -> bool_4 -> bool_4
  | true_4, __41181 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun xor_41184 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
def string_of_bool_15‹› : bool_4 -> string :=
  (fun string_of_bool_41188 : bool_4 -> string
  | true_4 => "true"
  | false_5 => "false")

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_41190 : nat_5) : nat_5

#[program]
def lte_16‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lte_41193 : nat_5 -> nat_5 -> bool_4
  | zero_6, __41196 => true_4
  | (succ_7 n_41197), zero_6 => false_5
  | (succ_7 n_41198), (succ_7 n_41199) => ((lte_41193) n_41198 n_41199))

#[program]
def lt_17‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lt_41202 : nat_5 -> nat_5 -> bool_4
  | x_41205, y_41206 => ((lte_16) (succ_7‹› x_41205) y_41206))

#[program]
def pred_18‹› : nat_5 -> nat_5 :=
  (fun pred_41208 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_41210) => n_41210)

#[program]
def add_19‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun add_41213 : nat_5 -> nat_5 -> nat_5
  | zero_6, __41216 => __41216
  | (succ_7 n_41217), __41218 => (succ_7‹› ((add_41213) n_41217 __41218)))

#[program]
def sub_20‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun sub_41221 : nat_5 -> nat_5 -> nat_5
  | __41224, zero_6 => __41224
  | __41225, (succ_7 n_41226) => ((sub_41221) ((pred_18) __41225) n_41226))

#[program]
def mul_21‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun mul_41229 : nat_5 -> nat_5 -> nat_5
  | zero_6, __41232 => zero_6
  | (succ_7 n_41233), __41234 =>
    ((add_19) __41234 ((mul_41229) n_41233 __41234)))

#[program]
def div_22‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun div_41237 : nat_5 -> nat_5 -> nat_5
  | x_41240, y_41241 =>
    (match ((lt_17) x_41240 y_41241) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_41243 :=
        (fun loop_41244 : nat_5 -> nat_5 -> nat_5
        | x_41247, y_41248 =>
          (match ((sub_20) x_41247 ((pred_18) y_41248)) in nat_5 -o nat_5
           with
          | zero_6 => zero_6
          | (succ_7 n_41250) => (succ_7‹› ((loop_41244) n_41250 y_41248))))
      in ((loop_41243) x_41240 y_41241)))

#[program]
def rem_23‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun rem_41253 : nat_5 -> nat_5 -> nat_5
  | x_41256, y_41257 =>
    ((sub_20) x_41256 ((mul_21) ((div_22) x_41256 y_41257) y_41257)))

#[program]
inductive option_6‹s_41258› (A_41259 : Type‹s_41258›):
  Type‹s_41258›
where
| None_8 : (option_6‹s_41258› A_41259)
| Some_9 (m_41260 : A_41259) : (option_6‹s_41258› A_41259)

#[program]
inductive list_7‹s_41261,t_41262› (A_41263 : Type‹s_41261›):
  Type‹t_41262›
where
| nil_10 : (list_7‹s_41261,t_41262› A_41263)
| cons_11
    (hd_41264 : A_41263) (tl_41265 : (list_7‹s_41261,t_41262› A_41263))
    : (list_7‹s_41261,t_41262› A_41263)

#[program]
def rcons_24‹s_41266,t_41267› :
  ∀ {A_41268 : Type‹s_41266›} ->
    (list_7‹s_41266,t_41267› A_41268) -o
      A_41268 -o (list_7‹s_41266,t_41267› A_41268)
:=
  (fun rcons_41271 :
    ∀ {A_41272 : Type‹s_41266›} ->
      (list_7‹s_41266,t_41267› A_41272) -o
        A_41272 -o (list_7‹s_41266,t_41267› A_41272)
  | A_41275, nil_10, __41276 =>
    (cons_11‹s_41266,t_41267›
      A_41275 __41276 (nil_10‹s_41266,t_41267› A_41275))
  | A_41277, (cons_11 hd_41278 tl_41279), __41280 =>
    (cons_11‹s_41266,t_41267›
      A_41277 hd_41278 ((rcons_41271) A_41277 tl_41279 __41280)))

#[program]
def free_list_25‹s_41281,t_41282› :
  ∀ {A_41283 : Type‹s_41281›} ->
    A_41283 -> unit_9 -> (list_7‹s_41281,t_41282› A_41283) -> unit_9
:=
  (fun free_list_41287 :
    ∀ {A_41288 : Type‹s_41281›} ->
      A_41288 -> unit_9 -> (list_7‹s_41281,t_41282› A_41288) -> unit_9
  | A_41292, f_41293, nil_10 => tt_3‹U›
  | A_41294, f_41295, (cons_11 hd_41296 tl_41297) =>
    let __41298 := ((f_41295) hd_41296) in
    ((free_list_41287) A_41294 f_41295 tl_41297))

#[program]
inductive exists_8‹s_41299,r_41300› (A_41301 : Type‹s_41299›) (B_41302 : 
A_41301 -> Type‹r_41300›): L where
| ex_12
    (m_41304 : A_41301) {n_41305 : ((B_41302) m_41304)}
    : (exists_8‹s_41299,r_41300› A_41301 B_41302)

#[program]
inductive exists0_9‹s_41306,r_41307› (A_41308 : Type‹s_41306›) (B_41309 : 
A_41308 -> Type‹r_41307›): L where
| ex0_13
    {m_41311 : A_41308} (n_41312 : ((B_41309) m_41311))
    : (exists0_9‹s_41306,r_41307› A_41308 B_41309)

#[program]
inductive exists1_10‹s_41313,r_41314› (A_41315 : Type‹s_41313›) (B_41316 : 
A_41315 -> Type‹r_41314›): L where
| ex1_14
    (m_41318 : A_41315) (n_41319 : ((B_41316) m_41318))
    : (exists1_10‹s_41313,r_41314› A_41315 B_41316)

#[logical]
def tensor_26‹s_41320,r_41321› :
  Type‹s_41320› -> Type‹r_41321› -> L
:=
  (fun tensor_41324 : Type‹s_41320› -> Type‹r_41321› -> L
  | A_41327, B_41328 =>
    (exists1_10‹s_41320,r_41321›
      A_41327
      (fun _41329 : A_41327 -> Type‹r_41321›
      | __41331 => B_41328)))

#[program]
def pow_27‹› : int -> int -> int :=
  (fun pow_41334 : int -> int -> int
  | x_41337, y_41338 =>
    let loop_41339 :=
      (fun loop_41340 : int -> int -> int
      | acc_41343, y_41344 =>
        (match (__lte__ y_41344 0) in bool_4 -o int with
        | true_4 => acc_41343
        | false_5 =>
          ((loop_41340) (__mul__ x_41337 acc_41343) (__sub__ y_41344 1))))
    in ((loop_41339) 1 y_41338))

#[program]
def powm_28‹› : int -> int -> int -> int :=
  (fun powm_41349 : int -> int -> int -> int
  | x_41353, y_41354, m_41355 =>
    let loop_41356 :=
      (fun loop_41357 : int -> int -> int
      | acc_41360, y_41361 =>
        (match (__lte__ y_41361 0) in bool_4 -o int with
        | true_4 => acc_41360
        | false_5 =>
          ((loop_41357)
            (__mod__ (__mul__ x_41353 acc_41360) m_41355) (__sub__ y_41361 1))))
    in ((loop_41356) 1 y_41354))

#[program]
def ord_29‹› : char -> int :=
  (fun ord_41364 : char -> int
  | c_41366 => (__ord__ c_41366))

#[program]
def chr_30‹› : int -> char :=
  (fun chr_41368 : int -> char
  | i_41370 => (__chr__ i_41370))

#[program]
def str_31‹› : char -> string :=
  (fun str_41372 : char -> string
  | c_41374 => (__push__ "" c_41374))

#[program]
def strlen_32‹› : string -> int :=
  (fun strlen_41376 : string -> int
  | s_41378 => (__size__ s_41378))

#[program]
def string_of_int_33‹› : int -> string :=
  (fun string_of_int_41380 : int -> string
  | i_41382 =>
    let aux_41383 :=
      (fun aux_41384 : int -> string
      | i_41386 =>
        (match (__lte__ 10 i_41386) in bool_4 -o string with
        | true_4 =>
          let r_41388 := (__mod__ i_41386 10) in
          let i_41389 := (__div__ i_41386 10) in
          (__push__ ((aux_41384) i_41389)
            ((chr_30) (__add__ r_41388 ((ord_29) 0))))
        | false_5 => ((str_31) ((chr_30) (__add__ i_41386 ((ord_29) 0))))))
    in
    (match (__lte__ 0 i_41382) in bool_4 -o string with
    | true_4 => ((aux_41383) i_41382)
    | false_5 => (__cat__ "~" ((aux_41383) (__neg__ i_41382)))))

#[logical]
def llist_34‹s_41391› : Type‹s_41391› -> L :=
  (fun llist_41393 : Type‹s_41391› -> L
  | A_41395 => (list_7‹s_41391,L› A_41395))

#[program]
inductive opr_11‹s_41396› (A_41397 : Type‹s_41396›): L where
| Ins_15 (x_41398 : A_41397) : (opr_11‹s_41396› A_41397)
| Del_16 : (opr_11‹s_41396› A_41397)

#[logical]
def queue_p_35‹s_41399› :
  ∀ (A_41400 : Type‹s_41399›) ->
    ((llist_34‹s_41399›) A_41400) -> proto
:=
  (fun queue_p_41402 :
    ∀ (A_41403 : Type‹s_41399›) ->
      ((llist_34‹s_41399›) A_41403) -> proto
  | A_41405, xs_41406 =>
    ⇓(o_41407 : (opr_11‹s_41399› A_41405)) ⇒
      (match o_41407 in (opr_11‹s_41399› A_41405) -o proto with
      | (Ins_15 x_41409) =>
        ((queue_p_41402)
          A_41405 ((rcons_24‹s_41399,L›) A_41405 xs_41406 x_41409))
      | Del_16 =>
        (match xs_41406 in ((llist_34‹s_41399›) A_41405) -o proto with
        | nil_10 => •
        | (cons_11 hd_41411 tl_41412) =>
          ⇑(__41413 : ((ssing_6‹s_41399›) A_41405 hd_41411)) ⇒
            ⇑(__41414 : hc⟨((queue_p_41402) A_41405 tl_41412)⟩) ⇒ •)))

#[logical]
def queue_ch_36‹s_41415› :
  ∀ (A_41416 : Type‹s_41415›) -> ((llist_34‹s_41415›) A_41416) -> L
:=
  (fun queue_ch_41418 :
    ∀ (A_41419 : Type‹s_41415›) ->
      ((llist_34‹s_41415›) A_41419) -> L
  | A_41421, xs_41422 => ch⟨((queue_p_35‹s_41415›) A_41421 xs_41422)⟩)

#[logical]
def queue_hc_37‹s_41423› :
  ∀ (A_41424 : Type‹s_41423›) -> ((llist_34‹s_41423›) A_41424) -> L
:=
  (fun queue_hc_41426 :
    ∀ (A_41427 : Type‹s_41423›) ->
      ((llist_34‹s_41423›) A_41427) -> L
  | A_41429, xs_41430 => hc⟨((queue_p_35‹s_41423›) A_41429 xs_41430)⟩)

#[logical]
def queue_38‹s_41431› :
  ∀ (A_41432 : Type‹s_41431›) -> ((llist_34‹s_41431›) A_41432) -> L
:=
  (fun queue_41434 :
    ∀ (A_41435 : Type‹s_41431›) ->
      ((llist_34‹s_41431›) A_41435) -> L
  | A_41437, xs_41438 => IO ((queue_hc_37‹s_41431›) A_41437 xs_41438))

#[program]
def node_worker_39‹s_41439› :
  ∀ {A_41440 : Type‹s_41439›} ->
    ∀ {xs_41441 : ((llist_34‹s_41439›) A_41440)} ->
      ∀ (x_41442 : A_41440) ->
        ((queue_hc_37‹s_41439›) A_41440 xs_41441) -o
          ((queue_ch_36‹s_41439›)
            A_41440 (cons_11‹s_41439,L› A_41440 x_41442 xs_41441)) -o
            IO unit_9
:=
  (fun node_worker_41445 :
    ∀ {A_41446 : Type‹s_41439›} ->
      ∀ {xs_41447 : ((llist_34‹s_41439›) A_41446)} ->
        ∀ (x_41448 : A_41446) ->
          ((queue_hc_37‹s_41439›) A_41446 xs_41447) -o
            ((queue_ch_36‹s_41439›)
              A_41446 (cons_11‹s_41439,L› A_41446 x_41448 xs_41447)) -o
              IO unit_9
  | A_41451, xs_41452, x_41453, __41454, __41455 =>
    let* _41456 := recv __41455 in
    (match _41456 in
       (exists1_10‹L,L›
         (opr_11‹s_41439› A_41451)
         (fun _41458 : (opr_11‹s_41439› A_41451) -> L
         | o_41460 =>
           ch⟨(match o_41460 in (opr_11‹s_41439› A_41451) -o proto with
                | (Ins_15 x_41462) =>
                  (((fun queue_p_41463 :
                      ∀ (A_41464 : Type‹s_41439›) ->
                        ((llist_34‹s_41439›) A_41464) -> proto
                    | A_41466, xs_41467 =>
                      ⇓(o_41468 : (opr_11‹s_41439› A_41466)) ⇒
                        (match o_41468 in
                           (opr_11‹s_41439› A_41466) -o proto
                         with
                        | (Ins_15 x_41470) =>
                          ((queue_p_41463)
                            A_41466
                            ((rcons_24‹s_41439,L›)
                              A_41466 xs_41467 x_41470))
                        | Del_16 =>
                          (match xs_41467 in
                             ((llist_34‹s_41439›) A_41466) -o proto
                           with
                          | nil_10 => •
                          | (cons_11 hd_41472 tl_41473) =>
                            ⇑(__41474 :
                              ((ssing_6‹s_41439›) A_41466 hd_41472)) ⇒
                              ⇑(__41475 :
                                hc⟨((queue_p_41463) A_41466 tl_41473)⟩) ⇒
                                •))))
                    A_41451
                    ((rcons_24‹s_41439,L›)
                      A_41451
                      (cons_11‹s_41439,L› A_41451 x_41453 xs_41452)
                      x_41462))
                | Del_16 =>
                  (match (cons_11‹s_41439,L› A_41451 x_41453 xs_41452) in
                     ((llist_34‹s_41439›) A_41451) -o proto
                   with
                  | nil_10 => •
                  | (cons_11 hd_41477 tl_41478) =>
                    ⇑(__41479 :
                      ((ssing_6‹s_41439›) A_41451 hd_41477)) ⇒
                      ⇑(__41480 :
                        hc⟨(((fun queue_p_41481 :
                                 ∀ (A_41482 : Type‹s_41439›) ->
                                   ((llist_34‹s_41439›) A_41482) -> proto
                               | A_41484, xs_41485 =>
                                 ⇓(o_41486 :
                                   (opr_11‹s_41439› A_41484)) ⇒
                                   (match o_41486 in
                                      (opr_11‹s_41439› A_41484) -o proto
                                    with
                                   | (Ins_15 x_41488) =>
                                     ((queue_p_41481)
                                       A_41484
                                       ((rcons_24‹s_41439,L›)
                                         A_41484 xs_41485 x_41488))
                                   | Del_16 =>
                                     (match xs_41485 in
                                        ((llist_34‹s_41439›) A_41484) -o
                                          proto
                                      with
                                     | nil_10 => •
                                     | (cons_11 hd_41490 tl_41491) =>
                                       ⇑(__41492 :
                                         ((ssing_6‹s_41439›)
                                           A_41484 hd_41490)) ⇒
                                         ⇑(__41493 :
                                           hc⟨((queue_p_41481)
                                                  A_41484 tl_41491)⟩) ⇒
                                           •))))
                               A_41451 tl_41478)⟩) ⇒
                        •))⟩)) -o
         IO unit_9
     with
    | (ex1_14 m_41494 n_41495) =>
      (match m_41494, n_41495 in
         ∀ (o0_41496 : (opr_11‹s_41439› A_41451)) -o
           ch⟨(match o0_41496 in (opr_11‹s_41439› A_41451) -o proto
                 with
                | (Ins_15 x_41499) =>
                  ((queue_p_35‹s_41439›)
                    A_41451
                    ((rcons_24‹s_41439,L›)
                      A_41451
                      (cons_11‹s_41439,L› A_41451 x_41453 xs_41452)
                      x_41499))
                | Del_16 =>
                  ⇑(__41500 : ((ssing_6‹s_41439›) A_41451 x_41453)) ⇒
                    ⇑(__41501 :
                      hc⟨((queue_p_35‹s_41439›) A_41451 xs_41452)⟩) ⇒
                      •)⟩ -o
             IO unit_9
       with
      | (Ins_15 x_41502), __41503 =>
        let* c_next_41504 :=
          ((send __41454) (Ins_15‹s_41439› A_41451 x_41502))
        in
        ((node_worker_41445)
          A_41451 ((rcons_24‹s_41439,L›) A_41451 xs_41452 x_41502)
          x_41453 c_next_41504 __41503)
      | Del_16, __41505 =>
        let* c_41506 :=
          ((send __41505) (just_2‹s_41439,s_41439› A_41451 x_41453))
        in let* c_41507 := ((send c_41506) __41454) in close c_41507)))

#[program]
def empty_worker_40‹s_41508› :
  ∀ {A_41509 : Type‹s_41508›} ->
    ((queue_ch_36‹s_41508›) A_41509 (nil_10‹s_41508,L› A_41509)) ->
      IO unit_9
:=
  (fun empty_worker_41511 :
    ∀ {A_41512 : Type‹s_41508›} ->
      ((queue_ch_36‹s_41508›) A_41512 (nil_10‹s_41508,L› A_41512)) ->
        IO unit_9
  | A_41514, c_41515 =>
    let* _41516 := recv c_41515 in
    (match _41516 in
       (exists1_10‹L,L›
         (opr_11‹s_41508› A_41514)
         (fun _41518 : (opr_11‹s_41508› A_41514) -> L
         | o_41520 =>
           ch⟨(match o_41520 in (opr_11‹s_41508› A_41514) -o proto with
                | (Ins_15 x_41522) =>
                  (((fun queue_p_41523 :
                      ∀ (A_41524 : Type‹s_41508›) ->
                        ((llist_34‹s_41508›) A_41524) -> proto
                    | A_41526, xs_41527 =>
                      ⇓(o_41528 : (opr_11‹s_41508› A_41526)) ⇒
                        (match o_41528 in
                           (opr_11‹s_41508› A_41526) -o proto
                         with
                        | (Ins_15 x_41530) =>
                          ((queue_p_41523)
                            A_41526
                            ((rcons_24‹s_41508,L›)
                              A_41526 xs_41527 x_41530))
                        | Del_16 =>
                          (match xs_41527 in
                             ((llist_34‹s_41508›) A_41526) -o proto
                           with
                          | nil_10 => •
                          | (cons_11 hd_41532 tl_41533) =>
                            ⇑(__41534 :
                              ((ssing_6‹s_41508›) A_41526 hd_41532)) ⇒
                              ⇑(__41535 :
                                hc⟨((queue_p_41523) A_41526 tl_41533)⟩) ⇒
                                •))))
                    A_41514
                    ((rcons_24‹s_41508,L›)
                      A_41514 (nil_10‹s_41508,L› A_41514) x_41522))
                | Del_16 =>
                  (match (nil_10‹s_41508,L› A_41514) in
                     ((llist_34‹s_41508›) A_41514) -o proto
                   with
                  | nil_10 => •
                  | (cons_11 hd_41537 tl_41538) =>
                    ⇑(__41539 :
                      ((ssing_6‹s_41508›) A_41514 hd_41537)) ⇒
                      ⇑(__41540 :
                        hc⟨(((fun queue_p_41541 :
                                 ∀ (A_41542 : Type‹s_41508›) ->
                                   ((llist_34‹s_41508›) A_41542) -> proto
                               | A_41544, xs_41545 =>
                                 ⇓(o_41546 :
                                   (opr_11‹s_41508› A_41544)) ⇒
                                   (match o_41546 in
                                      (opr_11‹s_41508› A_41544) -o proto
                                    with
                                   | (Ins_15 x_41548) =>
                                     ((queue_p_41541)
                                       A_41544
                                       ((rcons_24‹s_41508,L›)
                                         A_41544 xs_41545 x_41548))
                                   | Del_16 =>
                                     (match xs_41545 in
                                        ((llist_34‹s_41508›) A_41544) -o
                                          proto
                                      with
                                     | nil_10 => •
                                     | (cons_11 hd_41550 tl_41551) =>
                                       ⇑(__41552 :
                                         ((ssing_6‹s_41508›)
                                           A_41544 hd_41550)) ⇒
                                         ⇑(__41553 :
                                           hc⟨((queue_p_41541)
                                                  A_41544 tl_41551)⟩) ⇒
                                           •))))
                               A_41514 tl_41538)⟩) ⇒
                        •))⟩)) -o
         IO unit_9
     with
    | (ex1_14 m_41554 n_41555) =>
      (match m_41554, n_41555 in
         ∀ (o0_41556 : (opr_11‹s_41508› A_41514)) -o
           ch⟨(match o0_41556 in (opr_11‹s_41508› A_41514) -o proto
                 with
                | (Ins_15 x_41559) =>
                  ((queue_p_35‹s_41508›)
                    A_41514
                    (cons_11‹s_41508,L›
                      A_41514 x_41559 (nil_10‹s_41508,L› A_41514)))
                | Del_16 => •)⟩ -o
             IO unit_9
       with
      | (Ins_15 x_41560), __41561 =>
        let* c0_41562 :=
          fork
            (fun _41563 :
              ((queue_ch_36‹s_41508›)
                A_41514 (nil_10‹s_41508,L› A_41514)) -o IO unit_9
            | _41565 => ((empty_worker_41511) A_41514 _41565))
        in
        ((node_worker_39‹s_41508›)
          A_41514 (nil_10‹s_41508,L› A_41514) x_41560 c0_41562 __41561)
      | Del_16, __41566 => close __41566)))

#[program]
def empty_41‹s_41567› :
  ∀ {A_41568 : Type‹s_41567›} ->
    ((queue_38‹s_41567›) A_41568 (nil_10‹s_41567,L› A_41568))
:=
  (fun empty_41569 :
    ∀ {A_41570 : Type‹s_41567›} ->
      ((queue_38‹s_41567›) A_41570 (nil_10‹s_41567,L› A_41570))
  | A_41571 =>
    fork
      (fun _41572 :
        ((queue_ch_36‹s_41567›) A_41571 (nil_10‹s_41567,L› A_41571)) -o
          IO unit_9
      | _41574 => ((empty_worker_40‹s_41567›) A_41571 _41574)))

#[program]
def ins_42‹s_41575› :
  ∀ {A_41576 : Type‹s_41575›} ->
    ∀ {xs_41577 : ((llist_34‹s_41575›) A_41576)} ->
      ∀ (x_41578 : A_41576) ->
        ((queue_38‹s_41575›) A_41576 xs_41577) -o
          ((queue_38‹s_41575›)
            A_41576 ((rcons_24‹s_41575,L›) A_41576 xs_41577 x_41578))
:=
  (fun ins_41580 :
    ∀ {A_41581 : Type‹s_41575›} ->
      ∀ {xs_41582 : ((llist_34‹s_41575›) A_41581)} ->
        ∀ (x_41583 : A_41581) ->
          ((queue_38‹s_41575›) A_41581 xs_41582) -o
            ((queue_38‹s_41575›)
              A_41581 ((rcons_24‹s_41575,L›) A_41581 xs_41582 x_41583))
  | A_41585, xs_41586, x_41587, __41588 =>
    let* q_41589 := __41588 in
    let* q_41590 := ((send q_41589) (Ins_15‹s_41575› A_41585 x_41587)) in
    return q_41590)

#[program]
def del_43‹s_41591› :
  ∀ {A_41592 : Type‹s_41591›} ->
    ∀ {x_41593 : A_41592} ->
      ∀ {xs_41594 : ((llist_34‹s_41591›) A_41592)} ->
        ((queue_38‹s_41591›)
          A_41592 (cons_11‹s_41591,L› A_41592 x_41593 xs_41594)) ->
          IO ((tensor_26‹s_41591,L›)
               ((ssing_6‹s_41591›) A_41592 x_41593)
               ((queue_38‹s_41591›) A_41592 xs_41594))
:=
  (fun del_41596 :
    ∀ {A_41597 : Type‹s_41591›} ->
      ∀ {x_41598 : A_41597} ->
        ∀ {xs_41599 : ((llist_34‹s_41591›) A_41597)} ->
          ((queue_38‹s_41591›)
            A_41597 (cons_11‹s_41591,L› A_41597 x_41598 xs_41599)) ->
            IO ((tensor_26‹s_41591,L›)
                 ((ssing_6‹s_41591›) A_41597 x_41598)
                 ((queue_38‹s_41591›) A_41597 xs_41599))
  | A_41601, x_41602, xs_41603, q_41604 =>
    let* q_41605 := q_41604 in
    let* q_41606 := ((send q_41605) (Del_16‹s_41591› A_41601)) in
    let* _41607 := recv q_41606 in
    (match _41607 in
       (exists1_10‹s_41591,L›
         ((ssing_6‹s_41591›) A_41601 x_41602)
         (fun _41609 : ((ssing_6‹s_41591›) A_41601 x_41602) -> L
         | __41611 =>
           hc⟨⇑(__41612 :
                  hc⟨(((fun queue_p_41613 :
                           ∀ (A_41614 : Type‹s_41591›) ->
                             ((llist_34‹s_41591›) A_41614) -> proto
                         | A_41616, xs_41617 =>
                           ⇓(o_41618 : (opr_11‹s_41591› A_41616)) ⇒
                             (match o_41618 in
                                (opr_11‹s_41591› A_41616) -o proto
                              with
                             | (Ins_15 x_41620) =>
                               ((queue_p_41613)
                                 A_41616
                                 ((rcons_24‹s_41591,L›)
                                   A_41616 xs_41617 x_41620))
                             | Del_16 =>
                               (match xs_41617 in
                                  ((llist_34‹s_41591›) A_41616) -o proto
                                with
                               | nil_10 => •
                               | (cons_11 hd_41622 tl_41623) =>
                                 ⇑(__41624 :
                                   ((ssing_6‹s_41591›) A_41616 hd_41622)) ⇒
                                   ⇑(__41625 :
                                     hc⟨((queue_p_41613) A_41616 tl_41623)⟩) ⇒
                                     •))))
                         A_41601 xs_41603)⟩) ⇒
                  •⟩)) -o
         IO (exists1_10‹s_41591,L›
              ((ssing_6‹s_41591›) A_41601 x_41602)
              (fun _41626 : ((ssing_6‹s_41591›) A_41601 x_41602) -> L
              | __41628 => ((queue_38‹s_41591›) A_41601 xs_41603)))
     with
    | (ex1_14 m_41629 n_41630) =>
      let* _41631 := recv n_41630 in
      (match _41631 in
         (exists1_10‹L,L›
           hc⟨(((fun queue_p_41633 :
                    ∀ (A_41634 : Type‹s_41591›) ->
                      ((llist_34‹s_41591›) A_41634) -> proto
                  | A_41636, xs_41637 =>
                    ⇓(o_41638 : (opr_11‹s_41591› A_41636)) ⇒
                      (match o_41638 in
                         (opr_11‹s_41591› A_41636) -o proto
                       with
                      | (Ins_15 x_41640) =>
                        ((queue_p_41633)
                          A_41636
                          ((rcons_24‹s_41591,L›)
                            A_41636 xs_41637 x_41640))
                      | Del_16 =>
                        (match xs_41637 in
                           ((llist_34‹s_41591›) A_41636) -o proto
                         with
                        | nil_10 => •
                        | (cons_11 hd_41642 tl_41643) =>
                          ⇑(__41644 :
                            ((ssing_6‹s_41591›) A_41636 hd_41642)) ⇒
                            ⇑(__41645 :
                              hc⟨((queue_p_41633) A_41636 tl_41643)⟩) ⇒
                              •))))
                  A_41601 xs_41603)⟩
           (fun _41646 :
             hc⟨(((fun queue_p_41648 :
                      ∀ (A_41649 : Type‹s_41591›) ->
                        ((llist_34‹s_41591›) A_41649) -> proto
                    | A_41651, xs_41652 =>
                      ⇓(o_41653 : (opr_11‹s_41591› A_41651)) ⇒
                        (match o_41653 in
                           (opr_11‹s_41591› A_41651) -o proto
                         with
                        | (Ins_15 x_41655) =>
                          ((queue_p_41648)
                            A_41651
                            ((rcons_24‹s_41591,L›)
                              A_41651 xs_41652 x_41655))
                        | Del_16 =>
                          (match xs_41652 in
                             ((llist_34‹s_41591›) A_41651) -o proto
                           with
                          | nil_10 => •
                          | (cons_11 hd_41657 tl_41658) =>
                            ⇑(__41659 :
                              ((ssing_6‹s_41591›) A_41651 hd_41657)) ⇒
                              ⇑(__41660 :
                                hc⟨((queue_p_41648) A_41651 tl_41658)⟩) ⇒
                                •))))
                    A_41601 xs_41603)⟩ ->
               L
           | __41661 => hc⟨•⟩)) -o
           IO (exists1_10‹s_41591,L›
                ((ssing_6‹s_41591›) A_41601 x_41602)
                (fun _41662 : ((ssing_6‹s_41591›) A_41601 x_41602) -> L
                | __41664 => ((queue_38‹s_41591›) A_41601 xs_41603)))
       with
      | (ex1_14 m_41665 n_41666) =>
        let* __41667 := close n_41666 in
        return (ex1_14‹s_41591,L›
                 ((ssing_6‹s_41591›) A_41601 x_41602)
                 (fun _41668 : ((ssing_6‹s_41591›) A_41601 x_41602) -> L
                 | __41670 => ((queue_38‹s_41591›) A_41601 xs_41603))
                 m_41629 return m_41665))))

#[program]
def free_44‹s_41671› :
  ∀ {A_41672 : Type‹s_41671›} ->
    ((queue_38‹s_41671›) A_41672 (nil_10‹s_41671,L› A_41672)) ->
      IO unit_9
:=
  (fun free_41674 :
    ∀ {A_41675 : Type‹s_41671›} ->
      ((queue_38‹s_41671›) A_41675 (nil_10‹s_41671,L› A_41675)) ->
        IO unit_9
  | A_41677, q_41678 =>
    let* q_41679 := q_41678 in
    let* q_41680 := ((send q_41679) (Del_16‹s_41671› A_41677)) in
    close q_41680)

#[program]
def myqueue_45‹› : ((queue_38‹U›) int (nil_10‹U,L› int)) :=
  ((empty_41‹U›) int)

#[program]
def myqueue_46‹› :
  ((queue_38‹U›) int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0))
:= ((ins_42‹U›) int (nil_10‹U,L› int) 0 myqueue_45)

#[program]
def myqueue_47‹› :
  ((queue_38‹U›)
    int
    ((rcons_24‹U,L›)
      int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1))
:=
  ((ins_42‹U›)
    int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1 myqueue_46)

#[program]
def myqueue_48‹› :
  ((queue_38‹U›)
    int
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
      2))
:=
  ((ins_42‹U›)
    int
    ((rcons_24‹U,L›)
      int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
    2 myqueue_47)

#[program]
def myqueue_49‹› :
  ((queue_38‹U›)
    int
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int
        ((rcons_24‹U,L›)
          int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
        2)
      3))
:=
  ((ins_42‹U›)
    int
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
      2)
    3 myqueue_48)

#[program]
def main_50‹› : IO unit_9 :=
  let* _41681 :=
    ((del_43‹U›)
      int 0
      (((fun rcons_41682 :
          ∀ {A_41683 : U} ->
            (list_7‹U,L› A_41683) -o A_41683 -o (list_7‹U,L› A_41683)
        | A_41686, nil_10, __41687 =>
          (cons_11‹U,L› A_41686 __41687 (nil_10‹U,L› A_41686))
        | A_41688, (cons_11 hd_41689 tl_41690), __41691 =>
          (cons_11‹U,L›
            A_41688 hd_41689 ((rcons_41682) A_41688 tl_41690 __41691))))
        int
        (((fun rcons_41692 :
            ∀ {A_41693 : U} ->
              (list_7‹U,L› A_41693) -o
                A_41693 -o (list_7‹U,L› A_41693)
          | A_41696, nil_10, __41697 =>
            (cons_11‹U,L› A_41696 __41697 (nil_10‹U,L› A_41696))
          | A_41698, (cons_11 hd_41699 tl_41700), __41701 =>
            (cons_11‹U,L›
              A_41698 hd_41699 ((rcons_41692) A_41698 tl_41700 __41701))))
          int
          (((fun rcons_41702 :
              ∀ {A_41703 : U} ->
                (list_7‹U,L› A_41703) -o
                  A_41703 -o (list_7‹U,L› A_41703)
            | A_41706, nil_10, __41707 =>
              (cons_11‹U,L› A_41706 __41707 (nil_10‹U,L› A_41706))
            | A_41708, (cons_11 hd_41709 tl_41710), __41711 =>
              (cons_11‹U,L›
                A_41708 hd_41709 ((rcons_41702) A_41708 tl_41710 __41711))))
            int (nil_10‹U,L› int) 1)
          2)
        3)
      myqueue_49)
  in
  (match _41681 in
     ((tensor_26‹U,L›)
       ((ssing_6‹U›) int 0)
       ((queue_38‹U›)
         int
         (((fun rcons_41713 :
             ∀ {A_41714 : U} ->
               (list_7‹U,L› A_41714) -o
                 A_41714 -o (list_7‹U,L› A_41714)
           | A_41717, nil_10, __41718 =>
             (cons_11‹U,L› A_41717 __41718 (nil_10‹U,L› A_41717))
           | A_41719, (cons_11 hd_41720 tl_41721), __41722 =>
             (cons_11‹U,L›
               A_41719 hd_41720 ((rcons_41713) A_41719 tl_41721 __41722))))
           int
           (((fun rcons_41723 :
               ∀ {A_41724 : U} ->
                 (list_7‹U,L› A_41724) -o
                   A_41724 -o (list_7‹U,L› A_41724)
             | A_41727, nil_10, __41728 =>
               (cons_11‹U,L› A_41727 __41728 (nil_10‹U,L› A_41727))
             | A_41729, (cons_11 hd_41730 tl_41731), __41732 =>
               (cons_11‹U,L›
                 A_41729 hd_41730 ((rcons_41723) A_41729 tl_41731 __41732))))
             int
             (((fun rcons_41733 :
                 ∀ {A_41734 : U} ->
                   (list_7‹U,L› A_41734) -o
                     A_41734 -o (list_7‹U,L› A_41734)
               | A_41737, nil_10, __41738 =>
                 (cons_11‹U,L› A_41737 __41738 (nil_10‹U,L› A_41737))
               | A_41739, (cons_11 hd_41740 tl_41741), __41742 =>
                 (cons_11‹U,L›
                   A_41739 hd_41740 ((rcons_41733) A_41739 tl_41741 __41742))))
               int (nil_10‹U,L› int) 1)
             2)
           3))) -o
       IO base_3‹U›
   with
  | (ex1_14 (just_2 m_41743) n_41744) =>
    let* _41745 :=
      ((del_43‹U›)
        int 1
        (((fun rcons_41746 :
            ∀ {A_41747 : U} ->
              (list_7‹U,L› A_41747) -o
                A_41747 -o (list_7‹U,L› A_41747)
          | A_41750, nil_10, __41751 =>
            (cons_11‹U,L› A_41750 __41751 (nil_10‹U,L› A_41750))
          | A_41752, (cons_11 hd_41753 tl_41754), __41755 =>
            (cons_11‹U,L›
              A_41752 hd_41753 ((rcons_41746) A_41752 tl_41754 __41755))))
          int
          (((fun rcons_41756 :
              ∀ {A_41757 : U} ->
                (list_7‹U,L› A_41757) -o
                  A_41757 -o (list_7‹U,L› A_41757)
            | A_41760, nil_10, __41761 =>
              (cons_11‹U,L› A_41760 __41761 (nil_10‹U,L› A_41760))
            | A_41762, (cons_11 hd_41763 tl_41764), __41765 =>
              (cons_11‹U,L›
                A_41762 hd_41763 ((rcons_41756) A_41762 tl_41764 __41765))))
            int (nil_10‹U,L› int) 2)
          3)
        n_41744)
    in
    (match _41745 in
       ((tensor_26‹U,L›)
         ((ssing_6‹U›) int 1)
         ((queue_38‹U›)
           int
           (((fun rcons_41767 :
               ∀ {A_41768 : U} ->
                 (list_7‹U,L› A_41768) -o
                   A_41768 -o (list_7‹U,L› A_41768)
             | A_41771, nil_10, __41772 =>
               (cons_11‹U,L› A_41771 __41772 (nil_10‹U,L› A_41771))
             | A_41773, (cons_11 hd_41774 tl_41775), __41776 =>
               (cons_11‹U,L›
                 A_41773 hd_41774 ((rcons_41767) A_41773 tl_41775 __41776))))
             int
             (((fun rcons_41777 :
                 ∀ {A_41778 : U} ->
                   (list_7‹U,L› A_41778) -o
                     A_41778 -o (list_7‹U,L› A_41778)
               | A_41781, nil_10, __41782 =>
                 (cons_11‹U,L› A_41781 __41782 (nil_10‹U,L› A_41781))
               | A_41783, (cons_11 hd_41784 tl_41785), __41786 =>
                 (cons_11‹U,L›
                   A_41783 hd_41784 ((rcons_41777) A_41783 tl_41785 __41786))))
               int (nil_10‹U,L› int) 2)
             3))) -o
         IO base_3‹U›
     with
    | (ex1_14 (just_2 m_41787) n_41788) =>
      let* _41789 :=
        ((del_43‹U›)
          int 2
          (((fun rcons_41790 :
              ∀ {A_41791 : U} ->
                (list_7‹U,L› A_41791) -o
                  A_41791 -o (list_7‹U,L› A_41791)
            | A_41794, nil_10, __41795 =>
              (cons_11‹U,L› A_41794 __41795 (nil_10‹U,L› A_41794))
            | A_41796, (cons_11 hd_41797 tl_41798), __41799 =>
              (cons_11‹U,L›
                A_41796 hd_41797 ((rcons_41790) A_41796 tl_41798 __41799))))
            int (nil_10‹U,L› int) 3)
          n_41788)
      in
      (match _41789 in
         ((tensor_26‹U,L›)
           ((ssing_6‹U›) int 2)
           ((queue_38‹U›)
             int
             (((fun rcons_41801 :
                 ∀ {A_41802 : U} ->
                   (list_7‹U,L› A_41802) -o
                     A_41802 -o (list_7‹U,L› A_41802)
               | A_41805, nil_10, __41806 =>
                 (cons_11‹U,L› A_41805 __41806 (nil_10‹U,L› A_41805))
               | A_41807, (cons_11 hd_41808 tl_41809), __41810 =>
                 (cons_11‹U,L›
                   A_41807 hd_41808 ((rcons_41801) A_41807 tl_41809 __41810))))
               int (nil_10‹U,L› int) 3))) -o
           IO base_3‹U›
       with
      | (ex1_14 (just_2 m_41811) n_41812) =>
        let* _41813 := ((del_43‹U›) int 3 (nil_10‹U,L› int) n_41812)
        in
        (match _41813 in
           ((tensor_26‹U,L›)
             ((ssing_6‹U›) int 3)
             ((queue_38‹U›) int (nil_10‹U,L› int))) -o
             IO base_3‹U›
         with
        | (ex1_14 (just_2 m_41815) n_41816) =>
          let* _41817 := ((free_44‹U›) int n_41816) in
          (match _41817 in unit_9 -o IO base_3‹U› with
          | tt_3 =>
            print
              (__cat__
                (__cat__
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__
                            (__cat__
                              (__cat__
                                (__cat__
                                  (__cat__ "a := "
                                    ((string_of_int_33) m_41743))
                                  "\n")
                                "b := ")
                              ((string_of_int_33) m_41787))
                            "\n")
                          "c := ")
                        ((string_of_int_33) m_41811))
                      "\n")
                    "d := ")
                  ((string_of_int_33) m_41815))
                "\n"))))))

[trans1e success]

-----------------------------------------

#[program]
def idU_52 := fun id_223801 (A_223802) -> (m_223803) ->
                m_223803

#[program]
def idL_51 := fun id_223804 (A_223805) -> (m_223806) ->
                m_223806

#[logical]
inductive eqU_13 where
| reflU_18 of layout[]

#[logical]
inductive eqL_12 where
| reflL_17 of layout[]

#[program]
def rwlUU_56 :=
  fun rwl_223807 {A_223808} -> {m_223809} -> {n_223810} -> {B_223811} ->
  {__223812} -> (__223813) ->
    (match {NULL} with
    | reflU_18  => __223813)

#[program]
def rwlUL_55 :=
  fun rwl_223814 {A_223815} -> {m_223816} -> {n_223817} -> {B_223818} ->
  {__223819} -> (__223820) ->
    (match {NULL} with
    | reflU_18  => __223820)

#[program]
def rwlLU_54 :=
  fun rwl_223821 {A_223822} -> {m_223823} -> {n_223824} -> {B_223825} ->
  {__223826} -> (__223827) ->
    (match {NULL} with
    | reflL_17  => __223827)

#[program]
def rwlLL_53 :=
  fun rwl_223828 {A_223829} -> {m_223830} -> {n_223831} -> {B_223832} ->
  {__223833} -> (__223834) ->
    (match {NULL} with
    | reflL_17  => __223834)

#[program]
def rwrUU_60 :=
  fun rwr_223835 {A_223836} -> {m_223837} -> {n_223838} -> {B_223839} ->
  {__223840} -> (__223841) ->
    (match {NULL} with
    | reflU_18  => __223841)

#[program]
def rwrUL_59 :=
  fun rwr_223842 {A_223843} -> {m_223844} -> {n_223845} -> {B_223846} ->
  {__223847} -> (__223848) ->
    (match {NULL} with
    | reflU_18  => __223848)

#[program]
def rwrLU_58 :=
  fun rwr_223849 {A_223850} -> {m_223851} -> {n_223852} -> {B_223853} ->
  {__223854} -> (__223855) ->
    (match {NULL} with
    | reflL_17  => __223855)

#[program]
def rwrLL_57 :=
  fun rwr_223856 {A_223857} -> {m_223858} -> {n_223859} -> {B_223860} ->
  {__223861} -> (__223862) ->
    (match {NULL} with
    | reflL_17  => __223862)

#[logical]
def congrUUU_68 := NULL

#[logical]
def congrUUL_67 := NULL

#[logical]
def congrULU_66 := NULL

#[logical]
def congrULL_65 := NULL

#[logical]
def congrLUU_64 := NULL

#[logical]
def congrLUL_63 := NULL

#[logical]
def congrLLU_62 := NULL

#[logical]
def congrLLL_61 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_17 where
| justUU_22 of layout[R]

#[program]
inductive singUL_16 where
| justUL_21 of layout[R]

#[program]
inductive singLU_15 where


#[program]
inductive singLL_14 where
| justLL_19 of layout[R]

#[logical]
def ssingU_70 := NULL

#[logical]
def ssingL_69 := NULL

#[program]
def sing_elimUU_74 :=
  fun sing_elim_223863 {A_223864} -> {x_223865} -> (__223866) ->
    (match __223866 with
    | justUU_22 m_223867 => m_223867)

#[program]
def sing_elimUL_73 :=
  fun sing_elim_223868 {A_223869} -> {x_223870} -> (__223871) ->
    (match __223871 with
    | justUL_21 m_223872 => m_223872)

#[program]
def sing_elimLU_72 :=
  fun sing_elim_223873 {A_223874} -> {x_223875} -> (__223876) ->
    (match __223876 with
    )

#[program]
def sing_elimLL_71 :=
  fun sing_elim_223877 {A_223878} -> {x_223879} -> (__223880) ->
    (match __223880 with
    | justLL_19 m_223881 => m_223881)

#[logical]
def sing_uniqUU_78 := NULL

#[logical]
def sing_uniqUL_77 := NULL

#[logical]
def sing_uniqLU_76 := NULL

#[logical]
def sing_uniqLL_75 := NULL

#[program]
inductive baseU_19 where
| ttU_24 of layout[]

#[program]
inductive baseL_18 where
| ttL_23 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_223882 (__223883) ->
    (match __223883 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_223884 (__223885) -> (__223886) ->
    (match __223885 with
    | true_4  =>
      (match __223886 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_223887 (__223888) -> (__223889) ->
    (match __223888 with
    | true_4  => true_4
    | false_5  =>
      (match __223889 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_223890 (__223891) -> (__223892) ->
    (match __223891 with
    | true_4  =>
      (match __223892 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __223892 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def string_of_bool_15 :=
  fun string_of_bool_223893 (__223894) ->
    (match __223894 with
    | true_4  => "true" | false_5  => "false")

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_16 :=
  fun lte_223895 (__223896) -> (__223897) ->
    (match __223896 with
    | zero_6  => true_4
    | succ_7 n_223898 =>
      (match __223897 with
      | zero_6  => false_5
      | succ_7 n_223899 => ((lte_223895) n_223898 n_223899)))

#[program]
def lt_17 :=
  fun lt_223900 (x_223901) -> (y_223902) ->
    ((lte_16) (succ_7 x_223901) y_223902)

#[program]
def pred_18 :=
  fun pred_223903 (__223904) ->
    (match __223904 with
    | zero_6  => zero_6 | succ_7 n_223905 => n_223905)

#[program]
def add_19 :=
  fun add_223906 (__223907) -> (__223908) ->
    (match __223907 with
    | zero_6  => __223908
    | succ_7 n_223909 => (succ_7 ((add_223906) n_223909 __223908)))

#[program]
def sub_20 :=
  fun sub_223910 (__223911) -> (__223912) ->
    (match __223912 with
    | zero_6  => __223911
    | succ_7 n_223913 => ((sub_223910) ((pred_18) __223911) n_223913))

#[program]
def mul_21 :=
  fun mul_223914 (__223915) -> (__223916) ->
    (match __223915 with
    | zero_6  => zero_6
    | succ_7 n_223917 => ((add_19) __223916 ((mul_223914) n_223917 __223916)))

#[program]
def div_22 :=
  fun div_223918 (x_223919) -> (y_223920) ->
    (match ((lt_17) x_223919 y_223920) with
    | true_4  => zero_6
    | false_5  =>
      let loop_223921 :=
        fun loop_223922 (x_223923) -> (y_223924) ->
          (match ((sub_20) x_223923 ((pred_18) y_223924)) with
          | zero_6  => zero_6
          | succ_7 n_223925 => (succ_7 ((loop_223922) n_223925 y_223924)))
      in ((loop_223921) x_223919 y_223920))

#[program]
def rem_23 :=
  fun rem_223926 (x_223927) -> (y_223928) ->
    ((sub_20) x_223927 ((mul_21) ((div_22) x_223927 y_223928) y_223928))

#[program]
inductive optionU_21 where
| NoneU_27 of layout[]
| SomeU_28 of layout[R]

#[program]
inductive optionL_20 where
| NoneL_25 of layout[]
| SomeL_26 of layout[R]

#[program]
inductive listUU_25 where
| nilUU_35 of layout[]
| consUU_36 of layout[R, R]

#[program]
inductive listUL_24 where
| nilUL_33 of layout[]
| consUL_34 of layout[R, R]

#[program]
inductive listLU_23 where
| nilLU_31 of layout[]

#[program]
inductive listLL_22 where
| nilLL_29 of layout[]
| consLL_30 of layout[R, R]

#[program]
def rconsUU_82 :=
  fun rcons_223929 {A_223930} -> (__223931) -o (__223932) -o
    (match __223931 with
    | nilUU_35  => (consUU_36 __223932 nilUU_35)
    | consUU_36 hd_223933 tl_223934 =>
      (consUU_36 hd_223933 ((rcons_223929) NULL tl_223934 __223932)))

#[program]
def rconsUL_81 :=
  fun rcons_223935 {A_223936} -> (__223937) -o (__223938) -o
    (match __223937 with
    | nilUL_33  => (consUL_34 __223938 nilUL_33)
    | consUL_34 hd_223939 tl_223940 =>
      (consUL_34 hd_223939 ((rcons_223935) NULL tl_223940 __223938)))

#[program]
def rconsLL_79 :=
  fun rcons_223941 {A_223942} -> (__223943) -o (__223944) -o
    (match __223943 with
    | nilLL_29  => (consLL_30 __223944 nilLL_29)
    | consLL_30 hd_223945 tl_223946 =>
      (consLL_30 hd_223945 ((rcons_223941) NULL tl_223946 __223944)))

#[program]
def free_listUU_86 :=
  fun free_list_223947 {A_223948} -> (f_223949) -> (__223950) ->
    (match __223950 with
    | nilUU_35  => ttU_24
    | consUU_36 hd_223951 tl_223952 =>
      let __223953 := ((f_223949) hd_223951) in
      ((free_list_223947) NULL f_223949 tl_223952))

#[program]
def free_listUL_85 :=
  fun free_list_223954 {A_223955} -> (f_223956) -> (__223957) ->
    (match __223957 with
    | nilUL_33  => ttU_24
    | consUL_34 hd_223958 tl_223959 =>
      let __223960 := ((f_223956) hd_223958) in
      ((free_list_223954) NULL f_223956 tl_223959))

#[program]
def free_listLL_83 :=
  fun free_list_223961 {A_223962} -> (f_223963) -> (__223964) ->
    (match __223964 with
    | nilLL_29  => ttU_24
    | consLL_30 hd_223965 tl_223966 =>
      let __223967 := ((f_223963) hd_223965) in
      ((free_list_223961) NULL f_223963 tl_223966))

#[program]
inductive existsUU_29 where
| exUU_40 of layout[R, N]

#[program]
inductive existsUL_28 where
| exUL_39 of layout[R, N]

#[program]
inductive existsLU_27 where
| exLU_38 of layout[R, N]

#[program]
inductive existsLL_26 where
| exLL_37 of layout[R, N]

#[program]
inductive exists0UU_33 where
| ex0UU_44 of layout[N, R]

#[program]
inductive exists0UL_32 where
| ex0UL_43 of layout[N, R]

#[program]
inductive exists0LU_31 where
| ex0LU_42 of layout[N, R]

#[program]
inductive exists0LL_30 where
| ex0LL_41 of layout[N, R]

#[program]
inductive exists1UU_37 where
| ex1UU_48 of layout[R, R]

#[program]
inductive exists1UL_36 where
| ex1UL_47 of layout[R, R]

#[program]
inductive exists1LU_35 where
| ex1LU_46 of layout[R, R]

#[program]
inductive exists1LL_34 where
| ex1LL_45 of layout[R, R]

#[logical]
def tensorUU_90 := NULL

#[logical]
def tensorUL_89 := NULL

#[logical]
def tensorLU_88 := NULL

#[logical]
def tensorLL_87 := NULL

#[program]
def pow_27 :=
  fun pow_223968 (x_223969) -> (y_223970) ->
    let loop_223971 :=
      fun loop_223972 (acc_223973) -> (y_223974) ->
        (match (__lte__ y_223974 0) with
        | true_4  => acc_223973
        | false_5  =>
          ((loop_223972) (__mul__ x_223969 acc_223973) (__sub__ y_223974 1)))
    in ((loop_223971) 1 y_223970)

#[program]
def powm_28 :=
  fun powm_223975 (x_223976) -> (y_223977) -> (m_223978) ->
    let loop_223979 :=
      fun loop_223980 (acc_223981) -> (y_223982) ->
        (match (__lte__ y_223982 0) with
        | true_4  => acc_223981
        | false_5  =>
          ((loop_223980)
            (__mod__ (__mul__ x_223976 acc_223981) m_223978)
            (__sub__ y_223982 1)))
    in ((loop_223979) 1 y_223977)

#[program]
def ord_29 := fun ord_223983 (c_223984) ->
                (__ord__ c_223984)

#[program]
def chr_30 := fun chr_223985 (i_223986) ->
                (__chr__ i_223986)

#[program]
def str_31 := fun str_223987 (c_223988) ->
                (__push__ "" c_223988)

#[program]
def strlen_32 := fun strlen_223989 (s_223990) ->
                   (__size__ s_223990)

#[program]
def string_of_int_33 :=
  fun string_of_int_223991 (i_223992) ->
    let aux_223993 :=
      fun aux_223994 (i_223995) ->
        (match (__lte__ 10 i_223995) with
        | true_4  =>
          let r_223996 := (__mod__ i_223995 10) in
          let i_223997 := (__div__ i_223995 10) in
          (__push__ ((aux_223994) i_223997)
            ((chr_30) (__add__ r_223996 ((ord_29) 0))))
        | false_5  => ((str_31) ((chr_30) (__add__ i_223995 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_223992) with
    | true_4  => ((aux_223993) i_223992)
    | false_5  => (__cat__ "~" ((aux_223993) (__neg__ i_223992))))

#[logical]
def llistU_92 := NULL

#[logical]
def llistL_91 := NULL

#[program]
inductive oprU_39 where
| InsU_51 of layout[R]
| DelU_52 of layout[]

#[program]
inductive oprL_38 where
| InsL_49 of layout[R]
| DelL_50 of layout[]

#[logical]
def queue_pU_94 := NULL

#[logical]
def queue_pL_93 := NULL

#[logical]
def queue_chU_96 := NULL

#[logical]
def queue_chL_95 := NULL

#[logical]
def queue_hcU_98 := NULL

#[logical]
def queue_hcL_97 := NULL

#[logical]
def queueU_100 := NULL

#[logical]
def queueL_99 := NULL

#[program]
def node_workerU_102 :=
  fun node_worker_223998 {A_223999} -> {xs_224000} -> (x_224001) ->
  (__224002) -o (__224003) -o
    let* _224004 := recv[R,L] __224003 in
    (match _224004 with
    | ex1LL_45 m_224005 n_224006 =>
      (match m_224005 with
      | InsU_51 x_224007 =>
        let* c_next_224008 := ((send[R,L] __224002) (InsU_51 x_224007)) in
        ((node_worker_223998) NULL NULL x_224001 c_next_224008 n_224006)
      | DelU_52  =>
        let* c_224009 := ((send[R,U] n_224006) (justUU_22 x_224001)) in
        let* c_224010 := ((send[R,L] c_224009) __224002) in
        close[true] c_224010))

#[program]
def node_workerL_101 :=
  fun node_worker_224011 {A_224012} -> {xs_224013} -> (x_224014) ->
  (__224015) -o (__224016) -o
    let* _224017 := recv[R,L] __224016 in
    (match _224017 with
    | ex1LL_45 m_224018 n_224019 =>
      (match m_224018 with
      | InsL_49 x_224020 =>
        let* c_next_224021 := ((send[R,L] __224015) (InsL_49 x_224020)) in
        ((node_worker_224011) NULL NULL x_224014 c_next_224021 n_224019)
      | DelL_50  =>
        let* c_224022 := ((send[R,L] n_224019) (justLL_19 x_224014)) in
        let* c_224023 := ((send[R,L] c_224022) __224015) in
        close[true] c_224023))

#[program]
def empty_workerU_104 :=
  fun empty_worker_224024 {A_224025} -> (c_224026) ->
    let* _224027 := recv[R,L] c_224026 in
    (match _224027 with
    | ex1LL_45 m_224028 n_224029 =>
      (match m_224028 with
      | InsU_51 x_224030 =>
        let* c0_224031 :=
          fork fun _224032 (_224033) -o
                 ((empty_worker_224024) NULL _224033)
        in ((node_workerU_102) NULL NULL x_224030 c0_224031 n_224029)
      | DelU_52  => close[true] n_224029))

#[program]
def empty_workerL_103 :=
  fun empty_worker_224034 {A_224035} -> (c_224036) ->
    let* _224037 := recv[R,L] c_224036 in
    (match _224037 with
    | ex1LL_45 m_224038 n_224039 =>
      (match m_224038 with
      | InsL_49 x_224040 =>
        let* c0_224041 :=
          fork fun _224042 (_224043) -o
                 ((empty_worker_224034) NULL _224043)
        in ((node_workerL_101) NULL NULL x_224040 c0_224041 n_224039)
      | DelL_50  => close[true] n_224039))

#[program]
def emptyU_106 :=
  fun empty_224044 {A_224045} ->
    fork fun _224046 (_224047) -o
           ((empty_workerU_104) NULL _224047)

#[program]
def emptyL_105 :=
  fun empty_224048 {A_224049} ->
    fork fun _224050 (_224051) -o
           ((empty_workerL_103) NULL _224051)

#[program]
def insU_108 :=
  fun ins_224052 {A_224053} -> {xs_224054} -> (x_224055) -> (__224056) -o
    let* q_224057 := __224056 in
    let* q_224058 := ((send[R,L] q_224057) (InsU_51 x_224055)) in
    return q_224058

#[program]
def insL_107 :=
  fun ins_224059 {A_224060} -> {xs_224061} -> (x_224062) -> (__224063) -o
    let* q_224064 := __224063 in
    let* q_224065 := ((send[R,L] q_224064) (InsL_49 x_224062)) in
    return q_224065

#[program]
def delU_110 :=
  fun del_224066 {A_224067} -> {x_224068} -> {xs_224069} -> (q_224070) ->
    let* q_224071 := q_224070 in
    let* q_224072 := ((send[R,L] q_224071) DelU_52) in
    let* _224073 := recv[R,U] q_224072 in
    (match _224073 with
    | ex1UL_47 m_224074 n_224075 =>
      let* _224076 := recv[R,L] n_224075 in
      (match _224076 with
      | ex1LL_45 m_224077 n_224078 =>
        let* __224079 := close[false] n_224078 in
        return (ex1UL_47 m_224074 return m_224077)))

#[program]
def delL_109 :=
  fun del_224080 {A_224081} -> {x_224082} -> {xs_224083} -> (q_224084) ->
    let* q_224085 := q_224084 in
    let* q_224086 := ((send[R,L] q_224085) DelL_50) in
    let* _224087 := recv[R,L] q_224086 in
    (match _224087 with
    | ex1LL_45 m_224088 n_224089 =>
      let* _224090 := recv[R,L] n_224089 in
      (match _224090 with
      | ex1LL_45 m_224091 n_224092 =>
        let* __224093 := close[false] n_224092 in
        return (ex1LL_45 m_224088 return m_224091)))

#[program]
def freeU_112 :=
  fun free_224094 {A_224095} -> (q_224096) ->
    let* q_224097 := q_224096 in
    let* q_224098 := ((send[R,L] q_224097) DelU_52) in close[false] q_224098

#[program]
def freeL_111 :=
  fun free_224099 {A_224100} -> (q_224101) ->
    let* q_224102 := q_224101 in
    let* q_224103 := ((send[R,L] q_224102) DelL_50) in close[false] q_224103

#[program]
def myqueue_45 := ((emptyU_106) NULL)

#[program]
def myqueue_46 := ((insU_108) NULL NULL 0 myqueue_45)

#[program]
def myqueue_47 := ((insU_108) NULL NULL 1 myqueue_46)

#[program]
def myqueue_48 := ((insU_108) NULL NULL 2 myqueue_47)

#[program]
def myqueue_49 := ((insU_108) NULL NULL 3 myqueue_48)

#[program]
def main :=
  let* _224104 := ((delU_110) NULL NULL NULL myqueue_49) in
  (match _224104 with
  | ex1UL_47 m_224105 n_224106 =>
    (match m_224105 with
    | justUU_22 m_224107 =>
      let* _224108 := ((delU_110) NULL NULL NULL n_224106) in
      (match _224108 with
      | ex1UL_47 m_224109 n_224110 =>
        (match m_224109 with
        | justUU_22 m_224111 =>
          let* _224112 := ((delU_110) NULL NULL NULL n_224110) in
          (match _224112 with
          | ex1UL_47 m_224113 n_224114 =>
            (match m_224113 with
            | justUU_22 m_224115 =>
              let* _224116 := ((delU_110) NULL NULL NULL n_224114) in
              (match _224116 with
              | ex1UL_47 m_224117 n_224118 =>
                (match m_224117 with
                | justUU_22 m_224119 =>
                  let* _224120 := ((freeU_112) NULL n_224118) in
                  (match _224120 with
                  | ttU_24  =>
                    print
                      (__cat__
                        (__cat__
                          (__cat__
                            (__cat__
                              (__cat__
                                (__cat__
                                  (__cat__
                                    (__cat__
                                      (__cat__
                                        (__cat__
                                          (__cat__ "a := "
                                            ((string_of_int_33) m_224107))
                                          "\n")
                                        "b := ")
                                      ((string_of_int_33) m_224111))
                                    "\n")
                                  "c := ")
                                ((string_of_int_33) m_224115))
                              "\n")
                            "d := ")
                          ((string_of_int_33) m_224119))
                        "\n"))))))))))

[trans12 success]

-----------------------------------------

#[program]
def idU_52 := fun id_224441 (A_224442) -> (m_224443) ->
                m_224443

#[program]
def idL_51 := fun id_224444 (A_224445) -> (m_224446) ->
                m_224446

#[logical]
inductive eqU_13 where
| reflU_18 of layout[]

#[logical]
inductive eqL_12 where
| reflL_17 of layout[]

#[program]
def rwlUU_56 :=
  fun rwl_224447 {A_224448} -> {m_224449} -> {n_224450} -> {B_224451} ->
  {__224452} -> (__224453) ->
    __224453

#[program]
def rwlUL_55 :=
  fun rwl_224454 {A_224455} -> {m_224456} -> {n_224457} -> {B_224458} ->
  {__224459} -> (__224460) ->
    __224460

#[program]
def rwlLU_54 :=
  fun rwl_224461 {A_224462} -> {m_224463} -> {n_224464} -> {B_224465} ->
  {__224466} -> (__224467) ->
    __224467

#[program]
def rwlLL_53 :=
  fun rwl_224468 {A_224469} -> {m_224470} -> {n_224471} -> {B_224472} ->
  {__224473} -> (__224474) ->
    __224474

#[program]
def rwrUU_60 :=
  fun rwr_224475 {A_224476} -> {m_224477} -> {n_224478} -> {B_224479} ->
  {__224480} -> (__224481) ->
    __224481

#[program]
def rwrUL_59 :=
  fun rwr_224482 {A_224483} -> {m_224484} -> {n_224485} -> {B_224486} ->
  {__224487} -> (__224488) ->
    __224488

#[program]
def rwrLU_58 :=
  fun rwr_224489 {A_224490} -> {m_224491} -> {n_224492} -> {B_224493} ->
  {__224494} -> (__224495) ->
    __224495

#[program]
def rwrLL_57 :=
  fun rwr_224496 {A_224497} -> {m_224498} -> {n_224499} -> {B_224500} ->
  {__224501} -> (__224502) ->
    __224502

#[logical]
def congrUUU_68 := NULL

#[logical]
def congrUUL_67 := NULL

#[logical]
def congrULU_66 := NULL

#[logical]
def congrULL_65 := NULL

#[logical]
def congrLUU_64 := NULL

#[logical]
def congrLUL_63 := NULL

#[logical]
def congrLLU_62 := NULL

#[logical]
def congrLLL_61 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_17 where
| justUU_22 of layout[R]

#[program]
inductive singUL_16 where
| justUL_21 of layout[R]

#[program]
inductive singLU_15 where


#[program]
inductive singLL_14 where
| justLL_19 of layout[R]

#[logical]
def ssingU_70 := NULL

#[logical]
def ssingL_69 := NULL

#[program]
def sing_elimUU_74 :=
  fun sing_elim_224503 {A_224504} -> {x_224505} -> (__224506) ->
    (match __224506 with
    | justUU_22 m_224507 => m_224507)

#[program]
def sing_elimUL_73 :=
  fun sing_elim_224508 {A_224509} -> {x_224510} -> (__224511) ->
    (match __224511 with
    | justUL_21 m_224512 => m_224512)

#[program]
def sing_elimLU_72 :=
  fun sing_elim_224513 {A_224514} -> {x_224515} -> (__224516) ->
    !!

#[program]
def sing_elimLL_71 :=
  fun sing_elim_224517 {A_224518} -> {x_224519} -> (__224520) ->
    (match __224520 with
    | justLL_19 m_224521 => m_224521)

#[logical]
def sing_uniqUU_78 := NULL

#[logical]
def sing_uniqUL_77 := NULL

#[logical]
def sing_uniqLU_76 := NULL

#[logical]
def sing_uniqLL_75 := NULL

#[program]
inductive baseU_19 where
| ttU_24 of layout[]

#[program]
inductive baseL_18 where
| ttL_23 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_224522 (__224523) ->
    (match __224523 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_224524 (__224525) -> (__224526) ->
    (match __224525 with
    | true_4  =>
      (match __224526 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_224527 (__224528) -> (__224529) ->
    (match __224528 with
    | true_4  => true_4
    | false_5  =>
      (match __224529 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_224530 (__224531) -> (__224532) ->
    (match __224531 with
    | true_4  =>
      (match __224532 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __224532 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def string_of_bool_15 :=
  fun string_of_bool_224533 (__224534) ->
    (match __224534 with
    | true_4  => "true" | false_5  => "false")

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_16 :=
  fun lte_224535 (__224536) -> (__224537) ->
    (match __224536 with
    | zero_6  => true_4
    | succ_7 n_224538 =>
      (match __224537 with
      | zero_6  => false_5
      | succ_7 n_224539 => ((lte_224535) n_224538 n_224539)))

#[program]
def lt_17 :=
  fun lt_224540 (x_224541) -> (y_224542) ->
    ((lte_16) (succ_7 x_224541) y_224542)

#[program]
def pred_18 :=
  fun pred_224543 (__224544) ->
    (match __224544 with
    | zero_6  => zero_6 | succ_7 n_224545 => n_224545)

#[program]
def add_19 :=
  fun add_224546 (__224547) -> (__224548) ->
    (match __224547 with
    | zero_6  => __224548
    | succ_7 n_224549 => (succ_7 ((add_224546) n_224549 __224548)))

#[program]
def sub_20 :=
  fun sub_224550 (__224551) -> (__224552) ->
    (match __224552 with
    | zero_6  => __224551
    | succ_7 n_224553 => ((sub_224550) ((pred_18) __224551) n_224553))

#[program]
def mul_21 :=
  fun mul_224554 (__224555) -> (__224556) ->
    (match __224555 with
    | zero_6  => zero_6
    | succ_7 n_224557 => ((add_19) __224556 ((mul_224554) n_224557 __224556)))

#[program]
def div_22 :=
  fun div_224558 (x_224559) -> (y_224560) ->
    (match ((lt_17) x_224559 y_224560) with
    | true_4  => zero_6
    | false_5  =>
      let loop_224561 :=
        fun loop_224562 (x_224563) -> (y_224564) ->
          (match ((sub_20) x_224563 ((pred_18) y_224564)) with
          | zero_6  => zero_6
          | succ_7 n_224565 => (succ_7 ((loop_224562) n_224565 y_224564)))
      in ((loop_224561) x_224559 y_224560))

#[program]
def rem_23 :=
  fun rem_224566 (x_224567) -> (y_224568) ->
    ((sub_20) x_224567 ((mul_21) ((div_22) x_224567 y_224568) y_224568))

#[program]
inductive optionU_21 where
| NoneU_27 of layout[]
| SomeU_28 of layout[R]

#[program]
inductive optionL_20 where
| NoneL_25 of layout[]
| SomeL_26 of layout[R]

#[program]
inductive listUU_25 where
| nilUU_35 of layout[]
| consUU_36 of layout[R, R]

#[program]
inductive listUL_24 where
| nilUL_33 of layout[]
| consUL_34 of layout[R, R]

#[program]
inductive listLU_23 where
| nilLU_31 of layout[]

#[program]
inductive listLL_22 where
| nilLL_29 of layout[]
| consLL_30 of layout[R, R]

#[program]
def rconsUU_82 :=
  fun rcons_224569 {A_224570} -> (__224571) -o (__224572) -o
    (match __224571 with
    | nilUU_35  => (consUU_36 __224572 nilUU_35)
    | consUU_36 hd_224573 tl_224574 =>
      (consUU_36 hd_224573 ((rcons_224569) NULL tl_224574 __224572)))

#[program]
def rconsUL_81 :=
  fun rcons_224575 {A_224576} -> (__224577) -o (__224578) -o
    (match __224577 with
    | nilUL_33  => (consUL_34 __224578 nilUL_33)
    | consUL_34 hd_224579 tl_224580 =>
      (consUL_34 hd_224579 ((rcons_224575) NULL tl_224580 __224578)))

#[program]
def rconsLL_79 :=
  fun rcons_224581 {A_224582} -> (__224583) -o (__224584) -o
    (match __224583 with
    | nilLL_29  => (consLL_30 __224584 nilLL_29)
    | consLL_30 hd_224585 tl_224586 =>
      (consLL_30 hd_224585 ((rcons_224581) NULL tl_224586 __224584)))

#[program]
def free_listUU_86 :=
  fun free_list_224587 {A_224588} -> (f_224589) -> (__224590) ->
    (match __224590 with
    | nilUU_35  => ttU_24
    | consUU_36 hd_224591 tl_224592 =>
      let __224593 := ((f_224589) hd_224591) in
      ((free_list_224587) NULL f_224589 tl_224592))

#[program]
def free_listUL_85 :=
  fun free_list_224594 {A_224595} -> (f_224596) -> (__224597) ->
    (match __224597 with
    | nilUL_33  => ttU_24
    | consUL_34 hd_224598 tl_224599 =>
      let __224600 := ((f_224596) hd_224598) in
      ((free_list_224594) NULL f_224596 tl_224599))

#[program]
def free_listLL_83 :=
  fun free_list_224601 {A_224602} -> (f_224603) -> (__224604) ->
    (match __224604 with
    | nilLL_29  => ttU_24
    | consLL_30 hd_224605 tl_224606 =>
      let __224607 := ((f_224603) hd_224605) in
      ((free_list_224601) NULL f_224603 tl_224606))

#[program]
inductive existsUU_29 where
| exUU_40 of layout[R, N]

#[program]
inductive existsUL_28 where
| exUL_39 of layout[R, N]

#[program]
inductive existsLU_27 where
| exLU_38 of layout[R, N]

#[program]
inductive existsLL_26 where
| exLL_37 of layout[R, N]

#[program]
inductive exists0UU_33 where
| ex0UU_44 of layout[N, R]

#[program]
inductive exists0UL_32 where
| ex0UL_43 of layout[N, R]

#[program]
inductive exists0LU_31 where
| ex0LU_42 of layout[N, R]

#[program]
inductive exists0LL_30 where
| ex0LL_41 of layout[N, R]

#[program]
inductive exists1UU_37 where
| ex1UU_48 of layout[R, R]

#[program]
inductive exists1UL_36 where
| ex1UL_47 of layout[R, R]

#[program]
inductive exists1LU_35 where
| ex1LU_46 of layout[R, R]

#[program]
inductive exists1LL_34 where
| ex1LL_45 of layout[R, R]

#[logical]
def tensorUU_90 := NULL

#[logical]
def tensorUL_89 := NULL

#[logical]
def tensorLU_88 := NULL

#[logical]
def tensorLL_87 := NULL

#[program]
def pow_27 :=
  fun pow_224608 (x_224609) -> (y_224610) ->
    let loop_224611 :=
      fun loop_224612 (acc_224613) -> (y_224614) ->
        (match (__lte__ y_224614 0) with
        | true_4  => acc_224613
        | false_5  =>
          ((loop_224612) (__mul__ x_224609 acc_224613) (__sub__ y_224614 1)))
    in ((loop_224611) 1 y_224610)

#[program]
def powm_28 :=
  fun powm_224615 (x_224616) -> (y_224617) -> (m_224618) ->
    let loop_224619 :=
      fun loop_224620 (acc_224621) -> (y_224622) ->
        (match (__lte__ y_224622 0) with
        | true_4  => acc_224621
        | false_5  =>
          ((loop_224620)
            (__mod__ (__mul__ x_224616 acc_224621) m_224618)
            (__sub__ y_224622 1)))
    in ((loop_224619) 1 y_224617)

#[program]
def ord_29 := fun ord_224623 (c_224624) ->
                (__ord__ c_224624)

#[program]
def chr_30 := fun chr_224625 (i_224626) ->
                (__chr__ i_224626)

#[program]
def str_31 := fun str_224627 (c_224628) ->
                (__push__ "" c_224628)

#[program]
def strlen_32 := fun strlen_224629 (s_224630) ->
                   (__size__ s_224630)

#[program]
def string_of_int_33 :=
  fun string_of_int_224631 (i_224632) ->
    let aux_224633 :=
      fun aux_224634 (i_224635) ->
        (match (__lte__ 10 i_224635) with
        | true_4  =>
          let r_224636 := (__mod__ i_224635 10) in
          let i_224637 := (__div__ i_224635 10) in
          (__push__ ((aux_224634) i_224637)
            ((chr_30) (__add__ r_224636 ((ord_29) 0))))
        | false_5  => ((str_31) ((chr_30) (__add__ i_224635 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_224632) with
    | true_4  => ((aux_224633) i_224632)
    | false_5  => (__cat__ "~" ((aux_224633) (__neg__ i_224632))))

#[logical]
def llistU_92 := NULL

#[logical]
def llistL_91 := NULL

#[program]
inductive oprU_39 where
| InsU_51 of layout[R]
| DelU_52 of layout[]

#[program]
inductive oprL_38 where
| InsL_49 of layout[R]
| DelL_50 of layout[]

#[logical]
def queue_pU_94 := NULL

#[logical]
def queue_pL_93 := NULL

#[logical]
def queue_chU_96 := NULL

#[logical]
def queue_chL_95 := NULL

#[logical]
def queue_hcU_98 := NULL

#[logical]
def queue_hcL_97 := NULL

#[logical]
def queueU_100 := NULL

#[logical]
def queueL_99 := NULL

#[program]
def node_workerU_102 :=
  fun node_worker_224638 {A_224639} -> {xs_224640} -> (x_224641) ->
  (__224642) -o (__224643) -o
    let* _224644 := recv[R,L] __224643 in
    (match _224644 with
    | ex1LL_45 m_224645 n_224646 =>
      (match m_224645 with
      | InsU_51 x_224647 =>
        let* c_next_224648 := ((send[R,L] __224642) (InsU_51 x_224647)) in
        ((node_worker_224638) NULL NULL x_224641 c_next_224648 n_224646)
      | DelU_52  =>
        let* c_224649 := ((send[R,U] n_224646) (justUU_22 x_224641)) in
        let* c_224650 := ((send[R,L] c_224649) __224642) in
        close[true] c_224650))

#[program]
def node_workerL_101 :=
  fun node_worker_224651 {A_224652} -> {xs_224653} -> (x_224654) ->
  (__224655) -o (__224656) -o
    let* _224657 := recv[R,L] __224656 in
    (match _224657 with
    | ex1LL_45 m_224658 n_224659 =>
      (match m_224658 with
      | InsL_49 x_224660 =>
        let* c_next_224661 := ((send[R,L] __224655) (InsL_49 x_224660)) in
        ((node_worker_224651) NULL NULL x_224654 c_next_224661 n_224659)
      | DelL_50  =>
        let* c_224662 := ((send[R,L] n_224659) (justLL_19 x_224654)) in
        let* c_224663 := ((send[R,L] c_224662) __224655) in
        close[true] c_224663))

#[program]
def empty_workerU_104 :=
  fun empty_worker_224664 {A_224665} -> (c_224666) ->
    let* _224667 := recv[R,L] c_224666 in
    (match _224667 with
    | ex1LL_45 m_224668 n_224669 =>
      (match m_224668 with
      | InsU_51 x_224670 =>
        let* c0_224671 :=
          fork fun _224672 (_224673) -o
                 ((empty_worker_224664) NULL _224673)
        in ((node_workerU_102) NULL NULL x_224670 c0_224671 n_224669)
      | DelU_52  => close[true] n_224669))

#[program]
def empty_workerL_103 :=
  fun empty_worker_224674 {A_224675} -> (c_224676) ->
    let* _224677 := recv[R,L] c_224676 in
    (match _224677 with
    | ex1LL_45 m_224678 n_224679 =>
      (match m_224678 with
      | InsL_49 x_224680 =>
        let* c0_224681 :=
          fork fun _224682 (_224683) -o
                 ((empty_worker_224674) NULL _224683)
        in ((node_workerL_101) NULL NULL x_224680 c0_224681 n_224679)
      | DelL_50  => close[true] n_224679))

#[program]
def emptyU_106 :=
  fun empty_224684 {A_224685} ->
    fork fun _224686 (_224687) -o
           ((empty_workerU_104) NULL _224687)

#[program]
def emptyL_105 :=
  fun empty_224688 {A_224689} ->
    fork fun _224690 (_224691) -o
           ((empty_workerL_103) NULL _224691)

#[program]
def insU_108 :=
  fun ins_224692 {A_224693} -> {xs_224694} -> (x_224695) -> (__224696) -o
    let* q_224697 := __224696 in
    let* q_224698 := ((send[R,L] q_224697) (InsU_51 x_224695)) in
    return q_224698

#[program]
def insL_107 :=
  fun ins_224699 {A_224700} -> {xs_224701} -> (x_224702) -> (__224703) -o
    let* q_224704 := __224703 in
    let* q_224705 := ((send[R,L] q_224704) (InsL_49 x_224702)) in
    return q_224705

#[program]
def delU_110 :=
  fun del_224706 {A_224707} -> {x_224708} -> {xs_224709} -> (q_224710) ->
    let* q_224711 := q_224710 in
    let* q_224712 := ((send[R,L] q_224711) DelU_52) in
    let* _224713 := recv[R,U] q_224712 in
    (match _224713 with
    | ex1UL_47 m_224714 n_224715 =>
      let* _224716 := recv[R,L] n_224715 in
      (match _224716 with
      | ex1LL_45 m_224717 n_224718 =>
        let* __224719 := close[false] n_224718 in
        return (ex1UL_47 m_224714 return m_224717)))

#[program]
def delL_109 :=
  fun del_224720 {A_224721} -> {x_224722} -> {xs_224723} -> (q_224724) ->
    let* q_224725 := q_224724 in
    let* q_224726 := ((send[R,L] q_224725) DelL_50) in
    let* _224727 := recv[R,L] q_224726 in
    (match _224727 with
    | ex1LL_45 m_224728 n_224729 =>
      let* _224730 := recv[R,L] n_224729 in
      (match _224730 with
      | ex1LL_45 m_224731 n_224732 =>
        let* __224733 := close[false] n_224732 in
        return (ex1LL_45 m_224728 return m_224731)))

#[program]
def freeU_112 :=
  fun free_224734 {A_224735} -> (q_224736) ->
    let* q_224737 := q_224736 in
    let* q_224738 := ((send[R,L] q_224737) DelU_52) in close[false] q_224738

#[program]
def freeL_111 :=
  fun free_224739 {A_224740} -> (q_224741) ->
    let* q_224742 := q_224741 in
    let* q_224743 := ((send[R,L] q_224742) DelL_50) in close[false] q_224743

#[program]
def myqueue_45 := ((emptyU_106) NULL)

#[program]
def myqueue_46 := ((insU_108) NULL NULL 0 myqueue_45)

#[program]
def myqueue_47 := ((insU_108) NULL NULL 1 myqueue_46)

#[program]
def myqueue_48 := ((insU_108) NULL NULL 2 myqueue_47)

#[program]
def myqueue_49 := ((insU_108) NULL NULL 3 myqueue_48)

#[program]
def main :=
  let* _224744 := ((delU_110) NULL NULL NULL myqueue_49) in
  (match _224744 with
  | ex1UL_47 m_224745 n_224746 =>
    (match m_224745 with
    | justUU_22 m_224747 =>
      let* _224748 := ((delU_110) NULL NULL NULL n_224746) in
      (match _224748 with
      | ex1UL_47 m_224749 n_224750 =>
        (match m_224749 with
        | justUU_22 m_224751 =>
          let* _224752 := ((delU_110) NULL NULL NULL n_224750) in
          (match _224752 with
          | ex1UL_47 m_224753 n_224754 =>
            (match m_224753 with
            | justUU_22 m_224755 =>
              let* _224756 := ((delU_110) NULL NULL NULL n_224754) in
              (match _224756 with
              | ex1UL_47 m_224757 n_224758 =>
                (match m_224757 with
                | justUU_22 m_224759 =>
                  let* _224760 := ((freeU_112) NULL n_224758) in
                  (match _224760 with
                  | ttU_24  =>
                    print
                      (__cat__
                        (__cat__
                          (__cat__
                            (__cat__
                              (__cat__
                                (__cat__
                                  (__cat__
                                    (__cat__
                                      (__cat__
                                        (__cat__
                                          (__cat__ "a := "
                                            ((string_of_int_33) m_224747))
                                          "\n")
                                        "b := ")
                                      ((string_of_int_33) m_224751))
                                    "\n")
                                  "c := ")
                                ((string_of_int_33) m_224755))
                              "\n")
                            "d := ")
                          ((string_of_int_33) m_224759))
                        "\n"))))))))))

[trans2e success]

-----------------------------------------

def idU_52 := fun id_225115 (A_225116) -> (m_225117) -> m_225117

def idL_51 := fun id_225118 (A_225119) -> (m_225120) -> m_225120

def rwlUU_56 :=
  fun rwl_225121 (A_225122) -> (m_225123) -> (n_225124) -> (B_225125) ->
  (__225126) -> (__225127) -> __225127

def rwlUL_55 :=
  fun rwl_225128 (A_225129) -> (m_225130) -> (n_225131) -> (B_225132) ->
  (__225133) -> (__225134) -> __225134

def rwlLU_54 :=
  fun rwl_225135 (A_225136) -> (m_225137) -> (n_225138) -> (B_225139) ->
  (__225140) -> (__225141) -> __225141

def rwlLL_53 :=
  fun rwl_225142 (A_225143) -> (m_225144) -> (n_225145) -> (B_225146) ->
  (__225147) -> (__225148) -> __225148

def rwrUU_60 :=
  fun rwr_225149 (A_225150) -> (m_225151) -> (n_225152) -> (B_225153) ->
  (__225154) -> (__225155) -> __225155

def rwrUL_59 :=
  fun rwr_225156 (A_225157) -> (m_225158) -> (n_225159) -> (B_225160) ->
  (__225161) -> (__225162) -> __225162

def rwrLU_58 :=
  fun rwr_225163 (A_225164) -> (m_225165) -> (n_225166) -> (B_225167) ->
  (__225168) -> (__225169) -> __225169

def rwrLL_57 :=
  fun rwr_225170 (A_225171) -> (m_225172) -> (n_225173) -> (B_225174) ->
  (__225175) -> (__225176) -> __225176

def sing_elimUU_74 :=
  fun sing_elim_225177 (A_225178) -> (x_225179) -> (__225180) -> __225180

def sing_elimUL_73 :=
  fun sing_elim_225181 (A_225182) -> (x_225183) -> (__225184) -> __225184

def sing_elimLU_72 :=
  fun sing_elim_225185 (A_225186) -> (x_225187) -> (__225188) -> !!

def sing_elimLL_71 :=
  fun sing_elim_225189 (A_225190) -> (x_225191) -> (__225192) -> __225192

def not_11 :=
  fun not_225193 (__225194) ->
    (match __225194 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  fun and_225195 (__225196) -> (__225197) ->
    (match __225196 with
    | true_4 =>
      (match __225197 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  fun or_225198 (__225199) -> (__225200) ->
    (match __225199 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __225200 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  fun xor_225201 (__225202) -> (__225203) ->
    (match __225202 with
    | true_4 =>
      (match __225203 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __225203 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def string_of_bool_15 :=
  fun string_of_bool_225204 (__225205) ->
    (match __225205 with
    | true_4 => "true" | false_5 => "false")

def lte_16 :=
  fun lte_225206 (__225207) -> (__225208) ->
    (match __225207 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __225207 with
      | succ_7 n_225209 =>
        (match __225208 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __225208 with
          | succ_7 n_225210 => ((lte_225206) n_225209 n_225210)))))

def lt_17 :=
  fun lt_225211 (x_225212) -> (y_225213) ->
    ((lte_16) (succ_7 x_225212) y_225213)

def pred_18 :=
  fun pred_225214 (__225215) ->
    (match __225215 with
    | zero_6 => constr0(zero_6)
    | _ => (match __225215 with
           | succ_7 n_225216 => n_225216))

def add_19 :=
  fun add_225217 (__225218) -> (__225219) ->
    (match __225218 with
    | zero_6 => __225219
    | _ =>
      (match __225218 with
      | succ_7 n_225220 => (succ_7 ((add_225217) n_225220 __225219))))

def sub_20 :=
  fun sub_225221 (__225222) -> (__225223) ->
    (match __225223 with
    | zero_6 => __225222
    | _ =>
      (match __225223 with
      | succ_7 n_225224 => ((sub_225221) ((pred_18) __225222) n_225224)))

def mul_21 :=
  fun mul_225225 (__225226) -> (__225227) ->
    (match __225226 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __225226 with
      | succ_7 n_225228 =>
        ((add_19) __225227 ((mul_225225) n_225228 __225227))))

def div_22 :=
  fun div_225229 (x_225230) -> (y_225231) ->
    (match ((lt_17) x_225230 y_225231) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_225232 :=
        fun loop_225233 (x_225234) -> (y_225235) ->
          (match ((sub_20) x_225234 ((pred_18) y_225235)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_20) x_225234 ((pred_18) y_225235)) with
            | succ_7 n_225236 => (succ_7 ((loop_225233) n_225236 y_225235))))
      in ((loop_225232) x_225230 y_225231))

def rem_23 :=
  fun rem_225237 (x_225238) -> (y_225239) ->
    ((sub_20) x_225238 ((mul_21) ((div_22) x_225238 y_225239) y_225239))

def rconsUU_82 :=
  fun rcons_225240 (A_225241) -> (__225242) -o (__225243) -o
    (match __225242 with
    | nilUU_35 => (consUU_36 __225243 constr0(nilUU_35))
    | _ =>
      (match __225242 with
      | consUU_36 hd_225244 tl_225245 =>
        (consUU_36 hd_225244 ((rcons_225240) NULL tl_225245 __225243))))

def rconsUL_81 :=
  fun rcons_225246 (A_225247) -> (__225248) -o (__225249) -o
    (match __225248 with
    | nilUL_33 => (consUL_34 __225249 constr0(nilUL_33))
    | _ =>
      (match __225248 with
      | consUL_34 hd_225250 tl_225251 =>
        (consUL_34 hd_225250 ((rcons_225246) NULL tl_225251 __225249))))

def rconsLL_79 :=
  fun rcons_225252 (A_225253) -> (__225254) -o (__225255) -o
    (match __225254 with
    | nilLL_29 => (consLL_30 __225255 constr0(nilLL_29))
    | _ =>
      (match __225254 with
      | consLL_30 hd_225256 tl_225257 =>
        (consLL_30 hd_225256 ((rcons_225252) NULL tl_225257 __225255))))

def free_listUU_86 :=
  fun free_list_225258 (A_225259) -> (f_225260) -> (__225261) ->
    (match __225261 with
    | nilUU_35 => constr0(ttU_24)
    | _ =>
      (match __225261 with
      | consUU_36 hd_225262 tl_225263 =>
        let __225264 := ((f_225260) hd_225262) in
        ((free_list_225258) NULL f_225260 tl_225263)))

def free_listUL_85 :=
  fun free_list_225265 (A_225266) -> (f_225267) -> (__225268) ->
    (match __225268 with
    | nilUL_33 => constr0(ttU_24)
    | _ =>
      (match __225268 with
      | consUL_34 hd_225269 tl_225270 =>
        let __225271 := ((f_225267) hd_225269) in
        ((free_list_225265) NULL f_225267 tl_225270)))

def free_listLL_83 :=
  fun free_list_225272 (A_225273) -> (f_225274) -> (__225275) ->
    (match __225275 with
    | nilLL_29 => constr0(ttU_24)
    | _ =>
      (match __225275 with
      | consLL_30 hd_225276 tl_225277 =>
        let __225278 := ((f_225274) hd_225276) in
        ((free_list_225272) NULL f_225274 tl_225277)))

def pow_27 :=
  fun pow_225279 (x_225280) -> (y_225281) ->
    let loop_225282 :=
      fun loop_225283 (acc_225284) -> (y_225285) ->
        (match (__lte__ y_225285 0) with
        | true_4 => acc_225284
        | false_5 =>
          ((loop_225283) (__mul__ x_225280 acc_225284) (__sub__ y_225285 1)))
    in ((loop_225282) 1 y_225281)

def powm_28 :=
  fun powm_225286 (x_225287) -> (y_225288) -> (m_225289) ->
    let loop_225290 :=
      fun loop_225291 (acc_225292) -> (y_225293) ->
        (match (__lte__ y_225293 0) with
        | true_4 => acc_225292
        | false_5 =>
          ((loop_225291)
            (__mod__ (__mul__ x_225287 acc_225292) m_225289)
              (__sub__ y_225293 1)))
    in ((loop_225290) 1 y_225288)

def ord_29 := fun ord_225294 (c_225295) -> (__ord__ c_225295)

def chr_30 := fun chr_225296 (i_225297) -> (__chr__ i_225297)

def str_31 := fun str_225298 (c_225299) -> (__push__ "" c_225299)

def strlen_32 := fun strlen_225300 (s_225301) -> (__size__ s_225301)

def string_of_int_33 :=
  fun string_of_int_225302 (i_225303) ->
    let aux_225304 :=
      fun aux_225305 (i_225306) ->
        (match (__lte__ 10 i_225306) with
        | true_4 =>
          let r_225307 := (__mod__ i_225306 10) in
          let i_225308 := (__div__ i_225306 10) in
          (__push__ ((aux_225305) i_225308)
            ((chr_30) (__add__ r_225307 ((ord_29) 0))))
        | false_5 => ((str_31) ((chr_30) (__add__ i_225306 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_225303) with
    | true_4 => ((aux_225304) i_225303)
    | false_5 => (__cat__ "~" ((aux_225304) (__neg__ i_225303))))

def node_workerU_102 :=
  fun node_worker_225309 (A_225310) -> (xs_225311) -> (x_225312) ->
  (__225313) -o (__225314) -o
    lazy(let _225315 := force(lazy(recv[L](__225314))) in
         force((match _225315 with
               | ex1LL_45 m_225316 n_225317 =>
                 (match m_225316 with
                 | DelU_52 =>
                   lazy(let c_225318 :=
                          force(((lam (x_225319) ->
                                    lazy(send(n_225317, x_225319)))
                                  x_225312))
                        in
                        let c_225320 :=
                          force(((lam (x_225321) ->
                                    lazy(send(c_225318, x_225321)))
                                  __225313))
                        in force(lazy(close[true] c_225320)))
                 | _ =>
                   (match m_225316 with
                   | InsU_51 x_225322 =>
                     lazy(let c_next_225323 :=
                            force(((lam (x_225324) ->
                                      lazy(send(__225313, x_225324)))
                                    (InsU_51 x_225322)))
                          in
                          force(((node_worker_225309)
                                  NULL NULL x_225312 c_next_225323 n_225317))))))))

def node_workerL_101 :=
  fun node_worker_225325 (A_225326) -> (xs_225327) -> (x_225328) ->
  (__225329) -o (__225330) -o
    lazy(let _225331 := force(lazy(recv[L](__225330))) in
         force((match _225331 with
               | ex1LL_45 m_225332 n_225333 =>
                 (match m_225332 with
                 | DelL_50 =>
                   lazy(let c_225334 :=
                          force(((lam (x_225335) ->
                                    lazy(send(n_225333, x_225335)))
                                  x_225328))
                        in
                        let c_225336 :=
                          force(((lam (x_225337) ->
                                    lazy(send(c_225334, x_225337)))
                                  __225329))
                        in force(lazy(close[true] c_225336)))
                 | _ =>
                   (match m_225332 with
                   | InsL_49 x_225338 =>
                     lazy(let c_next_225339 :=
                            force(((lam (x_225340) ->
                                      lazy(send(__225329, x_225340)))
                                    (InsL_49 x_225338)))
                          in
                          force(((node_worker_225325)
                                  NULL NULL x_225328 c_next_225339 n_225333))))))))

def empty_workerU_104 :=
  fun empty_worker_225341 (A_225342) -> (c_225343) ->
    lazy(let _225344 := force(lazy(recv[L](c_225343))) in
         force((match _225344 with
               | ex1LL_45 m_225345 n_225346 =>
                 (match m_225345 with
                 | DelU_52 => lazy(close[true] n_225346)
                 | _ =>
                   (match m_225345 with
                   | InsU_51 x_225347 =>
                     lazy(let c0_225348 :=
                            force(lazy(fork
                                         fun _225349 (_225350) -o
                                           ((empty_worker_225341)
                                             NULL _225350)))
                          in
                          force(((node_workerU_102)
                                  NULL NULL x_225347 c0_225348 n_225346))))))))

def empty_workerL_103 :=
  fun empty_worker_225351 (A_225352) -> (c_225353) ->
    lazy(let _225354 := force(lazy(recv[L](c_225353))) in
         force((match _225354 with
               | ex1LL_45 m_225355 n_225356 =>
                 (match m_225355 with
                 | DelL_50 => lazy(close[true] n_225356)
                 | _ =>
                   (match m_225355 with
                   | InsL_49 x_225357 =>
                     lazy(let c0_225358 :=
                            force(lazy(fork
                                         fun _225359 (_225360) -o
                                           ((empty_worker_225351)
                                             NULL _225360)))
                          in
                          force(((node_workerL_101)
                                  NULL NULL x_225357 c0_225358 n_225356))))))))

def emptyU_106 :=
  fun empty_225361 (A_225362) ->
    lazy(fork fun _225363 (_225364) -o ((empty_workerU_104) NULL _225364))

def emptyL_105 :=
  fun empty_225365 (A_225366) ->
    lazy(fork fun _225367 (_225368) -o ((empty_workerL_103) NULL _225368))

def insU_108 :=
  fun ins_225369 (A_225370) -> (xs_225371) -> (x_225372) -> (__225373) -o
    lazy(let q_225374 := force(__225373) in
         let q_225375 :=
           force(((lam (x_225376) -> lazy(send(q_225374, x_225376)))
                   (InsU_51 x_225372)))
         in force(lazy(q_225375)))

def insL_107 :=
  fun ins_225377 (A_225378) -> (xs_225379) -> (x_225380) -> (__225381) -o
    lazy(let q_225382 := force(__225381) in
         let q_225383 :=
           force(((lam (x_225384) -> lazy(send(q_225382, x_225384)))
                   (InsL_49 x_225380)))
         in force(lazy(q_225383)))

def delU_110 :=
  fun del_225385 (A_225386) -> (x_225387) -> (xs_225388) -> (q_225389) ->
    lazy(let q_225390 := force(q_225389) in
         let q_225391 :=
           force(((lam (x_225392) -> lazy(send(q_225390, x_225392)))
                   constr0(DelU_52)))
         in
         let _225393 := force(lazy(recv[U](q_225391))) in
         force((match _225393 with
               | ex1UL_47 m_225394 n_225395 =>
                 lazy(let _225396 := force(lazy(recv[L](n_225395))) in
                      force((match _225396 with
                            | ex1LL_45 m_225397 n_225398 =>
                              lazy(let __225399 :=
                                     force(lazy(close[false] n_225398))
                                   in
                                   force(lazy((ex1UL_47
                                                m_225394 lazy(m_225397)))))))))))

def delL_109 :=
  fun del_225400 (A_225401) -> (x_225402) -> (xs_225403) -> (q_225404) ->
    lazy(let q_225405 := force(q_225404) in
         let q_225406 :=
           force(((lam (x_225407) -> lazy(send(q_225405, x_225407)))
                   constr0(DelL_50)))
         in
         let _225408 := force(lazy(recv[L](q_225406))) in
         force((match _225408 with
               | ex1LL_45 m_225409 n_225410 =>
                 lazy(let _225411 := force(lazy(recv[L](n_225410))) in
                      force((match _225411 with
                            | ex1LL_45 m_225412 n_225413 =>
                              lazy(let __225414 :=
                                     force(lazy(close[false] n_225413))
                                   in
                                   force(lazy((ex1LL_45
                                                m_225409 lazy(m_225412)))))))))))

def freeU_112 :=
  fun free_225415 (A_225416) -> (q_225417) ->
    lazy(let q_225418 := force(q_225417) in
         let q_225419 :=
           force(((lam (x_225420) -> lazy(send(q_225418, x_225420)))
                   constr0(DelU_52)))
         in force(lazy(close[false] q_225419)))

def freeL_111 :=
  fun free_225421 (A_225422) -> (q_225423) ->
    lazy(let q_225424 := force(q_225423) in
         let q_225425 :=
           force(((lam (x_225426) -> lazy(send(q_225424, x_225426)))
                   constr0(DelL_50)))
         in force(lazy(close[false] q_225425)))

def myqueue_45 := ((emptyU_106) NULL)

def myqueue_46 := ((insU_108) NULL NULL 0 myqueue_45)

def myqueue_47 := ((insU_108) NULL NULL 1 myqueue_46)

def myqueue_48 := ((insU_108) NULL NULL 2 myqueue_47)

def myqueue_49 := ((insU_108) NULL NULL 3 myqueue_48)

def main :=
  lazy(let _225427 := force(((delU_110) NULL NULL NULL myqueue_49)) in
       force((match _225427 with
             | ex1UL_47 m_225428 n_225429 =>
               lazy(let _225430 :=
                      force(((delU_110) NULL NULL NULL n_225429))
                    in
                    force((match _225430 with
                          | ex1UL_47 m_225431 n_225432 =>
                            lazy(let _225433 :=
                                   force(((delU_110) NULL NULL NULL n_225432))
                                 in
                                 force((match _225433 with
                                       | ex1UL_47 m_225434 n_225435 =>
                                         lazy(let _225436 :=
                                                force(((delU_110)
                                                        NULL NULL NULL
                                                          n_225435))
                                              in
                                              force((match _225436 with
                                                    | ex1UL_47 m_225437
                                                      n_225438 =>
                                                      lazy(let _225439 :=
                                                             force(((freeU_112)
                                                                    NULL
                                                                    n_225438))
                                                           in
                                                           force((match _225439 with
                                                                 | ttU_24 =>
                                                                   lazy(
                                                                   print
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    "a := "
                                                                    ((string_of_int_33)
                                                                    m_225428))
                                                                    "\n")
                                                                    "b := ")
                                                                    ((string_of_int_33)
                                                                    m_225431))
                                                                    "\n")
                                                                    "c := ")
                                                                    ((string_of_int_33)
                                                                    m_225434))
                                                                    "\n")
                                                                    "d := ")
                                                                    ((string_of_int_33)
                                                                    m_225437))
                                                                    "\n")))))))))))))))))

[trans23 success]

-----------------------------------------

def idU_52 := lam (A_225901) -> (m_225902) -> m_225902

def idL_51 := lam (A_225903) -> (m_225904) -> m_225904

def rwlUU_56 :=
  lam (A_225905) -> (m_225906) -> (n_225907) -> (B_225908) -> (__225909) ->
  (__225910) -> __225910

def rwlUL_55 :=
  lam (A_225911) -> (m_225912) -> (n_225913) -> (B_225914) -> (__225915) ->
  (__225916) -> __225916

def rwlLU_54 :=
  lam (A_225917) -> (m_225918) -> (n_225919) -> (B_225920) -> (__225921) ->
  (__225922) -> __225922

def rwlLL_53 :=
  lam (A_225923) -> (m_225924) -> (n_225925) -> (B_225926) -> (__225927) ->
  (__225928) -> __225928

def rwrUU_60 :=
  lam (A_225929) -> (m_225930) -> (n_225931) -> (B_225932) -> (__225933) ->
  (__225934) -> __225934

def rwrUL_59 :=
  lam (A_225935) -> (m_225936) -> (n_225937) -> (B_225938) -> (__225939) ->
  (__225940) -> __225940

def rwrLU_58 :=
  lam (A_225941) -> (m_225942) -> (n_225943) -> (B_225944) -> (__225945) ->
  (__225946) -> __225946

def rwrLL_57 :=
  lam (A_225947) -> (m_225948) -> (n_225949) -> (B_225950) -> (__225951) ->
  (__225952) -> __225952

def sing_elimUU_74 := lam (A_225953) -> (x_225954) -> (__225955) -> __225955

def sing_elimUL_73 := lam (A_225956) -> (x_225957) -> (__225958) -> __225958

def sing_elimLU_72 := lam (A_225959) -> (x_225960) -> (__225961) -> !!

def sing_elimLL_71 := lam (A_225962) -> (x_225963) -> (__225964) -> __225964

def not_11 :=
  lam (__225965) ->
    (match __225965 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  lam (__225966) -> (__225967) ->
    (match __225966 with
    | true_4 =>
      (match __225967 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  lam (__225968) -> (__225969) ->
    (match __225968 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __225969 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  lam (__225970) -> (__225971) ->
    (match __225970 with
    | true_4 =>
      (match __225971 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __225971 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def string_of_bool_15 :=
  lam (__225972) ->
    (match __225972 with
    | true_4 => "true" | false_5 => "false")

def lte_16 :=
  fun lte_225973 (__225974) -> (__225975) ->
    (match __225974 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __225974 with
      | succ_7 n_225976 =>
        (match __225975 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __225975 with
          | succ_7 n_225977 => ((lte_225973) n_225976 n_225977)))))

def lt_17 :=
  lam (x_225978) -> (y_225979) -> ((lte_16) (succ_7 x_225978) y_225979)

def pred_18 :=
  lam (__225980) ->
    (match __225980 with
    | zero_6 => constr0(zero_6)
    | _ => (match __225980 with
           | succ_7 n_225981 => n_225981))

def add_19 :=
  fun add_225982 (__225983) -> (__225984) ->
    (match __225983 with
    | zero_6 => __225984
    | _ =>
      (match __225983 with
      | succ_7 n_225985 => (succ_7 ((add_225982) n_225985 __225984))))

def sub_20 :=
  fun sub_225986 (__225987) -> (__225988) ->
    (match __225988 with
    | zero_6 => __225987
    | _ =>
      (match __225988 with
      | succ_7 n_225989 => ((sub_225986) ((pred_18) __225987) n_225989)))

def mul_21 :=
  fun mul_225990 (__225991) -> (__225992) ->
    (match __225991 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __225991 with
      | succ_7 n_225993 =>
        ((add_19) __225992 ((mul_225990) n_225993 __225992))))

def div_22 :=
  lam (x_225994) -> (y_225995) ->
    (match ((lt_17) x_225994 y_225995) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_225996 :=
        fun loop_225997 (x_225998) -> (y_225999) ->
          (match ((sub_20) x_225998 ((pred_18) y_225999)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_20) x_225998 ((pred_18) y_225999)) with
            | succ_7 n_226000 => (succ_7 ((loop_225997) n_226000 y_225999))))
      in ((loop_225996) x_225994 y_225995))

def rem_23 :=
  lam (x_226001) -> (y_226002) ->
    ((sub_20) x_226001 ((mul_21) ((div_22) x_226001 y_226002) y_226002))

def rconsUU_82 :=
  fun rcons_226003 (A_226004) -> (__226005) -o (__226006) -o
    (match __226005 with
    | nilUU_35 => (consUU_36 __226006 constr0(nilUU_35))
    | _ =>
      (match __226005 with
      | consUU_36 hd_226007 tl_226008 =>
        (consUU_36 hd_226007 ((rcons_226003) NULL tl_226008 __226006))))

def rconsUL_81 :=
  fun rcons_226009 (A_226010) -> (__226011) -o (__226012) -o
    (match __226011 with
    | nilUL_33 => (consUL_34 __226012 constr0(nilUL_33))
    | _ =>
      (match __226011 with
      | consUL_34 hd_226013 tl_226014 =>
        (consUL_34 hd_226013 ((rcons_226009) NULL tl_226014 __226012))))

def rconsLL_79 :=
  fun rcons_226015 (A_226016) -> (__226017) -o (__226018) -o
    (match __226017 with
    | nilLL_29 => (consLL_30 __226018 constr0(nilLL_29))
    | _ =>
      (match __226017 with
      | consLL_30 hd_226019 tl_226020 =>
        (consLL_30 hd_226019 ((rcons_226015) NULL tl_226020 __226018))))

def free_listUU_86 :=
  fun free_list_226021 (A_226022) -> (f_226023) -> (__226024) ->
    (match __226024 with
    | nilUU_35 => constr0(ttU_24)
    | _ =>
      (match __226024 with
      | consUU_36 hd_226025 tl_226026 =>
        let __226027 := ((f_226023) hd_226025) in
        ((free_list_226021) NULL f_226023 tl_226026)))

def free_listUL_85 :=
  fun free_list_226028 (A_226029) -> (f_226030) -> (__226031) ->
    (match __226031 with
    | nilUL_33 => constr0(ttU_24)
    | _ =>
      (match __226031 with
      | consUL_34 hd_226032 tl_226033 =>
        let __226034 := ((f_226030) hd_226032) in
        ((free_list_226028) NULL f_226030 tl_226033)))

def free_listLL_83 :=
  fun free_list_226035 (A_226036) -> (f_226037) -> (__226038) ->
    (match __226038 with
    | nilLL_29 => constr0(ttU_24)
    | _ =>
      (match __226038 with
      | consLL_30 hd_226039 tl_226040 =>
        let __226041 := ((f_226037) hd_226039) in
        ((free_list_226035) NULL f_226037 tl_226040)))

def pow_27 :=
  lam (x_226042) -> (y_226043) ->
    let loop_226044 :=
      fun loop_226045 (acc_226046) -> (y_226047) ->
        (match (__lte__ y_226047 0) with
        | true_4 => acc_226046
        | false_5 =>
          ((loop_226045) (__mul__ x_226042 acc_226046) (__sub__ y_226047 1)))
    in ((loop_226044) 1 y_226043)

def powm_28 :=
  lam (x_226048) -> (y_226049) -> (m_226050) ->
    let loop_226051 :=
      fun loop_226052 (acc_226053) -> (y_226054) ->
        (match (__lte__ y_226054 0) with
        | true_4 => acc_226053
        | false_5 =>
          ((loop_226052)
            (__mod__ (__mul__ x_226048 acc_226053) m_226050)
              (__sub__ y_226054 1)))
    in ((loop_226051) 1 y_226049)

def ord_29 := lam (c_226055) -> (__ord__ c_226055)

def chr_30 := lam (i_226056) -> (__chr__ i_226056)

def str_31 := lam (c_226057) -> (__push__ "" c_226057)

def strlen_32 := lam (s_226058) -> (__size__ s_226058)

def string_of_int_33 :=
  lam (i_226059) ->
    let aux_226060 :=
      fun aux_226061 (i_226062) ->
        (match (__lte__ 10 i_226062) with
        | true_4 =>
          let r_226063 := (__mod__ i_226062 10) in
          let i_226064 := (__div__ i_226062 10) in
          (__push__ ((aux_226061) i_226064)
            ((chr_30) (__add__ r_226063 ((ord_29) 0))))
        | false_5 => ((str_31) ((chr_30) (__add__ i_226062 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_226059) with
    | true_4 => ((aux_226060) i_226059)
    | false_5 => (__cat__ "~" ((aux_226060) (__neg__ i_226059))))

def node_workerU_102 :=
  fun node_worker_226065 (A_226066) -> (xs_226067) -> (x_226068) ->
  (__226069) -o (__226070) -o
    lazy(let _226071 := recv[L](__226070) in
         (match _226071 with
         | ex1LL_45 m_226072 n_226073 =>
           (match m_226072 with
           | DelU_52 =>
             let c_226074 := send(n_226073, x_226068) in
             let c_226075 := send(c_226074, __226069) in close[true] c_226075
           | _ =>
             (match m_226072 with
             | InsU_51 x_226076 =>
               let c_next_226077 := send(__226069, (InsU_51 x_226076)) in
               force(((node_worker_226065)
                       NULL NULL x_226068 c_next_226077 n_226073))))))

def node_workerL_101 :=
  fun node_worker_226078 (A_226079) -> (xs_226080) -> (x_226081) ->
  (__226082) -o (__226083) -o
    lazy(let _226084 := recv[L](__226083) in
         (match _226084 with
         | ex1LL_45 m_226085 n_226086 =>
           (match m_226085 with
           | DelL_50 =>
             let c_226087 := send(n_226086, x_226081) in
             let c_226088 := send(c_226087, __226082) in close[true] c_226088
           | _ =>
             (match m_226085 with
             | InsL_49 x_226089 =>
               let c_next_226090 := send(__226082, (InsL_49 x_226089)) in
               force(((node_worker_226078)
                       NULL NULL x_226081 c_next_226090 n_226086))))))

def empty_workerU_104 :=
  fun empty_worker_226091 (A_226092) -> (c_226093) ->
    lazy(let _226094 := recv[L](c_226093) in
         (match _226094 with
         | ex1LL_45 m_226095 n_226096 =>
           (match m_226095 with
           | DelU_52 => close[true] n_226096
           | _ =>
             (match m_226095 with
             | InsU_51 x_226097 =>
               let c0_226098 :=
                 fork lam (_226099) -o ((empty_worker_226091) NULL _226099)
               in
               force(((node_workerU_102)
                       NULL NULL x_226097 c0_226098 n_226096))))))

def empty_workerL_103 :=
  fun empty_worker_226100 (A_226101) -> (c_226102) ->
    lazy(let _226103 := recv[L](c_226102) in
         (match _226103 with
         | ex1LL_45 m_226104 n_226105 =>
           (match m_226104 with
           | DelL_50 => close[true] n_226105
           | _ =>
             (match m_226104 with
             | InsL_49 x_226106 =>
               let c0_226107 :=
                 fork lam (_226108) -o ((empty_worker_226100) NULL _226108)
               in
               force(((node_workerL_101)
                       NULL NULL x_226106 c0_226107 n_226105))))))

def emptyU_106 :=
  lam (A_226109) ->
    lazy(fork lam (_226110) -o ((empty_workerU_104) NULL _226110))

def emptyL_105 :=
  lam (A_226111) ->
    lazy(fork lam (_226112) -o ((empty_workerL_103) NULL _226112))

def insU_108 :=
  lam (A_226113) -> (xs_226114) -> (x_226115) -> (__226116) -o
    lazy(let q_226117 := force(__226116) in
         let q_226118 := send(q_226117, (InsU_51 x_226115)) in q_226118)

def insL_107 :=
  lam (A_226119) -> (xs_226120) -> (x_226121) -> (__226122) -o
    lazy(let q_226123 := force(__226122) in
         let q_226124 := send(q_226123, (InsL_49 x_226121)) in q_226124)

def delU_110 :=
  lam (A_226125) -> (x_226126) -> (xs_226127) -> (q_226128) ->
    lazy(let q_226129 := force(q_226128) in
         let q_226130 := send(q_226129, constr0(DelU_52)) in
         let _226131 := recv[U](q_226130) in
         (match _226131 with
         | ex1UL_47 m_226132 n_226133 =>
           let _226134 := recv[L](n_226133) in
           (match _226134 with
           | ex1LL_45 m_226135 n_226136 =>
             let __226137 := close[false] n_226136 in
             (ex1UL_47 m_226132 lazy(m_226135)))))

def delL_109 :=
  lam (A_226138) -> (x_226139) -> (xs_226140) -> (q_226141) ->
    lazy(let q_226142 := force(q_226141) in
         let q_226143 := send(q_226142, constr0(DelL_50)) in
         let _226144 := recv[L](q_226143) in
         (match _226144 with
         | ex1LL_45 m_226145 n_226146 =>
           let _226147 := recv[L](n_226146) in
           (match _226147 with
           | ex1LL_45 m_226148 n_226149 =>
             let __226150 := close[false] n_226149 in
             (ex1LL_45 m_226145 lazy(m_226148)))))

def freeU_112 :=
  lam (A_226151) -> (q_226152) ->
    lazy(let q_226153 := force(q_226152) in
         let q_226154 := send(q_226153, constr0(DelU_52)) in
         close[false] q_226154)

def freeL_111 :=
  lam (A_226155) -> (q_226156) ->
    lazy(let q_226157 := force(q_226156) in
         let q_226158 := send(q_226157, constr0(DelL_50)) in
         close[false] q_226158)

def myqueue_45 := ((emptyU_106) NULL)

def myqueue_46 := ((insU_108) NULL NULL 0 myqueue_45)

def myqueue_47 := ((insU_108) NULL NULL 1 myqueue_46)

def myqueue_48 := ((insU_108) NULL NULL 2 myqueue_47)

def myqueue_49 := ((insU_108) NULL NULL 3 myqueue_48)

def main :=
  lazy(let _226159 := force(((delU_110) NULL NULL NULL myqueue_49)) in
       (match _226159 with
       | ex1UL_47 m_226160 n_226161 =>
         let _226162 := force(((delU_110) NULL NULL NULL n_226161)) in
         (match _226162 with
         | ex1UL_47 m_226163 n_226164 =>
           let _226165 := force(((delU_110) NULL NULL NULL n_226164)) in
           (match _226165 with
           | ex1UL_47 m_226166 n_226167 =>
             let _226168 := force(((delU_110) NULL NULL NULL n_226167)) in
             (match _226168 with
             | ex1UL_47 m_226169 n_226170 =>
               let _226171 := force(((freeU_112) NULL n_226170)) in
               (match _226171 with
               | ttU_24 =>
                 print
                   (__cat__
                     (__cat__
                       (__cat__
                         (__cat__
                           (__cat__
                             (__cat__
                               (__cat__
                                 (__cat__
                                   (__cat__
                                     (__cat__
                                       (__cat__ "a := "
                                         ((string_of_int_33) m_226160))
                                       "\n")
                                     "b := ")
                                   ((string_of_int_33) m_226163))
                                 "\n")
                               "c := ")
                             ((string_of_int_33) m_226166))
                           "\n")
                         "d := ")
                       ((string_of_int_33) m_226169))
                     "\n")))))))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn string_of_bool_98(__99%U) {
  match(__99){
    true_4 => {
      x_101 := str("true");
      x_100 := x_101;
    }
    false_5 => {
      x_102 := str("false");
      x_100 := x_102;
    }
  }
  return x_100;
}

fn lte_103(__104%U, __105%U) {
  match(__104){
    zero_6 => {
      x_106 := true_4;
    }
    _ => {
      match[U](__104){
        succ_7(n_108) => {
          match(__105){
            zero_6 => {
              x_109 := false_5;
            }
            _ => {
              match[U](__105){
                succ_7(n_111) => {
                  x_112 := lte_103(n_108, n_111);
                  x_110 := x_112;
                }
              }
              x_109 := x_110;
            }
          }
          x_107 := x_109;
        }
      }
      x_106 := x_107;
    }
  }
  return x_106;
}

fn lt_113(x_114%U, y_115%U) {
  x_117 := mkconstr(succ_7, [x_114]);
  x_116 := lte_103(x_117, y_115);
  return x_116;
}

fn pred_118(__119%U) {
  match(__119){
    zero_6 => {
      x_120 := zero_6;
    }
    _ => {
      match[U](__119){ succ_7(n_122) => {
                         x_121 := n_122;
                       } }
      x_120 := x_121;
    }
  }
  return x_120;
}

fn add_123(__124%U, __125%U) {
  match(__124){
    zero_6 => {
      x_126 := __125;
    }
    _ => {
      match[U](__124){
        succ_7(n_128) => {
          x_129 := add_123(n_128, __125);
          x_130 := mkconstr(succ_7, [x_129]);
          x_127 := x_130;
        }
      }
      x_126 := x_127;
    }
  }
  return x_126;
}

fn sub_131(__132%U, __133%U) {
  match(__133){
    zero_6 => {
      x_134 := __132;
    }
    _ => {
      match[U](__133){
        succ_7(n_136) => {
          x_138 := pred_118(__132);
          x_137 := sub_131(x_138, n_136);
          x_135 := x_137;
        }
      }
      x_134 := x_135;
    }
  }
  return x_134;
}

fn mul_139(__140%U, __141%U) {
  match(__140){
    zero_6 => {
      x_142 := zero_6;
    }
    _ => {
      match[U](__140){
        succ_7(n_144) => {
          x_146 := mul_139(n_144, __141);
          x_145 := add_123(__141, x_146);
          x_143 := x_145;
        }
      }
      x_142 := x_143;
    }
  }
  return x_142;
}

fn div_147(x_148%U, y_149%U) {
  x_151 := lt_113(x_148, y_149);
  match(x_151){
    true_4 => {
      x_150 := zero_6;
    }
    false_5 => {
      x_153 :=
        fn loop_154(x_155%U, y_156%U) {
          x_159 := pred_118(y_156);
          x_158 := sub_131(x_155, x_159);
          match(x_158){
            zero_6 => {
              x_157 := zero_6;
            }
            _ => {
              x_162 := pred_118(y_156);
              x_161 := sub_131(x_155, x_162);
              match[U](x_161){
                succ_7(n_163) => {
                  x_164 := loop_154(n_163, y_156);
                  x_165 := mkconstr(succ_7, [x_164]);
                  x_160 := x_165;
                }
              }
              x_157 := x_160;
            }
          }
          return x_157;
        };
      loop_152 := x_153;
      x_166 := loop_152(x_148, y_149);
      x_150 := x_166;
    }
  }
  return x_150;
}

fn rem_167(x_168%U, y_169%U) {
  x_172 := div_147(x_168, y_169);
  x_171 := mul_139(x_172, y_169);
  x_170 := sub_131(x_168, x_171);
  return x_170;
}

fn rconsUU_173(A_174%U, __175%L, __176%L) {
  match(__175){
    nilUU_35 => {
      x_178 := mkconstr(consUU_36, [__176, nilUU_35]);
      x_177 := x_178;
    }
    _ => {
      match[U](__175){
        consUU_36(hd_180, tl_181) => {
          x_182 := rconsUU_173(NULL, tl_181, __176);
          x_183 := mkconstr(consUU_36, [hd_180, x_182]);
          x_179 := x_183;
        }
      }
      x_177 := x_179;
    }
  }
  return x_177;
}

fn rconsUL_184(A_185%U, __186%L, __187%L) {
  match(__186){
    nilUL_33 => {
      x_189 := mkconstr(consUL_34, [__187, nilUL_33]);
      x_188 := x_189;
    }
    _ => {
      match[L](__186){
        consUL_34(hd_191, tl_192) => {
          x_193 := rconsUL_184(NULL, tl_192, __187);
          x_194 := mkconstr(consUL_34, [hd_191, x_193]);
          x_190 := x_194;
        }
      }
      x_188 := x_190;
    }
  }
  return x_188;
}

fn rconsLL_195(A_196%U, __197%L, __198%L) {
  match(__197){
    nilLL_29 => {
      x_200 := mkconstr(consLL_30, [__198, nilLL_29]);
      x_199 := x_200;
    }
    _ => {
      match[L](__197){
        consLL_30(hd_202, tl_203) => {
          x_204 := rconsLL_195(NULL, tl_203, __198);
          x_205 := mkconstr(consLL_30, [hd_202, x_204]);
          x_201 := x_205;
        }
      }
      x_199 := x_201;
    }
  }
  return x_199;
}

fn free_listUU_206(A_207%U, f_208%U, __209%U) {
  match(__209){
    nilUU_35 => {
      x_210 := ttU_24;
    }
    _ => {
      match[U](__209){
        consUU_36(hd_212, tl_213) => {
          x_215 := f_208(hd_212);
          __214 := x_215;
          x_216 := free_listUU_206(NULL, f_208, tl_213);
          x_211 := x_216;
        }
      }
      x_210 := x_211;
    }
  }
  return x_210;
}

fn free_listUL_217(A_218%U, f_219%U, __220%U) {
  match(__220){
    nilUL_33 => {
      x_221 := ttU_24;
    }
    _ => {
      match[L](__220){
        consUL_34(hd_223, tl_224) => {
          x_226 := f_219(hd_223);
          __225 := x_226;
          x_227 := free_listUL_217(NULL, f_219, tl_224);
          x_222 := x_227;
        }
      }
      x_221 := x_222;
    }
  }
  return x_221;
}

fn free_listLL_228(A_229%U, f_230%U, __231%U) {
  match(__231){
    nilLL_29 => {
      x_232 := ttU_24;
    }
    _ => {
      match[L](__231){
        consLL_30(hd_234, tl_235) => {
          x_237 := f_230(hd_234);
          __236 := x_237;
          x_238 := free_listLL_228(NULL, f_230, tl_235);
          x_233 := x_238;
        }
      }
      x_232 := x_233;
    }
  }
  return x_232;
}

fn pow_239(x_240%U, y_241%U) {
  x_243 :=
    fn loop_244(acc_245%U, y_246%U) {
      x_248 := lte(y_246, 0);
      match(x_248){
        true_4 => {
          x_247 := acc_245;
        }
        false_5 => {
          x_250 := mul(x_240, acc_245);
          x_251 := sub(y_246, 1);
          x_249 := loop_244(x_250, x_251);
          x_247 := x_249;
        }
      }
      return x_247;
    };
  loop_242 := x_243;
  x_252 := loop_242(1, y_241);
  return x_252;
}

fn powm_253(x_254%U, y_255%U, m_256%U) {
  x_258 :=
    fn loop_259(acc_260%U, y_261%U) {
      x_263 := lte(y_261, 0);
      match(x_263){
        true_4 => {
          x_262 := acc_260;
        }
        false_5 => {
          x_266 := mul(x_254, acc_260);
          x_265 := mod(x_266, m_256);
          x_267 := sub(y_261, 1);
          x_264 := loop_259(x_265, x_267);
          x_262 := x_264;
        }
      }
      return x_262;
    };
  loop_257 := x_258;
  x_268 := loop_257(1, y_255);
  return x_268;
}

fn ord_269(c_270%U) {
  x_271 := ord(c_270);
  return x_271;
}

fn chr_272(i_273%U) {
  x_274 := chr(i_273);
  return x_274;
}

fn str_275(c_276%U) {
  x_278 := str("");
  x_277 := push(x_278, c_276);
  return x_277;
}

fn strlen_279(s_280%U) {
  x_281 := size(s_280);
  return x_281;
}

fn string_of_int_282(i_283%U) {
  x_285 :=
    fn aux_286(i_287%U) {
      x_289 := lte(10, i_287);
      match(x_289){
        true_4 => {
          x_291 := mod(i_287, 10);
          r_290 := x_291;
          x_293 := div(i_287, 10);
          i_292 := x_293;
          x_295 := aux_286(i_292);
          x_298 := ord_269(0);
          x_297 := add(r_290, x_298);
          x_296 := chr_272(x_297);
          x_294 := push(x_295, x_296);
          x_288 := x_294;
        }
        false_5 => {
          x_302 := ord_269(0);
          x_301 := add(i_287, x_302);
          x_300 := chr_272(x_301);
          x_299 := str_275(x_300);
          x_288 := x_299;
        }
      }
      return x_288;
    };
  aux_284 := x_285;
  x_304 := lte(0, i_283);
  match(x_304){
    true_4 => {
      x_305 := aux_284(i_283);
      x_303 := x_305;
    }
    false_5 => {
      x_307 := str("~");
      x_309 := neg(i_283);
      x_308 := aux_284(x_309);
      x_306 := cat(x_307, x_308);
      x_303 := x_306;
    }
  }
  return x_303;
}

fn node_workerU_310(A_311%U, xs_312%U, x_313%U, __314%L, __315%L) {
  x_316 :=
    lazy {
      x_318 := recv[L](__315);
      _317 := x_318;
      match[L](_317){
        ex1LL_45(m_320, n_321) => {
          match(m_320){
            DelU_52 => {
              x_324 := send(n_321, x_313);
              c_323 := x_324;
              x_326 := send(c_323, __314);
              c_325 := x_326;
              x_327 := close[true](c_325);
              x_322 := x_327;
            }
            _ => {
              match[L](m_320){
                InsU_51(x_329) => {
                  x_332 := mkconstr(InsU_51, [x_329]);
                  x_331 := send(__314, x_332);
                  c_next_330 := x_331;
                  x_334 := node_workerU_310(NULL, NULL, x_313, c_next_330, n_321);
                  x_333 := force(x_334);
                  x_328 := x_333;
                }
              }
              x_322 := x_328;
            }
          }
          x_319 := x_322;
        }
      }
      return x_319;
    };
  return x_316;
}

fn node_workerL_335(A_336%U, xs_337%U, x_338%U, __339%L, __340%L) {
  x_341 :=
    lazy {
      x_343 := recv[L](__340);
      _342 := x_343;
      match[L](_342){
        ex1LL_45(m_345, n_346) => {
          match(m_345){
            DelL_50 => {
              x_349 := send(n_346, x_338);
              c_348 := x_349;
              x_351 := send(c_348, __339);
              c_350 := x_351;
              x_352 := close[true](c_350);
              x_347 := x_352;
            }
            _ => {
              match[L](m_345){
                InsL_49(x_354) => {
                  x_357 := mkconstr(InsL_49, [x_354]);
                  x_356 := send(__339, x_357);
                  c_next_355 := x_356;
                  x_359 := node_workerL_335(NULL, NULL, x_338, c_next_355, n_346);
                  x_358 := force(x_359);
                  x_353 := x_358;
                }
              }
              x_347 := x_353;
            }
          }
          x_344 := x_347;
        }
      }
      return x_344;
    };
  return x_341;
}

fn empty_workerU_360(A_361%U, c_362%U) {
  x_363 :=
    lazy {
      x_365 := recv[L](c_362);
      _364 := x_365;
      match[L](_364){
        ex1LL_45(m_367, n_368) => {
          match(m_367){
            DelU_52 => {
              x_370 := close[true](n_368);
              x_369 := x_370;
            }
            _ => {
              match[L](m_367){
                InsU_51(x_372) => {
                  x_375 :=
                    fn lam_376(_377%L) {
                      x_378 := empty_workerU_360(NULL, _377);
                      return x_378;
                    };
                  x_374 := fork(x_375);
                  c0_373 := x_374;
                  x_380 := node_workerU_310(NULL, NULL, x_372, c0_373, n_368);
                  x_379 := force(x_380);
                  x_371 := x_379;
                }
              }
              x_369 := x_371;
            }
          }
          x_366 := x_369;
        }
      }
      return x_366;
    };
  return x_363;
}

fn empty_workerL_381(A_382%U, c_383%U) {
  x_384 :=
    lazy {
      x_386 := recv[L](c_383);
      _385 := x_386;
      match[L](_385){
        ex1LL_45(m_388, n_389) => {
          match(m_388){
            DelL_50 => {
              x_391 := close[true](n_389);
              x_390 := x_391;
            }
            _ => {
              match[L](m_388){
                InsL_49(x_393) => {
                  x_396 :=
                    fn lam_397(_398%L) {
                      x_399 := empty_workerL_381(NULL, _398);
                      return x_399;
                    };
                  x_395 := fork(x_396);
                  c0_394 := x_395;
                  x_401 := node_workerL_335(NULL, NULL, x_393, c0_394, n_389);
                  x_400 := force(x_401);
                  x_392 := x_400;
                }
              }
              x_390 := x_392;
            }
          }
          x_387 := x_390;
        }
      }
      return x_387;
    };
  return x_384;
}

fn emptyU_402(A_403%U) {
  x_404 :=
    lazy {
      x_406 :=
        fn lam_407(_408%L) {
          x_409 := empty_workerU_360(NULL, _408);
          return x_409;
        };
      x_405 := fork(x_406);
      return x_405;
    };
  return x_404;
}

fn emptyL_410(A_411%U) {
  x_412 :=
    lazy {
      x_414 :=
        fn lam_415(_416%L) {
          x_417 := empty_workerL_381(NULL, _416);
          return x_417;
        };
      x_413 := fork(x_414);
      return x_413;
    };
  return x_412;
}

fn insU_418(A_419%U, xs_420%U, x_421%U, __422%L) {
  x_423 :=
    lazy {
      x_425 := force(__422);
      q_424 := x_425;
      x_428 := mkconstr(InsU_51, [x_421]);
      x_427 := send(q_424, x_428);
      q_426 := x_427;
      return q_426;
    };
  return x_423;
}

fn insL_429(A_430%U, xs_431%U, x_432%U, __433%L) {
  x_434 :=
    lazy {
      x_436 := force(__433);
      q_435 := x_436;
      x_439 := mkconstr(InsL_49, [x_432]);
      x_438 := send(q_435, x_439);
      q_437 := x_438;
      return q_437;
    };
  return x_434;
}

fn delU_440(A_441%U, x_442%U, xs_443%U, q_444%U) {
  x_445 :=
    lazy {
      x_447 := force(q_444);
      q_446 := x_447;
      x_449 := send(q_446, DelU_52);
      q_448 := x_449;
      x_451 := recv[U](q_448);
      _450 := x_451;
      match[L](_450){
        ex1UL_47(m_453, n_454) => {
          x_456 := recv[L](n_454);
          _455 := x_456;
          match[L](_455){
            ex1LL_45(m_458, n_459) => {
              x_461 := close[false](n_459);
              __460 := x_461;
              x_462 := lazy { 
                              return m_458; };
              x_463 := mkconstr(ex1UL_47, [m_453, x_462]);
              x_457 := x_463;
            }
          }
          x_452 := x_457;
        }
      }
      return x_452;
    };
  return x_445;
}

fn delL_464(A_465%U, x_466%U, xs_467%U, q_468%U) {
  x_469 :=
    lazy {
      x_471 := force(q_468);
      q_470 := x_471;
      x_473 := send(q_470, DelL_50);
      q_472 := x_473;
      x_475 := recv[L](q_472);
      _474 := x_475;
      match[L](_474){
        ex1LL_45(m_477, n_478) => {
          x_480 := recv[L](n_478);
          _479 := x_480;
          match[L](_479){
            ex1LL_45(m_482, n_483) => {
              x_485 := close[false](n_483);
              __484 := x_485;
              x_486 := lazy { 
                              return m_482; };
              x_487 := mkconstr(ex1LL_45, [m_477, x_486]);
              x_481 := x_487;
            }
          }
          x_476 := x_481;
        }
      }
      return x_476;
    };
  return x_469;
}

fn freeU_488(A_489%U, q_490%U) {
  x_491 :=
    lazy {
      x_493 := force(q_490);
      q_492 := x_493;
      x_495 := send(q_492, DelU_52);
      q_494 := x_495;
      x_496 := close[false](q_494);
      return x_496;
    };
  return x_491;
}

fn freeL_497(A_498%U, q_499%U) {
  x_500 :=
    lazy {
      x_502 := force(q_499);
      q_501 := x_502;
      x_504 := send(q_501, DelL_50);
      q_503 := x_504;
      x_505 := close[false](q_503);
      return x_505;
    };
  return x_500;
}

myqueue_506 := {
  x_507 := emptyU_402(NULL);
  return x_507;
};

myqueue_508 := {
  x_509 := insU_418(NULL, NULL, 0, myqueue_506);
  return x_509;
};

myqueue_510 := {
  x_511 := insU_418(NULL, NULL, 1, myqueue_508);
  return x_511;
};

myqueue_512 := {
  x_513 := insU_418(NULL, NULL, 2, myqueue_510);
  return x_513;
};

myqueue_514 := {
  x_515 := insU_418(NULL, NULL, 3, myqueue_512);
  return x_515;
};

main := {
  x_516 :=
    lazy {
      x_519 := delU_440(NULL, NULL, NULL, myqueue_514);
      x_518 := force(x_519);
      _517 := x_518;
      match[L](_517){
        ex1UL_47(m_521, n_522) => {
          x_525 := delU_440(NULL, NULL, NULL, n_522);
          x_524 := force(x_525);
          _523 := x_524;
          match[L](_523){
            ex1UL_47(m_527, n_528) => {
              x_531 := delU_440(NULL, NULL, NULL, n_528);
              x_530 := force(x_531);
              _529 := x_530;
              match[L](_529){
                ex1UL_47(m_533, n_534) => {
                  x_537 := delU_440(NULL, NULL, NULL, n_534);
                  x_536 := force(x_537);
                  _535 := x_536;
                  match[L](_535){
                    ex1UL_47(m_539, n_540) => {
                      x_543 := freeU_488(NULL, n_540);
                      x_542 := force(x_543);
                      _541 := x_542;
                      match(_541){
                        ttU_24 => {
                          x_557 := str("a := ");
                          x_558 := string_of_int_282(m_521);
                          x_556 := cat(x_557, x_558);
                          x_559 := str("\n");
                          x_555 := cat(x_556, x_559);
                          x_560 := str("b := ");
                          x_554 := cat(x_555, x_560);
                          x_561 := string_of_int_282(m_527);
                          x_553 := cat(x_554, x_561);
                          x_562 := str("\n");
                          x_552 := cat(x_553, x_562);
                          x_563 := str("c := ");
                          x_551 := cat(x_552, x_563);
                          x_564 := string_of_int_282(m_533);
                          x_550 := cat(x_551, x_564);
                          x_565 := str("\n");
                          x_549 := cat(x_550, x_565);
                          x_566 := str("d := ");
                          x_548 := cat(x_549, x_566);
                          x_567 := string_of_int_282(m_539);
                          x_547 := cat(x_548, x_567);
                          x_568 := str("\n");
                          x_546 := cat(x_547, x_568);
                          x_545 := print(x_546);
                          x_544 := x_545;
                        }
                      }
                      x_538 := x_544;
                    }
                  }
                  x_532 := x_538;
                }
              }
              x_526 := x_532;
            }
          }
          x_520 := x_526;
        }
      }
      return x_520;
    };
  return x_516;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn string_of_bool_98(__99%U) {
  match(__99){
    true_4 => {
      x_101 := str("true");
      x_100 := x_101;
    }
    false_5 => {
      x_102 := str("false");
      x_100 := x_102;
    }
  }
  return x_100;
}

fn lte_103(__104%U, __105%U) {
  match(__104){
    zero_6 => {
      x_106 := true_4;
    }
    _ => {
      match[U](__104){
        succ_7(n_108) => {
          match(__105){
            zero_6 => {
              x_109 := false_5;
            }
            _ => {
              match[U](__105){
                succ_7(n_111) => {
                  x_112 := lte_103(n_108, n_111);
                  x_110 := x_112;
                }
              }
              x_109 := x_110;
            }
          }
          x_107 := x_109;
        }
      }
      x_106 := x_107;
    }
  }
  return x_106;
}

fn lt_113(x_114%U, y_115%U) {
  x_117 := mkconstr(succ_7, [x_114]);
  x_116 := lte_103(x_117, y_115);
  return x_116;
}

fn pred_118(__119%U) {
  match(__119){
    zero_6 => {
      x_120 := zero_6;
    }
    _ => {
      match[U](__119){ succ_7(n_122) => {
                         x_121 := n_122;
                       } }
      x_120 := x_121;
    }
  }
  return x_120;
}

fn add_123(__124%U, __125%U) {
  match(__124){
    zero_6 => {
      x_126 := __125;
    }
    _ => {
      match[U](__124){
        succ_7(n_128) => {
          x_129 := add_123(n_128, __125);
          x_130 := mkconstr(succ_7, [x_129]);
          x_127 := x_130;
        }
      }
      x_126 := x_127;
    }
  }
  return x_126;
}

fn sub_131(__132%U, __133%U) {
  match(__133){
    zero_6 => {
      x_134 := __132;
    }
    _ => {
      match[U](__133){
        succ_7(n_136) => {
          x_138 := pred_118(__132);
          x_137 := sub_131(x_138, n_136);
          x_135 := x_137;
        }
      }
      x_134 := x_135;
    }
  }
  return x_134;
}

fn mul_139(__140%U, __141%U) {
  match(__140){
    zero_6 => {
      x_142 := zero_6;
    }
    _ => {
      match[U](__140){
        succ_7(n_144) => {
          x_146 := mul_139(n_144, __141);
          x_145 := add_123(__141, x_146);
          x_143 := x_145;
        }
      }
      x_142 := x_143;
    }
  }
  return x_142;
}

fn div_147(x_148%U, y_149%U) {
  x_151 := lt_113(x_148, y_149);
  match(x_151){
    true_4 => {
      x_150 := zero_6;
    }
    false_5 => {
      x_153 :=
        fn loop_154(x_155%U, y_156%U) {
          x_159 := pred_118(y_156);
          x_158 := sub_131(x_155, x_159);
          match(x_158){
            zero_6 => {
              x_157 := zero_6;
            }
            _ => {
              x_162 := pred_118(y_156);
              x_161 := sub_131(x_155, x_162);
              match[U](x_161){
                succ_7(n_163) => {
                  x_164 := loop_154(n_163, y_156);
                  x_165 := mkconstr(succ_7, [x_164]);
                  x_160 := x_165;
                }
              }
              x_157 := x_160;
            }
          }
          return x_157;
        };
      loop_152 := x_153;
      x_166 := loop_152(x_148, y_149);
      x_150 := x_166;
    }
  }
  return x_150;
}

fn rem_167(x_168%U, y_169%U) {
  x_172 := div_147(x_168, y_169);
  x_171 := mul_139(x_172, y_169);
  x_170 := sub_131(x_168, x_171);
  return x_170;
}

fn rconsUU_173(A_174%U, __175%L, __176%L) {
  match(__175){
    nilUU_35 => {
      x_178 := mkconstr(consUU_36, [__176, nilUU_35]);
      x_177 := x_178;
    }
    _ => {
      match[U](__175){
        consUU_36(hd_180, tl_181) => {
          x_182 := rconsUU_173(NULL, tl_181, __176);
          x_183 := mkconstr(consUU_36, [hd_180, x_182]);
          x_179 := x_183;
        }
      }
      x_177 := x_179;
    }
  }
  return x_177;
}

fn rconsUL_184(A_185%U, __186%L, __187%L) {
  match(__186){
    nilUL_33 => {
      x_189 := mkconstr(consUL_34, [__187, nilUL_33]);
      x_188 := x_189;
    }
    _ => {
      match[L](__186){
        consUL_34(hd_191, tl_192) => {
          x_193 := rconsUL_184(NULL, tl_192, __187);
          x_194 := reconstr(__186, consUL_34, [hd_191, x_193]);
          x_190 := x_194;
        }
      }
      x_188 := x_190;
    }
  }
  return x_188;
}

fn rconsLL_195(A_196%U, __197%L, __198%L) {
  match(__197){
    nilLL_29 => {
      x_200 := mkconstr(consLL_30, [__198, nilLL_29]);
      x_199 := x_200;
    }
    _ => {
      match[L](__197){
        consLL_30(hd_202, tl_203) => {
          x_204 := rconsLL_195(NULL, tl_203, __198);
          x_205 := reconstr(__197, consLL_30, [hd_202, x_204]);
          x_201 := x_205;
        }
      }
      x_199 := x_201;
    }
  }
  return x_199;
}

fn free_listUU_206(A_207%U, f_208%U, __209%U) {
  match(__209){
    nilUU_35 => {
      x_210 := ttU_24;
    }
    _ => {
      match[U](__209){
        consUU_36(hd_212, tl_213) => {
          x_215 := f_208(hd_212);
          __214 := x_215;
          x_216 := free_listUU_206(NULL, f_208, tl_213);
          x_211 := x_216;
        }
      }
      x_210 := x_211;
    }
  }
  return x_210;
}

fn free_listUL_217(A_218%U, f_219%U, __220%U) {
  match(__220){
    nilUL_33 => {
      x_221 := ttU_24;
    }
    _ => {
      match[L](__220){
        consUL_34(hd_223, tl_224) => {
          x_226 := f_219(hd_223);
          __225 := x_226;
          x_227 := free_listUL_217(NULL, f_219, tl_224);
          x_222 := x_227;
          free(__220);
        }
      }
      x_221 := x_222;
    }
  }
  return x_221;
}

fn free_listLL_228(A_229%U, f_230%U, __231%U) {
  match(__231){
    nilLL_29 => {
      x_232 := ttU_24;
    }
    _ => {
      match[L](__231){
        consLL_30(hd_234, tl_235) => {
          x_237 := f_230(hd_234);
          __236 := x_237;
          x_238 := free_listLL_228(NULL, f_230, tl_235);
          x_233 := x_238;
          free(__231);
        }
      }
      x_232 := x_233;
    }
  }
  return x_232;
}

fn pow_239(x_240%U, y_241%U) {
  x_243 :=
    fn loop_244(acc_245%U, y_246%U) {
      x_248 := lte(y_246, 0);
      match(x_248){
        true_4 => {
          x_247 := acc_245;
        }
        false_5 => {
          x_250 := mul(x_240, acc_245);
          x_251 := sub(y_246, 1);
          x_249 := loop_244(x_250, x_251);
          x_247 := x_249;
        }
      }
      return x_247;
    };
  loop_242 := x_243;
  x_252 := loop_242(1, y_241);
  return x_252;
}

fn powm_253(x_254%U, y_255%U, m_256%U) {
  x_258 :=
    fn loop_259(acc_260%U, y_261%U) {
      x_263 := lte(y_261, 0);
      match(x_263){
        true_4 => {
          x_262 := acc_260;
        }
        false_5 => {
          x_266 := mul(x_254, acc_260);
          x_265 := mod(x_266, m_256);
          x_267 := sub(y_261, 1);
          x_264 := loop_259(x_265, x_267);
          x_262 := x_264;
        }
      }
      return x_262;
    };
  loop_257 := x_258;
  x_268 := loop_257(1, y_255);
  return x_268;
}

fn ord_269(c_270%U) {
  x_271 := ord(c_270);
  return x_271;
}

fn chr_272(i_273%U) {
  x_274 := chr(i_273);
  return x_274;
}

fn str_275(c_276%U) {
  x_278 := str("");
  x_277 := push(x_278, c_276);
  return x_277;
}

fn strlen_279(s_280%U) {
  x_281 := size(s_280);
  return x_281;
}

fn string_of_int_282(i_283%U) {
  x_285 :=
    fn aux_286(i_287%U) {
      x_289 := lte(10, i_287);
      match(x_289){
        true_4 => {
          x_291 := mod(i_287, 10);
          r_290 := x_291;
          x_293 := div(i_287, 10);
          i_292 := x_293;
          x_295 := aux_286(i_292);
          x_298 := ord_269(0);
          x_297 := add(r_290, x_298);
          x_296 := chr_272(x_297);
          x_294 := push(x_295, x_296);
          x_288 := x_294;
        }
        false_5 => {
          x_302 := ord_269(0);
          x_301 := add(i_287, x_302);
          x_300 := chr_272(x_301);
          x_299 := str_275(x_300);
          x_288 := x_299;
        }
      }
      return x_288;
    };
  aux_284 := x_285;
  x_304 := lte(0, i_283);
  match(x_304){
    true_4 => {
      x_305 := aux_284(i_283);
      x_303 := x_305;
    }
    false_5 => {
      x_307 := str("~");
      x_309 := neg(i_283);
      x_308 := aux_284(x_309);
      x_306 := cat(x_307, x_308);
      x_303 := x_306;
    }
  }
  return x_303;
}

fn node_workerU_310(A_311%U, xs_312%U, x_313%U, __314%L, __315%L) {
  x_316 :=
    lazy {
      x_318 := recv[L](__315);
      _317 := x_318;
      match[L](_317){
        ex1LL_45(m_320, n_321) => {
          match(m_320){
            DelU_52 => {
              x_324 := send(n_321, x_313);
              c_323 := x_324;
              x_326 := send(c_323, __314);
              c_325 := x_326;
              x_327 := close[true](c_325);
              x_322 := x_327;
            }
            _ => {
              match[L](m_320){
                InsU_51(x_329) => {
                  x_332 := reconstr(m_320, InsU_51, [x_329]);
                  x_331 := send(__314, x_332);
                  c_next_330 := x_331;
                  x_334 := node_workerU_310(NULL, NULL, x_313, c_next_330, n_321);
                  x_333 := force(x_334);
                  x_328 := x_333;
                }
              }
              x_322 := x_328;
            }
          }
          x_319 := x_322;
          free(_317);
        }
      }
      return x_319;
    };
  return x_316;
}

fn node_workerL_335(A_336%U, xs_337%U, x_338%U, __339%L, __340%L) {
  x_341 :=
    lazy {
      x_343 := recv[L](__340);
      _342 := x_343;
      match[L](_342){
        ex1LL_45(m_345, n_346) => {
          match(m_345){
            DelL_50 => {
              x_349 := send(n_346, x_338);
              c_348 := x_349;
              x_351 := send(c_348, __339);
              c_350 := x_351;
              x_352 := close[true](c_350);
              x_347 := x_352;
            }
            _ => {
              match[L](m_345){
                InsL_49(x_354) => {
                  x_357 := reconstr(m_345, InsL_49, [x_354]);
                  x_356 := send(__339, x_357);
                  c_next_355 := x_356;
                  x_359 := node_workerL_335(NULL, NULL, x_338, c_next_355, n_346);
                  x_358 := force(x_359);
                  x_353 := x_358;
                }
              }
              x_347 := x_353;
            }
          }
          x_344 := x_347;
          free(_342);
        }
      }
      return x_344;
    };
  return x_341;
}

fn empty_workerU_360(A_361%U, c_362%U) {
  x_363 :=
    lazy {
      x_365 := recv[L](c_362);
      _364 := x_365;
      match[L](_364){
        ex1LL_45(m_367, n_368) => {
          match(m_367){
            DelU_52 => {
              x_370 := close[true](n_368);
              x_369 := x_370;
            }
            _ => {
              match[L](m_367){
                InsU_51(x_372) => {
                  x_375 :=
                    fn lam_376(_377%L) {
                      x_378 := empty_workerU_360(NULL, _377);
                      return x_378;
                    };
                  x_374 := fork(x_375);
                  c0_373 := x_374;
                  x_380 := node_workerU_310(NULL, NULL, x_372, c0_373, n_368);
                  x_379 := force(x_380);
                  x_371 := x_379;
                  free(m_367);
                }
              }
              x_369 := x_371;
            }
          }
          x_366 := x_369;
          free(_364);
        }
      }
      return x_366;
    };
  return x_363;
}

fn empty_workerL_381(A_382%U, c_383%U) {
  x_384 :=
    lazy {
      x_386 := recv[L](c_383);
      _385 := x_386;
      match[L](_385){
        ex1LL_45(m_388, n_389) => {
          match(m_388){
            DelL_50 => {
              x_391 := close[true](n_389);
              x_390 := x_391;
            }
            _ => {
              match[L](m_388){
                InsL_49(x_393) => {
                  x_396 :=
                    fn lam_397(_398%L) {
                      x_399 := empty_workerL_381(NULL, _398);
                      return x_399;
                    };
                  x_395 := fork(x_396);
                  c0_394 := x_395;
                  x_401 := node_workerL_335(NULL, NULL, x_393, c0_394, n_389);
                  x_400 := force(x_401);
                  x_392 := x_400;
                  free(m_388);
                }
              }
              x_390 := x_392;
            }
          }
          x_387 := x_390;
          free(_385);
        }
      }
      return x_387;
    };
  return x_384;
}

fn emptyU_402(A_403%U) {
  x_404 :=
    lazy {
      x_406 :=
        fn lam_407(_408%L) {
          x_409 := empty_workerU_360(NULL, _408);
          return x_409;
        };
      x_405 := fork(x_406);
      return x_405;
    };
  return x_404;
}

fn emptyL_410(A_411%U) {
  x_412 :=
    lazy {
      x_414 :=
        fn lam_415(_416%L) {
          x_417 := empty_workerL_381(NULL, _416);
          return x_417;
        };
      x_413 := fork(x_414);
      return x_413;
    };
  return x_412;
}

fn insU_418(A_419%U, xs_420%U, x_421%U, __422%L) {
  x_423 :=
    lazy {
      x_425 := force(__422);
      q_424 := x_425;
      x_428 := mkconstr(InsU_51, [x_421]);
      x_427 := send(q_424, x_428);
      q_426 := x_427;
      return q_426;
    };
  return x_423;
}

fn insL_429(A_430%U, xs_431%U, x_432%U, __433%L) {
  x_434 :=
    lazy {
      x_436 := force(__433);
      q_435 := x_436;
      x_439 := mkconstr(InsL_49, [x_432]);
      x_438 := send(q_435, x_439);
      q_437 := x_438;
      return q_437;
    };
  return x_434;
}

fn delU_440(A_441%U, x_442%U, xs_443%U, q_444%U) {
  x_445 :=
    lazy {
      x_447 := force(q_444);
      q_446 := x_447;
      x_449 := send(q_446, DelU_52);
      q_448 := x_449;
      x_451 := recv[U](q_448);
      _450 := x_451;
      match[L](_450){
        ex1UL_47(m_453, n_454) => {
          x_456 := recv[L](n_454);
          _455 := x_456;
          match[L](_455){
            ex1LL_45(m_458, n_459) => {
              x_461 := close[false](n_459);
              __460 := x_461;
              x_462 := lazy { 
                              return m_458; };
              x_463 := reconstr(_455, ex1UL_47, [m_453, x_462]);
              x_457 := x_463;
            }
          }
          x_452 := x_457;
          free(_450);
        }
      }
      return x_452;
    };
  return x_445;
}

fn delL_464(A_465%U, x_466%U, xs_467%U, q_468%U) {
  x_469 :=
    lazy {
      x_471 := force(q_468);
      q_470 := x_471;
      x_473 := send(q_470, DelL_50);
      q_472 := x_473;
      x_475 := recv[L](q_472);
      _474 := x_475;
      match[L](_474){
        ex1LL_45(m_477, n_478) => {
          x_480 := recv[L](n_478);
          _479 := x_480;
          match[L](_479){
            ex1LL_45(m_482, n_483) => {
              x_485 := close[false](n_483);
              __484 := x_485;
              x_486 := lazy { 
                              return m_482; };
              x_487 := reconstr(_479, ex1LL_45, [m_477, x_486]);
              x_481 := x_487;
            }
          }
          x_476 := x_481;
          free(_474);
        }
      }
      return x_476;
    };
  return x_469;
}

fn freeU_488(A_489%U, q_490%U) {
  x_491 :=
    lazy {
      x_493 := force(q_490);
      q_492 := x_493;
      x_495 := send(q_492, DelU_52);
      q_494 := x_495;
      x_496 := close[false](q_494);
      return x_496;
    };
  return x_491;
}

fn freeL_497(A_498%U, q_499%U) {
  x_500 :=
    lazy {
      x_502 := force(q_499);
      q_501 := x_502;
      x_504 := send(q_501, DelL_50);
      q_503 := x_504;
      x_505 := close[false](q_503);
      return x_505;
    };
  return x_500;
}

myqueue_506 := {
  x_507 := emptyU_402(NULL);
  return x_507;
};

myqueue_508 := {
  x_509 := insU_418(NULL, NULL, 0, myqueue_506);
  return x_509;
};

myqueue_510 := {
  x_511 := insU_418(NULL, NULL, 1, myqueue_508);
  return x_511;
};

myqueue_512 := {
  x_513 := insU_418(NULL, NULL, 2, myqueue_510);
  return x_513;
};

myqueue_514 := {
  x_515 := insU_418(NULL, NULL, 3, myqueue_512);
  return x_515;
};

main := {
  x_516 :=
    lazy {
      x_519 := delU_440(NULL, NULL, NULL, myqueue_514);
      x_518 := force(x_519);
      _517 := x_518;
      match[L](_517){
        ex1UL_47(m_521, n_522) => {
          x_525 := delU_440(NULL, NULL, NULL, n_522);
          x_524 := force(x_525);
          _523 := x_524;
          match[L](_523){
            ex1UL_47(m_527, n_528) => {
              x_531 := delU_440(NULL, NULL, NULL, n_528);
              x_530 := force(x_531);
              _529 := x_530;
              match[L](_529){
                ex1UL_47(m_533, n_534) => {
                  x_537 := delU_440(NULL, NULL, NULL, n_534);
                  x_536 := force(x_537);
                  _535 := x_536;
                  match[L](_535){
                    ex1UL_47(m_539, n_540) => {
                      x_543 := freeU_488(NULL, n_540);
                      x_542 := force(x_543);
                      _541 := x_542;
                      match(_541){
                        ttU_24 => {
                          x_557 := str("a := ");
                          x_558 := string_of_int_282(m_521);
                          x_556 := cat(x_557, x_558);
                          x_559 := str("\n");
                          x_555 := cat(x_556, x_559);
                          x_560 := str("b := ");
                          x_554 := cat(x_555, x_560);
                          x_561 := string_of_int_282(m_527);
                          x_553 := cat(x_554, x_561);
                          x_562 := str("\n");
                          x_552 := cat(x_553, x_562);
                          x_563 := str("c := ");
                          x_551 := cat(x_552, x_563);
                          x_564 := string_of_int_282(m_533);
                          x_550 := cat(x_551, x_564);
                          x_565 := str("\n");
                          x_549 := cat(x_550, x_565);
                          x_566 := str("d := ");
                          x_548 := cat(x_549, x_566);
                          x_567 := string_of_int_282(m_539);
                          x_547 := cat(x_548, x_567);
                          x_568 := str("\n");
                          x_546 := cat(x_547, x_568);
                          x_545 := print(x_546);
                          x_544 := x_545;
                        }
                      }
                      x_538 := x_544;
                      free(_535);
                    }
                  }
                  x_532 := x_538;
                  free(_529);
                }
              }
              x_526 := x_532;
              free(_523);
            }
          }
          x_520 := x_526;
          free(_517);
        }
      }
      return x_520;
    };
  return x_516;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_569(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_570(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_571 := fn0_idU_569(A_2, m_3);
  return x_571;
}

fn fn0_idL_572(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_573(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_574 := fn0_idL_572(A_5, m_6);
  return x_574;
}

fn fn0_rwlUU_575(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_576(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_577 := fn0_rwlUU_575(A_8, m_9, n_10, B_11, __12, __13);
  return x_577;
}

fn fn0_rwlUL_578(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_579(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_580 := fn0_rwlUL_578(A_15, m_16, n_17, B_18, __19, __20);
  return x_580;
}

fn fn0_rwlLU_581(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_582(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_583 := fn0_rwlLU_581(A_22, m_23, n_24, B_25, __26, __27);
  return x_583;
}

fn fn0_rwlLL_584(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_585(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_586 := fn0_rwlLL_584(A_29, m_30, n_31, B_32, __33, __34);
  return x_586;
}

fn fn0_rwrUU_587(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_588(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_589 := fn0_rwrUU_587(A_36, m_37, n_38, B_39, __40, __41);
  return x_589;
}

fn fn0_rwrUL_590(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_591(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_592 := fn0_rwrUL_590(A_43, m_44, n_45, B_46, __47, __48);
  return x_592;
}

fn fn0_rwrLU_593(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_594(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_595 := fn0_rwrLU_593(A_50, m_51, n_52, B_53, __54, __55);
  return x_595;
}

fn fn0_rwrLL_596(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_597(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_598 := fn0_rwrLL_596(A_57, m_58, n_59, B_60, __61, __62);
  return x_598;
}

fn fn0_sing_elimUU_599(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_600(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_601 := fn0_sing_elimUU_599(A_64, x_65, __66);
  return x_601;
}

fn fn0_sing_elimUL_602(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_603(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_604 := fn0_sing_elimUL_602(A_68, x_69, __70);
  return x_604;
}

fn fn0_sing_elimLU_605(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_606(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_607 := fn0_sing_elimLU_605(A_72, x_73, __74);
  return x_607;
}

fn fn0_sing_elimLL_608(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_609(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_610 := fn0_sing_elimLL_608(A_76, x_77, __78);
  return x_610;
}

fn fn0_not_611(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_612(env) {
  __80 := env[1];
  x_613 := fn0_not_611(__80);
  return x_613;
}

fn fn0_and_614(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_615(env) {
  __83 := env[1];
  __84 := env[2];
  x_616 := fn0_and_614(__83, __84);
  return x_616;
}

fn fn0_or_617(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_618(env) {
  __88 := env[1];
  __89 := env[2];
  x_619 := fn0_or_617(__88, __89);
  return x_619;
}

fn fn0_xor_620(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_621(env) {
  __93 := env[1];
  __94 := env[2];
  x_622 := fn0_xor_620(__93, __94);
  return x_622;
}

fn fn0_string_of_bool_623(__99) {
  switch(__99){
    true_4 => {
      str(x_101, "true")
      move1(x_100, x_101);
      break;
    }
    false_5 => {
      str(x_102, "false")
      move1(x_100, x_102);
      break;
    }
  }
  return x_100;
}

fn fn1_string_of_bool_624(env) {
  __99 := env[1];
  x_625 := fn0_string_of_bool_623(__99);
  return x_625;
}

fn fn0_lte_626(__104, __105) {
  switch(__104){
    zero_6 => {
      move1(x_106, true_4);
      break;
    }
    _ => {
      getbox(n_108, __104, 0);
      switch(__105){
        zero_6 => {
          move1(x_109, false_5);
          break;
        }
        _ => {
          getbox(n_111, __105, 0);
          x_112 := fn0_lte_626(n_108, n_111);
          move1(x_110, x_112);
          move1(x_109, x_110);
          break;
        }
      }
      move1(x_107, x_109);
      move1(x_106, x_107);
      break;
    }
  }
  return x_106;
}

fn fn1_lte_627(env) {
  __104 := env[1];
  __105 := env[2];
  x_628 := fn0_lte_626(__104, __105);
  return x_628;
}

fn fn0_lt_629(x_114, y_115) {
  mkbox(x_117, succ_7, 1);
  setbox(x_117, x_114, 0);
  x_116 := fn0_lte_626(x_117, y_115);
  return x_116;
}

fn fn1_lt_630(env) {
  x_114 := env[1];
  y_115 := env[2];
  x_631 := fn0_lt_629(x_114, y_115);
  return x_631;
}

fn fn0_pred_632(__119) {
  switch(__119){
    zero_6 => {
      move1(x_120, zero_6);
      break;
    }
    _ => {
      getbox(n_122, __119, 0);
      move1(x_121, n_122);
      move1(x_120, x_121);
      break;
    }
  }
  return x_120;
}

fn fn1_pred_633(env) {
  __119 := env[1];
  x_634 := fn0_pred_632(__119);
  return x_634;
}

fn fn0_add_635(__124, __125) {
  switch(__124){
    zero_6 => {
      move1(x_126, __125);
      break;
    }
    _ => {
      getbox(n_128, __124, 0);
      x_129 := fn0_add_635(n_128, __125);
      mkbox(x_130, succ_7, 1);
      setbox(x_130, x_129, 0);
      move1(x_127, x_130);
      move1(x_126, x_127);
      break;
    }
  }
  return x_126;
}

fn fn1_add_636(env) {
  __124 := env[1];
  __125 := env[2];
  x_637 := fn0_add_635(__124, __125);
  return x_637;
}

fn fn0_sub_638(__132, __133) {
  switch(__133){
    zero_6 => {
      move1(x_134, __132);
      break;
    }
    _ => {
      getbox(n_136, __133, 0);
      x_138 := fn0_pred_632(__132);
      x_137 := fn0_sub_638(x_138, n_136);
      move1(x_135, x_137);
      move1(x_134, x_135);
      break;
    }
  }
  return x_134;
}

fn fn1_sub_639(env) {
  __132 := env[1];
  __133 := env[2];
  x_640 := fn0_sub_638(__132, __133);
  return x_640;
}

fn fn0_mul_641(__140, __141) {
  switch(__140){
    zero_6 => {
      move1(x_142, zero_6);
      break;
    }
    _ => {
      getbox(n_144, __140, 0);
      x_146 := fn0_mul_641(n_144, __141);
      x_145 := fn0_add_635(__141, x_146);
      move1(x_143, x_145);
      move1(x_142, x_143);
      break;
    }
  }
  return x_142;
}

fn fn1_mul_642(env) {
  __140 := env[1];
  __141 := env[2];
  x_643 := fn0_mul_641(__140, __141);
  return x_643;
}

fn fn0_div_644(x_148, y_149) {
  x_151 := fn0_lt_629(x_148, y_149);
  switch(x_151){
    true_4 => {
      move1(x_150, zero_6);
      break;
    }
    false_5 => {
      mkclo1(x_153, fn1_loop_646, fvc:=2, argc:=2);
      setclo(x_153, pred_118, 1);
      setclo(x_153, sub_131, 2);
      move1(loop_152, x_153);
      appc(x_650, loop_152, x_148);
      appc(x_651, x_650, y_149);
      move1(x_166, x_651);
      move1(x_150, x_166);
      break;
    }
  }
  return x_150;
}

fn fn1_div_645(env) {
  x_148 := env[1];
  y_149 := env[2];
  x_653 := fn0_div_644(x_148, y_149);
  return x_653;
}

fn fn0_rem_654(x_168, y_169) {
  x_172 := fn0_div_644(x_168, y_169);
  x_171 := fn0_mul_641(x_172, y_169);
  x_170 := fn0_sub_638(x_168, x_171);
  return x_170;
}

fn fn1_rem_655(env) {
  x_168 := env[1];
  y_169 := env[2];
  x_656 := fn0_rem_654(x_168, y_169);
  return x_656;
}

fn fn0_rconsUU_657(A_174, __175, __176) {
  switch(__175){
    nilUU_35 => {
      mkbox(x_178, consUU_36, 2);
      setbox(x_178, __176, 0);
      setbox(x_178, nilUU_35, 1);
      move1(x_177, x_178);
      break;
    }
    _ => {
      getbox(hd_180, __175, 0);
      getbox(tl_181, __175, 1);
      x_182 := fn0_rconsUU_657(NULL, tl_181, __176);
      mkbox(x_183, consUU_36, 2);
      setbox(x_183, hd_180, 0);
      setbox(x_183, x_182, 1);
      move1(x_179, x_183);
      move1(x_177, x_179);
      break;
    }
  }
  return x_177;
}

fn fn1_rconsUU_658(env) {
  A_174 := env[1];
  __175 := env[2];
  __176 := env[3];
  x_659 := fn0_rconsUU_657(A_174, __175, __176);
  return x_659;
}

fn fn0_rconsUL_660(A_185, __186, __187) {
  switch(__186){
    nilUL_33 => {
      mkbox(x_189, consUL_34, 2);
      setbox(x_189, __187, 0);
      setbox(x_189, nilUL_33, 1);
      move1(x_188, x_189);
      break;
    }
    _ => {
      getbox(hd_191, __186, 0);
      getbox(tl_192, __186, 1);
      x_193 := fn0_rconsUL_660(NULL, tl_192, __187);
      rebox(x_194, __186, consUL_34);
      setbox(x_194, hd_191, 0);
      setbox(x_194, x_193, 1);
      move1(x_190, x_194);
      move1(x_188, x_190);
      break;
    }
  }
  return x_188;
}

fn fn1_rconsUL_661(env) {
  A_185 := env[1];
  __186 := env[2];
  __187 := env[3];
  x_662 := fn0_rconsUL_660(A_185, __186, __187);
  return x_662;
}

fn fn0_rconsLL_663(A_196, __197, __198) {
  switch(__197){
    nilLL_29 => {
      mkbox(x_200, consLL_30, 2);
      setbox(x_200, __198, 0);
      setbox(x_200, nilLL_29, 1);
      move1(x_199, x_200);
      break;
    }
    _ => {
      getbox(hd_202, __197, 0);
      getbox(tl_203, __197, 1);
      x_204 := fn0_rconsLL_663(NULL, tl_203, __198);
      rebox(x_205, __197, consLL_30);
      setbox(x_205, hd_202, 0);
      setbox(x_205, x_204, 1);
      move1(x_201, x_205);
      move1(x_199, x_201);
      break;
    }
  }
  return x_199;
}

fn fn1_rconsLL_664(env) {
  A_196 := env[1];
  __197 := env[2];
  __198 := env[3];
  x_665 := fn0_rconsLL_663(A_196, __197, __198);
  return x_665;
}

fn fn0_free_listUU_666(A_207, f_208, __209) {
  switch(__209){
    nilUU_35 => {
      move1(x_210, ttU_24);
      break;
    }
    _ => {
      getbox(hd_212, __209, 0);
      getbox(tl_213, __209, 1);
      appc(x_668, f_208, hd_212);
      move1(x_215, x_668);
      move1(__214, x_215);
      x_216 := fn0_free_listUU_666(NULL, f_208, tl_213);
      move1(x_211, x_216);
      move1(x_210, x_211);
      break;
    }
  }
  return x_210;
}

fn fn1_free_listUU_667(env) {
  A_207 := env[1];
  f_208 := env[2];
  __209 := env[3];
  x_670 := fn0_free_listUU_666(A_207, f_208, __209);
  return x_670;
}

fn fn0_free_listUL_671(A_218, f_219, __220) {
  switch(__220){
    nilUL_33 => {
      move1(x_221, ttU_24);
      break;
    }
    _ => {
      getbox(hd_223, __220, 0);
      getbox(tl_224, __220, 1);
      appc(x_673, f_219, hd_223);
      move1(x_226, x_673);
      move1(__225, x_226);
      x_227 := fn0_free_listUL_671(NULL, f_219, tl_224);
      move1(x_222, x_227);
      free(__220);
      move1(x_221, x_222);
      break;
    }
  }
  return x_221;
}

fn fn1_free_listUL_672(env) {
  A_218 := env[1];
  f_219 := env[2];
  __220 := env[3];
  x_675 := fn0_free_listUL_671(A_218, f_219, __220);
  return x_675;
}

fn fn0_free_listLL_676(A_229, f_230, __231) {
  switch(__231){
    nilLL_29 => {
      move1(x_232, ttU_24);
      break;
    }
    _ => {
      getbox(hd_234, __231, 0);
      getbox(tl_235, __231, 1);
      appc(x_678, f_230, hd_234);
      move1(x_237, x_678);
      move1(__236, x_237);
      x_238 := fn0_free_listLL_676(NULL, f_230, tl_235);
      move1(x_233, x_238);
      free(__231);
      move1(x_232, x_233);
      break;
    }
  }
  return x_232;
}

fn fn1_free_listLL_677(env) {
  A_229 := env[1];
  f_230 := env[2];
  __231 := env[3];
  x_680 := fn0_free_listLL_676(A_229, f_230, __231);
  return x_680;
}

fn fn0_pow_681(x_240, y_241) {
  mkclo1(x_243, fn1_loop_683, fvc:=1, argc:=2);
  setclo(x_243, x_240, 1);
  move1(loop_242, x_243);
  appc(x_687, loop_242, 1);
  appc(x_688, x_687, y_241);
  move1(x_252, x_688);
  return x_252;
}

fn fn1_pow_682(env) {
  x_240 := env[1];
  y_241 := env[2];
  x_690 := fn0_pow_681(x_240, y_241);
  return x_690;
}

fn fn0_powm_691(x_254, y_255, m_256) {
  mkclo1(x_258, fn1_loop_693, fvc:=2, argc:=2);
  setclo(x_258, x_254, 1);
  setclo(x_258, m_256, 2);
  move1(loop_257, x_258);
  appc(x_697, loop_257, 1);
  appc(x_698, x_697, y_255);
  move1(x_268, x_698);
  return x_268;
}

fn fn1_powm_692(env) {
  x_254 := env[1];
  y_255 := env[2];
  m_256 := env[3];
  x_700 := fn0_powm_691(x_254, y_255, m_256);
  return x_700;
}

fn fn0_ord_701(c_270) {
  ord(x_271, c_270);
  return x_271;
}

fn fn1_ord_702(env) {
  c_270 := env[1];
  x_703 := fn0_ord_701(c_270);
  return x_703;
}

fn fn0_chr_704(i_273) {
  chr(x_274, i_273);
  return x_274;
}

fn fn1_chr_705(env) {
  i_273 := env[1];
  x_706 := fn0_chr_704(i_273);
  return x_706;
}

fn fn0_str_707(c_276) {
  str(x_278, "")
  push(x_277, x_278, c_276);
  return x_277;
}

fn fn1_str_708(env) {
  c_276 := env[1];
  x_709 := fn0_str_707(c_276);
  return x_709;
}

fn fn0_strlen_710(s_280) {
  size(x_281, s_280);
  return x_281;
}

fn fn1_strlen_711(env) {
  s_280 := env[1];
  x_712 := fn0_strlen_710(s_280);
  return x_712;
}

fn fn0_string_of_int_713(i_283) {
  mkclo1(x_285, fn1_aux_715, fvc:=3, argc:=1);
  setclo(x_285, ord_269, 1);
  setclo(x_285, chr_272, 2);
  setclo(x_285, str_275, 3);
  move1(aux_284, x_285);
  lte(x_304, 0, i_283);
  switch(x_304){
    true_4 => {
      appc(x_718, aux_284, i_283);
      move1(x_305, x_718);
      move1(x_303, x_305);
      break;
    }
    false_5 => {
      str(x_307, "~")
      neg(x_309, i_283);
      appc(x_720, aux_284, x_309);
      move1(x_308, x_720);
      cat(x_306, x_307, x_308);
      move1(x_303, x_306);
      break;
    }
  }
  return x_303;
}

fn fn1_string_of_int_714(env) {
  i_283 := env[1];
  x_722 := fn0_string_of_int_713(i_283);
  return x_722;
}

fn fn0_node_workerU_723(A_311, xs_312, x_313, __314, __315) {
  lazy(x_316, lazy__725, 4);
  setlazy(x_316, node_workerU_310, 0);
  setlazy(x_316, x_313, 1);
  setlazy(x_316, __314, 2);
  setlazy(x_316, __315, 3);
  return x_316;
}

fn fn1_node_workerU_724(env) {
  A_311 := env[1];
  xs_312 := env[2];
  x_313 := env[3];
  __314 := env[4];
  __315 := env[5];
  x_726 := fn0_node_workerU_723(A_311, xs_312, x_313, __314, __315);
  return x_726;
}

fn fn0_node_workerL_727(A_336, xs_337, x_338, __339, __340) {
  lazy(x_341, lazy__729, 4);
  setlazy(x_341, node_workerL_335, 0);
  setlazy(x_341, x_338, 1);
  setlazy(x_341, __339, 2);
  setlazy(x_341, __340, 3);
  return x_341;
}

fn fn1_node_workerL_728(env) {
  A_336 := env[1];
  xs_337 := env[2];
  x_338 := env[3];
  __339 := env[4];
  __340 := env[5];
  x_730 := fn0_node_workerL_727(A_336, xs_337, x_338, __339, __340);
  return x_730;
}

fn fn0_empty_workerU_731(A_361, c_362) {
  lazy(x_363, lazy__733, 3);
  setlazy(x_363, node_workerU_310, 0);
  setlazy(x_363, empty_workerU_360, 1);
  setlazy(x_363, c_362, 2);
  return x_363;
}

fn fn1_empty_workerU_732(env) {
  A_361 := env[1];
  c_362 := env[2];
  x_735 := fn0_empty_workerU_731(A_361, c_362);
  return x_735;
}

fn fn0_empty_workerL_736(A_382, c_383) {
  lazy(x_384, lazy__738, 3);
  setlazy(x_384, node_workerL_335, 0);
  setlazy(x_384, empty_workerL_381, 1);
  setlazy(x_384, c_383, 2);
  return x_384;
}

fn fn1_empty_workerL_737(env) {
  A_382 := env[1];
  c_383 := env[2];
  x_740 := fn0_empty_workerL_736(A_382, c_383);
  return x_740;
}

fn fn0_emptyU_741(A_403) {
  lazy(x_404, lazy__743, 1);
  setlazy(x_404, empty_workerU_360, 0);
  return x_404;
}

fn fn1_emptyU_742(env) {
  A_403 := env[1];
  x_745 := fn0_emptyU_741(A_403);
  return x_745;
}

fn fn0_emptyL_746(A_411) {
  lazy(x_412, lazy__748, 1);
  setlazy(x_412, empty_workerL_381, 0);
  return x_412;
}

fn fn1_emptyL_747(env) {
  A_411 := env[1];
  x_750 := fn0_emptyL_746(A_411);
  return x_750;
}

fn fn0_insU_751(A_419, xs_420, x_421, __422) {
  lazy(x_423, lazy__753, 2);
  setlazy(x_423, x_421, 0);
  setlazy(x_423, __422, 1);
  return x_423;
}

fn fn1_insU_752(env) {
  A_419 := env[1];
  xs_420 := env[2];
  x_421 := env[3];
  __422 := env[4];
  x_754 := fn0_insU_751(A_419, xs_420, x_421, __422);
  return x_754;
}

fn fn0_insL_755(A_430, xs_431, x_432, __433) {
  lazy(x_434, lazy__757, 2);
  setlazy(x_434, x_432, 0);
  setlazy(x_434, __433, 1);
  return x_434;
}

fn fn1_insL_756(env) {
  A_430 := env[1];
  xs_431 := env[2];
  x_432 := env[3];
  __433 := env[4];
  x_758 := fn0_insL_755(A_430, xs_431, x_432, __433);
  return x_758;
}

fn fn0_delU_759(A_441, x_442, xs_443, q_444) {
  lazy(x_445, lazy__761, 1);
  setlazy(x_445, q_444, 0);
  return x_445;
}

fn fn1_delU_760(env) {
  A_441 := env[1];
  x_442 := env[2];
  xs_443 := env[3];
  q_444 := env[4];
  x_763 := fn0_delU_759(A_441, x_442, xs_443, q_444);
  return x_763;
}

fn fn0_delL_764(A_465, x_466, xs_467, q_468) {
  lazy(x_469, lazy__766, 1);
  setlazy(x_469, q_468, 0);
  return x_469;
}

fn fn1_delL_765(env) {
  A_465 := env[1];
  x_466 := env[2];
  xs_467 := env[3];
  q_468 := env[4];
  x_768 := fn0_delL_764(A_465, x_466, xs_467, q_468);
  return x_768;
}

fn fn0_freeU_769(A_489, q_490) {
  lazy(x_491, lazy__771, 1);
  setlazy(x_491, q_490, 0);
  return x_491;
}

fn fn1_freeU_770(env) {
  A_489 := env[1];
  q_490 := env[2];
  x_772 := fn0_freeU_769(A_489, q_490);
  return x_772;
}

fn fn0_freeL_773(A_498, q_499) {
  lazy(x_500, lazy__775, 1);
  setlazy(x_500, q_499, 0);
  return x_500;
}

fn fn1_freeL_774(env) {
  A_498 := env[1];
  q_499 := env[2];
  x_776 := fn0_freeL_773(A_498, q_499);
  return x_776;
}

fn lazy__778(env) {
  string_of_int_282 := env[0];
  delU_440 := env[1];
  freeU_488 := env[2];
  myqueue_514 := env[3];
  x_519 := fn0_delU_759(NULL, NULL, NULL, myqueue_514);
  force(x_518, x_519);
  free(x_519);
  move1(_517, x_518);
  getbox(m_521, _517, 0);
  getbox(n_522, _517, 1);
  x_525 := fn0_delU_759(NULL, NULL, NULL, n_522);
  force(x_524, x_525);
  free(x_525);
  move1(_523, x_524);
  getbox(m_527, _523, 0);
  getbox(n_528, _523, 1);
  x_531 := fn0_delU_759(NULL, NULL, NULL, n_528);
  force(x_530, x_531);
  free(x_531);
  move1(_529, x_530);
  getbox(m_533, _529, 0);
  getbox(n_534, _529, 1);
  x_537 := fn0_delU_759(NULL, NULL, NULL, n_534);
  force(x_536, x_537);
  free(x_537);
  move1(_535, x_536);
  getbox(m_539, _535, 0);
  getbox(n_540, _535, 1);
  x_543 := fn0_freeU_769(NULL, n_540);
  force(x_542, x_543);
  free(x_543);
  move1(_541, x_542);
  switch(_541){
    ttU_24 => {
      str(x_557, "a := ")
      x_558 := fn0_string_of_int_713(m_521);
      cat(x_556, x_557, x_558);
      str(x_559, "\n")
      cat(x_555, x_556, x_559);
      str(x_560, "b := ")
      cat(x_554, x_555, x_560);
      x_561 := fn0_string_of_int_713(m_527);
      cat(x_553, x_554, x_561);
      str(x_562, "\n")
      cat(x_552, x_553, x_562);
      str(x_563, "c := ")
      cat(x_551, x_552, x_563);
      x_564 := fn0_string_of_int_713(m_533);
      cat(x_550, x_551, x_564);
      str(x_565, "\n")
      cat(x_549, x_550, x_565);
      str(x_566, "d := ")
      cat(x_548, x_549, x_566);
      x_567 := fn0_string_of_int_713(m_539);
      cat(x_547, x_548, x_567);
      str(x_568, "\n")
      cat(x_546, x_547, x_568);
      print(x_545, x_546);
      move1(x_544, x_545);
      break;
    }
  }
  move1(x_538, x_544);
  free(_535);
  move1(x_532, x_538);
  free(_529);
  move1(x_526, x_532);
  free(_523);
  move1(x_520, x_526);
  free(_517);
  return x_520;
}

fn lazy__775(env) {
  q_499 := env[0];
  force(x_502, q_499);
  free(q_499);
  move1(q_501, x_502);
  send(x_504, q_501, DelL_50);
  move1(q_503, x_504);
  close1(x_505, q_503);
  return x_505;
}

fn lazy__771(env) {
  q_490 := env[0];
  force(x_493, q_490);
  free(q_490);
  move1(q_492, x_493);
  send(x_495, q_492, DelU_52);
  move1(q_494, x_495);
  close1(x_496, q_494);
  return x_496;
}

fn lazy__766(env) {
  q_468 := env[0];
  force(x_471, q_468);
  free(q_468);
  move1(q_470, x_471);
  send(x_473, q_470, DelL_50);
  move1(q_472, x_473);
  recv1(x_475, q_472);
  move1(_474, x_475);
  getbox(m_477, _474, 0);
  getbox(n_478, _474, 1);
  recv1(x_480, n_478);
  move1(_479, x_480);
  getbox(m_482, _479, 0);
  getbox(n_483, _479, 1);
  close1(x_485, n_483);
  move1(__484, x_485);
  lazy(x_486, lazy__767, 1);
  setlazy(x_486, m_482, 0);
  rebox(x_487, _479, ex1LL_45);
  setbox(x_487, m_477, 0);
  setbox(x_487, x_486, 1);
  move1(x_481, x_487);
  move1(x_476, x_481);
  free(_474);
  return x_476;
}

fn lazy__767(env) {
  m_482 := env[0];
  return m_482;
}

fn lazy__761(env) {
  q_444 := env[0];
  force(x_447, q_444);
  free(q_444);
  move1(q_446, x_447);
  send(x_449, q_446, DelU_52);
  move1(q_448, x_449);
  recv0(x_451, q_448);
  move1(_450, x_451);
  getbox(m_453, _450, 0);
  getbox(n_454, _450, 1);
  recv1(x_456, n_454);
  move1(_455, x_456);
  getbox(m_458, _455, 0);
  getbox(n_459, _455, 1);
  close1(x_461, n_459);
  move1(__460, x_461);
  lazy(x_462, lazy__762, 1);
  setlazy(x_462, m_458, 0);
  rebox(x_463, _455, ex1UL_47);
  setbox(x_463, m_453, 0);
  setbox(x_463, x_462, 1);
  move1(x_457, x_463);
  move1(x_452, x_457);
  free(_450);
  return x_452;
}

fn lazy__762(env) {
  m_458 := env[0];
  return m_458;
}

fn lazy__757(env) {
  x_432 := env[0];
  __433 := env[1];
  force(x_436, __433);
  free(__433);
  move1(q_435, x_436);
  mkbox(x_439, InsL_49, 1);
  setbox(x_439, x_432, 0);
  send(x_438, q_435, x_439);
  move1(q_437, x_438);
  return q_437;
}

fn lazy__753(env) {
  x_421 := env[0];
  __422 := env[1];
  force(x_425, __422);
  free(__422);
  move1(q_424, x_425);
  mkbox(x_428, InsU_51, 1);
  setbox(x_428, x_421, 0);
  send(x_427, q_424, x_428);
  move1(q_426, x_427);
  return q_426;
}

fn lazy__748(env) {
  empty_workerL_381 := env[0];
  mkclo1(x_414, fn1_lam_749, fvc:=1, argc:=1);
  setclo(x_414, empty_workerL_381, 1);
  fork(x_413, x_414);
  return x_413;
}

fn fn1_lam_749(env) {
  lam_415 := env[0];
  empty_workerL_381 := env[1];
  _416 := env[2];
  x_417 := fn0_empty_workerL_736(NULL, _416);
  return x_417;
}

fn lazy__743(env) {
  empty_workerU_360 := env[0];
  mkclo1(x_406, fn1_lam_744, fvc:=1, argc:=1);
  setclo(x_406, empty_workerU_360, 1);
  fork(x_405, x_406);
  return x_405;
}

fn fn1_lam_744(env) {
  lam_407 := env[0];
  empty_workerU_360 := env[1];
  _408 := env[2];
  x_409 := fn0_empty_workerU_731(NULL, _408);
  return x_409;
}

fn lazy__738(env) {
  node_workerL_335 := env[0];
  empty_workerL_381 := env[1];
  c_383 := env[2];
  recv1(x_386, c_383);
  move1(_385, x_386);
  getbox(m_388, _385, 0);
  getbox(n_389, _385, 1);
  switch(m_388){
    DelL_50 => {
      close0(x_391, n_389);
      move1(x_390, x_391);
      break;
    }
    _ => {
      getbox(x_393, m_388, 0);
      mkclo1(x_396, fn1_lam_739, fvc:=1, argc:=1);
      setclo(x_396, empty_workerL_381, 1);
      fork(x_395, x_396);
      move1(c0_394, x_395);
      x_401 := fn0_node_workerL_727(NULL, NULL, x_393, c0_394, n_389);
      force(x_400, x_401);
      free(x_401);
      move1(x_392, x_400);
      free(m_388);
      move1(x_390, x_392);
      break;
    }
  }
  move1(x_387, x_390);
  free(_385);
  return x_387;
}

fn fn1_lam_739(env) {
  lam_397 := env[0];
  empty_workerL_381 := env[1];
  _398 := env[2];
  x_399 := fn0_empty_workerL_736(NULL, _398);
  return x_399;
}

fn lazy__733(env) {
  node_workerU_310 := env[0];
  empty_workerU_360 := env[1];
  c_362 := env[2];
  recv1(x_365, c_362);
  move1(_364, x_365);
  getbox(m_367, _364, 0);
  getbox(n_368, _364, 1);
  switch(m_367){
    DelU_52 => {
      close0(x_370, n_368);
      move1(x_369, x_370);
      break;
    }
    _ => {
      getbox(x_372, m_367, 0);
      mkclo1(x_375, fn1_lam_734, fvc:=1, argc:=1);
      setclo(x_375, empty_workerU_360, 1);
      fork(x_374, x_375);
      move1(c0_373, x_374);
      x_380 := fn0_node_workerU_723(NULL, NULL, x_372, c0_373, n_368);
      force(x_379, x_380);
      free(x_380);
      move1(x_371, x_379);
      free(m_367);
      move1(x_369, x_371);
      break;
    }
  }
  move1(x_366, x_369);
  free(_364);
  return x_366;
}

fn fn1_lam_734(env) {
  lam_376 := env[0];
  empty_workerU_360 := env[1];
  _377 := env[2];
  x_378 := fn0_empty_workerU_731(NULL, _377);
  return x_378;
}

fn lazy__729(env) {
  node_workerL_335 := env[0];
  x_338 := env[1];
  __339 := env[2];
  __340 := env[3];
  recv1(x_343, __340);
  move1(_342, x_343);
  getbox(m_345, _342, 0);
  getbox(n_346, _342, 1);
  switch(m_345){
    DelL_50 => {
      send(x_349, n_346, x_338);
      move1(c_348, x_349);
      send(x_351, c_348, __339);
      move1(c_350, x_351);
      close0(x_352, c_350);
      move1(x_347, x_352);
      break;
    }
    _ => {
      getbox(x_354, m_345, 0);
      rebox(x_357, m_345, InsL_49);
      setbox(x_357, x_354, 0);
      send(x_356, __339, x_357);
      move1(c_next_355, x_356);
      x_359 := fn0_node_workerL_727(NULL, NULL, x_338, c_next_355, n_346);
      force(x_358, x_359);
      free(x_359);
      move1(x_353, x_358);
      move1(x_347, x_353);
      break;
    }
  }
  move1(x_344, x_347);
  free(_342);
  return x_344;
}

fn lazy__725(env) {
  node_workerU_310 := env[0];
  x_313 := env[1];
  __314 := env[2];
  __315 := env[3];
  recv1(x_318, __315);
  move1(_317, x_318);
  getbox(m_320, _317, 0);
  getbox(n_321, _317, 1);
  switch(m_320){
    DelU_52 => {
      send(x_324, n_321, x_313);
      move1(c_323, x_324);
      send(x_326, c_323, __314);
      move1(c_325, x_326);
      close0(x_327, c_325);
      move1(x_322, x_327);
      break;
    }
    _ => {
      getbox(x_329, m_320, 0);
      rebox(x_332, m_320, InsU_51);
      setbox(x_332, x_329, 0);
      send(x_331, __314, x_332);
      move1(c_next_330, x_331);
      x_334 := fn0_node_workerU_723(NULL, NULL, x_313, c_next_330, n_321);
      force(x_333, x_334);
      free(x_334);
      move1(x_328, x_333);
      move1(x_322, x_328);
      break;
    }
  }
  move1(x_319, x_322);
  free(_317);
  return x_319;
}

fn fn1_aux_715(env) {
  aux_286 := env[0];
  ord_269 := env[1];
  chr_272 := env[2];
  str_275 := env[3];
  i_287 := env[4];
  lte(x_289, 10, i_287);
  switch(x_289){
    true_4 => {
      mod(x_291, i_287, 10);
      move1(r_290, x_291);
      div(x_293, i_287, 10);
      move1(i_292, x_293);
      appc(x_716, aux_286, i_292);
      move1(x_295, x_716);
      x_298 := fn0_ord_701(0);
      add(x_297, r_290, x_298);
      x_296 := fn0_chr_704(x_297);
      push(x_294, x_295, x_296);
      move1(x_288, x_294);
      break;
    }
    false_5 => {
      x_302 := fn0_ord_701(0);
      add(x_301, i_287, x_302);
      x_300 := fn0_chr_704(x_301);
      x_299 := fn0_str_707(x_300);
      move1(x_288, x_299);
      break;
    }
  }
  return x_288;
}

fn fn1_loop_693(env) {
  loop_259 := env[0];
  x_254 := env[1];
  m_256 := env[2];
  acc_260 := env[3];
  y_261 := env[4];
  lte(x_263, y_261, 0);
  switch(x_263){
    true_4 => {
      move1(x_262, acc_260);
      break;
    }
    false_5 => {
      mul(x_266, x_254, acc_260);
      mod(x_265, x_266, m_256);
      sub(x_267, y_261, 1);
      appc(x_694, loop_259, x_265);
      appc(x_695, x_694, x_267);
      move1(x_264, x_695);
      move1(x_262, x_264);
      break;
    }
  }
  return x_262;
}

fn fn1_loop_683(env) {
  loop_244 := env[0];
  x_240 := env[1];
  acc_245 := env[2];
  y_246 := env[3];
  lte(x_248, y_246, 0);
  switch(x_248){
    true_4 => {
      move1(x_247, acc_245);
      break;
    }
    false_5 => {
      mul(x_250, x_240, acc_245);
      sub(x_251, y_246, 1);
      appc(x_684, loop_244, x_250);
      appc(x_685, x_684, x_251);
      move1(x_249, x_685);
      move1(x_247, x_249);
      break;
    }
  }
  return x_247;
}

fn fn1_loop_646(env) {
  loop_154 := env[0];
  pred_118 := env[1];
  sub_131 := env[2];
  x_155 := env[3];
  y_156 := env[4];
  x_159 := fn0_pred_632(y_156);
  x_158 := fn0_sub_638(x_155, x_159);
  switch(x_158){
    zero_6 => {
      move1(x_157, zero_6);
      break;
    }
    _ => {
      x_162 := fn0_pred_632(y_156);
      x_161 := fn0_sub_638(x_155, x_162);
      getbox(n_163, x_161, 0);
      appc(x_647, loop_154, n_163);
      appc(x_648, x_647, y_156);
      move1(x_164, x_648);
      mkbox(x_165, succ_7, 1);
      setbox(x_165, x_164, 0);
      move1(x_160, x_165);
      move1(x_157, x_160);
      break;
    }
  }
  return x_157;
}

main {
  mkclo0(idU_1, fn1_idU_570, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_573, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_576, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_579, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_582, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_585, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_588, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_591, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_594, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_597, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_600, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_603, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_606, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_609, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_612, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_615, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_618, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_621, fvc:=0, argc:=2);
  mkclo0(string_of_bool_98, fn1_string_of_bool_624, fvc:=0, argc:=1);
  mkclo0(lte_103, fn1_lte_627, fvc:=0, argc:=2);
  mkclo0(lt_113, fn1_lt_630, fvc:=0, argc:=2);
  mkclo0(pred_118, fn1_pred_633, fvc:=0, argc:=1);
  mkclo0(add_123, fn1_add_636, fvc:=0, argc:=2);
  mkclo0(sub_131, fn1_sub_639, fvc:=0, argc:=2);
  mkclo0(mul_139, fn1_mul_642, fvc:=0, argc:=2);
  mkclo0(div_147, fn1_div_645, fvc:=0, argc:=2);
  mkclo0(rem_167, fn1_rem_655, fvc:=0, argc:=2);
  mkclo0(rconsUU_173, fn1_rconsUU_658, fvc:=0, argc:=3);
  mkclo0(rconsUL_184, fn1_rconsUL_661, fvc:=0, argc:=3);
  mkclo0(rconsLL_195, fn1_rconsLL_664, fvc:=0, argc:=3);
  mkclo0(free_listUU_206, fn1_free_listUU_667, fvc:=0, argc:=3);
  mkclo0(free_listUL_217, fn1_free_listUL_672, fvc:=0, argc:=3);
  mkclo0(free_listLL_228, fn1_free_listLL_677, fvc:=0, argc:=3);
  mkclo0(pow_239, fn1_pow_682, fvc:=0, argc:=2);
  mkclo0(powm_253, fn1_powm_692, fvc:=0, argc:=3);
  mkclo0(ord_269, fn1_ord_702, fvc:=0, argc:=1);
  mkclo0(chr_272, fn1_chr_705, fvc:=0, argc:=1);
  mkclo0(str_275, fn1_str_708, fvc:=0, argc:=1);
  mkclo0(strlen_279, fn1_strlen_711, fvc:=0, argc:=1);
  mkclo0(string_of_int_282, fn1_string_of_int_714, fvc:=0, argc:=1);
  mkclo0(node_workerU_310, fn1_node_workerU_724, fvc:=0, argc:=5);
  mkclo0(node_workerL_335, fn1_node_workerL_728, fvc:=0, argc:=5);
  mkclo0(empty_workerU_360, fn1_empty_workerU_732, fvc:=0, argc:=2);
  mkclo0(empty_workerL_381, fn1_empty_workerL_737, fvc:=0, argc:=2);
  mkclo0(emptyU_402, fn1_emptyU_742, fvc:=0, argc:=1);
  mkclo0(emptyL_410, fn1_emptyL_747, fvc:=0, argc:=1);
  mkclo0(insU_418, fn1_insU_752, fvc:=0, argc:=4);
  mkclo0(insL_429, fn1_insL_756, fvc:=0, argc:=4);
  mkclo0(delU_440, fn1_delU_760, fvc:=0, argc:=4);
  mkclo0(delL_464, fn1_delL_765, fvc:=0, argc:=4);
  mkclo0(freeU_488, fn1_freeU_770, fvc:=0, argc:=2);
  mkclo0(freeL_497, fn1_freeL_774, fvc:=0, argc:=2);
  x_507 := fn0_emptyU_741(NULL);
  move0(myqueue_506, x_507);
  x_509 := fn0_insU_751(NULL, NULL, 0, myqueue_506);
  move0(myqueue_508, x_509);
  x_511 := fn0_insU_751(NULL, NULL, 1, myqueue_508);
  move0(myqueue_510, x_511);
  x_513 := fn0_insU_751(NULL, NULL, 2, myqueue_510);
  move0(myqueue_512, x_513);
  x_515 := fn0_insU_751(NULL, NULL, 3, myqueue_512);
  move0(myqueue_514, x_515);
  lazy(x_516, lazy__778, 4);
  setlazy(x_516, string_of_int_282, 0);
  setlazy(x_516, delU_440, 1);
  setlazy(x_516, freeU_488, 2);
  setlazy(x_516, myqueue_514, 3);
  force(x_777, x_516);
  return x_777;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

