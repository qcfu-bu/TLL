[Inductive {name = "eq"; relv = N;
   body =
   (Binder (["s"],
      (PBind ((Type (SId "s")),
         (Binder ("A",
            (PBind ((Id ("A", I)),
               (Binder ("m",
                  (PBase
                     ((TBind (R, (Id ("A", I)),
                         (Binder ("_", (TBase (Type U)))))),
                      [(DConstr ("refl",
                          (TBase
                             (App
                                [(Id ("eq", I)); (Id ("m", I)); (Id ("m", I))
                                  ])),
                          []))
                        ]))
                  ))
               ))
            ))
         ))
      ));
   view = [I; E]};
  Inductive {name = "unit"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)), [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
       ));
    view = []};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("true", (TBase (Id ("bool", I))), []));
             (DConstr ("false", (TBase (Id ("bool", I))), []))]))
       ));
    view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("n", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "list"; relv = R;
    body =
    (Binder (["s"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type (SId "t"))),
                 [(DConstr ("nil",
                     (TBase (App [(Id ("list", I)); (Id ("A", I))])), 
                     []));
                   (DConstr ("cons",
                      (TBind (R, (Id ("A", I)),
                         (Binder ("hd",
                            (TBind (R,
                               (App [(Id ("list", I)); (Id ("A", I))]),
                               (Binder ("tl",
                                  (TBase
                                     (App [(Id ("list", I)); (Id ("A", I))]))
                                  ))
                               ))
                            ))
                         )),
                      [E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Inductive {name = "exists0"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type L)),
                       [(DConstr ("ex0",
                           (TBind (N, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("exists0", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists1"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type L)),
                       [(DConstr ("ex1",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("exists1", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Definition {name = "xor"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("bool", I)),
              (Binder ("_",
                 (Pi (R, L, (Id ("bool", I)),
                    (Binder ("_", (Id ("bool", I))))))
                 ))
              )),
           (Binder ((Some "xor"),
              [([(PId "true"); (PId "true")], (Some (Id ("false", I))));
                ([(PId "false"); (PId "false")], (Some (Id ("false", I))));
                ([(PId "_"); (PId "_")], (Some (Id ("true", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("bool", I)),
           (Binder ("_",
              (Pi (R, L, (Id ("bool", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "lte"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("bool", I))))
                    ))
                 ))
              )),
           (Binder ((Some "lte"),
              [([(PId "zero"); (PId "_")], (Some (Id ("true", I))));
                ([(PId "_"); (PId "zero")], (Some (Id ("false", I))));
                ([(PConstr ("succ", [(PId "x")]));
                   (PConstr ("succ", [(PId "y")]))],
                 (Some (App [(Id ("lte", I)); (Id ("x", I)); (Id ("y", I))])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "lt"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", (Id ("bool", I))))
                    ))
                 ))
              )),
           (Binder ((Some "lt"),
              [([(PId "x"); (PId "y")],
                (Some (App
                         [(Id ("lte", I));
                           (App [(Id ("succ", I)); (Id ("x", I))]);
                           (Id ("y", I))])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x",
              (Pi (R, U, (Id ("nat", I)), (Binder ("y", (Id ("bool", I))))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "pred"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I)))))),
           (Binder ((Some "pred"),
              [([(PId "zero")], (Some (Id ("zero", I))));
                ([(PConstr ("succ", [(PId "x")]))], (Some (Id ("x", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I)))))))
       ));
    view = []};
  Definition {name = "add"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "add"),
              [([(PId "zero"); (PId "y")], (Some (Id ("y", I))));
                ([(PConstr ("succ", [(PId "x")])); (PId "y")],
                 (Some (App
                          [(Id ("succ", I));
                            (App
                               [(Id ("add", I)); (Id ("x", I)); (Id ("y", I))
                                 ])
                            ])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "sub"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "sub"),
              [([(PId "x"); (PId "zero")], (Some (Id ("x", I))));
                ([(PId "x"); (PConstr ("succ", [(PId "y")]))],
                 (Some (App
                          [(Id ("sub", I));
                            (App [(Id ("pred", I)); (Id ("x", I))]);
                            (Id ("y", I))])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "mul"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "mul"),
              [([(PId "zero"); (PId "_")], (Some (Id ("zero", I))));
                ([(PConstr ("succ", [(PId "x")])); (PId "y")],
                 (Some (App
                          [(Id ("add", I)); (Id ("y", I));
                            (App
                               [(Id ("mul", I)); (Id ("x", I)); (Id ("y", I))
                                 ])
                            ])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "div"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))))
              )),
           (Binder ((Some "div"),
              [([(PId "x"); (PId "y")],
                (Some (Match (
                         [(R,
                           (App
                              [(Id ("lt", I)); (Id ("x", I)); (Id ("y", I))]),
                           None)],
                         None,
                         [([(PId "true")], (Some (Id ("zero", I))));
                           ([(PId "false")],
                            (Some (App
                                     [(Id ("succ", I));
                                       (App
                                          [(Id ("div", I));
                                            (App
                                               [(Id ("sub", I));
                                                 (Id ("x", I)); (Id ("y", I))
                                                 ]);
                                            (Id ("y", I))])
                                       ])))
                           ]
                         ))))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x", (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "rem"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))))
              )),
           (Binder ((Some "rem"),
              [([(PId "x"); (PId "y")],
                (Some (App
                         [(Id ("sub", I)); (Id ("x", I));
                           (App
                              [(Id ("mul", I));
                                (App
                                   [(Id ("div", I)); (Id ("x", I));
                                     (Id ("y", I))]);
                                (Id ("y", I))])
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x", (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "pow"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "pow"),
              [([(PId "_"); (PId "zero")],
                (Some (App [(Id ("succ", I)); (Id ("zero", I))])));
                ([(PId "x"); (PConstr ("succ", [(PId "y")]))],
                 (Some (App
                          [(Id ("mul", I)); (Id ("x", I));
                            (App
                               [(Id ("pow", I)); (Id ("x", I)); (Id ("y", I))
                                 ])
                            ])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Extern {name = "proto"; relv = N; body = (Binder ([], (Type U))); view = []};
  Extern {name = "act0"; relv = N;
    body =
    (Binder (["s"],
       (Pi (R, U, (Id ("bool", I)),
          (Binder ("b",
             (Pi (R, U, (Type (SId "s")),
                (Binder ("A",
                   (Pi (R, U,
                      (Pi (R, U, (Id ("A", I)),
                         (Binder ("_", (Id ("proto", I)))))),
                      (Binder ("B", (Id ("proto", I))))))
                   ))
                ))
             ))
          ))
       ));
    view = [E; I; E]};
  Extern {name = "act1"; relv = N;
    body =
    (Binder (["s"],
       (Pi (R, U, (Id ("bool", I)),
          (Binder ("b",
             (Pi (R, U, (Type (SId "s")),
                (Binder ("A",
                   (Pi (R, U,
                      (Pi (R, U, (Id ("A", I)),
                         (Binder ("_", (Id ("proto", I)))))),
                      (Binder ("B", (Id ("proto", I))))))
                   ))
                ))
             ))
          ))
       ));
    view = [E; I; E]};
  Extern {name = "endp"; relv = N; body = (Binder ([], (Id ("proto", I))));
    view = []};
  Extern {name = "ch"; relv = N;
    body =
    (Binder ([],
       (Pi (R, U, (Id ("bool", I)),
          (Binder ("_",
             (Pi (R, U, (Id ("proto", I)), (Binder ("_", (Type L)))))))
          ))
       ));
    view = []};
  Extern {name = "close"; relv = R;
    body =
    (Binder ([],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b",
             (Pi (R, U,
                (App [(Id ("ch", I)); (Id ("b", I)); (Id ("endp", I))]),
                (Binder ("_", (IO (Id ("unit", I)))))))
             ))
          ))
       ));
    view = [I]};
  Extern {name = "send0"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (App
                                     [(Id ("eq", I));
                                       (App
                                          [(Id ("xor", I)); (Id ("b1", I));
                                            (Id ("b2", I))]);
                                       (Id ("false", I))]),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act0", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (Pi (N, L, (Id ("A", I)),
                                              (Binder ("x",
                                                 (IO
                                                    (App
                                                       [(Id ("ch", I));
                                                         (Id ("b1", I));
                                                         (App
                                                            [(Id ("B", I));
                                                              (Id ("x", I))])
                                                         ]))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "send1"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (App
                                     [(Id ("eq", I));
                                       (App
                                          [(Id ("xor", I)); (Id ("b1", I));
                                            (Id ("b2", I))]);
                                       (Id ("false", I))]),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act1", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (Pi (R, L, (Id ("A", I)),
                                              (Binder ("x",
                                                 (IO
                                                    (App
                                                       [(Id ("ch", I));
                                                         (Id ("b1", I));
                                                         (App
                                                            [(Id ("B", I));
                                                              (Id ("x", I))])
                                                         ]))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "recv0"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (App
                                     [(Id ("eq", I));
                                       (App
                                          [(Id ("xor", I)); (Id ("b1", I));
                                            (Id ("b2", I))]);
                                       (Id ("true", I))]),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act0", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (IO
                                              (App
                                                 [(Id ("exists0", I));
                                                   (Fun (
                                                      (Pi (R, U,
                                                         (Id ("A", I)),
                                                         (Binder ("x", IMeta
                                                            ))
                                                         )),
                                                      (Binder (None,
                                                         [([(PId "x")],
                                                           (Some (App
                                                                    [(Id (
                                                                    "ch", I));
                                                                    (Id (
                                                                    "b1", I));
                                                                    (App
                                                                    [(Id (
                                                                    "B", I));
                                                                    (Id ("x",
                                                                    I))])])))
                                                           ]
                                                         )),
                                                      []))
                                                   ]))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "recv1"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (App
                                     [(Id ("eq", I));
                                       (App
                                          [(Id ("xor", I)); (Id ("b1", I));
                                            (Id ("b2", I))]);
                                       (Id ("true", I))]),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act1", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (IO
                                              (App
                                                 [(Id ("exists1", I));
                                                   (Fun (
                                                      (Pi (R, U,
                                                         (Id ("A", I)),
                                                         (Binder ("x", IMeta
                                                            ))
                                                         )),
                                                      (Binder (None,
                                                         [([(PId "x")],
                                                           (Some (App
                                                                    [(Id (
                                                                    "ch", I));
                                                                    (Id (
                                                                    "b1", I));
                                                                    (App
                                                                    [(Id (
                                                                    "B", I));
                                                                    (Id ("x",
                                                                    I))])])))
                                                           ]
                                                         )),
                                                      []))
                                                   ]))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "fork"; relv = R;
    body =
    (Binder ([],
       (Pi (N, U, (Id ("proto", I)),
          (Binder ("P",
             (Pi (R, U,
                (Pi (R, L,
                   (App [(Id ("ch", I)); (Id ("false", I)); (Id ("P", I))]),
                   (Binder ("_", (IO (Id ("unit", I))))))),
                (Binder ("_",
                   (IO
                      (App [(Id ("ch", I)); (Id ("true", I)); (Id ("P", I))]))
                   ))
                ))
             ))
          ))
       ));
    view = [E]};
  Definition {name = "DH"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("p",
                 (Pi (R, U, (Id ("nat", I)),
                    (Binder ("g", (Id ("proto", I))))))
                 ))
              )),
           (Binder ((Some "DH"),
              [([(PId "p"); (PId "g")],
                (Some (App
                         [(Id ("act0", I)); (Id ("true", I));
                           (Fun (
                              (Pi (R, U, (Id ("nat", I)),
                                 (Binder ("a", IMeta)))),
                              (Binder (None,
                                 [([(PId "a")],
                                   (Some (App
                                            [(Id ("act1", I));
                                              (Id ("true", I));
                                              (Fun (
                                                 (Pi (R, U, (Id ("nat", I)),
                                                    (Binder ("A", IMeta)))),
                                                 (Binder (None,
                                                    [([(PId "A")],
                                                      (Some (App
                                                               [(Id ("act0",
                                                                   I));
                                                                 (Id ("true",
                                                                    I));
                                                                 (Fun (
                                                                    (
                                                                    Pi (R, U,
                                                                    (App
                                                                    [(Id (
                                                                    "eq", I));
                                                                    (Id ("A",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "rem", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "pow", I
                                                                    ));
                                                                    (Id ("g",
                                                                    I));
                                                                    (Id ("a",
                                                                    I))]);
                                                                    (Id ("p",
                                                                    I))])]),
                                                                    (Binder (
                                                                    "_",
                                                                    IMeta)))),
                                                                    (
                                                                    Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "_")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "act0", I
                                                                    ));
                                                                    (Id (
                                                                    "false",
                                                                    I));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U,
                                                                    (Id (
                                                                    "nat", I
                                                                    )),
                                                                    (Binder (
                                                                    "b",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "b")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "act1", I
                                                                    ));
                                                                    (Id (
                                                                    "false",
                                                                    I));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U,
                                                                    (Id (
                                                                    "nat", I
                                                                    )),
                                                                    (Binder (
                                                                    "B",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "B")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "act0", I
                                                                    ));
                                                                    (Id (
                                                                    "false",
                                                                    I));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U,
                                                                    (App
                                                                    [(Id (
                                                                    "eq", I));
                                                                    (Id ("B",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "rem", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "pow", I
                                                                    ));
                                                                    (Id ("g",
                                                                    I));
                                                                    (Id ("b",
                                                                    I))]);
                                                                    (Id ("p",
                                                                    I))])]),
                                                                    (Binder (
                                                                    "_",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "_")],
                                                                    (Some (
                                                                    Id (
                                                                    "endp", I
                                                                    ))))])),
                                                                    []))])))]
                                                                    )), 
                                                                    []))])))]
                                                                    )), 
                                                                    []))])))]
                                                                    )), 
                                                                    []))
                                                                 ])))
                                                      ]
                                                    )),
                                                 []))
                                              ])))
                                   ]
                                 )),
                              []))
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("p",
              (Pi (R, U, (Id ("nat", I)), (Binder ("g", (Id ("proto", I))))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "DH_ch"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("p",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))))
              )),
           (Binder ((Some "DH_ch"),
              [([(PId "p"); (PId "g")],
                (Some (App
                         [(Id ("ch", I)); (Id ("true", I));
                           (App
                              [(Id ("DH", I)); (Id ("p", I)); (Id ("g", I))])
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("p", (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "DH_hc"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("p",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))))
              )),
           (Binder ((Some "DH_hc"),
              [([(PId "p"); (PId "g")],
                (Some (App
                         [(Id ("ch", I)); (Id ("false", I));
                           (App
                              [(Id ("DH", I)); (Id ("p", I)); (Id ("g", I))])
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("p", (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "alice"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("a",
                 (Pi (R, U, (Id ("nat", I)),
                    (Binder ("p",
                       (Pi (R, U, (Id ("nat", I)),
                          (Binder ("g",
                             (Pi (R, U,
                                (App
                                   [(Id ("DH_ch", I)); (Id ("p", I));
                                     (Id ("g", I))]),
                                (Binder ("c", (IO (Id ("unit", I)))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "alice"),
              [([(PId "a"); (PId "p"); (PId "g"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Id ("send0", I)); (Id ("refl", I));
                              (Id ("c", I)); (Id ("a", I))]),
                         (Binder ("c",
                            (MLet (
                               (App
                                  [(Id ("send1", I)); (Id ("refl", I));
                                    (Id ("c", I));
                                    (App
                                       [(Id ("rem", I));
                                         (App
                                            [(Id ("pow", I)); (Id ("g", I));
                                              (Id ("a", I))]);
                                         (Id ("p", I))])
                                    ]),
                               (Binder ("c",
                                  (MLet (
                                     (App
                                        [(Id ("send0", I)); (Id ("refl", I));
                                          (Id ("c", I)); (Id ("refl", I))]),
                                     (Binder ("c",
                                        (MLet (
                                           (App
                                              [(Id ("recv0", I));
                                                (Id ("refl", I));
                                                (Id ("c", I))]),
                                           (Binder ("r",
                                              (Match (
                                                 [(R, (Id ("r", I)), None)],
                                                 None,
                                                 [([(PConstr ("ex0",
                                                       [(PId "b"); (PId "c")]
                                                       ))
                                                     ],
                                                   (Some (MLet (
                                                            (App
                                                               [(Id ("recv1",
                                                                   I));
                                                                 (Id ("refl",
                                                                    I));
                                                                 (Id ("c", I
                                                                    ))
                                                                 ]),
                                                            (Binder ("r",
                                                               (Match (
                                                                  [(R,
                                                                    (
                                                                    Id ("r",
                                                                    I)), None)
                                                                    ],
                                                                  None,
                                                                  [([(PConstr (
                                                                    "ex1",
                                                                    [(PId "B");
                                                                    (PId "c")
                                                                    ]))],
                                                                    (Some (
                                                                    MLet (
                                                                    (App
                                                                    [(Id (
                                                                    "recv0",
                                                                    I));
                                                                    (Id (
                                                                    "refl", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))]),
                                                                    (Binder (
                                                                    "r",
                                                                    (Match (
                                                                    [(R,
                                                                    (Id ("r",
                                                                    I)), None)
                                                                    ], None,
                                                                    [([(PConstr (
                                                                    "ex0",
                                                                    [(PId
                                                                    "pf");
                                                                    (PId "c")
                                                                    ]))],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "close",
                                                                    I));
                                                                    (Id ("c",
                                                                    I))])))]
                                                                    ))))))))]
                                                                  ))
                                                               ))
                                                            ))))
                                                   ]
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; E; E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("a",
              (Pi (R, U, (Id ("nat", I)),
                 (Binder ("p",
                    (Pi (R, U, (Id ("nat", I)),
                       (Binder ("g",
                          (Pi (R, U,
                             (App
                                [(Id ("DH_ch", I)); (Id ("p", I));
                                  (Id ("g", I))]),
                             (Binder ("c", (IO (Id ("unit", I)))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E; E; E]};
  Definition {name = "bob"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("b",
                 (Pi (R, U, (Id ("nat", I)),
                    (Binder ("p",
                       (Pi (R, U, (Id ("nat", I)),
                          (Binder ("g",
                             (Pi (R, U,
                                (App
                                   [(Id ("DH_hc", I)); (Id ("p", I));
                                     (Id ("g", I))]),
                                (Binder ("c", (IO (Id ("unit", I)))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "bob"),
              [([(PId "b"); (PId "p"); (PId "g"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Id ("recv0", I)); (Id ("refl", I));
                              (Id ("c", I))]),
                         (Binder ("r",
                            (Match ([(R, (Id ("r", I)), None)], None,
                               [([(PConstr ("ex0", [(PId "a"); (PId "c")]))],
                                 (Some (MLet (
                                          (App
                                             [(Id ("recv1", I));
                                               (Id ("refl", I));
                                               (Id ("c", I))]),
                                          (Binder ("r",
                                             (Match (
                                                [(R, (Id ("r", I)), None)],
                                                None,
                                                [([(PConstr ("ex1",
                                                      [(PId "A"); (PId "c")]
                                                      ))
                                                    ],
                                                  (Some (MLet (
                                                           (App
                                                              [(Id ("recv0",
                                                                  I));
                                                                (Id ("refl",
                                                                   I));
                                                                (Id ("c", I))
                                                                ]),
                                                           (Binder ("r",
                                                              (Match (
                                                                 [(R,
                                                                   (Id ("r",
                                                                    I)),
                                                                   None)],
                                                                 None,
                                                                 [([(PConstr (
                                                                    "ex0",
                                                                    [(PId
                                                                    "pf");
                                                                    (PId "c")
                                                                    ]))],
                                                                   (Some (
                                                                   MLet (
                                                                    (App
                                                                    [(Id (
                                                                    "send0",
                                                                    I));
                                                                    (Id (
                                                                    "refl", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I));
                                                                    (Id ("b",
                                                                    I))]),
                                                                    (Binder (
                                                                    "c",
                                                                    (MLet (
                                                                    (App
                                                                    [(Id (
                                                                    "send1",
                                                                    I));
                                                                    (Id (
                                                                    "refl", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "rem", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "pow", I
                                                                    ));
                                                                    (Id ("g",
                                                                    I));
                                                                    (Id ("b",
                                                                    I))]);
                                                                    (Id ("p",
                                                                    I))])]),
                                                                    (Binder (
                                                                    "c",
                                                                    (MLet (
                                                                    (App
                                                                    [(Id (
                                                                    "send0",
                                                                    I));
                                                                    (Id (
                                                                    "refl", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I));
                                                                    (Id (
                                                                    "refl", I
                                                                    ))]),
                                                                    (Binder (
                                                                    "c",
                                                                    (App
                                                                    [(Id (
                                                                    "close",
                                                                    I));
                                                                    (Id ("c",
                                                                    I))])))))
                                                                    ))))))))))
                                                                   ]
                                                                 ))
                                                              ))
                                                           ))))
                                                  ]
                                                ))
                                             ))
                                          ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E; E; E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("b",
              (Pi (R, U, (Id ("nat", I)),
                 (Binder ("p",
                    (Pi (R, U, (Id ("nat", I)),
                       (Binder ("g",
                          (Pi (R, U,
                             (App
                                [(Id ("DH_hc", I)); (Id ("p", I));
                                  (Id ("g", I))]),
                             (Binder ("c", (IO (Id ("unit", I)))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E; E; E]}
  ]

-----------------------------------------

#[logical]
inductive eq_1‹s_269› (A_270 : Type‹s_269›) (m_271 : A_270):
  A_270 -> U
where
| refl_1 : (eq_1‹??_1› ?_1 m_271 m_271)

#[program]
inductive unit_2‹› : U where
| tt_2 : unit_2

#[program]
inductive bool_3‹› : U where
| true_3 : bool_3
| false_4 : bool_3

#[program]
inductive nat_4‹› : U where
| zero_5 : nat_4
| succ_6 (n_273 : nat_4) : nat_4

#[program]
inductive list_5‹s_274,t_275› (A_276 : Type‹s_274›): Type‹t_275›
where
| nil_7 : (list_5‹??_2,??_3› A_276)
| cons_8
    (hd_277 : A_276) (tl_278 : (list_5‹??_4,??_5› A_276))
    : (list_5‹??_6,??_7› A_276)

#[program]
inductive exists0_6‹s_279,r_280› (A_281 : Type‹s_279›) (B_282 : 
A_281 -> Type‹r_280›): L where
| ex0_9
    {m_284 : A_281} (n_285 : ((B_282) m_284))
    : (exists0_6‹??_8,??_9› A_281 B_282)

#[program]
inductive exists1_7‹s_286,r_287› (A_288 : Type‹s_286›) (B_289 : 
A_288 -> Type‹r_287›): L where
| ex1_10
    (m_291 : A_288) (n_292 : ((B_289) m_291))
    : (exists1_7‹??_10,??_11› A_288 B_289)

#[program]
def xor_1‹› : bool_3 -> bool_3 -o bool_3 :=
  function xor_295 : bool_3 -> bool_3 -o bool_3
  | true_3 true_3 => false_4
  | false_4 false_4 => false_4
  | _298 _299 => true_3

#[program]
def lte_2‹› : nat_4 -> nat_4 -> bool_3 :=
  function lte_302 : nat_4 -> nat_4 -> bool_3
  | zero_5 _305 => true_3
  | _306 zero_5 => false_4
  | (succ_6 x_307) (succ_6 y_308) => ((lte_302) x_307 y_308)

#[program]
def lt_3‹› : nat_4 -> nat_4 -> bool_3 :=
  function lt_311 : nat_4 -> nat_4 -> bool_3
  | x_314 y_315 => ((lte_2) (succ_6‹› x_314) y_315)

#[program]
def pred_4‹› : nat_4 -> nat_4 :=
  function pred_317 : nat_4 -> nat_4
  | zero_5 => zero_5
  | (succ_6 x_319) => x_319

#[program]
def add_5‹› : nat_4 -> nat_4 -> nat_4 :=
  function add_322 : nat_4 -> nat_4 -> nat_4
  | zero_5 y_325 => y_325
  | (succ_6 x_326) y_327 => (succ_6‹› ((add_322) x_326 y_327))

#[program]
def sub_6‹› : nat_4 -> nat_4 -> nat_4 :=
  function sub_330 : nat_4 -> nat_4 -> nat_4
  | x_333 zero_5 => x_333
  | x_334 (succ_6 y_335) => ((sub_330) ((pred_4) x_334) y_335)

#[program]
def mul_7‹› : nat_4 -> nat_4 -> nat_4 :=
  function mul_338 : nat_4 -> nat_4 -> nat_4
  | zero_5 _341 => zero_5
  | (succ_6 x_342) y_343 => ((add_5) y_343 ((mul_338) x_342 y_343))

#[program]
def div_8‹› : ∀ (x_344 : nat_4) -> ∀ (y_345 : nat_4) -> ?_5 :=
  function div_346 : ∀ (x_347 : nat_4) -> ∀ (y_348 : nat_4) -> ?_2
  | x_349 y_350 =>
    match ((lt_3) x_349 y_350) in ∀ (_351 : ?_3) -o ?_4 with
    | true_3 => zero_5
    | false_4 => (succ_6‹› ((div_346) ((sub_6) x_349 y_350) y_350))

#[program]
def rem_9‹› : ∀ (x_352 : nat_4) -> ∀ (y_353 : nat_4) -> ?_7 :=
  function rem_354 : ∀ (x_355 : nat_4) -> ∀ (y_356 : nat_4) -> ?_6
  | x_357 y_358 => ((sub_6) x_357 ((mul_7) ((div_8) x_357 y_358) y_358))

#[program]
def pow_10‹› : nat_4 -> nat_4 -> nat_4 :=
  function pow_361 : nat_4 -> nat_4 -> nat_4
  | _364 zero_5 => (succ_6‹› zero_5)
  | x_365 (succ_6 y_366) => ((mul_7) x_365 ((pow_361) x_365 y_366))

#[logical]
extern proto_11‹› : U

#[logical]
extern act0_12‹s_367› :
  bool_3 -> ∀ (A_369 : Type‹s_367›) -> A_369 -> proto_11 -> proto_11

#[logical]
extern act1_13‹s_372› :
  bool_3 -> ∀ (A_374 : Type‹s_372›) -> A_374 -> proto_11 -> proto_11

#[logical]
extern endp_14‹› : proto_11

#[logical]
extern ch_15‹› : bool_3 -> proto_11 -> L

#[program]
extern close_16‹› :
  ∀ {b_379 : bool_3} -> ((ch_15) b_379 endp_14) -> IO unit_2

#[program]
extern send0_17‹s_381› :
  ∀ {b1_382 : bool_3} ->
    ∀ {b2_383 : bool_3} ->
      ∀ {A_384 : Type‹s_381›} ->
        ∀ {B_385 : A_384 -> proto_11} ->
          ∀ {__387 :
            (eq_1‹??_12› ?_8 ((xor_1) b1_382 b2_383) false_4)} ->
            ((ch_15) b1_382 ((act0_12‹??_13›) b2_383 ?_9 B_385)) ->
              ∀ {x_389 : A_384} -o IO ((ch_15) b1_382 ((B_385) x_389))

#[program]
extern send1_18‹s_390› :
  ∀ {b1_391 : bool_3} ->
    ∀ {b2_392 : bool_3} ->
      ∀ {A_393 : Type‹s_390›} ->
        ∀ {B_394 : A_393 -> proto_11} ->
          ∀ {__396 :
            (eq_1‹??_14› ?_10 ((xor_1) b1_391 b2_392) false_4)} ->
            ((ch_15) b1_391 ((act1_13‹??_15›) b2_392 ?_11 B_394)) ->
              ∀ (x_398 : A_393) -o IO ((ch_15) b1_391 ((B_394) x_398))

#[program]
extern recv0_19‹s_399› :
  ∀ {b1_400 : bool_3} ->
    ∀ {b2_401 : bool_3} ->
      ∀ {A_402 : Type‹s_399›} ->
        ∀ {B_403 : A_402 -> proto_11} ->
          ∀ {__405 :
            (eq_1‹??_16› ?_12 ((xor_1) b1_400 b2_401) true_3)} ->
            ∀ (__406 :
              ((ch_15) b1_400 ((act0_12‹??_17›) b2_401 ?_13 B_403))) ->
              IO (exists0_6‹??_18,??_19›
                   ?_15
                   function _407 : ∀ (x_408 : A_402) -> ?_14
                   | x_409 => ((ch_15) b1_400 ((B_403) x_409)))

#[program]
extern recv1_20‹s_410› :
  ∀ {b1_411 : bool_3} ->
    ∀ {b2_412 : bool_3} ->
      ∀ {A_413 : Type‹s_410›} ->
        ∀ {B_414 : A_413 -> proto_11} ->
          ∀ {__416 :
            (eq_1‹??_20› ?_16 ((xor_1) b1_411 b2_412) true_3)} ->
            ∀ (__417 :
              ((ch_15) b1_411 ((act1_13‹??_21›) b2_412 ?_17 B_414))) ->
              IO (exists1_7‹??_22,??_23›
                   ?_19
                   function _418 : ∀ (x_419 : A_413) -> ?_18
                   | x_420 => ((ch_15) b1_411 ((B_414) x_420)))

#[program]
extern fork_21‹› :
  ∀ {P_421 : proto_11} ->
    ((ch_15) false_4 P_421) -o IO unit_2 -> IO ((ch_15) true_3 P_421)

#[logical]
def DH_22‹› : nat_4 -> nat_4 -> proto_11 :=
  function DH_426 : nat_4 -> nat_4 -> proto_11
  | p_429 g_430 =>
    ((act0_12‹??_31›)
      true_3 ?_33
      function _431 : ∀ (a_432 : nat_4) -> ?_20
      | a_433 =>
        ((act1_13‹??_30›)
          true_3 ?_32
          function _434 : ∀ (A_435 : nat_4) -> ?_21
          | A_436 =>
            ((act0_12‹??_29›)
              true_3 ?_31
              function _437 :
                ∀ (__438 :
                  (eq_1‹??_24›
                    ?_22 A_436 ((rem_9) ((pow_10) g_430 a_433) p_429))) ->
                  ?_23
              | _439 =>
                ((act0_12‹??_28›)
                  false_4 ?_30
                  function _440 : ∀ (b_441 : nat_4) -> ?_24
                  | b_442 =>
                    ((act1_13‹??_27›)
                      false_4 ?_29
                      function _443 : ∀ (B_444 : nat_4) -> ?_25
                      | B_445 =>
                        ((act0_12‹??_26›)
                          false_4 ?_28
                          function _446 :
                            ∀ (__447 :
                              (eq_1‹??_25›
                                ?_26 B_445
                                ((rem_9) ((pow_10) g_430 b_442) p_429))) ->
                              ?_27
                          | _448 => endp_14))))))

#[logical]
def DH_ch_23‹› : ∀ (p_449 : nat_4) -> ∀ (g_450 : nat_4) -> ?_35 :=
  function DH_ch_451 : ∀ (p_452 : nat_4) -> ∀ (g_453 : nat_4) -> ?_34
  | p_454 g_455 => ((ch_15) true_3 ((DH_22) p_454 g_455))

#[logical]
def DH_hc_24‹› : ∀ (p_456 : nat_4) -> ∀ (g_457 : nat_4) -> ?_37 :=
  function DH_hc_458 : ∀ (p_459 : nat_4) -> ∀ (g_460 : nat_4) -> ?_36
  | p_461 g_462 => ((ch_15) false_4 ((DH_22) p_461 g_462))

#[program]
def alice_25‹› :
  nat_4 ->
    ∀ (p_464 : nat_4) ->
      ∀ (g_465 : nat_4) -> ((DH_ch_23) p_464 g_465) -> IO unit_2
:=
  function alice_467 :
    nat_4 ->
      ∀ (p_469 : nat_4) ->
        ∀ (g_470 : nat_4) -> ((DH_ch_23) p_469 g_470) -> IO unit_2
  | a_472 p_473 g_474 c_475 =>
    let* c_476 :=
      ((send0_17‹??_33›)
        ?_43 ?_42 ?_41 ?_40 refl_1‹??_32› c_475 a_472)
    in
    let* c_477 :=
      ((send1_18‹??_35›)
        ?_49 ?_48 ?_47 ?_46 refl_1‹??_34› c_476
        ((rem_9) ((pow_10) g_474 a_472) p_473))
    in
    let* c_478 :=
      ((send0_17‹??_38›)
        ?_57 ?_56 ?_55 ?_54 refl_1‹??_36› c_477 refl_1‹??_37›)
    in
    let* r_479 :=
      ((recv0_19‹??_40›) ?_63 ?_62 ?_61 ?_60 refl_1‹??_39› c_478)
    in
    match r_479 in ∀ (_480 : ?_64) -o ?_65 with
    | (ex0_9 b_481 c_482) =>
      let* r_483 :=
        ((recv1_20‹??_42›) ?_71 ?_70 ?_69 ?_68 refl_1‹??_41› c_482)
      in
      match r_483 in ∀ (_484 : ?_72) -o ?_73 with
      | (ex1_10 B_485 c_486) =>
        let* r_487 :=
          ((recv0_19‹??_44›) ?_79 ?_78 ?_77 ?_76 refl_1‹??_43› c_486)
        in
        match r_487 in ∀ (_488 : ?_80) -o ?_81 with
        | (ex0_9 pf_489 c_490) => ((close_16) ?_82 c_490)

#[program]
def bob_26‹› :
  nat_4 ->
    ∀ (p_492 : nat_4) ->
      ∀ (g_493 : nat_4) -> ((DH_hc_24) p_492 g_493) -> IO unit_2
:=
  function bob_495 :
    nat_4 ->
      ∀ (p_497 : nat_4) ->
        ∀ (g_498 : nat_4) -> ((DH_hc_24) p_497 g_498) -> IO unit_2
  | b_500 p_501 g_502 c_503 =>
    let* r_504 :=
      ((recv0_19‹??_46›) ?_88 ?_87 ?_86 ?_85 refl_1‹??_45› c_503)
    in
    match r_504 in ∀ (_505 : ?_89) -o ?_90 with
    | (ex0_9 a_506 c_507) =>
      let* r_508 :=
        ((recv1_20‹??_48›) ?_96 ?_95 ?_94 ?_93 refl_1‹??_47› c_507)
      in
      match r_508 in ∀ (_509 : ?_97) -o ?_98 with
      | (ex1_10 A_510 c_511) =>
        let* r_512 :=
          ((recv0_19‹??_50›)
            ?_104 ?_103 ?_102 ?_101 refl_1‹??_49› c_511)
        in
        match r_512 in ∀ (_513 : ?_105) -o ?_106 with
        | (ex0_9 pf_514 c_515) =>
          let* c_516 :=
            ((send0_17‹??_52›)
              ?_112 ?_111 ?_110 ?_109 refl_1‹??_51› c_515 b_500)
          in
          let* c_517 :=
            ((send1_18‹??_54›)
              ?_118 ?_117 ?_116 ?_115 refl_1‹??_53› c_516
              ((rem_9) ((pow_10) g_502 b_500) p_501))
          in
          let* c_518 :=
            ((send0_17‹??_57›)
              ?_126 ?_125 ?_124 ?_123 refl_1‹??_55› c_517
              refl_1‹??_56›)
          in ((close_16) ?_127 c_518)

-----------------------------------------

#[logical]
inductive eq_1‹s_21079› (A_21080 : Type‹s_21079›) (m_21081 : A_21080):
  A_21080 -> U
where
| refl_1 : (eq_1‹s_21079› A_21080 m_21081 m_21081)

#[program]
inductive unit_2‹› : U where
| tt_2 : unit_2

#[program]
inductive bool_3‹› : U where
| true_3 : bool_3
| false_4 : bool_3

#[program]
inductive nat_4‹› : U where
| zero_5 : nat_4
| succ_6 (n_21083 : nat_4) : nat_4

#[program]
inductive list_5‹s_21084,t_21085› (A_21086 : Type‹s_21084›):
  Type‹t_21085›
where
| nil_7 : (list_5‹s_21084,t_21085› A_21086)
| cons_8
    (hd_21087 : A_21086) (tl_21088 : (list_5‹s_21084,??_5› A_21086))
    : (list_5‹s_21084,t_21085› A_21086)

#[program]
inductive exists0_6‹s_21089,r_21090› (A_21091 : Type‹s_21089›) (B_21092 : 
A_21091 -> Type‹r_21090›): L where
| ex0_9
    {m_21094 : A_21091} (n_21095 : ((B_21092) m_21094))
    : (exists0_6‹s_21089,r_21090› A_21091 B_21092)

#[program]
inductive exists1_7‹s_21096,r_21097› (A_21098 : Type‹s_21096›) (B_21099 : 
A_21098 -> Type‹r_21097›): L where
| ex1_10
    (m_21101 : A_21098) (n_21102 : ((B_21099) m_21101))
    : (exists1_7‹s_21096,r_21097› A_21098 B_21099)

#[program]
def xor_1‹› : bool_3 -> bool_3 -o bool_3 :=
  function xor_21105 : bool_3 -> bool_3 -o bool_3
  | true_3 true_3 => false_4
  | false_4 false_4 => false_4
  | _21108 _21109 => true_3

#[program]
def lte_2‹› : nat_4 -> nat_4 -> bool_3 :=
  function lte_21112 : nat_4 -> nat_4 -> bool_3
  | zero_5 _21115 => true_3
  | _21116 zero_5 => false_4
  | (succ_6 x_21117) (succ_6 y_21118) => ((lte_21112) x_21117 y_21118)

#[program]
def lt_3‹› : nat_4 -> nat_4 -> bool_3 :=
  function lt_21121 : nat_4 -> nat_4 -> bool_3
  | x_21124 y_21125 => ((lte_2) (succ_6‹› x_21124) y_21125)

#[program]
def pred_4‹› : nat_4 -> nat_4 :=
  function pred_21127 : nat_4 -> nat_4
  | zero_5 => zero_5
  | (succ_6 x_21129) => x_21129

#[program]
def add_5‹› : nat_4 -> nat_4 -> nat_4 :=
  function add_21132 : nat_4 -> nat_4 -> nat_4
  | zero_5 y_21135 => y_21135
  | (succ_6 x_21136) y_21137 => (succ_6‹› ((add_21132) x_21136 y_21137))

#[program]
def sub_6‹› : nat_4 -> nat_4 -> nat_4 :=
  function sub_21140 : nat_4 -> nat_4 -> nat_4
  | x_21143 zero_5 => x_21143
  | x_21144 (succ_6 y_21145) => ((sub_21140) ((pred_4) x_21144) y_21145)

#[program]
def mul_7‹› : nat_4 -> nat_4 -> nat_4 :=
  function mul_21148 : nat_4 -> nat_4 -> nat_4
  | zero_5 _21151 => zero_5
  | (succ_6 x_21152) y_21153 =>
    ((add_5) y_21153 ((mul_21148) x_21152 y_21153))

#[program]
def div_8‹› : nat_4 -> nat_4 -> nat_4 :=
  function div_21156 : nat_4 -> nat_4 -> nat_4
  | x_21159 y_21160 =>
    match ((lt_3) x_21159 y_21160) in bool_3 -o nat_4 with
    | true_3 => zero_5
    | false_4 =>
      (succ_6‹› ((div_21156) ((sub_6) x_21159 y_21160) y_21160))

#[program]
def rem_9‹› : nat_4 -> nat_4 -> nat_4 :=
  function rem_21164 : nat_4 -> nat_4 -> nat_4
  | x_21167 y_21168 =>
    ((sub_6) x_21167 ((mul_7) ((div_8) x_21167 y_21168) y_21168))

#[program]
def pow_10‹› : nat_4 -> nat_4 -> nat_4 :=
  function pow_21171 : nat_4 -> nat_4 -> nat_4
  | _21174 zero_5 => (succ_6‹› zero_5)
  | x_21175 (succ_6 y_21176) =>
    ((mul_7) x_21175 ((pow_21171) x_21175 y_21176))

#[logical]
extern proto_11‹› : U

#[logical]
extern act0_12‹s_21177› :
  bool_3 ->
    ∀ (A_21179 : Type‹s_21177›) -> A_21179 -> proto_11 -> proto_11

#[logical]
extern act1_13‹s_21182› :
  bool_3 ->
    ∀ (A_21184 : Type‹s_21182›) -> A_21184 -> proto_11 -> proto_11

#[logical]
extern endp_14‹› : proto_11

#[logical]
extern ch_15‹› : bool_3 -> proto_11 -> L

#[program]
extern close_16‹› :
  ∀ {b_21189 : bool_3} -> ((ch_15) b_21189 endp_14) -> IO unit_2

#[program]
extern send0_17‹s_21191› :
  ∀ {b1_21192 : bool_3} ->
    ∀ {b2_21193 : bool_3} ->
      ∀ {A_21194 : Type‹s_21191›} ->
        ∀ {B_21195 : A_21194 -> proto_11} ->
          {(eq_1‹U› bool_3 ((xor_1) b1_21192 b2_21193) false_4)} ->
            ((ch_15)
              b1_21192 ((act0_12‹s_21191›) b2_21193 A_21194 B_21195)) ->
              ∀ {x_21199 : A_21194} -o
                IO ((ch_15) b1_21192 ((B_21195) x_21199))

#[program]
extern send1_18‹s_21200› :
  ∀ {b1_21201 : bool_3} ->
    ∀ {b2_21202 : bool_3} ->
      ∀ {A_21203 : Type‹s_21200›} ->
        ∀ {B_21204 : A_21203 -> proto_11} ->
          {(eq_1‹U› bool_3 ((xor_1) b1_21201 b2_21202) false_4)} ->
            ((ch_15)
              b1_21201 ((act1_13‹s_21200›) b2_21202 A_21203 B_21204)) ->
              ∀ (x_21208 : A_21203) -o
                IO ((ch_15) b1_21201 ((B_21204) x_21208))

#[program]
extern recv0_19‹s_21209› :
  ∀ {b1_21210 : bool_3} ->
    ∀ {b2_21211 : bool_3} ->
      ∀ {A_21212 : Type‹s_21209›} ->
        ∀ {B_21213 : A_21212 -> proto_11} ->
          {(eq_1‹U› bool_3 ((xor_1) b1_21210 b2_21211) true_3)} ->
            ((ch_15)
              b1_21210 ((act0_12‹s_21209›) b2_21211 A_21212 B_21213)) ->
              IO (exists0_6‹s_21209,L›
                   A_21212
                   function _21217 : A_21212 -> L
                   | x_21219 => ((ch_15) b1_21210 ((B_21213) x_21219)))

#[program]
extern recv1_20‹s_21220› :
  ∀ {b1_21221 : bool_3} ->
    ∀ {b2_21222 : bool_3} ->
      ∀ {A_21223 : Type‹s_21220›} ->
        ∀ {B_21224 : A_21223 -> proto_11} ->
          {(eq_1‹U› bool_3 ((xor_1) b1_21221 b2_21222) true_3)} ->
            ((ch_15)
              b1_21221 ((act1_13‹s_21220›) b2_21222 A_21223 B_21224)) ->
              IO (exists1_7‹s_21220,L›
                   A_21223
                   function _21228 : A_21223 -> L
                   | x_21230 => ((ch_15) b1_21221 ((B_21224) x_21230)))

#[program]
extern fork_21‹› :
  ∀ {P_21231 : proto_11} ->
    ((ch_15) false_4 P_21231) -o IO unit_2 -> IO ((ch_15) true_3 P_21231)

#[logical]
def DH_22‹› : nat_4 -> nat_4 -> proto_11 :=
  function DH_21236 : nat_4 -> nat_4 -> proto_11
  | p_21239 g_21240 =>
    ((act0_12‹U›)
      true_3 nat_4
      function _21241 : nat_4 -> proto_11
      | a_21243 =>
        ((act1_13‹U›)
          true_3 nat_4
          function _21244 : nat_4 -> proto_11
          | A_21246 =>
            ((act0_12‹U›)
              true_3
              (eq_1‹U›
                nat_4 A_21246 ((rem_9) ((pow_10) g_21240 a_21243) p_21239))
              function _21247 :
                (eq_1‹U›
                  nat_4 A_21246 ((rem_9) ((pow_10) g_21240 a_21243) p_21239)) ->
                  proto_11
              | _21249 =>
                ((act0_12‹U›)
                  false_4 nat_4
                  function _21250 : nat_4 -> proto_11
                  | b_21252 =>
                    ((act1_13‹U›)
                      false_4 nat_4
                      function _21253 : nat_4 -> proto_11
                      | B_21255 =>
                        ((act0_12‹U›)
                          false_4
                          (eq_1‹U›
                            nat_4 B_21255
                            ((rem_9) ((pow_10) g_21240 b_21252) p_21239))
                          function _21256 :
                            (eq_1‹U›
                              nat_4 B_21255
                              ((rem_9) ((pow_10) g_21240 b_21252) p_21239)) ->
                              proto_11
                          | _21258 => endp_14))))))

#[logical]
def DH_ch_23‹› : nat_4 -> nat_4 -> L :=
  function DH_ch_21261 : nat_4 -> nat_4 -> L
  | p_21264 g_21265 => ((ch_15) true_3 ((DH_22) p_21264 g_21265))

#[logical]
def DH_hc_24‹› : nat_4 -> nat_4 -> L :=
  function DH_hc_21268 : nat_4 -> nat_4 -> L
  | p_21271 g_21272 => ((ch_15) false_4 ((DH_22) p_21271 g_21272))

#[program]
def alice_25‹› :
  nat_4 ->
    ∀ (p_21274 : nat_4) ->
      ∀ (g_21275 : nat_4) -> ((DH_ch_23) p_21274 g_21275) -> IO unit_2
:=
  function alice_21277 :
    nat_4 ->
      ∀ (p_21279 : nat_4) ->
        ∀ (g_21280 : nat_4) -> ((DH_ch_23) p_21279 g_21280) -> IO unit_2
  | a_21282 p_21283 g_21284 c_21285 =>
    let* c_21286 :=
      ((send0_17‹U›)
        true_3 true_3 nat_4
        function _21287 : nat_4 -> proto_11
        | a_21289 =>
          ((act1_13‹U›)
            true_3 nat_4
            function _21290 : nat_4 -> proto_11
            | A_21292 =>
              ((act0_12‹U›)
                true_3
                (eq_1‹U›
                  nat_4 A_21292 ((rem_9) ((pow_10) g_21284 a_21289) p_21283))
                function _21293 :
                  (eq_1‹U›
                    nat_4 A_21292
                    ((rem_9) ((pow_10) g_21284 a_21289) p_21283)) -> proto_11
                | _21295 =>
                  ((act0_12‹U›)
                    false_4 nat_4
                    function _21296 : nat_4 -> proto_11
                    | b_21298 =>
                      ((act1_13‹U›)
                        false_4 nat_4
                        function _21299 : nat_4 -> proto_11
                        | B_21301 =>
                          ((act0_12‹U›)
                            false_4
                            (eq_1‹U›
                              nat_4 B_21301
                              ((rem_9) ((pow_10) g_21284 b_21298) p_21283))
                            function _21302 :
                              (eq_1‹U›
                                nat_4 B_21301
                                ((rem_9) ((pow_10) g_21284 b_21298) p_21283)) ->
                                proto_11
                            | _21304 => endp_14)))))
        refl_1‹U› c_21285 a_21282)
    in
    let* c_21305 :=
      ((send1_18‹U›)
        true_3 true_3 nat_4
        function _21306 : nat_4 -> proto_11
        | A_21308 =>
          ((act0_12‹U›)
            true_3
            (eq_1‹U›
              nat_4 A_21308 ((rem_9) ((pow_10) g_21284 a_21282) p_21283))
            function _21309 :
              (eq_1‹U›
                nat_4 A_21308 ((rem_9) ((pow_10) g_21284 a_21282) p_21283)) ->
                proto_11
            | _21311 =>
              ((act0_12‹U›)
                false_4 nat_4
                function _21312 : nat_4 -> proto_11
                | b_21314 =>
                  ((act1_13‹U›)
                    false_4 nat_4
                    function _21315 : nat_4 -> proto_11
                    | B_21317 =>
                      ((act0_12‹U›)
                        false_4
                        (eq_1‹U›
                          nat_4 B_21317
                          ((rem_9) ((pow_10) g_21284 b_21314) p_21283))
                        function _21318 :
                          (eq_1‹U›
                            nat_4 B_21317
                            ((rem_9) ((pow_10) g_21284 b_21314) p_21283)) ->
                            proto_11
                        | _21320 => endp_14))))
        refl_1‹U› c_21286 ((rem_9) ((pow_10) g_21284 a_21282) p_21283))
    in
    let* c_21321 :=
      ((send0_17‹U›)
        true_3 true_3
        (eq_1‹U›
          nat_4 ((rem_9) ((pow_10) g_21284 a_21282) p_21283)
          ((rem_9) ((pow_10) g_21284 a_21282) p_21283))
        function _21322 :
          (eq_1‹U›
            nat_4 ((rem_9) ((pow_10) g_21284 a_21282) p_21283)
            ((rem_9) ((pow_10) g_21284 a_21282) p_21283)) -> proto_11
        | _21324 =>
          ((act0_12‹U›)
            false_4 nat_4
            function _21325 : nat_4 -> proto_11
            | b_21327 =>
              ((act1_13‹U›)
                false_4 nat_4
                function _21328 : nat_4 -> proto_11
                | B_21330 =>
                  ((act0_12‹U›)
                    false_4
                    (eq_1‹U›
                      nat_4 B_21330
                      ((rem_9) ((pow_10) g_21284 b_21327) p_21283))
                    function _21331 :
                      (eq_1‹U›
                        nat_4 B_21330
                        ((rem_9) ((pow_10) g_21284 b_21327) p_21283)) ->
                        proto_11
                    | _21333 => endp_14)))
        refl_1‹U› c_21305 refl_1‹U›)
    in
    let* r_21334 :=
      ((recv0_19‹U›)
        true_3 false_4 nat_4
        function _21335 : nat_4 -> proto_11
        | b_21337 =>
          ((act1_13‹U›)
            false_4 nat_4
            function _21338 : nat_4 -> proto_11
            | B_21340 =>
              ((act0_12‹U›)
                false_4
                (eq_1‹U›
                  nat_4 B_21340 ((rem_9) ((pow_10) g_21284 b_21337) p_21283))
                function _21341 :
                  (eq_1‹U›
                    nat_4 B_21340
                    ((rem_9) ((pow_10) g_21284 b_21337) p_21283)) -> proto_11
                | _21343 => endp_14))
        refl_1‹U› c_21321)
    in
    match r_21334 in
      (exists0_6‹U,L›
        nat_4
        function _21345 : nat_4 -> L
        | x_21347 =>
          ((ch_15)
            true_3
            ((function _21348 : nat_4 -> proto_11
              | b_21350 =>
                ((act1_13‹U›)
                  false_4 nat_4
                  function _21351 : nat_4 -> proto_11
                  | B_21353 =>
                    ((act0_12‹U›)
                      false_4
                      (eq_1‹U›
                        nat_4 B_21353
                        ((rem_9) ((pow_10) g_21284 b_21350) p_21283))
                      function _21354 :
                        (eq_1‹U›
                          nat_4 B_21353
                          ((rem_9) ((pow_10) g_21284 b_21350) p_21283)) ->
                          proto_11
                      | _21356 => endp_14)))
              x_21347))) -o
        IO unit_2
    with
    | (ex0_9 b_21357 c_21358) =>
      let* r_21359 :=
        ((recv1_20‹U›)
          true_3 false_4 nat_4
          function _21360 : nat_4 -> proto_11
          | B_21362 =>
            ((act0_12‹U›)
              false_4
              (eq_1‹U›
                nat_4 B_21362 ((rem_9) ((pow_10) g_21284 b_21357) p_21283))
              function _21363 :
                (eq_1‹U›
                  nat_4 B_21362 ((rem_9) ((pow_10) g_21284 b_21357) p_21283)) ->
                  proto_11
              | _21365 => endp_14)
          refl_1‹U› c_21358)
      in
      match r_21359 in
        (exists1_7‹U,L›
          nat_4
          function _21367 : nat_4 -> L
          | x_21369 =>
            ((ch_15)
              true_3
              ((function _21370 : nat_4 -> proto_11
                | B_21372 =>
                  ((act0_12‹U›)
                    false_4
                    (eq_1‹U›
                      nat_4 B_21372
                      ((rem_9) ((pow_10) g_21284 b_21357) p_21283))
                    function _21373 :
                      (eq_1‹U›
                        nat_4 B_21372
                        ((rem_9) ((pow_10) g_21284 b_21357) p_21283)) ->
                        proto_11
                    | _21375 => endp_14))
                x_21369))) -o
          IO unit_2
      with
      | (ex1_10 B_21376 c_21377) =>
        let* r_21378 :=
          ((recv0_19‹U›)
            true_3 false_4
            (eq_1‹U›
              nat_4 B_21376 ((rem_9) ((pow_10) g_21284 b_21357) p_21283))
            function _21379 :
              (eq_1‹U›
                nat_4 B_21376 ((rem_9) ((pow_10) g_21284 b_21357) p_21283)) ->
                proto_11
            | _21381 => endp_14 refl_1‹U› c_21377)
        in
        match r_21378 in
          (exists0_6‹U,L›
            (eq_1‹U›
              nat_4 B_21376 ((rem_9) ((pow_10) g_21284 b_21357) p_21283))
            function _21383 :
              (eq_1‹U›
                nat_4 B_21376 ((rem_9) ((pow_10) g_21284 b_21357) p_21283)) ->
                L
            | x_21385 =>
              ((ch_15)
                true_3
                ((function _21386 :
                    (eq_1‹U›
                      nat_4 B_21376
                      ((rem_9) ((pow_10) g_21284 b_21357) p_21283)) ->
                      proto_11
                  | _21388 => endp_14) x_21385))) -o
            IO unit_2
        with
        | (ex0_9 pf_21389 c_21390) => ((close_16) true_3 c_21390)

#[program]
def bob_26‹› :
  nat_4 ->
    ∀ (p_21392 : nat_4) ->
      ∀ (g_21393 : nat_4) -> ((DH_hc_24) p_21392 g_21393) -> IO unit_2
:=
  function bob_21395 :
    nat_4 ->
      ∀ (p_21397 : nat_4) ->
        ∀ (g_21398 : nat_4) -> ((DH_hc_24) p_21397 g_21398) -> IO unit_2
  | b_21400 p_21401 g_21402 c_21403 =>
    let* r_21404 :=
      ((recv0_19‹U›)
        false_4 true_3 nat_4
        function _21405 : nat_4 -> proto_11
        | a_21407 =>
          ((act1_13‹U›)
            true_3 nat_4
            function _21408 : nat_4 -> proto_11
            | A_21410 =>
              ((act0_12‹U›)
                true_3
                (eq_1‹U›
                  nat_4 A_21410 ((rem_9) ((pow_10) g_21402 a_21407) p_21401))
                function _21411 :
                  (eq_1‹U›
                    nat_4 A_21410
                    ((rem_9) ((pow_10) g_21402 a_21407) p_21401)) -> proto_11
                | _21413 =>
                  ((act0_12‹U›)
                    false_4 nat_4
                    function _21414 : nat_4 -> proto_11
                    | b_21416 =>
                      ((act1_13‹U›)
                        false_4 nat_4
                        function _21417 : nat_4 -> proto_11
                        | B_21419 =>
                          ((act0_12‹U›)
                            false_4
                            (eq_1‹U›
                              nat_4 B_21419
                              ((rem_9) ((pow_10) g_21402 b_21416) p_21401))
                            function _21420 :
                              (eq_1‹U›
                                nat_4 B_21419
                                ((rem_9) ((pow_10) g_21402 b_21416) p_21401)) ->
                                proto_11
                            | _21422 => endp_14)))))
        refl_1‹U› c_21403)
    in
    match r_21404 in
      (exists0_6‹U,L›
        nat_4
        function _21424 : nat_4 -> L
        | x_21426 =>
          ((ch_15)
            false_4
            ((function _21427 : nat_4 -> proto_11
              | a_21429 =>
                ((act1_13‹U›)
                  true_3 nat_4
                  function _21430 : nat_4 -> proto_11
                  | A_21432 =>
                    ((act0_12‹U›)
                      true_3
                      (eq_1‹U›
                        nat_4 A_21432
                        ((rem_9) ((pow_10) g_21402 a_21429) p_21401))
                      function _21433 :
                        (eq_1‹U›
                          nat_4 A_21432
                          ((rem_9) ((pow_10) g_21402 a_21429) p_21401)) ->
                          proto_11
                      | _21435 =>
                        ((act0_12‹U›)
                          false_4 nat_4
                          function _21436 : nat_4 -> proto_11
                          | b_21438 =>
                            ((act1_13‹U›)
                              false_4 nat_4
                              function _21439 : nat_4 -> proto_11
                              | B_21441 =>
                                ((act0_12‹U›)
                                  false_4
                                  (eq_1‹U›
                                    nat_4 B_21441
                                    ((rem_9)
                                      ((pow_10) g_21402 b_21438) p_21401))
                                  function _21442 :
                                    (eq_1‹U›
                                      nat_4 B_21441
                                      ((rem_9)
                                        ((pow_10) g_21402 b_21438) p_21401)) ->
                                      proto_11
                                  | _21444 => endp_14))))))
              x_21426))) -o
        IO unit_2
    with
    | (ex0_9 a_21445 c_21446) =>
      let* r_21447 :=
        ((recv1_20‹U›)
          false_4 true_3 nat_4
          function _21448 : nat_4 -> proto_11
          | A_21450 =>
            ((act0_12‹U›)
              true_3
              (eq_1‹U›
                nat_4 A_21450 ((rem_9) ((pow_10) g_21402 a_21445) p_21401))
              function _21451 :
                (eq_1‹U›
                  nat_4 A_21450 ((rem_9) ((pow_10) g_21402 a_21445) p_21401)) ->
                  proto_11
              | _21453 =>
                ((act0_12‹U›)
                  false_4 nat_4
                  function _21454 : nat_4 -> proto_11
                  | b_21456 =>
                    ((act1_13‹U›)
                      false_4 nat_4
                      function _21457 : nat_4 -> proto_11
                      | B_21459 =>
                        ((act0_12‹U›)
                          false_4
                          (eq_1‹U›
                            nat_4 B_21459
                            ((rem_9) ((pow_10) g_21402 b_21456) p_21401))
                          function _21460 :
                            (eq_1‹U›
                              nat_4 B_21459
                              ((rem_9) ((pow_10) g_21402 b_21456) p_21401)) ->
                              proto_11
                          | _21462 => endp_14))))
          refl_1‹U› c_21446)
      in
      match r_21447 in
        (exists1_7‹U,L›
          nat_4
          function _21464 : nat_4 -> L
          | x_21466 =>
            ((ch_15)
              false_4
              ((function _21467 : nat_4 -> proto_11
                | A_21469 =>
                  ((act0_12‹U›)
                    true_3
                    (eq_1‹U›
                      nat_4 A_21469
                      ((rem_9) ((pow_10) g_21402 a_21445) p_21401))
                    function _21470 :
                      (eq_1‹U›
                        nat_4 A_21469
                        ((rem_9) ((pow_10) g_21402 a_21445) p_21401)) ->
                        proto_11
                    | _21472 =>
                      ((act0_12‹U›)
                        false_4 nat_4
                        function _21473 : nat_4 -> proto_11
                        | b_21475 =>
                          ((act1_13‹U›)
                            false_4 nat_4
                            function _21476 : nat_4 -> proto_11
                            | B_21478 =>
                              ((act0_12‹U›)
                                false_4
                                (eq_1‹U›
                                  nat_4 B_21478
                                  ((rem_9)
                                    ((pow_10) g_21402 b_21475) p_21401))
                                function _21479 :
                                  (eq_1‹U›
                                    nat_4 B_21478
                                    ((rem_9)
                                      ((pow_10) g_21402 b_21475) p_21401)) ->
                                    proto_11
                                | _21481 => endp_14)))))
                x_21466))) -o
          IO unit_2
      with
      | (ex1_10 A_21482 c_21483) =>
        let* r_21484 :=
          ((recv0_19‹U›)
            false_4 true_3
            (eq_1‹U›
              nat_4 A_21482 ((rem_9) ((pow_10) g_21402 a_21445) p_21401))
            function _21485 :
              (eq_1‹U›
                nat_4 A_21482 ((rem_9) ((pow_10) g_21402 a_21445) p_21401)) ->
                proto_11
            | _21487 =>
              ((act0_12‹U›)
                false_4 nat_4
                function _21488 : nat_4 -> proto_11
                | b_21490 =>
                  ((act1_13‹U›)
                    false_4 nat_4
                    function _21491 : nat_4 -> proto_11
                    | B_21493 =>
                      ((act0_12‹U›)
                        false_4
                        (eq_1‹U›
                          nat_4 B_21493
                          ((rem_9) ((pow_10) g_21402 b_21490) p_21401))
                        function _21494 :
                          (eq_1‹U›
                            nat_4 B_21493
                            ((rem_9) ((pow_10) g_21402 b_21490) p_21401)) ->
                            proto_11
                        | _21496 => endp_14)))
            refl_1‹U› c_21483)
        in
        match r_21484 in
          (exists0_6‹U,L›
            (eq_1‹U›
              nat_4 A_21482 ((rem_9) ((pow_10) g_21402 a_21445) p_21401))
            function _21498 :
              (eq_1‹U›
                nat_4 A_21482 ((rem_9) ((pow_10) g_21402 a_21445) p_21401)) ->
                L
            | x_21500 =>
              ((ch_15)
                false_4
                ((function _21501 :
                    (eq_1‹U›
                      nat_4 A_21482
                      ((rem_9) ((pow_10) g_21402 a_21445) p_21401)) ->
                      proto_11
                  | _21503 =>
                    ((act0_12‹U›)
                      false_4 nat_4
                      function _21504 : nat_4 -> proto_11
                      | b_21506 =>
                        ((act1_13‹U›)
                          false_4 nat_4
                          function _21507 : nat_4 -> proto_11
                          | B_21509 =>
                            ((act0_12‹U›)
                              false_4
                              (eq_1‹U›
                                nat_4 B_21509
                                ((rem_9) ((pow_10) g_21402 b_21506) p_21401))
                              function _21510 :
                                (eq_1‹U›
                                  nat_4 B_21509
                                  ((rem_9)
                                    ((pow_10) g_21402 b_21506) p_21401)) ->
                                  proto_11
                              | _21512 => endp_14))))
                  x_21500))) -o
            IO unit_2
        with
        | (ex0_9 pf_21513 c_21514) =>
          let* c_21515 :=
            ((send0_17‹U›)
              false_4 false_4 nat_4
              function _21516 : nat_4 -> proto_11
              | b_21518 =>
                ((act1_13‹U›)
                  false_4 nat_4
                  function _21519 : nat_4 -> proto_11
                  | B_21521 =>
                    ((act0_12‹U›)
                      false_4
                      (eq_1‹U›
                        nat_4 B_21521
                        ((rem_9) ((pow_10) g_21402 b_21518) p_21401))
                      function _21522 :
                        (eq_1‹U›
                          nat_4 B_21521
                          ((rem_9) ((pow_10) g_21402 b_21518) p_21401)) ->
                          proto_11
                      | _21524 => endp_14))
              refl_1‹U› c_21514 b_21400)
          in
          let* c_21525 :=
            ((send1_18‹U›)
              false_4 false_4 nat_4
              function _21526 : nat_4 -> proto_11
              | B_21528 =>
                ((act0_12‹U›)
                  false_4
                  (eq_1‹U›
                    nat_4 B_21528
                    ((rem_9) ((pow_10) g_21402 b_21400) p_21401))
                  function _21529 :
                    (eq_1‹U›
                      nat_4 B_21528
                      ((rem_9) ((pow_10) g_21402 b_21400) p_21401)) ->
                      proto_11
                  | _21531 => endp_14)
              refl_1‹U› c_21515
              ((rem_9) ((pow_10) g_21402 b_21400) p_21401))
          in
          let* c_21532 :=
            ((send0_17‹U›)
              false_4 false_4
              (eq_1‹U›
                nat_4 ((rem_9) ((pow_10) g_21402 b_21400) p_21401)
                ((rem_9) ((pow_10) g_21402 b_21400) p_21401))
              function _21533 :
                (eq_1‹U›
                  nat_4 ((rem_9) ((pow_10) g_21402 b_21400) p_21401)
                  ((rem_9) ((pow_10) g_21402 b_21400) p_21401)) -> proto_11
              | _21535 => endp_14 refl_1‹U› c_21525 refl_1‹U›)
          in ((close_16) false_4 c_21532)

-----------------------------------------

#[logical]
inductive eqU_9 where
| reflU_12 of layout[]

#[logical]
inductive eqL_8 where
| reflL_11 of layout[]

#[program]
inductive unit_2 where
| tt_2 of layout[]

#[program]
inductive bool_3 where
| true_3 of layout[]
| false_4 of layout[]

#[program]
inductive nat_4 where
| zero_5 of layout[]
| succ_6 of layout[R]

#[program]
inductive listUU_13 where
| nilUU_19 of layout[]

#[program]
inductive listUL_12 where
| nilUL_17 of layout[]

#[program]
inductive listLU_11 where
| nilLU_15 of layout[]

#[program]
inductive listLL_10 where
| nilLL_13 of layout[]

#[program]
inductive exists0UU_17 where
| ex0UU_24 of layout[N, R]

#[program]
inductive exists0UL_16 where
| ex0UL_23 of layout[N, R]

#[program]
inductive exists0LU_15 where
| ex0LU_22 of layout[N, R]

#[program]
inductive exists0LL_14 where
| ex0LL_21 of layout[N, R]

#[program]
inductive exists1UU_21 where
| ex1UU_28 of layout[R, R]

#[program]
inductive exists1UL_20 where
| ex1UL_27 of layout[R, R]

#[program]
inductive exists1LU_19 where
| ex1LU_26 of layout[R, R]

#[program]
inductive exists1LL_18 where
| ex1LL_25 of layout[R, R]

#[program]
def xor_1 :=
  fun xor_55801 (__55802, __55803) =>
    match __55802 with
    | true_3  =>
      match __55803 with
      | true_3  => false_4 | false_4  => true_3
      end
    | false_4  =>
      match __55803 with
      | true_3  => true_3 | false_4  => false_4
      end
    end

#[program]
def lte_2 :=
  fun lte_55804 (__55805, __55806) =>
    match __55805 with
    | zero_5  => true_3
    | succ_6 n_55807 =>
      match __55806 with
      | zero_5  => false_4 | succ_6 n_55808 => ((lte_55804) n_55807 n_55808)
      end
    end

#[program]
def lt_3 :=
  fun lt_55809 (x_55810, y_55811) => ((lte_2) (succ_6 x_55810) y_55811)

#[program]
def pred_4 :=
  fun pred_55812 (__55813) =>
    match __55813 with
    | zero_5  => zero_5 | succ_6 n_55814 => n_55814
    end

#[program]
def add_5 :=
  fun add_55815 (__55816, __55817) =>
    match __55816 with
    | zero_5  => __55817
    | succ_6 n_55818 => (succ_6 ((add_55815) n_55818 __55817))
    end

#[program]
def sub_6 :=
  fun sub_55819 (__55820, __55821) =>
    match __55821 with
    | zero_5  => __55820
    | succ_6 n_55822 => ((sub_55819) ((pred_4) __55820) n_55822)
    end

#[program]
def mul_7 :=
  fun mul_55823 (__55824, __55825) =>
    match __55824 with
    | zero_5  => zero_5
    | succ_6 n_55826 => ((add_5) __55825 ((mul_55823) n_55826 __55825))
    end

#[program]
def div_8 :=
  fun div_55827 (x_55828, y_55829) =>
    match ((lt_3) x_55828 y_55829) with
    | true_3  => zero_5
    | false_4  => (succ_6 ((div_55827) ((sub_6) x_55828 y_55829) y_55829))
    end

#[program]
def rem_9 :=
  fun rem_55830 (x_55831, y_55832) =>
    ((sub_6) x_55831 ((mul_7) ((div_8) x_55831 y_55832) y_55832))

#[program]
def pow_10 :=
  fun pow_55833 (__55834, __55835) =>
    match __55835 with
    | zero_5  => (succ_6 zero_5)
    | succ_6 n_55836 => ((mul_7) __55834 ((pow_55833) __55834 n_55836))
    end

#[logical]
extern proto_11

#[logical]
extern act0U_28

#[logical]
extern act0L_27

#[logical]
extern act1U_30

#[logical]
extern act1L_29

#[logical]
extern endp_14

#[logical]
extern ch_15

#[program]
extern close_16

#[program]
extern send0U_32

#[program]
extern send0L_31

#[program]
extern send1U_34

#[program]
extern send1L_33

#[program]
extern recv0U_36

#[program]
extern recv0L_35

#[program]
extern recv1U_38

#[program]
extern recv1L_37

#[program]
extern fork_21

#[logical]
def DH_22 := NULL

#[logical]
def DH_ch_23 := NULL

#[logical]
def DH_hc_24 := NULL

#[program]
def alice_25 :=
  fun alice_55837 (a_55838, p_55839, g_55840, c_55841) =>
    let* c_55842 := ((send0U_32) NULL NULL NULL NULL NULL c_55841 NULL) in
    let* c_55843 :=
      ((send1U_34)
        NULL NULL NULL NULL NULL c_55842
        ((rem_9) ((pow_10) g_55840 a_55838) p_55839))
    in
    let* c_55844 := ((send0U_32) NULL NULL NULL NULL NULL c_55843 NULL) in
    let* r_55845 := ((recv0U_36) NULL NULL NULL NULL NULL c_55844) in
    match r_55845 with
    | ex0UL_23 m_55846 n_55847 =>
      let* r_55848 := ((recv1U_38) NULL NULL NULL NULL NULL n_55847) in
      match r_55848 with
      | ex1UL_27 m_55849 n_55850 =>
        let* r_55851 := ((recv0U_36) NULL NULL NULL NULL NULL n_55850) in
        match r_55851 with
        | ex0UL_23 m_55852 n_55853 => ((close_16) NULL n_55853)
        end
      end
    end

#[program]
def bob_26 :=
  fun bob_55854 (b_55855, p_55856, g_55857, c_55858) =>
    let* r_55859 := ((recv0U_36) NULL NULL NULL NULL NULL c_55858) in
    match r_55859 with
    | ex0UL_23 m_55860 n_55861 =>
      let* r_55862 := ((recv1U_38) NULL NULL NULL NULL NULL n_55861) in
      match r_55862 with
      | ex1UL_27 m_55863 n_55864 =>
        let* r_55865 := ((recv0U_36) NULL NULL NULL NULL NULL n_55864) in
        match r_55865 with
        | ex0UL_23 m_55866 n_55867 =>
          let* c_55868 := ((send0U_32) NULL NULL NULL NULL NULL n_55867 NULL)
          in
          let* c_55869 :=
            ((send1U_34)
              NULL NULL NULL NULL NULL c_55868
              ((rem_9) ((pow_10) g_55857 b_55855) p_55856))
          in
          let* c_55870 := ((send0U_32) NULL NULL NULL NULL NULL c_55869 NULL)
          in ((close_16) NULL c_55870)
        end
      end
    end

-----------------------------------------

#[logical]
inductive eqU_9 where
| reflU_12 of layout[]

#[logical]
inductive eqL_8 where
| reflL_11 of layout[]

#[program]
inductive unit_2 where
| tt_2 of layout[]

#[program]
inductive bool_3 where
| true_3 of layout[]
| false_4 of layout[]

#[program]
inductive nat_4 where
| zero_5 of layout[]
| succ_6 of layout[R]

#[program]
inductive listUU_13 where
| nilUU_19 of layout[]

#[program]
inductive listUL_12 where
| nilUL_17 of layout[]

#[program]
inductive listLU_11 where
| nilLU_15 of layout[]

#[program]
inductive listLL_10 where
| nilLL_13 of layout[]

#[program]
inductive exists0UU_17 where
| ex0UU_24 of layout[N, R]

#[program]
inductive exists0UL_16 where
| ex0UL_23 of layout[N, R]

#[program]
inductive exists0LU_15 where
| ex0LU_22 of layout[N, R]

#[program]
inductive exists0LL_14 where
| ex0LL_21 of layout[N, R]

#[program]
inductive exists1UU_21 where
| ex1UU_28 of layout[R, R]

#[program]
inductive exists1UL_20 where
| ex1UL_27 of layout[R, R]

#[program]
inductive exists1LU_19 where
| ex1LU_26 of layout[R, R]

#[program]
inductive exists1LL_18 where
| ex1LL_25 of layout[R, R]

#[program]
def xor_1 :=
  fun xor_55941 (__55942, __55943) =>
    match __55942 with
    | true_3  =>
      match __55943 with
      | true_3  => false_4 | false_4  => true_3
      end
    | false_4  =>
      match __55943 with
      | true_3  => true_3 | false_4  => false_4
      end
    end

#[program]
def lte_2 :=
  fun lte_55944 (__55945, __55946) =>
    match __55945 with
    | zero_5  => true_3
    | succ_6 n_55947 =>
      match __55946 with
      | zero_5  => false_4 | succ_6 n_55948 => ((lte_55944) n_55947 n_55948)
      end
    end

#[program]
def lt_3 :=
  fun lt_55949 (x_55950, y_55951) => ((lte_2) (succ_6 x_55950) y_55951)

#[program]
def pred_4 :=
  fun pred_55952 (__55953) =>
    match __55953 with
    | zero_5  => zero_5 | succ_6 n_55954 => n_55954
    end

#[program]
def add_5 :=
  fun add_55955 (__55956, __55957) =>
    match __55956 with
    | zero_5  => __55957
    | succ_6 n_55958 => (succ_6 ((add_55955) n_55958 __55957))
    end

#[program]
def sub_6 :=
  fun sub_55959 (__55960, __55961) =>
    match __55961 with
    | zero_5  => __55960
    | succ_6 n_55962 => ((sub_55959) ((pred_4) __55960) n_55962)
    end

#[program]
def mul_7 :=
  fun mul_55963 (__55964, __55965) =>
    match __55964 with
    | zero_5  => zero_5
    | succ_6 n_55966 => ((add_5) __55965 ((mul_55963) n_55966 __55965))
    end

#[program]
def div_8 :=
  fun div_55967 (x_55968, y_55969) =>
    match ((lt_3) x_55968 y_55969) with
    | true_3  => zero_5
    | false_4  => (succ_6 ((div_55967) ((sub_6) x_55968 y_55969) y_55969))
    end

#[program]
def rem_9 :=
  fun rem_55970 (x_55971, y_55972) =>
    ((sub_6) x_55971 ((mul_7) ((div_8) x_55971 y_55972) y_55972))

#[program]
def pow_10 :=
  fun pow_55973 (__55974, __55975) =>
    match __55975 with
    | zero_5  => (succ_6 zero_5)
    | succ_6 n_55976 => ((mul_7) __55974 ((pow_55973) __55974 n_55976))
    end

#[logical]
extern proto_11

#[logical]
extern act0U_28

#[logical]
extern act0L_27

#[logical]
extern act1U_30

#[logical]
extern act1L_29

#[logical]
extern endp_14

#[logical]
extern ch_15

#[program]
extern close_16

#[program]
extern send0U_32

#[program]
extern send0L_31

#[program]
extern send1U_34

#[program]
extern send1L_33

#[program]
extern recv0U_36

#[program]
extern recv0L_35

#[program]
extern recv1U_38

#[program]
extern recv1L_37

#[program]
extern fork_21

#[logical]
def DH_22 := NULL

#[logical]
def DH_ch_23 := NULL

#[logical]
def DH_hc_24 := NULL

#[program]
def alice_25 :=
  fun alice_55977 (a_55978, p_55979, g_55980, c_55981) =>
    let* c_55982 := ((send0U_32) NULL NULL NULL NULL NULL c_55981 NULL) in
    let* c_55983 :=
      ((send1U_34)
        NULL NULL NULL NULL NULL c_55982
        ((rem_9) ((pow_10) g_55980 a_55978) p_55979))
    in
    let* c_55984 := ((send0U_32) NULL NULL NULL NULL NULL c_55983 NULL) in
    let* r_55985 := ((recv0U_36) NULL NULL NULL NULL NULL c_55984) in
    match r_55985 with
    | ex0UL_23 m_55986 n_55987 =>
      let* r_55988 := ((recv1U_38) NULL NULL NULL NULL NULL n_55987) in
      match r_55988 with
      | ex1UL_27 m_55989 n_55990 =>
        let* r_55991 := ((recv0U_36) NULL NULL NULL NULL NULL n_55990) in
        match r_55991 with
        | ex0UL_23 m_55992 n_55993 => ((close_16) NULL n_55993)
        end
      end
    end

#[program]
def bob_26 :=
  fun bob_55994 (b_55995, p_55996, g_55997, c_55998) =>
    let* r_55999 := ((recv0U_36) NULL NULL NULL NULL NULL c_55998) in
    match r_55999 with
    | ex0UL_23 m_56000 n_56001 =>
      let* r_56002 := ((recv1U_38) NULL NULL NULL NULL NULL n_56001) in
      match r_56002 with
      | ex1UL_27 m_56003 n_56004 =>
        let* r_56005 := ((recv0U_36) NULL NULL NULL NULL NULL n_56004) in
        match r_56005 with
        | ex0UL_23 m_56006 n_56007 =>
          let* c_56008 := ((send0U_32) NULL NULL NULL NULL NULL n_56007 NULL)
          in
          let* c_56009 :=
            ((send1U_34)
              NULL NULL NULL NULL NULL c_56008
              ((rem_9) ((pow_10) g_55997 b_55995) p_55996))
          in
          let* c_56010 := ((send0U_32) NULL NULL NULL NULL NULL c_56009 NULL)
          in ((close_16) NULL c_56010)
        end
      end
    end

-----------------------------------------

