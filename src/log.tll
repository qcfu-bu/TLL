[Inductive {name = "unit"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)), [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
      ));
   view = []};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("true", (TBase (Id ("bool", I))), []));
             (DConstr ("false", (TBase (Id ("bool", I))), []))]))
       ));
    view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("pred", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id ("A", I)),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id ("A", I)),
                          (Binder ("_", (TBase (Type U)))))),
                       [(DConstr ("refl",
                           (TBase
                              (App
                                 [(Id ("eq", I)); (Id ("m", I));
                                   (Id ("m", I))])),
                           []))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type U)),
                       [(DConstr ("ex",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (N,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("pf",
                                       (TBase
                                          (App
                                             [(Id ("exists", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("A", I)),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DConstr ("just",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("m",
                           (TBase (App [(Id ("sing", I)); (Id ("m", I))]))))
                        )),
                     [E]))
                   ]))
             ))
          ))
       ));
    view = [I]};
  Inductive {name = "list"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type U)),
                 [(DConstr ("nil",
                     (TBase (App [(Id ("list", I)); (Id ("A", I))])), 
                     []));
                   (DConstr ("cons",
                      (TBind (R, (Id ("A", I)),
                         (Binder ("hd",
                            (TBind (R,
                               (App [(Id ("list", I)); (Id ("A", I))]),
                               (Binder ("tl",
                                  (TBase
                                     (App [(Id ("list", I)); (Id ("A", I))]))
                                  ))
                               ))
                            ))
                         )),
                      [E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Inductive {name = "vec"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("nat", I)), (Binder ("_", (TBase (Type U))))
                    )),
                 [(DConstr ("vnil",
                     (TBase
                        (App
                           [(Id ("vec", I)); (Id ("A", I)); (Id ("zero", I))])),
                     []));
                   (DConstr ("vcons",
                      (TBind (N, (Id ("nat", I)),
                         (Binder ("n",
                            (TBind (R, (Id ("A", I)),
                               (Binder ("hd",
                                  (TBind (R,
                                     (App
                                        [(Inst ("vec", [(SId "s")], I));
                                          (Id ("A", I)); (Id ("n", I))]),
                                     (Binder ("tl",
                                        (TBase
                                           (App
                                              [(Id ("vec", I));
                                                (Id ("A", I));
                                                (App
                                                   [(Id ("succ", I));
                                                     (Id ("n", I))])
                                                ]))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         )),
                      [I; E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Definition {name = "rwl"; relv = R;
    body =
    (Binder (["s"; "r"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("A", I)),
                    (Binder ("m",
                       (Pi (N, U, (Id ("A", I)),
                          (Binder ("n",
                             (Pi (N, U,
                                (Pi (R, U, (Id ("A", I)),
                                   (Binder ("_", (Type (SId "r")))))),
                                (Binder ("B",
                                   (Pi (N, U,
                                      (App
                                         [(Id ("eq", I)); (Id ("m", I));
                                           (Id ("n", I))]),
                                      (Binder ("_",
                                         (Pi (R, U,
                                            (App
                                               [(Id ("B", I)); (Id ("m", I))]),
                                            (Binder ("_",
                                               (App
                                                  [(Id ("B", I));
                                                    (Id ("n", I))])
                                               ))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "rwl"),
              [([(PId "A"); (PId "m"); (PId "n"); (PId "B"); (PId "refl");
                  (PId "x")],
                (Some (Id ("x", I))))]
              )),
           [I; I; I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("A", I)),
                 (Binder ("m",
                    (Pi (N, U, (Id ("A", I)),
                       (Binder ("n",
                          (Pi (N, U,
                             (Pi (R, U, (Id ("A", I)),
                                (Binder ("_", (Type (SId "r")))))),
                             (Binder ("B",
                                (Pi (N, U,
                                   (App
                                      [(Id ("eq", I)); (Id ("m", I));
                                        (Id ("n", I))]),
                                   (Binder ("_",
                                      (Pi (R, U,
                                         (App [(Id ("B", I)); (Id ("m", I))]),
                                         (Binder ("_",
                                            (App
                                               [(Id ("B", I)); (Id ("n", I))])
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; I; E]};
  Definition {name = "rwr"; relv = R;
    body =
    (Binder (["s"; "r"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("A", I)),
                    (Binder ("m",
                       (Pi (N, U, (Id ("A", I)),
                          (Binder ("n",
                             (Pi (N, U,
                                (Pi (R, U, (Id ("A", I)),
                                   (Binder ("_", (Type (SId "r")))))),
                                (Binder ("B",
                                   (Pi (N, U,
                                      (App
                                         [(Id ("eq", I)); (Id ("m", I));
                                           (Id ("n", I))]),
                                      (Binder ("_",
                                         (Pi (R, U,
                                            (App
                                               [(Id ("B", I)); (Id ("n", I))]),
                                            (Binder ("_",
                                               (App
                                                  [(Id ("B", I));
                                                    (Id ("m", I))])
                                               ))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "rwr"),
              [([(PId "A"); (PId "m"); (PId "n"); (PId "B"); (PId "refl");
                  (PId "x")],
                (Some (Id ("x", I))))]
              )),
           [I; I; I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("A", I)),
                 (Binder ("m",
                    (Pi (N, U, (Id ("A", I)),
                       (Binder ("n",
                          (Pi (N, U,
                             (Pi (R, U, (Id ("A", I)),
                                (Binder ("_", (Type (SId "r")))))),
                             (Binder ("B",
                                (Pi (N, U,
                                   (App
                                      [(Id ("eq", I)); (Id ("m", I));
                                        (Id ("n", I))]),
                                   (Binder ("_",
                                      (Pi (R, U,
                                         (App [(Id ("B", I)); (Id ("n", I))]),
                                         (Binder ("_",
                                            (App
                                               [(Id ("B", I)); (Id ("m", I))])
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; I; E]};
  Definition {name = "congr"; relv = N;
    body =
    (Binder (["s"; "r"; "t"],
       ((Fun (
           (Pi (R, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (Type (SId "r")),
                    (Binder ("B",
                       (Pi (R, U, (Id ("A", I)),
                          (Binder ("m",
                             (Pi (R, U, (Id ("A", I)),
                                (Binder ("n",
                                   (Pi (R, U,
                                      (Pi (R, (SId "t"), (Id ("A", I)),
                                         (Binder ("_", (Id ("B", I)))))),
                                      (Binder ("f",
                                         (Pi (R, U,
                                            (App
                                               [(Id ("eq", I));
                                                 (Id ("m", I)); (Id ("n", I))
                                                 ]),
                                            (Binder ("_",
                                               (App
                                                  [(Id ("eq", I));
                                                    (App
                                                       [(Id ("f", I));
                                                         (Id ("m", I))]);
                                                    (App
                                                       [(Id ("f", I));
                                                         (Id ("n", I))])
                                                    ])
                                               ))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "congr"),
              [([(PId "A"); (PId "B"); (PId "m"); (PId "n"); (PId "f");
                  (PId "refl")],
                (Some (Id ("refl", I))))]
              )),
           [I; I; I; I; E])),
        (Pi (R, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U, (Type (SId "r")),
                 (Binder ("B",
                    (Pi (R, U, (Id ("A", I)),
                       (Binder ("m",
                          (Pi (R, U, (Id ("A", I)),
                             (Binder ("n",
                                (Pi (R, U,
                                   (Pi (R, (SId "t"), (Id ("A", I)),
                                      (Binder ("_", (Id ("B", I)))))),
                                   (Binder ("f",
                                      (Pi (R, U,
                                         (App
                                            [(Id ("eq", I)); (Id ("m", I));
                                              (Id ("n", I))]),
                                         (Binder ("_",
                                            (App
                                               [(Id ("eq", I));
                                                 (App
                                                    [(Id ("f", I));
                                                      (Id ("m", I))]);
                                                 (App
                                                    [(Id ("f", I));
                                                      (Id ("n", I))])
                                                 ])
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; I; I; E]};
  Definition {name = "hd_vec"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("_", (Id ("A", I))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "hd_vec"),
              [([(PId "A"); (PId "n"); (PId "vnil")], None);
                ([(PId "A"); (PId "n");
                   (PConstr ("vcons", [(PId "_"); (PId "hd"); (PId "_")]))],
                 (Some (Id ("hd", I))))
                ]
              )),
           [I; I])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("_", (Id ("A", I))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Definition {name = "hd_vec2"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("xs", IMeta))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "hd_vec2"),
              [([(PId "A"); (PId "n"); (PId "xs")],
                (Some (Match (
                         [(N, IMeta, (Some ("n0", IMeta)));
                           (R, (Id ("xs", I)),
                            (Some ("_",
                                   (App
                                      [(Id ("vec", I)); (Id ("A", I));
                                        (App
                                           [(Id ("succ", I)); (Id ("n0", I))])
                                        ]))))
                           ],
                         None,
                         [([(PId "_"); (PId "vnil")], None);
                           ([(PId "_");
                              (PConstr ("vcons",
                                 [(PId "_"); (PId "hd"); (PId "_")]))
                              ],
                            (Some (Id ("hd", I))))
                           ]
                         ))))
                ]
              )),
           [I; I; E])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("xs", IMeta))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; E]};
  Definition {name = "hd_vec3"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("xs", IMeta))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "hd_vec3"),
              [([(PId "A"); (PId "n"); (PId "xs")],
                (Some (Match ([(R, (Id ("xs", I)), None)], None,
                         [([(PId "vnil")], None);
                           ([(PConstr ("vcons",
                                [(PId "_"); (PId "hd"); (PId "_")]))
                              ],
                            (Some (Id ("hd", I))))
                           ]
                         ))))
                ]
              )),
           [I; I; E])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("xs", IMeta))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; E]};
  Definition {name = "vlength"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I)); (Id ("n", I))]),
                          (Binder ("_",
                             (App
                                [(Id ("exists", I));
                                  (Fun (
                                     (Pi (R, U, IMeta, (Binder ("x", IMeta))
                                        )),
                                     (Binder (None,
                                        [([(PId "x")],
                                          (Some (App
                                                   [(Id ("eq", I));
                                                     (Id ("x", I));
                                                     (Id ("n", I))])))
                                          ]
                                        )),
                                     []))
                                  ])
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "vlength"),
              [([(PId "A"); (PId "n"); (PId "vnil")],
                (Some (App
                         [(Id ("ex", I)); (Id ("zero", I)); (Id ("refl", I))])));
                ([(PId "A"); (PId "n");
                   (PConstr ("vcons", [(PId "_"); (PId "_"); (PId "tl")]))],
                 (Some (Match (
                          [(R, (App [(Id ("vlength", I)); (Id ("tl", I))]),
                            None)],
                          None,
                          [([(PConstr ("ex", [(PId "n"); (PId "pf")]))],
                            (Some (App
                                     [(Id ("ex", I));
                                       (App [(Id ("succ", I)); (Id ("n", I))]);
                                       (App
                                          [(Id ("congr", I));
                                            (Fun (
                                               (Pi (R, U, IMeta,
                                                  (Binder ("x", IMeta)))),
                                               (Binder (None,
                                                  [([(PId "x")],
                                                    (Some (App
                                                             [(Id ("succ", I
                                                                 ));
                                                               (Id ("x", I))])))
                                                    ]
                                                  )),
                                               []));
                                            (Id ("pf", I))])
                                       ])))
                            ]
                          ))))
                ]
              )),
           [I; I])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App [(Id ("vec", I)); (Id ("A", I)); (Id ("n", I))]),
                       (Binder ("_",
                          (App
                             [(Id ("exists", I));
                               (Fun (
                                  (Pi (R, U, IMeta, (Binder ("x", IMeta)))),
                                  (Binder (None,
                                     [([(PId "x")],
                                       (Some (App
                                                [(Id ("eq", I));
                                                  (Id ("x", I));
                                                  (Id ("n", I))])))
                                       ]
                                     )),
                                  []))
                               ])
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Definition {name = "xs"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("vcons", I)); (Id ("zero", I)); (Id ("vnil", I))]), IMeta)
       ));
    view = []};
  Definition {name = "x"; relv = R;
    body = (Binder ([], ((App [(Id ("hd_vec", I)); (Id ("xs", I))]), IMeta)));
    view = []};
  Definition {name = "y"; relv = R;
    body =
    (Binder ([], ((App [(Id ("hd_vec2", I)); (Id ("xs", I))]), IMeta)));
    view = []};
  Definition {name = "z"; relv = R;
    body =
    (Binder ([], ((App [(Id ("hd_vec3", I)); (Id ("xs", I))]), IMeta)));
    view = []}
  ]

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_182 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_183› (A_184 : Type‹s_183›) (m_185 : A_184):
  A_184 -> U
where
| refl_6 : (eq_4‹??_1› ?_1 m_185 m_185)

#[program]
inductive exists_5‹s_187,r_188› (A_189 : Type‹s_187›) (B_190 : 
A_189 -> Type‹r_188›): U where
| ex_7
    (m_192 : A_189) {pf_193 : ((B_190) m_192)}
    : (exists_5‹??_2,??_3› A_189 B_190)

#[program]
inductive sing_6‹s_194› (A_195 : Type‹s_194›):
  A_195 -> Type‹s_194›
where
| just_8 (m_197 : A_195) : (sing_6‹??_4› ?_2 m_197)

#[program]
inductive list_7‹s_198› (A_199 : Type‹s_198›): U where
| nil_9 : (list_7‹??_5› A_199)
| cons_10
    (hd_200 : A_199) (tl_201 : (list_7‹??_6› A_199))
    : (list_7‹??_7› A_199)

#[program]
inductive vec_8‹s_202› (A_203 : Type‹s_202›): nat_3 -> U where
| vnil_11 : (vec_8‹??_8› A_203 zero_4)
| vcons_12
    {n_205 : nat_3} (hd_206 : A_203)
    (tl_207 : (vec_8‹s_202› A_203 n_205))
    : (vec_8‹??_9› A_203 (succ_5‹› n_205))

#[program]
def rwl_1‹s_208,r_209› :
  ∀ {A_210 : Type‹s_208›} ->
    ∀ {m_211 : A_210} ->
      ∀ {n_212 : A_210} ->
        ∀ {B_213 : A_210 -> Type‹r_209›} ->
          {(eq_4‹??_11› ?_4 m_211 n_212)} ->
            ((B_213) m_211) -> ((B_213) n_212)
:=
  function rwl_217 :
    ∀ {A_218 : Type‹s_208›} ->
      ∀ {m_219 : A_218} ->
        ∀ {n_220 : A_218} ->
          ∀ {B_221 : A_218 -> Type‹r_209›} ->
            {(eq_4‹??_10› ?_3 m_219 n_220)} ->
              ((B_221) m_219) -> ((B_221) n_220)
  | A_225 m_226 n_227 B_228 refl_6 x_229 => x_229

#[program]
def rwr_2‹s_230,r_231› :
  ∀ {A_232 : Type‹s_230›} ->
    ∀ {m_233 : A_232} ->
      ∀ {n_234 : A_232} ->
        ∀ {B_235 : A_232 -> Type‹r_231›} ->
          {(eq_4‹??_13› ?_6 m_233 n_234)} ->
            ((B_235) n_234) -> ((B_235) m_233)
:=
  function rwr_239 :
    ∀ {A_240 : Type‹s_230›} ->
      ∀ {m_241 : A_240} ->
        ∀ {n_242 : A_240} ->
          ∀ {B_243 : A_240 -> Type‹r_231›} ->
            {(eq_4‹??_12› ?_5 m_241 n_242)} ->
              ((B_243) n_242) -> ((B_243) m_241)
  | A_247 m_248 n_249 B_250 refl_6 x_251 => x_251

#[logical]
def congr_3‹s_252,r_253,t_254› :
  ∀ (A_255 : Type‹s_252›) ->
    ∀ (B_256 : Type‹r_253›) ->
      ∀ (m_257 : A_255) ->
        ∀ (n_258 : A_255) ->
          ∀ (f_259 : forall‹t_254›(__260 : A_255), B_256) ->
            ∀ (__261 : (eq_4‹??_17› ?_11 m_257 n_258)) ->
              (eq_4‹??_18› ?_12 ((f_259) m_257) ((f_259) n_258))
:=
  function congr_262 :
    ∀ (A_263 : Type‹s_252›) ->
      ∀ (B_264 : Type‹r_253›) ->
        ∀ (m_265 : A_263) ->
          ∀ (n_266 : A_263) ->
            ∀ (f_267 : forall‹t_254›(__268 : A_263), B_264) ->
              ∀ (__269 : (eq_4‹??_14› ?_7 m_265 n_266)) ->
                (eq_4‹??_15› ?_8 ((f_267) m_265) ((f_267) n_266))
  | A_270 B_271 m_272 n_273 f_274 refl_6 => refl_6‹??_16›

#[program]
def hd_vec_4‹› :
  ∀ {A_275 : U} ->
    ∀ {n_276 : nat_3} ->
      (vec_8‹??_20› A_275 (succ_5‹› n_276)) -> A_275
:=
  function hd_vec_278 :
    ∀ {A_279 : U} ->
      ∀ {n_280 : nat_3} ->
        (vec_8‹??_19› A_279 (succ_5‹› n_280)) -> A_279
  | A_282 n_283 vnil_11 =>
  | A_284 n_285 (vcons_12 _286 hd_287 _288) => hd_287

#[program]
def hd_vec2_5‹› :
  ∀ {A_289 : U} ->
    ∀ {n_290 : nat_3} ->
      ∀ (xs_291 : (vec_8‹??_23› A_289 (succ_5‹› n_290))) -> ?_17
:=
  function hd_vec2_292 :
    ∀ {A_293 : U} ->
      ∀ {n_294 : nat_3} ->
        ∀ (xs_295 : (vec_8‹??_21› A_293 (succ_5‹› n_294))) -> ?_13
  | A_296 n_297 xs_298 =>
    match ?_14, xs_298 in
      ∀ {n0_299 : ?_15} -o
        ∀ (__300 : (vec_8‹??_22› A_296 (succ_5‹› n0_299))) -o ?_16
    with
    | _301, vnil_11 =>
    | _302, (vcons_12 _303 hd_304 _305) => hd_304

#[program]
def hd_vec3_6‹› :
  ∀ {A_306 : U} ->
    ∀ {n_307 : nat_3} ->
      ∀ (xs_308 : (vec_8‹??_25› A_306 (succ_5‹› n_307))) -> ?_21
:=
  function hd_vec3_309 :
    ∀ {A_310 : U} ->
      ∀ {n_311 : nat_3} ->
        ∀ (xs_312 : (vec_8‹??_24› A_310 (succ_5‹› n_311))) -> ?_18
  | A_313 n_314 xs_315 =>
    match xs_315 in ∀ (_316 : ?_19) -o ?_20 with
    | vnil_11 =>
    | (vcons_12 _317 hd_318 _319) => hd_318

#[program]
def vlength_7‹› :
  ∀ {A_320 : U} ->
    ∀ {n_321 : nat_3} ->
      ∀ (__322 : (vec_8‹??_38› A_320 n_321)) ->
        (exists_5‹??_40,??_41›
          ?_45
          function _323 : ∀ (x_324 : ?_42) -> ?_43
          | x_325 => (eq_4‹??_39› ?_44 x_325 n_321))
:=
  function vlength_326 :
    ∀ {A_327 : U} ->
      ∀ {n_328 : nat_3} ->
        ∀ (__329 : (vec_8‹??_26› A_327 n_328)) ->
          (exists_5‹??_28,??_29›
            ?_25
            function _330 : ∀ (x_331 : ?_22) -> ?_23
            | x_332 => (eq_4‹??_27› ?_24 x_332 n_328))
  | A_333 n_334 vnil_11 => (ex_7‹??_31,??_32› zero_4 refl_6‹??_30›)
  | A_335 n_336 (vcons_12 _337 _338 tl_339) =>
    match ((vlength_326) ?_31 ?_30 tl_339) in ∀ (_340 : ?_32) -o ?_33 with
    | (ex_7 n_341 pf_342) =>
      (ex_7‹??_36,??_37›
        (succ_5‹› n_341)
        ((congr_3‹??_33,??_34,??_35›)
          ?_39 ?_38 ?_37 ?_36
          function _343 : ∀ (x_344 : ?_34) -> ?_35
          | x_345 => (succ_5‹› x_345) pf_342))

#[program]
def xs_8‹› : ?_49 := (vcons_12‹??_43› ?_47 zero_4 vnil_11‹??_42›)

#[program]
def x_9‹› : ?_52 := ((hd_vec_4) ?_51 ?_50 xs_8)

#[program]
def y_10‹› : ?_55 := ((hd_vec2_5) ?_54 ?_53 xs_8)

#[program]
def z_11‹› : ?_58 := ((hd_vec3_6) ?_57 ?_56 xs_8)

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_3155 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_3156› (A_3157 : Type‹s_3156›) (m_3158 : A_3157):
  A_3157 -> U
where
| refl_6 : (eq_4‹s_3156› A_3157 m_3158 m_3158)

#[program]
inductive exists_5‹s_3160,r_3161› (A_3162 : Type‹s_3160›) (B_3163 : 
A_3162 -> Type‹r_3161›): U where
| ex_7
    (m_3165 : A_3162) {pf_3166 : ((B_3163) m_3165)}
    : (exists_5‹s_3160,r_3161› A_3162 B_3163)

#[program]
inductive sing_6‹s_3167› (A_3168 : Type‹s_3167›):
  A_3168 -> Type‹s_3167›
where
| just_8 (m_3170 : A_3168) : (sing_6‹s_3167› A_3168 m_3170)

#[program]
inductive list_7‹s_3171› (A_3172 : Type‹s_3171›): U where
| nil_9 : (list_7‹s_3171› A_3172)
| cons_10
    (hd_3173 : A_3172) (tl_3174 : (list_7‹s_3171› A_3172))
    : (list_7‹s_3171› A_3172)

#[program]
inductive vec_8‹s_3175› (A_3176 : Type‹s_3175›): nat_3 -> U where
| vnil_11 : (vec_8‹s_3175› A_3176 zero_4)
| vcons_12
    {n_3178 : nat_3} (hd_3179 : A_3176)
    (tl_3180 : (vec_8‹s_3175› A_3176 n_3178))
    : (vec_8‹s_3175› A_3176 (succ_5‹› n_3178))

#[program]
def rwl_1‹s_3181,r_3182› :
  ∀ {A_3183 : Type‹s_3181›} ->
    ∀ {m_3184 : A_3183} ->
      ∀ {n_3185 : A_3183} ->
        ∀ {B_3186 : A_3183 -> Type‹r_3182›} ->
          {(eq_4‹s_3181› A_3183 m_3184 n_3185)} ->
            ((B_3186) m_3184) -> ((B_3186) n_3185)
:=
  function rwl_3190 :
    ∀ {A_3191 : Type‹s_3181›} ->
      ∀ {m_3192 : A_3191} ->
        ∀ {n_3193 : A_3191} ->
          ∀ {B_3194 : A_3191 -> Type‹r_3182›} ->
            {(eq_4‹s_3181› A_3191 m_3192 n_3193)} ->
              ((B_3194) m_3192) -> ((B_3194) n_3193)
  | A_3198 m_3199 n_3200 B_3201 refl_6 x_3202 => x_3202

#[program]
def rwr_2‹s_3203,r_3204› :
  ∀ {A_3205 : Type‹s_3203›} ->
    ∀ {m_3206 : A_3205} ->
      ∀ {n_3207 : A_3205} ->
        ∀ {B_3208 : A_3205 -> Type‹r_3204›} ->
          {(eq_4‹s_3203› A_3205 m_3206 n_3207)} ->
            ((B_3208) n_3207) -> ((B_3208) m_3206)
:=
  function rwr_3212 :
    ∀ {A_3213 : Type‹s_3203›} ->
      ∀ {m_3214 : A_3213} ->
        ∀ {n_3215 : A_3213} ->
          ∀ {B_3216 : A_3213 -> Type‹r_3204›} ->
            {(eq_4‹s_3203› A_3213 m_3214 n_3215)} ->
              ((B_3216) n_3215) -> ((B_3216) m_3214)
  | A_3220 m_3221 n_3222 B_3223 refl_6 x_3224 => x_3224

#[logical]
def congr_3‹s_3225,r_3226,t_3227› :
  ∀ (A_3228 : Type‹s_3225›) ->
    ∀ (B_3229 : Type‹r_3226›) ->
      ∀ (m_3230 : A_3228) ->
        ∀ (n_3231 : A_3228) ->
          ∀ (f_3232 : forall‹t_3227›(__3233 : A_3228), B_3229) ->
            (eq_4‹s_3225› A_3228 m_3230 n_3231) ->
              (eq_4‹r_3226› B_3229 ((f_3232) m_3230) ((f_3232) n_3231))
:=
  function congr_3235 :
    ∀ (A_3236 : Type‹s_3225›) ->
      ∀ (B_3237 : Type‹r_3226›) ->
        ∀ (m_3238 : A_3236) ->
          ∀ (n_3239 : A_3236) ->
            ∀ (f_3240 : forall‹t_3227›(__3241 : A_3236), B_3237) ->
              (eq_4‹s_3225› A_3236 m_3238 n_3239) ->
                (eq_4‹r_3226› B_3237 ((f_3240) m_3238) ((f_3240) n_3239))
  | A_3243 B_3244 m_3245 n_3246 f_3247 refl_6 => refl_6‹r_3226›

#[program]
def hd_vec_4‹› :
  ∀ {A_3248 : U} ->
    ∀ {n_3249 : nat_3} ->
      (vec_8‹U› A_3248 (succ_5‹› n_3249)) -> A_3248
:=
  function hd_vec_3251 :
    ∀ {A_3252 : U} ->
      ∀ {n_3253 : nat_3} ->
        (vec_8‹U› A_3252 (succ_5‹› n_3253)) -> A_3252
  | A_3255 n_3256 vnil_11 =>
  | A_3257 n_3258 (vcons_12 _3259 hd_3260 _3261) => hd_3260

#[program]
def hd_vec2_5‹› :
  ∀ {A_3262 : U} ->
    ∀ {n_3263 : nat_3} ->
      (vec_8‹U› A_3262 (succ_5‹› n_3263)) -> A_3262
:=
  function hd_vec2_3265 :
    ∀ {A_3266 : U} ->
      ∀ {n_3267 : nat_3} ->
        (vec_8‹U› A_3266 (succ_5‹› n_3267)) -> A_3266
  | A_3269 n_3270 xs_3271 =>
    match n_3270, xs_3271 in
      ∀ {n0_3272 : nat_3} -o
        (vec_8‹U› A_3269 (succ_5‹› n0_3272)) -o A_3269
    with
    | _3274, vnil_11 =>
    | _3275, (vcons_12 _3276 hd_3277 _3278) => hd_3277

#[program]
def hd_vec3_6‹› :
  ∀ {A_3279 : U} ->
    ∀ {n_3280 : nat_3} ->
      (vec_8‹U› A_3279 (succ_5‹› n_3280)) -> A_3279
:=
  function hd_vec3_3282 :
    ∀ {A_3283 : U} ->
      ∀ {n_3284 : nat_3} ->
        (vec_8‹U› A_3283 (succ_5‹› n_3284)) -> A_3283
  | A_3286 n_3287 xs_3288 =>
    match xs_3288 in (vec_8‹U› A_3286 (succ_5‹› n_3287)) -o A_3286
    with
    | vnil_11 =>
    | (vcons_12 _3290 hd_3291 _3292) => hd_3291

#[program]
def vlength_7‹› :
  ∀ {A_3293 : U} ->
    ∀ {n_3294 : nat_3} ->
      (vec_8‹U› A_3293 n_3294) ->
        (exists_5‹U,U›
          nat_3
          function _3296 : nat_3 -> U
          | x_3298 => (eq_4‹U› nat_3 x_3298 n_3294))
:=
  function vlength_3299 :
    ∀ {A_3300 : U} ->
      ∀ {n_3301 : nat_3} ->
        (vec_8‹U› A_3300 n_3301) ->
          (exists_5‹U,U›
            nat_3
            function _3303 : nat_3 -> U
            | x_3305 => (eq_4‹U› nat_3 x_3305 n_3301))
  | A_3306 n_3307 vnil_11 => (ex_7‹U,U› zero_4 refl_6‹U›)
  | A_3308 n_3309 (vcons_12 _3310 _3311 tl_3312) =>
    match ((vlength_3299) A_3308 _3310 tl_3312) in
      (exists_5‹U,U›
        nat_3
        function _3314 : nat_3 -> U
        | x_3316 => (eq_4‹U› nat_3 x_3316 _3310)) -o
        (exists_5‹U,U›
          nat_3
          function _3317 : nat_3 -> U
          | x_3319 => (eq_4‹U› nat_3 x_3319 (succ_5‹› _3310)))
    with
    | (ex_7 n_3320 pf_3321) =>
      (ex_7‹U,U›
        (succ_5‹› n_3320)
        ((congr_3‹U,U,U›)
          nat_3 nat_3 n_3320 _3310
          function _3322 : nat_3 -> nat_3
          | x_3324 => (succ_5‹› x_3324) pf_3321))

#[program]
def xs_8‹› : (vec_8‹U› nat_3 (succ_5‹› zero_4)) :=
  (vcons_12‹U› zero_4 zero_4 vnil_11‹U›)

#[program]
def x_9‹› : nat_3 := ((hd_vec_4) nat_3 zero_4 xs_8)

#[program]
def y_10‹› : nat_3 := ((hd_vec2_5) nat_3 zero_4 xs_8)

#[program]
def z_11‹› : nat_3 := ((hd_vec3_6) nat_3 zero_4 xs_8)

-----------------------------------------

  warning - pruned constructor exLL_15 trans12.check_dconstrs
  warning - pruned constructor exLU_16 trans12.check_dconstrs
  warning - pruned constructor consL_22 trans12.check_dconstrs
  warning - pruned constructor vconsL_26 trans12.check_dconstrs
inductive unit_1 where
| tt_1 of layout[]

inductive bool_2 where
| true_2 of layout[] | false_3 of layout[]

inductive nat_3 where
| zero_4 of layout[] | succ_5 of layout[R]

inductive eqU_10 where
| reflU_14 of layout[]

inductive eqL_9 where
| reflL_13 of layout[]

inductive existsUU_14 where
| exUU_18 of layout[R, N]

inductive existsUL_13 where
| exUL_17 of layout[R, N]

inductive existsLU_12 where


inductive existsLL_11 where


inductive singU_16 where
| justU_20 of layout[R]

inductive singL_15 where
| justL_19 of layout[R]

inductive listU_18 where
| nilU_23 of layout[] | consU_24 of layout[R, R]

inductive listL_17 where
| nilL_21 of layout[]

inductive vecU_20 where
| vnilU_27 of layout[] | vconsU_28 of layout[N, R, R]

inductive vecL_19 where
| vnilL_25 of layout[]

def rwlUU_15 :=
  fun rwl_8246 (A_8247, m_8248, n_8249, B_8250, __8251, __8252) =>
    match {NULL} with
    | reflU_14  => __8252
    end

def rwlUL_14 :=
  fun rwl_8253 (A_8254, m_8255, n_8256, B_8257, __8258, __8259) =>
    match {NULL} with
    | reflU_14  => __8259
    end

def rwlLU_13 :=
  fun rwl_8260 (A_8261, m_8262, n_8263, B_8264, __8265, __8266) =>
    match {NULL} with
    | reflL_13  => __8266
    end

def rwlLL_12 :=
  fun rwl_8267 (A_8268, m_8269, n_8270, B_8271, __8272, __8273) =>
    match {NULL} with
    | reflL_13  => __8273
    end

def rwrUU_19 :=
  fun rwr_8274 (A_8275, m_8276, n_8277, B_8278, __8279, __8280) =>
    match {NULL} with
    | reflU_14  => __8280
    end

def rwrUL_18 :=
  fun rwr_8281 (A_8282, m_8283, n_8284, B_8285, __8286, __8287) =>
    match {NULL} with
    | reflU_14  => __8287
    end

def rwrLU_17 :=
  fun rwr_8288 (A_8289, m_8290, n_8291, B_8292, __8293, __8294) =>
    match {NULL} with
    | reflL_13  => __8294
    end

def rwrLL_16 :=
  fun rwr_8295 (A_8296, m_8297, n_8298, B_8299, __8300, __8301) =>
    match {NULL} with
    | reflL_13  => __8301
    end

def congrUUU_27 := NULL

def congrUUL_26 := NULL

def congrULU_25 := NULL

def congrULL_24 := NULL

def congrLUU_23 := NULL

def congrLUL_22 := NULL

def congrLLU_21 := NULL

def congrLLL_20 := NULL

def hd_vec_4 :=
  fun hd_vec_8302 (A_8303, n_8304, __8305) =>
    match __8305 with
    | vnilU_27  => !! | vconsU_28 n_8306 hd_8307 tl_8308 => hd_8307
    end

def hd_vec2_5 :=
  fun hd_vec2_8309 (A_8310, n_8311, xs_8312) =>
    match xs_8312 with
    | vnilU_27  => !! | vconsU_28 n_8313 hd_8314 tl_8315 => hd_8314
    end

def hd_vec3_6 :=
  fun hd_vec3_8316 (A_8317, n_8318, xs_8319) =>
    match xs_8319 with
    | vnilU_27  => !! | vconsU_28 n_8320 hd_8321 tl_8322 => hd_8321
    end

def vlength_7 :=
  fun vlength_8323 (A_8324, n_8325, __8326) =>
    match __8326 with
    | vnilU_27  => (exUU_18 zero_4 NULL)
    | vconsU_28 n_8327 hd_8328 tl_8329 =>
      match ((vlength_8323) NULL NULL tl_8329) with
      | exUU_18 m_8330 pf_8331 => (exUU_18 (succ_5 m_8330) NULL)
      end
    end

def xs_8 := (vconsU_28 NULL zero_4 vnilU_27)

def x_9 := ((hd_vec_4) NULL NULL xs_8)

def y_10 := ((hd_vec2_5) NULL NULL xs_8)

def z_11 := ((hd_vec3_6) NULL NULL xs_8)

-----------------------------------------

inductive unit_1 where
| tt_1 of layout[]

inductive bool_2 where
| true_2 of layout[] | false_3 of layout[]

inductive nat_3 where
| zero_4 of layout[] | succ_5 of layout[R]

inductive eqU_10 where
| reflU_14 of layout[]

inductive eqL_9 where
| reflL_13 of layout[]

inductive existsUU_14 where
| exUU_18 of layout[R, N]

inductive existsUL_13 where
| exUL_17 of layout[R, N]

inductive existsLU_12 where


inductive existsLL_11 where


inductive singU_16 where
| justU_20 of layout[R]

inductive singL_15 where
| justL_19 of layout[R]

inductive listU_18 where
| nilU_23 of layout[] | consU_24 of layout[R, R]

inductive listL_17 where
| nilL_21 of layout[]

inductive vecU_20 where
| vnilU_27 of layout[] | vconsU_28 of layout[N, R, R]

inductive vecL_19 where
| vnilL_25 of layout[]

def rwlUU_15 :=
  fun rwl_8418 (A_8419, m_8420, n_8421, B_8422, __8423, __8424) => __8424

def rwlUL_14 :=
  fun rwl_8425 (A_8426, m_8427, n_8428, B_8429, __8430, __8431) => __8431

def rwlLU_13 :=
  fun rwl_8432 (A_8433, m_8434, n_8435, B_8436, __8437, __8438) => __8438

def rwlLL_12 :=
  fun rwl_8439 (A_8440, m_8441, n_8442, B_8443, __8444, __8445) => __8445

def rwrUU_19 :=
  fun rwr_8446 (A_8447, m_8448, n_8449, B_8450, __8451, __8452) => __8452

def rwrUL_18 :=
  fun rwr_8453 (A_8454, m_8455, n_8456, B_8457, __8458, __8459) => __8459

def rwrLU_17 :=
  fun rwr_8460 (A_8461, m_8462, n_8463, B_8464, __8465, __8466) => __8466

def rwrLL_16 :=
  fun rwr_8467 (A_8468, m_8469, n_8470, B_8471, __8472, __8473) => __8473

def congrUUU_27 := NULL

def congrUUL_26 := NULL

def congrULU_25 := NULL

def congrULL_24 := NULL

def congrLUU_23 := NULL

def congrLUL_22 := NULL

def congrLLU_21 := NULL

def congrLLL_20 := NULL

def hd_vec_4 :=
  fun hd_vec_8474 (A_8475, n_8476, __8477) =>
    match __8477 with
    | vconsU_28 n_8478 hd_8479 tl_8480 => hd_8479
    end

def hd_vec2_5 :=
  fun hd_vec2_8481 (A_8482, n_8483, xs_8484) =>
    match xs_8484 with
    | vconsU_28 n_8485 hd_8486 tl_8487 => hd_8486
    end

def hd_vec3_6 :=
  fun hd_vec3_8488 (A_8489, n_8490, xs_8491) =>
    match xs_8491 with
    | vconsU_28 n_8492 hd_8493 tl_8494 => hd_8493
    end

def vlength_7 :=
  fun vlength_8495 (A_8496, n_8497, __8498) =>
    match __8498 with
    | vnilU_27  => (exUU_18 zero_4 NULL)
    | vconsU_28 n_8499 hd_8500 tl_8501 =>
      match ((vlength_8495) NULL NULL tl_8501) with
      | exUU_18 m_8502 pf_8503 => (exUU_18 (succ_5 m_8502) NULL)
      end
    end

def xs_8 := (vconsU_28 NULL zero_4 vnilU_27)

def x_9 := ((hd_vec_4) NULL NULL xs_8)

def y_10 := ((hd_vec2_5) NULL NULL xs_8)

def z_11 := ((hd_vec3_6) NULL NULL xs_8)

-----------------------------------------

