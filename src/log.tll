[Inductive {name = "vec"; relv = R;
   body =
   (Binder (["s"],
      (PBind ((Type (SId "s")),
         (Binder ("A",
            (PBase
               ((TBind (R, (Id ("nat", I)),
                   (Binder ("_", (TBase (Type (SId "s"))))))),
                [(DConstr ("vnil",
                    (TBase
                       (App
                          [(Id ("vec", I)); (Id ("A", I)); (Id ("zero", I))])),
                    []));
                  (DConstr ("vcons",
                     (TBind (N, (Id ("nat", I)),
                        (Binder ("n",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("hd",
                                 (TBind (R,
                                    (App
                                       [(Inst ("vec", [(SId "s")], I));
                                         (Id ("A", I)); (Id ("n", I))]),
                                    (Binder ("tl",
                                       (TBase
                                          (App
                                             [(Id ("vec", I)); (Id ("A", I));
                                               (App
                                                  [(Id ("succ", I));
                                                    (Id ("n", I))])
                                               ]))
                                       ))
                                    ))
                                 ))
                              ))
                           ))
                        )),
                     [I; E; E]))
                  ]))
            ))
         ))
      ));
   view = [E]};
  Definition {name = "hd_vec1"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("_", (Id ("A", I))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "hd_vec1"),
              [([(PId "A"); (PId "n");
                  (PConstr ("vcons", [(PId "_"); (PId "hd"); (PId "_")]))],
                (Some (Id ("hd", I))))]
              )),
           [I; I])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("_", (Id ("A", I))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Definition {name = "hd_vec2"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("xs", IMeta))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "hd_vec2"),
              [([(PId "A"); (PId "n"); (PId "xs")],
                (Some (Match (
                         [(N, IMeta, (Some ("n0", IMeta)));
                           (R, (Id ("xs", I)),
                            (Some ("_",
                                   (App
                                      [(Id ("vec", I)); (Id ("A", I));
                                        (App
                                           [(Id ("succ", I)); (Id ("n0", I))])
                                        ]))))
                           ],
                         None,
                         [([(PId "_"); (PId "vnil")], None);
                           ([(PId "_");
                              (PConstr ("vcons",
                                 [(PId "_"); (PId "hd"); (PId "_")]))
                              ],
                            (Some (Id ("hd", I))))
                           ]
                         ))))
                ]
              )),
           [I; I; E])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("xs", IMeta))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; E]};
  Definition {name = "hd_vec3"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("xs", IMeta))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "hd_vec3"),
              [([(PId "A"); (PId "n"); (PId "xs")],
                (Some (Match ([(R, (Id ("xs", I)), None)], None,
                         [([(PId "vnil")], None);
                           ([(PConstr ("vcons",
                                [(PId "_"); (PId "hd"); (PId "_")]))
                              ],
                            (Some (Id ("hd", I))))
                           ]
                         ))))
                ]
              )),
           [I; I; E])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("xs", IMeta))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; E]};
  Definition {name = "vlength"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I)); (Id ("n", I))]),
                          (Binder ("_",
                             (App
                                [(Id ("exists", I));
                                  (Fun (
                                     (Pi (R, U, IMeta, (Binder ("x", IMeta))
                                        )),
                                     (Binder (None,
                                        [([(PId "x")],
                                          (Some (App
                                                   [(Id ("eq", I));
                                                     (Id ("x", I));
                                                     (Id ("n", I))])))
                                          ]
                                        )),
                                     []))
                                  ])
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "vlength"),
              [([(PId "A"); (PId "n"); (PId "vnil")],
                (Some (App
                         [(Id ("ex", I)); (Id ("zero", I)); (Id ("refl", I))])));
                ([(PId "A"); (PId "n");
                   (PConstr ("vcons", [(PId "_"); (PId "_"); (PId "tl")]))],
                 (Some (Match (
                          [(R, (App [(Id ("vlength", I)); (Id ("tl", I))]),
                            None)],
                          None,
                          [([(PConstr ("ex", [(PId "n"); (PId "pf")]))],
                            (Some (BOpr ("\226\159\168,{}\226\159\169",
                                     (App [(Id ("succ", I)); (Id ("n", I))]),
                                     (App
                                        [(Id ("congr", I));
                                          (Fun (
                                             (Pi (R, U, IMeta,
                                                (Binder ("x", IMeta)))),
                                             (Binder (None,
                                                [([(PId "x")],
                                                  (Some (App
                                                           [(Id ("succ", I));
                                                             (Id ("x", I))])))
                                                  ]
                                                )),
                                             []));
                                          (Id ("pf", I))])
                                     ))))
                            ]
                          ))))
                ]
              )),
           [I; I])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App [(Id ("vec", I)); (Id ("A", I)); (Id ("n", I))]),
                       (Binder ("_",
                          (App
                             [(Id ("exists", I));
                               (Fun (
                                  (Pi (R, U, IMeta, (Binder ("x", IMeta)))),
                                  (Binder (None,
                                     [([(PId "x")],
                                       (Some (App
                                                [(Id ("eq", I));
                                                  (Id ("x", I));
                                                  (Id ("n", I))])))
                                       ]
                                     )),
                                  []))
                               ])
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Definition {name = "xs"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("vcons", I)); (Id ("zero", I)); (Id ("vnil", I))]), IMeta)
       ));
    view = []};
  Definition {name = "x"; relv = R;
    body =
    (Binder ([], ((App [(Id ("hd_vec1", I)); (Id ("xs", I))]), IMeta)));
    view = []};
  Definition {name = "y"; relv = R;
    body =
    (Binder ([], ((App [(Id ("hd_vec2", I)); (Id ("xs", I))]), IMeta)));
    view = []};
  Definition {name = "z"; relv = R;
    body =
    (Binder ([], ((App [(Id ("hd_vec3", I)); (Id ("xs", I))]), IMeta)));
    view = []}
  ]

[parse success]

-----------------------------------------

#[program]
inductive vec_10‹s_462› (A_463 : Type‹s_462›):
  nat_5 -> Type‹s_462›
where
| vnil_13 : (vec_10‹??_52› A_463 zero_6)
| vcons_14
    {n_465 : nat_5} (hd_466 : A_463)
    (tl_467 : (vec_10‹s_462› A_463 n_465))
    : (vec_10‹??_53› A_463 (succ_7‹› n_465))

#[program]
def hd_vec1_33‹› :
  ∀ {A_468 : U} ->
    ∀ {n_469 : nat_5} ->
      (vec_10‹??_55› A_468 (succ_7‹› n_469)) -> A_468
:=
  fun hd_vec1_471 :
    ∀ {A_472 : U} ->
      ∀ {n_473 : nat_5} ->
        (vec_10‹??_54› A_472 (succ_7‹› n_473)) -> A_472
  | A_475, n_476, (vcons_14 _477 hd_478 _479) => hd_478

#[program]
def hd_vec2_34‹› :
  ∀ {A_480 : U} ->
    ∀ {n_481 : nat_5} ->
      (vec_10‹??_58› A_480 (succ_7‹› n_481)) -> ?_71[0;0]
:=
  fun hd_vec2_483 :
    ∀ {A_484 : U} ->
      ∀ {n_485 : nat_5} ->
        (vec_10‹??_56› A_484 (succ_7‹› n_485)) -> ?_67[0;0]
  | A_487, n_488, xs_489 =>
    (match ?_68[0;0], xs_489 in
       ∀ {n0_490 : ?_69[0;0]} -o
         (vec_10‹??_57› A_487 (succ_7‹› n0_490)) -o ?_70[0;0]
     with
    | _492, vnil_13 =>
    | _493, (vcons_14 _494 hd_495 _496) => hd_495)

#[program]
def hd_vec3_35‹› :
  ∀ {A_497 : U} ->
    ∀ {n_498 : nat_5} ->
      (vec_10‹??_60› A_497 (succ_7‹› n_498)) -> ?_75[0;0]
:=
  fun hd_vec3_500 :
    ∀ {A_501 : U} ->
      ∀ {n_502 : nat_5} ->
        (vec_10‹??_59› A_501 (succ_7‹› n_502)) -> ?_72[0;0]
  | A_504, n_505, xs_506 =>
    (match xs_506 in ?_73[0;0] -o ?_74[0;0] with
    | vnil_13 =>
    | (vcons_14 _508 hd_509 _510) => hd_509)

#[program]
def vlength_36‹› :
  ∀ {A_511 : U} ->
    ∀ {n_512 : nat_5} ->
      (vec_10‹??_73› A_511 n_512) ->
        (exists_7‹??_75,??_76›
          ?_99[0;0]
          fun _514 : ?_96[0;0] -> ?_97[0;0]
          | x_516 => (eq_1‹??_74› ?_98[0;0] x_516 n_512))
:=
  fun vlength_517 :
    ∀ {A_518 : U} ->
      ∀ {n_519 : nat_5} ->
        (vec_10‹??_61› A_518 n_519) ->
          (exists_7‹??_63,??_64›
            ?_79[0;0]
            fun _521 : ?_76[0;0] -> ?_77[0;0]
            | x_523 => (eq_1‹??_62› ?_78[0;0] x_523 n_519))
  | A_524, n_525, vnil_13 =>
    (ex_10‹??_66,??_67›
      ?_82[0;0] ?_83[0;0] zero_6 (refl_1‹??_65› ?_80[0;0] ?_81[0;0]))
  | A_526, n_527, (vcons_14 _528 _529 tl_530) =>
    (match ((vlength_517) ?_85[0;0] ?_84[0;0] tl_530) in
       ?_86[0;0] -o ?_87[0;0]
     with
    | (ex_10 n_532 pf_533) =>
      (ex_10‹??_71,??_72›
        ?_94[0;0] ?_95[0;0] (succ_7‹› n_532)
        ((congr_4‹??_68,??_69,??_70›)
          ?_93[0;0] ?_92[0;0] ?_91[0;0] ?_90[0;0]
          fun _534 : ?_88[0;0] -> ?_89[0;0]
          | x_536 => (succ_7‹› x_536) pf_533)))

#[program]
def xs_37‹› : ?_103[0;0] :=
  (vcons_14‹??_78›
    ?_102[0;0] ?_101[0;0] zero_6 (vnil_13‹??_77› ?_100[0;0]))

#[program]
def x_38‹› : ?_106[0;0] := ((hd_vec1_33) ?_105[0;0] ?_104[0;0] xs_37)

#[program]
def y_39‹› : ?_109[0;0] := ((hd_vec2_34) ?_108[0;0] ?_107[0;0] xs_37)

#[program]
def z_40‹› : ?_112[0;0] := ((hd_vec3_35) ?_111[0;0] ?_110[0;0] xs_37)

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_6469› : ∀ (A_6470 : Type‹s_6469›) -> A_6470 -> A_6470 :=
  fun id_6472 : ∀ (A_6473 : Type‹s_6469›) -> A_6473 -> A_6473
  | A_6475, m_6476 => m_6476

#[logical]
inductive eq_1‹s_6477› (A_6478 : Type‹s_6477›) (m_6479 : A_6478):
  A_6478 -> U
where
| refl_1 : (eq_1‹s_6477› A_6478 m_6479 m_6479)

#[program]
def rwl_2‹s_6481,r_6482› :
  ∀ {A_6483 : Type‹s_6481›} ->
    ∀ {m_6484 : A_6483} ->
      ∀ {n_6485 : A_6483} ->
        ∀ {B_6486 : A_6483 -> Type‹r_6482›} ->
          {(eq_1‹s_6481› A_6483 m_6484 n_6485)} ->
            ((B_6486) m_6484) -> ((B_6486) n_6485)
:=
  fun rwl_6490 :
    ∀ {A_6491 : Type‹s_6481›} ->
      ∀ {m_6492 : A_6491} ->
        ∀ {n_6493 : A_6491} ->
          ∀ {B_6494 : A_6491 -> Type‹r_6482›} ->
            {(eq_1‹s_6481› A_6491 m_6492 n_6493)} ->
              ((B_6494) m_6492) -> ((B_6494) n_6493)
  | A_6498, m_6499, n_6500, B_6501, refl_1, __6502 => __6502

#[program]
def rwr_3‹s_6503,r_6504› :
  ∀ {A_6505 : Type‹s_6503›} ->
    ∀ {m_6506 : A_6505} ->
      ∀ {n_6507 : A_6505} ->
        ∀ {B_6508 : A_6505 -> Type‹r_6504›} ->
          {(eq_1‹s_6503› A_6505 m_6506 n_6507)} ->
            ((B_6508) n_6507) -> ((B_6508) m_6506)
:=
  fun rwr_6512 :
    ∀ {A_6513 : Type‹s_6503›} ->
      ∀ {m_6514 : A_6513} ->
        ∀ {n_6515 : A_6513} ->
          ∀ {B_6516 : A_6513 -> Type‹r_6504›} ->
            {(eq_1‹s_6503› A_6513 m_6514 n_6515)} ->
              ((B_6516) n_6515) -> ((B_6516) m_6514)
  | A_6520, m_6521, n_6522, B_6523, refl_1, __6524 => __6524

#[logical]
def congr_4‹s_6525,r_6526,t_6527› :
  ∀ (A_6528 : Type‹s_6525›) ->
    ∀ (B_6529 : Type‹r_6526›) ->
      ∀ (m_6530 : A_6528) ->
        ∀ (n_6531 : A_6528) ->
          ∀ (f_6532 : forall‹t_6527›(__6533 : A_6528), B_6529) ->
            (eq_1‹s_6525› A_6528 m_6530 n_6531) ->
              (eq_1‹r_6526› B_6529 ((f_6532) m_6530) ((f_6532) n_6531))
:=
  fun congr_6535 :
    ∀ (A_6536 : Type‹s_6525›) ->
      ∀ (B_6537 : Type‹r_6526›) ->
        ∀ (m_6538 : A_6536) ->
          ∀ (n_6539 : A_6536) ->
            ∀ (f_6540 : forall‹t_6527›(__6541 : A_6536), B_6537) ->
              (eq_1‹s_6525› A_6536 m_6538 n_6539) ->
                (eq_1‹r_6526› B_6537 ((f_6540) m_6538) ((f_6540) n_6539))
  | A_6543, B_6544, m_6545, n_6546, f_6547, refl_1 =>
    (refl_1‹r_6526› B_6544 ((f_6547) n_6546))

#[logical]
def axiom_K_5‹› :
  ∀ {A_6548 : U} ->
    ∀ {m_6549 : A_6548} ->
      ∀ (x_6550 : (eq_1‹U› A_6548 m_6549 m_6549)) ->
        (eq_1‹U›
          (eq_1‹U› A_6548 m_6549 m_6549) x_6550
          (refl_1‹U› A_6548 m_6549))
:=
  fun axiom_K_6551 :
    ∀ {A_6552 : U} ->
      ∀ {m_6553 : A_6552} ->
        ∀ (x_6554 : (eq_1‹U› A_6552 m_6553 m_6553)) ->
          (eq_1‹U›
            (eq_1‹U› A_6552 m_6553 m_6553) x_6554
            (refl_1‹U› A_6552 m_6553))
  | A_6555, m_6556, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_6555 m_6556 m_6556) (refl_1‹U› A_6555 m_6556))

#[program]
inductive sing_2‹s_6557,t_6558› (A_6559 : Type‹s_6557›):
  A_6559 -> Type‹t_6558›
where
| just_2 (m_6561 : A_6559) : (sing_2‹s_6557,t_6558› A_6559 m_6561)

#[logical]
def ssing_6‹s_6562› :
  ∀ (A_6563 : Type‹s_6562›) -> A_6563 -> Type‹s_6562›
:=
  fun ssing_6565 :
    ∀ (A_6566 : Type‹s_6562›) -> A_6566 -> Type‹s_6562›
  | A_6568, m_6569 => (sing_2‹s_6562,s_6562› A_6568 m_6569)

#[program]
def sing_elim_7‹s_6570,t_6571› :
  ∀ {A_6572 : Type‹s_6570›} ->
    ∀ {x_6573 : A_6572} ->
      (sing_2‹s_6570,t_6571› A_6572 x_6573) -> A_6572
:=
  fun sing_elim_6575 :
    ∀ {A_6576 : Type‹s_6570›} ->
      ∀ {x_6577 : A_6576} ->
        (sing_2‹s_6570,t_6571› A_6576 x_6577) -> A_6576
  | A_6579, x_6580, (just_2 m_6581) => m_6581

#[logical]
def sing_uniq_8‹s_6582,t_6583› :
  ∀ (A_6584 : Type‹s_6582›) ->
    ∀ (x0_6585 : A_6584) ->
      ∀ (x_6586 : (sing_2‹s_6582,t_6583› A_6584 x0_6585)) ->
        (eq_1‹s_6582›
          A_6584 x0_6585
          ((sing_elim_7‹s_6582,t_6583›) A_6584 x0_6585 x_6586))
:=
  fun sing_uniq_6587 :
    ∀ (A_6588 : Type‹s_6582›) ->
      ∀ (x0_6589 : A_6588) ->
        ∀ (x_6590 : (sing_2‹s_6582,t_6583› A_6588 x0_6589)) ->
          (eq_1‹s_6582›
            A_6588 x0_6589
            ((sing_elim_7‹s_6582,t_6583›) A_6588 x0_6589 x_6590))
  | A_6591, x0_6592, (just_2 m_6593) => (refl_1‹s_6582› A_6591 m_6593)

#[program]
inductive base_3‹s_6594› : Type‹s_6594› where
| tt_3 : base_3‹s_6594›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_6595 : unit_9) -> (eq_1‹U› base_3‹U› x_6595 tt_3‹U›)
:=
  fun unit_eta_6596 :
    ∀ (x_6597 : unit_9) -> (eq_1‹U› base_3‹U› x_6597 tt_3‹U›)
  | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  fun not_6599 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_6603 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __6606 => false_5

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_6609 : bool_4 -> bool_4 -> bool_4
  | true_4, __6612 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  fun xor_6615 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_6618 : nat_5) : nat_5

#[program]
def lte_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_6621 : nat_5 -> nat_5 -> bool_4
  | zero_6, __6624 => true_4
  | (succ_7 n_6625), zero_6 => false_5
  | (succ_7 n_6626), (succ_7 n_6627) => ((lte_6621) n_6626 n_6627)

#[program]
def lt_16‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_6630 : nat_5 -> nat_5 -> bool_4
  | x_6633, y_6634 => ((lte_15) (succ_7‹› x_6633) y_6634)

#[program]
def pred_17‹› : nat_5 -> nat_5 :=
  fun pred_6636 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_6638) => n_6638

#[program]
def add_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_6641 : nat_5 -> nat_5 -> nat_5
  | zero_6, __6644 => __6644
  | (succ_7 n_6645), __6646 => (succ_7‹› ((add_6641) n_6645 __6646))

#[program]
def sub_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_6649 : nat_5 -> nat_5 -> nat_5
  | __6652, zero_6 => __6652
  | __6653, (succ_7 n_6654) => ((sub_6649) ((pred_17) __6653) n_6654)

#[program]
def mul_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_6657 : nat_5 -> nat_5 -> nat_5
  | zero_6, __6660 => zero_6
  | (succ_7 n_6661), __6662 => ((add_18) __6662 ((mul_6657) n_6661 __6662))

#[program]
def div_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_6665 : nat_5 -> nat_5 -> nat_5
  | x_6668, y_6669 =>
    (match ((lt_16) x_6668 y_6669) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_6671 :=
        fun loop_6672 : nat_5 -> nat_5 -> nat_5
        | x_6675, y_6676 =>
          (match ((sub_19) x_6675 ((pred_17) y_6676)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_6678) => (succ_7‹› ((loop_6672) n_6678 y_6676)))
      in ((loop_6671) x_6668 y_6669))

#[program]
def rem_22‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_6681 : nat_5 -> nat_5 -> nat_5
  | x_6684, y_6685 =>
    ((sub_19) x_6684 ((mul_20) ((div_21) x_6684 y_6685) y_6685))

#[program]
inductive list_6‹s_6686,t_6687› (A_6688 : Type‹s_6686›):
  Type‹t_6687›
where
| nil_8 : (list_6‹s_6686,t_6687› A_6688)
| cons_9
    (hd_6689 : A_6688) (tl_6690 : (list_6‹s_6686,t_6687› A_6688))
    : (list_6‹s_6686,t_6687› A_6688)

#[program]
def free_list_23‹s_6691,t_6692› :
  ∀ {A_6693 : Type‹s_6691›} ->
    A_6693 -> unit_9 -> (list_6‹s_6691,t_6692› A_6693) -> unit_9
:=
  fun free_list_6697 :
    ∀ {A_6698 : Type‹s_6691›} ->
      A_6698 -> unit_9 -> (list_6‹s_6691,t_6692› A_6698) -> unit_9
  | A_6702, f_6703, nil_8 => tt_3‹U›
  | A_6704, f_6705, (cons_9 hd_6706 tl_6707) =>
    let __6708 := ((f_6705) hd_6706) in
    ((free_list_6697) A_6704 f_6705 tl_6707)

#[program]
inductive exists_7‹s_6709,r_6710› (A_6711 : Type‹s_6709›) (B_6712 : 
A_6711 -> Type‹r_6710›): L where
| ex_10
    (m_6714 : A_6711) {n_6715 : ((B_6712) m_6714)}
    : (exists_7‹s_6709,r_6710› A_6711 B_6712)

#[program]
inductive exists0_8‹s_6716,r_6717› (A_6718 : Type‹s_6716›) (B_6719 : 
A_6718 -> Type‹r_6717›): L where
| ex0_11
    {m_6721 : A_6718} (n_6722 : ((B_6719) m_6721))
    : (exists0_8‹s_6716,r_6717› A_6718 B_6719)

#[program]
inductive exists1_9‹s_6723,r_6724› (A_6725 : Type‹s_6723›) (B_6726 : 
A_6725 -> Type‹r_6724›): L where
| ex1_12
    (m_6728 : A_6725) (n_6729 : ((B_6726) m_6728))
    : (exists1_9‹s_6723,r_6724› A_6725 B_6726)

#[logical]
def tensor0_24‹s_6730,r_6731› : Type‹s_6730› -> Type‹r_6731› -> L
:=
  fun tensor0_6734 : Type‹s_6730› -> Type‹r_6731› -> L
  | A_6737, B_6738 =>
    (exists0_8‹s_6730,r_6731›
      A_6737 fun _6739 : A_6737 -> Type‹r_6731›
             | __6741 => B_6738)

#[logical]
def tensor1_25‹s_6742,r_6743› : Type‹s_6742› -> Type‹r_6743› -> L
:=
  fun tensor1_6746 : Type‹s_6742› -> Type‹r_6743› -> L
  | A_6749, B_6750 =>
    (exists1_9‹s_6742,r_6743›
      A_6749 fun _6751 : A_6749 -> Type‹r_6743›
             | __6753 => B_6750)

#[program]
def pow_26‹› : int -> int -> int :=
  fun pow_6756 : int -> int -> int
  | x_6759, y_6760 =>
    let loop_6761 :=
      fun loop_6762 : int -> int -> int
      | acc_6765, y_6766 =>
        (match (__lte__ y_6766 0) in bool_4 -o int with
        | true_4 => acc_6765
        | false_5 =>
          ((loop_6762) (__mul__ x_6759 acc_6765) (__sub__ y_6766 1)))
    in ((loop_6761) 1 y_6760)

#[program]
def powm_27‹› : int -> int -> int -> int :=
  fun powm_6771 : int -> int -> int -> int
  | x_6775, y_6776, m_6777 =>
    let loop_6778 :=
      fun loop_6779 : int -> int -> int
      | acc_6782, y_6783 =>
        (match (__lte__ y_6783 0) in bool_4 -o int with
        | true_4 => acc_6782
        | false_5 =>
          ((loop_6779)
            (__mod__ (__mul__ x_6775 acc_6782) m_6777) (__sub__ y_6783 1)))
    in ((loop_6778) 1 y_6776)

#[program]
def ord_28‹› : char -> int :=
  fun ord_6786 : char -> int
  | c_6788 => (__ord__ c_6788)

#[program]
def chr_29‹› : int -> char :=
  fun chr_6790 : int -> char
  | i_6792 => (__chr__ i_6792)

#[program]
def str_30‹› : char -> string :=
  fun str_6794 : char -> string
  | c_6796 => (__push__ "" c_6796)

#[program]
def strlen_31‹› : string -> int :=
  fun strlen_6798 : string -> int
  | s_6800 => (__size__ s_6800)

#[program]
def string_of_int_32‹› : int -> string :=
  fun string_of_int_6802 : int -> string
  | i_6804 =>
    let aux_6805 :=
      fun aux_6806 : int -> string
      | i_6808 =>
        (match (__lte__ 10 i_6808) in bool_4 -o string with
        | true_4 =>
          let r_6810 := (__mod__ i_6808 10) in
          let i_6811 := (__div__ i_6808 10) in
          (__push__ ((aux_6806) i_6811)
            ((chr_29) (__add__ r_6810 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_6808 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_6804) in bool_4 -o string with
    | true_4 => ((aux_6805) i_6804)
    | false_5 => (__cat__ "~" ((aux_6805) (__neg__ i_6804))))

#[program]
inductive vec_10‹s_6813› (A_6814 : Type‹s_6813›):
  nat_5 -> Type‹s_6813›
where
| vnil_13 : (vec_10‹s_6813› A_6814 zero_6)
| vcons_14
    {n_6816 : nat_5} (hd_6817 : A_6814)
    (tl_6818 : (vec_10‹s_6813› A_6814 n_6816))
    : (vec_10‹s_6813› A_6814 (succ_7‹› n_6816))

#[program]
def hd_vec1_33‹› :
  ∀ {A_6819 : U} ->
    ∀ {n_6820 : nat_5} ->
      (vec_10‹U› A_6819 (succ_7‹› n_6820)) -> A_6819
:=
  fun hd_vec1_6822 :
    ∀ {A_6823 : U} ->
      ∀ {n_6824 : nat_5} ->
        (vec_10‹U› A_6823 (succ_7‹› n_6824)) -> A_6823
  | A_6826, n_6827, (vcons_14 n_6828 hd_6829 tl_6830) => hd_6829

#[program]
def hd_vec2_34‹› :
  ∀ {A_6831 : U} ->
    ∀ {n_6832 : nat_5} ->
      (vec_10‹U› A_6831 (succ_7‹› n_6832)) -> A_6831
:=
  fun hd_vec2_6834 :
    ∀ {A_6835 : U} ->
      ∀ {n_6836 : nat_5} ->
        (vec_10‹U› A_6835 (succ_7‹› n_6836)) -> A_6835
  | A_6838, n_6839, xs_6840 =>
    (match n_6839, xs_6840 in
       ∀ {n0_6841 : nat_5} -o
         (vec_10‹U› A_6838 (succ_7‹› n0_6841)) -o A_6838
     with
    | n0_6843, vnil_13 =>
    | n0_6844, (vcons_14 n_6845 hd_6846 tl_6847) => hd_6846)

#[program]
def hd_vec3_35‹› :
  ∀ {A_6848 : U} ->
    ∀ {n_6849 : nat_5} ->
      (vec_10‹U› A_6848 (succ_7‹› n_6849)) -> A_6848
:=
  fun hd_vec3_6851 :
    ∀ {A_6852 : U} ->
      ∀ {n_6853 : nat_5} ->
        (vec_10‹U› A_6852 (succ_7‹› n_6853)) -> A_6852
  | A_6855, n_6856, xs_6857 =>
    (match xs_6857 in (vec_10‹U› A_6855 (succ_7‹› n_6856)) -o A_6855
     with
    | vnil_13 =>
    | (vcons_14 n_6859 hd_6860 tl_6861) => hd_6860)

#[program]
def vlength_36‹› :
  ∀ {A_6862 : U} ->
    ∀ {n_6863 : nat_5} ->
      (vec_10‹U› A_6862 n_6863) ->
        (exists_7‹U,U›
          nat_5
          fun _6865 : nat_5 -> U
          | __6867 => (eq_1‹U› nat_5 __6867 n_6863))
:=
  fun vlength_6868 :
    ∀ {A_6869 : U} ->
      ∀ {n_6870 : nat_5} ->
        (vec_10‹U› A_6869 n_6870) ->
          (exists_7‹U,U›
            nat_5
            fun _6872 : nat_5 -> U
            | __6874 => (eq_1‹U› nat_5 __6874 n_6870))
  | A_6875, n_6876, vnil_13 =>
    (ex_10‹U,U›
      nat_5
      fun _6877 : nat_5 -> U
      | __6879 => (eq_1‹U› nat_5 __6879 zero_6) zero_6
      (refl_1‹U› nat_5 zero_6))
  | A_6880, n_6881, (vcons_14 n_6882 hd_6883 tl_6884) =>
    (match ((vlength_6868) A_6880 n_6882 tl_6884) in
       (exists_7‹U,U›
         nat_5
         fun _6886 : nat_5 -> U
         | __6888 => (eq_1‹U› nat_5 __6888 n_6882)) -o
         (exists_7‹U,U›
           nat_5
           fun _6889 : nat_5 -> U
           | __6891 => (eq_1‹U› nat_5 __6891 (succ_7‹› n_6882)))
     with
    | (ex_10 m_6892 n_6893) =>
      (ex_10‹U,U›
        nat_5
        fun _6894 : nat_5 -> U
        | __6896 => (eq_1‹U› nat_5 __6896 (succ_7‹› n_6882))
        (succ_7‹› m_6892)
        ((congr_4‹U,U,U›)
          nat_5 nat_5 m_6892 n_6882
          fun _6897 : nat_5 -> nat_5
          | __6899 => (succ_7‹› __6899) n_6893)))

#[program]
def xs_37‹› : (vec_10‹U› nat_5 (succ_7‹› zero_6)) :=
  (vcons_14‹U› nat_5 zero_6 zero_6 (vnil_13‹U› nat_5))

#[program]
def x_38‹› : nat_5 := ((hd_vec1_33) nat_5 zero_6 xs_37)

#[program]
def y_39‹› : nat_5 := ((hd_vec2_34) nat_5 zero_6 xs_37)

#[program]
def z_40‹› : nat_5 := ((hd_vec3_35) nat_5 zero_6 xs_37)

[trans1e success]

-----------------------------------------

#[program]
def idU_42 := fun id_10806 (A_10807) -> (m_10808) ->
                m_10808

#[program]
def idL_41 := fun id_10809 (A_10810) -> (m_10811) ->
                m_10811

#[logical]
inductive eqU_12 where
| reflU_16 of layout[]

#[logical]
inductive eqL_11 where
| reflL_15 of layout[]

#[program]
def rwlUU_46 :=
  fun rwl_10812 {A_10813} -> {m_10814} -> {n_10815} -> {B_10816} ->
  {__10817} -> (__10818) ->
    (match {NULL} with
    | reflU_16  => __10818)

#[program]
def rwlUL_45 :=
  fun rwl_10819 {A_10820} -> {m_10821} -> {n_10822} -> {B_10823} ->
  {__10824} -> (__10825) ->
    (match {NULL} with
    | reflU_16  => __10825)

#[program]
def rwlLU_44 :=
  fun rwl_10826 {A_10827} -> {m_10828} -> {n_10829} -> {B_10830} ->
  {__10831} -> (__10832) ->
    (match {NULL} with
    | reflL_15  => __10832)

#[program]
def rwlLL_43 :=
  fun rwl_10833 {A_10834} -> {m_10835} -> {n_10836} -> {B_10837} ->
  {__10838} -> (__10839) ->
    (match {NULL} with
    | reflL_15  => __10839)

#[program]
def rwrUU_50 :=
  fun rwr_10840 {A_10841} -> {m_10842} -> {n_10843} -> {B_10844} ->
  {__10845} -> (__10846) ->
    (match {NULL} with
    | reflU_16  => __10846)

#[program]
def rwrUL_49 :=
  fun rwr_10847 {A_10848} -> {m_10849} -> {n_10850} -> {B_10851} ->
  {__10852} -> (__10853) ->
    (match {NULL} with
    | reflU_16  => __10853)

#[program]
def rwrLU_48 :=
  fun rwr_10854 {A_10855} -> {m_10856} -> {n_10857} -> {B_10858} ->
  {__10859} -> (__10860) ->
    (match {NULL} with
    | reflL_15  => __10860)

#[program]
def rwrLL_47 :=
  fun rwr_10861 {A_10862} -> {m_10863} -> {n_10864} -> {B_10865} ->
  {__10866} -> (__10867) ->
    (match {NULL} with
    | reflL_15  => __10867)

#[logical]
def congrUUU_58 := NULL

#[logical]
def congrUUL_57 := NULL

#[logical]
def congrULU_56 := NULL

#[logical]
def congrULL_55 := NULL

#[logical]
def congrLUU_54 := NULL

#[logical]
def congrLUL_53 := NULL

#[logical]
def congrLLU_52 := NULL

#[logical]
def congrLLL_51 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_16 where
| justUU_20 of layout[R]

#[program]
inductive singUL_15 where
| justUL_19 of layout[R]

#[program]
inductive singLU_14 where


#[program]
inductive singLL_13 where
| justLL_17 of layout[R]

#[logical]
def ssingU_60 := NULL

#[logical]
def ssingL_59 := NULL

#[program]
def sing_elimUU_64 :=
  fun sing_elim_10868 {A_10869} -> {x_10870} -> (__10871) ->
    (match __10871 with
    | justUU_20 m_10872 => m_10872)

#[program]
def sing_elimUL_63 :=
  fun sing_elim_10873 {A_10874} -> {x_10875} -> (__10876) ->
    (match __10876 with
    | justUL_19 m_10877 => m_10877)

#[program]
def sing_elimLU_62 :=
  fun sing_elim_10878 {A_10879} -> {x_10880} -> (__10881) ->
    (match __10881 with
    )

#[program]
def sing_elimLL_61 :=
  fun sing_elim_10882 {A_10883} -> {x_10884} -> (__10885) ->
    (match __10885 with
    | justLL_17 m_10886 => m_10886)

#[logical]
def sing_uniqUU_68 := NULL

#[logical]
def sing_uniqUL_67 := NULL

#[logical]
def sing_uniqLU_66 := NULL

#[logical]
def sing_uniqLL_65 := NULL

#[program]
inductive baseU_18 where
| ttU_22 of layout[]

#[program]
inductive baseL_17 where
| ttL_21 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_10887 (__10888) ->
    (match __10888 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_10889 (__10890) -> (__10891) ->
    (match __10890 with
    | true_4  =>
      (match __10891 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_10892 (__10893) -> (__10894) ->
    (match __10893 with
    | true_4  => true_4
    | false_5  =>
      (match __10894 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_10895 (__10896) -> (__10897) ->
    (match __10896 with
    | true_4  =>
      (match __10897 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __10897 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_10898 (__10899) -> (__10900) ->
    (match __10899 with
    | zero_6  => true_4
    | succ_7 n_10901 =>
      (match __10900 with
      | zero_6  => false_5 | succ_7 n_10902 => ((lte_10898) n_10901 n_10902)))

#[program]
def lt_16 :=
  fun lt_10903 (x_10904) -> (y_10905) ->
    ((lte_15) (succ_7 x_10904) y_10905)

#[program]
def pred_17 :=
  fun pred_10906 (__10907) ->
    (match __10907 with
    | zero_6  => zero_6 | succ_7 n_10908 => n_10908)

#[program]
def add_18 :=
  fun add_10909 (__10910) -> (__10911) ->
    (match __10910 with
    | zero_6  => __10911
    | succ_7 n_10912 => (succ_7 ((add_10909) n_10912 __10911)))

#[program]
def sub_19 :=
  fun sub_10913 (__10914) -> (__10915) ->
    (match __10915 with
    | zero_6  => __10914
    | succ_7 n_10916 => ((sub_10913) ((pred_17) __10914) n_10916))

#[program]
def mul_20 :=
  fun mul_10917 (__10918) -> (__10919) ->
    (match __10918 with
    | zero_6  => zero_6
    | succ_7 n_10920 => ((add_18) __10919 ((mul_10917) n_10920 __10919)))

#[program]
def div_21 :=
  fun div_10921 (x_10922) -> (y_10923) ->
    (match ((lt_16) x_10922 y_10923) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10924 :=
        fun loop_10925 (x_10926) -> (y_10927) ->
          (match ((sub_19) x_10926 ((pred_17) y_10927)) with
          | zero_6  => zero_6
          | succ_7 n_10928 => (succ_7 ((loop_10925) n_10928 y_10927)))
      in ((loop_10924) x_10922 y_10923))

#[program]
def rem_22 :=
  fun rem_10929 (x_10930) -> (y_10931) ->
    ((sub_19) x_10930 ((mul_20) ((div_21) x_10930 y_10931) y_10931))

#[program]
inductive listUU_22 where
| nilUU_29 of layout[]
| consUU_30 of layout[R, R]

#[program]
inductive listUL_21 where
| nilUL_27 of layout[]
| consUL_28 of layout[R, R]

#[program]
inductive listLU_20 where
| nilLU_25 of layout[]

#[program]
inductive listLL_19 where
| nilLL_23 of layout[]
| consLL_24 of layout[R, R]

#[program]
def free_listUU_72 :=
  fun free_list_10932 {A_10933} -> (f_10934) -> (__10935) ->
    (match __10935 with
    | nilUU_29  => ttU_22
    | consUU_30 hd_10936 tl_10937 =>
      let __10938 := ((f_10934) hd_10936) in
      ((free_list_10932) NULL f_10934 tl_10937))

#[program]
def free_listUL_71 :=
  fun free_list_10939 {A_10940} -> (f_10941) -> (__10942) ->
    (match __10942 with
    | nilUL_27  => ttU_22
    | consUL_28 hd_10943 tl_10944 =>
      let __10945 := ((f_10941) hd_10943) in
      ((free_list_10939) NULL f_10941 tl_10944))

#[program]
def free_listLL_69 :=
  fun free_list_10946 {A_10947} -> (f_10948) -> (__10949) ->
    (match __10949 with
    | nilLL_23  => ttU_22
    | consLL_24 hd_10950 tl_10951 =>
      let __10952 := ((f_10948) hd_10950) in
      ((free_list_10946) NULL f_10948 tl_10951))

#[program]
inductive existsUU_26 where
| exUU_34 of layout[R, N]

#[program]
inductive existsUL_25 where
| exUL_33 of layout[R, N]

#[program]
inductive existsLU_24 where
| exLU_32 of layout[R, N]

#[program]
inductive existsLL_23 where
| exLL_31 of layout[R, N]

#[program]
inductive exists0UU_30 where
| ex0UU_38 of layout[N, R]

#[program]
inductive exists0UL_29 where
| ex0UL_37 of layout[N, R]

#[program]
inductive exists0LU_28 where
| ex0LU_36 of layout[N, R]

#[program]
inductive exists0LL_27 where
| ex0LL_35 of layout[N, R]

#[program]
inductive exists1UU_34 where
| ex1UU_42 of layout[R, R]

#[program]
inductive exists1UL_33 where
| ex1UL_41 of layout[R, R]

#[program]
inductive exists1LU_32 where
| ex1LU_40 of layout[R, R]

#[program]
inductive exists1LL_31 where
| ex1LL_39 of layout[R, R]

#[logical]
def tensor0UU_76 := NULL

#[logical]
def tensor0UL_75 := NULL

#[logical]
def tensor0LU_74 := NULL

#[logical]
def tensor0LL_73 := NULL

#[logical]
def tensor1UU_80 := NULL

#[logical]
def tensor1UL_79 := NULL

#[logical]
def tensor1LU_78 := NULL

#[logical]
def tensor1LL_77 := NULL

#[program]
def pow_26 :=
  fun pow_10953 (x_10954) -> (y_10955) ->
    let loop_10956 :=
      fun loop_10957 (acc_10958) -> (y_10959) ->
        (match (__lte__ y_10959 0) with
        | true_4  => acc_10958
        | false_5  =>
          ((loop_10957) (__mul__ x_10954 acc_10958) (__sub__ y_10959 1)))
    in ((loop_10956) 1 y_10955)

#[program]
def powm_27 :=
  fun powm_10960 (x_10961) -> (y_10962) -> (m_10963) ->
    let loop_10964 :=
      fun loop_10965 (acc_10966) -> (y_10967) ->
        (match (__lte__ y_10967 0) with
        | true_4  => acc_10966
        | false_5  =>
          ((loop_10965)
            (__mod__ (__mul__ x_10961 acc_10966) m_10963) (__sub__ y_10967 1)))
    in ((loop_10964) 1 y_10962)

#[program]
def ord_28 := fun ord_10968 (c_10969) ->
                (__ord__ c_10969)

#[program]
def chr_29 := fun chr_10970 (i_10971) ->
                (__chr__ i_10971)

#[program]
def str_30 := fun str_10972 (c_10973) ->
                (__push__ "" c_10973)

#[program]
def strlen_31 := fun strlen_10974 (s_10975) ->
                   (__size__ s_10975)

#[program]
def string_of_int_32 :=
  fun string_of_int_10976 (i_10977) ->
    let aux_10978 :=
      fun aux_10979 (i_10980) ->
        (match (__lte__ 10 i_10980) with
        | true_4  =>
          let r_10981 := (__mod__ i_10980 10) in
          let i_10982 := (__div__ i_10980 10) in
          (__push__ ((aux_10979) i_10982)
            ((chr_29) (__add__ r_10981 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_10980 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_10977) with
    | true_4  => ((aux_10978) i_10977)
    | false_5  => (__cat__ "~" ((aux_10978) (__neg__ i_10977))))

#[program]
inductive vecU_36 where
| vnilU_45 of layout[]
| vconsU_46 of layout[N, R, R]

#[program]
inductive vecL_35 where
| vnilL_43 of layout[]
| vconsL_44 of layout[N, R, R]

#[program]
def hd_vec1_33 :=
  fun hd_vec1_10983 {A_10984} -> {n_10985} -> (__10986) ->
    (match __10986 with
    | vnilU_45  => !! | vconsU_46 n_10987 hd_10988 tl_10989 => hd_10988)

#[program]
def hd_vec2_34 :=
  fun hd_vec2_10990 {A_10991} -> {n_10992} -> (xs_10993) ->
    (match xs_10993 with
    | vnilU_45  => !! | vconsU_46 n_10994 hd_10995 tl_10996 => hd_10995)

#[program]
def hd_vec3_35 :=
  fun hd_vec3_10997 {A_10998} -> {n_10999} -> (xs_11000) ->
    (match xs_11000 with
    | vnilU_45  => !! | vconsU_46 n_11001 hd_11002 tl_11003 => hd_11002)

#[program]
def vlength_36 :=
  fun vlength_11004 {A_11005} -> {n_11006} -> (__11007) ->
    (match __11007 with
    | vnilU_45  => (exUU_34 zero_6 NULL)
    | vconsU_46 n_11008 hd_11009 tl_11010 =>
      (match ((vlength_11004) NULL NULL tl_11010) with
      | exUU_34 m_11011 n_11012 => (exUU_34 (succ_7 m_11011) NULL)))

#[program]
def xs_37 := (vconsU_46 NULL zero_6 vnilU_45)

#[program]
def x_38 := ((hd_vec1_33) NULL NULL xs_37)

#[program]
def y_39 := ((hd_vec2_34) NULL NULL xs_37)

#[program]
def z_40 := ((hd_vec3_35) NULL NULL xs_37)

[trans12 success]

-----------------------------------------

#[program]
def idU_42 := fun id_11220 (A_11221) -> (m_11222) ->
                m_11222

#[program]
def idL_41 := fun id_11223 (A_11224) -> (m_11225) ->
                m_11225

#[logical]
inductive eqU_12 where
| reflU_16 of layout[]

#[logical]
inductive eqL_11 where
| reflL_15 of layout[]

#[program]
def rwlUU_46 :=
  fun rwl_11226 {A_11227} -> {m_11228} -> {n_11229} -> {B_11230} ->
  {__11231} -> (__11232) ->
    __11232

#[program]
def rwlUL_45 :=
  fun rwl_11233 {A_11234} -> {m_11235} -> {n_11236} -> {B_11237} ->
  {__11238} -> (__11239) ->
    __11239

#[program]
def rwlLU_44 :=
  fun rwl_11240 {A_11241} -> {m_11242} -> {n_11243} -> {B_11244} ->
  {__11245} -> (__11246) ->
    __11246

#[program]
def rwlLL_43 :=
  fun rwl_11247 {A_11248} -> {m_11249} -> {n_11250} -> {B_11251} ->
  {__11252} -> (__11253) ->
    __11253

#[program]
def rwrUU_50 :=
  fun rwr_11254 {A_11255} -> {m_11256} -> {n_11257} -> {B_11258} ->
  {__11259} -> (__11260) ->
    __11260

#[program]
def rwrUL_49 :=
  fun rwr_11261 {A_11262} -> {m_11263} -> {n_11264} -> {B_11265} ->
  {__11266} -> (__11267) ->
    __11267

#[program]
def rwrLU_48 :=
  fun rwr_11268 {A_11269} -> {m_11270} -> {n_11271} -> {B_11272} ->
  {__11273} -> (__11274) ->
    __11274

#[program]
def rwrLL_47 :=
  fun rwr_11275 {A_11276} -> {m_11277} -> {n_11278} -> {B_11279} ->
  {__11280} -> (__11281) ->
    __11281

#[logical]
def congrUUU_58 := NULL

#[logical]
def congrUUL_57 := NULL

#[logical]
def congrULU_56 := NULL

#[logical]
def congrULL_55 := NULL

#[logical]
def congrLUU_54 := NULL

#[logical]
def congrLUL_53 := NULL

#[logical]
def congrLLU_52 := NULL

#[logical]
def congrLLL_51 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_16 where
| justUU_20 of layout[R]

#[program]
inductive singUL_15 where
| justUL_19 of layout[R]

#[program]
inductive singLU_14 where


#[program]
inductive singLL_13 where
| justLL_17 of layout[R]

#[logical]
def ssingU_60 := NULL

#[logical]
def ssingL_59 := NULL

#[program]
def sing_elimUU_64 :=
  fun sing_elim_11282 {A_11283} -> {x_11284} -> (__11285) ->
    (match __11285 with
    | justUU_20 m_11286 => m_11286)

#[program]
def sing_elimUL_63 :=
  fun sing_elim_11287 {A_11288} -> {x_11289} -> (__11290) ->
    (match __11290 with
    | justUL_19 m_11291 => m_11291)

#[program]
def sing_elimLU_62 :=
  fun sing_elim_11292 {A_11293} -> {x_11294} -> (__11295) ->
    !!

#[program]
def sing_elimLL_61 :=
  fun sing_elim_11296 {A_11297} -> {x_11298} -> (__11299) ->
    (match __11299 with
    | justLL_17 m_11300 => m_11300)

#[logical]
def sing_uniqUU_68 := NULL

#[logical]
def sing_uniqUL_67 := NULL

#[logical]
def sing_uniqLU_66 := NULL

#[logical]
def sing_uniqLL_65 := NULL

#[program]
inductive baseU_18 where
| ttU_22 of layout[]

#[program]
inductive baseL_17 where
| ttL_21 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_11301 (__11302) ->
    (match __11302 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_11303 (__11304) -> (__11305) ->
    (match __11304 with
    | true_4  =>
      (match __11305 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_11306 (__11307) -> (__11308) ->
    (match __11307 with
    | true_4  => true_4
    | false_5  =>
      (match __11308 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_11309 (__11310) -> (__11311) ->
    (match __11310 with
    | true_4  =>
      (match __11311 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __11311 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_11312 (__11313) -> (__11314) ->
    (match __11313 with
    | zero_6  => true_4
    | succ_7 n_11315 =>
      (match __11314 with
      | zero_6  => false_5 | succ_7 n_11316 => ((lte_11312) n_11315 n_11316)))

#[program]
def lt_16 :=
  fun lt_11317 (x_11318) -> (y_11319) ->
    ((lte_15) (succ_7 x_11318) y_11319)

#[program]
def pred_17 :=
  fun pred_11320 (__11321) ->
    (match __11321 with
    | zero_6  => zero_6 | succ_7 n_11322 => n_11322)

#[program]
def add_18 :=
  fun add_11323 (__11324) -> (__11325) ->
    (match __11324 with
    | zero_6  => __11325
    | succ_7 n_11326 => (succ_7 ((add_11323) n_11326 __11325)))

#[program]
def sub_19 :=
  fun sub_11327 (__11328) -> (__11329) ->
    (match __11329 with
    | zero_6  => __11328
    | succ_7 n_11330 => ((sub_11327) ((pred_17) __11328) n_11330))

#[program]
def mul_20 :=
  fun mul_11331 (__11332) -> (__11333) ->
    (match __11332 with
    | zero_6  => zero_6
    | succ_7 n_11334 => ((add_18) __11333 ((mul_11331) n_11334 __11333)))

#[program]
def div_21 :=
  fun div_11335 (x_11336) -> (y_11337) ->
    (match ((lt_16) x_11336 y_11337) with
    | true_4  => zero_6
    | false_5  =>
      let loop_11338 :=
        fun loop_11339 (x_11340) -> (y_11341) ->
          (match ((sub_19) x_11340 ((pred_17) y_11341)) with
          | zero_6  => zero_6
          | succ_7 n_11342 => (succ_7 ((loop_11339) n_11342 y_11341)))
      in ((loop_11338) x_11336 y_11337))

#[program]
def rem_22 :=
  fun rem_11343 (x_11344) -> (y_11345) ->
    ((sub_19) x_11344 ((mul_20) ((div_21) x_11344 y_11345) y_11345))

#[program]
inductive listUU_22 where
| nilUU_29 of layout[]
| consUU_30 of layout[R, R]

#[program]
inductive listUL_21 where
| nilUL_27 of layout[]
| consUL_28 of layout[R, R]

#[program]
inductive listLU_20 where
| nilLU_25 of layout[]

#[program]
inductive listLL_19 where
| nilLL_23 of layout[]
| consLL_24 of layout[R, R]

#[program]
def free_listUU_72 :=
  fun free_list_11346 {A_11347} -> (f_11348) -> (__11349) ->
    (match __11349 with
    | nilUU_29  => ttU_22
    | consUU_30 hd_11350 tl_11351 =>
      let __11352 := ((f_11348) hd_11350) in
      ((free_list_11346) NULL f_11348 tl_11351))

#[program]
def free_listUL_71 :=
  fun free_list_11353 {A_11354} -> (f_11355) -> (__11356) ->
    (match __11356 with
    | nilUL_27  => ttU_22
    | consUL_28 hd_11357 tl_11358 =>
      let __11359 := ((f_11355) hd_11357) in
      ((free_list_11353) NULL f_11355 tl_11358))

#[program]
def free_listLL_69 :=
  fun free_list_11360 {A_11361} -> (f_11362) -> (__11363) ->
    (match __11363 with
    | nilLL_23  => ttU_22
    | consLL_24 hd_11364 tl_11365 =>
      let __11366 := ((f_11362) hd_11364) in
      ((free_list_11360) NULL f_11362 tl_11365))

#[program]
inductive existsUU_26 where
| exUU_34 of layout[R, N]

#[program]
inductive existsUL_25 where
| exUL_33 of layout[R, N]

#[program]
inductive existsLU_24 where
| exLU_32 of layout[R, N]

#[program]
inductive existsLL_23 where
| exLL_31 of layout[R, N]

#[program]
inductive exists0UU_30 where
| ex0UU_38 of layout[N, R]

#[program]
inductive exists0UL_29 where
| ex0UL_37 of layout[N, R]

#[program]
inductive exists0LU_28 where
| ex0LU_36 of layout[N, R]

#[program]
inductive exists0LL_27 where
| ex0LL_35 of layout[N, R]

#[program]
inductive exists1UU_34 where
| ex1UU_42 of layout[R, R]

#[program]
inductive exists1UL_33 where
| ex1UL_41 of layout[R, R]

#[program]
inductive exists1LU_32 where
| ex1LU_40 of layout[R, R]

#[program]
inductive exists1LL_31 where
| ex1LL_39 of layout[R, R]

#[logical]
def tensor0UU_76 := NULL

#[logical]
def tensor0UL_75 := NULL

#[logical]
def tensor0LU_74 := NULL

#[logical]
def tensor0LL_73 := NULL

#[logical]
def tensor1UU_80 := NULL

#[logical]
def tensor1UL_79 := NULL

#[logical]
def tensor1LU_78 := NULL

#[logical]
def tensor1LL_77 := NULL

#[program]
def pow_26 :=
  fun pow_11367 (x_11368) -> (y_11369) ->
    let loop_11370 :=
      fun loop_11371 (acc_11372) -> (y_11373) ->
        (match (__lte__ y_11373 0) with
        | true_4  => acc_11372
        | false_5  =>
          ((loop_11371) (__mul__ x_11368 acc_11372) (__sub__ y_11373 1)))
    in ((loop_11370) 1 y_11369)

#[program]
def powm_27 :=
  fun powm_11374 (x_11375) -> (y_11376) -> (m_11377) ->
    let loop_11378 :=
      fun loop_11379 (acc_11380) -> (y_11381) ->
        (match (__lte__ y_11381 0) with
        | true_4  => acc_11380
        | false_5  =>
          ((loop_11379)
            (__mod__ (__mul__ x_11375 acc_11380) m_11377) (__sub__ y_11381 1)))
    in ((loop_11378) 1 y_11376)

#[program]
def ord_28 := fun ord_11382 (c_11383) ->
                (__ord__ c_11383)

#[program]
def chr_29 := fun chr_11384 (i_11385) ->
                (__chr__ i_11385)

#[program]
def str_30 := fun str_11386 (c_11387) ->
                (__push__ "" c_11387)

#[program]
def strlen_31 := fun strlen_11388 (s_11389) ->
                   (__size__ s_11389)

#[program]
def string_of_int_32 :=
  fun string_of_int_11390 (i_11391) ->
    let aux_11392 :=
      fun aux_11393 (i_11394) ->
        (match (__lte__ 10 i_11394) with
        | true_4  =>
          let r_11395 := (__mod__ i_11394 10) in
          let i_11396 := (__div__ i_11394 10) in
          (__push__ ((aux_11393) i_11396)
            ((chr_29) (__add__ r_11395 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_11394 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_11391) with
    | true_4  => ((aux_11392) i_11391)
    | false_5  => (__cat__ "~" ((aux_11392) (__neg__ i_11391))))

#[program]
inductive vecU_36 where
| vnilU_45 of layout[]
| vconsU_46 of layout[N, R, R]

#[program]
inductive vecL_35 where
| vnilL_43 of layout[]
| vconsL_44 of layout[N, R, R]

#[program]
def hd_vec1_33 :=
  fun hd_vec1_11397 {A_11398} -> {n_11399} -> (__11400) ->
    (match __11400 with
    | vconsU_46 n_11401 hd_11402 tl_11403 => hd_11402)

#[program]
def hd_vec2_34 :=
  fun hd_vec2_11404 {A_11405} -> {n_11406} -> (xs_11407) ->
    (match xs_11407 with
    | vconsU_46 n_11408 hd_11409 tl_11410 => hd_11409)

#[program]
def hd_vec3_35 :=
  fun hd_vec3_11411 {A_11412} -> {n_11413} -> (xs_11414) ->
    (match xs_11414 with
    | vconsU_46 n_11415 hd_11416 tl_11417 => hd_11416)

#[program]
def vlength_36 :=
  fun vlength_11418 {A_11419} -> {n_11420} -> (__11421) ->
    (match __11421 with
    | vnilU_45  => (exUU_34 zero_6 NULL)
    | vconsU_46 n_11422 hd_11423 tl_11424 =>
      (match ((vlength_11418) NULL NULL tl_11424) with
      | exUU_34 m_11425 n_11426 => (exUU_34 (succ_7 m_11425) NULL)))

#[program]
def xs_37 := (vconsU_46 NULL zero_6 vnilU_45)

#[program]
def x_38 := ((hd_vec1_33) NULL NULL xs_37)

#[program]
def y_39 := ((hd_vec2_34) NULL NULL xs_37)

#[program]
def z_40 := ((hd_vec3_35) NULL NULL xs_37)

[trans2e success]

-----------------------------------------

def idU_42 := fun id_11634 (A_11635) -> (m_11636) -> m_11636

def idL_41 := fun id_11637 (A_11638) -> (m_11639) -> m_11639

def rwlUU_46 :=
  fun rwl_11640 (A_11641) -> (m_11642) -> (n_11643) -> (B_11644) ->
  (__11645) -> (__11646) -> __11646

def rwlUL_45 :=
  fun rwl_11647 (A_11648) -> (m_11649) -> (n_11650) -> (B_11651) ->
  (__11652) -> (__11653) -> __11653

def rwlLU_44 :=
  fun rwl_11654 (A_11655) -> (m_11656) -> (n_11657) -> (B_11658) ->
  (__11659) -> (__11660) -> __11660

def rwlLL_43 :=
  fun rwl_11661 (A_11662) -> (m_11663) -> (n_11664) -> (B_11665) ->
  (__11666) -> (__11667) -> __11667

def rwrUU_50 :=
  fun rwr_11668 (A_11669) -> (m_11670) -> (n_11671) -> (B_11672) ->
  (__11673) -> (__11674) -> __11674

def rwrUL_49 :=
  fun rwr_11675 (A_11676) -> (m_11677) -> (n_11678) -> (B_11679) ->
  (__11680) -> (__11681) -> __11681

def rwrLU_48 :=
  fun rwr_11682 (A_11683) -> (m_11684) -> (n_11685) -> (B_11686) ->
  (__11687) -> (__11688) -> __11688

def rwrLL_47 :=
  fun rwr_11689 (A_11690) -> (m_11691) -> (n_11692) -> (B_11693) ->
  (__11694) -> (__11695) -> __11695

def sing_elimUU_64 :=
  fun sing_elim_11696 (A_11697) -> (x_11698) -> (__11699) -> __11699

def sing_elimUL_63 :=
  fun sing_elim_11700 (A_11701) -> (x_11702) -> (__11703) -> __11703

def sing_elimLU_62 :=
  fun sing_elim_11704 (A_11705) -> (x_11706) -> (__11707) -> !!

def sing_elimLL_61 :=
  fun sing_elim_11708 (A_11709) -> (x_11710) -> (__11711) -> __11711

def not_11 :=
  fun not_11712 (__11713) ->
    (match __11713 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  fun and_11714 (__11715) -> (__11716) ->
    (match __11715 with
    | true_4 =>
      (match __11716 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  fun or_11717 (__11718) -> (__11719) ->
    (match __11718 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __11719 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  fun xor_11720 (__11721) -> (__11722) ->
    (match __11721 with
    | true_4 =>
      (match __11722 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __11722 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def lte_15 :=
  fun lte_11723 (__11724) -> (__11725) ->
    (match __11724 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __11724 with
      | succ_7 n_11726 =>
        (match __11725 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __11725 with
          | succ_7 n_11727 => ((lte_11723) n_11726 n_11727)))))

def lt_16 :=
  fun lt_11728 (x_11729) -> (y_11730) -> ((lte_15) (succ_7 x_11729) y_11730)

def pred_17 :=
  fun pred_11731 (__11732) ->
    (match __11732 with
    | zero_6 => constr0(zero_6)
    | _ => (match __11732 with
           | succ_7 n_11733 => n_11733))

def add_18 :=
  fun add_11734 (__11735) -> (__11736) ->
    (match __11735 with
    | zero_6 => __11736
    | _ =>
      (match __11735 with
      | succ_7 n_11737 => (succ_7 ((add_11734) n_11737 __11736))))

def sub_19 :=
  fun sub_11738 (__11739) -> (__11740) ->
    (match __11740 with
    | zero_6 => __11739
    | _ =>
      (match __11740 with
      | succ_7 n_11741 => ((sub_11738) ((pred_17) __11739) n_11741)))

def mul_20 :=
  fun mul_11742 (__11743) -> (__11744) ->
    (match __11743 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __11743 with
      | succ_7 n_11745 => ((add_18) __11744 ((mul_11742) n_11745 __11744))))

def div_21 :=
  fun div_11746 (x_11747) -> (y_11748) ->
    (match ((lt_16) x_11747 y_11748) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_11749 :=
        fun loop_11750 (x_11751) -> (y_11752) ->
          (match ((sub_19) x_11751 ((pred_17) y_11752)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_19) x_11751 ((pred_17) y_11752)) with
            | succ_7 n_11753 => (succ_7 ((loop_11750) n_11753 y_11752))))
      in ((loop_11749) x_11747 y_11748))

def rem_22 :=
  fun rem_11754 (x_11755) -> (y_11756) ->
    ((sub_19) x_11755 ((mul_20) ((div_21) x_11755 y_11756) y_11756))

def free_listUU_72 :=
  fun free_list_11757 (A_11758) -> (f_11759) -> (__11760) ->
    (match __11760 with
    | nilUU_29 => constr0(ttU_22)
    | _ =>
      (match __11760 with
      | consUU_30 hd_11761 tl_11762 =>
        let __11763 := ((f_11759) hd_11761) in
        ((free_list_11757) NULL f_11759 tl_11762)))

def free_listUL_71 :=
  fun free_list_11764 (A_11765) -> (f_11766) -> (__11767) ->
    (match __11767 with
    | nilUL_27 => constr0(ttU_22)
    | _ =>
      (match __11767 with
      | consUL_28 hd_11768 tl_11769 =>
        let __11770 := ((f_11766) hd_11768) in
        ((free_list_11764) NULL f_11766 tl_11769)))

def free_listLL_69 :=
  fun free_list_11771 (A_11772) -> (f_11773) -> (__11774) ->
    (match __11774 with
    | nilLL_23 => constr0(ttU_22)
    | _ =>
      (match __11774 with
      | consLL_24 hd_11775 tl_11776 =>
        let __11777 := ((f_11773) hd_11775) in
        ((free_list_11771) NULL f_11773 tl_11776)))

def pow_26 :=
  fun pow_11778 (x_11779) -> (y_11780) ->
    let loop_11781 :=
      fun loop_11782 (acc_11783) -> (y_11784) ->
        (match (__lte__ y_11784 0) with
        | true_4 => acc_11783
        | false_5 =>
          ((loop_11782) (__mul__ x_11779 acc_11783) (__sub__ y_11784 1)))
    in ((loop_11781) 1 y_11780)

def powm_27 :=
  fun powm_11785 (x_11786) -> (y_11787) -> (m_11788) ->
    let loop_11789 :=
      fun loop_11790 (acc_11791) -> (y_11792) ->
        (match (__lte__ y_11792 0) with
        | true_4 => acc_11791
        | false_5 =>
          ((loop_11790)
            (__mod__ (__mul__ x_11786 acc_11791) m_11788) (__sub__ y_11792 1)))
    in ((loop_11789) 1 y_11787)

def ord_28 := fun ord_11793 (c_11794) -> (__ord__ c_11794)

def chr_29 := fun chr_11795 (i_11796) -> (__chr__ i_11796)

def str_30 := fun str_11797 (c_11798) -> (__push__ "" c_11798)

def strlen_31 := fun strlen_11799 (s_11800) -> (__size__ s_11800)

def string_of_int_32 :=
  fun string_of_int_11801 (i_11802) ->
    let aux_11803 :=
      fun aux_11804 (i_11805) ->
        (match (__lte__ 10 i_11805) with
        | true_4 =>
          let r_11806 := (__mod__ i_11805 10) in
          let i_11807 := (__div__ i_11805 10) in
          (__push__ ((aux_11804) i_11807)
            ((chr_29) (__add__ r_11806 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_11805 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_11802) with
    | true_4 => ((aux_11803) i_11802)
    | false_5 => (__cat__ "~" ((aux_11803) (__neg__ i_11802))))

def hd_vec1_33 :=
  fun hd_vec1_11808 (A_11809) -> (n_11810) -> (__11811) ->
    (match __11811 with
    | vconsU_46 hd_11812 tl_11813 => hd_11812)

def hd_vec2_34 :=
  fun hd_vec2_11814 (A_11815) -> (n_11816) -> (xs_11817) ->
    (match xs_11817 with
    | vconsU_46 hd_11818 tl_11819 => hd_11818)

def hd_vec3_35 :=
  fun hd_vec3_11820 (A_11821) -> (n_11822) -> (xs_11823) ->
    (match xs_11823 with
    | vconsU_46 hd_11824 tl_11825 => hd_11824)

def vlength_36 :=
  fun vlength_11826 (A_11827) -> (n_11828) -> (__11829) ->
    (match __11829 with
    | vnilU_45 => constr0(zero_6)
    | _ =>
      (match __11829 with
      | vconsU_46 hd_11830 tl_11831 =>
        (succ_7 ((vlength_11826) NULL NULL tl_11831))))

def xs_37 := (vconsU_46 constr0(zero_6) constr0(vnilU_45))

def x_38 := ((hd_vec1_33) NULL NULL xs_37)

def y_39 := ((hd_vec2_34) NULL NULL xs_37)

def z_40 := ((hd_vec3_35) NULL NULL xs_37)

[trans23 success]

-----------------------------------------

def idU_42 := lam (A_12030) -> (m_12031) -> m_12031

def idL_41 := lam (A_12032) -> (m_12033) -> m_12033

def rwlUU_46 :=
  lam (A_12034) -> (m_12035) -> (n_12036) -> (B_12037) -> (__12038) ->
  (__12039) -> __12039

def rwlUL_45 :=
  lam (A_12040) -> (m_12041) -> (n_12042) -> (B_12043) -> (__12044) ->
  (__12045) -> __12045

def rwlLU_44 :=
  lam (A_12046) -> (m_12047) -> (n_12048) -> (B_12049) -> (__12050) ->
  (__12051) -> __12051

def rwlLL_43 :=
  lam (A_12052) -> (m_12053) -> (n_12054) -> (B_12055) -> (__12056) ->
  (__12057) -> __12057

def rwrUU_50 :=
  lam (A_12058) -> (m_12059) -> (n_12060) -> (B_12061) -> (__12062) ->
  (__12063) -> __12063

def rwrUL_49 :=
  lam (A_12064) -> (m_12065) -> (n_12066) -> (B_12067) -> (__12068) ->
  (__12069) -> __12069

def rwrLU_48 :=
  lam (A_12070) -> (m_12071) -> (n_12072) -> (B_12073) -> (__12074) ->
  (__12075) -> __12075

def rwrLL_47 :=
  lam (A_12076) -> (m_12077) -> (n_12078) -> (B_12079) -> (__12080) ->
  (__12081) -> __12081

def sing_elimUU_64 := lam (A_12082) -> (x_12083) -> (__12084) -> __12084

def sing_elimUL_63 := lam (A_12085) -> (x_12086) -> (__12087) -> __12087

def sing_elimLU_62 := lam (A_12088) -> (x_12089) -> (__12090) -> !!

def sing_elimLL_61 := lam (A_12091) -> (x_12092) -> (__12093) -> __12093

def not_11 :=
  lam (__12094) ->
    (match __12094 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  lam (__12095) -> (__12096) ->
    (match __12095 with
    | true_4 =>
      (match __12096 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  lam (__12097) -> (__12098) ->
    (match __12097 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __12098 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  lam (__12099) -> (__12100) ->
    (match __12099 with
    | true_4 =>
      (match __12100 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __12100 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def lte_15 :=
  fun lte_12101 (__12102) -> (__12103) ->
    (match __12102 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __12102 with
      | succ_7 n_12104 =>
        (match __12103 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __12103 with
          | succ_7 n_12105 => ((lte_12101) n_12104 n_12105)))))

def lt_16 :=
  lam (x_12106) -> (y_12107) -> ((lte_15) (succ_7 x_12106) y_12107)

def pred_17 :=
  lam (__12108) ->
    (match __12108 with
    | zero_6 => constr0(zero_6)
    | _ => (match __12108 with
           | succ_7 n_12109 => n_12109))

def add_18 :=
  fun add_12110 (__12111) -> (__12112) ->
    (match __12111 with
    | zero_6 => __12112
    | _ =>
      (match __12111 with
      | succ_7 n_12113 => (succ_7 ((add_12110) n_12113 __12112))))

def sub_19 :=
  fun sub_12114 (__12115) -> (__12116) ->
    (match __12116 with
    | zero_6 => __12115
    | _ =>
      (match __12116 with
      | succ_7 n_12117 => ((sub_12114) ((pred_17) __12115) n_12117)))

def mul_20 :=
  fun mul_12118 (__12119) -> (__12120) ->
    (match __12119 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __12119 with
      | succ_7 n_12121 => ((add_18) __12120 ((mul_12118) n_12121 __12120))))

def div_21 :=
  lam (x_12122) -> (y_12123) ->
    (match ((lt_16) x_12122 y_12123) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_12124 :=
        fun loop_12125 (x_12126) -> (y_12127) ->
          (match ((sub_19) x_12126 ((pred_17) y_12127)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_19) x_12126 ((pred_17) y_12127)) with
            | succ_7 n_12128 => (succ_7 ((loop_12125) n_12128 y_12127))))
      in ((loop_12124) x_12122 y_12123))

def rem_22 :=
  lam (x_12129) -> (y_12130) ->
    ((sub_19) x_12129 ((mul_20) ((div_21) x_12129 y_12130) y_12130))

def free_listUU_72 :=
  fun free_list_12131 (A_12132) -> (f_12133) -> (__12134) ->
    (match __12134 with
    | nilUU_29 => constr0(ttU_22)
    | _ =>
      (match __12134 with
      | consUU_30 hd_12135 tl_12136 =>
        let __12137 := ((f_12133) hd_12135) in
        ((free_list_12131) NULL f_12133 tl_12136)))

def free_listUL_71 :=
  fun free_list_12138 (A_12139) -> (f_12140) -> (__12141) ->
    (match __12141 with
    | nilUL_27 => constr0(ttU_22)
    | _ =>
      (match __12141 with
      | consUL_28 hd_12142 tl_12143 =>
        let __12144 := ((f_12140) hd_12142) in
        ((free_list_12138) NULL f_12140 tl_12143)))

def free_listLL_69 :=
  fun free_list_12145 (A_12146) -> (f_12147) -> (__12148) ->
    (match __12148 with
    | nilLL_23 => constr0(ttU_22)
    | _ =>
      (match __12148 with
      | consLL_24 hd_12149 tl_12150 =>
        let __12151 := ((f_12147) hd_12149) in
        ((free_list_12145) NULL f_12147 tl_12150)))

def pow_26 :=
  lam (x_12152) -> (y_12153) ->
    let loop_12154 :=
      fun loop_12155 (acc_12156) -> (y_12157) ->
        (match (__lte__ y_12157 0) with
        | true_4 => acc_12156
        | false_5 =>
          ((loop_12155) (__mul__ x_12152 acc_12156) (__sub__ y_12157 1)))
    in ((loop_12154) 1 y_12153)

def powm_27 :=
  lam (x_12158) -> (y_12159) -> (m_12160) ->
    let loop_12161 :=
      fun loop_12162 (acc_12163) -> (y_12164) ->
        (match (__lte__ y_12164 0) with
        | true_4 => acc_12163
        | false_5 =>
          ((loop_12162)
            (__mod__ (__mul__ x_12158 acc_12163) m_12160) (__sub__ y_12164 1)))
    in ((loop_12161) 1 y_12159)

def ord_28 := lam (c_12165) -> (__ord__ c_12165)

def chr_29 := lam (i_12166) -> (__chr__ i_12166)

def str_30 := lam (c_12167) -> (__push__ "" c_12167)

def strlen_31 := lam (s_12168) -> (__size__ s_12168)

def string_of_int_32 :=
  lam (i_12169) ->
    let aux_12170 :=
      fun aux_12171 (i_12172) ->
        (match (__lte__ 10 i_12172) with
        | true_4 =>
          let r_12173 := (__mod__ i_12172 10) in
          let i_12174 := (__div__ i_12172 10) in
          (__push__ ((aux_12171) i_12174)
            ((chr_29) (__add__ r_12173 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_12172 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_12169) with
    | true_4 => ((aux_12170) i_12169)
    | false_5 => (__cat__ "~" ((aux_12170) (__neg__ i_12169))))

def hd_vec1_33 :=
  lam (A_12175) -> (n_12176) -> (__12177) ->
    (match __12177 with
    | vconsU_46 hd_12178 tl_12179 => hd_12178)

def hd_vec2_34 :=
  lam (A_12180) -> (n_12181) -> (xs_12182) ->
    (match xs_12182 with
    | vconsU_46 hd_12183 tl_12184 => hd_12183)

def hd_vec3_35 :=
  lam (A_12185) -> (n_12186) -> (xs_12187) ->
    (match xs_12187 with
    | vconsU_46 hd_12188 tl_12189 => hd_12188)

def vlength_36 :=
  fun vlength_12190 (A_12191) -> (n_12192) -> (__12193) ->
    (match __12193 with
    | vnilU_45 => constr0(zero_6)
    | _ =>
      (match __12193 with
      | vconsU_46 hd_12194 tl_12195 =>
        (succ_7 ((vlength_12190) NULL NULL tl_12195))))

def xs_37 := (vconsU_46 constr0(zero_6) constr0(vnilU_45))

def x_38 := ((hd_vec1_33) NULL NULL xs_37)

def y_39 := ((hd_vec2_34) NULL NULL xs_37)

def z_40 := ((hd_vec3_35) NULL NULL xs_37)

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match(__99){
    zero_6 => {
      x_101 := true_4;
    }
    _ => {
      match[U](__99){
        succ_7(n_103) => {
          match(__100){
            zero_6 => {
              x_104 := false_5;
            }
            _ => {
              match[U](__100){
                succ_7(n_106) => {
                  x_107 := lte_98(n_103, n_106);
                  x_105 := x_107;
                }
              }
              x_104 := x_105;
            }
          }
          x_102 := x_104;
        }
      }
      x_101 := x_102;
    }
  }
  return x_101;
}

fn lt_108(x_109%U, y_110%U) {
  x_112 := mkconstr(succ_7, [x_109]);
  x_111 := lte_98(x_112, y_110);
  return x_111;
}

fn pred_113(__114%U) {
  match(__114){
    zero_6 => {
      x_115 := zero_6;
    }
    _ => {
      match[U](__114){ succ_7(n_117) => {
                         x_116 := n_117;
                       } }
      x_115 := x_116;
    }
  }
  return x_115;
}

fn add_118(__119%U, __120%U) {
  match(__119){
    zero_6 => {
      x_121 := __120;
    }
    _ => {
      match[U](__119){
        succ_7(n_123) => {
          x_124 := add_118(n_123, __120);
          x_125 := mkconstr(succ_7, [x_124]);
          x_122 := x_125;
        }
      }
      x_121 := x_122;
    }
  }
  return x_121;
}

fn sub_126(__127%U, __128%U) {
  match(__128){
    zero_6 => {
      x_129 := __127;
    }
    _ => {
      match[U](__128){
        succ_7(n_131) => {
          x_133 := pred_113(__127);
          x_132 := sub_126(x_133, n_131);
          x_130 := x_132;
        }
      }
      x_129 := x_130;
    }
  }
  return x_129;
}

fn mul_134(__135%U, __136%U) {
  match(__135){
    zero_6 => {
      x_137 := zero_6;
    }
    _ => {
      match[U](__135){
        succ_7(n_139) => {
          x_141 := mul_134(n_139, __136);
          x_140 := add_118(__136, x_141);
          x_138 := x_140;
        }
      }
      x_137 := x_138;
    }
  }
  return x_137;
}

fn div_142(x_143%U, y_144%U) {
  x_146 := lt_108(x_143, y_144);
  match(x_146){
    true_4 => {
      x_145 := zero_6;
    }
    false_5 => {
      x_148 :=
        fn loop_149(x_150%U, y_151%U) {
          x_154 := pred_113(y_151);
          x_153 := sub_126(x_150, x_154);
          match(x_153){
            zero_6 => {
              x_152 := zero_6;
            }
            _ => {
              x_157 := pred_113(y_151);
              x_156 := sub_126(x_150, x_157);
              match[U](x_156){
                succ_7(n_158) => {
                  x_159 := loop_149(n_158, y_151);
                  x_160 := mkconstr(succ_7, [x_159]);
                  x_155 := x_160;
                }
              }
              x_152 := x_155;
            }
          }
          return x_152;
        };
      loop_147 := x_148;
      x_161 := loop_147(x_143, y_144);
      x_145 := x_161;
    }
  }
  return x_145;
}

fn rem_162(x_163%U, y_164%U) {
  x_167 := div_142(x_163, y_164);
  x_166 := mul_134(x_167, y_164);
  x_165 := sub_126(x_163, x_166);
  return x_165;
}

fn free_listUU_168(A_169%U, f_170%U, __171%U) {
  match(__171){
    nilUU_29 => {
      x_172 := ttU_22;
    }
    _ => {
      match[U](__171){
        consUU_30(hd_174, tl_175) => {
          x_177 := f_170(hd_174);
          __176 := x_177;
          x_178 := free_listUU_168(NULL, f_170, tl_175);
          x_173 := x_178;
        }
      }
      x_172 := x_173;
    }
  }
  return x_172;
}

fn free_listUL_179(A_180%U, f_181%U, __182%U) {
  match(__182){
    nilUL_27 => {
      x_183 := ttU_22;
    }
    _ => {
      match[L](__182){
        consUL_28(hd_185, tl_186) => {
          x_188 := f_181(hd_185);
          __187 := x_188;
          x_189 := free_listUL_179(NULL, f_181, tl_186);
          x_184 := x_189;
        }
      }
      x_183 := x_184;
    }
  }
  return x_183;
}

fn free_listLL_190(A_191%U, f_192%U, __193%U) {
  match(__193){
    nilLL_23 => {
      x_194 := ttU_22;
    }
    _ => {
      match[L](__193){
        consLL_24(hd_196, tl_197) => {
          x_199 := f_192(hd_196);
          __198 := x_199;
          x_200 := free_listLL_190(NULL, f_192, tl_197);
          x_195 := x_200;
        }
      }
      x_194 := x_195;
    }
  }
  return x_194;
}

fn pow_201(x_202%U, y_203%U) {
  x_205 :=
    fn loop_206(acc_207%U, y_208%U) {
      x_210 := lte(y_208, 0);
      match(x_210){
        true_4 => {
          x_209 := acc_207;
        }
        false_5 => {
          x_212 := mul(x_202, acc_207);
          x_213 := sub(y_208, 1);
          x_211 := loop_206(x_212, x_213);
          x_209 := x_211;
        }
      }
      return x_209;
    };
  loop_204 := x_205;
  x_214 := loop_204(1, y_203);
  return x_214;
}

fn powm_215(x_216%U, y_217%U, m_218%U) {
  x_220 :=
    fn loop_221(acc_222%U, y_223%U) {
      x_225 := lte(y_223, 0);
      match(x_225){
        true_4 => {
          x_224 := acc_222;
        }
        false_5 => {
          x_228 := mul(x_216, acc_222);
          x_227 := mod(x_228, m_218);
          x_229 := sub(y_223, 1);
          x_226 := loop_221(x_227, x_229);
          x_224 := x_226;
        }
      }
      return x_224;
    };
  loop_219 := x_220;
  x_230 := loop_219(1, y_217);
  return x_230;
}

fn ord_231(c_232%U) {
  x_233 := ord(c_232);
  return x_233;
}

fn chr_234(i_235%U) {
  x_236 := chr(i_235);
  return x_236;
}

fn str_237(c_238%U) {
  x_240 := str("");
  x_239 := push(x_240, c_238);
  return x_239;
}

fn strlen_241(s_242%U) {
  x_243 := size(s_242);
  return x_243;
}

fn string_of_int_244(i_245%U) {
  x_247 :=
    fn aux_248(i_249%U) {
      x_251 := lte(10, i_249);
      match(x_251){
        true_4 => {
          x_253 := mod(i_249, 10);
          r_252 := x_253;
          x_255 := div(i_249, 10);
          i_254 := x_255;
          x_257 := aux_248(i_254);
          x_260 := ord_231(0);
          x_259 := add(r_252, x_260);
          x_258 := chr_234(x_259);
          x_256 := push(x_257, x_258);
          x_250 := x_256;
        }
        false_5 => {
          x_264 := ord_231(0);
          x_263 := add(i_249, x_264);
          x_262 := chr_234(x_263);
          x_261 := str_237(x_262);
          x_250 := x_261;
        }
      }
      return x_250;
    };
  aux_246 := x_247;
  x_266 := lte(0, i_245);
  match(x_266){
    true_4 => {
      x_267 := aux_246(i_245);
      x_265 := x_267;
    }
    false_5 => {
      x_269 := str("~");
      x_271 := neg(i_245);
      x_270 := aux_246(x_271);
      x_268 := cat(x_269, x_270);
      x_265 := x_268;
    }
  }
  return x_265;
}

fn hd_vec1_272(A_273%U, n_274%U, __275%U) {
  match[U](__275){ vconsU_46(hd_277, tl_278) => {
                     x_276 := hd_277;
                   } }
  return x_276;
}

fn hd_vec2_279(A_280%U, n_281%U, xs_282%U) {
  match[U](xs_282){ vconsU_46(hd_284, tl_285) => {
                      x_283 := hd_284;
                    } }
  return x_283;
}

fn hd_vec3_286(A_287%U, n_288%U, xs_289%U) {
  match[U](xs_289){ vconsU_46(hd_291, tl_292) => {
                      x_290 := hd_291;
                    } }
  return x_290;
}

fn vlength_293(A_294%U, n_295%U, __296%U) {
  match(__296){
    vnilU_45 => {
      x_297 := zero_6;
    }
    _ => {
      match[U](__296){
        vconsU_46(hd_299, tl_300) => {
          x_301 := vlength_293(NULL, NULL, tl_300);
          x_302 := mkconstr(succ_7, [x_301]);
          x_298 := x_302;
        }
      }
      x_297 := x_298;
    }
  }
  return x_297;
}

xs_303 := {
  x_304 := mkconstr(vconsU_46, [zero_6, vnilU_45]);
  return x_304;
};

x_305 := {
  x_306 := hd_vec1_272(NULL, NULL, xs_303);
  return x_306;
};

y_307 := {
  x_308 := hd_vec2_279(NULL, NULL, xs_303);
  return x_308;
};

z_309 := {
  x_310 := hd_vec3_286(NULL, NULL, xs_303);
  return x_310;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match(__99){
    zero_6 => {
      x_101 := true_4;
    }
    _ => {
      match[U](__99){
        succ_7(n_103) => {
          match(__100){
            zero_6 => {
              x_104 := false_5;
            }
            _ => {
              match[U](__100){
                succ_7(n_106) => {
                  x_107 := lte_98(n_103, n_106);
                  x_105 := x_107;
                }
              }
              x_104 := x_105;
            }
          }
          x_102 := x_104;
        }
      }
      x_101 := x_102;
    }
  }
  return x_101;
}

fn lt_108(x_109%U, y_110%U) {
  x_112 := mkconstr(succ_7, [x_109]);
  x_111 := lte_98(x_112, y_110);
  return x_111;
}

fn pred_113(__114%U) {
  match(__114){
    zero_6 => {
      x_115 := zero_6;
    }
    _ => {
      match[U](__114){ succ_7(n_117) => {
                         x_116 := n_117;
                       } }
      x_115 := x_116;
    }
  }
  return x_115;
}

fn add_118(__119%U, __120%U) {
  match(__119){
    zero_6 => {
      x_121 := __120;
    }
    _ => {
      match[U](__119){
        succ_7(n_123) => {
          x_124 := add_118(n_123, __120);
          x_125 := mkconstr(succ_7, [x_124]);
          x_122 := x_125;
        }
      }
      x_121 := x_122;
    }
  }
  return x_121;
}

fn sub_126(__127%U, __128%U) {
  match(__128){
    zero_6 => {
      x_129 := __127;
    }
    _ => {
      match[U](__128){
        succ_7(n_131) => {
          x_133 := pred_113(__127);
          x_132 := sub_126(x_133, n_131);
          x_130 := x_132;
        }
      }
      x_129 := x_130;
    }
  }
  return x_129;
}

fn mul_134(__135%U, __136%U) {
  match(__135){
    zero_6 => {
      x_137 := zero_6;
    }
    _ => {
      match[U](__135){
        succ_7(n_139) => {
          x_141 := mul_134(n_139, __136);
          x_140 := add_118(__136, x_141);
          x_138 := x_140;
        }
      }
      x_137 := x_138;
    }
  }
  return x_137;
}

fn div_142(x_143%U, y_144%U) {
  x_146 := lt_108(x_143, y_144);
  match(x_146){
    true_4 => {
      x_145 := zero_6;
    }
    false_5 => {
      x_148 :=
        fn loop_149(x_150%U, y_151%U) {
          x_154 := pred_113(y_151);
          x_153 := sub_126(x_150, x_154);
          match(x_153){
            zero_6 => {
              x_152 := zero_6;
            }
            _ => {
              x_157 := pred_113(y_151);
              x_156 := sub_126(x_150, x_157);
              match[U](x_156){
                succ_7(n_158) => {
                  x_159 := loop_149(n_158, y_151);
                  x_160 := mkconstr(succ_7, [x_159]);
                  x_155 := x_160;
                }
              }
              x_152 := x_155;
            }
          }
          return x_152;
        };
      loop_147 := x_148;
      x_161 := loop_147(x_143, y_144);
      x_145 := x_161;
    }
  }
  return x_145;
}

fn rem_162(x_163%U, y_164%U) {
  x_167 := div_142(x_163, y_164);
  x_166 := mul_134(x_167, y_164);
  x_165 := sub_126(x_163, x_166);
  return x_165;
}

fn free_listUU_168(A_169%U, f_170%U, __171%U) {
  match(__171){
    nilUU_29 => {
      x_172 := ttU_22;
    }
    _ => {
      match[U](__171){
        consUU_30(hd_174, tl_175) => {
          x_177 := f_170(hd_174);
          __176 := x_177;
          x_178 := free_listUU_168(NULL, f_170, tl_175);
          x_173 := x_178;
        }
      }
      x_172 := x_173;
    }
  }
  return x_172;
}

fn free_listUL_179(A_180%U, f_181%U, __182%U) {
  match(__182){
    nilUL_27 => {
      x_183 := ttU_22;
    }
    _ => {
      match[L](__182){
        consUL_28(hd_185, tl_186) => {
          x_188 := f_181(hd_185);
          __187 := x_188;
          x_189 := free_listUL_179(NULL, f_181, tl_186);
          x_184 := x_189;
          free(__182);
        }
      }
      x_183 := x_184;
    }
  }
  return x_183;
}

fn free_listLL_190(A_191%U, f_192%U, __193%U) {
  match(__193){
    nilLL_23 => {
      x_194 := ttU_22;
    }
    _ => {
      match[L](__193){
        consLL_24(hd_196, tl_197) => {
          x_199 := f_192(hd_196);
          __198 := x_199;
          x_200 := free_listLL_190(NULL, f_192, tl_197);
          x_195 := x_200;
          free(__193);
        }
      }
      x_194 := x_195;
    }
  }
  return x_194;
}

fn pow_201(x_202%U, y_203%U) {
  x_205 :=
    fn loop_206(acc_207%U, y_208%U) {
      x_210 := lte(y_208, 0);
      match(x_210){
        true_4 => {
          x_209 := acc_207;
        }
        false_5 => {
          x_212 := mul(x_202, acc_207);
          x_213 := sub(y_208, 1);
          x_211 := loop_206(x_212, x_213);
          x_209 := x_211;
        }
      }
      return x_209;
    };
  loop_204 := x_205;
  x_214 := loop_204(1, y_203);
  return x_214;
}

fn powm_215(x_216%U, y_217%U, m_218%U) {
  x_220 :=
    fn loop_221(acc_222%U, y_223%U) {
      x_225 := lte(y_223, 0);
      match(x_225){
        true_4 => {
          x_224 := acc_222;
        }
        false_5 => {
          x_228 := mul(x_216, acc_222);
          x_227 := mod(x_228, m_218);
          x_229 := sub(y_223, 1);
          x_226 := loop_221(x_227, x_229);
          x_224 := x_226;
        }
      }
      return x_224;
    };
  loop_219 := x_220;
  x_230 := loop_219(1, y_217);
  return x_230;
}

fn ord_231(c_232%U) {
  x_233 := ord(c_232);
  return x_233;
}

fn chr_234(i_235%U) {
  x_236 := chr(i_235);
  return x_236;
}

fn str_237(c_238%U) {
  x_240 := str("");
  x_239 := push(x_240, c_238);
  return x_239;
}

fn strlen_241(s_242%U) {
  x_243 := size(s_242);
  return x_243;
}

fn string_of_int_244(i_245%U) {
  x_247 :=
    fn aux_248(i_249%U) {
      x_251 := lte(10, i_249);
      match(x_251){
        true_4 => {
          x_253 := mod(i_249, 10);
          r_252 := x_253;
          x_255 := div(i_249, 10);
          i_254 := x_255;
          x_257 := aux_248(i_254);
          x_260 := ord_231(0);
          x_259 := add(r_252, x_260);
          x_258 := chr_234(x_259);
          x_256 := push(x_257, x_258);
          x_250 := x_256;
        }
        false_5 => {
          x_264 := ord_231(0);
          x_263 := add(i_249, x_264);
          x_262 := chr_234(x_263);
          x_261 := str_237(x_262);
          x_250 := x_261;
        }
      }
      return x_250;
    };
  aux_246 := x_247;
  x_266 := lte(0, i_245);
  match(x_266){
    true_4 => {
      x_267 := aux_246(i_245);
      x_265 := x_267;
    }
    false_5 => {
      x_269 := str("~");
      x_271 := neg(i_245);
      x_270 := aux_246(x_271);
      x_268 := cat(x_269, x_270);
      x_265 := x_268;
    }
  }
  return x_265;
}

fn hd_vec1_272(A_273%U, n_274%U, __275%U) {
  match[U](__275){ vconsU_46(hd_277, tl_278) => {
                     x_276 := hd_277;
                   } }
  return x_276;
}

fn hd_vec2_279(A_280%U, n_281%U, xs_282%U) {
  match[U](xs_282){ vconsU_46(hd_284, tl_285) => {
                      x_283 := hd_284;
                    } }
  return x_283;
}

fn hd_vec3_286(A_287%U, n_288%U, xs_289%U) {
  match[U](xs_289){ vconsU_46(hd_291, tl_292) => {
                      x_290 := hd_291;
                    } }
  return x_290;
}

fn vlength_293(A_294%U, n_295%U, __296%U) {
  match(__296){
    vnilU_45 => {
      x_297 := zero_6;
    }
    _ => {
      match[U](__296){
        vconsU_46(hd_299, tl_300) => {
          x_301 := vlength_293(NULL, NULL, tl_300);
          x_302 := mkconstr(succ_7, [x_301]);
          x_298 := x_302;
        }
      }
      x_297 := x_298;
    }
  }
  return x_297;
}

xs_303 := {
  x_304 := mkconstr(vconsU_46, [zero_6, vnilU_45]);
  return x_304;
};

x_305 := {
  x_306 := hd_vec1_272(NULL, NULL, xs_303);
  return x_306;
};

y_307 := {
  x_308 := hd_vec2_279(NULL, NULL, xs_303);
  return x_308;
};

z_309 := {
  x_310 := hd_vec3_286(NULL, NULL, xs_303);
  return x_310;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_311(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_312(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_313 := fn0_idU_311(A_2, m_3);
  return x_313;
}

fn fn0_idL_314(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_315(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_316 := fn0_idL_314(A_5, m_6);
  return x_316;
}

fn fn0_rwlUU_317(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_318(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_319 := fn0_rwlUU_317(A_8, m_9, n_10, B_11, __12, __13);
  return x_319;
}

fn fn0_rwlUL_320(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_321(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_322 := fn0_rwlUL_320(A_15, m_16, n_17, B_18, __19, __20);
  return x_322;
}

fn fn0_rwlLU_323(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_324(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_325 := fn0_rwlLU_323(A_22, m_23, n_24, B_25, __26, __27);
  return x_325;
}

fn fn0_rwlLL_326(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_327(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_328 := fn0_rwlLL_326(A_29, m_30, n_31, B_32, __33, __34);
  return x_328;
}

fn fn0_rwrUU_329(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_330(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_331 := fn0_rwrUU_329(A_36, m_37, n_38, B_39, __40, __41);
  return x_331;
}

fn fn0_rwrUL_332(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_333(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_334 := fn0_rwrUL_332(A_43, m_44, n_45, B_46, __47, __48);
  return x_334;
}

fn fn0_rwrLU_335(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_336(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_337 := fn0_rwrLU_335(A_50, m_51, n_52, B_53, __54, __55);
  return x_337;
}

fn fn0_rwrLL_338(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_339(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_340 := fn0_rwrLL_338(A_57, m_58, n_59, B_60, __61, __62);
  return x_340;
}

fn fn0_sing_elimUU_341(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_342(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_343 := fn0_sing_elimUU_341(A_64, x_65, __66);
  return x_343;
}

fn fn0_sing_elimUL_344(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_345(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_346 := fn0_sing_elimUL_344(A_68, x_69, __70);
  return x_346;
}

fn fn0_sing_elimLU_347(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_348(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_349 := fn0_sing_elimLU_347(A_72, x_73, __74);
  return x_349;
}

fn fn0_sing_elimLL_350(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_351(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_352 := fn0_sing_elimLL_350(A_76, x_77, __78);
  return x_352;
}

fn fn0_not_353(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_354(env) {
  __80 := env[1];
  x_355 := fn0_not_353(__80);
  return x_355;
}

fn fn0_and_356(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_357(env) {
  __83 := env[1];
  __84 := env[2];
  x_358 := fn0_and_356(__83, __84);
  return x_358;
}

fn fn0_or_359(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_360(env) {
  __88 := env[1];
  __89 := env[2];
  x_361 := fn0_or_359(__88, __89);
  return x_361;
}

fn fn0_xor_362(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_363(env) {
  __93 := env[1];
  __94 := env[2];
  x_364 := fn0_xor_362(__93, __94);
  return x_364;
}

fn fn0_lte_365(__99, __100) {
  switch(__99){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    _ => {
      getbox(n_103, __99, 0);
      switch(__100){
        zero_6 => {
          move1(x_104, false_5);
          break;
        }
        _ => {
          getbox(n_106, __100, 0);
          x_107 := fn0_lte_365(n_103, n_106);
          move1(x_105, x_107);
          move1(x_104, x_105);
          break;
        }
      }
      move1(x_102, x_104);
      move1(x_101, x_102);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_366(env) {
  __99 := env[1];
  __100 := env[2];
  x_367 := fn0_lte_365(__99, __100);
  return x_367;
}

fn fn0_lt_368(x_109, y_110) {
  mkbox(x_112, succ_7, 1);
  setbox(x_112, x_109, 0);
  x_111 := fn0_lte_365(x_112, y_110);
  return x_111;
}

fn fn1_lt_369(env) {
  x_109 := env[1];
  y_110 := env[2];
  x_370 := fn0_lt_368(x_109, y_110);
  return x_370;
}

fn fn0_pred_371(__114) {
  switch(__114){
    zero_6 => {
      move1(x_115, zero_6);
      break;
    }
    _ => {
      getbox(n_117, __114, 0);
      move1(x_116, n_117);
      move1(x_115, x_116);
      break;
    }
  }
  return x_115;
}

fn fn1_pred_372(env) {
  __114 := env[1];
  x_373 := fn0_pred_371(__114);
  return x_373;
}

fn fn0_add_374(__119, __120) {
  switch(__119){
    zero_6 => {
      move1(x_121, __120);
      break;
    }
    _ => {
      getbox(n_123, __119, 0);
      x_124 := fn0_add_374(n_123, __120);
      mkbox(x_125, succ_7, 1);
      setbox(x_125, x_124, 0);
      move1(x_122, x_125);
      move1(x_121, x_122);
      break;
    }
  }
  return x_121;
}

fn fn1_add_375(env) {
  __119 := env[1];
  __120 := env[2];
  x_376 := fn0_add_374(__119, __120);
  return x_376;
}

fn fn0_sub_377(__127, __128) {
  switch(__128){
    zero_6 => {
      move1(x_129, __127);
      break;
    }
    _ => {
      getbox(n_131, __128, 0);
      x_133 := fn0_pred_371(__127);
      x_132 := fn0_sub_377(x_133, n_131);
      move1(x_130, x_132);
      move1(x_129, x_130);
      break;
    }
  }
  return x_129;
}

fn fn1_sub_378(env) {
  __127 := env[1];
  __128 := env[2];
  x_379 := fn0_sub_377(__127, __128);
  return x_379;
}

fn fn0_mul_380(__135, __136) {
  switch(__135){
    zero_6 => {
      move1(x_137, zero_6);
      break;
    }
    _ => {
      getbox(n_139, __135, 0);
      x_141 := fn0_mul_380(n_139, __136);
      x_140 := fn0_add_374(__136, x_141);
      move1(x_138, x_140);
      move1(x_137, x_138);
      break;
    }
  }
  return x_137;
}

fn fn1_mul_381(env) {
  __135 := env[1];
  __136 := env[2];
  x_382 := fn0_mul_380(__135, __136);
  return x_382;
}

fn fn0_div_383(x_143, y_144) {
  x_146 := fn0_lt_368(x_143, y_144);
  switch(x_146){
    true_4 => {
      move1(x_145, zero_6);
      break;
    }
    false_5 => {
      mkclo1(x_148, fn1_loop_385, fvc:=2, argc:=2);
      setclo(x_148, pred_113, 1);
      setclo(x_148, sub_126, 2);
      move1(loop_147, x_148);
      appc(x_389, loop_147, x_143);
      appc(x_390, x_389, y_144);
      move1(x_161, x_390);
      move1(x_145, x_161);
      break;
    }
  }
  return x_145;
}

fn fn1_div_384(env) {
  x_143 := env[1];
  y_144 := env[2];
  x_392 := fn0_div_383(x_143, y_144);
  return x_392;
}

fn fn0_rem_393(x_163, y_164) {
  x_167 := fn0_div_383(x_163, y_164);
  x_166 := fn0_mul_380(x_167, y_164);
  x_165 := fn0_sub_377(x_163, x_166);
  return x_165;
}

fn fn1_rem_394(env) {
  x_163 := env[1];
  y_164 := env[2];
  x_395 := fn0_rem_393(x_163, y_164);
  return x_395;
}

fn fn0_free_listUU_396(A_169, f_170, __171) {
  switch(__171){
    nilUU_29 => {
      move1(x_172, ttU_22);
      break;
    }
    _ => {
      getbox(hd_174, __171, 0);
      getbox(tl_175, __171, 1);
      appc(x_398, f_170, hd_174);
      move1(x_177, x_398);
      move1(__176, x_177);
      x_178 := fn0_free_listUU_396(NULL, f_170, tl_175);
      move1(x_173, x_178);
      move1(x_172, x_173);
      break;
    }
  }
  return x_172;
}

fn fn1_free_listUU_397(env) {
  A_169 := env[1];
  f_170 := env[2];
  __171 := env[3];
  x_400 := fn0_free_listUU_396(A_169, f_170, __171);
  return x_400;
}

fn fn0_free_listUL_401(A_180, f_181, __182) {
  switch(__182){
    nilUL_27 => {
      move1(x_183, ttU_22);
      break;
    }
    _ => {
      getbox(hd_185, __182, 0);
      getbox(tl_186, __182, 1);
      appc(x_403, f_181, hd_185);
      move1(x_188, x_403);
      move1(__187, x_188);
      x_189 := fn0_free_listUL_401(NULL, f_181, tl_186);
      move1(x_184, x_189);
      free(__182);
      move1(x_183, x_184);
      break;
    }
  }
  return x_183;
}

fn fn1_free_listUL_402(env) {
  A_180 := env[1];
  f_181 := env[2];
  __182 := env[3];
  x_405 := fn0_free_listUL_401(A_180, f_181, __182);
  return x_405;
}

fn fn0_free_listLL_406(A_191, f_192, __193) {
  switch(__193){
    nilLL_23 => {
      move1(x_194, ttU_22);
      break;
    }
    _ => {
      getbox(hd_196, __193, 0);
      getbox(tl_197, __193, 1);
      appc(x_408, f_192, hd_196);
      move1(x_199, x_408);
      move1(__198, x_199);
      x_200 := fn0_free_listLL_406(NULL, f_192, tl_197);
      move1(x_195, x_200);
      free(__193);
      move1(x_194, x_195);
      break;
    }
  }
  return x_194;
}

fn fn1_free_listLL_407(env) {
  A_191 := env[1];
  f_192 := env[2];
  __193 := env[3];
  x_410 := fn0_free_listLL_406(A_191, f_192, __193);
  return x_410;
}

fn fn0_pow_411(x_202, y_203) {
  mkclo1(x_205, fn1_loop_413, fvc:=1, argc:=2);
  setclo(x_205, x_202, 1);
  move1(loop_204, x_205);
  appc(x_417, loop_204, 1);
  appc(x_418, x_417, y_203);
  move1(x_214, x_418);
  return x_214;
}

fn fn1_pow_412(env) {
  x_202 := env[1];
  y_203 := env[2];
  x_420 := fn0_pow_411(x_202, y_203);
  return x_420;
}

fn fn0_powm_421(x_216, y_217, m_218) {
  mkclo1(x_220, fn1_loop_423, fvc:=2, argc:=2);
  setclo(x_220, x_216, 1);
  setclo(x_220, m_218, 2);
  move1(loop_219, x_220);
  appc(x_427, loop_219, 1);
  appc(x_428, x_427, y_217);
  move1(x_230, x_428);
  return x_230;
}

fn fn1_powm_422(env) {
  x_216 := env[1];
  y_217 := env[2];
  m_218 := env[3];
  x_430 := fn0_powm_421(x_216, y_217, m_218);
  return x_430;
}

fn fn0_ord_431(c_232) {
  ord(x_233, c_232);
  return x_233;
}

fn fn1_ord_432(env) {
  c_232 := env[1];
  x_433 := fn0_ord_431(c_232);
  return x_433;
}

fn fn0_chr_434(i_235) {
  chr(x_236, i_235);
  return x_236;
}

fn fn1_chr_435(env) {
  i_235 := env[1];
  x_436 := fn0_chr_434(i_235);
  return x_436;
}

fn fn0_str_437(c_238) {
  str(x_240, "")
  push(x_239, x_240, c_238);
  return x_239;
}

fn fn1_str_438(env) {
  c_238 := env[1];
  x_439 := fn0_str_437(c_238);
  return x_439;
}

fn fn0_strlen_440(s_242) {
  size(x_243, s_242);
  return x_243;
}

fn fn1_strlen_441(env) {
  s_242 := env[1];
  x_442 := fn0_strlen_440(s_242);
  return x_442;
}

fn fn0_string_of_int_443(i_245) {
  mkclo1(x_247, fn1_aux_445, fvc:=3, argc:=1);
  setclo(x_247, ord_231, 1);
  setclo(x_247, chr_234, 2);
  setclo(x_247, str_237, 3);
  move1(aux_246, x_247);
  lte(x_266, 0, i_245);
  switch(x_266){
    true_4 => {
      appc(x_448, aux_246, i_245);
      move1(x_267, x_448);
      move1(x_265, x_267);
      break;
    }
    false_5 => {
      str(x_269, "~")
      neg(x_271, i_245);
      appc(x_450, aux_246, x_271);
      move1(x_270, x_450);
      cat(x_268, x_269, x_270);
      move1(x_265, x_268);
      break;
    }
  }
  return x_265;
}

fn fn1_string_of_int_444(env) {
  i_245 := env[1];
  x_452 := fn0_string_of_int_443(i_245);
  return x_452;
}

fn fn0_hd_vec1_453(A_273, n_274, __275) {
  getbox(hd_277, __275, 0);
  move1(x_276, hd_277);
  return x_276;
}

fn fn1_hd_vec1_454(env) {
  A_273 := env[1];
  n_274 := env[2];
  __275 := env[3];
  x_455 := fn0_hd_vec1_453(A_273, n_274, __275);
  return x_455;
}

fn fn0_hd_vec2_456(A_280, n_281, xs_282) {
  getbox(hd_284, xs_282, 0);
  move1(x_283, hd_284);
  return x_283;
}

fn fn1_hd_vec2_457(env) {
  A_280 := env[1];
  n_281 := env[2];
  xs_282 := env[3];
  x_458 := fn0_hd_vec2_456(A_280, n_281, xs_282);
  return x_458;
}

fn fn0_hd_vec3_459(A_287, n_288, xs_289) {
  getbox(hd_291, xs_289, 0);
  move1(x_290, hd_291);
  return x_290;
}

fn fn1_hd_vec3_460(env) {
  A_287 := env[1];
  n_288 := env[2];
  xs_289 := env[3];
  x_461 := fn0_hd_vec3_459(A_287, n_288, xs_289);
  return x_461;
}

fn fn0_vlength_462(A_294, n_295, __296) {
  switch(__296){
    vnilU_45 => {
      move1(x_297, zero_6);
      break;
    }
    _ => {
      getbox(tl_300, __296, 1);
      x_301 := fn0_vlength_462(NULL, NULL, tl_300);
      mkbox(x_302, succ_7, 1);
      setbox(x_302, x_301, 0);
      move1(x_298, x_302);
      move1(x_297, x_298);
      break;
    }
  }
  return x_297;
}

fn fn1_vlength_463(env) {
  A_294 := env[1];
  n_295 := env[2];
  __296 := env[3];
  x_464 := fn0_vlength_462(A_294, n_295, __296);
  return x_464;
}

fn fn1_aux_445(env) {
  aux_248 := env[0];
  ord_231 := env[1];
  chr_234 := env[2];
  str_237 := env[3];
  i_249 := env[4];
  lte(x_251, 10, i_249);
  switch(x_251){
    true_4 => {
      mod(x_253, i_249, 10);
      move1(r_252, x_253);
      div(x_255, i_249, 10);
      move1(i_254, x_255);
      appc(x_446, aux_248, i_254);
      move1(x_257, x_446);
      x_260 := fn0_ord_431(0);
      add(x_259, r_252, x_260);
      x_258 := fn0_chr_434(x_259);
      push(x_256, x_257, x_258);
      move1(x_250, x_256);
      break;
    }
    false_5 => {
      x_264 := fn0_ord_431(0);
      add(x_263, i_249, x_264);
      x_262 := fn0_chr_434(x_263);
      x_261 := fn0_str_437(x_262);
      move1(x_250, x_261);
      break;
    }
  }
  return x_250;
}

fn fn1_loop_423(env) {
  loop_221 := env[0];
  x_216 := env[1];
  m_218 := env[2];
  acc_222 := env[3];
  y_223 := env[4];
  lte(x_225, y_223, 0);
  switch(x_225){
    true_4 => {
      move1(x_224, acc_222);
      break;
    }
    false_5 => {
      mul(x_228, x_216, acc_222);
      mod(x_227, x_228, m_218);
      sub(x_229, y_223, 1);
      appc(x_424, loop_221, x_227);
      appc(x_425, x_424, x_229);
      move1(x_226, x_425);
      move1(x_224, x_226);
      break;
    }
  }
  return x_224;
}

fn fn1_loop_413(env) {
  loop_206 := env[0];
  x_202 := env[1];
  acc_207 := env[2];
  y_208 := env[3];
  lte(x_210, y_208, 0);
  switch(x_210){
    true_4 => {
      move1(x_209, acc_207);
      break;
    }
    false_5 => {
      mul(x_212, x_202, acc_207);
      sub(x_213, y_208, 1);
      appc(x_414, loop_206, x_212);
      appc(x_415, x_414, x_213);
      move1(x_211, x_415);
      move1(x_209, x_211);
      break;
    }
  }
  return x_209;
}

fn fn1_loop_385(env) {
  loop_149 := env[0];
  pred_113 := env[1];
  sub_126 := env[2];
  x_150 := env[3];
  y_151 := env[4];
  x_154 := fn0_pred_371(y_151);
  x_153 := fn0_sub_377(x_150, x_154);
  switch(x_153){
    zero_6 => {
      move1(x_152, zero_6);
      break;
    }
    _ => {
      x_157 := fn0_pred_371(y_151);
      x_156 := fn0_sub_377(x_150, x_157);
      getbox(n_158, x_156, 0);
      appc(x_386, loop_149, n_158);
      appc(x_387, x_386, y_151);
      move1(x_159, x_387);
      mkbox(x_160, succ_7, 1);
      setbox(x_160, x_159, 0);
      move1(x_155, x_160);
      move1(x_152, x_155);
      break;
    }
  }
  return x_152;
}

main {
  mkclo0(idU_1, fn1_idU_312, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_315, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_318, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_321, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_324, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_327, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_330, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_333, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_336, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_339, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_342, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_345, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_348, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_351, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_354, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_357, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_360, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_363, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_366, fvc:=0, argc:=2);
  mkclo0(lt_108, fn1_lt_369, fvc:=0, argc:=2);
  mkclo0(pred_113, fn1_pred_372, fvc:=0, argc:=1);
  mkclo0(add_118, fn1_add_375, fvc:=0, argc:=2);
  mkclo0(sub_126, fn1_sub_378, fvc:=0, argc:=2);
  mkclo0(mul_134, fn1_mul_381, fvc:=0, argc:=2);
  mkclo0(div_142, fn1_div_384, fvc:=0, argc:=2);
  mkclo0(rem_162, fn1_rem_394, fvc:=0, argc:=2);
  mkclo0(free_listUU_168, fn1_free_listUU_397, fvc:=0, argc:=3);
  mkclo0(free_listUL_179, fn1_free_listUL_402, fvc:=0, argc:=3);
  mkclo0(free_listLL_190, fn1_free_listLL_407, fvc:=0, argc:=3);
  mkclo0(pow_201, fn1_pow_412, fvc:=0, argc:=2);
  mkclo0(powm_215, fn1_powm_422, fvc:=0, argc:=3);
  mkclo0(ord_231, fn1_ord_432, fvc:=0, argc:=1);
  mkclo0(chr_234, fn1_chr_435, fvc:=0, argc:=1);
  mkclo0(str_237, fn1_str_438, fvc:=0, argc:=1);
  mkclo0(strlen_241, fn1_strlen_441, fvc:=0, argc:=1);
  mkclo0(string_of_int_244, fn1_string_of_int_444, fvc:=0, argc:=1);
  mkclo0(hd_vec1_272, fn1_hd_vec1_454, fvc:=0, argc:=3);
  mkclo0(hd_vec2_279, fn1_hd_vec2_457, fvc:=0, argc:=3);
  mkclo0(hd_vec3_286, fn1_hd_vec3_460, fvc:=0, argc:=3);
  mkclo0(vlength_293, fn1_vlength_463, fvc:=0, argc:=3);
  mkbox(x_304, vconsU_46, 2);
  setbox(x_304, zero_6, 0);
  setbox(x_304, vnilU_45, 1);
  move0(xs_303, x_304);
  x_306 := fn0_hd_vec1_453(NULL, NULL, xs_303);
  move0(x_305, x_306);
  x_308 := fn0_hd_vec2_456(NULL, NULL, xs_303);
  move0(y_307, x_308);
  x_310 := fn0_hd_vec3_459(NULL, NULL, xs_303);
  move0(z_309, x_310);
  return NULL;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

