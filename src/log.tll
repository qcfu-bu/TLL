[Inductive {name = "unit"; relv = R;
   body =
   (Binder ([],
      (PBase ((TBase (Type U)), [(DMul ("tt", (TBase (Id "unit"))))]))))};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DMul ("true", (TBase (Id "bool"))));
             (DMul ("false", (TBase (Id "bool"))))]))
       ))};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DMul ("zero", (TBase (Id "nat"))));
             (DMul ("succ",
                (TBind (R, (Id "nat"), (Binder ("pred", (TBase (Id "nat"))))
                   ))
                ))
             ]))
       ))};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id "A"),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id "A"), (Binder ("_", (TBase (Type U))))
                          )),
                       [(DMul ("refl",
                           (TBase
                              (App [(Id "eq"); (Id "_"); (Id "m"); (Id "m")]))
                           ))
                         ]))
                   ))
                ))
             ))
          ))
       ))};
  Inductive {name = "exists"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Pi (R, U, (Id "A"), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DMul ("ex",
                           (TBind (R, (Id "A"),
                              (Binder ("m",
                                 (TBind (N, (App [(Id "B"); (Id "m")]),
                                    (Binder ("pf",
                                       (TBase
                                          (App
                                             [(Id "exists"); (Id "A");
                                               (Id "B")]))
                                       ))
                                    ))
                                 ))
                              ))
                           ))
                         ]))
                   ))
                ))
             ))
          ))
       ))};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id "A"),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DMul ("just",
                     (TBind (R, (Id "A"),
                        (Binder ("m",
                           (TBase (App [(Id "sing"); (Id "_"); (Id "m")]))))
                        ))
                     ))
                   ]))
             ))
          ))
       ))};
  Inductive {name = "list"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type U)),
                 [(DMul ("nil", (TBase (App [(Id "list"); (Id "A")]))));
                   (DMul ("cons",
                      (TBind (R, (Id "A"),
                         (Binder ("hd",
                            (TBind (R, (App [(Id "list"); (Id "A")]),
                               (Binder ("tl",
                                  (TBase (App [(Id "list"); (Id "A")]))))
                               ))
                            ))
                         ))
                      ))
                   ]))
             ))
          ))
       ))};
  Definition {name = "lte"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id "nat"),
              (Binder ("_",
                 (Pi (R, U, (Id "nat"), (Binder ("_", (Id "bool")))))))
              )),
           (Binder ((Some "lte"),
              [([(PId "zero"); (PId "_")], (Some (Id "true")));
                ([(PId "_"); (PId "zero")], (Some (Id "false")));
                ([(PMul ("succ", [(PId "x")])); (PMul ("succ", [(PId "y")]))],
                 (Some (App [(Id "lte"); (Id "x"); (Id "y")])))
                ]
              ))
           )),
        (Pi (R, U, (Id "nat"),
           (Binder ("_", (Pi (R, U, (Id "nat"), (Binder ("_", (Id "bool")))))
              ))
           )))
       ))};
  Definition {name = "lt"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id "nat"),
              (Binder ("x",
                 (Pi (R, U, (Id "nat"), (Binder ("y", (Id "bool")))))))
              )),
           (Binder ((Some "lt"),
              [([(PId "x"); (PId "y")],
                (Some (App
                         [(Id "lte"); (App [(Id "succ"); (Id "x")]); (
                           Id "y")])))
                ]
              ))
           )),
        (Pi (R, U, (Id "nat"),
           (Binder ("x", (Pi (R, U, (Id "nat"), (Binder ("y", (Id "bool")))))
              ))
           )))
       ))};
  Definition {name = "length"; relv = N;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (R, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (App [(Id "list"); (Id "A")]),
                    (Binder ("_", (Id "nat")))))
                 ))
              )),
           (Binder ((Some "length"),
              [([(PId "A"); (PId "nil")], (Some (Id "zero")));
                ([(PId "A"); (PMul ("cons", [(PId "_"); (PId "tl")]))],
                 (Some (App
                          [(Id "succ");
                            (App [(Id "length"); (Id "_"); (Id "tl")])])))
                ]
              ))
           )),
        (Pi (R, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U, (App [(Id "list"); (Id "A")]),
                 (Binder ("_", (Id "nat")))))
              ))
           )))
       ))};
  Inductive {name = "at"; relv = N;
    body =
    (Binder ([],
       (PBind ((Type U),
          (Binder ("A",
             (PBind ((Id "A"),
                (Binder ("x",
                   (PBase
                      ((TBind (R, (Id "nat"),
                          (Binder ("_",
                             (TBind (R, (App [(Id "list"); (Id "A")]),
                                (Binder ("_", (TBase (Type U))))))
                             ))
                          )),
                       [(DMul ("at_zero",
                           (TBind (R, (App [(Id "list"); (Id "A")]),
                              (Binder ("xs0",
                                 (TBase
                                    (App
                                       [(Id "at"); (Id "_"); (Id "_");
                                         (Id "zero");
                                         (App
                                            [(Id "cons"); (Id "x");
                                              (Id "xs0")])
                                         ]))
                                 ))
                              ))
                           ));
                         (DMul ("at_succ",
                            (TBind (R, (Id "nat"),
                               (Binder ("n",
                                  (TBind (R, (Id "A"),
                                     (Binder ("x0",
                                        (TBind (R,
                                           (App [(Id "list"); (Id "A")]),
                                           (Binder ("xs0",
                                              (TBind (R,
                                                 (App
                                                    [(Id "at"); (Id "A");
                                                      (Id "x"); (Id "n");
                                                      (Id "xs0")]),
                                                 (Binder ("h",
                                                    (TBase
                                                       (App
                                                          [(Id "at");
                                                            (Id "_");
                                                            (Id "_");
                                                            (App
                                                               [(Id "succ");
                                                                 (Id "n")]);
                                                            (App
                                                               [(Id "cons");
                                                                 (Id "x0");
                                                                 (Id "xs0")])
                                                            ]))
                                                    ))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ]))
                   ))
                ))
             ))
          ))
       ))};
  Definition {name = "get_at"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (R, U, (Id "nat"),
                    (Binder ("n",
                       (Pi (R, U, (App [(Id "list"); (Id "A")]),
                          (Binder ("xs",
                             (Pi (R, U,
                                (App
                                   [(Id "eq"); (Id "_");
                                     (App
                                        [(Id "lt"); (Id "n");
                                          (App
                                             [(Id "length"); (Id "_");
                                               (Id "xs")])
                                          ]);
                                     (Id "true")]),
                                (Binder ("_",
                                   (App
                                      [(Inst ("exists",
                                          [(SId "_"); (SId "_"); L]));
                                        (Id "_");
                                        (Fun (
                                           (Pi (R, U, (Id "_"),
                                              (Binder ("x", (Id "_"))))),
                                           (Binder (None,
                                              [([(PId "x")],
                                                (Some (App
                                                         [(Id "at");
                                                           (Id "_");
                                                           (Id "x");
                                                           (Id "n");
                                                           (Id "xs")])))
                                                ]
                                              ))
                                           ))
                                        ])
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "get_at"),
              [([(PId "A"); (PId "_"); (PId "nil"); PAbsurd], None);
                ([(PId "A"); (PId "zero");
                   (PMul ("cons", [(PId "x"); (PId "xs")])); (PId "_")],
                 (Some (App
                          [(Id "ex"); (Id "x");
                            (App [(Id "at_zero"); (Id "xs")])])));
                ([(PId "A"); (PMul ("succ", [(PId "n")]));
                   (PMul ("cons", [(PId "x"); (PId "xs")])); (PId "e")],
                 (Some (Match (
                          [(R,
                            (App
                               [(Id "get_at"); (Id "_"); (Id "n"); (Id "xs");
                                 (Id "e")]),
                            (Some ("_",
                                   (App
                                      [(Id "exists"); (Id "_");
                                        (Fun (
                                           (Pi (R, U, (Id "_"),
                                              (Binder ("x", (Id "_"))))),
                                           (Binder (None,
                                              [([(PId "x")],
                                                (Some (App
                                                         [(Id "at");
                                                           (Id "_");
                                                           (Id "x");
                                                           (Id "n");
                                                           (Id "xs")])))
                                                ]
                                              ))
                                           ))
                                        ]))))
                            ],
                          None,
                          [([(PMul ("ex", [(PId "x0"); (PId "pf")]))],
                            (Some (App
                                     [(Id "ex"); (Id "x0");
                                       (App
                                          [(Id "at_succ"); (Id "_");
                                            (Id "_"); (Id "_"); (Id "pf")])
                                       ])))
                            ]
                          ))))
                ]
              ))
           )),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (R, U, (Id "nat"),
                 (Binder ("n",
                    (Pi (R, U, (App [(Id "list"); (Id "A")]),
                       (Binder ("xs",
                          (Pi (R, U,
                             (App
                                [(Id "eq"); (Id "_");
                                  (App
                                     [(Id "lt"); (Id "n");
                                       (App
                                          [(Id "length"); (Id "_"); (
                                            Id "xs")])
                                       ]);
                                  (Id "true")]),
                             (Binder ("_",
                                (App
                                   [(Inst ("exists",
                                       [(SId "_"); (SId "_"); L]));
                                     (Id "_");
                                     (Fun (
                                        (Pi (R, U, (Id "_"),
                                           (Binder ("x", (Id "_"))))),
                                        (Binder (None,
                                           [([(PId "x")],
                                             (Some (App
                                                      [(Id "at"); (Id "_");
                                                        (Id "x"); (Id "n");
                                                        (Id "xs")])))
                                             ]
                                           ))
                                        ))
                                     ])
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ))}
  ]

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_107 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_108› (A_109 : Type‹s_108›) (m_110 : A_109):
  A_109 -> U
where
| refl_6 : (eq_4‹??_1› ?_1 m_110 m_110)

#[program]
inductive exists_5‹s_112,r_113,t_114› (A_115 : Type‹s_112›) (B_116 : 
A_115 -> Type‹r_113›): Type‹t_114› where
| ex_7
    (m_118 : A_115) {pf_119 : ((B_116) m_118)}
    : (exists_5‹??_2,??_3,??_4› A_115 B_116)

#[program]
inductive sing_6‹s_120› (A_121 : Type‹s_120›):
  A_121 -> Type‹s_120›
where
| just_8 (m_123 : A_121) : (sing_6‹??_5› ?_2 m_123)

#[program]
inductive list_7‹s_124› (A_125 : Type‹s_124›): U where
| nil_9 : (list_7‹??_6› A_125)
| cons_10
    (hd_126 : A_125) (tl_127 : (list_7‹??_7› A_125))
    : (list_7‹??_8› A_125)

#[program]
def lte_1‹› : nat_3 -> nat_3 -> bool_2 :=
  function lte_130 : nat_3 -> nat_3 -> bool_2
  | zero_4 _133 => true_2
  | _134 zero_4 => false_3
  | (succ_5 x_135) (succ_5 y_136) => ((lte_130) x_135 y_136)

#[program]
def lt_2‹› : nat_3 -> nat_3 -> bool_2 :=
  function lt_139 : nat_3 -> nat_3 -> bool_2
  | x_142 y_143 => ((lte_1) (succ_5‹› x_142) y_143)

#[logical]
def length_3‹s_144› :
  ∀ (A_145 : Type‹s_144›) -> (list_7‹??_10› A_145) -> nat_3
:=
  function length_147 :
    ∀ (A_148 : Type‹s_144›) -> (list_7‹??_9› A_148) -> nat_3
  | A_150 nil_9 => zero_4
  | A_151 (cons_10 _152 tl_153) => (succ_5‹› ((length_147) ?_3 tl_153))

#[logical]
inductive at_8‹› (A_154 : U) (x_155 : A_154):
  nat_3 -> (list_7‹??_11› A_154) -> U
where
| at_zero_11
    (xs0_158 : (list_7‹??_12› A_154))
    : (at_8 ?_4 ?_5 zero_4 (cons_10‹??_13› x_155 xs0_158))
| at_succ_12
    (n_159 : nat_3) (x0_160 : A_154) (xs0_161 : (list_7‹??_14› A_154))
    (h_162 : (at_8 A_154 x_155 n_159 xs0_161))
    : (at_8 ?_7 ?_8 (succ_5‹› n_159) (cons_10‹??_15› x0_160 xs0_161))

#[program]
def get_at_4‹› :
  ∀ {A_163 : U} ->
    ∀ (n_164 : nat_3) ->
      ∀ (xs_165 : (list_7‹??_30› A_163)) ->
        ∀ (__166 :
          (eq_4‹??_32›
            ?_33 ((lt_2) n_164 ((length_3‹??_31›) ?_34 xs_165)) true_2)) ->
          (exists_5‹??_33,??_34,L›
            ?_35
            function _167 : ∀ (x_168 : ?_36) -> ?_37
            | x_169 => (at_8 ?_38 x_169 n_164 xs_165))
:=
  function get_at_170 :
    ∀ {A_171 : U} ->
      ∀ (n_172 : nat_3) ->
        ∀ (xs_173 : (list_7‹??_16› A_171)) ->
          ∀ (__174 :
            (eq_4‹??_18›
              ?_10 ((lt_2) n_172 ((length_3‹??_17›) ?_11 xs_173)) true_2)) ->
            (exists_5‹??_19,??_20,L›
              ?_12
              function _175 : ∀ (x_176 : ?_13) -> ?_14
              | x_177 => (at_8 ?_15 x_177 n_172 xs_173))
  | A_178 _179 nil_9 !! =>
  | A_180 zero_4 (cons_10 x_181 xs_182) _183 =>
    (ex_7‹??_21,??_22,??_23› x_181 (at_zero_11‹› xs_182))
  | A_184 (succ_5 n_185) (cons_10 x_186 xs_187) e_188 =>
    match ((get_at_170) ?_20 n_185 xs_187 e_188) in
      ∀ (__189 :
        (exists_5‹??_24,??_25,??_26›
          ?_21
          function _190 : ∀ (x_191 : ?_22) -> ?_23
          | x_192 => (at_8 ?_24 x_192 n_185 xs_187))) -o
        ?_25
    with
    | (ex_7 x0_193 pf_194) =>
      (ex_7‹??_27,??_28,??_29›
        x0_193 (at_succ_12‹› ?_26 ?_27 ?_28 pf_194))

-----------------------------------------

inductive-------------------------
infer_tm(unit_1)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(bool_2)
infer_tm(bool_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(nat_3)
infer_tm(nat_3)
infer_tm(nat_3)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_197›)
infer_tm(A_198)
infer_tm(A_198)
infer_tm(Type‹s_201›)
infer_tm(A_202)
assert_equal1( A_202, ?_1)
assert_equal1( m_203, m_203)
infer_tm((eq_4‹??_1› ?_1 m_203 m_203))
check_tm(?_1, Type‹??_1›)
check_tm(m_203, ?_1)
infer_tm(m_203)
assert_equal1( ?_1, A_202)
check_tm(m_203, ?_1)
infer_tm(m_203)
assert_equal1( ?_1, A_202)
simpl_tm ~expand:false( ?_1, A_202)
simpl_tm ~expand:false( A_202, A_202)
simpl_tm ~expand:false( A_202, A_202)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_204
    
  |}
  imeta_meta {|
    ?_1 <= A_207
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_201›)
check_tm(A_202, Type‹s_201›)
infer_tm(A_202)
assert_equal1( Type‹s_201›, Type‹s_201›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_219›)
infer_tm(A_222 -> Type‹r_220›)
infer_tm(A_222)
infer_tm(Type‹r_220›)
infer_tm(Type‹s_226›)
infer_tm(A_229 -> Type‹r_227›)
infer_tm(A_229)
infer_tm(Type‹r_227›)
infer_tm(A_229)
infer_tm(((B_230) m_233))
infer_tm(B_230)
check_tm(m_233, A_229)
infer_tm(m_233)
assert_equal1( A_229, A_229)
assert_equal1( A_229, A_229)
assert_equal1( B_230, B_230)
infer_tm((exists_5‹??_2,??_3,??_4› A_229 B_230))
check_tm(A_229, Type‹??_2›)
infer_tm(A_229)
assert_equal1( Type‹??_2›, Type‹s_226›)
check_tm(B_230, A_229 -> Type‹??_3›)
infer_tm(B_230)
assert_equal1( A_229 -> Type‹??_3›, A_229 -> Type‹r_227›)
simpl_tm ~expand:false( A_229 -> Type‹??_3›, A_229 -> Type‹r_227›)
simpl_tm ~expand:false( A_229, A_229)
simpl_tm ~expand:false( Type‹??_3›, Type‹r_227›)
simpl_tm ~expand:false( Type‹??_2›, Type‹s_226›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_248
    ??_2 <= s_251
    ??_3 <= r_253
    ??_4 <= t_255
    
  |}
  imeta_meta {|
    ?_1 <= A_260
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_292›)
infer_tm(A_293)
infer_tm(Type‹s_295›)
infer_tm(A_296)
assert_equal1( A_296, ?_2)
infer_tm((sing_6‹??_5› ?_2 m_297))
check_tm(?_2, Type‹??_5›)
check_tm(m_297, ?_2)
infer_tm(m_297)
assert_equal1( ?_2, A_296)
simpl_tm ~expand:false( ?_2, A_296)
simpl_tm ~expand:false( A_296, A_296)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_298
    ??_2 <= s_301
    ??_3 <= r_303
    ??_4 <= t_305
    ??_5 <= s_308
    
  |}
  imeta_meta {|
    ?_1 <= A_311
    ?_2 <= A_314
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_295›)
check_tm(A_296, Type‹s_295›)
infer_tm(A_296)
assert_equal1( Type‹s_295›, Type‹s_295›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_327›)
infer_tm(Type‹s_329›)
assert_equal1( A_330, A_330)
infer_tm((list_7‹??_6› A_330))
check_tm(A_330, Type‹??_6›)
infer_tm(A_330)
assert_equal1( Type‹??_6›, Type‹s_329›)
simpl_tm ~expand:false( Type‹??_6›, Type‹s_329›)
infer_tm(Type‹s_331›)
infer_tm(A_332)
infer_tm((list_7‹??_7› A_332))
check_tm(A_332, Type‹??_7›)
infer_tm(A_332)
assert_equal1( Type‹??_7›, Type‹s_331›)
simpl_tm ~expand:false( Type‹??_7›, Type‹s_331›)
assert_equal1( A_332, A_332)
infer_tm((list_7‹??_8› A_332))
check_tm(A_332, Type‹??_8›)
infer_tm(A_332)
assert_equal1( Type‹??_8›, Type‹s_331›)
simpl_tm ~expand:false( Type‹??_8›, Type‹s_331›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_335
    ??_2 <= s_338
    ??_3 <= r_340
    ??_4 <= t_342
    ??_5 <= s_345
    ??_6 <= s_346
    ??_7 <= s_347
    ??_8 <= s_348
    
  |}
  imeta_meta {|
    ?_1 <= A_351
    ?_2 <= A_354
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(nat_3 -> nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(bool_2)
check_tm(function lte_375 : nat_3 -> nat_3 -> bool_2
         | zero_4 _378 => true_2
         | _379 zero_4 => false_3
         | (succ_5 x_380) (succ_5 y_381) => ((lte_375) x_380 y_381), 
nat_3 -> nat_3 -> bool_2)
infer_tm(function lte_384 : nat_3 -> nat_3 -> bool_2
         | zero_4 _387 => true_2
         | _388 zero_4 => false_3
         | (succ_5 x_389) (succ_5 y_390) => ((lte_384) x_389 y_390))
infer_tm(nat_3 -> nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(bool_2)
check_cls {|
  prblm {| ;
    {|  ::: [zero_4, _397] =>? true_2 |}
    {|  ::: [_398, zero_4] =>? false_3 |}
    {|  ::: [(succ_5 x_399), (succ_5 y_400)] =>? ((lte_391) #x_399 #y_400) |}
  |}
|}
case_intro
case_intro
case_splitting
splitting_on(zero_4)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3);
    {| eq_pat?( #__404, _397 : nat_3) ::: [] =>? true_2 |}
    {| eq_pat?( zero_4, _398 : nat_3)
       eq_pat?( #__404, zero_4 : nat_3) ::: [] =>? false_3
    |}
  |}
|}
unify_pprbm( eq_term?( nat_3, nat_3)
             eq_pat?( #__404, _397 : nat_3) )
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( #__404, #_397)
simpl_pprbm ~expand:false( #__404, #_397)
case_coverage_ok(true_2, bool_2)
check_tm(true_2, bool_2)
infer_tm(true_2)
assert_equal1( bool_2, bool_2)
splitting_on(succ_5)
case_splitting
splitting_on(zero_4)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3)
           eq_term?( nat_3, nat_3);
    {| eq_pat?( (succ_5‹› #pred_409), _398 : nat_3) ::: [] =>? false_3 |}
  |}
|}
unify_pprbm(
  eq_term?( nat_3, nat_3)
  eq_term?( nat_3, nat_3)
  eq_pat?( (succ_5‹› #pred_409), _398 : nat_3)
)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( (succ_5‹› #pred_409), #_398)
simpl_pprbm ~expand:false( (succ_5‹› #pred_409), #_398)
case_coverage_ok(false_3, bool_2)
check_tm(false_3, bool_2)
infer_tm(false_3)
assert_equal1( bool_2, bool_2)
splitting_on(succ_5)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3)
           eq_term?( nat_3, nat_3);
    {| eq_pat?( #pred_409, x_399 : nat_3)
       eq_pat?( #pred_416, y_400 : nat_3) ::: [] =>?
         ((lte_391) #x_399 #y_400)
    |}
  |}
|}
unify_pprbm(
  eq_term?( nat_3, nat_3)
  eq_term?( nat_3, nat_3)
  eq_pat?( #pred_409, x_399 : nat_3)
  eq_pat?( #pred_416, y_400 : nat_3)
)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( #pred_409, #x_399)
simpl_pprbm ~expand:false( #pred_416, #y_400)
simpl_pprbm ~expand:false( #pred_409, #x_399)
simpl_pprbm ~expand:false( #pred_416, #y_400)
case_coverage_ok(((lte_391) pred_409 pred_416), bool_2)
check_tm(((lte_391) pred_409 pred_416), bool_2)
infer_tm(((lte_391) pred_409 pred_416))
infer_tm(((lte_391) pred_409))
infer_tm(lte_391)
check_tm(pred_409, nat_3)
infer_tm(pred_409)
assert_equal1( nat_3, nat_3)
check_tm(pred_416, nat_3)
infer_tm(pred_416)
assert_equal1( nat_3, nat_3)
assert_equal1( bool_2, bool_2)
assert_equal1( nat_3 -> nat_3 -> bool_2, nat_3 -> nat_3 -> bool_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_430
    ??_2 <= s_433
    ??_3 <= r_435
    ??_4 <= t_437
    ??_5 <= s_440
    ??_6 <= s_441
    ??_7 <= s_442
    ??_8 <= s_443
    
  |}
  imeta_meta {|
    ?_1 <= A_446
    ?_2 <= A_449
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(nat_3 -> nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(bool_2)
check_tm(function lt_464 : nat_3 -> nat_3 -> bool_2
         | x_467 y_468 => ((lte_1) (succ_5‹› x_467) y_468), nat_3 ->
                                                                  nat_3 ->
                                                                    bool_2)
infer_tm(function lt_471 : nat_3 -> nat_3 -> bool_2
         | x_474 y_475 => ((lte_1) (succ_5‹› x_474) y_475))
infer_tm(nat_3 -> nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(bool_2)
check_cls {|
  prblm {| ;
    {|  ::: [x_482, y_483] =>? ((lte_1) (succ_5‹› #x_482) #y_483) |}
  |}
|}
case_intro
case_intro
case_coverage{|
  prblm {| ;
    {| eq_pat?( #x_486, x_482 : nat_3)
       eq_pat?( #y_487, y_483 : nat_3) ::: [] =>?
         ((lte_1) (succ_5‹› #x_482) #y_483)
    |}
  |}
|}
unify_pprbm( eq_pat?( #x_486, x_482 : nat_3)
             eq_pat?( #y_487, y_483 : nat_3)
)
simpl_pprbm ~expand:false( #x_486, #x_482)
simpl_pprbm ~expand:false( #y_487, #y_483)
simpl_pprbm ~expand:false( #x_486, #x_482)
simpl_pprbm ~expand:false( #y_487, #y_483)
case_coverage_ok(((lte_1) (succ_5‹› x_486) y_487), bool_2)
check_tm(((lte_1) (succ_5‹› x_486) y_487), bool_2)
infer_tm(((lte_1) (succ_5‹› x_486) y_487))
infer_tm(((lte_1) (succ_5‹› x_486)))
infer_tm(lte_1)
check_tm((succ_5‹› x_486), nat_3)
infer_tm((succ_5‹› x_486))
check_tm(x_486, nat_3)
infer_tm(x_486)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
check_tm(y_487, nat_3)
infer_tm(y_487)
assert_equal1( nat_3, nat_3)
assert_equal1( bool_2, bool_2)
assert_equal1( nat_3 -> nat_3 -> bool_2, nat_3 -> nat_3 -> bool_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_499
    ??_2 <= s_502
    ??_3 <= r_504
    ??_4 <= t_506
    ??_5 <= s_509
    ??_6 <= s_510
    ??_7 <= s_511
    ??_8 <= s_512
    
  |}
  imeta_meta {|
    ?_1 <= A_515
    ?_2 <= A_518
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(∀ (A_527 : Type‹s_526›) -> (list_7‹??_10› A_527) -> nat_3)
infer_tm(Type‹s_526›)
infer_tm((list_7‹??_10› A_529) -> nat_3)
infer_tm((list_7‹??_10› A_529))
check_tm(A_529, Type‹??_10›)
infer_tm(A_529)
assert_equal1( Type‹??_10›, Type‹s_526›)
simpl_tm ~expand:false( Type‹??_10›, Type‹s_526›)
infer_tm(nat_3)
check_tm(function length_532 :
           ∀ (A_533 : Type‹s_526›) -> (list_7‹??_9› A_533) -> nat_3
         | A_535 nil_9 => zero_4
         | A_536 (cons_10 _537 tl_538) =>
           (succ_5‹› ((length_532) ?_3 tl_538)), ∀ (A_539 :
                                                       Type‹s_526›) ->
                                                       (list_7‹??_10›
                                                         A_539) -> nat_3)
infer_tm(function length_541 :
           ∀ (A_542 : Type‹s_526›) -> (list_7‹??_9› A_542) -> nat_3
         | A_544 nil_9 => zero_4
         | A_545 (cons_10 _546 tl_547) =>
           (succ_5‹› ((length_541) ?_3 tl_547)))
infer_tm(∀ (A_549 : Type‹s_526›) -> (list_7‹??_9› A_549) -> nat_3)
infer_tm(Type‹s_526›)
infer_tm((list_7‹??_9› A_551) -> nat_3)
infer_tm((list_7‹??_9› A_551))
check_tm(A_551, Type‹??_9›)
infer_tm(A_551)
assert_equal1( Type‹??_9›, Type‹s_526›)
simpl_tm ~expand:false( Type‹??_9›, Type‹s_526›)
infer_tm(nat_3)
check_cls {|
  prblm {| ;
    {|  ::: [A_554, nil_9] =>? zero_4 |}
    {|  ::: [A_555, (cons_10 _556 tl_557)] =>?
         (succ_5‹› ((length_548) ?_3 #tl_557))
    |}
  |}
|}
case_intro
case_intro
case_splitting
splitting_on(nil_9)
case_coverage{|
  prblm {| eq_term?( (list_7‹s_526› #A_560), (list_7‹s_526› #A_560));
    {| eq_pat?( #A_560, A_554 : Type‹s_526›) ::: [] =>? zero_4 |}
  |}
|}
unify_pprbm(
  eq_term?( (list_7‹s_526› #A_560), (list_7‹s_526› #A_560))
  eq_pat?( #A_560, A_554 : Type‹s_526›)
)
simpl_pprbm ~expand:false( (list_7‹s_526› #A_560),
  (list_7‹s_526› #A_560))
simpl_pprbm ~expand:false( #A_560, #A_560)
simpl_pprbm ~expand:false( #A_560, #A_554)
simpl_pprbm ~expand:false( #A_560, #A_554)
case_coverage_ok(zero_4, nat_3)
check_tm(zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
splitting_on(cons_10)
case_coverage{|
  prblm {| eq_term?( (list_7‹s_526› #A_560), (list_7‹s_526› #A_560));
    {| eq_pat?( #A_560, A_555 : Type‹s_526›)
       eq_pat?( #hd_566, _556 : #A_560)
       eq_pat?( #tl_567, tl_557 : (list_7‹s_526› #A_560)) ::: [] =>?
         (succ_5‹› ((length_548) ?_3 #tl_557))
    |}
  |}
|}
unify_pprbm(
  eq_term?( (list_7‹s_526› #A_560), (list_7‹s_526› #A_560))
  eq_pat?( #A_560, A_555 : Type‹s_526›)
  eq_pat?( #hd_566, _556 : #A_560)
  eq_pat?( #tl_567, tl_557 : (list_7‹s_526› #A_560))
)
simpl_pprbm ~expand:false( (list_7‹s_526› #A_560),
  (list_7‹s_526› #A_560))
simpl_pprbm ~expand:false( #A_560, #A_560)
simpl_pprbm ~expand:false( #A_560, #A_555)
simpl_pprbm ~expand:false( #hd_566, #_556)
simpl_pprbm ~expand:false( #tl_567, #tl_557)
simpl_pprbm ~expand:false( #A_560, #A_555)
simpl_pprbm ~expand:false( #hd_566, #_556)
simpl_pprbm ~expand:false( #tl_567, #tl_557)
case_coverage_ok((succ_5‹› ((length_548) ?_3 tl_567)), nat_3)
check_tm((succ_5‹› ((length_548) ?_3 tl_567)), nat_3)
infer_tm((succ_5‹› ((length_548) ?_3 tl_567)))
check_tm(((length_548) ?_3 tl_567), nat_3)
infer_tm(((length_548) ?_3 tl_567))
infer_tm(((length_548) ?_3))
infer_tm(length_548)
check_tm(?_3, Type‹s_526›)
check_tm(tl_567, (list_7‹s_526› ?_3))
infer_tm(tl_567)
assert_equal1( (list_7‹s_526› ?_3), (list_7‹s_526› #A_560))
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1(
  ∀ (A_575 : Type‹s_526›) -> (list_7‹??_10› A_575) -> nat_3,
  ∀ (A_577 : Type‹s_526›) -> (list_7‹??_9› A_577) -> nat_3)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_583
    ??_2 <= s_586
    ??_3 <= r_588
    ??_4 <= t_590
    ??_5 <= s_593
    ??_6 <= s_594
    ??_7 <= s_595
    ??_8 <= s_596
    ??_9 <= s_597
    ??_10 <= s_598
    
  |}
  imeta_meta {|
    ?_1 <= A_601
    ?_2 <= A_604
    
  |}
  eqns {|
    equal_tm?
      (∀ (A_605 : Type‹s_526›) -> (list_7‹??_10› A_605) -> nat_3,
      ∀ (A_607 : Type‹s_526›) -> (list_7‹??_9› A_607) -> nat_3);
    equal_tm? ((list_7‹s_526› ?_3), (list_7‹s_526› #A_560))
  |}
end_dump
simpl_tm ~expand:false(
  ∀ (A_613 : Type‹s_526›) -> (list_7‹s_526› A_613) -> nat_3,
  ∀ (A_615 : Type‹s_526›) -> (list_7‹s_526› A_615) -> nat_3)
simpl_tm ~expand:false( Type‹s_526›, Type‹s_526›)
simpl_tm ~expand:false( (list_7‹s_526› A_617) -> nat_3,
  (list_7‹s_526› A_617) -> nat_3)
simpl_tm ~expand:false( (list_7‹s_526› A_617), (list_7‹s_526› A_617))
simpl_tm ~expand:false( A_617, A_617)
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false( (list_7‹s_526› ?_3), (list_7‹s_526› #A_560))
simpl_tm ~expand:false( ?_3, #A_560)
infer_tm(Type‹s_526›)
check_tm(#A_560, Type‹s_526›)
infer_tm(#A_560)
assert_equal1( Type‹s_526›, Type‹s_526›)
----------------------------------

inductive-------------------------
infer_tm(U)
infer_tm(A_635)
infer_tm(nat_3)
infer_tm((list_7‹??_11› A_635))
check_tm(A_635, Type‹??_11›)
infer_tm(A_635)
assert_equal1( Type‹??_11›, U)
simpl_tm ~expand:false( Type‹??_11›, U)
infer_tm(U)
infer_tm(A_639)
infer_tm((list_7‹??_12› A_639))
check_tm(A_639, Type‹??_12›)
infer_tm(A_639)
assert_equal1( Type‹??_12›, U)
simpl_tm ~expand:false( Type‹??_12›, U)
assert_equal1( A_639, ?_4)
assert_equal1( x_640, ?_5)
infer_tm((at_8 ?_4 ?_5 zero_4 (cons_10‹??_13› x_640 xs0_641)))
check_tm(?_4, U)
check_tm(?_5, ?_4)
check_tm(zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
check_tm((cons_10‹??_13› x_640 xs0_641), (list_7‹??_11› ?_4))
infer_tm((cons_10‹??_13› x_640 xs0_641))
check_tm(?_6, Type‹??_13›)
check_tm(x_640, ?_6)
infer_tm(x_640)
assert_equal1( ?_6, A_639)
check_tm(xs0_641, (list_7‹??_13› ?_6))
infer_tm(xs0_641)
assert_equal1( (list_7‹??_13› ?_6), (list_7‹??_12› A_639))
assert_equal1( (list_7‹??_11› ?_4), (list_7‹??_13› ?_6))
simpl_tm ~expand:false( (list_7‹U› ?_4), (list_7‹??_13› ?_6))
simpl_tm ~expand:false( ?_4, ?_6)
simpl_tm ~expand:false( ?_4, ?_6)
simpl_tm ~expand:false( (list_7‹U› ?_4), (list_7‹U› A_639))
simpl_tm ~expand:false( ?_4, A_639)
simpl_tm ~expand:false( A_639, A_639)
simpl_tm ~expand:false( x_640, ?_5)
simpl_tm ~expand:false( A_639, A_639)
infer_tm(U)
infer_tm(A_642)
infer_tm(nat_3)
infer_tm(A_642)
infer_tm((list_7‹??_14› A_642))
check_tm(A_642, Type‹??_14›)
infer_tm(A_642)
assert_equal1( Type‹??_14›, U)
simpl_tm ~expand:false( Type‹??_14›, U)
infer_tm((at_8 A_642 x_643 n_644 xs0_646))
check_tm(A_642, U)
infer_tm(A_642)
assert_equal1( U, U)
check_tm(x_643, A_642)
infer_tm(x_643)
assert_equal1( A_642, A_642)
check_tm(n_644, nat_3)
infer_tm(n_644)
assert_equal1( nat_3, nat_3)
check_tm(xs0_646, (list_7‹??_11› A_642))
infer_tm(xs0_646)
assert_equal1( (list_7‹??_11› A_642), (list_7‹??_14› A_642))
simpl_tm ~expand:false( (list_7‹U› A_642), (list_7‹U› A_642))
simpl_tm ~expand:false( A_642, A_642)
assert_equal1( A_642, ?_7)
assert_equal1( x_643, ?_8)
infer_tm((at_8
           ?_7 ?_8 (succ_5‹› n_644) (cons_10‹??_15› x0_645 xs0_646)))
check_tm(?_7, U)
check_tm(?_8, ?_7)
check_tm((succ_5‹› n_644), nat_3)
infer_tm((succ_5‹› n_644))
check_tm(n_644, nat_3)
infer_tm(n_644)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
check_tm((cons_10‹??_15› x0_645 xs0_646), (list_7‹??_11› ?_7))
infer_tm((cons_10‹??_15› x0_645 xs0_646))
check_tm(?_9, Type‹??_15›)
check_tm(x0_645, ?_9)
infer_tm(x0_645)
assert_equal1( ?_9, A_642)
check_tm(xs0_646, (list_7‹??_15› ?_9))
infer_tm(xs0_646)
assert_equal1( (list_7‹??_15› ?_9), (list_7‹??_14› A_642))
assert_equal1( (list_7‹??_11› ?_7), (list_7‹??_15› ?_9))
simpl_tm ~expand:false( (list_7‹U› ?_7), (list_7‹??_15› ?_9))
simpl_tm ~expand:false( ?_7, ?_9)
simpl_tm ~expand:false( ?_7, ?_9)
simpl_tm ~expand:false( (list_7‹U› ?_7), (list_7‹U› A_642))
simpl_tm ~expand:false( ?_7, A_642)
simpl_tm ~expand:false( A_642, A_642)
simpl_tm ~expand:false( x_643, ?_8)
simpl_tm ~expand:false( A_642, A_642)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_648
    ??_2 <= s_651
    ??_3 <= r_653
    ??_4 <= t_655
    ??_5 <= s_658
    ??_6 <= s_659
    ??_7 <= s_660
    ??_8 <= s_661
    ??_9 <= s_662
    ??_10 <= s_663
    ??_11 <= U
    ??_12 <= U
    ??_13 <= U
    ??_14 <= U
    ??_15 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_666
    ?_2 <= A_669
    ?_3 <= #A_560
    ?_4 <= A_677
    ?_5 <= x_679
    ?_6 <= ?_4
    ?_7 <= A_689
    ?_8 <= x_694
    ?_9 <= ?_7
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(U)
check_tm(A_639, U)
infer_tm(A_639)
assert_equal1( U, U)
infer_tm(A_639)
check_tm(x_640, A_639)
infer_tm(x_640)
assert_equal1( A_639, A_639)
infer_tm(U)
check_tm(A_639, U)
infer_tm(A_639)
assert_equal1( U, U)
infer_tm(U)
check_tm(A_642, U)
infer_tm(A_642)
assert_equal1( U, U)
infer_tm(A_642)
check_tm(x_643, A_642)
infer_tm(x_643)
assert_equal1( A_642, A_642)
infer_tm(U)
check_tm(A_642, U)
infer_tm(A_642)
assert_equal1( U, U)
----------------------------------

definition-------------------------
infer_tm(∀ {A_736 : U} ->
           ∀ (n_737 : nat_3) ->
             ∀ (xs_738 : (list_7‹??_30› A_736)) ->
               ∀ (__739 :
                 (eq_4‹??_32›
                   ?_33 ((lt_2) n_737 ((length_3‹??_31›) ?_34 xs_738))
                   true_2)) ->
                 (exists_5‹??_33,??_34,L›
                   ?_35
                   function _740 : ∀ (x_741 : ?_36) -> ?_37
                   | x_742 => (at_8 ?_38 x_742 n_737 xs_738)))
infer_tm(U)
infer_tm(∀ (n_744 : nat_3) ->
           ∀ (xs_745 : (list_7‹??_30› A_743)) ->
             ∀ (__746 :
               (eq_4‹??_32›
                 ?_33 ((lt_2) n_744 ((length_3‹??_31›) ?_34 xs_745))
                 true_2)) ->
               (exists_5‹??_33,??_34,L›
                 ?_35
                 function _747 : ∀ (x_748 : ?_36) -> ?_37
                 | x_749 => (at_8 ?_38 x_749 n_744 xs_745)))
infer_tm(nat_3)
infer_tm(∀ (xs_751 : (list_7‹??_30› A_743)) ->
           ∀ (__752 :
             (eq_4‹??_32›
               ?_33 ((lt_2) n_750 ((length_3‹??_31›) ?_34 xs_751)) true_2)) ->
             (exists_5‹??_33,??_34,L›
               ?_35
               function _753 : ∀ (x_754 : ?_36) -> ?_37
               | x_755 => (at_8 ?_38 x_755 n_750 xs_751)))
infer_tm((list_7‹??_30› A_743))
check_tm(A_743, Type‹??_30›)
infer_tm(A_743)
assert_equal1( Type‹??_30›, U)
simpl_tm ~expand:false( Type‹??_30›, U)
infer_tm(∀ (__757 :
           (eq_4‹??_32›
             ?_33 ((lt_2) n_750 ((length_3‹??_31›) ?_34 xs_756)) true_2)) ->
           (exists_5‹??_33,??_34,L›
             ?_35
             function _758 : ∀ (x_759 : ?_36) -> ?_37
             | x_760 => (at_8 ?_38 x_760 n_750 xs_756)))
infer_tm((eq_4‹??_32›
           ?_33 ((lt_2) n_750 ((length_3‹??_31›) ?_34 xs_756)) true_2))
check_tm(?_33, Type‹??_32›)
check_tm(((lt_2) n_750 ((length_3‹??_31›) ?_34 xs_756)), ?_33)
infer_tm(((lt_2) n_750 ((length_3‹??_31›) ?_34 xs_756)))
infer_tm(((lt_2) n_750))
infer_tm(lt_2)
check_tm(n_750, nat_3)
infer_tm(n_750)
assert_equal1( nat_3, nat_3)
check_tm(((length_3‹??_31›) ?_34 xs_756), nat_3)
infer_tm(((length_3‹??_31›) ?_34 xs_756))
infer_tm(((length_3‹??_31›) ?_34))
infer_tm(length_3‹??_31›)
check_tm(?_34, Type‹??_31›)
check_tm(xs_756, (list_7‹??_31› ?_34))
infer_tm(xs_756)
assert_equal1( (list_7‹??_31› ?_34), (list_7‹??_30› A_743))
assert_equal1( nat_3, nat_3)
assert_equal1( ?_33, bool_2)
check_tm(true_2, ?_33)
infer_tm(true_2)
assert_equal1( ?_33, bool_2)
simpl_tm ~expand:false( ?_33, bool_2)
simpl_tm ~expand:false( bool_2, bool_2)
simpl_tm ~expand:false( (list_7‹??_31› ?_34), (list_7‹U› A_743))
simpl_tm ~expand:false( ?_34, A_743)
simpl_tm ~expand:false( A_743, ?_34)
infer_tm((exists_5‹??_33,??_34,L›
           ?_35
           function _768 : ∀ (x_769 : ?_36) -> ?_37
           | x_770 => (at_8 ?_38 x_770 n_750 xs_756)))
check_tm(?_35, Type‹??_33›)
check_tm(function _771 : ∀ (x_772 : ?_36) -> ?_37
         | x_773 => (at_8 ?_38 x_773 n_750 xs_756), ?_35 -> Type‹??_34›)
infer_tm(function _775 : ∀ (x_776 : ?_36) -> ?_37
         | x_777 => (at_8 ?_38 x_777 n_750 xs_756))
infer_tm(∀ (x_779 : ?_36) -> ?_37)
infer_tm(?_36)
delay_assert(?_39, ??_35)
infer_tm(?_37)
simpl_tm ~expand:false( ?_39, Type‹??_35›)
delay_assert(?_40, ??_36)
simpl_tm ~expand:false( ?_40, Type‹??_36›)
check_cls {|
  prblm {| ; {|  ::: [x_781] =>? (at_8 ?_38 #x_781 n_750 xs_756) |} |}
|}
case_intro
case_coverage{|
  prblm {| ;
    {| eq_pat?( #x_783, x_781 : ?_36) ::: [] =>?
         (at_8 ?_38 #x_781 n_750 xs_756)
    |}
  |}
|}
unify_pprbm( eq_pat?( #x_783, x_781 : ?_36) )
simpl_pprbm ~expand:false( #x_783, #x_781)
simpl_pprbm ~expand:false( #x_783, #x_781)
case_coverage_ok((at_8 ?_38 x_783 n_750 xs_756), ?_37)
check_tm((at_8 ?_38 x_783 n_750 xs_756), ?_37)
infer_tm((at_8 ?_38 x_783 n_750 xs_756))
check_tm(?_38, U)
check_tm(x_783, ?_38)
infer_tm(x_783)
assert_equal1( ?_38, ?_36)
check_tm(n_750, nat_3)
infer_tm(n_750)
assert_equal1( nat_3, nat_3)
check_tm(xs_756, (list_7‹U› ?_38))
infer_tm(xs_756)
assert_equal1( (list_7‹U› ?_38), (list_7‹??_30› A_743))
assert_equal1( ?_37, U)
assert_equal1( ?_35 -> Type‹??_34›, ∀ (x_786 : ?_36) -> ?_37)
simpl_tm ~expand:false( ?_35 -> Type‹??_34›, ∀ (x_790 : ?_36) -> ?_37)
simpl_tm ~expand:false( ?_35, ?_36)
simpl_tm ~expand:false( Type‹??_34›, ?_37)
simpl_tm ~expand:false( Type‹??_34›, ?_37)
simpl_tm ~expand:false( Type‹??_34›, U)
simpl_tm ~expand:false( (list_7‹U› ?_38), (list_7‹U› A_743))
simpl_tm ~expand:false( ?_38, A_743)
simpl_tm ~expand:false( A_743, ?_35)
check_tm(function get_at_792 :
           ∀ {A_793 : U} ->
             ∀ (n_794 : nat_3) ->
               ∀ (xs_795 : (list_7‹??_16› A_793)) ->
                 ∀ (__796 :
                   (eq_4‹??_18›
                     ?_10 ((lt_2) n_794 ((length_3‹??_17›) ?_11 xs_795))
                     true_2)) ->
                   (exists_5‹??_19,??_20,L›
                     ?_12
                     function _797 : ∀ (x_798 : ?_13) -> ?_14
                     | x_799 => (at_8 ?_15 x_799 n_794 xs_795))
         | A_800 _801 nil_9 !! =>
         | A_802 zero_4 (cons_10 x_803 xs_804) _805 =>
           (ex_7‹??_21,??_22,??_23› x_803 (at_zero_11‹› xs_804))
         | A_806 (succ_5 n_807) (cons_10 x_808 xs_809) e_810 =>
           match ((get_at_792) ?_20 n_807 xs_809 e_810) in
             ∀ (__811 :
               (exists_5‹??_24,??_25,??_26›
                 ?_21
                 function _812 : ∀ (x_813 : ?_22) -> ?_23
                 | x_814 => (at_8 ?_24 x_814 n_807 xs_809))) -o
               ?_25
           with
           | (ex_7 x0_815 pf_816) =>
             (ex_7‹??_27,??_28,??_29›
               x0_815 (at_succ_12‹› ?_26 ?_27 ?_28 pf_816)), ∀ {A_817 :
                                                                   U} ->
                                                                   ∀ (n_818 :
                                                                    nat_3) ->
                                                                    ∀ (xs_819 :
                                                                    (list_7‹??_30›
                                                                    A_817)) ->
                                                                    ∀ (__820 :
                                                                    (eq_4‹??_32›
                                                                    ?_33
                                                                    ((lt_2)
                                                                    n_818
                                                                    ((length_3‹??_31›)
                                                                    ?_34
                                                                    xs_819))
                                                                    true_2)) ->
                                                                    (exists_5‹??_33,??_34,L›
                                                                    ?_35
                                                                    function _821 :
                                                                    ∀ (x_822 :
                                                                    ?_36) ->
                                                                    ?_37
                                                                    | 
                                                                    x_823 =>
                                                                    (at_8
                                                                    ?_38
                                                                    x_823
                                                                    n_818
                                                                    xs_819)))
infer_tm(function get_at_824 :
           ∀ {A_825 : U} ->
             ∀ (n_826 : nat_3) ->
               ∀ (xs_827 : (list_7‹??_16› A_825)) ->
                 ∀ (__828 :
                   (eq_4‹??_18›
                     ?_10 ((lt_2) n_826 ((length_3‹??_17›) ?_11 xs_827))
                     true_2)) ->
                   (exists_5‹??_19,??_20,L›
                     ?_12
                     function _829 : ∀ (x_830 : ?_13) -> ?_14
                     | x_831 => (at_8 ?_15 x_831 n_826 xs_827))
         | A_832 _833 nil_9 !! =>
         | A_834 zero_4 (cons_10 x_835 xs_836) _837 =>
           (ex_7‹??_21,??_22,??_23› x_835 (at_zero_11‹› xs_836))
         | A_838 (succ_5 n_839) (cons_10 x_840 xs_841) e_842 =>
           match ((get_at_824) ?_20 n_839 xs_841 e_842) in
             ∀ (__843 :
               (exists_5‹??_24,??_25,??_26›
                 ?_21
                 function _844 : ∀ (x_845 : ?_22) -> ?_23
                 | x_846 => (at_8 ?_24 x_846 n_839 xs_841))) -o
               ?_25
           with
           | (ex_7 x0_847 pf_848) =>
             (ex_7‹??_27,??_28,??_29›
               x0_847 (at_succ_12‹› ?_26 ?_27 ?_28 pf_848)))
infer_tm(∀ {A_850 : U} ->
           ∀ (n_851 : nat_3) ->
             ∀ (xs_852 : (list_7‹??_16› A_850)) ->
               ∀ (__853 :
                 (eq_4‹??_18›
                   ?_10 ((lt_2) n_851 ((length_3‹??_17›) ?_11 xs_852))
                   true_2)) ->
                 (exists_5‹??_19,??_20,L›
                   ?_12
                   function _854 : ∀ (x_855 : ?_13) -> ?_14
                   | x_856 => (at_8 ?_15 x_856 n_851 xs_852)))
infer_tm(U)
infer_tm(∀ (n_858 : nat_3) ->
           ∀ (xs_859 : (list_7‹??_16› A_857)) ->
             ∀ (__860 :
               (eq_4‹??_18›
                 ?_10 ((lt_2) n_858 ((length_3‹??_17›) ?_11 xs_859))
                 true_2)) ->
               (exists_5‹??_19,??_20,L›
                 ?_12
                 function _861 : ∀ (x_862 : ?_13) -> ?_14
                 | x_863 => (at_8 ?_15 x_863 n_858 xs_859)))
infer_tm(nat_3)
infer_tm(∀ (xs_865 : (list_7‹??_16› A_857)) ->
           ∀ (__866 :
             (eq_4‹??_18›
               ?_10 ((lt_2) n_864 ((length_3‹??_17›) ?_11 xs_865)) true_2)) ->
             (exists_5‹??_19,??_20,L›
               ?_12
               function _867 : ∀ (x_868 : ?_13) -> ?_14
               | x_869 => (at_8 ?_15 x_869 n_864 xs_865)))
infer_tm((list_7‹??_16› A_857))
check_tm(A_857, Type‹??_16›)
infer_tm(A_857)
assert_equal1( Type‹??_16›, U)
simpl_tm ~expand:false( Type‹??_16›, U)
infer_tm(∀ (__871 :
           (eq_4‹??_18›
             ?_10 ((lt_2) n_864 ((length_3‹??_17›) ?_11 xs_870)) true_2)) ->
           (exists_5‹??_19,??_20,L›
             ?_12
             function _872 : ∀ (x_873 : ?_13) -> ?_14
             | x_874 => (at_8 ?_15 x_874 n_864 xs_870)))
infer_tm((eq_4‹??_18›
           ?_10 ((lt_2) n_864 ((length_3‹??_17›) ?_11 xs_870)) true_2))
check_tm(?_10, Type‹??_18›)
check_tm(((lt_2) n_864 ((length_3‹??_17›) ?_11 xs_870)), ?_10)
infer_tm(((lt_2) n_864 ((length_3‹??_17›) ?_11 xs_870)))
infer_tm(((lt_2) n_864))
infer_tm(lt_2)
check_tm(n_864, nat_3)
infer_tm(n_864)
assert_equal1( nat_3, nat_3)
check_tm(((length_3‹??_17›) ?_11 xs_870), nat_3)
infer_tm(((length_3‹??_17›) ?_11 xs_870))
infer_tm(((length_3‹??_17›) ?_11))
infer_tm(length_3‹??_17›)
check_tm(?_11, Type‹??_17›)
check_tm(xs_870, (list_7‹??_17› ?_11))
infer_tm(xs_870)
assert_equal1( (list_7‹??_17› ?_11), (list_7‹??_16› A_857))
assert_equal1( nat_3, nat_3)
assert_equal1( ?_10, bool_2)
check_tm(true_2, ?_10)
infer_tm(true_2)
assert_equal1( ?_10, bool_2)
simpl_tm ~expand:false( ?_10, bool_2)
simpl_tm ~expand:false( bool_2, bool_2)
simpl_tm ~expand:false( (list_7‹??_17› ?_11), (list_7‹U› A_857))
simpl_tm ~expand:false( ?_11, A_857)
simpl_tm ~expand:false( A_857, ?_11)
infer_tm((exists_5‹??_19,??_20,L›
           ?_12
           function _882 : ∀ (x_883 : ?_13) -> ?_14
           | x_884 => (at_8 ?_15 x_884 n_864 xs_870)))
check_tm(?_12, Type‹??_19›)
check_tm(function _885 : ∀ (x_886 : ?_13) -> ?_14
         | x_887 => (at_8 ?_15 x_887 n_864 xs_870), ?_12 -> Type‹??_20›)
infer_tm(function _889 : ∀ (x_890 : ?_13) -> ?_14
         | x_891 => (at_8 ?_15 x_891 n_864 xs_870))
infer_tm(∀ (x_893 : ?_13) -> ?_14)
infer_tm(?_13)
delay_assert(?_41, ??_37)
infer_tm(?_14)
simpl_tm ~expand:false( ?_41, Type‹??_37›)
delay_assert(?_42, ??_38)
simpl_tm ~expand:false( ?_42, Type‹??_38›)
check_cls {|
  prblm {| ; {|  ::: [x_895] =>? (at_8 ?_15 #x_895 n_864 xs_870) |} |}
|}
case_intro
case_coverage{|
  prblm {| ;
    {| eq_pat?( #x_897, x_895 : ?_13) ::: [] =>?
         (at_8 ?_15 #x_895 n_864 xs_870)
    |}
  |}
|}
unify_pprbm( eq_pat?( #x_897, x_895 : ?_13) )
simpl_pprbm ~expand:false( #x_897, #x_895)
simpl_pprbm ~expand:false( #x_897, #x_895)
case_coverage_ok((at_8 ?_15 x_897 n_864 xs_870), ?_14)
check_tm((at_8 ?_15 x_897 n_864 xs_870), ?_14)
infer_tm((at_8 ?_15 x_897 n_864 xs_870))
check_tm(?_15, U)
check_tm(x_897, ?_15)
infer_tm(x_897)
assert_equal1( ?_15, ?_13)
check_tm(n_864, nat_3)
infer_tm(n_864)
assert_equal1( nat_3, nat_3)
check_tm(xs_870, (list_7‹U› ?_15))
infer_tm(xs_870)
assert_equal1( (list_7‹U› ?_15), (list_7‹??_16› A_857))
assert_equal1( ?_14, U)
assert_equal1( ?_12 -> Type‹??_20›, ∀ (x_900 : ?_13) -> ?_14)
simpl_tm ~expand:false( ?_12 -> Type‹??_20›, ∀ (x_904 : ?_13) -> ?_14)
simpl_tm ~expand:false( ?_12, ?_13)
simpl_tm ~expand:false( Type‹??_20›, ?_14)
simpl_tm ~expand:false( Type‹??_20›, ?_14)
simpl_tm ~expand:false( Type‹??_20›, U)
simpl_tm ~expand:false( (list_7‹U› ?_15), (list_7‹U› A_857))
simpl_tm ~expand:false( ?_15, A_857)
simpl_tm ~expand:false( A_857, ?_12)
check_cls {|
  prblm {| ;
    () ::: [A_906, _907, nil_9, !!] =>? !!
    {|  ::: [A_908, zero_4, (cons_10 x_909 xs_910), _911] =>?
         (ex_7‹??_21,??_22,??_23› #x_909 (at_zero_11‹› #xs_910))
    |}
    {|  ::: [A_912, (succ_5 n_913), (cons_10 x_914 xs_915), e_916] =>?
         match ((get_at_849) ?_20 #n_913 #xs_915 #e_916) in
           ∀ (__938 :
             (exists_5‹??_24,??_25,??_26›
               ?_21
               function _939 : ∀ (x_940 : ?_22) -> ?_23
               | x_941 => (at_8 ?_24 x_941 #n_913 #xs_915))) -o
             ?_25
         with
         | (ex_7 x0_942 pf_943) =>
           (ex_7‹??_27,??_28,??_29›
             x0_942 (at_succ_12‹› ?_26 ?_27 ?_28 pf_943))
    |}
  |}
|}
case_intro
case_intro
case_intro
case_intro
case_splitting
splitting_on(nil_9)
case_absurd
unify_pprbm( eq_term?( (list_7‹U› #A_944), (list_7‹U› #A_944)) )
simpl_pprbm ~expand:false( (list_7‹U› #A_944), (list_7‹U› #A_944))
simpl_pprbm ~expand:false( #A_944, #A_944)
unify_pprbm(
  eq_term?(
    (eq_4‹??_18›
      bool_2 ((lt_2) #n_945 ((length_3‹U›) #A_944 nil_9‹U›)) true_2),
    (eq_4‹??_18›
      bool_2 ((lt_2) #n_945 ((length_3‹U›) #A_944 nil_9‹U›))
      ((lt_2) #n_945 ((length_3‹U›) #A_944 nil_9‹U›))))
  eq_term?( (list_7‹U› #A_944), (list_7‹U› #A_944))
)
simpl_pprbm ~expand:false(
  (eq_4‹??_18›
    bool_2 ((lt_2) #n_945 ((length_3‹U›) #A_944 nil_9‹U›)) true_2),
  (eq_4‹??_18›
    bool_2 ((lt_2) #n_945 ((length_3‹U›) #A_944 nil_9‹U›))
    ((lt_2) #n_945 ((length_3‹U›) #A_944 nil_9‹U›))))
simpl_pprbm ~expand:false( bool_2, bool_2)
simpl_pprbm ~expand:false(
  ((lt_2) #n_945 ((length_3‹U›) #A_944 nil_9‹U›)),
  ((lt_2) #n_945 ((length_3‹U›) #A_944 nil_9‹U›)))
simpl_pprbm ~expand:false( lt_2, lt_2)
simpl_pprbm ~expand:false( #n_945, #n_945)
simpl_pprbm ~expand:false( ((length_3‹U›) #A_944 nil_9‹U›),
  ((length_3‹U›) #A_944 nil_9‹U›))
simpl_pprbm ~expand:false( length_3‹U›, length_3‹U›)
simpl_pprbm ~expand:false( #A_944, #A_944)
simpl_pprbm ~expand:false( nil_9‹U›, nil_9‹U›)
simpl_pprbm ~expand:false( #A_944, #A_944)
simpl_pprbm ~expand:false( true_2,
  ((lt_2) #n_945 ((length_3‹U›) #A_944 nil_9‹U›)))
simpl_pprbm ~expand:false( true_2, lt_2)
simpl_pprbm ~expand:true( true_2,
  function lt_976 : nat_3 -> nat_3 -> bool_2
  | x_979 y_980 => ((lte_1) (succ_5‹› x_979) y_980))
simpl_pprbm ~expand:true( true_2, false_3)
splitting_on(cons_10)
case_splitting
splitting_on(zero_4)
case_coverage{|
  prblm {|
    eq_term?( nat_3, nat_3)
    eq_term?( (list_7‹U› #A_944), (list_7‹U› #A_944));
    {| eq_pat?( #A_944, A_908 : U)
       eq_pat?( #hd_986, x_909 : #A_944)
       eq_pat?( #tl_987, xs_910 : (list_7‹U› #A_944))
       eq_pat?( #__947, _911 :
         (eq_4‹??_18›
           bool_2
           ((lt_2)
             zero_4
             ((length_3‹U›) #A_944 (cons_10‹U› #hd_986 #tl_987)))
           true_2)) ::: [] =>?
         (ex_7‹??_21,??_22,??_23› #x_909 (at_zero_11‹› #xs_910))
    |}
  |}
|}
unify_pprbm(
  eq_term?( nat_3, nat_3)
  eq_term?( (list_7‹U› #A_944), (list_7‹U› #A_944))
  eq_pat?( #A_944, A_908 : U)
  eq_pat?( #hd_986, x_909 : #A_944)
  eq_pat?( #tl_987, xs_910 : (list_7‹U› #A_944))
  eq_pat?( #__947, _911 :
    (eq_4‹??_18›
      bool_2
      ((lt_2)
        zero_4 ((length_3‹U›) #A_944 (cons_10‹U› #hd_986 #tl_987)))
      true_2))
)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( (list_7‹U› #A_944), (list_7‹U› #A_944))
simpl_pprbm ~expand:false( #A_944, #A_944)
simpl_pprbm ~expand:false( #A_944, #A_908)
simpl_pprbm ~expand:false( #hd_986, #x_909)
simpl_pprbm ~expand:false( #tl_987, #xs_910)
simpl_pprbm ~expand:false( #__947, #_911)
simpl_pprbm ~expand:false( #A_944, #A_908)
simpl_pprbm ~expand:false( #hd_986, #x_909)
simpl_pprbm ~expand:false( #tl_987, #xs_910)
simpl_pprbm ~expand:false( #__947, #_911)
case_coverage_ok((ex_7‹??_21,??_22,??_23›
                   hd_986 (at_zero_11‹› tl_987)), (exists_5‹??_19,U,L›
                                                        A_944
                                                        function _1072 :
                                                          A_944 -> U
                                                        | x_1074 =>
                                                          (at_8
                                                            A_944 x_1074
                                                            zero_4
                                                            (cons_10‹U›
                                                              hd_986 tl_987))))
check_tm((ex_7‹??_21,??_22,??_23› hd_986 (at_zero_11‹› tl_987)), 
(exists_5‹??_19,U,L›
  A_944
  function _1075 : A_944 -> U
  | x_1077 => (at_8 A_944 x_1077 zero_4 (cons_10‹U› hd_986 tl_987))))
infer_tm((ex_7‹??_21,??_22,??_23› hd_986 (at_zero_11‹› tl_987)))
check_tm(?_18, Type‹??_21›)
check_tm(?_19, ?_18 -> Type‹??_22›)
check_tm(hd_986, ?_18)
infer_tm(hd_986)
assert_equal1( ?_18, #A_944)
check_tm((at_zero_11‹› tl_987), ((?_19) hd_986))
infer_tm((at_zero_11‹› tl_987))
check_tm(?_16, U)
check_tm(?_17, ?_16)
check_tm(tl_987, (list_7‹U› ?_16))
infer_tm(tl_987)
assert_equal1( (list_7‹U› ?_16), (list_7‹U› #A_944))
assert_equal1( ((?_19) hd_986),
  (at_8 ?_16 ?_17 zero_4 (cons_10‹U› ?_17 tl_987)))
assert_equal1(
  (exists_5‹??_19,U,L›
    A_944
    function _1079 : A_944 -> U
    | x_1081 => (at_8 A_944 x_1081 zero_4 (cons_10‹U› hd_986 tl_987))),
  (exists_5‹??_21,??_22,??_23› ?_18 ?_19))
splitting_on(succ_5)
case_coverage{|
  prblm {|
    eq_term?( nat_3, nat_3)
    eq_term?( (list_7‹U› #A_944), (list_7‹U› #A_944));
    {| eq_pat?( #A_944, A_912 : U)
       eq_pat?( #pred_1082, n_913 : nat_3)
       eq_pat?( #hd_986, x_914 : #A_944)
       eq_pat?( #tl_987, xs_915 : (list_7‹U› #A_944))
       eq_pat?( #__947, e_916 :
         (eq_4‹??_18›
           bool_2
           ((lt_2)
             (succ_5‹› #pred_1082)
             ((length_3‹U›) #A_944 (cons_10‹U› #hd_986 #tl_987)))
           true_2)) ::: [] =>?
         match ((get_at_849) ?_20 #n_913 #xs_915 #e_916) in
           ∀ (__1111 :
             (exists_5‹??_24,??_25,??_26›
               ?_21
               function _1112 : ∀ (x_1113 : ?_22) -> ?_23
               | x_1114 => (at_8 ?_24 x_1114 #n_913 #xs_915))) -o
             ?_25
         with
         | (ex_7 x0_1115 pf_1116) =>
           (ex_7‹??_27,??_28,??_29›
             x0_1115 (at_succ_12‹› ?_26 ?_27 ?_28 pf_1116))
    |}
  |}
|}
unify_pprbm(
  eq_term?( nat_3, nat_3)
  eq_term?( (list_7‹U› #A_944), (list_7‹U› #A_944))
  eq_pat?( #A_944, A_912 : U)
  eq_pat?( #pred_1082, n_913 : nat_3)
  eq_pat?( #hd_986, x_914 : #A_944)
  eq_pat?( #tl_987, xs_915 : (list_7‹U› #A_944))
  eq_pat?( #__947, e_916 :
    (eq_4‹??_18›
      bool_2
      ((lt_2)
        (succ_5‹› #pred_1082)
        ((length_3‹U›) #A_944 (cons_10‹U› #hd_986 #tl_987)))
      true_2))
)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( (list_7‹U› #A_944), (list_7‹U› #A_944))
simpl_pprbm ~expand:false( #A_944, #A_944)
simpl_pprbm ~expand:false( #A_944, #A_912)
simpl_pprbm ~expand:false( #pred_1082, #n_913)
simpl_pprbm ~expand:false( #hd_986, #x_914)
simpl_pprbm ~expand:false( #tl_987, #xs_915)
simpl_pprbm ~expand:false( #__947, #e_916)
simpl_pprbm ~expand:false( #A_944, #A_912)
simpl_pprbm ~expand:false( #pred_1082, #n_913)
simpl_pprbm ~expand:false( #hd_986, #x_914)
simpl_pprbm ~expand:false( #tl_987, #xs_915)
simpl_pprbm ~expand:false( #__947, #e_916)
case_coverage_ok(match ((get_at_849) ?_20 pred_1082 tl_987 __947) in
                   ∀ (__1151 :
                     (exists_5‹??_24,??_25,??_26›
                       ?_21
                       function _1152 : ∀ (x_1153 : ?_22) -> ?_23
                       | x_1154 => (at_8 ?_24 x_1154 pred_1082 tl_987))) -o
                     ?_25
                 with
                 | (ex_7 x0_1155 pf_1156) =>
                   (ex_7‹??_27,??_28,??_29›
                     x0_1155 (at_succ_12‹› ?_26 ?_27 ?_28 pf_1156)), 
(exists_5‹??_19,U,L›
  A_944
  function _1157 : A_944 -> U
  | x_1159 =>
    (at_8
      A_944 x_1159 (succ_5‹› pred_1082) (cons_10‹U› hd_986 tl_987))))
check_tm(match ((get_at_849) ?_20 pred_1082 tl_987 __947) in
           ∀ (__1160 :
             (exists_5‹??_24,??_25,??_26›
               ?_21
               function _1161 : ∀ (x_1162 : ?_22) -> ?_23
               | x_1163 => (at_8 ?_24 x_1163 pred_1082 tl_987))) -o
             ?_25
         with
         | (ex_7 x0_1164 pf_1165) =>
           (ex_7‹??_27,??_28,??_29›
             x0_1164 (at_succ_12‹› ?_26 ?_27 ?_28 pf_1165)), (exists_5‹??_19,U,L›
                                                                   A_944
                                                                   function _1166 :
                                                                    A_944 ->
                                                                    U
                                                                   | 
                                                                   x_1168 =>
                                                                   (at_8
                                                                    A_944
                                                                    x_1168
                                                                    (succ_5‹›
                                                                    pred_1082)
                                                                    (cons_10‹U›
                                                                    hd_986
                                                                    tl_987))))
infer_tm(match ((get_at_849) ?_20 pred_1082 tl_987 __947) in
           ∀ (__1169 :
             (exists_5‹??_24,??_25,??_26›
               ?_21
               function _1170 : ∀ (x_1171 : ?_22) -> ?_23
               | x_1172 => (at_8 ?_24 x_1172 pred_1082 tl_987))) -o
             ?_25
         with
         | (ex_7 x0_1173 pf_1174) =>
           (ex_7‹??_27,??_28,??_29›
             x0_1173 (at_succ_12‹› ?_26 ?_27 ?_28 pf_1174)))
infer_tm(∀ (__1175 :
           (exists_5‹??_24,??_25,??_26›
             ?_21
             function _1176 : ∀ (x_1177 : ?_22) -> ?_23
             | x_1178 => (at_8 ?_24 x_1178 pred_1082 tl_987))) -o
           ?_25)
infer_tm((exists_5‹??_24,??_25,??_26›
           ?_21
           function _1180 : ∀ (x_1181 : ?_22) -> ?_23
           | x_1182 => (at_8 ?_24 x_1182 pred_1082 tl_987)))
check_tm(?_21, Type‹??_24›)
check_tm(function _1183 : ∀ (x_1184 : ?_22) -> ?_23
         | x_1185 => (at_8 ?_24 x_1185 pred_1082 tl_987), ?_21 ->
                                                            Type‹??_25›)
infer_tm(function _1187 : ∀ (x_1188 : ?_22) -> ?_23
         | x_1189 => (at_8 ?_24 x_1189 pred_1082 tl_987))
infer_tm(∀ (x_1191 : ?_22) -> ?_23)
infer_tm(?_22)
simpl_tm ~expand:false(
  (exists_5‹??_19,U,L›
    A_944
    function _1196 : A_944 -> U
    | x_1198 => (at_8 A_944 x_1198 zero_4 (cons_10‹U› hd_986 tl_987))),
  (exists_5‹??_21,??_22,??_23› ?_18 ?_19))
simpl_tm ~expand:false( A_944, ?_18)
simpl_tm ~expand:false(
  function _1199 : A_944 -> U
  | x_1201 => (at_8 A_944 x_1201 zero_4 (cons_10‹U› hd_986 tl_987)),
  ?_19)
simpl_tm ~expand:false( A_944, ?_18)
simpl_tm ~expand:false(
  function _1205 : A_944 -> U
  | x_1207 => (at_8 A_944 x_1207 zero_4 (cons_10‹U› hd_986 tl_987)),
  ?_19)
simpl_tm ~expand:false(
  (at_8 A_944 hd_986 zero_4 (cons_10‹U› hd_986 tl_987)),
  (at_8 ?_16 ?_17 zero_4 (cons_10‹U› ?_17 tl_987)))
simpl_tm ~expand:false( A_944, ?_16)
simpl_tm ~expand:false( hd_986, ?_17)
simpl_tm ~expand:false( zero_4, zero_4)
simpl_tm ~expand:false( (cons_10‹U› hd_986 tl_987),
  (cons_10‹U› ?_17 tl_987))
simpl_tm ~expand:false( A_944, ?_16)
simpl_tm ~expand:false( hd_986, ?_17)
simpl_tm ~expand:false( tl_987, tl_987)
simpl_tm ~expand:false( hd_986, ?_17)
simpl_tm ~expand:false( A_944, A_944)
simpl_tm ~expand:false( hd_986, hd_986)
simpl_tm ~expand:false( (list_7‹U› A_944), (list_7‹U› #A_944))
simpl_tm ~expand:false( A_944, #A_944)
simpl_tm ~expand:true( A_944, #A_944)
error -----------------------------------

unifier1.simpl_iprbm(
  A_944,
  #A_944
)
