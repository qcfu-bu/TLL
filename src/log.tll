[Inductive {name = "unit"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)), [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
      ));
   view = []};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("true", (TBase (Id ("bool", I))), []));
             (DConstr ("false", (TBase (Id ("bool", I))), []))]))
       ));
    view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("pred", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id ("A", I)),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id ("A", I)),
                          (Binder ("_", (TBase (Type U)))))),
                       [(DConstr ("refl",
                           (TBase
                              (App
                                 [(Id ("eq", I)); (Id ("m", I));
                                   (Id ("m", I))])),
                           []))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type U)),
                       [(DConstr ("ex",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (N,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("pf",
                                       (TBase
                                          (App
                                             [(Id ("exists", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("A", I)),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DConstr ("just",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("m",
                           (TBase (App [(Id ("sing", I)); (Id ("m", I))]))))
                        )),
                     [E]))
                   ]))
             ))
          ))
       ));
    view = [I]};
  Inductive {name = "list"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type U)),
                 [(DConstr ("nil",
                     (TBase (App [(Id ("list", I)); (Id ("A", I))])), 
                     []));
                   (DConstr ("cons",
                      (TBind (R, (Id ("A", I)),
                         (Binder ("hd",
                            (TBind (R,
                               (App [(Id ("list", I)); (Id ("A", I))]),
                               (Binder ("tl",
                                  (TBase
                                     (App [(Id ("list", I)); (Id ("A", I))]))
                                  ))
                               ))
                            ))
                         )),
                      [E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Inductive {name = "vec"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("nat", I)), (Binder ("_", (TBase (Type U))))
                    )),
                 [(DConstr ("vnil",
                     (TBase
                        (App
                           [(Id ("vec", I)); (Id ("A", I)); (Id ("zero", I))])),
                     []));
                   (DConstr ("vcons",
                      (TBind (N, (Id ("nat", I)),
                         (Binder ("n",
                            (TBind (R, (Id ("A", I)),
                               (Binder ("hd",
                                  (TBind (R,
                                     (App
                                        [(Inst ("vec", [(SId "s")], I));
                                          (Id ("A", I)); (Id ("n", I))]),
                                     (Binder ("tl",
                                        (TBase
                                           (App
                                              [(Id ("vec", I));
                                                (Id ("A", I));
                                                (App
                                                   [(Id ("succ", I));
                                                     (Id ("n", I))])
                                                ]))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         )),
                      [I; E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Definition {name = "rwl"; relv = R;
    body =
    (Binder (["s"; "r"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("A", I)),
                    (Binder ("m",
                       (Pi (N, U, (Id ("A", I)),
                          (Binder ("n",
                             (Pi (N, U,
                                (Pi (R, U, (Id ("A", I)),
                                   (Binder ("_", (Type (SId "r")))))),
                                (Binder ("B",
                                   (Pi (N, U,
                                      (App
                                         [(Id ("eq", I)); (Id ("m", I));
                                           (Id ("n", I))]),
                                      (Binder ("_",
                                         (Pi (R, U,
                                            (App
                                               [(Id ("B", I)); (Id ("m", I))]),
                                            (Binder ("_",
                                               (App
                                                  [(Id ("B", I));
                                                    (Id ("n", I))])
                                               ))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "rwl"),
              [([(PId "A"); (PId "m"); (PId "n"); (PId "B"); (PId "refl");
                  (PId "x")],
                (Some (Id ("x", I))))]
              )),
           [I; I; I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("A", I)),
                 (Binder ("m",
                    (Pi (N, U, (Id ("A", I)),
                       (Binder ("n",
                          (Pi (N, U,
                             (Pi (R, U, (Id ("A", I)),
                                (Binder ("_", (Type (SId "r")))))),
                             (Binder ("B",
                                (Pi (N, U,
                                   (App
                                      [(Id ("eq", I)); (Id ("m", I));
                                        (Id ("n", I))]),
                                   (Binder ("_",
                                      (Pi (R, U,
                                         (App [(Id ("B", I)); (Id ("m", I))]),
                                         (Binder ("_",
                                            (App
                                               [(Id ("B", I)); (Id ("n", I))])
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; I; E]};
  Definition {name = "rwr"; relv = R;
    body =
    (Binder (["s"; "r"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("A", I)),
                    (Binder ("m",
                       (Pi (N, U, (Id ("A", I)),
                          (Binder ("n",
                             (Pi (N, U,
                                (Pi (R, U, (Id ("A", I)),
                                   (Binder ("_", (Type (SId "r")))))),
                                (Binder ("B",
                                   (Pi (N, U,
                                      (App
                                         [(Id ("eq", I)); (Id ("m", I));
                                           (Id ("n", I))]),
                                      (Binder ("_",
                                         (Pi (R, U,
                                            (App
                                               [(Id ("B", I)); (Id ("n", I))]),
                                            (Binder ("_",
                                               (App
                                                  [(Id ("B", I));
                                                    (Id ("m", I))])
                                               ))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "rwr"),
              [([(PId "A"); (PId "m"); (PId "n"); (PId "B"); (PId "refl");
                  (PId "x")],
                (Some (Id ("x", I))))]
              )),
           [I; I; I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("A", I)),
                 (Binder ("m",
                    (Pi (N, U, (Id ("A", I)),
                       (Binder ("n",
                          (Pi (N, U,
                             (Pi (R, U, (Id ("A", I)),
                                (Binder ("_", (Type (SId "r")))))),
                             (Binder ("B",
                                (Pi (N, U,
                                   (App
                                      [(Id ("eq", I)); (Id ("m", I));
                                        (Id ("n", I))]),
                                   (Binder ("_",
                                      (Pi (R, U,
                                         (App [(Id ("B", I)); (Id ("n", I))]),
                                         (Binder ("_",
                                            (App
                                               [(Id ("B", I)); (Id ("m", I))])
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; I; E]};
  Definition {name = "congr"; relv = N;
    body =
    (Binder (["s"; "r"; "t"],
       ((Fun (
           (Pi (R, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (Type (SId "r")),
                    (Binder ("B",
                       (Pi (R, U, (Id ("A", I)),
                          (Binder ("m",
                             (Pi (R, U, (Id ("A", I)),
                                (Binder ("n",
                                   (Pi (R, U,
                                      (Pi (R, (SId "t"), (Id ("A", I)),
                                         (Binder ("_", (Id ("B", I)))))),
                                      (Binder ("f",
                                         (Pi (R, U,
                                            (App
                                               [(Id ("eq", I));
                                                 (Id ("m", I)); (Id ("n", I))
                                                 ]),
                                            (Binder ("_",
                                               (App
                                                  [(Id ("eq", I));
                                                    (App
                                                       [(Id ("f", I));
                                                         (Id ("m", I))]);
                                                    (App
                                                       [(Id ("f", I));
                                                         (Id ("n", I))])
                                                    ])
                                               ))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "congr"),
              [([(PId "A"); (PId "B"); (PId "m"); (PId "n"); (PId "f");
                  (PId "refl")],
                (Some (Id ("refl", I))))]
              )),
           [I; I; I; I; E])),
        (Pi (R, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U, (Type (SId "r")),
                 (Binder ("B",
                    (Pi (R, U, (Id ("A", I)),
                       (Binder ("m",
                          (Pi (R, U, (Id ("A", I)),
                             (Binder ("n",
                                (Pi (R, U,
                                   (Pi (R, (SId "t"), (Id ("A", I)),
                                      (Binder ("_", (Id ("B", I)))))),
                                   (Binder ("f",
                                      (Pi (R, U,
                                         (App
                                            [(Id ("eq", I)); (Id ("m", I));
                                              (Id ("n", I))]),
                                         (Binder ("_",
                                            (App
                                               [(Id ("eq", I));
                                                 (App
                                                    [(Id ("f", I));
                                                      (Id ("m", I))]);
                                                 (App
                                                    [(Id ("f", I));
                                                      (Id ("n", I))])
                                                 ])
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; I; I; E]};
  Definition {name = "hd_vec"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("_", (Id ("A", I))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "hd_vec"),
              [([(PId "A"); (PId "n"); (PId "vnil")], None);
                ([(PId "A"); (PId "n");
                   (PConstr ("vcons", [(PId "_"); (PId "hd"); (PId "_")]))],
                 (Some (Id ("hd", I))))
                ]
              )),
           [I; I])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("_", (Id ("A", I))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Definition {name = "hd_vec2"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("xs", IMeta))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "hd_vec2"),
              [([(PId "A"); (PId "n"); (PId "xs")],
                (Some (Match (
                         [(N, IMeta, (Some ("n0", IMeta)));
                           (R, (Id ("xs", I)),
                            (Some ("_",
                                   (App
                                      [(Id ("vec", I)); (Id ("A", I));
                                        (App
                                           [(Id ("succ", I)); (Id ("n0", I))])
                                        ]))))
                           ],
                         None,
                         [([(PId "_"); (PId "vnil")], None);
                           ([(PId "_");
                              (PConstr ("vcons",
                                 [(PId "_"); (PId "hd"); (PId "_")]))
                              ],
                            (Some (Id ("hd", I))))
                           ]
                         ))))
                ]
              )),
           [I; I; E])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("xs", IMeta))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; E]};
  Definition {name = "hd_vec3"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("xs", IMeta))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "hd_vec3"),
              [([(PId "A"); (PId "n"); (PId "xs")],
                (Some (Match ([(R, (Id ("xs", I)), None)], None,
                         [([(PId "vnil")], None);
                           ([(PConstr ("vcons",
                                [(PId "_"); (PId "hd"); (PId "_")]))
                              ],
                            (Some (Id ("hd", I))))
                           ]
                         ))))
                ]
              )),
           [I; I; E])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("xs", IMeta))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; E]};
  Definition {name = "vlength"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I)); (Id ("n", I))]),
                          (Binder ("_",
                             (App
                                [(Id ("exists", I));
                                  (Fun (
                                     (Pi (R, U, IMeta, (Binder ("x", IMeta))
                                        )),
                                     (Binder (None,
                                        [([(PId "x")],
                                          (Some (App
                                                   [(Id ("eq", I));
                                                     (Id ("x", I));
                                                     (Id ("n", I))])))
                                          ]
                                        )),
                                     []))
                                  ])
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "vlength"),
              [([(PId "A"); (PId "n"); (PId "vnil")],
                (Some (App
                         [(Id ("ex", I)); (Id ("zero", I)); (Id ("refl", I))])));
                ([(PId "A"); (PId "n");
                   (PConstr ("vcons", [(PId "_"); (PId "_"); (PId "tl")]))],
                 (Some (Match (
                          [(R, (App [(Id ("vlength", I)); (Id ("tl", I))]),
                            None)],
                          None,
                          [([(PConstr ("ex", [(PId "n"); (PId "pf")]))],
                            (Some (App
                                     [(Id ("ex", I));
                                       (App [(Id ("succ", I)); (Id ("n", I))]);
                                       (App
                                          [(Id ("congr", I));
                                            (Fun (
                                               (Pi (R, U, IMeta,
                                                  (Binder ("x", IMeta)))),
                                               (Binder (None,
                                                  [([(PId "x")],
                                                    (Some (App
                                                             [(Id ("succ", I
                                                                 ));
                                                               (Id ("x", I))])))
                                                    ]
                                                  )),
                                               []));
                                            (Id ("pf", I))])
                                       ])))
                            ]
                          ))))
                ]
              )),
           [I; I])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App [(Id ("vec", I)); (Id ("A", I)); (Id ("n", I))]),
                       (Binder ("_",
                          (App
                             [(Id ("exists", I));
                               (Fun (
                                  (Pi (R, U, IMeta, (Binder ("x", IMeta)))),
                                  (Binder (None,
                                     [([(PId "x")],
                                       (Some (App
                                                [(Id ("eq", I));
                                                  (Id ("x", I));
                                                  (Id ("n", I))])))
                                       ]
                                     )),
                                  []))
                               ])
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Definition {name = "xs"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("vcons", I)); (Id ("zero", I)); (Id ("vnil", I))]), IMeta)
       ));
    view = []};
  Definition {name = "x"; relv = R;
    body = (Binder ([], ((App [(Id ("hd_vec", I)); (Id ("xs", I))]), IMeta)));
    view = []};
  Definition {name = "y"; relv = R;
    body =
    (Binder ([], ((App [(Id ("hd_vec2", I)); (Id ("xs", I))]), IMeta)));
    view = []};
  Definition {name = "z"; relv = R;
    body =
    (Binder ([], ((App [(Id ("hd_vec3", I)); (Id ("xs", I))]), IMeta)));
    view = []}
  ]

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_182 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_183› (A_184 : Type‹s_183›) (m_185 : A_184):
  A_184 -> U
where
| refl_6 : (eq_4‹??_1› ?_1 m_185 m_185)

#[program]
inductive exists_5‹s_187,r_188› (A_189 : Type‹s_187›) (B_190 : 
A_189 -> Type‹r_188›): U where
| ex_7
    (m_192 : A_189) {pf_193 : ((B_190) m_192)}
    : (exists_5‹??_2,??_3› A_189 B_190)

#[program]
inductive sing_6‹s_194› (A_195 : Type‹s_194›):
  A_195 -> Type‹s_194›
where
| just_8 (m_197 : A_195) : (sing_6‹??_4› ?_2 m_197)

#[program]
inductive list_7‹s_198› (A_199 : Type‹s_198›): U where
| nil_9 : (list_7‹??_5› A_199)
| cons_10
    (hd_200 : A_199) (tl_201 : (list_7‹??_6› A_199))
    : (list_7‹??_7› A_199)

#[program]
inductive vec_8‹s_202› (A_203 : Type‹s_202›): nat_3 -> U where
| vnil_11 : (vec_8‹??_8› A_203 zero_4)
| vcons_12
    {n_205 : nat_3} (hd_206 : A_203)
    (tl_207 : (vec_8‹s_202› A_203 n_205))
    : (vec_8‹??_9› A_203 (succ_5‹› n_205))

#[program]
def rwl_1‹s_208,r_209› :
  ∀ {A_210 : Type‹s_208›} ->
    ∀ {m_211 : A_210} ->
      ∀ {n_212 : A_210} ->
        ∀ {B_213 : A_210 -> Type‹r_209›} ->
          {(eq_4‹??_11› ?_4 m_211 n_212)} ->
            ((B_213) m_211) -> ((B_213) n_212)
:=
  function rwl_217 :
    ∀ {A_218 : Type‹s_208›} ->
      ∀ {m_219 : A_218} ->
        ∀ {n_220 : A_218} ->
          ∀ {B_221 : A_218 -> Type‹r_209›} ->
            {(eq_4‹??_10› ?_3 m_219 n_220)} ->
              ((B_221) m_219) -> ((B_221) n_220)
  | A_225 m_226 n_227 B_228 refl_6 x_229 => x_229

#[program]
def rwr_2‹s_230,r_231› :
  ∀ {A_232 : Type‹s_230›} ->
    ∀ {m_233 : A_232} ->
      ∀ {n_234 : A_232} ->
        ∀ {B_235 : A_232 -> Type‹r_231›} ->
          {(eq_4‹??_13› ?_6 m_233 n_234)} ->
            ((B_235) n_234) -> ((B_235) m_233)
:=
  function rwr_239 :
    ∀ {A_240 : Type‹s_230›} ->
      ∀ {m_241 : A_240} ->
        ∀ {n_242 : A_240} ->
          ∀ {B_243 : A_240 -> Type‹r_231›} ->
            {(eq_4‹??_12› ?_5 m_241 n_242)} ->
              ((B_243) n_242) -> ((B_243) m_241)
  | A_247 m_248 n_249 B_250 refl_6 x_251 => x_251

#[logical]
def congr_3‹s_252,r_253,t_254› :
  ∀ (A_255 : Type‹s_252›) ->
    ∀ (B_256 : Type‹r_253›) ->
      ∀ (m_257 : A_255) ->
        ∀ (n_258 : A_255) ->
          ∀ (f_259 : forall‹t_254›(__260 : A_255), B_256) ->
            ∀ (__261 : (eq_4‹??_17› ?_11 m_257 n_258)) ->
              (eq_4‹??_18› ?_12 ((f_259) m_257) ((f_259) n_258))
:=
  function congr_262 :
    ∀ (A_263 : Type‹s_252›) ->
      ∀ (B_264 : Type‹r_253›) ->
        ∀ (m_265 : A_263) ->
          ∀ (n_266 : A_263) ->
            ∀ (f_267 : forall‹t_254›(__268 : A_263), B_264) ->
              ∀ (__269 : (eq_4‹??_14› ?_7 m_265 n_266)) ->
                (eq_4‹??_15› ?_8 ((f_267) m_265) ((f_267) n_266))
  | A_270 B_271 m_272 n_273 f_274 refl_6 => refl_6‹??_16›

#[program]
def hd_vec_4‹› :
  ∀ {A_275 : U} ->
    ∀ {n_276 : nat_3} ->
      (vec_8‹??_20› A_275 (succ_5‹› n_276)) -> A_275
:=
  function hd_vec_278 :
    ∀ {A_279 : U} ->
      ∀ {n_280 : nat_3} ->
        (vec_8‹??_19› A_279 (succ_5‹› n_280)) -> A_279
  | A_282 n_283 vnil_11 =>
  | A_284 n_285 (vcons_12 _286 hd_287 _288) => hd_287

#[program]
def hd_vec2_5‹› :
  ∀ {A_289 : U} ->
    ∀ {n_290 : nat_3} ->
      ∀ (xs_291 : (vec_8‹??_23› A_289 (succ_5‹› n_290))) -> ?_17
:=
  function hd_vec2_292 :
    ∀ {A_293 : U} ->
      ∀ {n_294 : nat_3} ->
        ∀ (xs_295 : (vec_8‹??_21› A_293 (succ_5‹› n_294))) -> ?_13
  | A_296 n_297 xs_298 =>
    match ?_14, xs_298 in
      ∀ {n0_299 : ?_15} -o
        ∀ (__300 : (vec_8‹??_22› A_296 (succ_5‹› n0_299))) -o ?_16
    with
    | _301, vnil_11 =>
    | _302, (vcons_12 _303 hd_304 _305) => hd_304

#[program]
def hd_vec3_6‹› :
  ∀ {A_306 : U} ->
    ∀ {n_307 : nat_3} ->
      ∀ (xs_308 : (vec_8‹??_25› A_306 (succ_5‹› n_307))) -> ?_21
:=
  function hd_vec3_309 :
    ∀ {A_310 : U} ->
      ∀ {n_311 : nat_3} ->
        ∀ (xs_312 : (vec_8‹??_24› A_310 (succ_5‹› n_311))) -> ?_18
  | A_313 n_314 xs_315 =>
    match xs_315 in ∀ (_316 : ?_19) -o ?_20 with
    | vnil_11 =>
    | (vcons_12 _317 hd_318 _319) => hd_318

#[program]
def vlength_7‹› :
  ∀ {A_320 : U} ->
    ∀ {n_321 : nat_3} ->
      ∀ (__322 : (vec_8‹??_38› A_320 n_321)) ->
        (exists_5‹??_40,??_41›
          ?_45
          function _323 : ∀ (x_324 : ?_42) -> ?_43
          | x_325 => (eq_4‹??_39› ?_44 x_325 n_321))
:=
  function vlength_326 :
    ∀ {A_327 : U} ->
      ∀ {n_328 : nat_3} ->
        ∀ (__329 : (vec_8‹??_26› A_327 n_328)) ->
          (exists_5‹??_28,??_29›
            ?_25
            function _330 : ∀ (x_331 : ?_22) -> ?_23
            | x_332 => (eq_4‹??_27› ?_24 x_332 n_328))
  | A_333 n_334 vnil_11 => (ex_7‹??_31,??_32› zero_4 refl_6‹??_30›)
  | A_335 n_336 (vcons_12 _337 _338 tl_339) =>
    match ((vlength_326) ?_31 ?_30 tl_339) in ∀ (_340 : ?_32) -o ?_33 with
    | (ex_7 n_341 pf_342) =>
      (ex_7‹??_36,??_37›
        (succ_5‹› n_341)
        ((congr_3‹??_33,??_34,??_35›)
          ?_39 ?_38 ?_37 ?_36
          function _343 : ∀ (x_344 : ?_34) -> ?_35
          | x_345 => (succ_5‹› x_345) pf_342))

#[program]
def xs_8‹› : ?_49 := (vcons_12‹??_43› ?_47 zero_4 vnil_11‹??_42›)

#[program]
def x_9‹› : ?_52 := ((hd_vec_4) ?_51 ?_50 xs_8)

#[program]
def y_10‹› : ?_55 := ((hd_vec2_5) ?_54 ?_53 xs_8)

#[program]
def z_11‹› : ?_58 := ((hd_vec3_6) ?_57 ?_56 xs_8)

-----------------------------------------

inductive-------------------------
infer_tm(unit_1)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(bool_2)
infer_tm(bool_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(nat_3)
infer_tm(nat_3)
infer_tm(nat_3)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_348›)
infer_tm(A_349)
infer_tm(A_349)
infer_tm(Type‹s_352›)
infer_tm(A_353)
assert_equal1( A_353, ?_1)
assert_equal1_extend( A_353, ?_1)
assert_equal1( m_354, m_354)
assert_equal1_ok( m_354, m_354)
infer_tm((eq_4‹??_1› ?_1 m_354 m_354))
check_tm( ?_1, Type‹??_1›)
check_tm( m_354, ?_1)
infer_tm(m_354)
assert_equal1( ?_1, A_353)
assert_equal1_extend( ?_1, A_353)
check_tm( m_354, ?_1)
infer_tm(m_354)
assert_equal1( ?_1, A_353)
assert_equal1_extend( ?_1, A_353)
simpl_tm ~expand:false( ?_1, A_353)
simpl_tm ~expand:false( A_353, A_353)
simpl_tm ~expand:false( A_353, A_353)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_355
    
  |}
  imeta_meta {|
    ?_1 <= A_358
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_352›)
check_tm( A_353, Type‹s_352›)
infer_tm(A_353)
assert_equal1( Type‹s_352›, Type‹s_352›)
assert_equal1_ok( Type‹s_352›, Type‹s_352›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_370›)
infer_tm(A_372 -> Type‹r_371›)
infer_tm(A_372)
infer_tm(Type‹r_371›)
infer_tm(Type‹s_376›)
infer_tm(A_378 -> Type‹r_377›)
infer_tm(A_378)
infer_tm(Type‹r_377›)
infer_tm(A_378)
infer_tm(((B_379) m_382))
infer_tm(B_379)
check_tm( m_382, A_378)
infer_tm(m_382)
assert_equal1( A_378, A_378)
assert_equal1_ok( A_378, A_378)
assert_equal1( A_378, A_378)
assert_equal1_ok( A_378, A_378)
assert_equal1( B_379, B_379)
assert_equal1_ok( B_379, B_379)
infer_tm((exists_5‹??_2,??_3› A_378 B_379))
check_tm( A_378, Type‹??_2›)
infer_tm(A_378)
assert_equal1( Type‹??_2›, Type‹s_376›)
assert_equal1_extend( Type‹??_2›, Type‹s_376›)
check_tm( B_379, A_378 -> Type‹??_3›)
infer_tm(B_379)
assert_equal1( A_378 -> Type‹??_3›, A_378 -> Type‹r_377›)
assert_equal1_extend( A_378 -> Type‹??_3›, A_378 -> Type‹r_377›)
simpl_tm ~expand:false( A_378 -> Type‹??_3›, A_378 -> Type‹r_377›)
simpl_tm ~expand:false( A_378, A_378)
simpl_tm ~expand:false( Type‹??_3›, Type‹r_377›)
simpl_tm ~expand:false( Type‹??_2›, Type‹s_376›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_399
    ??_2 <= s_401
    ??_3 <= r_402
    
  |}
  imeta_meta {|
    ?_1 <= A_406
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_434›)
infer_tm(A_435)
infer_tm(Type‹s_437›)
infer_tm(A_438)
assert_equal1( A_438, ?_2)
assert_equal1_extend( A_438, ?_2)
infer_tm((sing_6‹??_4› ?_2 m_439))
check_tm( ?_2, Type‹??_4›)
check_tm( m_439, ?_2)
infer_tm(m_439)
assert_equal1( ?_2, A_438)
assert_equal1_extend( ?_2, A_438)
simpl_tm ~expand:false( ?_2, A_438)
simpl_tm ~expand:false( A_438, A_438)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_440
    ??_2 <= s_442
    ??_3 <= r_443
    ??_4 <= s_445
    
  |}
  imeta_meta {|
    ?_1 <= A_448
    ?_2 <= A_451
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_437›)
check_tm( A_438, Type‹s_437›)
infer_tm(A_438)
assert_equal1( Type‹s_437›, Type‹s_437›)
assert_equal1_ok( Type‹s_437›, Type‹s_437›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_464›)
infer_tm(Type‹s_466›)
assert_equal1( A_467, A_467)
assert_equal1_ok( A_467, A_467)
infer_tm((list_7‹??_5› A_467))
check_tm( A_467, Type‹??_5›)
infer_tm(A_467)
assert_equal1( Type‹??_5›, Type‹s_466›)
assert_equal1_extend( Type‹??_5›, Type‹s_466›)
simpl_tm ~expand:false( Type‹??_5›, Type‹s_466›)
infer_tm(Type‹s_468›)
infer_tm(A_469)
infer_tm((list_7‹??_6› A_469))
check_tm( A_469, Type‹??_6›)
infer_tm(A_469)
assert_equal1( Type‹??_6›, Type‹s_468›)
assert_equal1_extend( Type‹??_6›, Type‹s_468›)
simpl_tm ~expand:false( Type‹??_6›, Type‹s_468›)
assert_equal1( A_469, A_469)
assert_equal1_ok( A_469, A_469)
infer_tm((list_7‹??_7› A_469))
check_tm( A_469, Type‹??_7›)
infer_tm(A_469)
assert_equal1( Type‹??_7›, Type‹s_468›)
assert_equal1_extend( Type‹??_7›, Type‹s_468›)
simpl_tm ~expand:false( Type‹??_7›, Type‹s_468›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_472
    ??_2 <= s_474
    ??_3 <= r_475
    ??_4 <= s_477
    ??_5 <= s_478
    ??_6 <= s_479
    ??_7 <= s_480
    
  |}
  imeta_meta {|
    ?_1 <= A_483
    ?_2 <= A_486
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_502›)
infer_tm(nat_3)
infer_tm(Type‹s_505›)
assert_equal1( A_506, A_506)
assert_equal1_ok( A_506, A_506)
infer_tm((vec_8‹??_8› A_506 zero_4))
check_tm( A_506, Type‹??_8›)
infer_tm(A_506)
assert_equal1( Type‹??_8›, Type‹s_505›)
assert_equal1_extend( Type‹??_8›, Type‹s_505›)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_8›, Type‹s_505›)
infer_tm(Type‹s_507›)
infer_tm(nat_3)
infer_tm(A_508)
infer_tm((vec_8‹s_507› A_508 n_509))
check_tm( A_508, Type‹s_507›)
infer_tm(A_508)
assert_equal1( Type‹s_507›, Type‹s_507›)
assert_equal1_ok( Type‹s_507›, Type‹s_507›)
check_tm( n_509, nat_3)
infer_tm(n_509)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( A_508, A_508)
assert_equal1_ok( A_508, A_508)
infer_tm((vec_8‹??_9› A_508 (succ_5‹› n_509)))
check_tm( A_508, Type‹??_9›)
infer_tm(A_508)
assert_equal1( Type‹??_9›, Type‹s_507›)
assert_equal1_extend( Type‹??_9›, Type‹s_507›)
check_tm( (succ_5‹› n_509), nat_3)
infer_tm((succ_5‹› n_509))
check_tm( n_509, nat_3)
infer_tm(n_509)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_9›, Type‹s_507›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_512
    ??_2 <= s_514
    ??_3 <= r_515
    ??_4 <= s_517
    ??_5 <= s_518
    ??_6 <= s_519
    ??_7 <= s_520
    ??_8 <= s_521
    ??_9 <= s_522
    
  |}
  imeta_meta {|
    ?_1 <= A_525
    ?_2 <= A_528
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(∀ {A_552 : Type‹s_550›} ->
           ∀ {m_553 : A_552} ->
             ∀ {n_554 : A_552} ->
               ∀ {B_555 : A_552 -> Type‹r_551›} ->
                 {(eq_4‹??_11› ?_4 m_553 n_554)} ->
                   ((B_555) m_553) -> ((B_555) n_554))
infer_tm(Type‹s_550›)
infer_tm(∀ {m_560 : A_559} ->
           ∀ {n_561 : A_559} ->
             ∀ {B_562 : A_559 -> Type‹r_551›} ->
               {(eq_4‹??_11› ?_4 m_560 n_561)} ->
                 ((B_562) m_560) -> ((B_562) n_561))
infer_tm(A_559)
infer_tm(∀ {n_567 : A_559} ->
           ∀ {B_568 : A_559 -> Type‹r_551›} ->
             {(eq_4‹??_11› ?_4 m_566 n_567)} ->
               ((B_568) m_566) -> ((B_568) n_567))
infer_tm(A_559)
infer_tm(∀ {B_573 : A_559 -> Type‹r_551›} ->
           {(eq_4‹??_11› ?_4 m_566 n_572)} ->
             ((B_573) m_566) -> ((B_573) n_572))
infer_tm(A_559 -> Type‹r_551›)
infer_tm(A_559)
infer_tm(Type‹r_551›)
infer_tm({(eq_4‹??_11› ?_4 m_566 n_572)} ->
           ((B_577) m_566) -> ((B_577) n_572))
infer_tm((eq_4‹??_11› ?_4 m_566 n_572))
check_tm( ?_4, Type‹??_11›)
check_tm( m_566, ?_4)
infer_tm(m_566)
assert_equal1( ?_4, A_559)
assert_equal1_extend( ?_4, A_559)
check_tm( n_572, ?_4)
infer_tm(n_572)
assert_equal1( ?_4, A_559)
assert_equal1_extend( ?_4, A_559)
simpl_tm ~expand:false( ?_4, A_559)
simpl_tm ~expand:false( A_559, A_559)
infer_tm(((B_577) m_566) -> ((B_577) n_572))
infer_tm(((B_577) m_566))
infer_tm(B_577)
check_tm( m_566, A_559)
infer_tm(m_566)
assert_equal1( A_559, A_559)
assert_equal1_ok( A_559, A_559)
infer_tm(((B_577) n_572))
infer_tm(B_577)
check_tm( n_572, A_559)
infer_tm(n_572)
assert_equal1( A_559, A_559)
assert_equal1_ok( A_559, A_559)
check_tm(
  function rwl_587 :
    ∀ {A_588 : Type‹s_550›} ->
      ∀ {m_589 : A_588} ->
        ∀ {n_590 : A_588} ->
          ∀ {B_591 : A_588 -> Type‹r_551›} ->
            {(eq_4‹??_10› ?_3 m_589 n_590)} ->
              ((B_591) m_589) -> ((B_591) n_590)
  | A_595 m_596 n_597 B_598 refl_6 x_599 => x_599,
  ∀ {A_600 : Type‹s_550›} ->
    ∀ {m_601 : A_600} ->
      ∀ {n_602 : A_600} ->
        ∀ {B_603 : A_600 -> Type‹r_551›} ->
          {(eq_4‹??_11› ?_4 m_601 n_602)} ->
            ((B_603) m_601) -> ((B_603) n_602))
infer_tm(∀ {A_608 : Type‹s_550›} ->
           ∀ {m_609 : A_608} ->
             ∀ {n_610 : A_608} ->
               ∀ {B_611 : A_608 -> Type‹r_551›} ->
                 {(eq_4‹??_10› ?_3 m_609 n_610)} ->
                   ((B_611) m_609) -> ((B_611) n_610))
infer_tm(Type‹s_550›)
infer_tm(∀ {m_616 : A_615} ->
           ∀ {n_617 : A_615} ->
             ∀ {B_618 : A_615 -> Type‹r_551›} ->
               {(eq_4‹??_10› ?_3 m_616 n_617)} ->
                 ((B_618) m_616) -> ((B_618) n_617))
infer_tm(A_615)
infer_tm(∀ {n_623 : A_615} ->
           ∀ {B_624 : A_615 -> Type‹r_551›} ->
             {(eq_4‹??_10› ?_3 m_622 n_623)} ->
               ((B_624) m_622) -> ((B_624) n_623))
infer_tm(A_615)
infer_tm(∀ {B_629 : A_615 -> Type‹r_551›} ->
           {(eq_4‹??_10› ?_3 m_622 n_628)} ->
             ((B_629) m_622) -> ((B_629) n_628))
infer_tm(A_615 -> Type‹r_551›)
infer_tm(A_615)
infer_tm(Type‹r_551›)
infer_tm({(eq_4‹??_10› ?_3 m_622 n_628)} ->
           ((B_633) m_622) -> ((B_633) n_628))
infer_tm((eq_4‹??_10› ?_3 m_622 n_628))
check_tm( ?_3, Type‹??_10›)
check_tm( m_622, ?_3)
infer_tm(m_622)
assert_equal1( ?_3, A_615)
assert_equal1_extend( ?_3, A_615)
check_tm( n_628, ?_3)
infer_tm(n_628)
assert_equal1( ?_3, A_615)
assert_equal1_extend( ?_3, A_615)
simpl_tm ~expand:false( ?_3, A_615)
simpl_tm ~expand:false( A_615, A_615)
infer_tm(((B_633) m_622) -> ((B_633) n_628))
infer_tm(((B_633) m_622))
infer_tm(B_633)
check_tm( m_622, A_615)
infer_tm(m_622)
assert_equal1( A_615, A_615)
assert_equal1_ok( A_615, A_615)
infer_tm(((B_633) n_628))
infer_tm(B_633)
check_tm( n_628, A_615)
infer_tm(n_628)
assert_equal1( A_615, A_615)
assert_equal1_ok( A_615, A_615)
assert_equal1(
  ∀ {A_643 : Type‹s_550›} ->
    ∀ {m_644 : A_643} ->
      ∀ {n_645 : A_643} ->
        ∀ {B_646 : A_643 -> Type‹r_551›} ->
          {(eq_4‹??_11› ?_4 m_644 n_645)} ->
            ((B_646) m_644) -> ((B_646) n_645),
  ∀ {A_650 : Type‹s_550›} ->
    ∀ {m_651 : A_650} ->
      ∀ {n_652 : A_650} ->
        ∀ {B_653 : A_650 -> Type‹r_551›} ->
          {(eq_4‹??_10› ?_3 m_651 n_652)} ->
            ((B_653) m_651) -> ((B_653) n_652))
assert_equal1_extend(
  ∀ {A_695 : Type‹s_550›} ->
    ∀ {m_696 : A_695} ->
      ∀ {n_697 : A_695} ->
        ∀ {B_698 : A_695 -> Type‹r_551›} ->
          {(eq_4‹??_11› ?_4 m_696 n_697)} ->
            ((B_698) m_696) -> ((B_698) n_697),
  ∀ {A_702 : Type‹s_550›} ->
    ∀ {m_703 : A_702} ->
      ∀ {n_704 : A_702} ->
        ∀ {B_705 : A_702 -> Type‹r_551›} ->
          {(eq_4‹??_10› ?_3 m_703 n_704)} ->
            ((B_705) m_703) -> ((B_705) n_704))
simpl_tm ~expand:false(
  ∀ {A_764 : Type‹s_550›} ->
    ∀ {m_765 : A_764} ->
      ∀ {n_766 : A_764} ->
        ∀ {B_767 : A_764 -> Type‹r_551›} ->
          {(eq_4‹??_11› A_764 m_765 n_766)} ->
            ((B_767) m_765) -> ((B_767) n_766),
  ∀ {A_771 : Type‹s_550›} ->
    ∀ {m_772 : A_771} ->
      ∀ {n_773 : A_771} ->
        ∀ {B_774 : A_771 -> Type‹r_551›} ->
          {(eq_4‹??_10› A_771 m_772 n_773)} ->
            ((B_774) m_772) -> ((B_774) n_773))
simpl_tm ~expand:false( Type‹s_550›, Type‹s_550›)
simpl_tm ~expand:false(
  ∀ {m_779 : A_778} ->
    ∀ {n_780 : A_778} ->
      ∀ {B_781 : A_778 -> Type‹r_551›} ->
        {(eq_4‹??_11› A_778 m_779 n_780)} ->
          ((B_781) m_779) -> ((B_781) n_780),
  ∀ {m_785 : A_778} ->
    ∀ {n_786 : A_778} ->
      ∀ {B_787 : A_778 -> Type‹r_551›} ->
        {(eq_4‹??_10› A_778 m_785 n_786)} ->
          ((B_787) m_785) -> ((B_787) n_786))
simpl_tm ~expand:false( A_778, A_778)
simpl_tm ~expand:false(
  ∀ {n_792 : A_778} ->
    ∀ {B_793 : A_778 -> Type‹r_551›} ->
      {(eq_4‹??_11› A_778 m_791 n_792)} ->
        ((B_793) m_791) -> ((B_793) n_792),
  ∀ {n_797 : A_778} ->
    ∀ {B_798 : A_778 -> Type‹r_551›} ->
      {(eq_4‹??_10› A_778 m_791 n_797)} ->
        ((B_798) m_791) -> ((B_798) n_797))
simpl_tm ~expand:false( A_778, A_778)
simpl_tm ~expand:false(
  ∀ {B_803 : A_778 -> Type‹r_551›} ->
    {(eq_4‹??_11› A_778 m_791 n_802)} ->
      ((B_803) m_791) -> ((B_803) n_802),
  ∀ {B_807 : A_778 -> Type‹r_551›} ->
    {(eq_4‹??_10› A_778 m_791 n_802)} ->
      ((B_807) m_791) -> ((B_807) n_802))
simpl_tm ~expand:false( A_778 -> Type‹r_551›, A_778 -> Type‹r_551›)
simpl_tm ~expand:false( A_778, A_778)
simpl_tm ~expand:false( Type‹r_551›, Type‹r_551›)
simpl_tm ~expand:false(
  {(eq_4‹??_11› A_778 m_791 n_802)} -> ((B_811) m_791) -> ((B_811) n_802),
  {(eq_4‹??_10› A_778 m_791 n_802)} -> ((B_811) m_791) -> ((B_811) n_802))
simpl_tm ~expand:false( (eq_4‹??_11› A_778 m_791 n_802),
  (eq_4‹??_10› A_778 m_791 n_802))
simpl_tm ~expand:false( A_778, A_778)
simpl_tm ~expand:false( m_791, m_791)
simpl_tm ~expand:false( n_802, n_802)
simpl_tm ~expand:false( ((B_811) m_791) -> ((B_811) n_802),
  ((B_811) m_791) -> ((B_811) n_802))
simpl_tm ~expand:false( ((B_811) m_791), ((B_811) m_791))
simpl_tm ~expand:false( B_811, B_811)
simpl_tm ~expand:false( m_791, m_791)
simpl_tm ~expand:false( ((B_811) n_802), ((B_811) n_802))
simpl_tm ~expand:false( B_811, B_811)
simpl_tm ~expand:false( n_802, n_802)
check_cls {|
  prblm {| ;
    {|  ::: [A_709, m_710, n_711, B_712, refl_6, x_713] =>? #x_713 |}
  |}
  a := ∀ {A_848 : Type‹s_550›} ->
         ∀ {m_849 : A_848} ->
           ∀ {n_850 : A_848} ->
             ∀ {B_851 : A_848 -> Type‹r_551›} ->
               {(eq_4‹??_10› A_848 m_849 n_850)} ->
                 ((B_851) m_849) -> ((B_851) n_850)
|}
case_intro
case_introed(A_855 : Type‹s_550›)
case_intro
case_introed(m_856 : #A_855)
case_intro
case_introed(n_857 : #A_855)
case_intro
case_introed(B_858 : #A_855 -> Type‹r_551›)
case_intro
case_introed(__860 : (eq_4‹??_10› #A_855 #m_856 #n_857))
case_intro
case_introed(__861 : ((#B_858) #m_856))
case_splitting
splitting_on(refl_6)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹??_10› #A_855 #m_856 #n_857),
      (eq_4‹??_10› #A_855 #m_856 #m_856));
    {| eq_pat?( #A_855, A_709 : Type‹s_550›)
       eq_pat?( #m_856, m_710 : #A_855)
       eq_pat?( #n_857, n_711 : #A_855)
       eq_pat?( #B_858, B_712 : #A_855 -> Type‹r_551›)
       eq_pat?( #__861, x_713 : ((#B_858) #m_856)) ::: [] =>? #x_713
    |}
  |}
|}
unify_local(
  eq_pat?( #A_855, A_709 : Type‹s_550›)
  eq_pat?( #m_856, m_710 : #A_855)
  eq_pat?( #n_857, n_711 : #A_855)
  eq_pat?( #B_858, B_712 : #A_855 -> Type‹r_551›)
  eq_pat?( #__861, x_713 : ((#B_858) #m_856))
)
unify_global(
  eq_term?( (eq_4‹??_10› #A_855 #m_856 #n_857),
    (eq_4‹??_10› #A_855 #m_856 #m_856))
)
simpl_pprbm ~expand:false( #A_855, #A_709)
simpl_pprbm ~expand:false( #m_856, #m_710)
simpl_pprbm ~expand:false( #n_857, #n_711)
simpl_pprbm ~expand:false( #B_858, #B_712)
simpl_pprbm ~expand:false( #__861, #x_713)
local_map solved
simpl_pprbm ~expand:false( (eq_4‹??_10› #A_855 #m_856 #n_857),
  (eq_4‹??_10› #A_855 #m_856 #m_856))
simpl_pprbm ~expand:false( #A_855, #A_855)
simpl_pprbm ~expand:false( #m_856, #m_856)
simpl_pprbm ~expand:false( #n_857, #m_856)
global_map solved
case_coverage_ok( __861, ((B_858) n_857))
check_tm( __861, ((B_858) n_857))
infer_tm(__861)
assert_equal1( ((B_858) n_857), ((B_858) n_857))
assert_equal1_ok( ((B_858) n_857), ((B_858) n_857))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_917
    ??_2 <= s_919
    ??_3 <= r_920
    ??_4 <= s_922
    ??_5 <= s_923
    ??_6 <= s_924
    ??_7 <= s_925
    ??_8 <= s_926
    ??_9 <= s_927
    ??_11 <= ??_10
    
  |}
  imeta_meta {|
    ?_1 <= A_932
    ?_2 <= A_935
    ?_3 <= A_941
    ?_4 <= A_947
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹??_10›)
check_tm( A_615, Type‹??_10›)
infer_tm(A_615)
assert_equal1( Type‹??_10›, Type‹s_550›)
assert_equal1_extend( Type‹??_10›, Type‹s_550›)
simpl_tm ~expand:false( Type‹??_10›, Type‹s_550›)
infer_tm(Type‹s_550›)
check_tm( A_559, Type‹s_550›)
infer_tm(A_559)
assert_equal1( Type‹s_550›, Type‹s_550›)
assert_equal1_ok( Type‹s_550›, Type‹s_550›)
----------------------------------

definition-------------------------
infer_tm(∀ {A_1022 : Type‹s_1020›} ->
           ∀ {m_1023 : A_1022} ->
             ∀ {n_1024 : A_1022} ->
               ∀ {B_1025 : A_1022 -> Type‹r_1021›} ->
                 {(eq_4‹??_13› ?_6 m_1023 n_1024)} ->
                   ((B_1025) n_1024) -> ((B_1025) m_1023))
infer_tm(Type‹s_1020›)
infer_tm(∀ {m_1030 : A_1029} ->
           ∀ {n_1031 : A_1029} ->
             ∀ {B_1032 : A_1029 -> Type‹r_1021›} ->
               {(eq_4‹??_13› ?_6 m_1030 n_1031)} ->
                 ((B_1032) n_1031) -> ((B_1032) m_1030))
infer_tm(A_1029)
infer_tm(∀ {n_1037 : A_1029} ->
           ∀ {B_1038 : A_1029 -> Type‹r_1021›} ->
             {(eq_4‹??_13› ?_6 m_1036 n_1037)} ->
               ((B_1038) n_1037) -> ((B_1038) m_1036))
infer_tm(A_1029)
infer_tm(∀ {B_1043 : A_1029 -> Type‹r_1021›} ->
           {(eq_4‹??_13› ?_6 m_1036 n_1042)} ->
             ((B_1043) n_1042) -> ((B_1043) m_1036))
infer_tm(A_1029 -> Type‹r_1021›)
infer_tm(A_1029)
infer_tm(Type‹r_1021›)
infer_tm({(eq_4‹??_13› ?_6 m_1036 n_1042)} ->
           ((B_1047) n_1042) -> ((B_1047) m_1036))
infer_tm((eq_4‹??_13› ?_6 m_1036 n_1042))
check_tm( ?_6, Type‹??_13›)
check_tm( m_1036, ?_6)
infer_tm(m_1036)
assert_equal1( ?_6, A_1029)
assert_equal1_extend( ?_6, A_1029)
check_tm( n_1042, ?_6)
infer_tm(n_1042)
assert_equal1( ?_6, A_1029)
assert_equal1_extend( ?_6, A_1029)
simpl_tm ~expand:false( ?_6, A_1029)
simpl_tm ~expand:false( A_1029, A_1029)
infer_tm(((B_1047) n_1042) -> ((B_1047) m_1036))
infer_tm(((B_1047) n_1042))
infer_tm(B_1047)
check_tm( n_1042, A_1029)
infer_tm(n_1042)
assert_equal1( A_1029, A_1029)
assert_equal1_ok( A_1029, A_1029)
infer_tm(((B_1047) m_1036))
infer_tm(B_1047)
check_tm( m_1036, A_1029)
infer_tm(m_1036)
assert_equal1( A_1029, A_1029)
assert_equal1_ok( A_1029, A_1029)
check_tm(
  function rwr_1057 :
    ∀ {A_1058 : Type‹s_1020›} ->
      ∀ {m_1059 : A_1058} ->
        ∀ {n_1060 : A_1058} ->
          ∀ {B_1061 : A_1058 -> Type‹r_1021›} ->
            {(eq_4‹??_12› ?_5 m_1059 n_1060)} ->
              ((B_1061) n_1060) -> ((B_1061) m_1059)
  | A_1065 m_1066 n_1067 B_1068 refl_6 x_1069 => x_1069,
  ∀ {A_1070 : Type‹s_1020›} ->
    ∀ {m_1071 : A_1070} ->
      ∀ {n_1072 : A_1070} ->
        ∀ {B_1073 : A_1070 -> Type‹r_1021›} ->
          {(eq_4‹??_13› ?_6 m_1071 n_1072)} ->
            ((B_1073) n_1072) -> ((B_1073) m_1071))
infer_tm(∀ {A_1078 : Type‹s_1020›} ->
           ∀ {m_1079 : A_1078} ->
             ∀ {n_1080 : A_1078} ->
               ∀ {B_1081 : A_1078 -> Type‹r_1021›} ->
                 {(eq_4‹??_12› ?_5 m_1079 n_1080)} ->
                   ((B_1081) n_1080) -> ((B_1081) m_1079))
infer_tm(Type‹s_1020›)
infer_tm(∀ {m_1086 : A_1085} ->
           ∀ {n_1087 : A_1085} ->
             ∀ {B_1088 : A_1085 -> Type‹r_1021›} ->
               {(eq_4‹??_12› ?_5 m_1086 n_1087)} ->
                 ((B_1088) n_1087) -> ((B_1088) m_1086))
infer_tm(A_1085)
infer_tm(∀ {n_1093 : A_1085} ->
           ∀ {B_1094 : A_1085 -> Type‹r_1021›} ->
             {(eq_4‹??_12› ?_5 m_1092 n_1093)} ->
               ((B_1094) n_1093) -> ((B_1094) m_1092))
infer_tm(A_1085)
infer_tm(∀ {B_1099 : A_1085 -> Type‹r_1021›} ->
           {(eq_4‹??_12› ?_5 m_1092 n_1098)} ->
             ((B_1099) n_1098) -> ((B_1099) m_1092))
infer_tm(A_1085 -> Type‹r_1021›)
infer_tm(A_1085)
infer_tm(Type‹r_1021›)
infer_tm({(eq_4‹??_12› ?_5 m_1092 n_1098)} ->
           ((B_1103) n_1098) -> ((B_1103) m_1092))
infer_tm((eq_4‹??_12› ?_5 m_1092 n_1098))
check_tm( ?_5, Type‹??_12›)
check_tm( m_1092, ?_5)
infer_tm(m_1092)
assert_equal1( ?_5, A_1085)
assert_equal1_extend( ?_5, A_1085)
check_tm( n_1098, ?_5)
infer_tm(n_1098)
assert_equal1( ?_5, A_1085)
assert_equal1_extend( ?_5, A_1085)
simpl_tm ~expand:false( ?_5, A_1085)
simpl_tm ~expand:false( A_1085, A_1085)
infer_tm(((B_1103) n_1098) -> ((B_1103) m_1092))
infer_tm(((B_1103) n_1098))
infer_tm(B_1103)
check_tm( n_1098, A_1085)
infer_tm(n_1098)
assert_equal1( A_1085, A_1085)
assert_equal1_ok( A_1085, A_1085)
infer_tm(((B_1103) m_1092))
infer_tm(B_1103)
check_tm( m_1092, A_1085)
infer_tm(m_1092)
assert_equal1( A_1085, A_1085)
assert_equal1_ok( A_1085, A_1085)
assert_equal1(
  ∀ {A_1113 : Type‹s_1020›} ->
    ∀ {m_1114 : A_1113} ->
      ∀ {n_1115 : A_1113} ->
        ∀ {B_1116 : A_1113 -> Type‹r_1021›} ->
          {(eq_4‹??_13› ?_6 m_1114 n_1115)} ->
            ((B_1116) n_1115) -> ((B_1116) m_1114),
  ∀ {A_1120 : Type‹s_1020›} ->
    ∀ {m_1121 : A_1120} ->
      ∀ {n_1122 : A_1120} ->
        ∀ {B_1123 : A_1120 -> Type‹r_1021›} ->
          {(eq_4‹??_12› ?_5 m_1121 n_1122)} ->
            ((B_1123) n_1122) -> ((B_1123) m_1121))
assert_equal1_extend(
  ∀ {A_1165 : Type‹s_1020›} ->
    ∀ {m_1166 : A_1165} ->
      ∀ {n_1167 : A_1165} ->
        ∀ {B_1168 : A_1165 -> Type‹r_1021›} ->
          {(eq_4‹??_13› ?_6 m_1166 n_1167)} ->
            ((B_1168) n_1167) -> ((B_1168) m_1166),
  ∀ {A_1172 : Type‹s_1020›} ->
    ∀ {m_1173 : A_1172} ->
      ∀ {n_1174 : A_1172} ->
        ∀ {B_1175 : A_1172 -> Type‹r_1021›} ->
          {(eq_4‹??_12› ?_5 m_1173 n_1174)} ->
            ((B_1175) n_1174) -> ((B_1175) m_1173))
simpl_tm ~expand:false(
  ∀ {A_1234 : Type‹s_1020›} ->
    ∀ {m_1235 : A_1234} ->
      ∀ {n_1236 : A_1234} ->
        ∀ {B_1237 : A_1234 -> Type‹r_1021›} ->
          {(eq_4‹??_13› A_1234 m_1235 n_1236)} ->
            ((B_1237) n_1236) -> ((B_1237) m_1235),
  ∀ {A_1241 : Type‹s_1020›} ->
    ∀ {m_1242 : A_1241} ->
      ∀ {n_1243 : A_1241} ->
        ∀ {B_1244 : A_1241 -> Type‹r_1021›} ->
          {(eq_4‹??_12› A_1241 m_1242 n_1243)} ->
            ((B_1244) n_1243) -> ((B_1244) m_1242))
simpl_tm ~expand:false( Type‹s_1020›, Type‹s_1020›)
simpl_tm ~expand:false(
  ∀ {m_1249 : A_1248} ->
    ∀ {n_1250 : A_1248} ->
      ∀ {B_1251 : A_1248 -> Type‹r_1021›} ->
        {(eq_4‹??_13› A_1248 m_1249 n_1250)} ->
          ((B_1251) n_1250) -> ((B_1251) m_1249),
  ∀ {m_1255 : A_1248} ->
    ∀ {n_1256 : A_1248} ->
      ∀ {B_1257 : A_1248 -> Type‹r_1021›} ->
        {(eq_4‹??_12› A_1248 m_1255 n_1256)} ->
          ((B_1257) n_1256) -> ((B_1257) m_1255))
simpl_tm ~expand:false( A_1248, A_1248)
simpl_tm ~expand:false(
  ∀ {n_1262 : A_1248} ->
    ∀ {B_1263 : A_1248 -> Type‹r_1021›} ->
      {(eq_4‹??_13› A_1248 m_1261 n_1262)} ->
        ((B_1263) n_1262) -> ((B_1263) m_1261),
  ∀ {n_1267 : A_1248} ->
    ∀ {B_1268 : A_1248 -> Type‹r_1021›} ->
      {(eq_4‹??_12› A_1248 m_1261 n_1267)} ->
        ((B_1268) n_1267) -> ((B_1268) m_1261))
simpl_tm ~expand:false( A_1248, A_1248)
simpl_tm ~expand:false(
  ∀ {B_1273 : A_1248 -> Type‹r_1021›} ->
    {(eq_4‹??_13› A_1248 m_1261 n_1272)} ->
      ((B_1273) n_1272) -> ((B_1273) m_1261),
  ∀ {B_1277 : A_1248 -> Type‹r_1021›} ->
    {(eq_4‹??_12› A_1248 m_1261 n_1272)} ->
      ((B_1277) n_1272) -> ((B_1277) m_1261))
simpl_tm ~expand:false( A_1248 -> Type‹r_1021›,
  A_1248 -> Type‹r_1021›)
simpl_tm ~expand:false( A_1248, A_1248)
simpl_tm ~expand:false( Type‹r_1021›, Type‹r_1021›)
simpl_tm ~expand:false(
  {(eq_4‹??_13› A_1248 m_1261 n_1272)} ->
    ((B_1281) n_1272) -> ((B_1281) m_1261),
  {(eq_4‹??_12› A_1248 m_1261 n_1272)} ->
    ((B_1281) n_1272) -> ((B_1281) m_1261))
simpl_tm ~expand:false( (eq_4‹??_13› A_1248 m_1261 n_1272),
  (eq_4‹??_12› A_1248 m_1261 n_1272))
simpl_tm ~expand:false( A_1248, A_1248)
simpl_tm ~expand:false( m_1261, m_1261)
simpl_tm ~expand:false( n_1272, n_1272)
simpl_tm ~expand:false( ((B_1281) n_1272) -> ((B_1281) m_1261),
  ((B_1281) n_1272) -> ((B_1281) m_1261))
simpl_tm ~expand:false( ((B_1281) n_1272), ((B_1281) n_1272))
simpl_tm ~expand:false( B_1281, B_1281)
simpl_tm ~expand:false( n_1272, n_1272)
simpl_tm ~expand:false( ((B_1281) m_1261), ((B_1281) m_1261))
simpl_tm ~expand:false( B_1281, B_1281)
simpl_tm ~expand:false( m_1261, m_1261)
check_cls {|
  prblm {| ;
    {|  ::: [A_1179, m_1180, n_1181, B_1182, refl_6, x_1183] =>? #x_1183 |}
  |}
  a := ∀ {A_1318 : Type‹s_1020›} ->
         ∀ {m_1319 : A_1318} ->
           ∀ {n_1320 : A_1318} ->
             ∀ {B_1321 : A_1318 -> Type‹r_1021›} ->
               {(eq_4‹??_12› A_1318 m_1319 n_1320)} ->
                 ((B_1321) n_1320) -> ((B_1321) m_1319)
|}
case_intro
case_introed(A_1325 : Type‹s_1020›)
case_intro
case_introed(m_1326 : #A_1325)
case_intro
case_introed(n_1327 : #A_1325)
case_intro
case_introed(B_1328 : #A_1325 -> Type‹r_1021›)
case_intro
case_introed(__1330 : (eq_4‹??_12› #A_1325 #m_1326 #n_1327))
case_intro
case_introed(__1331 : ((#B_1328) #n_1327))
case_splitting
splitting_on(refl_6)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹??_12› #A_1325 #m_1326 #n_1327),
      (eq_4‹??_12› #A_1325 #m_1326 #m_1326));
    {| eq_pat?( #A_1325, A_1179 : Type‹s_1020›)
       eq_pat?( #m_1326, m_1180 : #A_1325)
       eq_pat?( #n_1327, n_1181 : #A_1325)
       eq_pat?( #B_1328, B_1182 : #A_1325 -> Type‹r_1021›)
       eq_pat?( #__1331, x_1183 : ((#B_1328) #n_1327)) ::: [] =>? #x_1183
    |}
  |}
|}
unify_local(
  eq_pat?( #A_1325, A_1179 : Type‹s_1020›)
  eq_pat?( #m_1326, m_1180 : #A_1325)
  eq_pat?( #n_1327, n_1181 : #A_1325)
  eq_pat?( #B_1328, B_1182 : #A_1325 -> Type‹r_1021›)
  eq_pat?( #__1331, x_1183 : ((#B_1328) #n_1327))
)
unify_global(
  eq_term?( (eq_4‹??_12› #A_1325 #m_1326 #n_1327),
    (eq_4‹??_12› #A_1325 #m_1326 #m_1326))
)
simpl_pprbm ~expand:false( #A_1325, #A_1179)
simpl_pprbm ~expand:false( #m_1326, #m_1180)
simpl_pprbm ~expand:false( #n_1327, #n_1181)
simpl_pprbm ~expand:false( #B_1328, #B_1182)
simpl_pprbm ~expand:false( #__1331, #x_1183)
local_map solved
simpl_pprbm ~expand:false( (eq_4‹??_12› #A_1325 #m_1326 #n_1327),
  (eq_4‹??_12› #A_1325 #m_1326 #m_1326))
simpl_pprbm ~expand:false( #A_1325, #A_1325)
simpl_pprbm ~expand:false( #m_1326, #m_1326)
simpl_pprbm ~expand:false( #n_1327, #m_1326)
global_map solved
case_coverage_ok( __1331, ((B_1328) n_1327))
check_tm( __1331, ((B_1328) n_1327))
infer_tm(__1331)
assert_equal1( ((B_1328) n_1327), ((B_1328) n_1327))
assert_equal1_ok( ((B_1328) n_1327), ((B_1328) n_1327))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_1387
    ??_2 <= s_1389
    ??_3 <= r_1390
    ??_4 <= s_1392
    ??_5 <= s_1393
    ??_6 <= s_1394
    ??_7 <= s_1395
    ??_8 <= s_1396
    ??_9 <= s_1397
    ??_10 <= s_1399
    ??_11 <= ??_10
    ??_13 <= ??_12
    
  |}
  imeta_meta {|
    ?_1 <= A_1406
    ?_2 <= A_1409
    ?_3 <= A_1415
    ?_4 <= A_1421
    ?_5 <= A_1427
    ?_6 <= A_1433
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹??_12›)
check_tm( A_1085, Type‹??_12›)
infer_tm(A_1085)
assert_equal1( Type‹??_12›, Type‹s_1020›)
assert_equal1_extend( Type‹??_12›, Type‹s_1020›)
simpl_tm ~expand:false( Type‹??_12›, Type‹s_1020›)
infer_tm(Type‹s_1020›)
check_tm( A_1029, Type‹s_1020›)
infer_tm(A_1029)
assert_equal1( Type‹s_1020›, Type‹s_1020›)
assert_equal1_ok( Type‹s_1020›, Type‹s_1020›)
----------------------------------

definition-------------------------
infer_tm(∀ (A_1509 : Type‹s_1506›) ->
           ∀ (B_1510 : Type‹r_1507›) ->
             ∀ (m_1511 : A_1509) ->
               ∀ (n_1512 : A_1509) ->
                 ∀ (f_1513 :
                   forall‹t_1508›(__1514 : A_1509), B_1510) ->
                   ∀ (__1515 : (eq_4‹??_17› ?_11 m_1511 n_1512)) ->
                     (eq_4‹??_18›
                       ?_12 ((f_1513) m_1511) ((f_1513) n_1512)))
infer_tm(Type‹s_1506›)
infer_tm(∀ (B_1517 : Type‹r_1507›) ->
           ∀ (m_1518 : A_1516) ->
             ∀ (n_1519 : A_1516) ->
               ∀ (f_1520 : forall‹t_1508›(__1521 : A_1516), B_1517) ->
                 ∀ (__1522 : (eq_4‹??_17› ?_11 m_1518 n_1519)) ->
                   (eq_4‹??_18› ?_12 ((f_1520) m_1518) ((f_1520) n_1519)))
infer_tm(Type‹r_1507›)
infer_tm(∀ (m_1524 : A_1516) ->
           ∀ (n_1525 : A_1516) ->
             ∀ (f_1526 : forall‹t_1508›(__1527 : A_1516), B_1523) ->
               ∀ (__1528 : (eq_4‹??_17› ?_11 m_1524 n_1525)) ->
                 (eq_4‹??_18› ?_12 ((f_1526) m_1524) ((f_1526) n_1525)))
infer_tm(A_1516)
infer_tm(∀ (n_1530 : A_1516) ->
           ∀ (f_1531 : forall‹t_1508›(__1532 : A_1516), B_1523) ->
             ∀ (__1533 : (eq_4‹??_17› ?_11 m_1529 n_1530)) ->
               (eq_4‹??_18› ?_12 ((f_1531) m_1529) ((f_1531) n_1530)))
infer_tm(A_1516)
infer_tm(∀ (f_1535 : forall‹t_1508›(__1536 : A_1516), B_1523) ->
           ∀ (__1537 : (eq_4‹??_17› ?_11 m_1529 n_1534)) ->
             (eq_4‹??_18› ?_12 ((f_1535) m_1529) ((f_1535) n_1534)))
infer_tm(forall‹t_1508›(__1539 : A_1516), B_1523)
infer_tm(A_1516)
infer_tm(B_1523)
infer_tm(∀ (__1541 : (eq_4‹??_17› ?_11 m_1529 n_1534)) ->
           (eq_4‹??_18› ?_12 ((f_1538) m_1529) ((f_1538) n_1534)))
infer_tm((eq_4‹??_17› ?_11 m_1529 n_1534))
check_tm( ?_11, Type‹??_17›)
check_tm( m_1529, ?_11)
infer_tm(m_1529)
assert_equal1( ?_11, A_1516)
assert_equal1_extend( ?_11, A_1516)
check_tm( n_1534, ?_11)
infer_tm(n_1534)
assert_equal1( ?_11, A_1516)
assert_equal1_extend( ?_11, A_1516)
simpl_tm ~expand:false( ?_11, A_1516)
simpl_tm ~expand:false( A_1516, A_1516)
infer_tm((eq_4‹??_18› ?_12 ((f_1538) m_1529) ((f_1538) n_1534)))
check_tm( ?_12, Type‹??_18›)
check_tm( ((f_1538) m_1529), ?_12)
infer_tm(((f_1538) m_1529))
infer_tm(f_1538)
check_tm( m_1529, A_1516)
infer_tm(m_1529)
assert_equal1( A_1516, A_1516)
assert_equal1_ok( A_1516, A_1516)
assert_equal1( ?_12, B_1523)
assert_equal1_extend( ?_12, B_1523)
check_tm( ((f_1538) n_1534), ?_12)
infer_tm(((f_1538) n_1534))
infer_tm(f_1538)
simpl_tm ~expand:false( ?_12, B_1523)
check_tm( n_1534, A_1516)
infer_tm(n_1534)
assert_equal1( A_1516, A_1516)
assert_equal1_ok( A_1516, A_1516)
assert_equal1( ?_12, B_1523)
assert_equal1_extend( ?_12, B_1523)
simpl_tm ~expand:false( B_1523, B_1523)
check_tm(
  function congr_1545 :
    ∀ (A_1546 : Type‹s_1506›) ->
      ∀ (B_1547 : Type‹r_1507›) ->
        ∀ (m_1548 : A_1546) ->
          ∀ (n_1549 : A_1546) ->
            ∀ (f_1550 : forall‹t_1508›(__1551 : A_1546), B_1547) ->
              ∀ (__1552 : (eq_4‹??_14› ?_7 m_1548 n_1549)) ->
                (eq_4‹??_15› ?_8 ((f_1550) m_1548) ((f_1550) n_1549))
  | A_1553 B_1554 m_1555 n_1556 f_1557 refl_6 => refl_6‹??_16›,
  ∀ (A_1558 : Type‹s_1506›) ->
    ∀ (B_1559 : Type‹r_1507›) ->
      ∀ (m_1560 : A_1558) ->
        ∀ (n_1561 : A_1558) ->
          ∀ (f_1562 : forall‹t_1508›(__1563 : A_1558), B_1559) ->
            ∀ (__1564 : (eq_4‹??_17› ?_11 m_1560 n_1561)) ->
              (eq_4‹??_18› ?_12 ((f_1562) m_1560) ((f_1562) n_1561)))
infer_tm(∀ (A_1566 : Type‹s_1506›) ->
           ∀ (B_1567 : Type‹r_1507›) ->
             ∀ (m_1568 : A_1566) ->
               ∀ (n_1569 : A_1566) ->
                 ∀ (f_1570 :
                   forall‹t_1508›(__1571 : A_1566), B_1567) ->
                   ∀ (__1572 : (eq_4‹??_14› ?_7 m_1568 n_1569)) ->
                     (eq_4‹??_15›
                       ?_8 ((f_1570) m_1568) ((f_1570) n_1569)))
infer_tm(Type‹s_1506›)
infer_tm(∀ (B_1574 : Type‹r_1507›) ->
           ∀ (m_1575 : A_1573) ->
             ∀ (n_1576 : A_1573) ->
               ∀ (f_1577 : forall‹t_1508›(__1578 : A_1573), B_1574) ->
                 ∀ (__1579 : (eq_4‹??_14› ?_7 m_1575 n_1576)) ->
                   (eq_4‹??_15› ?_8 ((f_1577) m_1575) ((f_1577) n_1576)))
infer_tm(Type‹r_1507›)
infer_tm(∀ (m_1581 : A_1573) ->
           ∀ (n_1582 : A_1573) ->
             ∀ (f_1583 : forall‹t_1508›(__1584 : A_1573), B_1580) ->
               ∀ (__1585 : (eq_4‹??_14› ?_7 m_1581 n_1582)) ->
                 (eq_4‹??_15› ?_8 ((f_1583) m_1581) ((f_1583) n_1582)))
infer_tm(A_1573)
infer_tm(∀ (n_1587 : A_1573) ->
           ∀ (f_1588 : forall‹t_1508›(__1589 : A_1573), B_1580) ->
             ∀ (__1590 : (eq_4‹??_14› ?_7 m_1586 n_1587)) ->
               (eq_4‹??_15› ?_8 ((f_1588) m_1586) ((f_1588) n_1587)))
infer_tm(A_1573)
infer_tm(∀ (f_1592 : forall‹t_1508›(__1593 : A_1573), B_1580) ->
           ∀ (__1594 : (eq_4‹??_14› ?_7 m_1586 n_1591)) ->
             (eq_4‹??_15› ?_8 ((f_1592) m_1586) ((f_1592) n_1591)))
infer_tm(forall‹t_1508›(__1596 : A_1573), B_1580)
infer_tm(A_1573)
infer_tm(B_1580)
infer_tm(∀ (__1598 : (eq_4‹??_14› ?_7 m_1586 n_1591)) ->
           (eq_4‹??_15› ?_8 ((f_1595) m_1586) ((f_1595) n_1591)))
infer_tm((eq_4‹??_14› ?_7 m_1586 n_1591))
check_tm( ?_7, Type‹??_14›)
check_tm( m_1586, ?_7)
infer_tm(m_1586)
assert_equal1( ?_7, A_1573)
assert_equal1_extend( ?_7, A_1573)
check_tm( n_1591, ?_7)
infer_tm(n_1591)
assert_equal1( ?_7, A_1573)
assert_equal1_extend( ?_7, A_1573)
simpl_tm ~expand:false( ?_7, A_1573)
simpl_tm ~expand:false( A_1573, A_1573)
infer_tm((eq_4‹??_15› ?_8 ((f_1595) m_1586) ((f_1595) n_1591)))
check_tm( ?_8, Type‹??_15›)
check_tm( ((f_1595) m_1586), ?_8)
infer_tm(((f_1595) m_1586))
infer_tm(f_1595)
check_tm( m_1586, A_1573)
infer_tm(m_1586)
assert_equal1( A_1573, A_1573)
assert_equal1_ok( A_1573, A_1573)
assert_equal1( ?_8, B_1580)
assert_equal1_extend( ?_8, B_1580)
check_tm( ((f_1595) n_1591), ?_8)
infer_tm(((f_1595) n_1591))
infer_tm(f_1595)
simpl_tm ~expand:false( ?_8, B_1580)
check_tm( n_1591, A_1573)
infer_tm(n_1591)
assert_equal1( A_1573, A_1573)
assert_equal1_ok( A_1573, A_1573)
assert_equal1( ?_8, B_1580)
assert_equal1_extend( ?_8, B_1580)
simpl_tm ~expand:false( B_1580, B_1580)
assert_equal1(
  ∀ (A_1602 : Type‹s_1506›) ->
    ∀ (B_1603 : Type‹r_1507›) ->
      ∀ (m_1604 : A_1602) ->
        ∀ (n_1605 : A_1602) ->
          ∀ (f_1606 : forall‹t_1508›(__1607 : A_1602), B_1603) ->
            ∀ (__1608 : (eq_4‹??_17› ?_11 m_1604 n_1605)) ->
              (eq_4‹??_18› ?_12 ((f_1606) m_1604) ((f_1606) n_1605)),
  ∀ (A_1609 : Type‹s_1506›) ->
    ∀ (B_1610 : Type‹r_1507›) ->
      ∀ (m_1611 : A_1609) ->
        ∀ (n_1612 : A_1609) ->
          ∀ (f_1613 : forall‹t_1508›(__1614 : A_1609), B_1610) ->
            ∀ (__1615 : (eq_4‹??_14› ?_7 m_1611 n_1612)) ->
              (eq_4‹??_15› ?_8 ((f_1613) m_1611) ((f_1613) n_1612)))
assert_equal1_extend(
  ∀ (A_1668 : Type‹s_1506›) ->
    ∀ (B_1669 : Type‹r_1507›) ->
      ∀ (m_1670 : A_1668) ->
        ∀ (n_1671 : A_1668) ->
          ∀ (f_1672 : forall‹t_1508›(__1673 : A_1668), B_1669) ->
            ∀ (__1674 : (eq_4‹??_17› ?_11 m_1670 n_1671)) ->
              (eq_4‹??_18› ?_12 ((f_1672) m_1670) ((f_1672) n_1671)),
  ∀ (A_1675 : Type‹s_1506›) ->
    ∀ (B_1676 : Type‹r_1507›) ->
      ∀ (m_1677 : A_1675) ->
        ∀ (n_1678 : A_1675) ->
          ∀ (f_1679 : forall‹t_1508›(__1680 : A_1675), B_1676) ->
            ∀ (__1681 : (eq_4‹??_14› ?_7 m_1677 n_1678)) ->
              (eq_4‹??_15› ?_8 ((f_1679) m_1677) ((f_1679) n_1678)))
simpl_tm ~expand:false(
  ∀ (A_1739 : Type‹s_1506›) ->
    ∀ (B_1740 : Type‹r_1507›) ->
      ∀ (m_1741 : A_1739) ->
        ∀ (n_1742 : A_1739) ->
          ∀ (f_1743 : forall‹t_1508›(__1744 : A_1739), B_1740) ->
            (eq_4‹??_17› A_1739 m_1741 n_1742) ->
              (eq_4‹??_18› B_1740 ((f_1743) m_1741) ((f_1743) n_1742)),
  ∀ (A_1746 : Type‹s_1506›) ->
    ∀ (B_1747 : Type‹r_1507›) ->
      ∀ (m_1748 : A_1746) ->
        ∀ (n_1749 : A_1746) ->
          ∀ (f_1750 : forall‹t_1508›(__1751 : A_1746), B_1747) ->
            (eq_4‹??_14› A_1746 m_1748 n_1749) ->
              (eq_4‹??_15› B_1747 ((f_1750) m_1748) ((f_1750) n_1749)))
simpl_tm ~expand:false( Type‹s_1506›, Type‹s_1506›)
simpl_tm ~expand:false(
  ∀ (B_1754 : Type‹r_1507›) ->
    ∀ (m_1755 : A_1753) ->
      ∀ (n_1756 : A_1753) ->
        ∀ (f_1757 : forall‹t_1508›(__1758 : A_1753), B_1754) ->
          (eq_4‹??_17› A_1753 m_1755 n_1756) ->
            (eq_4‹??_18› B_1754 ((f_1757) m_1755) ((f_1757) n_1756)),
  ∀ (B_1760 : Type‹r_1507›) ->
    ∀ (m_1761 : A_1753) ->
      ∀ (n_1762 : A_1753) ->
        ∀ (f_1763 : forall‹t_1508›(__1764 : A_1753), B_1760) ->
          (eq_4‹??_14› A_1753 m_1761 n_1762) ->
            (eq_4‹??_15› B_1760 ((f_1763) m_1761) ((f_1763) n_1762)))
simpl_tm ~expand:false( Type‹r_1507›, Type‹r_1507›)
simpl_tm ~expand:false(
  ∀ (m_1767 : A_1753) ->
    ∀ (n_1768 : A_1753) ->
      ∀ (f_1769 : forall‹t_1508›(__1770 : A_1753), B_1766) ->
        (eq_4‹??_17› A_1753 m_1767 n_1768) ->
          (eq_4‹??_18› B_1766 ((f_1769) m_1767) ((f_1769) n_1768)),
  ∀ (m_1772 : A_1753) ->
    ∀ (n_1773 : A_1753) ->
      ∀ (f_1774 : forall‹t_1508›(__1775 : A_1753), B_1766) ->
        (eq_4‹??_14› A_1753 m_1772 n_1773) ->
          (eq_4‹??_15› B_1766 ((f_1774) m_1772) ((f_1774) n_1773)))
simpl_tm ~expand:false( A_1753, A_1753)
simpl_tm ~expand:false(
  ∀ (n_1778 : A_1753) ->
    ∀ (f_1779 : forall‹t_1508›(__1780 : A_1753), B_1766) ->
      (eq_4‹??_17› A_1753 m_1777 n_1778) ->
        (eq_4‹??_18› B_1766 ((f_1779) m_1777) ((f_1779) n_1778)),
  ∀ (n_1782 : A_1753) ->
    ∀ (f_1783 : forall‹t_1508›(__1784 : A_1753), B_1766) ->
      (eq_4‹??_14› A_1753 m_1777 n_1782) ->
        (eq_4‹??_15› B_1766 ((f_1783) m_1777) ((f_1783) n_1782)))
simpl_tm ~expand:false( A_1753, A_1753)
simpl_tm ~expand:false(
  ∀ (f_1787 : forall‹t_1508›(__1788 : A_1753), B_1766) ->
    (eq_4‹??_17› A_1753 m_1777 n_1786) ->
      (eq_4‹??_18› B_1766 ((f_1787) m_1777) ((f_1787) n_1786)),
  ∀ (f_1790 : forall‹t_1508›(__1791 : A_1753), B_1766) ->
    (eq_4‹??_14› A_1753 m_1777 n_1786) ->
      (eq_4‹??_15› B_1766 ((f_1790) m_1777) ((f_1790) n_1786)))
simpl_tm ~expand:false( forall‹t_1508›(__1794 : A_1753), B_1766,
  forall‹t_1508›(__1795 : A_1753), B_1766)
simpl_tm ~expand:false( A_1753, A_1753)
simpl_tm ~expand:false( B_1766, B_1766)
simpl_tm ~expand:false(
  (eq_4‹??_17› A_1753 m_1777 n_1786) ->
    (eq_4‹??_18› B_1766 ((f_1793) m_1777) ((f_1793) n_1786)),
  (eq_4‹??_14› A_1753 m_1777 n_1786) ->
    (eq_4‹??_15› B_1766 ((f_1793) m_1777) ((f_1793) n_1786)))
simpl_tm ~expand:false( (eq_4‹??_17› A_1753 m_1777 n_1786),
  (eq_4‹??_14› A_1753 m_1777 n_1786))
simpl_tm ~expand:false( A_1753, A_1753)
simpl_tm ~expand:false( m_1777, m_1777)
simpl_tm ~expand:false( n_1786, n_1786)
simpl_tm ~expand:false(
  (eq_4‹??_18› B_1766 ((f_1793) m_1777) ((f_1793) n_1786)),
  (eq_4‹??_15› B_1766 ((f_1793) m_1777) ((f_1793) n_1786)))
simpl_tm ~expand:false( B_1766, B_1766)
simpl_tm ~expand:false( ((f_1793) m_1777), ((f_1793) m_1777))
simpl_tm ~expand:false( f_1793, f_1793)
simpl_tm ~expand:false( m_1777, m_1777)
simpl_tm ~expand:false( ((f_1793) n_1786), ((f_1793) n_1786))
simpl_tm ~expand:false( f_1793, f_1793)
simpl_tm ~expand:false( n_1786, n_1786)
check_cls {|
  prblm {| ;
    {|  ::: [A_1682, B_1683, m_1684, n_1685, f_1686, refl_6] =>?
         refl_6‹??_16›
    |}
  |}
  a := ∀ (A_1826 : Type‹s_1506›) ->
         ∀ (B_1827 : Type‹r_1507›) ->
           ∀ (m_1828 : A_1826) ->
             ∀ (n_1829 : A_1826) ->
               ∀ (f_1830 : forall‹t_1508›(__1831 : A_1826), B_1827) ->
                 (eq_4‹??_14› A_1826 m_1828 n_1829) ->
                   (eq_4‹??_15›
                     B_1827 ((f_1830) m_1828) ((f_1830) n_1829))
|}
case_intro
case_introed(A_1833 : Type‹s_1506›)
case_intro
case_introed(B_1834 : Type‹r_1507›)
case_intro
case_introed(m_1835 : #A_1833)
case_intro
case_introed(n_1836 : #A_1833)
case_intro
case_introed(f_1837 : forall‹t_1508›(__1838 : #A_1833), #B_1834)
case_intro
case_introed(__1839 : (eq_4‹??_14› #A_1833 #m_1835 #n_1836))
case_splitting
splitting_on(refl_6)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹??_14› #A_1833 #m_1835 #n_1836),
      (eq_4‹??_14› #A_1833 #m_1835 #m_1835));
    {| eq_pat?( #A_1833, A_1682 : Type‹s_1506›)
       eq_pat?( #B_1834, B_1683 : Type‹r_1507›)
       eq_pat?( #m_1835, m_1684 : #A_1833)
       eq_pat?( #n_1836, n_1685 : #A_1833)
       eq_pat?( #f_1837, f_1686 :
         forall‹t_1508›(__1868 : #A_1833), #B_1834) ::: [] =>?
         refl_6‹??_16›
    |}
  |}
|}
unify_local(
  eq_pat?( #A_1833, A_1682 : Type‹s_1506›)
  eq_pat?( #B_1834, B_1683 : Type‹r_1507›)
  eq_pat?( #m_1835, m_1684 : #A_1833)
  eq_pat?( #n_1836, n_1685 : #A_1833)
  eq_pat?( #f_1837, f_1686 : forall‹t_1508›(__1869 : #A_1833), #B_1834)
)
unify_global(
  eq_term?( (eq_4‹??_14› #A_1833 #m_1835 #n_1836),
    (eq_4‹??_14› #A_1833 #m_1835 #m_1835))
)
simpl_pprbm ~expand:false( #A_1833, #A_1682)
simpl_pprbm ~expand:false( #B_1834, #B_1683)
simpl_pprbm ~expand:false( #m_1835, #m_1684)
simpl_pprbm ~expand:false( #n_1836, #n_1685)
simpl_pprbm ~expand:false( #f_1837, #f_1686)
local_map solved
simpl_pprbm ~expand:false( (eq_4‹??_14› #A_1833 #m_1835 #n_1836),
  (eq_4‹??_14› #A_1833 #m_1835 #m_1835))
simpl_pprbm ~expand:false( #A_1833, #A_1833)
simpl_pprbm ~expand:false( #m_1835, #m_1835)
simpl_pprbm ~expand:false( #n_1836, #m_1835)
global_map solved
case_coverage_ok( refl_6‹??_16›,
  (eq_4‹??_15› B_1834 ((f_1837) n_1836) ((f_1837) n_1836)))
check_tm( refl_6‹??_16›,
  (eq_4‹??_15› B_1834 ((f_1837) n_1836) ((f_1837) n_1836)))
infer_tm(refl_6‹??_16›)
check_tm( ?_9, Type‹??_16›)
check_tm( ?_10, ?_9)
assert_equal1( (eq_4‹??_15› B_1834 ((f_1837) n_1836) ((f_1837) n_1836)),
  (eq_4‹??_16› ?_9 ?_10 ?_10))
assert_equal1_extend(
  (eq_4‹??_15› B_1834 ((f_1837) n_1836) ((f_1837) n_1836)),
  (eq_4‹??_16› ?_9 ?_10 ?_10))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_1897
    ??_2 <= s_1899
    ??_3 <= r_1900
    ??_4 <= s_1902
    ??_5 <= s_1903
    ??_6 <= s_1904
    ??_7 <= s_1905
    ??_8 <= s_1906
    ??_9 <= s_1907
    ??_10 <= s_1909
    ??_11 <= ??_10
    ??_12 <= s_1913
    ??_13 <= ??_12
    ??_17 <= ??_14
    ??_18 <= ??_15
    
  |}
  imeta_meta {|
    ?_1 <= A_1924
    ?_2 <= A_1927
    ?_3 <= A_1933
    ?_4 <= A_1939
    ?_5 <= A_1945
    ?_6 <= A_1951
    ?_7 <= A_1959
    ?_8 <= B_1967
    ?_11 <= A_1976
    ?_12 <= B_1984
    
  |}
  eqns {|
    equal_tm? ((eq_4‹??_15› B_1834 ((f_1837) n_1836) ((f_1837) n_1836)),
      (eq_4‹??_16› ?_9 ?_10 ?_10))
  |}
end_dump
simpl_tm ~expand:false(
  (eq_4‹??_15› B_1834 ((f_1837) n_1836) ((f_1837) n_1836)),
  (eq_4‹??_16› ?_9 ?_10 ?_10))
simpl_tm ~expand:false( B_1834, ?_9)
simpl_tm ~expand:false( ((f_1837) n_1836), ?_10)
simpl_tm ~expand:false( ((f_1837) n_1836), ?_10)
simpl_tm ~expand:false( B_1834, ?_9)
simpl_tm ~expand:false( ((f_1837) n_1836), ?_10)
simpl_tm ~expand:false( ((f_1837) n_1836), ((f_1837) n_1836))
simpl_tm ~expand:false( f_1837, f_1837)
simpl_tm ~expand:false( n_1836, n_1836)
infer_tm(Type‹??_14›)
check_tm( A_1573, Type‹??_14›)
infer_tm(A_1573)
assert_equal1( Type‹??_14›, Type‹s_1506›)
assert_equal1_extend( Type‹??_14›, Type‹s_1506›)
simpl_tm ~expand:false( Type‹??_14›, Type‹s_1506›)
infer_tm(Type‹??_15›)
check_tm( B_1580, Type‹??_15›)
infer_tm(B_1580)
assert_equal1( Type‹??_15›, Type‹r_1507›)
assert_equal1_extend( Type‹??_15›, Type‹r_1507›)
simpl_tm ~expand:false( Type‹??_15›, Type‹r_1507›)
infer_tm(Type‹r_1507›)
check_tm( B_1834, Type‹r_1507›)
infer_tm(B_1834)
assert_equal1( Type‹r_1507›, Type‹r_1507›)
assert_equal1_ok( Type‹r_1507›, Type‹r_1507›)
infer_tm(B_1834)
check_tm( ((f_1837) n_1836), B_1834)
infer_tm(((f_1837) n_1836))
infer_tm(f_1837)
check_tm( n_1836, A_1833)
infer_tm(n_1836)
assert_equal1( A_1833, A_1833)
assert_equal1_ok( A_1833, A_1833)
assert_equal1( B_1834, B_1834)
assert_equal1_ok( B_1834, B_1834)
infer_tm(Type‹s_1506›)
check_tm( A_1516, Type‹s_1506›)
infer_tm(A_1516)
assert_equal1( Type‹s_1506›, Type‹s_1506›)
assert_equal1_ok( Type‹s_1506›, Type‹s_1506›)
infer_tm(Type‹r_1507›)
check_tm( B_1523, Type‹r_1507›)
infer_tm(B_1523)
assert_equal1( Type‹r_1507›, Type‹r_1507›)
assert_equal1_ok( Type‹r_1507›, Type‹r_1507›)
----------------------------------

definition-------------------------
infer_tm(∀ {A_2123 : U} ->
           ∀ {n_2124 : nat_3} ->
             (vec_8‹??_20› A_2123 (succ_5‹› n_2124)) -> A_2123)
infer_tm(U)
infer_tm(∀ {n_2127 : nat_3} ->
           (vec_8‹??_20› A_2126 (succ_5‹› n_2127)) -> A_2126)
infer_tm(nat_3)
infer_tm((vec_8‹??_20› A_2126 (succ_5‹› n_2129)) -> A_2126)
infer_tm((vec_8‹??_20› A_2126 (succ_5‹› n_2129)))
check_tm( A_2126, Type‹??_20›)
infer_tm(A_2126)
assert_equal1( Type‹??_20›, U)
assert_equal1_extend( Type‹??_20›, U)
check_tm( (succ_5‹› n_2129), nat_3)
infer_tm((succ_5‹› n_2129))
check_tm( n_2129, nat_3)
infer_tm(n_2129)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_20›, U)
infer_tm(A_2126)
check_tm(
  function hd_vec_2132 :
    ∀ {A_2133 : U} ->
      ∀ {n_2134 : nat_3} ->
        (vec_8‹??_19› A_2133 (succ_5‹› n_2134)) -> A_2133
  | A_2136 n_2137 vnil_11 =>
  | A_2138 n_2139 (vcons_12 _2140 hd_2141 _2142) => hd_2141,
  ∀ {A_2143 : U} ->
    ∀ {n_2144 : nat_3} ->
      (vec_8‹??_20› A_2143 (succ_5‹› n_2144)) -> A_2143)
infer_tm(∀ {A_2147 : U} ->
           ∀ {n_2148 : nat_3} ->
             (vec_8‹??_19› A_2147 (succ_5‹› n_2148)) -> A_2147)
infer_tm(U)
infer_tm(∀ {n_2151 : nat_3} ->
           (vec_8‹??_19› A_2150 (succ_5‹› n_2151)) -> A_2150)
infer_tm(nat_3)
infer_tm((vec_8‹??_19› A_2150 (succ_5‹› n_2153)) -> A_2150)
infer_tm((vec_8‹??_19› A_2150 (succ_5‹› n_2153)))
check_tm( A_2150, Type‹??_19›)
infer_tm(A_2150)
assert_equal1( Type‹??_19›, U)
assert_equal1_extend( Type‹??_19›, U)
check_tm( (succ_5‹› n_2153), nat_3)
infer_tm((succ_5‹› n_2153))
check_tm( n_2153, nat_3)
infer_tm(n_2153)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_19›, U)
infer_tm(A_2150)
assert_equal1(
  ∀ {A_2156 : U} ->
    ∀ {n_2157 : nat_3} ->
      (vec_8‹??_20› A_2156 (succ_5‹› n_2157)) -> A_2156,
  ∀ {A_2159 : U} ->
    ∀ {n_2160 : nat_3} ->
      (vec_8‹??_19› A_2159 (succ_5‹› n_2160)) -> A_2159)
assert_equal1_extend(
  ∀ {A_2172 : U} ->
    ∀ {n_2173 : nat_3} ->
      (vec_8‹??_20› A_2172 (succ_5‹› n_2173)) -> A_2172,
  ∀ {A_2175 : U} ->
    ∀ {n_2176 : nat_3} ->
      (vec_8‹??_19› A_2175 (succ_5‹› n_2176)) -> A_2175)
simpl_tm ~expand:false(
  ∀ {A_2197 : U} ->
    ∀ {n_2198 : nat_3} ->
      (vec_8‹U› A_2197 (succ_5‹› n_2198)) -> A_2197,
  ∀ {A_2200 : U} ->
    ∀ {n_2201 : nat_3} ->
      (vec_8‹U› A_2200 (succ_5‹› n_2201)) -> A_2200)
simpl_tm ~expand:false( U, U)
simpl_tm ~expand:false(
  ∀ {n_2204 : nat_3} ->
    (vec_8‹U› A_2203 (succ_5‹› n_2204)) -> A_2203,
  ∀ {n_2206 : nat_3} ->
    (vec_8‹U› A_2203 (succ_5‹› n_2206)) -> A_2203)
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false(
  (vec_8‹U› A_2203 (succ_5‹› n_2208)) -> A_2203,
  (vec_8‹U› A_2203 (succ_5‹› n_2208)) -> A_2203)
simpl_tm ~expand:false( (vec_8‹U› A_2203 (succ_5‹› n_2208)),
  (vec_8‹U› A_2203 (succ_5‹› n_2208)))
simpl_tm ~expand:false( A_2203, A_2203)
simpl_tm ~expand:false( (succ_5‹› n_2208), (succ_5‹› n_2208))
simpl_tm ~expand:false( n_2208, n_2208)
simpl_tm ~expand:false( A_2203, A_2203)
check_cls {|
  prblm {| ;
    () ::: [A_2178, n_2179, vnil_11] =>? !!
    {|  ::: [A_2180, n_2181, (vcons_12 _2182 hd_2183 _2184)] =>? #hd_2183 |}
  |}
  a := ∀ {A_2218 : U} ->
         ∀ {n_2219 : nat_3} ->
           (vec_8‹U› A_2218 (succ_5‹› n_2219)) -> A_2218
|}
case_intro
case_introed(A_2221 : U)
case_intro
case_introed(n_2222 : nat_3)
case_intro
case_introed(__2223 : (vec_8‹U› #A_2221 (succ_5‹› #n_2222)))
case_splitting
splitting_on(vnil_11)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› #A_2221 (succ_5‹› #n_2222)),
      (vec_8‹U› #A_2221 zero_4));
    (eq_pat?( #A_2221, A_2178 : U)
     eq_pat?( #n_2222, n_2179 : nat_3)) ::: [] =>? !!
  |}
|}
unify_local(  )
unify_global(
  eq_term?( (vec_8‹U› #A_2221 (succ_5‹› #n_2222)),
    (vec_8‹U› #A_2221 zero_4))
)
local_map solved
simpl_pprbm ~expand:false( (vec_8‹U› #A_2221 (succ_5‹› #n_2222)),
  (vec_8‹U› #A_2221 zero_4))
simpl_pprbm ~expand:false( #A_2221, #A_2221)
simpl_pprbm ~expand:false( (succ_5‹› #n_2222), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› #n_2222), zero_4)
splitting_on(vcons_12)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› #A_2221 (succ_5‹› #n_2222)),
      (vec_8‹U› #A_2221 (succ_5‹› #n_2230)));
    {| eq_pat?( #A_2221, A_2180 : U)
       eq_pat?( #n_2222, n_2181 : nat_3)
       eq_pat?( #n_2230, _2182 : nat_3)
       eq_pat?( #hd_2231, hd_2183 : #A_2221)
       eq_pat?( #tl_2232, _2184 : (vec_8‹U› #A_2221 #n_2230)) ::: [] =>?
         #hd_2183
    |}
  |}
|}
unify_local(
  eq_pat?( #A_2221, A_2180 : U)
  eq_pat?( #n_2222, n_2181 : nat_3)
  eq_pat?( #n_2230, _2182 : nat_3)
  eq_pat?( #hd_2231, hd_2183 : #A_2221)
  eq_pat?( #tl_2232, _2184 : (vec_8‹U› #A_2221 #n_2230))
)
unify_global(
  eq_term?( (vec_8‹U› #A_2221 (succ_5‹› #n_2222)),
    (vec_8‹U› #A_2221 (succ_5‹› #n_2230)))
)
simpl_pprbm ~expand:false( #A_2221, #A_2180)
simpl_pprbm ~expand:false( #n_2222, #n_2181)
simpl_pprbm ~expand:false( #n_2230, #_2182)
simpl_pprbm ~expand:false( #hd_2231, #hd_2183)
simpl_pprbm ~expand:false( #tl_2232, #_2184)
local_map solved
simpl_pprbm ~expand:false( (vec_8‹U› #A_2221 (succ_5‹› #n_2222)),
  (vec_8‹U› #A_2221 (succ_5‹› #n_2230)))
simpl_pprbm ~expand:false( #A_2221, #A_2221)
simpl_pprbm ~expand:false( (succ_5‹› #n_2222), (succ_5‹› #n_2230))
simpl_pprbm ~expand:false( #n_2222, #n_2230)
global_map solved
case_coverage_ok( hd_2231, A_2221)
check_tm( hd_2231, A_2221)
infer_tm(hd_2231)
assert_equal1( A_2221, A_2221)
assert_equal1_ok( A_2221, A_2221)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_2245
    ??_2 <= s_2247
    ??_3 <= r_2248
    ??_4 <= s_2250
    ??_5 <= s_2251
    ??_6 <= s_2252
    ??_7 <= s_2253
    ??_8 <= s_2254
    ??_9 <= s_2255
    ??_10 <= s_2257
    ??_11 <= ??_10
    ??_12 <= s_2261
    ??_13 <= ??_12
    ??_14 <= s_2266
    ??_15 <= r_2268
    ??_16 <= ??_15
    ??_17 <= ??_14
    ??_18 <= ??_15
    ??_19 <= U
    ??_20 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_2281
    ?_2 <= A_2284
    ?_3 <= A_2290
    ?_4 <= A_2296
    ?_5 <= A_2302
    ?_6 <= A_2308
    ?_7 <= A_2316
    ?_8 <= B_2324
    ?_9 <= B_2332
    ?_10 <= ((f_2338) n_2339)
    ?_11 <= A_2351
    ?_12 <= B_2359
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(∀ {A_2381 : U} ->
           ∀ {n_2382 : nat_3} ->
             ∀ (xs_2383 :
               (vec_8‹??_23› A_2381 (succ_5‹› n_2382))) -> ?_17)
infer_tm(U)
infer_tm(∀ {n_2385 : nat_3} ->
           ∀ (xs_2386 : (vec_8‹??_23› A_2384 (succ_5‹› n_2385))) ->
             ?_17)
infer_tm(nat_3)
infer_tm(∀ (xs_2388 : (vec_8‹??_23› A_2384 (succ_5‹› n_2387))) ->
           ?_17)
infer_tm((vec_8‹??_23› A_2384 (succ_5‹› n_2387)))
check_tm( A_2384, Type‹??_23›)
infer_tm(A_2384)
assert_equal1( Type‹??_23›, U)
assert_equal1_extend( Type‹??_23›, U)
check_tm( (succ_5‹› n_2387), nat_3)
infer_tm((succ_5‹› n_2387))
check_tm( n_2387, nat_3)
infer_tm(n_2387)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_23›, U)
infer_tm(?_17)
delay_assert(?_59, ??_44)
simpl_tm ~expand:false( ?_59, Type‹??_44›)
check_tm(
  function hd_vec2_2390 :
    ∀ {A_2391 : U} ->
      ∀ {n_2392 : nat_3} ->
        ∀ (xs_2393 : (vec_8‹??_21› A_2391 (succ_5‹› n_2392))) ->
          ?_13
  | A_2394 n_2395 xs_2396 =>
    match ?_14, xs_2396 in
      ∀ {n0_2397 : ?_15} -o
        ∀ (__2398 : (vec_8‹??_22› A_2394 (succ_5‹› n0_2397))) -o
          ?_16
    with
    | _2399, vnil_11 =>
    | _2400, (vcons_12 _2401 hd_2402 _2403) => hd_2402,
  ∀ {A_2404 : U} ->
    ∀ {n_2405 : nat_3} ->
      ∀ (xs_2406 : (vec_8‹??_23› A_2404 (succ_5‹› n_2405))) -> ?_17)
infer_tm(∀ {A_2408 : U} ->
           ∀ {n_2409 : nat_3} ->
             ∀ (xs_2410 :
               (vec_8‹??_21› A_2408 (succ_5‹› n_2409))) -> ?_13)
infer_tm(U)
infer_tm(∀ {n_2412 : nat_3} ->
           ∀ (xs_2413 : (vec_8‹??_21› A_2411 (succ_5‹› n_2412))) ->
             ?_13)
infer_tm(nat_3)
infer_tm(∀ (xs_2415 : (vec_8‹??_21› A_2411 (succ_5‹› n_2414))) ->
           ?_13)
infer_tm((vec_8‹??_21› A_2411 (succ_5‹› n_2414)))
check_tm( A_2411, Type‹??_21›)
infer_tm(A_2411)
assert_equal1( Type‹??_21›, U)
assert_equal1_extend( Type‹??_21›, U)
check_tm( (succ_5‹› n_2414), nat_3)
infer_tm((succ_5‹› n_2414))
check_tm( n_2414, nat_3)
infer_tm(n_2414)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_21›, U)
infer_tm(?_13)
delay_assert(?_60, ??_45)
simpl_tm ~expand:false( ?_60, Type‹??_45›)
assert_equal1(
  ∀ {A_2417 : U} ->
    ∀ {n_2418 : nat_3} ->
      ∀ (xs_2419 : (vec_8‹??_23› A_2417 (succ_5‹› n_2418))) -> ?_17,
  ∀ {A_2420 : U} ->
    ∀ {n_2421 : nat_3} ->
      ∀ (xs_2422 : (vec_8‹??_21› A_2420 (succ_5‹› n_2421))) -> ?_13)
assert_equal1_extend(
  ∀ {A_2433 : U} ->
    ∀ {n_2434 : nat_3} ->
      ∀ (xs_2435 : (vec_8‹??_23› A_2433 (succ_5‹› n_2434))) -> ?_17,
  ∀ {A_2436 : U} ->
    ∀ {n_2437 : nat_3} ->
      ∀ (xs_2438 : (vec_8‹??_21› A_2436 (succ_5‹› n_2437))) -> ?_13)
simpl_tm ~expand:false(
  ∀ {A_2454 : U} ->
    ∀ {n_2455 : nat_3} ->
      ∀ (xs_2456 : (vec_8‹U› A_2454 (succ_5‹› n_2455))) -> ?_17,
  ∀ {A_2457 : U} ->
    ∀ {n_2458 : nat_3} ->
      ∀ (xs_2459 : (vec_8‹U› A_2457 (succ_5‹› n_2458))) -> ?_13)
simpl_tm ~expand:false( U, U)
simpl_tm ~expand:false(
  ∀ {n_2461 : nat_3} ->
    ∀ (xs_2462 : (vec_8‹U› A_2460 (succ_5‹› n_2461))) -> ?_17,
  ∀ {n_2463 : nat_3} ->
    ∀ (xs_2464 : (vec_8‹U› A_2460 (succ_5‹› n_2463))) -> ?_13)
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false(
  ∀ (xs_2466 : (vec_8‹U› A_2460 (succ_5‹› n_2465))) -> ?_17,
  ∀ (xs_2467 : (vec_8‹U› A_2460 (succ_5‹› n_2465))) -> ?_13)
simpl_tm ~expand:false( (vec_8‹U› A_2460 (succ_5‹› n_2465)),
  (vec_8‹U› A_2460 (succ_5‹› n_2465)))
simpl_tm ~expand:false( A_2460, A_2460)
simpl_tm ~expand:false( (succ_5‹› n_2465), (succ_5‹› n_2465))
simpl_tm ~expand:false( n_2465, n_2465)
simpl_tm ~expand:false( ?_17, ?_13)
check_cls {|
  prblm {| ;
    {|  ::: [A_2439, n_2440, xs_2441] =>?
         match ?_14, #xs_2441 in
           ∀ {n0_2475 : ?_15} -o
             ∀ (__2476 :
               (vec_8‹??_22› #A_2439 (succ_5‹› n0_2475))) -o ?_16
         with
         | _2477, vnil_11 =>
         | _2478, (vcons_12 _2479 hd_2480 _2481) => hd_2480
    |}
  |}
  a := ∀ {A_2482 : U} ->
         ∀ {n_2483 : nat_3} ->
           ∀ (xs_2484 : (vec_8‹U› A_2482 (succ_5‹› n_2483))) ->
             ?_13
|}
case_intro
case_introed(A_2485 : U)
case_intro
case_introed(n_2486 : nat_3)
case_intro
case_introed(xs_2487 : (vec_8‹U› #A_2485 (succ_5‹› #n_2486)))
case_coverage{|
  prblm {| ;
    {| eq_pat?( #A_2485, A_2439 : U)
       eq_pat?( #n_2486, n_2440 : nat_3)
       eq_pat?( #xs_2487, xs_2441 :
         (vec_8‹U› #A_2485 (succ_5‹› #n_2486))) ::: [] =>?
         match ?_14, #xs_2441 in
           ∀ {n0_2488 : ?_15} -o
             ∀ (__2489 :
               (vec_8‹??_22› #A_2439 (succ_5‹› n0_2488))) -o ?_16
         with
         | _2490, vnil_11 =>
         | _2491, (vcons_12 _2492 hd_2493 _2494) => hd_2493
    |}
  |}
|}
unify_local(
  eq_pat?( #A_2485, A_2439 : U)
  eq_pat?( #n_2486, n_2440 : nat_3)
  eq_pat?( #xs_2487, xs_2441 : (vec_8‹U› #A_2485 (succ_5‹› #n_2486)))
)
unify_global(  )
simpl_pprbm ~expand:false( #A_2485, #A_2439)
simpl_pprbm ~expand:false( #n_2486, #n_2440)
simpl_pprbm ~expand:false( #xs_2487, #xs_2441)
local_map solved
global_map solved
case_coverage_ok(
  match ?_14, xs_2487 in
    ∀ {n0_2509 : ?_15} -o
      ∀ (__2510 : (vec_8‹??_22› A_2485 (succ_5‹› n0_2509))) -o ?_16
  with
  | _2511, vnil_11 =>
  | _2512, (vcons_12 _2513 hd_2514 _2515) => hd_2514, ?_13)
check_tm(
  match ?_14, xs_2487 in
    ∀ {n0_2516 : ?_15} -o
      ∀ (__2517 : (vec_8‹??_22› A_2485 (succ_5‹› n0_2516))) -o ?_16
  with
  | _2518, vnil_11 =>
  | _2519, (vcons_12 _2520 hd_2521 _2522) => hd_2521, ?_13)
infer_tm(match ?_14, xs_2487 in
           ∀ {n0_2523 : ?_15} -o
             ∀ (__2524 :
               (vec_8‹??_22› A_2485 (succ_5‹› n0_2523))) -o ?_16
         with
         | _2525, vnil_11 =>
         | _2526, (vcons_12 _2527 hd_2528 _2529) => hd_2528)
infer_motive(?_14 : ?_15 : ?_15)
infer_tm(?_15)
delay_assert(?_61, ??_46)
infer_tm(?_15)
simpl_tm ~expand:false( ?_61, Type‹??_46›)
check_tm( ?_14, ?_15)
infer_motive(xs_2487 : (vec_8‹??_22› A_2485 (succ_5‹› n0_2530)) : 
(vec_8‹??_22› A_2485 (succ_5‹› n0_2530)))
infer_tm((vec_8‹??_22› A_2485 (succ_5‹› n0_2530)))
check_tm( A_2485, Type‹??_22›)
infer_tm(A_2485)
assert_equal1( Type‹??_22›, U)
assert_equal1_extend( Type‹??_22›, U)
check_tm( (succ_5‹› n0_2530), nat_3)
infer_tm((succ_5‹› n0_2530))
check_tm( n0_2530, nat_3)
infer_tm(n0_2530)
assert_equal1( nat_3, ?_15)
assert_equal1_extend( nat_3, ?_15)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( nat_3, ?_15)
simpl_tm ~expand:false( Type‹??_22›, U)
infer_tm((vec_8‹??_22› A_2485 (succ_5‹› ?_14)))
check_tm( A_2485, Type‹??_22›)
infer_tm(A_2485)
assert_equal1( Type‹??_22›, U)
assert_equal1_extend( Type‹??_22›, U)
check_tm( (succ_5‹› ?_14), nat_3)
infer_tm((succ_5‹› ?_14))
check_tm( ?_14, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( U, U)
check_tm( xs_2487, (vec_8‹??_22› A_2485 (succ_5‹› ?_14)))
infer_tm(xs_2487)
assert_equal1( (vec_8‹??_22› A_2485 (succ_5‹› ?_14)),
  (vec_8‹U› A_2485 (succ_5‹› n_2486)))
assert_equal1_extend( (vec_8‹??_22› A_2485 (succ_5‹› ?_14)),
  (vec_8‹U› A_2485 (succ_5‹› n_2486)))
infer_tm(?_16)
simpl_tm ~expand:false( (vec_8‹U› A_2485 (succ_5‹› ?_14)),
  (vec_8‹U› A_2485 (succ_5‹› n_2486)))
simpl_tm ~expand:false( A_2485, A_2485)
simpl_tm ~expand:false( (succ_5‹› ?_14), (succ_5‹› n_2486))
simpl_tm ~expand:false( ?_14, n_2486)
delay_assert(?_62, ??_47)
infer_tm(?_16)
simpl_tm ~expand:false( ?_62, Type‹??_47›)
check_cls {|
  prblm {| ;
    () ::: [_2532, vnil_11] =>? !!
    {|  ::: [_2533, (vcons_12 _2534 hd_2535 _2536)] =>? #hd_2535 |}
  |}
  a := ∀ {n0_2540 : nat_3} -o
         ∀ (__2541 : (vec_8‹U› A_2485 (succ_5‹› n0_2540))) -o ?_16
|}
case_intro
case_introed(n0_2542 : nat_3)
case_intro
case_introed(__2543 : (vec_8‹U› A_2485 (succ_5‹› #n0_2542)))
case_splitting
splitting_on(vnil_11)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› A_2485 (succ_5‹› #n0_2542)),
      (vec_8‹U› A_2485 zero_4));
    (eq_pat?( #n0_2542, _2532 : nat_3)) ::: [] =>? !!
  |}
|}
unify_local(  )
unify_global(
  eq_term?( (vec_8‹U› A_2485 (succ_5‹› #n0_2542)),
    (vec_8‹U› A_2485 zero_4))
)
local_map solved
simpl_pprbm ~expand:false( (vec_8‹U› A_2485 (succ_5‹› #n0_2542)),
  (vec_8‹U› A_2485 zero_4))
simpl_pprbm ~expand:false( A_2485, A_2485)
simpl_pprbm ~expand:false( (succ_5‹› #n0_2542), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› #n0_2542), zero_4)
splitting_on(vcons_12)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› A_2485 (succ_5‹› #n0_2542)),
      (vec_8‹U› A_2485 (succ_5‹› #n_2550)));
    {| eq_pat?( #n0_2542, _2533 : nat_3)
       eq_pat?( #n_2550, _2534 : nat_3)
       eq_pat?( #hd_2551, hd_2535 : A_2485)
       eq_pat?( #tl_2552, _2536 : (vec_8‹U› A_2485 #n_2550)) ::: [] =>?
         #hd_2535
    |}
  |}
|}
unify_local(
  eq_pat?( #n0_2542, _2533 : nat_3)
  eq_pat?( #n_2550, _2534 : nat_3)
  eq_pat?( #hd_2551, hd_2535 : A_2485)
  eq_pat?( #tl_2552, _2536 : (vec_8‹U› A_2485 #n_2550))
)
unify_global(
  eq_term?( (vec_8‹U› A_2485 (succ_5‹› #n0_2542)),
    (vec_8‹U› A_2485 (succ_5‹› #n_2550)))
)
simpl_pprbm ~expand:false( #n0_2542, #_2533)
simpl_pprbm ~expand:false( #n_2550, #_2534)
simpl_pprbm ~expand:false( #hd_2551, #hd_2535)
simpl_pprbm ~expand:false( #tl_2552, #_2536)
local_map solved
simpl_pprbm ~expand:false( (vec_8‹U› A_2485 (succ_5‹› #n0_2542)),
  (vec_8‹U› A_2485 (succ_5‹› #n_2550)))
simpl_pprbm ~expand:false( A_2485, A_2485)
simpl_pprbm ~expand:false( (succ_5‹› #n0_2542), (succ_5‹› #n_2550))
simpl_pprbm ~expand:false( #n0_2542, #n_2550)
global_map solved
case_coverage_ok( hd_2551, ?_16)
check_tm( hd_2551, ?_16)
infer_tm(hd_2551)
assert_equal1( ?_16, A_2485)
assert_equal1_extend( ?_16, A_2485)
assert_equal1( ?_13, ?_16)
assert_equal1_extend( ?_13, ?_16)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_2565
    ??_2 <= s_2567
    ??_3 <= r_2568
    ??_4 <= s_2570
    ??_5 <= s_2571
    ??_6 <= s_2572
    ??_7 <= s_2573
    ??_8 <= s_2574
    ??_9 <= s_2575
    ??_10 <= s_2577
    ??_11 <= ??_10
    ??_12 <= s_2581
    ??_13 <= ??_12
    ??_14 <= s_2586
    ??_15 <= r_2588
    ??_16 <= ??_15
    ??_17 <= ??_14
    ??_18 <= ??_15
    ??_19 <= U
    ??_20 <= U
    ??_21 <= U
    ??_22 <= U
    ??_23 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_2601
    ?_2 <= A_2604
    ?_3 <= A_2610
    ?_4 <= A_2616
    ?_5 <= A_2622
    ?_6 <= A_2628
    ?_7 <= A_2636
    ?_8 <= B_2644
    ?_9 <= B_2652
    ?_10 <= ((f_2658) n_2659)
    ?_11 <= A_2671
    ?_12 <= B_2679
    ?_14 <= n_2682
    ?_15 <= nat_3
    ?_17 <= ?_13
    ?_59 <= Type‹??_44›
    ?_60 <= Type‹??_45›
    ?_61 <= Type‹??_46›
    ?_62 <= Type‹??_47›
    
  |}
  eqns {|
    equal_tm? (?_13, ?_16);
    equal_tm? (?_16, A_2485)
  |}
end_dump
simpl_tm ~expand:false( ?_13, ?_16)
simpl_tm ~expand:false( ?_13, A_2485)
infer_tm(Type‹??_45›)
check_tm( A_2411, Type‹??_45›)
infer_tm(A_2411)
assert_equal1( Type‹??_45›, U)
assert_equal1_extend( Type‹??_45›, U)
simpl_tm ~expand:false( Type‹??_45›, U)
infer_tm(nat_3)
check_tm( n_2486, nat_3)
infer_tm(n_2486)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
infer_tm(Type‹??_46›)
check_tm( nat_3, Type‹??_46›)
infer_tm(nat_3)
assert_equal1( Type‹??_46›, U)
assert_equal1_extend( Type‹??_46›, U)
simpl_tm ~expand:false( Type‹??_46›, U)
infer_tm(Type‹??_47›)
check_tm( A_2485, Type‹??_47›)
infer_tm(A_2485)
assert_equal1( Type‹??_47›, U)
assert_equal1_extend( Type‹??_47›, U)
simpl_tm ~expand:false( Type‹??_47›, U)
infer_tm(Type‹??_44›)
check_tm( A_2384, Type‹??_44›)
infer_tm(A_2384)
assert_equal1( Type‹??_44›, U)
assert_equal1_extend( Type‹??_44›, U)
simpl_tm ~expand:false( Type‹??_44›, U)
----------------------------------

definition-------------------------
infer_tm(∀ {A_2753 : U} ->
           ∀ {n_2754 : nat_3} ->
             ∀ (xs_2755 :
               (vec_8‹??_25› A_2753 (succ_5‹› n_2754))) -> ?_21)
infer_tm(U)
infer_tm(∀ {n_2757 : nat_3} ->
           ∀ (xs_2758 : (vec_8‹??_25› A_2756 (succ_5‹› n_2757))) ->
             ?_21)
infer_tm(nat_3)
infer_tm(∀ (xs_2760 : (vec_8‹??_25› A_2756 (succ_5‹› n_2759))) ->
           ?_21)
infer_tm((vec_8‹??_25› A_2756 (succ_5‹› n_2759)))
check_tm( A_2756, Type‹??_25›)
infer_tm(A_2756)
assert_equal1( Type‹??_25›, U)
assert_equal1_extend( Type‹??_25›, U)
check_tm( (succ_5‹› n_2759), nat_3)
infer_tm((succ_5‹› n_2759))
check_tm( n_2759, nat_3)
infer_tm(n_2759)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_25›, U)
infer_tm(?_21)
delay_assert(?_63, ??_48)
simpl_tm ~expand:false( ?_63, Type‹??_48›)
check_tm(
  function hd_vec3_2762 :
    ∀ {A_2763 : U} ->
      ∀ {n_2764 : nat_3} ->
        ∀ (xs_2765 : (vec_8‹??_24› A_2763 (succ_5‹› n_2764))) ->
          ?_18
  | A_2766 n_2767 xs_2768 =>
    match xs_2768 in ∀ (_2769 : ?_19) -o ?_20 with
    | vnil_11 =>
    | (vcons_12 _2770 hd_2771 _2772) => hd_2771,
  ∀ {A_2773 : U} ->
    ∀ {n_2774 : nat_3} ->
      ∀ (xs_2775 : (vec_8‹??_25› A_2773 (succ_5‹› n_2774))) -> ?_21)
infer_tm(∀ {A_2777 : U} ->
           ∀ {n_2778 : nat_3} ->
             ∀ (xs_2779 :
               (vec_8‹??_24› A_2777 (succ_5‹› n_2778))) -> ?_18)
infer_tm(U)
infer_tm(∀ {n_2781 : nat_3} ->
           ∀ (xs_2782 : (vec_8‹??_24› A_2780 (succ_5‹› n_2781))) ->
             ?_18)
infer_tm(nat_3)
infer_tm(∀ (xs_2784 : (vec_8‹??_24› A_2780 (succ_5‹› n_2783))) ->
           ?_18)
infer_tm((vec_8‹??_24› A_2780 (succ_5‹› n_2783)))
check_tm( A_2780, Type‹??_24›)
infer_tm(A_2780)
assert_equal1( Type‹??_24›, U)
assert_equal1_extend( Type‹??_24›, U)
check_tm( (succ_5‹› n_2783), nat_3)
infer_tm((succ_5‹› n_2783))
check_tm( n_2783, nat_3)
infer_tm(n_2783)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_24›, U)
infer_tm(?_18)
delay_assert(?_64, ??_49)
simpl_tm ~expand:false( ?_64, Type‹??_49›)
assert_equal1(
  ∀ {A_2786 : U} ->
    ∀ {n_2787 : nat_3} ->
      ∀ (xs_2788 : (vec_8‹??_25› A_2786 (succ_5‹› n_2787))) -> ?_21,
  ∀ {A_2789 : U} ->
    ∀ {n_2790 : nat_3} ->
      ∀ (xs_2791 : (vec_8‹??_24› A_2789 (succ_5‹› n_2790))) -> ?_18)
assert_equal1_extend(
  ∀ {A_2802 : U} ->
    ∀ {n_2803 : nat_3} ->
      ∀ (xs_2804 : (vec_8‹??_25› A_2802 (succ_5‹› n_2803))) -> ?_21,
  ∀ {A_2805 : U} ->
    ∀ {n_2806 : nat_3} ->
      ∀ (xs_2807 : (vec_8‹??_24› A_2805 (succ_5‹› n_2806))) -> ?_18)
simpl_tm ~expand:false(
  ∀ {A_2823 : U} ->
    ∀ {n_2824 : nat_3} ->
      ∀ (xs_2825 : (vec_8‹U› A_2823 (succ_5‹› n_2824))) -> ?_21,
  ∀ {A_2826 : U} ->
    ∀ {n_2827 : nat_3} ->
      ∀ (xs_2828 : (vec_8‹U› A_2826 (succ_5‹› n_2827))) -> ?_18)
simpl_tm ~expand:false( U, U)
simpl_tm ~expand:false(
  ∀ {n_2830 : nat_3} ->
    ∀ (xs_2831 : (vec_8‹U› A_2829 (succ_5‹› n_2830))) -> ?_21,
  ∀ {n_2832 : nat_3} ->
    ∀ (xs_2833 : (vec_8‹U› A_2829 (succ_5‹› n_2832))) -> ?_18)
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false(
  ∀ (xs_2835 : (vec_8‹U› A_2829 (succ_5‹› n_2834))) -> ?_21,
  ∀ (xs_2836 : (vec_8‹U› A_2829 (succ_5‹› n_2834))) -> ?_18)
simpl_tm ~expand:false( (vec_8‹U› A_2829 (succ_5‹› n_2834)),
  (vec_8‹U› A_2829 (succ_5‹› n_2834)))
simpl_tm ~expand:false( A_2829, A_2829)
simpl_tm ~expand:false( (succ_5‹› n_2834), (succ_5‹› n_2834))
simpl_tm ~expand:false( n_2834, n_2834)
simpl_tm ~expand:false( ?_21, ?_18)
check_cls {|
  prblm {| ;
    {|  ::: [A_2808, n_2809, xs_2810] =>?
         match #xs_2810 in ∀ (_2844 : ?_19) -o ?_20 with
         | vnil_11 =>
         | (vcons_12 _2845 hd_2846 _2847) => hd_2846
    |}
  |}
  a := ∀ {A_2848 : U} ->
         ∀ {n_2849 : nat_3} ->
           ∀ (xs_2850 : (vec_8‹U› A_2848 (succ_5‹› n_2849))) ->
             ?_18
|}
case_intro
case_introed(A_2851 : U)
case_intro
case_introed(n_2852 : nat_3)
case_intro
case_introed(xs_2853 : (vec_8‹U› #A_2851 (succ_5‹› #n_2852)))
case_coverage{|
  prblm {| ;
    {| eq_pat?( #A_2851, A_2808 : U)
       eq_pat?( #n_2852, n_2809 : nat_3)
       eq_pat?( #xs_2853, xs_2810 :
         (vec_8‹U› #A_2851 (succ_5‹› #n_2852))) ::: [] =>?
         match #xs_2810 in ∀ (_2854 : ?_19) -o ?_20 with
         | vnil_11 =>
         | (vcons_12 _2855 hd_2856 _2857) => hd_2856
    |}
  |}
|}
unify_local(
  eq_pat?( #A_2851, A_2808 : U)
  eq_pat?( #n_2852, n_2809 : nat_3)
  eq_pat?( #xs_2853, xs_2810 : (vec_8‹U› #A_2851 (succ_5‹› #n_2852)))
)
unify_global(  )
simpl_pprbm ~expand:false( #A_2851, #A_2808)
simpl_pprbm ~expand:false( #n_2852, #n_2809)
simpl_pprbm ~expand:false( #xs_2853, #xs_2810)
local_map solved
global_map solved
case_coverage_ok(
  match xs_2853 in ∀ (_2868 : ?_19) -o ?_20 with
  | vnil_11 =>
  | (vcons_12 _2869 hd_2870 _2871) => hd_2870, ?_18)
check_tm(
  match xs_2853 in ∀ (_2872 : ?_19) -o ?_20 with
  | vnil_11 =>
  | (vcons_12 _2873 hd_2874 _2875) => hd_2874, ?_18)
infer_tm(match xs_2853 in ∀ (_2876 : ?_19) -o ?_20 with
         | vnil_11 =>
         | (vcons_12 _2877 hd_2878 _2879) => hd_2878)
infer_motive(xs_2853 : ?_19 : ?_19)
infer_tm(?_19)
delay_assert(?_65, ??_50)
infer_tm(?_19)
simpl_tm ~expand:false( ?_65, Type‹??_50›)
check_tm( xs_2853, ?_19)
infer_tm(xs_2853)
assert_equal1( ?_19, (vec_8‹U› A_2851 (succ_5‹› n_2852)))
assert_equal1_extend( ?_19, (vec_8‹U› A_2851 (succ_5‹› n_2852)))
infer_tm(?_20)
simpl_tm ~expand:false( ?_19, (vec_8‹U› A_2851 (succ_5‹› n_2852)))
delay_assert(?_66, ??_51)
infer_tm(?_20)
simpl_tm ~expand:false( ?_66, Type‹??_51›)
check_cls {|
  prblm {| ;
    () ::: [vnil_11] =>? !!
    {|  ::: [(vcons_12 _2881 hd_2882 _2883)] =>? #hd_2882 |}
  |}
  a := ∀ (_2885 : (vec_8‹U› A_2851 (succ_5‹› n_2852))) -o ?_20
|}
case_intro
case_introed(_2886 : (vec_8‹U› A_2851 (succ_5‹› n_2852)))
case_splitting
splitting_on(vnil_11)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› A_2851 (succ_5‹› n_2852)),
      (vec_8‹U› A_2851 zero_4));
    () ::: [] =>? !!
  |}
|}
unify_local(  )
unify_global(
  eq_term?( (vec_8‹U› A_2851 (succ_5‹› n_2852)),
    (vec_8‹U› A_2851 zero_4))
)
local_map solved
simpl_pprbm ~expand:false( (vec_8‹U› A_2851 (succ_5‹› n_2852)),
  (vec_8‹U› A_2851 zero_4))
simpl_pprbm ~expand:false( A_2851, A_2851)
simpl_pprbm ~expand:false( (succ_5‹› n_2852), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› n_2852), zero_4)
splitting_on(vcons_12)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› A_2851 (succ_5‹› n_2852)),
      (vec_8‹U› A_2851 (succ_5‹› #n_2893)));
    {| eq_pat?( #n_2893, _2881 : nat_3)
       eq_pat?( #hd_2894, hd_2882 : A_2851)
       eq_pat?( #tl_2895, _2883 : (vec_8‹U› A_2851 #n_2893)) ::: [] =>?
         #hd_2882
    |}
  |}
|}
unify_local(
  eq_pat?( #n_2893, _2881 : nat_3)
  eq_pat?( #hd_2894, hd_2882 : A_2851)
  eq_pat?( #tl_2895, _2883 : (vec_8‹U› A_2851 #n_2893))
)
unify_global(
  eq_term?( (vec_8‹U› A_2851 (succ_5‹› n_2852)),
    (vec_8‹U› A_2851 (succ_5‹› #n_2893)))
)
simpl_pprbm ~expand:false( #n_2893, #_2881)
simpl_pprbm ~expand:false( #hd_2894, #hd_2882)
simpl_pprbm ~expand:false( #tl_2895, #_2883)
local_map solved
simpl_pprbm ~expand:false( (vec_8‹U› A_2851 (succ_5‹› n_2852)),
  (vec_8‹U› A_2851 (succ_5‹› #n_2893)))
simpl_pprbm ~expand:false( A_2851, A_2851)
simpl_pprbm ~expand:false( (succ_5‹› n_2852), (succ_5‹› #n_2893))
simpl_pprbm ~expand:false( n_2852, #n_2893)
global_map solved
case_coverage_ok( hd_2894, ?_20)
check_tm( hd_2894, ?_20)
infer_tm(hd_2894)
assert_equal1( ?_20, A_2851)
assert_equal1_extend( ?_20, A_2851)
assert_equal1( ?_18, ?_20)
assert_equal1_extend( ?_18, ?_20)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_2908
    ??_2 <= s_2910
    ??_3 <= r_2911
    ??_4 <= s_2913
    ??_5 <= s_2914
    ??_6 <= s_2915
    ??_7 <= s_2916
    ??_8 <= s_2917
    ??_9 <= s_2918
    ??_10 <= s_2920
    ??_11 <= ??_10
    ??_12 <= s_2924
    ??_13 <= ??_12
    ??_14 <= s_2929
    ??_15 <= r_2931
    ??_16 <= ??_15
    ??_17 <= ??_14
    ??_18 <= ??_15
    ??_19 <= U
    ??_20 <= U
    ??_21 <= U
    ??_22 <= U
    ??_23 <= U
    ??_24 <= U
    ??_25 <= U
    ??_44 <= U
    ??_45 <= U
    ??_46 <= U
    ??_47 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_2944
    ?_2 <= A_2947
    ?_3 <= A_2953
    ?_4 <= A_2959
    ?_5 <= A_2965
    ?_6 <= A_2971
    ?_7 <= A_2979
    ?_8 <= B_2987
    ?_9 <= B_2995
    ?_10 <= ((f_3001) n_3002)
    ?_11 <= A_3014
    ?_12 <= B_3022
    ?_13 <= A_3026
    ?_14 <= n_3028
    ?_15 <= nat_3
    ?_16 <= ?_13
    ?_17 <= ?_13
    ?_19 <= (vec_8‹U› A_3046 (succ_5‹› n_3045))
    ?_21 <= ?_18
    ?_59 <= Type‹??_44›
    ?_60 <= Type‹??_45›
    ?_61 <= Type‹??_46›
    ?_62 <= Type‹??_47›
    ?_63 <= Type‹??_48›
    ?_64 <= Type‹??_49›
    ?_65 <= Type‹??_50›
    ?_66 <= Type‹??_51›
    
  |}
  eqns {|
    equal_tm? (?_18, ?_20);
    equal_tm? (?_20, A_2851)
  |}
end_dump
simpl_tm ~expand:false( ?_18, ?_20)
simpl_tm ~expand:false( ?_18, A_2851)
infer_tm(Type‹??_49›)
check_tm( A_2780, Type‹??_49›)
infer_tm(A_2780)
assert_equal1( Type‹??_49›, U)
assert_equal1_extend( Type‹??_49›, U)
simpl_tm ~expand:false( Type‹??_49›, U)
infer_tm(Type‹??_50›)
check_tm( (vec_8‹U› A_2851 (succ_5‹› n_2852)), Type‹??_50›)
infer_tm((vec_8‹U› A_2851 (succ_5‹› n_2852)))
check_tm( A_2851, U)
infer_tm(A_2851)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( (succ_5‹› n_2852), nat_3)
infer_tm((succ_5‹› n_2852))
check_tm( n_2852, nat_3)
infer_tm(n_2852)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( Type‹??_50›, U)
assert_equal1_extend( Type‹??_50›, U)
simpl_tm ~expand:false( Type‹??_50›, U)
infer_tm(Type‹??_51›)
check_tm( A_2851, Type‹??_51›)
infer_tm(A_2851)
assert_equal1( Type‹??_51›, U)
assert_equal1_extend( Type‹??_51›, U)
simpl_tm ~expand:false( Type‹??_51›, U)
infer_tm(Type‹??_48›)
check_tm( A_2756, Type‹??_48›)
infer_tm(A_2756)
assert_equal1( Type‹??_48›, U)
assert_equal1_extend( Type‹??_48›, U)
simpl_tm ~expand:false( Type‹??_48›, U)
----------------------------------

definition-------------------------
infer_tm(∀ {A_3115 : U} ->
           ∀ {n_3116 : nat_3} ->
             ∀ (__3117 : (vec_8‹??_38› A_3115 n_3116)) ->
               (exists_5‹??_40,??_41›
                 ?_45
                 function _3118 : ∀ (x_3119 : ?_42) -> ?_43
                 | x_3120 => (eq_4‹??_39› ?_44 x_3120 n_3116)))
infer_tm(U)
infer_tm(∀ {n_3122 : nat_3} ->
           ∀ (__3123 : (vec_8‹??_38› A_3121 n_3122)) ->
             (exists_5‹??_40,??_41›
               ?_45
               function _3124 : ∀ (x_3125 : ?_42) -> ?_43
               | x_3126 => (eq_4‹??_39› ?_44 x_3126 n_3122)))
infer_tm(nat_3)
infer_tm(∀ (__3128 : (vec_8‹??_38› A_3121 n_3127)) ->
           (exists_5‹??_40,??_41›
             ?_45
             function _3129 : ∀ (x_3130 : ?_42) -> ?_43
             | x_3131 => (eq_4‹??_39› ?_44 x_3131 n_3127)))
infer_tm((vec_8‹??_38› A_3121 n_3127))
check_tm( A_3121, Type‹??_38›)
infer_tm(A_3121)
assert_equal1( Type‹??_38›, U)
assert_equal1_extend( Type‹??_38›, U)
check_tm( n_3127, nat_3)
infer_tm(n_3127)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_38›, U)
infer_tm((exists_5‹??_40,??_41›
           ?_45
           function _3133 : ∀ (x_3134 : ?_42) -> ?_43
           | x_3135 => (eq_4‹??_39› ?_44 x_3135 n_3127)))
check_tm( ?_45, Type‹??_40›)
check_tm(
  function _3136 : ∀ (x_3137 : ?_42) -> ?_43
  | x_3138 => (eq_4‹??_39› ?_44 x_3138 n_3127), ?_45 -> Type‹??_41›)
infer_tm(∀ (x_3141 : ?_42) -> ?_43)
infer_tm(?_42)
delay_assert(?_67, ??_52)
infer_tm(?_43)
simpl_tm ~expand:false( ?_67, Type‹??_52›)
delay_assert(?_68, ??_53)
simpl_tm ~expand:false( ?_68, Type‹??_53›)
assert_equal1( ?_45 -> Type‹??_41›, ∀ (x_3144 : ?_42) -> ?_43)
assert_equal1_extend( ?_45 -> Type‹??_41›, ∀ (x_3146 : ?_42) -> ?_43)
simpl_tm ~expand:false( ?_45 -> Type‹??_41›, ∀ (x_3151 : ?_42) -> ?_43)
simpl_tm ~expand:false( ?_45, ?_42)
simpl_tm ~expand:false( Type‹??_41›, ?_43)
simpl_tm ~expand:false( Type‹??_41›, ?_43)
check_cls {|
  prblm {| ; {|  ::: [x_3147] =>? (eq_4‹??_39› ?_44 #x_3147 n_3127) |} |}
  a := ?_42 -> Type‹??_41›
|}
case_intro
case_introed(__3155 : ?_42)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__3155, x_3147 : ?_42) ::: [] =>?
         (eq_4‹??_39› ?_44 #x_3147 n_3127)
    |}
  |}
|}
unify_local( eq_pat?( #__3155, x_3147 : ?_42) )
unify_global(  )
simpl_pprbm ~expand:false( #__3155, #x_3147)
local_map solved
global_map solved
case_coverage_ok( (eq_4‹??_39› ?_44 __3155 n_3127), Type‹??_41›)
check_tm( (eq_4‹??_39› ?_44 __3155 n_3127), Type‹??_41›)
infer_tm((eq_4‹??_39› ?_44 __3155 n_3127))
check_tm( ?_44, Type‹??_39›)
check_tm( __3155, ?_44)
infer_tm(__3155)
assert_equal1( ?_44, ?_42)
assert_equal1_extend( ?_44, ?_42)
check_tm( n_3127, ?_44)
infer_tm(n_3127)
assert_equal1( ?_44, nat_3)
assert_equal1_extend( ?_44, nat_3)
assert_equal1( Type‹??_41›, U)
assert_equal1_extend( Type‹??_41›, U)
simpl_tm ~expand:false( Type‹??_41›, U)
simpl_tm ~expand:false( ?_44, nat_3)
simpl_tm ~expand:false( nat_3, ?_42)
check_tm(
  function vlength_3157 :
    ∀ {A_3158 : U} ->
      ∀ {n_3159 : nat_3} ->
        ∀ (__3160 : (vec_8‹??_26› A_3158 n_3159)) ->
          (exists_5‹??_28,??_29›
            ?_25
            function _3161 : ∀ (x_3162 : ?_22) -> ?_23
            | x_3163 => (eq_4‹??_27› ?_24 x_3163 n_3159))
  | A_3164 n_3165 vnil_11 => (ex_7‹??_31,??_32› zero_4 refl_6‹??_30›)
  | A_3166 n_3167 (vcons_12 _3168 _3169 tl_3170) =>
    match ((vlength_3157) ?_31 ?_30 tl_3170) in ∀ (_3171 : ?_32) -o ?_33
    with
    | (ex_7 n_3172 pf_3173) =>
      (ex_7‹??_36,??_37›
        (succ_5‹› n_3172)
        ((congr_3‹??_33,??_34,??_35›)
          ?_39 ?_38 ?_37 ?_36
          function _3174 : ∀ (x_3175 : ?_34) -> ?_35
          | x_3176 => (succ_5‹› x_3176) pf_3173)),
  ∀ {A_3177 : U} ->
    ∀ {n_3178 : nat_3} ->
      ∀ (__3179 : (vec_8‹??_38› A_3177 n_3178)) ->
        (exists_5‹??_40,??_41›
          ?_45
          function _3180 : ∀ (x_3181 : ?_42) -> ?_43
          | x_3182 => (eq_4‹??_39› ?_44 x_3182 n_3178)))
infer_tm(∀ {A_3184 : U} ->
           ∀ {n_3185 : nat_3} ->
             ∀ (__3186 : (vec_8‹??_26› A_3184 n_3185)) ->
               (exists_5‹??_28,??_29›
                 ?_25
                 function _3187 : ∀ (x_3188 : ?_22) -> ?_23
                 | x_3189 => (eq_4‹??_27› ?_24 x_3189 n_3185)))
infer_tm(U)
infer_tm(∀ {n_3191 : nat_3} ->
           ∀ (__3192 : (vec_8‹??_26› A_3190 n_3191)) ->
             (exists_5‹??_28,??_29›
               ?_25
               function _3193 : ∀ (x_3194 : ?_22) -> ?_23
               | x_3195 => (eq_4‹??_27› ?_24 x_3195 n_3191)))
infer_tm(nat_3)
infer_tm(∀ (__3197 : (vec_8‹??_26› A_3190 n_3196)) ->
           (exists_5‹??_28,??_29›
             ?_25
             function _3198 : ∀ (x_3199 : ?_22) -> ?_23
             | x_3200 => (eq_4‹??_27› ?_24 x_3200 n_3196)))
infer_tm((vec_8‹??_26› A_3190 n_3196))
check_tm( A_3190, Type‹??_26›)
infer_tm(A_3190)
assert_equal1( Type‹??_26›, U)
assert_equal1_extend( Type‹??_26›, U)
check_tm( n_3196, nat_3)
infer_tm(n_3196)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_26›, U)
infer_tm((exists_5‹??_28,??_29›
           ?_25
           function _3202 : ∀ (x_3203 : ?_22) -> ?_23
           | x_3204 => (eq_4‹??_27› ?_24 x_3204 n_3196)))
check_tm( ?_25, Type‹??_28›)
check_tm(
  function _3205 : ∀ (x_3206 : ?_22) -> ?_23
  | x_3207 => (eq_4‹??_27› ?_24 x_3207 n_3196), ?_25 -> Type‹??_29›)
infer_tm(∀ (x_3210 : ?_22) -> ?_23)
infer_tm(?_22)
delay_assert(?_69, ??_54)
infer_tm(?_23)
simpl_tm ~expand:false( ?_69, Type‹??_54›)
delay_assert(?_70, ??_55)
simpl_tm ~expand:false( ?_70, Type‹??_55›)
assert_equal1( ?_25 -> Type‹??_29›, ∀ (x_3213 : ?_22) -> ?_23)
assert_equal1_extend( ?_25 -> Type‹??_29›, ∀ (x_3215 : ?_22) -> ?_23)
simpl_tm ~expand:false( ?_25 -> Type‹??_29›, ∀ (x_3220 : ?_22) -> ?_23)
simpl_tm ~expand:false( ?_25, ?_22)
simpl_tm ~expand:false( Type‹??_29›, ?_23)
simpl_tm ~expand:false( Type‹??_29›, ?_23)
check_cls {|
  prblm {| ; {|  ::: [x_3216] =>? (eq_4‹??_27› ?_24 #x_3216 n_3196) |} |}
  a := ?_22 -> Type‹??_29›
|}
case_intro
case_introed(__3224 : ?_22)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__3224, x_3216 : ?_22) ::: [] =>?
         (eq_4‹??_27› ?_24 #x_3216 n_3196)
    |}
  |}
|}
unify_local( eq_pat?( #__3224, x_3216 : ?_22) )
unify_global(  )
simpl_pprbm ~expand:false( #__3224, #x_3216)
local_map solved
global_map solved
case_coverage_ok( (eq_4‹??_27› ?_24 __3224 n_3196), Type‹??_29›)
check_tm( (eq_4‹??_27› ?_24 __3224 n_3196), Type‹??_29›)
infer_tm((eq_4‹??_27› ?_24 __3224 n_3196))
check_tm( ?_24, Type‹??_27›)
check_tm( __3224, ?_24)
infer_tm(__3224)
assert_equal1( ?_24, ?_22)
assert_equal1_extend( ?_24, ?_22)
check_tm( n_3196, ?_24)
infer_tm(n_3196)
assert_equal1( ?_24, nat_3)
assert_equal1_extend( ?_24, nat_3)
assert_equal1( Type‹??_29›, U)
assert_equal1_extend( Type‹??_29›, U)
simpl_tm ~expand:false( Type‹??_29›, U)
simpl_tm ~expand:false( ?_24, nat_3)
simpl_tm ~expand:false( nat_3, ?_22)
assert_equal1(
  ∀ {A_3226 : U} ->
    ∀ {n_3227 : nat_3} ->
      ∀ (__3228 : (vec_8‹??_38› A_3226 n_3227)) ->
        (exists_5‹??_40,??_41›
          ?_45
          function _3229 : ∀ (x_3230 : ?_42) -> ?_43
          | x_3231 => (eq_4‹??_39› ?_44 x_3231 n_3227)),
  ∀ {A_3232 : U} ->
    ∀ {n_3233 : nat_3} ->
      ∀ (__3234 : (vec_8‹??_26› A_3232 n_3233)) ->
        (exists_5‹??_28,??_29›
          ?_25
          function _3235 : ∀ (x_3236 : ?_22) -> ?_23
          | x_3237 => (eq_4‹??_27› ?_24 x_3237 n_3233)))
assert_equal1_extend(
  ∀ {A_3248 : U} ->
    ∀ {n_3249 : nat_3} ->
      ∀ (__3250 : (vec_8‹??_38› A_3248 n_3249)) ->
        (exists_5‹??_40,??_41›
          ?_45
          function _3251 : ∀ (x_3252 : ?_42) -> ?_43
          | x_3253 => (eq_4‹??_39› ?_44 x_3253 n_3249)),
  ∀ {A_3254 : U} ->
    ∀ {n_3255 : nat_3} ->
      ∀ (__3256 : (vec_8‹??_26› A_3254 n_3255)) ->
        (exists_5‹??_28,??_29›
          ?_25
          function _3257 : ∀ (x_3258 : ?_22) -> ?_23
          | x_3259 => (eq_4‹??_27› ?_24 x_3259 n_3255)))
simpl_tm ~expand:false(
  ∀ {A_3297 : U} ->
    ∀ {n_3298 : nat_3} ->
      (vec_8‹U› A_3297 n_3298) ->
        (exists_5‹??_40,U›
          nat_3
          function _3300 : nat_3 -> U
          | x_3302 => (eq_4‹??_39› nat_3 x_3302 n_3298)),
  ∀ {A_3303 : U} ->
    ∀ {n_3304 : nat_3} ->
      (vec_8‹U› A_3303 n_3304) ->
        (exists_5‹??_28,U›
          nat_3
          function _3306 : nat_3 -> U
          | x_3308 => (eq_4‹??_27› nat_3 x_3308 n_3304)))
simpl_tm ~expand:false( U, U)
simpl_tm ~expand:false(
  ∀ {n_3310 : nat_3} ->
    (vec_8‹U› A_3309 n_3310) ->
      (exists_5‹??_40,U›
        nat_3
        function _3312 : nat_3 -> U
        | x_3314 => (eq_4‹??_39› nat_3 x_3314 n_3310)),
  ∀ {n_3315 : nat_3} ->
    (vec_8‹U› A_3309 n_3315) ->
      (exists_5‹??_28,U›
        nat_3
        function _3317 : nat_3 -> U
        | x_3319 => (eq_4‹??_27› nat_3 x_3319 n_3315)))
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false(
  (vec_8‹U› A_3309 n_3320) ->
    (exists_5‹??_40,U›
      nat_3
      function _3322 : nat_3 -> U
      | x_3324 => (eq_4‹??_39› nat_3 x_3324 n_3320)),
  (vec_8‹U› A_3309 n_3320) ->
    (exists_5‹??_28,U›
      nat_3
      function _3326 : nat_3 -> U
      | x_3328 => (eq_4‹??_27› nat_3 x_3328 n_3320)))
simpl_tm ~expand:false( (vec_8‹U› A_3309 n_3320),
  (vec_8‹U› A_3309 n_3320))
simpl_tm ~expand:false( A_3309, A_3309)
simpl_tm ~expand:false( n_3320, n_3320)
simpl_tm ~expand:false(
  (exists_5‹??_40,U›
    nat_3
    function _3330 : nat_3 -> U
    | x_3332 => (eq_4‹??_39› nat_3 x_3332 n_3320)),
  (exists_5‹??_28,U›
    nat_3
    function _3333 : nat_3 -> U
    | x_3335 => (eq_4‹??_27› nat_3 x_3335 n_3320)))
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false(
  function _3336 : nat_3 -> U
  | x_3338 => (eq_4‹??_39› nat_3 x_3338 n_3320),
  function _3339 : nat_3 -> U
  | x_3341 => (eq_4‹??_27› nat_3 x_3341 n_3320))
simpl_function(
  function _3342 : nat_3 -> U
  | x_3344 => (eq_4‹??_39› nat_3 x_3344 n_3320),
  function _3345 : nat_3 -> U
  | x_3347 => (eq_4‹??_27› nat_3 x_3347 n_3320))
simpl_tm ~expand:false( nat_3 -> U, nat_3 -> U)
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false( U, U)
simpl_tm ~expand:false( (eq_4‹??_39› nat_3 x_3352 n_3320),
  (eq_4‹??_27› nat_3 x_3352 n_3320))
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false( x_3352, x_3352)
simpl_tm ~expand:false( n_3320, n_3320)
check_cls {|
  prblm {| ;
    {|  ::: [A_3260, n_3261, vnil_11] =>?
         (ex_7‹??_31,??_32› zero_4 refl_6‹??_30›)
    |}
    {|  ::: [A_3262, n_3263, (vcons_12 _3264 _3265 tl_3266)] =>?
         match ((vlength_3183) ?_31 ?_30 #tl_3266) in
           ∀ (_3368 : ?_32) -o ?_33
         with
         | (ex_7 n_3369 pf_3370) =>
           (ex_7‹??_36,??_37›
             (succ_5‹› n_3369)
             ((congr_3‹??_33,??_34,??_35›)
               ?_39 ?_38 ?_37 ?_36
               function _3371 : ∀ (x_3372 : ?_34) -> ?_35
               | x_3373 => (succ_5‹› x_3373) pf_3370))
    |}
  |}
  a := ∀ {A_3374 : U} ->
         ∀ {n_3375 : nat_3} ->
           (vec_8‹U› A_3374 n_3375) ->
             (exists_5‹??_28,U›
               nat_3
               function _3377 : nat_3 -> U
               | x_3379 => (eq_4‹??_27› nat_3 x_3379 n_3375))
|}
case_intro
case_introed(A_3380 : U)
case_intro
case_introed(n_3381 : nat_3)
case_intro
case_introed(__3382 : (vec_8‹U› #A_3380 #n_3381))
case_splitting
splitting_on(vnil_11)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› #A_3380 #n_3381), (vec_8‹U› #A_3380 zero_4));
    {| eq_pat?( #A_3380, A_3260 : U)
       eq_pat?( #n_3381, n_3261 : nat_3) ::: [] =>?
         (ex_7‹??_31,??_32› zero_4 refl_6‹??_30›)
    |}
  |}
|}
unify_local( eq_pat?( #A_3380, A_3260 : U)
             eq_pat?( #n_3381, n_3261 : nat_3)
)
unify_global(
  eq_term?( (vec_8‹U› #A_3380 #n_3381), (vec_8‹U› #A_3380 zero_4))
)
simpl_pprbm ~expand:false( #A_3380, #A_3260)
simpl_pprbm ~expand:false( #n_3381, #n_3261)
local_map solved
simpl_pprbm ~expand:false( (vec_8‹U› #A_3380 #n_3381),
  (vec_8‹U› #A_3380 zero_4))
simpl_pprbm ~expand:false( #A_3380, #A_3380)
simpl_pprbm ~expand:false( #n_3381, zero_4)
global_map solved
case_coverage_ok( (ex_7‹??_31,??_32› zero_4 refl_6‹??_30›),
  (exists_5‹??_28,U›
    nat_3
    function _3425 : nat_3 -> U
    | x_3427 => (eq_4‹??_27› nat_3 x_3427 zero_4)))
check_tm( (ex_7‹??_31,??_32› zero_4 refl_6‹??_30›),
  (exists_5‹??_28,U›
    nat_3
    function _3428 : nat_3 -> U
    | x_3430 => (eq_4‹??_27› nat_3 x_3430 zero_4)))
infer_tm((ex_7‹??_31,??_32› zero_4 refl_6‹??_30›))
check_tm( ?_28, Type‹??_31›)
check_tm( ?_29, ?_28 -> Type‹??_32›)
check_tm( zero_4, ?_28)
infer_tm(zero_4)
assert_equal1( ?_28, nat_3)
assert_equal1_extend( ?_28, nat_3)
check_tm( refl_6‹??_30›, ((?_29) zero_4))
infer_tm(refl_6‹??_30›)
check_tm( ?_26, Type‹??_30›)
check_tm( ?_27, ?_26)
assert_equal1( ((?_29) zero_4), (eq_4‹??_30› ?_26 ?_27 ?_27))
assert_equal1_extend( ((?_29) zero_4), (eq_4‹??_30› ?_26 ?_27 ?_27))
assert_equal1(
  (exists_5‹??_28,U›
    nat_3
    function _3432 : nat_3 -> U
    | x_3434 => (eq_4‹??_27› nat_3 x_3434 zero_4)),
  (exists_5‹??_31,??_32› ?_28 ?_29))
assert_equal1_extend(
  (exists_5‹??_28,U›
    nat_3
    function _3435 : nat_3 -> U
    | x_3437 => (eq_4‹??_27› nat_3 x_3437 zero_4)),
  (exists_5‹??_31,??_32› ?_28 ?_29))
splitting_on(vcons_12)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› #A_3380 #n_3381),
      (vec_8‹U› #A_3380 (succ_5‹› #n_3438)));
    {| eq_pat?( #A_3380, A_3262 : U)
       eq_pat?( #n_3381, n_3263 : nat_3)
       eq_pat?( #n_3438, _3264 : nat_3)
       eq_pat?( #hd_3439, _3265 : #A_3380)
       eq_pat?( #tl_3440, tl_3266 : (vec_8‹U› #A_3380 #n_3438)) ::: [] =>?
         match ((vlength_3183) ?_31 ?_30 #tl_3266) in
           ∀ (_3462 : ?_32) -o ?_33
         with
         | (ex_7 n_3463 pf_3464) =>
           (ex_7‹??_36,??_37›
             (succ_5‹› n_3463)
             ((congr_3‹??_33,??_34,??_35›)
               ?_39 ?_38 ?_37 ?_36
               function _3465 : ∀ (x_3466 : ?_34) -> ?_35
               | x_3467 => (succ_5‹› x_3467) pf_3464))
    |}
  |}
|}
unify_local(
  eq_pat?( #A_3380, A_3262 : U)
  eq_pat?( #n_3381, n_3263 : nat_3)
  eq_pat?( #n_3438, _3264 : nat_3)
  eq_pat?( #hd_3439, _3265 : #A_3380)
  eq_pat?( #tl_3440, tl_3266 : (vec_8‹U› #A_3380 #n_3438))
)
unify_global(
  eq_term?( (vec_8‹U› #A_3380 #n_3381),
    (vec_8‹U› #A_3380 (succ_5‹› #n_3438)))
)
simpl_pprbm ~expand:false( #A_3380, #A_3262)
simpl_pprbm ~expand:false( #n_3381, #n_3263)
simpl_pprbm ~expand:false( #n_3438, #_3264)
simpl_pprbm ~expand:false( #hd_3439, #_3265)
simpl_pprbm ~expand:false( #tl_3440, #tl_3266)
local_map solved
simpl_pprbm ~expand:false( (vec_8‹U› #A_3380 #n_3381),
  (vec_8‹U› #A_3380 (succ_5‹› #n_3438)))
simpl_pprbm ~expand:false( #A_3380, #A_3380)
simpl_pprbm ~expand:false( #n_3381, (succ_5‹› #n_3438))
global_map solved
case_coverage_ok(
  match ((vlength_3183) ?_31 ?_30 tl_3440) in ∀ (_3496 : ?_32) -o ?_33 with
  | (ex_7 n_3497 pf_3498) =>
    (ex_7‹??_36,??_37›
      (succ_5‹› n_3497)
      ((congr_3‹??_33,??_34,??_35›)
        ?_39 ?_38 ?_37 ?_36
        function _3499 : ∀ (x_3500 : ?_34) -> ?_35
        | x_3501 => (succ_5‹› x_3501) pf_3498)),
  (exists_5‹??_28,U›
    nat_3
    function _3502 : nat_3 -> U
    | x_3504 => (eq_4‹??_27› nat_3 x_3504 (succ_5‹› n_3438))))
check_tm(
  match ((vlength_3183) ?_31 ?_30 tl_3440) in ∀ (_3505 : ?_32) -o ?_33 with
  | (ex_7 n_3506 pf_3507) =>
    (ex_7‹??_36,??_37›
      (succ_5‹› n_3506)
      ((congr_3‹??_33,??_34,??_35›)
        ?_39 ?_38 ?_37 ?_36
        function _3508 : ∀ (x_3509 : ?_34) -> ?_35
        | x_3510 => (succ_5‹› x_3510) pf_3507)),
  (exists_5‹??_28,U›
    nat_3
    function _3511 : nat_3 -> U
    | x_3513 => (eq_4‹??_27› nat_3 x_3513 (succ_5‹› n_3438))))
infer_tm(match ((vlength_3183) ?_31 ?_30 tl_3440) in
           ∀ (_3514 : ?_32) -o ?_33
         with
         | (ex_7 n_3515 pf_3516) =>
           (ex_7‹??_36,??_37›
             (succ_5‹› n_3515)
             ((congr_3‹??_33,??_34,??_35›)
               ?_39 ?_38 ?_37 ?_36
               function _3517 : ∀ (x_3518 : ?_34) -> ?_35
               | x_3519 => (succ_5‹› x_3519) pf_3516)))
infer_motive(((vlength_3183) ?_31 ?_30 tl_3440) : ?_32 : ?_32)
infer_tm(?_32)
simpl_tm ~expand:false(
  (exists_5‹??_28,U›
    nat_3
    function _3524 : nat_3 -> U
    | x_3526 => (eq_4‹??_27› nat_3 x_3526 zero_4)),
  (exists_5‹??_31,??_32› ?_28 ?_29))
simpl_tm ~expand:false( nat_3, ?_28)
simpl_tm ~expand:false(
  function _3527 : nat_3 -> U
  | x_3529 => (eq_4‹??_27› nat_3 x_3529 zero_4), ?_29)
simpl_tm ~expand:false( nat_3, ?_28)
simpl_tm ~expand:false(
  function _3533 : nat_3 -> U
  | x_3535 => (eq_4‹??_27› nat_3 x_3535 zero_4), ?_29)
simpl_tm ~expand:false( (eq_4‹??_27› nat_3 zero_4 zero_4),
  (eq_4‹??_30› ?_26 ?_27 ?_27))
simpl_tm ~expand:false( nat_3, ?_26)
simpl_tm ~expand:false( zero_4, ?_27)
simpl_tm ~expand:false( zero_4, ?_27)
simpl_tm ~expand:false( nat_3, ?_26)
simpl_tm ~expand:false( zero_4, ?_27)
simpl_tm ~expand:false( zero_4, zero_4)
simpl_tm ~expand:false( nat_3, nat_3)
delay_assert(?_71, ??_56)
infer_tm(?_32)
simpl_tm ~expand:false( ?_71, Type‹??_56›)
check_tm( ((vlength_3183) ?_31 ?_30 tl_3440), ?_32)
infer_tm(((vlength_3183) ?_31 ?_30 tl_3440))
infer_tm(((vlength_3183) ?_31 ?_30))
infer_tm(((vlength_3183) ?_31))
infer_tm(vlength_3183)
check_tm( ?_31, U)
check_tm( ?_30, nat_3)
check_tm( tl_3440, (vec_8‹U› ?_31 ?_30))
infer_tm(tl_3440)
assert_equal1( (vec_8‹U› ?_31 ?_30), (vec_8‹U› A_3380 n_3438))
assert_equal1_extend( (vec_8‹U› ?_31 ?_30), (vec_8‹U› A_3380 n_3438))
assert_equal1( ?_32,
  (exists_5‹??_28,U›
    nat_3
    function _3573 : nat_3 -> U
    | x_3575 => (eq_4‹??_27› nat_3 x_3575 ?_30)))
assert_equal1_extend( ?_32,
  (exists_5‹??_28,U›
    nat_3
    function _3576 : nat_3 -> U
    | x_3578 => (eq_4‹??_27› nat_3 x_3578 ?_30)))
infer_tm(?_33)
simpl_tm ~expand:false( ?_32,
  (exists_5‹??_28,U›
    nat_3
    function _3582 : nat_3 -> U
    | x_3584 => (eq_4‹??_27› nat_3 x_3584 ?_30)))
simpl_tm ~expand:false( (vec_8‹U› ?_31 ?_30),
  (vec_8‹U› A_3380 n_3438))
simpl_tm ~expand:false( ?_31, A_3380)
simpl_tm ~expand:false( ?_30, n_3438)
simpl_tm ~expand:false( n_3438, ?_30)
delay_assert(?_72, ??_57)
infer_tm(?_33)
simpl_tm ~expand:false( ?_72, Type‹??_57›)
check_cls {|
  prblm {| ;
    {|  ::: [(ex_7 n_3590 pf_3591)] =>?
         (ex_7‹??_36,??_37›
           (succ_5‹› #n_3590)
           ((congr_3‹??_33,??_34,??_35›)
             ?_39 ?_38 ?_37 ?_36
             function _3596 : ∀ (x_3597 : ?_34) -> ?_35
             | x_3598 => (succ_5‹› x_3598) #pf_3591))
    |}
  |}
  a := ∀ (_3599 :
         (exists_5‹??_28,U›
           nat_3
           function _3600 : nat_3 -> U
           | x_3602 => (eq_4‹??_27› nat_3 x_3602 n_3438))) -o
         ?_33
|}
case_intro
case_introed(_3603 : (exists_5‹??_28,U›
                       nat_3
                       function _3604 : nat_3 -> U
                       | x_3606 => (eq_4‹??_27› nat_3 x_3606 n_3438)))
case_splitting
splitting_on(ex_7)
case_coverage{|
  prblm {|
    eq_term?(
      (exists_5‹??_28,U›
        nat_3
        function _3642 : nat_3 -> U
        | x_3644 => (eq_4‹??_27› nat_3 x_3644 n_3438)),
      (exists_5‹??_28,U›
        nat_3
        function _3645 : nat_3 -> U
        | x_3647 => (eq_4‹??_27› nat_3 x_3647 n_3438)));
    {| eq_pat?( #m_3607, n_3590 : nat_3)
       eq_pat?( #pf_3608, pf_3591 : (eq_4‹??_27› nat_3 #m_3607 n_3438)) ::: [] =>?
         (ex_7‹??_36,??_37›
           (succ_5‹› #n_3590)
           ((congr_3‹??_33,??_34,??_35›)
             ?_39 ?_38 ?_37 ?_36
             function _3648 : ∀ (x_3649 : ?_34) -> ?_35
             | x_3650 => (succ_5‹› x_3650) #pf_3591))
    |}
  |}
|}
unify_local(
  eq_pat?( #m_3607, n_3590 : nat_3)
  eq_pat?( #pf_3608, pf_3591 : (eq_4‹??_27› nat_3 #m_3607 n_3438))
)
unify_global(
  eq_term?(
    (exists_5‹??_28,U›
      nat_3
      function _3651 : nat_3 -> U
      | x_3653 => (eq_4‹??_27› nat_3 x_3653 n_3438)),
    (exists_5‹??_28,U›
      nat_3
      function _3654 : nat_3 -> U
      | x_3656 => (eq_4‹??_27› nat_3 x_3656 n_3438)))
)
simpl_pprbm ~expand:false( #m_3607, #n_3590)
simpl_pprbm ~expand:false( #pf_3608, #pf_3591)
local_map solved
simpl_pprbm ~expand:false(
  (exists_5‹??_28,U›
    nat_3
    function _3663 : nat_3 -> U
    | x_3665 => (eq_4‹??_27› nat_3 x_3665 n_3438)),
  (exists_5‹??_28,U›
    nat_3
    function _3666 : nat_3 -> U
    | x_3668 => (eq_4‹??_27› nat_3 x_3668 n_3438)))
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false(
  function _3669 : nat_3 -> U
  | x_3671 => (eq_4‹??_27› nat_3 x_3671 n_3438),
  function _3672 : nat_3 -> U
  | x_3674 => (eq_4‹??_27› nat_3 x_3674 n_3438))
simpl_pprbm ~expand:false( nat_3 -> U, nat_3 -> U)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( U, U)
simpl_pprbm ~expand:false( (eq_4‹??_27› nat_3 x_3679 n_3438),
  (eq_4‹??_27› nat_3 x_3679 n_3438))
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( x_3679, x_3679)
simpl_pprbm ~expand:false( n_3438, n_3438)
global_map solved
case_coverage_ok(
  (ex_7‹??_36,??_37›
    (succ_5‹› m_3607)
    ((congr_3‹??_33,??_34,??_35›)
      ?_39 ?_38 ?_37 ?_36
      function _3710 : ∀ (x_3711 : ?_34) -> ?_35
      | x_3712 => (succ_5‹› x_3712) pf_3608)),
  ?_33)
check_tm(
  (ex_7‹??_36,??_37›
    (succ_5‹› m_3607)
    ((congr_3‹??_33,??_34,??_35›)
      ?_39 ?_38 ?_37 ?_36
      function _3713 : ∀ (x_3714 : ?_34) -> ?_35
      | x_3715 => (succ_5‹› x_3715) pf_3608)),
  ?_33)
infer_tm((ex_7‹??_36,??_37›
           (succ_5‹› m_3607)
           ((congr_3‹??_33,??_34,??_35›)
             ?_39 ?_38 ?_37 ?_36
             function _3716 : ∀ (x_3717 : ?_34) -> ?_35
             | x_3718 => (succ_5‹› x_3718) pf_3608)))
check_tm( ?_40, Type‹??_36›)
check_tm( ?_41, ?_40 -> Type‹??_37›)
check_tm( (succ_5‹› m_3607), ?_40)
infer_tm((succ_5‹› m_3607))
check_tm( m_3607, nat_3)
infer_tm(m_3607)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( ?_40, nat_3)
assert_equal1_extend( ?_40, nat_3)
check_tm(
  ((congr_3‹??_33,??_34,??_35›)
    ?_39 ?_38 ?_37 ?_36
    function _3720 : ∀ (x_3721 : ?_34) -> ?_35
    | x_3722 => (succ_5‹› x_3722) pf_3608),
  ((?_41) (succ_5‹› m_3607)))
infer_tm(((congr_3‹??_33,??_34,??_35›)
           ?_39 ?_38 ?_37 ?_36
           function _3723 : ∀ (x_3724 : ?_34) -> ?_35
           | x_3725 => (succ_5‹› x_3725) pf_3608))
infer_tm(((congr_3‹??_33,??_34,??_35›)
           ?_39 ?_38 ?_37 ?_36
           function _3726 : ∀ (x_3727 : ?_34) -> ?_35
           | x_3728 => (succ_5‹› x_3728)))
infer_tm(((congr_3‹??_33,??_34,??_35›) ?_39 ?_38 ?_37 ?_36))
infer_tm(((congr_3‹??_33,??_34,??_35›) ?_39 ?_38 ?_37))
infer_tm(((congr_3‹??_33,??_34,??_35›) ?_39 ?_38))
infer_tm(((congr_3‹??_33,??_34,??_35›) ?_39))
infer_tm(congr_3‹??_33,??_34,??_35›)
simpl_tm ~expand:false( ?_40, nat_3)
check_tm( ?_39, Type‹??_33›)
check_tm( ?_38, Type‹??_34›)
check_tm( ?_37, ?_39)
check_tm( ?_36, ?_39)
check_tm(
  function _3799 : ∀ (x_3800 : ?_34) -> ?_35
  | x_3801 => (succ_5‹› x_3801), forall‹??_35›(__3802 : ?_39), ?_38)
infer_tm(∀ (x_3804 : ?_34) -> ?_35)
infer_tm(?_34)
delay_assert(?_73, ??_58)
infer_tm(?_35)
simpl_tm ~expand:false( ?_73, Type‹??_58›)
delay_assert(?_74, ??_59)
simpl_tm ~expand:false( ?_74, Type‹??_59›)
assert_equal1( forall‹??_35›(__3806 : ?_39), ?_38,
  ∀ (x_3807 : ?_34) -> ?_35)
assert_equal1_extend( forall‹??_35›(__3808 : ?_39), ?_38,
  ∀ (x_3809 : ?_34) -> ?_35)
simpl_tm ~expand:false( forall‹??_35›(__3813 : ?_39), ?_38,
  ∀ (x_3814 : ?_34) -> ?_35)
simpl_tm ~expand:false( ?_39, ?_34)
simpl_tm ~expand:false( ?_38, ?_35)
simpl_tm ~expand:false( ?_34, ?_39)
simpl_tm ~expand:false( ?_35, ?_38)
check_cls {|
  prblm {| ; {|  ::: [x_3810] =>? (succ_5‹› #x_3810) |} |}
  a := ?_34 -> ?_35
|}
case_intro
case_introed(__3818 : ?_34)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__3818, x_3810 : ?_34) ::: [] =>? (succ_5‹› #x_3810) |}
  |}
|}
unify_local( eq_pat?( #__3818, x_3810 : ?_34) )
unify_global(  )
simpl_pprbm ~expand:false( #__3818, #x_3810)
local_map solved
global_map solved
case_coverage_ok( (succ_5‹› __3818), ?_35)
check_tm( (succ_5‹› __3818), ?_35)
infer_tm((succ_5‹› __3818))
check_tm( __3818, nat_3)
infer_tm(__3818)
assert_equal1( nat_3, ?_34)
assert_equal1_extend( nat_3, ?_34)
assert_equal1( ?_35, nat_3)
assert_equal1_extend( ?_35, nat_3)
simpl_tm ~expand:false( ?_35, nat_3)
simpl_tm ~expand:false( nat_3, ?_34)
check_tm( pf_3608, (eq_4‹??_33› nat_3 ?_37 ?_36))
infer_tm(pf_3608)
assert_equal1( (eq_4‹??_33› nat_3 ?_37 ?_36),
  ((function _3851 : nat_3 -> U
    | x_3853 => (eq_4‹??_27› nat_3 x_3853 n_3438)) m_3607))
assert_equal1_extend( (eq_4‹??_33› nat_3 ?_37 ?_36),
  ((function _3854 : nat_3 -> U
    | x_3856 => (eq_4‹??_27› nat_3 x_3856 n_3438)) m_3607))
assert_equal1( ((?_41) (succ_5‹› m_3607)),
  (eq_4‹??_34›
    nat_3
    ((function _3857 : nat_3 -> nat_3
      | x_3859 => (succ_5‹› x_3859)) ?_37)
    ((function _3860 : nat_3 -> nat_3
      | x_3862 => (succ_5‹› x_3862)) ?_36)))
assert_equal1_extend( ((?_41) (succ_5‹› m_3607)),
  (eq_4‹??_34›
    nat_3
    ((function _3863 : nat_3 -> nat_3
      | x_3865 => (succ_5‹› x_3865)) ?_37)
    ((function _3866 : nat_3 -> nat_3
      | x_3868 => (succ_5‹› x_3868)) ?_36)))
assert_equal1( ?_33, (exists_5‹??_36,??_37› ?_40 ?_41))
assert_equal1_extend( ?_33, (exists_5‹??_36,??_37› ?_40 ?_41))
assert_equal1(
  (exists_5‹??_28,U›
    nat_3
    function _3869 : nat_3 -> U
    | x_3871 => (eq_4‹??_27› nat_3 x_3871 (succ_5‹› n_3438))),
  ?_33)
assert_equal1_extend(
  (exists_5‹??_28,U›
    nat_3
    function _3872 : nat_3 -> U
    | x_3874 => (eq_4‹??_27› nat_3 x_3874 (succ_5‹› n_3438))),
  ?_33)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_3875
    ??_2 <= s_3877
    ??_3 <= r_3878
    ??_4 <= s_3880
    ??_5 <= s_3881
    ??_6 <= s_3882
    ??_7 <= s_3883
    ??_8 <= s_3884
    ??_9 <= s_3885
    ??_10 <= s_3887
    ??_11 <= ??_10
    ??_12 <= s_3891
    ??_13 <= ??_12
    ??_14 <= s_3896
    ??_15 <= r_3898
    ??_16 <= ??_15
    ??_17 <= ??_14
    ??_18 <= ??_15
    ??_19 <= U
    ??_20 <= U
    ??_21 <= U
    ??_22 <= U
    ??_23 <= U
    ??_24 <= U
    ??_25 <= U
    ??_26 <= U
    ??_29 <= U
    ??_30 <= ??_27
    ??_31 <= ??_28
    ??_32 <= U
    ??_35 <= U
    ??_38 <= U
    ??_39 <= ??_27
    ??_40 <= ??_28
    ??_41 <= U
    ??_44 <= U
    ??_45 <= U
    ??_46 <= U
    ??_47 <= U
    ??_48 <= U
    ??_49 <= U
    ??_50 <= U
    ??_51 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_3911
    ?_2 <= A_3914
    ?_3 <= A_3920
    ?_4 <= A_3926
    ?_5 <= A_3932
    ?_6 <= A_3938
    ?_7 <= A_3946
    ?_8 <= B_3954
    ?_9 <= B_3962
    ?_10 <= ((f_3968) n_3969)
    ?_11 <= A_3981
    ?_12 <= B_3989
    ?_13 <= A_3993
    ?_14 <= n_3995
    ?_15 <= nat_3
    ?_16 <= ?_13
    ?_17 <= ?_13
    ?_18 <= A_4013
    ?_19 <= (vec_8‹U› A_4016 (succ_5‹› n_4015))
    ?_20 <= ?_18
    ?_21 <= ?_18
    ?_22 <= nat_3
    ?_23 <= Type‹??_29›
    ?_24 <= nat_3
    ?_25 <= ?_22
    ?_26 <= nat_3
    ?_27 <= zero_4
    ?_28 <= nat_3
    ?_29 <= function _4052 : nat_3 -> U
            | x_4054 => (eq_4‹??_27› nat_3 x_4054 zero_4)
    ?_30 <= n_4057
    ?_31 <= A_4065
    ?_32 <= (exists_5‹??_28,U›
              nat_3
              function _4073 : nat_3 -> U
              | x_4075 => (eq_4‹??_27› nat_3 x_4075 ?_30))
    ?_34 <= nat_3
    ?_35 <= nat_3
    ?_38 <= ?_35
    ?_39 <= ?_34
    ?_40 <= nat_3
    ?_42 <= nat_3
    ?_43 <= Type‹??_41›
    ?_44 <= nat_3
    ?_45 <= ?_42
    ?_59 <= Type‹??_44›
    ?_60 <= Type‹??_45›
    ?_61 <= Type‹??_46›
    ?_62 <= Type‹??_47›
    ?_63 <= Type‹??_48›
    ?_64 <= Type‹??_49›
    ?_65 <= Type‹??_50›
    ?_66 <= Type‹??_51›
    ?_67 <= Type‹??_52›
    ?_68 <= Type‹??_53›
    ?_69 <= Type‹??_54›
    ?_70 <= Type‹??_55›
    ?_71 <= Type‹??_56›
    ?_72 <= Type‹??_57›
    ?_73 <= Type‹??_58›
    ?_74 <= Type‹??_59›
    
  |}
  eqns {|
    equal_tm?
      ((exists_5‹??_28,U›
         nat_3
         function _4212 : nat_3 -> U
         | x_4214 => (eq_4‹??_27› nat_3 x_4214 (succ_5‹› n_3438))),
      ?_33);
    equal_tm? (?_33, (exists_5‹??_36,??_37› ?_40 ?_41));
    equal_tm? (((?_41) (succ_5‹› m_3607)),
      (eq_4‹??_34›
        nat_3
        ((function _4215 : nat_3 -> nat_3
          | x_4217 => (succ_5‹› x_4217)) ?_37)
        ((function _4218 : nat_3 -> nat_3
          | x_4220 => (succ_5‹› x_4220)) ?_36)));
    equal_tm? ((eq_4‹??_33› nat_3 ?_37 ?_36),
      ((function _4221 : nat_3 -> U
        | x_4223 => (eq_4‹??_27› nat_3 x_4223 n_3438)) m_3607))
  |}
end_dump
simpl_tm ~expand:false(
  (exists_5‹??_28,U›
    nat_3
    function _4227 : nat_3 -> U
    | x_4229 => (eq_4‹??_27› nat_3 x_4229 (succ_5‹› n_3438))),
  ?_33)
simpl_tm ~expand:false(
  (exists_5‹??_28,U›
    nat_3
    function _4239 : nat_3 -> U
    | x_4241 => (eq_4‹??_27› nat_3 x_4241 (succ_5‹› n_3438))),
  (exists_5‹??_36,??_37› nat_3 ?_41))
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false(
  function _4242 : nat_3 -> U
  | x_4244 => (eq_4‹??_27› nat_3 x_4244 (succ_5‹› n_3438)), ?_41)
simpl_tm ~expand:false(
  function _4248 : nat_3 -> U
  | x_4250 => (eq_4‹??_27› nat_3 x_4250 (succ_5‹› n_3438)), ?_41)
simpl_tm ~expand:false(
  (eq_4‹??_27› nat_3 (succ_5‹› m_3607) (succ_5‹› n_3438)),
  (eq_4‹??_34›
    nat_3
    ((function _4265 : nat_3 -> nat_3
      | x_4267 => (succ_5‹› x_4267)) ?_37)
    ((function _4268 : nat_3 -> nat_3
      | x_4270 => (succ_5‹› x_4270)) ?_36)))
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false( (succ_5‹› m_3607), (succ_5‹› ?_37))
simpl_tm ~expand:false( m_3607, ?_37)
simpl_tm ~expand:false( (succ_5‹› n_3438), (succ_5‹› ?_36))
simpl_tm ~expand:false( n_3438, ?_36)
simpl_tm ~expand:false( m_3607, ?_37)
simpl_tm ~expand:false( n_3438, ?_36)
simpl_tm ~expand:false( (eq_4‹??_33› nat_3 m_3607 n_3438),
  (eq_4‹??_27› nat_3 m_3607 n_3438))
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false( m_3607, m_3607)
simpl_tm ~expand:false( n_3438, n_3438)
infer_tm(Type‹??_54›)
check_tm( nat_3, Type‹??_54›)
infer_tm(nat_3)
assert_equal1( Type‹??_54›, U)
assert_equal1_extend( Type‹??_54›, U)
simpl_tm ~expand:false( Type‹??_54›, U)
infer_tm(Type‹??_55›)
check_tm( U, Type‹??_55›)
infer_tm(U)
assert_equal1( Type‹??_55›, U)
assert_equal1_extend( Type‹??_55›, U)
simpl_tm ~expand:false( Type‹??_55›, U)
infer_tm(Type‹??_27›)
check_tm( nat_3, Type‹??_27›)
infer_tm(nat_3)
assert_equal1( Type‹??_27›, U)
assert_equal1_extend( Type‹??_27›, U)
simpl_tm ~expand:false( Type‹??_27›, U)
infer_tm(Type‹??_28›)
check_tm( nat_3, Type‹??_28›)
infer_tm(nat_3)
assert_equal1( Type‹??_28›, U)
assert_equal1_extend( Type‹??_28›, U)
simpl_tm ~expand:false( Type‹??_28›, U)
infer_tm(U)
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(nat_3)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
infer_tm(U)
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(nat_3 -> U)
infer_tm(nat_3)
infer_tm(U)
check_tm(
  function _4341 : nat_3 -> U
  | x_4343 => (eq_4‹U› nat_3 x_4343 zero_4), nat_3 -> U)
infer_tm(nat_3 -> U)
infer_tm(nat_3)
infer_tm(U)
assert_equal1( nat_3 -> U, nat_3 -> U)
assert_equal1_ok( nat_3 -> U, nat_3 -> U)
check_cls {|
  prblm {| ; {|  ::: [x_4353] =>? (eq_4‹U› nat_3 #x_4353 zero_4) |} |}
  a := nat_3 -> U
|}
case_intro
case_introed(__4356 : nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__4356, x_4353 : nat_3) ::: [] =>?
         (eq_4‹U› nat_3 #x_4353 zero_4)
    |}
  |}
|}
unify_local( eq_pat?( #__4356, x_4353 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #__4356, #x_4353)
local_map solved
global_map solved
case_coverage_ok( (eq_4‹U› nat_3 __4356 zero_4), U)
check_tm( (eq_4‹U› nat_3 __4356 zero_4), U)
infer_tm((eq_4‹U› nat_3 __4356 zero_4))
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( __4356, nat_3)
infer_tm(__4356)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(nat_3)
check_tm( n_3438, nat_3)
infer_tm(n_3438)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
infer_tm(U)
check_tm( A_3380, U)
infer_tm(A_3380)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(Type‹??_56›)
check_tm(
  (exists_5‹U,U›
    nat_3
    function _4421 : nat_3 -> U
    | x_4423 => (eq_4‹U› nat_3 x_4423 n_3438)),
  Type‹??_56›)
infer_tm((exists_5‹U,U›
           nat_3
           function _4424 : nat_3 -> U
           | x_4426 => (eq_4‹U› nat_3 x_4426 n_3438)))
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm(
  function _4427 : nat_3 -> U
  | x_4429 => (eq_4‹U› nat_3 x_4429 n_3438), nat_3 -> U)
infer_tm(nat_3 -> U)
infer_tm(nat_3)
infer_tm(U)
assert_equal1( nat_3 -> U, nat_3 -> U)
assert_equal1_ok( nat_3 -> U, nat_3 -> U)
check_cls {|
  prblm {| ; {|  ::: [x_4439] =>? (eq_4‹U› nat_3 #x_4439 n_3438) |} |}
  a := nat_3 -> U
|}
case_intro
case_introed(__4442 : nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__4442, x_4439 : nat_3) ::: [] =>?
         (eq_4‹U› nat_3 #x_4439 n_3438)
    |}
  |}
|}
unify_local( eq_pat?( #__4442, x_4439 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #__4442, #x_4439)
local_map solved
global_map solved
case_coverage_ok( (eq_4‹U› nat_3 __4442 n_3438), U)
check_tm( (eq_4‹U› nat_3 __4442 n_3438), U)
infer_tm((eq_4‹U› nat_3 __4442 n_3438))
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( __4442, nat_3)
infer_tm(__4442)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
check_tm( n_3438, nat_3)
infer_tm(n_3438)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( Type‹??_56›, U)
assert_equal1_extend( Type‹??_56›, U)
simpl_tm ~expand:false( Type‹??_56›, U)
infer_tm(Type‹??_57›)
check_tm(
  (exists_5‹U,U›
    nat_3
    function _4480 : nat_3 -> U
    | x_4482 => (eq_4‹U› nat_3 x_4482 (succ_5‹› n_3438))),
  Type‹??_57›)
infer_tm((exists_5‹U,U›
           nat_3
           function _4483 : nat_3 -> U
           | x_4485 => (eq_4‹U› nat_3 x_4485 (succ_5‹› n_3438))))
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm(
  function _4486 : nat_3 -> U
  | x_4488 => (eq_4‹U› nat_3 x_4488 (succ_5‹› n_3438)), nat_3 -> U)
infer_tm(nat_3 -> U)
infer_tm(nat_3)
infer_tm(U)
assert_equal1( nat_3 -> U, nat_3 -> U)
assert_equal1_ok( nat_3 -> U, nat_3 -> U)
check_cls {|
  prblm {| ;
    {|  ::: [x_4498] =>? (eq_4‹U› nat_3 #x_4498 (succ_5‹› n_3438)) |}
  |}
  a := nat_3 -> U
|}
case_intro
case_introed(__4501 : nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__4501, x_4498 : nat_3) ::: [] =>?
         (eq_4‹U› nat_3 #x_4498 (succ_5‹› n_3438))
    |}
  |}
|}
unify_local( eq_pat?( #__4501, x_4498 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #__4501, #x_4498)
local_map solved
global_map solved
case_coverage_ok( (eq_4‹U› nat_3 __4501 (succ_5‹› n_3438)), U)
check_tm( (eq_4‹U› nat_3 __4501 (succ_5‹› n_3438)), U)
infer_tm((eq_4‹U› nat_3 __4501 (succ_5‹› n_3438)))
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( __4501, nat_3)
infer_tm(__4501)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
check_tm( (succ_5‹› n_3438), nat_3)
infer_tm((succ_5‹› n_3438))
check_tm( n_3438, nat_3)
infer_tm(n_3438)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( Type‹??_57›, U)
assert_equal1_extend( Type‹??_57›, U)
simpl_tm ~expand:false( Type‹??_57›, U)
infer_tm(Type‹??_58›)
check_tm( nat_3, Type‹??_58›)
infer_tm(nat_3)
assert_equal1( Type‹??_58›, U)
assert_equal1_extend( Type‹??_58›, U)
simpl_tm ~expand:false( Type‹??_58›, U)
infer_tm(Type‹??_59›)
check_tm( nat_3, Type‹??_59›)
infer_tm(nat_3)
assert_equal1( Type‹??_59›, U)
assert_equal1_extend( Type‹??_59›, U)
simpl_tm ~expand:false( Type‹??_59›, U)
infer_tm(nat_3)
check_tm( n_3438, nat_3)
infer_tm(n_3438)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
infer_tm(nat_3)
check_tm( m_3607, nat_3)
infer_tm(m_3607)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
infer_tm(U)
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(U)
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(U)
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(nat_3 -> U)
infer_tm(nat_3)
infer_tm(U)
check_tm(
  function _4695 : nat_3 -> U
  | x_4697 => (eq_4‹U› nat_3 x_4697 (succ_5‹› n_3438)), nat_3 -> U)
infer_tm(nat_3 -> U)
infer_tm(nat_3)
infer_tm(U)
assert_equal1( nat_3 -> U, nat_3 -> U)
assert_equal1_ok( nat_3 -> U, nat_3 -> U)
check_cls {|
  prblm {| ;
    {|  ::: [x_4707] =>? (eq_4‹U› nat_3 #x_4707 (succ_5‹› n_3438)) |}
  |}
  a := nat_3 -> U
|}
case_intro
case_introed(__4710 : nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__4710, x_4707 : nat_3) ::: [] =>?
         (eq_4‹U› nat_3 #x_4707 (succ_5‹› n_3438))
    |}
  |}
|}
unify_local( eq_pat?( #__4710, x_4707 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #__4710, #x_4707)
local_map solved
global_map solved
case_coverage_ok( (eq_4‹U› nat_3 __4710 (succ_5‹› n_3438)), U)
check_tm( (eq_4‹U› nat_3 __4710 (succ_5‹› n_3438)), U)
infer_tm((eq_4‹U› nat_3 __4710 (succ_5‹› n_3438)))
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( __4710, nat_3)
infer_tm(__4710)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
check_tm( (succ_5‹› n_3438), nat_3)
infer_tm((succ_5‹› n_3438))
check_tm( n_3438, nat_3)
infer_tm(n_3438)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(Type‹??_52›)
check_tm( nat_3, Type‹??_52›)
infer_tm(nat_3)
assert_equal1( Type‹??_52›, U)
assert_equal1_extend( Type‹??_52›, U)
simpl_tm ~expand:false( Type‹??_52›, U)
infer_tm(Type‹??_53›)
check_tm( U, Type‹??_53›)
infer_tm(U)
assert_equal1( Type‹??_53›, U)
assert_equal1_extend( Type‹??_53›, U)
simpl_tm ~expand:false( Type‹??_53›, U)
infer_tm(U)
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(U)
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
----------------------------------

definition-------------------------
infer_tm(?_49)
delay_assert(?_75, ??_60)
check_tm( (vcons_12‹??_43› ?_47 zero_4 vnil_11‹??_42›), ?_49)
infer_tm((vcons_12‹??_43› ?_47 zero_4 vnil_11‹??_42›))
check_tm( ?_48, Type‹??_43›)
check_tm( ?_47, nat_3)
check_tm( zero_4, ?_48)
infer_tm(zero_4)
assert_equal1( ?_48, nat_3)
assert_equal1_extend( ?_48, nat_3)
check_tm( vnil_11‹??_42›, (vec_8‹??_43› ?_48 ?_47))
infer_tm(vnil_11‹??_42›)
check_tm( ?_46, Type‹??_42›)
assert_equal1( (vec_8‹??_43› ?_48 ?_47), (vec_8‹??_42› ?_46 zero_4))
assert_equal1_extend( (vec_8‹??_43› ?_48 ?_47),
  (vec_8‹??_42› ?_46 zero_4))
assert_equal1( ?_49, (vec_8‹??_43› ?_48 (succ_5‹› ?_47)))
assert_equal1_extend( ?_49, (vec_8‹??_43› ?_48 (succ_5‹› ?_47)))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_4803
    ??_2 <= s_4805
    ??_3 <= r_4806
    ??_4 <= s_4808
    ??_5 <= s_4809
    ??_6 <= s_4810
    ??_7 <= s_4811
    ??_8 <= s_4812
    ??_9 <= s_4813
    ??_10 <= s_4815
    ??_11 <= ??_10
    ??_12 <= s_4819
    ??_13 <= ??_12
    ??_14 <= s_4824
    ??_15 <= r_4826
    ??_16 <= ??_15
    ??_17 <= ??_14
    ??_18 <= ??_15
    ??_19 <= U
    ??_20 <= U
    ??_21 <= U
    ??_22 <= U
    ??_23 <= U
    ??_24 <= U
    ??_25 <= U
    ??_26 <= U
    ??_27 <= U
    ??_28 <= U
    ??_29 <= U
    ??_30 <= ??_27
    ??_31 <= ??_28
    ??_32 <= U
    ??_33 <= ??_27
    ??_34 <= ??_27
    ??_35 <= U
    ??_36 <= ??_28
    ??_37 <= U
    ??_38 <= U
    ??_39 <= ??_27
    ??_40 <= ??_28
    ??_41 <= U
    ??_44 <= U
    ??_45 <= U
    ??_46 <= U
    ??_47 <= U
    ??_48 <= U
    ??_49 <= U
    ??_50 <= U
    ??_51 <= U
    ??_52 <= U
    ??_53 <= U
    ??_54 <= U
    ??_55 <= U
    ??_56 <= U
    ??_57 <= U
    ??_58 <= U
    ??_59 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_4839
    ?_2 <= A_4842
    ?_3 <= A_4848
    ?_4 <= A_4854
    ?_5 <= A_4860
    ?_6 <= A_4866
    ?_7 <= A_4874
    ?_8 <= B_4882
    ?_9 <= B_4890
    ?_10 <= ((f_4896) n_4897)
    ?_11 <= A_4909
    ?_12 <= B_4917
    ?_13 <= A_4921
    ?_14 <= n_4923
    ?_15 <= nat_3
    ?_16 <= ?_13
    ?_17 <= ?_13
    ?_18 <= A_4941
    ?_19 <= (vec_8‹U› A_4944 (succ_5‹› n_4943))
    ?_20 <= ?_18
    ?_21 <= ?_18
    ?_22 <= nat_3
    ?_23 <= Type‹??_29›
    ?_24 <= nat_3
    ?_25 <= ?_22
    ?_26 <= nat_3
    ?_27 <= zero_4
    ?_28 <= nat_3
    ?_29 <= function _4980 : nat_3 -> U
            | x_4982 => (eq_4‹??_27› nat_3 x_4982 zero_4)
    ?_30 <= n_4985
    ?_31 <= A_4993
    ?_32 <= (exists_5‹??_28,U›
              nat_3
              function _5001 : nat_3 -> U
              | x_5003 => (eq_4‹??_27› nat_3 x_5003 ?_30))
    ?_33 <= (exists_5‹??_28,U›
              nat_3
              function _5011 : nat_3 -> U
              | x_5013 =>
                (eq_4‹??_27› nat_3 x_5013 (succ_5‹› n_5007)))
    ?_34 <= nat_3
    ?_35 <= nat_3
    ?_36 <= n_5035
    ?_37 <= m_5040
    ?_38 <= ?_35
    ?_39 <= ?_34
    ?_40 <= nat_3
    ?_41 <= function _5079 : nat_3 -> U
            | x_5081 => (eq_4‹??_27› nat_3 x_5081 (succ_5‹› n_5075))
    ?_42 <= nat_3
    ?_43 <= Type‹??_41›
    ?_44 <= nat_3
    ?_45 <= ?_42
    ?_59 <= Type‹??_44›
    ?_60 <= Type‹??_45›
    ?_61 <= Type‹??_46›
    ?_62 <= Type‹??_47›
    ?_63 <= Type‹??_48›
    ?_64 <= Type‹??_49›
    ?_65 <= Type‹??_50›
    ?_66 <= Type‹??_51›
    ?_67 <= Type‹??_52›
    ?_68 <= Type‹??_53›
    ?_69 <= Type‹??_54›
    ?_70 <= Type‹??_55›
    ?_71 <= Type‹??_56›
    ?_72 <= Type‹??_57›
    ?_73 <= Type‹??_58›
    ?_74 <= Type‹??_59›
    
  |}
  eqns {|
    equal_tm? (?_49, (vec_8‹??_43› ?_48 (succ_5‹› ?_47)));
    equal_tm? ((vec_8‹??_43› ?_48 ?_47), (vec_8‹??_42› ?_46 zero_4));
    equal_tm? (?_48, nat_3);
    equal_tm? (?_75, Type‹??_60›)
  |}
end_dump
simpl_tm ~expand:false( ?_49, (vec_8‹??_43› ?_48 (succ_5‹› ?_47)))
simpl_tm ~expand:false( (vec_8‹??_43› ?_48 ?_47),
  (vec_8‹??_42› ?_46 zero_4))
simpl_tm ~expand:false( ?_48, ?_46)
simpl_tm ~expand:false( ?_47, zero_4)
simpl_tm ~expand:false( ?_46, ?_48)
simpl_tm ~expand:false( zero_4, ?_47)
simpl_tm ~expand:false( ?_46, nat_3)
simpl_tm ~expand:false( ?_75, Type‹??_60›)
infer_tm(Type‹??_42›)
check_tm( nat_3, Type‹??_42›)
infer_tm(nat_3)
assert_equal1( Type‹??_42›, U)
assert_equal1_extend( Type‹??_42›, U)
simpl_tm ~expand:false( Type‹??_42›, U)
infer_tm(nat_3)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
infer_tm(U)
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(Type‹??_60›)
check_tm( (vec_8‹U› nat_3 (succ_5‹› zero_4)), Type‹??_60›)
infer_tm((vec_8‹U› nat_3 (succ_5‹› zero_4)))
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( (succ_5‹› zero_4), nat_3)
infer_tm((succ_5‹› zero_4))
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( Type‹??_60›, U)
assert_equal1_extend( Type‹??_60›, U)
simpl_tm ~expand:false( Type‹??_60›, U)
----------------------------------

definition-------------------------
infer_tm(?_52)
delay_assert(?_76, ??_61)
check_tm( ((hd_vec_4) ?_51 ?_50 xs_8), ?_52)
infer_tm(((hd_vec_4) ?_51 ?_50 xs_8))
infer_tm(((hd_vec_4) ?_51 ?_50))
infer_tm(((hd_vec_4) ?_51))
infer_tm(hd_vec_4)
simpl_tm ~expand:false( ?_76, Type‹??_61›)
check_tm( ?_51, U)
check_tm( ?_50, nat_3)
check_tm( xs_8, (vec_8‹U› ?_51 (succ_5‹› ?_50)))
infer_tm(xs_8)
assert_equal1( (vec_8‹U› ?_51 (succ_5‹› ?_50)),
  (vec_8‹U› nat_3 (succ_5‹› zero_4)))
assert_equal1_extend( (vec_8‹U› ?_51 (succ_5‹› ?_50)),
  (vec_8‹U› nat_3 (succ_5‹› zero_4)))
assert_equal1( ?_52, ?_51)
assert_equal1_extend( ?_52, ?_51)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_5186
    ??_2 <= s_5188
    ??_3 <= r_5189
    ??_4 <= s_5191
    ??_5 <= s_5192
    ??_6 <= s_5193
    ??_7 <= s_5194
    ??_8 <= s_5195
    ??_9 <= s_5196
    ??_10 <= s_5198
    ??_11 <= ??_10
    ??_12 <= s_5202
    ??_13 <= ??_12
    ??_14 <= s_5207
    ??_15 <= r_5209
    ??_16 <= ??_15
    ??_17 <= ??_14
    ??_18 <= ??_15
    ??_19 <= U
    ??_20 <= U
    ??_21 <= U
    ??_22 <= U
    ??_23 <= U
    ??_24 <= U
    ??_25 <= U
    ??_26 <= U
    ??_27 <= U
    ??_28 <= U
    ??_29 <= U
    ??_30 <= ??_27
    ??_31 <= ??_28
    ??_32 <= U
    ??_33 <= ??_27
    ??_34 <= ??_27
    ??_35 <= U
    ??_36 <= ??_28
    ??_37 <= U
    ??_38 <= U
    ??_39 <= ??_27
    ??_40 <= ??_28
    ??_41 <= U
    ??_42 <= U
    ??_43 <= ??_42
    ??_44 <= U
    ??_45 <= U
    ??_46 <= U
    ??_47 <= U
    ??_48 <= U
    ??_49 <= U
    ??_50 <= U
    ??_51 <= U
    ??_52 <= U
    ??_53 <= U
    ??_54 <= U
    ??_55 <= U
    ??_56 <= U
    ??_57 <= U
    ??_58 <= U
    ??_59 <= U
    ??_60 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_5222
    ?_2 <= A_5225
    ?_3 <= A_5231
    ?_4 <= A_5237
    ?_5 <= A_5243
    ?_6 <= A_5249
    ?_7 <= A_5257
    ?_8 <= B_5265
    ?_9 <= B_5273
    ?_10 <= ((f_5279) n_5280)
    ?_11 <= A_5292
    ?_12 <= B_5300
    ?_13 <= A_5304
    ?_14 <= n_5306
    ?_15 <= nat_3
    ?_16 <= ?_13
    ?_17 <= ?_13
    ?_18 <= A_5324
    ?_19 <= (vec_8‹U› A_5327 (succ_5‹› n_5326))
    ?_20 <= ?_18
    ?_21 <= ?_18
    ?_22 <= nat_3
    ?_23 <= Type‹??_29›
    ?_24 <= nat_3
    ?_25 <= ?_22
    ?_26 <= nat_3
    ?_27 <= zero_4
    ?_28 <= nat_3
    ?_29 <= function _5363 : nat_3 -> U
            | x_5365 => (eq_4‹??_27› nat_3 x_5365 zero_4)
    ?_30 <= n_5368
    ?_31 <= A_5376
    ?_32 <= (exists_5‹??_28,U›
              nat_3
              function _5384 : nat_3 -> U
              | x_5386 => (eq_4‹??_27› nat_3 x_5386 ?_30))
    ?_33 <= (exists_5‹??_28,U›
              nat_3
              function _5394 : nat_3 -> U
              | x_5396 =>
                (eq_4‹??_27› nat_3 x_5396 (succ_5‹› n_5390)))
    ?_34 <= nat_3
    ?_35 <= nat_3
    ?_36 <= n_5418
    ?_37 <= m_5423
    ?_38 <= ?_35
    ?_39 <= ?_34
    ?_40 <= nat_3
    ?_41 <= function _5462 : nat_3 -> U
            | x_5464 => (eq_4‹??_27› nat_3 x_5464 (succ_5‹› n_5458))
    ?_42 <= nat_3
    ?_43 <= Type‹??_41›
    ?_44 <= nat_3
    ?_45 <= ?_42
    ?_46 <= nat_3
    ?_47 <= zero_4
    ?_48 <= ?_46
    ?_49 <= (vec_8‹??_43› ?_48 (succ_5‹› ?_47))
    ?_59 <= Type‹??_44›
    ?_60 <= Type‹??_45›
    ?_61 <= Type‹??_46›
    ?_62 <= Type‹??_47›
    ?_63 <= Type‹??_48›
    ?_64 <= Type‹??_49›
    ?_65 <= Type‹??_50›
    ?_66 <= Type‹??_51›
    ?_67 <= Type‹??_52›
    ?_68 <= Type‹??_53›
    ?_69 <= Type‹??_54›
    ?_70 <= Type‹??_55›
    ?_71 <= Type‹??_56›
    ?_72 <= Type‹??_57›
    ?_73 <= Type‹??_58›
    ?_74 <= Type‹??_59›
    ?_75 <= Type‹??_60›
    ?_76 <= Type‹??_61›
    
  |}
  eqns {|
    equal_tm? (?_52, ?_51);
    equal_tm? ((vec_8‹U› ?_51 (succ_5‹› ?_50)),
      (vec_8‹U› nat_3 (succ_5‹› zero_4)))
  |}
end_dump
simpl_tm ~expand:false( ?_52, ?_51)
simpl_tm ~expand:false( (vec_8‹U› ?_51 (succ_5‹› ?_50)),
  (vec_8‹U› nat_3 (succ_5‹› zero_4)))
simpl_tm ~expand:false( ?_51, nat_3)
simpl_tm ~expand:false( (succ_5‹› ?_50), (succ_5‹› zero_4))
simpl_tm ~expand:false( ?_50, zero_4)
simpl_tm ~expand:false( zero_4, ?_50)
infer_tm(nat_3)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
infer_tm(U)
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(Type‹??_61›)
check_tm( nat_3, Type‹??_61›)
infer_tm(nat_3)
assert_equal1( Type‹??_61›, U)
assert_equal1_extend( Type‹??_61›, U)
simpl_tm ~expand:false( Type‹??_61›, U)
----------------------------------

definition-------------------------
infer_tm(?_55)
delay_assert(?_77, ??_62)
check_tm( ((hd_vec2_5) ?_54 ?_53 xs_8), ?_55)
infer_tm(((hd_vec2_5) ?_54 ?_53 xs_8))
infer_tm(((hd_vec2_5) ?_54 ?_53))
infer_tm(((hd_vec2_5) ?_54))
infer_tm(hd_vec2_5)
simpl_tm ~expand:false( ?_77, Type‹??_62›)
check_tm( ?_54, U)
check_tm( ?_53, nat_3)
check_tm( xs_8, (vec_8‹U› ?_54 (succ_5‹› ?_53)))
infer_tm(xs_8)
assert_equal1( (vec_8‹U› ?_54 (succ_5‹› ?_53)),
  (vec_8‹U› nat_3 (succ_5‹› zero_4)))
assert_equal1_extend( (vec_8‹U› ?_54 (succ_5‹› ?_53)),
  (vec_8‹U› nat_3 (succ_5‹› zero_4)))
assert_equal1( ?_55, ?_54)
assert_equal1_extend( ?_55, ?_54)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_5569
    ??_2 <= s_5571
    ??_3 <= r_5572
    ??_4 <= s_5574
    ??_5 <= s_5575
    ??_6 <= s_5576
    ??_7 <= s_5577
    ??_8 <= s_5578
    ??_9 <= s_5579
    ??_10 <= s_5581
    ??_11 <= ??_10
    ??_12 <= s_5585
    ??_13 <= ??_12
    ??_14 <= s_5590
    ??_15 <= r_5592
    ??_16 <= ??_15
    ??_17 <= ??_14
    ??_18 <= ??_15
    ??_19 <= U
    ??_20 <= U
    ??_21 <= U
    ??_22 <= U
    ??_23 <= U
    ??_24 <= U
    ??_25 <= U
    ??_26 <= U
    ??_27 <= U
    ??_28 <= U
    ??_29 <= U
    ??_30 <= ??_27
    ??_31 <= ??_28
    ??_32 <= U
    ??_33 <= ??_27
    ??_34 <= ??_27
    ??_35 <= U
    ??_36 <= ??_28
    ??_37 <= U
    ??_38 <= U
    ??_39 <= ??_27
    ??_40 <= ??_28
    ??_41 <= U
    ??_42 <= U
    ??_43 <= ??_42
    ??_44 <= U
    ??_45 <= U
    ??_46 <= U
    ??_47 <= U
    ??_48 <= U
    ??_49 <= U
    ??_50 <= U
    ??_51 <= U
    ??_52 <= U
    ??_53 <= U
    ??_54 <= U
    ??_55 <= U
    ??_56 <= U
    ??_57 <= U
    ??_58 <= U
    ??_59 <= U
    ??_60 <= U
    ??_61 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_5605
    ?_2 <= A_5608
    ?_3 <= A_5614
    ?_4 <= A_5620
    ?_5 <= A_5626
    ?_6 <= A_5632
    ?_7 <= A_5640
    ?_8 <= B_5648
    ?_9 <= B_5656
    ?_10 <= ((f_5662) n_5663)
    ?_11 <= A_5675
    ?_12 <= B_5683
    ?_13 <= A_5687
    ?_14 <= n_5689
    ?_15 <= nat_3
    ?_16 <= ?_13
    ?_17 <= ?_13
    ?_18 <= A_5707
    ?_19 <= (vec_8‹U› A_5710 (succ_5‹› n_5709))
    ?_20 <= ?_18
    ?_21 <= ?_18
    ?_22 <= nat_3
    ?_23 <= Type‹??_29›
    ?_24 <= nat_3
    ?_25 <= ?_22
    ?_26 <= nat_3
    ?_27 <= zero_4
    ?_28 <= nat_3
    ?_29 <= function _5746 : nat_3 -> U
            | x_5748 => (eq_4‹??_27› nat_3 x_5748 zero_4)
    ?_30 <= n_5751
    ?_31 <= A_5759
    ?_32 <= (exists_5‹??_28,U›
              nat_3
              function _5767 : nat_3 -> U
              | x_5769 => (eq_4‹??_27› nat_3 x_5769 ?_30))
    ?_33 <= (exists_5‹??_28,U›
              nat_3
              function _5777 : nat_3 -> U
              | x_5779 =>
                (eq_4‹??_27› nat_3 x_5779 (succ_5‹› n_5773)))
    ?_34 <= nat_3
    ?_35 <= nat_3
    ?_36 <= n_5801
    ?_37 <= m_5806
    ?_38 <= ?_35
    ?_39 <= ?_34
    ?_40 <= nat_3
    ?_41 <= function _5845 : nat_3 -> U
            | x_5847 => (eq_4‹??_27› nat_3 x_5847 (succ_5‹› n_5841))
    ?_42 <= nat_3
    ?_43 <= Type‹??_41›
    ?_44 <= nat_3
    ?_45 <= ?_42
    ?_46 <= nat_3
    ?_47 <= zero_4
    ?_48 <= ?_46
    ?_49 <= (vec_8‹??_43› ?_48 (succ_5‹› ?_47))
    ?_50 <= zero_4
    ?_51 <= nat_3
    ?_52 <= ?_51
    ?_59 <= Type‹??_44›
    ?_60 <= Type‹??_45›
    ?_61 <= Type‹??_46›
    ?_62 <= Type‹??_47›
    ?_63 <= Type‹??_48›
    ?_64 <= Type‹??_49›
    ?_65 <= Type‹??_50›
    ?_66 <= Type‹??_51›
    ?_67 <= Type‹??_52›
    ?_68 <= Type‹??_53›
    ?_69 <= Type‹??_54›
    ?_70 <= Type‹??_55›
    ?_71 <= Type‹??_56›
    ?_72 <= Type‹??_57›
    ?_73 <= Type‹??_58›
    ?_74 <= Type‹??_59›
    ?_75 <= Type‹??_60›
    ?_76 <= Type‹??_61›
    ?_77 <= Type‹??_62›
    
  |}
  eqns {|
    equal_tm? (?_55, ?_54);
    equal_tm? ((vec_8‹U› ?_54 (succ_5‹› ?_53)),
      (vec_8‹U› nat_3 (succ_5‹› zero_4)))
  |}
end_dump
simpl_tm ~expand:false( ?_55, ?_54)
simpl_tm ~expand:false( (vec_8‹U› ?_54 (succ_5‹› ?_53)),
  (vec_8‹U› nat_3 (succ_5‹› zero_4)))
simpl_tm ~expand:false( ?_54, nat_3)
simpl_tm ~expand:false( (succ_5‹› ?_53), (succ_5‹› zero_4))
simpl_tm ~expand:false( ?_53, zero_4)
simpl_tm ~expand:false( zero_4, ?_53)
infer_tm(nat_3)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
infer_tm(U)
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(Type‹??_62›)
check_tm( nat_3, Type‹??_62›)
infer_tm(nat_3)
assert_equal1( Type‹??_62›, U)
assert_equal1_extend( Type‹??_62›, U)
simpl_tm ~expand:false( Type‹??_62›, U)
----------------------------------

definition-------------------------
infer_tm(?_58)
delay_assert(?_78, ??_63)
check_tm( ((hd_vec3_6) ?_57 ?_56 xs_8), ?_58)
infer_tm(((hd_vec3_6) ?_57 ?_56 xs_8))
infer_tm(((hd_vec3_6) ?_57 ?_56))
infer_tm(((hd_vec3_6) ?_57))
infer_tm(hd_vec3_6)
simpl_tm ~expand:false( ?_78, Type‹??_63›)
check_tm( ?_57, U)
check_tm( ?_56, nat_3)
check_tm( xs_8, (vec_8‹U› ?_57 (succ_5‹› ?_56)))
infer_tm(xs_8)
assert_equal1( (vec_8‹U› ?_57 (succ_5‹› ?_56)),
  (vec_8‹U› nat_3 (succ_5‹› zero_4)))
assert_equal1_extend( (vec_8‹U› ?_57 (succ_5‹› ?_56)),
  (vec_8‹U› nat_3 (succ_5‹› zero_4)))
assert_equal1( ?_58, ?_57)
assert_equal1_extend( ?_58, ?_57)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_5952
    ??_2 <= s_5954
    ??_3 <= r_5955
    ??_4 <= s_5957
    ??_5 <= s_5958
    ??_6 <= s_5959
    ??_7 <= s_5960
    ??_8 <= s_5961
    ??_9 <= s_5962
    ??_10 <= s_5964
    ??_11 <= ??_10
    ??_12 <= s_5968
    ??_13 <= ??_12
    ??_14 <= s_5973
    ??_15 <= r_5975
    ??_16 <= ??_15
    ??_17 <= ??_14
    ??_18 <= ??_15
    ??_19 <= U
    ??_20 <= U
    ??_21 <= U
    ??_22 <= U
    ??_23 <= U
    ??_24 <= U
    ??_25 <= U
    ??_26 <= U
    ??_27 <= U
    ??_28 <= U
    ??_29 <= U
    ??_30 <= ??_27
    ??_31 <= ??_28
    ??_32 <= U
    ??_33 <= ??_27
    ??_34 <= ??_27
    ??_35 <= U
    ??_36 <= ??_28
    ??_37 <= U
    ??_38 <= U
    ??_39 <= ??_27
    ??_40 <= ??_28
    ??_41 <= U
    ??_42 <= U
    ??_43 <= ??_42
    ??_44 <= U
    ??_45 <= U
    ??_46 <= U
    ??_47 <= U
    ??_48 <= U
    ??_49 <= U
    ??_50 <= U
    ??_51 <= U
    ??_52 <= U
    ??_53 <= U
    ??_54 <= U
    ??_55 <= U
    ??_56 <= U
    ??_57 <= U
    ??_58 <= U
    ??_59 <= U
    ??_60 <= U
    ??_61 <= U
    ??_62 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_5988
    ?_2 <= A_5991
    ?_3 <= A_5997
    ?_4 <= A_6003
    ?_5 <= A_6009
    ?_6 <= A_6015
    ?_7 <= A_6023
    ?_8 <= B_6031
    ?_9 <= B_6039
    ?_10 <= ((f_6045) n_6046)
    ?_11 <= A_6058
    ?_12 <= B_6066
    ?_13 <= A_6070
    ?_14 <= n_6072
    ?_15 <= nat_3
    ?_16 <= ?_13
    ?_17 <= ?_13
    ?_18 <= A_6090
    ?_19 <= (vec_8‹U› A_6093 (succ_5‹› n_6092))
    ?_20 <= ?_18
    ?_21 <= ?_18
    ?_22 <= nat_3
    ?_23 <= Type‹??_29›
    ?_24 <= nat_3
    ?_25 <= ?_22
    ?_26 <= nat_3
    ?_27 <= zero_4
    ?_28 <= nat_3
    ?_29 <= function _6129 : nat_3 -> U
            | x_6131 => (eq_4‹??_27› nat_3 x_6131 zero_4)
    ?_30 <= n_6134
    ?_31 <= A_6142
    ?_32 <= (exists_5‹??_28,U›
              nat_3
              function _6150 : nat_3 -> U
              | x_6152 => (eq_4‹??_27› nat_3 x_6152 ?_30))
    ?_33 <= (exists_5‹??_28,U›
              nat_3
              function _6160 : nat_3 -> U
              | x_6162 =>
                (eq_4‹??_27› nat_3 x_6162 (succ_5‹› n_6156)))
    ?_34 <= nat_3
    ?_35 <= nat_3
    ?_36 <= n_6184
    ?_37 <= m_6189
    ?_38 <= ?_35
    ?_39 <= ?_34
    ?_40 <= nat_3
    ?_41 <= function _6228 : nat_3 -> U
            | x_6230 => (eq_4‹??_27› nat_3 x_6230 (succ_5‹› n_6224))
    ?_42 <= nat_3
    ?_43 <= Type‹??_41›
    ?_44 <= nat_3
    ?_45 <= ?_42
    ?_46 <= nat_3
    ?_47 <= zero_4
    ?_48 <= ?_46
    ?_49 <= (vec_8‹??_43› ?_48 (succ_5‹› ?_47))
    ?_50 <= zero_4
    ?_51 <= nat_3
    ?_52 <= ?_51
    ?_53 <= zero_4
    ?_54 <= nat_3
    ?_55 <= ?_54
    ?_59 <= Type‹??_44›
    ?_60 <= Type‹??_45›
    ?_61 <= Type‹??_46›
    ?_62 <= Type‹??_47›
    ?_63 <= Type‹??_48›
    ?_64 <= Type‹??_49›
    ?_65 <= Type‹??_50›
    ?_66 <= Type‹??_51›
    ?_67 <= Type‹??_52›
    ?_68 <= Type‹??_53›
    ?_69 <= Type‹??_54›
    ?_70 <= Type‹??_55›
    ?_71 <= Type‹??_56›
    ?_72 <= Type‹??_57›
    ?_73 <= Type‹??_58›
    ?_74 <= Type‹??_59›
    ?_75 <= Type‹??_60›
    ?_76 <= Type‹??_61›
    ?_77 <= Type‹??_62›
    ?_78 <= Type‹??_63›
    
  |}
  eqns {|
    equal_tm? (?_58, ?_57);
    equal_tm? ((vec_8‹U› ?_57 (succ_5‹› ?_56)),
      (vec_8‹U› nat_3 (succ_5‹› zero_4)))
  |}
end_dump
simpl_tm ~expand:false( ?_58, ?_57)
simpl_tm ~expand:false( (vec_8‹U› ?_57 (succ_5‹› ?_56)),
  (vec_8‹U› nat_3 (succ_5‹› zero_4)))
simpl_tm ~expand:false( ?_57, nat_3)
simpl_tm ~expand:false( (succ_5‹› ?_56), (succ_5‹› zero_4))
simpl_tm ~expand:false( ?_56, zero_4)
simpl_tm ~expand:false( zero_4, ?_56)
infer_tm(nat_3)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
infer_tm(U)
check_tm( nat_3, U)
infer_tm(nat_3)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(Type‹??_63›)
check_tm( nat_3, Type‹??_63›)
infer_tm(nat_3)
assert_equal1( Type‹??_63›, U)
assert_equal1_extend( Type‹??_63›, U)
simpl_tm ~expand:false( Type‹??_63›, U)
----------------------------------

smeta_meta {|
  ??_1 <= s_6326
  ??_2 <= s_6328
  ??_3 <= r_6329
  ??_4 <= s_6331
  ??_5 <= s_6332
  ??_6 <= s_6333
  ??_7 <= s_6334
  ??_8 <= s_6335
  ??_9 <= s_6336
  ??_10 <= s_6338
  ??_11 <= ??_10
  ??_12 <= s_6342
  ??_13 <= ??_12
  ??_14 <= s_6347
  ??_15 <= r_6349
  ??_16 <= ??_15
  ??_17 <= ??_14
  ??_18 <= ??_15
  ??_19 <= U
  ??_20 <= U
  ??_21 <= U
  ??_22 <= U
  ??_23 <= U
  ??_24 <= U
  ??_25 <= U
  ??_26 <= U
  ??_27 <= U
  ??_28 <= U
  ??_29 <= U
  ??_30 <= ??_27
  ??_31 <= ??_28
  ??_32 <= U
  ??_33 <= ??_27
  ??_34 <= ??_27
  ??_35 <= U
  ??_36 <= ??_28
  ??_37 <= U
  ??_38 <= U
  ??_39 <= ??_27
  ??_40 <= ??_28
  ??_41 <= U
  ??_42 <= U
  ??_43 <= ??_42
  ??_44 <= U
  ??_45 <= U
  ??_46 <= U
  ??_47 <= U
  ??_48 <= U
  ??_49 <= U
  ??_50 <= U
  ??_51 <= U
  ??_52 <= U
  ??_53 <= U
  ??_54 <= U
  ??_55 <= U
  ??_56 <= U
  ??_57 <= U
  ??_58 <= U
  ??_59 <= U
  ??_60 <= U
  ??_61 <= U
  ??_62 <= U
  ??_63 <= U
  
|}
imeta_meta {|
  ?_1 <= A_6362
  ?_2 <= A_6365
  ?_3 <= A_6371
  ?_4 <= A_6377
  ?_5 <= A_6383
  ?_6 <= A_6389
  ?_7 <= A_6397
  ?_8 <= B_6405
  ?_9 <= B_6413
  ?_10 <= ((f_6419) n_6420)
  ?_11 <= A_6432
  ?_12 <= B_6440
  ?_13 <= A_6444
  ?_14 <= n_6446
  ?_15 <= nat_3
  ?_16 <= ?_13
  ?_17 <= ?_13
  ?_18 <= A_6464
  ?_19 <= (vec_8‹U› A_6467 (succ_5‹› n_6466))
  ?_20 <= ?_18
  ?_21 <= ?_18
  ?_22 <= nat_3
  ?_23 <= Type‹??_29›
  ?_24 <= nat_3
  ?_25 <= ?_22
  ?_26 <= nat_3
  ?_27 <= zero_4
  ?_28 <= nat_3
  ?_29 <= function _6503 : nat_3 -> U
          | x_6505 => (eq_4‹??_27› nat_3 x_6505 zero_4)
  ?_30 <= n_6508
  ?_31 <= A_6516
  ?_32 <= (exists_5‹??_28,U›
            nat_3
            function _6524 : nat_3 -> U
            | x_6526 => (eq_4‹??_27› nat_3 x_6526 ?_30))
  ?_33 <= (exists_5‹??_28,U›
            nat_3
            function _6534 : nat_3 -> U
            | x_6536 => (eq_4‹??_27› nat_3 x_6536 (succ_5‹› n_6530)))
  ?_34 <= nat_3
  ?_35 <= nat_3
  ?_36 <= n_6558
  ?_37 <= m_6563
  ?_38 <= ?_35
  ?_39 <= ?_34
  ?_40 <= nat_3
  ?_41 <= function _6602 : nat_3 -> U
          | x_6604 => (eq_4‹??_27› nat_3 x_6604 (succ_5‹› n_6598))
  ?_42 <= nat_3
  ?_43 <= Type‹??_41›
  ?_44 <= nat_3
  ?_45 <= ?_42
  ?_46 <= nat_3
  ?_47 <= zero_4
  ?_48 <= ?_46
  ?_49 <= (vec_8‹??_43› ?_48 (succ_5‹› ?_47))
  ?_50 <= zero_4
  ?_51 <= nat_3
  ?_52 <= ?_51
  ?_53 <= zero_4
  ?_54 <= nat_3
  ?_55 <= ?_54
  ?_56 <= zero_4
  ?_57 <= nat_3
  ?_58 <= ?_57
  ?_59 <= Type‹??_44›
  ?_60 <= Type‹??_45›
  ?_61 <= Type‹??_46›
  ?_62 <= Type‹??_47›
  ?_63 <= Type‹??_48›
  ?_64 <= Type‹??_49›
  ?_65 <= Type‹??_50›
  ?_66 <= Type‹??_51›
  ?_67 <= Type‹??_52›
  ?_68 <= Type‹??_53›
  ?_69 <= Type‹??_54›
  ?_70 <= Type‹??_55›
  ?_71 <= Type‹??_56›
  ?_72 <= Type‹??_57›
  ?_73 <= Type‹??_58›
  ?_74 <= Type‹??_59›
  ?_75 <= Type‹??_60›
  ?_76 <= Type‹??_61›
  ?_77 <= Type‹??_62›
  ?_78 <= Type‹??_63›
  
|}
#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_7148 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_7149› (A_7150 : Type‹s_7149›) (m_7151 : A_7150):
  A_7150 -> U
where
| refl_6 : (eq_4‹s_7149› A_7150 m_7151 m_7151)

#[program]
inductive exists_5‹s_7153,r_7154› (A_7155 : Type‹s_7153›) (B_7156 : 
A_7155 -> Type‹r_7154›): U where
| ex_7
    (m_7158 : A_7155) {pf_7159 : ((B_7156) m_7158)}
    : (exists_5‹s_7153,r_7154› A_7155 B_7156)

#[program]
inductive sing_6‹s_7160› (A_7161 : Type‹s_7160›):
  A_7161 -> Type‹s_7160›
where
| just_8 (m_7163 : A_7161) : (sing_6‹s_7160› A_7161 m_7163)

#[program]
inductive list_7‹s_7164› (A_7165 : Type‹s_7164›): U where
| nil_9 : (list_7‹s_7164› A_7165)
| cons_10
    (hd_7166 : A_7165) (tl_7167 : (list_7‹s_7164› A_7165))
    : (list_7‹s_7164› A_7165)

#[program]
inductive vec_8‹s_7168› (A_7169 : Type‹s_7168›): nat_3 -> U where
| vnil_11 : (vec_8‹s_7168› A_7169 zero_4)
| vcons_12
    {n_7171 : nat_3} (hd_7172 : A_7169)
    (tl_7173 : (vec_8‹s_7168› A_7169 n_7171))
    : (vec_8‹s_7168› A_7169 (succ_5‹› n_7171))

#[program]
def rwl_1‹s_7174,r_7175› :
  ∀ {A_7176 : Type‹s_7174›} ->
    ∀ {m_7177 : A_7176} ->
      ∀ {n_7178 : A_7176} ->
        ∀ {B_7179 : A_7176 -> Type‹r_7175›} ->
          {(eq_4‹s_7174› A_7176 m_7177 n_7178)} ->
            ((B_7179) m_7177) -> ((B_7179) n_7178)
:=
  function rwl_7183 :
    ∀ {A_7184 : Type‹s_7174›} ->
      ∀ {m_7185 : A_7184} ->
        ∀ {n_7186 : A_7184} ->
          ∀ {B_7187 : A_7184 -> Type‹r_7175›} ->
            {(eq_4‹s_7174› A_7184 m_7185 n_7186)} ->
              ((B_7187) m_7185) -> ((B_7187) n_7186)
  | A_7191 m_7192 n_7193 B_7194 refl_6 x_7195 => x_7195

#[program]
def rwr_2‹s_7196,r_7197› :
  ∀ {A_7198 : Type‹s_7196›} ->
    ∀ {m_7199 : A_7198} ->
      ∀ {n_7200 : A_7198} ->
        ∀ {B_7201 : A_7198 -> Type‹r_7197›} ->
          {(eq_4‹s_7196› A_7198 m_7199 n_7200)} ->
            ((B_7201) n_7200) -> ((B_7201) m_7199)
:=
  function rwr_7205 :
    ∀ {A_7206 : Type‹s_7196›} ->
      ∀ {m_7207 : A_7206} ->
        ∀ {n_7208 : A_7206} ->
          ∀ {B_7209 : A_7206 -> Type‹r_7197›} ->
            {(eq_4‹s_7196› A_7206 m_7207 n_7208)} ->
              ((B_7209) n_7208) -> ((B_7209) m_7207)
  | A_7213 m_7214 n_7215 B_7216 refl_6 x_7217 => x_7217

#[logical]
def congr_3‹s_7218,r_7219,t_7220› :
  ∀ (A_7221 : Type‹s_7218›) ->
    ∀ (B_7222 : Type‹r_7219›) ->
      ∀ (m_7223 : A_7221) ->
        ∀ (n_7224 : A_7221) ->
          ∀ (f_7225 : forall‹t_7220›(__7226 : A_7221), B_7222) ->
            (eq_4‹s_7218› A_7221 m_7223 n_7224) ->
              (eq_4‹r_7219› B_7222 ((f_7225) m_7223) ((f_7225) n_7224))
:=
  function congr_7228 :
    ∀ (A_7229 : Type‹s_7218›) ->
      ∀ (B_7230 : Type‹r_7219›) ->
        ∀ (m_7231 : A_7229) ->
          ∀ (n_7232 : A_7229) ->
            ∀ (f_7233 : forall‹t_7220›(__7234 : A_7229), B_7230) ->
              (eq_4‹s_7218› A_7229 m_7231 n_7232) ->
                (eq_4‹r_7219› B_7230 ((f_7233) m_7231) ((f_7233) n_7232))
  | A_7236 B_7237 m_7238 n_7239 f_7240 refl_6 => refl_6‹r_7219›

#[program]
def hd_vec_4‹› :
  ∀ {A_7241 : U} ->
    ∀ {n_7242 : nat_3} ->
      (vec_8‹U› A_7241 (succ_5‹› n_7242)) -> A_7241
:=
  function hd_vec_7244 :
    ∀ {A_7245 : U} ->
      ∀ {n_7246 : nat_3} ->
        (vec_8‹U› A_7245 (succ_5‹› n_7246)) -> A_7245
  | A_7248 n_7249 vnil_11 =>
  | A_7250 n_7251 (vcons_12 _7252 hd_7253 _7254) => hd_7253

#[program]
def hd_vec2_5‹› :
  ∀ {A_7255 : U} ->
    ∀ {n_7256 : nat_3} ->
      (vec_8‹U› A_7255 (succ_5‹› n_7256)) -> A_7255
:=
  function hd_vec2_7258 :
    ∀ {A_7259 : U} ->
      ∀ {n_7260 : nat_3} ->
        (vec_8‹U› A_7259 (succ_5‹› n_7260)) -> A_7259
  | A_7262 n_7263 xs_7264 =>
    match n_7263, xs_7264 in
      ∀ {n0_7265 : nat_3} -o
        (vec_8‹U› A_7262 (succ_5‹› n0_7265)) -o A_7262
    with
    | _7267, vnil_11 =>
    | _7268, (vcons_12 _7269 hd_7270 _7271) => hd_7270

#[program]
def hd_vec3_6‹› :
  ∀ {A_7272 : U} ->
    ∀ {n_7273 : nat_3} ->
      (vec_8‹U› A_7272 (succ_5‹› n_7273)) -> A_7272
:=
  function hd_vec3_7275 :
    ∀ {A_7276 : U} ->
      ∀ {n_7277 : nat_3} ->
        (vec_8‹U› A_7276 (succ_5‹› n_7277)) -> A_7276
  | A_7279 n_7280 xs_7281 =>
    match xs_7281 in (vec_8‹U› A_7279 (succ_5‹› n_7280)) -o A_7279
    with
    | vnil_11 =>
    | (vcons_12 _7283 hd_7284 _7285) => hd_7284

#[program]
def vlength_7‹› :
  ∀ {A_7286 : U} ->
    ∀ {n_7287 : nat_3} ->
      (vec_8‹U› A_7286 n_7287) ->
        (exists_5‹U,U›
          nat_3
          function _7289 : nat_3 -> U
          | x_7291 => (eq_4‹U› nat_3 x_7291 n_7287))
:=
  function vlength_7292 :
    ∀ {A_7293 : U} ->
      ∀ {n_7294 : nat_3} ->
        (vec_8‹U› A_7293 n_7294) ->
          (exists_5‹U,U›
            nat_3
            function _7296 : nat_3 -> U
            | x_7298 => (eq_4‹U› nat_3 x_7298 n_7294))
  | A_7299 n_7300 vnil_11 => (ex_7‹U,U› zero_4 refl_6‹U›)
  | A_7301 n_7302 (vcons_12 _7303 _7304 tl_7305) =>
    match ((vlength_7292) A_7301 _7303 tl_7305) in
      (exists_5‹U,U›
        nat_3
        function _7307 : nat_3 -> U
        | x_7309 => (eq_4‹U› nat_3 x_7309 _7303)) -o
        (exists_5‹U,U›
          nat_3
          function _7310 : nat_3 -> U
          | x_7312 => (eq_4‹U› nat_3 x_7312 (succ_5‹› _7303)))
    with
    | (ex_7 n_7313 pf_7314) =>
      (ex_7‹U,U›
        (succ_5‹› n_7313)
        ((congr_3‹U,U,U›)
          nat_3 nat_3 n_7313 _7303
          function _7315 : nat_3 -> nat_3
          | x_7317 => (succ_5‹› x_7317) pf_7314))

#[program]
def xs_8‹› : (vec_8‹U› nat_3 (succ_5‹› zero_4)) :=
  (vcons_12‹U› zero_4 zero_4 vnil_11‹U›)

#[program]
def x_9‹› : nat_3 := ((hd_vec_4) nat_3 zero_4 xs_8)

#[program]
def y_10‹› : nat_3 := ((hd_vec2_5) nat_3 zero_4 xs_8)

#[program]
def z_11‹› : nat_3 := ((hd_vec3_6) nat_3 zero_4 xs_8)

-----------------------------------------

Logical.infer_tm(unit_1)
Logical.infer_tm(bool_2)
Logical.infer_tm(bool_2)
Logical.infer_tm(nat_3)
Logical.infer_tm(nat_3)
Logical.infer_tm(nat_3)
Logical.infer_tm(L)
Logical.infer_tm(A_7319)
Logical.infer_tm(A_7319)
Logical.infer_tm(L)
Logical.infer_tm(A_7322)
Logical.infer_tm((eq_4‹L› A_7322 m_7323 m_7323))
Logical.check_tm( A_7322, L )
Logical.infer_tm(A_7322)
Logical.assert_equal(L, L)
Logical.check_tm( m_7323, A_7322 )
Logical.infer_tm(m_7323)
Logical.assert_equal(A_7322, A_7322)
Logical.check_tm( m_7323, A_7322 )
Logical.infer_tm(m_7323)
Logical.assert_equal(A_7322, A_7322)
Logical.infer_tm(U)
Logical.infer_tm(A_7324)
Logical.infer_tm(A_7324)
Logical.infer_tm(U)
Logical.infer_tm(A_7327)
Logical.infer_tm((eq_4‹U› A_7327 m_7328 m_7328))
Logical.check_tm( A_7327, U )
Logical.infer_tm(A_7327)
Logical.assert_equal(U, U)
Logical.check_tm( m_7328, A_7327 )
Logical.infer_tm(m_7328)
Logical.assert_equal(A_7327, A_7327)
Logical.check_tm( m_7328, A_7327 )
Logical.infer_tm(m_7328)
Logical.assert_equal(A_7327, A_7327)
Logical.infer_tm(L)
Logical.infer_tm(A_7329 -> L)
Logical.infer_tm(A_7329)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_7333 -> L)
Logical.infer_tm(A_7333)
Logical.infer_tm(L)
Logical.infer_tm(A_7333)
Logical.infer_tm(((B_7334) m_7337))
Logical.infer_tm(B_7334)
Logical.check_tm( m_7337, A_7333 )
Logical.infer_tm(m_7337)
Logical.assert_equal(A_7333, A_7333)
Logical.infer_tm((exists_5‹L,L› A_7333 B_7334))
Logical.check_tm( A_7333, L )
Logical.infer_tm(A_7333)
Logical.assert_equal(L, L)
Logical.check_tm( B_7334, A_7333 -> L )
Logical.infer_tm(B_7334)
Logical.assert_equal(A_7333 -> L, A_7333 -> L)
  warning - pruned constructor exLL_15 trans12.check_dconstrs
Logical.infer_tm(L)
Logical.infer_tm(A_7343 -> U)
Logical.infer_tm(A_7343)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(A_7347 -> U)
Logical.infer_tm(A_7347)
Logical.infer_tm(U)
Logical.infer_tm(A_7347)
Logical.infer_tm(((B_7348) m_7351))
Logical.infer_tm(B_7348)
Logical.check_tm( m_7351, A_7347 )
Logical.infer_tm(m_7351)
Logical.assert_equal(A_7347, A_7347)
Logical.infer_tm((exists_5‹L,U› A_7347 B_7348))
Logical.check_tm( A_7347, L )
Logical.infer_tm(A_7347)
Logical.assert_equal(L, L)
Logical.check_tm( B_7348, A_7347 -> U )
Logical.infer_tm(B_7348)
Logical.assert_equal(A_7347 -> U, A_7347 -> U)
  warning - pruned constructor exLU_16 trans12.check_dconstrs
Logical.infer_tm(U)
Logical.infer_tm(A_7357 -> L)
Logical.infer_tm(A_7357)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(A_7361 -> L)
Logical.infer_tm(A_7361)
Logical.infer_tm(L)
Logical.infer_tm(A_7361)
Logical.infer_tm(((B_7362) m_7365))
Logical.infer_tm(B_7362)
Logical.check_tm( m_7365, A_7361 )
Logical.infer_tm(m_7365)
Logical.assert_equal(A_7361, A_7361)
Logical.infer_tm((exists_5‹U,L› A_7361 B_7362))
Logical.check_tm( A_7361, U )
Logical.infer_tm(A_7361)
Logical.assert_equal(U, U)
Logical.check_tm( B_7362, A_7361 -> L )
Logical.infer_tm(B_7362)
Logical.assert_equal(A_7361 -> L, A_7361 -> L)
Logical.infer_tm(U)
Logical.infer_tm(A_7371 -> U)
Logical.infer_tm(A_7371)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_7375 -> U)
Logical.infer_tm(A_7375)
Logical.infer_tm(U)
Logical.infer_tm(A_7375)
Logical.infer_tm(((B_7376) m_7379))
Logical.infer_tm(B_7376)
Logical.check_tm( m_7379, A_7375 )
Logical.infer_tm(m_7379)
Logical.assert_equal(A_7375, A_7375)
Logical.infer_tm((exists_5‹U,U› A_7375 B_7376))
Logical.check_tm( A_7375, U )
Logical.infer_tm(A_7375)
Logical.assert_equal(U, U)
Logical.check_tm( B_7376, A_7375 -> U )
Logical.infer_tm(B_7376)
Logical.assert_equal(A_7375 -> U, A_7375 -> U)
Logical.infer_tm(L)
Logical.infer_tm(A_7385)
Logical.infer_tm(L)
Logical.infer_tm(A_7387)
Logical.infer_tm((sing_6‹L› A_7387 m_7388))
Logical.check_tm( A_7387, L )
Logical.infer_tm(A_7387)
Logical.assert_equal(L, L)
Logical.check_tm( m_7388, A_7387 )
Logical.infer_tm(m_7388)
Logical.assert_equal(A_7387, A_7387)
Logical.infer_tm(U)
Logical.infer_tm(A_7389)
Logical.infer_tm(U)
Logical.infer_tm(A_7391)
Logical.infer_tm((sing_6‹U› A_7391 m_7392))
Logical.check_tm( A_7391, U )
Logical.infer_tm(A_7391)
Logical.assert_equal(U, U)
Logical.check_tm( m_7392, A_7391 )
Logical.infer_tm(m_7392)
Logical.assert_equal(A_7391, A_7391)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm((list_7‹L› A_7394))
Logical.check_tm( A_7394, L )
Logical.infer_tm(A_7394)
Logical.assert_equal(L, L)
Logical.infer_tm(L)
Logical.infer_tm(A_7395)
Logical.infer_tm((list_7‹L› A_7395))
Logical.check_tm( A_7395, L )
Logical.infer_tm(A_7395)
Logical.assert_equal(L, L)
Logical.infer_tm((list_7‹L› A_7395))
Logical.check_tm( A_7395, L )
Logical.infer_tm(A_7395)
Logical.assert_equal(L, L)
  warning - pruned constructor consL_22 trans12.check_dconstrs
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm((list_7‹U› A_7399))
Logical.check_tm( A_7399, U )
Logical.infer_tm(A_7399)
Logical.assert_equal(U, U)
Logical.infer_tm(U)
Logical.infer_tm(A_7400)
Logical.infer_tm((list_7‹U› A_7400))
Logical.check_tm( A_7400, U )
Logical.infer_tm(A_7400)
Logical.assert_equal(U, U)
Logical.infer_tm((list_7‹U› A_7400))
Logical.check_tm( A_7400, U )
Logical.infer_tm(A_7400)
Logical.assert_equal(U, U)
Logical.infer_tm(L)
Logical.infer_tm(nat_3)
Logical.infer_tm(L)
Logical.infer_tm((vec_8‹L› A_7405 zero_4))
Logical.check_tm( A_7405, L )
Logical.infer_tm(A_7405)
Logical.assert_equal(L, L)
Logical.check_tm( zero_4, nat_3 )
Logical.infer_tm(zero_4)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm(L)
Logical.infer_tm(nat_3)
Logical.infer_tm(A_7406)
Logical.infer_tm((vec_8‹L› A_7406 n_7407))
Logical.check_tm( A_7406, L )
Logical.infer_tm(A_7406)
Logical.assert_equal(L, L)
Logical.check_tm( n_7407, nat_3 )
Logical.infer_tm(n_7407)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm((vec_8‹L› A_7406 (succ_5‹› n_7407)))
Logical.check_tm( A_7406, L )
Logical.infer_tm(A_7406)
Logical.assert_equal(L, L)
Logical.check_tm( (succ_5‹› n_7407), nat_3 )
Logical.infer_tm((succ_5‹› n_7407))
Logical.check_tm( n_7407, nat_3 )
Logical.infer_tm(n_7407)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
  warning - pruned constructor vconsL_26 trans12.check_dconstrs
Logical.infer_tm(U)
Logical.infer_tm(nat_3)
Logical.infer_tm(U)
Logical.infer_tm((vec_8‹U› A_7412 zero_4))
Logical.check_tm( A_7412, U )
Logical.infer_tm(A_7412)
Logical.assert_equal(U, U)
Logical.check_tm( zero_4, nat_3 )
Logical.infer_tm(zero_4)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm(U)
Logical.infer_tm(nat_3)
Logical.infer_tm(A_7413)
Logical.infer_tm((vec_8‹U› A_7413 n_7414))
Logical.check_tm( A_7413, U )
Logical.infer_tm(A_7413)
Logical.assert_equal(U, U)
Logical.check_tm( n_7414, nat_3 )
Logical.infer_tm(n_7414)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm((vec_8‹U› A_7413 (succ_5‹› n_7414)))
Logical.check_tm( A_7413, U )
Logical.infer_tm(A_7413)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_7414), nat_3 )
Logical.infer_tm((succ_5‹› n_7414))
Logical.check_tm( n_7414, nat_3 )
Logical.infer_tm(n_7414)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm(∀ {A_7417 : L} ->
                   ∀ {m_7418 : A_7417} ->
                     ∀ {n_7419 : A_7417} ->
                       ∀ {B_7420 : A_7417 -> L} ->
                         {(eq_4‹L› A_7417 m_7418 n_7419)} ->
                           ((B_7420) m_7418) -> ((B_7420) n_7419))
Logical.infer_tm(L)
Logical.infer_tm(∀ {m_7425 : A_7424} ->
                   ∀ {n_7426 : A_7424} ->
                     ∀ {B_7427 : A_7424 -> L} ->
                       {(eq_4‹L› A_7424 m_7425 n_7426)} ->
                         ((B_7427) m_7425) -> ((B_7427) n_7426))
Logical.infer_tm(A_7424)
Logical.infer_tm(∀ {n_7432 : A_7424} ->
                   ∀ {B_7433 : A_7424 -> L} ->
                     {(eq_4‹L› A_7424 m_7431 n_7432)} ->
                       ((B_7433) m_7431) -> ((B_7433) n_7432))
Logical.infer_tm(A_7424)
Logical.infer_tm(∀ {B_7438 : A_7424 -> L} ->
                   {(eq_4‹L› A_7424 m_7431 n_7437)} ->
                     ((B_7438) m_7431) -> ((B_7438) n_7437))
Logical.infer_tm(A_7424 -> L)
Logical.infer_tm(A_7424)
Logical.infer_tm(L)
Logical.infer_tm({(eq_4‹L› A_7424 m_7431 n_7437)} ->
                   ((B_7442) m_7431) -> ((B_7442) n_7437))
Logical.infer_tm((eq_4‹L› A_7424 m_7431 n_7437))
Logical.check_tm( A_7424, L )
Logical.infer_tm(A_7424)
Logical.assert_equal(L, L)
Logical.check_tm( m_7431, A_7424 )
Logical.infer_tm(m_7431)
Logical.assert_equal(A_7424, A_7424)
Logical.check_tm( n_7437, A_7424 )
Logical.infer_tm(n_7437)
Logical.assert_equal(A_7424, A_7424)
Logical.infer_tm(((B_7442) m_7431) -> ((B_7442) n_7437))
Logical.infer_tm(((B_7442) m_7431))
Logical.infer_tm(B_7442)
Logical.check_tm( m_7431, A_7424 )
Logical.infer_tm(m_7431)
Logical.assert_equal(A_7424, A_7424)
Logical.infer_tm(((B_7442) n_7437))
Logical.infer_tm(B_7442)
Logical.check_tm( n_7437, A_7424 )
Logical.infer_tm(n_7437)
Logical.assert_equal(A_7424, A_7424)
Program.check_tm(
  function rwl_7450 :
    ∀ {A_7451 : L} ->
      ∀ {m_7452 : A_7451} ->
        ∀ {n_7453 : A_7451} ->
          ∀ {B_7454 : A_7451 -> L} ->
            {(eq_4‹L› A_7451 m_7452 n_7453)} ->
              ((B_7454) m_7452) -> ((B_7454) n_7453)
  | A_7458 m_7459 n_7460 B_7461 refl_6 x_7462 => x_7462,
  ∀ {A_7463 : L} ->
    ∀ {m_7464 : A_7463} ->
      ∀ {n_7465 : A_7463} ->
        ∀ {B_7466 : A_7463 -> L} ->
          {(eq_4‹L› A_7463 m_7464 n_7465)} ->
            ((B_7466) m_7464) -> ((B_7466) n_7465)
)
Program.infer_tm(function rwl_7470 :
                   ∀ {A_7471 : L} ->
                     ∀ {m_7472 : A_7471} ->
                       ∀ {n_7473 : A_7471} ->
                         ∀ {B_7474 : A_7471 -> L} ->
                           {(eq_4‹L› A_7471 m_7472 n_7473)} ->
                             ((B_7474) m_7472) -> ((B_7474) n_7473)
                 | A_7478 m_7479 n_7480 B_7481 refl_6 x_7482 => x_7482)
Logical.infer_tm(∀ {A_7484 : L} ->
                   ∀ {m_7485 : A_7484} ->
                     ∀ {n_7486 : A_7484} ->
                       ∀ {B_7487 : A_7484 -> L} ->
                         {(eq_4‹L› A_7484 m_7485 n_7486)} ->
                           ((B_7487) m_7485) -> ((B_7487) n_7486))
Logical.infer_tm(L)
Logical.infer_tm(∀ {m_7492 : A_7491} ->
                   ∀ {n_7493 : A_7491} ->
                     ∀ {B_7494 : A_7491 -> L} ->
                       {(eq_4‹L› A_7491 m_7492 n_7493)} ->
                         ((B_7494) m_7492) -> ((B_7494) n_7493))
Logical.infer_tm(A_7491)
Logical.infer_tm(∀ {n_7499 : A_7491} ->
                   ∀ {B_7500 : A_7491 -> L} ->
                     {(eq_4‹L› A_7491 m_7498 n_7499)} ->
                       ((B_7500) m_7498) -> ((B_7500) n_7499))
Logical.infer_tm(A_7491)
Logical.infer_tm(∀ {B_7505 : A_7491 -> L} ->
                   {(eq_4‹L› A_7491 m_7498 n_7504)} ->
                     ((B_7505) m_7498) -> ((B_7505) n_7504))
Logical.infer_tm(A_7491 -> L)
Logical.infer_tm(A_7491)
Logical.infer_tm(L)
Logical.infer_tm({(eq_4‹L› A_7491 m_7498 n_7504)} ->
                   ((B_7509) m_7498) -> ((B_7509) n_7504))
Logical.infer_tm((eq_4‹L› A_7491 m_7498 n_7504))
Logical.check_tm( A_7491, L )
Logical.infer_tm(A_7491)
Logical.assert_equal(L, L)
Logical.check_tm( m_7498, A_7491 )
Logical.infer_tm(m_7498)
Logical.assert_equal(A_7491, A_7491)
Logical.check_tm( n_7504, A_7491 )
Logical.infer_tm(n_7504)
Logical.assert_equal(A_7491, A_7491)
Logical.infer_tm(((B_7509) m_7498) -> ((B_7509) n_7504))
Logical.infer_tm(((B_7509) m_7498))
Logical.infer_tm(B_7509)
Logical.check_tm( m_7498, A_7491 )
Logical.infer_tm(m_7498)
Logical.assert_equal(A_7491, A_7491)
Logical.infer_tm(((B_7509) n_7504))
Logical.infer_tm(B_7509)
Logical.check_tm( n_7504, A_7491 )
Logical.infer_tm(n_7504)
Logical.assert_equal(A_7491, A_7491)
trans12.Program.case_intro(L)
Logical.infer_tm(L)
trans12.Program.case_intro(#A_7522)
Logical.infer_tm(A_7522)
trans12.Program.case_intro(#A_7522)
Logical.infer_tm(A_7522)
trans12.Program.case_intro(#A_7522 -> L)
Logical.infer_tm(A_7522 -> L)
Logical.infer_tm(A_7522)
Logical.infer_tm(L)
trans12.Program.case_intro((eq_4‹L› #A_7522 #m_7545 #n_7568))
Logical.infer_tm((eq_4‹L› A_7522 m_7545 n_7568))
Logical.check_tm( A_7522, L )
Logical.infer_tm(A_7522)
Logical.assert_equal(L, L)
Logical.check_tm( m_7545, A_7522 )
Logical.infer_tm(m_7545)
Logical.assert_equal(A_7522, A_7522)
Logical.check_tm( n_7568, A_7522 )
Logical.infer_tm(n_7568)
Logical.assert_equal(A_7522, A_7522)
trans12.Program.case_intro(((#B_7592) #m_7545))
Logical.infer_tm(((B_7592) m_7545))
Logical.infer_tm(B_7592)
Logical.check_tm( m_7545, A_7522 )
Logical.infer_tm(m_7545)
Logical.assert_equal(A_7522, A_7522)
Logical.infer_tm((eq_4‹L› A_7522 m_7545 n_7568))
Logical.check_tm( A_7522, L )
Logical.infer_tm(A_7522)
Logical.assert_equal(L, L)
Logical.check_tm( m_7545, A_7522 )
Logical.infer_tm(m_7545)
Logical.assert_equal(A_7522, A_7522)
Logical.check_tm( n_7568, A_7522 )
Logical.infer_tm(n_7568)
Logical.assert_equal(A_7522, A_7522)
trans12.Program.case_split(eqL_9, reflL_13)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹L› #A_7522 #m_7545 #n_7568),
      (eq_4‹L› #A_7522 #m_7545 #m_7545));
    {| eq_pat?(N #A_7522, A_7517 : L)
       eq_pat?(N #m_7545, m_7518 : #A_7522)
       eq_pat?(N #n_7568, n_7519 : #A_7522)
       eq_pat?(N #B_7592, B_7520 : #A_7522 -> L)
       eq_pat?(R #__7642, x_7521 : ((#B_7592) #m_7545)) ::: [] =>? #x_7521
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_7522, A_7517 : L)
  eq_pat?(N #m_7545, m_7518 : #A_7522)
  eq_pat?(N #n_7568, n_7519 : #A_7522)
  eq_pat?(N #B_7592, B_7520 : #A_7522 -> L)
  eq_pat?(R #__7642, x_7521 : ((#B_7592) #m_7545))
)
unify_global(
  eq_term?( (eq_4‹L› #A_7522 #m_7545 #n_7568),
    (eq_4‹L› #A_7522 #m_7545 #m_7545))
)
simpl_pprbm ~expand:false( #A_7522, #A_7517)
simpl_pprbm ~expand:false( #m_7545, #m_7518)
simpl_pprbm ~expand:false( #n_7568, #n_7519)
simpl_pprbm ~expand:false( #B_7592, #B_7520)
simpl_pprbm ~expand:false( #__7642, #x_7521)
simpl_pprbm ~expand:false( (eq_4‹L› #A_7522 #m_7545 #n_7568),
  (eq_4‹L› #A_7522 #m_7545 #m_7545))
simpl_pprbm ~expand:false( #A_7522, #A_7522)
simpl_pprbm ~expand:false( #m_7545, #m_7545)
simpl_pprbm ~expand:false( #n_7568, #m_7545)
case_coverage_ok( __7642, ((B_7592) n_7568))
Program.check_tm( __7642, ((B_7592) n_7568) )
Program.infer_tm(__7642)
Logical.assert_equal(((B_7592) n_7568), ((B_7592) n_7568))
trans12.Program.case_introed(((#B_7592) #m_7545))
trans12.Program.case_introed((eq_4‹L› #A_7522 #m_7545 #n_7568))
trans12.Program.case_introed(#A_7522 -> L)
trans12.Program.case_introed(#A_7522)
trans12.Program.case_introed(#A_7522)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_7739 : L} ->
                       ∀ {m_7740 : A_7739} ->
                         ∀ {n_7741 : A_7739} ->
                           ∀ {B_7742 : A_7739 -> L} ->
                             {(eq_4‹L› A_7739 m_7740 n_7741)} ->
                               ((B_7742) m_7740) -> ((B_7742) n_7741), 
∀ {A_7746 : L} ->
  ∀ {m_7747 : A_7746} ->
    ∀ {n_7748 : A_7746} ->
      ∀ {B_7749 : A_7746 -> L} ->
        {(eq_4‹L› A_7746 m_7747 n_7748)} ->
          ((B_7749) m_7747) -> ((B_7749) n_7748))
Logical.infer_tm(∀ {A_7760 : L} ->
                   ∀ {m_7761 : A_7760} ->
                     ∀ {n_7762 : A_7760} ->
                       ∀ {B_7763 : A_7760 -> U} ->
                         {(eq_4‹L› A_7760 m_7761 n_7762)} ->
                           ((B_7763) m_7761) -> ((B_7763) n_7762))
Logical.infer_tm(L)
Logical.infer_tm(∀ {m_7768 : A_7767} ->
                   ∀ {n_7769 : A_7767} ->
                     ∀ {B_7770 : A_7767 -> U} ->
                       {(eq_4‹L› A_7767 m_7768 n_7769)} ->
                         ((B_7770) m_7768) -> ((B_7770) n_7769))
Logical.infer_tm(A_7767)
Logical.infer_tm(∀ {n_7775 : A_7767} ->
                   ∀ {B_7776 : A_7767 -> U} ->
                     {(eq_4‹L› A_7767 m_7774 n_7775)} ->
                       ((B_7776) m_7774) -> ((B_7776) n_7775))
Logical.infer_tm(A_7767)
Logical.infer_tm(∀ {B_7781 : A_7767 -> U} ->
                   {(eq_4‹L› A_7767 m_7774 n_7780)} ->
                     ((B_7781) m_7774) -> ((B_7781) n_7780))
Logical.infer_tm(A_7767 -> U)
Logical.infer_tm(A_7767)
Logical.infer_tm(U)
Logical.infer_tm({(eq_4‹L› A_7767 m_7774 n_7780)} ->
                   ((B_7785) m_7774) -> ((B_7785) n_7780))
Logical.infer_tm((eq_4‹L› A_7767 m_7774 n_7780))
Logical.check_tm( A_7767, L )
Logical.infer_tm(A_7767)
Logical.assert_equal(L, L)
Logical.check_tm( m_7774, A_7767 )
Logical.infer_tm(m_7774)
Logical.assert_equal(A_7767, A_7767)
Logical.check_tm( n_7780, A_7767 )
Logical.infer_tm(n_7780)
Logical.assert_equal(A_7767, A_7767)
Logical.infer_tm(((B_7785) m_7774) -> ((B_7785) n_7780))
Logical.infer_tm(((B_7785) m_7774))
Logical.infer_tm(B_7785)
Logical.check_tm( m_7774, A_7767 )
Logical.infer_tm(m_7774)
Logical.assert_equal(A_7767, A_7767)
Logical.infer_tm(((B_7785) n_7780))
Logical.infer_tm(B_7785)
Logical.check_tm( n_7780, A_7767 )
Logical.infer_tm(n_7780)
Logical.assert_equal(A_7767, A_7767)
Program.check_tm(
  function rwl_7793 :
    ∀ {A_7794 : L} ->
      ∀ {m_7795 : A_7794} ->
        ∀ {n_7796 : A_7794} ->
          ∀ {B_7797 : A_7794 -> U} ->
            {(eq_4‹L› A_7794 m_7795 n_7796)} ->
              ((B_7797) m_7795) -> ((B_7797) n_7796)
  | A_7801 m_7802 n_7803 B_7804 refl_6 x_7805 => x_7805,
  ∀ {A_7806 : L} ->
    ∀ {m_7807 : A_7806} ->
      ∀ {n_7808 : A_7806} ->
        ∀ {B_7809 : A_7806 -> U} ->
          {(eq_4‹L› A_7806 m_7807 n_7808)} ->
            ((B_7809) m_7807) -> ((B_7809) n_7808)
)
Program.infer_tm(function rwl_7813 :
                   ∀ {A_7814 : L} ->
                     ∀ {m_7815 : A_7814} ->
                       ∀ {n_7816 : A_7814} ->
                         ∀ {B_7817 : A_7814 -> U} ->
                           {(eq_4‹L› A_7814 m_7815 n_7816)} ->
                             ((B_7817) m_7815) -> ((B_7817) n_7816)
                 | A_7821 m_7822 n_7823 B_7824 refl_6 x_7825 => x_7825)
Logical.infer_tm(∀ {A_7827 : L} ->
                   ∀ {m_7828 : A_7827} ->
                     ∀ {n_7829 : A_7827} ->
                       ∀ {B_7830 : A_7827 -> U} ->
                         {(eq_4‹L› A_7827 m_7828 n_7829)} ->
                           ((B_7830) m_7828) -> ((B_7830) n_7829))
Logical.infer_tm(L)
Logical.infer_tm(∀ {m_7835 : A_7834} ->
                   ∀ {n_7836 : A_7834} ->
                     ∀ {B_7837 : A_7834 -> U} ->
                       {(eq_4‹L› A_7834 m_7835 n_7836)} ->
                         ((B_7837) m_7835) -> ((B_7837) n_7836))
Logical.infer_tm(A_7834)
Logical.infer_tm(∀ {n_7842 : A_7834} ->
                   ∀ {B_7843 : A_7834 -> U} ->
                     {(eq_4‹L› A_7834 m_7841 n_7842)} ->
                       ((B_7843) m_7841) -> ((B_7843) n_7842))
Logical.infer_tm(A_7834)
Logical.infer_tm(∀ {B_7848 : A_7834 -> U} ->
                   {(eq_4‹L› A_7834 m_7841 n_7847)} ->
                     ((B_7848) m_7841) -> ((B_7848) n_7847))
Logical.infer_tm(A_7834 -> U)
Logical.infer_tm(A_7834)
Logical.infer_tm(U)
Logical.infer_tm({(eq_4‹L› A_7834 m_7841 n_7847)} ->
                   ((B_7852) m_7841) -> ((B_7852) n_7847))
Logical.infer_tm((eq_4‹L› A_7834 m_7841 n_7847))
Logical.check_tm( A_7834, L )
Logical.infer_tm(A_7834)
Logical.assert_equal(L, L)
Logical.check_tm( m_7841, A_7834 )
Logical.infer_tm(m_7841)
Logical.assert_equal(A_7834, A_7834)
Logical.check_tm( n_7847, A_7834 )
Logical.infer_tm(n_7847)
Logical.assert_equal(A_7834, A_7834)
Logical.infer_tm(((B_7852) m_7841) -> ((B_7852) n_7847))
Logical.infer_tm(((B_7852) m_7841))
Logical.infer_tm(B_7852)
Logical.check_tm( m_7841, A_7834 )
Logical.infer_tm(m_7841)
Logical.assert_equal(A_7834, A_7834)
Logical.infer_tm(((B_7852) n_7847))
Logical.infer_tm(B_7852)
Logical.check_tm( n_7847, A_7834 )
Logical.infer_tm(n_7847)
Logical.assert_equal(A_7834, A_7834)
trans12.Program.case_intro(L)
Logical.infer_tm(L)
trans12.Program.case_intro(#A_7865)
Logical.infer_tm(A_7865)
trans12.Program.case_intro(#A_7865)
Logical.infer_tm(A_7865)
trans12.Program.case_intro(#A_7865 -> U)
Logical.infer_tm(A_7865 -> U)
Logical.infer_tm(A_7865)
Logical.infer_tm(U)
trans12.Program.case_intro((eq_4‹L› #A_7865 #m_7888 #n_7911))
Logical.infer_tm((eq_4‹L› A_7865 m_7888 n_7911))
Logical.check_tm( A_7865, L )
Logical.infer_tm(A_7865)
Logical.assert_equal(L, L)
Logical.check_tm( m_7888, A_7865 )
Logical.infer_tm(m_7888)
Logical.assert_equal(A_7865, A_7865)
Logical.check_tm( n_7911, A_7865 )
Logical.infer_tm(n_7911)
Logical.assert_equal(A_7865, A_7865)
trans12.Program.case_intro(((#B_7935) #m_7888))
Logical.infer_tm(((B_7935) m_7888))
Logical.infer_tm(B_7935)
Logical.check_tm( m_7888, A_7865 )
Logical.infer_tm(m_7888)
Logical.assert_equal(A_7865, A_7865)
Logical.infer_tm((eq_4‹L› A_7865 m_7888 n_7911))
Logical.check_tm( A_7865, L )
Logical.infer_tm(A_7865)
Logical.assert_equal(L, L)
Logical.check_tm( m_7888, A_7865 )
Logical.infer_tm(m_7888)
Logical.assert_equal(A_7865, A_7865)
Logical.check_tm( n_7911, A_7865 )
Logical.infer_tm(n_7911)
Logical.assert_equal(A_7865, A_7865)
trans12.Program.case_split(eqL_9, reflL_13)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹L› #A_7865 #m_7888 #n_7911),
      (eq_4‹L› #A_7865 #m_7888 #m_7888));
    {| eq_pat?(N #A_7865, A_7860 : L)
       eq_pat?(N #m_7888, m_7861 : #A_7865)
       eq_pat?(N #n_7911, n_7862 : #A_7865)
       eq_pat?(N #B_7935, B_7863 : #A_7865 -> U)
       eq_pat?(R #__7985, x_7864 : ((#B_7935) #m_7888)) ::: [] =>? #x_7864
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_7865, A_7860 : L)
  eq_pat?(N #m_7888, m_7861 : #A_7865)
  eq_pat?(N #n_7911, n_7862 : #A_7865)
  eq_pat?(N #B_7935, B_7863 : #A_7865 -> U)
  eq_pat?(R #__7985, x_7864 : ((#B_7935) #m_7888))
)
unify_global(
  eq_term?( (eq_4‹L› #A_7865 #m_7888 #n_7911),
    (eq_4‹L› #A_7865 #m_7888 #m_7888))
)
simpl_pprbm ~expand:false( #A_7865, #A_7860)
simpl_pprbm ~expand:false( #m_7888, #m_7861)
simpl_pprbm ~expand:false( #n_7911, #n_7862)
simpl_pprbm ~expand:false( #B_7935, #B_7863)
simpl_pprbm ~expand:false( #__7985, #x_7864)
simpl_pprbm ~expand:false( (eq_4‹L› #A_7865 #m_7888 #n_7911),
  (eq_4‹L› #A_7865 #m_7888 #m_7888))
simpl_pprbm ~expand:false( #A_7865, #A_7865)
simpl_pprbm ~expand:false( #m_7888, #m_7888)
simpl_pprbm ~expand:false( #n_7911, #m_7888)
case_coverage_ok( __7985, ((B_7935) n_7911))
Program.check_tm( __7985, ((B_7935) n_7911) )
Program.infer_tm(__7985)
Logical.assert_equal(((B_7935) n_7911), ((B_7935) n_7911))
trans12.Program.case_introed(((#B_7935) #m_7888))
trans12.Program.case_introed((eq_4‹L› #A_7865 #m_7888 #n_7911))
trans12.Program.case_introed(#A_7865 -> U)
trans12.Program.case_introed(#A_7865)
trans12.Program.case_introed(#A_7865)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_8082 : L} ->
                       ∀ {m_8083 : A_8082} ->
                         ∀ {n_8084 : A_8082} ->
                           ∀ {B_8085 : A_8082 -> U} ->
                             {(eq_4‹L› A_8082 m_8083 n_8084)} ->
                               ((B_8085) m_8083) -> ((B_8085) n_8084), 
∀ {A_8089 : L} ->
  ∀ {m_8090 : A_8089} ->
    ∀ {n_8091 : A_8089} ->
      ∀ {B_8092 : A_8089 -> U} ->
        {(eq_4‹L› A_8089 m_8090 n_8091)} ->
          ((B_8092) m_8090) -> ((B_8092) n_8091))
Logical.infer_tm(∀ {A_8103 : U} ->
                   ∀ {m_8104 : A_8103} ->
                     ∀ {n_8105 : A_8103} ->
                       ∀ {B_8106 : A_8103 -> L} ->
                         {(eq_4‹U› A_8103 m_8104 n_8105)} ->
                           ((B_8106) m_8104) -> ((B_8106) n_8105))
Logical.infer_tm(U)
Logical.infer_tm(∀ {m_8111 : A_8110} ->
                   ∀ {n_8112 : A_8110} ->
                     ∀ {B_8113 : A_8110 -> L} ->
                       {(eq_4‹U› A_8110 m_8111 n_8112)} ->
                         ((B_8113) m_8111) -> ((B_8113) n_8112))
Logical.infer_tm(A_8110)
Logical.infer_tm(∀ {n_8118 : A_8110} ->
                   ∀ {B_8119 : A_8110 -> L} ->
                     {(eq_4‹U› A_8110 m_8117 n_8118)} ->
                       ((B_8119) m_8117) -> ((B_8119) n_8118))
Logical.infer_tm(A_8110)
Logical.infer_tm(∀ {B_8124 : A_8110 -> L} ->
                   {(eq_4‹U› A_8110 m_8117 n_8123)} ->
                     ((B_8124) m_8117) -> ((B_8124) n_8123))
Logical.infer_tm(A_8110 -> L)
Logical.infer_tm(A_8110)
Logical.infer_tm(L)
Logical.infer_tm({(eq_4‹U› A_8110 m_8117 n_8123)} ->
                   ((B_8128) m_8117) -> ((B_8128) n_8123))
Logical.infer_tm((eq_4‹U› A_8110 m_8117 n_8123))
Logical.check_tm( A_8110, U )
Logical.infer_tm(A_8110)
Logical.assert_equal(U, U)
Logical.check_tm( m_8117, A_8110 )
Logical.infer_tm(m_8117)
Logical.assert_equal(A_8110, A_8110)
Logical.check_tm( n_8123, A_8110 )
Logical.infer_tm(n_8123)
Logical.assert_equal(A_8110, A_8110)
Logical.infer_tm(((B_8128) m_8117) -> ((B_8128) n_8123))
Logical.infer_tm(((B_8128) m_8117))
Logical.infer_tm(B_8128)
Logical.check_tm( m_8117, A_8110 )
Logical.infer_tm(m_8117)
Logical.assert_equal(A_8110, A_8110)
Logical.infer_tm(((B_8128) n_8123))
Logical.infer_tm(B_8128)
Logical.check_tm( n_8123, A_8110 )
Logical.infer_tm(n_8123)
Logical.assert_equal(A_8110, A_8110)
Program.check_tm(
  function rwl_8136 :
    ∀ {A_8137 : U} ->
      ∀ {m_8138 : A_8137} ->
        ∀ {n_8139 : A_8137} ->
          ∀ {B_8140 : A_8137 -> L} ->
            {(eq_4‹U› A_8137 m_8138 n_8139)} ->
              ((B_8140) m_8138) -> ((B_8140) n_8139)
  | A_8144 m_8145 n_8146 B_8147 refl_6 x_8148 => x_8148,
  ∀ {A_8149 : U} ->
    ∀ {m_8150 : A_8149} ->
      ∀ {n_8151 : A_8149} ->
        ∀ {B_8152 : A_8149 -> L} ->
          {(eq_4‹U› A_8149 m_8150 n_8151)} ->
            ((B_8152) m_8150) -> ((B_8152) n_8151)
)
Program.infer_tm(function rwl_8156 :
                   ∀ {A_8157 : U} ->
                     ∀ {m_8158 : A_8157} ->
                       ∀ {n_8159 : A_8157} ->
                         ∀ {B_8160 : A_8157 -> L} ->
                           {(eq_4‹U› A_8157 m_8158 n_8159)} ->
                             ((B_8160) m_8158) -> ((B_8160) n_8159)
                 | A_8164 m_8165 n_8166 B_8167 refl_6 x_8168 => x_8168)
Logical.infer_tm(∀ {A_8170 : U} ->
                   ∀ {m_8171 : A_8170} ->
                     ∀ {n_8172 : A_8170} ->
                       ∀ {B_8173 : A_8170 -> L} ->
                         {(eq_4‹U› A_8170 m_8171 n_8172)} ->
                           ((B_8173) m_8171) -> ((B_8173) n_8172))
Logical.infer_tm(U)
Logical.infer_tm(∀ {m_8178 : A_8177} ->
                   ∀ {n_8179 : A_8177} ->
                     ∀ {B_8180 : A_8177 -> L} ->
                       {(eq_4‹U› A_8177 m_8178 n_8179)} ->
                         ((B_8180) m_8178) -> ((B_8180) n_8179))
Logical.infer_tm(A_8177)
Logical.infer_tm(∀ {n_8185 : A_8177} ->
                   ∀ {B_8186 : A_8177 -> L} ->
                     {(eq_4‹U› A_8177 m_8184 n_8185)} ->
                       ((B_8186) m_8184) -> ((B_8186) n_8185))
Logical.infer_tm(A_8177)
Logical.infer_tm(∀ {B_8191 : A_8177 -> L} ->
                   {(eq_4‹U› A_8177 m_8184 n_8190)} ->
                     ((B_8191) m_8184) -> ((B_8191) n_8190))
Logical.infer_tm(A_8177 -> L)
Logical.infer_tm(A_8177)
Logical.infer_tm(L)
Logical.infer_tm({(eq_4‹U› A_8177 m_8184 n_8190)} ->
                   ((B_8195) m_8184) -> ((B_8195) n_8190))
Logical.infer_tm((eq_4‹U› A_8177 m_8184 n_8190))
Logical.check_tm( A_8177, U )
Logical.infer_tm(A_8177)
Logical.assert_equal(U, U)
Logical.check_tm( m_8184, A_8177 )
Logical.infer_tm(m_8184)
Logical.assert_equal(A_8177, A_8177)
Logical.check_tm( n_8190, A_8177 )
Logical.infer_tm(n_8190)
Logical.assert_equal(A_8177, A_8177)
Logical.infer_tm(((B_8195) m_8184) -> ((B_8195) n_8190))
Logical.infer_tm(((B_8195) m_8184))
Logical.infer_tm(B_8195)
Logical.check_tm( m_8184, A_8177 )
Logical.infer_tm(m_8184)
Logical.assert_equal(A_8177, A_8177)
Logical.infer_tm(((B_8195) n_8190))
Logical.infer_tm(B_8195)
Logical.check_tm( n_8190, A_8177 )
Logical.infer_tm(n_8190)
Logical.assert_equal(A_8177, A_8177)
trans12.Program.case_intro(U)
Logical.infer_tm(U)
trans12.Program.case_intro(#A_8208)
Logical.infer_tm(A_8208)
trans12.Program.case_intro(#A_8208)
Logical.infer_tm(A_8208)
trans12.Program.case_intro(#A_8208 -> L)
Logical.infer_tm(A_8208 -> L)
Logical.infer_tm(A_8208)
Logical.infer_tm(L)
trans12.Program.case_intro((eq_4‹U› #A_8208 #m_8231 #n_8254))
Logical.infer_tm((eq_4‹U› A_8208 m_8231 n_8254))
Logical.check_tm( A_8208, U )
Logical.infer_tm(A_8208)
Logical.assert_equal(U, U)
Logical.check_tm( m_8231, A_8208 )
Logical.infer_tm(m_8231)
Logical.assert_equal(A_8208, A_8208)
Logical.check_tm( n_8254, A_8208 )
Logical.infer_tm(n_8254)
Logical.assert_equal(A_8208, A_8208)
trans12.Program.case_intro(((#B_8278) #m_8231))
Logical.infer_tm(((B_8278) m_8231))
Logical.infer_tm(B_8278)
Logical.check_tm( m_8231, A_8208 )
Logical.infer_tm(m_8231)
Logical.assert_equal(A_8208, A_8208)
Logical.infer_tm((eq_4‹U› A_8208 m_8231 n_8254))
Logical.check_tm( A_8208, U )
Logical.infer_tm(A_8208)
Logical.assert_equal(U, U)
Logical.check_tm( m_8231, A_8208 )
Logical.infer_tm(m_8231)
Logical.assert_equal(A_8208, A_8208)
Logical.check_tm( n_8254, A_8208 )
Logical.infer_tm(n_8254)
Logical.assert_equal(A_8208, A_8208)
trans12.Program.case_split(eqU_10, reflU_14)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹U› #A_8208 #m_8231 #n_8254),
      (eq_4‹U› #A_8208 #m_8231 #m_8231));
    {| eq_pat?(N #A_8208, A_8203 : U)
       eq_pat?(N #m_8231, m_8204 : #A_8208)
       eq_pat?(N #n_8254, n_8205 : #A_8208)
       eq_pat?(N #B_8278, B_8206 : #A_8208 -> L)
       eq_pat?(R #__8328, x_8207 : ((#B_8278) #m_8231)) ::: [] =>? #x_8207
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_8208, A_8203 : U)
  eq_pat?(N #m_8231, m_8204 : #A_8208)
  eq_pat?(N #n_8254, n_8205 : #A_8208)
  eq_pat?(N #B_8278, B_8206 : #A_8208 -> L)
  eq_pat?(R #__8328, x_8207 : ((#B_8278) #m_8231))
)
unify_global(
  eq_term?( (eq_4‹U› #A_8208 #m_8231 #n_8254),
    (eq_4‹U› #A_8208 #m_8231 #m_8231))
)
simpl_pprbm ~expand:false( #A_8208, #A_8203)
simpl_pprbm ~expand:false( #m_8231, #m_8204)
simpl_pprbm ~expand:false( #n_8254, #n_8205)
simpl_pprbm ~expand:false( #B_8278, #B_8206)
simpl_pprbm ~expand:false( #__8328, #x_8207)
simpl_pprbm ~expand:false( (eq_4‹U› #A_8208 #m_8231 #n_8254),
  (eq_4‹U› #A_8208 #m_8231 #m_8231))
simpl_pprbm ~expand:false( #A_8208, #A_8208)
simpl_pprbm ~expand:false( #m_8231, #m_8231)
simpl_pprbm ~expand:false( #n_8254, #m_8231)
case_coverage_ok( __8328, ((B_8278) n_8254))
Program.check_tm( __8328, ((B_8278) n_8254) )
Program.infer_tm(__8328)
Logical.assert_equal(((B_8278) n_8254), ((B_8278) n_8254))
trans12.Program.case_introed(((#B_8278) #m_8231))
trans12.Program.case_introed((eq_4‹U› #A_8208 #m_8231 #n_8254))
trans12.Program.case_introed(#A_8208 -> L)
trans12.Program.case_introed(#A_8208)
trans12.Program.case_introed(#A_8208)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_8425 : U} ->
                       ∀ {m_8426 : A_8425} ->
                         ∀ {n_8427 : A_8425} ->
                           ∀ {B_8428 : A_8425 -> L} ->
                             {(eq_4‹U› A_8425 m_8426 n_8427)} ->
                               ((B_8428) m_8426) -> ((B_8428) n_8427), 
∀ {A_8432 : U} ->
  ∀ {m_8433 : A_8432} ->
    ∀ {n_8434 : A_8432} ->
      ∀ {B_8435 : A_8432 -> L} ->
        {(eq_4‹U› A_8432 m_8433 n_8434)} ->
          ((B_8435) m_8433) -> ((B_8435) n_8434))
Logical.infer_tm(∀ {A_8446 : U} ->
                   ∀ {m_8447 : A_8446} ->
                     ∀ {n_8448 : A_8446} ->
                       ∀ {B_8449 : A_8446 -> U} ->
                         {(eq_4‹U› A_8446 m_8447 n_8448)} ->
                           ((B_8449) m_8447) -> ((B_8449) n_8448))
Logical.infer_tm(U)
Logical.infer_tm(∀ {m_8454 : A_8453} ->
                   ∀ {n_8455 : A_8453} ->
                     ∀ {B_8456 : A_8453 -> U} ->
                       {(eq_4‹U› A_8453 m_8454 n_8455)} ->
                         ((B_8456) m_8454) -> ((B_8456) n_8455))
Logical.infer_tm(A_8453)
Logical.infer_tm(∀ {n_8461 : A_8453} ->
                   ∀ {B_8462 : A_8453 -> U} ->
                     {(eq_4‹U› A_8453 m_8460 n_8461)} ->
                       ((B_8462) m_8460) -> ((B_8462) n_8461))
Logical.infer_tm(A_8453)
Logical.infer_tm(∀ {B_8467 : A_8453 -> U} ->
                   {(eq_4‹U› A_8453 m_8460 n_8466)} ->
                     ((B_8467) m_8460) -> ((B_8467) n_8466))
Logical.infer_tm(A_8453 -> U)
Logical.infer_tm(A_8453)
Logical.infer_tm(U)
Logical.infer_tm({(eq_4‹U› A_8453 m_8460 n_8466)} ->
                   ((B_8471) m_8460) -> ((B_8471) n_8466))
Logical.infer_tm((eq_4‹U› A_8453 m_8460 n_8466))
Logical.check_tm( A_8453, U )
Logical.infer_tm(A_8453)
Logical.assert_equal(U, U)
Logical.check_tm( m_8460, A_8453 )
Logical.infer_tm(m_8460)
Logical.assert_equal(A_8453, A_8453)
Logical.check_tm( n_8466, A_8453 )
Logical.infer_tm(n_8466)
Logical.assert_equal(A_8453, A_8453)
Logical.infer_tm(((B_8471) m_8460) -> ((B_8471) n_8466))
Logical.infer_tm(((B_8471) m_8460))
Logical.infer_tm(B_8471)
Logical.check_tm( m_8460, A_8453 )
Logical.infer_tm(m_8460)
Logical.assert_equal(A_8453, A_8453)
Logical.infer_tm(((B_8471) n_8466))
Logical.infer_tm(B_8471)
Logical.check_tm( n_8466, A_8453 )
Logical.infer_tm(n_8466)
Logical.assert_equal(A_8453, A_8453)
Program.check_tm(
  function rwl_8479 :
    ∀ {A_8480 : U} ->
      ∀ {m_8481 : A_8480} ->
        ∀ {n_8482 : A_8480} ->
          ∀ {B_8483 : A_8480 -> U} ->
            {(eq_4‹U› A_8480 m_8481 n_8482)} ->
              ((B_8483) m_8481) -> ((B_8483) n_8482)
  | A_8487 m_8488 n_8489 B_8490 refl_6 x_8491 => x_8491,
  ∀ {A_8492 : U} ->
    ∀ {m_8493 : A_8492} ->
      ∀ {n_8494 : A_8492} ->
        ∀ {B_8495 : A_8492 -> U} ->
          {(eq_4‹U› A_8492 m_8493 n_8494)} ->
            ((B_8495) m_8493) -> ((B_8495) n_8494)
)
Program.infer_tm(function rwl_8499 :
                   ∀ {A_8500 : U} ->
                     ∀ {m_8501 : A_8500} ->
                       ∀ {n_8502 : A_8500} ->
                         ∀ {B_8503 : A_8500 -> U} ->
                           {(eq_4‹U› A_8500 m_8501 n_8502)} ->
                             ((B_8503) m_8501) -> ((B_8503) n_8502)
                 | A_8507 m_8508 n_8509 B_8510 refl_6 x_8511 => x_8511)
Logical.infer_tm(∀ {A_8513 : U} ->
                   ∀ {m_8514 : A_8513} ->
                     ∀ {n_8515 : A_8513} ->
                       ∀ {B_8516 : A_8513 -> U} ->
                         {(eq_4‹U› A_8513 m_8514 n_8515)} ->
                           ((B_8516) m_8514) -> ((B_8516) n_8515))
Logical.infer_tm(U)
Logical.infer_tm(∀ {m_8521 : A_8520} ->
                   ∀ {n_8522 : A_8520} ->
                     ∀ {B_8523 : A_8520 -> U} ->
                       {(eq_4‹U› A_8520 m_8521 n_8522)} ->
                         ((B_8523) m_8521) -> ((B_8523) n_8522))
Logical.infer_tm(A_8520)
Logical.infer_tm(∀ {n_8528 : A_8520} ->
                   ∀ {B_8529 : A_8520 -> U} ->
                     {(eq_4‹U› A_8520 m_8527 n_8528)} ->
                       ((B_8529) m_8527) -> ((B_8529) n_8528))
Logical.infer_tm(A_8520)
Logical.infer_tm(∀ {B_8534 : A_8520 -> U} ->
                   {(eq_4‹U› A_8520 m_8527 n_8533)} ->
                     ((B_8534) m_8527) -> ((B_8534) n_8533))
Logical.infer_tm(A_8520 -> U)
Logical.infer_tm(A_8520)
Logical.infer_tm(U)
Logical.infer_tm({(eq_4‹U› A_8520 m_8527 n_8533)} ->
                   ((B_8538) m_8527) -> ((B_8538) n_8533))
Logical.infer_tm((eq_4‹U› A_8520 m_8527 n_8533))
Logical.check_tm( A_8520, U )
Logical.infer_tm(A_8520)
Logical.assert_equal(U, U)
Logical.check_tm( m_8527, A_8520 )
Logical.infer_tm(m_8527)
Logical.assert_equal(A_8520, A_8520)
Logical.check_tm( n_8533, A_8520 )
Logical.infer_tm(n_8533)
Logical.assert_equal(A_8520, A_8520)
Logical.infer_tm(((B_8538) m_8527) -> ((B_8538) n_8533))
Logical.infer_tm(((B_8538) m_8527))
Logical.infer_tm(B_8538)
Logical.check_tm( m_8527, A_8520 )
Logical.infer_tm(m_8527)
Logical.assert_equal(A_8520, A_8520)
Logical.infer_tm(((B_8538) n_8533))
Logical.infer_tm(B_8538)
Logical.check_tm( n_8533, A_8520 )
Logical.infer_tm(n_8533)
Logical.assert_equal(A_8520, A_8520)
trans12.Program.case_intro(U)
Logical.infer_tm(U)
trans12.Program.case_intro(#A_8551)
Logical.infer_tm(A_8551)
trans12.Program.case_intro(#A_8551)
Logical.infer_tm(A_8551)
trans12.Program.case_intro(#A_8551 -> U)
Logical.infer_tm(A_8551 -> U)
Logical.infer_tm(A_8551)
Logical.infer_tm(U)
trans12.Program.case_intro((eq_4‹U› #A_8551 #m_8574 #n_8597))
Logical.infer_tm((eq_4‹U› A_8551 m_8574 n_8597))
Logical.check_tm( A_8551, U )
Logical.infer_tm(A_8551)
Logical.assert_equal(U, U)
Logical.check_tm( m_8574, A_8551 )
Logical.infer_tm(m_8574)
Logical.assert_equal(A_8551, A_8551)
Logical.check_tm( n_8597, A_8551 )
Logical.infer_tm(n_8597)
Logical.assert_equal(A_8551, A_8551)
trans12.Program.case_intro(((#B_8621) #m_8574))
Logical.infer_tm(((B_8621) m_8574))
Logical.infer_tm(B_8621)
Logical.check_tm( m_8574, A_8551 )
Logical.infer_tm(m_8574)
Logical.assert_equal(A_8551, A_8551)
Logical.infer_tm((eq_4‹U› A_8551 m_8574 n_8597))
Logical.check_tm( A_8551, U )
Logical.infer_tm(A_8551)
Logical.assert_equal(U, U)
Logical.check_tm( m_8574, A_8551 )
Logical.infer_tm(m_8574)
Logical.assert_equal(A_8551, A_8551)
Logical.check_tm( n_8597, A_8551 )
Logical.infer_tm(n_8597)
Logical.assert_equal(A_8551, A_8551)
trans12.Program.case_split(eqU_10, reflU_14)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹U› #A_8551 #m_8574 #n_8597),
      (eq_4‹U› #A_8551 #m_8574 #m_8574));
    {| eq_pat?(N #A_8551, A_8546 : U)
       eq_pat?(N #m_8574, m_8547 : #A_8551)
       eq_pat?(N #n_8597, n_8548 : #A_8551)
       eq_pat?(N #B_8621, B_8549 : #A_8551 -> U)
       eq_pat?(R #__8671, x_8550 : ((#B_8621) #m_8574)) ::: [] =>? #x_8550
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_8551, A_8546 : U)
  eq_pat?(N #m_8574, m_8547 : #A_8551)
  eq_pat?(N #n_8597, n_8548 : #A_8551)
  eq_pat?(N #B_8621, B_8549 : #A_8551 -> U)
  eq_pat?(R #__8671, x_8550 : ((#B_8621) #m_8574))
)
unify_global(
  eq_term?( (eq_4‹U› #A_8551 #m_8574 #n_8597),
    (eq_4‹U› #A_8551 #m_8574 #m_8574))
)
simpl_pprbm ~expand:false( #A_8551, #A_8546)
simpl_pprbm ~expand:false( #m_8574, #m_8547)
simpl_pprbm ~expand:false( #n_8597, #n_8548)
simpl_pprbm ~expand:false( #B_8621, #B_8549)
simpl_pprbm ~expand:false( #__8671, #x_8550)
simpl_pprbm ~expand:false( (eq_4‹U› #A_8551 #m_8574 #n_8597),
  (eq_4‹U› #A_8551 #m_8574 #m_8574))
simpl_pprbm ~expand:false( #A_8551, #A_8551)
simpl_pprbm ~expand:false( #m_8574, #m_8574)
simpl_pprbm ~expand:false( #n_8597, #m_8574)
case_coverage_ok( __8671, ((B_8621) n_8597))
Program.check_tm( __8671, ((B_8621) n_8597) )
Program.infer_tm(__8671)
Logical.assert_equal(((B_8621) n_8597), ((B_8621) n_8597))
trans12.Program.case_introed(((#B_8621) #m_8574))
trans12.Program.case_introed((eq_4‹U› #A_8551 #m_8574 #n_8597))
trans12.Program.case_introed(#A_8551 -> U)
trans12.Program.case_introed(#A_8551)
trans12.Program.case_introed(#A_8551)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_8768 : U} ->
                       ∀ {m_8769 : A_8768} ->
                         ∀ {n_8770 : A_8768} ->
                           ∀ {B_8771 : A_8768 -> U} ->
                             {(eq_4‹U› A_8768 m_8769 n_8770)} ->
                               ((B_8771) m_8769) -> ((B_8771) n_8770), 
∀ {A_8775 : U} ->
  ∀ {m_8776 : A_8775} ->
    ∀ {n_8777 : A_8775} ->
      ∀ {B_8778 : A_8775 -> U} ->
        {(eq_4‹U› A_8775 m_8776 n_8777)} ->
          ((B_8778) m_8776) -> ((B_8778) n_8777))
Logical.infer_tm(∀ {A_8789 : L} ->
                   ∀ {m_8790 : A_8789} ->
                     ∀ {n_8791 : A_8789} ->
                       ∀ {B_8792 : A_8789 -> L} ->
                         {(eq_4‹L› A_8789 m_8790 n_8791)} ->
                           ((B_8792) n_8791) -> ((B_8792) m_8790))
Logical.infer_tm(L)
Logical.infer_tm(∀ {m_8797 : A_8796} ->
                   ∀ {n_8798 : A_8796} ->
                     ∀ {B_8799 : A_8796 -> L} ->
                       {(eq_4‹L› A_8796 m_8797 n_8798)} ->
                         ((B_8799) n_8798) -> ((B_8799) m_8797))
Logical.infer_tm(A_8796)
Logical.infer_tm(∀ {n_8804 : A_8796} ->
                   ∀ {B_8805 : A_8796 -> L} ->
                     {(eq_4‹L› A_8796 m_8803 n_8804)} ->
                       ((B_8805) n_8804) -> ((B_8805) m_8803))
Logical.infer_tm(A_8796)
Logical.infer_tm(∀ {B_8810 : A_8796 -> L} ->
                   {(eq_4‹L› A_8796 m_8803 n_8809)} ->
                     ((B_8810) n_8809) -> ((B_8810) m_8803))
Logical.infer_tm(A_8796 -> L)
Logical.infer_tm(A_8796)
Logical.infer_tm(L)
Logical.infer_tm({(eq_4‹L› A_8796 m_8803 n_8809)} ->
                   ((B_8814) n_8809) -> ((B_8814) m_8803))
Logical.infer_tm((eq_4‹L› A_8796 m_8803 n_8809))
Logical.check_tm( A_8796, L )
Logical.infer_tm(A_8796)
Logical.assert_equal(L, L)
Logical.check_tm( m_8803, A_8796 )
Logical.infer_tm(m_8803)
Logical.assert_equal(A_8796, A_8796)
Logical.check_tm( n_8809, A_8796 )
Logical.infer_tm(n_8809)
Logical.assert_equal(A_8796, A_8796)
Logical.infer_tm(((B_8814) n_8809) -> ((B_8814) m_8803))
Logical.infer_tm(((B_8814) n_8809))
Logical.infer_tm(B_8814)
Logical.check_tm( n_8809, A_8796 )
Logical.infer_tm(n_8809)
Logical.assert_equal(A_8796, A_8796)
Logical.infer_tm(((B_8814) m_8803))
Logical.infer_tm(B_8814)
Logical.check_tm( m_8803, A_8796 )
Logical.infer_tm(m_8803)
Logical.assert_equal(A_8796, A_8796)
Program.check_tm(
  function rwr_8822 :
    ∀ {A_8823 : L} ->
      ∀ {m_8824 : A_8823} ->
        ∀ {n_8825 : A_8823} ->
          ∀ {B_8826 : A_8823 -> L} ->
            {(eq_4‹L› A_8823 m_8824 n_8825)} ->
              ((B_8826) n_8825) -> ((B_8826) m_8824)
  | A_8830 m_8831 n_8832 B_8833 refl_6 x_8834 => x_8834,
  ∀ {A_8835 : L} ->
    ∀ {m_8836 : A_8835} ->
      ∀ {n_8837 : A_8835} ->
        ∀ {B_8838 : A_8835 -> L} ->
          {(eq_4‹L› A_8835 m_8836 n_8837)} ->
            ((B_8838) n_8837) -> ((B_8838) m_8836)
)
Program.infer_tm(function rwr_8842 :
                   ∀ {A_8843 : L} ->
                     ∀ {m_8844 : A_8843} ->
                       ∀ {n_8845 : A_8843} ->
                         ∀ {B_8846 : A_8843 -> L} ->
                           {(eq_4‹L› A_8843 m_8844 n_8845)} ->
                             ((B_8846) n_8845) -> ((B_8846) m_8844)
                 | A_8850 m_8851 n_8852 B_8853 refl_6 x_8854 => x_8854)
Logical.infer_tm(∀ {A_8856 : L} ->
                   ∀ {m_8857 : A_8856} ->
                     ∀ {n_8858 : A_8856} ->
                       ∀ {B_8859 : A_8856 -> L} ->
                         {(eq_4‹L› A_8856 m_8857 n_8858)} ->
                           ((B_8859) n_8858) -> ((B_8859) m_8857))
Logical.infer_tm(L)
Logical.infer_tm(∀ {m_8864 : A_8863} ->
                   ∀ {n_8865 : A_8863} ->
                     ∀ {B_8866 : A_8863 -> L} ->
                       {(eq_4‹L› A_8863 m_8864 n_8865)} ->
                         ((B_8866) n_8865) -> ((B_8866) m_8864))
Logical.infer_tm(A_8863)
Logical.infer_tm(∀ {n_8871 : A_8863} ->
                   ∀ {B_8872 : A_8863 -> L} ->
                     {(eq_4‹L› A_8863 m_8870 n_8871)} ->
                       ((B_8872) n_8871) -> ((B_8872) m_8870))
Logical.infer_tm(A_8863)
Logical.infer_tm(∀ {B_8877 : A_8863 -> L} ->
                   {(eq_4‹L› A_8863 m_8870 n_8876)} ->
                     ((B_8877) n_8876) -> ((B_8877) m_8870))
Logical.infer_tm(A_8863 -> L)
Logical.infer_tm(A_8863)
Logical.infer_tm(L)
Logical.infer_tm({(eq_4‹L› A_8863 m_8870 n_8876)} ->
                   ((B_8881) n_8876) -> ((B_8881) m_8870))
Logical.infer_tm((eq_4‹L› A_8863 m_8870 n_8876))
Logical.check_tm( A_8863, L )
Logical.infer_tm(A_8863)
Logical.assert_equal(L, L)
Logical.check_tm( m_8870, A_8863 )
Logical.infer_tm(m_8870)
Logical.assert_equal(A_8863, A_8863)
Logical.check_tm( n_8876, A_8863 )
Logical.infer_tm(n_8876)
Logical.assert_equal(A_8863, A_8863)
Logical.infer_tm(((B_8881) n_8876) -> ((B_8881) m_8870))
Logical.infer_tm(((B_8881) n_8876))
Logical.infer_tm(B_8881)
Logical.check_tm( n_8876, A_8863 )
Logical.infer_tm(n_8876)
Logical.assert_equal(A_8863, A_8863)
Logical.infer_tm(((B_8881) m_8870))
Logical.infer_tm(B_8881)
Logical.check_tm( m_8870, A_8863 )
Logical.infer_tm(m_8870)
Logical.assert_equal(A_8863, A_8863)
trans12.Program.case_intro(L)
Logical.infer_tm(L)
trans12.Program.case_intro(#A_8894)
Logical.infer_tm(A_8894)
trans12.Program.case_intro(#A_8894)
Logical.infer_tm(A_8894)
trans12.Program.case_intro(#A_8894 -> L)
Logical.infer_tm(A_8894 -> L)
Logical.infer_tm(A_8894)
Logical.infer_tm(L)
trans12.Program.case_intro((eq_4‹L› #A_8894 #m_8917 #n_8940))
Logical.infer_tm((eq_4‹L› A_8894 m_8917 n_8940))
Logical.check_tm( A_8894, L )
Logical.infer_tm(A_8894)
Logical.assert_equal(L, L)
Logical.check_tm( m_8917, A_8894 )
Logical.infer_tm(m_8917)
Logical.assert_equal(A_8894, A_8894)
Logical.check_tm( n_8940, A_8894 )
Logical.infer_tm(n_8940)
Logical.assert_equal(A_8894, A_8894)
trans12.Program.case_intro(((#B_8964) #n_8940))
Logical.infer_tm(((B_8964) n_8940))
Logical.infer_tm(B_8964)
Logical.check_tm( n_8940, A_8894 )
Logical.infer_tm(n_8940)
Logical.assert_equal(A_8894, A_8894)
Logical.infer_tm((eq_4‹L› A_8894 m_8917 n_8940))
Logical.check_tm( A_8894, L )
Logical.infer_tm(A_8894)
Logical.assert_equal(L, L)
Logical.check_tm( m_8917, A_8894 )
Logical.infer_tm(m_8917)
Logical.assert_equal(A_8894, A_8894)
Logical.check_tm( n_8940, A_8894 )
Logical.infer_tm(n_8940)
Logical.assert_equal(A_8894, A_8894)
trans12.Program.case_split(eqL_9, reflL_13)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹L› #A_8894 #m_8917 #n_8940),
      (eq_4‹L› #A_8894 #m_8917 #m_8917));
    {| eq_pat?(N #A_8894, A_8889 : L)
       eq_pat?(N #m_8917, m_8890 : #A_8894)
       eq_pat?(N #n_8940, n_8891 : #A_8894)
       eq_pat?(N #B_8964, B_8892 : #A_8894 -> L)
       eq_pat?(R #__9014, x_8893 : ((#B_8964) #n_8940)) ::: [] =>? #x_8893
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_8894, A_8889 : L)
  eq_pat?(N #m_8917, m_8890 : #A_8894)
  eq_pat?(N #n_8940, n_8891 : #A_8894)
  eq_pat?(N #B_8964, B_8892 : #A_8894 -> L)
  eq_pat?(R #__9014, x_8893 : ((#B_8964) #n_8940))
)
unify_global(
  eq_term?( (eq_4‹L› #A_8894 #m_8917 #n_8940),
    (eq_4‹L› #A_8894 #m_8917 #m_8917))
)
simpl_pprbm ~expand:false( #A_8894, #A_8889)
simpl_pprbm ~expand:false( #m_8917, #m_8890)
simpl_pprbm ~expand:false( #n_8940, #n_8891)
simpl_pprbm ~expand:false( #B_8964, #B_8892)
simpl_pprbm ~expand:false( #__9014, #x_8893)
simpl_pprbm ~expand:false( (eq_4‹L› #A_8894 #m_8917 #n_8940),
  (eq_4‹L› #A_8894 #m_8917 #m_8917))
simpl_pprbm ~expand:false( #A_8894, #A_8894)
simpl_pprbm ~expand:false( #m_8917, #m_8917)
simpl_pprbm ~expand:false( #n_8940, #m_8917)
case_coverage_ok( __9014, ((B_8964) n_8940))
Program.check_tm( __9014, ((B_8964) n_8940) )
Program.infer_tm(__9014)
Logical.assert_equal(((B_8964) n_8940), ((B_8964) n_8940))
trans12.Program.case_introed(((#B_8964) #n_8940))
trans12.Program.case_introed((eq_4‹L› #A_8894 #m_8917 #n_8940))
trans12.Program.case_introed(#A_8894 -> L)
trans12.Program.case_introed(#A_8894)
trans12.Program.case_introed(#A_8894)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_9111 : L} ->
                       ∀ {m_9112 : A_9111} ->
                         ∀ {n_9113 : A_9111} ->
                           ∀ {B_9114 : A_9111 -> L} ->
                             {(eq_4‹L› A_9111 m_9112 n_9113)} ->
                               ((B_9114) n_9113) -> ((B_9114) m_9112), 
∀ {A_9118 : L} ->
  ∀ {m_9119 : A_9118} ->
    ∀ {n_9120 : A_9118} ->
      ∀ {B_9121 : A_9118 -> L} ->
        {(eq_4‹L› A_9118 m_9119 n_9120)} ->
          ((B_9121) n_9120) -> ((B_9121) m_9119))
Logical.infer_tm(∀ {A_9132 : L} ->
                   ∀ {m_9133 : A_9132} ->
                     ∀ {n_9134 : A_9132} ->
                       ∀ {B_9135 : A_9132 -> U} ->
                         {(eq_4‹L› A_9132 m_9133 n_9134)} ->
                           ((B_9135) n_9134) -> ((B_9135) m_9133))
Logical.infer_tm(L)
Logical.infer_tm(∀ {m_9140 : A_9139} ->
                   ∀ {n_9141 : A_9139} ->
                     ∀ {B_9142 : A_9139 -> U} ->
                       {(eq_4‹L› A_9139 m_9140 n_9141)} ->
                         ((B_9142) n_9141) -> ((B_9142) m_9140))
Logical.infer_tm(A_9139)
Logical.infer_tm(∀ {n_9147 : A_9139} ->
                   ∀ {B_9148 : A_9139 -> U} ->
                     {(eq_4‹L› A_9139 m_9146 n_9147)} ->
                       ((B_9148) n_9147) -> ((B_9148) m_9146))
Logical.infer_tm(A_9139)
Logical.infer_tm(∀ {B_9153 : A_9139 -> U} ->
                   {(eq_4‹L› A_9139 m_9146 n_9152)} ->
                     ((B_9153) n_9152) -> ((B_9153) m_9146))
Logical.infer_tm(A_9139 -> U)
Logical.infer_tm(A_9139)
Logical.infer_tm(U)
Logical.infer_tm({(eq_4‹L› A_9139 m_9146 n_9152)} ->
                   ((B_9157) n_9152) -> ((B_9157) m_9146))
Logical.infer_tm((eq_4‹L› A_9139 m_9146 n_9152))
Logical.check_tm( A_9139, L )
Logical.infer_tm(A_9139)
Logical.assert_equal(L, L)
Logical.check_tm( m_9146, A_9139 )
Logical.infer_tm(m_9146)
Logical.assert_equal(A_9139, A_9139)
Logical.check_tm( n_9152, A_9139 )
Logical.infer_tm(n_9152)
Logical.assert_equal(A_9139, A_9139)
Logical.infer_tm(((B_9157) n_9152) -> ((B_9157) m_9146))
Logical.infer_tm(((B_9157) n_9152))
Logical.infer_tm(B_9157)
Logical.check_tm( n_9152, A_9139 )
Logical.infer_tm(n_9152)
Logical.assert_equal(A_9139, A_9139)
Logical.infer_tm(((B_9157) m_9146))
Logical.infer_tm(B_9157)
Logical.check_tm( m_9146, A_9139 )
Logical.infer_tm(m_9146)
Logical.assert_equal(A_9139, A_9139)
Program.check_tm(
  function rwr_9165 :
    ∀ {A_9166 : L} ->
      ∀ {m_9167 : A_9166} ->
        ∀ {n_9168 : A_9166} ->
          ∀ {B_9169 : A_9166 -> U} ->
            {(eq_4‹L› A_9166 m_9167 n_9168)} ->
              ((B_9169) n_9168) -> ((B_9169) m_9167)
  | A_9173 m_9174 n_9175 B_9176 refl_6 x_9177 => x_9177,
  ∀ {A_9178 : L} ->
    ∀ {m_9179 : A_9178} ->
      ∀ {n_9180 : A_9178} ->
        ∀ {B_9181 : A_9178 -> U} ->
          {(eq_4‹L› A_9178 m_9179 n_9180)} ->
            ((B_9181) n_9180) -> ((B_9181) m_9179)
)
Program.infer_tm(function rwr_9185 :
                   ∀ {A_9186 : L} ->
                     ∀ {m_9187 : A_9186} ->
                       ∀ {n_9188 : A_9186} ->
                         ∀ {B_9189 : A_9186 -> U} ->
                           {(eq_4‹L› A_9186 m_9187 n_9188)} ->
                             ((B_9189) n_9188) -> ((B_9189) m_9187)
                 | A_9193 m_9194 n_9195 B_9196 refl_6 x_9197 => x_9197)
Logical.infer_tm(∀ {A_9199 : L} ->
                   ∀ {m_9200 : A_9199} ->
                     ∀ {n_9201 : A_9199} ->
                       ∀ {B_9202 : A_9199 -> U} ->
                         {(eq_4‹L› A_9199 m_9200 n_9201)} ->
                           ((B_9202) n_9201) -> ((B_9202) m_9200))
Logical.infer_tm(L)
Logical.infer_tm(∀ {m_9207 : A_9206} ->
                   ∀ {n_9208 : A_9206} ->
                     ∀ {B_9209 : A_9206 -> U} ->
                       {(eq_4‹L› A_9206 m_9207 n_9208)} ->
                         ((B_9209) n_9208) -> ((B_9209) m_9207))
Logical.infer_tm(A_9206)
Logical.infer_tm(∀ {n_9214 : A_9206} ->
                   ∀ {B_9215 : A_9206 -> U} ->
                     {(eq_4‹L› A_9206 m_9213 n_9214)} ->
                       ((B_9215) n_9214) -> ((B_9215) m_9213))
Logical.infer_tm(A_9206)
Logical.infer_tm(∀ {B_9220 : A_9206 -> U} ->
                   {(eq_4‹L› A_9206 m_9213 n_9219)} ->
                     ((B_9220) n_9219) -> ((B_9220) m_9213))
Logical.infer_tm(A_9206 -> U)
Logical.infer_tm(A_9206)
Logical.infer_tm(U)
Logical.infer_tm({(eq_4‹L› A_9206 m_9213 n_9219)} ->
                   ((B_9224) n_9219) -> ((B_9224) m_9213))
Logical.infer_tm((eq_4‹L› A_9206 m_9213 n_9219))
Logical.check_tm( A_9206, L )
Logical.infer_tm(A_9206)
Logical.assert_equal(L, L)
Logical.check_tm( m_9213, A_9206 )
Logical.infer_tm(m_9213)
Logical.assert_equal(A_9206, A_9206)
Logical.check_tm( n_9219, A_9206 )
Logical.infer_tm(n_9219)
Logical.assert_equal(A_9206, A_9206)
Logical.infer_tm(((B_9224) n_9219) -> ((B_9224) m_9213))
Logical.infer_tm(((B_9224) n_9219))
Logical.infer_tm(B_9224)
Logical.check_tm( n_9219, A_9206 )
Logical.infer_tm(n_9219)
Logical.assert_equal(A_9206, A_9206)
Logical.infer_tm(((B_9224) m_9213))
Logical.infer_tm(B_9224)
Logical.check_tm( m_9213, A_9206 )
Logical.infer_tm(m_9213)
Logical.assert_equal(A_9206, A_9206)
trans12.Program.case_intro(L)
Logical.infer_tm(L)
trans12.Program.case_intro(#A_9237)
Logical.infer_tm(A_9237)
trans12.Program.case_intro(#A_9237)
Logical.infer_tm(A_9237)
trans12.Program.case_intro(#A_9237 -> U)
Logical.infer_tm(A_9237 -> U)
Logical.infer_tm(A_9237)
Logical.infer_tm(U)
trans12.Program.case_intro((eq_4‹L› #A_9237 #m_9260 #n_9283))
Logical.infer_tm((eq_4‹L› A_9237 m_9260 n_9283))
Logical.check_tm( A_9237, L )
Logical.infer_tm(A_9237)
Logical.assert_equal(L, L)
Logical.check_tm( m_9260, A_9237 )
Logical.infer_tm(m_9260)
Logical.assert_equal(A_9237, A_9237)
Logical.check_tm( n_9283, A_9237 )
Logical.infer_tm(n_9283)
Logical.assert_equal(A_9237, A_9237)
trans12.Program.case_intro(((#B_9307) #n_9283))
Logical.infer_tm(((B_9307) n_9283))
Logical.infer_tm(B_9307)
Logical.check_tm( n_9283, A_9237 )
Logical.infer_tm(n_9283)
Logical.assert_equal(A_9237, A_9237)
Logical.infer_tm((eq_4‹L› A_9237 m_9260 n_9283))
Logical.check_tm( A_9237, L )
Logical.infer_tm(A_9237)
Logical.assert_equal(L, L)
Logical.check_tm( m_9260, A_9237 )
Logical.infer_tm(m_9260)
Logical.assert_equal(A_9237, A_9237)
Logical.check_tm( n_9283, A_9237 )
Logical.infer_tm(n_9283)
Logical.assert_equal(A_9237, A_9237)
trans12.Program.case_split(eqL_9, reflL_13)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹L› #A_9237 #m_9260 #n_9283),
      (eq_4‹L› #A_9237 #m_9260 #m_9260));
    {| eq_pat?(N #A_9237, A_9232 : L)
       eq_pat?(N #m_9260, m_9233 : #A_9237)
       eq_pat?(N #n_9283, n_9234 : #A_9237)
       eq_pat?(N #B_9307, B_9235 : #A_9237 -> U)
       eq_pat?(R #__9357, x_9236 : ((#B_9307) #n_9283)) ::: [] =>? #x_9236
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_9237, A_9232 : L)
  eq_pat?(N #m_9260, m_9233 : #A_9237)
  eq_pat?(N #n_9283, n_9234 : #A_9237)
  eq_pat?(N #B_9307, B_9235 : #A_9237 -> U)
  eq_pat?(R #__9357, x_9236 : ((#B_9307) #n_9283))
)
unify_global(
  eq_term?( (eq_4‹L› #A_9237 #m_9260 #n_9283),
    (eq_4‹L› #A_9237 #m_9260 #m_9260))
)
simpl_pprbm ~expand:false( #A_9237, #A_9232)
simpl_pprbm ~expand:false( #m_9260, #m_9233)
simpl_pprbm ~expand:false( #n_9283, #n_9234)
simpl_pprbm ~expand:false( #B_9307, #B_9235)
simpl_pprbm ~expand:false( #__9357, #x_9236)
simpl_pprbm ~expand:false( (eq_4‹L› #A_9237 #m_9260 #n_9283),
  (eq_4‹L› #A_9237 #m_9260 #m_9260))
simpl_pprbm ~expand:false( #A_9237, #A_9237)
simpl_pprbm ~expand:false( #m_9260, #m_9260)
simpl_pprbm ~expand:false( #n_9283, #m_9260)
case_coverage_ok( __9357, ((B_9307) n_9283))
Program.check_tm( __9357, ((B_9307) n_9283) )
Program.infer_tm(__9357)
Logical.assert_equal(((B_9307) n_9283), ((B_9307) n_9283))
trans12.Program.case_introed(((#B_9307) #n_9283))
trans12.Program.case_introed((eq_4‹L› #A_9237 #m_9260 #n_9283))
trans12.Program.case_introed(#A_9237 -> U)
trans12.Program.case_introed(#A_9237)
trans12.Program.case_introed(#A_9237)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_9454 : L} ->
                       ∀ {m_9455 : A_9454} ->
                         ∀ {n_9456 : A_9454} ->
                           ∀ {B_9457 : A_9454 -> U} ->
                             {(eq_4‹L› A_9454 m_9455 n_9456)} ->
                               ((B_9457) n_9456) -> ((B_9457) m_9455), 
∀ {A_9461 : L} ->
  ∀ {m_9462 : A_9461} ->
    ∀ {n_9463 : A_9461} ->
      ∀ {B_9464 : A_9461 -> U} ->
        {(eq_4‹L› A_9461 m_9462 n_9463)} ->
          ((B_9464) n_9463) -> ((B_9464) m_9462))
Logical.infer_tm(∀ {A_9475 : U} ->
                   ∀ {m_9476 : A_9475} ->
                     ∀ {n_9477 : A_9475} ->
                       ∀ {B_9478 : A_9475 -> L} ->
                         {(eq_4‹U› A_9475 m_9476 n_9477)} ->
                           ((B_9478) n_9477) -> ((B_9478) m_9476))
Logical.infer_tm(U)
Logical.infer_tm(∀ {m_9483 : A_9482} ->
                   ∀ {n_9484 : A_9482} ->
                     ∀ {B_9485 : A_9482 -> L} ->
                       {(eq_4‹U› A_9482 m_9483 n_9484)} ->
                         ((B_9485) n_9484) -> ((B_9485) m_9483))
Logical.infer_tm(A_9482)
Logical.infer_tm(∀ {n_9490 : A_9482} ->
                   ∀ {B_9491 : A_9482 -> L} ->
                     {(eq_4‹U› A_9482 m_9489 n_9490)} ->
                       ((B_9491) n_9490) -> ((B_9491) m_9489))
Logical.infer_tm(A_9482)
Logical.infer_tm(∀ {B_9496 : A_9482 -> L} ->
                   {(eq_4‹U› A_9482 m_9489 n_9495)} ->
                     ((B_9496) n_9495) -> ((B_9496) m_9489))
Logical.infer_tm(A_9482 -> L)
Logical.infer_tm(A_9482)
Logical.infer_tm(L)
Logical.infer_tm({(eq_4‹U› A_9482 m_9489 n_9495)} ->
                   ((B_9500) n_9495) -> ((B_9500) m_9489))
Logical.infer_tm((eq_4‹U› A_9482 m_9489 n_9495))
Logical.check_tm( A_9482, U )
Logical.infer_tm(A_9482)
Logical.assert_equal(U, U)
Logical.check_tm( m_9489, A_9482 )
Logical.infer_tm(m_9489)
Logical.assert_equal(A_9482, A_9482)
Logical.check_tm( n_9495, A_9482 )
Logical.infer_tm(n_9495)
Logical.assert_equal(A_9482, A_9482)
Logical.infer_tm(((B_9500) n_9495) -> ((B_9500) m_9489))
Logical.infer_tm(((B_9500) n_9495))
Logical.infer_tm(B_9500)
Logical.check_tm( n_9495, A_9482 )
Logical.infer_tm(n_9495)
Logical.assert_equal(A_9482, A_9482)
Logical.infer_tm(((B_9500) m_9489))
Logical.infer_tm(B_9500)
Logical.check_tm( m_9489, A_9482 )
Logical.infer_tm(m_9489)
Logical.assert_equal(A_9482, A_9482)
Program.check_tm(
  function rwr_9508 :
    ∀ {A_9509 : U} ->
      ∀ {m_9510 : A_9509} ->
        ∀ {n_9511 : A_9509} ->
          ∀ {B_9512 : A_9509 -> L} ->
            {(eq_4‹U› A_9509 m_9510 n_9511)} ->
              ((B_9512) n_9511) -> ((B_9512) m_9510)
  | A_9516 m_9517 n_9518 B_9519 refl_6 x_9520 => x_9520,
  ∀ {A_9521 : U} ->
    ∀ {m_9522 : A_9521} ->
      ∀ {n_9523 : A_9521} ->
        ∀ {B_9524 : A_9521 -> L} ->
          {(eq_4‹U› A_9521 m_9522 n_9523)} ->
            ((B_9524) n_9523) -> ((B_9524) m_9522)
)
Program.infer_tm(function rwr_9528 :
                   ∀ {A_9529 : U} ->
                     ∀ {m_9530 : A_9529} ->
                       ∀ {n_9531 : A_9529} ->
                         ∀ {B_9532 : A_9529 -> L} ->
                           {(eq_4‹U› A_9529 m_9530 n_9531)} ->
                             ((B_9532) n_9531) -> ((B_9532) m_9530)
                 | A_9536 m_9537 n_9538 B_9539 refl_6 x_9540 => x_9540)
Logical.infer_tm(∀ {A_9542 : U} ->
                   ∀ {m_9543 : A_9542} ->
                     ∀ {n_9544 : A_9542} ->
                       ∀ {B_9545 : A_9542 -> L} ->
                         {(eq_4‹U› A_9542 m_9543 n_9544)} ->
                           ((B_9545) n_9544) -> ((B_9545) m_9543))
Logical.infer_tm(U)
Logical.infer_tm(∀ {m_9550 : A_9549} ->
                   ∀ {n_9551 : A_9549} ->
                     ∀ {B_9552 : A_9549 -> L} ->
                       {(eq_4‹U› A_9549 m_9550 n_9551)} ->
                         ((B_9552) n_9551) -> ((B_9552) m_9550))
Logical.infer_tm(A_9549)
Logical.infer_tm(∀ {n_9557 : A_9549} ->
                   ∀ {B_9558 : A_9549 -> L} ->
                     {(eq_4‹U› A_9549 m_9556 n_9557)} ->
                       ((B_9558) n_9557) -> ((B_9558) m_9556))
Logical.infer_tm(A_9549)
Logical.infer_tm(∀ {B_9563 : A_9549 -> L} ->
                   {(eq_4‹U› A_9549 m_9556 n_9562)} ->
                     ((B_9563) n_9562) -> ((B_9563) m_9556))
Logical.infer_tm(A_9549 -> L)
Logical.infer_tm(A_9549)
Logical.infer_tm(L)
Logical.infer_tm({(eq_4‹U› A_9549 m_9556 n_9562)} ->
                   ((B_9567) n_9562) -> ((B_9567) m_9556))
Logical.infer_tm((eq_4‹U› A_9549 m_9556 n_9562))
Logical.check_tm( A_9549, U )
Logical.infer_tm(A_9549)
Logical.assert_equal(U, U)
Logical.check_tm( m_9556, A_9549 )
Logical.infer_tm(m_9556)
Logical.assert_equal(A_9549, A_9549)
Logical.check_tm( n_9562, A_9549 )
Logical.infer_tm(n_9562)
Logical.assert_equal(A_9549, A_9549)
Logical.infer_tm(((B_9567) n_9562) -> ((B_9567) m_9556))
Logical.infer_tm(((B_9567) n_9562))
Logical.infer_tm(B_9567)
Logical.check_tm( n_9562, A_9549 )
Logical.infer_tm(n_9562)
Logical.assert_equal(A_9549, A_9549)
Logical.infer_tm(((B_9567) m_9556))
Logical.infer_tm(B_9567)
Logical.check_tm( m_9556, A_9549 )
Logical.infer_tm(m_9556)
Logical.assert_equal(A_9549, A_9549)
trans12.Program.case_intro(U)
Logical.infer_tm(U)
trans12.Program.case_intro(#A_9580)
Logical.infer_tm(A_9580)
trans12.Program.case_intro(#A_9580)
Logical.infer_tm(A_9580)
trans12.Program.case_intro(#A_9580 -> L)
Logical.infer_tm(A_9580 -> L)
Logical.infer_tm(A_9580)
Logical.infer_tm(L)
trans12.Program.case_intro((eq_4‹U› #A_9580 #m_9603 #n_9626))
Logical.infer_tm((eq_4‹U› A_9580 m_9603 n_9626))
Logical.check_tm( A_9580, U )
Logical.infer_tm(A_9580)
Logical.assert_equal(U, U)
Logical.check_tm( m_9603, A_9580 )
Logical.infer_tm(m_9603)
Logical.assert_equal(A_9580, A_9580)
Logical.check_tm( n_9626, A_9580 )
Logical.infer_tm(n_9626)
Logical.assert_equal(A_9580, A_9580)
trans12.Program.case_intro(((#B_9650) #n_9626))
Logical.infer_tm(((B_9650) n_9626))
Logical.infer_tm(B_9650)
Logical.check_tm( n_9626, A_9580 )
Logical.infer_tm(n_9626)
Logical.assert_equal(A_9580, A_9580)
Logical.infer_tm((eq_4‹U› A_9580 m_9603 n_9626))
Logical.check_tm( A_9580, U )
Logical.infer_tm(A_9580)
Logical.assert_equal(U, U)
Logical.check_tm( m_9603, A_9580 )
Logical.infer_tm(m_9603)
Logical.assert_equal(A_9580, A_9580)
Logical.check_tm( n_9626, A_9580 )
Logical.infer_tm(n_9626)
Logical.assert_equal(A_9580, A_9580)
trans12.Program.case_split(eqU_10, reflU_14)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹U› #A_9580 #m_9603 #n_9626),
      (eq_4‹U› #A_9580 #m_9603 #m_9603));
    {| eq_pat?(N #A_9580, A_9575 : U)
       eq_pat?(N #m_9603, m_9576 : #A_9580)
       eq_pat?(N #n_9626, n_9577 : #A_9580)
       eq_pat?(N #B_9650, B_9578 : #A_9580 -> L)
       eq_pat?(R #__9700, x_9579 : ((#B_9650) #n_9626)) ::: [] =>? #x_9579
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_9580, A_9575 : U)
  eq_pat?(N #m_9603, m_9576 : #A_9580)
  eq_pat?(N #n_9626, n_9577 : #A_9580)
  eq_pat?(N #B_9650, B_9578 : #A_9580 -> L)
  eq_pat?(R #__9700, x_9579 : ((#B_9650) #n_9626))
)
unify_global(
  eq_term?( (eq_4‹U› #A_9580 #m_9603 #n_9626),
    (eq_4‹U› #A_9580 #m_9603 #m_9603))
)
simpl_pprbm ~expand:false( #A_9580, #A_9575)
simpl_pprbm ~expand:false( #m_9603, #m_9576)
simpl_pprbm ~expand:false( #n_9626, #n_9577)
simpl_pprbm ~expand:false( #B_9650, #B_9578)
simpl_pprbm ~expand:false( #__9700, #x_9579)
simpl_pprbm ~expand:false( (eq_4‹U› #A_9580 #m_9603 #n_9626),
  (eq_4‹U› #A_9580 #m_9603 #m_9603))
simpl_pprbm ~expand:false( #A_9580, #A_9580)
simpl_pprbm ~expand:false( #m_9603, #m_9603)
simpl_pprbm ~expand:false( #n_9626, #m_9603)
case_coverage_ok( __9700, ((B_9650) n_9626))
Program.check_tm( __9700, ((B_9650) n_9626) )
Program.infer_tm(__9700)
Logical.assert_equal(((B_9650) n_9626), ((B_9650) n_9626))
trans12.Program.case_introed(((#B_9650) #n_9626))
trans12.Program.case_introed((eq_4‹U› #A_9580 #m_9603 #n_9626))
trans12.Program.case_introed(#A_9580 -> L)
trans12.Program.case_introed(#A_9580)
trans12.Program.case_introed(#A_9580)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_9797 : U} ->
                       ∀ {m_9798 : A_9797} ->
                         ∀ {n_9799 : A_9797} ->
                           ∀ {B_9800 : A_9797 -> L} ->
                             {(eq_4‹U› A_9797 m_9798 n_9799)} ->
                               ((B_9800) n_9799) -> ((B_9800) m_9798), 
∀ {A_9804 : U} ->
  ∀ {m_9805 : A_9804} ->
    ∀ {n_9806 : A_9804} ->
      ∀ {B_9807 : A_9804 -> L} ->
        {(eq_4‹U› A_9804 m_9805 n_9806)} ->
          ((B_9807) n_9806) -> ((B_9807) m_9805))
Logical.infer_tm(∀ {A_9818 : U} ->
                   ∀ {m_9819 : A_9818} ->
                     ∀ {n_9820 : A_9818} ->
                       ∀ {B_9821 : A_9818 -> U} ->
                         {(eq_4‹U› A_9818 m_9819 n_9820)} ->
                           ((B_9821) n_9820) -> ((B_9821) m_9819))
Logical.infer_tm(U)
Logical.infer_tm(∀ {m_9826 : A_9825} ->
                   ∀ {n_9827 : A_9825} ->
                     ∀ {B_9828 : A_9825 -> U} ->
                       {(eq_4‹U› A_9825 m_9826 n_9827)} ->
                         ((B_9828) n_9827) -> ((B_9828) m_9826))
Logical.infer_tm(A_9825)
Logical.infer_tm(∀ {n_9833 : A_9825} ->
                   ∀ {B_9834 : A_9825 -> U} ->
                     {(eq_4‹U› A_9825 m_9832 n_9833)} ->
                       ((B_9834) n_9833) -> ((B_9834) m_9832))
Logical.infer_tm(A_9825)
Logical.infer_tm(∀ {B_9839 : A_9825 -> U} ->
                   {(eq_4‹U› A_9825 m_9832 n_9838)} ->
                     ((B_9839) n_9838) -> ((B_9839) m_9832))
Logical.infer_tm(A_9825 -> U)
Logical.infer_tm(A_9825)
Logical.infer_tm(U)
Logical.infer_tm({(eq_4‹U› A_9825 m_9832 n_9838)} ->
                   ((B_9843) n_9838) -> ((B_9843) m_9832))
Logical.infer_tm((eq_4‹U› A_9825 m_9832 n_9838))
Logical.check_tm( A_9825, U )
Logical.infer_tm(A_9825)
Logical.assert_equal(U, U)
Logical.check_tm( m_9832, A_9825 )
Logical.infer_tm(m_9832)
Logical.assert_equal(A_9825, A_9825)
Logical.check_tm( n_9838, A_9825 )
Logical.infer_tm(n_9838)
Logical.assert_equal(A_9825, A_9825)
Logical.infer_tm(((B_9843) n_9838) -> ((B_9843) m_9832))
Logical.infer_tm(((B_9843) n_9838))
Logical.infer_tm(B_9843)
Logical.check_tm( n_9838, A_9825 )
Logical.infer_tm(n_9838)
Logical.assert_equal(A_9825, A_9825)
Logical.infer_tm(((B_9843) m_9832))
Logical.infer_tm(B_9843)
Logical.check_tm( m_9832, A_9825 )
Logical.infer_tm(m_9832)
Logical.assert_equal(A_9825, A_9825)
Program.check_tm(
  function rwr_9851 :
    ∀ {A_9852 : U} ->
      ∀ {m_9853 : A_9852} ->
        ∀ {n_9854 : A_9852} ->
          ∀ {B_9855 : A_9852 -> U} ->
            {(eq_4‹U› A_9852 m_9853 n_9854)} ->
              ((B_9855) n_9854) -> ((B_9855) m_9853)
  | A_9859 m_9860 n_9861 B_9862 refl_6 x_9863 => x_9863,
  ∀ {A_9864 : U} ->
    ∀ {m_9865 : A_9864} ->
      ∀ {n_9866 : A_9864} ->
        ∀ {B_9867 : A_9864 -> U} ->
          {(eq_4‹U› A_9864 m_9865 n_9866)} ->
            ((B_9867) n_9866) -> ((B_9867) m_9865)
)
Program.infer_tm(function rwr_9871 :
                   ∀ {A_9872 : U} ->
                     ∀ {m_9873 : A_9872} ->
                       ∀ {n_9874 : A_9872} ->
                         ∀ {B_9875 : A_9872 -> U} ->
                           {(eq_4‹U› A_9872 m_9873 n_9874)} ->
                             ((B_9875) n_9874) -> ((B_9875) m_9873)
                 | A_9879 m_9880 n_9881 B_9882 refl_6 x_9883 => x_9883)
Logical.infer_tm(∀ {A_9885 : U} ->
                   ∀ {m_9886 : A_9885} ->
                     ∀ {n_9887 : A_9885} ->
                       ∀ {B_9888 : A_9885 -> U} ->
                         {(eq_4‹U› A_9885 m_9886 n_9887)} ->
                           ((B_9888) n_9887) -> ((B_9888) m_9886))
Logical.infer_tm(U)
Logical.infer_tm(∀ {m_9893 : A_9892} ->
                   ∀ {n_9894 : A_9892} ->
                     ∀ {B_9895 : A_9892 -> U} ->
                       {(eq_4‹U› A_9892 m_9893 n_9894)} ->
                         ((B_9895) n_9894) -> ((B_9895) m_9893))
Logical.infer_tm(A_9892)
Logical.infer_tm(∀ {n_9900 : A_9892} ->
                   ∀ {B_9901 : A_9892 -> U} ->
                     {(eq_4‹U› A_9892 m_9899 n_9900)} ->
                       ((B_9901) n_9900) -> ((B_9901) m_9899))
Logical.infer_tm(A_9892)
Logical.infer_tm(∀ {B_9906 : A_9892 -> U} ->
                   {(eq_4‹U› A_9892 m_9899 n_9905)} ->
                     ((B_9906) n_9905) -> ((B_9906) m_9899))
Logical.infer_tm(A_9892 -> U)
Logical.infer_tm(A_9892)
Logical.infer_tm(U)
Logical.infer_tm({(eq_4‹U› A_9892 m_9899 n_9905)} ->
                   ((B_9910) n_9905) -> ((B_9910) m_9899))
Logical.infer_tm((eq_4‹U› A_9892 m_9899 n_9905))
Logical.check_tm( A_9892, U )
Logical.infer_tm(A_9892)
Logical.assert_equal(U, U)
Logical.check_tm( m_9899, A_9892 )
Logical.infer_tm(m_9899)
Logical.assert_equal(A_9892, A_9892)
Logical.check_tm( n_9905, A_9892 )
Logical.infer_tm(n_9905)
Logical.assert_equal(A_9892, A_9892)
Logical.infer_tm(((B_9910) n_9905) -> ((B_9910) m_9899))
Logical.infer_tm(((B_9910) n_9905))
Logical.infer_tm(B_9910)
Logical.check_tm( n_9905, A_9892 )
Logical.infer_tm(n_9905)
Logical.assert_equal(A_9892, A_9892)
Logical.infer_tm(((B_9910) m_9899))
Logical.infer_tm(B_9910)
Logical.check_tm( m_9899, A_9892 )
Logical.infer_tm(m_9899)
Logical.assert_equal(A_9892, A_9892)
trans12.Program.case_intro(U)
Logical.infer_tm(U)
trans12.Program.case_intro(#A_9923)
Logical.infer_tm(A_9923)
trans12.Program.case_intro(#A_9923)
Logical.infer_tm(A_9923)
trans12.Program.case_intro(#A_9923 -> U)
Logical.infer_tm(A_9923 -> U)
Logical.infer_tm(A_9923)
Logical.infer_tm(U)
trans12.Program.case_intro((eq_4‹U› #A_9923 #m_9946 #n_9969))
Logical.infer_tm((eq_4‹U› A_9923 m_9946 n_9969))
Logical.check_tm( A_9923, U )
Logical.infer_tm(A_9923)
Logical.assert_equal(U, U)
Logical.check_tm( m_9946, A_9923 )
Logical.infer_tm(m_9946)
Logical.assert_equal(A_9923, A_9923)
Logical.check_tm( n_9969, A_9923 )
Logical.infer_tm(n_9969)
Logical.assert_equal(A_9923, A_9923)
trans12.Program.case_intro(((#B_9993) #n_9969))
Logical.infer_tm(((B_9993) n_9969))
Logical.infer_tm(B_9993)
Logical.check_tm( n_9969, A_9923 )
Logical.infer_tm(n_9969)
Logical.assert_equal(A_9923, A_9923)
Logical.infer_tm((eq_4‹U› A_9923 m_9946 n_9969))
Logical.check_tm( A_9923, U )
Logical.infer_tm(A_9923)
Logical.assert_equal(U, U)
Logical.check_tm( m_9946, A_9923 )
Logical.infer_tm(m_9946)
Logical.assert_equal(A_9923, A_9923)
Logical.check_tm( n_9969, A_9923 )
Logical.infer_tm(n_9969)
Logical.assert_equal(A_9923, A_9923)
trans12.Program.case_split(eqU_10, reflU_14)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹U› #A_9923 #m_9946 #n_9969),
      (eq_4‹U› #A_9923 #m_9946 #m_9946));
    {| eq_pat?(N #A_9923, A_9918 : U)
       eq_pat?(N #m_9946, m_9919 : #A_9923)
       eq_pat?(N #n_9969, n_9920 : #A_9923)
       eq_pat?(N #B_9993, B_9921 : #A_9923 -> U)
       eq_pat?(R #__10043, x_9922 : ((#B_9993) #n_9969)) ::: [] =>? #x_9922
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_9923, A_9918 : U)
  eq_pat?(N #m_9946, m_9919 : #A_9923)
  eq_pat?(N #n_9969, n_9920 : #A_9923)
  eq_pat?(N #B_9993, B_9921 : #A_9923 -> U)
  eq_pat?(R #__10043, x_9922 : ((#B_9993) #n_9969))
)
unify_global(
  eq_term?( (eq_4‹U› #A_9923 #m_9946 #n_9969),
    (eq_4‹U› #A_9923 #m_9946 #m_9946))
)
simpl_pprbm ~expand:false( #A_9923, #A_9918)
simpl_pprbm ~expand:false( #m_9946, #m_9919)
simpl_pprbm ~expand:false( #n_9969, #n_9920)
simpl_pprbm ~expand:false( #B_9993, #B_9921)
simpl_pprbm ~expand:false( #__10043, #x_9922)
simpl_pprbm ~expand:false( (eq_4‹U› #A_9923 #m_9946 #n_9969),
  (eq_4‹U› #A_9923 #m_9946 #m_9946))
simpl_pprbm ~expand:false( #A_9923, #A_9923)
simpl_pprbm ~expand:false( #m_9946, #m_9946)
simpl_pprbm ~expand:false( #n_9969, #m_9946)
case_coverage_ok( __10043, ((B_9993) n_9969))
Program.check_tm( __10043, ((B_9993) n_9969) )
Program.infer_tm(__10043)
Logical.assert_equal(((B_9993) n_9969), ((B_9993) n_9969))
trans12.Program.case_introed(((#B_9993) #n_9969))
trans12.Program.case_introed((eq_4‹U› #A_9923 #m_9946 #n_9969))
trans12.Program.case_introed(#A_9923 -> U)
trans12.Program.case_introed(#A_9923)
trans12.Program.case_introed(#A_9923)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_10140 : U} ->
                       ∀ {m_10141 : A_10140} ->
                         ∀ {n_10142 : A_10140} ->
                           ∀ {B_10143 : A_10140 -> U} ->
                             {(eq_4‹U› A_10140 m_10141 n_10142)} ->
                               ((B_10143) n_10142) -> ((B_10143) m_10141), 
∀ {A_10147 : U} ->
  ∀ {m_10148 : A_10147} ->
    ∀ {n_10149 : A_10147} ->
      ∀ {B_10150 : A_10147 -> U} ->
        {(eq_4‹U› A_10147 m_10148 n_10149)} ->
          ((B_10150) n_10149) -> ((B_10150) m_10148))
Logical.infer_tm(∀ (A_10161 : L) ->
                   ∀ (B_10162 : L) ->
                     ∀ (m_10163 : A_10161) ->
                       ∀ (n_10164 : A_10161) ->
                         ∀ (f_10165 : A_10161 -o B_10162) ->
                           (eq_4‹L› A_10161 m_10163 n_10164) ->
                             (eq_4‹L›
                               B_10162 ((f_10165) m_10163)
                               ((f_10165) n_10164)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (B_10169 : L) ->
                   ∀ (m_10170 : A_10168) ->
                     ∀ (n_10171 : A_10168) ->
                       ∀ (f_10172 : A_10168 -o B_10169) ->
                         (eq_4‹L› A_10168 m_10170 n_10171) ->
                           (eq_4‹L›
                             B_10169 ((f_10172) m_10170) ((f_10172) n_10171)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (m_10176 : A_10168) ->
                   ∀ (n_10177 : A_10168) ->
                     ∀ (f_10178 : A_10168 -o B_10175) ->
                       (eq_4‹L› A_10168 m_10176 n_10177) ->
                         (eq_4‹L›
                           B_10175 ((f_10178) m_10176) ((f_10178) n_10177)))
Logical.infer_tm(A_10168)
Logical.infer_tm(∀ (n_10182 : A_10168) ->
                   ∀ (f_10183 : A_10168 -o B_10175) ->
                     (eq_4‹L› A_10168 m_10181 n_10182) ->
                       (eq_4‹L›
                         B_10175 ((f_10183) m_10181) ((f_10183) n_10182)))
Logical.infer_tm(A_10168)
Logical.infer_tm(∀ (f_10187 : A_10168 -o B_10175) ->
                   (eq_4‹L› A_10168 m_10181 n_10186) ->
                     (eq_4‹L›
                       B_10175 ((f_10187) m_10181) ((f_10187) n_10186)))
Logical.infer_tm(A_10168 -o B_10175)
Logical.infer_tm(A_10168)
Logical.infer_tm(B_10175)
Logical.infer_tm((eq_4‹L› A_10168 m_10181 n_10186) ->
                   (eq_4‹L›
                     B_10175 ((f_10190) m_10181) ((f_10190) n_10186)))
Logical.infer_tm((eq_4‹L› A_10168 m_10181 n_10186))
Logical.check_tm( A_10168, L )
Logical.infer_tm(A_10168)
Logical.assert_equal(L, L)
Logical.check_tm( m_10181, A_10168 )
Logical.infer_tm(m_10181)
Logical.assert_equal(A_10168, A_10168)
Logical.check_tm( n_10186, A_10168 )
Logical.infer_tm(n_10186)
Logical.assert_equal(A_10168, A_10168)
Logical.infer_tm((eq_4‹L›
                   B_10175 ((f_10190) m_10181) ((f_10190) n_10186)))
Logical.check_tm( B_10175, L )
Logical.infer_tm(B_10175)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_10190) m_10181), B_10175 )
Logical.infer_tm(((f_10190) m_10181))
Logical.infer_tm(f_10190)
Logical.check_tm( m_10181, A_10168 )
Logical.infer_tm(m_10181)
Logical.assert_equal(A_10168, A_10168)
Logical.assert_equal(B_10175, B_10175)
Logical.check_tm( ((f_10190) n_10186), B_10175 )
Logical.infer_tm(((f_10190) n_10186))
Logical.infer_tm(f_10190)
Logical.check_tm( n_10186, A_10168 )
Logical.infer_tm(n_10186)
Logical.assert_equal(A_10168, A_10168)
Logical.assert_equal(B_10175, B_10175)
Logical.check_tm(
  function congr_10195 :
    ∀ (A_10196 : L) ->
      ∀ (B_10197 : L) ->
        ∀ (m_10198 : A_10196) ->
          ∀ (n_10199 : A_10196) ->
            ∀ (f_10200 : A_10196 -o B_10197) ->
              (eq_4‹L› A_10196 m_10198 n_10199) ->
                (eq_4‹L› B_10197 ((f_10200) m_10198) ((f_10200) n_10199))
  | A_10203 B_10204 m_10205 n_10206 f_10207 refl_6 => refl_6‹L›,
  ∀ (A_10208 : L) ->
    ∀ (B_10209 : L) ->
      ∀ (m_10210 : A_10208) ->
        ∀ (n_10211 : A_10208) ->
          ∀ (f_10212 : A_10208 -o B_10209) ->
            (eq_4‹L› A_10208 m_10210 n_10211) ->
              (eq_4‹L› B_10209 ((f_10212) m_10210) ((f_10212) n_10211))
)
Logical.infer_tm(function congr_10215 :
                   ∀ (A_10216 : L) ->
                     ∀ (B_10217 : L) ->
                       ∀ (m_10218 : A_10216) ->
                         ∀ (n_10219 : A_10216) ->
                           ∀ (f_10220 : A_10216 -o B_10217) ->
                             (eq_4‹L› A_10216 m_10218 n_10219) ->
                               (eq_4‹L›
                                 B_10217 ((f_10220) m_10218)
                                 ((f_10220) n_10219))
                 | A_10223 B_10224 m_10225 n_10226 f_10227 refl_6 =>
                   refl_6‹L›)
Logical.infer_tm(∀ (A_10229 : L) ->
                   ∀ (B_10230 : L) ->
                     ∀ (m_10231 : A_10229) ->
                       ∀ (n_10232 : A_10229) ->
                         ∀ (f_10233 : A_10229 -o B_10230) ->
                           (eq_4‹L› A_10229 m_10231 n_10232) ->
                             (eq_4‹L›
                               B_10230 ((f_10233) m_10231)
                               ((f_10233) n_10232)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (B_10237 : L) ->
                   ∀ (m_10238 : A_10236) ->
                     ∀ (n_10239 : A_10236) ->
                       ∀ (f_10240 : A_10236 -o B_10237) ->
                         (eq_4‹L› A_10236 m_10238 n_10239) ->
                           (eq_4‹L›
                             B_10237 ((f_10240) m_10238) ((f_10240) n_10239)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (m_10244 : A_10236) ->
                   ∀ (n_10245 : A_10236) ->
                     ∀ (f_10246 : A_10236 -o B_10243) ->
                       (eq_4‹L› A_10236 m_10244 n_10245) ->
                         (eq_4‹L›
                           B_10243 ((f_10246) m_10244) ((f_10246) n_10245)))
Logical.infer_tm(A_10236)
Logical.infer_tm(∀ (n_10250 : A_10236) ->
                   ∀ (f_10251 : A_10236 -o B_10243) ->
                     (eq_4‹L› A_10236 m_10249 n_10250) ->
                       (eq_4‹L›
                         B_10243 ((f_10251) m_10249) ((f_10251) n_10250)))
Logical.infer_tm(A_10236)
Logical.infer_tm(∀ (f_10255 : A_10236 -o B_10243) ->
                   (eq_4‹L› A_10236 m_10249 n_10254) ->
                     (eq_4‹L›
                       B_10243 ((f_10255) m_10249) ((f_10255) n_10254)))
Logical.infer_tm(A_10236 -o B_10243)
Logical.infer_tm(A_10236)
Logical.infer_tm(B_10243)
Logical.infer_tm((eq_4‹L› A_10236 m_10249 n_10254) ->
                   (eq_4‹L›
                     B_10243 ((f_10258) m_10249) ((f_10258) n_10254)))
Logical.infer_tm((eq_4‹L› A_10236 m_10249 n_10254))
Logical.check_tm( A_10236, L )
Logical.infer_tm(A_10236)
Logical.assert_equal(L, L)
Logical.check_tm( m_10249, A_10236 )
Logical.infer_tm(m_10249)
Logical.assert_equal(A_10236, A_10236)
Logical.check_tm( n_10254, A_10236 )
Logical.infer_tm(n_10254)
Logical.assert_equal(A_10236, A_10236)
Logical.infer_tm((eq_4‹L›
                   B_10243 ((f_10258) m_10249) ((f_10258) n_10254)))
Logical.check_tm( B_10243, L )
Logical.infer_tm(B_10243)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_10258) m_10249), B_10243 )
Logical.infer_tm(((f_10258) m_10249))
Logical.infer_tm(f_10258)
Logical.check_tm( m_10249, A_10236 )
Logical.infer_tm(m_10249)
Logical.assert_equal(A_10236, A_10236)
Logical.assert_equal(B_10243, B_10243)
Logical.check_tm( ((f_10258) n_10254), B_10243 )
Logical.infer_tm(((f_10258) n_10254))
Logical.infer_tm(f_10258)
Logical.check_tm( n_10254, A_10236 )
Logical.infer_tm(n_10254)
Logical.assert_equal(A_10236, A_10236)
Logical.assert_equal(B_10243, B_10243)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_10268)
Logical.infer_tm(A_10268)
Logical.infer_tm(A_10268 -o B_10295)
Logical.infer_tm(A_10268)
Logical.infer_tm(B_10295)
Logical.infer_tm((eq_4‹L› A_10268 m_10322 n_10349))
Logical.check_tm( A_10268, L )
Logical.infer_tm(A_10268)
Logical.assert_equal(L, L)
Logical.check_tm( m_10322, A_10268 )
Logical.infer_tm(m_10322)
Logical.assert_equal(A_10268, A_10268)
Logical.check_tm( n_10349, A_10268 )
Logical.infer_tm(n_10349)
Logical.assert_equal(A_10268, A_10268)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹L› #A_10268 #m_10322 #n_10349),
      (eq_4‹L› #A_10268 #m_10322 #m_10322));
    {| eq_pat?(R #A_10268, A_10263 : L)
       eq_pat?(R #B_10295, B_10264 : L)
       eq_pat?(R #m_10322, m_10265 : #A_10268)
       eq_pat?(R #n_10349, n_10266 : #A_10268)
       eq_pat?(R #f_10376, f_10267 : #A_10268 -o #B_10295) ::: [] =>?
         refl_6‹L›
    |}
  |}
|}
unify_local(
  eq_pat?(R #A_10268, A_10263 : L)
  eq_pat?(R #B_10295, B_10264 : L)
  eq_pat?(R #m_10322, m_10265 : #A_10268)
  eq_pat?(R #n_10349, n_10266 : #A_10268)
  eq_pat?(R #f_10376, f_10267 : #A_10268 -o #B_10295)
)
unify_global(
  eq_term?( (eq_4‹L› #A_10268 #m_10322 #n_10349),
    (eq_4‹L› #A_10268 #m_10322 #m_10322))
)
simpl_pprbm ~expand:false( #A_10268, #A_10263)
simpl_pprbm ~expand:false( #B_10295, #B_10264)
simpl_pprbm ~expand:false( #m_10322, #m_10265)
simpl_pprbm ~expand:false( #n_10349, #n_10266)
simpl_pprbm ~expand:false( #f_10376, #f_10267)
simpl_pprbm ~expand:false( (eq_4‹L› #A_10268 #m_10322 #n_10349),
  (eq_4‹L› #A_10268 #m_10322 #m_10322))
simpl_pprbm ~expand:false( #A_10268, #A_10268)
simpl_pprbm ~expand:false( #m_10322, #m_10322)
simpl_pprbm ~expand:false( #n_10349, #m_10322)
case_coverage_ok( refl_6‹L›,
  (eq_4‹L› B_10295 ((f_10376) n_10349) ((f_10376) n_10349)))
Logical.check_tm( refl_6‹L›,
  (eq_4‹L› B_10295 ((f_10376) n_10349) ((f_10376) n_10349))
)
Logical.infer_tm(refl_6‹L›)
Logical.check_tm( B_10295, L )
Logical.infer_tm(B_10295)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_10376) n_10349), B_10295 )
Logical.infer_tm(((f_10376) n_10349))
Logical.infer_tm(f_10376)
Logical.check_tm( n_10349, A_10268 )
Logical.infer_tm(n_10349)
Logical.assert_equal(A_10268, A_10268)
Logical.assert_equal(B_10295, B_10295)
Logical.assert_equal((eq_4‹L›
                       B_10295 ((f_10376) n_10349) ((f_10376) n_10349)), 
(eq_4‹L› B_10295 ((f_10376) n_10349) ((f_10376) n_10349)))
Logical.assert_equal(∀ (A_10491 : L) ->
                       ∀ (B_10492 : L) ->
                         ∀ (m_10493 : A_10491) ->
                           ∀ (n_10494 : A_10491) ->
                             ∀ (f_10495 : A_10491 -o B_10492) ->
                               (eq_4‹L› A_10491 m_10493 n_10494) ->
                                 (eq_4‹L›
                                   B_10492 ((f_10495) m_10493)
                                   ((f_10495) n_10494)), ∀ (A_10498 : L) ->
                                                           ∀ (B_10499 :
                                                             L) ->
                                                             ∀ (m_10500 :
                                                               A_10498) ->
                                                               ∀ (n_10501 :
                                                                 A_10498) ->
                                                                 ∀ (f_10502 :
                                                                   A_10498 -o
                                                                    B_10499) ->
                                                                   (eq_4‹L›
                                                                    A_10498
                                                                    m_10500
                                                                    n_10501) ->
                                                                    (eq_4‹L›
                                                                    B_10499
                                                                    ((f_10502)
                                                                    m_10500)
                                                                    ((f_10502)
                                                                    n_10501)))
Logical.infer_tm(∀ (A_10512 : L) ->
                   ∀ (B_10513 : L) ->
                     ∀ (m_10514 : A_10512) ->
                       ∀ (n_10515 : A_10512) ->
                         ∀ (f_10516 : A_10512 -> B_10513) ->
                           (eq_4‹L› A_10512 m_10514 n_10515) ->
                             (eq_4‹L›
                               B_10513 ((f_10516) m_10514)
                               ((f_10516) n_10515)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (B_10520 : L) ->
                   ∀ (m_10521 : A_10519) ->
                     ∀ (n_10522 : A_10519) ->
                       ∀ (f_10523 : A_10519 -> B_10520) ->
                         (eq_4‹L› A_10519 m_10521 n_10522) ->
                           (eq_4‹L›
                             B_10520 ((f_10523) m_10521) ((f_10523) n_10522)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (m_10527 : A_10519) ->
                   ∀ (n_10528 : A_10519) ->
                     ∀ (f_10529 : A_10519 -> B_10526) ->
                       (eq_4‹L› A_10519 m_10527 n_10528) ->
                         (eq_4‹L›
                           B_10526 ((f_10529) m_10527) ((f_10529) n_10528)))
Logical.infer_tm(A_10519)
Logical.infer_tm(∀ (n_10533 : A_10519) ->
                   ∀ (f_10534 : A_10519 -> B_10526) ->
                     (eq_4‹L› A_10519 m_10532 n_10533) ->
                       (eq_4‹L›
                         B_10526 ((f_10534) m_10532) ((f_10534) n_10533)))
Logical.infer_tm(A_10519)
Logical.infer_tm(∀ (f_10538 : A_10519 -> B_10526) ->
                   (eq_4‹L› A_10519 m_10532 n_10537) ->
                     (eq_4‹L›
                       B_10526 ((f_10538) m_10532) ((f_10538) n_10537)))
Logical.infer_tm(A_10519 -> B_10526)
Logical.infer_tm(A_10519)
Logical.infer_tm(B_10526)
Logical.infer_tm((eq_4‹L› A_10519 m_10532 n_10537) ->
                   (eq_4‹L›
                     B_10526 ((f_10541) m_10532) ((f_10541) n_10537)))
Logical.infer_tm((eq_4‹L› A_10519 m_10532 n_10537))
Logical.check_tm( A_10519, L )
Logical.infer_tm(A_10519)
Logical.assert_equal(L, L)
Logical.check_tm( m_10532, A_10519 )
Logical.infer_tm(m_10532)
Logical.assert_equal(A_10519, A_10519)
Logical.check_tm( n_10537, A_10519 )
Logical.infer_tm(n_10537)
Logical.assert_equal(A_10519, A_10519)
Logical.infer_tm((eq_4‹L›
                   B_10526 ((f_10541) m_10532) ((f_10541) n_10537)))
Logical.check_tm( B_10526, L )
Logical.infer_tm(B_10526)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_10541) m_10532), B_10526 )
Logical.infer_tm(((f_10541) m_10532))
Logical.infer_tm(f_10541)
Logical.check_tm( m_10532, A_10519 )
Logical.infer_tm(m_10532)
Logical.assert_equal(A_10519, A_10519)
Logical.assert_equal(B_10526, B_10526)
Logical.check_tm( ((f_10541) n_10537), B_10526 )
Logical.infer_tm(((f_10541) n_10537))
Logical.infer_tm(f_10541)
Logical.check_tm( n_10537, A_10519 )
Logical.infer_tm(n_10537)
Logical.assert_equal(A_10519, A_10519)
Logical.assert_equal(B_10526, B_10526)
Logical.check_tm(
  function congr_10546 :
    ∀ (A_10547 : L) ->
      ∀ (B_10548 : L) ->
        ∀ (m_10549 : A_10547) ->
          ∀ (n_10550 : A_10547) ->
            ∀ (f_10551 : A_10547 -> B_10548) ->
              (eq_4‹L› A_10547 m_10549 n_10550) ->
                (eq_4‹L› B_10548 ((f_10551) m_10549) ((f_10551) n_10550))
  | A_10554 B_10555 m_10556 n_10557 f_10558 refl_6 => refl_6‹L›,
  ∀ (A_10559 : L) ->
    ∀ (B_10560 : L) ->
      ∀ (m_10561 : A_10559) ->
        ∀ (n_10562 : A_10559) ->
          ∀ (f_10563 : A_10559 -> B_10560) ->
            (eq_4‹L› A_10559 m_10561 n_10562) ->
              (eq_4‹L› B_10560 ((f_10563) m_10561) ((f_10563) n_10562))
)
Logical.infer_tm(function congr_10566 :
                   ∀ (A_10567 : L) ->
                     ∀ (B_10568 : L) ->
                       ∀ (m_10569 : A_10567) ->
                         ∀ (n_10570 : A_10567) ->
                           ∀ (f_10571 : A_10567 -> B_10568) ->
                             (eq_4‹L› A_10567 m_10569 n_10570) ->
                               (eq_4‹L›
                                 B_10568 ((f_10571) m_10569)
                                 ((f_10571) n_10570))
                 | A_10574 B_10575 m_10576 n_10577 f_10578 refl_6 =>
                   refl_6‹L›)
Logical.infer_tm(∀ (A_10580 : L) ->
                   ∀ (B_10581 : L) ->
                     ∀ (m_10582 : A_10580) ->
                       ∀ (n_10583 : A_10580) ->
                         ∀ (f_10584 : A_10580 -> B_10581) ->
                           (eq_4‹L› A_10580 m_10582 n_10583) ->
                             (eq_4‹L›
                               B_10581 ((f_10584) m_10582)
                               ((f_10584) n_10583)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (B_10588 : L) ->
                   ∀ (m_10589 : A_10587) ->
                     ∀ (n_10590 : A_10587) ->
                       ∀ (f_10591 : A_10587 -> B_10588) ->
                         (eq_4‹L› A_10587 m_10589 n_10590) ->
                           (eq_4‹L›
                             B_10588 ((f_10591) m_10589) ((f_10591) n_10590)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (m_10595 : A_10587) ->
                   ∀ (n_10596 : A_10587) ->
                     ∀ (f_10597 : A_10587 -> B_10594) ->
                       (eq_4‹L› A_10587 m_10595 n_10596) ->
                         (eq_4‹L›
                           B_10594 ((f_10597) m_10595) ((f_10597) n_10596)))
Logical.infer_tm(A_10587)
Logical.infer_tm(∀ (n_10601 : A_10587) ->
                   ∀ (f_10602 : A_10587 -> B_10594) ->
                     (eq_4‹L› A_10587 m_10600 n_10601) ->
                       (eq_4‹L›
                         B_10594 ((f_10602) m_10600) ((f_10602) n_10601)))
Logical.infer_tm(A_10587)
Logical.infer_tm(∀ (f_10606 : A_10587 -> B_10594) ->
                   (eq_4‹L› A_10587 m_10600 n_10605) ->
                     (eq_4‹L›
                       B_10594 ((f_10606) m_10600) ((f_10606) n_10605)))
Logical.infer_tm(A_10587 -> B_10594)
Logical.infer_tm(A_10587)
Logical.infer_tm(B_10594)
Logical.infer_tm((eq_4‹L› A_10587 m_10600 n_10605) ->
                   (eq_4‹L›
                     B_10594 ((f_10609) m_10600) ((f_10609) n_10605)))
Logical.infer_tm((eq_4‹L› A_10587 m_10600 n_10605))
Logical.check_tm( A_10587, L )
Logical.infer_tm(A_10587)
Logical.assert_equal(L, L)
Logical.check_tm( m_10600, A_10587 )
Logical.infer_tm(m_10600)
Logical.assert_equal(A_10587, A_10587)
Logical.check_tm( n_10605, A_10587 )
Logical.infer_tm(n_10605)
Logical.assert_equal(A_10587, A_10587)
Logical.infer_tm((eq_4‹L›
                   B_10594 ((f_10609) m_10600) ((f_10609) n_10605)))
Logical.check_tm( B_10594, L )
Logical.infer_tm(B_10594)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_10609) m_10600), B_10594 )
Logical.infer_tm(((f_10609) m_10600))
Logical.infer_tm(f_10609)
Logical.check_tm( m_10600, A_10587 )
Logical.infer_tm(m_10600)
Logical.assert_equal(A_10587, A_10587)
Logical.assert_equal(B_10594, B_10594)
Logical.check_tm( ((f_10609) n_10605), B_10594 )
Logical.infer_tm(((f_10609) n_10605))
Logical.infer_tm(f_10609)
Logical.check_tm( n_10605, A_10587 )
Logical.infer_tm(n_10605)
Logical.assert_equal(A_10587, A_10587)
Logical.assert_equal(B_10594, B_10594)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_10619)
Logical.infer_tm(A_10619)
Logical.infer_tm(A_10619 -> B_10646)
Logical.infer_tm(A_10619)
Logical.infer_tm(B_10646)
Logical.infer_tm((eq_4‹L› A_10619 m_10673 n_10700))
Logical.check_tm( A_10619, L )
Logical.infer_tm(A_10619)
Logical.assert_equal(L, L)
Logical.check_tm( m_10673, A_10619 )
Logical.infer_tm(m_10673)
Logical.assert_equal(A_10619, A_10619)
Logical.check_tm( n_10700, A_10619 )
Logical.infer_tm(n_10700)
Logical.assert_equal(A_10619, A_10619)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹L› #A_10619 #m_10673 #n_10700),
      (eq_4‹L› #A_10619 #m_10673 #m_10673));
    {| eq_pat?(R #A_10619, A_10614 : L)
       eq_pat?(R #B_10646, B_10615 : L)
       eq_pat?(R #m_10673, m_10616 : #A_10619)
       eq_pat?(R #n_10700, n_10617 : #A_10619)
       eq_pat?(R #f_10727, f_10618 : #A_10619 -> #B_10646) ::: [] =>?
         refl_6‹L›
    |}
  |}
|}
unify_local(
  eq_pat?(R #A_10619, A_10614 : L)
  eq_pat?(R #B_10646, B_10615 : L)
  eq_pat?(R #m_10673, m_10616 : #A_10619)
  eq_pat?(R #n_10700, n_10617 : #A_10619)
  eq_pat?(R #f_10727, f_10618 : #A_10619 -> #B_10646)
)
unify_global(
  eq_term?( (eq_4‹L› #A_10619 #m_10673 #n_10700),
    (eq_4‹L› #A_10619 #m_10673 #m_10673))
)
simpl_pprbm ~expand:false( #A_10619, #A_10614)
simpl_pprbm ~expand:false( #B_10646, #B_10615)
simpl_pprbm ~expand:false( #m_10673, #m_10616)
simpl_pprbm ~expand:false( #n_10700, #n_10617)
simpl_pprbm ~expand:false( #f_10727, #f_10618)
simpl_pprbm ~expand:false( (eq_4‹L› #A_10619 #m_10673 #n_10700),
  (eq_4‹L› #A_10619 #m_10673 #m_10673))
simpl_pprbm ~expand:false( #A_10619, #A_10619)
simpl_pprbm ~expand:false( #m_10673, #m_10673)
simpl_pprbm ~expand:false( #n_10700, #m_10673)
case_coverage_ok( refl_6‹L›,
  (eq_4‹L› B_10646 ((f_10727) n_10700) ((f_10727) n_10700)))
Logical.check_tm( refl_6‹L›,
  (eq_4‹L› B_10646 ((f_10727) n_10700) ((f_10727) n_10700))
)
Logical.infer_tm(refl_6‹L›)
Logical.check_tm( B_10646, L )
Logical.infer_tm(B_10646)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_10727) n_10700), B_10646 )
Logical.infer_tm(((f_10727) n_10700))
Logical.infer_tm(f_10727)
Logical.check_tm( n_10700, A_10619 )
Logical.infer_tm(n_10700)
Logical.assert_equal(A_10619, A_10619)
Logical.assert_equal(B_10646, B_10646)
Logical.assert_equal((eq_4‹L›
                       B_10646 ((f_10727) n_10700) ((f_10727) n_10700)), 
(eq_4‹L› B_10646 ((f_10727) n_10700) ((f_10727) n_10700)))
Logical.assert_equal(∀ (A_10842 : L) ->
                       ∀ (B_10843 : L) ->
                         ∀ (m_10844 : A_10842) ->
                           ∀ (n_10845 : A_10842) ->
                             ∀ (f_10846 : A_10842 -> B_10843) ->
                               (eq_4‹L› A_10842 m_10844 n_10845) ->
                                 (eq_4‹L›
                                   B_10843 ((f_10846) m_10844)
                                   ((f_10846) n_10845)), ∀ (A_10849 : L) ->
                                                           ∀ (B_10850 :
                                                             L) ->
                                                             ∀ (m_10851 :
                                                               A_10849) ->
                                                               ∀ (n_10852 :
                                                                 A_10849) ->
                                                                 ∀ (f_10853 :
                                                                   A_10849 ->
                                                                    B_10850) ->
                                                                   (eq_4‹L›
                                                                    A_10849
                                                                    m_10851
                                                                    n_10852) ->
                                                                    (eq_4‹L›
                                                                    B_10850
                                                                    ((f_10853)
                                                                    m_10851)
                                                                    ((f_10853)
                                                                    n_10852)))
Logical.infer_tm(∀ (A_10863 : L) ->
                   ∀ (B_10864 : U) ->
                     ∀ (m_10865 : A_10863) ->
                       ∀ (n_10866 : A_10863) ->
                         ∀ (f_10867 : A_10863 -o B_10864) ->
                           (eq_4‹L› A_10863 m_10865 n_10866) ->
                             (eq_4‹U›
                               B_10864 ((f_10867) m_10865)
                               ((f_10867) n_10866)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (B_10871 : U) ->
                   ∀ (m_10872 : A_10870) ->
                     ∀ (n_10873 : A_10870) ->
                       ∀ (f_10874 : A_10870 -o B_10871) ->
                         (eq_4‹L› A_10870 m_10872 n_10873) ->
                           (eq_4‹U›
                             B_10871 ((f_10874) m_10872) ((f_10874) n_10873)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (m_10878 : A_10870) ->
                   ∀ (n_10879 : A_10870) ->
                     ∀ (f_10880 : A_10870 -o B_10877) ->
                       (eq_4‹L› A_10870 m_10878 n_10879) ->
                         (eq_4‹U›
                           B_10877 ((f_10880) m_10878) ((f_10880) n_10879)))
Logical.infer_tm(A_10870)
Logical.infer_tm(∀ (n_10884 : A_10870) ->
                   ∀ (f_10885 : A_10870 -o B_10877) ->
                     (eq_4‹L› A_10870 m_10883 n_10884) ->
                       (eq_4‹U›
                         B_10877 ((f_10885) m_10883) ((f_10885) n_10884)))
Logical.infer_tm(A_10870)
Logical.infer_tm(∀ (f_10889 : A_10870 -o B_10877) ->
                   (eq_4‹L› A_10870 m_10883 n_10888) ->
                     (eq_4‹U›
                       B_10877 ((f_10889) m_10883) ((f_10889) n_10888)))
Logical.infer_tm(A_10870 -o B_10877)
Logical.infer_tm(A_10870)
Logical.infer_tm(B_10877)
Logical.infer_tm((eq_4‹L› A_10870 m_10883 n_10888) ->
                   (eq_4‹U›
                     B_10877 ((f_10892) m_10883) ((f_10892) n_10888)))
Logical.infer_tm((eq_4‹L› A_10870 m_10883 n_10888))
Logical.check_tm( A_10870, L )
Logical.infer_tm(A_10870)
Logical.assert_equal(L, L)
Logical.check_tm( m_10883, A_10870 )
Logical.infer_tm(m_10883)
Logical.assert_equal(A_10870, A_10870)
Logical.check_tm( n_10888, A_10870 )
Logical.infer_tm(n_10888)
Logical.assert_equal(A_10870, A_10870)
Logical.infer_tm((eq_4‹U›
                   B_10877 ((f_10892) m_10883) ((f_10892) n_10888)))
Logical.check_tm( B_10877, U )
Logical.infer_tm(B_10877)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_10892) m_10883), B_10877 )
Logical.infer_tm(((f_10892) m_10883))
Logical.infer_tm(f_10892)
Logical.check_tm( m_10883, A_10870 )
Logical.infer_tm(m_10883)
Logical.assert_equal(A_10870, A_10870)
Logical.assert_equal(B_10877, B_10877)
Logical.check_tm( ((f_10892) n_10888), B_10877 )
Logical.infer_tm(((f_10892) n_10888))
Logical.infer_tm(f_10892)
Logical.check_tm( n_10888, A_10870 )
Logical.infer_tm(n_10888)
Logical.assert_equal(A_10870, A_10870)
Logical.assert_equal(B_10877, B_10877)
Logical.check_tm(
  function congr_10897 :
    ∀ (A_10898 : L) ->
      ∀ (B_10899 : U) ->
        ∀ (m_10900 : A_10898) ->
          ∀ (n_10901 : A_10898) ->
            ∀ (f_10902 : A_10898 -o B_10899) ->
              (eq_4‹L› A_10898 m_10900 n_10901) ->
                (eq_4‹U› B_10899 ((f_10902) m_10900) ((f_10902) n_10901))
  | A_10905 B_10906 m_10907 n_10908 f_10909 refl_6 => refl_6‹U›,
  ∀ (A_10910 : L) ->
    ∀ (B_10911 : U) ->
      ∀ (m_10912 : A_10910) ->
        ∀ (n_10913 : A_10910) ->
          ∀ (f_10914 : A_10910 -o B_10911) ->
            (eq_4‹L› A_10910 m_10912 n_10913) ->
              (eq_4‹U› B_10911 ((f_10914) m_10912) ((f_10914) n_10913))
)
Logical.infer_tm(function congr_10917 :
                   ∀ (A_10918 : L) ->
                     ∀ (B_10919 : U) ->
                       ∀ (m_10920 : A_10918) ->
                         ∀ (n_10921 : A_10918) ->
                           ∀ (f_10922 : A_10918 -o B_10919) ->
                             (eq_4‹L› A_10918 m_10920 n_10921) ->
                               (eq_4‹U›
                                 B_10919 ((f_10922) m_10920)
                                 ((f_10922) n_10921))
                 | A_10925 B_10926 m_10927 n_10928 f_10929 refl_6 =>
                   refl_6‹U›)
Logical.infer_tm(∀ (A_10931 : L) ->
                   ∀ (B_10932 : U) ->
                     ∀ (m_10933 : A_10931) ->
                       ∀ (n_10934 : A_10931) ->
                         ∀ (f_10935 : A_10931 -o B_10932) ->
                           (eq_4‹L› A_10931 m_10933 n_10934) ->
                             (eq_4‹U›
                               B_10932 ((f_10935) m_10933)
                               ((f_10935) n_10934)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (B_10939 : U) ->
                   ∀ (m_10940 : A_10938) ->
                     ∀ (n_10941 : A_10938) ->
                       ∀ (f_10942 : A_10938 -o B_10939) ->
                         (eq_4‹L› A_10938 m_10940 n_10941) ->
                           (eq_4‹U›
                             B_10939 ((f_10942) m_10940) ((f_10942) n_10941)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (m_10946 : A_10938) ->
                   ∀ (n_10947 : A_10938) ->
                     ∀ (f_10948 : A_10938 -o B_10945) ->
                       (eq_4‹L› A_10938 m_10946 n_10947) ->
                         (eq_4‹U›
                           B_10945 ((f_10948) m_10946) ((f_10948) n_10947)))
Logical.infer_tm(A_10938)
Logical.infer_tm(∀ (n_10952 : A_10938) ->
                   ∀ (f_10953 : A_10938 -o B_10945) ->
                     (eq_4‹L› A_10938 m_10951 n_10952) ->
                       (eq_4‹U›
                         B_10945 ((f_10953) m_10951) ((f_10953) n_10952)))
Logical.infer_tm(A_10938)
Logical.infer_tm(∀ (f_10957 : A_10938 -o B_10945) ->
                   (eq_4‹L› A_10938 m_10951 n_10956) ->
                     (eq_4‹U›
                       B_10945 ((f_10957) m_10951) ((f_10957) n_10956)))
Logical.infer_tm(A_10938 -o B_10945)
Logical.infer_tm(A_10938)
Logical.infer_tm(B_10945)
Logical.infer_tm((eq_4‹L› A_10938 m_10951 n_10956) ->
                   (eq_4‹U›
                     B_10945 ((f_10960) m_10951) ((f_10960) n_10956)))
Logical.infer_tm((eq_4‹L› A_10938 m_10951 n_10956))
Logical.check_tm( A_10938, L )
Logical.infer_tm(A_10938)
Logical.assert_equal(L, L)
Logical.check_tm( m_10951, A_10938 )
Logical.infer_tm(m_10951)
Logical.assert_equal(A_10938, A_10938)
Logical.check_tm( n_10956, A_10938 )
Logical.infer_tm(n_10956)
Logical.assert_equal(A_10938, A_10938)
Logical.infer_tm((eq_4‹U›
                   B_10945 ((f_10960) m_10951) ((f_10960) n_10956)))
Logical.check_tm( B_10945, U )
Logical.infer_tm(B_10945)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_10960) m_10951), B_10945 )
Logical.infer_tm(((f_10960) m_10951))
Logical.infer_tm(f_10960)
Logical.check_tm( m_10951, A_10938 )
Logical.infer_tm(m_10951)
Logical.assert_equal(A_10938, A_10938)
Logical.assert_equal(B_10945, B_10945)
Logical.check_tm( ((f_10960) n_10956), B_10945 )
Logical.infer_tm(((f_10960) n_10956))
Logical.infer_tm(f_10960)
Logical.check_tm( n_10956, A_10938 )
Logical.infer_tm(n_10956)
Logical.assert_equal(A_10938, A_10938)
Logical.assert_equal(B_10945, B_10945)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(A_10970)
Logical.infer_tm(A_10970)
Logical.infer_tm(A_10970 -o B_10997)
Logical.infer_tm(A_10970)
Logical.infer_tm(B_10997)
Logical.infer_tm((eq_4‹L› A_10970 m_11024 n_11051))
Logical.check_tm( A_10970, L )
Logical.infer_tm(A_10970)
Logical.assert_equal(L, L)
Logical.check_tm( m_11024, A_10970 )
Logical.infer_tm(m_11024)
Logical.assert_equal(A_10970, A_10970)
Logical.check_tm( n_11051, A_10970 )
Logical.infer_tm(n_11051)
Logical.assert_equal(A_10970, A_10970)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹L› #A_10970 #m_11024 #n_11051),
      (eq_4‹L› #A_10970 #m_11024 #m_11024));
    {| eq_pat?(R #A_10970, A_10965 : L)
       eq_pat?(R #B_10997, B_10966 : U)
       eq_pat?(R #m_11024, m_10967 : #A_10970)
       eq_pat?(R #n_11051, n_10968 : #A_10970)
       eq_pat?(R #f_11078, f_10969 : #A_10970 -o #B_10997) ::: [] =>?
         refl_6‹U›
    |}
  |}
|}
unify_local(
  eq_pat?(R #A_10970, A_10965 : L)
  eq_pat?(R #B_10997, B_10966 : U)
  eq_pat?(R #m_11024, m_10967 : #A_10970)
  eq_pat?(R #n_11051, n_10968 : #A_10970)
  eq_pat?(R #f_11078, f_10969 : #A_10970 -o #B_10997)
)
unify_global(
  eq_term?( (eq_4‹L› #A_10970 #m_11024 #n_11051),
    (eq_4‹L› #A_10970 #m_11024 #m_11024))
)
simpl_pprbm ~expand:false( #A_10970, #A_10965)
simpl_pprbm ~expand:false( #B_10997, #B_10966)
simpl_pprbm ~expand:false( #m_11024, #m_10967)
simpl_pprbm ~expand:false( #n_11051, #n_10968)
simpl_pprbm ~expand:false( #f_11078, #f_10969)
simpl_pprbm ~expand:false( (eq_4‹L› #A_10970 #m_11024 #n_11051),
  (eq_4‹L› #A_10970 #m_11024 #m_11024))
simpl_pprbm ~expand:false( #A_10970, #A_10970)
simpl_pprbm ~expand:false( #m_11024, #m_11024)
simpl_pprbm ~expand:false( #n_11051, #m_11024)
case_coverage_ok( refl_6‹U›,
  (eq_4‹U› B_10997 ((f_11078) n_11051) ((f_11078) n_11051)))
Logical.check_tm( refl_6‹U›,
  (eq_4‹U› B_10997 ((f_11078) n_11051) ((f_11078) n_11051))
)
Logical.infer_tm(refl_6‹U›)
Logical.check_tm( B_10997, U )
Logical.infer_tm(B_10997)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_11078) n_11051), B_10997 )
Logical.infer_tm(((f_11078) n_11051))
Logical.infer_tm(f_11078)
Logical.check_tm( n_11051, A_10970 )
Logical.infer_tm(n_11051)
Logical.assert_equal(A_10970, A_10970)
Logical.assert_equal(B_10997, B_10997)
Logical.assert_equal((eq_4‹U›
                       B_10997 ((f_11078) n_11051) ((f_11078) n_11051)), 
(eq_4‹U› B_10997 ((f_11078) n_11051) ((f_11078) n_11051)))
Logical.assert_equal(∀ (A_11193 : L) ->
                       ∀ (B_11194 : U) ->
                         ∀ (m_11195 : A_11193) ->
                           ∀ (n_11196 : A_11193) ->
                             ∀ (f_11197 : A_11193 -o B_11194) ->
                               (eq_4‹L› A_11193 m_11195 n_11196) ->
                                 (eq_4‹U›
                                   B_11194 ((f_11197) m_11195)
                                   ((f_11197) n_11196)), ∀ (A_11200 : L) ->
                                                           ∀ (B_11201 :
                                                             U) ->
                                                             ∀ (m_11202 :
                                                               A_11200) ->
                                                               ∀ (n_11203 :
                                                                 A_11200) ->
                                                                 ∀ (f_11204 :
                                                                   A_11200 -o
                                                                    B_11201) ->
                                                                   (eq_4‹L›
                                                                    A_11200
                                                                    m_11202
                                                                    n_11203) ->
                                                                    (eq_4‹U›
                                                                    B_11201
                                                                    ((f_11204)
                                                                    m_11202)
                                                                    ((f_11204)
                                                                    n_11203)))
Logical.infer_tm(∀ (A_11214 : L) ->
                   ∀ (B_11215 : U) ->
                     ∀ (m_11216 : A_11214) ->
                       ∀ (n_11217 : A_11214) ->
                         ∀ (f_11218 : A_11214 -> B_11215) ->
                           (eq_4‹L› A_11214 m_11216 n_11217) ->
                             (eq_4‹U›
                               B_11215 ((f_11218) m_11216)
                               ((f_11218) n_11217)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (B_11222 : U) ->
                   ∀ (m_11223 : A_11221) ->
                     ∀ (n_11224 : A_11221) ->
                       ∀ (f_11225 : A_11221 -> B_11222) ->
                         (eq_4‹L› A_11221 m_11223 n_11224) ->
                           (eq_4‹U›
                             B_11222 ((f_11225) m_11223) ((f_11225) n_11224)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (m_11229 : A_11221) ->
                   ∀ (n_11230 : A_11221) ->
                     ∀ (f_11231 : A_11221 -> B_11228) ->
                       (eq_4‹L› A_11221 m_11229 n_11230) ->
                         (eq_4‹U›
                           B_11228 ((f_11231) m_11229) ((f_11231) n_11230)))
Logical.infer_tm(A_11221)
Logical.infer_tm(∀ (n_11235 : A_11221) ->
                   ∀ (f_11236 : A_11221 -> B_11228) ->
                     (eq_4‹L› A_11221 m_11234 n_11235) ->
                       (eq_4‹U›
                         B_11228 ((f_11236) m_11234) ((f_11236) n_11235)))
Logical.infer_tm(A_11221)
Logical.infer_tm(∀ (f_11240 : A_11221 -> B_11228) ->
                   (eq_4‹L› A_11221 m_11234 n_11239) ->
                     (eq_4‹U›
                       B_11228 ((f_11240) m_11234) ((f_11240) n_11239)))
Logical.infer_tm(A_11221 -> B_11228)
Logical.infer_tm(A_11221)
Logical.infer_tm(B_11228)
Logical.infer_tm((eq_4‹L› A_11221 m_11234 n_11239) ->
                   (eq_4‹U›
                     B_11228 ((f_11243) m_11234) ((f_11243) n_11239)))
Logical.infer_tm((eq_4‹L› A_11221 m_11234 n_11239))
Logical.check_tm( A_11221, L )
Logical.infer_tm(A_11221)
Logical.assert_equal(L, L)
Logical.check_tm( m_11234, A_11221 )
Logical.infer_tm(m_11234)
Logical.assert_equal(A_11221, A_11221)
Logical.check_tm( n_11239, A_11221 )
Logical.infer_tm(n_11239)
Logical.assert_equal(A_11221, A_11221)
Logical.infer_tm((eq_4‹U›
                   B_11228 ((f_11243) m_11234) ((f_11243) n_11239)))
Logical.check_tm( B_11228, U )
Logical.infer_tm(B_11228)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_11243) m_11234), B_11228 )
Logical.infer_tm(((f_11243) m_11234))
Logical.infer_tm(f_11243)
Logical.check_tm( m_11234, A_11221 )
Logical.infer_tm(m_11234)
Logical.assert_equal(A_11221, A_11221)
Logical.assert_equal(B_11228, B_11228)
Logical.check_tm( ((f_11243) n_11239), B_11228 )
Logical.infer_tm(((f_11243) n_11239))
Logical.infer_tm(f_11243)
Logical.check_tm( n_11239, A_11221 )
Logical.infer_tm(n_11239)
Logical.assert_equal(A_11221, A_11221)
Logical.assert_equal(B_11228, B_11228)
Logical.check_tm(
  function congr_11248 :
    ∀ (A_11249 : L) ->
      ∀ (B_11250 : U) ->
        ∀ (m_11251 : A_11249) ->
          ∀ (n_11252 : A_11249) ->
            ∀ (f_11253 : A_11249 -> B_11250) ->
              (eq_4‹L› A_11249 m_11251 n_11252) ->
                (eq_4‹U› B_11250 ((f_11253) m_11251) ((f_11253) n_11252))
  | A_11256 B_11257 m_11258 n_11259 f_11260 refl_6 => refl_6‹U›,
  ∀ (A_11261 : L) ->
    ∀ (B_11262 : U) ->
      ∀ (m_11263 : A_11261) ->
        ∀ (n_11264 : A_11261) ->
          ∀ (f_11265 : A_11261 -> B_11262) ->
            (eq_4‹L› A_11261 m_11263 n_11264) ->
              (eq_4‹U› B_11262 ((f_11265) m_11263) ((f_11265) n_11264))
)
Logical.infer_tm(function congr_11268 :
                   ∀ (A_11269 : L) ->
                     ∀ (B_11270 : U) ->
                       ∀ (m_11271 : A_11269) ->
                         ∀ (n_11272 : A_11269) ->
                           ∀ (f_11273 : A_11269 -> B_11270) ->
                             (eq_4‹L› A_11269 m_11271 n_11272) ->
                               (eq_4‹U›
                                 B_11270 ((f_11273) m_11271)
                                 ((f_11273) n_11272))
                 | A_11276 B_11277 m_11278 n_11279 f_11280 refl_6 =>
                   refl_6‹U›)
Logical.infer_tm(∀ (A_11282 : L) ->
                   ∀ (B_11283 : U) ->
                     ∀ (m_11284 : A_11282) ->
                       ∀ (n_11285 : A_11282) ->
                         ∀ (f_11286 : A_11282 -> B_11283) ->
                           (eq_4‹L› A_11282 m_11284 n_11285) ->
                             (eq_4‹U›
                               B_11283 ((f_11286) m_11284)
                               ((f_11286) n_11285)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (B_11290 : U) ->
                   ∀ (m_11291 : A_11289) ->
                     ∀ (n_11292 : A_11289) ->
                       ∀ (f_11293 : A_11289 -> B_11290) ->
                         (eq_4‹L› A_11289 m_11291 n_11292) ->
                           (eq_4‹U›
                             B_11290 ((f_11293) m_11291) ((f_11293) n_11292)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (m_11297 : A_11289) ->
                   ∀ (n_11298 : A_11289) ->
                     ∀ (f_11299 : A_11289 -> B_11296) ->
                       (eq_4‹L› A_11289 m_11297 n_11298) ->
                         (eq_4‹U›
                           B_11296 ((f_11299) m_11297) ((f_11299) n_11298)))
Logical.infer_tm(A_11289)
Logical.infer_tm(∀ (n_11303 : A_11289) ->
                   ∀ (f_11304 : A_11289 -> B_11296) ->
                     (eq_4‹L› A_11289 m_11302 n_11303) ->
                       (eq_4‹U›
                         B_11296 ((f_11304) m_11302) ((f_11304) n_11303)))
Logical.infer_tm(A_11289)
Logical.infer_tm(∀ (f_11308 : A_11289 -> B_11296) ->
                   (eq_4‹L› A_11289 m_11302 n_11307) ->
                     (eq_4‹U›
                       B_11296 ((f_11308) m_11302) ((f_11308) n_11307)))
Logical.infer_tm(A_11289 -> B_11296)
Logical.infer_tm(A_11289)
Logical.infer_tm(B_11296)
Logical.infer_tm((eq_4‹L› A_11289 m_11302 n_11307) ->
                   (eq_4‹U›
                     B_11296 ((f_11311) m_11302) ((f_11311) n_11307)))
Logical.infer_tm((eq_4‹L› A_11289 m_11302 n_11307))
Logical.check_tm( A_11289, L )
Logical.infer_tm(A_11289)
Logical.assert_equal(L, L)
Logical.check_tm( m_11302, A_11289 )
Logical.infer_tm(m_11302)
Logical.assert_equal(A_11289, A_11289)
Logical.check_tm( n_11307, A_11289 )
Logical.infer_tm(n_11307)
Logical.assert_equal(A_11289, A_11289)
Logical.infer_tm((eq_4‹U›
                   B_11296 ((f_11311) m_11302) ((f_11311) n_11307)))
Logical.check_tm( B_11296, U )
Logical.infer_tm(B_11296)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_11311) m_11302), B_11296 )
Logical.infer_tm(((f_11311) m_11302))
Logical.infer_tm(f_11311)
Logical.check_tm( m_11302, A_11289 )
Logical.infer_tm(m_11302)
Logical.assert_equal(A_11289, A_11289)
Logical.assert_equal(B_11296, B_11296)
Logical.check_tm( ((f_11311) n_11307), B_11296 )
Logical.infer_tm(((f_11311) n_11307))
Logical.infer_tm(f_11311)
Logical.check_tm( n_11307, A_11289 )
Logical.infer_tm(n_11307)
Logical.assert_equal(A_11289, A_11289)
Logical.assert_equal(B_11296, B_11296)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(A_11321)
Logical.infer_tm(A_11321)
Logical.infer_tm(A_11321 -> B_11348)
Logical.infer_tm(A_11321)
Logical.infer_tm(B_11348)
Logical.infer_tm((eq_4‹L› A_11321 m_11375 n_11402))
Logical.check_tm( A_11321, L )
Logical.infer_tm(A_11321)
Logical.assert_equal(L, L)
Logical.check_tm( m_11375, A_11321 )
Logical.infer_tm(m_11375)
Logical.assert_equal(A_11321, A_11321)
Logical.check_tm( n_11402, A_11321 )
Logical.infer_tm(n_11402)
Logical.assert_equal(A_11321, A_11321)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹L› #A_11321 #m_11375 #n_11402),
      (eq_4‹L› #A_11321 #m_11375 #m_11375));
    {| eq_pat?(R #A_11321, A_11316 : L)
       eq_pat?(R #B_11348, B_11317 : U)
       eq_pat?(R #m_11375, m_11318 : #A_11321)
       eq_pat?(R #n_11402, n_11319 : #A_11321)
       eq_pat?(R #f_11429, f_11320 : #A_11321 -> #B_11348) ::: [] =>?
         refl_6‹U›
    |}
  |}
|}
unify_local(
  eq_pat?(R #A_11321, A_11316 : L)
  eq_pat?(R #B_11348, B_11317 : U)
  eq_pat?(R #m_11375, m_11318 : #A_11321)
  eq_pat?(R #n_11402, n_11319 : #A_11321)
  eq_pat?(R #f_11429, f_11320 : #A_11321 -> #B_11348)
)
unify_global(
  eq_term?( (eq_4‹L› #A_11321 #m_11375 #n_11402),
    (eq_4‹L› #A_11321 #m_11375 #m_11375))
)
simpl_pprbm ~expand:false( #A_11321, #A_11316)
simpl_pprbm ~expand:false( #B_11348, #B_11317)
simpl_pprbm ~expand:false( #m_11375, #m_11318)
simpl_pprbm ~expand:false( #n_11402, #n_11319)
simpl_pprbm ~expand:false( #f_11429, #f_11320)
simpl_pprbm ~expand:false( (eq_4‹L› #A_11321 #m_11375 #n_11402),
  (eq_4‹L› #A_11321 #m_11375 #m_11375))
simpl_pprbm ~expand:false( #A_11321, #A_11321)
simpl_pprbm ~expand:false( #m_11375, #m_11375)
simpl_pprbm ~expand:false( #n_11402, #m_11375)
case_coverage_ok( refl_6‹U›,
  (eq_4‹U› B_11348 ((f_11429) n_11402) ((f_11429) n_11402)))
Logical.check_tm( refl_6‹U›,
  (eq_4‹U› B_11348 ((f_11429) n_11402) ((f_11429) n_11402))
)
Logical.infer_tm(refl_6‹U›)
Logical.check_tm( B_11348, U )
Logical.infer_tm(B_11348)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_11429) n_11402), B_11348 )
Logical.infer_tm(((f_11429) n_11402))
Logical.infer_tm(f_11429)
Logical.check_tm( n_11402, A_11321 )
Logical.infer_tm(n_11402)
Logical.assert_equal(A_11321, A_11321)
Logical.assert_equal(B_11348, B_11348)
Logical.assert_equal((eq_4‹U›
                       B_11348 ((f_11429) n_11402) ((f_11429) n_11402)), 
(eq_4‹U› B_11348 ((f_11429) n_11402) ((f_11429) n_11402)))
Logical.assert_equal(∀ (A_11544 : L) ->
                       ∀ (B_11545 : U) ->
                         ∀ (m_11546 : A_11544) ->
                           ∀ (n_11547 : A_11544) ->
                             ∀ (f_11548 : A_11544 -> B_11545) ->
                               (eq_4‹L› A_11544 m_11546 n_11547) ->
                                 (eq_4‹U›
                                   B_11545 ((f_11548) m_11546)
                                   ((f_11548) n_11547)), ∀ (A_11551 : L) ->
                                                           ∀ (B_11552 :
                                                             U) ->
                                                             ∀ (m_11553 :
                                                               A_11551) ->
                                                               ∀ (n_11554 :
                                                                 A_11551) ->
                                                                 ∀ (f_11555 :
                                                                   A_11551 ->
                                                                    B_11552) ->
                                                                   (eq_4‹L›
                                                                    A_11551
                                                                    m_11553
                                                                    n_11554) ->
                                                                    (eq_4‹U›
                                                                    B_11552
                                                                    ((f_11555)
                                                                    m_11553)
                                                                    ((f_11555)
                                                                    n_11554)))
Logical.infer_tm(∀ (A_11565 : U) ->
                   ∀ (B_11566 : L) ->
                     ∀ (m_11567 : A_11565) ->
                       ∀ (n_11568 : A_11565) ->
                         ∀ (f_11569 : A_11565 -o B_11566) ->
                           (eq_4‹U› A_11565 m_11567 n_11568) ->
                             (eq_4‹L›
                               B_11566 ((f_11569) m_11567)
                               ((f_11569) n_11568)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (B_11573 : L) ->
                   ∀ (m_11574 : A_11572) ->
                     ∀ (n_11575 : A_11572) ->
                       ∀ (f_11576 : A_11572 -o B_11573) ->
                         (eq_4‹U› A_11572 m_11574 n_11575) ->
                           (eq_4‹L›
                             B_11573 ((f_11576) m_11574) ((f_11576) n_11575)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (m_11580 : A_11572) ->
                   ∀ (n_11581 : A_11572) ->
                     ∀ (f_11582 : A_11572 -o B_11579) ->
                       (eq_4‹U› A_11572 m_11580 n_11581) ->
                         (eq_4‹L›
                           B_11579 ((f_11582) m_11580) ((f_11582) n_11581)))
Logical.infer_tm(A_11572)
Logical.infer_tm(∀ (n_11586 : A_11572) ->
                   ∀ (f_11587 : A_11572 -o B_11579) ->
                     (eq_4‹U› A_11572 m_11585 n_11586) ->
                       (eq_4‹L›
                         B_11579 ((f_11587) m_11585) ((f_11587) n_11586)))
Logical.infer_tm(A_11572)
Logical.infer_tm(∀ (f_11591 : A_11572 -o B_11579) ->
                   (eq_4‹U› A_11572 m_11585 n_11590) ->
                     (eq_4‹L›
                       B_11579 ((f_11591) m_11585) ((f_11591) n_11590)))
Logical.infer_tm(A_11572 -o B_11579)
Logical.infer_tm(A_11572)
Logical.infer_tm(B_11579)
Logical.infer_tm((eq_4‹U› A_11572 m_11585 n_11590) ->
                   (eq_4‹L›
                     B_11579 ((f_11594) m_11585) ((f_11594) n_11590)))
Logical.infer_tm((eq_4‹U› A_11572 m_11585 n_11590))
Logical.check_tm( A_11572, U )
Logical.infer_tm(A_11572)
Logical.assert_equal(U, U)
Logical.check_tm( m_11585, A_11572 )
Logical.infer_tm(m_11585)
Logical.assert_equal(A_11572, A_11572)
Logical.check_tm( n_11590, A_11572 )
Logical.infer_tm(n_11590)
Logical.assert_equal(A_11572, A_11572)
Logical.infer_tm((eq_4‹L›
                   B_11579 ((f_11594) m_11585) ((f_11594) n_11590)))
Logical.check_tm( B_11579, L )
Logical.infer_tm(B_11579)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_11594) m_11585), B_11579 )
Logical.infer_tm(((f_11594) m_11585))
Logical.infer_tm(f_11594)
Logical.check_tm( m_11585, A_11572 )
Logical.infer_tm(m_11585)
Logical.assert_equal(A_11572, A_11572)
Logical.assert_equal(B_11579, B_11579)
Logical.check_tm( ((f_11594) n_11590), B_11579 )
Logical.infer_tm(((f_11594) n_11590))
Logical.infer_tm(f_11594)
Logical.check_tm( n_11590, A_11572 )
Logical.infer_tm(n_11590)
Logical.assert_equal(A_11572, A_11572)
Logical.assert_equal(B_11579, B_11579)
Logical.check_tm(
  function congr_11599 :
    ∀ (A_11600 : U) ->
      ∀ (B_11601 : L) ->
        ∀ (m_11602 : A_11600) ->
          ∀ (n_11603 : A_11600) ->
            ∀ (f_11604 : A_11600 -o B_11601) ->
              (eq_4‹U› A_11600 m_11602 n_11603) ->
                (eq_4‹L› B_11601 ((f_11604) m_11602) ((f_11604) n_11603))
  | A_11607 B_11608 m_11609 n_11610 f_11611 refl_6 => refl_6‹L›,
  ∀ (A_11612 : U) ->
    ∀ (B_11613 : L) ->
      ∀ (m_11614 : A_11612) ->
        ∀ (n_11615 : A_11612) ->
          ∀ (f_11616 : A_11612 -o B_11613) ->
            (eq_4‹U› A_11612 m_11614 n_11615) ->
              (eq_4‹L› B_11613 ((f_11616) m_11614) ((f_11616) n_11615))
)
Logical.infer_tm(function congr_11619 :
                   ∀ (A_11620 : U) ->
                     ∀ (B_11621 : L) ->
                       ∀ (m_11622 : A_11620) ->
                         ∀ (n_11623 : A_11620) ->
                           ∀ (f_11624 : A_11620 -o B_11621) ->
                             (eq_4‹U› A_11620 m_11622 n_11623) ->
                               (eq_4‹L›
                                 B_11621 ((f_11624) m_11622)
                                 ((f_11624) n_11623))
                 | A_11627 B_11628 m_11629 n_11630 f_11631 refl_6 =>
                   refl_6‹L›)
Logical.infer_tm(∀ (A_11633 : U) ->
                   ∀ (B_11634 : L) ->
                     ∀ (m_11635 : A_11633) ->
                       ∀ (n_11636 : A_11633) ->
                         ∀ (f_11637 : A_11633 -o B_11634) ->
                           (eq_4‹U› A_11633 m_11635 n_11636) ->
                             (eq_4‹L›
                               B_11634 ((f_11637) m_11635)
                               ((f_11637) n_11636)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (B_11641 : L) ->
                   ∀ (m_11642 : A_11640) ->
                     ∀ (n_11643 : A_11640) ->
                       ∀ (f_11644 : A_11640 -o B_11641) ->
                         (eq_4‹U› A_11640 m_11642 n_11643) ->
                           (eq_4‹L›
                             B_11641 ((f_11644) m_11642) ((f_11644) n_11643)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (m_11648 : A_11640) ->
                   ∀ (n_11649 : A_11640) ->
                     ∀ (f_11650 : A_11640 -o B_11647) ->
                       (eq_4‹U› A_11640 m_11648 n_11649) ->
                         (eq_4‹L›
                           B_11647 ((f_11650) m_11648) ((f_11650) n_11649)))
Logical.infer_tm(A_11640)
Logical.infer_tm(∀ (n_11654 : A_11640) ->
                   ∀ (f_11655 : A_11640 -o B_11647) ->
                     (eq_4‹U› A_11640 m_11653 n_11654) ->
                       (eq_4‹L›
                         B_11647 ((f_11655) m_11653) ((f_11655) n_11654)))
Logical.infer_tm(A_11640)
Logical.infer_tm(∀ (f_11659 : A_11640 -o B_11647) ->
                   (eq_4‹U› A_11640 m_11653 n_11658) ->
                     (eq_4‹L›
                       B_11647 ((f_11659) m_11653) ((f_11659) n_11658)))
Logical.infer_tm(A_11640 -o B_11647)
Logical.infer_tm(A_11640)
Logical.infer_tm(B_11647)
Logical.infer_tm((eq_4‹U› A_11640 m_11653 n_11658) ->
                   (eq_4‹L›
                     B_11647 ((f_11662) m_11653) ((f_11662) n_11658)))
Logical.infer_tm((eq_4‹U› A_11640 m_11653 n_11658))
Logical.check_tm( A_11640, U )
Logical.infer_tm(A_11640)
Logical.assert_equal(U, U)
Logical.check_tm( m_11653, A_11640 )
Logical.infer_tm(m_11653)
Logical.assert_equal(A_11640, A_11640)
Logical.check_tm( n_11658, A_11640 )
Logical.infer_tm(n_11658)
Logical.assert_equal(A_11640, A_11640)
Logical.infer_tm((eq_4‹L›
                   B_11647 ((f_11662) m_11653) ((f_11662) n_11658)))
Logical.check_tm( B_11647, L )
Logical.infer_tm(B_11647)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_11662) m_11653), B_11647 )
Logical.infer_tm(((f_11662) m_11653))
Logical.infer_tm(f_11662)
Logical.check_tm( m_11653, A_11640 )
Logical.infer_tm(m_11653)
Logical.assert_equal(A_11640, A_11640)
Logical.assert_equal(B_11647, B_11647)
Logical.check_tm( ((f_11662) n_11658), B_11647 )
Logical.infer_tm(((f_11662) n_11658))
Logical.infer_tm(f_11662)
Logical.check_tm( n_11658, A_11640 )
Logical.infer_tm(n_11658)
Logical.assert_equal(A_11640, A_11640)
Logical.assert_equal(B_11647, B_11647)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(A_11672)
Logical.infer_tm(A_11672)
Logical.infer_tm(A_11672 -o B_11699)
Logical.infer_tm(A_11672)
Logical.infer_tm(B_11699)
Logical.infer_tm((eq_4‹U› A_11672 m_11726 n_11753))
Logical.check_tm( A_11672, U )
Logical.infer_tm(A_11672)
Logical.assert_equal(U, U)
Logical.check_tm( m_11726, A_11672 )
Logical.infer_tm(m_11726)
Logical.assert_equal(A_11672, A_11672)
Logical.check_tm( n_11753, A_11672 )
Logical.infer_tm(n_11753)
Logical.assert_equal(A_11672, A_11672)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹U› #A_11672 #m_11726 #n_11753),
      (eq_4‹U› #A_11672 #m_11726 #m_11726));
    {| eq_pat?(R #A_11672, A_11667 : U)
       eq_pat?(R #B_11699, B_11668 : L)
       eq_pat?(R #m_11726, m_11669 : #A_11672)
       eq_pat?(R #n_11753, n_11670 : #A_11672)
       eq_pat?(R #f_11780, f_11671 : #A_11672 -o #B_11699) ::: [] =>?
         refl_6‹L›
    |}
  |}
|}
unify_local(
  eq_pat?(R #A_11672, A_11667 : U)
  eq_pat?(R #B_11699, B_11668 : L)
  eq_pat?(R #m_11726, m_11669 : #A_11672)
  eq_pat?(R #n_11753, n_11670 : #A_11672)
  eq_pat?(R #f_11780, f_11671 : #A_11672 -o #B_11699)
)
unify_global(
  eq_term?( (eq_4‹U› #A_11672 #m_11726 #n_11753),
    (eq_4‹U› #A_11672 #m_11726 #m_11726))
)
simpl_pprbm ~expand:false( #A_11672, #A_11667)
simpl_pprbm ~expand:false( #B_11699, #B_11668)
simpl_pprbm ~expand:false( #m_11726, #m_11669)
simpl_pprbm ~expand:false( #n_11753, #n_11670)
simpl_pprbm ~expand:false( #f_11780, #f_11671)
simpl_pprbm ~expand:false( (eq_4‹U› #A_11672 #m_11726 #n_11753),
  (eq_4‹U› #A_11672 #m_11726 #m_11726))
simpl_pprbm ~expand:false( #A_11672, #A_11672)
simpl_pprbm ~expand:false( #m_11726, #m_11726)
simpl_pprbm ~expand:false( #n_11753, #m_11726)
case_coverage_ok( refl_6‹L›,
  (eq_4‹L› B_11699 ((f_11780) n_11753) ((f_11780) n_11753)))
Logical.check_tm( refl_6‹L›,
  (eq_4‹L› B_11699 ((f_11780) n_11753) ((f_11780) n_11753))
)
Logical.infer_tm(refl_6‹L›)
Logical.check_tm( B_11699, L )
Logical.infer_tm(B_11699)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_11780) n_11753), B_11699 )
Logical.infer_tm(((f_11780) n_11753))
Logical.infer_tm(f_11780)
Logical.check_tm( n_11753, A_11672 )
Logical.infer_tm(n_11753)
Logical.assert_equal(A_11672, A_11672)
Logical.assert_equal(B_11699, B_11699)
Logical.assert_equal((eq_4‹L›
                       B_11699 ((f_11780) n_11753) ((f_11780) n_11753)), 
(eq_4‹L› B_11699 ((f_11780) n_11753) ((f_11780) n_11753)))
Logical.assert_equal(∀ (A_11895 : U) ->
                       ∀ (B_11896 : L) ->
                         ∀ (m_11897 : A_11895) ->
                           ∀ (n_11898 : A_11895) ->
                             ∀ (f_11899 : A_11895 -o B_11896) ->
                               (eq_4‹U› A_11895 m_11897 n_11898) ->
                                 (eq_4‹L›
                                   B_11896 ((f_11899) m_11897)
                                   ((f_11899) n_11898)), ∀ (A_11902 : U) ->
                                                           ∀ (B_11903 :
                                                             L) ->
                                                             ∀ (m_11904 :
                                                               A_11902) ->
                                                               ∀ (n_11905 :
                                                                 A_11902) ->
                                                                 ∀ (f_11906 :
                                                                   A_11902 -o
                                                                    B_11903) ->
                                                                   (eq_4‹U›
                                                                    A_11902
                                                                    m_11904
                                                                    n_11905) ->
                                                                    (eq_4‹L›
                                                                    B_11903
                                                                    ((f_11906)
                                                                    m_11904)
                                                                    ((f_11906)
                                                                    n_11905)))
Logical.infer_tm(∀ (A_11916 : U) ->
                   ∀ (B_11917 : L) ->
                     ∀ (m_11918 : A_11916) ->
                       ∀ (n_11919 : A_11916) ->
                         ∀ (f_11920 : A_11916 -> B_11917) ->
                           (eq_4‹U› A_11916 m_11918 n_11919) ->
                             (eq_4‹L›
                               B_11917 ((f_11920) m_11918)
                               ((f_11920) n_11919)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (B_11924 : L) ->
                   ∀ (m_11925 : A_11923) ->
                     ∀ (n_11926 : A_11923) ->
                       ∀ (f_11927 : A_11923 -> B_11924) ->
                         (eq_4‹U› A_11923 m_11925 n_11926) ->
                           (eq_4‹L›
                             B_11924 ((f_11927) m_11925) ((f_11927) n_11926)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (m_11931 : A_11923) ->
                   ∀ (n_11932 : A_11923) ->
                     ∀ (f_11933 : A_11923 -> B_11930) ->
                       (eq_4‹U› A_11923 m_11931 n_11932) ->
                         (eq_4‹L›
                           B_11930 ((f_11933) m_11931) ((f_11933) n_11932)))
Logical.infer_tm(A_11923)
Logical.infer_tm(∀ (n_11937 : A_11923) ->
                   ∀ (f_11938 : A_11923 -> B_11930) ->
                     (eq_4‹U› A_11923 m_11936 n_11937) ->
                       (eq_4‹L›
                         B_11930 ((f_11938) m_11936) ((f_11938) n_11937)))
Logical.infer_tm(A_11923)
Logical.infer_tm(∀ (f_11942 : A_11923 -> B_11930) ->
                   (eq_4‹U› A_11923 m_11936 n_11941) ->
                     (eq_4‹L›
                       B_11930 ((f_11942) m_11936) ((f_11942) n_11941)))
Logical.infer_tm(A_11923 -> B_11930)
Logical.infer_tm(A_11923)
Logical.infer_tm(B_11930)
Logical.infer_tm((eq_4‹U› A_11923 m_11936 n_11941) ->
                   (eq_4‹L›
                     B_11930 ((f_11945) m_11936) ((f_11945) n_11941)))
Logical.infer_tm((eq_4‹U› A_11923 m_11936 n_11941))
Logical.check_tm( A_11923, U )
Logical.infer_tm(A_11923)
Logical.assert_equal(U, U)
Logical.check_tm( m_11936, A_11923 )
Logical.infer_tm(m_11936)
Logical.assert_equal(A_11923, A_11923)
Logical.check_tm( n_11941, A_11923 )
Logical.infer_tm(n_11941)
Logical.assert_equal(A_11923, A_11923)
Logical.infer_tm((eq_4‹L›
                   B_11930 ((f_11945) m_11936) ((f_11945) n_11941)))
Logical.check_tm( B_11930, L )
Logical.infer_tm(B_11930)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_11945) m_11936), B_11930 )
Logical.infer_tm(((f_11945) m_11936))
Logical.infer_tm(f_11945)
Logical.check_tm( m_11936, A_11923 )
Logical.infer_tm(m_11936)
Logical.assert_equal(A_11923, A_11923)
Logical.assert_equal(B_11930, B_11930)
Logical.check_tm( ((f_11945) n_11941), B_11930 )
Logical.infer_tm(((f_11945) n_11941))
Logical.infer_tm(f_11945)
Logical.check_tm( n_11941, A_11923 )
Logical.infer_tm(n_11941)
Logical.assert_equal(A_11923, A_11923)
Logical.assert_equal(B_11930, B_11930)
Logical.check_tm(
  function congr_11950 :
    ∀ (A_11951 : U) ->
      ∀ (B_11952 : L) ->
        ∀ (m_11953 : A_11951) ->
          ∀ (n_11954 : A_11951) ->
            ∀ (f_11955 : A_11951 -> B_11952) ->
              (eq_4‹U› A_11951 m_11953 n_11954) ->
                (eq_4‹L› B_11952 ((f_11955) m_11953) ((f_11955) n_11954))
  | A_11958 B_11959 m_11960 n_11961 f_11962 refl_6 => refl_6‹L›,
  ∀ (A_11963 : U) ->
    ∀ (B_11964 : L) ->
      ∀ (m_11965 : A_11963) ->
        ∀ (n_11966 : A_11963) ->
          ∀ (f_11967 : A_11963 -> B_11964) ->
            (eq_4‹U› A_11963 m_11965 n_11966) ->
              (eq_4‹L› B_11964 ((f_11967) m_11965) ((f_11967) n_11966))
)
Logical.infer_tm(function congr_11970 :
                   ∀ (A_11971 : U) ->
                     ∀ (B_11972 : L) ->
                       ∀ (m_11973 : A_11971) ->
                         ∀ (n_11974 : A_11971) ->
                           ∀ (f_11975 : A_11971 -> B_11972) ->
                             (eq_4‹U› A_11971 m_11973 n_11974) ->
                               (eq_4‹L›
                                 B_11972 ((f_11975) m_11973)
                                 ((f_11975) n_11974))
                 | A_11978 B_11979 m_11980 n_11981 f_11982 refl_6 =>
                   refl_6‹L›)
Logical.infer_tm(∀ (A_11984 : U) ->
                   ∀ (B_11985 : L) ->
                     ∀ (m_11986 : A_11984) ->
                       ∀ (n_11987 : A_11984) ->
                         ∀ (f_11988 : A_11984 -> B_11985) ->
                           (eq_4‹U› A_11984 m_11986 n_11987) ->
                             (eq_4‹L›
                               B_11985 ((f_11988) m_11986)
                               ((f_11988) n_11987)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (B_11992 : L) ->
                   ∀ (m_11993 : A_11991) ->
                     ∀ (n_11994 : A_11991) ->
                       ∀ (f_11995 : A_11991 -> B_11992) ->
                         (eq_4‹U› A_11991 m_11993 n_11994) ->
                           (eq_4‹L›
                             B_11992 ((f_11995) m_11993) ((f_11995) n_11994)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (m_11999 : A_11991) ->
                   ∀ (n_12000 : A_11991) ->
                     ∀ (f_12001 : A_11991 -> B_11998) ->
                       (eq_4‹U› A_11991 m_11999 n_12000) ->
                         (eq_4‹L›
                           B_11998 ((f_12001) m_11999) ((f_12001) n_12000)))
Logical.infer_tm(A_11991)
Logical.infer_tm(∀ (n_12005 : A_11991) ->
                   ∀ (f_12006 : A_11991 -> B_11998) ->
                     (eq_4‹U› A_11991 m_12004 n_12005) ->
                       (eq_4‹L›
                         B_11998 ((f_12006) m_12004) ((f_12006) n_12005)))
Logical.infer_tm(A_11991)
Logical.infer_tm(∀ (f_12010 : A_11991 -> B_11998) ->
                   (eq_4‹U› A_11991 m_12004 n_12009) ->
                     (eq_4‹L›
                       B_11998 ((f_12010) m_12004) ((f_12010) n_12009)))
Logical.infer_tm(A_11991 -> B_11998)
Logical.infer_tm(A_11991)
Logical.infer_tm(B_11998)
Logical.infer_tm((eq_4‹U› A_11991 m_12004 n_12009) ->
                   (eq_4‹L›
                     B_11998 ((f_12013) m_12004) ((f_12013) n_12009)))
Logical.infer_tm((eq_4‹U› A_11991 m_12004 n_12009))
Logical.check_tm( A_11991, U )
Logical.infer_tm(A_11991)
Logical.assert_equal(U, U)
Logical.check_tm( m_12004, A_11991 )
Logical.infer_tm(m_12004)
Logical.assert_equal(A_11991, A_11991)
Logical.check_tm( n_12009, A_11991 )
Logical.infer_tm(n_12009)
Logical.assert_equal(A_11991, A_11991)
Logical.infer_tm((eq_4‹L›
                   B_11998 ((f_12013) m_12004) ((f_12013) n_12009)))
Logical.check_tm( B_11998, L )
Logical.infer_tm(B_11998)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_12013) m_12004), B_11998 )
Logical.infer_tm(((f_12013) m_12004))
Logical.infer_tm(f_12013)
Logical.check_tm( m_12004, A_11991 )
Logical.infer_tm(m_12004)
Logical.assert_equal(A_11991, A_11991)
Logical.assert_equal(B_11998, B_11998)
Logical.check_tm( ((f_12013) n_12009), B_11998 )
Logical.infer_tm(((f_12013) n_12009))
Logical.infer_tm(f_12013)
Logical.check_tm( n_12009, A_11991 )
Logical.infer_tm(n_12009)
Logical.assert_equal(A_11991, A_11991)
Logical.assert_equal(B_11998, B_11998)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(A_12023)
Logical.infer_tm(A_12023)
Logical.infer_tm(A_12023 -> B_12050)
Logical.infer_tm(A_12023)
Logical.infer_tm(B_12050)
Logical.infer_tm((eq_4‹U› A_12023 m_12077 n_12104))
Logical.check_tm( A_12023, U )
Logical.infer_tm(A_12023)
Logical.assert_equal(U, U)
Logical.check_tm( m_12077, A_12023 )
Logical.infer_tm(m_12077)
Logical.assert_equal(A_12023, A_12023)
Logical.check_tm( n_12104, A_12023 )
Logical.infer_tm(n_12104)
Logical.assert_equal(A_12023, A_12023)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹U› #A_12023 #m_12077 #n_12104),
      (eq_4‹U› #A_12023 #m_12077 #m_12077));
    {| eq_pat?(R #A_12023, A_12018 : U)
       eq_pat?(R #B_12050, B_12019 : L)
       eq_pat?(R #m_12077, m_12020 : #A_12023)
       eq_pat?(R #n_12104, n_12021 : #A_12023)
       eq_pat?(R #f_12131, f_12022 : #A_12023 -> #B_12050) ::: [] =>?
         refl_6‹L›
    |}
  |}
|}
unify_local(
  eq_pat?(R #A_12023, A_12018 : U)
  eq_pat?(R #B_12050, B_12019 : L)
  eq_pat?(R #m_12077, m_12020 : #A_12023)
  eq_pat?(R #n_12104, n_12021 : #A_12023)
  eq_pat?(R #f_12131, f_12022 : #A_12023 -> #B_12050)
)
unify_global(
  eq_term?( (eq_4‹U› #A_12023 #m_12077 #n_12104),
    (eq_4‹U› #A_12023 #m_12077 #m_12077))
)
simpl_pprbm ~expand:false( #A_12023, #A_12018)
simpl_pprbm ~expand:false( #B_12050, #B_12019)
simpl_pprbm ~expand:false( #m_12077, #m_12020)
simpl_pprbm ~expand:false( #n_12104, #n_12021)
simpl_pprbm ~expand:false( #f_12131, #f_12022)
simpl_pprbm ~expand:false( (eq_4‹U› #A_12023 #m_12077 #n_12104),
  (eq_4‹U› #A_12023 #m_12077 #m_12077))
simpl_pprbm ~expand:false( #A_12023, #A_12023)
simpl_pprbm ~expand:false( #m_12077, #m_12077)
simpl_pprbm ~expand:false( #n_12104, #m_12077)
case_coverage_ok( refl_6‹L›,
  (eq_4‹L› B_12050 ((f_12131) n_12104) ((f_12131) n_12104)))
Logical.check_tm( refl_6‹L›,
  (eq_4‹L› B_12050 ((f_12131) n_12104) ((f_12131) n_12104))
)
Logical.infer_tm(refl_6‹L›)
Logical.check_tm( B_12050, L )
Logical.infer_tm(B_12050)
Logical.assert_equal(L, L)
Logical.check_tm( ((f_12131) n_12104), B_12050 )
Logical.infer_tm(((f_12131) n_12104))
Logical.infer_tm(f_12131)
Logical.check_tm( n_12104, A_12023 )
Logical.infer_tm(n_12104)
Logical.assert_equal(A_12023, A_12023)
Logical.assert_equal(B_12050, B_12050)
Logical.assert_equal((eq_4‹L›
                       B_12050 ((f_12131) n_12104) ((f_12131) n_12104)), 
(eq_4‹L› B_12050 ((f_12131) n_12104) ((f_12131) n_12104)))
Logical.assert_equal(∀ (A_12246 : U) ->
                       ∀ (B_12247 : L) ->
                         ∀ (m_12248 : A_12246) ->
                           ∀ (n_12249 : A_12246) ->
                             ∀ (f_12250 : A_12246 -> B_12247) ->
                               (eq_4‹U› A_12246 m_12248 n_12249) ->
                                 (eq_4‹L›
                                   B_12247 ((f_12250) m_12248)
                                   ((f_12250) n_12249)), ∀ (A_12253 : U) ->
                                                           ∀ (B_12254 :
                                                             L) ->
                                                             ∀ (m_12255 :
                                                               A_12253) ->
                                                               ∀ (n_12256 :
                                                                 A_12253) ->
                                                                 ∀ (f_12257 :
                                                                   A_12253 ->
                                                                    B_12254) ->
                                                                   (eq_4‹U›
                                                                    A_12253
                                                                    m_12255
                                                                    n_12256) ->
                                                                    (eq_4‹L›
                                                                    B_12254
                                                                    ((f_12257)
                                                                    m_12255)
                                                                    ((f_12257)
                                                                    n_12256)))
Logical.infer_tm(∀ (A_12267 : U) ->
                   ∀ (B_12268 : U) ->
                     ∀ (m_12269 : A_12267) ->
                       ∀ (n_12270 : A_12267) ->
                         ∀ (f_12271 : A_12267 -o B_12268) ->
                           (eq_4‹U› A_12267 m_12269 n_12270) ->
                             (eq_4‹U›
                               B_12268 ((f_12271) m_12269)
                               ((f_12271) n_12270)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (B_12275 : U) ->
                   ∀ (m_12276 : A_12274) ->
                     ∀ (n_12277 : A_12274) ->
                       ∀ (f_12278 : A_12274 -o B_12275) ->
                         (eq_4‹U› A_12274 m_12276 n_12277) ->
                           (eq_4‹U›
                             B_12275 ((f_12278) m_12276) ((f_12278) n_12277)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (m_12282 : A_12274) ->
                   ∀ (n_12283 : A_12274) ->
                     ∀ (f_12284 : A_12274 -o B_12281) ->
                       (eq_4‹U› A_12274 m_12282 n_12283) ->
                         (eq_4‹U›
                           B_12281 ((f_12284) m_12282) ((f_12284) n_12283)))
Logical.infer_tm(A_12274)
Logical.infer_tm(∀ (n_12288 : A_12274) ->
                   ∀ (f_12289 : A_12274 -o B_12281) ->
                     (eq_4‹U› A_12274 m_12287 n_12288) ->
                       (eq_4‹U›
                         B_12281 ((f_12289) m_12287) ((f_12289) n_12288)))
Logical.infer_tm(A_12274)
Logical.infer_tm(∀ (f_12293 : A_12274 -o B_12281) ->
                   (eq_4‹U› A_12274 m_12287 n_12292) ->
                     (eq_4‹U›
                       B_12281 ((f_12293) m_12287) ((f_12293) n_12292)))
Logical.infer_tm(A_12274 -o B_12281)
Logical.infer_tm(A_12274)
Logical.infer_tm(B_12281)
Logical.infer_tm((eq_4‹U› A_12274 m_12287 n_12292) ->
                   (eq_4‹U›
                     B_12281 ((f_12296) m_12287) ((f_12296) n_12292)))
Logical.infer_tm((eq_4‹U› A_12274 m_12287 n_12292))
Logical.check_tm( A_12274, U )
Logical.infer_tm(A_12274)
Logical.assert_equal(U, U)
Logical.check_tm( m_12287, A_12274 )
Logical.infer_tm(m_12287)
Logical.assert_equal(A_12274, A_12274)
Logical.check_tm( n_12292, A_12274 )
Logical.infer_tm(n_12292)
Logical.assert_equal(A_12274, A_12274)
Logical.infer_tm((eq_4‹U›
                   B_12281 ((f_12296) m_12287) ((f_12296) n_12292)))
Logical.check_tm( B_12281, U )
Logical.infer_tm(B_12281)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_12296) m_12287), B_12281 )
Logical.infer_tm(((f_12296) m_12287))
Logical.infer_tm(f_12296)
Logical.check_tm( m_12287, A_12274 )
Logical.infer_tm(m_12287)
Logical.assert_equal(A_12274, A_12274)
Logical.assert_equal(B_12281, B_12281)
Logical.check_tm( ((f_12296) n_12292), B_12281 )
Logical.infer_tm(((f_12296) n_12292))
Logical.infer_tm(f_12296)
Logical.check_tm( n_12292, A_12274 )
Logical.infer_tm(n_12292)
Logical.assert_equal(A_12274, A_12274)
Logical.assert_equal(B_12281, B_12281)
Logical.check_tm(
  function congr_12301 :
    ∀ (A_12302 : U) ->
      ∀ (B_12303 : U) ->
        ∀ (m_12304 : A_12302) ->
          ∀ (n_12305 : A_12302) ->
            ∀ (f_12306 : A_12302 -o B_12303) ->
              (eq_4‹U› A_12302 m_12304 n_12305) ->
                (eq_4‹U› B_12303 ((f_12306) m_12304) ((f_12306) n_12305))
  | A_12309 B_12310 m_12311 n_12312 f_12313 refl_6 => refl_6‹U›,
  ∀ (A_12314 : U) ->
    ∀ (B_12315 : U) ->
      ∀ (m_12316 : A_12314) ->
        ∀ (n_12317 : A_12314) ->
          ∀ (f_12318 : A_12314 -o B_12315) ->
            (eq_4‹U› A_12314 m_12316 n_12317) ->
              (eq_4‹U› B_12315 ((f_12318) m_12316) ((f_12318) n_12317))
)
Logical.infer_tm(function congr_12321 :
                   ∀ (A_12322 : U) ->
                     ∀ (B_12323 : U) ->
                       ∀ (m_12324 : A_12322) ->
                         ∀ (n_12325 : A_12322) ->
                           ∀ (f_12326 : A_12322 -o B_12323) ->
                             (eq_4‹U› A_12322 m_12324 n_12325) ->
                               (eq_4‹U›
                                 B_12323 ((f_12326) m_12324)
                                 ((f_12326) n_12325))
                 | A_12329 B_12330 m_12331 n_12332 f_12333 refl_6 =>
                   refl_6‹U›)
Logical.infer_tm(∀ (A_12335 : U) ->
                   ∀ (B_12336 : U) ->
                     ∀ (m_12337 : A_12335) ->
                       ∀ (n_12338 : A_12335) ->
                         ∀ (f_12339 : A_12335 -o B_12336) ->
                           (eq_4‹U› A_12335 m_12337 n_12338) ->
                             (eq_4‹U›
                               B_12336 ((f_12339) m_12337)
                               ((f_12339) n_12338)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (B_12343 : U) ->
                   ∀ (m_12344 : A_12342) ->
                     ∀ (n_12345 : A_12342) ->
                       ∀ (f_12346 : A_12342 -o B_12343) ->
                         (eq_4‹U› A_12342 m_12344 n_12345) ->
                           (eq_4‹U›
                             B_12343 ((f_12346) m_12344) ((f_12346) n_12345)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (m_12350 : A_12342) ->
                   ∀ (n_12351 : A_12342) ->
                     ∀ (f_12352 : A_12342 -o B_12349) ->
                       (eq_4‹U› A_12342 m_12350 n_12351) ->
                         (eq_4‹U›
                           B_12349 ((f_12352) m_12350) ((f_12352) n_12351)))
Logical.infer_tm(A_12342)
Logical.infer_tm(∀ (n_12356 : A_12342) ->
                   ∀ (f_12357 : A_12342 -o B_12349) ->
                     (eq_4‹U› A_12342 m_12355 n_12356) ->
                       (eq_4‹U›
                         B_12349 ((f_12357) m_12355) ((f_12357) n_12356)))
Logical.infer_tm(A_12342)
Logical.infer_tm(∀ (f_12361 : A_12342 -o B_12349) ->
                   (eq_4‹U› A_12342 m_12355 n_12360) ->
                     (eq_4‹U›
                       B_12349 ((f_12361) m_12355) ((f_12361) n_12360)))
Logical.infer_tm(A_12342 -o B_12349)
Logical.infer_tm(A_12342)
Logical.infer_tm(B_12349)
Logical.infer_tm((eq_4‹U› A_12342 m_12355 n_12360) ->
                   (eq_4‹U›
                     B_12349 ((f_12364) m_12355) ((f_12364) n_12360)))
Logical.infer_tm((eq_4‹U› A_12342 m_12355 n_12360))
Logical.check_tm( A_12342, U )
Logical.infer_tm(A_12342)
Logical.assert_equal(U, U)
Logical.check_tm( m_12355, A_12342 )
Logical.infer_tm(m_12355)
Logical.assert_equal(A_12342, A_12342)
Logical.check_tm( n_12360, A_12342 )
Logical.infer_tm(n_12360)
Logical.assert_equal(A_12342, A_12342)
Logical.infer_tm((eq_4‹U›
                   B_12349 ((f_12364) m_12355) ((f_12364) n_12360)))
Logical.check_tm( B_12349, U )
Logical.infer_tm(B_12349)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_12364) m_12355), B_12349 )
Logical.infer_tm(((f_12364) m_12355))
Logical.infer_tm(f_12364)
Logical.check_tm( m_12355, A_12342 )
Logical.infer_tm(m_12355)
Logical.assert_equal(A_12342, A_12342)
Logical.assert_equal(B_12349, B_12349)
Logical.check_tm( ((f_12364) n_12360), B_12349 )
Logical.infer_tm(((f_12364) n_12360))
Logical.infer_tm(f_12364)
Logical.check_tm( n_12360, A_12342 )
Logical.infer_tm(n_12360)
Logical.assert_equal(A_12342, A_12342)
Logical.assert_equal(B_12349, B_12349)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_12374)
Logical.infer_tm(A_12374)
Logical.infer_tm(A_12374 -o B_12401)
Logical.infer_tm(A_12374)
Logical.infer_tm(B_12401)
Logical.infer_tm((eq_4‹U› A_12374 m_12428 n_12455))
Logical.check_tm( A_12374, U )
Logical.infer_tm(A_12374)
Logical.assert_equal(U, U)
Logical.check_tm( m_12428, A_12374 )
Logical.infer_tm(m_12428)
Logical.assert_equal(A_12374, A_12374)
Logical.check_tm( n_12455, A_12374 )
Logical.infer_tm(n_12455)
Logical.assert_equal(A_12374, A_12374)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹U› #A_12374 #m_12428 #n_12455),
      (eq_4‹U› #A_12374 #m_12428 #m_12428));
    {| eq_pat?(R #A_12374, A_12369 : U)
       eq_pat?(R #B_12401, B_12370 : U)
       eq_pat?(R #m_12428, m_12371 : #A_12374)
       eq_pat?(R #n_12455, n_12372 : #A_12374)
       eq_pat?(R #f_12482, f_12373 : #A_12374 -o #B_12401) ::: [] =>?
         refl_6‹U›
    |}
  |}
|}
unify_local(
  eq_pat?(R #A_12374, A_12369 : U)
  eq_pat?(R #B_12401, B_12370 : U)
  eq_pat?(R #m_12428, m_12371 : #A_12374)
  eq_pat?(R #n_12455, n_12372 : #A_12374)
  eq_pat?(R #f_12482, f_12373 : #A_12374 -o #B_12401)
)
unify_global(
  eq_term?( (eq_4‹U› #A_12374 #m_12428 #n_12455),
    (eq_4‹U› #A_12374 #m_12428 #m_12428))
)
simpl_pprbm ~expand:false( #A_12374, #A_12369)
simpl_pprbm ~expand:false( #B_12401, #B_12370)
simpl_pprbm ~expand:false( #m_12428, #m_12371)
simpl_pprbm ~expand:false( #n_12455, #n_12372)
simpl_pprbm ~expand:false( #f_12482, #f_12373)
simpl_pprbm ~expand:false( (eq_4‹U› #A_12374 #m_12428 #n_12455),
  (eq_4‹U› #A_12374 #m_12428 #m_12428))
simpl_pprbm ~expand:false( #A_12374, #A_12374)
simpl_pprbm ~expand:false( #m_12428, #m_12428)
simpl_pprbm ~expand:false( #n_12455, #m_12428)
case_coverage_ok( refl_6‹U›,
  (eq_4‹U› B_12401 ((f_12482) n_12455) ((f_12482) n_12455)))
Logical.check_tm( refl_6‹U›,
  (eq_4‹U› B_12401 ((f_12482) n_12455) ((f_12482) n_12455))
)
Logical.infer_tm(refl_6‹U›)
Logical.check_tm( B_12401, U )
Logical.infer_tm(B_12401)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_12482) n_12455), B_12401 )
Logical.infer_tm(((f_12482) n_12455))
Logical.infer_tm(f_12482)
Logical.check_tm( n_12455, A_12374 )
Logical.infer_tm(n_12455)
Logical.assert_equal(A_12374, A_12374)
Logical.assert_equal(B_12401, B_12401)
Logical.assert_equal((eq_4‹U›
                       B_12401 ((f_12482) n_12455) ((f_12482) n_12455)), 
(eq_4‹U› B_12401 ((f_12482) n_12455) ((f_12482) n_12455)))
Logical.assert_equal(∀ (A_12597 : U) ->
                       ∀ (B_12598 : U) ->
                         ∀ (m_12599 : A_12597) ->
                           ∀ (n_12600 : A_12597) ->
                             ∀ (f_12601 : A_12597 -o B_12598) ->
                               (eq_4‹U› A_12597 m_12599 n_12600) ->
                                 (eq_4‹U›
                                   B_12598 ((f_12601) m_12599)
                                   ((f_12601) n_12600)), ∀ (A_12604 : U) ->
                                                           ∀ (B_12605 :
                                                             U) ->
                                                             ∀ (m_12606 :
                                                               A_12604) ->
                                                               ∀ (n_12607 :
                                                                 A_12604) ->
                                                                 ∀ (f_12608 :
                                                                   A_12604 -o
                                                                    B_12605) ->
                                                                   (eq_4‹U›
                                                                    A_12604
                                                                    m_12606
                                                                    n_12607) ->
                                                                    (eq_4‹U›
                                                                    B_12605
                                                                    ((f_12608)
                                                                    m_12606)
                                                                    ((f_12608)
                                                                    n_12607)))
Logical.infer_tm(∀ (A_12618 : U) ->
                   ∀ (B_12619 : U) ->
                     ∀ (m_12620 : A_12618) ->
                       ∀ (n_12621 : A_12618) ->
                         ∀ (f_12622 : A_12618 -> B_12619) ->
                           (eq_4‹U› A_12618 m_12620 n_12621) ->
                             (eq_4‹U›
                               B_12619 ((f_12622) m_12620)
                               ((f_12622) n_12621)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (B_12626 : U) ->
                   ∀ (m_12627 : A_12625) ->
                     ∀ (n_12628 : A_12625) ->
                       ∀ (f_12629 : A_12625 -> B_12626) ->
                         (eq_4‹U› A_12625 m_12627 n_12628) ->
                           (eq_4‹U›
                             B_12626 ((f_12629) m_12627) ((f_12629) n_12628)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (m_12633 : A_12625) ->
                   ∀ (n_12634 : A_12625) ->
                     ∀ (f_12635 : A_12625 -> B_12632) ->
                       (eq_4‹U› A_12625 m_12633 n_12634) ->
                         (eq_4‹U›
                           B_12632 ((f_12635) m_12633) ((f_12635) n_12634)))
Logical.infer_tm(A_12625)
Logical.infer_tm(∀ (n_12639 : A_12625) ->
                   ∀ (f_12640 : A_12625 -> B_12632) ->
                     (eq_4‹U› A_12625 m_12638 n_12639) ->
                       (eq_4‹U›
                         B_12632 ((f_12640) m_12638) ((f_12640) n_12639)))
Logical.infer_tm(A_12625)
Logical.infer_tm(∀ (f_12644 : A_12625 -> B_12632) ->
                   (eq_4‹U› A_12625 m_12638 n_12643) ->
                     (eq_4‹U›
                       B_12632 ((f_12644) m_12638) ((f_12644) n_12643)))
Logical.infer_tm(A_12625 -> B_12632)
Logical.infer_tm(A_12625)
Logical.infer_tm(B_12632)
Logical.infer_tm((eq_4‹U› A_12625 m_12638 n_12643) ->
                   (eq_4‹U›
                     B_12632 ((f_12647) m_12638) ((f_12647) n_12643)))
Logical.infer_tm((eq_4‹U› A_12625 m_12638 n_12643))
Logical.check_tm( A_12625, U )
Logical.infer_tm(A_12625)
Logical.assert_equal(U, U)
Logical.check_tm( m_12638, A_12625 )
Logical.infer_tm(m_12638)
Logical.assert_equal(A_12625, A_12625)
Logical.check_tm( n_12643, A_12625 )
Logical.infer_tm(n_12643)
Logical.assert_equal(A_12625, A_12625)
Logical.infer_tm((eq_4‹U›
                   B_12632 ((f_12647) m_12638) ((f_12647) n_12643)))
Logical.check_tm( B_12632, U )
Logical.infer_tm(B_12632)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_12647) m_12638), B_12632 )
Logical.infer_tm(((f_12647) m_12638))
Logical.infer_tm(f_12647)
Logical.check_tm( m_12638, A_12625 )
Logical.infer_tm(m_12638)
Logical.assert_equal(A_12625, A_12625)
Logical.assert_equal(B_12632, B_12632)
Logical.check_tm( ((f_12647) n_12643), B_12632 )
Logical.infer_tm(((f_12647) n_12643))
Logical.infer_tm(f_12647)
Logical.check_tm( n_12643, A_12625 )
Logical.infer_tm(n_12643)
Logical.assert_equal(A_12625, A_12625)
Logical.assert_equal(B_12632, B_12632)
Logical.check_tm(
  function congr_12652 :
    ∀ (A_12653 : U) ->
      ∀ (B_12654 : U) ->
        ∀ (m_12655 : A_12653) ->
          ∀ (n_12656 : A_12653) ->
            ∀ (f_12657 : A_12653 -> B_12654) ->
              (eq_4‹U› A_12653 m_12655 n_12656) ->
                (eq_4‹U› B_12654 ((f_12657) m_12655) ((f_12657) n_12656))
  | A_12660 B_12661 m_12662 n_12663 f_12664 refl_6 => refl_6‹U›,
  ∀ (A_12665 : U) ->
    ∀ (B_12666 : U) ->
      ∀ (m_12667 : A_12665) ->
        ∀ (n_12668 : A_12665) ->
          ∀ (f_12669 : A_12665 -> B_12666) ->
            (eq_4‹U› A_12665 m_12667 n_12668) ->
              (eq_4‹U› B_12666 ((f_12669) m_12667) ((f_12669) n_12668))
)
Logical.infer_tm(function congr_12672 :
                   ∀ (A_12673 : U) ->
                     ∀ (B_12674 : U) ->
                       ∀ (m_12675 : A_12673) ->
                         ∀ (n_12676 : A_12673) ->
                           ∀ (f_12677 : A_12673 -> B_12674) ->
                             (eq_4‹U› A_12673 m_12675 n_12676) ->
                               (eq_4‹U›
                                 B_12674 ((f_12677) m_12675)
                                 ((f_12677) n_12676))
                 | A_12680 B_12681 m_12682 n_12683 f_12684 refl_6 =>
                   refl_6‹U›)
Logical.infer_tm(∀ (A_12686 : U) ->
                   ∀ (B_12687 : U) ->
                     ∀ (m_12688 : A_12686) ->
                       ∀ (n_12689 : A_12686) ->
                         ∀ (f_12690 : A_12686 -> B_12687) ->
                           (eq_4‹U› A_12686 m_12688 n_12689) ->
                             (eq_4‹U›
                               B_12687 ((f_12690) m_12688)
                               ((f_12690) n_12689)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (B_12694 : U) ->
                   ∀ (m_12695 : A_12693) ->
                     ∀ (n_12696 : A_12693) ->
                       ∀ (f_12697 : A_12693 -> B_12694) ->
                         (eq_4‹U› A_12693 m_12695 n_12696) ->
                           (eq_4‹U›
                             B_12694 ((f_12697) m_12695) ((f_12697) n_12696)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (m_12701 : A_12693) ->
                   ∀ (n_12702 : A_12693) ->
                     ∀ (f_12703 : A_12693 -> B_12700) ->
                       (eq_4‹U› A_12693 m_12701 n_12702) ->
                         (eq_4‹U›
                           B_12700 ((f_12703) m_12701) ((f_12703) n_12702)))
Logical.infer_tm(A_12693)
Logical.infer_tm(∀ (n_12707 : A_12693) ->
                   ∀ (f_12708 : A_12693 -> B_12700) ->
                     (eq_4‹U› A_12693 m_12706 n_12707) ->
                       (eq_4‹U›
                         B_12700 ((f_12708) m_12706) ((f_12708) n_12707)))
Logical.infer_tm(A_12693)
Logical.infer_tm(∀ (f_12712 : A_12693 -> B_12700) ->
                   (eq_4‹U› A_12693 m_12706 n_12711) ->
                     (eq_4‹U›
                       B_12700 ((f_12712) m_12706) ((f_12712) n_12711)))
Logical.infer_tm(A_12693 -> B_12700)
Logical.infer_tm(A_12693)
Logical.infer_tm(B_12700)
Logical.infer_tm((eq_4‹U› A_12693 m_12706 n_12711) ->
                   (eq_4‹U›
                     B_12700 ((f_12715) m_12706) ((f_12715) n_12711)))
Logical.infer_tm((eq_4‹U› A_12693 m_12706 n_12711))
Logical.check_tm( A_12693, U )
Logical.infer_tm(A_12693)
Logical.assert_equal(U, U)
Logical.check_tm( m_12706, A_12693 )
Logical.infer_tm(m_12706)
Logical.assert_equal(A_12693, A_12693)
Logical.check_tm( n_12711, A_12693 )
Logical.infer_tm(n_12711)
Logical.assert_equal(A_12693, A_12693)
Logical.infer_tm((eq_4‹U›
                   B_12700 ((f_12715) m_12706) ((f_12715) n_12711)))
Logical.check_tm( B_12700, U )
Logical.infer_tm(B_12700)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_12715) m_12706), B_12700 )
Logical.infer_tm(((f_12715) m_12706))
Logical.infer_tm(f_12715)
Logical.check_tm( m_12706, A_12693 )
Logical.infer_tm(m_12706)
Logical.assert_equal(A_12693, A_12693)
Logical.assert_equal(B_12700, B_12700)
Logical.check_tm( ((f_12715) n_12711), B_12700 )
Logical.infer_tm(((f_12715) n_12711))
Logical.infer_tm(f_12715)
Logical.check_tm( n_12711, A_12693 )
Logical.infer_tm(n_12711)
Logical.assert_equal(A_12693, A_12693)
Logical.assert_equal(B_12700, B_12700)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_12725)
Logical.infer_tm(A_12725)
Logical.infer_tm(A_12725 -> B_12752)
Logical.infer_tm(A_12725)
Logical.infer_tm(B_12752)
Logical.infer_tm((eq_4‹U› A_12725 m_12779 n_12806))
Logical.check_tm( A_12725, U )
Logical.infer_tm(A_12725)
Logical.assert_equal(U, U)
Logical.check_tm( m_12779, A_12725 )
Logical.infer_tm(m_12779)
Logical.assert_equal(A_12725, A_12725)
Logical.check_tm( n_12806, A_12725 )
Logical.infer_tm(n_12806)
Logical.assert_equal(A_12725, A_12725)
case_coverage{|
  prblm {|
    eq_term?( (eq_4‹U› #A_12725 #m_12779 #n_12806),
      (eq_4‹U› #A_12725 #m_12779 #m_12779));
    {| eq_pat?(R #A_12725, A_12720 : U)
       eq_pat?(R #B_12752, B_12721 : U)
       eq_pat?(R #m_12779, m_12722 : #A_12725)
       eq_pat?(R #n_12806, n_12723 : #A_12725)
       eq_pat?(R #f_12833, f_12724 : #A_12725 -> #B_12752) ::: [] =>?
         refl_6‹U›
    |}
  |}
|}
unify_local(
  eq_pat?(R #A_12725, A_12720 : U)
  eq_pat?(R #B_12752, B_12721 : U)
  eq_pat?(R #m_12779, m_12722 : #A_12725)
  eq_pat?(R #n_12806, n_12723 : #A_12725)
  eq_pat?(R #f_12833, f_12724 : #A_12725 -> #B_12752)
)
unify_global(
  eq_term?( (eq_4‹U› #A_12725 #m_12779 #n_12806),
    (eq_4‹U› #A_12725 #m_12779 #m_12779))
)
simpl_pprbm ~expand:false( #A_12725, #A_12720)
simpl_pprbm ~expand:false( #B_12752, #B_12721)
simpl_pprbm ~expand:false( #m_12779, #m_12722)
simpl_pprbm ~expand:false( #n_12806, #n_12723)
simpl_pprbm ~expand:false( #f_12833, #f_12724)
simpl_pprbm ~expand:false( (eq_4‹U› #A_12725 #m_12779 #n_12806),
  (eq_4‹U› #A_12725 #m_12779 #m_12779))
simpl_pprbm ~expand:false( #A_12725, #A_12725)
simpl_pprbm ~expand:false( #m_12779, #m_12779)
simpl_pprbm ~expand:false( #n_12806, #m_12779)
case_coverage_ok( refl_6‹U›,
  (eq_4‹U› B_12752 ((f_12833) n_12806) ((f_12833) n_12806)))
Logical.check_tm( refl_6‹U›,
  (eq_4‹U› B_12752 ((f_12833) n_12806) ((f_12833) n_12806))
)
Logical.infer_tm(refl_6‹U›)
Logical.check_tm( B_12752, U )
Logical.infer_tm(B_12752)
Logical.assert_equal(U, U)
Logical.check_tm( ((f_12833) n_12806), B_12752 )
Logical.infer_tm(((f_12833) n_12806))
Logical.infer_tm(f_12833)
Logical.check_tm( n_12806, A_12725 )
Logical.infer_tm(n_12806)
Logical.assert_equal(A_12725, A_12725)
Logical.assert_equal(B_12752, B_12752)
Logical.assert_equal((eq_4‹U›
                       B_12752 ((f_12833) n_12806) ((f_12833) n_12806)), 
(eq_4‹U› B_12752 ((f_12833) n_12806) ((f_12833) n_12806)))
Logical.assert_equal(∀ (A_12948 : U) ->
                       ∀ (B_12949 : U) ->
                         ∀ (m_12950 : A_12948) ->
                           ∀ (n_12951 : A_12948) ->
                             ∀ (f_12952 : A_12948 -> B_12949) ->
                               (eq_4‹U› A_12948 m_12950 n_12951) ->
                                 (eq_4‹U›
                                   B_12949 ((f_12952) m_12950)
                                   ((f_12952) n_12951)), ∀ (A_12955 : U) ->
                                                           ∀ (B_12956 :
                                                             U) ->
                                                             ∀ (m_12957 :
                                                               A_12955) ->
                                                               ∀ (n_12958 :
                                                                 A_12955) ->
                                                                 ∀ (f_12959 :
                                                                   A_12955 ->
                                                                    B_12956) ->
                                                                   (eq_4‹U›
                                                                    A_12955
                                                                    m_12957
                                                                    n_12958) ->
                                                                    (eq_4‹U›
                                                                    B_12956
                                                                    ((f_12959)
                                                                    m_12957)
                                                                    ((f_12959)
                                                                    n_12958)))
Logical.infer_tm(∀ {A_12969 : U} ->
                   ∀ {n_12970 : nat_3} ->
                     (vec_8‹U› A_12969 (succ_5‹› n_12970)) -> A_12969)
Logical.infer_tm(U)
Logical.infer_tm(∀ {n_12973 : nat_3} ->
                   (vec_8‹U› A_12972 (succ_5‹› n_12973)) -> A_12972)
Logical.infer_tm(nat_3)
Logical.infer_tm((vec_8‹U› A_12972 (succ_5‹› n_12975)) -> A_12972)
Logical.infer_tm((vec_8‹U› A_12972 (succ_5‹› n_12975)))
Logical.check_tm( A_12972, U )
Logical.infer_tm(A_12972)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_12975), nat_3 )
Logical.infer_tm((succ_5‹› n_12975))
Logical.check_tm( n_12975, nat_3 )
Logical.infer_tm(n_12975)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm(A_12972)
Program.check_tm(
  function hd_vec_12978 :
    ∀ {A_12979 : U} ->
      ∀ {n_12980 : nat_3} ->
        (vec_8‹U› A_12979 (succ_5‹› n_12980)) -> A_12979
  | A_12982 n_12983 vnil_11 =>
  | A_12984 n_12985 (vcons_12 _12986 hd_12987 _12988) => hd_12987,
  ∀ {A_12989 : U} ->
    ∀ {n_12990 : nat_3} ->
      (vec_8‹U› A_12989 (succ_5‹› n_12990)) -> A_12989
)
Program.infer_tm(function hd_vec_12992 :
                   ∀ {A_12993 : U} ->
                     ∀ {n_12994 : nat_3} ->
                       (vec_8‹U› A_12993 (succ_5‹› n_12994)) ->
                         A_12993
                 | A_12996 n_12997 vnil_11 =>
                 | A_12998 n_12999 (vcons_12 _13000 hd_13001 _13002) =>
                   hd_13001)
Logical.infer_tm(∀ {A_13004 : U} ->
                   ∀ {n_13005 : nat_3} ->
                     (vec_8‹U› A_13004 (succ_5‹› n_13005)) -> A_13004)
Logical.infer_tm(U)
Logical.infer_tm(∀ {n_13008 : nat_3} ->
                   (vec_8‹U› A_13007 (succ_5‹› n_13008)) -> A_13007)
Logical.infer_tm(nat_3)
Logical.infer_tm((vec_8‹U› A_13007 (succ_5‹› n_13010)) -> A_13007)
Logical.infer_tm((vec_8‹U› A_13007 (succ_5‹› n_13010)))
Logical.check_tm( A_13007, U )
Logical.infer_tm(A_13007)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_13010), nat_3 )
Logical.infer_tm((succ_5‹› n_13010))
Logical.check_tm( n_13010, nat_3 )
Logical.infer_tm(n_13010)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm(A_13007)
trans12.Program.case_intro(U)
Logical.infer_tm(U)
trans12.Program.case_intro(nat_3)
Logical.infer_tm(nat_3)
trans12.Program.case_intro((vec_8‹U› #A_13020 (succ_5‹› #n_13027)))
Logical.infer_tm((vec_8‹U› A_13020 (succ_5‹› n_13027)))
Logical.check_tm( A_13020, U )
Logical.infer_tm(A_13020)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_13027), nat_3 )
Logical.infer_tm((succ_5‹› n_13027))
Logical.check_tm( n_13027, nat_3 )
Logical.infer_tm(n_13027)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm((vec_8‹U› A_13020 (succ_5‹› n_13027)))
Logical.check_tm( A_13020, U )
Logical.infer_tm(A_13020)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_13027), nat_3 )
Logical.infer_tm((succ_5‹› n_13027))
Logical.check_tm( n_13027, nat_3 )
Logical.infer_tm(n_13027)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
trans12.Program.case_split(vecU_20, vnilU_27)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› #A_13020 (succ_5‹› #n_13027)),
      (vec_8‹U› #A_13020 zero_4));
    (eq_pat?(N #A_13020, A_13013 : U)
     eq_pat?(N #n_13027, n_13014 : nat_3)) ::: [] =>? !!
  |}
|}
unify_local(  )
unify_global(
  eq_term?( (vec_8‹U› #A_13020 (succ_5‹› #n_13027)),
    (vec_8‹U› #A_13020 zero_4))
)
simpl_pprbm ~expand:false( (vec_8‹U› #A_13020 (succ_5‹› #n_13027)),
  (vec_8‹U› #A_13020 zero_4))
simpl_pprbm ~expand:false( #A_13020, #A_13020)
simpl_pprbm ~expand:false( (succ_5‹› #n_13027), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› #n_13027), zero_4)
trans12.Program.case_split(vecU_20, vconsU_28)
Logical.infer_tm(nat_3)
Logical.infer_tm(A_13020)
Logical.infer_tm((vec_8‹U› A_13020 n_13053))
Logical.check_tm( A_13020, U )
Logical.infer_tm(A_13020)
Logical.assert_equal(U, U)
Logical.check_tm( n_13053, nat_3 )
Logical.infer_tm(n_13053)
Logical.assert_equal(nat_3, nat_3)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› #A_13020 (succ_5‹› #n_13027)),
      (vec_8‹U› #A_13020 (succ_5‹› #n_13053)));
    {| eq_pat?(N #A_13020, A_13015 : U)
       eq_pat?(N #n_13027, n_13016 : nat_3)
       eq_pat?(N #n_13053, _13017 : nat_3)
       eq_pat?(R #hd_13054, hd_13018 : #A_13020)
       eq_pat?(R #tl_13055, _13019 : (vec_8‹U› #A_13020 #n_13053)) ::: [] =>?
         #hd_13018
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_13020, A_13015 : U)
  eq_pat?(N #n_13027, n_13016 : nat_3)
  eq_pat?(N #n_13053, _13017 : nat_3)
  eq_pat?(R #hd_13054, hd_13018 : #A_13020)
  eq_pat?(R #tl_13055, _13019 : (vec_8‹U› #A_13020 #n_13053))
)
unify_global(
  eq_term?( (vec_8‹U› #A_13020 (succ_5‹› #n_13027)),
    (vec_8‹U› #A_13020 (succ_5‹› #n_13053)))
)
simpl_pprbm ~expand:false( #A_13020, #A_13015)
simpl_pprbm ~expand:false( #n_13027, #n_13016)
simpl_pprbm ~expand:false( #n_13053, #_13017)
simpl_pprbm ~expand:false( #hd_13054, #hd_13018)
simpl_pprbm ~expand:false( #tl_13055, #_13019)
simpl_pprbm ~expand:false( (vec_8‹U› #A_13020 (succ_5‹› #n_13027)),
  (vec_8‹U› #A_13020 (succ_5‹› #n_13053)))
simpl_pprbm ~expand:false( #A_13020, #A_13020)
simpl_pprbm ~expand:false( (succ_5‹› #n_13027), (succ_5‹› #n_13053))
simpl_pprbm ~expand:false( #n_13027, #n_13053)
case_coverage_ok( hd_13054, A_13020)
Program.check_tm( hd_13054, A_13020 )
Program.infer_tm(hd_13054)
Logical.assert_equal(A_13020, A_13020)
trans12.Program.case_introed((vec_8‹U› #A_13020 (succ_5‹› #n_13027)))
trans12.Program.case_introed(nat_3)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_13086 : U} ->
                       ∀ {n_13087 : nat_3} ->
                         (vec_8‹U› A_13086 (succ_5‹› n_13087)) ->
                           A_13086, ∀ {A_13089 : U} ->
                                      ∀ {n_13090 : nat_3} ->
                                        (vec_8‹U›
                                          A_13089 (succ_5‹› n_13090)) ->
                                          A_13089)
Logical.infer_tm(∀ {A_13095 : U} ->
                   ∀ {n_13096 : nat_3} ->
                     (vec_8‹U› A_13095 (succ_5‹› n_13096)) -> A_13095)
Logical.infer_tm(U)
Logical.infer_tm(∀ {n_13099 : nat_3} ->
                   (vec_8‹U› A_13098 (succ_5‹› n_13099)) -> A_13098)
Logical.infer_tm(nat_3)
Logical.infer_tm((vec_8‹U› A_13098 (succ_5‹› n_13101)) -> A_13098)
Logical.infer_tm((vec_8‹U› A_13098 (succ_5‹› n_13101)))
Logical.check_tm( A_13098, U )
Logical.infer_tm(A_13098)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_13101), nat_3 )
Logical.infer_tm((succ_5‹› n_13101))
Logical.check_tm( n_13101, nat_3 )
Logical.infer_tm(n_13101)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm(A_13098)
Program.check_tm(
  function hd_vec2_13104 :
    ∀ {A_13105 : U} ->
      ∀ {n_13106 : nat_3} ->
        (vec_8‹U› A_13105 (succ_5‹› n_13106)) -> A_13105
  | A_13108 n_13109 xs_13110 =>
    match n_13109, xs_13110 in
      ∀ {n0_13111 : nat_3} -o
        (vec_8‹U› A_13108 (succ_5‹› n0_13111)) -o A_13108
    with
    | _13113, vnil_11 =>
    | _13114, (vcons_12 _13115 hd_13116 _13117) => hd_13116,
  ∀ {A_13118 : U} ->
    ∀ {n_13119 : nat_3} ->
      (vec_8‹U› A_13118 (succ_5‹› n_13119)) -> A_13118
)
Program.infer_tm(function hd_vec2_13121 :
                   ∀ {A_13122 : U} ->
                     ∀ {n_13123 : nat_3} ->
                       (vec_8‹U› A_13122 (succ_5‹› n_13123)) ->
                         A_13122
                 | A_13125 n_13126 xs_13127 =>
                   match n_13126, xs_13127 in
                     ∀ {n0_13128 : nat_3} -o
                       (vec_8‹U› A_13125 (succ_5‹› n0_13128)) -o
                         A_13125
                   with
                   | _13130, vnil_11 =>
                   | _13131, (vcons_12 _13132 hd_13133 _13134) => hd_13133)
Logical.infer_tm(∀ {A_13136 : U} ->
                   ∀ {n_13137 : nat_3} ->
                     (vec_8‹U› A_13136 (succ_5‹› n_13137)) -> A_13136)
Logical.infer_tm(U)
Logical.infer_tm(∀ {n_13140 : nat_3} ->
                   (vec_8‹U› A_13139 (succ_5‹› n_13140)) -> A_13139)
Logical.infer_tm(nat_3)
Logical.infer_tm((vec_8‹U› A_13139 (succ_5‹› n_13142)) -> A_13139)
Logical.infer_tm((vec_8‹U› A_13139 (succ_5‹› n_13142)))
Logical.check_tm( A_13139, U )
Logical.infer_tm(A_13139)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_13142), nat_3 )
Logical.infer_tm((succ_5‹› n_13142))
Logical.check_tm( n_13142, nat_3 )
Logical.infer_tm(n_13142)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm(A_13139)
trans12.Program.case_intro(U)
Logical.infer_tm(U)
trans12.Program.case_intro(nat_3)
Logical.infer_tm(nat_3)
trans12.Program.case_intro((vec_8‹U› #A_13148 (succ_5‹› #n_13155)))
Logical.infer_tm((vec_8‹U› A_13148 (succ_5‹› n_13155)))
Logical.check_tm( A_13148, U )
Logical.infer_tm(A_13148)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_13155), nat_3 )
Logical.infer_tm((succ_5‹› n_13155))
Logical.check_tm( n_13155, nat_3 )
Logical.infer_tm(n_13155)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?(N #A_13148, A_13145 : U)
       eq_pat?(N #n_13155, n_13146 : nat_3)
       eq_pat?(R #xs_13162, xs_13147 :
         (vec_8‹U› #A_13148 (succ_5‹› #n_13155))) ::: [] =>?
         match #n_13146, #xs_13147 in
           ∀ {n0_13169 : nat_3} -o
             (vec_8‹U› #A_13145 (succ_5‹› n0_13169)) -o #A_13145
         with
         | _13171, vnil_11 =>
         | _13172, (vcons_12 _13173 hd_13174 _13175) => hd_13174
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_13148, A_13145 : U)
  eq_pat?(N #n_13155, n_13146 : nat_3)
  eq_pat?(R #xs_13162, xs_13147 :
    (vec_8‹U› #A_13148 (succ_5‹› #n_13155)))
)
unify_global(  )
simpl_pprbm ~expand:false( #A_13148, #A_13145)
simpl_pprbm ~expand:false( #n_13155, #n_13146)
simpl_pprbm ~expand:false( #xs_13162, #xs_13147)
case_coverage_ok(
  match n_13155, xs_13162 in
    ∀ {n0_13190 : nat_3} -o
      (vec_8‹U› A_13148 (succ_5‹› n0_13190)) -o A_13148
  with
  | _13192, vnil_11 =>
  | _13193, (vcons_12 _13194 hd_13195 _13196) => hd_13195, A_13148)
Program.check_tm(
  match n_13155, xs_13162 in
    ∀ {n0_13197 : nat_3} -o
      (vec_8‹U› A_13148 (succ_5‹› n0_13197)) -o A_13148
  with
  | _13199, vnil_11 =>
  | _13200, (vcons_12 _13201 hd_13202 _13203) => hd_13202, A_13148
)
Program.infer_tm(match n_13155, xs_13162 in
                   ∀ {n0_13204 : nat_3} -o
                     (vec_8‹U› A_13148 (succ_5‹› n0_13204)) -o
                       A_13148
                 with
                 | _13206, vnil_11 =>
                 | _13207, (vcons_12 _13208 hd_13209 _13210) => hd_13209)
Program.infer_motive_N(n_13155, nat_3)
Logical.check_tm( n_13155, nat_3 )
Logical.infer_tm(n_13155)
Logical.assert_equal(nat_3, nat_3)
Program.infer_motive_R(xs_13162, (vec_8‹U›
                                   A_13148 (succ_5‹› n_13155)))
Program.check_tm( xs_13162, (vec_8‹U› A_13148 (succ_5‹› n_13155)) )
Program.infer_tm(xs_13162)
Logical.assert_equal((vec_8‹U› A_13148 (succ_5‹› n_13155)), (vec_8‹U›
                                                                    A_13148
                                                                    (succ_5‹›
                                                                    n_13155)))
Program.infer_motive_ok
trans12.Program.case_intro(nat_3)
Logical.infer_tm(nat_3)
trans12.Program.case_intro((vec_8‹U› A_13148 (succ_5‹› #n0_13216)))
Logical.infer_tm((vec_8‹U› A_13148 (succ_5‹› n0_13216)))
Logical.check_tm( A_13148, U )
Logical.infer_tm(A_13148)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n0_13216), nat_3 )
Logical.infer_tm((succ_5‹› n0_13216))
Logical.check_tm( n0_13216, nat_3 )
Logical.infer_tm(n0_13216)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm((vec_8‹U› A_13148 (succ_5‹› n0_13216)))
Logical.check_tm( A_13148, U )
Logical.infer_tm(A_13148)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n0_13216), nat_3 )
Logical.infer_tm((succ_5‹› n0_13216))
Logical.check_tm( n0_13216, nat_3 )
Logical.infer_tm(n0_13216)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
trans12.Program.case_split(vecU_20, vnilU_27)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› A_13148 (succ_5‹› #n0_13216)),
      (vec_8‹U› A_13148 zero_4));
    (eq_pat?(N #n0_13216, _13211 : nat_3)) ::: [] =>? !!
  |}
|}
unify_local(  )
unify_global(
  eq_term?( (vec_8‹U› A_13148 (succ_5‹› #n0_13216)),
    (vec_8‹U› A_13148 zero_4))
)
simpl_pprbm ~expand:false( (vec_8‹U› A_13148 (succ_5‹› #n0_13216)),
  (vec_8‹U› A_13148 zero_4))
simpl_pprbm ~expand:false( A_13148, A_13148)
simpl_pprbm ~expand:false( (succ_5‹› #n0_13216), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› #n0_13216), zero_4)
trans12.Program.case_split(vecU_20, vconsU_28)
Logical.infer_tm(nat_3)
Logical.infer_tm(A_13148)
Logical.infer_tm((vec_8‹U› A_13148 n_13242))
Logical.check_tm( A_13148, U )
Logical.infer_tm(A_13148)
Logical.assert_equal(U, U)
Logical.check_tm( n_13242, nat_3 )
Logical.infer_tm(n_13242)
Logical.assert_equal(nat_3, nat_3)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› A_13148 (succ_5‹› #n0_13216)),
      (vec_8‹U› A_13148 (succ_5‹› #n_13242)));
    {| eq_pat?(N #n0_13216, _13212 : nat_3)
       eq_pat?(N #n_13242, _13213 : nat_3)
       eq_pat?(R #hd_13243, hd_13214 : A_13148)
       eq_pat?(R #tl_13244, _13215 : (vec_8‹U› A_13148 #n_13242)) ::: [] =>?
         #hd_13214
    |}
  |}
|}
unify_local(
  eq_pat?(N #n0_13216, _13212 : nat_3)
  eq_pat?(N #n_13242, _13213 : nat_3)
  eq_pat?(R #hd_13243, hd_13214 : A_13148)
  eq_pat?(R #tl_13244, _13215 : (vec_8‹U› A_13148 #n_13242))
)
unify_global(
  eq_term?( (vec_8‹U› A_13148 (succ_5‹› #n0_13216)),
    (vec_8‹U› A_13148 (succ_5‹› #n_13242)))
)
simpl_pprbm ~expand:false( #n0_13216, #_13212)
simpl_pprbm ~expand:false( #n_13242, #_13213)
simpl_pprbm ~expand:false( #hd_13243, #hd_13214)
simpl_pprbm ~expand:false( #tl_13244, #_13215)
simpl_pprbm ~expand:false( (vec_8‹U› A_13148 (succ_5‹› #n0_13216)),
  (vec_8‹U› A_13148 (succ_5‹› #n_13242)))
simpl_pprbm ~expand:false( A_13148, A_13148)
simpl_pprbm ~expand:false( (succ_5‹› #n0_13216), (succ_5‹› #n_13242))
simpl_pprbm ~expand:false( #n0_13216, #n_13242)
case_coverage_ok( hd_13243, A_13148)
Program.check_tm( hd_13243, A_13148 )
Program.infer_tm(hd_13243)
Logical.assert_equal(A_13148, A_13148)
trans12.Program.case_introed((vec_8‹U› A_13148 (succ_5‹› #n0_13216)))
trans12.Program.case_introed(nat_3)
Logical.assert_equal(A_13148, A_13148)
trans12.Program.case_introed((vec_8‹U› #A_13148 (succ_5‹› #n_13155)))
trans12.Program.case_introed(nat_3)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_13275 : U} ->
                       ∀ {n_13276 : nat_3} ->
                         (vec_8‹U› A_13275 (succ_5‹› n_13276)) ->
                           A_13275, ∀ {A_13278 : U} ->
                                      ∀ {n_13279 : nat_3} ->
                                        (vec_8‹U›
                                          A_13278 (succ_5‹› n_13279)) ->
                                          A_13278)
Logical.infer_tm(∀ {A_13284 : U} ->
                   ∀ {n_13285 : nat_3} ->
                     (vec_8‹U› A_13284 (succ_5‹› n_13285)) -> A_13284)
Logical.infer_tm(U)
Logical.infer_tm(∀ {n_13288 : nat_3} ->
                   (vec_8‹U› A_13287 (succ_5‹› n_13288)) -> A_13287)
Logical.infer_tm(nat_3)
Logical.infer_tm((vec_8‹U› A_13287 (succ_5‹› n_13290)) -> A_13287)
Logical.infer_tm((vec_8‹U› A_13287 (succ_5‹› n_13290)))
Logical.check_tm( A_13287, U )
Logical.infer_tm(A_13287)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_13290), nat_3 )
Logical.infer_tm((succ_5‹› n_13290))
Logical.check_tm( n_13290, nat_3 )
Logical.infer_tm(n_13290)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm(A_13287)
Program.check_tm(
  function hd_vec3_13293 :
    ∀ {A_13294 : U} ->
      ∀ {n_13295 : nat_3} ->
        (vec_8‹U› A_13294 (succ_5‹› n_13295)) -> A_13294
  | A_13297 n_13298 xs_13299 =>
    match xs_13299 in
      (vec_8‹U› A_13297 (succ_5‹› n_13298)) -o A_13297
    with
    | vnil_11 =>
    | (vcons_12 _13301 hd_13302 _13303) => hd_13302,
  ∀ {A_13304 : U} ->
    ∀ {n_13305 : nat_3} ->
      (vec_8‹U› A_13304 (succ_5‹› n_13305)) -> A_13304
)
Program.infer_tm(function hd_vec3_13307 :
                   ∀ {A_13308 : U} ->
                     ∀ {n_13309 : nat_3} ->
                       (vec_8‹U› A_13308 (succ_5‹› n_13309)) ->
                         A_13308
                 | A_13311 n_13312 xs_13313 =>
                   match xs_13313 in
                     (vec_8‹U› A_13311 (succ_5‹› n_13312)) -o A_13311
                   with
                   | vnil_11 =>
                   | (vcons_12 _13315 hd_13316 _13317) => hd_13316)
Logical.infer_tm(∀ {A_13319 : U} ->
                   ∀ {n_13320 : nat_3} ->
                     (vec_8‹U› A_13319 (succ_5‹› n_13320)) -> A_13319)
Logical.infer_tm(U)
Logical.infer_tm(∀ {n_13323 : nat_3} ->
                   (vec_8‹U› A_13322 (succ_5‹› n_13323)) -> A_13322)
Logical.infer_tm(nat_3)
Logical.infer_tm((vec_8‹U› A_13322 (succ_5‹› n_13325)) -> A_13322)
Logical.infer_tm((vec_8‹U› A_13322 (succ_5‹› n_13325)))
Logical.check_tm( A_13322, U )
Logical.infer_tm(A_13322)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_13325), nat_3 )
Logical.infer_tm((succ_5‹› n_13325))
Logical.check_tm( n_13325, nat_3 )
Logical.infer_tm(n_13325)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm(A_13322)
trans12.Program.case_intro(U)
Logical.infer_tm(U)
trans12.Program.case_intro(nat_3)
Logical.infer_tm(nat_3)
trans12.Program.case_intro((vec_8‹U› #A_13331 (succ_5‹› #n_13338)))
Logical.infer_tm((vec_8‹U› A_13331 (succ_5‹› n_13338)))
Logical.check_tm( A_13331, U )
Logical.infer_tm(A_13331)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_13338), nat_3 )
Logical.infer_tm((succ_5‹› n_13338))
Logical.check_tm( n_13338, nat_3 )
Logical.infer_tm(n_13338)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?(N #A_13331, A_13328 : U)
       eq_pat?(N #n_13338, n_13329 : nat_3)
       eq_pat?(R #xs_13345, xs_13330 :
         (vec_8‹U› #A_13331 (succ_5‹› #n_13338))) ::: [] =>?
         match #xs_13330 in
           (vec_8‹U› #A_13328 (succ_5‹› #n_13329)) -o #A_13328
         with
         | vnil_11 =>
         | (vcons_12 _13353 hd_13354 _13355) => hd_13354
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_13331, A_13328 : U)
  eq_pat?(N #n_13338, n_13329 : nat_3)
  eq_pat?(R #xs_13345, xs_13330 :
    (vec_8‹U› #A_13331 (succ_5‹› #n_13338)))
)
unify_global(  )
simpl_pprbm ~expand:false( #A_13331, #A_13328)
simpl_pprbm ~expand:false( #n_13338, #n_13329)
simpl_pprbm ~expand:false( #xs_13345, #xs_13330)
case_coverage_ok(
  match xs_13345 in (vec_8‹U› A_13331 (succ_5‹› n_13338)) -o A_13331
  with
  | vnil_11 =>
  | (vcons_12 _13367 hd_13368 _13369) => hd_13368, A_13331)
Program.check_tm(
  match xs_13345 in (vec_8‹U› A_13331 (succ_5‹› n_13338)) -o A_13331
  with
  | vnil_11 =>
  | (vcons_12 _13371 hd_13372 _13373) => hd_13372, A_13331
)
Program.infer_tm(match xs_13345 in
                   (vec_8‹U› A_13331 (succ_5‹› n_13338)) -o A_13331
                 with
                 | vnil_11 =>
                 | (vcons_12 _13375 hd_13376 _13377) => hd_13376)
Program.infer_motive_R(xs_13345, (vec_8‹U›
                                   A_13331 (succ_5‹› n_13338)))
Program.check_tm( xs_13345, (vec_8‹U› A_13331 (succ_5‹› n_13338)) )
Program.infer_tm(xs_13345)
Logical.assert_equal((vec_8‹U› A_13331 (succ_5‹› n_13338)), (vec_8‹U›
                                                                    A_13331
                                                                    (succ_5‹›
                                                                    n_13338)))
Program.infer_motive_ok
trans12.Program.case_intro((vec_8‹U› A_13331 (succ_5‹› n_13338)))
Logical.infer_tm((vec_8‹U› A_13331 (succ_5‹› n_13338)))
Logical.check_tm( A_13331, U )
Logical.infer_tm(A_13331)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_13338), nat_3 )
Logical.infer_tm((succ_5‹› n_13338))
Logical.check_tm( n_13338, nat_3 )
Logical.infer_tm(n_13338)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm((vec_8‹U› A_13331 (succ_5‹› n_13338)))
Logical.check_tm( A_13331, U )
Logical.infer_tm(A_13331)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› n_13338), nat_3 )
Logical.infer_tm((succ_5‹› n_13338))
Logical.check_tm( n_13338, nat_3 )
Logical.infer_tm(n_13338)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
trans12.Program.case_split(vecU_20, vnilU_27)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› A_13331 (succ_5‹› n_13338)),
      (vec_8‹U› A_13331 zero_4));
    () ::: [] =>? !!
  |}
|}
unify_local(  )
unify_global(
  eq_term?( (vec_8‹U› A_13331 (succ_5‹› n_13338)),
    (vec_8‹U› A_13331 zero_4))
)
simpl_pprbm ~expand:false( (vec_8‹U› A_13331 (succ_5‹› n_13338)),
  (vec_8‹U› A_13331 zero_4))
simpl_pprbm ~expand:false( A_13331, A_13331)
simpl_pprbm ~expand:false( (succ_5‹› n_13338), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› n_13338), zero_4)
trans12.Program.case_split(vecU_20, vconsU_28)
Logical.infer_tm(nat_3)
Logical.infer_tm(A_13331)
Logical.infer_tm((vec_8‹U› A_13331 n_13400))
Logical.check_tm( A_13331, U )
Logical.infer_tm(A_13331)
Logical.assert_equal(U, U)
Logical.check_tm( n_13400, nat_3 )
Logical.infer_tm(n_13400)
Logical.assert_equal(nat_3, nat_3)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› A_13331 (succ_5‹› n_13338)),
      (vec_8‹U› A_13331 (succ_5‹› #n_13400)));
    {| eq_pat?(N #n_13400, _13378 : nat_3)
       eq_pat?(R #hd_13401, hd_13379 : A_13331)
       eq_pat?(R #tl_13402, _13380 : (vec_8‹U› A_13331 #n_13400)) ::: [] =>?
         #hd_13379
    |}
  |}
|}
unify_local(
  eq_pat?(N #n_13400, _13378 : nat_3)
  eq_pat?(R #hd_13401, hd_13379 : A_13331)
  eq_pat?(R #tl_13402, _13380 : (vec_8‹U› A_13331 #n_13400))
)
unify_global(
  eq_term?( (vec_8‹U› A_13331 (succ_5‹› n_13338)),
    (vec_8‹U› A_13331 (succ_5‹› #n_13400)))
)
simpl_pprbm ~expand:false( #n_13400, #_13378)
simpl_pprbm ~expand:false( #hd_13401, #hd_13379)
simpl_pprbm ~expand:false( #tl_13402, #_13380)
simpl_pprbm ~expand:false( (vec_8‹U› A_13331 (succ_5‹› n_13338)),
  (vec_8‹U› A_13331 (succ_5‹› #n_13400)))
simpl_pprbm ~expand:false( A_13331, A_13331)
simpl_pprbm ~expand:false( (succ_5‹› n_13338), (succ_5‹› #n_13400))
simpl_pprbm ~expand:false( n_13338, #n_13400)
case_coverage_ok( hd_13401, A_13331)
Program.check_tm( hd_13401, A_13331 )
Program.infer_tm(hd_13401)
Logical.assert_equal(A_13331, A_13331)
trans12.Program.case_introed((vec_8‹U› A_13331 (succ_5‹› n_13338)))
Logical.assert_equal(A_13331, A_13331)
trans12.Program.case_introed((vec_8‹U› #A_13331 (succ_5‹› #n_13338)))
trans12.Program.case_introed(nat_3)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_13433 : U} ->
                       ∀ {n_13434 : nat_3} ->
                         (vec_8‹U› A_13433 (succ_5‹› n_13434)) ->
                           A_13433, ∀ {A_13436 : U} ->
                                      ∀ {n_13437 : nat_3} ->
                                        (vec_8‹U›
                                          A_13436 (succ_5‹› n_13437)) ->
                                          A_13436)
Logical.infer_tm(∀ {A_13442 : U} ->
                   ∀ {n_13443 : nat_3} ->
                     (vec_8‹U› A_13442 n_13443) ->
                       (exists_5‹U,U›
                         nat_3
                         function _13445 : nat_3 -> U
                         | x_13447 => (eq_4‹U› nat_3 x_13447 n_13443)))
Logical.infer_tm(U)
Logical.infer_tm(∀ {n_13449 : nat_3} ->
                   (vec_8‹U› A_13448 n_13449) ->
                     (exists_5‹U,U›
                       nat_3
                       function _13451 : nat_3 -> U
                       | x_13453 => (eq_4‹U› nat_3 x_13453 n_13449)))
Logical.infer_tm(nat_3)
Logical.infer_tm((vec_8‹U› A_13448 n_13454) ->
                   (exists_5‹U,U›
                     nat_3
                     function _13456 : nat_3 -> U
                     | x_13458 => (eq_4‹U› nat_3 x_13458 n_13454)))
Logical.infer_tm((vec_8‹U› A_13448 n_13454))
Logical.check_tm( A_13448, U )
Logical.infer_tm(A_13448)
Logical.assert_equal(U, U)
Logical.check_tm( n_13454, nat_3 )
Logical.infer_tm(n_13454)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm((exists_5‹U,U›
                   nat_3
                   function _13460 : nat_3 -> U
                   | x_13462 => (eq_4‹U› nat_3 x_13462 n_13454)))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm(
  function _13463 : nat_3 -> U
  | x_13465 => (eq_4‹U› nat_3 x_13465 n_13454), nat_3 -> U
)
Logical.infer_tm(function _13467 : nat_3 -> U
                 | x_13469 => (eq_4‹U› nat_3 x_13469 n_13454))
Logical.infer_tm(nat_3 -> U)
Logical.infer_tm(nat_3)
Logical.infer_tm(U)
Logical.infer_tm(nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #x_13474, x_13473 : nat_3) ::: [] =>?
         (eq_4‹U› nat_3 #x_13473 n_13454)
    |}
  |}
|}
unify_local( eq_pat?(R #x_13474, x_13473 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #x_13474, #x_13473)
case_coverage_ok( (eq_4‹U› nat_3 x_13474 n_13454), U)
Logical.check_tm( (eq_4‹U› nat_3 x_13474 n_13454), U )
Logical.infer_tm((eq_4‹U› nat_3 x_13474 n_13454))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( x_13474, nat_3 )
Logical.infer_tm(x_13474)
Logical.assert_equal(nat_3, nat_3)
Logical.check_tm( n_13454, nat_3 )
Logical.infer_tm(n_13454)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(U, U)
Logical.assert_equal(nat_3 -> U, nat_3 -> U)
Program.check_tm(
  function vlength_13480 :
    ∀ {A_13481 : U} ->
      ∀ {n_13482 : nat_3} ->
        (vec_8‹U› A_13481 n_13482) ->
          (exists_5‹U,U›
            nat_3
            function _13484 : nat_3 -> U
            | x_13486 => (eq_4‹U› nat_3 x_13486 n_13482))
  | A_13487 n_13488 vnil_11 => (ex_7‹U,U› zero_4 refl_6‹U›)
  | A_13489 n_13490 (vcons_12 _13491 _13492 tl_13493) =>
    match ((vlength_13480) A_13489 _13491 tl_13493) in
      (exists_5‹U,U›
        nat_3
        function _13495 : nat_3 -> U
        | x_13497 => (eq_4‹U› nat_3 x_13497 _13491)) -o
        (exists_5‹U,U›
          nat_3
          function _13498 : nat_3 -> U
          | x_13500 => (eq_4‹U› nat_3 x_13500 (succ_5‹› _13491)))
    with
    | (ex_7 n_13501 pf_13502) =>
      (ex_7‹U,U›
        (succ_5‹› n_13501)
        ((congr_3‹U,U,U›)
          nat_3 nat_3 n_13501 _13491
          function _13503 : nat_3 -> nat_3
          | x_13505 => (succ_5‹› x_13505) pf_13502)),
  ∀ {A_13506 : U} ->
    ∀ {n_13507 : nat_3} ->
      (vec_8‹U› A_13506 n_13507) ->
        (exists_5‹U,U›
          nat_3
          function _13509 : nat_3 -> U
          | x_13511 => (eq_4‹U› nat_3 x_13511 n_13507))
)
Program.infer_tm(function vlength_13512 :
                   ∀ {A_13513 : U} ->
                     ∀ {n_13514 : nat_3} ->
                       (vec_8‹U› A_13513 n_13514) ->
                         (exists_5‹U,U›
                           nat_3
                           function _13516 : nat_3 -> U
                           | x_13518 => (eq_4‹U› nat_3 x_13518 n_13514))
                 | A_13519 n_13520 vnil_11 =>
                   (ex_7‹U,U› zero_4 refl_6‹U›)
                 | A_13521 n_13522 (vcons_12 _13523 _13524 tl_13525) =>
                   match ((vlength_13512) A_13521 _13523 tl_13525) in
                     (exists_5‹U,U›
                       nat_3
                       function _13527 : nat_3 -> U
                       | x_13529 => (eq_4‹U› nat_3 x_13529 _13523)) -o
                       (exists_5‹U,U›
                         nat_3
                         function _13530 : nat_3 -> U
                         | x_13532 =>
                           (eq_4‹U› nat_3 x_13532 (succ_5‹› _13523)))
                   with
                   | (ex_7 n_13533 pf_13534) =>
                     (ex_7‹U,U›
                       (succ_5‹› n_13533)
                       ((congr_3‹U,U,U›)
                         nat_3 nat_3 n_13533 _13523
                         function _13535 : nat_3 -> nat_3
                         | x_13537 => (succ_5‹› x_13537) pf_13534)))
Logical.infer_tm(∀ {A_13539 : U} ->
                   ∀ {n_13540 : nat_3} ->
                     (vec_8‹U› A_13539 n_13540) ->
                       (exists_5‹U,U›
                         nat_3
                         function _13542 : nat_3 -> U
                         | x_13544 => (eq_4‹U› nat_3 x_13544 n_13540)))
Logical.infer_tm(U)
Logical.infer_tm(∀ {n_13546 : nat_3} ->
                   (vec_8‹U› A_13545 n_13546) ->
                     (exists_5‹U,U›
                       nat_3
                       function _13548 : nat_3 -> U
                       | x_13550 => (eq_4‹U› nat_3 x_13550 n_13546)))
Logical.infer_tm(nat_3)
Logical.infer_tm((vec_8‹U› A_13545 n_13551) ->
                   (exists_5‹U,U›
                     nat_3
                     function _13553 : nat_3 -> U
                     | x_13555 => (eq_4‹U› nat_3 x_13555 n_13551)))
Logical.infer_tm((vec_8‹U› A_13545 n_13551))
Logical.check_tm( A_13545, U )
Logical.infer_tm(A_13545)
Logical.assert_equal(U, U)
Logical.check_tm( n_13551, nat_3 )
Logical.infer_tm(n_13551)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm((exists_5‹U,U›
                   nat_3
                   function _13557 : nat_3 -> U
                   | x_13559 => (eq_4‹U› nat_3 x_13559 n_13551)))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm(
  function _13560 : nat_3 -> U
  | x_13562 => (eq_4‹U› nat_3 x_13562 n_13551), nat_3 -> U
)
Logical.infer_tm(function _13564 : nat_3 -> U
                 | x_13566 => (eq_4‹U› nat_3 x_13566 n_13551))
Logical.infer_tm(nat_3 -> U)
Logical.infer_tm(nat_3)
Logical.infer_tm(U)
Logical.infer_tm(nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #x_13571, x_13570 : nat_3) ::: [] =>?
         (eq_4‹U› nat_3 #x_13570 n_13551)
    |}
  |}
|}
unify_local( eq_pat?(R #x_13571, x_13570 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #x_13571, #x_13570)
case_coverage_ok( (eq_4‹U› nat_3 x_13571 n_13551), U)
Logical.check_tm( (eq_4‹U› nat_3 x_13571 n_13551), U )
Logical.infer_tm((eq_4‹U› nat_3 x_13571 n_13551))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( x_13571, nat_3 )
Logical.infer_tm(x_13571)
Logical.assert_equal(nat_3, nat_3)
Logical.check_tm( n_13551, nat_3 )
Logical.infer_tm(n_13551)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(U, U)
Logical.assert_equal(nat_3 -> U, nat_3 -> U)
trans12.Program.case_intro(U)
Logical.infer_tm(U)
trans12.Program.case_intro(nat_3)
Logical.infer_tm(nat_3)
trans12.Program.case_intro((vec_8‹U› #A_13584 #n_13600))
Logical.infer_tm((vec_8‹U› A_13584 n_13600))
Logical.check_tm( A_13584, U )
Logical.infer_tm(A_13584)
Logical.assert_equal(U, U)
Logical.check_tm( n_13600, nat_3 )
Logical.infer_tm(n_13600)
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm((vec_8‹U› A_13584 n_13600))
Logical.check_tm( A_13584, U )
Logical.infer_tm(A_13584)
Logical.assert_equal(U, U)
Logical.check_tm( n_13600, nat_3 )
Logical.infer_tm(n_13600)
Logical.assert_equal(nat_3, nat_3)
trans12.Program.case_split(vecU_20, vnilU_27)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› #A_13584 #n_13600),
      (vec_8‹U› #A_13584 zero_4));
    {| eq_pat?(N #A_13584, A_13577 : U)
       eq_pat?(N #n_13600, n_13578 : nat_3) ::: [] =>?
         (ex_7‹U,U› zero_4 refl_6‹U›)
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_13584, A_13577 : U)
  eq_pat?(N #n_13600, n_13578 : nat_3)
)
unify_global(
  eq_term?( (vec_8‹U› #A_13584 #n_13600), (vec_8‹U› #A_13584 zero_4))
)
simpl_pprbm ~expand:false( #A_13584, #A_13577)
simpl_pprbm ~expand:false( #n_13600, #n_13578)
simpl_pprbm ~expand:false( (vec_8‹U› #A_13584 #n_13600),
  (vec_8‹U› #A_13584 zero_4))
simpl_pprbm ~expand:false( #A_13584, #A_13584)
simpl_pprbm ~expand:false( #n_13600, zero_4)
case_coverage_ok( (ex_7‹U,U› zero_4 refl_6‹U›),
  (exists_5‹U,U›
    nat_3
    function _13686 : nat_3 -> U
    | x_13688 => (eq_4‹U› nat_3 x_13688 zero_4)))
Program.check_tm( (ex_7‹U,U› zero_4 refl_6‹U›),
  (exists_5‹U,U›
    nat_3
    function _13689 : nat_3 -> U
    | x_13691 => (eq_4‹U› nat_3 x_13691 zero_4))
)
Program.infer_tm((ex_7‹U,U› zero_4 refl_6‹U›))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm(
  function _13692 : nat_3 -> U
  | x_13694 => (eq_4‹U› nat_3 x_13694 zero_4), nat_3 -> U
)
Logical.infer_tm(function _13696 : nat_3 -> U
                 | x_13698 => (eq_4‹U› nat_3 x_13698 zero_4))
Logical.infer_tm(nat_3 -> U)
Logical.infer_tm(nat_3)
Logical.infer_tm(U)
Logical.infer_tm(nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #x_13703, x_13702 : nat_3) ::: [] =>?
         (eq_4‹U› nat_3 #x_13702 zero_4)
    |}
  |}
|}
unify_local( eq_pat?(R #x_13703, x_13702 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #x_13703, #x_13702)
case_coverage_ok( (eq_4‹U› nat_3 x_13703 zero_4), U)
Logical.check_tm( (eq_4‹U› nat_3 x_13703 zero_4), U )
Logical.infer_tm((eq_4‹U› nat_3 x_13703 zero_4))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( x_13703, nat_3 )
Logical.infer_tm(x_13703)
Logical.assert_equal(nat_3, nat_3)
Logical.check_tm( zero_4, nat_3 )
Logical.infer_tm(zero_4)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(U, U)
Logical.assert_equal(nat_3 -> U, nat_3 -> U)
Program.check_tm( zero_4, nat_3 )
Program.infer_tm(zero_4)
Logical.assert_equal(nat_3, nat_3)
Logical.check_tm( refl_6‹U›,
  ((function _13739 : nat_3 -> U
    | x_13741 => (eq_4‹U› nat_3 x_13741 zero_4)) zero_4)
)
Logical.infer_tm(refl_6‹U›)
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( zero_4, nat_3 )
Logical.infer_tm(zero_4)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(((function _13742 : nat_3 -> U
                       | x_13744 => (eq_4‹U› nat_3 x_13744 zero_4))
                       zero_4), (eq_4‹U› nat_3 zero_4 zero_4))
Logical.assert_equal((exists_5‹U,U›
                       nat_3
                       function _13745 : nat_3 -> U
                       | x_13747 => (eq_4‹U› nat_3 x_13747 zero_4)), 
(exists_5‹U,U›
  nat_3
  function _13748 : nat_3 -> U
  | x_13750 => (eq_4‹U› nat_3 x_13750 zero_4)))
trans12.Program.case_split(vecU_20, vconsU_28)
Logical.infer_tm(nat_3)
Logical.infer_tm(A_13584)
Logical.infer_tm((vec_8‹U› A_13584 n_13754))
Logical.check_tm( A_13584, U )
Logical.infer_tm(A_13584)
Logical.assert_equal(U, U)
Logical.check_tm( n_13754, nat_3 )
Logical.infer_tm(n_13754)
Logical.assert_equal(nat_3, nat_3)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹U› #A_13584 #n_13600),
      (vec_8‹U› #A_13584 (succ_5‹› #n_13754)));
    {| eq_pat?(N #A_13584, A_13579 : U)
       eq_pat?(N #n_13600, n_13580 : nat_3)
       eq_pat?(N #n_13754, _13581 : nat_3)
       eq_pat?(R #hd_13755, _13582 : #A_13584)
       eq_pat?(R #tl_13756, tl_13583 : (vec_8‹U› #A_13584 #n_13754)) ::: [] =>?
         match ((vlength_13538) #A_13579 #_13581 #tl_13583) in
           (exists_5‹U,U›
             nat_3
             function _13821 : nat_3 -> U
             | x_13823 => (eq_4‹U› nat_3 x_13823 #_13581)) -o
             (exists_5‹U,U›
               nat_3
               function _13824 : nat_3 -> U
               | x_13826 =>
                 (eq_4‹U› nat_3 x_13826 (succ_5‹› #_13581)))
         with
         | (ex_7 n_13827 pf_13828) =>
           (ex_7‹U,U›
             (succ_5‹› n_13827)
             ((congr_3‹U,U,U›)
               nat_3 nat_3 n_13827 #_13581
               function _13829 : nat_3 -> nat_3
               | x_13831 => (succ_5‹› x_13831) pf_13828))
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_13584, A_13579 : U)
  eq_pat?(N #n_13600, n_13580 : nat_3)
  eq_pat?(N #n_13754, _13581 : nat_3)
  eq_pat?(R #hd_13755, _13582 : #A_13584)
  eq_pat?(R #tl_13756, tl_13583 : (vec_8‹U› #A_13584 #n_13754))
)
unify_global(
  eq_term?( (vec_8‹U› #A_13584 #n_13600),
    (vec_8‹U› #A_13584 (succ_5‹› #n_13754)))
)
simpl_pprbm ~expand:false( #A_13584, #A_13579)
simpl_pprbm ~expand:false( #n_13600, #n_13580)
simpl_pprbm ~expand:false( #n_13754, #_13581)
simpl_pprbm ~expand:false( #hd_13755, #_13582)
simpl_pprbm ~expand:false( #tl_13756, #tl_13583)
simpl_pprbm ~expand:false( (vec_8‹U› #A_13584 #n_13600),
  (vec_8‹U› #A_13584 (succ_5‹› #n_13754)))
simpl_pprbm ~expand:false( #A_13584, #A_13584)
simpl_pprbm ~expand:false( #n_13600, (succ_5‹› #n_13754))
case_coverage_ok(
  match ((vlength_13538) A_13584 n_13754 tl_13756) in
    (exists_5‹U,U›
      nat_3
      function _13870 : nat_3 -> U
      | x_13872 => (eq_4‹U› nat_3 x_13872 n_13754)) -o
      (exists_5‹U,U›
        nat_3
        function _13873 : nat_3 -> U
        | x_13875 => (eq_4‹U› nat_3 x_13875 (succ_5‹› n_13754)))
  with
  | (ex_7 n_13876 pf_13877) =>
    (ex_7‹U,U›
      (succ_5‹› n_13876)
      ((congr_3‹U,U,U›)
        nat_3 nat_3 n_13876 n_13754
        function _13878 : nat_3 -> nat_3
        | x_13880 => (succ_5‹› x_13880) pf_13877)),
  (exists_5‹U,U›
    nat_3
    function _13881 : nat_3 -> U
    | x_13883 => (eq_4‹U› nat_3 x_13883 (succ_5‹› n_13754))))
Program.check_tm(
  match ((vlength_13538) A_13584 n_13754 tl_13756) in
    (exists_5‹U,U›
      nat_3
      function _13885 : nat_3 -> U
      | x_13887 => (eq_4‹U› nat_3 x_13887 n_13754)) -o
      (exists_5‹U,U›
        nat_3
        function _13888 : nat_3 -> U
        | x_13890 => (eq_4‹U› nat_3 x_13890 (succ_5‹› n_13754)))
  with
  | (ex_7 n_13891 pf_13892) =>
    (ex_7‹U,U›
      (succ_5‹› n_13891)
      ((congr_3‹U,U,U›)
        nat_3 nat_3 n_13891 n_13754
        function _13893 : nat_3 -> nat_3
        | x_13895 => (succ_5‹› x_13895) pf_13892)),
  (exists_5‹U,U›
    nat_3
    function _13896 : nat_3 -> U
    | x_13898 => (eq_4‹U› nat_3 x_13898 (succ_5‹› n_13754)))
)
Program.infer_tm(match ((vlength_13538) A_13584 n_13754 tl_13756) in
                   (exists_5‹U,U›
                     nat_3
                     function _13900 : nat_3 -> U
                     | x_13902 => (eq_4‹U› nat_3 x_13902 n_13754)) -o
                     (exists_5‹U,U›
                       nat_3
                       function _13903 : nat_3 -> U
                       | x_13905 =>
                         (eq_4‹U› nat_3 x_13905 (succ_5‹› n_13754)))
                 with
                 | (ex_7 n_13906 pf_13907) =>
                   (ex_7‹U,U›
                     (succ_5‹› n_13906)
                     ((congr_3‹U,U,U›)
                       nat_3 nat_3 n_13906 n_13754
                       function _13908 : nat_3 -> nat_3
                       | x_13910 => (succ_5‹› x_13910) pf_13907)))
Program.infer_motive_R(((vlength_13538) A_13584 n_13754 tl_13756), (exists_5‹U,U›
                                                                    nat_3
                                                                    function _13911 :
                                                                    nat_3 ->
                                                                    U
                                                                    | 
                                                                    x_13913 =>
                                                                    (eq_4‹U›
                                                                    nat_3
                                                                    x_13913
                                                                    n_13754)))
Program.check_tm( ((vlength_13538) A_13584 n_13754 tl_13756),
  (exists_5‹U,U›
    nat_3
    function _13914 : nat_3 -> U
    | x_13916 => (eq_4‹U› nat_3 x_13916 n_13754))
)
Program.infer_tm(((vlength_13538) A_13584 n_13754 tl_13756))
Program.infer_tm(((vlength_13538) A_13584 n_13754))
Program.infer_tm(((vlength_13538) A_13584))
Program.infer_tm(vlength_13538)
Logical.check_tm( A_13584, U )
Logical.infer_tm(A_13584)
Logical.assert_equal(U, U)
Logical.check_tm( n_13754, nat_3 )
Logical.infer_tm(n_13754)
Logical.assert_equal(nat_3, nat_3)
Program.check_tm( tl_13756, (vec_8‹U› A_13584 n_13754) )
Program.infer_tm(tl_13756)
Logical.assert_equal((vec_8‹U› A_13584 n_13754), (vec_8‹U›
                                                       A_13584 n_13754))
Logical.assert_equal((exists_5‹U,U›
                       nat_3
                       function _13917 : nat_3 -> U
                       | x_13919 => (eq_4‹U› nat_3 x_13919 n_13754)), 
(exists_5‹U,U›
  nat_3
  function _13920 : nat_3 -> U
  | x_13922 => (eq_4‹U› nat_3 x_13922 n_13754)))
Program.infer_motive_ok
trans12.Program.case_intro((exists_5‹U,U›
                             nat_3
                             function _13928 : nat_3 -> U
                             | x_13930 => (eq_4‹U› nat_3 x_13930 n_13754)))
Logical.infer_tm((exists_5‹U,U›
                   nat_3
                   function _13950 : nat_3 -> U
                   | x_13952 => (eq_4‹U› nat_3 x_13952 n_13754)))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm(
  function _13953 : nat_3 -> U
  | x_13955 => (eq_4‹U› nat_3 x_13955 n_13754), nat_3 -> U
)
Logical.infer_tm(function _13957 : nat_3 -> U
                 | x_13959 => (eq_4‹U› nat_3 x_13959 n_13754))
Logical.infer_tm(nat_3 -> U)
Logical.infer_tm(nat_3)
Logical.infer_tm(U)
Logical.infer_tm(nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #x_13964, x_13963 : nat_3) ::: [] =>?
         (eq_4‹U› nat_3 #x_13963 n_13754)
    |}
  |}
|}
unify_local( eq_pat?(R #x_13964, x_13963 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #x_13964, #x_13963)
case_coverage_ok( (eq_4‹U› nat_3 x_13964 n_13754), U)
Logical.check_tm( (eq_4‹U› nat_3 x_13964 n_13754), U )
Logical.infer_tm((eq_4‹U› nat_3 x_13964 n_13754))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( x_13964, nat_3 )
Logical.infer_tm(x_13964)
Logical.assert_equal(nat_3, nat_3)
Logical.check_tm( n_13754, nat_3 )
Logical.infer_tm(n_13754)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(U, U)
Logical.assert_equal(nat_3 -> U, nat_3 -> U)
Logical.infer_tm((exists_5‹U,U›
                   nat_3
                   function _14021 : nat_3 -> U
                   | x_14023 => (eq_4‹U› nat_3 x_14023 n_13754)))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm(
  function _14024 : nat_3 -> U
  | x_14026 => (eq_4‹U› nat_3 x_14026 n_13754), nat_3 -> U
)
Logical.infer_tm(function _14028 : nat_3 -> U
                 | x_14030 => (eq_4‹U› nat_3 x_14030 n_13754))
Logical.infer_tm(nat_3 -> U)
Logical.infer_tm(nat_3)
Logical.infer_tm(U)
Logical.infer_tm(nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #x_14035, x_14034 : nat_3) ::: [] =>?
         (eq_4‹U› nat_3 #x_14034 n_13754)
    |}
  |}
|}
unify_local( eq_pat?(R #x_14035, x_14034 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #x_14035, #x_14034)
case_coverage_ok( (eq_4‹U› nat_3 x_14035 n_13754), U)
Logical.check_tm( (eq_4‹U› nat_3 x_14035 n_13754), U )
Logical.infer_tm((eq_4‹U› nat_3 x_14035 n_13754))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( x_14035, nat_3 )
Logical.infer_tm(x_14035)
Logical.assert_equal(nat_3, nat_3)
Logical.check_tm( n_13754, nat_3 )
Logical.infer_tm(n_13754)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(U, U)
Logical.assert_equal(nat_3 -> U, nat_3 -> U)
trans12.Program.case_split(existsUU_14, exUU_18)
Logical.infer_tm(nat_3)
Logical.infer_tm(((function _14118 : nat_3 -> U
                   | x_14120 => (eq_4‹U› nat_3 x_14120 n_13754)) 
                 m_14077))
Logical.infer_tm(function _14121 : nat_3 -> U
                 | x_14123 => (eq_4‹U› nat_3 x_14123 n_13754))
Logical.infer_tm(nat_3 -> U)
Logical.infer_tm(nat_3)
Logical.infer_tm(U)
Logical.infer_tm(nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #x_14128, x_14127 : nat_3) ::: [] =>?
         (eq_4‹U› nat_3 #x_14127 n_13754)
    |}
  |}
|}
unify_local( eq_pat?(R #x_14128, x_14127 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #x_14128, #x_14127)
case_coverage_ok( (eq_4‹U› nat_3 x_14128 n_13754), U)
Logical.check_tm( (eq_4‹U› nat_3 x_14128 n_13754), U )
Logical.infer_tm((eq_4‹U› nat_3 x_14128 n_13754))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( x_14128, nat_3 )
Logical.infer_tm(x_14128)
Logical.assert_equal(nat_3, nat_3)
Logical.check_tm( n_13754, nat_3 )
Logical.infer_tm(n_13754)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( m_14077, nat_3 )
Logical.infer_tm(m_14077)
Logical.assert_equal(nat_3, nat_3)
case_coverage{|
  prblm {|
    eq_term?(
      (exists_5‹U,U›
        nat_3
        function _14197 : nat_3 -> U
        | x_14199 => (eq_4‹U› nat_3 x_14199 n_13754)),
      (exists_5‹U,U›
        nat_3
        function _14200 : nat_3 -> U
        | x_14202 => (eq_4‹U› nat_3 x_14202 n_13754)));
    {| eq_pat?(R #m_14077, n_13926 : nat_3)
       eq_pat?(N #pf_14078, pf_13927 : (eq_4‹U› nat_3 #m_14077 n_13754)) ::: [] =>?
         (ex_7‹U,U›
           (succ_5‹› #n_13926)
           ((congr_3‹U,U,U›)
             nat_3 nat_3 #n_13926 n_13754
             function _14203 : nat_3 -> nat_3
             | x_14205 => (succ_5‹› x_14205) #pf_13927))
    |}
  |}
|}
unify_local(
  eq_pat?(R #m_14077, n_13926 : nat_3)
  eq_pat?(N #pf_14078, pf_13927 : (eq_4‹U› nat_3 #m_14077 n_13754))
)
unify_global(
  eq_term?(
    (exists_5‹U,U›
      nat_3
      function _14206 : nat_3 -> U
      | x_14208 => (eq_4‹U› nat_3 x_14208 n_13754)),
    (exists_5‹U,U›
      nat_3
      function _14209 : nat_3 -> U
      | x_14211 => (eq_4‹U› nat_3 x_14211 n_13754)))
)
simpl_pprbm ~expand:false( #m_14077, #n_13926)
simpl_pprbm ~expand:false( #pf_14078, #pf_13927)
simpl_pprbm ~expand:false(
  (exists_5‹U,U›
    nat_3
    function _14218 : nat_3 -> U
    | x_14220 => (eq_4‹U› nat_3 x_14220 n_13754)),
  (exists_5‹U,U›
    nat_3
    function _14221 : nat_3 -> U
    | x_14223 => (eq_4‹U› nat_3 x_14223 n_13754)))
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false(
  function _14224 : nat_3 -> U
  | x_14226 => (eq_4‹U› nat_3 x_14226 n_13754),
  function _14227 : nat_3 -> U
  | x_14229 => (eq_4‹U› nat_3 x_14229 n_13754))
simpl_pprbm ~expand:false( nat_3 -> U, nat_3 -> U)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( U, U)
simpl_pprbm ~expand:false( (eq_4‹U› nat_3 x_14234 n_13754),
  (eq_4‹U› nat_3 x_14234 n_13754))
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( x_14234, x_14234)
simpl_pprbm ~expand:false( n_13754, n_13754)
case_coverage_ok(
  (ex_7‹U,U›
    (succ_5‹› m_14077)
    ((congr_3‹U,U,U›)
      nat_3 nat_3 m_14077 n_13754
      function _14265 : nat_3 -> nat_3
      | x_14267 => (succ_5‹› x_14267) pf_14078)),
  (exists_5‹U,U›
    nat_3
    function _14268 : nat_3 -> U
    | x_14270 => (eq_4‹U› nat_3 x_14270 (succ_5‹› n_13754))))
Program.check_tm(
  (ex_7‹U,U›
    (succ_5‹› m_14077)
    ((congr_3‹U,U,U›)
      nat_3 nat_3 m_14077 n_13754
      function _14271 : nat_3 -> nat_3
      | x_14273 => (succ_5‹› x_14273) pf_14078)),
  (exists_5‹U,U›
    nat_3
    function _14274 : nat_3 -> U
    | x_14276 => (eq_4‹U› nat_3 x_14276 (succ_5‹› n_13754)))
)
Program.infer_tm((ex_7‹U,U›
                   (succ_5‹› m_14077)
                   ((congr_3‹U,U,U›)
                     nat_3 nat_3 m_14077 n_13754
                     function _14277 : nat_3 -> nat_3
                     | x_14279 => (succ_5‹› x_14279) pf_14078)))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm(
  function _14280 : nat_3 -> U
  | x_14282 => (eq_4‹U› nat_3 x_14282 (succ_5‹› n_13754)), nat_3 -> U
)
Logical.infer_tm(function _14284 : nat_3 -> U
                 | x_14286 =>
                   (eq_4‹U› nat_3 x_14286 (succ_5‹› n_13754)))
Logical.infer_tm(nat_3 -> U)
Logical.infer_tm(nat_3)
Logical.infer_tm(U)
Logical.infer_tm(nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #x_14291, x_14290 : nat_3) ::: [] =>?
         (eq_4‹U› nat_3 #x_14290 (succ_5‹› n_13754))
    |}
  |}
|}
unify_local( eq_pat?(R #x_14291, x_14290 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #x_14291, #x_14290)
case_coverage_ok( (eq_4‹U› nat_3 x_14291 (succ_5‹› n_13754)), U)
Logical.check_tm( (eq_4‹U› nat_3 x_14291 (succ_5‹› n_13754)), U )
Logical.infer_tm((eq_4‹U› nat_3 x_14291 (succ_5‹› n_13754)))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( x_14291, nat_3 )
Logical.infer_tm(x_14291)
Logical.assert_equal(nat_3, nat_3)
Logical.check_tm( (succ_5‹› n_13754), nat_3 )
Logical.infer_tm((succ_5‹› n_13754))
Logical.check_tm( n_13754, nat_3 )
Logical.infer_tm(n_13754)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(U, U)
Logical.assert_equal(nat_3 -> U, nat_3 -> U)
Program.check_tm( (succ_5‹› m_14077), nat_3 )
Program.infer_tm((succ_5‹› m_14077))
Program.check_tm( m_14077, nat_3 )
Program.infer_tm(m_14077)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.check_tm(
  ((congr_3‹U,U,U›)
    nat_3 nat_3 m_14077 n_13754
    function _14339 : nat_3 -> nat_3
    | x_14341 => (succ_5‹› x_14341) pf_14078),
  ((function _14342 : nat_3 -> U
    | x_14344 => (eq_4‹U› nat_3 x_14344 (succ_5‹› n_13754)))
    (succ_5‹› m_14077))
)
Logical.infer_tm(((congr_3‹U,U,U›)
                   nat_3 nat_3 m_14077 n_13754
                   function _14345 : nat_3 -> nat_3
                   | x_14347 => (succ_5‹› x_14347) pf_14078))
Logical.infer_tm(((congr_3‹U,U,U›)
                   nat_3 nat_3 m_14077 n_13754
                   function _14348 : nat_3 -> nat_3
                   | x_14350 => (succ_5‹› x_14350)))
Logical.infer_tm(((congr_3‹U,U,U›) nat_3 nat_3 m_14077 n_13754))
Logical.infer_tm(((congr_3‹U,U,U›) nat_3 nat_3 m_14077))
Logical.infer_tm(((congr_3‹U,U,U›) nat_3 nat_3))
Logical.infer_tm(((congr_3‹U,U,U›) nat_3))
Logical.infer_tm(congr_3‹U,U,U›)
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( m_14077, nat_3 )
Logical.infer_tm(m_14077)
Logical.assert_equal(nat_3, nat_3)
Logical.check_tm( n_13754, nat_3 )
Logical.infer_tm(n_13754)
Logical.assert_equal(nat_3, nat_3)
Logical.check_tm(
  function _14351 : nat_3 -> nat_3
  | x_14353 => (succ_5‹› x_14353), nat_3 -> nat_3
)
Logical.infer_tm(function _14355 : nat_3 -> nat_3
                 | x_14357 => (succ_5‹› x_14357))
Logical.infer_tm(nat_3 -> nat_3)
Logical.infer_tm(nat_3)
Logical.infer_tm(nat_3)
Logical.infer_tm(nat_3)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #x_14362, x_14361 : nat_3) ::: [] =>?
         (succ_5‹› #x_14361)
    |}
  |}
|}
unify_local( eq_pat?(R #x_14362, x_14361 : nat_3) )
unify_global(  )
simpl_pprbm ~expand:false( #x_14362, #x_14361)
case_coverage_ok( (succ_5‹› x_14362), nat_3)
Logical.check_tm( (succ_5‹› x_14362), nat_3 )
Logical.infer_tm((succ_5‹› x_14362))
Logical.check_tm( x_14362, nat_3 )
Logical.infer_tm(x_14362)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3 -> nat_3, nat_3 -> nat_3)
Logical.check_tm( pf_14078, (eq_4‹U› nat_3 m_14077 n_13754) )
Logical.infer_tm(pf_14078)
Logical.assert_equal((eq_4‹U› nat_3 m_14077 n_13754), ((function _14410 :
                                                              nat_3 -> U
                                                            | x_14412 =>
                                                              (eq_4‹U›
                                                                nat_3 x_14412
                                                                n_13754))
                                                            m_14077))
Logical.assert_equal(((function _14413 : nat_3 -> U
                       | x_14415 =>
                         (eq_4‹U› nat_3 x_14415 (succ_5‹› n_13754)))
                       (succ_5‹› m_14077)), (eq_4‹U›
                                                  nat_3
                                                  ((function _14416 :
                                                      nat_3 -> nat_3
                                                    | x_14418 =>
                                                      (succ_5‹› x_14418))
                                                    m_14077)
                                                  ((function _14419 :
                                                      nat_3 -> nat_3
                                                    | x_14421 =>
                                                      (succ_5‹› x_14421))
                                                    n_13754)))
Logical.assert_equal((exists_5‹U,U›
                       nat_3
                       function _14422 : nat_3 -> U
                       | x_14424 =>
                         (eq_4‹U› nat_3 x_14424 (succ_5‹› n_13754))), 
(exists_5‹U,U›
  nat_3
  function _14425 : nat_3 -> U
  | x_14427 => (eq_4‹U› nat_3 x_14427 (succ_5‹› n_13754))))
trans12.Program.case_introed((exists_5‹U,U›
                               nat_3
                               function _14431 : nat_3 -> U
                               | x_14433 =>
                                 (eq_4‹U› nat_3 x_14433 n_13754)))
Logical.assert_equal((exists_5‹U,U›
                       nat_3
                       function _14434 : nat_3 -> U
                       | x_14436 =>
                         (eq_4‹U› nat_3 x_14436 (succ_5‹› n_13754))), 
(exists_5‹U,U›
  nat_3
  function _14437 : nat_3 -> U
  | x_14439 => (eq_4‹U› nat_3 x_14439 (succ_5‹› n_13754))))
trans12.Program.case_introed((vec_8‹U› #A_13584 #n_13600))
trans12.Program.case_introed(nat_3)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_14443 : U} ->
                       ∀ {n_14444 : nat_3} ->
                         (vec_8‹U› A_14443 n_14444) ->
                           (exists_5‹U,U›
                             nat_3
                             function _14446 : nat_3 -> U
                             | x_14448 => (eq_4‹U› nat_3 x_14448 n_14444)), 
∀ {A_14449 : U} ->
  ∀ {n_14450 : nat_3} ->
    (vec_8‹U› A_14449 n_14450) ->
      (exists_5‹U,U›
        nat_3
        function _14452 : nat_3 -> U
        | x_14454 => (eq_4‹U› nat_3 x_14454 n_14450)))
Logical.infer_tm((vec_8‹U› nat_3 (succ_5‹› zero_4)))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( (succ_5‹› zero_4), nat_3 )
Logical.infer_tm((succ_5‹› zero_4))
Logical.check_tm( zero_4, nat_3 )
Logical.infer_tm(zero_4)
Logical.assert_equal(nat_3, nat_3)
Logical.assert_equal(nat_3, nat_3)
Program.check_tm( (vcons_12‹U› zero_4 zero_4 vnil_11‹U›),
  (vec_8‹U› nat_3 (succ_5‹› zero_4))
)
Program.infer_tm((vcons_12‹U› zero_4 zero_4 vnil_11‹U›))
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( zero_4, nat_3 )
Logical.infer_tm(zero_4)
Logical.assert_equal(nat_3, nat_3)
Program.check_tm( zero_4, nat_3 )
Program.infer_tm(zero_4)
Logical.assert_equal(nat_3, nat_3)
Program.check_tm( vnil_11‹U›, (vec_8‹U› nat_3 zero_4) )
Program.infer_tm(vnil_11‹U›)
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.assert_equal((vec_8‹U› nat_3 zero_4), (vec_8‹U› nat_3 zero_4))
Logical.assert_equal((vec_8‹U› nat_3 (succ_5‹› zero_4)), (vec_8‹U›
                                                                   nat_3
                                                                   (succ_5‹›
                                                                    zero_4)))
Logical.infer_tm(nat_3)
Program.check_tm( ((hd_vec_4) nat_3 zero_4 xs_8), nat_3 )
Program.infer_tm(((hd_vec_4) nat_3 zero_4 xs_8))
Program.infer_tm(((hd_vec_4) nat_3 zero_4))
Program.infer_tm(((hd_vec_4) nat_3))
Program.infer_tm(hd_vec_4)
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( zero_4, nat_3 )
Logical.infer_tm(zero_4)
Logical.assert_equal(nat_3, nat_3)
Program.check_tm( xs_8, (vec_8‹U› nat_3 (succ_5‹› zero_4)) )
Program.infer_tm(xs_8)
Logical.assert_equal((vec_8‹U› nat_3 (succ_5‹› zero_4)), (vec_8‹U›
                                                                   nat_3
                                                                   (succ_5‹›
                                                                    zero_4)))
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm(nat_3)
Program.check_tm( ((hd_vec2_5) nat_3 zero_4 xs_8), nat_3 )
Program.infer_tm(((hd_vec2_5) nat_3 zero_4 xs_8))
Program.infer_tm(((hd_vec2_5) nat_3 zero_4))
Program.infer_tm(((hd_vec2_5) nat_3))
Program.infer_tm(hd_vec2_5)
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( zero_4, nat_3 )
Logical.infer_tm(zero_4)
Logical.assert_equal(nat_3, nat_3)
Program.check_tm( xs_8, (vec_8‹U› nat_3 (succ_5‹› zero_4)) )
Program.infer_tm(xs_8)
Logical.assert_equal((vec_8‹U› nat_3 (succ_5‹› zero_4)), (vec_8‹U›
                                                                   nat_3
                                                                   (succ_5‹›
                                                                    zero_4)))
Logical.assert_equal(nat_3, nat_3)
Logical.infer_tm(nat_3)
Program.check_tm( ((hd_vec3_6) nat_3 zero_4 xs_8), nat_3 )
Program.infer_tm(((hd_vec3_6) nat_3 zero_4 xs_8))
Program.infer_tm(((hd_vec3_6) nat_3 zero_4))
Program.infer_tm(((hd_vec3_6) nat_3))
Program.infer_tm(hd_vec3_6)
Logical.check_tm( nat_3, U )
Logical.infer_tm(nat_3)
Logical.assert_equal(U, U)
Logical.check_tm( zero_4, nat_3 )
Logical.infer_tm(zero_4)
Logical.assert_equal(nat_3, nat_3)
Program.check_tm( xs_8, (vec_8‹U› nat_3 (succ_5‹› zero_4)) )
Program.infer_tm(xs_8)
Logical.assert_equal((vec_8‹U› nat_3 (succ_5‹› zero_4)), (vec_8‹U›
                                                                   nat_3
                                                                   (succ_5‹›
                                                                    zero_4)))
Logical.assert_equal(nat_3, nat_3)
#[program]
inductive unit_1 where
| tt_1 of layout[]

#[program]
inductive bool_2 where
| true_2 of layout[]
| false_3 of layout[]

#[program]
inductive nat_3 where
| zero_4 of layout[]
| succ_5 of layout[R]

#[logical]
inductive eqU_10 where
| reflU_14 of layout[]

#[logical]
inductive eqL_9 where
| reflL_13 of layout[]

#[program]
inductive existsUU_14 where
| exUU_18 of layout[R, N]

#[program]
inductive existsUL_13 where
| exUL_17 of layout[R, N]

#[program]
inductive existsLU_12 where


#[program]
inductive existsLL_11 where


#[program]
inductive singU_16 where
| justU_20 of layout[R]

#[program]
inductive singL_15 where
| justL_19 of layout[R]

#[program]
inductive listU_18 where
| nilU_23 of layout[]
| consU_24 of layout[R, R]

#[program]
inductive listL_17 where
| nilL_21 of layout[]

#[program]
inductive vecU_20 where
| vnilU_27 of layout[]
| vconsU_28 of layout[N, R, R]

#[program]
inductive vecL_19 where
| vnilL_25 of layout[]

#[program]
def rwlUU_15 :=
  fun rwl_14461 (A_14462, m_14463, n_14464, B_14465, __14466, __14467) =>
    match {NULL} with
    | reflU_14  => __14467
    end

#[program]
def rwlUL_14 :=
  fun rwl_14468 (A_14469, m_14470, n_14471, B_14472, __14473, __14474) =>
    match {NULL} with
    | reflU_14  => __14474
    end

#[program]
def rwlLU_13 :=
  fun rwl_14475 (A_14476, m_14477, n_14478, B_14479, __14480, __14481) =>
    match {NULL} with
    | reflL_13  => __14481
    end

#[program]
def rwlLL_12 :=
  fun rwl_14482 (A_14483, m_14484, n_14485, B_14486, __14487, __14488) =>
    match {NULL} with
    | reflL_13  => __14488
    end

#[program]
def rwrUU_19 :=
  fun rwr_14489 (A_14490, m_14491, n_14492, B_14493, __14494, __14495) =>
    match {NULL} with
    | reflU_14  => __14495
    end

#[program]
def rwrUL_18 :=
  fun rwr_14496 (A_14497, m_14498, n_14499, B_14500, __14501, __14502) =>
    match {NULL} with
    | reflU_14  => __14502
    end

#[program]
def rwrLU_17 :=
  fun rwr_14503 (A_14504, m_14505, n_14506, B_14507, __14508, __14509) =>
    match {NULL} with
    | reflL_13  => __14509
    end

#[program]
def rwrLL_16 :=
  fun rwr_14510 (A_14511, m_14512, n_14513, B_14514, __14515, __14516) =>
    match {NULL} with
    | reflL_13  => __14516
    end

#[logical]
def congrUUU_27 := NULL

#[logical]
def congrUUL_26 := NULL

#[logical]
def congrULU_25 := NULL

#[logical]
def congrULL_24 := NULL

#[logical]
def congrLUU_23 := NULL

#[logical]
def congrLUL_22 := NULL

#[logical]
def congrLLU_21 := NULL

#[logical]
def congrLLL_20 := NULL

#[program]
def hd_vec_4 :=
  fun hd_vec_14517 (A_14518, n_14519, __14520) =>
    match __14520 with
    | vnilU_27  => !! | vconsU_28 n_14521 hd_14522 tl_14523 => hd_14522
    end

#[program]
def hd_vec2_5 :=
  fun hd_vec2_14524 (A_14525, n_14526, xs_14527) =>
    match xs_14527 with
    | vnilU_27  => !! | vconsU_28 n_14528 hd_14529 tl_14530 => hd_14529
    end

#[program]
def hd_vec3_6 :=
  fun hd_vec3_14531 (A_14532, n_14533, xs_14534) =>
    match xs_14534 with
    | vnilU_27  => !! | vconsU_28 n_14535 hd_14536 tl_14537 => hd_14536
    end

#[program]
def vlength_7 :=
  fun vlength_14538 (A_14539, n_14540, __14541) =>
    match __14541 with
    | vnilU_27  => (exUU_18 zero_4 NULL)
    | vconsU_28 n_14542 hd_14543 tl_14544 =>
      match ((vlength_14538) NULL NULL tl_14544) with
      | exUU_18 m_14545 pf_14546 => (exUU_18 (succ_5 m_14545) NULL)
      end
    end

#[program]
def xs_8 := (vconsU_28 NULL zero_4 vnilU_27)

#[program]
def x_9 := ((hd_vec_4) NULL NULL xs_8)

#[program]
def y_10 := ((hd_vec2_5) NULL NULL xs_8)

#[program]
def z_11 := ((hd_vec3_6) NULL NULL xs_8)

-----------------------------------------

#[program]
inductive unit_1 where
| tt_1 of layout[]

#[program]
inductive bool_2 where
| true_2 of layout[]
| false_3 of layout[]

#[program]
inductive nat_3 where
| zero_4 of layout[]
| succ_5 of layout[R]

#[logical]
inductive eqU_10 where
| reflU_14 of layout[]

#[logical]
inductive eqL_9 where
| reflL_13 of layout[]

#[program]
inductive existsUU_14 where
| exUU_18 of layout[R, N]

#[program]
inductive existsUL_13 where
| exUL_17 of layout[R, N]

#[program]
inductive existsLU_12 where


#[program]
inductive existsLL_11 where


#[program]
inductive singU_16 where
| justU_20 of layout[R]

#[program]
inductive singL_15 where
| justL_19 of layout[R]

#[program]
inductive listU_18 where
| nilU_23 of layout[]
| consU_24 of layout[R, R]

#[program]
inductive listL_17 where
| nilL_21 of layout[]

#[program]
inductive vecU_20 where
| vnilU_27 of layout[]
| vconsU_28 of layout[N, R, R]

#[program]
inductive vecL_19 where
| vnilL_25 of layout[]

#[program]
def rwlUU_15 :=
  fun rwl_14633 (A_14634, m_14635, n_14636, B_14637, __14638, __14639) =>
    __14639

#[program]
def rwlUL_14 :=
  fun rwl_14640 (A_14641, m_14642, n_14643, B_14644, __14645, __14646) =>
    __14646

#[program]
def rwlLU_13 :=
  fun rwl_14647 (A_14648, m_14649, n_14650, B_14651, __14652, __14653) =>
    __14653

#[program]
def rwlLL_12 :=
  fun rwl_14654 (A_14655, m_14656, n_14657, B_14658, __14659, __14660) =>
    __14660

#[program]
def rwrUU_19 :=
  fun rwr_14661 (A_14662, m_14663, n_14664, B_14665, __14666, __14667) =>
    __14667

#[program]
def rwrUL_18 :=
  fun rwr_14668 (A_14669, m_14670, n_14671, B_14672, __14673, __14674) =>
    __14674

#[program]
def rwrLU_17 :=
  fun rwr_14675 (A_14676, m_14677, n_14678, B_14679, __14680, __14681) =>
    __14681

#[program]
def rwrLL_16 :=
  fun rwr_14682 (A_14683, m_14684, n_14685, B_14686, __14687, __14688) =>
    __14688

#[logical]
def congrUUU_27 := NULL

#[logical]
def congrUUL_26 := NULL

#[logical]
def congrULU_25 := NULL

#[logical]
def congrULL_24 := NULL

#[logical]
def congrLUU_23 := NULL

#[logical]
def congrLUL_22 := NULL

#[logical]
def congrLLU_21 := NULL

#[logical]
def congrLLL_20 := NULL

#[program]
def hd_vec_4 :=
  fun hd_vec_14689 (A_14690, n_14691, __14692) =>
    match __14692 with
    | vconsU_28 n_14693 hd_14694 tl_14695 => hd_14694
    end

#[program]
def hd_vec2_5 :=
  fun hd_vec2_14696 (A_14697, n_14698, xs_14699) =>
    match xs_14699 with
    | vconsU_28 n_14700 hd_14701 tl_14702 => hd_14701
    end

#[program]
def hd_vec3_6 :=
  fun hd_vec3_14703 (A_14704, n_14705, xs_14706) =>
    match xs_14706 with
    | vconsU_28 n_14707 hd_14708 tl_14709 => hd_14708
    end

#[program]
def vlength_7 :=
  fun vlength_14710 (A_14711, n_14712, __14713) =>
    match __14713 with
    | vnilU_27  => (exUU_18 zero_4 NULL)
    | vconsU_28 n_14714 hd_14715 tl_14716 =>
      match ((vlength_14710) NULL NULL tl_14716) with
      | exUU_18 m_14717 pf_14718 => (exUU_18 (succ_5 m_14717) NULL)
      end
    end

#[program]
def xs_8 := (vconsU_28 NULL zero_4 vnilU_27)

#[program]
def x_9 := ((hd_vec_4) NULL NULL xs_8)

#[program]
def y_10 := ((hd_vec2_5) NULL NULL xs_8)

#[program]
def z_11 := ((hd_vec3_6) NULL NULL xs_8)

-----------------------------------------

