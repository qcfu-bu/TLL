[Definition {name = "DH"; relv = N;
   body =
   (Binder ([],
      ((Fun (
          (Pi (R, U, Int_t,
             (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", Proto)))))))),
          (Binder ((Some "DH"),
             [([(PId "p"); (PId "g")],
               (Some (Act (N, true, Int_t,
                        (Binder ("a",
                           (Act (R, true, Int_t,
                              (Binder ("A",
                                 (Act (N, true,
                                    (BOpr ("=", (Id ("A", I)),
                                       (App
                                          [(Id ("powm", I)); (Id ("g", I));
                                            (Id ("a", I)); (Id ("p", I))])
                                       )),
                                    (Binder ("_",
                                       (Act (N, false, Int_t,
                                          (Binder ("b",
                                             (Act (R, false, Int_t,
                                                (Binder ("B",
                                                   (Act (N, false,
                                                      (BOpr ("=",
                                                         (Id ("B", I)),
                                                         (App
                                                            [(Id ("powm", I));
                                                              (Id ("g", I));
                                                              (Id ("b", I));
                                                              (Id ("p", I))])
                                                         )),
                                                      (Binder ("_", End))))
                                                   ))
                                                ))
                                             ))
                                          ))
                                       ))
                                    ))
                                 ))
                              ))
                           ))
                        ))))
               ]
             )),
          [E; E])),
       (Pi (R, U, Int_t,
          (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", Proto)))))))))
      ));
   view = [E; E]};
  Definition {name = "DH_ch"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", IMeta)))))))),
           (Binder ((Some "DH_ch"),
              [([(PId "p"); (PId "g")],
                (Some (Ch (true,
                         (App [(Id ("DH", I)); (Id ("p", I)); (Id ("g", I))])
                         ))))
                ]
              )),
           [E; E])),
        (Pi (R, U, Int_t,
           (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", IMeta)))))))))
       ));
    view = [E; E]};
  Definition {name = "DH_hc"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", IMeta)))))))),
           (Binder ((Some "DH_hc"),
              [([(PId "p"); (PId "g")],
                (Some (Ch (false,
                         (App [(Id ("DH", I)); (Id ("p", I)); (Id ("g", I))])
                         ))))
                ]
              )),
           [E; E])),
        (Pi (R, U, Int_t,
           (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", IMeta)))))))))
       ));
    view = [E; E]};
  Definition {name = "alice"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("a",
                 (Pi (R, U, Int_t,
                    (Binder ("p",
                       (Pi (R, U, Int_t,
                          (Binder ("g",
                             (Pi (R, U,
                                (App
                                   [(Id ("DH_ch", I)); (Id ("p", I));
                                     (Id ("g", I))]),
                                (Binder ("c", (IO (Id ("unit", I)))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "alice"),
              [([(PId "a"); (PId "p"); (PId "g"); (PId "c")],
                (Some (MLet ((App [(Send (Id ("c", I))); (Id ("a", I))]),
                         (Binder ((PId "c"),
                            (MLet (
                               (App
                                  [(Send (Id ("c", I)));
                                    (App
                                       [(Id ("powm", I)); (Id ("g", I));
                                         (Id ("a", I)); (Id ("p", I))])
                                    ]),
                               (Binder ((PId "c"),
                                  (MLet (
                                     (App
                                        [(Send (Id ("c", I)));
                                          (Id ("refl", I))]),
                                     (Binder ((PId "c"),
                                        (MLet ((Recv (Id ("c", I))),
                                           (Binder (
                                              (PBOpr (
                                                 "\226\159\168{},\226\159\169",
                                                 (PId "b"), (PId "c"))),
                                              (MLet ((Recv (Id ("c", I))),
                                                 (Binder (
                                                    (PBOpr (
                                                       "\226\159\168,\226\159\169",
                                                       (PId "B"), (PId "c"))),
                                                    (MLet (
                                                       (Recv (Id ("c", I))),
                                                       (Binder (
                                                          (PBOpr (
                                                             "\226\159\168{},\226\159\169",
                                                             (PId "pf"),
                                                             (PId "c"))),
                                                          (Close
                                                             (Id ("c", I)))
                                                          ))
                                                       ))
                                                    ))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; E; E; E])),
        (Pi (R, U, Int_t,
           (Binder ("a",
              (Pi (R, U, Int_t,
                 (Binder ("p",
                    (Pi (R, U, Int_t,
                       (Binder ("g",
                          (Pi (R, U,
                             (App
                                [(Id ("DH_ch", I)); (Id ("p", I));
                                  (Id ("g", I))]),
                             (Binder ("c", (IO (Id ("unit", I)))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E; E; E]};
  Definition {name = "bob"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("b",
                 (Pi (R, U, Int_t,
                    (Binder ("p",
                       (Pi (R, U, Int_t,
                          (Binder ("g",
                             (Pi (R, U,
                                (App
                                   [(Id ("DH_hc", I)); (Id ("p", I));
                                     (Id ("g", I))]),
                                (Binder ("c", (IO (Id ("unit", I)))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "bob"),
              [([(PId "b"); (PId "p"); (PId "g"); (PId "c")],
                (Some (MLet ((Recv (Id ("c", I))),
                         (Binder (
                            (PBOpr ("\226\159\168{},\226\159\169", (PId "a"),
                               (PId "c"))),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "A"), (PId "c"))),
                                  (MLet ((Recv (Id ("c", I))),
                                     (Binder (
                                        (PBOpr (
                                           "\226\159\168{},\226\159\169",
                                           (PId "pf"), (PId "c"))),
                                        (MLet (
                                           (App
                                              [(Send (Id ("c", I)));
                                                (Id ("b", I))]),
                                           (Binder ((PId "c"),
                                              (MLet (
                                                 (App
                                                    [(Send (Id ("c", I)));
                                                      (App
                                                         [(Id ("powm", I));
                                                           (Id ("g", I));
                                                           (Id ("b", I));
                                                           (Id ("p", I))])
                                                      ]),
                                                 (Binder ((PId "c"),
                                                    (MLet (
                                                       (App
                                                          [(Send
                                                              (Id ("c", I)));
                                                            (Id ("refl", I))]),
                                                       (Binder ((PId "c"),
                                                          (Close
                                                             (Id ("c", I)))
                                                          ))
                                                       ))
                                                    ))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; E; E; E])),
        (Pi (R, U, Int_t,
           (Binder ("b",
              (Pi (R, U, Int_t,
                 (Binder ("p",
                    (Pi (R, U, Int_t,
                       (Binder ("g",
                          (Pi (R, U,
                             (App
                                [(Id ("DH_hc", I)); (Id ("p", I));
                                  (Id ("g", I))]),
                             (Binder ("c", (IO (Id ("unit", I)))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E; E; E]};
  Definition {name = "key_exchange"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("unit", I)), (Binder ("_", (IO (Id ("unit", I)))))
              )),
           (Binder ((Some "key_exchange"),
              [([(PId "_")],
                (Some (Let (R, (Int 23),
                         (Binder ((PId "p"),
                            (Let (R, (Int 5),
                               (Binder ((PId "g"),
                                  (MLet (
                                     (Fork
                                        (Fun (
                                           (Pi (R, L,
                                              (App
                                                 [(Id ("DH_ch", I));
                                                   (Id ("p", I));
                                                   (Id ("g", I))]),
                                              (Binder ("",
                                                 (IO (Id ("unit", I)))))
                                              )),
                                           (Binder (None,
                                              [([(PId "c")],
                                                (Some (App
                                                         [(Id ("alice", I));
                                                           (Int 4);
                                                           (Id ("p", I));
                                                           (Id ("g", I));
                                                           (Id ("c", I))])))
                                                ]
                                              )),
                                           []))),
                                     (Binder ((PId "c"),
                                        (MLet (
                                           (Fork
                                              (Fun (
                                                 (Pi (R, L,
                                                    (Ch (true,
                                                       (Act (R, false,
                                                          (App
                                                             [(Id ("DH_hc", I
                                                                 ));
                                                               (Id ("p", I));
                                                               (Id ("g", I))]),
                                                          (Binder ("_", End))
                                                          ))
                                                       )),
                                                    (Binder ("",
                                                       (IO (Id ("unit", I)))
                                                       ))
                                                    )),
                                                 (Binder (None,
                                                    [([(PId "c0")],
                                                      (Some (MLet (
                                                               (Recv
                                                                  (Id ("c0",
                                                                    I))),
                                                               (Binder (
                                                                  (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "c"),
                                                                    (PId "c0")
                                                                    )),
                                                                  (BOpr (";",
                                                                    (Close
                                                                    (Id (
                                                                    "c0", I))),
                                                                    (App
                                                                    [(Id (
                                                                    "bob", I
                                                                    ));
                                                                    (Int 3);
                                                                    (Id ("p",
                                                                    I));
                                                                    (Id ("g",
                                                                    I));
                                                                    (Id ("c",
                                                                    I))])))
                                                                  ))
                                                               ))))
                                                      ]
                                                    )),
                                                 []))),
                                           (Binder ((PId "c0"),
                                              (MLet (
                                                 (App
                                                    [(Send (Id ("c0", I)));
                                                      (Id ("c", I))]),
                                                 (Binder ((PId "c0"),
                                                    (Close (Id ("c0", I)))))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("unit", I)), (Binder ("_", (IO (Id ("unit", I))))))))
       ));
    view = [E]};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("key_exchange", I)); (Id ("tt", I))]),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_494› : ∀ (A_495 : Type‹s_494›) -> A_495 -> ?_2[0;0] :=
  fun id_497 : ∀ (A_498 : Type‹s_494›) -> A_498 -> ?_1[0;0]
  | A_500 m_501 => m_501

#[logical]
inductive eq_1‹s_502› (A_503 : Type‹s_502›) (m_504 : A_503):
  A_503 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_504 m_504)

#[program]
def rwl_2‹s_506,r_507› :
  ∀ {A_508 : Type‹s_506›} ->
    ∀ {m_509 : A_508} ->
      ∀ {n_510 : A_508} ->
        ∀ {B_511 : A_508 -> Type‹r_507›} ->
          {(eq_1‹??_3› ?_5[0;0] m_509 n_510)} ->
            ((B_511) m_509) -> ((B_511) n_510)
:=
  fun rwl_515 :
    ∀ {A_516 : Type‹s_506›} ->
      ∀ {m_517 : A_516} ->
        ∀ {n_518 : A_516} ->
          ∀ {B_519 : A_516 -> Type‹r_507›} ->
            {(eq_1‹??_2› ?_4[0;0] m_517 n_518)} ->
              ((B_519) m_517) -> ((B_519) n_518)
  | A_523 m_524 n_525 B_526 refl_1 x_527 => x_527

#[program]
def rwr_3‹s_528,r_529› :
  ∀ {A_530 : Type‹s_528›} ->
    ∀ {m_531 : A_530} ->
      ∀ {n_532 : A_530} ->
        ∀ {B_533 : A_530 -> Type‹r_529›} ->
          {(eq_1‹??_5› ?_7[0;0] m_531 n_532)} ->
            ((B_533) n_532) -> ((B_533) m_531)
:=
  fun rwr_537 :
    ∀ {A_538 : Type‹s_528›} ->
      ∀ {m_539 : A_538} ->
        ∀ {n_540 : A_538} ->
          ∀ {B_541 : A_538 -> Type‹r_529›} ->
            {(eq_1‹??_4› ?_6[0;0] m_539 n_540)} ->
              ((B_541) n_540) -> ((B_541) m_539)
  | A_545 m_546 n_547 B_548 refl_1 x_549 => x_549

#[logical]
def congr_4‹s_550,r_551,t_552› :
  ∀ (A_553 : Type‹s_550›) ->
    ∀ (B_554 : Type‹r_551›) ->
      ∀ (m_555 : A_553) ->
        ∀ (n_556 : A_553) ->
          ∀ (f_557 : forall‹t_552›(__558 : A_553), B_554) ->
            (eq_1‹??_9› ?_12[0;0] m_555 n_556) ->
              (eq_1‹??_10› ?_13[0;0] ((f_557) m_555) ((f_557) n_556))
:=
  fun congr_560 :
    ∀ (A_561 : Type‹s_550›) ->
      ∀ (B_562 : Type‹r_551›) ->
        ∀ (m_563 : A_561) ->
          ∀ (n_564 : A_561) ->
            ∀ (f_565 : forall‹t_552›(__566 : A_561), B_562) ->
              (eq_1‹??_6› ?_8[0;0] m_563 n_564) ->
                (eq_1‹??_7› ?_9[0;0] ((f_565) m_563) ((f_565) n_564))
  | A_568 B_569 m_570 n_571 f_572 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_573 : U} ->
    ∀ {m_574 : A_573} ->
      ∀ (x_575 : (eq_1‹??_15› ?_20[0;0] m_574 m_574)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_575 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_576 :
    ∀ {A_577 : U} ->
      ∀ {m_578 : A_577} ->
        ∀ (x_579 : (eq_1‹??_11› ?_14[0;0] m_578 m_578)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_579 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_580 m_581 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_582,t_583› (A_584 : Type‹s_582›):
  A_584 -> Type‹t_583›
where
| just_2 (m_586 : A_584) : (sing_2‹??_18,??_19› ?_24[0;0] m_586)

#[logical]
def ssing_6‹s_587› :
  ∀ (A_588 : Type‹s_587›) -> A_588 -> Type‹s_587›
:=
  fun ssing_590 : ∀ (A_591 : Type‹s_587›) -> A_591 -> Type‹s_587›
  | A_593 m_594 => (sing_2‹s_587,s_587› A_593 m_594)

#[program]
def sing_elim_7‹s_595,t_596› :
  ∀ {A_597 : Type‹s_595›} ->
    ∀ {x_598 : A_597} -> (sing_2‹s_595,t_596› ?_26[0;0] x_598) -> A_597
:=
  fun sing_elim_600 :
    ∀ {A_601 : Type‹s_595›} ->
      ∀ {x_602 : A_601} ->
        (sing_2‹s_595,t_596› ?_25[0;0] x_602) -> A_601
  | A_604 x_605 (just_2 x_606) => x_606

#[logical]
def sing_uniq_8‹s_607,t_608› :
  ∀ (A_609 : Type‹s_607›) ->
    ∀ (x0_610 : A_609) ->
      ∀ (x_611 : (sing_2‹s_607,t_608› ?_33[0;0] x0_610)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_610
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_611))
:=
  fun sing_uniq_612 :
    ∀ (A_613 : Type‹s_607›) ->
      ∀ (x0_614 : A_613) ->
        ∀ (x_615 : (sing_2‹s_607,t_608› ?_27[0;0] x0_614)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_614
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_615))
  | A_616 x0_617 (just_2 _618) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_619 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_619 tt_3)
:=
  fun unit_eta_620 :
    ∀ (x_621 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_621 tt_3)
  | x_622 =>
    match x_622 in
      ∀ (x0_623 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_623 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_625 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_629 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _632 _633 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_636 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _639 _640 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_643 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _646 _647 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_648 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_651 : nat_5 -> nat_5 -> bool_4
  | zero_6 _654 => true_4
  | _655 zero_6 => false_5
  | (succ_7 x_656) (succ_7 y_657) => ((lte_651) x_656 y_657)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_660 : nat_5 -> nat_5 -> bool_4
  | x_663 y_664 => ((lte_14) (succ_7‹› x_663) y_664)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_666 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_668) => x_668

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_671 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_674 => y_674
  | (succ_7 x_675) y_676 => (succ_7‹› ((add_671) x_675 y_676))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_679 : nat_5 -> nat_5 -> nat_5
  | x_682 zero_6 => x_682
  | x_683 (succ_7 y_684) => ((sub_679) ((pred_16) x_683) y_684)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_687 : nat_5 -> nat_5 -> nat_5
  | zero_6 _690 => zero_6
  | (succ_7 x_691) y_692 => ((add_17) y_692 ((mul_687) x_691 y_692))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_695 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_698 y_699 =>
    match ((lt_15) x_698 y_699) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_701 :=
        fun loop_702 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_705 y_706 =>
          match ((sub_18) x_705 ((pred_16) y_706)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_708) => (succ_7‹› ((loop_702) x_708 y_706))
      in ((loop_701) x_698 y_699)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_711 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_714 y_715 => ((sub_18) x_714 ((mul_19) ((div_20) x_714 y_715) y_715))

#[program]
inductive list_6‹s_716,t_717› (A_718 : Type‹s_716›): Type‹t_717›
where
| nil_8 : (list_6‹??_31,??_32› A_718)
| cons_9
    (hd_719 : A_718) (tl_720 : (list_6‹??_33,t_717› A_718))
    : (list_6‹??_34,??_35› A_718)

#[program]
def free_list_22‹s_721,t_722› :
  ∀ {A_723 : Type‹s_721›} ->
    A_723 -> unit_3 -> (list_6‹??_37,t_722› A_723) -> unit_3
:=
  fun free_list_727 :
    ∀ {A_728 : Type‹s_721›} ->
      A_728 -> unit_3 -> (list_6‹??_36,t_722› A_728) -> unit_3
  | A_732 f_733 nil_8 => tt_3
  | A_734 f_735 (cons_9 x_736 xs_737) =>
    let __738 := ((f_735) x_736) in ((free_list_727) ?_52[0;0] f_735 xs_737)

#[program]
inductive exists0_7‹s_739,r_740› (A_741 : Type‹s_739›) (B_742 : 
A_741 -> Type‹r_740›): L where
| ex0_10
    {m_744 : A_741} (n_745 : ((B_742) m_744))
    : (exists0_7‹??_38,??_39› A_741 B_742)

#[program]
inductive exists1_8‹s_746,r_747› (A_748 : Type‹s_746›) (B_749 : 
A_748 -> Type‹r_747›): L where
| ex1_11
    (m_751 : A_748) (n_752 : ((B_749) m_751))
    : (exists1_8‹??_40,??_41› A_748 B_749)

#[logical]
def prod0_23‹s_753,r_754› :
  Type‹s_753› -> Type‹r_754› -> ?_56[0;0]
:=
  fun prod0_757 : Type‹s_753› -> Type‹r_754› -> ?_53[0;0]
  | A_760 B_761 =>
    (exists0_7‹??_42,??_43›
      A_760 fun _762 : ?_54[0;0] -> ?_55[0;0]
            | _764 => B_761)

#[logical]
def prod1_24‹s_765,r_766› :
  Type‹s_765› -> Type‹r_766› -> ?_60[0;0]
:=
  fun prod1_769 : Type‹s_765› -> Type‹r_766› -> ?_57[0;0]
  | A_772 B_773 =>
    (exists1_8‹??_44,??_45›
      A_772 fun _774 : ?_58[0;0] -> ?_59[0;0]
            | _776 => B_773)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_779 : int -> int -> int
  | x_782 y_783 =>
    let loop_784 :=
      fun loop_785 : int -> int -> int
      | acc_788 y_789 =>
        match (__lte__ y_789 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_788
        | false_5 => ((loop_785) (__mul__ x_782 acc_788) (__sub__ y_789 1))
    in ((loop_784) 1 y_783)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_794 : int -> int -> int -> int
  | x_798 y_799 m_800 =>
    let loop_801 :=
      fun loop_802 : int -> int -> int
      | acc_805 y_806 =>
        match (__lte__ y_806 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_805
        | false_5 =>
          ((loop_802)
            (__mod__ (__mul__ x_798 acc_805) m_800) (__sub__ y_806 1))
    in ((loop_801) 1 y_799)

#[program]
def ord_27‹› : char -> int :=
  fun ord_809 : char -> int
  | c_811 => (__ord__ c_811)

#[program]
def chr_28‹› : int -> char :=
  fun chr_813 : int -> char
  | i_815 => (__chr__ i_815)

#[program]
def str_29‹› : char -> string :=
  fun str_817 : char -> string
  | c_819 => (__push__ "" c_819)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_821 : string -> int
  | s_823 => (__size__ s_823)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_825 : int -> string
  | i_827 =>
    let aux_828 :=
      fun aux_829 : int -> string
      | i_831 =>
        match (__lte__ 10 i_831) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_833 := (__mod__ i_831 10) in
          let i_834 := (__div__ i_831 10) in
          (__push__ ((aux_829) i_834)
            ((chr_28) (__add__ r_833 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_831 ((ord_27) 0))))
    in
    match (__lt__ 0 i_827) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_828) i_827)
    | false_5 => (__cat__ "~" ((aux_828) (__neg__ i_827)))

#[logical]
def DH_32‹› : int -> int -> proto :=
  fun DH_838 : int -> int -> proto
  | p_841 g_842 =>
    ⇑{a_843 : int} ⇒
      ⇑(A_844 : int) ⇒
        ⇑{__845 :
          (eq_1‹??_46› ?_69[0;0] A_844 ((powm_26) g_842 a_843 p_841))} ⇒
          ⇓{b_846 : int} ⇒
            ⇓(B_847 : int) ⇒
              ⇓{__848 :
                (eq_1‹??_47›
                  ?_70[0;0] B_847 ((powm_26) g_842 b_846 p_841))} ⇒
                •

#[logical]
def DH_ch_33‹› : int -> int -> ?_72[0;0] :=
  fun DH_ch_851 : int -> int -> ?_71[0;0]
  | p_854 g_855 => ch⟨((DH_32) p_854 g_855)⟩

#[logical]
def DH_hc_34‹› : int -> int -> ?_74[0;0] :=
  fun DH_hc_858 : int -> int -> ?_73[0;0]
  | p_861 g_862 => hc⟨((DH_32) p_861 g_862)⟩

#[program]
def alice_35‹› :
  int ->
    ∀ (p_864 : int) ->
      ∀ (g_865 : int) -> ((DH_ch_33) p_864 g_865) -> IO unit_3
:=
  fun alice_867 :
    int ->
      ∀ (p_869 : int) ->
        ∀ (g_870 : int) -> ((DH_ch_33) p_869 g_870) -> IO unit_3
  | a_872 p_873 g_874 c_875 =>
    let* c_876 := ((send c_875) a_872) in
    let* c_877 := ((send c_876) ((powm_26) g_874 a_872 p_873)) in
    let* c_878 := ((send c_877) (refl_1‹??_48› ?_75[0;0] ?_76[0;0])) in
    let* _879 := recv c_878 in
    match _879 in ?_82[0;0] -o ?_81[0;0] with
    | (ex0_10 b_881 c_882) =>
      let* _883 := recv c_882 in
      match _883 in ?_80[0;0] -o ?_79[0;0] with
      | (ex1_11 B_885 c_886) =>
        let* _887 := recv c_886 in
        match _887 in ?_78[0;0] -o ?_77[0;0] with
        | (ex0_10 pf_889 c_890) => close c_890

#[program]
def bob_36‹› :
  int ->
    ∀ (p_892 : int) ->
      ∀ (g_893 : int) -> ((DH_hc_34) p_892 g_893) -> IO unit_3
:=
  fun bob_895 :
    int ->
      ∀ (p_897 : int) ->
        ∀ (g_898 : int) -> ((DH_hc_34) p_897 g_898) -> IO unit_3
  | b_900 p_901 g_902 c_903 =>
    let* _904 := recv c_903 in
    match _904 in ?_90[0;0] -o ?_89[0;0] with
    | (ex0_10 a_906 c_907) =>
      let* _908 := recv c_907 in
      match _908 in ?_88[0;0] -o ?_87[0;0] with
      | (ex1_11 A_910 c_911) =>
        let* _912 := recv c_911 in
        match _912 in ?_86[0;0] -o ?_85[0;0] with
        | (ex0_10 pf_914 c_915) =>
          let* c_916 := ((send c_915) b_900) in
          let* c_917 := ((send c_916) ((powm_26) g_902 b_900 p_901)) in
          let* c_918 :=
            ((send c_917) (refl_1‹??_49› ?_83[0;0] ?_84[0;0]))
          in close c_918

#[program]
def key_exchange_37‹› : unit_3 -> IO unit_3 :=
  fun key_exchange_920 : unit_3 -> IO unit_3
  | _922 =>
    let p_923 := 23 in
    let g_924 := 5 in
    let* c_925 :=
      fork
        fun _926 : ((DH_ch_33) p_923 g_924) -o IO unit_3
        | c_928 => ((alice_35) 4 p_923 g_924 c_928)
    in
    let* c0_929 :=
      fork
        fun _930 :
          ch⟨⇓(__932 : ((DH_hc_34) p_923 g_924)) ⇒ •⟩ -o IO unit_3
        | c0_933 =>
          let* _934 := recv c0_933 in
          match _934 in ?_92[0;0] -o ?_91[0;0] with
          | (ex1_11 c_936 c0_937) =>
            let* __938 := close c0_937 in ((bob_36) 3 p_923 g_924 c_936)
    in let* c0_939 := ((send c0_929) c_925) in close c0_939

#[program]
def main_38‹› : IO unit_3 := ((key_exchange_37) tt_3)

-----------------------------------------

#[program]
def id_1‹s_8607› : ∀ (A_8608 : Type‹s_8607›) -> A_8608 -> A_8608 :=
  fun id_8610 : ∀ (A_8611 : Type‹s_8607›) -> A_8611 -> A_8611
  | A_8613 m_8614 => m_8614

#[logical]
inductive eq_1‹s_8615› (A_8616 : Type‹s_8615›) (m_8617 : A_8616):
  A_8616 -> U
where
| refl_1 : (eq_1‹s_8615› A_8616 m_8617 m_8617)

#[program]
def rwl_2‹s_8619,r_8620› :
  ∀ {A_8621 : Type‹s_8619›} ->
    ∀ {m_8622 : A_8621} ->
      ∀ {n_8623 : A_8621} ->
        ∀ {B_8624 : A_8621 -> Type‹r_8620›} ->
          {(eq_1‹s_8619› A_8621 m_8622 n_8623)} ->
            ((B_8624) m_8622) -> ((B_8624) n_8623)
:=
  fun rwl_8628 :
    ∀ {A_8629 : Type‹s_8619›} ->
      ∀ {m_8630 : A_8629} ->
        ∀ {n_8631 : A_8629} ->
          ∀ {B_8632 : A_8629 -> Type‹r_8620›} ->
            {(eq_1‹s_8619› A_8629 m_8630 n_8631)} ->
              ((B_8632) m_8630) -> ((B_8632) n_8631)
  | A_8636 m_8637 n_8638 B_8639 refl_1 __8640 => __8640

#[program]
def rwr_3‹s_8641,r_8642› :
  ∀ {A_8643 : Type‹s_8641›} ->
    ∀ {m_8644 : A_8643} ->
      ∀ {n_8645 : A_8643} ->
        ∀ {B_8646 : A_8643 -> Type‹r_8642›} ->
          {(eq_1‹s_8641› A_8643 m_8644 n_8645)} ->
            ((B_8646) n_8645) -> ((B_8646) m_8644)
:=
  fun rwr_8650 :
    ∀ {A_8651 : Type‹s_8641›} ->
      ∀ {m_8652 : A_8651} ->
        ∀ {n_8653 : A_8651} ->
          ∀ {B_8654 : A_8651 -> Type‹r_8642›} ->
            {(eq_1‹s_8641› A_8651 m_8652 n_8653)} ->
              ((B_8654) n_8653) -> ((B_8654) m_8652)
  | A_8658 m_8659 n_8660 B_8661 refl_1 __8662 => __8662

#[logical]
def congr_4‹s_8663,r_8664,t_8665› :
  ∀ (A_8666 : Type‹s_8663›) ->
    ∀ (B_8667 : Type‹r_8664›) ->
      ∀ (m_8668 : A_8666) ->
        ∀ (n_8669 : A_8666) ->
          ∀ (f_8670 : forall‹t_8665›(__8671 : A_8666), B_8667) ->
            (eq_1‹s_8663› A_8666 m_8668 n_8669) ->
              (eq_1‹r_8664› B_8667 ((f_8670) m_8668) ((f_8670) n_8669))
:=
  fun congr_8673 :
    ∀ (A_8674 : Type‹s_8663›) ->
      ∀ (B_8675 : Type‹r_8664›) ->
        ∀ (m_8676 : A_8674) ->
          ∀ (n_8677 : A_8674) ->
            ∀ (f_8678 : forall‹t_8665›(__8679 : A_8674), B_8675) ->
              (eq_1‹s_8663› A_8674 m_8676 n_8677) ->
                (eq_1‹r_8664› B_8675 ((f_8678) m_8676) ((f_8678) n_8677))
  | A_8681 B_8682 m_8683 n_8684 f_8685 refl_1 =>
    (refl_1‹r_8664› B_8682 ((f_8685) n_8684))

#[logical]
def axiom_K_5‹› :
  ∀ {A_8686 : U} ->
    ∀ {m_8687 : A_8686} ->
      ∀ (x_8688 : (eq_1‹U› A_8686 m_8687 m_8687)) ->
        (eq_1‹U›
          (eq_1‹U› A_8686 m_8687 m_8687) x_8688
          (refl_1‹U› A_8686 m_8687))
:=
  fun axiom_K_8689 :
    ∀ {A_8690 : U} ->
      ∀ {m_8691 : A_8690} ->
        ∀ (x_8692 : (eq_1‹U› A_8690 m_8691 m_8691)) ->
          (eq_1‹U›
            (eq_1‹U› A_8690 m_8691 m_8691) x_8692
            (refl_1‹U› A_8690 m_8691))
  | A_8693 m_8694 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_8693 m_8694 m_8694) (refl_1‹U› A_8693 m_8694))

#[program]
inductive sing_2‹s_8695,t_8696› (A_8697 : Type‹s_8695›):
  A_8697 -> Type‹t_8696›
where
| just_2 (m_8699 : A_8697) : (sing_2‹s_8695,t_8696› A_8697 m_8699)

#[logical]
def ssing_6‹s_8700› :
  ∀ (A_8701 : Type‹s_8700›) -> A_8701 -> Type‹s_8700›
:=
  fun ssing_8703 :
    ∀ (A_8704 : Type‹s_8700›) -> A_8704 -> Type‹s_8700›
  | A_8706 m_8707 => (sing_2‹s_8700,s_8700› A_8706 m_8707)

#[program]
def sing_elim_7‹s_8708,t_8709› :
  ∀ {A_8710 : Type‹s_8708›} ->
    ∀ {x_8711 : A_8710} ->
      (sing_2‹s_8708,t_8709› A_8710 x_8711) -> A_8710
:=
  fun sing_elim_8713 :
    ∀ {A_8714 : Type‹s_8708›} ->
      ∀ {x_8715 : A_8714} ->
        (sing_2‹s_8708,t_8709› A_8714 x_8715) -> A_8714
  | A_8717 x_8718 (just_2 m_8719) => m_8719

#[logical]
def sing_uniq_8‹s_8720,t_8721› :
  ∀ (A_8722 : Type‹s_8720›) ->
    ∀ (x0_8723 : A_8722) ->
      ∀ (x_8724 : (sing_2‹s_8720,t_8721› A_8722 x0_8723)) ->
        (eq_1‹s_8720›
          A_8722 x0_8723
          ((sing_elim_7‹s_8720,t_8721›) A_8722 x0_8723 x_8724))
:=
  fun sing_uniq_8725 :
    ∀ (A_8726 : Type‹s_8720›) ->
      ∀ (x0_8727 : A_8726) ->
        ∀ (x_8728 : (sing_2‹s_8720,t_8721› A_8726 x0_8727)) ->
          (eq_1‹s_8720›
            A_8726 x0_8727
            ((sing_elim_7‹s_8720,t_8721›) A_8726 x0_8727 x_8728))
  | A_8729 x0_8730 (just_2 m_8731) => (refl_1‹s_8720› A_8729 m_8731)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_8732 : unit_3) -> (eq_1‹U› unit_3 x_8732 tt_3)
:=
  fun unit_eta_8733 :
    ∀ (x_8734 : unit_3) -> (eq_1‹U› unit_3 x_8734 tt_3)
  | x_8735 =>
    match x_8735 in
      ∀ (x0_8736 : unit_3) -o (eq_1‹U› unit_3 x0_8736 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_8738 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_8742 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __8745 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_8748 : bool_4 -> bool_4 -> bool_4
  | true_4 __8751 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_8754 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_8757 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_8760 : nat_5 -> nat_5 -> bool_4
  | zero_6 __8763 => true_4
  | (succ_7 n_8764) zero_6 => false_5
  | (succ_7 n_8765) (succ_7 n_8766) => ((lte_8760) n_8765 n_8766)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_8769 : nat_5 -> nat_5 -> bool_4
  | x_8772 y_8773 => ((lte_14) (succ_7‹› x_8772) y_8773)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_8775 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_8777) => n_8777

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_8780 : nat_5 -> nat_5 -> nat_5
  | zero_6 __8783 => __8783
  | (succ_7 n_8784) __8785 => (succ_7‹› ((add_8780) n_8784 __8785))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_8788 : nat_5 -> nat_5 -> nat_5
  | __8791 zero_6 => __8791
  | __8792 (succ_7 n_8793) => ((sub_8788) ((pred_16) __8792) n_8793)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_8796 : nat_5 -> nat_5 -> nat_5
  | zero_6 __8799 => zero_6
  | (succ_7 n_8800) __8801 => ((add_17) __8801 ((mul_8796) n_8800 __8801))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_8804 : nat_5 -> nat_5 -> nat_5
  | x_8807 y_8808 =>
    match ((lt_15) x_8807 y_8808) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_8810 :=
        fun loop_8811 : nat_5 -> nat_5 -> nat_5
        | x_8814 y_8815 =>
          match ((sub_18) x_8814 ((pred_16) y_8815)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_8817) => (succ_7‹› ((loop_8811) n_8817 y_8815))
      in ((loop_8810) x_8807 y_8808)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_8820 : nat_5 -> nat_5 -> nat_5
  | x_8823 y_8824 =>
    ((sub_18) x_8823 ((mul_19) ((div_20) x_8823 y_8824) y_8824))

#[program]
inductive list_6‹s_8825,t_8826› (A_8827 : Type‹s_8825›):
  Type‹t_8826›
where
| nil_8 : (list_6‹s_8825,t_8826› A_8827)
| cons_9
    (hd_8828 : A_8827) (tl_8829 : (list_6‹s_8825,t_8826› A_8827))
    : (list_6‹s_8825,t_8826› A_8827)

#[program]
def free_list_22‹s_8830,t_8831› :
  ∀ {A_8832 : Type‹s_8830›} ->
    A_8832 -> unit_3 -> (list_6‹s_8830,t_8831› A_8832) -> unit_3
:=
  fun free_list_8836 :
    ∀ {A_8837 : Type‹s_8830›} ->
      A_8837 -> unit_3 -> (list_6‹s_8830,t_8831› A_8837) -> unit_3
  | A_8841 f_8842 nil_8 => tt_3
  | A_8843 f_8844 (cons_9 hd_8845 tl_8846) =>
    let __8847 := ((f_8844) hd_8845) in
    ((free_list_8836) A_8843 f_8844 tl_8846)

#[program]
inductive exists0_7‹s_8848,r_8849› (A_8850 : Type‹s_8848›) (B_8851 : 
A_8850 -> Type‹r_8849›): L where
| ex0_10
    {m_8853 : A_8850} (n_8854 : ((B_8851) m_8853))
    : (exists0_7‹s_8848,r_8849› A_8850 B_8851)

#[program]
inductive exists1_8‹s_8855,r_8856› (A_8857 : Type‹s_8855›) (B_8858 : 
A_8857 -> Type‹r_8856›): L where
| ex1_11
    (m_8860 : A_8857) (n_8861 : ((B_8858) m_8860))
    : (exists1_8‹s_8855,r_8856› A_8857 B_8858)

#[logical]
def prod0_23‹s_8862,r_8863› : Type‹s_8862› -> Type‹r_8863› -> L
:=
  fun prod0_8866 : Type‹s_8862› -> Type‹r_8863› -> L
  | A_8869 B_8870 =>
    (exists0_7‹s_8862,r_8863›
      A_8869 fun _8871 : A_8869 -> Type‹r_8863›
             | __8873 => B_8870)

#[logical]
def prod1_24‹s_8874,r_8875› : Type‹s_8874› -> Type‹r_8875› -> L
:=
  fun prod1_8878 : Type‹s_8874› -> Type‹r_8875› -> L
  | A_8881 B_8882 =>
    (exists1_8‹s_8874,r_8875›
      A_8881 fun _8883 : A_8881 -> Type‹r_8875›
             | __8885 => B_8882)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_8888 : int -> int -> int
  | x_8891 y_8892 =>
    let loop_8893 :=
      fun loop_8894 : int -> int -> int
      | acc_8897 y_8898 =>
        match (__lte__ y_8898 0) in bool_4 -o int with
        | true_4 => acc_8897
        | false_5 =>
          ((loop_8894) (__mul__ x_8891 acc_8897) (__sub__ y_8898 1))
    in ((loop_8893) 1 y_8892)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_8903 : int -> int -> int -> int
  | x_8907 y_8908 m_8909 =>
    let loop_8910 :=
      fun loop_8911 : int -> int -> int
      | acc_8914 y_8915 =>
        match (__lte__ y_8915 0) in bool_4 -o int with
        | true_4 => acc_8914
        | false_5 =>
          ((loop_8911)
            (__mod__ (__mul__ x_8907 acc_8914) m_8909) (__sub__ y_8915 1))
    in ((loop_8910) 1 y_8908)

#[program]
def ord_27‹› : char -> int :=
  fun ord_8918 : char -> int
  | c_8920 => (__ord__ c_8920)

#[program]
def chr_28‹› : int -> char :=
  fun chr_8922 : int -> char
  | i_8924 => (__chr__ i_8924)

#[program]
def str_29‹› : char -> string :=
  fun str_8926 : char -> string
  | c_8928 => (__push__ "" c_8928)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_8930 : string -> int
  | s_8932 => (__size__ s_8932)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_8934 : int -> string
  | i_8936 =>
    let aux_8937 :=
      fun aux_8938 : int -> string
      | i_8940 =>
        match (__lte__ 10 i_8940) in bool_4 -o string with
        | true_4 =>
          let r_8942 := (__mod__ i_8940 10) in
          let i_8943 := (__div__ i_8940 10) in
          (__push__ ((aux_8938) i_8943)
            ((chr_28) (__add__ r_8942 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_8940 ((ord_27) 0))))
    in
    match (__lt__ 0 i_8936) in bool_4 -o string with
    | true_4 => ((aux_8937) i_8936)
    | false_5 => (__cat__ "~" ((aux_8937) (__neg__ i_8936)))

#[logical]
def DH_32‹› : int -> int -> proto :=
  fun DH_8947 : int -> int -> proto
  | p_8950 g_8951 =>
    ⇑{a_8952 : int} ⇒
      ⇑(A_8953 : int) ⇒
        ⇑{__8954 :
          (eq_1‹U› int A_8953 ((powm_26) g_8951 a_8952 p_8950))} ⇒
          ⇓{b_8955 : int} ⇒
            ⇓(B_8956 : int) ⇒
              ⇓{__8957 :
                (eq_1‹U› int B_8956 ((powm_26) g_8951 b_8955 p_8950))} ⇒
                •

#[logical]
def DH_ch_33‹› : int -> int -> L :=
  fun DH_ch_8960 : int -> int -> L
  | p_8963 g_8964 => ch⟨((DH_32) p_8963 g_8964)⟩

#[logical]
def DH_hc_34‹› : int -> int -> L :=
  fun DH_hc_8967 : int -> int -> L
  | p_8970 g_8971 => hc⟨((DH_32) p_8970 g_8971)⟩

#[program]
def alice_35‹› :
  int ->
    ∀ (p_8973 : int) ->
      ∀ (g_8974 : int) -> ((DH_ch_33) p_8973 g_8974) -> IO unit_3
:=
  fun alice_8976 :
    int ->
      ∀ (p_8978 : int) ->
        ∀ (g_8979 : int) -> ((DH_ch_33) p_8978 g_8979) -> IO unit_3
  | a_8981 p_8982 g_8983 c_8984 =>
    let* c_8985 := ((send c_8984) a_8981) in
    let* c_8986 := ((send c_8985) ((powm_26) g_8983 a_8981 p_8982)) in
    let* c_8987 :=
      ((send c_8986) (refl_1‹U› int ((powm_26) g_8983 a_8981 p_8982)))
    in
    let* _8988 := recv c_8987 in
    match _8988 in
      (exists0_7‹U,L›
        int
        fun _8990 : int -> L
        | b_8992 =>
          ch⟨⇓(B_8993 : int) ⇒
                 ⇓{__8994 :
                   (eq_1‹U› int B_8993 ((powm_26) g_8983 b_8992 p_8982))} ⇒
                   •⟩) -o
        IO unit_3
    with
    | (ex0_10 m_8995 n_8996) =>
      let* _8997 := recv n_8996 in
      match _8997 in
        (exists1_8‹U,L›
          int
          fun _8999 : int -> L
          | B_9001 =>
            ch⟨⇓{__9002 :
                   (eq_1‹U› int B_9001 ((powm_26) g_8983 m_8995 p_8982))} ⇒
                   •⟩) -o
          IO unit_3
      with
      | (ex1_11 m_9003 n_9004) =>
        let* _9005 := recv n_9004 in
        match _9005 in
          (exists0_7‹U,L›
            (eq_1‹U› int m_9003 ((powm_26) g_8983 m_8995 p_8982))
            fun _9007 :
              (eq_1‹U› int m_9003 ((powm_26) g_8983 m_8995 p_8982)) -> L
            | __9009 => ch⟨•⟩) -o IO unit_3
        with
        | (ex0_10 m_9010 n_9011) => close n_9011

#[program]
def bob_36‹› :
  int ->
    ∀ (p_9013 : int) ->
      ∀ (g_9014 : int) -> ((DH_hc_34) p_9013 g_9014) -> IO unit_3
:=
  fun bob_9016 :
    int ->
      ∀ (p_9018 : int) ->
        ∀ (g_9019 : int) -> ((DH_hc_34) p_9018 g_9019) -> IO unit_3
  | b_9021 p_9022 g_9023 c_9024 =>
    let* _9025 := recv c_9024 in
    match _9025 in
      (exists0_7‹U,L›
        int
        fun _9027 : int -> L
        | a_9029 =>
          hc⟨⇑(A_9030 : int) ⇒
                 ⇑{__9031 :
                   (eq_1‹U› int A_9030 ((powm_26) g_9023 a_9029 p_9022))} ⇒
                   ⇓{b_9032 : int} ⇒
                     ⇓(B_9033 : int) ⇒
                       ⇓{__9034 :
                         (eq_1‹U›
                           int B_9033 ((powm_26) g_9023 b_9032 p_9022))} ⇒
                         •⟩) -o
        IO unit_3
    with
    | (ex0_10 m_9035 n_9036) =>
      let* _9037 := recv n_9036 in
      match _9037 in
        (exists1_8‹U,L›
          int
          fun _9039 : int -> L
          | A_9041 =>
            hc⟨⇑{__9042 :
                   (eq_1‹U› int A_9041 ((powm_26) g_9023 m_9035 p_9022))} ⇒
                   ⇓{b_9043 : int} ⇒
                     ⇓(B_9044 : int) ⇒
                       ⇓{__9045 :
                         (eq_1‹U›
                           int B_9044 ((powm_26) g_9023 b_9043 p_9022))} ⇒
                         •⟩) -o
          IO unit_3
      with
      | (ex1_11 m_9046 n_9047) =>
        let* _9048 := recv n_9047 in
        match _9048 in
          (exists0_7‹U,L›
            (eq_1‹U› int m_9046 ((powm_26) g_9023 m_9035 p_9022))
            fun _9050 :
              (eq_1‹U› int m_9046 ((powm_26) g_9023 m_9035 p_9022)) -> L
            | __9052 =>
              hc⟨⇓{b_9053 : int} ⇒
                     ⇓(B_9054 : int) ⇒
                       ⇓{__9055 :
                         (eq_1‹U›
                           int B_9054 ((powm_26) g_9023 b_9053 p_9022))} ⇒
                         •⟩) -o
            IO unit_3
        with
        | (ex0_10 m_9056 n_9057) =>
          let* c_9058 := ((send n_9057) b_9021) in
          let* c_9059 := ((send c_9058) ((powm_26) g_9023 b_9021 p_9022)) in
          let* c_9060 :=
            ((send c_9059)
              (refl_1‹U› int ((powm_26) g_9023 b_9021 p_9022)))
          in close c_9060

#[program]
def key_exchange_37‹› : unit_3 -> IO unit_3 :=
  fun key_exchange_9062 : unit_3 -> IO unit_3
  | __9064 =>
    let p_9065 := 23 in
    let g_9066 := 5 in
    let* c_9067 :=
      fork
        fun _9068 : ((DH_ch_33) p_9065 g_9066) -o IO unit_3
        | _9070 => ((alice_35) 4 p_9065 g_9066 _9070)
    in
    let* c0_9071 :=
      fork
        fun _9072 :
          ch⟨⇓(__9074 : ((DH_hc_34) p_9065 g_9066)) ⇒ •⟩ -o
            IO unit_3
        | _9075 =>
          let* _9076 := recv _9075 in
          match _9076 in
            (exists1_8‹L,L›
              ((DH_hc_34) p_9065 g_9066)
              fun _9078 : ((DH_hc_34) p_9065 g_9066) -> L
              | __9080 => ch⟨•⟩) -o IO unit_3
          with
          | (ex1_11 m_9081 n_9082) =>
            let* __9083 := close n_9082 in ((bob_36) 3 p_9065 g_9066 m_9081)
    in let* c0_9084 := ((send c0_9071) c_9067) in close c0_9084

#[program]
def main_38‹› : IO unit_3 := ((key_exchange_37) tt_3)

-----------------------------------------

#[program]
def idU_40 := fun id_16846 (A_16847) -> (m_16848) ->
                m_16848

#[program]
def idL_39 := fun id_16849 (A_16850) -> (m_16851) ->
                m_16851

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_44 :=
  fun rwl_16852 {A_16853} -> {m_16854} -> {n_16855} -> {B_16856} ->
  {__16857} -> (__16858) ->
    match {NULL} with
    | reflU_13  => __16858
    end

#[program]
def rwlUL_43 :=
  fun rwl_16859 {A_16860} -> {m_16861} -> {n_16862} -> {B_16863} ->
  {__16864} -> (__16865) ->
    match {NULL} with
    | reflU_13  => __16865
    end

#[program]
def rwlLU_42 :=
  fun rwl_16866 {A_16867} -> {m_16868} -> {n_16869} -> {B_16870} ->
  {__16871} -> (__16872) ->
    match {NULL} with
    | reflL_12  => __16872
    end

#[program]
def rwlLL_41 :=
  fun rwl_16873 {A_16874} -> {m_16875} -> {n_16876} -> {B_16877} ->
  {__16878} -> (__16879) ->
    match {NULL} with
    | reflL_12  => __16879
    end

#[program]
def rwrUU_48 :=
  fun rwr_16880 {A_16881} -> {m_16882} -> {n_16883} -> {B_16884} ->
  {__16885} -> (__16886) ->
    match {NULL} with
    | reflU_13  => __16886
    end

#[program]
def rwrUL_47 :=
  fun rwr_16887 {A_16888} -> {m_16889} -> {n_16890} -> {B_16891} ->
  {__16892} -> (__16893) ->
    match {NULL} with
    | reflU_13  => __16893
    end

#[program]
def rwrLU_46 :=
  fun rwr_16894 {A_16895} -> {m_16896} -> {n_16897} -> {B_16898} ->
  {__16899} -> (__16900) ->
    match {NULL} with
    | reflL_12  => __16900
    end

#[program]
def rwrLL_45 :=
  fun rwr_16901 {A_16902} -> {m_16903} -> {n_16904} -> {B_16905} ->
  {__16906} -> (__16907) ->
    match {NULL} with
    | reflL_12  => __16907
    end

#[logical]
def congrUUU_56 := NULL

#[logical]
def congrUUL_55 := NULL

#[logical]
def congrULU_54 := NULL

#[logical]
def congrULL_53 := NULL

#[logical]
def congrLUU_52 := NULL

#[logical]
def congrLUL_51 := NULL

#[logical]
def congrLLU_50 := NULL

#[logical]
def congrLLL_49 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_58 := NULL

#[logical]
def ssingL_57 := NULL

#[program]
def sing_elimUU_62 :=
  fun sing_elim_16908 {A_16909} -> {x_16910} -> (__16911) ->
    match __16911 with
    | justUU_17 m_16912 => m_16912
    end

#[program]
def sing_elimUL_61 :=
  fun sing_elim_16913 {A_16914} -> {x_16915} -> (__16916) ->
    match __16916 with
    | justUL_16 m_16917 => m_16917
    end

#[program]
def sing_elimLU_60 :=
  fun sing_elim_16918 {A_16919} -> {x_16920} -> (__16921) ->
    match __16921 with
    
    end

#[program]
def sing_elimLL_59 :=
  fun sing_elim_16922 {A_16923} -> {x_16924} -> (__16925) ->
    match __16925 with
    | justLL_14 m_16926 => m_16926
    end

#[logical]
def sing_uniqUU_66 := NULL

#[logical]
def sing_uniqUL_65 := NULL

#[logical]
def sing_uniqLU_64 := NULL

#[logical]
def sing_uniqLL_63 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_16927 (__16928) ->
    match __16928 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_16929 (__16930) -> (__16931) ->
    match __16930 with
    | true_4  =>
      match __16931 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_16932 (__16933) -> (__16934) ->
    match __16933 with
    | true_4  => true_4
    | false_5  =>
      match __16934 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_16935 (__16936) -> (__16937) -o
    match __16936 with
    | true_4  =>
      match __16937 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __16937 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_16938 (__16939) -> (__16940) ->
    match __16939 with
    | zero_6  => true_4
    | succ_7 n_16941 =>
      match __16940 with
      | zero_6  => false_5 | succ_7 n_16942 => ((lte_16938) n_16941 n_16942)
      end
    end

#[program]
def lt_15 :=
  fun lt_16943 (x_16944) -> (y_16945) ->
    ((lte_14) (succ_7 x_16944) y_16945)

#[program]
def pred_16 :=
  fun pred_16946 (__16947) ->
    match __16947 with
    | zero_6  => zero_6 | succ_7 n_16948 => n_16948
    end

#[program]
def add_17 :=
  fun add_16949 (__16950) -> (__16951) ->
    match __16950 with
    | zero_6  => __16951
    | succ_7 n_16952 => (succ_7 ((add_16949) n_16952 __16951))
    end

#[program]
def sub_18 :=
  fun sub_16953 (__16954) -> (__16955) ->
    match __16955 with
    | zero_6  => __16954
    | succ_7 n_16956 => ((sub_16953) ((pred_16) __16954) n_16956)
    end

#[program]
def mul_19 :=
  fun mul_16957 (__16958) -> (__16959) ->
    match __16958 with
    | zero_6  => zero_6
    | succ_7 n_16960 => ((add_17) __16959 ((mul_16957) n_16960 __16959))
    end

#[program]
def div_20 :=
  fun div_16961 (x_16962) -> (y_16963) ->
    match ((lt_15) x_16962 y_16963) with
    | true_4  => zero_6
    | false_5  =>
      let loop_16964 :=
        fun loop_16965 (x_16966) -> (y_16967) ->
          match ((sub_18) x_16966 ((pred_16) y_16967)) with
          | zero_6  => zero_6
          | succ_7 n_16968 => (succ_7 ((loop_16965) n_16968 y_16967))
          end
      in ((loop_16964) x_16962 y_16963)
    end

#[program]
def rem_21 :=
  fun rem_16969 (x_16970) -> (y_16971) ->
    ((sub_18) x_16970 ((mul_19) ((div_20) x_16970 y_16971) y_16971))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_70 :=
  fun free_list_16972 {A_16973} -> (f_16974) -> (__16975) ->
    match __16975 with
    | nilUU_24  => tt_3
    | consUU_25 hd_16976 tl_16977 =>
      let __16978 := ((f_16974) hd_16976) in
      ((free_list_16972) NULL f_16974 tl_16977)
    end

#[program]
def free_listUL_69 :=
  fun free_list_16979 {A_16980} -> (f_16981) -> (__16982) ->
    match __16982 with
    | nilUL_22  => tt_3
    | consUL_23 hd_16983 tl_16984 =>
      let __16985 := ((f_16981) hd_16983) in
      ((free_list_16979) NULL f_16981 tl_16984)
    end

#[program]
def free_listLL_67 :=
  fun free_list_16986 {A_16987} -> (f_16988) -> (__16989) ->
    match __16989 with
    | nilLL_18  => tt_3
    | consLL_19 hd_16990 tl_16991 =>
      let __16992 := ((f_16988) hd_16990) in
      ((free_list_16986) NULL f_16988 tl_16991)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_74 := NULL

#[logical]
def prod0UL_73 := NULL

#[logical]
def prod0LU_72 := NULL

#[logical]
def prod0LL_71 := NULL

#[logical]
def prod1UU_78 := NULL

#[logical]
def prod1UL_77 := NULL

#[logical]
def prod1LU_76 := NULL

#[logical]
def prod1LL_75 := NULL

#[program]
def pow_25 :=
  fun pow_16993 (x_16994) -> (y_16995) ->
    let loop_16996 :=
      fun loop_16997 (acc_16998) -> (y_16999) ->
        match (__lte__ y_16999 0) with
        | true_4  => acc_16998
        | false_5  =>
          ((loop_16997) (__mul__ x_16994 acc_16998) (__sub__ y_16999 1))
        end
    in ((loop_16996) 1 y_16995)

#[program]
def powm_26 :=
  fun powm_17000 (x_17001) -> (y_17002) -> (m_17003) ->
    let loop_17004 :=
      fun loop_17005 (acc_17006) -> (y_17007) ->
        match (__lte__ y_17007 0) with
        | true_4  => acc_17006
        | false_5  =>
          ((loop_17005)
            (__mod__ (__mul__ x_17001 acc_17006) m_17003) (__sub__ y_17007 1))
        end
    in ((loop_17004) 1 y_17002)

#[program]
def ord_27 := fun ord_17008 (c_17009) ->
                (__ord__ c_17009)

#[program]
def chr_28 := fun chr_17010 (i_17011) ->
                (__chr__ i_17011)

#[program]
def str_29 := fun str_17012 (c_17013) ->
                (__push__ "" c_17013)

#[program]
def strlen_30 := fun strlen_17014 (s_17015) ->
                   (__size__ s_17015)

#[program]
def string_of_int_31 :=
  fun string_of_int_17016 (i_17017) ->
    let aux_17018 :=
      fun aux_17019 (i_17020) ->
        match (__lte__ 10 i_17020) with
        | true_4  =>
          let r_17021 := (__mod__ i_17020 10) in
          let i_17022 := (__div__ i_17020 10) in
          (__push__ ((aux_17019) i_17022)
            ((chr_28) (__add__ r_17021 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_17020 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_17017) with
    | true_4  => ((aux_17018) i_17017)
    | false_5  => (__cat__ "~" ((aux_17018) (__neg__ i_17017)))
    end

#[logical]
def DH_32 := NULL

#[logical]
def DH_ch_33 := NULL

#[logical]
def DH_hc_34 := NULL

#[program]
def alice_35 :=
  fun alice_17023 (a_17024) -> (p_17025) -> (g_17026) -> (c_17027) ->
    let* c_17028 := ((send[N,U] c_17027) NULL) in
    let* c_17029 := ((send[R,U] c_17028) ((powm_26) g_17026 a_17024 p_17025))
    in
    let* c_17030 := ((send[N,U] c_17029) NULL) in
    let* _17031 := recv[N,U] c_17030 in
    match _17031 with
    | ex0UL_28 m_17032 n_17033 =>
      let* _17034 := recv[R,U] n_17033 in
      match _17034 with
      | ex1UL_32 m_17035 n_17036 =>
        let* _17037 := recv[N,U] n_17036 in
        match _17037 with
        | ex0UL_28 m_17038 n_17039 => close[true] n_17039
        end
      end
    end

#[program]
def bob_36 :=
  fun bob_17040 (b_17041) -> (p_17042) -> (g_17043) -> (c_17044) ->
    let* _17045 := recv[N,U] c_17044 in
    match _17045 with
    | ex0UL_28 m_17046 n_17047 =>
      let* _17048 := recv[R,U] n_17047 in
      match _17048 with
      | ex1UL_32 m_17049 n_17050 =>
        let* _17051 := recv[N,U] n_17050 in
        match _17051 with
        | ex0UL_28 m_17052 n_17053 =>
          let* c_17054 := ((send[N,U] n_17053) NULL) in
          let* c_17055 :=
            ((send[R,U] c_17054) ((powm_26) g_17043 b_17041 p_17042))
          in
          let* c_17056 := ((send[N,U] c_17055) NULL) in close[false] c_17056
        end
      end
    end

#[program]
def key_exchange_37 :=
  fun key_exchange_17057 (__17058) ->
    let p_17059 := 23 in
    let g_17060 := 5 in
    let* c_17061 :=
      fork fun _17062 (_17063) -o
             ((alice_35) 4 p_17059 g_17060 _17063)
    in
    let* c0_17064 :=
      fork
        fun _17065 (_17066) -o
          let* _17067 := recv[R,L] _17066 in
          match _17067 with
          | ex1LL_30 m_17068 n_17069 =>
            let* __17070 := close[true] n_17069 in
            ((bob_36) 3 p_17059 g_17060 m_17068)
          end
    in
    let* c0_17071 := ((send[R,L] c0_17064) c_17061) in close[false] c0_17071

#[program]
def main := ((key_exchange_37) tt_3)

-----------------------------------------

#[program]
def idU_40 := fun id_17298 (A_17299) -> (m_17300) ->
                m_17300

#[program]
def idL_39 := fun id_17301 (A_17302) -> (m_17303) ->
                m_17303

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_44 :=
  fun rwl_17304 {A_17305} -> {m_17306} -> {n_17307} -> {B_17308} ->
  {__17309} -> (__17310) ->
    __17310

#[program]
def rwlUL_43 :=
  fun rwl_17311 {A_17312} -> {m_17313} -> {n_17314} -> {B_17315} ->
  {__17316} -> (__17317) ->
    __17317

#[program]
def rwlLU_42 :=
  fun rwl_17318 {A_17319} -> {m_17320} -> {n_17321} -> {B_17322} ->
  {__17323} -> (__17324) ->
    __17324

#[program]
def rwlLL_41 :=
  fun rwl_17325 {A_17326} -> {m_17327} -> {n_17328} -> {B_17329} ->
  {__17330} -> (__17331) ->
    __17331

#[program]
def rwrUU_48 :=
  fun rwr_17332 {A_17333} -> {m_17334} -> {n_17335} -> {B_17336} ->
  {__17337} -> (__17338) ->
    __17338

#[program]
def rwrUL_47 :=
  fun rwr_17339 {A_17340} -> {m_17341} -> {n_17342} -> {B_17343} ->
  {__17344} -> (__17345) ->
    __17345

#[program]
def rwrLU_46 :=
  fun rwr_17346 {A_17347} -> {m_17348} -> {n_17349} -> {B_17350} ->
  {__17351} -> (__17352) ->
    __17352

#[program]
def rwrLL_45 :=
  fun rwr_17353 {A_17354} -> {m_17355} -> {n_17356} -> {B_17357} ->
  {__17358} -> (__17359) ->
    __17359

#[logical]
def congrUUU_56 := NULL

#[logical]
def congrUUL_55 := NULL

#[logical]
def congrULU_54 := NULL

#[logical]
def congrULL_53 := NULL

#[logical]
def congrLUU_52 := NULL

#[logical]
def congrLUL_51 := NULL

#[logical]
def congrLLU_50 := NULL

#[logical]
def congrLLL_49 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_58 := NULL

#[logical]
def ssingL_57 := NULL

#[program]
def sing_elimUU_62 :=
  fun sing_elim_17360 {A_17361} -> {x_17362} -> (__17363) ->
    match __17363 with
    | justUU_17 m_17364 => m_17364
    end

#[program]
def sing_elimUL_61 :=
  fun sing_elim_17365 {A_17366} -> {x_17367} -> (__17368) ->
    match __17368 with
    | justUL_16 m_17369 => m_17369
    end

#[program]
def sing_elimLU_60 :=
  fun sing_elim_17370 {A_17371} -> {x_17372} -> (__17373) ->
    !!

#[program]
def sing_elimLL_59 :=
  fun sing_elim_17374 {A_17375} -> {x_17376} -> (__17377) ->
    match __17377 with
    | justLL_14 m_17378 => m_17378
    end

#[logical]
def sing_uniqUU_66 := NULL

#[logical]
def sing_uniqUL_65 := NULL

#[logical]
def sing_uniqLU_64 := NULL

#[logical]
def sing_uniqLL_63 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_17379 (__17380) ->
    match __17380 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_17381 (__17382) -> (__17383) ->
    match __17382 with
    | true_4  =>
      match __17383 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_17384 (__17385) -> (__17386) ->
    match __17385 with
    | true_4  => true_4
    | false_5  =>
      match __17386 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_17387 (__17388) -> (__17389) -o
    match __17388 with
    | true_4  =>
      match __17389 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __17389 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_17390 (__17391) -> (__17392) ->
    match __17391 with
    | zero_6  => true_4
    | succ_7 n_17393 =>
      match __17392 with
      | zero_6  => false_5 | succ_7 n_17394 => ((lte_17390) n_17393 n_17394)
      end
    end

#[program]
def lt_15 :=
  fun lt_17395 (x_17396) -> (y_17397) ->
    ((lte_14) (succ_7 x_17396) y_17397)

#[program]
def pred_16 :=
  fun pred_17398 (__17399) ->
    match __17399 with
    | zero_6  => zero_6 | succ_7 n_17400 => n_17400
    end

#[program]
def add_17 :=
  fun add_17401 (__17402) -> (__17403) ->
    match __17402 with
    | zero_6  => __17403
    | succ_7 n_17404 => (succ_7 ((add_17401) n_17404 __17403))
    end

#[program]
def sub_18 :=
  fun sub_17405 (__17406) -> (__17407) ->
    match __17407 with
    | zero_6  => __17406
    | succ_7 n_17408 => ((sub_17405) ((pred_16) __17406) n_17408)
    end

#[program]
def mul_19 :=
  fun mul_17409 (__17410) -> (__17411) ->
    match __17410 with
    | zero_6  => zero_6
    | succ_7 n_17412 => ((add_17) __17411 ((mul_17409) n_17412 __17411))
    end

#[program]
def div_20 :=
  fun div_17413 (x_17414) -> (y_17415) ->
    match ((lt_15) x_17414 y_17415) with
    | true_4  => zero_6
    | false_5  =>
      let loop_17416 :=
        fun loop_17417 (x_17418) -> (y_17419) ->
          match ((sub_18) x_17418 ((pred_16) y_17419)) with
          | zero_6  => zero_6
          | succ_7 n_17420 => (succ_7 ((loop_17417) n_17420 y_17419))
          end
      in ((loop_17416) x_17414 y_17415)
    end

#[program]
def rem_21 :=
  fun rem_17421 (x_17422) -> (y_17423) ->
    ((sub_18) x_17422 ((mul_19) ((div_20) x_17422 y_17423) y_17423))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_70 :=
  fun free_list_17424 {A_17425} -> (f_17426) -> (__17427) ->
    match __17427 with
    | nilUU_24  => tt_3
    | consUU_25 hd_17428 tl_17429 =>
      let __17430 := ((f_17426) hd_17428) in
      ((free_list_17424) NULL f_17426 tl_17429)
    end

#[program]
def free_listUL_69 :=
  fun free_list_17431 {A_17432} -> (f_17433) -> (__17434) ->
    match __17434 with
    | nilUL_22  => tt_3
    | consUL_23 hd_17435 tl_17436 =>
      let __17437 := ((f_17433) hd_17435) in
      ((free_list_17431) NULL f_17433 tl_17436)
    end

#[program]
def free_listLL_67 :=
  fun free_list_17438 {A_17439} -> (f_17440) -> (__17441) ->
    match __17441 with
    | nilLL_18  => tt_3
    | consLL_19 hd_17442 tl_17443 =>
      let __17444 := ((f_17440) hd_17442) in
      ((free_list_17438) NULL f_17440 tl_17443)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_74 := NULL

#[logical]
def prod0UL_73 := NULL

#[logical]
def prod0LU_72 := NULL

#[logical]
def prod0LL_71 := NULL

#[logical]
def prod1UU_78 := NULL

#[logical]
def prod1UL_77 := NULL

#[logical]
def prod1LU_76 := NULL

#[logical]
def prod1LL_75 := NULL

#[program]
def pow_25 :=
  fun pow_17445 (x_17446) -> (y_17447) ->
    let loop_17448 :=
      fun loop_17449 (acc_17450) -> (y_17451) ->
        match (__lte__ y_17451 0) with
        | true_4  => acc_17450
        | false_5  =>
          ((loop_17449) (__mul__ x_17446 acc_17450) (__sub__ y_17451 1))
        end
    in ((loop_17448) 1 y_17447)

#[program]
def powm_26 :=
  fun powm_17452 (x_17453) -> (y_17454) -> (m_17455) ->
    let loop_17456 :=
      fun loop_17457 (acc_17458) -> (y_17459) ->
        match (__lte__ y_17459 0) with
        | true_4  => acc_17458
        | false_5  =>
          ((loop_17457)
            (__mod__ (__mul__ x_17453 acc_17458) m_17455) (__sub__ y_17459 1))
        end
    in ((loop_17456) 1 y_17454)

#[program]
def ord_27 := fun ord_17460 (c_17461) ->
                (__ord__ c_17461)

#[program]
def chr_28 := fun chr_17462 (i_17463) ->
                (__chr__ i_17463)

#[program]
def str_29 := fun str_17464 (c_17465) ->
                (__push__ "" c_17465)

#[program]
def strlen_30 := fun strlen_17466 (s_17467) ->
                   (__size__ s_17467)

#[program]
def string_of_int_31 :=
  fun string_of_int_17468 (i_17469) ->
    let aux_17470 :=
      fun aux_17471 (i_17472) ->
        match (__lte__ 10 i_17472) with
        | true_4  =>
          let r_17473 := (__mod__ i_17472 10) in
          let i_17474 := (__div__ i_17472 10) in
          (__push__ ((aux_17471) i_17474)
            ((chr_28) (__add__ r_17473 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_17472 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_17469) with
    | true_4  => ((aux_17470) i_17469)
    | false_5  => (__cat__ "~" ((aux_17470) (__neg__ i_17469)))
    end

#[logical]
def DH_32 := NULL

#[logical]
def DH_ch_33 := NULL

#[logical]
def DH_hc_34 := NULL

#[program]
def alice_35 :=
  fun alice_17475 (a_17476) -> (p_17477) -> (g_17478) -> (c_17479) ->
    let* c_17480 := ((send[N,U] c_17479) NULL) in
    let* c_17481 := ((send[R,U] c_17480) ((powm_26) g_17478 a_17476 p_17477))
    in
    let* c_17482 := ((send[N,U] c_17481) NULL) in
    let* _17483 := recv[N,U] c_17482 in
    match _17483 with
    | ex0UL_28 m_17484 n_17485 =>
      let* _17486 := recv[R,U] n_17485 in
      match _17486 with
      | ex1UL_32 m_17487 n_17488 =>
        let* _17489 := recv[N,U] n_17488 in
        match _17489 with
        | ex0UL_28 m_17490 n_17491 => close[true] n_17491
        end
      end
    end

#[program]
def bob_36 :=
  fun bob_17492 (b_17493) -> (p_17494) -> (g_17495) -> (c_17496) ->
    let* _17497 := recv[N,U] c_17496 in
    match _17497 with
    | ex0UL_28 m_17498 n_17499 =>
      let* _17500 := recv[R,U] n_17499 in
      match _17500 with
      | ex1UL_32 m_17501 n_17502 =>
        let* _17503 := recv[N,U] n_17502 in
        match _17503 with
        | ex0UL_28 m_17504 n_17505 =>
          let* c_17506 := ((send[N,U] n_17505) NULL) in
          let* c_17507 :=
            ((send[R,U] c_17506) ((powm_26) g_17495 b_17493 p_17494))
          in
          let* c_17508 := ((send[N,U] c_17507) NULL) in close[false] c_17508
        end
      end
    end

#[program]
def key_exchange_37 :=
  fun key_exchange_17509 (__17510) ->
    let p_17511 := 23 in
    let g_17512 := 5 in
    let* c_17513 :=
      fork fun _17514 (_17515) -o
             ((alice_35) 4 p_17511 g_17512 _17515)
    in
    let* c0_17516 :=
      fork
        fun _17517 (_17518) -o
          let* _17519 := recv[R,L] _17518 in
          match _17519 with
          | ex1LL_30 m_17520 n_17521 =>
            let* __17522 := close[true] n_17521 in
            ((bob_36) 3 p_17511 g_17512 m_17520)
          end
    in
    let* c0_17523 := ((send[R,L] c0_17516) c_17513) in close[false] c0_17523

#[program]
def main := ((key_exchange_37) tt_3)

-----------------------------------------

def idU_40 := fun id_17767 (A_17768) -> (m_17769) -> m_17769

def idL_39 := fun id_17770 (A_17771) -> (m_17772) -> m_17772

def rwlUU_44 :=
  fun rwl_17773 (A_17774) -> (m_17775) -> (n_17776) -> (B_17777) ->
  (__17778) -> (__17779) -> __17779

def rwlUL_43 :=
  fun rwl_17780 (A_17781) -> (m_17782) -> (n_17783) -> (B_17784) ->
  (__17785) -> (__17786) -> __17786

def rwlLU_42 :=
  fun rwl_17787 (A_17788) -> (m_17789) -> (n_17790) -> (B_17791) ->
  (__17792) -> (__17793) -> __17793

def rwlLL_41 :=
  fun rwl_17794 (A_17795) -> (m_17796) -> (n_17797) -> (B_17798) ->
  (__17799) -> (__17800) -> __17800

def rwrUU_48 :=
  fun rwr_17801 (A_17802) -> (m_17803) -> (n_17804) -> (B_17805) ->
  (__17806) -> (__17807) -> __17807

def rwrUL_47 :=
  fun rwr_17808 (A_17809) -> (m_17810) -> (n_17811) -> (B_17812) ->
  (__17813) -> (__17814) -> __17814

def rwrLU_46 :=
  fun rwr_17815 (A_17816) -> (m_17817) -> (n_17818) -> (B_17819) ->
  (__17820) -> (__17821) -> __17821

def rwrLL_45 :=
  fun rwr_17822 (A_17823) -> (m_17824) -> (n_17825) -> (B_17826) ->
  (__17827) -> (__17828) -> __17828

def sing_elimUU_62 :=
  fun sing_elim_17829 (A_17830) -> (x_17831) -> (__17832) -> __17832

def sing_elimUL_61 :=
  fun sing_elim_17833 (A_17834) -> (x_17835) -> (__17836) -> __17836

def sing_elimLU_60 :=
  fun sing_elim_17837 (A_17838) -> (x_17839) -> (__17840) -> !!

def sing_elimLL_59 :=
  fun sing_elim_17841 (A_17842) -> (x_17843) -> (__17844) -> __17844

def not_10 :=
  fun not_17845 (__17846) ->
    match __17846 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_17847 (__17848) -> (__17849) ->
    match __17848 with
    | true_4 =>
      match __17849 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_17850 (__17851) -> (__17852) ->
    match __17851 with
    | true_4 => true_4
    | false_5 =>
      match __17852 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_17853 (__17854) -> (__17855) -o
    match __17854 with
    | true_4 =>
      match __17855 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __17855 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_17856 (__17857) -> (__17858) ->
    match __17857 with
    | zero_6  => true_4
    | succ_7 n_17859 =>
      match __17858 with
      | zero_6  => false_5 | succ_7 n_17860 => ((lte_17856) n_17859 n_17860)
      end
    end

def lt_15 :=
  fun lt_17861 (x_17862) -> (y_17863) -> ((lte_14) (succ_7 x_17862) y_17863)

def pred_16 :=
  fun pred_17864 (__17865) ->
    match __17865 with
    | zero_6  => (zero_6 ) | succ_7 n_17866 => n_17866
    end

def add_17 :=
  fun add_17867 (__17868) -> (__17869) ->
    match __17868 with
    | zero_6  => __17869
    | succ_7 n_17870 => (succ_7 ((add_17867) n_17870 __17869))
    end

def sub_18 :=
  fun sub_17871 (__17872) -> (__17873) ->
    match __17873 with
    | zero_6  => __17872
    | succ_7 n_17874 => ((sub_17871) ((pred_16) __17872) n_17874)
    end

def mul_19 :=
  fun mul_17875 (__17876) -> (__17877) ->
    match __17876 with
    | zero_6  => (zero_6 )
    | succ_7 n_17878 => ((add_17) __17877 ((mul_17875) n_17878 __17877))
    end

def div_20 :=
  fun div_17879 (x_17880) -> (y_17881) ->
    match ((lt_15) x_17880 y_17881) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_17882 :=
        fun loop_17883 (x_17884) -> (y_17885) ->
          match ((sub_18) x_17884 ((pred_16) y_17885)) with
          | zero_6  => (zero_6 )
          | succ_7 n_17886 => (succ_7 ((loop_17883) n_17886 y_17885))
          end
      in ((loop_17882) x_17880 y_17881)
    end

def rem_21 :=
  fun rem_17887 (x_17888) -> (y_17889) ->
    ((sub_18) x_17888 ((mul_19) ((div_20) x_17888 y_17889) y_17889))

def free_listUU_70 :=
  fun free_list_17890 (A_17891) -> (f_17892) -> (__17893) ->
    match __17893 with
    | nilUU_24  => tt_3
    | consUU_25 hd_17894 tl_17895 =>
      let __17896 := ((f_17892) hd_17894) in
      ((free_list_17890) NULL f_17892 tl_17895)
    end

def free_listUL_69 :=
  fun free_list_17897 (A_17898) -> (f_17899) -> (__17900) ->
    match __17900 with
    | nilUL_22  => tt_3
    | consUL_23 hd_17901 tl_17902 =>
      let __17903 := ((f_17899) hd_17901) in
      ((free_list_17897) NULL f_17899 tl_17902)
    end

def free_listLL_67 :=
  fun free_list_17904 (A_17905) -> (f_17906) -> (__17907) ->
    match __17907 with
    | nilLL_18  => tt_3
    | consLL_19 hd_17908 tl_17909 =>
      let __17910 := ((f_17906) hd_17908) in
      ((free_list_17904) NULL f_17906 tl_17909)
    end

def pow_25 :=
  fun pow_17911 (x_17912) -> (y_17913) ->
    let loop_17914 :=
      fun loop_17915 (acc_17916) -> (y_17917) ->
        match (__lte__ y_17917 0) with
        | true_4 => acc_17916
        | false_5 =>
          ((loop_17915) (__mul__ x_17912 acc_17916) (__sub__ y_17917 1))
        end
    in ((loop_17914) 1 y_17913)

def powm_26 :=
  fun powm_17918 (x_17919) -> (y_17920) -> (m_17921) ->
    let loop_17922 :=
      fun loop_17923 (acc_17924) -> (y_17925) ->
        match (__lte__ y_17925 0) with
        | true_4 => acc_17924
        | false_5 =>
          ((loop_17923)
            (__mod__ (__mul__ x_17919 acc_17924) m_17921) (__sub__ y_17925 1))
        end
    in ((loop_17922) 1 y_17920)

def ord_27 := fun ord_17926 (c_17927) -> (__ord__ c_17927)

def chr_28 := fun chr_17928 (i_17929) -> (__chr__ i_17929)

def str_29 := fun str_17930 (c_17931) -> (__push__ "" c_17931)

def strlen_30 := fun strlen_17932 (s_17933) -> (__size__ s_17933)

def string_of_int_31 :=
  fun string_of_int_17934 (i_17935) ->
    let aux_17936 :=
      fun aux_17937 (i_17938) ->
        match (__lte__ 10 i_17938) with
        | true_4 =>
          let r_17939 := (__mod__ i_17938 10) in
          let i_17940 := (__div__ i_17938 10) in
          (__push__ ((aux_17937) i_17940)
            ((chr_28) (__add__ r_17939 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_17938 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_17935) with
    | true_4 => ((aux_17936) i_17935)
    | false_5 => (__cat__ "~" ((aux_17936) (__neg__ i_17935)))
    end

def alice_35 :=
  fun alice_17941 (a_17942) -> (p_17943) -> (g_17944) -> (c_17945) ->
    lazy(let c_17946 := force(((lam (x_17947) -> lazy(c_17945)) NULL)) in
         let c_17948 :=
           force(((lam (x_17949) -> lazy(send(c_17946, x_17949)))
                   ((powm_26) g_17944 a_17942 p_17943)))
         in
         let c_17950 := force(((lam (x_17951) -> lazy(c_17948)) NULL)) in
         let _17952 := force(lazy(c_17950)) in
         force(lazy(let _17953 := force(lazy(recv[U](_17952))) in
                    force(match _17953 with
                          | ex1UL_32 m_17954 n_17955 =>
                            lazy(let _17956 := force(lazy(n_17955)) in
                                 force(lazy(close[true] _17956)))
                          end))))

def bob_36 :=
  fun bob_17957 (b_17958) -> (p_17959) -> (g_17960) -> (c_17961) ->
    lazy(let _17962 := force(lazy(c_17961)) in
         force(lazy(let _17963 := force(lazy(recv[U](_17962))) in
                    force(match _17963 with
                          | ex1UL_32 m_17964 n_17965 =>
                            lazy(let _17966 := force(lazy(n_17965)) in
                                 force(lazy(let c_17967 :=
                                              force(((lam (x_17968) ->
                                                        lazy(_17966))
                                                      NULL))
                                            in
                                            let c_17969 :=
                                              force(((lam (x_17970) ->
                                                        lazy(send(c_17967, x_17970)))
                                                      ((powm_26)
                                                        g_17960 b_17958
                                                          p_17959)))
                                            in
                                            let c_17971 :=
                                              force(((lam (x_17972) ->
                                                        lazy(c_17969))
                                                      NULL))
                                            in
                                            force(lazy(close[false] c_17971)))))
                          end))))

def key_exchange_37 :=
  fun key_exchange_17973 (__17974) ->
    let p_17975 := 23 in
    let g_17976 := 5 in
    lazy(let c_17977 :=
           force(lazy(fork
                        fun _17978 (_17979) -o
                          ((alice_35) 4 p_17975 g_17976 _17979)))
         in
         let c0_17980 :=
           force(lazy(fork
                        fun _17981 (_17982) -o
                          lazy(let _17983 := force(lazy(recv[L](_17982))) in
                               force(match _17983 with
                                     | ex1LL_30 m_17984 n_17985 =>
                                       lazy(let __17986 :=
                                              force(lazy(close[true] n_17985))
                                            in
                                            force(((bob_36)
                                                    3 p_17975 g_17976 m_17984)))
                                     end))))
         in
         let c0_17987 :=
           force(((lam (x_17988) -> lazy(send(c0_17980, x_17988))) c_17977))
         in force(lazy(close[false] c0_17987)))

def main := ((key_exchange_37) tt_3)

-----------------------------------------

def idU_40 := lam (A_18234) -> (m_18235) -> m_18235

def idL_39 := lam (A_18236) -> (m_18237) -> m_18237

def rwlUU_44 :=
  lam (A_18238) -> (m_18239) -> (n_18240) -> (B_18241) -> (__18242) ->
  (__18243) -> __18243

def rwlUL_43 :=
  lam (A_18244) -> (m_18245) -> (n_18246) -> (B_18247) -> (__18248) ->
  (__18249) -> __18249

def rwlLU_42 :=
  lam (A_18250) -> (m_18251) -> (n_18252) -> (B_18253) -> (__18254) ->
  (__18255) -> __18255

def rwlLL_41 :=
  lam (A_18256) -> (m_18257) -> (n_18258) -> (B_18259) -> (__18260) ->
  (__18261) -> __18261

def rwrUU_48 :=
  lam (A_18262) -> (m_18263) -> (n_18264) -> (B_18265) -> (__18266) ->
  (__18267) -> __18267

def rwrUL_47 :=
  lam (A_18268) -> (m_18269) -> (n_18270) -> (B_18271) -> (__18272) ->
  (__18273) -> __18273

def rwrLU_46 :=
  lam (A_18274) -> (m_18275) -> (n_18276) -> (B_18277) -> (__18278) ->
  (__18279) -> __18279

def rwrLL_45 :=
  lam (A_18280) -> (m_18281) -> (n_18282) -> (B_18283) -> (__18284) ->
  (__18285) -> __18285

def sing_elimUU_62 := lam (A_18286) -> (x_18287) -> (__18288) -> __18288

def sing_elimUL_61 := lam (A_18289) -> (x_18290) -> (__18291) -> __18291

def sing_elimLU_60 := lam (A_18292) -> (x_18293) -> (__18294) -> !!

def sing_elimLL_59 := lam (A_18295) -> (x_18296) -> (__18297) -> __18297

def not_10 :=
  lam (__18298) ->
    match __18298 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__18299) -> (__18300) ->
    match __18299 with
    | true_4 =>
      match __18300 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__18301) -> (__18302) ->
    match __18301 with
    | true_4 => true_4
    | false_5 =>
      match __18302 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__18303) -> (__18304) -o
    match __18303 with
    | true_4 =>
      match __18304 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __18304 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_18305 (__18306) -> (__18307) ->
    match __18306 with
    | zero_6  => true_4
    | succ_7 n_18308 =>
      match __18307 with
      | zero_6  => false_5 | succ_7 n_18309 => ((lte_18305) n_18308 n_18309)
      end
    end

def lt_15 :=
  lam (x_18310) -> (y_18311) -> ((lte_14) (succ_7 x_18310) y_18311)

def pred_16 :=
  lam (__18312) ->
    match __18312 with
    | zero_6  => (zero_6 ) | succ_7 n_18313 => n_18313
    end

def add_17 :=
  fun add_18314 (__18315) -> (__18316) ->
    match __18315 with
    | zero_6  => __18316
    | succ_7 n_18317 => (succ_7 ((add_18314) n_18317 __18316))
    end

def sub_18 :=
  fun sub_18318 (__18319) -> (__18320) ->
    match __18320 with
    | zero_6  => __18319
    | succ_7 n_18321 => ((sub_18318) ((pred_16) __18319) n_18321)
    end

def mul_19 :=
  fun mul_18322 (__18323) -> (__18324) ->
    match __18323 with
    | zero_6  => (zero_6 )
    | succ_7 n_18325 => ((add_17) __18324 ((mul_18322) n_18325 __18324))
    end

def div_20 :=
  lam (x_18326) -> (y_18327) ->
    match ((lt_15) x_18326 y_18327) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_18328 :=
        fun loop_18329 (x_18330) -> (y_18331) ->
          match ((sub_18) x_18330 ((pred_16) y_18331)) with
          | zero_6  => (zero_6 )
          | succ_7 n_18332 => (succ_7 ((loop_18329) n_18332 y_18331))
          end
      in ((loop_18328) x_18326 y_18327)
    end

def rem_21 :=
  lam (x_18333) -> (y_18334) ->
    ((sub_18) x_18333 ((mul_19) ((div_20) x_18333 y_18334) y_18334))

def free_listUU_70 :=
  fun free_list_18335 (A_18336) -> (f_18337) -> (__18338) ->
    match __18338 with
    | nilUU_24  => tt_3
    | consUU_25 hd_18339 tl_18340 =>
      let __18341 := ((f_18337) hd_18339) in
      ((free_list_18335) NULL f_18337 tl_18340)
    end

def free_listUL_69 :=
  fun free_list_18342 (A_18343) -> (f_18344) -> (__18345) ->
    match __18345 with
    | nilUL_22  => tt_3
    | consUL_23 hd_18346 tl_18347 =>
      let __18348 := ((f_18344) hd_18346) in
      ((free_list_18342) NULL f_18344 tl_18347)
    end

def free_listLL_67 :=
  fun free_list_18349 (A_18350) -> (f_18351) -> (__18352) ->
    match __18352 with
    | nilLL_18  => tt_3
    | consLL_19 hd_18353 tl_18354 =>
      let __18355 := ((f_18351) hd_18353) in
      ((free_list_18349) NULL f_18351 tl_18354)
    end

def pow_25 :=
  lam (x_18356) -> (y_18357) ->
    let loop_18358 :=
      fun loop_18359 (acc_18360) -> (y_18361) ->
        match (__lte__ y_18361 0) with
        | true_4 => acc_18360
        | false_5 =>
          ((loop_18359) (__mul__ x_18356 acc_18360) (__sub__ y_18361 1))
        end
    in ((loop_18358) 1 y_18357)

def powm_26 :=
  lam (x_18362) -> (y_18363) -> (m_18364) ->
    let loop_18365 :=
      fun loop_18366 (acc_18367) -> (y_18368) ->
        match (__lte__ y_18368 0) with
        | true_4 => acc_18367
        | false_5 =>
          ((loop_18366)
            (__mod__ (__mul__ x_18362 acc_18367) m_18364) (__sub__ y_18368 1))
        end
    in ((loop_18365) 1 y_18363)

def ord_27 := lam (c_18369) -> (__ord__ c_18369)

def chr_28 := lam (i_18370) -> (__chr__ i_18370)

def str_29 := lam (c_18371) -> (__push__ "" c_18371)

def strlen_30 := lam (s_18372) -> (__size__ s_18372)

def string_of_int_31 :=
  lam (i_18373) ->
    let aux_18374 :=
      fun aux_18375 (i_18376) ->
        match (__lte__ 10 i_18376) with
        | true_4 =>
          let r_18377 := (__mod__ i_18376 10) in
          let i_18378 := (__div__ i_18376 10) in
          (__push__ ((aux_18375) i_18378)
            ((chr_28) (__add__ r_18377 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_18376 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_18373) with
    | true_4 => ((aux_18374) i_18373)
    | false_5 => (__cat__ "~" ((aux_18374) (__neg__ i_18373)))
    end

def alice_35 :=
  lam (a_18379) -> (p_18380) -> (g_18381) -> (c_18382) ->
    lazy(let c_18383 := send(c_18382, ((powm_26) g_18381 a_18379 p_18380)) in
         let _18384 := recv[U](c_18383) in
         match _18384 with
         | ex1UL_32 m_18385 n_18386 => close[true] n_18386
         end)

def bob_36 :=
  lam (b_18387) -> (p_18388) -> (g_18389) -> (c_18390) ->
    lazy(let _18391 := recv[U](c_18390) in
         match _18391 with
         | ex1UL_32 m_18392 n_18393 =>
           let c_18394 := send(n_18393, ((powm_26) g_18389 b_18387 p_18388))
           in close[false] c_18394
         end)

def key_exchange_37 :=
  lam (__18395) ->
    let p_18396 := 23 in
    let g_18397 := 5 in
    lazy(let c_18398 :=
           fork lam (_18399) -o ((alice_35) 4 p_18396 g_18397 _18399)
         in
         let c0_18400 :=
           fork
             lam (_18401) -o
               lazy(let _18402 := recv[L](_18401) in
                    match _18402 with
                    | ex1LL_30 m_18403 n_18404 =>
                      let __18405 := close[true] n_18404 in
                      force(((bob_36) 3 p_18396 g_18397 m_18403))
                    end)
         in let c0_18406 := send(c0_18400, c_18398) in close[false] c0_18406)

def main := ((key_exchange_37) tt_3)

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn alice_264(a_265%U, p_266%U, g_267%U, c_268%U) {
  x_269 :=
    lazy {
      x_272 := powm_207(g_267, a_265, p_266);
      x_271 := send(c_268, x_272);
      c_270 := x_271;
      x_274 := recv[U](c_270);
      _273 := x_274;
      match[L](_273){
        ex1UL_32(m_276, n_277) => {
          x_278 := close[true](n_277);
          x_275 := x_278;
        }
      }
      return x_275;
    };
  return x_269;
}

fn bob_279(b_280%U, p_281%U, g_282%U, c_283%U) {
  x_284 :=
    lazy {
      x_286 := recv[U](c_283);
      _285 := x_286;
      match[L](_285){
        ex1UL_32(m_288, n_289) => {
          x_292 := powm_207(g_282, b_280, p_281);
          x_291 := send(n_289, x_292);
          c_290 := x_291;
          x_293 := close[false](c_290);
          x_287 := x_293;
        }
      }
      return x_287;
    };
  return x_284;
}

fn key_exchange_294(__295%U) {
  p_296 := 23;
  g_297 := 5;
  x_298 :=
    lazy {
      x_301 :=
        fn lam_302(_303%L) {
          x_304 := alice_264(4, p_296, g_297, _303);
          return x_304;
        };
      x_300 := fork(x_301);
      c_299 := x_300;
      x_307 :=
        fn lam_308(_309%L) {
          x_310 :=
            lazy {
              x_312 := recv[L](_309);
              _311 := x_312;
              match[L](_311){
                ex1LL_30(m_314, n_315) => {
                  x_317 := close[true](n_315);
                  __316 := x_317;
                  x_319 := bob_279(3, p_296, g_297, m_314);
                  x_318 := force(x_319);
                  x_313 := x_318;
                }
              }
              return x_313;
            };
          return x_310;
        };
      x_306 := fork(x_307);
      c0_305 := x_306;
      x_321 := send(c0_305, c_299);
      c0_320 := x_321;
      x_322 := close[false](c0_320);
      return x_322;
    };
  return x_298;
}

main := {
  x_323 := key_exchange_294(tt_3);
  return x_323;
};

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn alice_264(a_265%U, p_266%U, g_267%U, c_268%U) {
  x_269 :=
    lazy {
      x_272 := powm_207(g_267, a_265, p_266);
      x_271 := send(c_268, x_272);
      c_270 := x_271;
      x_274 := recv[U](c_270);
      _273 := x_274;
      match[L](_273){
        ex1UL_32(m_276, n_277) => {
          x_278 := close[true](n_277);
          x_275 := x_278;
          free(_273);
        }
      }
      return x_275;
    };
  return x_269;
}

fn bob_279(b_280%U, p_281%U, g_282%U, c_283%U) {
  x_284 :=
    lazy {
      x_286 := recv[U](c_283);
      _285 := x_286;
      match[L](_285){
        ex1UL_32(m_288, n_289) => {
          x_292 := powm_207(g_282, b_280, p_281);
          x_291 := send(n_289, x_292);
          c_290 := x_291;
          x_293 := close[false](c_290);
          x_287 := x_293;
          free(_285);
        }
      }
      return x_287;
    };
  return x_284;
}

fn key_exchange_294(__295%U) {
  p_296 := 23;
  g_297 := 5;
  x_298 :=
    lazy {
      x_301 :=
        fn lam_302(_303%L) {
          x_304 := alice_264(4, p_296, g_297, _303);
          return x_304;
        };
      x_300 := fork(x_301);
      c_299 := x_300;
      x_307 :=
        fn lam_308(_309%L) {
          x_310 :=
            lazy {
              x_312 := recv[L](_309);
              _311 := x_312;
              match[L](_311){
                ex1LL_30(m_314, n_315) => {
                  x_317 := close[true](n_315);
                  __316 := x_317;
                  x_319 := bob_279(3, p_296, g_297, m_314);
                  x_318 := force(x_319);
                  x_313 := x_318;
                  free(_311);
                }
              }
              return x_313;
            };
          return x_310;
        };
      x_306 := fork(x_307);
      c0_305 := x_306;
      x_321 := send(c0_305, c_299);
      c0_320 := x_321;
      x_322 := close[false](c0_320);
      return x_322;
    };
  return x_298;
}

main := {
  x_323 := key_exchange_294(tt_3);
  return x_323;
};

-----------------------------------------

fn fn0_idU_324(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_325(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_326 := fn0_idU_324(A_2, m_3);
  return x_326;
}

fn fn0_idL_327(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_328(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_329 := fn0_idL_327(A_5, m_6);
  return x_329;
}

fn fn0_rwlUU_330(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_331(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_332 := fn0_rwlUU_330(A_8, m_9, n_10, B_11, __12, __13);
  return x_332;
}

fn fn0_rwlUL_333(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_334(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_335 := fn0_rwlUL_333(A_15, m_16, n_17, B_18, __19, __20);
  return x_335;
}

fn fn0_rwlLU_336(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_337(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_338 := fn0_rwlLU_336(A_22, m_23, n_24, B_25, __26, __27);
  return x_338;
}

fn fn0_rwlLL_339(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_340(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_341 := fn0_rwlLL_339(A_29, m_30, n_31, B_32, __33, __34);
  return x_341;
}

fn fn0_rwrUU_342(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_343(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_344 := fn0_rwrUU_342(A_36, m_37, n_38, B_39, __40, __41);
  return x_344;
}

fn fn0_rwrUL_345(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_346(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_347 := fn0_rwrUL_345(A_43, m_44, n_45, B_46, __47, __48);
  return x_347;
}

fn fn0_rwrLU_348(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_349(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_350 := fn0_rwrLU_348(A_50, m_51, n_52, B_53, __54, __55);
  return x_350;
}

fn fn0_rwrLL_351(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_352(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_353 := fn0_rwrLL_351(A_57, m_58, n_59, B_60, __61, __62);
  return x_353;
}

fn fn0_sing_elimUU_354(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_355(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_356 := fn0_sing_elimUU_354(A_64, x_65, __66);
  return x_356;
}

fn fn0_sing_elimUL_357(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_358(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_359 := fn0_sing_elimUL_357(A_68, x_69, __70);
  return x_359;
}

fn fn0_sing_elimLU_360(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_361(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_362 := fn0_sing_elimLU_360(A_72, x_73, __74);
  return x_362;
}

fn fn0_sing_elimLL_363(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_364(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_365 := fn0_sing_elimLL_363(A_76, x_77, __78);
  return x_365;
}

fn fn0_not_366(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_367(env) {
  __80 := env[1];
  x_368 := fn0_not_366(__80);
  return x_368;
}

fn fn0_and_369(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_370(env) {
  __83 := env[1];
  __84 := env[2];
  x_371 := fn0_and_369(__83, __84);
  return x_371;
}

fn fn0_or_372(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_373(env) {
  __88 := env[1];
  __89 := env[2];
  x_374 := fn0_or_372(__88, __89);
  return x_374;
}

fn fn0_xor_375(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_376(env) {
  __93 := env[1];
  __94 := env[2];
  x_377 := fn0_xor_375(__93, __94);
  return x_377;
}

fn fn0_lte_378(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_378(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_379(env) {
  __99 := env[1];
  __100 := env[2];
  x_380 := fn0_lte_378(__99, __100);
  return x_380;
}

fn fn0_lt_381(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_378(x_110, y_108);
  return x_109;
}

fn fn1_lt_382(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_383 := fn0_lt_381(x_107, y_108);
  return x_383;
}

fn fn0_pred_384(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_385(env) {
  __112 := env[1];
  x_386 := fn0_pred_384(__112);
  return x_386;
}

fn fn0_add_387(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_387(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_388(env) {
  __117 := env[1];
  __118 := env[2];
  x_389 := fn0_add_387(__117, __118);
  return x_389;
}

fn fn0_sub_390(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_384(__124);
      x_128 := fn0_sub_390(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_391(env) {
  __124 := env[1];
  __125 := env[2];
  x_392 := fn0_sub_390(__124, __125);
  return x_392;
}

fn fn0_mul_393(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_393(n_135, __132);
      x_136 := fn0_add_387(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_394(env) {
  __131 := env[1];
  __132 := env[2];
  x_395 := fn0_mul_393(__131, __132);
  return x_395;
}

fn fn0_div_396(x_139, y_140) {
  x_142 := fn0_lt_381(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_398, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_402, loop_144, x_139);
      appc(x_403, x_402, y_140);
      move1(x_156, x_403);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_397(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_405 := fn0_div_396(x_139, y_140);
  return x_405;
}

fn fn0_rem_406(x_158, y_159) {
  x_162 := fn0_div_396(x_158, y_159);
  x_161 := fn0_mul_393(x_162, y_159);
  x_160 := fn0_sub_390(x_158, x_161);
  return x_160;
}

fn fn1_rem_407(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_408 := fn0_rem_406(x_158, y_159);
  return x_408;
}

fn fn0_free_listUU_409(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_411, f_165, hd_168);
      move1(x_171, x_411);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_409(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_410(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_413 := fn0_free_listUU_409(A_164, f_165, __166);
  return x_413;
}

fn fn0_free_listUL_414(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_416, f_175, hd_178);
      move1(x_181, x_416);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_414(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_415(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_418 := fn0_free_listUL_414(A_174, f_175, __176);
  return x_418;
}

fn fn0_free_listLL_419(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_421, f_185, hd_188);
      move1(x_191, x_421);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_419(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_420(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_423 := fn0_free_listLL_419(A_184, f_185, __186);
  return x_423;
}

fn fn0_pow_424(x_194, y_195) {
  mkclo1(x_197, fn1_loop_426, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_430, loop_196, 1);
  appc(x_431, x_430, y_195);
  move1(x_206, x_431);
  return x_206;
}

fn fn1_pow_425(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_433 := fn0_pow_424(x_194, y_195);
  return x_433;
}

fn fn0_powm_434(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_436, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_440, loop_211, 1);
  appc(x_441, x_440, y_209);
  move1(x_222, x_441);
  return x_222;
}

fn fn1_powm_435(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_443 := fn0_powm_434(x_208, y_209, m_210);
  return x_443;
}

fn fn0_ord_444(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_445(env) {
  c_224 := env[1];
  x_446 := fn0_ord_444(c_224);
  return x_446;
}

fn fn0_chr_447(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_448(env) {
  i_227 := env[1];
  x_449 := fn0_chr_447(i_227);
  return x_449;
}

fn fn0_str_450(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_451(env) {
  c_230 := env[1];
  x_452 := fn0_str_450(c_230);
  return x_452;
}

fn fn0_strlen_453(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_454(env) {
  s_234 := env[1];
  x_455 := fn0_strlen_453(s_234);
  return x_455;
}

fn fn0_string_of_int_456(i_237) {
  mkclo1(x_239, fn1_aux_458, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lt(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_461, aux_238, i_237);
      move1(x_259, x_461);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_463, aux_238, x_263);
      move1(x_262, x_463);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_457(env) {
  i_237 := env[1];
  x_465 := fn0_string_of_int_456(i_237);
  return x_465;
}

fn fn0_alice_466(a_265, p_266, g_267, c_268) {
  lazy(x_269, lazy__468, 5);
  setlazy(x_269, powm_207, 0);
  setlazy(x_269, a_265, 1);
  setlazy(x_269, p_266, 2);
  setlazy(x_269, g_267, 3);
  setlazy(x_269, c_268, 4);
  return x_269;
}

fn fn1_alice_467(env) {
  a_265 := env[1];
  p_266 := env[2];
  g_267 := env[3];
  c_268 := env[4];
  x_469 := fn0_alice_466(a_265, p_266, g_267, c_268);
  return x_469;
}

fn fn0_bob_470(b_280, p_281, g_282, c_283) {
  lazy(x_284, lazy__472, 5);
  setlazy(x_284, powm_207, 0);
  setlazy(x_284, b_280, 1);
  setlazy(x_284, p_281, 2);
  setlazy(x_284, g_282, 3);
  setlazy(x_284, c_283, 4);
  return x_284;
}

fn fn1_bob_471(env) {
  b_280 := env[1];
  p_281 := env[2];
  g_282 := env[3];
  c_283 := env[4];
  x_473 := fn0_bob_470(b_280, p_281, g_282, c_283);
  return x_473;
}

fn fn0_key_exchange_474(__295) {
  move1(p_296, 23);
  move1(g_297, 5);
  lazy(x_298, lazy__476, 4);
  setlazy(x_298, alice_264, 0);
  setlazy(x_298, bob_279, 1);
  setlazy(x_298, p_296, 2);
  setlazy(x_298, g_297, 3);
  return x_298;
}

fn fn1_key_exchange_475(env) {
  __295 := env[1];
  x_480 := fn0_key_exchange_474(__295);
  return x_480;
}

fn lazy__476(env) {
  alice_264 := env[0];
  bob_279 := env[1];
  p_296 := env[2];
  g_297 := env[3];
  mkclo1(x_301, fn1_lam_477, fvc:=3, argc:=1);
  setclo(x_301, alice_264, 1);
  setclo(x_301, p_296, 2);
  setclo(x_301, g_297, 3);
  fork(x_300, x_301);
  move1(c_299, x_300);
  mkclo1(x_307, fn1_lam_478, fvc:=3, argc:=1);
  setclo(x_307, bob_279, 1);
  setclo(x_307, p_296, 2);
  setclo(x_307, g_297, 3);
  fork(x_306, x_307);
  move1(c0_305, x_306);
  send(x_321, c0_305, c_299);
  move1(c0_320, x_321);
  close1(x_322, c0_320);
  return x_322;
}

fn fn1_lam_477(env) {
  lam_302 := env[0];
  alice_264 := env[1];
  p_296 := env[2];
  g_297 := env[3];
  _303 := env[4];
  x_304 := fn0_alice_466(4, p_296, g_297, _303);
  return x_304;
}

fn fn1_lam_478(env) {
  lam_308 := env[0];
  bob_279 := env[1];
  p_296 := env[2];
  g_297 := env[3];
  _309 := env[4];
  lazy(x_310, lazy__479, 4);
  setlazy(x_310, bob_279, 0);
  setlazy(x_310, p_296, 1);
  setlazy(x_310, g_297, 2);
  setlazy(x_310, _309, 3);
  return x_310;
}

fn lazy__479(env) {
  bob_279 := env[0];
  p_296 := env[1];
  g_297 := env[2];
  _309 := env[3];
  recv1(x_312, _309);
  move1(_311, x_312);
  switch(ctagof(_311)){
    ex1LL_30 => {
      getbox(m_314, _311, 0);
      getbox(n_315, _311, 1);
      close0(x_317, n_315);
      move1(__316, x_317);
      x_319 := fn0_bob_470(3, p_296, g_297, m_314);
      force(x_318, x_319);
      free(x_319);
      move1(x_313, x_318);
      free(_311);
      break;
    }
  }
  return x_313;
}

fn lazy__472(env) {
  powm_207 := env[0];
  b_280 := env[1];
  p_281 := env[2];
  g_282 := env[3];
  c_283 := env[4];
  recv0(x_286, c_283);
  move1(_285, x_286);
  switch(ctagof(_285)){
    ex1UL_32 => {
      getbox(m_288, _285, 0);
      getbox(n_289, _285, 1);
      x_292 := fn0_powm_434(g_282, b_280, p_281);
      send(x_291, n_289, x_292);
      move1(c_290, x_291);
      close1(x_293, c_290);
      move1(x_287, x_293);
      free(_285);
      break;
    }
  }
  return x_287;
}

fn lazy__468(env) {
  powm_207 := env[0];
  a_265 := env[1];
  p_266 := env[2];
  g_267 := env[3];
  c_268 := env[4];
  x_272 := fn0_powm_434(g_267, a_265, p_266);
  send(x_271, c_268, x_272);
  move1(c_270, x_271);
  recv0(x_274, c_270);
  move1(_273, x_274);
  switch(ctagof(_273)){
    ex1UL_32 => {
      getbox(m_276, _273, 0);
      getbox(n_277, _273, 1);
      close0(x_278, n_277);
      move1(x_275, x_278);
      free(_273);
      break;
    }
  }
  return x_275;
}

fn fn1_aux_458(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_459, aux_240, i_246);
      move1(x_249, x_459);
      x_252 := fn0_ord_444(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_447(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_444(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_447(x_255);
      x_253 := fn0_str_450(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_436(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_437, loop_213, x_219);
      appc(x_438, x_437, x_221);
      move1(x_218, x_438);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_426(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_427, loop_198, x_204);
      appc(x_428, x_427, x_205);
      move1(x_203, x_428);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_398(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_384(y_148);
  x_150 := fn0_sub_390(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_399, loop_146, n_153);
      appc(x_400, x_399, y_148);
      move1(x_154, x_400);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_325, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_328, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_331, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_334, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_337, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_340, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_343, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_346, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_349, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_352, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_355, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_358, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_361, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_364, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_367, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_370, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_373, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_376, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_379, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_382, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_385, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_388, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_391, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_394, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_397, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_407, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_410, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_415, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_420, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_425, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_435, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_445, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_448, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_451, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_454, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_457, fvc:=0, argc:=1);
  mkclo0(alice_264, fn1_alice_467, fvc:=0, argc:=4);
  mkclo0(bob_279, fn1_bob_471, fvc:=0, argc:=4);
  mkclo0(key_exchange_294, fn1_key_exchange_475, fvc:=0, argc:=1);
  x_323 := fn0_key_exchange_474(tt_3);
  force(x_481, x_323);
  return x_481;
}

-----------------------------------------

compilation success

-----------------------------------------

