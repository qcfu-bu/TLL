[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "cmsort_ch"; relv = N;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "cmsort_ch"),
              [([(PId "xs")],
                (Some (Ch (true,
                         (Act (R, true,
                            (UOpr ("`",
                               (App [(Id ("msort", I)); (Id ("xs", I))]))),
                            (Binder ("_", End))))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "cmsort_worker"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("_",
                 (Pi (R, U,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("zs",
                       (Pi (R, L,
                          (App
                             [(Inst ("cmsort_ch", [(SId "t")], I));
                               (Id ("zs", I))]),
                          (Binder ("_", (IO (Id ("unit", I)))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cmsort_worker"),
              [([(PId "_"); (PId "nil"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Send (Id ("c", I)));
                              (App [(Id ("just", I)); (Id ("nil", I))])]),
                         (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "_"); (PBOpr ("::", (PId "z"), (PId "nil")));
                   (PId "c")],
                 (Some (MLet (
                          (App
                             [(Send (Id ("c", I)));
                               (App
                                  [(Id ("just", I));
                                    (BOpr ("::", (Id ("z", I)),
                                       (Id ("nil", I))))
                                    ])
                               ]),
                          (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "i"); (PId "zs"); (PId "c")],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("i", I)), (Int 0))), None)],
                          None,
                          [([(PId "true")],
                            (Some (MLet (
                                     (App
                                        [(Send (Id ("c", I)));
                                          (App
                                             [(Id ("just", I));
                                               (App
                                                  [(Id ("msort", I));
                                                    (Id ("zs", I))])
                                               ])
                                          ]),
                                     (Binder ((PId "c"),
                                        (Close (Id ("c", I)))))
                                     ))));
                            ([(PId "false")],
                             (Some (Match (
                                      [(R,
                                        (App
                                           [(Id ("split", I)); (Id ("zs", I))
                                             ]),
                                        (Some ("h1", IMeta)));
                                        (N, (Id ("refl", I)),
                                         (Some ("_",
                                                (BOpr ("=",
                                                   (Let (R, (Id ("h1", I)),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      )),
                                                   (Let (R,
                                                      (App
                                                         [(Id ("split", I));
                                                           (Id ("zs", I))]),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      ))
                                                   )))))
                                        ],
                                      None,
                                      [([(PBOpr ("\226\159\168,\226\159\169",
                                            (PId "xs0"), (PId "ys0")));
                                          (PId "pf")],
                                        (Some (MLet (
                                                 (Fork
                                                    (Fun (
                                                       (Pi (R, L, IMeta,
                                                          (Binder ("",
                                                             (IO
                                                                (Id ("unit",
                                                                   I)))
                                                             ))
                                                          )),
                                                       (Binder (None,
                                                          [([(PId "c1")],
                                                            (Some (App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ));
                                                                    (Id (
                                                                    "c1", I))
                                                                    ])))
                                                            ]
                                                          )),
                                                       []))),
                                                 (Binder ((PId "r1"),
                                                    (MLet (
                                                       (Fork
                                                          (Fun (
                                                             (Pi (R, L,
                                                                IMeta,
                                                                (Binder ("",
                                                                   (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    )))
                                                                   ))
                                                                )),
                                                             (Binder (None,
                                                                [([(PId "c2")
                                                                    ],
                                                                  (Some (
                                                                  App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ));
                                                                    (Id (
                                                                    "c2", I))
                                                                    ])))
                                                                  ]
                                                                )),
                                                             []))),
                                                       (Binder ((PId "r2"),
                                                          (MLet (
                                                             (Recv
                                                                (Id ("r1", I
                                                                   ))),
                                                             (Binder (
                                                                (PBOpr (
                                                                   "\226\159\168,\226\159\169",
                                                                   (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "xs1")])),
                                                                   (PId "c1")
                                                                   )),
                                                                (MLet (
                                                                   (Recv
                                                                    (Id (
                                                                    "r2", I))),
                                                                   (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "ys1")])),
                                                                    (PId "c2")
                                                                    )),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (Id (
                                                                    "xs1", I
                                                                    ));
                                                                    (Id (
                                                                    "ys1", I
                                                                    ))])]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ))]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ))])])))
                                                                    )),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "rwl", I
                                                                    ));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U, IMeta,
                                                                    (Binder (
                                                                    "x",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "x")],
                                                                    (Some (
                                                                    UOpr (
                                                                    "`",
                                                                    (Id ("x",
                                                                    I))))))]
                                                                    )), 
                                                                    []));
                                                                    (Id (
                                                                    "pf", I));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]))))),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c1", I))),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c2", I))),
                                                                    (Close
                                                                    (Id ("c",
                                                                    I)))))))
                                                                    ))))))))
                                                                    ))))))
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))))
                                        ]
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, Int_t,
           (Binder ("_",
              (Pi (R, U,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("zs",
                    (Pi (R, L,
                       (App
                          [(Inst ("cmsort_ch", [(SId "t")], I));
                            (Id ("zs", I))]),
                       (Binder ("_", (IO (Id ("unit", I)))))))
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "cmsort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("zs",
                 (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))
                 ))
              )),
           (Binder ((Some "cmsort"),
              [([(PId "zs")],
                (Some (MLet (
                         (Fork
                            (Fun (
                               (Pi (R, L, IMeta,
                                  (Binder ("", (IO (Id ("unit", I))))))),
                               (Binder (None,
                                  [([(PId "c")],
                                    (Some (App
                                             [(Id ("cmsort_worker", I));
                                               (Int 4); (Id ("zs", I));
                                               (Id ("c", I))])))
                                    ]
                                  )),
                               []))),
                         (Binder ((PId "c"),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "msg"), (PId "c"))),
                                  (BOpr (";", (Close (Id ("c", I))),
                                     (Return (Id ("msg", I)))))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("zs",
              (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))))
           )))
       ));
    view = [E]};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "print_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", (IO (Id ("unit", I))))))),
           (Binder ((Some "print_list"),
              [([(PId "nil")], (Some (Print (String "nil"))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr (";",
                          (Print
                             (App [(Id ("string_of_int", I)); (Id ("x", I))])),
                          (BOpr (";", (Print (String " :: ")),
                             (App [(Id ("print_list", I)); (Id ("xs", I))])))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", (IO (Id ("unit", I))))))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 2000000)]),
           (Binder ((PId "test"),
              (MLet ((App [(Id ("cmsort", I)); (Id ("test", I))]),
                 (Binder ((PConstr ("just", [(PId "sorted")])),
                    (Let (R,
                       (App [(Id ("list_len", I)); (Id ("sorted", I))]),
                       (Binder ((PId "len"),
                          (Print
                             (App
                                [(Id ("string_of_int", I)); (Id ("len", I))]))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

parse success

-----------------------------------------

#[program]
def id_1‹s_531› : ∀ (A_532 : Type‹s_531›) -> A_532 -> ?_2[0;0] :=
  fun id_534 : ∀ (A_535 : Type‹s_531›) -> A_535 -> ?_1[0;0]
  | A_537, m_538 => m_538

#[logical]
inductive eq_1‹s_539› (A_540 : Type‹s_539›) (m_541 : A_540):
  A_540 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_541 m_541)

#[program]
def rwl_2‹s_543,r_544› :
  ∀ {A_545 : Type‹s_543›} ->
    ∀ {m_546 : A_545} ->
      ∀ {n_547 : A_545} ->
        ∀ {B_548 : A_545 -> Type‹r_544›} ->
          {(eq_1‹??_3› ?_5[0;0] m_546 n_547)} ->
            ((B_548) m_546) -> ((B_548) n_547)
:=
  fun rwl_552 :
    ∀ {A_553 : Type‹s_543›} ->
      ∀ {m_554 : A_553} ->
        ∀ {n_555 : A_553} ->
          ∀ {B_556 : A_553 -> Type‹r_544›} ->
            {(eq_1‹??_2› ?_4[0;0] m_554 n_555)} ->
              ((B_556) m_554) -> ((B_556) n_555)
  | A_560, m_561, n_562, B_563, refl_1, x_564 => x_564

#[program]
def rwr_3‹s_565,r_566› :
  ∀ {A_567 : Type‹s_565›} ->
    ∀ {m_568 : A_567} ->
      ∀ {n_569 : A_567} ->
        ∀ {B_570 : A_567 -> Type‹r_566›} ->
          {(eq_1‹??_5› ?_7[0;0] m_568 n_569)} ->
            ((B_570) n_569) -> ((B_570) m_568)
:=
  fun rwr_574 :
    ∀ {A_575 : Type‹s_565›} ->
      ∀ {m_576 : A_575} ->
        ∀ {n_577 : A_575} ->
          ∀ {B_578 : A_575 -> Type‹r_566›} ->
            {(eq_1‹??_4› ?_6[0;0] m_576 n_577)} ->
              ((B_578) n_577) -> ((B_578) m_576)
  | A_582, m_583, n_584, B_585, refl_1, x_586 => x_586

#[logical]
def congr_4‹s_587,r_588,t_589› :
  ∀ (A_590 : Type‹s_587›) ->
    ∀ (B_591 : Type‹r_588›) ->
      ∀ (m_592 : A_590) ->
        ∀ (n_593 : A_590) ->
          ∀ (f_594 : forall‹t_589›(__595 : A_590), B_591) ->
            (eq_1‹??_9› ?_12[0;0] m_592 n_593) ->
              (eq_1‹??_10› ?_13[0;0] ((f_594) m_592) ((f_594) n_593))
:=
  fun congr_597 :
    ∀ (A_598 : Type‹s_587›) ->
      ∀ (B_599 : Type‹r_588›) ->
        ∀ (m_600 : A_598) ->
          ∀ (n_601 : A_598) ->
            ∀ (f_602 : forall‹t_589›(__603 : A_598), B_599) ->
              (eq_1‹??_6› ?_8[0;0] m_600 n_601) ->
                (eq_1‹??_7› ?_9[0;0] ((f_602) m_600) ((f_602) n_601))
  | A_605, B_606, m_607, n_608, f_609, refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_610 : U} ->
    ∀ {m_611 : A_610} ->
      ∀ (x_612 : (eq_1‹??_15› ?_20[0;0] m_611 m_611)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_612 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_613 :
    ∀ {A_614 : U} ->
      ∀ {m_615 : A_614} ->
        ∀ (x_616 : (eq_1‹??_11› ?_14[0;0] m_615 m_615)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_616 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_617, m_618, refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_619,t_620› (A_621 : Type‹s_619›):
  A_621 -> Type‹t_620›
where
| just_2 (m_623 : A_621) : (sing_2‹??_18,??_19› ?_24[0;0] m_623)

#[logical]
def ssing_6‹s_624› :
  ∀ (A_625 : Type‹s_624›) -> A_625 -> Type‹s_624›
:=
  fun ssing_627 : ∀ (A_628 : Type‹s_624›) -> A_628 -> Type‹s_624›
  | A_630, m_631 => (sing_2‹s_624,s_624› A_630 m_631)

#[program]
def sing_elim_7‹s_632,t_633› :
  ∀ {A_634 : Type‹s_632›} ->
    ∀ {x_635 : A_634} -> (sing_2‹s_632,t_633› ?_26[0;0] x_635) -> A_634
:=
  fun sing_elim_637 :
    ∀ {A_638 : Type‹s_632›} ->
      ∀ {x_639 : A_638} ->
        (sing_2‹s_632,t_633› ?_25[0;0] x_639) -> A_638
  | A_641, x_642, (just_2 x_643) => x_643

#[logical]
def sing_uniq_8‹s_644,t_645› :
  ∀ (A_646 : Type‹s_644›) ->
    ∀ (x0_647 : A_646) ->
      ∀ (x_648 : (sing_2‹s_644,t_645› ?_33[0;0] x0_647)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_647
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_648))
:=
  fun sing_uniq_649 :
    ∀ (A_650 : Type‹s_644›) ->
      ∀ (x0_651 : A_650) ->
        ∀ (x_652 : (sing_2‹s_644,t_645› ?_27[0;0] x0_651)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_651
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_652))
  | A_653, x0_654, (just_2 _655) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_656 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_656 tt_3)
:=
  fun unit_eta_657 :
    ∀ (x_658 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_658 tt_3)
  | x_659 =>
    match x_659 in
      ∀ (x0_660 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_660 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_662 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_666 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | _669, _670 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_673 : bool_4 -> bool_4 -> bool_4
  | false_5, false_5 => false_5
  | _676, _677 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -> bool_4 :=
  fun xor_680 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | false_5, false_5 => false_5
  | _683, _684 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_685 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_688 : nat_5 -> nat_5 -> bool_4
  | zero_6, _691 => true_4
  | _692, zero_6 => false_5
  | (succ_7 x_693), (succ_7 y_694) => ((lte_688) x_693 y_694)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_697 : nat_5 -> nat_5 -> bool_4
  | x_700, y_701 => ((lte_14) (succ_7‹› x_700) y_701)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_703 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_705) => x_705

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_708 : nat_5 -> nat_5 -> nat_5
  | zero_6, y_711 => y_711
  | (succ_7 x_712), y_713 => (succ_7‹› ((add_708) x_712 y_713))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_716 : nat_5 -> nat_5 -> nat_5
  | x_719, zero_6 => x_719
  | x_720, (succ_7 y_721) => ((sub_716) ((pred_16) x_720) y_721)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_724 : nat_5 -> nat_5 -> nat_5
  | zero_6, _727 => zero_6
  | (succ_7 x_728), y_729 => ((add_17) y_729 ((mul_724) x_728 y_729))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_732 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_735, y_736 =>
    match ((lt_15) x_735 y_736) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_738 :=
        fun loop_739 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_742, y_743 =>
          match ((sub_18) x_742 ((pred_16) y_743)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_745) => (succ_7‹› ((loop_739) x_745 y_743))
      in ((loop_738) x_735 y_736)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_748 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_751, y_752 => ((sub_18) x_751 ((mul_19) ((div_20) x_751 y_752) y_752))

#[program]
inductive list_6‹s_753,t_754› (A_755 : Type‹s_753›): Type‹t_754›
where
| nil_8 : (list_6‹??_31,??_32› A_755)
| cons_9
    (hd_756 : A_755) (tl_757 : (list_6‹??_33,t_754› A_755))
    : (list_6‹??_34,??_35› A_755)

#[program]
def free_list_22‹s_758,t_759› :
  ∀ {A_760 : Type‹s_758›} ->
    A_760 -> unit_3 -> (list_6‹??_37,t_759› A_760) -> unit_3
:=
  fun free_list_764 :
    ∀ {A_765 : Type‹s_758›} ->
      A_765 -> unit_3 -> (list_6‹??_36,t_759› A_765) -> unit_3
  | A_769, f_770, nil_8 => tt_3
  | A_771, f_772, (cons_9 x_773 xs_774) =>
    let __775 := ((f_772) x_773) in ((free_list_764) ?_52[0;0] f_772 xs_774)

#[program]
inductive exists0_7‹s_776,r_777› (A_778 : Type‹s_776›) (B_779 : 
A_778 -> Type‹r_777›): L where
| ex0_10
    {m_781 : A_778} (n_782 : ((B_779) m_781))
    : (exists0_7‹??_38,??_39› A_778 B_779)

#[program]
inductive exists1_8‹s_783,r_784› (A_785 : Type‹s_783›) (B_786 : 
A_785 -> Type‹r_784›): L where
| ex1_11
    (m_788 : A_785) (n_789 : ((B_786) m_788))
    : (exists1_8‹??_40,??_41› A_785 B_786)

#[logical]
def prod0_23‹s_790,r_791› :
  Type‹s_790› -> Type‹r_791› -> ?_56[0;0]
:=
  fun prod0_794 : Type‹s_790› -> Type‹r_791› -> ?_53[0;0]
  | A_797, B_798 =>
    (exists0_7‹??_42,??_43›
      A_797 fun _799 : ?_54[0;0] -> ?_55[0;0]
            | _801 => B_798)

#[logical]
def prod1_24‹s_802,r_803› :
  Type‹s_802› -> Type‹r_803› -> ?_60[0;0]
:=
  fun prod1_806 : Type‹s_802› -> Type‹r_803› -> ?_57[0;0]
  | A_809, B_810 =>
    (exists1_8‹??_44,??_45›
      A_809 fun _811 : ?_58[0;0] -> ?_59[0;0]
            | _813 => B_810)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_816 : int -> int -> int
  | x_819, y_820 =>
    let loop_821 :=
      fun loop_822 : int -> int -> int
      | acc_825, y_826 =>
        match (__lte__ y_826 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_825
        | false_5 => ((loop_822) (__mul__ x_819 acc_825) (__sub__ y_826 1))
    in ((loop_821) 1 y_820)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_831 : int -> int -> int -> int
  | x_835, y_836, m_837 =>
    let loop_838 :=
      fun loop_839 : int -> int -> int
      | acc_842, y_843 =>
        match (__lte__ y_843 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_842
        | false_5 =>
          ((loop_839)
            (__mod__ (__mul__ x_835 acc_842) m_837) (__sub__ y_843 1))
    in ((loop_838) 1 y_836)

#[program]
def ord_27‹› : char -> int :=
  fun ord_846 : char -> int
  | c_848 => (__ord__ c_848)

#[program]
def chr_28‹› : int -> char :=
  fun chr_850 : int -> char
  | i_852 => (__chr__ i_852)

#[program]
def str_29‹› : char -> string :=
  fun str_854 : char -> string
  | c_856 => (__push__ "" c_856)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_858 : string -> int
  | s_860 => (__size__ s_860)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_862 : int -> string
  | i_864 =>
    let aux_865 :=
      fun aux_866 : int -> string
      | i_868 =>
        match (__lte__ 10 i_868) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_870 := (__mod__ i_868 10) in
          let i_871 := (__div__ i_868 10) in
          (__push__ ((aux_866) i_871)
            ((chr_28) (__add__ r_870 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_868 ((ord_27) 0))))
    in
    match (__lte__ 0 i_864) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_865) i_864)
    | false_5 => (__cat__ "~" ((aux_865) (__neg__ i_864)))

#[program]
def split_32‹t_873› :
  (list_6‹??_71,t_873› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_873› int) (list_6‹??_73,t_873› int))
:=
  fun split_875 :
    (list_6‹??_46,t_873› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_873› int) (list_6‹??_48,t_873› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_877 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_877 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_878 (cons_9 y_879 zs_880)) =>
    match ((split_875) zs_880) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_882 ys_883) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_878 xs_882)
        (cons_9‹??_67,??_68› ?_79[0;0] y_879 ys_883))

#[program]
def merge_33‹t_884› :
  (list_6‹??_87,t_884› int) ->
    (list_6‹??_88,t_884› int) -o (list_6‹??_89,t_884› int)
:=
  fun merge_887 :
    (list_6‹??_76,t_884› int) ->
      (list_6‹??_77,t_884› int) -o (list_6‹??_78,t_884› int)
  | nil_8, ys_890 => ys_890
  | xs_891, nil_8 => xs_891
  | (cons_9 x_892 xs_893), (cons_9 y_894 ys_895) =>
    match (__lte__ x_892 y_894) in ?_84[0;0] -o ?_85[0;0] with
    | true_4 =>
      (cons_9‹??_81,??_82›
        ?_87[0;0] x_892
        ((merge_887) xs_893 (cons_9‹??_79,??_80› ?_86[0;0] y_894 ys_895)))
    | false_5 =>
      (cons_9‹??_85,??_86›
        ?_89[0;0] y_894
        ((merge_887) (cons_9‹??_83,??_84› ?_88[0;0] x_892 xs_893) ys_895))

#[program]
def msort_34‹t_897› :
  (list_6‹??_100,t_897› int) -> (list_6‹??_101,t_897› int)
:=
  fun msort_899 :
    (list_6‹??_90,t_897› int) -> (list_6‹??_91,t_897› int)
  | nil_8 => (nil_8‹??_92,??_93› ?_90[0;0])
  | (cons_9 z_901 nil_8) =>
    (cons_9‹??_96,??_97›
      ?_92[0;0] z_901 (nil_8‹??_94,??_95› ?_91[0;0]))
  | zs_902 =>
    match ((split_32‹??_98›) zs_902) in ?_94[0;0] -o ?_93[0;0] with
    | (ex1_11 xs_904 ys_905) =>
      ((merge_33‹??_99›) ((msort_899) xs_904) ((msort_899) ys_905))

#[logical]
def cmsort_ch_35‹t_906› : (list_6‹??_105,t_906› int) -> L :=
  fun cmsort_ch_908 : (list_6‹??_102,t_906› int) -> L
  | xs_910 =>
    ch⟨⇑(__911 :
           ((ssing_6‹??_104›) ?_95[0;0] ((msort_34‹??_103›) xs_910))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_912› :
  int ->
    ∀ (zs_914 : (list_6‹??_142,t_912› int)) ->
      ((cmsort_ch_35‹t_912›) zs_914) -o IO unit_3
:=
  fun cmsort_worker_916 :
    int ->
      ∀ (zs_918 : (list_6‹??_106,t_912› int)) ->
        ((cmsort_ch_35‹t_912›) zs_918) -o IO unit_3
  | _920, nil_8, c_921 =>
    let* c_922 :=
      ((send c_921)
        (just_2‹??_109,??_110›
          ?_97[0;0] (nil_8‹??_107,??_108› ?_96[0;0])))
    in close c_922
  | _923, (cons_9 z_924 nil_8), c_925 =>
    let* c_926 :=
      ((send c_925)
        (just_2‹??_115,??_116›
          ?_100[0;0]
          (cons_9‹??_113,??_114›
            ?_99[0;0] z_924 (nil_8‹??_111,??_112› ?_98[0;0]))))
    in close c_926
  | i_927, zs_928, c_929 =>
    match (__lte__ i_927 0) in ?_101[0;0] -o ?_102[0;0] with
    | true_4 =>
      let* c_931 :=
        ((send c_929)
          (just_2‹??_118,??_119›
            ?_103[0;0] ((msort_34‹??_117›) zs_928)))
      in close c_931
    | false_5 =>
      match ((split_32‹??_120›) zs_928),
      (refl_1‹??_121› ?_104[0;0] ?_105[0;0]) in
        ∀ (h1_932 : ?_106[0;0]) -o
          {(eq_1‹??_129›
             ?_111[0;0]
             match h1_932 in ?_108[0;0] -o ?_107[0;0] with
             | (ex1_11 xs_935 ys_936) =>
               ((merge_33‹??_124›)
                 ((msort_34‹??_122›) xs_935)
                 ((msort_34‹??_123›) ys_936))
             match ((split_32‹??_125›) zs_928) in
               ?_110[0;0] -o ?_109[0;0]
             with
             | (ex1_11 xs_938 ys_939) =>
               ((merge_33‹??_128›)
                 ((msort_34‹??_126›) xs_938)
                 ((msort_34‹??_127›) ys_939)))} -o
            ?_112[0;0]
      with
      | (ex1_11 xs0_940 ys0_941), pf_942 =>
        let* r1_943 :=
          fork
            fun _944 : ?_113[0;0] -o IO unit_3
            | c1_946 =>
              ((cmsort_worker_916) (__sub__ i_927 1) xs0_940 c1_946)
        in
        let* r2_947 :=
          fork
            fun _948 : ?_114[0;0] -o IO unit_3
            | c2_950 =>
              ((cmsort_worker_916) (__sub__ i_927 1) ys0_941 c2_950)
        in
        let* _951 := recv r1_943 in
        match _951 in ?_127[0;0] -o ?_126[0;0] with
        | (ex1_11 (just_2 xs1_953) c1_954) =>
          let* _955 := recv r2_947 in
          match _955 in ?_125[0;0] -o ?_124[0;0] with
          | (ex1_11 (just_2 ys1_957) c2_958) =>
            let zs1_959 :=
              ((just_2‹??_131,??_132›
                 ?_115[0;0] ((merge_33‹??_130›) xs1_953 ys1_957))
                : ((ssing_6‹??_136›)
                    ?_116[0;0]
                    ((merge_33‹??_135›)
                      ((msort_34‹??_133›) xs0_940)
                      ((msort_34‹??_134›) ys0_941))))
            in
            let zs1_960 :=
              (((rwl_2‹??_138,??_139›)
                 ?_122[0;0] ?_121[0;0] ?_120[0;0]
                 fun _961 : ?_117[0;0] -> ?_118[0;0]
                 | x_963 => ((ssing_6‹??_137›) ?_119[0;0] x_963) pf_942
                 zs1_959)
                : ((ssing_6‹??_141›)
                    ?_123[0;0] ((msort_34‹??_140›) zs_928)))
            in
            let* c_964 := ((send c_929) zs1_960) in
            let* __965 := close c1_954 in
            let* __966 := close c2_958 in close c_964

#[program]
def cmsort_37‹t_967› :
  ∀ (zs_968 : (list_6‹??_147,t_967› int)) ->
    IO ((ssing_6‹??_149›) ?_132[0;0] ((msort_34‹??_148›) zs_968))
:=
  fun cmsort_969 :
    ∀ (zs_970 : (list_6‹??_143,t_967› int)) ->
      IO ((ssing_6‹??_145›) ?_128[0;0] ((msort_34‹??_144›) zs_970))
  | zs_971 =>
    let* c_972 :=
      fork
        fun _973 : ?_129[0;0] -o IO unit_3
        | c_975 => ((cmsort_worker_36‹??_146›) 4 zs_971 c_975)
    in
    let* _976 := recv c_972 in
    match _976 in ?_131[0;0] -o ?_130[0;0] with
    | (ex1_11 msg_978 c_979) => let* __980 := close c_979 in return msg_978

#[program]
def mklist_38‹t_981› : int -> (list_6‹??_155,t_981› int) :=
  fun mklist_983 : int -> (list_6‹??_150,t_981› int)
  | n_985 =>
    match (__lte__ n_985 0) in ?_133[0;0] -o ?_134[0;0] with
    | true_4 => (nil_8‹??_151,??_152› ?_135[0;0])
    | false_5 =>
      (cons_9‹??_153,??_154›
        ?_136[0;0] n_985 ((mklist_983) (__sub__ n_985 1)))

#[program]
def list_len_39‹t_987› : (list_6‹??_157,t_987› int) -> int :=
  fun list_len_989 : (list_6‹??_156,t_987› int) -> int
  | nil_8 => 0
  | (cons_9 _991 xs_992) => (__add__ 1 ((list_len_989) xs_992))

#[program]
def print_list_40‹t_993› : (list_6‹??_159,t_993› int) -> IO unit_3 :=
  fun print_list_995 : (list_6‹??_158,t_993› int) -> IO unit_3
  | nil_8 => print "nil"
  | (cons_9 x_997 xs_998) =>
    let* __999 := print ((string_of_int_31) x_997) in
    let* __1000 := print " :: " in ((print_list_995) xs_998)

#[program]
def main_41‹› : IO unit_3 :=
  let test_1001 := ((mklist_38‹L›) 2000000) in
  let* _1002 := ((cmsort_37‹??_160›) test_1001) in
  match _1002 in ?_138[0;0] -o ?_137[0;0] with
  | (just_2 sorted_1004) =>
    let len_1005 := ((list_len_39‹??_161›) sorted_1004) in
    print ((string_of_int_31) len_1005)

trans01 success

-----------------------------------------

#[program]
def id_1‹s_12186› :
  ∀ (A_12187 : Type‹s_12186›) -> A_12187 -> A_12187
:=
  fun id_12189 : ∀ (A_12190 : Type‹s_12186›) -> A_12190 -> A_12190
  | A_12192, m_12193 => m_12193

#[logical]
inductive eq_1‹s_12194› (A_12195 : Type‹s_12194›) (m_12196 : A_12195):
  A_12195 -> U
where
| refl_1 : (eq_1‹s_12194› A_12195 m_12196 m_12196)

#[program]
def rwl_2‹s_12198,r_12199› :
  ∀ {A_12200 : Type‹s_12198›} ->
    ∀ {m_12201 : A_12200} ->
      ∀ {n_12202 : A_12200} ->
        ∀ {B_12203 : A_12200 -> Type‹r_12199›} ->
          {(eq_1‹s_12198› A_12200 m_12201 n_12202)} ->
            ((B_12203) m_12201) -> ((B_12203) n_12202)
:=
  fun rwl_12207 :
    ∀ {A_12208 : Type‹s_12198›} ->
      ∀ {m_12209 : A_12208} ->
        ∀ {n_12210 : A_12208} ->
          ∀ {B_12211 : A_12208 -> Type‹r_12199›} ->
            {(eq_1‹s_12198› A_12208 m_12209 n_12210)} ->
              ((B_12211) m_12209) -> ((B_12211) n_12210)
  | A_12215, m_12216, n_12217, B_12218, refl_1, __12219 => __12219

#[program]
def rwr_3‹s_12220,r_12221› :
  ∀ {A_12222 : Type‹s_12220›} ->
    ∀ {m_12223 : A_12222} ->
      ∀ {n_12224 : A_12222} ->
        ∀ {B_12225 : A_12222 -> Type‹r_12221›} ->
          {(eq_1‹s_12220› A_12222 m_12223 n_12224)} ->
            ((B_12225) n_12224) -> ((B_12225) m_12223)
:=
  fun rwr_12229 :
    ∀ {A_12230 : Type‹s_12220›} ->
      ∀ {m_12231 : A_12230} ->
        ∀ {n_12232 : A_12230} ->
          ∀ {B_12233 : A_12230 -> Type‹r_12221›} ->
            {(eq_1‹s_12220› A_12230 m_12231 n_12232)} ->
              ((B_12233) n_12232) -> ((B_12233) m_12231)
  | A_12237, m_12238, n_12239, B_12240, refl_1, __12241 => __12241

#[logical]
def congr_4‹s_12242,r_12243,t_12244› :
  ∀ (A_12245 : Type‹s_12242›) ->
    ∀ (B_12246 : Type‹r_12243›) ->
      ∀ (m_12247 : A_12245) ->
        ∀ (n_12248 : A_12245) ->
          ∀ (f_12249 : forall‹t_12244›(__12250 : A_12245), B_12246) ->
            (eq_1‹s_12242› A_12245 m_12247 n_12248) ->
              (eq_1‹r_12243›
                B_12246 ((f_12249) m_12247) ((f_12249) n_12248))
:=
  fun congr_12252 :
    ∀ (A_12253 : Type‹s_12242›) ->
      ∀ (B_12254 : Type‹r_12243›) ->
        ∀ (m_12255 : A_12253) ->
          ∀ (n_12256 : A_12253) ->
            ∀ (f_12257 :
              forall‹t_12244›(__12258 : A_12253), B_12254) ->
              (eq_1‹s_12242› A_12253 m_12255 n_12256) ->
                (eq_1‹r_12243›
                  B_12254 ((f_12257) m_12255) ((f_12257) n_12256))
  | A_12260, B_12261, m_12262, n_12263, f_12264, refl_1 =>
    (refl_1‹r_12243› B_12261 ((f_12264) n_12263))

#[logical]
def axiom_K_5‹› :
  ∀ {A_12265 : U} ->
    ∀ {m_12266 : A_12265} ->
      ∀ (x_12267 : (eq_1‹U› A_12265 m_12266 m_12266)) ->
        (eq_1‹U›
          (eq_1‹U› A_12265 m_12266 m_12266) x_12267
          (refl_1‹U› A_12265 m_12266))
:=
  fun axiom_K_12268 :
    ∀ {A_12269 : U} ->
      ∀ {m_12270 : A_12269} ->
        ∀ (x_12271 : (eq_1‹U› A_12269 m_12270 m_12270)) ->
          (eq_1‹U›
            (eq_1‹U› A_12269 m_12270 m_12270) x_12271
            (refl_1‹U› A_12269 m_12270))
  | A_12272, m_12273, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_12272 m_12273 m_12273) (refl_1‹U› A_12272 m_12273))

#[program]
inductive sing_2‹s_12274,t_12275› (A_12276 : Type‹s_12274›):
  A_12276 -> Type‹t_12275›
where
| just_2 (m_12278 : A_12276) : (sing_2‹s_12274,t_12275› A_12276 m_12278)

#[logical]
def ssing_6‹s_12279› :
  ∀ (A_12280 : Type‹s_12279›) -> A_12280 -> Type‹s_12279›
:=
  fun ssing_12282 :
    ∀ (A_12283 : Type‹s_12279›) -> A_12283 -> Type‹s_12279›
  | A_12285, m_12286 => (sing_2‹s_12279,s_12279› A_12285 m_12286)

#[program]
def sing_elim_7‹s_12287,t_12288› :
  ∀ {A_12289 : Type‹s_12287›} ->
    ∀ {x_12290 : A_12289} ->
      (sing_2‹s_12287,t_12288› A_12289 x_12290) -> A_12289
:=
  fun sing_elim_12292 :
    ∀ {A_12293 : Type‹s_12287›} ->
      ∀ {x_12294 : A_12293} ->
        (sing_2‹s_12287,t_12288› A_12293 x_12294) -> A_12293
  | A_12296, x_12297, (just_2 m_12298) => m_12298

#[logical]
def sing_uniq_8‹s_12299,t_12300› :
  ∀ (A_12301 : Type‹s_12299›) ->
    ∀ (x0_12302 : A_12301) ->
      ∀ (x_12303 : (sing_2‹s_12299,t_12300› A_12301 x0_12302)) ->
        (eq_1‹s_12299›
          A_12301 x0_12302
          ((sing_elim_7‹s_12299,t_12300›) A_12301 x0_12302 x_12303))
:=
  fun sing_uniq_12304 :
    ∀ (A_12305 : Type‹s_12299›) ->
      ∀ (x0_12306 : A_12305) ->
        ∀ (x_12307 : (sing_2‹s_12299,t_12300› A_12305 x0_12306)) ->
          (eq_1‹s_12299›
            A_12305 x0_12306
            ((sing_elim_7‹s_12299,t_12300›) A_12305 x0_12306 x_12307))
  | A_12308, x0_12309, (just_2 m_12310) =>
    (refl_1‹s_12299› A_12308 m_12310)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_12311 : unit_3) -> (eq_1‹U› unit_3 x_12311 tt_3)
:=
  fun unit_eta_12312 :
    ∀ (x_12313 : unit_3) -> (eq_1‹U› unit_3 x_12313 tt_3)
  | x_12314 =>
    match x_12314 in
      ∀ (x0_12315 : unit_3) -o (eq_1‹U› unit_3 x0_12315 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_12317 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_12321 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __12324 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_12327 : bool_4 -> bool_4 -> bool_4
  | true_4, __12330 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -> bool_4 :=
  fun xor_12333 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_12336 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_12339 : nat_5 -> nat_5 -> bool_4
  | zero_6, __12342 => true_4
  | (succ_7 n_12343), zero_6 => false_5
  | (succ_7 n_12344), (succ_7 n_12345) => ((lte_12339) n_12344 n_12345)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_12348 : nat_5 -> nat_5 -> bool_4
  | x_12351, y_12352 => ((lte_14) (succ_7‹› x_12351) y_12352)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_12354 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_12356) => n_12356

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_12359 : nat_5 -> nat_5 -> nat_5
  | zero_6, __12362 => __12362
  | (succ_7 n_12363), __12364 => (succ_7‹› ((add_12359) n_12363 __12364))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_12367 : nat_5 -> nat_5 -> nat_5
  | __12370, zero_6 => __12370
  | __12371, (succ_7 n_12372) => ((sub_12367) ((pred_16) __12371) n_12372)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_12375 : nat_5 -> nat_5 -> nat_5
  | zero_6, __12378 => zero_6
  | (succ_7 n_12379), __12380 =>
    ((add_17) __12380 ((mul_12375) n_12379 __12380))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_12383 : nat_5 -> nat_5 -> nat_5
  | x_12386, y_12387 =>
    match ((lt_15) x_12386 y_12387) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_12389 :=
        fun loop_12390 : nat_5 -> nat_5 -> nat_5
        | x_12393, y_12394 =>
          match ((sub_18) x_12393 ((pred_16) y_12394)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_12396) => (succ_7‹› ((loop_12390) n_12396 y_12394))
      in ((loop_12389) x_12386 y_12387)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_12399 : nat_5 -> nat_5 -> nat_5
  | x_12402, y_12403 =>
    ((sub_18) x_12402 ((mul_19) ((div_20) x_12402 y_12403) y_12403))

#[program]
inductive list_6‹s_12404,t_12405› (A_12406 : Type‹s_12404›):
  Type‹t_12405›
where
| nil_8 : (list_6‹s_12404,t_12405› A_12406)
| cons_9
    (hd_12407 : A_12406) (tl_12408 : (list_6‹s_12404,t_12405› A_12406))
    : (list_6‹s_12404,t_12405› A_12406)

#[program]
def free_list_22‹s_12409,t_12410› :
  ∀ {A_12411 : Type‹s_12409›} ->
    A_12411 -> unit_3 -> (list_6‹s_12409,t_12410› A_12411) -> unit_3
:=
  fun free_list_12415 :
    ∀ {A_12416 : Type‹s_12409›} ->
      A_12416 -> unit_3 -> (list_6‹s_12409,t_12410› A_12416) -> unit_3
  | A_12420, f_12421, nil_8 => tt_3
  | A_12422, f_12423, (cons_9 hd_12424 tl_12425) =>
    let __12426 := ((f_12423) hd_12424) in
    ((free_list_12415) A_12422 f_12423 tl_12425)

#[program]
inductive exists0_7‹s_12427,r_12428› (A_12429 : Type‹s_12427›) (B_12430 : 
A_12429 -> Type‹r_12428›): L where
| ex0_10
    {m_12432 : A_12429} (n_12433 : ((B_12430) m_12432))
    : (exists0_7‹s_12427,r_12428› A_12429 B_12430)

#[program]
inductive exists1_8‹s_12434,r_12435› (A_12436 : Type‹s_12434›) (B_12437 : 
A_12436 -> Type‹r_12435›): L where
| ex1_11
    (m_12439 : A_12436) (n_12440 : ((B_12437) m_12439))
    : (exists1_8‹s_12434,r_12435› A_12436 B_12437)

#[logical]
def prod0_23‹s_12441,r_12442› :
  Type‹s_12441› -> Type‹r_12442› -> L
:=
  fun prod0_12445 : Type‹s_12441› -> Type‹r_12442› -> L
  | A_12448, B_12449 =>
    (exists0_7‹s_12441,r_12442›
      A_12448 fun _12450 : A_12448 -> Type‹r_12442›
              | __12452 => B_12449)

#[logical]
def prod1_24‹s_12453,r_12454› :
  Type‹s_12453› -> Type‹r_12454› -> L
:=
  fun prod1_12457 : Type‹s_12453› -> Type‹r_12454› -> L
  | A_12460, B_12461 =>
    (exists1_8‹s_12453,r_12454›
      A_12460 fun _12462 : A_12460 -> Type‹r_12454›
              | __12464 => B_12461)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_12467 : int -> int -> int
  | x_12470, y_12471 =>
    let loop_12472 :=
      fun loop_12473 : int -> int -> int
      | acc_12476, y_12477 =>
        match (__lte__ y_12477 0) in bool_4 -o int with
        | true_4 => acc_12476
        | false_5 =>
          ((loop_12473) (__mul__ x_12470 acc_12476) (__sub__ y_12477 1))
    in ((loop_12472) 1 y_12471)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_12482 : int -> int -> int -> int
  | x_12486, y_12487, m_12488 =>
    let loop_12489 :=
      fun loop_12490 : int -> int -> int
      | acc_12493, y_12494 =>
        match (__lte__ y_12494 0) in bool_4 -o int with
        | true_4 => acc_12493
        | false_5 =>
          ((loop_12490)
            (__mod__ (__mul__ x_12486 acc_12493) m_12488) (__sub__ y_12494 1))
    in ((loop_12489) 1 y_12487)

#[program]
def ord_27‹› : char -> int :=
  fun ord_12497 : char -> int
  | c_12499 => (__ord__ c_12499)

#[program]
def chr_28‹› : int -> char :=
  fun chr_12501 : int -> char
  | i_12503 => (__chr__ i_12503)

#[program]
def str_29‹› : char -> string :=
  fun str_12505 : char -> string
  | c_12507 => (__push__ "" c_12507)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_12509 : string -> int
  | s_12511 => (__size__ s_12511)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_12513 : int -> string
  | i_12515 =>
    let aux_12516 :=
      fun aux_12517 : int -> string
      | i_12519 =>
        match (__lte__ 10 i_12519) in bool_4 -o string with
        | true_4 =>
          let r_12521 := (__mod__ i_12519 10) in
          let i_12522 := (__div__ i_12519 10) in
          (__push__ ((aux_12517) i_12522)
            ((chr_28) (__add__ r_12521 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_12519 ((ord_27) 0))))
    in
    match (__lte__ 0 i_12515) in bool_4 -o string with
    | true_4 => ((aux_12516) i_12515)
    | false_5 => (__cat__ "~" ((aux_12516) (__neg__ i_12515)))

#[program]
def split_32‹t_12524› :
  (list_6‹U,t_12524› int) ->
    ((prod1_24‹t_12524,t_12524›)
      (list_6‹U,t_12524› int) (list_6‹U,t_12524› int))
:=
  fun split_12526 :
    (list_6‹U,t_12524› int) ->
      ((prod1_24‹t_12524,t_12524›)
        (list_6‹U,t_12524› int) (list_6‹U,t_12524› int))
  | nil_8 =>
    (ex1_11‹t_12524,t_12524›
      (list_6‹U,t_12524› int)
      fun _12528 : (list_6‹U,t_12524› int) -> Type‹t_12524›
      | __12530 => (list_6‹U,t_12524› int) (nil_8‹U,t_12524› int)
      (nil_8‹U,t_12524› int))
  | (cons_9 hd_12531 nil_8) =>
    (ex1_11‹t_12524,t_12524›
      (list_6‹U,t_12524› int)
      fun _12532 : (list_6‹U,t_12524› int) -> Type‹t_12524›
      | __12534 => (list_6‹U,t_12524› int)
      (cons_9‹U,t_12524› int hd_12531 (nil_8‹U,t_12524› int))
      (nil_8‹U,t_12524› int))
  | (cons_9 hd_12535 (cons_9 hd_12536 tl_12537)) =>
    match ((split_12526) tl_12537) in
      ((prod1_24‹t_12524,t_12524›)
        (list_6‹U,t_12524› int) (list_6‹U,t_12524› int)) -o
        ((prod1_24‹t_12524,t_12524›)
          (list_6‹U,t_12524› int) (list_6‹U,t_12524› int))
    with
    | (ex1_11 m_12539 n_12540) =>
      (ex1_11‹t_12524,t_12524›
        (list_6‹U,t_12524› int)
        fun _12541 : (list_6‹U,t_12524› int) -> Type‹t_12524›
        | __12543 => (list_6‹U,t_12524› int)
        (cons_9‹U,t_12524› int hd_12535 m_12539)
        (cons_9‹U,t_12524› int hd_12536 n_12540))

#[program]
def merge_33‹t_12544› :
  (list_6‹U,t_12544› int) ->
    (list_6‹U,t_12544› int) -o (list_6‹U,t_12544› int)
:=
  fun merge_12547 :
    (list_6‹U,t_12544› int) ->
      (list_6‹U,t_12544› int) -o (list_6‹U,t_12544› int)
  | nil_8, __12550 => __12550
  | (cons_9 hd_12551 tl_12552), nil_8 =>
    (cons_9‹U,t_12544› int hd_12551 tl_12552)
  | (cons_9 hd_12553 tl_12554), (cons_9 hd_12555 tl_12556) =>
    match (__lte__ hd_12553 hd_12555) in
      bool_4 -o (list_6‹U,t_12544› int)
    with
    | true_4 =>
      (cons_9‹U,t_12544›
        int hd_12553
        ((merge_12547)
          tl_12554 (cons_9‹U,t_12544› int hd_12555 tl_12556)))
    | false_5 =>
      (cons_9‹U,t_12544›
        int hd_12555
        ((merge_12547)
          (cons_9‹U,t_12544› int hd_12553 tl_12554) tl_12556))

#[program]
def msort_34‹t_12558› :
  (list_6‹U,t_12558› int) -> (list_6‹U,t_12558› int)
:=
  fun msort_12560 :
    (list_6‹U,t_12558› int) -> (list_6‹U,t_12558› int)
  | nil_8 => (nil_8‹U,t_12558› int)
  | (cons_9 hd_12562 nil_8) =>
    (cons_9‹U,t_12558› int hd_12562 (nil_8‹U,t_12558› int))
  | (cons_9 hd_12563 (cons_9 hd_12564 tl_12565)) =>
    match ((split_32‹t_12558›)
            (cons_9‹U,t_12558›
              int hd_12563 (cons_9‹U,t_12558› int hd_12564 tl_12565))) in
      ((prod1_24‹t_12558,t_12558›)
        (list_6‹U,t_12558› int) (list_6‹U,t_12558› int)) -o
        (list_6‹U,t_12558› int)
    with
    | (ex1_11 m_12567 n_12568) =>
      ((merge_33‹t_12558›)
        ((msort_12560) m_12567) ((msort_12560) n_12568))

#[logical]
def cmsort_ch_35‹t_12569› : (list_6‹U,t_12569› int) -> L :=
  fun cmsort_ch_12571 : (list_6‹U,t_12569› int) -> L
  | xs_12573 =>
    ch⟨⇑(__12574 :
           ((ssing_6‹t_12569›)
             (list_6‹U,t_12569› int) ((msort_34‹t_12569›) xs_12573))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_12575› :
  int ->
    ∀ (zs_12577 : (list_6‹U,t_12575› int)) ->
      ((cmsort_ch_35‹t_12575›) zs_12577) -o IO unit_3
:=
  fun cmsort_worker_12579 :
    int ->
      ∀ (zs_12581 : (list_6‹U,t_12575› int)) ->
        ((cmsort_ch_35‹t_12575›) zs_12581) -o IO unit_3
  | __12583, nil_8, __12584 =>
    let* c_12585 :=
      ((send __12584)
        (just_2‹t_12575,t_12575›
          (list_6‹U,t_12575› int) (nil_8‹U,t_12575› int)))
    in close c_12585
  | __12586, (cons_9 hd_12587 nil_8), __12588 =>
    let* c_12589 :=
      ((send __12588)
        (just_2‹t_12575,t_12575›
          (list_6‹U,t_12575› int)
          (cons_9‹U,t_12575› int hd_12587 (nil_8‹U,t_12575› int))))
    in close c_12589
  | __12590, (cons_9 hd_12591 (cons_9 hd_12592 tl_12593)), __12594 =>
    match (__lte__ __12590 0) in bool_4 -o IO unit_3 with
    | true_4 =>
      let* c_12596 :=
        ((send __12594)
          (just_2‹t_12575,t_12575›
            (list_6‹U,t_12575› int)
            ((msort_34‹t_12575›)
              (cons_9‹U,t_12575›
                int hd_12591 (cons_9‹U,t_12575› int hd_12592 tl_12593)))))
      in close c_12596
    | false_5 =>
      match ((split_32‹t_12575›)
              (cons_9‹U,t_12575›
                int hd_12591 (cons_9‹U,t_12575› int hd_12592 tl_12593))),
      (refl_1‹t_12575›
        (list_6‹U,t_12575› int)
        match ((split_32‹t_12575›)
                (cons_9‹U,t_12575›
                  int hd_12591 (cons_9‹U,t_12575› int hd_12592 tl_12593))) in
          ((prod1_24‹t_12575,t_12575›)
            (list_6‹U,t_12575› int) (list_6‹U,t_12575› int)) -o
            (list_6‹U,t_12575› int)
        with
        | (ex1_11 m_12598 n_12599) =>
          ((merge_33‹t_12575›)
            ((msort_34‹t_12575›) m_12598)
            ((msort_34‹t_12575›) n_12599))) in
        ∀ (h1_12600 :
          ((prod1_24‹t_12575,t_12575›)
            (list_6‹U,t_12575› int) (list_6‹U,t_12575› int))) -o
          {(eq_1‹t_12575›
             (list_6‹U,t_12575› int)
             match h1_12600 in
               ((prod1_24‹t_12575,t_12575›)
                 (list_6‹U,t_12575› int) (list_6‹U,t_12575› int)) -o
                 (list_6‹U,t_12575› int)
             with
             | (ex1_11 m_12603 n_12604) =>
               ((merge_33‹t_12575›)
                 ((msort_34‹t_12575›) m_12603)
                 ((msort_34‹t_12575›) n_12604))
             match ((split_32‹t_12575›)
                     (cons_9‹U,t_12575›
                       int hd_12591
                       (cons_9‹U,t_12575› int hd_12592 tl_12593))) in
               ((prod1_24‹t_12575,t_12575›)
                 (list_6‹U,t_12575› int) (list_6‹U,t_12575› int)) -o
                 (list_6‹U,t_12575› int)
             with
             | (ex1_11 m_12606 n_12607) =>
               ((merge_33‹t_12575›)
                 ((msort_34‹t_12575›) m_12606)
                 ((msort_34‹t_12575›) n_12607)))} -o
            IO unit_3
      with
      | (ex1_11 m_12608 n_12609), __12610 =>
        let* r1_12611 :=
          fork
            fun _12612 : ((cmsort_ch_35‹t_12575›) m_12608) -o IO unit_3
            | _12614 =>
              ((cmsort_worker_12579) (__sub__ __12590 1) m_12608 _12614)
        in
        let* r2_12615 :=
          fork
            fun _12616 : ((cmsort_ch_35‹t_12575›) n_12609) -o IO unit_3
            | _12618 =>
              ((cmsort_worker_12579) (__sub__ __12590 1) n_12609 _12618)
        in
        let* _12619 := recv r1_12611 in
        match _12619 in
          (exists1_8‹t_12575,L›
            ((ssing_6‹t_12575›)
              (list_6‹U,t_12575› int) ((msort_34‹t_12575›) m_12608))
            fun _12621 :
              ((ssing_6‹t_12575›)
                (list_6‹U,t_12575› int) ((msort_34‹t_12575›) m_12608)) ->
                L
            | __12623 => hc⟨•⟩) -o IO unit_3
        with
        | (ex1_11 (just_2 m_12624) n_12625) =>
          let* _12626 := recv r2_12615 in
          match _12626 in
            (exists1_8‹t_12575,L›
              ((ssing_6‹t_12575›)
                (list_6‹U,t_12575› int) ((msort_34‹t_12575›) n_12609))
              fun _12628 :
                ((ssing_6‹t_12575›)
                  (list_6‹U,t_12575› int)
                  ((msort_34‹t_12575›) n_12609)) -> L
              | __12630 => hc⟨•⟩) -o IO unit_3
          with
          | (ex1_11 (just_2 m_12631) n_12632) =>
            let zs1_12633 :=
              ((just_2‹t_12575,t_12575›
                 (list_6‹U,t_12575› int)
                 ((merge_33‹t_12575›) m_12624 m_12631))
                : ((ssing_6‹t_12575›)
                    (list_6‹U,t_12575› int)
                    ((merge_33‹t_12575›)
                      ((msort_34‹t_12575›) m_12608)
                      ((msort_34‹t_12575›) n_12609))))
            in
            let zs1_12634 :=
              (((rwl_2‹t_12575,t_12575›)
                 (list_6‹U,t_12575› int)
                 ((merge_33‹t_12575›)
                   ((msort_34‹t_12575›) m_12608)
                   ((msort_34‹t_12575›) n_12609))
                 match ((split_32‹t_12575›)
                         (cons_9‹U,t_12575›
                           int hd_12591
                           (cons_9‹U,t_12575› int hd_12592 tl_12593))) in
                   ((prod1_24‹t_12575,t_12575›)
                     (list_6‹U,t_12575› int) (list_6‹U,t_12575› int)) -o
                     (list_6‹U,t_12575› int)
                 with
                 | (ex1_11 m_12636 n_12637) =>
                   ((merge_33‹t_12575›)
                     ((msort_34‹t_12575›) m_12636)
                     ((msort_34‹t_12575›) n_12637))
                 fun _12638 :
                   (list_6‹U,t_12575› int) -> Type‹t_12575›
                 | __12640 =>
                   ((ssing_6‹t_12575›)
                     (list_6‹U,t_12575› int) __12640)
                 __12610 zs1_12633)
                : ((ssing_6‹t_12575›)
                    (list_6‹U,t_12575› int)
                    ((msort_34‹t_12575›)
                      (cons_9‹U,t_12575›
                        int hd_12591
                        (cons_9‹U,t_12575› int hd_12592 tl_12593)))))
            in
            let* c_12641 := ((send __12594) zs1_12634) in
            let* __12642 := close n_12625 in
            let* __12643 := close n_12632 in close c_12641

#[program]
def cmsort_37‹t_12644› :
  ∀ (zs_12645 : (list_6‹U,t_12644› int)) ->
    IO ((ssing_6‹t_12644›)
         (list_6‹U,t_12644› int) ((msort_34‹t_12644›) zs_12645))
:=
  fun cmsort_12646 :
    ∀ (zs_12647 : (list_6‹U,t_12644› int)) ->
      IO ((ssing_6‹t_12644›)
           (list_6‹U,t_12644› int) ((msort_34‹t_12644›) zs_12647))
  | zs_12648 =>
    let* c_12649 :=
      fork
        fun _12650 : ((cmsort_ch_35‹t_12644›) zs_12648) -o IO unit_3
        | _12652 => ((cmsort_worker_36‹t_12644›) 4 zs_12648 _12652)
    in
    let* _12653 := recv c_12649 in
    match _12653 in
      (exists1_8‹t_12644,L›
        ((ssing_6‹t_12644›)
          (list_6‹U,t_12644› int) ((msort_34‹t_12644›) zs_12648))
        fun _12655 :
          ((ssing_6‹t_12644›)
            (list_6‹U,t_12644› int) ((msort_34‹t_12644›) zs_12648)) ->
            L
        | __12657 => hc⟨•⟩) -o
        IO ((ssing_6‹t_12644›)
             (list_6‹U,t_12644› int) ((msort_34‹t_12644›) zs_12648))
    with
    | (ex1_11 m_12658 n_12659) =>
      let* __12660 := close n_12659 in return m_12658

#[program]
def mklist_38‹t_12661› : int -> (list_6‹U,t_12661› int) :=
  fun mklist_12663 : int -> (list_6‹U,t_12661› int)
  | n_12665 =>
    match (__lte__ n_12665 0) in bool_4 -o (list_6‹U,t_12661› int) with
    | true_4 => (nil_8‹U,t_12661› int)
    | false_5 =>
      (cons_9‹U,t_12661›
        int n_12665 ((mklist_12663) (__sub__ n_12665 1)))

#[program]
def list_len_39‹t_12667› : (list_6‹U,t_12667› int) -> int :=
  fun list_len_12669 : (list_6‹U,t_12667› int) -> int
  | nil_8 => 0
  | (cons_9 hd_12671 tl_12672) => (__add__ 1 ((list_len_12669) tl_12672))

#[program]
def print_list_40‹t_12673› : (list_6‹U,t_12673› int) -> IO unit_3 :=
  fun print_list_12675 : (list_6‹U,t_12673› int) -> IO unit_3
  | nil_8 => print "nil"
  | (cons_9 hd_12677 tl_12678) =>
    let* __12679 := print ((string_of_int_31) hd_12677) in
    let* __12680 := print " :: " in ((print_list_12675) tl_12678)

#[program]
def main_41‹› : IO unit_3 :=
  let test_12681 := ((mklist_38‹L›) 2000000) in
  let* _12682 := ((cmsort_37‹L›) test_12681) in
  match _12682 in
    ((ssing_6‹L›) (list_6‹U,L› int) ((msort_34‹L›) test_12681)) -o
      IO unit_3
  with
  | (just_2 m_12684) =>
    let len_12685 := ((list_len_39‹L›) m_12684) in
    print ((string_of_int_31) len_12685)

trans1e success

-----------------------------------------

#[program]
def idU_43 := fun id_21364 (A_21365) -> (m_21366) ->
                m_21366

#[program]
def idL_42 := fun id_21367 (A_21368) -> (m_21369) ->
                m_21369

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_21370 {A_21371} -> {m_21372} -> {n_21373} -> {B_21374} ->
  {__21375} -> (__21376) ->
    match {NULL} with
    | reflU_13  => __21376
    end

#[program]
def rwlUL_46 :=
  fun rwl_21377 {A_21378} -> {m_21379} -> {n_21380} -> {B_21381} ->
  {__21382} -> (__21383) ->
    match {NULL} with
    | reflU_13  => __21383
    end

#[program]
def rwlLU_45 :=
  fun rwl_21384 {A_21385} -> {m_21386} -> {n_21387} -> {B_21388} ->
  {__21389} -> (__21390) ->
    match {NULL} with
    | reflL_12  => __21390
    end

#[program]
def rwlLL_44 :=
  fun rwl_21391 {A_21392} -> {m_21393} -> {n_21394} -> {B_21395} ->
  {__21396} -> (__21397) ->
    match {NULL} with
    | reflL_12  => __21397
    end

#[program]
def rwrUU_51 :=
  fun rwr_21398 {A_21399} -> {m_21400} -> {n_21401} -> {B_21402} ->
  {__21403} -> (__21404) ->
    match {NULL} with
    | reflU_13  => __21404
    end

#[program]
def rwrUL_50 :=
  fun rwr_21405 {A_21406} -> {m_21407} -> {n_21408} -> {B_21409} ->
  {__21410} -> (__21411) ->
    match {NULL} with
    | reflU_13  => __21411
    end

#[program]
def rwrLU_49 :=
  fun rwr_21412 {A_21413} -> {m_21414} -> {n_21415} -> {B_21416} ->
  {__21417} -> (__21418) ->
    match {NULL} with
    | reflL_12  => __21418
    end

#[program]
def rwrLL_48 :=
  fun rwr_21419 {A_21420} -> {m_21421} -> {n_21422} -> {B_21423} ->
  {__21424} -> (__21425) ->
    match {NULL} with
    | reflL_12  => __21425
    end

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_21426 {A_21427} -> {x_21428} -> (__21429) ->
    match __21429 with
    | justUU_17 m_21430 => m_21430
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_21431 {A_21432} -> {x_21433} -> (__21434) ->
    match __21434 with
    | justUL_16 m_21435 => m_21435
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_21436 {A_21437} -> {x_21438} -> (__21439) ->
    match __21439 with
    
    end

#[program]
def sing_elimLL_62 :=
  fun sing_elim_21440 {A_21441} -> {x_21442} -> (__21443) ->
    match __21443 with
    | justLL_14 m_21444 => m_21444
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_21445 (__21446) ->
    match __21446 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_21447 (__21448) -> (__21449) ->
    match __21448 with
    | true_4  =>
      match __21449 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_21450 (__21451) -> (__21452) ->
    match __21451 with
    | true_4  => true_4
    | false_5  =>
      match __21452 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_21453 (__21454) -> (__21455) ->
    match __21454 with
    | true_4  =>
      match __21455 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __21455 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_21456 (__21457) -> (__21458) ->
    match __21457 with
    | zero_6  => true_4
    | succ_7 n_21459 =>
      match __21458 with
      | zero_6  => false_5 | succ_7 n_21460 => ((lte_21456) n_21459 n_21460)
      end
    end

#[program]
def lt_15 :=
  fun lt_21461 (x_21462) -> (y_21463) ->
    ((lte_14) (succ_7 x_21462) y_21463)

#[program]
def pred_16 :=
  fun pred_21464 (__21465) ->
    match __21465 with
    | zero_6  => zero_6 | succ_7 n_21466 => n_21466
    end

#[program]
def add_17 :=
  fun add_21467 (__21468) -> (__21469) ->
    match __21468 with
    | zero_6  => __21469
    | succ_7 n_21470 => (succ_7 ((add_21467) n_21470 __21469))
    end

#[program]
def sub_18 :=
  fun sub_21471 (__21472) -> (__21473) ->
    match __21473 with
    | zero_6  => __21472
    | succ_7 n_21474 => ((sub_21471) ((pred_16) __21472) n_21474)
    end

#[program]
def mul_19 :=
  fun mul_21475 (__21476) -> (__21477) ->
    match __21476 with
    | zero_6  => zero_6
    | succ_7 n_21478 => ((add_17) __21477 ((mul_21475) n_21478 __21477))
    end

#[program]
def div_20 :=
  fun div_21479 (x_21480) -> (y_21481) ->
    match ((lt_15) x_21480 y_21481) with
    | true_4  => zero_6
    | false_5  =>
      let loop_21482 :=
        fun loop_21483 (x_21484) -> (y_21485) ->
          match ((sub_18) x_21484 ((pred_16) y_21485)) with
          | zero_6  => zero_6
          | succ_7 n_21486 => (succ_7 ((loop_21483) n_21486 y_21485))
          end
      in ((loop_21482) x_21480 y_21481)
    end

#[program]
def rem_21 :=
  fun rem_21487 (x_21488) -> (y_21489) ->
    ((sub_18) x_21488 ((mul_19) ((div_20) x_21488 y_21489) y_21489))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_21490 {A_21491} -> (f_21492) -> (__21493) ->
    match __21493 with
    | nilUU_24  => tt_3
    | consUU_25 hd_21494 tl_21495 =>
      let __21496 := ((f_21492) hd_21494) in
      ((free_list_21490) NULL f_21492 tl_21495)
    end

#[program]
def free_listUL_72 :=
  fun free_list_21497 {A_21498} -> (f_21499) -> (__21500) ->
    match __21500 with
    | nilUL_22  => tt_3
    | consUL_23 hd_21501 tl_21502 =>
      let __21503 := ((f_21499) hd_21501) in
      ((free_list_21497) NULL f_21499 tl_21502)
    end

#[program]
def free_listLL_70 :=
  fun free_list_21504 {A_21505} -> (f_21506) -> (__21507) ->
    match __21507 with
    | nilLL_18  => tt_3
    | consLL_19 hd_21508 tl_21509 =>
      let __21510 := ((f_21506) hd_21508) in
      ((free_list_21504) NULL f_21506 tl_21509)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_21511 (x_21512) -> (y_21513) ->
    let loop_21514 :=
      fun loop_21515 (acc_21516) -> (y_21517) ->
        match (__lte__ y_21517 0) with
        | true_4  => acc_21516
        | false_5  =>
          ((loop_21515) (__mul__ x_21512 acc_21516) (__sub__ y_21517 1))
        end
    in ((loop_21514) 1 y_21513)

#[program]
def powm_26 :=
  fun powm_21518 (x_21519) -> (y_21520) -> (m_21521) ->
    let loop_21522 :=
      fun loop_21523 (acc_21524) -> (y_21525) ->
        match (__lte__ y_21525 0) with
        | true_4  => acc_21524
        | false_5  =>
          ((loop_21523)
            (__mod__ (__mul__ x_21519 acc_21524) m_21521) (__sub__ y_21525 1))
        end
    in ((loop_21522) 1 y_21520)

#[program]
def ord_27 := fun ord_21526 (c_21527) ->
                (__ord__ c_21527)

#[program]
def chr_28 := fun chr_21528 (i_21529) ->
                (__chr__ i_21529)

#[program]
def str_29 := fun str_21530 (c_21531) ->
                (__push__ "" c_21531)

#[program]
def strlen_30 := fun strlen_21532 (s_21533) ->
                   (__size__ s_21533)

#[program]
def string_of_int_31 :=
  fun string_of_int_21534 (i_21535) ->
    let aux_21536 :=
      fun aux_21537 (i_21538) ->
        match (__lte__ 10 i_21538) with
        | true_4  =>
          let r_21539 := (__mod__ i_21538 10) in
          let i_21540 := (__div__ i_21538 10) in
          (__push__ ((aux_21537) i_21540)
            ((chr_28) (__add__ r_21539 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_21538 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_21535) with
    | true_4  => ((aux_21536) i_21535)
    | false_5  => (__cat__ "~" ((aux_21536) (__neg__ i_21535)))
    end

#[program]
def splitU_83 :=
  fun split_21541 (__21542) ->
    match __21542 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_21543 tl_21544 =>
      match tl_21544 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_21543 nilUU_24) nilUU_24)
      | consUU_25 hd_21545 tl_21546 =>
        match ((split_21541) tl_21546) with
        | ex1UU_33 m_21547 n_21548 =>
          (ex1UU_33
            (consUU_25 hd_21543 m_21547) (consUU_25 hd_21545 n_21548))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_21549 (__21550) ->
    match __21550 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_21551 tl_21552 =>
      match tl_21552 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_21551 nilUL_22) nilUL_22)
      | consUL_23 hd_21553 tl_21554 =>
        match ((split_21549) tl_21554) with
        | ex1LL_30 m_21555 n_21556 =>
          (ex1LL_30
            (consUL_23 hd_21551 m_21555) (consUL_23 hd_21553 n_21556))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_21557 (__21558) -> (__21559) -o
    match __21558 with
    | nilUU_24  => __21559
    | consUU_25 hd_21560 tl_21561 =>
      match __21559 with
      | nilUU_24  => (consUU_25 hd_21560 tl_21561)
      | consUU_25 hd_21562 tl_21563 =>
        match (__lte__ hd_21560 hd_21562) with
        | true_4  =>
          (consUU_25
            hd_21560 ((merge_21557) tl_21561 (consUU_25 hd_21562 tl_21563)))
        | false_5  =>
          (consUU_25
            hd_21562 ((merge_21557) (consUU_25 hd_21560 tl_21561) tl_21563))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_21564 (__21565) -> (__21566) -o
    match __21565 with
    | nilUL_22  => __21566
    | consUL_23 hd_21567 tl_21568 =>
      match __21566 with
      | nilUL_22  => (consUL_23 hd_21567 tl_21568)
      | consUL_23 hd_21569 tl_21570 =>
        match (__lte__ hd_21567 hd_21569) with
        | true_4  =>
          (consUL_23
            hd_21567 ((merge_21564) tl_21568 (consUL_23 hd_21569 tl_21570)))
        | false_5  =>
          (consUL_23
            hd_21569 ((merge_21564) (consUL_23 hd_21567 tl_21568) tl_21570))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_21571 (__21572) ->
    match __21572 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_21573 tl_21574 =>
      match tl_21574 with
      | nilUU_24  => (consUU_25 hd_21573 nilUU_24)
      | consUU_25 hd_21575 tl_21576 =>
        match ((splitU_83)
                (consUU_25 hd_21573 (consUU_25 hd_21575 tl_21576))) with
        | ex1UU_33 m_21577 n_21578 =>
          ((mergeU_85) ((msort_21571) m_21577) ((msort_21571) n_21578))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_21579 (__21580) ->
    match __21580 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_21581 tl_21582 =>
      match tl_21582 with
      | nilUL_22  => (consUL_23 hd_21581 nilUL_22)
      | consUL_23 hd_21583 tl_21584 =>
        match ((splitL_82)
                (consUL_23 hd_21581 (consUL_23 hd_21583 tl_21584))) with
        | ex1LL_30 m_21585 n_21586 =>
          ((mergeL_84) ((msort_21579) m_21585) ((msort_21579) n_21586))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_21587 (__21588) -> (zs_21589) -> (__21590) -o
    match zs_21589 with
    | nilUU_24  =>
      let* c_21591 := ((send[R,U] __21590) (justUU_17 nilUU_24)) in
      close[true] c_21591
    | consUU_25 hd_21592 tl_21593 =>
      match tl_21593 with
      | nilUU_24  =>
        let* c_21594 :=
          ((send[R,U] __21590) (justUU_17 (consUU_25 hd_21592 nilUU_24)))
        in close[true] c_21594
      | consUU_25 hd_21595 tl_21596 =>
        match (__lte__ __21588 0) with
        | true_4  =>
          let* c_21597 :=
            ((send[R,U] __21590)
              (justUU_17
                ((msortU_87)
                  (consUU_25 hd_21592 (consUU_25 hd_21595 tl_21596)))))
          in close[true] c_21597
        | false_5  =>
          match ((splitU_83)
                  (consUU_25 hd_21592 (consUU_25 hd_21595 tl_21596))) with
          | ex1UU_33 m_21598 n_21599 =>
            let* r1_21600 :=
              fork
                fun _21601 (_21602) -o
                  ((cmsort_worker_21587) (__sub__ __21588 1) m_21598 _21602)
            in
            let* r2_21603 :=
              fork
                fun _21604 (_21605) -o
                  ((cmsort_worker_21587) (__sub__ __21588 1) n_21599 _21605)
            in
            let* _21606 := recv[R,U] r1_21600 in
            match _21606 with
            | ex1UL_32 m_21607 n_21608 =>
              match m_21607 with
              | justUU_17 m_21609 =>
                let* _21610 := recv[R,U] r2_21603 in
                match _21610 with
                | ex1UL_32 m_21611 n_21612 =>
                  match m_21611 with
                  | justUU_17 m_21613 =>
                    let zs1_21614 :=
                      (justUU_17 ((mergeU_85) m_21609 m_21613))
                    in
                    let zs1_21615 :=
                      ((rwlUU_47) NULL NULL NULL NULL NULL zs1_21614)
                    in
                    let* c_21616 := ((send[R,U] __21590) zs1_21615) in
                    let* __21617 := close[false] n_21608 in
                    let* __21618 := close[false] n_21612 in
                    close[true] c_21616
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_21619 (__21620) -> (zs_21621) -> (__21622) -o
    match zs_21621 with
    | nilUL_22  =>
      let* c_21623 := ((send[R,L] __21622) (justLL_14 nilUL_22)) in
      close[true] c_21623
    | consUL_23 hd_21624 tl_21625 =>
      match tl_21625 with
      | nilUL_22  =>
        let* c_21626 :=
          ((send[R,L] __21622) (justLL_14 (consUL_23 hd_21624 nilUL_22)))
        in close[true] c_21626
      | consUL_23 hd_21627 tl_21628 =>
        match (__lte__ __21620 0) with
        | true_4  =>
          let* c_21629 :=
            ((send[R,L] __21622)
              (justLL_14
                ((msortL_86)
                  (consUL_23 hd_21624 (consUL_23 hd_21627 tl_21628)))))
          in close[true] c_21629
        | false_5  =>
          match ((splitL_82)
                  (consUL_23 hd_21624 (consUL_23 hd_21627 tl_21628))) with
          | ex1LL_30 m_21630 n_21631 =>
            let* r1_21632 :=
              fork
                fun _21633 (_21634) -o
                  ((cmsort_worker_21619) (__sub__ __21620 1) m_21630 _21634)
            in
            let* r2_21635 :=
              fork
                fun _21636 (_21637) -o
                  ((cmsort_worker_21619) (__sub__ __21620 1) n_21631 _21637)
            in
            let* _21638 := recv[R,L] r1_21632 in
            match _21638 with
            | ex1LL_30 m_21639 n_21640 =>
              match m_21639 with
              | justLL_14 m_21641 =>
                let* _21642 := recv[R,L] r2_21635 in
                match _21642 with
                | ex1LL_30 m_21643 n_21644 =>
                  match m_21643 with
                  | justLL_14 m_21645 =>
                    let zs1_21646 :=
                      (justLL_14 ((mergeL_84) m_21641 m_21645))
                    in
                    let zs1_21647 :=
                      ((rwlLL_44) NULL NULL NULL NULL NULL zs1_21646)
                    in
                    let* c_21648 := ((send[R,L] __21622) zs1_21647) in
                    let* __21649 := close[false] n_21640 in
                    let* __21650 := close[false] n_21644 in
                    close[true] c_21648
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_21651 (zs_21652) ->
    let* c_21653 :=
      fork fun _21654 (_21655) -o
             ((cmsort_workerU_91) 4 zs_21652 _21655)
    in
    let* _21656 := recv[R,U] c_21653 in
    match _21656 with
    | ex1UL_32 m_21657 n_21658 =>
      let* __21659 := close[false] n_21658 in return m_21657
    end

#[program]
def cmsortL_92 :=
  fun cmsort_21660 (zs_21661) ->
    let* c_21662 :=
      fork fun _21663 (_21664) -o
             ((cmsort_workerL_90) 4 zs_21661 _21664)
    in
    let* _21665 := recv[R,L] c_21662 in
    match _21665 with
    | ex1LL_30 m_21666 n_21667 =>
      let* __21668 := close[false] n_21667 in return m_21666
    end

#[program]
def mklistU_95 :=
  fun mklist_21669 (n_21670) ->
    match (__lte__ n_21670 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_21670 ((mklist_21669) (__sub__ n_21670 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_21671 (n_21672) ->
    match (__lte__ n_21672 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_21672 ((mklist_21671) (__sub__ n_21672 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_21673 (__21674) ->
    match __21674 with
    | nilUU_24  => 0
    | consUU_25 hd_21675 tl_21676 => (__add__ 1 ((list_len_21673) tl_21676))
    end

#[program]
def list_lenL_96 :=
  fun list_len_21677 (__21678) ->
    match __21678 with
    | nilUL_22  => 0
    | consUL_23 hd_21679 tl_21680 => (__add__ 1 ((list_len_21677) tl_21680))
    end

#[program]
def print_listU_99 :=
  fun print_list_21681 (__21682) ->
    match __21682 with
    | nilUU_24  => print "nil"
    | consUU_25 hd_21683 tl_21684 =>
      let* __21685 := print ((string_of_int_31) hd_21683) in
      let* __21686 := print " :: " in ((print_list_21681) tl_21684)
    end

#[program]
def print_listL_98 :=
  fun print_list_21687 (__21688) ->
    match __21688 with
    | nilUL_22  => print "nil"
    | consUL_23 hd_21689 tl_21690 =>
      let* __21691 := print ((string_of_int_31) hd_21689) in
      let* __21692 := print " :: " in ((print_list_21687) tl_21690)
    end

#[program]
def main :=
  let test_21693 := ((mklistL_94) 2000000) in
  let* _21694 := ((cmsortL_92) test_21693) in
  match _21694 with
  | justLL_14 m_21695 =>
    let len_21696 := ((list_lenL_96) m_21695) in
    print ((string_of_int_31) len_21696)
  end

trans12 success

-----------------------------------------

#[program]
def idU_43 := fun id_22030 (A_22031) -> (m_22032) ->
                m_22032

#[program]
def idL_42 := fun id_22033 (A_22034) -> (m_22035) ->
                m_22035

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_22036 {A_22037} -> {m_22038} -> {n_22039} -> {B_22040} ->
  {__22041} -> (__22042) ->
    __22042

#[program]
def rwlUL_46 :=
  fun rwl_22043 {A_22044} -> {m_22045} -> {n_22046} -> {B_22047} ->
  {__22048} -> (__22049) ->
    __22049

#[program]
def rwlLU_45 :=
  fun rwl_22050 {A_22051} -> {m_22052} -> {n_22053} -> {B_22054} ->
  {__22055} -> (__22056) ->
    __22056

#[program]
def rwlLL_44 :=
  fun rwl_22057 {A_22058} -> {m_22059} -> {n_22060} -> {B_22061} ->
  {__22062} -> (__22063) ->
    __22063

#[program]
def rwrUU_51 :=
  fun rwr_22064 {A_22065} -> {m_22066} -> {n_22067} -> {B_22068} ->
  {__22069} -> (__22070) ->
    __22070

#[program]
def rwrUL_50 :=
  fun rwr_22071 {A_22072} -> {m_22073} -> {n_22074} -> {B_22075} ->
  {__22076} -> (__22077) ->
    __22077

#[program]
def rwrLU_49 :=
  fun rwr_22078 {A_22079} -> {m_22080} -> {n_22081} -> {B_22082} ->
  {__22083} -> (__22084) ->
    __22084

#[program]
def rwrLL_48 :=
  fun rwr_22085 {A_22086} -> {m_22087} -> {n_22088} -> {B_22089} ->
  {__22090} -> (__22091) ->
    __22091

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_22092 {A_22093} -> {x_22094} -> (__22095) ->
    match __22095 with
    | justUU_17 m_22096 => m_22096
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_22097 {A_22098} -> {x_22099} -> (__22100) ->
    match __22100 with
    | justUL_16 m_22101 => m_22101
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_22102 {A_22103} -> {x_22104} -> (__22105) ->
    !!

#[program]
def sing_elimLL_62 :=
  fun sing_elim_22106 {A_22107} -> {x_22108} -> (__22109) ->
    match __22109 with
    | justLL_14 m_22110 => m_22110
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_22111 (__22112) ->
    match __22112 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_22113 (__22114) -> (__22115) ->
    match __22114 with
    | true_4  =>
      match __22115 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_22116 (__22117) -> (__22118) ->
    match __22117 with
    | true_4  => true_4
    | false_5  =>
      match __22118 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_22119 (__22120) -> (__22121) ->
    match __22120 with
    | true_4  =>
      match __22121 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __22121 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_22122 (__22123) -> (__22124) ->
    match __22123 with
    | zero_6  => true_4
    | succ_7 n_22125 =>
      match __22124 with
      | zero_6  => false_5 | succ_7 n_22126 => ((lte_22122) n_22125 n_22126)
      end
    end

#[program]
def lt_15 :=
  fun lt_22127 (x_22128) -> (y_22129) ->
    ((lte_14) (succ_7 x_22128) y_22129)

#[program]
def pred_16 :=
  fun pred_22130 (__22131) ->
    match __22131 with
    | zero_6  => zero_6 | succ_7 n_22132 => n_22132
    end

#[program]
def add_17 :=
  fun add_22133 (__22134) -> (__22135) ->
    match __22134 with
    | zero_6  => __22135
    | succ_7 n_22136 => (succ_7 ((add_22133) n_22136 __22135))
    end

#[program]
def sub_18 :=
  fun sub_22137 (__22138) -> (__22139) ->
    match __22139 with
    | zero_6  => __22138
    | succ_7 n_22140 => ((sub_22137) ((pred_16) __22138) n_22140)
    end

#[program]
def mul_19 :=
  fun mul_22141 (__22142) -> (__22143) ->
    match __22142 with
    | zero_6  => zero_6
    | succ_7 n_22144 => ((add_17) __22143 ((mul_22141) n_22144 __22143))
    end

#[program]
def div_20 :=
  fun div_22145 (x_22146) -> (y_22147) ->
    match ((lt_15) x_22146 y_22147) with
    | true_4  => zero_6
    | false_5  =>
      let loop_22148 :=
        fun loop_22149 (x_22150) -> (y_22151) ->
          match ((sub_18) x_22150 ((pred_16) y_22151)) with
          | zero_6  => zero_6
          | succ_7 n_22152 => (succ_7 ((loop_22149) n_22152 y_22151))
          end
      in ((loop_22148) x_22146 y_22147)
    end

#[program]
def rem_21 :=
  fun rem_22153 (x_22154) -> (y_22155) ->
    ((sub_18) x_22154 ((mul_19) ((div_20) x_22154 y_22155) y_22155))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_22156 {A_22157} -> (f_22158) -> (__22159) ->
    match __22159 with
    | nilUU_24  => tt_3
    | consUU_25 hd_22160 tl_22161 =>
      let __22162 := ((f_22158) hd_22160) in
      ((free_list_22156) NULL f_22158 tl_22161)
    end

#[program]
def free_listUL_72 :=
  fun free_list_22163 {A_22164} -> (f_22165) -> (__22166) ->
    match __22166 with
    | nilUL_22  => tt_3
    | consUL_23 hd_22167 tl_22168 =>
      let __22169 := ((f_22165) hd_22167) in
      ((free_list_22163) NULL f_22165 tl_22168)
    end

#[program]
def free_listLL_70 :=
  fun free_list_22170 {A_22171} -> (f_22172) -> (__22173) ->
    match __22173 with
    | nilLL_18  => tt_3
    | consLL_19 hd_22174 tl_22175 =>
      let __22176 := ((f_22172) hd_22174) in
      ((free_list_22170) NULL f_22172 tl_22175)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_22177 (x_22178) -> (y_22179) ->
    let loop_22180 :=
      fun loop_22181 (acc_22182) -> (y_22183) ->
        match (__lte__ y_22183 0) with
        | true_4  => acc_22182
        | false_5  =>
          ((loop_22181) (__mul__ x_22178 acc_22182) (__sub__ y_22183 1))
        end
    in ((loop_22180) 1 y_22179)

#[program]
def powm_26 :=
  fun powm_22184 (x_22185) -> (y_22186) -> (m_22187) ->
    let loop_22188 :=
      fun loop_22189 (acc_22190) -> (y_22191) ->
        match (__lte__ y_22191 0) with
        | true_4  => acc_22190
        | false_5  =>
          ((loop_22189)
            (__mod__ (__mul__ x_22185 acc_22190) m_22187) (__sub__ y_22191 1))
        end
    in ((loop_22188) 1 y_22186)

#[program]
def ord_27 := fun ord_22192 (c_22193) ->
                (__ord__ c_22193)

#[program]
def chr_28 := fun chr_22194 (i_22195) ->
                (__chr__ i_22195)

#[program]
def str_29 := fun str_22196 (c_22197) ->
                (__push__ "" c_22197)

#[program]
def strlen_30 := fun strlen_22198 (s_22199) ->
                   (__size__ s_22199)

#[program]
def string_of_int_31 :=
  fun string_of_int_22200 (i_22201) ->
    let aux_22202 :=
      fun aux_22203 (i_22204) ->
        match (__lte__ 10 i_22204) with
        | true_4  =>
          let r_22205 := (__mod__ i_22204 10) in
          let i_22206 := (__div__ i_22204 10) in
          (__push__ ((aux_22203) i_22206)
            ((chr_28) (__add__ r_22205 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_22204 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_22201) with
    | true_4  => ((aux_22202) i_22201)
    | false_5  => (__cat__ "~" ((aux_22202) (__neg__ i_22201)))
    end

#[program]
def splitU_83 :=
  fun split_22207 (__22208) ->
    match __22208 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_22209 tl_22210 =>
      match tl_22210 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_22209 nilUU_24) nilUU_24)
      | consUU_25 hd_22211 tl_22212 =>
        match ((split_22207) tl_22212) with
        | ex1UU_33 m_22213 n_22214 =>
          (ex1UU_33
            (consUU_25 hd_22209 m_22213) (consUU_25 hd_22211 n_22214))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_22215 (__22216) ->
    match __22216 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_22217 tl_22218 =>
      match tl_22218 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_22217 nilUL_22) nilUL_22)
      | consUL_23 hd_22219 tl_22220 =>
        match ((split_22215) tl_22220) with
        | ex1LL_30 m_22221 n_22222 =>
          (ex1LL_30
            (consUL_23 hd_22217 m_22221) (consUL_23 hd_22219 n_22222))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_22223 (__22224) -> (__22225) -o
    match __22224 with
    | nilUU_24  => __22225
    | consUU_25 hd_22226 tl_22227 =>
      match __22225 with
      | nilUU_24  => (consUU_25 hd_22226 tl_22227)
      | consUU_25 hd_22228 tl_22229 =>
        match (__lte__ hd_22226 hd_22228) with
        | true_4  =>
          (consUU_25
            hd_22226 ((merge_22223) tl_22227 (consUU_25 hd_22228 tl_22229)))
        | false_5  =>
          (consUU_25
            hd_22228 ((merge_22223) (consUU_25 hd_22226 tl_22227) tl_22229))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_22230 (__22231) -> (__22232) -o
    match __22231 with
    | nilUL_22  => __22232
    | consUL_23 hd_22233 tl_22234 =>
      match __22232 with
      | nilUL_22  => (consUL_23 hd_22233 tl_22234)
      | consUL_23 hd_22235 tl_22236 =>
        match (__lte__ hd_22233 hd_22235) with
        | true_4  =>
          (consUL_23
            hd_22233 ((merge_22230) tl_22234 (consUL_23 hd_22235 tl_22236)))
        | false_5  =>
          (consUL_23
            hd_22235 ((merge_22230) (consUL_23 hd_22233 tl_22234) tl_22236))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_22237 (__22238) ->
    match __22238 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_22239 tl_22240 =>
      match tl_22240 with
      | nilUU_24  => (consUU_25 hd_22239 nilUU_24)
      | consUU_25 hd_22241 tl_22242 =>
        match ((splitU_83)
                (consUU_25 hd_22239 (consUU_25 hd_22241 tl_22242))) with
        | ex1UU_33 m_22243 n_22244 =>
          ((mergeU_85) ((msort_22237) m_22243) ((msort_22237) n_22244))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_22245 (__22246) ->
    match __22246 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_22247 tl_22248 =>
      match tl_22248 with
      | nilUL_22  => (consUL_23 hd_22247 nilUL_22)
      | consUL_23 hd_22249 tl_22250 =>
        match ((splitL_82)
                (consUL_23 hd_22247 (consUL_23 hd_22249 tl_22250))) with
        | ex1LL_30 m_22251 n_22252 =>
          ((mergeL_84) ((msort_22245) m_22251) ((msort_22245) n_22252))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_22253 (__22254) -> (zs_22255) -> (__22256) -o
    match zs_22255 with
    | nilUU_24  =>
      let* c_22257 := ((send[R,U] __22256) (justUU_17 nilUU_24)) in
      close[true] c_22257
    | consUU_25 hd_22258 tl_22259 =>
      match tl_22259 with
      | nilUU_24  =>
        let* c_22260 :=
          ((send[R,U] __22256) (justUU_17 (consUU_25 hd_22258 nilUU_24)))
        in close[true] c_22260
      | consUU_25 hd_22261 tl_22262 =>
        match (__lte__ __22254 0) with
        | true_4  =>
          let* c_22263 :=
            ((send[R,U] __22256)
              (justUU_17
                ((msortU_87)
                  (consUU_25 hd_22258 (consUU_25 hd_22261 tl_22262)))))
          in close[true] c_22263
        | false_5  =>
          match ((splitU_83)
                  (consUU_25 hd_22258 (consUU_25 hd_22261 tl_22262))) with
          | ex1UU_33 m_22264 n_22265 =>
            let* r1_22266 :=
              fork
                fun _22267 (_22268) -o
                  ((cmsort_worker_22253) (__sub__ __22254 1) m_22264 _22268)
            in
            let* r2_22269 :=
              fork
                fun _22270 (_22271) -o
                  ((cmsort_worker_22253) (__sub__ __22254 1) n_22265 _22271)
            in
            let* _22272 := recv[R,U] r1_22266 in
            match _22272 with
            | ex1UL_32 m_22273 n_22274 =>
              match m_22273 with
              | justUU_17 m_22275 =>
                let* _22276 := recv[R,U] r2_22269 in
                match _22276 with
                | ex1UL_32 m_22277 n_22278 =>
                  match m_22277 with
                  | justUU_17 m_22279 =>
                    let zs1_22280 :=
                      (justUU_17 ((mergeU_85) m_22275 m_22279))
                    in
                    let zs1_22281 :=
                      ((rwlUU_47) NULL NULL NULL NULL NULL zs1_22280)
                    in
                    let* c_22282 := ((send[R,U] __22256) zs1_22281) in
                    let* __22283 := close[false] n_22274 in
                    let* __22284 := close[false] n_22278 in
                    close[true] c_22282
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_22285 (__22286) -> (zs_22287) -> (__22288) -o
    match zs_22287 with
    | nilUL_22  =>
      let* c_22289 := ((send[R,L] __22288) (justLL_14 nilUL_22)) in
      close[true] c_22289
    | consUL_23 hd_22290 tl_22291 =>
      match tl_22291 with
      | nilUL_22  =>
        let* c_22292 :=
          ((send[R,L] __22288) (justLL_14 (consUL_23 hd_22290 nilUL_22)))
        in close[true] c_22292
      | consUL_23 hd_22293 tl_22294 =>
        match (__lte__ __22286 0) with
        | true_4  =>
          let* c_22295 :=
            ((send[R,L] __22288)
              (justLL_14
                ((msortL_86)
                  (consUL_23 hd_22290 (consUL_23 hd_22293 tl_22294)))))
          in close[true] c_22295
        | false_5  =>
          match ((splitL_82)
                  (consUL_23 hd_22290 (consUL_23 hd_22293 tl_22294))) with
          | ex1LL_30 m_22296 n_22297 =>
            let* r1_22298 :=
              fork
                fun _22299 (_22300) -o
                  ((cmsort_worker_22285) (__sub__ __22286 1) m_22296 _22300)
            in
            let* r2_22301 :=
              fork
                fun _22302 (_22303) -o
                  ((cmsort_worker_22285) (__sub__ __22286 1) n_22297 _22303)
            in
            let* _22304 := recv[R,L] r1_22298 in
            match _22304 with
            | ex1LL_30 m_22305 n_22306 =>
              match m_22305 with
              | justLL_14 m_22307 =>
                let* _22308 := recv[R,L] r2_22301 in
                match _22308 with
                | ex1LL_30 m_22309 n_22310 =>
                  match m_22309 with
                  | justLL_14 m_22311 =>
                    let zs1_22312 :=
                      (justLL_14 ((mergeL_84) m_22307 m_22311))
                    in
                    let zs1_22313 :=
                      ((rwlLL_44) NULL NULL NULL NULL NULL zs1_22312)
                    in
                    let* c_22314 := ((send[R,L] __22288) zs1_22313) in
                    let* __22315 := close[false] n_22306 in
                    let* __22316 := close[false] n_22310 in
                    close[true] c_22314
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_22317 (zs_22318) ->
    let* c_22319 :=
      fork fun _22320 (_22321) -o
             ((cmsort_workerU_91) 4 zs_22318 _22321)
    in
    let* _22322 := recv[R,U] c_22319 in
    match _22322 with
    | ex1UL_32 m_22323 n_22324 =>
      let* __22325 := close[false] n_22324 in return m_22323
    end

#[program]
def cmsortL_92 :=
  fun cmsort_22326 (zs_22327) ->
    let* c_22328 :=
      fork fun _22329 (_22330) -o
             ((cmsort_workerL_90) 4 zs_22327 _22330)
    in
    let* _22331 := recv[R,L] c_22328 in
    match _22331 with
    | ex1LL_30 m_22332 n_22333 =>
      let* __22334 := close[false] n_22333 in return m_22332
    end

#[program]
def mklistU_95 :=
  fun mklist_22335 (n_22336) ->
    match (__lte__ n_22336 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_22336 ((mklist_22335) (__sub__ n_22336 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_22337 (n_22338) ->
    match (__lte__ n_22338 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_22338 ((mklist_22337) (__sub__ n_22338 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_22339 (__22340) ->
    match __22340 with
    | nilUU_24  => 0
    | consUU_25 hd_22341 tl_22342 => (__add__ 1 ((list_len_22339) tl_22342))
    end

#[program]
def list_lenL_96 :=
  fun list_len_22343 (__22344) ->
    match __22344 with
    | nilUL_22  => 0
    | consUL_23 hd_22345 tl_22346 => (__add__ 1 ((list_len_22343) tl_22346))
    end

#[program]
def print_listU_99 :=
  fun print_list_22347 (__22348) ->
    match __22348 with
    | nilUU_24  => print "nil"
    | consUU_25 hd_22349 tl_22350 =>
      let* __22351 := print ((string_of_int_31) hd_22349) in
      let* __22352 := print " :: " in ((print_list_22347) tl_22350)
    end

#[program]
def print_listL_98 :=
  fun print_list_22353 (__22354) ->
    match __22354 with
    | nilUL_22  => print "nil"
    | consUL_23 hd_22355 tl_22356 =>
      let* __22357 := print ((string_of_int_31) hd_22355) in
      let* __22358 := print " :: " in ((print_list_22353) tl_22356)
    end

#[program]
def main :=
  let test_22359 := ((mklistL_94) 2000000) in
  let* _22360 := ((cmsortL_92) test_22359) in
  match _22360 with
  | justLL_14 m_22361 =>
    let len_22362 := ((list_lenL_96) m_22361) in
    print ((string_of_int_31) len_22362)
  end

trans2e success

-----------------------------------------

def idU_43 := fun id_22734 (A_22735) -> (m_22736) -> m_22736

def idL_42 := fun id_22737 (A_22738) -> (m_22739) -> m_22739

def rwlUU_47 :=
  fun rwl_22740 (A_22741) -> (m_22742) -> (n_22743) -> (B_22744) ->
  (__22745) -> (__22746) -> __22746

def rwlUL_46 :=
  fun rwl_22747 (A_22748) -> (m_22749) -> (n_22750) -> (B_22751) ->
  (__22752) -> (__22753) -> __22753

def rwlLU_45 :=
  fun rwl_22754 (A_22755) -> (m_22756) -> (n_22757) -> (B_22758) ->
  (__22759) -> (__22760) -> __22760

def rwlLL_44 :=
  fun rwl_22761 (A_22762) -> (m_22763) -> (n_22764) -> (B_22765) ->
  (__22766) -> (__22767) -> __22767

def rwrUU_51 :=
  fun rwr_22768 (A_22769) -> (m_22770) -> (n_22771) -> (B_22772) ->
  (__22773) -> (__22774) -> __22774

def rwrUL_50 :=
  fun rwr_22775 (A_22776) -> (m_22777) -> (n_22778) -> (B_22779) ->
  (__22780) -> (__22781) -> __22781

def rwrLU_49 :=
  fun rwr_22782 (A_22783) -> (m_22784) -> (n_22785) -> (B_22786) ->
  (__22787) -> (__22788) -> __22788

def rwrLL_48 :=
  fun rwr_22789 (A_22790) -> (m_22791) -> (n_22792) -> (B_22793) ->
  (__22794) -> (__22795) -> __22795

def sing_elimUU_65 :=
  fun sing_elim_22796 (A_22797) -> (x_22798) -> (__22799) -> __22799

def sing_elimUL_64 :=
  fun sing_elim_22800 (A_22801) -> (x_22802) -> (__22803) -> __22803

def sing_elimLU_63 :=
  fun sing_elim_22804 (A_22805) -> (x_22806) -> (__22807) -> !!

def sing_elimLL_62 :=
  fun sing_elim_22808 (A_22809) -> (x_22810) -> (__22811) -> __22811

def not_10 :=
  fun not_22812 (__22813) ->
    match __22813 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_22814 (__22815) -> (__22816) ->
    match __22815 with
    | true_4 =>
      match __22816 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_22817 (__22818) -> (__22819) ->
    match __22818 with
    | true_4 => true_4
    | false_5 =>
      match __22819 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_22820 (__22821) -> (__22822) ->
    match __22821 with
    | true_4 =>
      match __22822 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __22822 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_22823 (__22824) -> (__22825) ->
    match __22824 with
    | zero_6  => true_4
    | succ_7 n_22826 =>
      match __22825 with
      | zero_6  => false_5 | succ_7 n_22827 => ((lte_22823) n_22826 n_22827)
      end
    end

def lt_15 :=
  fun lt_22828 (x_22829) -> (y_22830) -> ((lte_14) (succ_7 x_22829) y_22830)

def pred_16 :=
  fun pred_22831 (__22832) ->
    match __22832 with
    | zero_6  => (zero_6 ) | succ_7 n_22833 => n_22833
    end

def add_17 :=
  fun add_22834 (__22835) -> (__22836) ->
    match __22835 with
    | zero_6  => __22836
    | succ_7 n_22837 => (succ_7 ((add_22834) n_22837 __22836))
    end

def sub_18 :=
  fun sub_22838 (__22839) -> (__22840) ->
    match __22840 with
    | zero_6  => __22839
    | succ_7 n_22841 => ((sub_22838) ((pred_16) __22839) n_22841)
    end

def mul_19 :=
  fun mul_22842 (__22843) -> (__22844) ->
    match __22843 with
    | zero_6  => (zero_6 )
    | succ_7 n_22845 => ((add_17) __22844 ((mul_22842) n_22845 __22844))
    end

def div_20 :=
  fun div_22846 (x_22847) -> (y_22848) ->
    match ((lt_15) x_22847 y_22848) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_22849 :=
        fun loop_22850 (x_22851) -> (y_22852) ->
          match ((sub_18) x_22851 ((pred_16) y_22852)) with
          | zero_6  => (zero_6 )
          | succ_7 n_22853 => (succ_7 ((loop_22850) n_22853 y_22852))
          end
      in ((loop_22849) x_22847 y_22848)
    end

def rem_21 :=
  fun rem_22854 (x_22855) -> (y_22856) ->
    ((sub_18) x_22855 ((mul_19) ((div_20) x_22855 y_22856) y_22856))

def free_listUU_73 :=
  fun free_list_22857 (A_22858) -> (f_22859) -> (__22860) ->
    match __22860 with
    | nilUU_24  => tt_3
    | consUU_25 hd_22861 tl_22862 =>
      let __22863 := ((f_22859) hd_22861) in
      ((free_list_22857) NULL f_22859 tl_22862)
    end

def free_listUL_72 :=
  fun free_list_22864 (A_22865) -> (f_22866) -> (__22867) ->
    match __22867 with
    | nilUL_22  => tt_3
    | consUL_23 hd_22868 tl_22869 =>
      let __22870 := ((f_22866) hd_22868) in
      ((free_list_22864) NULL f_22866 tl_22869)
    end

def free_listLL_70 :=
  fun free_list_22871 (A_22872) -> (f_22873) -> (__22874) ->
    match __22874 with
    | nilLL_18  => tt_3
    | consLL_19 hd_22875 tl_22876 =>
      let __22877 := ((f_22873) hd_22875) in
      ((free_list_22871) NULL f_22873 tl_22876)
    end

def pow_25 :=
  fun pow_22878 (x_22879) -> (y_22880) ->
    let loop_22881 :=
      fun loop_22882 (acc_22883) -> (y_22884) ->
        match (__lte__ y_22884 0) with
        | true_4 => acc_22883
        | false_5 =>
          ((loop_22882) (__mul__ x_22879 acc_22883) (__sub__ y_22884 1))
        end
    in ((loop_22881) 1 y_22880)

def powm_26 :=
  fun powm_22885 (x_22886) -> (y_22887) -> (m_22888) ->
    let loop_22889 :=
      fun loop_22890 (acc_22891) -> (y_22892) ->
        match (__lte__ y_22892 0) with
        | true_4 => acc_22891
        | false_5 =>
          ((loop_22890)
            (__mod__ (__mul__ x_22886 acc_22891) m_22888) (__sub__ y_22892 1))
        end
    in ((loop_22889) 1 y_22887)

def ord_27 := fun ord_22893 (c_22894) -> (__ord__ c_22894)

def chr_28 := fun chr_22895 (i_22896) -> (__chr__ i_22896)

def str_29 := fun str_22897 (c_22898) -> (__push__ "" c_22898)

def strlen_30 := fun strlen_22899 (s_22900) -> (__size__ s_22900)

def string_of_int_31 :=
  fun string_of_int_22901 (i_22902) ->
    let aux_22903 :=
      fun aux_22904 (i_22905) ->
        match (__lte__ 10 i_22905) with
        | true_4 =>
          let r_22906 := (__mod__ i_22905 10) in
          let i_22907 := (__div__ i_22905 10) in
          (__push__ ((aux_22904) i_22907)
            ((chr_28) (__add__ r_22906 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_22905 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_22902) with
    | true_4 => ((aux_22903) i_22902)
    | false_5 => (__cat__ "~" ((aux_22903) (__neg__ i_22902)))
    end

def splitU_83 :=
  fun split_22908 (__22909) ->
    match __22909 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_22910 tl_22911 =>
      match tl_22911 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_22910 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_22912 tl_22913 =>
        match ((split_22908) tl_22913) with
        | ex1UU_33 m_22914 n_22915 =>
          (ex1UU_33
            (consUU_25 hd_22910 m_22914) (consUU_25 hd_22912 n_22915))
        end
      end
    end

def splitL_82 :=
  fun split_22916 (__22917) ->
    match __22917 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_22918 tl_22919 =>
      match tl_22919 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_22918 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_22920 tl_22921 =>
        match ((split_22916) tl_22921) with
        | ex1LL_30 m_22922 n_22923 =>
          (ex1LL_30
            (consUL_23 hd_22918 m_22922) (consUL_23 hd_22920 n_22923))
        end
      end
    end

def mergeU_85 :=
  fun merge_22924 (__22925) -> (__22926) -o
    match __22925 with
    | nilUU_24  => __22926
    | consUU_25 hd_22927 tl_22928 =>
      match __22926 with
      | nilUU_24  => (consUU_25 hd_22927 tl_22928)
      | consUU_25 hd_22929 tl_22930 =>
        match (__lte__ hd_22927 hd_22929) with
        | true_4 =>
          (consUU_25
            hd_22927 ((merge_22924) tl_22928 (consUU_25 hd_22929 tl_22930)))
        | false_5 =>
          (consUU_25
            hd_22929 ((merge_22924) (consUU_25 hd_22927 tl_22928) tl_22930))
        end
      end
    end

def mergeL_84 :=
  fun merge_22931 (__22932) -> (__22933) -o
    match __22932 with
    | nilUL_22  => __22933
    | consUL_23 hd_22934 tl_22935 =>
      match __22933 with
      | nilUL_22  => (consUL_23 hd_22934 tl_22935)
      | consUL_23 hd_22936 tl_22937 =>
        match (__lte__ hd_22934 hd_22936) with
        | true_4 =>
          (consUL_23
            hd_22934 ((merge_22931) tl_22935 (consUL_23 hd_22936 tl_22937)))
        | false_5 =>
          (consUL_23
            hd_22936 ((merge_22931) (consUL_23 hd_22934 tl_22935) tl_22937))
        end
      end
    end

def msortU_87 :=
  fun msort_22938 (__22939) ->
    match __22939 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_22940 tl_22941 =>
      match tl_22941 with
      | nilUU_24  => (consUU_25 hd_22940 (nilUU_24 ))
      | consUU_25 hd_22942 tl_22943 =>
        match ((splitU_83)
                (consUU_25 hd_22940 (consUU_25 hd_22942 tl_22943))) with
        | ex1UU_33 m_22944 n_22945 =>
          ((mergeU_85) ((msort_22938) m_22944) ((msort_22938) n_22945))
        end
      end
    end

def msortL_86 :=
  fun msort_22946 (__22947) ->
    match __22947 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_22948 tl_22949 =>
      match tl_22949 with
      | nilUL_22  => (consUL_23 hd_22948 (nilUL_22 ))
      | consUL_23 hd_22950 tl_22951 =>
        match ((splitL_82)
                (consUL_23 hd_22948 (consUL_23 hd_22950 tl_22951))) with
        | ex1LL_30 m_22952 n_22953 =>
          ((mergeL_84) ((msort_22946) m_22952) ((msort_22946) n_22953))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_22954 (__22955) -> (zs_22956) -> (__22957) -o
    match zs_22956 with
    | nilUU_24  =>
      lazy(let c_22958 :=
             force(((lam (x_22959) -> lazy(send(__22957, x_22959)))
                     (nilUU_24 )))
           in force(lazy(close[true] c_22958)))
    | consUU_25 hd_22960 tl_22961 =>
      match tl_22961 with
      | nilUU_24  =>
        lazy(let c_22962 :=
               force(((lam (x_22963) -> lazy(send(__22957, x_22963)))
                       (consUU_25 hd_22960 (nilUU_24 ))))
             in force(lazy(close[true] c_22962)))
      | consUU_25 hd_22964 tl_22965 =>
        match (__lte__ __22955 0) with
        | true_4 =>
          lazy(let c_22966 :=
                 force(((lam (x_22967) -> lazy(send(__22957, x_22967)))
                         ((msortU_87)
                           (consUU_25 hd_22960 (consUU_25 hd_22964 tl_22965)))))
               in force(lazy(close[true] c_22966)))
        | false_5 =>
          match ((splitU_83)
                  (consUU_25 hd_22960 (consUU_25 hd_22964 tl_22965))) with
          | ex1UU_33 m_22968 n_22969 =>
            lazy(let r1_22970 :=
                   force(lazy(fork
                                fun _22971 (_22972) -o
                                  ((cmsort_worker_22954)
                                    (__sub__ __22955 1) m_22968 _22972)))
                 in
                 let r2_22973 :=
                   force(lazy(fork
                                fun _22974 (_22975) -o
                                  ((cmsort_worker_22954)
                                    (__sub__ __22955 1) n_22969 _22975)))
                 in
                 let _22976 := force(lazy(recv[U](r1_22970))) in
                 force(match _22976 with
                       | ex1UL_32 m_22977 n_22978 =>
                         lazy(let _22979 := force(lazy(recv[U](r2_22973))) in
                              force(match _22979 with
                                    | ex1UL_32 m_22980 n_22981 =>
                                      let zs1_22982 :=
                                        ((mergeU_85) m_22977 m_22980)
                                      in
                                      let zs1_22983 :=
                                        ((rwlUU_47)
                                          NULL NULL NULL NULL NULL zs1_22982)
                                      in
                                      lazy(let c_22984 :=
                                             force(((lam (x_22985) ->
                                                       lazy(send(__22957, x_22985)))
                                                     zs1_22983))
                                           in
                                           let __22986 :=
                                             force(lazy(close[false] n_22978))
                                           in
                                           let __22987 :=
                                             force(lazy(close[false] n_22981))
                                           in
                                           force(lazy(close[true] c_22984)))
                                    end))
                       end))
            end
          end
        end
      end

def cmsort_workerL_90 :=
  fun cmsort_worker_22988 (__22989) -> (zs_22990) -> (__22991) -o
    match zs_22990 with
    | nilUL_22  =>
      lazy(let c_22992 :=
             force(((lam (x_22993) -> lazy(send(__22991, x_22993)))
                     (nilUL_22 )))
           in force(lazy(close[true] c_22992)))
    | consUL_23 hd_22994 tl_22995 =>
      match tl_22995 with
      | nilUL_22  =>
        lazy(let c_22996 :=
               force(((lam (x_22997) -> lazy(send(__22991, x_22997)))
                       (consUL_23 hd_22994 (nilUL_22 ))))
             in force(lazy(close[true] c_22996)))
      | consUL_23 hd_22998 tl_22999 =>
        match (__lte__ __22989 0) with
        | true_4 =>
          lazy(let c_23000 :=
                 force(((lam (x_23001) -> lazy(send(__22991, x_23001)))
                         ((msortL_86)
                           (consUL_23 hd_22994 (consUL_23 hd_22998 tl_22999)))))
               in force(lazy(close[true] c_23000)))
        | false_5 =>
          match ((splitL_82)
                  (consUL_23 hd_22994 (consUL_23 hd_22998 tl_22999))) with
          | ex1LL_30 m_23002 n_23003 =>
            lazy(let r1_23004 :=
                   force(lazy(fork
                                fun _23005 (_23006) -o
                                  ((cmsort_worker_22988)
                                    (__sub__ __22989 1) m_23002 _23006)))
                 in
                 let r2_23007 :=
                   force(lazy(fork
                                fun _23008 (_23009) -o
                                  ((cmsort_worker_22988)
                                    (__sub__ __22989 1) n_23003 _23009)))
                 in
                 let _23010 := force(lazy(recv[L](r1_23004))) in
                 force(match _23010 with
                       | ex1LL_30 m_23011 n_23012 =>
                         lazy(let _23013 := force(lazy(recv[L](r2_23007))) in
                              force(match _23013 with
                                    | ex1LL_30 m_23014 n_23015 =>
                                      let zs1_23016 :=
                                        ((mergeL_84) m_23011 m_23014)
                                      in
                                      let zs1_23017 :=
                                        ((rwlLL_44)
                                          NULL NULL NULL NULL NULL zs1_23016)
                                      in
                                      lazy(let c_23018 :=
                                             force(((lam (x_23019) ->
                                                       lazy(send(__22991, x_23019)))
                                                     zs1_23017))
                                           in
                                           let __23020 :=
                                             force(lazy(close[false] n_23012))
                                           in
                                           let __23021 :=
                                             force(lazy(close[false] n_23015))
                                           in
                                           force(lazy(close[true] c_23018)))
                                    end))
                       end))
            end
          end
        end
      end

def cmsortU_93 :=
  fun cmsort_23022 (zs_23023) ->
    lazy(let c_23024 :=
           force(lazy(fork
                        fun _23025 (_23026) -o
                          ((cmsort_workerU_91) 4 zs_23023 _23026)))
         in
         let _23027 := force(lazy(recv[U](c_23024))) in
         force(match _23027 with
               | ex1UL_32 m_23028 n_23029 =>
                 lazy(let __23030 := force(lazy(close[false] n_23029)) in
                      force(lazy(m_23028)))
               end))

def cmsortL_92 :=
  fun cmsort_23031 (zs_23032) ->
    lazy(let c_23033 :=
           force(lazy(fork
                        fun _23034 (_23035) -o
                          ((cmsort_workerL_90) 4 zs_23032 _23035)))
         in
         let _23036 := force(lazy(recv[L](c_23033))) in
         force(match _23036 with
               | ex1LL_30 m_23037 n_23038 =>
                 lazy(let __23039 := force(lazy(close[false] n_23038)) in
                      force(lazy(m_23037)))
               end))

def mklistU_95 :=
  fun mklist_23040 (n_23041) ->
    match (__lte__ n_23041 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_23041 ((mklist_23040) (__sub__ n_23041 1)))
    end

def mklistL_94 :=
  fun mklist_23042 (n_23043) ->
    match (__lte__ n_23043 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_23043 ((mklist_23042) (__sub__ n_23043 1)))
    end

def list_lenU_97 :=
  fun list_len_23044 (__23045) ->
    match __23045 with
    | nilUU_24  => 0
    | consUU_25 hd_23046 tl_23047 => (__add__ 1 ((list_len_23044) tl_23047))
    end

def list_lenL_96 :=
  fun list_len_23048 (__23049) ->
    match __23049 with
    | nilUL_22  => 0
    | consUL_23 hd_23050 tl_23051 => (__add__ 1 ((list_len_23048) tl_23051))
    end

def print_listU_99 :=
  fun print_list_23052 (__23053) ->
    match __23053 with
    | nilUU_24  => lazy(print "nil")
    | consUU_25 hd_23054 tl_23055 =>
      lazy(let __23056 := force(lazy(print ((string_of_int_31) hd_23054))) in
           let __23057 := force(lazy(print " :: ")) in
           force(((print_list_23052) tl_23055)))
    end

def print_listL_98 :=
  fun print_list_23058 (__23059) ->
    match __23059 with
    | nilUL_22  => lazy(print "nil")
    | consUL_23 hd_23060 tl_23061 =>
      lazy(let __23062 := force(lazy(print ((string_of_int_31) hd_23060))) in
           let __23063 := force(lazy(print " :: ")) in
           force(((print_list_23058) tl_23061)))
    end

def main :=
  let test_23064 := ((mklistL_94) 2000000) in
  lazy(let _23065 := force(((cmsortL_92) test_23064)) in
       force(let len_23066 := ((list_lenL_96) _23065) in
             lazy(print ((string_of_int_31) len_23066))))

trans23 success

-----------------------------------------

def idU_43 := lam (A_23491) -> (m_23492) -> m_23492

def idL_42 := lam (A_23493) -> (m_23494) -> m_23494

def rwlUU_47 :=
  lam (A_23495) -> (m_23496) -> (n_23497) -> (B_23498) -> (__23499) ->
  (__23500) -> __23500

def rwlUL_46 :=
  lam (A_23501) -> (m_23502) -> (n_23503) -> (B_23504) -> (__23505) ->
  (__23506) -> __23506

def rwlLU_45 :=
  lam (A_23507) -> (m_23508) -> (n_23509) -> (B_23510) -> (__23511) ->
  (__23512) -> __23512

def rwlLL_44 :=
  lam (A_23513) -> (m_23514) -> (n_23515) -> (B_23516) -> (__23517) ->
  (__23518) -> __23518

def rwrUU_51 :=
  lam (A_23519) -> (m_23520) -> (n_23521) -> (B_23522) -> (__23523) ->
  (__23524) -> __23524

def rwrUL_50 :=
  lam (A_23525) -> (m_23526) -> (n_23527) -> (B_23528) -> (__23529) ->
  (__23530) -> __23530

def rwrLU_49 :=
  lam (A_23531) -> (m_23532) -> (n_23533) -> (B_23534) -> (__23535) ->
  (__23536) -> __23536

def rwrLL_48 :=
  lam (A_23537) -> (m_23538) -> (n_23539) -> (B_23540) -> (__23541) ->
  (__23542) -> __23542

def sing_elimUU_65 := lam (A_23543) -> (x_23544) -> (__23545) -> __23545

def sing_elimUL_64 := lam (A_23546) -> (x_23547) -> (__23548) -> __23548

def sing_elimLU_63 := lam (A_23549) -> (x_23550) -> (__23551) -> !!

def sing_elimLL_62 := lam (A_23552) -> (x_23553) -> (__23554) -> __23554

def not_10 :=
  lam (__23555) ->
    match __23555 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__23556) -> (__23557) ->
    match __23556 with
    | true_4 =>
      match __23557 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__23558) -> (__23559) ->
    match __23558 with
    | true_4 => true_4
    | false_5 =>
      match __23559 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__23560) -> (__23561) ->
    match __23560 with
    | true_4 =>
      match __23561 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __23561 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_23562 (__23563) -> (__23564) ->
    match __23563 with
    | zero_6  => true_4
    | succ_7 n_23565 =>
      match __23564 with
      | zero_6  => false_5 | succ_7 n_23566 => ((lte_23562) n_23565 n_23566)
      end
    end

def lt_15 :=
  lam (x_23567) -> (y_23568) -> ((lte_14) (succ_7 x_23567) y_23568)

def pred_16 :=
  lam (__23569) ->
    match __23569 with
    | zero_6  => (zero_6 ) | succ_7 n_23570 => n_23570
    end

def add_17 :=
  fun add_23571 (__23572) -> (__23573) ->
    match __23572 with
    | zero_6  => __23573
    | succ_7 n_23574 => (succ_7 ((add_23571) n_23574 __23573))
    end

def sub_18 :=
  fun sub_23575 (__23576) -> (__23577) ->
    match __23577 with
    | zero_6  => __23576
    | succ_7 n_23578 => ((sub_23575) ((pred_16) __23576) n_23578)
    end

def mul_19 :=
  fun mul_23579 (__23580) -> (__23581) ->
    match __23580 with
    | zero_6  => (zero_6 )
    | succ_7 n_23582 => ((add_17) __23581 ((mul_23579) n_23582 __23581))
    end

def div_20 :=
  lam (x_23583) -> (y_23584) ->
    match ((lt_15) x_23583 y_23584) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_23585 :=
        fun loop_23586 (x_23587) -> (y_23588) ->
          match ((sub_18) x_23587 ((pred_16) y_23588)) with
          | zero_6  => (zero_6 )
          | succ_7 n_23589 => (succ_7 ((loop_23586) n_23589 y_23588))
          end
      in ((loop_23585) x_23583 y_23584)
    end

def rem_21 :=
  lam (x_23590) -> (y_23591) ->
    ((sub_18) x_23590 ((mul_19) ((div_20) x_23590 y_23591) y_23591))

def free_listUU_73 :=
  fun free_list_23592 (A_23593) -> (f_23594) -> (__23595) ->
    match __23595 with
    | nilUU_24  => tt_3
    | consUU_25 hd_23596 tl_23597 =>
      let __23598 := ((f_23594) hd_23596) in
      ((free_list_23592) NULL f_23594 tl_23597)
    end

def free_listUL_72 :=
  fun free_list_23599 (A_23600) -> (f_23601) -> (__23602) ->
    match __23602 with
    | nilUL_22  => tt_3
    | consUL_23 hd_23603 tl_23604 =>
      let __23605 := ((f_23601) hd_23603) in
      ((free_list_23599) NULL f_23601 tl_23604)
    end

def free_listLL_70 :=
  fun free_list_23606 (A_23607) -> (f_23608) -> (__23609) ->
    match __23609 with
    | nilLL_18  => tt_3
    | consLL_19 hd_23610 tl_23611 =>
      let __23612 := ((f_23608) hd_23610) in
      ((free_list_23606) NULL f_23608 tl_23611)
    end

def pow_25 :=
  lam (x_23613) -> (y_23614) ->
    let loop_23615 :=
      fun loop_23616 (acc_23617) -> (y_23618) ->
        match (__lte__ y_23618 0) with
        | true_4 => acc_23617
        | false_5 =>
          ((loop_23616) (__mul__ x_23613 acc_23617) (__sub__ y_23618 1))
        end
    in ((loop_23615) 1 y_23614)

def powm_26 :=
  lam (x_23619) -> (y_23620) -> (m_23621) ->
    let loop_23622 :=
      fun loop_23623 (acc_23624) -> (y_23625) ->
        match (__lte__ y_23625 0) with
        | true_4 => acc_23624
        | false_5 =>
          ((loop_23623)
            (__mod__ (__mul__ x_23619 acc_23624) m_23621) (__sub__ y_23625 1))
        end
    in ((loop_23622) 1 y_23620)

def ord_27 := lam (c_23626) -> (__ord__ c_23626)

def chr_28 := lam (i_23627) -> (__chr__ i_23627)

def str_29 := lam (c_23628) -> (__push__ "" c_23628)

def strlen_30 := lam (s_23629) -> (__size__ s_23629)

def string_of_int_31 :=
  lam (i_23630) ->
    let aux_23631 :=
      fun aux_23632 (i_23633) ->
        match (__lte__ 10 i_23633) with
        | true_4 =>
          let r_23634 := (__mod__ i_23633 10) in
          let i_23635 := (__div__ i_23633 10) in
          (__push__ ((aux_23632) i_23635)
            ((chr_28) (__add__ r_23634 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_23633 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_23630) with
    | true_4 => ((aux_23631) i_23630)
    | false_5 => (__cat__ "~" ((aux_23631) (__neg__ i_23630)))
    end

def splitU_83 :=
  fun split_23636 (__23637) ->
    match __23637 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_23638 tl_23639 =>
      match tl_23639 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_23638 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_23640 tl_23641 =>
        match ((split_23636) tl_23641) with
        | ex1UU_33 m_23642 n_23643 =>
          (ex1UU_33
            (consUU_25 hd_23638 m_23642) (consUU_25 hd_23640 n_23643))
        end
      end
    end

def splitL_82 :=
  fun split_23644 (__23645) ->
    match __23645 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_23646 tl_23647 =>
      match tl_23647 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_23646 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_23648 tl_23649 =>
        match ((split_23644) tl_23649) with
        | ex1LL_30 m_23650 n_23651 =>
          (ex1LL_30
            (consUL_23 hd_23646 m_23650) (consUL_23 hd_23648 n_23651))
        end
      end
    end

def mergeU_85 :=
  fun merge_23652 (__23653) -> (__23654) -o
    match __23653 with
    | nilUU_24  => __23654
    | consUU_25 hd_23655 tl_23656 =>
      match __23654 with
      | nilUU_24  => (consUU_25 hd_23655 tl_23656)
      | consUU_25 hd_23657 tl_23658 =>
        match (__lte__ hd_23655 hd_23657) with
        | true_4 =>
          (consUU_25
            hd_23655 ((merge_23652) tl_23656 (consUU_25 hd_23657 tl_23658)))
        | false_5 =>
          (consUU_25
            hd_23657 ((merge_23652) (consUU_25 hd_23655 tl_23656) tl_23658))
        end
      end
    end

def mergeL_84 :=
  fun merge_23659 (__23660) -> (__23661) -o
    match __23660 with
    | nilUL_22  => __23661
    | consUL_23 hd_23662 tl_23663 =>
      match __23661 with
      | nilUL_22  => (consUL_23 hd_23662 tl_23663)
      | consUL_23 hd_23664 tl_23665 =>
        match (__lte__ hd_23662 hd_23664) with
        | true_4 =>
          (consUL_23
            hd_23662 ((merge_23659) tl_23663 (consUL_23 hd_23664 tl_23665)))
        | false_5 =>
          (consUL_23
            hd_23664 ((merge_23659) (consUL_23 hd_23662 tl_23663) tl_23665))
        end
      end
    end

def msortU_87 :=
  fun msort_23666 (__23667) ->
    match __23667 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_23668 tl_23669 =>
      match tl_23669 with
      | nilUU_24  => (consUU_25 hd_23668 (nilUU_24 ))
      | consUU_25 hd_23670 tl_23671 =>
        match ((splitU_83)
                (consUU_25 hd_23668 (consUU_25 hd_23670 tl_23671))) with
        | ex1UU_33 m_23672 n_23673 =>
          ((mergeU_85) ((msort_23666) m_23672) ((msort_23666) n_23673))
        end
      end
    end

def msortL_86 :=
  fun msort_23674 (__23675) ->
    match __23675 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_23676 tl_23677 =>
      match tl_23677 with
      | nilUL_22  => (consUL_23 hd_23676 (nilUL_22 ))
      | consUL_23 hd_23678 tl_23679 =>
        match ((splitL_82)
                (consUL_23 hd_23676 (consUL_23 hd_23678 tl_23679))) with
        | ex1LL_30 m_23680 n_23681 =>
          ((mergeL_84) ((msort_23674) m_23680) ((msort_23674) n_23681))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_23682 (__23683) -> (zs_23684) -> (__23685) -o
    match zs_23684 with
    | nilUU_24  =>
      lazy(let c_23686 := send(__23685, (nilUU_24 )) in close[true] c_23686)
    | consUU_25 hd_23687 tl_23688 =>
      match tl_23688 with
      | nilUU_24  =>
        lazy(let c_23689 := send(__23685, (consUU_25 hd_23687 (nilUU_24 )))
             in close[true] c_23689)
      | consUU_25 hd_23690 tl_23691 =>
        match (__lte__ __23683 0) with
        | true_4 =>
          lazy(let c_23692 :=
                 send(__23685, ((msortU_87)
                                 (consUU_25
                                   hd_23687 (consUU_25 hd_23690 tl_23691))))
               in close[true] c_23692)
        | false_5 =>
          match ((splitU_83)
                  (consUU_25 hd_23687 (consUU_25 hd_23690 tl_23691))) with
          | ex1UU_33 m_23693 n_23694 =>
            lazy(let r1_23695 :=
                   fork
                     lam (_23696) -o
                       ((cmsort_worker_23682)
                         (__sub__ __23683 1) m_23693 _23696)
                 in
                 let r2_23697 :=
                   fork
                     lam (_23698) -o
                       ((cmsort_worker_23682)
                         (__sub__ __23683 1) n_23694 _23698)
                 in
                 let _23699 := recv[U](r1_23695) in
                 match _23699 with
                 | ex1UL_32 m_23700 n_23701 =>
                   let _23702 := recv[U](r2_23697) in
                   match _23702 with
                   | ex1UL_32 m_23703 n_23704 =>
                     let zs1_23705 := ((mergeU_85) m_23700 m_23703) in
                     let zs1_23706 :=
                       ((rwlUU_47) NULL NULL NULL NULL NULL zs1_23705)
                     in
                     let c_23707 := send(__23685, zs1_23706) in
                     let __23708 := close[false] n_23701 in
                     let __23709 := close[false] n_23704 in
                     close[true] c_23707
                   end
                 end)
          end
        end
      end
    end

def cmsort_workerL_90 :=
  fun cmsort_worker_23710 (__23711) -> (zs_23712) -> (__23713) -o
    match zs_23712 with
    | nilUL_22  =>
      lazy(let c_23714 := send(__23713, (nilUL_22 )) in close[true] c_23714)
    | consUL_23 hd_23715 tl_23716 =>
      match tl_23716 with
      | nilUL_22  =>
        lazy(let c_23717 := send(__23713, (consUL_23 hd_23715 (nilUL_22 )))
             in close[true] c_23717)
      | consUL_23 hd_23718 tl_23719 =>
        match (__lte__ __23711 0) with
        | true_4 =>
          lazy(let c_23720 :=
                 send(__23713, ((msortL_86)
                                 (consUL_23
                                   hd_23715 (consUL_23 hd_23718 tl_23719))))
               in close[true] c_23720)
        | false_5 =>
          match ((splitL_82)
                  (consUL_23 hd_23715 (consUL_23 hd_23718 tl_23719))) with
          | ex1LL_30 m_23721 n_23722 =>
            lazy(let r1_23723 :=
                   fork
                     lam (_23724) -o
                       ((cmsort_worker_23710)
                         (__sub__ __23711 1) m_23721 _23724)
                 in
                 let r2_23725 :=
                   fork
                     lam (_23726) -o
                       ((cmsort_worker_23710)
                         (__sub__ __23711 1) n_23722 _23726)
                 in
                 let _23727 := recv[L](r1_23723) in
                 match _23727 with
                 | ex1LL_30 m_23728 n_23729 =>
                   let _23730 := recv[L](r2_23725) in
                   match _23730 with
                   | ex1LL_30 m_23731 n_23732 =>
                     let zs1_23733 := ((mergeL_84) m_23728 m_23731) in
                     let zs1_23734 :=
                       ((rwlLL_44) NULL NULL NULL NULL NULL zs1_23733)
                     in
                     let c_23735 := send(__23713, zs1_23734) in
                     let __23736 := close[false] n_23729 in
                     let __23737 := close[false] n_23732 in
                     close[true] c_23735
                   end
                 end)
          end
        end
      end
    end

def cmsortU_93 :=
  lam (zs_23738) ->
    lazy(let c_23739 :=
           fork lam (_23740) -o ((cmsort_workerU_91) 4 zs_23738 _23740)
         in
         let _23741 := recv[U](c_23739) in
         match _23741 with
         | ex1UL_32 m_23742 n_23743 =>
           let __23744 := close[false] n_23743 in m_23742
         end)

def cmsortL_92 :=
  lam (zs_23745) ->
    lazy(let c_23746 :=
           fork lam (_23747) -o ((cmsort_workerL_90) 4 zs_23745 _23747)
         in
         let _23748 := recv[L](c_23746) in
         match _23748 with
         | ex1LL_30 m_23749 n_23750 =>
           let __23751 := close[false] n_23750 in m_23749
         end)

def mklistU_95 :=
  fun mklist_23752 (n_23753) ->
    match (__lte__ n_23753 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_23753 ((mklist_23752) (__sub__ n_23753 1)))
    end

def mklistL_94 :=
  fun mklist_23754 (n_23755) ->
    match (__lte__ n_23755 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_23755 ((mklist_23754) (__sub__ n_23755 1)))
    end

def list_lenU_97 :=
  fun list_len_23756 (__23757) ->
    match __23757 with
    | nilUU_24  => 0
    | consUU_25 hd_23758 tl_23759 => (__add__ 1 ((list_len_23756) tl_23759))
    end

def list_lenL_96 :=
  fun list_len_23760 (__23761) ->
    match __23761 with
    | nilUL_22  => 0
    | consUL_23 hd_23762 tl_23763 => (__add__ 1 ((list_len_23760) tl_23763))
    end

def print_listU_99 :=
  fun print_list_23764 (__23765) ->
    match __23765 with
    | nilUU_24  => lazy(print "nil")
    | consUU_25 hd_23766 tl_23767 =>
      lazy(let __23768 := print ((string_of_int_31) hd_23766) in
           let __23769 := print " :: " in
           force(((print_list_23764) tl_23767)))
    end

def print_listL_98 :=
  fun print_list_23770 (__23771) ->
    match __23771 with
    | nilUL_22  => lazy(print "nil")
    | consUL_23 hd_23772 tl_23773 =>
      lazy(let __23774 := print ((string_of_int_31) hd_23772) in
           let __23775 := print " :: " in
           force(((print_list_23770) tl_23773)))
    end

def main :=
  let test_23776 := ((mklistL_94) 2000000) in
  lazy(let _23777 := force(((cmsortL_92) test_23776)) in
       let len_23778 := ((list_lenL_96) _23777) in
       print ((string_of_int_31) len_23778))

trans3e success

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := mkconstr(consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := mkconstr(nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := mkconstr(consUL_23, [hd_292, m_303]);
              x_306 := mkconstr(consUL_23, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := mkconstr(consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := mkconstr(nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := mkconstr(nilUL_22, []);
          x_372 := mkconstr(consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_23, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_24() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_24, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_25(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_24() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_24, []);
              x_401 := mkconstr(consUU_25, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_25(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_25, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_25, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_25, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_25, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_33(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_32(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_32(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                            }
                          }
                          x_437 := x_442;
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_22() => {
      x_461 :=
        lazy {
          x_464 := mkconstr(nilUL_22, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_23(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_22() => {
          x_469 :=
            lazy {
              x_472 := mkconstr(nilUL_22, []);
              x_473 := mkconstr(consUL_23, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_23(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := mkconstr(consUL_23, [hd_475, tl_476]);
                  x_484 := mkconstr(consUL_23, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := mkconstr(consUL_23, [hd_475, tl_476]);
              x_489 := mkconstr(consUL_23, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_30(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_30(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_30(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                            }
                          }
                          x_509 := x_514;
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_32(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_30(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_24, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_25, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_22, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_23, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_24() => {
      x_578 := 0;
    }
    consUU_25(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_22() => {
      x_585 := 0;
    }
    consUL_23(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_24() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_25(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_22() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
    }
    consUL_23(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

trans34 success

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := reconstr(__287, nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := reconstr(tl_293, nilUL_22, []);
          x_296 := reconstr(__287, consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_23, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_23, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
      free(__327);
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := reconstr(__327, consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := reconstr(__365, nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := reconstr(tl_369, nilUL_22, []);
          x_372 := reconstr(__365, consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_23, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_24() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_24, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_25(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_24() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_24, []);
              x_401 := mkconstr(consUU_25, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_25(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_25, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_25, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_25, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_25, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_33(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_32(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_32(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                              free(_440);
                            }
                          }
                          x_437 := x_442;
                          free(_435);
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                  free(x_415);
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_22() => {
      x_461 :=
        lazy {
          x_464 := reconstr(zs_458, nilUL_22, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_23(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_22() => {
          x_469 :=
            lazy {
              x_472 := reconstr(tl_467, nilUL_22, []);
              x_473 := reconstr(zs_458, consUL_23, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_23(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := reconstr(tl_467, consUL_23, [hd_475, tl_476]);
                  x_484 := reconstr(zs_458, consUL_23, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := reconstr(tl_467, consUL_23, [hd_475, tl_476]);
              x_489 := reconstr(zs_458, consUL_23, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_30(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_30(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_30(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                              free(_512);
                            }
                          }
                          x_509 := x_514;
                          free(_507);
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                  free(x_487);
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_32(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
          free(_537);
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_30(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
          free(_553);
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_24, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_25, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_22, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_23, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_24() => {
      x_578 := 0;
    }
    consUU_25(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_22() => {
      x_585 := 0;
      free(__584);
    }
    consUL_23(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
      free(__584);
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_24() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_25(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_22() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
      free(__608);
    }
    consUL_23(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
      free(__608);
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

trans4e success

-----------------------------------------

fn fn0_idU_634(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_635(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_636 := fn0_idU_634(A_2, m_3);
  return x_636;
}

fn fn0_idL_637(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_638(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_639 := fn0_idL_637(A_5, m_6);
  return x_639;
}

fn fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_641(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_642 := fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13);
  return x_642;
}

fn fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_644(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_645 := fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20);
  return x_645;
}

fn fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_647(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_648 := fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27);
  return x_648;
}

fn fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_650(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_651 := fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34);
  return x_651;
}

fn fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_653(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_654 := fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41);
  return x_654;
}

fn fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_656(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_657 := fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48);
  return x_657;
}

fn fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_659(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_660 := fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55);
  return x_660;
}

fn fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_662(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_663 := fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62);
  return x_663;
}

fn fn0_sing_elimUU_664(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_665(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_666 := fn0_sing_elimUU_664(A_64, x_65, __66);
  return x_666;
}

fn fn0_sing_elimUL_667(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_668(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_669 := fn0_sing_elimUL_667(A_68, x_69, __70);
  return x_669;
}

fn fn0_sing_elimLU_670(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_671(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_672 := fn0_sing_elimLU_670(A_72, x_73, __74);
  return x_672;
}

fn fn0_sing_elimLL_673(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_674(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_675 := fn0_sing_elimLL_673(A_76, x_77, __78);
  return x_675;
}

fn fn0_not_676(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_677(env) {
  __80 := env[1];
  x_678 := fn0_not_676(__80);
  return x_678;
}

fn fn0_and_679(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_680(env) {
  __83 := env[1];
  __84 := env[2];
  x_681 := fn0_and_679(__83, __84);
  return x_681;
}

fn fn0_or_682(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_683(env) {
  __88 := env[1];
  __89 := env[2];
  x_684 := fn0_or_682(__88, __89);
  return x_684;
}

fn fn0_xor_685(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_686(env) {
  __93 := env[1];
  __94 := env[2];
  x_687 := fn0_xor_685(__93, __94);
  return x_687;
}

fn fn0_lte_688(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_688(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_689(env) {
  __99 := env[1];
  __100 := env[2];
  x_690 := fn0_lte_688(__99, __100);
  return x_690;
}

fn fn0_lt_691(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_688(x_110, y_108);
  return x_109;
}

fn fn1_lt_692(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_693 := fn0_lt_691(x_107, y_108);
  return x_693;
}

fn fn0_pred_694(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_695(env) {
  __112 := env[1];
  x_696 := fn0_pred_694(__112);
  return x_696;
}

fn fn0_add_697(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_697(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_698(env) {
  __117 := env[1];
  __118 := env[2];
  x_699 := fn0_add_697(__117, __118);
  return x_699;
}

fn fn0_sub_700(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_694(__124);
      x_128 := fn0_sub_700(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_701(env) {
  __124 := env[1];
  __125 := env[2];
  x_702 := fn0_sub_700(__124, __125);
  return x_702;
}

fn fn0_mul_703(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_703(n_135, __132);
      x_136 := fn0_add_697(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_704(env) {
  __131 := env[1];
  __132 := env[2];
  x_705 := fn0_mul_703(__131, __132);
  return x_705;
}

fn fn0_div_706(x_139, y_140) {
  x_142 := fn0_lt_691(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_708, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_712, loop_144, x_139);
      appc(x_713, x_712, y_140);
      move1(x_156, x_713);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_707(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_715 := fn0_div_706(x_139, y_140);
  return x_715;
}

fn fn0_rem_716(x_158, y_159) {
  x_162 := fn0_div_706(x_158, y_159);
  x_161 := fn0_mul_703(x_162, y_159);
  x_160 := fn0_sub_700(x_158, x_161);
  return x_160;
}

fn fn1_rem_717(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_718 := fn0_rem_716(x_158, y_159);
  return x_718;
}

fn fn0_free_listUU_719(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_721, f_165, hd_168);
      move1(x_171, x_721);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_719(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_720(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_723 := fn0_free_listUU_719(A_164, f_165, __166);
  return x_723;
}

fn fn0_free_listUL_724(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_726, f_175, hd_178);
      move1(x_181, x_726);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_724(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_725(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_728 := fn0_free_listUL_724(A_174, f_175, __176);
  return x_728;
}

fn fn0_free_listLL_729(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_731, f_185, hd_188);
      move1(x_191, x_731);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_729(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_730(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_733 := fn0_free_listLL_729(A_184, f_185, __186);
  return x_733;
}

fn fn0_pow_734(x_194, y_195) {
  mkclo1(x_197, fn1_loop_736, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_740, loop_196, 1);
  appc(x_741, x_740, y_195);
  move1(x_206, x_741);
  return x_206;
}

fn fn1_pow_735(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_743 := fn0_pow_734(x_194, y_195);
  return x_743;
}

fn fn0_powm_744(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_746, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_750, loop_211, 1);
  appc(x_751, x_750, y_209);
  move1(x_222, x_751);
  return x_222;
}

fn fn1_powm_745(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_753 := fn0_powm_744(x_208, y_209, m_210);
  return x_753;
}

fn fn0_ord_754(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_755(env) {
  c_224 := env[1];
  x_756 := fn0_ord_754(c_224);
  return x_756;
}

fn fn0_chr_757(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_758(env) {
  i_227 := env[1];
  x_759 := fn0_chr_757(i_227);
  return x_759;
}

fn fn0_str_760(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_761(env) {
  c_230 := env[1];
  x_762 := fn0_str_760(c_230);
  return x_762;
}

fn fn0_strlen_763(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_764(env) {
  s_234 := env[1];
  x_765 := fn0_strlen_763(s_234);
  return x_765;
}

fn fn0_string_of_int_766(i_237) {
  mkclo1(x_239, fn1_aux_768, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_771, aux_238, i_237);
      move1(x_259, x_771);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_773, aux_238, x_263);
      move1(x_262, x_773);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_767(env) {
  i_237 := env[1];
  x_775 := fn0_string_of_int_766(i_237);
  return x_775;
}

fn fn0_splitU_776(__265) {
  switch(ctagof(__265)){
    nilUU_24 => {
      mkbox(x_267, nilUU_24, 0);
      mkbox(x_268, nilUU_24, 0);
      mkbox(x_269, ex1UU_33, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_25 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_24 => {
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, consUU_25, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_24, 0);
          mkbox(x_276, ex1UU_33, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_25 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_776(tl_278);
          switch(ctagof(x_280)){
            ex1UU_33 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_25);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_25, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_33, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_777(env) {
  __265 := env[1];
  x_778 := fn0_splitU_776(__265);
  return x_778;
}

fn fn0_splitL_779(__287) {
  switch(ctagof(__287)){
    nilUL_22 => {
      rebox(x_289, __287, nilUL_22);
      mkbox(x_290, nilUL_22, 0);
      mkbox(x_291, ex1LL_30, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_23 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_22 => {
          rebox(x_295, tl_293, nilUL_22);
          rebox(x_296, __287, consUL_23);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_22, 0);
          mkbox(x_298, ex1LL_30, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_23 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_779(tl_300);
          switch(ctagof(x_302)){
            ex1LL_30 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_23);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_23);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_30);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_780(env) {
  __287 := env[1];
  x_781 := fn0_splitL_779(__287);
  return x_781;
}

fn fn0_mergeU_782(__309, __310) {
  switch(ctagof(__309)){
    nilUU_24 => {
      move1(x_311, __310);
      break;
    }
    consUU_25 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_24 => {
          mkbox(x_315, consUU_25, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_25 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_25, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_782(tl_313, x_321);
              mkbox(x_322, consUU_25, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_25, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_782(x_324, tl_317);
              mkbox(x_325, consUU_25, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_783(env) {
  __309 := env[1];
  __310 := env[2];
  x_784 := fn0_mergeU_782(__309, __310);
  return x_784;
}

fn fn0_mergeL_785(__327, __328) {
  switch(ctagof(__327)){
    nilUL_22 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_23 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_22 => {
          rebox(x_333, __327, consUL_23);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_23 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_23);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_785(tl_331, x_339);
              rebox(x_340, __327, consUL_23);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_23);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_785(x_342, tl_335);
              rebox(x_343, __327, consUL_23);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_786(env) {
  __327 := env[1];
  __328 := env[2];
  x_787 := fn0_mergeL_785(__327, __328);
  return x_787;
}

fn fn0_msortU_788(__345) {
  switch(ctagof(__345)){
    nilUU_24 => {
      mkbox(x_347, nilUU_24, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_25 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_24 => {
          mkbox(x_351, nilUU_24, 0);
          mkbox(x_352, consUU_25, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_25 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_25, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_25, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_776(x_358);
          switch(ctagof(x_356)){
            ex1UU_33 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_788(m_359);
              x_363 := fn0_msortU_788(n_360);
              x_361 := fn0_mergeU_782(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_789(env) {
  __345 := env[1];
  x_790 := fn0_msortU_788(__345);
  return x_790;
}

fn fn0_msortL_791(__365) {
  switch(ctagof(__365)){
    nilUL_22 => {
      rebox(x_367, __365, nilUL_22);
      move1(x_366, x_367);
      break;
    }
    consUL_23 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_22 => {
          rebox(x_371, tl_369, nilUL_22);
          rebox(x_372, __365, consUL_23);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_23 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_23);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_23);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_779(x_378);
          switch(ctagof(x_376)){
            ex1LL_30 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_791(m_379);
              x_383 := fn0_msortL_791(n_380);
              x_381 := fn0_mergeL_785(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_792(env) {
  __365 := env[1];
  x_793 := fn0_msortL_791(__365);
  return x_793;
}

fn fn0_cmsort_workerU_794(__385, zs_386, __387) {
  switch(ctagof(zs_386)){
    nilUU_24 => {
      lazy(x_389, lazy__796, 1);
      setlazy(x_389, __387, 0);
      move1(x_388, x_389);
      break;
    }
    consUU_25 => {
      getbox(hd_394, zs_386, 0);
      getbox(tl_395, zs_386, 1);
      switch(ctagof(tl_395)){
        nilUU_24 => {
          lazy(x_397, lazy__797, 2);
          setlazy(x_397, __387, 0);
          setlazy(x_397, hd_394, 1);
          move1(x_396, x_397);
          break;
        }
        consUU_25 => {
          getbox(hd_403, tl_395, 0);
          getbox(tl_404, tl_395, 1);
          lte(x_406, __385, 0);
          switch(x_406){
            true_4 => {
              lazy(x_407, lazy__798, 5);
              setlazy(x_407, msortU_344, 0);
              setlazy(x_407, __387, 1);
              setlazy(x_407, hd_394, 2);
              setlazy(x_407, hd_403, 3);
              setlazy(x_407, tl_404, 4);
              move1(x_405, x_407);
              break;
            }
            false_5 => {
              mkbox(x_416, consUU_25, 2);
              setbox(x_416, hd_403, 0);
              setbox(x_416, tl_404, 1);
              mkbox(x_417, consUU_25, 2);
              setbox(x_417, hd_394, 0);
              setbox(x_417, x_416, 1);
              x_415 := fn0_splitU_776(x_417);
              switch(ctagof(x_415)){
                ex1UU_33 => {
                  getbox(m_418, x_415, 0);
                  getbox(n_419, x_415, 1);
                  lazy(x_420, lazy__799, 7);
                  setlazy(x_420, rwlUU_7, 0);
                  setlazy(x_420, mergeU_308, 1);
                  setlazy(x_420, cmsort_workerU_384, 2);
                  setlazy(x_420, __385, 3);
                  setlazy(x_420, __387, 4);
                  setlazy(x_420, m_418, 5);
                  setlazy(x_420, n_419, 6);
                  move1(x_414, x_420);
                  free(x_415);
                  break;
                }
              }
              move1(x_405, x_414);
              break;
            }
          }
          move1(x_396, x_405);
          break;
        }
      }
      move1(x_388, x_396);
      break;
    }
  }
  return x_388;
}

fn fn1_cmsort_workerU_795(env) {
  __385 := env[1];
  zs_386 := env[2];
  __387 := env[3];
  x_802 := fn0_cmsort_workerU_794(__385, zs_386, __387);
  return x_802;
}

fn fn0_cmsort_workerL_803(__457, zs_458, __459) {
  switch(ctagof(zs_458)){
    nilUL_22 => {
      lazy(x_461, lazy__805, 2);
      setlazy(x_461, zs_458, 0);
      setlazy(x_461, __459, 1);
      move1(x_460, x_461);
      break;
    }
    consUL_23 => {
      getbox(hd_466, zs_458, 0);
      getbox(tl_467, zs_458, 1);
      switch(ctagof(tl_467)){
        nilUL_22 => {
          lazy(x_469, lazy__806, 4);
          setlazy(x_469, zs_458, 0);
          setlazy(x_469, __459, 1);
          setlazy(x_469, hd_466, 2);
          setlazy(x_469, tl_467, 3);
          move1(x_468, x_469);
          break;
        }
        consUL_23 => {
          getbox(hd_475, tl_467, 0);
          getbox(tl_476, tl_467, 1);
          lte(x_478, __457, 0);
          switch(x_478){
            true_4 => {
              lazy(x_479, lazy__807, 7);
              setlazy(x_479, msortL_364, 0);
              setlazy(x_479, zs_458, 1);
              setlazy(x_479, __459, 2);
              setlazy(x_479, hd_466, 3);
              setlazy(x_479, tl_467, 4);
              setlazy(x_479, hd_475, 5);
              setlazy(x_479, tl_476, 6);
              move1(x_477, x_479);
              break;
            }
            false_5 => {
              rebox(x_488, tl_467, consUL_23);
              setbox(x_488, hd_475, 0);
              setbox(x_488, tl_476, 1);
              rebox(x_489, zs_458, consUL_23);
              setbox(x_489, hd_466, 0);
              setbox(x_489, x_488, 1);
              x_487 := fn0_splitL_779(x_489);
              switch(ctagof(x_487)){
                ex1LL_30 => {
                  getbox(m_490, x_487, 0);
                  getbox(n_491, x_487, 1);
                  lazy(x_492, lazy__808, 7);
                  setlazy(x_492, rwlLL_28, 0);
                  setlazy(x_492, mergeL_326, 1);
                  setlazy(x_492, cmsort_workerL_456, 2);
                  setlazy(x_492, __457, 3);
                  setlazy(x_492, __459, 4);
                  setlazy(x_492, m_490, 5);
                  setlazy(x_492, n_491, 6);
                  move1(x_486, x_492);
                  free(x_487);
                  break;
                }
              }
              move1(x_477, x_486);
              break;
            }
          }
          move1(x_468, x_477);
          break;
        }
      }
      move1(x_460, x_468);
      break;
    }
  }
  return x_460;
}

fn fn1_cmsort_workerL_804(env) {
  __457 := env[1];
  zs_458 := env[2];
  __459 := env[3];
  x_811 := fn0_cmsort_workerL_803(__457, zs_458, __459);
  return x_811;
}

fn fn0_cmsortU_812(zs_529) {
  lazy(x_530, lazy__814, 2);
  setlazy(x_530, cmsort_workerU_384, 0);
  setlazy(x_530, zs_529, 1);
  return x_530;
}

fn fn1_cmsortU_813(env) {
  zs_529 := env[1];
  x_816 := fn0_cmsortU_812(zs_529);
  return x_816;
}

fn fn0_cmsortL_817(zs_545) {
  lazy(x_546, lazy__819, 2);
  setlazy(x_546, cmsort_workerL_456, 0);
  setlazy(x_546, zs_545, 1);
  return x_546;
}

fn fn1_cmsortL_818(env) {
  zs_545 := env[1];
  x_821 := fn0_cmsortL_817(zs_545);
  return x_821;
}

fn fn0_mklistU_822(n_561) {
  lte(x_563, n_561, 0);
  switch(x_563){
    true_4 => {
      mkbox(x_564, nilUU_24, 0);
      move1(x_562, x_564);
      break;
    }
    false_5 => {
      sub(x_566, n_561, 1);
      x_565 := fn0_mklistU_822(x_566);
      mkbox(x_567, consUU_25, 2);
      setbox(x_567, n_561, 0);
      setbox(x_567, x_565, 1);
      move1(x_562, x_567);
      break;
    }
  }
  return x_562;
}

fn fn1_mklistU_823(env) {
  n_561 := env[1];
  x_824 := fn0_mklistU_822(n_561);
  return x_824;
}

fn fn0_mklistL_825(n_569) {
  lte(x_571, n_569, 0);
  switch(x_571){
    true_4 => {
      mkbox(x_572, nilUL_22, 0);
      move1(x_570, x_572);
      break;
    }
    false_5 => {
      sub(x_574, n_569, 1);
      x_573 := fn0_mklistL_825(x_574);
      mkbox(x_575, consUL_23, 2);
      setbox(x_575, n_569, 0);
      setbox(x_575, x_573, 1);
      move1(x_570, x_575);
      break;
    }
  }
  return x_570;
}

fn fn1_mklistL_826(env) {
  n_569 := env[1];
  x_827 := fn0_mklistL_825(n_569);
  return x_827;
}

fn fn0_list_lenU_828(__577) {
  switch(ctagof(__577)){
    nilUU_24 => {
      move1(x_578, 0);
      break;
    }
    consUU_25 => {
      getbox(hd_579, __577, 0);
      getbox(tl_580, __577, 1);
      x_582 := fn0_list_lenU_828(tl_580);
      add(x_581, 1, x_582);
      move1(x_578, x_581);
      break;
    }
  }
  return x_578;
}

fn fn1_list_lenU_829(env) {
  __577 := env[1];
  x_830 := fn0_list_lenU_828(__577);
  return x_830;
}

fn fn0_list_lenL_831(__584) {
  switch(ctagof(__584)){
    nilUL_22 => {
      move1(x_585, 0);
      free(__584);
      break;
    }
    consUL_23 => {
      getbox(hd_586, __584, 0);
      getbox(tl_587, __584, 1);
      x_589 := fn0_list_lenL_831(tl_587);
      add(x_588, 1, x_589);
      move1(x_585, x_588);
      free(__584);
      break;
    }
  }
  return x_585;
}

fn fn1_list_lenL_832(env) {
  __584 := env[1];
  x_833 := fn0_list_lenL_831(__584);
  return x_833;
}

fn fn0_print_listU_834(__591) {
  switch(ctagof(__591)){
    nilUU_24 => {
      lazy(x_593, lazy__836, 0);
      move1(x_592, x_593);
      break;
    }
    consUU_25 => {
      getbox(hd_596, __591, 0);
      getbox(tl_597, __591, 1);
      lazy(x_598, lazy__837, 4);
      setlazy(x_598, string_of_int_236, 0);
      setlazy(x_598, print_listU_590, 1);
      setlazy(x_598, hd_596, 2);
      setlazy(x_598, tl_597, 3);
      move1(x_592, x_598);
      break;
    }
  }
  return x_592;
}

fn fn1_print_listU_835(env) {
  __591 := env[1];
  x_838 := fn0_print_listU_834(__591);
  return x_838;
}

fn fn0_print_listL_839(__608) {
  switch(ctagof(__608)){
    nilUL_22 => {
      lazy(x_610, lazy__841, 0);
      move1(x_609, x_610);
      free(__608);
      break;
    }
    consUL_23 => {
      getbox(hd_613, __608, 0);
      getbox(tl_614, __608, 1);
      lazy(x_615, lazy__842, 4);
      setlazy(x_615, string_of_int_236, 0);
      setlazy(x_615, print_listL_607, 1);
      setlazy(x_615, hd_613, 2);
      setlazy(x_615, tl_614, 3);
      move1(x_609, x_615);
      free(__608);
      break;
    }
  }
  return x_609;
}

fn fn1_print_listL_840(env) {
  __608 := env[1];
  x_843 := fn0_print_listL_839(__608);
  return x_843;
}

fn lazy__845(env) {
  string_of_int_236 := env[0];
  cmsortL_544 := env[1];
  list_lenL_583 := env[2];
  test_624 := env[3];
  x_629 := fn0_cmsortL_817(test_624);
  force(x_628, x_629);
  free(x_629);
  move1(_627, x_628);
  x_631 := fn0_list_lenL_831(_627);
  move1(len_630, x_631);
  x_633 := fn0_string_of_int_766(len_630);
  print(x_632, x_633);
  return x_632;
}

fn lazy__842(env) {
  string_of_int_236 := env[0];
  print_listL_607 := env[1];
  hd_613 := env[2];
  tl_614 := env[3];
  x_618 := fn0_string_of_int_766(hd_613);
  print(x_617, x_618);
  move1(__616, x_617);
  str(x_621, " :: ")
  print(x_620, x_621);
  move1(__619, x_620);
  x_623 := fn0_print_listL_839(tl_614);
  force(x_622, x_623);
  free(x_623);
  return x_622;
}

fn lazy__841(env) {
  str(x_612, "nil")
  print(x_611, x_612);
  return x_611;
}

fn lazy__837(env) {
  string_of_int_236 := env[0];
  print_listU_590 := env[1];
  hd_596 := env[2];
  tl_597 := env[3];
  x_601 := fn0_string_of_int_766(hd_596);
  print(x_600, x_601);
  move1(__599, x_600);
  str(x_604, " :: ")
  print(x_603, x_604);
  move1(__602, x_603);
  x_606 := fn0_print_listU_834(tl_597);
  force(x_605, x_606);
  free(x_606);
  return x_605;
}

fn lazy__836(env) {
  str(x_595, "nil")
  print(x_594, x_595);
  return x_594;
}

fn lazy__819(env) {
  cmsort_workerL_456 := env[0];
  zs_545 := env[1];
  mkclo1(x_549, fn1_lam_820, fvc:=2, argc:=1);
  setclo(x_549, cmsort_workerL_456, 1);
  setclo(x_549, zs_545, 2);
  fork(x_548, x_549);
  move1(c_547, x_548);
  recv1(x_554, c_547);
  move1(_553, x_554);
  switch(ctagof(_553)){
    ex1LL_30 => {
      getbox(m_556, _553, 0);
      getbox(n_557, _553, 1);
      close1(x_559, n_557);
      move1(__558, x_559);
      move1(x_555, m_556);
      free(_553);
      break;
    }
  }
  return x_555;
}

fn fn1_lam_820(env) {
  lam_550 := env[0];
  cmsort_workerL_456 := env[1];
  zs_545 := env[2];
  _551 := env[3];
  x_552 := fn0_cmsort_workerL_803(4, zs_545, _551);
  return x_552;
}

fn lazy__814(env) {
  cmsort_workerU_384 := env[0];
  zs_529 := env[1];
  mkclo1(x_533, fn1_lam_815, fvc:=2, argc:=1);
  setclo(x_533, cmsort_workerU_384, 1);
  setclo(x_533, zs_529, 2);
  fork(x_532, x_533);
  move1(c_531, x_532);
  recv0(x_538, c_531);
  move1(_537, x_538);
  switch(ctagof(_537)){
    ex1UL_32 => {
      getbox(m_540, _537, 0);
      getbox(n_541, _537, 1);
      close1(x_543, n_541);
      move1(__542, x_543);
      move1(x_539, m_540);
      free(_537);
      break;
    }
  }
  return x_539;
}

fn fn1_lam_815(env) {
  lam_534 := env[0];
  cmsort_workerU_384 := env[1];
  zs_529 := env[2];
  _535 := env[3];
  x_536 := fn0_cmsort_workerU_794(4, zs_529, _535);
  return x_536;
}

fn lazy__808(env) {
  rwlLL_28 := env[0];
  mergeL_326 := env[1];
  cmsort_workerL_456 := env[2];
  __457 := env[3];
  __459 := env[4];
  m_490 := env[5];
  n_491 := env[6];
  mkclo1(x_495, fn1_lam_809, fvc:=3, argc:=1);
  setclo(x_495, cmsort_workerL_456, 1);
  setclo(x_495, __457, 2);
  setclo(x_495, m_490, 3);
  fork(x_494, x_495);
  move1(r1_493, x_494);
  mkclo1(x_502, fn1_lam_810, fvc:=3, argc:=1);
  setclo(x_502, cmsort_workerL_456, 1);
  setclo(x_502, __457, 2);
  setclo(x_502, n_491, 3);
  fork(x_501, x_502);
  move1(r2_500, x_501);
  recv1(x_508, r1_493);
  move1(_507, x_508);
  switch(ctagof(_507)){
    ex1LL_30 => {
      getbox(m_510, _507, 0);
      getbox(n_511, _507, 1);
      recv1(x_513, r2_500);
      move1(_512, x_513);
      switch(ctagof(_512)){
        ex1LL_30 => {
          getbox(m_515, _512, 0);
          getbox(n_516, _512, 1);
          x_518 := fn0_mergeL_785(m_510, m_515);
          move1(zs1_517, x_518);
          x_520 := fn0_rwlLL_649(NULL, NULL, NULL, NULL, NULL, zs1_517);
          move1(zs1_519, x_520);
          send(x_522, __459, zs1_519);
          move1(c_521, x_522);
          close1(x_524, n_511);
          move1(__523, x_524);
          close1(x_526, n_516);
          move1(__525, x_526);
          close0(x_527, c_521);
          move1(x_514, x_527);
          free(_512);
          break;
        }
      }
      move1(x_509, x_514);
      free(_507);
      break;
    }
  }
  return x_509;
}

fn fn1_lam_809(env) {
  lam_496 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  m_490 := env[3];
  _497 := env[4];
  sub(x_499, __457, 1);
  x_498 := fn0_cmsort_workerL_803(x_499, m_490, _497);
  return x_498;
}

fn fn1_lam_810(env) {
  lam_503 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  n_491 := env[3];
  _504 := env[4];
  sub(x_506, __457, 1);
  x_505 := fn0_cmsort_workerL_803(x_506, n_491, _504);
  return x_505;
}

fn lazy__807(env) {
  msortL_364 := env[0];
  zs_458 := env[1];
  __459 := env[2];
  hd_466 := env[3];
  tl_467 := env[4];
  hd_475 := env[5];
  tl_476 := env[6];
  rebox(x_483, tl_467, consUL_23);
  setbox(x_483, hd_475, 0);
  setbox(x_483, tl_476, 1);
  rebox(x_484, zs_458, consUL_23);
  setbox(x_484, hd_466, 0);
  setbox(x_484, x_483, 1);
  x_482 := fn0_msortL_791(x_484);
  send(x_481, __459, x_482);
  move1(c_480, x_481);
  close0(x_485, c_480);
  return x_485;
}

fn lazy__806(env) {
  zs_458 := env[0];
  __459 := env[1];
  hd_466 := env[2];
  tl_467 := env[3];
  rebox(x_472, tl_467, nilUL_22);
  rebox(x_473, zs_458, consUL_23);
  setbox(x_473, hd_466, 0);
  setbox(x_473, x_472, 1);
  send(x_471, __459, x_473);
  move1(c_470, x_471);
  close0(x_474, c_470);
  return x_474;
}

fn lazy__805(env) {
  zs_458 := env[0];
  __459 := env[1];
  rebox(x_464, zs_458, nilUL_22);
  send(x_463, __459, x_464);
  move1(c_462, x_463);
  close0(x_465, c_462);
  return x_465;
}

fn lazy__799(env) {
  rwlUU_7 := env[0];
  mergeU_308 := env[1];
  cmsort_workerU_384 := env[2];
  __385 := env[3];
  __387 := env[4];
  m_418 := env[5];
  n_419 := env[6];
  mkclo1(x_423, fn1_lam_800, fvc:=3, argc:=1);
  setclo(x_423, cmsort_workerU_384, 1);
  setclo(x_423, __385, 2);
  setclo(x_423, m_418, 3);
  fork(x_422, x_423);
  move1(r1_421, x_422);
  mkclo1(x_430, fn1_lam_801, fvc:=3, argc:=1);
  setclo(x_430, cmsort_workerU_384, 1);
  setclo(x_430, __385, 2);
  setclo(x_430, n_419, 3);
  fork(x_429, x_430);
  move1(r2_428, x_429);
  recv0(x_436, r1_421);
  move1(_435, x_436);
  switch(ctagof(_435)){
    ex1UL_32 => {
      getbox(m_438, _435, 0);
      getbox(n_439, _435, 1);
      recv0(x_441, r2_428);
      move1(_440, x_441);
      switch(ctagof(_440)){
        ex1UL_32 => {
          getbox(m_443, _440, 0);
          getbox(n_444, _440, 1);
          x_446 := fn0_mergeU_782(m_438, m_443);
          move1(zs1_445, x_446);
          x_448 := fn0_rwlUU_640(NULL, NULL, NULL, NULL, NULL, zs1_445);
          move1(zs1_447, x_448);
          send(x_450, __387, zs1_447);
          move1(c_449, x_450);
          close1(x_452, n_439);
          move1(__451, x_452);
          close1(x_454, n_444);
          move1(__453, x_454);
          close0(x_455, c_449);
          move1(x_442, x_455);
          free(_440);
          break;
        }
      }
      move1(x_437, x_442);
      free(_435);
      break;
    }
  }
  return x_437;
}

fn fn1_lam_800(env) {
  lam_424 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  m_418 := env[3];
  _425 := env[4];
  sub(x_427, __385, 1);
  x_426 := fn0_cmsort_workerU_794(x_427, m_418, _425);
  return x_426;
}

fn fn1_lam_801(env) {
  lam_431 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  n_419 := env[3];
  _432 := env[4];
  sub(x_434, __385, 1);
  x_433 := fn0_cmsort_workerU_794(x_434, n_419, _432);
  return x_433;
}

fn lazy__798(env) {
  msortU_344 := env[0];
  __387 := env[1];
  hd_394 := env[2];
  hd_403 := env[3];
  tl_404 := env[4];
  mkbox(x_411, consUU_25, 2);
  setbox(x_411, hd_403, 0);
  setbox(x_411, tl_404, 1);
  mkbox(x_412, consUU_25, 2);
  setbox(x_412, hd_394, 0);
  setbox(x_412, x_411, 1);
  x_410 := fn0_msortU_788(x_412);
  send(x_409, __387, x_410);
  move1(c_408, x_409);
  close0(x_413, c_408);
  return x_413;
}

fn lazy__797(env) {
  __387 := env[0];
  hd_394 := env[1];
  mkbox(x_400, nilUU_24, 0);
  mkbox(x_401, consUU_25, 2);
  setbox(x_401, hd_394, 0);
  setbox(x_401, x_400, 1);
  send(x_399, __387, x_401);
  move1(c_398, x_399);
  close0(x_402, c_398);
  return x_402;
}

fn lazy__796(env) {
  __387 := env[0];
  mkbox(x_392, nilUU_24, 0);
  send(x_391, __387, x_392);
  move1(c_390, x_391);
  close0(x_393, c_390);
  return x_393;
}

fn fn1_aux_768(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_769, aux_240, i_246);
      move1(x_249, x_769);
      x_252 := fn0_ord_754(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_757(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_754(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_757(x_255);
      x_253 := fn0_str_760(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_746(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_747, loop_213, x_219);
      appc(x_748, x_747, x_221);
      move1(x_218, x_748);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_736(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_737, loop_198, x_204);
      appc(x_738, x_737, x_205);
      move1(x_203, x_738);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_708(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_694(y_148);
  x_150 := fn0_sub_700(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_709, loop_146, n_153);
      appc(x_710, x_709, y_148);
      move1(x_154, x_710);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_635, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_638, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_641, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_644, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_647, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_650, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_653, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_656, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_659, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_662, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_665, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_668, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_671, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_674, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_677, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_680, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_683, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_686, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_689, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_692, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_695, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_698, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_701, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_704, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_707, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_717, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_720, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_725, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_730, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_735, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_745, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_755, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_758, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_761, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_764, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_767, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_777, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_780, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_783, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_786, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_789, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_792, fvc:=0, argc:=1);
  mkclo0(cmsort_workerU_384, fn1_cmsort_workerU_795, fvc:=0, argc:=3);
  mkclo0(cmsort_workerL_456, fn1_cmsort_workerL_804, fvc:=0, argc:=3);
  mkclo0(cmsortU_528, fn1_cmsortU_813, fvc:=0, argc:=1);
  mkclo0(cmsortL_544, fn1_cmsortL_818, fvc:=0, argc:=1);
  mkclo0(mklistU_560, fn1_mklistU_823, fvc:=0, argc:=1);
  mkclo0(mklistL_568, fn1_mklistL_826, fvc:=0, argc:=1);
  mkclo0(list_lenU_576, fn1_list_lenU_829, fvc:=0, argc:=1);
  mkclo0(list_lenL_583, fn1_list_lenL_832, fvc:=0, argc:=1);
  mkclo0(print_listU_590, fn1_print_listU_835, fvc:=0, argc:=1);
  mkclo0(print_listL_607, fn1_print_listL_840, fvc:=0, argc:=1);
  x_625 := fn0_mklistL_825(2000000);
  move1(test_624, x_625);
  lazy(x_626, lazy__845, 4);
  setlazy(x_626, string_of_int_236, 0);
  setlazy(x_626, cmsortL_544, 1);
  setlazy(x_626, list_lenL_583, 2);
  setlazy(x_626, test_624, 3);
  force(x_844, x_626);
  return x_844;
}

trans45 success

-----------------------------------------

compilation success

-----------------------------------------

