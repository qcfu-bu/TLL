[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "add_zero"; relv = R;
    body = (Binder ([], ((App [(Id ("add", I)); (Id ("zero", I))]), IMeta)));
    view = []};
  Definition {name = "test0"; relv = R;
    body = (Binder ([], ((Id ("zero", I)), IMeta))); view = []};
  Definition {name = "test1"; relv = R;
    body = (Binder ([], ((Id ("true", I)), IMeta))); view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_384› : ∀ (A_385 : Type‹s_384›) -> A_385 -> ?_2[0;0] :=
  fun id_387 : ∀ (A_388 : Type‹s_384›) -> A_388 -> ?_1[0;0]
  | A_390 m_391 => m_391

#[logical]
inductive eq_1‹s_392› (A_393 : Type‹s_392›) (m_394 : A_393):
  A_393 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_394 m_394)

#[program]
def rwl_2‹s_396,r_397› :
  ∀ {A_398 : Type‹s_396›} ->
    ∀ {m_399 : A_398} ->
      ∀ {n_400 : A_398} ->
        ∀ {B_401 : A_398 -> Type‹r_397›} ->
          {(eq_1‹??_3› ?_5[0;0] m_399 n_400)} ->
            ((B_401) m_399) -> ((B_401) n_400)
:=
  fun rwl_405 :
    ∀ {A_406 : Type‹s_396›} ->
      ∀ {m_407 : A_406} ->
        ∀ {n_408 : A_406} ->
          ∀ {B_409 : A_406 -> Type‹r_397›} ->
            {(eq_1‹??_2› ?_4[0;0] m_407 n_408)} ->
              ((B_409) m_407) -> ((B_409) n_408)
  | A_413 m_414 n_415 B_416 refl_1 x_417 => x_417

#[program]
def rwr_3‹s_418,r_419› :
  ∀ {A_420 : Type‹s_418›} ->
    ∀ {m_421 : A_420} ->
      ∀ {n_422 : A_420} ->
        ∀ {B_423 : A_420 -> Type‹r_419›} ->
          {(eq_1‹??_5› ?_7[0;0] m_421 n_422)} ->
            ((B_423) n_422) -> ((B_423) m_421)
:=
  fun rwr_427 :
    ∀ {A_428 : Type‹s_418›} ->
      ∀ {m_429 : A_428} ->
        ∀ {n_430 : A_428} ->
          ∀ {B_431 : A_428 -> Type‹r_419›} ->
            {(eq_1‹??_4› ?_6[0;0] m_429 n_430)} ->
              ((B_431) n_430) -> ((B_431) m_429)
  | A_435 m_436 n_437 B_438 refl_1 x_439 => x_439

#[logical]
def congr_4‹s_440,r_441,t_442› :
  ∀ (A_443 : Type‹s_440›) ->
    ∀ (B_444 : Type‹r_441›) ->
      ∀ (m_445 : A_443) ->
        ∀ (n_446 : A_443) ->
          ∀ (f_447 : forall‹t_442›(__448 : A_443), B_444) ->
            (eq_1‹??_9› ?_12[0;0] m_445 n_446) ->
              (eq_1‹??_10› ?_13[0;0] ((f_447) m_445) ((f_447) n_446))
:=
  fun congr_450 :
    ∀ (A_451 : Type‹s_440›) ->
      ∀ (B_452 : Type‹r_441›) ->
        ∀ (m_453 : A_451) ->
          ∀ (n_454 : A_451) ->
            ∀ (f_455 : forall‹t_442›(__456 : A_451), B_452) ->
              (eq_1‹??_6› ?_8[0;0] m_453 n_454) ->
                (eq_1‹??_7› ?_9[0;0] ((f_455) m_453) ((f_455) n_454))
  | A_458 B_459 m_460 n_461 f_462 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_463 : U} ->
    ∀ {m_464 : A_463} ->
      ∀ (x_465 : (eq_1‹??_15› ?_20[0;0] m_464 m_464)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_465 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_466 :
    ∀ {A_467 : U} ->
      ∀ {m_468 : A_467} ->
        ∀ (x_469 : (eq_1‹??_11› ?_14[0;0] m_468 m_468)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_469 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_470 m_471 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_472,t_473› (A_474 : Type‹s_472›):
  A_474 -> Type‹t_473›
where
| just_2 (m_476 : A_474) : (sing_2‹??_18,??_19› ?_24[0;0] m_476)

#[logical]
def ssing_6‹s_477› :
  ∀ (A_478 : Type‹s_477›) -> A_478 -> Type‹s_477›
:=
  fun ssing_480 : ∀ (A_481 : Type‹s_477›) -> A_481 -> Type‹s_477›
  | A_483 m_484 => (sing_2‹s_477,s_477› A_483 m_484)

#[program]
def sing_elim_7‹s_485,t_486› :
  ∀ {A_487 : Type‹s_485›} ->
    ∀ {x_488 : A_487} -> (sing_2‹s_485,t_486› ?_26[0;0] x_488) -> A_487
:=
  fun sing_elim_490 :
    ∀ {A_491 : Type‹s_485›} ->
      ∀ {x_492 : A_491} ->
        (sing_2‹s_485,t_486› ?_25[0;0] x_492) -> A_491
  | A_494 x_495 (just_2 x_496) => x_496

#[logical]
def sing_uniq_8‹s_497,t_498› :
  ∀ (A_499 : Type‹s_497›) ->
    ∀ (x0_500 : A_499) ->
      ∀ (x_501 : (sing_2‹s_497,t_498› ?_33[0;0] x0_500)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_500
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_501))
:=
  fun sing_uniq_502 :
    ∀ (A_503 : Type‹s_497›) ->
      ∀ (x0_504 : A_503) ->
        ∀ (x_505 : (sing_2‹s_497,t_498› ?_27[0;0] x0_504)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_504
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_505))
  | A_506 x0_507 (just_2 _508) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_509 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_509 tt_3)
:=
  fun unit_eta_510 :
    ∀ (x_511 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_511 tt_3)
  | x_512 =>
    match x_512 in
      ∀ (x0_513 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_513 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_515 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_519 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _522 _523 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_526 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _529 _530 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_533 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _536 _537 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_538 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_541 : nat_5 -> nat_5 -> bool_4
  | zero_6 _544 => true_4
  | _545 zero_6 => false_5
  | (succ_7 x_546) (succ_7 y_547) => ((lte_541) x_546 y_547)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_550 : nat_5 -> nat_5 -> bool_4
  | x_553 y_554 => ((lte_14) (succ_7‹› x_553) y_554)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_556 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_558) => x_558

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_561 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_564 => y_564
  | (succ_7 x_565) y_566 => (succ_7‹› ((add_561) x_565 y_566))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_569 : nat_5 -> nat_5 -> nat_5
  | x_572 zero_6 => x_572
  | x_573 (succ_7 y_574) => ((sub_569) ((pred_16) x_573) y_574)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_577 : nat_5 -> nat_5 -> nat_5
  | zero_6 _580 => zero_6
  | (succ_7 x_581) y_582 => ((add_17) y_582 ((mul_577) x_581 y_582))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_585 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_588 y_589 =>
    match ((lt_15) x_588 y_589) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_591 :=
        fun loop_592 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_595 y_596 =>
          match ((sub_18) x_595 ((pred_16) y_596)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_598) => (succ_7‹› ((loop_592) x_598 y_596))
      in ((loop_591) x_588 y_589)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_601 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_604 y_605 => ((sub_18) x_604 ((mul_19) ((div_20) x_604 y_605) y_605))

#[program]
inductive list_6‹s_606,t_607› (A_608 : Type‹s_606›): Type‹t_607›
where
| nil_8 : (list_6‹??_31,??_32› A_608)
| cons_9
    (hd_609 : A_608) (tl_610 : (list_6‹??_33,t_607› A_608))
    : (list_6‹??_34,??_35› A_608)

#[program]
def free_list_22‹s_611,t_612› :
  ∀ {A_613 : Type‹s_611›} ->
    A_613 -> unit_3 -> (list_6‹??_37,t_612› A_613) -> unit_3
:=
  fun free_list_617 :
    ∀ {A_618 : Type‹s_611›} ->
      A_618 -> unit_3 -> (list_6‹??_36,t_612› A_618) -> unit_3
  | A_622 f_623 nil_8 => tt_3
  | A_624 f_625 (cons_9 x_626 xs_627) =>
    let __628 := ((f_625) x_626) in ((free_list_617) ?_52[0;0] f_625 xs_627)

#[program]
inductive exists0_7‹s_629,r_630› (A_631 : Type‹s_629›) (B_632 : 
A_631 -> Type‹r_630›): L where
| ex0_10
    {m_634 : A_631} (n_635 : ((B_632) m_634))
    : (exists0_7‹??_38,??_39› A_631 B_632)

#[program]
inductive exists1_8‹s_636,r_637› (A_638 : Type‹s_636›) (B_639 : 
A_638 -> Type‹r_637›): L where
| ex1_11
    (m_641 : A_638) (n_642 : ((B_639) m_641))
    : (exists1_8‹??_40,??_41› A_638 B_639)

#[logical]
def prod0_23‹s_643,r_644› :
  Type‹s_643› -> Type‹r_644› -> ?_56[0;0]
:=
  fun prod0_647 : Type‹s_643› -> Type‹r_644› -> ?_53[0;0]
  | A_650 B_651 =>
    (exists0_7‹??_42,??_43›
      A_650 fun _652 : ?_54[0;0] -> ?_55[0;0]
            | _654 => B_651)

#[logical]
def prod1_24‹s_655,r_656› :
  Type‹s_655› -> Type‹r_656› -> ?_60[0;0]
:=
  fun prod1_659 : Type‹s_655› -> Type‹r_656› -> ?_57[0;0]
  | A_662 B_663 =>
    (exists1_8‹??_44,??_45›
      A_662 fun _664 : ?_58[0;0] -> ?_59[0;0]
            | _666 => B_663)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_669 : int -> int -> int
  | x_672 y_673 =>
    let loop_674 :=
      fun loop_675 : int -> int -> int
      | acc_678 y_679 =>
        match (__lte__ y_679 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_678
        | false_5 => ((loop_675) (__mul__ x_672 acc_678) (__sub__ y_679 1))
    in ((loop_674) 1 y_673)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_684 : int -> int -> int -> int
  | x_688 y_689 m_690 =>
    let loop_691 :=
      fun loop_692 : int -> int -> int
      | acc_695 y_696 =>
        match (__lte__ y_696 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_695
        | false_5 =>
          ((loop_692)
            (__mod__ (__mul__ x_688 acc_695) m_690) (__sub__ y_696 1))
    in ((loop_691) 1 y_689)

#[program]
def ord_27‹› : char -> int :=
  fun ord_699 : char -> int
  | c_701 => (__ord__ c_701)

#[program]
def chr_28‹› : int -> char :=
  fun chr_703 : int -> char
  | i_705 => (__chr__ i_705)

#[program]
def str_29‹› : char -> string :=
  fun str_707 : char -> string
  | c_709 => (__push__ "" c_709)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_711 : string -> int
  | s_713 => (__size__ s_713)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_715 : int -> string
  | i_717 =>
    let aux_718 :=
      fun aux_719 : int -> string
      | i_721 =>
        match (__lte__ 10 i_721) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_723 := (__mod__ i_721 10) in
          let i_724 := (__div__ i_721 10) in
          (__push__ ((aux_719) i_724)
            ((chr_28) (__add__ r_723 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_721 ((ord_27) 0))))
    in
    match (__lt__ 0 i_717) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_718) i_717)
    | false_5 => (__cat__ "~" ((aux_718) (__neg__ i_717)))

#[program]
def split_32‹t_726› :
  (list_6‹??_71,t_726› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_726› int) (list_6‹??_73,t_726› int))
:=
  fun split_728 :
    (list_6‹??_46,t_726› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_726› int) (list_6‹??_48,t_726› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_730 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_730 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_731 (cons_9 y_732 zs_733)) =>
    match ((split_728) zs_733) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_735 ys_736) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_731 xs_735)
        (cons_9‹??_67,??_68› ?_79[0;0] y_732 ys_736))

#[program]
def add_zero_33‹› : ?_84[0;0] := ((add_17) zero_6)

#[program]
def test0_34‹› : ?_85[0;0] := zero_6

#[program]
def test1_35‹› : ?_86[0;0] := true_4

-----------------------------------------

#[program]
def id_1‹s_5099› : ∀ (A_5100 : Type‹s_5099›) -> A_5100 -> A_5100 :=
  fun id_5102 : ∀ (A_5103 : Type‹s_5099›) -> A_5103 -> A_5103
  | A_5105 m_5106 => m_5106

#[logical]
inductive eq_1‹s_5107› (A_5108 : Type‹s_5107›) (m_5109 : A_5108):
  A_5108 -> U
where
| refl_1 : (eq_1‹s_5107› A_5108 m_5109 m_5109)

#[program]
def rwl_2‹s_5111,r_5112› :
  ∀ {A_5113 : Type‹s_5111›} ->
    ∀ {m_5114 : A_5113} ->
      ∀ {n_5115 : A_5113} ->
        ∀ {B_5116 : A_5113 -> Type‹r_5112›} ->
          {(eq_1‹s_5111› A_5113 m_5114 n_5115)} ->
            ((B_5116) m_5114) -> ((B_5116) n_5115)
:=
  fun rwl_5120 :
    ∀ {A_5121 : Type‹s_5111›} ->
      ∀ {m_5122 : A_5121} ->
        ∀ {n_5123 : A_5121} ->
          ∀ {B_5124 : A_5121 -> Type‹r_5112›} ->
            {(eq_1‹s_5111› A_5121 m_5122 n_5123)} ->
              ((B_5124) m_5122) -> ((B_5124) n_5123)
  | A_5128 m_5129 n_5130 B_5131 refl_1 __5132 => __5132

#[program]
def rwr_3‹s_5133,r_5134› :
  ∀ {A_5135 : Type‹s_5133›} ->
    ∀ {m_5136 : A_5135} ->
      ∀ {n_5137 : A_5135} ->
        ∀ {B_5138 : A_5135 -> Type‹r_5134›} ->
          {(eq_1‹s_5133› A_5135 m_5136 n_5137)} ->
            ((B_5138) n_5137) -> ((B_5138) m_5136)
:=
  fun rwr_5142 :
    ∀ {A_5143 : Type‹s_5133›} ->
      ∀ {m_5144 : A_5143} ->
        ∀ {n_5145 : A_5143} ->
          ∀ {B_5146 : A_5143 -> Type‹r_5134›} ->
            {(eq_1‹s_5133› A_5143 m_5144 n_5145)} ->
              ((B_5146) n_5145) -> ((B_5146) m_5144)
  | A_5150 m_5151 n_5152 B_5153 refl_1 __5154 => __5154

#[logical]
def congr_4‹s_5155,r_5156,t_5157› :
  ∀ (A_5158 : Type‹s_5155›) ->
    ∀ (B_5159 : Type‹r_5156›) ->
      ∀ (m_5160 : A_5158) ->
        ∀ (n_5161 : A_5158) ->
          ∀ (f_5162 : forall‹t_5157›(__5163 : A_5158), B_5159) ->
            (eq_1‹s_5155› A_5158 m_5160 n_5161) ->
              (eq_1‹r_5156› B_5159 ((f_5162) m_5160) ((f_5162) n_5161))
:=
  fun congr_5165 :
    ∀ (A_5166 : Type‹s_5155›) ->
      ∀ (B_5167 : Type‹r_5156›) ->
        ∀ (m_5168 : A_5166) ->
          ∀ (n_5169 : A_5166) ->
            ∀ (f_5170 : forall‹t_5157›(__5171 : A_5166), B_5167) ->
              (eq_1‹s_5155› A_5166 m_5168 n_5169) ->
                (eq_1‹r_5156› B_5167 ((f_5170) m_5168) ((f_5170) n_5169))
  | A_5173 B_5174 m_5175 n_5176 f_5177 refl_1 =>
    (refl_1‹r_5156› B_5174 ((f_5177) n_5176))

#[logical]
def axiom_K_5‹› :
  ∀ {A_5178 : U} ->
    ∀ {m_5179 : A_5178} ->
      ∀ (x_5180 : (eq_1‹U› A_5178 m_5179 m_5179)) ->
        (eq_1‹U›
          (eq_1‹U› A_5178 m_5179 m_5179) x_5180
          (refl_1‹U› A_5178 m_5179))
:=
  fun axiom_K_5181 :
    ∀ {A_5182 : U} ->
      ∀ {m_5183 : A_5182} ->
        ∀ (x_5184 : (eq_1‹U› A_5182 m_5183 m_5183)) ->
          (eq_1‹U›
            (eq_1‹U› A_5182 m_5183 m_5183) x_5184
            (refl_1‹U› A_5182 m_5183))
  | A_5185 m_5186 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_5185 m_5186 m_5186) (refl_1‹U› A_5185 m_5186))

#[program]
inductive sing_2‹s_5187,t_5188› (A_5189 : Type‹s_5187›):
  A_5189 -> Type‹t_5188›
where
| just_2 (m_5191 : A_5189) : (sing_2‹s_5187,t_5188› A_5189 m_5191)

#[logical]
def ssing_6‹s_5192› :
  ∀ (A_5193 : Type‹s_5192›) -> A_5193 -> Type‹s_5192›
:=
  fun ssing_5195 :
    ∀ (A_5196 : Type‹s_5192›) -> A_5196 -> Type‹s_5192›
  | A_5198 m_5199 => (sing_2‹s_5192,s_5192› A_5198 m_5199)

#[program]
def sing_elim_7‹s_5200,t_5201› :
  ∀ {A_5202 : Type‹s_5200›} ->
    ∀ {x_5203 : A_5202} ->
      (sing_2‹s_5200,t_5201› A_5202 x_5203) -> A_5202
:=
  fun sing_elim_5205 :
    ∀ {A_5206 : Type‹s_5200›} ->
      ∀ {x_5207 : A_5206} ->
        (sing_2‹s_5200,t_5201› A_5206 x_5207) -> A_5206
  | A_5209 x_5210 (just_2 m_5211) => m_5211

#[logical]
def sing_uniq_8‹s_5212,t_5213› :
  ∀ (A_5214 : Type‹s_5212›) ->
    ∀ (x0_5215 : A_5214) ->
      ∀ (x_5216 : (sing_2‹s_5212,t_5213› A_5214 x0_5215)) ->
        (eq_1‹s_5212›
          A_5214 x0_5215
          ((sing_elim_7‹s_5212,t_5213›) A_5214 x0_5215 x_5216))
:=
  fun sing_uniq_5217 :
    ∀ (A_5218 : Type‹s_5212›) ->
      ∀ (x0_5219 : A_5218) ->
        ∀ (x_5220 : (sing_2‹s_5212,t_5213› A_5218 x0_5219)) ->
          (eq_1‹s_5212›
            A_5218 x0_5219
            ((sing_elim_7‹s_5212,t_5213›) A_5218 x0_5219 x_5220))
  | A_5221 x0_5222 (just_2 m_5223) => (refl_1‹s_5212› A_5221 m_5223)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_5224 : unit_3) -> (eq_1‹U› unit_3 x_5224 tt_3)
:=
  fun unit_eta_5225 :
    ∀ (x_5226 : unit_3) -> (eq_1‹U› unit_3 x_5226 tt_3)
  | x_5227 =>
    match x_5227 in
      ∀ (x0_5228 : unit_3) -o (eq_1‹U› unit_3 x0_5228 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_5230 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_5234 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __5237 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_5240 : bool_4 -> bool_4 -> bool_4
  | true_4 __5243 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_5246 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_5249 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_5252 : nat_5 -> nat_5 -> bool_4
  | zero_6 __5255 => true_4
  | (succ_7 n_5256) zero_6 => false_5
  | (succ_7 n_5257) (succ_7 n_5258) => ((lte_5252) n_5257 n_5258)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_5261 : nat_5 -> nat_5 -> bool_4
  | x_5264 y_5265 => ((lte_14) (succ_7‹› x_5264) y_5265)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_5267 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_5269) => n_5269

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_5272 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5275 => __5275
  | (succ_7 n_5276) __5277 => (succ_7‹› ((add_5272) n_5276 __5277))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_5280 : nat_5 -> nat_5 -> nat_5
  | __5283 zero_6 => __5283
  | __5284 (succ_7 n_5285) => ((sub_5280) ((pred_16) __5284) n_5285)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_5288 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5291 => zero_6
  | (succ_7 n_5292) __5293 => ((add_17) __5293 ((mul_5288) n_5292 __5293))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_5296 : nat_5 -> nat_5 -> nat_5
  | x_5299 y_5300 =>
    match ((lt_15) x_5299 y_5300) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_5302 :=
        fun loop_5303 : nat_5 -> nat_5 -> nat_5
        | x_5306 y_5307 =>
          match ((sub_18) x_5306 ((pred_16) y_5307)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_5309) => (succ_7‹› ((loop_5303) n_5309 y_5307))
      in ((loop_5302) x_5299 y_5300)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_5312 : nat_5 -> nat_5 -> nat_5
  | x_5315 y_5316 =>
    ((sub_18) x_5315 ((mul_19) ((div_20) x_5315 y_5316) y_5316))

#[program]
inductive list_6‹s_5317,t_5318› (A_5319 : Type‹s_5317›):
  Type‹t_5318›
where
| nil_8 : (list_6‹s_5317,t_5318› A_5319)
| cons_9
    (hd_5320 : A_5319) (tl_5321 : (list_6‹s_5317,t_5318› A_5319))
    : (list_6‹s_5317,t_5318› A_5319)

#[program]
def free_list_22‹s_5322,t_5323› :
  ∀ {A_5324 : Type‹s_5322›} ->
    A_5324 -> unit_3 -> (list_6‹s_5322,t_5323› A_5324) -> unit_3
:=
  fun free_list_5328 :
    ∀ {A_5329 : Type‹s_5322›} ->
      A_5329 -> unit_3 -> (list_6‹s_5322,t_5323› A_5329) -> unit_3
  | A_5333 f_5334 nil_8 => tt_3
  | A_5335 f_5336 (cons_9 hd_5337 tl_5338) =>
    let __5339 := ((f_5336) hd_5337) in
    ((free_list_5328) A_5335 f_5336 tl_5338)

#[program]
inductive exists0_7‹s_5340,r_5341› (A_5342 : Type‹s_5340›) (B_5343 : 
A_5342 -> Type‹r_5341›): L where
| ex0_10
    {m_5345 : A_5342} (n_5346 : ((B_5343) m_5345))
    : (exists0_7‹s_5340,r_5341› A_5342 B_5343)

#[program]
inductive exists1_8‹s_5347,r_5348› (A_5349 : Type‹s_5347›) (B_5350 : 
A_5349 -> Type‹r_5348›): L where
| ex1_11
    (m_5352 : A_5349) (n_5353 : ((B_5350) m_5352))
    : (exists1_8‹s_5347,r_5348› A_5349 B_5350)

#[logical]
def prod0_23‹s_5354,r_5355› : Type‹s_5354› -> Type‹r_5355› -> L
:=
  fun prod0_5358 : Type‹s_5354› -> Type‹r_5355› -> L
  | A_5361 B_5362 =>
    (exists0_7‹s_5354,r_5355›
      A_5361 fun _5363 : A_5361 -> Type‹r_5355›
             | __5365 => B_5362)

#[logical]
def prod1_24‹s_5366,r_5367› : Type‹s_5366› -> Type‹r_5367› -> L
:=
  fun prod1_5370 : Type‹s_5366› -> Type‹r_5367› -> L
  | A_5373 B_5374 =>
    (exists1_8‹s_5366,r_5367›
      A_5373 fun _5375 : A_5373 -> Type‹r_5367›
             | __5377 => B_5374)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_5380 : int -> int -> int
  | x_5383 y_5384 =>
    let loop_5385 :=
      fun loop_5386 : int -> int -> int
      | acc_5389 y_5390 =>
        match (__lte__ y_5390 0) in bool_4 -o int with
        | true_4 => acc_5389
        | false_5 =>
          ((loop_5386) (__mul__ x_5383 acc_5389) (__sub__ y_5390 1))
    in ((loop_5385) 1 y_5384)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_5395 : int -> int -> int -> int
  | x_5399 y_5400 m_5401 =>
    let loop_5402 :=
      fun loop_5403 : int -> int -> int
      | acc_5406 y_5407 =>
        match (__lte__ y_5407 0) in bool_4 -o int with
        | true_4 => acc_5406
        | false_5 =>
          ((loop_5403)
            (__mod__ (__mul__ x_5399 acc_5406) m_5401) (__sub__ y_5407 1))
    in ((loop_5402) 1 y_5400)

#[program]
def ord_27‹› : char -> int :=
  fun ord_5410 : char -> int
  | c_5412 => (__ord__ c_5412)

#[program]
def chr_28‹› : int -> char :=
  fun chr_5414 : int -> char
  | i_5416 => (__chr__ i_5416)

#[program]
def str_29‹› : char -> string :=
  fun str_5418 : char -> string
  | c_5420 => (__push__ "" c_5420)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_5422 : string -> int
  | s_5424 => (__size__ s_5424)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_5426 : int -> string
  | i_5428 =>
    let aux_5429 :=
      fun aux_5430 : int -> string
      | i_5432 =>
        match (__lte__ 10 i_5432) in bool_4 -o string with
        | true_4 =>
          let r_5434 := (__mod__ i_5432 10) in
          let i_5435 := (__div__ i_5432 10) in
          (__push__ ((aux_5430) i_5435)
            ((chr_28) (__add__ r_5434 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_5432 ((ord_27) 0))))
    in
    match (__lt__ 0 i_5428) in bool_4 -o string with
    | true_4 => ((aux_5429) i_5428)
    | false_5 => (__cat__ "~" ((aux_5429) (__neg__ i_5428)))

#[program]
def split_32‹t_5437› :
  (list_6‹U,t_5437› int) ->
    ((prod1_24‹t_5437,t_5437›)
      (list_6‹U,t_5437› int) (list_6‹U,t_5437› int))
:=
  fun split_5439 :
    (list_6‹U,t_5437› int) ->
      ((prod1_24‹t_5437,t_5437›)
        (list_6‹U,t_5437› int) (list_6‹U,t_5437› int))
  | nil_8 =>
    (ex1_11‹t_5437,t_5437›
      (list_6‹U,t_5437› int)
      fun _5441 : (list_6‹U,t_5437› int) -> Type‹t_5437›
      | __5443 => (list_6‹U,t_5437› int) (nil_8‹U,t_5437› int)
      (nil_8‹U,t_5437› int))
  | (cons_9 hd_5444 nil_8) =>
    (ex1_11‹t_5437,t_5437›
      (list_6‹U,t_5437› int)
      fun _5445 : (list_6‹U,t_5437› int) -> Type‹t_5437›
      | __5447 => (list_6‹U,t_5437› int)
      (cons_9‹U,t_5437› int hd_5444 (nil_8‹U,t_5437› int))
      (nil_8‹U,t_5437› int))
  | (cons_9 hd_5448 (cons_9 hd_5449 tl_5450)) =>
    match ((split_5439) tl_5450) in
      ((prod1_24‹t_5437,t_5437›)
        (list_6‹U,t_5437› int) (list_6‹U,t_5437› int)) -o
        ((prod1_24‹t_5437,t_5437›)
          (list_6‹U,t_5437› int) (list_6‹U,t_5437› int))
    with
    | (ex1_11 m_5452 n_5453) =>
      (ex1_11‹t_5437,t_5437›
        (list_6‹U,t_5437› int)
        fun _5454 : (list_6‹U,t_5437› int) -> Type‹t_5437›
        | __5456 => (list_6‹U,t_5437› int)
        (cons_9‹U,t_5437› int hd_5448 m_5452)
        (cons_9‹U,t_5437› int hd_5449 n_5453))

#[program]
def add_zero_33‹› : nat_5 -> nat_5 := ((add_17) zero_6)

#[program]
def test0_34‹› : nat_5 := zero_6

#[program]
def test1_35‹› : bool_4 := true_4

-----------------------------------------

#[program]
def idU_37 := fun id_9014 (A_9015) -> (m_9016) ->
                m_9016

#[program]
def idL_36 := fun id_9017 (A_9018) -> (m_9019) ->
                m_9019

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_41 :=
  fun rwl_9020 {A_9021} -> {m_9022} -> {n_9023} -> {B_9024} -> {__9025} ->
  (__9026) ->
    match {NULL} with
    | reflU_13  => __9026
    end

#[program]
def rwlUL_40 :=
  fun rwl_9027 {A_9028} -> {m_9029} -> {n_9030} -> {B_9031} -> {__9032} ->
  (__9033) ->
    match {NULL} with
    | reflU_13  => __9033
    end

#[program]
def rwlLU_39 :=
  fun rwl_9034 {A_9035} -> {m_9036} -> {n_9037} -> {B_9038} -> {__9039} ->
  (__9040) ->
    match {NULL} with
    | reflL_12  => __9040
    end

#[program]
def rwlLL_38 :=
  fun rwl_9041 {A_9042} -> {m_9043} -> {n_9044} -> {B_9045} -> {__9046} ->
  (__9047) ->
    match {NULL} with
    | reflL_12  => __9047
    end

#[program]
def rwrUU_45 :=
  fun rwr_9048 {A_9049} -> {m_9050} -> {n_9051} -> {B_9052} -> {__9053} ->
  (__9054) ->
    match {NULL} with
    | reflU_13  => __9054
    end

#[program]
def rwrUL_44 :=
  fun rwr_9055 {A_9056} -> {m_9057} -> {n_9058} -> {B_9059} -> {__9060} ->
  (__9061) ->
    match {NULL} with
    | reflU_13  => __9061
    end

#[program]
def rwrLU_43 :=
  fun rwr_9062 {A_9063} -> {m_9064} -> {n_9065} -> {B_9066} -> {__9067} ->
  (__9068) ->
    match {NULL} with
    | reflL_12  => __9068
    end

#[program]
def rwrLL_42 :=
  fun rwr_9069 {A_9070} -> {m_9071} -> {n_9072} -> {B_9073} -> {__9074} ->
  (__9075) ->
    match {NULL} with
    | reflL_12  => __9075
    end

#[logical]
def congrUUU_53 := NULL

#[logical]
def congrUUL_52 := NULL

#[logical]
def congrULU_51 := NULL

#[logical]
def congrULL_50 := NULL

#[logical]
def congrLUU_49 := NULL

#[logical]
def congrLUL_48 := NULL

#[logical]
def congrLLU_47 := NULL

#[logical]
def congrLLL_46 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_55 := NULL

#[logical]
def ssingL_54 := NULL

#[program]
def sing_elimUU_59 :=
  fun sing_elim_9076 {A_9077} -> {x_9078} -> (__9079) ->
    match __9079 with
    | justUU_17 m_9080 => m_9080
    end

#[program]
def sing_elimUL_58 :=
  fun sing_elim_9081 {A_9082} -> {x_9083} -> (__9084) ->
    match __9084 with
    | justUL_16 m_9085 => m_9085
    end

#[program]
def sing_elimLU_57 :=
  fun sing_elim_9086 {A_9087} -> {x_9088} -> (__9089) ->
    match __9089 with
    
    end

#[program]
def sing_elimLL_56 :=
  fun sing_elim_9090 {A_9091} -> {x_9092} -> (__9093) ->
    match __9093 with
    | justLL_14 m_9094 => m_9094
    end

#[logical]
def sing_uniqUU_63 := NULL

#[logical]
def sing_uniqUL_62 := NULL

#[logical]
def sing_uniqLU_61 := NULL

#[logical]
def sing_uniqLL_60 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_9095 (__9096) ->
    match __9096 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_9097 (__9098) -> (__9099) ->
    match __9098 with
    | true_4  =>
      match __9099 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_9100 (__9101) -> (__9102) ->
    match __9101 with
    | true_4  => true_4
    | false_5  =>
      match __9102 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_9103 (__9104) -> (__9105) -o
    match __9104 with
    | true_4  =>
      match __9105 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __9105 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_9106 (__9107) -> (__9108) ->
    match __9107 with
    | zero_6  => true_4
    | succ_7 n_9109 =>
      match __9108 with
      | zero_6  => false_5 | succ_7 n_9110 => ((lte_9106) n_9109 n_9110)
      end
    end

#[program]
def lt_15 :=
  fun lt_9111 (x_9112) -> (y_9113) ->
    ((lte_14) (succ_7 x_9112) y_9113)

#[program]
def pred_16 :=
  fun pred_9114 (__9115) ->
    match __9115 with
    | zero_6  => zero_6 | succ_7 n_9116 => n_9116
    end

#[program]
def add_17 :=
  fun add_9117 (__9118) -> (__9119) ->
    match __9118 with
    | zero_6  => __9119
    | succ_7 n_9120 => (succ_7 ((add_9117) n_9120 __9119))
    end

#[program]
def sub_18 :=
  fun sub_9121 (__9122) -> (__9123) ->
    match __9123 with
    | zero_6  => __9122
    | succ_7 n_9124 => ((sub_9121) ((pred_16) __9122) n_9124)
    end

#[program]
def mul_19 :=
  fun mul_9125 (__9126) -> (__9127) ->
    match __9126 with
    | zero_6  => zero_6
    | succ_7 n_9128 => ((add_17) __9127 ((mul_9125) n_9128 __9127))
    end

#[program]
def div_20 :=
  fun div_9129 (x_9130) -> (y_9131) ->
    match ((lt_15) x_9130 y_9131) with
    | true_4  => zero_6
    | false_5  =>
      let loop_9132 :=
        fun loop_9133 (x_9134) -> (y_9135) ->
          match ((sub_18) x_9134 ((pred_16) y_9135)) with
          | zero_6  => zero_6
          | succ_7 n_9136 => (succ_7 ((loop_9133) n_9136 y_9135))
          end
      in ((loop_9132) x_9130 y_9131)
    end

#[program]
def rem_21 :=
  fun rem_9137 (x_9138) -> (y_9139) ->
    ((sub_18) x_9138 ((mul_19) ((div_20) x_9138 y_9139) y_9139))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_67 :=
  fun free_list_9140 {A_9141} -> (f_9142) -> (__9143) ->
    match __9143 with
    | nilUU_24  => tt_3
    | consUU_25 hd_9144 tl_9145 =>
      let __9146 := ((f_9142) hd_9144) in
      ((free_list_9140) NULL f_9142 tl_9145)
    end

#[program]
def free_listUL_66 :=
  fun free_list_9147 {A_9148} -> (f_9149) -> (__9150) ->
    match __9150 with
    | nilUL_22  => tt_3
    | consUL_23 hd_9151 tl_9152 =>
      let __9153 := ((f_9149) hd_9151) in
      ((free_list_9147) NULL f_9149 tl_9152)
    end

#[program]
def free_listLL_64 :=
  fun free_list_9154 {A_9155} -> (f_9156) -> (__9157) ->
    match __9157 with
    | nilLL_18  => tt_3
    | consLL_19 hd_9158 tl_9159 =>
      let __9160 := ((f_9156) hd_9158) in
      ((free_list_9154) NULL f_9156 tl_9159)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_71 := NULL

#[logical]
def prod0UL_70 := NULL

#[logical]
def prod0LU_69 := NULL

#[logical]
def prod0LL_68 := NULL

#[logical]
def prod1UU_75 := NULL

#[logical]
def prod1UL_74 := NULL

#[logical]
def prod1LU_73 := NULL

#[logical]
def prod1LL_72 := NULL

#[program]
def pow_25 :=
  fun pow_9161 (x_9162) -> (y_9163) ->
    let loop_9164 :=
      fun loop_9165 (acc_9166) -> (y_9167) ->
        match (__lte__ y_9167 0) with
        | true_4  => acc_9166
        | false_5  =>
          ((loop_9165) (__mul__ x_9162 acc_9166) (__sub__ y_9167 1))
        end
    in ((loop_9164) 1 y_9163)

#[program]
def powm_26 :=
  fun powm_9168 (x_9169) -> (y_9170) -> (m_9171) ->
    let loop_9172 :=
      fun loop_9173 (acc_9174) -> (y_9175) ->
        match (__lte__ y_9175 0) with
        | true_4  => acc_9174
        | false_5  =>
          ((loop_9173)
            (__mod__ (__mul__ x_9169 acc_9174) m_9171) (__sub__ y_9175 1))
        end
    in ((loop_9172) 1 y_9170)

#[program]
def ord_27 := fun ord_9176 (c_9177) ->
                (__ord__ c_9177)

#[program]
def chr_28 := fun chr_9178 (i_9179) ->
                (__chr__ i_9179)

#[program]
def str_29 := fun str_9180 (c_9181) ->
                (__push__ "" c_9181)

#[program]
def strlen_30 := fun strlen_9182 (s_9183) ->
                   (__size__ s_9183)

#[program]
def string_of_int_31 :=
  fun string_of_int_9184 (i_9185) ->
    let aux_9186 :=
      fun aux_9187 (i_9188) ->
        match (__lte__ 10 i_9188) with
        | true_4  =>
          let r_9189 := (__mod__ i_9188 10) in
          let i_9190 := (__div__ i_9188 10) in
          (__push__ ((aux_9187) i_9190)
            ((chr_28) (__add__ r_9189 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_9188 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_9185) with
    | true_4  => ((aux_9186) i_9185)
    | false_5  => (__cat__ "~" ((aux_9186) (__neg__ i_9185)))
    end

#[program]
def splitU_77 :=
  fun split_9191 (__9192) ->
    match __9192 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_9193 tl_9194 =>
      match tl_9194 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9193 nilUU_24) nilUU_24)
      | consUU_25 hd_9195 tl_9196 =>
        match ((split_9191) tl_9196) with
        | ex1UU_33 m_9197 n_9198 =>
          (ex1UU_33 (consUU_25 hd_9193 m_9197) (consUU_25 hd_9195 n_9198))
        end
      end
    end

#[program]
def splitL_76 :=
  fun split_9199 (__9200) ->
    match __9200 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_9201 tl_9202 =>
      match tl_9202 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9201 nilUL_22) nilUL_22)
      | consUL_23 hd_9203 tl_9204 =>
        match ((split_9199) tl_9204) with
        | ex1LL_30 m_9205 n_9206 =>
          (ex1LL_30 (consUL_23 hd_9201 m_9205) (consUL_23 hd_9203 n_9206))
        end
      end
    end

#[program]
def add_zero_33 := ((add_17) zero_6)

#[program]
def test0_34 := zero_6

#[program]
def test1_35 := true_4

-----------------------------------------

#[program]
def idU_37 := fun id_9400 (A_9401) -> (m_9402) ->
                m_9402

#[program]
def idL_36 := fun id_9403 (A_9404) -> (m_9405) ->
                m_9405

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_41 :=
  fun rwl_9406 {A_9407} -> {m_9408} -> {n_9409} -> {B_9410} -> {__9411} ->
  (__9412) ->
    __9412

#[program]
def rwlUL_40 :=
  fun rwl_9413 {A_9414} -> {m_9415} -> {n_9416} -> {B_9417} -> {__9418} ->
  (__9419) ->
    __9419

#[program]
def rwlLU_39 :=
  fun rwl_9420 {A_9421} -> {m_9422} -> {n_9423} -> {B_9424} -> {__9425} ->
  (__9426) ->
    __9426

#[program]
def rwlLL_38 :=
  fun rwl_9427 {A_9428} -> {m_9429} -> {n_9430} -> {B_9431} -> {__9432} ->
  (__9433) ->
    __9433

#[program]
def rwrUU_45 :=
  fun rwr_9434 {A_9435} -> {m_9436} -> {n_9437} -> {B_9438} -> {__9439} ->
  (__9440) ->
    __9440

#[program]
def rwrUL_44 :=
  fun rwr_9441 {A_9442} -> {m_9443} -> {n_9444} -> {B_9445} -> {__9446} ->
  (__9447) ->
    __9447

#[program]
def rwrLU_43 :=
  fun rwr_9448 {A_9449} -> {m_9450} -> {n_9451} -> {B_9452} -> {__9453} ->
  (__9454) ->
    __9454

#[program]
def rwrLL_42 :=
  fun rwr_9455 {A_9456} -> {m_9457} -> {n_9458} -> {B_9459} -> {__9460} ->
  (__9461) ->
    __9461

#[logical]
def congrUUU_53 := NULL

#[logical]
def congrUUL_52 := NULL

#[logical]
def congrULU_51 := NULL

#[logical]
def congrULL_50 := NULL

#[logical]
def congrLUU_49 := NULL

#[logical]
def congrLUL_48 := NULL

#[logical]
def congrLLU_47 := NULL

#[logical]
def congrLLL_46 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_55 := NULL

#[logical]
def ssingL_54 := NULL

#[program]
def sing_elimUU_59 :=
  fun sing_elim_9462 {A_9463} -> {x_9464} -> (__9465) ->
    match __9465 with
    | justUU_17 m_9466 => m_9466
    end

#[program]
def sing_elimUL_58 :=
  fun sing_elim_9467 {A_9468} -> {x_9469} -> (__9470) ->
    match __9470 with
    | justUL_16 m_9471 => m_9471
    end

#[program]
def sing_elimLU_57 :=
  fun sing_elim_9472 {A_9473} -> {x_9474} -> (__9475) ->
    !!

#[program]
def sing_elimLL_56 :=
  fun sing_elim_9476 {A_9477} -> {x_9478} -> (__9479) ->
    match __9479 with
    | justLL_14 m_9480 => m_9480
    end

#[logical]
def sing_uniqUU_63 := NULL

#[logical]
def sing_uniqUL_62 := NULL

#[logical]
def sing_uniqLU_61 := NULL

#[logical]
def sing_uniqLL_60 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_9481 (__9482) ->
    match __9482 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_9483 (__9484) -> (__9485) ->
    match __9484 with
    | true_4  =>
      match __9485 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_9486 (__9487) -> (__9488) ->
    match __9487 with
    | true_4  => true_4
    | false_5  =>
      match __9488 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_9489 (__9490) -> (__9491) -o
    match __9490 with
    | true_4  =>
      match __9491 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __9491 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_9492 (__9493) -> (__9494) ->
    match __9493 with
    | zero_6  => true_4
    | succ_7 n_9495 =>
      match __9494 with
      | zero_6  => false_5 | succ_7 n_9496 => ((lte_9492) n_9495 n_9496)
      end
    end

#[program]
def lt_15 :=
  fun lt_9497 (x_9498) -> (y_9499) ->
    ((lte_14) (succ_7 x_9498) y_9499)

#[program]
def pred_16 :=
  fun pred_9500 (__9501) ->
    match __9501 with
    | zero_6  => zero_6 | succ_7 n_9502 => n_9502
    end

#[program]
def add_17 :=
  fun add_9503 (__9504) -> (__9505) ->
    match __9504 with
    | zero_6  => __9505
    | succ_7 n_9506 => (succ_7 ((add_9503) n_9506 __9505))
    end

#[program]
def sub_18 :=
  fun sub_9507 (__9508) -> (__9509) ->
    match __9509 with
    | zero_6  => __9508
    | succ_7 n_9510 => ((sub_9507) ((pred_16) __9508) n_9510)
    end

#[program]
def mul_19 :=
  fun mul_9511 (__9512) -> (__9513) ->
    match __9512 with
    | zero_6  => zero_6
    | succ_7 n_9514 => ((add_17) __9513 ((mul_9511) n_9514 __9513))
    end

#[program]
def div_20 :=
  fun div_9515 (x_9516) -> (y_9517) ->
    match ((lt_15) x_9516 y_9517) with
    | true_4  => zero_6
    | false_5  =>
      let loop_9518 :=
        fun loop_9519 (x_9520) -> (y_9521) ->
          match ((sub_18) x_9520 ((pred_16) y_9521)) with
          | zero_6  => zero_6
          | succ_7 n_9522 => (succ_7 ((loop_9519) n_9522 y_9521))
          end
      in ((loop_9518) x_9516 y_9517)
    end

#[program]
def rem_21 :=
  fun rem_9523 (x_9524) -> (y_9525) ->
    ((sub_18) x_9524 ((mul_19) ((div_20) x_9524 y_9525) y_9525))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_67 :=
  fun free_list_9526 {A_9527} -> (f_9528) -> (__9529) ->
    match __9529 with
    | nilUU_24  => tt_3
    | consUU_25 hd_9530 tl_9531 =>
      let __9532 := ((f_9528) hd_9530) in
      ((free_list_9526) NULL f_9528 tl_9531)
    end

#[program]
def free_listUL_66 :=
  fun free_list_9533 {A_9534} -> (f_9535) -> (__9536) ->
    match __9536 with
    | nilUL_22  => tt_3
    | consUL_23 hd_9537 tl_9538 =>
      let __9539 := ((f_9535) hd_9537) in
      ((free_list_9533) NULL f_9535 tl_9538)
    end

#[program]
def free_listLL_64 :=
  fun free_list_9540 {A_9541} -> (f_9542) -> (__9543) ->
    match __9543 with
    | nilLL_18  => tt_3
    | consLL_19 hd_9544 tl_9545 =>
      let __9546 := ((f_9542) hd_9544) in
      ((free_list_9540) NULL f_9542 tl_9545)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_71 := NULL

#[logical]
def prod0UL_70 := NULL

#[logical]
def prod0LU_69 := NULL

#[logical]
def prod0LL_68 := NULL

#[logical]
def prod1UU_75 := NULL

#[logical]
def prod1UL_74 := NULL

#[logical]
def prod1LU_73 := NULL

#[logical]
def prod1LL_72 := NULL

#[program]
def pow_25 :=
  fun pow_9547 (x_9548) -> (y_9549) ->
    let loop_9550 :=
      fun loop_9551 (acc_9552) -> (y_9553) ->
        match (__lte__ y_9553 0) with
        | true_4  => acc_9552
        | false_5  =>
          ((loop_9551) (__mul__ x_9548 acc_9552) (__sub__ y_9553 1))
        end
    in ((loop_9550) 1 y_9549)

#[program]
def powm_26 :=
  fun powm_9554 (x_9555) -> (y_9556) -> (m_9557) ->
    let loop_9558 :=
      fun loop_9559 (acc_9560) -> (y_9561) ->
        match (__lte__ y_9561 0) with
        | true_4  => acc_9560
        | false_5  =>
          ((loop_9559)
            (__mod__ (__mul__ x_9555 acc_9560) m_9557) (__sub__ y_9561 1))
        end
    in ((loop_9558) 1 y_9556)

#[program]
def ord_27 := fun ord_9562 (c_9563) ->
                (__ord__ c_9563)

#[program]
def chr_28 := fun chr_9564 (i_9565) ->
                (__chr__ i_9565)

#[program]
def str_29 := fun str_9566 (c_9567) ->
                (__push__ "" c_9567)

#[program]
def strlen_30 := fun strlen_9568 (s_9569) ->
                   (__size__ s_9569)

#[program]
def string_of_int_31 :=
  fun string_of_int_9570 (i_9571) ->
    let aux_9572 :=
      fun aux_9573 (i_9574) ->
        match (__lte__ 10 i_9574) with
        | true_4  =>
          let r_9575 := (__mod__ i_9574 10) in
          let i_9576 := (__div__ i_9574 10) in
          (__push__ ((aux_9573) i_9576)
            ((chr_28) (__add__ r_9575 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_9574 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_9571) with
    | true_4  => ((aux_9572) i_9571)
    | false_5  => (__cat__ "~" ((aux_9572) (__neg__ i_9571)))
    end

#[program]
def splitU_77 :=
  fun split_9577 (__9578) ->
    match __9578 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_9579 tl_9580 =>
      match tl_9580 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9579 nilUU_24) nilUU_24)
      | consUU_25 hd_9581 tl_9582 =>
        match ((split_9577) tl_9582) with
        | ex1UU_33 m_9583 n_9584 =>
          (ex1UU_33 (consUU_25 hd_9579 m_9583) (consUU_25 hd_9581 n_9584))
        end
      end
    end

#[program]
def splitL_76 :=
  fun split_9585 (__9586) ->
    match __9586 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_9587 tl_9588 =>
      match tl_9588 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9587 nilUL_22) nilUL_22)
      | consUL_23 hd_9589 tl_9590 =>
        match ((split_9585) tl_9590) with
        | ex1LL_30 m_9591 n_9592 =>
          (ex1LL_30 (consUL_23 hd_9587 m_9591) (consUL_23 hd_9589 n_9592))
        end
      end
    end

#[program]
def add_zero_33 := ((add_17) zero_6)

#[program]
def test0_34 := zero_6

#[program]
def test1_35 := true_4

-----------------------------------------

def idU_37 := fun id_9786 (A_9787) -> (m_9788) -> m_9788

def idL_36 := fun id_9789 (A_9790) -> (m_9791) -> m_9791

def rwlUU_41 :=
  fun rwl_9792 (A_9793) -> (m_9794) -> (n_9795) -> (B_9796) -> (__9797) ->
  (__9798) -> __9798

def rwlUL_40 :=
  fun rwl_9799 (A_9800) -> (m_9801) -> (n_9802) -> (B_9803) -> (__9804) ->
  (__9805) -> __9805

def rwlLU_39 :=
  fun rwl_9806 (A_9807) -> (m_9808) -> (n_9809) -> (B_9810) -> (__9811) ->
  (__9812) -> __9812

def rwlLL_38 :=
  fun rwl_9813 (A_9814) -> (m_9815) -> (n_9816) -> (B_9817) -> (__9818) ->
  (__9819) -> __9819

def rwrUU_45 :=
  fun rwr_9820 (A_9821) -> (m_9822) -> (n_9823) -> (B_9824) -> (__9825) ->
  (__9826) -> __9826

def rwrUL_44 :=
  fun rwr_9827 (A_9828) -> (m_9829) -> (n_9830) -> (B_9831) -> (__9832) ->
  (__9833) -> __9833

def rwrLU_43 :=
  fun rwr_9834 (A_9835) -> (m_9836) -> (n_9837) -> (B_9838) -> (__9839) ->
  (__9840) -> __9840

def rwrLL_42 :=
  fun rwr_9841 (A_9842) -> (m_9843) -> (n_9844) -> (B_9845) -> (__9846) ->
  (__9847) -> __9847

def sing_elimUU_59 :=
  fun sing_elim_9848 (A_9849) -> (x_9850) -> (__9851) -> __9851

def sing_elimUL_58 :=
  fun sing_elim_9852 (A_9853) -> (x_9854) -> (__9855) -> __9855

def sing_elimLU_57 :=
  fun sing_elim_9856 (A_9857) -> (x_9858) -> (__9859) -> !!

def sing_elimLL_56 :=
  fun sing_elim_9860 (A_9861) -> (x_9862) -> (__9863) -> __9863

def not_10 :=
  fun not_9864 (__9865) ->
    match __9865 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_9866 (__9867) -> (__9868) ->
    match __9867 with
    | true_4 => match __9868 with
                | true_4 => true_4 | false_5 => false_5
                end
    | false_5 => false_5
    end

def or_12 :=
  fun or_9869 (__9870) -> (__9871) ->
    match __9870 with
    | true_4 => true_4
    | false_5 =>
      match __9871 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_9872 (__9873) -> (__9874) -o
    match __9873 with
    | true_4 => match __9874 with
                | true_4 => false_5 | false_5 => true_4
                end
    | false_5 =>
      match __9874 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_9875 (__9876) -> (__9877) ->
    match __9876 with
    | zero_6  => true_4
    | succ_7 n_9878 =>
      match __9877 with
      | zero_6  => false_5 | succ_7 n_9879 => ((lte_9875) n_9878 n_9879)
      end
    end

def lt_15 :=
  fun lt_9880 (x_9881) -> (y_9882) -> ((lte_14) (succ_7 x_9881) y_9882)

def pred_16 :=
  fun pred_9883 (__9884) ->
    match __9884 with
    | zero_6  => (zero_6 ) | succ_7 n_9885 => n_9885
    end

def add_17 :=
  fun add_9886 (__9887) -> (__9888) ->
    match __9887 with
    | zero_6  => __9888
    | succ_7 n_9889 => (succ_7 ((add_9886) n_9889 __9888))
    end

def sub_18 :=
  fun sub_9890 (__9891) -> (__9892) ->
    match __9892 with
    | zero_6  => __9891
    | succ_7 n_9893 => ((sub_9890) ((pred_16) __9891) n_9893)
    end

def mul_19 :=
  fun mul_9894 (__9895) -> (__9896) ->
    match __9895 with
    | zero_6  => (zero_6 )
    | succ_7 n_9897 => ((add_17) __9896 ((mul_9894) n_9897 __9896))
    end

def div_20 :=
  fun div_9898 (x_9899) -> (y_9900) ->
    match ((lt_15) x_9899 y_9900) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_9901 :=
        fun loop_9902 (x_9903) -> (y_9904) ->
          match ((sub_18) x_9903 ((pred_16) y_9904)) with
          | zero_6  => (zero_6 )
          | succ_7 n_9905 => (succ_7 ((loop_9902) n_9905 y_9904))
          end
      in ((loop_9901) x_9899 y_9900)
    end

def rem_21 :=
  fun rem_9906 (x_9907) -> (y_9908) ->
    ((sub_18) x_9907 ((mul_19) ((div_20) x_9907 y_9908) y_9908))

def free_listUU_67 :=
  fun free_list_9909 (A_9910) -> (f_9911) -> (__9912) ->
    match __9912 with
    | nilUU_24  => tt_3
    | consUU_25 hd_9913 tl_9914 =>
      let __9915 := ((f_9911) hd_9913) in
      ((free_list_9909) NULL f_9911 tl_9914)
    end

def free_listUL_66 :=
  fun free_list_9916 (A_9917) -> (f_9918) -> (__9919) ->
    match __9919 with
    | nilUL_22  => tt_3
    | consUL_23 hd_9920 tl_9921 =>
      let __9922 := ((f_9918) hd_9920) in
      ((free_list_9916) NULL f_9918 tl_9921)
    end

def free_listLL_64 :=
  fun free_list_9923 (A_9924) -> (f_9925) -> (__9926) ->
    match __9926 with
    | nilLL_18  => tt_3
    | consLL_19 hd_9927 tl_9928 =>
      let __9929 := ((f_9925) hd_9927) in
      ((free_list_9923) NULL f_9925 tl_9928)
    end

def pow_25 :=
  fun pow_9930 (x_9931) -> (y_9932) ->
    let loop_9933 :=
      fun loop_9934 (acc_9935) -> (y_9936) ->
        match (__lte__ y_9936 0) with
        | true_4 => acc_9935
        | false_5 =>
          ((loop_9934) (__mul__ x_9931 acc_9935) (__sub__ y_9936 1))
        end
    in ((loop_9933) 1 y_9932)

def powm_26 :=
  fun powm_9937 (x_9938) -> (y_9939) -> (m_9940) ->
    let loop_9941 :=
      fun loop_9942 (acc_9943) -> (y_9944) ->
        match (__lte__ y_9944 0) with
        | true_4 => acc_9943
        | false_5 =>
          ((loop_9942)
            (__mod__ (__mul__ x_9938 acc_9943) m_9940) (__sub__ y_9944 1))
        end
    in ((loop_9941) 1 y_9939)

def ord_27 := fun ord_9945 (c_9946) -> (__ord__ c_9946)

def chr_28 := fun chr_9947 (i_9948) -> (__chr__ i_9948)

def str_29 := fun str_9949 (c_9950) -> (__push__ "" c_9950)

def strlen_30 := fun strlen_9951 (s_9952) -> (__size__ s_9952)

def string_of_int_31 :=
  fun string_of_int_9953 (i_9954) ->
    let aux_9955 :=
      fun aux_9956 (i_9957) ->
        match (__lte__ 10 i_9957) with
        | true_4 =>
          let r_9958 := (__mod__ i_9957 10) in
          let i_9959 := (__div__ i_9957 10) in
          (__push__ ((aux_9956) i_9959)
            ((chr_28) (__add__ r_9958 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_9957 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_9954) with
    | true_4 => ((aux_9955) i_9954)
    | false_5 => (__cat__ "~" ((aux_9955) (__neg__ i_9954)))
    end

def splitU_77 :=
  fun split_9960 (__9961) ->
    match __9961 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_9962 tl_9963 =>
      match tl_9963 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9962 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_9964 tl_9965 =>
        match ((split_9960) tl_9965) with
        | ex1UU_33 m_9966 n_9967 =>
          (ex1UU_33 (consUU_25 hd_9962 m_9966) (consUU_25 hd_9964 n_9967))
        end
      end
    end

def splitL_76 :=
  fun split_9968 (__9969) ->
    match __9969 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_9970 tl_9971 =>
      match tl_9971 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9970 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_9972 tl_9973 =>
        match ((split_9968) tl_9973) with
        | ex1LL_30 m_9974 n_9975 =>
          (ex1LL_30 (consUL_23 hd_9970 m_9974) (consUL_23 hd_9972 n_9975))
        end
      end
    end

def add_zero_33 := ((add_17) (zero_6 ))

def test0_34 := (zero_6 )

def test1_35 := true_4

-----------------------------------------

def idU_37 := lam (A_10166) -> (m_10167) -> m_10167

def idL_36 := lam (A_10168) -> (m_10169) -> m_10169

def rwlUU_41 :=
  lam (A_10170) -> (m_10171) -> (n_10172) -> (B_10173) -> (__10174) ->
  (__10175) -> __10175

def rwlUL_40 :=
  lam (A_10176) -> (m_10177) -> (n_10178) -> (B_10179) -> (__10180) ->
  (__10181) -> __10181

def rwlLU_39 :=
  lam (A_10182) -> (m_10183) -> (n_10184) -> (B_10185) -> (__10186) ->
  (__10187) -> __10187

def rwlLL_38 :=
  lam (A_10188) -> (m_10189) -> (n_10190) -> (B_10191) -> (__10192) ->
  (__10193) -> __10193

def rwrUU_45 :=
  lam (A_10194) -> (m_10195) -> (n_10196) -> (B_10197) -> (__10198) ->
  (__10199) -> __10199

def rwrUL_44 :=
  lam (A_10200) -> (m_10201) -> (n_10202) -> (B_10203) -> (__10204) ->
  (__10205) -> __10205

def rwrLU_43 :=
  lam (A_10206) -> (m_10207) -> (n_10208) -> (B_10209) -> (__10210) ->
  (__10211) -> __10211

def rwrLL_42 :=
  lam (A_10212) -> (m_10213) -> (n_10214) -> (B_10215) -> (__10216) ->
  (__10217) -> __10217

def sing_elimUU_59 := lam (A_10218) -> (x_10219) -> (__10220) -> __10220

def sing_elimUL_58 := lam (A_10221) -> (x_10222) -> (__10223) -> __10223

def sing_elimLU_57 := lam (A_10224) -> (x_10225) -> (__10226) -> !!

def sing_elimLL_56 := lam (A_10227) -> (x_10228) -> (__10229) -> __10229

def not_10 :=
  lam (__10230) ->
    match __10230 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__10231) -> (__10232) ->
    match __10231 with
    | true_4 =>
      match __10232 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__10233) -> (__10234) ->
    match __10233 with
    | true_4 => true_4
    | false_5 =>
      match __10234 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__10235) -> (__10236) -o
    match __10235 with
    | true_4 =>
      match __10236 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __10236 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_10237 (__10238) -> (__10239) ->
    match __10238 with
    | zero_6  => true_4
    | succ_7 n_10240 =>
      match __10239 with
      | zero_6  => false_5 | succ_7 n_10241 => ((lte_10237) n_10240 n_10241)
      end
    end

def lt_15 :=
  lam (x_10242) -> (y_10243) -> ((lte_14) (succ_7 x_10242) y_10243)

def pred_16 :=
  lam (__10244) ->
    match __10244 with
    | zero_6  => (zero_6 ) | succ_7 n_10245 => n_10245
    end

def add_17 :=
  fun add_10246 (__10247) -> (__10248) ->
    match __10247 with
    | zero_6  => __10248
    | succ_7 n_10249 => (succ_7 ((add_10246) n_10249 __10248))
    end

def sub_18 :=
  fun sub_10250 (__10251) -> (__10252) ->
    match __10252 with
    | zero_6  => __10251
    | succ_7 n_10253 => ((sub_10250) ((pred_16) __10251) n_10253)
    end

def mul_19 :=
  fun mul_10254 (__10255) -> (__10256) ->
    match __10255 with
    | zero_6  => (zero_6 )
    | succ_7 n_10257 => ((add_17) __10256 ((mul_10254) n_10257 __10256))
    end

def div_20 :=
  lam (x_10258) -> (y_10259) ->
    match ((lt_15) x_10258 y_10259) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_10260 :=
        fun loop_10261 (x_10262) -> (y_10263) ->
          match ((sub_18) x_10262 ((pred_16) y_10263)) with
          | zero_6  => (zero_6 )
          | succ_7 n_10264 => (succ_7 ((loop_10261) n_10264 y_10263))
          end
      in ((loop_10260) x_10258 y_10259)
    end

def rem_21 :=
  lam (x_10265) -> (y_10266) ->
    ((sub_18) x_10265 ((mul_19) ((div_20) x_10265 y_10266) y_10266))

def free_listUU_67 :=
  fun free_list_10267 (A_10268) -> (f_10269) -> (__10270) ->
    match __10270 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10271 tl_10272 =>
      let __10273 := ((f_10269) hd_10271) in
      ((free_list_10267) NULL f_10269 tl_10272)
    end

def free_listUL_66 :=
  fun free_list_10274 (A_10275) -> (f_10276) -> (__10277) ->
    match __10277 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10278 tl_10279 =>
      let __10280 := ((f_10276) hd_10278) in
      ((free_list_10274) NULL f_10276 tl_10279)
    end

def free_listLL_64 :=
  fun free_list_10281 (A_10282) -> (f_10283) -> (__10284) ->
    match __10284 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10285 tl_10286 =>
      let __10287 := ((f_10283) hd_10285) in
      ((free_list_10281) NULL f_10283 tl_10286)
    end

def pow_25 :=
  lam (x_10288) -> (y_10289) ->
    let loop_10290 :=
      fun loop_10291 (acc_10292) -> (y_10293) ->
        match (__lte__ y_10293 0) with
        | true_4 => acc_10292
        | false_5 =>
          ((loop_10291) (__mul__ x_10288 acc_10292) (__sub__ y_10293 1))
        end
    in ((loop_10290) 1 y_10289)

def powm_26 :=
  lam (x_10294) -> (y_10295) -> (m_10296) ->
    let loop_10297 :=
      fun loop_10298 (acc_10299) -> (y_10300) ->
        match (__lte__ y_10300 0) with
        | true_4 => acc_10299
        | false_5 =>
          ((loop_10298)
            (__mod__ (__mul__ x_10294 acc_10299) m_10296) (__sub__ y_10300 1))
        end
    in ((loop_10297) 1 y_10295)

def ord_27 := lam (c_10301) -> (__ord__ c_10301)

def chr_28 := lam (i_10302) -> (__chr__ i_10302)

def str_29 := lam (c_10303) -> (__push__ "" c_10303)

def strlen_30 := lam (s_10304) -> (__size__ s_10304)

def string_of_int_31 :=
  lam (i_10305) ->
    let aux_10306 :=
      fun aux_10307 (i_10308) ->
        match (__lte__ 10 i_10308) with
        | true_4 =>
          let r_10309 := (__mod__ i_10308 10) in
          let i_10310 := (__div__ i_10308 10) in
          (__push__ ((aux_10307) i_10310)
            ((chr_28) (__add__ r_10309 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_10308 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10305) with
    | true_4 => ((aux_10306) i_10305)
    | false_5 => (__cat__ "~" ((aux_10306) (__neg__ i_10305)))
    end

def splitU_77 :=
  fun split_10311 (__10312) ->
    match __10312 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_10313 tl_10314 =>
      match tl_10314 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10313 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_10315 tl_10316 =>
        match ((split_10311) tl_10316) with
        | ex1UU_33 m_10317 n_10318 =>
          (ex1UU_33
            (consUU_25 hd_10313 m_10317) (consUU_25 hd_10315 n_10318))
        end
      end
    end

def splitL_76 :=
  fun split_10319 (__10320) ->
    match __10320 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_10321 tl_10322 =>
      match tl_10322 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10321 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_10323 tl_10324 =>
        match ((split_10319) tl_10324) with
        | ex1LL_30 m_10325 n_10326 =>
          (ex1LL_30
            (consUL_23 hd_10321 m_10325) (consUL_23 hd_10323 n_10326))
        end
      end
    end

def add_zero_33 := ((add_17) (zero_6 ))

def test0_34 := (zero_6 )

def test1_35 := true_4

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_231 := push("", c_230);
  return x_231;
}

fn strlen_232(s_233%U) {
  x_234 := size(s_233);
  return x_234;
}

fn string_of_int_235(i_236%U) {
  x_238 :=
    fn aux_239(i_240%U) {
      x_242 := lte(10, i_240);
      match(x_242){
        true_4() => {
          x_244 := mul(i_240, 10);
          r_243 := x_244;
          x_246 := mul(i_240, 10);
          i_245 := x_246;
          x_248 := aux_239(i_245);
          x_251 := ord_223(0);
          x_250 := add(r_243, x_251);
          x_249 := chr_226(x_250);
          x_247 := push(x_248, x_249);
          x_241 := x_247;
        }
        false_5() => {
          x_255 := ord_223(0);
          x_254 := add(i_240, x_255);
          x_253 := chr_226(x_254);
          x_252 := str_229(x_253);
          x_241 := x_252;
        }
      }
      return x_241;
    };
  aux_237 := x_238;
  x_257 := lt(0, i_236);
  match(x_257){
    true_4() => {
      x_258 := aux_237(i_236);
      x_256 := x_258;
    }
    false_5() => {
      x_261 := neg(i_236);
      x_260 := aux_237(x_261);
      x_259 := cat("~", x_260);
      x_256 := x_259;
    }
  }
  return x_256;
}

fn splitU_262(__263%U) {
  match[U](__263){
    nilUU_24() => {
      x_265 := mkconstr(nilUU_24, []);
      x_266 := mkconstr(nilUU_24, []);
      x_267 := mkconstr(ex1UU_33, [x_265, x_266]);
      x_264 := x_267;
    }
    consUU_25(hd_268, tl_269) => {
      match[U](tl_269){
        nilUU_24() => {
          x_271 := mkconstr(nilUU_24, []);
          x_272 := mkconstr(consUU_25, [hd_268, x_271]);
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(ex1UU_33, [x_272, x_273]);
          x_270 := x_274;
        }
        consUU_25(hd_275, tl_276) => {
          x_278 := splitU_262(tl_276);
          match[L](x_278){
            ex1UU_33(m_279, n_280) => {
              x_281 := mkconstr(consUU_25, [hd_268, m_279]);
              x_282 := mkconstr(consUU_25, [hd_275, n_280]);
              x_283 := mkconstr(ex1UU_33, [x_281, x_282]);
              x_277 := x_283;
            }
          }
          x_270 := x_277;
        }
      }
      x_264 := x_270;
    }
  }
  return x_264;
}

fn splitL_284(__285%U) {
  match[L](__285){
    nilUL_22() => {
      x_287 := mkconstr(nilUL_22, []);
      x_288 := mkconstr(nilUL_22, []);
      x_289 := mkconstr(ex1LL_30, [x_287, x_288]);
      x_286 := x_289;
    }
    consUL_23(hd_290, tl_291) => {
      match[L](tl_291){
        nilUL_22() => {
          x_293 := mkconstr(nilUL_22, []);
          x_294 := mkconstr(consUL_23, [hd_290, x_293]);
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(ex1LL_30, [x_294, x_295]);
          x_292 := x_296;
        }
        consUL_23(hd_297, tl_298) => {
          x_300 := splitL_284(tl_298);
          match[L](x_300){
            ex1LL_30(m_301, n_302) => {
              x_303 := mkconstr(consUL_23, [hd_290, m_301]);
              x_304 := mkconstr(consUL_23, [hd_297, n_302]);
              x_305 := mkconstr(ex1LL_30, [x_303, x_304]);
              x_299 := x_305;
            }
          }
          x_292 := x_299;
        }
      }
      x_286 := x_292;
    }
  }
  return x_286;
}

add_zero_306 := {
  x_308 := mkconstr(zero_6, []);
  x_307 := add_116(x_308);
  return x_307;
};

test0_309 := {
  x_310 := mkconstr(zero_6, []);
  return x_310;
};

test1_311 := {
  
  return true_4;
};

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_231 := push("", c_230);
  return x_231;
}

fn strlen_232(s_233%U) {
  x_234 := size(s_233);
  return x_234;
}

fn string_of_int_235(i_236%U) {
  x_238 :=
    fn aux_239(i_240%U) {
      x_242 := lte(10, i_240);
      match(x_242){
        true_4() => {
          x_244 := mul(i_240, 10);
          r_243 := x_244;
          x_246 := mul(i_240, 10);
          i_245 := x_246;
          x_248 := aux_239(i_245);
          x_251 := ord_223(0);
          x_250 := add(r_243, x_251);
          x_249 := chr_226(x_250);
          x_247 := push(x_248, x_249);
          x_241 := x_247;
        }
        false_5() => {
          x_255 := ord_223(0);
          x_254 := add(i_240, x_255);
          x_253 := chr_226(x_254);
          x_252 := str_229(x_253);
          x_241 := x_252;
        }
      }
      return x_241;
    };
  aux_237 := x_238;
  x_257 := lt(0, i_236);
  match(x_257){
    true_4() => {
      x_258 := aux_237(i_236);
      x_256 := x_258;
    }
    false_5() => {
      x_261 := neg(i_236);
      x_260 := aux_237(x_261);
      x_259 := cat("~", x_260);
      x_256 := x_259;
    }
  }
  return x_256;
}

fn splitU_262(__263%U) {
  match[U](__263){
    nilUU_24() => {
      x_265 := mkconstr(nilUU_24, []);
      x_266 := mkconstr(nilUU_24, []);
      x_267 := mkconstr(ex1UU_33, [x_265, x_266]);
      x_264 := x_267;
    }
    consUU_25(hd_268, tl_269) => {
      match[U](tl_269){
        nilUU_24() => {
          x_271 := mkconstr(nilUU_24, []);
          x_272 := mkconstr(consUU_25, [hd_268, x_271]);
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(ex1UU_33, [x_272, x_273]);
          x_270 := x_274;
        }
        consUU_25(hd_275, tl_276) => {
          x_278 := splitU_262(tl_276);
          match[L](x_278){
            ex1UU_33(m_279, n_280) => {
              x_281 := reconstr(x_278, consUU_25, [hd_268, m_279]);
              x_282 := mkconstr(consUU_25, [hd_275, n_280]);
              x_283 := mkconstr(ex1UU_33, [x_281, x_282]);
              x_277 := x_283;
            }
          }
          x_270 := x_277;
        }
      }
      x_264 := x_270;
    }
  }
  return x_264;
}

fn splitL_284(__285%U) {
  match[L](__285){
    nilUL_22() => {
      x_287 := reconstr(__285, nilUL_22, []);
      x_288 := mkconstr(nilUL_22, []);
      x_289 := mkconstr(ex1LL_30, [x_287, x_288]);
      x_286 := x_289;
    }
    consUL_23(hd_290, tl_291) => {
      match[L](tl_291){
        nilUL_22() => {
          x_293 := reconstr(tl_291, nilUL_22, []);
          x_294 := reconstr(__285, consUL_23, [hd_290, x_293]);
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(ex1LL_30, [x_294, x_295]);
          x_292 := x_296;
        }
        consUL_23(hd_297, tl_298) => {
          x_300 := splitL_284(tl_298);
          match[L](x_300){
            ex1LL_30(m_301, n_302) => {
              x_303 := reconstr(x_300, consUL_23, [hd_290, m_301]);
              x_304 := reconstr(tl_291, consUL_23, [hd_297, n_302]);
              x_305 := reconstr(__285, ex1LL_30, [x_303, x_304]);
              x_299 := x_305;
            }
          }
          x_292 := x_299;
        }
      }
      x_286 := x_292;
    }
  }
  return x_286;
}

add_zero_306 := {
  x_308 := mkconstr(zero_6, []);
  x_307 := add_116(x_308);
  return x_307;
};

test0_309 := {
  x_310 := mkconstr(zero_6, []);
  return x_310;
};

test1_311 := {
  
  return true_4;
};

-----------------------------------------

fn fn0_idU_312(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_313(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_314 := fn0_idU_312(A_2, m_3);
  return x_314;
}

fn fn0_idL_315(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_316(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_317 := fn0_idL_315(A_5, m_6);
  return x_317;
}

fn fn0_rwlUU_318(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_319(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_320 := fn0_rwlUU_318(A_8, m_9, n_10, B_11, __12, __13);
  return x_320;
}

fn fn0_rwlUL_321(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_322(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_323 := fn0_rwlUL_321(A_15, m_16, n_17, B_18, __19, __20);
  return x_323;
}

fn fn0_rwlLU_324(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_325(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_326 := fn0_rwlLU_324(A_22, m_23, n_24, B_25, __26, __27);
  return x_326;
}

fn fn0_rwlLL_327(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_328(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_329 := fn0_rwlLL_327(A_29, m_30, n_31, B_32, __33, __34);
  return x_329;
}

fn fn0_rwrUU_330(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_331(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_332 := fn0_rwrUU_330(A_36, m_37, n_38, B_39, __40, __41);
  return x_332;
}

fn fn0_rwrUL_333(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_334(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_335 := fn0_rwrUL_333(A_43, m_44, n_45, B_46, __47, __48);
  return x_335;
}

fn fn0_rwrLU_336(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_337(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_338 := fn0_rwrLU_336(A_50, m_51, n_52, B_53, __54, __55);
  return x_338;
}

fn fn0_rwrLL_339(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_340(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_341 := fn0_rwrLL_339(A_57, m_58, n_59, B_60, __61, __62);
  return x_341;
}

fn fn0_sing_elimUU_342(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_343(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_344 := fn0_sing_elimUU_342(A_64, x_65, __66);
  return x_344;
}

fn fn0_sing_elimUL_345(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_346(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_347 := fn0_sing_elimUL_345(A_68, x_69, __70);
  return x_347;
}

fn fn0_sing_elimLU_348(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_349(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_350 := fn0_sing_elimLU_348(A_72, x_73, __74);
  return x_350;
}

fn fn0_sing_elimLL_351(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_352(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_353 := fn0_sing_elimLL_351(A_76, x_77, __78);
  return x_353;
}

fn fn0_not_354(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_355(env) {
  __80 := env[1];
  x_356 := fn0_not_354(__80);
  return x_356;
}

fn fn0_and_357(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_358(env) {
  __83 := env[1];
  __84 := env[2];
  x_359 := fn0_and_357(__83, __84);
  return x_359;
}

fn fn0_or_360(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_361(env) {
  __88 := env[1];
  __89 := env[2];
  x_362 := fn0_or_360(__88, __89);
  return x_362;
}

fn fn0_xor_363(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_364(env) {
  __93 := env[1];
  __94 := env[2];
  x_365 := fn0_xor_363(__93, __94);
  return x_365;
}

fn fn0_lte_366(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, ctagof(__99), 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, ctagof(__100), 0);
          x_105 := fn0_lte_366(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_367(env) {
  __99 := env[1];
  __100 := env[2];
  x_368 := fn0_lte_366(__99, __100);
  return x_368;
}

fn fn0_lt_369(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_366(x_110, y_108);
  return x_109;
}

fn fn1_lt_370(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_371 := fn0_lt_369(x_107, y_108);
  return x_371;
}

fn fn0_pred_372(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, ctagof(__112), 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_373(env) {
  __112 := env[1];
  x_374 := fn0_pred_372(__112);
  return x_374;
}

fn fn0_add_375(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, ctagof(__117), 0);
      x_121 := fn0_add_375(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_376(env) {
  __117 := env[1];
  __118 := env[2];
  x_377 := fn0_add_375(__117, __118);
  return x_377;
}

fn fn0_sub_378(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, ctagof(__125), 0);
      x_129 := fn0_pred_372(__124);
      x_128 := fn0_sub_378(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_379(env) {
  __124 := env[1];
  __125 := env[2];
  x_380 := fn0_sub_378(__124, __125);
  return x_380;
}

fn fn0_mul_381(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, ctagof(__131), 0);
      x_137 := fn0_mul_381(n_135, __132);
      x_136 := fn0_add_375(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_382(env) {
  __131 := env[1];
  __132 := env[2];
  x_383 := fn0_mul_381(__131, __132);
  return x_383;
}

fn fn0_div_384(x_139, y_140) {
  x_142 := fn0_lt_369(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_386, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_390, loop_144, x_139);
      appc(x_391, x_390, y_140);
      move1(x_156, x_391);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_385(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_393 := fn0_div_384(x_139, y_140);
  return x_393;
}

fn fn0_rem_394(x_158, y_159) {
  x_162 := fn0_div_384(x_158, y_159);
  x_161 := fn0_mul_381(x_162, y_159);
  x_160 := fn0_sub_378(x_158, x_161);
  return x_160;
}

fn fn1_rem_395(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_396 := fn0_rem_394(x_158, y_159);
  return x_396;
}

fn fn0_free_listUU_397(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, ctagof(__166), 0);
      getbox(tl_169, ctagof(__166), 1);
      appc(x_399, f_165, hd_168);
      move1(x_171, x_399);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_397(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_398(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_401 := fn0_free_listUU_397(A_164, f_165, __166);
  return x_401;
}

fn fn0_free_listUL_402(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, ctagof(__176), 0);
      getbox(tl_179, ctagof(__176), 1);
      appc(x_404, f_175, hd_178);
      move1(x_181, x_404);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_402(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_403(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_406 := fn0_free_listUL_402(A_174, f_175, __176);
  return x_406;
}

fn fn0_free_listLL_407(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, ctagof(__186), 0);
      getbox(tl_189, ctagof(__186), 1);
      appc(x_409, f_185, hd_188);
      move1(x_191, x_409);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_407(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_408(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_411 := fn0_free_listLL_407(A_184, f_185, __186);
  return x_411;
}

fn fn0_pow_412(x_194, y_195) {
  mkclo1(x_197, fn1_loop_414, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_418, loop_196, 1);
  appc(x_419, x_418, y_195);
  move1(x_206, x_419);
  return x_206;
}

fn fn1_pow_413(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_421 := fn0_pow_412(x_194, y_195);
  return x_421;
}

fn fn0_powm_422(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_424, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_428, loop_211, 1);
  appc(x_429, x_428, y_209);
  move1(x_222, x_429);
  return x_222;
}

fn fn1_powm_423(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_431 := fn0_powm_422(x_208, y_209, m_210);
  return x_431;
}

fn fn0_ord_432(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_433(env) {
  c_224 := env[1];
  x_434 := fn0_ord_432(c_224);
  return x_434;
}

fn fn0_chr_435(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_436(env) {
  i_227 := env[1];
  x_437 := fn0_chr_435(i_227);
  return x_437;
}

fn fn0_str_438(c_230) {
  push(x_231, "", c_230);
  return x_231;
}

fn fn1_str_439(env) {
  c_230 := env[1];
  x_440 := fn0_str_438(c_230);
  return x_440;
}

fn fn0_strlen_441(s_233) {
  size(x_234, s_233);
  return x_234;
}

fn fn1_strlen_442(env) {
  s_233 := env[1];
  x_443 := fn0_strlen_441(s_233);
  return x_443;
}

fn fn0_string_of_int_444(i_236) {
  mkclo1(x_238, fn1_aux_446, fvc:=3, argc:=1);
  setclo(x_238, ord_223, 1);
  setclo(x_238, chr_226, 2);
  setclo(x_238, str_229, 3);
  move1(aux_237, x_238);
  lte(x_257, 0, i_236);
  switch(x_257){
    true_4 => {
      appc(x_449, aux_237, i_236);
      move1(x_258, x_449);
      move1(x_256, x_258);
      break;
    }
    false_5 => {
      neg(x_261, i_236);
      appc(x_451, aux_237, x_261);
      move1(x_260, x_451);
      cat(x_259, "~", x_260);
      move1(x_256, x_259);
      break;
    }
  }
  return x_256;
}

fn fn1_string_of_int_445(env) {
  i_236 := env[1];
  x_453 := fn0_string_of_int_444(i_236);
  return x_453;
}

fn fn0_splitU_454(__263) {
  switch(ctagof(__263)){
    nilUU_24 => {
      mkbox(x_265, nilUU_24, 0);
      mkbox(x_266, nilUU_24, 0);
      mkbox(x_267, ex1UU_33, 2);
      setbox(x_267, x_265, 0);
      setbox(x_267, x_266, 1);
      move1(x_264, x_267);
      break;
    }
    consUU_25 => {
      getbox(hd_268, ctagof(__263), 0);
      getbox(tl_269, ctagof(__263), 1);
      switch(ctagof(tl_269)){
        nilUU_24 => {
          mkbox(x_271, nilUU_24, 0);
          mkbox(x_272, consUU_25, 2);
          setbox(x_272, hd_268, 0);
          setbox(x_272, x_271, 1);
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, ex1UU_33, 2);
          setbox(x_274, x_272, 0);
          setbox(x_274, x_273, 1);
          move1(x_270, x_274);
          break;
        }
        consUU_25 => {
          getbox(hd_275, ctagof(tl_269), 0);
          getbox(tl_276, ctagof(tl_269), 1);
          x_278 := fn0_splitU_454(tl_276);
          switch(ctagof(x_278)){
            ex1UU_33 => {
              getbox(m_279, ctagof(x_278), 0);
              getbox(n_280, ctagof(x_278), 1);
              rebox(x_281, x_278, consUU_25);
              setbox(x_281, hd_268, 0);
              setbox(x_281, m_279, 1);
              mkbox(x_282, consUU_25, 2);
              setbox(x_282, hd_275, 0);
              setbox(x_282, n_280, 1);
              mkbox(x_283, ex1UU_33, 2);
              setbox(x_283, x_281, 0);
              setbox(x_283, x_282, 1);
              move1(x_277, x_283);
              break;
            }
          }
          move1(x_270, x_277);
          break;
        }
      }
      move1(x_264, x_270);
      break;
    }
  }
  return x_264;
}

fn fn1_splitU_455(env) {
  __263 := env[1];
  x_456 := fn0_splitU_454(__263);
  return x_456;
}

fn fn0_splitL_457(__285) {
  switch(ctagof(__285)){
    nilUL_22 => {
      rebox(x_287, __285, nilUL_22);
      mkbox(x_288, nilUL_22, 0);
      mkbox(x_289, ex1LL_30, 2);
      setbox(x_289, x_287, 0);
      setbox(x_289, x_288, 1);
      move1(x_286, x_289);
      break;
    }
    consUL_23 => {
      getbox(hd_290, ctagof(__285), 0);
      getbox(tl_291, ctagof(__285), 1);
      switch(ctagof(tl_291)){
        nilUL_22 => {
          rebox(x_293, tl_291, nilUL_22);
          rebox(x_294, __285, consUL_23);
          setbox(x_294, hd_290, 0);
          setbox(x_294, x_293, 1);
          mkbox(x_295, nilUL_22, 0);
          mkbox(x_296, ex1LL_30, 2);
          setbox(x_296, x_294, 0);
          setbox(x_296, x_295, 1);
          move1(x_292, x_296);
          break;
        }
        consUL_23 => {
          getbox(hd_297, ctagof(tl_291), 0);
          getbox(tl_298, ctagof(tl_291), 1);
          x_300 := fn0_splitL_457(tl_298);
          switch(ctagof(x_300)){
            ex1LL_30 => {
              getbox(m_301, ctagof(x_300), 0);
              getbox(n_302, ctagof(x_300), 1);
              rebox(x_303, x_300, consUL_23);
              setbox(x_303, hd_290, 0);
              setbox(x_303, m_301, 1);
              rebox(x_304, tl_291, consUL_23);
              setbox(x_304, hd_297, 0);
              setbox(x_304, n_302, 1);
              rebox(x_305, __285, ex1LL_30);
              setbox(x_305, x_303, 0);
              setbox(x_305, x_304, 1);
              move1(x_299, x_305);
              break;
            }
          }
          move1(x_292, x_299);
          break;
        }
      }
      move1(x_286, x_292);
      break;
    }
  }
  return x_286;
}

fn fn1_splitL_458(env) {
  __285 := env[1];
  x_459 := fn0_splitL_457(__285);
  return x_459;
}

fn fn1_aux_446(env) {
  aux_239 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_240 := env[4];
  lte(x_242, 10, i_240);
  switch(x_242){
    true_4 => {
      mul(x_244, i_240, 10);
      move1(r_243, x_244);
      mul(x_246, i_240, 10);
      move1(i_245, x_246);
      appc(x_447, aux_239, i_245);
      move1(x_248, x_447);
      x_251 := fn0_ord_432(0);
      add(x_250, r_243, x_251);
      x_249 := fn0_chr_435(x_250);
      push(x_247, x_248, x_249);
      move1(x_241, x_247);
      break;
    }
    false_5 => {
      x_255 := fn0_ord_432(0);
      add(x_254, i_240, x_255);
      x_253 := fn0_chr_435(x_254);
      x_252 := fn0_str_438(x_253);
      move1(x_241, x_252);
      break;
    }
  }
  return x_241;
}

fn fn1_loop_424(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mul(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_425, loop_213, x_219);
      appc(x_426, x_425, x_221);
      move1(x_218, x_426);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_414(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_415, loop_198, x_204);
      appc(x_416, x_415, x_205);
      move1(x_203, x_416);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_386(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_372(y_148);
  x_150 := fn0_sub_378(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, ctagof(x_150), 0);
      appc(x_387, loop_146, n_153);
      appc(x_388, x_387, y_148);
      move1(x_154, x_388);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_313, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_316, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_319, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_322, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_325, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_328, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_331, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_334, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_337, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_340, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_343, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_346, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_349, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_352, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_355, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_358, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_361, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_364, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_367, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_370, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_373, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_376, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_379, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_382, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_385, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_395, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_398, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_403, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_408, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_413, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_423, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_433, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_436, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_439, fvc:=0, argc:=1);
  mkclo0(strlen_232, fn1_strlen_442, fvc:=0, argc:=1);
  mkclo0(string_of_int_235, fn1_string_of_int_445, fvc:=0, argc:=1);
  mkclo0(splitU_262, fn1_splitU_455, fvc:=0, argc:=1);
  mkclo0(splitL_284, fn1_splitL_458, fvc:=0, argc:=1);
  mkbox(x_308, zero_6, 0);
  appc(x_460, add_116, x_308);
  move1(x_307, x_460);
  move0(add_zero_306, x_307);
  mkbox(x_310, zero_6, 0);
  move0(test0_309, x_310);
  move0(test1_311, true_4);
  return NULL;
}

-----------------------------------------

compilation success

-----------------------------------------

