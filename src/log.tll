[Inductive {name = "tree"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)),
          [(DConstr ("Leaf", (TBase (Id ("tree", I))), []));
            (DConstr ("Node",
               (TBind (R, Int_t,
                  (Binder ("_",
                     (TBind (R, (Id ("tree", I)),
                        (Binder ("l",
                           (TBind (R, (Id ("tree", I)),
                              (Binder ("r", (TBase (Id ("tree", I)))))))
                           ))
                        ))
                     ))
                  )),
               [E; E; E]))
            ]))
      ));
   view = []};
  Inductive {name = "opr"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("Free", (TBase (Id ("opr", I))), []));
             (DConstr ("Height", (TBase (Id ("opr", I))), []));
             (DConstr ("Size", (TBase (Id ("opr", I))), []));
             (DConstr ("Lookup",
                (TBind (R, Int_t, (Binder ("k", (TBase (Id ("opr", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Definition {name = "height"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("_", Int_t)))),
           (Binder ((Some "height"),
              [([(PId "Leaf")], (Some (Int 0)));
                ([(PConstr ("Node", [(PId "_"); (PId "l"); (PId "r")]))],
                 (Some (Let (R, (App [(Id ("height", I)); (Id ("l", I))]),
                          (Binder ((PId "x"),
                             (Let (R,
                                (App [(Id ("height", I)); (Id ("r", I))]),
                                (Binder ((PId "y"),
                                   (Match (
                                      [(R,
                                        (BOpr ("<", (Id ("x", I)),
                                           (Id ("y", I)))),
                                        None)],
                                      None,
                                      [([(PId "true")],
                                        (Some (BOpr ("+", (Id ("y", I)),
                                                 (Int 1)))));
                                        ([(PId "false")],
                                         (Some (BOpr ("+", (Id ("x", I)),
                                                  (Int 1)))))
                                        ]
                                      ))
                                   ))
                                ))
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "size"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("_", Int_t)))),
           (Binder ((Some "size"),
              [([(PId "Leaf")], (Some (Int 0)));
                ([(PConstr ("Node", [(PId "_"); (PId "l"); (PId "r")]))],
                 (Some (BOpr ("+",
                          (BOpr ("+", (Int 1),
                             (App [(Id ("size", I)); (Id ("l", I))]))),
                          (App [(Id ("size", I)); (Id ("r", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "lookup"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (Pi (R, U, (Id ("tree", I)),
                    (Binder ("_", (Id ("bool", I))))))
                 ))
              )),
           (Binder ((Some "lookup"),
              [([(PId "n"); (PId "Leaf")], (Some (Id ("false", I))));
                ([(PId "n");
                   (PConstr ("Node", [(PId "x"); (PId "l"); (PId "r")]))],
                 (Some (Match (
                          [(R, (BOpr ("==", (Id ("x", I)), (Id ("n", I)))),
                            None)],
                          None,
                          [([(PId "true")], (Some (Id ("true", I))));
                            ([(PId "false")],
                             (Some (BOpr ("||",
                                      (App
                                         [(Id ("lookup", I)); (Id ("n", I));
                                           (Id ("l", I))]),
                                      (App
                                         [(Id ("lookup", I)); (Id ("n", I));
                                           (Id ("r", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (Pi (R, U, (Id ("tree", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = [E]};
  Definition {name = "tree_p"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", Proto)))),
           (Binder ((Some "tree_p"),
              [([(PId "t")],
                (Some (Act (R, false, (Id ("opr", I)),
                         (Binder ("o",
                            (Match ([(R, (Id ("o", I)), None)], None,
                               [([(PId "Free")], (Some End));
                                 ([(PId "Height")],
                                  (Some (Act (R, true,
                                           (UOpr ("`",
                                              (App
                                                 [(Id ("height", I));
                                                   (Id ("t", I))])
                                              )),
                                           (Binder ("_",
                                              (App
                                                 [(Id ("tree_p", I));
                                                   (Id ("t", I))])
                                              ))
                                           ))));
                                 ([(PId "Size")],
                                  (Some (Act (R, true,
                                           (UOpr ("`",
                                              (App
                                                 [(Id ("size", I));
                                                   (Id ("t", I))])
                                              )),
                                           (Binder ("_",
                                              (App
                                                 [(Id ("tree_p", I));
                                                   (Id ("t", I))])
                                              ))
                                           ))));
                                 ([(PConstr ("Lookup", [(PId "k")]))],
                                  (Some (Act (R, true,
                                           (UOpr ("`",
                                              (App
                                                 [(Id ("lookup", I));
                                                   (Id ("k", I));
                                                   (Id ("t", I))])
                                              )),
                                           (Binder ("_",
                                              (App
                                                 [(Id ("tree_p", I));
                                                   (Id ("t", I))])
                                              ))
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", Proto)))))
       ));
    view = [E]};
  Definition {name = "ctree_ch"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))),
           (Binder ((Some "ctree_ch"),
              [([(PId "t")],
                (Some (Ch (true, (App [(Id ("tree_p", I)); (Id ("t", I))])))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))))
       ));
    view = [E]};
  Definition {name = "ctree_hc"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))),
           (Binder ((Some "ctree_hc"),
              [([(PId "t")],
                (Some (Ch (false, (App [(Id ("tree_p", I)); (Id ("t", I))])))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))))
       ));
    view = [E]};
  Definition {name = "ctree"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))),
           (Binder ((Some "ctree"),
              [([(PId "t")],
                (Some (IO (App [(Id ("ctree_hc", I)); (Id ("t", I))]))))]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))))
       ));
    view = [E]};
  Definition {name = "leaf_worker"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (App [(Id ("ctree_ch", I)); (Id ("Leaf", I))]),
              (Binder ("c", (IO (Id ("unit", I))))))),
           (Binder ((Some "leaf_worker"),
              [([(PId "c")],
                (Some (MLet ((Recv (Id ("c", I))),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "o"),
                               (PId "c"))),
                            (Match (
                               [(R, (Id ("o", I)), (Some ("o0", IMeta)));
                                 (R, (Id ("c", I)),
                                  (Some ("_",
                                         (Ch (true,
                                            (Match (
                                               [(R, (Id ("o0", I)), None)],
                                               None,
                                               [([(PId "Free")], (Some End));
                                                 ([(PId "Height")],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (Int 0))),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (Id (
                                                                    "Leaf", I
                                                                    ))
                                                                   ])
                                                              ))
                                                           ))));
                                                 ([(PId "Size")],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (Int 0))),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (Id (
                                                                    "Leaf", I
                                                                    ))
                                                                   ])
                                                              ))
                                                           ))));
                                                 ([(PConstr ("Lookup",
                                                      [(PId "_")]))
                                                    ],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (Id ("false", I
                                                                 ))
                                                              )),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (Id (
                                                                    "Leaf", I
                                                                    ))
                                                                   ])
                                                              ))
                                                           ))))
                                                 ]
                                               ))
                                            )))))
                                 ],
                               None,
                               [([(PId "Free"); (PId "c")],
                                 (Some (Close (Id ("c", I)))));
                                 ([(PId "Height"); (PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("c", I)));
                                                (App
                                                   [(Id ("just", I)); (
                                                     Int 0)])
                                                ]),
                                           (Binder ((PId "c"),
                                              (App
                                                 [(Id ("leaf_worker", I));
                                                   (Id ("c", I))])
                                              ))
                                           ))));
                                 ([(PId "Size"); (PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("c", I)));
                                                (App
                                                   [(Id ("just", I)); (
                                                     Int 0)])
                                                ]),
                                           (Binder ((PId "c"),
                                              (App
                                                 [(Id ("leaf_worker", I));
                                                   (Id ("c", I))])
                                              ))
                                           ))));
                                 ([(PConstr ("Lookup", [(PId "_")]));
                                    (PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("c", I)));
                                                (App
                                                   [(Id ("just", I));
                                                     (Id ("false", I))])
                                                ]),
                                           (Binder ((PId "c"),
                                              (App
                                                 [(Id ("leaf_worker", I));
                                                   (Id ("c", I))])
                                              ))
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Id ("ctree_ch", I)); (Id ("Leaf", I))]),
           (Binder ("c", (IO (Id ("unit", I))))))))
       ));
    view = [E]};
  Definition {name = "node_worker"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("x",
                 (Pi (N, U, (Id ("tree", I)),
                    (Binder ("l",
                       (Pi (N, U, (Id ("tree", I)),
                          (Binder ("r",
                             (Pi (R, L,
                                (App [(Id ("ctree_hc", I)); (Id ("l", I))]),
                                (Binder ("_",
                                   (Pi (R, L,
                                      (App
                                         [(Id ("ctree_hc", I)); (Id ("r", I))
                                           ]),
                                      (Binder ("_",
                                         (Pi (R, L,
                                            (App
                                               [(Id ("ctree_ch", I));
                                                 (App
                                                    [(Id ("Node", I));
                                                      (Id ("x", I));
                                                      (Id ("l", I));
                                                      (Id ("r", I))])
                                                 ]),
                                            (Binder ("_",
                                               (IO (Id ("unit", I)))))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "node_worker"),
              [([(PId "x"); (PId "l"); (PId "r"); (PId "l_ch"); (PId "r_ch");
                  (PId "c")],
                (Some (MLet ((Recv (Id ("c", I))),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "o"),
                               (PId "c"))),
                            (Match (
                               [(R, (Id ("o", I)), (Some ("o0", IMeta)));
                                 (R, (Id ("c", I)),
                                  (Some ("_",
                                         (Ch (true,
                                            (Match (
                                               [(R, (Id ("o0", I)), None)],
                                               None,
                                               [([(PId "Free")], (Some End));
                                                 ([(PId "Height")],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (App
                                                                 [(Id (
                                                                    "height",
                                                                    I));
                                                                   (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])
                                                                   ])
                                                              )),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])
                                                                   ])
                                                              ))
                                                           ))));
                                                 ([(PId "Size")],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (App
                                                                 [(Id (
                                                                    "size", I
                                                                    ));
                                                                   (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])
                                                                   ])
                                                              )),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])
                                                                   ])
                                                              ))
                                                           ))));
                                                 ([(PConstr ("Lookup",
                                                      [(PId "k")]))
                                                    ],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (App
                                                                 [(Id (
                                                                    "lookup",
                                                                    I));
                                                                   (Id ("k",
                                                                    I));
                                                                   (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])
                                                                   ])
                                                              )),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])
                                                                   ])
                                                              ))
                                                           ))))
                                                 ]
                                               ))
                                            )))))
                                 ],
                               None,
                               [([(PId "Free"); (PId "c")],
                                 (Some (MLet (
                                          (App
                                             [(Send (Id ("l_ch", I)));
                                               (Id ("Free", I))]),
                                          (Binder ((PId "l_ch"),
                                             (MLet (
                                                (App
                                                   [(Send (Id ("r_ch", I)));
                                                     (Id ("Free", I))]),
                                                (Binder ((PId "r_ch"),
                                                   (BOpr (";",
                                                      (Close (Id ("l_ch", I))),
                                                      (BOpr (";",
                                                         (Close
                                                            (Id ("r_ch", I))),
                                                         (Close (Id ("c", I)))
                                                         ))
                                                      ))
                                                   ))
                                                ))
                                             ))
                                          ))));
                                 ([(PId "Height"); (PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("l_ch", I)));
                                                (Id ("Height", I))]),
                                           (Binder ((PId "l_ch"),
                                              (MLet (
                                                 (App
                                                    [(Send (Id ("r_ch", I)));
                                                      (Id ("Height", I))]),
                                                 (Binder ((PId "r_ch"),
                                                    (MLet (
                                                       (Recv (Id ("l_ch", I))),
                                                       (Binder (
                                                          (PBOpr (
                                                             "\226\159\168,\226\159\169",
                                                             (PConstr (
                                                                "just",
                                                                [(PId "l_h")]
                                                                )),
                                                             (PId "l_ch"))),
                                                          (MLet (
                                                             (Recv
                                                                (Id ("r_ch",
                                                                   I))),
                                                             (Binder (
                                                                (PBOpr (
                                                                   "\226\159\168,\226\159\169",
                                                                   (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "r_h")])),
                                                                   (PId
                                                                    "r_ch")
                                                                   )),
                                                                (Match (
                                                                   [(R,
                                                                    (BOpr (
                                                                    "<",
                                                                    (Id (
                                                                    "l_h", I
                                                                    )),
                                                                    (Id (
                                                                    "r_h", I
                                                                    )))),
                                                                    (Some (
                                                                    "b0",
                                                                    IMeta)));
                                                                    (R,
                                                                    (Id ("c",
                                                                    I)),
                                                                    (Some (
                                                                    "_",
                                                                    (
                                                                    Ch (true,
                                                                    (Act (R,
                                                                    true,
                                                                    (UOpr (
                                                                    "`",
                                                                    (Match (
                                                                    [(R,
                                                                    (Id (
                                                                    "b0", I)),
                                                                    None)],
                                                                    None,
                                                                    [([(PId
                                                                    "true")],
                                                                    (Some (
                                                                    BOpr (
                                                                    "+",
                                                                    (Id (
                                                                    "r_h", I
                                                                    )),
                                                                    (Int 1)))));
                                                                    ([(PId
                                                                    "false")],
                                                                    (Some (
                                                                    BOpr (
                                                                    "+",
                                                                    (Id (
                                                                    "l_h", I
                                                                    )),
                                                                    (Int 1)))))
                                                                    ])))),
                                                                    (Binder (
                                                                    "_",
                                                                    (App
                                                                    [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])])))
                                                                    )))))))],
                                                                   None,
                                                                   [([(PId
                                                                    "true");
                                                                    (PId "c")
                                                                    ],
                                                                    (Some (
                                                                    MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (BOpr (
                                                                    "+",
                                                                    (Id (
                                                                    "r_h", I
                                                                    )),
                                                                    (Int 1)))
                                                                    ])]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (App
                                                                    [(Id (
                                                                    "node_worker",
                                                                    I));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ));
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))])))))));
                                                                    ([(PId
                                                                    "false");
                                                                    (PId "c")
                                                                    ],
                                                                    (Some (
                                                                    MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (BOpr (
                                                                    "+",
                                                                    (Id (
                                                                    "l_h", I
                                                                    )),
                                                                    (Int 1)))
                                                                    ])]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (App
                                                                    [(Id (
                                                                    "node_worker",
                                                                    I));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ));
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))])))))))
                                                                    ]
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))
                                              ))
                                           ))));
                                 ([(PId "Size"); (PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("l_ch", I)));
                                                (Id ("Size", I))]),
                                           (Binder ((PId "l_ch"),
                                              (MLet (
                                                 (App
                                                    [(Send (Id ("r_ch", I)));
                                                      (Id ("Size", I))]),
                                                 (Binder ((PId "r_ch"),
                                                    (MLet (
                                                       (Recv (Id ("l_ch", I))),
                                                       (Binder (
                                                          (PBOpr (
                                                             "\226\159\168,\226\159\169",
                                                             (PConstr (
                                                                "just",
                                                                [(PId "l_sz")
                                                                  ]
                                                                )),
                                                             (PId "l_ch"))),
                                                          (MLet (
                                                             (Recv
                                                                (Id ("r_ch",
                                                                   I))),
                                                             (Binder (
                                                                (PBOpr (
                                                                   "\226\159\168,\226\159\169",
                                                                   (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "r_sz")]
                                                                    )),
                                                                   (PId
                                                                    "r_ch")
                                                                   )),
                                                                (MLet (
                                                                   (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (BOpr (
                                                                    "+",
                                                                    (BOpr (
                                                                    "+",
                                                                    (Int 1),
                                                                    (Id (
                                                                    "l_sz", I
                                                                    )))),
                                                                    (Id (
                                                                    "r_sz", I
                                                                    ))))])]),
                                                                   (Binder (
                                                                    (PId "c"),
                                                                    (App
                                                                    [(Id (
                                                                    "node_worker",
                                                                    I));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ));
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))])))
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))
                                              ))
                                           ))));
                                 ([(PConstr ("Lookup", [(PId "k")]));
                                    (PId "c")],
                                  (Some (Match (
                                           [(R,
                                             (BOpr ("==", (Id ("x", I)),
                                                (Id ("k", I)))),
                                             (Some ("b0", IMeta)));
                                             (R, (Id ("c", I)),
                                              (Some ("_",
                                                     (Ch (true,
                                                        (Act (R, true,
                                                           (UOpr ("`",
                                                              (Match (
                                                                 [(R,
                                                                   (Id ("b0",
                                                                    I)),
                                                                   None)],
                                                                 None,
                                                                 [([(PId
                                                                    "true")],
                                                                   (Some (
                                                                   Id (
                                                                    "true", I
                                                                    ))));
                                                                   ([(PId
                                                                    "false")],
                                                                    (Some (
                                                                    BOpr (
                                                                    "||",
                                                                    (App
                                                                    [(Id (
                                                                    "lookup",
                                                                    I));
                                                                    (Id ("k",
                                                                    I));
                                                                    (Id ("l",
                                                                    I))]),
                                                                    (App
                                                                    [(Id (
                                                                    "lookup",
                                                                    I));
                                                                    (Id ("k",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])))))
                                                                   ]
                                                                 ))
                                                              )),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])
                                                                   ])
                                                              ))
                                                           ))
                                                        )))))
                                             ],
                                           None,
                                           [([(PId "true"); (PId "c")],
                                             (Some (MLet (
                                                      (App
                                                         [(Send (Id ("c", I)));
                                                           (App
                                                              [(Id ("just", I
                                                                  ));
                                                                (Id ("true",
                                                                   I))
                                                                ])
                                                           ]),
                                                      (Binder ((PId "c"),
                                                         (App
                                                            [(Id (
                                                                "node_worker",
                                                                I));
                                                              (Id ("x", I));
                                                              (Id ("l_ch", I
                                                                 ));
                                                              (Id ("r_ch", I
                                                                 ));
                                                              (Id ("c", I))])
                                                         ))
                                                      ))));
                                             ([(PId "false"); (PId "c")],
                                              (Some (MLet (
                                                       (App
                                                          [(Send
                                                              (Id ("l_ch", I
                                                                 )));
                                                            (App
                                                               [(Id (
                                                                   "Lookup",
                                                                   I));
                                                                 (Id ("k", I
                                                                    ))
                                                                 ])
                                                            ]),
                                                       (Binder ((PId "l_ch"),
                                                          (MLet (
                                                             (App
                                                                [(Send
                                                                    (
                                                                    Id (
                                                                    "r_ch", I
                                                                    )));
                                                                  (App
                                                                    [(Id (
                                                                    "Lookup",
                                                                    I));
                                                                    (Id ("k",
                                                                    I))])
                                                                  ]),
                                                             (Binder (
                                                                (PId "r_ch"),
                                                                (MLet (
                                                                   (Recv
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ))),
                                                                   (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "l_b")])),
                                                                    (PId
                                                                    "l_ch"))),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "r_b")])),
                                                                    (PId
                                                                    "r_ch"))),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (BOpr (
                                                                    "||",
                                                                    (Id (
                                                                    "l_b", I
                                                                    )),
                                                                    (Id (
                                                                    "r_b", I
                                                                    ))))])]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (App
                                                                    [(Id (
                                                                    "node_worker",
                                                                    I));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ));
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))])))))
                                                                    ))))))
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))))
                                             ]
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E; I; I])),
        (Pi (R, U, Int_t,
           (Binder ("x",
              (Pi (N, U, (Id ("tree", I)),
                 (Binder ("l",
                    (Pi (N, U, (Id ("tree", I)),
                       (Binder ("r",
                          (Pi (R, L,
                             (App [(Id ("ctree_hc", I)); (Id ("l", I))]),
                             (Binder ("_",
                                (Pi (R, L,
                                   (App [(Id ("ctree_hc", I)); (Id ("r", I))]),
                                   (Binder ("_",
                                      (Pi (R, L,
                                         (App
                                            [(Id ("ctree_ch", I));
                                              (App
                                                 [(Id ("Node", I));
                                                   (Id ("x", I));
                                                   (Id ("l", I));
                                                   (Id ("r", I))])
                                              ]),
                                         (Binder ("_", (IO (Id ("unit", I)))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; I; I]};
  Definition {name = "cleaf"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("unit", I)),
              (Binder ("_", (App [(Id ("ctree", I)); (Id ("Leaf", I))]))))),
           (Binder ((Some "cleaf"),
              [([(PId "_")],
                (Some (Fork
                         (Fun (
                            (Pi (R, L,
                               (App [(Id ("ctree_ch", I)); (Id ("Leaf", I))]),
                               (Binder ("", (IO (Id ("unit", I))))))),
                            (Binder (None,
                               [([(PId "c")],
                                 (Some (App
                                          [(Id ("leaf_worker", I));
                                            (Id ("c", I))])))
                                 ]
                               )),
                            [])))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("unit", I)),
           (Binder ("_", (App [(Id ("ctree", I)); (Id ("Leaf", I))]))))))
       ));
    view = [E]};
  Definition {name = "cnode"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("x",
                 (Pi (N, U, (Id ("tree", I)),
                    (Binder ("l",
                       (Pi (N, U, (Id ("tree", I)),
                          (Binder ("r",
                             (Pi (R, L,
                                (App [(Id ("ctree", I)); (Id ("l", I))]),
                                (Binder ("_",
                                   (Pi (R, L,
                                      (App [(Id ("ctree", I)); (Id ("r", I))]),
                                      (Binder ("_",
                                         (App
                                            [(Id ("ctree", I));
                                              (App
                                                 [(Id ("Node", I));
                                                   (Id ("x", I));
                                                   (Id ("l", I));
                                                   (Id ("r", I))])
                                              ])
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cnode"),
              [([(PId "x"); (PId "l"); (PId "r"); (PId "l0"); (PId "r0")],
                (Some (MLet ((Id ("l0", I)),
                         (Binder ((PId "l_ch"),
                            (MLet ((Id ("r0", I)),
                               (Binder ((PId "r_ch"),
                                  (Fork
                                     (Fun (
                                        (Pi (R, L,
                                           (App
                                              [(Id ("ctree_ch", I));
                                                (App
                                                   [(Id ("Node", I));
                                                     (Id ("x", I));
                                                     (Id ("l", I));
                                                     (Id ("r", I))])
                                                ]),
                                           (Binder ("", (IO (Id ("unit", I)))
                                              ))
                                           )),
                                        (Binder (None,
                                           [([(PId "c")],
                                             (Some (App
                                                      [(Id ("node_worker", I
                                                          ));
                                                        (Id ("x", I));
                                                        (Id ("l_ch", I));
                                                        (Id ("r_ch", I));
                                                        (Id ("c", I))])))
                                             ]
                                           )),
                                        [])))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; I; I])),
        (Pi (R, U, Int_t,
           (Binder ("x",
              (Pi (N, U, (Id ("tree", I)),
                 (Binder ("l",
                    (Pi (N, U, (Id ("tree", I)),
                       (Binder ("r",
                          (Pi (R, L,
                             (App [(Id ("ctree", I)); (Id ("l", I))]),
                             (Binder ("_",
                                (Pi (R, L,
                                   (App [(Id ("ctree", I)); (Id ("r", I))]),
                                   (Binder ("_",
                                      (App
                                         [(Id ("ctree", I));
                                           (App
                                              [(Id ("Node", I));
                                                (Id ("x", I)); (Id ("l", I));
                                                (Id ("r", I))])
                                           ])
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; I; I]};
  Definition {name = "cfree"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Id ("tree", I)),
              (Binder ("t",
                 (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                    (Binder ("ct", (IO (Id ("unit", I)))))))
                 ))
              )),
           (Binder ((Some "cfree"),
              [([(PId "t"); (PId "ct")],
                (Some (MLet ((Id ("ct", I)),
                         (Binder ((PId "c"),
                            (MLet (
                               (App [(Send (Id ("c", I))); (Id ("Free", I))]),
                               (Binder ((PId "c"), (Close (Id ("c", I)))))))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (Id ("tree", I)),
           (Binder ("t",
              (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                 (Binder ("ct", (IO (Id ("unit", I)))))))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "cheight"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Id ("tree", I)),
              (Binder ("t",
                 (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                    (Binder ("ct",
                       (IO
                          (BOpr ("\226\138\151",
                             (UOpr ("`",
                                (App [(Id ("height", I)); (Id ("t", I))]))),
                             (App [(Id ("ctree", I)); (Id ("t", I))]))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cheight"),
              [([(PId "t"); (PId "ct")],
                (Some (MLet ((Id ("ct", I)),
                         (Binder ((PId "c"),
                            (MLet (
                               (App
                                  [(Send (Id ("c", I))); (Id ("Height", I))]),
                               (Binder ((PId "c"),
                                  (MLet ((Recv (Id ("c", I))),
                                     (Binder (
                                        (PBOpr ("\226\159\168,\226\159\169",
                                           (PId "x"), (PId "ct"))),
                                        (Return
                                           (BOpr (
                                              "\226\159\168,\226\159\169",
                                              (Id ("x", I)),
                                              (Return (Id ("ct", I))))))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (Id ("tree", I)),
           (Binder ("t",
              (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                 (Binder ("ct",
                    (IO
                       (BOpr ("\226\138\151",
                          (UOpr ("`",
                             (App [(Id ("height", I)); (Id ("t", I))]))),
                          (App [(Id ("ctree", I)); (Id ("t", I))]))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "csize"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Id ("tree", I)),
              (Binder ("t",
                 (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                    (Binder ("ct",
                       (IO
                          (BOpr ("\226\138\151",
                             (UOpr ("`",
                                (App [(Id ("size", I)); (Id ("t", I))]))),
                             (App [(Id ("ctree", I)); (Id ("t", I))]))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "csize"),
              [([(PId "t"); (PId "ct")],
                (Some (MLet ((Id ("ct", I)),
                         (Binder ((PId "c"),
                            (MLet (
                               (App [(Send (Id ("c", I))); (Id ("Size", I))]),
                               (Binder ((PId "c"),
                                  (MLet ((Recv (Id ("c", I))),
                                     (Binder (
                                        (PBOpr ("\226\159\168,\226\159\169",
                                           (PId "x"), (PId "ct"))),
                                        (Return
                                           (BOpr (
                                              "\226\159\168,\226\159\169",
                                              (Id ("x", I)),
                                              (Return (Id ("ct", I))))))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (Id ("tree", I)),
           (Binder ("t",
              (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                 (Binder ("ct",
                    (IO
                       (BOpr ("\226\138\151",
                          (UOpr ("`", (App [(Id ("size", I)); (Id ("t", I))])
                             )),
                          (App [(Id ("ctree", I)); (Id ("t", I))]))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "clookup"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("k",
                 (Pi (N, U, (Id ("tree", I)),
                    (Binder ("t",
                       (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                          (Binder ("ct",
                             (IO
                                (BOpr ("\226\138\151",
                                   (UOpr ("`",
                                      (App
                                         [(Id ("lookup", I)); (Id ("k", I));
                                           (Id ("t", I))])
                                      )),
                                   (App [(Id ("ctree", I)); (Id ("t", I))]))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "clookup"),
              [([(PId "k"); (PId "t"); (PId "ct")],
                (Some (MLet ((Id ("ct", I)),
                         (Binder ((PId "c"),
                            (MLet (
                               (App
                                  [(Send (Id ("c", I)));
                                    (App [(Id ("Lookup", I)); (Id ("k", I))])
                                    ]),
                               (Binder ((PId "c"),
                                  (MLet ((Recv (Id ("c", I))),
                                     (Binder (
                                        (PBOpr ("\226\159\168,\226\159\169",
                                           (PId "x"), (PId "ct"))),
                                        (Return
                                           (BOpr (
                                              "\226\159\168,\226\159\169",
                                              (Id ("x", I)),
                                              (Return (Id ("ct", I))))))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; I; E])),
        (Pi (R, U, Int_t,
           (Binder ("k",
              (Pi (N, U, (Id ("tree", I)),
                 (Binder ("t",
                    (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                       (Binder ("ct",
                          (IO
                             (BOpr ("\226\138\151",
                                (UOpr ("`",
                                   (App
                                      [(Id ("lookup", I)); (Id ("k", I));
                                        (Id ("t", I))])
                                   )),
                                (App [(Id ("ctree", I)); (Id ("t", I))]))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; I; E]};
  Definition {name = "mytree1"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree1"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("cleaf", I)); (Id ("tt", I))]);
                           (App [(Id ("cleaf", I)); (Id ("tt", I))])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree2"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree2"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree1", I)); (Int 1)]);
                           (App [(Id ("mytree1", I)); (Int 2)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree3"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree3"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree2", I)); (Int 3)]);
                           (App [(Id ("mytree2", I)); (Int 4)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree4"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree4"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree3", I)); (Int 8)]);
                           (App [(Id ("mytree3", I)); (Int 7)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree5"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree5"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree4", I)); (Int 9)]);
                           (App [(Id ("mytree4", I)); (Int 10)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree6"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree6"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree5", I)); (Int 11)]);
                           (App [(Id ("mytree5", I)); (Int 12)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Id ("mytree6", I)); (Int 100)]),
           (Binder ((PId "ct"),
              (MLet ((App [(Id ("cheight", I)); (Id ("ct", I))]),
                 (Binder (
                    (PBOpr ("\226\159\168,\226\159\169",
                       (PConstr ("just", [(PId "h")])), (PId "ct"))),
                    (MLet ((App [(Id ("csize", I)); (Id ("ct", I))]),
                       (Binder (
                          (PBOpr ("\226\159\168,\226\159\169",
                             (PConstr ("just", [(PId "sz")])), (PId "ct"))),
                          (MLet (
                             (App
                                [(Id ("clookup", I)); (Int 1); (Id ("ct", I))
                                  ]),
                             (Binder (
                                (PBOpr ("\226\159\168,\226\159\169",
                                   (PConstr ("just", [(PId "b")])),
                                   (PId "ct"))),
                                (MLet (
                                   (App [(Id ("cfree", I)); (Id ("ct", I))]),
                                   (Binder ((PId "tt"),
                                      (Print
                                         (BOpr ("++",
                                            (BOpr ("++",
                                               (BOpr ("++",
                                                  (BOpr ("++",
                                                     (BOpr ("++",
                                                        (BOpr ("++",
                                                           (BOpr ("++",
                                                              (BOpr ("++",
                                                                 (String
                                                                    "height := "),
                                                                 (App
                                                                    [(Id (
                                                                    "string_of_int",
                                                                    I));
                                                                    (Id ("h",
                                                                    I))])
                                                                 )),
                                                              (String "\n"))),
                                                           (String
                                                              "size   := ")
                                                           )),
                                                        (App
                                                           [(Id (
                                                               "string_of_int",
                                                               I));
                                                             (Id ("sz", I))])
                                                        )),
                                                     (String "\n"))),
                                                  (String "lookup := "))),
                                               (App
                                                  [(Id ("string_of_bool", I));
                                                    (Id ("b", I))])
                                               )),
                                            (String "\n"))))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

[parse success]

-----------------------------------------

#[program]
inductive tree_10‹› : U where
| Leaf_13 : tree_10
| Node_14 (__697 : int) (l_698 : tree_10) (r_699 : tree_10) : tree_10

#[program]
inductive opr_11‹› : U where
| Free_15 : opr_11
| Height_16 : opr_11
| Size_17 : opr_11
| Lookup_18 (k_700 : int) : opr_11

#[program]
def height_33‹› : tree_10 -> int :=
  (fun height_702 : tree_10 -> int
  | Leaf_13 => 0
  | (Node_14 _704 l_705 r_706) =>
    let x_707 := ((height_702) l_705) in
    let y_708 := ((height_702) r_706) in
    (match (__lt__ x_707 y_708) in ?_61[0;0] -o ?_62[0;0] with
    | true_4 => (__add__ y_708 1)
    | false_5 => (__add__ x_707 1)))

#[program]
def size_34‹› : tree_10 -> int :=
  (fun size_711 : tree_10 -> int
  | Leaf_13 => 0
  | (Node_14 _713 l_714 r_715) =>
    (__add__ (__add__ 1 ((size_711) l_714)) ((size_711) r_715)))

#[program]
def lookup_35‹› : int -> tree_10 -> bool_4 :=
  (fun lookup_718 : int -> tree_10 -> bool_4
  | n_721, Leaf_13 => false_5
  | n_722, (Node_14 x_723 l_724 r_725) =>
    (match (__eq__ x_723 n_722) in ?_63[0;0] -o ?_64[0;0] with
    | true_4 => true_4
    | false_5 =>
      ((or_13) ((lookup_718) n_722 l_724) ((lookup_718) n_722 r_725))))

#[logical]
def tree_p_36‹› : tree_10 -> proto :=
  (fun tree_p_728 : tree_10 -> proto
  | t_730 =>
    ⇓(o_731 : opr_11) ⇒
      (match o_731 in ?_65[0;0] -o ?_66[0;0] with
      | Free_15 => •
      | Height_16 =>
        ⇑(__733 : ((ssing_6‹??_50›) ?_67[0;0] ((height_33) t_730))) ⇒
          ((tree_p_728) t_730)
      | Size_17 =>
        ⇑(__734 : ((ssing_6‹??_51›) ?_68[0;0] ((size_34) t_730))) ⇒
          ((tree_p_728) t_730)
      | (Lookup_18 k_735) =>
        ⇑(__736 :
          ((ssing_6‹??_52›) ?_69[0;0] ((lookup_35) k_735 t_730))) ⇒
          ((tree_p_728) t_730)))

#[logical]
def ctree_ch_37‹› : tree_10 -> L :=
  (fun ctree_ch_738 : tree_10 -> L
  | t_740 => ch⟨((tree_p_36) t_740)⟩)

#[logical]
def ctree_hc_38‹› : tree_10 -> L :=
  (fun ctree_hc_742 : tree_10 -> L
  | t_744 => hc⟨((tree_p_36) t_744)⟩)

#[logical]
def ctree_39‹› : tree_10 -> L :=
  (fun ctree_746 : tree_10 -> L
  | t_748 => IO ((ctree_hc_38) t_748))

#[program]
def leaf_worker_40‹› : ((ctree_ch_37) Leaf_13) -> IO unit_9 :=
  (fun leaf_worker_750 : ((ctree_ch_37) Leaf_13) -> IO unit_9
  | c_752 =>
    let* _753 := recv c_752 in
    (match _753 in ?_81[0;0] -o ?_80[0;0] with
    | (ex1_12 o_755 c_756) =>
      (match o_755, c_756 in
         ∀ (o0_757 : ?_70[0;0]) -o
           ch⟨(match o0_757 in ?_71[0;0] -o ?_72[0;0] with
                | Free_15 => •
                | Height_16 =>
                  ⇑(__760 : ((ssing_6‹??_53›) ?_73[0;0] 0)) ⇒
                    ((tree_p_36) Leaf_13)
                | Size_17 =>
                  ⇑(__761 : ((ssing_6‹??_54›) ?_74[0;0] 0)) ⇒
                    ((tree_p_36) Leaf_13)
                | (Lookup_18 _762) =>
                  ⇑(__763 : ((ssing_6‹??_55›) ?_75[0;0] false_5)) ⇒
                    ((tree_p_36) Leaf_13))⟩ -o
             ?_76[0;0]
       with
      | Free_15, c_764 => close c_764
      | Height_16, c_765 =>
        let* c_766 := ((send c_765) (just_2‹??_56,??_57› ?_77[0;0] 0)) in
        ((leaf_worker_750) c_766)
      | Size_17, c_767 =>
        let* c_768 := ((send c_767) (just_2‹??_58,??_59› ?_78[0;0] 0)) in
        ((leaf_worker_750) c_768)
      | (Lookup_18 _769), c_770 =>
        let* c_771 :=
          ((send c_770) (just_2‹??_60,??_61› ?_79[0;0] false_5))
        in ((leaf_worker_750) c_771))))

#[program]
def node_worker_41‹› :
  ∀ (x_772 : int) ->
    ∀ {l_773 : tree_10} ->
      ∀ {r_774 : tree_10} ->
        ((ctree_hc_38) l_773) -o
          ((ctree_hc_38) r_774) -o
            ((ctree_ch_37) (Node_14‹› x_772 l_773 r_774)) -o IO unit_9
:=
  (fun node_worker_778 :
    ∀ (x_779 : int) ->
      ∀ {l_780 : tree_10} ->
        ∀ {r_781 : tree_10} ->
          ((ctree_hc_38) l_780) -o
            ((ctree_hc_38) r_781) -o
              ((ctree_ch_37) (Node_14‹› x_779 l_780 r_781)) -o IO unit_9
  | x_785, l_786, r_787, l_ch_788, r_ch_789, c_790 =>
    let* _791 := recv c_790 in
    (match _791 in ?_127[0;0] -o ?_126[0;0] with
    | (ex1_12 o_793 c_794) =>
      (match o_793, c_794 in
         ∀ (o0_795 : ?_82[0;0]) -o
           ch⟨(match o0_795 in ?_83[0;0] -o ?_84[0;0] with
                | Free_15 => •
                | Height_16 =>
                  ⇑(__798 :
                    ((ssing_6‹??_62›)
                      ?_85[0;0]
                      ((height_33) (Node_14‹› x_785 l_786 r_787)))) ⇒
                    ((tree_p_36) (Node_14‹› x_785 l_786 r_787))
                | Size_17 =>
                  ⇑(__799 :
                    ((ssing_6‹??_63›)
                      ?_86[0;0] ((size_34) (Node_14‹› x_785 l_786 r_787)))) ⇒
                    ((tree_p_36) (Node_14‹› x_785 l_786 r_787))
                | (Lookup_18 k_800) =>
                  ⇑(__801 :
                    ((ssing_6‹??_64›)
                      ?_87[0;0]
                      ((lookup_35) k_800 (Node_14‹› x_785 l_786 r_787)))) ⇒
                    ((tree_p_36) (Node_14‹› x_785 l_786 r_787)))⟩ -o
             ?_88[0;0]
       with
      | Free_15, c_802 =>
        let* l_ch_803 := ((send l_ch_788) Free_15) in
        let* r_ch_804 := ((send r_ch_789) Free_15) in
        let* __805 := close l_ch_803 in
        let* __806 := close r_ch_804 in close c_802
      | Height_16, c_807 =>
        let* l_ch_808 := ((send l_ch_788) Height_16) in
        let* r_ch_809 := ((send r_ch_789) Height_16) in
        let* _810 := recv l_ch_808 in
        (match _810 in ?_103[0;0] -o ?_102[0;0] with
        | (ex1_12 (just_2 l_h_812) l_ch_813) =>
          let* _814 := recv r_ch_809 in
          (match _814 in ?_101[0;0] -o ?_100[0;0] with
          | (ex1_12 (just_2 r_h_816) r_ch_817) =>
            (match (__lt__ l_h_812 r_h_816), c_807 in
               ∀ (b0_818 : ?_89[0;0]) -o
                 ch⟨⇑(__820 :
                        ((ssing_6‹??_65›)
                          ?_92[0;0]
                          (match b0_818 in ?_90[0;0] -o ?_91[0;0] with
                          | true_4 => (__add__ r_h_816 1)
                          | false_5 => (__add__ l_h_812 1)))) ⇒
                        ((tree_p_36) (Node_14‹› x_785 l_786 r_787))⟩ -o
                   ?_93[0;0]
             with
            | true_4, c_822 =>
              let* c_823 :=
                ((send c_822)
                  (just_2‹??_66,??_67› ?_94[0;0] (__add__ r_h_816 1)))
              in
              ((node_worker_778)
                x_785 ?_96[0;0] ?_95[0;0] l_ch_813 r_ch_817 c_823)
            | false_5, c_824 =>
              let* c_825 :=
                ((send c_824)
                  (just_2‹??_68,??_69› ?_97[0;0] (__add__ l_h_812 1)))
              in
              ((node_worker_778)
                x_785 ?_99[0;0] ?_98[0;0] l_ch_813 r_ch_817 c_825))))
      | Size_17, c_826 =>
        let* l_ch_827 := ((send l_ch_788) Size_17) in
        let* r_ch_828 := ((send r_ch_789) Size_17) in
        let* _829 := recv l_ch_827 in
        (match _829 in ?_110[0;0] -o ?_109[0;0] with
        | (ex1_12 (just_2 l_sz_831) l_ch_832) =>
          let* _833 := recv r_ch_828 in
          (match _833 in ?_108[0;0] -o ?_107[0;0] with
          | (ex1_12 (just_2 r_sz_835) r_ch_836) =>
            let* c_837 :=
              ((send c_826)
                (just_2‹??_70,??_71›
                  ?_104[0;0] (__add__ (__add__ 1 l_sz_831) r_sz_835)))
            in
            ((node_worker_778)
              x_785 ?_106[0;0] ?_105[0;0] l_ch_832 r_ch_836 c_837)))
      | (Lookup_18 k_838), c_839 =>
        (match (__eq__ x_785 k_838), c_839 in
           ∀ (b0_840 : ?_111[0;0]) -o
             ch⟨⇑(__842 :
                    ((ssing_6‹??_72›)
                      ?_114[0;0]
                      (match b0_840 in ?_112[0;0] -o ?_113[0;0] with
                      | true_4 => true_4
                      | false_5 =>
                        ((or_13)
                          ((lookup_35) k_838 l_786) ((lookup_35) k_838 r_787))))) ⇒
                    ((tree_p_36) (Node_14‹› x_785 l_786 r_787))⟩ -o
               ?_115[0;0]
         with
        | true_4, c_844 =>
          let* c_845 :=
            ((send c_844) (just_2‹??_73,??_74› ?_116[0;0] true_4))
          in
          ((node_worker_778)
            x_785 ?_118[0;0] ?_117[0;0] l_ch_788 r_ch_789 c_845)
        | false_5, c_846 =>
          let* l_ch_847 := ((send l_ch_788) (Lookup_18‹› k_838)) in
          let* r_ch_848 := ((send r_ch_789) (Lookup_18‹› k_838)) in
          let* _849 := recv l_ch_847 in
          (match _849 in ?_125[0;0] -o ?_124[0;0] with
          | (ex1_12 (just_2 l_b_851) l_ch_852) =>
            let* _853 := recv r_ch_848 in
            (match _853 in ?_123[0;0] -o ?_122[0;0] with
            | (ex1_12 (just_2 r_b_855) r_ch_856) =>
              let* c_857 :=
                ((send c_846)
                  (just_2‹??_75,??_76›
                    ?_119[0;0] ((or_13) l_b_851 r_b_855)))
              in
              ((node_worker_778)
                x_785 ?_121[0;0] ?_120[0;0] l_ch_852 r_ch_856 c_857)))))))

#[program]
def cleaf_42‹› : unit_9 -> ((ctree_39) Leaf_13) :=
  (fun cleaf_859 : unit_9 -> ((ctree_39) Leaf_13)
  | _861 =>
    fork
      (fun _862 : ((ctree_ch_37) Leaf_13) -o IO unit_9
      | c_864 => ((leaf_worker_40) c_864)))

#[program]
def cnode_43‹› :
  ∀ (x_865 : int) ->
    ∀ {l_866 : tree_10} ->
      ∀ {r_867 : tree_10} ->
        ((ctree_39) l_866) -o
          ((ctree_39) r_867) -o
            ((ctree_39) (Node_14‹› x_865 l_866 r_867))
:=
  (fun cnode_870 :
    ∀ (x_871 : int) ->
      ∀ {l_872 : tree_10} ->
        ∀ {r_873 : tree_10} ->
          ((ctree_39) l_872) -o
            ((ctree_39) r_873) -o
              ((ctree_39) (Node_14‹› x_871 l_872 r_873))
  | x_876, l_877, r_878, l0_879, r0_880 =>
    let* l_ch_881 := l0_879 in
    let* r_ch_882 := r0_880 in
    fork
      (fun _883 :
        ((ctree_ch_37) (Node_14‹› x_876 l_877 r_878)) -o IO unit_9
      | c_885 =>
        ((node_worker_41)
          x_876 ?_129[0;0] ?_128[0;0] l_ch_881 r_ch_882 c_885)))

#[program]
def cfree_44‹› : ∀ {t_886 : tree_10} -> ((ctree_39) t_886) -> IO unit_9
:=
  (fun cfree_888 : ∀ {t_889 : tree_10} -> ((ctree_39) t_889) -> IO unit_9
  | t_891, ct_892 =>
    let* c_893 := ct_892 in
    let* c_894 := ((send c_893) Free_15) in close c_894)

#[program]
def cheight_45‹› :
  ∀ {t_895 : tree_10} ->
    ((ctree_39) t_895) ->
      IO ((tensor_25‹??_83,??_84›)
           ((ssing_6‹??_82›) ?_135[0;0] ((height_33) t_895))
           ((ctree_39) t_895))
:=
  (fun cheight_897 :
    ∀ {t_898 : tree_10} ->
      ((ctree_39) t_898) ->
        IO ((tensor_25‹??_78,??_79›)
             ((ssing_6‹??_77›) ?_130[0;0] ((height_33) t_898))
             ((ctree_39) t_898))
  | t_900, ct_901 =>
    let* c_902 := ct_901 in
    let* c_903 := ((send c_902) Height_16) in
    let* _904 := recv c_903 in
    (match _904 in ?_134[0;0] -o ?_133[0;0] with
    | (ex1_12 x_906 ct_907) =>
      return (ex1_12‹??_80,??_81›
               ?_131[0;0] ?_132[0;0] x_906 return ct_907)))

#[program]
def csize_46‹› :
  ∀ {t_908 : tree_10} ->
    ((ctree_39) t_908) ->
      IO ((tensor_25‹??_91,??_92›)
           ((ssing_6‹??_90›) ?_141[0;0] ((size_34) t_908))
           ((ctree_39) t_908))
:=
  (fun csize_910 :
    ∀ {t_911 : tree_10} ->
      ((ctree_39) t_911) ->
        IO ((tensor_25‹??_86,??_87›)
             ((ssing_6‹??_85›) ?_136[0;0] ((size_34) t_911))
             ((ctree_39) t_911))
  | t_913, ct_914 =>
    let* c_915 := ct_914 in
    let* c_916 := ((send c_915) Size_17) in
    let* _917 := recv c_916 in
    (match _917 in ?_140[0;0] -o ?_139[0;0] with
    | (ex1_12 x_919 ct_920) =>
      return (ex1_12‹??_88,??_89›
               ?_137[0;0] ?_138[0;0] x_919 return ct_920)))

#[program]
def clookup_47‹› :
  ∀ (k_921 : int) ->
    ∀ {t_922 : tree_10} ->
      ((ctree_39) t_922) ->
        IO ((tensor_25‹??_99,??_100›)
             ((ssing_6‹??_98›) ?_147[0;0] ((lookup_35) k_921 t_922))
             ((ctree_39) t_922))
:=
  (fun clookup_924 :
    ∀ (k_925 : int) ->
      ∀ {t_926 : tree_10} ->
        ((ctree_39) t_926) ->
          IO ((tensor_25‹??_94,??_95›)
               ((ssing_6‹??_93›) ?_142[0;0] ((lookup_35) k_925 t_926))
               ((ctree_39) t_926))
  | k_928, t_929, ct_930 =>
    let* c_931 := ct_930 in
    let* c_932 := ((send c_931) (Lookup_18‹› k_928)) in
    let* _933 := recv c_932 in
    (match _933 in ?_146[0;0] -o ?_145[0;0] with
    | (ex1_12 x_935 ct_936) =>
      return (ex1_12‹??_96,??_97›
               ?_143[0;0] ?_144[0;0] x_935 return ct_936)))

#[program]
def mytree1_48‹› : int -> ?_151[0;0] :=
  (fun mytree1_938 : int -> ?_148[0;0]
  | x_940 =>
    ((cnode_43)
      x_940 ?_150[0;0] ?_149[0;0] ((cleaf_42) tt_3‹??_101›)
      ((cleaf_42) tt_3‹??_102›)))

#[program]
def mytree2_49‹› : int -> ?_155[0;0] :=
  (fun mytree2_942 : int -> ?_152[0;0]
  | x_944 =>
    ((cnode_43)
      x_944 ?_154[0;0] ?_153[0;0] ((mytree1_48) 1) ((mytree1_48) 2)))

#[program]
def mytree3_50‹› : int -> ?_159[0;0] :=
  (fun mytree3_946 : int -> ?_156[0;0]
  | x_948 =>
    ((cnode_43)
      x_948 ?_158[0;0] ?_157[0;0] ((mytree2_49) 3) ((mytree2_49) 4)))

#[program]
def mytree4_51‹› : int -> ?_163[0;0] :=
  (fun mytree4_950 : int -> ?_160[0;0]
  | x_952 =>
    ((cnode_43)
      x_952 ?_162[0;0] ?_161[0;0] ((mytree3_50) 8) ((mytree3_50) 7)))

#[program]
def mytree5_52‹› : int -> ?_167[0;0] :=
  (fun mytree5_954 : int -> ?_164[0;0]
  | x_956 =>
    ((cnode_43)
      x_956 ?_166[0;0] ?_165[0;0] ((mytree4_51) 9) ((mytree4_51) 10)))

#[program]
def mytree6_53‹› : int -> ?_171[0;0] :=
  (fun mytree6_958 : int -> ?_168[0;0]
  | x_960 =>
    ((cnode_43)
      x_960 ?_170[0;0] ?_169[0;0] ((mytree5_52) 11) ((mytree5_52) 12)))

#[program]
def main_54‹› : IO unit_9 :=
  let ct_961 := ((mytree6_53) 100) in
  let* _962 := ((cheight_45) ?_172[0;0] ct_961) in
  (match _962 in ?_183[0;0] -o ?_182[0;0] with
  | (ex1_12 (just_2 h_964) ct_965) =>
    let* _966 := ((csize_46) ?_173[0;0] ct_965) in
    (match _966 in ?_181[0;0] -o ?_180[0;0] with
    | (ex1_12 (just_2 sz_968) ct_969) =>
      let* _970 := ((clookup_47) 1 ?_174[0;0] ct_969) in
      (match _970 in ?_179[0;0] -o ?_178[0;0] with
      | (ex1_12 (just_2 b_972) ct_973) =>
        let* _974 := ((cfree_44) ?_175[0;0] ct_973) in
        (match _974 in ?_177[0;0] -o ?_176[0;0] with
        | tt_3 =>
          print
            (__cat__
              (__cat__
                (__cat__
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__ "height := " ((string_of_int_32) h_964))
                          "\n")
                        "size   := ")
                      ((string_of_int_32) sz_968))
                    "\n")
                  "lookup := ")
                ((string_of_bool_15) b_972))
              "\n")))))

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_65660› :
  ∀ (A_65661 : Type‹s_65660›) -> A_65661 -> A_65661
:=
  (fun id_65663 : ∀ (A_65664 : Type‹s_65660›) -> A_65664 -> A_65664
  | A_65666, m_65667 => m_65667)

#[logical]
inductive eq_1‹s_65668› (A_65669 : Type‹s_65668›) (m_65670 : A_65669):
  A_65669 -> U
where
| refl_1 : (eq_1‹s_65668› A_65669 m_65670 m_65670)

#[program]
def rwl_2‹s_65672,r_65673› :
  ∀ {A_65674 : Type‹s_65672›} ->
    ∀ {m_65675 : A_65674} ->
      ∀ {n_65676 : A_65674} ->
        ∀ {B_65677 : A_65674 -> Type‹r_65673›} ->
          {(eq_1‹s_65672› A_65674 m_65675 n_65676)} ->
            ((B_65677) m_65675) -> ((B_65677) n_65676)
:=
  (fun rwl_65681 :
    ∀ {A_65682 : Type‹s_65672›} ->
      ∀ {m_65683 : A_65682} ->
        ∀ {n_65684 : A_65682} ->
          ∀ {B_65685 : A_65682 -> Type‹r_65673›} ->
            {(eq_1‹s_65672› A_65682 m_65683 n_65684)} ->
              ((B_65685) m_65683) -> ((B_65685) n_65684)
  | A_65689, m_65690, n_65691, B_65692, refl_1, __65693 => __65693)

#[program]
def rwr_3‹s_65694,r_65695› :
  ∀ {A_65696 : Type‹s_65694›} ->
    ∀ {m_65697 : A_65696} ->
      ∀ {n_65698 : A_65696} ->
        ∀ {B_65699 : A_65696 -> Type‹r_65695›} ->
          {(eq_1‹s_65694› A_65696 m_65697 n_65698)} ->
            ((B_65699) n_65698) -> ((B_65699) m_65697)
:=
  (fun rwr_65703 :
    ∀ {A_65704 : Type‹s_65694›} ->
      ∀ {m_65705 : A_65704} ->
        ∀ {n_65706 : A_65704} ->
          ∀ {B_65707 : A_65704 -> Type‹r_65695›} ->
            {(eq_1‹s_65694› A_65704 m_65705 n_65706)} ->
              ((B_65707) n_65706) -> ((B_65707) m_65705)
  | A_65711, m_65712, n_65713, B_65714, refl_1, __65715 => __65715)

#[logical]
def congr_4‹s_65716,r_65717,t_65718› :
  ∀ (A_65719 : Type‹s_65716›) ->
    ∀ (B_65720 : Type‹r_65717›) ->
      ∀ (m_65721 : A_65719) ->
        ∀ (n_65722 : A_65719) ->
          ∀ (f_65723 : forall‹t_65718›(__65724 : A_65719), B_65720) ->
            (eq_1‹s_65716› A_65719 m_65721 n_65722) ->
              (eq_1‹r_65717›
                B_65720 ((f_65723) m_65721) ((f_65723) n_65722))
:=
  (fun congr_65726 :
    ∀ (A_65727 : Type‹s_65716›) ->
      ∀ (B_65728 : Type‹r_65717›) ->
        ∀ (m_65729 : A_65727) ->
          ∀ (n_65730 : A_65727) ->
            ∀ (f_65731 :
              forall‹t_65718›(__65732 : A_65727), B_65728) ->
              (eq_1‹s_65716› A_65727 m_65729 n_65730) ->
                (eq_1‹r_65717›
                  B_65728 ((f_65731) m_65729) ((f_65731) n_65730))
  | A_65734, B_65735, m_65736, n_65737, f_65738, refl_1 =>
    (refl_1‹r_65717› B_65735 ((f_65738) n_65737)))

#[logical]
def axiom_K_5‹› :
  ∀ {A_65739 : U} ->
    ∀ {m_65740 : A_65739} ->
      ∀ (x_65741 : (eq_1‹U› A_65739 m_65740 m_65740)) ->
        (eq_1‹U›
          (eq_1‹U› A_65739 m_65740 m_65740) x_65741
          (refl_1‹U› A_65739 m_65740))
:=
  (fun axiom_K_65742 :
    ∀ {A_65743 : U} ->
      ∀ {m_65744 : A_65743} ->
        ∀ (x_65745 : (eq_1‹U› A_65743 m_65744 m_65744)) ->
          (eq_1‹U›
            (eq_1‹U› A_65743 m_65744 m_65744) x_65745
            (refl_1‹U› A_65743 m_65744))
  | A_65746, m_65747, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_65746 m_65747 m_65747) (refl_1‹U› A_65746 m_65747)))

#[program]
inductive sing_2‹s_65748,t_65749› (A_65750 : Type‹s_65748›):
  A_65750 -> Type‹t_65749›
where
| just_2 (m_65752 : A_65750) : (sing_2‹s_65748,t_65749› A_65750 m_65752)

#[logical]
def ssing_6‹s_65753› :
  ∀ (A_65754 : Type‹s_65753›) -> A_65754 -> Type‹s_65753›
:=
  (fun ssing_65756 :
    ∀ (A_65757 : Type‹s_65753›) -> A_65757 -> Type‹s_65753›
  | A_65759, m_65760 => (sing_2‹s_65753,s_65753› A_65759 m_65760))

#[program]
def sing_elim_7‹s_65761,t_65762› :
  ∀ {A_65763 : Type‹s_65761›} ->
    ∀ {x_65764 : A_65763} ->
      (sing_2‹s_65761,t_65762› A_65763 x_65764) -> A_65763
:=
  (fun sing_elim_65766 :
    ∀ {A_65767 : Type‹s_65761›} ->
      ∀ {x_65768 : A_65767} ->
        (sing_2‹s_65761,t_65762› A_65767 x_65768) -> A_65767
  | A_65770, x_65771, (just_2 m_65772) => m_65772)

#[logical]
def sing_uniq_8‹s_65773,t_65774› :
  ∀ (A_65775 : Type‹s_65773›) ->
    ∀ (x0_65776 : A_65775) ->
      ∀ (x_65777 : (sing_2‹s_65773,t_65774› A_65775 x0_65776)) ->
        (eq_1‹s_65773›
          A_65775 x0_65776
          ((sing_elim_7‹s_65773,t_65774›) A_65775 x0_65776 x_65777))
:=
  (fun sing_uniq_65778 :
    ∀ (A_65779 : Type‹s_65773›) ->
      ∀ (x0_65780 : A_65779) ->
        ∀ (x_65781 : (sing_2‹s_65773,t_65774› A_65779 x0_65780)) ->
          (eq_1‹s_65773›
            A_65779 x0_65780
            ((sing_elim_7‹s_65773,t_65774›) A_65779 x0_65780 x_65781))
  | A_65782, x0_65783, (just_2 m_65784) =>
    (refl_1‹s_65773› A_65782 m_65784))

#[program]
inductive base_3‹s_65785› : Type‹s_65785› where
| tt_3 : base_3‹s_65785›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_65786 : unit_9) -> (eq_1‹U› base_3‹U› x_65786 tt_3‹U›)
:=
  (fun unit_eta_65787 :
    ∀ (x_65788 : unit_9) -> (eq_1‹U› base_3‹U› x_65788 tt_3‹U›)
  | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›))

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  (fun not_65790 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4)

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun and_65794 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __65797 => false_5)

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun or_65800 : bool_4 -> bool_4 -> bool_4
  | true_4, __65803 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun xor_65806 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
def string_of_bool_15‹› : bool_4 -> string :=
  (fun string_of_bool_65810 : bool_4 -> string
  | true_4 => "true"
  | false_5 => "false")

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_65812 : nat_5) : nat_5

#[program]
def lte_16‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lte_65815 : nat_5 -> nat_5 -> bool_4
  | zero_6, __65818 => true_4
  | (succ_7 n_65819), zero_6 => false_5
  | (succ_7 n_65820), (succ_7 n_65821) => ((lte_65815) n_65820 n_65821))

#[program]
def lt_17‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lt_65824 : nat_5 -> nat_5 -> bool_4
  | x_65827, y_65828 => ((lte_16) (succ_7‹› x_65827) y_65828))

#[program]
def pred_18‹› : nat_5 -> nat_5 :=
  (fun pred_65830 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_65832) => n_65832)

#[program]
def add_19‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun add_65835 : nat_5 -> nat_5 -> nat_5
  | zero_6, __65838 => __65838
  | (succ_7 n_65839), __65840 => (succ_7‹› ((add_65835) n_65839 __65840)))

#[program]
def sub_20‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun sub_65843 : nat_5 -> nat_5 -> nat_5
  | __65846, zero_6 => __65846
  | __65847, (succ_7 n_65848) => ((sub_65843) ((pred_18) __65847) n_65848))

#[program]
def mul_21‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun mul_65851 : nat_5 -> nat_5 -> nat_5
  | zero_6, __65854 => zero_6
  | (succ_7 n_65855), __65856 =>
    ((add_19) __65856 ((mul_65851) n_65855 __65856)))

#[program]
def div_22‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun div_65859 : nat_5 -> nat_5 -> nat_5
  | x_65862, y_65863 =>
    (match ((lt_17) x_65862 y_65863) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_65865 :=
        (fun loop_65866 : nat_5 -> nat_5 -> nat_5
        | x_65869, y_65870 =>
          (match ((sub_20) x_65869 ((pred_18) y_65870)) in nat_5 -o nat_5
           with
          | zero_6 => zero_6
          | (succ_7 n_65872) => (succ_7‹› ((loop_65866) n_65872 y_65870))))
      in ((loop_65865) x_65862 y_65863)))

#[program]
def rem_23‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun rem_65875 : nat_5 -> nat_5 -> nat_5
  | x_65878, y_65879 =>
    ((sub_20) x_65878 ((mul_21) ((div_22) x_65878 y_65879) y_65879)))

#[program]
inductive list_6‹s_65880,t_65881› (A_65882 : Type‹s_65880›):
  Type‹t_65881›
where
| nil_8 : (list_6‹s_65880,t_65881› A_65882)
| cons_9
    (hd_65883 : A_65882) (tl_65884 : (list_6‹s_65880,t_65881› A_65882))
    : (list_6‹s_65880,t_65881› A_65882)

#[program]
def free_list_24‹s_65885,t_65886› :
  ∀ {A_65887 : Type‹s_65885›} ->
    A_65887 -> unit_9 -> (list_6‹s_65885,t_65886› A_65887) -> unit_9
:=
  (fun free_list_65891 :
    ∀ {A_65892 : Type‹s_65885›} ->
      A_65892 -> unit_9 -> (list_6‹s_65885,t_65886› A_65892) -> unit_9
  | A_65896, f_65897, nil_8 => tt_3‹U›
  | A_65898, f_65899, (cons_9 hd_65900 tl_65901) =>
    let __65902 := ((f_65899) hd_65900) in
    ((free_list_65891) A_65898 f_65899 tl_65901))

#[program]
inductive exists_7‹s_65903,r_65904› (A_65905 : Type‹s_65903›) (B_65906 : 
A_65905 -> Type‹r_65904›): L where
| ex_10
    (m_65908 : A_65905) {n_65909 : ((B_65906) m_65908)}
    : (exists_7‹s_65903,r_65904› A_65905 B_65906)

#[program]
inductive exists0_8‹s_65910,r_65911› (A_65912 : Type‹s_65910›) (B_65913 : 
A_65912 -> Type‹r_65911›): L where
| ex0_11
    {m_65915 : A_65912} (n_65916 : ((B_65913) m_65915))
    : (exists0_8‹s_65910,r_65911› A_65912 B_65913)

#[program]
inductive exists1_9‹s_65917,r_65918› (A_65919 : Type‹s_65917›) (B_65920 : 
A_65919 -> Type‹r_65918›): L where
| ex1_12
    (m_65922 : A_65919) (n_65923 : ((B_65920) m_65922))
    : (exists1_9‹s_65917,r_65918› A_65919 B_65920)

#[logical]
def tensor_25‹s_65924,r_65925› :
  Type‹s_65924› -> Type‹r_65925› -> L
:=
  (fun tensor_65928 : Type‹s_65924› -> Type‹r_65925› -> L
  | A_65931, B_65932 =>
    (exists1_9‹s_65924,r_65925›
      A_65931
      (fun _65933 : A_65931 -> Type‹r_65925›
      | __65935 => B_65932)))

#[program]
def pow_26‹› : int -> int -> int :=
  (fun pow_65938 : int -> int -> int
  | x_65941, y_65942 =>
    let loop_65943 :=
      (fun loop_65944 : int -> int -> int
      | acc_65947, y_65948 =>
        (match (__lte__ y_65948 0) in bool_4 -o int with
        | true_4 => acc_65947
        | false_5 =>
          ((loop_65944) (__mul__ x_65941 acc_65947) (__sub__ y_65948 1))))
    in ((loop_65943) 1 y_65942))

#[program]
def powm_27‹› : int -> int -> int -> int :=
  (fun powm_65953 : int -> int -> int -> int
  | x_65957, y_65958, m_65959 =>
    let loop_65960 :=
      (fun loop_65961 : int -> int -> int
      | acc_65964, y_65965 =>
        (match (__lte__ y_65965 0) in bool_4 -o int with
        | true_4 => acc_65964
        | false_5 =>
          ((loop_65961)
            (__mod__ (__mul__ x_65957 acc_65964) m_65959) (__sub__ y_65965 1))))
    in ((loop_65960) 1 y_65958))

#[program]
def ord_28‹› : char -> int :=
  (fun ord_65968 : char -> int
  | c_65970 => (__ord__ c_65970))

#[program]
def chr_29‹› : int -> char :=
  (fun chr_65972 : int -> char
  | i_65974 => (__chr__ i_65974))

#[program]
def str_30‹› : char -> string :=
  (fun str_65976 : char -> string
  | c_65978 => (__push__ "" c_65978))

#[program]
def strlen_31‹› : string -> int :=
  (fun strlen_65980 : string -> int
  | s_65982 => (__size__ s_65982))

#[program]
def string_of_int_32‹› : int -> string :=
  (fun string_of_int_65984 : int -> string
  | i_65986 =>
    let aux_65987 :=
      (fun aux_65988 : int -> string
      | i_65990 =>
        (match (__lte__ 10 i_65990) in bool_4 -o string with
        | true_4 =>
          let r_65992 := (__mod__ i_65990 10) in
          let i_65993 := (__div__ i_65990 10) in
          (__push__ ((aux_65988) i_65993)
            ((chr_29) (__add__ r_65992 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_65990 ((ord_28) 0))))))
    in
    (match (__lte__ 0 i_65986) in bool_4 -o string with
    | true_4 => ((aux_65987) i_65986)
    | false_5 => (__cat__ "~" ((aux_65987) (__neg__ i_65986)))))

#[program]
inductive tree_10‹› : U where
| Leaf_13 : tree_10
| Node_14 (__65995 : int) (l_65996 : tree_10) (r_65997 : tree_10) : tree_10

#[program]
inductive opr_11‹› : U where
| Free_15 : opr_11
| Height_16 : opr_11
| Size_17 : opr_11
| Lookup_18 (k_65998 : int) : opr_11

#[program]
def height_33‹› : tree_10 -> int :=
  (fun height_66000 : tree_10 -> int
  | Leaf_13 => 0
  | (Node_14 __66002 l_66003 r_66004) =>
    let x_66005 := ((height_66000) l_66003) in
    let y_66006 := ((height_66000) r_66004) in
    (match (__lt__ x_66005 y_66006) in bool_4 -o int with
    | true_4 => (__add__ y_66006 1)
    | false_5 => (__add__ x_66005 1)))

#[program]
def size_34‹› : tree_10 -> int :=
  (fun size_66009 : tree_10 -> int
  | Leaf_13 => 0
  | (Node_14 __66011 l_66012 r_66013) =>
    (__add__ (__add__ 1 ((size_66009) l_66012)) ((size_66009) r_66013)))

#[program]
def lookup_35‹› : int -> tree_10 -> bool_4 :=
  (fun lookup_66016 : int -> tree_10 -> bool_4
  | n_66019, Leaf_13 => false_5
  | n_66020, (Node_14 __66021 l_66022 r_66023) =>
    (match (__eq__ __66021 n_66020) in bool_4 -o bool_4 with
    | true_4 => true_4
    | false_5 =>
      ((or_13)
        ((lookup_66016) n_66020 l_66022) ((lookup_66016) n_66020 r_66023))))

#[logical]
def tree_p_36‹› : tree_10 -> proto :=
  (fun tree_p_66026 : tree_10 -> proto
  | t_66028 =>
    ⇓(o_66029 : opr_11) ⇒
      (match o_66029 in opr_11 -o proto with
      | Free_15 => •
      | Height_16 =>
        ⇑(__66031 : ((ssing_6‹U›) int ((height_33) t_66028))) ⇒
          ((tree_p_66026) t_66028)
      | Size_17 =>
        ⇑(__66032 : ((ssing_6‹U›) int ((size_34) t_66028))) ⇒
          ((tree_p_66026) t_66028)
      | (Lookup_18 k_66033) =>
        ⇑(__66034 :
          ((ssing_6‹U›) bool_4 ((lookup_35) k_66033 t_66028))) ⇒
          ((tree_p_66026) t_66028)))

#[logical]
def ctree_ch_37‹› : tree_10 -> L :=
  (fun ctree_ch_66036 : tree_10 -> L
  | t_66038 => ch⟨((tree_p_36) t_66038)⟩)

#[logical]
def ctree_hc_38‹› : tree_10 -> L :=
  (fun ctree_hc_66040 : tree_10 -> L
  | t_66042 => hc⟨((tree_p_36) t_66042)⟩)

#[logical]
def ctree_39‹› : tree_10 -> L :=
  (fun ctree_66044 : tree_10 -> L
  | t_66046 => IO ((ctree_hc_38) t_66046))

#[program]
def leaf_worker_40‹› : ((ctree_ch_37) Leaf_13) -> IO unit_9 :=
  (fun leaf_worker_66048 : ((ctree_ch_37) Leaf_13) -> IO unit_9
  | c_66050 =>
    let* _66051 := recv c_66050 in
    (match _66051 in
       (exists1_9‹U,L›
         opr_11
         (fun _66053 : opr_11 -> L
         | o_66055 =>
           ch⟨(match o_66055 in opr_11 -o proto with
                | Free_15 => •
                | Height_16 =>
                  ⇑(__66057 :
                    ((ssing_6‹U›) int ((height_33) Leaf_13))) ⇒
                    (((fun tree_p_66058 : tree_10 -> proto
                      | t_66060 =>
                        ⇓(o_66061 : opr_11) ⇒
                          (match o_66061 in opr_11 -o proto with
                          | Free_15 => •
                          | Height_16 =>
                            ⇑(__66063 :
                              ((ssing_6‹U›) int ((height_33) t_66060))) ⇒
                              ((tree_p_66058) t_66060)
                          | Size_17 =>
                            ⇑(__66064 :
                              ((ssing_6‹U›) int ((size_34) t_66060))) ⇒
                              ((tree_p_66058) t_66060)
                          | (Lookup_18 k_66065) =>
                            ⇑(__66066 :
                              ((ssing_6‹U›)
                                bool_4 ((lookup_35) k_66065 t_66060))) ⇒
                              ((tree_p_66058) t_66060))))
                      Leaf_13)
                | Size_17 =>
                  ⇑(__66067 :
                    ((ssing_6‹U›) int ((size_34) Leaf_13))) ⇒
                    (((fun tree_p_66068 : tree_10 -> proto
                      | t_66070 =>
                        ⇓(o_66071 : opr_11) ⇒
                          (match o_66071 in opr_11 -o proto with
                          | Free_15 => •
                          | Height_16 =>
                            ⇑(__66073 :
                              ((ssing_6‹U›) int ((height_33) t_66070))) ⇒
                              ((tree_p_66068) t_66070)
                          | Size_17 =>
                            ⇑(__66074 :
                              ((ssing_6‹U›) int ((size_34) t_66070))) ⇒
                              ((tree_p_66068) t_66070)
                          | (Lookup_18 k_66075) =>
                            ⇑(__66076 :
                              ((ssing_6‹U›)
                                bool_4 ((lookup_35) k_66075 t_66070))) ⇒
                              ((tree_p_66068) t_66070))))
                      Leaf_13)
                | (Lookup_18 k_66077) =>
                  ⇑(__66078 :
                    ((ssing_6‹U›) bool_4 ((lookup_35) k_66077 Leaf_13))) ⇒
                    (((fun tree_p_66079 : tree_10 -> proto
                      | t_66081 =>
                        ⇓(o_66082 : opr_11) ⇒
                          (match o_66082 in opr_11 -o proto with
                          | Free_15 => •
                          | Height_16 =>
                            ⇑(__66084 :
                              ((ssing_6‹U›) int ((height_33) t_66081))) ⇒
                              ((tree_p_66079) t_66081)
                          | Size_17 =>
                            ⇑(__66085 :
                              ((ssing_6‹U›) int ((size_34) t_66081))) ⇒
                              ((tree_p_66079) t_66081)
                          | (Lookup_18 k_66086) =>
                            ⇑(__66087 :
                              ((ssing_6‹U›)
                                bool_4 ((lookup_35) k_66086 t_66081))) ⇒
                              ((tree_p_66079) t_66081))))
                      Leaf_13))⟩)) -o
         IO base_3‹U›
     with
    | (ex1_12 m_66088 n_66089) =>
      (match m_66088, n_66089 in
         ∀ (o0_66090 : opr_11) -o
           ch⟨(match o0_66090 in opr_11 -o proto with
                | Free_15 => •
                | Height_16 =>
                  ⇑(__66093 : ((ssing_6‹U›) int 0)) ⇒
                    ((tree_p_36) Leaf_13)
                | Size_17 =>
                  ⇑(__66094 : ((ssing_6‹U›) int 0)) ⇒
                    ((tree_p_36) Leaf_13)
                | (Lookup_18 k_66095) =>
                  ⇑(__66096 : ((ssing_6‹U›) bool_4 false_5)) ⇒
                    ((tree_p_36) Leaf_13))⟩ -o
             IO base_3‹U›
       with
      | Free_15, __66097 => close __66097
      | Height_16, __66098 =>
        let* c_66099 := ((send __66098) (just_2‹U,U› int 0)) in
        ((leaf_worker_66048) c_66099)
      | Size_17, __66100 =>
        let* c_66101 := ((send __66100) (just_2‹U,U› int 0)) in
        ((leaf_worker_66048) c_66101)
      | (Lookup_18 k_66102), __66103 =>
        let* c_66104 := ((send __66103) (just_2‹U,U› bool_4 false_5)) in
        ((leaf_worker_66048) c_66104))))

#[program]
def node_worker_41‹› :
  ∀ (x_66105 : int) ->
    ∀ {l_66106 : tree_10} ->
      ∀ {r_66107 : tree_10} ->
        ((ctree_hc_38) l_66106) -o
          ((ctree_hc_38) r_66107) -o
            ((ctree_ch_37) (Node_14‹› x_66105 l_66106 r_66107)) -o
              IO unit_9
:=
  (fun node_worker_66111 :
    ∀ (x_66112 : int) ->
      ∀ {l_66113 : tree_10} ->
        ∀ {r_66114 : tree_10} ->
          ((ctree_hc_38) l_66113) -o
            ((ctree_hc_38) r_66114) -o
              ((ctree_ch_37) (Node_14‹› x_66112 l_66113 r_66114)) -o
                IO unit_9
  | x_66118, l_66119, r_66120, __66121, __66122, __66123 =>
    let* _66124 := recv __66123 in
    (match _66124 in
       (exists1_9‹U,L›
         opr_11
         (fun _66126 : opr_11 -> L
         | o_66128 =>
           ch⟨(match o_66128 in opr_11 -o proto with
                | Free_15 => •
                | Height_16 =>
                  ⇑(__66130 :
                    ((ssing_6‹U›)
                      int
                      ((height_33) (Node_14‹› x_66118 l_66119 r_66120)))) ⇒
                    (((fun tree_p_66131 : tree_10 -> proto
                      | t_66133 =>
                        ⇓(o_66134 : opr_11) ⇒
                          (match o_66134 in opr_11 -o proto with
                          | Free_15 => •
                          | Height_16 =>
                            ⇑(__66136 :
                              ((ssing_6‹U›) int ((height_33) t_66133))) ⇒
                              ((tree_p_66131) t_66133)
                          | Size_17 =>
                            ⇑(__66137 :
                              ((ssing_6‹U›) int ((size_34) t_66133))) ⇒
                              ((tree_p_66131) t_66133)
                          | (Lookup_18 k_66138) =>
                            ⇑(__66139 :
                              ((ssing_6‹U›)
                                bool_4 ((lookup_35) k_66138 t_66133))) ⇒
                              ((tree_p_66131) t_66133))))
                      (Node_14‹› x_66118 l_66119 r_66120))
                | Size_17 =>
                  ⇑(__66140 :
                    ((ssing_6‹U›)
                      int ((size_34) (Node_14‹› x_66118 l_66119 r_66120)))) ⇒
                    (((fun tree_p_66141 : tree_10 -> proto
                      | t_66143 =>
                        ⇓(o_66144 : opr_11) ⇒
                          (match o_66144 in opr_11 -o proto with
                          | Free_15 => •
                          | Height_16 =>
                            ⇑(__66146 :
                              ((ssing_6‹U›) int ((height_33) t_66143))) ⇒
                              ((tree_p_66141) t_66143)
                          | Size_17 =>
                            ⇑(__66147 :
                              ((ssing_6‹U›) int ((size_34) t_66143))) ⇒
                              ((tree_p_66141) t_66143)
                          | (Lookup_18 k_66148) =>
                            ⇑(__66149 :
                              ((ssing_6‹U›)
                                bool_4 ((lookup_35) k_66148 t_66143))) ⇒
                              ((tree_p_66141) t_66143))))
                      (Node_14‹› x_66118 l_66119 r_66120))
                | (Lookup_18 k_66150) =>
                  ⇑(__66151 :
                    ((ssing_6‹U›)
                      bool_4
                      ((lookup_35)
                        k_66150 (Node_14‹› x_66118 l_66119 r_66120)))) ⇒
                    (((fun tree_p_66152 : tree_10 -> proto
                      | t_66154 =>
                        ⇓(o_66155 : opr_11) ⇒
                          (match o_66155 in opr_11 -o proto with
                          | Free_15 => •
                          | Height_16 =>
                            ⇑(__66157 :
                              ((ssing_6‹U›) int ((height_33) t_66154))) ⇒
                              ((tree_p_66152) t_66154)
                          | Size_17 =>
                            ⇑(__66158 :
                              ((ssing_6‹U›) int ((size_34) t_66154))) ⇒
                              ((tree_p_66152) t_66154)
                          | (Lookup_18 k_66159) =>
                            ⇑(__66160 :
                              ((ssing_6‹U›)
                                bool_4 ((lookup_35) k_66159 t_66154))) ⇒
                              ((tree_p_66152) t_66154))))
                      (Node_14‹› x_66118 l_66119 r_66120)))⟩)) -o
         IO base_3‹U›
     with
    | (ex1_12 m_66161 n_66162) =>
      (match m_66161, n_66162 in
         ∀ (o0_66163 : opr_11) -o
           ch⟨(match o0_66163 in opr_11 -o proto with
                | Free_15 => •
                | Height_16 =>
                  ⇑(__66166 :
                    ((ssing_6‹U›)
                      int
                      ((height_33) (Node_14‹› x_66118 l_66119 r_66120)))) ⇒
                    ((tree_p_36) (Node_14‹› x_66118 l_66119 r_66120))
                | Size_17 =>
                  ⇑(__66167 :
                    ((ssing_6‹U›)
                      int ((size_34) (Node_14‹› x_66118 l_66119 r_66120)))) ⇒
                    ((tree_p_36) (Node_14‹› x_66118 l_66119 r_66120))
                | (Lookup_18 k_66168) =>
                  ⇑(__66169 :
                    ((ssing_6‹U›)
                      bool_4
                      ((lookup_35)
                        k_66168 (Node_14‹› x_66118 l_66119 r_66120)))) ⇒
                    ((tree_p_36) (Node_14‹› x_66118 l_66119 r_66120)))⟩ -o
             IO base_3‹U›
       with
      | Free_15, __66170 =>
        let* l_ch_66171 := ((send __66121) Free_15) in
        let* r_ch_66172 := ((send __66122) Free_15) in
        let* __66173 := close l_ch_66171 in
        let* __66174 := close r_ch_66172 in close __66170
      | Height_16, __66175 =>
        let* l_ch_66176 := ((send __66121) Height_16) in
        let* r_ch_66177 := ((send __66122) Height_16) in
        let* _66178 := recv l_ch_66176 in
        (match _66178 in
           (exists1_9‹U,L›
             ((ssing_6‹U›) int ((height_33) l_66119))
             (fun _66180 : ((ssing_6‹U›) int ((height_33) l_66119)) -> L
             | __66182 =>
               hc⟨(((fun tree_p_66183 : tree_10 -> proto
                      | t_66185 =>
                        ⇓(o_66186 : opr_11) ⇒
                          (match o_66186 in opr_11 -o proto with
                          | Free_15 => •
                          | Height_16 =>
                            ⇑(__66188 :
                              ((ssing_6‹U›) int ((height_33) t_66185))) ⇒
                              ((tree_p_66183) t_66185)
                          | Size_17 =>
                            ⇑(__66189 :
                              ((ssing_6‹U›) int ((size_34) t_66185))) ⇒
                              ((tree_p_66183) t_66185)
                          | (Lookup_18 k_66190) =>
                            ⇑(__66191 :
                              ((ssing_6‹U›)
                                bool_4 ((lookup_35) k_66190 t_66185))) ⇒
                              ((tree_p_66183) t_66185))))
                      l_66119)⟩)) -o
             IO unit_9
         with
        | (ex1_12 (just_2 m_66192) n_66193) =>
          let* _66194 := recv r_ch_66177 in
          (match _66194 in
             (exists1_9‹U,L›
               ((ssing_6‹U›) int ((height_33) r_66120))
               (fun _66196 :
                 ((ssing_6‹U›) int ((height_33) r_66120)) -> L
               | __66198 =>
                 hc⟨(((fun tree_p_66199 : tree_10 -> proto
                        | t_66201 =>
                          ⇓(o_66202 : opr_11) ⇒
                            (match o_66202 in opr_11 -o proto with
                            | Free_15 => •
                            | Height_16 =>
                              ⇑(__66204 :
                                ((ssing_6‹U›) int ((height_33) t_66201))) ⇒
                                ((tree_p_66199) t_66201)
                            | Size_17 =>
                              ⇑(__66205 :
                                ((ssing_6‹U›) int ((size_34) t_66201))) ⇒
                                ((tree_p_66199) t_66201)
                            | (Lookup_18 k_66206) =>
                              ⇑(__66207 :
                                ((ssing_6‹U›)
                                  bool_4 ((lookup_35) k_66206 t_66201))) ⇒
                                ((tree_p_66199) t_66201))))
                        r_66120)⟩)) -o
               IO unit_9
           with
          | (ex1_12 (just_2 m_66208) n_66209) =>
            (match (__lt__ m_66192 m_66208), __66175 in
               ∀ (b0_66210 : bool_4) -o
                 ch⟨⇑(__66212 :
                        ((ssing_6‹U›)
                          int
                          (match b0_66210 in bool_4 -o int with
                          | true_4 => (__add__ m_66208 1)
                          | false_5 => (__add__ m_66192 1)))) ⇒
                        ((tree_p_36) (Node_14‹› x_66118 l_66119 r_66120))⟩ -o
                   IO unit_9
             with
            | true_4, __66214 =>
              let* c_66215 :=
                ((send __66214) (just_2‹U,U› int (__add__ m_66208 1)))
              in
              ((node_worker_66111)
                x_66118 l_66119 r_66120 n_66193 n_66209 c_66215)
            | false_5, __66216 =>
              let* c_66217 :=
                ((send __66216) (just_2‹U,U› int (__add__ m_66192 1)))
              in
              ((node_worker_66111)
                x_66118 l_66119 r_66120 n_66193 n_66209 c_66217))))
      | Size_17, __66218 =>
        let* l_ch_66219 := ((send __66121) Size_17) in
        let* r_ch_66220 := ((send __66122) Size_17) in
        let* _66221 := recv l_ch_66219 in
        (match _66221 in
           (exists1_9‹U,L›
             ((ssing_6‹U›) int ((size_34) l_66119))
             (fun _66223 : ((ssing_6‹U›) int ((size_34) l_66119)) -> L
             | __66225 =>
               hc⟨(((fun tree_p_66226 : tree_10 -> proto
                      | t_66228 =>
                        ⇓(o_66229 : opr_11) ⇒
                          (match o_66229 in opr_11 -o proto with
                          | Free_15 => •
                          | Height_16 =>
                            ⇑(__66231 :
                              ((ssing_6‹U›) int ((height_33) t_66228))) ⇒
                              ((tree_p_66226) t_66228)
                          | Size_17 =>
                            ⇑(__66232 :
                              ((ssing_6‹U›) int ((size_34) t_66228))) ⇒
                              ((tree_p_66226) t_66228)
                          | (Lookup_18 k_66233) =>
                            ⇑(__66234 :
                              ((ssing_6‹U›)
                                bool_4 ((lookup_35) k_66233 t_66228))) ⇒
                              ((tree_p_66226) t_66228))))
                      l_66119)⟩)) -o
             IO unit_9
         with
        | (ex1_12 (just_2 m_66235) n_66236) =>
          let* _66237 := recv r_ch_66220 in
          (match _66237 in
             (exists1_9‹U,L›
               ((ssing_6‹U›) int ((size_34) r_66120))
               (fun _66239 : ((ssing_6‹U›) int ((size_34) r_66120)) -> L
               | __66241 =>
                 hc⟨(((fun tree_p_66242 : tree_10 -> proto
                        | t_66244 =>
                          ⇓(o_66245 : opr_11) ⇒
                            (match o_66245 in opr_11 -o proto with
                            | Free_15 => •
                            | Height_16 =>
                              ⇑(__66247 :
                                ((ssing_6‹U›) int ((height_33) t_66244))) ⇒
                                ((tree_p_66242) t_66244)
                            | Size_17 =>
                              ⇑(__66248 :
                                ((ssing_6‹U›) int ((size_34) t_66244))) ⇒
                                ((tree_p_66242) t_66244)
                            | (Lookup_18 k_66249) =>
                              ⇑(__66250 :
                                ((ssing_6‹U›)
                                  bool_4 ((lookup_35) k_66249 t_66244))) ⇒
                                ((tree_p_66242) t_66244))))
                        r_66120)⟩)) -o
               IO unit_9
           with
          | (ex1_12 (just_2 m_66251) n_66252) =>
            let* c_66253 :=
              ((send __66218)
                (just_2‹U,U› int (__add__ (__add__ 1 m_66235) m_66251)))
            in
            ((node_worker_66111)
              x_66118 l_66119 r_66120 n_66236 n_66252 c_66253)))
      | (Lookup_18 k_66254), __66255 =>
        (match (__eq__ x_66118 k_66254), __66255 in
           ∀ (b0_66256 : bool_4) -o
             ch⟨⇑(__66258 :
                    ((ssing_6‹U›)
                      bool_4
                      (match b0_66256 in bool_4 -o bool_4 with
                      | true_4 => true_4
                      | false_5 =>
                        ((or_13)
                          ((lookup_35) k_66254 l_66119)
                          ((lookup_35) k_66254 r_66120))))) ⇒
                    ((tree_p_36) (Node_14‹› x_66118 l_66119 r_66120))⟩ -o
               IO base_3‹U›
         with
        | true_4, __66260 =>
          let* c_66261 := ((send __66260) (just_2‹U,U› bool_4 true_4)) in
          ((node_worker_66111)
            x_66118 l_66119 r_66120 __66121 __66122 c_66261)
        | false_5, __66262 =>
          let* l_ch_66263 := ((send __66121) (Lookup_18‹› k_66254)) in
          let* r_ch_66264 := ((send __66122) (Lookup_18‹› k_66254)) in
          let* _66265 := recv l_ch_66263 in
          (match _66265 in
             (exists1_9‹U,L›
               ((ssing_6‹U›) bool_4 ((lookup_35) k_66254 l_66119))
               (fun _66267 :
                 ((ssing_6‹U›) bool_4 ((lookup_35) k_66254 l_66119)) -> L
               | __66269 =>
                 hc⟨(((fun tree_p_66270 : tree_10 -> proto
                        | t_66272 =>
                          ⇓(o_66273 : opr_11) ⇒
                            (match o_66273 in opr_11 -o proto with
                            | Free_15 => •
                            | Height_16 =>
                              ⇑(__66275 :
                                ((ssing_6‹U›) int ((height_33) t_66272))) ⇒
                                ((tree_p_66270) t_66272)
                            | Size_17 =>
                              ⇑(__66276 :
                                ((ssing_6‹U›) int ((size_34) t_66272))) ⇒
                                ((tree_p_66270) t_66272)
                            | (Lookup_18 k_66277) =>
                              ⇑(__66278 :
                                ((ssing_6‹U›)
                                  bool_4 ((lookup_35) k_66277 t_66272))) ⇒
                                ((tree_p_66270) t_66272))))
                        l_66119)⟩)) -o
               IO unit_9
           with
          | (ex1_12 (just_2 m_66279) n_66280) =>
            let* _66281 := recv r_ch_66264 in
            (match _66281 in
               (exists1_9‹U,L›
                 ((ssing_6‹U›) bool_4 ((lookup_35) k_66254 r_66120))
                 (fun _66283 :
                   ((ssing_6‹U›) bool_4 ((lookup_35) k_66254 r_66120)) ->
                     L
                 | __66285 =>
                   hc⟨(((fun tree_p_66286 : tree_10 -> proto
                          | t_66288 =>
                            ⇓(o_66289 : opr_11) ⇒
                              (match o_66289 in opr_11 -o proto with
                              | Free_15 => •
                              | Height_16 =>
                                ⇑(__66291 :
                                  ((ssing_6‹U›)
                                    int ((height_33) t_66288))) ⇒
                                  ((tree_p_66286) t_66288)
                              | Size_17 =>
                                ⇑(__66292 :
                                  ((ssing_6‹U›) int ((size_34) t_66288))) ⇒
                                  ((tree_p_66286) t_66288)
                              | (Lookup_18 k_66293) =>
                                ⇑(__66294 :
                                  ((ssing_6‹U›)
                                    bool_4 ((lookup_35) k_66293 t_66288))) ⇒
                                  ((tree_p_66286) t_66288))))
                          r_66120)⟩)) -o
                 IO unit_9
             with
            | (ex1_12 (just_2 m_66295) n_66296) =>
              let* c_66297 :=
                ((send __66262)
                  (just_2‹U,U› bool_4 ((or_13) m_66279 m_66295)))
              in
              ((node_worker_66111)
                x_66118 l_66119 r_66120 n_66280 n_66296 c_66297)))))))

#[program]
def cleaf_42‹› : unit_9 -> ((ctree_39) Leaf_13) :=
  (fun cleaf_66299 : unit_9 -> ((ctree_39) Leaf_13)
  | __66301 =>
    fork
      (fun _66302 : ((ctree_ch_37) Leaf_13) -o IO unit_9
      | _66304 => ((leaf_worker_40) _66304)))

#[program]
def cnode_43‹› :
  ∀ (x_66305 : int) ->
    ∀ {l_66306 : tree_10} ->
      ∀ {r_66307 : tree_10} ->
        ((ctree_39) l_66306) -o
          ((ctree_39) r_66307) -o
            ((ctree_39) (Node_14‹› x_66305 l_66306 r_66307))
:=
  (fun cnode_66310 :
    ∀ (x_66311 : int) ->
      ∀ {l_66312 : tree_10} ->
        ∀ {r_66313 : tree_10} ->
          ((ctree_39) l_66312) -o
            ((ctree_39) r_66313) -o
              ((ctree_39) (Node_14‹› x_66311 l_66312 r_66313))
  | x_66316, l_66317, r_66318, __66319, __66320 =>
    let* l_ch_66321 := __66319 in
    let* r_ch_66322 := __66320 in
    fork
      (fun _66323 :
        ((ctree_ch_37) (Node_14‹› x_66316 l_66317 r_66318)) -o IO unit_9
      | _66325 =>
        ((node_worker_41)
          x_66316 l_66317 r_66318 l_ch_66321 r_ch_66322 _66325)))

#[program]
def cfree_44‹› :
  ∀ {t_66326 : tree_10} -> ((ctree_39) t_66326) -> IO unit_9
:=
  (fun cfree_66328 :
    ∀ {t_66329 : tree_10} -> ((ctree_39) t_66329) -> IO unit_9
  | t_66331, ct_66332 =>
    let* c_66333 := ct_66332 in
    let* c_66334 := ((send c_66333) Free_15) in close c_66334)

#[program]
def cheight_45‹› :
  ∀ {t_66335 : tree_10} ->
    ((ctree_39) t_66335) ->
      IO ((tensor_25‹U,L›)
           ((ssing_6‹U›) int ((height_33) t_66335)) ((ctree_39) t_66335))
:=
  (fun cheight_66337 :
    ∀ {t_66338 : tree_10} ->
      ((ctree_39) t_66338) ->
        IO ((tensor_25‹U,L›)
             ((ssing_6‹U›) int ((height_33) t_66338))
             ((ctree_39) t_66338))
  | t_66340, ct_66341 =>
    let* c_66342 := ct_66341 in
    let* c_66343 := ((send c_66342) Height_16) in
    let* _66344 := recv c_66343 in
    (match _66344 in
       (exists1_9‹U,L›
         ((ssing_6‹U›) int ((height_33) t_66340))
         (fun _66346 : ((ssing_6‹U›) int ((height_33) t_66340)) -> L
         | __66348 =>
           hc⟨(((fun tree_p_66349 : tree_10 -> proto
                  | t_66351 =>
                    ⇓(o_66352 : opr_11) ⇒
                      (match o_66352 in opr_11 -o proto with
                      | Free_15 => •
                      | Height_16 =>
                        ⇑(__66354 :
                          ((ssing_6‹U›) int ((height_33) t_66351))) ⇒
                          ((tree_p_66349) t_66351)
                      | Size_17 =>
                        ⇑(__66355 :
                          ((ssing_6‹U›) int ((size_34) t_66351))) ⇒
                          ((tree_p_66349) t_66351)
                      | (Lookup_18 k_66356) =>
                        ⇑(__66357 :
                          ((ssing_6‹U›)
                            bool_4 ((lookup_35) k_66356 t_66351))) ⇒
                          ((tree_p_66349) t_66351))))
                  t_66340)⟩)) -o
         IO (exists1_9‹U,L›
              ((ssing_6‹U›) int ((height_33) t_66340))
              (fun _66358 : ((ssing_6‹U›) int ((height_33) t_66340)) -> L
              | __66360 => ((ctree_39) t_66340)))
     with
    | (ex1_12 m_66361 n_66362) =>
      return (ex1_12‹U,L›
               ((ssing_6‹U›) int ((height_33) t_66340))
               (fun _66363 :
                 ((ssing_6‹U›) int ((height_33) t_66340)) -> L
               | __66365 => ((ctree_39) t_66340)) m_66361 return n_66362)))

#[program]
def csize_46‹› :
  ∀ {t_66366 : tree_10} ->
    ((ctree_39) t_66366) ->
      IO ((tensor_25‹U,L›)
           ((ssing_6‹U›) int ((size_34) t_66366)) ((ctree_39) t_66366))
:=
  (fun csize_66368 :
    ∀ {t_66369 : tree_10} ->
      ((ctree_39) t_66369) ->
        IO ((tensor_25‹U,L›)
             ((ssing_6‹U›) int ((size_34) t_66369)) ((ctree_39) t_66369))
  | t_66371, ct_66372 =>
    let* c_66373 := ct_66372 in
    let* c_66374 := ((send c_66373) Size_17) in
    let* _66375 := recv c_66374 in
    (match _66375 in
       (exists1_9‹U,L›
         ((ssing_6‹U›) int ((size_34) t_66371))
         (fun _66377 : ((ssing_6‹U›) int ((size_34) t_66371)) -> L
         | __66379 =>
           hc⟨(((fun tree_p_66380 : tree_10 -> proto
                  | t_66382 =>
                    ⇓(o_66383 : opr_11) ⇒
                      (match o_66383 in opr_11 -o proto with
                      | Free_15 => •
                      | Height_16 =>
                        ⇑(__66385 :
                          ((ssing_6‹U›) int ((height_33) t_66382))) ⇒
                          ((tree_p_66380) t_66382)
                      | Size_17 =>
                        ⇑(__66386 :
                          ((ssing_6‹U›) int ((size_34) t_66382))) ⇒
                          ((tree_p_66380) t_66382)
                      | (Lookup_18 k_66387) =>
                        ⇑(__66388 :
                          ((ssing_6‹U›)
                            bool_4 ((lookup_35) k_66387 t_66382))) ⇒
                          ((tree_p_66380) t_66382))))
                  t_66371)⟩)) -o
         IO (exists1_9‹U,L›
              ((ssing_6‹U›) int ((size_34) t_66371))
              (fun _66389 : ((ssing_6‹U›) int ((size_34) t_66371)) -> L
              | __66391 => ((ctree_39) t_66371)))
     with
    | (ex1_12 m_66392 n_66393) =>
      return (ex1_12‹U,L›
               ((ssing_6‹U›) int ((size_34) t_66371))
               (fun _66394 : ((ssing_6‹U›) int ((size_34) t_66371)) -> L
               | __66396 => ((ctree_39) t_66371)) m_66392 return n_66393)))

#[program]
def clookup_47‹› :
  ∀ (k_66397 : int) ->
    ∀ {t_66398 : tree_10} ->
      ((ctree_39) t_66398) ->
        IO ((tensor_25‹U,L›)
             ((ssing_6‹U›) bool_4 ((lookup_35) k_66397 t_66398))
             ((ctree_39) t_66398))
:=
  (fun clookup_66400 :
    ∀ (k_66401 : int) ->
      ∀ {t_66402 : tree_10} ->
        ((ctree_39) t_66402) ->
          IO ((tensor_25‹U,L›)
               ((ssing_6‹U›) bool_4 ((lookup_35) k_66401 t_66402))
               ((ctree_39) t_66402))
  | k_66404, t_66405, ct_66406 =>
    let* c_66407 := ct_66406 in
    let* c_66408 := ((send c_66407) (Lookup_18‹› k_66404)) in
    let* _66409 := recv c_66408 in
    (match _66409 in
       (exists1_9‹U,L›
         ((ssing_6‹U›) bool_4 ((lookup_35) k_66404 t_66405))
         (fun _66411 :
           ((ssing_6‹U›) bool_4 ((lookup_35) k_66404 t_66405)) -> L
         | __66413 =>
           hc⟨(((fun tree_p_66414 : tree_10 -> proto
                  | t_66416 =>
                    ⇓(o_66417 : opr_11) ⇒
                      (match o_66417 in opr_11 -o proto with
                      | Free_15 => •
                      | Height_16 =>
                        ⇑(__66419 :
                          ((ssing_6‹U›) int ((height_33) t_66416))) ⇒
                          ((tree_p_66414) t_66416)
                      | Size_17 =>
                        ⇑(__66420 :
                          ((ssing_6‹U›) int ((size_34) t_66416))) ⇒
                          ((tree_p_66414) t_66416)
                      | (Lookup_18 k_66421) =>
                        ⇑(__66422 :
                          ((ssing_6‹U›)
                            bool_4 ((lookup_35) k_66421 t_66416))) ⇒
                          ((tree_p_66414) t_66416))))
                  t_66405)⟩)) -o
         IO (exists1_9‹U,L›
              ((ssing_6‹U›) bool_4 ((lookup_35) k_66404 t_66405))
              (fun _66423 :
                ((ssing_6‹U›) bool_4 ((lookup_35) k_66404 t_66405)) -> L
              | __66425 => ((ctree_39) t_66405)))
     with
    | (ex1_12 m_66426 n_66427) =>
      return (ex1_12‹U,L›
               ((ssing_6‹U›) bool_4 ((lookup_35) k_66404 t_66405))
               (fun _66428 :
                 ((ssing_6‹U›) bool_4 ((lookup_35) k_66404 t_66405)) -> L
               | __66430 => ((ctree_39) t_66405)) m_66426 return n_66427)))

#[program]
def mytree1_48‹› :
  ∀ (x_66431 : int) -> ((ctree_39) (Node_14‹› x_66431 Leaf_13 Leaf_13))
:=
  (fun mytree1_66432 :
    ∀ (x_66433 : int) ->
      ((ctree_39) (Node_14‹› x_66433 Leaf_13 Leaf_13))
  | x_66434 =>
    ((cnode_43)
      x_66434 Leaf_13 Leaf_13 ((cleaf_42) tt_3‹U›)
      ((cleaf_42) tt_3‹U›)))

#[program]
def mytree2_49‹› :
  ∀ (x_66435 : int) ->
    ((ctree_39)
      (Node_14‹›
        x_66435 (Node_14‹› 1 Leaf_13 Leaf_13)
        (Node_14‹› 2 Leaf_13 Leaf_13)))
:=
  (fun mytree2_66436 :
    ∀ (x_66437 : int) ->
      ((ctree_39)
        (Node_14‹›
          x_66437 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13)))
  | x_66438 =>
    ((cnode_43)
      x_66438 (Node_14‹› 1 Leaf_13 Leaf_13)
      (Node_14‹› 2 Leaf_13 Leaf_13) ((mytree1_48) 1) ((mytree1_48) 2)))

#[program]
def mytree3_50‹› :
  ∀ (x_66439 : int) ->
    ((ctree_39)
      (Node_14‹›
        x_66439
        (Node_14‹›
          3 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13))
        (Node_14‹›
          4 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13))))
:=
  (fun mytree3_66440 :
    ∀ (x_66441 : int) ->
      ((ctree_39)
        (Node_14‹›
          x_66441
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))))
  | x_66442 =>
    ((cnode_43)
      x_66442
      (Node_14‹›
        3 (Node_14‹› 1 Leaf_13 Leaf_13) (Node_14‹› 2 Leaf_13 Leaf_13))
      (Node_14‹›
        4 (Node_14‹› 1 Leaf_13 Leaf_13) (Node_14‹› 2 Leaf_13 Leaf_13))
      ((mytree2_49) 3) ((mytree2_49) 4)))

#[program]
def mytree4_51‹› :
  ∀ (x_66443 : int) ->
    ((ctree_39)
      (Node_14‹›
        x_66443
        (Node_14‹›
          8
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13)))
        (Node_14‹›
          7
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13)))))
:=
  (fun mytree4_66444 :
    ∀ (x_66445 : int) ->
      ((ctree_39)
        (Node_14‹›
          x_66445
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))))
  | x_66446 =>
    ((cnode_43)
      x_66446
      (Node_14‹›
        8
        (Node_14‹›
          3 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13))
        (Node_14‹›
          4 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13)))
      (Node_14‹›
        7
        (Node_14‹›
          3 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13))
        (Node_14‹›
          4 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13)))
      ((mytree3_50) 8) ((mytree3_50) 7)))

#[program]
def mytree5_52‹› :
  ∀ (x_66447 : int) ->
    ((ctree_39)
      (Node_14‹›
        x_66447
        (Node_14‹›
          9
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))))
        (Node_14‹›
          10
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))))))
:=
  (fun mytree5_66448 :
    ∀ (x_66449 : int) ->
      ((ctree_39)
        (Node_14‹›
          x_66449
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))))
  | x_66450 =>
    ((cnode_43)
      x_66450
      (Node_14‹›
        9
        (Node_14‹›
          8
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13)))
        (Node_14‹›
          7
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))))
      (Node_14‹›
        10
        (Node_14‹›
          8
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13)))
        (Node_14‹›
          7
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))))
      ((mytree4_51) 9) ((mytree4_51) 10)))

#[program]
def mytree6_53‹› :
  ∀ (x_66451 : int) ->
    ((ctree_39)
      (Node_14‹›
        x_66451
        (Node_14‹›
          11
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))))
        (Node_14‹›
          12
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))))))
:=
  (fun mytree6_66452 :
    ∀ (x_66453 : int) ->
      ((ctree_39)
        (Node_14‹›
          x_66453
          (Node_14‹›
            11
            (Node_14‹›
              9
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))))
            (Node_14‹›
              10
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))))
          (Node_14‹›
            12
            (Node_14‹›
              9
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))))
            (Node_14‹›
              10
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))))))
  | x_66454 =>
    ((cnode_43)
      x_66454
      (Node_14‹›
        11
        (Node_14‹›
          9
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))))
        (Node_14‹›
          10
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))))
      (Node_14‹›
        12
        (Node_14‹›
          9
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))))
        (Node_14‹›
          10
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))))
      ((mytree5_52) 11) ((mytree5_52) 12)))

#[program]
def main_54‹› : IO unit_9 :=
  let ct_66455 := ((mytree6_53) 100) in
  let* _66456 :=
    ((cheight_45)
      (Node_14‹›
        100
        (Node_14‹›
          11
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))))
        (Node_14‹›
          12
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))))
      ct_66455)
  in
  (match _66456 in
     ((tensor_25‹U,L›)
       ((ssing_6‹U›)
         int
         ((height_33)
           (Node_14‹›
             100
             (Node_14‹›
               11
               (Node_14‹›
                 9
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))))
               (Node_14‹›
                 10
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))))
             (Node_14‹›
               12
               (Node_14‹›
                 9
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))))
               (Node_14‹›
                 10
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))))))))
       ((ctree_39)
         (Node_14‹›
           100
           (Node_14‹›
             11
             (Node_14‹›
               9
               (Node_14‹›
                 8
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))
               (Node_14‹›
                 7
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))))
             (Node_14‹›
               10
               (Node_14‹›
                 8
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))
               (Node_14‹›
                 7
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))))
           (Node_14‹›
             12
             (Node_14‹›
               9
               (Node_14‹›
                 8
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))
               (Node_14‹›
                 7
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))))
             (Node_14‹›
               10
               (Node_14‹›
                 8
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))
               (Node_14‹›
                 7
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))))))) -o
       IO base_3‹U›
   with
  | (ex1_12 (just_2 m_66458) n_66459) =>
    let* _66460 :=
      ((csize_46)
        (Node_14‹›
          100
          (Node_14‹›
            11
            (Node_14‹›
              9
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))))
            (Node_14‹›
              10
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))))
          (Node_14‹›
            12
            (Node_14‹›
              9
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))))
            (Node_14‹›
              10
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))))))
        n_66459)
    in
    (match _66460 in
       ((tensor_25‹U,L›)
         ((ssing_6‹U›)
           int
           ((size_34)
             (Node_14‹›
               100
               (Node_14‹›
                 11
                 (Node_14‹›
                   9
                   (Node_14‹›
                     8
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13)))
                   (Node_14‹›
                     7
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))))
                 (Node_14‹›
                   10
                   (Node_14‹›
                     8
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13)))
                   (Node_14‹›
                     7
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13)))))
               (Node_14‹›
                 12
                 (Node_14‹›
                   9
                   (Node_14‹›
                     8
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13)))
                   (Node_14‹›
                     7
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))))
                 (Node_14‹›
                   10
                   (Node_14‹›
                     8
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13)))
                   (Node_14‹›
                     7
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))))))))
         ((ctree_39)
           (Node_14‹›
             100
             (Node_14‹›
               11
               (Node_14‹›
                 9
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))))
               (Node_14‹›
                 10
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))))
             (Node_14‹›
               12
               (Node_14‹›
                 9
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))))
               (Node_14‹›
                 10
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))))))) -o
         IO base_3‹U›
     with
    | (ex1_12 (just_2 m_66462) n_66463) =>
      let* _66464 :=
        ((clookup_47)
          1
          (Node_14‹›
            100
            (Node_14‹›
              11
              (Node_14‹›
                9
                (Node_14‹›
                  8
                  (Node_14‹›
                    3 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13))
                  (Node_14‹›
                    4 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13)))
                (Node_14‹›
                  7
                  (Node_14‹›
                    3 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13))
                  (Node_14‹›
                    4 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13))))
              (Node_14‹›
                10
                (Node_14‹›
                  8
                  (Node_14‹›
                    3 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13))
                  (Node_14‹›
                    4 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13)))
                (Node_14‹›
                  7
                  (Node_14‹›
                    3 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13))
                  (Node_14‹›
                    4 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13)))))
            (Node_14‹›
              12
              (Node_14‹›
                9
                (Node_14‹›
                  8
                  (Node_14‹›
                    3 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13))
                  (Node_14‹›
                    4 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13)))
                (Node_14‹›
                  7
                  (Node_14‹›
                    3 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13))
                  (Node_14‹›
                    4 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13))))
              (Node_14‹›
                10
                (Node_14‹›
                  8
                  (Node_14‹›
                    3 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13))
                  (Node_14‹›
                    4 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13)))
                (Node_14‹›
                  7
                  (Node_14‹›
                    3 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13))
                  (Node_14‹›
                    4 (Node_14‹› 1 Leaf_13 Leaf_13)
                    (Node_14‹› 2 Leaf_13 Leaf_13))))))
          n_66463)
      in
      (match _66464 in
         ((tensor_25‹U,L›)
           ((ssing_6‹U›)
             bool_4
             ((lookup_35)
               1
               (Node_14‹›
                 100
                 (Node_14‹›
                   11
                   (Node_14‹›
                     9
                     (Node_14‹›
                       8
                       (Node_14‹›
                         3 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13))
                       (Node_14‹›
                         4 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13)))
                     (Node_14‹›
                       7
                       (Node_14‹›
                         3 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13))
                       (Node_14‹›
                         4 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13))))
                   (Node_14‹›
                     10
                     (Node_14‹›
                       8
                       (Node_14‹›
                         3 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13))
                       (Node_14‹›
                         4 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13)))
                     (Node_14‹›
                       7
                       (Node_14‹›
                         3 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13))
                       (Node_14‹›
                         4 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13)))))
                 (Node_14‹›
                   12
                   (Node_14‹›
                     9
                     (Node_14‹›
                       8
                       (Node_14‹›
                         3 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13))
                       (Node_14‹›
                         4 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13)))
                     (Node_14‹›
                       7
                       (Node_14‹›
                         3 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13))
                       (Node_14‹›
                         4 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13))))
                   (Node_14‹›
                     10
                     (Node_14‹›
                       8
                       (Node_14‹›
                         3 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13))
                       (Node_14‹›
                         4 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13)))
                     (Node_14‹›
                       7
                       (Node_14‹›
                         3 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13))
                       (Node_14‹›
                         4 (Node_14‹› 1 Leaf_13 Leaf_13)
                         (Node_14‹› 2 Leaf_13 Leaf_13))))))))
           ((ctree_39)
             (Node_14‹›
               100
               (Node_14‹›
                 11
                 (Node_14‹›
                   9
                   (Node_14‹›
                     8
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13)))
                   (Node_14‹›
                     7
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))))
                 (Node_14‹›
                   10
                   (Node_14‹›
                     8
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13)))
                   (Node_14‹›
                     7
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13)))))
               (Node_14‹›
                 12
                 (Node_14‹›
                   9
                   (Node_14‹›
                     8
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13)))
                   (Node_14‹›
                     7
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))))
                 (Node_14‹›
                   10
                   (Node_14‹›
                     8
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13)))
                   (Node_14‹›
                     7
                     (Node_14‹›
                       3 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13))
                     (Node_14‹›
                       4 (Node_14‹› 1 Leaf_13 Leaf_13)
                       (Node_14‹› 2 Leaf_13 Leaf_13)))))))) -o
           IO base_3‹U›
       with
      | (ex1_12 (just_2 m_66466) n_66467) =>
        let* _66468 :=
          ((cfree_44)
            (Node_14‹›
              100
              (Node_14‹›
                11
                (Node_14‹›
                  9
                  (Node_14‹›
                    8
                    (Node_14‹›
                      3 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13))
                    (Node_14‹›
                      4 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13)))
                  (Node_14‹›
                    7
                    (Node_14‹›
                      3 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13))
                    (Node_14‹›
                      4 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13))))
                (Node_14‹›
                  10
                  (Node_14‹›
                    8
                    (Node_14‹›
                      3 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13))
                    (Node_14‹›
                      4 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13)))
                  (Node_14‹›
                    7
                    (Node_14‹›
                      3 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13))
                    (Node_14‹›
                      4 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13)))))
              (Node_14‹›
                12
                (Node_14‹›
                  9
                  (Node_14‹›
                    8
                    (Node_14‹›
                      3 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13))
                    (Node_14‹›
                      4 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13)))
                  (Node_14‹›
                    7
                    (Node_14‹›
                      3 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13))
                    (Node_14‹›
                      4 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13))))
                (Node_14‹›
                  10
                  (Node_14‹›
                    8
                    (Node_14‹›
                      3 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13))
                    (Node_14‹›
                      4 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13)))
                  (Node_14‹›
                    7
                    (Node_14‹›
                      3 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13))
                    (Node_14‹›
                      4 (Node_14‹› 1 Leaf_13 Leaf_13)
                      (Node_14‹› 2 Leaf_13 Leaf_13))))))
            n_66467)
        in
        (match _66468 in unit_9 -o IO base_3‹U› with
        | tt_3 =>
          print
            (__cat__
              (__cat__
                (__cat__
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__ "height := " ((string_of_int_32) m_66458))
                          "\n")
                        "size   := ")
                      ((string_of_int_32) m_66462))
                    "\n")
                  "lookup := ")
                ((string_of_bool_15) m_66466))
              "\n")))))

[trans1e success]

-----------------------------------------

#[program]
def idU_56 := fun id_254906 (A_254907) -> (m_254908) ->
                m_254908

#[program]
def idL_55 := fun id_254909 (A_254910) -> (m_254911) ->
                m_254911

#[logical]
inductive eqU_13 where
| reflU_20 of layout[]

#[logical]
inductive eqL_12 where
| reflL_19 of layout[]

#[program]
def rwlUU_60 :=
  fun rwl_254912 {A_254913} -> {m_254914} -> {n_254915} -> {B_254916} ->
  {__254917} -> (__254918) ->
    (match {NULL} with
    | reflU_20  => __254918)

#[program]
def rwlUL_59 :=
  fun rwl_254919 {A_254920} -> {m_254921} -> {n_254922} -> {B_254923} ->
  {__254924} -> (__254925) ->
    (match {NULL} with
    | reflU_20  => __254925)

#[program]
def rwlLU_58 :=
  fun rwl_254926 {A_254927} -> {m_254928} -> {n_254929} -> {B_254930} ->
  {__254931} -> (__254932) ->
    (match {NULL} with
    | reflL_19  => __254932)

#[program]
def rwlLL_57 :=
  fun rwl_254933 {A_254934} -> {m_254935} -> {n_254936} -> {B_254937} ->
  {__254938} -> (__254939) ->
    (match {NULL} with
    | reflL_19  => __254939)

#[program]
def rwrUU_64 :=
  fun rwr_254940 {A_254941} -> {m_254942} -> {n_254943} -> {B_254944} ->
  {__254945} -> (__254946) ->
    (match {NULL} with
    | reflU_20  => __254946)

#[program]
def rwrUL_63 :=
  fun rwr_254947 {A_254948} -> {m_254949} -> {n_254950} -> {B_254951} ->
  {__254952} -> (__254953) ->
    (match {NULL} with
    | reflU_20  => __254953)

#[program]
def rwrLU_62 :=
  fun rwr_254954 {A_254955} -> {m_254956} -> {n_254957} -> {B_254958} ->
  {__254959} -> (__254960) ->
    (match {NULL} with
    | reflL_19  => __254960)

#[program]
def rwrLL_61 :=
  fun rwr_254961 {A_254962} -> {m_254963} -> {n_254964} -> {B_254965} ->
  {__254966} -> (__254967) ->
    (match {NULL} with
    | reflL_19  => __254967)

#[logical]
def congrUUU_72 := NULL

#[logical]
def congrUUL_71 := NULL

#[logical]
def congrULU_70 := NULL

#[logical]
def congrULL_69 := NULL

#[logical]
def congrLUU_68 := NULL

#[logical]
def congrLUL_67 := NULL

#[logical]
def congrLLU_66 := NULL

#[logical]
def congrLLL_65 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_17 where
| justUU_24 of layout[R]

#[program]
inductive singUL_16 where
| justUL_23 of layout[R]

#[program]
inductive singLU_15 where


#[program]
inductive singLL_14 where
| justLL_21 of layout[R]

#[logical]
def ssingU_74 := NULL

#[logical]
def ssingL_73 := NULL

#[program]
def sing_elimUU_78 :=
  fun sing_elim_254968 {A_254969} -> {x_254970} -> (__254971) ->
    (match __254971 with
    | justUU_24 m_254972 => m_254972)

#[program]
def sing_elimUL_77 :=
  fun sing_elim_254973 {A_254974} -> {x_254975} -> (__254976) ->
    (match __254976 with
    | justUL_23 m_254977 => m_254977)

#[program]
def sing_elimLU_76 :=
  fun sing_elim_254978 {A_254979} -> {x_254980} -> (__254981) ->
    (match __254981 with
    )

#[program]
def sing_elimLL_75 :=
  fun sing_elim_254982 {A_254983} -> {x_254984} -> (__254985) ->
    (match __254985 with
    | justLL_21 m_254986 => m_254986)

#[logical]
def sing_uniqUU_82 := NULL

#[logical]
def sing_uniqUL_81 := NULL

#[logical]
def sing_uniqLU_80 := NULL

#[logical]
def sing_uniqLL_79 := NULL

#[program]
inductive baseU_19 where
| ttU_26 of layout[]

#[program]
inductive baseL_18 where
| ttL_25 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_254987 (__254988) ->
    (match __254988 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_254989 (__254990) -> (__254991) ->
    (match __254990 with
    | true_4  =>
      (match __254991 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_254992 (__254993) -> (__254994) ->
    (match __254993 with
    | true_4  => true_4
    | false_5  =>
      (match __254994 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_254995 (__254996) -> (__254997) ->
    (match __254996 with
    | true_4  =>
      (match __254997 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __254997 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def string_of_bool_15 :=
  fun string_of_bool_254998 (__254999) ->
    (match __254999 with
    | true_4  => "true" | false_5  => "false")

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_16 :=
  fun lte_255000 (__255001) -> (__255002) ->
    (match __255001 with
    | zero_6  => true_4
    | succ_7 n_255003 =>
      (match __255002 with
      | zero_6  => false_5
      | succ_7 n_255004 => ((lte_255000) n_255003 n_255004)))

#[program]
def lt_17 :=
  fun lt_255005 (x_255006) -> (y_255007) ->
    ((lte_16) (succ_7 x_255006) y_255007)

#[program]
def pred_18 :=
  fun pred_255008 (__255009) ->
    (match __255009 with
    | zero_6  => zero_6 | succ_7 n_255010 => n_255010)

#[program]
def add_19 :=
  fun add_255011 (__255012) -> (__255013) ->
    (match __255012 with
    | zero_6  => __255013
    | succ_7 n_255014 => (succ_7 ((add_255011) n_255014 __255013)))

#[program]
def sub_20 :=
  fun sub_255015 (__255016) -> (__255017) ->
    (match __255017 with
    | zero_6  => __255016
    | succ_7 n_255018 => ((sub_255015) ((pred_18) __255016) n_255018))

#[program]
def mul_21 :=
  fun mul_255019 (__255020) -> (__255021) ->
    (match __255020 with
    | zero_6  => zero_6
    | succ_7 n_255022 => ((add_19) __255021 ((mul_255019) n_255022 __255021)))

#[program]
def div_22 :=
  fun div_255023 (x_255024) -> (y_255025) ->
    (match ((lt_17) x_255024 y_255025) with
    | true_4  => zero_6
    | false_5  =>
      let loop_255026 :=
        fun loop_255027 (x_255028) -> (y_255029) ->
          (match ((sub_20) x_255028 ((pred_18) y_255029)) with
          | zero_6  => zero_6
          | succ_7 n_255030 => (succ_7 ((loop_255027) n_255030 y_255029)))
      in ((loop_255026) x_255024 y_255025))

#[program]
def rem_23 :=
  fun rem_255031 (x_255032) -> (y_255033) ->
    ((sub_20) x_255032 ((mul_21) ((div_22) x_255032 y_255033) y_255033))

#[program]
inductive listUU_23 where
| nilUU_33 of layout[]
| consUU_34 of layout[R, R]

#[program]
inductive listUL_22 where
| nilUL_31 of layout[]
| consUL_32 of layout[R, R]

#[program]
inductive listLU_21 where
| nilLU_29 of layout[]

#[program]
inductive listLL_20 where
| nilLL_27 of layout[]
| consLL_28 of layout[R, R]

#[program]
def free_listUU_86 :=
  fun free_list_255034 {A_255035} -> (f_255036) -> (__255037) ->
    (match __255037 with
    | nilUU_33  => ttU_26
    | consUU_34 hd_255038 tl_255039 =>
      let __255040 := ((f_255036) hd_255038) in
      ((free_list_255034) NULL f_255036 tl_255039))

#[program]
def free_listUL_85 :=
  fun free_list_255041 {A_255042} -> (f_255043) -> (__255044) ->
    (match __255044 with
    | nilUL_31  => ttU_26
    | consUL_32 hd_255045 tl_255046 =>
      let __255047 := ((f_255043) hd_255045) in
      ((free_list_255041) NULL f_255043 tl_255046))

#[program]
def free_listLL_83 :=
  fun free_list_255048 {A_255049} -> (f_255050) -> (__255051) ->
    (match __255051 with
    | nilLL_27  => ttU_26
    | consLL_28 hd_255052 tl_255053 =>
      let __255054 := ((f_255050) hd_255052) in
      ((free_list_255048) NULL f_255050 tl_255053))

#[program]
inductive existsUU_27 where
| exUU_38 of layout[R, N]

#[program]
inductive existsUL_26 where
| exUL_37 of layout[R, N]

#[program]
inductive existsLU_25 where
| exLU_36 of layout[R, N]

#[program]
inductive existsLL_24 where
| exLL_35 of layout[R, N]

#[program]
inductive exists0UU_31 where
| ex0UU_42 of layout[N, R]

#[program]
inductive exists0UL_30 where
| ex0UL_41 of layout[N, R]

#[program]
inductive exists0LU_29 where
| ex0LU_40 of layout[N, R]

#[program]
inductive exists0LL_28 where
| ex0LL_39 of layout[N, R]

#[program]
inductive exists1UU_35 where
| ex1UU_46 of layout[R, R]

#[program]
inductive exists1UL_34 where
| ex1UL_45 of layout[R, R]

#[program]
inductive exists1LU_33 where
| ex1LU_44 of layout[R, R]

#[program]
inductive exists1LL_32 where
| ex1LL_43 of layout[R, R]

#[logical]
def tensorUU_90 := NULL

#[logical]
def tensorUL_89 := NULL

#[logical]
def tensorLU_88 := NULL

#[logical]
def tensorLL_87 := NULL

#[program]
def pow_26 :=
  fun pow_255055 (x_255056) -> (y_255057) ->
    let loop_255058 :=
      fun loop_255059 (acc_255060) -> (y_255061) ->
        (match (__lte__ y_255061 0) with
        | true_4  => acc_255060
        | false_5  =>
          ((loop_255059) (__mul__ x_255056 acc_255060) (__sub__ y_255061 1)))
    in ((loop_255058) 1 y_255057)

#[program]
def powm_27 :=
  fun powm_255062 (x_255063) -> (y_255064) -> (m_255065) ->
    let loop_255066 :=
      fun loop_255067 (acc_255068) -> (y_255069) ->
        (match (__lte__ y_255069 0) with
        | true_4  => acc_255068
        | false_5  =>
          ((loop_255067)
            (__mod__ (__mul__ x_255063 acc_255068) m_255065)
            (__sub__ y_255069 1)))
    in ((loop_255066) 1 y_255064)

#[program]
def ord_28 := fun ord_255070 (c_255071) ->
                (__ord__ c_255071)

#[program]
def chr_29 := fun chr_255072 (i_255073) ->
                (__chr__ i_255073)

#[program]
def str_30 := fun str_255074 (c_255075) ->
                (__push__ "" c_255075)

#[program]
def strlen_31 := fun strlen_255076 (s_255077) ->
                   (__size__ s_255077)

#[program]
def string_of_int_32 :=
  fun string_of_int_255078 (i_255079) ->
    let aux_255080 :=
      fun aux_255081 (i_255082) ->
        (match (__lte__ 10 i_255082) with
        | true_4  =>
          let r_255083 := (__mod__ i_255082 10) in
          let i_255084 := (__div__ i_255082 10) in
          (__push__ ((aux_255081) i_255084)
            ((chr_29) (__add__ r_255083 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_255082 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_255079) with
    | true_4  => ((aux_255080) i_255079)
    | false_5  => (__cat__ "~" ((aux_255080) (__neg__ i_255079))))

#[program]
inductive tree_10 where
| Leaf_13 of layout[]
| Node_14 of layout[R, R, R]

#[program]
inductive opr_11 where
| Free_15 of layout[]
| Height_16 of layout[]
| Size_17 of layout[]
| Lookup_18 of layout[R]

#[program]
def height_33 :=
  fun height_255085 (__255086) ->
    (match __255086 with
    | Leaf_13  => 0
    | Node_14 __255087 l_255088 r_255089 =>
      let x_255090 := ((height_255085) l_255088) in
      let y_255091 := ((height_255085) r_255089) in
      (match (__lt__ x_255090 y_255091) with
      | true_4  => (__add__ y_255091 1) | false_5  => (__add__ x_255090 1)))

#[program]
def size_34 :=
  fun size_255092 (__255093) ->
    (match __255093 with
    | Leaf_13  => 0
    | Node_14 __255094 l_255095 r_255096 =>
      (__add__ (__add__ 1 ((size_255092) l_255095)) ((size_255092) r_255096)))

#[program]
def lookup_35 :=
  fun lookup_255097 (n_255098) -> (__255099) ->
    (match __255099 with
    | Leaf_13  => false_5
    | Node_14 __255100 l_255101 r_255102 =>
      (match (__eq__ __255100 n_255098) with
      | true_4  => true_4
      | false_5  =>
        ((or_13)
          ((lookup_255097) n_255098 l_255101)
          ((lookup_255097) n_255098 r_255102))))

#[logical]
def tree_p_36 := NULL

#[logical]
def ctree_ch_37 := NULL

#[logical]
def ctree_hc_38 := NULL

#[logical]
def ctree_39 := NULL

#[program]
def leaf_worker_40 :=
  fun leaf_worker_255103 (c_255104) ->
    let* _255105 := recv[R,U] c_255104 in
    (match _255105 with
    | ex1UL_45 m_255106 n_255107 =>
      (match m_255106 with
      | Free_15  => close[true] n_255107
      | Height_16  =>
        let* c_255108 := ((send[R,U] n_255107) (justUU_24 0)) in
        ((leaf_worker_255103) c_255108)
      | Size_17  =>
        let* c_255109 := ((send[R,U] n_255107) (justUU_24 0)) in
        ((leaf_worker_255103) c_255109)
      | Lookup_18 k_255110 =>
        let* c_255111 := ((send[R,U] n_255107) (justUU_24 false_5)) in
        ((leaf_worker_255103) c_255111)))

#[program]
def node_worker_41 :=
  fun node_worker_255112 (x_255113) -> {l_255114} -> {r_255115} ->
  (__255116) -o (__255117) -o (__255118) -o
    let* _255119 := recv[R,U] __255118 in
    (match _255119 with
    | ex1UL_45 m_255120 n_255121 =>
      (match m_255120 with
      | Free_15  =>
        let* l_ch_255122 := ((send[R,U] __255116) Free_15) in
        let* r_ch_255123 := ((send[R,U] __255117) Free_15) in
        let* __255124 := close[false] l_ch_255122 in
        let* __255125 := close[false] r_ch_255123 in close[true] n_255121
      | Height_16  =>
        let* l_ch_255126 := ((send[R,U] __255116) Height_16) in
        let* r_ch_255127 := ((send[R,U] __255117) Height_16) in
        let* _255128 := recv[R,U] l_ch_255126 in
        (match _255128 with
        | ex1UL_45 m_255129 n_255130 =>
          (match m_255129 with
          | justUU_24 m_255131 =>
            let* _255132 := recv[R,U] r_ch_255127 in
            (match _255132 with
            | ex1UL_45 m_255133 n_255134 =>
              (match m_255133 with
              | justUU_24 m_255135 =>
                (match (__lt__ m_255131 m_255135) with
                | true_4  =>
                  let* c_255136 :=
                    ((send[R,U] n_255121) (justUU_24 (__add__ m_255135 1)))
                  in
                  ((node_worker_255112)
                    x_255113 NULL NULL n_255130 n_255134 c_255136)
                | false_5  =>
                  let* c_255137 :=
                    ((send[R,U] n_255121) (justUU_24 (__add__ m_255131 1)))
                  in
                  ((node_worker_255112)
                    x_255113 NULL NULL n_255130 n_255134 c_255137))))))
      | Size_17  =>
        let* l_ch_255138 := ((send[R,U] __255116) Size_17) in
        let* r_ch_255139 := ((send[R,U] __255117) Size_17) in
        let* _255140 := recv[R,U] l_ch_255138 in
        (match _255140 with
        | ex1UL_45 m_255141 n_255142 =>
          (match m_255141 with
          | justUU_24 m_255143 =>
            let* _255144 := recv[R,U] r_ch_255139 in
            (match _255144 with
            | ex1UL_45 m_255145 n_255146 =>
              (match m_255145 with
              | justUU_24 m_255147 =>
                let* c_255148 :=
                  ((send[R,U] n_255121)
                    (justUU_24 (__add__ (__add__ 1 m_255143) m_255147)))
                in
                ((node_worker_255112)
                  x_255113 NULL NULL n_255142 n_255146 c_255148)))))
      | Lookup_18 k_255149 =>
        (match (__eq__ x_255113 k_255149) with
        | true_4  =>
          let* c_255150 := ((send[R,U] n_255121) (justUU_24 true_4)) in
          ((node_worker_255112)
            x_255113 NULL NULL __255116 __255117 c_255150)
        | false_5  =>
          let* l_ch_255151 := ((send[R,U] __255116) (Lookup_18 k_255149)) in
          let* r_ch_255152 := ((send[R,U] __255117) (Lookup_18 k_255149)) in
          let* _255153 := recv[R,U] l_ch_255151 in
          (match _255153 with
          | ex1UL_45 m_255154 n_255155 =>
            (match m_255154 with
            | justUU_24 m_255156 =>
              let* _255157 := recv[R,U] r_ch_255152 in
              (match _255157 with
              | ex1UL_45 m_255158 n_255159 =>
                (match m_255158 with
                | justUU_24 m_255160 =>
                  let* c_255161 :=
                    ((send[R,U] n_255121)
                      (justUU_24 ((or_13) m_255156 m_255160)))
                  in
                  ((node_worker_255112)
                    x_255113 NULL NULL n_255155 n_255159 c_255161))))))))

#[program]
def cleaf_42 :=
  fun cleaf_255162 (__255163) ->
    fork fun _255164 (_255165) -o
           ((leaf_worker_40) _255165)

#[program]
def cnode_43 :=
  fun cnode_255166 (x_255167) -> {l_255168} -> {r_255169} -> (__255170) -o
  (__255171) -o
    let* l_ch_255172 := __255170 in
    let* r_ch_255173 := __255171 in
    fork
      fun _255174 (_255175) -o
        ((node_worker_41) x_255167 NULL NULL l_ch_255172 r_ch_255173 _255175)

#[program]
def cfree_44 :=
  fun cfree_255176 {t_255177} -> (ct_255178) ->
    let* c_255179 := ct_255178 in
    let* c_255180 := ((send[R,U] c_255179) Free_15) in close[false] c_255180

#[program]
def cheight_45 :=
  fun cheight_255181 {t_255182} -> (ct_255183) ->
    let* c_255184 := ct_255183 in
    let* c_255185 := ((send[R,U] c_255184) Height_16) in
    let* _255186 := recv[R,U] c_255185 in
    (match _255186 with
    | ex1UL_45 m_255187 n_255188 =>
      return (ex1UL_45 m_255187 return n_255188))

#[program]
def csize_46 :=
  fun csize_255189 {t_255190} -> (ct_255191) ->
    let* c_255192 := ct_255191 in
    let* c_255193 := ((send[R,U] c_255192) Size_17) in
    let* _255194 := recv[R,U] c_255193 in
    (match _255194 with
    | ex1UL_45 m_255195 n_255196 =>
      return (ex1UL_45 m_255195 return n_255196))

#[program]
def clookup_47 :=
  fun clookup_255197 (k_255198) -> {t_255199} -> (ct_255200) ->
    let* c_255201 := ct_255200 in
    let* c_255202 := ((send[R,U] c_255201) (Lookup_18 k_255198)) in
    let* _255203 := recv[R,U] c_255202 in
    (match _255203 with
    | ex1UL_45 m_255204 n_255205 =>
      return (ex1UL_45 m_255204 return n_255205))

#[program]
def mytree1_48 :=
  fun mytree1_255206 (x_255207) ->
    ((cnode_43) x_255207 NULL NULL ((cleaf_42) ttU_26) ((cleaf_42) ttU_26))

#[program]
def mytree2_49 :=
  fun mytree2_255208 (x_255209) ->
    ((cnode_43) x_255209 NULL NULL ((mytree1_48) 1) ((mytree1_48) 2))

#[program]
def mytree3_50 :=
  fun mytree3_255210 (x_255211) ->
    ((cnode_43) x_255211 NULL NULL ((mytree2_49) 3) ((mytree2_49) 4))

#[program]
def mytree4_51 :=
  fun mytree4_255212 (x_255213) ->
    ((cnode_43) x_255213 NULL NULL ((mytree3_50) 8) ((mytree3_50) 7))

#[program]
def mytree5_52 :=
  fun mytree5_255214 (x_255215) ->
    ((cnode_43) x_255215 NULL NULL ((mytree4_51) 9) ((mytree4_51) 10))

#[program]
def mytree6_53 :=
  fun mytree6_255216 (x_255217) ->
    ((cnode_43) x_255217 NULL NULL ((mytree5_52) 11) ((mytree5_52) 12))

#[program]
def main :=
  let ct_255218 := ((mytree6_53) 100) in
  let* _255219 := ((cheight_45) NULL ct_255218) in
  (match _255219 with
  | ex1UL_45 m_255220 n_255221 =>
    (match m_255220 with
    | justUU_24 m_255222 =>
      let* _255223 := ((csize_46) NULL n_255221) in
      (match _255223 with
      | ex1UL_45 m_255224 n_255225 =>
        (match m_255224 with
        | justUU_24 m_255226 =>
          let* _255227 := ((clookup_47) 1 NULL n_255225) in
          (match _255227 with
          | ex1UL_45 m_255228 n_255229 =>
            (match m_255228 with
            | justUU_24 m_255230 =>
              let* _255231 := ((cfree_44) NULL n_255229) in
              (match _255231 with
              | ttU_26  =>
                print
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__
                            (__cat__
                              (__cat__
                                (__cat__ "height := "
                                  ((string_of_int_32) m_255222))
                                "\n")
                              "size   := ")
                            ((string_of_int_32) m_255226))
                          "\n")
                        "lookup := ")
                      ((string_of_bool_15) m_255230))
                    "\n"))))))))

[trans12 success]

-----------------------------------------

#[program]
def idU_56 := fun id_255558 (A_255559) -> (m_255560) ->
                m_255560

#[program]
def idL_55 := fun id_255561 (A_255562) -> (m_255563) ->
                m_255563

#[logical]
inductive eqU_13 where
| reflU_20 of layout[]

#[logical]
inductive eqL_12 where
| reflL_19 of layout[]

#[program]
def rwlUU_60 :=
  fun rwl_255564 {A_255565} -> {m_255566} -> {n_255567} -> {B_255568} ->
  {__255569} -> (__255570) ->
    __255570

#[program]
def rwlUL_59 :=
  fun rwl_255571 {A_255572} -> {m_255573} -> {n_255574} -> {B_255575} ->
  {__255576} -> (__255577) ->
    __255577

#[program]
def rwlLU_58 :=
  fun rwl_255578 {A_255579} -> {m_255580} -> {n_255581} -> {B_255582} ->
  {__255583} -> (__255584) ->
    __255584

#[program]
def rwlLL_57 :=
  fun rwl_255585 {A_255586} -> {m_255587} -> {n_255588} -> {B_255589} ->
  {__255590} -> (__255591) ->
    __255591

#[program]
def rwrUU_64 :=
  fun rwr_255592 {A_255593} -> {m_255594} -> {n_255595} -> {B_255596} ->
  {__255597} -> (__255598) ->
    __255598

#[program]
def rwrUL_63 :=
  fun rwr_255599 {A_255600} -> {m_255601} -> {n_255602} -> {B_255603} ->
  {__255604} -> (__255605) ->
    __255605

#[program]
def rwrLU_62 :=
  fun rwr_255606 {A_255607} -> {m_255608} -> {n_255609} -> {B_255610} ->
  {__255611} -> (__255612) ->
    __255612

#[program]
def rwrLL_61 :=
  fun rwr_255613 {A_255614} -> {m_255615} -> {n_255616} -> {B_255617} ->
  {__255618} -> (__255619) ->
    __255619

#[logical]
def congrUUU_72 := NULL

#[logical]
def congrUUL_71 := NULL

#[logical]
def congrULU_70 := NULL

#[logical]
def congrULL_69 := NULL

#[logical]
def congrLUU_68 := NULL

#[logical]
def congrLUL_67 := NULL

#[logical]
def congrLLU_66 := NULL

#[logical]
def congrLLL_65 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_17 where
| justUU_24 of layout[R]

#[program]
inductive singUL_16 where
| justUL_23 of layout[R]

#[program]
inductive singLU_15 where


#[program]
inductive singLL_14 where
| justLL_21 of layout[R]

#[logical]
def ssingU_74 := NULL

#[logical]
def ssingL_73 := NULL

#[program]
def sing_elimUU_78 :=
  fun sing_elim_255620 {A_255621} -> {x_255622} -> (__255623) ->
    (match __255623 with
    | justUU_24 m_255624 => m_255624)

#[program]
def sing_elimUL_77 :=
  fun sing_elim_255625 {A_255626} -> {x_255627} -> (__255628) ->
    (match __255628 with
    | justUL_23 m_255629 => m_255629)

#[program]
def sing_elimLU_76 :=
  fun sing_elim_255630 {A_255631} -> {x_255632} -> (__255633) ->
    !!

#[program]
def sing_elimLL_75 :=
  fun sing_elim_255634 {A_255635} -> {x_255636} -> (__255637) ->
    (match __255637 with
    | justLL_21 m_255638 => m_255638)

#[logical]
def sing_uniqUU_82 := NULL

#[logical]
def sing_uniqUL_81 := NULL

#[logical]
def sing_uniqLU_80 := NULL

#[logical]
def sing_uniqLL_79 := NULL

#[program]
inductive baseU_19 where
| ttU_26 of layout[]

#[program]
inductive baseL_18 where
| ttL_25 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_255639 (__255640) ->
    (match __255640 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_255641 (__255642) -> (__255643) ->
    (match __255642 with
    | true_4  =>
      (match __255643 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_255644 (__255645) -> (__255646) ->
    (match __255645 with
    | true_4  => true_4
    | false_5  =>
      (match __255646 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_255647 (__255648) -> (__255649) ->
    (match __255648 with
    | true_4  =>
      (match __255649 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __255649 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def string_of_bool_15 :=
  fun string_of_bool_255650 (__255651) ->
    (match __255651 with
    | true_4  => "true" | false_5  => "false")

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_16 :=
  fun lte_255652 (__255653) -> (__255654) ->
    (match __255653 with
    | zero_6  => true_4
    | succ_7 n_255655 =>
      (match __255654 with
      | zero_6  => false_5
      | succ_7 n_255656 => ((lte_255652) n_255655 n_255656)))

#[program]
def lt_17 :=
  fun lt_255657 (x_255658) -> (y_255659) ->
    ((lte_16) (succ_7 x_255658) y_255659)

#[program]
def pred_18 :=
  fun pred_255660 (__255661) ->
    (match __255661 with
    | zero_6  => zero_6 | succ_7 n_255662 => n_255662)

#[program]
def add_19 :=
  fun add_255663 (__255664) -> (__255665) ->
    (match __255664 with
    | zero_6  => __255665
    | succ_7 n_255666 => (succ_7 ((add_255663) n_255666 __255665)))

#[program]
def sub_20 :=
  fun sub_255667 (__255668) -> (__255669) ->
    (match __255669 with
    | zero_6  => __255668
    | succ_7 n_255670 => ((sub_255667) ((pred_18) __255668) n_255670))

#[program]
def mul_21 :=
  fun mul_255671 (__255672) -> (__255673) ->
    (match __255672 with
    | zero_6  => zero_6
    | succ_7 n_255674 => ((add_19) __255673 ((mul_255671) n_255674 __255673)))

#[program]
def div_22 :=
  fun div_255675 (x_255676) -> (y_255677) ->
    (match ((lt_17) x_255676 y_255677) with
    | true_4  => zero_6
    | false_5  =>
      let loop_255678 :=
        fun loop_255679 (x_255680) -> (y_255681) ->
          (match ((sub_20) x_255680 ((pred_18) y_255681)) with
          | zero_6  => zero_6
          | succ_7 n_255682 => (succ_7 ((loop_255679) n_255682 y_255681)))
      in ((loop_255678) x_255676 y_255677))

#[program]
def rem_23 :=
  fun rem_255683 (x_255684) -> (y_255685) ->
    ((sub_20) x_255684 ((mul_21) ((div_22) x_255684 y_255685) y_255685))

#[program]
inductive listUU_23 where
| nilUU_33 of layout[]
| consUU_34 of layout[R, R]

#[program]
inductive listUL_22 where
| nilUL_31 of layout[]
| consUL_32 of layout[R, R]

#[program]
inductive listLU_21 where
| nilLU_29 of layout[]

#[program]
inductive listLL_20 where
| nilLL_27 of layout[]
| consLL_28 of layout[R, R]

#[program]
def free_listUU_86 :=
  fun free_list_255686 {A_255687} -> (f_255688) -> (__255689) ->
    (match __255689 with
    | nilUU_33  => ttU_26
    | consUU_34 hd_255690 tl_255691 =>
      let __255692 := ((f_255688) hd_255690) in
      ((free_list_255686) NULL f_255688 tl_255691))

#[program]
def free_listUL_85 :=
  fun free_list_255693 {A_255694} -> (f_255695) -> (__255696) ->
    (match __255696 with
    | nilUL_31  => ttU_26
    | consUL_32 hd_255697 tl_255698 =>
      let __255699 := ((f_255695) hd_255697) in
      ((free_list_255693) NULL f_255695 tl_255698))

#[program]
def free_listLL_83 :=
  fun free_list_255700 {A_255701} -> (f_255702) -> (__255703) ->
    (match __255703 with
    | nilLL_27  => ttU_26
    | consLL_28 hd_255704 tl_255705 =>
      let __255706 := ((f_255702) hd_255704) in
      ((free_list_255700) NULL f_255702 tl_255705))

#[program]
inductive existsUU_27 where
| exUU_38 of layout[R, N]

#[program]
inductive existsUL_26 where
| exUL_37 of layout[R, N]

#[program]
inductive existsLU_25 where
| exLU_36 of layout[R, N]

#[program]
inductive existsLL_24 where
| exLL_35 of layout[R, N]

#[program]
inductive exists0UU_31 where
| ex0UU_42 of layout[N, R]

#[program]
inductive exists0UL_30 where
| ex0UL_41 of layout[N, R]

#[program]
inductive exists0LU_29 where
| ex0LU_40 of layout[N, R]

#[program]
inductive exists0LL_28 where
| ex0LL_39 of layout[N, R]

#[program]
inductive exists1UU_35 where
| ex1UU_46 of layout[R, R]

#[program]
inductive exists1UL_34 where
| ex1UL_45 of layout[R, R]

#[program]
inductive exists1LU_33 where
| ex1LU_44 of layout[R, R]

#[program]
inductive exists1LL_32 where
| ex1LL_43 of layout[R, R]

#[logical]
def tensorUU_90 := NULL

#[logical]
def tensorUL_89 := NULL

#[logical]
def tensorLU_88 := NULL

#[logical]
def tensorLL_87 := NULL

#[program]
def pow_26 :=
  fun pow_255707 (x_255708) -> (y_255709) ->
    let loop_255710 :=
      fun loop_255711 (acc_255712) -> (y_255713) ->
        (match (__lte__ y_255713 0) with
        | true_4  => acc_255712
        | false_5  =>
          ((loop_255711) (__mul__ x_255708 acc_255712) (__sub__ y_255713 1)))
    in ((loop_255710) 1 y_255709)

#[program]
def powm_27 :=
  fun powm_255714 (x_255715) -> (y_255716) -> (m_255717) ->
    let loop_255718 :=
      fun loop_255719 (acc_255720) -> (y_255721) ->
        (match (__lte__ y_255721 0) with
        | true_4  => acc_255720
        | false_5  =>
          ((loop_255719)
            (__mod__ (__mul__ x_255715 acc_255720) m_255717)
            (__sub__ y_255721 1)))
    in ((loop_255718) 1 y_255716)

#[program]
def ord_28 := fun ord_255722 (c_255723) ->
                (__ord__ c_255723)

#[program]
def chr_29 := fun chr_255724 (i_255725) ->
                (__chr__ i_255725)

#[program]
def str_30 := fun str_255726 (c_255727) ->
                (__push__ "" c_255727)

#[program]
def strlen_31 := fun strlen_255728 (s_255729) ->
                   (__size__ s_255729)

#[program]
def string_of_int_32 :=
  fun string_of_int_255730 (i_255731) ->
    let aux_255732 :=
      fun aux_255733 (i_255734) ->
        (match (__lte__ 10 i_255734) with
        | true_4  =>
          let r_255735 := (__mod__ i_255734 10) in
          let i_255736 := (__div__ i_255734 10) in
          (__push__ ((aux_255733) i_255736)
            ((chr_29) (__add__ r_255735 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_255734 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_255731) with
    | true_4  => ((aux_255732) i_255731)
    | false_5  => (__cat__ "~" ((aux_255732) (__neg__ i_255731))))

#[program]
inductive tree_10 where
| Leaf_13 of layout[]
| Node_14 of layout[R, R, R]

#[program]
inductive opr_11 where
| Free_15 of layout[]
| Height_16 of layout[]
| Size_17 of layout[]
| Lookup_18 of layout[R]

#[program]
def height_33 :=
  fun height_255737 (__255738) ->
    (match __255738 with
    | Leaf_13  => 0
    | Node_14 __255739 l_255740 r_255741 =>
      let x_255742 := ((height_255737) l_255740) in
      let y_255743 := ((height_255737) r_255741) in
      (match (__lt__ x_255742 y_255743) with
      | true_4  => (__add__ y_255743 1) | false_5  => (__add__ x_255742 1)))

#[program]
def size_34 :=
  fun size_255744 (__255745) ->
    (match __255745 with
    | Leaf_13  => 0
    | Node_14 __255746 l_255747 r_255748 =>
      (__add__ (__add__ 1 ((size_255744) l_255747)) ((size_255744) r_255748)))

#[program]
def lookup_35 :=
  fun lookup_255749 (n_255750) -> (__255751) ->
    (match __255751 with
    | Leaf_13  => false_5
    | Node_14 __255752 l_255753 r_255754 =>
      (match (__eq__ __255752 n_255750) with
      | true_4  => true_4
      | false_5  =>
        ((or_13)
          ((lookup_255749) n_255750 l_255753)
          ((lookup_255749) n_255750 r_255754))))

#[logical]
def tree_p_36 := NULL

#[logical]
def ctree_ch_37 := NULL

#[logical]
def ctree_hc_38 := NULL

#[logical]
def ctree_39 := NULL

#[program]
def leaf_worker_40 :=
  fun leaf_worker_255755 (c_255756) ->
    let* _255757 := recv[R,U] c_255756 in
    (match _255757 with
    | ex1UL_45 m_255758 n_255759 =>
      (match m_255758 with
      | Free_15  => close[true] n_255759
      | Height_16  =>
        let* c_255760 := ((send[R,U] n_255759) (justUU_24 0)) in
        ((leaf_worker_255755) c_255760)
      | Size_17  =>
        let* c_255761 := ((send[R,U] n_255759) (justUU_24 0)) in
        ((leaf_worker_255755) c_255761)
      | Lookup_18 k_255762 =>
        let* c_255763 := ((send[R,U] n_255759) (justUU_24 false_5)) in
        ((leaf_worker_255755) c_255763)))

#[program]
def node_worker_41 :=
  fun node_worker_255764 (x_255765) -> {l_255766} -> {r_255767} ->
  (__255768) -o (__255769) -o (__255770) -o
    let* _255771 := recv[R,U] __255770 in
    (match _255771 with
    | ex1UL_45 m_255772 n_255773 =>
      (match m_255772 with
      | Free_15  =>
        let* l_ch_255774 := ((send[R,U] __255768) Free_15) in
        let* r_ch_255775 := ((send[R,U] __255769) Free_15) in
        let* __255776 := close[false] l_ch_255774 in
        let* __255777 := close[false] r_ch_255775 in close[true] n_255773
      | Height_16  =>
        let* l_ch_255778 := ((send[R,U] __255768) Height_16) in
        let* r_ch_255779 := ((send[R,U] __255769) Height_16) in
        let* _255780 := recv[R,U] l_ch_255778 in
        (match _255780 with
        | ex1UL_45 m_255781 n_255782 =>
          (match m_255781 with
          | justUU_24 m_255783 =>
            let* _255784 := recv[R,U] r_ch_255779 in
            (match _255784 with
            | ex1UL_45 m_255785 n_255786 =>
              (match m_255785 with
              | justUU_24 m_255787 =>
                (match (__lt__ m_255783 m_255787) with
                | true_4  =>
                  let* c_255788 :=
                    ((send[R,U] n_255773) (justUU_24 (__add__ m_255787 1)))
                  in
                  ((node_worker_255764)
                    x_255765 NULL NULL n_255782 n_255786 c_255788)
                | false_5  =>
                  let* c_255789 :=
                    ((send[R,U] n_255773) (justUU_24 (__add__ m_255783 1)))
                  in
                  ((node_worker_255764)
                    x_255765 NULL NULL n_255782 n_255786 c_255789))))))
      | Size_17  =>
        let* l_ch_255790 := ((send[R,U] __255768) Size_17) in
        let* r_ch_255791 := ((send[R,U] __255769) Size_17) in
        let* _255792 := recv[R,U] l_ch_255790 in
        (match _255792 with
        | ex1UL_45 m_255793 n_255794 =>
          (match m_255793 with
          | justUU_24 m_255795 =>
            let* _255796 := recv[R,U] r_ch_255791 in
            (match _255796 with
            | ex1UL_45 m_255797 n_255798 =>
              (match m_255797 with
              | justUU_24 m_255799 =>
                let* c_255800 :=
                  ((send[R,U] n_255773)
                    (justUU_24 (__add__ (__add__ 1 m_255795) m_255799)))
                in
                ((node_worker_255764)
                  x_255765 NULL NULL n_255794 n_255798 c_255800)))))
      | Lookup_18 k_255801 =>
        (match (__eq__ x_255765 k_255801) with
        | true_4  =>
          let* c_255802 := ((send[R,U] n_255773) (justUU_24 true_4)) in
          ((node_worker_255764)
            x_255765 NULL NULL __255768 __255769 c_255802)
        | false_5  =>
          let* l_ch_255803 := ((send[R,U] __255768) (Lookup_18 k_255801)) in
          let* r_ch_255804 := ((send[R,U] __255769) (Lookup_18 k_255801)) in
          let* _255805 := recv[R,U] l_ch_255803 in
          (match _255805 with
          | ex1UL_45 m_255806 n_255807 =>
            (match m_255806 with
            | justUU_24 m_255808 =>
              let* _255809 := recv[R,U] r_ch_255804 in
              (match _255809 with
              | ex1UL_45 m_255810 n_255811 =>
                (match m_255810 with
                | justUU_24 m_255812 =>
                  let* c_255813 :=
                    ((send[R,U] n_255773)
                      (justUU_24 ((or_13) m_255808 m_255812)))
                  in
                  ((node_worker_255764)
                    x_255765 NULL NULL n_255807 n_255811 c_255813))))))))

#[program]
def cleaf_42 :=
  fun cleaf_255814 (__255815) ->
    fork fun _255816 (_255817) -o
           ((leaf_worker_40) _255817)

#[program]
def cnode_43 :=
  fun cnode_255818 (x_255819) -> {l_255820} -> {r_255821} -> (__255822) -o
  (__255823) -o
    let* l_ch_255824 := __255822 in
    let* r_ch_255825 := __255823 in
    fork
      fun _255826 (_255827) -o
        ((node_worker_41) x_255819 NULL NULL l_ch_255824 r_ch_255825 _255827)

#[program]
def cfree_44 :=
  fun cfree_255828 {t_255829} -> (ct_255830) ->
    let* c_255831 := ct_255830 in
    let* c_255832 := ((send[R,U] c_255831) Free_15) in close[false] c_255832

#[program]
def cheight_45 :=
  fun cheight_255833 {t_255834} -> (ct_255835) ->
    let* c_255836 := ct_255835 in
    let* c_255837 := ((send[R,U] c_255836) Height_16) in
    let* _255838 := recv[R,U] c_255837 in
    (match _255838 with
    | ex1UL_45 m_255839 n_255840 =>
      return (ex1UL_45 m_255839 return n_255840))

#[program]
def csize_46 :=
  fun csize_255841 {t_255842} -> (ct_255843) ->
    let* c_255844 := ct_255843 in
    let* c_255845 := ((send[R,U] c_255844) Size_17) in
    let* _255846 := recv[R,U] c_255845 in
    (match _255846 with
    | ex1UL_45 m_255847 n_255848 =>
      return (ex1UL_45 m_255847 return n_255848))

#[program]
def clookup_47 :=
  fun clookup_255849 (k_255850) -> {t_255851} -> (ct_255852) ->
    let* c_255853 := ct_255852 in
    let* c_255854 := ((send[R,U] c_255853) (Lookup_18 k_255850)) in
    let* _255855 := recv[R,U] c_255854 in
    (match _255855 with
    | ex1UL_45 m_255856 n_255857 =>
      return (ex1UL_45 m_255856 return n_255857))

#[program]
def mytree1_48 :=
  fun mytree1_255858 (x_255859) ->
    ((cnode_43) x_255859 NULL NULL ((cleaf_42) ttU_26) ((cleaf_42) ttU_26))

#[program]
def mytree2_49 :=
  fun mytree2_255860 (x_255861) ->
    ((cnode_43) x_255861 NULL NULL ((mytree1_48) 1) ((mytree1_48) 2))

#[program]
def mytree3_50 :=
  fun mytree3_255862 (x_255863) ->
    ((cnode_43) x_255863 NULL NULL ((mytree2_49) 3) ((mytree2_49) 4))

#[program]
def mytree4_51 :=
  fun mytree4_255864 (x_255865) ->
    ((cnode_43) x_255865 NULL NULL ((mytree3_50) 8) ((mytree3_50) 7))

#[program]
def mytree5_52 :=
  fun mytree5_255866 (x_255867) ->
    ((cnode_43) x_255867 NULL NULL ((mytree4_51) 9) ((mytree4_51) 10))

#[program]
def mytree6_53 :=
  fun mytree6_255868 (x_255869) ->
    ((cnode_43) x_255869 NULL NULL ((mytree5_52) 11) ((mytree5_52) 12))

#[program]
def main :=
  let ct_255870 := ((mytree6_53) 100) in
  let* _255871 := ((cheight_45) NULL ct_255870) in
  (match _255871 with
  | ex1UL_45 m_255872 n_255873 =>
    (match m_255872 with
    | justUU_24 m_255874 =>
      let* _255875 := ((csize_46) NULL n_255873) in
      (match _255875 with
      | ex1UL_45 m_255876 n_255877 =>
        (match m_255876 with
        | justUU_24 m_255878 =>
          let* _255879 := ((clookup_47) 1 NULL n_255877) in
          (match _255879 with
          | ex1UL_45 m_255880 n_255881 =>
            (match m_255880 with
            | justUU_24 m_255882 =>
              let* _255883 := ((cfree_44) NULL n_255881) in
              (match _255883 with
              | ttU_26  =>
                print
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__
                            (__cat__
                              (__cat__
                                (__cat__ "height := "
                                  ((string_of_int_32) m_255874))
                                "\n")
                              "size   := ")
                            ((string_of_int_32) m_255878))
                          "\n")
                        "lookup := ")
                      ((string_of_bool_15) m_255882))
                    "\n"))))))))

[trans2e success]

-----------------------------------------

def idU_56 := fun id_256267 (A_256268) -> (m_256269) -> m_256269

def idL_55 := fun id_256270 (A_256271) -> (m_256272) -> m_256272

def rwlUU_60 :=
  fun rwl_256273 (A_256274) -> (m_256275) -> (n_256276) -> (B_256277) ->
  (__256278) -> (__256279) -> __256279

def rwlUL_59 :=
  fun rwl_256280 (A_256281) -> (m_256282) -> (n_256283) -> (B_256284) ->
  (__256285) -> (__256286) -> __256286

def rwlLU_58 :=
  fun rwl_256287 (A_256288) -> (m_256289) -> (n_256290) -> (B_256291) ->
  (__256292) -> (__256293) -> __256293

def rwlLL_57 :=
  fun rwl_256294 (A_256295) -> (m_256296) -> (n_256297) -> (B_256298) ->
  (__256299) -> (__256300) -> __256300

def rwrUU_64 :=
  fun rwr_256301 (A_256302) -> (m_256303) -> (n_256304) -> (B_256305) ->
  (__256306) -> (__256307) -> __256307

def rwrUL_63 :=
  fun rwr_256308 (A_256309) -> (m_256310) -> (n_256311) -> (B_256312) ->
  (__256313) -> (__256314) -> __256314

def rwrLU_62 :=
  fun rwr_256315 (A_256316) -> (m_256317) -> (n_256318) -> (B_256319) ->
  (__256320) -> (__256321) -> __256321

def rwrLL_61 :=
  fun rwr_256322 (A_256323) -> (m_256324) -> (n_256325) -> (B_256326) ->
  (__256327) -> (__256328) -> __256328

def sing_elimUU_78 :=
  fun sing_elim_256329 (A_256330) -> (x_256331) -> (__256332) -> __256332

def sing_elimUL_77 :=
  fun sing_elim_256333 (A_256334) -> (x_256335) -> (__256336) -> __256336

def sing_elimLU_76 :=
  fun sing_elim_256337 (A_256338) -> (x_256339) -> (__256340) -> !!

def sing_elimLL_75 :=
  fun sing_elim_256341 (A_256342) -> (x_256343) -> (__256344) -> __256344

def not_11 :=
  fun not_256345 (__256346) ->
    (match __256346 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  fun and_256347 (__256348) -> (__256349) ->
    (match __256348 with
    | true_4 =>
      (match __256349 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  fun or_256350 (__256351) -> (__256352) ->
    (match __256351 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __256352 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  fun xor_256353 (__256354) -> (__256355) ->
    (match __256354 with
    | true_4 =>
      (match __256355 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __256355 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def string_of_bool_15 :=
  fun string_of_bool_256356 (__256357) ->
    (match __256357 with
    | true_4 => "true" | false_5 => "false")

def lte_16 :=
  fun lte_256358 (__256359) -> (__256360) ->
    (match __256359 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __256359 with
      | succ_7 n_256361 =>
        (match __256360 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __256360 with
          | succ_7 n_256362 => ((lte_256358) n_256361 n_256362)))))

def lt_17 :=
  fun lt_256363 (x_256364) -> (y_256365) ->
    ((lte_16) (succ_7 x_256364) y_256365)

def pred_18 :=
  fun pred_256366 (__256367) ->
    (match __256367 with
    | zero_6 => constr0(zero_6)
    | _ => (match __256367 with
           | succ_7 n_256368 => n_256368))

def add_19 :=
  fun add_256369 (__256370) -> (__256371) ->
    (match __256370 with
    | zero_6 => __256371
    | _ =>
      (match __256370 with
      | succ_7 n_256372 => (succ_7 ((add_256369) n_256372 __256371))))

def sub_20 :=
  fun sub_256373 (__256374) -> (__256375) ->
    (match __256375 with
    | zero_6 => __256374
    | _ =>
      (match __256375 with
      | succ_7 n_256376 => ((sub_256373) ((pred_18) __256374) n_256376)))

def mul_21 :=
  fun mul_256377 (__256378) -> (__256379) ->
    (match __256378 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __256378 with
      | succ_7 n_256380 =>
        ((add_19) __256379 ((mul_256377) n_256380 __256379))))

def div_22 :=
  fun div_256381 (x_256382) -> (y_256383) ->
    (match ((lt_17) x_256382 y_256383) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_256384 :=
        fun loop_256385 (x_256386) -> (y_256387) ->
          (match ((sub_20) x_256386 ((pred_18) y_256387)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_20) x_256386 ((pred_18) y_256387)) with
            | succ_7 n_256388 => (succ_7 ((loop_256385) n_256388 y_256387))))
      in ((loop_256384) x_256382 y_256383))

def rem_23 :=
  fun rem_256389 (x_256390) -> (y_256391) ->
    ((sub_20) x_256390 ((mul_21) ((div_22) x_256390 y_256391) y_256391))

def free_listUU_86 :=
  fun free_list_256392 (A_256393) -> (f_256394) -> (__256395) ->
    (match __256395 with
    | nilUU_33 => constr0(ttU_26)
    | _ =>
      (match __256395 with
      | consUU_34 hd_256396 tl_256397 =>
        let __256398 := ((f_256394) hd_256396) in
        ((free_list_256392) NULL f_256394 tl_256397)))

def free_listUL_85 :=
  fun free_list_256399 (A_256400) -> (f_256401) -> (__256402) ->
    (match __256402 with
    | nilUL_31 => constr0(ttU_26)
    | _ =>
      (match __256402 with
      | consUL_32 hd_256403 tl_256404 =>
        let __256405 := ((f_256401) hd_256403) in
        ((free_list_256399) NULL f_256401 tl_256404)))

def free_listLL_83 :=
  fun free_list_256406 (A_256407) -> (f_256408) -> (__256409) ->
    (match __256409 with
    | nilLL_27 => constr0(ttU_26)
    | _ =>
      (match __256409 with
      | consLL_28 hd_256410 tl_256411 =>
        let __256412 := ((f_256408) hd_256410) in
        ((free_list_256406) NULL f_256408 tl_256411)))

def pow_26 :=
  fun pow_256413 (x_256414) -> (y_256415) ->
    let loop_256416 :=
      fun loop_256417 (acc_256418) -> (y_256419) ->
        (match (__lte__ y_256419 0) with
        | true_4 => acc_256418
        | false_5 =>
          ((loop_256417) (__mul__ x_256414 acc_256418) (__sub__ y_256419 1)))
    in ((loop_256416) 1 y_256415)

def powm_27 :=
  fun powm_256420 (x_256421) -> (y_256422) -> (m_256423) ->
    let loop_256424 :=
      fun loop_256425 (acc_256426) -> (y_256427) ->
        (match (__lte__ y_256427 0) with
        | true_4 => acc_256426
        | false_5 =>
          ((loop_256425)
            (__mod__ (__mul__ x_256421 acc_256426) m_256423)
              (__sub__ y_256427 1)))
    in ((loop_256424) 1 y_256422)

def ord_28 := fun ord_256428 (c_256429) -> (__ord__ c_256429)

def chr_29 := fun chr_256430 (i_256431) -> (__chr__ i_256431)

def str_30 := fun str_256432 (c_256433) -> (__push__ "" c_256433)

def strlen_31 := fun strlen_256434 (s_256435) -> (__size__ s_256435)

def string_of_int_32 :=
  fun string_of_int_256436 (i_256437) ->
    let aux_256438 :=
      fun aux_256439 (i_256440) ->
        (match (__lte__ 10 i_256440) with
        | true_4 =>
          let r_256441 := (__mod__ i_256440 10) in
          let i_256442 := (__div__ i_256440 10) in
          (__push__ ((aux_256439) i_256442)
            ((chr_29) (__add__ r_256441 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_256440 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_256437) with
    | true_4 => ((aux_256438) i_256437)
    | false_5 => (__cat__ "~" ((aux_256438) (__neg__ i_256437))))

def height_33 :=
  fun height_256443 (__256444) ->
    (match __256444 with
    | Leaf_13 => 0
    | _ =>
      (match __256444 with
      | Node_14 __256445 l_256446 r_256447 =>
        let x_256448 := ((height_256443) l_256446) in
        let y_256449 := ((height_256443) r_256447) in
        (match (__lt__ x_256448 y_256449) with
        | true_4 => (__add__ y_256449 1) | false_5 => (__add__ x_256448 1))))

def size_34 :=
  fun size_256450 (__256451) ->
    (match __256451 with
    | Leaf_13 => 0
    | _ =>
      (match __256451 with
      | Node_14 __256452 l_256453 r_256454 =>
        (__add__ (__add__ 1 ((size_256450) l_256453))
          ((size_256450) r_256454))))

def lookup_35 :=
  fun lookup_256455 (n_256456) -> (__256457) ->
    (match __256457 with
    | Leaf_13 => constr0(false_5)
    | _ =>
      (match __256457 with
      | Node_14 __256458 l_256459 r_256460 =>
        (match (__eq__ __256458 n_256456) with
        | true_4 => constr0(true_4)
        | false_5 =>
          ((or_13)
            ((lookup_256455) n_256456 l_256459)
              ((lookup_256455) n_256456 r_256460)))))

def leaf_worker_40 :=
  fun leaf_worker_256461 (c_256462) ->
    lazy(let _256463 := force(lazy(recv[U](c_256462))) in
         force((match _256463 with
               | ex1UL_45 m_256464 n_256465 =>
                 (match m_256464 with
                 | Free_15 => lazy(close[true] n_256465)
                 | Height_16 =>
                   lazy(let c_256466 :=
                          force(((lam (x_256467) ->
                                    lazy(send(n_256465, x_256467)))
                                  0))
                        in force(((leaf_worker_256461) c_256466)))
                 | Size_17 =>
                   lazy(let c_256468 :=
                          force(((lam (x_256469) ->
                                    lazy(send(n_256465, x_256469)))
                                  0))
                        in force(((leaf_worker_256461) c_256468)))
                 | _ =>
                   (match m_256464 with
                   | Lookup_18 k_256470 =>
                     lazy(let c_256471 :=
                            force(((lam (x_256472) ->
                                      lazy(send(n_256465, x_256472)))
                                    constr0(false_5)))
                          in force(((leaf_worker_256461) c_256471))))))))

def node_worker_41 :=
  fun node_worker_256473 (x_256474) -> (l_256475) -> (r_256476) ->
  (__256477) -o (__256478) -o (__256479) -o
    lazy(let _256480 := force(lazy(recv[U](__256479))) in
         force((match _256480 with
               | ex1UL_45 m_256481 n_256482 =>
                 (match m_256481 with
                 | Free_15 =>
                   lazy(let l_ch_256483 :=
                          force(((lam (x_256484) ->
                                    lazy(send(__256477, x_256484)))
                                  constr0(Free_15)))
                        in
                        let r_ch_256485 :=
                          force(((lam (x_256486) ->
                                    lazy(send(__256478, x_256486)))
                                  constr0(Free_15)))
                        in
                        let __256487 := force(lazy(close[false] l_ch_256483))
                        in
                        let __256488 := force(lazy(close[false] r_ch_256485))
                        in force(lazy(close[true] n_256482)))
                 | Height_16 =>
                   lazy(let l_ch_256489 :=
                          force(((lam (x_256490) ->
                                    lazy(send(__256477, x_256490)))
                                  constr0(Height_16)))
                        in
                        let r_ch_256491 :=
                          force(((lam (x_256492) ->
                                    lazy(send(__256478, x_256492)))
                                  constr0(Height_16)))
                        in
                        let _256493 := force(lazy(recv[U](l_ch_256489))) in
                        force((match _256493 with
                              | ex1UL_45 m_256494 n_256495 =>
                                lazy(let _256496 :=
                                       force(lazy(recv[U](r_ch_256491)))
                                     in
                                     force((match _256496 with
                                           | ex1UL_45 m_256497 n_256498 =>
                                             (match (__lt__ m_256494
                                                      m_256497) with
                                             | true_4 =>
                                               lazy(let c_256499 :=
                                                      force(((lam (x_256500) ->
                                                                lazy(
                                                                send(n_256482, x_256500)))
                                                              (__add__
                                                                m_256497 
                                                              1)))
                                                    in
                                                    force(((node_worker_256473)
                                                            x_256474 NULL
                                                              NULL n_256495
                                                              n_256498
                                                              c_256499)))
                                             | false_5 =>
                                               lazy(let c_256501 :=
                                                      force(((lam (x_256502) ->
                                                                lazy(
                                                                send(n_256482, x_256502)))
                                                              (__add__
                                                                m_256494 
                                                              1)))
                                                    in
                                                    force(((node_worker_256473)
                                                            x_256474 NULL
                                                              NULL n_256495
                                                              n_256498
                                                              c_256501))))))))))
                 | Size_17 =>
                   lazy(let l_ch_256503 :=
                          force(((lam (x_256504) ->
                                    lazy(send(__256477, x_256504)))
                                  constr0(Size_17)))
                        in
                        let r_ch_256505 :=
                          force(((lam (x_256506) ->
                                    lazy(send(__256478, x_256506)))
                                  constr0(Size_17)))
                        in
                        let _256507 := force(lazy(recv[U](l_ch_256503))) in
                        force((match _256507 with
                              | ex1UL_45 m_256508 n_256509 =>
                                lazy(let _256510 :=
                                       force(lazy(recv[U](r_ch_256505)))
                                     in
                                     force((match _256510 with
                                           | ex1UL_45 m_256511 n_256512 =>
                                             lazy(let c_256513 :=
                                                    force(((lam (x_256514) ->
                                                              lazy(send(n_256482, x_256514)))
                                                            (__add__
                                                              (__add__ 
                                                              1 m_256508)
                                                              m_256511)))
                                                  in
                                                  force(((node_worker_256473)
                                                          x_256474 NULL NULL
                                                            n_256509 n_256512
                                                            c_256513)))))))))
                 | _ =>
                   (match m_256481 with
                   | Lookup_18 k_256515 =>
                     (match (__eq__ x_256474 k_256515) with
                     | true_4 =>
                       lazy(let c_256516 :=
                              force(((lam (x_256517) ->
                                        lazy(send(n_256482, x_256517)))
                                      constr0(true_4)))
                            in
                            force(((node_worker_256473)
                                    x_256474 NULL NULL __256477 __256478
                                      c_256516)))
                     | false_5 =>
                       lazy(let l_ch_256518 :=
                              force(((lam (x_256519) ->
                                        lazy(send(__256477, x_256519)))
                                      (Lookup_18 k_256515)))
                            in
                            let r_ch_256520 :=
                              force(((lam (x_256521) ->
                                        lazy(send(__256478, x_256521)))
                                      (Lookup_18 k_256515)))
                            in
                            let _256522 := force(lazy(recv[U](l_ch_256518)))
                            in
                            force((match _256522 with
                                  | ex1UL_45 m_256523 n_256524 =>
                                    lazy(let _256525 :=
                                           force(lazy(recv[U](r_ch_256520)))
                                         in
                                         force((match _256525 with
                                               | ex1UL_45 m_256526
                                                 n_256527 =>
                                                 lazy(let c_256528 :=
                                                        force(((lam (x_256529) ->
                                                                  lazy(
                                                                  send(n_256482, x_256529)))
                                                                ((or_13)
                                                                  m_256523
                                                                    m_256526)))
                                                      in
                                                      force(((node_worker_256473)
                                                              x_256474 NULL
                                                                NULL n_256524
                                                                n_256527
                                                                c_256528)))))))))))))))

def cleaf_42 :=
  fun cleaf_256530 (__256531) ->
    lazy(fork fun _256532 (_256533) -o ((leaf_worker_40) _256533))

def cnode_43 :=
  fun cnode_256534 (x_256535) -> (l_256536) -> (r_256537) -> (__256538) -o
  (__256539) -o
    lazy(let l_ch_256540 := force(__256538) in
         let r_ch_256541 := force(__256539) in
         force(lazy(fork
                      fun _256542 (_256543) -o
                        ((node_worker_41)
                          x_256535 NULL NULL l_ch_256540 r_ch_256541 _256543))))

def cfree_44 :=
  fun cfree_256544 (t_256545) -> (ct_256546) ->
    lazy(let c_256547 := force(ct_256546) in
         let c_256548 :=
           force(((lam (x_256549) -> lazy(send(c_256547, x_256549)))
                   constr0(Free_15)))
         in force(lazy(close[false] c_256548)))

def cheight_45 :=
  fun cheight_256550 (t_256551) -> (ct_256552) ->
    lazy(let c_256553 := force(ct_256552) in
         let c_256554 :=
           force(((lam (x_256555) -> lazy(send(c_256553, x_256555)))
                   constr0(Height_16)))
         in
         let _256556 := force(lazy(recv[U](c_256554))) in
         force((match _256556 with
               | ex1UL_45 m_256557 n_256558 =>
                 lazy((ex1UL_45 m_256557 lazy(n_256558))))))

def csize_46 :=
  fun csize_256559 (t_256560) -> (ct_256561) ->
    lazy(let c_256562 := force(ct_256561) in
         let c_256563 :=
           force(((lam (x_256564) -> lazy(send(c_256562, x_256564)))
                   constr0(Size_17)))
         in
         let _256565 := force(lazy(recv[U](c_256563))) in
         force((match _256565 with
               | ex1UL_45 m_256566 n_256567 =>
                 lazy((ex1UL_45 m_256566 lazy(n_256567))))))

def clookup_47 :=
  fun clookup_256568 (k_256569) -> (t_256570) -> (ct_256571) ->
    lazy(let c_256572 := force(ct_256571) in
         let c_256573 :=
           force(((lam (x_256574) -> lazy(send(c_256572, x_256574)))
                   (Lookup_18 k_256569)))
         in
         let _256575 := force(lazy(recv[U](c_256573))) in
         force((match _256575 with
               | ex1UL_45 m_256576 n_256577 =>
                 lazy((ex1UL_45 m_256576 lazy(n_256577))))))

def mytree1_48 :=
  fun mytree1_256578 (x_256579) ->
    ((cnode_43)
      x_256579 NULL NULL ((cleaf_42) constr0(ttU_26))
        ((cleaf_42) constr0(ttU_26)))

def mytree2_49 :=
  fun mytree2_256580 (x_256581) ->
    ((cnode_43) x_256581 NULL NULL ((mytree1_48) 1) ((mytree1_48) 2))

def mytree3_50 :=
  fun mytree3_256582 (x_256583) ->
    ((cnode_43) x_256583 NULL NULL ((mytree2_49) 3) ((mytree2_49) 4))

def mytree4_51 :=
  fun mytree4_256584 (x_256585) ->
    ((cnode_43) x_256585 NULL NULL ((mytree3_50) 8) ((mytree3_50) 7))

def mytree5_52 :=
  fun mytree5_256586 (x_256587) ->
    ((cnode_43) x_256587 NULL NULL ((mytree4_51) 9) ((mytree4_51) 10))

def mytree6_53 :=
  fun mytree6_256588 (x_256589) ->
    ((cnode_43) x_256589 NULL NULL ((mytree5_52) 11) ((mytree5_52) 12))

def main :=
  let ct_256590 := ((mytree6_53) 100) in
  lazy(let _256591 := force(((cheight_45) NULL ct_256590)) in
       force((match _256591 with
             | ex1UL_45 m_256592 n_256593 =>
               lazy(let _256594 := force(((csize_46) NULL n_256593)) in
                    force((match _256594 with
                          | ex1UL_45 m_256595 n_256596 =>
                            lazy(let _256597 :=
                                   force(((clookup_47) 1 NULL n_256596))
                                 in
                                 force((match _256597 with
                                       | ex1UL_45 m_256598 n_256599 =>
                                         lazy(let _256600 :=
                                                force(((cfree_44)
                                                        NULL n_256599))
                                              in
                                              force((match _256600 with
                                                    | ttU_26 =>
                                                      lazy(print
                                                             (__cat__
                                                               (__cat__
                                                                 (__cat__
                                                                   (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    "height := "
                                                                    ((string_of_int_32)
                                                                    m_256592))
                                                                    "\n")
                                                                    "size   := ")
                                                                    ((string_of_int_32)
                                                                    m_256595))
                                                                    "\n")
                                                                   "lookup := ")
                                                                 ((string_of_bool_15)
                                                                   m_256598))
                                                               "\n"))))))))))))))

[trans23 success]

-----------------------------------------

def idU_56 := lam (A_257163) -> (m_257164) -> m_257164

def idL_55 := lam (A_257165) -> (m_257166) -> m_257166

def rwlUU_60 :=
  lam (A_257167) -> (m_257168) -> (n_257169) -> (B_257170) -> (__257171) ->
  (__257172) -> __257172

def rwlUL_59 :=
  lam (A_257173) -> (m_257174) -> (n_257175) -> (B_257176) -> (__257177) ->
  (__257178) -> __257178

def rwlLU_58 :=
  lam (A_257179) -> (m_257180) -> (n_257181) -> (B_257182) -> (__257183) ->
  (__257184) -> __257184

def rwlLL_57 :=
  lam (A_257185) -> (m_257186) -> (n_257187) -> (B_257188) -> (__257189) ->
  (__257190) -> __257190

def rwrUU_64 :=
  lam (A_257191) -> (m_257192) -> (n_257193) -> (B_257194) -> (__257195) ->
  (__257196) -> __257196

def rwrUL_63 :=
  lam (A_257197) -> (m_257198) -> (n_257199) -> (B_257200) -> (__257201) ->
  (__257202) -> __257202

def rwrLU_62 :=
  lam (A_257203) -> (m_257204) -> (n_257205) -> (B_257206) -> (__257207) ->
  (__257208) -> __257208

def rwrLL_61 :=
  lam (A_257209) -> (m_257210) -> (n_257211) -> (B_257212) -> (__257213) ->
  (__257214) -> __257214

def sing_elimUU_78 := lam (A_257215) -> (x_257216) -> (__257217) -> __257217

def sing_elimUL_77 := lam (A_257218) -> (x_257219) -> (__257220) -> __257220

def sing_elimLU_76 := lam (A_257221) -> (x_257222) -> (__257223) -> !!

def sing_elimLL_75 := lam (A_257224) -> (x_257225) -> (__257226) -> __257226

def not_11 :=
  lam (__257227) ->
    (match __257227 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  lam (__257228) -> (__257229) ->
    (match __257228 with
    | true_4 =>
      (match __257229 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  lam (__257230) -> (__257231) ->
    (match __257230 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __257231 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  lam (__257232) -> (__257233) ->
    (match __257232 with
    | true_4 =>
      (match __257233 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __257233 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def string_of_bool_15 :=
  lam (__257234) ->
    (match __257234 with
    | true_4 => "true" | false_5 => "false")

def lte_16 :=
  fun lte_257235 (__257236) -> (__257237) ->
    (match __257236 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __257236 with
      | succ_7 n_257238 =>
        (match __257237 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __257237 with
          | succ_7 n_257239 => ((lte_257235) n_257238 n_257239)))))

def lt_17 :=
  lam (x_257240) -> (y_257241) -> ((lte_16) (succ_7 x_257240) y_257241)

def pred_18 :=
  lam (__257242) ->
    (match __257242 with
    | zero_6 => constr0(zero_6)
    | _ => (match __257242 with
           | succ_7 n_257243 => n_257243))

def add_19 :=
  fun add_257244 (__257245) -> (__257246) ->
    (match __257245 with
    | zero_6 => __257246
    | _ =>
      (match __257245 with
      | succ_7 n_257247 => (succ_7 ((add_257244) n_257247 __257246))))

def sub_20 :=
  fun sub_257248 (__257249) -> (__257250) ->
    (match __257250 with
    | zero_6 => __257249
    | _ =>
      (match __257250 with
      | succ_7 n_257251 => ((sub_257248) ((pred_18) __257249) n_257251)))

def mul_21 :=
  fun mul_257252 (__257253) -> (__257254) ->
    (match __257253 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __257253 with
      | succ_7 n_257255 =>
        ((add_19) __257254 ((mul_257252) n_257255 __257254))))

def div_22 :=
  lam (x_257256) -> (y_257257) ->
    (match ((lt_17) x_257256 y_257257) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_257258 :=
        fun loop_257259 (x_257260) -> (y_257261) ->
          (match ((sub_20) x_257260 ((pred_18) y_257261)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_20) x_257260 ((pred_18) y_257261)) with
            | succ_7 n_257262 => (succ_7 ((loop_257259) n_257262 y_257261))))
      in ((loop_257258) x_257256 y_257257))

def rem_23 :=
  lam (x_257263) -> (y_257264) ->
    ((sub_20) x_257263 ((mul_21) ((div_22) x_257263 y_257264) y_257264))

def free_listUU_86 :=
  fun free_list_257265 (A_257266) -> (f_257267) -> (__257268) ->
    (match __257268 with
    | nilUU_33 => constr0(ttU_26)
    | _ =>
      (match __257268 with
      | consUU_34 hd_257269 tl_257270 =>
        let __257271 := ((f_257267) hd_257269) in
        ((free_list_257265) NULL f_257267 tl_257270)))

def free_listUL_85 :=
  fun free_list_257272 (A_257273) -> (f_257274) -> (__257275) ->
    (match __257275 with
    | nilUL_31 => constr0(ttU_26)
    | _ =>
      (match __257275 with
      | consUL_32 hd_257276 tl_257277 =>
        let __257278 := ((f_257274) hd_257276) in
        ((free_list_257272) NULL f_257274 tl_257277)))

def free_listLL_83 :=
  fun free_list_257279 (A_257280) -> (f_257281) -> (__257282) ->
    (match __257282 with
    | nilLL_27 => constr0(ttU_26)
    | _ =>
      (match __257282 with
      | consLL_28 hd_257283 tl_257284 =>
        let __257285 := ((f_257281) hd_257283) in
        ((free_list_257279) NULL f_257281 tl_257284)))

def pow_26 :=
  lam (x_257286) -> (y_257287) ->
    let loop_257288 :=
      fun loop_257289 (acc_257290) -> (y_257291) ->
        (match (__lte__ y_257291 0) with
        | true_4 => acc_257290
        | false_5 =>
          ((loop_257289) (__mul__ x_257286 acc_257290) (__sub__ y_257291 1)))
    in ((loop_257288) 1 y_257287)

def powm_27 :=
  lam (x_257292) -> (y_257293) -> (m_257294) ->
    let loop_257295 :=
      fun loop_257296 (acc_257297) -> (y_257298) ->
        (match (__lte__ y_257298 0) with
        | true_4 => acc_257297
        | false_5 =>
          ((loop_257296)
            (__mod__ (__mul__ x_257292 acc_257297) m_257294)
              (__sub__ y_257298 1)))
    in ((loop_257295) 1 y_257293)

def ord_28 := lam (c_257299) -> (__ord__ c_257299)

def chr_29 := lam (i_257300) -> (__chr__ i_257300)

def str_30 := lam (c_257301) -> (__push__ "" c_257301)

def strlen_31 := lam (s_257302) -> (__size__ s_257302)

def string_of_int_32 :=
  lam (i_257303) ->
    let aux_257304 :=
      fun aux_257305 (i_257306) ->
        (match (__lte__ 10 i_257306) with
        | true_4 =>
          let r_257307 := (__mod__ i_257306 10) in
          let i_257308 := (__div__ i_257306 10) in
          (__push__ ((aux_257305) i_257308)
            ((chr_29) (__add__ r_257307 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_257306 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_257303) with
    | true_4 => ((aux_257304) i_257303)
    | false_5 => (__cat__ "~" ((aux_257304) (__neg__ i_257303))))

def height_33 :=
  fun height_257309 (__257310) ->
    (match __257310 with
    | Leaf_13 => 0
    | _ =>
      (match __257310 with
      | Node_14 __257311 l_257312 r_257313 =>
        let x_257314 := ((height_257309) l_257312) in
        let y_257315 := ((height_257309) r_257313) in
        (match (__lt__ x_257314 y_257315) with
        | true_4 => (__add__ y_257315 1) | false_5 => (__add__ x_257314 1))))

def size_34 :=
  fun size_257316 (__257317) ->
    (match __257317 with
    | Leaf_13 => 0
    | _ =>
      (match __257317 with
      | Node_14 __257318 l_257319 r_257320 =>
        (__add__ (__add__ 1 ((size_257316) l_257319))
          ((size_257316) r_257320))))

def lookup_35 :=
  fun lookup_257321 (n_257322) -> (__257323) ->
    (match __257323 with
    | Leaf_13 => constr0(false_5)
    | _ =>
      (match __257323 with
      | Node_14 __257324 l_257325 r_257326 =>
        (match (__eq__ __257324 n_257322) with
        | true_4 => constr0(true_4)
        | false_5 =>
          ((or_13)
            ((lookup_257321) n_257322 l_257325)
              ((lookup_257321) n_257322 r_257326)))))

def leaf_worker_40 :=
  fun leaf_worker_257327 (c_257328) ->
    lazy(let _257329 := recv[U](c_257328) in
         (match _257329 with
         | ex1UL_45 m_257330 n_257331 =>
           (match m_257330 with
           | Free_15 => close[true] n_257331
           | Height_16 =>
             let c_257332 := send(n_257331, 0) in
             force(((leaf_worker_257327) c_257332))
           | Size_17 =>
             let c_257333 := send(n_257331, 0) in
             force(((leaf_worker_257327) c_257333))
           | _ =>
             (match m_257330 with
             | Lookup_18 k_257334 =>
               let c_257335 := send(n_257331, constr0(false_5)) in
               force(((leaf_worker_257327) c_257335))))))

def node_worker_41 :=
  fun node_worker_257336 (x_257337) -> (l_257338) -> (r_257339) ->
  (__257340) -o (__257341) -o (__257342) -o
    lazy(let _257343 := recv[U](__257342) in
         (match _257343 with
         | ex1UL_45 m_257344 n_257345 =>
           (match m_257344 with
           | Free_15 =>
             let l_ch_257346 := send(__257340, constr0(Free_15)) in
             let r_ch_257347 := send(__257341, constr0(Free_15)) in
             let __257348 := close[false] l_ch_257346 in
             let __257349 := close[false] r_ch_257347 in close[true] n_257345
           | Height_16 =>
             let l_ch_257350 := send(__257340, constr0(Height_16)) in
             let r_ch_257351 := send(__257341, constr0(Height_16)) in
             let _257352 := recv[U](l_ch_257350) in
             (match _257352 with
             | ex1UL_45 m_257353 n_257354 =>
               let _257355 := recv[U](r_ch_257351) in
               (match _257355 with
               | ex1UL_45 m_257356 n_257357 =>
                 (match (__lt__ m_257353 m_257356) with
                 | true_4 =>
                   let c_257358 := send(n_257345, (__add__ m_257356 1)) in
                   force(((node_worker_257336)
                           x_257337 NULL NULL n_257354 n_257357 c_257358))
                 | false_5 =>
                   let c_257359 := send(n_257345, (__add__ m_257353 1)) in
                   force(((node_worker_257336)
                           x_257337 NULL NULL n_257354 n_257357 c_257359)))))
           | Size_17 =>
             let l_ch_257360 := send(__257340, constr0(Size_17)) in
             let r_ch_257361 := send(__257341, constr0(Size_17)) in
             let _257362 := recv[U](l_ch_257360) in
             (match _257362 with
             | ex1UL_45 m_257363 n_257364 =>
               let _257365 := recv[U](r_ch_257361) in
               (match _257365 with
               | ex1UL_45 m_257366 n_257367 =>
                 let c_257368 :=
                   send(n_257345, (__add__ (__add__ 1 m_257363) m_257366))
                 in
                 force(((node_worker_257336)
                         x_257337 NULL NULL n_257364 n_257367 c_257368))))
           | _ =>
             (match m_257344 with
             | Lookup_18 k_257369 =>
               (match (__eq__ x_257337 k_257369) with
               | true_4 =>
                 let c_257370 := send(n_257345, constr0(true_4)) in
                 force(((node_worker_257336)
                         x_257337 NULL NULL __257340 __257341 c_257370))
               | false_5 =>
                 let l_ch_257371 := send(__257340, (Lookup_18 k_257369)) in
                 let r_ch_257372 := send(__257341, (Lookup_18 k_257369)) in
                 let _257373 := recv[U](l_ch_257371) in
                 (match _257373 with
                 | ex1UL_45 m_257374 n_257375 =>
                   let _257376 := recv[U](r_ch_257372) in
                   (match _257376 with
                   | ex1UL_45 m_257377 n_257378 =>
                     let c_257379 :=
                       send(n_257345, ((or_13) m_257374 m_257377))
                     in
                     force(((node_worker_257336)
                             x_257337 NULL NULL n_257375 n_257378 c_257379)))))))))

def cleaf_42 :=
  lam (__257380) -> lazy(fork lam (_257381) -o ((leaf_worker_40) _257381))

def cnode_43 :=
  lam (x_257382) -> (l_257383) -> (r_257384) -> (__257385) -o (__257386) -o
    lazy(let l_ch_257387 := force(__257385) in
         let r_ch_257388 := force(__257386) in
         fork
           lam (_257389) -o
             ((node_worker_41)
               x_257382 NULL NULL l_ch_257387 r_ch_257388 _257389))

def cfree_44 :=
  lam (t_257390) -> (ct_257391) ->
    lazy(let c_257392 := force(ct_257391) in
         let c_257393 := send(c_257392, constr0(Free_15)) in
         close[false] c_257393)

def cheight_45 :=
  lam (t_257394) -> (ct_257395) ->
    lazy(let c_257396 := force(ct_257395) in
         let c_257397 := send(c_257396, constr0(Height_16)) in
         let _257398 := recv[U](c_257397) in
         (match _257398 with
         | ex1UL_45 m_257399 n_257400 => (ex1UL_45 m_257399 lazy(n_257400))))

def csize_46 :=
  lam (t_257401) -> (ct_257402) ->
    lazy(let c_257403 := force(ct_257402) in
         let c_257404 := send(c_257403, constr0(Size_17)) in
         let _257405 := recv[U](c_257404) in
         (match _257405 with
         | ex1UL_45 m_257406 n_257407 => (ex1UL_45 m_257406 lazy(n_257407))))

def clookup_47 :=
  lam (k_257408) -> (t_257409) -> (ct_257410) ->
    lazy(let c_257411 := force(ct_257410) in
         let c_257412 := send(c_257411, (Lookup_18 k_257408)) in
         let _257413 := recv[U](c_257412) in
         (match _257413 with
         | ex1UL_45 m_257414 n_257415 => (ex1UL_45 m_257414 lazy(n_257415))))

def mytree1_48 :=
  lam (x_257416) ->
    ((cnode_43)
      x_257416 NULL NULL ((cleaf_42) constr0(ttU_26))
        ((cleaf_42) constr0(ttU_26)))

def mytree2_49 :=
  lam (x_257417) ->
    ((cnode_43) x_257417 NULL NULL ((mytree1_48) 1) ((mytree1_48) 2))

def mytree3_50 :=
  lam (x_257418) ->
    ((cnode_43) x_257418 NULL NULL ((mytree2_49) 3) ((mytree2_49) 4))

def mytree4_51 :=
  lam (x_257419) ->
    ((cnode_43) x_257419 NULL NULL ((mytree3_50) 8) ((mytree3_50) 7))

def mytree5_52 :=
  lam (x_257420) ->
    ((cnode_43) x_257420 NULL NULL ((mytree4_51) 9) ((mytree4_51) 10))

def mytree6_53 :=
  lam (x_257421) ->
    ((cnode_43) x_257421 NULL NULL ((mytree5_52) 11) ((mytree5_52) 12))

def main :=
  let ct_257422 := ((mytree6_53) 100) in
  lazy(let _257423 := force(((cheight_45) NULL ct_257422)) in
       (match _257423 with
       | ex1UL_45 m_257424 n_257425 =>
         let _257426 := force(((csize_46) NULL n_257425)) in
         (match _257426 with
         | ex1UL_45 m_257427 n_257428 =>
           let _257429 := force(((clookup_47) 1 NULL n_257428)) in
           (match _257429 with
           | ex1UL_45 m_257430 n_257431 =>
             let _257432 := force(((cfree_44) NULL n_257431)) in
             (match _257432 with
             | ttU_26 =>
               print
                 (__cat__
                   (__cat__
                     (__cat__
                       (__cat__
                         (__cat__
                           (__cat__
                             (__cat__
                               (__cat__ "height := "
                                 ((string_of_int_32) m_257424))
                               "\n")
                             "size   := ")
                           ((string_of_int_32) m_257427))
                         "\n")
                       "lookup := ")
                     ((string_of_bool_15) m_257430))
                   "\n"))))))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn string_of_bool_98(__99%U) {
  match(__99){
    true_4 => {
      x_101 := str("true");
      x_100 := x_101;
    }
    false_5 => {
      x_102 := str("false");
      x_100 := x_102;
    }
  }
  return x_100;
}

fn lte_103(__104%U, __105%U) {
  match(__104){
    zero_6 => {
      x_106 := true_4;
    }
    _ => {
      match[U](__104){
        succ_7(n_108) => {
          match(__105){
            zero_6 => {
              x_109 := false_5;
            }
            _ => {
              match[U](__105){
                succ_7(n_111) => {
                  x_112 := lte_103(n_108, n_111);
                  x_110 := x_112;
                }
              }
              x_109 := x_110;
            }
          }
          x_107 := x_109;
        }
      }
      x_106 := x_107;
    }
  }
  return x_106;
}

fn lt_113(x_114%U, y_115%U) {
  x_117 := mkconstr(succ_7, [x_114]);
  x_116 := lte_103(x_117, y_115);
  return x_116;
}

fn pred_118(__119%U) {
  match(__119){
    zero_6 => {
      x_120 := zero_6;
    }
    _ => {
      match[U](__119){ succ_7(n_122) => {
                         x_121 := n_122;
                       } }
      x_120 := x_121;
    }
  }
  return x_120;
}

fn add_123(__124%U, __125%U) {
  match(__124){
    zero_6 => {
      x_126 := __125;
    }
    _ => {
      match[U](__124){
        succ_7(n_128) => {
          x_129 := add_123(n_128, __125);
          x_130 := mkconstr(succ_7, [x_129]);
          x_127 := x_130;
        }
      }
      x_126 := x_127;
    }
  }
  return x_126;
}

fn sub_131(__132%U, __133%U) {
  match(__133){
    zero_6 => {
      x_134 := __132;
    }
    _ => {
      match[U](__133){
        succ_7(n_136) => {
          x_138 := pred_118(__132);
          x_137 := sub_131(x_138, n_136);
          x_135 := x_137;
        }
      }
      x_134 := x_135;
    }
  }
  return x_134;
}

fn mul_139(__140%U, __141%U) {
  match(__140){
    zero_6 => {
      x_142 := zero_6;
    }
    _ => {
      match[U](__140){
        succ_7(n_144) => {
          x_146 := mul_139(n_144, __141);
          x_145 := add_123(__141, x_146);
          x_143 := x_145;
        }
      }
      x_142 := x_143;
    }
  }
  return x_142;
}

fn div_147(x_148%U, y_149%U) {
  x_151 := lt_113(x_148, y_149);
  match(x_151){
    true_4 => {
      x_150 := zero_6;
    }
    false_5 => {
      x_153 :=
        fn loop_154(x_155%U, y_156%U) {
          x_159 := pred_118(y_156);
          x_158 := sub_131(x_155, x_159);
          match(x_158){
            zero_6 => {
              x_157 := zero_6;
            }
            _ => {
              x_162 := pred_118(y_156);
              x_161 := sub_131(x_155, x_162);
              match[U](x_161){
                succ_7(n_163) => {
                  x_164 := loop_154(n_163, y_156);
                  x_165 := mkconstr(succ_7, [x_164]);
                  x_160 := x_165;
                }
              }
              x_157 := x_160;
            }
          }
          return x_157;
        };
      loop_152 := x_153;
      x_166 := loop_152(x_148, y_149);
      x_150 := x_166;
    }
  }
  return x_150;
}

fn rem_167(x_168%U, y_169%U) {
  x_172 := div_147(x_168, y_169);
  x_171 := mul_139(x_172, y_169);
  x_170 := sub_131(x_168, x_171);
  return x_170;
}

fn free_listUU_173(A_174%U, f_175%U, __176%U) {
  match(__176){
    nilUU_33 => {
      x_177 := ttU_26;
    }
    _ => {
      match[U](__176){
        consUU_34(hd_179, tl_180) => {
          x_182 := f_175(hd_179);
          __181 := x_182;
          x_183 := free_listUU_173(NULL, f_175, tl_180);
          x_178 := x_183;
        }
      }
      x_177 := x_178;
    }
  }
  return x_177;
}

fn free_listUL_184(A_185%U, f_186%U, __187%U) {
  match(__187){
    nilUL_31 => {
      x_188 := ttU_26;
    }
    _ => {
      match[L](__187){
        consUL_32(hd_190, tl_191) => {
          x_193 := f_186(hd_190);
          __192 := x_193;
          x_194 := free_listUL_184(NULL, f_186, tl_191);
          x_189 := x_194;
        }
      }
      x_188 := x_189;
    }
  }
  return x_188;
}

fn free_listLL_195(A_196%U, f_197%U, __198%U) {
  match(__198){
    nilLL_27 => {
      x_199 := ttU_26;
    }
    _ => {
      match[L](__198){
        consLL_28(hd_201, tl_202) => {
          x_204 := f_197(hd_201);
          __203 := x_204;
          x_205 := free_listLL_195(NULL, f_197, tl_202);
          x_200 := x_205;
        }
      }
      x_199 := x_200;
    }
  }
  return x_199;
}

fn pow_206(x_207%U, y_208%U) {
  x_210 :=
    fn loop_211(acc_212%U, y_213%U) {
      x_215 := lte(y_213, 0);
      match(x_215){
        true_4 => {
          x_214 := acc_212;
        }
        false_5 => {
          x_217 := mul(x_207, acc_212);
          x_218 := sub(y_213, 1);
          x_216 := loop_211(x_217, x_218);
          x_214 := x_216;
        }
      }
      return x_214;
    };
  loop_209 := x_210;
  x_219 := loop_209(1, y_208);
  return x_219;
}

fn powm_220(x_221%U, y_222%U, m_223%U) {
  x_225 :=
    fn loop_226(acc_227%U, y_228%U) {
      x_230 := lte(y_228, 0);
      match(x_230){
        true_4 => {
          x_229 := acc_227;
        }
        false_5 => {
          x_233 := mul(x_221, acc_227);
          x_232 := mod(x_233, m_223);
          x_234 := sub(y_228, 1);
          x_231 := loop_226(x_232, x_234);
          x_229 := x_231;
        }
      }
      return x_229;
    };
  loop_224 := x_225;
  x_235 := loop_224(1, y_222);
  return x_235;
}

fn ord_236(c_237%U) {
  x_238 := ord(c_237);
  return x_238;
}

fn chr_239(i_240%U) {
  x_241 := chr(i_240);
  return x_241;
}

fn str_242(c_243%U) {
  x_245 := str("");
  x_244 := push(x_245, c_243);
  return x_244;
}

fn strlen_246(s_247%U) {
  x_248 := size(s_247);
  return x_248;
}

fn string_of_int_249(i_250%U) {
  x_252 :=
    fn aux_253(i_254%U) {
      x_256 := lte(10, i_254);
      match(x_256){
        true_4 => {
          x_258 := mod(i_254, 10);
          r_257 := x_258;
          x_260 := div(i_254, 10);
          i_259 := x_260;
          x_262 := aux_253(i_259);
          x_265 := ord_236(0);
          x_264 := add(r_257, x_265);
          x_263 := chr_239(x_264);
          x_261 := push(x_262, x_263);
          x_255 := x_261;
        }
        false_5 => {
          x_269 := ord_236(0);
          x_268 := add(i_254, x_269);
          x_267 := chr_239(x_268);
          x_266 := str_242(x_267);
          x_255 := x_266;
        }
      }
      return x_255;
    };
  aux_251 := x_252;
  x_271 := lte(0, i_250);
  match(x_271){
    true_4 => {
      x_272 := aux_251(i_250);
      x_270 := x_272;
    }
    false_5 => {
      x_274 := str("~");
      x_276 := neg(i_250);
      x_275 := aux_251(x_276);
      x_273 := cat(x_274, x_275);
      x_270 := x_273;
    }
  }
  return x_270;
}

fn height_277(__278%U) {
  match(__278){
    Leaf_13 => {
      x_279 := 0;
    }
    _ => {
      match[U](__278){
        Node_14(__281, l_282, r_283) => {
          x_285 := height_277(l_282);
          x_284 := x_285;
          x_287 := height_277(r_283);
          y_286 := x_287;
          x_289 := lt(x_284, y_286);
          match(x_289){
            true_4 => {
              x_290 := add(y_286, 1);
              x_288 := x_290;
            }
            false_5 => {
              x_291 := add(x_284, 1);
              x_288 := x_291;
            }
          }
          x_280 := x_288;
        }
      }
      x_279 := x_280;
    }
  }
  return x_279;
}

fn size_292(__293%U) {
  match(__293){
    Leaf_13 => {
      x_294 := 0;
    }
    _ => {
      match[U](__293){
        Node_14(__296, l_297, r_298) => {
          x_301 := size_292(l_297);
          x_300 := add(1, x_301);
          x_302 := size_292(r_298);
          x_299 := add(x_300, x_302);
          x_295 := x_299;
        }
      }
      x_294 := x_295;
    }
  }
  return x_294;
}

fn lookup_303(n_304%U, __305%U) {
  match(__305){
    Leaf_13 => {
      x_306 := false_5;
    }
    _ => {
      match[U](__305){
        Node_14(__308, l_309, r_310) => {
          x_312 := eq(__308, n_304);
          match(x_312){
            true_4 => {
              x_311 := true_4;
            }
            false_5 => {
              x_314 := lookup_303(n_304, l_309);
              x_315 := lookup_303(n_304, r_310);
              x_313 := or_87(x_314, x_315);
              x_311 := x_313;
            }
          }
          x_307 := x_311;
        }
      }
      x_306 := x_307;
    }
  }
  return x_306;
}

fn leaf_worker_316(c_317%U) {
  x_318 :=
    lazy {
      x_320 := recv[U](c_317);
      _319 := x_320;
      match[L](_319){
        ex1UL_45(m_322, n_323) => {
          match(m_322){
            Free_15 => {
              x_325 := close[true](n_323);
              x_324 := x_325;
            }
            Height_16 => {
              x_327 := send(n_323, 0);
              c_326 := x_327;
              x_329 := leaf_worker_316(c_326);
              x_328 := force(x_329);
              x_324 := x_328;
            }
            Size_17 => {
              x_331 := send(n_323, 0);
              c_330 := x_331;
              x_333 := leaf_worker_316(c_330);
              x_332 := force(x_333);
              x_324 := x_332;
            }
            _ => {
              match[U](m_322){
                Lookup_18(k_335) => {
                  x_337 := send(n_323, false_5);
                  c_336 := x_337;
                  x_339 := leaf_worker_316(c_336);
                  x_338 := force(x_339);
                  x_334 := x_338;
                }
              }
              x_324 := x_334;
            }
          }
          x_321 := x_324;
        }
      }
      return x_321;
    };
  return x_318;
}

fn node_worker_340(x_341%U, l_342%U, r_343%U, __344%L, __345%L, __346%L) {
  x_347 :=
    lazy {
      x_349 := recv[U](__346);
      _348 := x_349;
      match[L](_348){
        ex1UL_45(m_351, n_352) => {
          match(m_351){
            Free_15 => {
              x_355 := send(__344, Free_15);
              l_ch_354 := x_355;
              x_357 := send(__345, Free_15);
              r_ch_356 := x_357;
              x_359 := close[false](l_ch_354);
              __358 := x_359;
              x_361 := close[false](r_ch_356);
              __360 := x_361;
              x_362 := close[true](n_352);
              x_353 := x_362;
            }
            Height_16 => {
              x_364 := send(__344, Height_16);
              l_ch_363 := x_364;
              x_366 := send(__345, Height_16);
              r_ch_365 := x_366;
              x_368 := recv[U](l_ch_363);
              _367 := x_368;
              match[L](_367){
                ex1UL_45(m_370, n_371) => {
                  x_373 := recv[U](r_ch_365);
                  _372 := x_373;
                  match[L](_372){
                    ex1UL_45(m_375, n_376) => {
                      x_378 := lt(m_370, m_375);
                      match(x_378){
                        true_4 => {
                          x_381 := add(m_375, 1);
                          x_380 := send(n_352, x_381);
                          c_379 := x_380;
                          x_383 := node_worker_340(x_341, NULL, NULL, n_371, n_376, c_379);
                          x_382 := force(x_383);
                          x_377 := x_382;
                        }
                        false_5 => {
                          x_386 := add(m_370, 1);
                          x_385 := send(n_352, x_386);
                          c_384 := x_385;
                          x_388 := node_worker_340(x_341, NULL, NULL, n_371, n_376, c_384);
                          x_387 := force(x_388);
                          x_377 := x_387;
                        }
                      }
                      x_374 := x_377;
                    }
                  }
                  x_369 := x_374;
                }
              }
              x_353 := x_369;
            }
            Size_17 => {
              x_390 := send(__344, Size_17);
              l_ch_389 := x_390;
              x_392 := send(__345, Size_17);
              r_ch_391 := x_392;
              x_394 := recv[U](l_ch_389);
              _393 := x_394;
              match[L](_393){
                ex1UL_45(m_396, n_397) => {
                  x_399 := recv[U](r_ch_391);
                  _398 := x_399;
                  match[L](_398){
                    ex1UL_45(m_401, n_402) => {
                      x_406 := add(1, m_396);
                      x_405 := add(x_406, m_401);
                      x_404 := send(n_352, x_405);
                      c_403 := x_404;
                      x_408 := node_worker_340(x_341, NULL, NULL, n_397, n_402, c_403);
                      x_407 := force(x_408);
                      x_400 := x_407;
                    }
                  }
                  x_395 := x_400;
                }
              }
              x_353 := x_395;
            }
            _ => {
              match[U](m_351){
                Lookup_18(k_410) => {
                  x_412 := eq(x_341, k_410);
                  match(x_412){
                    true_4 => {
                      x_414 := send(n_352, true_4);
                      c_413 := x_414;
                      x_416 := node_worker_340(x_341, NULL, NULL, __344, __345, c_413);
                      x_415 := force(x_416);
                      x_411 := x_415;
                    }
                    false_5 => {
                      x_419 := mkconstr(Lookup_18, [k_410]);
                      x_418 := send(__344, x_419);
                      l_ch_417 := x_418;
                      x_422 := mkconstr(Lookup_18, [k_410]);
                      x_421 := send(__345, x_422);
                      r_ch_420 := x_421;
                      x_424 := recv[U](l_ch_417);
                      _423 := x_424;
                      match[L](_423){
                        ex1UL_45(m_426, n_427) => {
                          x_429 := recv[U](r_ch_420);
                          _428 := x_429;
                          match[L](_428){
                            ex1UL_45(m_431, n_432) => {
                              x_435 := or_87(m_426, m_431);
                              x_434 := send(n_352, x_435);
                              c_433 := x_434;
                              x_437 := node_worker_340(x_341, NULL, NULL, n_427, n_432, c_433);
                              x_436 := force(x_437);
                              x_430 := x_436;
                            }
                          }
                          x_425 := x_430;
                        }
                      }
                      x_411 := x_425;
                    }
                  }
                  x_409 := x_411;
                }
              }
              x_353 := x_409;
            }
          }
          x_350 := x_353;
        }
      }
      return x_350;
    };
  return x_347;
}

fn cleaf_438(__439%U) {
  x_440 :=
    lazy {
      x_442 :=
        fn lam_443(_444%L) { x_445 := leaf_worker_316(_444);
                             return x_445; };
      x_441 := fork(x_442);
      return x_441;
    };
  return x_440;
}

fn cnode_446(x_447%U, l_448%U, r_449%U, __450%L, __451%L) {
  x_452 :=
    lazy {
      x_454 := force(__450);
      l_ch_453 := x_454;
      x_456 := force(__451);
      r_ch_455 := x_456;
      x_458 :=
        fn lam_459(_460%L) {
          x_461 := node_worker_340(x_447, NULL, NULL, l_ch_453, r_ch_455, _460);
          return x_461;
        };
      x_457 := fork(x_458);
      return x_457;
    };
  return x_452;
}

fn cfree_462(t_463%U, ct_464%U) {
  x_465 :=
    lazy {
      x_467 := force(ct_464);
      c_466 := x_467;
      x_469 := send(c_466, Free_15);
      c_468 := x_469;
      x_470 := close[false](c_468);
      return x_470;
    };
  return x_465;
}

fn cheight_471(t_472%U, ct_473%U) {
  x_474 :=
    lazy {
      x_476 := force(ct_473);
      c_475 := x_476;
      x_478 := send(c_475, Height_16);
      c_477 := x_478;
      x_480 := recv[U](c_477);
      _479 := x_480;
      match[L](_479){
        ex1UL_45(m_482, n_483) => {
          x_484 := lazy { 
                          return n_483; };
          x_485 := mkconstr(ex1UL_45, [m_482, x_484]);
          x_481 := x_485;
        }
      }
      return x_481;
    };
  return x_474;
}

fn csize_486(t_487%U, ct_488%U) {
  x_489 :=
    lazy {
      x_491 := force(ct_488);
      c_490 := x_491;
      x_493 := send(c_490, Size_17);
      c_492 := x_493;
      x_495 := recv[U](c_492);
      _494 := x_495;
      match[L](_494){
        ex1UL_45(m_497, n_498) => {
          x_499 := lazy { 
                          return n_498; };
          x_500 := mkconstr(ex1UL_45, [m_497, x_499]);
          x_496 := x_500;
        }
      }
      return x_496;
    };
  return x_489;
}

fn clookup_501(k_502%U, t_503%U, ct_504%U) {
  x_505 :=
    lazy {
      x_507 := force(ct_504);
      c_506 := x_507;
      x_510 := mkconstr(Lookup_18, [k_502]);
      x_509 := send(c_506, x_510);
      c_508 := x_509;
      x_512 := recv[U](c_508);
      _511 := x_512;
      match[L](_511){
        ex1UL_45(m_514, n_515) => {
          x_516 := lazy { 
                          return n_515; };
          x_517 := mkconstr(ex1UL_45, [m_514, x_516]);
          x_513 := x_517;
        }
      }
      return x_513;
    };
  return x_505;
}

fn mytree1_518(x_519%U) {
  x_521 := cleaf_438(ttU_26);
  x_522 := cleaf_438(ttU_26);
  x_520 := cnode_446(x_519, NULL, NULL, x_521, x_522);
  return x_520;
}

fn mytree2_523(x_524%U) {
  x_526 := mytree1_518(1);
  x_527 := mytree1_518(2);
  x_525 := cnode_446(x_524, NULL, NULL, x_526, x_527);
  return x_525;
}

fn mytree3_528(x_529%U) {
  x_531 := mytree2_523(3);
  x_532 := mytree2_523(4);
  x_530 := cnode_446(x_529, NULL, NULL, x_531, x_532);
  return x_530;
}

fn mytree4_533(x_534%U) {
  x_536 := mytree3_528(8);
  x_537 := mytree3_528(7);
  x_535 := cnode_446(x_534, NULL, NULL, x_536, x_537);
  return x_535;
}

fn mytree5_538(x_539%U) {
  x_541 := mytree4_533(9);
  x_542 := mytree4_533(10);
  x_540 := cnode_446(x_539, NULL, NULL, x_541, x_542);
  return x_540;
}

fn mytree6_543(x_544%U) {
  x_546 := mytree5_538(11);
  x_547 := mytree5_538(12);
  x_545 := cnode_446(x_544, NULL, NULL, x_546, x_547);
  return x_545;
}

main := {
  x_549 := mytree6_543(100);
  ct_548 := x_549;
  x_550 :=
    lazy {
      x_553 := cheight_471(NULL, ct_548);
      x_552 := force(x_553);
      _551 := x_552;
      match[L](_551){
        ex1UL_45(m_555, n_556) => {
          x_559 := csize_486(NULL, n_556);
          x_558 := force(x_559);
          _557 := x_558;
          match[L](_557){
            ex1UL_45(m_561, n_562) => {
              x_565 := clookup_501(1, NULL, n_562);
              x_564 := force(x_565);
              _563 := x_564;
              match[L](_563){
                ex1UL_45(m_567, n_568) => {
                  x_571 := cfree_462(NULL, n_568);
                  x_570 := force(x_571);
                  _569 := x_570;
                  match(_569){
                    ttU_26 => {
                      x_582 := str("height := ");
                      x_583 := string_of_int_249(m_555);
                      x_581 := cat(x_582, x_583);
                      x_584 := str("\n");
                      x_580 := cat(x_581, x_584);
                      x_585 := str("size   := ");
                      x_579 := cat(x_580, x_585);
                      x_586 := string_of_int_249(m_561);
                      x_578 := cat(x_579, x_586);
                      x_587 := str("\n");
                      x_577 := cat(x_578, x_587);
                      x_588 := str("lookup := ");
                      x_576 := cat(x_577, x_588);
                      x_589 := string_of_bool_98(m_567);
                      x_575 := cat(x_576, x_589);
                      x_590 := str("\n");
                      x_574 := cat(x_575, x_590);
                      x_573 := print(x_574);
                      x_572 := x_573;
                    }
                  }
                  x_566 := x_572;
                }
              }
              x_560 := x_566;
            }
          }
          x_554 := x_560;
        }
      }
      return x_554;
    };
  return x_550;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn string_of_bool_98(__99%U) {
  match(__99){
    true_4 => {
      x_101 := str("true");
      x_100 := x_101;
    }
    false_5 => {
      x_102 := str("false");
      x_100 := x_102;
    }
  }
  return x_100;
}

fn lte_103(__104%U, __105%U) {
  match(__104){
    zero_6 => {
      x_106 := true_4;
    }
    _ => {
      match[U](__104){
        succ_7(n_108) => {
          match(__105){
            zero_6 => {
              x_109 := false_5;
            }
            _ => {
              match[U](__105){
                succ_7(n_111) => {
                  x_112 := lte_103(n_108, n_111);
                  x_110 := x_112;
                }
              }
              x_109 := x_110;
            }
          }
          x_107 := x_109;
        }
      }
      x_106 := x_107;
    }
  }
  return x_106;
}

fn lt_113(x_114%U, y_115%U) {
  x_117 := mkconstr(succ_7, [x_114]);
  x_116 := lte_103(x_117, y_115);
  return x_116;
}

fn pred_118(__119%U) {
  match(__119){
    zero_6 => {
      x_120 := zero_6;
    }
    _ => {
      match[U](__119){ succ_7(n_122) => {
                         x_121 := n_122;
                       } }
      x_120 := x_121;
    }
  }
  return x_120;
}

fn add_123(__124%U, __125%U) {
  match(__124){
    zero_6 => {
      x_126 := __125;
    }
    _ => {
      match[U](__124){
        succ_7(n_128) => {
          x_129 := add_123(n_128, __125);
          x_130 := mkconstr(succ_7, [x_129]);
          x_127 := x_130;
        }
      }
      x_126 := x_127;
    }
  }
  return x_126;
}

fn sub_131(__132%U, __133%U) {
  match(__133){
    zero_6 => {
      x_134 := __132;
    }
    _ => {
      match[U](__133){
        succ_7(n_136) => {
          x_138 := pred_118(__132);
          x_137 := sub_131(x_138, n_136);
          x_135 := x_137;
        }
      }
      x_134 := x_135;
    }
  }
  return x_134;
}

fn mul_139(__140%U, __141%U) {
  match(__140){
    zero_6 => {
      x_142 := zero_6;
    }
    _ => {
      match[U](__140){
        succ_7(n_144) => {
          x_146 := mul_139(n_144, __141);
          x_145 := add_123(__141, x_146);
          x_143 := x_145;
        }
      }
      x_142 := x_143;
    }
  }
  return x_142;
}

fn div_147(x_148%U, y_149%U) {
  x_151 := lt_113(x_148, y_149);
  match(x_151){
    true_4 => {
      x_150 := zero_6;
    }
    false_5 => {
      x_153 :=
        fn loop_154(x_155%U, y_156%U) {
          x_159 := pred_118(y_156);
          x_158 := sub_131(x_155, x_159);
          match(x_158){
            zero_6 => {
              x_157 := zero_6;
            }
            _ => {
              x_162 := pred_118(y_156);
              x_161 := sub_131(x_155, x_162);
              match[U](x_161){
                succ_7(n_163) => {
                  x_164 := loop_154(n_163, y_156);
                  x_165 := mkconstr(succ_7, [x_164]);
                  x_160 := x_165;
                }
              }
              x_157 := x_160;
            }
          }
          return x_157;
        };
      loop_152 := x_153;
      x_166 := loop_152(x_148, y_149);
      x_150 := x_166;
    }
  }
  return x_150;
}

fn rem_167(x_168%U, y_169%U) {
  x_172 := div_147(x_168, y_169);
  x_171 := mul_139(x_172, y_169);
  x_170 := sub_131(x_168, x_171);
  return x_170;
}

fn free_listUU_173(A_174%U, f_175%U, __176%U) {
  match(__176){
    nilUU_33 => {
      x_177 := ttU_26;
    }
    _ => {
      match[U](__176){
        consUU_34(hd_179, tl_180) => {
          x_182 := f_175(hd_179);
          __181 := x_182;
          x_183 := free_listUU_173(NULL, f_175, tl_180);
          x_178 := x_183;
        }
      }
      x_177 := x_178;
    }
  }
  return x_177;
}

fn free_listUL_184(A_185%U, f_186%U, __187%U) {
  match(__187){
    nilUL_31 => {
      x_188 := ttU_26;
    }
    _ => {
      match[L](__187){
        consUL_32(hd_190, tl_191) => {
          x_193 := f_186(hd_190);
          __192 := x_193;
          x_194 := free_listUL_184(NULL, f_186, tl_191);
          x_189 := x_194;
          free(__187);
        }
      }
      x_188 := x_189;
    }
  }
  return x_188;
}

fn free_listLL_195(A_196%U, f_197%U, __198%U) {
  match(__198){
    nilLL_27 => {
      x_199 := ttU_26;
    }
    _ => {
      match[L](__198){
        consLL_28(hd_201, tl_202) => {
          x_204 := f_197(hd_201);
          __203 := x_204;
          x_205 := free_listLL_195(NULL, f_197, tl_202);
          x_200 := x_205;
          free(__198);
        }
      }
      x_199 := x_200;
    }
  }
  return x_199;
}

fn pow_206(x_207%U, y_208%U) {
  x_210 :=
    fn loop_211(acc_212%U, y_213%U) {
      x_215 := lte(y_213, 0);
      match(x_215){
        true_4 => {
          x_214 := acc_212;
        }
        false_5 => {
          x_217 := mul(x_207, acc_212);
          x_218 := sub(y_213, 1);
          x_216 := loop_211(x_217, x_218);
          x_214 := x_216;
        }
      }
      return x_214;
    };
  loop_209 := x_210;
  x_219 := loop_209(1, y_208);
  return x_219;
}

fn powm_220(x_221%U, y_222%U, m_223%U) {
  x_225 :=
    fn loop_226(acc_227%U, y_228%U) {
      x_230 := lte(y_228, 0);
      match(x_230){
        true_4 => {
          x_229 := acc_227;
        }
        false_5 => {
          x_233 := mul(x_221, acc_227);
          x_232 := mod(x_233, m_223);
          x_234 := sub(y_228, 1);
          x_231 := loop_226(x_232, x_234);
          x_229 := x_231;
        }
      }
      return x_229;
    };
  loop_224 := x_225;
  x_235 := loop_224(1, y_222);
  return x_235;
}

fn ord_236(c_237%U) {
  x_238 := ord(c_237);
  return x_238;
}

fn chr_239(i_240%U) {
  x_241 := chr(i_240);
  return x_241;
}

fn str_242(c_243%U) {
  x_245 := str("");
  x_244 := push(x_245, c_243);
  return x_244;
}

fn strlen_246(s_247%U) {
  x_248 := size(s_247);
  return x_248;
}

fn string_of_int_249(i_250%U) {
  x_252 :=
    fn aux_253(i_254%U) {
      x_256 := lte(10, i_254);
      match(x_256){
        true_4 => {
          x_258 := mod(i_254, 10);
          r_257 := x_258;
          x_260 := div(i_254, 10);
          i_259 := x_260;
          x_262 := aux_253(i_259);
          x_265 := ord_236(0);
          x_264 := add(r_257, x_265);
          x_263 := chr_239(x_264);
          x_261 := push(x_262, x_263);
          x_255 := x_261;
        }
        false_5 => {
          x_269 := ord_236(0);
          x_268 := add(i_254, x_269);
          x_267 := chr_239(x_268);
          x_266 := str_242(x_267);
          x_255 := x_266;
        }
      }
      return x_255;
    };
  aux_251 := x_252;
  x_271 := lte(0, i_250);
  match(x_271){
    true_4 => {
      x_272 := aux_251(i_250);
      x_270 := x_272;
    }
    false_5 => {
      x_274 := str("~");
      x_276 := neg(i_250);
      x_275 := aux_251(x_276);
      x_273 := cat(x_274, x_275);
      x_270 := x_273;
    }
  }
  return x_270;
}

fn height_277(__278%U) {
  match(__278){
    Leaf_13 => {
      x_279 := 0;
    }
    _ => {
      match[U](__278){
        Node_14(__281, l_282, r_283) => {
          x_285 := height_277(l_282);
          x_284 := x_285;
          x_287 := height_277(r_283);
          y_286 := x_287;
          x_289 := lt(x_284, y_286);
          match(x_289){
            true_4 => {
              x_290 := add(y_286, 1);
              x_288 := x_290;
            }
            false_5 => {
              x_291 := add(x_284, 1);
              x_288 := x_291;
            }
          }
          x_280 := x_288;
        }
      }
      x_279 := x_280;
    }
  }
  return x_279;
}

fn size_292(__293%U) {
  match(__293){
    Leaf_13 => {
      x_294 := 0;
    }
    _ => {
      match[U](__293){
        Node_14(__296, l_297, r_298) => {
          x_301 := size_292(l_297);
          x_300 := add(1, x_301);
          x_302 := size_292(r_298);
          x_299 := add(x_300, x_302);
          x_295 := x_299;
        }
      }
      x_294 := x_295;
    }
  }
  return x_294;
}

fn lookup_303(n_304%U, __305%U) {
  match(__305){
    Leaf_13 => {
      x_306 := false_5;
    }
    _ => {
      match[U](__305){
        Node_14(__308, l_309, r_310) => {
          x_312 := eq(__308, n_304);
          match(x_312){
            true_4 => {
              x_311 := true_4;
            }
            false_5 => {
              x_314 := lookup_303(n_304, l_309);
              x_315 := lookup_303(n_304, r_310);
              x_313 := or_87(x_314, x_315);
              x_311 := x_313;
            }
          }
          x_307 := x_311;
        }
      }
      x_306 := x_307;
    }
  }
  return x_306;
}

fn leaf_worker_316(c_317%U) {
  x_318 :=
    lazy {
      x_320 := recv[U](c_317);
      _319 := x_320;
      match[L](_319){
        ex1UL_45(m_322, n_323) => {
          match(m_322){
            Free_15 => {
              x_325 := close[true](n_323);
              x_324 := x_325;
            }
            Height_16 => {
              x_327 := send(n_323, 0);
              c_326 := x_327;
              x_329 := leaf_worker_316(c_326);
              x_328 := force(x_329);
              x_324 := x_328;
            }
            Size_17 => {
              x_331 := send(n_323, 0);
              c_330 := x_331;
              x_333 := leaf_worker_316(c_330);
              x_332 := force(x_333);
              x_324 := x_332;
            }
            _ => {
              match[U](m_322){
                Lookup_18(k_335) => {
                  x_337 := send(n_323, false_5);
                  c_336 := x_337;
                  x_339 := leaf_worker_316(c_336);
                  x_338 := force(x_339);
                  x_334 := x_338;
                }
              }
              x_324 := x_334;
            }
          }
          x_321 := x_324;
          free(_319);
        }
      }
      return x_321;
    };
  return x_318;
}

fn node_worker_340(x_341%U, l_342%U, r_343%U, __344%L, __345%L, __346%L) {
  x_347 :=
    lazy {
      x_349 := recv[U](__346);
      _348 := x_349;
      match[L](_348){
        ex1UL_45(m_351, n_352) => {
          match(m_351){
            Free_15 => {
              x_355 := send(__344, Free_15);
              l_ch_354 := x_355;
              x_357 := send(__345, Free_15);
              r_ch_356 := x_357;
              x_359 := close[false](l_ch_354);
              __358 := x_359;
              x_361 := close[false](r_ch_356);
              __360 := x_361;
              x_362 := close[true](n_352);
              x_353 := x_362;
            }
            Height_16 => {
              x_364 := send(__344, Height_16);
              l_ch_363 := x_364;
              x_366 := send(__345, Height_16);
              r_ch_365 := x_366;
              x_368 := recv[U](l_ch_363);
              _367 := x_368;
              match[L](_367){
                ex1UL_45(m_370, n_371) => {
                  x_373 := recv[U](r_ch_365);
                  _372 := x_373;
                  match[L](_372){
                    ex1UL_45(m_375, n_376) => {
                      x_378 := lt(m_370, m_375);
                      match(x_378){
                        true_4 => {
                          x_381 := add(m_375, 1);
                          x_380 := send(n_352, x_381);
                          c_379 := x_380;
                          x_383 := node_worker_340(x_341, NULL, NULL, n_371, n_376, c_379);
                          x_382 := force(x_383);
                          x_377 := x_382;
                        }
                        false_5 => {
                          x_386 := add(m_370, 1);
                          x_385 := send(n_352, x_386);
                          c_384 := x_385;
                          x_388 := node_worker_340(x_341, NULL, NULL, n_371, n_376, c_384);
                          x_387 := force(x_388);
                          x_377 := x_387;
                        }
                      }
                      x_374 := x_377;
                      free(_372);
                    }
                  }
                  x_369 := x_374;
                  free(_367);
                }
              }
              x_353 := x_369;
            }
            Size_17 => {
              x_390 := send(__344, Size_17);
              l_ch_389 := x_390;
              x_392 := send(__345, Size_17);
              r_ch_391 := x_392;
              x_394 := recv[U](l_ch_389);
              _393 := x_394;
              match[L](_393){
                ex1UL_45(m_396, n_397) => {
                  x_399 := recv[U](r_ch_391);
                  _398 := x_399;
                  match[L](_398){
                    ex1UL_45(m_401, n_402) => {
                      x_406 := add(1, m_396);
                      x_405 := add(x_406, m_401);
                      x_404 := send(n_352, x_405);
                      c_403 := x_404;
                      x_408 := node_worker_340(x_341, NULL, NULL, n_397, n_402, c_403);
                      x_407 := force(x_408);
                      x_400 := x_407;
                      free(_398);
                    }
                  }
                  x_395 := x_400;
                  free(_393);
                }
              }
              x_353 := x_395;
            }
            _ => {
              match[U](m_351){
                Lookup_18(k_410) => {
                  x_412 := eq(x_341, k_410);
                  match(x_412){
                    true_4 => {
                      x_414 := send(n_352, true_4);
                      c_413 := x_414;
                      x_416 := node_worker_340(x_341, NULL, NULL, __344, __345, c_413);
                      x_415 := force(x_416);
                      x_411 := x_415;
                    }
                    false_5 => {
                      x_419 := mkconstr(Lookup_18, [k_410]);
                      x_418 := send(__344, x_419);
                      l_ch_417 := x_418;
                      x_422 := mkconstr(Lookup_18, [k_410]);
                      x_421 := send(__345, x_422);
                      r_ch_420 := x_421;
                      x_424 := recv[U](l_ch_417);
                      _423 := x_424;
                      match[L](_423){
                        ex1UL_45(m_426, n_427) => {
                          x_429 := recv[U](r_ch_420);
                          _428 := x_429;
                          match[L](_428){
                            ex1UL_45(m_431, n_432) => {
                              x_435 := or_87(m_426, m_431);
                              x_434 := send(n_352, x_435);
                              c_433 := x_434;
                              x_437 := node_worker_340(x_341, NULL, NULL, n_427, n_432, c_433);
                              x_436 := force(x_437);
                              x_430 := x_436;
                              free(_428);
                            }
                          }
                          x_425 := x_430;
                          free(_423);
                        }
                      }
                      x_411 := x_425;
                    }
                  }
                  x_409 := x_411;
                }
              }
              x_353 := x_409;
            }
          }
          x_350 := x_353;
          free(_348);
        }
      }
      return x_350;
    };
  return x_347;
}

fn cleaf_438(__439%U) {
  x_440 :=
    lazy {
      x_442 :=
        fn lam_443(_444%L) { x_445 := leaf_worker_316(_444);
                             return x_445; };
      x_441 := fork(x_442);
      return x_441;
    };
  return x_440;
}

fn cnode_446(x_447%U, l_448%U, r_449%U, __450%L, __451%L) {
  x_452 :=
    lazy {
      x_454 := force(__450);
      l_ch_453 := x_454;
      x_456 := force(__451);
      r_ch_455 := x_456;
      x_458 :=
        fn lam_459(_460%L) {
          x_461 := node_worker_340(x_447, NULL, NULL, l_ch_453, r_ch_455, _460);
          return x_461;
        };
      x_457 := fork(x_458);
      return x_457;
    };
  return x_452;
}

fn cfree_462(t_463%U, ct_464%U) {
  x_465 :=
    lazy {
      x_467 := force(ct_464);
      c_466 := x_467;
      x_469 := send(c_466, Free_15);
      c_468 := x_469;
      x_470 := close[false](c_468);
      return x_470;
    };
  return x_465;
}

fn cheight_471(t_472%U, ct_473%U) {
  x_474 :=
    lazy {
      x_476 := force(ct_473);
      c_475 := x_476;
      x_478 := send(c_475, Height_16);
      c_477 := x_478;
      x_480 := recv[U](c_477);
      _479 := x_480;
      match[L](_479){
        ex1UL_45(m_482, n_483) => {
          x_484 := lazy { 
                          return n_483; };
          x_485 := reconstr(_479, ex1UL_45, [m_482, x_484]);
          x_481 := x_485;
        }
      }
      return x_481;
    };
  return x_474;
}

fn csize_486(t_487%U, ct_488%U) {
  x_489 :=
    lazy {
      x_491 := force(ct_488);
      c_490 := x_491;
      x_493 := send(c_490, Size_17);
      c_492 := x_493;
      x_495 := recv[U](c_492);
      _494 := x_495;
      match[L](_494){
        ex1UL_45(m_497, n_498) => {
          x_499 := lazy { 
                          return n_498; };
          x_500 := reconstr(_494, ex1UL_45, [m_497, x_499]);
          x_496 := x_500;
        }
      }
      return x_496;
    };
  return x_489;
}

fn clookup_501(k_502%U, t_503%U, ct_504%U) {
  x_505 :=
    lazy {
      x_507 := force(ct_504);
      c_506 := x_507;
      x_510 := mkconstr(Lookup_18, [k_502]);
      x_509 := send(c_506, x_510);
      c_508 := x_509;
      x_512 := recv[U](c_508);
      _511 := x_512;
      match[L](_511){
        ex1UL_45(m_514, n_515) => {
          x_516 := lazy { 
                          return n_515; };
          x_517 := reconstr(_511, ex1UL_45, [m_514, x_516]);
          x_513 := x_517;
        }
      }
      return x_513;
    };
  return x_505;
}

fn mytree1_518(x_519%U) {
  x_521 := cleaf_438(ttU_26);
  x_522 := cleaf_438(ttU_26);
  x_520 := cnode_446(x_519, NULL, NULL, x_521, x_522);
  return x_520;
}

fn mytree2_523(x_524%U) {
  x_526 := mytree1_518(1);
  x_527 := mytree1_518(2);
  x_525 := cnode_446(x_524, NULL, NULL, x_526, x_527);
  return x_525;
}

fn mytree3_528(x_529%U) {
  x_531 := mytree2_523(3);
  x_532 := mytree2_523(4);
  x_530 := cnode_446(x_529, NULL, NULL, x_531, x_532);
  return x_530;
}

fn mytree4_533(x_534%U) {
  x_536 := mytree3_528(8);
  x_537 := mytree3_528(7);
  x_535 := cnode_446(x_534, NULL, NULL, x_536, x_537);
  return x_535;
}

fn mytree5_538(x_539%U) {
  x_541 := mytree4_533(9);
  x_542 := mytree4_533(10);
  x_540 := cnode_446(x_539, NULL, NULL, x_541, x_542);
  return x_540;
}

fn mytree6_543(x_544%U) {
  x_546 := mytree5_538(11);
  x_547 := mytree5_538(12);
  x_545 := cnode_446(x_544, NULL, NULL, x_546, x_547);
  return x_545;
}

main := {
  x_549 := mytree6_543(100);
  ct_548 := x_549;
  x_550 :=
    lazy {
      x_553 := cheight_471(NULL, ct_548);
      x_552 := force(x_553);
      _551 := x_552;
      match[L](_551){
        ex1UL_45(m_555, n_556) => {
          x_559 := csize_486(NULL, n_556);
          x_558 := force(x_559);
          _557 := x_558;
          match[L](_557){
            ex1UL_45(m_561, n_562) => {
              x_565 := clookup_501(1, NULL, n_562);
              x_564 := force(x_565);
              _563 := x_564;
              match[L](_563){
                ex1UL_45(m_567, n_568) => {
                  x_571 := cfree_462(NULL, n_568);
                  x_570 := force(x_571);
                  _569 := x_570;
                  match(_569){
                    ttU_26 => {
                      x_582 := str("height := ");
                      x_583 := string_of_int_249(m_555);
                      x_581 := cat(x_582, x_583);
                      x_584 := str("\n");
                      x_580 := cat(x_581, x_584);
                      x_585 := str("size   := ");
                      x_579 := cat(x_580, x_585);
                      x_586 := string_of_int_249(m_561);
                      x_578 := cat(x_579, x_586);
                      x_587 := str("\n");
                      x_577 := cat(x_578, x_587);
                      x_588 := str("lookup := ");
                      x_576 := cat(x_577, x_588);
                      x_589 := string_of_bool_98(m_567);
                      x_575 := cat(x_576, x_589);
                      x_590 := str("\n");
                      x_574 := cat(x_575, x_590);
                      x_573 := print(x_574);
                      x_572 := x_573;
                    }
                  }
                  x_566 := x_572;
                  free(_563);
                }
              }
              x_560 := x_566;
              free(_557);
            }
          }
          x_554 := x_560;
          free(_551);
        }
      }
      return x_554;
    };
  return x_550;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_591(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_592(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_593 := fn0_idU_591(A_2, m_3);
  return x_593;
}

fn fn0_idL_594(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_595(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_596 := fn0_idL_594(A_5, m_6);
  return x_596;
}

fn fn0_rwlUU_597(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_598(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_599 := fn0_rwlUU_597(A_8, m_9, n_10, B_11, __12, __13);
  return x_599;
}

fn fn0_rwlUL_600(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_601(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_602 := fn0_rwlUL_600(A_15, m_16, n_17, B_18, __19, __20);
  return x_602;
}

fn fn0_rwlLU_603(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_604(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_605 := fn0_rwlLU_603(A_22, m_23, n_24, B_25, __26, __27);
  return x_605;
}

fn fn0_rwlLL_606(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_607(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_608 := fn0_rwlLL_606(A_29, m_30, n_31, B_32, __33, __34);
  return x_608;
}

fn fn0_rwrUU_609(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_610(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_611 := fn0_rwrUU_609(A_36, m_37, n_38, B_39, __40, __41);
  return x_611;
}

fn fn0_rwrUL_612(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_613(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_614 := fn0_rwrUL_612(A_43, m_44, n_45, B_46, __47, __48);
  return x_614;
}

fn fn0_rwrLU_615(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_616(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_617 := fn0_rwrLU_615(A_50, m_51, n_52, B_53, __54, __55);
  return x_617;
}

fn fn0_rwrLL_618(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_619(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_620 := fn0_rwrLL_618(A_57, m_58, n_59, B_60, __61, __62);
  return x_620;
}

fn fn0_sing_elimUU_621(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_622(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_623 := fn0_sing_elimUU_621(A_64, x_65, __66);
  return x_623;
}

fn fn0_sing_elimUL_624(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_625(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_626 := fn0_sing_elimUL_624(A_68, x_69, __70);
  return x_626;
}

fn fn0_sing_elimLU_627(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_628(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_629 := fn0_sing_elimLU_627(A_72, x_73, __74);
  return x_629;
}

fn fn0_sing_elimLL_630(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_631(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_632 := fn0_sing_elimLL_630(A_76, x_77, __78);
  return x_632;
}

fn fn0_not_633(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_634(env) {
  __80 := env[1];
  x_635 := fn0_not_633(__80);
  return x_635;
}

fn fn0_and_636(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_637(env) {
  __83 := env[1];
  __84 := env[2];
  x_638 := fn0_and_636(__83, __84);
  return x_638;
}

fn fn0_or_639(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_640(env) {
  __88 := env[1];
  __89 := env[2];
  x_641 := fn0_or_639(__88, __89);
  return x_641;
}

fn fn0_xor_642(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_643(env) {
  __93 := env[1];
  __94 := env[2];
  x_644 := fn0_xor_642(__93, __94);
  return x_644;
}

fn fn0_string_of_bool_645(__99) {
  switch(__99){
    true_4 => {
      str(x_101, "true")
      move1(x_100, x_101);
      break;
    }
    false_5 => {
      str(x_102, "false")
      move1(x_100, x_102);
      break;
    }
  }
  return x_100;
}

fn fn1_string_of_bool_646(env) {
  __99 := env[1];
  x_647 := fn0_string_of_bool_645(__99);
  return x_647;
}

fn fn0_lte_648(__104, __105) {
  switch(__104){
    zero_6 => {
      move1(x_106, true_4);
      break;
    }
    _ => {
      getbox(n_108, __104, 0);
      switch(__105){
        zero_6 => {
          move1(x_109, false_5);
          break;
        }
        _ => {
          getbox(n_111, __105, 0);
          x_112 := fn0_lte_648(n_108, n_111);
          move1(x_110, x_112);
          move1(x_109, x_110);
          break;
        }
      }
      move1(x_107, x_109);
      move1(x_106, x_107);
      break;
    }
  }
  return x_106;
}

fn fn1_lte_649(env) {
  __104 := env[1];
  __105 := env[2];
  x_650 := fn0_lte_648(__104, __105);
  return x_650;
}

fn fn0_lt_651(x_114, y_115) {
  mkbox(x_117, succ_7, 1);
  setbox(x_117, x_114, 0);
  x_116 := fn0_lte_648(x_117, y_115);
  return x_116;
}

fn fn1_lt_652(env) {
  x_114 := env[1];
  y_115 := env[2];
  x_653 := fn0_lt_651(x_114, y_115);
  return x_653;
}

fn fn0_pred_654(__119) {
  switch(__119){
    zero_6 => {
      move1(x_120, zero_6);
      break;
    }
    _ => {
      getbox(n_122, __119, 0);
      move1(x_121, n_122);
      move1(x_120, x_121);
      break;
    }
  }
  return x_120;
}

fn fn1_pred_655(env) {
  __119 := env[1];
  x_656 := fn0_pred_654(__119);
  return x_656;
}

fn fn0_add_657(__124, __125) {
  switch(__124){
    zero_6 => {
      move1(x_126, __125);
      break;
    }
    _ => {
      getbox(n_128, __124, 0);
      x_129 := fn0_add_657(n_128, __125);
      mkbox(x_130, succ_7, 1);
      setbox(x_130, x_129, 0);
      move1(x_127, x_130);
      move1(x_126, x_127);
      break;
    }
  }
  return x_126;
}

fn fn1_add_658(env) {
  __124 := env[1];
  __125 := env[2];
  x_659 := fn0_add_657(__124, __125);
  return x_659;
}

fn fn0_sub_660(__132, __133) {
  switch(__133){
    zero_6 => {
      move1(x_134, __132);
      break;
    }
    _ => {
      getbox(n_136, __133, 0);
      x_138 := fn0_pred_654(__132);
      x_137 := fn0_sub_660(x_138, n_136);
      move1(x_135, x_137);
      move1(x_134, x_135);
      break;
    }
  }
  return x_134;
}

fn fn1_sub_661(env) {
  __132 := env[1];
  __133 := env[2];
  x_662 := fn0_sub_660(__132, __133);
  return x_662;
}

fn fn0_mul_663(__140, __141) {
  switch(__140){
    zero_6 => {
      move1(x_142, zero_6);
      break;
    }
    _ => {
      getbox(n_144, __140, 0);
      x_146 := fn0_mul_663(n_144, __141);
      x_145 := fn0_add_657(__141, x_146);
      move1(x_143, x_145);
      move1(x_142, x_143);
      break;
    }
  }
  return x_142;
}

fn fn1_mul_664(env) {
  __140 := env[1];
  __141 := env[2];
  x_665 := fn0_mul_663(__140, __141);
  return x_665;
}

fn fn0_div_666(x_148, y_149) {
  x_151 := fn0_lt_651(x_148, y_149);
  switch(x_151){
    true_4 => {
      move1(x_150, zero_6);
      break;
    }
    false_5 => {
      mkclo1(x_153, fn1_loop_668, fvc:=2, argc:=2);
      setclo(x_153, pred_118, 1);
      setclo(x_153, sub_131, 2);
      move1(loop_152, x_153);
      appc(x_672, loop_152, x_148);
      appc(x_673, x_672, y_149);
      move1(x_166, x_673);
      move1(x_150, x_166);
      break;
    }
  }
  return x_150;
}

fn fn1_div_667(env) {
  x_148 := env[1];
  y_149 := env[2];
  x_675 := fn0_div_666(x_148, y_149);
  return x_675;
}

fn fn0_rem_676(x_168, y_169) {
  x_172 := fn0_div_666(x_168, y_169);
  x_171 := fn0_mul_663(x_172, y_169);
  x_170 := fn0_sub_660(x_168, x_171);
  return x_170;
}

fn fn1_rem_677(env) {
  x_168 := env[1];
  y_169 := env[2];
  x_678 := fn0_rem_676(x_168, y_169);
  return x_678;
}

fn fn0_free_listUU_679(A_174, f_175, __176) {
  switch(__176){
    nilUU_33 => {
      move1(x_177, ttU_26);
      break;
    }
    _ => {
      getbox(hd_179, __176, 0);
      getbox(tl_180, __176, 1);
      appc(x_681, f_175, hd_179);
      move1(x_182, x_681);
      move1(__181, x_182);
      x_183 := fn0_free_listUU_679(NULL, f_175, tl_180);
      move1(x_178, x_183);
      move1(x_177, x_178);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUU_680(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_683 := fn0_free_listUU_679(A_174, f_175, __176);
  return x_683;
}

fn fn0_free_listUL_684(A_185, f_186, __187) {
  switch(__187){
    nilUL_31 => {
      move1(x_188, ttU_26);
      break;
    }
    _ => {
      getbox(hd_190, __187, 0);
      getbox(tl_191, __187, 1);
      appc(x_686, f_186, hd_190);
      move1(x_193, x_686);
      move1(__192, x_193);
      x_194 := fn0_free_listUL_684(NULL, f_186, tl_191);
      move1(x_189, x_194);
      free(__187);
      move1(x_188, x_189);
      break;
    }
  }
  return x_188;
}

fn fn1_free_listUL_685(env) {
  A_185 := env[1];
  f_186 := env[2];
  __187 := env[3];
  x_688 := fn0_free_listUL_684(A_185, f_186, __187);
  return x_688;
}

fn fn0_free_listLL_689(A_196, f_197, __198) {
  switch(__198){
    nilLL_27 => {
      move1(x_199, ttU_26);
      break;
    }
    _ => {
      getbox(hd_201, __198, 0);
      getbox(tl_202, __198, 1);
      appc(x_691, f_197, hd_201);
      move1(x_204, x_691);
      move1(__203, x_204);
      x_205 := fn0_free_listLL_689(NULL, f_197, tl_202);
      move1(x_200, x_205);
      free(__198);
      move1(x_199, x_200);
      break;
    }
  }
  return x_199;
}

fn fn1_free_listLL_690(env) {
  A_196 := env[1];
  f_197 := env[2];
  __198 := env[3];
  x_693 := fn0_free_listLL_689(A_196, f_197, __198);
  return x_693;
}

fn fn0_pow_694(x_207, y_208) {
  mkclo1(x_210, fn1_loop_696, fvc:=1, argc:=2);
  setclo(x_210, x_207, 1);
  move1(loop_209, x_210);
  appc(x_700, loop_209, 1);
  appc(x_701, x_700, y_208);
  move1(x_219, x_701);
  return x_219;
}

fn fn1_pow_695(env) {
  x_207 := env[1];
  y_208 := env[2];
  x_703 := fn0_pow_694(x_207, y_208);
  return x_703;
}

fn fn0_powm_704(x_221, y_222, m_223) {
  mkclo1(x_225, fn1_loop_706, fvc:=2, argc:=2);
  setclo(x_225, x_221, 1);
  setclo(x_225, m_223, 2);
  move1(loop_224, x_225);
  appc(x_710, loop_224, 1);
  appc(x_711, x_710, y_222);
  move1(x_235, x_711);
  return x_235;
}

fn fn1_powm_705(env) {
  x_221 := env[1];
  y_222 := env[2];
  m_223 := env[3];
  x_713 := fn0_powm_704(x_221, y_222, m_223);
  return x_713;
}

fn fn0_ord_714(c_237) {
  ord(x_238, c_237);
  return x_238;
}

fn fn1_ord_715(env) {
  c_237 := env[1];
  x_716 := fn0_ord_714(c_237);
  return x_716;
}

fn fn0_chr_717(i_240) {
  chr(x_241, i_240);
  return x_241;
}

fn fn1_chr_718(env) {
  i_240 := env[1];
  x_719 := fn0_chr_717(i_240);
  return x_719;
}

fn fn0_str_720(c_243) {
  str(x_245, "")
  push(x_244, x_245, c_243);
  return x_244;
}

fn fn1_str_721(env) {
  c_243 := env[1];
  x_722 := fn0_str_720(c_243);
  return x_722;
}

fn fn0_strlen_723(s_247) {
  size(x_248, s_247);
  return x_248;
}

fn fn1_strlen_724(env) {
  s_247 := env[1];
  x_725 := fn0_strlen_723(s_247);
  return x_725;
}

fn fn0_string_of_int_726(i_250) {
  mkclo1(x_252, fn1_aux_728, fvc:=3, argc:=1);
  setclo(x_252, ord_236, 1);
  setclo(x_252, chr_239, 2);
  setclo(x_252, str_242, 3);
  move1(aux_251, x_252);
  lte(x_271, 0, i_250);
  switch(x_271){
    true_4 => {
      appc(x_731, aux_251, i_250);
      move1(x_272, x_731);
      move1(x_270, x_272);
      break;
    }
    false_5 => {
      str(x_274, "~")
      neg(x_276, i_250);
      appc(x_733, aux_251, x_276);
      move1(x_275, x_733);
      cat(x_273, x_274, x_275);
      move1(x_270, x_273);
      break;
    }
  }
  return x_270;
}

fn fn1_string_of_int_727(env) {
  i_250 := env[1];
  x_735 := fn0_string_of_int_726(i_250);
  return x_735;
}

fn fn0_height_736(__278) {
  switch(__278){
    Leaf_13 => {
      move1(x_279, 0);
      break;
    }
    _ => {
      getbox(l_282, __278, 1);
      getbox(r_283, __278, 2);
      x_285 := fn0_height_736(l_282);
      move1(x_284, x_285);
      x_287 := fn0_height_736(r_283);
      move1(y_286, x_287);
      lt(x_289, x_284, y_286);
      switch(x_289){
        true_4 => {
          add(x_290, y_286, 1);
          move1(x_288, x_290);
          break;
        }
        false_5 => {
          add(x_291, x_284, 1);
          move1(x_288, x_291);
          break;
        }
      }
      move1(x_280, x_288);
      move1(x_279, x_280);
      break;
    }
  }
  return x_279;
}

fn fn1_height_737(env) {
  __278 := env[1];
  x_738 := fn0_height_736(__278);
  return x_738;
}

fn fn0_size_739(__293) {
  switch(__293){
    Leaf_13 => {
      move1(x_294, 0);
      break;
    }
    _ => {
      getbox(l_297, __293, 1);
      getbox(r_298, __293, 2);
      x_301 := fn0_size_739(l_297);
      add(x_300, 1, x_301);
      x_302 := fn0_size_739(r_298);
      add(x_299, x_300, x_302);
      move1(x_295, x_299);
      move1(x_294, x_295);
      break;
    }
  }
  return x_294;
}

fn fn1_size_740(env) {
  __293 := env[1];
  x_741 := fn0_size_739(__293);
  return x_741;
}

fn fn0_lookup_742(n_304, __305) {
  switch(__305){
    Leaf_13 => {
      move1(x_306, false_5);
      break;
    }
    _ => {
      getbox(__308, __305, 0);
      getbox(l_309, __305, 1);
      getbox(r_310, __305, 2);
      eq(x_312, __308, n_304);
      switch(x_312){
        true_4 => {
          move1(x_311, true_4);
          break;
        }
        false_5 => {
          x_314 := fn0_lookup_742(n_304, l_309);
          x_315 := fn0_lookup_742(n_304, r_310);
          x_313 := fn0_or_639(x_314, x_315);
          move1(x_311, x_313);
          break;
        }
      }
      move1(x_307, x_311);
      move1(x_306, x_307);
      break;
    }
  }
  return x_306;
}

fn fn1_lookup_743(env) {
  n_304 := env[1];
  __305 := env[2];
  x_744 := fn0_lookup_742(n_304, __305);
  return x_744;
}

fn fn0_leaf_worker_745(c_317) {
  lazy(x_318, lazy__747, 2);
  setlazy(x_318, leaf_worker_316, 0);
  setlazy(x_318, c_317, 1);
  return x_318;
}

fn fn1_leaf_worker_746(env) {
  c_317 := env[1];
  x_748 := fn0_leaf_worker_745(c_317);
  return x_748;
}

fn fn0_node_worker_749(x_341, l_342, r_343, __344, __345, __346) {
  lazy(x_347, lazy__751, 6);
  setlazy(x_347, or_87, 0);
  setlazy(x_347, node_worker_340, 1);
  setlazy(x_347, x_341, 2);
  setlazy(x_347, __344, 3);
  setlazy(x_347, __345, 4);
  setlazy(x_347, __346, 5);
  return x_347;
}

fn fn1_node_worker_750(env) {
  x_341 := env[1];
  l_342 := env[2];
  r_343 := env[3];
  __344 := env[4];
  __345 := env[5];
  __346 := env[6];
  x_752 := fn0_node_worker_749(x_341, l_342, r_343, __344, __345, __346);
  return x_752;
}

fn fn0_cleaf_753(__439) {
  lazy(x_440, lazy__755, 1);
  setlazy(x_440, leaf_worker_316, 0);
  return x_440;
}

fn fn1_cleaf_754(env) {
  __439 := env[1];
  x_757 := fn0_cleaf_753(__439);
  return x_757;
}

fn fn0_cnode_758(x_447, l_448, r_449, __450, __451) {
  lazy(x_452, lazy__760, 4);
  setlazy(x_452, node_worker_340, 0);
  setlazy(x_452, x_447, 1);
  setlazy(x_452, __450, 2);
  setlazy(x_452, __451, 3);
  return x_452;
}

fn fn1_cnode_759(env) {
  x_447 := env[1];
  l_448 := env[2];
  r_449 := env[3];
  __450 := env[4];
  __451 := env[5];
  x_762 := fn0_cnode_758(x_447, l_448, r_449, __450, __451);
  return x_762;
}

fn fn0_cfree_763(t_463, ct_464) {
  lazy(x_465, lazy__765, 1);
  setlazy(x_465, ct_464, 0);
  return x_465;
}

fn fn1_cfree_764(env) {
  t_463 := env[1];
  ct_464 := env[2];
  x_766 := fn0_cfree_763(t_463, ct_464);
  return x_766;
}

fn fn0_cheight_767(t_472, ct_473) {
  lazy(x_474, lazy__769, 1);
  setlazy(x_474, ct_473, 0);
  return x_474;
}

fn fn1_cheight_768(env) {
  t_472 := env[1];
  ct_473 := env[2];
  x_771 := fn0_cheight_767(t_472, ct_473);
  return x_771;
}

fn fn0_csize_772(t_487, ct_488) {
  lazy(x_489, lazy__774, 1);
  setlazy(x_489, ct_488, 0);
  return x_489;
}

fn fn1_csize_773(env) {
  t_487 := env[1];
  ct_488 := env[2];
  x_776 := fn0_csize_772(t_487, ct_488);
  return x_776;
}

fn fn0_clookup_777(k_502, t_503, ct_504) {
  lazy(x_505, lazy__779, 2);
  setlazy(x_505, k_502, 0);
  setlazy(x_505, ct_504, 1);
  return x_505;
}

fn fn1_clookup_778(env) {
  k_502 := env[1];
  t_503 := env[2];
  ct_504 := env[3];
  x_781 := fn0_clookup_777(k_502, t_503, ct_504);
  return x_781;
}

fn fn0_mytree1_782(x_519) {
  x_521 := fn0_cleaf_753(ttU_26);
  x_522 := fn0_cleaf_753(ttU_26);
  x_520 := fn0_cnode_758(x_519, NULL, NULL, x_521, x_522);
  return x_520;
}

fn fn1_mytree1_783(env) {
  x_519 := env[1];
  x_784 := fn0_mytree1_782(x_519);
  return x_784;
}

fn fn0_mytree2_785(x_524) {
  x_526 := fn0_mytree1_782(1);
  x_527 := fn0_mytree1_782(2);
  x_525 := fn0_cnode_758(x_524, NULL, NULL, x_526, x_527);
  return x_525;
}

fn fn1_mytree2_786(env) {
  x_524 := env[1];
  x_787 := fn0_mytree2_785(x_524);
  return x_787;
}

fn fn0_mytree3_788(x_529) {
  x_531 := fn0_mytree2_785(3);
  x_532 := fn0_mytree2_785(4);
  x_530 := fn0_cnode_758(x_529, NULL, NULL, x_531, x_532);
  return x_530;
}

fn fn1_mytree3_789(env) {
  x_529 := env[1];
  x_790 := fn0_mytree3_788(x_529);
  return x_790;
}

fn fn0_mytree4_791(x_534) {
  x_536 := fn0_mytree3_788(8);
  x_537 := fn0_mytree3_788(7);
  x_535 := fn0_cnode_758(x_534, NULL, NULL, x_536, x_537);
  return x_535;
}

fn fn1_mytree4_792(env) {
  x_534 := env[1];
  x_793 := fn0_mytree4_791(x_534);
  return x_793;
}

fn fn0_mytree5_794(x_539) {
  x_541 := fn0_mytree4_791(9);
  x_542 := fn0_mytree4_791(10);
  x_540 := fn0_cnode_758(x_539, NULL, NULL, x_541, x_542);
  return x_540;
}

fn fn1_mytree5_795(env) {
  x_539 := env[1];
  x_796 := fn0_mytree5_794(x_539);
  return x_796;
}

fn fn0_mytree6_797(x_544) {
  x_546 := fn0_mytree5_794(11);
  x_547 := fn0_mytree5_794(12);
  x_545 := fn0_cnode_758(x_544, NULL, NULL, x_546, x_547);
  return x_545;
}

fn fn1_mytree6_798(env) {
  x_544 := env[1];
  x_799 := fn0_mytree6_797(x_544);
  return x_799;
}

fn lazy__801(env) {
  string_of_bool_98 := env[0];
  string_of_int_249 := env[1];
  cfree_462 := env[2];
  cheight_471 := env[3];
  csize_486 := env[4];
  clookup_501 := env[5];
  ct_548 := env[6];
  x_553 := fn0_cheight_767(NULL, ct_548);
  force(x_552, x_553);
  free(x_553);
  move1(_551, x_552);
  getbox(m_555, _551, 0);
  getbox(n_556, _551, 1);
  x_559 := fn0_csize_772(NULL, n_556);
  force(x_558, x_559);
  free(x_559);
  move1(_557, x_558);
  getbox(m_561, _557, 0);
  getbox(n_562, _557, 1);
  x_565 := fn0_clookup_777(1, NULL, n_562);
  force(x_564, x_565);
  free(x_565);
  move1(_563, x_564);
  getbox(m_567, _563, 0);
  getbox(n_568, _563, 1);
  x_571 := fn0_cfree_763(NULL, n_568);
  force(x_570, x_571);
  free(x_571);
  move1(_569, x_570);
  switch(_569){
    ttU_26 => {
      str(x_582, "height := ")
      x_583 := fn0_string_of_int_726(m_555);
      cat(x_581, x_582, x_583);
      str(x_584, "\n")
      cat(x_580, x_581, x_584);
      str(x_585, "size   := ")
      cat(x_579, x_580, x_585);
      x_586 := fn0_string_of_int_726(m_561);
      cat(x_578, x_579, x_586);
      str(x_587, "\n")
      cat(x_577, x_578, x_587);
      str(x_588, "lookup := ")
      cat(x_576, x_577, x_588);
      x_589 := fn0_string_of_bool_645(m_567);
      cat(x_575, x_576, x_589);
      str(x_590, "\n")
      cat(x_574, x_575, x_590);
      print(x_573, x_574);
      move1(x_572, x_573);
      break;
    }
  }
  move1(x_566, x_572);
  free(_563);
  move1(x_560, x_566);
  free(_557);
  move1(x_554, x_560);
  free(_551);
  return x_554;
}

fn lazy__779(env) {
  k_502 := env[0];
  ct_504 := env[1];
  force(x_507, ct_504);
  free(ct_504);
  move1(c_506, x_507);
  mkbox(x_510, Lookup_18, 1);
  setbox(x_510, k_502, 0);
  send(x_509, c_506, x_510);
  move1(c_508, x_509);
  recv0(x_512, c_508);
  move1(_511, x_512);
  getbox(m_514, _511, 0);
  getbox(n_515, _511, 1);
  lazy(x_516, lazy__780, 1);
  setlazy(x_516, n_515, 0);
  rebox(x_517, _511, ex1UL_45);
  setbox(x_517, m_514, 0);
  setbox(x_517, x_516, 1);
  move1(x_513, x_517);
  return x_513;
}

fn lazy__780(env) {
  n_515 := env[0];
  return n_515;
}

fn lazy__774(env) {
  ct_488 := env[0];
  force(x_491, ct_488);
  free(ct_488);
  move1(c_490, x_491);
  send(x_493, c_490, Size_17);
  move1(c_492, x_493);
  recv0(x_495, c_492);
  move1(_494, x_495);
  getbox(m_497, _494, 0);
  getbox(n_498, _494, 1);
  lazy(x_499, lazy__775, 1);
  setlazy(x_499, n_498, 0);
  rebox(x_500, _494, ex1UL_45);
  setbox(x_500, m_497, 0);
  setbox(x_500, x_499, 1);
  move1(x_496, x_500);
  return x_496;
}

fn lazy__775(env) {
  n_498 := env[0];
  return n_498;
}

fn lazy__769(env) {
  ct_473 := env[0];
  force(x_476, ct_473);
  free(ct_473);
  move1(c_475, x_476);
  send(x_478, c_475, Height_16);
  move1(c_477, x_478);
  recv0(x_480, c_477);
  move1(_479, x_480);
  getbox(m_482, _479, 0);
  getbox(n_483, _479, 1);
  lazy(x_484, lazy__770, 1);
  setlazy(x_484, n_483, 0);
  rebox(x_485, _479, ex1UL_45);
  setbox(x_485, m_482, 0);
  setbox(x_485, x_484, 1);
  move1(x_481, x_485);
  return x_481;
}

fn lazy__770(env) {
  n_483 := env[0];
  return n_483;
}

fn lazy__765(env) {
  ct_464 := env[0];
  force(x_467, ct_464);
  free(ct_464);
  move1(c_466, x_467);
  send(x_469, c_466, Free_15);
  move1(c_468, x_469);
  close1(x_470, c_468);
  return x_470;
}

fn lazy__760(env) {
  node_worker_340 := env[0];
  x_447 := env[1];
  __450 := env[2];
  __451 := env[3];
  force(x_454, __450);
  free(__450);
  move1(l_ch_453, x_454);
  force(x_456, __451);
  free(__451);
  move1(r_ch_455, x_456);
  mkclo1(x_458, fn1_lam_761, fvc:=4, argc:=1);
  setclo(x_458, node_worker_340, 1);
  setclo(x_458, x_447, 2);
  setclo(x_458, l_ch_453, 3);
  setclo(x_458, r_ch_455, 4);
  fork(x_457, x_458);
  return x_457;
}

fn fn1_lam_761(env) {
  lam_459 := env[0];
  node_worker_340 := env[1];
  x_447 := env[2];
  l_ch_453 := env[3];
  r_ch_455 := env[4];
  _460 := env[5];
  x_461 := fn0_node_worker_749(x_447, NULL, NULL, l_ch_453, r_ch_455, _460);
  return x_461;
}

fn lazy__755(env) {
  leaf_worker_316 := env[0];
  mkclo1(x_442, fn1_lam_756, fvc:=1, argc:=1);
  setclo(x_442, leaf_worker_316, 1);
  fork(x_441, x_442);
  return x_441;
}

fn fn1_lam_756(env) {
  lam_443 := env[0];
  leaf_worker_316 := env[1];
  _444 := env[2];
  x_445 := fn0_leaf_worker_745(_444);
  return x_445;
}

fn lazy__751(env) {
  or_87 := env[0];
  node_worker_340 := env[1];
  x_341 := env[2];
  __344 := env[3];
  __345 := env[4];
  __346 := env[5];
  recv0(x_349, __346);
  move1(_348, x_349);
  getbox(m_351, _348, 0);
  getbox(n_352, _348, 1);
  switch(m_351){
    Free_15 => {
      send(x_355, __344, Free_15);
      move1(l_ch_354, x_355);
      send(x_357, __345, Free_15);
      move1(r_ch_356, x_357);
      close1(x_359, l_ch_354);
      move1(__358, x_359);
      close1(x_361, r_ch_356);
      move1(__360, x_361);
      close0(x_362, n_352);
      move1(x_353, x_362);
      break;
    }
    Height_16 => {
      send(x_364, __344, Height_16);
      move1(l_ch_363, x_364);
      send(x_366, __345, Height_16);
      move1(r_ch_365, x_366);
      recv0(x_368, l_ch_363);
      move1(_367, x_368);
      getbox(m_370, _367, 0);
      getbox(n_371, _367, 1);
      recv0(x_373, r_ch_365);
      move1(_372, x_373);
      getbox(m_375, _372, 0);
      getbox(n_376, _372, 1);
      lt(x_378, m_370, m_375);
      switch(x_378){
        true_4 => {
          add(x_381, m_375, 1);
          send(x_380, n_352, x_381);
          move1(c_379, x_380);
          x_383 := fn0_node_worker_749(x_341, NULL, NULL, n_371, n_376, c_379);
          force(x_382, x_383);
          free(x_383);
          move1(x_377, x_382);
          break;
        }
        false_5 => {
          add(x_386, m_370, 1);
          send(x_385, n_352, x_386);
          move1(c_384, x_385);
          x_388 := fn0_node_worker_749(x_341, NULL, NULL, n_371, n_376, c_384);
          force(x_387, x_388);
          free(x_388);
          move1(x_377, x_387);
          break;
        }
      }
      move1(x_374, x_377);
      free(_372);
      move1(x_369, x_374);
      free(_367);
      move1(x_353, x_369);
      break;
    }
    Size_17 => {
      send(x_390, __344, Size_17);
      move1(l_ch_389, x_390);
      send(x_392, __345, Size_17);
      move1(r_ch_391, x_392);
      recv0(x_394, l_ch_389);
      move1(_393, x_394);
      getbox(m_396, _393, 0);
      getbox(n_397, _393, 1);
      recv0(x_399, r_ch_391);
      move1(_398, x_399);
      getbox(m_401, _398, 0);
      getbox(n_402, _398, 1);
      add(x_406, 1, m_396);
      add(x_405, x_406, m_401);
      send(x_404, n_352, x_405);
      move1(c_403, x_404);
      x_408 := fn0_node_worker_749(x_341, NULL, NULL, n_397, n_402, c_403);
      force(x_407, x_408);
      free(x_408);
      move1(x_400, x_407);
      free(_398);
      move1(x_395, x_400);
      free(_393);
      move1(x_353, x_395);
      break;
    }
    _ => {
      getbox(k_410, m_351, 0);
      eq(x_412, x_341, k_410);
      switch(x_412){
        true_4 => {
          send(x_414, n_352, true_4);
          move1(c_413, x_414);
          x_416 := fn0_node_worker_749(x_341, NULL, NULL, __344, __345, c_413);
          force(x_415, x_416);
          free(x_416);
          move1(x_411, x_415);
          break;
        }
        false_5 => {
          mkbox(x_419, Lookup_18, 1);
          setbox(x_419, k_410, 0);
          send(x_418, __344, x_419);
          move1(l_ch_417, x_418);
          mkbox(x_422, Lookup_18, 1);
          setbox(x_422, k_410, 0);
          send(x_421, __345, x_422);
          move1(r_ch_420, x_421);
          recv0(x_424, l_ch_417);
          move1(_423, x_424);
          getbox(m_426, _423, 0);
          getbox(n_427, _423, 1);
          recv0(x_429, r_ch_420);
          move1(_428, x_429);
          getbox(m_431, _428, 0);
          getbox(n_432, _428, 1);
          x_435 := fn0_or_639(m_426, m_431);
          send(x_434, n_352, x_435);
          move1(c_433, x_434);
          x_437 := fn0_node_worker_749(x_341, NULL, NULL, n_427, n_432, c_433);
          force(x_436, x_437);
          free(x_437);
          move1(x_430, x_436);
          free(_428);
          move1(x_425, x_430);
          free(_423);
          move1(x_411, x_425);
          break;
        }
      }
      move1(x_409, x_411);
      move1(x_353, x_409);
      break;
    }
  }
  move1(x_350, x_353);
  free(_348);
  return x_350;
}

fn lazy__747(env) {
  leaf_worker_316 := env[0];
  c_317 := env[1];
  recv0(x_320, c_317);
  move1(_319, x_320);
  getbox(m_322, _319, 0);
  getbox(n_323, _319, 1);
  switch(m_322){
    Free_15 => {
      close0(x_325, n_323);
      move1(x_324, x_325);
      break;
    }
    Height_16 => {
      send(x_327, n_323, 0);
      move1(c_326, x_327);
      x_329 := fn0_leaf_worker_745(c_326);
      force(x_328, x_329);
      free(x_329);
      move1(x_324, x_328);
      break;
    }
    Size_17 => {
      send(x_331, n_323, 0);
      move1(c_330, x_331);
      x_333 := fn0_leaf_worker_745(c_330);
      force(x_332, x_333);
      free(x_333);
      move1(x_324, x_332);
      break;
    }
    _ => {
      send(x_337, n_323, false_5);
      move1(c_336, x_337);
      x_339 := fn0_leaf_worker_745(c_336);
      force(x_338, x_339);
      free(x_339);
      move1(x_334, x_338);
      move1(x_324, x_334);
      break;
    }
  }
  move1(x_321, x_324);
  free(_319);
  return x_321;
}

fn fn1_aux_728(env) {
  aux_253 := env[0];
  ord_236 := env[1];
  chr_239 := env[2];
  str_242 := env[3];
  i_254 := env[4];
  lte(x_256, 10, i_254);
  switch(x_256){
    true_4 => {
      mod(x_258, i_254, 10);
      move1(r_257, x_258);
      div(x_260, i_254, 10);
      move1(i_259, x_260);
      appc(x_729, aux_253, i_259);
      move1(x_262, x_729);
      x_265 := fn0_ord_714(0);
      add(x_264, r_257, x_265);
      x_263 := fn0_chr_717(x_264);
      push(x_261, x_262, x_263);
      move1(x_255, x_261);
      break;
    }
    false_5 => {
      x_269 := fn0_ord_714(0);
      add(x_268, i_254, x_269);
      x_267 := fn0_chr_717(x_268);
      x_266 := fn0_str_720(x_267);
      move1(x_255, x_266);
      break;
    }
  }
  return x_255;
}

fn fn1_loop_706(env) {
  loop_226 := env[0];
  x_221 := env[1];
  m_223 := env[2];
  acc_227 := env[3];
  y_228 := env[4];
  lte(x_230, y_228, 0);
  switch(x_230){
    true_4 => {
      move1(x_229, acc_227);
      break;
    }
    false_5 => {
      mul(x_233, x_221, acc_227);
      mod(x_232, x_233, m_223);
      sub(x_234, y_228, 1);
      appc(x_707, loop_226, x_232);
      appc(x_708, x_707, x_234);
      move1(x_231, x_708);
      move1(x_229, x_231);
      break;
    }
  }
  return x_229;
}

fn fn1_loop_696(env) {
  loop_211 := env[0];
  x_207 := env[1];
  acc_212 := env[2];
  y_213 := env[3];
  lte(x_215, y_213, 0);
  switch(x_215){
    true_4 => {
      move1(x_214, acc_212);
      break;
    }
    false_5 => {
      mul(x_217, x_207, acc_212);
      sub(x_218, y_213, 1);
      appc(x_697, loop_211, x_217);
      appc(x_698, x_697, x_218);
      move1(x_216, x_698);
      move1(x_214, x_216);
      break;
    }
  }
  return x_214;
}

fn fn1_loop_668(env) {
  loop_154 := env[0];
  pred_118 := env[1];
  sub_131 := env[2];
  x_155 := env[3];
  y_156 := env[4];
  x_159 := fn0_pred_654(y_156);
  x_158 := fn0_sub_660(x_155, x_159);
  switch(x_158){
    zero_6 => {
      move1(x_157, zero_6);
      break;
    }
    _ => {
      x_162 := fn0_pred_654(y_156);
      x_161 := fn0_sub_660(x_155, x_162);
      getbox(n_163, x_161, 0);
      appc(x_669, loop_154, n_163);
      appc(x_670, x_669, y_156);
      move1(x_164, x_670);
      mkbox(x_165, succ_7, 1);
      setbox(x_165, x_164, 0);
      move1(x_160, x_165);
      move1(x_157, x_160);
      break;
    }
  }
  return x_157;
}

main {
  mkclo0(idU_1, fn1_idU_592, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_595, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_598, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_601, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_604, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_607, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_610, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_613, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_616, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_619, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_622, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_625, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_628, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_631, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_634, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_637, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_640, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_643, fvc:=0, argc:=2);
  mkclo0(string_of_bool_98, fn1_string_of_bool_646, fvc:=0, argc:=1);
  mkclo0(lte_103, fn1_lte_649, fvc:=0, argc:=2);
  mkclo0(lt_113, fn1_lt_652, fvc:=0, argc:=2);
  mkclo0(pred_118, fn1_pred_655, fvc:=0, argc:=1);
  mkclo0(add_123, fn1_add_658, fvc:=0, argc:=2);
  mkclo0(sub_131, fn1_sub_661, fvc:=0, argc:=2);
  mkclo0(mul_139, fn1_mul_664, fvc:=0, argc:=2);
  mkclo0(div_147, fn1_div_667, fvc:=0, argc:=2);
  mkclo0(rem_167, fn1_rem_677, fvc:=0, argc:=2);
  mkclo0(free_listUU_173, fn1_free_listUU_680, fvc:=0, argc:=3);
  mkclo0(free_listUL_184, fn1_free_listUL_685, fvc:=0, argc:=3);
  mkclo0(free_listLL_195, fn1_free_listLL_690, fvc:=0, argc:=3);
  mkclo0(pow_206, fn1_pow_695, fvc:=0, argc:=2);
  mkclo0(powm_220, fn1_powm_705, fvc:=0, argc:=3);
  mkclo0(ord_236, fn1_ord_715, fvc:=0, argc:=1);
  mkclo0(chr_239, fn1_chr_718, fvc:=0, argc:=1);
  mkclo0(str_242, fn1_str_721, fvc:=0, argc:=1);
  mkclo0(strlen_246, fn1_strlen_724, fvc:=0, argc:=1);
  mkclo0(string_of_int_249, fn1_string_of_int_727, fvc:=0, argc:=1);
  mkclo0(height_277, fn1_height_737, fvc:=0, argc:=1);
  mkclo0(size_292, fn1_size_740, fvc:=0, argc:=1);
  mkclo0(lookup_303, fn1_lookup_743, fvc:=0, argc:=2);
  mkclo0(leaf_worker_316, fn1_leaf_worker_746, fvc:=0, argc:=1);
  mkclo0(node_worker_340, fn1_node_worker_750, fvc:=0, argc:=6);
  mkclo0(cleaf_438, fn1_cleaf_754, fvc:=0, argc:=1);
  mkclo0(cnode_446, fn1_cnode_759, fvc:=0, argc:=5);
  mkclo0(cfree_462, fn1_cfree_764, fvc:=0, argc:=2);
  mkclo0(cheight_471, fn1_cheight_768, fvc:=0, argc:=2);
  mkclo0(csize_486, fn1_csize_773, fvc:=0, argc:=2);
  mkclo0(clookup_501, fn1_clookup_778, fvc:=0, argc:=3);
  mkclo0(mytree1_518, fn1_mytree1_783, fvc:=0, argc:=1);
  mkclo0(mytree2_523, fn1_mytree2_786, fvc:=0, argc:=1);
  mkclo0(mytree3_528, fn1_mytree3_789, fvc:=0, argc:=1);
  mkclo0(mytree4_533, fn1_mytree4_792, fvc:=0, argc:=1);
  mkclo0(mytree5_538, fn1_mytree5_795, fvc:=0, argc:=1);
  mkclo0(mytree6_543, fn1_mytree6_798, fvc:=0, argc:=1);
  x_549 := fn0_mytree6_797(100);
  move1(ct_548, x_549);
  lazy(x_550, lazy__801, 7);
  setlazy(x_550, string_of_bool_98, 0);
  setlazy(x_550, string_of_int_249, 1);
  setlazy(x_550, cfree_462, 2);
  setlazy(x_550, cheight_471, 3);
  setlazy(x_550, csize_486, 4);
  setlazy(x_550, clookup_501, 5);
  setlazy(x_550, ct_548, 6);
  force(x_800, x_550);
  return x_800;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

