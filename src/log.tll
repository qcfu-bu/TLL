[Notation {name = "|>"; body = (App [(Hole 2); (Hole 1)])};
  Notation {name = "@@"; body = (App [(Hole 1); (Hole 2)])};
  Notation {name = "="; body = (App [(Id ("eq", I)); (Hole 1); (Hole 2)])};
  Notation {name = "`"; body = (App [(Id ("sing", I)); (Hole 1)])};
  Notation {name = "&&"; body = (Id ("and", I))};
  Notation {name = "||"; body = (Id ("or", I))};
  Notation {name = "+"; body = (App [(Id ("add", I)); (Hole 1); (Hole 2)])};
  Notation {name = "-"; body = (App [(Id ("sub", I)); (Hole 1); (Hole 2)])};
  Notation {name = "*"; body = (App [(Id ("mul", I)); (Hole 1); (Hole 2)])};
  Notation {name = "/"; body = (App [(Id ("div", I)); (Hole 1); (Hole 2)])};
  Notation {name = "%"; body = (App [(Id ("rem", I)); (Hole 1); (Hole 2)])};
  Notation {name = "^"; body = (App [(Id ("pow", I)); (Hole 1); (Hole 2)])};
  Notation {name = "<"; body = (App [(Id ("lt", I)); (Hole 1); (Hole 2)])};
  Notation {name = ">"; body = (App [(Id ("gt", I)); (Hole 1); (Hole 2)])};
  Notation {name = "<="; body = (App [(Id ("lte", I)); (Hole 1); (Hole 2)])};
  Notation {name = ">="; body = (App [(Id ("gte", I)); (Hole 1); (Hole 2)])};
  Notation {name = "**"; body = (App [(Id ("prod1", I)); (Hole 1); (Hole 2)])};
  Notation {name = "::"; body = (App [(Id ("cons", I)); (Hole 1); (Hole 2)])};
  Notation {name = "\226\159\168,\226\159\169";
    body = (App [(Id ("pair", I)); (Hole 1); (Hole 2)])};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id ("A", I)),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id ("A", I)),
                          (Binder ("_", (TBase (Type U)))))),
                       [(DConstr ("refl",
                           (TBase (BOpr ("=", (Id ("m", I)), (Id ("m", I))))),
                           []))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "boxed"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type L)),
                 [(DConstr ("box",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("m",
                           (TBase (App [(Id ("boxed", I)); (Id ("A", I))]))))
                        )),
                     [E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("A", I)),
                    (Binder ("_", (TBase (Type (SId "t"))))))),
                 [(DConstr ("just",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("m", (TBase (UOpr ("`", (Id ("m", I))))))))),
                     [E]))
                   ]))
             ))
          ))
       ));
    view = [I]};
  Inductive {name = "unit"; relv = R;
    body =
    (Binder (["s"],
       (PBase
          ((TBase (Type (SId "s"))),
           [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
       ));
    view = []};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("true", (TBase (Id ("bool", I))), []));
             (DConstr ("false", (TBase (Id ("bool", I))), []))]))
       ));
    view = []};
  Inductive {name = "choice"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type L)),
           [(DConstr ("next", (TBase (Id ("choice", I))), []));
             (DConstr ("free", (TBase (Id ("choice", I))), []))]))
       ));
    view = []};
  Inductive {name = "prod"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Type (SId "r")),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DConstr ("pair",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R, (Id ("B", I)),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("prod", I));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [E; E]};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("_", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Definition {name = "sing_elim"; relv = R;
    body =
    (Binder (["s"; "t"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("A", I)),
                    (Binder ("x",
                       (Pi (R, U,
                          (App
                             [(Inst ("sing", [(SId "s"); (SId "t")], I));
                               (Id ("x", I))]),
                          (Binder ("_", (Id ("A", I))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "sing_elim"),
              [([(PId "A"); (PId "x"); (PConstr ("just", [(PId "x")]))],
                (Some (Id ("x", I))))]
              )),
           [I; I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("A", I)),
                 (Binder ("x",
                    (Pi (R, U,
                       (App
                          [(Inst ("sing", [(SId "s"); (SId "t")], I));
                            (Id ("x", I))]),
                       (Binder ("_", (Id ("A", I))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Definition {name = "sing_uniq"; relv = N;
    body =
    (Binder (["s"; "t"],
       ((Fun (
           (Pi (R, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (Id ("A", I)),
                    (Binder ("x0",
                       (Pi (R, U,
                          (App
                             [(Inst ("sing", [(SId "s"); (SId "t")], I));
                               (Id ("x0", I))]),
                          (Binder ("x",
                             (BOpr ("=", (Id ("x0", I)),
                                (App [(Id ("sing_elim", I)); (Id ("x", I))])
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "sing_uniq"),
              [([(PId "A"); (PId "x0"); (PConstr ("just", [(PId "_")]))],
                (Some (Id ("refl", I))))]
              )),
           [I; I])),
        (Pi (R, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U, (Id ("A", I)),
                 (Binder ("x0",
                    (Pi (R, U,
                       (App
                          [(Inst ("sing", [(SId "s"); (SId "t")], I));
                            (Id ("x0", I))]),
                       (Binder ("x",
                          (BOpr ("=", (Id ("x0", I)),
                             (App [(Id ("sing_elim", I)); (Id ("x", I))])))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Inductive {name = "stream_node"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type L)),
                 [(DConstr ("stream_cons",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("hd",
                           (TBind (R,
                              (Pi (R, L, (Id ("choice", I)),
                                 (Binder ("x",
                                    (Match ([(R, (Id ("x", I)), None)], None,
                                       [([(PId "next")],
                                         (Some (App
                                                  [(Id ("stream_node", I));
                                                    (Id ("A", I))])));
                                         ([(PId "free")],
                                          (Some (Id ("unit", I))))
                                         ]
                                       ))
                                    ))
                                 )),
                              (Binder ("tl",
                                 (TBase
                                    (App
                                       [(Id ("stream_node", I));
                                         (Id ("A", I))]))
                                 ))
                              ))
                           ))
                        )),
                     [E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Definition {name = "stream"; relv = N;
    body =
    (Binder (["s"],
       ((Fun ((Pi (R, U, (Type (SId "s")), (Binder ("A", IMeta)))),
           (Binder ((Some "stream"),
              [([(PId "A")],
                (Some (Pi (R, L, (Id ("choice", I)),
                         (Binder ("x",
                            (Match ([(R, (Id ("x", I)), None)], None,
                               [([(PId "next")],
                                 (Some (App
                                          [(Id ("stream_node", I));
                                            (Id ("A", I))])));
                                 ([(PId "free")], (Some (Id ("unit", I))))]
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (Type (SId "s")), (Binder ("A", IMeta)))))
       ));
    view = [E]};
  Definition {name = "free_stream"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (App [(Id ("stream", I)); (Id ("A", I))]),
                    (Binder ("st", (Inst ("unit", [U], I))))))
                 ))
              )),
           (Binder ((Some "free_stream"),
              [([(PId "A"); (PId "st")],
                (Some (Match (
                         [(R, (App [(Id ("st", I)); (Id ("free", I))]), None)
                           ],
                         None, [([(PId "tt")], (Some (Id ("tt", I))))]))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U, (App [(Id ("stream", I)); (Id ("A", I))]),
                 (Binder ("st", (Inst ("unit", [U], I))))))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "uncons_stream"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (App [(Id ("stream", I)); (Id ("A", I))]),
                    (Binder ("st",
                       (App
                          [(Inst ("prod", [(SId "_"); (SId "_"); L], I));
                            (Id ("A", I));
                            (App [(Id ("stream", I)); (Id ("A", I))])])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "uncons_stream"),
              [([(PId "A"); (PId "st")],
                (Some (Let (R, (App [(Id ("st", I)); (Id ("next", I))]),
                         (Binder (
                            (PConstr ("stream_cons", [(PId "hd"); (PId "tl")]
                               )),
                            (BOpr ("\226\159\168,\226\159\169",
                               (Id ("hd", I)), (Id ("tl", I))))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U, (App [(Id ("stream", I)); (Id ("A", I))]),
                 (Binder ("st",
                    (App
                       [(Inst ("prod", [(SId "_"); (SId "_"); L], I));
                         (Id ("A", I));
                         (App [(Id ("stream", I)); (Id ("A", I))])])
                    ))
                 ))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "nat_make"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("n", (App [(Id ("stream", I)); (Id ("nat", I))]))))),
           (Binder ((Some "nat_make"),
              [([(PId "n"); (PId "next")],
                (Some (App
                         [(Id ("stream_cons", I)); (Id ("n", I));
                           (App
                              [(Id ("nat_make", I));
                                (App [(Id ("succ", I)); (Id ("n", I))])])
                           ])));
                ([(PId "n"); (PId "free")], (Some (Id ("tt", I))))]
              )),
           [E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("n", (App [(Id ("stream", I)); (Id ("nat", I))]))))))
       ));
    view = [E]};
  Inductive {name = "apair"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DConstr ("apair_intro",
                           (TBind (N, (Id ("A", I)),
                              (Binder ("x",
                                 (TBind (R,
                                    (Pi (R, (SId "t"), (Id ("bool", I)),
                                       (Binder ("b",
                                          (Match ([(R, (Id ("b", I)), None)],
                                             None,
                                             [([(PId "true")],
                                               (Some (App
                                                        [(Inst ("sing",
                                                            [(SId "_"); L], I
                                                            ));
                                                          (Id ("x", I))])));
                                               ([(PId "false")],
                                                (Some (App
                                                         [(Id ("boxed", I));
                                                           (App
                                                              [(Id ("B", I));
                                                                (Id ("x", I))
                                                                ])
                                                           ])))
                                               ]
                                             ))
                                          ))
                                       )),
                                    (Binder ("select",
                                       (TBase
                                          (App
                                             [(Id ("apair", I));
                                               (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [I; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Notation {name = "{,}";
    body =
    (App
       [(Id ("apair_intro", I));
         (Fun (IMeta,
            (Binder (None,
               [([(PId "true")], (Some (App [(Id ("just", I)); (Hole 1)])));
                 ([(PId "false")], (Some (App [(Id ("box", I)); (Hole 2)])))]
               )),
            []))
         ])};
  Definition {name = "proj1"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U,
                    (Pi (R, U, (Id ("A", I)),
                       (Binder ("_", (Type (SId "r")))))),
                    (Binder ("B",
                       (Pi (R, U,
                          (App
                             [(Inst ("apair",
                                 [(SId "s"); (SId "r"); (SId "t")], E));
                               (Id ("A", I)); (Id ("B", I))]),
                          (Binder ("_", (Id ("A", I))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "proj1"),
              [([(PId "A"); (PId "B");
                  (PConstr ("apair_intro", [(PId "_"); (PId "select")]))],
                (Some (App
                         [(Id ("sing_elim", I));
                           (App [(Id ("select", I)); (Id ("true", I))])])))
                ]
              )),
           [I; I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U,
                 (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                 (Binder ("B",
                    (Pi (R, U,
                       (App
                          [(Inst ("apair", [(SId "s"); (SId "r"); (SId "t")],
                              E));
                            (Id ("A", I)); (Id ("B", I))]),
                       (Binder ("_", (Id ("A", I))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Definition {name = "proj2"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U,
                    (Pi (R, U, (Id ("A", I)),
                       (Binder ("_", (Type (SId "r")))))),
                    (Binder ("B",
                       (Pi (R, U,
                          (App
                             [(Inst ("apair",
                                 [(SId "s"); (SId "r"); (SId "t")], E));
                               (Id ("A", I)); (Id ("B", I))]),
                          (Binder ("x",
                             (App
                                [(Id ("B", I));
                                  (App [(Id ("proj1", I)); (Id ("x", I))])])
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "proj2"),
              [([(PId "A"); (PId "B");
                  (PConstr ("apair_intro", [(PId "x"); (PId "select")]))],
                (Some (Match (
                         [(N, (Id ("x", I)), (Some ("x0", IMeta)));
                           (N, (App [(Id ("select", I)); (Id ("true", I))]),
                            (Some ("a0", (UOpr ("`", (Id ("x", I)))))));
                           (N,
                            (App
                               [(Id ("sing_uniq", I));
                                 (App [(Id ("select", I)); (Id ("true", I))])
                                 ]),
                            (Some ("_",
                                   (BOpr ("=", (Id ("x0", I)),
                                      (App
                                         [(Id ("sing_elim", I));
                                           (Id ("a0", I))])
                                      )))));
                           (R, (App [(Id ("select", I)); (Id ("false", I))]),
                            (Some ("_",
                                   (App
                                      [(Id ("boxed", I));
                                        (App [(Id ("B", I)); (Id ("x0", I))])
                                        ]))))
                           ],
                         (Some (App
                                  [(Id ("B", I));
                                    (App
                                       [(Id ("sing_elim", I)); (Id ("a0", I))
                                         ])
                                    ])),
                         [([(PId "_"); (PId "_"); (PId "refl");
                             (PConstr ("box", [(PId "b")]))],
                           (Some (Id ("b", I))))]
                         ))))
                ]
              )),
           [I; I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U,
                 (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                 (Binder ("B",
                    (Pi (R, U,
                       (App
                          [(Inst ("apair", [(SId "s"); (SId "r"); (SId "t")],
                              E));
                            (Id ("A", I)); (Id ("B", I))]),
                       (Binder ("x",
                          (App
                             [(Id ("B", I));
                               (App [(Id ("proj1", I)); (Id ("x", I))])])
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Definition {name = "my_apair0"; relv = R;
    body =
    (Binder ([],
       ((BOpr ("{,}", (Id ("zero", I)),
           (App [(Id ("nat_make", I)); (Id ("zero", I))]))),
        (App
           [(Inst ("apair", [(SId "_"); (SId "_"); U], I));
             (Fun ((Pi (R, U, (Id ("nat", I)), (Binder ("n", IMeta)))),
                (Binder (None,
                   [([(PId "n")],
                     (Some (Match ([(R, (Id ("n", I)), None)], None,
                              [([(PId "zero")],
                                (Some (App
                                         [(Id ("stream", I)); (Id ("nat", I))
                                           ])));
                                ([(PConstr ("succ", [(PId "_")]))],
                                 (Some (Inst ("unit", [L], I))))
                                ]
                              ))))
                     ]
                   )),
                []))
             ]))
       ));
    view = []};
  Definition {name = "my_apair1"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Id ("nat_make", I)); (Id ("zero", I))]),
           (Binder ((PId "nat_stream"),
              (BOpr ("{,}",
                 (Let (R,
                    (App [(Id ("uncons_stream", I)); (Id ("nat_stream", I))]),
                    (Binder (
                       (PBOpr ("\226\159\168,\226\159\169", (PId "hd"),
                          (PId "tl"))),
                       (Let (R,
                          (App [(Id ("free_stream", I)); (Id ("tl", I))]),
                          (Binder ((PId "_"), (Id ("hd", I))))))
                       ))
                    )),
                 (Id ("nat_stream", I))))
              ))
           )),
        (App
           [(Inst ("apair", [(SId "_"); (SId "_"); L], I));
             (Fun ((Pi (R, U, (Id ("nat", I)), (Binder ("n", IMeta)))),
                (Binder (None,
                   [([(PId "n")],
                     (Some (Match ([(R, (Id ("n", I)), None)], None,
                              [([(PId "zero")],
                                (Some (App
                                         [(Id ("stream", I)); (Id ("nat", I))
                                           ])));
                                ([(PConstr ("succ", [(PId "_")]))],
                                 (Some (Inst ("unit", [L], I))))
                                ]
                              ))))
                     ]
                   )),
                []))
             ]))
       ));
    view = []};
  Definition {name = "_"; relv = R;
    body =
    (Binder ([],
       ((App
           [(Id ("free_stream", I));
             (App [(Id ("proj2", I)); (Id ("my_apair1", I))])]),
        (Id ("unit", I)))
       ));
    view = []}
  ]

-----------------------------------------

#[logical]
inductive eq_1‹s_177› (A_178 : Type‹s_177›) (m_179 : A_178):
  A_178 -> U
where
| refl_1 : (eq_1‹??_1› ?_1[0;0] m_179 m_179)

#[program]
inductive boxed_2‹s_181› (A_182 : Type‹s_181›): L where
| box_2 (m_183 : A_182) : (boxed_2‹??_2› A_182)

#[program]
inductive sing_3‹s_184,t_185› (A_186 : Type‹s_184›):
  A_186 -> Type‹t_185›
where
| just_3 (m_188 : A_186) : (sing_3‹??_3,??_4› ?_2[0;0] m_188)

#[program]
inductive unit_4‹s_189› : Type‹s_189› where
| tt_4 : unit_4‹??_5›

#[program]
inductive bool_5‹› : U where
| true_5 : bool_5
| false_6 : bool_5

#[program]
inductive choice_6‹› : L where
| next_7 : choice_6
| free_8 : choice_6

#[program]
inductive prod_7‹s_190,r_191,t_192› (A_193 : Type‹s_190›) (B_194 : Type‹r_191›):
  Type‹t_192›
where
| pair_9
    (m_195 : A_193) (n_196 : B_194)
    : (prod_7‹??_6,??_7,??_8› A_193 B_194)

#[program]
inductive nat_8‹› : U where
| zero_10 : nat_8
| succ_11 (__197 : nat_8) : nat_8

#[program]
def sing_elim_1‹s_198,t_199› :
  ∀ {A_200 : Type‹s_198›} ->
    ∀ {x_201 : A_200} -> (sing_3‹s_198,t_199› ?_4[0;0] x_201) -> A_200
:=
  function sing_elim_203 :
    ∀ {A_204 : Type‹s_198›} ->
      ∀ {x_205 : A_204} ->
        (sing_3‹s_198,t_199› ?_3[0;0] x_205) -> A_204
  | A_207 x_208 (just_3 x_209) => x_209

#[logical]
def sing_uniq_2‹s_210,t_211› :
  ∀ (A_212 : Type‹s_210›) ->
    ∀ (x0_213 : A_212) ->
      ∀ (x_214 : (sing_3‹s_210,t_211› ?_11[0;0] x0_213)) ->
        (eq_1‹??_15›
          ?_14[0;0] x0_213
          ((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_214))
:=
  function sing_uniq_215 :
    ∀ (A_216 : Type‹s_210›) ->
      ∀ (x0_217 : A_216) ->
        ∀ (x_218 : (sing_3‹s_210,t_211› ?_5[0;0] x0_217)) ->
          (eq_1‹??_11›
            ?_8[0;0] x0_217
            ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_218))
  | A_219 x0_220 (just_3 _221) => (refl_1‹??_12› ?_9[0;0] ?_10[0;0])

#[program]
inductive stream_node_9‹s_222› (A_223 : Type‹s_222›): L where
| stream_cons_12
    (hd_224 : A_223)
    (tl_225 : ∀ (x_226 : choice_6) -o
                match x_226 in ?_15[0;0] -o ?_16[0;0] with
                | next_7 => (stream_node_9‹??_16› A_223)
                | free_8 => unit_4‹??_17›)
    : (stream_node_9‹??_18› A_223)

#[logical]
def stream_3‹s_228› : Type‹s_228› -> ?_20[0;0] :=
  function stream_230 : Type‹s_228› -> ?_17[0;0]
  | A_232 =>
    ∀ (x_233 : choice_6) -o
      match x_233 in ?_18[0;0] -o ?_19[0;0] with
      | next_7 => (stream_node_9‹??_19› A_232)
      | free_8 => unit_4‹??_20›

#[program]
def free_stream_4‹s_235› :
  ∀ {A_236 : Type‹s_235›} ->
    ((stream_3‹??_23›) A_236) -> unit_4‹U›
:=
  function free_stream_238 :
    ∀ {A_239 : Type‹s_235›} ->
      ((stream_3‹??_21›) A_239) -> unit_4‹U›
  | A_241 st_242 =>
    match ((st_242) free_8) in ?_21[0;0] -o ?_22[0;0] with
    | tt_4 => tt_4‹??_22›

#[program]
def uncons_stream_5‹s_244› :
  ∀ {A_245 : Type‹s_244›} ->
    ((stream_3‹??_31›) A_245) ->
      (prod_7‹??_32,??_33,L› A_245 ((stream_3‹??_34›) A_245))
:=
  function uncons_stream_247 :
    ∀ {A_248 : Type‹s_244›} ->
      ((stream_3‹??_24›) A_248) ->
        (prod_7‹??_25,??_26,L› A_248 ((stream_3‹??_27›) A_248))
  | A_250 st_251 =>
    match ((st_251) next_7) in ?_26[0;0] -o ?_25[0;0] with
    | (stream_cons_12 hd_253 tl_254) =>
      (pair_9‹??_28,??_29,??_30› ?_23[0;0] ?_24[0;0] hd_253 tl_254)

#[program]
def nat_make_6‹› : nat_8 -> ((stream_3‹??_38›) nat_8) :=
  function nat_make_256 : nat_8 -> ((stream_3‹??_35›) nat_8)
  | n_258 next_7 =>
    (stream_cons_12‹??_36›
      ?_27[0;0] n_258 ((nat_make_256) (succ_11‹› n_258)))
  | n_259 free_8 => tt_4‹??_37›

#[program]
inductive apair_10‹s_260,r_261,t_262› (A_263 : Type‹s_260›) (B_264 : 
A_263 -> Type‹r_261›): Type‹t_262› where
| apair_intro_13
    {x_266 : A_263}
    (select_267 : forall‹t_262›(b_268 : bool_5),
                    match b_268 in ?_28[0;0] -o ?_29[0;0] with
                    | true_5 => (sing_3‹??_39,L› ?_30[0;0] x_266)
                    | false_6 => (boxed_2‹??_40› ((B_264) x_266)))
    : (apair_10‹??_41,??_42,??_43› ?_31[0;0] B_264)

#[program]
def proj1_7‹s_270,r_271,t_272› :
  ∀ {A_273 : Type‹s_270›} ->
    ∀ {B_274 : A_273 -> Type‹r_271›} ->
      (apair_10‹s_270,r_271,t_272› A_273 B_274) -> A_273
:=
  function proj1_277 :
    ∀ {A_278 : Type‹s_270›} ->
      ∀ {B_279 : A_278 -> Type‹r_271›} ->
        (apair_10‹s_270,r_271,t_272› A_278 B_279) -> A_278
  | A_282 B_283 (apair_intro_13 _284 select_285) =>
    ((sing_elim_1‹??_44,??_45›)
      ?_33[0;0] ?_32[0;0] ((select_285) true_5))

#[program]
def proj2_8‹s_286,r_287,t_288› :
  ∀ {A_289 : Type‹s_286›} ->
    ∀ {B_290 : A_289 -> Type‹r_287›} ->
      ∀ (x_292 : (apair_10‹s_286,r_287,t_288› A_289 B_290)) ->
        ((B_290)
          ((proj1_7‹??_59,??_60,??_61›) ?_46[0;0] ?_45[0;0] x_292))
:=
  function proj2_293 :
    ∀ {A_294 : Type‹s_286›} ->
      ∀ {B_295 : A_294 -> Type‹r_287›} ->
        ∀ (x_297 : (apair_10‹s_286,r_287,t_288› A_294 B_295)) ->
          ((B_295)
            ((proj1_7‹??_46,??_47,??_48›) ?_35[0;0] ?_34[0;0] x_297))
  | A_298 B_299 (apair_intro_13 x_300 select_301) =>
    match x_300, ((select_301) true_5),
    ((sing_uniq_2‹??_49,??_50›)
      ?_37[0;0] ?_36[0;0] ((select_301) true_5)),
    ((select_301) false_6) in
      ∀ {x0_302 : ?_38[0;0]} -o
        ∀ {a0_303 : (sing_3‹??_51,??_52› ?_39[0;0] x_300)} -o
          {(eq_1‹??_55›
             ?_42[0;0] x0_302
             ((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0] a0_303))} -o
            (boxed_2‹??_56› ((B_299) x0_302)) -o
              ((B_299)
                ((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0] a0_303))
    with
    | _306, _307, refl_1, (box_2 b_308) => b_308

#[program]
def my_apair0_9‹› :
  (apair_10‹??_68,??_69,U›
    ?_56[0;0]
    function _309 : nat_8 -> ?_53[0;0]
    | n_311 =>
      match n_311 in ?_54[0;0] -o ?_55[0;0] with
      | zero_10 => ((stream_3‹??_70›) nat_8)
      | (succ_11 _313) => unit_4‹L›)
:=
  (apair_intro_13‹??_65,??_66,??_67›
    ?_51[0;0] ?_52[0;0] ?_50[0;0]
    function _314 : ?_47[0;0]
    | true_5 => (just_3‹??_62,??_63› ?_48[0;0] zero_10)
    | false_6 => (box_2‹??_64› ?_49[0;0] ((nat_make_6) zero_10)))

#[program]
def my_apair1_10‹› :
  (apair_10‹??_79,??_80,L›
    ?_70[0;0]
    function _315 : nat_8 -> ?_67[0;0]
    | n_317 =>
      match n_317 in ?_68[0;0] -o ?_69[0;0] with
      | zero_10 => ((stream_3‹??_81›) nat_8)
      | (succ_11 _319) => unit_4‹L›)
:=
  let nat_stream_320 := ((nat_make_6) zero_10) in
  (apair_intro_13‹??_76,??_77,??_78›
    ?_65[0;0] ?_66[0;0] ?_64[0;0]
    function _321 : ?_57[0;0]
    | true_5 =>
      (just_3‹??_73,??_74›
        ?_62[0;0]
        match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_320) in
          ?_61[0;0] -o ?_60[0;0]
        with
        | (pair_9 hd_323 tl_324) =>
          let __325 := ((free_stream_4‹??_72›) ?_59[0;0] tl_324) in
          hd_323)
    | false_6 => (box_2‹??_75› ?_63[0;0] nat_stream_320))

#[program]
def __11‹› : unit_4‹??_86› :=
  ((free_stream_4‹??_85›)
    ?_73[0;0]
    ((proj2_8‹??_82,??_83,??_84›) ?_72[0;0] ?_71[0;0] my_apair1_10))

-----------------------------------------

inductive-------------------------
assert_type(Type‹s_326›)
infer_tm(Type‹s_326›)
assert_type_ok(Type‹s_326›, U)
assert_type(A_327)
infer_tm(A_327)
assert_type_ok(A_327, Type‹s_326›)
assert_type(A_327)
infer_tm(A_327)
assert_type_ok(A_327, Type‹s_326›)
assert_type(Type‹s_330›)
infer_tm(Type‹s_330›)
assert_type_ok(Type‹s_330›, U)
assert_type(A_331)
infer_tm(A_331)
assert_type_ok(A_331, Type‹s_330›)
assert_type((eq_1‹??_1› ?_1[0;0] m_332 m_332))
infer_tm((eq_1‹??_1› ?_1[0;0] m_332 m_332))
check_tm( ?_1[0;0], Type‹??_1›)
check_tm( m_332, ?_1[1;2])
infer_tm(m_332)
assert_equal1( ?_1[1;2], A_331)
assert_equal1_extend( ?_1[1;2], A_331)
check_tm( m_332, ?_1[1;2])
infer_tm(m_332)
assert_equal1( ?_1[1;2], A_331)
assert_equal1_extend( ?_1[1;2], A_331)
assert_type_ok((eq_1‹??_1› ?_1[0;0] m_332 m_332), U)
simpl_tm ~expand:false( ?_1[1;2], A_331)
simpl_tm ~expand:false( A_331, A_331)
assert_equal1( A_331, ?_1[1;2])
assert_equal1_extend( A_331, ?_1[1;2])
assert_equal1( m_332, m_332)
assert_equal1_ok( m_332, m_332)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    ?_1 <= A_338
    
  |}
  eqns {|
    equal_tm? (A_331, ?_1[1;2]);
    equal_sort? (s_330, ??_1)
  |}
end_dump
simpl_tm ~expand:false( A_331, A_331)
attempt_delay(?_1[1;2] : Type‹??_1›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_330›)
infer_tm(Type‹s_330›)
assert_type_ok(Type‹s_330›, U)
check_tm( A_331, Type‹s_330›)
infer_tm(A_331)
assert_equal1( Type‹s_330›, Type‹s_330›)
assert_equal1_ok( Type‹s_330›, Type‹s_330›)
----------------------------------

inductive-------------------------
assert_type(Type‹s_359›)
infer_tm(Type‹s_359›)
assert_type_ok(Type‹s_359›, U)
assert_type(Type‹s_361›)
infer_tm(Type‹s_361›)
assert_type_ok(Type‹s_361›, U)
assert_type(A_362)
infer_tm(A_362)
assert_type_ok(A_362, Type‹s_361›)
assert_type((boxed_2‹??_2› A_362))
infer_tm((boxed_2‹??_2› A_362))
check_tm( A_362, Type‹??_2›)
infer_tm(A_362)
assert_equal1( Type‹??_2›, Type‹s_361›)
assert_equal1_extend( Type‹??_2›, Type‹s_361›)
assert_type_ok((boxed_2‹??_2› A_362), L)
simpl_tm ~expand:false( Type‹??_2›, Type‹s_361›)
assert_equal1( A_362, A_362)
assert_equal1_ok( A_362, A_362)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_364
    ??_2 <= s_365
    
  |}
  imeta_meta {|
    ?_1 <= A_368
    
  |}
  eqns {|
    equal_sort? (s_361, ??_2)
  |}
end_dump
----------------------------------

inductive-------------------------
assert_type(Type‹s_377›)
infer_tm(Type‹s_377›)
assert_type_ok(Type‹s_377›, U)
assert_type(A_379)
infer_tm(A_379)
assert_type_ok(A_379, Type‹s_377›)
assert_type(Type‹s_381›)
infer_tm(Type‹s_381›)
assert_type_ok(Type‹s_381›, U)
assert_type(A_383)
infer_tm(A_383)
assert_type_ok(A_383, Type‹s_381›)
assert_type((sing_3‹??_3,??_4› ?_2[0;0] m_384))
infer_tm((sing_3‹??_3,??_4› ?_2[0;0] m_384))
check_tm( ?_2[0;0], Type‹??_3›)
check_tm( m_384, ?_2[2;2])
infer_tm(m_384)
assert_equal1( ?_2[2;2], A_383)
assert_equal1_extend( ?_2[2;2], A_383)
assert_type_ok((sing_3‹??_3,??_4› ?_2[0;0] m_384), Type‹??_4›)
simpl_tm ~expand:false( ?_2[2;2], A_383)
assert_equal1( A_383, ?_2[2;2])
assert_equal1_extend( A_383, ?_2[2;2])
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_385
    ??_2 <= s_386
    
  |}
  imeta_meta {|
    ?_1 <= A_389
    ?_2 <= A_393
    
  |}
  eqns {|
    equal_tm? (A_383, ?_2[2;2]);
    equal_sort? (t_382, ??_4);
    equal_sort? (s_381, ??_3)
  |}
end_dump
simpl_tm ~expand:false( A_383, A_383)
attempt_delay(?_2[2;2] : Type‹??_3›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_381›)
infer_tm(Type‹s_381›)
assert_type_ok(Type‹s_381›, U)
check_tm( A_383, Type‹s_381›)
infer_tm(A_383)
assert_equal1( Type‹s_381›, Type‹s_381›)
assert_equal1_ok( Type‹s_381›, Type‹s_381›)
----------------------------------

inductive-------------------------
assert_type(unit_4‹??_5›)
infer_tm(unit_4‹??_5›)
assert_type_ok(unit_4‹??_5›, Type‹??_5›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_422
    ??_2 <= s_423
    ??_3 <= s_425
    ??_4 <= t_426
    
  |}
  imeta_meta {|
    ?_1 <= A_430
    ?_2 <= A_434
    
  |}
  eqns {|
    equal_sort? (s_421, ??_5)
  |}
end_dump
----------------------------------

inductive-------------------------
assert_type(bool_5)
infer_tm(bool_5)
assert_type_ok(bool_5, U)
assert_type(bool_5)
infer_tm(bool_5)
assert_type_ok(bool_5, U)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_437
    ??_2 <= s_438
    ??_3 <= s_440
    ??_4 <= t_441
    ??_5 <= s_443
    
  |}
  imeta_meta {|
    ?_1 <= A_446
    ?_2 <= A_450
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
assert_type(choice_6)
infer_tm(choice_6)
assert_type_ok(choice_6, L)
assert_type(choice_6)
infer_tm(choice_6)
assert_type_ok(choice_6, L)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_451
    ??_2 <= s_452
    ??_3 <= s_454
    ??_4 <= t_455
    ??_5 <= s_457
    
  |}
  imeta_meta {|
    ?_1 <= A_460
    ?_2 <= A_464
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
assert_type(Type‹s_465›)
infer_tm(Type‹s_465›)
assert_type_ok(Type‹s_465›, U)
assert_type(Type‹r_466›)
infer_tm(Type‹r_466›)
assert_type_ok(Type‹r_466›, U)
assert_type(Type‹s_470›)
infer_tm(Type‹s_470›)
assert_type_ok(Type‹s_470›, U)
assert_type(Type‹r_471›)
infer_tm(Type‹r_471›)
assert_type_ok(Type‹r_471›, U)
assert_type(A_473)
infer_tm(A_473)
assert_type_ok(A_473, Type‹s_470›)
assert_type(B_474)
infer_tm(B_474)
assert_type_ok(B_474, Type‹r_471›)
assert_type((prod_7‹??_6,??_7,??_8› A_473 B_474))
infer_tm((prod_7‹??_6,??_7,??_8› A_473 B_474))
check_tm( A_473, Type‹??_6›)
infer_tm(A_473)
assert_equal1( Type‹??_6›, Type‹s_470›)
assert_equal1_extend( Type‹??_6›, Type‹s_470›)
check_tm( B_474, Type‹??_7›)
infer_tm(B_474)
assert_equal1( Type‹??_7›, Type‹r_471›)
assert_equal1_extend( Type‹??_7›, Type‹r_471›)
assert_type_ok((prod_7‹??_6,??_7,??_8› A_473 B_474), Type‹??_8›)
simpl_tm ~expand:false( Type‹??_7›, Type‹r_471›)
simpl_tm ~expand:false( Type‹??_6›, Type‹s_470›)
assert_equal1( A_473, A_473)
assert_equal1_ok( A_473, A_473)
assert_equal1( B_474, B_474)
assert_equal1_ok( B_474, B_474)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_477
    ??_2 <= s_478
    ??_3 <= s_480
    ??_4 <= t_481
    ??_5 <= s_483
    ??_6 <= s_486
    ??_7 <= r_488
    
  |}
  imeta_meta {|
    ?_1 <= A_492
    ?_2 <= A_496
    
  |}
  eqns {|
    equal_sort? (t_472, ??_8);
    equal_sort? (r_471, ??_7);
    equal_sort? (s_470, ??_6)
  |}
end_dump
----------------------------------

inductive-------------------------
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_523
    ??_2 <= s_524
    ??_3 <= s_526
    ??_4 <= t_527
    ??_5 <= s_529
    ??_6 <= s_532
    ??_7 <= r_534
    ??_8 <= t_536
    
  |}
  imeta_meta {|
    ?_1 <= A_541
    ?_2 <= A_545
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
assert_type(∀ {A_549 : Type‹s_547›} ->
              ∀ {x_550 : A_549} ->
                (sing_3‹s_547,t_548› ?_4[0;0] x_550) -> A_549)
infer_tm(∀ {A_552 : Type‹s_547›} ->
           ∀ {x_553 : A_552} ->
             (sing_3‹s_547,t_548› ?_4[0;0] x_553) -> A_552)
assert_type(Type‹s_547›)
infer_tm(Type‹s_547›)
assert_type_ok(Type‹s_547›, U)
assert_type(∀ {x_556 : A_555} ->
              (sing_3‹s_547,t_548› ?_4[0;0] x_556) -> A_555)
infer_tm(∀ {x_558 : A_555} ->
           (sing_3‹s_547,t_548› ?_4[0;0] x_558) -> A_555)
assert_type(A_555)
infer_tm(A_555)
assert_type_ok(A_555, Type‹s_547›)
assert_type((sing_3‹s_547,t_548› ?_4[0;0] x_560) -> A_555)
infer_tm((sing_3‹s_547,t_548› ?_4[0;0] x_560) -> A_555)
assert_type((sing_3‹s_547,t_548› ?_4[0;0] x_560))
infer_tm((sing_3‹s_547,t_548› ?_4[0;0] x_560))
check_tm( ?_4[0;0], Type‹s_547›)
check_tm( x_560, ?_4[2;2])
infer_tm(x_560)
assert_equal1( ?_4[2;2], A_555)
assert_equal1_extend( ?_4[2;2], A_555)
assert_type_ok((sing_3‹s_547,t_548› ?_4[0;0] x_560), Type‹t_548›)
simpl_tm ~expand:false( ?_4[2;2], A_555)
assert_type(A_555)
infer_tm(A_555)
assert_type_ok(A_555, Type‹s_547›)
assert_type_ok((sing_3‹s_547,t_548› ?_4[0;0] x_560) -> A_555, U)
assert_type_ok(∀ {x_565 : A_555} ->
                 (sing_3‹s_547,t_548› ?_4[0;0] x_565) -> A_555, U)
assert_type_ok(∀ {A_567 : Type‹s_547›} ->
                 ∀ {x_568 : A_567} ->
                   (sing_3‹s_547,t_548› ?_4[0;0] x_568) -> A_567, U)
check_tm(
  function sing_elim_570 :
    ∀ {A_571 : Type‹s_547›} ->
      ∀ {x_572 : A_571} ->
        (sing_3‹s_547,t_548› ?_3[0;0] x_572) -> A_571
  | A_574 x_575 (just_3 x_576) => x_576,
  ∀ {A_577 : Type‹s_547›} ->
    ∀ {x_578 : A_577} -> (sing_3‹s_547,t_548› ?_4[2;2] x_578) -> A_577)
assert_type(∀ {A_581 : Type‹s_547›} ->
              ∀ {x_582 : A_581} ->
                (sing_3‹s_547,t_548› ?_3[0;0] x_582) -> A_581)
infer_tm(∀ {A_584 : Type‹s_547›} ->
           ∀ {x_585 : A_584} ->
             (sing_3‹s_547,t_548› ?_3[0;0] x_585) -> A_584)
assert_type(Type‹s_547›)
infer_tm(Type‹s_547›)
assert_type_ok(Type‹s_547›, U)
assert_type(∀ {x_588 : A_587} ->
              (sing_3‹s_547,t_548› ?_3[0;0] x_588) -> A_587)
infer_tm(∀ {x_590 : A_587} ->
           (sing_3‹s_547,t_548› ?_3[0;0] x_590) -> A_587)
assert_type(A_587)
infer_tm(A_587)
assert_type_ok(A_587, Type‹s_547›)
assert_type((sing_3‹s_547,t_548› ?_3[0;0] x_592) -> A_587)
infer_tm((sing_3‹s_547,t_548› ?_3[0;0] x_592) -> A_587)
assert_type((sing_3‹s_547,t_548› ?_3[0;0] x_592))
infer_tm((sing_3‹s_547,t_548› ?_3[0;0] x_592))
check_tm( ?_3[0;0], Type‹s_547›)
check_tm( x_592, ?_3[2;2])
infer_tm(x_592)
assert_equal1( ?_3[2;2], A_587)
assert_equal1_extend( ?_3[2;2], A_587)
assert_type_ok((sing_3‹s_547,t_548› ?_3[0;0] x_592), Type‹t_548›)
simpl_tm ~expand:false( ?_3[2;2], A_587)
assert_type(A_587)
infer_tm(A_587)
assert_type_ok(A_587, Type‹s_547›)
assert_type_ok((sing_3‹s_547,t_548› ?_3[0;0] x_592) -> A_587, U)
assert_type_ok(∀ {x_597 : A_587} ->
                 (sing_3‹s_547,t_548› ?_3[0;0] x_597) -> A_587, U)
assert_type_ok(∀ {A_599 : Type‹s_547›} ->
                 ∀ {x_600 : A_599} ->
                   (sing_3‹s_547,t_548› ?_3[0;0] x_600) -> A_599, U)
assert_equal1(
  ∀ {A_602 : Type‹s_547›} ->
    ∀ {x_603 : A_602} -> (sing_3‹s_547,t_548› ?_4[2;2] x_603) -> A_602,
  ∀ {A_605 : Type‹s_547›} ->
    ∀ {x_606 : A_605} -> (sing_3‹s_547,t_548› ?_3[2;2] x_606) -> A_605)
assert_equal1_extend(
  ∀ {A_618 : Type‹s_547›} ->
    ∀ {x_619 : A_618} -> (sing_3‹s_547,t_548› ?_4[2;2] x_619) -> A_618,
  ∀ {A_621 : Type‹s_547›} ->
    ∀ {x_622 : A_621} -> (sing_3‹s_547,t_548› ?_3[2;2] x_622) -> A_621)
simpl_tm ~expand:false(
  ∀ {A_641 : Type‹s_547›} ->
    ∀ {x_642 : A_641} -> (sing_3‹s_547,t_548› A_641 x_642) -> A_641,
  ∀ {A_644 : Type‹s_547›} ->
    ∀ {x_645 : A_644} -> (sing_3‹s_547,t_548› A_644 x_645) -> A_644)
simpl_tm ~expand:false( Type‹s_547›, Type‹s_547›)
simpl_tm ~expand:false(
  ∀ {x_648 : A_647} -> (sing_3‹s_547,t_548› A_647 x_648) -> A_647,
  ∀ {x_650 : A_647} -> (sing_3‹s_547,t_548› A_647 x_650) -> A_647)
simpl_tm ~expand:false( A_647, A_647)
simpl_tm ~expand:false( (sing_3‹s_547,t_548› A_647 x_652) -> A_647,
  (sing_3‹s_547,t_548› A_647 x_652) -> A_647)
simpl_tm ~expand:false( (sing_3‹s_547,t_548› A_647 x_652),
  (sing_3‹s_547,t_548› A_647 x_652))
simpl_tm ~expand:false( A_647, A_647)
simpl_tm ~expand:false( x_652, x_652)
simpl_tm ~expand:false( A_647, A_647)
check_cls {|
  prblm {| ; {|  ::: [A_624, x_625, (just_3 x_626)] =>? #x_626 |} |}
  a := ∀ {A_663 : Type‹s_547›} ->
         ∀ {x_664 : A_663} ->
           (sing_3‹s_547,t_548› A_663 x_664) -> A_663
|}
case_intro(A_666 : Type‹s_547›)
case_intro(x_667 : #A_666)
case_intro(__668 : (sing_3‹s_547,t_548› #A_666 #x_667))
splitting_on(just_3)
case_coverage{|
  prblm {|
    eq_term?( (sing_3‹s_547,t_548› #A_666 #x_667),
      (sing_3‹s_547,t_548› #A_666 #m_669));
    {| eq_pat?( #A_666, A_624 : Type‹s_547›)
       eq_pat?( #x_667, x_625 : #A_666)
       eq_pat?( #m_669, x_626 : #A_666) ::: [] =>? #x_626
    |}
  |}
|}
unify_local(
  eq_pat?( #A_666, A_624 : Type‹s_547›)
  eq_pat?( #x_667, x_625 : #A_666)
  eq_pat?( #m_669, x_626 : #A_666)
)
unify_global(
  eq_term?( (sing_3‹s_547,t_548› #A_666 #x_667),
    (sing_3‹s_547,t_548› #A_666 #m_669))
)
simpl_pprbm ~expand:false( #A_666, #A_624)
simpl_pprbm ~expand:false( #x_667, #x_625)
simpl_pprbm ~expand:false( #m_669, #x_626)
local_map solved
simpl_pprbm ~expand:false( (sing_3‹s_547,t_548› #A_666 #x_667),
  (sing_3‹s_547,t_548› #A_666 #m_669))
simpl_pprbm ~expand:false( #A_666, #A_666)
simpl_pprbm ~expand:false( #x_667, #m_669)
global_map solved
case_coverage_ok( m_669, A_666)
check_tm( m_669, A_666)
infer_tm(m_669)
assert_equal1( A_666, A_666)
assert_equal1_ok( A_666, A_666)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_676
    ??_2 <= s_677
    ??_3 <= s_679
    ??_4 <= t_680
    ??_5 <= s_682
    ??_6 <= s_685
    ??_7 <= r_687
    ??_8 <= t_689
    
  |}
  imeta_meta {|
    ?_1 <= A_694
    ?_2 <= A_698
    ?_3 <= A_702
    ?_4 <= A_706
    
  |}
  eqns {|
    
  |}
end_dump
attempt_delay(?_3[2;2] : Type‹s_547›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_547›)
infer_tm(Type‹s_547›)
assert_type_ok(Type‹s_547›, U)
check_tm( A_587, Type‹s_547›)
infer_tm(A_587)
assert_equal1( Type‹s_547›, Type‹s_547›)
assert_equal1_ok( Type‹s_547›, Type‹s_547›)
attempt_delay(?_4[2;2] : Type‹s_547›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_547›)
infer_tm(Type‹s_547›)
assert_type_ok(Type‹s_547›, U)
check_tm( A_555, Type‹s_547›)
infer_tm(A_555)
assert_equal1( Type‹s_547›, Type‹s_547›)
assert_equal1_ok( Type‹s_547›, Type‹s_547›)
----------------------------------

definition-------------------------
assert_type(∀ (A_741 : Type‹s_739›) ->
              ∀ (x0_742 : A_741) ->
                ∀ (x_743 : (sing_3‹s_739,t_740› ?_11[0;0] x0_742)) ->
                  (eq_1‹??_15›
                    ?_14[0;0] x0_742
                    ((sing_elim_1‹??_13,??_14›)
                      ?_13[0;0] ?_12[0;0] x_743)))
infer_tm(∀ (A_744 : Type‹s_739›) ->
           ∀ (x0_745 : A_744) ->
             ∀ (x_746 : (sing_3‹s_739,t_740› ?_11[0;0] x0_745)) ->
               (eq_1‹??_15›
                 ?_14[0;0] x0_745
                 ((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_746)))
assert_type(Type‹s_739›)
infer_tm(Type‹s_739›)
assert_type_ok(Type‹s_739›, U)
assert_type(∀ (x0_748 : A_747) ->
              ∀ (x_749 : (sing_3‹s_739,t_740› ?_11[0;0] x0_748)) ->
                (eq_1‹??_15›
                  ?_14[0;0] x0_748
                  ((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_749)))
infer_tm(∀ (x0_750 : A_747) ->
           ∀ (x_751 : (sing_3‹s_739,t_740› ?_11[0;0] x0_750)) ->
             (eq_1‹??_15›
               ?_14[0;0] x0_750
               ((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_751)))
assert_type(A_747)
infer_tm(A_747)
assert_type_ok(A_747, Type‹s_739›)
assert_type(∀ (x_753 : (sing_3‹s_739,t_740› ?_11[0;0] x0_752)) ->
              (eq_1‹??_15›
                ?_14[0;0] x0_752
                ((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_753)))
infer_tm(∀ (x_754 : (sing_3‹s_739,t_740› ?_11[0;0] x0_752)) ->
           (eq_1‹??_15›
             ?_14[0;0] x0_752
             ((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_754)))
assert_type((sing_3‹s_739,t_740› ?_11[0;0] x0_752))
infer_tm((sing_3‹s_739,t_740› ?_11[0;0] x0_752))
check_tm( ?_11[0;0], Type‹s_739›)
check_tm( x0_752, ?_11[2;2])
infer_tm(x0_752)
assert_equal1( ?_11[2;2], A_747)
assert_equal1_extend( ?_11[2;2], A_747)
assert_type_ok((sing_3‹s_739,t_740› ?_11[0;0] x0_752), Type‹t_740›)
simpl_tm ~expand:false( ?_11[2;2], A_747)
assert_type((eq_1‹??_15›
              ?_14[0;0] x0_752
              ((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_755)))
infer_tm((eq_1‹??_15›
           ?_14[0;0] x0_752
           ((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_755)))
check_tm( ?_14[0;0], Type‹??_15›)
check_tm( x0_752, ?_14[2;3])
infer_tm(x0_752)
assert_equal1( ?_14[2;3], A_747)
assert_equal1_extend( ?_14[2;3], A_747)
check_tm( ((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_755),
  ?_14[2;3])
infer_tm(((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_755))
infer_tm(((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0]))
infer_tm(((sing_elim_1‹??_13,??_14›) ?_13[0;0]))
infer_tm(sing_elim_1‹??_13,??_14›)
simpl_tm ~expand:false( ?_14[2;3], A_747)
check_tm( ?_13[0;0], Type‹??_13›)
check_tm( ?_12[0;0], ?_13[2;3])
check_tm( x_755, (sing_3‹??_13,??_14› ?_13[2;3] ?_12[2;3]))
infer_tm(x_755)
assert_equal1( (sing_3‹??_13,??_14› ?_13[2;3] ?_12[2;3]),
  (sing_3‹s_739,t_740› ?_11[2;2] x0_752))
assert_equal1_extend( (sing_3‹??_13,??_14› ?_13[2;3] ?_12[2;3]),
  (sing_3‹s_739,t_740› ?_11[2;2] x0_752))
assert_equal1( ?_14[2;3], ?_13[2;3])
assert_equal1_extend( ?_14[2;3], ?_13[2;3])
assert_type_ok((eq_1‹??_15›
                 ?_14[0;0] x0_752
                 ((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_755)), U)
simpl_tm ~expand:false( A_747, ?_13[2;3])
simpl_tm ~expand:false( (sing_3‹??_13,??_14› A_747 ?_12[2;3]),
  (sing_3‹s_739,t_740› A_747 x0_752))
simpl_tm ~expand:false( A_747, A_747)
simpl_tm ~expand:false( ?_12[2;3], x0_752)
simpl_tm ~expand:false( x0_752, ?_12[2;3])
assert_type_ok(∀ (x_776 : (sing_3‹s_739,t_740› ?_11[0;0] x0_752)) ->
                 (eq_1‹??_15›
                   ?_14[0;0] x0_752
                   ((sing_elim_1‹??_13,??_14›) ?_13[0;0] ?_12[0;0] x_776)), U)
assert_type_ok(∀ (x0_777 : A_747) ->
                 ∀ (x_778 : (sing_3‹s_739,t_740› ?_11[0;0] x0_777)) ->
                   (eq_1‹??_15›
                     ?_14[0;0] x0_777
                     ((sing_elim_1‹??_13,??_14›)
                       ?_13[0;0] ?_12[0;0] x_778)), U)
assert_type_ok(∀ (A_779 : Type‹s_739›) ->
                 ∀ (x0_780 : A_779) ->
                   ∀ (x_781 :
                     (sing_3‹s_739,t_740› ?_11[0;0] x0_780)) ->
                     (eq_1‹??_15›
                       ?_14[0;0] x0_780
                       ((sing_elim_1‹??_13,??_14›)
                         ?_13[0;0] ?_12[0;0] x_781)), U)
check_tm(
  function sing_uniq_782 :
    ∀ (A_783 : Type‹s_739›) ->
      ∀ (x0_784 : A_783) ->
        ∀ (x_785 : (sing_3‹s_739,t_740› ?_5[0;0] x0_784)) ->
          (eq_1‹??_11›
            ?_8[0;0] x0_784
            ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_785))
  | A_786 x0_787 (just_3 _788) => (refl_1‹??_12› ?_9[0;0] ?_10[0;0]),
  ∀ (A_789 : Type‹s_739›) ->
    ∀ (x0_790 : A_789) ->
      ∀ (x_791 : (sing_3‹s_739,t_740› ?_11[2;2] x0_790)) ->
        (eq_1‹??_15›
          ?_14[2;3] x0_790
          ((sing_elim_1‹??_13,??_14›) ?_13[2;3] ?_12[2;3] x_791)))
assert_type(∀ (A_793 : Type‹s_739›) ->
              ∀ (x0_794 : A_793) ->
                ∀ (x_795 : (sing_3‹s_739,t_740› ?_5[0;0] x0_794)) ->
                  (eq_1‹??_11›
                    ?_8[0;0] x0_794
                    ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_795)))
infer_tm(∀ (A_796 : Type‹s_739›) ->
           ∀ (x0_797 : A_796) ->
             ∀ (x_798 : (sing_3‹s_739,t_740› ?_5[0;0] x0_797)) ->
               (eq_1‹??_11›
                 ?_8[0;0] x0_797
                 ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_798)))
assert_type(Type‹s_739›)
infer_tm(Type‹s_739›)
assert_type_ok(Type‹s_739›, U)
assert_type(∀ (x0_800 : A_799) ->
              ∀ (x_801 : (sing_3‹s_739,t_740› ?_5[0;0] x0_800)) ->
                (eq_1‹??_11›
                  ?_8[0;0] x0_800
                  ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_801)))
infer_tm(∀ (x0_802 : A_799) ->
           ∀ (x_803 : (sing_3‹s_739,t_740› ?_5[0;0] x0_802)) ->
             (eq_1‹??_11›
               ?_8[0;0] x0_802
               ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_803)))
assert_type(A_799)
infer_tm(A_799)
assert_type_ok(A_799, Type‹s_739›)
assert_type(∀ (x_805 : (sing_3‹s_739,t_740› ?_5[0;0] x0_804)) ->
              (eq_1‹??_11›
                ?_8[0;0] x0_804
                ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_805)))
infer_tm(∀ (x_806 : (sing_3‹s_739,t_740› ?_5[0;0] x0_804)) ->
           (eq_1‹??_11›
             ?_8[0;0] x0_804
             ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_806)))
assert_type((sing_3‹s_739,t_740› ?_5[0;0] x0_804))
infer_tm((sing_3‹s_739,t_740› ?_5[0;0] x0_804))
check_tm( ?_5[0;0], Type‹s_739›)
check_tm( x0_804, ?_5[2;2])
infer_tm(x0_804)
assert_equal1( ?_5[2;2], A_799)
assert_equal1_extend( ?_5[2;2], A_799)
assert_type_ok((sing_3‹s_739,t_740› ?_5[0;0] x0_804), Type‹t_740›)
simpl_tm ~expand:false( ?_5[2;2], A_799)
assert_type((eq_1‹??_11›
              ?_8[0;0] x0_804
              ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_807)))
infer_tm((eq_1‹??_11›
           ?_8[0;0] x0_804
           ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_807)))
check_tm( ?_8[0;0], Type‹??_11›)
check_tm( x0_804, ?_8[2;3])
infer_tm(x0_804)
assert_equal1( ?_8[2;3], A_799)
assert_equal1_extend( ?_8[2;3], A_799)
check_tm( ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_807), ?_8[2;3])
infer_tm(((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_807))
infer_tm(((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0]))
infer_tm(((sing_elim_1‹??_9,??_10›) ?_7[0;0]))
infer_tm(sing_elim_1‹??_9,??_10›)
simpl_tm ~expand:false( ?_8[2;3], A_799)
check_tm( ?_7[0;0], Type‹??_9›)
check_tm( ?_6[0;0], ?_7[2;3])
check_tm( x_807, (sing_3‹??_9,??_10› ?_7[2;3] ?_6[2;3]))
infer_tm(x_807)
assert_equal1( (sing_3‹??_9,??_10› ?_7[2;3] ?_6[2;3]),
  (sing_3‹s_739,t_740› ?_5[2;2] x0_804))
assert_equal1_extend( (sing_3‹??_9,??_10› ?_7[2;3] ?_6[2;3]),
  (sing_3‹s_739,t_740› ?_5[2;2] x0_804))
assert_equal1( ?_8[2;3], ?_7[2;3])
assert_equal1_extend( ?_8[2;3], ?_7[2;3])
assert_type_ok((eq_1‹??_11›
                 ?_8[0;0] x0_804
                 ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_807)), U)
simpl_tm ~expand:false( A_799, ?_7[2;3])
simpl_tm ~expand:false( (sing_3‹??_9,??_10› A_799 ?_6[2;3]),
  (sing_3‹s_739,t_740› A_799 x0_804))
simpl_tm ~expand:false( A_799, A_799)
simpl_tm ~expand:false( ?_6[2;3], x0_804)
simpl_tm ~expand:false( x0_804, ?_6[2;3])
assert_type_ok(∀ (x_828 : (sing_3‹s_739,t_740› ?_5[0;0] x0_804)) ->
                 (eq_1‹??_11›
                   ?_8[0;0] x0_804
                   ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_828)), U)
assert_type_ok(∀ (x0_829 : A_799) ->
                 ∀ (x_830 : (sing_3‹s_739,t_740› ?_5[0;0] x0_829)) ->
                   (eq_1‹??_11›
                     ?_8[0;0] x0_829
                     ((sing_elim_1‹??_9,??_10›) ?_7[0;0] ?_6[0;0] x_830)), U)
assert_type_ok(∀ (A_831 : Type‹s_739›) ->
                 ∀ (x0_832 : A_831) ->
                   ∀ (x_833 : (sing_3‹s_739,t_740› ?_5[0;0] x0_832)) ->
                     (eq_1‹??_11›
                       ?_8[0;0] x0_832
                       ((sing_elim_1‹??_9,??_10›)
                         ?_7[0;0] ?_6[0;0] x_833)), U)
assert_equal1(
  ∀ (A_834 : Type‹s_739›) ->
    ∀ (x0_835 : A_834) ->
      ∀ (x_836 : (sing_3‹s_739,t_740› ?_11[2;2] x0_835)) ->
        (eq_1‹??_15›
          ?_14[2;3] x0_835
          ((sing_elim_1‹??_13,??_14›) ?_13[2;3] ?_12[2;3] x_836)),
  ∀ (A_837 : Type‹s_739›) ->
    ∀ (x0_838 : A_837) ->
      ∀ (x_839 : (sing_3‹s_739,t_740› ?_5[2;2] x0_838)) ->
        (eq_1‹??_11›
          ?_8[2;3] x0_838
          ((sing_elim_1‹??_9,??_10›) ?_7[2;3] ?_6[2;3] x_839)))
assert_equal1_extend(
  ∀ (A_850 : Type‹s_739›) ->
    ∀ (x0_851 : A_850) ->
      ∀ (x_852 : (sing_3‹s_739,t_740› ?_11[2;2] x0_851)) ->
        (eq_1‹??_15›
          ?_14[2;3] x0_851
          ((sing_elim_1‹??_13,??_14›) ?_13[2;3] ?_12[2;3] x_852)),
  ∀ (A_853 : Type‹s_739›) ->
    ∀ (x0_854 : A_853) ->
      ∀ (x_855 : (sing_3‹s_739,t_740› ?_5[2;2] x0_854)) ->
        (eq_1‹??_11›
          ?_8[2;3] x0_854
          ((sing_elim_1‹??_9,??_10›) ?_7[2;3] ?_6[2;3] x_855)))
simpl_tm ~expand:false(
  ∀ (A_903 : Type‹s_739›) ->
    ∀ (x0_904 : A_903) ->
      ∀ (x_905 : (sing_3‹s_739,t_740› A_903 x0_904)) ->
        (eq_1‹??_15›
          A_903 x0_904 ((sing_elim_1‹s_739,t_740›) A_903 x0_904 x_905)),
  ∀ (A_906 : Type‹s_739›) ->
    ∀ (x0_907 : A_906) ->
      ∀ (x_908 : (sing_3‹s_739,t_740› A_906 x0_907)) ->
        (eq_1‹??_11›
          A_906 x0_907 ((sing_elim_1‹s_739,t_740›) A_906 x0_907 x_908)))
simpl_tm ~expand:false( Type‹s_739›, Type‹s_739›)
simpl_tm ~expand:false(
  ∀ (x0_910 : A_909) ->
    ∀ (x_911 : (sing_3‹s_739,t_740› A_909 x0_910)) ->
      (eq_1‹??_15›
        A_909 x0_910 ((sing_elim_1‹s_739,t_740›) A_909 x0_910 x_911)),
  ∀ (x0_912 : A_909) ->
    ∀ (x_913 : (sing_3‹s_739,t_740› A_909 x0_912)) ->
      (eq_1‹??_11›
        A_909 x0_912 ((sing_elim_1‹s_739,t_740›) A_909 x0_912 x_913)))
simpl_tm ~expand:false( A_909, A_909)
simpl_tm ~expand:false(
  ∀ (x_915 : (sing_3‹s_739,t_740› A_909 x0_914)) ->
    (eq_1‹??_15›
      A_909 x0_914 ((sing_elim_1‹s_739,t_740›) A_909 x0_914 x_915)),
  ∀ (x_916 : (sing_3‹s_739,t_740› A_909 x0_914)) ->
    (eq_1‹??_11›
      A_909 x0_914 ((sing_elim_1‹s_739,t_740›) A_909 x0_914 x_916)))
simpl_tm ~expand:false( (sing_3‹s_739,t_740› A_909 x0_914),
  (sing_3‹s_739,t_740› A_909 x0_914))
simpl_tm ~expand:false( A_909, A_909)
simpl_tm ~expand:false( x0_914, x0_914)
simpl_tm ~expand:false(
  (eq_1‹??_15›
    A_909 x0_914 ((sing_elim_1‹s_739,t_740›) A_909 x0_914 x_917)),
  (eq_1‹??_11›
    A_909 x0_914 ((sing_elim_1‹s_739,t_740›) A_909 x0_914 x_917)))
simpl_tm ~expand:false( A_909, A_909)
simpl_tm ~expand:false( x0_914, x0_914)
simpl_tm ~expand:false( ((sing_elim_1‹s_739,t_740›) A_909 x0_914 x_917),
  ((sing_elim_1‹s_739,t_740›) A_909 x0_914 x_917))
simpl_tm ~expand:false( sing_elim_1‹s_739,t_740›,
  sing_elim_1‹s_739,t_740›)
simpl_tm ~expand:false( A_909, A_909)
simpl_tm ~expand:false( x0_914, x0_914)
simpl_tm ~expand:false( x_917, x_917)
check_cls {|
  prblm {| ;
    {|  ::: [A_856, x0_857, (just_3 _858)] =>?
         (refl_1‹??_12› ?_9[0;0] ?_10[0;0])
    |}
  |}
  a := ∀ (A_940 : Type‹s_739›) ->
         ∀ (x0_941 : A_940) ->
           ∀ (x_942 : (sing_3‹s_739,t_740› A_940 x0_941)) ->
             (eq_1‹??_11›
               A_940 x0_941
               ((sing_elim_1‹s_739,t_740›) A_940 x0_941 x_942))
|}
case_intro(A_943 : Type‹s_739›)
case_intro(x0_944 : #A_943)
case_intro(x_945 : (sing_3‹s_739,t_740› #A_943 #x0_944))
splitting_on(just_3)
case_coverage{|
  prblm {|
    eq_term?( (sing_3‹s_739,t_740› #A_943 #x0_944),
      (sing_3‹s_739,t_740› #A_943 #m_946));
    {| eq_pat?( #A_943, A_856 : Type‹s_739›)
       eq_pat?( #x0_944, x0_857 : #A_943)
       eq_pat?( #m_946, _858 : #A_943) ::: [] =>?
         (refl_1‹??_12› ?_9[0;0] ?_10[0;0])
    |}
  |}
|}
unify_local(
  eq_pat?( #A_943, A_856 : Type‹s_739›)
  eq_pat?( #x0_944, x0_857 : #A_943)
  eq_pat?( #m_946, _858 : #A_943)
)
unify_global(
  eq_term?( (sing_3‹s_739,t_740› #A_943 #x0_944),
    (sing_3‹s_739,t_740› #A_943 #m_946))
)
simpl_pprbm ~expand:false( #A_943, #A_856)
simpl_pprbm ~expand:false( #x0_944, #x0_857)
simpl_pprbm ~expand:false( #m_946, #_858)
local_map solved
simpl_pprbm ~expand:false( (sing_3‹s_739,t_740› #A_943 #x0_944),
  (sing_3‹s_739,t_740› #A_943 #m_946))
simpl_pprbm ~expand:false( #A_943, #A_943)
simpl_pprbm ~expand:false( #x0_944, #m_946)
global_map solved
case_coverage_ok( (refl_1‹??_12› ?_9[0;0] ?_10[0;0]),
  (eq_1‹??_11›
    A_943 m_946
    ((sing_elim_1‹s_739,t_740›)
      A_943 m_946 (just_3‹s_739,t_740› A_943 m_946))))
check_tm( (refl_1‹??_12› ?_9[0;0] ?_10[0;0]),
  (eq_1‹??_11›
    A_943 m_946
    ((sing_elim_1‹s_739,t_740›)
      A_943 m_946 (just_3‹s_739,t_740› A_943 m_946))))
infer_tm((refl_1‹??_12› ?_9[0;0] ?_10[0;0]))
check_tm( ?_9[0;0], Type‹??_12›)
check_tm( ?_10[0;0], ?_9[2;5])
assert_equal1(
  (eq_1‹??_11›
    A_943 m_946
    ((sing_elim_1‹s_739,t_740›)
      A_943 m_946 (just_3‹s_739,t_740› A_943 m_946))),
  (eq_1‹??_12› ?_9[2;5] ?_10[2;5] ?_10[2;5]))
assert_equal1_extend(
  (eq_1‹??_11›
    A_943 m_946
    ((sing_elim_1‹s_739,t_740›)
      A_943 m_946 (just_3‹s_739,t_740› A_943 m_946))),
  (eq_1‹??_12› ?_9[2;5] ?_10[2;5] ?_10[2;5]))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_953
    ??_2 <= s_954
    ??_3 <= s_956
    ??_4 <= t_957
    ??_5 <= s_959
    ??_6 <= s_962
    ??_7 <= r_964
    ??_8 <= t_966
    ??_9 <= s_970
    ??_10 <= t_971
    ??_13 <= s_974
    ??_14 <= t_975
    ??_15 <= ??_11
    
  |}
  imeta_meta {|
    ?_1 <= A_981
    ?_2 <= A_985
    ?_3 <= A_989
    ?_4 <= A_993
    ?_5 <= A_997
    ?_6 <= x0_1001
    ?_7 <= A_1007
    ?_8 <= A_1012
    ?_11 <= A_1016
    ?_12 <= x0_1020
    ?_13 <= A_1026
    ?_14 <= A_1031
    
  |}
  eqns {|
    equal_tm?
      ((eq_1‹??_11›
         A_943 m_946
         ((sing_elim_1‹s_739,t_740›)
           A_943 m_946 (just_3‹s_739,t_740› A_943 m_946))),
      (eq_1‹??_12› ?_9[2;5] ?_10[2;5] ?_10[2;5]))
  |}
end_dump
simpl_tm ~expand:false(
  (eq_1‹??_11›
    A_943 m_946
    ((sing_elim_1‹s_739,t_740›)
      A_943 m_946 (just_3‹s_739,t_740› A_943 m_946))),
  (eq_1‹??_12› ?_9[2;5] ?_10[2;5] ?_10[2;5]))
simpl_tm ~expand:false( A_943, ?_9[2;5])
simpl_tm ~expand:false( m_946, ?_10[2;5])
simpl_tm ~expand:false(
  ((sing_elim_1‹s_739,t_740›)
    A_943 m_946 (just_3‹s_739,t_740› A_943 m_946)),
  ?_10[2;5])
simpl_tm ~expand:false( A_943, ?_9[2;5])
simpl_tm ~expand:false( m_946, ?_10[2;5])
simpl_tm ~expand:false(
  ((sing_elim_1‹s_739,t_740›)
    A_943 m_946 (just_3‹s_739,t_740› A_943 m_946)),
  m_946)
simpl_tm ~expand:false( sing_elim_1‹s_739,t_740›, m_946)
simpl_tm ~expand:true(
  function sing_elim_1039 :
    ∀ {A_1040 : Type‹s_739›} ->
      ∀ {x_1041 : A_1040} ->
        (sing_3‹s_739,t_740› A_1040 x_1041) -> A_1040
  | A_1043 x_1044 (just_3 m_1045) => m_1045, m_946)
simpl_tm ~expand:true( m_946, m_946)
attempt_delay(?_5[2;2] : Type‹s_739›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_739›)
infer_tm(Type‹s_739›)
assert_type_ok(Type‹s_739›, U)
check_tm( A_799, Type‹s_739›)
infer_tm(A_799)
assert_equal1( Type‹s_739›, Type‹s_739›)
assert_equal1_ok( Type‹s_739›, Type‹s_739›)
attempt_delay(?_6[2;3] : ?_7[2;3])
resolve_ctx_ok
resolve_env_ok
assert_type(A_799)
infer_tm(A_799)
assert_type_ok(A_799, Type‹s_739›)
check_tm( x0_804, A_799)
infer_tm(x0_804)
assert_equal1( A_799, A_799)
assert_equal1_ok( A_799, A_799)
attempt_delay(?_7[2;3] : Type‹??_9›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_739›)
infer_tm(Type‹s_739›)
assert_type_ok(Type‹s_739›, U)
check_tm( A_799, Type‹s_739›)
infer_tm(A_799)
assert_equal1( Type‹s_739›, Type‹s_739›)
assert_equal1_ok( Type‹s_739›, Type‹s_739›)
attempt_delay(?_8[2;3] : Type‹??_11›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_11›)
infer_tm(Type‹??_11›)
assert_type_ok(Type‹??_11›, U)
check_tm( A_799, Type‹??_11›)
infer_tm(A_799)
assert_equal1( Type‹??_11›, Type‹s_739›)
assert_equal1_extend( Type‹??_11›, Type‹s_739›)
simpl_tm ~expand:false( Type‹??_11›, Type‹s_739›)
attempt_delay(?_9[2;5] : Type‹??_12›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_739›)
infer_tm(Type‹s_739›)
assert_type_ok(Type‹s_739›, U)
check_tm( A_943, Type‹s_739›)
infer_tm(A_943)
assert_equal1( Type‹s_739›, Type‹s_739›)
assert_equal1_ok( Type‹s_739›, Type‹s_739›)
attempt_delay(?_10[2;5] : ?_9[2;5])
resolve_ctx_ok
resolve_env_ok
assert_type(A_943)
infer_tm(A_943)
assert_type_ok(A_943, Type‹s_739›)
check_tm( m_946, A_943)
infer_tm(m_946)
assert_equal1( A_943, A_943)
assert_equal1_ok( A_943, A_943)
attempt_delay(?_11[2;2] : Type‹s_739›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_739›)
infer_tm(Type‹s_739›)
assert_type_ok(Type‹s_739›, U)
check_tm( A_747, Type‹s_739›)
infer_tm(A_747)
assert_equal1( Type‹s_739›, Type‹s_739›)
assert_equal1_ok( Type‹s_739›, Type‹s_739›)
attempt_delay(?_12[2;3] : ?_13[2;3])
resolve_ctx_ok
resolve_env_ok
assert_type(A_747)
infer_tm(A_747)
assert_type_ok(A_747, Type‹s_739›)
check_tm( x0_752, A_747)
infer_tm(x0_752)
assert_equal1( A_747, A_747)
assert_equal1_ok( A_747, A_747)
attempt_delay(?_13[2;3] : Type‹??_13›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_739›)
infer_tm(Type‹s_739›)
assert_type_ok(Type‹s_739›, U)
check_tm( A_747, Type‹s_739›)
infer_tm(A_747)
assert_equal1( Type‹s_739›, Type‹s_739›)
assert_equal1_ok( Type‹s_739›, Type‹s_739›)
attempt_delay(?_14[2;3] : Type‹??_15›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_739›)
infer_tm(Type‹s_739›)
assert_type_ok(Type‹s_739›, U)
check_tm( A_747, Type‹s_739›)
infer_tm(A_747)
assert_equal1( Type‹s_739›, Type‹s_739›)
assert_equal1_ok( Type‹s_739›, Type‹s_739›)
----------------------------------

inductive-------------------------
assert_type(Type‹s_1262›)
infer_tm(Type‹s_1262›)
assert_type_ok(Type‹s_1262›, U)
assert_type(Type‹s_1264›)
infer_tm(Type‹s_1264›)
assert_type_ok(Type‹s_1264›, U)
assert_type(A_1265)
infer_tm(A_1265)
assert_type_ok(A_1265, Type‹s_1264›)
assert_type(∀ (x_1268 : choice_6) -o
              match x_1268 in ?_15[0;0] -o ?_16[0;0] with
              | next_7 => (stream_node_9‹??_16› A_1265)
              | free_8 => unit_4‹??_17›)
infer_tm(∀ (x_1270 : choice_6) -o
           match x_1270 in ?_15[0;0] -o ?_16[0;0] with
           | next_7 => (stream_node_9‹??_16› A_1265)
           | free_8 => unit_4‹??_17›)
assert_type(choice_6)
infer_tm(choice_6)
assert_type_ok(choice_6, L)
assert_type(match x_1272 in ?_15[0;0] -o ?_16[0;0] with
            | next_7 => (stream_node_9‹??_16› A_1265)
            | free_8 => unit_4‹??_17›)
infer_tm(match x_1272 in ?_15[0;0] -o ?_16[0;0] with
         | next_7 => (stream_node_9‹??_16› A_1265)
         | free_8 => unit_4‹??_17›)
assert_type(?_15[0;0])
infer_tm(?_15[0;0])
assert_type_ok(?_15[0;0], ?_74[1;3])
delay_assert(?_74[1;3], ??_87)
assert_type(?_15[0;0])
infer_tm(?_15[0;0])
assert_type_ok(?_15[0;0], ?_74[1;3])
simpl_tm ~expand:false( ?_74[1;3], Type‹??_87›)
check_tm( x_1272, ?_15[1;3])
infer_tm(x_1272)
assert_equal1( ?_15[1;3], choice_6)
assert_equal1_extend( ?_15[1;3], choice_6)
assert_type(?_16[0;0])
infer_tm(?_16[0;0])
assert_type_ok(?_16[0;0], ?_75[1;4])
simpl_tm ~expand:false( ?_15[1;3], choice_6)
delay_assert(?_75[1;4], ??_88)
assert_type(?_16[0;0])
infer_tm(?_16[0;0])
assert_type_ok(?_16[0;0], ?_75[1;4])
simpl_tm ~expand:false( ?_75[1;4], Type‹??_88›)
check_cls {|
  prblm {| ;
    {|  ::: [next_7] =>? (stream_node_9‹??_16› A_1265) |}
    {|  ::: [free_8] =>? unit_4‹??_17› |}
  |}
  a := ∀ (_1290 : choice_6) -o ?_16[1;4]
|}
case_intro(_1291 : choice_6)
splitting_on(next_7)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {|  ::: [] =>? (stream_node_9‹??_16› A_1265) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
local_map solved
simpl_pprbm ~expand:false( choice_6, choice_6)
global_map solved
case_coverage_ok( (stream_node_9‹??_16› A_1265), ?_16[1;4])
check_tm( (stream_node_9‹??_16› A_1265), ?_16[1;4])
infer_tm((stream_node_9‹??_16› A_1265))
check_tm( A_1265, Type‹??_16›)
infer_tm(A_1265)
assert_equal1( Type‹??_16›, Type‹s_1264›)
assert_equal1_extend( Type‹??_16›, Type‹s_1264›)
assert_equal1( ?_16[1;4], L)
assert_equal1_extend( ?_16[1;4], L)
splitting_on(free_8)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6); {|  ::: [] =>? unit_4‹??_17› |}
  |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
local_map solved
simpl_pprbm ~expand:false( choice_6, choice_6)
global_map solved
case_coverage_ok( unit_4‹??_17›, ?_16[1;4])
check_tm( unit_4‹??_17›, ?_16[1;4])
infer_tm(unit_4‹??_17›)
assert_equal1( ?_16[1;4], Type‹??_17›)
assert_equal1_extend( ?_16[1;4], Type‹??_17›)
assert_type_ok(match x_1272 in ?_15[0;0] -o ?_16[0;0] with
               | next_7 => (stream_node_9‹??_16› A_1265)
               | free_8 => unit_4‹??_17›, ?_16[1;4])
simpl_tm ~expand:false( ?_16[1;4], Type‹??_17›)
simpl_tm ~expand:false( Type‹??_17›, L)
simpl_tm ~expand:false( Type‹??_16›, Type‹s_1264›)
assert_type_ok(∀ (x_1304 : choice_6) -o
                 match x_1304 in ?_15[0;0] -o ?_16[0;0] with
                 | next_7 => (stream_node_9‹??_16› A_1265)
                 | free_8 => unit_4‹??_17›, L)
assert_type((stream_node_9‹??_18› A_1265))
infer_tm((stream_node_9‹??_18› A_1265))
check_tm( A_1265, Type‹??_18›)
infer_tm(A_1265)
assert_equal1( Type‹??_18›, Type‹s_1264›)
assert_equal1_extend( Type‹??_18›, Type‹s_1264›)
assert_type_ok((stream_node_9‹??_18› A_1265), L)
simpl_tm ~expand:false( Type‹??_18›, Type‹s_1264›)
assert_equal1( A_1265, A_1265)
assert_equal1_ok( A_1265, A_1265)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_1306
    ??_2 <= s_1307
    ??_3 <= s_1309
    ??_4 <= t_1310
    ??_5 <= s_1312
    ??_6 <= s_1315
    ??_7 <= r_1317
    ??_8 <= t_1319
    ??_9 <= s_1323
    ??_10 <= t_1324
    ??_11 <= s_1327
    ??_12 <= ??_11
    ??_13 <= s_1331
    ??_14 <= t_1332
    ??_15 <= ??_11
    ??_16 <= s_1336
    ??_17 <= L
    ??_18 <= s_1338
    
  |}
  imeta_meta {|
    ?_1 <= A_1341
    ?_2 <= A_1345
    ?_3 <= A_1349
    ?_4 <= A_1353
    ?_5 <= A_1357
    ?_6 <= x0_1361
    ?_7 <= A_1367
    ?_8 <= A_1372
    ?_9 <= A_1378
    ?_10 <= m_1382
    ?_11 <= A_1390
    ?_12 <= x0_1394
    ?_13 <= A_1400
    ?_14 <= A_1405
    ?_15 <= choice_6
    ?_16 <= Type‹??_17›
    ?_74 <= Type‹??_87›
    ?_75 <= Type‹??_88›
    
  |}
  eqns {|
    equal_sort? (s_1264, ??_18)
  |}
end_dump
attempt_delay(?_15[1;3] : ?_74[1;3])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_87›)
infer_tm(Type‹??_87›)
assert_type_ok(Type‹??_87›, U)
check_tm( choice_6, Type‹??_87›)
infer_tm(choice_6)
assert_equal1( Type‹??_87›, L)
assert_equal1_extend( Type‹??_87›, L)
simpl_tm ~expand:false( Type‹??_87›, L)
attempt_delay(?_16[1;4] : ?_75[1;4])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_88›)
infer_tm(Type‹??_88›)
assert_type_ok(Type‹??_88›, U)
check_tm( L, Type‹??_88›)
infer_tm(L)
assert_equal1( Type‹??_88›, U)
assert_equal1_extend( Type‹??_88›, U)
simpl_tm ~expand:false( Type‹??_88›, U)
----------------------------------

definition-------------------------
assert_type(Type‹s_1472› -> ?_20[0;0])
infer_tm(Type‹s_1472› -> ?_20[0;0])
assert_type(Type‹s_1472›)
infer_tm(Type‹s_1472›)
assert_type_ok(Type‹s_1472›, U)
assert_type(?_20[0;0])
infer_tm(?_20[0;0])
assert_type_ok(?_20[0;0], ?_76[1;1])
delay_assert(?_76[1;1], ??_89)
assert_type_ok(Type‹s_1472› -> ?_20[0;0], U)
simpl_tm ~expand:false( ?_76[1;1], Type‹??_89›)
check_tm(
  function stream_1477 : Type‹s_1472› -> ?_17[0;0]
  | A_1479 =>
    ∀ (x_1480 : choice_6) -o
      match x_1480 in ?_18[0;0] -o ?_19[0;0] with
      | next_7 => (stream_node_9‹??_19› A_1479)
      | free_8 => unit_4‹??_20›,
  ∀ (A_1482 : Type‹s_1472›) -> ?_20[1;1])
assert_type(Type‹s_1472› -> ?_17[0;0])
infer_tm(Type‹s_1472› -> ?_17[0;0])
assert_type(Type‹s_1472›)
infer_tm(Type‹s_1472›)
assert_type_ok(Type‹s_1472›, U)
assert_type(?_17[0;0])
infer_tm(?_17[0;0])
assert_type_ok(?_17[0;0], ?_77[1;1])
delay_assert(?_77[1;1], ??_90)
assert_type_ok(Type‹s_1472› -> ?_17[0;0], U)
simpl_tm ~expand:false( ?_77[1;1], Type‹??_90›)
assert_equal1( ∀ (A_1488 : Type‹s_1472›) -> ?_20[1;1],
  ∀ (A_1489 : Type‹s_1472›) -> ?_17[1;1])
assert_equal1_extend( ∀ (A_1494 : Type‹s_1472›) -> ?_20[1;1],
  ∀ (A_1495 : Type‹s_1472›) -> ?_17[1;1])
simpl_tm ~expand:false( ∀ (A_1499 : Type‹s_1472›) -> ?_20[1;1],
  ∀ (A_1500 : Type‹s_1472›) -> ?_17[1;1])
simpl_tm ~expand:false( Type‹s_1472›, Type‹s_1472›)
simpl_tm ~expand:false( ?_20[1;1], ?_17[1;1])
check_cls {|
  prblm {| ;
    {|  ::: [A_1496] =>?
         ∀ (x_1505 : choice_6) -o
           match x_1505 in ?_18[0;0] -o ?_19[0;0] with
           | next_7 => (stream_node_9‹??_19› #A_1496)
           | free_8 => unit_4‹??_20›
    |}
  |}
  a := ∀ (A_1507 : Type‹s_1472›) -> ?_17[1;1]
|}
case_intro(A_1508 : Type‹s_1472›)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #A_1508, A_1496 : Type‹s_1472›) ::: [] =>?
         ∀ (x_1509 : choice_6) -o
           match x_1509 in ?_18[0;0] -o ?_19[0;0] with
           | next_7 => (stream_node_9‹??_19› #A_1496)
           | free_8 => unit_4‹??_20›
    |}
  |}
|}
unify_local( eq_pat?( #A_1508, A_1496 : Type‹s_1472›) )
unify_global(  )
simpl_pprbm ~expand:false( #A_1508, #A_1496)
local_map solved
global_map solved
case_coverage_ok(
  ∀ (x_1514 : choice_6) -o
    match x_1514 in ?_18[0;0] -o ?_19[0;0] with
    | next_7 => (stream_node_9‹??_19› A_1508)
    | free_8 => unit_4‹??_20›,
  ?_17[1;1])
check_tm(
  ∀ (x_1516 : choice_6) -o
    match x_1516 in ?_18[0;0] -o ?_19[0;0] with
    | next_7 => (stream_node_9‹??_19› A_1508)
    | free_8 => unit_4‹??_20›,
  ?_17[1;1])
infer_tm(∀ (x_1518 : choice_6) -o
           match x_1518 in ?_18[0;0] -o ?_19[0;0] with
           | next_7 => (stream_node_9‹??_19› A_1508)
           | free_8 => unit_4‹??_20›)
assert_type(choice_6)
infer_tm(choice_6)
assert_type_ok(choice_6, L)
assert_type(match x_1520 in ?_18[0;0] -o ?_19[0;0] with
            | next_7 => (stream_node_9‹??_19› A_1508)
            | free_8 => unit_4‹??_20›)
infer_tm(match x_1520 in ?_18[0;0] -o ?_19[0;0] with
         | next_7 => (stream_node_9‹??_19› A_1508)
         | free_8 => unit_4‹??_20›)
assert_type(?_18[0;0])
infer_tm(?_18[0;0])
assert_type_ok(?_18[0;0], ?_78[1;3])
delay_assert(?_78[1;3], ??_91)
assert_type(?_18[0;0])
infer_tm(?_18[0;0])
assert_type_ok(?_18[0;0], ?_78[1;3])
simpl_tm ~expand:false( ?_78[1;3], Type‹??_91›)
check_tm( x_1520, ?_18[1;3])
infer_tm(x_1520)
assert_equal1( ?_18[1;3], choice_6)
assert_equal1_extend( ?_18[1;3], choice_6)
assert_type(?_19[0;0])
infer_tm(?_19[0;0])
assert_type_ok(?_19[0;0], ?_79[1;4])
simpl_tm ~expand:false( ?_18[1;3], choice_6)
delay_assert(?_79[1;4], ??_92)
assert_type(?_19[0;0])
infer_tm(?_19[0;0])
assert_type_ok(?_19[0;0], ?_79[1;4])
simpl_tm ~expand:false( ?_79[1;4], Type‹??_92›)
check_cls {|
  prblm {| ;
    {|  ::: [next_7] =>? (stream_node_9‹??_19› A_1508) |}
    {|  ::: [free_8] =>? unit_4‹??_20› |}
  |}
  a := ∀ (_1538 : choice_6) -o ?_19[1;4]
|}
case_intro(_1539 : choice_6)
splitting_on(next_7)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {|  ::: [] =>? (stream_node_9‹??_19› A_1508) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
local_map solved
simpl_pprbm ~expand:false( choice_6, choice_6)
global_map solved
case_coverage_ok( (stream_node_9‹??_19› A_1508), ?_19[1;4])
check_tm( (stream_node_9‹??_19› A_1508), ?_19[1;4])
infer_tm((stream_node_9‹??_19› A_1508))
check_tm( A_1508, Type‹??_19›)
infer_tm(A_1508)
assert_equal1( Type‹??_19›, Type‹s_1472›)
assert_equal1_extend( Type‹??_19›, Type‹s_1472›)
assert_equal1( ?_19[1;4], L)
assert_equal1_extend( ?_19[1;4], L)
splitting_on(free_8)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6); {|  ::: [] =>? unit_4‹??_20› |}
  |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
local_map solved
simpl_pprbm ~expand:false( choice_6, choice_6)
global_map solved
case_coverage_ok( unit_4‹??_20›, ?_19[1;4])
check_tm( unit_4‹??_20›, ?_19[1;4])
infer_tm(unit_4‹??_20›)
assert_equal1( ?_19[1;4], Type‹??_20›)
assert_equal1_extend( ?_19[1;4], Type‹??_20›)
assert_type_ok(match x_1520 in ?_18[0;0] -o ?_19[0;0] with
               | next_7 => (stream_node_9‹??_19› A_1508)
               | free_8 => unit_4‹??_20›, ?_19[1;4])
simpl_tm ~expand:false( ?_19[1;4], Type‹??_20›)
simpl_tm ~expand:false( Type‹??_20›, L)
simpl_tm ~expand:false( Type‹??_19›, Type‹s_1472›)
assert_equal1( ?_17[1;1], L)
assert_equal1_extend( ?_17[1;1], L)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_1556
    ??_2 <= s_1557
    ??_3 <= s_1559
    ??_4 <= t_1560
    ??_5 <= s_1562
    ??_6 <= s_1565
    ??_7 <= r_1567
    ??_8 <= t_1569
    ??_9 <= s_1573
    ??_10 <= t_1574
    ??_11 <= s_1577
    ??_12 <= ??_11
    ??_13 <= s_1581
    ??_14 <= t_1582
    ??_15 <= ??_11
    ??_16 <= s_1586
    ??_17 <= L
    ??_18 <= s_1588
    ??_19 <= s_1589
    ??_20 <= L
    ??_87 <= L
    ??_88 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_1595
    ?_2 <= A_1599
    ?_3 <= A_1603
    ?_4 <= A_1607
    ?_5 <= A_1611
    ?_6 <= x0_1615
    ?_7 <= A_1621
    ?_8 <= A_1626
    ?_9 <= A_1632
    ?_10 <= m_1636
    ?_11 <= A_1644
    ?_12 <= x0_1648
    ?_13 <= A_1654
    ?_14 <= A_1659
    ?_15 <= choice_6
    ?_16 <= Type‹??_17›
    ?_18 <= choice_6
    ?_19 <= Type‹??_20›
    ?_20 <= ?_17[1;1]
    ?_74 <= Type‹??_87›
    ?_75 <= Type‹??_88›
    ?_76 <= Type‹??_89›
    ?_77 <= Type‹??_90›
    ?_78 <= Type‹??_91›
    ?_79 <= Type‹??_92›
    
  |}
  eqns {|
    equal_tm? (?_17[1;1], L)
  |}
end_dump
simpl_tm ~expand:false( ?_17[1;1], L)
attempt_delay(?_17[1;1] : ?_77[1;1])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_90›)
infer_tm(Type‹??_90›)
assert_type_ok(Type‹??_90›, U)
check_tm( L, Type‹??_90›)
infer_tm(L)
assert_equal1( Type‹??_90›, U)
assert_equal1_extend( Type‹??_90›, U)
simpl_tm ~expand:false( Type‹??_90›, U)
attempt_delay(?_18[1;3] : ?_78[1;3])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_91›)
infer_tm(Type‹??_91›)
assert_type_ok(Type‹??_91›, U)
check_tm( choice_6, Type‹??_91›)
infer_tm(choice_6)
assert_equal1( Type‹??_91›, L)
assert_equal1_extend( Type‹??_91›, L)
simpl_tm ~expand:false( Type‹??_91›, L)
attempt_delay(?_19[1;4] : ?_79[1;4])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_92›)
infer_tm(Type‹??_92›)
assert_type_ok(Type‹??_92›, U)
check_tm( L, Type‹??_92›)
infer_tm(L)
assert_equal1( Type‹??_92›, U)
assert_equal1_extend( Type‹??_92›, U)
simpl_tm ~expand:false( Type‹??_92›, U)
attempt_delay(?_20[1;1] : ?_76[1;1])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_89›)
infer_tm(Type‹??_89›)
assert_type_ok(Type‹??_89›, U)
check_tm( L, Type‹??_89›)
infer_tm(L)
assert_equal1( Type‹??_89›, U)
assert_equal1_extend( Type‹??_89›, U)
simpl_tm ~expand:false( Type‹??_89›, U)
----------------------------------

definition-------------------------
assert_type(∀ {A_1769 : Type‹s_1768›} ->
              ((stream_3‹??_23›) A_1769) -> unit_4‹U›)
infer_tm(∀ {A_1771 : Type‹s_1768›} ->
           ((stream_3‹??_23›) A_1771) -> unit_4‹U›)
assert_type(Type‹s_1768›)
infer_tm(Type‹s_1768›)
assert_type_ok(Type‹s_1768›, U)
assert_type(((stream_3‹??_23›) A_1773) -> unit_4‹U›)
infer_tm(((stream_3‹??_23›) A_1773) -> unit_4‹U›)
assert_type(((stream_3‹??_23›) A_1773))
infer_tm(((stream_3‹??_23›) A_1773))
infer_tm(stream_3‹??_23›)
check_tm( A_1773, Type‹??_23›)
infer_tm(A_1773)
assert_equal1( Type‹??_23›, Type‹s_1768›)
assert_equal1_extend( Type‹??_23›, Type‹s_1768›)
assert_type_ok(((stream_3‹??_23›) A_1773), L)
simpl_tm ~expand:false( Type‹??_23›, Type‹s_1768›)
assert_type(unit_4‹U›)
infer_tm(unit_4‹U›)
assert_type_ok(unit_4‹U›, U)
assert_type_ok(((stream_3‹??_23›) A_1773) -> unit_4‹U›, U)
assert_type_ok(∀ {A_1779 : Type‹s_1768›} ->
                 ((stream_3‹??_23›) A_1779) -> unit_4‹U›, U)
check_tm(
  function free_stream_1781 :
    ∀ {A_1782 : Type‹s_1768›} ->
      ((stream_3‹??_21›) A_1782) -> unit_4‹U›
  | A_1784 st_1785 =>
    match ((st_1785) free_8) in ?_21[0;0] -o ?_22[0;0] with
    | tt_4 => tt_4‹??_22›,
  ∀ {A_1787 : Type‹s_1768›} ->
    ((stream_3‹??_23›) A_1787) -> unit_4‹U›)
assert_type(∀ {A_1790 : Type‹s_1768›} ->
              ((stream_3‹??_21›) A_1790) -> unit_4‹U›)
infer_tm(∀ {A_1792 : Type‹s_1768›} ->
           ((stream_3‹??_21›) A_1792) -> unit_4‹U›)
assert_type(Type‹s_1768›)
infer_tm(Type‹s_1768›)
assert_type_ok(Type‹s_1768›, U)
assert_type(((stream_3‹??_21›) A_1794) -> unit_4‹U›)
infer_tm(((stream_3‹??_21›) A_1794) -> unit_4‹U›)
assert_type(((stream_3‹??_21›) A_1794))
infer_tm(((stream_3‹??_21›) A_1794))
infer_tm(stream_3‹??_21›)
check_tm( A_1794, Type‹??_21›)
infer_tm(A_1794)
assert_equal1( Type‹??_21›, Type‹s_1768›)
assert_equal1_extend( Type‹??_21›, Type‹s_1768›)
assert_type_ok(((stream_3‹??_21›) A_1794), L)
simpl_tm ~expand:false( Type‹??_21›, Type‹s_1768›)
assert_type(unit_4‹U›)
infer_tm(unit_4‹U›)
assert_type_ok(unit_4‹U›, U)
assert_type_ok(((stream_3‹??_21›) A_1794) -> unit_4‹U›, U)
assert_type_ok(∀ {A_1800 : Type‹s_1768›} ->
                 ((stream_3‹??_21›) A_1800) -> unit_4‹U›, U)
assert_equal1(
  ∀ {A_1802 : Type‹s_1768›} ->
    ((stream_3‹??_23›) A_1802) -> unit_4‹U›,
  ∀ {A_1804 : Type‹s_1768›} ->
    ((stream_3‹??_21›) A_1804) -> unit_4‹U›)
assert_equal1_extend(
  ∀ {A_1811 : Type‹s_1768›} ->
    ((stream_3‹??_23›) A_1811) -> unit_4‹U›,
  ∀ {A_1813 : Type‹s_1768›} ->
    ((stream_3‹??_21›) A_1813) -> unit_4‹U›)
simpl_tm ~expand:false(
  ∀ {A_1821 : Type‹s_1768›} ->
    ((stream_3‹s_1768›) A_1821) -> unit_4‹U›,
  ∀ {A_1823 : Type‹s_1768›} ->
    ((stream_3‹s_1768›) A_1823) -> unit_4‹U›)
simpl_tm ~expand:false( Type‹s_1768›, Type‹s_1768›)
simpl_tm ~expand:false( ((stream_3‹s_1768›) A_1825) -> unit_4‹U›,
  ((stream_3‹s_1768›) A_1825) -> unit_4‹U›)
simpl_tm ~expand:false( ((stream_3‹s_1768›) A_1825),
  ((stream_3‹s_1768›) A_1825))
simpl_tm ~expand:false( stream_3‹s_1768›, stream_3‹s_1768›)
simpl_tm ~expand:false( A_1825, A_1825)
simpl_tm ~expand:false( unit_4‹U›, unit_4‹U›)
check_cls {|
  prblm {| ;
    {|  ::: [A_1815, st_1816] =>?
         match ((#st_1816) free_8) in ?_21[0;0] -o ?_22[0;0] with
         | tt_4 => tt_4‹??_22›
    |}
  |}
  a := ∀ {A_1832 : Type‹s_1768›} ->
         ((stream_3‹s_1768›) A_1832) -> unit_4‹U›
|}
case_intro(A_1834 : Type‹s_1768›)
case_intro(st_1835 : ((stream_3‹s_1768›) #A_1834))
case_coverage{|
  prblm {| ;
    {| eq_pat?( #A_1834, A_1815 : Type‹s_1768›)
       eq_pat?( #st_1835, st_1816 : ((stream_3‹s_1768›) #A_1834)) ::: [] =>?
         match ((#st_1816) free_8) in ?_21[0;0] -o ?_22[0;0] with
         | tt_4 => tt_4‹??_22›
    |}
  |}
|}
unify_local(
  eq_pat?( #A_1834, A_1815 : Type‹s_1768›)
  eq_pat?( #st_1835, st_1816 : ((stream_3‹s_1768›) #A_1834))
)
unify_global(  )
simpl_pprbm ~expand:false( #A_1834, #A_1815)
simpl_pprbm ~expand:false( #st_1835, #st_1816)
local_map solved
global_map solved
case_coverage_ok(
  match ((st_1835) free_8) in ?_21[0;0] -o ?_22[0;0] with
  | tt_4 => tt_4‹??_22›, unit_4‹U›)
check_tm(
  match ((st_1835) free_8) in ?_21[0;0] -o ?_22[0;0] with
  | tt_4 => tt_4‹??_22›, unit_4‹U›)
infer_tm(match ((st_1835) free_8) in ?_21[0;0] -o ?_22[0;0] with
         | tt_4 => tt_4‹??_22›)
assert_type(?_21[0;0])
infer_tm(?_21[0;0])
assert_type_ok(?_21[0;0], ?_80[1;3])
delay_assert(?_80[1;3], ??_93)
assert_type(?_21[0;0])
infer_tm(?_21[0;0])
assert_type_ok(?_21[0;0], ?_80[1;3])
simpl_tm ~expand:false( ?_80[1;3], Type‹??_93›)
check_tm( ((st_1835) free_8), ?_21[1;3])
infer_tm(((st_1835) free_8))
infer_tm(st_1835)
check_tm( free_8, choice_6)
infer_tm(free_8)
assert_equal1( choice_6, choice_6)
assert_equal1_ok( choice_6, choice_6)
assert_equal1( ?_21[1;3],
  match free_8 in choice_6 -o L with
  | next_7 => (stream_node_9‹s_1768› A_1834)
  | free_8 => unit_4‹L›)
assert_equal1_extend( ?_21[1;3],
  match free_8 in choice_6 -o L with
  | next_7 => (stream_node_9‹s_1768› A_1834)
  | free_8 => unit_4‹L›)
assert_type(?_22[0;0])
infer_tm(?_22[0;0])
assert_type_ok(?_22[0;0], ?_81[1;4])
simpl_tm ~expand:false( ?_21[1;3], unit_4‹L›)
delay_assert(?_81[1;4], ??_94)
assert_type(?_22[0;0])
infer_tm(?_22[0;0])
assert_type_ok(?_22[0;0], ?_81[1;4])
simpl_tm ~expand:false( ?_81[1;4], Type‹??_94›)
check_cls {|
  prblm {| ; {|  ::: [tt_4] =>? tt_4‹??_22› |} |}
  a := ∀ (_1861 : unit_4‹L›) -o ?_22[1;4]
|}
case_intro(_1862 : unit_4‹L›)
splitting_on(tt_4)
case_coverage{|
  prblm {| eq_term?( unit_4‹L›, unit_4‹L›);
    {|  ::: [] =>? tt_4‹??_22› |}
  |}
|}
unify_local(  )
unify_global( eq_term?( unit_4‹L›, unit_4‹L›) )
local_map solved
simpl_pprbm ~expand:false( unit_4‹L›, unit_4‹L›)
global_map solved
case_coverage_ok( tt_4‹??_22›, ?_22[1;4])
check_tm( tt_4‹??_22›, ?_22[1;4])
infer_tm(tt_4‹??_22›)
assert_equal1( ?_22[1;4], unit_4‹??_22›)
assert_equal1_extend( ?_22[1;4], unit_4‹??_22›)
assert_equal1( unit_4‹U›, ?_22[1;4])
assert_equal1_extend( unit_4‹U›, ?_22[1;4])
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_1867
    ??_2 <= s_1868
    ??_3 <= s_1870
    ??_4 <= t_1871
    ??_5 <= s_1873
    ??_6 <= s_1876
    ??_7 <= r_1878
    ??_8 <= t_1880
    ??_9 <= s_1884
    ??_10 <= t_1885
    ??_11 <= s_1888
    ??_12 <= ??_11
    ??_13 <= s_1892
    ??_14 <= t_1893
    ??_15 <= ??_11
    ??_16 <= s_1897
    ??_17 <= L
    ??_18 <= s_1899
    ??_19 <= s_1900
    ??_20 <= L
    ??_21 <= s_1902
    ??_23 <= s_1903
    ??_87 <= L
    ??_88 <= U
    ??_89 <= U
    ??_90 <= U
    ??_91 <= L
    ??_92 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_1912
    ?_2 <= A_1916
    ?_3 <= A_1920
    ?_4 <= A_1924
    ?_5 <= A_1928
    ?_6 <= x0_1932
    ?_7 <= A_1938
    ?_8 <= A_1943
    ?_9 <= A_1949
    ?_10 <= m_1953
    ?_11 <= A_1961
    ?_12 <= x0_1965
    ?_13 <= A_1971
    ?_14 <= A_1976
    ?_15 <= choice_6
    ?_16 <= Type‹??_17›
    ?_17 <= L
    ?_18 <= choice_6
    ?_19 <= Type‹??_20›
    ?_20 <= ?_17[1;1]
    ?_21 <= unit_4‹L›
    ?_74 <= Type‹??_87›
    ?_75 <= Type‹??_88›
    ?_76 <= Type‹??_89›
    ?_77 <= Type‹??_90›
    ?_78 <= Type‹??_91›
    ?_79 <= Type‹??_92›
    ?_80 <= Type‹??_93›
    ?_81 <= Type‹??_94›
    
  |}
  eqns {|
    equal_tm? (unit_4‹U›, ?_22[1;4]);
    equal_tm? (?_22[1;4], unit_4‹??_22›)
  |}
end_dump
simpl_tm ~expand:false( unit_4‹U›, ?_22[1;4])
simpl_tm ~expand:false( unit_4‹U›, unit_4‹??_22›)
attempt_delay(?_21[1;3] : ?_80[1;3])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_93›)
infer_tm(Type‹??_93›)
assert_type_ok(Type‹??_93›, U)
check_tm( unit_4‹L›, Type‹??_93›)
infer_tm(unit_4‹L›)
assert_equal1( Type‹??_93›, L)
assert_equal1_extend( Type‹??_93›, L)
simpl_tm ~expand:false( Type‹??_93›, L)
attempt_delay(?_22[1;4] : ?_81[1;4])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_94›)
infer_tm(Type‹??_94›)
assert_type_ok(Type‹??_94›, U)
check_tm( unit_4‹U›, Type‹??_94›)
infer_tm(unit_4‹U›)
assert_equal1( Type‹??_94›, U)
assert_equal1_extend( Type‹??_94›, U)
simpl_tm ~expand:false( Type‹??_94›, U)
----------------------------------

definition-------------------------
assert_type(∀ {A_2085 : Type‹s_2084›} ->
              ((stream_3‹??_31›) A_2085) ->
                (prod_7‹??_32,??_33,L›
                  A_2085 ((stream_3‹??_34›) A_2085)))
infer_tm(∀ {A_2087 : Type‹s_2084›} ->
           ((stream_3‹??_31›) A_2087) ->
             (prod_7‹??_32,??_33,L›
               A_2087 ((stream_3‹??_34›) A_2087)))
assert_type(Type‹s_2084›)
infer_tm(Type‹s_2084›)
assert_type_ok(Type‹s_2084›, U)
assert_type(((stream_3‹??_31›) A_2089) ->
              (prod_7‹??_32,??_33,L›
                A_2089 ((stream_3‹??_34›) A_2089)))
infer_tm(((stream_3‹??_31›) A_2089) ->
           (prod_7‹??_32,??_33,L› A_2089 ((stream_3‹??_34›) A_2089)))
assert_type(((stream_3‹??_31›) A_2089))
infer_tm(((stream_3‹??_31›) A_2089))
infer_tm(stream_3‹??_31›)
check_tm( A_2089, Type‹??_31›)
infer_tm(A_2089)
assert_equal1( Type‹??_31›, Type‹s_2084›)
assert_equal1_extend( Type‹??_31›, Type‹s_2084›)
assert_type_ok(((stream_3‹??_31›) A_2089), L)
simpl_tm ~expand:false( Type‹??_31›, Type‹s_2084›)
assert_type((prod_7‹??_32,??_33,L› A_2089 ((stream_3‹??_34›) A_2089)))
infer_tm((prod_7‹??_32,??_33,L› A_2089 ((stream_3‹??_34›) A_2089)))
check_tm( A_2089, Type‹??_32›)
infer_tm(A_2089)
assert_equal1( Type‹??_32›, Type‹s_2084›)
assert_equal1_extend( Type‹??_32›, Type‹s_2084›)
check_tm( ((stream_3‹??_34›) A_2089), Type‹??_33›)
infer_tm(((stream_3‹??_34›) A_2089))
infer_tm(stream_3‹??_34›)
simpl_tm ~expand:false( Type‹??_32›, Type‹s_2084›)
check_tm( A_2089, Type‹??_34›)
infer_tm(A_2089)
assert_equal1( Type‹??_34›, Type‹s_2084›)
assert_equal1_extend( Type‹??_34›, Type‹s_2084›)
assert_equal1( Type‹??_33›, L)
assert_equal1_extend( Type‹??_33›, L)
assert_type_ok((prod_7‹??_32,??_33,L›
                 A_2089 ((stream_3‹??_34›) A_2089)), L)
simpl_tm ~expand:false( Type‹??_33›, L)
simpl_tm ~expand:false( Type‹??_34›, Type‹s_2084›)
assert_type_ok(((stream_3‹??_31›) A_2089) ->
                 (prod_7‹??_32,??_33,L›
                   A_2089 ((stream_3‹??_34›) A_2089)), U)
assert_type_ok(∀ {A_2096 : Type‹s_2084›} ->
                 ((stream_3‹??_31›) A_2096) ->
                   (prod_7‹??_32,??_33,L›
                     A_2096 ((stream_3‹??_34›) A_2096)), U)
check_tm(
  function uncons_stream_2098 :
    ∀ {A_2099 : Type‹s_2084›} ->
      ((stream_3‹??_24›) A_2099) ->
        (prod_7‹??_25,??_26,L› A_2099 ((stream_3‹??_27›) A_2099))
  | A_2101 st_2102 =>
    match ((st_2102) next_7) in ?_26[0;0] -o ?_25[0;0] with
    | (stream_cons_12 hd_2104 tl_2105) =>
      (pair_9‹??_28,??_29,??_30› ?_23[0;0] ?_24[0;0] hd_2104 tl_2105),
  ∀ {A_2106 : Type‹s_2084›} ->
    ((stream_3‹??_31›) A_2106) ->
      (prod_7‹??_32,??_33,L› A_2106 ((stream_3‹??_34›) A_2106)))
assert_type(∀ {A_2109 : Type‹s_2084›} ->
              ((stream_3‹??_24›) A_2109) ->
                (prod_7‹??_25,??_26,L›
                  A_2109 ((stream_3‹??_27›) A_2109)))
infer_tm(∀ {A_2111 : Type‹s_2084›} ->
           ((stream_3‹??_24›) A_2111) ->
             (prod_7‹??_25,??_26,L›
               A_2111 ((stream_3‹??_27›) A_2111)))
assert_type(Type‹s_2084›)
infer_tm(Type‹s_2084›)
assert_type_ok(Type‹s_2084›, U)
assert_type(((stream_3‹??_24›) A_2113) ->
              (prod_7‹??_25,??_26,L›
                A_2113 ((stream_3‹??_27›) A_2113)))
infer_tm(((stream_3‹??_24›) A_2113) ->
           (prod_7‹??_25,??_26,L› A_2113 ((stream_3‹??_27›) A_2113)))
assert_type(((stream_3‹??_24›) A_2113))
infer_tm(((stream_3‹??_24›) A_2113))
infer_tm(stream_3‹??_24›)
check_tm( A_2113, Type‹??_24›)
infer_tm(A_2113)
assert_equal1( Type‹??_24›, Type‹s_2084›)
assert_equal1_extend( Type‹??_24›, Type‹s_2084›)
assert_type_ok(((stream_3‹??_24›) A_2113), L)
simpl_tm ~expand:false( Type‹??_24›, Type‹s_2084›)
assert_type((prod_7‹??_25,??_26,L› A_2113 ((stream_3‹??_27›) A_2113)))
infer_tm((prod_7‹??_25,??_26,L› A_2113 ((stream_3‹??_27›) A_2113)))
check_tm( A_2113, Type‹??_25›)
infer_tm(A_2113)
assert_equal1( Type‹??_25›, Type‹s_2084›)
assert_equal1_extend( Type‹??_25›, Type‹s_2084›)
check_tm( ((stream_3‹??_27›) A_2113), Type‹??_26›)
infer_tm(((stream_3‹??_27›) A_2113))
infer_tm(stream_3‹??_27›)
simpl_tm ~expand:false( Type‹??_25›, Type‹s_2084›)
check_tm( A_2113, Type‹??_27›)
infer_tm(A_2113)
assert_equal1( Type‹??_27›, Type‹s_2084›)
assert_equal1_extend( Type‹??_27›, Type‹s_2084›)
assert_equal1( Type‹??_26›, L)
assert_equal1_extend( Type‹??_26›, L)
assert_type_ok((prod_7‹??_25,??_26,L›
                 A_2113 ((stream_3‹??_27›) A_2113)), L)
simpl_tm ~expand:false( Type‹??_26›, L)
simpl_tm ~expand:false( Type‹??_27›, Type‹s_2084›)
assert_type_ok(((stream_3‹??_24›) A_2113) ->
                 (prod_7‹??_25,??_26,L›
                   A_2113 ((stream_3‹??_27›) A_2113)), U)
assert_type_ok(∀ {A_2120 : Type‹s_2084›} ->
                 ((stream_3‹??_24›) A_2120) ->
                   (prod_7‹??_25,??_26,L›
                     A_2120 ((stream_3‹??_27›) A_2120)), U)
assert_equal1(
  ∀ {A_2122 : Type‹s_2084›} ->
    ((stream_3‹??_31›) A_2122) ->
      (prod_7‹??_32,??_33,L› A_2122 ((stream_3‹??_34›) A_2122)),
  ∀ {A_2124 : Type‹s_2084›} ->
    ((stream_3‹??_24›) A_2124) ->
      (prod_7‹??_25,??_26,L› A_2124 ((stream_3‹??_27›) A_2124)))
assert_equal1_extend(
  ∀ {A_2131 : Type‹s_2084›} ->
    ((stream_3‹??_31›) A_2131) ->
      (prod_7‹??_32,??_33,L› A_2131 ((stream_3‹??_34›) A_2131)),
  ∀ {A_2133 : Type‹s_2084›} ->
    ((stream_3‹??_24›) A_2133) ->
      (prod_7‹??_25,??_26,L› A_2133 ((stream_3‹??_27›) A_2133)))
simpl_tm ~expand:false(
  ∀ {A_2141 : Type‹s_2084›} ->
    ((stream_3‹s_2084›) A_2141) ->
      (prod_7‹s_2084,L,L› A_2141 ((stream_3‹s_2084›) A_2141)),
  ∀ {A_2143 : Type‹s_2084›} ->
    ((stream_3‹s_2084›) A_2143) ->
      (prod_7‹s_2084,L,L› A_2143 ((stream_3‹s_2084›) A_2143)))
simpl_tm ~expand:false( Type‹s_2084›, Type‹s_2084›)
simpl_tm ~expand:false(
  ((stream_3‹s_2084›) A_2145) ->
    (prod_7‹s_2084,L,L› A_2145 ((stream_3‹s_2084›) A_2145)),
  ((stream_3‹s_2084›) A_2145) ->
    (prod_7‹s_2084,L,L› A_2145 ((stream_3‹s_2084›) A_2145)))
simpl_tm ~expand:false( ((stream_3‹s_2084›) A_2145),
  ((stream_3‹s_2084›) A_2145))
simpl_tm ~expand:false( stream_3‹s_2084›, stream_3‹s_2084›)
simpl_tm ~expand:false( A_2145, A_2145)
simpl_tm ~expand:false(
  (prod_7‹s_2084,L,L› A_2145 ((stream_3‹s_2084›) A_2145)),
  (prod_7‹s_2084,L,L› A_2145 ((stream_3‹s_2084›) A_2145)))
simpl_tm ~expand:false( A_2145, A_2145)
simpl_tm ~expand:false( ((stream_3‹s_2084›) A_2145),
  ((stream_3‹s_2084›) A_2145))
simpl_tm ~expand:false( stream_3‹s_2084›, stream_3‹s_2084›)
simpl_tm ~expand:false( A_2145, A_2145)
check_cls {|
  prblm {| ;
    {|  ::: [A_2135, st_2136] =>?
         match ((#st_2136) next_7) in ?_26[0;0] -o ?_25[0;0] with
         | (stream_cons_12 hd_2152 tl_2153) =>
           (pair_9‹??_28,??_29,??_30›
             ?_23[0;0] ?_24[0;0] hd_2152 tl_2153)
    |}
  |}
  a := ∀ {A_2154 : Type‹s_2084›} ->
         ((stream_3‹s_2084›) A_2154) ->
           (prod_7‹s_2084,L,L› A_2154 ((stream_3‹s_2084›) A_2154))
|}
case_intro(A_2156 : Type‹s_2084›)
case_intro(st_2157 : ((stream_3‹s_2084›) #A_2156))
case_coverage{|
  prblm {| ;
    {| eq_pat?( #A_2156, A_2135 : Type‹s_2084›)
       eq_pat?( #st_2157, st_2136 : ((stream_3‹s_2084›) #A_2156)) ::: [] =>?
         match ((#st_2136) next_7) in ?_26[0;0] -o ?_25[0;0] with
         | (stream_cons_12 hd_2159 tl_2160) =>
           (pair_9‹??_28,??_29,??_30›
             ?_23[0;0] ?_24[0;0] hd_2159 tl_2160)
    |}
  |}
|}
unify_local(
  eq_pat?( #A_2156, A_2135 : Type‹s_2084›)
  eq_pat?( #st_2157, st_2136 : ((stream_3‹s_2084›) #A_2156))
)
unify_global(  )
simpl_pprbm ~expand:false( #A_2156, #A_2135)
simpl_pprbm ~expand:false( #st_2157, #st_2136)
local_map solved
global_map solved
case_coverage_ok(
  match ((st_2157) next_7) in ?_26[0;0] -o ?_25[0;0] with
  | (stream_cons_12 hd_2167 tl_2168) =>
    (pair_9‹??_28,??_29,??_30› ?_23[0;0] ?_24[0;0] hd_2167 tl_2168),
  (prod_7‹s_2084,L,L› A_2156 ((stream_3‹s_2084›) A_2156)))
check_tm(
  match ((st_2157) next_7) in ?_26[0;0] -o ?_25[0;0] with
  | (stream_cons_12 hd_2170 tl_2171) =>
    (pair_9‹??_28,??_29,??_30› ?_23[0;0] ?_24[0;0] hd_2170 tl_2171),
  (prod_7‹s_2084,L,L› A_2156 ((stream_3‹s_2084›) A_2156)))
infer_tm(match ((st_2157) next_7) in ?_26[0;0] -o ?_25[0;0] with
         | (stream_cons_12 hd_2173 tl_2174) =>
           (pair_9‹??_28,??_29,??_30›
             ?_23[0;0] ?_24[0;0] hd_2173 tl_2174))
assert_type(?_26[0;0])
infer_tm(?_26[0;0])
assert_type_ok(?_26[0;0], ?_82[1;3])
delay_assert(?_82[1;3], ??_95)
assert_type(?_26[0;0])
infer_tm(?_26[0;0])
assert_type_ok(?_26[0;0], ?_82[1;3])
simpl_tm ~expand:false( ?_82[1;3], Type‹??_95›)
check_tm( ((st_2157) next_7), ?_26[1;3])
infer_tm(((st_2157) next_7))
infer_tm(st_2157)
check_tm( next_7, choice_6)
infer_tm(next_7)
assert_equal1( choice_6, choice_6)
assert_equal1_ok( choice_6, choice_6)
assert_equal1( ?_26[1;3],
  match next_7 in choice_6 -o L with
  | next_7 => (stream_node_9‹s_2084› A_2156)
  | free_8 => unit_4‹L›)
assert_equal1_extend( ?_26[1;3],
  match next_7 in choice_6 -o L with
  | next_7 => (stream_node_9‹s_2084› A_2156)
  | free_8 => unit_4‹L›)
assert_type(?_25[0;0])
infer_tm(?_25[0;0])
assert_type_ok(?_25[0;0], ?_83[1;4])
simpl_tm ~expand:false( ?_26[1;3], (stream_node_9‹s_2084› A_2156))
delay_assert(?_83[1;4], ??_96)
assert_type(?_25[0;0])
infer_tm(?_25[0;0])
assert_type_ok(?_25[0;0], ?_83[1;4])
simpl_tm ~expand:false( ?_83[1;4], Type‹??_96›)
check_cls {|
  prblm {| ;
    {|  ::: [(stream_cons_12 hd_2188 tl_2189)] =>?
         (pair_9‹??_28,??_29,??_30›
           ?_23[0;0] ?_24[0;0] #hd_2188 #tl_2189)
    |}
  |}
  a := ∀ (_2195 : (stream_node_9‹s_2084› A_2156)) -o ?_25[1;4]
|}
case_intro(_2196 : (stream_node_9‹s_2084› A_2156))
splitting_on(stream_cons_12)
case_coverage{|
  prblm {|
    eq_term?( (stream_node_9‹s_2084› A_2156),
      (stream_node_9‹s_2084› A_2156));
    {| eq_pat?( #hd_2197, hd_2188 : A_2156)
       eq_pat?( #tl_2198, tl_2189 :
         ∀ (x_2203 : choice_6) -o
           match x_2203 in choice_6 -o L with
           | next_7 => (stream_node_9‹s_2084› A_2156)
           | free_8 => unit_4‹L›) ::: [] =>?
         (pair_9‹??_28,??_29,??_30›
           ?_23[0;0] ?_24[0;0] #hd_2188 #tl_2189)
    |}
  |}
|}
unify_local(
  eq_pat?( #hd_2197, hd_2188 : A_2156)
  eq_pat?( #tl_2198, tl_2189 :
    ∀ (x_2205 : choice_6) -o
      match x_2205 in choice_6 -o L with
      | next_7 => (stream_node_9‹s_2084› A_2156)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (stream_node_9‹s_2084› A_2156),
    (stream_node_9‹s_2084› A_2156))
)
simpl_pprbm ~expand:false( #hd_2197, #hd_2188)
simpl_pprbm ~expand:false( #tl_2198, #tl_2189)
local_map solved
simpl_pprbm ~expand:false( (stream_node_9‹s_2084› A_2156),
  (stream_node_9‹s_2084› A_2156))
simpl_pprbm ~expand:false( A_2156, A_2156)
global_map solved
case_coverage_ok(
  (pair_9‹??_28,??_29,??_30› ?_23[0;0] ?_24[0;0] hd_2197 tl_2198),
  ?_25[1;4])
check_tm(
  (pair_9‹??_28,??_29,??_30› ?_23[0;0] ?_24[0;0] hd_2197 tl_2198),
  ?_25[1;4])
infer_tm((pair_9‹??_28,??_29,??_30› ?_23[0;0] ?_24[0;0] hd_2197 tl_2198))
check_tm( ?_23[0;0], Type‹??_28›)
check_tm( ?_24[0;0], Type‹??_29›)
check_tm( hd_2197, ?_23[1;6])
infer_tm(hd_2197)
assert_equal1( ?_23[1;6], A_2156)
assert_equal1_extend( ?_23[1;6], A_2156)
check_tm( tl_2198, ?_24[1;6])
infer_tm(tl_2198)
assert_equal1( ?_24[1;6],
  ∀ (x_2211 : choice_6) -o
    match x_2211 in choice_6 -o L with
    | next_7 => (stream_node_9‹s_2084› A_2156)
    | free_8 => unit_4‹L›)
assert_equal1_extend( ?_24[1;6],
  ∀ (x_2213 : choice_6) -o
    match x_2213 in choice_6 -o L with
    | next_7 => (stream_node_9‹s_2084› A_2156)
    | free_8 => unit_4‹L›)
assert_equal1( ?_25[1;4],
  (prod_7‹??_28,??_29,??_30› ?_23[1;6] ?_24[1;6]))
assert_equal1_extend( ?_25[1;4],
  (prod_7‹??_28,??_29,??_30› ?_23[1;6] ?_24[1;6]))
assert_equal1(
  (prod_7‹s_2084,L,L› A_2156 ((stream_3‹s_2084›) A_2156)), ?_25[1;4])
assert_equal1_extend(
  (prod_7‹s_2084,L,L› A_2156 ((stream_3‹s_2084›) A_2156)), ?_25[1;4])
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_2215
    ??_2 <= s_2216
    ??_3 <= s_2218
    ??_4 <= t_2219
    ??_5 <= s_2221
    ??_6 <= s_2224
    ??_7 <= r_2226
    ??_8 <= t_2228
    ??_9 <= s_2232
    ??_10 <= t_2233
    ??_11 <= s_2236
    ??_12 <= ??_11
    ??_13 <= s_2240
    ??_14 <= t_2241
    ??_15 <= ??_11
    ??_16 <= s_2245
    ??_17 <= L
    ??_18 <= s_2247
    ??_19 <= s_2248
    ??_20 <= L
    ??_21 <= s_2250
    ??_22 <= U
    ??_23 <= s_2252
    ??_24 <= s_2253
    ??_25 <= s_2254
    ??_26 <= L
    ??_27 <= s_2256
    ??_31 <= s_2257
    ??_32 <= s_2258
    ??_33 <= L
    ??_34 <= s_2260
    ??_87 <= L
    ??_88 <= U
    ??_89 <= U
    ??_90 <= U
    ??_91 <= L
    ??_92 <= U
    ??_93 <= L
    ??_94 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_2271
    ?_2 <= A_2275
    ?_3 <= A_2279
    ?_4 <= A_2283
    ?_5 <= A_2287
    ?_6 <= x0_2291
    ?_7 <= A_2297
    ?_8 <= A_2302
    ?_9 <= A_2308
    ?_10 <= m_2312
    ?_11 <= A_2320
    ?_12 <= x0_2324
    ?_13 <= A_2330
    ?_14 <= A_2335
    ?_15 <= choice_6
    ?_16 <= Type‹??_17›
    ?_17 <= L
    ?_18 <= choice_6
    ?_19 <= Type‹??_20›
    ?_20 <= ?_17[1;1]
    ?_21 <= unit_4‹L›
    ?_22 <= unit_4‹U›
    ?_26 <= (stream_node_9‹s_2367› A_2369)
    ?_74 <= Type‹??_87›
    ?_75 <= Type‹??_88›
    ?_76 <= Type‹??_89›
    ?_77 <= Type‹??_90›
    ?_78 <= Type‹??_91›
    ?_79 <= Type‹??_92›
    ?_80 <= Type‹??_93›
    ?_81 <= Type‹??_94›
    ?_82 <= Type‹??_95›
    ?_83 <= Type‹??_96›
    
  |}
  eqns {|
    equal_tm?
      ((prod_7‹s_2084,L,L› A_2156 ((stream_3‹s_2084›) A_2156)),
      ?_25[1;4]);
    equal_tm? (?_25[1;4],
      (prod_7‹??_28,??_29,??_30› ?_23[1;6] ?_24[1;6]));
    equal_tm? (?_24[1;6],
      ∀ (x_2411 : choice_6) -o
        match x_2411 in choice_6 -o L with
        | next_7 => (stream_node_9‹s_2084› A_2156)
        | free_8 => unit_4‹L›);
    equal_tm? (?_23[1;6], A_2156)
  |}
end_dump
simpl_tm ~expand:false(
  (prod_7‹s_2084,L,L› A_2156 ((stream_3‹s_2084›) A_2156)), ?_25[1;4])
simpl_tm ~expand:false(
  (prod_7‹s_2084,L,L› A_2156 ((stream_3‹s_2084›) A_2156)),
  (prod_7‹??_28,??_29,??_30› ?_23[1;6] ?_24[1;6]))
simpl_tm ~expand:false( A_2156, ?_23[1;6])
simpl_tm ~expand:false( ((stream_3‹s_2084›) A_2156), ?_24[1;6])
simpl_tm ~expand:false( A_2156, ?_23[1;6])
simpl_tm ~expand:false( ((stream_3‹s_2084›) A_2156), ?_24[1;6])
simpl_tm ~expand:false( ((stream_3‹s_2084›) A_2156),
  ∀ (x_2427 : choice_6) -o
    match x_2427 in choice_6 -o L with
    | next_7 => (stream_node_9‹s_2084› A_2156)
    | free_8 => unit_4‹L›)
simpl_tm ~expand:false( stream_3‹s_2084›,
  ∀ (x_2429 : choice_6) -o
    match x_2429 in choice_6 -o L with
    | next_7 => (stream_node_9‹s_2084› A_2156)
    | free_8 => unit_4‹L›)
simpl_tm ~expand:true(
  function stream_2431 : Type‹s_2084› -> L
  | A_2433 =>
    ∀ (x_2434 : choice_6) -o
      match x_2434 in choice_6 -o L with
      | next_7 => (stream_node_9‹s_2084› A_2433)
      | free_8 => unit_4‹L›,
  ∀ (x_2436 : choice_6) -o
    match x_2436 in choice_6 -o L with
    | next_7 => (stream_node_9‹s_2084› A_2156)
    | free_8 => unit_4‹L›)
simpl_tm ~expand:true(
  ∀ (x_2445 : choice_6) -o
    match x_2445 in choice_6 -o L with
    | next_7 => (stream_node_9‹s_2084› A_2156)
    | free_8 => unit_4‹L›,
  ∀ (x_2447 : choice_6) -o
    match x_2447 in choice_6 -o L with
    | next_7 => (stream_node_9‹s_2084› A_2156)
    | free_8 => unit_4‹L›)
simpl_tm ~expand:false( choice_6, choice_6)
simpl_tm ~expand:false(
  match x_2449 in choice_6 -o L with
  | next_7 => (stream_node_9‹s_2084› A_2156)
  | free_8 => unit_4‹L›,
  match x_2449 in choice_6 -o L with
  | next_7 => (stream_node_9‹s_2084› A_2156)
  | free_8 => unit_4‹L›)
simpl_tm ~expand:false( x_2449, x_2449)
simpl_tm ~expand:false( choice_6 -o L, choice_6 -o L)
simpl_tm ~expand:false( choice_6, choice_6)
simpl_tm ~expand:false( L, L)
simpl_tm ~expand:false( (stream_node_9‹s_2084› A_2156),
  (stream_node_9‹s_2084› A_2156))
simpl_tm ~expand:false( A_2156, A_2156)
simpl_tm ~expand:false( unit_4‹L›, unit_4‹L›)
simpl_tm ~expand:false( A_2156, A_2156)
attempt_delay(?_23[1;6] : Type‹??_28›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_2084›)
infer_tm(Type‹s_2084›)
assert_type_ok(Type‹s_2084›, U)
check_tm( A_2156, Type‹s_2084›)
infer_tm(A_2156)
assert_equal1( Type‹s_2084›, Type‹s_2084›)
assert_equal1_ok( Type‹s_2084›, Type‹s_2084›)
attempt_delay(?_24[1;6] : Type‹??_29›)
resolve_ctx_ok
resolve_env_ok
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
check_tm( ((stream_3‹s_2084›) A_2156), L)
infer_tm(((stream_3‹s_2084›) A_2156))
infer_tm(stream_3‹s_2084›)
check_tm( A_2156, Type‹s_2084›)
infer_tm(A_2156)
assert_equal1( Type‹s_2084›, Type‹s_2084›)
assert_equal1_ok( Type‹s_2084›, Type‹s_2084›)
assert_equal1( L, L)
assert_equal1_ok( L, L)
attempt_delay(?_25[1;4] : ?_83[1;4])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_96›)
infer_tm(Type‹??_96›)
assert_type_ok(Type‹??_96›, U)
check_tm( (prod_7‹s_2084,L,L› A_2156 ((stream_3‹s_2084›) A_2156)),
  Type‹??_96›)
infer_tm((prod_7‹s_2084,L,L› A_2156 ((stream_3‹s_2084›) A_2156)))
check_tm( A_2156, Type‹s_2084›)
infer_tm(A_2156)
assert_equal1( Type‹s_2084›, Type‹s_2084›)
assert_equal1_ok( Type‹s_2084›, Type‹s_2084›)
check_tm( ((stream_3‹s_2084›) A_2156), L)
infer_tm(((stream_3‹s_2084›) A_2156))
infer_tm(stream_3‹s_2084›)
check_tm( A_2156, Type‹s_2084›)
infer_tm(A_2156)
assert_equal1( Type‹s_2084›, Type‹s_2084›)
assert_equal1_ok( Type‹s_2084›, Type‹s_2084›)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_equal1( Type‹??_96›, L)
assert_equal1_extend( Type‹??_96›, L)
simpl_tm ~expand:false( Type‹??_96›, L)
attempt_delay(?_26[1;3] : ?_82[1;3])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_95›)
infer_tm(Type‹??_95›)
assert_type_ok(Type‹??_95›, U)
check_tm( (stream_node_9‹s_2084› A_2156), Type‹??_95›)
infer_tm((stream_node_9‹s_2084› A_2156))
check_tm( A_2156, Type‹s_2084›)
infer_tm(A_2156)
assert_equal1( Type‹s_2084›, Type‹s_2084›)
assert_equal1_ok( Type‹s_2084›, Type‹s_2084›)
assert_equal1( Type‹??_95›, L)
assert_equal1_extend( Type‹??_95›, L)
simpl_tm ~expand:false( Type‹??_95›, L)
----------------------------------

definition-------------------------
assert_type(nat_8 -> ((stream_3‹??_38›) nat_8))
infer_tm(nat_8 -> ((stream_3‹??_38›) nat_8))
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(((stream_3‹??_38›) nat_8))
infer_tm(((stream_3‹??_38›) nat_8))
infer_tm(stream_3‹??_38›)
check_tm( nat_8, Type‹??_38›)
infer_tm(nat_8)
assert_equal1( Type‹??_38›, U)
assert_equal1_extend( Type‹??_38›, U)
assert_type_ok(((stream_3‹??_38›) nat_8), L)
simpl_tm ~expand:false( Type‹??_38›, U)
assert_type_ok(nat_8 -> ((stream_3‹??_38›) nat_8), U)
check_tm(
  function nat_make_2560 : nat_8 -> ((stream_3‹??_35›) nat_8)
  | n_2562 next_7 =>
    (stream_cons_12‹??_36›
      ?_27[0;0] n_2562 ((nat_make_2560) (succ_11‹› n_2562)))
  | n_2563 free_8 => tt_4‹??_37›, nat_8 -> ((stream_3‹??_38›) nat_8))
assert_type(nat_8 -> ((stream_3‹??_35›) nat_8))
infer_tm(nat_8 -> ((stream_3‹??_35›) nat_8))
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(((stream_3‹??_35›) nat_8))
infer_tm(((stream_3‹??_35›) nat_8))
infer_tm(stream_3‹??_35›)
check_tm( nat_8, Type‹??_35›)
infer_tm(nat_8)
assert_equal1( Type‹??_35›, U)
assert_equal1_extend( Type‹??_35›, U)
assert_type_ok(((stream_3‹??_35›) nat_8), L)
simpl_tm ~expand:false( Type‹??_35›, U)
assert_type_ok(nat_8 -> ((stream_3‹??_35›) nat_8), U)
assert_equal1( nat_8 -> ((stream_3‹??_38›) nat_8),
  nat_8 -> ((stream_3‹??_35›) nat_8))
assert_equal1_extend( nat_8 -> ((stream_3‹??_38›) nat_8),
  nat_8 -> ((stream_3‹??_35›) nat_8))
simpl_tm ~expand:false( nat_8 -> ((stream_3‹U›) nat_8),
  nat_8 -> ((stream_3‹U›) nat_8))
simpl_tm ~expand:false( nat_8, nat_8)
simpl_tm ~expand:false( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
simpl_tm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_tm ~expand:false( nat_8, nat_8)
check_cls {|
  prblm {| ;
    {|  ::: [n_2580, next_7] =>?
         (stream_cons_12‹??_36›
           ?_27[0;0] #n_2580 ((nat_make_2565) (succ_11‹› #n_2580)))
    |} {|  ::: [n_2581, free_8] =>? tt_4‹??_37› |}
  |}
  a := nat_8 -> ((stream_3‹U›) nat_8)
|}
case_intro(n_2589 : nat_8)
case_intro(x_2590 : choice_6)
splitting_on(next_7)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {| eq_pat?( #n_2589, n_2580 : nat_8) ::: [] =>?
         (stream_cons_12‹??_36›
           ?_27[0;0] #n_2580 ((nat_make_2565) (succ_11‹› #n_2580)))
    |}
  |}
|}
unify_local( eq_pat?( #n_2589, n_2580 : nat_8) )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( #n_2589, #n_2580)
local_map solved
simpl_pprbm ~expand:false( choice_6, choice_6)
global_map solved
case_coverage_ok(
  (stream_cons_12‹??_36›
    ?_27[0;0] n_2589 ((nat_make_2565) (succ_11‹› n_2589))),
  match next_7 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›)
check_tm(
  (stream_cons_12‹??_36›
    ?_27[0;0] n_2589 ((nat_make_2565) (succ_11‹› n_2589))),
  match next_7 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›)
infer_tm((stream_cons_12‹??_36›
           ?_27[0;0] n_2589 ((nat_make_2565) (succ_11‹› n_2589))))
check_tm( ?_27[0;0], Type‹??_36›)
check_tm( n_2589, ?_27[0;3])
infer_tm(n_2589)
assert_equal1( ?_27[0;3], nat_8)
assert_equal1_extend( ?_27[0;3], nat_8)
check_tm( ((nat_make_2565) (succ_11‹› n_2589)),
  ∀ (x_2597 : choice_6) -o
    match x_2597 in choice_6 -o L with
    | next_7 => (stream_node_9‹??_36› ?_27[0;3])
    | free_8 => unit_4‹L›)
infer_tm(((nat_make_2565) (succ_11‹› n_2589)))
infer_tm(nat_make_2565)
simpl_tm ~expand:false( ?_27[0;3], nat_8)
check_tm( (succ_11‹› n_2589), nat_8)
infer_tm((succ_11‹› n_2589))
check_tm( n_2589, nat_8)
infer_tm(n_2589)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_equal1(
  ∀ (x_2600 : choice_6) -o
    match x_2600 in choice_6 -o L with
    | next_7 => (stream_node_9‹??_36› ?_27[0;3])
    | free_8 => unit_4‹L›,
  ((stream_3‹U›) nat_8))
assert_equal1_extend(
  ∀ (x_2605 : choice_6) -o
    match x_2605 in choice_6 -o L with
    | next_7 => (stream_node_9‹??_36› ?_27[0;3])
    | free_8 => unit_4‹L›,
  ((stream_3‹U›) nat_8))
assert_equal1(
  match next_7 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›, (stream_node_9‹??_36› ?_27[0;3]))
assert_equal1_extend(
  match next_7 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›, (stream_node_9‹??_36› ?_27[0;3]))
splitting_on(free_8)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {| eq_pat?( #n_2589, n_2581 : nat_8) ::: [] =>? tt_4‹??_37› |}
  |}
|}
unify_local( eq_pat?( #n_2589, n_2581 : nat_8) )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( #n_2589, #n_2581)
local_map solved
simpl_pprbm ~expand:false( choice_6, choice_6)
global_map solved
case_coverage_ok( tt_4‹??_37›,
  match free_8 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›)
check_tm( tt_4‹??_37›,
  match free_8 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›)
infer_tm(tt_4‹??_37›)
assert_equal1(
  match free_8 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›, unit_4‹??_37›)
assert_equal1_extend(
  match free_8 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›, unit_4‹??_37›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_2617
    ??_2 <= s_2618
    ??_3 <= s_2620
    ??_4 <= t_2621
    ??_5 <= s_2623
    ??_6 <= s_2626
    ??_7 <= r_2628
    ??_8 <= t_2630
    ??_9 <= s_2634
    ??_10 <= t_2635
    ??_11 <= s_2638
    ??_12 <= ??_11
    ??_13 <= s_2642
    ??_14 <= t_2643
    ??_15 <= ??_11
    ??_16 <= s_2647
    ??_17 <= L
    ??_18 <= s_2649
    ??_19 <= s_2650
    ??_20 <= L
    ??_21 <= s_2652
    ??_22 <= U
    ??_23 <= s_2654
    ??_24 <= s_2655
    ??_25 <= s_2656
    ??_26 <= L
    ??_27 <= s_2658
    ??_28 <= s_2659
    ??_29 <= L
    ??_30 <= L
    ??_31 <= s_2662
    ??_32 <= s_2663
    ??_33 <= L
    ??_34 <= s_2665
    ??_35 <= U
    ??_38 <= U
    ??_87 <= L
    ??_88 <= U
    ??_89 <= U
    ??_90 <= U
    ??_91 <= L
    ??_92 <= U
    ??_93 <= L
    ??_94 <= U
    ??_95 <= L
    ??_96 <= L
    
  |}
  imeta_meta {|
    ?_1 <= A_2678
    ?_2 <= A_2682
    ?_3 <= A_2686
    ?_4 <= A_2690
    ?_5 <= A_2694
    ?_6 <= x0_2698
    ?_7 <= A_2704
    ?_8 <= A_2709
    ?_9 <= A_2715
    ?_10 <= m_2719
    ?_11 <= A_2727
    ?_12 <= x0_2731
    ?_13 <= A_2737
    ?_14 <= A_2742
    ?_15 <= choice_6
    ?_16 <= Type‹??_17›
    ?_17 <= L
    ?_18 <= choice_6
    ?_19 <= Type‹??_20›
    ?_20 <= ?_17[1;1]
    ?_21 <= unit_4‹L›
    ?_22 <= unit_4‹U›
    ?_23 <= A_2779
    ?_24 <= ((stream_3‹s_2781›) A_2786)
    ?_25 <= (prod_7‹s_2788,L,L› A_2791 ((stream_3‹s_2788›) A_2791))
    ?_26 <= (stream_node_9‹s_2793› A_2795)
    ?_27 <= nat_8
    ?_74 <= Type‹??_87›
    ?_75 <= Type‹??_88›
    ?_76 <= Type‹??_89›
    ?_77 <= Type‹??_90›
    ?_78 <= Type‹??_91›
    ?_79 <= Type‹??_92›
    ?_80 <= Type‹??_93›
    ?_81 <= Type‹??_94›
    ?_82 <= Type‹??_95›
    ?_83 <= Type‹??_96›
    
  |}
  eqns {|
    equal_tm?
      (match free_8 in choice_6 -o L with
       | next_7 => (stream_node_9‹U› nat_8)
       | free_8 => unit_4‹L›,
      unit_4‹??_37›);
    equal_tm?
      (match next_7 in choice_6 -o L with
       | next_7 => (stream_node_9‹U› nat_8)
       | free_8 => unit_4‹L›,
      (stream_node_9‹??_36› ?_27[0;3]));
    equal_tm?
      (∀ (x_2842 : choice_6) -o
         match x_2842 in choice_6 -o L with
         | next_7 => (stream_node_9‹??_36› ?_27[0;3])
         | free_8 => unit_4‹L›,
      ((stream_3‹U›) nat_8))
  |}
end_dump
simpl_tm ~expand:false( unit_4‹L›, unit_4‹??_37›)
simpl_tm ~expand:false( (stream_node_9‹U› nat_8),
  (stream_node_9‹??_36› nat_8))
simpl_tm ~expand:false( nat_8, nat_8)
simpl_tm ~expand:false(
  ∀ (x_2854 : choice_6) -o
    match x_2854 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›,
  ((stream_3‹U›) nat_8))
simpl_tm ~expand:false(
  ∀ (x_2856 : choice_6) -o
    match x_2856 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›,
  stream_3‹U›)
simpl_tm ~expand:true(
  ∀ (x_2858 : choice_6) -o
    match x_2858 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›,
  function stream_2860 : U -> L
  | A_2862 =>
    ∀ (x_2863 : choice_6) -o
      match x_2863 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› A_2862)
      | free_8 => unit_4‹L›)
simpl_tm ~expand:true(
  ∀ (x_2872 : choice_6) -o
    match x_2872 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›,
  ∀ (x_2874 : choice_6) -o
    match x_2874 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›)
simpl_tm ~expand:false( choice_6, choice_6)
simpl_tm ~expand:false(
  match x_2876 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›,
  match x_2876 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›)
simpl_tm ~expand:false( x_2876, x_2876)
simpl_tm ~expand:false( choice_6 -o L, choice_6 -o L)
simpl_tm ~expand:false( choice_6, choice_6)
simpl_tm ~expand:false( L, L)
simpl_tm ~expand:false( (stream_node_9‹U› nat_8),
  (stream_node_9‹U› nat_8))
simpl_tm ~expand:false( nat_8, nat_8)
simpl_tm ~expand:false( unit_4‹L›, unit_4‹L›)
attempt_delay(?_27[0;3] : Type‹??_36›)
resolve_ctx_ok
resolve_env_ok
assert_type(U)
infer_tm(U)
assert_type_ok(U, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
----------------------------------

inductive-------------------------
assert_type(Type‹s_2894›)
infer_tm(Type‹s_2894›)
assert_type_ok(Type‹s_2894›, U)
assert_type(A_2897 -> Type‹r_2895›)
infer_tm(A_2897 -> Type‹r_2895›)
assert_type(A_2897)
infer_tm(A_2897)
assert_type_ok(A_2897, Type‹s_2894›)
assert_type(Type‹r_2895›)
infer_tm(Type‹r_2895›)
assert_type_ok(Type‹r_2895›, U)
assert_type_ok(A_2897 -> Type‹r_2895›, U)
assert_type(Type‹s_2903›)
infer_tm(Type‹s_2903›)
assert_type_ok(Type‹s_2903›, U)
assert_type(A_2906 -> Type‹r_2904›)
infer_tm(A_2906 -> Type‹r_2904›)
assert_type(A_2906)
infer_tm(A_2906)
assert_type_ok(A_2906, Type‹s_2903›)
assert_type(Type‹r_2904›)
infer_tm(Type‹r_2904›)
assert_type_ok(Type‹r_2904›, U)
assert_type_ok(A_2906 -> Type‹r_2904›, U)
assert_type(A_2906)
infer_tm(A_2906)
assert_type_ok(A_2906, Type‹s_2903›)
assert_type(forall‹t_2905›(b_2914 : bool_5),
              match b_2914 in ?_28[0;0] -o ?_29[0;0] with
              | true_5 => (sing_3‹??_39,L› ?_30[0;0] x_2912)
              | false_6 => (boxed_2‹??_40› ((B_2907) x_2912)))
infer_tm(forall‹t_2905›(b_2916 : bool_5),
           match b_2916 in ?_28[0;0] -o ?_29[0;0] with
           | true_5 => (sing_3‹??_39,L› ?_30[0;0] x_2912)
           | false_6 => (boxed_2‹??_40› ((B_2907) x_2912)))
assert_type(bool_5)
infer_tm(bool_5)
assert_type_ok(bool_5, U)
assert_type(match b_2918 in ?_28[0;0] -o ?_29[0;0] with
            | true_5 => (sing_3‹??_39,L› ?_30[0;0] x_2912)
            | false_6 => (boxed_2‹??_40› ((B_2907) x_2912)))
infer_tm(match b_2918 in ?_28[0;0] -o ?_29[0;0] with
         | true_5 => (sing_3‹??_39,L› ?_30[0;0] x_2912)
         | false_6 => (boxed_2‹??_40› ((B_2907) x_2912)))
assert_type(?_28[0;0])
infer_tm(?_28[0;0])
assert_type_ok(?_28[0;0], ?_84[3;4])
delay_assert(?_84[3;4], ??_97)
assert_type(?_28[0;0])
infer_tm(?_28[0;0])
assert_type_ok(?_28[0;0], ?_84[3;4])
simpl_tm ~expand:false( ?_84[3;4], Type‹??_97›)
check_tm( b_2918, ?_28[3;4])
infer_tm(b_2918)
assert_equal1( ?_28[3;4], bool_5)
assert_equal1_extend( ?_28[3;4], bool_5)
assert_type(?_29[0;0])
infer_tm(?_29[0;0])
assert_type_ok(?_29[0;0], ?_85[3;5])
simpl_tm ~expand:false( ?_28[3;4], bool_5)
delay_assert(?_85[3;5], ??_98)
assert_type(?_29[0;0])
infer_tm(?_29[0;0])
assert_type_ok(?_29[0;0], ?_85[3;5])
simpl_tm ~expand:false( ?_85[3;5], Type‹??_98›)
check_cls {|
  prblm {| ;
    {|  ::: [true_5] =>? (sing_3‹??_39,L› ?_30[0;0] x_2912) |}
    {|  ::: [false_6] =>? (boxed_2‹??_40› ((B_2907) x_2912)) |}
  |}
  a := ∀ (_2945 : bool_5) -o ?_29[3;5]
|}
case_intro(_2946 : bool_5)
splitting_on(true_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹??_39,L› ?_30[0;0] x_2912) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
local_map solved
simpl_pprbm ~expand:false( bool_5, bool_5)
global_map solved
case_coverage_ok( (sing_3‹??_39,L› ?_30[0;0] x_2912), ?_29[3;5])
check_tm( (sing_3‹??_39,L› ?_30[0;0] x_2912), ?_29[3;5])
infer_tm((sing_3‹??_39,L› ?_30[0;0] x_2912))
check_tm( ?_30[0;0], Type‹??_39›)
check_tm( x_2912, ?_30[3;5])
infer_tm(x_2912)
assert_equal1( ?_30[3;5], A_2906)
assert_equal1_extend( ?_30[3;5], A_2906)
assert_equal1( ?_29[3;5], L)
assert_equal1_extend( ?_29[3;5], L)
splitting_on(false_6)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹??_40› ((B_2907) x_2912)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
local_map solved
simpl_pprbm ~expand:false( bool_5, bool_5)
global_map solved
case_coverage_ok( (boxed_2‹??_40› ((B_2907) x_2912)), ?_29[3;5])
check_tm( (boxed_2‹??_40› ((B_2907) x_2912)), ?_29[3;5])
infer_tm((boxed_2‹??_40› ((B_2907) x_2912)))
check_tm( ((B_2907) x_2912), Type‹??_40›)
infer_tm(((B_2907) x_2912))
infer_tm(B_2907)
simpl_tm ~expand:false( ?_29[3;5], L)
simpl_tm ~expand:false( ?_30[3;5], A_2906)
check_tm( x_2912, A_2906)
infer_tm(x_2912)
assert_equal1( A_2906, A_2906)
assert_equal1_ok( A_2906, A_2906)
assert_equal1( Type‹??_40›, Type‹r_2904›)
assert_equal1_extend( Type‹??_40›, Type‹r_2904›)
assert_equal1( ?_29[3;5], L)
assert_equal1_extend( ?_29[3;5], L)
assert_type_ok(match b_2918 in ?_28[0;0] -o ?_29[0;0] with
               | true_5 => (sing_3‹??_39,L› ?_30[0;0] x_2912)
               | false_6 => (boxed_2‹??_40› ((B_2907) x_2912)), ?_29[3;5])
simpl_tm ~expand:false( L, L)
simpl_tm ~expand:false( Type‹??_40›, Type‹r_2904›)
assert_type_ok(forall‹t_2905›(b_2970 : bool_5),
                 match b_2970 in ?_28[0;0] -o ?_29[0;0] with
                 | true_5 => (sing_3‹??_39,L› ?_30[0;0] x_2912)
                 | false_6 => (boxed_2‹??_40› ((B_2907) x_2912)), Type‹t_2905›)
assert_type((apair_10‹??_41,??_42,??_43› ?_31[0;0] B_2907))
infer_tm((apair_10‹??_41,??_42,??_43› ?_31[0;0] B_2907))
check_tm( ?_31[0;0], Type‹??_41›)
check_tm( B_2907, ?_31[3;4] -> Type‹??_42›)
infer_tm(B_2907)
assert_equal1( ?_31[3;4] -> Type‹??_42›, A_2906 -> Type‹r_2904›)
assert_equal1_extend( ?_31[3;4] -> Type‹??_42›,
  A_2906 -> Type‹r_2904›)
assert_type_ok((apair_10‹??_41,??_42,??_43› ?_31[0;0] B_2907), Type‹??_43›)
simpl_tm ~expand:false( ?_31[3;4] -> Type‹??_42›,
  A_2906 -> Type‹r_2904›)
simpl_tm ~expand:false( ?_31[3;4], A_2906)
simpl_tm ~expand:false( Type‹??_42›, Type‹r_2904›)
assert_equal1( A_2906, ?_31[3;4])
assert_equal1_extend( A_2906, ?_31[3;4])
assert_equal1( B_2907, B_2907)
assert_equal1_ok( B_2907, B_2907)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_2982
    ??_2 <= s_2983
    ??_3 <= s_2985
    ??_4 <= t_2986
    ??_5 <= s_2988
    ??_6 <= s_2991
    ??_7 <= r_2993
    ??_8 <= t_2995
    ??_9 <= s_2999
    ??_10 <= t_3000
    ??_11 <= s_3003
    ??_12 <= ??_11
    ??_13 <= s_3007
    ??_14 <= t_3008
    ??_15 <= ??_11
    ??_16 <= s_3012
    ??_17 <= L
    ??_18 <= s_3014
    ??_19 <= s_3015
    ??_20 <= L
    ??_21 <= s_3017
    ??_22 <= U
    ??_23 <= s_3019
    ??_24 <= s_3020
    ??_25 <= s_3021
    ??_26 <= L
    ??_27 <= s_3023
    ??_28 <= s_3024
    ??_29 <= L
    ??_30 <= L
    ??_31 <= s_3027
    ??_32 <= s_3028
    ??_33 <= L
    ??_34 <= s_3030
    ??_35 <= U
    ??_36 <= U
    ??_37 <= L
    ??_38 <= U
    ??_40 <= r_3032
    ??_42 <= r_3035
    ??_87 <= L
    ??_88 <= U
    ??_89 <= U
    ??_90 <= U
    ??_91 <= L
    ??_92 <= U
    ??_93 <= L
    ??_94 <= U
    ??_95 <= L
    ??_96 <= L
    
  |}
  imeta_meta {|
    ?_1 <= A_3049
    ?_2 <= A_3053
    ?_3 <= A_3057
    ?_4 <= A_3061
    ?_5 <= A_3065
    ?_6 <= x0_3069
    ?_7 <= A_3075
    ?_8 <= A_3080
    ?_9 <= A_3086
    ?_10 <= m_3090
    ?_11 <= A_3098
    ?_12 <= x0_3102
    ?_13 <= A_3108
    ?_14 <= A_3113
    ?_15 <= choice_6
    ?_16 <= Type‹??_17›
    ?_17 <= L
    ?_18 <= choice_6
    ?_19 <= Type‹??_20›
    ?_20 <= ?_17[1;1]
    ?_21 <= unit_4‹L›
    ?_22 <= unit_4‹U›
    ?_23 <= A_3150
    ?_24 <= ((stream_3‹s_3152›) A_3157)
    ?_25 <= (prod_7‹s_3159,L,L› A_3162 ((stream_3‹s_3159›) A_3162))
    ?_26 <= (stream_node_9‹s_3164› A_3166)
    ?_27 <= nat_8
    ?_28 <= bool_5
    ?_29 <= L
    ?_30 <= A_3193
    ?_31 <= A_3200
    ?_74 <= Type‹??_87›
    ?_75 <= Type‹??_88›
    ?_76 <= Type‹??_89›
    ?_77 <= Type‹??_90›
    ?_78 <= Type‹??_91›
    ?_79 <= Type‹??_92›
    ?_80 <= Type‹??_93›
    ?_81 <= Type‹??_94›
    ?_82 <= Type‹??_95›
    ?_83 <= Type‹??_96›
    ?_84 <= Type‹??_97›
    ?_85 <= Type‹??_98›
    
  |}
  eqns {|
    equal_tm? (A_2906, ?_31[3;4]);
    equal_sort? (t_2905, ??_43);
    equal_sort? (r_2904, ??_42);
    equal_sort? (s_2903, ??_41)
  |}
end_dump
simpl_tm ~expand:false( A_2906, A_2906)
attempt_delay(?_28[3;4] : ?_84[3;4])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_97›)
infer_tm(Type‹??_97›)
assert_type_ok(Type‹??_97›, U)
check_tm( bool_5, Type‹??_97›)
infer_tm(bool_5)
assert_equal1( Type‹??_97›, U)
assert_equal1_extend( Type‹??_97›, U)
simpl_tm ~expand:false( Type‹??_97›, U)
attempt_delay(?_29[3;5] : ?_85[3;5])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_98›)
infer_tm(Type‹??_98›)
assert_type_ok(Type‹??_98›, U)
check_tm( L, Type‹??_98›)
infer_tm(L)
assert_equal1( Type‹??_98›, U)
assert_equal1_extend( Type‹??_98›, U)
simpl_tm ~expand:false( Type‹??_98›, U)
attempt_delay(?_30[3;5] : Type‹??_39›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_39›)
infer_tm(Type‹??_39›)
assert_type_ok(Type‹??_39›, U)
check_tm( A_2906, Type‹??_39›)
infer_tm(A_2906)
assert_equal1( Type‹??_39›, Type‹s_2903›)
assert_equal1_extend( Type‹??_39›, Type‹s_2903›)
simpl_tm ~expand:false( Type‹??_39›, Type‹s_2903›)
attempt_delay(?_31[3;4] : Type‹??_41›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_2903›)
infer_tm(Type‹s_2903›)
assert_type_ok(Type‹s_2903›, U)
check_tm( A_2906, Type‹s_2903›)
infer_tm(A_2906)
assert_equal1( Type‹s_2903›, Type‹s_2903›)
assert_equal1_ok( Type‹s_2903›, Type‹s_2903›)
----------------------------------

definition-------------------------
assert_type(∀ {A_3414 : Type‹s_3411›} ->
              ∀ {B_3415 : A_3414 -> Type‹r_3412›} ->
                (apair_10‹s_3411,r_3412,t_3413› A_3414 B_3415) -> A_3414)
infer_tm(∀ {A_3418 : Type‹s_3411›} ->
           ∀ {B_3419 : A_3418 -> Type‹r_3412›} ->
             (apair_10‹s_3411,r_3412,t_3413› A_3418 B_3419) -> A_3418)
assert_type(Type‹s_3411›)
infer_tm(Type‹s_3411›)
assert_type_ok(Type‹s_3411›, U)
assert_type(∀ {B_3423 : A_3422 -> Type‹r_3412›} ->
              (apair_10‹s_3411,r_3412,t_3413› A_3422 B_3423) -> A_3422)
infer_tm(∀ {B_3426 : A_3422 -> Type‹r_3412›} ->
           (apair_10‹s_3411,r_3412,t_3413› A_3422 B_3426) -> A_3422)
assert_type(A_3422 -> Type‹r_3412›)
infer_tm(A_3422 -> Type‹r_3412›)
assert_type(A_3422)
infer_tm(A_3422)
assert_type_ok(A_3422, Type‹s_3411›)
assert_type(Type‹r_3412›)
infer_tm(Type‹r_3412›)
assert_type_ok(Type‹r_3412›, U)
assert_type_ok(A_3422 -> Type‹r_3412›, U)
assert_type((apair_10‹s_3411,r_3412,t_3413› A_3422 B_3429) -> A_3422)
infer_tm((apair_10‹s_3411,r_3412,t_3413› A_3422 B_3429) -> A_3422)
assert_type((apair_10‹s_3411,r_3412,t_3413› A_3422 B_3429))
infer_tm((apair_10‹s_3411,r_3412,t_3413› A_3422 B_3429))
check_tm( A_3422, Type‹s_3411›)
infer_tm(A_3422)
assert_equal1( Type‹s_3411›, Type‹s_3411›)
assert_equal1_ok( Type‹s_3411›, Type‹s_3411›)
check_tm( B_3429, A_3422 -> Type‹r_3412›)
infer_tm(B_3429)
assert_equal1( A_3422 -> Type‹r_3412›, A_3422 -> Type‹r_3412›)
assert_equal1_ok( A_3422 -> Type‹r_3412›, A_3422 -> Type‹r_3412›)
assert_type_ok((apair_10‹s_3411,r_3412,t_3413› A_3422 B_3429), Type‹t_3413›)
assert_type(A_3422)
infer_tm(A_3422)
assert_type_ok(A_3422, Type‹s_3411›)
assert_type_ok((apair_10‹s_3411,r_3412,t_3413› A_3422 B_3429) -> A_3422, U)
assert_type_ok(∀ {B_3444 : A_3422 -> Type‹r_3412›} ->
                 (apair_10‹s_3411,r_3412,t_3413› A_3422 B_3444) -> A_3422, U)
assert_type_ok(∀ {A_3447 : Type‹s_3411›} ->
                 ∀ {B_3448 : A_3447 -> Type‹r_3412›} ->
                   (apair_10‹s_3411,r_3412,t_3413› A_3447 B_3448) ->
                     A_3447, U)
check_tm(
  function proj1_3451 :
    ∀ {A_3452 : Type‹s_3411›} ->
      ∀ {B_3453 : A_3452 -> Type‹r_3412›} ->
        (apair_10‹s_3411,r_3412,t_3413› A_3452 B_3453) -> A_3452
  | A_3456 B_3457 (apair_intro_13 _3458 select_3459) =>
    ((sing_elim_1‹??_44,??_45›)
      ?_33[0;0] ?_32[0;0] ((select_3459) true_5)),
  ∀ {A_3460 : Type‹s_3411›} ->
    ∀ {B_3461 : A_3460 -> Type‹r_3412›} ->
      (apair_10‹s_3411,r_3412,t_3413› A_3460 B_3461) -> A_3460)
assert_type(∀ {A_3465 : Type‹s_3411›} ->
              ∀ {B_3466 : A_3465 -> Type‹r_3412›} ->
                (apair_10‹s_3411,r_3412,t_3413› A_3465 B_3466) -> A_3465)
infer_tm(∀ {A_3469 : Type‹s_3411›} ->
           ∀ {B_3470 : A_3469 -> Type‹r_3412›} ->
             (apair_10‹s_3411,r_3412,t_3413› A_3469 B_3470) -> A_3469)
assert_type(Type‹s_3411›)
infer_tm(Type‹s_3411›)
assert_type_ok(Type‹s_3411›, U)
assert_type(∀ {B_3474 : A_3473 -> Type‹r_3412›} ->
              (apair_10‹s_3411,r_3412,t_3413› A_3473 B_3474) -> A_3473)
infer_tm(∀ {B_3477 : A_3473 -> Type‹r_3412›} ->
           (apair_10‹s_3411,r_3412,t_3413› A_3473 B_3477) -> A_3473)
assert_type(A_3473 -> Type‹r_3412›)
infer_tm(A_3473 -> Type‹r_3412›)
assert_type(A_3473)
infer_tm(A_3473)
assert_type_ok(A_3473, Type‹s_3411›)
assert_type(Type‹r_3412›)
infer_tm(Type‹r_3412›)
assert_type_ok(Type‹r_3412›, U)
assert_type_ok(A_3473 -> Type‹r_3412›, U)
assert_type((apair_10‹s_3411,r_3412,t_3413› A_3473 B_3480) -> A_3473)
infer_tm((apair_10‹s_3411,r_3412,t_3413› A_3473 B_3480) -> A_3473)
assert_type((apair_10‹s_3411,r_3412,t_3413› A_3473 B_3480))
infer_tm((apair_10‹s_3411,r_3412,t_3413› A_3473 B_3480))
check_tm( A_3473, Type‹s_3411›)
infer_tm(A_3473)
assert_equal1( Type‹s_3411›, Type‹s_3411›)
assert_equal1_ok( Type‹s_3411›, Type‹s_3411›)
check_tm( B_3480, A_3473 -> Type‹r_3412›)
infer_tm(B_3480)
assert_equal1( A_3473 -> Type‹r_3412›, A_3473 -> Type‹r_3412›)
assert_equal1_ok( A_3473 -> Type‹r_3412›, A_3473 -> Type‹r_3412›)
assert_type_ok((apair_10‹s_3411,r_3412,t_3413› A_3473 B_3480), Type‹t_3413›)
assert_type(A_3473)
infer_tm(A_3473)
assert_type_ok(A_3473, Type‹s_3411›)
assert_type_ok((apair_10‹s_3411,r_3412,t_3413› A_3473 B_3480) -> A_3473, U)
assert_type_ok(∀ {B_3495 : A_3473 -> Type‹r_3412›} ->
                 (apair_10‹s_3411,r_3412,t_3413› A_3473 B_3495) -> A_3473, U)
assert_type_ok(∀ {A_3498 : Type‹s_3411›} ->
                 ∀ {B_3499 : A_3498 -> Type‹r_3412›} ->
                   (apair_10‹s_3411,r_3412,t_3413› A_3498 B_3499) ->
                     A_3498, U)
assert_equal1(
  ∀ {A_3502 : Type‹s_3411›} ->
    ∀ {B_3503 : A_3502 -> Type‹r_3412›} ->
      (apair_10‹s_3411,r_3412,t_3413› A_3502 B_3503) -> A_3502,
  ∀ {A_3506 : Type‹s_3411›} ->
    ∀ {B_3507 : A_3506 -> Type‹r_3412›} ->
      (apair_10‹s_3411,r_3412,t_3413› A_3506 B_3507) -> A_3506)
assert_equal1_ok(
  ∀ {A_3514 : Type‹s_3411›} ->
    ∀ {B_3515 : A_3514 -> Type‹r_3412›} ->
      (apair_10‹s_3411,r_3412,t_3413› A_3514 B_3515) -> A_3514,
  ∀ {A_3518 : Type‹s_3411›} ->
    ∀ {B_3519 : A_3518 -> Type‹r_3412›} ->
      (apair_10‹s_3411,r_3412,t_3413› A_3518 B_3519) -> A_3518)
check_cls {|
  prblm {| ;
    {|  ::: [A_3522, B_3523, (apair_intro_13 _3524 select_3525)] =>?
         ((sing_elim_1‹??_44,??_45›)
           ?_33[0;0] ?_32[0;0] ((#select_3525) true_5))
    |}
  |}
  a := ∀ {A_3530 : Type‹s_3411›} ->
         ∀ {B_3531 : A_3530 -> Type‹r_3412›} ->
           (apair_10‹s_3411,r_3412,t_3413› A_3530 B_3531) -> A_3530
|}
case_intro(A_3534 : Type‹s_3411›)
case_intro(B_3535 : #A_3534 -> Type‹r_3412›)
case_intro(__3537 : (apair_10‹s_3411,r_3412,t_3413› #A_3534 #B_3535))
splitting_on(apair_intro_13)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹s_3411,r_3412,t_3413› #A_3534 #B_3535),
      (apair_10‹s_3411,r_3412,t_3413› #A_3534 #B_3535));
    {| eq_pat?( #A_3534, A_3522 : Type‹s_3411›)
       eq_pat?( #B_3535, B_3523 : #A_3534 -> Type‹r_3412›)
       eq_pat?( #x_3538, _3524 : #A_3534)
       eq_pat?( #select_3539, select_3525 :
         forall‹t_3413›(b_3549 : bool_5),
           match b_3549 in bool_5 -o L with
           | true_5 => (sing_3‹s_3411,L› #A_3534 #x_3538)
           | false_6 => (boxed_2‹r_3412› ((#B_3535) #x_3538))) ::: [] =>?
         ((sing_elim_1‹??_44,??_45›)
           ?_33[0;0] ?_32[0;0] ((#select_3525) true_5))
    |}
  |}
|}
unify_local(
  eq_pat?( #A_3534, A_3522 : Type‹s_3411›)
  eq_pat?( #B_3535, B_3523 : #A_3534 -> Type‹r_3412›)
  eq_pat?( #x_3538, _3524 : #A_3534)
  eq_pat?( #select_3539, select_3525 :
    forall‹t_3413›(b_3552 : bool_5),
      match b_3552 in bool_5 -o L with
      | true_5 => (sing_3‹s_3411,L› #A_3534 #x_3538)
      | false_6 => (boxed_2‹r_3412› ((#B_3535) #x_3538)))
)
unify_global(
  eq_term?( (apair_10‹s_3411,r_3412,t_3413› #A_3534 #B_3535),
    (apair_10‹s_3411,r_3412,t_3413› #A_3534 #B_3535))
)
simpl_pprbm ~expand:false( #A_3534, #A_3522)
simpl_pprbm ~expand:false( #B_3535, #B_3523)
simpl_pprbm ~expand:false( #x_3538, #_3524)
simpl_pprbm ~expand:false( #select_3539, #select_3525)
local_map solved
simpl_pprbm ~expand:false(
  (apair_10‹s_3411,r_3412,t_3413› #A_3534 #B_3535),
  (apair_10‹s_3411,r_3412,t_3413› #A_3534 #B_3535))
simpl_pprbm ~expand:false( #A_3534, #A_3534)
simpl_pprbm ~expand:false( #B_3535, #B_3535)
global_map solved
case_coverage_ok(
  ((sing_elim_1‹??_44,??_45›) ?_33[0;0] ?_32[0;0] ((select_3539) true_5)),
  A_3534)
check_tm(
  ((sing_elim_1‹??_44,??_45›) ?_33[0;0] ?_32[0;0] ((select_3539) true_5)),
  A_3534)
infer_tm(((sing_elim_1‹??_44,??_45›)
           ?_33[0;0] ?_32[0;0] ((select_3539) true_5)))
infer_tm(((sing_elim_1‹??_44,??_45›) ?_33[0;0] ?_32[0;0]))
infer_tm(((sing_elim_1‹??_44,??_45›) ?_33[0;0]))
infer_tm(sing_elim_1‹??_44,??_45›)
check_tm( ?_33[0;0], Type‹??_44›)
check_tm( ?_32[0;0], ?_33[3;6])
check_tm( ((select_3539) true_5),
  (sing_3‹??_44,??_45› ?_33[3;6] ?_32[3;6]))
infer_tm(((select_3539) true_5))
infer_tm(select_3539)
check_tm( true_5, bool_5)
infer_tm(true_5)
assert_equal1( bool_5, bool_5)
assert_equal1_ok( bool_5, bool_5)
assert_equal1( (sing_3‹??_44,??_45› ?_33[3;6] ?_32[3;6]),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹s_3411,L› A_3534 x_3538)
  | false_6 => (boxed_2‹r_3412› ((B_3535) x_3538)))
assert_equal1_extend( (sing_3‹??_44,??_45› ?_33[3;6] ?_32[3;6]),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹s_3411,L› A_3534 x_3538)
  | false_6 => (boxed_2‹r_3412› ((B_3535) x_3538)))
assert_equal1( A_3534, ?_33[3;6])
assert_equal1_extend( A_3534, ?_33[3;6])
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_3571
    ??_2 <= s_3572
    ??_3 <= s_3574
    ??_4 <= t_3575
    ??_5 <= s_3577
    ??_6 <= s_3580
    ??_7 <= r_3582
    ??_8 <= t_3584
    ??_9 <= s_3588
    ??_10 <= t_3589
    ??_11 <= s_3592
    ??_12 <= ??_11
    ??_13 <= s_3596
    ??_14 <= t_3597
    ??_15 <= ??_11
    ??_16 <= s_3601
    ??_17 <= L
    ??_18 <= s_3603
    ??_19 <= s_3604
    ??_20 <= L
    ??_21 <= s_3606
    ??_22 <= U
    ??_23 <= s_3608
    ??_24 <= s_3609
    ??_25 <= s_3610
    ??_26 <= L
    ??_27 <= s_3612
    ??_28 <= s_3613
    ??_29 <= L
    ??_30 <= L
    ??_31 <= s_3616
    ??_32 <= s_3617
    ??_33 <= L
    ??_34 <= s_3619
    ??_35 <= U
    ??_36 <= U
    ??_37 <= L
    ??_38 <= U
    ??_39 <= s_3622
    ??_40 <= r_3624
    ??_41 <= s_3628
    ??_42 <= r_3630
    ??_43 <= t_3632
    ??_87 <= L
    ??_88 <= U
    ??_89 <= U
    ??_90 <= U
    ??_91 <= L
    ??_92 <= U
    ??_93 <= L
    ??_94 <= U
    ??_95 <= L
    ??_96 <= L
    ??_97 <= U
    ??_98 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_3653
    ?_2 <= A_3657
    ?_3 <= A_3661
    ?_4 <= A_3665
    ?_5 <= A_3669
    ?_6 <= x0_3673
    ?_7 <= A_3679
    ?_8 <= A_3684
    ?_9 <= A_3690
    ?_10 <= m_3694
    ?_11 <= A_3702
    ?_12 <= x0_3706
    ?_13 <= A_3712
    ?_14 <= A_3717
    ?_15 <= choice_6
    ?_16 <= Type‹??_17›
    ?_17 <= L
    ?_18 <= choice_6
    ?_19 <= Type‹??_20›
    ?_20 <= ?_17[1;1]
    ?_21 <= unit_4‹L›
    ?_22 <= unit_4‹U›
    ?_23 <= A_3754
    ?_24 <= ((stream_3‹s_3756›) A_3761)
    ?_25 <= (prod_7‹s_3763,L,L› A_3766 ((stream_3‹s_3763›) A_3766))
    ?_26 <= (stream_node_9‹s_3768› A_3770)
    ?_27 <= nat_8
    ?_28 <= bool_5
    ?_29 <= L
    ?_30 <= A_3797
    ?_31 <= A_3804
    ?_74 <= Type‹??_87›
    ?_75 <= Type‹??_88›
    ?_76 <= Type‹??_89›
    ?_77 <= Type‹??_90›
    ?_78 <= Type‹??_91›
    ?_79 <= Type‹??_92›
    ?_80 <= Type‹??_93›
    ?_81 <= Type‹??_94›
    ?_82 <= Type‹??_95›
    ?_83 <= Type‹??_96›
    ?_84 <= Type‹??_97›
    ?_85 <= Type‹??_98›
    
  |}
  eqns {|
    equal_tm? (A_3534, ?_33[3;6]);
    equal_tm? ((sing_3‹??_44,??_45› ?_33[3;6] ?_32[3;6]),
      match true_5 in bool_5 -o L with
      | true_5 => (sing_3‹s_3411,L› A_3534 x_3538)
      | false_6 => (boxed_2‹r_3412› ((B_3535) x_3538)))
  |}
end_dump
simpl_tm ~expand:false( A_3534, ?_33[3;6])
simpl_tm ~expand:false( (sing_3‹??_44,??_45› A_3534 ?_32[3;6]),
  (sing_3‹s_3411,L› A_3534 x_3538))
simpl_tm ~expand:false( A_3534, A_3534)
simpl_tm ~expand:false( ?_32[3;6], x_3538)
simpl_tm ~expand:false( x_3538, ?_32[3;6])
attempt_delay(?_32[3;6] : ?_33[3;6])
resolve_ctx_ok
resolve_env_ok
assert_type(A_3534)
infer_tm(A_3534)
assert_type_ok(A_3534, Type‹s_3411›)
check_tm( x_3538, A_3534)
infer_tm(x_3538)
assert_equal1( A_3534, A_3534)
assert_equal1_ok( A_3534, A_3534)
attempt_delay(?_33[3;6] : Type‹??_44›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_3411›)
infer_tm(Type‹s_3411›)
assert_type_ok(Type‹s_3411›, U)
check_tm( A_3534, Type‹s_3411›)
infer_tm(A_3534)
assert_equal1( Type‹s_3411›, Type‹s_3411›)
assert_equal1_ok( Type‹s_3411›, Type‹s_3411›)
----------------------------------

definition-------------------------
assert_type(∀ {A_3959 : Type‹s_3956›} ->
              ∀ {B_3960 : A_3959 -> Type‹r_3957›} ->
                ∀ (x_3962 :
                  (apair_10‹s_3956,r_3957,t_3958› A_3959 B_3960)) ->
                  ((B_3960)
                    ((proj1_7‹??_59,??_60,??_61›)
                      ?_46[0;0] ?_45[0;0] x_3962)))
infer_tm(∀ {A_3963 : Type‹s_3956›} ->
           ∀ {B_3964 : A_3963 -> Type‹r_3957›} ->
             ∀ (x_3966 :
               (apair_10‹s_3956,r_3957,t_3958› A_3963 B_3964)) ->
               ((B_3964)
                 ((proj1_7‹??_59,??_60,??_61›)
                   ?_46[0;0] ?_45[0;0] x_3966)))
assert_type(Type‹s_3956›)
infer_tm(Type‹s_3956›)
assert_type_ok(Type‹s_3956›, U)
assert_type(∀ {B_3968 : A_3967 -> Type‹r_3957›} ->
              ∀ (x_3970 :
                (apair_10‹s_3956,r_3957,t_3958› A_3967 B_3968)) ->
                ((B_3968)
                  ((proj1_7‹??_59,??_60,??_61›)
                    ?_46[0;0] ?_45[0;0] x_3970)))
infer_tm(∀ {B_3971 : A_3967 -> Type‹r_3957›} ->
           ∀ (x_3973 :
             (apair_10‹s_3956,r_3957,t_3958› A_3967 B_3971)) ->
             ((B_3971)
               ((proj1_7‹??_59,??_60,??_61›) ?_46[0;0] ?_45[0;0] x_3973)))
assert_type(A_3967 -> Type‹r_3957›)
infer_tm(A_3967 -> Type‹r_3957›)
assert_type(A_3967)
infer_tm(A_3967)
assert_type_ok(A_3967, Type‹s_3956›)
assert_type(Type‹r_3957›)
infer_tm(Type‹r_3957›)
assert_type_ok(Type‹r_3957›, U)
assert_type_ok(A_3967 -> Type‹r_3957›, U)
assert_type(∀ (x_3979 :
              (apair_10‹s_3956,r_3957,t_3958› A_3967 B_3974)) ->
              ((B_3974)
                ((proj1_7‹??_59,??_60,??_61›) ?_46[0;0] ?_45[0;0] x_3979)))
infer_tm(∀ (x_3980 : (apair_10‹s_3956,r_3957,t_3958› A_3967 B_3974)) ->
           ((B_3974)
             ((proj1_7‹??_59,??_60,??_61›) ?_46[0;0] ?_45[0;0] x_3980)))
assert_type((apair_10‹s_3956,r_3957,t_3958› A_3967 B_3974))
infer_tm((apair_10‹s_3956,r_3957,t_3958› A_3967 B_3974))
check_tm( A_3967, Type‹s_3956›)
infer_tm(A_3967)
assert_equal1( Type‹s_3956›, Type‹s_3956›)
assert_equal1_ok( Type‹s_3956›, Type‹s_3956›)
check_tm( B_3974, A_3967 -> Type‹r_3957›)
infer_tm(B_3974)
assert_equal1( A_3967 -> Type‹r_3957›, A_3967 -> Type‹r_3957›)
assert_equal1_ok( A_3967 -> Type‹r_3957›, A_3967 -> Type‹r_3957›)
assert_type_ok((apair_10‹s_3956,r_3957,t_3958› A_3967 B_3974), Type‹t_3958›)
assert_type(((B_3974)
              ((proj1_7‹??_59,??_60,??_61›) ?_46[0;0] ?_45[0;0] x_3981)))
infer_tm(((B_3974)
           ((proj1_7‹??_59,??_60,??_61›) ?_46[0;0] ?_45[0;0] x_3981)))
infer_tm(B_3974)
check_tm( ((proj1_7‹??_59,??_60,??_61›) ?_46[0;0] ?_45[0;0] x_3981),
  A_3967)
infer_tm(((proj1_7‹??_59,??_60,??_61›) ?_46[0;0] ?_45[0;0] x_3981))
infer_tm(((proj1_7‹??_59,??_60,??_61›) ?_46[0;0] ?_45[0;0]))
infer_tm(((proj1_7‹??_59,??_60,??_61›) ?_46[0;0]))
infer_tm(proj1_7‹??_59,??_60,??_61›)
check_tm( ?_46[0;0], Type‹??_59›)
check_tm( ?_45[0;0], ?_46[3;3] -> Type‹??_60›)
check_tm( x_3981, (apair_10‹??_59,??_60,??_61› ?_46[3;3] ?_45[3;3]))
infer_tm(x_3981)
assert_equal1( (apair_10‹??_59,??_60,??_61› ?_46[3;3] ?_45[3;3]),
  (apair_10‹s_3956,r_3957,t_3958› A_3967 B_3974))
assert_equal1_extend( (apair_10‹??_59,??_60,??_61› ?_46[3;3] ?_45[3;3]),
  (apair_10‹s_3956,r_3957,t_3958› A_3967 B_3974))
assert_equal1( A_3967, ?_46[3;3])
assert_equal1_extend( A_3967, ?_46[3;3])
assert_type_ok(((B_3974)
                 ((proj1_7‹??_59,??_60,??_61›)
                   ?_46[0;0] ?_45[0;0] x_3981)), Type‹r_3957›)
simpl_tm ~expand:false( A_3967, ?_46[3;3])
simpl_tm ~expand:false( (apair_10‹??_59,??_60,??_61› A_3967 ?_45[3;3]),
  (apair_10‹s_3956,r_3957,t_3958› A_3967 B_3974))
simpl_tm ~expand:false( A_3967, A_3967)
simpl_tm ~expand:false( ?_45[3;3], B_3974)
simpl_tm ~expand:false( B_3974, ?_45[3;3])
assert_type_ok(∀ (x_4004 :
                 (apair_10‹s_3956,r_3957,t_3958› A_3967 B_3974)) ->
                 ((B_3974)
                   ((proj1_7‹??_59,??_60,??_61›)
                     ?_46[0;0] ?_45[0;0] x_4004)), U)
assert_type_ok(∀ {B_4005 : A_3967 -> Type‹r_3957›} ->
                 ∀ (x_4007 :
                   (apair_10‹s_3956,r_3957,t_3958› A_3967 B_4005)) ->
                   ((B_4005)
                     ((proj1_7‹??_59,??_60,??_61›)
                       ?_46[0;0] ?_45[0;0] x_4007)), U)
assert_type_ok(∀ {A_4008 : Type‹s_3956›} ->
                 ∀ {B_4009 : A_4008 -> Type‹r_3957›} ->
                   ∀ (x_4011 :
                     (apair_10‹s_3956,r_3957,t_3958› A_4008 B_4009)) ->
                     ((B_4009)
                       ((proj1_7‹??_59,??_60,??_61›)
                         ?_46[0;0] ?_45[0;0] x_4011)), U)
check_tm(
  function proj2_4012 :
    ∀ {A_4013 : Type‹s_3956›} ->
      ∀ {B_4014 : A_4013 -> Type‹r_3957›} ->
        ∀ (x_4016 : (apair_10‹s_3956,r_3957,t_3958› A_4013 B_4014)) ->
          ((B_4014)
            ((proj1_7‹??_46,??_47,??_48›) ?_35[0;0] ?_34[0;0] x_4016))
  | A_4017 B_4018 (apair_intro_13 x_4019 select_4020) =>
    match x_4019, ((select_4020) true_5),
    ((sing_uniq_2‹??_49,??_50›)
      ?_37[0;0] ?_36[0;0] ((select_4020) true_5)),
    ((select_4020) false_6) in
      ∀ {x0_4021 : ?_38[0;0]} -o
        ∀ {a0_4022 : (sing_3‹??_51,??_52› ?_39[0;0] x_4019)} -o
          {(eq_1‹??_55›
             ?_42[0;0] x0_4021
             ((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0] a0_4022))} -o
            (boxed_2‹??_56› ((B_4018) x0_4021)) -o
              ((B_4018)
                ((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0] a0_4022))
    with
    | _4025, _4026, refl_1, (box_2 b_4027) => b_4027,
  ∀ {A_4028 : Type‹s_3956›} ->
    ∀ {B_4029 : A_4028 -> Type‹r_3957›} ->
      ∀ (x_4031 : (apair_10‹s_3956,r_3957,t_3958› A_4028 B_4029)) ->
        ((B_4029)
          ((proj1_7‹??_59,??_60,??_61›) ?_46[3;3] ?_45[3;3] x_4031)))
assert_type(∀ {A_4033 : Type‹s_3956›} ->
              ∀ {B_4034 : A_4033 -> Type‹r_3957›} ->
                ∀ (x_4036 :
                  (apair_10‹s_3956,r_3957,t_3958› A_4033 B_4034)) ->
                  ((B_4034)
                    ((proj1_7‹??_46,??_47,??_48›)
                      ?_35[0;0] ?_34[0;0] x_4036)))
infer_tm(∀ {A_4037 : Type‹s_3956›} ->
           ∀ {B_4038 : A_4037 -> Type‹r_3957›} ->
             ∀ (x_4040 :
               (apair_10‹s_3956,r_3957,t_3958› A_4037 B_4038)) ->
               ((B_4038)
                 ((proj1_7‹??_46,??_47,??_48›)
                   ?_35[0;0] ?_34[0;0] x_4040)))
assert_type(Type‹s_3956›)
infer_tm(Type‹s_3956›)
assert_type_ok(Type‹s_3956›, U)
assert_type(∀ {B_4042 : A_4041 -> Type‹r_3957›} ->
              ∀ (x_4044 :
                (apair_10‹s_3956,r_3957,t_3958› A_4041 B_4042)) ->
                ((B_4042)
                  ((proj1_7‹??_46,??_47,??_48›)
                    ?_35[0;0] ?_34[0;0] x_4044)))
infer_tm(∀ {B_4045 : A_4041 -> Type‹r_3957›} ->
           ∀ (x_4047 :
             (apair_10‹s_3956,r_3957,t_3958› A_4041 B_4045)) ->
             ((B_4045)
               ((proj1_7‹??_46,??_47,??_48›) ?_35[0;0] ?_34[0;0] x_4047)))
assert_type(A_4041 -> Type‹r_3957›)
infer_tm(A_4041 -> Type‹r_3957›)
assert_type(A_4041)
infer_tm(A_4041)
assert_type_ok(A_4041, Type‹s_3956›)
assert_type(Type‹r_3957›)
infer_tm(Type‹r_3957›)
assert_type_ok(Type‹r_3957›, U)
assert_type_ok(A_4041 -> Type‹r_3957›, U)
assert_type(∀ (x_4053 :
              (apair_10‹s_3956,r_3957,t_3958› A_4041 B_4048)) ->
              ((B_4048)
                ((proj1_7‹??_46,??_47,??_48›) ?_35[0;0] ?_34[0;0] x_4053)))
infer_tm(∀ (x_4054 : (apair_10‹s_3956,r_3957,t_3958› A_4041 B_4048)) ->
           ((B_4048)
             ((proj1_7‹??_46,??_47,??_48›) ?_35[0;0] ?_34[0;0] x_4054)))
assert_type((apair_10‹s_3956,r_3957,t_3958› A_4041 B_4048))
infer_tm((apair_10‹s_3956,r_3957,t_3958› A_4041 B_4048))
check_tm( A_4041, Type‹s_3956›)
infer_tm(A_4041)
assert_equal1( Type‹s_3956›, Type‹s_3956›)
assert_equal1_ok( Type‹s_3956›, Type‹s_3956›)
check_tm( B_4048, A_4041 -> Type‹r_3957›)
infer_tm(B_4048)
assert_equal1( A_4041 -> Type‹r_3957›, A_4041 -> Type‹r_3957›)
assert_equal1_ok( A_4041 -> Type‹r_3957›, A_4041 -> Type‹r_3957›)
assert_type_ok((apair_10‹s_3956,r_3957,t_3958› A_4041 B_4048), Type‹t_3958›)
assert_type(((B_4048)
              ((proj1_7‹??_46,??_47,??_48›) ?_35[0;0] ?_34[0;0] x_4055)))
infer_tm(((B_4048)
           ((proj1_7‹??_46,??_47,??_48›) ?_35[0;0] ?_34[0;0] x_4055)))
infer_tm(B_4048)
check_tm( ((proj1_7‹??_46,??_47,??_48›) ?_35[0;0] ?_34[0;0] x_4055),
  A_4041)
infer_tm(((proj1_7‹??_46,??_47,??_48›) ?_35[0;0] ?_34[0;0] x_4055))
infer_tm(((proj1_7‹??_46,??_47,??_48›) ?_35[0;0] ?_34[0;0]))
infer_tm(((proj1_7‹??_46,??_47,??_48›) ?_35[0;0]))
infer_tm(proj1_7‹??_46,??_47,??_48›)
check_tm( ?_35[0;0], Type‹??_46›)
check_tm( ?_34[0;0], ?_35[3;3] -> Type‹??_47›)
check_tm( x_4055, (apair_10‹??_46,??_47,??_48› ?_35[3;3] ?_34[3;3]))
infer_tm(x_4055)
assert_equal1( (apair_10‹??_46,??_47,??_48› ?_35[3;3] ?_34[3;3]),
  (apair_10‹s_3956,r_3957,t_3958› A_4041 B_4048))
assert_equal1_extend( (apair_10‹??_46,??_47,??_48› ?_35[3;3] ?_34[3;3]),
  (apair_10‹s_3956,r_3957,t_3958› A_4041 B_4048))
assert_equal1( A_4041, ?_35[3;3])
assert_equal1_extend( A_4041, ?_35[3;3])
assert_type_ok(((B_4048)
                 ((proj1_7‹??_46,??_47,??_48›)
                   ?_35[0;0] ?_34[0;0] x_4055)), Type‹r_3957›)
simpl_tm ~expand:false( A_4041, ?_35[3;3])
simpl_tm ~expand:false( (apair_10‹??_46,??_47,??_48› A_4041 ?_34[3;3]),
  (apair_10‹s_3956,r_3957,t_3958› A_4041 B_4048))
simpl_tm ~expand:false( A_4041, A_4041)
simpl_tm ~expand:false( ?_34[3;3], B_4048)
simpl_tm ~expand:false( B_4048, ?_34[3;3])
assert_type_ok(∀ (x_4078 :
                 (apair_10‹s_3956,r_3957,t_3958› A_4041 B_4048)) ->
                 ((B_4048)
                   ((proj1_7‹??_46,??_47,??_48›)
                     ?_35[0;0] ?_34[0;0] x_4078)), U)
assert_type_ok(∀ {B_4079 : A_4041 -> Type‹r_3957›} ->
                 ∀ (x_4081 :
                   (apair_10‹s_3956,r_3957,t_3958› A_4041 B_4079)) ->
                   ((B_4079)
                     ((proj1_7‹??_46,??_47,??_48›)
                       ?_35[0;0] ?_34[0;0] x_4081)), U)
assert_type_ok(∀ {A_4082 : Type‹s_3956›} ->
                 ∀ {B_4083 : A_4082 -> Type‹r_3957›} ->
                   ∀ (x_4085 :
                     (apair_10‹s_3956,r_3957,t_3958› A_4082 B_4083)) ->
                     ((B_4083)
                       ((proj1_7‹??_46,??_47,??_48›)
                         ?_35[0;0] ?_34[0;0] x_4085)), U)
assert_equal1(
  ∀ {A_4086 : Type‹s_3956›} ->
    ∀ {B_4087 : A_4086 -> Type‹r_3957›} ->
      ∀ (x_4089 : (apair_10‹s_3956,r_3957,t_3958› A_4086 B_4087)) ->
        ((B_4087)
          ((proj1_7‹??_59,??_60,??_61›) ?_46[3;3] ?_45[3;3] x_4089)),
  ∀ {A_4090 : Type‹s_3956›} ->
    ∀ {B_4091 : A_4090 -> Type‹r_3957›} ->
      ∀ (x_4093 : (apair_10‹s_3956,r_3957,t_3958› A_4090 B_4091)) ->
        ((B_4091)
          ((proj1_7‹??_46,??_47,??_48›) ?_35[3;3] ?_34[3;3] x_4093)))
assert_equal1_extend(
  ∀ {A_4118 : Type‹s_3956›} ->
    ∀ {B_4119 : A_4118 -> Type‹r_3957›} ->
      ∀ (x_4121 : (apair_10‹s_3956,r_3957,t_3958› A_4118 B_4119)) ->
        ((B_4119)
          ((proj1_7‹??_59,??_60,??_61›) ?_46[3;3] ?_45[3;3] x_4121)),
  ∀ {A_4122 : Type‹s_3956›} ->
    ∀ {B_4123 : A_4122 -> Type‹r_3957›} ->
      ∀ (x_4125 : (apair_10‹s_3956,r_3957,t_3958› A_4122 B_4123)) ->
        ((B_4123)
          ((proj1_7‹??_46,??_47,??_48›) ?_35[3;3] ?_34[3;3] x_4125)))
simpl_tm ~expand:false(
  ∀ {A_4162 : Type‹s_3956›} ->
    ∀ {B_4163 : A_4162 -> Type‹r_3957›} ->
      ∀ (x_4165 : (apair_10‹s_3956,r_3957,t_3958› A_4162 B_4163)) ->
        ((B_4163) ((proj1_7‹s_3956,r_3957,t_3958›) A_4162 B_4163 x_4165)),
  ∀ {A_4166 : Type‹s_3956›} ->
    ∀ {B_4167 : A_4166 -> Type‹r_3957›} ->
      ∀ (x_4169 : (apair_10‹s_3956,r_3957,t_3958› A_4166 B_4167)) ->
        ((B_4167) ((proj1_7‹s_3956,r_3957,t_3958›) A_4166 B_4167 x_4169)))
simpl_tm ~expand:false( Type‹s_3956›, Type‹s_3956›)
simpl_tm ~expand:false(
  ∀ {B_4171 : A_4170 -> Type‹r_3957›} ->
    ∀ (x_4173 : (apair_10‹s_3956,r_3957,t_3958› A_4170 B_4171)) ->
      ((B_4171) ((proj1_7‹s_3956,r_3957,t_3958›) A_4170 B_4171 x_4173)),
  ∀ {B_4174 : A_4170 -> Type‹r_3957›} ->
    ∀ (x_4176 : (apair_10‹s_3956,r_3957,t_3958› A_4170 B_4174)) ->
      ((B_4174) ((proj1_7‹s_3956,r_3957,t_3958›) A_4170 B_4174 x_4176)))
simpl_tm ~expand:false( A_4170 -> Type‹r_3957›,
  A_4170 -> Type‹r_3957›)
simpl_tm ~expand:false( A_4170, A_4170)
simpl_tm ~expand:false( Type‹r_3957›, Type‹r_3957›)
simpl_tm ~expand:false(
  ∀ (x_4181 : (apair_10‹s_3956,r_3957,t_3958› A_4170 B_4177)) ->
    ((B_4177) ((proj1_7‹s_3956,r_3957,t_3958›) A_4170 B_4177 x_4181)),
  ∀ (x_4182 : (apair_10‹s_3956,r_3957,t_3958› A_4170 B_4177)) ->
    ((B_4177) ((proj1_7‹s_3956,r_3957,t_3958›) A_4170 B_4177 x_4182)))
simpl_tm ~expand:false( (apair_10‹s_3956,r_3957,t_3958› A_4170 B_4177),
  (apair_10‹s_3956,r_3957,t_3958› A_4170 B_4177))
simpl_tm ~expand:false( A_4170, A_4170)
simpl_tm ~expand:false( B_4177, B_4177)
simpl_tm ~expand:false(
  ((B_4177) ((proj1_7‹s_3956,r_3957,t_3958›) A_4170 B_4177 x_4183)),
  ((B_4177) ((proj1_7‹s_3956,r_3957,t_3958›) A_4170 B_4177 x_4183)))
simpl_tm ~expand:false( B_4177, B_4177)
simpl_tm ~expand:false(
  ((proj1_7‹s_3956,r_3957,t_3958›) A_4170 B_4177 x_4183),
  ((proj1_7‹s_3956,r_3957,t_3958›) A_4170 B_4177 x_4183))
simpl_tm ~expand:false( proj1_7‹s_3956,r_3957,t_3958›,
  proj1_7‹s_3956,r_3957,t_3958›)
simpl_tm ~expand:false( A_4170, A_4170)
simpl_tm ~expand:false( B_4177, B_4177)
simpl_tm ~expand:false( x_4183, x_4183)
check_cls {|
  prblm {| ;
    {|  ::: [A_4126, B_4127, (apair_intro_13 x_4128 select_4129)] =>?
         match #x_4128, ((#select_4129) true_5),
         ((sing_uniq_2‹??_49,??_50›)
           ?_37[0;0] ?_36[0;0] ((#select_4129) true_5)),
         ((#select_4129) false_6) in
           ∀ {x0_4200 : ?_38[0;0]} -o
             ∀ {a0_4201 : (sing_3‹??_51,??_52› ?_39[0;0] #x_4128)} -o
               {(eq_1‹??_55›
                  ?_42[0;0] x0_4200
                  ((sing_elim_1‹??_53,??_54›)
                    ?_41[0;0] ?_40[0;0] a0_4201))} -o
                 (boxed_2‹??_56› ((#B_4127) x0_4200)) -o
                   ((#B_4127)
                     ((sing_elim_1‹??_57,??_58›)
                       ?_44[0;0] ?_43[0;0] a0_4201))
         with
         | _4204, _4205, refl_1, (box_2 b_4206) => b_4206
    |}
  |}
  a := ∀ {A_4207 : Type‹s_3956›} ->
         ∀ {B_4208 : A_4207 -> Type‹r_3957›} ->
           ∀ (x_4210 :
             (apair_10‹s_3956,r_3957,t_3958› A_4207 B_4208)) ->
             ((B_4208)
               ((proj1_7‹s_3956,r_3957,t_3958›) A_4207 B_4208 x_4210))
|}
case_intro(A_4211 : Type‹s_3956›)
case_intro(B_4212 : #A_4211 -> Type‹r_3957›)
case_intro(x_4214 : (apair_10‹s_3956,r_3957,t_3958› #A_4211 #B_4212))
splitting_on(apair_intro_13)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹s_3956,r_3957,t_3958› #A_4211 #B_4212),
      (apair_10‹s_3956,r_3957,t_3958› #A_4211 #B_4212));
    {| eq_pat?( #A_4211, A_4126 : Type‹s_3956›)
       eq_pat?( #B_4212, B_4127 : #A_4211 -> Type‹r_3957›)
       eq_pat?( #x_4215, x_4128 : #A_4211)
       eq_pat?( #select_4216, select_4129 :
         forall‹t_3958›(b_4226 : bool_5),
           match b_4226 in bool_5 -o L with
           | true_5 => (sing_3‹s_3956,L› #A_4211 #x_4215)
           | false_6 => (boxed_2‹r_3957› ((#B_4212) #x_4215))) ::: [] =>?
         match #x_4128, ((#select_4129) true_5),
         ((sing_uniq_2‹??_49,??_50›)
           ?_37[0;0] ?_36[0;0] ((#select_4129) true_5)),
         ((#select_4129) false_6) in
           ∀ {x0_4228 : ?_38[0;0]} -o
             ∀ {a0_4229 : (sing_3‹??_51,??_52› ?_39[0;0] #x_4128)} -o
               {(eq_1‹??_55›
                  ?_42[0;0] x0_4228
                  ((sing_elim_1‹??_53,??_54›)
                    ?_41[0;0] ?_40[0;0] a0_4229))} -o
                 (boxed_2‹??_56› ((#B_4127) x0_4228)) -o
                   ((#B_4127)
                     ((sing_elim_1‹??_57,??_58›)
                       ?_44[0;0] ?_43[0;0] a0_4229))
         with
         | _4232, _4233, refl_1, (box_2 b_4234) => b_4234
    |}
  |}
|}
unify_local(
  eq_pat?( #A_4211, A_4126 : Type‹s_3956›)
  eq_pat?( #B_4212, B_4127 : #A_4211 -> Type‹r_3957›)
  eq_pat?( #x_4215, x_4128 : #A_4211)
  eq_pat?( #select_4216, select_4129 :
    forall‹t_3958›(b_4236 : bool_5),
      match b_4236 in bool_5 -o L with
      | true_5 => (sing_3‹s_3956,L› #A_4211 #x_4215)
      | false_6 => (boxed_2‹r_3957› ((#B_4212) #x_4215)))
)
unify_global(
  eq_term?( (apair_10‹s_3956,r_3957,t_3958› #A_4211 #B_4212),
    (apair_10‹s_3956,r_3957,t_3958› #A_4211 #B_4212))
)
simpl_pprbm ~expand:false( #A_4211, #A_4126)
simpl_pprbm ~expand:false( #B_4212, #B_4127)
simpl_pprbm ~expand:false( #x_4215, #x_4128)
simpl_pprbm ~expand:false( #select_4216, #select_4129)
local_map solved
simpl_pprbm ~expand:false(
  (apair_10‹s_3956,r_3957,t_3958› #A_4211 #B_4212),
  (apair_10‹s_3956,r_3957,t_3958› #A_4211 #B_4212))
simpl_pprbm ~expand:false( #A_4211, #A_4211)
simpl_pprbm ~expand:false( #B_4212, #B_4212)
global_map solved
case_coverage_ok(
  match x_4215, ((select_4216) true_5),
  ((sing_uniq_2‹??_49,??_50›) ?_37[0;0] ?_36[0;0] ((select_4216) true_5)),
  ((select_4216) false_6) in
    ∀ {x0_4252 : ?_38[0;0]} -o
      ∀ {a0_4253 : (sing_3‹??_51,??_52› ?_39[0;0] x_4215)} -o
        {(eq_1‹??_55›
           ?_42[0;0] x0_4252
           ((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0] a0_4253))} -o
          (boxed_2‹??_56› ((B_4212) x0_4252)) -o
            ((B_4212)
              ((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0] a0_4253))
  with
  | _4256, _4257, refl_1, (box_2 b_4258) => b_4258,
  ((B_4212)
    ((proj1_7‹s_3956,r_3957,t_3958›)
      A_4211 B_4212
      (apair_intro_13‹s_3956,r_3957,t_3958›
        A_4211 B_4212 x_4215 select_4216))))
check_tm(
  match x_4215, ((select_4216) true_5),
  ((sing_uniq_2‹??_49,??_50›) ?_37[0;0] ?_36[0;0] ((select_4216) true_5)),
  ((select_4216) false_6) in
    ∀ {x0_4259 : ?_38[0;0]} -o
      ∀ {a0_4260 : (sing_3‹??_51,??_52› ?_39[0;0] x_4215)} -o
        {(eq_1‹??_55›
           ?_42[0;0] x0_4259
           ((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0] a0_4260))} -o
          (boxed_2‹??_56› ((B_4212) x0_4259)) -o
            ((B_4212)
              ((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0] a0_4260))
  with
  | _4263, _4264, refl_1, (box_2 b_4265) => b_4265,
  ((B_4212)
    ((proj1_7‹s_3956,r_3957,t_3958›)
      A_4211 B_4212
      (apair_intro_13‹s_3956,r_3957,t_3958›
        A_4211 B_4212 x_4215 select_4216))))
infer_tm(match x_4215, ((select_4216) true_5),
         ((sing_uniq_2‹??_49,??_50›)
           ?_37[0;0] ?_36[0;0] ((select_4216) true_5)),
         ((select_4216) false_6) in
           ∀ {x0_4266 : ?_38[0;0]} -o
             ∀ {a0_4267 : (sing_3‹??_51,??_52› ?_39[0;0] x_4215)} -o
               {(eq_1‹??_55›
                  ?_42[0;0] x0_4266
                  ((sing_elim_1‹??_53,??_54›)
                    ?_41[0;0] ?_40[0;0] a0_4267))} -o
                 (boxed_2‹??_56› ((B_4212) x0_4266)) -o
                   ((B_4212)
                     ((sing_elim_1‹??_57,??_58›)
                       ?_44[0;0] ?_43[0;0] a0_4267))
         with
         | _4270, _4271, refl_1, (box_2 b_4272) => b_4272)
assert_type(?_38[0;0])
infer_tm(?_38[0;0])
assert_type_ok(?_38[0;0], ?_86[3;6])
delay_assert(?_86[3;6], ??_99)
assert_type(?_38[0;0])
infer_tm(?_38[0;0])
assert_type_ok(?_38[0;0], ?_86[3;6])
simpl_tm ~expand:false( ?_86[3;6], Type‹??_99›)
check_tm( x_4215, ?_38[3;6])
infer_tm(x_4215)
assert_equal1( ?_38[3;6], A_4211)
assert_equal1_extend( ?_38[3;6], A_4211)
assert_type((sing_3‹??_51,??_52› ?_39[0;0] x_4215))
infer_tm((sing_3‹??_51,??_52› ?_39[0;0] x_4215))
check_tm( ?_39[0;0], Type‹??_51›)
check_tm( x_4215, ?_39[3;7])
infer_tm(x_4215)
assert_equal1( ?_39[3;7], A_4211)
assert_equal1_extend( ?_39[3;7], A_4211)
assert_type_ok((sing_3‹??_51,??_52› ?_39[0;0] x_4215), Type‹??_52›)
simpl_tm ~expand:false( ?_39[3;7], A_4211)
simpl_tm ~expand:false( ?_38[3;6], A_4211)
assert_type((sing_3‹??_51,??_52› ?_39[0;0] x_4215))
infer_tm((sing_3‹??_51,??_52› ?_39[0;0] x_4215))
check_tm( ?_39[0;0], Type‹??_51›)
assert_equal1( Type‹??_51›, Type‹??_51›)
assert_equal1_ok( Type‹??_51›, Type‹??_51›)
check_tm( x_4215, ?_39[3;7])
infer_tm(x_4215)
assert_equal1( ?_39[3;7], A_4211)
assert_equal1_extend( ?_39[3;7], A_4211)
assert_type_ok((sing_3‹??_51,??_52› ?_39[0;0] x_4215), Type‹??_52›)
simpl_tm ~expand:false( A_4211, A_4211)
check_tm( ((select_4216) true_5), (sing_3‹??_51,??_52› ?_39[3;7] x_4215))
infer_tm(((select_4216) true_5))
infer_tm(select_4216)
check_tm( true_5, bool_5)
infer_tm(true_5)
assert_equal1( bool_5, bool_5)
assert_equal1_ok( bool_5, bool_5)
assert_equal1( (sing_3‹??_51,??_52› ?_39[3;7] x_4215),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹s_3956,L› A_4211 x_4215)
  | false_6 => (boxed_2‹r_3957› ((B_4212) x_4215)))
assert_equal1_extend( (sing_3‹??_51,??_52› ?_39[3;7] x_4215),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹s_3956,L› A_4211 x_4215)
  | false_6 => (boxed_2‹r_3957› ((B_4212) x_4215)))
assert_type((eq_1‹??_55›
              ?_42[0;0] x0_4273
              ((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0] a0_4283)))
infer_tm((eq_1‹??_55›
           ?_42[0;0] x0_4273
           ((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0] a0_4283)))
check_tm( ?_42[0;0], Type‹??_55›)
check_tm( x0_4273, ?_42[3;8])
infer_tm(x0_4273)
assert_equal1( ?_42[3;8], ?_38[3;6])
assert_equal1_extend( ?_42[3;8], ?_38[3;6])
check_tm( ((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0] a0_4283),
  ?_42[3;8])
infer_tm(((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0] a0_4283))
infer_tm(((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0]))
infer_tm(((sing_elim_1‹??_53,??_54›) ?_41[0;0]))
infer_tm(sing_elim_1‹??_53,??_54›)
simpl_tm ~expand:false( ?_42[3;8], A_4211)
simpl_tm ~expand:false( (sing_3‹??_51,??_52› A_4211 x_4215),
  (sing_3‹s_3956,L› A_4211 x_4215))
simpl_tm ~expand:false( A_4211, A_4211)
simpl_tm ~expand:false( x_4215, x_4215)
check_tm( ?_41[0;0], Type‹??_53›)
check_tm( ?_40[0;0], ?_41[3;8])
check_tm( a0_4283, (sing_3‹??_53,??_54› ?_41[3;8] ?_40[3;8]))
infer_tm(a0_4283)
assert_equal1( (sing_3‹??_53,??_54› ?_41[3;8] ?_40[3;8]),
  (sing_3‹??_51,??_52› ?_39[3;7] x_4215))
assert_equal1_extend( (sing_3‹??_53,??_54› ?_41[3;8] ?_40[3;8]),
  (sing_3‹??_51,??_52› ?_39[3;7] x_4215))
assert_equal1( ?_42[3;8], ?_41[3;8])
assert_equal1_extend( ?_42[3;8], ?_41[3;8])
assert_type_ok((eq_1‹??_55›
                 ?_42[0;0] x0_4273
                 ((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0] a0_4283)), U)
simpl_tm ~expand:false( A_4211, ?_41[3;8])
simpl_tm ~expand:false( (sing_3‹??_53,??_54› A_4211 ?_40[3;8]),
  (sing_3‹s_3956,L› A_4211 x_4215))
simpl_tm ~expand:false( A_4211, A_4211)
simpl_tm ~expand:false( ?_40[3;8], x_4215)
simpl_tm ~expand:false( x_4215, ?_40[3;8])
assert_type((eq_1‹??_55›
              ?_42[0;0] x_4215
              ((sing_elim_1‹??_53,??_54›)
                ?_41[0;0] ?_40[0;0] ((select_4216) true_5))))
infer_tm((eq_1‹??_55›
           ?_42[0;0] x_4215
           ((sing_elim_1‹??_53,??_54›)
             ?_41[0;0] ?_40[0;0] ((select_4216) true_5))))
check_tm( ?_42[0;0], Type‹??_55›)
assert_equal1( Type‹??_55›, Type‹??_55›)
assert_equal1_ok( Type‹??_55›, Type‹??_55›)
check_tm( x_4215, ?_42[3;8])
infer_tm(x_4215)
assert_equal1( ?_42[3;8], A_4211)
assert_equal1_extend( ?_42[3;8], A_4211)
check_tm(
  ((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0] ((select_4216) true_5)),
  ?_42[3;8])
infer_tm(((sing_elim_1‹??_53,??_54›)
           ?_41[0;0] ?_40[0;0] ((select_4216) true_5)))
infer_tm(((sing_elim_1‹??_53,??_54›) ?_41[0;0] ?_40[0;0]))
infer_tm(((sing_elim_1‹??_53,??_54›) ?_41[0;0]))
infer_tm(sing_elim_1‹??_53,??_54›)
simpl_tm ~expand:false( A_4211, A_4211)
check_tm( ?_41[0;0], Type‹s_3956›)
assert_equal1( Type‹s_3956›, Type‹??_53›)
assert_equal1_extend( Type‹s_3956›, Type‹??_53›)
simpl_tm ~expand:false( Type‹s_3956›, Type‹s_3956›)
check_tm( ?_40[0;0], A_4211)
assert_equal1( A_4211, ?_41[3;8])
assert_equal1_extend( A_4211, ?_41[3;8])
simpl_tm ~expand:false( A_4211, A_4211)
check_tm( ((select_4216) true_5), (sing_3‹s_3956,L› A_4211 x_4215))
infer_tm(((select_4216) true_5))
infer_tm(select_4216)
check_tm( true_5, bool_5)
infer_tm(true_5)
assert_equal1( bool_5, bool_5)
assert_equal1_ok( bool_5, bool_5)
assert_equal1( (sing_3‹s_3956,L› A_4211 x_4215),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹s_3956,L› A_4211 x_4215)
  | false_6 => (boxed_2‹r_3957› ((B_4212) x_4215)))
assert_equal1_ok( (sing_3‹s_3956,L› A_4211 x_4215),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹s_3956,L› A_4211 x_4215)
  | false_6 => (boxed_2‹r_3957› ((B_4212) x_4215)))
assert_equal1( ?_42[3;8], A_4211)
assert_equal1_extend( ?_42[3;8], A_4211)
assert_type_ok((eq_1‹??_55›
                 ?_42[0;0] x_4215
                 ((sing_elim_1‹??_53,??_54›)
                   ?_41[0;0] ?_40[0;0] ((select_4216) true_5))), U)
simpl_tm ~expand:false( A_4211, A_4211)
check_tm(
  ((sing_uniq_2‹??_49,??_50›) ?_37[0;0] ?_36[0;0] ((select_4216) true_5)),
  (eq_1‹??_55›
    ?_42[3;8] x_4215
    ((sing_elim_1‹??_53,??_54›)
      ?_41[3;8] ?_40[3;8] ((select_4216) true_5))))
infer_tm(((sing_uniq_2‹??_49,??_50›)
           ?_37[0;0] ?_36[0;0] ((select_4216) true_5)))
infer_tm(((sing_uniq_2‹??_49,??_50›) ?_37[0;0] ?_36[0;0]))
infer_tm(((sing_uniq_2‹??_49,??_50›) ?_37[0;0]))
infer_tm(sing_uniq_2‹??_49,??_50›)
check_tm( ?_37[0;0], Type‹??_49›)
check_tm( ?_36[0;0], ?_37[3;6])
check_tm( ((select_4216) true_5),
  (sing_3‹??_49,??_50› ?_37[3;6] ?_36[3;6]))
infer_tm(((select_4216) true_5))
infer_tm(select_4216)
check_tm( true_5, bool_5)
infer_tm(true_5)
assert_equal1( bool_5, bool_5)
assert_equal1_ok( bool_5, bool_5)
assert_equal1( (sing_3‹??_49,??_50› ?_37[3;6] ?_36[3;6]),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹s_3956,L› A_4211 x_4215)
  | false_6 => (boxed_2‹r_3957› ((B_4212) x_4215)))
assert_equal1_extend( (sing_3‹??_49,??_50› ?_37[3;6] ?_36[3;6]),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹s_3956,L› A_4211 x_4215)
  | false_6 => (boxed_2‹r_3957› ((B_4212) x_4215)))
assert_equal1(
  (eq_1‹??_55›
    ?_42[3;8] x_4215
    ((sing_elim_1‹??_53,??_54›)
      ?_41[3;8] ?_40[3;8] ((select_4216) true_5))),
  (eq_1‹??_49›
    ?_37[3;6] ?_36[3;6]
    ((sing_elim_1‹??_49,??_50›)
      ?_37[3;6] ?_36[3;6] ((select_4216) true_5))))
assert_equal1_extend(
  (eq_1‹??_55›
    ?_42[3;8] x_4215
    ((sing_elim_1‹??_53,??_54›)
      ?_41[3;8] ?_40[3;8] ((select_4216) true_5))),
  (eq_1‹??_49›
    ?_37[3;6] ?_36[3;6]
    ((sing_elim_1‹??_49,??_50›)
      ?_37[3;6] ?_36[3;6] ((select_4216) true_5))))
assert_type((boxed_2‹??_56› ((B_4212) x0_4273)))
infer_tm((boxed_2‹??_56› ((B_4212) x0_4273)))
check_tm( ((B_4212) x0_4273), Type‹??_56›)
infer_tm(((B_4212) x0_4273))
infer_tm(B_4212)
simpl_tm ~expand:false(
  (eq_1‹??_55›
    A_4211 x_4215
    ((sing_elim_1‹s_3956,L›) A_4211 x_4215 ((select_4216) true_5))),
  (eq_1‹??_49›
    ?_37[3;6] ?_36[3;6]
    ((sing_elim_1‹??_49,??_50›)
      ?_37[3;6] ?_36[3;6] ((select_4216) true_5))))
simpl_tm ~expand:false( A_4211, ?_37[3;6])
simpl_tm ~expand:false( x_4215, ?_36[3;6])
simpl_tm ~expand:false(
  ((sing_elim_1‹s_3956,L›) A_4211 x_4215 ((select_4216) true_5)),
  ((sing_elim_1‹??_49,??_50›) ?_37[3;6] ?_36[3;6] ((select_4216) true_5)))
simpl_tm ~expand:false( sing_elim_1‹s_3956,L›,
  sing_elim_1‹??_49,??_50›)
simpl_tm ~expand:false( A_4211, ?_37[3;6])
simpl_tm ~expand:false( x_4215, ?_36[3;6])
simpl_tm ~expand:false( ((select_4216) true_5), ((select_4216) true_5))
simpl_tm ~expand:false( select_4216, select_4216)
simpl_tm ~expand:false( true_5, true_5)
simpl_tm ~expand:false( A_4211, ?_37[3;6])
simpl_tm ~expand:false( x_4215, ?_36[3;6])
simpl_tm ~expand:false( A_4211, A_4211)
simpl_tm ~expand:false( x_4215, x_4215)
simpl_tm ~expand:false( (sing_3‹s_3956,L› A_4211 x_4215),
  (sing_3‹s_3956,L› A_4211 x_4215))
simpl_tm ~expand:false( A_4211, A_4211)
simpl_tm ~expand:false( x_4215, x_4215)
check_tm( x0_4273, A_4211)
infer_tm(x0_4273)
assert_equal1( A_4211, ?_38[3;6])
assert_equal1_extend( A_4211, ?_38[3;6])
assert_equal1( Type‹??_56›, Type‹r_3957›)
assert_equal1_extend( Type‹??_56›, Type‹r_3957›)
assert_type_ok((boxed_2‹??_56› ((B_4212) x0_4273)), L)
simpl_tm ~expand:false( Type‹??_56›, Type‹r_3957›)
simpl_tm ~expand:false( A_4211, A_4211)
assert_type((boxed_2‹??_56› ((B_4212) x_4215)))
infer_tm((boxed_2‹??_56› ((B_4212) x_4215)))
check_tm( ((B_4212) x_4215), Type‹??_56›)
infer_tm(((B_4212) x_4215))
infer_tm(B_4212)
check_tm( x_4215, A_4211)
infer_tm(x_4215)
assert_equal1( A_4211, A_4211)
assert_equal1_ok( A_4211, A_4211)
assert_equal1( Type‹??_56›, Type‹r_3957›)
assert_equal1_extend( Type‹??_56›, Type‹r_3957›)
assert_type_ok((boxed_2‹??_56› ((B_4212) x_4215)), L)
simpl_tm ~expand:false( Type‹r_3957›, Type‹r_3957›)
check_tm( ((select_4216) false_6), (boxed_2‹??_56› ((B_4212) x_4215)))
infer_tm(((select_4216) false_6))
infer_tm(select_4216)
check_tm( false_6, bool_5)
infer_tm(false_6)
assert_equal1( bool_5, bool_5)
assert_equal1_ok( bool_5, bool_5)
assert_equal1( (boxed_2‹??_56› ((B_4212) x_4215)),
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹s_3956,L› A_4211 x_4215)
  | false_6 => (boxed_2‹r_3957› ((B_4212) x_4215)))
assert_equal1_extend( (boxed_2‹??_56› ((B_4212) x_4215)),
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹s_3956,L› A_4211 x_4215)
  | false_6 => (boxed_2‹r_3957› ((B_4212) x_4215)))
assert_type(((B_4212)
              ((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0] a0_4283)))
infer_tm(((B_4212)
           ((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0] a0_4283)))
infer_tm(B_4212)
simpl_tm ~expand:false( (boxed_2‹r_3957› ((B_4212) x_4215)),
  (boxed_2‹r_3957› ((B_4212) x_4215)))
simpl_tm ~expand:false( ((B_4212) x_4215), ((B_4212) x_4215))
simpl_tm ~expand:false( B_4212, B_4212)
simpl_tm ~expand:false( x_4215, x_4215)
check_tm( ((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0] a0_4283),
  A_4211)
infer_tm(((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0] a0_4283))
infer_tm(((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0]))
infer_tm(((sing_elim_1‹??_57,??_58›) ?_44[0;0]))
infer_tm(sing_elim_1‹??_57,??_58›)
check_tm( ?_44[0;0], Type‹??_57›)
check_tm( ?_43[0;0], ?_44[3;10])
check_tm( a0_4283, (sing_3‹??_57,??_58› ?_44[3;10] ?_43[3;10]))
infer_tm(a0_4283)
assert_equal1( (sing_3‹??_57,??_58› ?_44[3;10] ?_43[3;10]),
  (sing_3‹??_51,??_52› ?_39[3;7] x_4215))
assert_equal1_extend( (sing_3‹??_57,??_58› ?_44[3;10] ?_43[3;10]),
  (sing_3‹??_51,??_52› ?_39[3;7] x_4215))
assert_equal1( A_4211, ?_44[3;10])
assert_equal1_extend( A_4211, ?_44[3;10])
assert_type_ok(((B_4212)
                 ((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0] a0_4283)), Type‹r_3957›)
simpl_tm ~expand:false( A_4211, ?_44[3;10])
simpl_tm ~expand:false( (sing_3‹??_57,??_58› A_4211 ?_43[3;10]),
  (sing_3‹s_3956,L› A_4211 x_4215))
simpl_tm ~expand:false( A_4211, A_4211)
simpl_tm ~expand:false( ?_43[3;10], x_4215)
simpl_tm ~expand:false( x_4215, ?_43[3;10])
assert_type(((B_4212)
              ((sing_elim_1‹??_57,??_58›)
                ?_44[0;0] ?_43[0;0] ((select_4216) true_5))))
infer_tm(((B_4212)
           ((sing_elim_1‹??_57,??_58›)
             ?_44[0;0] ?_43[0;0] ((select_4216) true_5))))
infer_tm(B_4212)
check_tm(
  ((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0] ((select_4216) true_5)),
  A_4211)
infer_tm(((sing_elim_1‹??_57,??_58›)
           ?_44[0;0] ?_43[0;0] ((select_4216) true_5)))
infer_tm(((sing_elim_1‹??_57,??_58›) ?_44[0;0] ?_43[0;0]))
infer_tm(((sing_elim_1‹??_57,??_58›) ?_44[0;0]))
infer_tm(sing_elim_1‹??_57,??_58›)
check_tm( ?_44[0;0], Type‹s_3956›)
assert_equal1( Type‹s_3956›, Type‹??_57›)
assert_equal1_extend( Type‹s_3956›, Type‹??_57›)
simpl_tm ~expand:false( Type‹s_3956›, Type‹s_3956›)
check_tm( ?_43[0;0], A_4211)
assert_equal1( A_4211, ?_44[3;10])
assert_equal1_extend( A_4211, ?_44[3;10])
simpl_tm ~expand:false( A_4211, A_4211)
check_tm( ((select_4216) true_5), (sing_3‹s_3956,L› A_4211 x_4215))
infer_tm(((select_4216) true_5))
infer_tm(select_4216)
check_tm( true_5, bool_5)
infer_tm(true_5)
assert_equal1( bool_5, bool_5)
assert_equal1_ok( bool_5, bool_5)
assert_equal1( (sing_3‹s_3956,L› A_4211 x_4215),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹s_3956,L› A_4211 x_4215)
  | false_6 => (boxed_2‹r_3957› ((B_4212) x_4215)))
assert_equal1_ok( (sing_3‹s_3956,L› A_4211 x_4215),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹s_3956,L› A_4211 x_4215)
  | false_6 => (boxed_2‹r_3957› ((B_4212) x_4215)))
assert_equal1( A_4211, A_4211)
assert_equal1_ok( A_4211, A_4211)
assert_type_ok(((B_4212)
                 ((sing_elim_1‹??_57,??_58›)
                   ?_44[0;0] ?_43[0;0] ((select_4216) true_5))), Type‹r_3957›)
check_cls {|
  prblm {| ; {|  ::: [_4647, _4648, refl_1, (box_2 b_4649)] =>? #b_4649 |} |}
  a := ∀ {x0_4732 : A_4211} -o
         ∀ {a0_4733 : (sing_3‹s_3956,L› A_4211 x_4215)} -o
           {(eq_1‹s_3956›
              A_4211 x0_4732
              ((sing_elim_1‹s_3956,L›) A_4211 x_4215 a0_4733))} -o
             (boxed_2‹r_3957› ((B_4212) x0_4732)) -o
               ((B_4212) ((sing_elim_1‹s_3956,L›) A_4211 x_4215 a0_4733))
|}
case_intro(x0_4736 : A_4211)
case_intro(a0_4737 : (sing_3‹s_3956,L› A_4211 x_4215))
case_intro(__4738 : (eq_1‹s_3956›
                      A_4211 #x0_4736
                      ((sing_elim_1‹s_3956,L›) A_4211 x_4215 #a0_4737)))
case_intro(__4739 : (boxed_2‹r_3957› ((B_4212) #x0_4736)))
splitting_on(refl_1)
splitting_on(box_2)
case_coverage{|
  prblm {|
    eq_term?( (boxed_2‹r_3957› ((B_4212) #x0_4736)),
      (boxed_2‹r_3957› ((B_4212) #x0_4736)))
    eq_term?(
      (eq_1‹s_3956›
        A_4211 #x0_4736 ((sing_elim_1‹s_3956,L›) A_4211 x_4215 #a0_4737)),
      (eq_1‹s_3956› A_4211 #x0_4736 #x0_4736));
    {| eq_pat?( #x0_4736, _4647 : A_4211)
       eq_pat?( #a0_4737, _4648 : (sing_3‹s_3956,L› A_4211 x_4215))
       eq_pat?( #m_4747, b_4649 : ((B_4212) #x0_4736)) ::: [] =>? #b_4649
    |}
  |}
|}
unify_local(
  eq_pat?( #x0_4736, _4647 : A_4211)
  eq_pat?( #a0_4737, _4648 : (sing_3‹s_3956,L› A_4211 x_4215))
  eq_pat?( #m_4747, b_4649 : ((B_4212) #x0_4736))
)
unify_global(
  eq_term?( (boxed_2‹r_3957› ((B_4212) #x0_4736)),
    (boxed_2‹r_3957› ((B_4212) #x0_4736)))
  eq_term?(
    (eq_1‹s_3956›
      A_4211 #x0_4736 ((sing_elim_1‹s_3956,L›) A_4211 x_4215 #a0_4737)),
    (eq_1‹s_3956› A_4211 #x0_4736 #x0_4736))
)
simpl_pprbm ~expand:false( #x0_4736, #_4647)
simpl_pprbm ~expand:false( #a0_4737, #_4648)
simpl_pprbm ~expand:false( #m_4747, #b_4649)
local_map solved
simpl_pprbm ~expand:false( (boxed_2‹r_3957› ((B_4212) #x0_4736)),
  (boxed_2‹r_3957› ((B_4212) #x0_4736)))
simpl_pprbm ~expand:false( ((B_4212) #x0_4736), ((B_4212) #x0_4736))
simpl_pprbm ~expand:false( B_4212, B_4212)
simpl_pprbm ~expand:false( #x0_4736, #x0_4736)
simpl_pprbm ~expand:false(
  (eq_1‹s_3956›
    A_4211 #x0_4736 ((sing_elim_1‹s_3956,L›) A_4211 x_4215 #a0_4737)),
  (eq_1‹s_3956› A_4211 #x0_4736 #x0_4736))
simpl_pprbm ~expand:false( A_4211, A_4211)
simpl_pprbm ~expand:false( #x0_4736, #x0_4736)
simpl_pprbm ~expand:false(
  ((sing_elim_1‹s_3956,L›) A_4211 x_4215 #a0_4737), #x0_4736)
global_map solved
case_coverage_ok( m_4747,
  ((B_4212) ((sing_elim_1‹s_3956,L›) A_4211 x_4215 a0_4737)))
check_tm( m_4747,
  ((B_4212) ((sing_elim_1‹s_3956,L›) A_4211 x_4215 a0_4737)))
infer_tm(m_4747)
assert_equal1(
  ((B_4212) ((sing_elim_1‹s_3956,L›) A_4211 x_4215 a0_4737)),
  ((B_4212) ((sing_elim_1‹s_3956,L›) A_4211 x_4215 a0_4737)))
assert_equal1_ok(
  ((B_4212) ((sing_elim_1‹s_3956,L›) A_4211 x_4215 a0_4737)),
  ((B_4212) ((sing_elim_1‹s_3956,L›) A_4211 x_4215 a0_4737)))
assert_equal1(
  ((B_4212)
    ((proj1_7‹s_3956,r_3957,t_3958›)
      A_4211 B_4212
      (apair_intro_13‹s_3956,r_3957,t_3958›
        A_4211 B_4212 x_4215 select_4216))),
  ((B_4212)
    ((sing_elim_1‹??_57,??_58›)
      ?_44[3;10] ?_43[3;10] ((select_4216) true_5))))
assert_equal1_extend(
  ((B_4212)
    ((proj1_7‹s_3956,r_3957,t_3958›)
      A_4211 B_4212
      (apair_intro_13‹s_3956,r_3957,t_3958›
        A_4211 B_4212 x_4215 select_4216))),
  ((B_4212)
    ((sing_elim_1‹??_57,??_58›)
      ?_44[3;10] ?_43[3;10] ((select_4216) true_5))))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_4762
    ??_2 <= s_4763
    ??_3 <= s_4765
    ??_4 <= t_4766
    ??_5 <= s_4768
    ??_6 <= s_4771
    ??_7 <= r_4773
    ??_8 <= t_4775
    ??_9 <= s_4779
    ??_10 <= t_4780
    ??_11 <= s_4783
    ??_12 <= ??_11
    ??_13 <= s_4787
    ??_14 <= t_4788
    ??_15 <= ??_11
    ??_16 <= s_4792
    ??_17 <= L
    ??_18 <= s_4794
    ??_19 <= s_4795
    ??_20 <= L
    ??_21 <= s_4797
    ??_22 <= U
    ??_23 <= s_4799
    ??_24 <= s_4800
    ??_25 <= s_4801
    ??_26 <= L
    ??_27 <= s_4803
    ??_28 <= s_4804
    ??_29 <= L
    ??_30 <= L
    ??_31 <= s_4807
    ??_32 <= s_4808
    ??_33 <= L
    ??_34 <= s_4810
    ??_35 <= U
    ??_36 <= U
    ??_37 <= L
    ??_38 <= U
    ??_39 <= s_4813
    ??_40 <= r_4815
    ??_41 <= s_4819
    ??_42 <= r_4821
    ??_43 <= t_4823
    ??_44 <= s_4828
    ??_45 <= L
    ??_46 <= s_4834
    ??_47 <= r_4836
    ??_48 <= t_4838
    ??_49 <= s_4843
    ??_50 <= L
    ??_51 <= s_4849
    ??_52 <= L
    ??_53 <= s_4855
    ??_54 <= L
    ??_55 <= ??_49
    ??_56 <= r_4863
    ??_57 <= s_4867
    ??_58 <= L
    ??_59 <= s_4873
    ??_60 <= r_4875
    ??_61 <= t_4877
    ??_87 <= L
    ??_88 <= U
    ??_89 <= U
    ??_90 <= U
    ??_91 <= L
    ??_92 <= U
    ??_93 <= L
    ??_94 <= U
    ??_95 <= L
    ??_96 <= L
    ??_97 <= U
    ??_98 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_4898
    ?_2 <= A_4902
    ?_3 <= A_4906
    ?_4 <= A_4910
    ?_5 <= A_4914
    ?_6 <= x0_4918
    ?_7 <= A_4924
    ?_8 <= A_4929
    ?_9 <= A_4935
    ?_10 <= m_4939
    ?_11 <= A_4947
    ?_12 <= x0_4951
    ?_13 <= A_4957
    ?_14 <= A_4962
    ?_15 <= choice_6
    ?_16 <= Type‹??_17›
    ?_17 <= L
    ?_18 <= choice_6
    ?_19 <= Type‹??_20›
    ?_20 <= ?_17[1;1]
    ?_21 <= unit_4‹L›
    ?_22 <= unit_4‹U›
    ?_23 <= A_4999
    ?_24 <= ((stream_3‹s_5001›) A_5006)
    ?_25 <= (prod_7‹s_5008,L,L› A_5011 ((stream_3‹s_5008›) A_5011))
    ?_26 <= (stream_node_9‹s_5013› A_5015)
    ?_27 <= nat_8
    ?_28 <= bool_5
    ?_29 <= L
    ?_30 <= A_5042
    ?_31 <= A_5049
    ?_32 <= x_5054
    ?_33 <= A_5066
    ?_34 <= B_5072
    ?_35 <= A_5079
    ?_36 <= x_5084
    ?_37 <= A_5096
    ?_38 <= A_5105
    ?_39 <= A_5115
    ?_40 <= x_5123
    ?_41 <= A_5137
    ?_42 <= A_5148
    ?_43 <= x_5158
    ?_44 <= A_5174
    ?_45 <= B_5180
    ?_46 <= A_5187
    ?_74 <= Type‹??_87›
    ?_75 <= Type‹??_88›
    ?_76 <= Type‹??_89›
    ?_77 <= Type‹??_90›
    ?_78 <= Type‹??_91›
    ?_79 <= Type‹??_92›
    ?_80 <= Type‹??_93›
    ?_81 <= Type‹??_94›
    ?_82 <= Type‹??_95›
    ?_83 <= Type‹??_96›
    ?_84 <= Type‹??_97›
    ?_85 <= Type‹??_98›
    ?_86 <= Type‹??_99›
    
  |}
  eqns {|
    equal_tm?
      (((B_4212)
         ((proj1_7‹s_3956,r_3957,t_3958›)
           A_4211 B_4212
           (apair_intro_13‹s_3956,r_3957,t_3958›
             A_4211 B_4212 x_4215 select_4216))),
      ((B_4212)
        ((sing_elim_1‹??_57,??_58›)
          ?_44[3;10] ?_43[3;10] ((select_4216) true_5))))
  |}
end_dump
simpl_tm ~expand:false(
  ((B_4212)
    ((proj1_7‹s_3956,r_3957,t_3958›)
      A_4211 B_4212
      (apair_intro_13‹s_3956,r_3957,t_3958›
        A_4211 B_4212 x_4215 select_4216))),
  ((B_4212)
    ((sing_elim_1‹s_3956,L›) A_4211 x_4215 ((select_4216) true_5))))
simpl_tm ~expand:false( B_4212, B_4212)
simpl_tm ~expand:false(
  ((proj1_7‹s_3956,r_3957,t_3958›)
    A_4211 B_4212
    (apair_intro_13‹s_3956,r_3957,t_3958›
      A_4211 B_4212 x_4215 select_4216)),
  ((sing_elim_1‹s_3956,L›) A_4211 x_4215 ((select_4216) true_5)))
simpl_tm ~expand:false( proj1_7‹s_3956,r_3957,t_3958›,
  sing_elim_1‹s_3956,L›)
simpl_tm ~expand:true(
  function proj1_5278 :
    ∀ {A_5279 : Type‹s_3956›} ->
      ∀ {B_5280 : A_5279 -> Type‹r_3957›} ->
        (apair_10‹s_3956,r_3957,t_3958› A_5279 B_5280) -> A_5279
  | A_5283 B_5284 (apair_intro_13 x_5285 select_5286) =>
    ((sing_elim_1‹s_3956,L›) A_5283 x_5285 ((select_5286) true_5)),
  function sing_elim_5287 :
    ∀ {A_5288 : Type‹s_3956›} ->
      ∀ {x_5289 : A_5288} -> (sing_3‹s_3956,L› A_5288 x_5289) -> A_5288
  | A_5291 x_5292 (just_3 m_5293) => m_5293)
simpl_function(
  function proj1_5294 :
    ∀ {A_5295 : Type‹s_3956›} ->
      ∀ {B_5296 : A_5295 -> Type‹r_3957›} ->
        (apair_10‹s_3956,r_3957,t_3958› A_5295 B_5296) -> A_5295
  | A_5299 B_5300 (apair_intro_13 x_5301 select_5302) =>
    ((sing_elim_1‹s_3956,L›) A_5299 x_5301 ((select_5302) true_5)),
  function sing_elim_5303 :
    ∀ {A_5304 : Type‹s_3956›} ->
      ∀ {x_5305 : A_5304} -> (sing_3‹s_3956,L› A_5304 x_5305) -> A_5304
  | A_5307 x_5308 (just_3 m_5309) => m_5309)
simpl_tm ~expand:false(
  ∀ {A_5311 : Type‹s_3956›} ->
    ∀ {B_5312 : A_5311 -> Type‹r_3957›} ->
      (apair_10‹s_3956,r_3957,t_3958› A_5311 B_5312) -> A_5311,
  ∀ {A_5315 : Type‹s_3956›} ->
    ∀ {x_5316 : A_5315} -> (sing_3‹s_3956,L› A_5315 x_5316) -> A_5315)
simpl_tm ~expand:false( Type‹s_3956›, Type‹s_3956›)
simpl_tm ~expand:false(
  ∀ {B_5319 : A_5318 -> Type‹r_3957›} ->
    (apair_10‹s_3956,r_3957,t_3958› A_5318 B_5319) -> A_5318,
  ∀ {x_5322 : A_5318} -> (sing_3‹s_3956,L› A_5318 x_5322) -> A_5318)
simpl_tm ~expand:false( A_5318 -> Type‹r_3957›, A_5318)
simpl_tm ~expand:true( A_5318 -> Type‹r_3957›, A_5318)
simpl_tm ~expand:true(
  ((function sing_elim_5328 :
      ∀ {A_5329 : Type‹s_3956›} ->
        ∀ {x_5330 : A_5329} ->
          (sing_3‹s_3956,L› A_5329 x_5330) -> A_5329
    | A_5332 x_5333 (just_3 m_5334) => m_5334)
    A_4211 x_4215 ((select_4216) true_5)),
  ((function sing_elim_5335 :
      ∀ {A_5336 : Type‹s_3956›} ->
        ∀ {x_5337 : A_5336} ->
          (sing_3‹s_3956,L› A_5336 x_5337) -> A_5336
    | A_5339 x_5340 (just_3 m_5341) => m_5341)
    A_4211 x_4215 ((select_4216) true_5)))
simpl_tm ~expand:false(
  function sing_elim_5342 :
    ∀ {A_5343 : Type‹s_3956›} ->
      ∀ {x_5344 : A_5343} -> (sing_3‹s_3956,L› A_5343 x_5344) -> A_5343
  | A_5346 x_5347 (just_3 m_5348) => m_5348,
  function sing_elim_5349 :
    ∀ {A_5350 : Type‹s_3956›} ->
      ∀ {x_5351 : A_5350} -> (sing_3‹s_3956,L› A_5350 x_5351) -> A_5350
  | A_5353 x_5354 (just_3 m_5355) => m_5355)
simpl_function(
  function sing_elim_5356 :
    ∀ {A_5357 : Type‹s_3956›} ->
      ∀ {x_5358 : A_5357} -> (sing_3‹s_3956,L› A_5357 x_5358) -> A_5357
  | A_5360 x_5361 (just_3 m_5362) => m_5362,
  function sing_elim_5363 :
    ∀ {A_5364 : Type‹s_3956›} ->
      ∀ {x_5365 : A_5364} -> (sing_3‹s_3956,L› A_5364 x_5365) -> A_5364
  | A_5367 x_5368 (just_3 m_5369) => m_5369)
simpl_tm ~expand:false(
  ∀ {A_5371 : Type‹s_3956›} ->
    ∀ {x_5372 : A_5371} -> (sing_3‹s_3956,L› A_5371 x_5372) -> A_5371,
  ∀ {A_5374 : Type‹s_3956›} ->
    ∀ {x_5375 : A_5374} -> (sing_3‹s_3956,L› A_5374 x_5375) -> A_5374)
simpl_tm ~expand:false( Type‹s_3956›, Type‹s_3956›)
simpl_tm ~expand:false(
  ∀ {x_5378 : A_5377} -> (sing_3‹s_3956,L› A_5377 x_5378) -> A_5377,
  ∀ {x_5380 : A_5377} -> (sing_3‹s_3956,L› A_5377 x_5380) -> A_5377)
simpl_tm ~expand:false( A_5377, A_5377)
simpl_tm ~expand:false( (sing_3‹s_3956,L› A_5377 x_5382) -> A_5377,
  (sing_3‹s_3956,L› A_5377 x_5382) -> A_5377)
simpl_tm ~expand:false( (sing_3‹s_3956,L› A_5377 x_5382),
  (sing_3‹s_3956,L› A_5377 x_5382))
simpl_tm ~expand:false( A_5377, A_5377)
simpl_tm ~expand:false( x_5382, x_5382)
simpl_tm ~expand:false( A_5377, A_5377)
simpl_tm ~expand:false( m_5388, m_5388)
simpl_tm ~expand:false( A_4211, A_4211)
simpl_tm ~expand:false( x_4215, x_4215)
simpl_tm ~expand:false( ((select_4216) true_5), ((select_4216) true_5))
simpl_tm ~expand:false( select_4216, select_4216)
simpl_tm ~expand:false( true_5, true_5)
attempt_delay(?_34[3;3] : ?_35[3;3] -> Type‹??_47›)
resolve_ctx_ok
resolve_env_ok
assert_type(A_4041 -> Type‹r_3957›)
infer_tm(A_4041 -> Type‹r_3957›)
assert_type(A_4041)
infer_tm(A_4041)
assert_type_ok(A_4041, Type‹s_3956›)
assert_type(Type‹r_3957›)
infer_tm(Type‹r_3957›)
assert_type_ok(Type‹r_3957›, U)
assert_type_ok(A_4041 -> Type‹r_3957›, U)
check_tm( B_4048, A_4041 -> Type‹r_3957›)
infer_tm(B_4048)
assert_equal1( A_4041 -> Type‹r_3957›, A_4041 -> Type‹r_3957›)
assert_equal1_ok( A_4041 -> Type‹r_3957›, A_4041 -> Type‹r_3957›)
attempt_delay(?_35[3;3] : Type‹??_46›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_3956›)
infer_tm(Type‹s_3956›)
assert_type_ok(Type‹s_3956›, U)
check_tm( A_4041, Type‹s_3956›)
infer_tm(A_4041)
assert_equal1( Type‹s_3956›, Type‹s_3956›)
assert_equal1_ok( Type‹s_3956›, Type‹s_3956›)
attempt_delay(?_36[3;6] : ?_37[3;6])
resolve_ctx_ok
resolve_env_ok
assert_type(A_4211)
infer_tm(A_4211)
assert_type_ok(A_4211, Type‹s_3956›)
check_tm( x_4215, A_4211)
infer_tm(x_4215)
assert_equal1( A_4211, A_4211)
assert_equal1_ok( A_4211, A_4211)
attempt_delay(?_37[3;6] : Type‹??_49›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_3956›)
infer_tm(Type‹s_3956›)
assert_type_ok(Type‹s_3956›, U)
check_tm( A_4211, Type‹s_3956›)
infer_tm(A_4211)
assert_equal1( Type‹s_3956›, Type‹s_3956›)
assert_equal1_ok( Type‹s_3956›, Type‹s_3956›)
attempt_delay(?_38[3;6] : ?_86[3;6])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_99›)
infer_tm(Type‹??_99›)
assert_type_ok(Type‹??_99›, U)
check_tm( A_4211, Type‹??_99›)
infer_tm(A_4211)
assert_equal1( Type‹??_99›, Type‹s_3956›)
assert_equal1_extend( Type‹??_99›, Type‹s_3956›)
simpl_tm ~expand:false( Type‹??_99›, Type‹s_3956›)
attempt_delay(?_39[3;7] : Type‹??_51›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_3956›)
infer_tm(Type‹s_3956›)
assert_type_ok(Type‹s_3956›, U)
check_tm( A_4211, Type‹s_3956›)
infer_tm(A_4211)
assert_equal1( Type‹s_3956›, Type‹s_3956›)
assert_equal1_ok( Type‹s_3956›, Type‹s_3956›)
attempt_delay(?_40[3;8] : ?_41[3;8])
resolve_ctx_ok
resolve_env_ok
assert_type(A_4211)
infer_tm(A_4211)
assert_type_ok(A_4211, Type‹s_3956›)
check_tm( x_4215, A_4211)
infer_tm(x_4215)
assert_equal1( A_4211, A_4211)
assert_equal1_ok( A_4211, A_4211)
attempt_delay(?_41[3;8] : Type‹??_53›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_3956›)
infer_tm(Type‹s_3956›)
assert_type_ok(Type‹s_3956›, U)
check_tm( A_4211, Type‹s_3956›)
infer_tm(A_4211)
assert_equal1( Type‹s_3956›, Type‹s_3956›)
assert_equal1_ok( Type‹s_3956›, Type‹s_3956›)
attempt_delay(?_42[3;8] : Type‹??_55›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_3956›)
infer_tm(Type‹s_3956›)
assert_type_ok(Type‹s_3956›, U)
check_tm( A_4211, Type‹s_3956›)
infer_tm(A_4211)
assert_equal1( Type‹s_3956›, Type‹s_3956›)
assert_equal1_ok( Type‹s_3956›, Type‹s_3956›)
attempt_delay(?_43[3;10] : ?_44[3;10])
resolve_ctx_ok
resolve_env_ok
assert_type(A_4211)
infer_tm(A_4211)
assert_type_ok(A_4211, Type‹s_3956›)
check_tm( x_4215, A_4211)
infer_tm(x_4215)
assert_equal1( A_4211, A_4211)
assert_equal1_ok( A_4211, A_4211)
attempt_delay(?_44[3;10] : Type‹??_57›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_3956›)
infer_tm(Type‹s_3956›)
assert_type_ok(Type‹s_3956›, U)
check_tm( A_4211, Type‹s_3956›)
infer_tm(A_4211)
assert_equal1( Type‹s_3956›, Type‹s_3956›)
assert_equal1_ok( Type‹s_3956›, Type‹s_3956›)
attempt_delay(?_45[3;3] : ?_46[3;3] -> Type‹??_60›)
resolve_ctx_ok
resolve_env_ok
assert_type(A_3967 -> Type‹r_3957›)
infer_tm(A_3967 -> Type‹r_3957›)
assert_type(A_3967)
infer_tm(A_3967)
assert_type_ok(A_3967, Type‹s_3956›)
assert_type(Type‹r_3957›)
infer_tm(Type‹r_3957›)
assert_type_ok(Type‹r_3957›, U)
assert_type_ok(A_3967 -> Type‹r_3957›, U)
check_tm( B_3974, A_3967 -> Type‹r_3957›)
infer_tm(B_3974)
assert_equal1( A_3967 -> Type‹r_3957›, A_3967 -> Type‹r_3957›)
assert_equal1_ok( A_3967 -> Type‹r_3957›, A_3967 -> Type‹r_3957›)
attempt_delay(?_46[3;3] : Type‹??_59›)
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹s_3956›)
infer_tm(Type‹s_3956›)
assert_type_ok(Type‹s_3956›, U)
check_tm( A_3967, Type‹s_3956›)
infer_tm(A_3967)
assert_equal1( Type‹s_3956›, Type‹s_3956›)
assert_equal1_ok( Type‹s_3956›, Type‹s_3956›)
----------------------------------

definition-------------------------
assert_type((apair_10‹??_68,??_69,U›
              ?_56[0;0]
              function _6089 : nat_8 -> ?_53[0;0]
              | n_6091 =>
                match n_6091 in ?_54[0;0] -o ?_55[0;0] with
                | zero_10 => ((stream_3‹??_70›) nat_8)
                | (succ_11 _6093) => unit_4‹L›))
infer_tm((apair_10‹??_68,??_69,U›
           ?_56[0;0]
           function _6094 : nat_8 -> ?_53[0;0]
           | n_6096 =>
             match n_6096 in ?_54[0;0] -o ?_55[0;0] with
             | zero_10 => ((stream_3‹??_70›) nat_8)
             | (succ_11 _6098) => unit_4‹L›))
check_tm( ?_56[0;0], Type‹??_68›)
check_tm(
  function _6099 : nat_8 -> ?_53[0;0]
  | n_6101 =>
    match n_6101 in ?_54[0;0] -o ?_55[0;0] with
    | zero_10 => ((stream_3‹??_70›) nat_8)
    | (succ_11 _6103) => unit_4‹L›,
  ?_56[0;0] -> Type‹??_69›)
assert_type(nat_8 -> ?_53[0;0])
infer_tm(nat_8 -> ?_53[0;0])
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(?_53[0;0])
infer_tm(?_53[0;0])
assert_type_ok(?_53[0;0], ?_87[0;1])
delay_assert(?_87[0;1], ??_100)
assert_type_ok(nat_8 -> ?_53[0;0], U)
simpl_tm ~expand:false( ?_87[0;1], Type‹??_100›)
assert_equal1( ?_56[0;0] -> Type‹??_69›,
  ∀ (n_6111 : nat_8) -> ?_53[0;1])
assert_equal1_extend( ?_56[0;0] -> Type‹??_69›,
  ∀ (n_6113 : nat_8) -> ?_53[0;1])
simpl_tm ~expand:false( ?_56[0;0] -> Type‹??_69›,
  ∀ (n_6118 : nat_8) -> ?_53[0;1])
simpl_tm ~expand:false( ?_56[0;0], nat_8)
simpl_tm ~expand:false( Type‹??_69›, ?_53[0;1])
simpl_tm ~expand:false( Type‹??_69›, ?_53[0;1])
check_cls {|
  prblm {| ;
    {|  ::: [n_6114] =>?
         match #n_6114 in ?_54[0;0] -o ?_55[0;0] with
         | zero_10 => ((stream_3‹??_70›) nat_8)
         | (succ_11 _6122) => unit_4‹L›
    |}
  |}
  a := nat_8 -> Type‹??_69›
|}
case_intro(__6124 : nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__6124, n_6114 : nat_8) ::: [] =>?
         match #n_6114 in ?_54[0;0] -o ?_55[0;0] with
         | zero_10 => ((stream_3‹??_70›) nat_8)
         | (succ_11 _6126) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?( #__6124, n_6114 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #__6124, #n_6114)
local_map solved
global_map solved
case_coverage_ok(
  match __6124 in ?_54[0;0] -o ?_55[0;0] with
  | zero_10 => ((stream_3‹??_70›) nat_8)
  | (succ_11 _6131) => unit_4‹L›, Type‹??_69›)
check_tm(
  match __6124 in ?_54[0;0] -o ?_55[0;0] with
  | zero_10 => ((stream_3‹??_70›) nat_8)
  | (succ_11 _6133) => unit_4‹L›, Type‹??_69›)
infer_tm(match __6124 in ?_54[0;0] -o ?_55[0;0] with
         | zero_10 => ((stream_3‹??_70›) nat_8)
         | (succ_11 _6135) => unit_4‹L›)
assert_type(?_54[0;0])
infer_tm(?_54[0;0])
assert_type_ok(?_54[0;0], ?_88[0;2])
delay_assert(?_88[0;2], ??_101)
assert_type(?_54[0;0])
infer_tm(?_54[0;0])
assert_type_ok(?_54[0;0], ?_88[0;2])
simpl_tm ~expand:false( ?_88[0;2], Type‹??_101›)
check_tm( __6124, ?_54[0;2])
infer_tm(__6124)
assert_equal1( ?_54[0;2], nat_8)
assert_equal1_extend( ?_54[0;2], nat_8)
assert_type(?_55[0;0])
infer_tm(?_55[0;0])
assert_type_ok(?_55[0;0], ?_89[0;3])
simpl_tm ~expand:false( ?_54[0;2], nat_8)
delay_assert(?_89[0;3], ??_102)
assert_type(?_55[0;0])
infer_tm(?_55[0;0])
assert_type_ok(?_55[0;0], ?_89[0;3])
simpl_tm ~expand:false( ?_89[0;3], Type‹??_102›)
check_cls {|
  prblm {| ;
    {|  ::: [zero_10] =>? ((stream_3‹??_70›) nat_8) |}
    {|  ::: [(succ_11 _6142)] =>? unit_4‹L› |}
  |}
  a := ∀ (_6146 : nat_8) -o ?_55[0;3]
|}
case_intro(_6147 : nat_8)
splitting_on(zero_10)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹??_70›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( ((stream_3‹??_70›) nat_8), ?_55[0;3])
check_tm( ((stream_3‹??_70›) nat_8), ?_55[0;3])
infer_tm(((stream_3‹??_70›) nat_8))
infer_tm(stream_3‹??_70›)
check_tm( nat_8, Type‹??_70›)
infer_tm(nat_8)
assert_equal1( Type‹??_70›, U)
assert_equal1_extend( Type‹??_70›, U)
assert_equal1( ?_55[0;3], L)
assert_equal1_extend( ?_55[0;3], L)
splitting_on(succ_11)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?( #__6151, _6142 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?( #__6151, _6142 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__6151, #_6142)
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( unit_4‹L›, ?_55[0;3])
check_tm( unit_4‹L›, ?_55[0;3])
infer_tm(unit_4‹L›)
assert_equal1( ?_55[0;3], L)
assert_equal1_extend( ?_55[0;3], L)
assert_equal1( Type‹??_69›, ?_55[0;3])
assert_equal1_extend( Type‹??_69›, ?_55[0;3])
assert_type_ok((apair_10‹??_68,??_69,U›
                 ?_56[0;0]
                 function _6154 : nat_8 -> ?_53[0;0]
                 | n_6156 =>
                   match n_6156 in ?_54[0;0] -o ?_55[0;0] with
                   | zero_10 => ((stream_3‹??_70›) nat_8)
                   | (succ_11 _6158) => unit_4‹L›), U)
simpl_tm ~expand:false( Type‹??_69›, ?_55[0;3])
simpl_tm ~expand:false( Type‹??_69›, L)
simpl_tm ~expand:false( L, L)
simpl_tm ~expand:false( Type‹??_70›, U)
check_tm(
  (apair_intro_13‹??_65,??_66,??_67›
    ?_51[0;0] ?_52[0;0] ?_50[0;0]
    function _6165 : ?_47[0;0]
    | true_5 => (just_3‹??_62,??_63› ?_48[0;0] zero_10)
    | false_6 => (box_2‹??_64› ?_49[0;0] ((nat_make_6) zero_10))),
  (apair_10‹??_68,??_69,U›
    ?_56[0;0]
    function _6166 : ∀ (n_6167 : nat_8) -> ?_53[0;1]
    | __6168 =>
      match __6168 in ∀ (_6169 : ?_54[0;2]) -o ?_55[0;3] with
      | zero_10 => ((stream_3‹??_70›) nat_8)
      | (succ_11 __6170) => unit_4‹L›))
infer_tm((apair_intro_13‹??_65,??_66,??_67›
           ?_51[0;0] ?_52[0;0] ?_50[0;0]
           function _6171 : ?_47[0;0]
           | true_5 => (just_3‹??_62,??_63› ?_48[0;0] zero_10)
           | false_6 => (box_2‹??_64› ?_49[0;0] ((nat_make_6) zero_10))))
check_tm( ?_51[0;0], Type‹??_65›)
check_tm( ?_52[0;0], ?_51[0;0] -> Type‹??_66›)
check_tm( ?_50[0;0], ?_51[0;0])
check_tm(
  function _6173 : ?_47[0;0]
  | true_5 => (just_3‹??_62,??_63› ?_48[0;0] zero_10)
  | false_6 => (box_2‹??_64› ?_49[0;0] ((nat_make_6) zero_10)),
  forall‹??_67›(b_6174 : bool_5),
    match b_6174 in bool_5 -o L with
    | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
    | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])))
assert_type(?_47[0;0])
infer_tm(?_47[0;0])
assert_type_ok(?_47[0;0], ?_90[0;0])
delay_assert(?_90[0;0], ??_103)
assert_equal1(
  forall‹??_67›(b_6177 : bool_5),
    match b_6177 in bool_5 -o L with
    | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
    | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])),
  ?_47[0;0])
assert_equal1_extend(
  forall‹??_67›(b_6179 : bool_5),
    match b_6179 in bool_5 -o L with
    | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
    | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])),
  ?_47[0;0])
simpl_tm ~expand:false(
  forall‹??_67›(b_6183 : bool_5),
    match b_6183 in bool_5 -o L with
    | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
    | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])),
  ?_47[0;0])
simpl_tm ~expand:false( ?_90[0;0], Type‹??_103›)
check_cls {|
  prblm {| ;
    {|  ::: [true_5] =>? (just_3‹??_62,??_63› ?_48[0;0] zero_10) |}
    {|  ::: [false_6] =>? (box_2‹??_64› ?_49[0;0] ((nat_make_6) zero_10))
    |}
  |}
  a := forall‹??_67›(b_6189 : bool_5),
         match b_6189 in bool_5 -o L with
         | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
         | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0]))
|}
case_intro(b_6191 : bool_5)
splitting_on(true_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (just_3‹??_62,??_63› ?_48[0;0] zero_10) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
local_map solved
simpl_pprbm ~expand:false( bool_5, bool_5)
global_map solved
case_coverage_ok( (just_3‹??_62,??_63› ?_48[0;0] zero_10),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
  | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])))
check_tm( (just_3‹??_62,??_63› ?_48[0;0] zero_10),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
  | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])))
infer_tm((just_3‹??_62,??_63› ?_48[0;0] zero_10))
check_tm( ?_48[0;0], Type‹??_62›)
check_tm( zero_10, ?_48[0;2])
infer_tm(zero_10)
assert_equal1( ?_48[0;2], nat_8)
assert_equal1_extend( ?_48[0;2], nat_8)
assert_equal1(
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
  | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])),
  (sing_3‹??_62,??_63› ?_48[0;2] zero_10))
assert_equal1_extend(
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
  | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])),
  (sing_3‹??_62,??_63› ?_48[0;2] zero_10))
splitting_on(false_6)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (box_2‹??_64› ?_49[0;0] ((nat_make_6) zero_10)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
local_map solved
simpl_pprbm ~expand:false( bool_5, bool_5)
global_map solved
case_coverage_ok( (box_2‹??_64› ?_49[0;0] ((nat_make_6) zero_10)),
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
  | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])))
check_tm( (box_2‹??_64› ?_49[0;0] ((nat_make_6) zero_10)),
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
  | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])))
infer_tm((box_2‹??_64› ?_49[0;0] ((nat_make_6) zero_10)))
check_tm( ?_49[0;0], Type‹??_64›)
check_tm( ((nat_make_6) zero_10), ?_49[0;2])
infer_tm(((nat_make_6) zero_10))
infer_tm(nat_make_6)
simpl_tm ~expand:false( (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0]),
  (sing_3‹??_62,??_63› ?_48[0;2] zero_10))
simpl_tm ~expand:false( ?_51[0;0], ?_48[0;2])
simpl_tm ~expand:false( ?_50[0;0], zero_10)
simpl_tm ~expand:false( ?_48[0;2], ?_51[0;0])
simpl_tm ~expand:false( zero_10, ?_50[0;0])
simpl_tm ~expand:false( ?_48[0;2], nat_8)
check_tm( zero_10, nat_8)
infer_tm(zero_10)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_equal1( ?_49[0;2], ((stream_3‹U›) nat_8))
assert_equal1_extend( ?_49[0;2], ((stream_3‹U›) nat_8))
assert_equal1(
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
  | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])),
  (boxed_2‹??_64› ?_49[0;2]))
assert_equal1_extend(
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
  | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])),
  (boxed_2‹??_64› ?_49[0;2]))
assert_equal1(
  (apair_10‹??_68,??_69,U›
    ?_56[0;0]
    function _6214 : ∀ (n_6215 : nat_8) -> ?_53[0;1]
    | __6216 =>
      match __6216 in ∀ (_6217 : ?_54[0;2]) -o ?_55[0;3] with
      | zero_10 => ((stream_3‹??_70›) nat_8)
      | (succ_11 __6218) => unit_4‹L›),
  (apair_10‹??_65,??_66,??_67› ?_51[0;0] ?_52[0;0]))
assert_equal1_extend(
  (apair_10‹??_68,??_69,U›
    ?_56[0;0]
    function _6219 : ∀ (n_6220 : nat_8) -> ?_53[0;1]
    | __6221 =>
      match __6221 in ∀ (_6222 : ?_54[0;2]) -o ?_55[0;3] with
      | zero_10 => ((stream_3‹??_70›) nat_8)
      | (succ_11 __6223) => unit_4‹L›),
  (apair_10‹??_65,??_66,??_67› ?_51[0;0] ?_52[0;0]))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_6224
    ??_2 <= s_6225
    ??_3 <= s_6227
    ??_4 <= t_6228
    ??_5 <= s_6230
    ??_6 <= s_6233
    ??_7 <= r_6235
    ??_8 <= t_6237
    ??_9 <= s_6241
    ??_10 <= t_6242
    ??_11 <= s_6245
    ??_12 <= ??_11
    ??_13 <= s_6249
    ??_14 <= t_6250
    ??_15 <= ??_11
    ??_16 <= s_6254
    ??_17 <= L
    ??_18 <= s_6256
    ??_19 <= s_6257
    ??_20 <= L
    ??_21 <= s_6259
    ??_22 <= U
    ??_23 <= s_6261
    ??_24 <= s_6262
    ??_25 <= s_6263
    ??_26 <= L
    ??_27 <= s_6265
    ??_28 <= s_6266
    ??_29 <= L
    ??_30 <= L
    ??_31 <= s_6269
    ??_32 <= s_6270
    ??_33 <= L
    ??_34 <= s_6272
    ??_35 <= U
    ??_36 <= U
    ??_37 <= L
    ??_38 <= U
    ??_39 <= s_6275
    ??_40 <= r_6277
    ??_41 <= s_6281
    ??_42 <= r_6283
    ??_43 <= t_6285
    ??_44 <= s_6290
    ??_45 <= L
    ??_46 <= s_6296
    ??_47 <= r_6298
    ??_48 <= t_6300
    ??_49 <= s_6305
    ??_50 <= L
    ??_51 <= s_6311
    ??_52 <= L
    ??_53 <= s_6317
    ??_54 <= L
    ??_55 <= ??_49
    ??_56 <= r_6325
    ??_57 <= s_6329
    ??_58 <= L
    ??_59 <= s_6335
    ??_60 <= r_6337
    ??_61 <= t_6339
    ??_63 <= L
    ??_65 <= ??_62
    ??_69 <= L
    ??_70 <= U
    ??_87 <= L
    ??_88 <= U
    ??_89 <= U
    ??_90 <= U
    ??_91 <= L
    ??_92 <= U
    ??_93 <= L
    ??_94 <= U
    ??_95 <= L
    ??_96 <= L
    ??_97 <= U
    ??_98 <= U
    ??_99 <= s_6360
    
  |}
  imeta_meta {|
    ?_1 <= A_6363
    ?_2 <= A_6367
    ?_3 <= A_6371
    ?_4 <= A_6375
    ?_5 <= A_6379
    ?_6 <= x0_6383
    ?_7 <= A_6389
    ?_8 <= A_6394
    ?_9 <= A_6400
    ?_10 <= m_6404
    ?_11 <= A_6412
    ?_12 <= x0_6416
    ?_13 <= A_6422
    ?_14 <= A_6427
    ?_15 <= choice_6
    ?_16 <= Type‹??_17›
    ?_17 <= L
    ?_18 <= choice_6
    ?_19 <= Type‹??_20›
    ?_20 <= ?_17[1;1]
    ?_21 <= unit_4‹L›
    ?_22 <= unit_4‹U›
    ?_23 <= A_6464
    ?_24 <= ((stream_3‹s_6466›) A_6471)
    ?_25 <= (prod_7‹s_6473,L,L› A_6476 ((stream_3‹s_6473›) A_6476))
    ?_26 <= (stream_node_9‹s_6478› A_6480)
    ?_27 <= nat_8
    ?_28 <= bool_5
    ?_29 <= L
    ?_30 <= A_6507
    ?_31 <= A_6514
    ?_32 <= x_6519
    ?_33 <= A_6531
    ?_34 <= B_6537
    ?_35 <= A_6544
    ?_36 <= x_6549
    ?_37 <= A_6561
    ?_38 <= A_6570
    ?_39 <= A_6580
    ?_40 <= x_6588
    ?_41 <= A_6602
    ?_42 <= A_6613
    ?_43 <= x_6623
    ?_44 <= A_6639
    ?_45 <= B_6645
    ?_46 <= A_6652
    ?_47 <= forall‹??_67›(b_6653 : bool_5),
              match b_6653 in bool_5 -o L with
              | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
              | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0]))
    ?_48 <= nat_8
    ?_50 <= zero_10
    ?_51 <= ?_48[0;2]
    ?_53 <= Type‹??_69›
    ?_54 <= nat_8
    ?_55 <= Type‹??_69›
    ?_56 <= nat_8
    ?_74 <= Type‹??_87›
    ?_75 <= Type‹??_88›
    ?_76 <= Type‹??_89›
    ?_77 <= Type‹??_90›
    ?_78 <= Type‹??_91›
    ?_79 <= Type‹??_92›
    ?_80 <= Type‹??_93›
    ?_81 <= Type‹??_94›
    ?_82 <= Type‹??_95›
    ?_83 <= Type‹??_96›
    ?_84 <= Type‹??_97›
    ?_85 <= Type‹??_98›
    ?_86 <= Type‹??_99›
    ?_87 <= Type‹??_100›
    ?_88 <= Type‹??_101›
    ?_89 <= Type‹??_102›
    ?_90 <= Type‹??_103›
    
  |}
  eqns {|
    equal_tm?
      ((apair_10‹??_68,??_69,U›
         ?_56[0;0]
         function _6733 : ∀ (n_6734 : nat_8) -> ?_53[0;1]
         | __6735 =>
           match __6735 in ∀ (_6736 : ?_54[0;2]) -o ?_55[0;3] with
           | zero_10 => ((stream_3‹??_70›) nat_8)
           | (succ_11 __6737) => unit_4‹L›),
      (apair_10‹??_65,??_66,??_67› ?_51[0;0] ?_52[0;0]));
    equal_tm?
      (match false_6 in bool_5 -o L with
       | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
       | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0])),
      (boxed_2‹??_64› ?_49[0;2]));
    equal_tm? (?_49[0;2], ((stream_3‹U›) nat_8))
  |}
end_dump
simpl_tm ~expand:false(
  (apair_10‹??_68,L,U›
    nat_8
    function _6752 : nat_8 -> L
    | __6754 =>
      match __6754 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __6756) => unit_4‹L›),
  (apair_10‹??_62,??_66,??_67› nat_8 ?_52[0;0]))
simpl_tm ~expand:false( nat_8, nat_8)
simpl_tm ~expand:false(
  function _6757 : nat_8 -> L
  | __6759 =>
    match __6759 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __6761) => unit_4‹L›,
  ?_52[0;0])
simpl_tm ~expand:false(
  function _6767 : nat_8 -> L
  | __6769 =>
    match __6769 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __6771) => unit_4‹L›,
  ?_52[0;0])
simpl_tm ~expand:false(
  (boxed_2‹L›
    ((function _6785 : nat_8 -> L
      | __6787 =>
        match __6787 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __6789) => unit_4‹L›)
      zero_10)),
  (boxed_2‹??_64› ?_49[0;2]))
simpl_tm ~expand:false( ((stream_3‹U›) nat_8), ?_49[0;2])
simpl_tm ~expand:false( ((stream_3‹U›) nat_8), ?_49[0;2])
simpl_tm ~expand:false( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
simpl_tm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_tm ~expand:false( nat_8, nat_8)
attempt_delay(?_47[0;0] : ?_90[0;0])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_103›)
infer_tm(Type‹??_103›)
assert_type_ok(Type‹??_103›, U)
check_tm(
  ∀ (b_6801 : bool_5) ->
    match b_6801 in bool_5 -o L with
    | true_5 => (sing_3‹??_62,L› nat_8 zero_10)
    | false_6 =>
      (boxed_2‹L›
        ((function _6803 : nat_8 -> L
          | __6805 =>
            match __6805 in nat_8 -o L with
            | zero_10 => ((stream_3‹U›) nat_8)
            | (succ_11 __6807) => unit_4‹L›)
          zero_10)),
  Type‹??_103›)
infer_tm(∀ (b_6808 : bool_5) ->
           match b_6808 in bool_5 -o L with
           | true_5 => (sing_3‹??_62,L› nat_8 zero_10)
           | false_6 =>
             (boxed_2‹L›
               ((function _6810 : nat_8 -> L
                 | __6812 =>
                   match __6812 in nat_8 -o L with
                   | zero_10 => ((stream_3‹U›) nat_8)
                   | (succ_11 __6814) => unit_4‹L›)
                 zero_10)))
assert_type(bool_5)
infer_tm(bool_5)
assert_type_ok(bool_5, U)
assert_type(match b_6815 in bool_5 -o L with
            | true_5 => (sing_3‹??_62,L› nat_8 zero_10)
            | false_6 =>
              (boxed_2‹L›
                ((function _6817 : nat_8 -> L
                  | __6819 =>
                    match __6819 in nat_8 -o L with
                    | zero_10 => ((stream_3‹U›) nat_8)
                    | (succ_11 __6821) => unit_4‹L›)
                  zero_10)))
infer_tm(match b_6815 in bool_5 -o L with
         | true_5 => (sing_3‹??_62,L› nat_8 zero_10)
         | false_6 =>
           (boxed_2‹L›
             ((function _6823 : nat_8 -> L
               | __6825 =>
                 match __6825 in nat_8 -o L with
                 | zero_10 => ((stream_3‹U›) nat_8)
                 | (succ_11 __6827) => unit_4‹L›)
               zero_10)))
assert_type(bool_5)
infer_tm(bool_5)
assert_type_ok(bool_5, U)
assert_type(bool_5)
infer_tm(bool_5)
assert_type_ok(bool_5, U)
check_tm( b_6815, bool_5)
infer_tm(b_6815)
assert_equal1( bool_5, bool_5)
assert_equal1_ok( bool_5, bool_5)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
check_cls {|
  prblm {| ;
    {|  ::: [true_5] =>? (sing_3‹??_62,L› nat_8 zero_10) |}
    {|  ::: [false_6] =>?
         (boxed_2‹L›
           ((function _6830 : nat_8 -> L
             | __6832 =>
               match __6832 in nat_8 -o L with
               | zero_10 => ((stream_3‹U›) nat_8)
               | (succ_11 __6834) => unit_4‹L›)
             zero_10))
    |}
  |}
  a := bool_5 -o L
|}
case_intro(_6836 : bool_5)
splitting_on(true_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹??_62,L› nat_8 zero_10) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
local_map solved
simpl_pprbm ~expand:false( bool_5, bool_5)
global_map solved
case_coverage_ok( (sing_3‹??_62,L› nat_8 zero_10), L)
check_tm( (sing_3‹??_62,L› nat_8 zero_10), L)
infer_tm((sing_3‹??_62,L› nat_8 zero_10))
check_tm( nat_8, Type‹??_62›)
infer_tm(nat_8)
assert_equal1( Type‹??_62›, U)
assert_equal1_extend( Type‹??_62›, U)
check_tm( zero_10, nat_8)
infer_tm(zero_10)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_equal1( L, L)
assert_equal1_ok( L, L)
splitting_on(false_6)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>?
         (boxed_2‹L›
           ((function _6837 : nat_8 -> L
             | __6839 =>
               match __6839 in nat_8 -o L with
               | zero_10 => ((stream_3‹U›) nat_8)
               | (succ_11 __6841) => unit_4‹L›)
             zero_10))
    |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
local_map solved
simpl_pprbm ~expand:false( bool_5, bool_5)
global_map solved
case_coverage_ok(
  (boxed_2‹L›
    ((function _6847 : nat_8 -> L
      | __6849 =>
        match __6849 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __6851) => unit_4‹L›)
      zero_10)),
  L)
check_tm(
  (boxed_2‹L›
    ((function _6852 : nat_8 -> L
      | __6854 =>
        match __6854 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __6856) => unit_4‹L›)
      zero_10)),
  L)
infer_tm((boxed_2‹L›
           ((function _6857 : nat_8 -> L
             | __6859 =>
               match __6859 in nat_8 -o L with
               | zero_10 => ((stream_3‹U›) nat_8)
               | (succ_11 __6861) => unit_4‹L›)
             zero_10)))
check_tm(
  ((function _6862 : nat_8 -> L
    | __6864 =>
      match __6864 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __6866) => unit_4‹L›)
    zero_10),
  L)
infer_tm(((function _6867 : nat_8 -> L
           | __6869 =>
             match __6869 in nat_8 -o L with
             | zero_10 => ((stream_3‹U›) nat_8)
             | (succ_11 __6871) => unit_4‹L›)
           zero_10))
infer_tm(function _6872 : nat_8 -> L
         | __6874 =>
           match __6874 in nat_8 -o L with
           | zero_10 => ((stream_3‹U›) nat_8)
           | (succ_11 __6876) => unit_4‹L›)
assert_type(nat_8 -> L)
infer_tm(nat_8 -> L)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
simpl_tm ~expand:false( Type‹??_62›, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type_ok(nat_8 -> L, U)
check_cls {|
  prblm {| ;
    {|  ::: [__6882] =>?
         match #__6882 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __6885) => unit_4‹L›
    |}
  |}
  a := nat_8 -> L
|}
case_intro(n_6887 : nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #n_6887, __6882 : nat_8) ::: [] =>?
         match #__6882 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __6889) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?( #n_6887, __6882 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #n_6887, #__6882)
local_map solved
global_map solved
case_coverage_ok(
  match n_6887 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __6894) => unit_4‹L›, L)
check_tm(
  match n_6887 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __6896) => unit_4‹L›, L)
infer_tm(match n_6887 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __6898) => unit_4‹L›)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_tm( n_6887, nat_8)
infer_tm(n_6887)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
check_cls {|
  prblm {| ;
    {|  ::: [zero_10] =>? ((stream_3‹U›) nat_8) |}
    {|  ::: [(succ_11 __6900)] =>? unit_4‹L› |}
  |}
  a := nat_8 -o L
|}
case_intro(_6903 : nat_8)
splitting_on(zero_10)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( ((stream_3‹U›) nat_8), L)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
splitting_on(succ_11)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?( #__6907, __6900 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?( #__6907, __6900 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__6907, #__6900)
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( unit_4‹L›, L)
check_tm( unit_4‹L›, L)
infer_tm(unit_4‹L›)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_equal1( L, L)
assert_equal1_ok( L, L)
check_tm( zero_10, nat_8)
infer_tm(zero_10)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_type_ok(match b_6815 in bool_5 -o L with
               | true_5 => (sing_3‹??_62,L› nat_8 zero_10)
               | false_6 =>
                 (boxed_2‹L›
                   ((function _6912 : nat_8 -> L
                     | __6914 =>
                       match __6914 in nat_8 -o L with
                       | zero_10 => ((stream_3‹U›) nat_8)
                       | (succ_11 __6916) => unit_4‹L›)
                     zero_10)), L)
assert_equal1( Type‹??_103›, U)
assert_equal1_extend( Type‹??_103›, U)
simpl_tm ~expand:false( Type‹??_103›, U)
attempt_delay(?_48[0;2] : Type‹??_62›)
resolve_ctx_ok
resolve_env_ok
assert_type(U)
infer_tm(U)
assert_type_ok(U, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
attempt_delay(?_49[0;2] : Type‹??_64›)
resolve_ctx_ok
resolve_env_ok
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
attempt_delay(?_50[0;0] : ?_51[0;0])
resolve_ctx_ok
resolve_env_ok
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_tm( zero_10, nat_8)
infer_tm(zero_10)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
attempt_delay(?_51[0;0] : Type‹??_65›)
resolve_ctx_ok
resolve_env_ok
assert_type(U)
infer_tm(U)
assert_type_ok(U, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
attempt_delay(?_52[0;0] : ?_51[0;0] -> Type‹??_66›)
resolve_ctx_ok
resolve_env_ok
assert_type(nat_8 -> L)
infer_tm(nat_8 -> L)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type_ok(nat_8 -> L, U)
check_tm(
  function _6957 : nat_8 -> L
  | __6959 =>
    match __6959 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __6961) => unit_4‹L›,
  nat_8 -> L)
assert_type(nat_8 -> L)
infer_tm(nat_8 -> L)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type_ok(nat_8 -> L, U)
assert_equal1( nat_8 -> L, nat_8 -> L)
assert_equal1_ok( nat_8 -> L, nat_8 -> L)
check_cls {|
  prblm {| ;
    {|  ::: [__6973] =>?
         match #__6973 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __6976) => unit_4‹L›
    |}
  |}
  a := nat_8 -> L
|}
case_intro(__6978 : nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__6978, __6973 : nat_8) ::: [] =>?
         match #__6973 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __6980) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?( #__6978, __6973 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #__6978, #__6973)
local_map solved
global_map solved
case_coverage_ok(
  match __6978 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __6985) => unit_4‹L›, L)
check_tm(
  match __6978 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __6987) => unit_4‹L›, L)
infer_tm(match __6978 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __6989) => unit_4‹L›)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_tm( __6978, nat_8)
infer_tm(__6978)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
check_cls {|
  prblm {| ;
    {|  ::: [zero_10] =>? ((stream_3‹U›) nat_8) |}
    {|  ::: [(succ_11 __6991)] =>? unit_4‹L› |}
  |}
  a := nat_8 -o L
|}
case_intro(_6994 : nat_8)
splitting_on(zero_10)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( ((stream_3‹U›) nat_8), L)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
splitting_on(succ_11)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?( #__6998, __6991 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?( #__6998, __6991 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__6998, #__6991)
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( unit_4‹L›, L)
check_tm( unit_4‹L›, L)
infer_tm(unit_4‹L›)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_equal1( L, L)
assert_equal1_ok( L, L)
attempt_delay(?_53[0;1] : ?_87[0;1])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_100›)
infer_tm(Type‹??_100›)
assert_type_ok(Type‹??_100›, U)
check_tm( L, Type‹??_100›)
infer_tm(L)
assert_equal1( Type‹??_100›, U)
assert_equal1_extend( Type‹??_100›, U)
simpl_tm ~expand:false( Type‹??_100›, U)
attempt_delay(?_54[0;2] : ?_88[0;2])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_101›)
infer_tm(Type‹??_101›)
assert_type_ok(Type‹??_101›, U)
check_tm( nat_8, Type‹??_101›)
infer_tm(nat_8)
assert_equal1( Type‹??_101›, U)
assert_equal1_extend( Type‹??_101›, U)
simpl_tm ~expand:false( Type‹??_101›, U)
attempt_delay(?_55[0;3] : ?_89[0;3])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_102›)
infer_tm(Type‹??_102›)
assert_type_ok(Type‹??_102›, U)
check_tm( L, Type‹??_102›)
infer_tm(L)
assert_equal1( Type‹??_102›, U)
assert_equal1_extend( Type‹??_102›, U)
simpl_tm ~expand:false( Type‹??_102›, U)
attempt_delay(?_56[0;0] : Type‹??_68›)
resolve_ctx_ok
resolve_env_ok
assert_type(U)
infer_tm(U)
assert_type_ok(U, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
----------------------------------

definition-------------------------
assert_type((apair_10‹??_79,??_80,L›
              ?_70[0;0]
              function _7049 : nat_8 -> ?_67[0;0]
              | n_7051 =>
                match n_7051 in ?_68[0;0] -o ?_69[0;0] with
                | zero_10 => ((stream_3‹??_81›) nat_8)
                | (succ_11 _7053) => unit_4‹L›))
infer_tm((apair_10‹??_79,??_80,L›
           ?_70[0;0]
           function _7054 : nat_8 -> ?_67[0;0]
           | n_7056 =>
             match n_7056 in ?_68[0;0] -o ?_69[0;0] with
             | zero_10 => ((stream_3‹??_81›) nat_8)
             | (succ_11 _7058) => unit_4‹L›))
check_tm( ?_70[0;0], Type‹??_79›)
check_tm(
  function _7059 : nat_8 -> ?_67[0;0]
  | n_7061 =>
    match n_7061 in ?_68[0;0] -o ?_69[0;0] with
    | zero_10 => ((stream_3‹??_81›) nat_8)
    | (succ_11 _7063) => unit_4‹L›,
  ?_70[0;0] -> Type‹??_80›)
assert_type(nat_8 -> ?_67[0;0])
infer_tm(nat_8 -> ?_67[0;0])
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(?_67[0;0])
infer_tm(?_67[0;0])
assert_type_ok(?_67[0;0], ?_91[0;1])
delay_assert(?_91[0;1], ??_104)
assert_type_ok(nat_8 -> ?_67[0;0], U)
simpl_tm ~expand:false( ?_91[0;1], Type‹??_104›)
assert_equal1( ?_70[0;0] -> Type‹??_80›,
  ∀ (n_7071 : nat_8) -> ?_67[0;1])
assert_equal1_extend( ?_70[0;0] -> Type‹??_80›,
  ∀ (n_7073 : nat_8) -> ?_67[0;1])
simpl_tm ~expand:false( ?_70[0;0] -> Type‹??_80›,
  ∀ (n_7078 : nat_8) -> ?_67[0;1])
simpl_tm ~expand:false( ?_70[0;0], nat_8)
simpl_tm ~expand:false( Type‹??_80›, ?_67[0;1])
simpl_tm ~expand:false( Type‹??_80›, ?_67[0;1])
check_cls {|
  prblm {| ;
    {|  ::: [n_7074] =>?
         match #n_7074 in ?_68[0;0] -o ?_69[0;0] with
         | zero_10 => ((stream_3‹??_81›) nat_8)
         | (succ_11 _7082) => unit_4‹L›
    |}
  |}
  a := nat_8 -> Type‹??_80›
|}
case_intro(__7084 : nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__7084, n_7074 : nat_8) ::: [] =>?
         match #n_7074 in ?_68[0;0] -o ?_69[0;0] with
         | zero_10 => ((stream_3‹??_81›) nat_8)
         | (succ_11 _7086) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?( #__7084, n_7074 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #__7084, #n_7074)
local_map solved
global_map solved
case_coverage_ok(
  match __7084 in ?_68[0;0] -o ?_69[0;0] with
  | zero_10 => ((stream_3‹??_81›) nat_8)
  | (succ_11 _7091) => unit_4‹L›, Type‹??_80›)
check_tm(
  match __7084 in ?_68[0;0] -o ?_69[0;0] with
  | zero_10 => ((stream_3‹??_81›) nat_8)
  | (succ_11 _7093) => unit_4‹L›, Type‹??_80›)
infer_tm(match __7084 in ?_68[0;0] -o ?_69[0;0] with
         | zero_10 => ((stream_3‹??_81›) nat_8)
         | (succ_11 _7095) => unit_4‹L›)
assert_type(?_68[0;0])
infer_tm(?_68[0;0])
assert_type_ok(?_68[0;0], ?_92[0;2])
delay_assert(?_92[0;2], ??_105)
assert_type(?_68[0;0])
infer_tm(?_68[0;0])
assert_type_ok(?_68[0;0], ?_92[0;2])
simpl_tm ~expand:false( ?_92[0;2], Type‹??_105›)
check_tm( __7084, ?_68[0;2])
infer_tm(__7084)
assert_equal1( ?_68[0;2], nat_8)
assert_equal1_extend( ?_68[0;2], nat_8)
assert_type(?_69[0;0])
infer_tm(?_69[0;0])
assert_type_ok(?_69[0;0], ?_93[0;3])
simpl_tm ~expand:false( ?_68[0;2], nat_8)
delay_assert(?_93[0;3], ??_106)
assert_type(?_69[0;0])
infer_tm(?_69[0;0])
assert_type_ok(?_69[0;0], ?_93[0;3])
simpl_tm ~expand:false( ?_93[0;3], Type‹??_106›)
check_cls {|
  prblm {| ;
    {|  ::: [zero_10] =>? ((stream_3‹??_81›) nat_8) |}
    {|  ::: [(succ_11 _7102)] =>? unit_4‹L› |}
  |}
  a := ∀ (_7106 : nat_8) -o ?_69[0;3]
|}
case_intro(_7107 : nat_8)
splitting_on(zero_10)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹??_81›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( ((stream_3‹??_81›) nat_8), ?_69[0;3])
check_tm( ((stream_3‹??_81›) nat_8), ?_69[0;3])
infer_tm(((stream_3‹??_81›) nat_8))
infer_tm(stream_3‹??_81›)
check_tm( nat_8, Type‹??_81›)
infer_tm(nat_8)
assert_equal1( Type‹??_81›, U)
assert_equal1_extend( Type‹??_81›, U)
assert_equal1( ?_69[0;3], L)
assert_equal1_extend( ?_69[0;3], L)
splitting_on(succ_11)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?( #__7111, _7102 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?( #__7111, _7102 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__7111, #_7102)
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( unit_4‹L›, ?_69[0;3])
check_tm( unit_4‹L›, ?_69[0;3])
infer_tm(unit_4‹L›)
assert_equal1( ?_69[0;3], L)
assert_equal1_extend( ?_69[0;3], L)
assert_equal1( Type‹??_80›, ?_69[0;3])
assert_equal1_extend( Type‹??_80›, ?_69[0;3])
assert_type_ok((apair_10‹??_79,??_80,L›
                 ?_70[0;0]
                 function _7114 : nat_8 -> ?_67[0;0]
                 | n_7116 =>
                   match n_7116 in ?_68[0;0] -o ?_69[0;0] with
                   | zero_10 => ((stream_3‹??_81›) nat_8)
                   | (succ_11 _7118) => unit_4‹L›), L)
simpl_tm ~expand:false( Type‹??_80›, ?_69[0;3])
simpl_tm ~expand:false( Type‹??_80›, L)
simpl_tm ~expand:false( L, L)
simpl_tm ~expand:false( Type‹??_81›, U)
check_tm(
  let nat_stream_7125 := ((nat_make_6) zero_10) in
  (apair_intro_13‹??_76,??_77,??_78›
    ?_65[0;0] ?_66[0;0] ?_64[0;0]
    function _7126 : ?_57[0;0]
    | true_5 =>
      (just_3‹??_73,??_74›
        ?_62[0;0]
        match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7125) in
          ?_61[0;0] -o ?_60[0;0]
        with
        | (pair_9 hd_7128 tl_7129) =>
          let __7130 := ((free_stream_4‹??_72›) ?_59[0;0] tl_7129) in
          hd_7128)
    | false_6 => (box_2‹??_75› ?_63[0;0] nat_stream_7125)),
  (apair_10‹??_79,??_80,L›
    ?_70[0;0]
    function _7131 : ∀ (n_7132 : nat_8) -> ?_67[0;1]
    | __7133 =>
      match __7133 in ∀ (_7134 : ?_68[0;2]) -o ?_69[0;3] with
      | zero_10 => ((stream_3‹??_81›) nat_8)
      | (succ_11 __7135) => unit_4‹L›))
infer_tm(let nat_stream_7136 := ((nat_make_6) zero_10) in
         (apair_intro_13‹??_76,??_77,??_78›
           ?_65[0;0] ?_66[0;0] ?_64[0;0]
           function _7137 : ?_57[0;0]
           | true_5 =>
             (just_3‹??_73,??_74›
               ?_62[0;0]
               match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7136) in
                 ?_61[0;0] -o ?_60[0;0]
               with
               | (pair_9 hd_7139 tl_7140) =>
                 let __7141 := ((free_stream_4‹??_72›) ?_59[0;0] tl_7140)
                 in hd_7139)
           | false_6 => (box_2‹??_75› ?_63[0;0] nat_stream_7136)))
infer_tm(((nat_make_6) zero_10))
infer_tm(nat_make_6)
check_tm( zero_10, nat_8)
infer_tm(zero_10)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
infer_tm((apair_intro_13‹??_76,??_77,??_78›
           ?_65[0;0] ?_66[0;0] ?_64[0;0]
           function _7144 : ?_57[0;0]
           | true_5 =>
             (just_3‹??_73,??_74›
               ?_62[0;0]
               match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7142) in
                 ?_61[0;0] -o ?_60[0;0]
               with
               | (pair_9 hd_7146 tl_7147) =>
                 let __7148 := ((free_stream_4‹??_72›) ?_59[0;0] tl_7147)
                 in hd_7146)
           | false_6 => (box_2‹??_75› ?_63[0;0] nat_stream_7142)))
check_tm( ?_65[0;0], Type‹??_76›)
check_tm( ?_66[0;0], ?_65[0;1] -> Type‹??_77›)
check_tm( ?_64[0;0], ?_65[0;1])
check_tm(
  function _7150 : ?_57[0;0]
  | true_5 =>
    (just_3‹??_73,??_74›
      ?_62[0;0]
      match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7142) in
        ?_61[0;0] -o ?_60[0;0]
      with
      | (pair_9 hd_7152 tl_7153) =>
        let __7154 := ((free_stream_4‹??_72›) ?_59[0;0] tl_7153) in
        hd_7152)
  | false_6 => (box_2‹??_75› ?_63[0;0] nat_stream_7142),
  forall‹??_78›(b_7155 : bool_5),
    match b_7155 in bool_5 -o L with
    | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
    | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])))
assert_type(?_57[0;0])
infer_tm(?_57[0;0])
assert_type_ok(?_57[0;0], ?_94[0;1])
delay_assert(?_94[0;1], ??_107)
assert_equal1(
  forall‹??_78›(b_7158 : bool_5),
    match b_7158 in bool_5 -o L with
    | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
    | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])),
  ?_57[0;1])
assert_equal1_extend(
  forall‹??_78›(b_7160 : bool_5),
    match b_7160 in bool_5 -o L with
    | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
    | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])),
  ?_57[0;1])
simpl_tm ~expand:false(
  forall‹??_78›(b_7164 : bool_5),
    match b_7164 in bool_5 -o L with
    | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
    | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])),
  ?_57[0;1])
simpl_tm ~expand:false( ?_94[0;1], Type‹??_107›)
check_cls {|
  prblm {| ;
    {|  ::: [true_5] =>?
         (just_3‹??_73,??_74›
           ?_62[0;0]
           match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7142) in
             ?_61[0;0] -o ?_60[0;0]
           with
           | (pair_9 hd_7172 tl_7173) =>
             let __7174 := ((free_stream_4‹??_72›) ?_59[0;0] tl_7173) in
             hd_7172)
    |} {|  ::: [false_6] =>? (box_2‹??_75› ?_63[0;0] nat_stream_7142) |}
  |}
  a := forall‹??_78›(b_7175 : bool_5),
         match b_7175 in bool_5 -o L with
         | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
         | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1]))
|}
case_intro(b_7177 : bool_5)
splitting_on(true_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>?
         (just_3‹??_73,??_74›
           ?_62[0;0]
           match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7142) in
             ?_61[0;0] -o ?_60[0;0]
           with
           | (pair_9 hd_7182 tl_7183) =>
             let __7184 := ((free_stream_4‹??_72›) ?_59[0;0] tl_7183) in
             hd_7182)
    |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
local_map solved
simpl_pprbm ~expand:false( bool_5, bool_5)
global_map solved
case_coverage_ok(
  (just_3‹??_73,??_74›
    ?_62[0;0]
    match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7142) in
      ?_61[0;0] -o ?_60[0;0]
    with
    | (pair_9 hd_7193 tl_7194) =>
      let __7195 := ((free_stream_4‹??_72›) ?_59[0;0] tl_7194) in hd_7193),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
  | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])))
check_tm(
  (just_3‹??_73,??_74›
    ?_62[0;0]
    match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7142) in
      ?_61[0;0] -o ?_60[0;0]
    with
    | (pair_9 hd_7198 tl_7199) =>
      let __7200 := ((free_stream_4‹??_72›) ?_59[0;0] tl_7199) in hd_7198),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
  | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])))
infer_tm((just_3‹??_73,??_74›
           ?_62[0;0]
           match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7142) in
             ?_61[0;0] -o ?_60[0;0]
           with
           | (pair_9 hd_7203 tl_7204) =>
             let __7205 := ((free_stream_4‹??_72›) ?_59[0;0] tl_7204) in
             hd_7203))
check_tm( ?_62[0;0], Type‹??_73›)
check_tm(
  match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7142) in
    ?_61[0;0] -o ?_60[0;0]
  with
  | (pair_9 hd_7207 tl_7208) =>
    let __7209 := ((free_stream_4‹??_72›) ?_59[0;0] tl_7208) in hd_7207,
  ?_62[0;3])
infer_tm(match ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7142) in
           ?_61[0;0] -o ?_60[0;0]
         with
         | (pair_9 hd_7211 tl_7212) =>
           let __7213 := ((free_stream_4‹??_72›) ?_59[0;0] tl_7212) in
           hd_7211)
assert_type(?_61[0;0])
infer_tm(?_61[0;0])
assert_type_ok(?_61[0;0], ?_95[0;3])
delay_assert(?_95[0;3], ??_108)
assert_type(?_61[0;0])
infer_tm(?_61[0;0])
assert_type_ok(?_61[0;0], ?_95[0;3])
simpl_tm ~expand:false( ?_95[0;3], Type‹??_108›)
check_tm( ((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7142),
  ?_61[0;3])
infer_tm(((uncons_stream_5‹??_71›) ?_58[0;0] nat_stream_7142))
infer_tm(((uncons_stream_5‹??_71›) ?_58[0;0]))
infer_tm(uncons_stream_5‹??_71›)
check_tm( ?_58[0;0], Type‹??_71›)
check_tm( nat_stream_7142, ((stream_3‹??_71›) ?_58[0;3]))
infer_tm(nat_stream_7142)
assert_equal1( ((stream_3‹??_71›) ?_58[0;3]), ((stream_3‹U›) nat_8))
assert_equal1_extend( ((stream_3‹??_71›) ?_58[0;3]),
  ((stream_3‹U›) nat_8))
assert_equal1( ?_61[0;3],
  (prod_7‹??_71,L,L› ?_58[0;3] ((stream_3‹??_71›) ?_58[0;3])))
assert_equal1_extend( ?_61[0;3],
  (prod_7‹??_71,L,L› ?_58[0;3] ((stream_3‹??_71›) ?_58[0;3])))
assert_type(?_60[0;0])
infer_tm(?_60[0;0])
assert_type_ok(?_60[0;0], ?_96[0;4])
simpl_tm ~expand:false( ?_61[0;3],
  (prod_7‹??_71,L,L› ?_58[0;3] ((stream_3‹??_71›) ?_58[0;3])))
simpl_tm ~expand:false( ((stream_3‹??_71›) ?_58[0;3]),
  ((stream_3‹U›) nat_8))
simpl_tm ~expand:false( stream_3‹??_71›, stream_3‹U›)
simpl_tm ~expand:false( ?_58[0;3], nat_8)
simpl_tm ~expand:false( nat_8, ?_58[0;3])
delay_assert(?_96[0;4], ??_109)
assert_type(?_60[0;0])
infer_tm(?_60[0;0])
assert_type_ok(?_60[0;0], ?_96[0;4])
simpl_tm ~expand:false( ?_96[0;4], Type‹??_109›)
check_cls {|
  prblm {| ;
    {|  ::: [(pair_9 hd_7226 tl_7227)] =>?
         let __7238 := ((free_stream_4‹??_72›) ?_59[0;0] #tl_7227) in
         #hd_7226
    |}
  |}
  a := ∀ (_7239 : (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8))) -o
         ?_60[0;4]
|}
case_intro(_7240 : (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
splitting_on(pair_9)
case_coverage{|
  prblm {|
    eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)));
    {| eq_pat?( #m_7241, hd_7226 : nat_8)
       eq_pat?( #n_7242, tl_7227 :
         ∀ (x_7245 : choice_6) -o
           match x_7245 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› nat_8)
           | free_8 => unit_4‹L›) ::: [] =>?
         let __7247 := ((free_stream_4‹??_72›) ?_59[0;0] #tl_7227) in
         #hd_7226
    |}
  |}
|}
unify_local(
  eq_pat?( #m_7241, hd_7226 : nat_8)
  eq_pat?( #n_7242, tl_7227 :
    ∀ (x_7248 : choice_6) -o
      match x_7248 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› nat_8)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
)
simpl_pprbm ~expand:false( #m_7241, #hd_7226)
simpl_pprbm ~expand:false( #n_7242, #tl_7227)
local_map solved
simpl_pprbm ~expand:false(
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
simpl_pprbm ~expand:false( nat_8, nat_8)
simpl_pprbm ~expand:false( ((stream_3‹U›) nat_8),
  ((stream_3‹U›) nat_8))
simpl_pprbm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok(
  let __7253 := ((free_stream_4‹??_72›) ?_59[0;0] n_7242) in m_7241,
  ?_60[0;4])
check_tm(
  let __7254 := ((free_stream_4‹??_72›) ?_59[0;0] n_7242) in m_7241,
  ?_60[0;4])
infer_tm(let __7255 := ((free_stream_4‹??_72›) ?_59[0;0] n_7242) in
         m_7241)
infer_tm(((free_stream_4‹??_72›) ?_59[0;0] n_7242))
infer_tm(((free_stream_4‹??_72›) ?_59[0;0]))
infer_tm(free_stream_4‹??_72›)
check_tm( ?_59[0;0], Type‹??_72›)
check_tm( n_7242, ((stream_3‹??_72›) ?_59[0;6]))
infer_tm(n_7242)
assert_equal1( ((stream_3‹??_72›) ?_59[0;6]), ((stream_3‹U›) nat_8))
assert_equal1_extend( ((stream_3‹??_72›) ?_59[0;6]),
  ((stream_3‹U›) nat_8))
infer_tm(m_7241)
assert_equal1( ?_60[0;4], nat_8)
assert_equal1_extend( ?_60[0;4], nat_8)
assert_equal1( ?_62[0;3], ?_60[0;4])
assert_equal1_extend( ?_62[0;3], ?_60[0;4])
assert_equal1(
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
  | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])),
  (sing_3‹??_73,??_74›
    ?_62[0;3]
    match ((uncons_stream_5‹??_71›) ?_58[0;3] nat_stream_7142) in
      ∀ (_7262 : ?_61[0;3]) -o ?_60[0;4]
    with
    | (pair_9 m_7263 n_7264) =>
      let __7265 := ((free_stream_4‹??_72›) ?_59[0;6] n_7264) in m_7263))
assert_equal1_extend(
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
  | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])),
  (sing_3‹??_73,??_74›
    ?_62[0;3]
    match ((uncons_stream_5‹??_71›) ?_58[0;3] nat_stream_7142) in
      ∀ (_7267 : ?_61[0;3]) -o ?_60[0;4]
    with
    | (pair_9 m_7268 n_7269) =>
      let __7270 := ((free_stream_4‹??_72›) ?_59[0;6] n_7269) in m_7268))
splitting_on(false_6)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (box_2‹??_75› ?_63[0;0] nat_stream_7142) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
local_map solved
simpl_pprbm ~expand:false( bool_5, bool_5)
global_map solved
case_coverage_ok( (box_2‹??_75› ?_63[0;0] nat_stream_7142),
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
  | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])))
check_tm( (box_2‹??_75› ?_63[0;0] nat_stream_7142),
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
  | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])))
infer_tm((box_2‹??_75› ?_63[0;0] nat_stream_7142))
check_tm( ?_63[0;0], Type‹??_75›)
check_tm( nat_stream_7142, ?_63[0;3])
infer_tm(nat_stream_7142)
assert_equal1( ?_63[0;3], ((stream_3‹U›) nat_8))
assert_equal1_extend( ?_63[0;3], ((stream_3‹U›) nat_8))
assert_equal1(
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
  | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])),
  (boxed_2‹??_75› ?_63[0;3]))
assert_equal1_extend(
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
  | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])),
  (boxed_2‹??_75› ?_63[0;3]))
assert_equal1(
  (apair_10‹??_79,??_80,L›
    ?_70[0;0]
    function _7281 : ∀ (n_7282 : nat_8) -> ?_67[0;1]
    | __7283 =>
      match __7283 in ∀ (_7284 : ?_68[0;2]) -o ?_69[0;3] with
      | zero_10 => ((stream_3‹??_81›) nat_8)
      | (succ_11 __7285) => unit_4‹L›),
  (apair_10‹??_76,??_77,??_78› ?_65[0;1] ?_66[0;1]))
assert_equal1_extend(
  (apair_10‹??_79,??_80,L›
    ?_70[0;0]
    function _7286 : ∀ (n_7287 : nat_8) -> ?_67[0;1]
    | __7288 =>
      match __7288 in ∀ (_7289 : ?_68[0;2]) -o ?_69[0;3] with
      | zero_10 => ((stream_3‹??_81›) nat_8)
      | (succ_11 __7290) => unit_4‹L›),
  (apair_10‹??_76,??_77,??_78› ?_65[0;1] ?_66[0;1]))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_7291
    ??_2 <= s_7292
    ??_3 <= s_7294
    ??_4 <= t_7295
    ??_5 <= s_7297
    ??_6 <= s_7300
    ??_7 <= r_7302
    ??_8 <= t_7304
    ??_9 <= s_7308
    ??_10 <= t_7309
    ??_11 <= s_7312
    ??_12 <= ??_11
    ??_13 <= s_7316
    ??_14 <= t_7317
    ??_15 <= ??_11
    ??_16 <= s_7321
    ??_17 <= L
    ??_18 <= s_7323
    ??_19 <= s_7324
    ??_20 <= L
    ??_21 <= s_7326
    ??_22 <= U
    ??_23 <= s_7328
    ??_24 <= s_7329
    ??_25 <= s_7330
    ??_26 <= L
    ??_27 <= s_7332
    ??_28 <= s_7333
    ??_29 <= L
    ??_30 <= L
    ??_31 <= s_7336
    ??_32 <= s_7337
    ??_33 <= L
    ??_34 <= s_7339
    ??_35 <= U
    ??_36 <= U
    ??_37 <= L
    ??_38 <= U
    ??_39 <= s_7342
    ??_40 <= r_7344
    ??_41 <= s_7348
    ??_42 <= r_7350
    ??_43 <= t_7352
    ??_44 <= s_7357
    ??_45 <= L
    ??_46 <= s_7363
    ??_47 <= r_7365
    ??_48 <= t_7367
    ??_49 <= s_7372
    ??_50 <= L
    ??_51 <= s_7378
    ??_52 <= L
    ??_53 <= s_7384
    ??_54 <= L
    ??_55 <= ??_49
    ??_56 <= r_7392
    ??_57 <= s_7396
    ??_58 <= L
    ??_59 <= s_7402
    ??_60 <= r_7404
    ??_61 <= t_7406
    ??_62 <= U
    ??_63 <= L
    ??_64 <= L
    ??_65 <= ??_62
    ??_66 <= L
    ??_67 <= U
    ??_68 <= ??_62
    ??_69 <= L
    ??_70 <= U
    ??_71 <= U
    ??_80 <= L
    ??_81 <= U
    ??_87 <= L
    ??_88 <= U
    ??_89 <= U
    ??_90 <= U
    ??_91 <= L
    ??_92 <= U
    ??_93 <= L
    ??_94 <= U
    ??_95 <= L
    ??_96 <= L
    ??_97 <= U
    ??_98 <= U
    ??_99 <= s_7427
    ??_100 <= U
    ??_101 <= U
    ??_102 <= U
    ??_103 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_7430
    ?_2 <= A_7434
    ?_3 <= A_7438
    ?_4 <= A_7442
    ?_5 <= A_7446
    ?_6 <= x0_7450
    ?_7 <= A_7456
    ?_8 <= A_7461
    ?_9 <= A_7467
    ?_10 <= m_7471
    ?_11 <= A_7479
    ?_12 <= x0_7483
    ?_13 <= A_7489
    ?_14 <= A_7494
    ?_15 <= choice_6
    ?_16 <= Type‹??_17›
    ?_17 <= L
    ?_18 <= choice_6
    ?_19 <= Type‹??_20›
    ?_20 <= ?_17[1;1]
    ?_21 <= unit_4‹L›
    ?_22 <= unit_4‹U›
    ?_23 <= A_7531
    ?_24 <= ((stream_3‹s_7533›) A_7538)
    ?_25 <= (prod_7‹s_7540,L,L› A_7543 ((stream_3‹s_7540›) A_7543))
    ?_26 <= (stream_node_9‹s_7545› A_7547)
    ?_27 <= nat_8
    ?_28 <= bool_5
    ?_29 <= L
    ?_30 <= A_7574
    ?_31 <= A_7581
    ?_32 <= x_7586
    ?_33 <= A_7598
    ?_34 <= B_7604
    ?_35 <= A_7611
    ?_36 <= x_7616
    ?_37 <= A_7628
    ?_38 <= A_7637
    ?_39 <= A_7647
    ?_40 <= x_7655
    ?_41 <= A_7669
    ?_42 <= A_7680
    ?_43 <= x_7690
    ?_44 <= A_7706
    ?_45 <= B_7712
    ?_46 <= A_7719
    ?_47 <= forall‹??_67›(b_7720 : bool_5),
              match b_7720 in bool_5 -o L with
              | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
              | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0]))
    ?_48 <= nat_8
    ?_49 <= ((stream_3‹U›) nat_8)
    ?_50 <= zero_10
    ?_51 <= ?_48[0;2]
    ?_52 <= function _7726 : nat_8 -> L
            | __7728 =>
              match __7728 in nat_8 -o L with
              | zero_10 => ((stream_3‹U›) nat_8)
              | (succ_11 __7730) => unit_4‹L›
    ?_53 <= Type‹??_69›
    ?_54 <= nat_8
    ?_55 <= Type‹??_69›
    ?_56 <= nat_8
    ?_57 <= forall‹??_78›(b_7738 : bool_5),
              match b_7738 in bool_5 -o L with
              | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
              | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1]))
    ?_58 <= nat_8
    ?_61 <= (prod_7‹??_71,L,L›
              ?_58[0;3] ((stream_3‹??_71›) ?_58[0;3]))
    ?_67 <= Type‹??_80›
    ?_68 <= nat_8
    ?_69 <= Type‹??_80›
    ?_70 <= nat_8
    ?_74 <= Type‹??_87›
    ?_75 <= Type‹??_88›
    ?_76 <= Type‹??_89›
    ?_77 <= Type‹??_90›
    ?_78 <= Type‹??_91›
    ?_79 <= Type‹??_92›
    ?_80 <= Type‹??_93›
    ?_81 <= Type‹??_94›
    ?_82 <= Type‹??_95›
    ?_83 <= Type‹??_96›
    ?_84 <= Type‹??_97›
    ?_85 <= Type‹??_98›
    ?_86 <= Type‹??_99›
    ?_87 <= Type‹??_100›
    ?_88 <= Type‹??_101›
    ?_89 <= Type‹??_102›
    ?_90 <= Type‹??_103›
    ?_91 <= Type‹??_104›
    ?_92 <= Type‹??_105›
    ?_93 <= Type‹??_106›
    ?_94 <= Type‹??_107›
    ?_95 <= Type‹??_108›
    ?_96 <= Type‹??_109›
    
  |}
  eqns {|
    equal_tm?
      ((apair_10‹??_79,??_80,L›
         ?_70[0;0]
         function _7836 : ∀ (n_7837 : nat_8) -> ?_67[0;1]
         | __7838 =>
           match __7838 in ∀ (_7839 : ?_68[0;2]) -o ?_69[0;3] with
           | zero_10 => ((stream_3‹??_81›) nat_8)
           | (succ_11 __7840) => unit_4‹L›),
      (apair_10‹??_76,??_77,??_78› ?_65[0;1] ?_66[0;1]));
    equal_tm?
      (match false_6 in bool_5 -o L with
       | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
       | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])),
      (boxed_2‹??_75› ?_63[0;3]));
    equal_tm? (?_63[0;3], ((stream_3‹U›) nat_8));
    equal_tm?
      (match true_5 in bool_5 -o L with
       | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
       | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1])),
      (sing_3‹??_73,??_74›
        ?_62[0;3]
        match ((uncons_stream_5‹??_71›) ?_58[0;3] nat_stream_7142) in
          ∀ (_7843 : ?_61[0;3]) -o ?_60[0;4]
        with
        | (pair_9 m_7844 n_7845) =>
          let __7846 := ((free_stream_4‹??_72›) ?_59[0;6] n_7845) in
          m_7844));
    equal_tm? (?_62[0;3], ?_60[0;4]);
    equal_tm? (?_60[0;4], nat_8);
    equal_tm? (((stream_3‹??_72›) ?_59[0;6]), ((stream_3‹U›) nat_8))
  |}
end_dump
simpl_tm ~expand:false(
  (apair_10‹??_79,L,L›
    nat_8
    function _7858 : nat_8 -> L
    | __7860 =>
      match __7860 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __7862) => unit_4‹L›),
  (apair_10‹??_76,??_77,??_78› ?_65[0;1] ?_66[0;1]))
simpl_tm ~expand:false( nat_8, ?_65[0;1])
simpl_tm ~expand:false(
  function _7863 : nat_8 -> L
  | __7865 =>
    match __7865 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __7867) => unit_4‹L›,
  ?_66[0;1])
simpl_tm ~expand:false( nat_8, ?_65[0;1])
simpl_tm ~expand:false(
  function _7873 : nat_8 -> L
  | __7875 =>
    match __7875 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __7877) => unit_4‹L›,
  ?_66[0;1])
simpl_tm ~expand:false(
  (boxed_2‹L›
    ((function _7891 : nat_8 -> L
      | __7893 =>
        match __7893 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __7895) => unit_4‹L›)
      ?_64[0;1])),
  (boxed_2‹??_75› ?_63[0;3]))
simpl_tm ~expand:false(
  match ?_64[0;1] in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __7897) => unit_4‹L›, ?_63[0;3])
simpl_tm ~expand:false(
  match ?_64[0;1] in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __7901) => unit_4‹L›, ?_63[0;3])
simpl_tm ~expand:false(
  match ?_64[0;1] in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __7910) => unit_4‹L›, ((stream_3‹U›) nat_8))
simpl_tm ~expand:false(
  match ?_64[0;1] in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __7912) => unit_4‹L›, stream_3‹U›)
simpl_tm ~expand:true(
  match ?_64[0;1] in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __7914) => unit_4‹L›,
  function stream_7915 : U -> L
  | A_7917 =>
    ∀ (x_7918 : choice_6) -o
      match x_7918 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› A_7917)
      | free_8 => unit_4‹L›)
simpl_tm ~expand:true(
  match ?_64[0;1] in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __7921) => unit_4‹L›,
  ∀ (x_7922 : choice_6) -o
    match x_7922 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›)
simpl_tm ~expand:false( (sing_3‹??_76,L› nat_8 ?_64[0;1]),
  (sing_3‹??_73,??_74›
    ?_62[0;3]
    match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
      ∀ (_7948 : (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8))) -o
        ?_60[0;4]
    with
    | (pair_9 m_7949 n_7950) =>
      let __7951 := ((free_stream_4‹??_72›) ?_59[0;6] n_7950) in m_7949))
simpl_tm ~expand:false( nat_8, ?_62[0;3])
simpl_tm ~expand:false( ?_64[0;1],
  match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
    ∀ (_7952 : (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8))) -o
      ?_60[0;4]
  with
  | (pair_9 m_7953 n_7954) =>
    let __7955 := ((free_stream_4‹??_72›) ?_59[0;6] n_7954) in m_7953)
simpl_tm ~expand:false( nat_8, ?_62[0;3])
simpl_tm ~expand:false(
  match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
    ∀ (_7960 : (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8))) -o
      ?_60[0;4]
  with
  | (pair_9 m_7961 n_7962) =>
    let __7963 := ((free_stream_4‹??_72›) ?_59[0;6] n_7962) in m_7961,
  ?_64[0;1])
simpl_tm ~expand:false( nat_8, ?_60[0;4])
simpl_tm ~expand:false( nat_8, nat_8)
simpl_tm ~expand:false( ((stream_3‹??_72›) ?_59[0;6]),
  ((stream_3‹U›) nat_8))
simpl_tm ~expand:false( stream_3‹??_72›, stream_3‹U›)
simpl_tm ~expand:false( ?_59[0;6], nat_8)
simpl_tm ~expand:false( nat_8, ?_59[0;6])
simpl_tm ~expand:false(
  match match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_7997 n_7998) =>
          let __7999 := ((free_stream_4‹U›) nat_8 n_7998) in m_7997 in
    nat_8 -o L
  with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __8001) => unit_4‹L›, ((stream_3‹U›) nat_8))
simpl_tm ~expand:false(
  match match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_8003 n_8004) =>
          let __8005 := ((free_stream_4‹U›) nat_8 n_8004) in m_8003 in
    nat_8 -o L
  with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __8007) => unit_4‹L›, stream_3‹U›)
simpl_tm ~expand:true(
  ∀ (x_8008 : choice_6) -o
    match x_8008 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›,
  function stream_8010 : U -> L
  | A_8012 =>
    ∀ (x_8013 : choice_6) -o
      match x_8013 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› A_8012)
      | free_8 => unit_4‹L›)
simpl_tm ~expand:true(
  ∀ (x_8022 : choice_6) -o
    match x_8022 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›,
  ∀ (x_8024 : choice_6) -o
    match x_8024 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›)
simpl_tm ~expand:false( choice_6, choice_6)
simpl_tm ~expand:false(
  match x_8026 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›,
  match x_8026 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›)
simpl_tm ~expand:false( x_8026, x_8026)
simpl_tm ~expand:false( choice_6 -o L, choice_6 -o L)
simpl_tm ~expand:false( choice_6, choice_6)
simpl_tm ~expand:false( L, L)
simpl_tm ~expand:false( (stream_node_9‹U› nat_8),
  (stream_node_9‹U› nat_8))
simpl_tm ~expand:false( nat_8, nat_8)
simpl_tm ~expand:false( unit_4‹L›, unit_4‹L›)
attempt_delay(?_57[0;1] : ?_94[0;1])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_107›)
infer_tm(Type‹??_107›)
assert_type_ok(Type‹??_107›, U)
check_tm(
  ∀ (b_8073 : bool_5) -o
    match b_8073 in bool_5 -o L with
    | true_5 =>
      (sing_3‹??_73,L›
        nat_8
        match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_8076 n_8077) =>
          let __8078 := ((free_stream_4‹U›) nat_8 n_8077) in m_8076)
    | false_6 =>
      (boxed_2‹L›
        ((function _8079 : nat_8 -> L
          | __8081 =>
            match __8081 in nat_8 -o L with
            | zero_10 => ((stream_3‹U›) nat_8)
            | (succ_11 __8083) => unit_4‹L›)
          match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
            (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
          with
          | (pair_9 m_8085 n_8086) =>
            let __8087 := ((free_stream_4‹U›) nat_8 n_8086) in m_8085)),
  Type‹??_107›)
infer_tm(∀ (b_8088 : bool_5) -o
           match b_8088 in bool_5 -o L with
           | true_5 =>
             (sing_3‹??_73,L›
               nat_8
               match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
                 (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
               with
               | (pair_9 m_8091 n_8092) =>
                 let __8093 := ((free_stream_4‹U›) nat_8 n_8092) in
                 m_8091)
           | false_6 =>
             (boxed_2‹L›
               ((function _8094 : nat_8 -> L
                 | __8096 =>
                   match __8096 in nat_8 -o L with
                   | zero_10 => ((stream_3‹U›) nat_8)
                   | (succ_11 __8098) => unit_4‹L›)
                 match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
                   (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                     nat_8
                 with
                 | (pair_9 m_8100 n_8101) =>
                   let __8102 := ((free_stream_4‹U›) nat_8 n_8101) in
                   m_8100)))
assert_type(bool_5)
infer_tm(bool_5)
assert_type_ok(bool_5, U)
assert_type(match b_8103 in bool_5 -o L with
            | true_5 =>
              (sing_3‹??_73,L›
                nat_8
                match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
                  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                    nat_8
                with
                | (pair_9 m_8106 n_8107) =>
                  let __8108 := ((free_stream_4‹U›) nat_8 n_8107) in
                  m_8106)
            | false_6 =>
              (boxed_2‹L›
                ((function _8109 : nat_8 -> L
                  | __8111 =>
                    match __8111 in nat_8 -o L with
                    | zero_10 => ((stream_3‹U›) nat_8)
                    | (succ_11 __8113) => unit_4‹L›)
                  match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
                    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                      nat_8
                  with
                  | (pair_9 m_8115 n_8116) =>
                    let __8117 := ((free_stream_4‹U›) nat_8 n_8116) in
                    m_8115)))
infer_tm(match b_8103 in bool_5 -o L with
         | true_5 =>
           (sing_3‹??_73,L›
             nat_8
             match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
               (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
             with
             | (pair_9 m_8120 n_8121) =>
               let __8122 := ((free_stream_4‹U›) nat_8 n_8121) in m_8120)
         | false_6 =>
           (boxed_2‹L›
             ((function _8123 : nat_8 -> L
               | __8125 =>
                 match __8125 in nat_8 -o L with
                 | zero_10 => ((stream_3‹U›) nat_8)
                 | (succ_11 __8127) => unit_4‹L›)
               match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
                 (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
               with
               | (pair_9 m_8129 n_8130) =>
                 let __8131 := ((free_stream_4‹U›) nat_8 n_8130) in
                 m_8129)))
assert_type(bool_5)
infer_tm(bool_5)
assert_type_ok(bool_5, U)
assert_type(bool_5)
infer_tm(bool_5)
assert_type_ok(bool_5, U)
check_tm( b_8103, bool_5)
infer_tm(b_8103)
assert_equal1( bool_5, bool_5)
assert_equal1_ok( bool_5, bool_5)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
check_cls {|
  prblm {| ;
    {|  ::: [true_5] =>?
         (sing_3‹??_73,L›
           nat_8
           match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
             (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
           with
           | (pair_9 m_8135 n_8136) =>
             let __8137 := ((free_stream_4‹U›) nat_8 n_8136) in m_8135)
    |}
    {|  ::: [false_6] =>?
         (boxed_2‹L›
           ((function _8138 : nat_8 -> L
             | __8140 =>
               match __8140 in nat_8 -o L with
               | zero_10 => ((stream_3‹U›) nat_8)
               | (succ_11 __8142) => unit_4‹L›)
             match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
               (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
             with
             | (pair_9 m_8144 n_8145) =>
               let __8146 := ((free_stream_4‹U›) nat_8 n_8145) in m_8144))
    |}
  |}
  a := bool_5 -o L
|}
case_intro(_8148 : bool_5)
splitting_on(true_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>?
         (sing_3‹??_73,L›
           nat_8
           match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
             (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
           with
           | (pair_9 m_8150 n_8151) =>
             let __8152 := ((free_stream_4‹U›) nat_8 n_8151) in m_8150)
    |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
local_map solved
simpl_pprbm ~expand:false( bool_5, bool_5)
global_map solved
case_coverage_ok(
  (sing_3‹??_73,L›
    nat_8
    match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
    with
    | (pair_9 m_8158 n_8159) =>
      let __8160 := ((free_stream_4‹U›) nat_8 n_8159) in m_8158),
  L)
check_tm(
  (sing_3‹??_73,L›
    nat_8
    match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
    with
    | (pair_9 m_8162 n_8163) =>
      let __8164 := ((free_stream_4‹U›) nat_8 n_8163) in m_8162),
  L)
infer_tm((sing_3‹??_73,L›
           nat_8
           match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
             (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
           with
           | (pair_9 m_8166 n_8167) =>
             let __8168 := ((free_stream_4‹U›) nat_8 n_8167) in m_8166))
check_tm( nat_8, Type‹??_73›)
infer_tm(nat_8)
assert_equal1( Type‹??_73›, U)
assert_equal1_extend( Type‹??_73›, U)
check_tm(
  match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
  with
  | (pair_9 m_8170 n_8171) =>
    let __8172 := ((free_stream_4‹U›) nat_8 n_8171) in m_8170,
  nat_8)
infer_tm(match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
           (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
         with
         | (pair_9 m_8174 n_8175) =>
           let __8176 := ((free_stream_4‹U›) nat_8 n_8175) in m_8174)
assert_type((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
simpl_tm ~expand:false( Type‹??_73›, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_type_ok((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), L)
assert_type((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_type_ok((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), L)
check_tm( ((uncons_stream_5‹U›) nat_8 nat_stream_7142),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm(((uncons_stream_5‹U›) nat_8 nat_stream_7142))
infer_tm(((uncons_stream_5‹U›) nat_8))
infer_tm(uncons_stream_5‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( nat_stream_7142, ((stream_3‹U›) nat_8))
infer_tm(nat_stream_7142)
assert_equal1( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1_ok( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
assert_equal1_ok( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_cls {|
  prblm {| ;
    {|  ::: [(pair_9 m_8183 n_8184)] =>?
         let __8186 := ((free_stream_4‹U›) nat_8 #n_8184) in #m_8183
    |}
  |}
  a := (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
|}
case_intro(_8188 : (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
splitting_on(pair_9)
case_coverage{|
  prblm {|
    eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)));
    {| eq_pat?( #m_8189, m_8183 : nat_8)
       eq_pat?( #n_8190, n_8184 :
         ∀ (x_8191 : choice_6) -o
           match x_8191 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› nat_8)
           | free_8 => unit_4‹L›) ::: [] =>?
         let __8193 := ((free_stream_4‹U›) nat_8 #n_8184) in #m_8183
    |}
  |}
|}
unify_local(
  eq_pat?( #m_8189, m_8183 : nat_8)
  eq_pat?( #n_8190, n_8184 :
    ∀ (x_8194 : choice_6) -o
      match x_8194 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› nat_8)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
)
simpl_pprbm ~expand:false( #m_8189, #m_8183)
simpl_pprbm ~expand:false( #n_8190, #n_8184)
local_map solved
simpl_pprbm ~expand:false(
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
simpl_pprbm ~expand:false( nat_8, nat_8)
simpl_pprbm ~expand:false( ((stream_3‹U›) nat_8),
  ((stream_3‹U›) nat_8))
simpl_pprbm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok(
  let __8197 := ((free_stream_4‹U›) nat_8 n_8190) in m_8189, nat_8)
check_tm( let __8198 := ((free_stream_4‹U›) nat_8 n_8190) in m_8189,
  nat_8)
infer_tm(let __8199 := ((free_stream_4‹U›) nat_8 n_8190) in m_8189)
infer_tm(((free_stream_4‹U›) nat_8 n_8190))
infer_tm(((free_stream_4‹U›) nat_8))
infer_tm(free_stream_4‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( n_8190, ((stream_3‹U›) nat_8))
infer_tm(n_8190)
assert_equal1( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1_ok( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
infer_tm(m_8189)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_equal1( L, L)
assert_equal1_ok( L, L)
splitting_on(false_6)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>?
         (boxed_2‹L›
           ((function _8204 : nat_8 -> L
             | __8206 =>
               match __8206 in nat_8 -o L with
               | zero_10 => ((stream_3‹U›) nat_8)
               | (succ_11 __8208) => unit_4‹L›)
             match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
               (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
             with
             | (pair_9 m_8210 n_8211) =>
               let __8212 := ((free_stream_4‹U›) nat_8 n_8211) in m_8210))
    |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
local_map solved
simpl_pprbm ~expand:false( bool_5, bool_5)
global_map solved
case_coverage_ok(
  (boxed_2‹L›
    ((function _8222 : nat_8 -> L
      | __8224 =>
        match __8224 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __8226) => unit_4‹L›)
      match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
        (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
      with
      | (pair_9 m_8228 n_8229) =>
        let __8230 := ((free_stream_4‹U›) nat_8 n_8229) in m_8228)),
  L)
check_tm(
  (boxed_2‹L›
    ((function _8231 : nat_8 -> L
      | __8233 =>
        match __8233 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __8235) => unit_4‹L›)
      match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
        (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
      with
      | (pair_9 m_8237 n_8238) =>
        let __8239 := ((free_stream_4‹U›) nat_8 n_8238) in m_8237)),
  L)
infer_tm((boxed_2‹L›
           ((function _8240 : nat_8 -> L
             | __8242 =>
               match __8242 in nat_8 -o L with
               | zero_10 => ((stream_3‹U›) nat_8)
               | (succ_11 __8244) => unit_4‹L›)
             match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
               (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
             with
             | (pair_9 m_8246 n_8247) =>
               let __8248 := ((free_stream_4‹U›) nat_8 n_8247) in m_8246)))
check_tm(
  ((function _8249 : nat_8 -> L
    | __8251 =>
      match __8251 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __8253) => unit_4‹L›)
    match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
    with
    | (pair_9 m_8255 n_8256) =>
      let __8257 := ((free_stream_4‹U›) nat_8 n_8256) in m_8255),
  L)
infer_tm(((function _8258 : nat_8 -> L
           | __8260 =>
             match __8260 in nat_8 -o L with
             | zero_10 => ((stream_3‹U›) nat_8)
             | (succ_11 __8262) => unit_4‹L›)
           match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
             (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
           with
           | (pair_9 m_8264 n_8265) =>
             let __8266 := ((free_stream_4‹U›) nat_8 n_8265) in m_8264))
infer_tm(function _8267 : nat_8 -> L
         | __8269 =>
           match __8269 in nat_8 -o L with
           | zero_10 => ((stream_3‹U›) nat_8)
           | (succ_11 __8271) => unit_4‹L›)
assert_type(nat_8 -> L)
infer_tm(nat_8 -> L)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type_ok(nat_8 -> L, U)
check_cls {|
  prblm {| ;
    {|  ::: [__8277] =>?
         match #__8277 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __8280) => unit_4‹L›
    |}
  |}
  a := nat_8 -> L
|}
case_intro(n_8282 : nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #n_8282, __8277 : nat_8) ::: [] =>?
         match #__8277 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __8284) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?( #n_8282, __8277 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #n_8282, #__8277)
local_map solved
global_map solved
case_coverage_ok(
  match n_8282 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __8289) => unit_4‹L›, L)
check_tm(
  match n_8282 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __8291) => unit_4‹L›, L)
infer_tm(match n_8282 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __8293) => unit_4‹L›)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_tm( n_8282, nat_8)
infer_tm(n_8282)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
check_cls {|
  prblm {| ;
    {|  ::: [zero_10] =>? ((stream_3‹U›) nat_8) |}
    {|  ::: [(succ_11 __8295)] =>? unit_4‹L› |}
  |}
  a := nat_8 -o L
|}
case_intro(_8298 : nat_8)
splitting_on(zero_10)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( ((stream_3‹U›) nat_8), L)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
splitting_on(succ_11)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?( #__8302, __8295 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?( #__8302, __8295 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__8302, #__8295)
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( unit_4‹L›, L)
check_tm( unit_4‹L›, L)
infer_tm(unit_4‹L›)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_equal1( L, L)
assert_equal1_ok( L, L)
check_tm(
  match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
  with
  | (pair_9 m_8307 n_8308) =>
    let __8309 := ((free_stream_4‹U›) nat_8 n_8308) in m_8307,
  nat_8)
infer_tm(match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
           (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
         with
         | (pair_9 m_8311 n_8312) =>
           let __8313 := ((free_stream_4‹U›) nat_8 n_8312) in m_8311)
assert_type((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_type_ok((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), L)
assert_type((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_type_ok((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), L)
check_tm( ((uncons_stream_5‹U›) nat_8 nat_stream_7142),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm(((uncons_stream_5‹U›) nat_8 nat_stream_7142))
infer_tm(((uncons_stream_5‹U›) nat_8))
infer_tm(uncons_stream_5‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( nat_stream_7142, ((stream_3‹U›) nat_8))
infer_tm(nat_stream_7142)
assert_equal1( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1_ok( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
assert_equal1_ok( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_cls {|
  prblm {| ;
    {|  ::: [(pair_9 m_8320 n_8321)] =>?
         let __8323 := ((free_stream_4‹U›) nat_8 #n_8321) in #m_8320
    |}
  |}
  a := (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
|}
case_intro(_8325 : (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
splitting_on(pair_9)
case_coverage{|
  prblm {|
    eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)));
    {| eq_pat?( #m_8326, m_8320 : nat_8)
       eq_pat?( #n_8327, n_8321 :
         ∀ (x_8328 : choice_6) -o
           match x_8328 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› nat_8)
           | free_8 => unit_4‹L›) ::: [] =>?
         let __8330 := ((free_stream_4‹U›) nat_8 #n_8321) in #m_8320
    |}
  |}
|}
unify_local(
  eq_pat?( #m_8326, m_8320 : nat_8)
  eq_pat?( #n_8327, n_8321 :
    ∀ (x_8331 : choice_6) -o
      match x_8331 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› nat_8)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
)
simpl_pprbm ~expand:false( #m_8326, #m_8320)
simpl_pprbm ~expand:false( #n_8327, #n_8321)
local_map solved
simpl_pprbm ~expand:false(
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
simpl_pprbm ~expand:false( nat_8, nat_8)
simpl_pprbm ~expand:false( ((stream_3‹U›) nat_8),
  ((stream_3‹U›) nat_8))
simpl_pprbm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok(
  let __8334 := ((free_stream_4‹U›) nat_8 n_8327) in m_8326, nat_8)
check_tm( let __8335 := ((free_stream_4‹U›) nat_8 n_8327) in m_8326,
  nat_8)
infer_tm(let __8336 := ((free_stream_4‹U›) nat_8 n_8327) in m_8326)
infer_tm(((free_stream_4‹U›) nat_8 n_8327))
infer_tm(((free_stream_4‹U›) nat_8))
infer_tm(free_stream_4‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( n_8327, ((stream_3‹U›) nat_8))
infer_tm(n_8327)
assert_equal1( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1_ok( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
infer_tm(m_8326)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_type_ok(match b_8103 in bool_5 -o L with
               | true_5 =>
                 (sing_3‹??_73,L›
                   nat_8
                   match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
                     (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                       nat_8
                   with
                   | (pair_9 m_8343 n_8344) =>
                     let __8345 := ((free_stream_4‹U›) nat_8 n_8344) in
                     m_8343)
               | false_6 =>
                 (boxed_2‹L›
                   ((function _8346 : nat_8 -> L
                     | __8348 =>
                       match __8348 in nat_8 -o L with
                       | zero_10 => ((stream_3‹U›) nat_8)
                       | (succ_11 __8350) => unit_4‹L›)
                     match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
                       (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                         nat_8
                     with
                     | (pair_9 m_8352 n_8353) =>
                       let __8354 := ((free_stream_4‹U›) nat_8 n_8353) in
                       m_8352)), L)
assert_equal1( Type‹??_107›, L)
assert_equal1_extend( Type‹??_107›, L)
simpl_tm ~expand:false( Type‹??_107›, L)
attempt_delay(?_58[0;3] : Type‹??_71›)
resolve_ctx_ok
resolve_env_ok
assert_type(U)
infer_tm(U)
assert_type_ok(U, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
attempt_delay(?_59[0;6] : Type‹??_72›)
resolve_ctx_ok
resolve_env_ok
assert_type(U)
infer_tm(U)
assert_type_ok(U, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
attempt_delay(?_60[0;4] : ?_96[0;4])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_109›)
infer_tm(Type‹??_109›)
assert_type_ok(Type‹??_109›, U)
check_tm( nat_8, Type‹??_109›)
infer_tm(nat_8)
assert_equal1( Type‹??_109›, U)
assert_equal1_extend( Type‹??_109›, U)
simpl_tm ~expand:false( Type‹??_109›, U)
attempt_delay(?_61[0;3] : ?_95[0;3])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_108›)
infer_tm(Type‹??_108›)
assert_type_ok(Type‹??_108›, U)
check_tm( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  Type‹??_108›)
infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_equal1( Type‹??_108›, L)
assert_equal1_extend( Type‹??_108›, L)
simpl_tm ~expand:false( Type‹??_108›, L)
attempt_delay(?_62[0;3] : Type‹??_73›)
resolve_ctx_ok
resolve_env_ok
assert_type(U)
infer_tm(U)
assert_type_ok(U, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
attempt_delay(?_63[0;3] : Type‹??_75›)
resolve_ctx_ok
resolve_env_ok
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
check_tm(
  match match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_8652 n_8653) =>
          let __8654 := ((free_stream_4‹U›) nat_8 n_8653) in m_8652 in
    nat_8 -o L
  with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __8656) => unit_4‹L›, L)
infer_tm(match match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
                 (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
               with
               | (pair_9 m_8658 n_8659) =>
                 let __8660 := ((free_stream_4‹U›) nat_8 n_8659) in
                 m_8658 in
           nat_8 -o L
         with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __8662) => unit_4‹L›)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_tm(
  match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
  with
  | (pair_9 m_8665 n_8666) =>
    let __8667 := ((free_stream_4‹U›) nat_8 n_8666) in m_8665,
  nat_8)
infer_tm(match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
           (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
         with
         | (pair_9 m_8669 n_8670) =>
           let __8671 := ((free_stream_4‹U›) nat_8 n_8670) in m_8669)
assert_type((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_type_ok((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), L)
assert_type((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_type_ok((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), L)
check_tm( ((uncons_stream_5‹U›) nat_8 nat_stream_7142),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm(((uncons_stream_5‹U›) nat_8 nat_stream_7142))
infer_tm(((uncons_stream_5‹U›) nat_8))
infer_tm(uncons_stream_5‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( nat_stream_7142, ((stream_3‹U›) nat_8))
infer_tm(nat_stream_7142)
assert_equal1( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1_ok( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
assert_equal1_ok( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_cls {|
  prblm {| ;
    {|  ::: [(pair_9 m_8678 n_8679)] =>?
         let __8681 := ((free_stream_4‹U›) nat_8 #n_8679) in #m_8678
    |}
  |}
  a := (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
|}
case_intro(_8683 : (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
splitting_on(pair_9)
case_coverage{|
  prblm {|
    eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)));
    {| eq_pat?( #m_8684, m_8678 : nat_8)
       eq_pat?( #n_8685, n_8679 :
         ∀ (x_8701 : choice_6) -o
           match x_8701 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› nat_8)
           | free_8 => unit_4‹L›) ::: [] =>?
         let __8703 := ((free_stream_4‹U›) nat_8 #n_8679) in #m_8678
    |}
  |}
|}
unify_local(
  eq_pat?( #m_8684, m_8678 : nat_8)
  eq_pat?( #n_8685, n_8679 :
    ∀ (x_8704 : choice_6) -o
      match x_8704 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› nat_8)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
)
simpl_pprbm ~expand:false( #m_8684, #m_8678)
simpl_pprbm ~expand:false( #n_8685, #n_8679)
local_map solved
simpl_pprbm ~expand:false(
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
simpl_pprbm ~expand:false( nat_8, nat_8)
simpl_pprbm ~expand:false( ((stream_3‹U›) nat_8),
  ((stream_3‹U›) nat_8))
simpl_pprbm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok(
  let __8722 := ((free_stream_4‹U›) nat_8 n_8685) in m_8684, nat_8)
check_tm( let __8723 := ((free_stream_4‹U›) nat_8 n_8685) in m_8684,
  nat_8)
infer_tm(let __8724 := ((free_stream_4‹U›) nat_8 n_8685) in m_8684)
infer_tm(((free_stream_4‹U›) nat_8 n_8685))
infer_tm(((free_stream_4‹U›) nat_8))
infer_tm(free_stream_4‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( n_8685, ((stream_3‹U›) nat_8))
infer_tm(n_8685)
assert_equal1( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1_ok( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
infer_tm(m_8684)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
check_cls {|
  prblm {| ;
    {|  ::: [zero_10] =>? ((stream_3‹U›) nat_8) |}
    {|  ::: [(succ_11 __8729)] =>? unit_4‹L› |}
  |}
  a := nat_8 -o L
|}
case_intro(_8732 : nat_8)
splitting_on(zero_10)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( ((stream_3‹U›) nat_8), L)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
splitting_on(succ_11)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?( #__8764, __8729 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?( #__8764, __8729 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__8764, #__8729)
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( unit_4‹L›, L)
check_tm( unit_4‹L›, L)
infer_tm(unit_4‹L›)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_equal1( L, L)
assert_equal1_ok( L, L)
attempt_delay(?_64[0;1] : ?_65[0;1])
resolve_ctx_ok
resolve_env_ok
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_tm(
  match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
  with
  | (pair_9 m_8812 n_8813) =>
    let __8814 := ((free_stream_4‹U›) nat_8 n_8813) in m_8812,
  nat_8)
infer_tm(match ((uncons_stream_5‹U›) nat_8 nat_stream_7142) in
           (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
         with
         | (pair_9 m_8816 n_8817) =>
           let __8818 := ((free_stream_4‹U›) nat_8 n_8817) in m_8816)
assert_type((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_type_ok((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), L)
assert_type((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_type_ok((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), L)
check_tm( ((uncons_stream_5‹U›) nat_8 nat_stream_7142),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
infer_tm(((uncons_stream_5‹U›) nat_8 nat_stream_7142))
infer_tm(((uncons_stream_5‹U›) nat_8))
infer_tm(uncons_stream_5‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( nat_stream_7142, ((stream_3‹U›) nat_8))
infer_tm(nat_stream_7142)
assert_equal1( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1_ok( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
assert_equal1_ok( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_cls {|
  prblm {| ;
    {|  ::: [(pair_9 m_8825 n_8826)] =>?
         let __8828 := ((free_stream_4‹U›) nat_8 #n_8826) in #m_8825
    |}
  |}
  a := (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
|}
case_intro(_8830 : (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
splitting_on(pair_9)
case_coverage{|
  prblm {|
    eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)));
    {| eq_pat?( #m_8831, m_8825 : nat_8)
       eq_pat?( #n_8832, n_8826 :
         ∀ (x_8833 : choice_6) -o
           match x_8833 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› nat_8)
           | free_8 => unit_4‹L›) ::: [] =>?
         let __8835 := ((free_stream_4‹U›) nat_8 #n_8826) in #m_8825
    |}
  |}
|}
unify_local(
  eq_pat?( #m_8831, m_8825 : nat_8)
  eq_pat?( #n_8832, n_8826 :
    ∀ (x_8836 : choice_6) -o
      match x_8836 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› nat_8)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
)
simpl_pprbm ~expand:false( #m_8831, #m_8825)
simpl_pprbm ~expand:false( #n_8832, #n_8826)
local_map solved
simpl_pprbm ~expand:false(
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
simpl_pprbm ~expand:false( nat_8, nat_8)
simpl_pprbm ~expand:false( ((stream_3‹U›) nat_8),
  ((stream_3‹U›) nat_8))
simpl_pprbm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok(
  let __8839 := ((free_stream_4‹U›) nat_8 n_8832) in m_8831, nat_8)
check_tm( let __8840 := ((free_stream_4‹U›) nat_8 n_8832) in m_8831,
  nat_8)
infer_tm(let __8841 := ((free_stream_4‹U›) nat_8 n_8832) in m_8831)
infer_tm(((free_stream_4‹U›) nat_8 n_8832))
infer_tm(((free_stream_4‹U›) nat_8))
infer_tm(free_stream_4‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
check_tm( n_8832, ((stream_3‹U›) nat_8))
infer_tm(n_8832)
assert_equal1( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
assert_equal1_ok( ((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
infer_tm(m_8831)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
attempt_delay(?_65[0;1] : Type‹??_76›)
resolve_ctx_ok
resolve_env_ok
assert_type(U)
infer_tm(U)
assert_type_ok(U, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
attempt_delay(?_66[0;1] : ?_65[0;1] -> Type‹??_77›)
resolve_ctx_ok
resolve_env_ok
assert_type(nat_8 -> L)
infer_tm(nat_8 -> L)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type_ok(nat_8 -> L, U)
check_tm(
  function _8860 : nat_8 -> L
  | __8862 =>
    match __8862 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __8864) => unit_4‹L›,
  nat_8 -> L)
assert_type(nat_8 -> L)
infer_tm(nat_8 -> L)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type_ok(nat_8 -> L, U)
assert_equal1( nat_8 -> L, nat_8 -> L)
assert_equal1_ok( nat_8 -> L, nat_8 -> L)
check_cls {|
  prblm {| ;
    {|  ::: [__8876] =>?
         match #__8876 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __8879) => unit_4‹L›
    |}
  |}
  a := nat_8 -> L
|}
case_intro(__8881 : nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__8881, __8876 : nat_8) ::: [] =>?
         match #__8876 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __8883) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?( #__8881, __8876 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #__8881, #__8876)
local_map solved
global_map solved
case_coverage_ok(
  match __8881 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __8888) => unit_4‹L›, L)
check_tm(
  match __8881 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __8890) => unit_4‹L›, L)
infer_tm(match __8881 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __8892) => unit_4‹L›)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_tm( __8881, nat_8)
infer_tm(__8881)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
check_cls {|
  prblm {| ;
    {|  ::: [zero_10] =>? ((stream_3‹U›) nat_8) |}
    {|  ::: [(succ_11 __8894)] =>? unit_4‹L› |}
  |}
  a := nat_8 -o L
|}
case_intro(_8897 : nat_8)
splitting_on(zero_10)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( ((stream_3‹U›) nat_8), L)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
splitting_on(succ_11)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?( #__8901, __8894 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?( #__8901, __8894 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__8901, #__8894)
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( unit_4‹L›, L)
check_tm( unit_4‹L›, L)
infer_tm(unit_4‹L›)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_equal1( L, L)
assert_equal1_ok( L, L)
attempt_delay(?_67[0;1] : ?_91[0;1])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_104›)
infer_tm(Type‹??_104›)
assert_type_ok(Type‹??_104›, U)
check_tm( L, Type‹??_104›)
infer_tm(L)
assert_equal1( Type‹??_104›, U)
assert_equal1_extend( Type‹??_104›, U)
simpl_tm ~expand:false( Type‹??_104›, U)
attempt_delay(?_68[0;2] : ?_92[0;2])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_105›)
infer_tm(Type‹??_105›)
assert_type_ok(Type‹??_105›, U)
check_tm( nat_8, Type‹??_105›)
infer_tm(nat_8)
assert_equal1( Type‹??_105›, U)
assert_equal1_extend( Type‹??_105›, U)
simpl_tm ~expand:false( Type‹??_105›, U)
attempt_delay(?_69[0;3] : ?_93[0;3])
resolve_ctx_ok
resolve_env_ok
assert_type(Type‹??_106›)
infer_tm(Type‹??_106›)
assert_type_ok(Type‹??_106›, U)
check_tm( L, Type‹??_106›)
infer_tm(L)
assert_equal1( Type‹??_106›, U)
assert_equal1_extend( Type‹??_106›, U)
simpl_tm ~expand:false( Type‹??_106›, U)
attempt_delay(?_70[0;0] : Type‹??_79›)
resolve_ctx_ok
resolve_env_ok
assert_type(U)
infer_tm(U)
assert_type_ok(U, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
----------------------------------

definition-------------------------
assert_type(unit_4‹??_86›)
infer_tm(unit_4‹??_86›)
assert_type_ok(unit_4‹??_86›, Type‹??_86›)
check_tm(
  ((free_stream_4‹??_85›)
    ?_73[0;0]
    ((proj2_8‹??_82,??_83,??_84›) ?_72[0;0] ?_71[0;0] my_apair1_10)),
  unit_4‹??_86›)
infer_tm(((free_stream_4‹??_85›)
           ?_73[0;0]
           ((proj2_8‹??_82,??_83,??_84›)
             ?_72[0;0] ?_71[0;0] my_apair1_10)))
infer_tm(((free_stream_4‹??_85›) ?_73[0;0]))
infer_tm(free_stream_4‹??_85›)
check_tm( ?_73[0;0], Type‹??_85›)
check_tm(
  ((proj2_8‹??_82,??_83,??_84›) ?_72[0;0] ?_71[0;0] my_apair1_10),
  ((stream_3‹??_85›) ?_73[0;0]))
infer_tm(((proj2_8‹??_82,??_83,??_84›) ?_72[0;0] ?_71[0;0] my_apair1_10))
infer_tm(((proj2_8‹??_82,??_83,??_84›) ?_72[0;0] ?_71[0;0]))
infer_tm(((proj2_8‹??_82,??_83,??_84›) ?_72[0;0]))
infer_tm(proj2_8‹??_82,??_83,??_84›)
check_tm( ?_72[0;0], Type‹??_82›)
check_tm( ?_71[0;0], ?_72[0;0] -> Type‹??_83›)
check_tm( my_apair1_10,
  (apair_10‹??_82,??_83,??_84› ?_72[0;0] ?_71[0;0]))
infer_tm(my_apair1_10)
assert_equal1( (apair_10‹??_82,??_83,??_84› ?_72[0;0] ?_71[0;0]),
  (apair_10‹U,L,L›
    nat_8
    function _9056 : nat_8 -> L
    | __9058 =>
      match __9058 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __9060) => unit_4‹L›))
assert_equal1_extend( (apair_10‹??_82,??_83,??_84› ?_72[0;0] ?_71[0;0]),
  (apair_10‹U,L,L›
    nat_8
    function _9061 : nat_8 -> L
    | __9063 =>
      match __9063 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __9065) => unit_4‹L›))
assert_equal1( ((stream_3‹??_85›) ?_73[0;0]),
  ((?_71[0;0])
    ((proj1_7‹??_82,??_83,??_84›) ?_72[0;0] ?_71[0;0] my_apair1_10)))
assert_equal1_extend( ((stream_3‹??_85›) ?_73[0;0]),
  ((?_71[0;0])
    ((proj1_7‹??_82,??_83,??_84›) ?_72[0;0] ?_71[0;0] my_apair1_10)))
assert_equal1( unit_4‹??_86›, unit_4‹U›)
assert_equal1_extend( unit_4‹??_86›, unit_4‹U›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_9066
    ??_2 <= s_9067
    ??_3 <= s_9069
    ??_4 <= t_9070
    ??_5 <= s_9072
    ??_6 <= s_9075
    ??_7 <= r_9077
    ??_8 <= t_9079
    ??_9 <= s_9083
    ??_10 <= t_9084
    ??_11 <= s_9087
    ??_12 <= ??_11
    ??_13 <= s_9091
    ??_14 <= t_9092
    ??_15 <= ??_11
    ??_16 <= s_9096
    ??_17 <= L
    ??_18 <= s_9098
    ??_19 <= s_9099
    ??_20 <= L
    ??_21 <= s_9101
    ??_22 <= U
    ??_23 <= s_9103
    ??_24 <= s_9104
    ??_25 <= s_9105
    ??_26 <= L
    ??_27 <= s_9107
    ??_28 <= s_9108
    ??_29 <= L
    ??_30 <= L
    ??_31 <= s_9111
    ??_32 <= s_9112
    ??_33 <= L
    ??_34 <= s_9114
    ??_35 <= U
    ??_36 <= U
    ??_37 <= L
    ??_38 <= U
    ??_39 <= s_9117
    ??_40 <= r_9119
    ??_41 <= s_9123
    ??_42 <= r_9125
    ??_43 <= t_9127
    ??_44 <= s_9132
    ??_45 <= L
    ??_46 <= s_9138
    ??_47 <= r_9140
    ??_48 <= t_9142
    ??_49 <= s_9147
    ??_50 <= L
    ??_51 <= s_9153
    ??_52 <= L
    ??_53 <= s_9159
    ??_54 <= L
    ??_55 <= ??_49
    ??_56 <= r_9167
    ??_57 <= s_9171
    ??_58 <= L
    ??_59 <= s_9177
    ??_60 <= r_9179
    ??_61 <= t_9181
    ??_62 <= U
    ??_63 <= L
    ??_64 <= L
    ??_65 <= ??_62
    ??_66 <= L
    ??_67 <= U
    ??_68 <= ??_62
    ??_69 <= L
    ??_70 <= U
    ??_71 <= U
    ??_72 <= U
    ??_73 <= U
    ??_74 <= L
    ??_75 <= L
    ??_76 <= ??_73
    ??_77 <= L
    ??_78 <= L
    ??_79 <= ??_76
    ??_80 <= L
    ??_81 <= U
    ??_87 <= L
    ??_88 <= U
    ??_89 <= U
    ??_90 <= U
    ??_91 <= L
    ??_92 <= U
    ??_93 <= L
    ??_94 <= U
    ??_95 <= L
    ??_96 <= L
    ??_97 <= U
    ??_98 <= U
    ??_99 <= s_9202
    ??_100 <= U
    ??_101 <= U
    ??_102 <= U
    ??_103 <= U
    ??_104 <= U
    ??_105 <= U
    ??_106 <= U
    ??_107 <= L
    ??_108 <= L
    ??_109 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_9205
    ?_2 <= A_9209
    ?_3 <= A_9213
    ?_4 <= A_9217
    ?_5 <= A_9221
    ?_6 <= x0_9225
    ?_7 <= A_9231
    ?_8 <= A_9236
    ?_9 <= A_9242
    ?_10 <= m_9246
    ?_11 <= A_9254
    ?_12 <= x0_9258
    ?_13 <= A_9264
    ?_14 <= A_9269
    ?_15 <= choice_6
    ?_16 <= Type‹??_17›
    ?_17 <= L
    ?_18 <= choice_6
    ?_19 <= Type‹??_20›
    ?_20 <= ?_17[1;1]
    ?_21 <= unit_4‹L›
    ?_22 <= unit_4‹U›
    ?_23 <= A_9306
    ?_24 <= ((stream_3‹s_9308›) A_9313)
    ?_25 <= (prod_7‹s_9315,L,L› A_9318 ((stream_3‹s_9315›) A_9318))
    ?_26 <= (stream_node_9‹s_9320› A_9322)
    ?_27 <= nat_8
    ?_28 <= bool_5
    ?_29 <= L
    ?_30 <= A_9349
    ?_31 <= A_9356
    ?_32 <= x_9361
    ?_33 <= A_9373
    ?_34 <= B_9379
    ?_35 <= A_9386
    ?_36 <= x_9391
    ?_37 <= A_9403
    ?_38 <= A_9412
    ?_39 <= A_9422
    ?_40 <= x_9430
    ?_41 <= A_9444
    ?_42 <= A_9455
    ?_43 <= x_9465
    ?_44 <= A_9481
    ?_45 <= B_9487
    ?_46 <= A_9494
    ?_47 <= forall‹??_67›(b_9495 : bool_5),
              match b_9495 in bool_5 -o L with
              | true_5 => (sing_3‹??_65,L› ?_51[0;0] ?_50[0;0])
              | false_6 => (boxed_2‹??_66› ((?_52[0;0]) ?_50[0;0]))
    ?_48 <= nat_8
    ?_49 <= ((stream_3‹U›) nat_8)
    ?_50 <= zero_10
    ?_51 <= ?_48[0;2]
    ?_52 <= function _9501 : nat_8 -> L
            | __9503 =>
              match __9503 in nat_8 -o L with
              | zero_10 => ((stream_3‹U›) nat_8)
              | (succ_11 __9505) => unit_4‹L›
    ?_53 <= Type‹??_69›
    ?_54 <= nat_8
    ?_55 <= Type‹??_69›
    ?_56 <= nat_8
    ?_57 <= forall‹??_78›(b_9513 : bool_5),
              match b_9513 in bool_5 -o L with
              | true_5 => (sing_3‹??_76,L› ?_65[0;1] ?_64[0;1])
              | false_6 => (boxed_2‹??_77› ((?_66[0;1]) ?_64[0;1]))
    ?_58 <= nat_8
    ?_59 <= nat_8
    ?_60 <= nat_8
    ?_61 <= (prod_7‹??_71,L,L›
              ?_58[0;3] ((stream_3‹??_71›) ?_58[0;3]))
    ?_62 <= nat_8
    ?_63 <= match ?_64[0;1] in nat_8 -o L with
            | zero_10 => ((stream_3‹U›) nat_8)
            | (succ_11 __9538) => unit_4‹L›
    ?_64 <= match ((uncons_stream_5‹U›) nat_8 nat_stream_9539) in
              ∀ (_9540 :
                (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8))) -o
                ?_60[0;4]
            with
            | (pair_9 m_9541 n_9542) =>
              let __9543 := ((free_stream_4‹??_72›) ?_59[0;6] n_9542) in
              m_9541
    ?_65 <= nat_8
    ?_66 <= function _9546 : nat_8 -> L
            | __9548 =>
              match __9548 in nat_8 -o L with
              | zero_10 => ((stream_3‹U›) nat_8)
              | (succ_11 __9550) => unit_4‹L›
    ?_67 <= Type‹??_80›
    ?_68 <= nat_8
    ?_69 <= Type‹??_80›
    ?_70 <= nat_8
    ?_74 <= Type‹??_87›
    ?_75 <= Type‹??_88›
    ?_76 <= Type‹??_89›
    ?_77 <= Type‹??_90›
    ?_78 <= Type‹??_91›
    ?_79 <= Type‹??_92›
    ?_80 <= Type‹??_93›
    ?_81 <= Type‹??_94›
    ?_82 <= Type‹??_95›
    ?_83 <= Type‹??_96›
    ?_84 <= Type‹??_97›
    ?_85 <= Type‹??_98›
    ?_86 <= Type‹??_99›
    ?_87 <= Type‹??_100›
    ?_88 <= Type‹??_101›
    ?_89 <= Type‹??_102›
    ?_90 <= Type‹??_103›
    ?_91 <= Type‹??_104›
    ?_92 <= Type‹??_105›
    ?_93 <= Type‹??_106›
    ?_94 <= Type‹??_107›
    ?_95 <= Type‹??_108›
    ?_96 <= Type‹??_109›
    
  |}
  eqns {|
    equal_tm? (unit_4‹??_86›, unit_4‹U›);
    equal_tm? (((stream_3‹??_85›) ?_73[0;0]),
      ((?_71[0;0])
        ((proj1_7‹??_82,??_83,??_84›) ?_72[0;0] ?_71[0;0] my_apair1_10)));
    equal_tm? ((apair_10‹??_82,??_83,??_84› ?_72[0;0] ?_71[0;0]),
      (apair_10‹U,L,L›
        nat_8
        function _9641 : nat_8 -> L
        | __9643 =>
          match __9643 in nat_8 -o L with
          | zero_10 => ((stream_3‹U›) nat_8)
          | (succ_11 __9645) => unit_4‹L›))
  |}
end_dump
simpl_tm ~expand:false( unit_4‹??_86›, unit_4‹U›)
simpl_tm ~expand:false( ((stream_3‹??_85›) ?_73[0;0]),
  ((?_71[0;0])
    ((proj1_7‹??_82,??_83,??_84›) ?_72[0;0] ?_71[0;0] my_apair1_10)))
simpl_tm ~expand:false(
  (apair_10‹??_82,??_83,??_84› ?_72[0;0] ?_71[0;0]),
  (apair_10‹U,L,L›
    nat_8
    function _9651 : nat_8 -> L
    | __9653 =>
      match __9653 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __9655) => unit_4‹L›))
simpl_tm ~expand:false( ?_72[0;0], nat_8)
simpl_tm ~expand:false( ?_71[0;0],
  function _9656 : nat_8 -> L
  | __9658 =>
    match __9658 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __9660) => unit_4‹L›)
simpl_tm ~expand:false( nat_8, ?_72[0;0])
simpl_tm ~expand:false(
  function _9666 : nat_8 -> L
  | __9668 =>
    match __9668 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __9670) => unit_4‹L›,
  ?_71[0;0])
simpl_tm ~expand:false( ((stream_3‹??_85›) ?_73[0;0]),
  match ((proj1_7‹U,L,L›)
          nat_8
          function _9686 : nat_8 -> L
          | __9688 =>
            match __9688 in nat_8 -o L with
            | zero_10 => ((stream_3‹U›) nat_8)
            | (succ_11 __9690) => unit_4‹L›
          my_apair1_10) in
    nat_8 -o L
  with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __9692) => unit_4‹L›)
simpl_tm ~expand:false( stream_3‹??_85›,
  match ((proj1_7‹U,L,L›)
          nat_8
          function _9693 : nat_8 -> L
          | __9695 =>
            match __9695 in nat_8 -o L with
            | zero_10 => ((stream_3‹U›) nat_8)
            | (succ_11 __9697) => unit_4‹L›
          my_apair1_10) in
    nat_8 -o L
  with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __9699) => unit_4‹L›)
simpl_tm ~expand:true(
  function stream_9700 : Type‹??_85› -> L
  | A_9702 =>
    ∀ (x_9703 : choice_6) -o
      match x_9703 in choice_6 -o L with
      | next_7 => (stream_node_9‹??_85› A_9702)
      | free_8 => unit_4‹L›,
  ∀ (x_9705 : choice_6) -o
    match x_9705 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›)
simpl_tm ~expand:true(
  ∀ (x_9714 : choice_6) -o
    match x_9714 in choice_6 -o L with
    | next_7 => (stream_node_9‹??_85› ?_73[0;0])
    | free_8 => unit_4‹L›,
  ∀ (x_9716 : choice_6) -o
    match x_9716 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›)
simpl_tm ~expand:false( choice_6, choice_6)
simpl_tm ~expand:false(
  match x_9718 in choice_6 -o L with
  | next_7 => (stream_node_9‹??_85› ?_73[0;0])
  | free_8 => unit_4‹L›,
  match x_9718 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›)
simpl_tm ~expand:false( x_9718, x_9718)
simpl_tm ~expand:false( choice_6 -o L, choice_6 -o L)
simpl_tm ~expand:false( choice_6, choice_6)
simpl_tm ~expand:false( L, L)
simpl_tm ~expand:false( (stream_node_9‹??_85› ?_73[0;0]),
  (stream_node_9‹U› nat_8))
simpl_tm ~expand:false( ?_73[0;0], nat_8)
simpl_tm ~expand:false( unit_4‹L›, unit_4‹L›)
simpl_tm ~expand:false( nat_8, ?_73[0;0])
attempt_delay(?_71[0;0] : ?_72[0;0] -> Type‹??_83›)
resolve_ctx_ok
resolve_env_ok
assert_type(nat_8 -> L)
infer_tm(nat_8 -> L)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type_ok(nat_8 -> L, U)
check_tm(
  function _9735 : nat_8 -> L
  | __9737 =>
    match __9737 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __9739) => unit_4‹L›,
  nat_8 -> L)
assert_type(nat_8 -> L)
infer_tm(nat_8 -> L)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type_ok(nat_8 -> L, U)
assert_equal1( nat_8 -> L, nat_8 -> L)
assert_equal1_ok( nat_8 -> L, nat_8 -> L)
check_cls {|
  prblm {| ;
    {|  ::: [__9751] =>?
         match #__9751 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __9754) => unit_4‹L›
    |}
  |}
  a := nat_8 -> L
|}
case_intro(__9756 : nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__9756, __9751 : nat_8) ::: [] =>?
         match #__9751 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __9758) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?( #__9756, __9751 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #__9756, #__9751)
local_map solved
global_map solved
case_coverage_ok(
  match __9756 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __9763) => unit_4‹L›, L)
check_tm(
  match __9756 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __9765) => unit_4‹L›, L)
infer_tm(match __9756 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __9767) => unit_4‹L›)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
assert_type(nat_8)
infer_tm(nat_8)
assert_type_ok(nat_8, U)
check_tm( __9756, nat_8)
infer_tm(__9756)
assert_equal1( nat_8, nat_8)
assert_equal1_ok( nat_8, nat_8)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
assert_type(L)
infer_tm(L)
assert_type_ok(L, U)
check_cls {|
  prblm {| ;
    {|  ::: [zero_10] =>? ((stream_3‹U›) nat_8) |}
    {|  ::: [(succ_11 __9769)] =>? unit_4‹L› |}
  |}
  a := nat_8 -o L
|}
case_intro(_9772 : nat_8)
splitting_on(zero_10)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( ((stream_3‹U›) nat_8), L)
check_tm( ((stream_3‹U›) nat_8), L)
infer_tm(((stream_3‹U›) nat_8))
infer_tm(stream_3‹U›)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
assert_equal1( L, L)
assert_equal1_ok( L, L)
splitting_on(succ_11)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?( #__9776, __9769 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?( #__9776, __9769 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__9776, #__9769)
local_map solved
simpl_pprbm ~expand:false( nat_8, nat_8)
global_map solved
case_coverage_ok( unit_4‹L›, L)
check_tm( unit_4‹L›, L)
infer_tm(unit_4‹L›)
assert_equal1( L, L)
assert_equal1_ok( L, L)
assert_equal1( L, L)
assert_equal1_ok( L, L)
attempt_delay(?_72[0;0] : Type‹??_82›)
resolve_ctx_ok
resolve_env_ok
assert_type(U)
infer_tm(U)
assert_type_ok(U, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
attempt_delay(?_73[0;0] : Type‹??_85›)
resolve_ctx_ok
resolve_env_ok
assert_type(U)
infer_tm(U)
assert_type_ok(U, U)
check_tm( nat_8, U)
infer_tm(nat_8)
assert_equal1( U, U)
assert_equal1_ok( U, U)
----------------------------------

#[logical]
inductive eq_1‹s_9784› (A_9785 : Type‹s_9784›) (m_9786 : A_9785):
  A_9785 -> U
where
| refl_1 : (eq_1‹s_9784› A_9785 m_9786 m_9786)

#[program]
inductive boxed_2‹s_9788› (A_9789 : Type‹s_9788›): L where
| box_2 (m_9790 : A_9789) : (boxed_2‹s_9788› A_9789)

#[program]
inductive sing_3‹s_9791,t_9792› (A_9793 : Type‹s_9791›):
  A_9793 -> Type‹t_9792›
where
| just_3 (m_9795 : A_9793) : (sing_3‹s_9791,t_9792› A_9793 m_9795)

#[program]
inductive unit_4‹s_9796› : Type‹s_9796› where
| tt_4 : unit_4‹s_9796›

#[program]
inductive bool_5‹› : U where
| true_5 : bool_5
| false_6 : bool_5

#[program]
inductive choice_6‹› : L where
| next_7 : choice_6
| free_8 : choice_6

#[program]
inductive prod_7‹s_9797,r_9798,t_9799› (A_9800 : Type‹s_9797›) (B_9801 : Type‹r_9798›):
  Type‹t_9799›
where
| pair_9
    (m_9802 : A_9800) (n_9803 : B_9801)
    : (prod_7‹s_9797,r_9798,t_9799› A_9800 B_9801)

#[program]
inductive nat_8‹› : U where
| zero_10 : nat_8
| succ_11 (__9804 : nat_8) : nat_8

#[program]
def sing_elim_1‹s_9805,t_9806› :
  ∀ {A_9807 : Type‹s_9805›} ->
    ∀ {x_9808 : A_9807} ->
      (sing_3‹s_9805,t_9806› A_9807 x_9808) -> A_9807
:=
  function sing_elim_9810 :
    ∀ {A_9811 : Type‹s_9805›} ->
      ∀ {x_9812 : A_9811} ->
        (sing_3‹s_9805,t_9806› A_9811 x_9812) -> A_9811
  | A_9814 x_9815 (just_3 m_9816) => m_9816

#[logical]
def sing_uniq_2‹s_9817,t_9818› :
  ∀ (A_9819 : Type‹s_9817›) ->
    ∀ (x0_9820 : A_9819) ->
      ∀ (x_9821 : (sing_3‹s_9817,t_9818› A_9819 x0_9820)) ->
        (eq_1‹s_9817›
          A_9819 x0_9820
          ((sing_elim_1‹s_9817,t_9818›) A_9819 x0_9820 x_9821))
:=
  function sing_uniq_9822 :
    ∀ (A_9823 : Type‹s_9817›) ->
      ∀ (x0_9824 : A_9823) ->
        ∀ (x_9825 : (sing_3‹s_9817,t_9818› A_9823 x0_9824)) ->
          (eq_1‹s_9817›
            A_9823 x0_9824
            ((sing_elim_1‹s_9817,t_9818›) A_9823 x0_9824 x_9825))
  | A_9826 x0_9827 (just_3 m_9828) => (refl_1‹s_9817› A_9826 m_9828)

#[program]
inductive stream_node_9‹s_9829› (A_9830 : Type‹s_9829›): L where
| stream_cons_12
    (hd_9831 : A_9830)
    (tl_9832 : ∀ (x_9833 : choice_6) -o
                 match x_9833 in choice_6 -o L with
                 | next_7 => (stream_node_9‹s_9829› A_9830)
                 | free_8 => unit_4‹L›)
    : (stream_node_9‹s_9829› A_9830)

#[logical]
def stream_3‹s_9835› : Type‹s_9835› -> L :=
  function stream_9837 : Type‹s_9835› -> L
  | A_9839 =>
    ∀ (x_9840 : choice_6) -o
      match x_9840 in choice_6 -o L with
      | next_7 => (stream_node_9‹s_9835› A_9839)
      | free_8 => unit_4‹L›

#[program]
def free_stream_4‹s_9842› :
  ∀ {A_9843 : Type‹s_9842›} ->
    ((stream_3‹s_9842›) A_9843) -> unit_4‹U›
:=
  function free_stream_9845 :
    ∀ {A_9846 : Type‹s_9842›} ->
      ((stream_3‹s_9842›) A_9846) -> unit_4‹U›
  | A_9848 st_9849 =>
    match ((st_9849) free_8) in unit_4‹L› -o unit_4‹U› with
    | tt_4 => tt_4‹U›

#[program]
def uncons_stream_5‹s_9851› :
  ∀ {A_9852 : Type‹s_9851›} ->
    ((stream_3‹s_9851›) A_9852) ->
      (prod_7‹s_9851,L,L› A_9852 ((stream_3‹s_9851›) A_9852))
:=
  function uncons_stream_9854 :
    ∀ {A_9855 : Type‹s_9851›} ->
      ((stream_3‹s_9851›) A_9855) ->
        (prod_7‹s_9851,L,L› A_9855 ((stream_3‹s_9851›) A_9855))
  | A_9857 st_9858 =>
    match ((st_9858) next_7) in
      (stream_node_9‹s_9851› A_9857) -o
        (prod_7‹s_9851,L,L› A_9857 ((stream_3‹s_9851›) A_9857))
    with
    | (stream_cons_12 hd_9860 tl_9861) =>
      (pair_9‹s_9851,L,L›
        A_9857 ((stream_3‹s_9851›) A_9857) hd_9860 tl_9861)

#[program]
def nat_make_6‹› : nat_8 -> ((stream_3‹U›) nat_8) :=
  function nat_make_9863 : nat_8 -> ((stream_3‹U›) nat_8)
  | n_9865 next_7 =>
    (stream_cons_12‹U›
      nat_8 n_9865 ((nat_make_9863) (succ_11‹› n_9865)))
  | n_9866 free_8 => tt_4‹L›

#[program]
inductive apair_10‹s_9867,r_9868,t_9869› (A_9870 : Type‹s_9867›) (B_9871 : 
A_9870 -> Type‹r_9868›): Type‹t_9869› where
| apair_intro_13
    {x_9873 : A_9870}
    (select_9874 : forall‹t_9869›(b_9875 : bool_5),
                     match b_9875 in bool_5 -o L with
                     | true_5 => (sing_3‹s_9867,L› A_9870 x_9873)
                     | false_6 => (boxed_2‹r_9868› ((B_9871) x_9873)))
    : (apair_10‹s_9867,r_9868,t_9869› A_9870 B_9871)

#[program]
def proj1_7‹s_9877,r_9878,t_9879› :
  ∀ {A_9880 : Type‹s_9877›} ->
    ∀ {B_9881 : A_9880 -> Type‹r_9878›} ->
      (apair_10‹s_9877,r_9878,t_9879› A_9880 B_9881) -> A_9880
:=
  function proj1_9884 :
    ∀ {A_9885 : Type‹s_9877›} ->
      ∀ {B_9886 : A_9885 -> Type‹r_9878›} ->
        (apair_10‹s_9877,r_9878,t_9879› A_9885 B_9886) -> A_9885
  | A_9889 B_9890 (apair_intro_13 x_9891 select_9892) =>
    ((sing_elim_1‹s_9877,L›) A_9889 x_9891 ((select_9892) true_5))

#[program]
def proj2_8‹s_9893,r_9894,t_9895› :
  ∀ {A_9896 : Type‹s_9893›} ->
    ∀ {B_9897 : A_9896 -> Type‹r_9894›} ->
      ∀ (x_9899 : (apair_10‹s_9893,r_9894,t_9895› A_9896 B_9897)) ->
        ((B_9897) ((proj1_7‹s_9893,r_9894,t_9895›) A_9896 B_9897 x_9899))
:=
  function proj2_9900 :
    ∀ {A_9901 : Type‹s_9893›} ->
      ∀ {B_9902 : A_9901 -> Type‹r_9894›} ->
        ∀ (x_9904 : (apair_10‹s_9893,r_9894,t_9895› A_9901 B_9902)) ->
          ((B_9902)
            ((proj1_7‹s_9893,r_9894,t_9895›) A_9901 B_9902 x_9904))
  | A_9905 B_9906 (apair_intro_13 x_9907 select_9908) =>
    match x_9907, ((select_9908) true_5),
    ((sing_uniq_2‹s_9893,L›) A_9905 x_9907 ((select_9908) true_5)),
    ((select_9908) false_6) in
      ∀ {x0_9909 : A_9905} -o
        ∀ {a0_9910 : (sing_3‹s_9893,L› A_9905 x_9907)} -o
          {(eq_1‹s_9893›
             A_9905 x0_9909
             ((sing_elim_1‹s_9893,L›) A_9905 x_9907 a0_9910))} -o
            (boxed_2‹r_9894› ((B_9906) x0_9909)) -o
              ((B_9906) ((sing_elim_1‹s_9893,L›) A_9905 x_9907 a0_9910))
    with
    | x0_9913, a0_9914, refl_1, (box_2 m_9915) => m_9915

#[program]
def my_apair0_9‹› :
  (apair_10‹U,L,U›
    nat_8
    function _9916 : nat_8 -> L
    | __9918 =>
      match __9918 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __9920) => unit_4‹L›)
:=
  (apair_intro_13‹U,L,U›
    nat_8
    function _9921 : nat_8 -> L
    | __9923 =>
      match __9923 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __9925) => unit_4‹L›
    zero_10
    function _9926 :
      ∀ (b_9927 : bool_5) ->
        match b_9927 in bool_5 -o L with
        | true_5 => (sing_3‹U,L› nat_8 zero_10)
        | false_6 =>
          (boxed_2‹L›
            ((function _9929 : nat_8 -> L
              | __9931 =>
                match __9931 in nat_8 -o L with
                | zero_10 => ((stream_3‹U›) nat_8)
                | (succ_11 __9933) => unit_4‹L›)
              zero_10))
    | true_5 => (just_3‹U,L› nat_8 zero_10)
    | false_6 =>
      (box_2‹L› ((stream_3‹U›) nat_8) ((nat_make_6) zero_10)))

#[program]
def my_apair1_10‹› :
  (apair_10‹U,L,L›
    nat_8
    function _9934 : nat_8 -> L
    | __9936 =>
      match __9936 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __9938) => unit_4‹L›)
:=
  let nat_stream_9939 := ((nat_make_6) zero_10) in
  (apair_intro_13‹U,L,L›
    nat_8
    function _9940 : nat_8 -> L
    | __9942 =>
      match __9942 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __9944) => unit_4‹L›
    match ((uncons_stream_5‹U›) nat_8 nat_stream_9939) in
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
    with
    | (pair_9 m_9946 n_9947) =>
      let __9948 := ((free_stream_4‹U›) nat_8 n_9947) in m_9946
    function _9949 :
      ∀ (b_9950 : bool_5) -o
        match b_9950 in bool_5 -o L with
        | true_5 =>
          (sing_3‹U,L›
            nat_8
            match ((uncons_stream_5‹U›) nat_8 nat_stream_9939) in
              (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
            with
            | (pair_9 m_9953 n_9954) =>
              let __9955 := ((free_stream_4‹U›) nat_8 n_9954) in m_9953)
        | false_6 =>
          (boxed_2‹L›
            ((function _9956 : nat_8 -> L
              | __9958 =>
                match __9958 in nat_8 -o L with
                | zero_10 => ((stream_3‹U›) nat_8)
                | (succ_11 __9960) => unit_4‹L›)
              match ((uncons_stream_5‹U›) nat_8 nat_stream_9939) in
                (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
              with
              | (pair_9 m_9962 n_9963) =>
                let __9964 := ((free_stream_4‹U›) nat_8 n_9963) in m_9962))
    | true_5 =>
      (just_3‹U,L›
        nat_8
        match ((uncons_stream_5‹U›) nat_8 nat_stream_9939) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_9966 n_9967) =>
          let __9968 := ((free_stream_4‹U›) nat_8 n_9967) in m_9966)
    | false_6 =>
      (box_2‹L›
        match match ((uncons_stream_5‹U›) nat_8 nat_stream_9939) in
                (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
              with
              | (pair_9 m_9970 n_9971) =>
                let __9972 := ((free_stream_4‹U›) nat_8 n_9971) in m_9970 in
          nat_8 -o L
        with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __9974) => unit_4‹L› nat_stream_9939))

#[program]
def __11‹› : unit_4‹U› :=
  ((free_stream_4‹U›)
    nat_8
    ((proj2_8‹U,L,L›)
      nat_8
      function _9975 : nat_8 -> L
      | __9977 =>
        match __9977 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __9979) => unit_4‹L›
      my_apair1_10))

-----------------------------------------

Logical.infer_tm(L)
Logical.infer_tm(A_9980)
Logical.infer_tm(A_9980)
Logical.infer_tm(L)
Logical.infer_tm(A_9983)
Logical.infer_tm((eq_1‹L› A_9983 m_9984 m_9984))
Logical.check_tm( A_9983, L )
Logical.infer_tm(A_9983)
Logical.assert_equal(L, L)
Logical.check_tm( m_9984, A_9983 )
Logical.infer_tm(m_9984)
Logical.assert_equal(A_9983, A_9983)
Logical.check_tm( m_9984, A_9983 )
Logical.infer_tm(m_9984)
Logical.assert_equal(A_9983, A_9983)
Logical.infer_tm(U)
Logical.infer_tm(A_9985)
Logical.infer_tm(A_9985)
Logical.infer_tm(U)
Logical.infer_tm(A_9988)
Logical.infer_tm((eq_1‹U› A_9988 m_9989 m_9989))
Logical.check_tm( A_9988, U )
Logical.infer_tm(A_9988)
Logical.assert_equal(U, U)
Logical.check_tm( m_9989, A_9988 )
Logical.infer_tm(m_9989)
Logical.assert_equal(A_9988, A_9988)
Logical.check_tm( m_9989, A_9988 )
Logical.infer_tm(m_9989)
Logical.assert_equal(A_9988, A_9988)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_9991)
Logical.infer_tm((boxed_2‹L› A_9991))
Logical.check_tm( A_9991, L )
Logical.infer_tm(A_9991)
Logical.assert_equal(L, L)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_9994)
Logical.infer_tm((boxed_2‹U› A_9994))
Logical.check_tm( A_9994, U )
Logical.infer_tm(A_9994)
Logical.assert_equal(U, U)
Logical.infer_tm(L)
Logical.infer_tm(A_9996)
Logical.infer_tm(L)
Logical.infer_tm(A_9998)
Logical.infer_tm((sing_3‹L,L› A_9998 m_9999))
Logical.check_tm( A_9998, L )
Logical.infer_tm(A_9998)
Logical.assert_equal(L, L)
Logical.check_tm( m_9999, A_9998 )
Logical.infer_tm(m_9999)
Logical.assert_equal(A_9998, A_9998)
Logical.infer_tm(L)
Logical.infer_tm(A_10000)
Logical.infer_tm(L)
Logical.infer_tm(A_10002)
Logical.infer_tm((sing_3‹L,U› A_10002 m_10003))
Logical.check_tm( A_10002, L )
Logical.infer_tm(A_10002)
Logical.assert_equal(L, L)
Logical.check_tm( m_10003, A_10002 )
Logical.infer_tm(m_10003)
Logical.assert_equal(A_10002, A_10002)
Logical.infer_tm(U)
Logical.infer_tm(A_10004)
Logical.infer_tm(U)
Logical.infer_tm(A_10006)
Logical.infer_tm((sing_3‹U,L› A_10006 m_10007))
Logical.check_tm( A_10006, U )
Logical.infer_tm(A_10006)
Logical.assert_equal(U, U)
Logical.check_tm( m_10007, A_10006 )
Logical.infer_tm(m_10007)
Logical.assert_equal(A_10006, A_10006)
Logical.infer_tm(U)
Logical.infer_tm(A_10008)
Logical.infer_tm(U)
Logical.infer_tm(A_10010)
Logical.infer_tm((sing_3‹U,U› A_10010 m_10011))
Logical.check_tm( A_10010, U )
Logical.infer_tm(A_10010)
Logical.assert_equal(U, U)
Logical.check_tm( m_10011, A_10010 )
Logical.infer_tm(m_10011)
Logical.assert_equal(A_10010, A_10010)
Logical.infer_tm(unit_4‹L›)
Logical.infer_tm(unit_4‹U›)
Logical.infer_tm(bool_5)
Logical.infer_tm(bool_5)
Logical.infer_tm(choice_6)
Logical.infer_tm(choice_6)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_10014)
Logical.infer_tm(B_10015)
Logical.infer_tm((prod_7‹L,L,L› A_10014 B_10015))
Logical.check_tm( A_10014, L )
Logical.infer_tm(A_10014)
Logical.assert_equal(L, L)
Logical.check_tm( B_10015, L )
Logical.infer_tm(B_10015)
Logical.assert_equal(L, L)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_10020)
Logical.infer_tm(B_10021)
Logical.infer_tm((prod_7‹L,L,U› A_10020 B_10021))
Logical.check_tm( A_10020, L )
Logical.infer_tm(A_10020)
Logical.assert_equal(L, L)
Logical.check_tm( B_10021, L )
Logical.infer_tm(B_10021)
Logical.assert_equal(L, L)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(A_10026)
Logical.infer_tm(B_10027)
Logical.infer_tm((prod_7‹L,U,L› A_10026 B_10027))
Logical.check_tm( A_10026, L )
Logical.infer_tm(A_10026)
Logical.assert_equal(L, L)
Logical.check_tm( B_10027, U )
Logical.infer_tm(B_10027)
Logical.assert_equal(U, U)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(A_10032)
Logical.infer_tm(B_10033)
Logical.infer_tm((prod_7‹L,U,U› A_10032 B_10033))
Logical.check_tm( A_10032, L )
Logical.infer_tm(A_10032)
Logical.assert_equal(L, L)
Logical.check_tm( B_10033, U )
Logical.infer_tm(B_10033)
Logical.assert_equal(U, U)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(A_10038)
Logical.infer_tm(B_10039)
Logical.infer_tm((prod_7‹U,L,L› A_10038 B_10039))
Logical.check_tm( A_10038, U )
Logical.infer_tm(A_10038)
Logical.assert_equal(U, U)
Logical.check_tm( B_10039, L )
Logical.infer_tm(B_10039)
Logical.assert_equal(L, L)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(A_10044)
Logical.infer_tm(B_10045)
Logical.infer_tm((prod_7‹U,L,U› A_10044 B_10045))
Logical.check_tm( A_10044, U )
Logical.infer_tm(A_10044)
Logical.assert_equal(U, U)
Logical.check_tm( B_10045, L )
Logical.infer_tm(B_10045)
Logical.assert_equal(L, L)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_10050)
Logical.infer_tm(B_10051)
Logical.infer_tm((prod_7‹U,U,L› A_10050 B_10051))
Logical.check_tm( A_10050, U )
Logical.infer_tm(A_10050)
Logical.assert_equal(U, U)
Logical.check_tm( B_10051, U )
Logical.infer_tm(B_10051)
Logical.assert_equal(U, U)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_10056)
Logical.infer_tm(B_10057)
Logical.infer_tm((prod_7‹U,U,U› A_10056 B_10057))
Logical.check_tm( A_10056, U )
Logical.infer_tm(A_10056)
Logical.assert_equal(U, U)
Logical.check_tm( B_10057, U )
Logical.infer_tm(B_10057)
Logical.assert_equal(U, U)
Logical.infer_tm(nat_8)
Logical.infer_tm(nat_8)
Logical.infer_tm(nat_8)
Logical.infer_tm(∀ {A_10061 : L} ->
                   ∀ {x_10062 : A_10061} ->
                     (sing_3‹L,L› A_10061 x_10062) -> A_10061)
Logical.infer_tm(L)
Logical.infer_tm(∀ {x_10065 : A_10064} ->
                   (sing_3‹L,L› A_10064 x_10065) -> A_10064)
Logical.infer_tm(A_10064)
Logical.infer_tm((sing_3‹L,L› A_10064 x_10067) -> A_10064)
Logical.infer_tm((sing_3‹L,L› A_10064 x_10067))
Logical.check_tm( A_10064, L )
Logical.infer_tm(A_10064)
Logical.assert_equal(L, L)
Logical.check_tm( x_10067, A_10064 )
Logical.infer_tm(x_10067)
Logical.assert_equal(A_10064, A_10064)
Logical.infer_tm(A_10064)
Program.check_tm(
  function sing_elim_10070 :
    ∀ {A_10071 : L} ->
      ∀ {x_10072 : A_10071} -> (sing_3‹L,L› A_10071 x_10072) -> A_10071
  | A_10074 x_10075 (just_3 m_10076) => m_10076,
  ∀ {A_10077 : L} ->
    ∀ {x_10078 : A_10077} -> (sing_3‹L,L› A_10077 x_10078) -> A_10077
)
Program.infer_tm(function sing_elim_10080 :
                   ∀ {A_10081 : L} ->
                     ∀ {x_10082 : A_10081} ->
                       (sing_3‹L,L› A_10081 x_10082) -> A_10081
                 | A_10084 x_10085 (just_3 m_10086) => m_10086)
Logical.infer_tm(∀ {A_10088 : L} ->
                   ∀ {x_10089 : A_10088} ->
                     (sing_3‹L,L› A_10088 x_10089) -> A_10088)
Logical.infer_tm(L)
Logical.infer_tm(∀ {x_10092 : A_10091} ->
                   (sing_3‹L,L› A_10091 x_10092) -> A_10091)
Logical.infer_tm(A_10091)
Logical.infer_tm((sing_3‹L,L› A_10091 x_10094) -> A_10091)
Logical.infer_tm((sing_3‹L,L› A_10091 x_10094))
Logical.check_tm( A_10091, L )
Logical.infer_tm(A_10091)
Logical.assert_equal(L, L)
Logical.check_tm( x_10094, A_10091 )
Logical.infer_tm(x_10094)
Logical.assert_equal(A_10091, A_10091)
Logical.infer_tm(A_10091)
trans12.Program.case_intro(A_10100, L)
Logical.infer_tm(L)
trans12.Program.case_intro(x_10104, #A_10100)
Logical.infer_tm(A_10100)
trans12.Program.case_intro(__10108, (sing_3‹L,L› #A_10100 #x_10104))
Logical.infer_tm((sing_3‹L,L› A_10100 x_10104))
Logical.check_tm( A_10100, L )
Logical.infer_tm(A_10100)
Logical.assert_equal(L, L)
Logical.check_tm( x_10104, A_10100 )
Logical.infer_tm(x_10104)
Logical.assert_equal(A_10100, A_10100)
Logical.infer_tm((sing_3‹L,L› A_10100 x_10104))
Logical.check_tm( A_10100, L )
Logical.infer_tm(A_10100)
Logical.assert_equal(L, L)
Logical.check_tm( x_10104, A_10100 )
Logical.infer_tm(x_10104)
Logical.assert_equal(A_10100, A_10100)
trans12.Program.case_split(singLL_15, justLL_18)
Logical.infer_tm(A_10100)
case_coverage{|
  prblm {|
    eq_term?( (sing_3‹L,L› #A_10100 #x_10104),
      (sing_3‹L,L› #A_10100 #m_10115));
    {| eq_pat?(N #A_10100, A_10097 : L)
       eq_pat?(N #x_10104, x_10098 : #A_10100)
       eq_pat?(R #m_10115, m_10099 : #A_10100) ::: [] =>? #m_10099
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_10100, A_10097 : L)
  eq_pat?(N #x_10104, x_10098 : #A_10100)
  eq_pat?(R #m_10115, m_10099 : #A_10100)
)
unify_global(
  eq_term?( (sing_3‹L,L› #A_10100 #x_10104),
    (sing_3‹L,L› #A_10100 #m_10115))
)
simpl_pprbm ~expand:false( #A_10100, #A_10097)
simpl_pprbm ~expand:false( #x_10104, #x_10098)
simpl_pprbm ~expand:false( #m_10115, #m_10099)
simpl_pprbm ~expand:false( (sing_3‹L,L› #A_10100 #x_10104),
  (sing_3‹L,L› #A_10100 #m_10115))
simpl_pprbm ~expand:false( #A_10100, #A_10100)
simpl_pprbm ~expand:false( #x_10104, #m_10115)
case_coverage_ok( m_10115, A_10100)
Program.check_tm( m_10115, A_10100 )
Program.infer_tm(m_10115)
Logical.assert_equal(A_10100, A_10100)
trans12.Program.case_introed((sing_3‹L,L› #A_10100 #x_10104))
trans12.Program.case_introed(#A_10100)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_10125 : L} ->
                       ∀ {x_10126 : A_10125} ->
                         (sing_3‹L,L› A_10125 x_10126) -> A_10125, 
∀ {A_10128 : L} ->
  ∀ {x_10129 : A_10128} -> (sing_3‹L,L› A_10128 x_10129) -> A_10128)
Logical.infer_tm(∀ {A_10134 : L} ->
                   ∀ {x_10135 : A_10134} ->
                     (sing_3‹L,U› A_10134 x_10135) -> A_10134)
Logical.infer_tm(L)
Logical.infer_tm(∀ {x_10138 : A_10137} ->
                   (sing_3‹L,U› A_10137 x_10138) -> A_10137)
Logical.infer_tm(A_10137)
Logical.infer_tm((sing_3‹L,U› A_10137 x_10140) -> A_10137)
Logical.infer_tm((sing_3‹L,U› A_10137 x_10140))
Logical.check_tm( A_10137, L )
Logical.infer_tm(A_10137)
Logical.assert_equal(L, L)
Logical.check_tm( x_10140, A_10137 )
Logical.infer_tm(x_10140)
Logical.assert_equal(A_10137, A_10137)
Logical.infer_tm(A_10137)
Program.check_tm(
  function sing_elim_10143 :
    ∀ {A_10144 : L} ->
      ∀ {x_10145 : A_10144} -> (sing_3‹L,U› A_10144 x_10145) -> A_10144
  | A_10147 x_10148 (just_3 m_10149) => m_10149,
  ∀ {A_10150 : L} ->
    ∀ {x_10151 : A_10150} -> (sing_3‹L,U› A_10150 x_10151) -> A_10150
)
Program.infer_tm(function sing_elim_10153 :
                   ∀ {A_10154 : L} ->
                     ∀ {x_10155 : A_10154} ->
                       (sing_3‹L,U› A_10154 x_10155) -> A_10154
                 | A_10157 x_10158 (just_3 m_10159) => m_10159)
Logical.infer_tm(∀ {A_10161 : L} ->
                   ∀ {x_10162 : A_10161} ->
                     (sing_3‹L,U› A_10161 x_10162) -> A_10161)
Logical.infer_tm(L)
Logical.infer_tm(∀ {x_10165 : A_10164} ->
                   (sing_3‹L,U› A_10164 x_10165) -> A_10164)
Logical.infer_tm(A_10164)
Logical.infer_tm((sing_3‹L,U› A_10164 x_10167) -> A_10164)
Logical.infer_tm((sing_3‹L,U› A_10164 x_10167))
Logical.check_tm( A_10164, L )
Logical.infer_tm(A_10164)
Logical.assert_equal(L, L)
Logical.check_tm( x_10167, A_10164 )
Logical.infer_tm(x_10167)
Logical.assert_equal(A_10164, A_10164)
Logical.infer_tm(A_10164)
trans12.Program.case_intro(A_10173, L)
Logical.infer_tm(L)
trans12.Program.case_intro(x_10177, #A_10173)
Logical.infer_tm(A_10173)
trans12.Program.case_intro(__10181, (sing_3‹L,U› #A_10173 #x_10177))
Logical.infer_tm((sing_3‹L,U› A_10173 x_10177))
Logical.check_tm( A_10173, L )
Logical.infer_tm(A_10173)
Logical.assert_equal(L, L)
Logical.check_tm( x_10177, A_10173 )
Logical.infer_tm(x_10177)
Logical.assert_equal(A_10173, A_10173)
Logical.infer_tm((sing_3‹L,U› A_10173 x_10177))
Logical.check_tm( A_10173, L )
Logical.infer_tm(A_10173)
Logical.assert_equal(L, L)
Logical.check_tm( x_10177, A_10173 )
Logical.infer_tm(x_10177)
Logical.assert_equal(A_10173, A_10173)
trans12.Program.case_introed((sing_3‹L,U› #A_10173 #x_10177))
trans12.Program.case_introed(#A_10173)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_10188 : L} ->
                       ∀ {x_10189 : A_10188} ->
                         (sing_3‹L,U› A_10188 x_10189) -> A_10188, 
∀ {A_10191 : L} ->
  ∀ {x_10192 : A_10191} -> (sing_3‹L,U› A_10191 x_10192) -> A_10191)
Logical.infer_tm(∀ {A_10197 : U} ->
                   ∀ {x_10198 : A_10197} ->
                     (sing_3‹U,L› A_10197 x_10198) -> A_10197)
Logical.infer_tm(U)
Logical.infer_tm(∀ {x_10201 : A_10200} ->
                   (sing_3‹U,L› A_10200 x_10201) -> A_10200)
Logical.infer_tm(A_10200)
Logical.infer_tm((sing_3‹U,L› A_10200 x_10203) -> A_10200)
Logical.infer_tm((sing_3‹U,L› A_10200 x_10203))
Logical.check_tm( A_10200, U )
Logical.infer_tm(A_10200)
Logical.assert_equal(U, U)
Logical.check_tm( x_10203, A_10200 )
Logical.infer_tm(x_10203)
Logical.assert_equal(A_10200, A_10200)
Logical.infer_tm(A_10200)
Program.check_tm(
  function sing_elim_10206 :
    ∀ {A_10207 : U} ->
      ∀ {x_10208 : A_10207} -> (sing_3‹U,L› A_10207 x_10208) -> A_10207
  | A_10210 x_10211 (just_3 m_10212) => m_10212,
  ∀ {A_10213 : U} ->
    ∀ {x_10214 : A_10213} -> (sing_3‹U,L› A_10213 x_10214) -> A_10213
)
Program.infer_tm(function sing_elim_10216 :
                   ∀ {A_10217 : U} ->
                     ∀ {x_10218 : A_10217} ->
                       (sing_3‹U,L› A_10217 x_10218) -> A_10217
                 | A_10220 x_10221 (just_3 m_10222) => m_10222)
Logical.infer_tm(∀ {A_10224 : U} ->
                   ∀ {x_10225 : A_10224} ->
                     (sing_3‹U,L› A_10224 x_10225) -> A_10224)
Logical.infer_tm(U)
Logical.infer_tm(∀ {x_10228 : A_10227} ->
                   (sing_3‹U,L› A_10227 x_10228) -> A_10227)
Logical.infer_tm(A_10227)
Logical.infer_tm((sing_3‹U,L› A_10227 x_10230) -> A_10227)
Logical.infer_tm((sing_3‹U,L› A_10227 x_10230))
Logical.check_tm( A_10227, U )
Logical.infer_tm(A_10227)
Logical.assert_equal(U, U)
Logical.check_tm( x_10230, A_10227 )
Logical.infer_tm(x_10230)
Logical.assert_equal(A_10227, A_10227)
Logical.infer_tm(A_10227)
trans12.Program.case_intro(A_10236, U)
Logical.infer_tm(U)
trans12.Program.case_intro(x_10240, #A_10236)
Logical.infer_tm(A_10236)
trans12.Program.case_intro(__10244, (sing_3‹U,L› #A_10236 #x_10240))
Logical.infer_tm((sing_3‹U,L› A_10236 x_10240))
Logical.check_tm( A_10236, U )
Logical.infer_tm(A_10236)
Logical.assert_equal(U, U)
Logical.check_tm( x_10240, A_10236 )
Logical.infer_tm(x_10240)
Logical.assert_equal(A_10236, A_10236)
Logical.infer_tm((sing_3‹U,L› A_10236 x_10240))
Logical.check_tm( A_10236, U )
Logical.infer_tm(A_10236)
Logical.assert_equal(U, U)
Logical.check_tm( x_10240, A_10236 )
Logical.infer_tm(x_10240)
Logical.assert_equal(A_10236, A_10236)
trans12.Program.case_split(singUL_17, justUL_20)
Logical.infer_tm(A_10236)
case_coverage{|
  prblm {|
    eq_term?( (sing_3‹U,L› #A_10236 #x_10240),
      (sing_3‹U,L› #A_10236 #m_10251));
    {| eq_pat?(N #A_10236, A_10233 : U)
       eq_pat?(N #x_10240, x_10234 : #A_10236)
       eq_pat?(R #m_10251, m_10235 : #A_10236) ::: [] =>? #m_10235
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_10236, A_10233 : U)
  eq_pat?(N #x_10240, x_10234 : #A_10236)
  eq_pat?(R #m_10251, m_10235 : #A_10236)
)
unify_global(
  eq_term?( (sing_3‹U,L› #A_10236 #x_10240),
    (sing_3‹U,L› #A_10236 #m_10251))
)
simpl_pprbm ~expand:false( #A_10236, #A_10233)
simpl_pprbm ~expand:false( #x_10240, #x_10234)
simpl_pprbm ~expand:false( #m_10251, #m_10235)
simpl_pprbm ~expand:false( (sing_3‹U,L› #A_10236 #x_10240),
  (sing_3‹U,L› #A_10236 #m_10251))
simpl_pprbm ~expand:false( #A_10236, #A_10236)
simpl_pprbm ~expand:false( #x_10240, #m_10251)
case_coverage_ok( m_10251, A_10236)
Program.check_tm( m_10251, A_10236 )
Program.infer_tm(m_10251)
Logical.assert_equal(A_10236, A_10236)
trans12.Program.case_introed((sing_3‹U,L› #A_10236 #x_10240))
trans12.Program.case_introed(#A_10236)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_10261 : U} ->
                       ∀ {x_10262 : A_10261} ->
                         (sing_3‹U,L› A_10261 x_10262) -> A_10261, 
∀ {A_10264 : U} ->
  ∀ {x_10265 : A_10264} -> (sing_3‹U,L› A_10264 x_10265) -> A_10264)
Logical.infer_tm(∀ {A_10270 : U} ->
                   ∀ {x_10271 : A_10270} ->
                     (sing_3‹U,U› A_10270 x_10271) -> A_10270)
Logical.infer_tm(U)
Logical.infer_tm(∀ {x_10274 : A_10273} ->
                   (sing_3‹U,U› A_10273 x_10274) -> A_10273)
Logical.infer_tm(A_10273)
Logical.infer_tm((sing_3‹U,U› A_10273 x_10276) -> A_10273)
Logical.infer_tm((sing_3‹U,U› A_10273 x_10276))
Logical.check_tm( A_10273, U )
Logical.infer_tm(A_10273)
Logical.assert_equal(U, U)
Logical.check_tm( x_10276, A_10273 )
Logical.infer_tm(x_10276)
Logical.assert_equal(A_10273, A_10273)
Logical.infer_tm(A_10273)
Program.check_tm(
  function sing_elim_10279 :
    ∀ {A_10280 : U} ->
      ∀ {x_10281 : A_10280} -> (sing_3‹U,U› A_10280 x_10281) -> A_10280
  | A_10283 x_10284 (just_3 m_10285) => m_10285,
  ∀ {A_10286 : U} ->
    ∀ {x_10287 : A_10286} -> (sing_3‹U,U› A_10286 x_10287) -> A_10286
)
Program.infer_tm(function sing_elim_10289 :
                   ∀ {A_10290 : U} ->
                     ∀ {x_10291 : A_10290} ->
                       (sing_3‹U,U› A_10290 x_10291) -> A_10290
                 | A_10293 x_10294 (just_3 m_10295) => m_10295)
Logical.infer_tm(∀ {A_10297 : U} ->
                   ∀ {x_10298 : A_10297} ->
                     (sing_3‹U,U› A_10297 x_10298) -> A_10297)
Logical.infer_tm(U)
Logical.infer_tm(∀ {x_10301 : A_10300} ->
                   (sing_3‹U,U› A_10300 x_10301) -> A_10300)
Logical.infer_tm(A_10300)
Logical.infer_tm((sing_3‹U,U› A_10300 x_10303) -> A_10300)
Logical.infer_tm((sing_3‹U,U› A_10300 x_10303))
Logical.check_tm( A_10300, U )
Logical.infer_tm(A_10300)
Logical.assert_equal(U, U)
Logical.check_tm( x_10303, A_10300 )
Logical.infer_tm(x_10303)
Logical.assert_equal(A_10300, A_10300)
Logical.infer_tm(A_10300)
trans12.Program.case_intro(A_10309, U)
Logical.infer_tm(U)
trans12.Program.case_intro(x_10313, #A_10309)
Logical.infer_tm(A_10309)
trans12.Program.case_intro(__10317, (sing_3‹U,U› #A_10309 #x_10313))
Logical.infer_tm((sing_3‹U,U› A_10309 x_10313))
Logical.check_tm( A_10309, U )
Logical.infer_tm(A_10309)
Logical.assert_equal(U, U)
Logical.check_tm( x_10313, A_10309 )
Logical.infer_tm(x_10313)
Logical.assert_equal(A_10309, A_10309)
Logical.infer_tm((sing_3‹U,U› A_10309 x_10313))
Logical.check_tm( A_10309, U )
Logical.infer_tm(A_10309)
Logical.assert_equal(U, U)
Logical.check_tm( x_10313, A_10309 )
Logical.infer_tm(x_10313)
Logical.assert_equal(A_10309, A_10309)
trans12.Program.case_split(singUU_18, justUU_21)
Logical.infer_tm(A_10309)
case_coverage{|
  prblm {|
    eq_term?( (sing_3‹U,U› #A_10309 #x_10313),
      (sing_3‹U,U› #A_10309 #m_10324));
    {| eq_pat?(N #A_10309, A_10306 : U)
       eq_pat?(N #x_10313, x_10307 : #A_10309)
       eq_pat?(R #m_10324, m_10308 : #A_10309) ::: [] =>? #m_10308
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_10309, A_10306 : U)
  eq_pat?(N #x_10313, x_10307 : #A_10309)
  eq_pat?(R #m_10324, m_10308 : #A_10309)
)
unify_global(
  eq_term?( (sing_3‹U,U› #A_10309 #x_10313),
    (sing_3‹U,U› #A_10309 #m_10324))
)
simpl_pprbm ~expand:false( #A_10309, #A_10306)
simpl_pprbm ~expand:false( #x_10313, #x_10307)
simpl_pprbm ~expand:false( #m_10324, #m_10308)
simpl_pprbm ~expand:false( (sing_3‹U,U› #A_10309 #x_10313),
  (sing_3‹U,U› #A_10309 #m_10324))
simpl_pprbm ~expand:false( #A_10309, #A_10309)
simpl_pprbm ~expand:false( #x_10313, #m_10324)
case_coverage_ok( m_10324, A_10309)
Program.check_tm( m_10324, A_10309 )
Program.infer_tm(m_10324)
Logical.assert_equal(A_10309, A_10309)
trans12.Program.case_introed((sing_3‹U,U› #A_10309 #x_10313))
trans12.Program.case_introed(#A_10309)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_10334 : U} ->
                       ∀ {x_10335 : A_10334} ->
                         (sing_3‹U,U› A_10334 x_10335) -> A_10334, 
∀ {A_10337 : U} ->
  ∀ {x_10338 : A_10337} -> (sing_3‹U,U› A_10337 x_10338) -> A_10337)
Logical.infer_tm(∀ (A_10343 : L) ->
                   ∀ (x0_10344 : A_10343) ->
                     ∀ (x_10345 : (sing_3‹L,L› A_10343 x0_10344)) ->
                       (eq_1‹L›
                         A_10343 x0_10344
                         ((sing_elim_1‹L,L›) A_10343 x0_10344 x_10345)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (x0_10347 : A_10346) ->
                   ∀ (x_10348 : (sing_3‹L,L› A_10346 x0_10347)) ->
                     (eq_1‹L›
                       A_10346 x0_10347
                       ((sing_elim_1‹L,L›) A_10346 x0_10347 x_10348)))
Logical.infer_tm(A_10346)
Logical.infer_tm(∀ (x_10350 : (sing_3‹L,L› A_10346 x0_10349)) ->
                   (eq_1‹L›
                     A_10346 x0_10349
                     ((sing_elim_1‹L,L›) A_10346 x0_10349 x_10350)))
Logical.infer_tm((sing_3‹L,L› A_10346 x0_10349))
Logical.check_tm( A_10346, L )
Logical.infer_tm(A_10346)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10349, A_10346 )
Logical.infer_tm(x0_10349)
Logical.assert_equal(A_10346, A_10346)
Logical.infer_tm((eq_1‹L›
                   A_10346 x0_10349
                   ((sing_elim_1‹L,L›) A_10346 x0_10349 x_10351)))
Logical.check_tm( A_10346, L )
Logical.infer_tm(A_10346)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10349, A_10346 )
Logical.infer_tm(x0_10349)
Logical.assert_equal(A_10346, A_10346)
Logical.check_tm( ((sing_elim_1‹L,L›) A_10346 x0_10349 x_10351), 
A_10346 )
Logical.infer_tm(((sing_elim_1‹L,L›) A_10346 x0_10349 x_10351))
Logical.infer_tm(((sing_elim_1‹L,L›) A_10346 x0_10349))
Logical.infer_tm(((sing_elim_1‹L,L›) A_10346))
Logical.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_10346, L )
Logical.infer_tm(A_10346)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10349, A_10346 )
Logical.infer_tm(x0_10349)
Logical.assert_equal(A_10346, A_10346)
Logical.check_tm( x_10351, (sing_3‹L,L› A_10346 x0_10349) )
Logical.infer_tm(x_10351)
Logical.assert_equal((sing_3‹L,L› A_10346 x0_10349), (sing_3‹L,L›
                                                           A_10346 x0_10349))
Logical.assert_equal(A_10346, A_10346)
Logical.check_tm(
  function sing_uniq_10352 :
    ∀ (A_10353 : L) ->
      ∀ (x0_10354 : A_10353) ->
        ∀ (x_10355 : (sing_3‹L,L› A_10353 x0_10354)) ->
          (eq_1‹L›
            A_10353 x0_10354
            ((sing_elim_1‹L,L›) A_10353 x0_10354 x_10355))
  | A_10356 x0_10357 (just_3 m_10358) => (refl_1‹L› A_10356 m_10358),
  ∀ (A_10359 : L) ->
    ∀ (x0_10360 : A_10359) ->
      ∀ (x_10361 : (sing_3‹L,L› A_10359 x0_10360)) ->
        (eq_1‹L›
          A_10359 x0_10360 ((sing_elim_1‹L,L›) A_10359 x0_10360 x_10361))
)
Logical.infer_tm(function sing_uniq_10362 :
                   ∀ (A_10363 : L) ->
                     ∀ (x0_10364 : A_10363) ->
                       ∀ (x_10365 : (sing_3‹L,L› A_10363 x0_10364)) ->
                         (eq_1‹L›
                           A_10363 x0_10364
                           ((sing_elim_1‹L,L›) A_10363 x0_10364 x_10365))
                 | A_10366 x0_10367 (just_3 m_10368) =>
                   (refl_1‹L› A_10366 m_10368))
Logical.infer_tm(∀ (A_10370 : L) ->
                   ∀ (x0_10371 : A_10370) ->
                     ∀ (x_10372 : (sing_3‹L,L› A_10370 x0_10371)) ->
                       (eq_1‹L›
                         A_10370 x0_10371
                         ((sing_elim_1‹L,L›) A_10370 x0_10371 x_10372)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (x0_10374 : A_10373) ->
                   ∀ (x_10375 : (sing_3‹L,L› A_10373 x0_10374)) ->
                     (eq_1‹L›
                       A_10373 x0_10374
                       ((sing_elim_1‹L,L›) A_10373 x0_10374 x_10375)))
Logical.infer_tm(A_10373)
Logical.infer_tm(∀ (x_10377 : (sing_3‹L,L› A_10373 x0_10376)) ->
                   (eq_1‹L›
                     A_10373 x0_10376
                     ((sing_elim_1‹L,L›) A_10373 x0_10376 x_10377)))
Logical.infer_tm((sing_3‹L,L› A_10373 x0_10376))
Logical.check_tm( A_10373, L )
Logical.infer_tm(A_10373)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10376, A_10373 )
Logical.infer_tm(x0_10376)
Logical.assert_equal(A_10373, A_10373)
Logical.infer_tm((eq_1‹L›
                   A_10373 x0_10376
                   ((sing_elim_1‹L,L›) A_10373 x0_10376 x_10378)))
Logical.check_tm( A_10373, L )
Logical.infer_tm(A_10373)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10376, A_10373 )
Logical.infer_tm(x0_10376)
Logical.assert_equal(A_10373, A_10373)
Logical.check_tm( ((sing_elim_1‹L,L›) A_10373 x0_10376 x_10378), 
A_10373 )
Logical.infer_tm(((sing_elim_1‹L,L›) A_10373 x0_10376 x_10378))
Logical.infer_tm(((sing_elim_1‹L,L›) A_10373 x0_10376))
Logical.infer_tm(((sing_elim_1‹L,L›) A_10373))
Logical.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_10373, L )
Logical.infer_tm(A_10373)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10376, A_10373 )
Logical.infer_tm(x0_10376)
Logical.assert_equal(A_10373, A_10373)
Logical.check_tm( x_10378, (sing_3‹L,L› A_10373 x0_10376) )
Logical.infer_tm(x_10378)
Logical.assert_equal((sing_3‹L,L› A_10373 x0_10376), (sing_3‹L,L›
                                                           A_10373 x0_10376))
Logical.assert_equal(A_10373, A_10373)
Logical.infer_tm(L)
Logical.infer_tm(A_10382)
Logical.infer_tm((sing_3‹L,L› A_10382 x0_10386))
Logical.check_tm( A_10382, L )
Logical.infer_tm(A_10382)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10386, A_10382 )
Logical.infer_tm(x0_10386)
Logical.assert_equal(A_10382, A_10382)
Logical.infer_tm(A_10382)
case_coverage{|
  prblm {|
    eq_term?( (sing_3‹L,L› #A_10382 #x0_10386),
      (sing_3‹L,L› #A_10382 #m_10394));
    {| eq_pat?(R #A_10382, A_10379 : L)
       eq_pat?(R #x0_10386, x0_10380 : #A_10382)
       eq_pat?(R #m_10394, m_10381 : #A_10382) ::: [] =>?
         (refl_1‹L› #A_10379 #m_10381)
    |}
  |}
|}
unify_local(
  eq_pat?(R #A_10382, A_10379 : L)
  eq_pat?(R #x0_10386, x0_10380 : #A_10382)
  eq_pat?(R #m_10394, m_10381 : #A_10382)
)
unify_global(
  eq_term?( (sing_3‹L,L› #A_10382 #x0_10386),
    (sing_3‹L,L› #A_10382 #m_10394))
)
simpl_pprbm ~expand:false( #A_10382, #A_10379)
simpl_pprbm ~expand:false( #x0_10386, #x0_10380)
simpl_pprbm ~expand:false( #m_10394, #m_10381)
simpl_pprbm ~expand:false( (sing_3‹L,L› #A_10382 #x0_10386),
  (sing_3‹L,L› #A_10382 #m_10394))
simpl_pprbm ~expand:false( #A_10382, #A_10382)
simpl_pprbm ~expand:false( #x0_10386, #m_10394)
case_coverage_ok( (refl_1‹L› A_10382 m_10394),
  (eq_1‹L›
    A_10382 m_10394
    ((sing_elim_1‹L,L›)
      A_10382 m_10394 (just_3‹L,L› A_10382 m_10394))))
Logical.check_tm( (refl_1‹L› A_10382 m_10394),
  (eq_1‹L›
    A_10382 m_10394
    ((sing_elim_1‹L,L›)
      A_10382 m_10394 (just_3‹L,L› A_10382 m_10394)))
)
Logical.infer_tm((refl_1‹L› A_10382 m_10394))
Logical.check_tm( A_10382, L )
Logical.infer_tm(A_10382)
Logical.assert_equal(L, L)
Logical.check_tm( m_10394, A_10382 )
Logical.infer_tm(m_10394)
Logical.assert_equal(A_10382, A_10382)
Logical.assert_equal((eq_1‹L›
                       A_10382 m_10394
                       ((sing_elim_1‹L,L›)
                         A_10382 m_10394 (just_3‹L,L› A_10382 m_10394))), 
(eq_1‹L› A_10382 m_10394 m_10394))
Logical.assert_equal(∀ (A_10404 : L) ->
                       ∀ (x0_10405 : A_10404) ->
                         ∀ (x_10406 :
                           (sing_3‹L,L› A_10404 x0_10405)) ->
                           (eq_1‹L›
                             A_10404 x0_10405
                             ((sing_elim_1‹L,L›)
                               A_10404 x0_10405 x_10406)), ∀ (A_10407 :
                                                             L) ->
                                                             ∀ (x0_10408 :
                                                               A_10407) ->
                                                               ∀ (x_10409 :
                                                                 (sing_3‹L,L›
                                                                   A_10407
                                                                   x0_10408)) ->
                                                                 (eq_1‹L›
                                                                   A_10407
                                                                   x0_10408
                                                                   ((sing_elim_1‹L,L›)
                                                                    A_10407
                                                                    x0_10408
                                                                    x_10409)))
Logical.infer_tm(∀ (A_10413 : L) ->
                   ∀ (x0_10414 : A_10413) ->
                     ∀ (x_10415 : (sing_3‹L,U› A_10413 x0_10414)) ->
                       (eq_1‹L›
                         A_10413 x0_10414
                         ((sing_elim_1‹L,U›) A_10413 x0_10414 x_10415)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (x0_10417 : A_10416) ->
                   ∀ (x_10418 : (sing_3‹L,U› A_10416 x0_10417)) ->
                     (eq_1‹L›
                       A_10416 x0_10417
                       ((sing_elim_1‹L,U›) A_10416 x0_10417 x_10418)))
Logical.infer_tm(A_10416)
Logical.infer_tm(∀ (x_10420 : (sing_3‹L,U› A_10416 x0_10419)) ->
                   (eq_1‹L›
                     A_10416 x0_10419
                     ((sing_elim_1‹L,U›) A_10416 x0_10419 x_10420)))
Logical.infer_tm((sing_3‹L,U› A_10416 x0_10419))
Logical.check_tm( A_10416, L )
Logical.infer_tm(A_10416)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10419, A_10416 )
Logical.infer_tm(x0_10419)
Logical.assert_equal(A_10416, A_10416)
Logical.infer_tm((eq_1‹L›
                   A_10416 x0_10419
                   ((sing_elim_1‹L,U›) A_10416 x0_10419 x_10421)))
Logical.check_tm( A_10416, L )
Logical.infer_tm(A_10416)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10419, A_10416 )
Logical.infer_tm(x0_10419)
Logical.assert_equal(A_10416, A_10416)
Logical.check_tm( ((sing_elim_1‹L,U›) A_10416 x0_10419 x_10421), 
A_10416 )
Logical.infer_tm(((sing_elim_1‹L,U›) A_10416 x0_10419 x_10421))
Logical.infer_tm(((sing_elim_1‹L,U›) A_10416 x0_10419))
Logical.infer_tm(((sing_elim_1‹L,U›) A_10416))
Logical.infer_tm(sing_elim_1‹L,U›)
Logical.check_tm( A_10416, L )
Logical.infer_tm(A_10416)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10419, A_10416 )
Logical.infer_tm(x0_10419)
Logical.assert_equal(A_10416, A_10416)
Logical.check_tm( x_10421, (sing_3‹L,U› A_10416 x0_10419) )
Logical.infer_tm(x_10421)
Logical.assert_equal((sing_3‹L,U› A_10416 x0_10419), (sing_3‹L,U›
                                                           A_10416 x0_10419))
Logical.assert_equal(A_10416, A_10416)
Logical.check_tm(
  function sing_uniq_10422 :
    ∀ (A_10423 : L) ->
      ∀ (x0_10424 : A_10423) ->
        ∀ (x_10425 : (sing_3‹L,U› A_10423 x0_10424)) ->
          (eq_1‹L›
            A_10423 x0_10424
            ((sing_elim_1‹L,U›) A_10423 x0_10424 x_10425))
  | A_10426 x0_10427 (just_3 m_10428) => (refl_1‹L› A_10426 m_10428),
  ∀ (A_10429 : L) ->
    ∀ (x0_10430 : A_10429) ->
      ∀ (x_10431 : (sing_3‹L,U› A_10429 x0_10430)) ->
        (eq_1‹L›
          A_10429 x0_10430 ((sing_elim_1‹L,U›) A_10429 x0_10430 x_10431))
)
Logical.infer_tm(function sing_uniq_10432 :
                   ∀ (A_10433 : L) ->
                     ∀ (x0_10434 : A_10433) ->
                       ∀ (x_10435 : (sing_3‹L,U› A_10433 x0_10434)) ->
                         (eq_1‹L›
                           A_10433 x0_10434
                           ((sing_elim_1‹L,U›) A_10433 x0_10434 x_10435))
                 | A_10436 x0_10437 (just_3 m_10438) =>
                   (refl_1‹L› A_10436 m_10438))
Logical.infer_tm(∀ (A_10440 : L) ->
                   ∀ (x0_10441 : A_10440) ->
                     ∀ (x_10442 : (sing_3‹L,U› A_10440 x0_10441)) ->
                       (eq_1‹L›
                         A_10440 x0_10441
                         ((sing_elim_1‹L,U›) A_10440 x0_10441 x_10442)))
Logical.infer_tm(L)
Logical.infer_tm(∀ (x0_10444 : A_10443) ->
                   ∀ (x_10445 : (sing_3‹L,U› A_10443 x0_10444)) ->
                     (eq_1‹L›
                       A_10443 x0_10444
                       ((sing_elim_1‹L,U›) A_10443 x0_10444 x_10445)))
Logical.infer_tm(A_10443)
Logical.infer_tm(∀ (x_10447 : (sing_3‹L,U› A_10443 x0_10446)) ->
                   (eq_1‹L›
                     A_10443 x0_10446
                     ((sing_elim_1‹L,U›) A_10443 x0_10446 x_10447)))
Logical.infer_tm((sing_3‹L,U› A_10443 x0_10446))
Logical.check_tm( A_10443, L )
Logical.infer_tm(A_10443)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10446, A_10443 )
Logical.infer_tm(x0_10446)
Logical.assert_equal(A_10443, A_10443)
Logical.infer_tm((eq_1‹L›
                   A_10443 x0_10446
                   ((sing_elim_1‹L,U›) A_10443 x0_10446 x_10448)))
Logical.check_tm( A_10443, L )
Logical.infer_tm(A_10443)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10446, A_10443 )
Logical.infer_tm(x0_10446)
Logical.assert_equal(A_10443, A_10443)
Logical.check_tm( ((sing_elim_1‹L,U›) A_10443 x0_10446 x_10448), 
A_10443 )
Logical.infer_tm(((sing_elim_1‹L,U›) A_10443 x0_10446 x_10448))
Logical.infer_tm(((sing_elim_1‹L,U›) A_10443 x0_10446))
Logical.infer_tm(((sing_elim_1‹L,U›) A_10443))
Logical.infer_tm(sing_elim_1‹L,U›)
Logical.check_tm( A_10443, L )
Logical.infer_tm(A_10443)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10446, A_10443 )
Logical.infer_tm(x0_10446)
Logical.assert_equal(A_10443, A_10443)
Logical.check_tm( x_10448, (sing_3‹L,U› A_10443 x0_10446) )
Logical.infer_tm(x_10448)
Logical.assert_equal((sing_3‹L,U› A_10443 x0_10446), (sing_3‹L,U›
                                                           A_10443 x0_10446))
Logical.assert_equal(A_10443, A_10443)
Logical.infer_tm(L)
Logical.infer_tm(A_10452)
Logical.infer_tm((sing_3‹L,U› A_10452 x0_10456))
Logical.check_tm( A_10452, L )
Logical.infer_tm(A_10452)
Logical.assert_equal(L, L)
Logical.check_tm( x0_10456, A_10452 )
Logical.infer_tm(x0_10456)
Logical.assert_equal(A_10452, A_10452)
Logical.assert_equal(∀ (A_10464 : L) ->
                       ∀ (x0_10465 : A_10464) ->
                         ∀ (x_10466 :
                           (sing_3‹L,U› A_10464 x0_10465)) ->
                           (eq_1‹L›
                             A_10464 x0_10465
                             ((sing_elim_1‹L,U›)
                               A_10464 x0_10465 x_10466)), ∀ (A_10467 :
                                                             L) ->
                                                             ∀ (x0_10468 :
                                                               A_10467) ->
                                                               ∀ (x_10469 :
                                                                 (sing_3‹L,U›
                                                                   A_10467
                                                                   x0_10468)) ->
                                                                 (eq_1‹L›
                                                                   A_10467
                                                                   x0_10468
                                                                   ((sing_elim_1‹L,U›)
                                                                    A_10467
                                                                    x0_10468
                                                                    x_10469)))
Logical.infer_tm(∀ (A_10473 : U) ->
                   ∀ (x0_10474 : A_10473) ->
                     ∀ (x_10475 : (sing_3‹U,L› A_10473 x0_10474)) ->
                       (eq_1‹U›
                         A_10473 x0_10474
                         ((sing_elim_1‹U,L›) A_10473 x0_10474 x_10475)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (x0_10477 : A_10476) ->
                   ∀ (x_10478 : (sing_3‹U,L› A_10476 x0_10477)) ->
                     (eq_1‹U›
                       A_10476 x0_10477
                       ((sing_elim_1‹U,L›) A_10476 x0_10477 x_10478)))
Logical.infer_tm(A_10476)
Logical.infer_tm(∀ (x_10480 : (sing_3‹U,L› A_10476 x0_10479)) ->
                   (eq_1‹U›
                     A_10476 x0_10479
                     ((sing_elim_1‹U,L›) A_10476 x0_10479 x_10480)))
Logical.infer_tm((sing_3‹U,L› A_10476 x0_10479))
Logical.check_tm( A_10476, U )
Logical.infer_tm(A_10476)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10479, A_10476 )
Logical.infer_tm(x0_10479)
Logical.assert_equal(A_10476, A_10476)
Logical.infer_tm((eq_1‹U›
                   A_10476 x0_10479
                   ((sing_elim_1‹U,L›) A_10476 x0_10479 x_10481)))
Logical.check_tm( A_10476, U )
Logical.infer_tm(A_10476)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10479, A_10476 )
Logical.infer_tm(x0_10479)
Logical.assert_equal(A_10476, A_10476)
Logical.check_tm( ((sing_elim_1‹U,L›) A_10476 x0_10479 x_10481), 
A_10476 )
Logical.infer_tm(((sing_elim_1‹U,L›) A_10476 x0_10479 x_10481))
Logical.infer_tm(((sing_elim_1‹U,L›) A_10476 x0_10479))
Logical.infer_tm(((sing_elim_1‹U,L›) A_10476))
Logical.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_10476, U )
Logical.infer_tm(A_10476)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10479, A_10476 )
Logical.infer_tm(x0_10479)
Logical.assert_equal(A_10476, A_10476)
Logical.check_tm( x_10481, (sing_3‹U,L› A_10476 x0_10479) )
Logical.infer_tm(x_10481)
Logical.assert_equal((sing_3‹U,L› A_10476 x0_10479), (sing_3‹U,L›
                                                           A_10476 x0_10479))
Logical.assert_equal(A_10476, A_10476)
Logical.check_tm(
  function sing_uniq_10482 :
    ∀ (A_10483 : U) ->
      ∀ (x0_10484 : A_10483) ->
        ∀ (x_10485 : (sing_3‹U,L› A_10483 x0_10484)) ->
          (eq_1‹U›
            A_10483 x0_10484
            ((sing_elim_1‹U,L›) A_10483 x0_10484 x_10485))
  | A_10486 x0_10487 (just_3 m_10488) => (refl_1‹U› A_10486 m_10488),
  ∀ (A_10489 : U) ->
    ∀ (x0_10490 : A_10489) ->
      ∀ (x_10491 : (sing_3‹U,L› A_10489 x0_10490)) ->
        (eq_1‹U›
          A_10489 x0_10490 ((sing_elim_1‹U,L›) A_10489 x0_10490 x_10491))
)
Logical.infer_tm(function sing_uniq_10492 :
                   ∀ (A_10493 : U) ->
                     ∀ (x0_10494 : A_10493) ->
                       ∀ (x_10495 : (sing_3‹U,L› A_10493 x0_10494)) ->
                         (eq_1‹U›
                           A_10493 x0_10494
                           ((sing_elim_1‹U,L›) A_10493 x0_10494 x_10495))
                 | A_10496 x0_10497 (just_3 m_10498) =>
                   (refl_1‹U› A_10496 m_10498))
Logical.infer_tm(∀ (A_10500 : U) ->
                   ∀ (x0_10501 : A_10500) ->
                     ∀ (x_10502 : (sing_3‹U,L› A_10500 x0_10501)) ->
                       (eq_1‹U›
                         A_10500 x0_10501
                         ((sing_elim_1‹U,L›) A_10500 x0_10501 x_10502)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (x0_10504 : A_10503) ->
                   ∀ (x_10505 : (sing_3‹U,L› A_10503 x0_10504)) ->
                     (eq_1‹U›
                       A_10503 x0_10504
                       ((sing_elim_1‹U,L›) A_10503 x0_10504 x_10505)))
Logical.infer_tm(A_10503)
Logical.infer_tm(∀ (x_10507 : (sing_3‹U,L› A_10503 x0_10506)) ->
                   (eq_1‹U›
                     A_10503 x0_10506
                     ((sing_elim_1‹U,L›) A_10503 x0_10506 x_10507)))
Logical.infer_tm((sing_3‹U,L› A_10503 x0_10506))
Logical.check_tm( A_10503, U )
Logical.infer_tm(A_10503)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10506, A_10503 )
Logical.infer_tm(x0_10506)
Logical.assert_equal(A_10503, A_10503)
Logical.infer_tm((eq_1‹U›
                   A_10503 x0_10506
                   ((sing_elim_1‹U,L›) A_10503 x0_10506 x_10508)))
Logical.check_tm( A_10503, U )
Logical.infer_tm(A_10503)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10506, A_10503 )
Logical.infer_tm(x0_10506)
Logical.assert_equal(A_10503, A_10503)
Logical.check_tm( ((sing_elim_1‹U,L›) A_10503 x0_10506 x_10508), 
A_10503 )
Logical.infer_tm(((sing_elim_1‹U,L›) A_10503 x0_10506 x_10508))
Logical.infer_tm(((sing_elim_1‹U,L›) A_10503 x0_10506))
Logical.infer_tm(((sing_elim_1‹U,L›) A_10503))
Logical.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_10503, U )
Logical.infer_tm(A_10503)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10506, A_10503 )
Logical.infer_tm(x0_10506)
Logical.assert_equal(A_10503, A_10503)
Logical.check_tm( x_10508, (sing_3‹U,L› A_10503 x0_10506) )
Logical.infer_tm(x_10508)
Logical.assert_equal((sing_3‹U,L› A_10503 x0_10506), (sing_3‹U,L›
                                                           A_10503 x0_10506))
Logical.assert_equal(A_10503, A_10503)
Logical.infer_tm(U)
Logical.infer_tm(A_10512)
Logical.infer_tm((sing_3‹U,L› A_10512 x0_10516))
Logical.check_tm( A_10512, U )
Logical.infer_tm(A_10512)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10516, A_10512 )
Logical.infer_tm(x0_10516)
Logical.assert_equal(A_10512, A_10512)
Logical.infer_tm(A_10512)
case_coverage{|
  prblm {|
    eq_term?( (sing_3‹U,L› #A_10512 #x0_10516),
      (sing_3‹U,L› #A_10512 #m_10524));
    {| eq_pat?(R #A_10512, A_10509 : U)
       eq_pat?(R #x0_10516, x0_10510 : #A_10512)
       eq_pat?(R #m_10524, m_10511 : #A_10512) ::: [] =>?
         (refl_1‹U› #A_10509 #m_10511)
    |}
  |}
|}
unify_local(
  eq_pat?(R #A_10512, A_10509 : U)
  eq_pat?(R #x0_10516, x0_10510 : #A_10512)
  eq_pat?(R #m_10524, m_10511 : #A_10512)
)
unify_global(
  eq_term?( (sing_3‹U,L› #A_10512 #x0_10516),
    (sing_3‹U,L› #A_10512 #m_10524))
)
simpl_pprbm ~expand:false( #A_10512, #A_10509)
simpl_pprbm ~expand:false( #x0_10516, #x0_10510)
simpl_pprbm ~expand:false( #m_10524, #m_10511)
simpl_pprbm ~expand:false( (sing_3‹U,L› #A_10512 #x0_10516),
  (sing_3‹U,L› #A_10512 #m_10524))
simpl_pprbm ~expand:false( #A_10512, #A_10512)
simpl_pprbm ~expand:false( #x0_10516, #m_10524)
case_coverage_ok( (refl_1‹U› A_10512 m_10524),
  (eq_1‹U›
    A_10512 m_10524
    ((sing_elim_1‹U,L›)
      A_10512 m_10524 (just_3‹U,L› A_10512 m_10524))))
Logical.check_tm( (refl_1‹U› A_10512 m_10524),
  (eq_1‹U›
    A_10512 m_10524
    ((sing_elim_1‹U,L›)
      A_10512 m_10524 (just_3‹U,L› A_10512 m_10524)))
)
Logical.infer_tm((refl_1‹U› A_10512 m_10524))
Logical.check_tm( A_10512, U )
Logical.infer_tm(A_10512)
Logical.assert_equal(U, U)
Logical.check_tm( m_10524, A_10512 )
Logical.infer_tm(m_10524)
Logical.assert_equal(A_10512, A_10512)
Logical.assert_equal((eq_1‹U›
                       A_10512 m_10524
                       ((sing_elim_1‹U,L›)
                         A_10512 m_10524 (just_3‹U,L› A_10512 m_10524))), 
(eq_1‹U› A_10512 m_10524 m_10524))
Logical.assert_equal(∀ (A_10534 : U) ->
                       ∀ (x0_10535 : A_10534) ->
                         ∀ (x_10536 :
                           (sing_3‹U,L› A_10534 x0_10535)) ->
                           (eq_1‹U›
                             A_10534 x0_10535
                             ((sing_elim_1‹U,L›)
                               A_10534 x0_10535 x_10536)), ∀ (A_10537 :
                                                             U) ->
                                                             ∀ (x0_10538 :
                                                               A_10537) ->
                                                               ∀ (x_10539 :
                                                                 (sing_3‹U,L›
                                                                   A_10537
                                                                   x0_10538)) ->
                                                                 (eq_1‹U›
                                                                   A_10537
                                                                   x0_10538
                                                                   ((sing_elim_1‹U,L›)
                                                                    A_10537
                                                                    x0_10538
                                                                    x_10539)))
Logical.infer_tm(∀ (A_10543 : U) ->
                   ∀ (x0_10544 : A_10543) ->
                     ∀ (x_10545 : (sing_3‹U,U› A_10543 x0_10544)) ->
                       (eq_1‹U›
                         A_10543 x0_10544
                         ((sing_elim_1‹U,U›) A_10543 x0_10544 x_10545)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (x0_10547 : A_10546) ->
                   ∀ (x_10548 : (sing_3‹U,U› A_10546 x0_10547)) ->
                     (eq_1‹U›
                       A_10546 x0_10547
                       ((sing_elim_1‹U,U›) A_10546 x0_10547 x_10548)))
Logical.infer_tm(A_10546)
Logical.infer_tm(∀ (x_10550 : (sing_3‹U,U› A_10546 x0_10549)) ->
                   (eq_1‹U›
                     A_10546 x0_10549
                     ((sing_elim_1‹U,U›) A_10546 x0_10549 x_10550)))
Logical.infer_tm((sing_3‹U,U› A_10546 x0_10549))
Logical.check_tm( A_10546, U )
Logical.infer_tm(A_10546)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10549, A_10546 )
Logical.infer_tm(x0_10549)
Logical.assert_equal(A_10546, A_10546)
Logical.infer_tm((eq_1‹U›
                   A_10546 x0_10549
                   ((sing_elim_1‹U,U›) A_10546 x0_10549 x_10551)))
Logical.check_tm( A_10546, U )
Logical.infer_tm(A_10546)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10549, A_10546 )
Logical.infer_tm(x0_10549)
Logical.assert_equal(A_10546, A_10546)
Logical.check_tm( ((sing_elim_1‹U,U›) A_10546 x0_10549 x_10551), 
A_10546 )
Logical.infer_tm(((sing_elim_1‹U,U›) A_10546 x0_10549 x_10551))
Logical.infer_tm(((sing_elim_1‹U,U›) A_10546 x0_10549))
Logical.infer_tm(((sing_elim_1‹U,U›) A_10546))
Logical.infer_tm(sing_elim_1‹U,U›)
Logical.check_tm( A_10546, U )
Logical.infer_tm(A_10546)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10549, A_10546 )
Logical.infer_tm(x0_10549)
Logical.assert_equal(A_10546, A_10546)
Logical.check_tm( x_10551, (sing_3‹U,U› A_10546 x0_10549) )
Logical.infer_tm(x_10551)
Logical.assert_equal((sing_3‹U,U› A_10546 x0_10549), (sing_3‹U,U›
                                                           A_10546 x0_10549))
Logical.assert_equal(A_10546, A_10546)
Logical.check_tm(
  function sing_uniq_10552 :
    ∀ (A_10553 : U) ->
      ∀ (x0_10554 : A_10553) ->
        ∀ (x_10555 : (sing_3‹U,U› A_10553 x0_10554)) ->
          (eq_1‹U›
            A_10553 x0_10554
            ((sing_elim_1‹U,U›) A_10553 x0_10554 x_10555))
  | A_10556 x0_10557 (just_3 m_10558) => (refl_1‹U› A_10556 m_10558),
  ∀ (A_10559 : U) ->
    ∀ (x0_10560 : A_10559) ->
      ∀ (x_10561 : (sing_3‹U,U› A_10559 x0_10560)) ->
        (eq_1‹U›
          A_10559 x0_10560 ((sing_elim_1‹U,U›) A_10559 x0_10560 x_10561))
)
Logical.infer_tm(function sing_uniq_10562 :
                   ∀ (A_10563 : U) ->
                     ∀ (x0_10564 : A_10563) ->
                       ∀ (x_10565 : (sing_3‹U,U› A_10563 x0_10564)) ->
                         (eq_1‹U›
                           A_10563 x0_10564
                           ((sing_elim_1‹U,U›) A_10563 x0_10564 x_10565))
                 | A_10566 x0_10567 (just_3 m_10568) =>
                   (refl_1‹U› A_10566 m_10568))
Logical.infer_tm(∀ (A_10570 : U) ->
                   ∀ (x0_10571 : A_10570) ->
                     ∀ (x_10572 : (sing_3‹U,U› A_10570 x0_10571)) ->
                       (eq_1‹U›
                         A_10570 x0_10571
                         ((sing_elim_1‹U,U›) A_10570 x0_10571 x_10572)))
Logical.infer_tm(U)
Logical.infer_tm(∀ (x0_10574 : A_10573) ->
                   ∀ (x_10575 : (sing_3‹U,U› A_10573 x0_10574)) ->
                     (eq_1‹U›
                       A_10573 x0_10574
                       ((sing_elim_1‹U,U›) A_10573 x0_10574 x_10575)))
Logical.infer_tm(A_10573)
Logical.infer_tm(∀ (x_10577 : (sing_3‹U,U› A_10573 x0_10576)) ->
                   (eq_1‹U›
                     A_10573 x0_10576
                     ((sing_elim_1‹U,U›) A_10573 x0_10576 x_10577)))
Logical.infer_tm((sing_3‹U,U› A_10573 x0_10576))
Logical.check_tm( A_10573, U )
Logical.infer_tm(A_10573)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10576, A_10573 )
Logical.infer_tm(x0_10576)
Logical.assert_equal(A_10573, A_10573)
Logical.infer_tm((eq_1‹U›
                   A_10573 x0_10576
                   ((sing_elim_1‹U,U›) A_10573 x0_10576 x_10578)))
Logical.check_tm( A_10573, U )
Logical.infer_tm(A_10573)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10576, A_10573 )
Logical.infer_tm(x0_10576)
Logical.assert_equal(A_10573, A_10573)
Logical.check_tm( ((sing_elim_1‹U,U›) A_10573 x0_10576 x_10578), 
A_10573 )
Logical.infer_tm(((sing_elim_1‹U,U›) A_10573 x0_10576 x_10578))
Logical.infer_tm(((sing_elim_1‹U,U›) A_10573 x0_10576))
Logical.infer_tm(((sing_elim_1‹U,U›) A_10573))
Logical.infer_tm(sing_elim_1‹U,U›)
Logical.check_tm( A_10573, U )
Logical.infer_tm(A_10573)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10576, A_10573 )
Logical.infer_tm(x0_10576)
Logical.assert_equal(A_10573, A_10573)
Logical.check_tm( x_10578, (sing_3‹U,U› A_10573 x0_10576) )
Logical.infer_tm(x_10578)
Logical.assert_equal((sing_3‹U,U› A_10573 x0_10576), (sing_3‹U,U›
                                                           A_10573 x0_10576))
Logical.assert_equal(A_10573, A_10573)
Logical.infer_tm(U)
Logical.infer_tm(A_10582)
Logical.infer_tm((sing_3‹U,U› A_10582 x0_10586))
Logical.check_tm( A_10582, U )
Logical.infer_tm(A_10582)
Logical.assert_equal(U, U)
Logical.check_tm( x0_10586, A_10582 )
Logical.infer_tm(x0_10586)
Logical.assert_equal(A_10582, A_10582)
Logical.infer_tm(A_10582)
case_coverage{|
  prblm {|
    eq_term?( (sing_3‹U,U› #A_10582 #x0_10586),
      (sing_3‹U,U› #A_10582 #m_10594));
    {| eq_pat?(R #A_10582, A_10579 : U)
       eq_pat?(R #x0_10586, x0_10580 : #A_10582)
       eq_pat?(R #m_10594, m_10581 : #A_10582) ::: [] =>?
         (refl_1‹U› #A_10579 #m_10581)
    |}
  |}
|}
unify_local(
  eq_pat?(R #A_10582, A_10579 : U)
  eq_pat?(R #x0_10586, x0_10580 : #A_10582)
  eq_pat?(R #m_10594, m_10581 : #A_10582)
)
unify_global(
  eq_term?( (sing_3‹U,U› #A_10582 #x0_10586),
    (sing_3‹U,U› #A_10582 #m_10594))
)
simpl_pprbm ~expand:false( #A_10582, #A_10579)
simpl_pprbm ~expand:false( #x0_10586, #x0_10580)
simpl_pprbm ~expand:false( #m_10594, #m_10581)
simpl_pprbm ~expand:false( (sing_3‹U,U› #A_10582 #x0_10586),
  (sing_3‹U,U› #A_10582 #m_10594))
simpl_pprbm ~expand:false( #A_10582, #A_10582)
simpl_pprbm ~expand:false( #x0_10586, #m_10594)
case_coverage_ok( (refl_1‹U› A_10582 m_10594),
  (eq_1‹U›
    A_10582 m_10594
    ((sing_elim_1‹U,U›)
      A_10582 m_10594 (just_3‹U,U› A_10582 m_10594))))
Logical.check_tm( (refl_1‹U› A_10582 m_10594),
  (eq_1‹U›
    A_10582 m_10594
    ((sing_elim_1‹U,U›)
      A_10582 m_10594 (just_3‹U,U› A_10582 m_10594)))
)
Logical.infer_tm((refl_1‹U› A_10582 m_10594))
Logical.check_tm( A_10582, U )
Logical.infer_tm(A_10582)
Logical.assert_equal(U, U)
Logical.check_tm( m_10594, A_10582 )
Logical.infer_tm(m_10594)
Logical.assert_equal(A_10582, A_10582)
Logical.assert_equal((eq_1‹U›
                       A_10582 m_10594
                       ((sing_elim_1‹U,U›)
                         A_10582 m_10594 (just_3‹U,U› A_10582 m_10594))), 
(eq_1‹U› A_10582 m_10594 m_10594))
Logical.assert_equal(∀ (A_10604 : U) ->
                       ∀ (x0_10605 : A_10604) ->
                         ∀ (x_10606 :
                           (sing_3‹U,U› A_10604 x0_10605)) ->
                           (eq_1‹U›
                             A_10604 x0_10605
                             ((sing_elim_1‹U,U›)
                               A_10604 x0_10605 x_10606)), ∀ (A_10607 :
                                                             U) ->
                                                             ∀ (x0_10608 :
                                                               A_10607) ->
                                                               ∀ (x_10609 :
                                                                 (sing_3‹U,U›
                                                                   A_10607
                                                                   x0_10608)) ->
                                                                 (eq_1‹U›
                                                                   A_10607
                                                                   x0_10608
                                                                   ((sing_elim_1‹U,U›)
                                                                    A_10607
                                                                    x0_10608
                                                                    x_10609)))
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_10614)
Logical.infer_tm(∀ (x_10617 : choice_6) -o
                   match x_10617 in choice_6 -o L with
                   | next_7 => (stream_node_9‹L› A_10614)
                   | free_8 => unit_4‹L›)
Logical.infer_tm(choice_6)
Logical.infer_tm(match x_10619 in choice_6 -o L with
                 | next_7 => (stream_node_9‹L› A_10614)
                 | free_8 => unit_4‹L›)
Logical.check_tm( x_10619, choice_6 )
Logical.infer_tm(x_10619)
Logical.assert_equal(choice_6, choice_6)
Logical.infer_tm(choice_6)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {|  ::: [] =>? (stream_node_9‹L› A_10614) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( (stream_node_9‹L› A_10614), L)
Logical.check_tm( (stream_node_9‹L› A_10614), L )
Logical.infer_tm((stream_node_9‹L› A_10614))
Logical.check_tm( A_10614, L )
Logical.infer_tm(A_10614)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6); {|  ::: [] =>? unit_4‹L› |} |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.infer_tm((stream_node_9‹L› A_10614))
Logical.check_tm( A_10614, L )
Logical.infer_tm(A_10614)
Logical.assert_equal(L, L)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_10623)
Logical.infer_tm(∀ (x_10626 : choice_6) -o
                   match x_10626 in choice_6 -o L with
                   | next_7 => (stream_node_9‹U› A_10623)
                   | free_8 => unit_4‹L›)
Logical.infer_tm(choice_6)
Logical.infer_tm(match x_10628 in choice_6 -o L with
                 | next_7 => (stream_node_9‹U› A_10623)
                 | free_8 => unit_4‹L›)
Logical.check_tm( x_10628, choice_6 )
Logical.infer_tm(x_10628)
Logical.assert_equal(choice_6, choice_6)
Logical.infer_tm(choice_6)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {|  ::: [] =>? (stream_node_9‹U› A_10623) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( (stream_node_9‹U› A_10623), L)
Logical.check_tm( (stream_node_9‹U› A_10623), L )
Logical.infer_tm((stream_node_9‹U› A_10623))
Logical.check_tm( A_10623, U )
Logical.infer_tm(A_10623)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6); {|  ::: [] =>? unit_4‹L› |} |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.infer_tm((stream_node_9‹U› A_10623))
Logical.check_tm( A_10623, U )
Logical.infer_tm(A_10623)
Logical.assert_equal(U, U)
Logical.infer_tm(L -> L)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.check_tm(
  function stream_10633 : L -> L
  | A_10635 =>
    ∀ (x_10636 : choice_6) -o
      match x_10636 in choice_6 -o L with
      | next_7 => (stream_node_9‹L› A_10635)
      | free_8 => unit_4‹L›,
  L -> L
)
Logical.infer_tm(function stream_10639 : L -> L
                 | A_10641 =>
                   ∀ (x_10642 : choice_6) -o
                     match x_10642 in choice_6 -o L with
                     | next_7 => (stream_node_9‹L› A_10641)
                     | free_8 => unit_4‹L›)
Logical.infer_tm(L -> L)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(L)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #A_10648, A_10647 : L) ::: [] =>?
         ∀ (x_10650 : choice_6) -o
           match x_10650 in choice_6 -o L with
           | next_7 => (stream_node_9‹L› #A_10647)
           | free_8 => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?(R #A_10648, A_10647 : L) )
unify_global(  )
simpl_pprbm ~expand:false( #A_10648, #A_10647)
case_coverage_ok(
  ∀ (x_10655 : choice_6) -o
    match x_10655 in choice_6 -o L with
    | next_7 => (stream_node_9‹L› A_10648)
    | free_8 => unit_4‹L›,
  L)
Logical.check_tm(
  ∀ (x_10657 : choice_6) -o
    match x_10657 in choice_6 -o L with
    | next_7 => (stream_node_9‹L› A_10648)
    | free_8 => unit_4‹L›,
  L
)
Logical.infer_tm(∀ (x_10659 : choice_6) -o
                   match x_10659 in choice_6 -o L with
                   | next_7 => (stream_node_9‹L› A_10648)
                   | free_8 => unit_4‹L›)
Logical.infer_tm(choice_6)
Logical.infer_tm(match x_10661 in choice_6 -o L with
                 | next_7 => (stream_node_9‹L› A_10648)
                 | free_8 => unit_4‹L›)
Logical.check_tm( x_10661, choice_6 )
Logical.infer_tm(x_10661)
Logical.assert_equal(choice_6, choice_6)
Logical.infer_tm(choice_6)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {|  ::: [] =>? (stream_node_9‹L› A_10648) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( (stream_node_9‹L› A_10648), L)
Logical.check_tm( (stream_node_9‹L› A_10648), L )
Logical.infer_tm((stream_node_9‹L› A_10648))
Logical.check_tm( A_10648, L )
Logical.infer_tm(A_10648)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6); {|  ::: [] =>? unit_4‹L› |} |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.assert_equal(L -> L, L -> L)
Logical.infer_tm(U -> L)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.check_tm(
  function stream_10674 : U -> L
  | A_10676 =>
    ∀ (x_10677 : choice_6) -o
      match x_10677 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› A_10676)
      | free_8 => unit_4‹L›,
  U -> L
)
Logical.infer_tm(function stream_10680 : U -> L
                 | A_10682 =>
                   ∀ (x_10683 : choice_6) -o
                     match x_10683 in choice_6 -o L with
                     | next_7 => (stream_node_9‹U› A_10682)
                     | free_8 => unit_4‹L›)
Logical.infer_tm(U -> L)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(U)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #A_10689, A_10688 : U) ::: [] =>?
         ∀ (x_10691 : choice_6) -o
           match x_10691 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› #A_10688)
           | free_8 => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?(R #A_10689, A_10688 : U) )
unify_global(  )
simpl_pprbm ~expand:false( #A_10689, #A_10688)
case_coverage_ok(
  ∀ (x_10696 : choice_6) -o
    match x_10696 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› A_10689)
    | free_8 => unit_4‹L›,
  L)
Logical.check_tm(
  ∀ (x_10698 : choice_6) -o
    match x_10698 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› A_10689)
    | free_8 => unit_4‹L›,
  L
)
Logical.infer_tm(∀ (x_10700 : choice_6) -o
                   match x_10700 in choice_6 -o L with
                   | next_7 => (stream_node_9‹U› A_10689)
                   | free_8 => unit_4‹L›)
Logical.infer_tm(choice_6)
Logical.infer_tm(match x_10702 in choice_6 -o L with
                 | next_7 => (stream_node_9‹U› A_10689)
                 | free_8 => unit_4‹L›)
Logical.check_tm( x_10702, choice_6 )
Logical.infer_tm(x_10702)
Logical.assert_equal(choice_6, choice_6)
Logical.infer_tm(choice_6)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {|  ::: [] =>? (stream_node_9‹U› A_10689) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( (stream_node_9‹U› A_10689), L)
Logical.check_tm( (stream_node_9‹U› A_10689), L )
Logical.infer_tm((stream_node_9‹U› A_10689))
Logical.check_tm( A_10689, U )
Logical.infer_tm(A_10689)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6); {|  ::: [] =>? unit_4‹L› |} |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.assert_equal(U -> L, U -> L)
Logical.infer_tm(∀ {A_10713 : L} ->
                   ((stream_3‹L›) A_10713) -> unit_4‹U›)
Logical.infer_tm(L)
Logical.infer_tm(((stream_3‹L›) A_10715) -> unit_4‹U›)
Logical.infer_tm(((stream_3‹L›) A_10715))
Logical.infer_tm(stream_3‹L›)
Logical.check_tm( A_10715, L )
Logical.infer_tm(A_10715)
Logical.assert_equal(L, L)
Logical.infer_tm(unit_4‹U›)
Program.check_tm(
  function free_stream_10718 :
    ∀ {A_10719 : L} -> ((stream_3‹L›) A_10719) -> unit_4‹U›
  | A_10721 st_10722 =>
    match ((st_10722) free_8) in unit_4‹L› -o unit_4‹U› with
    | tt_4 => tt_4‹U›,
  ∀ {A_10724 : L} -> ((stream_3‹L›) A_10724) -> unit_4‹U›
)
Program.infer_tm(function free_stream_10726 :
                   ∀ {A_10727 : L} ->
                     ((stream_3‹L›) A_10727) -> unit_4‹U›
                 | A_10729 st_10730 =>
                   match ((st_10730) free_8) in
                     unit_4‹L› -o unit_4‹U›
                   with
                   | tt_4 => tt_4‹U›)
Logical.infer_tm(∀ {A_10733 : L} ->
                   ((stream_3‹L›) A_10733) -> unit_4‹U›)
Logical.infer_tm(L)
Logical.infer_tm(((stream_3‹L›) A_10735) -> unit_4‹U›)
Logical.infer_tm(((stream_3‹L›) A_10735))
Logical.infer_tm(stream_3‹L›)
Logical.check_tm( A_10735, L )
Logical.infer_tm(A_10735)
Logical.assert_equal(L, L)
Logical.infer_tm(unit_4‹U›)
trans12.Program.case_intro(A_10740, L)
Logical.infer_tm(L)
trans12.Program.case_intro(st_10743, ((stream_3‹L›) #A_10740))
Logical.infer_tm(((stream_3‹L›) A_10740))
Logical.infer_tm(stream_3‹L›)
Logical.check_tm( A_10740, L )
Logical.infer_tm(A_10740)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| ;
    {| eq_pat?(N #A_10740, A_10738 : L)
       eq_pat?(R #st_10743, st_10739 : ((stream_3‹L›) #A_10740)) ::: [] =>?
         match ((#st_10739) free_8) in unit_4‹L› -o unit_4‹U› with
         | tt_4 => tt_4‹U›
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_10740, A_10738 : L)
  eq_pat?(R #st_10743, st_10739 : ((stream_3‹L›) #A_10740))
)
unify_global(  )
simpl_pprbm ~expand:false( #A_10740, #A_10738)
simpl_pprbm ~expand:false( #st_10743, #st_10739)
case_coverage_ok(
  match ((st_10743) free_8) in unit_4‹L› -o unit_4‹U› with
  | tt_4 => tt_4‹U›, unit_4‹U›)
Program.check_tm(
  match ((st_10743) free_8) in unit_4‹L› -o unit_4‹U› with
  | tt_4 => tt_4‹U›, unit_4‹U›
)
Program.infer_tm(match ((st_10743) free_8) in unit_4‹L› -o unit_4‹U›
                 with
                 | tt_4 => tt_4‹U›)
Program.infer_motive_R(((st_10743) free_8), unit_4‹L›)
Program.check_tm( ((st_10743) free_8), unit_4‹L› )
Program.infer_tm(((st_10743) free_8))
Program.infer_tm(st_10743)
Program.check_tm( free_8, choice_6 )
Program.infer_tm(free_8)
Logical.assert_equal(choice_6, choice_6)
Logical.assert_equal(unit_4‹L›, match free_8 in choice_6 -o L with
                                    | next_7 =>
                                      (stream_node_9‹L› A_10740)
                                    | free_8 => unit_4‹L›)
Program.infer_motive_R_ok(((st_10743) free_8), unit_4‹L›)
Program.infer_motive_ok
trans12.Program.case_intro(_10754, unit_4‹L›)
Logical.infer_tm(unit_4‹L›)
Logical.infer_tm(unit_4‹L›)
trans12.Program.case_split(unitL_19, ttL_22)
case_coverage{|
  prblm {| eq_term?( unit_4‹L›, unit_4‹L›);
    {|  ::: [] =>? tt_4‹U› |}
  |}
|}
unify_local(  )
unify_global( eq_term?( unit_4‹L›, unit_4‹L›) )
simpl_pprbm ~expand:false( unit_4‹L›, unit_4‹L›)
case_coverage_ok( tt_4‹U›, unit_4‹U›)
Program.check_tm( tt_4‹U›, unit_4‹U› )
Program.infer_tm(tt_4‹U›)
Logical.assert_equal(unit_4‹U›, unit_4‹U›)
trans12.Program.case_introed(unit_4‹L›)
Logical.assert_equal(unit_4‹U›, unit_4‹U›)
trans12.Program.case_introed(((stream_3‹L›) #A_10740))
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_10763 : L} ->
                       ((stream_3‹L›) A_10763) -> unit_4‹U›, 
∀ {A_10765 : L} -> ((stream_3‹L›) A_10765) -> unit_4‹U›)
Logical.infer_tm(∀ {A_10769 : U} ->
                   ((stream_3‹U›) A_10769) -> unit_4‹U›)
Logical.infer_tm(U)
Logical.infer_tm(((stream_3‹U›) A_10771) -> unit_4‹U›)
Logical.infer_tm(((stream_3‹U›) A_10771))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( A_10771, U )
Logical.infer_tm(A_10771)
Logical.assert_equal(U, U)
Logical.infer_tm(unit_4‹U›)
Program.check_tm(
  function free_stream_10774 :
    ∀ {A_10775 : U} -> ((stream_3‹U›) A_10775) -> unit_4‹U›
  | A_10777 st_10778 =>
    match ((st_10778) free_8) in unit_4‹L› -o unit_4‹U› with
    | tt_4 => tt_4‹U›,
  ∀ {A_10780 : U} -> ((stream_3‹U›) A_10780) -> unit_4‹U›
)
Program.infer_tm(function free_stream_10782 :
                   ∀ {A_10783 : U} ->
                     ((stream_3‹U›) A_10783) -> unit_4‹U›
                 | A_10785 st_10786 =>
                   match ((st_10786) free_8) in
                     unit_4‹L› -o unit_4‹U›
                   with
                   | tt_4 => tt_4‹U›)
Logical.infer_tm(∀ {A_10789 : U} ->
                   ((stream_3‹U›) A_10789) -> unit_4‹U›)
Logical.infer_tm(U)
Logical.infer_tm(((stream_3‹U›) A_10791) -> unit_4‹U›)
Logical.infer_tm(((stream_3‹U›) A_10791))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( A_10791, U )
Logical.infer_tm(A_10791)
Logical.assert_equal(U, U)
Logical.infer_tm(unit_4‹U›)
trans12.Program.case_intro(A_10796, U)
Logical.infer_tm(U)
trans12.Program.case_intro(st_10799, ((stream_3‹U›) #A_10796))
Logical.infer_tm(((stream_3‹U›) A_10796))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( A_10796, U )
Logical.infer_tm(A_10796)
Logical.assert_equal(U, U)
case_coverage{|
  prblm {| ;
    {| eq_pat?(N #A_10796, A_10794 : U)
       eq_pat?(R #st_10799, st_10795 : ((stream_3‹U›) #A_10796)) ::: [] =>?
         match ((#st_10795) free_8) in unit_4‹L› -o unit_4‹U› with
         | tt_4 => tt_4‹U›
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_10796, A_10794 : U)
  eq_pat?(R #st_10799, st_10795 : ((stream_3‹U›) #A_10796))
)
unify_global(  )
simpl_pprbm ~expand:false( #A_10796, #A_10794)
simpl_pprbm ~expand:false( #st_10799, #st_10795)
case_coverage_ok(
  match ((st_10799) free_8) in unit_4‹L› -o unit_4‹U› with
  | tt_4 => tt_4‹U›, unit_4‹U›)
Program.check_tm(
  match ((st_10799) free_8) in unit_4‹L› -o unit_4‹U› with
  | tt_4 => tt_4‹U›, unit_4‹U›
)
Program.infer_tm(match ((st_10799) free_8) in unit_4‹L› -o unit_4‹U›
                 with
                 | tt_4 => tt_4‹U›)
Program.infer_motive_R(((st_10799) free_8), unit_4‹L›)
Program.check_tm( ((st_10799) free_8), unit_4‹L› )
Program.infer_tm(((st_10799) free_8))
Program.infer_tm(st_10799)
Program.check_tm( free_8, choice_6 )
Program.infer_tm(free_8)
Logical.assert_equal(choice_6, choice_6)
Logical.assert_equal(unit_4‹L›, match free_8 in choice_6 -o L with
                                    | next_7 =>
                                      (stream_node_9‹U› A_10796)
                                    | free_8 => unit_4‹L›)
Program.infer_motive_R_ok(((st_10799) free_8), unit_4‹L›)
Program.infer_motive_ok
trans12.Program.case_intro(_10810, unit_4‹L›)
Logical.infer_tm(unit_4‹L›)
Logical.infer_tm(unit_4‹L›)
trans12.Program.case_split(unitL_19, ttL_22)
case_coverage{|
  prblm {| eq_term?( unit_4‹L›, unit_4‹L›);
    {|  ::: [] =>? tt_4‹U› |}
  |}
|}
unify_local(  )
unify_global( eq_term?( unit_4‹L›, unit_4‹L›) )
simpl_pprbm ~expand:false( unit_4‹L›, unit_4‹L›)
case_coverage_ok( tt_4‹U›, unit_4‹U›)
Program.check_tm( tt_4‹U›, unit_4‹U› )
Program.infer_tm(tt_4‹U›)
Logical.assert_equal(unit_4‹U›, unit_4‹U›)
trans12.Program.case_introed(unit_4‹L›)
Logical.assert_equal(unit_4‹U›, unit_4‹U›)
trans12.Program.case_introed(((stream_3‹U›) #A_10796))
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_10819 : U} ->
                       ((stream_3‹U›) A_10819) -> unit_4‹U›, 
∀ {A_10821 : U} -> ((stream_3‹U›) A_10821) -> unit_4‹U›)
Logical.infer_tm(∀ {A_10825 : L} ->
                   ((stream_3‹L›) A_10825) ->
                     (prod_7‹L,L,L› A_10825 ((stream_3‹L›) A_10825)))
Logical.infer_tm(L)
Logical.infer_tm(((stream_3‹L›) A_10827) ->
                   (prod_7‹L,L,L› A_10827 ((stream_3‹L›) A_10827)))
Logical.infer_tm(((stream_3‹L›) A_10827))
Logical.infer_tm(stream_3‹L›)
Logical.check_tm( A_10827, L )
Logical.infer_tm(A_10827)
Logical.assert_equal(L, L)
Logical.infer_tm((prod_7‹L,L,L› A_10827 ((stream_3‹L›) A_10827)))
Logical.check_tm( A_10827, L )
Logical.infer_tm(A_10827)
Logical.assert_equal(L, L)
Logical.check_tm( ((stream_3‹L›) A_10827), L )
Logical.infer_tm(((stream_3‹L›) A_10827))
Logical.infer_tm(stream_3‹L›)
Logical.check_tm( A_10827, L )
Logical.infer_tm(A_10827)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Program.check_tm(
  function uncons_stream_10830 :
    ∀ {A_10831 : L} ->
      ((stream_3‹L›) A_10831) ->
        (prod_7‹L,L,L› A_10831 ((stream_3‹L›) A_10831))
  | A_10833 st_10834 =>
    match ((st_10834) next_7) in
      (stream_node_9‹L› A_10833) -o
        (prod_7‹L,L,L› A_10833 ((stream_3‹L›) A_10833))
    with
    | (stream_cons_12 hd_10836 tl_10837) =>
      (pair_9‹L,L,L›
        A_10833 ((stream_3‹L›) A_10833) hd_10836 tl_10837),
  ∀ {A_10838 : L} ->
    ((stream_3‹L›) A_10838) ->
      (prod_7‹L,L,L› A_10838 ((stream_3‹L›) A_10838))
)
Program.infer_tm(function uncons_stream_10840 :
                   ∀ {A_10841 : L} ->
                     ((stream_3‹L›) A_10841) ->
                       (prod_7‹L,L,L›
                         A_10841 ((stream_3‹L›) A_10841))
                 | A_10843 st_10844 =>
                   match ((st_10844) next_7) in
                     (stream_node_9‹L› A_10843) -o
                       (prod_7‹L,L,L›
                         A_10843 ((stream_3‹L›) A_10843))
                   with
                   | (stream_cons_12 hd_10846 tl_10847) =>
                     (pair_9‹L,L,L›
                       A_10843 ((stream_3‹L›) A_10843) hd_10846 tl_10847))
Logical.infer_tm(∀ {A_10849 : L} ->
                   ((stream_3‹L›) A_10849) ->
                     (prod_7‹L,L,L› A_10849 ((stream_3‹L›) A_10849)))
Logical.infer_tm(L)
Logical.infer_tm(((stream_3‹L›) A_10851) ->
                   (prod_7‹L,L,L› A_10851 ((stream_3‹L›) A_10851)))
Logical.infer_tm(((stream_3‹L›) A_10851))
Logical.infer_tm(stream_3‹L›)
Logical.check_tm( A_10851, L )
Logical.infer_tm(A_10851)
Logical.assert_equal(L, L)
Logical.infer_tm((prod_7‹L,L,L› A_10851 ((stream_3‹L›) A_10851)))
Logical.check_tm( A_10851, L )
Logical.infer_tm(A_10851)
Logical.assert_equal(L, L)
Logical.check_tm( ((stream_3‹L›) A_10851), L )
Logical.infer_tm(((stream_3‹L›) A_10851))
Logical.infer_tm(stream_3‹L›)
Logical.check_tm( A_10851, L )
Logical.infer_tm(A_10851)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
trans12.Program.case_intro(A_10856, L)
Logical.infer_tm(L)
trans12.Program.case_intro(st_10859, ((stream_3‹L›) #A_10856))
Logical.infer_tm(((stream_3‹L›) A_10856))
Logical.infer_tm(stream_3‹L›)
Logical.check_tm( A_10856, L )
Logical.infer_tm(A_10856)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| ;
    {| eq_pat?(N #A_10856, A_10854 : L)
       eq_pat?(R #st_10859, st_10855 : ((stream_3‹L›) #A_10856)) ::: [] =>?
         match ((#st_10855) next_7) in
           (stream_node_9‹L› #A_10854) -o
             (prod_7‹L,L,L› #A_10854 ((stream_3‹L›) #A_10854))
         with
         | (stream_cons_12 hd_10863 tl_10864) =>
           (pair_9‹L,L,L›
             #A_10854 ((stream_3‹L›) #A_10854) hd_10863 tl_10864)
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_10856, A_10854 : L)
  eq_pat?(R #st_10859, st_10855 : ((stream_3‹L›) #A_10856))
)
unify_global(  )
simpl_pprbm ~expand:false( #A_10856, #A_10854)
simpl_pprbm ~expand:false( #st_10859, #st_10855)
case_coverage_ok(
  match ((st_10859) next_7) in
    (stream_node_9‹L› A_10856) -o
      (prod_7‹L,L,L› A_10856 ((stream_3‹L›) A_10856))
  with
  | (stream_cons_12 hd_10871 tl_10872) =>
    (pair_9‹L,L,L› A_10856 ((stream_3‹L›) A_10856) hd_10871 tl_10872),
  (prod_7‹L,L,L› A_10856 ((stream_3‹L›) A_10856)))
Program.check_tm(
  match ((st_10859) next_7) in
    (stream_node_9‹L› A_10856) -o
      (prod_7‹L,L,L› A_10856 ((stream_3‹L›) A_10856))
  with
  | (stream_cons_12 hd_10874 tl_10875) =>
    (pair_9‹L,L,L› A_10856 ((stream_3‹L›) A_10856) hd_10874 tl_10875),
  (prod_7‹L,L,L› A_10856 ((stream_3‹L›) A_10856))
)
Program.infer_tm(match ((st_10859) next_7) in
                   (stream_node_9‹L› A_10856) -o
                     (prod_7‹L,L,L› A_10856 ((stream_3‹L›) A_10856))
                 with
                 | (stream_cons_12 hd_10877 tl_10878) =>
                   (pair_9‹L,L,L›
                     A_10856 ((stream_3‹L›) A_10856) hd_10877 tl_10878))
Program.infer_motive_R(((st_10859) next_7), (stream_node_9‹L› A_10856))
Program.check_tm( ((st_10859) next_7), (stream_node_9‹L› A_10856) )
Program.infer_tm(((st_10859) next_7))
Program.infer_tm(st_10859)
Program.check_tm( next_7, choice_6 )
Program.infer_tm(next_7)
Logical.assert_equal(choice_6, choice_6)
Logical.assert_equal((stream_node_9‹L› A_10856), match next_7 in
                                                       choice_6 -o L
                                                     with
                                                     | next_7 =>
                                                       (stream_node_9‹L›
                                                         A_10856)
                                                     | free_8 =>
                                                       unit_4‹L›)
Program.infer_motive_R_ok(((st_10859) next_7), (stream_node_9‹L› A_10856))
Program.infer_motive_ok
trans12.Program.case_intro(_10882, (stream_node_9‹L› A_10856))
Logical.infer_tm((stream_node_9‹L› A_10856))
Logical.check_tm( A_10856, L )
Logical.infer_tm(A_10856)
Logical.assert_equal(L, L)
Logical.infer_tm((stream_node_9‹L› A_10856))
Logical.check_tm( A_10856, L )
Logical.infer_tm(A_10856)
Logical.assert_equal(L, L)
trans12.Program.case_split(stream_nodeL_29, stream_consL_32)
Logical.infer_tm(A_10856)
Logical.infer_tm(∀ (x_10895 : choice_6) -o
                   match x_10895 in choice_6 -o L with
                   | next_7 => (stream_node_9‹L› A_10856)
                   | free_8 => unit_4‹L›)
Logical.infer_tm(choice_6)
Logical.infer_tm(match x_10897 in choice_6 -o L with
                 | next_7 => (stream_node_9‹L› A_10856)
                 | free_8 => unit_4‹L›)
Logical.check_tm( x_10897, choice_6 )
Logical.infer_tm(x_10897)
Logical.assert_equal(choice_6, choice_6)
Logical.infer_tm(choice_6)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {|  ::: [] =>? (stream_node_9‹L› A_10856) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( (stream_node_9‹L› A_10856), L)
Logical.check_tm( (stream_node_9‹L› A_10856), L )
Logical.infer_tm((stream_node_9‹L› A_10856))
Logical.check_tm( A_10856, L )
Logical.infer_tm(A_10856)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6); {|  ::: [] =>? unit_4‹L› |} |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (stream_node_9‹L› A_10856), (stream_node_9‹L› A_10856));
    {| eq_pat?(R #hd_10887, hd_10880 : A_10856)
       eq_pat?(R #tl_10888, tl_10881 :
         ∀ (x_10914 : choice_6) -o
           match x_10914 in choice_6 -o L with
           | next_7 => (stream_node_9‹L› A_10856)
           | free_8 => unit_4‹L›) ::: [] =>?
         (pair_9‹L,L,L›
           A_10856 ((stream_3‹L›) A_10856) #hd_10880 #tl_10881)
    |}
  |}
|}
unify_local(
  eq_pat?(R #hd_10887, hd_10880 : A_10856)
  eq_pat?(R #tl_10888, tl_10881 :
    ∀ (x_10916 : choice_6) -o
      match x_10916 in choice_6 -o L with
      | next_7 => (stream_node_9‹L› A_10856)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (stream_node_9‹L› A_10856), (stream_node_9‹L› A_10856))
)
simpl_pprbm ~expand:false( #hd_10887, #hd_10880)
simpl_pprbm ~expand:false( #tl_10888, #tl_10881)
simpl_pprbm ~expand:false( (stream_node_9‹L› A_10856),
  (stream_node_9‹L› A_10856))
simpl_pprbm ~expand:false( A_10856, A_10856)
case_coverage_ok(
  (pair_9‹L,L,L› A_10856 ((stream_3‹L›) A_10856) hd_10887 tl_10888),
  (prod_7‹L,L,L› A_10856 ((stream_3‹L›) A_10856)))
Program.check_tm(
  (pair_9‹L,L,L› A_10856 ((stream_3‹L›) A_10856) hd_10887 tl_10888),
  (prod_7‹L,L,L› A_10856 ((stream_3‹L›) A_10856))
)
Program.infer_tm((pair_9‹L,L,L›
                   A_10856 ((stream_3‹L›) A_10856) hd_10887 tl_10888))
Logical.check_tm( A_10856, L )
Logical.infer_tm(A_10856)
Logical.assert_equal(L, L)
Logical.check_tm( ((stream_3‹L›) A_10856), L )
Logical.infer_tm(((stream_3‹L›) A_10856))
Logical.infer_tm(stream_3‹L›)
Logical.check_tm( A_10856, L )
Logical.infer_tm(A_10856)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Program.check_tm( hd_10887, A_10856 )
Program.infer_tm(hd_10887)
Logical.assert_equal(A_10856, A_10856)
Program.check_tm( tl_10888, ((stream_3‹L›) A_10856) )
Program.infer_tm(tl_10888)
Logical.assert_equal(((stream_3‹L›) A_10856), ∀ (x_10922 : choice_6) -o
                                                    match x_10922 in
                                                      choice_6 -o L
                                                    with
                                                    | next_7 =>
                                                      (stream_node_9‹L›
                                                        A_10856)
                                                    | free_8 => unit_4‹L›)
Logical.assert_equal((prod_7‹L,L,L› A_10856 ((stream_3‹L›) A_10856)), 
(prod_7‹L,L,L› A_10856 ((stream_3‹L›) A_10856)))
trans12.Program.case_introed((stream_node_9‹L› A_10856))
Logical.assert_equal((prod_7‹L,L,L› A_10856 ((stream_3‹L›) A_10856)), 
(prod_7‹L,L,L› A_10856 ((stream_3‹L›) A_10856)))
trans12.Program.case_introed(((stream_3‹L›) #A_10856))
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_10926 : L} ->
                       ((stream_3‹L›) A_10926) ->
                         (prod_7‹L,L,L›
                           A_10926 ((stream_3‹L›) A_10926)), ∀ {A_10928 :
                                                                   L} ->
                                                                   ((stream_3‹L›)
                                                                    A_10928) ->
                                                                    (prod_7‹L,L,L›
                                                                    A_10928
                                                                    ((stream_3‹L›)
                                                                    A_10928)))
Logical.infer_tm(∀ {A_10932 : U} ->
                   ((stream_3‹U›) A_10932) ->
                     (prod_7‹U,L,L› A_10932 ((stream_3‹U›) A_10932)))
Logical.infer_tm(U)
Logical.infer_tm(((stream_3‹U›) A_10934) ->
                   (prod_7‹U,L,L› A_10934 ((stream_3‹U›) A_10934)))
Logical.infer_tm(((stream_3‹U›) A_10934))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( A_10934, U )
Logical.infer_tm(A_10934)
Logical.assert_equal(U, U)
Logical.infer_tm((prod_7‹U,L,L› A_10934 ((stream_3‹U›) A_10934)))
Logical.check_tm( A_10934, U )
Logical.infer_tm(A_10934)
Logical.assert_equal(U, U)
Logical.check_tm( ((stream_3‹U›) A_10934), L )
Logical.infer_tm(((stream_3‹U›) A_10934))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( A_10934, U )
Logical.infer_tm(A_10934)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Program.check_tm(
  function uncons_stream_10937 :
    ∀ {A_10938 : U} ->
      ((stream_3‹U›) A_10938) ->
        (prod_7‹U,L,L› A_10938 ((stream_3‹U›) A_10938))
  | A_10940 st_10941 =>
    match ((st_10941) next_7) in
      (stream_node_9‹U› A_10940) -o
        (prod_7‹U,L,L› A_10940 ((stream_3‹U›) A_10940))
    with
    | (stream_cons_12 hd_10943 tl_10944) =>
      (pair_9‹U,L,L›
        A_10940 ((stream_3‹U›) A_10940) hd_10943 tl_10944),
  ∀ {A_10945 : U} ->
    ((stream_3‹U›) A_10945) ->
      (prod_7‹U,L,L› A_10945 ((stream_3‹U›) A_10945))
)
Program.infer_tm(function uncons_stream_10947 :
                   ∀ {A_10948 : U} ->
                     ((stream_3‹U›) A_10948) ->
                       (prod_7‹U,L,L›
                         A_10948 ((stream_3‹U›) A_10948))
                 | A_10950 st_10951 =>
                   match ((st_10951) next_7) in
                     (stream_node_9‹U› A_10950) -o
                       (prod_7‹U,L,L›
                         A_10950 ((stream_3‹U›) A_10950))
                   with
                   | (stream_cons_12 hd_10953 tl_10954) =>
                     (pair_9‹U,L,L›
                       A_10950 ((stream_3‹U›) A_10950) hd_10953 tl_10954))
Logical.infer_tm(∀ {A_10956 : U} ->
                   ((stream_3‹U›) A_10956) ->
                     (prod_7‹U,L,L› A_10956 ((stream_3‹U›) A_10956)))
Logical.infer_tm(U)
Logical.infer_tm(((stream_3‹U›) A_10958) ->
                   (prod_7‹U,L,L› A_10958 ((stream_3‹U›) A_10958)))
Logical.infer_tm(((stream_3‹U›) A_10958))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( A_10958, U )
Logical.infer_tm(A_10958)
Logical.assert_equal(U, U)
Logical.infer_tm((prod_7‹U,L,L› A_10958 ((stream_3‹U›) A_10958)))
Logical.check_tm( A_10958, U )
Logical.infer_tm(A_10958)
Logical.assert_equal(U, U)
Logical.check_tm( ((stream_3‹U›) A_10958), L )
Logical.infer_tm(((stream_3‹U›) A_10958))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( A_10958, U )
Logical.infer_tm(A_10958)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
trans12.Program.case_intro(A_10963, U)
Logical.infer_tm(U)
trans12.Program.case_intro(st_10966, ((stream_3‹U›) #A_10963))
Logical.infer_tm(((stream_3‹U›) A_10963))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( A_10963, U )
Logical.infer_tm(A_10963)
Logical.assert_equal(U, U)
case_coverage{|
  prblm {| ;
    {| eq_pat?(N #A_10963, A_10961 : U)
       eq_pat?(R #st_10966, st_10962 : ((stream_3‹U›) #A_10963)) ::: [] =>?
         match ((#st_10962) next_7) in
           (stream_node_9‹U› #A_10961) -o
             (prod_7‹U,L,L› #A_10961 ((stream_3‹U›) #A_10961))
         with
         | (stream_cons_12 hd_10970 tl_10971) =>
           (pair_9‹U,L,L›
             #A_10961 ((stream_3‹U›) #A_10961) hd_10970 tl_10971)
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_10963, A_10961 : U)
  eq_pat?(R #st_10966, st_10962 : ((stream_3‹U›) #A_10963))
)
unify_global(  )
simpl_pprbm ~expand:false( #A_10963, #A_10961)
simpl_pprbm ~expand:false( #st_10966, #st_10962)
case_coverage_ok(
  match ((st_10966) next_7) in
    (stream_node_9‹U› A_10963) -o
      (prod_7‹U,L,L› A_10963 ((stream_3‹U›) A_10963))
  with
  | (stream_cons_12 hd_10978 tl_10979) =>
    (pair_9‹U,L,L› A_10963 ((stream_3‹U›) A_10963) hd_10978 tl_10979),
  (prod_7‹U,L,L› A_10963 ((stream_3‹U›) A_10963)))
Program.check_tm(
  match ((st_10966) next_7) in
    (stream_node_9‹U› A_10963) -o
      (prod_7‹U,L,L› A_10963 ((stream_3‹U›) A_10963))
  with
  | (stream_cons_12 hd_10981 tl_10982) =>
    (pair_9‹U,L,L› A_10963 ((stream_3‹U›) A_10963) hd_10981 tl_10982),
  (prod_7‹U,L,L› A_10963 ((stream_3‹U›) A_10963))
)
Program.infer_tm(match ((st_10966) next_7) in
                   (stream_node_9‹U› A_10963) -o
                     (prod_7‹U,L,L› A_10963 ((stream_3‹U›) A_10963))
                 with
                 | (stream_cons_12 hd_10984 tl_10985) =>
                   (pair_9‹U,L,L›
                     A_10963 ((stream_3‹U›) A_10963) hd_10984 tl_10985))
Program.infer_motive_R(((st_10966) next_7), (stream_node_9‹U› A_10963))
Program.check_tm( ((st_10966) next_7), (stream_node_9‹U› A_10963) )
Program.infer_tm(((st_10966) next_7))
Program.infer_tm(st_10966)
Program.check_tm( next_7, choice_6 )
Program.infer_tm(next_7)
Logical.assert_equal(choice_6, choice_6)
Logical.assert_equal((stream_node_9‹U› A_10963), match next_7 in
                                                       choice_6 -o L
                                                     with
                                                     | next_7 =>
                                                       (stream_node_9‹U›
                                                         A_10963)
                                                     | free_8 =>
                                                       unit_4‹L›)
Program.infer_motive_R_ok(((st_10966) next_7), (stream_node_9‹U› A_10963))
Program.infer_motive_ok
trans12.Program.case_intro(_10989, (stream_node_9‹U› A_10963))
Logical.infer_tm((stream_node_9‹U› A_10963))
Logical.check_tm( A_10963, U )
Logical.infer_tm(A_10963)
Logical.assert_equal(U, U)
Logical.infer_tm((stream_node_9‹U› A_10963))
Logical.check_tm( A_10963, U )
Logical.infer_tm(A_10963)
Logical.assert_equal(U, U)
trans12.Program.case_split(stream_nodeU_30, stream_consU_33)
Logical.infer_tm(A_10963)
Logical.infer_tm(∀ (x_11002 : choice_6) -o
                   match x_11002 in choice_6 -o L with
                   | next_7 => (stream_node_9‹U› A_10963)
                   | free_8 => unit_4‹L›)
Logical.infer_tm(choice_6)
Logical.infer_tm(match x_11004 in choice_6 -o L with
                 | next_7 => (stream_node_9‹U› A_10963)
                 | free_8 => unit_4‹L›)
Logical.check_tm( x_11004, choice_6 )
Logical.infer_tm(x_11004)
Logical.assert_equal(choice_6, choice_6)
Logical.infer_tm(choice_6)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {|  ::: [] =>? (stream_node_9‹U› A_10963) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( (stream_node_9‹U› A_10963), L)
Logical.check_tm( (stream_node_9‹U› A_10963), L )
Logical.infer_tm((stream_node_9‹U› A_10963))
Logical.check_tm( A_10963, U )
Logical.infer_tm(A_10963)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6); {|  ::: [] =>? unit_4‹L› |} |}
|}
unify_local(  )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (stream_node_9‹U› A_10963), (stream_node_9‹U› A_10963));
    {| eq_pat?(R #hd_10994, hd_10987 : A_10963)
       eq_pat?(R #tl_10995, tl_10988 :
         ∀ (x_11021 : choice_6) -o
           match x_11021 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› A_10963)
           | free_8 => unit_4‹L›) ::: [] =>?
         (pair_9‹U,L,L›
           A_10963 ((stream_3‹U›) A_10963) #hd_10987 #tl_10988)
    |}
  |}
|}
unify_local(
  eq_pat?(R #hd_10994, hd_10987 : A_10963)
  eq_pat?(R #tl_10995, tl_10988 :
    ∀ (x_11023 : choice_6) -o
      match x_11023 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› A_10963)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (stream_node_9‹U› A_10963), (stream_node_9‹U› A_10963))
)
simpl_pprbm ~expand:false( #hd_10994, #hd_10987)
simpl_pprbm ~expand:false( #tl_10995, #tl_10988)
simpl_pprbm ~expand:false( (stream_node_9‹U› A_10963),
  (stream_node_9‹U› A_10963))
simpl_pprbm ~expand:false( A_10963, A_10963)
case_coverage_ok(
  (pair_9‹U,L,L› A_10963 ((stream_3‹U›) A_10963) hd_10994 tl_10995),
  (prod_7‹U,L,L› A_10963 ((stream_3‹U›) A_10963)))
Program.check_tm(
  (pair_9‹U,L,L› A_10963 ((stream_3‹U›) A_10963) hd_10994 tl_10995),
  (prod_7‹U,L,L› A_10963 ((stream_3‹U›) A_10963))
)
Program.infer_tm((pair_9‹U,L,L›
                   A_10963 ((stream_3‹U›) A_10963) hd_10994 tl_10995))
Logical.check_tm( A_10963, U )
Logical.infer_tm(A_10963)
Logical.assert_equal(U, U)
Logical.check_tm( ((stream_3‹U›) A_10963), L )
Logical.infer_tm(((stream_3‹U›) A_10963))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( A_10963, U )
Logical.infer_tm(A_10963)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Program.check_tm( hd_10994, A_10963 )
Program.infer_tm(hd_10994)
Logical.assert_equal(A_10963, A_10963)
Program.check_tm( tl_10995, ((stream_3‹U›) A_10963) )
Program.infer_tm(tl_10995)
Logical.assert_equal(((stream_3‹U›) A_10963), ∀ (x_11029 : choice_6) -o
                                                    match x_11029 in
                                                      choice_6 -o L
                                                    with
                                                    | next_7 =>
                                                      (stream_node_9‹U›
                                                        A_10963)
                                                    | free_8 => unit_4‹L›)
Logical.assert_equal((prod_7‹U,L,L› A_10963 ((stream_3‹U›) A_10963)), 
(prod_7‹U,L,L› A_10963 ((stream_3‹U›) A_10963)))
trans12.Program.case_introed((stream_node_9‹U› A_10963))
Logical.assert_equal((prod_7‹U,L,L› A_10963 ((stream_3‹U›) A_10963)), 
(prod_7‹U,L,L› A_10963 ((stream_3‹U›) A_10963)))
trans12.Program.case_introed(((stream_3‹U›) #A_10963))
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_11033 : U} ->
                       ((stream_3‹U›) A_11033) ->
                         (prod_7‹U,L,L›
                           A_11033 ((stream_3‹U›) A_11033)), ∀ {A_11035 :
                                                                   U} ->
                                                                   ((stream_3‹U›)
                                                                    A_11035) ->
                                                                    (prod_7‹U,L,L›
                                                                    A_11035
                                                                    ((stream_3‹U›)
                                                                    A_11035)))
Logical.infer_tm(nat_8 -> ((stream_3‹U›) nat_8))
Logical.infer_tm(nat_8)
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Program.check_tm(
  function nat_make_11041 : nat_8 -> ((stream_3‹U›) nat_8)
  | n_11043 next_7 =>
    (stream_cons_12‹U›
      nat_8 n_11043 ((nat_make_11041) (succ_11‹› n_11043)))
  | n_11044 free_8 => tt_4‹L›, nat_8 -> ((stream_3‹U›) nat_8)
)
Program.infer_tm(function nat_make_11046 : nat_8 -> ((stream_3‹U›) nat_8)
                 | n_11048 next_7 =>
                   (stream_cons_12‹U›
                     nat_8 n_11048 ((nat_make_11046) (succ_11‹› n_11048)))
                 | n_11049 free_8 => tt_4‹L›)
Logical.infer_tm(nat_8 -> ((stream_3‹U›) nat_8))
Logical.infer_tm(nat_8)
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
trans12.Program.case_intro(n_11055, nat_8)
Logical.infer_tm(nat_8)
trans12.Program.case_intro(x_11057, choice_6)
Logical.infer_tm(choice_6)
Logical.infer_tm(choice_6)
trans12.Program.case_split(choice_6, next_7)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {| eq_pat?(R #n_11055, n_11053 : nat_8) ::: [] =>?
         (stream_cons_12‹U›
           nat_8 #n_11053 ((nat_make_11050) (succ_11‹› #n_11053)))
    |}
  |}
|}
unify_local( eq_pat?(R #n_11055, n_11053 : nat_8) )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( #n_11055, #n_11053)
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok(
  (stream_cons_12‹U›
    nat_8 n_11055 ((nat_make_11050) (succ_11‹› n_11055))),
  match next_7 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›)
Program.check_tm(
  (stream_cons_12‹U›
    nat_8 n_11055 ((nat_make_11050) (succ_11‹› n_11055))),
  match next_7 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›
)
Program.infer_tm((stream_cons_12‹U›
                   nat_8 n_11055 ((nat_make_11050) (succ_11‹› n_11055))))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Program.check_tm( n_11055, nat_8 )
Program.infer_tm(n_11055)
Logical.assert_equal(nat_8, nat_8)
Program.check_tm( ((nat_make_11050) (succ_11‹› n_11055)),
  ∀ (x_11066 : choice_6) -o
    match x_11066 in choice_6 -o L with
    | next_7 => (stream_node_9‹U› nat_8)
    | free_8 => unit_4‹L›
)
Program.infer_tm(((nat_make_11050) (succ_11‹› n_11055)))
Program.infer_tm(nat_make_11050)
Program.check_tm( (succ_11‹› n_11055), nat_8 )
Program.infer_tm((succ_11‹› n_11055))
Program.check_tm( n_11055, nat_8 )
Program.infer_tm(n_11055)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(∀ (x_11068 : choice_6) -o
                       match x_11068 in choice_6 -o L with
                       | next_7 => (stream_node_9‹U› nat_8)
                       | free_8 => unit_4‹L›, ((stream_3‹U›) nat_8))
Logical.assert_equal(match next_7 in choice_6 -o L with
                     | next_7 => (stream_node_9‹U› nat_8)
                     | free_8 => unit_4‹L›, (stream_node_9‹U› nat_8))
trans12.Program.case_split(choice_6, free_8)
case_coverage{|
  prblm {| eq_term?( choice_6, choice_6);
    {| eq_pat?(R #n_11055, n_11054 : nat_8) ::: [] =>? tt_4‹L› |}
  |}
|}
unify_local( eq_pat?(R #n_11055, n_11054 : nat_8) )
unify_global( eq_term?( choice_6, choice_6) )
simpl_pprbm ~expand:false( #n_11055, #n_11054)
simpl_pprbm ~expand:false( choice_6, choice_6)
case_coverage_ok( tt_4‹L›,
  match free_8 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›)
Program.check_tm( tt_4‹L›,
  match free_8 in choice_6 -o L with
  | next_7 => (stream_node_9‹U› nat_8)
  | free_8 => unit_4‹L›
)
Program.infer_tm(tt_4‹L›)
Logical.assert_equal(match free_8 in choice_6 -o L with
                     | next_7 => (stream_node_9‹U› nat_8)
                     | free_8 => unit_4‹L›, unit_4‹L›)
trans12.Program.case_introed(choice_6)
trans12.Program.case_introed(nat_8)
Logical.assert_equal(nat_8 -> ((stream_3‹U›) nat_8), nat_8 ->
                                                           ((stream_3‹U›)
                                                             nat_8))
Logical.infer_tm(L)
Logical.infer_tm(A_11083 -> L)
Logical.infer_tm(A_11083)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_11087 -> L)
Logical.infer_tm(A_11087)
Logical.infer_tm(L)
Logical.infer_tm(A_11087)
Logical.infer_tm(∀ (b_11093 : bool_5) -o
                   match b_11093 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_11087 x_11091)
                   | false_6 => (boxed_2‹L› ((B_11088) x_11091)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11095 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_11087 x_11091)
                 | false_6 => (boxed_2‹L› ((B_11088) x_11091)))
Logical.check_tm( b_11095, bool_5 )
Logical.infer_tm(b_11095)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_11087 x_11091) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_11087 x_11091), L)
Logical.check_tm( (sing_3‹L,L› A_11087 x_11091), L )
Logical.infer_tm((sing_3‹L,L› A_11087 x_11091))
Logical.check_tm( A_11087, L )
Logical.infer_tm(A_11087)
Logical.assert_equal(L, L)
Logical.check_tm( x_11091, A_11087 )
Logical.infer_tm(x_11091)
Logical.assert_equal(A_11087, A_11087)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_11088) x_11091)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_11088) x_11091)), L)
Logical.check_tm( (boxed_2‹L› ((B_11088) x_11091)), L )
Logical.infer_tm((boxed_2‹L› ((B_11088) x_11091)))
Logical.check_tm( ((B_11088) x_11091), L )
Logical.infer_tm(((B_11088) x_11091))
Logical.infer_tm(B_11088)
Logical.check_tm( x_11091, A_11087 )
Logical.infer_tm(x_11091)
Logical.assert_equal(A_11087, A_11087)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.infer_tm((apair_10‹L,L,L› A_11087 B_11088))
Logical.check_tm( A_11087, L )
Logical.infer_tm(A_11087)
Logical.assert_equal(L, L)
Logical.check_tm( B_11088, A_11087 -> L )
Logical.infer_tm(B_11088)
Logical.assert_equal(A_11087 -> L, A_11087 -> L)
Logical.infer_tm(L)
Logical.infer_tm(A_11107 -> L)
Logical.infer_tm(A_11107)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_11111 -> L)
Logical.infer_tm(A_11111)
Logical.infer_tm(L)
Logical.infer_tm(A_11111)
Logical.infer_tm(∀ (b_11117 : bool_5) ->
                   match b_11117 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_11111 x_11115)
                   | false_6 => (boxed_2‹L› ((B_11112) x_11115)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11119 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_11111 x_11115)
                 | false_6 => (boxed_2‹L› ((B_11112) x_11115)))
Logical.check_tm( b_11119, bool_5 )
Logical.infer_tm(b_11119)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_11111 x_11115) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_11111 x_11115), L)
Logical.check_tm( (sing_3‹L,L› A_11111 x_11115), L )
Logical.infer_tm((sing_3‹L,L› A_11111 x_11115))
Logical.check_tm( A_11111, L )
Logical.infer_tm(A_11111)
Logical.assert_equal(L, L)
Logical.check_tm( x_11115, A_11111 )
Logical.infer_tm(x_11115)
Logical.assert_equal(A_11111, A_11111)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_11112) x_11115)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_11112) x_11115)), L)
Logical.check_tm( (boxed_2‹L› ((B_11112) x_11115)), L )
Logical.infer_tm((boxed_2‹L› ((B_11112) x_11115)))
Logical.check_tm( ((B_11112) x_11115), L )
Logical.infer_tm(((B_11112) x_11115))
Logical.infer_tm(B_11112)
Logical.check_tm( x_11115, A_11111 )
Logical.infer_tm(x_11115)
Logical.assert_equal(A_11111, A_11111)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.infer_tm((apair_10‹L,L,U› A_11111 B_11112))
Logical.check_tm( A_11111, L )
Logical.infer_tm(A_11111)
Logical.assert_equal(L, L)
Logical.check_tm( B_11112, A_11111 -> L )
Logical.infer_tm(B_11112)
Logical.assert_equal(A_11111 -> L, A_11111 -> L)
Logical.infer_tm(L)
Logical.infer_tm(A_11131 -> U)
Logical.infer_tm(A_11131)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(A_11135 -> U)
Logical.infer_tm(A_11135)
Logical.infer_tm(U)
Logical.infer_tm(A_11135)
Logical.infer_tm(∀ (b_11141 : bool_5) -o
                   match b_11141 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_11135 x_11139)
                   | false_6 => (boxed_2‹U› ((B_11136) x_11139)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11143 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_11135 x_11139)
                 | false_6 => (boxed_2‹U› ((B_11136) x_11139)))
Logical.check_tm( b_11143, bool_5 )
Logical.infer_tm(b_11143)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_11135 x_11139) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_11135 x_11139), L)
Logical.check_tm( (sing_3‹L,L› A_11135 x_11139), L )
Logical.infer_tm((sing_3‹L,L› A_11135 x_11139))
Logical.check_tm( A_11135, L )
Logical.infer_tm(A_11135)
Logical.assert_equal(L, L)
Logical.check_tm( x_11139, A_11135 )
Logical.infer_tm(x_11139)
Logical.assert_equal(A_11135, A_11135)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_11136) x_11139)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_11136) x_11139)), L)
Logical.check_tm( (boxed_2‹U› ((B_11136) x_11139)), L )
Logical.infer_tm((boxed_2‹U› ((B_11136) x_11139)))
Logical.check_tm( ((B_11136) x_11139), U )
Logical.infer_tm(((B_11136) x_11139))
Logical.infer_tm(B_11136)
Logical.check_tm( x_11139, A_11135 )
Logical.infer_tm(x_11139)
Logical.assert_equal(A_11135, A_11135)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm((apair_10‹L,U,L› A_11135 B_11136))
Logical.check_tm( A_11135, L )
Logical.infer_tm(A_11135)
Logical.assert_equal(L, L)
Logical.check_tm( B_11136, A_11135 -> U )
Logical.infer_tm(B_11136)
Logical.assert_equal(A_11135 -> U, A_11135 -> U)
Logical.infer_tm(L)
Logical.infer_tm(A_11155 -> U)
Logical.infer_tm(A_11155)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(A_11159 -> U)
Logical.infer_tm(A_11159)
Logical.infer_tm(U)
Logical.infer_tm(A_11159)
Logical.infer_tm(∀ (b_11165 : bool_5) ->
                   match b_11165 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_11159 x_11163)
                   | false_6 => (boxed_2‹U› ((B_11160) x_11163)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11167 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_11159 x_11163)
                 | false_6 => (boxed_2‹U› ((B_11160) x_11163)))
Logical.check_tm( b_11167, bool_5 )
Logical.infer_tm(b_11167)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_11159 x_11163) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_11159 x_11163), L)
Logical.check_tm( (sing_3‹L,L› A_11159 x_11163), L )
Logical.infer_tm((sing_3‹L,L› A_11159 x_11163))
Logical.check_tm( A_11159, L )
Logical.infer_tm(A_11159)
Logical.assert_equal(L, L)
Logical.check_tm( x_11163, A_11159 )
Logical.infer_tm(x_11163)
Logical.assert_equal(A_11159, A_11159)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_11160) x_11163)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_11160) x_11163)), L)
Logical.check_tm( (boxed_2‹U› ((B_11160) x_11163)), L )
Logical.infer_tm((boxed_2‹U› ((B_11160) x_11163)))
Logical.check_tm( ((B_11160) x_11163), U )
Logical.infer_tm(((B_11160) x_11163))
Logical.infer_tm(B_11160)
Logical.check_tm( x_11163, A_11159 )
Logical.infer_tm(x_11163)
Logical.assert_equal(A_11159, A_11159)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm((apair_10‹L,U,U› A_11159 B_11160))
Logical.check_tm( A_11159, L )
Logical.infer_tm(A_11159)
Logical.assert_equal(L, L)
Logical.check_tm( B_11160, A_11159 -> U )
Logical.infer_tm(B_11160)
Logical.assert_equal(A_11159 -> U, A_11159 -> U)
Logical.infer_tm(U)
Logical.infer_tm(A_11179 -> L)
Logical.infer_tm(A_11179)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(A_11183 -> L)
Logical.infer_tm(A_11183)
Logical.infer_tm(L)
Logical.infer_tm(A_11183)
Logical.infer_tm(∀ (b_11189 : bool_5) -o
                   match b_11189 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_11183 x_11187)
                   | false_6 => (boxed_2‹L› ((B_11184) x_11187)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11191 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_11183 x_11187)
                 | false_6 => (boxed_2‹L› ((B_11184) x_11187)))
Logical.check_tm( b_11191, bool_5 )
Logical.infer_tm(b_11191)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_11183 x_11187) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_11183 x_11187), L)
Logical.check_tm( (sing_3‹U,L› A_11183 x_11187), L )
Logical.infer_tm((sing_3‹U,L› A_11183 x_11187))
Logical.check_tm( A_11183, U )
Logical.infer_tm(A_11183)
Logical.assert_equal(U, U)
Logical.check_tm( x_11187, A_11183 )
Logical.infer_tm(x_11187)
Logical.assert_equal(A_11183, A_11183)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_11184) x_11187)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_11184) x_11187)), L)
Logical.check_tm( (boxed_2‹L› ((B_11184) x_11187)), L )
Logical.infer_tm((boxed_2‹L› ((B_11184) x_11187)))
Logical.check_tm( ((B_11184) x_11187), L )
Logical.infer_tm(((B_11184) x_11187))
Logical.infer_tm(B_11184)
Logical.check_tm( x_11187, A_11183 )
Logical.infer_tm(x_11187)
Logical.assert_equal(A_11183, A_11183)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.infer_tm((apair_10‹U,L,L› A_11183 B_11184))
Logical.check_tm( A_11183, U )
Logical.infer_tm(A_11183)
Logical.assert_equal(U, U)
Logical.check_tm( B_11184, A_11183 -> L )
Logical.infer_tm(B_11184)
Logical.assert_equal(A_11183 -> L, A_11183 -> L)
Logical.infer_tm(U)
Logical.infer_tm(A_11203 -> L)
Logical.infer_tm(A_11203)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(A_11207 -> L)
Logical.infer_tm(A_11207)
Logical.infer_tm(L)
Logical.infer_tm(A_11207)
Logical.infer_tm(∀ (b_11213 : bool_5) ->
                   match b_11213 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_11207 x_11211)
                   | false_6 => (boxed_2‹L› ((B_11208) x_11211)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11215 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_11207 x_11211)
                 | false_6 => (boxed_2‹L› ((B_11208) x_11211)))
Logical.check_tm( b_11215, bool_5 )
Logical.infer_tm(b_11215)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_11207 x_11211) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_11207 x_11211), L)
Logical.check_tm( (sing_3‹U,L› A_11207 x_11211), L )
Logical.infer_tm((sing_3‹U,L› A_11207 x_11211))
Logical.check_tm( A_11207, U )
Logical.infer_tm(A_11207)
Logical.assert_equal(U, U)
Logical.check_tm( x_11211, A_11207 )
Logical.infer_tm(x_11211)
Logical.assert_equal(A_11207, A_11207)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_11208) x_11211)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_11208) x_11211)), L)
Logical.check_tm( (boxed_2‹L› ((B_11208) x_11211)), L )
Logical.infer_tm((boxed_2‹L› ((B_11208) x_11211)))
Logical.check_tm( ((B_11208) x_11211), L )
Logical.infer_tm(((B_11208) x_11211))
Logical.infer_tm(B_11208)
Logical.check_tm( x_11211, A_11207 )
Logical.infer_tm(x_11211)
Logical.assert_equal(A_11207, A_11207)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.infer_tm((apair_10‹U,L,U› A_11207 B_11208))
Logical.check_tm( A_11207, U )
Logical.infer_tm(A_11207)
Logical.assert_equal(U, U)
Logical.check_tm( B_11208, A_11207 -> L )
Logical.infer_tm(B_11208)
Logical.assert_equal(A_11207 -> L, A_11207 -> L)
Logical.infer_tm(U)
Logical.infer_tm(A_11227 -> U)
Logical.infer_tm(A_11227)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_11231 -> U)
Logical.infer_tm(A_11231)
Logical.infer_tm(U)
Logical.infer_tm(A_11231)
Logical.infer_tm(∀ (b_11237 : bool_5) -o
                   match b_11237 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_11231 x_11235)
                   | false_6 => (boxed_2‹U› ((B_11232) x_11235)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11239 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_11231 x_11235)
                 | false_6 => (boxed_2‹U› ((B_11232) x_11235)))
Logical.check_tm( b_11239, bool_5 )
Logical.infer_tm(b_11239)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_11231 x_11235) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_11231 x_11235), L)
Logical.check_tm( (sing_3‹U,L› A_11231 x_11235), L )
Logical.infer_tm((sing_3‹U,L› A_11231 x_11235))
Logical.check_tm( A_11231, U )
Logical.infer_tm(A_11231)
Logical.assert_equal(U, U)
Logical.check_tm( x_11235, A_11231 )
Logical.infer_tm(x_11235)
Logical.assert_equal(A_11231, A_11231)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_11232) x_11235)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_11232) x_11235)), L)
Logical.check_tm( (boxed_2‹U› ((B_11232) x_11235)), L )
Logical.infer_tm((boxed_2‹U› ((B_11232) x_11235)))
Logical.check_tm( ((B_11232) x_11235), U )
Logical.infer_tm(((B_11232) x_11235))
Logical.infer_tm(B_11232)
Logical.check_tm( x_11235, A_11231 )
Logical.infer_tm(x_11235)
Logical.assert_equal(A_11231, A_11231)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm((apair_10‹U,U,L› A_11231 B_11232))
Logical.check_tm( A_11231, U )
Logical.infer_tm(A_11231)
Logical.assert_equal(U, U)
Logical.check_tm( B_11232, A_11231 -> U )
Logical.infer_tm(B_11232)
Logical.assert_equal(A_11231 -> U, A_11231 -> U)
Logical.infer_tm(U)
Logical.infer_tm(A_11251 -> U)
Logical.infer_tm(A_11251)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_11255 -> U)
Logical.infer_tm(A_11255)
Logical.infer_tm(U)
Logical.infer_tm(A_11255)
Logical.infer_tm(∀ (b_11261 : bool_5) ->
                   match b_11261 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_11255 x_11259)
                   | false_6 => (boxed_2‹U› ((B_11256) x_11259)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11263 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_11255 x_11259)
                 | false_6 => (boxed_2‹U› ((B_11256) x_11259)))
Logical.check_tm( b_11263, bool_5 )
Logical.infer_tm(b_11263)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_11255 x_11259) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_11255 x_11259), L)
Logical.check_tm( (sing_3‹U,L› A_11255 x_11259), L )
Logical.infer_tm((sing_3‹U,L› A_11255 x_11259))
Logical.check_tm( A_11255, U )
Logical.infer_tm(A_11255)
Logical.assert_equal(U, U)
Logical.check_tm( x_11259, A_11255 )
Logical.infer_tm(x_11259)
Logical.assert_equal(A_11255, A_11255)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_11256) x_11259)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_11256) x_11259)), L)
Logical.check_tm( (boxed_2‹U› ((B_11256) x_11259)), L )
Logical.infer_tm((boxed_2‹U› ((B_11256) x_11259)))
Logical.check_tm( ((B_11256) x_11259), U )
Logical.infer_tm(((B_11256) x_11259))
Logical.infer_tm(B_11256)
Logical.check_tm( x_11259, A_11255 )
Logical.infer_tm(x_11259)
Logical.assert_equal(A_11255, A_11255)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm((apair_10‹U,U,U› A_11255 B_11256))
Logical.check_tm( A_11255, U )
Logical.infer_tm(A_11255)
Logical.assert_equal(U, U)
Logical.check_tm( B_11256, A_11255 -> U )
Logical.infer_tm(B_11256)
Logical.assert_equal(A_11255 -> U, A_11255 -> U)
Logical.infer_tm(∀ {A_11275 : L} ->
                   ∀ {B_11276 : A_11275 -> L} ->
                     (apair_10‹L,L,L› A_11275 B_11276) -> A_11275)
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_11280 : A_11279 -> L} ->
                   (apair_10‹L,L,L› A_11279 B_11280) -> A_11279)
Logical.infer_tm(A_11279 -> L)
Logical.infer_tm(A_11279)
Logical.infer_tm(L)
Logical.infer_tm((apair_10‹L,L,L› A_11279 B_11283) -> A_11279)
Logical.infer_tm((apair_10‹L,L,L› A_11279 B_11283))
Logical.check_tm( A_11279, L )
Logical.infer_tm(A_11279)
Logical.assert_equal(L, L)
Logical.check_tm( B_11283, A_11279 -> L )
Logical.infer_tm(B_11283)
Logical.assert_equal(A_11279 -> L, A_11279 -> L)
Logical.infer_tm(A_11279)
Program.check_tm(
  function proj1_11292 :
    ∀ {A_11293 : L} ->
      ∀ {B_11294 : A_11293 -> L} ->
        (apair_10‹L,L,L› A_11293 B_11294) -> A_11293
  | A_11297 B_11298 (apair_intro_13 x_11299 select_11300) =>
    ((sing_elim_1‹L,L›) A_11297 x_11299 ((select_11300) true_5)),
  ∀ {A_11301 : L} ->
    ∀ {B_11302 : A_11301 -> L} ->
      (apair_10‹L,L,L› A_11301 B_11302) -> A_11301
)
Program.infer_tm(function proj1_11305 :
                   ∀ {A_11306 : L} ->
                     ∀ {B_11307 : A_11306 -> L} ->
                       (apair_10‹L,L,L› A_11306 B_11307) -> A_11306
                 | A_11310 B_11311 (apair_intro_13 x_11312 select_11313) =>
                   ((sing_elim_1‹L,L›)
                     A_11310 x_11312 ((select_11313) true_5)))
Logical.infer_tm(∀ {A_11315 : L} ->
                   ∀ {B_11316 : A_11315 -> L} ->
                     (apair_10‹L,L,L› A_11315 B_11316) -> A_11315)
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_11320 : A_11319 -> L} ->
                   (apair_10‹L,L,L› A_11319 B_11320) -> A_11319)
Logical.infer_tm(A_11319 -> L)
Logical.infer_tm(A_11319)
Logical.infer_tm(L)
Logical.infer_tm((apair_10‹L,L,L› A_11319 B_11323) -> A_11319)
Logical.infer_tm((apair_10‹L,L,L› A_11319 B_11323))
Logical.check_tm( A_11319, L )
Logical.infer_tm(A_11319)
Logical.assert_equal(L, L)
Logical.check_tm( B_11323, A_11319 -> L )
Logical.infer_tm(B_11323)
Logical.assert_equal(A_11319 -> L, A_11319 -> L)
Logical.infer_tm(A_11319)
trans12.Program.case_intro(A_11336, L)
Logical.infer_tm(L)
trans12.Program.case_intro(B_11341, #A_11336 -> L)
Logical.infer_tm(A_11336 -> L)
Logical.infer_tm(A_11336)
Logical.infer_tm(L)
trans12.Program.case_intro(__11350, (apair_10‹L,L,L› #A_11336 #B_11341))
Logical.infer_tm((apair_10‹L,L,L› A_11336 B_11341))
Logical.check_tm( A_11336, L )
Logical.infer_tm(A_11336)
Logical.assert_equal(L, L)
Logical.check_tm( B_11341, A_11336 -> L )
Logical.infer_tm(B_11341)
Logical.assert_equal(A_11336 -> L, A_11336 -> L)
Logical.infer_tm((apair_10‹L,L,L› A_11336 B_11341))
Logical.check_tm( A_11336, L )
Logical.infer_tm(A_11336)
Logical.assert_equal(L, L)
Logical.check_tm( B_11341, A_11336 -> L )
Logical.infer_tm(B_11341)
Logical.assert_equal(A_11336 -> L, A_11336 -> L)
trans12.Program.case_split(apairLLL_31, apair_introLLL_34)
Logical.infer_tm(A_11336)
Logical.infer_tm(∀ (b_11383 : bool_5) -o
                   match b_11383 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_11336 x_11369)
                   | false_6 => (boxed_2‹L› ((B_11341) x_11369)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11385 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_11336 x_11369)
                 | false_6 => (boxed_2‹L› ((B_11341) x_11369)))
Logical.check_tm( b_11385, bool_5 )
Logical.infer_tm(b_11385)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_11336 x_11369) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_11336 x_11369), L)
Logical.check_tm( (sing_3‹L,L› A_11336 x_11369), L )
Logical.infer_tm((sing_3‹L,L› A_11336 x_11369))
Logical.check_tm( A_11336, L )
Logical.infer_tm(A_11336)
Logical.assert_equal(L, L)
Logical.check_tm( x_11369, A_11336 )
Logical.infer_tm(x_11369)
Logical.assert_equal(A_11336, A_11336)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_11341) x_11369)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_11341) x_11369)), L)
Logical.check_tm( (boxed_2‹L› ((B_11341) x_11369)), L )
Logical.infer_tm((boxed_2‹L› ((B_11341) x_11369)))
Logical.check_tm( ((B_11341) x_11369), L )
Logical.infer_tm(((B_11341) x_11369))
Logical.infer_tm(B_11341)
Logical.check_tm( x_11369, A_11336 )
Logical.infer_tm(x_11369)
Logical.assert_equal(A_11336, A_11336)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹L,L,L› #A_11336 #B_11341),
      (apair_10‹L,L,L› #A_11336 #B_11341));
    {| eq_pat?(N #A_11336, A_11332 : L)
       eq_pat?(N #B_11341, B_11333 : #A_11336 -> L)
       eq_pat?(N #x_11369, x_11334 : #A_11336)
       eq_pat?(R #select_11370, select_11335 :
         ∀ (b_11422 : bool_5) -o
           match b_11422 in bool_5 -o L with
           | true_5 => (sing_3‹L,L› #A_11336 #x_11369)
           | false_6 => (boxed_2‹L› ((#B_11341) #x_11369))) ::: [] =>?
         ((sing_elim_1‹L,L›) #A_11332 #x_11334 ((#select_11335) true_5))
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_11336, A_11332 : L)
  eq_pat?(N #B_11341, B_11333 : #A_11336 -> L)
  eq_pat?(N #x_11369, x_11334 : #A_11336)
  eq_pat?(R #select_11370, select_11335 :
    ∀ (b_11425 : bool_5) -o
      match b_11425 in bool_5 -o L with
      | true_5 => (sing_3‹L,L› #A_11336 #x_11369)
      | false_6 => (boxed_2‹L› ((#B_11341) #x_11369)))
)
unify_global(
  eq_term?( (apair_10‹L,L,L› #A_11336 #B_11341),
    (apair_10‹L,L,L› #A_11336 #B_11341))
)
simpl_pprbm ~expand:false( #A_11336, #A_11332)
simpl_pprbm ~expand:false( #B_11341, #B_11333)
simpl_pprbm ~expand:false( #x_11369, #x_11334)
simpl_pprbm ~expand:false( #select_11370, #select_11335)
simpl_pprbm ~expand:false( (apair_10‹L,L,L› #A_11336 #B_11341),
  (apair_10‹L,L,L› #A_11336 #B_11341))
simpl_pprbm ~expand:false( #A_11336, #A_11336)
simpl_pprbm ~expand:false( #B_11341, #B_11341)
case_coverage_ok(
  ((sing_elim_1‹L,L›) A_11336 x_11369 ((select_11370) true_5)), A_11336)
Program.check_tm(
  ((sing_elim_1‹L,L›) A_11336 x_11369 ((select_11370) true_5)), A_11336
)
Program.infer_tm(((sing_elim_1‹L,L›)
                   A_11336 x_11369 ((select_11370) true_5)))
Program.infer_tm(((sing_elim_1‹L,L›) A_11336 x_11369))
Program.infer_tm(((sing_elim_1‹L,L›) A_11336))
Program.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_11336, L )
Logical.infer_tm(A_11336)
Logical.assert_equal(L, L)
Logical.check_tm( x_11369, A_11336 )
Logical.infer_tm(x_11369)
Logical.assert_equal(A_11336, A_11336)
Program.check_tm( ((select_11370) true_5), (sing_3‹L,L› A_11336 x_11369)
)
Program.infer_tm(((select_11370) true_5))
Program.infer_tm(select_11370)
Program.check_tm( true_5, bool_5 )
Program.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_11336 x_11369), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_11336 x_11369)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_11341)
                                                              x_11369)))
Logical.assert_equal(A_11336, A_11336)
trans12.Program.case_introed((apair_10‹L,L,L› #A_11336 #B_11341))
trans12.Program.case_introed(#A_11336 -> L)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_11436 : L} ->
                       ∀ {B_11437 : A_11436 -> L} ->
                         (apair_10‹L,L,L› A_11436 B_11437) -> A_11436, 
∀ {A_11440 : L} ->
  ∀ {B_11441 : A_11440 -> L} ->
    (apair_10‹L,L,L› A_11440 B_11441) -> A_11440)
Logical.infer_tm(∀ {A_11448 : L} ->
                   ∀ {B_11449 : A_11448 -> L} ->
                     (apair_10‹L,L,U› A_11448 B_11449) -> A_11448)
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_11453 : A_11452 -> L} ->
                   (apair_10‹L,L,U› A_11452 B_11453) -> A_11452)
Logical.infer_tm(A_11452 -> L)
Logical.infer_tm(A_11452)
Logical.infer_tm(L)
Logical.infer_tm((apair_10‹L,L,U› A_11452 B_11456) -> A_11452)
Logical.infer_tm((apair_10‹L,L,U› A_11452 B_11456))
Logical.check_tm( A_11452, L )
Logical.infer_tm(A_11452)
Logical.assert_equal(L, L)
Logical.check_tm( B_11456, A_11452 -> L )
Logical.infer_tm(B_11456)
Logical.assert_equal(A_11452 -> L, A_11452 -> L)
Logical.infer_tm(A_11452)
Program.check_tm(
  function proj1_11465 :
    ∀ {A_11466 : L} ->
      ∀ {B_11467 : A_11466 -> L} ->
        (apair_10‹L,L,U› A_11466 B_11467) -> A_11466
  | A_11470 B_11471 (apair_intro_13 x_11472 select_11473) =>
    ((sing_elim_1‹L,L›) A_11470 x_11472 ((select_11473) true_5)),
  ∀ {A_11474 : L} ->
    ∀ {B_11475 : A_11474 -> L} ->
      (apair_10‹L,L,U› A_11474 B_11475) -> A_11474
)
Program.infer_tm(function proj1_11478 :
                   ∀ {A_11479 : L} ->
                     ∀ {B_11480 : A_11479 -> L} ->
                       (apair_10‹L,L,U› A_11479 B_11480) -> A_11479
                 | A_11483 B_11484 (apair_intro_13 x_11485 select_11486) =>
                   ((sing_elim_1‹L,L›)
                     A_11483 x_11485 ((select_11486) true_5)))
Logical.infer_tm(∀ {A_11488 : L} ->
                   ∀ {B_11489 : A_11488 -> L} ->
                     (apair_10‹L,L,U› A_11488 B_11489) -> A_11488)
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_11493 : A_11492 -> L} ->
                   (apair_10‹L,L,U› A_11492 B_11493) -> A_11492)
Logical.infer_tm(A_11492 -> L)
Logical.infer_tm(A_11492)
Logical.infer_tm(L)
Logical.infer_tm((apair_10‹L,L,U› A_11492 B_11496) -> A_11492)
Logical.infer_tm((apair_10‹L,L,U› A_11492 B_11496))
Logical.check_tm( A_11492, L )
Logical.infer_tm(A_11492)
Logical.assert_equal(L, L)
Logical.check_tm( B_11496, A_11492 -> L )
Logical.infer_tm(B_11496)
Logical.assert_equal(A_11492 -> L, A_11492 -> L)
Logical.infer_tm(A_11492)
trans12.Program.case_intro(A_11509, L)
Logical.infer_tm(L)
trans12.Program.case_intro(B_11514, #A_11509 -> L)
Logical.infer_tm(A_11509 -> L)
Logical.infer_tm(A_11509)
Logical.infer_tm(L)
trans12.Program.case_intro(__11523, (apair_10‹L,L,U› #A_11509 #B_11514))
Logical.infer_tm((apair_10‹L,L,U› A_11509 B_11514))
Logical.check_tm( A_11509, L )
Logical.infer_tm(A_11509)
Logical.assert_equal(L, L)
Logical.check_tm( B_11514, A_11509 -> L )
Logical.infer_tm(B_11514)
Logical.assert_equal(A_11509 -> L, A_11509 -> L)
Logical.infer_tm((apair_10‹L,L,U› A_11509 B_11514))
Logical.check_tm( A_11509, L )
Logical.infer_tm(A_11509)
Logical.assert_equal(L, L)
Logical.check_tm( B_11514, A_11509 -> L )
Logical.infer_tm(B_11514)
Logical.assert_equal(A_11509 -> L, A_11509 -> L)
trans12.Program.case_split(apairLLU_32, apair_introLLU_35)
Logical.infer_tm(A_11509)
Logical.infer_tm(∀ (b_11556 : bool_5) ->
                   match b_11556 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_11509 x_11542)
                   | false_6 => (boxed_2‹L› ((B_11514) x_11542)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11558 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_11509 x_11542)
                 | false_6 => (boxed_2‹L› ((B_11514) x_11542)))
Logical.check_tm( b_11558, bool_5 )
Logical.infer_tm(b_11558)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_11509 x_11542) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_11509 x_11542), L)
Logical.check_tm( (sing_3‹L,L› A_11509 x_11542), L )
Logical.infer_tm((sing_3‹L,L› A_11509 x_11542))
Logical.check_tm( A_11509, L )
Logical.infer_tm(A_11509)
Logical.assert_equal(L, L)
Logical.check_tm( x_11542, A_11509 )
Logical.infer_tm(x_11542)
Logical.assert_equal(A_11509, A_11509)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_11514) x_11542)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_11514) x_11542)), L)
Logical.check_tm( (boxed_2‹L› ((B_11514) x_11542)), L )
Logical.infer_tm((boxed_2‹L› ((B_11514) x_11542)))
Logical.check_tm( ((B_11514) x_11542), L )
Logical.infer_tm(((B_11514) x_11542))
Logical.infer_tm(B_11514)
Logical.check_tm( x_11542, A_11509 )
Logical.infer_tm(x_11542)
Logical.assert_equal(A_11509, A_11509)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹L,L,U› #A_11509 #B_11514),
      (apair_10‹L,L,U› #A_11509 #B_11514));
    {| eq_pat?(N #A_11509, A_11505 : L)
       eq_pat?(N #B_11514, B_11506 : #A_11509 -> L)
       eq_pat?(N #x_11542, x_11507 : #A_11509)
       eq_pat?(R #select_11543, select_11508 :
         ∀ (b_11595 : bool_5) ->
           match b_11595 in bool_5 -o L with
           | true_5 => (sing_3‹L,L› #A_11509 #x_11542)
           | false_6 => (boxed_2‹L› ((#B_11514) #x_11542))) ::: [] =>?
         ((sing_elim_1‹L,L›) #A_11505 #x_11507 ((#select_11508) true_5))
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_11509, A_11505 : L)
  eq_pat?(N #B_11514, B_11506 : #A_11509 -> L)
  eq_pat?(N #x_11542, x_11507 : #A_11509)
  eq_pat?(R #select_11543, select_11508 :
    ∀ (b_11598 : bool_5) ->
      match b_11598 in bool_5 -o L with
      | true_5 => (sing_3‹L,L› #A_11509 #x_11542)
      | false_6 => (boxed_2‹L› ((#B_11514) #x_11542)))
)
unify_global(
  eq_term?( (apair_10‹L,L,U› #A_11509 #B_11514),
    (apair_10‹L,L,U› #A_11509 #B_11514))
)
simpl_pprbm ~expand:false( #A_11509, #A_11505)
simpl_pprbm ~expand:false( #B_11514, #B_11506)
simpl_pprbm ~expand:false( #x_11542, #x_11507)
simpl_pprbm ~expand:false( #select_11543, #select_11508)
simpl_pprbm ~expand:false( (apair_10‹L,L,U› #A_11509 #B_11514),
  (apair_10‹L,L,U› #A_11509 #B_11514))
simpl_pprbm ~expand:false( #A_11509, #A_11509)
simpl_pprbm ~expand:false( #B_11514, #B_11514)
case_coverage_ok(
  ((sing_elim_1‹L,L›) A_11509 x_11542 ((select_11543) true_5)), A_11509)
Program.check_tm(
  ((sing_elim_1‹L,L›) A_11509 x_11542 ((select_11543) true_5)), A_11509
)
Program.infer_tm(((sing_elim_1‹L,L›)
                   A_11509 x_11542 ((select_11543) true_5)))
Program.infer_tm(((sing_elim_1‹L,L›) A_11509 x_11542))
Program.infer_tm(((sing_elim_1‹L,L›) A_11509))
Program.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_11509, L )
Logical.infer_tm(A_11509)
Logical.assert_equal(L, L)
Logical.check_tm( x_11542, A_11509 )
Logical.infer_tm(x_11542)
Logical.assert_equal(A_11509, A_11509)
Program.check_tm( ((select_11543) true_5), (sing_3‹L,L› A_11509 x_11542)
)
Program.infer_tm(((select_11543) true_5))
Program.infer_tm(select_11543)
Program.check_tm( true_5, bool_5 )
Program.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_11509 x_11542), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_11509 x_11542)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_11514)
                                                              x_11542)))
Logical.assert_equal(A_11509, A_11509)
trans12.Program.case_introed((apair_10‹L,L,U› #A_11509 #B_11514))
trans12.Program.case_introed(#A_11509 -> L)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_11609 : L} ->
                       ∀ {B_11610 : A_11609 -> L} ->
                         (apair_10‹L,L,U› A_11609 B_11610) -> A_11609, 
∀ {A_11613 : L} ->
  ∀ {B_11614 : A_11613 -> L} ->
    (apair_10‹L,L,U› A_11613 B_11614) -> A_11613)
Logical.infer_tm(∀ {A_11621 : L} ->
                   ∀ {B_11622 : A_11621 -> U} ->
                     (apair_10‹L,U,L› A_11621 B_11622) -> A_11621)
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_11626 : A_11625 -> U} ->
                   (apair_10‹L,U,L› A_11625 B_11626) -> A_11625)
Logical.infer_tm(A_11625 -> U)
Logical.infer_tm(A_11625)
Logical.infer_tm(U)
Logical.infer_tm((apair_10‹L,U,L› A_11625 B_11629) -> A_11625)
Logical.infer_tm((apair_10‹L,U,L› A_11625 B_11629))
Logical.check_tm( A_11625, L )
Logical.infer_tm(A_11625)
Logical.assert_equal(L, L)
Logical.check_tm( B_11629, A_11625 -> U )
Logical.infer_tm(B_11629)
Logical.assert_equal(A_11625 -> U, A_11625 -> U)
Logical.infer_tm(A_11625)
Program.check_tm(
  function proj1_11638 :
    ∀ {A_11639 : L} ->
      ∀ {B_11640 : A_11639 -> U} ->
        (apair_10‹L,U,L› A_11639 B_11640) -> A_11639
  | A_11643 B_11644 (apair_intro_13 x_11645 select_11646) =>
    ((sing_elim_1‹L,L›) A_11643 x_11645 ((select_11646) true_5)),
  ∀ {A_11647 : L} ->
    ∀ {B_11648 : A_11647 -> U} ->
      (apair_10‹L,U,L› A_11647 B_11648) -> A_11647
)
Program.infer_tm(function proj1_11651 :
                   ∀ {A_11652 : L} ->
                     ∀ {B_11653 : A_11652 -> U} ->
                       (apair_10‹L,U,L› A_11652 B_11653) -> A_11652
                 | A_11656 B_11657 (apair_intro_13 x_11658 select_11659) =>
                   ((sing_elim_1‹L,L›)
                     A_11656 x_11658 ((select_11659) true_5)))
Logical.infer_tm(∀ {A_11661 : L} ->
                   ∀ {B_11662 : A_11661 -> U} ->
                     (apair_10‹L,U,L› A_11661 B_11662) -> A_11661)
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_11666 : A_11665 -> U} ->
                   (apair_10‹L,U,L› A_11665 B_11666) -> A_11665)
Logical.infer_tm(A_11665 -> U)
Logical.infer_tm(A_11665)
Logical.infer_tm(U)
Logical.infer_tm((apair_10‹L,U,L› A_11665 B_11669) -> A_11665)
Logical.infer_tm((apair_10‹L,U,L› A_11665 B_11669))
Logical.check_tm( A_11665, L )
Logical.infer_tm(A_11665)
Logical.assert_equal(L, L)
Logical.check_tm( B_11669, A_11665 -> U )
Logical.infer_tm(B_11669)
Logical.assert_equal(A_11665 -> U, A_11665 -> U)
Logical.infer_tm(A_11665)
trans12.Program.case_intro(A_11682, L)
Logical.infer_tm(L)
trans12.Program.case_intro(B_11687, #A_11682 -> U)
Logical.infer_tm(A_11682 -> U)
Logical.infer_tm(A_11682)
Logical.infer_tm(U)
trans12.Program.case_intro(__11696, (apair_10‹L,U,L› #A_11682 #B_11687))
Logical.infer_tm((apair_10‹L,U,L› A_11682 B_11687))
Logical.check_tm( A_11682, L )
Logical.infer_tm(A_11682)
Logical.assert_equal(L, L)
Logical.check_tm( B_11687, A_11682 -> U )
Logical.infer_tm(B_11687)
Logical.assert_equal(A_11682 -> U, A_11682 -> U)
Logical.infer_tm((apair_10‹L,U,L› A_11682 B_11687))
Logical.check_tm( A_11682, L )
Logical.infer_tm(A_11682)
Logical.assert_equal(L, L)
Logical.check_tm( B_11687, A_11682 -> U )
Logical.infer_tm(B_11687)
Logical.assert_equal(A_11682 -> U, A_11682 -> U)
trans12.Program.case_split(apairLUL_33, apair_introLUL_36)
Logical.infer_tm(A_11682)
Logical.infer_tm(∀ (b_11729 : bool_5) -o
                   match b_11729 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_11682 x_11715)
                   | false_6 => (boxed_2‹U› ((B_11687) x_11715)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11731 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_11682 x_11715)
                 | false_6 => (boxed_2‹U› ((B_11687) x_11715)))
Logical.check_tm( b_11731, bool_5 )
Logical.infer_tm(b_11731)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_11682 x_11715) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_11682 x_11715), L)
Logical.check_tm( (sing_3‹L,L› A_11682 x_11715), L )
Logical.infer_tm((sing_3‹L,L› A_11682 x_11715))
Logical.check_tm( A_11682, L )
Logical.infer_tm(A_11682)
Logical.assert_equal(L, L)
Logical.check_tm( x_11715, A_11682 )
Logical.infer_tm(x_11715)
Logical.assert_equal(A_11682, A_11682)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_11687) x_11715)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_11687) x_11715)), L)
Logical.check_tm( (boxed_2‹U› ((B_11687) x_11715)), L )
Logical.infer_tm((boxed_2‹U› ((B_11687) x_11715)))
Logical.check_tm( ((B_11687) x_11715), U )
Logical.infer_tm(((B_11687) x_11715))
Logical.infer_tm(B_11687)
Logical.check_tm( x_11715, A_11682 )
Logical.infer_tm(x_11715)
Logical.assert_equal(A_11682, A_11682)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹L,U,L› #A_11682 #B_11687),
      (apair_10‹L,U,L› #A_11682 #B_11687));
    {| eq_pat?(N #A_11682, A_11678 : L)
       eq_pat?(N #B_11687, B_11679 : #A_11682 -> U)
       eq_pat?(N #x_11715, x_11680 : #A_11682)
       eq_pat?(R #select_11716, select_11681 :
         ∀ (b_11768 : bool_5) -o
           match b_11768 in bool_5 -o L with
           | true_5 => (sing_3‹L,L› #A_11682 #x_11715)
           | false_6 => (boxed_2‹U› ((#B_11687) #x_11715))) ::: [] =>?
         ((sing_elim_1‹L,L›) #A_11678 #x_11680 ((#select_11681) true_5))
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_11682, A_11678 : L)
  eq_pat?(N #B_11687, B_11679 : #A_11682 -> U)
  eq_pat?(N #x_11715, x_11680 : #A_11682)
  eq_pat?(R #select_11716, select_11681 :
    ∀ (b_11771 : bool_5) -o
      match b_11771 in bool_5 -o L with
      | true_5 => (sing_3‹L,L› #A_11682 #x_11715)
      | false_6 => (boxed_2‹U› ((#B_11687) #x_11715)))
)
unify_global(
  eq_term?( (apair_10‹L,U,L› #A_11682 #B_11687),
    (apair_10‹L,U,L› #A_11682 #B_11687))
)
simpl_pprbm ~expand:false( #A_11682, #A_11678)
simpl_pprbm ~expand:false( #B_11687, #B_11679)
simpl_pprbm ~expand:false( #x_11715, #x_11680)
simpl_pprbm ~expand:false( #select_11716, #select_11681)
simpl_pprbm ~expand:false( (apair_10‹L,U,L› #A_11682 #B_11687),
  (apair_10‹L,U,L› #A_11682 #B_11687))
simpl_pprbm ~expand:false( #A_11682, #A_11682)
simpl_pprbm ~expand:false( #B_11687, #B_11687)
case_coverage_ok(
  ((sing_elim_1‹L,L›) A_11682 x_11715 ((select_11716) true_5)), A_11682)
Program.check_tm(
  ((sing_elim_1‹L,L›) A_11682 x_11715 ((select_11716) true_5)), A_11682
)
Program.infer_tm(((sing_elim_1‹L,L›)
                   A_11682 x_11715 ((select_11716) true_5)))
Program.infer_tm(((sing_elim_1‹L,L›) A_11682 x_11715))
Program.infer_tm(((sing_elim_1‹L,L›) A_11682))
Program.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_11682, L )
Logical.infer_tm(A_11682)
Logical.assert_equal(L, L)
Logical.check_tm( x_11715, A_11682 )
Logical.infer_tm(x_11715)
Logical.assert_equal(A_11682, A_11682)
Program.check_tm( ((select_11716) true_5), (sing_3‹L,L› A_11682 x_11715)
)
Program.infer_tm(((select_11716) true_5))
Program.infer_tm(select_11716)
Program.check_tm( true_5, bool_5 )
Program.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_11682 x_11715), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_11682 x_11715)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_11687)
                                                              x_11715)))
Logical.assert_equal(A_11682, A_11682)
trans12.Program.case_introed((apair_10‹L,U,L› #A_11682 #B_11687))
trans12.Program.case_introed(#A_11682 -> U)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_11782 : L} ->
                       ∀ {B_11783 : A_11782 -> U} ->
                         (apair_10‹L,U,L› A_11782 B_11783) -> A_11782, 
∀ {A_11786 : L} ->
  ∀ {B_11787 : A_11786 -> U} ->
    (apair_10‹L,U,L› A_11786 B_11787) -> A_11786)
Logical.infer_tm(∀ {A_11794 : L} ->
                   ∀ {B_11795 : A_11794 -> U} ->
                     (apair_10‹L,U,U› A_11794 B_11795) -> A_11794)
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_11799 : A_11798 -> U} ->
                   (apair_10‹L,U,U› A_11798 B_11799) -> A_11798)
Logical.infer_tm(A_11798 -> U)
Logical.infer_tm(A_11798)
Logical.infer_tm(U)
Logical.infer_tm((apair_10‹L,U,U› A_11798 B_11802) -> A_11798)
Logical.infer_tm((apair_10‹L,U,U› A_11798 B_11802))
Logical.check_tm( A_11798, L )
Logical.infer_tm(A_11798)
Logical.assert_equal(L, L)
Logical.check_tm( B_11802, A_11798 -> U )
Logical.infer_tm(B_11802)
Logical.assert_equal(A_11798 -> U, A_11798 -> U)
Logical.infer_tm(A_11798)
Program.check_tm(
  function proj1_11811 :
    ∀ {A_11812 : L} ->
      ∀ {B_11813 : A_11812 -> U} ->
        (apair_10‹L,U,U› A_11812 B_11813) -> A_11812
  | A_11816 B_11817 (apair_intro_13 x_11818 select_11819) =>
    ((sing_elim_1‹L,L›) A_11816 x_11818 ((select_11819) true_5)),
  ∀ {A_11820 : L} ->
    ∀ {B_11821 : A_11820 -> U} ->
      (apair_10‹L,U,U› A_11820 B_11821) -> A_11820
)
Program.infer_tm(function proj1_11824 :
                   ∀ {A_11825 : L} ->
                     ∀ {B_11826 : A_11825 -> U} ->
                       (apair_10‹L,U,U› A_11825 B_11826) -> A_11825
                 | A_11829 B_11830 (apair_intro_13 x_11831 select_11832) =>
                   ((sing_elim_1‹L,L›)
                     A_11829 x_11831 ((select_11832) true_5)))
Logical.infer_tm(∀ {A_11834 : L} ->
                   ∀ {B_11835 : A_11834 -> U} ->
                     (apair_10‹L,U,U› A_11834 B_11835) -> A_11834)
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_11839 : A_11838 -> U} ->
                   (apair_10‹L,U,U› A_11838 B_11839) -> A_11838)
Logical.infer_tm(A_11838 -> U)
Logical.infer_tm(A_11838)
Logical.infer_tm(U)
Logical.infer_tm((apair_10‹L,U,U› A_11838 B_11842) -> A_11838)
Logical.infer_tm((apair_10‹L,U,U› A_11838 B_11842))
Logical.check_tm( A_11838, L )
Logical.infer_tm(A_11838)
Logical.assert_equal(L, L)
Logical.check_tm( B_11842, A_11838 -> U )
Logical.infer_tm(B_11842)
Logical.assert_equal(A_11838 -> U, A_11838 -> U)
Logical.infer_tm(A_11838)
trans12.Program.case_intro(A_11855, L)
Logical.infer_tm(L)
trans12.Program.case_intro(B_11860, #A_11855 -> U)
Logical.infer_tm(A_11855 -> U)
Logical.infer_tm(A_11855)
Logical.infer_tm(U)
trans12.Program.case_intro(__11869, (apair_10‹L,U,U› #A_11855 #B_11860))
Logical.infer_tm((apair_10‹L,U,U› A_11855 B_11860))
Logical.check_tm( A_11855, L )
Logical.infer_tm(A_11855)
Logical.assert_equal(L, L)
Logical.check_tm( B_11860, A_11855 -> U )
Logical.infer_tm(B_11860)
Logical.assert_equal(A_11855 -> U, A_11855 -> U)
Logical.infer_tm((apair_10‹L,U,U› A_11855 B_11860))
Logical.check_tm( A_11855, L )
Logical.infer_tm(A_11855)
Logical.assert_equal(L, L)
Logical.check_tm( B_11860, A_11855 -> U )
Logical.infer_tm(B_11860)
Logical.assert_equal(A_11855 -> U, A_11855 -> U)
trans12.Program.case_split(apairLUU_34, apair_introLUU_37)
Logical.infer_tm(A_11855)
Logical.infer_tm(∀ (b_11902 : bool_5) ->
                   match b_11902 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_11855 x_11888)
                   | false_6 => (boxed_2‹U› ((B_11860) x_11888)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_11904 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_11855 x_11888)
                 | false_6 => (boxed_2‹U› ((B_11860) x_11888)))
Logical.check_tm( b_11904, bool_5 )
Logical.infer_tm(b_11904)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_11855 x_11888) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_11855 x_11888), L)
Logical.check_tm( (sing_3‹L,L› A_11855 x_11888), L )
Logical.infer_tm((sing_3‹L,L› A_11855 x_11888))
Logical.check_tm( A_11855, L )
Logical.infer_tm(A_11855)
Logical.assert_equal(L, L)
Logical.check_tm( x_11888, A_11855 )
Logical.infer_tm(x_11888)
Logical.assert_equal(A_11855, A_11855)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_11860) x_11888)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_11860) x_11888)), L)
Logical.check_tm( (boxed_2‹U› ((B_11860) x_11888)), L )
Logical.infer_tm((boxed_2‹U› ((B_11860) x_11888)))
Logical.check_tm( ((B_11860) x_11888), U )
Logical.infer_tm(((B_11860) x_11888))
Logical.infer_tm(B_11860)
Logical.check_tm( x_11888, A_11855 )
Logical.infer_tm(x_11888)
Logical.assert_equal(A_11855, A_11855)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹L,U,U› #A_11855 #B_11860),
      (apair_10‹L,U,U› #A_11855 #B_11860));
    {| eq_pat?(N #A_11855, A_11851 : L)
       eq_pat?(N #B_11860, B_11852 : #A_11855 -> U)
       eq_pat?(N #x_11888, x_11853 : #A_11855)
       eq_pat?(R #select_11889, select_11854 :
         ∀ (b_11941 : bool_5) ->
           match b_11941 in bool_5 -o L with
           | true_5 => (sing_3‹L,L› #A_11855 #x_11888)
           | false_6 => (boxed_2‹U› ((#B_11860) #x_11888))) ::: [] =>?
         ((sing_elim_1‹L,L›) #A_11851 #x_11853 ((#select_11854) true_5))
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_11855, A_11851 : L)
  eq_pat?(N #B_11860, B_11852 : #A_11855 -> U)
  eq_pat?(N #x_11888, x_11853 : #A_11855)
  eq_pat?(R #select_11889, select_11854 :
    ∀ (b_11944 : bool_5) ->
      match b_11944 in bool_5 -o L with
      | true_5 => (sing_3‹L,L› #A_11855 #x_11888)
      | false_6 => (boxed_2‹U› ((#B_11860) #x_11888)))
)
unify_global(
  eq_term?( (apair_10‹L,U,U› #A_11855 #B_11860),
    (apair_10‹L,U,U› #A_11855 #B_11860))
)
simpl_pprbm ~expand:false( #A_11855, #A_11851)
simpl_pprbm ~expand:false( #B_11860, #B_11852)
simpl_pprbm ~expand:false( #x_11888, #x_11853)
simpl_pprbm ~expand:false( #select_11889, #select_11854)
simpl_pprbm ~expand:false( (apair_10‹L,U,U› #A_11855 #B_11860),
  (apair_10‹L,U,U› #A_11855 #B_11860))
simpl_pprbm ~expand:false( #A_11855, #A_11855)
simpl_pprbm ~expand:false( #B_11860, #B_11860)
case_coverage_ok(
  ((sing_elim_1‹L,L›) A_11855 x_11888 ((select_11889) true_5)), A_11855)
Program.check_tm(
  ((sing_elim_1‹L,L›) A_11855 x_11888 ((select_11889) true_5)), A_11855
)
Program.infer_tm(((sing_elim_1‹L,L›)
                   A_11855 x_11888 ((select_11889) true_5)))
Program.infer_tm(((sing_elim_1‹L,L›) A_11855 x_11888))
Program.infer_tm(((sing_elim_1‹L,L›) A_11855))
Program.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_11855, L )
Logical.infer_tm(A_11855)
Logical.assert_equal(L, L)
Logical.check_tm( x_11888, A_11855 )
Logical.infer_tm(x_11888)
Logical.assert_equal(A_11855, A_11855)
Program.check_tm( ((select_11889) true_5), (sing_3‹L,L› A_11855 x_11888)
)
Program.infer_tm(((select_11889) true_5))
Program.infer_tm(select_11889)
Program.check_tm( true_5, bool_5 )
Program.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_11855 x_11888), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_11855 x_11888)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_11860)
                                                              x_11888)))
Logical.assert_equal(A_11855, A_11855)
trans12.Program.case_introed((apair_10‹L,U,U› #A_11855 #B_11860))
trans12.Program.case_introed(#A_11855 -> U)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_11955 : L} ->
                       ∀ {B_11956 : A_11955 -> U} ->
                         (apair_10‹L,U,U› A_11955 B_11956) -> A_11955, 
∀ {A_11959 : L} ->
  ∀ {B_11960 : A_11959 -> U} ->
    (apair_10‹L,U,U› A_11959 B_11960) -> A_11959)
Logical.infer_tm(∀ {A_11967 : U} ->
                   ∀ {B_11968 : A_11967 -> L} ->
                     (apair_10‹U,L,L› A_11967 B_11968) -> A_11967)
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_11972 : A_11971 -> L} ->
                   (apair_10‹U,L,L› A_11971 B_11972) -> A_11971)
Logical.infer_tm(A_11971 -> L)
Logical.infer_tm(A_11971)
Logical.infer_tm(L)
Logical.infer_tm((apair_10‹U,L,L› A_11971 B_11975) -> A_11971)
Logical.infer_tm((apair_10‹U,L,L› A_11971 B_11975))
Logical.check_tm( A_11971, U )
Logical.infer_tm(A_11971)
Logical.assert_equal(U, U)
Logical.check_tm( B_11975, A_11971 -> L )
Logical.infer_tm(B_11975)
Logical.assert_equal(A_11971 -> L, A_11971 -> L)
Logical.infer_tm(A_11971)
Program.check_tm(
  function proj1_11984 :
    ∀ {A_11985 : U} ->
      ∀ {B_11986 : A_11985 -> L} ->
        (apair_10‹U,L,L› A_11985 B_11986) -> A_11985
  | A_11989 B_11990 (apair_intro_13 x_11991 select_11992) =>
    ((sing_elim_1‹U,L›) A_11989 x_11991 ((select_11992) true_5)),
  ∀ {A_11993 : U} ->
    ∀ {B_11994 : A_11993 -> L} ->
      (apair_10‹U,L,L› A_11993 B_11994) -> A_11993
)
Program.infer_tm(function proj1_11997 :
                   ∀ {A_11998 : U} ->
                     ∀ {B_11999 : A_11998 -> L} ->
                       (apair_10‹U,L,L› A_11998 B_11999) -> A_11998
                 | A_12002 B_12003 (apair_intro_13 x_12004 select_12005) =>
                   ((sing_elim_1‹U,L›)
                     A_12002 x_12004 ((select_12005) true_5)))
Logical.infer_tm(∀ {A_12007 : U} ->
                   ∀ {B_12008 : A_12007 -> L} ->
                     (apair_10‹U,L,L› A_12007 B_12008) -> A_12007)
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_12012 : A_12011 -> L} ->
                   (apair_10‹U,L,L› A_12011 B_12012) -> A_12011)
Logical.infer_tm(A_12011 -> L)
Logical.infer_tm(A_12011)
Logical.infer_tm(L)
Logical.infer_tm((apair_10‹U,L,L› A_12011 B_12015) -> A_12011)
Logical.infer_tm((apair_10‹U,L,L› A_12011 B_12015))
Logical.check_tm( A_12011, U )
Logical.infer_tm(A_12011)
Logical.assert_equal(U, U)
Logical.check_tm( B_12015, A_12011 -> L )
Logical.infer_tm(B_12015)
Logical.assert_equal(A_12011 -> L, A_12011 -> L)
Logical.infer_tm(A_12011)
trans12.Program.case_intro(A_12028, U)
Logical.infer_tm(U)
trans12.Program.case_intro(B_12033, #A_12028 -> L)
Logical.infer_tm(A_12028 -> L)
Logical.infer_tm(A_12028)
Logical.infer_tm(L)
trans12.Program.case_intro(__12042, (apair_10‹U,L,L› #A_12028 #B_12033))
Logical.infer_tm((apair_10‹U,L,L› A_12028 B_12033))
Logical.check_tm( A_12028, U )
Logical.infer_tm(A_12028)
Logical.assert_equal(U, U)
Logical.check_tm( B_12033, A_12028 -> L )
Logical.infer_tm(B_12033)
Logical.assert_equal(A_12028 -> L, A_12028 -> L)
Logical.infer_tm((apair_10‹U,L,L› A_12028 B_12033))
Logical.check_tm( A_12028, U )
Logical.infer_tm(A_12028)
Logical.assert_equal(U, U)
Logical.check_tm( B_12033, A_12028 -> L )
Logical.infer_tm(B_12033)
Logical.assert_equal(A_12028 -> L, A_12028 -> L)
trans12.Program.case_split(apairULL_35, apair_introULL_38)
Logical.infer_tm(A_12028)
Logical.infer_tm(∀ (b_12075 : bool_5) -o
                   match b_12075 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_12028 x_12061)
                   | false_6 => (boxed_2‹L› ((B_12033) x_12061)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_12077 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_12028 x_12061)
                 | false_6 => (boxed_2‹L› ((B_12033) x_12061)))
Logical.check_tm( b_12077, bool_5 )
Logical.infer_tm(b_12077)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_12028 x_12061) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_12028 x_12061), L)
Logical.check_tm( (sing_3‹U,L› A_12028 x_12061), L )
Logical.infer_tm((sing_3‹U,L› A_12028 x_12061))
Logical.check_tm( A_12028, U )
Logical.infer_tm(A_12028)
Logical.assert_equal(U, U)
Logical.check_tm( x_12061, A_12028 )
Logical.infer_tm(x_12061)
Logical.assert_equal(A_12028, A_12028)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_12033) x_12061)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_12033) x_12061)), L)
Logical.check_tm( (boxed_2‹L› ((B_12033) x_12061)), L )
Logical.infer_tm((boxed_2‹L› ((B_12033) x_12061)))
Logical.check_tm( ((B_12033) x_12061), L )
Logical.infer_tm(((B_12033) x_12061))
Logical.infer_tm(B_12033)
Logical.check_tm( x_12061, A_12028 )
Logical.infer_tm(x_12061)
Logical.assert_equal(A_12028, A_12028)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹U,L,L› #A_12028 #B_12033),
      (apair_10‹U,L,L› #A_12028 #B_12033));
    {| eq_pat?(N #A_12028, A_12024 : U)
       eq_pat?(N #B_12033, B_12025 : #A_12028 -> L)
       eq_pat?(N #x_12061, x_12026 : #A_12028)
       eq_pat?(R #select_12062, select_12027 :
         ∀ (b_12114 : bool_5) -o
           match b_12114 in bool_5 -o L with
           | true_5 => (sing_3‹U,L› #A_12028 #x_12061)
           | false_6 => (boxed_2‹L› ((#B_12033) #x_12061))) ::: [] =>?
         ((sing_elim_1‹U,L›) #A_12024 #x_12026 ((#select_12027) true_5))
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_12028, A_12024 : U)
  eq_pat?(N #B_12033, B_12025 : #A_12028 -> L)
  eq_pat?(N #x_12061, x_12026 : #A_12028)
  eq_pat?(R #select_12062, select_12027 :
    ∀ (b_12117 : bool_5) -o
      match b_12117 in bool_5 -o L with
      | true_5 => (sing_3‹U,L› #A_12028 #x_12061)
      | false_6 => (boxed_2‹L› ((#B_12033) #x_12061)))
)
unify_global(
  eq_term?( (apair_10‹U,L,L› #A_12028 #B_12033),
    (apair_10‹U,L,L› #A_12028 #B_12033))
)
simpl_pprbm ~expand:false( #A_12028, #A_12024)
simpl_pprbm ~expand:false( #B_12033, #B_12025)
simpl_pprbm ~expand:false( #x_12061, #x_12026)
simpl_pprbm ~expand:false( #select_12062, #select_12027)
simpl_pprbm ~expand:false( (apair_10‹U,L,L› #A_12028 #B_12033),
  (apair_10‹U,L,L› #A_12028 #B_12033))
simpl_pprbm ~expand:false( #A_12028, #A_12028)
simpl_pprbm ~expand:false( #B_12033, #B_12033)
case_coverage_ok(
  ((sing_elim_1‹U,L›) A_12028 x_12061 ((select_12062) true_5)), A_12028)
Program.check_tm(
  ((sing_elim_1‹U,L›) A_12028 x_12061 ((select_12062) true_5)), A_12028
)
Program.infer_tm(((sing_elim_1‹U,L›)
                   A_12028 x_12061 ((select_12062) true_5)))
Program.infer_tm(((sing_elim_1‹U,L›) A_12028 x_12061))
Program.infer_tm(((sing_elim_1‹U,L›) A_12028))
Program.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_12028, U )
Logical.infer_tm(A_12028)
Logical.assert_equal(U, U)
Logical.check_tm( x_12061, A_12028 )
Logical.infer_tm(x_12061)
Logical.assert_equal(A_12028, A_12028)
Program.check_tm( ((select_12062) true_5), (sing_3‹U,L› A_12028 x_12061)
)
Program.infer_tm(((select_12062) true_5))
Program.infer_tm(select_12062)
Program.check_tm( true_5, bool_5 )
Program.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_12028 x_12061), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_12028 x_12061)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_12033)
                                                              x_12061)))
Logical.assert_equal(A_12028, A_12028)
trans12.Program.case_introed((apair_10‹U,L,L› #A_12028 #B_12033))
trans12.Program.case_introed(#A_12028 -> L)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_12128 : U} ->
                       ∀ {B_12129 : A_12128 -> L} ->
                         (apair_10‹U,L,L› A_12128 B_12129) -> A_12128, 
∀ {A_12132 : U} ->
  ∀ {B_12133 : A_12132 -> L} ->
    (apair_10‹U,L,L› A_12132 B_12133) -> A_12132)
Logical.infer_tm(∀ {A_12140 : U} ->
                   ∀ {B_12141 : A_12140 -> L} ->
                     (apair_10‹U,L,U› A_12140 B_12141) -> A_12140)
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_12145 : A_12144 -> L} ->
                   (apair_10‹U,L,U› A_12144 B_12145) -> A_12144)
Logical.infer_tm(A_12144 -> L)
Logical.infer_tm(A_12144)
Logical.infer_tm(L)
Logical.infer_tm((apair_10‹U,L,U› A_12144 B_12148) -> A_12144)
Logical.infer_tm((apair_10‹U,L,U› A_12144 B_12148))
Logical.check_tm( A_12144, U )
Logical.infer_tm(A_12144)
Logical.assert_equal(U, U)
Logical.check_tm( B_12148, A_12144 -> L )
Logical.infer_tm(B_12148)
Logical.assert_equal(A_12144 -> L, A_12144 -> L)
Logical.infer_tm(A_12144)
Program.check_tm(
  function proj1_12157 :
    ∀ {A_12158 : U} ->
      ∀ {B_12159 : A_12158 -> L} ->
        (apair_10‹U,L,U› A_12158 B_12159) -> A_12158
  | A_12162 B_12163 (apair_intro_13 x_12164 select_12165) =>
    ((sing_elim_1‹U,L›) A_12162 x_12164 ((select_12165) true_5)),
  ∀ {A_12166 : U} ->
    ∀ {B_12167 : A_12166 -> L} ->
      (apair_10‹U,L,U› A_12166 B_12167) -> A_12166
)
Program.infer_tm(function proj1_12170 :
                   ∀ {A_12171 : U} ->
                     ∀ {B_12172 : A_12171 -> L} ->
                       (apair_10‹U,L,U› A_12171 B_12172) -> A_12171
                 | A_12175 B_12176 (apair_intro_13 x_12177 select_12178) =>
                   ((sing_elim_1‹U,L›)
                     A_12175 x_12177 ((select_12178) true_5)))
Logical.infer_tm(∀ {A_12180 : U} ->
                   ∀ {B_12181 : A_12180 -> L} ->
                     (apair_10‹U,L,U› A_12180 B_12181) -> A_12180)
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_12185 : A_12184 -> L} ->
                   (apair_10‹U,L,U› A_12184 B_12185) -> A_12184)
Logical.infer_tm(A_12184 -> L)
Logical.infer_tm(A_12184)
Logical.infer_tm(L)
Logical.infer_tm((apair_10‹U,L,U› A_12184 B_12188) -> A_12184)
Logical.infer_tm((apair_10‹U,L,U› A_12184 B_12188))
Logical.check_tm( A_12184, U )
Logical.infer_tm(A_12184)
Logical.assert_equal(U, U)
Logical.check_tm( B_12188, A_12184 -> L )
Logical.infer_tm(B_12188)
Logical.assert_equal(A_12184 -> L, A_12184 -> L)
Logical.infer_tm(A_12184)
trans12.Program.case_intro(A_12201, U)
Logical.infer_tm(U)
trans12.Program.case_intro(B_12206, #A_12201 -> L)
Logical.infer_tm(A_12201 -> L)
Logical.infer_tm(A_12201)
Logical.infer_tm(L)
trans12.Program.case_intro(__12215, (apair_10‹U,L,U› #A_12201 #B_12206))
Logical.infer_tm((apair_10‹U,L,U› A_12201 B_12206))
Logical.check_tm( A_12201, U )
Logical.infer_tm(A_12201)
Logical.assert_equal(U, U)
Logical.check_tm( B_12206, A_12201 -> L )
Logical.infer_tm(B_12206)
Logical.assert_equal(A_12201 -> L, A_12201 -> L)
Logical.infer_tm((apair_10‹U,L,U› A_12201 B_12206))
Logical.check_tm( A_12201, U )
Logical.infer_tm(A_12201)
Logical.assert_equal(U, U)
Logical.check_tm( B_12206, A_12201 -> L )
Logical.infer_tm(B_12206)
Logical.assert_equal(A_12201 -> L, A_12201 -> L)
trans12.Program.case_split(apairULU_36, apair_introULU_39)
Logical.infer_tm(A_12201)
Logical.infer_tm(∀ (b_12248 : bool_5) ->
                   match b_12248 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_12201 x_12234)
                   | false_6 => (boxed_2‹L› ((B_12206) x_12234)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_12250 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_12201 x_12234)
                 | false_6 => (boxed_2‹L› ((B_12206) x_12234)))
Logical.check_tm( b_12250, bool_5 )
Logical.infer_tm(b_12250)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_12201 x_12234) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_12201 x_12234), L)
Logical.check_tm( (sing_3‹U,L› A_12201 x_12234), L )
Logical.infer_tm((sing_3‹U,L› A_12201 x_12234))
Logical.check_tm( A_12201, U )
Logical.infer_tm(A_12201)
Logical.assert_equal(U, U)
Logical.check_tm( x_12234, A_12201 )
Logical.infer_tm(x_12234)
Logical.assert_equal(A_12201, A_12201)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_12206) x_12234)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_12206) x_12234)), L)
Logical.check_tm( (boxed_2‹L› ((B_12206) x_12234)), L )
Logical.infer_tm((boxed_2‹L› ((B_12206) x_12234)))
Logical.check_tm( ((B_12206) x_12234), L )
Logical.infer_tm(((B_12206) x_12234))
Logical.infer_tm(B_12206)
Logical.check_tm( x_12234, A_12201 )
Logical.infer_tm(x_12234)
Logical.assert_equal(A_12201, A_12201)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹U,L,U› #A_12201 #B_12206),
      (apair_10‹U,L,U› #A_12201 #B_12206));
    {| eq_pat?(N #A_12201, A_12197 : U)
       eq_pat?(N #B_12206, B_12198 : #A_12201 -> L)
       eq_pat?(N #x_12234, x_12199 : #A_12201)
       eq_pat?(R #select_12235, select_12200 :
         ∀ (b_12287 : bool_5) ->
           match b_12287 in bool_5 -o L with
           | true_5 => (sing_3‹U,L› #A_12201 #x_12234)
           | false_6 => (boxed_2‹L› ((#B_12206) #x_12234))) ::: [] =>?
         ((sing_elim_1‹U,L›) #A_12197 #x_12199 ((#select_12200) true_5))
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_12201, A_12197 : U)
  eq_pat?(N #B_12206, B_12198 : #A_12201 -> L)
  eq_pat?(N #x_12234, x_12199 : #A_12201)
  eq_pat?(R #select_12235, select_12200 :
    ∀ (b_12290 : bool_5) ->
      match b_12290 in bool_5 -o L with
      | true_5 => (sing_3‹U,L› #A_12201 #x_12234)
      | false_6 => (boxed_2‹L› ((#B_12206) #x_12234)))
)
unify_global(
  eq_term?( (apair_10‹U,L,U› #A_12201 #B_12206),
    (apair_10‹U,L,U› #A_12201 #B_12206))
)
simpl_pprbm ~expand:false( #A_12201, #A_12197)
simpl_pprbm ~expand:false( #B_12206, #B_12198)
simpl_pprbm ~expand:false( #x_12234, #x_12199)
simpl_pprbm ~expand:false( #select_12235, #select_12200)
simpl_pprbm ~expand:false( (apair_10‹U,L,U› #A_12201 #B_12206),
  (apair_10‹U,L,U› #A_12201 #B_12206))
simpl_pprbm ~expand:false( #A_12201, #A_12201)
simpl_pprbm ~expand:false( #B_12206, #B_12206)
case_coverage_ok(
  ((sing_elim_1‹U,L›) A_12201 x_12234 ((select_12235) true_5)), A_12201)
Program.check_tm(
  ((sing_elim_1‹U,L›) A_12201 x_12234 ((select_12235) true_5)), A_12201
)
Program.infer_tm(((sing_elim_1‹U,L›)
                   A_12201 x_12234 ((select_12235) true_5)))
Program.infer_tm(((sing_elim_1‹U,L›) A_12201 x_12234))
Program.infer_tm(((sing_elim_1‹U,L›) A_12201))
Program.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_12201, U )
Logical.infer_tm(A_12201)
Logical.assert_equal(U, U)
Logical.check_tm( x_12234, A_12201 )
Logical.infer_tm(x_12234)
Logical.assert_equal(A_12201, A_12201)
Program.check_tm( ((select_12235) true_5), (sing_3‹U,L› A_12201 x_12234)
)
Program.infer_tm(((select_12235) true_5))
Program.infer_tm(select_12235)
Program.check_tm( true_5, bool_5 )
Program.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_12201 x_12234), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_12201 x_12234)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_12206)
                                                              x_12234)))
Logical.assert_equal(A_12201, A_12201)
trans12.Program.case_introed((apair_10‹U,L,U› #A_12201 #B_12206))
trans12.Program.case_introed(#A_12201 -> L)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_12301 : U} ->
                       ∀ {B_12302 : A_12301 -> L} ->
                         (apair_10‹U,L,U› A_12301 B_12302) -> A_12301, 
∀ {A_12305 : U} ->
  ∀ {B_12306 : A_12305 -> L} ->
    (apair_10‹U,L,U› A_12305 B_12306) -> A_12305)
Logical.infer_tm(∀ {A_12313 : U} ->
                   ∀ {B_12314 : A_12313 -> U} ->
                     (apair_10‹U,U,L› A_12313 B_12314) -> A_12313)
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_12318 : A_12317 -> U} ->
                   (apair_10‹U,U,L› A_12317 B_12318) -> A_12317)
Logical.infer_tm(A_12317 -> U)
Logical.infer_tm(A_12317)
Logical.infer_tm(U)
Logical.infer_tm((apair_10‹U,U,L› A_12317 B_12321) -> A_12317)
Logical.infer_tm((apair_10‹U,U,L› A_12317 B_12321))
Logical.check_tm( A_12317, U )
Logical.infer_tm(A_12317)
Logical.assert_equal(U, U)
Logical.check_tm( B_12321, A_12317 -> U )
Logical.infer_tm(B_12321)
Logical.assert_equal(A_12317 -> U, A_12317 -> U)
Logical.infer_tm(A_12317)
Program.check_tm(
  function proj1_12330 :
    ∀ {A_12331 : U} ->
      ∀ {B_12332 : A_12331 -> U} ->
        (apair_10‹U,U,L› A_12331 B_12332) -> A_12331
  | A_12335 B_12336 (apair_intro_13 x_12337 select_12338) =>
    ((sing_elim_1‹U,L›) A_12335 x_12337 ((select_12338) true_5)),
  ∀ {A_12339 : U} ->
    ∀ {B_12340 : A_12339 -> U} ->
      (apair_10‹U,U,L› A_12339 B_12340) -> A_12339
)
Program.infer_tm(function proj1_12343 :
                   ∀ {A_12344 : U} ->
                     ∀ {B_12345 : A_12344 -> U} ->
                       (apair_10‹U,U,L› A_12344 B_12345) -> A_12344
                 | A_12348 B_12349 (apair_intro_13 x_12350 select_12351) =>
                   ((sing_elim_1‹U,L›)
                     A_12348 x_12350 ((select_12351) true_5)))
Logical.infer_tm(∀ {A_12353 : U} ->
                   ∀ {B_12354 : A_12353 -> U} ->
                     (apair_10‹U,U,L› A_12353 B_12354) -> A_12353)
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_12358 : A_12357 -> U} ->
                   (apair_10‹U,U,L› A_12357 B_12358) -> A_12357)
Logical.infer_tm(A_12357 -> U)
Logical.infer_tm(A_12357)
Logical.infer_tm(U)
Logical.infer_tm((apair_10‹U,U,L› A_12357 B_12361) -> A_12357)
Logical.infer_tm((apair_10‹U,U,L› A_12357 B_12361))
Logical.check_tm( A_12357, U )
Logical.infer_tm(A_12357)
Logical.assert_equal(U, U)
Logical.check_tm( B_12361, A_12357 -> U )
Logical.infer_tm(B_12361)
Logical.assert_equal(A_12357 -> U, A_12357 -> U)
Logical.infer_tm(A_12357)
trans12.Program.case_intro(A_12374, U)
Logical.infer_tm(U)
trans12.Program.case_intro(B_12379, #A_12374 -> U)
Logical.infer_tm(A_12374 -> U)
Logical.infer_tm(A_12374)
Logical.infer_tm(U)
trans12.Program.case_intro(__12388, (apair_10‹U,U,L› #A_12374 #B_12379))
Logical.infer_tm((apair_10‹U,U,L› A_12374 B_12379))
Logical.check_tm( A_12374, U )
Logical.infer_tm(A_12374)
Logical.assert_equal(U, U)
Logical.check_tm( B_12379, A_12374 -> U )
Logical.infer_tm(B_12379)
Logical.assert_equal(A_12374 -> U, A_12374 -> U)
Logical.infer_tm((apair_10‹U,U,L› A_12374 B_12379))
Logical.check_tm( A_12374, U )
Logical.infer_tm(A_12374)
Logical.assert_equal(U, U)
Logical.check_tm( B_12379, A_12374 -> U )
Logical.infer_tm(B_12379)
Logical.assert_equal(A_12374 -> U, A_12374 -> U)
trans12.Program.case_split(apairUUL_37, apair_introUUL_40)
Logical.infer_tm(A_12374)
Logical.infer_tm(∀ (b_12421 : bool_5) -o
                   match b_12421 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_12374 x_12407)
                   | false_6 => (boxed_2‹U› ((B_12379) x_12407)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_12423 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_12374 x_12407)
                 | false_6 => (boxed_2‹U› ((B_12379) x_12407)))
Logical.check_tm( b_12423, bool_5 )
Logical.infer_tm(b_12423)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_12374 x_12407) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_12374 x_12407), L)
Logical.check_tm( (sing_3‹U,L› A_12374 x_12407), L )
Logical.infer_tm((sing_3‹U,L› A_12374 x_12407))
Logical.check_tm( A_12374, U )
Logical.infer_tm(A_12374)
Logical.assert_equal(U, U)
Logical.check_tm( x_12407, A_12374 )
Logical.infer_tm(x_12407)
Logical.assert_equal(A_12374, A_12374)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_12379) x_12407)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_12379) x_12407)), L)
Logical.check_tm( (boxed_2‹U› ((B_12379) x_12407)), L )
Logical.infer_tm((boxed_2‹U› ((B_12379) x_12407)))
Logical.check_tm( ((B_12379) x_12407), U )
Logical.infer_tm(((B_12379) x_12407))
Logical.infer_tm(B_12379)
Logical.check_tm( x_12407, A_12374 )
Logical.infer_tm(x_12407)
Logical.assert_equal(A_12374, A_12374)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹U,U,L› #A_12374 #B_12379),
      (apair_10‹U,U,L› #A_12374 #B_12379));
    {| eq_pat?(N #A_12374, A_12370 : U)
       eq_pat?(N #B_12379, B_12371 : #A_12374 -> U)
       eq_pat?(N #x_12407, x_12372 : #A_12374)
       eq_pat?(R #select_12408, select_12373 :
         ∀ (b_12460 : bool_5) -o
           match b_12460 in bool_5 -o L with
           | true_5 => (sing_3‹U,L› #A_12374 #x_12407)
           | false_6 => (boxed_2‹U› ((#B_12379) #x_12407))) ::: [] =>?
         ((sing_elim_1‹U,L›) #A_12370 #x_12372 ((#select_12373) true_5))
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_12374, A_12370 : U)
  eq_pat?(N #B_12379, B_12371 : #A_12374 -> U)
  eq_pat?(N #x_12407, x_12372 : #A_12374)
  eq_pat?(R #select_12408, select_12373 :
    ∀ (b_12463 : bool_5) -o
      match b_12463 in bool_5 -o L with
      | true_5 => (sing_3‹U,L› #A_12374 #x_12407)
      | false_6 => (boxed_2‹U› ((#B_12379) #x_12407)))
)
unify_global(
  eq_term?( (apair_10‹U,U,L› #A_12374 #B_12379),
    (apair_10‹U,U,L› #A_12374 #B_12379))
)
simpl_pprbm ~expand:false( #A_12374, #A_12370)
simpl_pprbm ~expand:false( #B_12379, #B_12371)
simpl_pprbm ~expand:false( #x_12407, #x_12372)
simpl_pprbm ~expand:false( #select_12408, #select_12373)
simpl_pprbm ~expand:false( (apair_10‹U,U,L› #A_12374 #B_12379),
  (apair_10‹U,U,L› #A_12374 #B_12379))
simpl_pprbm ~expand:false( #A_12374, #A_12374)
simpl_pprbm ~expand:false( #B_12379, #B_12379)
case_coverage_ok(
  ((sing_elim_1‹U,L›) A_12374 x_12407 ((select_12408) true_5)), A_12374)
Program.check_tm(
  ((sing_elim_1‹U,L›) A_12374 x_12407 ((select_12408) true_5)), A_12374
)
Program.infer_tm(((sing_elim_1‹U,L›)
                   A_12374 x_12407 ((select_12408) true_5)))
Program.infer_tm(((sing_elim_1‹U,L›) A_12374 x_12407))
Program.infer_tm(((sing_elim_1‹U,L›) A_12374))
Program.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_12374, U )
Logical.infer_tm(A_12374)
Logical.assert_equal(U, U)
Logical.check_tm( x_12407, A_12374 )
Logical.infer_tm(x_12407)
Logical.assert_equal(A_12374, A_12374)
Program.check_tm( ((select_12408) true_5), (sing_3‹U,L› A_12374 x_12407)
)
Program.infer_tm(((select_12408) true_5))
Program.infer_tm(select_12408)
Program.check_tm( true_5, bool_5 )
Program.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_12374 x_12407), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_12374 x_12407)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_12379)
                                                              x_12407)))
Logical.assert_equal(A_12374, A_12374)
trans12.Program.case_introed((apair_10‹U,U,L› #A_12374 #B_12379))
trans12.Program.case_introed(#A_12374 -> U)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_12474 : U} ->
                       ∀ {B_12475 : A_12474 -> U} ->
                         (apair_10‹U,U,L› A_12474 B_12475) -> A_12474, 
∀ {A_12478 : U} ->
  ∀ {B_12479 : A_12478 -> U} ->
    (apair_10‹U,U,L› A_12478 B_12479) -> A_12478)
Logical.infer_tm(∀ {A_12486 : U} ->
                   ∀ {B_12487 : A_12486 -> U} ->
                     (apair_10‹U,U,U› A_12486 B_12487) -> A_12486)
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_12491 : A_12490 -> U} ->
                   (apair_10‹U,U,U› A_12490 B_12491) -> A_12490)
Logical.infer_tm(A_12490 -> U)
Logical.infer_tm(A_12490)
Logical.infer_tm(U)
Logical.infer_tm((apair_10‹U,U,U› A_12490 B_12494) -> A_12490)
Logical.infer_tm((apair_10‹U,U,U› A_12490 B_12494))
Logical.check_tm( A_12490, U )
Logical.infer_tm(A_12490)
Logical.assert_equal(U, U)
Logical.check_tm( B_12494, A_12490 -> U )
Logical.infer_tm(B_12494)
Logical.assert_equal(A_12490 -> U, A_12490 -> U)
Logical.infer_tm(A_12490)
Program.check_tm(
  function proj1_12503 :
    ∀ {A_12504 : U} ->
      ∀ {B_12505 : A_12504 -> U} ->
        (apair_10‹U,U,U› A_12504 B_12505) -> A_12504
  | A_12508 B_12509 (apair_intro_13 x_12510 select_12511) =>
    ((sing_elim_1‹U,L›) A_12508 x_12510 ((select_12511) true_5)),
  ∀ {A_12512 : U} ->
    ∀ {B_12513 : A_12512 -> U} ->
      (apair_10‹U,U,U› A_12512 B_12513) -> A_12512
)
Program.infer_tm(function proj1_12516 :
                   ∀ {A_12517 : U} ->
                     ∀ {B_12518 : A_12517 -> U} ->
                       (apair_10‹U,U,U› A_12517 B_12518) -> A_12517
                 | A_12521 B_12522 (apair_intro_13 x_12523 select_12524) =>
                   ((sing_elim_1‹U,L›)
                     A_12521 x_12523 ((select_12524) true_5)))
Logical.infer_tm(∀ {A_12526 : U} ->
                   ∀ {B_12527 : A_12526 -> U} ->
                     (apair_10‹U,U,U› A_12526 B_12527) -> A_12526)
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_12531 : A_12530 -> U} ->
                   (apair_10‹U,U,U› A_12530 B_12531) -> A_12530)
Logical.infer_tm(A_12530 -> U)
Logical.infer_tm(A_12530)
Logical.infer_tm(U)
Logical.infer_tm((apair_10‹U,U,U› A_12530 B_12534) -> A_12530)
Logical.infer_tm((apair_10‹U,U,U› A_12530 B_12534))
Logical.check_tm( A_12530, U )
Logical.infer_tm(A_12530)
Logical.assert_equal(U, U)
Logical.check_tm( B_12534, A_12530 -> U )
Logical.infer_tm(B_12534)
Logical.assert_equal(A_12530 -> U, A_12530 -> U)
Logical.infer_tm(A_12530)
trans12.Program.case_intro(A_12547, U)
Logical.infer_tm(U)
trans12.Program.case_intro(B_12552, #A_12547 -> U)
Logical.infer_tm(A_12547 -> U)
Logical.infer_tm(A_12547)
Logical.infer_tm(U)
trans12.Program.case_intro(__12561, (apair_10‹U,U,U› #A_12547 #B_12552))
Logical.infer_tm((apair_10‹U,U,U› A_12547 B_12552))
Logical.check_tm( A_12547, U )
Logical.infer_tm(A_12547)
Logical.assert_equal(U, U)
Logical.check_tm( B_12552, A_12547 -> U )
Logical.infer_tm(B_12552)
Logical.assert_equal(A_12547 -> U, A_12547 -> U)
Logical.infer_tm((apair_10‹U,U,U› A_12547 B_12552))
Logical.check_tm( A_12547, U )
Logical.infer_tm(A_12547)
Logical.assert_equal(U, U)
Logical.check_tm( B_12552, A_12547 -> U )
Logical.infer_tm(B_12552)
Logical.assert_equal(A_12547 -> U, A_12547 -> U)
trans12.Program.case_split(apairUUU_38, apair_introUUU_41)
Logical.infer_tm(A_12547)
Logical.infer_tm(∀ (b_12594 : bool_5) ->
                   match b_12594 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_12547 x_12580)
                   | false_6 => (boxed_2‹U› ((B_12552) x_12580)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_12596 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_12547 x_12580)
                 | false_6 => (boxed_2‹U› ((B_12552) x_12580)))
Logical.check_tm( b_12596, bool_5 )
Logical.infer_tm(b_12596)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_12547 x_12580) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_12547 x_12580), L)
Logical.check_tm( (sing_3‹U,L› A_12547 x_12580), L )
Logical.infer_tm((sing_3‹U,L› A_12547 x_12580))
Logical.check_tm( A_12547, U )
Logical.infer_tm(A_12547)
Logical.assert_equal(U, U)
Logical.check_tm( x_12580, A_12547 )
Logical.infer_tm(x_12580)
Logical.assert_equal(A_12547, A_12547)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_12552) x_12580)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_12552) x_12580)), L)
Logical.check_tm( (boxed_2‹U› ((B_12552) x_12580)), L )
Logical.infer_tm((boxed_2‹U› ((B_12552) x_12580)))
Logical.check_tm( ((B_12552) x_12580), U )
Logical.infer_tm(((B_12552) x_12580))
Logical.infer_tm(B_12552)
Logical.check_tm( x_12580, A_12547 )
Logical.infer_tm(x_12580)
Logical.assert_equal(A_12547, A_12547)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹U,U,U› #A_12547 #B_12552),
      (apair_10‹U,U,U› #A_12547 #B_12552));
    {| eq_pat?(N #A_12547, A_12543 : U)
       eq_pat?(N #B_12552, B_12544 : #A_12547 -> U)
       eq_pat?(N #x_12580, x_12545 : #A_12547)
       eq_pat?(R #select_12581, select_12546 :
         ∀ (b_12633 : bool_5) ->
           match b_12633 in bool_5 -o L with
           | true_5 => (sing_3‹U,L› #A_12547 #x_12580)
           | false_6 => (boxed_2‹U› ((#B_12552) #x_12580))) ::: [] =>?
         ((sing_elim_1‹U,L›) #A_12543 #x_12545 ((#select_12546) true_5))
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_12547, A_12543 : U)
  eq_pat?(N #B_12552, B_12544 : #A_12547 -> U)
  eq_pat?(N #x_12580, x_12545 : #A_12547)
  eq_pat?(R #select_12581, select_12546 :
    ∀ (b_12636 : bool_5) ->
      match b_12636 in bool_5 -o L with
      | true_5 => (sing_3‹U,L› #A_12547 #x_12580)
      | false_6 => (boxed_2‹U› ((#B_12552) #x_12580)))
)
unify_global(
  eq_term?( (apair_10‹U,U,U› #A_12547 #B_12552),
    (apair_10‹U,U,U› #A_12547 #B_12552))
)
simpl_pprbm ~expand:false( #A_12547, #A_12543)
simpl_pprbm ~expand:false( #B_12552, #B_12544)
simpl_pprbm ~expand:false( #x_12580, #x_12545)
simpl_pprbm ~expand:false( #select_12581, #select_12546)
simpl_pprbm ~expand:false( (apair_10‹U,U,U› #A_12547 #B_12552),
  (apair_10‹U,U,U› #A_12547 #B_12552))
simpl_pprbm ~expand:false( #A_12547, #A_12547)
simpl_pprbm ~expand:false( #B_12552, #B_12552)
case_coverage_ok(
  ((sing_elim_1‹U,L›) A_12547 x_12580 ((select_12581) true_5)), A_12547)
Program.check_tm(
  ((sing_elim_1‹U,L›) A_12547 x_12580 ((select_12581) true_5)), A_12547
)
Program.infer_tm(((sing_elim_1‹U,L›)
                   A_12547 x_12580 ((select_12581) true_5)))
Program.infer_tm(((sing_elim_1‹U,L›) A_12547 x_12580))
Program.infer_tm(((sing_elim_1‹U,L›) A_12547))
Program.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_12547, U )
Logical.infer_tm(A_12547)
Logical.assert_equal(U, U)
Logical.check_tm( x_12580, A_12547 )
Logical.infer_tm(x_12580)
Logical.assert_equal(A_12547, A_12547)
Program.check_tm( ((select_12581) true_5), (sing_3‹U,L› A_12547 x_12580)
)
Program.infer_tm(((select_12581) true_5))
Program.infer_tm(select_12581)
Program.check_tm( true_5, bool_5 )
Program.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_12547 x_12580), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_12547 x_12580)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_12552)
                                                              x_12580)))
Logical.assert_equal(A_12547, A_12547)
trans12.Program.case_introed((apair_10‹U,U,U› #A_12547 #B_12552))
trans12.Program.case_introed(#A_12547 -> U)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_12647 : U} ->
                       ∀ {B_12648 : A_12647 -> U} ->
                         (apair_10‹U,U,U› A_12647 B_12648) -> A_12647, 
∀ {A_12651 : U} ->
  ∀ {B_12652 : A_12651 -> U} ->
    (apair_10‹U,U,U› A_12651 B_12652) -> A_12651)
Logical.infer_tm(∀ {A_12659 : L} ->
                   ∀ {B_12660 : A_12659 -> L} ->
                     ∀ (x_12662 : (apair_10‹L,L,L› A_12659 B_12660)) ->
                       ((B_12660)
                         ((proj1_7‹L,L,L›) A_12659 B_12660 x_12662)))
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_12664 : A_12663 -> L} ->
                   ∀ (x_12666 : (apair_10‹L,L,L› A_12663 B_12664)) ->
                     ((B_12664)
                       ((proj1_7‹L,L,L›) A_12663 B_12664 x_12666)))
Logical.infer_tm(A_12663 -> L)
Logical.infer_tm(A_12663)
Logical.infer_tm(L)
Logical.infer_tm(∀ (x_12670 : (apair_10‹L,L,L› A_12663 B_12667)) ->
                   ((B_12667) ((proj1_7‹L,L,L›) A_12663 B_12667 x_12670)))
Logical.infer_tm((apair_10‹L,L,L› A_12663 B_12667))
Logical.check_tm( A_12663, L )
Logical.infer_tm(A_12663)
Logical.assert_equal(L, L)
Logical.check_tm( B_12667, A_12663 -> L )
Logical.infer_tm(B_12667)
Logical.assert_equal(A_12663 -> L, A_12663 -> L)
Logical.infer_tm(((B_12667) ((proj1_7‹L,L,L›) A_12663 B_12667 x_12671)))
Logical.infer_tm(B_12667)
Logical.check_tm( ((proj1_7‹L,L,L›) A_12663 B_12667 x_12671), A_12663 )
Logical.infer_tm(((proj1_7‹L,L,L›) A_12663 B_12667 x_12671))
Logical.infer_tm(((proj1_7‹L,L,L›) A_12663 B_12667))
Logical.infer_tm(((proj1_7‹L,L,L›) A_12663))
Logical.infer_tm(proj1_7‹L,L,L›)
Logical.check_tm( A_12663, L )
Logical.infer_tm(A_12663)
Logical.assert_equal(L, L)
Logical.check_tm( B_12667, A_12663 -> L )
Logical.infer_tm(B_12667)
Logical.assert_equal(A_12663 -> L, A_12663 -> L)
Logical.check_tm( x_12671, (apair_10‹L,L,L› A_12663 B_12667) )
Logical.infer_tm(x_12671)
Logical.assert_equal((apair_10‹L,L,L› A_12663 B_12667), (apair_10‹L,L,L›
                                                              A_12663 B_12667))
Logical.assert_equal(A_12663, A_12663)
Program.check_tm(
  function proj2_12680 :
    ∀ {A_12681 : L} ->
      ∀ {B_12682 : A_12681 -> L} ->
        ∀ (x_12684 : (apair_10‹L,L,L› A_12681 B_12682)) ->
          ((B_12682) ((proj1_7‹L,L,L›) A_12681 B_12682 x_12684))
  | A_12685 B_12686 (apair_intro_13 x_12687 select_12688) =>
    match x_12687, ((select_12688) true_5),
    ((sing_uniq_2‹L,L›) A_12685 x_12687 ((select_12688) true_5)),
    ((select_12688) false_6) in
      ∀ {x0_12689 : A_12685} -o
        ∀ {a0_12690 : (sing_3‹L,L› A_12685 x_12687)} -o
          {(eq_1‹L›
             A_12685 x0_12689
             ((sing_elim_1‹L,L›) A_12685 x_12687 a0_12690))} -o
            (boxed_2‹L› ((B_12686) x0_12689)) -o
              ((B_12686) ((sing_elim_1‹L,L›) A_12685 x_12687 a0_12690))
    with
    | x0_12693, a0_12694, refl_1, (box_2 m_12695) => m_12695,
  ∀ {A_12696 : L} ->
    ∀ {B_12697 : A_12696 -> L} ->
      ∀ (x_12699 : (apair_10‹L,L,L› A_12696 B_12697)) ->
        ((B_12697) ((proj1_7‹L,L,L›) A_12696 B_12697 x_12699))
)
Program.infer_tm(function proj2_12700 :
                   ∀ {A_12701 : L} ->
                     ∀ {B_12702 : A_12701 -> L} ->
                       ∀ (x_12704 :
                         (apair_10‹L,L,L› A_12701 B_12702)) ->
                         ((B_12702)
                           ((proj1_7‹L,L,L›) A_12701 B_12702 x_12704))
                 | A_12705 B_12706 (apair_intro_13 x_12707 select_12708) =>
                   match x_12707, ((select_12708) true_5),
                   ((sing_uniq_2‹L,L›)
                     A_12705 x_12707 ((select_12708) true_5)),
                   ((select_12708) false_6) in
                     ∀ {x0_12709 : A_12705} -o
                       ∀ {a0_12710 : (sing_3‹L,L› A_12705 x_12707)} -o
                         {(eq_1‹L›
                            A_12705 x0_12709
                            ((sing_elim_1‹L,L›) A_12705 x_12707 a0_12710))} -o
                           (boxed_2‹L› ((B_12706) x0_12709)) -o
                             ((B_12706)
                               ((sing_elim_1‹L,L›)
                                 A_12705 x_12707 a0_12710))
                   with
                   | x0_12713, a0_12714, refl_1, (box_2 m_12715) => m_12715)
Logical.infer_tm(∀ {A_12717 : L} ->
                   ∀ {B_12718 : A_12717 -> L} ->
                     ∀ (x_12720 : (apair_10‹L,L,L› A_12717 B_12718)) ->
                       ((B_12718)
                         ((proj1_7‹L,L,L›) A_12717 B_12718 x_12720)))
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_12722 : A_12721 -> L} ->
                   ∀ (x_12724 : (apair_10‹L,L,L› A_12721 B_12722)) ->
                     ((B_12722)
                       ((proj1_7‹L,L,L›) A_12721 B_12722 x_12724)))
Logical.infer_tm(A_12721 -> L)
Logical.infer_tm(A_12721)
Logical.infer_tm(L)
Logical.infer_tm(∀ (x_12728 : (apair_10‹L,L,L› A_12721 B_12725)) ->
                   ((B_12725) ((proj1_7‹L,L,L›) A_12721 B_12725 x_12728)))
Logical.infer_tm((apair_10‹L,L,L› A_12721 B_12725))
Logical.check_tm( A_12721, L )
Logical.infer_tm(A_12721)
Logical.assert_equal(L, L)
Logical.check_tm( B_12725, A_12721 -> L )
Logical.infer_tm(B_12725)
Logical.assert_equal(A_12721 -> L, A_12721 -> L)
Logical.infer_tm(((B_12725) ((proj1_7‹L,L,L›) A_12721 B_12725 x_12729)))
Logical.infer_tm(B_12725)
Logical.check_tm( ((proj1_7‹L,L,L›) A_12721 B_12725 x_12729), A_12721 )
Logical.infer_tm(((proj1_7‹L,L,L›) A_12721 B_12725 x_12729))
Logical.infer_tm(((proj1_7‹L,L,L›) A_12721 B_12725))
Logical.infer_tm(((proj1_7‹L,L,L›) A_12721))
Logical.infer_tm(proj1_7‹L,L,L›)
Logical.check_tm( A_12721, L )
Logical.infer_tm(A_12721)
Logical.assert_equal(L, L)
Logical.check_tm( B_12725, A_12721 -> L )
Logical.infer_tm(B_12725)
Logical.assert_equal(A_12721 -> L, A_12721 -> L)
Logical.check_tm( x_12729, (apair_10‹L,L,L› A_12721 B_12725) )
Logical.infer_tm(x_12729)
Logical.assert_equal((apair_10‹L,L,L› A_12721 B_12725), (apair_10‹L,L,L›
                                                              A_12721 B_12725))
Logical.assert_equal(A_12721, A_12721)
trans12.Program.case_intro(A_12742, L)
Logical.infer_tm(L)
trans12.Program.case_intro(B_12747, #A_12742 -> L)
Logical.infer_tm(A_12742 -> L)
Logical.infer_tm(A_12742)
Logical.infer_tm(L)
trans12.Program.case_intro(x_12756, (apair_10‹L,L,L› #A_12742 #B_12747))
Logical.infer_tm((apair_10‹L,L,L› A_12742 B_12747))
Logical.check_tm( A_12742, L )
Logical.infer_tm(A_12742)
Logical.assert_equal(L, L)
Logical.check_tm( B_12747, A_12742 -> L )
Logical.infer_tm(B_12747)
Logical.assert_equal(A_12742 -> L, A_12742 -> L)
Logical.infer_tm((apair_10‹L,L,L› A_12742 B_12747))
Logical.check_tm( A_12742, L )
Logical.infer_tm(A_12742)
Logical.assert_equal(L, L)
Logical.check_tm( B_12747, A_12742 -> L )
Logical.infer_tm(B_12747)
Logical.assert_equal(A_12742 -> L, A_12742 -> L)
trans12.Program.case_split(apairLLL_31, apair_introLLL_34)
Logical.infer_tm(A_12742)
Logical.infer_tm(∀ (b_12789 : bool_5) -o
                   match b_12789 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_12742 x_12775)
                   | false_6 => (boxed_2‹L› ((B_12747) x_12775)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_12791 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_12742 x_12775)
                 | false_6 => (boxed_2‹L› ((B_12747) x_12775)))
Logical.check_tm( b_12791, bool_5 )
Logical.infer_tm(b_12791)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_12742 x_12775) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_12742 x_12775), L)
Logical.check_tm( (sing_3‹L,L› A_12742 x_12775), L )
Logical.infer_tm((sing_3‹L,L› A_12742 x_12775))
Logical.check_tm( A_12742, L )
Logical.infer_tm(A_12742)
Logical.assert_equal(L, L)
Logical.check_tm( x_12775, A_12742 )
Logical.infer_tm(x_12775)
Logical.assert_equal(A_12742, A_12742)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_12747) x_12775)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_12747) x_12775)), L)
Logical.check_tm( (boxed_2‹L› ((B_12747) x_12775)), L )
Logical.infer_tm((boxed_2‹L› ((B_12747) x_12775)))
Logical.check_tm( ((B_12747) x_12775), L )
Logical.infer_tm(((B_12747) x_12775))
Logical.infer_tm(B_12747)
Logical.check_tm( x_12775, A_12742 )
Logical.infer_tm(x_12775)
Logical.assert_equal(A_12742, A_12742)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹L,L,L› #A_12742 #B_12747),
      (apair_10‹L,L,L› #A_12742 #B_12747));
    {| eq_pat?(N #A_12742, A_12738 : L)
       eq_pat?(N #B_12747, B_12739 : #A_12742 -> L)
       eq_pat?(N #x_12775, x_12740 : #A_12742)
       eq_pat?(R #select_12776, select_12741 :
         ∀ (b_12828 : bool_5) -o
           match b_12828 in bool_5 -o L with
           | true_5 => (sing_3‹L,L› #A_12742 #x_12775)
           | false_6 => (boxed_2‹L› ((#B_12747) #x_12775))) ::: [] =>?
         match #x_12740, ((#select_12741) true_5),
         ((sing_uniq_2‹L,L›) #A_12738 #x_12740 ((#select_12741) true_5)),
         ((#select_12741) false_6) in
           ∀ {x0_12830 : #A_12738} -o
             ∀ {a0_12831 : (sing_3‹L,L› #A_12738 #x_12740)} -o
               {(eq_1‹L›
                  #A_12738 x0_12830
                  ((sing_elim_1‹L,L›) #A_12738 #x_12740 a0_12831))} -o
                 (boxed_2‹L› ((#B_12739) x0_12830)) -o
                   ((#B_12739)
                     ((sing_elim_1‹L,L›) #A_12738 #x_12740 a0_12831))
         with
         | x0_12834, a0_12835, refl_1, (box_2 m_12836) => m_12836
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_12742, A_12738 : L)
  eq_pat?(N #B_12747, B_12739 : #A_12742 -> L)
  eq_pat?(N #x_12775, x_12740 : #A_12742)
  eq_pat?(R #select_12776, select_12741 :
    ∀ (b_12838 : bool_5) -o
      match b_12838 in bool_5 -o L with
      | true_5 => (sing_3‹L,L› #A_12742 #x_12775)
      | false_6 => (boxed_2‹L› ((#B_12747) #x_12775)))
)
unify_global(
  eq_term?( (apair_10‹L,L,L› #A_12742 #B_12747),
    (apair_10‹L,L,L› #A_12742 #B_12747))
)
simpl_pprbm ~expand:false( #A_12742, #A_12738)
simpl_pprbm ~expand:false( #B_12747, #B_12739)
simpl_pprbm ~expand:false( #x_12775, #x_12740)
simpl_pprbm ~expand:false( #select_12776, #select_12741)
simpl_pprbm ~expand:false( (apair_10‹L,L,L› #A_12742 #B_12747),
  (apair_10‹L,L,L› #A_12742 #B_12747))
simpl_pprbm ~expand:false( #A_12742, #A_12742)
simpl_pprbm ~expand:false( #B_12747, #B_12747)
case_coverage_ok(
  match x_12775, ((select_12776) true_5),
  ((sing_uniq_2‹L,L›) A_12742 x_12775 ((select_12776) true_5)),
  ((select_12776) false_6) in
    ∀ {x0_12854 : A_12742} -o
      ∀ {a0_12855 : (sing_3‹L,L› A_12742 x_12775)} -o
        {(eq_1‹L›
           A_12742 x0_12854 ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12855))} -o
          (boxed_2‹L› ((B_12747) x0_12854)) -o
            ((B_12747) ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12855))
  with
  | x0_12858, a0_12859, refl_1, (box_2 m_12860) => m_12860,
  ((B_12747)
    ((proj1_7‹L,L,L›)
      A_12742 B_12747
      (apair_intro_13‹L,L,L› A_12742 B_12747 x_12775 select_12776))))
Program.check_tm(
  match x_12775, ((select_12776) true_5),
  ((sing_uniq_2‹L,L›) A_12742 x_12775 ((select_12776) true_5)),
  ((select_12776) false_6) in
    ∀ {x0_12861 : A_12742} -o
      ∀ {a0_12862 : (sing_3‹L,L› A_12742 x_12775)} -o
        {(eq_1‹L›
           A_12742 x0_12861 ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12862))} -o
          (boxed_2‹L› ((B_12747) x0_12861)) -o
            ((B_12747) ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12862))
  with
  | x0_12865, a0_12866, refl_1, (box_2 m_12867) => m_12867,
  ((B_12747)
    ((proj1_7‹L,L,L›)
      A_12742 B_12747
      (apair_intro_13‹L,L,L› A_12742 B_12747 x_12775 select_12776)))
)
Program.infer_tm(match x_12775, ((select_12776) true_5),
                 ((sing_uniq_2‹L,L›)
                   A_12742 x_12775 ((select_12776) true_5)),
                 ((select_12776) false_6) in
                   ∀ {x0_12868 : A_12742} -o
                     ∀ {a0_12869 : (sing_3‹L,L› A_12742 x_12775)} -o
                       {(eq_1‹L›
                          A_12742 x0_12868
                          ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12869))} -o
                         (boxed_2‹L› ((B_12747) x0_12868)) -o
                           ((B_12747)
                             ((sing_elim_1‹L,L›)
                               A_12742 x_12775 a0_12869))
                 with
                 | x0_12872, a0_12873, refl_1, (box_2 m_12874) => m_12874)
Program.infer_motive_N(x_12775, A_12742)
Logical.check_tm( x_12775, A_12742 )
Logical.infer_tm(x_12775)
Logical.assert_equal(A_12742, A_12742)
Program.infer_motive_N_ok(x_12775, A_12742)
Program.infer_motive_N(((select_12776) true_5), (sing_3‹L,L›
                                                  A_12742 x_12775))
Logical.check_tm( ((select_12776) true_5), (sing_3‹L,L› A_12742 x_12775)
)
Logical.infer_tm(((select_12776) true_5))
Logical.infer_tm(select_12776)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_12742 x_12775), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_12742 x_12775)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_12747)
                                                              x_12775)))
Program.infer_motive_N_ok(((select_12776) true_5), (sing_3‹L,L›
                                                     A_12742 x_12775))
Program.infer_motive_N(((sing_uniq_2‹L,L›)
                         A_12742 x_12775 ((select_12776) true_5)), (eq_1‹L›
                                                                    A_12742
                                                                    x_12775
                                                                    ((sing_elim_1‹L,L›)
                                                                    A_12742
                                                                    x_12775
                                                                    ((select_12776)
                                                                    true_5))))
Logical.check_tm(
  ((sing_uniq_2‹L,L›) A_12742 x_12775 ((select_12776) true_5)),
  (eq_1‹L›
    A_12742 x_12775
    ((sing_elim_1‹L,L›) A_12742 x_12775 ((select_12776) true_5)))
)
Logical.infer_tm(((sing_uniq_2‹L,L›)
                   A_12742 x_12775 ((select_12776) true_5)))
Logical.infer_tm(((sing_uniq_2‹L,L›) A_12742 x_12775))
Logical.infer_tm(((sing_uniq_2‹L,L›) A_12742))
Logical.infer_tm(sing_uniq_2‹L,L›)
Logical.check_tm( A_12742, L )
Logical.infer_tm(A_12742)
Logical.assert_equal(L, L)
Logical.check_tm( x_12775, A_12742 )
Logical.infer_tm(x_12775)
Logical.assert_equal(A_12742, A_12742)
Logical.check_tm( ((select_12776) true_5), (sing_3‹L,L› A_12742 x_12775)
)
Logical.infer_tm(((select_12776) true_5))
Logical.infer_tm(select_12776)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_12742 x_12775), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_12742 x_12775)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_12747)
                                                              x_12775)))
Logical.assert_equal((eq_1‹L›
                       A_12742 x_12775
                       ((sing_elim_1‹L,L›)
                         A_12742 x_12775 ((select_12776) true_5))), (eq_1‹L›
                                                                    A_12742
                                                                    x_12775
                                                                    ((sing_elim_1‹L,L›)
                                                                    A_12742
                                                                    x_12775
                                                                    ((select_12776)
                                                                    true_5))))
Program.infer_motive_N_ok(((sing_uniq_2‹L,L›)
                            A_12742 x_12775 ((select_12776) true_5)), 
(eq_1‹L›
  A_12742 x_12775
  ((sing_elim_1‹L,L›) A_12742 x_12775 ((select_12776) true_5))))
Program.infer_motive_R(((select_12776) false_6), (boxed_2‹L›
                                                   ((B_12747) x_12775)))
Program.check_tm( ((select_12776) false_6),
  (boxed_2‹L› ((B_12747) x_12775))
)
Program.infer_tm(((select_12776) false_6))
Program.infer_tm(select_12776)
Program.check_tm( false_6, bool_5 )
Program.infer_tm(false_6)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((boxed_2‹L› ((B_12747) x_12775)), match false_6 in
                                                             bool_5 -o L
                                                           with
                                                           | true_5 =>
                                                             (sing_3‹L,L›
                                                               A_12742
                                                               x_12775)
                                                           | false_6 =>
                                                             (boxed_2‹L›
                                                               ((B_12747)
                                                                 x_12775)))
Program.infer_motive_R_ok(((select_12776) false_6), (boxed_2‹L›
                                                      ((B_12747) x_12775)))
Program.infer_motive_ok
trans12.Program.case_intro(x0_12881, A_12742)
Logical.infer_tm(A_12742)
trans12.Program.case_intro(a0_12889, (sing_3‹L,L› A_12742 x_12775))
Logical.infer_tm((sing_3‹L,L› A_12742 x_12775))
Logical.check_tm( A_12742, L )
Logical.infer_tm(A_12742)
Logical.assert_equal(L, L)
Logical.check_tm( x_12775, A_12742 )
Logical.infer_tm(x_12775)
Logical.assert_equal(A_12742, A_12742)
trans12.Program.case_intro(__12897, (eq_1‹L›
                                      A_12742 #x0_12881
                                      ((sing_elim_1‹L,L›)
                                        A_12742 x_12775 #a0_12889)))
Logical.infer_tm((eq_1‹L›
                   A_12742 x0_12881
                   ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12889)))
Logical.check_tm( A_12742, L )
Logical.infer_tm(A_12742)
Logical.assert_equal(L, L)
Logical.check_tm( x0_12881, A_12742 )
Logical.infer_tm(x0_12881)
Logical.assert_equal(A_12742, A_12742)
Logical.check_tm( ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12889), 
A_12742 )
Logical.infer_tm(((sing_elim_1‹L,L›) A_12742 x_12775 a0_12889))
Logical.infer_tm(((sing_elim_1‹L,L›) A_12742 x_12775))
Logical.infer_tm(((sing_elim_1‹L,L›) A_12742))
Logical.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_12742, L )
Logical.infer_tm(A_12742)
Logical.assert_equal(L, L)
Logical.check_tm( x_12775, A_12742 )
Logical.infer_tm(x_12775)
Logical.assert_equal(A_12742, A_12742)
Logical.check_tm( a0_12889, (sing_3‹L,L› A_12742 x_12775) )
Logical.infer_tm(a0_12889)
Logical.assert_equal((sing_3‹L,L› A_12742 x_12775), (sing_3‹L,L›
                                                          A_12742 x_12775))
Logical.assert_equal(A_12742, A_12742)
trans12.Program.case_intro(__12905, (boxed_2‹L› ((B_12747) #x0_12881)))
Logical.infer_tm((boxed_2‹L› ((B_12747) x0_12881)))
Logical.check_tm( ((B_12747) x0_12881), L )
Logical.infer_tm(((B_12747) x0_12881))
Logical.infer_tm(B_12747)
Logical.check_tm( x0_12881, A_12742 )
Logical.infer_tm(x0_12881)
Logical.assert_equal(A_12742, A_12742)
Logical.assert_equal(L, L)
Logical.infer_tm((eq_1‹L›
                   A_12742 x0_12881
                   ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12889)))
Logical.check_tm( A_12742, L )
Logical.infer_tm(A_12742)
Logical.assert_equal(L, L)
Logical.check_tm( x0_12881, A_12742 )
Logical.infer_tm(x0_12881)
Logical.assert_equal(A_12742, A_12742)
Logical.check_tm( ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12889), 
A_12742 )
Logical.infer_tm(((sing_elim_1‹L,L›) A_12742 x_12775 a0_12889))
Logical.infer_tm(((sing_elim_1‹L,L›) A_12742 x_12775))
Logical.infer_tm(((sing_elim_1‹L,L›) A_12742))
Logical.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_12742, L )
Logical.infer_tm(A_12742)
Logical.assert_equal(L, L)
Logical.check_tm( x_12775, A_12742 )
Logical.infer_tm(x_12775)
Logical.assert_equal(A_12742, A_12742)
Logical.check_tm( a0_12889, (sing_3‹L,L› A_12742 x_12775) )
Logical.infer_tm(a0_12889)
Logical.assert_equal((sing_3‹L,L› A_12742 x_12775), (sing_3‹L,L›
                                                          A_12742 x_12775))
Logical.assert_equal(A_12742, A_12742)
trans12.Program.case_split(eqL_11, reflL_14)
Logical.infer_tm((boxed_2‹L› ((B_12747) x0_12881)))
Logical.check_tm( ((B_12747) x0_12881), L )
Logical.infer_tm(((B_12747) x0_12881))
Logical.infer_tm(B_12747)
Logical.check_tm( x0_12881, A_12742 )
Logical.infer_tm(x0_12881)
Logical.assert_equal(A_12742, A_12742)
Logical.assert_equal(L, L)
trans12.Program.case_split(boxedL_13, boxL_16)
Logical.infer_tm(((B_12747) x0_12881))
Logical.infer_tm(B_12747)
Logical.check_tm( x0_12881, A_12742 )
Logical.infer_tm(x0_12881)
Logical.assert_equal(A_12742, A_12742)
case_coverage{|
  prblm {|
    eq_term?( (boxed_2‹L› ((B_12747) #x0_12881)),
      (boxed_2‹L› ((B_12747) #x0_12881)))
    eq_term?(
      (eq_1‹L›
        A_12742 #x0_12881 ((sing_elim_1‹L,L›) A_12742 x_12775 #a0_12889)),
      (eq_1‹L› A_12742 #x0_12881 #x0_12881));
    {| eq_pat?(N #x0_12881, x0_12878 : A_12742)
       eq_pat?(N #a0_12889, a0_12879 : (sing_3‹L,L› A_12742 x_12775))
       eq_pat?(R #m_12934, m_12880 : ((B_12747) #x0_12881)) ::: [] =>?
         #m_12880
    |}
  |}
|}
unify_local(
  eq_pat?(N #x0_12881, x0_12878 : A_12742)
  eq_pat?(N #a0_12889, a0_12879 : (sing_3‹L,L› A_12742 x_12775))
  eq_pat?(R #m_12934, m_12880 : ((B_12747) #x0_12881))
)
unify_global(
  eq_term?( (boxed_2‹L› ((B_12747) #x0_12881)),
    (boxed_2‹L› ((B_12747) #x0_12881)))
  eq_term?(
    (eq_1‹L›
      A_12742 #x0_12881 ((sing_elim_1‹L,L›) A_12742 x_12775 #a0_12889)),
    (eq_1‹L› A_12742 #x0_12881 #x0_12881))
)
simpl_pprbm ~expand:false( #x0_12881, #x0_12878)
simpl_pprbm ~expand:false( #a0_12889, #a0_12879)
simpl_pprbm ~expand:false( #m_12934, #m_12880)
simpl_pprbm ~expand:false( (boxed_2‹L› ((B_12747) #x0_12881)),
  (boxed_2‹L› ((B_12747) #x0_12881)))
simpl_pprbm ~expand:false( ((B_12747) #x0_12881), ((B_12747) #x0_12881))
simpl_pprbm ~expand:false( B_12747, B_12747)
simpl_pprbm ~expand:false( #x0_12881, #x0_12881)
simpl_pprbm ~expand:false(
  (eq_1‹L›
    A_12742 #x0_12881 ((sing_elim_1‹L,L›) A_12742 x_12775 #a0_12889)),
  (eq_1‹L› A_12742 #x0_12881 #x0_12881))
simpl_pprbm ~expand:false( A_12742, A_12742)
simpl_pprbm ~expand:false( #x0_12881, #x0_12881)
simpl_pprbm ~expand:false(
  ((sing_elim_1‹L,L›) A_12742 x_12775 #a0_12889), #x0_12881)
case_coverage_ok( m_12934,
  ((B_12747) ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12889)))
Program.check_tm( m_12934,
  ((B_12747) ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12889))
)
Program.infer_tm(m_12934)
Logical.assert_equal(((B_12747)
                       ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12889)), 
((B_12747) ((sing_elim_1‹L,L›) A_12742 x_12775 a0_12889)))
trans12.Program.case_introed((boxed_2‹L› ((B_12747) #x0_12881)))
trans12.Program.case_introed((eq_1‹L›
                               A_12742 #x0_12881
                               ((sing_elim_1‹L,L›)
                                 A_12742 x_12775 #a0_12889)))
trans12.Program.case_introed((sing_3‹L,L› A_12742 x_12775))
trans12.Program.case_introed(A_12742)
Logical.assert_equal(((B_12747)
                       ((proj1_7‹L,L,L›)
                         A_12742 B_12747
                         (apair_intro_13‹L,L,L›
                           A_12742 B_12747 x_12775 select_12776))), ((B_12747)
                                                                    ((
                                                                    function sing_elim_12956 :
                                                                    ∀ {A_12957 :
                                                                    L} ->
                                                                    ∀ {x_12958 :
                                                                    A_12957} ->
                                                                    (sing_3‹L,L›
                                                                    A_12957
                                                                    x_12958) ->
                                                                    A_12957
                                                                    | 
                                                                    A_12960 x_12961 (just_3 m_12962) =>
                                                                    m_12962)
                                                                    A_12742
                                                                    x_12775
                                                                    ((select_12776)
                                                                    true_5))))
trans12.Program.case_introed((apair_10‹L,L,L› #A_12742 #B_12747))
trans12.Program.case_introed(#A_12742 -> L)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_12964 : L} ->
                       ∀ {B_12965 : A_12964 -> L} ->
                         ∀ (x_12967 :
                           (apair_10‹L,L,L› A_12964 B_12965)) ->
                           ((B_12965)
                             ((proj1_7‹L,L,L›) A_12964 B_12965 x_12967)), 
∀ {A_12968 : L} ->
  ∀ {B_12969 : A_12968 -> L} ->
    ∀ (x_12971 : (apair_10‹L,L,L› A_12968 B_12969)) ->
      ((B_12969) ((proj1_7‹L,L,L›) A_12968 B_12969 x_12971)))
Logical.infer_tm(∀ {A_12976 : L} ->
                   ∀ {B_12977 : A_12976 -> L} ->
                     ∀ (x_12979 : (apair_10‹L,L,U› A_12976 B_12977)) ->
                       ((B_12977)
                         ((proj1_7‹L,L,U›) A_12976 B_12977 x_12979)))
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_12981 : A_12980 -> L} ->
                   ∀ (x_12983 : (apair_10‹L,L,U› A_12980 B_12981)) ->
                     ((B_12981)
                       ((proj1_7‹L,L,U›) A_12980 B_12981 x_12983)))
Logical.infer_tm(A_12980 -> L)
Logical.infer_tm(A_12980)
Logical.infer_tm(L)
Logical.infer_tm(∀ (x_12987 : (apair_10‹L,L,U› A_12980 B_12984)) ->
                   ((B_12984) ((proj1_7‹L,L,U›) A_12980 B_12984 x_12987)))
Logical.infer_tm((apair_10‹L,L,U› A_12980 B_12984))
Logical.check_tm( A_12980, L )
Logical.infer_tm(A_12980)
Logical.assert_equal(L, L)
Logical.check_tm( B_12984, A_12980 -> L )
Logical.infer_tm(B_12984)
Logical.assert_equal(A_12980 -> L, A_12980 -> L)
Logical.infer_tm(((B_12984) ((proj1_7‹L,L,U›) A_12980 B_12984 x_12988)))
Logical.infer_tm(B_12984)
Logical.check_tm( ((proj1_7‹L,L,U›) A_12980 B_12984 x_12988), A_12980 )
Logical.infer_tm(((proj1_7‹L,L,U›) A_12980 B_12984 x_12988))
Logical.infer_tm(((proj1_7‹L,L,U›) A_12980 B_12984))
Logical.infer_tm(((proj1_7‹L,L,U›) A_12980))
Logical.infer_tm(proj1_7‹L,L,U›)
Logical.check_tm( A_12980, L )
Logical.infer_tm(A_12980)
Logical.assert_equal(L, L)
Logical.check_tm( B_12984, A_12980 -> L )
Logical.infer_tm(B_12984)
Logical.assert_equal(A_12980 -> L, A_12980 -> L)
Logical.check_tm( x_12988, (apair_10‹L,L,U› A_12980 B_12984) )
Logical.infer_tm(x_12988)
Logical.assert_equal((apair_10‹L,L,U› A_12980 B_12984), (apair_10‹L,L,U›
                                                              A_12980 B_12984))
Logical.assert_equal(A_12980, A_12980)
Program.check_tm(
  function proj2_12997 :
    ∀ {A_12998 : L} ->
      ∀ {B_12999 : A_12998 -> L} ->
        ∀ (x_13001 : (apair_10‹L,L,U› A_12998 B_12999)) ->
          ((B_12999) ((proj1_7‹L,L,U›) A_12998 B_12999 x_13001))
  | A_13002 B_13003 (apair_intro_13 x_13004 select_13005) =>
    match x_13004, ((select_13005) true_5),
    ((sing_uniq_2‹L,L›) A_13002 x_13004 ((select_13005) true_5)),
    ((select_13005) false_6) in
      ∀ {x0_13006 : A_13002} -o
        ∀ {a0_13007 : (sing_3‹L,L› A_13002 x_13004)} -o
          {(eq_1‹L›
             A_13002 x0_13006
             ((sing_elim_1‹L,L›) A_13002 x_13004 a0_13007))} -o
            (boxed_2‹L› ((B_13003) x0_13006)) -o
              ((B_13003) ((sing_elim_1‹L,L›) A_13002 x_13004 a0_13007))
    with
    | x0_13010, a0_13011, refl_1, (box_2 m_13012) => m_13012,
  ∀ {A_13013 : L} ->
    ∀ {B_13014 : A_13013 -> L} ->
      ∀ (x_13016 : (apair_10‹L,L,U› A_13013 B_13014)) ->
        ((B_13014) ((proj1_7‹L,L,U›) A_13013 B_13014 x_13016))
)
Program.infer_tm(function proj2_13017 :
                   ∀ {A_13018 : L} ->
                     ∀ {B_13019 : A_13018 -> L} ->
                       ∀ (x_13021 :
                         (apair_10‹L,L,U› A_13018 B_13019)) ->
                         ((B_13019)
                           ((proj1_7‹L,L,U›) A_13018 B_13019 x_13021))
                 | A_13022 B_13023 (apair_intro_13 x_13024 select_13025) =>
                   match x_13024, ((select_13025) true_5),
                   ((sing_uniq_2‹L,L›)
                     A_13022 x_13024 ((select_13025) true_5)),
                   ((select_13025) false_6) in
                     ∀ {x0_13026 : A_13022} -o
                       ∀ {a0_13027 : (sing_3‹L,L› A_13022 x_13024)} -o
                         {(eq_1‹L›
                            A_13022 x0_13026
                            ((sing_elim_1‹L,L›) A_13022 x_13024 a0_13027))} -o
                           (boxed_2‹L› ((B_13023) x0_13026)) -o
                             ((B_13023)
                               ((sing_elim_1‹L,L›)
                                 A_13022 x_13024 a0_13027))
                   with
                   | x0_13030, a0_13031, refl_1, (box_2 m_13032) => m_13032)
Logical.infer_tm(∀ {A_13034 : L} ->
                   ∀ {B_13035 : A_13034 -> L} ->
                     ∀ (x_13037 : (apair_10‹L,L,U› A_13034 B_13035)) ->
                       ((B_13035)
                         ((proj1_7‹L,L,U›) A_13034 B_13035 x_13037)))
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_13039 : A_13038 -> L} ->
                   ∀ (x_13041 : (apair_10‹L,L,U› A_13038 B_13039)) ->
                     ((B_13039)
                       ((proj1_7‹L,L,U›) A_13038 B_13039 x_13041)))
Logical.infer_tm(A_13038 -> L)
Logical.infer_tm(A_13038)
Logical.infer_tm(L)
Logical.infer_tm(∀ (x_13045 : (apair_10‹L,L,U› A_13038 B_13042)) ->
                   ((B_13042) ((proj1_7‹L,L,U›) A_13038 B_13042 x_13045)))
Logical.infer_tm((apair_10‹L,L,U› A_13038 B_13042))
Logical.check_tm( A_13038, L )
Logical.infer_tm(A_13038)
Logical.assert_equal(L, L)
Logical.check_tm( B_13042, A_13038 -> L )
Logical.infer_tm(B_13042)
Logical.assert_equal(A_13038 -> L, A_13038 -> L)
Logical.infer_tm(((B_13042) ((proj1_7‹L,L,U›) A_13038 B_13042 x_13046)))
Logical.infer_tm(B_13042)
Logical.check_tm( ((proj1_7‹L,L,U›) A_13038 B_13042 x_13046), A_13038 )
Logical.infer_tm(((proj1_7‹L,L,U›) A_13038 B_13042 x_13046))
Logical.infer_tm(((proj1_7‹L,L,U›) A_13038 B_13042))
Logical.infer_tm(((proj1_7‹L,L,U›) A_13038))
Logical.infer_tm(proj1_7‹L,L,U›)
Logical.check_tm( A_13038, L )
Logical.infer_tm(A_13038)
Logical.assert_equal(L, L)
Logical.check_tm( B_13042, A_13038 -> L )
Logical.infer_tm(B_13042)
Logical.assert_equal(A_13038 -> L, A_13038 -> L)
Logical.check_tm( x_13046, (apair_10‹L,L,U› A_13038 B_13042) )
Logical.infer_tm(x_13046)
Logical.assert_equal((apair_10‹L,L,U› A_13038 B_13042), (apair_10‹L,L,U›
                                                              A_13038 B_13042))
Logical.assert_equal(A_13038, A_13038)
trans12.Program.case_intro(A_13059, L)
Logical.infer_tm(L)
trans12.Program.case_intro(B_13064, #A_13059 -> L)
Logical.infer_tm(A_13059 -> L)
Logical.infer_tm(A_13059)
Logical.infer_tm(L)
trans12.Program.case_intro(x_13073, (apair_10‹L,L,U› #A_13059 #B_13064))
Logical.infer_tm((apair_10‹L,L,U› A_13059 B_13064))
Logical.check_tm( A_13059, L )
Logical.infer_tm(A_13059)
Logical.assert_equal(L, L)
Logical.check_tm( B_13064, A_13059 -> L )
Logical.infer_tm(B_13064)
Logical.assert_equal(A_13059 -> L, A_13059 -> L)
Logical.infer_tm((apair_10‹L,L,U› A_13059 B_13064))
Logical.check_tm( A_13059, L )
Logical.infer_tm(A_13059)
Logical.assert_equal(L, L)
Logical.check_tm( B_13064, A_13059 -> L )
Logical.infer_tm(B_13064)
Logical.assert_equal(A_13059 -> L, A_13059 -> L)
trans12.Program.case_split(apairLLU_32, apair_introLLU_35)
Logical.infer_tm(A_13059)
Logical.infer_tm(∀ (b_13106 : bool_5) ->
                   match b_13106 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_13059 x_13092)
                   | false_6 => (boxed_2‹L› ((B_13064) x_13092)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_13108 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_13059 x_13092)
                 | false_6 => (boxed_2‹L› ((B_13064) x_13092)))
Logical.check_tm( b_13108, bool_5 )
Logical.infer_tm(b_13108)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_13059 x_13092) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_13059 x_13092), L)
Logical.check_tm( (sing_3‹L,L› A_13059 x_13092), L )
Logical.infer_tm((sing_3‹L,L› A_13059 x_13092))
Logical.check_tm( A_13059, L )
Logical.infer_tm(A_13059)
Logical.assert_equal(L, L)
Logical.check_tm( x_13092, A_13059 )
Logical.infer_tm(x_13092)
Logical.assert_equal(A_13059, A_13059)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_13064) x_13092)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_13064) x_13092)), L)
Logical.check_tm( (boxed_2‹L› ((B_13064) x_13092)), L )
Logical.infer_tm((boxed_2‹L› ((B_13064) x_13092)))
Logical.check_tm( ((B_13064) x_13092), L )
Logical.infer_tm(((B_13064) x_13092))
Logical.infer_tm(B_13064)
Logical.check_tm( x_13092, A_13059 )
Logical.infer_tm(x_13092)
Logical.assert_equal(A_13059, A_13059)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹L,L,U› #A_13059 #B_13064),
      (apair_10‹L,L,U› #A_13059 #B_13064));
    {| eq_pat?(N #A_13059, A_13055 : L)
       eq_pat?(N #B_13064, B_13056 : #A_13059 -> L)
       eq_pat?(N #x_13092, x_13057 : #A_13059)
       eq_pat?(R #select_13093, select_13058 :
         ∀ (b_13145 : bool_5) ->
           match b_13145 in bool_5 -o L with
           | true_5 => (sing_3‹L,L› #A_13059 #x_13092)
           | false_6 => (boxed_2‹L› ((#B_13064) #x_13092))) ::: [] =>?
         match #x_13057, ((#select_13058) true_5),
         ((sing_uniq_2‹L,L›) #A_13055 #x_13057 ((#select_13058) true_5)),
         ((#select_13058) false_6) in
           ∀ {x0_13147 : #A_13055} -o
             ∀ {a0_13148 : (sing_3‹L,L› #A_13055 #x_13057)} -o
               {(eq_1‹L›
                  #A_13055 x0_13147
                  ((sing_elim_1‹L,L›) #A_13055 #x_13057 a0_13148))} -o
                 (boxed_2‹L› ((#B_13056) x0_13147)) -o
                   ((#B_13056)
                     ((sing_elim_1‹L,L›) #A_13055 #x_13057 a0_13148))
         with
         | x0_13151, a0_13152, refl_1, (box_2 m_13153) => m_13153
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_13059, A_13055 : L)
  eq_pat?(N #B_13064, B_13056 : #A_13059 -> L)
  eq_pat?(N #x_13092, x_13057 : #A_13059)
  eq_pat?(R #select_13093, select_13058 :
    ∀ (b_13155 : bool_5) ->
      match b_13155 in bool_5 -o L with
      | true_5 => (sing_3‹L,L› #A_13059 #x_13092)
      | false_6 => (boxed_2‹L› ((#B_13064) #x_13092)))
)
unify_global(
  eq_term?( (apair_10‹L,L,U› #A_13059 #B_13064),
    (apair_10‹L,L,U› #A_13059 #B_13064))
)
simpl_pprbm ~expand:false( #A_13059, #A_13055)
simpl_pprbm ~expand:false( #B_13064, #B_13056)
simpl_pprbm ~expand:false( #x_13092, #x_13057)
simpl_pprbm ~expand:false( #select_13093, #select_13058)
simpl_pprbm ~expand:false( (apair_10‹L,L,U› #A_13059 #B_13064),
  (apair_10‹L,L,U› #A_13059 #B_13064))
simpl_pprbm ~expand:false( #A_13059, #A_13059)
simpl_pprbm ~expand:false( #B_13064, #B_13064)
case_coverage_ok(
  match x_13092, ((select_13093) true_5),
  ((sing_uniq_2‹L,L›) A_13059 x_13092 ((select_13093) true_5)),
  ((select_13093) false_6) in
    ∀ {x0_13171 : A_13059} -o
      ∀ {a0_13172 : (sing_3‹L,L› A_13059 x_13092)} -o
        {(eq_1‹L›
           A_13059 x0_13171 ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13172))} -o
          (boxed_2‹L› ((B_13064) x0_13171)) -o
            ((B_13064) ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13172))
  with
  | x0_13175, a0_13176, refl_1, (box_2 m_13177) => m_13177,
  ((B_13064)
    ((proj1_7‹L,L,U›)
      A_13059 B_13064
      (apair_intro_13‹L,L,U› A_13059 B_13064 x_13092 select_13093))))
Program.check_tm(
  match x_13092, ((select_13093) true_5),
  ((sing_uniq_2‹L,L›) A_13059 x_13092 ((select_13093) true_5)),
  ((select_13093) false_6) in
    ∀ {x0_13178 : A_13059} -o
      ∀ {a0_13179 : (sing_3‹L,L› A_13059 x_13092)} -o
        {(eq_1‹L›
           A_13059 x0_13178 ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13179))} -o
          (boxed_2‹L› ((B_13064) x0_13178)) -o
            ((B_13064) ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13179))
  with
  | x0_13182, a0_13183, refl_1, (box_2 m_13184) => m_13184,
  ((B_13064)
    ((proj1_7‹L,L,U›)
      A_13059 B_13064
      (apair_intro_13‹L,L,U› A_13059 B_13064 x_13092 select_13093)))
)
Program.infer_tm(match x_13092, ((select_13093) true_5),
                 ((sing_uniq_2‹L,L›)
                   A_13059 x_13092 ((select_13093) true_5)),
                 ((select_13093) false_6) in
                   ∀ {x0_13185 : A_13059} -o
                     ∀ {a0_13186 : (sing_3‹L,L› A_13059 x_13092)} -o
                       {(eq_1‹L›
                          A_13059 x0_13185
                          ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13186))} -o
                         (boxed_2‹L› ((B_13064) x0_13185)) -o
                           ((B_13064)
                             ((sing_elim_1‹L,L›)
                               A_13059 x_13092 a0_13186))
                 with
                 | x0_13189, a0_13190, refl_1, (box_2 m_13191) => m_13191)
Program.infer_motive_N(x_13092, A_13059)
Logical.check_tm( x_13092, A_13059 )
Logical.infer_tm(x_13092)
Logical.assert_equal(A_13059, A_13059)
Program.infer_motive_N_ok(x_13092, A_13059)
Program.infer_motive_N(((select_13093) true_5), (sing_3‹L,L›
                                                  A_13059 x_13092))
Logical.check_tm( ((select_13093) true_5), (sing_3‹L,L› A_13059 x_13092)
)
Logical.infer_tm(((select_13093) true_5))
Logical.infer_tm(select_13093)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_13059 x_13092), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_13059 x_13092)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_13064)
                                                              x_13092)))
Program.infer_motive_N_ok(((select_13093) true_5), (sing_3‹L,L›
                                                     A_13059 x_13092))
Program.infer_motive_N(((sing_uniq_2‹L,L›)
                         A_13059 x_13092 ((select_13093) true_5)), (eq_1‹L›
                                                                    A_13059
                                                                    x_13092
                                                                    ((sing_elim_1‹L,L›)
                                                                    A_13059
                                                                    x_13092
                                                                    ((select_13093)
                                                                    true_5))))
Logical.check_tm(
  ((sing_uniq_2‹L,L›) A_13059 x_13092 ((select_13093) true_5)),
  (eq_1‹L›
    A_13059 x_13092
    ((sing_elim_1‹L,L›) A_13059 x_13092 ((select_13093) true_5)))
)
Logical.infer_tm(((sing_uniq_2‹L,L›)
                   A_13059 x_13092 ((select_13093) true_5)))
Logical.infer_tm(((sing_uniq_2‹L,L›) A_13059 x_13092))
Logical.infer_tm(((sing_uniq_2‹L,L›) A_13059))
Logical.infer_tm(sing_uniq_2‹L,L›)
Logical.check_tm( A_13059, L )
Logical.infer_tm(A_13059)
Logical.assert_equal(L, L)
Logical.check_tm( x_13092, A_13059 )
Logical.infer_tm(x_13092)
Logical.assert_equal(A_13059, A_13059)
Logical.check_tm( ((select_13093) true_5), (sing_3‹L,L› A_13059 x_13092)
)
Logical.infer_tm(((select_13093) true_5))
Logical.infer_tm(select_13093)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_13059 x_13092), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_13059 x_13092)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_13064)
                                                              x_13092)))
Logical.assert_equal((eq_1‹L›
                       A_13059 x_13092
                       ((sing_elim_1‹L,L›)
                         A_13059 x_13092 ((select_13093) true_5))), (eq_1‹L›
                                                                    A_13059
                                                                    x_13092
                                                                    ((sing_elim_1‹L,L›)
                                                                    A_13059
                                                                    x_13092
                                                                    ((select_13093)
                                                                    true_5))))
Program.infer_motive_N_ok(((sing_uniq_2‹L,L›)
                            A_13059 x_13092 ((select_13093) true_5)), 
(eq_1‹L›
  A_13059 x_13092
  ((sing_elim_1‹L,L›) A_13059 x_13092 ((select_13093) true_5))))
Program.infer_motive_R(((select_13093) false_6), (boxed_2‹L›
                                                   ((B_13064) x_13092)))
Program.check_tm( ((select_13093) false_6),
  (boxed_2‹L› ((B_13064) x_13092))
)
Program.infer_tm(((select_13093) false_6))
Program.infer_tm(select_13093)
Program.check_tm( false_6, bool_5 )
Program.infer_tm(false_6)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((boxed_2‹L› ((B_13064) x_13092)), match false_6 in
                                                             bool_5 -o L
                                                           with
                                                           | true_5 =>
                                                             (sing_3‹L,L›
                                                               A_13059
                                                               x_13092)
                                                           | false_6 =>
                                                             (boxed_2‹L›
                                                               ((B_13064)
                                                                 x_13092)))
Program.infer_motive_R_ok(((select_13093) false_6), (boxed_2‹L›
                                                      ((B_13064) x_13092)))
Program.infer_motive_ok
trans12.Program.case_intro(x0_13198, A_13059)
Logical.infer_tm(A_13059)
trans12.Program.case_intro(a0_13206, (sing_3‹L,L› A_13059 x_13092))
Logical.infer_tm((sing_3‹L,L› A_13059 x_13092))
Logical.check_tm( A_13059, L )
Logical.infer_tm(A_13059)
Logical.assert_equal(L, L)
Logical.check_tm( x_13092, A_13059 )
Logical.infer_tm(x_13092)
Logical.assert_equal(A_13059, A_13059)
trans12.Program.case_intro(__13214, (eq_1‹L›
                                      A_13059 #x0_13198
                                      ((sing_elim_1‹L,L›)
                                        A_13059 x_13092 #a0_13206)))
Logical.infer_tm((eq_1‹L›
                   A_13059 x0_13198
                   ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13206)))
Logical.check_tm( A_13059, L )
Logical.infer_tm(A_13059)
Logical.assert_equal(L, L)
Logical.check_tm( x0_13198, A_13059 )
Logical.infer_tm(x0_13198)
Logical.assert_equal(A_13059, A_13059)
Logical.check_tm( ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13206), 
A_13059 )
Logical.infer_tm(((sing_elim_1‹L,L›) A_13059 x_13092 a0_13206))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13059 x_13092))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13059))
Logical.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_13059, L )
Logical.infer_tm(A_13059)
Logical.assert_equal(L, L)
Logical.check_tm( x_13092, A_13059 )
Logical.infer_tm(x_13092)
Logical.assert_equal(A_13059, A_13059)
Logical.check_tm( a0_13206, (sing_3‹L,L› A_13059 x_13092) )
Logical.infer_tm(a0_13206)
Logical.assert_equal((sing_3‹L,L› A_13059 x_13092), (sing_3‹L,L›
                                                          A_13059 x_13092))
Logical.assert_equal(A_13059, A_13059)
trans12.Program.case_intro(__13222, (boxed_2‹L› ((B_13064) #x0_13198)))
Logical.infer_tm((boxed_2‹L› ((B_13064) x0_13198)))
Logical.check_tm( ((B_13064) x0_13198), L )
Logical.infer_tm(((B_13064) x0_13198))
Logical.infer_tm(B_13064)
Logical.check_tm( x0_13198, A_13059 )
Logical.infer_tm(x0_13198)
Logical.assert_equal(A_13059, A_13059)
Logical.assert_equal(L, L)
Logical.infer_tm((eq_1‹L›
                   A_13059 x0_13198
                   ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13206)))
Logical.check_tm( A_13059, L )
Logical.infer_tm(A_13059)
Logical.assert_equal(L, L)
Logical.check_tm( x0_13198, A_13059 )
Logical.infer_tm(x0_13198)
Logical.assert_equal(A_13059, A_13059)
Logical.check_tm( ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13206), 
A_13059 )
Logical.infer_tm(((sing_elim_1‹L,L›) A_13059 x_13092 a0_13206))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13059 x_13092))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13059))
Logical.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_13059, L )
Logical.infer_tm(A_13059)
Logical.assert_equal(L, L)
Logical.check_tm( x_13092, A_13059 )
Logical.infer_tm(x_13092)
Logical.assert_equal(A_13059, A_13059)
Logical.check_tm( a0_13206, (sing_3‹L,L› A_13059 x_13092) )
Logical.infer_tm(a0_13206)
Logical.assert_equal((sing_3‹L,L› A_13059 x_13092), (sing_3‹L,L›
                                                          A_13059 x_13092))
Logical.assert_equal(A_13059, A_13059)
trans12.Program.case_split(eqL_11, reflL_14)
Logical.infer_tm((boxed_2‹L› ((B_13064) x0_13198)))
Logical.check_tm( ((B_13064) x0_13198), L )
Logical.infer_tm(((B_13064) x0_13198))
Logical.infer_tm(B_13064)
Logical.check_tm( x0_13198, A_13059 )
Logical.infer_tm(x0_13198)
Logical.assert_equal(A_13059, A_13059)
Logical.assert_equal(L, L)
trans12.Program.case_split(boxedL_13, boxL_16)
Logical.infer_tm(((B_13064) x0_13198))
Logical.infer_tm(B_13064)
Logical.check_tm( x0_13198, A_13059 )
Logical.infer_tm(x0_13198)
Logical.assert_equal(A_13059, A_13059)
case_coverage{|
  prblm {|
    eq_term?( (boxed_2‹L› ((B_13064) #x0_13198)),
      (boxed_2‹L› ((B_13064) #x0_13198)))
    eq_term?(
      (eq_1‹L›
        A_13059 #x0_13198 ((sing_elim_1‹L,L›) A_13059 x_13092 #a0_13206)),
      (eq_1‹L› A_13059 #x0_13198 #x0_13198));
    {| eq_pat?(N #x0_13198, x0_13195 : A_13059)
       eq_pat?(N #a0_13206, a0_13196 : (sing_3‹L,L› A_13059 x_13092))
       eq_pat?(R #m_13251, m_13197 : ((B_13064) #x0_13198)) ::: [] =>?
         #m_13197
    |}
  |}
|}
unify_local(
  eq_pat?(N #x0_13198, x0_13195 : A_13059)
  eq_pat?(N #a0_13206, a0_13196 : (sing_3‹L,L› A_13059 x_13092))
  eq_pat?(R #m_13251, m_13197 : ((B_13064) #x0_13198))
)
unify_global(
  eq_term?( (boxed_2‹L› ((B_13064) #x0_13198)),
    (boxed_2‹L› ((B_13064) #x0_13198)))
  eq_term?(
    (eq_1‹L›
      A_13059 #x0_13198 ((sing_elim_1‹L,L›) A_13059 x_13092 #a0_13206)),
    (eq_1‹L› A_13059 #x0_13198 #x0_13198))
)
simpl_pprbm ~expand:false( #x0_13198, #x0_13195)
simpl_pprbm ~expand:false( #a0_13206, #a0_13196)
simpl_pprbm ~expand:false( #m_13251, #m_13197)
simpl_pprbm ~expand:false( (boxed_2‹L› ((B_13064) #x0_13198)),
  (boxed_2‹L› ((B_13064) #x0_13198)))
simpl_pprbm ~expand:false( ((B_13064) #x0_13198), ((B_13064) #x0_13198))
simpl_pprbm ~expand:false( B_13064, B_13064)
simpl_pprbm ~expand:false( #x0_13198, #x0_13198)
simpl_pprbm ~expand:false(
  (eq_1‹L›
    A_13059 #x0_13198 ((sing_elim_1‹L,L›) A_13059 x_13092 #a0_13206)),
  (eq_1‹L› A_13059 #x0_13198 #x0_13198))
simpl_pprbm ~expand:false( A_13059, A_13059)
simpl_pprbm ~expand:false( #x0_13198, #x0_13198)
simpl_pprbm ~expand:false(
  ((sing_elim_1‹L,L›) A_13059 x_13092 #a0_13206), #x0_13198)
case_coverage_ok( m_13251,
  ((B_13064) ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13206)))
Program.check_tm( m_13251,
  ((B_13064) ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13206))
)
Program.infer_tm(m_13251)
Logical.assert_equal(((B_13064)
                       ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13206)), 
((B_13064) ((sing_elim_1‹L,L›) A_13059 x_13092 a0_13206)))
trans12.Program.case_introed((boxed_2‹L› ((B_13064) #x0_13198)))
trans12.Program.case_introed((eq_1‹L›
                               A_13059 #x0_13198
                               ((sing_elim_1‹L,L›)
                                 A_13059 x_13092 #a0_13206)))
trans12.Program.case_introed((sing_3‹L,L› A_13059 x_13092))
trans12.Program.case_introed(A_13059)
Logical.assert_equal(((B_13064)
                       ((proj1_7‹L,L,U›)
                         A_13059 B_13064
                         (apair_intro_13‹L,L,U›
                           A_13059 B_13064 x_13092 select_13093))), ((B_13064)
                                                                    ((
                                                                    function sing_elim_13273 :
                                                                    ∀ {A_13274 :
                                                                    L} ->
                                                                    ∀ {x_13275 :
                                                                    A_13274} ->
                                                                    (sing_3‹L,L›
                                                                    A_13274
                                                                    x_13275) ->
                                                                    A_13274
                                                                    | 
                                                                    A_13277 x_13278 (just_3 m_13279) =>
                                                                    m_13279)
                                                                    A_13059
                                                                    x_13092
                                                                    ((select_13093)
                                                                    true_5))))
trans12.Program.case_introed((apair_10‹L,L,U› #A_13059 #B_13064))
trans12.Program.case_introed(#A_13059 -> L)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_13281 : L} ->
                       ∀ {B_13282 : A_13281 -> L} ->
                         ∀ (x_13284 :
                           (apair_10‹L,L,U› A_13281 B_13282)) ->
                           ((B_13282)
                             ((proj1_7‹L,L,U›) A_13281 B_13282 x_13284)), 
∀ {A_13285 : L} ->
  ∀ {B_13286 : A_13285 -> L} ->
    ∀ (x_13288 : (apair_10‹L,L,U› A_13285 B_13286)) ->
      ((B_13286) ((proj1_7‹L,L,U›) A_13285 B_13286 x_13288)))
Logical.infer_tm(∀ {A_13293 : L} ->
                   ∀ {B_13294 : A_13293 -> U} ->
                     ∀ (x_13296 : (apair_10‹L,U,L› A_13293 B_13294)) ->
                       ((B_13294)
                         ((proj1_7‹L,U,L›) A_13293 B_13294 x_13296)))
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_13298 : A_13297 -> U} ->
                   ∀ (x_13300 : (apair_10‹L,U,L› A_13297 B_13298)) ->
                     ((B_13298)
                       ((proj1_7‹L,U,L›) A_13297 B_13298 x_13300)))
Logical.infer_tm(A_13297 -> U)
Logical.infer_tm(A_13297)
Logical.infer_tm(U)
Logical.infer_tm(∀ (x_13304 : (apair_10‹L,U,L› A_13297 B_13301)) ->
                   ((B_13301) ((proj1_7‹L,U,L›) A_13297 B_13301 x_13304)))
Logical.infer_tm((apair_10‹L,U,L› A_13297 B_13301))
Logical.check_tm( A_13297, L )
Logical.infer_tm(A_13297)
Logical.assert_equal(L, L)
Logical.check_tm( B_13301, A_13297 -> U )
Logical.infer_tm(B_13301)
Logical.assert_equal(A_13297 -> U, A_13297 -> U)
Logical.infer_tm(((B_13301) ((proj1_7‹L,U,L›) A_13297 B_13301 x_13305)))
Logical.infer_tm(B_13301)
Logical.check_tm( ((proj1_7‹L,U,L›) A_13297 B_13301 x_13305), A_13297 )
Logical.infer_tm(((proj1_7‹L,U,L›) A_13297 B_13301 x_13305))
Logical.infer_tm(((proj1_7‹L,U,L›) A_13297 B_13301))
Logical.infer_tm(((proj1_7‹L,U,L›) A_13297))
Logical.infer_tm(proj1_7‹L,U,L›)
Logical.check_tm( A_13297, L )
Logical.infer_tm(A_13297)
Logical.assert_equal(L, L)
Logical.check_tm( B_13301, A_13297 -> U )
Logical.infer_tm(B_13301)
Logical.assert_equal(A_13297 -> U, A_13297 -> U)
Logical.check_tm( x_13305, (apair_10‹L,U,L› A_13297 B_13301) )
Logical.infer_tm(x_13305)
Logical.assert_equal((apair_10‹L,U,L› A_13297 B_13301), (apair_10‹L,U,L›
                                                              A_13297 B_13301))
Logical.assert_equal(A_13297, A_13297)
Program.check_tm(
  function proj2_13314 :
    ∀ {A_13315 : L} ->
      ∀ {B_13316 : A_13315 -> U} ->
        ∀ (x_13318 : (apair_10‹L,U,L› A_13315 B_13316)) ->
          ((B_13316) ((proj1_7‹L,U,L›) A_13315 B_13316 x_13318))
  | A_13319 B_13320 (apair_intro_13 x_13321 select_13322) =>
    match x_13321, ((select_13322) true_5),
    ((sing_uniq_2‹L,L›) A_13319 x_13321 ((select_13322) true_5)),
    ((select_13322) false_6) in
      ∀ {x0_13323 : A_13319} -o
        ∀ {a0_13324 : (sing_3‹L,L› A_13319 x_13321)} -o
          {(eq_1‹L›
             A_13319 x0_13323
             ((sing_elim_1‹L,L›) A_13319 x_13321 a0_13324))} -o
            (boxed_2‹U› ((B_13320) x0_13323)) -o
              ((B_13320) ((sing_elim_1‹L,L›) A_13319 x_13321 a0_13324))
    with
    | x0_13327, a0_13328, refl_1, (box_2 m_13329) => m_13329,
  ∀ {A_13330 : L} ->
    ∀ {B_13331 : A_13330 -> U} ->
      ∀ (x_13333 : (apair_10‹L,U,L› A_13330 B_13331)) ->
        ((B_13331) ((proj1_7‹L,U,L›) A_13330 B_13331 x_13333))
)
Program.infer_tm(function proj2_13334 :
                   ∀ {A_13335 : L} ->
                     ∀ {B_13336 : A_13335 -> U} ->
                       ∀ (x_13338 :
                         (apair_10‹L,U,L› A_13335 B_13336)) ->
                         ((B_13336)
                           ((proj1_7‹L,U,L›) A_13335 B_13336 x_13338))
                 | A_13339 B_13340 (apair_intro_13 x_13341 select_13342) =>
                   match x_13341, ((select_13342) true_5),
                   ((sing_uniq_2‹L,L›)
                     A_13339 x_13341 ((select_13342) true_5)),
                   ((select_13342) false_6) in
                     ∀ {x0_13343 : A_13339} -o
                       ∀ {a0_13344 : (sing_3‹L,L› A_13339 x_13341)} -o
                         {(eq_1‹L›
                            A_13339 x0_13343
                            ((sing_elim_1‹L,L›) A_13339 x_13341 a0_13344))} -o
                           (boxed_2‹U› ((B_13340) x0_13343)) -o
                             ((B_13340)
                               ((sing_elim_1‹L,L›)
                                 A_13339 x_13341 a0_13344))
                   with
                   | x0_13347, a0_13348, refl_1, (box_2 m_13349) => m_13349)
Logical.infer_tm(∀ {A_13351 : L} ->
                   ∀ {B_13352 : A_13351 -> U} ->
                     ∀ (x_13354 : (apair_10‹L,U,L› A_13351 B_13352)) ->
                       ((B_13352)
                         ((proj1_7‹L,U,L›) A_13351 B_13352 x_13354)))
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_13356 : A_13355 -> U} ->
                   ∀ (x_13358 : (apair_10‹L,U,L› A_13355 B_13356)) ->
                     ((B_13356)
                       ((proj1_7‹L,U,L›) A_13355 B_13356 x_13358)))
Logical.infer_tm(A_13355 -> U)
Logical.infer_tm(A_13355)
Logical.infer_tm(U)
Logical.infer_tm(∀ (x_13362 : (apair_10‹L,U,L› A_13355 B_13359)) ->
                   ((B_13359) ((proj1_7‹L,U,L›) A_13355 B_13359 x_13362)))
Logical.infer_tm((apair_10‹L,U,L› A_13355 B_13359))
Logical.check_tm( A_13355, L )
Logical.infer_tm(A_13355)
Logical.assert_equal(L, L)
Logical.check_tm( B_13359, A_13355 -> U )
Logical.infer_tm(B_13359)
Logical.assert_equal(A_13355 -> U, A_13355 -> U)
Logical.infer_tm(((B_13359) ((proj1_7‹L,U,L›) A_13355 B_13359 x_13363)))
Logical.infer_tm(B_13359)
Logical.check_tm( ((proj1_7‹L,U,L›) A_13355 B_13359 x_13363), A_13355 )
Logical.infer_tm(((proj1_7‹L,U,L›) A_13355 B_13359 x_13363))
Logical.infer_tm(((proj1_7‹L,U,L›) A_13355 B_13359))
Logical.infer_tm(((proj1_7‹L,U,L›) A_13355))
Logical.infer_tm(proj1_7‹L,U,L›)
Logical.check_tm( A_13355, L )
Logical.infer_tm(A_13355)
Logical.assert_equal(L, L)
Logical.check_tm( B_13359, A_13355 -> U )
Logical.infer_tm(B_13359)
Logical.assert_equal(A_13355 -> U, A_13355 -> U)
Logical.check_tm( x_13363, (apair_10‹L,U,L› A_13355 B_13359) )
Logical.infer_tm(x_13363)
Logical.assert_equal((apair_10‹L,U,L› A_13355 B_13359), (apair_10‹L,U,L›
                                                              A_13355 B_13359))
Logical.assert_equal(A_13355, A_13355)
trans12.Program.case_intro(A_13376, L)
Logical.infer_tm(L)
trans12.Program.case_intro(B_13381, #A_13376 -> U)
Logical.infer_tm(A_13376 -> U)
Logical.infer_tm(A_13376)
Logical.infer_tm(U)
trans12.Program.case_intro(x_13390, (apair_10‹L,U,L› #A_13376 #B_13381))
Logical.infer_tm((apair_10‹L,U,L› A_13376 B_13381))
Logical.check_tm( A_13376, L )
Logical.infer_tm(A_13376)
Logical.assert_equal(L, L)
Logical.check_tm( B_13381, A_13376 -> U )
Logical.infer_tm(B_13381)
Logical.assert_equal(A_13376 -> U, A_13376 -> U)
Logical.infer_tm((apair_10‹L,U,L› A_13376 B_13381))
Logical.check_tm( A_13376, L )
Logical.infer_tm(A_13376)
Logical.assert_equal(L, L)
Logical.check_tm( B_13381, A_13376 -> U )
Logical.infer_tm(B_13381)
Logical.assert_equal(A_13376 -> U, A_13376 -> U)
trans12.Program.case_split(apairLUL_33, apair_introLUL_36)
Logical.infer_tm(A_13376)
Logical.infer_tm(∀ (b_13423 : bool_5) -o
                   match b_13423 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_13376 x_13409)
                   | false_6 => (boxed_2‹U› ((B_13381) x_13409)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_13425 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_13376 x_13409)
                 | false_6 => (boxed_2‹U› ((B_13381) x_13409)))
Logical.check_tm( b_13425, bool_5 )
Logical.infer_tm(b_13425)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_13376 x_13409) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_13376 x_13409), L)
Logical.check_tm( (sing_3‹L,L› A_13376 x_13409), L )
Logical.infer_tm((sing_3‹L,L› A_13376 x_13409))
Logical.check_tm( A_13376, L )
Logical.infer_tm(A_13376)
Logical.assert_equal(L, L)
Logical.check_tm( x_13409, A_13376 )
Logical.infer_tm(x_13409)
Logical.assert_equal(A_13376, A_13376)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_13381) x_13409)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_13381) x_13409)), L)
Logical.check_tm( (boxed_2‹U› ((B_13381) x_13409)), L )
Logical.infer_tm((boxed_2‹U› ((B_13381) x_13409)))
Logical.check_tm( ((B_13381) x_13409), U )
Logical.infer_tm(((B_13381) x_13409))
Logical.infer_tm(B_13381)
Logical.check_tm( x_13409, A_13376 )
Logical.infer_tm(x_13409)
Logical.assert_equal(A_13376, A_13376)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹L,U,L› #A_13376 #B_13381),
      (apair_10‹L,U,L› #A_13376 #B_13381));
    {| eq_pat?(N #A_13376, A_13372 : L)
       eq_pat?(N #B_13381, B_13373 : #A_13376 -> U)
       eq_pat?(N #x_13409, x_13374 : #A_13376)
       eq_pat?(R #select_13410, select_13375 :
         ∀ (b_13462 : bool_5) -o
           match b_13462 in bool_5 -o L with
           | true_5 => (sing_3‹L,L› #A_13376 #x_13409)
           | false_6 => (boxed_2‹U› ((#B_13381) #x_13409))) ::: [] =>?
         match #x_13374, ((#select_13375) true_5),
         ((sing_uniq_2‹L,L›) #A_13372 #x_13374 ((#select_13375) true_5)),
         ((#select_13375) false_6) in
           ∀ {x0_13464 : #A_13372} -o
             ∀ {a0_13465 : (sing_3‹L,L› #A_13372 #x_13374)} -o
               {(eq_1‹L›
                  #A_13372 x0_13464
                  ((sing_elim_1‹L,L›) #A_13372 #x_13374 a0_13465))} -o
                 (boxed_2‹U› ((#B_13373) x0_13464)) -o
                   ((#B_13373)
                     ((sing_elim_1‹L,L›) #A_13372 #x_13374 a0_13465))
         with
         | x0_13468, a0_13469, refl_1, (box_2 m_13470) => m_13470
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_13376, A_13372 : L)
  eq_pat?(N #B_13381, B_13373 : #A_13376 -> U)
  eq_pat?(N #x_13409, x_13374 : #A_13376)
  eq_pat?(R #select_13410, select_13375 :
    ∀ (b_13472 : bool_5) -o
      match b_13472 in bool_5 -o L with
      | true_5 => (sing_3‹L,L› #A_13376 #x_13409)
      | false_6 => (boxed_2‹U› ((#B_13381) #x_13409)))
)
unify_global(
  eq_term?( (apair_10‹L,U,L› #A_13376 #B_13381),
    (apair_10‹L,U,L› #A_13376 #B_13381))
)
simpl_pprbm ~expand:false( #A_13376, #A_13372)
simpl_pprbm ~expand:false( #B_13381, #B_13373)
simpl_pprbm ~expand:false( #x_13409, #x_13374)
simpl_pprbm ~expand:false( #select_13410, #select_13375)
simpl_pprbm ~expand:false( (apair_10‹L,U,L› #A_13376 #B_13381),
  (apair_10‹L,U,L› #A_13376 #B_13381))
simpl_pprbm ~expand:false( #A_13376, #A_13376)
simpl_pprbm ~expand:false( #B_13381, #B_13381)
case_coverage_ok(
  match x_13409, ((select_13410) true_5),
  ((sing_uniq_2‹L,L›) A_13376 x_13409 ((select_13410) true_5)),
  ((select_13410) false_6) in
    ∀ {x0_13488 : A_13376} -o
      ∀ {a0_13489 : (sing_3‹L,L› A_13376 x_13409)} -o
        {(eq_1‹L›
           A_13376 x0_13488 ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13489))} -o
          (boxed_2‹U› ((B_13381) x0_13488)) -o
            ((B_13381) ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13489))
  with
  | x0_13492, a0_13493, refl_1, (box_2 m_13494) => m_13494,
  ((B_13381)
    ((proj1_7‹L,U,L›)
      A_13376 B_13381
      (apair_intro_13‹L,U,L› A_13376 B_13381 x_13409 select_13410))))
Program.check_tm(
  match x_13409, ((select_13410) true_5),
  ((sing_uniq_2‹L,L›) A_13376 x_13409 ((select_13410) true_5)),
  ((select_13410) false_6) in
    ∀ {x0_13495 : A_13376} -o
      ∀ {a0_13496 : (sing_3‹L,L› A_13376 x_13409)} -o
        {(eq_1‹L›
           A_13376 x0_13495 ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13496))} -o
          (boxed_2‹U› ((B_13381) x0_13495)) -o
            ((B_13381) ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13496))
  with
  | x0_13499, a0_13500, refl_1, (box_2 m_13501) => m_13501,
  ((B_13381)
    ((proj1_7‹L,U,L›)
      A_13376 B_13381
      (apair_intro_13‹L,U,L› A_13376 B_13381 x_13409 select_13410)))
)
Program.infer_tm(match x_13409, ((select_13410) true_5),
                 ((sing_uniq_2‹L,L›)
                   A_13376 x_13409 ((select_13410) true_5)),
                 ((select_13410) false_6) in
                   ∀ {x0_13502 : A_13376} -o
                     ∀ {a0_13503 : (sing_3‹L,L› A_13376 x_13409)} -o
                       {(eq_1‹L›
                          A_13376 x0_13502
                          ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13503))} -o
                         (boxed_2‹U› ((B_13381) x0_13502)) -o
                           ((B_13381)
                             ((sing_elim_1‹L,L›)
                               A_13376 x_13409 a0_13503))
                 with
                 | x0_13506, a0_13507, refl_1, (box_2 m_13508) => m_13508)
Program.infer_motive_N(x_13409, A_13376)
Logical.check_tm( x_13409, A_13376 )
Logical.infer_tm(x_13409)
Logical.assert_equal(A_13376, A_13376)
Program.infer_motive_N_ok(x_13409, A_13376)
Program.infer_motive_N(((select_13410) true_5), (sing_3‹L,L›
                                                  A_13376 x_13409))
Logical.check_tm( ((select_13410) true_5), (sing_3‹L,L› A_13376 x_13409)
)
Logical.infer_tm(((select_13410) true_5))
Logical.infer_tm(select_13410)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_13376 x_13409), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_13376 x_13409)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_13381)
                                                              x_13409)))
Program.infer_motive_N_ok(((select_13410) true_5), (sing_3‹L,L›
                                                     A_13376 x_13409))
Program.infer_motive_N(((sing_uniq_2‹L,L›)
                         A_13376 x_13409 ((select_13410) true_5)), (eq_1‹L›
                                                                    A_13376
                                                                    x_13409
                                                                    ((sing_elim_1‹L,L›)
                                                                    A_13376
                                                                    x_13409
                                                                    ((select_13410)
                                                                    true_5))))
Logical.check_tm(
  ((sing_uniq_2‹L,L›) A_13376 x_13409 ((select_13410) true_5)),
  (eq_1‹L›
    A_13376 x_13409
    ((sing_elim_1‹L,L›) A_13376 x_13409 ((select_13410) true_5)))
)
Logical.infer_tm(((sing_uniq_2‹L,L›)
                   A_13376 x_13409 ((select_13410) true_5)))
Logical.infer_tm(((sing_uniq_2‹L,L›) A_13376 x_13409))
Logical.infer_tm(((sing_uniq_2‹L,L›) A_13376))
Logical.infer_tm(sing_uniq_2‹L,L›)
Logical.check_tm( A_13376, L )
Logical.infer_tm(A_13376)
Logical.assert_equal(L, L)
Logical.check_tm( x_13409, A_13376 )
Logical.infer_tm(x_13409)
Logical.assert_equal(A_13376, A_13376)
Logical.check_tm( ((select_13410) true_5), (sing_3‹L,L› A_13376 x_13409)
)
Logical.infer_tm(((select_13410) true_5))
Logical.infer_tm(select_13410)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_13376 x_13409), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_13376 x_13409)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_13381)
                                                              x_13409)))
Logical.assert_equal((eq_1‹L›
                       A_13376 x_13409
                       ((sing_elim_1‹L,L›)
                         A_13376 x_13409 ((select_13410) true_5))), (eq_1‹L›
                                                                    A_13376
                                                                    x_13409
                                                                    ((sing_elim_1‹L,L›)
                                                                    A_13376
                                                                    x_13409
                                                                    ((select_13410)
                                                                    true_5))))
Program.infer_motive_N_ok(((sing_uniq_2‹L,L›)
                            A_13376 x_13409 ((select_13410) true_5)), 
(eq_1‹L›
  A_13376 x_13409
  ((sing_elim_1‹L,L›) A_13376 x_13409 ((select_13410) true_5))))
Program.infer_motive_R(((select_13410) false_6), (boxed_2‹U›
                                                   ((B_13381) x_13409)))
Program.check_tm( ((select_13410) false_6),
  (boxed_2‹U› ((B_13381) x_13409))
)
Program.infer_tm(((select_13410) false_6))
Program.infer_tm(select_13410)
Program.check_tm( false_6, bool_5 )
Program.infer_tm(false_6)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((boxed_2‹U› ((B_13381) x_13409)), match false_6 in
                                                             bool_5 -o L
                                                           with
                                                           | true_5 =>
                                                             (sing_3‹L,L›
                                                               A_13376
                                                               x_13409)
                                                           | false_6 =>
                                                             (boxed_2‹U›
                                                               ((B_13381)
                                                                 x_13409)))
Program.infer_motive_R_ok(((select_13410) false_6), (boxed_2‹U›
                                                      ((B_13381) x_13409)))
Program.infer_motive_ok
trans12.Program.case_intro(x0_13515, A_13376)
Logical.infer_tm(A_13376)
trans12.Program.case_intro(a0_13523, (sing_3‹L,L› A_13376 x_13409))
Logical.infer_tm((sing_3‹L,L› A_13376 x_13409))
Logical.check_tm( A_13376, L )
Logical.infer_tm(A_13376)
Logical.assert_equal(L, L)
Logical.check_tm( x_13409, A_13376 )
Logical.infer_tm(x_13409)
Logical.assert_equal(A_13376, A_13376)
trans12.Program.case_intro(__13531, (eq_1‹L›
                                      A_13376 #x0_13515
                                      ((sing_elim_1‹L,L›)
                                        A_13376 x_13409 #a0_13523)))
Logical.infer_tm((eq_1‹L›
                   A_13376 x0_13515
                   ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13523)))
Logical.check_tm( A_13376, L )
Logical.infer_tm(A_13376)
Logical.assert_equal(L, L)
Logical.check_tm( x0_13515, A_13376 )
Logical.infer_tm(x0_13515)
Logical.assert_equal(A_13376, A_13376)
Logical.check_tm( ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13523), 
A_13376 )
Logical.infer_tm(((sing_elim_1‹L,L›) A_13376 x_13409 a0_13523))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13376 x_13409))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13376))
Logical.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_13376, L )
Logical.infer_tm(A_13376)
Logical.assert_equal(L, L)
Logical.check_tm( x_13409, A_13376 )
Logical.infer_tm(x_13409)
Logical.assert_equal(A_13376, A_13376)
Logical.check_tm( a0_13523, (sing_3‹L,L› A_13376 x_13409) )
Logical.infer_tm(a0_13523)
Logical.assert_equal((sing_3‹L,L› A_13376 x_13409), (sing_3‹L,L›
                                                          A_13376 x_13409))
Logical.assert_equal(A_13376, A_13376)
trans12.Program.case_intro(__13539, (boxed_2‹U› ((B_13381) #x0_13515)))
Logical.infer_tm((boxed_2‹U› ((B_13381) x0_13515)))
Logical.check_tm( ((B_13381) x0_13515), U )
Logical.infer_tm(((B_13381) x0_13515))
Logical.infer_tm(B_13381)
Logical.check_tm( x0_13515, A_13376 )
Logical.infer_tm(x0_13515)
Logical.assert_equal(A_13376, A_13376)
Logical.assert_equal(U, U)
Logical.infer_tm((eq_1‹L›
                   A_13376 x0_13515
                   ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13523)))
Logical.check_tm( A_13376, L )
Logical.infer_tm(A_13376)
Logical.assert_equal(L, L)
Logical.check_tm( x0_13515, A_13376 )
Logical.infer_tm(x0_13515)
Logical.assert_equal(A_13376, A_13376)
Logical.check_tm( ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13523), 
A_13376 )
Logical.infer_tm(((sing_elim_1‹L,L›) A_13376 x_13409 a0_13523))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13376 x_13409))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13376))
Logical.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_13376, L )
Logical.infer_tm(A_13376)
Logical.assert_equal(L, L)
Logical.check_tm( x_13409, A_13376 )
Logical.infer_tm(x_13409)
Logical.assert_equal(A_13376, A_13376)
Logical.check_tm( a0_13523, (sing_3‹L,L› A_13376 x_13409) )
Logical.infer_tm(a0_13523)
Logical.assert_equal((sing_3‹L,L› A_13376 x_13409), (sing_3‹L,L›
                                                          A_13376 x_13409))
Logical.assert_equal(A_13376, A_13376)
trans12.Program.case_split(eqL_11, reflL_14)
Logical.infer_tm((boxed_2‹U› ((B_13381) x0_13515)))
Logical.check_tm( ((B_13381) x0_13515), U )
Logical.infer_tm(((B_13381) x0_13515))
Logical.infer_tm(B_13381)
Logical.check_tm( x0_13515, A_13376 )
Logical.infer_tm(x0_13515)
Logical.assert_equal(A_13376, A_13376)
Logical.assert_equal(U, U)
trans12.Program.case_split(boxedU_14, boxU_17)
Logical.infer_tm(((B_13381) x0_13515))
Logical.infer_tm(B_13381)
Logical.check_tm( x0_13515, A_13376 )
Logical.infer_tm(x0_13515)
Logical.assert_equal(A_13376, A_13376)
case_coverage{|
  prblm {|
    eq_term?( (boxed_2‹U› ((B_13381) #x0_13515)),
      (boxed_2‹U› ((B_13381) #x0_13515)))
    eq_term?(
      (eq_1‹L›
        A_13376 #x0_13515 ((sing_elim_1‹L,L›) A_13376 x_13409 #a0_13523)),
      (eq_1‹L› A_13376 #x0_13515 #x0_13515));
    {| eq_pat?(N #x0_13515, x0_13512 : A_13376)
       eq_pat?(N #a0_13523, a0_13513 : (sing_3‹L,L› A_13376 x_13409))
       eq_pat?(R #m_13568, m_13514 : ((B_13381) #x0_13515)) ::: [] =>?
         #m_13514
    |}
  |}
|}
unify_local(
  eq_pat?(N #x0_13515, x0_13512 : A_13376)
  eq_pat?(N #a0_13523, a0_13513 : (sing_3‹L,L› A_13376 x_13409))
  eq_pat?(R #m_13568, m_13514 : ((B_13381) #x0_13515))
)
unify_global(
  eq_term?( (boxed_2‹U› ((B_13381) #x0_13515)),
    (boxed_2‹U› ((B_13381) #x0_13515)))
  eq_term?(
    (eq_1‹L›
      A_13376 #x0_13515 ((sing_elim_1‹L,L›) A_13376 x_13409 #a0_13523)),
    (eq_1‹L› A_13376 #x0_13515 #x0_13515))
)
simpl_pprbm ~expand:false( #x0_13515, #x0_13512)
simpl_pprbm ~expand:false( #a0_13523, #a0_13513)
simpl_pprbm ~expand:false( #m_13568, #m_13514)
simpl_pprbm ~expand:false( (boxed_2‹U› ((B_13381) #x0_13515)),
  (boxed_2‹U› ((B_13381) #x0_13515)))
simpl_pprbm ~expand:false( ((B_13381) #x0_13515), ((B_13381) #x0_13515))
simpl_pprbm ~expand:false( B_13381, B_13381)
simpl_pprbm ~expand:false( #x0_13515, #x0_13515)
simpl_pprbm ~expand:false(
  (eq_1‹L›
    A_13376 #x0_13515 ((sing_elim_1‹L,L›) A_13376 x_13409 #a0_13523)),
  (eq_1‹L› A_13376 #x0_13515 #x0_13515))
simpl_pprbm ~expand:false( A_13376, A_13376)
simpl_pprbm ~expand:false( #x0_13515, #x0_13515)
simpl_pprbm ~expand:false(
  ((sing_elim_1‹L,L›) A_13376 x_13409 #a0_13523), #x0_13515)
case_coverage_ok( m_13568,
  ((B_13381) ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13523)))
Program.check_tm( m_13568,
  ((B_13381) ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13523))
)
Program.infer_tm(m_13568)
Logical.assert_equal(((B_13381)
                       ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13523)), 
((B_13381) ((sing_elim_1‹L,L›) A_13376 x_13409 a0_13523)))
trans12.Program.case_introed((boxed_2‹U› ((B_13381) #x0_13515)))
trans12.Program.case_introed((eq_1‹L›
                               A_13376 #x0_13515
                               ((sing_elim_1‹L,L›)
                                 A_13376 x_13409 #a0_13523)))
trans12.Program.case_introed((sing_3‹L,L› A_13376 x_13409))
trans12.Program.case_introed(A_13376)
Logical.assert_equal(((B_13381)
                       ((proj1_7‹L,U,L›)
                         A_13376 B_13381
                         (apair_intro_13‹L,U,L›
                           A_13376 B_13381 x_13409 select_13410))), ((B_13381)
                                                                    ((
                                                                    function sing_elim_13590 :
                                                                    ∀ {A_13591 :
                                                                    L} ->
                                                                    ∀ {x_13592 :
                                                                    A_13591} ->
                                                                    (sing_3‹L,L›
                                                                    A_13591
                                                                    x_13592) ->
                                                                    A_13591
                                                                    | 
                                                                    A_13594 x_13595 (just_3 m_13596) =>
                                                                    m_13596)
                                                                    A_13376
                                                                    x_13409
                                                                    ((select_13410)
                                                                    true_5))))
trans12.Program.case_introed((apair_10‹L,U,L› #A_13376 #B_13381))
trans12.Program.case_introed(#A_13376 -> U)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_13598 : L} ->
                       ∀ {B_13599 : A_13598 -> U} ->
                         ∀ (x_13601 :
                           (apair_10‹L,U,L› A_13598 B_13599)) ->
                           ((B_13599)
                             ((proj1_7‹L,U,L›) A_13598 B_13599 x_13601)), 
∀ {A_13602 : L} ->
  ∀ {B_13603 : A_13602 -> U} ->
    ∀ (x_13605 : (apair_10‹L,U,L› A_13602 B_13603)) ->
      ((B_13603) ((proj1_7‹L,U,L›) A_13602 B_13603 x_13605)))
Logical.infer_tm(∀ {A_13610 : L} ->
                   ∀ {B_13611 : A_13610 -> U} ->
                     ∀ (x_13613 : (apair_10‹L,U,U› A_13610 B_13611)) ->
                       ((B_13611)
                         ((proj1_7‹L,U,U›) A_13610 B_13611 x_13613)))
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_13615 : A_13614 -> U} ->
                   ∀ (x_13617 : (apair_10‹L,U,U› A_13614 B_13615)) ->
                     ((B_13615)
                       ((proj1_7‹L,U,U›) A_13614 B_13615 x_13617)))
Logical.infer_tm(A_13614 -> U)
Logical.infer_tm(A_13614)
Logical.infer_tm(U)
Logical.infer_tm(∀ (x_13621 : (apair_10‹L,U,U› A_13614 B_13618)) ->
                   ((B_13618) ((proj1_7‹L,U,U›) A_13614 B_13618 x_13621)))
Logical.infer_tm((apair_10‹L,U,U› A_13614 B_13618))
Logical.check_tm( A_13614, L )
Logical.infer_tm(A_13614)
Logical.assert_equal(L, L)
Logical.check_tm( B_13618, A_13614 -> U )
Logical.infer_tm(B_13618)
Logical.assert_equal(A_13614 -> U, A_13614 -> U)
Logical.infer_tm(((B_13618) ((proj1_7‹L,U,U›) A_13614 B_13618 x_13622)))
Logical.infer_tm(B_13618)
Logical.check_tm( ((proj1_7‹L,U,U›) A_13614 B_13618 x_13622), A_13614 )
Logical.infer_tm(((proj1_7‹L,U,U›) A_13614 B_13618 x_13622))
Logical.infer_tm(((proj1_7‹L,U,U›) A_13614 B_13618))
Logical.infer_tm(((proj1_7‹L,U,U›) A_13614))
Logical.infer_tm(proj1_7‹L,U,U›)
Logical.check_tm( A_13614, L )
Logical.infer_tm(A_13614)
Logical.assert_equal(L, L)
Logical.check_tm( B_13618, A_13614 -> U )
Logical.infer_tm(B_13618)
Logical.assert_equal(A_13614 -> U, A_13614 -> U)
Logical.check_tm( x_13622, (apair_10‹L,U,U› A_13614 B_13618) )
Logical.infer_tm(x_13622)
Logical.assert_equal((apair_10‹L,U,U› A_13614 B_13618), (apair_10‹L,U,U›
                                                              A_13614 B_13618))
Logical.assert_equal(A_13614, A_13614)
Program.check_tm(
  function proj2_13631 :
    ∀ {A_13632 : L} ->
      ∀ {B_13633 : A_13632 -> U} ->
        ∀ (x_13635 : (apair_10‹L,U,U› A_13632 B_13633)) ->
          ((B_13633) ((proj1_7‹L,U,U›) A_13632 B_13633 x_13635))
  | A_13636 B_13637 (apair_intro_13 x_13638 select_13639) =>
    match x_13638, ((select_13639) true_5),
    ((sing_uniq_2‹L,L›) A_13636 x_13638 ((select_13639) true_5)),
    ((select_13639) false_6) in
      ∀ {x0_13640 : A_13636} -o
        ∀ {a0_13641 : (sing_3‹L,L› A_13636 x_13638)} -o
          {(eq_1‹L›
             A_13636 x0_13640
             ((sing_elim_1‹L,L›) A_13636 x_13638 a0_13641))} -o
            (boxed_2‹U› ((B_13637) x0_13640)) -o
              ((B_13637) ((sing_elim_1‹L,L›) A_13636 x_13638 a0_13641))
    with
    | x0_13644, a0_13645, refl_1, (box_2 m_13646) => m_13646,
  ∀ {A_13647 : L} ->
    ∀ {B_13648 : A_13647 -> U} ->
      ∀ (x_13650 : (apair_10‹L,U,U› A_13647 B_13648)) ->
        ((B_13648) ((proj1_7‹L,U,U›) A_13647 B_13648 x_13650))
)
Program.infer_tm(function proj2_13651 :
                   ∀ {A_13652 : L} ->
                     ∀ {B_13653 : A_13652 -> U} ->
                       ∀ (x_13655 :
                         (apair_10‹L,U,U› A_13652 B_13653)) ->
                         ((B_13653)
                           ((proj1_7‹L,U,U›) A_13652 B_13653 x_13655))
                 | A_13656 B_13657 (apair_intro_13 x_13658 select_13659) =>
                   match x_13658, ((select_13659) true_5),
                   ((sing_uniq_2‹L,L›)
                     A_13656 x_13658 ((select_13659) true_5)),
                   ((select_13659) false_6) in
                     ∀ {x0_13660 : A_13656} -o
                       ∀ {a0_13661 : (sing_3‹L,L› A_13656 x_13658)} -o
                         {(eq_1‹L›
                            A_13656 x0_13660
                            ((sing_elim_1‹L,L›) A_13656 x_13658 a0_13661))} -o
                           (boxed_2‹U› ((B_13657) x0_13660)) -o
                             ((B_13657)
                               ((sing_elim_1‹L,L›)
                                 A_13656 x_13658 a0_13661))
                   with
                   | x0_13664, a0_13665, refl_1, (box_2 m_13666) => m_13666)
Logical.infer_tm(∀ {A_13668 : L} ->
                   ∀ {B_13669 : A_13668 -> U} ->
                     ∀ (x_13671 : (apair_10‹L,U,U› A_13668 B_13669)) ->
                       ((B_13669)
                         ((proj1_7‹L,U,U›) A_13668 B_13669 x_13671)))
Logical.infer_tm(L)
Logical.infer_tm(∀ {B_13673 : A_13672 -> U} ->
                   ∀ (x_13675 : (apair_10‹L,U,U› A_13672 B_13673)) ->
                     ((B_13673)
                       ((proj1_7‹L,U,U›) A_13672 B_13673 x_13675)))
Logical.infer_tm(A_13672 -> U)
Logical.infer_tm(A_13672)
Logical.infer_tm(U)
Logical.infer_tm(∀ (x_13679 : (apair_10‹L,U,U› A_13672 B_13676)) ->
                   ((B_13676) ((proj1_7‹L,U,U›) A_13672 B_13676 x_13679)))
Logical.infer_tm((apair_10‹L,U,U› A_13672 B_13676))
Logical.check_tm( A_13672, L )
Logical.infer_tm(A_13672)
Logical.assert_equal(L, L)
Logical.check_tm( B_13676, A_13672 -> U )
Logical.infer_tm(B_13676)
Logical.assert_equal(A_13672 -> U, A_13672 -> U)
Logical.infer_tm(((B_13676) ((proj1_7‹L,U,U›) A_13672 B_13676 x_13680)))
Logical.infer_tm(B_13676)
Logical.check_tm( ((proj1_7‹L,U,U›) A_13672 B_13676 x_13680), A_13672 )
Logical.infer_tm(((proj1_7‹L,U,U›) A_13672 B_13676 x_13680))
Logical.infer_tm(((proj1_7‹L,U,U›) A_13672 B_13676))
Logical.infer_tm(((proj1_7‹L,U,U›) A_13672))
Logical.infer_tm(proj1_7‹L,U,U›)
Logical.check_tm( A_13672, L )
Logical.infer_tm(A_13672)
Logical.assert_equal(L, L)
Logical.check_tm( B_13676, A_13672 -> U )
Logical.infer_tm(B_13676)
Logical.assert_equal(A_13672 -> U, A_13672 -> U)
Logical.check_tm( x_13680, (apair_10‹L,U,U› A_13672 B_13676) )
Logical.infer_tm(x_13680)
Logical.assert_equal((apair_10‹L,U,U› A_13672 B_13676), (apair_10‹L,U,U›
                                                              A_13672 B_13676))
Logical.assert_equal(A_13672, A_13672)
trans12.Program.case_intro(A_13693, L)
Logical.infer_tm(L)
trans12.Program.case_intro(B_13698, #A_13693 -> U)
Logical.infer_tm(A_13693 -> U)
Logical.infer_tm(A_13693)
Logical.infer_tm(U)
trans12.Program.case_intro(x_13707, (apair_10‹L,U,U› #A_13693 #B_13698))
Logical.infer_tm((apair_10‹L,U,U› A_13693 B_13698))
Logical.check_tm( A_13693, L )
Logical.infer_tm(A_13693)
Logical.assert_equal(L, L)
Logical.check_tm( B_13698, A_13693 -> U )
Logical.infer_tm(B_13698)
Logical.assert_equal(A_13693 -> U, A_13693 -> U)
Logical.infer_tm((apair_10‹L,U,U› A_13693 B_13698))
Logical.check_tm( A_13693, L )
Logical.infer_tm(A_13693)
Logical.assert_equal(L, L)
Logical.check_tm( B_13698, A_13693 -> U )
Logical.infer_tm(B_13698)
Logical.assert_equal(A_13693 -> U, A_13693 -> U)
trans12.Program.case_split(apairLUU_34, apair_introLUU_37)
Logical.infer_tm(A_13693)
Logical.infer_tm(∀ (b_13740 : bool_5) ->
                   match b_13740 in bool_5 -o L with
                   | true_5 => (sing_3‹L,L› A_13693 x_13726)
                   | false_6 => (boxed_2‹U› ((B_13698) x_13726)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_13742 in bool_5 -o L with
                 | true_5 => (sing_3‹L,L› A_13693 x_13726)
                 | false_6 => (boxed_2‹U› ((B_13698) x_13726)))
Logical.check_tm( b_13742, bool_5 )
Logical.infer_tm(b_13742)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹L,L› A_13693 x_13726) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹L,L› A_13693 x_13726), L)
Logical.check_tm( (sing_3‹L,L› A_13693 x_13726), L )
Logical.infer_tm((sing_3‹L,L› A_13693 x_13726))
Logical.check_tm( A_13693, L )
Logical.infer_tm(A_13693)
Logical.assert_equal(L, L)
Logical.check_tm( x_13726, A_13693 )
Logical.infer_tm(x_13726)
Logical.assert_equal(A_13693, A_13693)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_13698) x_13726)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_13698) x_13726)), L)
Logical.check_tm( (boxed_2‹U› ((B_13698) x_13726)), L )
Logical.infer_tm((boxed_2‹U› ((B_13698) x_13726)))
Logical.check_tm( ((B_13698) x_13726), U )
Logical.infer_tm(((B_13698) x_13726))
Logical.infer_tm(B_13698)
Logical.check_tm( x_13726, A_13693 )
Logical.infer_tm(x_13726)
Logical.assert_equal(A_13693, A_13693)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹L,U,U› #A_13693 #B_13698),
      (apair_10‹L,U,U› #A_13693 #B_13698));
    {| eq_pat?(N #A_13693, A_13689 : L)
       eq_pat?(N #B_13698, B_13690 : #A_13693 -> U)
       eq_pat?(N #x_13726, x_13691 : #A_13693)
       eq_pat?(R #select_13727, select_13692 :
         ∀ (b_13779 : bool_5) ->
           match b_13779 in bool_5 -o L with
           | true_5 => (sing_3‹L,L› #A_13693 #x_13726)
           | false_6 => (boxed_2‹U› ((#B_13698) #x_13726))) ::: [] =>?
         match #x_13691, ((#select_13692) true_5),
         ((sing_uniq_2‹L,L›) #A_13689 #x_13691 ((#select_13692) true_5)),
         ((#select_13692) false_6) in
           ∀ {x0_13781 : #A_13689} -o
             ∀ {a0_13782 : (sing_3‹L,L› #A_13689 #x_13691)} -o
               {(eq_1‹L›
                  #A_13689 x0_13781
                  ((sing_elim_1‹L,L›) #A_13689 #x_13691 a0_13782))} -o
                 (boxed_2‹U› ((#B_13690) x0_13781)) -o
                   ((#B_13690)
                     ((sing_elim_1‹L,L›) #A_13689 #x_13691 a0_13782))
         with
         | x0_13785, a0_13786, refl_1, (box_2 m_13787) => m_13787
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_13693, A_13689 : L)
  eq_pat?(N #B_13698, B_13690 : #A_13693 -> U)
  eq_pat?(N #x_13726, x_13691 : #A_13693)
  eq_pat?(R #select_13727, select_13692 :
    ∀ (b_13789 : bool_5) ->
      match b_13789 in bool_5 -o L with
      | true_5 => (sing_3‹L,L› #A_13693 #x_13726)
      | false_6 => (boxed_2‹U› ((#B_13698) #x_13726)))
)
unify_global(
  eq_term?( (apair_10‹L,U,U› #A_13693 #B_13698),
    (apair_10‹L,U,U› #A_13693 #B_13698))
)
simpl_pprbm ~expand:false( #A_13693, #A_13689)
simpl_pprbm ~expand:false( #B_13698, #B_13690)
simpl_pprbm ~expand:false( #x_13726, #x_13691)
simpl_pprbm ~expand:false( #select_13727, #select_13692)
simpl_pprbm ~expand:false( (apair_10‹L,U,U› #A_13693 #B_13698),
  (apair_10‹L,U,U› #A_13693 #B_13698))
simpl_pprbm ~expand:false( #A_13693, #A_13693)
simpl_pprbm ~expand:false( #B_13698, #B_13698)
case_coverage_ok(
  match x_13726, ((select_13727) true_5),
  ((sing_uniq_2‹L,L›) A_13693 x_13726 ((select_13727) true_5)),
  ((select_13727) false_6) in
    ∀ {x0_13805 : A_13693} -o
      ∀ {a0_13806 : (sing_3‹L,L› A_13693 x_13726)} -o
        {(eq_1‹L›
           A_13693 x0_13805 ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13806))} -o
          (boxed_2‹U› ((B_13698) x0_13805)) -o
            ((B_13698) ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13806))
  with
  | x0_13809, a0_13810, refl_1, (box_2 m_13811) => m_13811,
  ((B_13698)
    ((proj1_7‹L,U,U›)
      A_13693 B_13698
      (apair_intro_13‹L,U,U› A_13693 B_13698 x_13726 select_13727))))
Program.check_tm(
  match x_13726, ((select_13727) true_5),
  ((sing_uniq_2‹L,L›) A_13693 x_13726 ((select_13727) true_5)),
  ((select_13727) false_6) in
    ∀ {x0_13812 : A_13693} -o
      ∀ {a0_13813 : (sing_3‹L,L› A_13693 x_13726)} -o
        {(eq_1‹L›
           A_13693 x0_13812 ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13813))} -o
          (boxed_2‹U› ((B_13698) x0_13812)) -o
            ((B_13698) ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13813))
  with
  | x0_13816, a0_13817, refl_1, (box_2 m_13818) => m_13818,
  ((B_13698)
    ((proj1_7‹L,U,U›)
      A_13693 B_13698
      (apair_intro_13‹L,U,U› A_13693 B_13698 x_13726 select_13727)))
)
Program.infer_tm(match x_13726, ((select_13727) true_5),
                 ((sing_uniq_2‹L,L›)
                   A_13693 x_13726 ((select_13727) true_5)),
                 ((select_13727) false_6) in
                   ∀ {x0_13819 : A_13693} -o
                     ∀ {a0_13820 : (sing_3‹L,L› A_13693 x_13726)} -o
                       {(eq_1‹L›
                          A_13693 x0_13819
                          ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13820))} -o
                         (boxed_2‹U› ((B_13698) x0_13819)) -o
                           ((B_13698)
                             ((sing_elim_1‹L,L›)
                               A_13693 x_13726 a0_13820))
                 with
                 | x0_13823, a0_13824, refl_1, (box_2 m_13825) => m_13825)
Program.infer_motive_N(x_13726, A_13693)
Logical.check_tm( x_13726, A_13693 )
Logical.infer_tm(x_13726)
Logical.assert_equal(A_13693, A_13693)
Program.infer_motive_N_ok(x_13726, A_13693)
Program.infer_motive_N(((select_13727) true_5), (sing_3‹L,L›
                                                  A_13693 x_13726))
Logical.check_tm( ((select_13727) true_5), (sing_3‹L,L› A_13693 x_13726)
)
Logical.infer_tm(((select_13727) true_5))
Logical.infer_tm(select_13727)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_13693 x_13726), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_13693 x_13726)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_13698)
                                                              x_13726)))
Program.infer_motive_N_ok(((select_13727) true_5), (sing_3‹L,L›
                                                     A_13693 x_13726))
Program.infer_motive_N(((sing_uniq_2‹L,L›)
                         A_13693 x_13726 ((select_13727) true_5)), (eq_1‹L›
                                                                    A_13693
                                                                    x_13726
                                                                    ((sing_elim_1‹L,L›)
                                                                    A_13693
                                                                    x_13726
                                                                    ((select_13727)
                                                                    true_5))))
Logical.check_tm(
  ((sing_uniq_2‹L,L›) A_13693 x_13726 ((select_13727) true_5)),
  (eq_1‹L›
    A_13693 x_13726
    ((sing_elim_1‹L,L›) A_13693 x_13726 ((select_13727) true_5)))
)
Logical.infer_tm(((sing_uniq_2‹L,L›)
                   A_13693 x_13726 ((select_13727) true_5)))
Logical.infer_tm(((sing_uniq_2‹L,L›) A_13693 x_13726))
Logical.infer_tm(((sing_uniq_2‹L,L›) A_13693))
Logical.infer_tm(sing_uniq_2‹L,L›)
Logical.check_tm( A_13693, L )
Logical.infer_tm(A_13693)
Logical.assert_equal(L, L)
Logical.check_tm( x_13726, A_13693 )
Logical.infer_tm(x_13726)
Logical.assert_equal(A_13693, A_13693)
Logical.check_tm( ((select_13727) true_5), (sing_3‹L,L› A_13693 x_13726)
)
Logical.infer_tm(((select_13727) true_5))
Logical.infer_tm(select_13727)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹L,L› A_13693 x_13726), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹L,L›
                                                            A_13693 x_13726)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_13698)
                                                              x_13726)))
Logical.assert_equal((eq_1‹L›
                       A_13693 x_13726
                       ((sing_elim_1‹L,L›)
                         A_13693 x_13726 ((select_13727) true_5))), (eq_1‹L›
                                                                    A_13693
                                                                    x_13726
                                                                    ((sing_elim_1‹L,L›)
                                                                    A_13693
                                                                    x_13726
                                                                    ((select_13727)
                                                                    true_5))))
Program.infer_motive_N_ok(((sing_uniq_2‹L,L›)
                            A_13693 x_13726 ((select_13727) true_5)), 
(eq_1‹L›
  A_13693 x_13726
  ((sing_elim_1‹L,L›) A_13693 x_13726 ((select_13727) true_5))))
Program.infer_motive_R(((select_13727) false_6), (boxed_2‹U›
                                                   ((B_13698) x_13726)))
Program.check_tm( ((select_13727) false_6),
  (boxed_2‹U› ((B_13698) x_13726))
)
Program.infer_tm(((select_13727) false_6))
Program.infer_tm(select_13727)
Program.check_tm( false_6, bool_5 )
Program.infer_tm(false_6)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((boxed_2‹U› ((B_13698) x_13726)), match false_6 in
                                                             bool_5 -o L
                                                           with
                                                           | true_5 =>
                                                             (sing_3‹L,L›
                                                               A_13693
                                                               x_13726)
                                                           | false_6 =>
                                                             (boxed_2‹U›
                                                               ((B_13698)
                                                                 x_13726)))
Program.infer_motive_R_ok(((select_13727) false_6), (boxed_2‹U›
                                                      ((B_13698) x_13726)))
Program.infer_motive_ok
trans12.Program.case_intro(x0_13832, A_13693)
Logical.infer_tm(A_13693)
trans12.Program.case_intro(a0_13840, (sing_3‹L,L› A_13693 x_13726))
Logical.infer_tm((sing_3‹L,L› A_13693 x_13726))
Logical.check_tm( A_13693, L )
Logical.infer_tm(A_13693)
Logical.assert_equal(L, L)
Logical.check_tm( x_13726, A_13693 )
Logical.infer_tm(x_13726)
Logical.assert_equal(A_13693, A_13693)
trans12.Program.case_intro(__13848, (eq_1‹L›
                                      A_13693 #x0_13832
                                      ((sing_elim_1‹L,L›)
                                        A_13693 x_13726 #a0_13840)))
Logical.infer_tm((eq_1‹L›
                   A_13693 x0_13832
                   ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13840)))
Logical.check_tm( A_13693, L )
Logical.infer_tm(A_13693)
Logical.assert_equal(L, L)
Logical.check_tm( x0_13832, A_13693 )
Logical.infer_tm(x0_13832)
Logical.assert_equal(A_13693, A_13693)
Logical.check_tm( ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13840), 
A_13693 )
Logical.infer_tm(((sing_elim_1‹L,L›) A_13693 x_13726 a0_13840))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13693 x_13726))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13693))
Logical.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_13693, L )
Logical.infer_tm(A_13693)
Logical.assert_equal(L, L)
Logical.check_tm( x_13726, A_13693 )
Logical.infer_tm(x_13726)
Logical.assert_equal(A_13693, A_13693)
Logical.check_tm( a0_13840, (sing_3‹L,L› A_13693 x_13726) )
Logical.infer_tm(a0_13840)
Logical.assert_equal((sing_3‹L,L› A_13693 x_13726), (sing_3‹L,L›
                                                          A_13693 x_13726))
Logical.assert_equal(A_13693, A_13693)
trans12.Program.case_intro(__13856, (boxed_2‹U› ((B_13698) #x0_13832)))
Logical.infer_tm((boxed_2‹U› ((B_13698) x0_13832)))
Logical.check_tm( ((B_13698) x0_13832), U )
Logical.infer_tm(((B_13698) x0_13832))
Logical.infer_tm(B_13698)
Logical.check_tm( x0_13832, A_13693 )
Logical.infer_tm(x0_13832)
Logical.assert_equal(A_13693, A_13693)
Logical.assert_equal(U, U)
Logical.infer_tm((eq_1‹L›
                   A_13693 x0_13832
                   ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13840)))
Logical.check_tm( A_13693, L )
Logical.infer_tm(A_13693)
Logical.assert_equal(L, L)
Logical.check_tm( x0_13832, A_13693 )
Logical.infer_tm(x0_13832)
Logical.assert_equal(A_13693, A_13693)
Logical.check_tm( ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13840), 
A_13693 )
Logical.infer_tm(((sing_elim_1‹L,L›) A_13693 x_13726 a0_13840))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13693 x_13726))
Logical.infer_tm(((sing_elim_1‹L,L›) A_13693))
Logical.infer_tm(sing_elim_1‹L,L›)
Logical.check_tm( A_13693, L )
Logical.infer_tm(A_13693)
Logical.assert_equal(L, L)
Logical.check_tm( x_13726, A_13693 )
Logical.infer_tm(x_13726)
Logical.assert_equal(A_13693, A_13693)
Logical.check_tm( a0_13840, (sing_3‹L,L› A_13693 x_13726) )
Logical.infer_tm(a0_13840)
Logical.assert_equal((sing_3‹L,L› A_13693 x_13726), (sing_3‹L,L›
                                                          A_13693 x_13726))
Logical.assert_equal(A_13693, A_13693)
trans12.Program.case_split(eqL_11, reflL_14)
Logical.infer_tm((boxed_2‹U› ((B_13698) x0_13832)))
Logical.check_tm( ((B_13698) x0_13832), U )
Logical.infer_tm(((B_13698) x0_13832))
Logical.infer_tm(B_13698)
Logical.check_tm( x0_13832, A_13693 )
Logical.infer_tm(x0_13832)
Logical.assert_equal(A_13693, A_13693)
Logical.assert_equal(U, U)
trans12.Program.case_split(boxedU_14, boxU_17)
Logical.infer_tm(((B_13698) x0_13832))
Logical.infer_tm(B_13698)
Logical.check_tm( x0_13832, A_13693 )
Logical.infer_tm(x0_13832)
Logical.assert_equal(A_13693, A_13693)
case_coverage{|
  prblm {|
    eq_term?( (boxed_2‹U› ((B_13698) #x0_13832)),
      (boxed_2‹U› ((B_13698) #x0_13832)))
    eq_term?(
      (eq_1‹L›
        A_13693 #x0_13832 ((sing_elim_1‹L,L›) A_13693 x_13726 #a0_13840)),
      (eq_1‹L› A_13693 #x0_13832 #x0_13832));
    {| eq_pat?(N #x0_13832, x0_13829 : A_13693)
       eq_pat?(N #a0_13840, a0_13830 : (sing_3‹L,L› A_13693 x_13726))
       eq_pat?(R #m_13885, m_13831 : ((B_13698) #x0_13832)) ::: [] =>?
         #m_13831
    |}
  |}
|}
unify_local(
  eq_pat?(N #x0_13832, x0_13829 : A_13693)
  eq_pat?(N #a0_13840, a0_13830 : (sing_3‹L,L› A_13693 x_13726))
  eq_pat?(R #m_13885, m_13831 : ((B_13698) #x0_13832))
)
unify_global(
  eq_term?( (boxed_2‹U› ((B_13698) #x0_13832)),
    (boxed_2‹U› ((B_13698) #x0_13832)))
  eq_term?(
    (eq_1‹L›
      A_13693 #x0_13832 ((sing_elim_1‹L,L›) A_13693 x_13726 #a0_13840)),
    (eq_1‹L› A_13693 #x0_13832 #x0_13832))
)
simpl_pprbm ~expand:false( #x0_13832, #x0_13829)
simpl_pprbm ~expand:false( #a0_13840, #a0_13830)
simpl_pprbm ~expand:false( #m_13885, #m_13831)
simpl_pprbm ~expand:false( (boxed_2‹U› ((B_13698) #x0_13832)),
  (boxed_2‹U› ((B_13698) #x0_13832)))
simpl_pprbm ~expand:false( ((B_13698) #x0_13832), ((B_13698) #x0_13832))
simpl_pprbm ~expand:false( B_13698, B_13698)
simpl_pprbm ~expand:false( #x0_13832, #x0_13832)
simpl_pprbm ~expand:false(
  (eq_1‹L›
    A_13693 #x0_13832 ((sing_elim_1‹L,L›) A_13693 x_13726 #a0_13840)),
  (eq_1‹L› A_13693 #x0_13832 #x0_13832))
simpl_pprbm ~expand:false( A_13693, A_13693)
simpl_pprbm ~expand:false( #x0_13832, #x0_13832)
simpl_pprbm ~expand:false(
  ((sing_elim_1‹L,L›) A_13693 x_13726 #a0_13840), #x0_13832)
case_coverage_ok( m_13885,
  ((B_13698) ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13840)))
Program.check_tm( m_13885,
  ((B_13698) ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13840))
)
Program.infer_tm(m_13885)
Logical.assert_equal(((B_13698)
                       ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13840)), 
((B_13698) ((sing_elim_1‹L,L›) A_13693 x_13726 a0_13840)))
trans12.Program.case_introed((boxed_2‹U› ((B_13698) #x0_13832)))
trans12.Program.case_introed((eq_1‹L›
                               A_13693 #x0_13832
                               ((sing_elim_1‹L,L›)
                                 A_13693 x_13726 #a0_13840)))
trans12.Program.case_introed((sing_3‹L,L› A_13693 x_13726))
trans12.Program.case_introed(A_13693)
Logical.assert_equal(((B_13698)
                       ((proj1_7‹L,U,U›)
                         A_13693 B_13698
                         (apair_intro_13‹L,U,U›
                           A_13693 B_13698 x_13726 select_13727))), ((B_13698)
                                                                    ((
                                                                    function sing_elim_13907 :
                                                                    ∀ {A_13908 :
                                                                    L} ->
                                                                    ∀ {x_13909 :
                                                                    A_13908} ->
                                                                    (sing_3‹L,L›
                                                                    A_13908
                                                                    x_13909) ->
                                                                    A_13908
                                                                    | 
                                                                    A_13911 x_13912 (just_3 m_13913) =>
                                                                    m_13913)
                                                                    A_13693
                                                                    x_13726
                                                                    ((select_13727)
                                                                    true_5))))
trans12.Program.case_introed((apair_10‹L,U,U› #A_13693 #B_13698))
trans12.Program.case_introed(#A_13693 -> U)
trans12.Program.case_introed(L)
Logical.assert_equal(∀ {A_13915 : L} ->
                       ∀ {B_13916 : A_13915 -> U} ->
                         ∀ (x_13918 :
                           (apair_10‹L,U,U› A_13915 B_13916)) ->
                           ((B_13916)
                             ((proj1_7‹L,U,U›) A_13915 B_13916 x_13918)), 
∀ {A_13919 : L} ->
  ∀ {B_13920 : A_13919 -> U} ->
    ∀ (x_13922 : (apair_10‹L,U,U› A_13919 B_13920)) ->
      ((B_13920) ((proj1_7‹L,U,U›) A_13919 B_13920 x_13922)))
Logical.infer_tm(∀ {A_13927 : U} ->
                   ∀ {B_13928 : A_13927 -> L} ->
                     ∀ (x_13930 : (apair_10‹U,L,L› A_13927 B_13928)) ->
                       ((B_13928)
                         ((proj1_7‹U,L,L›) A_13927 B_13928 x_13930)))
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_13932 : A_13931 -> L} ->
                   ∀ (x_13934 : (apair_10‹U,L,L› A_13931 B_13932)) ->
                     ((B_13932)
                       ((proj1_7‹U,L,L›) A_13931 B_13932 x_13934)))
Logical.infer_tm(A_13931 -> L)
Logical.infer_tm(A_13931)
Logical.infer_tm(L)
Logical.infer_tm(∀ (x_13938 : (apair_10‹U,L,L› A_13931 B_13935)) ->
                   ((B_13935) ((proj1_7‹U,L,L›) A_13931 B_13935 x_13938)))
Logical.infer_tm((apair_10‹U,L,L› A_13931 B_13935))
Logical.check_tm( A_13931, U )
Logical.infer_tm(A_13931)
Logical.assert_equal(U, U)
Logical.check_tm( B_13935, A_13931 -> L )
Logical.infer_tm(B_13935)
Logical.assert_equal(A_13931 -> L, A_13931 -> L)
Logical.infer_tm(((B_13935) ((proj1_7‹U,L,L›) A_13931 B_13935 x_13939)))
Logical.infer_tm(B_13935)
Logical.check_tm( ((proj1_7‹U,L,L›) A_13931 B_13935 x_13939), A_13931 )
Logical.infer_tm(((proj1_7‹U,L,L›) A_13931 B_13935 x_13939))
Logical.infer_tm(((proj1_7‹U,L,L›) A_13931 B_13935))
Logical.infer_tm(((proj1_7‹U,L,L›) A_13931))
Logical.infer_tm(proj1_7‹U,L,L›)
Logical.check_tm( A_13931, U )
Logical.infer_tm(A_13931)
Logical.assert_equal(U, U)
Logical.check_tm( B_13935, A_13931 -> L )
Logical.infer_tm(B_13935)
Logical.assert_equal(A_13931 -> L, A_13931 -> L)
Logical.check_tm( x_13939, (apair_10‹U,L,L› A_13931 B_13935) )
Logical.infer_tm(x_13939)
Logical.assert_equal((apair_10‹U,L,L› A_13931 B_13935), (apair_10‹U,L,L›
                                                              A_13931 B_13935))
Logical.assert_equal(A_13931, A_13931)
Program.check_tm(
  function proj2_13948 :
    ∀ {A_13949 : U} ->
      ∀ {B_13950 : A_13949 -> L} ->
        ∀ (x_13952 : (apair_10‹U,L,L› A_13949 B_13950)) ->
          ((B_13950) ((proj1_7‹U,L,L›) A_13949 B_13950 x_13952))
  | A_13953 B_13954 (apair_intro_13 x_13955 select_13956) =>
    match x_13955, ((select_13956) true_5),
    ((sing_uniq_2‹U,L›) A_13953 x_13955 ((select_13956) true_5)),
    ((select_13956) false_6) in
      ∀ {x0_13957 : A_13953} -o
        ∀ {a0_13958 : (sing_3‹U,L› A_13953 x_13955)} -o
          {(eq_1‹U›
             A_13953 x0_13957
             ((sing_elim_1‹U,L›) A_13953 x_13955 a0_13958))} -o
            (boxed_2‹L› ((B_13954) x0_13957)) -o
              ((B_13954) ((sing_elim_1‹U,L›) A_13953 x_13955 a0_13958))
    with
    | x0_13961, a0_13962, refl_1, (box_2 m_13963) => m_13963,
  ∀ {A_13964 : U} ->
    ∀ {B_13965 : A_13964 -> L} ->
      ∀ (x_13967 : (apair_10‹U,L,L› A_13964 B_13965)) ->
        ((B_13965) ((proj1_7‹U,L,L›) A_13964 B_13965 x_13967))
)
Program.infer_tm(function proj2_13968 :
                   ∀ {A_13969 : U} ->
                     ∀ {B_13970 : A_13969 -> L} ->
                       ∀ (x_13972 :
                         (apair_10‹U,L,L› A_13969 B_13970)) ->
                         ((B_13970)
                           ((proj1_7‹U,L,L›) A_13969 B_13970 x_13972))
                 | A_13973 B_13974 (apair_intro_13 x_13975 select_13976) =>
                   match x_13975, ((select_13976) true_5),
                   ((sing_uniq_2‹U,L›)
                     A_13973 x_13975 ((select_13976) true_5)),
                   ((select_13976) false_6) in
                     ∀ {x0_13977 : A_13973} -o
                       ∀ {a0_13978 : (sing_3‹U,L› A_13973 x_13975)} -o
                         {(eq_1‹U›
                            A_13973 x0_13977
                            ((sing_elim_1‹U,L›) A_13973 x_13975 a0_13978))} -o
                           (boxed_2‹L› ((B_13974) x0_13977)) -o
                             ((B_13974)
                               ((sing_elim_1‹U,L›)
                                 A_13973 x_13975 a0_13978))
                   with
                   | x0_13981, a0_13982, refl_1, (box_2 m_13983) => m_13983)
Logical.infer_tm(∀ {A_13985 : U} ->
                   ∀ {B_13986 : A_13985 -> L} ->
                     ∀ (x_13988 : (apair_10‹U,L,L› A_13985 B_13986)) ->
                       ((B_13986)
                         ((proj1_7‹U,L,L›) A_13985 B_13986 x_13988)))
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_13990 : A_13989 -> L} ->
                   ∀ (x_13992 : (apair_10‹U,L,L› A_13989 B_13990)) ->
                     ((B_13990)
                       ((proj1_7‹U,L,L›) A_13989 B_13990 x_13992)))
Logical.infer_tm(A_13989 -> L)
Logical.infer_tm(A_13989)
Logical.infer_tm(L)
Logical.infer_tm(∀ (x_13996 : (apair_10‹U,L,L› A_13989 B_13993)) ->
                   ((B_13993) ((proj1_7‹U,L,L›) A_13989 B_13993 x_13996)))
Logical.infer_tm((apair_10‹U,L,L› A_13989 B_13993))
Logical.check_tm( A_13989, U )
Logical.infer_tm(A_13989)
Logical.assert_equal(U, U)
Logical.check_tm( B_13993, A_13989 -> L )
Logical.infer_tm(B_13993)
Logical.assert_equal(A_13989 -> L, A_13989 -> L)
Logical.infer_tm(((B_13993) ((proj1_7‹U,L,L›) A_13989 B_13993 x_13997)))
Logical.infer_tm(B_13993)
Logical.check_tm( ((proj1_7‹U,L,L›) A_13989 B_13993 x_13997), A_13989 )
Logical.infer_tm(((proj1_7‹U,L,L›) A_13989 B_13993 x_13997))
Logical.infer_tm(((proj1_7‹U,L,L›) A_13989 B_13993))
Logical.infer_tm(((proj1_7‹U,L,L›) A_13989))
Logical.infer_tm(proj1_7‹U,L,L›)
Logical.check_tm( A_13989, U )
Logical.infer_tm(A_13989)
Logical.assert_equal(U, U)
Logical.check_tm( B_13993, A_13989 -> L )
Logical.infer_tm(B_13993)
Logical.assert_equal(A_13989 -> L, A_13989 -> L)
Logical.check_tm( x_13997, (apair_10‹U,L,L› A_13989 B_13993) )
Logical.infer_tm(x_13997)
Logical.assert_equal((apair_10‹U,L,L› A_13989 B_13993), (apair_10‹U,L,L›
                                                              A_13989 B_13993))
Logical.assert_equal(A_13989, A_13989)
trans12.Program.case_intro(A_14010, U)
Logical.infer_tm(U)
trans12.Program.case_intro(B_14015, #A_14010 -> L)
Logical.infer_tm(A_14010 -> L)
Logical.infer_tm(A_14010)
Logical.infer_tm(L)
trans12.Program.case_intro(x_14024, (apair_10‹U,L,L› #A_14010 #B_14015))
Logical.infer_tm((apair_10‹U,L,L› A_14010 B_14015))
Logical.check_tm( A_14010, U )
Logical.infer_tm(A_14010)
Logical.assert_equal(U, U)
Logical.check_tm( B_14015, A_14010 -> L )
Logical.infer_tm(B_14015)
Logical.assert_equal(A_14010 -> L, A_14010 -> L)
Logical.infer_tm((apair_10‹U,L,L› A_14010 B_14015))
Logical.check_tm( A_14010, U )
Logical.infer_tm(A_14010)
Logical.assert_equal(U, U)
Logical.check_tm( B_14015, A_14010 -> L )
Logical.infer_tm(B_14015)
Logical.assert_equal(A_14010 -> L, A_14010 -> L)
trans12.Program.case_split(apairULL_35, apair_introULL_38)
Logical.infer_tm(A_14010)
Logical.infer_tm(∀ (b_14057 : bool_5) -o
                   match b_14057 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_14010 x_14043)
                   | false_6 => (boxed_2‹L› ((B_14015) x_14043)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_14059 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_14010 x_14043)
                 | false_6 => (boxed_2‹L› ((B_14015) x_14043)))
Logical.check_tm( b_14059, bool_5 )
Logical.infer_tm(b_14059)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_14010 x_14043) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_14010 x_14043), L)
Logical.check_tm( (sing_3‹U,L› A_14010 x_14043), L )
Logical.infer_tm((sing_3‹U,L› A_14010 x_14043))
Logical.check_tm( A_14010, U )
Logical.infer_tm(A_14010)
Logical.assert_equal(U, U)
Logical.check_tm( x_14043, A_14010 )
Logical.infer_tm(x_14043)
Logical.assert_equal(A_14010, A_14010)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_14015) x_14043)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_14015) x_14043)), L)
Logical.check_tm( (boxed_2‹L› ((B_14015) x_14043)), L )
Logical.infer_tm((boxed_2‹L› ((B_14015) x_14043)))
Logical.check_tm( ((B_14015) x_14043), L )
Logical.infer_tm(((B_14015) x_14043))
Logical.infer_tm(B_14015)
Logical.check_tm( x_14043, A_14010 )
Logical.infer_tm(x_14043)
Logical.assert_equal(A_14010, A_14010)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹U,L,L› #A_14010 #B_14015),
      (apair_10‹U,L,L› #A_14010 #B_14015));
    {| eq_pat?(N #A_14010, A_14006 : U)
       eq_pat?(N #B_14015, B_14007 : #A_14010 -> L)
       eq_pat?(N #x_14043, x_14008 : #A_14010)
       eq_pat?(R #select_14044, select_14009 :
         ∀ (b_14096 : bool_5) -o
           match b_14096 in bool_5 -o L with
           | true_5 => (sing_3‹U,L› #A_14010 #x_14043)
           | false_6 => (boxed_2‹L› ((#B_14015) #x_14043))) ::: [] =>?
         match #x_14008, ((#select_14009) true_5),
         ((sing_uniq_2‹U,L›) #A_14006 #x_14008 ((#select_14009) true_5)),
         ((#select_14009) false_6) in
           ∀ {x0_14098 : #A_14006} -o
             ∀ {a0_14099 : (sing_3‹U,L› #A_14006 #x_14008)} -o
               {(eq_1‹U›
                  #A_14006 x0_14098
                  ((sing_elim_1‹U,L›) #A_14006 #x_14008 a0_14099))} -o
                 (boxed_2‹L› ((#B_14007) x0_14098)) -o
                   ((#B_14007)
                     ((sing_elim_1‹U,L›) #A_14006 #x_14008 a0_14099))
         with
         | x0_14102, a0_14103, refl_1, (box_2 m_14104) => m_14104
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_14010, A_14006 : U)
  eq_pat?(N #B_14015, B_14007 : #A_14010 -> L)
  eq_pat?(N #x_14043, x_14008 : #A_14010)
  eq_pat?(R #select_14044, select_14009 :
    ∀ (b_14106 : bool_5) -o
      match b_14106 in bool_5 -o L with
      | true_5 => (sing_3‹U,L› #A_14010 #x_14043)
      | false_6 => (boxed_2‹L› ((#B_14015) #x_14043)))
)
unify_global(
  eq_term?( (apair_10‹U,L,L› #A_14010 #B_14015),
    (apair_10‹U,L,L› #A_14010 #B_14015))
)
simpl_pprbm ~expand:false( #A_14010, #A_14006)
simpl_pprbm ~expand:false( #B_14015, #B_14007)
simpl_pprbm ~expand:false( #x_14043, #x_14008)
simpl_pprbm ~expand:false( #select_14044, #select_14009)
simpl_pprbm ~expand:false( (apair_10‹U,L,L› #A_14010 #B_14015),
  (apair_10‹U,L,L› #A_14010 #B_14015))
simpl_pprbm ~expand:false( #A_14010, #A_14010)
simpl_pprbm ~expand:false( #B_14015, #B_14015)
case_coverage_ok(
  match x_14043, ((select_14044) true_5),
  ((sing_uniq_2‹U,L›) A_14010 x_14043 ((select_14044) true_5)),
  ((select_14044) false_6) in
    ∀ {x0_14122 : A_14010} -o
      ∀ {a0_14123 : (sing_3‹U,L› A_14010 x_14043)} -o
        {(eq_1‹U›
           A_14010 x0_14122 ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14123))} -o
          (boxed_2‹L› ((B_14015) x0_14122)) -o
            ((B_14015) ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14123))
  with
  | x0_14126, a0_14127, refl_1, (box_2 m_14128) => m_14128,
  ((B_14015)
    ((proj1_7‹U,L,L›)
      A_14010 B_14015
      (apair_intro_13‹U,L,L› A_14010 B_14015 x_14043 select_14044))))
Program.check_tm(
  match x_14043, ((select_14044) true_5),
  ((sing_uniq_2‹U,L›) A_14010 x_14043 ((select_14044) true_5)),
  ((select_14044) false_6) in
    ∀ {x0_14129 : A_14010} -o
      ∀ {a0_14130 : (sing_3‹U,L› A_14010 x_14043)} -o
        {(eq_1‹U›
           A_14010 x0_14129 ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14130))} -o
          (boxed_2‹L› ((B_14015) x0_14129)) -o
            ((B_14015) ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14130))
  with
  | x0_14133, a0_14134, refl_1, (box_2 m_14135) => m_14135,
  ((B_14015)
    ((proj1_7‹U,L,L›)
      A_14010 B_14015
      (apair_intro_13‹U,L,L› A_14010 B_14015 x_14043 select_14044)))
)
Program.infer_tm(match x_14043, ((select_14044) true_5),
                 ((sing_uniq_2‹U,L›)
                   A_14010 x_14043 ((select_14044) true_5)),
                 ((select_14044) false_6) in
                   ∀ {x0_14136 : A_14010} -o
                     ∀ {a0_14137 : (sing_3‹U,L› A_14010 x_14043)} -o
                       {(eq_1‹U›
                          A_14010 x0_14136
                          ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14137))} -o
                         (boxed_2‹L› ((B_14015) x0_14136)) -o
                           ((B_14015)
                             ((sing_elim_1‹U,L›)
                               A_14010 x_14043 a0_14137))
                 with
                 | x0_14140, a0_14141, refl_1, (box_2 m_14142) => m_14142)
Program.infer_motive_N(x_14043, A_14010)
Logical.check_tm( x_14043, A_14010 )
Logical.infer_tm(x_14043)
Logical.assert_equal(A_14010, A_14010)
Program.infer_motive_N_ok(x_14043, A_14010)
Program.infer_motive_N(((select_14044) true_5), (sing_3‹U,L›
                                                  A_14010 x_14043))
Logical.check_tm( ((select_14044) true_5), (sing_3‹U,L› A_14010 x_14043)
)
Logical.infer_tm(((select_14044) true_5))
Logical.infer_tm(select_14044)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_14010 x_14043), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_14010 x_14043)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_14015)
                                                              x_14043)))
Program.infer_motive_N_ok(((select_14044) true_5), (sing_3‹U,L›
                                                     A_14010 x_14043))
Program.infer_motive_N(((sing_uniq_2‹U,L›)
                         A_14010 x_14043 ((select_14044) true_5)), (eq_1‹U›
                                                                    A_14010
                                                                    x_14043
                                                                    ((sing_elim_1‹U,L›)
                                                                    A_14010
                                                                    x_14043
                                                                    ((select_14044)
                                                                    true_5))))
Logical.check_tm(
  ((sing_uniq_2‹U,L›) A_14010 x_14043 ((select_14044) true_5)),
  (eq_1‹U›
    A_14010 x_14043
    ((sing_elim_1‹U,L›) A_14010 x_14043 ((select_14044) true_5)))
)
Logical.infer_tm(((sing_uniq_2‹U,L›)
                   A_14010 x_14043 ((select_14044) true_5)))
Logical.infer_tm(((sing_uniq_2‹U,L›) A_14010 x_14043))
Logical.infer_tm(((sing_uniq_2‹U,L›) A_14010))
Logical.infer_tm(sing_uniq_2‹U,L›)
Logical.check_tm( A_14010, U )
Logical.infer_tm(A_14010)
Logical.assert_equal(U, U)
Logical.check_tm( x_14043, A_14010 )
Logical.infer_tm(x_14043)
Logical.assert_equal(A_14010, A_14010)
Logical.check_tm( ((select_14044) true_5), (sing_3‹U,L› A_14010 x_14043)
)
Logical.infer_tm(((select_14044) true_5))
Logical.infer_tm(select_14044)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_14010 x_14043), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_14010 x_14043)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_14015)
                                                              x_14043)))
Logical.assert_equal((eq_1‹U›
                       A_14010 x_14043
                       ((sing_elim_1‹U,L›)
                         A_14010 x_14043 ((select_14044) true_5))), (eq_1‹U›
                                                                    A_14010
                                                                    x_14043
                                                                    ((sing_elim_1‹U,L›)
                                                                    A_14010
                                                                    x_14043
                                                                    ((select_14044)
                                                                    true_5))))
Program.infer_motive_N_ok(((sing_uniq_2‹U,L›)
                            A_14010 x_14043 ((select_14044) true_5)), 
(eq_1‹U›
  A_14010 x_14043
  ((sing_elim_1‹U,L›) A_14010 x_14043 ((select_14044) true_5))))
Program.infer_motive_R(((select_14044) false_6), (boxed_2‹L›
                                                   ((B_14015) x_14043)))
Program.check_tm( ((select_14044) false_6),
  (boxed_2‹L› ((B_14015) x_14043))
)
Program.infer_tm(((select_14044) false_6))
Program.infer_tm(select_14044)
Program.check_tm( false_6, bool_5 )
Program.infer_tm(false_6)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((boxed_2‹L› ((B_14015) x_14043)), match false_6 in
                                                             bool_5 -o L
                                                           with
                                                           | true_5 =>
                                                             (sing_3‹U,L›
                                                               A_14010
                                                               x_14043)
                                                           | false_6 =>
                                                             (boxed_2‹L›
                                                               ((B_14015)
                                                                 x_14043)))
Program.infer_motive_R_ok(((select_14044) false_6), (boxed_2‹L›
                                                      ((B_14015) x_14043)))
Program.infer_motive_ok
trans12.Program.case_intro(x0_14149, A_14010)
Logical.infer_tm(A_14010)
trans12.Program.case_intro(a0_14157, (sing_3‹U,L› A_14010 x_14043))
Logical.infer_tm((sing_3‹U,L› A_14010 x_14043))
Logical.check_tm( A_14010, U )
Logical.infer_tm(A_14010)
Logical.assert_equal(U, U)
Logical.check_tm( x_14043, A_14010 )
Logical.infer_tm(x_14043)
Logical.assert_equal(A_14010, A_14010)
trans12.Program.case_intro(__14165, (eq_1‹U›
                                      A_14010 #x0_14149
                                      ((sing_elim_1‹U,L›)
                                        A_14010 x_14043 #a0_14157)))
Logical.infer_tm((eq_1‹U›
                   A_14010 x0_14149
                   ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14157)))
Logical.check_tm( A_14010, U )
Logical.infer_tm(A_14010)
Logical.assert_equal(U, U)
Logical.check_tm( x0_14149, A_14010 )
Logical.infer_tm(x0_14149)
Logical.assert_equal(A_14010, A_14010)
Logical.check_tm( ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14157), 
A_14010 )
Logical.infer_tm(((sing_elim_1‹U,L›) A_14010 x_14043 a0_14157))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14010 x_14043))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14010))
Logical.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_14010, U )
Logical.infer_tm(A_14010)
Logical.assert_equal(U, U)
Logical.check_tm( x_14043, A_14010 )
Logical.infer_tm(x_14043)
Logical.assert_equal(A_14010, A_14010)
Logical.check_tm( a0_14157, (sing_3‹U,L› A_14010 x_14043) )
Logical.infer_tm(a0_14157)
Logical.assert_equal((sing_3‹U,L› A_14010 x_14043), (sing_3‹U,L›
                                                          A_14010 x_14043))
Logical.assert_equal(A_14010, A_14010)
trans12.Program.case_intro(__14173, (boxed_2‹L› ((B_14015) #x0_14149)))
Logical.infer_tm((boxed_2‹L› ((B_14015) x0_14149)))
Logical.check_tm( ((B_14015) x0_14149), L )
Logical.infer_tm(((B_14015) x0_14149))
Logical.infer_tm(B_14015)
Logical.check_tm( x0_14149, A_14010 )
Logical.infer_tm(x0_14149)
Logical.assert_equal(A_14010, A_14010)
Logical.assert_equal(L, L)
Logical.infer_tm((eq_1‹U›
                   A_14010 x0_14149
                   ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14157)))
Logical.check_tm( A_14010, U )
Logical.infer_tm(A_14010)
Logical.assert_equal(U, U)
Logical.check_tm( x0_14149, A_14010 )
Logical.infer_tm(x0_14149)
Logical.assert_equal(A_14010, A_14010)
Logical.check_tm( ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14157), 
A_14010 )
Logical.infer_tm(((sing_elim_1‹U,L›) A_14010 x_14043 a0_14157))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14010 x_14043))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14010))
Logical.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_14010, U )
Logical.infer_tm(A_14010)
Logical.assert_equal(U, U)
Logical.check_tm( x_14043, A_14010 )
Logical.infer_tm(x_14043)
Logical.assert_equal(A_14010, A_14010)
Logical.check_tm( a0_14157, (sing_3‹U,L› A_14010 x_14043) )
Logical.infer_tm(a0_14157)
Logical.assert_equal((sing_3‹U,L› A_14010 x_14043), (sing_3‹U,L›
                                                          A_14010 x_14043))
Logical.assert_equal(A_14010, A_14010)
trans12.Program.case_split(eqU_12, reflU_15)
Logical.infer_tm((boxed_2‹L› ((B_14015) x0_14149)))
Logical.check_tm( ((B_14015) x0_14149), L )
Logical.infer_tm(((B_14015) x0_14149))
Logical.infer_tm(B_14015)
Logical.check_tm( x0_14149, A_14010 )
Logical.infer_tm(x0_14149)
Logical.assert_equal(A_14010, A_14010)
Logical.assert_equal(L, L)
trans12.Program.case_split(boxedL_13, boxL_16)
Logical.infer_tm(((B_14015) x0_14149))
Logical.infer_tm(B_14015)
Logical.check_tm( x0_14149, A_14010 )
Logical.infer_tm(x0_14149)
Logical.assert_equal(A_14010, A_14010)
case_coverage{|
  prblm {|
    eq_term?( (boxed_2‹L› ((B_14015) #x0_14149)),
      (boxed_2‹L› ((B_14015) #x0_14149)))
    eq_term?(
      (eq_1‹U›
        A_14010 #x0_14149 ((sing_elim_1‹U,L›) A_14010 x_14043 #a0_14157)),
      (eq_1‹U› A_14010 #x0_14149 #x0_14149));
    {| eq_pat?(N #x0_14149, x0_14146 : A_14010)
       eq_pat?(N #a0_14157, a0_14147 : (sing_3‹U,L› A_14010 x_14043))
       eq_pat?(R #m_14202, m_14148 : ((B_14015) #x0_14149)) ::: [] =>?
         #m_14148
    |}
  |}
|}
unify_local(
  eq_pat?(N #x0_14149, x0_14146 : A_14010)
  eq_pat?(N #a0_14157, a0_14147 : (sing_3‹U,L› A_14010 x_14043))
  eq_pat?(R #m_14202, m_14148 : ((B_14015) #x0_14149))
)
unify_global(
  eq_term?( (boxed_2‹L› ((B_14015) #x0_14149)),
    (boxed_2‹L› ((B_14015) #x0_14149)))
  eq_term?(
    (eq_1‹U›
      A_14010 #x0_14149 ((sing_elim_1‹U,L›) A_14010 x_14043 #a0_14157)),
    (eq_1‹U› A_14010 #x0_14149 #x0_14149))
)
simpl_pprbm ~expand:false( #x0_14149, #x0_14146)
simpl_pprbm ~expand:false( #a0_14157, #a0_14147)
simpl_pprbm ~expand:false( #m_14202, #m_14148)
simpl_pprbm ~expand:false( (boxed_2‹L› ((B_14015) #x0_14149)),
  (boxed_2‹L› ((B_14015) #x0_14149)))
simpl_pprbm ~expand:false( ((B_14015) #x0_14149), ((B_14015) #x0_14149))
simpl_pprbm ~expand:false( B_14015, B_14015)
simpl_pprbm ~expand:false( #x0_14149, #x0_14149)
simpl_pprbm ~expand:false(
  (eq_1‹U›
    A_14010 #x0_14149 ((sing_elim_1‹U,L›) A_14010 x_14043 #a0_14157)),
  (eq_1‹U› A_14010 #x0_14149 #x0_14149))
simpl_pprbm ~expand:false( A_14010, A_14010)
simpl_pprbm ~expand:false( #x0_14149, #x0_14149)
simpl_pprbm ~expand:false(
  ((sing_elim_1‹U,L›) A_14010 x_14043 #a0_14157), #x0_14149)
case_coverage_ok( m_14202,
  ((B_14015) ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14157)))
Program.check_tm( m_14202,
  ((B_14015) ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14157))
)
Program.infer_tm(m_14202)
Logical.assert_equal(((B_14015)
                       ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14157)), 
((B_14015) ((sing_elim_1‹U,L›) A_14010 x_14043 a0_14157)))
trans12.Program.case_introed((boxed_2‹L› ((B_14015) #x0_14149)))
trans12.Program.case_introed((eq_1‹U›
                               A_14010 #x0_14149
                               ((sing_elim_1‹U,L›)
                                 A_14010 x_14043 #a0_14157)))
trans12.Program.case_introed((sing_3‹U,L› A_14010 x_14043))
trans12.Program.case_introed(A_14010)
Logical.assert_equal(((B_14015)
                       ((proj1_7‹U,L,L›)
                         A_14010 B_14015
                         (apair_intro_13‹U,L,L›
                           A_14010 B_14015 x_14043 select_14044))), ((B_14015)
                                                                    ((
                                                                    function sing_elim_14224 :
                                                                    ∀ {A_14225 :
                                                                    U} ->
                                                                    ∀ {x_14226 :
                                                                    A_14225} ->
                                                                    (sing_3‹U,L›
                                                                    A_14225
                                                                    x_14226) ->
                                                                    A_14225
                                                                    | 
                                                                    A_14228 x_14229 (just_3 m_14230) =>
                                                                    m_14230)
                                                                    A_14010
                                                                    x_14043
                                                                    ((select_14044)
                                                                    true_5))))
trans12.Program.case_introed((apair_10‹U,L,L› #A_14010 #B_14015))
trans12.Program.case_introed(#A_14010 -> L)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_14232 : U} ->
                       ∀ {B_14233 : A_14232 -> L} ->
                         ∀ (x_14235 :
                           (apair_10‹U,L,L› A_14232 B_14233)) ->
                           ((B_14233)
                             ((proj1_7‹U,L,L›) A_14232 B_14233 x_14235)), 
∀ {A_14236 : U} ->
  ∀ {B_14237 : A_14236 -> L} ->
    ∀ (x_14239 : (apair_10‹U,L,L› A_14236 B_14237)) ->
      ((B_14237) ((proj1_7‹U,L,L›) A_14236 B_14237 x_14239)))
Logical.infer_tm(∀ {A_14244 : U} ->
                   ∀ {B_14245 : A_14244 -> L} ->
                     ∀ (x_14247 : (apair_10‹U,L,U› A_14244 B_14245)) ->
                       ((B_14245)
                         ((proj1_7‹U,L,U›) A_14244 B_14245 x_14247)))
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_14249 : A_14248 -> L} ->
                   ∀ (x_14251 : (apair_10‹U,L,U› A_14248 B_14249)) ->
                     ((B_14249)
                       ((proj1_7‹U,L,U›) A_14248 B_14249 x_14251)))
Logical.infer_tm(A_14248 -> L)
Logical.infer_tm(A_14248)
Logical.infer_tm(L)
Logical.infer_tm(∀ (x_14255 : (apair_10‹U,L,U› A_14248 B_14252)) ->
                   ((B_14252) ((proj1_7‹U,L,U›) A_14248 B_14252 x_14255)))
Logical.infer_tm((apair_10‹U,L,U› A_14248 B_14252))
Logical.check_tm( A_14248, U )
Logical.infer_tm(A_14248)
Logical.assert_equal(U, U)
Logical.check_tm( B_14252, A_14248 -> L )
Logical.infer_tm(B_14252)
Logical.assert_equal(A_14248 -> L, A_14248 -> L)
Logical.infer_tm(((B_14252) ((proj1_7‹U,L,U›) A_14248 B_14252 x_14256)))
Logical.infer_tm(B_14252)
Logical.check_tm( ((proj1_7‹U,L,U›) A_14248 B_14252 x_14256), A_14248 )
Logical.infer_tm(((proj1_7‹U,L,U›) A_14248 B_14252 x_14256))
Logical.infer_tm(((proj1_7‹U,L,U›) A_14248 B_14252))
Logical.infer_tm(((proj1_7‹U,L,U›) A_14248))
Logical.infer_tm(proj1_7‹U,L,U›)
Logical.check_tm( A_14248, U )
Logical.infer_tm(A_14248)
Logical.assert_equal(U, U)
Logical.check_tm( B_14252, A_14248 -> L )
Logical.infer_tm(B_14252)
Logical.assert_equal(A_14248 -> L, A_14248 -> L)
Logical.check_tm( x_14256, (apair_10‹U,L,U› A_14248 B_14252) )
Logical.infer_tm(x_14256)
Logical.assert_equal((apair_10‹U,L,U› A_14248 B_14252), (apair_10‹U,L,U›
                                                              A_14248 B_14252))
Logical.assert_equal(A_14248, A_14248)
Program.check_tm(
  function proj2_14265 :
    ∀ {A_14266 : U} ->
      ∀ {B_14267 : A_14266 -> L} ->
        ∀ (x_14269 : (apair_10‹U,L,U› A_14266 B_14267)) ->
          ((B_14267) ((proj1_7‹U,L,U›) A_14266 B_14267 x_14269))
  | A_14270 B_14271 (apair_intro_13 x_14272 select_14273) =>
    match x_14272, ((select_14273) true_5),
    ((sing_uniq_2‹U,L›) A_14270 x_14272 ((select_14273) true_5)),
    ((select_14273) false_6) in
      ∀ {x0_14274 : A_14270} -o
        ∀ {a0_14275 : (sing_3‹U,L› A_14270 x_14272)} -o
          {(eq_1‹U›
             A_14270 x0_14274
             ((sing_elim_1‹U,L›) A_14270 x_14272 a0_14275))} -o
            (boxed_2‹L› ((B_14271) x0_14274)) -o
              ((B_14271) ((sing_elim_1‹U,L›) A_14270 x_14272 a0_14275))
    with
    | x0_14278, a0_14279, refl_1, (box_2 m_14280) => m_14280,
  ∀ {A_14281 : U} ->
    ∀ {B_14282 : A_14281 -> L} ->
      ∀ (x_14284 : (apair_10‹U,L,U› A_14281 B_14282)) ->
        ((B_14282) ((proj1_7‹U,L,U›) A_14281 B_14282 x_14284))
)
Program.infer_tm(function proj2_14285 :
                   ∀ {A_14286 : U} ->
                     ∀ {B_14287 : A_14286 -> L} ->
                       ∀ (x_14289 :
                         (apair_10‹U,L,U› A_14286 B_14287)) ->
                         ((B_14287)
                           ((proj1_7‹U,L,U›) A_14286 B_14287 x_14289))
                 | A_14290 B_14291 (apair_intro_13 x_14292 select_14293) =>
                   match x_14292, ((select_14293) true_5),
                   ((sing_uniq_2‹U,L›)
                     A_14290 x_14292 ((select_14293) true_5)),
                   ((select_14293) false_6) in
                     ∀ {x0_14294 : A_14290} -o
                       ∀ {a0_14295 : (sing_3‹U,L› A_14290 x_14292)} -o
                         {(eq_1‹U›
                            A_14290 x0_14294
                            ((sing_elim_1‹U,L›) A_14290 x_14292 a0_14295))} -o
                           (boxed_2‹L› ((B_14291) x0_14294)) -o
                             ((B_14291)
                               ((sing_elim_1‹U,L›)
                                 A_14290 x_14292 a0_14295))
                   with
                   | x0_14298, a0_14299, refl_1, (box_2 m_14300) => m_14300)
Logical.infer_tm(∀ {A_14302 : U} ->
                   ∀ {B_14303 : A_14302 -> L} ->
                     ∀ (x_14305 : (apair_10‹U,L,U› A_14302 B_14303)) ->
                       ((B_14303)
                         ((proj1_7‹U,L,U›) A_14302 B_14303 x_14305)))
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_14307 : A_14306 -> L} ->
                   ∀ (x_14309 : (apair_10‹U,L,U› A_14306 B_14307)) ->
                     ((B_14307)
                       ((proj1_7‹U,L,U›) A_14306 B_14307 x_14309)))
Logical.infer_tm(A_14306 -> L)
Logical.infer_tm(A_14306)
Logical.infer_tm(L)
Logical.infer_tm(∀ (x_14313 : (apair_10‹U,L,U› A_14306 B_14310)) ->
                   ((B_14310) ((proj1_7‹U,L,U›) A_14306 B_14310 x_14313)))
Logical.infer_tm((apair_10‹U,L,U› A_14306 B_14310))
Logical.check_tm( A_14306, U )
Logical.infer_tm(A_14306)
Logical.assert_equal(U, U)
Logical.check_tm( B_14310, A_14306 -> L )
Logical.infer_tm(B_14310)
Logical.assert_equal(A_14306 -> L, A_14306 -> L)
Logical.infer_tm(((B_14310) ((proj1_7‹U,L,U›) A_14306 B_14310 x_14314)))
Logical.infer_tm(B_14310)
Logical.check_tm( ((proj1_7‹U,L,U›) A_14306 B_14310 x_14314), A_14306 )
Logical.infer_tm(((proj1_7‹U,L,U›) A_14306 B_14310 x_14314))
Logical.infer_tm(((proj1_7‹U,L,U›) A_14306 B_14310))
Logical.infer_tm(((proj1_7‹U,L,U›) A_14306))
Logical.infer_tm(proj1_7‹U,L,U›)
Logical.check_tm( A_14306, U )
Logical.infer_tm(A_14306)
Logical.assert_equal(U, U)
Logical.check_tm( B_14310, A_14306 -> L )
Logical.infer_tm(B_14310)
Logical.assert_equal(A_14306 -> L, A_14306 -> L)
Logical.check_tm( x_14314, (apair_10‹U,L,U› A_14306 B_14310) )
Logical.infer_tm(x_14314)
Logical.assert_equal((apair_10‹U,L,U› A_14306 B_14310), (apair_10‹U,L,U›
                                                              A_14306 B_14310))
Logical.assert_equal(A_14306, A_14306)
trans12.Program.case_intro(A_14327, U)
Logical.infer_tm(U)
trans12.Program.case_intro(B_14332, #A_14327 -> L)
Logical.infer_tm(A_14327 -> L)
Logical.infer_tm(A_14327)
Logical.infer_tm(L)
trans12.Program.case_intro(x_14341, (apair_10‹U,L,U› #A_14327 #B_14332))
Logical.infer_tm((apair_10‹U,L,U› A_14327 B_14332))
Logical.check_tm( A_14327, U )
Logical.infer_tm(A_14327)
Logical.assert_equal(U, U)
Logical.check_tm( B_14332, A_14327 -> L )
Logical.infer_tm(B_14332)
Logical.assert_equal(A_14327 -> L, A_14327 -> L)
Logical.infer_tm((apair_10‹U,L,U› A_14327 B_14332))
Logical.check_tm( A_14327, U )
Logical.infer_tm(A_14327)
Logical.assert_equal(U, U)
Logical.check_tm( B_14332, A_14327 -> L )
Logical.infer_tm(B_14332)
Logical.assert_equal(A_14327 -> L, A_14327 -> L)
trans12.Program.case_split(apairULU_36, apair_introULU_39)
Logical.infer_tm(A_14327)
Logical.infer_tm(∀ (b_14374 : bool_5) ->
                   match b_14374 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_14327 x_14360)
                   | false_6 => (boxed_2‹L› ((B_14332) x_14360)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_14376 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_14327 x_14360)
                 | false_6 => (boxed_2‹L› ((B_14332) x_14360)))
Logical.check_tm( b_14376, bool_5 )
Logical.infer_tm(b_14376)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_14327 x_14360) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_14327 x_14360), L)
Logical.check_tm( (sing_3‹U,L› A_14327 x_14360), L )
Logical.infer_tm((sing_3‹U,L› A_14327 x_14360))
Logical.check_tm( A_14327, U )
Logical.infer_tm(A_14327)
Logical.assert_equal(U, U)
Logical.check_tm( x_14360, A_14327 )
Logical.infer_tm(x_14360)
Logical.assert_equal(A_14327, A_14327)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹L› ((B_14332) x_14360)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹L› ((B_14332) x_14360)), L)
Logical.check_tm( (boxed_2‹L› ((B_14332) x_14360)), L )
Logical.infer_tm((boxed_2‹L› ((B_14332) x_14360)))
Logical.check_tm( ((B_14332) x_14360), L )
Logical.infer_tm(((B_14332) x_14360))
Logical.infer_tm(B_14332)
Logical.check_tm( x_14360, A_14327 )
Logical.infer_tm(x_14360)
Logical.assert_equal(A_14327, A_14327)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹U,L,U› #A_14327 #B_14332),
      (apair_10‹U,L,U› #A_14327 #B_14332));
    {| eq_pat?(N #A_14327, A_14323 : U)
       eq_pat?(N #B_14332, B_14324 : #A_14327 -> L)
       eq_pat?(N #x_14360, x_14325 : #A_14327)
       eq_pat?(R #select_14361, select_14326 :
         ∀ (b_14413 : bool_5) ->
           match b_14413 in bool_5 -o L with
           | true_5 => (sing_3‹U,L› #A_14327 #x_14360)
           | false_6 => (boxed_2‹L› ((#B_14332) #x_14360))) ::: [] =>?
         match #x_14325, ((#select_14326) true_5),
         ((sing_uniq_2‹U,L›) #A_14323 #x_14325 ((#select_14326) true_5)),
         ((#select_14326) false_6) in
           ∀ {x0_14415 : #A_14323} -o
             ∀ {a0_14416 : (sing_3‹U,L› #A_14323 #x_14325)} -o
               {(eq_1‹U›
                  #A_14323 x0_14415
                  ((sing_elim_1‹U,L›) #A_14323 #x_14325 a0_14416))} -o
                 (boxed_2‹L› ((#B_14324) x0_14415)) -o
                   ((#B_14324)
                     ((sing_elim_1‹U,L›) #A_14323 #x_14325 a0_14416))
         with
         | x0_14419, a0_14420, refl_1, (box_2 m_14421) => m_14421
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_14327, A_14323 : U)
  eq_pat?(N #B_14332, B_14324 : #A_14327 -> L)
  eq_pat?(N #x_14360, x_14325 : #A_14327)
  eq_pat?(R #select_14361, select_14326 :
    ∀ (b_14423 : bool_5) ->
      match b_14423 in bool_5 -o L with
      | true_5 => (sing_3‹U,L› #A_14327 #x_14360)
      | false_6 => (boxed_2‹L› ((#B_14332) #x_14360)))
)
unify_global(
  eq_term?( (apair_10‹U,L,U› #A_14327 #B_14332),
    (apair_10‹U,L,U› #A_14327 #B_14332))
)
simpl_pprbm ~expand:false( #A_14327, #A_14323)
simpl_pprbm ~expand:false( #B_14332, #B_14324)
simpl_pprbm ~expand:false( #x_14360, #x_14325)
simpl_pprbm ~expand:false( #select_14361, #select_14326)
simpl_pprbm ~expand:false( (apair_10‹U,L,U› #A_14327 #B_14332),
  (apair_10‹U,L,U› #A_14327 #B_14332))
simpl_pprbm ~expand:false( #A_14327, #A_14327)
simpl_pprbm ~expand:false( #B_14332, #B_14332)
case_coverage_ok(
  match x_14360, ((select_14361) true_5),
  ((sing_uniq_2‹U,L›) A_14327 x_14360 ((select_14361) true_5)),
  ((select_14361) false_6) in
    ∀ {x0_14439 : A_14327} -o
      ∀ {a0_14440 : (sing_3‹U,L› A_14327 x_14360)} -o
        {(eq_1‹U›
           A_14327 x0_14439 ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14440))} -o
          (boxed_2‹L› ((B_14332) x0_14439)) -o
            ((B_14332) ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14440))
  with
  | x0_14443, a0_14444, refl_1, (box_2 m_14445) => m_14445,
  ((B_14332)
    ((proj1_7‹U,L,U›)
      A_14327 B_14332
      (apair_intro_13‹U,L,U› A_14327 B_14332 x_14360 select_14361))))
Program.check_tm(
  match x_14360, ((select_14361) true_5),
  ((sing_uniq_2‹U,L›) A_14327 x_14360 ((select_14361) true_5)),
  ((select_14361) false_6) in
    ∀ {x0_14446 : A_14327} -o
      ∀ {a0_14447 : (sing_3‹U,L› A_14327 x_14360)} -o
        {(eq_1‹U›
           A_14327 x0_14446 ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14447))} -o
          (boxed_2‹L› ((B_14332) x0_14446)) -o
            ((B_14332) ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14447))
  with
  | x0_14450, a0_14451, refl_1, (box_2 m_14452) => m_14452,
  ((B_14332)
    ((proj1_7‹U,L,U›)
      A_14327 B_14332
      (apair_intro_13‹U,L,U› A_14327 B_14332 x_14360 select_14361)))
)
Program.infer_tm(match x_14360, ((select_14361) true_5),
                 ((sing_uniq_2‹U,L›)
                   A_14327 x_14360 ((select_14361) true_5)),
                 ((select_14361) false_6) in
                   ∀ {x0_14453 : A_14327} -o
                     ∀ {a0_14454 : (sing_3‹U,L› A_14327 x_14360)} -o
                       {(eq_1‹U›
                          A_14327 x0_14453
                          ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14454))} -o
                         (boxed_2‹L› ((B_14332) x0_14453)) -o
                           ((B_14332)
                             ((sing_elim_1‹U,L›)
                               A_14327 x_14360 a0_14454))
                 with
                 | x0_14457, a0_14458, refl_1, (box_2 m_14459) => m_14459)
Program.infer_motive_N(x_14360, A_14327)
Logical.check_tm( x_14360, A_14327 )
Logical.infer_tm(x_14360)
Logical.assert_equal(A_14327, A_14327)
Program.infer_motive_N_ok(x_14360, A_14327)
Program.infer_motive_N(((select_14361) true_5), (sing_3‹U,L›
                                                  A_14327 x_14360))
Logical.check_tm( ((select_14361) true_5), (sing_3‹U,L› A_14327 x_14360)
)
Logical.infer_tm(((select_14361) true_5))
Logical.infer_tm(select_14361)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_14327 x_14360), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_14327 x_14360)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_14332)
                                                              x_14360)))
Program.infer_motive_N_ok(((select_14361) true_5), (sing_3‹U,L›
                                                     A_14327 x_14360))
Program.infer_motive_N(((sing_uniq_2‹U,L›)
                         A_14327 x_14360 ((select_14361) true_5)), (eq_1‹U›
                                                                    A_14327
                                                                    x_14360
                                                                    ((sing_elim_1‹U,L›)
                                                                    A_14327
                                                                    x_14360
                                                                    ((select_14361)
                                                                    true_5))))
Logical.check_tm(
  ((sing_uniq_2‹U,L›) A_14327 x_14360 ((select_14361) true_5)),
  (eq_1‹U›
    A_14327 x_14360
    ((sing_elim_1‹U,L›) A_14327 x_14360 ((select_14361) true_5)))
)
Logical.infer_tm(((sing_uniq_2‹U,L›)
                   A_14327 x_14360 ((select_14361) true_5)))
Logical.infer_tm(((sing_uniq_2‹U,L›) A_14327 x_14360))
Logical.infer_tm(((sing_uniq_2‹U,L›) A_14327))
Logical.infer_tm(sing_uniq_2‹U,L›)
Logical.check_tm( A_14327, U )
Logical.infer_tm(A_14327)
Logical.assert_equal(U, U)
Logical.check_tm( x_14360, A_14327 )
Logical.infer_tm(x_14360)
Logical.assert_equal(A_14327, A_14327)
Logical.check_tm( ((select_14361) true_5), (sing_3‹U,L› A_14327 x_14360)
)
Logical.infer_tm(((select_14361) true_5))
Logical.infer_tm(select_14361)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_14327 x_14360), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_14327 x_14360)
                                                        | false_6 =>
                                                          (boxed_2‹L›
                                                            ((B_14332)
                                                              x_14360)))
Logical.assert_equal((eq_1‹U›
                       A_14327 x_14360
                       ((sing_elim_1‹U,L›)
                         A_14327 x_14360 ((select_14361) true_5))), (eq_1‹U›
                                                                    A_14327
                                                                    x_14360
                                                                    ((sing_elim_1‹U,L›)
                                                                    A_14327
                                                                    x_14360
                                                                    ((select_14361)
                                                                    true_5))))
Program.infer_motive_N_ok(((sing_uniq_2‹U,L›)
                            A_14327 x_14360 ((select_14361) true_5)), 
(eq_1‹U›
  A_14327 x_14360
  ((sing_elim_1‹U,L›) A_14327 x_14360 ((select_14361) true_5))))
Program.infer_motive_R(((select_14361) false_6), (boxed_2‹L›
                                                   ((B_14332) x_14360)))
Program.check_tm( ((select_14361) false_6),
  (boxed_2‹L› ((B_14332) x_14360))
)
Program.infer_tm(((select_14361) false_6))
Program.infer_tm(select_14361)
Program.check_tm( false_6, bool_5 )
Program.infer_tm(false_6)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((boxed_2‹L› ((B_14332) x_14360)), match false_6 in
                                                             bool_5 -o L
                                                           with
                                                           | true_5 =>
                                                             (sing_3‹U,L›
                                                               A_14327
                                                               x_14360)
                                                           | false_6 =>
                                                             (boxed_2‹L›
                                                               ((B_14332)
                                                                 x_14360)))
Program.infer_motive_R_ok(((select_14361) false_6), (boxed_2‹L›
                                                      ((B_14332) x_14360)))
Program.infer_motive_ok
trans12.Program.case_intro(x0_14466, A_14327)
Logical.infer_tm(A_14327)
trans12.Program.case_intro(a0_14474, (sing_3‹U,L› A_14327 x_14360))
Logical.infer_tm((sing_3‹U,L› A_14327 x_14360))
Logical.check_tm( A_14327, U )
Logical.infer_tm(A_14327)
Logical.assert_equal(U, U)
Logical.check_tm( x_14360, A_14327 )
Logical.infer_tm(x_14360)
Logical.assert_equal(A_14327, A_14327)
trans12.Program.case_intro(__14482, (eq_1‹U›
                                      A_14327 #x0_14466
                                      ((sing_elim_1‹U,L›)
                                        A_14327 x_14360 #a0_14474)))
Logical.infer_tm((eq_1‹U›
                   A_14327 x0_14466
                   ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14474)))
Logical.check_tm( A_14327, U )
Logical.infer_tm(A_14327)
Logical.assert_equal(U, U)
Logical.check_tm( x0_14466, A_14327 )
Logical.infer_tm(x0_14466)
Logical.assert_equal(A_14327, A_14327)
Logical.check_tm( ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14474), 
A_14327 )
Logical.infer_tm(((sing_elim_1‹U,L›) A_14327 x_14360 a0_14474))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14327 x_14360))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14327))
Logical.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_14327, U )
Logical.infer_tm(A_14327)
Logical.assert_equal(U, U)
Logical.check_tm( x_14360, A_14327 )
Logical.infer_tm(x_14360)
Logical.assert_equal(A_14327, A_14327)
Logical.check_tm( a0_14474, (sing_3‹U,L› A_14327 x_14360) )
Logical.infer_tm(a0_14474)
Logical.assert_equal((sing_3‹U,L› A_14327 x_14360), (sing_3‹U,L›
                                                          A_14327 x_14360))
Logical.assert_equal(A_14327, A_14327)
trans12.Program.case_intro(__14490, (boxed_2‹L› ((B_14332) #x0_14466)))
Logical.infer_tm((boxed_2‹L› ((B_14332) x0_14466)))
Logical.check_tm( ((B_14332) x0_14466), L )
Logical.infer_tm(((B_14332) x0_14466))
Logical.infer_tm(B_14332)
Logical.check_tm( x0_14466, A_14327 )
Logical.infer_tm(x0_14466)
Logical.assert_equal(A_14327, A_14327)
Logical.assert_equal(L, L)
Logical.infer_tm((eq_1‹U›
                   A_14327 x0_14466
                   ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14474)))
Logical.check_tm( A_14327, U )
Logical.infer_tm(A_14327)
Logical.assert_equal(U, U)
Logical.check_tm( x0_14466, A_14327 )
Logical.infer_tm(x0_14466)
Logical.assert_equal(A_14327, A_14327)
Logical.check_tm( ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14474), 
A_14327 )
Logical.infer_tm(((sing_elim_1‹U,L›) A_14327 x_14360 a0_14474))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14327 x_14360))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14327))
Logical.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_14327, U )
Logical.infer_tm(A_14327)
Logical.assert_equal(U, U)
Logical.check_tm( x_14360, A_14327 )
Logical.infer_tm(x_14360)
Logical.assert_equal(A_14327, A_14327)
Logical.check_tm( a0_14474, (sing_3‹U,L› A_14327 x_14360) )
Logical.infer_tm(a0_14474)
Logical.assert_equal((sing_3‹U,L› A_14327 x_14360), (sing_3‹U,L›
                                                          A_14327 x_14360))
Logical.assert_equal(A_14327, A_14327)
trans12.Program.case_split(eqU_12, reflU_15)
Logical.infer_tm((boxed_2‹L› ((B_14332) x0_14466)))
Logical.check_tm( ((B_14332) x0_14466), L )
Logical.infer_tm(((B_14332) x0_14466))
Logical.infer_tm(B_14332)
Logical.check_tm( x0_14466, A_14327 )
Logical.infer_tm(x0_14466)
Logical.assert_equal(A_14327, A_14327)
Logical.assert_equal(L, L)
trans12.Program.case_split(boxedL_13, boxL_16)
Logical.infer_tm(((B_14332) x0_14466))
Logical.infer_tm(B_14332)
Logical.check_tm( x0_14466, A_14327 )
Logical.infer_tm(x0_14466)
Logical.assert_equal(A_14327, A_14327)
case_coverage{|
  prblm {|
    eq_term?( (boxed_2‹L› ((B_14332) #x0_14466)),
      (boxed_2‹L› ((B_14332) #x0_14466)))
    eq_term?(
      (eq_1‹U›
        A_14327 #x0_14466 ((sing_elim_1‹U,L›) A_14327 x_14360 #a0_14474)),
      (eq_1‹U› A_14327 #x0_14466 #x0_14466));
    {| eq_pat?(N #x0_14466, x0_14463 : A_14327)
       eq_pat?(N #a0_14474, a0_14464 : (sing_3‹U,L› A_14327 x_14360))
       eq_pat?(R #m_14519, m_14465 : ((B_14332) #x0_14466)) ::: [] =>?
         #m_14465
    |}
  |}
|}
unify_local(
  eq_pat?(N #x0_14466, x0_14463 : A_14327)
  eq_pat?(N #a0_14474, a0_14464 : (sing_3‹U,L› A_14327 x_14360))
  eq_pat?(R #m_14519, m_14465 : ((B_14332) #x0_14466))
)
unify_global(
  eq_term?( (boxed_2‹L› ((B_14332) #x0_14466)),
    (boxed_2‹L› ((B_14332) #x0_14466)))
  eq_term?(
    (eq_1‹U›
      A_14327 #x0_14466 ((sing_elim_1‹U,L›) A_14327 x_14360 #a0_14474)),
    (eq_1‹U› A_14327 #x0_14466 #x0_14466))
)
simpl_pprbm ~expand:false( #x0_14466, #x0_14463)
simpl_pprbm ~expand:false( #a0_14474, #a0_14464)
simpl_pprbm ~expand:false( #m_14519, #m_14465)
simpl_pprbm ~expand:false( (boxed_2‹L› ((B_14332) #x0_14466)),
  (boxed_2‹L› ((B_14332) #x0_14466)))
simpl_pprbm ~expand:false( ((B_14332) #x0_14466), ((B_14332) #x0_14466))
simpl_pprbm ~expand:false( B_14332, B_14332)
simpl_pprbm ~expand:false( #x0_14466, #x0_14466)
simpl_pprbm ~expand:false(
  (eq_1‹U›
    A_14327 #x0_14466 ((sing_elim_1‹U,L›) A_14327 x_14360 #a0_14474)),
  (eq_1‹U› A_14327 #x0_14466 #x0_14466))
simpl_pprbm ~expand:false( A_14327, A_14327)
simpl_pprbm ~expand:false( #x0_14466, #x0_14466)
simpl_pprbm ~expand:false(
  ((sing_elim_1‹U,L›) A_14327 x_14360 #a0_14474), #x0_14466)
case_coverage_ok( m_14519,
  ((B_14332) ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14474)))
Program.check_tm( m_14519,
  ((B_14332) ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14474))
)
Program.infer_tm(m_14519)
Logical.assert_equal(((B_14332)
                       ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14474)), 
((B_14332) ((sing_elim_1‹U,L›) A_14327 x_14360 a0_14474)))
trans12.Program.case_introed((boxed_2‹L› ((B_14332) #x0_14466)))
trans12.Program.case_introed((eq_1‹U›
                               A_14327 #x0_14466
                               ((sing_elim_1‹U,L›)
                                 A_14327 x_14360 #a0_14474)))
trans12.Program.case_introed((sing_3‹U,L› A_14327 x_14360))
trans12.Program.case_introed(A_14327)
Logical.assert_equal(((B_14332)
                       ((proj1_7‹U,L,U›)
                         A_14327 B_14332
                         (apair_intro_13‹U,L,U›
                           A_14327 B_14332 x_14360 select_14361))), ((B_14332)
                                                                    ((
                                                                    function sing_elim_14541 :
                                                                    ∀ {A_14542 :
                                                                    U} ->
                                                                    ∀ {x_14543 :
                                                                    A_14542} ->
                                                                    (sing_3‹U,L›
                                                                    A_14542
                                                                    x_14543) ->
                                                                    A_14542
                                                                    | 
                                                                    A_14545 x_14546 (just_3 m_14547) =>
                                                                    m_14547)
                                                                    A_14327
                                                                    x_14360
                                                                    ((select_14361)
                                                                    true_5))))
trans12.Program.case_introed((apair_10‹U,L,U› #A_14327 #B_14332))
trans12.Program.case_introed(#A_14327 -> L)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_14549 : U} ->
                       ∀ {B_14550 : A_14549 -> L} ->
                         ∀ (x_14552 :
                           (apair_10‹U,L,U› A_14549 B_14550)) ->
                           ((B_14550)
                             ((proj1_7‹U,L,U›) A_14549 B_14550 x_14552)), 
∀ {A_14553 : U} ->
  ∀ {B_14554 : A_14553 -> L} ->
    ∀ (x_14556 : (apair_10‹U,L,U› A_14553 B_14554)) ->
      ((B_14554) ((proj1_7‹U,L,U›) A_14553 B_14554 x_14556)))
Logical.infer_tm(∀ {A_14561 : U} ->
                   ∀ {B_14562 : A_14561 -> U} ->
                     ∀ (x_14564 : (apair_10‹U,U,L› A_14561 B_14562)) ->
                       ((B_14562)
                         ((proj1_7‹U,U,L›) A_14561 B_14562 x_14564)))
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_14566 : A_14565 -> U} ->
                   ∀ (x_14568 : (apair_10‹U,U,L› A_14565 B_14566)) ->
                     ((B_14566)
                       ((proj1_7‹U,U,L›) A_14565 B_14566 x_14568)))
Logical.infer_tm(A_14565 -> U)
Logical.infer_tm(A_14565)
Logical.infer_tm(U)
Logical.infer_tm(∀ (x_14572 : (apair_10‹U,U,L› A_14565 B_14569)) ->
                   ((B_14569) ((proj1_7‹U,U,L›) A_14565 B_14569 x_14572)))
Logical.infer_tm((apair_10‹U,U,L› A_14565 B_14569))
Logical.check_tm( A_14565, U )
Logical.infer_tm(A_14565)
Logical.assert_equal(U, U)
Logical.check_tm( B_14569, A_14565 -> U )
Logical.infer_tm(B_14569)
Logical.assert_equal(A_14565 -> U, A_14565 -> U)
Logical.infer_tm(((B_14569) ((proj1_7‹U,U,L›) A_14565 B_14569 x_14573)))
Logical.infer_tm(B_14569)
Logical.check_tm( ((proj1_7‹U,U,L›) A_14565 B_14569 x_14573), A_14565 )
Logical.infer_tm(((proj1_7‹U,U,L›) A_14565 B_14569 x_14573))
Logical.infer_tm(((proj1_7‹U,U,L›) A_14565 B_14569))
Logical.infer_tm(((proj1_7‹U,U,L›) A_14565))
Logical.infer_tm(proj1_7‹U,U,L›)
Logical.check_tm( A_14565, U )
Logical.infer_tm(A_14565)
Logical.assert_equal(U, U)
Logical.check_tm( B_14569, A_14565 -> U )
Logical.infer_tm(B_14569)
Logical.assert_equal(A_14565 -> U, A_14565 -> U)
Logical.check_tm( x_14573, (apair_10‹U,U,L› A_14565 B_14569) )
Logical.infer_tm(x_14573)
Logical.assert_equal((apair_10‹U,U,L› A_14565 B_14569), (apair_10‹U,U,L›
                                                              A_14565 B_14569))
Logical.assert_equal(A_14565, A_14565)
Program.check_tm(
  function proj2_14582 :
    ∀ {A_14583 : U} ->
      ∀ {B_14584 : A_14583 -> U} ->
        ∀ (x_14586 : (apair_10‹U,U,L› A_14583 B_14584)) ->
          ((B_14584) ((proj1_7‹U,U,L›) A_14583 B_14584 x_14586))
  | A_14587 B_14588 (apair_intro_13 x_14589 select_14590) =>
    match x_14589, ((select_14590) true_5),
    ((sing_uniq_2‹U,L›) A_14587 x_14589 ((select_14590) true_5)),
    ((select_14590) false_6) in
      ∀ {x0_14591 : A_14587} -o
        ∀ {a0_14592 : (sing_3‹U,L› A_14587 x_14589)} -o
          {(eq_1‹U›
             A_14587 x0_14591
             ((sing_elim_1‹U,L›) A_14587 x_14589 a0_14592))} -o
            (boxed_2‹U› ((B_14588) x0_14591)) -o
              ((B_14588) ((sing_elim_1‹U,L›) A_14587 x_14589 a0_14592))
    with
    | x0_14595, a0_14596, refl_1, (box_2 m_14597) => m_14597,
  ∀ {A_14598 : U} ->
    ∀ {B_14599 : A_14598 -> U} ->
      ∀ (x_14601 : (apair_10‹U,U,L› A_14598 B_14599)) ->
        ((B_14599) ((proj1_7‹U,U,L›) A_14598 B_14599 x_14601))
)
Program.infer_tm(function proj2_14602 :
                   ∀ {A_14603 : U} ->
                     ∀ {B_14604 : A_14603 -> U} ->
                       ∀ (x_14606 :
                         (apair_10‹U,U,L› A_14603 B_14604)) ->
                         ((B_14604)
                           ((proj1_7‹U,U,L›) A_14603 B_14604 x_14606))
                 | A_14607 B_14608 (apair_intro_13 x_14609 select_14610) =>
                   match x_14609, ((select_14610) true_5),
                   ((sing_uniq_2‹U,L›)
                     A_14607 x_14609 ((select_14610) true_5)),
                   ((select_14610) false_6) in
                     ∀ {x0_14611 : A_14607} -o
                       ∀ {a0_14612 : (sing_3‹U,L› A_14607 x_14609)} -o
                         {(eq_1‹U›
                            A_14607 x0_14611
                            ((sing_elim_1‹U,L›) A_14607 x_14609 a0_14612))} -o
                           (boxed_2‹U› ((B_14608) x0_14611)) -o
                             ((B_14608)
                               ((sing_elim_1‹U,L›)
                                 A_14607 x_14609 a0_14612))
                   with
                   | x0_14615, a0_14616, refl_1, (box_2 m_14617) => m_14617)
Logical.infer_tm(∀ {A_14619 : U} ->
                   ∀ {B_14620 : A_14619 -> U} ->
                     ∀ (x_14622 : (apair_10‹U,U,L› A_14619 B_14620)) ->
                       ((B_14620)
                         ((proj1_7‹U,U,L›) A_14619 B_14620 x_14622)))
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_14624 : A_14623 -> U} ->
                   ∀ (x_14626 : (apair_10‹U,U,L› A_14623 B_14624)) ->
                     ((B_14624)
                       ((proj1_7‹U,U,L›) A_14623 B_14624 x_14626)))
Logical.infer_tm(A_14623 -> U)
Logical.infer_tm(A_14623)
Logical.infer_tm(U)
Logical.infer_tm(∀ (x_14630 : (apair_10‹U,U,L› A_14623 B_14627)) ->
                   ((B_14627) ((proj1_7‹U,U,L›) A_14623 B_14627 x_14630)))
Logical.infer_tm((apair_10‹U,U,L› A_14623 B_14627))
Logical.check_tm( A_14623, U )
Logical.infer_tm(A_14623)
Logical.assert_equal(U, U)
Logical.check_tm( B_14627, A_14623 -> U )
Logical.infer_tm(B_14627)
Logical.assert_equal(A_14623 -> U, A_14623 -> U)
Logical.infer_tm(((B_14627) ((proj1_7‹U,U,L›) A_14623 B_14627 x_14631)))
Logical.infer_tm(B_14627)
Logical.check_tm( ((proj1_7‹U,U,L›) A_14623 B_14627 x_14631), A_14623 )
Logical.infer_tm(((proj1_7‹U,U,L›) A_14623 B_14627 x_14631))
Logical.infer_tm(((proj1_7‹U,U,L›) A_14623 B_14627))
Logical.infer_tm(((proj1_7‹U,U,L›) A_14623))
Logical.infer_tm(proj1_7‹U,U,L›)
Logical.check_tm( A_14623, U )
Logical.infer_tm(A_14623)
Logical.assert_equal(U, U)
Logical.check_tm( B_14627, A_14623 -> U )
Logical.infer_tm(B_14627)
Logical.assert_equal(A_14623 -> U, A_14623 -> U)
Logical.check_tm( x_14631, (apair_10‹U,U,L› A_14623 B_14627) )
Logical.infer_tm(x_14631)
Logical.assert_equal((apair_10‹U,U,L› A_14623 B_14627), (apair_10‹U,U,L›
                                                              A_14623 B_14627))
Logical.assert_equal(A_14623, A_14623)
trans12.Program.case_intro(A_14644, U)
Logical.infer_tm(U)
trans12.Program.case_intro(B_14649, #A_14644 -> U)
Logical.infer_tm(A_14644 -> U)
Logical.infer_tm(A_14644)
Logical.infer_tm(U)
trans12.Program.case_intro(x_14658, (apair_10‹U,U,L› #A_14644 #B_14649))
Logical.infer_tm((apair_10‹U,U,L› A_14644 B_14649))
Logical.check_tm( A_14644, U )
Logical.infer_tm(A_14644)
Logical.assert_equal(U, U)
Logical.check_tm( B_14649, A_14644 -> U )
Logical.infer_tm(B_14649)
Logical.assert_equal(A_14644 -> U, A_14644 -> U)
Logical.infer_tm((apair_10‹U,U,L› A_14644 B_14649))
Logical.check_tm( A_14644, U )
Logical.infer_tm(A_14644)
Logical.assert_equal(U, U)
Logical.check_tm( B_14649, A_14644 -> U )
Logical.infer_tm(B_14649)
Logical.assert_equal(A_14644 -> U, A_14644 -> U)
trans12.Program.case_split(apairUUL_37, apair_introUUL_40)
Logical.infer_tm(A_14644)
Logical.infer_tm(∀ (b_14691 : bool_5) -o
                   match b_14691 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_14644 x_14677)
                   | false_6 => (boxed_2‹U› ((B_14649) x_14677)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_14693 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_14644 x_14677)
                 | false_6 => (boxed_2‹U› ((B_14649) x_14677)))
Logical.check_tm( b_14693, bool_5 )
Logical.infer_tm(b_14693)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_14644 x_14677) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_14644 x_14677), L)
Logical.check_tm( (sing_3‹U,L› A_14644 x_14677), L )
Logical.infer_tm((sing_3‹U,L› A_14644 x_14677))
Logical.check_tm( A_14644, U )
Logical.infer_tm(A_14644)
Logical.assert_equal(U, U)
Logical.check_tm( x_14677, A_14644 )
Logical.infer_tm(x_14677)
Logical.assert_equal(A_14644, A_14644)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_14649) x_14677)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_14649) x_14677)), L)
Logical.check_tm( (boxed_2‹U› ((B_14649) x_14677)), L )
Logical.infer_tm((boxed_2‹U› ((B_14649) x_14677)))
Logical.check_tm( ((B_14649) x_14677), U )
Logical.infer_tm(((B_14649) x_14677))
Logical.infer_tm(B_14649)
Logical.check_tm( x_14677, A_14644 )
Logical.infer_tm(x_14677)
Logical.assert_equal(A_14644, A_14644)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹U,U,L› #A_14644 #B_14649),
      (apair_10‹U,U,L› #A_14644 #B_14649));
    {| eq_pat?(N #A_14644, A_14640 : U)
       eq_pat?(N #B_14649, B_14641 : #A_14644 -> U)
       eq_pat?(N #x_14677, x_14642 : #A_14644)
       eq_pat?(R #select_14678, select_14643 :
         ∀ (b_14730 : bool_5) -o
           match b_14730 in bool_5 -o L with
           | true_5 => (sing_3‹U,L› #A_14644 #x_14677)
           | false_6 => (boxed_2‹U› ((#B_14649) #x_14677))) ::: [] =>?
         match #x_14642, ((#select_14643) true_5),
         ((sing_uniq_2‹U,L›) #A_14640 #x_14642 ((#select_14643) true_5)),
         ((#select_14643) false_6) in
           ∀ {x0_14732 : #A_14640} -o
             ∀ {a0_14733 : (sing_3‹U,L› #A_14640 #x_14642)} -o
               {(eq_1‹U›
                  #A_14640 x0_14732
                  ((sing_elim_1‹U,L›) #A_14640 #x_14642 a0_14733))} -o
                 (boxed_2‹U› ((#B_14641) x0_14732)) -o
                   ((#B_14641)
                     ((sing_elim_1‹U,L›) #A_14640 #x_14642 a0_14733))
         with
         | x0_14736, a0_14737, refl_1, (box_2 m_14738) => m_14738
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_14644, A_14640 : U)
  eq_pat?(N #B_14649, B_14641 : #A_14644 -> U)
  eq_pat?(N #x_14677, x_14642 : #A_14644)
  eq_pat?(R #select_14678, select_14643 :
    ∀ (b_14740 : bool_5) -o
      match b_14740 in bool_5 -o L with
      | true_5 => (sing_3‹U,L› #A_14644 #x_14677)
      | false_6 => (boxed_2‹U› ((#B_14649) #x_14677)))
)
unify_global(
  eq_term?( (apair_10‹U,U,L› #A_14644 #B_14649),
    (apair_10‹U,U,L› #A_14644 #B_14649))
)
simpl_pprbm ~expand:false( #A_14644, #A_14640)
simpl_pprbm ~expand:false( #B_14649, #B_14641)
simpl_pprbm ~expand:false( #x_14677, #x_14642)
simpl_pprbm ~expand:false( #select_14678, #select_14643)
simpl_pprbm ~expand:false( (apair_10‹U,U,L› #A_14644 #B_14649),
  (apair_10‹U,U,L› #A_14644 #B_14649))
simpl_pprbm ~expand:false( #A_14644, #A_14644)
simpl_pprbm ~expand:false( #B_14649, #B_14649)
case_coverage_ok(
  match x_14677, ((select_14678) true_5),
  ((sing_uniq_2‹U,L›) A_14644 x_14677 ((select_14678) true_5)),
  ((select_14678) false_6) in
    ∀ {x0_14756 : A_14644} -o
      ∀ {a0_14757 : (sing_3‹U,L› A_14644 x_14677)} -o
        {(eq_1‹U›
           A_14644 x0_14756 ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14757))} -o
          (boxed_2‹U› ((B_14649) x0_14756)) -o
            ((B_14649) ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14757))
  with
  | x0_14760, a0_14761, refl_1, (box_2 m_14762) => m_14762,
  ((B_14649)
    ((proj1_7‹U,U,L›)
      A_14644 B_14649
      (apair_intro_13‹U,U,L› A_14644 B_14649 x_14677 select_14678))))
Program.check_tm(
  match x_14677, ((select_14678) true_5),
  ((sing_uniq_2‹U,L›) A_14644 x_14677 ((select_14678) true_5)),
  ((select_14678) false_6) in
    ∀ {x0_14763 : A_14644} -o
      ∀ {a0_14764 : (sing_3‹U,L› A_14644 x_14677)} -o
        {(eq_1‹U›
           A_14644 x0_14763 ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14764))} -o
          (boxed_2‹U› ((B_14649) x0_14763)) -o
            ((B_14649) ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14764))
  with
  | x0_14767, a0_14768, refl_1, (box_2 m_14769) => m_14769,
  ((B_14649)
    ((proj1_7‹U,U,L›)
      A_14644 B_14649
      (apair_intro_13‹U,U,L› A_14644 B_14649 x_14677 select_14678)))
)
Program.infer_tm(match x_14677, ((select_14678) true_5),
                 ((sing_uniq_2‹U,L›)
                   A_14644 x_14677 ((select_14678) true_5)),
                 ((select_14678) false_6) in
                   ∀ {x0_14770 : A_14644} -o
                     ∀ {a0_14771 : (sing_3‹U,L› A_14644 x_14677)} -o
                       {(eq_1‹U›
                          A_14644 x0_14770
                          ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14771))} -o
                         (boxed_2‹U› ((B_14649) x0_14770)) -o
                           ((B_14649)
                             ((sing_elim_1‹U,L›)
                               A_14644 x_14677 a0_14771))
                 with
                 | x0_14774, a0_14775, refl_1, (box_2 m_14776) => m_14776)
Program.infer_motive_N(x_14677, A_14644)
Logical.check_tm( x_14677, A_14644 )
Logical.infer_tm(x_14677)
Logical.assert_equal(A_14644, A_14644)
Program.infer_motive_N_ok(x_14677, A_14644)
Program.infer_motive_N(((select_14678) true_5), (sing_3‹U,L›
                                                  A_14644 x_14677))
Logical.check_tm( ((select_14678) true_5), (sing_3‹U,L› A_14644 x_14677)
)
Logical.infer_tm(((select_14678) true_5))
Logical.infer_tm(select_14678)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_14644 x_14677), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_14644 x_14677)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_14649)
                                                              x_14677)))
Program.infer_motive_N_ok(((select_14678) true_5), (sing_3‹U,L›
                                                     A_14644 x_14677))
Program.infer_motive_N(((sing_uniq_2‹U,L›)
                         A_14644 x_14677 ((select_14678) true_5)), (eq_1‹U›
                                                                    A_14644
                                                                    x_14677
                                                                    ((sing_elim_1‹U,L›)
                                                                    A_14644
                                                                    x_14677
                                                                    ((select_14678)
                                                                    true_5))))
Logical.check_tm(
  ((sing_uniq_2‹U,L›) A_14644 x_14677 ((select_14678) true_5)),
  (eq_1‹U›
    A_14644 x_14677
    ((sing_elim_1‹U,L›) A_14644 x_14677 ((select_14678) true_5)))
)
Logical.infer_tm(((sing_uniq_2‹U,L›)
                   A_14644 x_14677 ((select_14678) true_5)))
Logical.infer_tm(((sing_uniq_2‹U,L›) A_14644 x_14677))
Logical.infer_tm(((sing_uniq_2‹U,L›) A_14644))
Logical.infer_tm(sing_uniq_2‹U,L›)
Logical.check_tm( A_14644, U )
Logical.infer_tm(A_14644)
Logical.assert_equal(U, U)
Logical.check_tm( x_14677, A_14644 )
Logical.infer_tm(x_14677)
Logical.assert_equal(A_14644, A_14644)
Logical.check_tm( ((select_14678) true_5), (sing_3‹U,L› A_14644 x_14677)
)
Logical.infer_tm(((select_14678) true_5))
Logical.infer_tm(select_14678)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_14644 x_14677), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_14644 x_14677)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_14649)
                                                              x_14677)))
Logical.assert_equal((eq_1‹U›
                       A_14644 x_14677
                       ((sing_elim_1‹U,L›)
                         A_14644 x_14677 ((select_14678) true_5))), (eq_1‹U›
                                                                    A_14644
                                                                    x_14677
                                                                    ((sing_elim_1‹U,L›)
                                                                    A_14644
                                                                    x_14677
                                                                    ((select_14678)
                                                                    true_5))))
Program.infer_motive_N_ok(((sing_uniq_2‹U,L›)
                            A_14644 x_14677 ((select_14678) true_5)), 
(eq_1‹U›
  A_14644 x_14677
  ((sing_elim_1‹U,L›) A_14644 x_14677 ((select_14678) true_5))))
Program.infer_motive_R(((select_14678) false_6), (boxed_2‹U›
                                                   ((B_14649) x_14677)))
Program.check_tm( ((select_14678) false_6),
  (boxed_2‹U› ((B_14649) x_14677))
)
Program.infer_tm(((select_14678) false_6))
Program.infer_tm(select_14678)
Program.check_tm( false_6, bool_5 )
Program.infer_tm(false_6)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((boxed_2‹U› ((B_14649) x_14677)), match false_6 in
                                                             bool_5 -o L
                                                           with
                                                           | true_5 =>
                                                             (sing_3‹U,L›
                                                               A_14644
                                                               x_14677)
                                                           | false_6 =>
                                                             (boxed_2‹U›
                                                               ((B_14649)
                                                                 x_14677)))
Program.infer_motive_R_ok(((select_14678) false_6), (boxed_2‹U›
                                                      ((B_14649) x_14677)))
Program.infer_motive_ok
trans12.Program.case_intro(x0_14783, A_14644)
Logical.infer_tm(A_14644)
trans12.Program.case_intro(a0_14791, (sing_3‹U,L› A_14644 x_14677))
Logical.infer_tm((sing_3‹U,L› A_14644 x_14677))
Logical.check_tm( A_14644, U )
Logical.infer_tm(A_14644)
Logical.assert_equal(U, U)
Logical.check_tm( x_14677, A_14644 )
Logical.infer_tm(x_14677)
Logical.assert_equal(A_14644, A_14644)
trans12.Program.case_intro(__14799, (eq_1‹U›
                                      A_14644 #x0_14783
                                      ((sing_elim_1‹U,L›)
                                        A_14644 x_14677 #a0_14791)))
Logical.infer_tm((eq_1‹U›
                   A_14644 x0_14783
                   ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14791)))
Logical.check_tm( A_14644, U )
Logical.infer_tm(A_14644)
Logical.assert_equal(U, U)
Logical.check_tm( x0_14783, A_14644 )
Logical.infer_tm(x0_14783)
Logical.assert_equal(A_14644, A_14644)
Logical.check_tm( ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14791), 
A_14644 )
Logical.infer_tm(((sing_elim_1‹U,L›) A_14644 x_14677 a0_14791))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14644 x_14677))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14644))
Logical.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_14644, U )
Logical.infer_tm(A_14644)
Logical.assert_equal(U, U)
Logical.check_tm( x_14677, A_14644 )
Logical.infer_tm(x_14677)
Logical.assert_equal(A_14644, A_14644)
Logical.check_tm( a0_14791, (sing_3‹U,L› A_14644 x_14677) )
Logical.infer_tm(a0_14791)
Logical.assert_equal((sing_3‹U,L› A_14644 x_14677), (sing_3‹U,L›
                                                          A_14644 x_14677))
Logical.assert_equal(A_14644, A_14644)
trans12.Program.case_intro(__14807, (boxed_2‹U› ((B_14649) #x0_14783)))
Logical.infer_tm((boxed_2‹U› ((B_14649) x0_14783)))
Logical.check_tm( ((B_14649) x0_14783), U )
Logical.infer_tm(((B_14649) x0_14783))
Logical.infer_tm(B_14649)
Logical.check_tm( x0_14783, A_14644 )
Logical.infer_tm(x0_14783)
Logical.assert_equal(A_14644, A_14644)
Logical.assert_equal(U, U)
Logical.infer_tm((eq_1‹U›
                   A_14644 x0_14783
                   ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14791)))
Logical.check_tm( A_14644, U )
Logical.infer_tm(A_14644)
Logical.assert_equal(U, U)
Logical.check_tm( x0_14783, A_14644 )
Logical.infer_tm(x0_14783)
Logical.assert_equal(A_14644, A_14644)
Logical.check_tm( ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14791), 
A_14644 )
Logical.infer_tm(((sing_elim_1‹U,L›) A_14644 x_14677 a0_14791))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14644 x_14677))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14644))
Logical.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_14644, U )
Logical.infer_tm(A_14644)
Logical.assert_equal(U, U)
Logical.check_tm( x_14677, A_14644 )
Logical.infer_tm(x_14677)
Logical.assert_equal(A_14644, A_14644)
Logical.check_tm( a0_14791, (sing_3‹U,L› A_14644 x_14677) )
Logical.infer_tm(a0_14791)
Logical.assert_equal((sing_3‹U,L› A_14644 x_14677), (sing_3‹U,L›
                                                          A_14644 x_14677))
Logical.assert_equal(A_14644, A_14644)
trans12.Program.case_split(eqU_12, reflU_15)
Logical.infer_tm((boxed_2‹U› ((B_14649) x0_14783)))
Logical.check_tm( ((B_14649) x0_14783), U )
Logical.infer_tm(((B_14649) x0_14783))
Logical.infer_tm(B_14649)
Logical.check_tm( x0_14783, A_14644 )
Logical.infer_tm(x0_14783)
Logical.assert_equal(A_14644, A_14644)
Logical.assert_equal(U, U)
trans12.Program.case_split(boxedU_14, boxU_17)
Logical.infer_tm(((B_14649) x0_14783))
Logical.infer_tm(B_14649)
Logical.check_tm( x0_14783, A_14644 )
Logical.infer_tm(x0_14783)
Logical.assert_equal(A_14644, A_14644)
case_coverage{|
  prblm {|
    eq_term?( (boxed_2‹U› ((B_14649) #x0_14783)),
      (boxed_2‹U› ((B_14649) #x0_14783)))
    eq_term?(
      (eq_1‹U›
        A_14644 #x0_14783 ((sing_elim_1‹U,L›) A_14644 x_14677 #a0_14791)),
      (eq_1‹U› A_14644 #x0_14783 #x0_14783));
    {| eq_pat?(N #x0_14783, x0_14780 : A_14644)
       eq_pat?(N #a0_14791, a0_14781 : (sing_3‹U,L› A_14644 x_14677))
       eq_pat?(R #m_14836, m_14782 : ((B_14649) #x0_14783)) ::: [] =>?
         #m_14782
    |}
  |}
|}
unify_local(
  eq_pat?(N #x0_14783, x0_14780 : A_14644)
  eq_pat?(N #a0_14791, a0_14781 : (sing_3‹U,L› A_14644 x_14677))
  eq_pat?(R #m_14836, m_14782 : ((B_14649) #x0_14783))
)
unify_global(
  eq_term?( (boxed_2‹U› ((B_14649) #x0_14783)),
    (boxed_2‹U› ((B_14649) #x0_14783)))
  eq_term?(
    (eq_1‹U›
      A_14644 #x0_14783 ((sing_elim_1‹U,L›) A_14644 x_14677 #a0_14791)),
    (eq_1‹U› A_14644 #x0_14783 #x0_14783))
)
simpl_pprbm ~expand:false( #x0_14783, #x0_14780)
simpl_pprbm ~expand:false( #a0_14791, #a0_14781)
simpl_pprbm ~expand:false( #m_14836, #m_14782)
simpl_pprbm ~expand:false( (boxed_2‹U› ((B_14649) #x0_14783)),
  (boxed_2‹U› ((B_14649) #x0_14783)))
simpl_pprbm ~expand:false( ((B_14649) #x0_14783), ((B_14649) #x0_14783))
simpl_pprbm ~expand:false( B_14649, B_14649)
simpl_pprbm ~expand:false( #x0_14783, #x0_14783)
simpl_pprbm ~expand:false(
  (eq_1‹U›
    A_14644 #x0_14783 ((sing_elim_1‹U,L›) A_14644 x_14677 #a0_14791)),
  (eq_1‹U› A_14644 #x0_14783 #x0_14783))
simpl_pprbm ~expand:false( A_14644, A_14644)
simpl_pprbm ~expand:false( #x0_14783, #x0_14783)
simpl_pprbm ~expand:false(
  ((sing_elim_1‹U,L›) A_14644 x_14677 #a0_14791), #x0_14783)
case_coverage_ok( m_14836,
  ((B_14649) ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14791)))
Program.check_tm( m_14836,
  ((B_14649) ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14791))
)
Program.infer_tm(m_14836)
Logical.assert_equal(((B_14649)
                       ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14791)), 
((B_14649) ((sing_elim_1‹U,L›) A_14644 x_14677 a0_14791)))
trans12.Program.case_introed((boxed_2‹U› ((B_14649) #x0_14783)))
trans12.Program.case_introed((eq_1‹U›
                               A_14644 #x0_14783
                               ((sing_elim_1‹U,L›)
                                 A_14644 x_14677 #a0_14791)))
trans12.Program.case_introed((sing_3‹U,L› A_14644 x_14677))
trans12.Program.case_introed(A_14644)
Logical.assert_equal(((B_14649)
                       ((proj1_7‹U,U,L›)
                         A_14644 B_14649
                         (apair_intro_13‹U,U,L›
                           A_14644 B_14649 x_14677 select_14678))), ((B_14649)
                                                                    ((
                                                                    function sing_elim_14858 :
                                                                    ∀ {A_14859 :
                                                                    U} ->
                                                                    ∀ {x_14860 :
                                                                    A_14859} ->
                                                                    (sing_3‹U,L›
                                                                    A_14859
                                                                    x_14860) ->
                                                                    A_14859
                                                                    | 
                                                                    A_14862 x_14863 (just_3 m_14864) =>
                                                                    m_14864)
                                                                    A_14644
                                                                    x_14677
                                                                    ((select_14678)
                                                                    true_5))))
trans12.Program.case_introed((apair_10‹U,U,L› #A_14644 #B_14649))
trans12.Program.case_introed(#A_14644 -> U)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_14866 : U} ->
                       ∀ {B_14867 : A_14866 -> U} ->
                         ∀ (x_14869 :
                           (apair_10‹U,U,L› A_14866 B_14867)) ->
                           ((B_14867)
                             ((proj1_7‹U,U,L›) A_14866 B_14867 x_14869)), 
∀ {A_14870 : U} ->
  ∀ {B_14871 : A_14870 -> U} ->
    ∀ (x_14873 : (apair_10‹U,U,L› A_14870 B_14871)) ->
      ((B_14871) ((proj1_7‹U,U,L›) A_14870 B_14871 x_14873)))
Logical.infer_tm(∀ {A_14878 : U} ->
                   ∀ {B_14879 : A_14878 -> U} ->
                     ∀ (x_14881 : (apair_10‹U,U,U› A_14878 B_14879)) ->
                       ((B_14879)
                         ((proj1_7‹U,U,U›) A_14878 B_14879 x_14881)))
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_14883 : A_14882 -> U} ->
                   ∀ (x_14885 : (apair_10‹U,U,U› A_14882 B_14883)) ->
                     ((B_14883)
                       ((proj1_7‹U,U,U›) A_14882 B_14883 x_14885)))
Logical.infer_tm(A_14882 -> U)
Logical.infer_tm(A_14882)
Logical.infer_tm(U)
Logical.infer_tm(∀ (x_14889 : (apair_10‹U,U,U› A_14882 B_14886)) ->
                   ((B_14886) ((proj1_7‹U,U,U›) A_14882 B_14886 x_14889)))
Logical.infer_tm((apair_10‹U,U,U› A_14882 B_14886))
Logical.check_tm( A_14882, U )
Logical.infer_tm(A_14882)
Logical.assert_equal(U, U)
Logical.check_tm( B_14886, A_14882 -> U )
Logical.infer_tm(B_14886)
Logical.assert_equal(A_14882 -> U, A_14882 -> U)
Logical.infer_tm(((B_14886) ((proj1_7‹U,U,U›) A_14882 B_14886 x_14890)))
Logical.infer_tm(B_14886)
Logical.check_tm( ((proj1_7‹U,U,U›) A_14882 B_14886 x_14890), A_14882 )
Logical.infer_tm(((proj1_7‹U,U,U›) A_14882 B_14886 x_14890))
Logical.infer_tm(((proj1_7‹U,U,U›) A_14882 B_14886))
Logical.infer_tm(((proj1_7‹U,U,U›) A_14882))
Logical.infer_tm(proj1_7‹U,U,U›)
Logical.check_tm( A_14882, U )
Logical.infer_tm(A_14882)
Logical.assert_equal(U, U)
Logical.check_tm( B_14886, A_14882 -> U )
Logical.infer_tm(B_14886)
Logical.assert_equal(A_14882 -> U, A_14882 -> U)
Logical.check_tm( x_14890, (apair_10‹U,U,U› A_14882 B_14886) )
Logical.infer_tm(x_14890)
Logical.assert_equal((apair_10‹U,U,U› A_14882 B_14886), (apair_10‹U,U,U›
                                                              A_14882 B_14886))
Logical.assert_equal(A_14882, A_14882)
Program.check_tm(
  function proj2_14899 :
    ∀ {A_14900 : U} ->
      ∀ {B_14901 : A_14900 -> U} ->
        ∀ (x_14903 : (apair_10‹U,U,U› A_14900 B_14901)) ->
          ((B_14901) ((proj1_7‹U,U,U›) A_14900 B_14901 x_14903))
  | A_14904 B_14905 (apair_intro_13 x_14906 select_14907) =>
    match x_14906, ((select_14907) true_5),
    ((sing_uniq_2‹U,L›) A_14904 x_14906 ((select_14907) true_5)),
    ((select_14907) false_6) in
      ∀ {x0_14908 : A_14904} -o
        ∀ {a0_14909 : (sing_3‹U,L› A_14904 x_14906)} -o
          {(eq_1‹U›
             A_14904 x0_14908
             ((sing_elim_1‹U,L›) A_14904 x_14906 a0_14909))} -o
            (boxed_2‹U› ((B_14905) x0_14908)) -o
              ((B_14905) ((sing_elim_1‹U,L›) A_14904 x_14906 a0_14909))
    with
    | x0_14912, a0_14913, refl_1, (box_2 m_14914) => m_14914,
  ∀ {A_14915 : U} ->
    ∀ {B_14916 : A_14915 -> U} ->
      ∀ (x_14918 : (apair_10‹U,U,U› A_14915 B_14916)) ->
        ((B_14916) ((proj1_7‹U,U,U›) A_14915 B_14916 x_14918))
)
Program.infer_tm(function proj2_14919 :
                   ∀ {A_14920 : U} ->
                     ∀ {B_14921 : A_14920 -> U} ->
                       ∀ (x_14923 :
                         (apair_10‹U,U,U› A_14920 B_14921)) ->
                         ((B_14921)
                           ((proj1_7‹U,U,U›) A_14920 B_14921 x_14923))
                 | A_14924 B_14925 (apair_intro_13 x_14926 select_14927) =>
                   match x_14926, ((select_14927) true_5),
                   ((sing_uniq_2‹U,L›)
                     A_14924 x_14926 ((select_14927) true_5)),
                   ((select_14927) false_6) in
                     ∀ {x0_14928 : A_14924} -o
                       ∀ {a0_14929 : (sing_3‹U,L› A_14924 x_14926)} -o
                         {(eq_1‹U›
                            A_14924 x0_14928
                            ((sing_elim_1‹U,L›) A_14924 x_14926 a0_14929))} -o
                           (boxed_2‹U› ((B_14925) x0_14928)) -o
                             ((B_14925)
                               ((sing_elim_1‹U,L›)
                                 A_14924 x_14926 a0_14929))
                   with
                   | x0_14932, a0_14933, refl_1, (box_2 m_14934) => m_14934)
Logical.infer_tm(∀ {A_14936 : U} ->
                   ∀ {B_14937 : A_14936 -> U} ->
                     ∀ (x_14939 : (apair_10‹U,U,U› A_14936 B_14937)) ->
                       ((B_14937)
                         ((proj1_7‹U,U,U›) A_14936 B_14937 x_14939)))
Logical.infer_tm(U)
Logical.infer_tm(∀ {B_14941 : A_14940 -> U} ->
                   ∀ (x_14943 : (apair_10‹U,U,U› A_14940 B_14941)) ->
                     ((B_14941)
                       ((proj1_7‹U,U,U›) A_14940 B_14941 x_14943)))
Logical.infer_tm(A_14940 -> U)
Logical.infer_tm(A_14940)
Logical.infer_tm(U)
Logical.infer_tm(∀ (x_14947 : (apair_10‹U,U,U› A_14940 B_14944)) ->
                   ((B_14944) ((proj1_7‹U,U,U›) A_14940 B_14944 x_14947)))
Logical.infer_tm((apair_10‹U,U,U› A_14940 B_14944))
Logical.check_tm( A_14940, U )
Logical.infer_tm(A_14940)
Logical.assert_equal(U, U)
Logical.check_tm( B_14944, A_14940 -> U )
Logical.infer_tm(B_14944)
Logical.assert_equal(A_14940 -> U, A_14940 -> U)
Logical.infer_tm(((B_14944) ((proj1_7‹U,U,U›) A_14940 B_14944 x_14948)))
Logical.infer_tm(B_14944)
Logical.check_tm( ((proj1_7‹U,U,U›) A_14940 B_14944 x_14948), A_14940 )
Logical.infer_tm(((proj1_7‹U,U,U›) A_14940 B_14944 x_14948))
Logical.infer_tm(((proj1_7‹U,U,U›) A_14940 B_14944))
Logical.infer_tm(((proj1_7‹U,U,U›) A_14940))
Logical.infer_tm(proj1_7‹U,U,U›)
Logical.check_tm( A_14940, U )
Logical.infer_tm(A_14940)
Logical.assert_equal(U, U)
Logical.check_tm( B_14944, A_14940 -> U )
Logical.infer_tm(B_14944)
Logical.assert_equal(A_14940 -> U, A_14940 -> U)
Logical.check_tm( x_14948, (apair_10‹U,U,U› A_14940 B_14944) )
Logical.infer_tm(x_14948)
Logical.assert_equal((apair_10‹U,U,U› A_14940 B_14944), (apair_10‹U,U,U›
                                                              A_14940 B_14944))
Logical.assert_equal(A_14940, A_14940)
trans12.Program.case_intro(A_14961, U)
Logical.infer_tm(U)
trans12.Program.case_intro(B_14966, #A_14961 -> U)
Logical.infer_tm(A_14961 -> U)
Logical.infer_tm(A_14961)
Logical.infer_tm(U)
trans12.Program.case_intro(x_14975, (apair_10‹U,U,U› #A_14961 #B_14966))
Logical.infer_tm((apair_10‹U,U,U› A_14961 B_14966))
Logical.check_tm( A_14961, U )
Logical.infer_tm(A_14961)
Logical.assert_equal(U, U)
Logical.check_tm( B_14966, A_14961 -> U )
Logical.infer_tm(B_14966)
Logical.assert_equal(A_14961 -> U, A_14961 -> U)
Logical.infer_tm((apair_10‹U,U,U› A_14961 B_14966))
Logical.check_tm( A_14961, U )
Logical.infer_tm(A_14961)
Logical.assert_equal(U, U)
Logical.check_tm( B_14966, A_14961 -> U )
Logical.infer_tm(B_14966)
Logical.assert_equal(A_14961 -> U, A_14961 -> U)
trans12.Program.case_split(apairUUU_38, apair_introUUU_41)
Logical.infer_tm(A_14961)
Logical.infer_tm(∀ (b_15008 : bool_5) ->
                   match b_15008 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› A_14961 x_14994)
                   | false_6 => (boxed_2‹U› ((B_14966) x_14994)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_15010 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› A_14961 x_14994)
                 | false_6 => (boxed_2‹U› ((B_14966) x_14994)))
Logical.check_tm( b_15010, bool_5 )
Logical.infer_tm(b_15010)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› A_14961 x_14994) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› A_14961 x_14994), L)
Logical.check_tm( (sing_3‹U,L› A_14961 x_14994), L )
Logical.infer_tm((sing_3‹U,L› A_14961 x_14994))
Logical.check_tm( A_14961, U )
Logical.infer_tm(A_14961)
Logical.assert_equal(U, U)
Logical.check_tm( x_14994, A_14961 )
Logical.infer_tm(x_14994)
Logical.assert_equal(A_14961, A_14961)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (boxed_2‹U› ((B_14966) x_14994)) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (boxed_2‹U› ((B_14966) x_14994)), L)
Logical.check_tm( (boxed_2‹U› ((B_14966) x_14994)), L )
Logical.infer_tm((boxed_2‹U› ((B_14966) x_14994)))
Logical.check_tm( ((B_14966) x_14994), U )
Logical.infer_tm(((B_14966) x_14994))
Logical.infer_tm(B_14966)
Logical.check_tm( x_14994, A_14961 )
Logical.infer_tm(x_14994)
Logical.assert_equal(A_14961, A_14961)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {|
    eq_term?( (apair_10‹U,U,U› #A_14961 #B_14966),
      (apair_10‹U,U,U› #A_14961 #B_14966));
    {| eq_pat?(N #A_14961, A_14957 : U)
       eq_pat?(N #B_14966, B_14958 : #A_14961 -> U)
       eq_pat?(N #x_14994, x_14959 : #A_14961)
       eq_pat?(R #select_14995, select_14960 :
         ∀ (b_15047 : bool_5) ->
           match b_15047 in bool_5 -o L with
           | true_5 => (sing_3‹U,L› #A_14961 #x_14994)
           | false_6 => (boxed_2‹U› ((#B_14966) #x_14994))) ::: [] =>?
         match #x_14959, ((#select_14960) true_5),
         ((sing_uniq_2‹U,L›) #A_14957 #x_14959 ((#select_14960) true_5)),
         ((#select_14960) false_6) in
           ∀ {x0_15049 : #A_14957} -o
             ∀ {a0_15050 : (sing_3‹U,L› #A_14957 #x_14959)} -o
               {(eq_1‹U›
                  #A_14957 x0_15049
                  ((sing_elim_1‹U,L›) #A_14957 #x_14959 a0_15050))} -o
                 (boxed_2‹U› ((#B_14958) x0_15049)) -o
                   ((#B_14958)
                     ((sing_elim_1‹U,L›) #A_14957 #x_14959 a0_15050))
         with
         | x0_15053, a0_15054, refl_1, (box_2 m_15055) => m_15055
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_14961, A_14957 : U)
  eq_pat?(N #B_14966, B_14958 : #A_14961 -> U)
  eq_pat?(N #x_14994, x_14959 : #A_14961)
  eq_pat?(R #select_14995, select_14960 :
    ∀ (b_15057 : bool_5) ->
      match b_15057 in bool_5 -o L with
      | true_5 => (sing_3‹U,L› #A_14961 #x_14994)
      | false_6 => (boxed_2‹U› ((#B_14966) #x_14994)))
)
unify_global(
  eq_term?( (apair_10‹U,U,U› #A_14961 #B_14966),
    (apair_10‹U,U,U› #A_14961 #B_14966))
)
simpl_pprbm ~expand:false( #A_14961, #A_14957)
simpl_pprbm ~expand:false( #B_14966, #B_14958)
simpl_pprbm ~expand:false( #x_14994, #x_14959)
simpl_pprbm ~expand:false( #select_14995, #select_14960)
simpl_pprbm ~expand:false( (apair_10‹U,U,U› #A_14961 #B_14966),
  (apair_10‹U,U,U› #A_14961 #B_14966))
simpl_pprbm ~expand:false( #A_14961, #A_14961)
simpl_pprbm ~expand:false( #B_14966, #B_14966)
case_coverage_ok(
  match x_14994, ((select_14995) true_5),
  ((sing_uniq_2‹U,L›) A_14961 x_14994 ((select_14995) true_5)),
  ((select_14995) false_6) in
    ∀ {x0_15073 : A_14961} -o
      ∀ {a0_15074 : (sing_3‹U,L› A_14961 x_14994)} -o
        {(eq_1‹U›
           A_14961 x0_15073 ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15074))} -o
          (boxed_2‹U› ((B_14966) x0_15073)) -o
            ((B_14966) ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15074))
  with
  | x0_15077, a0_15078, refl_1, (box_2 m_15079) => m_15079,
  ((B_14966)
    ((proj1_7‹U,U,U›)
      A_14961 B_14966
      (apair_intro_13‹U,U,U› A_14961 B_14966 x_14994 select_14995))))
Program.check_tm(
  match x_14994, ((select_14995) true_5),
  ((sing_uniq_2‹U,L›) A_14961 x_14994 ((select_14995) true_5)),
  ((select_14995) false_6) in
    ∀ {x0_15080 : A_14961} -o
      ∀ {a0_15081 : (sing_3‹U,L› A_14961 x_14994)} -o
        {(eq_1‹U›
           A_14961 x0_15080 ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15081))} -o
          (boxed_2‹U› ((B_14966) x0_15080)) -o
            ((B_14966) ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15081))
  with
  | x0_15084, a0_15085, refl_1, (box_2 m_15086) => m_15086,
  ((B_14966)
    ((proj1_7‹U,U,U›)
      A_14961 B_14966
      (apair_intro_13‹U,U,U› A_14961 B_14966 x_14994 select_14995)))
)
Program.infer_tm(match x_14994, ((select_14995) true_5),
                 ((sing_uniq_2‹U,L›)
                   A_14961 x_14994 ((select_14995) true_5)),
                 ((select_14995) false_6) in
                   ∀ {x0_15087 : A_14961} -o
                     ∀ {a0_15088 : (sing_3‹U,L› A_14961 x_14994)} -o
                       {(eq_1‹U›
                          A_14961 x0_15087
                          ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15088))} -o
                         (boxed_2‹U› ((B_14966) x0_15087)) -o
                           ((B_14966)
                             ((sing_elim_1‹U,L›)
                               A_14961 x_14994 a0_15088))
                 with
                 | x0_15091, a0_15092, refl_1, (box_2 m_15093) => m_15093)
Program.infer_motive_N(x_14994, A_14961)
Logical.check_tm( x_14994, A_14961 )
Logical.infer_tm(x_14994)
Logical.assert_equal(A_14961, A_14961)
Program.infer_motive_N_ok(x_14994, A_14961)
Program.infer_motive_N(((select_14995) true_5), (sing_3‹U,L›
                                                  A_14961 x_14994))
Logical.check_tm( ((select_14995) true_5), (sing_3‹U,L› A_14961 x_14994)
)
Logical.infer_tm(((select_14995) true_5))
Logical.infer_tm(select_14995)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_14961 x_14994), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_14961 x_14994)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_14966)
                                                              x_14994)))
Program.infer_motive_N_ok(((select_14995) true_5), (sing_3‹U,L›
                                                     A_14961 x_14994))
Program.infer_motive_N(((sing_uniq_2‹U,L›)
                         A_14961 x_14994 ((select_14995) true_5)), (eq_1‹U›
                                                                    A_14961
                                                                    x_14994
                                                                    ((sing_elim_1‹U,L›)
                                                                    A_14961
                                                                    x_14994
                                                                    ((select_14995)
                                                                    true_5))))
Logical.check_tm(
  ((sing_uniq_2‹U,L›) A_14961 x_14994 ((select_14995) true_5)),
  (eq_1‹U›
    A_14961 x_14994
    ((sing_elim_1‹U,L›) A_14961 x_14994 ((select_14995) true_5)))
)
Logical.infer_tm(((sing_uniq_2‹U,L›)
                   A_14961 x_14994 ((select_14995) true_5)))
Logical.infer_tm(((sing_uniq_2‹U,L›) A_14961 x_14994))
Logical.infer_tm(((sing_uniq_2‹U,L›) A_14961))
Logical.infer_tm(sing_uniq_2‹U,L›)
Logical.check_tm( A_14961, U )
Logical.infer_tm(A_14961)
Logical.assert_equal(U, U)
Logical.check_tm( x_14994, A_14961 )
Logical.infer_tm(x_14994)
Logical.assert_equal(A_14961, A_14961)
Logical.check_tm( ((select_14995) true_5), (sing_3‹U,L› A_14961 x_14994)
)
Logical.infer_tm(((select_14995) true_5))
Logical.infer_tm(select_14995)
Logical.check_tm( true_5, bool_5 )
Logical.infer_tm(true_5)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((sing_3‹U,L› A_14961 x_14994), match true_5 in
                                                          bool_5 -o L
                                                        with
                                                        | true_5 =>
                                                          (sing_3‹U,L›
                                                            A_14961 x_14994)
                                                        | false_6 =>
                                                          (boxed_2‹U›
                                                            ((B_14966)
                                                              x_14994)))
Logical.assert_equal((eq_1‹U›
                       A_14961 x_14994
                       ((sing_elim_1‹U,L›)
                         A_14961 x_14994 ((select_14995) true_5))), (eq_1‹U›
                                                                    A_14961
                                                                    x_14994
                                                                    ((sing_elim_1‹U,L›)
                                                                    A_14961
                                                                    x_14994
                                                                    ((select_14995)
                                                                    true_5))))
Program.infer_motive_N_ok(((sing_uniq_2‹U,L›)
                            A_14961 x_14994 ((select_14995) true_5)), 
(eq_1‹U›
  A_14961 x_14994
  ((sing_elim_1‹U,L›) A_14961 x_14994 ((select_14995) true_5))))
Program.infer_motive_R(((select_14995) false_6), (boxed_2‹U›
                                                   ((B_14966) x_14994)))
Program.check_tm( ((select_14995) false_6),
  (boxed_2‹U› ((B_14966) x_14994))
)
Program.infer_tm(((select_14995) false_6))
Program.infer_tm(select_14995)
Program.check_tm( false_6, bool_5 )
Program.infer_tm(false_6)
Logical.assert_equal(bool_5, bool_5)
Logical.assert_equal((boxed_2‹U› ((B_14966) x_14994)), match false_6 in
                                                             bool_5 -o L
                                                           with
                                                           | true_5 =>
                                                             (sing_3‹U,L›
                                                               A_14961
                                                               x_14994)
                                                           | false_6 =>
                                                             (boxed_2‹U›
                                                               ((B_14966)
                                                                 x_14994)))
Program.infer_motive_R_ok(((select_14995) false_6), (boxed_2‹U›
                                                      ((B_14966) x_14994)))
Program.infer_motive_ok
trans12.Program.case_intro(x0_15100, A_14961)
Logical.infer_tm(A_14961)
trans12.Program.case_intro(a0_15108, (sing_3‹U,L› A_14961 x_14994))
Logical.infer_tm((sing_3‹U,L› A_14961 x_14994))
Logical.check_tm( A_14961, U )
Logical.infer_tm(A_14961)
Logical.assert_equal(U, U)
Logical.check_tm( x_14994, A_14961 )
Logical.infer_tm(x_14994)
Logical.assert_equal(A_14961, A_14961)
trans12.Program.case_intro(__15116, (eq_1‹U›
                                      A_14961 #x0_15100
                                      ((sing_elim_1‹U,L›)
                                        A_14961 x_14994 #a0_15108)))
Logical.infer_tm((eq_1‹U›
                   A_14961 x0_15100
                   ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15108)))
Logical.check_tm( A_14961, U )
Logical.infer_tm(A_14961)
Logical.assert_equal(U, U)
Logical.check_tm( x0_15100, A_14961 )
Logical.infer_tm(x0_15100)
Logical.assert_equal(A_14961, A_14961)
Logical.check_tm( ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15108), 
A_14961 )
Logical.infer_tm(((sing_elim_1‹U,L›) A_14961 x_14994 a0_15108))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14961 x_14994))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14961))
Logical.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_14961, U )
Logical.infer_tm(A_14961)
Logical.assert_equal(U, U)
Logical.check_tm( x_14994, A_14961 )
Logical.infer_tm(x_14994)
Logical.assert_equal(A_14961, A_14961)
Logical.check_tm( a0_15108, (sing_3‹U,L› A_14961 x_14994) )
Logical.infer_tm(a0_15108)
Logical.assert_equal((sing_3‹U,L› A_14961 x_14994), (sing_3‹U,L›
                                                          A_14961 x_14994))
Logical.assert_equal(A_14961, A_14961)
trans12.Program.case_intro(__15124, (boxed_2‹U› ((B_14966) #x0_15100)))
Logical.infer_tm((boxed_2‹U› ((B_14966) x0_15100)))
Logical.check_tm( ((B_14966) x0_15100), U )
Logical.infer_tm(((B_14966) x0_15100))
Logical.infer_tm(B_14966)
Logical.check_tm( x0_15100, A_14961 )
Logical.infer_tm(x0_15100)
Logical.assert_equal(A_14961, A_14961)
Logical.assert_equal(U, U)
Logical.infer_tm((eq_1‹U›
                   A_14961 x0_15100
                   ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15108)))
Logical.check_tm( A_14961, U )
Logical.infer_tm(A_14961)
Logical.assert_equal(U, U)
Logical.check_tm( x0_15100, A_14961 )
Logical.infer_tm(x0_15100)
Logical.assert_equal(A_14961, A_14961)
Logical.check_tm( ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15108), 
A_14961 )
Logical.infer_tm(((sing_elim_1‹U,L›) A_14961 x_14994 a0_15108))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14961 x_14994))
Logical.infer_tm(((sing_elim_1‹U,L›) A_14961))
Logical.infer_tm(sing_elim_1‹U,L›)
Logical.check_tm( A_14961, U )
Logical.infer_tm(A_14961)
Logical.assert_equal(U, U)
Logical.check_tm( x_14994, A_14961 )
Logical.infer_tm(x_14994)
Logical.assert_equal(A_14961, A_14961)
Logical.check_tm( a0_15108, (sing_3‹U,L› A_14961 x_14994) )
Logical.infer_tm(a0_15108)
Logical.assert_equal((sing_3‹U,L› A_14961 x_14994), (sing_3‹U,L›
                                                          A_14961 x_14994))
Logical.assert_equal(A_14961, A_14961)
trans12.Program.case_split(eqU_12, reflU_15)
Logical.infer_tm((boxed_2‹U› ((B_14966) x0_15100)))
Logical.check_tm( ((B_14966) x0_15100), U )
Logical.infer_tm(((B_14966) x0_15100))
Logical.infer_tm(B_14966)
Logical.check_tm( x0_15100, A_14961 )
Logical.infer_tm(x0_15100)
Logical.assert_equal(A_14961, A_14961)
Logical.assert_equal(U, U)
trans12.Program.case_split(boxedU_14, boxU_17)
Logical.infer_tm(((B_14966) x0_15100))
Logical.infer_tm(B_14966)
Logical.check_tm( x0_15100, A_14961 )
Logical.infer_tm(x0_15100)
Logical.assert_equal(A_14961, A_14961)
case_coverage{|
  prblm {|
    eq_term?( (boxed_2‹U› ((B_14966) #x0_15100)),
      (boxed_2‹U› ((B_14966) #x0_15100)))
    eq_term?(
      (eq_1‹U›
        A_14961 #x0_15100 ((sing_elim_1‹U,L›) A_14961 x_14994 #a0_15108)),
      (eq_1‹U› A_14961 #x0_15100 #x0_15100));
    {| eq_pat?(N #x0_15100, x0_15097 : A_14961)
       eq_pat?(N #a0_15108, a0_15098 : (sing_3‹U,L› A_14961 x_14994))
       eq_pat?(R #m_15153, m_15099 : ((B_14966) #x0_15100)) ::: [] =>?
         #m_15099
    |}
  |}
|}
unify_local(
  eq_pat?(N #x0_15100, x0_15097 : A_14961)
  eq_pat?(N #a0_15108, a0_15098 : (sing_3‹U,L› A_14961 x_14994))
  eq_pat?(R #m_15153, m_15099 : ((B_14966) #x0_15100))
)
unify_global(
  eq_term?( (boxed_2‹U› ((B_14966) #x0_15100)),
    (boxed_2‹U› ((B_14966) #x0_15100)))
  eq_term?(
    (eq_1‹U›
      A_14961 #x0_15100 ((sing_elim_1‹U,L›) A_14961 x_14994 #a0_15108)),
    (eq_1‹U› A_14961 #x0_15100 #x0_15100))
)
simpl_pprbm ~expand:false( #x0_15100, #x0_15097)
simpl_pprbm ~expand:false( #a0_15108, #a0_15098)
simpl_pprbm ~expand:false( #m_15153, #m_15099)
simpl_pprbm ~expand:false( (boxed_2‹U› ((B_14966) #x0_15100)),
  (boxed_2‹U› ((B_14966) #x0_15100)))
simpl_pprbm ~expand:false( ((B_14966) #x0_15100), ((B_14966) #x0_15100))
simpl_pprbm ~expand:false( B_14966, B_14966)
simpl_pprbm ~expand:false( #x0_15100, #x0_15100)
simpl_pprbm ~expand:false(
  (eq_1‹U›
    A_14961 #x0_15100 ((sing_elim_1‹U,L›) A_14961 x_14994 #a0_15108)),
  (eq_1‹U› A_14961 #x0_15100 #x0_15100))
simpl_pprbm ~expand:false( A_14961, A_14961)
simpl_pprbm ~expand:false( #x0_15100, #x0_15100)
simpl_pprbm ~expand:false(
  ((sing_elim_1‹U,L›) A_14961 x_14994 #a0_15108), #x0_15100)
case_coverage_ok( m_15153,
  ((B_14966) ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15108)))
Program.check_tm( m_15153,
  ((B_14966) ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15108))
)
Program.infer_tm(m_15153)
Logical.assert_equal(((B_14966)
                       ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15108)), 
((B_14966) ((sing_elim_1‹U,L›) A_14961 x_14994 a0_15108)))
trans12.Program.case_introed((boxed_2‹U› ((B_14966) #x0_15100)))
trans12.Program.case_introed((eq_1‹U›
                               A_14961 #x0_15100
                               ((sing_elim_1‹U,L›)
                                 A_14961 x_14994 #a0_15108)))
trans12.Program.case_introed((sing_3‹U,L› A_14961 x_14994))
trans12.Program.case_introed(A_14961)
Logical.assert_equal(((B_14966)
                       ((proj1_7‹U,U,U›)
                         A_14961 B_14966
                         (apair_intro_13‹U,U,U›
                           A_14961 B_14966 x_14994 select_14995))), ((B_14966)
                                                                    ((
                                                                    function sing_elim_15175 :
                                                                    ∀ {A_15176 :
                                                                    U} ->
                                                                    ∀ {x_15177 :
                                                                    A_15176} ->
                                                                    (sing_3‹U,L›
                                                                    A_15176
                                                                    x_15177) ->
                                                                    A_15176
                                                                    | 
                                                                    A_15179 x_15180 (just_3 m_15181) =>
                                                                    m_15181)
                                                                    A_14961
                                                                    x_14994
                                                                    ((select_14995)
                                                                    true_5))))
trans12.Program.case_introed((apair_10‹U,U,U› #A_14961 #B_14966))
trans12.Program.case_introed(#A_14961 -> U)
trans12.Program.case_introed(U)
Logical.assert_equal(∀ {A_15183 : U} ->
                       ∀ {B_15184 : A_15183 -> U} ->
                         ∀ (x_15186 :
                           (apair_10‹U,U,U› A_15183 B_15184)) ->
                           ((B_15184)
                             ((proj1_7‹U,U,U›) A_15183 B_15184 x_15186)), 
∀ {A_15187 : U} ->
  ∀ {B_15188 : A_15187 -> U} ->
    ∀ (x_15190 : (apair_10‹U,U,U› A_15187 B_15188)) ->
      ((B_15188) ((proj1_7‹U,U,U›) A_15187 B_15188 x_15190)))
Logical.infer_tm((apair_10‹U,L,U›
                   nat_8
                   function _15195 : nat_8 -> L
                   | __15197 =>
                     match __15197 in nat_8 -o L with
                     | zero_10 => ((stream_3‹U›) nat_8)
                     | (succ_11 __15199) => unit_4‹L›))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm(
  function _15200 : nat_8 -> L
  | __15202 =>
    match __15202 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __15204) => unit_4‹L›,
  nat_8 -> L
)
Logical.infer_tm(function _15206 : nat_8 -> L
                 | __15208 =>
                   match __15208 in nat_8 -o L with
                   | zero_10 => ((stream_3‹U›) nat_8)
                   | (succ_11 __15210) => unit_4‹L›)
Logical.infer_tm(nat_8 -> L)
Logical.infer_tm(nat_8)
Logical.infer_tm(L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #n_15215, __15214 : nat_8) ::: [] =>?
         match #__15214 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __15218) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?(R #n_15215, __15214 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #n_15215, #__15214)
case_coverage_ok(
  match n_15215 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15223) => unit_4‹L›, L)
Logical.check_tm(
  match n_15215 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15225) => unit_4‹L›, L
)
Logical.infer_tm(match n_15215 in nat_8 -o L with
                 | zero_10 => ((stream_3‹U›) nat_8)
                 | (succ_11 __15227) => unit_4‹L›)
Logical.check_tm( n_15215, nat_8 )
Logical.infer_tm(n_15215)
Logical.assert_equal(nat_8, nat_8)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( ((stream_3‹U›) nat_8), L)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?(R #__15233, __15228 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?(R #__15233, __15228 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__15233, #__15228)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.assert_equal(nat_8 -> L, nat_8 -> L)
Program.check_tm(
  (apair_intro_13‹U,L,U›
    nat_8
    function _15240 : nat_8 -> L
    | __15242 =>
      match __15242 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __15244) => unit_4‹L›
    zero_10
    function _15245 :
      ∀ (b_15246 : bool_5) ->
        match b_15246 in bool_5 -o L with
        | true_5 => (sing_3‹U,L› nat_8 zero_10)
        | false_6 =>
          (boxed_2‹L›
            ((function _15248 : nat_8 -> L
              | __15250 =>
                match __15250 in nat_8 -o L with
                | zero_10 => ((stream_3‹U›) nat_8)
                | (succ_11 __15252) => unit_4‹L›)
              zero_10))
    | true_5 => (just_3‹U,L› nat_8 zero_10)
    | false_6 =>
      (box_2‹L› ((stream_3‹U›) nat_8) ((nat_make_6) zero_10))),
  (apair_10‹U,L,U›
    nat_8
    function _15253 : nat_8 -> L
    | __15255 =>
      match __15255 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __15257) => unit_4‹L›)
)
Program.infer_tm((apair_intro_13‹U,L,U›
                   nat_8
                   function _15258 : nat_8 -> L
                   | __15260 =>
                     match __15260 in nat_8 -o L with
                     | zero_10 => ((stream_3‹U›) nat_8)
                     | (succ_11 __15262) => unit_4‹L›
                   zero_10
                   function _15263 :
                     ∀ (b_15264 : bool_5) ->
                       match b_15264 in bool_5 -o L with
                       | true_5 => (sing_3‹U,L› nat_8 zero_10)
                       | false_6 =>
                         (boxed_2‹L›
                           ((function _15266 : nat_8 -> L
                             | __15268 =>
                               match __15268 in nat_8 -o L with
                               | zero_10 => ((stream_3‹U›) nat_8)
                               | (succ_11 __15270) => unit_4‹L›)
                             zero_10))
                   | true_5 => (just_3‹U,L› nat_8 zero_10)
                   | false_6 =>
                     (box_2‹L›
                       ((stream_3‹U›) nat_8) ((nat_make_6) zero_10))))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm(
  function _15271 : nat_8 -> L
  | __15273 =>
    match __15273 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __15275) => unit_4‹L›,
  nat_8 -> L
)
Logical.infer_tm(function _15277 : nat_8 -> L
                 | __15279 =>
                   match __15279 in nat_8 -o L with
                   | zero_10 => ((stream_3‹U›) nat_8)
                   | (succ_11 __15281) => unit_4‹L›)
Logical.infer_tm(nat_8 -> L)
Logical.infer_tm(nat_8)
Logical.infer_tm(L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #n_15286, __15285 : nat_8) ::: [] =>?
         match #__15285 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __15289) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?(R #n_15286, __15285 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #n_15286, #__15285)
case_coverage_ok(
  match n_15286 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15294) => unit_4‹L›, L)
Logical.check_tm(
  match n_15286 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15296) => unit_4‹L›, L
)
Logical.infer_tm(match n_15286 in nat_8 -o L with
                 | zero_10 => ((stream_3‹U›) nat_8)
                 | (succ_11 __15298) => unit_4‹L›)
Logical.check_tm( n_15286, nat_8 )
Logical.infer_tm(n_15286)
Logical.assert_equal(nat_8, nat_8)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( ((stream_3‹U›) nat_8), L)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?(R #__15304, __15299 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?(R #__15304, __15299 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__15304, #__15299)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.assert_equal(nat_8 -> L, nat_8 -> L)
Logical.check_tm( zero_10, nat_8 )
Logical.infer_tm(zero_10)
Logical.assert_equal(nat_8, nat_8)
Program.check_tm(
  function _15311 :
    ∀ (b_15312 : bool_5) ->
      match b_15312 in bool_5 -o L with
      | true_5 => (sing_3‹U,L› nat_8 zero_10)
      | false_6 =>
        (boxed_2‹L›
          ((function _15314 : nat_8 -> L
            | __15316 =>
              match __15316 in nat_8 -o L with
              | zero_10 => ((stream_3‹U›) nat_8)
              | (succ_11 __15318) => unit_4‹L›)
            zero_10))
  | true_5 => (just_3‹U,L› nat_8 zero_10)
  | false_6 =>
    (box_2‹L› ((stream_3‹U›) nat_8) ((nat_make_6) zero_10)),
  ∀ (b_15319 : bool_5) ->
    match b_15319 in bool_5 -o L with
    | true_5 => (sing_3‹U,L› nat_8 zero_10)
    | false_6 =>
      (boxed_2‹L›
        ((function _15321 : nat_8 -> L
          | __15323 =>
            match __15323 in nat_8 -o L with
            | zero_10 => ((stream_3‹U›) nat_8)
            | (succ_11 __15325) => unit_4‹L›)
          zero_10))
)
Program.infer_tm(function _15326 :
                   ∀ (b_15327 : bool_5) ->
                     match b_15327 in bool_5 -o L with
                     | true_5 => (sing_3‹U,L› nat_8 zero_10)
                     | false_6 =>
                       (boxed_2‹L›
                         ((function _15329 : nat_8 -> L
                           | __15331 =>
                             match __15331 in nat_8 -o L with
                             | zero_10 => ((stream_3‹U›) nat_8)
                             | (succ_11 __15333) => unit_4‹L›)
                           zero_10))
                 | true_5 => (just_3‹U,L› nat_8 zero_10)
                 | false_6 =>
                   (box_2‹L›
                     ((stream_3‹U›) nat_8) ((nat_make_6) zero_10)))
Logical.infer_tm(∀ (b_15335 : bool_5) ->
                   match b_15335 in bool_5 -o L with
                   | true_5 => (sing_3‹U,L› nat_8 zero_10)
                   | false_6 =>
                     (boxed_2‹L›
                       ((function _15337 : nat_8 -> L
                         | __15339 =>
                           match __15339 in nat_8 -o L with
                           | zero_10 => ((stream_3‹U›) nat_8)
                           | (succ_11 __15341) => unit_4‹L›)
                         zero_10)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_15342 in bool_5 -o L with
                 | true_5 => (sing_3‹U,L› nat_8 zero_10)
                 | false_6 =>
                   (boxed_2‹L›
                     ((function _15344 : nat_8 -> L
                       | __15346 =>
                         match __15346 in nat_8 -o L with
                         | zero_10 => ((stream_3‹U›) nat_8)
                         | (succ_11 __15348) => unit_4‹L›)
                       zero_10)))
Logical.check_tm( b_15342, bool_5 )
Logical.infer_tm(b_15342)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (sing_3‹U,L› nat_8 zero_10) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (sing_3‹U,L› nat_8 zero_10), L)
Logical.check_tm( (sing_3‹U,L› nat_8 zero_10), L )
Logical.infer_tm((sing_3‹U,L› nat_8 zero_10))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( zero_10, nat_8 )
Logical.infer_tm(zero_10)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>?
         (boxed_2‹L›
           ((function _15350 : nat_8 -> L
             | __15352 =>
               match __15352 in nat_8 -o L with
               | zero_10 => ((stream_3‹U›) nat_8)
               | (succ_11 __15354) => unit_4‹L›)
             zero_10))
    |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok(
  (boxed_2‹L›
    ((function _15360 : nat_8 -> L
      | __15362 =>
        match __15362 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __15364) => unit_4‹L›)
      zero_10)),
  L)
Logical.check_tm(
  (boxed_2‹L›
    ((function _15365 : nat_8 -> L
      | __15367 =>
        match __15367 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __15369) => unit_4‹L›)
      zero_10)),
  L
)
Logical.infer_tm((boxed_2‹L›
                   ((function _15370 : nat_8 -> L
                     | __15372 =>
                       match __15372 in nat_8 -o L with
                       | zero_10 => ((stream_3‹U›) nat_8)
                       | (succ_11 __15374) => unit_4‹L›)
                     zero_10)))
Logical.check_tm(
  ((function _15375 : nat_8 -> L
    | __15377 =>
      match __15377 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __15379) => unit_4‹L›)
    zero_10),
  L
)
Logical.infer_tm(((function _15380 : nat_8 -> L
                   | __15382 =>
                     match __15382 in nat_8 -o L with
                     | zero_10 => ((stream_3‹U›) nat_8)
                     | (succ_11 __15384) => unit_4‹L›)
                   zero_10))
Logical.infer_tm(function _15385 : nat_8 -> L
                 | __15387 =>
                   match __15387 in nat_8 -o L with
                   | zero_10 => ((stream_3‹U›) nat_8)
                   | (succ_11 __15389) => unit_4‹L›)
Logical.infer_tm(nat_8 -> L)
Logical.infer_tm(nat_8)
Logical.infer_tm(L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #n_15394, __15393 : nat_8) ::: [] =>?
         match #__15393 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __15397) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?(R #n_15394, __15393 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #n_15394, #__15393)
case_coverage_ok(
  match n_15394 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15402) => unit_4‹L›, L)
Logical.check_tm(
  match n_15394 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15404) => unit_4‹L›, L
)
Logical.infer_tm(match n_15394 in nat_8 -o L with
                 | zero_10 => ((stream_3‹U›) nat_8)
                 | (succ_11 __15406) => unit_4‹L›)
Logical.check_tm( n_15394, nat_8 )
Logical.infer_tm(n_15394)
Logical.assert_equal(nat_8, nat_8)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( ((stream_3‹U›) nat_8), L)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?(R #__15412, __15407 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?(R #__15412, __15407 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__15412, #__15407)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.check_tm( zero_10, nat_8 )
Logical.infer_tm(zero_10)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
trans12.Program.case_intro(b_15416, bool_5)
Logical.infer_tm(bool_5)
Logical.infer_tm(bool_5)
trans12.Program.case_split(bool_5, true_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>? (just_3‹U,L› nat_8 zero_10) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok( (just_3‹U,L› nat_8 zero_10),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹U,L› nat_8 zero_10)
  | false_6 =>
    (boxed_2‹L›
      ((function _15458 : nat_8 -> L
        | __15460 =>
          match __15460 in nat_8 -o L with
          | zero_10 => ((stream_3‹U›) nat_8)
          | (succ_11 __15462) => unit_4‹L›)
        zero_10)))
Program.check_tm( (just_3‹U,L› nat_8 zero_10),
  match true_5 in bool_5 -o L with
  | true_5 => (sing_3‹U,L› nat_8 zero_10)
  | false_6 =>
    (boxed_2‹L›
      ((function _15464 : nat_8 -> L
        | __15466 =>
          match __15466 in nat_8 -o L with
          | zero_10 => ((stream_3‹U›) nat_8)
          | (succ_11 __15468) => unit_4‹L›)
        zero_10))
)
Program.infer_tm((just_3‹U,L› nat_8 zero_10))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Program.check_tm( zero_10, nat_8 )
Program.infer_tm(zero_10)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(match true_5 in bool_5 -o L with
                     | true_5 => (sing_3‹U,L› nat_8 zero_10)
                     | false_6 =>
                       (boxed_2‹L›
                         ((function _15470 : nat_8 -> L
                           | __15472 =>
                             match __15472 in nat_8 -o L with
                             | zero_10 => ((stream_3‹U›) nat_8)
                             | (succ_11 __15474) => unit_4‹L›)
                           zero_10)), (sing_3‹U,L› nat_8 zero_10))
trans12.Program.case_split(bool_5, false_6)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>?
         (box_2‹L› ((stream_3‹U›) nat_8) ((nat_make_6) zero_10))
    |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok(
  (box_2‹L› ((stream_3‹U›) nat_8) ((nat_make_6) zero_10)),
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹U,L› nat_8 zero_10)
  | false_6 =>
    (boxed_2‹L›
      ((function _15502 : nat_8 -> L
        | __15504 =>
          match __15504 in nat_8 -o L with
          | zero_10 => ((stream_3‹U›) nat_8)
          | (succ_11 __15506) => unit_4‹L›)
        zero_10)))
Program.check_tm(
  (box_2‹L› ((stream_3‹U›) nat_8) ((nat_make_6) zero_10)),
  match false_6 in bool_5 -o L with
  | true_5 => (sing_3‹U,L› nat_8 zero_10)
  | false_6 =>
    (boxed_2‹L›
      ((function _15508 : nat_8 -> L
        | __15510 =>
          match __15510 in nat_8 -o L with
          | zero_10 => ((stream_3‹U›) nat_8)
          | (succ_11 __15512) => unit_4‹L›)
        zero_10))
)
Program.infer_tm((box_2‹L›
                   ((stream_3‹U›) nat_8) ((nat_make_6) zero_10)))
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Program.check_tm( ((nat_make_6) zero_10), ((stream_3‹U›) nat_8) )
Program.infer_tm(((nat_make_6) zero_10))
Program.infer_tm(nat_make_6)
Program.check_tm( zero_10, nat_8 )
Program.infer_tm(zero_10)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
Logical.assert_equal(match false_6 in bool_5 -o L with
                     | true_5 => (sing_3‹U,L› nat_8 zero_10)
                     | false_6 =>
                       (boxed_2‹L›
                         ((function _15514 : nat_8 -> L
                           | __15516 =>
                             match __15516 in nat_8 -o L with
                             | zero_10 => ((stream_3‹U›) nat_8)
                             | (succ_11 __15518) => unit_4‹L›)
                           zero_10)), (boxed_2‹L›
                                        ((stream_3‹U›) nat_8)))
trans12.Program.case_introed(bool_5)
Logical.assert_equal(∀ (b_15519 : bool_5) ->
                       match b_15519 in bool_5 -o L with
                       | true_5 => (sing_3‹U,L› nat_8 zero_10)
                       | false_6 =>
                         (boxed_2‹L›
                           ((function _15521 : nat_8 -> L
                             | __15523 =>
                               match __15523 in nat_8 -o L with
                               | zero_10 => ((stream_3‹U›) nat_8)
                               | (succ_11 __15525) => unit_4‹L›)
                             zero_10)), ∀ (b_15526 : bool_5) ->
                                          match b_15526 in bool_5 -o L with
                                          | true_5 =>
                                            (sing_3‹U,L› nat_8 zero_10)
                                          | false_6 =>
                                            (boxed_2‹L›
                                              ((function _15528 : nat_8 -> L
                                                | __15530 =>
                                                  match __15530 in nat_8 -o L
                                                  with
                                                  | zero_10 =>
                                                    ((stream_3‹U›) nat_8)
                                                  | (succ_11 __15532) =>
                                                    unit_4‹L›)
                                                zero_10)))
Logical.assert_equal((apair_10‹U,L,U›
                       nat_8
                       function _15535 : nat_8 -> L
                       | __15537 =>
                         match __15537 in nat_8 -o L with
                         | zero_10 => ((stream_3‹U›) nat_8)
                         | (succ_11 __15539) => unit_4‹L›), (apair_10‹U,L,U›
                                                                  nat_8
                                                                  function _15540 :
                                                                    nat_8 ->
                                                                    L
                                                                  | __15542 =>
                                                                    match __15542 in
                                                                    nat_8 -o
                                                                    L with
                                                                    | 
                                                                    zero_10 =>
                                                                    ((stream_3‹U›)
                                                                    nat_8)
                                                                    | 
                                                                    (succ_11 __15544) =>
                                                                    unit_4‹L›))
Logical.infer_tm((apair_10‹U,L,L›
                   nat_8
                   function _15549 : nat_8 -> L
                   | __15551 =>
                     match __15551 in nat_8 -o L with
                     | zero_10 => ((stream_3‹U›) nat_8)
                     | (succ_11 __15553) => unit_4‹L›))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm(
  function _15554 : nat_8 -> L
  | __15556 =>
    match __15556 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __15558) => unit_4‹L›,
  nat_8 -> L
)
Logical.infer_tm(function _15560 : nat_8 -> L
                 | __15562 =>
                   match __15562 in nat_8 -o L with
                   | zero_10 => ((stream_3‹U›) nat_8)
                   | (succ_11 __15564) => unit_4‹L›)
Logical.infer_tm(nat_8 -> L)
Logical.infer_tm(nat_8)
Logical.infer_tm(L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #n_15569, __15568 : nat_8) ::: [] =>?
         match #__15568 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __15572) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?(R #n_15569, __15568 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #n_15569, #__15568)
case_coverage_ok(
  match n_15569 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15577) => unit_4‹L›, L)
Logical.check_tm(
  match n_15569 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15579) => unit_4‹L›, L
)
Logical.infer_tm(match n_15569 in nat_8 -o L with
                 | zero_10 => ((stream_3‹U›) nat_8)
                 | (succ_11 __15581) => unit_4‹L›)
Logical.check_tm( n_15569, nat_8 )
Logical.infer_tm(n_15569)
Logical.assert_equal(nat_8, nat_8)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( ((stream_3‹U›) nat_8), L)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?(R #__15587, __15582 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?(R #__15587, __15582 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__15587, #__15582)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.assert_equal(nat_8 -> L, nat_8 -> L)
Program.check_tm(
  let nat_stream_15594 := ((nat_make_6) zero_10) in
  (apair_intro_13‹U,L,L›
    nat_8
    function _15595 : nat_8 -> L
    | __15597 =>
      match __15597 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __15599) => unit_4‹L›
    match ((uncons_stream_5‹U›) nat_8 nat_stream_15594) in
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
    with
    | (pair_9 m_15601 n_15602) =>
      let __15603 := ((free_stream_4‹U›) nat_8 n_15602) in m_15601
    function _15604 :
      ∀ (b_15605 : bool_5) -o
        match b_15605 in bool_5 -o L with
        | true_5 =>
          (sing_3‹U,L›
            nat_8
            match ((uncons_stream_5‹U›) nat_8 nat_stream_15594) in
              (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
            with
            | (pair_9 m_15608 n_15609) =>
              let __15610 := ((free_stream_4‹U›) nat_8 n_15609) in
              m_15608)
        | false_6 =>
          (boxed_2‹L›
            ((function _15611 : nat_8 -> L
              | __15613 =>
                match __15613 in nat_8 -o L with
                | zero_10 => ((stream_3‹U›) nat_8)
                | (succ_11 __15615) => unit_4‹L›)
              match ((uncons_stream_5‹U›) nat_8 nat_stream_15594) in
                (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
              with
              | (pair_9 m_15617 n_15618) =>
                let __15619 := ((free_stream_4‹U›) nat_8 n_15618) in
                m_15617))
    | true_5 =>
      (just_3‹U,L›
        nat_8
        match ((uncons_stream_5‹U›) nat_8 nat_stream_15594) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_15621 n_15622) =>
          let __15623 := ((free_stream_4‹U›) nat_8 n_15622) in m_15621)
    | false_6 =>
      (box_2‹L›
        match match ((uncons_stream_5‹U›) nat_8 nat_stream_15594) in
                (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
              with
              | (pair_9 m_15625 n_15626) =>
                let __15627 := ((free_stream_4‹U›) nat_8 n_15626) in
                m_15625 in
          nat_8 -o L
        with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __15629) => unit_4‹L› nat_stream_15594)),
  (apair_10‹U,L,L›
    nat_8
    function _15630 : nat_8 -> L
    | __15632 =>
      match __15632 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __15634) => unit_4‹L›)
)
Program.infer_tm(let nat_stream_15635 := ((nat_make_6) zero_10) in
                 (apair_intro_13‹U,L,L›
                   nat_8
                   function _15636 : nat_8 -> L
                   | __15638 =>
                     match __15638 in nat_8 -o L with
                     | zero_10 => ((stream_3‹U›) nat_8)
                     | (succ_11 __15640) => unit_4‹L›
                   match ((uncons_stream_5‹U›) nat_8 nat_stream_15635) in
                     (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                       nat_8
                   with
                   | (pair_9 m_15642 n_15643) =>
                     let __15644 := ((free_stream_4‹U›) nat_8 n_15643) in
                     m_15642
                   function _15645 :
                     ∀ (b_15646 : bool_5) -o
                       match b_15646 in bool_5 -o L with
                       | true_5 =>
                         (sing_3‹U,L›
                           nat_8
                           match ((uncons_stream_5‹U›)
                                   nat_8 nat_stream_15635) in
                             (prod_7‹U,L,L›
                               nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                           with
                           | (pair_9 m_15649 n_15650) =>
                             let __15651 :=
                               ((free_stream_4‹U›) nat_8 n_15650)
                             in m_15649)
                       | false_6 =>
                         (boxed_2‹L›
                           ((function _15652 : nat_8 -> L
                             | __15654 =>
                               match __15654 in nat_8 -o L with
                               | zero_10 => ((stream_3‹U›) nat_8)
                               | (succ_11 __15656) => unit_4‹L›)
                             match ((uncons_stream_5‹U›)
                                     nat_8 nat_stream_15635) in
                               (prod_7‹U,L,L›
                                 nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                             with
                             | (pair_9 m_15658 n_15659) =>
                               let __15660 :=
                                 ((free_stream_4‹U›) nat_8 n_15659)
                               in m_15658))
                   | true_5 =>
                     (just_3‹U,L›
                       nat_8
                       match ((uncons_stream_5‹U›)
                               nat_8 nat_stream_15635) in
                         (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                           nat_8
                       with
                       | (pair_9 m_15662 n_15663) =>
                         let __15664 :=
                           ((free_stream_4‹U›) nat_8 n_15663)
                         in m_15662)
                   | false_6 =>
                     (box_2‹L›
                       match match ((uncons_stream_5‹U›)
                                     nat_8 nat_stream_15635) in
                               (prod_7‹U,L,L›
                                 nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                             with
                             | (pair_9 m_15666 n_15667) =>
                               let __15668 :=
                                 ((free_stream_4‹U›) nat_8 n_15667)
                               in m_15666 in
                         nat_8 -o L
                       with
                       | zero_10 => ((stream_3‹U›) nat_8)
                       | (succ_11 __15670) => unit_4‹L› nat_stream_15635)))
Program.infer_tm(((nat_make_6) zero_10))
Program.infer_tm(nat_make_6)
Program.check_tm( zero_10, nat_8 )
Program.infer_tm(zero_10)
Logical.assert_equal(nat_8, nat_8)
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Program.infer_tm((apair_intro_13‹U,L,L›
                   nat_8
                   function _15672 : nat_8 -> L
                   | __15674 =>
                     match __15674 in nat_8 -o L with
                     | zero_10 => ((stream_3‹U›) nat_8)
                     | (succ_11 __15676) => unit_4‹L›
                   match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                     (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                       nat_8
                   with
                   | (pair_9 m_15678 n_15679) =>
                     let __15680 := ((free_stream_4‹U›) nat_8 n_15679) in
                     m_15678
                   function _15681 :
                     ∀ (b_15682 : bool_5) -o
                       match b_15682 in bool_5 -o L with
                       | true_5 =>
                         (sing_3‹U,L›
                           nat_8
                           match ((uncons_stream_5‹U›)
                                   nat_8 nat_stream_15671) in
                             (prod_7‹U,L,L›
                               nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                           with
                           | (pair_9 m_15685 n_15686) =>
                             let __15687 :=
                               ((free_stream_4‹U›) nat_8 n_15686)
                             in m_15685)
                       | false_6 =>
                         (boxed_2‹L›
                           ((function _15688 : nat_8 -> L
                             | __15690 =>
                               match __15690 in nat_8 -o L with
                               | zero_10 => ((stream_3‹U›) nat_8)
                               | (succ_11 __15692) => unit_4‹L›)
                             match ((uncons_stream_5‹U›)
                                     nat_8 nat_stream_15671) in
                               (prod_7‹U,L,L›
                                 nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                             with
                             | (pair_9 m_15694 n_15695) =>
                               let __15696 :=
                                 ((free_stream_4‹U›) nat_8 n_15695)
                               in m_15694))
                   | true_5 =>
                     (just_3‹U,L›
                       nat_8
                       match ((uncons_stream_5‹U›)
                               nat_8 nat_stream_15671) in
                         (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                           nat_8
                       with
                       | (pair_9 m_15698 n_15699) =>
                         let __15700 :=
                           ((free_stream_4‹U›) nat_8 n_15699)
                         in m_15698)
                   | false_6 =>
                     (box_2‹L›
                       match match ((uncons_stream_5‹U›)
                                     nat_8 nat_stream_15671) in
                               (prod_7‹U,L,L›
                                 nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                             with
                             | (pair_9 m_15702 n_15703) =>
                               let __15704 :=
                                 ((free_stream_4‹U›) nat_8 n_15703)
                               in m_15702 in
                         nat_8 -o L
                       with
                       | zero_10 => ((stream_3‹U›) nat_8)
                       | (succ_11 __15706) => unit_4‹L› nat_stream_15671)))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm(
  function _15707 : nat_8 -> L
  | __15709 =>
    match __15709 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __15711) => unit_4‹L›,
  nat_8 -> L
)
Logical.infer_tm(function _15713 : nat_8 -> L
                 | __15715 =>
                   match __15715 in nat_8 -o L with
                   | zero_10 => ((stream_3‹U›) nat_8)
                   | (succ_11 __15717) => unit_4‹L›)
Logical.infer_tm(nat_8 -> L)
Logical.infer_tm(nat_8)
Logical.infer_tm(L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #n_15722, __15721 : nat_8) ::: [] =>?
         match #__15721 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __15725) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?(R #n_15722, __15721 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #n_15722, #__15721)
case_coverage_ok(
  match n_15722 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15730) => unit_4‹L›, L)
Logical.check_tm(
  match n_15722 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15732) => unit_4‹L›, L
)
Logical.infer_tm(match n_15722 in nat_8 -o L with
                 | zero_10 => ((stream_3‹U›) nat_8)
                 | (succ_11 __15734) => unit_4‹L›)
Logical.check_tm( n_15722, nat_8 )
Logical.infer_tm(n_15722)
Logical.assert_equal(nat_8, nat_8)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( ((stream_3‹U›) nat_8), L)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?(R #__15740, __15735 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?(R #__15740, __15735 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__15740, #__15735)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.assert_equal(nat_8 -> L, nat_8 -> L)
Logical.check_tm(
  match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
  with
  | (pair_9 m_15748 n_15749) =>
    let __15750 := ((free_stream_4‹U›) nat_8 n_15749) in m_15748,
  nat_8
)
Logical.infer_tm(match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                   (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                     nat_8
                 with
                 | (pair_9 m_15752 n_15753) =>
                   let __15754 := ((free_stream_4‹U›) nat_8 n_15753) in
                   m_15752)
Logical.check_tm( ((uncons_stream_5‹U›) nat_8 nat_stream_15671),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8))
)
Logical.infer_tm(((uncons_stream_5‹U›) nat_8 nat_stream_15671))
Logical.infer_tm(((uncons_stream_5‹U›) nat_8))
Logical.infer_tm(uncons_stream_5‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( nat_stream_15671, ((stream_3‹U›) nat_8) )
Logical.infer_tm(nat_stream_15671)
Logical.assert_equal(((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
Logical.assert_equal((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), 
(prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Logical.infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
case_coverage{|
  prblm {|
    eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)));
    {| eq_pat?(R #m_15758, m_15755 : nat_8)
       eq_pat?(R #n_15759, n_15756 :
         ∀ (x_15760 : choice_6) -o
           match x_15760 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› nat_8)
           | free_8 => unit_4‹L›) ::: [] =>?
         let __15762 := ((free_stream_4‹U›) nat_8 #n_15756) in #m_15755
    |}
  |}
|}
unify_local(
  eq_pat?(R #m_15758, m_15755 : nat_8)
  eq_pat?(R #n_15759, n_15756 :
    ∀ (x_15763 : choice_6) -o
      match x_15763 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› nat_8)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
)
simpl_pprbm ~expand:false( #m_15758, #m_15755)
simpl_pprbm ~expand:false( #n_15759, #n_15756)
simpl_pprbm ~expand:false(
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
simpl_pprbm ~expand:false( nat_8, nat_8)
simpl_pprbm ~expand:false( ((stream_3‹U›) nat_8),
  ((stream_3‹U›) nat_8))
simpl_pprbm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok(
  let __15766 := ((free_stream_4‹U›) nat_8 n_15759) in m_15758, nat_8)
Logical.check_tm(
  let __15767 := ((free_stream_4‹U›) nat_8 n_15759) in m_15758, nat_8
)
Logical.infer_tm(let __15768 := ((free_stream_4‹U›) nat_8 n_15759) in
                 m_15758)
Logical.infer_tm(((free_stream_4‹U›) nat_8 n_15759))
Logical.infer_tm(((free_stream_4‹U›) nat_8))
Logical.infer_tm(free_stream_4‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( n_15759, ((stream_3‹U›) nat_8) )
Logical.infer_tm(n_15759)
Logical.assert_equal(((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
Logical.infer_tm(unit_4‹U›)
Logical.infer_tm(m_15758)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(nat_8, nat_8)
Program.check_tm(
  function _15770 :
    ∀ (b_15771 : bool_5) -o
      match b_15771 in bool_5 -o L with
      | true_5 =>
        (sing_3‹U,L›
          nat_8
          match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
            (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
          with
          | (pair_9 m_15774 n_15775) =>
            let __15776 := ((free_stream_4‹U›) nat_8 n_15775) in m_15774)
      | false_6 =>
        (boxed_2‹L›
          ((function _15777 : nat_8 -> L
            | __15779 =>
              match __15779 in nat_8 -o L with
              | zero_10 => ((stream_3‹U›) nat_8)
              | (succ_11 __15781) => unit_4‹L›)
            match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
              (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
            with
            | (pair_9 m_15783 n_15784) =>
              let __15785 := ((free_stream_4‹U›) nat_8 n_15784) in
              m_15783))
  | true_5 =>
    (just_3‹U,L›
      nat_8
      match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
        (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
      with
      | (pair_9 m_15787 n_15788) =>
        let __15789 := ((free_stream_4‹U›) nat_8 n_15788) in m_15787)
  | false_6 =>
    (box_2‹L›
      match match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
              (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
            with
            | (pair_9 m_15791 n_15792) =>
              let __15793 := ((free_stream_4‹U›) nat_8 n_15792) in
              m_15791 in
        nat_8 -o L
      with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __15795) => unit_4‹L› nat_stream_15671),
  ∀ (b_15796 : bool_5) -o
    match b_15796 in bool_5 -o L with
    | true_5 =>
      (sing_3‹U,L›
        nat_8
        match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_15799 n_15800) =>
          let __15801 := ((free_stream_4‹U›) nat_8 n_15800) in m_15799)
    | false_6 =>
      (boxed_2‹L›
        ((function _15802 : nat_8 -> L
          | __15804 =>
            match __15804 in nat_8 -o L with
            | zero_10 => ((stream_3‹U›) nat_8)
            | (succ_11 __15806) => unit_4‹L›)
          match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
            (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
          with
          | (pair_9 m_15808 n_15809) =>
            let __15810 := ((free_stream_4‹U›) nat_8 n_15809) in m_15808))
)
Program.infer_tm(function _15811 :
                   ∀ (b_15812 : bool_5) -o
                     match b_15812 in bool_5 -o L with
                     | true_5 =>
                       (sing_3‹U,L›
                         nat_8
                         match ((uncons_stream_5‹U›)
                                 nat_8 nat_stream_15671) in
                           (prod_7‹U,L,L›
                             nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                         with
                         | (pair_9 m_15815 n_15816) =>
                           let __15817 :=
                             ((free_stream_4‹U›) nat_8 n_15816)
                           in m_15815)
                     | false_6 =>
                       (boxed_2‹L›
                         ((function _15818 : nat_8 -> L
                           | __15820 =>
                             match __15820 in nat_8 -o L with
                             | zero_10 => ((stream_3‹U›) nat_8)
                             | (succ_11 __15822) => unit_4‹L›)
                           match ((uncons_stream_5‹U›)
                                   nat_8 nat_stream_15671) in
                             (prod_7‹U,L,L›
                               nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                           with
                           | (pair_9 m_15824 n_15825) =>
                             let __15826 :=
                               ((free_stream_4‹U›) nat_8 n_15825)
                             in m_15824))
                 | true_5 =>
                   (just_3‹U,L›
                     nat_8
                     match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                       (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                         nat_8
                     with
                     | (pair_9 m_15828 n_15829) =>
                       let __15830 := ((free_stream_4‹U›) nat_8 n_15829)
                       in m_15828)
                 | false_6 =>
                   (box_2‹L›
                     match match ((uncons_stream_5‹U›)
                                   nat_8 nat_stream_15671) in
                             (prod_7‹U,L,L›
                               nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                           with
                           | (pair_9 m_15832 n_15833) =>
                             let __15834 :=
                               ((free_stream_4‹U›) nat_8 n_15833)
                             in m_15832 in
                       nat_8 -o L
                     with
                     | zero_10 => ((stream_3‹U›) nat_8)
                     | (succ_11 __15836) => unit_4‹L› nat_stream_15671))
Logical.infer_tm(∀ (b_15838 : bool_5) -o
                   match b_15838 in bool_5 -o L with
                   | true_5 =>
                     (sing_3‹U,L›
                       nat_8
                       match ((uncons_stream_5‹U›)
                               nat_8 nat_stream_15671) in
                         (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                           nat_8
                       with
                       | (pair_9 m_15841 n_15842) =>
                         let __15843 :=
                           ((free_stream_4‹U›) nat_8 n_15842)
                         in m_15841)
                   | false_6 =>
                     (boxed_2‹L›
                       ((function _15844 : nat_8 -> L
                         | __15846 =>
                           match __15846 in nat_8 -o L with
                           | zero_10 => ((stream_3‹U›) nat_8)
                           | (succ_11 __15848) => unit_4‹L›)
                         match ((uncons_stream_5‹U›)
                                 nat_8 nat_stream_15671) in
                           (prod_7‹U,L,L›
                             nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                         with
                         | (pair_9 m_15850 n_15851) =>
                           let __15852 :=
                             ((free_stream_4‹U›) nat_8 n_15851)
                           in m_15850)))
Logical.infer_tm(bool_5)
Logical.infer_tm(match b_15853 in bool_5 -o L with
                 | true_5 =>
                   (sing_3‹U,L›
                     nat_8
                     match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                       (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                         nat_8
                     with
                     | (pair_9 m_15856 n_15857) =>
                       let __15858 := ((free_stream_4‹U›) nat_8 n_15857)
                       in m_15856)
                 | false_6 =>
                   (boxed_2‹L›
                     ((function _15859 : nat_8 -> L
                       | __15861 =>
                         match __15861 in nat_8 -o L with
                         | zero_10 => ((stream_3‹U›) nat_8)
                         | (succ_11 __15863) => unit_4‹L›)
                       match ((uncons_stream_5‹U›)
                               nat_8 nat_stream_15671) in
                         (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                           nat_8
                       with
                       | (pair_9 m_15865 n_15866) =>
                         let __15867 :=
                           ((free_stream_4‹U›) nat_8 n_15866)
                         in m_15865)))
Logical.check_tm( b_15853, bool_5 )
Logical.infer_tm(b_15853)
Logical.assert_equal(bool_5, bool_5)
Logical.infer_tm(bool_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>?
         (sing_3‹U,L›
           nat_8
           match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
             (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
           with
           | (pair_9 m_15870 n_15871) =>
             let __15872 := ((free_stream_4‹U›) nat_8 n_15871) in m_15870)
    |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok(
  (sing_3‹U,L›
    nat_8
    match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
    with
    | (pair_9 m_15878 n_15879) =>
      let __15880 := ((free_stream_4‹U›) nat_8 n_15879) in m_15878),
  L)
Logical.check_tm(
  (sing_3‹U,L›
    nat_8
    match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
    with
    | (pair_9 m_15882 n_15883) =>
      let __15884 := ((free_stream_4‹U›) nat_8 n_15883) in m_15882),
  L
)
Logical.infer_tm((sing_3‹U,L›
                   nat_8
                   match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                     (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                       nat_8
                   with
                   | (pair_9 m_15886 n_15887) =>
                     let __15888 := ((free_stream_4‹U›) nat_8 n_15887) in
                     m_15886))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm(
  match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
  with
  | (pair_9 m_15890 n_15891) =>
    let __15892 := ((free_stream_4‹U›) nat_8 n_15891) in m_15890,
  nat_8
)
Logical.infer_tm(match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                   (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                     nat_8
                 with
                 | (pair_9 m_15894 n_15895) =>
                   let __15896 := ((free_stream_4‹U›) nat_8 n_15895) in
                   m_15894)
Logical.check_tm( ((uncons_stream_5‹U›) nat_8 nat_stream_15671),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8))
)
Logical.infer_tm(((uncons_stream_5‹U›) nat_8 nat_stream_15671))
Logical.infer_tm(((uncons_stream_5‹U›) nat_8))
Logical.infer_tm(uncons_stream_5‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( nat_stream_15671, ((stream_3‹U›) nat_8) )
Logical.infer_tm(nat_stream_15671)
Logical.assert_equal(((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
Logical.assert_equal((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), 
(prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Logical.infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
case_coverage{|
  prblm {|
    eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)));
    {| eq_pat?(R #m_15900, m_15897 : nat_8)
       eq_pat?(R #n_15901, n_15898 :
         ∀ (x_15902 : choice_6) -o
           match x_15902 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› nat_8)
           | free_8 => unit_4‹L›) ::: [] =>?
         let __15904 := ((free_stream_4‹U›) nat_8 #n_15898) in #m_15897
    |}
  |}
|}
unify_local(
  eq_pat?(R #m_15900, m_15897 : nat_8)
  eq_pat?(R #n_15901, n_15898 :
    ∀ (x_15905 : choice_6) -o
      match x_15905 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› nat_8)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
)
simpl_pprbm ~expand:false( #m_15900, #m_15897)
simpl_pprbm ~expand:false( #n_15901, #n_15898)
simpl_pprbm ~expand:false(
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
simpl_pprbm ~expand:false( nat_8, nat_8)
simpl_pprbm ~expand:false( ((stream_3‹U›) nat_8),
  ((stream_3‹U›) nat_8))
simpl_pprbm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok(
  let __15908 := ((free_stream_4‹U›) nat_8 n_15901) in m_15900, nat_8)
Logical.check_tm(
  let __15909 := ((free_stream_4‹U›) nat_8 n_15901) in m_15900, nat_8
)
Logical.infer_tm(let __15910 := ((free_stream_4‹U›) nat_8 n_15901) in
                 m_15900)
Logical.infer_tm(((free_stream_4‹U›) nat_8 n_15901))
Logical.infer_tm(((free_stream_4‹U›) nat_8))
Logical.infer_tm(free_stream_4‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( n_15901, ((stream_3‹U›) nat_8) )
Logical.infer_tm(n_15901)
Logical.assert_equal(((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
Logical.infer_tm(unit_4‹U›)
Logical.infer_tm(m_15900)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(L, L)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>?
         (boxed_2‹L›
           ((function _15912 : nat_8 -> L
             | __15914 =>
               match __15914 in nat_8 -o L with
               | zero_10 => ((stream_3‹U›) nat_8)
               | (succ_11 __15916) => unit_4‹L›)
             match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
               (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
             with
             | (pair_9 m_15918 n_15919) =>
               let __15920 := ((free_stream_4‹U›) nat_8 n_15919) in
               m_15918))
    |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok(
  (boxed_2‹L›
    ((function _15930 : nat_8 -> L
      | __15932 =>
        match __15932 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __15934) => unit_4‹L›)
      match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
        (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
      with
      | (pair_9 m_15936 n_15937) =>
        let __15938 := ((free_stream_4‹U›) nat_8 n_15937) in m_15936)),
  L)
Logical.check_tm(
  (boxed_2‹L›
    ((function _15939 : nat_8 -> L
      | __15941 =>
        match __15941 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __15943) => unit_4‹L›)
      match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
        (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
      with
      | (pair_9 m_15945 n_15946) =>
        let __15947 := ((free_stream_4‹U›) nat_8 n_15946) in m_15945)),
  L
)
Logical.infer_tm((boxed_2‹L›
                   ((function _15948 : nat_8 -> L
                     | __15950 =>
                       match __15950 in nat_8 -o L with
                       | zero_10 => ((stream_3‹U›) nat_8)
                       | (succ_11 __15952) => unit_4‹L›)
                     match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                       (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                         nat_8
                     with
                     | (pair_9 m_15954 n_15955) =>
                       let __15956 := ((free_stream_4‹U›) nat_8 n_15955)
                       in m_15954)))
Logical.check_tm(
  ((function _15957 : nat_8 -> L
    | __15959 =>
      match __15959 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __15961) => unit_4‹L›)
    match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
    with
    | (pair_9 m_15963 n_15964) =>
      let __15965 := ((free_stream_4‹U›) nat_8 n_15964) in m_15963),
  L
)
Logical.infer_tm(((function _15966 : nat_8 -> L
                   | __15968 =>
                     match __15968 in nat_8 -o L with
                     | zero_10 => ((stream_3‹U›) nat_8)
                     | (succ_11 __15970) => unit_4‹L›)
                   match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                     (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                       nat_8
                   with
                   | (pair_9 m_15972 n_15973) =>
                     let __15974 := ((free_stream_4‹U›) nat_8 n_15973) in
                     m_15972))
Logical.infer_tm(function _15975 : nat_8 -> L
                 | __15977 =>
                   match __15977 in nat_8 -o L with
                   | zero_10 => ((stream_3‹U›) nat_8)
                   | (succ_11 __15979) => unit_4‹L›)
Logical.infer_tm(nat_8 -> L)
Logical.infer_tm(nat_8)
Logical.infer_tm(L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #n_15984, __15983 : nat_8) ::: [] =>?
         match #__15983 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __15987) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?(R #n_15984, __15983 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #n_15984, #__15983)
case_coverage_ok(
  match n_15984 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15992) => unit_4‹L›, L)
Logical.check_tm(
  match n_15984 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __15994) => unit_4‹L›, L
)
Logical.infer_tm(match n_15984 in nat_8 -o L with
                 | zero_10 => ((stream_3‹U›) nat_8)
                 | (succ_11 __15996) => unit_4‹L›)
Logical.check_tm( n_15984, nat_8 )
Logical.infer_tm(n_15984)
Logical.assert_equal(nat_8, nat_8)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( ((stream_3‹U›) nat_8), L)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?(R #__16002, __15997 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?(R #__16002, __15997 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__16002, #__15997)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.check_tm(
  match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
  with
  | (pair_9 m_16007 n_16008) =>
    let __16009 := ((free_stream_4‹U›) nat_8 n_16008) in m_16007,
  nat_8
)
Logical.infer_tm(match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                   (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                     nat_8
                 with
                 | (pair_9 m_16011 n_16012) =>
                   let __16013 := ((free_stream_4‹U›) nat_8 n_16012) in
                   m_16011)
Logical.check_tm( ((uncons_stream_5‹U›) nat_8 nat_stream_15671),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8))
)
Logical.infer_tm(((uncons_stream_5‹U›) nat_8 nat_stream_15671))
Logical.infer_tm(((uncons_stream_5‹U›) nat_8))
Logical.infer_tm(uncons_stream_5‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( nat_stream_15671, ((stream_3‹U›) nat_8) )
Logical.infer_tm(nat_stream_15671)
Logical.assert_equal(((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
Logical.assert_equal((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), 
(prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Logical.infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
case_coverage{|
  prblm {|
    eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)));
    {| eq_pat?(R #m_16017, m_16014 : nat_8)
       eq_pat?(R #n_16018, n_16015 :
         ∀ (x_16019 : choice_6) -o
           match x_16019 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› nat_8)
           | free_8 => unit_4‹L›) ::: [] =>?
         let __16021 := ((free_stream_4‹U›) nat_8 #n_16015) in #m_16014
    |}
  |}
|}
unify_local(
  eq_pat?(R #m_16017, m_16014 : nat_8)
  eq_pat?(R #n_16018, n_16015 :
    ∀ (x_16022 : choice_6) -o
      match x_16022 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› nat_8)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
)
simpl_pprbm ~expand:false( #m_16017, #m_16014)
simpl_pprbm ~expand:false( #n_16018, #n_16015)
simpl_pprbm ~expand:false(
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
simpl_pprbm ~expand:false( nat_8, nat_8)
simpl_pprbm ~expand:false( ((stream_3‹U›) nat_8),
  ((stream_3‹U›) nat_8))
simpl_pprbm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok(
  let __16025 := ((free_stream_4‹U›) nat_8 n_16018) in m_16017, nat_8)
Logical.check_tm(
  let __16026 := ((free_stream_4‹U›) nat_8 n_16018) in m_16017, nat_8
)
Logical.infer_tm(let __16027 := ((free_stream_4‹U›) nat_8 n_16018) in
                 m_16017)
Logical.infer_tm(((free_stream_4‹U›) nat_8 n_16018))
Logical.infer_tm(((free_stream_4‹U›) nat_8))
Logical.infer_tm(free_stream_4‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( n_16018, ((stream_3‹U›) nat_8) )
Logical.infer_tm(n_16018)
Logical.assert_equal(((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
Logical.infer_tm(unit_4‹U›)
Logical.infer_tm(m_16017)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
trans12.Program.case_intro(b_16029, bool_5)
Logical.infer_tm(bool_5)
Logical.infer_tm(bool_5)
trans12.Program.case_split(bool_5, true_5)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>?
         (just_3‹U,L›
           nat_8
           match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
             (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
           with
           | (pair_9 m_16090 n_16091) =>
             let __16092 := ((free_stream_4‹U›) nat_8 n_16091) in m_16090)
    |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok(
  (just_3‹U,L›
    nat_8
    match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
    with
    | (pair_9 m_16127 n_16128) =>
      let __16129 := ((free_stream_4‹U›) nat_8 n_16128) in m_16127),
  match true_5 in bool_5 -o L with
  | true_5 =>
    (sing_3‹U,L›
      nat_8
      match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
        (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
      with
      | (pair_9 m_16132 n_16133) =>
        let __16134 := ((free_stream_4‹U›) nat_8 n_16133) in m_16132)
  | false_6 =>
    (boxed_2‹L›
      ((function _16135 : nat_8 -> L
        | __16137 =>
          match __16137 in nat_8 -o L with
          | zero_10 => ((stream_3‹U›) nat_8)
          | (succ_11 __16139) => unit_4‹L›)
        match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_16141 n_16142) =>
          let __16143 := ((free_stream_4‹U›) nat_8 n_16142) in m_16141)))
Program.check_tm(
  (just_3‹U,L›
    nat_8
    match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
    with
    | (pair_9 m_16145 n_16146) =>
      let __16147 := ((free_stream_4‹U›) nat_8 n_16146) in m_16145),
  match true_5 in bool_5 -o L with
  | true_5 =>
    (sing_3‹U,L›
      nat_8
      match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
        (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
      with
      | (pair_9 m_16150 n_16151) =>
        let __16152 := ((free_stream_4‹U›) nat_8 n_16151) in m_16150)
  | false_6 =>
    (boxed_2‹L›
      ((function _16153 : nat_8 -> L
        | __16155 =>
          match __16155 in nat_8 -o L with
          | zero_10 => ((stream_3‹U›) nat_8)
          | (succ_11 __16157) => unit_4‹L›)
        match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_16159 n_16160) =>
          let __16161 := ((free_stream_4‹U›) nat_8 n_16160) in m_16159))
)
Program.infer_tm((just_3‹U,L›
                   nat_8
                   match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                     (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                       nat_8
                   with
                   | (pair_9 m_16163 n_16164) =>
                     let __16165 := ((free_stream_4‹U›) nat_8 n_16164) in
                     m_16163))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Program.check_tm(
  match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
  with
  | (pair_9 m_16167 n_16168) =>
    let __16169 := ((free_stream_4‹U›) nat_8 n_16168) in m_16167,
  nat_8
)
Program.infer_tm(match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                   (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                     nat_8
                 with
                 | (pair_9 m_16171 n_16172) =>
                   let __16173 := ((free_stream_4‹U›) nat_8 n_16172) in
                   m_16171)
Program.infer_motive_R(((uncons_stream_5‹U›) nat_8 nat_stream_15671), 
(prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Program.check_tm( ((uncons_stream_5‹U›) nat_8 nat_stream_15671),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8))
)
Program.infer_tm(((uncons_stream_5‹U›) nat_8 nat_stream_15671))
Program.infer_tm(((uncons_stream_5‹U›) nat_8))
Program.infer_tm(uncons_stream_5‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Program.check_tm( nat_stream_15671, ((stream_3‹U›) nat_8) )
Program.infer_tm(nat_stream_15671)
Logical.assert_equal(((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
Logical.assert_equal((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), 
(prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Program.infer_motive_R_ok(((uncons_stream_5‹U›) nat_8 nat_stream_15671), 
(prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Program.infer_motive_ok
trans12.Program.case_intro(_16176, (prod_7‹U,L,L›
                                     nat_8 ((stream_3‹U›) nat_8)))
Logical.infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
trans12.Program.case_split(prodULL_25, pairULL_28)
Logical.infer_tm(nat_8)
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
case_coverage{|
  prblm {|
    eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)));
    {| eq_pat?(R #m_16207, m_16174 : nat_8)
       eq_pat?(R #n_16208, n_16175 :
         ∀ (x_16254 : choice_6) -o
           match x_16254 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› nat_8)
           | free_8 => unit_4‹L›) ::: [] =>?
         let __16256 := ((free_stream_4‹U›) nat_8 #n_16175) in #m_16174
    |}
  |}
|}
unify_local(
  eq_pat?(R #m_16207, m_16174 : nat_8)
  eq_pat?(R #n_16208, n_16175 :
    ∀ (x_16257 : choice_6) -o
      match x_16257 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› nat_8)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
)
simpl_pprbm ~expand:false( #m_16207, #m_16174)
simpl_pprbm ~expand:false( #n_16208, #n_16175)
simpl_pprbm ~expand:false(
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
simpl_pprbm ~expand:false( nat_8, nat_8)
simpl_pprbm ~expand:false( ((stream_3‹U›) nat_8),
  ((stream_3‹U›) nat_8))
simpl_pprbm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok(
  let __16275 := ((free_stream_4‹U›) nat_8 n_16208) in m_16207, nat_8)
Program.check_tm(
  let __16276 := ((free_stream_4‹U›) nat_8 n_16208) in m_16207, nat_8
)
Program.infer_tm(let __16277 := ((free_stream_4‹U›) nat_8 n_16208) in
                 m_16207)
Program.infer_tm(((free_stream_4‹U›) nat_8 n_16208))
Program.infer_tm(((free_stream_4‹U›) nat_8))
Program.infer_tm(free_stream_4‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Program.check_tm( n_16208, ((stream_3‹U›) nat_8) )
Program.infer_tm(n_16208)
Logical.assert_equal(((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
Logical.infer_tm(unit_4‹U›)
Program.infer_tm(m_16207)
Logical.assert_equal(nat_8, nat_8)
trans12.Program.case_introed((prod_7‹U,L,L›
                               nat_8 ((stream_3‹U›) nat_8)))
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(match true_5 in bool_5 -o L with
                     | true_5 =>
                       (sing_3‹U,L›
                         nat_8
                         match ((uncons_stream_5‹U›)
                                 nat_8 nat_stream_15671) in
                           (prod_7‹U,L,L›
                             nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                         with
                         | (pair_9 m_16281 n_16282) =>
                           let __16283 :=
                             ((free_stream_4‹U›) nat_8 n_16282)
                           in m_16281)
                     | false_6 =>
                       (boxed_2‹L›
                         ((function _16284 : nat_8 -> L
                           | __16286 =>
                             match __16286 in nat_8 -o L with
                             | zero_10 => ((stream_3‹U›) nat_8)
                             | (succ_11 __16288) => unit_4‹L›)
                           match ((uncons_stream_5‹U›)
                                   nat_8 nat_stream_15671) in
                             (prod_7‹U,L,L›
                               nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                           with
                           | (pair_9 m_16290 n_16291) =>
                             let __16292 :=
                               ((free_stream_4‹U›) nat_8 n_16291)
                             in m_16290)), (sing_3‹U,L›
                                             nat_8
                                             match ((uncons_stream_5‹U›)
                                                     nat_8 nat_stream_15671) in
                                               (prod_7‹U,L,L›
                                                 nat_8
                                                 ((stream_3‹U›) nat_8)) -o
                                                 nat_8
                                             with
                                             | (pair_9 m_16294 n_16295) =>
                                               let __16296 :=
                                                 ((free_stream_4‹U›)
                                                   nat_8 n_16295)
                                               in m_16294))
trans12.Program.case_split(bool_5, false_6)
case_coverage{|
  prblm {| eq_term?( bool_5, bool_5);
    {|  ::: [] =>?
         (box_2‹L›
           match match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                   (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                     nat_8
                 with
                 | (pair_9 m_16328 n_16329) =>
                   let __16330 := ((free_stream_4‹U›) nat_8 n_16329) in
                   m_16328 in
             nat_8 -o L
           with
           | zero_10 => ((stream_3‹U›) nat_8)
           | (succ_11 __16332) => unit_4‹L› nat_stream_15671)
    |}
  |}
|}
unify_local(  )
unify_global( eq_term?( bool_5, bool_5) )
simpl_pprbm ~expand:false( bool_5, bool_5)
case_coverage_ok(
  (box_2‹L›
    match match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
            (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
          with
          | (pair_9 m_16369 n_16370) =>
            let __16371 := ((free_stream_4‹U›) nat_8 n_16370) in m_16369 in
      nat_8 -o L
    with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __16373) => unit_4‹L› nat_stream_15671),
  match false_6 in bool_5 -o L with
  | true_5 =>
    (sing_3‹U,L›
      nat_8
      match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
        (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
      with
      | (pair_9 m_16376 n_16377) =>
        let __16378 := ((free_stream_4‹U›) nat_8 n_16377) in m_16376)
  | false_6 =>
    (boxed_2‹L›
      ((function _16379 : nat_8 -> L
        | __16381 =>
          match __16381 in nat_8 -o L with
          | zero_10 => ((stream_3‹U›) nat_8)
          | (succ_11 __16383) => unit_4‹L›)
        match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_16385 n_16386) =>
          let __16387 := ((free_stream_4‹U›) nat_8 n_16386) in m_16385)))
Program.check_tm(
  (box_2‹L›
    match match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
            (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
          with
          | (pair_9 m_16389 n_16390) =>
            let __16391 := ((free_stream_4‹U›) nat_8 n_16390) in m_16389 in
      nat_8 -o L
    with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __16393) => unit_4‹L› nat_stream_15671),
  match false_6 in bool_5 -o L with
  | true_5 =>
    (sing_3‹U,L›
      nat_8
      match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
        (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
      with
      | (pair_9 m_16396 n_16397) =>
        let __16398 := ((free_stream_4‹U›) nat_8 n_16397) in m_16396)
  | false_6 =>
    (boxed_2‹L›
      ((function _16399 : nat_8 -> L
        | __16401 =>
          match __16401 in nat_8 -o L with
          | zero_10 => ((stream_3‹U›) nat_8)
          | (succ_11 __16403) => unit_4‹L›)
        match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_16405 n_16406) =>
          let __16407 := ((free_stream_4‹U›) nat_8 n_16406) in m_16405))
)
Program.infer_tm((box_2‹L›
                   match match ((uncons_stream_5‹U›)
                                 nat_8 nat_stream_15671) in
                           (prod_7‹U,L,L›
                             nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                         with
                         | (pair_9 m_16409 n_16410) =>
                           let __16411 :=
                             ((free_stream_4‹U›) nat_8 n_16410)
                           in m_16409 in
                     nat_8 -o L
                   with
                   | zero_10 => ((stream_3‹U›) nat_8)
                   | (succ_11 __16413) => unit_4‹L› nat_stream_15671))
Logical.check_tm(
  match match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_16415 n_16416) =>
          let __16417 := ((free_stream_4‹U›) nat_8 n_16416) in m_16415 in
    nat_8 -o L
  with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __16419) => unit_4‹L›, L
)
Logical.infer_tm(match match ((uncons_stream_5‹U›)
                               nat_8 nat_stream_15671) in
                         (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                           nat_8
                       with
                       | (pair_9 m_16421 n_16422) =>
                         let __16423 :=
                           ((free_stream_4‹U›) nat_8 n_16422)
                         in m_16421 in
                   nat_8 -o L
                 with
                 | zero_10 => ((stream_3‹U›) nat_8)
                 | (succ_11 __16425) => unit_4‹L›)
Logical.check_tm(
  match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
  with
  | (pair_9 m_16427 n_16428) =>
    let __16429 := ((free_stream_4‹U›) nat_8 n_16428) in m_16427,
  nat_8
)
Logical.infer_tm(match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
                   (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o
                     nat_8
                 with
                 | (pair_9 m_16431 n_16432) =>
                   let __16433 := ((free_stream_4‹U›) nat_8 n_16432) in
                   m_16431)
Logical.check_tm( ((uncons_stream_5‹U›) nat_8 nat_stream_15671),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8))
)
Logical.infer_tm(((uncons_stream_5‹U›) nat_8 nat_stream_15671))
Logical.infer_tm(((uncons_stream_5‹U›) nat_8))
Logical.infer_tm(uncons_stream_5‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( nat_stream_15671, ((stream_3‹U›) nat_8) )
Logical.infer_tm(nat_stream_15671)
Logical.assert_equal(((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
Logical.assert_equal((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)), 
(prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Logical.infer_tm((prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
case_coverage{|
  prblm {|
    eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
      (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)));
    {| eq_pat?(R #m_16452, m_16434 : nat_8)
       eq_pat?(R #n_16453, n_16435 :
         ∀ (x_16499 : choice_6) -o
           match x_16499 in choice_6 -o L with
           | next_7 => (stream_node_9‹U› nat_8)
           | free_8 => unit_4‹L›) ::: [] =>?
         let __16501 := ((free_stream_4‹U›) nat_8 #n_16435) in #m_16434
    |}
  |}
|}
unify_local(
  eq_pat?(R #m_16452, m_16434 : nat_8)
  eq_pat?(R #n_16453, n_16435 :
    ∀ (x_16502 : choice_6) -o
      match x_16502 in choice_6 -o L with
      | next_7 => (stream_node_9‹U› nat_8)
      | free_8 => unit_4‹L›)
)
unify_global(
  eq_term?( (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
    (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
)
simpl_pprbm ~expand:false( #m_16452, #m_16434)
simpl_pprbm ~expand:false( #n_16453, #n_16435)
simpl_pprbm ~expand:false(
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)),
  (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)))
simpl_pprbm ~expand:false( nat_8, nat_8)
simpl_pprbm ~expand:false( ((stream_3‹U›) nat_8),
  ((stream_3‹U›) nat_8))
simpl_pprbm ~expand:false( stream_3‹U›, stream_3‹U›)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok(
  let __16520 := ((free_stream_4‹U›) nat_8 n_16453) in m_16452, nat_8)
Logical.check_tm(
  let __16521 := ((free_stream_4‹U›) nat_8 n_16453) in m_16452, nat_8
)
Logical.infer_tm(let __16522 := ((free_stream_4‹U›) nat_8 n_16453) in
                 m_16452)
Logical.infer_tm(((free_stream_4‹U›) nat_8 n_16453))
Logical.infer_tm(((free_stream_4‹U›) nat_8))
Logical.infer_tm(free_stream_4‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm( n_16453, ((stream_3‹U›) nat_8) )
Logical.infer_tm(n_16453)
Logical.assert_equal(((stream_3‹U›) nat_8), ((stream_3‹U›) nat_8))
Logical.infer_tm(unit_4‹U›)
Logical.infer_tm(m_16452)
Logical.assert_equal(nat_8, nat_8)
Logical.assert_equal(nat_8, nat_8)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( ((stream_3‹U›) nat_8), L)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?(R #__16571, __16524 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?(R #__16571, __16524 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__16571, #__16524)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Program.check_tm( nat_stream_15671,
  match match ((uncons_stream_5‹U›) nat_8 nat_stream_15671) in
          (prod_7‹U,L,L› nat_8 ((stream_3‹U›) nat_8)) -o nat_8
        with
        | (pair_9 m_16618 n_16619) =>
          let __16620 := ((free_stream_4‹U›) nat_8 n_16619) in m_16618 in
    nat_8 -o L
  with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __16622) => unit_4‹L›
)
Program.infer_tm(nat_stream_15671)
Logical.assert_equal(match match ((uncons_stream_5‹U›)
                                   nat_8 nat_stream_15671) in
                             (prod_7‹U,L,L›
                               nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                           with
                           | (pair_9 m_16624 n_16625) =>
                             let __16626 :=
                               ((free_stream_4‹U›) nat_8 n_16625)
                             in m_16624 in
                       nat_8 -o L
                     with
                     | zero_10 => ((stream_3‹U›) nat_8)
                     | (succ_11 __16628) => unit_4‹L›, ((stream_3‹U›)
                                                             nat_8))
Logical.assert_equal(match false_6 in bool_5 -o L with
                     | true_5 =>
                       (sing_3‹U,L›
                         nat_8
                         match ((uncons_stream_5‹U›)
                                 nat_8 nat_stream_15671) in
                           (prod_7‹U,L,L›
                             nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                         with
                         | (pair_9 m_16632 n_16633) =>
                           let __16634 :=
                             ((free_stream_4‹U›) nat_8 n_16633)
                           in m_16632)
                     | false_6 =>
                       (boxed_2‹L›
                         ((function _16635 : nat_8 -> L
                           | __16637 =>
                             match __16637 in nat_8 -o L with
                             | zero_10 => ((stream_3‹U›) nat_8)
                             | (succ_11 __16639) => unit_4‹L›)
                           match ((uncons_stream_5‹U›)
                                   nat_8 nat_stream_15671) in
                             (prod_7‹U,L,L›
                               nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                           with
                           | (pair_9 m_16641 n_16642) =>
                             let __16643 :=
                               ((free_stream_4‹U›) nat_8 n_16642)
                             in m_16641)), (boxed_2‹L›
                                             match match ((uncons_stream_5‹U›)
                                                           nat_8
                                                           nat_stream_15671) in
                                                     (prod_7‹U,L,L›
                                                       nat_8
                                                       ((stream_3‹U›)
                                                         nat_8)) -o
                                                       nat_8
                                                   with
                                                   | (pair_9 m_16645 n_16646) =>
                                                     let __16647 :=
                                                       ((free_stream_4‹U›)
                                                         nat_8 n_16646)
                                                     in m_16645 in
                                               nat_8 -o L
                                             with
                                             | zero_10 =>
                                               ((stream_3‹U›) nat_8)
                                             | (succ_11 __16649) =>
                                               unit_4‹L›))
trans12.Program.case_introed(bool_5)
Logical.assert_equal(∀ (b_16653 : bool_5) -o
                       match b_16653 in bool_5 -o L with
                       | true_5 =>
                         (sing_3‹U,L›
                           nat_8
                           match ((uncons_stream_5‹U›)
                                   nat_8 nat_stream_15671) in
                             (prod_7‹U,L,L›
                               nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                           with
                           | (pair_9 m_16656 n_16657) =>
                             let __16658 :=
                               ((free_stream_4‹U›) nat_8 n_16657)
                             in m_16656)
                       | false_6 =>
                         (boxed_2‹L›
                           ((function _16659 : nat_8 -> L
                             | __16661 =>
                               match __16661 in nat_8 -o L with
                               | zero_10 => ((stream_3‹U›) nat_8)
                               | (succ_11 __16663) => unit_4‹L›)
                             match ((uncons_stream_5‹U›)
                                     nat_8 nat_stream_15671) in
                               (prod_7‹U,L,L›
                                 nat_8 ((stream_3‹U›) nat_8)) -o nat_8
                             with
                             | (pair_9 m_16665 n_16666) =>
                               let __16667 :=
                                 ((free_stream_4‹U›) nat_8 n_16666)
                               in m_16665)), ∀ (b_16668 : bool_5) -o
                                               match b_16668 in bool_5 -o L
                                               with
                                               | true_5 =>
                                                 (sing_3‹U,L›
                                                   nat_8
                                                   match ((uncons_stream_5‹U›)
                                                           nat_8
                                                           nat_stream_15671) in
                                                     (prod_7‹U,L,L›
                                                       nat_8
                                                       ((stream_3‹U›)
                                                         nat_8)) -o
                                                       nat_8
                                                   with
                                                   | (pair_9 m_16671 n_16672) =>
                                                     let __16673 :=
                                                       ((free_stream_4‹U›)
                                                         nat_8 n_16672)
                                                     in m_16671)
                                               | false_6 =>
                                                 (boxed_2‹L›
                                                   ((function _16674 :
                                                       nat_8 -> L
                                                     | __16676 =>
                                                       match __16676 in
                                                         nat_8 -o L
                                                       with
                                                       | zero_10 =>
                                                         ((stream_3‹U›)
                                                           nat_8)
                                                       | (succ_11 __16678) =>
                                                         unit_4‹L›)
                                                     match ((uncons_stream_5‹U›)
                                                             nat_8
                                                             nat_stream_15671) in
                                                       (prod_7‹U,L,L›
                                                         nat_8
                                                         ((stream_3‹U›)
                                                           nat_8)) -o
                                                         nat_8
                                                     with
                                                     | (pair_9 m_16680 n_16681) =>
                                                       let __16682 :=
                                                         ((free_stream_4‹U›)
                                                           nat_8 n_16681)
                                                       in m_16680)))
Logical.assert_equal((apair_10‹U,L,L›
                       nat_8
                       function _16685 : nat_8 -> L
                       | __16687 =>
                         match __16687 in nat_8 -o L with
                         | zero_10 => ((stream_3‹U›) nat_8)
                         | (succ_11 __16689) => unit_4‹L›), (apair_10‹U,L,L›
                                                                  nat_8
                                                                  function _16690 :
                                                                    nat_8 ->
                                                                    L
                                                                  | __16692 =>
                                                                    match __16692 in
                                                                    nat_8 -o
                                                                    L with
                                                                    | 
                                                                    zero_10 =>
                                                                    ((stream_3‹U›)
                                                                    nat_8)
                                                                    | 
                                                                    (succ_11 __16694) =>
                                                                    unit_4‹L›))
Logical.infer_tm(unit_4‹U›)
Program.check_tm(
  ((free_stream_4‹U›)
    nat_8
    ((proj2_8‹U,L,L›)
      nat_8
      function _16699 : nat_8 -> L
      | __16701 =>
        match __16701 in nat_8 -o L with
        | zero_10 => ((stream_3‹U›) nat_8)
        | (succ_11 __16703) => unit_4‹L›
      my_apair1_10)),
  unit_4‹U›
)
Program.infer_tm(((free_stream_4‹U›)
                   nat_8
                   ((proj2_8‹U,L,L›)
                     nat_8
                     function _16704 : nat_8 -> L
                     | __16706 =>
                       match __16706 in nat_8 -o L with
                       | zero_10 => ((stream_3‹U›) nat_8)
                       | (succ_11 __16708) => unit_4‹L›
                     my_apair1_10)))
Program.infer_tm(((free_stream_4‹U›) nat_8))
Program.infer_tm(free_stream_4‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Program.check_tm(
  ((proj2_8‹U,L,L›)
    nat_8
    function _16709 : nat_8 -> L
    | __16711 =>
      match __16711 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __16713) => unit_4‹L›
    my_apair1_10),
  ((stream_3‹U›) nat_8)
)
Program.infer_tm(((proj2_8‹U,L,L›)
                   nat_8
                   function _16714 : nat_8 -> L
                   | __16716 =>
                     match __16716 in nat_8 -o L with
                     | zero_10 => ((stream_3‹U›) nat_8)
                     | (succ_11 __16718) => unit_4‹L›
                   my_apair1_10))
Program.infer_tm(((proj2_8‹U,L,L›)
                   nat_8
                   function _16719 : nat_8 -> L
                   | __16721 =>
                     match __16721 in nat_8 -o L with
                     | zero_10 => ((stream_3‹U›) nat_8)
                     | (succ_11 __16723) => unit_4‹L›))
Program.infer_tm(((proj2_8‹U,L,L›) nat_8))
Program.infer_tm(proj2_8‹U,L,L›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.check_tm(
  function _16724 : nat_8 -> L
  | __16726 =>
    match __16726 in nat_8 -o L with
    | zero_10 => ((stream_3‹U›) nat_8)
    | (succ_11 __16728) => unit_4‹L›,
  nat_8 -> L
)
Logical.infer_tm(function _16730 : nat_8 -> L
                 | __16732 =>
                   match __16732 in nat_8 -o L with
                   | zero_10 => ((stream_3‹U›) nat_8)
                   | (succ_11 __16734) => unit_4‹L›)
Logical.infer_tm(nat_8 -> L)
Logical.infer_tm(nat_8)
Logical.infer_tm(L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| ;
    {| eq_pat?(R #n_16739, __16738 : nat_8) ::: [] =>?
         match #__16738 in nat_8 -o L with
         | zero_10 => ((stream_3‹U›) nat_8)
         | (succ_11 __16742) => unit_4‹L›
    |}
  |}
|}
unify_local( eq_pat?(R #n_16739, __16738 : nat_8) )
unify_global(  )
simpl_pprbm ~expand:false( #n_16739, #__16738)
case_coverage_ok(
  match n_16739 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __16747) => unit_4‹L›, L)
Logical.check_tm(
  match n_16739 in nat_8 -o L with
  | zero_10 => ((stream_3‹U›) nat_8)
  | (succ_11 __16749) => unit_4‹L›, L
)
Logical.infer_tm(match n_16739 in nat_8 -o L with
                 | zero_10 => ((stream_3‹U›) nat_8)
                 | (succ_11 __16751) => unit_4‹L›)
Logical.check_tm( n_16739, nat_8 )
Logical.infer_tm(n_16739)
Logical.assert_equal(nat_8, nat_8)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {|  ::: [] =>? ((stream_3‹U›) nat_8) |}
  |}
|}
unify_local(  )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( ((stream_3‹U›) nat_8), L)
Logical.check_tm( ((stream_3‹U›) nat_8), L )
Logical.infer_tm(((stream_3‹U›) nat_8))
Logical.infer_tm(stream_3‹U›)
Logical.check_tm( nat_8, U )
Logical.infer_tm(nat_8)
Logical.assert_equal(U, U)
Logical.assert_equal(L, L)
Logical.infer_tm(nat_8)
case_coverage{|
  prblm {| eq_term?( nat_8, nat_8);
    {| eq_pat?(R #__16757, __16752 : nat_8) ::: [] =>? unit_4‹L› |}
  |}
|}
unify_local( eq_pat?(R #__16757, __16752 : nat_8) )
unify_global( eq_term?( nat_8, nat_8) )
simpl_pprbm ~expand:false( #__16757, #__16752)
simpl_pprbm ~expand:false( nat_8, nat_8)
case_coverage_ok( unit_4‹L›, L)
Logical.check_tm( unit_4‹L›, L )
Logical.infer_tm(unit_4‹L›)
Logical.assert_equal(L, L)
Logical.assert_equal(L, L)
Logical.assert_equal(nat_8 -> L, nat_8 -> L)
Program.check_tm( my_apair1_10,
  (apair_10‹U,L,L›
    nat_8
    function _16764 : nat_8 -> L
    | __16766 =>
      match __16766 in nat_8 -o L with
      | zero_10 => ((stream_3‹U›) nat_8)
      | (succ_11 __16768) => unit_4‹L›)
)
Program.infer_tm(my_apair1_10)
Logical.assert_equal((apair_10‹U,L,L›
                       nat_8
                       function _16769 : nat_8 -> L
                       | __16771 =>
                         match __16771 in nat_8 -o L with
                         | zero_10 => ((stream_3‹U›) nat_8)
                         | (succ_11 __16773) => unit_4‹L›), (apair_10‹U,L,L›
                                                                  nat_8
                                                                  function _16774 :
                                                                    nat_8 ->
                                                                    L
                                                                  | __16776 =>
                                                                    match __16776 in
                                                                    nat_8 -o
                                                                    L with
                                                                    | 
                                                                    zero_10 =>
                                                                    ((stream_3‹U›)
                                                                    nat_8)
                                                                    | 
                                                                    (succ_11 __16778) =>
                                                                    unit_4‹L›))
Logical.assert_equal(((stream_3‹U›) nat_8), ((function _16783 :
                                                    nat_8 -> L
                                                  | __16785 =>
                                                    match __16785 in
                                                      nat_8 -o L
                                                    with
                                                    | zero_10 =>
                                                      ((stream_3‹U›)
                                                        nat_8)
                                                    | (succ_11 __16787) =>
                                                      unit_4‹L›)
                                                  ((proj1_7‹U,L,L›)
                                                    nat_8
                                                    function _16788 :
                                                      nat_8 -> L
                                                    | __16790 =>
                                                      match __16790 in
                                                        nat_8 -o L
                                                      with
                                                      | zero_10 =>
                                                        ((stream_3‹U›)
                                                          nat_8)
                                                      | (succ_11 __16792) =>
                                                        unit_4‹L›
                                                    my_apair1_10)))
Logical.assert_equal(unit_4‹U›, unit_4‹U›)
#[logical]
inductive eqU_12 where
| reflU_15 of layout[]

#[logical]
inductive eqL_11 where
| reflL_14 of layout[]

#[program]
inductive boxedU_14 where
| boxU_17 of layout[R]

#[program]
inductive boxedL_13 where
| boxL_16 of layout[R]

#[program]
inductive singUU_18 where
| justUU_21 of layout[R]

#[program]
inductive singUL_17 where
| justUL_20 of layout[R]

#[program]
inductive singLU_16 where


#[program]
inductive singLL_15 where
| justLL_18 of layout[R]

#[program]
inductive unitU_20 where
| ttU_23 of layout[]

#[program]
inductive unitL_19 where
| ttL_22 of layout[]

#[program]
inductive bool_5 where
| true_5 of layout[]
| false_6 of layout[]

#[program]
inductive choice_6 where
| next_7 of layout[]
| free_8 of layout[]

#[program]
inductive prodUUU_28 where
| pairUUU_31 of layout[R, R]

#[program]
inductive prodUUL_27 where
| pairUUL_30 of layout[R, R]

#[program]
inductive prodULU_26 where


#[program]
inductive prodULL_25 where
| pairULL_28 of layout[R, R]

#[program]
inductive prodLUU_24 where


#[program]
inductive prodLUL_23 where
| pairLUL_26 of layout[R, R]

#[program]
inductive prodLLU_22 where


#[program]
inductive prodLLL_21 where
| pairLLL_24 of layout[R, R]

#[program]
inductive nat_8 where
| zero_10 of layout[]
| succ_11 of layout[R]

#[program]
def sing_elimUU_15 :=
  fun sing_elim_16794 {A_16795} -> {x_16796} -> (__16797) ->
    match __16797 with
    | justUU_21 m_16798 => m_16798
    end

#[program]
def sing_elimUL_14 :=
  fun sing_elim_16799 {A_16800} -> {x_16801} -> (__16802) ->
    match __16802 with
    | justUL_20 m_16803 => m_16803
    end

#[program]
def sing_elimLU_13 :=
  fun sing_elim_16804 {A_16805} -> {x_16806} -> (__16807) ->
    match __16807 with
    
    end

#[program]
def sing_elimLL_12 :=
  fun sing_elim_16808 {A_16809} -> {x_16810} -> (__16811) ->
    match __16811 with
    | justLL_18 m_16812 => m_16812
    end

#[logical]
def sing_uniqUU_19 := NULL

#[logical]
def sing_uniqUL_18 := NULL

#[logical]
def sing_uniqLU_17 := NULL

#[logical]
def sing_uniqLL_16 := NULL

#[program]
inductive stream_nodeU_30 where
| stream_consU_33 of layout[R, R]

#[program]
inductive stream_nodeL_29 where
| stream_consL_32 of layout[R, R]

#[logical]
def streamU_21 := NULL

#[logical]
def streamL_20 := NULL

#[program]
def free_streamU_23 :=
  fun free_stream_16813 {A_16814} -> (st_16815) ->
    match ((st_16815) free_8) with
    | ttL_22  => ttU_23
    end

#[program]
def free_streamL_22 :=
  fun free_stream_16816 {A_16817} -> (st_16818) ->
    match ((st_16818) free_8) with
    | ttL_22  => ttU_23
    end

#[program]
def uncons_streamU_25 :=
  fun uncons_stream_16819 {A_16820} -> (st_16821) ->
    match ((st_16821) next_7) with
    | stream_consU_33 hd_16822 tl_16823 => (pairULL_28 hd_16822 tl_16823)
    end

#[program]
def uncons_streamL_24 :=
  fun uncons_stream_16824 {A_16825} -> (st_16826) ->
    match ((st_16826) next_7) with
    | stream_consL_32 hd_16827 tl_16828 => (pairLLL_24 hd_16827 tl_16828)
    end

#[program]
def nat_make_6 :=
  fun nat_make_16829 (n_16830) -> (x_16831) -o
    match x_16831 with
    | next_7  =>
      (stream_consU_33 n_16830 ((nat_make_16829) (succ_11 n_16830)))
    | free_8  => ttL_22
    end

#[program]
inductive apairUUU_38 where
| apair_introUUU_41 of layout[N, R]

#[program]
inductive apairUUL_37 where
| apair_introUUL_40 of layout[N, R]

#[program]
inductive apairULU_36 where
| apair_introULU_39 of layout[N, R]

#[program]
inductive apairULL_35 where
| apair_introULL_38 of layout[N, R]

#[program]
inductive apairLUU_34 where
| apair_introLUU_37 of layout[N, R]

#[program]
inductive apairLUL_33 where
| apair_introLUL_36 of layout[N, R]

#[program]
inductive apairLLU_32 where
| apair_introLLU_35 of layout[N, R]

#[program]
inductive apairLLL_31 where
| apair_introLLL_34 of layout[N, R]

#[program]
def proj1UUU_33 :=
  fun proj1_16832 {A_16833} -> {B_16834} -> (__16835) ->
    match __16835 with
    | apair_introUUU_41 x_16836 select_16837 =>
      ((sing_elimUL_14) NULL NULL ((select_16837) true_5))
    end

#[program]
def proj1UUL_32 :=
  fun proj1_16838 {A_16839} -> {B_16840} -> (__16841) ->
    match __16841 with
    | apair_introUUL_40 x_16842 select_16843 =>
      ((sing_elimUL_14) NULL NULL ((select_16843) true_5))
    end

#[program]
def proj1ULU_31 :=
  fun proj1_16844 {A_16845} -> {B_16846} -> (__16847) ->
    match __16847 with
    | apair_introULU_39 x_16848 select_16849 =>
      ((sing_elimUL_14) NULL NULL ((select_16849) true_5))
    end

#[program]
def proj1ULL_30 :=
  fun proj1_16850 {A_16851} -> {B_16852} -> (__16853) ->
    match __16853 with
    | apair_introULL_38 x_16854 select_16855 =>
      ((sing_elimUL_14) NULL NULL ((select_16855) true_5))
    end

#[program]
def proj1LUU_29 :=
  fun proj1_16856 {A_16857} -> {B_16858} -> (__16859) ->
    match __16859 with
    | apair_introLUU_37 x_16860 select_16861 =>
      ((sing_elimLL_12) NULL NULL ((select_16861) true_5))
    end

#[program]
def proj1LUL_28 :=
  fun proj1_16862 {A_16863} -> {B_16864} -> (__16865) ->
    match __16865 with
    | apair_introLUL_36 x_16866 select_16867 =>
      ((sing_elimLL_12) NULL NULL ((select_16867) true_5))
    end

#[program]
def proj1LLU_27 :=
  fun proj1_16868 {A_16869} -> {B_16870} -> (__16871) ->
    match __16871 with
    | apair_introLLU_35 x_16872 select_16873 =>
      ((sing_elimLL_12) NULL NULL ((select_16873) true_5))
    end

#[program]
def proj1LLL_26 :=
  fun proj1_16874 {A_16875} -> {B_16876} -> (__16877) ->
    match __16877 with
    | apair_introLLL_34 x_16878 select_16879 =>
      ((sing_elimLL_12) NULL NULL ((select_16879) true_5))
    end

#[program]
def proj2UUU_41 :=
  fun proj2_16880 {A_16881} -> {B_16882} -> (x_16883) ->
    match x_16883 with
    | apair_introUUU_41 x_16884 select_16885 =>
      match {NULL} with
      | reflU_15  =>
        match ((select_16885) false_6) with
        | boxU_17 m_16886 => m_16886
        end
      end
    end

#[program]
def proj2UUL_40 :=
  fun proj2_16887 {A_16888} -> {B_16889} -> (x_16890) ->
    match x_16890 with
    | apair_introUUL_40 x_16891 select_16892 =>
      match {NULL} with
      | reflU_15  =>
        match ((select_16892) false_6) with
        | boxU_17 m_16893 => m_16893
        end
      end
    end

#[program]
def proj2ULU_39 :=
  fun proj2_16894 {A_16895} -> {B_16896} -> (x_16897) ->
    match x_16897 with
    | apair_introULU_39 x_16898 select_16899 =>
      match {NULL} with
      | reflU_15  =>
        match ((select_16899) false_6) with
        | boxL_16 m_16900 => m_16900
        end
      end
    end

#[program]
def proj2ULL_38 :=
  fun proj2_16901 {A_16902} -> {B_16903} -> (x_16904) ->
    match x_16904 with
    | apair_introULL_38 x_16905 select_16906 =>
      match {NULL} with
      | reflU_15  =>
        match ((select_16906) false_6) with
        | boxL_16 m_16907 => m_16907
        end
      end
    end

#[program]
def proj2LUU_37 :=
  fun proj2_16908 {A_16909} -> {B_16910} -> (x_16911) ->
    match x_16911 with
    | apair_introLUU_37 x_16912 select_16913 =>
      match {NULL} with
      | reflL_14  =>
        match ((select_16913) false_6) with
        | boxU_17 m_16914 => m_16914
        end
      end
    end

#[program]
def proj2LUL_36 :=
  fun proj2_16915 {A_16916} -> {B_16917} -> (x_16918) ->
    match x_16918 with
    | apair_introLUL_36 x_16919 select_16920 =>
      match {NULL} with
      | reflL_14  =>
        match ((select_16920) false_6) with
        | boxU_17 m_16921 => m_16921
        end
      end
    end

#[program]
def proj2LLU_35 :=
  fun proj2_16922 {A_16923} -> {B_16924} -> (x_16925) ->
    match x_16925 with
    | apair_introLLU_35 x_16926 select_16927 =>
      match {NULL} with
      | reflL_14  =>
        match ((select_16927) false_6) with
        | boxL_16 m_16928 => m_16928
        end
      end
    end

#[program]
def proj2LLL_34 :=
  fun proj2_16929 {A_16930} -> {B_16931} -> (x_16932) ->
    match x_16932 with
    | apair_introLLL_34 x_16933 select_16934 =>
      match {NULL} with
      | reflL_14  =>
        match ((select_16934) false_6) with
        | boxL_16 m_16935 => m_16935
        end
      end
    end

#[program]
def my_apair0_9 :=
  (apair_introULU_39
    NULL
    fun _16936 (b_16937) ->
      match b_16937 with
      | true_5  => (justUL_20 zero_10)
      | false_6  => (boxL_16 ((nat_make_6) zero_10))
      end)

#[program]
def my_apair1_10 :=
  let nat_stream_16938 := ((nat_make_6) zero_10) in
  (apair_introULL_38
    NULL
    fun _16939 (b_16940) -o
      match b_16940 with
      | true_5  =>
        (justUL_20
          match ((uncons_streamU_25) NULL nat_stream_16938) with
          | pairULL_28 m_16941 n_16942 =>
            let __16943 := ((free_streamU_23) NULL n_16942) in m_16941
          end)
      | false_6  => (boxL_16 nat_stream_16938)
      end)

#[program]
def __11 := ((free_streamU_23) NULL ((proj2ULL_38) NULL NULL my_apair1_10))

-----------------------------------------

#[logical]
inductive eqU_12 where
| reflU_15 of layout[]

#[logical]
inductive eqL_11 where
| reflL_14 of layout[]

#[program]
inductive boxedU_14 where
| boxU_17 of layout[R]

#[program]
inductive boxedL_13 where
| boxL_16 of layout[R]

#[program]
inductive singUU_18 where
| justUU_21 of layout[R]

#[program]
inductive singUL_17 where
| justUL_20 of layout[R]

#[program]
inductive singLU_16 where


#[program]
inductive singLL_15 where
| justLL_18 of layout[R]

#[program]
inductive unitU_20 where
| ttU_23 of layout[]

#[program]
inductive unitL_19 where
| ttL_22 of layout[]

#[program]
inductive bool_5 where
| true_5 of layout[]
| false_6 of layout[]

#[program]
inductive choice_6 where
| next_7 of layout[]
| free_8 of layout[]

#[program]
inductive prodUUU_28 where
| pairUUU_31 of layout[R, R]

#[program]
inductive prodUUL_27 where
| pairUUL_30 of layout[R, R]

#[program]
inductive prodULU_26 where


#[program]
inductive prodULL_25 where
| pairULL_28 of layout[R, R]

#[program]
inductive prodLUU_24 where


#[program]
inductive prodLUL_23 where
| pairLUL_26 of layout[R, R]

#[program]
inductive prodLLU_22 where


#[program]
inductive prodLLL_21 where
| pairLLL_24 of layout[R, R]

#[program]
inductive nat_8 where
| zero_10 of layout[]
| succ_11 of layout[R]

#[program]
def sing_elimUU_15 :=
  fun sing_elim_17094 {A_17095} -> {x_17096} -> (__17097) ->
    match __17097 with
    | justUU_21 m_17098 => m_17098
    end

#[program]
def sing_elimUL_14 :=
  fun sing_elim_17099 {A_17100} -> {x_17101} -> (__17102) ->
    match __17102 with
    | justUL_20 m_17103 => m_17103
    end

#[program]
def sing_elimLU_13 :=
  fun sing_elim_17104 {A_17105} -> {x_17106} -> (__17107) -> !!

#[program]
def sing_elimLL_12 :=
  fun sing_elim_17108 {A_17109} -> {x_17110} -> (__17111) ->
    match __17111 with
    | justLL_18 m_17112 => m_17112
    end

#[logical]
def sing_uniqUU_19 := NULL

#[logical]
def sing_uniqUL_18 := NULL

#[logical]
def sing_uniqLU_17 := NULL

#[logical]
def sing_uniqLL_16 := NULL

#[program]
inductive stream_nodeU_30 where
| stream_consU_33 of layout[R, R]

#[program]
inductive stream_nodeL_29 where
| stream_consL_32 of layout[R, R]

#[logical]
def streamU_21 := NULL

#[logical]
def streamL_20 := NULL

#[program]
def free_streamU_23 :=
  fun free_stream_17113 {A_17114} -> (st_17115) ->
    match ((st_17115) free_8) with
    | ttL_22  => ttU_23
    end

#[program]
def free_streamL_22 :=
  fun free_stream_17116 {A_17117} -> (st_17118) ->
    match ((st_17118) free_8) with
    | ttL_22  => ttU_23
    end

#[program]
def uncons_streamU_25 :=
  fun uncons_stream_17119 {A_17120} -> (st_17121) ->
    match ((st_17121) next_7) with
    | stream_consU_33 hd_17122 tl_17123 => (pairULL_28 hd_17122 tl_17123)
    end

#[program]
def uncons_streamL_24 :=
  fun uncons_stream_17124 {A_17125} -> (st_17126) ->
    match ((st_17126) next_7) with
    | stream_consL_32 hd_17127 tl_17128 => (pairLLL_24 hd_17127 tl_17128)
    end

#[program]
def nat_make_6 :=
  fun nat_make_17129 (n_17130) -> (x_17131) -o
    match x_17131 with
    | next_7  =>
      (stream_consU_33 n_17130 ((nat_make_17129) (succ_11 n_17130)))
    | free_8  => ttL_22
    end

#[program]
inductive apairUUU_38 where
| apair_introUUU_41 of layout[N, R]

#[program]
inductive apairUUL_37 where
| apair_introUUL_40 of layout[N, R]

#[program]
inductive apairULU_36 where
| apair_introULU_39 of layout[N, R]

#[program]
inductive apairULL_35 where
| apair_introULL_38 of layout[N, R]

#[program]
inductive apairLUU_34 where
| apair_introLUU_37 of layout[N, R]

#[program]
inductive apairLUL_33 where
| apair_introLUL_36 of layout[N, R]

#[program]
inductive apairLLU_32 where
| apair_introLLU_35 of layout[N, R]

#[program]
inductive apairLLL_31 where
| apair_introLLL_34 of layout[N, R]

#[program]
def proj1UUU_33 :=
  fun proj1_17132 {A_17133} -> {B_17134} -> (__17135) ->
    match __17135 with
    | apair_introUUU_41 x_17136 select_17137 =>
      ((sing_elimUL_14) NULL NULL ((select_17137) true_5))
    end

#[program]
def proj1UUL_32 :=
  fun proj1_17138 {A_17139} -> {B_17140} -> (__17141) ->
    match __17141 with
    | apair_introUUL_40 x_17142 select_17143 =>
      ((sing_elimUL_14) NULL NULL ((select_17143) true_5))
    end

#[program]
def proj1ULU_31 :=
  fun proj1_17144 {A_17145} -> {B_17146} -> (__17147) ->
    match __17147 with
    | apair_introULU_39 x_17148 select_17149 =>
      ((sing_elimUL_14) NULL NULL ((select_17149) true_5))
    end

#[program]
def proj1ULL_30 :=
  fun proj1_17150 {A_17151} -> {B_17152} -> (__17153) ->
    match __17153 with
    | apair_introULL_38 x_17154 select_17155 =>
      ((sing_elimUL_14) NULL NULL ((select_17155) true_5))
    end

#[program]
def proj1LUU_29 :=
  fun proj1_17156 {A_17157} -> {B_17158} -> (__17159) ->
    match __17159 with
    | apair_introLUU_37 x_17160 select_17161 =>
      ((sing_elimLL_12) NULL NULL ((select_17161) true_5))
    end

#[program]
def proj1LUL_28 :=
  fun proj1_17162 {A_17163} -> {B_17164} -> (__17165) ->
    match __17165 with
    | apair_introLUL_36 x_17166 select_17167 =>
      ((sing_elimLL_12) NULL NULL ((select_17167) true_5))
    end

#[program]
def proj1LLU_27 :=
  fun proj1_17168 {A_17169} -> {B_17170} -> (__17171) ->
    match __17171 with
    | apair_introLLU_35 x_17172 select_17173 =>
      ((sing_elimLL_12) NULL NULL ((select_17173) true_5))
    end

#[program]
def proj1LLL_26 :=
  fun proj1_17174 {A_17175} -> {B_17176} -> (__17177) ->
    match __17177 with
    | apair_introLLL_34 x_17178 select_17179 =>
      ((sing_elimLL_12) NULL NULL ((select_17179) true_5))
    end

#[program]
def proj2UUU_41 :=
  fun proj2_17180 {A_17181} -> {B_17182} -> (x_17183) ->
    match x_17183 with
    | apair_introUUU_41 x_17184 select_17185 =>
      match ((select_17185) false_6) with
      | boxU_17 m_17186 => m_17186
      end
    end

#[program]
def proj2UUL_40 :=
  fun proj2_17187 {A_17188} -> {B_17189} -> (x_17190) ->
    match x_17190 with
    | apair_introUUL_40 x_17191 select_17192 =>
      match ((select_17192) false_6) with
      | boxU_17 m_17193 => m_17193
      end
    end

#[program]
def proj2ULU_39 :=
  fun proj2_17194 {A_17195} -> {B_17196} -> (x_17197) ->
    match x_17197 with
    | apair_introULU_39 x_17198 select_17199 =>
      match ((select_17199) false_6) with
      | boxL_16 m_17200 => m_17200
      end
    end

#[program]
def proj2ULL_38 :=
  fun proj2_17201 {A_17202} -> {B_17203} -> (x_17204) ->
    match x_17204 with
    | apair_introULL_38 x_17205 select_17206 =>
      match ((select_17206) false_6) with
      | boxL_16 m_17207 => m_17207
      end
    end

#[program]
def proj2LUU_37 :=
  fun proj2_17208 {A_17209} -> {B_17210} -> (x_17211) ->
    match x_17211 with
    | apair_introLUU_37 x_17212 select_17213 =>
      match ((select_17213) false_6) with
      | boxU_17 m_17214 => m_17214
      end
    end

#[program]
def proj2LUL_36 :=
  fun proj2_17215 {A_17216} -> {B_17217} -> (x_17218) ->
    match x_17218 with
    | apair_introLUL_36 x_17219 select_17220 =>
      match ((select_17220) false_6) with
      | boxU_17 m_17221 => m_17221
      end
    end

#[program]
def proj2LLU_35 :=
  fun proj2_17222 {A_17223} -> {B_17224} -> (x_17225) ->
    match x_17225 with
    | apair_introLLU_35 x_17226 select_17227 =>
      match ((select_17227) false_6) with
      | boxL_16 m_17228 => m_17228
      end
    end

#[program]
def proj2LLL_34 :=
  fun proj2_17229 {A_17230} -> {B_17231} -> (x_17232) ->
    match x_17232 with
    | apair_introLLL_34 x_17233 select_17234 =>
      match ((select_17234) false_6) with
      | boxL_16 m_17235 => m_17235
      end
    end

#[program]
def my_apair0_9 :=
  (apair_introULU_39
    NULL
    fun _17236 (b_17237) ->
      match b_17237 with
      | true_5  => (justUL_20 zero_10)
      | false_6  => (boxL_16 ((nat_make_6) zero_10))
      end)

#[program]
def my_apair1_10 :=
  let nat_stream_17238 := ((nat_make_6) zero_10) in
  (apair_introULL_38
    NULL
    fun _17239 (b_17240) -o
      match b_17240 with
      | true_5  =>
        (justUL_20
          match ((uncons_streamU_25) NULL nat_stream_17238) with
          | pairULL_28 m_17241 n_17242 =>
            let __17243 := ((free_streamU_23) NULL n_17242) in m_17241
          end)
      | false_6  => (boxL_16 nat_stream_17238)
      end)

#[program]
def __11 := ((free_streamU_23) NULL ((proj2ULL_38) NULL NULL my_apair1_10))

-----------------------------------------

