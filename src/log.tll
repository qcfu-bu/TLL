[Definition {name = "append"; relv = R;
   body =
   (Binder (["s"; "t"],
      ((Fun (
          (Pi (N, U, (Type (SId "s")),
             (Binder ("A",
                (Pi (R, U,
                   (App
                      [(Inst ("list", [(SId "s"); (SId "t")], I));
                        (Id ("A", I))]),
                   (Binder ("_",
                      (Pi (R, L,
                         (App
                            [(Inst ("list", [(SId "s"); (SId "t")], I));
                              (Id ("A", I))]),
                         (Binder ("_",
                            (App
                               [(Inst ("list", [(SId "s"); (SId "t")], I));
                                 (Id ("A", I))])
                            ))
                         ))
                      ))
                   ))
                ))
             )),
          (Binder ((Some "append"),
             [([(PId "A"); (PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
               ([(PId "A"); (PBOpr ("::", (PId "x"), (PId "xs"))); (PId "ys")
                  ],
                (Some (BOpr ("::", (Id ("x", I)),
                         (App
                            [(Id ("append", I)); (Id ("xs", I));
                              (Id ("ys", I))])
                         ))))
               ]
             )),
          [I])),
       (Pi (N, U, (Type (SId "s")),
          (Binder ("A",
             (Pi (R, U,
                (App
                   [(Inst ("list", [(SId "s"); (SId "t")], I)); (Id ("A", I))
                     ]),
                (Binder ("_",
                   (Pi (R, L,
                      (App
                         [(Inst ("list", [(SId "s"); (SId "t")], I));
                           (Id ("A", I))]),
                      (Binder ("_",
                         (App
                            [(Inst ("list", [(SId "s"); (SId "t")], I));
                              (Id ("A", I))])
                         ))
                      ))
                   ))
                ))
             ))
          )))
      ));
   view = [I]};
  Definition {name = "len"; relv = N;
    body =
    (Binder (["s"; "t"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U,
                    (App
                       [(Inst ("list", [(SId "_"); (SId "t")], I));
                         (Id ("A", I))]),
                    (Binder ("_", (Id ("nat", I))))))
                 ))
              )),
           (Binder ((Some "len"),
              [([(PId "A"); (PId "nil")], (Some (Id ("zero", I))));
                ([(PId "A"); (PBOpr ("::", (PId "_"), (PId "tl")))],
                 (Some (App
                          [(Id ("succ", I));
                            (App [(Id ("len", I)); (Id ("tl", I))])])))
                ]
              )),
           [I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U,
                 (App
                    [(Inst ("list", [(SId "_"); (SId "t")], I));
                      (Id ("A", I))]),
                 (Binder ("_", (Id ("nat", I))))))
              ))
           )))
       ));
    view = [I]};
  Definition {name = "append_len"; relv = N;
    body =
    (Binder (["s"; "t"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U,
                    (App
                       [(Inst ("list", [(SId "_"); (SId "t")], I));
                         (Id ("A", I))]),
                    (Binder ("xs",
                       (Pi (R, U,
                          (App
                             [(Inst ("list", [(SId "_"); (SId "t")], I));
                               (Id ("A", I))]),
                          (Binder ("ys",
                             (BOpr ("=",
                                (App
                                   [(Id ("len", I));
                                     (App
                                        [(Id ("append", I)); (Id ("xs", I));
                                          (Id ("ys", I))])
                                     ]),
                                (App
                                   [(Id ("add", I));
                                     (App [(Id ("len", I)); (Id ("xs", I))]);
                                     (App [(Id ("len", I)); (Id ("ys", I))])])
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "append_len"),
              [([(PId "A"); (PId "nil"); (PId "ys")], (Some (Id ("refl", I))));
                ([(PId "A"); (PBOpr ("::", (PId "x"), (PId "xs")));
                   (PId "ys")],
                 (Some (App
                          [(Id ("rwl", I));
                            (Fun ((Pi (R, U, IMeta, (Binder ("n", IMeta)))),
                               (Binder (None,
                                  [([(PId "n")],
                                    (Some (BOpr ("=",
                                             (App
                                                [(Id ("succ", I));
                                                  (App
                                                     [(Id ("len", I));
                                                       (App
                                                          [(Id ("append", I));
                                                            (Id ("xs", I));
                                                            (Id ("ys", I))])
                                                       ])
                                                  ]),
                                             (App
                                                [(Id ("succ", I));
                                                  (Id ("n", I))])
                                             ))))
                                    ]
                                  )),
                               []));
                            (App
                               [(Id ("append_len", I)); (Id ("xs", I));
                                 (Id ("ys", I))]);
                            (Id ("refl", I))])))
                ]
              )),
           [I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U,
                 (App
                    [(Inst ("list", [(SId "_"); (SId "t")], I));
                      (Id ("A", I))]),
                 (Binder ("xs",
                    (Pi (R, U,
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I));
                            (Id ("A", I))]),
                       (Binder ("ys",
                          (BOpr ("=",
                             (App
                                [(Id ("len", I));
                                  (App
                                     [(Id ("append", I)); (Id ("xs", I));
                                       (Id ("ys", I))])
                                  ]),
                             (App
                                [(Id ("add", I));
                                  (App [(Id ("len", I)); (Id ("xs", I))]);
                                  (App [(Id ("len", I)); (Id ("ys", I))])])
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I]};
  Definition {name = "llen"; relv = R;
    body =
    (Binder (["s"; "t"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U,
                    (App
                       [(Inst ("list", [(SId "_"); (SId "t")], I));
                         (Id ("A", I))]),
                    (Binder ("xs",
                       (BOpr ("\226\138\151", (Id ("nat", I)),
                          (App
                             [(Inst ("sing", [(SId "t"); (SId "t")], I));
                               (Id ("xs", I))])
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "llen"),
              [([(PId "A"); (PId "nil")],
                (Some (BOpr ("\226\159\168,\226\159\169", (Id ("zero", I)),
                         (App [(Id ("just", I)); (Id ("nil", I))])))));
                ([(PId "A"); (PBOpr ("::", (PId "hd"), (PId "tl")))],
                 (Some (Let (R, (App [(Id ("llen", I)); (Id ("tl", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "n"),
                                (PConstr ("just", [(PId "tl")])))),
                             (BOpr ("\226\159\168,\226\159\169",
                                (App [(Id ("succ", I)); (Id ("n", I))]),
                                (App
                                   [(Id ("just", I));
                                     (BOpr ("::", (Id ("hd", I)),
                                        (Id ("tl", I))))
                                     ])
                                ))
                             ))
                          ))))
                ]
              )),
           [I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U,
                 (App
                    [(Inst ("list", [(SId "_"); (SId "t")], I));
                      (Id ("A", I))]),
                 (Binder ("xs",
                    (BOpr ("\226\138\151", (Id ("nat", I)),
                       (App
                          [(Inst ("sing", [(SId "t"); (SId "t")], I));
                            (Id ("xs", I))])
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I]};
  Definition {name = "fst"; relv = N;
    body =
    (Binder (["s"; "r"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Type (SId "r")),
                    (Binder ("B",
                       (Pi (R, U,
                          (BOpr ("\226\138\151", (Id ("A", I)), (Id ("B", I))
                             )),
                          (Binder ("_", (Id ("A", I))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "fst"),
              [([(PId "A"); (PId "B");
                  (PBOpr ("\226\159\168,\226\159\169", (PId "x"), (PId "_")))
                  ],
                (Some (Id ("x", I))))]
              )),
           [I; I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Type (SId "r")),
                 (Binder ("B",
                    (Pi (R, U,
                       (BOpr ("\226\138\151", (Id ("A", I)), (Id ("B", I)))),
                       (Binder ("_", (Id ("A", I))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Definition {name = "snd"; relv = N;
    body =
    (Binder (["s"; "r"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Type (SId "r")),
                    (Binder ("B",
                       (Pi (R, U,
                          (BOpr ("\226\138\151", (Id ("A", I)), (Id ("B", I))
                             )),
                          (Binder ("_", (Id ("B", I))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "snd"),
              [([(PId "A"); (PId "B");
                  (PBOpr ("\226\159\168,\226\159\169", (PId "_"), (PId "x")))
                  ],
                (Some (Id ("x", I))))]
              )),
           [I; I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Type (SId "r")),
                 (Binder ("B",
                    (Pi (R, U,
                       (BOpr ("\226\138\151", (Id ("A", I)), (Id ("B", I)))),
                       (Binder ("_", (Id ("B", I))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]};
  Definition {name = "llen_len"; relv = N;
    body =
    (Binder (["s"; "t"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U,
                    (App
                       [(Inst ("list", [(SId "_"); (SId "t")], I));
                         (Id ("A", I))]),
                    (Binder ("xs",
                       (BOpr ("=",
                          (App
                             [(Id ("fst", I));
                               (App [(Id ("llen", I)); (Id ("xs", I))])]),
                          (App [(Id ("len", I)); (Id ("xs", I))])))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "llen_len"),
              [([(PId "A"); (PId "nil")], (Some (Id ("refl", I))));
                ([(PId "A"); (PBOpr ("::", (PId "hd"), (PId "tl")))],
                 (Some (Match (
                          [(R, (App [(Id ("llen", I)); (Id ("tl", I))]),
                            (Some ("x", IMeta)));
                            (R, (Id ("refl", I)),
                             (Some ("_",
                                    (BOpr ("=",
                                       (App
                                          [(Id ("llen", I)); (Id ("tl", I))]),
                                       (Id ("x", I)))))))
                            ],
                          None,
                          [([(PBOpr ("\226\159\168,\226\159\169", (PId "n"),
                                (PConstr ("just", [(PId "tl")]))));
                              (PId "pf")],
                            (Some (Let (R,
                                     (App
                                        [(Id ("llen_len", I)); (Id ("tl", I))
                                          ]),
                                     (Binder ((PId "ih"),
                                        (Let (R,
                                           (App
                                              [(Id ("rwl", I));
                                                (Fun (
                                                   (Pi (R, U, IMeta,
                                                      (Binder ("x", IMeta)))),
                                                   (Binder (None,
                                                      [([(PId "x")],
                                                        (Some (BOpr ("=",
                                                                 (App
                                                                    [(Id (
                                                                    "fst", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I))]),
                                                                 (App
                                                                    [(Id (
                                                                    "len", I
                                                                    ));
                                                                    (Id (
                                                                    "tl", I))
                                                                    ])
                                                                 ))))
                                                        ]
                                                      )),
                                                   []));
                                                (Id ("pf", I));
                                                (Id ("ih", I))]),
                                           (Binder ((PId "ih"),
                                              (BOpr ("|>",
                                                 (BOpr ("|>",
                                                    (Id ("refl", I)),
                                                    (App
                                                       [(Id ("rwr", I));
                                                         (Fun (
                                                            (Pi (R, U,
                                                               (BOpr (
                                                                  "\226\138\151",
                                                                  (Id ("nat",
                                                                    I)),
                                                                  (App
                                                                    [(Id (
                                                                    "sing", I
                                                                    ));
                                                                    (Id (
                                                                    "tl", I))
                                                                    ])
                                                                  )),
                                                               (Binder ("x",
                                                                  IMeta))
                                                               )),
                                                            (Binder (None,
                                                               [([(PId "x")],
                                                                 (Some (
                                                                 BOpr ("=",
                                                                   (App
                                                                    [(Id (
                                                                    "fst", E
                                                                    ));
                                                                    (Id (
                                                                    "nat", I
                                                                    ));
                                                                    (App
                                                                    [(Inst (
                                                                    "sing",
                                                                    [(SId "t");
                                                                    (SId "t")
                                                                    ], I));
                                                                    (BOpr (
                                                                    "::",
                                                                    IMeta,
                                                                    (Id (
                                                                    "tl", I))
                                                                    ))]);
                                                                    (Let (R,
                                                                    (Id ("x",
                                                                    I)),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "n"),
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "tl")]))
                                                                    )),
                                                                    (BOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (App
                                                                    [(Id (
                                                                    "succ", I
                                                                    ));
                                                                    (Id ("n",
                                                                    I))]),
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (BOpr (
                                                                    "::",
                                                                    (Id (
                                                                    "hd", I)),
                                                                    (Id (
                                                                    "tl", I))
                                                                    ))])))))
                                                                    ))]),
                                                                   (App
                                                                    [(Id (
                                                                    "succ", I
                                                                    ));
                                                                    (Id ("n",
                                                                    I))])
                                                                   ))))
                                                                 ]
                                                               )),
                                                            []));
                                                         (Id ("pf", I))])
                                                    )),
                                                 (App
                                                    [(Id ("rwl", I));
                                                      (Fun (
                                                         (Pi (R, U,
                                                            (Id ("nat", I)),
                                                            (Binder ("x",
                                                               IMeta))
                                                            )),
                                                         (Binder (None,
                                                            [([(PId "x")],
                                                              (Some (
                                                              BOpr ("=",
                                                                (App
                                                                   [(Id (
                                                                    "fst", E
                                                                    ));
                                                                    (Id (
                                                                    "nat", I
                                                                    ));
                                                                    (App
                                                                    [(Inst (
                                                                    "sing",
                                                                    [(SId "t");
                                                                    (SId "t")
                                                                    ], I));
                                                                    (BOpr (
                                                                    "::",
                                                                    (Id (
                                                                    "hd", I)),
                                                                    (Id (
                                                                    "tl", I))
                                                                    ))]);
                                                                    (Let (R,
                                                                    (App
                                                                    [(Id (
                                                                    "llen", I
                                                                    ));
                                                                    (Id (
                                                                    "tl", I))
                                                                    ]),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "n"),
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "tl")]))
                                                                    )),
                                                                    (BOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (App
                                                                    [(Id (
                                                                    "succ", I
                                                                    ));
                                                                    (Id ("n",
                                                                    I))]),
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (BOpr (
                                                                    "::",
                                                                    (Id (
                                                                    "hd", I)),
                                                                    (Id (
                                                                    "tl", I))
                                                                    ))])))))
                                                                    ))]),
                                                                (App
                                                                   [(Id (
                                                                    "succ", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I))])
                                                                ))))
                                                              ]
                                                            )),
                                                         []));
                                                      (Id ("ih", I))])
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))))
                            ]
                          ))))
                ]
              )),
           [I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U,
                 (App
                    [(Inst ("list", [(SId "_"); (SId "t")], I));
                      (Id ("A", I))]),
                 (Binder ("xs",
                    (BOpr ("=",
                       (App
                          [(Id ("fst", I));
                            (App [(Id ("llen", I)); (Id ("xs", I))])]),
                       (App [(Id ("len", I)); (Id ("xs", I))])))
                    ))
                 ))
              ))
           )))
       ));
    view = [I]}
  ]

[parse success]

-----------------------------------------

#[program]
def append_31‹s_494,t_495› :
  ∀ {A_496 : Type‹s_494›} ->
    (list_6‹s_494,t_495› A_496) ->
      (list_6‹s_494,t_495› A_496) -o (list_6‹s_494,t_495› A_496)
:=
  (fun append_499 :
    ∀ {A_500 : Type‹s_494›} ->
      (list_6‹s_494,t_495› A_500) ->
        (list_6‹s_494,t_495› A_500) -o (list_6‹s_494,t_495› A_500)
  | A_503, nil_8, ys_504 => ys_504
  | A_505, (cons_9 x_506 xs_507), ys_508 =>
    (cons_9‹??_50,??_51›
      ?_60[0;0] x_506 ((append_499) ?_59[0;0] xs_507 ys_508)))

#[logical]
def len_32‹s_509,t_510› :
  ∀ {A_511 : Type‹s_509›} -> (list_6‹??_53,t_510› A_511) -> nat_5
:=
  (fun len_513 :
    ∀ {A_514 : Type‹s_509›} -> (list_6‹??_52,t_510› A_514) -> nat_5
  | A_516, nil_8 => zero_6
  | A_517, (cons_9 _518 tl_519) =>
    (succ_7‹› ((len_513) ?_61[0;0] tl_519)))

#[logical]
def append_len_33‹s_520,t_521› :
  ∀ {A_522 : Type‹s_520›} ->
    ∀ (xs_523 : (list_6‹??_74,t_521› A_522)) ->
      ∀ (ys_524 : (list_6‹??_75,t_521› A_522)) ->
        (eq_1‹??_84›
          ?_84[0;0]
          ((len_32‹??_78,??_79›)
            ?_81[0;0] ((append_31‹??_76,??_77›) ?_80[0;0] xs_523 ys_524))
          ((add_18)
            ((len_32‹??_80,??_81›) ?_82[0;0] xs_523)
            ((len_32‹??_82,??_83›) ?_83[0;0] ys_524)))
:=
  (fun append_len_525 :
    ∀ {A_526 : Type‹s_520›} ->
      ∀ (xs_527 : (list_6‹??_54,t_521› A_526)) ->
        ∀ (ys_528 : (list_6‹??_55,t_521› A_526)) ->
          (eq_1‹??_64›
            ?_66[0;0]
            ((len_32‹??_58,??_59›)
              ?_63[0;0]
              ((append_31‹??_56,??_57›) ?_62[0;0] xs_527 ys_528))
            ((add_18)
              ((len_32‹??_60,??_61›) ?_64[0;0] xs_527)
              ((len_32‹??_62,??_63›) ?_65[0;0] ys_528)))
  | A_529, nil_8, ys_530 => (refl_1‹??_65› ?_67[0;0] ?_68[0;0])
  | A_531, (cons_9 x_532 xs_533), ys_534 =>
    ((rwl_2‹??_72,??_73›)
      ?_79[0;0] ?_78[0;0] ?_77[0;0]
      (fun _535 : ?_69[0;0] -> ?_70[0;0]
      | n_537 =>
        (eq_1‹??_70›
          ?_73[0;0]
          (succ_7‹›
            ((len_32‹??_68,??_69›)
              ?_72[0;0]
              ((append_31‹??_66,??_67›) ?_71[0;0] xs_533 ys_534)))
          (succ_7‹› n_537)))
      ((append_len_525) ?_74[0;0] xs_533 ys_534)
      (refl_1‹??_71› ?_75[0;0] ?_76[0;0])))

#[program]
def llen_34‹s_538,t_539› :
  ∀ {A_540 : Type‹s_538›} ->
    ∀ (xs_541 : (list_6‹??_100,t_539› A_540)) ->
      (tensor_10‹??_101,??_102›
        nat_5 (sing_2‹t_539,t_539› ?_97[0;0] xs_541))
:=
  (fun llen_542 :
    ∀ {A_543 : Type‹s_538›} ->
      ∀ (xs_544 : (list_6‹??_85,t_539› A_543)) ->
        (tensor_10‹??_86,??_87›
          nat_5 (sing_2‹t_539,t_539› ?_85[0;0] xs_544))
  | A_545, nil_8 =>
    (pair_13‹??_92,??_93›
      ?_88[0;0] ?_89[0;0] zero_6
      (just_2‹??_90,??_91› ?_87[0;0] (nil_8‹??_88,??_89› ?_86[0;0])))
  | A_546, (cons_9 hd_547 tl_548) =>
    (match ((llen_542) ?_90[0;0] tl_548) in ?_96[0;0] -o ?_95[0;0] with
    | (pair_13 n_550 (just_2 tl_551)) =>
      (pair_13‹??_98,??_99›
        ?_93[0;0] ?_94[0;0] (succ_7‹› n_550)
        (just_2‹??_96,??_97›
          ?_92[0;0] (cons_9‹??_94,??_95› ?_91[0;0] hd_547 tl_551)))))

#[logical]
def fst_35‹s_552,r_553› :
  ∀ {A_554 : Type‹s_552›} ->
    ∀ {B_555 : Type‹r_553›} ->
      (tensor_10‹??_105,??_106› A_554 B_555) -> A_554
:=
  (fun fst_557 :
    ∀ {A_558 : Type‹s_552›} ->
      ∀ {B_559 : Type‹r_553›} ->
        (tensor_10‹??_103,??_104› A_558 B_559) -> A_558
  | A_561, B_562, (pair_13 x_563 _564) => x_563)

#[logical]
def snd_36‹s_565,r_566› :
  ∀ {A_567 : Type‹s_565›} ->
    ∀ {B_568 : Type‹r_566›} ->
      (tensor_10‹??_109,??_110› A_567 B_568) -> B_568
:=
  (fun snd_570 :
    ∀ {A_571 : Type‹s_565›} ->
      ∀ {B_572 : Type‹r_566›} ->
        (tensor_10‹??_107,??_108› A_571 B_572) -> B_572
  | A_574, B_575, (pair_13 _576 x_577) => x_577)

#[logical]
def llen_len_37‹s_578,t_579› :
  ∀ {A_580 : Type‹s_578›} ->
    ∀ (xs_581 : (list_6‹??_166,t_579› A_580)) ->
      (eq_1‹??_173›
        ?_157[0;0]
        ((fst_35‹??_169,??_170›)
          ?_155[0;0] ?_154[0;0]
          ((llen_34‹??_167,??_168›) ?_153[0;0] xs_581))
        ((len_32‹??_171,??_172›) ?_156[0;0] xs_581))
:=
  (fun llen_len_582 :
    ∀ {A_583 : Type‹s_578›} ->
      ∀ (xs_584 : (list_6‹??_111,t_579› A_583)) ->
        (eq_1‹??_118›
          ?_102[0;0]
          ((fst_35‹??_114,??_115›)
            ?_100[0;0] ?_99[0;0]
            ((llen_34‹??_112,??_113›) ?_98[0;0] xs_584))
          ((len_32‹??_116,??_117›) ?_101[0;0] xs_584))
  | A_585, nil_8 => (refl_1‹??_119› ?_103[0;0] ?_104[0;0])
  | A_586, (cons_9 hd_587 tl_588) =>
    (match ((llen_34‹??_120,??_121›) ?_105[0;0] tl_588),
     (refl_1‹??_122› ?_106[0;0] ?_107[0;0]) in
       ∀ (x_589 : ?_108[0;0]) -o
         (eq_1‹??_125›
           ?_110[0;0] ((llen_34‹??_123,??_124›) ?_109[0;0] tl_588) x_589) -o
           ?_111[0;0]
     with
    | (pair_13 n_591 (just_2 tl_592)), pf_593 =>
      let ih_594 := ((llen_len_582) ?_112[0;0] tl_592) in
      let ih_595 :=
        ((rwl_2‹??_131,??_132›)
          ?_121[0;0] ?_120[0;0] ?_119[0;0]
          (fun _596 : ?_113[0;0] -> ?_114[0;0]
          | x_598 =>
            (eq_1‹??_130›
              ?_118[0;0]
              ((fst_35‹??_126,??_127›) ?_116[0;0] ?_115[0;0] x_598)
              ((len_32‹??_128,??_129›) ?_117[0;0] tl_592)))
          pf_593 ih_594)
      in
      ((rwl_2‹??_146,??_147›)
        ?_135[0;0] ?_134[0;0] ?_133[0;0]
        (fun _599 : nat_5 -> ?_122[0;0]
        | x_601 =>
          (eq_1‹??_145›
            ?_132[0;0]
            ((fst_35‹??_143,??_144›)
              nat_5
              (sing_2‹t_579,t_579›
                ?_124[0;0]
                (cons_9‹??_133,??_134› ?_123[0;0] hd_587 tl_592))
              (match ((llen_34‹??_135,??_136›) ?_125[0;0] tl_592) in
                 ?_131[0;0] -o ?_130[0;0]
               with
              | (pair_13 n_603 (just_2 tl_604)) =>
                (pair_13‹??_141,??_142›
                  ?_128[0;0] ?_129[0;0] (succ_7‹› n_603)
                  (just_2‹??_139,??_140›
                    ?_127[0;0]
                    (cons_9‹??_137,??_138› ?_126[0;0] hd_587 tl_604)))))
            (succ_7‹› x_601)))
        ih_595
        ((rwr_3‹??_163,??_164›)
          ?_150[0;0] ?_149[0;0] ?_148[0;0]
          (fun _605 :
            (tensor_10‹??_150,??_151›
              nat_5 (sing_2‹??_148,??_149› ?_136[0;0] tl_592)) ->
              ?_137[0;0]
          | x_607 =>
            (eq_1‹??_162›
              ?_147[0;0]
              ((fst_35‹??_160,??_161›)
                nat_5
                (sing_2‹t_579,t_579›
                  ?_140[0;0]
                  (cons_9‹??_152,??_153› ?_139[0;0] ?_138[0;0] tl_592))
                (match x_607 in ?_146[0;0] -o ?_145[0;0] with
                | (pair_13 n_609 (just_2 tl_610)) =>
                  (pair_13‹??_158,??_159›
                    ?_143[0;0] ?_144[0;0] (succ_7‹› n_609)
                    (just_2‹??_156,??_157›
                      ?_142[0;0]
                      (cons_9‹??_154,??_155› ?_141[0;0] hd_587 tl_610)))))
              (succ_7‹› n_591)))
          pf_593 (refl_1‹??_165› ?_151[0;0] ?_152[0;0])))))

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_42568› :
  ∀ (A_42569 : Type‹s_42568›) -> A_42569 -> A_42569
:=
  (fun id_42571 : ∀ (A_42572 : Type‹s_42568›) -> A_42572 -> A_42572
  | A_42574, m_42575 => m_42575)

#[logical]
inductive eq_1‹s_42576› (A_42577 : Type‹s_42576›) (m_42578 : A_42577):
  A_42577 -> U
where
| refl_1 : (eq_1‹s_42576› A_42577 m_42578 m_42578)

#[program]
def rwl_2‹s_42580,r_42581› :
  ∀ {A_42582 : Type‹s_42580›} ->
    ∀ {m_42583 : A_42582} ->
      ∀ {n_42584 : A_42582} ->
        ∀ {B_42585 : A_42582 -> Type‹r_42581›} ->
          {(eq_1‹s_42580› A_42582 m_42583 n_42584)} ->
            ((B_42585) m_42583) -> ((B_42585) n_42584)
:=
  (fun rwl_42589 :
    ∀ {A_42590 : Type‹s_42580›} ->
      ∀ {m_42591 : A_42590} ->
        ∀ {n_42592 : A_42590} ->
          ∀ {B_42593 : A_42590 -> Type‹r_42581›} ->
            {(eq_1‹s_42580› A_42590 m_42591 n_42592)} ->
              ((B_42593) m_42591) -> ((B_42593) n_42592)
  | A_42597, m_42598, n_42599, B_42600, refl_1, __42601 => __42601)

#[program]
def rwr_3‹s_42602,r_42603› :
  ∀ {A_42604 : Type‹s_42602›} ->
    ∀ {m_42605 : A_42604} ->
      ∀ {n_42606 : A_42604} ->
        ∀ {B_42607 : A_42604 -> Type‹r_42603›} ->
          {(eq_1‹s_42602› A_42604 m_42605 n_42606)} ->
            ((B_42607) n_42606) -> ((B_42607) m_42605)
:=
  (fun rwr_42611 :
    ∀ {A_42612 : Type‹s_42602›} ->
      ∀ {m_42613 : A_42612} ->
        ∀ {n_42614 : A_42612} ->
          ∀ {B_42615 : A_42612 -> Type‹r_42603›} ->
            {(eq_1‹s_42602› A_42612 m_42613 n_42614)} ->
              ((B_42615) n_42614) -> ((B_42615) m_42613)
  | A_42619, m_42620, n_42621, B_42622, refl_1, __42623 => __42623)

#[logical]
def congr_4‹s_42624,r_42625,t_42626› :
  ∀ (A_42627 : Type‹s_42624›) ->
    ∀ (B_42628 : Type‹r_42625›) ->
      ∀ (m_42629 : A_42627) ->
        ∀ (n_42630 : A_42627) ->
          ∀ (f_42631 : forall‹t_42626›(__42632 : A_42627), B_42628) ->
            (eq_1‹s_42624› A_42627 m_42629 n_42630) ->
              (eq_1‹r_42625›
                B_42628 ((f_42631) m_42629) ((f_42631) n_42630))
:=
  (fun congr_42634 :
    ∀ (A_42635 : Type‹s_42624›) ->
      ∀ (B_42636 : Type‹r_42625›) ->
        ∀ (m_42637 : A_42635) ->
          ∀ (n_42638 : A_42635) ->
            ∀ (f_42639 :
              forall‹t_42626›(__42640 : A_42635), B_42636) ->
              (eq_1‹s_42624› A_42635 m_42637 n_42638) ->
                (eq_1‹r_42625›
                  B_42636 ((f_42639) m_42637) ((f_42639) n_42638))
  | A_42642, B_42643, m_42644, n_42645, f_42646, refl_1 =>
    (refl_1‹r_42625› B_42643 ((f_42646) n_42645)))

#[logical]
def axiom_K_5‹› :
  ∀ {A_42647 : U} ->
    ∀ {m_42648 : A_42647} ->
      ∀ (x_42649 : (eq_1‹U› A_42647 m_42648 m_42648)) ->
        (eq_1‹U›
          (eq_1‹U› A_42647 m_42648 m_42648) x_42649
          (refl_1‹U› A_42647 m_42648))
:=
  (fun axiom_K_42650 :
    ∀ {A_42651 : U} ->
      ∀ {m_42652 : A_42651} ->
        ∀ (x_42653 : (eq_1‹U› A_42651 m_42652 m_42652)) ->
          (eq_1‹U›
            (eq_1‹U› A_42651 m_42652 m_42652) x_42653
            (refl_1‹U› A_42651 m_42652))
  | A_42654, m_42655, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_42654 m_42655 m_42655) (refl_1‹U› A_42654 m_42655)))

#[program]
inductive sing_2‹s_42656,t_42657› (A_42658 : Type‹s_42656›):
  A_42658 -> Type‹t_42657›
where
| just_2 (m_42660 : A_42658) : (sing_2‹s_42656,t_42657› A_42658 m_42660)

#[logical]
def ssing_6‹s_42661› :
  ∀ (A_42662 : Type‹s_42661›) -> A_42662 -> Type‹s_42661›
:=
  (fun ssing_42664 :
    ∀ (A_42665 : Type‹s_42661›) -> A_42665 -> Type‹s_42661›
  | A_42667, m_42668 => (sing_2‹s_42661,s_42661› A_42667 m_42668))

#[program]
def sing_elim_7‹s_42669,t_42670› :
  ∀ {A_42671 : Type‹s_42669›} ->
    ∀ {x_42672 : A_42671} ->
      (sing_2‹s_42669,t_42670› A_42671 x_42672) -> A_42671
:=
  (fun sing_elim_42674 :
    ∀ {A_42675 : Type‹s_42669›} ->
      ∀ {x_42676 : A_42675} ->
        (sing_2‹s_42669,t_42670› A_42675 x_42676) -> A_42675
  | A_42678, x_42679, (just_2 m_42680) => m_42680)

#[logical]
def sing_uniq_8‹s_42681,t_42682› :
  ∀ (A_42683 : Type‹s_42681›) ->
    ∀ (x0_42684 : A_42683) ->
      ∀ (x_42685 : (sing_2‹s_42681,t_42682› A_42683 x0_42684)) ->
        (eq_1‹s_42681›
          A_42683 x0_42684
          ((sing_elim_7‹s_42681,t_42682›) A_42683 x0_42684 x_42685))
:=
  (fun sing_uniq_42686 :
    ∀ (A_42687 : Type‹s_42681›) ->
      ∀ (x0_42688 : A_42687) ->
        ∀ (x_42689 : (sing_2‹s_42681,t_42682› A_42687 x0_42688)) ->
          (eq_1‹s_42681›
            A_42687 x0_42688
            ((sing_elim_7‹s_42681,t_42682›) A_42687 x0_42688 x_42689))
  | A_42690, x0_42691, (just_2 m_42692) =>
    (refl_1‹s_42681› A_42690 m_42692))

#[program]
inductive base_3‹s_42693› : Type‹s_42693› where
| tt_3 : base_3‹s_42693›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_42694 : unit_9) -> (eq_1‹U› base_3‹U› x_42694 tt_3‹U›)
:=
  (fun unit_eta_42695 :
    ∀ (x_42696 : unit_9) -> (eq_1‹U› base_3‹U› x_42696 tt_3‹U›)
  | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›))

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  (fun not_42698 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4)

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun and_42702 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __42705 => false_5)

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun or_42708 : bool_4 -> bool_4 -> bool_4
  | true_4, __42711 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun xor_42714 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_42717 : nat_5) : nat_5

#[program]
def lte_15‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lte_42720 : nat_5 -> nat_5 -> bool_4
  | zero_6, __42723 => true_4
  | (succ_7 n_42724), zero_6 => false_5
  | (succ_7 n_42725), (succ_7 n_42726) => ((lte_42720) n_42725 n_42726))

#[program]
def lt_16‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lt_42729 : nat_5 -> nat_5 -> bool_4
  | x_42732, y_42733 => ((lte_15) (succ_7‹› x_42732) y_42733))

#[program]
def pred_17‹› : nat_5 -> nat_5 :=
  (fun pred_42735 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_42737) => n_42737)

#[program]
def add_18‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun add_42740 : nat_5 -> nat_5 -> nat_5
  | zero_6, __42743 => __42743
  | (succ_7 n_42744), __42745 => (succ_7‹› ((add_42740) n_42744 __42745)))

#[program]
def sub_19‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun sub_42748 : nat_5 -> nat_5 -> nat_5
  | __42751, zero_6 => __42751
  | __42752, (succ_7 n_42753) => ((sub_42748) ((pred_17) __42752) n_42753))

#[program]
def mul_20‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun mul_42756 : nat_5 -> nat_5 -> nat_5
  | zero_6, __42759 => zero_6
  | (succ_7 n_42760), __42761 =>
    ((add_18) __42761 ((mul_42756) n_42760 __42761)))

#[program]
def div_21‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun div_42764 : nat_5 -> nat_5 -> nat_5
  | x_42767, y_42768 =>
    (match ((lt_16) x_42767 y_42768) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_42770 :=
        (fun loop_42771 : nat_5 -> nat_5 -> nat_5
        | x_42774, y_42775 =>
          (match ((sub_19) x_42774 ((pred_17) y_42775)) in nat_5 -o nat_5
           with
          | zero_6 => zero_6
          | (succ_7 n_42777) => (succ_7‹› ((loop_42771) n_42777 y_42775))))
      in ((loop_42770) x_42767 y_42768)))

#[program]
def rem_22‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun rem_42780 : nat_5 -> nat_5 -> nat_5
  | x_42783, y_42784 =>
    ((sub_19) x_42783 ((mul_20) ((div_21) x_42783 y_42784) y_42784)))

#[program]
inductive list_6‹s_42785,t_42786› (A_42787 : Type‹s_42785›):
  Type‹t_42786›
where
| nil_8 : (list_6‹s_42785,t_42786› A_42787)
| cons_9
    (hd_42788 : A_42787) (tl_42789 : (list_6‹s_42785,t_42786› A_42787))
    : (list_6‹s_42785,t_42786› A_42787)

#[program]
def free_list_23‹s_42790,t_42791› :
  ∀ {A_42792 : Type‹s_42790›} ->
    A_42792 -> unit_9 -> (list_6‹s_42790,t_42791› A_42792) -> unit_9
:=
  (fun free_list_42796 :
    ∀ {A_42797 : Type‹s_42790›} ->
      A_42797 -> unit_9 -> (list_6‹s_42790,t_42791› A_42797) -> unit_9
  | A_42801, f_42802, nil_8 => tt_3‹U›
  | A_42803, f_42804, (cons_9 hd_42805 tl_42806) =>
    let __42807 := ((f_42804) hd_42805) in
    ((free_list_42796) A_42803 f_42804 tl_42806))

#[program]
inductive exists_7‹s_42808,r_42809› (A_42810 : Type‹s_42808›) (B_42811 : 
A_42810 -> Type‹r_42809›): L where
| ex_10
    (m_42813 : A_42810) {n_42814 : ((B_42811) m_42813)}
    : (exists_7‹s_42808,r_42809› A_42810 B_42811)

#[program]
inductive exists0_8‹s_42815,r_42816› (A_42817 : Type‹s_42815›) (B_42818 : 
A_42817 -> Type‹r_42816›): L where
| ex0_11
    {m_42820 : A_42817} (n_42821 : ((B_42818) m_42820))
    : (exists0_8‹s_42815,r_42816› A_42817 B_42818)

#[program]
inductive exists1_9‹s_42822,r_42823› (A_42824 : Type‹s_42822›) (B_42825 : 
A_42824 -> Type‹r_42823›): L where
| ex1_12
    (m_42827 : A_42824) (n_42828 : ((B_42825) m_42827))
    : (exists1_9‹s_42822,r_42823› A_42824 B_42825)

#[program]
inductive tensor_10‹s_42829,r_42830› (A_42831 : Type‹s_42829›) (B_42832 : Type‹r_42830›):
  L
where
| pair_13
    (m_42833 : A_42831) (n_42834 : B_42832)
    : (tensor_10‹s_42829,r_42830› A_42831 B_42832)

#[program]
def pow_24‹› : int -> int -> int :=
  (fun pow_42837 : int -> int -> int
  | x_42840, y_42841 =>
    let loop_42842 :=
      (fun loop_42843 : int -> int -> int
      | acc_42846, y_42847 =>
        (match (__lte__ y_42847 0) in bool_4 -o int with
        | true_4 => acc_42846
        | false_5 =>
          ((loop_42843) (__mul__ x_42840 acc_42846) (__sub__ y_42847 1))))
    in ((loop_42842) 1 y_42841))

#[program]
def powm_25‹› : int -> int -> int -> int :=
  (fun powm_42852 : int -> int -> int -> int
  | x_42856, y_42857, m_42858 =>
    let loop_42859 :=
      (fun loop_42860 : int -> int -> int
      | acc_42863, y_42864 =>
        (match (__lte__ y_42864 0) in bool_4 -o int with
        | true_4 => acc_42863
        | false_5 =>
          ((loop_42860)
            (__mod__ (__mul__ x_42856 acc_42863) m_42858) (__sub__ y_42864 1))))
    in ((loop_42859) 1 y_42857))

#[program]
def ord_26‹› : char -> int :=
  (fun ord_42867 : char -> int
  | c_42869 => (__ord__ c_42869))

#[program]
def chr_27‹› : int -> char :=
  (fun chr_42871 : int -> char
  | i_42873 => (__chr__ i_42873))

#[program]
def str_28‹› : char -> string :=
  (fun str_42875 : char -> string
  | c_42877 => (__push__ "" c_42877))

#[program]
def strlen_29‹› : string -> int :=
  (fun strlen_42879 : string -> int
  | s_42881 => (__size__ s_42881))

#[program]
def string_of_int_30‹› : int -> string :=
  (fun string_of_int_42883 : int -> string
  | i_42885 =>
    let aux_42886 :=
      (fun aux_42887 : int -> string
      | i_42889 =>
        (match (__lte__ 10 i_42889) in bool_4 -o string with
        | true_4 =>
          let r_42891 := (__mod__ i_42889 10) in
          let i_42892 := (__div__ i_42889 10) in
          (__push__ ((aux_42887) i_42892)
            ((chr_27) (__add__ r_42891 ((ord_26) 0))))
        | false_5 => ((str_28) ((chr_27) (__add__ i_42889 ((ord_26) 0))))))
    in
    (match (__lte__ 0 i_42885) in bool_4 -o string with
    | true_4 => ((aux_42886) i_42885)
    | false_5 => (__cat__ "~" ((aux_42886) (__neg__ i_42885)))))

#[program]
def append_31‹s_42894,t_42895› :
  ∀ {A_42896 : Type‹s_42894›} ->
    (list_6‹s_42894,t_42895› A_42896) ->
      (list_6‹s_42894,t_42895› A_42896) -o
        (list_6‹s_42894,t_42895› A_42896)
:=
  (fun append_42899 :
    ∀ {A_42900 : Type‹s_42894›} ->
      (list_6‹s_42894,t_42895› A_42900) ->
        (list_6‹s_42894,t_42895› A_42900) -o
          (list_6‹s_42894,t_42895› A_42900)
  | A_42903, nil_8, __42904 => __42904
  | A_42905, (cons_9 hd_42906 tl_42907), __42908 =>
    (cons_9‹s_42894,t_42895›
      A_42905 hd_42906 ((append_42899) A_42905 tl_42907 __42908)))

#[logical]
def len_32‹s_42909,t_42910› :
  ∀ {A_42911 : Type‹s_42909›} ->
    (list_6‹s_42909,t_42910› A_42911) -> nat_5
:=
  (fun len_42913 :
    ∀ {A_42914 : Type‹s_42909›} ->
      (list_6‹s_42909,t_42910› A_42914) -> nat_5
  | A_42916, nil_8 => zero_6
  | A_42917, (cons_9 hd_42918 tl_42919) =>
    (succ_7‹› ((len_42913) A_42917 tl_42919)))

#[logical]
def append_len_33‹s_42920,t_42921› :
  ∀ {A_42922 : Type‹s_42920›} ->
    ∀ (xs_42923 : (list_6‹s_42920,t_42921› A_42922)) ->
      ∀ (ys_42924 : (list_6‹s_42920,t_42921› A_42922)) ->
        (eq_1‹U›
          nat_5
          ((len_32‹s_42920,t_42921›)
            A_42922
            ((append_31‹s_42920,t_42921›) A_42922 xs_42923 ys_42924))
          ((add_18)
            ((len_32‹s_42920,t_42921›) A_42922 xs_42923)
            ((len_32‹s_42920,t_42921›) A_42922 ys_42924)))
:=
  (fun append_len_42925 :
    ∀ {A_42926 : Type‹s_42920›} ->
      ∀ (xs_42927 : (list_6‹s_42920,t_42921› A_42926)) ->
        ∀ (ys_42928 : (list_6‹s_42920,t_42921› A_42926)) ->
          (eq_1‹U›
            nat_5
            ((len_32‹s_42920,t_42921›)
              A_42926
              ((append_31‹s_42920,t_42921›) A_42926 xs_42927 ys_42928))
            ((add_18)
              ((len_32‹s_42920,t_42921›) A_42926 xs_42927)
              ((len_32‹s_42920,t_42921›) A_42926 ys_42928)))
  | A_42929, nil_8, ys_42930 =>
    (refl_1‹U›
      nat_5
      ((len_32‹s_42920,t_42921›)
        A_42929
        ((append_31‹s_42920,t_42921›)
          A_42929 (nil_8‹s_42920,t_42921› A_42929) ys_42930)))
  | A_42931, (cons_9 hd_42932 tl_42933), ys_42934 =>
    ((rwl_2‹U,U›)
      nat_5
      ((len_32‹s_42920,t_42921›)
        A_42931 ((append_31‹s_42920,t_42921›) A_42931 tl_42933 ys_42934))
      ((add_18)
        ((len_32‹s_42920,t_42921›) A_42931 tl_42933)
        ((len_32‹s_42920,t_42921›) A_42931 ys_42934))
      (fun _42935 : nat_5 -> U
      | __42937 =>
        (eq_1‹U›
          nat_5
          (succ_7‹›
            ((len_32‹s_42920,t_42921›)
              A_42931
              ((append_31‹s_42920,t_42921›) A_42931 tl_42933 ys_42934)))
          (succ_7‹› __42937)))
      ((append_len_42925) A_42931 tl_42933 ys_42934)
      (refl_1‹U›
        nat_5
        (succ_7‹›
          ((len_32‹s_42920,t_42921›)
            A_42931
            ((append_31‹s_42920,t_42921›) A_42931 tl_42933 ys_42934))))))

#[program]
def llen_34‹s_42938,t_42939› :
  ∀ {A_42940 : Type‹s_42938›} ->
    ∀ (xs_42941 : (list_6‹s_42938,t_42939› A_42940)) ->
      (tensor_10‹U,t_42939›
        nat_5
        (sing_2‹t_42939,t_42939›
          (list_6‹s_42938,t_42939› A_42940) xs_42941))
:=
  (fun llen_42942 :
    ∀ {A_42943 : Type‹s_42938›} ->
      ∀ (xs_42944 : (list_6‹s_42938,t_42939› A_42943)) ->
        (tensor_10‹U,t_42939›
          nat_5
          (sing_2‹t_42939,t_42939›
            (list_6‹s_42938,t_42939› A_42943) xs_42944))
  | A_42945, nil_8 =>
    (pair_13‹U,t_42939›
      nat_5
      (sing_2‹t_42939,t_42939›
        (list_6‹s_42938,t_42939› A_42945)
        (nil_8‹s_42938,t_42939› A_42945))
      zero_6
      (just_2‹t_42939,t_42939›
        (list_6‹s_42938,t_42939› A_42945)
        (nil_8‹s_42938,t_42939› A_42945)))
  | A_42946, (cons_9 hd_42947 tl_42948) =>
    (match ((llen_42942) A_42946 tl_42948) in
       (tensor_10‹U,t_42939›
         nat_5
         (sing_2‹t_42939,t_42939›
           (list_6‹s_42938,t_42939› A_42946) tl_42948)) -o
         (tensor_10‹U,t_42939›
           nat_5
           (sing_2‹t_42939,t_42939›
             (list_6‹s_42938,t_42939› A_42946)
             (cons_9‹s_42938,t_42939› A_42946 hd_42947 tl_42948)))
     with
    | (pair_13 m_42950 (just_2 m_42951)) =>
      (pair_13‹U,t_42939›
        nat_5
        (sing_2‹t_42939,t_42939›
          (list_6‹s_42938,t_42939› A_42946)
          (cons_9‹s_42938,t_42939› A_42946 hd_42947 tl_42948))
        (succ_7‹› m_42950)
        (just_2‹t_42939,t_42939›
          (list_6‹s_42938,t_42939› A_42946)
          (cons_9‹s_42938,t_42939› A_42946 hd_42947 m_42951)))))

#[logical]
def fst_35‹s_42952,r_42953› :
  ∀ {A_42954 : Type‹s_42952›} ->
    ∀ {B_42955 : Type‹r_42953›} ->
      (tensor_10‹s_42952,r_42953› A_42954 B_42955) -> A_42954
:=
  (fun fst_42957 :
    ∀ {A_42958 : Type‹s_42952›} ->
      ∀ {B_42959 : Type‹r_42953›} ->
        (tensor_10‹s_42952,r_42953› A_42958 B_42959) -> A_42958
  | A_42961, B_42962, (pair_13 m_42963 n_42964) => m_42963)

#[logical]
def snd_36‹s_42965,r_42966› :
  ∀ {A_42967 : Type‹s_42965›} ->
    ∀ {B_42968 : Type‹r_42966›} ->
      (tensor_10‹s_42965,r_42966› A_42967 B_42968) -> B_42968
:=
  (fun snd_42970 :
    ∀ {A_42971 : Type‹s_42965›} ->
      ∀ {B_42972 : Type‹r_42966›} ->
        (tensor_10‹s_42965,r_42966› A_42971 B_42972) -> B_42972
  | A_42974, B_42975, (pair_13 m_42976 n_42977) => n_42977)

#[logical]
def llen_len_37‹s_42978,t_42979› :
  ∀ {A_42980 : Type‹s_42978›} ->
    ∀ (xs_42981 : (list_6‹s_42978,t_42979› A_42980)) ->
      (eq_1‹U›
        nat_5
        ((fst_35‹U,t_42979›)
          nat_5
          (sing_2‹t_42979,t_42979›
            (list_6‹s_42978,t_42979› A_42980) xs_42981)
          ((llen_34‹s_42978,t_42979›) A_42980 xs_42981))
        ((len_32‹s_42978,t_42979›) A_42980 xs_42981))
:=
  (fun llen_len_42982 :
    ∀ {A_42983 : Type‹s_42978›} ->
      ∀ (xs_42984 : (list_6‹s_42978,t_42979› A_42983)) ->
        (eq_1‹U›
          nat_5
          ((fst_35‹U,t_42979›)
            nat_5
            (sing_2‹t_42979,t_42979›
              (list_6‹s_42978,t_42979› A_42983) xs_42984)
            ((llen_34‹s_42978,t_42979›) A_42983 xs_42984))
          ((len_32‹s_42978,t_42979›) A_42983 xs_42984))
  | A_42985, nil_8 =>
    (refl_1‹U›
      nat_5
      ((fst_35‹U,t_42979›)
        nat_5
        (sing_2‹t_42979,t_42979›
          (list_6‹s_42978,t_42979› A_42985)
          (nil_8‹s_42978,t_42979› A_42985))
        ((llen_34‹s_42978,t_42979›)
          A_42985 (nil_8‹s_42978,t_42979› A_42985))))
  | A_42986, (cons_9 hd_42987 tl_42988) =>
    (match ((llen_34‹s_42978,t_42979›) A_42986 tl_42988),
     (refl_1‹L›
       (tensor_10‹U,t_42979›
         nat_5
         (sing_2‹t_42979,t_42979›
           (list_6‹s_42978,t_42979› A_42986) tl_42988))
       ((llen_34‹s_42978,t_42979›) A_42986 tl_42988)) in
       ∀ (x_42989 :
         (tensor_10‹U,t_42979›
           nat_5
           (sing_2‹t_42979,t_42979›
             (list_6‹s_42978,t_42979› A_42986) tl_42988))) -o
         (eq_1‹L›
           (tensor_10‹U,t_42979›
             nat_5
             (sing_2‹t_42979,t_42979›
               (list_6‹s_42978,t_42979› A_42986) tl_42988))
           ((llen_34‹s_42978,t_42979›) A_42986 tl_42988) x_42989) -o
           (eq_1‹U›
             nat_5
             ((fst_35‹U,t_42979›)
               nat_5
               (sing_2‹t_42979,t_42979›
                 (list_6‹s_42978,t_42979› A_42986)
                 (cons_9‹s_42978,t_42979› A_42986 hd_42987 tl_42988))
               ((llen_34‹s_42978,t_42979›)
                 A_42986
                 (cons_9‹s_42978,t_42979› A_42986 hd_42987 tl_42988)))
             ((len_32‹s_42978,t_42979›)
               A_42986
               (cons_9‹s_42978,t_42979› A_42986 hd_42987 tl_42988)))
     with
    | (pair_13 m_42991 (just_2 m_42992)), __42993 =>
      let ih_42994 := ((llen_len_42982) A_42986 m_42992) in
      let ih_42995 :=
        ((rwl_2‹L,U›)
          (tensor_10‹U,t_42979›
            nat_5
            (sing_2‹t_42979,t_42979›
              (list_6‹s_42978,t_42979› A_42986) tl_42988))
          ((llen_34‹s_42978,t_42979›) A_42986 tl_42988)
          (pair_13‹U,t_42979›
            nat_5
            (sing_2‹t_42979,t_42979›
              (list_6‹s_42978,t_42979› A_42986) tl_42988)
            m_42991
            (just_2‹t_42979,t_42979›
              (list_6‹s_42978,t_42979› A_42986) tl_42988))
          (fun _42996 :
            (tensor_10‹U,t_42979›
              nat_5
              (sing_2‹t_42979,t_42979›
                (list_6‹s_42978,t_42979› A_42986) tl_42988)) ->
              U
          | __42998 =>
            (eq_1‹U›
              nat_5
              ((fst_35‹U,t_42979›)
                nat_5
                (sing_2‹t_42979,t_42979›
                  (list_6‹s_42978,t_42979› A_42986) tl_42988)
                __42998)
              ((len_32‹s_42978,t_42979›) A_42986 m_42992)))
          __42993 ih_42994)
      in
      ((rwl_2‹U,U›)
        nat_5
        ((fst_35‹U,t_42979›)
          nat_5
          (sing_2‹t_42979,t_42979›
            (list_6‹s_42978,t_42979› A_42986) tl_42988)
          (pair_13‹U,t_42979›
            nat_5
            (sing_2‹t_42979,t_42979›
              (list_6‹s_42978,t_42979› A_42986) tl_42988)
            m_42991
            (just_2‹t_42979,t_42979›
              (list_6‹s_42978,t_42979› A_42986) tl_42988)))
        ((len_32‹s_42978,t_42979›) A_42986 m_42992)
        (fun _42999 : nat_5 -> U
        | __43001 =>
          (eq_1‹U›
            nat_5
            ((fst_35‹U,t_42979›)
              nat_5
              (sing_2‹t_42979,t_42979›
                (list_6‹s_42978,t_42979› A_42986)
                (cons_9‹s_42978,t_42979› A_42986 hd_42987 m_42992))
              (match ((llen_34‹s_42978,t_42979›) A_42986 m_42992) in
                 (tensor_10‹U,t_42979›
                   nat_5
                   (sing_2‹t_42979,t_42979›
                     (list_6‹s_42978,t_42979› A_42986) m_42992)) -o
                   (tensor_10‹U,t_42979›
                     nat_5
                     (sing_2‹t_42979,t_42979›
                       (list_6‹s_42978,t_42979› A_42986)
                       (cons_9‹s_42978,t_42979› A_42986 hd_42987 m_42992)))
               with
              | (pair_13 m_43003 (just_2 m_43004)) =>
                (pair_13‹U,t_42979›
                  nat_5
                  (sing_2‹t_42979,t_42979›
                    (list_6‹s_42978,t_42979› A_42986)
                    (cons_9‹s_42978,t_42979› A_42986 hd_42987 m_42992))
                  (succ_7‹› m_43003)
                  (just_2‹t_42979,t_42979›
                    (list_6‹s_42978,t_42979› A_42986)
                    (cons_9‹s_42978,t_42979› A_42986 hd_42987 m_43004)))))
            (succ_7‹› __43001)))
        ih_42995
        ((rwr_3‹L,U›)
          (tensor_10‹U,t_42979›
            nat_5
            (sing_2‹t_42979,t_42979›
              (list_6‹s_42978,t_42979› A_42986) m_42992))
          ((llen_34‹s_42978,t_42979›) A_42986 tl_42988)
          (pair_13‹U,t_42979›
            nat_5
            (sing_2‹t_42979,t_42979›
              (list_6‹s_42978,t_42979› A_42986) tl_42988)
            m_42991
            (just_2‹t_42979,t_42979›
              (list_6‹s_42978,t_42979› A_42986) tl_42988))
          (fun _43005 :
            (tensor_10‹U,t_42979›
              nat_5
              (sing_2‹t_42979,t_42979›
                (list_6‹s_42978,t_42979› A_42986) m_42992)) ->
              U
          | __43007 =>
            (eq_1‹U›
              nat_5
              ((fst_35‹U,t_42979›)
                nat_5
                (sing_2‹t_42979,t_42979›
                  (list_6‹s_42978,t_42979› A_42986)
                  (cons_9‹s_42978,t_42979› A_42986 hd_42987 m_42992))
                (match __43007 in
                   (tensor_10‹U,t_42979›
                     nat_5
                     (sing_2‹t_42979,t_42979›
                       (list_6‹s_42978,t_42979› A_42986) m_42992)) -o
                     (tensor_10‹U,t_42979›
                       nat_5
                       (sing_2‹t_42979,t_42979›
                         (list_6‹s_42978,t_42979› A_42986)
                         (cons_9‹s_42978,t_42979›
                           A_42986 hd_42987 m_42992)))
                 with
                | (pair_13 m_43009 (just_2 m_43010)) =>
                  (pair_13‹U,t_42979›
                    nat_5
                    (sing_2‹t_42979,t_42979›
                      (list_6‹s_42978,t_42979› A_42986)
                      (cons_9‹s_42978,t_42979› A_42986 hd_42987 m_42992))
                    (succ_7‹› m_43009)
                    (just_2‹t_42979,t_42979›
                      (list_6‹s_42978,t_42979› A_42986)
                      (cons_9‹s_42978,t_42979› A_42986 hd_42987 m_43010)))))
              (succ_7‹› m_42991)))
          __42993
          (refl_1‹U›
            nat_5
            ((fst_35‹U,t_42979›)
              nat_5
              (sing_2‹t_42979,t_42979›
                (list_6‹s_42978,t_42979› A_42986)
                (cons_9‹s_42978,t_42979› A_42986 hd_42987 m_42992))
              (match (pair_13‹U,t_42979›
                       nat_5
                       (sing_2‹t_42979,t_42979›
                         (list_6‹s_42978,t_42979› A_42986) tl_42988)
                       m_42991
                       (just_2‹t_42979,t_42979›
                         (list_6‹s_42978,t_42979› A_42986) tl_42988)) in
                 (tensor_10‹U,t_42979›
                   nat_5
                   (sing_2‹t_42979,t_42979›
                     (list_6‹s_42978,t_42979› A_42986) m_42992)) -o
                   (tensor_10‹U,t_42979›
                     nat_5
                     (sing_2‹t_42979,t_42979›
                       (list_6‹s_42978,t_42979› A_42986)
                       (cons_9‹s_42978,t_42979› A_42986 hd_42987 m_42992)))
               with
              | (pair_13 m_43012 (just_2 m_43013)) =>
                (pair_13‹U,t_42979›
                  nat_5
                  (sing_2‹t_42979,t_42979›
                    (list_6‹s_42978,t_42979› A_42986)
                    (cons_9‹s_42978,t_42979› A_42986 hd_42987 m_42992))
                  (succ_7‹› m_43012)
                  (just_2‹t_42979,t_42979›
                    (list_6‹s_42978,t_42979› A_42986)
                    (cons_9‹s_42978,t_42979› A_42986 hd_42987 m_43013))))))))))

[trans1e success]

-----------------------------------------

#[program]
def idU_39 := fun id_53581 (A_53582) -> (m_53583) ->
                m_53583

#[program]
def idL_38 := fun id_53584 (A_53585) -> (m_53586) ->
                m_53586

#[logical]
inductive eqU_12 where
| reflU_15 of layout[]

#[logical]
inductive eqL_11 where
| reflL_14 of layout[]

#[program]
def rwlUU_43 :=
  fun rwl_53587 {A_53588} -> {m_53589} -> {n_53590} -> {B_53591} ->
  {__53592} -> (__53593) ->
    (match {NULL} with
    | reflU_15  => __53593)

#[program]
def rwlUL_42 :=
  fun rwl_53594 {A_53595} -> {m_53596} -> {n_53597} -> {B_53598} ->
  {__53599} -> (__53600) ->
    (match {NULL} with
    | reflU_15  => __53600)

#[program]
def rwlLU_41 :=
  fun rwl_53601 {A_53602} -> {m_53603} -> {n_53604} -> {B_53605} ->
  {__53606} -> (__53607) ->
    (match {NULL} with
    | reflL_14  => __53607)

#[program]
def rwlLL_40 :=
  fun rwl_53608 {A_53609} -> {m_53610} -> {n_53611} -> {B_53612} ->
  {__53613} -> (__53614) ->
    (match {NULL} with
    | reflL_14  => __53614)

#[program]
def rwrUU_47 :=
  fun rwr_53615 {A_53616} -> {m_53617} -> {n_53618} -> {B_53619} ->
  {__53620} -> (__53621) ->
    (match {NULL} with
    | reflU_15  => __53621)

#[program]
def rwrUL_46 :=
  fun rwr_53622 {A_53623} -> {m_53624} -> {n_53625} -> {B_53626} ->
  {__53627} -> (__53628) ->
    (match {NULL} with
    | reflU_15  => __53628)

#[program]
def rwrLU_45 :=
  fun rwr_53629 {A_53630} -> {m_53631} -> {n_53632} -> {B_53633} ->
  {__53634} -> (__53635) ->
    (match {NULL} with
    | reflL_14  => __53635)

#[program]
def rwrLL_44 :=
  fun rwr_53636 {A_53637} -> {m_53638} -> {n_53639} -> {B_53640} ->
  {__53641} -> (__53642) ->
    (match {NULL} with
    | reflL_14  => __53642)

#[logical]
def congrUUU_55 := NULL

#[logical]
def congrUUL_54 := NULL

#[logical]
def congrULU_53 := NULL

#[logical]
def congrULL_52 := NULL

#[logical]
def congrLUU_51 := NULL

#[logical]
def congrLUL_50 := NULL

#[logical]
def congrLLU_49 := NULL

#[logical]
def congrLLL_48 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_16 where
| justUU_19 of layout[R]

#[program]
inductive singUL_15 where
| justUL_18 of layout[R]

#[program]
inductive singLU_14 where


#[program]
inductive singLL_13 where
| justLL_16 of layout[R]

#[logical]
def ssingU_57 := NULL

#[logical]
def ssingL_56 := NULL

#[program]
def sing_elimUU_61 :=
  fun sing_elim_53643 {A_53644} -> {x_53645} -> (__53646) ->
    (match __53646 with
    | justUU_19 m_53647 => m_53647)

#[program]
def sing_elimUL_60 :=
  fun sing_elim_53648 {A_53649} -> {x_53650} -> (__53651) ->
    (match __53651 with
    | justUL_18 m_53652 => m_53652)

#[program]
def sing_elimLU_59 :=
  fun sing_elim_53653 {A_53654} -> {x_53655} -> (__53656) ->
    (match __53656 with
    )

#[program]
def sing_elimLL_58 :=
  fun sing_elim_53657 {A_53658} -> {x_53659} -> (__53660) ->
    (match __53660 with
    | justLL_16 m_53661 => m_53661)

#[logical]
def sing_uniqUU_65 := NULL

#[logical]
def sing_uniqUL_64 := NULL

#[logical]
def sing_uniqLU_63 := NULL

#[logical]
def sing_uniqLL_62 := NULL

#[program]
inductive baseU_18 where
| ttU_21 of layout[]

#[program]
inductive baseL_17 where
| ttL_20 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_53662 (__53663) ->
    (match __53663 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_53664 (__53665) -> (__53666) ->
    (match __53665 with
    | true_4  =>
      (match __53666 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_53667 (__53668) -> (__53669) ->
    (match __53668 with
    | true_4  => true_4
    | false_5  =>
      (match __53669 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_53670 (__53671) -> (__53672) ->
    (match __53671 with
    | true_4  =>
      (match __53672 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __53672 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_53673 (__53674) -> (__53675) ->
    (match __53674 with
    | zero_6  => true_4
    | succ_7 n_53676 =>
      (match __53675 with
      | zero_6  => false_5 | succ_7 n_53677 => ((lte_53673) n_53676 n_53677)))

#[program]
def lt_16 :=
  fun lt_53678 (x_53679) -> (y_53680) ->
    ((lte_15) (succ_7 x_53679) y_53680)

#[program]
def pred_17 :=
  fun pred_53681 (__53682) ->
    (match __53682 with
    | zero_6  => zero_6 | succ_7 n_53683 => n_53683)

#[program]
def add_18 :=
  fun add_53684 (__53685) -> (__53686) ->
    (match __53685 with
    | zero_6  => __53686
    | succ_7 n_53687 => (succ_7 ((add_53684) n_53687 __53686)))

#[program]
def sub_19 :=
  fun sub_53688 (__53689) -> (__53690) ->
    (match __53690 with
    | zero_6  => __53689
    | succ_7 n_53691 => ((sub_53688) ((pred_17) __53689) n_53691))

#[program]
def mul_20 :=
  fun mul_53692 (__53693) -> (__53694) ->
    (match __53693 with
    | zero_6  => zero_6
    | succ_7 n_53695 => ((add_18) __53694 ((mul_53692) n_53695 __53694)))

#[program]
def div_21 :=
  fun div_53696 (x_53697) -> (y_53698) ->
    (match ((lt_16) x_53697 y_53698) with
    | true_4  => zero_6
    | false_5  =>
      let loop_53699 :=
        fun loop_53700 (x_53701) -> (y_53702) ->
          (match ((sub_19) x_53701 ((pred_17) y_53702)) with
          | zero_6  => zero_6
          | succ_7 n_53703 => (succ_7 ((loop_53700) n_53703 y_53702)))
      in ((loop_53699) x_53697 y_53698))

#[program]
def rem_22 :=
  fun rem_53704 (x_53705) -> (y_53706) ->
    ((sub_19) x_53705 ((mul_20) ((div_21) x_53705 y_53706) y_53706))

#[program]
inductive listUU_22 where
| nilUU_28 of layout[]
| consUU_29 of layout[R, R]

#[program]
inductive listUL_21 where
| nilUL_26 of layout[]
| consUL_27 of layout[R, R]

#[program]
inductive listLU_20 where
| nilLU_24 of layout[]

#[program]
inductive listLL_19 where
| nilLL_22 of layout[]
| consLL_23 of layout[R, R]

#[program]
def free_listUU_69 :=
  fun free_list_53707 {A_53708} -> (f_53709) -> (__53710) ->
    (match __53710 with
    | nilUU_28  => ttU_21
    | consUU_29 hd_53711 tl_53712 =>
      let __53713 := ((f_53709) hd_53711) in
      ((free_list_53707) NULL f_53709 tl_53712))

#[program]
def free_listUL_68 :=
  fun free_list_53714 {A_53715} -> (f_53716) -> (__53717) ->
    (match __53717 with
    | nilUL_26  => ttU_21
    | consUL_27 hd_53718 tl_53719 =>
      let __53720 := ((f_53716) hd_53718) in
      ((free_list_53714) NULL f_53716 tl_53719))

#[program]
def free_listLL_66 :=
  fun free_list_53721 {A_53722} -> (f_53723) -> (__53724) ->
    (match __53724 with
    | nilLL_22  => ttU_21
    | consLL_23 hd_53725 tl_53726 =>
      let __53727 := ((f_53723) hd_53725) in
      ((free_list_53721) NULL f_53723 tl_53726))

#[program]
inductive existsUU_26 where
| exUU_33 of layout[R, N]

#[program]
inductive existsUL_25 where
| exUL_32 of layout[R, N]

#[program]
inductive existsLU_24 where
| exLU_31 of layout[R, N]

#[program]
inductive existsLL_23 where
| exLL_30 of layout[R, N]

#[program]
inductive exists0UU_30 where
| ex0UU_37 of layout[N, R]

#[program]
inductive exists0UL_29 where
| ex0UL_36 of layout[N, R]

#[program]
inductive exists0LU_28 where
| ex0LU_35 of layout[N, R]

#[program]
inductive exists0LL_27 where
| ex0LL_34 of layout[N, R]

#[program]
inductive exists1UU_34 where
| ex1UU_41 of layout[R, R]

#[program]
inductive exists1UL_33 where
| ex1UL_40 of layout[R, R]

#[program]
inductive exists1LU_32 where
| ex1LU_39 of layout[R, R]

#[program]
inductive exists1LL_31 where
| ex1LL_38 of layout[R, R]

#[program]
inductive tensorUU_38 where
| pairUU_45 of layout[R, R]

#[program]
inductive tensorUL_37 where
| pairUL_44 of layout[R, R]

#[program]
inductive tensorLU_36 where
| pairLU_43 of layout[R, R]

#[program]
inductive tensorLL_35 where
| pairLL_42 of layout[R, R]

#[program]
def pow_24 :=
  fun pow_53728 (x_53729) -> (y_53730) ->
    let loop_53731 :=
      fun loop_53732 (acc_53733) -> (y_53734) ->
        (match (__lte__ y_53734 0) with
        | true_4  => acc_53733
        | false_5  =>
          ((loop_53732) (__mul__ x_53729 acc_53733) (__sub__ y_53734 1)))
    in ((loop_53731) 1 y_53730)

#[program]
def powm_25 :=
  fun powm_53735 (x_53736) -> (y_53737) -> (m_53738) ->
    let loop_53739 :=
      fun loop_53740 (acc_53741) -> (y_53742) ->
        (match (__lte__ y_53742 0) with
        | true_4  => acc_53741
        | false_5  =>
          ((loop_53740)
            (__mod__ (__mul__ x_53736 acc_53741) m_53738) (__sub__ y_53742 1)))
    in ((loop_53739) 1 y_53737)

#[program]
def ord_26 := fun ord_53743 (c_53744) ->
                (__ord__ c_53744)

#[program]
def chr_27 := fun chr_53745 (i_53746) ->
                (__chr__ i_53746)

#[program]
def str_28 := fun str_53747 (c_53748) ->
                (__push__ "" c_53748)

#[program]
def strlen_29 := fun strlen_53749 (s_53750) ->
                   (__size__ s_53750)

#[program]
def string_of_int_30 :=
  fun string_of_int_53751 (i_53752) ->
    let aux_53753 :=
      fun aux_53754 (i_53755) ->
        (match (__lte__ 10 i_53755) with
        | true_4  =>
          let r_53756 := (__mod__ i_53755 10) in
          let i_53757 := (__div__ i_53755 10) in
          (__push__ ((aux_53754) i_53757)
            ((chr_27) (__add__ r_53756 ((ord_26) 0))))
        | false_5  => ((str_28) ((chr_27) (__add__ i_53755 ((ord_26) 0)))))
    in
    (match (__lte__ 0 i_53752) with
    | true_4  => ((aux_53753) i_53752)
    | false_5  => (__cat__ "~" ((aux_53753) (__neg__ i_53752))))

#[program]
def appendUU_73 :=
  fun append_53758 {A_53759} -> (__53760) -> (__53761) -o
    (match __53760 with
    | nilUU_28  => __53761
    | consUU_29 hd_53762 tl_53763 =>
      (consUU_29 hd_53762 ((append_53758) NULL tl_53763 __53761)))

#[program]
def appendUL_72 :=
  fun append_53764 {A_53765} -> (__53766) -> (__53767) -o
    (match __53766 with
    | nilUL_26  => __53767
    | consUL_27 hd_53768 tl_53769 =>
      (consUL_27 hd_53768 ((append_53764) NULL tl_53769 __53767)))

#[program]
def appendLL_70 :=
  fun append_53770 {A_53771} -> (__53772) -> (__53773) -o
    (match __53772 with
    | nilLL_22  => __53773
    | consLL_23 hd_53774 tl_53775 =>
      (consLL_23 hd_53774 ((append_53770) NULL tl_53775 __53773)))

#[logical]
def lenUU_77 := NULL

#[logical]
def lenUL_76 := NULL

#[logical]
def lenLL_74 := NULL

#[logical]
def append_lenUU_81 := NULL

#[logical]
def append_lenUL_80 := NULL

#[logical]
def append_lenLL_78 := NULL

#[program]
def llenUU_85 :=
  fun llen_53776 {A_53777} -> (xs_53778) ->
    (match xs_53778 with
    | nilUU_28  => (pairUU_45 zero_6 (justUU_19 nilUU_28))
    | consUU_29 hd_53779 tl_53780 =>
      (match ((llen_53776) NULL tl_53780) with
      | pairUU_45 m_53781 n_53782 =>
        (match n_53782 with
        | justUU_19 m_53783 =>
          (pairUU_45
            (succ_7 m_53781) (justUU_19 (consUU_29 hd_53779 m_53783))))))

#[program]
def llenUL_84 :=
  fun llen_53784 {A_53785} -> (xs_53786) ->
    (match xs_53786 with
    | nilUL_26  => (pairUL_44 zero_6 (justLL_16 nilUL_26))
    | consUL_27 hd_53787 tl_53788 =>
      (match ((llen_53784) NULL tl_53788) with
      | pairUL_44 m_53789 n_53790 =>
        (match n_53790 with
        | justLL_16 m_53791 =>
          (pairUL_44
            (succ_7 m_53789) (justLL_16 (consUL_27 hd_53787 m_53791))))))

#[program]
def llenLL_82 :=
  fun llen_53792 {A_53793} -> (xs_53794) ->
    (match xs_53794 with
    | nilLL_22  => (pairUL_44 zero_6 (justLL_16 nilLL_22))
    | consLL_23 hd_53795 tl_53796 =>
      (match ((llen_53792) NULL tl_53796) with
      | pairUL_44 m_53797 n_53798 =>
        (match n_53798 with
        | justLL_16 m_53799 =>
          (pairUL_44
            (succ_7 m_53797) (justLL_16 (consLL_23 hd_53795 m_53799))))))

#[logical]
def fstUU_89 := NULL

#[logical]
def fstUL_88 := NULL

#[logical]
def fstLU_87 := NULL

#[logical]
def fstLL_86 := NULL

#[logical]
def sndUU_93 := NULL

#[logical]
def sndUL_92 := NULL

#[logical]
def sndLU_91 := NULL

#[logical]
def sndLL_90 := NULL

#[logical]
def llen_lenUU_97 := NULL

#[logical]
def llen_lenUL_96 := NULL

#[logical]
def llen_lenLL_94 := NULL

[trans12 success]

-----------------------------------------

#[program]
def idU_39 := fun id_54019 (A_54020) -> (m_54021) ->
                m_54021

#[program]
def idL_38 := fun id_54022 (A_54023) -> (m_54024) ->
                m_54024

#[logical]
inductive eqU_12 where
| reflU_15 of layout[]

#[logical]
inductive eqL_11 where
| reflL_14 of layout[]

#[program]
def rwlUU_43 :=
  fun rwl_54025 {A_54026} -> {m_54027} -> {n_54028} -> {B_54029} ->
  {__54030} -> (__54031) ->
    __54031

#[program]
def rwlUL_42 :=
  fun rwl_54032 {A_54033} -> {m_54034} -> {n_54035} -> {B_54036} ->
  {__54037} -> (__54038) ->
    __54038

#[program]
def rwlLU_41 :=
  fun rwl_54039 {A_54040} -> {m_54041} -> {n_54042} -> {B_54043} ->
  {__54044} -> (__54045) ->
    __54045

#[program]
def rwlLL_40 :=
  fun rwl_54046 {A_54047} -> {m_54048} -> {n_54049} -> {B_54050} ->
  {__54051} -> (__54052) ->
    __54052

#[program]
def rwrUU_47 :=
  fun rwr_54053 {A_54054} -> {m_54055} -> {n_54056} -> {B_54057} ->
  {__54058} -> (__54059) ->
    __54059

#[program]
def rwrUL_46 :=
  fun rwr_54060 {A_54061} -> {m_54062} -> {n_54063} -> {B_54064} ->
  {__54065} -> (__54066) ->
    __54066

#[program]
def rwrLU_45 :=
  fun rwr_54067 {A_54068} -> {m_54069} -> {n_54070} -> {B_54071} ->
  {__54072} -> (__54073) ->
    __54073

#[program]
def rwrLL_44 :=
  fun rwr_54074 {A_54075} -> {m_54076} -> {n_54077} -> {B_54078} ->
  {__54079} -> (__54080) ->
    __54080

#[logical]
def congrUUU_55 := NULL

#[logical]
def congrUUL_54 := NULL

#[logical]
def congrULU_53 := NULL

#[logical]
def congrULL_52 := NULL

#[logical]
def congrLUU_51 := NULL

#[logical]
def congrLUL_50 := NULL

#[logical]
def congrLLU_49 := NULL

#[logical]
def congrLLL_48 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_16 where
| justUU_19 of layout[R]

#[program]
inductive singUL_15 where
| justUL_18 of layout[R]

#[program]
inductive singLU_14 where


#[program]
inductive singLL_13 where
| justLL_16 of layout[R]

#[logical]
def ssingU_57 := NULL

#[logical]
def ssingL_56 := NULL

#[program]
def sing_elimUU_61 :=
  fun sing_elim_54081 {A_54082} -> {x_54083} -> (__54084) ->
    (match __54084 with
    | justUU_19 m_54085 => m_54085)

#[program]
def sing_elimUL_60 :=
  fun sing_elim_54086 {A_54087} -> {x_54088} -> (__54089) ->
    (match __54089 with
    | justUL_18 m_54090 => m_54090)

#[program]
def sing_elimLU_59 :=
  fun sing_elim_54091 {A_54092} -> {x_54093} -> (__54094) ->
    !!

#[program]
def sing_elimLL_58 :=
  fun sing_elim_54095 {A_54096} -> {x_54097} -> (__54098) ->
    (match __54098 with
    | justLL_16 m_54099 => m_54099)

#[logical]
def sing_uniqUU_65 := NULL

#[logical]
def sing_uniqUL_64 := NULL

#[logical]
def sing_uniqLU_63 := NULL

#[logical]
def sing_uniqLL_62 := NULL

#[program]
inductive baseU_18 where
| ttU_21 of layout[]

#[program]
inductive baseL_17 where
| ttL_20 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_54100 (__54101) ->
    (match __54101 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_54102 (__54103) -> (__54104) ->
    (match __54103 with
    | true_4  =>
      (match __54104 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_54105 (__54106) -> (__54107) ->
    (match __54106 with
    | true_4  => true_4
    | false_5  =>
      (match __54107 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_54108 (__54109) -> (__54110) ->
    (match __54109 with
    | true_4  =>
      (match __54110 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __54110 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_54111 (__54112) -> (__54113) ->
    (match __54112 with
    | zero_6  => true_4
    | succ_7 n_54114 =>
      (match __54113 with
      | zero_6  => false_5 | succ_7 n_54115 => ((lte_54111) n_54114 n_54115)))

#[program]
def lt_16 :=
  fun lt_54116 (x_54117) -> (y_54118) ->
    ((lte_15) (succ_7 x_54117) y_54118)

#[program]
def pred_17 :=
  fun pred_54119 (__54120) ->
    (match __54120 with
    | zero_6  => zero_6 | succ_7 n_54121 => n_54121)

#[program]
def add_18 :=
  fun add_54122 (__54123) -> (__54124) ->
    (match __54123 with
    | zero_6  => __54124
    | succ_7 n_54125 => (succ_7 ((add_54122) n_54125 __54124)))

#[program]
def sub_19 :=
  fun sub_54126 (__54127) -> (__54128) ->
    (match __54128 with
    | zero_6  => __54127
    | succ_7 n_54129 => ((sub_54126) ((pred_17) __54127) n_54129))

#[program]
def mul_20 :=
  fun mul_54130 (__54131) -> (__54132) ->
    (match __54131 with
    | zero_6  => zero_6
    | succ_7 n_54133 => ((add_18) __54132 ((mul_54130) n_54133 __54132)))

#[program]
def div_21 :=
  fun div_54134 (x_54135) -> (y_54136) ->
    (match ((lt_16) x_54135 y_54136) with
    | true_4  => zero_6
    | false_5  =>
      let loop_54137 :=
        fun loop_54138 (x_54139) -> (y_54140) ->
          (match ((sub_19) x_54139 ((pred_17) y_54140)) with
          | zero_6  => zero_6
          | succ_7 n_54141 => (succ_7 ((loop_54138) n_54141 y_54140)))
      in ((loop_54137) x_54135 y_54136))

#[program]
def rem_22 :=
  fun rem_54142 (x_54143) -> (y_54144) ->
    ((sub_19) x_54143 ((mul_20) ((div_21) x_54143 y_54144) y_54144))

#[program]
inductive listUU_22 where
| nilUU_28 of layout[]
| consUU_29 of layout[R, R]

#[program]
inductive listUL_21 where
| nilUL_26 of layout[]
| consUL_27 of layout[R, R]

#[program]
inductive listLU_20 where
| nilLU_24 of layout[]

#[program]
inductive listLL_19 where
| nilLL_22 of layout[]
| consLL_23 of layout[R, R]

#[program]
def free_listUU_69 :=
  fun free_list_54145 {A_54146} -> (f_54147) -> (__54148) ->
    (match __54148 with
    | nilUU_28  => ttU_21
    | consUU_29 hd_54149 tl_54150 =>
      let __54151 := ((f_54147) hd_54149) in
      ((free_list_54145) NULL f_54147 tl_54150))

#[program]
def free_listUL_68 :=
  fun free_list_54152 {A_54153} -> (f_54154) -> (__54155) ->
    (match __54155 with
    | nilUL_26  => ttU_21
    | consUL_27 hd_54156 tl_54157 =>
      let __54158 := ((f_54154) hd_54156) in
      ((free_list_54152) NULL f_54154 tl_54157))

#[program]
def free_listLL_66 :=
  fun free_list_54159 {A_54160} -> (f_54161) -> (__54162) ->
    (match __54162 with
    | nilLL_22  => ttU_21
    | consLL_23 hd_54163 tl_54164 =>
      let __54165 := ((f_54161) hd_54163) in
      ((free_list_54159) NULL f_54161 tl_54164))

#[program]
inductive existsUU_26 where
| exUU_33 of layout[R, N]

#[program]
inductive existsUL_25 where
| exUL_32 of layout[R, N]

#[program]
inductive existsLU_24 where
| exLU_31 of layout[R, N]

#[program]
inductive existsLL_23 where
| exLL_30 of layout[R, N]

#[program]
inductive exists0UU_30 where
| ex0UU_37 of layout[N, R]

#[program]
inductive exists0UL_29 where
| ex0UL_36 of layout[N, R]

#[program]
inductive exists0LU_28 where
| ex0LU_35 of layout[N, R]

#[program]
inductive exists0LL_27 where
| ex0LL_34 of layout[N, R]

#[program]
inductive exists1UU_34 where
| ex1UU_41 of layout[R, R]

#[program]
inductive exists1UL_33 where
| ex1UL_40 of layout[R, R]

#[program]
inductive exists1LU_32 where
| ex1LU_39 of layout[R, R]

#[program]
inductive exists1LL_31 where
| ex1LL_38 of layout[R, R]

#[program]
inductive tensorUU_38 where
| pairUU_45 of layout[R, R]

#[program]
inductive tensorUL_37 where
| pairUL_44 of layout[R, R]

#[program]
inductive tensorLU_36 where
| pairLU_43 of layout[R, R]

#[program]
inductive tensorLL_35 where
| pairLL_42 of layout[R, R]

#[program]
def pow_24 :=
  fun pow_54166 (x_54167) -> (y_54168) ->
    let loop_54169 :=
      fun loop_54170 (acc_54171) -> (y_54172) ->
        (match (__lte__ y_54172 0) with
        | true_4  => acc_54171
        | false_5  =>
          ((loop_54170) (__mul__ x_54167 acc_54171) (__sub__ y_54172 1)))
    in ((loop_54169) 1 y_54168)

#[program]
def powm_25 :=
  fun powm_54173 (x_54174) -> (y_54175) -> (m_54176) ->
    let loop_54177 :=
      fun loop_54178 (acc_54179) -> (y_54180) ->
        (match (__lte__ y_54180 0) with
        | true_4  => acc_54179
        | false_5  =>
          ((loop_54178)
            (__mod__ (__mul__ x_54174 acc_54179) m_54176) (__sub__ y_54180 1)))
    in ((loop_54177) 1 y_54175)

#[program]
def ord_26 := fun ord_54181 (c_54182) ->
                (__ord__ c_54182)

#[program]
def chr_27 := fun chr_54183 (i_54184) ->
                (__chr__ i_54184)

#[program]
def str_28 := fun str_54185 (c_54186) ->
                (__push__ "" c_54186)

#[program]
def strlen_29 := fun strlen_54187 (s_54188) ->
                   (__size__ s_54188)

#[program]
def string_of_int_30 :=
  fun string_of_int_54189 (i_54190) ->
    let aux_54191 :=
      fun aux_54192 (i_54193) ->
        (match (__lte__ 10 i_54193) with
        | true_4  =>
          let r_54194 := (__mod__ i_54193 10) in
          let i_54195 := (__div__ i_54193 10) in
          (__push__ ((aux_54192) i_54195)
            ((chr_27) (__add__ r_54194 ((ord_26) 0))))
        | false_5  => ((str_28) ((chr_27) (__add__ i_54193 ((ord_26) 0)))))
    in
    (match (__lte__ 0 i_54190) with
    | true_4  => ((aux_54191) i_54190)
    | false_5  => (__cat__ "~" ((aux_54191) (__neg__ i_54190))))

#[program]
def appendUU_73 :=
  fun append_54196 {A_54197} -> (__54198) -> (__54199) -o
    (match __54198 with
    | nilUU_28  => __54199
    | consUU_29 hd_54200 tl_54201 =>
      (consUU_29 hd_54200 ((append_54196) NULL tl_54201 __54199)))

#[program]
def appendUL_72 :=
  fun append_54202 {A_54203} -> (__54204) -> (__54205) -o
    (match __54204 with
    | nilUL_26  => __54205
    | consUL_27 hd_54206 tl_54207 =>
      (consUL_27 hd_54206 ((append_54202) NULL tl_54207 __54205)))

#[program]
def appendLL_70 :=
  fun append_54208 {A_54209} -> (__54210) -> (__54211) -o
    (match __54210 with
    | nilLL_22  => __54211
    | consLL_23 hd_54212 tl_54213 =>
      (consLL_23 hd_54212 ((append_54208) NULL tl_54213 __54211)))

#[logical]
def lenUU_77 := NULL

#[logical]
def lenUL_76 := NULL

#[logical]
def lenLL_74 := NULL

#[logical]
def append_lenUU_81 := NULL

#[logical]
def append_lenUL_80 := NULL

#[logical]
def append_lenLL_78 := NULL

#[program]
def llenUU_85 :=
  fun llen_54214 {A_54215} -> (xs_54216) ->
    (match xs_54216 with
    | nilUU_28  => (pairUU_45 zero_6 (justUU_19 nilUU_28))
    | consUU_29 hd_54217 tl_54218 =>
      (match ((llen_54214) NULL tl_54218) with
      | pairUU_45 m_54219 n_54220 =>
        (match n_54220 with
        | justUU_19 m_54221 =>
          (pairUU_45
            (succ_7 m_54219) (justUU_19 (consUU_29 hd_54217 m_54221))))))

#[program]
def llenUL_84 :=
  fun llen_54222 {A_54223} -> (xs_54224) ->
    (match xs_54224 with
    | nilUL_26  => (pairUL_44 zero_6 (justLL_16 nilUL_26))
    | consUL_27 hd_54225 tl_54226 =>
      (match ((llen_54222) NULL tl_54226) with
      | pairUL_44 m_54227 n_54228 =>
        (match n_54228 with
        | justLL_16 m_54229 =>
          (pairUL_44
            (succ_7 m_54227) (justLL_16 (consUL_27 hd_54225 m_54229))))))

#[program]
def llenLL_82 :=
  fun llen_54230 {A_54231} -> (xs_54232) ->
    (match xs_54232 with
    | nilLL_22  => (pairUL_44 zero_6 (justLL_16 nilLL_22))
    | consLL_23 hd_54233 tl_54234 =>
      (match ((llen_54230) NULL tl_54234) with
      | pairUL_44 m_54235 n_54236 =>
        (match n_54236 with
        | justLL_16 m_54237 =>
          (pairUL_44
            (succ_7 m_54235) (justLL_16 (consLL_23 hd_54233 m_54237))))))

#[logical]
def fstUU_89 := NULL

#[logical]
def fstUL_88 := NULL

#[logical]
def fstLU_87 := NULL

#[logical]
def fstLL_86 := NULL

#[logical]
def sndUU_93 := NULL

#[logical]
def sndUL_92 := NULL

#[logical]
def sndLU_91 := NULL

#[logical]
def sndLL_90 := NULL

#[logical]
def llen_lenUU_97 := NULL

#[logical]
def llen_lenUL_96 := NULL

#[logical]
def llen_lenLL_94 := NULL

[trans2e success]

-----------------------------------------

def idU_39 := fun id_54457 (A_54458) -> (m_54459) -> m_54459

def idL_38 := fun id_54460 (A_54461) -> (m_54462) -> m_54462

def rwlUU_43 :=
  fun rwl_54463 (A_54464) -> (m_54465) -> (n_54466) -> (B_54467) ->
  (__54468) -> (__54469) -> __54469

def rwlUL_42 :=
  fun rwl_54470 (A_54471) -> (m_54472) -> (n_54473) -> (B_54474) ->
  (__54475) -> (__54476) -> __54476

def rwlLU_41 :=
  fun rwl_54477 (A_54478) -> (m_54479) -> (n_54480) -> (B_54481) ->
  (__54482) -> (__54483) -> __54483

def rwlLL_40 :=
  fun rwl_54484 (A_54485) -> (m_54486) -> (n_54487) -> (B_54488) ->
  (__54489) -> (__54490) -> __54490

def rwrUU_47 :=
  fun rwr_54491 (A_54492) -> (m_54493) -> (n_54494) -> (B_54495) ->
  (__54496) -> (__54497) -> __54497

def rwrUL_46 :=
  fun rwr_54498 (A_54499) -> (m_54500) -> (n_54501) -> (B_54502) ->
  (__54503) -> (__54504) -> __54504

def rwrLU_45 :=
  fun rwr_54505 (A_54506) -> (m_54507) -> (n_54508) -> (B_54509) ->
  (__54510) -> (__54511) -> __54511

def rwrLL_44 :=
  fun rwr_54512 (A_54513) -> (m_54514) -> (n_54515) -> (B_54516) ->
  (__54517) -> (__54518) -> __54518

def sing_elimUU_61 :=
  fun sing_elim_54519 (A_54520) -> (x_54521) -> (__54522) -> __54522

def sing_elimUL_60 :=
  fun sing_elim_54523 (A_54524) -> (x_54525) -> (__54526) -> __54526

def sing_elimLU_59 :=
  fun sing_elim_54527 (A_54528) -> (x_54529) -> (__54530) -> !!

def sing_elimLL_58 :=
  fun sing_elim_54531 (A_54532) -> (x_54533) -> (__54534) -> __54534

def not_11 :=
  fun not_54535 (__54536) ->
    (match __54536 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  fun and_54537 (__54538) -> (__54539) ->
    (match __54538 with
    | true_4 =>
      (match __54539 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  fun or_54540 (__54541) -> (__54542) ->
    (match __54541 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __54542 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  fun xor_54543 (__54544) -> (__54545) ->
    (match __54544 with
    | true_4 =>
      (match __54545 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __54545 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def lte_15 :=
  fun lte_54546 (__54547) -> (__54548) ->
    (match __54547 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __54547 with
      | succ_7 n_54549 =>
        (match __54548 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __54548 with
          | succ_7 n_54550 => ((lte_54546) n_54549 n_54550)))))

def lt_16 :=
  fun lt_54551 (x_54552) -> (y_54553) -> ((lte_15) (succ_7 x_54552) y_54553)

def pred_17 :=
  fun pred_54554 (__54555) ->
    (match __54555 with
    | zero_6 => constr0(zero_6)
    | _ => (match __54555 with
           | succ_7 n_54556 => n_54556))

def add_18 :=
  fun add_54557 (__54558) -> (__54559) ->
    (match __54558 with
    | zero_6 => __54559
    | _ =>
      (match __54558 with
      | succ_7 n_54560 => (succ_7 ((add_54557) n_54560 __54559))))

def sub_19 :=
  fun sub_54561 (__54562) -> (__54563) ->
    (match __54563 with
    | zero_6 => __54562
    | _ =>
      (match __54563 with
      | succ_7 n_54564 => ((sub_54561) ((pred_17) __54562) n_54564)))

def mul_20 :=
  fun mul_54565 (__54566) -> (__54567) ->
    (match __54566 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __54566 with
      | succ_7 n_54568 => ((add_18) __54567 ((mul_54565) n_54568 __54567))))

def div_21 :=
  fun div_54569 (x_54570) -> (y_54571) ->
    (match ((lt_16) x_54570 y_54571) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_54572 :=
        fun loop_54573 (x_54574) -> (y_54575) ->
          (match ((sub_19) x_54574 ((pred_17) y_54575)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_19) x_54574 ((pred_17) y_54575)) with
            | succ_7 n_54576 => (succ_7 ((loop_54573) n_54576 y_54575))))
      in ((loop_54572) x_54570 y_54571))

def rem_22 :=
  fun rem_54577 (x_54578) -> (y_54579) ->
    ((sub_19) x_54578 ((mul_20) ((div_21) x_54578 y_54579) y_54579))

def free_listUU_69 :=
  fun free_list_54580 (A_54581) -> (f_54582) -> (__54583) ->
    (match __54583 with
    | nilUU_28 => constr0(ttU_21)
    | _ =>
      (match __54583 with
      | consUU_29 hd_54584 tl_54585 =>
        let __54586 := ((f_54582) hd_54584) in
        ((free_list_54580) NULL f_54582 tl_54585)))

def free_listUL_68 :=
  fun free_list_54587 (A_54588) -> (f_54589) -> (__54590) ->
    (match __54590 with
    | nilUL_26 => constr0(ttU_21)
    | _ =>
      (match __54590 with
      | consUL_27 hd_54591 tl_54592 =>
        let __54593 := ((f_54589) hd_54591) in
        ((free_list_54587) NULL f_54589 tl_54592)))

def free_listLL_66 :=
  fun free_list_54594 (A_54595) -> (f_54596) -> (__54597) ->
    (match __54597 with
    | nilLL_22 => constr0(ttU_21)
    | _ =>
      (match __54597 with
      | consLL_23 hd_54598 tl_54599 =>
        let __54600 := ((f_54596) hd_54598) in
        ((free_list_54594) NULL f_54596 tl_54599)))

def pow_24 :=
  fun pow_54601 (x_54602) -> (y_54603) ->
    let loop_54604 :=
      fun loop_54605 (acc_54606) -> (y_54607) ->
        (match (__lte__ y_54607 0) with
        | true_4 => acc_54606
        | false_5 =>
          ((loop_54605) (__mul__ x_54602 acc_54606) (__sub__ y_54607 1)))
    in ((loop_54604) 1 y_54603)

def powm_25 :=
  fun powm_54608 (x_54609) -> (y_54610) -> (m_54611) ->
    let loop_54612 :=
      fun loop_54613 (acc_54614) -> (y_54615) ->
        (match (__lte__ y_54615 0) with
        | true_4 => acc_54614
        | false_5 =>
          ((loop_54613)
            (__mod__ (__mul__ x_54609 acc_54614) m_54611) (__sub__ y_54615 1)))
    in ((loop_54612) 1 y_54610)

def ord_26 := fun ord_54616 (c_54617) -> (__ord__ c_54617)

def chr_27 := fun chr_54618 (i_54619) -> (__chr__ i_54619)

def str_28 := fun str_54620 (c_54621) -> (__push__ "" c_54621)

def strlen_29 := fun strlen_54622 (s_54623) -> (__size__ s_54623)

def string_of_int_30 :=
  fun string_of_int_54624 (i_54625) ->
    let aux_54626 :=
      fun aux_54627 (i_54628) ->
        (match (__lte__ 10 i_54628) with
        | true_4 =>
          let r_54629 := (__mod__ i_54628 10) in
          let i_54630 := (__div__ i_54628 10) in
          (__push__ ((aux_54627) i_54630)
            ((chr_27) (__add__ r_54629 ((ord_26) 0))))
        | false_5 => ((str_28) ((chr_27) (__add__ i_54628 ((ord_26) 0)))))
    in
    (match (__lte__ 0 i_54625) with
    | true_4 => ((aux_54626) i_54625)
    | false_5 => (__cat__ "~" ((aux_54626) (__neg__ i_54625))))

def appendUU_73 :=
  fun append_54631 (A_54632) -> (__54633) -> (__54634) -o
    (match __54633 with
    | nilUU_28 => __54634
    | _ =>
      (match __54633 with
      | consUU_29 hd_54635 tl_54636 =>
        (consUU_29 hd_54635 ((append_54631) NULL tl_54636 __54634))))

def appendUL_72 :=
  fun append_54637 (A_54638) -> (__54639) -> (__54640) -o
    (match __54639 with
    | nilUL_26 => __54640
    | _ =>
      (match __54639 with
      | consUL_27 hd_54641 tl_54642 =>
        (consUL_27 hd_54641 ((append_54637) NULL tl_54642 __54640))))

def appendLL_70 :=
  fun append_54643 (A_54644) -> (__54645) -> (__54646) -o
    (match __54645 with
    | nilLL_22 => __54646
    | _ =>
      (match __54645 with
      | consLL_23 hd_54647 tl_54648 =>
        (consLL_23 hd_54647 ((append_54643) NULL tl_54648 __54646))))

def llenUU_85 :=
  fun llen_54649 (A_54650) -> (xs_54651) ->
    (match xs_54651 with
    | nilUU_28 => (pairUU_45 constr0(zero_6) constr0(nilUU_28))
    | _ =>
      (match xs_54651 with
      | consUU_29 hd_54652 tl_54653 =>
        (match ((llen_54649) NULL tl_54653) with
        | pairUU_45 m_54654 n_54655 =>
          (pairUU_45 (succ_7 m_54654) (consUU_29 hd_54652 n_54655)))))

def llenUL_84 :=
  fun llen_54656 (A_54657) -> (xs_54658) ->
    (match xs_54658 with
    | nilUL_26 => (pairUL_44 constr0(zero_6) constr0(nilUL_26))
    | _ =>
      (match xs_54658 with
      | consUL_27 hd_54659 tl_54660 =>
        (match ((llen_54656) NULL tl_54660) with
        | pairUL_44 m_54661 n_54662 =>
          (pairUL_44 (succ_7 m_54661) (consUL_27 hd_54659 n_54662)))))

def llenLL_82 :=
  fun llen_54663 (A_54664) -> (xs_54665) ->
    (match xs_54665 with
    | nilLL_22 => (pairUL_44 constr0(zero_6) constr0(nilLL_22))
    | _ =>
      (match xs_54665 with
      | consLL_23 hd_54666 tl_54667 =>
        (match ((llen_54663) NULL tl_54667) with
        | pairUL_44 m_54668 n_54669 =>
          (pairUL_44 (succ_7 m_54668) (consLL_23 hd_54666 n_54669)))))

[trans23 success]

-----------------------------------------

def idU_39 := lam (A_54883) -> (m_54884) -> m_54884

def idL_38 := lam (A_54885) -> (m_54886) -> m_54886

def rwlUU_43 :=
  lam (A_54887) -> (m_54888) -> (n_54889) -> (B_54890) -> (__54891) ->
  (__54892) -> __54892

def rwlUL_42 :=
  lam (A_54893) -> (m_54894) -> (n_54895) -> (B_54896) -> (__54897) ->
  (__54898) -> __54898

def rwlLU_41 :=
  lam (A_54899) -> (m_54900) -> (n_54901) -> (B_54902) -> (__54903) ->
  (__54904) -> __54904

def rwlLL_40 :=
  lam (A_54905) -> (m_54906) -> (n_54907) -> (B_54908) -> (__54909) ->
  (__54910) -> __54910

def rwrUU_47 :=
  lam (A_54911) -> (m_54912) -> (n_54913) -> (B_54914) -> (__54915) ->
  (__54916) -> __54916

def rwrUL_46 :=
  lam (A_54917) -> (m_54918) -> (n_54919) -> (B_54920) -> (__54921) ->
  (__54922) -> __54922

def rwrLU_45 :=
  lam (A_54923) -> (m_54924) -> (n_54925) -> (B_54926) -> (__54927) ->
  (__54928) -> __54928

def rwrLL_44 :=
  lam (A_54929) -> (m_54930) -> (n_54931) -> (B_54932) -> (__54933) ->
  (__54934) -> __54934

def sing_elimUU_61 := lam (A_54935) -> (x_54936) -> (__54937) -> __54937

def sing_elimUL_60 := lam (A_54938) -> (x_54939) -> (__54940) -> __54940

def sing_elimLU_59 := lam (A_54941) -> (x_54942) -> (__54943) -> !!

def sing_elimLL_58 := lam (A_54944) -> (x_54945) -> (__54946) -> __54946

def not_11 :=
  lam (__54947) ->
    (match __54947 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  lam (__54948) -> (__54949) ->
    (match __54948 with
    | true_4 =>
      (match __54949 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  lam (__54950) -> (__54951) ->
    (match __54950 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __54951 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  lam (__54952) -> (__54953) ->
    (match __54952 with
    | true_4 =>
      (match __54953 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __54953 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def lte_15 :=
  fun lte_54954 (__54955) -> (__54956) ->
    (match __54955 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __54955 with
      | succ_7 n_54957 =>
        (match __54956 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __54956 with
          | succ_7 n_54958 => ((lte_54954) n_54957 n_54958)))))

def lt_16 :=
  lam (x_54959) -> (y_54960) -> ((lte_15) (succ_7 x_54959) y_54960)

def pred_17 :=
  lam (__54961) ->
    (match __54961 with
    | zero_6 => constr0(zero_6)
    | _ => (match __54961 with
           | succ_7 n_54962 => n_54962))

def add_18 :=
  fun add_54963 (__54964) -> (__54965) ->
    (match __54964 with
    | zero_6 => __54965
    | _ =>
      (match __54964 with
      | succ_7 n_54966 => (succ_7 ((add_54963) n_54966 __54965))))

def sub_19 :=
  fun sub_54967 (__54968) -> (__54969) ->
    (match __54969 with
    | zero_6 => __54968
    | _ =>
      (match __54969 with
      | succ_7 n_54970 => ((sub_54967) ((pred_17) __54968) n_54970)))

def mul_20 :=
  fun mul_54971 (__54972) -> (__54973) ->
    (match __54972 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __54972 with
      | succ_7 n_54974 => ((add_18) __54973 ((mul_54971) n_54974 __54973))))

def div_21 :=
  lam (x_54975) -> (y_54976) ->
    (match ((lt_16) x_54975 y_54976) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_54977 :=
        fun loop_54978 (x_54979) -> (y_54980) ->
          (match ((sub_19) x_54979 ((pred_17) y_54980)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_19) x_54979 ((pred_17) y_54980)) with
            | succ_7 n_54981 => (succ_7 ((loop_54978) n_54981 y_54980))))
      in ((loop_54977) x_54975 y_54976))

def rem_22 :=
  lam (x_54982) -> (y_54983) ->
    ((sub_19) x_54982 ((mul_20) ((div_21) x_54982 y_54983) y_54983))

def free_listUU_69 :=
  fun free_list_54984 (A_54985) -> (f_54986) -> (__54987) ->
    (match __54987 with
    | nilUU_28 => constr0(ttU_21)
    | _ =>
      (match __54987 with
      | consUU_29 hd_54988 tl_54989 =>
        let __54990 := ((f_54986) hd_54988) in
        ((free_list_54984) NULL f_54986 tl_54989)))

def free_listUL_68 :=
  fun free_list_54991 (A_54992) -> (f_54993) -> (__54994) ->
    (match __54994 with
    | nilUL_26 => constr0(ttU_21)
    | _ =>
      (match __54994 with
      | consUL_27 hd_54995 tl_54996 =>
        let __54997 := ((f_54993) hd_54995) in
        ((free_list_54991) NULL f_54993 tl_54996)))

def free_listLL_66 :=
  fun free_list_54998 (A_54999) -> (f_55000) -> (__55001) ->
    (match __55001 with
    | nilLL_22 => constr0(ttU_21)
    | _ =>
      (match __55001 with
      | consLL_23 hd_55002 tl_55003 =>
        let __55004 := ((f_55000) hd_55002) in
        ((free_list_54998) NULL f_55000 tl_55003)))

def pow_24 :=
  lam (x_55005) -> (y_55006) ->
    let loop_55007 :=
      fun loop_55008 (acc_55009) -> (y_55010) ->
        (match (__lte__ y_55010 0) with
        | true_4 => acc_55009
        | false_5 =>
          ((loop_55008) (__mul__ x_55005 acc_55009) (__sub__ y_55010 1)))
    in ((loop_55007) 1 y_55006)

def powm_25 :=
  lam (x_55011) -> (y_55012) -> (m_55013) ->
    let loop_55014 :=
      fun loop_55015 (acc_55016) -> (y_55017) ->
        (match (__lte__ y_55017 0) with
        | true_4 => acc_55016
        | false_5 =>
          ((loop_55015)
            (__mod__ (__mul__ x_55011 acc_55016) m_55013) (__sub__ y_55017 1)))
    in ((loop_55014) 1 y_55012)

def ord_26 := lam (c_55018) -> (__ord__ c_55018)

def chr_27 := lam (i_55019) -> (__chr__ i_55019)

def str_28 := lam (c_55020) -> (__push__ "" c_55020)

def strlen_29 := lam (s_55021) -> (__size__ s_55021)

def string_of_int_30 :=
  lam (i_55022) ->
    let aux_55023 :=
      fun aux_55024 (i_55025) ->
        (match (__lte__ 10 i_55025) with
        | true_4 =>
          let r_55026 := (__mod__ i_55025 10) in
          let i_55027 := (__div__ i_55025 10) in
          (__push__ ((aux_55024) i_55027)
            ((chr_27) (__add__ r_55026 ((ord_26) 0))))
        | false_5 => ((str_28) ((chr_27) (__add__ i_55025 ((ord_26) 0)))))
    in
    (match (__lte__ 0 i_55022) with
    | true_4 => ((aux_55023) i_55022)
    | false_5 => (__cat__ "~" ((aux_55023) (__neg__ i_55022))))

def appendUU_73 :=
  fun append_55028 (A_55029) -> (__55030) -> (__55031) -o
    (match __55030 with
    | nilUU_28 => __55031
    | _ =>
      (match __55030 with
      | consUU_29 hd_55032 tl_55033 =>
        (consUU_29 hd_55032 ((append_55028) NULL tl_55033 __55031))))

def appendUL_72 :=
  fun append_55034 (A_55035) -> (__55036) -> (__55037) -o
    (match __55036 with
    | nilUL_26 => __55037
    | _ =>
      (match __55036 with
      | consUL_27 hd_55038 tl_55039 =>
        (consUL_27 hd_55038 ((append_55034) NULL tl_55039 __55037))))

def appendLL_70 :=
  fun append_55040 (A_55041) -> (__55042) -> (__55043) -o
    (match __55042 with
    | nilLL_22 => __55043
    | _ =>
      (match __55042 with
      | consLL_23 hd_55044 tl_55045 =>
        (consLL_23 hd_55044 ((append_55040) NULL tl_55045 __55043))))

def llenUU_85 :=
  fun llen_55046 (A_55047) -> (xs_55048) ->
    (match xs_55048 with
    | nilUU_28 => (pairUU_45 constr0(zero_6) constr0(nilUU_28))
    | _ =>
      (match xs_55048 with
      | consUU_29 hd_55049 tl_55050 =>
        (match ((llen_55046) NULL tl_55050) with
        | pairUU_45 m_55051 n_55052 =>
          (pairUU_45 (succ_7 m_55051) (consUU_29 hd_55049 n_55052)))))

def llenUL_84 :=
  fun llen_55053 (A_55054) -> (xs_55055) ->
    (match xs_55055 with
    | nilUL_26 => (pairUL_44 constr0(zero_6) constr0(nilUL_26))
    | _ =>
      (match xs_55055 with
      | consUL_27 hd_55056 tl_55057 =>
        (match ((llen_55053) NULL tl_55057) with
        | pairUL_44 m_55058 n_55059 =>
          (pairUL_44 (succ_7 m_55058) (consUL_27 hd_55056 n_55059)))))

def llenLL_82 :=
  fun llen_55060 (A_55061) -> (xs_55062) ->
    (match xs_55062 with
    | nilLL_22 => (pairUL_44 constr0(zero_6) constr0(nilLL_22))
    | _ =>
      (match xs_55062 with
      | consLL_23 hd_55063 tl_55064 =>
        (match ((llen_55060) NULL tl_55064) with
        | pairUL_44 m_55065 n_55066 =>
          (pairUL_44 (succ_7 m_55065) (consLL_23 hd_55063 n_55066)))))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match(__99){
    zero_6 => {
      x_101 := true_4;
    }
    _ => {
      match[U](__99){
        succ_7(n_103) => {
          match(__100){
            zero_6 => {
              x_104 := false_5;
            }
            _ => {
              match[U](__100){
                succ_7(n_106) => {
                  x_107 := lte_98(n_103, n_106);
                  x_105 := x_107;
                }
              }
              x_104 := x_105;
            }
          }
          x_102 := x_104;
        }
      }
      x_101 := x_102;
    }
  }
  return x_101;
}

fn lt_108(x_109%U, y_110%U) {
  x_112 := mkconstr(succ_7, [x_109]);
  x_111 := lte_98(x_112, y_110);
  return x_111;
}

fn pred_113(__114%U) {
  match(__114){
    zero_6 => {
      x_115 := zero_6;
    }
    _ => {
      match[U](__114){ succ_7(n_117) => {
                         x_116 := n_117;
                       } }
      x_115 := x_116;
    }
  }
  return x_115;
}

fn add_118(__119%U, __120%U) {
  match(__119){
    zero_6 => {
      x_121 := __120;
    }
    _ => {
      match[U](__119){
        succ_7(n_123) => {
          x_124 := add_118(n_123, __120);
          x_125 := mkconstr(succ_7, [x_124]);
          x_122 := x_125;
        }
      }
      x_121 := x_122;
    }
  }
  return x_121;
}

fn sub_126(__127%U, __128%U) {
  match(__128){
    zero_6 => {
      x_129 := __127;
    }
    _ => {
      match[U](__128){
        succ_7(n_131) => {
          x_133 := pred_113(__127);
          x_132 := sub_126(x_133, n_131);
          x_130 := x_132;
        }
      }
      x_129 := x_130;
    }
  }
  return x_129;
}

fn mul_134(__135%U, __136%U) {
  match(__135){
    zero_6 => {
      x_137 := zero_6;
    }
    _ => {
      match[U](__135){
        succ_7(n_139) => {
          x_141 := mul_134(n_139, __136);
          x_140 := add_118(__136, x_141);
          x_138 := x_140;
        }
      }
      x_137 := x_138;
    }
  }
  return x_137;
}

fn div_142(x_143%U, y_144%U) {
  x_146 := lt_108(x_143, y_144);
  match(x_146){
    true_4 => {
      x_145 := zero_6;
    }
    false_5 => {
      x_148 :=
        fn loop_149(x_150%U, y_151%U) {
          x_154 := pred_113(y_151);
          x_153 := sub_126(x_150, x_154);
          match(x_153){
            zero_6 => {
              x_152 := zero_6;
            }
            _ => {
              x_157 := pred_113(y_151);
              x_156 := sub_126(x_150, x_157);
              match[U](x_156){
                succ_7(n_158) => {
                  x_159 := loop_149(n_158, y_151);
                  x_160 := mkconstr(succ_7, [x_159]);
                  x_155 := x_160;
                }
              }
              x_152 := x_155;
            }
          }
          return x_152;
        };
      loop_147 := x_148;
      x_161 := loop_147(x_143, y_144);
      x_145 := x_161;
    }
  }
  return x_145;
}

fn rem_162(x_163%U, y_164%U) {
  x_167 := div_142(x_163, y_164);
  x_166 := mul_134(x_167, y_164);
  x_165 := sub_126(x_163, x_166);
  return x_165;
}

fn free_listUU_168(A_169%U, f_170%U, __171%U) {
  match(__171){
    nilUU_28 => {
      x_172 := ttU_21;
    }
    _ => {
      match[U](__171){
        consUU_29(hd_174, tl_175) => {
          x_177 := f_170(hd_174);
          __176 := x_177;
          x_178 := free_listUU_168(NULL, f_170, tl_175);
          x_173 := x_178;
        }
      }
      x_172 := x_173;
    }
  }
  return x_172;
}

fn free_listUL_179(A_180%U, f_181%U, __182%U) {
  match(__182){
    nilUL_26 => {
      x_183 := ttU_21;
    }
    _ => {
      match[L](__182){
        consUL_27(hd_185, tl_186) => {
          x_188 := f_181(hd_185);
          __187 := x_188;
          x_189 := free_listUL_179(NULL, f_181, tl_186);
          x_184 := x_189;
        }
      }
      x_183 := x_184;
    }
  }
  return x_183;
}

fn free_listLL_190(A_191%U, f_192%U, __193%U) {
  match(__193){
    nilLL_22 => {
      x_194 := ttU_21;
    }
    _ => {
      match[L](__193){
        consLL_23(hd_196, tl_197) => {
          x_199 := f_192(hd_196);
          __198 := x_199;
          x_200 := free_listLL_190(NULL, f_192, tl_197);
          x_195 := x_200;
        }
      }
      x_194 := x_195;
    }
  }
  return x_194;
}

fn pow_201(x_202%U, y_203%U) {
  x_205 :=
    fn loop_206(acc_207%U, y_208%U) {
      x_210 := lte(y_208, 0);
      match(x_210){
        true_4 => {
          x_209 := acc_207;
        }
        false_5 => {
          x_212 := mul(x_202, acc_207);
          x_213 := sub(y_208, 1);
          x_211 := loop_206(x_212, x_213);
          x_209 := x_211;
        }
      }
      return x_209;
    };
  loop_204 := x_205;
  x_214 := loop_204(1, y_203);
  return x_214;
}

fn powm_215(x_216%U, y_217%U, m_218%U) {
  x_220 :=
    fn loop_221(acc_222%U, y_223%U) {
      x_225 := lte(y_223, 0);
      match(x_225){
        true_4 => {
          x_224 := acc_222;
        }
        false_5 => {
          x_228 := mul(x_216, acc_222);
          x_227 := mod(x_228, m_218);
          x_229 := sub(y_223, 1);
          x_226 := loop_221(x_227, x_229);
          x_224 := x_226;
        }
      }
      return x_224;
    };
  loop_219 := x_220;
  x_230 := loop_219(1, y_217);
  return x_230;
}

fn ord_231(c_232%U) {
  x_233 := ord(c_232);
  return x_233;
}

fn chr_234(i_235%U) {
  x_236 := chr(i_235);
  return x_236;
}

fn str_237(c_238%U) {
  x_240 := str("");
  x_239 := push(x_240, c_238);
  return x_239;
}

fn strlen_241(s_242%U) {
  x_243 := size(s_242);
  return x_243;
}

fn string_of_int_244(i_245%U) {
  x_247 :=
    fn aux_248(i_249%U) {
      x_251 := lte(10, i_249);
      match(x_251){
        true_4 => {
          x_253 := mod(i_249, 10);
          r_252 := x_253;
          x_255 := div(i_249, 10);
          i_254 := x_255;
          x_257 := aux_248(i_254);
          x_260 := ord_231(0);
          x_259 := add(r_252, x_260);
          x_258 := chr_234(x_259);
          x_256 := push(x_257, x_258);
          x_250 := x_256;
        }
        false_5 => {
          x_264 := ord_231(0);
          x_263 := add(i_249, x_264);
          x_262 := chr_234(x_263);
          x_261 := str_237(x_262);
          x_250 := x_261;
        }
      }
      return x_250;
    };
  aux_246 := x_247;
  x_266 := lte(0, i_245);
  match(x_266){
    true_4 => {
      x_267 := aux_246(i_245);
      x_265 := x_267;
    }
    false_5 => {
      x_269 := str("~");
      x_271 := neg(i_245);
      x_270 := aux_246(x_271);
      x_268 := cat(x_269, x_270);
      x_265 := x_268;
    }
  }
  return x_265;
}

fn appendUU_272(A_273%U, __274%U, __275%L) {
  match(__274){
    nilUU_28 => {
      x_276 := __275;
    }
    _ => {
      match[U](__274){
        consUU_29(hd_278, tl_279) => {
          x_280 := appendUU_272(NULL, tl_279, __275);
          x_281 := mkconstr(consUU_29, [hd_278, x_280]);
          x_277 := x_281;
        }
      }
      x_276 := x_277;
    }
  }
  return x_276;
}

fn appendUL_282(A_283%U, __284%U, __285%L) {
  match(__284){
    nilUL_26 => {
      x_286 := __285;
    }
    _ => {
      match[L](__284){
        consUL_27(hd_288, tl_289) => {
          x_290 := appendUL_282(NULL, tl_289, __285);
          x_291 := mkconstr(consUL_27, [hd_288, x_290]);
          x_287 := x_291;
        }
      }
      x_286 := x_287;
    }
  }
  return x_286;
}

fn appendLL_292(A_293%U, __294%U, __295%L) {
  match(__294){
    nilLL_22 => {
      x_296 := __295;
    }
    _ => {
      match[L](__294){
        consLL_23(hd_298, tl_299) => {
          x_300 := appendLL_292(NULL, tl_299, __295);
          x_301 := mkconstr(consLL_23, [hd_298, x_300]);
          x_297 := x_301;
        }
      }
      x_296 := x_297;
    }
  }
  return x_296;
}

fn llenUU_302(A_303%U, xs_304%U) {
  match(xs_304){
    nilUU_28 => {
      x_306 := mkconstr(pairUU_45, [zero_6, nilUU_28]);
      x_305 := x_306;
    }
    _ => {
      match[U](xs_304){
        consUU_29(hd_308, tl_309) => {
          x_311 := llenUU_302(NULL, tl_309);
          match[L](x_311){
            pairUU_45(m_312, n_313) => {
              x_314 := mkconstr(succ_7, [m_312]);
              x_315 := mkconstr(consUU_29, [hd_308, n_313]);
              x_316 := mkconstr(pairUU_45, [x_314, x_315]);
              x_310 := x_316;
            }
          }
          x_307 := x_310;
        }
      }
      x_305 := x_307;
    }
  }
  return x_305;
}

fn llenUL_317(A_318%U, xs_319%U) {
  match(xs_319){
    nilUL_26 => {
      x_321 := mkconstr(pairUL_44, [zero_6, nilUL_26]);
      x_320 := x_321;
    }
    _ => {
      match[L](xs_319){
        consUL_27(hd_323, tl_324) => {
          x_326 := llenUL_317(NULL, tl_324);
          match[L](x_326){
            pairUL_44(m_327, n_328) => {
              x_329 := mkconstr(succ_7, [m_327]);
              x_330 := mkconstr(consUL_27, [hd_323, n_328]);
              x_331 := mkconstr(pairUL_44, [x_329, x_330]);
              x_325 := x_331;
            }
          }
          x_322 := x_325;
        }
      }
      x_320 := x_322;
    }
  }
  return x_320;
}

fn llenLL_332(A_333%U, xs_334%U) {
  match(xs_334){
    nilLL_22 => {
      x_336 := mkconstr(pairUL_44, [zero_6, nilLL_22]);
      x_335 := x_336;
    }
    _ => {
      match[L](xs_334){
        consLL_23(hd_338, tl_339) => {
          x_341 := llenLL_332(NULL, tl_339);
          match[L](x_341){
            pairUL_44(m_342, n_343) => {
              x_344 := mkconstr(succ_7, [m_342]);
              x_345 := mkconstr(consLL_23, [hd_338, n_343]);
              x_346 := mkconstr(pairUL_44, [x_344, x_345]);
              x_340 := x_346;
            }
          }
          x_337 := x_340;
        }
      }
      x_335 := x_337;
    }
  }
  return x_335;
}

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match(__99){
    zero_6 => {
      x_101 := true_4;
    }
    _ => {
      match[U](__99){
        succ_7(n_103) => {
          match(__100){
            zero_6 => {
              x_104 := false_5;
            }
            _ => {
              match[U](__100){
                succ_7(n_106) => {
                  x_107 := lte_98(n_103, n_106);
                  x_105 := x_107;
                }
              }
              x_104 := x_105;
            }
          }
          x_102 := x_104;
        }
      }
      x_101 := x_102;
    }
  }
  return x_101;
}

fn lt_108(x_109%U, y_110%U) {
  x_112 := mkconstr(succ_7, [x_109]);
  x_111 := lte_98(x_112, y_110);
  return x_111;
}

fn pred_113(__114%U) {
  match(__114){
    zero_6 => {
      x_115 := zero_6;
    }
    _ => {
      match[U](__114){ succ_7(n_117) => {
                         x_116 := n_117;
                       } }
      x_115 := x_116;
    }
  }
  return x_115;
}

fn add_118(__119%U, __120%U) {
  match(__119){
    zero_6 => {
      x_121 := __120;
    }
    _ => {
      match[U](__119){
        succ_7(n_123) => {
          x_124 := add_118(n_123, __120);
          x_125 := mkconstr(succ_7, [x_124]);
          x_122 := x_125;
        }
      }
      x_121 := x_122;
    }
  }
  return x_121;
}

fn sub_126(__127%U, __128%U) {
  match(__128){
    zero_6 => {
      x_129 := __127;
    }
    _ => {
      match[U](__128){
        succ_7(n_131) => {
          x_133 := pred_113(__127);
          x_132 := sub_126(x_133, n_131);
          x_130 := x_132;
        }
      }
      x_129 := x_130;
    }
  }
  return x_129;
}

fn mul_134(__135%U, __136%U) {
  match(__135){
    zero_6 => {
      x_137 := zero_6;
    }
    _ => {
      match[U](__135){
        succ_7(n_139) => {
          x_141 := mul_134(n_139, __136);
          x_140 := add_118(__136, x_141);
          x_138 := x_140;
        }
      }
      x_137 := x_138;
    }
  }
  return x_137;
}

fn div_142(x_143%U, y_144%U) {
  x_146 := lt_108(x_143, y_144);
  match(x_146){
    true_4 => {
      x_145 := zero_6;
    }
    false_5 => {
      x_148 :=
        fn loop_149(x_150%U, y_151%U) {
          x_154 := pred_113(y_151);
          x_153 := sub_126(x_150, x_154);
          match(x_153){
            zero_6 => {
              x_152 := zero_6;
            }
            _ => {
              x_157 := pred_113(y_151);
              x_156 := sub_126(x_150, x_157);
              match[U](x_156){
                succ_7(n_158) => {
                  x_159 := loop_149(n_158, y_151);
                  x_160 := mkconstr(succ_7, [x_159]);
                  x_155 := x_160;
                }
              }
              x_152 := x_155;
            }
          }
          return x_152;
        };
      loop_147 := x_148;
      x_161 := loop_147(x_143, y_144);
      x_145 := x_161;
    }
  }
  return x_145;
}

fn rem_162(x_163%U, y_164%U) {
  x_167 := div_142(x_163, y_164);
  x_166 := mul_134(x_167, y_164);
  x_165 := sub_126(x_163, x_166);
  return x_165;
}

fn free_listUU_168(A_169%U, f_170%U, __171%U) {
  match(__171){
    nilUU_28 => {
      x_172 := ttU_21;
    }
    _ => {
      match[U](__171){
        consUU_29(hd_174, tl_175) => {
          x_177 := f_170(hd_174);
          __176 := x_177;
          x_178 := free_listUU_168(NULL, f_170, tl_175);
          x_173 := x_178;
        }
      }
      x_172 := x_173;
    }
  }
  return x_172;
}

fn free_listUL_179(A_180%U, f_181%U, __182%U) {
  match(__182){
    nilUL_26 => {
      x_183 := ttU_21;
    }
    _ => {
      match[L](__182){
        consUL_27(hd_185, tl_186) => {
          x_188 := f_181(hd_185);
          __187 := x_188;
          x_189 := free_listUL_179(NULL, f_181, tl_186);
          x_184 := x_189;
          free(__182);
        }
      }
      x_183 := x_184;
    }
  }
  return x_183;
}

fn free_listLL_190(A_191%U, f_192%U, __193%U) {
  match(__193){
    nilLL_22 => {
      x_194 := ttU_21;
    }
    _ => {
      match[L](__193){
        consLL_23(hd_196, tl_197) => {
          x_199 := f_192(hd_196);
          __198 := x_199;
          x_200 := free_listLL_190(NULL, f_192, tl_197);
          x_195 := x_200;
          free(__193);
        }
      }
      x_194 := x_195;
    }
  }
  return x_194;
}

fn pow_201(x_202%U, y_203%U) {
  x_205 :=
    fn loop_206(acc_207%U, y_208%U) {
      x_210 := lte(y_208, 0);
      match(x_210){
        true_4 => {
          x_209 := acc_207;
        }
        false_5 => {
          x_212 := mul(x_202, acc_207);
          x_213 := sub(y_208, 1);
          x_211 := loop_206(x_212, x_213);
          x_209 := x_211;
        }
      }
      return x_209;
    };
  loop_204 := x_205;
  x_214 := loop_204(1, y_203);
  return x_214;
}

fn powm_215(x_216%U, y_217%U, m_218%U) {
  x_220 :=
    fn loop_221(acc_222%U, y_223%U) {
      x_225 := lte(y_223, 0);
      match(x_225){
        true_4 => {
          x_224 := acc_222;
        }
        false_5 => {
          x_228 := mul(x_216, acc_222);
          x_227 := mod(x_228, m_218);
          x_229 := sub(y_223, 1);
          x_226 := loop_221(x_227, x_229);
          x_224 := x_226;
        }
      }
      return x_224;
    };
  loop_219 := x_220;
  x_230 := loop_219(1, y_217);
  return x_230;
}

fn ord_231(c_232%U) {
  x_233 := ord(c_232);
  return x_233;
}

fn chr_234(i_235%U) {
  x_236 := chr(i_235);
  return x_236;
}

fn str_237(c_238%U) {
  x_240 := str("");
  x_239 := push(x_240, c_238);
  return x_239;
}

fn strlen_241(s_242%U) {
  x_243 := size(s_242);
  return x_243;
}

fn string_of_int_244(i_245%U) {
  x_247 :=
    fn aux_248(i_249%U) {
      x_251 := lte(10, i_249);
      match(x_251){
        true_4 => {
          x_253 := mod(i_249, 10);
          r_252 := x_253;
          x_255 := div(i_249, 10);
          i_254 := x_255;
          x_257 := aux_248(i_254);
          x_260 := ord_231(0);
          x_259 := add(r_252, x_260);
          x_258 := chr_234(x_259);
          x_256 := push(x_257, x_258);
          x_250 := x_256;
        }
        false_5 => {
          x_264 := ord_231(0);
          x_263 := add(i_249, x_264);
          x_262 := chr_234(x_263);
          x_261 := str_237(x_262);
          x_250 := x_261;
        }
      }
      return x_250;
    };
  aux_246 := x_247;
  x_266 := lte(0, i_245);
  match(x_266){
    true_4 => {
      x_267 := aux_246(i_245);
      x_265 := x_267;
    }
    false_5 => {
      x_269 := str("~");
      x_271 := neg(i_245);
      x_270 := aux_246(x_271);
      x_268 := cat(x_269, x_270);
      x_265 := x_268;
    }
  }
  return x_265;
}

fn appendUU_272(A_273%U, __274%U, __275%L) {
  match(__274){
    nilUU_28 => {
      x_276 := __275;
    }
    _ => {
      match[U](__274){
        consUU_29(hd_278, tl_279) => {
          x_280 := appendUU_272(NULL, tl_279, __275);
          x_281 := mkconstr(consUU_29, [hd_278, x_280]);
          x_277 := x_281;
        }
      }
      x_276 := x_277;
    }
  }
  return x_276;
}

fn appendUL_282(A_283%U, __284%U, __285%L) {
  match(__284){
    nilUL_26 => {
      x_286 := __285;
    }
    _ => {
      match[L](__284){
        consUL_27(hd_288, tl_289) => {
          x_290 := appendUL_282(NULL, tl_289, __285);
          x_291 := reconstr(__284, consUL_27, [hd_288, x_290]);
          x_287 := x_291;
        }
      }
      x_286 := x_287;
    }
  }
  return x_286;
}

fn appendLL_292(A_293%U, __294%U, __295%L) {
  match(__294){
    nilLL_22 => {
      x_296 := __295;
    }
    _ => {
      match[L](__294){
        consLL_23(hd_298, tl_299) => {
          x_300 := appendLL_292(NULL, tl_299, __295);
          x_301 := reconstr(__294, consLL_23, [hd_298, x_300]);
          x_297 := x_301;
        }
      }
      x_296 := x_297;
    }
  }
  return x_296;
}

fn llenUU_302(A_303%U, xs_304%U) {
  match(xs_304){
    nilUU_28 => {
      x_306 := mkconstr(pairUU_45, [zero_6, nilUU_28]);
      x_305 := x_306;
    }
    _ => {
      match[U](xs_304){
        consUU_29(hd_308, tl_309) => {
          x_311 := llenUU_302(NULL, tl_309);
          match[L](x_311){
            pairUU_45(m_312, n_313) => {
              x_314 := mkconstr(succ_7, [m_312]);
              x_315 := reconstr(x_311, consUU_29, [hd_308, n_313]);
              x_316 := mkconstr(pairUU_45, [x_314, x_315]);
              x_310 := x_316;
            }
          }
          x_307 := x_310;
        }
      }
      x_305 := x_307;
    }
  }
  return x_305;
}

fn llenUL_317(A_318%U, xs_319%U) {
  match(xs_319){
    nilUL_26 => {
      x_321 := mkconstr(pairUL_44, [zero_6, nilUL_26]);
      x_320 := x_321;
    }
    _ => {
      match[L](xs_319){
        consUL_27(hd_323, tl_324) => {
          x_326 := llenUL_317(NULL, tl_324);
          match[L](x_326){
            pairUL_44(m_327, n_328) => {
              x_329 := mkconstr(succ_7, [m_327]);
              x_330 := reconstr(x_326, consUL_27, [hd_323, n_328]);
              x_331 := reconstr(xs_319, pairUL_44, [x_329, x_330]);
              x_325 := x_331;
            }
          }
          x_322 := x_325;
        }
      }
      x_320 := x_322;
    }
  }
  return x_320;
}

fn llenLL_332(A_333%U, xs_334%U) {
  match(xs_334){
    nilLL_22 => {
      x_336 := mkconstr(pairUL_44, [zero_6, nilLL_22]);
      x_335 := x_336;
    }
    _ => {
      match[L](xs_334){
        consLL_23(hd_338, tl_339) => {
          x_341 := llenLL_332(NULL, tl_339);
          match[L](x_341){
            pairUL_44(m_342, n_343) => {
              x_344 := mkconstr(succ_7, [m_342]);
              x_345 := reconstr(x_341, consLL_23, [hd_338, n_343]);
              x_346 := reconstr(xs_334, pairUL_44, [x_344, x_345]);
              x_340 := x_346;
            }
          }
          x_337 := x_340;
        }
      }
      x_335 := x_337;
    }
  }
  return x_335;
}

[trans4e success]

-----------------------------------------

fn fn0_idU_347(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_348(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_349 := fn0_idU_347(A_2, m_3);
  return x_349;
}

fn fn0_idL_350(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_351(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_352 := fn0_idL_350(A_5, m_6);
  return x_352;
}

fn fn0_rwlUU_353(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_354(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_355 := fn0_rwlUU_353(A_8, m_9, n_10, B_11, __12, __13);
  return x_355;
}

fn fn0_rwlUL_356(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_357(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_358 := fn0_rwlUL_356(A_15, m_16, n_17, B_18, __19, __20);
  return x_358;
}

fn fn0_rwlLU_359(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_360(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_361 := fn0_rwlLU_359(A_22, m_23, n_24, B_25, __26, __27);
  return x_361;
}

fn fn0_rwlLL_362(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_363(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_364 := fn0_rwlLL_362(A_29, m_30, n_31, B_32, __33, __34);
  return x_364;
}

fn fn0_rwrUU_365(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_366(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_367 := fn0_rwrUU_365(A_36, m_37, n_38, B_39, __40, __41);
  return x_367;
}

fn fn0_rwrUL_368(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_369(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_370 := fn0_rwrUL_368(A_43, m_44, n_45, B_46, __47, __48);
  return x_370;
}

fn fn0_rwrLU_371(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_372(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_373 := fn0_rwrLU_371(A_50, m_51, n_52, B_53, __54, __55);
  return x_373;
}

fn fn0_rwrLL_374(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_375(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_376 := fn0_rwrLL_374(A_57, m_58, n_59, B_60, __61, __62);
  return x_376;
}

fn fn0_sing_elimUU_377(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_378(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_379 := fn0_sing_elimUU_377(A_64, x_65, __66);
  return x_379;
}

fn fn0_sing_elimUL_380(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_381(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_382 := fn0_sing_elimUL_380(A_68, x_69, __70);
  return x_382;
}

fn fn0_sing_elimLU_383(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_384(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_385 := fn0_sing_elimLU_383(A_72, x_73, __74);
  return x_385;
}

fn fn0_sing_elimLL_386(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_387(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_388 := fn0_sing_elimLL_386(A_76, x_77, __78);
  return x_388;
}

fn fn0_not_389(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_390(env) {
  __80 := env[1];
  x_391 := fn0_not_389(__80);
  return x_391;
}

fn fn0_and_392(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_393(env) {
  __83 := env[1];
  __84 := env[2];
  x_394 := fn0_and_392(__83, __84);
  return x_394;
}

fn fn0_or_395(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_396(env) {
  __88 := env[1];
  __89 := env[2];
  x_397 := fn0_or_395(__88, __89);
  return x_397;
}

fn fn0_xor_398(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_399(env) {
  __93 := env[1];
  __94 := env[2];
  x_400 := fn0_xor_398(__93, __94);
  return x_400;
}

fn fn0_lte_401(__99, __100) {
  switch(__99){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    _ => {
      getbox(n_103, __99, 0);
      switch(__100){
        zero_6 => {
          move1(x_104, false_5);
          break;
        }
        _ => {
          getbox(n_106, __100, 0);
          x_107 := fn0_lte_401(n_103, n_106);
          move1(x_105, x_107);
          move1(x_104, x_105);
          break;
        }
      }
      move1(x_102, x_104);
      move1(x_101, x_102);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_402(env) {
  __99 := env[1];
  __100 := env[2];
  x_403 := fn0_lte_401(__99, __100);
  return x_403;
}

fn fn0_lt_404(x_109, y_110) {
  mkbox(x_112, succ_7, 1);
  setbox(x_112, x_109, 0);
  x_111 := fn0_lte_401(x_112, y_110);
  return x_111;
}

fn fn1_lt_405(env) {
  x_109 := env[1];
  y_110 := env[2];
  x_406 := fn0_lt_404(x_109, y_110);
  return x_406;
}

fn fn0_pred_407(__114) {
  switch(__114){
    zero_6 => {
      move1(x_115, zero_6);
      break;
    }
    _ => {
      getbox(n_117, __114, 0);
      move1(x_116, n_117);
      move1(x_115, x_116);
      break;
    }
  }
  return x_115;
}

fn fn1_pred_408(env) {
  __114 := env[1];
  x_409 := fn0_pred_407(__114);
  return x_409;
}

fn fn0_add_410(__119, __120) {
  switch(__119){
    zero_6 => {
      move1(x_121, __120);
      break;
    }
    _ => {
      getbox(n_123, __119, 0);
      x_124 := fn0_add_410(n_123, __120);
      mkbox(x_125, succ_7, 1);
      setbox(x_125, x_124, 0);
      move1(x_122, x_125);
      move1(x_121, x_122);
      break;
    }
  }
  return x_121;
}

fn fn1_add_411(env) {
  __119 := env[1];
  __120 := env[2];
  x_412 := fn0_add_410(__119, __120);
  return x_412;
}

fn fn0_sub_413(__127, __128) {
  switch(__128){
    zero_6 => {
      move1(x_129, __127);
      break;
    }
    _ => {
      getbox(n_131, __128, 0);
      x_133 := fn0_pred_407(__127);
      x_132 := fn0_sub_413(x_133, n_131);
      move1(x_130, x_132);
      move1(x_129, x_130);
      break;
    }
  }
  return x_129;
}

fn fn1_sub_414(env) {
  __127 := env[1];
  __128 := env[2];
  x_415 := fn0_sub_413(__127, __128);
  return x_415;
}

fn fn0_mul_416(__135, __136) {
  switch(__135){
    zero_6 => {
      move1(x_137, zero_6);
      break;
    }
    _ => {
      getbox(n_139, __135, 0);
      x_141 := fn0_mul_416(n_139, __136);
      x_140 := fn0_add_410(__136, x_141);
      move1(x_138, x_140);
      move1(x_137, x_138);
      break;
    }
  }
  return x_137;
}

fn fn1_mul_417(env) {
  __135 := env[1];
  __136 := env[2];
  x_418 := fn0_mul_416(__135, __136);
  return x_418;
}

fn fn0_div_419(x_143, y_144) {
  x_146 := fn0_lt_404(x_143, y_144);
  switch(x_146){
    true_4 => {
      move1(x_145, zero_6);
      break;
    }
    false_5 => {
      mkclo1(x_148, fn1_loop_421, fvc:=2, argc:=2);
      setclo(x_148, pred_113, 1);
      setclo(x_148, sub_126, 2);
      move1(loop_147, x_148);
      appc(x_425, loop_147, x_143);
      appc(x_426, x_425, y_144);
      move1(x_161, x_426);
      move1(x_145, x_161);
      break;
    }
  }
  return x_145;
}

fn fn1_div_420(env) {
  x_143 := env[1];
  y_144 := env[2];
  x_428 := fn0_div_419(x_143, y_144);
  return x_428;
}

fn fn0_rem_429(x_163, y_164) {
  x_167 := fn0_div_419(x_163, y_164);
  x_166 := fn0_mul_416(x_167, y_164);
  x_165 := fn0_sub_413(x_163, x_166);
  return x_165;
}

fn fn1_rem_430(env) {
  x_163 := env[1];
  y_164 := env[2];
  x_431 := fn0_rem_429(x_163, y_164);
  return x_431;
}

fn fn0_free_listUU_432(A_169, f_170, __171) {
  switch(__171){
    nilUU_28 => {
      move1(x_172, ttU_21);
      break;
    }
    _ => {
      getbox(hd_174, __171, 0);
      getbox(tl_175, __171, 1);
      appc(x_434, f_170, hd_174);
      move1(x_177, x_434);
      move1(__176, x_177);
      x_178 := fn0_free_listUU_432(NULL, f_170, tl_175);
      move1(x_173, x_178);
      move1(x_172, x_173);
      break;
    }
  }
  return x_172;
}

fn fn1_free_listUU_433(env) {
  A_169 := env[1];
  f_170 := env[2];
  __171 := env[3];
  x_436 := fn0_free_listUU_432(A_169, f_170, __171);
  return x_436;
}

fn fn0_free_listUL_437(A_180, f_181, __182) {
  switch(__182){
    nilUL_26 => {
      move1(x_183, ttU_21);
      break;
    }
    _ => {
      getbox(hd_185, __182, 0);
      getbox(tl_186, __182, 1);
      appc(x_439, f_181, hd_185);
      move1(x_188, x_439);
      move1(__187, x_188);
      x_189 := fn0_free_listUL_437(NULL, f_181, tl_186);
      move1(x_184, x_189);
      free(__182);
      move1(x_183, x_184);
      break;
    }
  }
  return x_183;
}

fn fn1_free_listUL_438(env) {
  A_180 := env[1];
  f_181 := env[2];
  __182 := env[3];
  x_441 := fn0_free_listUL_437(A_180, f_181, __182);
  return x_441;
}

fn fn0_free_listLL_442(A_191, f_192, __193) {
  switch(__193){
    nilLL_22 => {
      move1(x_194, ttU_21);
      break;
    }
    _ => {
      getbox(hd_196, __193, 0);
      getbox(tl_197, __193, 1);
      appc(x_444, f_192, hd_196);
      move1(x_199, x_444);
      move1(__198, x_199);
      x_200 := fn0_free_listLL_442(NULL, f_192, tl_197);
      move1(x_195, x_200);
      free(__193);
      move1(x_194, x_195);
      break;
    }
  }
  return x_194;
}

fn fn1_free_listLL_443(env) {
  A_191 := env[1];
  f_192 := env[2];
  __193 := env[3];
  x_446 := fn0_free_listLL_442(A_191, f_192, __193);
  return x_446;
}

fn fn0_pow_447(x_202, y_203) {
  mkclo1(x_205, fn1_loop_449, fvc:=1, argc:=2);
  setclo(x_205, x_202, 1);
  move1(loop_204, x_205);
  appc(x_453, loop_204, 1);
  appc(x_454, x_453, y_203);
  move1(x_214, x_454);
  return x_214;
}

fn fn1_pow_448(env) {
  x_202 := env[1];
  y_203 := env[2];
  x_456 := fn0_pow_447(x_202, y_203);
  return x_456;
}

fn fn0_powm_457(x_216, y_217, m_218) {
  mkclo1(x_220, fn1_loop_459, fvc:=2, argc:=2);
  setclo(x_220, x_216, 1);
  setclo(x_220, m_218, 2);
  move1(loop_219, x_220);
  appc(x_463, loop_219, 1);
  appc(x_464, x_463, y_217);
  move1(x_230, x_464);
  return x_230;
}

fn fn1_powm_458(env) {
  x_216 := env[1];
  y_217 := env[2];
  m_218 := env[3];
  x_466 := fn0_powm_457(x_216, y_217, m_218);
  return x_466;
}

fn fn0_ord_467(c_232) {
  ord(x_233, c_232);
  return x_233;
}

fn fn1_ord_468(env) {
  c_232 := env[1];
  x_469 := fn0_ord_467(c_232);
  return x_469;
}

fn fn0_chr_470(i_235) {
  chr(x_236, i_235);
  return x_236;
}

fn fn1_chr_471(env) {
  i_235 := env[1];
  x_472 := fn0_chr_470(i_235);
  return x_472;
}

fn fn0_str_473(c_238) {
  str(x_240, "")
  push(x_239, x_240, c_238);
  return x_239;
}

fn fn1_str_474(env) {
  c_238 := env[1];
  x_475 := fn0_str_473(c_238);
  return x_475;
}

fn fn0_strlen_476(s_242) {
  size(x_243, s_242);
  return x_243;
}

fn fn1_strlen_477(env) {
  s_242 := env[1];
  x_478 := fn0_strlen_476(s_242);
  return x_478;
}

fn fn0_string_of_int_479(i_245) {
  mkclo1(x_247, fn1_aux_481, fvc:=3, argc:=1);
  setclo(x_247, ord_231, 1);
  setclo(x_247, chr_234, 2);
  setclo(x_247, str_237, 3);
  move1(aux_246, x_247);
  lte(x_266, 0, i_245);
  switch(x_266){
    true_4 => {
      appc(x_484, aux_246, i_245);
      move1(x_267, x_484);
      move1(x_265, x_267);
      break;
    }
    false_5 => {
      str(x_269, "~")
      neg(x_271, i_245);
      appc(x_486, aux_246, x_271);
      move1(x_270, x_486);
      cat(x_268, x_269, x_270);
      move1(x_265, x_268);
      break;
    }
  }
  return x_265;
}

fn fn1_string_of_int_480(env) {
  i_245 := env[1];
  x_488 := fn0_string_of_int_479(i_245);
  return x_488;
}

fn fn0_appendUU_489(A_273, __274, __275) {
  switch(__274){
    nilUU_28 => {
      move1(x_276, __275);
      break;
    }
    _ => {
      getbox(hd_278, __274, 0);
      getbox(tl_279, __274, 1);
      x_280 := fn0_appendUU_489(NULL, tl_279, __275);
      mkbox(x_281, consUU_29, 2);
      setbox(x_281, hd_278, 0);
      setbox(x_281, x_280, 1);
      move1(x_277, x_281);
      move1(x_276, x_277);
      break;
    }
  }
  return x_276;
}

fn fn1_appendUU_490(env) {
  A_273 := env[1];
  __274 := env[2];
  __275 := env[3];
  x_491 := fn0_appendUU_489(A_273, __274, __275);
  return x_491;
}

fn fn0_appendUL_492(A_283, __284, __285) {
  switch(__284){
    nilUL_26 => {
      move1(x_286, __285);
      break;
    }
    _ => {
      getbox(hd_288, __284, 0);
      getbox(tl_289, __284, 1);
      x_290 := fn0_appendUL_492(NULL, tl_289, __285);
      rebox(x_291, __284, consUL_27);
      setbox(x_291, hd_288, 0);
      setbox(x_291, x_290, 1);
      move1(x_287, x_291);
      move1(x_286, x_287);
      break;
    }
  }
  return x_286;
}

fn fn1_appendUL_493(env) {
  A_283 := env[1];
  __284 := env[2];
  __285 := env[3];
  x_494 := fn0_appendUL_492(A_283, __284, __285);
  return x_494;
}

fn fn0_appendLL_495(A_293, __294, __295) {
  switch(__294){
    nilLL_22 => {
      move1(x_296, __295);
      break;
    }
    _ => {
      getbox(hd_298, __294, 0);
      getbox(tl_299, __294, 1);
      x_300 := fn0_appendLL_495(NULL, tl_299, __295);
      rebox(x_301, __294, consLL_23);
      setbox(x_301, hd_298, 0);
      setbox(x_301, x_300, 1);
      move1(x_297, x_301);
      move1(x_296, x_297);
      break;
    }
  }
  return x_296;
}

fn fn1_appendLL_496(env) {
  A_293 := env[1];
  __294 := env[2];
  __295 := env[3];
  x_497 := fn0_appendLL_495(A_293, __294, __295);
  return x_497;
}

fn fn0_llenUU_498(A_303, xs_304) {
  switch(xs_304){
    nilUU_28 => {
      mkbox(x_306, pairUU_45, 2);
      setbox(x_306, zero_6, 0);
      setbox(x_306, nilUU_28, 1);
      move1(x_305, x_306);
      break;
    }
    _ => {
      getbox(hd_308, xs_304, 0);
      getbox(tl_309, xs_304, 1);
      x_311 := fn0_llenUU_498(NULL, tl_309);
      getbox(m_312, x_311, 0);
      getbox(n_313, x_311, 1);
      mkbox(x_314, succ_7, 1);
      setbox(x_314, m_312, 0);
      rebox(x_315, x_311, consUU_29);
      setbox(x_315, hd_308, 0);
      setbox(x_315, n_313, 1);
      mkbox(x_316, pairUU_45, 2);
      setbox(x_316, x_314, 0);
      setbox(x_316, x_315, 1);
      move1(x_310, x_316);
      move1(x_307, x_310);
      move1(x_305, x_307);
      break;
    }
  }
  return x_305;
}

fn fn1_llenUU_499(env) {
  A_303 := env[1];
  xs_304 := env[2];
  x_500 := fn0_llenUU_498(A_303, xs_304);
  return x_500;
}

fn fn0_llenUL_501(A_318, xs_319) {
  switch(xs_319){
    nilUL_26 => {
      mkbox(x_321, pairUL_44, 2);
      setbox(x_321, zero_6, 0);
      setbox(x_321, nilUL_26, 1);
      move1(x_320, x_321);
      break;
    }
    _ => {
      getbox(hd_323, xs_319, 0);
      getbox(tl_324, xs_319, 1);
      x_326 := fn0_llenUL_501(NULL, tl_324);
      getbox(m_327, x_326, 0);
      getbox(n_328, x_326, 1);
      mkbox(x_329, succ_7, 1);
      setbox(x_329, m_327, 0);
      rebox(x_330, x_326, consUL_27);
      setbox(x_330, hd_323, 0);
      setbox(x_330, n_328, 1);
      rebox(x_331, xs_319, pairUL_44);
      setbox(x_331, x_329, 0);
      setbox(x_331, x_330, 1);
      move1(x_325, x_331);
      move1(x_322, x_325);
      move1(x_320, x_322);
      break;
    }
  }
  return x_320;
}

fn fn1_llenUL_502(env) {
  A_318 := env[1];
  xs_319 := env[2];
  x_503 := fn0_llenUL_501(A_318, xs_319);
  return x_503;
}

fn fn0_llenLL_504(A_333, xs_334) {
  switch(xs_334){
    nilLL_22 => {
      mkbox(x_336, pairUL_44, 2);
      setbox(x_336, zero_6, 0);
      setbox(x_336, nilLL_22, 1);
      move1(x_335, x_336);
      break;
    }
    _ => {
      getbox(hd_338, xs_334, 0);
      getbox(tl_339, xs_334, 1);
      x_341 := fn0_llenLL_504(NULL, tl_339);
      getbox(m_342, x_341, 0);
      getbox(n_343, x_341, 1);
      mkbox(x_344, succ_7, 1);
      setbox(x_344, m_342, 0);
      rebox(x_345, x_341, consLL_23);
      setbox(x_345, hd_338, 0);
      setbox(x_345, n_343, 1);
      rebox(x_346, xs_334, pairUL_44);
      setbox(x_346, x_344, 0);
      setbox(x_346, x_345, 1);
      move1(x_340, x_346);
      move1(x_337, x_340);
      move1(x_335, x_337);
      break;
    }
  }
  return x_335;
}

fn fn1_llenLL_505(env) {
  A_333 := env[1];
  xs_334 := env[2];
  x_506 := fn0_llenLL_504(A_333, xs_334);
  return x_506;
}

fn fn1_aux_481(env) {
  aux_248 := env[0];
  ord_231 := env[1];
  chr_234 := env[2];
  str_237 := env[3];
  i_249 := env[4];
  lte(x_251, 10, i_249);
  switch(x_251){
    true_4 => {
      mod(x_253, i_249, 10);
      move1(r_252, x_253);
      div(x_255, i_249, 10);
      move1(i_254, x_255);
      appc(x_482, aux_248, i_254);
      move1(x_257, x_482);
      x_260 := fn0_ord_467(0);
      add(x_259, r_252, x_260);
      x_258 := fn0_chr_470(x_259);
      push(x_256, x_257, x_258);
      move1(x_250, x_256);
      break;
    }
    false_5 => {
      x_264 := fn0_ord_467(0);
      add(x_263, i_249, x_264);
      x_262 := fn0_chr_470(x_263);
      x_261 := fn0_str_473(x_262);
      move1(x_250, x_261);
      break;
    }
  }
  return x_250;
}

fn fn1_loop_459(env) {
  loop_221 := env[0];
  x_216 := env[1];
  m_218 := env[2];
  acc_222 := env[3];
  y_223 := env[4];
  lte(x_225, y_223, 0);
  switch(x_225){
    true_4 => {
      move1(x_224, acc_222);
      break;
    }
    false_5 => {
      mul(x_228, x_216, acc_222);
      mod(x_227, x_228, m_218);
      sub(x_229, y_223, 1);
      appc(x_460, loop_221, x_227);
      appc(x_461, x_460, x_229);
      move1(x_226, x_461);
      move1(x_224, x_226);
      break;
    }
  }
  return x_224;
}

fn fn1_loop_449(env) {
  loop_206 := env[0];
  x_202 := env[1];
  acc_207 := env[2];
  y_208 := env[3];
  lte(x_210, y_208, 0);
  switch(x_210){
    true_4 => {
      move1(x_209, acc_207);
      break;
    }
    false_5 => {
      mul(x_212, x_202, acc_207);
      sub(x_213, y_208, 1);
      appc(x_450, loop_206, x_212);
      appc(x_451, x_450, x_213);
      move1(x_211, x_451);
      move1(x_209, x_211);
      break;
    }
  }
  return x_209;
}

fn fn1_loop_421(env) {
  loop_149 := env[0];
  pred_113 := env[1];
  sub_126 := env[2];
  x_150 := env[3];
  y_151 := env[4];
  x_154 := fn0_pred_407(y_151);
  x_153 := fn0_sub_413(x_150, x_154);
  switch(x_153){
    zero_6 => {
      move1(x_152, zero_6);
      break;
    }
    _ => {
      x_157 := fn0_pred_407(y_151);
      x_156 := fn0_sub_413(x_150, x_157);
      getbox(n_158, x_156, 0);
      appc(x_422, loop_149, n_158);
      appc(x_423, x_422, y_151);
      move1(x_159, x_423);
      mkbox(x_160, succ_7, 1);
      setbox(x_160, x_159, 0);
      move1(x_155, x_160);
      move1(x_152, x_155);
      break;
    }
  }
  return x_152;
}

main {
  mkclo0(idU_1, fn1_idU_348, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_351, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_354, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_357, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_360, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_363, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_366, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_369, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_372, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_375, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_378, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_381, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_384, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_387, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_390, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_393, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_396, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_399, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_402, fvc:=0, argc:=2);
  mkclo0(lt_108, fn1_lt_405, fvc:=0, argc:=2);
  mkclo0(pred_113, fn1_pred_408, fvc:=0, argc:=1);
  mkclo0(add_118, fn1_add_411, fvc:=0, argc:=2);
  mkclo0(sub_126, fn1_sub_414, fvc:=0, argc:=2);
  mkclo0(mul_134, fn1_mul_417, fvc:=0, argc:=2);
  mkclo0(div_142, fn1_div_420, fvc:=0, argc:=2);
  mkclo0(rem_162, fn1_rem_430, fvc:=0, argc:=2);
  mkclo0(free_listUU_168, fn1_free_listUU_433, fvc:=0, argc:=3);
  mkclo0(free_listUL_179, fn1_free_listUL_438, fvc:=0, argc:=3);
  mkclo0(free_listLL_190, fn1_free_listLL_443, fvc:=0, argc:=3);
  mkclo0(pow_201, fn1_pow_448, fvc:=0, argc:=2);
  mkclo0(powm_215, fn1_powm_458, fvc:=0, argc:=3);
  mkclo0(ord_231, fn1_ord_468, fvc:=0, argc:=1);
  mkclo0(chr_234, fn1_chr_471, fvc:=0, argc:=1);
  mkclo0(str_237, fn1_str_474, fvc:=0, argc:=1);
  mkclo0(strlen_241, fn1_strlen_477, fvc:=0, argc:=1);
  mkclo0(string_of_int_244, fn1_string_of_int_480, fvc:=0, argc:=1);
  mkclo0(appendUU_272, fn1_appendUU_490, fvc:=0, argc:=3);
  mkclo0(appendUL_282, fn1_appendUL_493, fvc:=0, argc:=3);
  mkclo0(appendLL_292, fn1_appendLL_496, fvc:=0, argc:=3);
  mkclo0(llenUU_302, fn1_llenUU_499, fvc:=0, argc:=2);
  mkclo0(llenUL_317, fn1_llenUL_502, fvc:=0, argc:=2);
  mkclo0(llenLL_332, fn1_llenLL_505, fvc:=0, argc:=2);
  return NULL;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

