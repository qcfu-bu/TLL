[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "cmsort_ch"; relv = N;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "cmsort_ch"),
              [([(PId "xs")],
                (Some (Ch (true,
                         (Act (R, true,
                            (UOpr ("`",
                               (App [(Id ("msort", I)); (Id ("xs", I))]))),
                            (Binder ("_", End))))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "cmsort_worker"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("spwn",
                 (Pi (R, U,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("zs",
                       (Pi (R, L,
                          (App
                             [(Inst ("cmsort_ch", [(SId "t")], I));
                               (Id ("zs", I))]),
                          (Binder ("_", (IO (Id ("unit", I)))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cmsort_worker"),
              [([(PId "spwn")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("spwn", I)), (Int 0))), None)
                           ],
                         None,
                         [([(PId "true")],
                           (Some (Fun (IMeta,
                                    (Binder (None,
                                       [([(PId "zs"); (PId "c")],
                                         (Some (MLet (
                                                  (App
                                                     [(Send (Id ("c", I)));
                                                       (App
                                                          [(Id ("just", I));
                                                            (App
                                                               [(Id ("msort",
                                                                   I));
                                                                 (Id ("zs", I
                                                                    ))
                                                                 ])
                                                            ])
                                                       ]),
                                                  (Binder ((PId "c"),
                                                     (Close (Id ("c", I)))))
                                                  ))))
                                         ]
                                       )),
                                    []))));
                           ([(PId "false")],
                            (Some (Fun (IMeta,
                                     (Binder (None,
                                        [([(PId "nil"); (PId "c")],
                                          (Some (MLet (
                                                   (App
                                                      [(Send (Id ("c", I)));
                                                        (App
                                                           [(Id ("just", I));
                                                             (Id ("nil", I))])
                                                        ]),
                                                   (Binder ((PId "c"),
                                                      (Close (Id ("c", I)))))
                                                   ))));
                                          ([(PBOpr ("::", (PId "z"),
                                               (PId "nil")));
                                             (PId "c")],
                                           (Some (MLet (
                                                    (App
                                                       [(Send (Id ("c", I)));
                                                         (App
                                                            [(Id ("just", I));
                                                              (BOpr ("::",
                                                                 (Id ("z", I
                                                                    )),
                                                                 (Id ("nil",
                                                                    I))
                                                                 ))
                                                              ])
                                                         ]),
                                                    (Binder ((PId "c"),
                                                       (Close (Id ("c", I)))
                                                       ))
                                                    ))));
                                          ([(PId "zs"); (PId "c")],
                                           (Some (Match (
                                                    [(R,
                                                      (App
                                                         [(Id ("split", I));
                                                           (Id ("zs", I))]),
                                                      (Some ("h1", IMeta)));
                                                      (N, (Id ("refl", I)),
                                                       (Some ("_",
                                                              (BOpr ("=",
                                                                 (Let (R,
                                                                    (
                                                                    Id ("h1",
                                                                    I)),
                                                                    (
                                                                    Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "xs"),
                                                                    (PId "ys")
                                                                    )),
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs", I))
                                                                    ]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys", I))
                                                                    ])]))))),
                                                                 (Let (R,
                                                                    (
                                                                    App
                                                                    [(Id (
                                                                    "split",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]),
                                                                    (
                                                                    Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "xs"),
                                                                    (PId "ys")
                                                                    )),
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs", I))
                                                                    ]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys", I))
                                                                    ])])))))
                                                                 )))))
                                                      ],
                                                    None,
                                                    [([(PBOpr (
                                                          "\226\159\168,\226\159\169",
                                                          (PId "xs0"),
                                                          (PId "ys0")));
                                                        (PId "pf")],
                                                      (Some (MLet (
                                                               (Fork
                                                                  (Fun (
                                                                    (Pi (R,
                                                                    L, IMeta,
                                                                    (Binder (
                                                                    "",
                                                                    (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    ))))))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "c1")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id (
                                                                    "spwn", I
                                                                    )),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ));
                                                                    (Id (
                                                                    "c1", I))
                                                                    ])))])),
                                                                    []))),
                                                               (Binder (
                                                                  (PId "r1"),
                                                                  (MLet (
                                                                    (Fork
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    L, IMeta,
                                                                    (Binder (
                                                                    "",
                                                                    (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    ))))))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "c2")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id (
                                                                    "spwn", I
                                                                    )),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ));
                                                                    (Id (
                                                                    "c2", I))
                                                                    ])))])),
                                                                    []))),
                                                                    (Binder (
                                                                    (PId "r2"),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r1", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId
                                                                    "xs1"),
                                                                    (PId "c1")
                                                                    )),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c1", I))),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r2", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId
                                                                    "ys1"),
                                                                    (PId "c2")
                                                                    )),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c2", I))),
                                                                    (Match (
                                                                    [(R,
                                                                    (Id (
                                                                    "xs1", I
                                                                    )), None);
                                                                    (R,
                                                                    (Id (
                                                                    "ys1", I
                                                                    )), None)
                                                                    ], None,
                                                                    [([(PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "xs1")]));
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "ys1")]))
                                                                    ],
                                                                    (Some (
                                                                    Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (Id (
                                                                    "xs1", I
                                                                    ));
                                                                    (Id (
                                                                    "ys1", I
                                                                    ))])]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ))]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ))])])))
                                                                    )),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "rwl", I
                                                                    ));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U, IMeta,
                                                                    (Binder (
                                                                    "x",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "x")],
                                                                    (Some (
                                                                    UOpr (
                                                                    "`",
                                                                    (Id ("x",
                                                                    I))))))]
                                                                    )), 
                                                                    []));
                                                                    (Id (
                                                                    "pf", I));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]))))),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id ("c",
                                                                    I))),
                                                                    (Return
                                                                    (Id (
                                                                    "tt", I)))
                                                                    ))))))))
                                                                    ))))))))]
                                                                    ))))))))
                                                                    ))))))))
                                                                    ))
                                                                  ))
                                                               ))))
                                                      ]
                                                    ))))
                                          ]
                                        )),
                                     []))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("spwn",
              (Pi (R, U,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("zs",
                    (Pi (R, L,
                       (App
                          [(Inst ("cmsort_ch", [(SId "t")], I));
                            (Id ("zs", I))]),
                       (Binder ("_", (IO (Id ("unit", I)))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [E]};
  Definition {name = "cmsort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("zs",
                 (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))
                 ))
              )),
           (Binder ((Some "cmsort"),
              [([(PId "zs")],
                (Some (MLet (
                         (Fork
                            (Fun (
                               (Pi (R, L, IMeta,
                                  (Binder ("", (IO (Id ("unit", I))))))),
                               (Binder (None,
                                  [([(PId "c")],
                                    (Some (App
                                             [(Id ("cmsort_worker", I));
                                               (Int 4); (Id ("zs", I));
                                               (Id ("c", I))])))
                                    ]
                                  )),
                               []))),
                         (Binder ((PId "c"),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "msg"), (PId "c"))),
                                  (BOpr (";", (Close (Id ("c", I))),
                                     (Return (Id ("msg", I)))))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("zs",
              (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))))
           )))
       ));
    view = [E]};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "string_of_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", String_t)))),
           (Binder ((Some "string_of_list"),
              [([(PId "nil")], (Some (String "nil")));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr ("++",
                          (BOpr ("++",
                             (App [(Id ("string_of_int", I)); (Id ("x", I))]),
                             (String " :: "))),
                          (App [(Id ("string_of_list", I)); (Id ("xs", I))])
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", String_t)))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 2000000)]),
           (Binder ((PId "test"),
              (MLet ((App [(Id ("cmsort", I)); (Id ("test", I))]),
                 (Binder ((PConstr ("just", [(PId "sorted")])),
                    (Let (R,
                       (App [(Id ("list_len", I)); (Id ("sorted", I))]),
                       (Binder ((PId "len"),
                          (Print
                             (App
                                [(Id ("string_of_int", I)); (Id ("len", I))]))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_535› : ∀ (A_536 : Type‹s_535›) -> A_536 -> ?_2[0;0] :=
  fun id_538 : ∀ (A_539 : Type‹s_535›) -> A_539 -> ?_1[0;0]
  | A_541 m_542 => m_542

#[logical]
inductive eq_1‹s_543› (A_544 : Type‹s_543›) (m_545 : A_544):
  A_544 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_545 m_545)

#[program]
def rwl_2‹s_547,r_548› :
  ∀ {A_549 : Type‹s_547›} ->
    ∀ {m_550 : A_549} ->
      ∀ {n_551 : A_549} ->
        ∀ {B_552 : A_549 -> Type‹r_548›} ->
          {(eq_1‹??_3› ?_5[0;0] m_550 n_551)} ->
            ((B_552) m_550) -> ((B_552) n_551)
:=
  fun rwl_556 :
    ∀ {A_557 : Type‹s_547›} ->
      ∀ {m_558 : A_557} ->
        ∀ {n_559 : A_557} ->
          ∀ {B_560 : A_557 -> Type‹r_548›} ->
            {(eq_1‹??_2› ?_4[0;0] m_558 n_559)} ->
              ((B_560) m_558) -> ((B_560) n_559)
  | A_564 m_565 n_566 B_567 refl_1 x_568 => x_568

#[program]
def rwr_3‹s_569,r_570› :
  ∀ {A_571 : Type‹s_569›} ->
    ∀ {m_572 : A_571} ->
      ∀ {n_573 : A_571} ->
        ∀ {B_574 : A_571 -> Type‹r_570›} ->
          {(eq_1‹??_5› ?_7[0;0] m_572 n_573)} ->
            ((B_574) n_573) -> ((B_574) m_572)
:=
  fun rwr_578 :
    ∀ {A_579 : Type‹s_569›} ->
      ∀ {m_580 : A_579} ->
        ∀ {n_581 : A_579} ->
          ∀ {B_582 : A_579 -> Type‹r_570›} ->
            {(eq_1‹??_4› ?_6[0;0] m_580 n_581)} ->
              ((B_582) n_581) -> ((B_582) m_580)
  | A_586 m_587 n_588 B_589 refl_1 x_590 => x_590

#[logical]
def congr_4‹s_591,r_592,t_593› :
  ∀ (A_594 : Type‹s_591›) ->
    ∀ (B_595 : Type‹r_592›) ->
      ∀ (m_596 : A_594) ->
        ∀ (n_597 : A_594) ->
          ∀ (f_598 : forall‹t_593›(__599 : A_594), B_595) ->
            (eq_1‹??_9› ?_12[0;0] m_596 n_597) ->
              (eq_1‹??_10› ?_13[0;0] ((f_598) m_596) ((f_598) n_597))
:=
  fun congr_601 :
    ∀ (A_602 : Type‹s_591›) ->
      ∀ (B_603 : Type‹r_592›) ->
        ∀ (m_604 : A_602) ->
          ∀ (n_605 : A_602) ->
            ∀ (f_606 : forall‹t_593›(__607 : A_602), B_603) ->
              (eq_1‹??_6› ?_8[0;0] m_604 n_605) ->
                (eq_1‹??_7› ?_9[0;0] ((f_606) m_604) ((f_606) n_605))
  | A_609 B_610 m_611 n_612 f_613 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_614 : U} ->
    ∀ {m_615 : A_614} ->
      ∀ (x_616 : (eq_1‹??_15› ?_20[0;0] m_615 m_615)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_616 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_617 :
    ∀ {A_618 : U} ->
      ∀ {m_619 : A_618} ->
        ∀ (x_620 : (eq_1‹??_11› ?_14[0;0] m_619 m_619)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_620 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_621 m_622 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_623,t_624› (A_625 : Type‹s_623›):
  A_625 -> Type‹t_624›
where
| just_2 (m_627 : A_625) : (sing_2‹??_18,??_19› ?_24[0;0] m_627)

#[logical]
def ssing_6‹s_628› :
  ∀ (A_629 : Type‹s_628›) -> A_629 -> Type‹s_628›
:=
  fun ssing_631 : ∀ (A_632 : Type‹s_628›) -> A_632 -> Type‹s_628›
  | A_634 m_635 => (sing_2‹s_628,s_628› A_634 m_635)

#[program]
def sing_elim_7‹s_636,t_637› :
  ∀ {A_638 : Type‹s_636›} ->
    ∀ {x_639 : A_638} -> (sing_2‹s_636,t_637› ?_26[0;0] x_639) -> A_638
:=
  fun sing_elim_641 :
    ∀ {A_642 : Type‹s_636›} ->
      ∀ {x_643 : A_642} ->
        (sing_2‹s_636,t_637› ?_25[0;0] x_643) -> A_642
  | A_645 x_646 (just_2 x_647) => x_647

#[logical]
def sing_uniq_8‹s_648,t_649› :
  ∀ (A_650 : Type‹s_648›) ->
    ∀ (x0_651 : A_650) ->
      ∀ (x_652 : (sing_2‹s_648,t_649› ?_33[0;0] x0_651)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_651
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_652))
:=
  fun sing_uniq_653 :
    ∀ (A_654 : Type‹s_648›) ->
      ∀ (x0_655 : A_654) ->
        ∀ (x_656 : (sing_2‹s_648,t_649› ?_27[0;0] x0_655)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_655
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_656))
  | A_657 x0_658 (just_2 _659) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_660 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_660 tt_3)
:=
  fun unit_eta_661 :
    ∀ (x_662 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_662 tt_3)
  | x_663 =>
    match x_663 in
      ∀ (x0_664 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_664 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_666 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_670 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _673 _674 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_677 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _680 _681 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_684 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _687 _688 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_689 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_692 : nat_5 -> nat_5 -> bool_4
  | zero_6 _695 => true_4
  | _696 zero_6 => false_5
  | (succ_7 x_697) (succ_7 y_698) => ((lte_692) x_697 y_698)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_701 : nat_5 -> nat_5 -> bool_4
  | x_704 y_705 => ((lte_14) (succ_7‹› x_704) y_705)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_707 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_709) => x_709

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_712 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_715 => y_715
  | (succ_7 x_716) y_717 => (succ_7‹› ((add_712) x_716 y_717))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_720 : nat_5 -> nat_5 -> nat_5
  | x_723 zero_6 => x_723
  | x_724 (succ_7 y_725) => ((sub_720) ((pred_16) x_724) y_725)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_728 : nat_5 -> nat_5 -> nat_5
  | zero_6 _731 => zero_6
  | (succ_7 x_732) y_733 => ((add_17) y_733 ((mul_728) x_732 y_733))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_736 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_739 y_740 =>
    match ((lt_15) x_739 y_740) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_742 :=
        fun loop_743 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_746 y_747 =>
          match ((sub_18) x_746 ((pred_16) y_747)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_749) => (succ_7‹› ((loop_743) x_749 y_747))
      in ((loop_742) x_739 y_740)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_752 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_755 y_756 => ((sub_18) x_755 ((mul_19) ((div_20) x_755 y_756) y_756))

#[program]
inductive list_6‹s_757,t_758› (A_759 : Type‹s_757›): Type‹t_758›
where
| nil_8 : (list_6‹??_31,??_32› A_759)
| cons_9
    (hd_760 : A_759) (tl_761 : (list_6‹??_33,t_758› A_759))
    : (list_6‹??_34,??_35› A_759)

#[program]
def free_list_22‹s_762,t_763› :
  ∀ {A_764 : Type‹s_762›} ->
    A_764 -> unit_3 -> (list_6‹??_37,t_763› A_764) -> unit_3
:=
  fun free_list_768 :
    ∀ {A_769 : Type‹s_762›} ->
      A_769 -> unit_3 -> (list_6‹??_36,t_763› A_769) -> unit_3
  | A_773 f_774 nil_8 => tt_3
  | A_775 f_776 (cons_9 x_777 xs_778) =>
    let __779 := ((f_776) x_777) in ((free_list_768) ?_52[0;0] f_776 xs_778)

#[program]
inductive exists0_7‹s_780,r_781› (A_782 : Type‹s_780›) (B_783 : 
A_782 -> Type‹r_781›): L where
| ex0_10
    {m_785 : A_782} (n_786 : ((B_783) m_785))
    : (exists0_7‹??_38,??_39› A_782 B_783)

#[program]
inductive exists1_8‹s_787,r_788› (A_789 : Type‹s_787›) (B_790 : 
A_789 -> Type‹r_788›): L where
| ex1_11
    (m_792 : A_789) (n_793 : ((B_790) m_792))
    : (exists1_8‹??_40,??_41› A_789 B_790)

#[logical]
def prod0_23‹s_794,r_795› :
  Type‹s_794› -> Type‹r_795› -> ?_56[0;0]
:=
  fun prod0_798 : Type‹s_794› -> Type‹r_795› -> ?_53[0;0]
  | A_801 B_802 =>
    (exists0_7‹??_42,??_43›
      A_801 fun _803 : ?_54[0;0] -> ?_55[0;0]
            | _805 => B_802)

#[logical]
def prod1_24‹s_806,r_807› :
  Type‹s_806› -> Type‹r_807› -> ?_60[0;0]
:=
  fun prod1_810 : Type‹s_806› -> Type‹r_807› -> ?_57[0;0]
  | A_813 B_814 =>
    (exists1_8‹??_44,??_45›
      A_813 fun _815 : ?_58[0;0] -> ?_59[0;0]
            | _817 => B_814)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_820 : int -> int -> int
  | x_823 y_824 =>
    let loop_825 :=
      fun loop_826 : int -> int -> int
      | acc_829 y_830 =>
        match (__lte__ y_830 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_829
        | false_5 => ((loop_826) (__mul__ x_823 acc_829) (__sub__ y_830 1))
    in ((loop_825) 1 y_824)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_835 : int -> int -> int -> int
  | x_839 y_840 m_841 =>
    let loop_842 :=
      fun loop_843 : int -> int -> int
      | acc_846 y_847 =>
        match (__lte__ y_847 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_846
        | false_5 =>
          ((loop_843)
            (__mod__ (__mul__ x_839 acc_846) m_841) (__sub__ y_847 1))
    in ((loop_842) 1 y_840)

#[program]
def ord_27‹› : char -> int :=
  fun ord_850 : char -> int
  | c_852 => (__ord__ c_852)

#[program]
def chr_28‹› : int -> char :=
  fun chr_854 : int -> char
  | i_856 => (__chr__ i_856)

#[program]
def str_29‹› : char -> string :=
  fun str_858 : char -> string
  | c_860 => (__push__ "" c_860)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_862 : string -> int
  | s_864 => (__size__ s_864)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_866 : int -> string
  | i_868 =>
    let aux_869 :=
      fun aux_870 : int -> string
      | i_872 =>
        match (__lte__ 10 i_872) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_874 := (__mod__ i_872 10) in
          let i_875 := (__div__ i_872 10) in
          (__push__ ((aux_870) i_875)
            ((chr_28) (__add__ r_874 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_872 ((ord_27) 0))))
    in
    match (__lte__ 0 i_868) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_869) i_868)
    | false_5 => (__cat__ "~" ((aux_869) (__neg__ i_868)))

#[program]
def split_32‹t_877› :
  (list_6‹??_71,t_877› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_877› int) (list_6‹??_73,t_877› int))
:=
  fun split_879 :
    (list_6‹??_46,t_877› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_877› int) (list_6‹??_48,t_877› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_881 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_881 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_882 (cons_9 y_883 zs_884)) =>
    match ((split_879) zs_884) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_886 ys_887) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_882 xs_886)
        (cons_9‹??_67,??_68› ?_79[0;0] y_883 ys_887))

#[program]
def merge_33‹t_888› :
  (list_6‹??_87,t_888› int) ->
    (list_6‹??_88,t_888› int) -o (list_6‹??_89,t_888› int)
:=
  fun merge_891 :
    (list_6‹??_76,t_888› int) ->
      (list_6‹??_77,t_888› int) -o (list_6‹??_78,t_888› int)
  | nil_8 ys_894 => ys_894
  | xs_895 nil_8 => xs_895
  | (cons_9 x_896 xs_897) (cons_9 y_898 ys_899) =>
    match (__lte__ x_896 y_898) in ?_84[0;0] -o ?_85[0;0] with
    | true_4 =>
      (cons_9‹??_81,??_82›
        ?_87[0;0] x_896
        ((merge_891) xs_897 (cons_9‹??_79,??_80› ?_86[0;0] y_898 ys_899)))
    | false_5 =>
      (cons_9‹??_85,??_86›
        ?_89[0;0] y_898
        ((merge_891) (cons_9‹??_83,??_84› ?_88[0;0] x_896 xs_897) ys_899))

#[program]
def msort_34‹t_901› :
  (list_6‹??_100,t_901› int) -> (list_6‹??_101,t_901› int)
:=
  fun msort_903 :
    (list_6‹??_90,t_901› int) -> (list_6‹??_91,t_901› int)
  | nil_8 => (nil_8‹??_92,??_93› ?_90[0;0])
  | (cons_9 z_905 nil_8) =>
    (cons_9‹??_96,??_97›
      ?_92[0;0] z_905 (nil_8‹??_94,??_95› ?_91[0;0]))
  | zs_906 =>
    match ((split_32‹??_98›) zs_906) in ?_94[0;0] -o ?_93[0;0] with
    | (ex1_11 xs_908 ys_909) =>
      ((merge_33‹??_99›) ((msort_903) xs_908) ((msort_903) ys_909))

#[logical]
def cmsort_ch_35‹t_910› : (list_6‹??_105,t_910› int) -> L :=
  fun cmsort_ch_912 : (list_6‹??_102,t_910› int) -> L
  | xs_914 =>
    ch⟨⇑(__915 :
           ((ssing_6‹??_104›) ?_95[0;0] ((msort_34‹??_103›) xs_914))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_916› :
  int ->
    ∀ (zs_918 : (list_6‹??_142,t_916› int)) ->
      ((cmsort_ch_35‹t_916›) zs_918) -o IO unit_3
:=
  fun cmsort_worker_920 :
    int ->
      ∀ (zs_922 : (list_6‹??_106,t_916› int)) ->
        ((cmsort_ch_35‹t_916›) zs_922) -o IO unit_3
  | spwn_924 =>
    match (__lte__ spwn_924 0) in ?_96[0;0] -o ?_97[0;0] with
    | true_4 =>
      fun _926 : ?_98[0;0]
      | zs_927 c_928 =>
        let* c_929 :=
          ((send c_928)
            (just_2‹??_108,??_109›
              ?_99[0;0] ((msort_34‹??_107›) zs_927)))
        in close c_929
    | false_5 =>
      fun _930 : ?_100[0;0]
      | nil_8 c_931 =>
        let* c_932 :=
          ((send c_931)
            (just_2‹??_112,??_113›
              ?_102[0;0] (nil_8‹??_110,??_111› ?_101[0;0])))
        in close c_932
      | (cons_9 z_933 nil_8) c_934 =>
        let* c_935 :=
          ((send c_934)
            (just_2‹??_118,??_119›
              ?_105[0;0]
              (cons_9‹??_116,??_117›
                ?_104[0;0] z_933 (nil_8‹??_114,??_115› ?_103[0;0]))))
        in close c_935
      | zs_936 c_937 =>
        match ((split_32‹??_120›) zs_936),
        (refl_1‹??_121› ?_106[0;0] ?_107[0;0]) in
          ∀ (h1_938 : ?_108[0;0]) -o
            {(eq_1‹??_129›
               ?_113[0;0]
               match h1_938 in ?_110[0;0] -o ?_109[0;0] with
               | (ex1_11 xs_941 ys_942) =>
                 ((merge_33‹??_124›)
                   ((msort_34‹??_122›) xs_941)
                   ((msort_34‹??_123›) ys_942))
               match ((split_32‹??_125›) zs_936) in
                 ?_112[0;0] -o ?_111[0;0]
               with
               | (ex1_11 xs_944 ys_945) =>
                 ((merge_33‹??_128›)
                   ((msort_34‹??_126›) xs_944)
                   ((msort_34‹??_127›) ys_945)))} -o
              ?_114[0;0]
        with
        | (ex1_11 xs0_946 ys0_947), pf_948 =>
          let* r1_949 :=
            fork
              fun _950 : ?_115[0;0] -o IO unit_3
              | c1_952 =>
                ((cmsort_worker_920) (__sub__ spwn_924 1) xs0_946 c1_952)
          in
          let* r2_953 :=
            fork
              fun _954 : ?_116[0;0] -o IO unit_3
              | c2_956 =>
                ((cmsort_worker_920) (__sub__ spwn_924 1) ys0_947 c2_956)
          in
          let* _957 := recv r1_949 in
          match _957 in ?_132[0;0] -o ?_131[0;0] with
          | (ex1_11 xs1_959 c1_960) =>
            let* __961 := close c1_960 in
            let* _962 := recv r2_953 in
            match _962 in ?_130[0;0] -o ?_129[0;0] with
            | (ex1_11 ys1_964 c2_965) =>
              let* __966 := close c2_965 in
              match xs1_959, ys1_964 in
                ?_117[0;0] -o ?_118[0;0] -o ?_119[0;0]
              with
              | (just_2 xs1_969), (just_2 ys1_970) =>
                let zs1_971 :=
                  ((just_2‹??_131,??_132›
                     ?_120[0;0] ((merge_33‹??_130›) xs1_969 ys1_970))
                    : ((ssing_6‹??_136›)
                        ?_121[0;0]
                        ((merge_33‹??_135›)
                          ((msort_34‹??_133›) xs0_946)
                          ((msort_34‹??_134›) ys0_947))))
                in
                let zs1_972 :=
                  (((rwl_2‹??_138,??_139›)
                     ?_127[0;0] ?_126[0;0] ?_125[0;0]
                     fun _973 : ?_122[0;0] -> ?_123[0;0]
                     | x_975 => ((ssing_6‹??_137›) ?_124[0;0] x_975)
                     pf_948 zs1_971)
                    : ((ssing_6‹??_141›)
                        ?_128[0;0] ((msort_34‹??_140›) zs_936)))
                in
                let* c_976 := ((send c_937) zs1_972) in
                let* __977 := close c_976 in return tt_3

#[program]
def cmsort_37‹t_978› :
  ∀ (zs_979 : (list_6‹??_147,t_978› int)) ->
    IO ((ssing_6‹??_149›) ?_137[0;0] ((msort_34‹??_148›) zs_979))
:=
  fun cmsort_980 :
    ∀ (zs_981 : (list_6‹??_143,t_978› int)) ->
      IO ((ssing_6‹??_145›) ?_133[0;0] ((msort_34‹??_144›) zs_981))
  | zs_982 =>
    let* c_983 :=
      fork
        fun _984 : ?_134[0;0] -o IO unit_3
        | c_986 => ((cmsort_worker_36‹??_146›) 4 zs_982 c_986)
    in
    let* _987 := recv c_983 in
    match _987 in ?_136[0;0] -o ?_135[0;0] with
    | (ex1_11 msg_989 c_990) => let* __991 := close c_990 in return msg_989

#[program]
def mklist_38‹t_992› : int -> (list_6‹??_155,t_992› int) :=
  fun mklist_994 : int -> (list_6‹??_150,t_992› int)
  | n_996 =>
    match (__lte__ n_996 0) in ?_138[0;0] -o ?_139[0;0] with
    | true_4 => (nil_8‹??_151,??_152› ?_140[0;0])
    | false_5 =>
      (cons_9‹??_153,??_154›
        ?_141[0;0] n_996 ((mklist_994) (__sub__ n_996 1)))

#[program]
def list_len_39‹t_998› : (list_6‹??_157,t_998› int) -> int :=
  fun list_len_1000 : (list_6‹??_156,t_998› int) -> int
  | nil_8 => 0
  | (cons_9 _1002 xs_1003) => (__add__ 1 ((list_len_1000) xs_1003))

#[program]
def string_of_list_40‹t_1004› : (list_6‹??_159,t_1004› int) -> string
:=
  fun string_of_list_1006 : (list_6‹??_158,t_1004› int) -> string
  | nil_8 => "nil"
  | (cons_9 x_1008 xs_1009) =>
    (__cat__ (__cat__ ((string_of_int_31) x_1008) " :: ")
      ((string_of_list_1006) xs_1009))

#[program]
def main_41‹› : IO unit_3 :=
  let test_1010 := ((mklist_38‹L›) 2000000) in
  let* _1011 := ((cmsort_37‹??_160›) test_1010) in
  match _1011 in ?_143[0;0] -o ?_142[0;0] with
  | (just_2 sorted_1013) =>
    let len_1014 := ((list_len_39‹??_161›) sorted_1013) in
    print ((string_of_int_31) len_1014)

-----------------------------------------

#[program]
def id_1‹s_13919› :
  ∀ (A_13920 : Type‹s_13919›) -> A_13920 -> A_13920
:=
  fun id_13922 : ∀ (A_13923 : Type‹s_13919›) -> A_13923 -> A_13923
  | A_13925 m_13926 => m_13926

#[logical]
inductive eq_1‹s_13927› (A_13928 : Type‹s_13927›) (m_13929 : A_13928):
  A_13928 -> U
where
| refl_1 : (eq_1‹s_13927› A_13928 m_13929 m_13929)

#[program]
def rwl_2‹s_13931,r_13932› :
  ∀ {A_13933 : Type‹s_13931›} ->
    ∀ {m_13934 : A_13933} ->
      ∀ {n_13935 : A_13933} ->
        ∀ {B_13936 : A_13933 -> Type‹r_13932›} ->
          {(eq_1‹s_13931› A_13933 m_13934 n_13935)} ->
            ((B_13936) m_13934) -> ((B_13936) n_13935)
:=
  fun rwl_13940 :
    ∀ {A_13941 : Type‹s_13931›} ->
      ∀ {m_13942 : A_13941} ->
        ∀ {n_13943 : A_13941} ->
          ∀ {B_13944 : A_13941 -> Type‹r_13932›} ->
            {(eq_1‹s_13931› A_13941 m_13942 n_13943)} ->
              ((B_13944) m_13942) -> ((B_13944) n_13943)
  | A_13948 m_13949 n_13950 B_13951 refl_1 __13952 => __13952

#[program]
def rwr_3‹s_13953,r_13954› :
  ∀ {A_13955 : Type‹s_13953›} ->
    ∀ {m_13956 : A_13955} ->
      ∀ {n_13957 : A_13955} ->
        ∀ {B_13958 : A_13955 -> Type‹r_13954›} ->
          {(eq_1‹s_13953› A_13955 m_13956 n_13957)} ->
            ((B_13958) n_13957) -> ((B_13958) m_13956)
:=
  fun rwr_13962 :
    ∀ {A_13963 : Type‹s_13953›} ->
      ∀ {m_13964 : A_13963} ->
        ∀ {n_13965 : A_13963} ->
          ∀ {B_13966 : A_13963 -> Type‹r_13954›} ->
            {(eq_1‹s_13953› A_13963 m_13964 n_13965)} ->
              ((B_13966) n_13965) -> ((B_13966) m_13964)
  | A_13970 m_13971 n_13972 B_13973 refl_1 __13974 => __13974

#[logical]
def congr_4‹s_13975,r_13976,t_13977› :
  ∀ (A_13978 : Type‹s_13975›) ->
    ∀ (B_13979 : Type‹r_13976›) ->
      ∀ (m_13980 : A_13978) ->
        ∀ (n_13981 : A_13978) ->
          ∀ (f_13982 : forall‹t_13977›(__13983 : A_13978), B_13979) ->
            (eq_1‹s_13975› A_13978 m_13980 n_13981) ->
              (eq_1‹r_13976›
                B_13979 ((f_13982) m_13980) ((f_13982) n_13981))
:=
  fun congr_13985 :
    ∀ (A_13986 : Type‹s_13975›) ->
      ∀ (B_13987 : Type‹r_13976›) ->
        ∀ (m_13988 : A_13986) ->
          ∀ (n_13989 : A_13986) ->
            ∀ (f_13990 :
              forall‹t_13977›(__13991 : A_13986), B_13987) ->
              (eq_1‹s_13975› A_13986 m_13988 n_13989) ->
                (eq_1‹r_13976›
                  B_13987 ((f_13990) m_13988) ((f_13990) n_13989))
  | A_13993 B_13994 m_13995 n_13996 f_13997 refl_1 =>
    (refl_1‹r_13976› B_13994 ((f_13997) n_13996))

#[logical]
def axiom_K_5‹› :
  ∀ {A_13998 : U} ->
    ∀ {m_13999 : A_13998} ->
      ∀ (x_14000 : (eq_1‹U› A_13998 m_13999 m_13999)) ->
        (eq_1‹U›
          (eq_1‹U› A_13998 m_13999 m_13999) x_14000
          (refl_1‹U› A_13998 m_13999))
:=
  fun axiom_K_14001 :
    ∀ {A_14002 : U} ->
      ∀ {m_14003 : A_14002} ->
        ∀ (x_14004 : (eq_1‹U› A_14002 m_14003 m_14003)) ->
          (eq_1‹U›
            (eq_1‹U› A_14002 m_14003 m_14003) x_14004
            (refl_1‹U› A_14002 m_14003))
  | A_14005 m_14006 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_14005 m_14006 m_14006) (refl_1‹U› A_14005 m_14006))

#[program]
inductive sing_2‹s_14007,t_14008› (A_14009 : Type‹s_14007›):
  A_14009 -> Type‹t_14008›
where
| just_2 (m_14011 : A_14009) : (sing_2‹s_14007,t_14008› A_14009 m_14011)

#[logical]
def ssing_6‹s_14012› :
  ∀ (A_14013 : Type‹s_14012›) -> A_14013 -> Type‹s_14012›
:=
  fun ssing_14015 :
    ∀ (A_14016 : Type‹s_14012›) -> A_14016 -> Type‹s_14012›
  | A_14018 m_14019 => (sing_2‹s_14012,s_14012› A_14018 m_14019)

#[program]
def sing_elim_7‹s_14020,t_14021› :
  ∀ {A_14022 : Type‹s_14020›} ->
    ∀ {x_14023 : A_14022} ->
      (sing_2‹s_14020,t_14021› A_14022 x_14023) -> A_14022
:=
  fun sing_elim_14025 :
    ∀ {A_14026 : Type‹s_14020›} ->
      ∀ {x_14027 : A_14026} ->
        (sing_2‹s_14020,t_14021› A_14026 x_14027) -> A_14026
  | A_14029 x_14030 (just_2 m_14031) => m_14031

#[logical]
def sing_uniq_8‹s_14032,t_14033› :
  ∀ (A_14034 : Type‹s_14032›) ->
    ∀ (x0_14035 : A_14034) ->
      ∀ (x_14036 : (sing_2‹s_14032,t_14033› A_14034 x0_14035)) ->
        (eq_1‹s_14032›
          A_14034 x0_14035
          ((sing_elim_7‹s_14032,t_14033›) A_14034 x0_14035 x_14036))
:=
  fun sing_uniq_14037 :
    ∀ (A_14038 : Type‹s_14032›) ->
      ∀ (x0_14039 : A_14038) ->
        ∀ (x_14040 : (sing_2‹s_14032,t_14033› A_14038 x0_14039)) ->
          (eq_1‹s_14032›
            A_14038 x0_14039
            ((sing_elim_7‹s_14032,t_14033›) A_14038 x0_14039 x_14040))
  | A_14041 x0_14042 (just_2 m_14043) =>
    (refl_1‹s_14032› A_14041 m_14043)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_14044 : unit_3) -> (eq_1‹U› unit_3 x_14044 tt_3)
:=
  fun unit_eta_14045 :
    ∀ (x_14046 : unit_3) -> (eq_1‹U› unit_3 x_14046 tt_3)
  | x_14047 =>
    match x_14047 in
      ∀ (x0_14048 : unit_3) -o (eq_1‹U› unit_3 x0_14048 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_14050 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_14054 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __14057 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_14060 : bool_4 -> bool_4 -> bool_4
  | true_4 __14063 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_14066 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_14069 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_14072 : nat_5 -> nat_5 -> bool_4
  | zero_6 __14075 => true_4
  | (succ_7 n_14076) zero_6 => false_5
  | (succ_7 n_14077) (succ_7 n_14078) => ((lte_14072) n_14077 n_14078)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_14081 : nat_5 -> nat_5 -> bool_4
  | x_14084 y_14085 => ((lte_14) (succ_7‹› x_14084) y_14085)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_14087 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_14089) => n_14089

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_14092 : nat_5 -> nat_5 -> nat_5
  | zero_6 __14095 => __14095
  | (succ_7 n_14096) __14097 => (succ_7‹› ((add_14092) n_14096 __14097))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_14100 : nat_5 -> nat_5 -> nat_5
  | __14103 zero_6 => __14103
  | __14104 (succ_7 n_14105) => ((sub_14100) ((pred_16) __14104) n_14105)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_14108 : nat_5 -> nat_5 -> nat_5
  | zero_6 __14111 => zero_6
  | (succ_7 n_14112) __14113 =>
    ((add_17) __14113 ((mul_14108) n_14112 __14113))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_14116 : nat_5 -> nat_5 -> nat_5
  | x_14119 y_14120 =>
    match ((lt_15) x_14119 y_14120) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_14122 :=
        fun loop_14123 : nat_5 -> nat_5 -> nat_5
        | x_14126 y_14127 =>
          match ((sub_18) x_14126 ((pred_16) y_14127)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_14129) => (succ_7‹› ((loop_14123) n_14129 y_14127))
      in ((loop_14122) x_14119 y_14120)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_14132 : nat_5 -> nat_5 -> nat_5
  | x_14135 y_14136 =>
    ((sub_18) x_14135 ((mul_19) ((div_20) x_14135 y_14136) y_14136))

#[program]
inductive list_6‹s_14137,t_14138› (A_14139 : Type‹s_14137›):
  Type‹t_14138›
where
| nil_8 : (list_6‹s_14137,t_14138› A_14139)
| cons_9
    (hd_14140 : A_14139) (tl_14141 : (list_6‹s_14137,t_14138› A_14139))
    : (list_6‹s_14137,t_14138› A_14139)

#[program]
def free_list_22‹s_14142,t_14143› :
  ∀ {A_14144 : Type‹s_14142›} ->
    A_14144 -> unit_3 -> (list_6‹s_14142,t_14143› A_14144) -> unit_3
:=
  fun free_list_14148 :
    ∀ {A_14149 : Type‹s_14142›} ->
      A_14149 -> unit_3 -> (list_6‹s_14142,t_14143› A_14149) -> unit_3
  | A_14153 f_14154 nil_8 => tt_3
  | A_14155 f_14156 (cons_9 hd_14157 tl_14158) =>
    let __14159 := ((f_14156) hd_14157) in
    ((free_list_14148) A_14155 f_14156 tl_14158)

#[program]
inductive exists0_7‹s_14160,r_14161› (A_14162 : Type‹s_14160›) (B_14163 : 
A_14162 -> Type‹r_14161›): L where
| ex0_10
    {m_14165 : A_14162} (n_14166 : ((B_14163) m_14165))
    : (exists0_7‹s_14160,r_14161› A_14162 B_14163)

#[program]
inductive exists1_8‹s_14167,r_14168› (A_14169 : Type‹s_14167›) (B_14170 : 
A_14169 -> Type‹r_14168›): L where
| ex1_11
    (m_14172 : A_14169) (n_14173 : ((B_14170) m_14172))
    : (exists1_8‹s_14167,r_14168› A_14169 B_14170)

#[logical]
def prod0_23‹s_14174,r_14175› :
  Type‹s_14174› -> Type‹r_14175› -> L
:=
  fun prod0_14178 : Type‹s_14174› -> Type‹r_14175› -> L
  | A_14181 B_14182 =>
    (exists0_7‹s_14174,r_14175›
      A_14181 fun _14183 : A_14181 -> Type‹r_14175›
              | __14185 => B_14182)

#[logical]
def prod1_24‹s_14186,r_14187› :
  Type‹s_14186› -> Type‹r_14187› -> L
:=
  fun prod1_14190 : Type‹s_14186› -> Type‹r_14187› -> L
  | A_14193 B_14194 =>
    (exists1_8‹s_14186,r_14187›
      A_14193 fun _14195 : A_14193 -> Type‹r_14187›
              | __14197 => B_14194)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_14200 : int -> int -> int
  | x_14203 y_14204 =>
    let loop_14205 :=
      fun loop_14206 : int -> int -> int
      | acc_14209 y_14210 =>
        match (__lte__ y_14210 0) in bool_4 -o int with
        | true_4 => acc_14209
        | false_5 =>
          ((loop_14206) (__mul__ x_14203 acc_14209) (__sub__ y_14210 1))
    in ((loop_14205) 1 y_14204)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_14215 : int -> int -> int -> int
  | x_14219 y_14220 m_14221 =>
    let loop_14222 :=
      fun loop_14223 : int -> int -> int
      | acc_14226 y_14227 =>
        match (__lte__ y_14227 0) in bool_4 -o int with
        | true_4 => acc_14226
        | false_5 =>
          ((loop_14223)
            (__mod__ (__mul__ x_14219 acc_14226) m_14221) (__sub__ y_14227 1))
    in ((loop_14222) 1 y_14220)

#[program]
def ord_27‹› : char -> int :=
  fun ord_14230 : char -> int
  | c_14232 => (__ord__ c_14232)

#[program]
def chr_28‹› : int -> char :=
  fun chr_14234 : int -> char
  | i_14236 => (__chr__ i_14236)

#[program]
def str_29‹› : char -> string :=
  fun str_14238 : char -> string
  | c_14240 => (__push__ "" c_14240)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_14242 : string -> int
  | s_14244 => (__size__ s_14244)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_14246 : int -> string
  | i_14248 =>
    let aux_14249 :=
      fun aux_14250 : int -> string
      | i_14252 =>
        match (__lte__ 10 i_14252) in bool_4 -o string with
        | true_4 =>
          let r_14254 := (__mod__ i_14252 10) in
          let i_14255 := (__div__ i_14252 10) in
          (__push__ ((aux_14250) i_14255)
            ((chr_28) (__add__ r_14254 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_14252 ((ord_27) 0))))
    in
    match (__lte__ 0 i_14248) in bool_4 -o string with
    | true_4 => ((aux_14249) i_14248)
    | false_5 => (__cat__ "~" ((aux_14249) (__neg__ i_14248)))

#[program]
def split_32‹t_14257› :
  (list_6‹U,t_14257› int) ->
    ((prod1_24‹t_14257,t_14257›)
      (list_6‹U,t_14257› int) (list_6‹U,t_14257› int))
:=
  fun split_14259 :
    (list_6‹U,t_14257› int) ->
      ((prod1_24‹t_14257,t_14257›)
        (list_6‹U,t_14257› int) (list_6‹U,t_14257› int))
  | nil_8 =>
    (ex1_11‹t_14257,t_14257›
      (list_6‹U,t_14257› int)
      fun _14261 : (list_6‹U,t_14257› int) -> Type‹t_14257›
      | __14263 => (list_6‹U,t_14257› int) (nil_8‹U,t_14257› int)
      (nil_8‹U,t_14257› int))
  | (cons_9 hd_14264 nil_8) =>
    (ex1_11‹t_14257,t_14257›
      (list_6‹U,t_14257› int)
      fun _14265 : (list_6‹U,t_14257› int) -> Type‹t_14257›
      | __14267 => (list_6‹U,t_14257› int)
      (cons_9‹U,t_14257› int hd_14264 (nil_8‹U,t_14257› int))
      (nil_8‹U,t_14257› int))
  | (cons_9 hd_14268 (cons_9 hd_14269 tl_14270)) =>
    match ((split_14259) tl_14270) in
      ((prod1_24‹t_14257,t_14257›)
        (list_6‹U,t_14257› int) (list_6‹U,t_14257› int)) -o
        ((prod1_24‹t_14257,t_14257›)
          (list_6‹U,t_14257› int) (list_6‹U,t_14257› int))
    with
    | (ex1_11 m_14272 n_14273) =>
      (ex1_11‹t_14257,t_14257›
        (list_6‹U,t_14257› int)
        fun _14274 : (list_6‹U,t_14257› int) -> Type‹t_14257›
        | __14276 => (list_6‹U,t_14257› int)
        (cons_9‹U,t_14257› int hd_14268 m_14272)
        (cons_9‹U,t_14257› int hd_14269 n_14273))

#[program]
def merge_33‹t_14277› :
  (list_6‹U,t_14277› int) ->
    (list_6‹U,t_14277› int) -o (list_6‹U,t_14277› int)
:=
  fun merge_14280 :
    (list_6‹U,t_14277› int) ->
      (list_6‹U,t_14277› int) -o (list_6‹U,t_14277› int)
  | nil_8 __14283 => __14283
  | (cons_9 hd_14284 tl_14285) nil_8 =>
    (cons_9‹U,t_14277› int hd_14284 tl_14285)
  | (cons_9 hd_14286 tl_14287) (cons_9 hd_14288 tl_14289) =>
    match (__lte__ hd_14286 hd_14288) in
      bool_4 -o (list_6‹U,t_14277› int)
    with
    | true_4 =>
      (cons_9‹U,t_14277›
        int hd_14286
        ((merge_14280)
          tl_14287 (cons_9‹U,t_14277› int hd_14288 tl_14289)))
    | false_5 =>
      (cons_9‹U,t_14277›
        int hd_14288
        ((merge_14280)
          (cons_9‹U,t_14277› int hd_14286 tl_14287) tl_14289))

#[program]
def msort_34‹t_14291› :
  (list_6‹U,t_14291› int) -> (list_6‹U,t_14291› int)
:=
  fun msort_14293 :
    (list_6‹U,t_14291› int) -> (list_6‹U,t_14291› int)
  | nil_8 => (nil_8‹U,t_14291› int)
  | (cons_9 hd_14295 nil_8) =>
    (cons_9‹U,t_14291› int hd_14295 (nil_8‹U,t_14291› int))
  | (cons_9 hd_14296 (cons_9 hd_14297 tl_14298)) =>
    match ((split_32‹t_14291›)
            (cons_9‹U,t_14291›
              int hd_14296 (cons_9‹U,t_14291› int hd_14297 tl_14298))) in
      ((prod1_24‹t_14291,t_14291›)
        (list_6‹U,t_14291› int) (list_6‹U,t_14291› int)) -o
        (list_6‹U,t_14291› int)
    with
    | (ex1_11 m_14300 n_14301) =>
      ((merge_33‹t_14291›)
        ((msort_14293) m_14300) ((msort_14293) n_14301))

#[logical]
def cmsort_ch_35‹t_14302› : (list_6‹U,t_14302› int) -> L :=
  fun cmsort_ch_14304 : (list_6‹U,t_14302› int) -> L
  | xs_14306 =>
    ch⟨⇑(__14307 :
           ((ssing_6‹t_14302›)
             (list_6‹U,t_14302› int) ((msort_34‹t_14302›) xs_14306))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_14308› :
  int ->
    ∀ (zs_14310 : (list_6‹U,t_14308› int)) ->
      ((cmsort_ch_35‹t_14308›) zs_14310) -o IO unit_3
:=
  fun cmsort_worker_14312 :
    int ->
      ∀ (zs_14314 : (list_6‹U,t_14308› int)) ->
        ((cmsort_ch_35‹t_14308›) zs_14314) -o IO unit_3
  | spwn_14316 =>
    match (__lte__ spwn_14316 0) in
      bool_4 -o
        ∀ (zs_14318 : (list_6‹U,t_14308› int)) ->
          ((cmsort_ch_35‹t_14308›) zs_14318) -o IO unit_3
    with
    | true_4 =>
      fun _14320 :
        ∀ (zs_14321 : (list_6‹U,t_14308› int)) ->
          ((cmsort_ch_35‹t_14308›) zs_14321) -o IO unit_3
      | zs_14323 __14324 =>
        let* c_14325 :=
          ((send __14324)
            (just_2‹t_14308,t_14308›
              (list_6‹U,t_14308› int) ((msort_34‹t_14308›) zs_14323)))
        in close c_14325
    | false_5 =>
      fun _14326 :
        ∀ (zs_14327 : (list_6‹U,t_14308› int)) ->
          ((cmsort_ch_35‹t_14308›) zs_14327) -o IO unit_3
      | nil_8 __14329 =>
        let* c_14330 :=
          ((send __14329)
            (just_2‹t_14308,t_14308›
              (list_6‹U,t_14308› int) (nil_8‹U,t_14308› int)))
        in close c_14330
      | (cons_9 hd_14331 nil_8) __14332 =>
        let* c_14333 :=
          ((send __14332)
            (just_2‹t_14308,t_14308›
              (list_6‹U,t_14308› int)
              (cons_9‹U,t_14308› int hd_14331 (nil_8‹U,t_14308› int))))
        in close c_14333
      | (cons_9 hd_14334 (cons_9 hd_14335 tl_14336)) __14337 =>
        match ((split_32‹t_14308›)
                (cons_9‹U,t_14308›
                  int hd_14334 (cons_9‹U,t_14308› int hd_14335 tl_14336))),
        (refl_1‹t_14308›
          (list_6‹U,t_14308› int)
          match ((split_32‹t_14308›)
                  (cons_9‹U,t_14308›
                    int hd_14334
                    (cons_9‹U,t_14308› int hd_14335 tl_14336))) in
            ((prod1_24‹t_14308,t_14308›)
              (list_6‹U,t_14308› int) (list_6‹U,t_14308› int)) -o
              (list_6‹U,t_14308› int)
          with
          | (ex1_11 m_14339 n_14340) =>
            ((merge_33‹t_14308›)
              ((msort_34‹t_14308›) m_14339)
              ((msort_34‹t_14308›) n_14340))) in
          ∀ (h1_14341 :
            ((prod1_24‹t_14308,t_14308›)
              (list_6‹U,t_14308› int) (list_6‹U,t_14308› int))) -o
            {(eq_1‹t_14308›
               (list_6‹U,t_14308› int)
               match h1_14341 in
                 ((prod1_24‹t_14308,t_14308›)
                   (list_6‹U,t_14308› int) (list_6‹U,t_14308› int)) -o
                   (list_6‹U,t_14308› int)
               with
               | (ex1_11 m_14344 n_14345) =>
                 ((merge_33‹t_14308›)
                   ((msort_34‹t_14308›) m_14344)
                   ((msort_34‹t_14308›) n_14345))
               match ((split_32‹t_14308›)
                       (cons_9‹U,t_14308›
                         int hd_14334
                         (cons_9‹U,t_14308› int hd_14335 tl_14336))) in
                 ((prod1_24‹t_14308,t_14308›)
                   (list_6‹U,t_14308› int) (list_6‹U,t_14308› int)) -o
                   (list_6‹U,t_14308› int)
               with
               | (ex1_11 m_14347 n_14348) =>
                 ((merge_33‹t_14308›)
                   ((msort_34‹t_14308›) m_14347)
                   ((msort_34‹t_14308›) n_14348)))} -o
              IO unit_3
        with
        | (ex1_11 m_14349 n_14350), __14351 =>
          let* r1_14352 :=
            fork
              fun _14353 : ((cmsort_ch_35‹t_14308›) m_14349) -o IO unit_3
              | _14355 =>
                ((cmsort_worker_14312) (__sub__ spwn_14316 1) m_14349 _14355)
          in
          let* r2_14356 :=
            fork
              fun _14357 : ((cmsort_ch_35‹t_14308›) n_14350) -o IO unit_3
              | _14359 =>
                ((cmsort_worker_14312) (__sub__ spwn_14316 1) n_14350 _14359)
          in
          let* _14360 := recv r1_14352 in
          match _14360 in
            (exists1_8‹t_14308,L›
              ((ssing_6‹t_14308›)
                (list_6‹U,t_14308› int) ((msort_34‹t_14308›) m_14349))
              fun _14362 :
                ((ssing_6‹t_14308›)
                  (list_6‹U,t_14308› int)
                  ((msort_34‹t_14308›) m_14349)) -> L
              | __14364 => hc⟨•⟩) -o IO unit_3
          with
          | (ex1_11 m_14365 n_14366) =>
            let* __14367 := close n_14366 in
            let* _14368 := recv r2_14356 in
            match _14368 in
              (exists1_8‹t_14308,L›
                ((ssing_6‹t_14308›)
                  (list_6‹U,t_14308› int)
                  ((msort_34‹t_14308›) n_14350))
                fun _14370 :
                  ((ssing_6‹t_14308›)
                    (list_6‹U,t_14308› int)
                    ((msort_34‹t_14308›) n_14350)) -> L
                | __14372 => hc⟨•⟩) -o IO unit_3
            with
            | (ex1_11 m_14373 n_14374) =>
              let* __14375 := close n_14374 in
              match m_14365, m_14373 in
                ((ssing_6‹t_14308›)
                  (list_6‹U,t_14308› int)
                  ((msort_34‹t_14308›) m_14349)) -o
                  ((ssing_6‹t_14308›)
                    (list_6‹U,t_14308› int)
                    ((msort_34‹t_14308›) n_14350)) -o IO unit_3
              with
              | (just_2 m_14378), (just_2 m_14379) =>
                let zs1_14380 :=
                  ((just_2‹t_14308,t_14308›
                     (list_6‹U,t_14308› int)
                     ((merge_33‹t_14308›) m_14378 m_14379))
                    : ((ssing_6‹t_14308›)
                        (list_6‹U,t_14308› int)
                        ((merge_33‹t_14308›)
                          ((msort_34‹t_14308›) m_14349)
                          ((msort_34‹t_14308›) n_14350))))
                in
                let zs1_14381 :=
                  (((rwl_2‹t_14308,t_14308›)
                     (list_6‹U,t_14308› int)
                     ((merge_33‹t_14308›)
                       ((msort_34‹t_14308›) m_14349)
                       ((msort_34‹t_14308›) n_14350))
                     match ((split_32‹t_14308›)
                             (cons_9‹U,t_14308›
                               int hd_14334
                               (cons_9‹U,t_14308› int hd_14335 tl_14336))) in
                       ((prod1_24‹t_14308,t_14308›)
                         (list_6‹U,t_14308› int)
                         (list_6‹U,t_14308› int)) -o
                         (list_6‹U,t_14308› int)
                     with
                     | (ex1_11 m_14383 n_14384) =>
                       ((merge_33‹t_14308›)
                         ((msort_34‹t_14308›) m_14383)
                         ((msort_34‹t_14308›) n_14384))
                     fun _14385 :
                       (list_6‹U,t_14308› int) -> Type‹t_14308›
                     | __14387 =>
                       ((ssing_6‹t_14308›)
                         (list_6‹U,t_14308› int) __14387)
                     __14351 zs1_14380)
                    : ((ssing_6‹t_14308›)
                        (list_6‹U,t_14308› int)
                        ((msort_34‹t_14308›)
                          (cons_9‹U,t_14308›
                            int hd_14334
                            (cons_9‹U,t_14308› int hd_14335 tl_14336)))))
                in
                let* c_14388 := ((send __14337) zs1_14381) in
                let* __14389 := close c_14388 in return tt_3

#[program]
def cmsort_37‹t_14390› :
  ∀ (zs_14391 : (list_6‹U,t_14390› int)) ->
    IO ((ssing_6‹t_14390›)
         (list_6‹U,t_14390› int) ((msort_34‹t_14390›) zs_14391))
:=
  fun cmsort_14392 :
    ∀ (zs_14393 : (list_6‹U,t_14390› int)) ->
      IO ((ssing_6‹t_14390›)
           (list_6‹U,t_14390› int) ((msort_34‹t_14390›) zs_14393))
  | zs_14394 =>
    let* c_14395 :=
      fork
        fun _14396 : ((cmsort_ch_35‹t_14390›) zs_14394) -o IO unit_3
        | _14398 => ((cmsort_worker_36‹t_14390›) 4 zs_14394 _14398)
    in
    let* _14399 := recv c_14395 in
    match _14399 in
      (exists1_8‹t_14390,L›
        ((ssing_6‹t_14390›)
          (list_6‹U,t_14390› int) ((msort_34‹t_14390›) zs_14394))
        fun _14401 :
          ((ssing_6‹t_14390›)
            (list_6‹U,t_14390› int) ((msort_34‹t_14390›) zs_14394)) ->
            L
        | __14403 => hc⟨•⟩) -o
        IO ((ssing_6‹t_14390›)
             (list_6‹U,t_14390› int) ((msort_34‹t_14390›) zs_14394))
    with
    | (ex1_11 m_14404 n_14405) =>
      let* __14406 := close n_14405 in return m_14404

#[program]
def mklist_38‹t_14407› : int -> (list_6‹U,t_14407› int) :=
  fun mklist_14409 : int -> (list_6‹U,t_14407› int)
  | n_14411 =>
    match (__lte__ n_14411 0) in bool_4 -o (list_6‹U,t_14407› int) with
    | true_4 => (nil_8‹U,t_14407› int)
    | false_5 =>
      (cons_9‹U,t_14407›
        int n_14411 ((mklist_14409) (__sub__ n_14411 1)))

#[program]
def list_len_39‹t_14413› : (list_6‹U,t_14413› int) -> int :=
  fun list_len_14415 : (list_6‹U,t_14413› int) -> int
  | nil_8 => 0
  | (cons_9 hd_14417 tl_14418) => (__add__ 1 ((list_len_14415) tl_14418))

#[program]
def string_of_list_40‹t_14419› : (list_6‹U,t_14419› int) -> string :=
  fun string_of_list_14421 : (list_6‹U,t_14419› int) -> string
  | nil_8 => "nil"
  | (cons_9 hd_14423 tl_14424) =>
    (__cat__ (__cat__ ((string_of_int_31) hd_14423) " :: ")
      ((string_of_list_14421) tl_14424))

#[program]
def main_41‹› : IO unit_3 :=
  let test_14425 := ((mklist_38‹L›) 2000000) in
  let* _14426 := ((cmsort_37‹L›) test_14425) in
  match _14426 in
    ((ssing_6‹L›) (list_6‹U,L› int) ((msort_34‹L›) test_14425)) -o
      IO unit_3
  with
  | (just_2 m_14428) =>
    let len_14429 := ((list_len_39‹L›) m_14428) in
    print ((string_of_int_31) len_14429)

-----------------------------------------

#[program]
def idU_43 := fun id_25812 (A_25813) -> (m_25814) ->
                m_25814

#[program]
def idL_42 := fun id_25815 (A_25816) -> (m_25817) ->
                m_25817

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_25818 {A_25819} -> {m_25820} -> {n_25821} -> {B_25822} ->
  {__25823} -> (__25824) ->
    match {NULL} with
    | reflU_13  => __25824
    end

#[program]
def rwlUL_46 :=
  fun rwl_25825 {A_25826} -> {m_25827} -> {n_25828} -> {B_25829} ->
  {__25830} -> (__25831) ->
    match {NULL} with
    | reflU_13  => __25831
    end

#[program]
def rwlLU_45 :=
  fun rwl_25832 {A_25833} -> {m_25834} -> {n_25835} -> {B_25836} ->
  {__25837} -> (__25838) ->
    match {NULL} with
    | reflL_12  => __25838
    end

#[program]
def rwlLL_44 :=
  fun rwl_25839 {A_25840} -> {m_25841} -> {n_25842} -> {B_25843} ->
  {__25844} -> (__25845) ->
    match {NULL} with
    | reflL_12  => __25845
    end

#[program]
def rwrUU_51 :=
  fun rwr_25846 {A_25847} -> {m_25848} -> {n_25849} -> {B_25850} ->
  {__25851} -> (__25852) ->
    match {NULL} with
    | reflU_13  => __25852
    end

#[program]
def rwrUL_50 :=
  fun rwr_25853 {A_25854} -> {m_25855} -> {n_25856} -> {B_25857} ->
  {__25858} -> (__25859) ->
    match {NULL} with
    | reflU_13  => __25859
    end

#[program]
def rwrLU_49 :=
  fun rwr_25860 {A_25861} -> {m_25862} -> {n_25863} -> {B_25864} ->
  {__25865} -> (__25866) ->
    match {NULL} with
    | reflL_12  => __25866
    end

#[program]
def rwrLL_48 :=
  fun rwr_25867 {A_25868} -> {m_25869} -> {n_25870} -> {B_25871} ->
  {__25872} -> (__25873) ->
    match {NULL} with
    | reflL_12  => __25873
    end

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_25874 {A_25875} -> {x_25876} -> (__25877) ->
    match __25877 with
    | justUU_17 m_25878 => m_25878
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_25879 {A_25880} -> {x_25881} -> (__25882) ->
    match __25882 with
    | justUL_16 m_25883 => m_25883
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_25884 {A_25885} -> {x_25886} -> (__25887) ->
    match __25887 with
    
    end

#[program]
def sing_elimLL_62 :=
  fun sing_elim_25888 {A_25889} -> {x_25890} -> (__25891) ->
    match __25891 with
    | justLL_14 m_25892 => m_25892
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_25893 (__25894) ->
    match __25894 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_25895 (__25896) -> (__25897) ->
    match __25896 with
    | true_4  =>
      match __25897 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_25898 (__25899) -> (__25900) ->
    match __25899 with
    | true_4  => true_4
    | false_5  =>
      match __25900 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_25901 (__25902) -> (__25903) -o
    match __25902 with
    | true_4  =>
      match __25903 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __25903 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_25904 (__25905) -> (__25906) ->
    match __25905 with
    | zero_6  => true_4
    | succ_7 n_25907 =>
      match __25906 with
      | zero_6  => false_5 | succ_7 n_25908 => ((lte_25904) n_25907 n_25908)
      end
    end

#[program]
def lt_15 :=
  fun lt_25909 (x_25910) -> (y_25911) ->
    ((lte_14) (succ_7 x_25910) y_25911)

#[program]
def pred_16 :=
  fun pred_25912 (__25913) ->
    match __25913 with
    | zero_6  => zero_6 | succ_7 n_25914 => n_25914
    end

#[program]
def add_17 :=
  fun add_25915 (__25916) -> (__25917) ->
    match __25916 with
    | zero_6  => __25917
    | succ_7 n_25918 => (succ_7 ((add_25915) n_25918 __25917))
    end

#[program]
def sub_18 :=
  fun sub_25919 (__25920) -> (__25921) ->
    match __25921 with
    | zero_6  => __25920
    | succ_7 n_25922 => ((sub_25919) ((pred_16) __25920) n_25922)
    end

#[program]
def mul_19 :=
  fun mul_25923 (__25924) -> (__25925) ->
    match __25924 with
    | zero_6  => zero_6
    | succ_7 n_25926 => ((add_17) __25925 ((mul_25923) n_25926 __25925))
    end

#[program]
def div_20 :=
  fun div_25927 (x_25928) -> (y_25929) ->
    match ((lt_15) x_25928 y_25929) with
    | true_4  => zero_6
    | false_5  =>
      let loop_25930 :=
        fun loop_25931 (x_25932) -> (y_25933) ->
          match ((sub_18) x_25932 ((pred_16) y_25933)) with
          | zero_6  => zero_6
          | succ_7 n_25934 => (succ_7 ((loop_25931) n_25934 y_25933))
          end
      in ((loop_25930) x_25928 y_25929)
    end

#[program]
def rem_21 :=
  fun rem_25935 (x_25936) -> (y_25937) ->
    ((sub_18) x_25936 ((mul_19) ((div_20) x_25936 y_25937) y_25937))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_25938 {A_25939} -> (f_25940) -> (__25941) ->
    match __25941 with
    | nilUU_24  => tt_3
    | consUU_25 hd_25942 tl_25943 =>
      let __25944 := ((f_25940) hd_25942) in
      ((free_list_25938) NULL f_25940 tl_25943)
    end

#[program]
def free_listUL_72 :=
  fun free_list_25945 {A_25946} -> (f_25947) -> (__25948) ->
    match __25948 with
    | nilUL_22  => tt_3
    | consUL_23 hd_25949 tl_25950 =>
      let __25951 := ((f_25947) hd_25949) in
      ((free_list_25945) NULL f_25947 tl_25950)
    end

#[program]
def free_listLL_70 :=
  fun free_list_25952 {A_25953} -> (f_25954) -> (__25955) ->
    match __25955 with
    | nilLL_18  => tt_3
    | consLL_19 hd_25956 tl_25957 =>
      let __25958 := ((f_25954) hd_25956) in
      ((free_list_25952) NULL f_25954 tl_25957)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_25959 (x_25960) -> (y_25961) ->
    let loop_25962 :=
      fun loop_25963 (acc_25964) -> (y_25965) ->
        match (__lte__ y_25965 0) with
        | true_4  => acc_25964
        | false_5  =>
          ((loop_25963) (__mul__ x_25960 acc_25964) (__sub__ y_25965 1))
        end
    in ((loop_25962) 1 y_25961)

#[program]
def powm_26 :=
  fun powm_25966 (x_25967) -> (y_25968) -> (m_25969) ->
    let loop_25970 :=
      fun loop_25971 (acc_25972) -> (y_25973) ->
        match (__lte__ y_25973 0) with
        | true_4  => acc_25972
        | false_5  =>
          ((loop_25971)
            (__mod__ (__mul__ x_25967 acc_25972) m_25969) (__sub__ y_25973 1))
        end
    in ((loop_25970) 1 y_25968)

#[program]
def ord_27 := fun ord_25974 (c_25975) ->
                (__ord__ c_25975)

#[program]
def chr_28 := fun chr_25976 (i_25977) ->
                (__chr__ i_25977)

#[program]
def str_29 := fun str_25978 (c_25979) ->
                (__push__ "" c_25979)

#[program]
def strlen_30 := fun strlen_25980 (s_25981) ->
                   (__size__ s_25981)

#[program]
def string_of_int_31 :=
  fun string_of_int_25982 (i_25983) ->
    let aux_25984 :=
      fun aux_25985 (i_25986) ->
        match (__lte__ 10 i_25986) with
        | true_4  =>
          let r_25987 := (__mod__ i_25986 10) in
          let i_25988 := (__div__ i_25986 10) in
          (__push__ ((aux_25985) i_25988)
            ((chr_28) (__add__ r_25987 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_25986 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_25983) with
    | true_4  => ((aux_25984) i_25983)
    | false_5  => (__cat__ "~" ((aux_25984) (__neg__ i_25983)))
    end

#[program]
def splitU_83 :=
  fun split_25989 (__25990) ->
    match __25990 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_25991 tl_25992 =>
      match tl_25992 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_25991 nilUU_24) nilUU_24)
      | consUU_25 hd_25993 tl_25994 =>
        match ((split_25989) tl_25994) with
        | ex1UU_33 m_25995 n_25996 =>
          (ex1UU_33
            (consUU_25 hd_25991 m_25995) (consUU_25 hd_25993 n_25996))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_25997 (__25998) ->
    match __25998 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_25999 tl_26000 =>
      match tl_26000 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_25999 nilUL_22) nilUL_22)
      | consUL_23 hd_26001 tl_26002 =>
        match ((split_25997) tl_26002) with
        | ex1LL_30 m_26003 n_26004 =>
          (ex1LL_30
            (consUL_23 hd_25999 m_26003) (consUL_23 hd_26001 n_26004))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_26005 (__26006) -> (__26007) -o
    match __26006 with
    | nilUU_24  => __26007
    | consUU_25 hd_26008 tl_26009 =>
      match __26007 with
      | nilUU_24  => (consUU_25 hd_26008 tl_26009)
      | consUU_25 hd_26010 tl_26011 =>
        match (__lte__ hd_26008 hd_26010) with
        | true_4  =>
          (consUU_25
            hd_26008 ((merge_26005) tl_26009 (consUU_25 hd_26010 tl_26011)))
        | false_5  =>
          (consUU_25
            hd_26010 ((merge_26005) (consUU_25 hd_26008 tl_26009) tl_26011))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_26012 (__26013) -> (__26014) -o
    match __26013 with
    | nilUL_22  => __26014
    | consUL_23 hd_26015 tl_26016 =>
      match __26014 with
      | nilUL_22  => (consUL_23 hd_26015 tl_26016)
      | consUL_23 hd_26017 tl_26018 =>
        match (__lte__ hd_26015 hd_26017) with
        | true_4  =>
          (consUL_23
            hd_26015 ((merge_26012) tl_26016 (consUL_23 hd_26017 tl_26018)))
        | false_5  =>
          (consUL_23
            hd_26017 ((merge_26012) (consUL_23 hd_26015 tl_26016) tl_26018))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_26019 (__26020) ->
    match __26020 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_26021 tl_26022 =>
      match tl_26022 with
      | nilUU_24  => (consUU_25 hd_26021 nilUU_24)
      | consUU_25 hd_26023 tl_26024 =>
        match ((splitU_83)
                (consUU_25 hd_26021 (consUU_25 hd_26023 tl_26024))) with
        | ex1UU_33 m_26025 n_26026 =>
          ((mergeU_85) ((msort_26019) m_26025) ((msort_26019) n_26026))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_26027 (__26028) ->
    match __26028 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_26029 tl_26030 =>
      match tl_26030 with
      | nilUL_22  => (consUL_23 hd_26029 nilUL_22)
      | consUL_23 hd_26031 tl_26032 =>
        match ((splitL_82)
                (consUL_23 hd_26029 (consUL_23 hd_26031 tl_26032))) with
        | ex1LL_30 m_26033 n_26034 =>
          ((mergeL_84) ((msort_26027) m_26033) ((msort_26027) n_26034))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_26035 (spwn_26036) ->
    match (__lte__ spwn_26036 0) with
    | true_4  =>
      fun _26037 (zs_26038) -> (__26039) -o
        let* c_26040 :=
          ((send[R,U] __26039) (justUU_17 ((msortU_87) zs_26038)))
        in close[true] c_26040
    | false_5  =>
      fun _26041 (zs_26042) -> (__26043) -o
        match zs_26042 with
        | nilUU_24  =>
          let* c_26044 := ((send[R,U] __26043) (justUU_17 nilUU_24)) in
          close[true] c_26044
        | consUU_25 hd_26045 tl_26046 =>
          match tl_26046 with
          | nilUU_24  =>
            let* c_26047 :=
              ((send[R,U] __26043) (justUU_17 (consUU_25 hd_26045 nilUU_24)))
            in close[true] c_26047
          | consUU_25 hd_26048 tl_26049 =>
            match ((splitU_83)
                    (consUU_25 hd_26045 (consUU_25 hd_26048 tl_26049))) with
            | ex1UU_33 m_26050 n_26051 =>
              let* r1_26052 :=
                fork
                  fun _26053 (_26054) -o
                    ((cmsort_worker_26035)
                      (__sub__ spwn_26036 1) m_26050 _26054)
              in
              let* r2_26055 :=
                fork
                  fun _26056 (_26057) -o
                    ((cmsort_worker_26035)
                      (__sub__ spwn_26036 1) n_26051 _26057)
              in
              let* _26058 := recv[R,U] r1_26052 in
              match _26058 with
              | ex1UL_32 m_26059 n_26060 =>
                let* __26061 := close[false] n_26060 in
                let* _26062 := recv[R,U] r2_26055 in
                match _26062 with
                | ex1UL_32 m_26063 n_26064 =>
                  let* __26065 := close[false] n_26064 in
                  match m_26059 with
                  | justUU_17 m_26066 =>
                    match m_26063 with
                    | justUU_17 m_26067 =>
                      let zs1_26068 :=
                        (justUU_17 ((mergeU_85) m_26066 m_26067))
                      in
                      let zs1_26069 :=
                        ((rwlUU_47) NULL NULL NULL NULL NULL zs1_26068)
                      in
                      let* c_26070 := ((send[R,U] __26043) zs1_26069) in
                      let* __26071 := close[true] c_26070 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_26072 (spwn_26073) ->
    match (__lte__ spwn_26073 0) with
    | true_4  =>
      fun _26074 (zs_26075) -> (__26076) -o
        let* c_26077 :=
          ((send[R,L] __26076) (justLL_14 ((msortL_86) zs_26075)))
        in close[true] c_26077
    | false_5  =>
      fun _26078 (zs_26079) -> (__26080) -o
        match zs_26079 with
        | nilUL_22  =>
          let* c_26081 := ((send[R,L] __26080) (justLL_14 nilUL_22)) in
          close[true] c_26081
        | consUL_23 hd_26082 tl_26083 =>
          match tl_26083 with
          | nilUL_22  =>
            let* c_26084 :=
              ((send[R,L] __26080) (justLL_14 (consUL_23 hd_26082 nilUL_22)))
            in close[true] c_26084
          | consUL_23 hd_26085 tl_26086 =>
            match ((splitL_82)
                    (consUL_23 hd_26082 (consUL_23 hd_26085 tl_26086))) with
            | ex1LL_30 m_26087 n_26088 =>
              let* r1_26089 :=
                fork
                  fun _26090 (_26091) -o
                    ((cmsort_worker_26072)
                      (__sub__ spwn_26073 1) m_26087 _26091)
              in
              let* r2_26092 :=
                fork
                  fun _26093 (_26094) -o
                    ((cmsort_worker_26072)
                      (__sub__ spwn_26073 1) n_26088 _26094)
              in
              let* _26095 := recv[R,L] r1_26089 in
              match _26095 with
              | ex1LL_30 m_26096 n_26097 =>
                let* __26098 := close[false] n_26097 in
                let* _26099 := recv[R,L] r2_26092 in
                match _26099 with
                | ex1LL_30 m_26100 n_26101 =>
                  let* __26102 := close[false] n_26101 in
                  match m_26096 with
                  | justLL_14 m_26103 =>
                    match m_26100 with
                    | justLL_14 m_26104 =>
                      let zs1_26105 :=
                        (justLL_14 ((mergeL_84) m_26103 m_26104))
                      in
                      let zs1_26106 :=
                        ((rwlLL_44) NULL NULL NULL NULL NULL zs1_26105)
                      in
                      let* c_26107 := ((send[R,L] __26080) zs1_26106) in
                      let* __26108 := close[true] c_26107 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_26109 (zs_26110) ->
    let* c_26111 :=
      fork fun _26112 (_26113) -o
             ((cmsort_workerU_91) 4 zs_26110 _26113)
    in
    let* _26114 := recv[R,U] c_26111 in
    match _26114 with
    | ex1UL_32 m_26115 n_26116 =>
      let* __26117 := close[false] n_26116 in return m_26115
    end

#[program]
def cmsortL_92 :=
  fun cmsort_26118 (zs_26119) ->
    let* c_26120 :=
      fork fun _26121 (_26122) -o
             ((cmsort_workerL_90) 4 zs_26119 _26122)
    in
    let* _26123 := recv[R,L] c_26120 in
    match _26123 with
    | ex1LL_30 m_26124 n_26125 =>
      let* __26126 := close[false] n_26125 in return m_26124
    end

#[program]
def mklistU_95 :=
  fun mklist_26127 (n_26128) ->
    match (__lte__ n_26128 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_26128 ((mklist_26127) (__sub__ n_26128 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_26129 (n_26130) ->
    match (__lte__ n_26130 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_26130 ((mklist_26129) (__sub__ n_26130 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_26131 (__26132) ->
    match __26132 with
    | nilUU_24  => 0
    | consUU_25 hd_26133 tl_26134 => (__add__ 1 ((list_len_26131) tl_26134))
    end

#[program]
def list_lenL_96 :=
  fun list_len_26135 (__26136) ->
    match __26136 with
    | nilUL_22  => 0
    | consUL_23 hd_26137 tl_26138 => (__add__ 1 ((list_len_26135) tl_26138))
    end

#[program]
def string_of_listU_99 :=
  fun string_of_list_26139 (__26140) ->
    match __26140 with
    | nilUU_24  => "nil"
    | consUU_25 hd_26141 tl_26142 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26141) " :: ")
        ((string_of_list_26139) tl_26142))
    end

#[program]
def string_of_listL_98 :=
  fun string_of_list_26143 (__26144) ->
    match __26144 with
    | nilUL_22  => "nil"
    | consUL_23 hd_26145 tl_26146 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26145) " :: ")
        ((string_of_list_26143) tl_26146))
    end

#[program]
def main :=
  let test_26147 := ((mklistL_94) 2000000) in
  let* _26148 := ((cmsortL_92) test_26147) in
  match _26148 with
  | justLL_14 m_26149 =>
    let len_26150 := ((list_lenL_96) m_26149) in
    print ((string_of_int_31) len_26150)
  end

-----------------------------------------

#[program]
def idU_43 := fun id_26490 (A_26491) -> (m_26492) ->
                m_26492

#[program]
def idL_42 := fun id_26493 (A_26494) -> (m_26495) ->
                m_26495

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_26496 {A_26497} -> {m_26498} -> {n_26499} -> {B_26500} ->
  {__26501} -> (__26502) ->
    __26502

#[program]
def rwlUL_46 :=
  fun rwl_26503 {A_26504} -> {m_26505} -> {n_26506} -> {B_26507} ->
  {__26508} -> (__26509) ->
    __26509

#[program]
def rwlLU_45 :=
  fun rwl_26510 {A_26511} -> {m_26512} -> {n_26513} -> {B_26514} ->
  {__26515} -> (__26516) ->
    __26516

#[program]
def rwlLL_44 :=
  fun rwl_26517 {A_26518} -> {m_26519} -> {n_26520} -> {B_26521} ->
  {__26522} -> (__26523) ->
    __26523

#[program]
def rwrUU_51 :=
  fun rwr_26524 {A_26525} -> {m_26526} -> {n_26527} -> {B_26528} ->
  {__26529} -> (__26530) ->
    __26530

#[program]
def rwrUL_50 :=
  fun rwr_26531 {A_26532} -> {m_26533} -> {n_26534} -> {B_26535} ->
  {__26536} -> (__26537) ->
    __26537

#[program]
def rwrLU_49 :=
  fun rwr_26538 {A_26539} -> {m_26540} -> {n_26541} -> {B_26542} ->
  {__26543} -> (__26544) ->
    __26544

#[program]
def rwrLL_48 :=
  fun rwr_26545 {A_26546} -> {m_26547} -> {n_26548} -> {B_26549} ->
  {__26550} -> (__26551) ->
    __26551

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_26552 {A_26553} -> {x_26554} -> (__26555) ->
    match __26555 with
    | justUU_17 m_26556 => m_26556
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_26557 {A_26558} -> {x_26559} -> (__26560) ->
    match __26560 with
    | justUL_16 m_26561 => m_26561
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_26562 {A_26563} -> {x_26564} -> (__26565) ->
    !!

#[program]
def sing_elimLL_62 :=
  fun sing_elim_26566 {A_26567} -> {x_26568} -> (__26569) ->
    match __26569 with
    | justLL_14 m_26570 => m_26570
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_26571 (__26572) ->
    match __26572 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_26573 (__26574) -> (__26575) ->
    match __26574 with
    | true_4  =>
      match __26575 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_26576 (__26577) -> (__26578) ->
    match __26577 with
    | true_4  => true_4
    | false_5  =>
      match __26578 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_26579 (__26580) -> (__26581) -o
    match __26580 with
    | true_4  =>
      match __26581 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __26581 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_26582 (__26583) -> (__26584) ->
    match __26583 with
    | zero_6  => true_4
    | succ_7 n_26585 =>
      match __26584 with
      | zero_6  => false_5 | succ_7 n_26586 => ((lte_26582) n_26585 n_26586)
      end
    end

#[program]
def lt_15 :=
  fun lt_26587 (x_26588) -> (y_26589) ->
    ((lte_14) (succ_7 x_26588) y_26589)

#[program]
def pred_16 :=
  fun pred_26590 (__26591) ->
    match __26591 with
    | zero_6  => zero_6 | succ_7 n_26592 => n_26592
    end

#[program]
def add_17 :=
  fun add_26593 (__26594) -> (__26595) ->
    match __26594 with
    | zero_6  => __26595
    | succ_7 n_26596 => (succ_7 ((add_26593) n_26596 __26595))
    end

#[program]
def sub_18 :=
  fun sub_26597 (__26598) -> (__26599) ->
    match __26599 with
    | zero_6  => __26598
    | succ_7 n_26600 => ((sub_26597) ((pred_16) __26598) n_26600)
    end

#[program]
def mul_19 :=
  fun mul_26601 (__26602) -> (__26603) ->
    match __26602 with
    | zero_6  => zero_6
    | succ_7 n_26604 => ((add_17) __26603 ((mul_26601) n_26604 __26603))
    end

#[program]
def div_20 :=
  fun div_26605 (x_26606) -> (y_26607) ->
    match ((lt_15) x_26606 y_26607) with
    | true_4  => zero_6
    | false_5  =>
      let loop_26608 :=
        fun loop_26609 (x_26610) -> (y_26611) ->
          match ((sub_18) x_26610 ((pred_16) y_26611)) with
          | zero_6  => zero_6
          | succ_7 n_26612 => (succ_7 ((loop_26609) n_26612 y_26611))
          end
      in ((loop_26608) x_26606 y_26607)
    end

#[program]
def rem_21 :=
  fun rem_26613 (x_26614) -> (y_26615) ->
    ((sub_18) x_26614 ((mul_19) ((div_20) x_26614 y_26615) y_26615))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_26616 {A_26617} -> (f_26618) -> (__26619) ->
    match __26619 with
    | nilUU_24  => tt_3
    | consUU_25 hd_26620 tl_26621 =>
      let __26622 := ((f_26618) hd_26620) in
      ((free_list_26616) NULL f_26618 tl_26621)
    end

#[program]
def free_listUL_72 :=
  fun free_list_26623 {A_26624} -> (f_26625) -> (__26626) ->
    match __26626 with
    | nilUL_22  => tt_3
    | consUL_23 hd_26627 tl_26628 =>
      let __26629 := ((f_26625) hd_26627) in
      ((free_list_26623) NULL f_26625 tl_26628)
    end

#[program]
def free_listLL_70 :=
  fun free_list_26630 {A_26631} -> (f_26632) -> (__26633) ->
    match __26633 with
    | nilLL_18  => tt_3
    | consLL_19 hd_26634 tl_26635 =>
      let __26636 := ((f_26632) hd_26634) in
      ((free_list_26630) NULL f_26632 tl_26635)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_26637 (x_26638) -> (y_26639) ->
    let loop_26640 :=
      fun loop_26641 (acc_26642) -> (y_26643) ->
        match (__lte__ y_26643 0) with
        | true_4  => acc_26642
        | false_5  =>
          ((loop_26641) (__mul__ x_26638 acc_26642) (__sub__ y_26643 1))
        end
    in ((loop_26640) 1 y_26639)

#[program]
def powm_26 :=
  fun powm_26644 (x_26645) -> (y_26646) -> (m_26647) ->
    let loop_26648 :=
      fun loop_26649 (acc_26650) -> (y_26651) ->
        match (__lte__ y_26651 0) with
        | true_4  => acc_26650
        | false_5  =>
          ((loop_26649)
            (__mod__ (__mul__ x_26645 acc_26650) m_26647) (__sub__ y_26651 1))
        end
    in ((loop_26648) 1 y_26646)

#[program]
def ord_27 := fun ord_26652 (c_26653) ->
                (__ord__ c_26653)

#[program]
def chr_28 := fun chr_26654 (i_26655) ->
                (__chr__ i_26655)

#[program]
def str_29 := fun str_26656 (c_26657) ->
                (__push__ "" c_26657)

#[program]
def strlen_30 := fun strlen_26658 (s_26659) ->
                   (__size__ s_26659)

#[program]
def string_of_int_31 :=
  fun string_of_int_26660 (i_26661) ->
    let aux_26662 :=
      fun aux_26663 (i_26664) ->
        match (__lte__ 10 i_26664) with
        | true_4  =>
          let r_26665 := (__mod__ i_26664 10) in
          let i_26666 := (__div__ i_26664 10) in
          (__push__ ((aux_26663) i_26666)
            ((chr_28) (__add__ r_26665 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_26664 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_26661) with
    | true_4  => ((aux_26662) i_26661)
    | false_5  => (__cat__ "~" ((aux_26662) (__neg__ i_26661)))
    end

#[program]
def splitU_83 :=
  fun split_26667 (__26668) ->
    match __26668 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_26669 tl_26670 =>
      match tl_26670 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_26669 nilUU_24) nilUU_24)
      | consUU_25 hd_26671 tl_26672 =>
        match ((split_26667) tl_26672) with
        | ex1UU_33 m_26673 n_26674 =>
          (ex1UU_33
            (consUU_25 hd_26669 m_26673) (consUU_25 hd_26671 n_26674))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_26675 (__26676) ->
    match __26676 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_26677 tl_26678 =>
      match tl_26678 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_26677 nilUL_22) nilUL_22)
      | consUL_23 hd_26679 tl_26680 =>
        match ((split_26675) tl_26680) with
        | ex1LL_30 m_26681 n_26682 =>
          (ex1LL_30
            (consUL_23 hd_26677 m_26681) (consUL_23 hd_26679 n_26682))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_26683 (__26684) -> (__26685) -o
    match __26684 with
    | nilUU_24  => __26685
    | consUU_25 hd_26686 tl_26687 =>
      match __26685 with
      | nilUU_24  => (consUU_25 hd_26686 tl_26687)
      | consUU_25 hd_26688 tl_26689 =>
        match (__lte__ hd_26686 hd_26688) with
        | true_4  =>
          (consUU_25
            hd_26686 ((merge_26683) tl_26687 (consUU_25 hd_26688 tl_26689)))
        | false_5  =>
          (consUU_25
            hd_26688 ((merge_26683) (consUU_25 hd_26686 tl_26687) tl_26689))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_26690 (__26691) -> (__26692) -o
    match __26691 with
    | nilUL_22  => __26692
    | consUL_23 hd_26693 tl_26694 =>
      match __26692 with
      | nilUL_22  => (consUL_23 hd_26693 tl_26694)
      | consUL_23 hd_26695 tl_26696 =>
        match (__lte__ hd_26693 hd_26695) with
        | true_4  =>
          (consUL_23
            hd_26693 ((merge_26690) tl_26694 (consUL_23 hd_26695 tl_26696)))
        | false_5  =>
          (consUL_23
            hd_26695 ((merge_26690) (consUL_23 hd_26693 tl_26694) tl_26696))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_26697 (__26698) ->
    match __26698 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_26699 tl_26700 =>
      match tl_26700 with
      | nilUU_24  => (consUU_25 hd_26699 nilUU_24)
      | consUU_25 hd_26701 tl_26702 =>
        match ((splitU_83)
                (consUU_25 hd_26699 (consUU_25 hd_26701 tl_26702))) with
        | ex1UU_33 m_26703 n_26704 =>
          ((mergeU_85) ((msort_26697) m_26703) ((msort_26697) n_26704))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_26705 (__26706) ->
    match __26706 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_26707 tl_26708 =>
      match tl_26708 with
      | nilUL_22  => (consUL_23 hd_26707 nilUL_22)
      | consUL_23 hd_26709 tl_26710 =>
        match ((splitL_82)
                (consUL_23 hd_26707 (consUL_23 hd_26709 tl_26710))) with
        | ex1LL_30 m_26711 n_26712 =>
          ((mergeL_84) ((msort_26705) m_26711) ((msort_26705) n_26712))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_26713 (spwn_26714) ->
    match (__lte__ spwn_26714 0) with
    | true_4  =>
      fun _26715 (zs_26716) -> (__26717) -o
        let* c_26718 :=
          ((send[R,U] __26717) (justUU_17 ((msortU_87) zs_26716)))
        in close[true] c_26718
    | false_5  =>
      fun _26719 (zs_26720) -> (__26721) -o
        match zs_26720 with
        | nilUU_24  =>
          let* c_26722 := ((send[R,U] __26721) (justUU_17 nilUU_24)) in
          close[true] c_26722
        | consUU_25 hd_26723 tl_26724 =>
          match tl_26724 with
          | nilUU_24  =>
            let* c_26725 :=
              ((send[R,U] __26721) (justUU_17 (consUU_25 hd_26723 nilUU_24)))
            in close[true] c_26725
          | consUU_25 hd_26726 tl_26727 =>
            match ((splitU_83)
                    (consUU_25 hd_26723 (consUU_25 hd_26726 tl_26727))) with
            | ex1UU_33 m_26728 n_26729 =>
              let* r1_26730 :=
                fork
                  fun _26731 (_26732) -o
                    ((cmsort_worker_26713)
                      (__sub__ spwn_26714 1) m_26728 _26732)
              in
              let* r2_26733 :=
                fork
                  fun _26734 (_26735) -o
                    ((cmsort_worker_26713)
                      (__sub__ spwn_26714 1) n_26729 _26735)
              in
              let* _26736 := recv[R,U] r1_26730 in
              match _26736 with
              | ex1UL_32 m_26737 n_26738 =>
                let* __26739 := close[false] n_26738 in
                let* _26740 := recv[R,U] r2_26733 in
                match _26740 with
                | ex1UL_32 m_26741 n_26742 =>
                  let* __26743 := close[false] n_26742 in
                  match m_26737 with
                  | justUU_17 m_26744 =>
                    match m_26741 with
                    | justUU_17 m_26745 =>
                      let zs1_26746 :=
                        (justUU_17 ((mergeU_85) m_26744 m_26745))
                      in
                      let zs1_26747 :=
                        ((rwlUU_47) NULL NULL NULL NULL NULL zs1_26746)
                      in
                      let* c_26748 := ((send[R,U] __26721) zs1_26747) in
                      let* __26749 := close[true] c_26748 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_26750 (spwn_26751) ->
    match (__lte__ spwn_26751 0) with
    | true_4  =>
      fun _26752 (zs_26753) -> (__26754) -o
        let* c_26755 :=
          ((send[R,L] __26754) (justLL_14 ((msortL_86) zs_26753)))
        in close[true] c_26755
    | false_5  =>
      fun _26756 (zs_26757) -> (__26758) -o
        match zs_26757 with
        | nilUL_22  =>
          let* c_26759 := ((send[R,L] __26758) (justLL_14 nilUL_22)) in
          close[true] c_26759
        | consUL_23 hd_26760 tl_26761 =>
          match tl_26761 with
          | nilUL_22  =>
            let* c_26762 :=
              ((send[R,L] __26758) (justLL_14 (consUL_23 hd_26760 nilUL_22)))
            in close[true] c_26762
          | consUL_23 hd_26763 tl_26764 =>
            match ((splitL_82)
                    (consUL_23 hd_26760 (consUL_23 hd_26763 tl_26764))) with
            | ex1LL_30 m_26765 n_26766 =>
              let* r1_26767 :=
                fork
                  fun _26768 (_26769) -o
                    ((cmsort_worker_26750)
                      (__sub__ spwn_26751 1) m_26765 _26769)
              in
              let* r2_26770 :=
                fork
                  fun _26771 (_26772) -o
                    ((cmsort_worker_26750)
                      (__sub__ spwn_26751 1) n_26766 _26772)
              in
              let* _26773 := recv[R,L] r1_26767 in
              match _26773 with
              | ex1LL_30 m_26774 n_26775 =>
                let* __26776 := close[false] n_26775 in
                let* _26777 := recv[R,L] r2_26770 in
                match _26777 with
                | ex1LL_30 m_26778 n_26779 =>
                  let* __26780 := close[false] n_26779 in
                  match m_26774 with
                  | justLL_14 m_26781 =>
                    match m_26778 with
                    | justLL_14 m_26782 =>
                      let zs1_26783 :=
                        (justLL_14 ((mergeL_84) m_26781 m_26782))
                      in
                      let zs1_26784 :=
                        ((rwlLL_44) NULL NULL NULL NULL NULL zs1_26783)
                      in
                      let* c_26785 := ((send[R,L] __26758) zs1_26784) in
                      let* __26786 := close[true] c_26785 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_26787 (zs_26788) ->
    let* c_26789 :=
      fork fun _26790 (_26791) -o
             ((cmsort_workerU_91) 4 zs_26788 _26791)
    in
    let* _26792 := recv[R,U] c_26789 in
    match _26792 with
    | ex1UL_32 m_26793 n_26794 =>
      let* __26795 := close[false] n_26794 in return m_26793
    end

#[program]
def cmsortL_92 :=
  fun cmsort_26796 (zs_26797) ->
    let* c_26798 :=
      fork fun _26799 (_26800) -o
             ((cmsort_workerL_90) 4 zs_26797 _26800)
    in
    let* _26801 := recv[R,L] c_26798 in
    match _26801 with
    | ex1LL_30 m_26802 n_26803 =>
      let* __26804 := close[false] n_26803 in return m_26802
    end

#[program]
def mklistU_95 :=
  fun mklist_26805 (n_26806) ->
    match (__lte__ n_26806 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_26806 ((mklist_26805) (__sub__ n_26806 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_26807 (n_26808) ->
    match (__lte__ n_26808 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_26808 ((mklist_26807) (__sub__ n_26808 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_26809 (__26810) ->
    match __26810 with
    | nilUU_24  => 0
    | consUU_25 hd_26811 tl_26812 => (__add__ 1 ((list_len_26809) tl_26812))
    end

#[program]
def list_lenL_96 :=
  fun list_len_26813 (__26814) ->
    match __26814 with
    | nilUL_22  => 0
    | consUL_23 hd_26815 tl_26816 => (__add__ 1 ((list_len_26813) tl_26816))
    end

#[program]
def string_of_listU_99 :=
  fun string_of_list_26817 (__26818) ->
    match __26818 with
    | nilUU_24  => "nil"
    | consUU_25 hd_26819 tl_26820 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26819) " :: ")
        ((string_of_list_26817) tl_26820))
    end

#[program]
def string_of_listL_98 :=
  fun string_of_list_26821 (__26822) ->
    match __26822 with
    | nilUL_22  => "nil"
    | consUL_23 hd_26823 tl_26824 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26823) " :: ")
        ((string_of_list_26821) tl_26824))
    end

#[program]
def main :=
  let test_26825 := ((mklistL_94) 2000000) in
  let* _26826 := ((cmsortL_92) test_26825) in
  match _26826 with
  | justLL_14 m_26827 =>
    let len_26828 := ((list_lenL_96) m_26827) in
    print ((string_of_int_31) len_26828)
  end

-----------------------------------------

def idU_43 := fun id_27188 (A_27189) -> (m_27190) -> m_27190

def idL_42 := fun id_27191 (A_27192) -> (m_27193) -> m_27193

def rwlUU_47 :=
  fun rwl_27194 (A_27195) -> (m_27196) -> (n_27197) -> (B_27198) ->
  (__27199) -> (__27200) -> __27200

def rwlUL_46 :=
  fun rwl_27201 (A_27202) -> (m_27203) -> (n_27204) -> (B_27205) ->
  (__27206) -> (__27207) -> __27207

def rwlLU_45 :=
  fun rwl_27208 (A_27209) -> (m_27210) -> (n_27211) -> (B_27212) ->
  (__27213) -> (__27214) -> __27214

def rwlLL_44 :=
  fun rwl_27215 (A_27216) -> (m_27217) -> (n_27218) -> (B_27219) ->
  (__27220) -> (__27221) -> __27221

def rwrUU_51 :=
  fun rwr_27222 (A_27223) -> (m_27224) -> (n_27225) -> (B_27226) ->
  (__27227) -> (__27228) -> __27228

def rwrUL_50 :=
  fun rwr_27229 (A_27230) -> (m_27231) -> (n_27232) -> (B_27233) ->
  (__27234) -> (__27235) -> __27235

def rwrLU_49 :=
  fun rwr_27236 (A_27237) -> (m_27238) -> (n_27239) -> (B_27240) ->
  (__27241) -> (__27242) -> __27242

def rwrLL_48 :=
  fun rwr_27243 (A_27244) -> (m_27245) -> (n_27246) -> (B_27247) ->
  (__27248) -> (__27249) -> __27249

def sing_elimUU_65 :=
  fun sing_elim_27250 (A_27251) -> (x_27252) -> (__27253) -> __27253

def sing_elimUL_64 :=
  fun sing_elim_27254 (A_27255) -> (x_27256) -> (__27257) -> __27257

def sing_elimLU_63 :=
  fun sing_elim_27258 (A_27259) -> (x_27260) -> (__27261) -> !!

def sing_elimLL_62 :=
  fun sing_elim_27262 (A_27263) -> (x_27264) -> (__27265) -> __27265

def not_10 :=
  fun not_27266 (__27267) ->
    match __27267 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_27268 (__27269) -> (__27270) ->
    match __27269 with
    | true_4 =>
      match __27270 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_27271 (__27272) -> (__27273) ->
    match __27272 with
    | true_4 => true_4
    | false_5 =>
      match __27273 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_27274 (__27275) -> (__27276) -o
    match __27275 with
    | true_4 =>
      match __27276 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __27276 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_27277 (__27278) -> (__27279) ->
    match __27278 with
    | zero_6  => true_4
    | succ_7 n_27280 =>
      match __27279 with
      | zero_6  => false_5 | succ_7 n_27281 => ((lte_27277) n_27280 n_27281)
      end
    end

def lt_15 :=
  fun lt_27282 (x_27283) -> (y_27284) -> ((lte_14) (succ_7 x_27283) y_27284)

def pred_16 :=
  fun pred_27285 (__27286) ->
    match __27286 with
    | zero_6  => (zero_6 ) | succ_7 n_27287 => n_27287
    end

def add_17 :=
  fun add_27288 (__27289) -> (__27290) ->
    match __27289 with
    | zero_6  => __27290
    | succ_7 n_27291 => (succ_7 ((add_27288) n_27291 __27290))
    end

def sub_18 :=
  fun sub_27292 (__27293) -> (__27294) ->
    match __27294 with
    | zero_6  => __27293
    | succ_7 n_27295 => ((sub_27292) ((pred_16) __27293) n_27295)
    end

def mul_19 :=
  fun mul_27296 (__27297) -> (__27298) ->
    match __27297 with
    | zero_6  => (zero_6 )
    | succ_7 n_27299 => ((add_17) __27298 ((mul_27296) n_27299 __27298))
    end

def div_20 :=
  fun div_27300 (x_27301) -> (y_27302) ->
    match ((lt_15) x_27301 y_27302) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_27303 :=
        fun loop_27304 (x_27305) -> (y_27306) ->
          match ((sub_18) x_27305 ((pred_16) y_27306)) with
          | zero_6  => (zero_6 )
          | succ_7 n_27307 => (succ_7 ((loop_27304) n_27307 y_27306))
          end
      in ((loop_27303) x_27301 y_27302)
    end

def rem_21 :=
  fun rem_27308 (x_27309) -> (y_27310) ->
    ((sub_18) x_27309 ((mul_19) ((div_20) x_27309 y_27310) y_27310))

def free_listUU_73 :=
  fun free_list_27311 (A_27312) -> (f_27313) -> (__27314) ->
    match __27314 with
    | nilUU_24  => tt_3
    | consUU_25 hd_27315 tl_27316 =>
      let __27317 := ((f_27313) hd_27315) in
      ((free_list_27311) NULL f_27313 tl_27316)
    end

def free_listUL_72 :=
  fun free_list_27318 (A_27319) -> (f_27320) -> (__27321) ->
    match __27321 with
    | nilUL_22  => tt_3
    | consUL_23 hd_27322 tl_27323 =>
      let __27324 := ((f_27320) hd_27322) in
      ((free_list_27318) NULL f_27320 tl_27323)
    end

def free_listLL_70 :=
  fun free_list_27325 (A_27326) -> (f_27327) -> (__27328) ->
    match __27328 with
    | nilLL_18  => tt_3
    | consLL_19 hd_27329 tl_27330 =>
      let __27331 := ((f_27327) hd_27329) in
      ((free_list_27325) NULL f_27327 tl_27330)
    end

def pow_25 :=
  fun pow_27332 (x_27333) -> (y_27334) ->
    let loop_27335 :=
      fun loop_27336 (acc_27337) -> (y_27338) ->
        match (__lte__ y_27338 0) with
        | true_4 => acc_27337
        | false_5 =>
          ((loop_27336) (__mul__ x_27333 acc_27337) (__sub__ y_27338 1))
        end
    in ((loop_27335) 1 y_27334)

def powm_26 :=
  fun powm_27339 (x_27340) -> (y_27341) -> (m_27342) ->
    let loop_27343 :=
      fun loop_27344 (acc_27345) -> (y_27346) ->
        match (__lte__ y_27346 0) with
        | true_4 => acc_27345
        | false_5 =>
          ((loop_27344)
            (__mod__ (__mul__ x_27340 acc_27345) m_27342) (__sub__ y_27346 1))
        end
    in ((loop_27343) 1 y_27341)

def ord_27 := fun ord_27347 (c_27348) -> (__ord__ c_27348)

def chr_28 := fun chr_27349 (i_27350) -> (__chr__ i_27350)

def str_29 := fun str_27351 (c_27352) -> (__push__ "" c_27352)

def strlen_30 := fun strlen_27353 (s_27354) -> (__size__ s_27354)

def string_of_int_31 :=
  fun string_of_int_27355 (i_27356) ->
    let aux_27357 :=
      fun aux_27358 (i_27359) ->
        match (__lte__ 10 i_27359) with
        | true_4 =>
          let r_27360 := (__mod__ i_27359 10) in
          let i_27361 := (__div__ i_27359 10) in
          (__push__ ((aux_27358) i_27361)
            ((chr_28) (__add__ r_27360 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_27359 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_27356) with
    | true_4 => ((aux_27357) i_27356)
    | false_5 => (__cat__ "~" ((aux_27357) (__neg__ i_27356)))
    end

def splitU_83 :=
  fun split_27362 (__27363) ->
    match __27363 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_27364 tl_27365 =>
      match tl_27365 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_27364 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_27366 tl_27367 =>
        match ((split_27362) tl_27367) with
        | ex1UU_33 m_27368 n_27369 =>
          (ex1UU_33
            (consUU_25 hd_27364 m_27368) (consUU_25 hd_27366 n_27369))
        end
      end
    end

def splitL_82 :=
  fun split_27370 (__27371) ->
    match __27371 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_27372 tl_27373 =>
      match tl_27373 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_27372 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_27374 tl_27375 =>
        match ((split_27370) tl_27375) with
        | ex1LL_30 m_27376 n_27377 =>
          (ex1LL_30
            (consUL_23 hd_27372 m_27376) (consUL_23 hd_27374 n_27377))
        end
      end
    end

def mergeU_85 :=
  fun merge_27378 (__27379) -> (__27380) -o
    match __27379 with
    | nilUU_24  => __27380
    | consUU_25 hd_27381 tl_27382 =>
      match __27380 with
      | nilUU_24  => (consUU_25 hd_27381 tl_27382)
      | consUU_25 hd_27383 tl_27384 =>
        match (__lte__ hd_27381 hd_27383) with
        | true_4 =>
          (consUU_25
            hd_27381 ((merge_27378) tl_27382 (consUU_25 hd_27383 tl_27384)))
        | false_5 =>
          (consUU_25
            hd_27383 ((merge_27378) (consUU_25 hd_27381 tl_27382) tl_27384))
        end
      end
    end

def mergeL_84 :=
  fun merge_27385 (__27386) -> (__27387) -o
    match __27386 with
    | nilUL_22  => __27387
    | consUL_23 hd_27388 tl_27389 =>
      match __27387 with
      | nilUL_22  => (consUL_23 hd_27388 tl_27389)
      | consUL_23 hd_27390 tl_27391 =>
        match (__lte__ hd_27388 hd_27390) with
        | true_4 =>
          (consUL_23
            hd_27388 ((merge_27385) tl_27389 (consUL_23 hd_27390 tl_27391)))
        | false_5 =>
          (consUL_23
            hd_27390 ((merge_27385) (consUL_23 hd_27388 tl_27389) tl_27391))
        end
      end
    end

def msortU_87 :=
  fun msort_27392 (__27393) ->
    match __27393 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_27394 tl_27395 =>
      match tl_27395 with
      | nilUU_24  => (consUU_25 hd_27394 (nilUU_24 ))
      | consUU_25 hd_27396 tl_27397 =>
        match ((splitU_83)
                (consUU_25 hd_27394 (consUU_25 hd_27396 tl_27397))) with
        | ex1UU_33 m_27398 n_27399 =>
          ((mergeU_85) ((msort_27392) m_27398) ((msort_27392) n_27399))
        end
      end
    end

def msortL_86 :=
  fun msort_27400 (__27401) ->
    match __27401 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_27402 tl_27403 =>
      match tl_27403 with
      | nilUL_22  => (consUL_23 hd_27402 (nilUL_22 ))
      | consUL_23 hd_27404 tl_27405 =>
        match ((splitL_82)
                (consUL_23 hd_27402 (consUL_23 hd_27404 tl_27405))) with
        | ex1LL_30 m_27406 n_27407 =>
          ((mergeL_84) ((msort_27400) m_27406) ((msort_27400) n_27407))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_27408 (spwn_27409) ->
    match (__lte__ spwn_27409 0) with
    | true_4 =>
      fun _27410 (zs_27411) -> (__27412) -o
        lazy(let c_27413 :=
               force(((lam (x_27414) -> lazy(send(__27412, x_27414)))
                       ((msortU_87) zs_27411)))
             in force(lazy(close[true] c_27413)))
      | false_5 =>
        fun _27415 (zs_27416) -> (__27417) -o
          match zs_27416 with
          | nilUU_24  =>
            lazy(let c_27418 :=
                   force(((lam (x_27419) -> lazy(send(__27417, x_27419)))
                           (nilUU_24 )))
                 in force(lazy(close[true] c_27418)))
          | consUU_25 hd_27420 tl_27421 =>
            match tl_27421 with
            | nilUU_24  =>
              lazy(let c_27422 :=
                     force(((lam (x_27423) -> lazy(send(__27417, x_27423)))
                             (consUU_25 hd_27420 (nilUU_24 ))))
                   in force(lazy(close[true] c_27422)))
            | consUU_25 hd_27424 tl_27425 =>
              match ((splitU_83)
                      (consUU_25 hd_27420 (consUU_25 hd_27424 tl_27425))) with
              | ex1UU_33 m_27426 n_27427 =>
                lazy(let r1_27428 :=
                       force(lazy(fork
                                    fun _27429 (_27430) -o
                                      ((cmsort_worker_27408)
                                        (__sub__ spwn_27409 1) m_27426 _27430)))
                     in
                     let r2_27431 :=
                       force(lazy(fork
                                    fun _27432 (_27433) -o
                                      ((cmsort_worker_27408)
                                        (__sub__ spwn_27409 1) n_27427 _27433)))
                     in
                     let _27434 := force(lazy(recv[U](r1_27428))) in
                     force(match _27434 with
                           | ex1UL_32 m_27435 n_27436 =>
                             lazy(let __27437 :=
                                    force(lazy(close[false] n_27436))
                                  in
                                  let _27438 :=
                                    force(lazy(recv[U](r2_27431)))
                                  in
                                  force(match _27438 with
                                        | ex1UL_32 m_27439 n_27440 =>
                                          lazy(let __27441 :=
                                                 force(lazy(close[false]
                                                              n_27440))
                                               in
                                               force(let zs1_27442 :=
                                                       ((mergeU_85)
                                                         m_27435 m_27439)
                                                     in
                                                     let zs1_27443 :=
                                                       ((rwlUU_47)
                                                         NULL NULL NULL NULL
                                                           NULL zs1_27442)
                                                     in
                                                     lazy(let c_27444 :=
                                                            force(((lam (x_27445) ->
                                                                    lazy(
                                                                    send(__27417, x_27445)))
                                                                    zs1_27443))
                                                          in
                                                          let __27446 :=
                                                            force(lazy(
                                                                  close[true]
                                                                    c_27444))
                                                          in
                                                          force(lazy(tt_3)))))
                                        end))
                           end))
                end
              end
            end
        end

def cmsort_workerL_90 :=
  fun cmsort_worker_27447 (spwn_27448) ->
    match (__lte__ spwn_27448 0) with
    | true_4 =>
      fun _27449 (zs_27450) -> (__27451) -o
        lazy(let c_27452 :=
               force(((lam (x_27453) -> lazy(send(__27451, x_27453)))
                       ((msortL_86) zs_27450)))
             in force(lazy(close[true] c_27452)))
      | false_5 =>
        fun _27454 (zs_27455) -> (__27456) -o
          match zs_27455 with
          | nilUL_22  =>
            lazy(let c_27457 :=
                   force(((lam (x_27458) -> lazy(send(__27456, x_27458)))
                           (nilUL_22 )))
                 in force(lazy(close[true] c_27457)))
          | consUL_23 hd_27459 tl_27460 =>
            match tl_27460 with
            | nilUL_22  =>
              lazy(let c_27461 :=
                     force(((lam (x_27462) -> lazy(send(__27456, x_27462)))
                             (consUL_23 hd_27459 (nilUL_22 ))))
                   in force(lazy(close[true] c_27461)))
            | consUL_23 hd_27463 tl_27464 =>
              match ((splitL_82)
                      (consUL_23 hd_27459 (consUL_23 hd_27463 tl_27464))) with
              | ex1LL_30 m_27465 n_27466 =>
                lazy(let r1_27467 :=
                       force(lazy(fork
                                    fun _27468 (_27469) -o
                                      ((cmsort_worker_27447)
                                        (__sub__ spwn_27448 1) m_27465 _27469)))
                     in
                     let r2_27470 :=
                       force(lazy(fork
                                    fun _27471 (_27472) -o
                                      ((cmsort_worker_27447)
                                        (__sub__ spwn_27448 1) n_27466 _27472)))
                     in
                     let _27473 := force(lazy(recv[L](r1_27467))) in
                     force(match _27473 with
                           | ex1LL_30 m_27474 n_27475 =>
                             lazy(let __27476 :=
                                    force(lazy(close[false] n_27475))
                                  in
                                  let _27477 :=
                                    force(lazy(recv[L](r2_27470)))
                                  in
                                  force(match _27477 with
                                        | ex1LL_30 m_27478 n_27479 =>
                                          lazy(let __27480 :=
                                                 force(lazy(close[false]
                                                              n_27479))
                                               in
                                               force(let zs1_27481 :=
                                                       ((mergeL_84)
                                                         m_27474 m_27478)
                                                     in
                                                     let zs1_27482 :=
                                                       ((rwlLL_44)
                                                         NULL NULL NULL NULL
                                                           NULL zs1_27481)
                                                     in
                                                     lazy(let c_27483 :=
                                                            force(((lam (x_27484) ->
                                                                    lazy(
                                                                    send(__27456, x_27484)))
                                                                    zs1_27482))
                                                          in
                                                          let __27485 :=
                                                            force(lazy(
                                                                  close[true]
                                                                    c_27483))
                                                          in
                                                          force(lazy(tt_3)))))
                                        end))
                           end))
                end
              end
            end
        end

def cmsortU_93 :=
  fun cmsort_27486 (zs_27487) ->
    lazy(let c_27488 :=
           force(lazy(fork
                        fun _27489 (_27490) -o
                          ((cmsort_workerU_91) 4 zs_27487 _27490)))
         in
         let _27491 := force(lazy(recv[U](c_27488))) in
         force(match _27491 with
               | ex1UL_32 m_27492 n_27493 =>
                 lazy(let __27494 := force(lazy(close[false] n_27493)) in
                      force(lazy(m_27492)))
               end))

def cmsortL_92 :=
  fun cmsort_27495 (zs_27496) ->
    lazy(let c_27497 :=
           force(lazy(fork
                        fun _27498 (_27499) -o
                          ((cmsort_workerL_90) 4 zs_27496 _27499)))
         in
         let _27500 := force(lazy(recv[L](c_27497))) in
         force(match _27500 with
               | ex1LL_30 m_27501 n_27502 =>
                 lazy(let __27503 := force(lazy(close[false] n_27502)) in
                      force(lazy(m_27501)))
               end))

def mklistU_95 :=
  fun mklist_27504 (n_27505) ->
    match (__lte__ n_27505 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_27505 ((mklist_27504) (__sub__ n_27505 1)))
    end

def mklistL_94 :=
  fun mklist_27506 (n_27507) ->
    match (__lte__ n_27507 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_27507 ((mklist_27506) (__sub__ n_27507 1)))
    end

def list_lenU_97 :=
  fun list_len_27508 (__27509) ->
    match __27509 with
    | nilUU_24  => 0
    | consUU_25 hd_27510 tl_27511 => (__add__ 1 ((list_len_27508) tl_27511))
    end

def list_lenL_96 :=
  fun list_len_27512 (__27513) ->
    match __27513 with
    | nilUL_22  => 0
    | consUL_23 hd_27514 tl_27515 => (__add__ 1 ((list_len_27512) tl_27515))
    end

def string_of_listU_99 :=
  fun string_of_list_27516 (__27517) ->
    match __27517 with
    | nilUU_24  => "nil"
    | consUU_25 hd_27518 tl_27519 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_27518) " :: ")
        ((string_of_list_27516) tl_27519))
    end

def string_of_listL_98 :=
  fun string_of_list_27520 (__27521) ->
    match __27521 with
    | nilUL_22  => "nil"
    | consUL_23 hd_27522 tl_27523 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_27522) " :: ")
        ((string_of_list_27520) tl_27523))
    end

def main :=
  let test_27524 := ((mklistL_94) 2000000) in
  lazy(let _27525 := force(((cmsortL_92) test_27524)) in
       force(let len_27526 := ((list_lenL_96) _27525) in
             lazy(print ((string_of_int_31) len_27526))))

-----------------------------------------

def idU_43 := lam (A_27953) -> (m_27954) -> m_27954

def idL_42 := lam (A_27955) -> (m_27956) -> m_27956

def rwlUU_47 :=
  lam (A_27957) -> (m_27958) -> (n_27959) -> (B_27960) -> (__27961) ->
  (__27962) -> __27962

def rwlUL_46 :=
  lam (A_27963) -> (m_27964) -> (n_27965) -> (B_27966) -> (__27967) ->
  (__27968) -> __27968

def rwlLU_45 :=
  lam (A_27969) -> (m_27970) -> (n_27971) -> (B_27972) -> (__27973) ->
  (__27974) -> __27974

def rwlLL_44 :=
  lam (A_27975) -> (m_27976) -> (n_27977) -> (B_27978) -> (__27979) ->
  (__27980) -> __27980

def rwrUU_51 :=
  lam (A_27981) -> (m_27982) -> (n_27983) -> (B_27984) -> (__27985) ->
  (__27986) -> __27986

def rwrUL_50 :=
  lam (A_27987) -> (m_27988) -> (n_27989) -> (B_27990) -> (__27991) ->
  (__27992) -> __27992

def rwrLU_49 :=
  lam (A_27993) -> (m_27994) -> (n_27995) -> (B_27996) -> (__27997) ->
  (__27998) -> __27998

def rwrLL_48 :=
  lam (A_27999) -> (m_28000) -> (n_28001) -> (B_28002) -> (__28003) ->
  (__28004) -> __28004

def sing_elimUU_65 := lam (A_28005) -> (x_28006) -> (__28007) -> __28007

def sing_elimUL_64 := lam (A_28008) -> (x_28009) -> (__28010) -> __28010

def sing_elimLU_63 := lam (A_28011) -> (x_28012) -> (__28013) -> !!

def sing_elimLL_62 := lam (A_28014) -> (x_28015) -> (__28016) -> __28016

def not_10 :=
  lam (__28017) ->
    match __28017 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__28018) -> (__28019) ->
    match __28018 with
    | true_4 =>
      match __28019 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__28020) -> (__28021) ->
    match __28020 with
    | true_4 => true_4
    | false_5 =>
      match __28021 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__28022) -> (__28023) -o
    match __28022 with
    | true_4 =>
      match __28023 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __28023 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_28024 (__28025) -> (__28026) ->
    match __28025 with
    | zero_6  => true_4
    | succ_7 n_28027 =>
      match __28026 with
      | zero_6  => false_5 | succ_7 n_28028 => ((lte_28024) n_28027 n_28028)
      end
    end

def lt_15 :=
  lam (x_28029) -> (y_28030) -> ((lte_14) (succ_7 x_28029) y_28030)

def pred_16 :=
  lam (__28031) ->
    match __28031 with
    | zero_6  => (zero_6 ) | succ_7 n_28032 => n_28032
    end

def add_17 :=
  fun add_28033 (__28034) -> (__28035) ->
    match __28034 with
    | zero_6  => __28035
    | succ_7 n_28036 => (succ_7 ((add_28033) n_28036 __28035))
    end

def sub_18 :=
  fun sub_28037 (__28038) -> (__28039) ->
    match __28039 with
    | zero_6  => __28038
    | succ_7 n_28040 => ((sub_28037) ((pred_16) __28038) n_28040)
    end

def mul_19 :=
  fun mul_28041 (__28042) -> (__28043) ->
    match __28042 with
    | zero_6  => (zero_6 )
    | succ_7 n_28044 => ((add_17) __28043 ((mul_28041) n_28044 __28043))
    end

def div_20 :=
  lam (x_28045) -> (y_28046) ->
    match ((lt_15) x_28045 y_28046) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_28047 :=
        fun loop_28048 (x_28049) -> (y_28050) ->
          match ((sub_18) x_28049 ((pred_16) y_28050)) with
          | zero_6  => (zero_6 )
          | succ_7 n_28051 => (succ_7 ((loop_28048) n_28051 y_28050))
          end
      in ((loop_28047) x_28045 y_28046)
    end

def rem_21 :=
  lam (x_28052) -> (y_28053) ->
    ((sub_18) x_28052 ((mul_19) ((div_20) x_28052 y_28053) y_28053))

def free_listUU_73 :=
  fun free_list_28054 (A_28055) -> (f_28056) -> (__28057) ->
    match __28057 with
    | nilUU_24  => tt_3
    | consUU_25 hd_28058 tl_28059 =>
      let __28060 := ((f_28056) hd_28058) in
      ((free_list_28054) NULL f_28056 tl_28059)
    end

def free_listUL_72 :=
  fun free_list_28061 (A_28062) -> (f_28063) -> (__28064) ->
    match __28064 with
    | nilUL_22  => tt_3
    | consUL_23 hd_28065 tl_28066 =>
      let __28067 := ((f_28063) hd_28065) in
      ((free_list_28061) NULL f_28063 tl_28066)
    end

def free_listLL_70 :=
  fun free_list_28068 (A_28069) -> (f_28070) -> (__28071) ->
    match __28071 with
    | nilLL_18  => tt_3
    | consLL_19 hd_28072 tl_28073 =>
      let __28074 := ((f_28070) hd_28072) in
      ((free_list_28068) NULL f_28070 tl_28073)
    end

def pow_25 :=
  lam (x_28075) -> (y_28076) ->
    let loop_28077 :=
      fun loop_28078 (acc_28079) -> (y_28080) ->
        match (__lte__ y_28080 0) with
        | true_4 => acc_28079
        | false_5 =>
          ((loop_28078) (__mul__ x_28075 acc_28079) (__sub__ y_28080 1))
        end
    in ((loop_28077) 1 y_28076)

def powm_26 :=
  lam (x_28081) -> (y_28082) -> (m_28083) ->
    let loop_28084 :=
      fun loop_28085 (acc_28086) -> (y_28087) ->
        match (__lte__ y_28087 0) with
        | true_4 => acc_28086
        | false_5 =>
          ((loop_28085)
            (__mod__ (__mul__ x_28081 acc_28086) m_28083) (__sub__ y_28087 1))
        end
    in ((loop_28084) 1 y_28082)

def ord_27 := lam (c_28088) -> (__ord__ c_28088)

def chr_28 := lam (i_28089) -> (__chr__ i_28089)

def str_29 := lam (c_28090) -> (__push__ "" c_28090)

def strlen_30 := lam (s_28091) -> (__size__ s_28091)

def string_of_int_31 :=
  lam (i_28092) ->
    let aux_28093 :=
      fun aux_28094 (i_28095) ->
        match (__lte__ 10 i_28095) with
        | true_4 =>
          let r_28096 := (__mod__ i_28095 10) in
          let i_28097 := (__div__ i_28095 10) in
          (__push__ ((aux_28094) i_28097)
            ((chr_28) (__add__ r_28096 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_28095 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_28092) with
    | true_4 => ((aux_28093) i_28092)
    | false_5 => (__cat__ "~" ((aux_28093) (__neg__ i_28092)))
    end

def splitU_83 :=
  fun split_28098 (__28099) ->
    match __28099 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_28100 tl_28101 =>
      match tl_28101 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_28100 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_28102 tl_28103 =>
        match ((split_28098) tl_28103) with
        | ex1UU_33 m_28104 n_28105 =>
          (ex1UU_33
            (consUU_25 hd_28100 m_28104) (consUU_25 hd_28102 n_28105))
        end
      end
    end

def splitL_82 :=
  fun split_28106 (__28107) ->
    match __28107 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_28108 tl_28109 =>
      match tl_28109 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_28108 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_28110 tl_28111 =>
        match ((split_28106) tl_28111) with
        | ex1LL_30 m_28112 n_28113 =>
          (ex1LL_30
            (consUL_23 hd_28108 m_28112) (consUL_23 hd_28110 n_28113))
        end
      end
    end

def mergeU_85 :=
  fun merge_28114 (__28115) -> (__28116) -o
    match __28115 with
    | nilUU_24  => __28116
    | consUU_25 hd_28117 tl_28118 =>
      match __28116 with
      | nilUU_24  => (consUU_25 hd_28117 tl_28118)
      | consUU_25 hd_28119 tl_28120 =>
        match (__lte__ hd_28117 hd_28119) with
        | true_4 =>
          (consUU_25
            hd_28117 ((merge_28114) tl_28118 (consUU_25 hd_28119 tl_28120)))
        | false_5 =>
          (consUU_25
            hd_28119 ((merge_28114) (consUU_25 hd_28117 tl_28118) tl_28120))
        end
      end
    end

def mergeL_84 :=
  fun merge_28121 (__28122) -> (__28123) -o
    match __28122 with
    | nilUL_22  => __28123
    | consUL_23 hd_28124 tl_28125 =>
      match __28123 with
      | nilUL_22  => (consUL_23 hd_28124 tl_28125)
      | consUL_23 hd_28126 tl_28127 =>
        match (__lte__ hd_28124 hd_28126) with
        | true_4 =>
          (consUL_23
            hd_28124 ((merge_28121) tl_28125 (consUL_23 hd_28126 tl_28127)))
        | false_5 =>
          (consUL_23
            hd_28126 ((merge_28121) (consUL_23 hd_28124 tl_28125) tl_28127))
        end
      end
    end

def msortU_87 :=
  fun msort_28128 (__28129) ->
    match __28129 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_28130 tl_28131 =>
      match tl_28131 with
      | nilUU_24  => (consUU_25 hd_28130 (nilUU_24 ))
      | consUU_25 hd_28132 tl_28133 =>
        match ((splitU_83)
                (consUU_25 hd_28130 (consUU_25 hd_28132 tl_28133))) with
        | ex1UU_33 m_28134 n_28135 =>
          ((mergeU_85) ((msort_28128) m_28134) ((msort_28128) n_28135))
        end
      end
    end

def msortL_86 :=
  fun msort_28136 (__28137) ->
    match __28137 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_28138 tl_28139 =>
      match tl_28139 with
      | nilUL_22  => (consUL_23 hd_28138 (nilUL_22 ))
      | consUL_23 hd_28140 tl_28141 =>
        match ((splitL_82)
                (consUL_23 hd_28138 (consUL_23 hd_28140 tl_28141))) with
        | ex1LL_30 m_28142 n_28143 =>
          ((mergeL_84) ((msort_28136) m_28142) ((msort_28136) n_28143))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_28144 (spwn_28145) ->
    match (__lte__ spwn_28145 0) with
    | true_4 =>
      lam (zs_28146) -> (__28147) -o
        lazy(let c_28148 := send(__28147, ((msortU_87) zs_28146)) in
             close[true] c_28148)
    | false_5 =>
      lam (zs_28149) -> (__28150) -o
        match zs_28149 with
        | nilUU_24  =>
          lazy(let c_28151 := send(__28150, (nilUU_24 )) in
               close[true] c_28151)
        | consUU_25 hd_28152 tl_28153 =>
          match tl_28153 with
          | nilUU_24  =>
            lazy(let c_28154 :=
                   send(__28150, (consUU_25 hd_28152 (nilUU_24 )))
                 in close[true] c_28154)
          | consUU_25 hd_28155 tl_28156 =>
            match ((splitU_83)
                    (consUU_25 hd_28152 (consUU_25 hd_28155 tl_28156))) with
            | ex1UU_33 m_28157 n_28158 =>
              lazy(let r1_28159 :=
                     fork
                       lam (_28160) -o
                         ((cmsort_worker_28144)
                           (__sub__ spwn_28145 1) m_28157 _28160)
                   in
                   let r2_28161 :=
                     fork
                       lam (_28162) -o
                         ((cmsort_worker_28144)
                           (__sub__ spwn_28145 1) n_28158 _28162)
                   in
                   let _28163 := recv[U](r1_28159) in
                   match _28163 with
                   | ex1UL_32 m_28164 n_28165 =>
                     let __28166 := close[false] n_28165 in
                     let _28167 := recv[U](r2_28161) in
                     match _28167 with
                     | ex1UL_32 m_28168 n_28169 =>
                       let __28170 := close[false] n_28169 in
                       let zs1_28171 := ((mergeU_85) m_28164 m_28168) in
                       let zs1_28172 :=
                         ((rwlUU_47) NULL NULL NULL NULL NULL zs1_28171)
                       in
                       let c_28173 := send(__28150, zs1_28172) in
                       let __28174 := close[true] c_28173 in tt_3
                     end
                   end)
            end
          end
        end
    end

def cmsort_workerL_90 :=
  fun cmsort_worker_28175 (spwn_28176) ->
    match (__lte__ spwn_28176 0) with
    | true_4 =>
      lam (zs_28177) -> (__28178) -o
        lazy(let c_28179 := send(__28178, ((msortL_86) zs_28177)) in
             close[true] c_28179)
    | false_5 =>
      lam (zs_28180) -> (__28181) -o
        match zs_28180 with
        | nilUL_22  =>
          lazy(let c_28182 := send(__28181, (nilUL_22 )) in
               close[true] c_28182)
        | consUL_23 hd_28183 tl_28184 =>
          match tl_28184 with
          | nilUL_22  =>
            lazy(let c_28185 :=
                   send(__28181, (consUL_23 hd_28183 (nilUL_22 )))
                 in close[true] c_28185)
          | consUL_23 hd_28186 tl_28187 =>
            match ((splitL_82)
                    (consUL_23 hd_28183 (consUL_23 hd_28186 tl_28187))) with
            | ex1LL_30 m_28188 n_28189 =>
              lazy(let r1_28190 :=
                     fork
                       lam (_28191) -o
                         ((cmsort_worker_28175)
                           (__sub__ spwn_28176 1) m_28188 _28191)
                   in
                   let r2_28192 :=
                     fork
                       lam (_28193) -o
                         ((cmsort_worker_28175)
                           (__sub__ spwn_28176 1) n_28189 _28193)
                   in
                   let _28194 := recv[L](r1_28190) in
                   match _28194 with
                   | ex1LL_30 m_28195 n_28196 =>
                     let __28197 := close[false] n_28196 in
                     let _28198 := recv[L](r2_28192) in
                     match _28198 with
                     | ex1LL_30 m_28199 n_28200 =>
                       let __28201 := close[false] n_28200 in
                       let zs1_28202 := ((mergeL_84) m_28195 m_28199) in
                       let zs1_28203 :=
                         ((rwlLL_44) NULL NULL NULL NULL NULL zs1_28202)
                       in
                       let c_28204 := send(__28181, zs1_28203) in
                       let __28205 := close[true] c_28204 in tt_3
                     end
                   end)
            end
          end
        end
    end

def cmsortU_93 :=
  lam (zs_28206) ->
    lazy(let c_28207 :=
           fork lam (_28208) -o ((cmsort_workerU_91) 4 zs_28206 _28208)
         in
         let _28209 := recv[U](c_28207) in
         match _28209 with
         | ex1UL_32 m_28210 n_28211 =>
           let __28212 := close[false] n_28211 in m_28210
         end)

def cmsortL_92 :=
  lam (zs_28213) ->
    lazy(let c_28214 :=
           fork lam (_28215) -o ((cmsort_workerL_90) 4 zs_28213 _28215)
         in
         let _28216 := recv[L](c_28214) in
         match _28216 with
         | ex1LL_30 m_28217 n_28218 =>
           let __28219 := close[false] n_28218 in m_28217
         end)

def mklistU_95 :=
  fun mklist_28220 (n_28221) ->
    match (__lte__ n_28221 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_28221 ((mklist_28220) (__sub__ n_28221 1)))
    end

def mklistL_94 :=
  fun mklist_28222 (n_28223) ->
    match (__lte__ n_28223 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_28223 ((mklist_28222) (__sub__ n_28223 1)))
    end

def list_lenU_97 :=
  fun list_len_28224 (__28225) ->
    match __28225 with
    | nilUU_24  => 0
    | consUU_25 hd_28226 tl_28227 => (__add__ 1 ((list_len_28224) tl_28227))
    end

def list_lenL_96 :=
  fun list_len_28228 (__28229) ->
    match __28229 with
    | nilUL_22  => 0
    | consUL_23 hd_28230 tl_28231 => (__add__ 1 ((list_len_28228) tl_28231))
    end

def string_of_listU_99 :=
  fun string_of_list_28232 (__28233) ->
    match __28233 with
    | nilUU_24  => "nil"
    | consUU_25 hd_28234 tl_28235 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_28234) " :: ")
        ((string_of_list_28232) tl_28235))
    end

def string_of_listL_98 :=
  fun string_of_list_28236 (__28237) ->
    match __28237 with
    | nilUL_22  => "nil"
    | consUL_23 hd_28238 tl_28239 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_28238) " :: ")
        ((string_of_list_28236) tl_28239))
    end

def main :=
  let test_28240 := ((mklistL_94) 2000000) in
  lazy(let _28241 := force(((cmsortL_92) test_28240)) in
       let len_28242 := ((list_lenL_96) _28241) in
       print ((string_of_int_31) len_28242))

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := mkconstr(consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := mkconstr(nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := mkconstr(consUL_23, [hd_292, m_303]);
              x_306 := mkconstr(consUL_23, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := mkconstr(consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := mkconstr(nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := mkconstr(nilUL_22, []);
          x_372 := mkconstr(consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_23, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(spwn_385%U) {
  x_387 := lte(spwn_385, 0);
  match(x_387){
    true_4() => {
      x_388 :=
        fn lam_389(zs_390%U, __391%L) {
          x_392 :=
            lazy {
              x_395 := msortU_344(zs_390);
              x_394 := send(__391, x_395);
              c_393 := x_394;
              x_396 := close[true](c_393);
              return x_396;
            };
          return x_392;
        };
      x_386 := x_388;
    }
    false_5() => {
      x_397 :=
        fn lam_398(zs_399%U, __400%L) {
          match[U](zs_399){
            nilUU_24() => {
              x_402 :=
                lazy {
                  x_405 := mkconstr(nilUU_24, []);
                  x_404 := send(__400, x_405);
                  c_403 := x_404;
                  x_406 := close[true](c_403);
                  return x_406;
                };
              x_401 := x_402;
            }
            consUU_25(hd_407, tl_408) => {
              match[U](tl_408){
                nilUU_24() => {
                  x_410 :=
                    lazy {
                      x_413 := mkconstr(nilUU_24, []);
                      x_414 := mkconstr(consUU_25, [hd_407, x_413]);
                      x_412 := send(__400, x_414);
                      c_411 := x_412;
                      x_415 := close[true](c_411);
                      return x_415;
                    };
                  x_409 := x_410;
                }
                consUU_25(hd_416, tl_417) => {
                  x_420 := mkconstr(consUU_25, [hd_416, tl_417]);
                  x_421 := mkconstr(consUU_25, [hd_407, x_420]);
                  x_419 := splitU_264(x_421);
                  match[L](x_419){
                    ex1UU_33(m_422, n_423) => {
                      x_424 :=
                        lazy {
                          x_427 :=
                            fn lam_428(_429%L) {
                              x_431 := sub(spwn_385, 1);
                              x_430 := cmsort_workerU_384(x_431, m_422, _429);
                              return x_430;
                            };
                          x_426 := fork(x_427);
                          r1_425 := x_426;
                          x_434 :=
                            fn lam_435(_436%L) {
                              x_438 := sub(spwn_385, 1);
                              x_437 := cmsort_workerU_384(x_438, n_423, _436);
                              return x_437;
                            };
                          x_433 := fork(x_434);
                          r2_432 := x_433;
                          x_440 := recv[U](r1_425);
                          _439 := x_440;
                          match[L](_439){
                            ex1UL_32(m_442, n_443) => {
                              x_445 := close[false](n_443);
                              __444 := x_445;
                              x_447 := recv[U](r2_432);
                              _446 := x_447;
                              match[L](_446){
                                ex1UL_32(m_449, n_450) => {
                                  x_452 := close[false](n_450);
                                  __451 := x_452;
                                  x_454 := mergeU_308(m_442, m_449);
                                  zs1_453 := x_454;
                                  x_456 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_453);
                                  zs1_455 := x_456;
                                  x_458 := send(__400, zs1_455);
                                  c_457 := x_458;
                                  x_460 := close[true](c_457);
                                  __459 := x_460;
                                  x_448 := tt_3;
                                }
                              }
                              x_441 := x_448;
                            }
                          }
                          return x_441;
                        };
                      x_418 := x_424;
                    }
                  }
                  x_409 := x_418;
                }
              }
              x_401 := x_409;
            }
          }
          return x_401;
        };
      x_386 := x_397;
    }
  }
  return x_386;
}

fn cmsort_workerL_461(spwn_462%U) {
  x_464 := lte(spwn_462, 0);
  match(x_464){
    true_4() => {
      x_465 :=
        fn lam_466(zs_467%U, __468%L) {
          x_469 :=
            lazy {
              x_472 := msortL_364(zs_467);
              x_471 := send(__468, x_472);
              c_470 := x_471;
              x_473 := close[true](c_470);
              return x_473;
            };
          return x_469;
        };
      x_463 := x_465;
    }
    false_5() => {
      x_474 :=
        fn lam_475(zs_476%U, __477%L) {
          match[L](zs_476){
            nilUL_22() => {
              x_479 :=
                lazy {
                  x_482 := mkconstr(nilUL_22, []);
                  x_481 := send(__477, x_482);
                  c_480 := x_481;
                  x_483 := close[true](c_480);
                  return x_483;
                };
              x_478 := x_479;
            }
            consUL_23(hd_484, tl_485) => {
              match[L](tl_485){
                nilUL_22() => {
                  x_487 :=
                    lazy {
                      x_490 := mkconstr(nilUL_22, []);
                      x_491 := mkconstr(consUL_23, [hd_484, x_490]);
                      x_489 := send(__477, x_491);
                      c_488 := x_489;
                      x_492 := close[true](c_488);
                      return x_492;
                    };
                  x_486 := x_487;
                }
                consUL_23(hd_493, tl_494) => {
                  x_497 := mkconstr(consUL_23, [hd_493, tl_494]);
                  x_498 := mkconstr(consUL_23, [hd_484, x_497]);
                  x_496 := splitL_286(x_498);
                  match[L](x_496){
                    ex1LL_30(m_499, n_500) => {
                      x_501 :=
                        lazy {
                          x_504 :=
                            fn lam_505(_506%L) {
                              x_508 := sub(spwn_462, 1);
                              x_507 := cmsort_workerL_461(x_508, m_499, _506);
                              return x_507;
                            };
                          x_503 := fork(x_504);
                          r1_502 := x_503;
                          x_511 :=
                            fn lam_512(_513%L) {
                              x_515 := sub(spwn_462, 1);
                              x_514 := cmsort_workerL_461(x_515, n_500, _513);
                              return x_514;
                            };
                          x_510 := fork(x_511);
                          r2_509 := x_510;
                          x_517 := recv[L](r1_502);
                          _516 := x_517;
                          match[L](_516){
                            ex1LL_30(m_519, n_520) => {
                              x_522 := close[false](n_520);
                              __521 := x_522;
                              x_524 := recv[L](r2_509);
                              _523 := x_524;
                              match[L](_523){
                                ex1LL_30(m_526, n_527) => {
                                  x_529 := close[false](n_527);
                                  __528 := x_529;
                                  x_531 := mergeL_326(m_519, m_526);
                                  zs1_530 := x_531;
                                  x_533 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_530);
                                  zs1_532 := x_533;
                                  x_535 := send(__477, zs1_532);
                                  c_534 := x_535;
                                  x_537 := close[true](c_534);
                                  __536 := x_537;
                                  x_525 := tt_3;
                                }
                              }
                              x_518 := x_525;
                            }
                          }
                          return x_518;
                        };
                      x_495 := x_501;
                    }
                  }
                  x_486 := x_495;
                }
              }
              x_478 := x_486;
            }
          }
          return x_478;
        };
      x_463 := x_474;
    }
  }
  return x_463;
}

fn cmsortU_538(zs_539%U) {
  x_540 :=
    lazy {
      x_543 :=
        fn lam_544(_545%L) {
          x_546 := cmsort_workerU_384(4, zs_539, _545);
          return x_546;
        };
      x_542 := fork(x_543);
      c_541 := x_542;
      x_548 := recv[U](c_541);
      _547 := x_548;
      match[L](_547){
        ex1UL_32(m_550, n_551) => {
          x_553 := close[false](n_551);
          __552 := x_553;
          x_549 := m_550;
        }
      }
      return x_549;
    };
  return x_540;
}

fn cmsortL_554(zs_555%U) {
  x_556 :=
    lazy {
      x_559 :=
        fn lam_560(_561%L) {
          x_562 := cmsort_workerL_461(4, zs_555, _561);
          return x_562;
        };
      x_558 := fork(x_559);
      c_557 := x_558;
      x_564 := recv[L](c_557);
      _563 := x_564;
      match[L](_563){
        ex1LL_30(m_566, n_567) => {
          x_569 := close[false](n_567);
          __568 := x_569;
          x_565 := m_566;
        }
      }
      return x_565;
    };
  return x_556;
}

fn mklistU_570(n_571%U) {
  x_573 := lte(n_571, 0);
  match(x_573){
    true_4() => {
      x_574 := mkconstr(nilUU_24, []);
      x_572 := x_574;
    }
    false_5() => {
      x_576 := sub(n_571, 1);
      x_575 := mklistU_570(x_576);
      x_577 := mkconstr(consUU_25, [n_571, x_575]);
      x_572 := x_577;
    }
  }
  return x_572;
}

fn mklistL_578(n_579%U) {
  x_581 := lte(n_579, 0);
  match(x_581){
    true_4() => {
      x_582 := mkconstr(nilUL_22, []);
      x_580 := x_582;
    }
    false_5() => {
      x_584 := sub(n_579, 1);
      x_583 := mklistL_578(x_584);
      x_585 := mkconstr(consUL_23, [n_579, x_583]);
      x_580 := x_585;
    }
  }
  return x_580;
}

fn list_lenU_586(__587%U) {
  match[U](__587){
    nilUU_24() => {
      x_588 := 0;
    }
    consUU_25(hd_589, tl_590) => {
      x_592 := list_lenU_586(tl_590);
      x_591 := add(1, x_592);
      x_588 := x_591;
    }
  }
  return x_588;
}

fn list_lenL_593(__594%U) {
  match[L](__594){
    nilUL_22() => {
      x_595 := 0;
    }
    consUL_23(hd_596, tl_597) => {
      x_599 := list_lenL_593(tl_597);
      x_598 := add(1, x_599);
      x_595 := x_598;
    }
  }
  return x_595;
}

fn string_of_listU_600(__601%U) {
  match[U](__601){
    nilUU_24() => {
      x_603 := str("nil");
      x_602 := x_603;
    }
    consUU_25(hd_604, tl_605) => {
      x_608 := string_of_int_236(hd_604);
      x_609 := str(" :: ");
      x_607 := cat(x_608, x_609);
      x_610 := string_of_listU_600(tl_605);
      x_606 := cat(x_607, x_610);
      x_602 := x_606;
    }
  }
  return x_602;
}

fn string_of_listL_611(__612%U) {
  match[L](__612){
    nilUL_22() => {
      x_614 := str("nil");
      x_613 := x_614;
    }
    consUL_23(hd_615, tl_616) => {
      x_619 := string_of_int_236(hd_615);
      x_620 := str(" :: ");
      x_618 := cat(x_619, x_620);
      x_621 := string_of_listL_611(tl_616);
      x_617 := cat(x_618, x_621);
      x_613 := x_617;
    }
  }
  return x_613;
}

main := {
  x_623 := mklistL_578(2000000);
  test_622 := x_623;
  x_624 :=
    lazy {
      x_627 := cmsortL_554(test_622);
      x_626 := force(x_627);
      _625 := x_626;
      x_629 := list_lenL_593(_625);
      len_628 := x_629;
      x_631 := string_of_int_236(len_628);
      x_630 := print(x_631);
      return x_630;
    };
  return x_624;
};

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := reconstr(__287, nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := reconstr(tl_293, nilUL_22, []);
          x_296 := reconstr(__287, consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_23, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_23, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
      free(__327);
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := reconstr(__327, consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := reconstr(__365, nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := reconstr(tl_369, nilUL_22, []);
          x_372 := reconstr(__365, consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_23, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(spwn_385%U) {
  x_387 := lte(spwn_385, 0);
  match(x_387){
    true_4() => {
      x_388 :=
        fn lam_389(zs_390%U, __391%L) {
          x_392 :=
            lazy {
              x_395 := msortU_344(zs_390);
              x_394 := send(__391, x_395);
              c_393 := x_394;
              x_396 := close[true](c_393);
              return x_396;
            };
          return x_392;
        };
      x_386 := x_388;
    }
    false_5() => {
      x_397 :=
        fn lam_398(zs_399%U, __400%L) {
          match[U](zs_399){
            nilUU_24() => {
              x_402 :=
                lazy {
                  x_405 := mkconstr(nilUU_24, []);
                  x_404 := send(__400, x_405);
                  c_403 := x_404;
                  x_406 := close[true](c_403);
                  return x_406;
                };
              x_401 := x_402;
            }
            consUU_25(hd_407, tl_408) => {
              match[U](tl_408){
                nilUU_24() => {
                  x_410 :=
                    lazy {
                      x_413 := mkconstr(nilUU_24, []);
                      x_414 := mkconstr(consUU_25, [hd_407, x_413]);
                      x_412 := send(__400, x_414);
                      c_411 := x_412;
                      x_415 := close[true](c_411);
                      return x_415;
                    };
                  x_409 := x_410;
                }
                consUU_25(hd_416, tl_417) => {
                  x_420 := mkconstr(consUU_25, [hd_416, tl_417]);
                  x_421 := mkconstr(consUU_25, [hd_407, x_420]);
                  x_419 := splitU_264(x_421);
                  match[L](x_419){
                    ex1UU_33(m_422, n_423) => {
                      x_424 :=
                        lazy {
                          x_427 :=
                            fn lam_428(_429%L) {
                              x_431 := sub(spwn_385, 1);
                              x_430 := cmsort_workerU_384(x_431, m_422, _429);
                              return x_430;
                            };
                          x_426 := fork(x_427);
                          r1_425 := x_426;
                          x_434 :=
                            fn lam_435(_436%L) {
                              x_438 := sub(spwn_385, 1);
                              x_437 := cmsort_workerU_384(x_438, n_423, _436);
                              return x_437;
                            };
                          x_433 := fork(x_434);
                          r2_432 := x_433;
                          x_440 := recv[U](r1_425);
                          _439 := x_440;
                          match[L](_439){
                            ex1UL_32(m_442, n_443) => {
                              x_445 := close[false](n_443);
                              __444 := x_445;
                              x_447 := recv[U](r2_432);
                              _446 := x_447;
                              match[L](_446){
                                ex1UL_32(m_449, n_450) => {
                                  x_452 := close[false](n_450);
                                  __451 := x_452;
                                  x_454 := mergeU_308(m_442, m_449);
                                  zs1_453 := x_454;
                                  x_456 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_453);
                                  zs1_455 := x_456;
                                  x_458 := send(__400, zs1_455);
                                  c_457 := x_458;
                                  x_460 := close[true](c_457);
                                  __459 := x_460;
                                  x_448 := tt_3;
                                  free(_446);
                                }
                              }
                              x_441 := x_448;
                              free(_439);
                            }
                          }
                          return x_441;
                        };
                      x_418 := x_424;
                      free(x_419);
                    }
                  }
                  x_409 := x_418;
                }
              }
              x_401 := x_409;
            }
          }
          return x_401;
        };
      x_386 := x_397;
    }
  }
  return x_386;
}

fn cmsort_workerL_461(spwn_462%U) {
  x_464 := lte(spwn_462, 0);
  match(x_464){
    true_4() => {
      x_465 :=
        fn lam_466(zs_467%U, __468%L) {
          x_469 :=
            lazy {
              x_472 := msortL_364(zs_467);
              x_471 := send(__468, x_472);
              c_470 := x_471;
              x_473 := close[true](c_470);
              return x_473;
            };
          return x_469;
        };
      x_463 := x_465;
    }
    false_5() => {
      x_474 :=
        fn lam_475(zs_476%U, __477%L) {
          match[L](zs_476){
            nilUL_22() => {
              x_479 :=
                lazy {
                  x_482 := reconstr(zs_476, nilUL_22, []);
                  x_481 := send(__477, x_482);
                  c_480 := x_481;
                  x_483 := close[true](c_480);
                  return x_483;
                };
              x_478 := x_479;
            }
            consUL_23(hd_484, tl_485) => {
              match[L](tl_485){
                nilUL_22() => {
                  x_487 :=
                    lazy {
                      x_490 := reconstr(tl_485, nilUL_22, []);
                      x_491 := reconstr(zs_476, consUL_23, [hd_484, x_490]);
                      x_489 := send(__477, x_491);
                      c_488 := x_489;
                      x_492 := close[true](c_488);
                      return x_492;
                    };
                  x_486 := x_487;
                }
                consUL_23(hd_493, tl_494) => {
                  x_497 := reconstr(tl_485, consUL_23, [hd_493, tl_494]);
                  x_498 := reconstr(zs_476, consUL_23, [hd_484, x_497]);
                  x_496 := splitL_286(x_498);
                  match[L](x_496){
                    ex1LL_30(m_499, n_500) => {
                      x_501 :=
                        lazy {
                          x_504 :=
                            fn lam_505(_506%L) {
                              x_508 := sub(spwn_462, 1);
                              x_507 := cmsort_workerL_461(x_508, m_499, _506);
                              return x_507;
                            };
                          x_503 := fork(x_504);
                          r1_502 := x_503;
                          x_511 :=
                            fn lam_512(_513%L) {
                              x_515 := sub(spwn_462, 1);
                              x_514 := cmsort_workerL_461(x_515, n_500, _513);
                              return x_514;
                            };
                          x_510 := fork(x_511);
                          r2_509 := x_510;
                          x_517 := recv[L](r1_502);
                          _516 := x_517;
                          match[L](_516){
                            ex1LL_30(m_519, n_520) => {
                              x_522 := close[false](n_520);
                              __521 := x_522;
                              x_524 := recv[L](r2_509);
                              _523 := x_524;
                              match[L](_523){
                                ex1LL_30(m_526, n_527) => {
                                  x_529 := close[false](n_527);
                                  __528 := x_529;
                                  x_531 := mergeL_326(m_519, m_526);
                                  zs1_530 := x_531;
                                  x_533 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_530);
                                  zs1_532 := x_533;
                                  x_535 := send(__477, zs1_532);
                                  c_534 := x_535;
                                  x_537 := close[true](c_534);
                                  __536 := x_537;
                                  x_525 := tt_3;
                                  free(_523);
                                }
                              }
                              x_518 := x_525;
                              free(_516);
                            }
                          }
                          return x_518;
                        };
                      x_495 := x_501;
                      free(x_496);
                    }
                  }
                  x_486 := x_495;
                }
              }
              x_478 := x_486;
            }
          }
          return x_478;
        };
      x_463 := x_474;
    }
  }
  return x_463;
}

fn cmsortU_538(zs_539%U) {
  x_540 :=
    lazy {
      x_543 :=
        fn lam_544(_545%L) {
          x_546 := cmsort_workerU_384(4, zs_539, _545);
          return x_546;
        };
      x_542 := fork(x_543);
      c_541 := x_542;
      x_548 := recv[U](c_541);
      _547 := x_548;
      match[L](_547){
        ex1UL_32(m_550, n_551) => {
          x_553 := close[false](n_551);
          __552 := x_553;
          x_549 := m_550;
          free(_547);
        }
      }
      return x_549;
    };
  return x_540;
}

fn cmsortL_554(zs_555%U) {
  x_556 :=
    lazy {
      x_559 :=
        fn lam_560(_561%L) {
          x_562 := cmsort_workerL_461(4, zs_555, _561);
          return x_562;
        };
      x_558 := fork(x_559);
      c_557 := x_558;
      x_564 := recv[L](c_557);
      _563 := x_564;
      match[L](_563){
        ex1LL_30(m_566, n_567) => {
          x_569 := close[false](n_567);
          __568 := x_569;
          x_565 := m_566;
          free(_563);
        }
      }
      return x_565;
    };
  return x_556;
}

fn mklistU_570(n_571%U) {
  x_573 := lte(n_571, 0);
  match(x_573){
    true_4() => {
      x_574 := mkconstr(nilUU_24, []);
      x_572 := x_574;
    }
    false_5() => {
      x_576 := sub(n_571, 1);
      x_575 := mklistU_570(x_576);
      x_577 := mkconstr(consUU_25, [n_571, x_575]);
      x_572 := x_577;
    }
  }
  return x_572;
}

fn mklistL_578(n_579%U) {
  x_581 := lte(n_579, 0);
  match(x_581){
    true_4() => {
      x_582 := mkconstr(nilUL_22, []);
      x_580 := x_582;
    }
    false_5() => {
      x_584 := sub(n_579, 1);
      x_583 := mklistL_578(x_584);
      x_585 := mkconstr(consUL_23, [n_579, x_583]);
      x_580 := x_585;
    }
  }
  return x_580;
}

fn list_lenU_586(__587%U) {
  match[U](__587){
    nilUU_24() => {
      x_588 := 0;
    }
    consUU_25(hd_589, tl_590) => {
      x_592 := list_lenU_586(tl_590);
      x_591 := add(1, x_592);
      x_588 := x_591;
    }
  }
  return x_588;
}

fn list_lenL_593(__594%U) {
  match[L](__594){
    nilUL_22() => {
      x_595 := 0;
      free(__594);
    }
    consUL_23(hd_596, tl_597) => {
      x_599 := list_lenL_593(tl_597);
      x_598 := add(1, x_599);
      x_595 := x_598;
      free(__594);
    }
  }
  return x_595;
}

fn string_of_listU_600(__601%U) {
  match[U](__601){
    nilUU_24() => {
      x_603 := str("nil");
      x_602 := x_603;
    }
    consUU_25(hd_604, tl_605) => {
      x_608 := string_of_int_236(hd_604);
      x_609 := str(" :: ");
      x_607 := cat(x_608, x_609);
      x_610 := string_of_listU_600(tl_605);
      x_606 := cat(x_607, x_610);
      x_602 := x_606;
    }
  }
  return x_602;
}

fn string_of_listL_611(__612%U) {
  match[L](__612){
    nilUL_22() => {
      x_614 := str("nil");
      x_613 := x_614;
      free(__612);
    }
    consUL_23(hd_615, tl_616) => {
      x_619 := string_of_int_236(hd_615);
      x_620 := str(" :: ");
      x_618 := cat(x_619, x_620);
      x_621 := string_of_listL_611(tl_616);
      x_617 := cat(x_618, x_621);
      x_613 := x_617;
      free(__612);
    }
  }
  return x_613;
}

main := {
  x_623 := mklistL_578(2000000);
  test_622 := x_623;
  x_624 :=
    lazy {
      x_627 := cmsortL_554(test_622);
      x_626 := force(x_627);
      _625 := x_626;
      x_629 := list_lenL_593(_625);
      len_628 := x_629;
      x_631 := string_of_int_236(len_628);
      x_630 := print(x_631);
      return x_630;
    };
  return x_624;
};

-----------------------------------------

fn fn0_idU_632(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_633(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_634 := fn0_idU_632(A_2, m_3);
  return x_634;
}

fn fn0_idL_635(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_636(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_637 := fn0_idL_635(A_5, m_6);
  return x_637;
}

fn fn0_rwlUU_638(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_639(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_640 := fn0_rwlUU_638(A_8, m_9, n_10, B_11, __12, __13);
  return x_640;
}

fn fn0_rwlUL_641(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_642(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_643 := fn0_rwlUL_641(A_15, m_16, n_17, B_18, __19, __20);
  return x_643;
}

fn fn0_rwlLU_644(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_645(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_646 := fn0_rwlLU_644(A_22, m_23, n_24, B_25, __26, __27);
  return x_646;
}

fn fn0_rwlLL_647(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_648(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_649 := fn0_rwlLL_647(A_29, m_30, n_31, B_32, __33, __34);
  return x_649;
}

fn fn0_rwrUU_650(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_651(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_652 := fn0_rwrUU_650(A_36, m_37, n_38, B_39, __40, __41);
  return x_652;
}

fn fn0_rwrUL_653(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_654(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_655 := fn0_rwrUL_653(A_43, m_44, n_45, B_46, __47, __48);
  return x_655;
}

fn fn0_rwrLU_656(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_657(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_658 := fn0_rwrLU_656(A_50, m_51, n_52, B_53, __54, __55);
  return x_658;
}

fn fn0_rwrLL_659(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_660(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_661 := fn0_rwrLL_659(A_57, m_58, n_59, B_60, __61, __62);
  return x_661;
}

fn fn0_sing_elimUU_662(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_663(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_664 := fn0_sing_elimUU_662(A_64, x_65, __66);
  return x_664;
}

fn fn0_sing_elimUL_665(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_666(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_667 := fn0_sing_elimUL_665(A_68, x_69, __70);
  return x_667;
}

fn fn0_sing_elimLU_668(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_669(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_670 := fn0_sing_elimLU_668(A_72, x_73, __74);
  return x_670;
}

fn fn0_sing_elimLL_671(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_672(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_673 := fn0_sing_elimLL_671(A_76, x_77, __78);
  return x_673;
}

fn fn0_not_674(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_675(env) {
  __80 := env[1];
  x_676 := fn0_not_674(__80);
  return x_676;
}

fn fn0_and_677(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_678(env) {
  __83 := env[1];
  __84 := env[2];
  x_679 := fn0_and_677(__83, __84);
  return x_679;
}

fn fn0_or_680(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_681(env) {
  __88 := env[1];
  __89 := env[2];
  x_682 := fn0_or_680(__88, __89);
  return x_682;
}

fn fn0_xor_683(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_684(env) {
  __93 := env[1];
  __94 := env[2];
  x_685 := fn0_xor_683(__93, __94);
  return x_685;
}

fn fn0_lte_686(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_686(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_687(env) {
  __99 := env[1];
  __100 := env[2];
  x_688 := fn0_lte_686(__99, __100);
  return x_688;
}

fn fn0_lt_689(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_686(x_110, y_108);
  return x_109;
}

fn fn1_lt_690(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_691 := fn0_lt_689(x_107, y_108);
  return x_691;
}

fn fn0_pred_692(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_693(env) {
  __112 := env[1];
  x_694 := fn0_pred_692(__112);
  return x_694;
}

fn fn0_add_695(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_695(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_696(env) {
  __117 := env[1];
  __118 := env[2];
  x_697 := fn0_add_695(__117, __118);
  return x_697;
}

fn fn0_sub_698(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_692(__124);
      x_128 := fn0_sub_698(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_699(env) {
  __124 := env[1];
  __125 := env[2];
  x_700 := fn0_sub_698(__124, __125);
  return x_700;
}

fn fn0_mul_701(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_701(n_135, __132);
      x_136 := fn0_add_695(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_702(env) {
  __131 := env[1];
  __132 := env[2];
  x_703 := fn0_mul_701(__131, __132);
  return x_703;
}

fn fn0_div_704(x_139, y_140) {
  x_142 := fn0_lt_689(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_706, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_710, loop_144, x_139);
      appc(x_711, x_710, y_140);
      move1(x_156, x_711);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_705(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_713 := fn0_div_704(x_139, y_140);
  return x_713;
}

fn fn0_rem_714(x_158, y_159) {
  x_162 := fn0_div_704(x_158, y_159);
  x_161 := fn0_mul_701(x_162, y_159);
  x_160 := fn0_sub_698(x_158, x_161);
  return x_160;
}

fn fn1_rem_715(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_716 := fn0_rem_714(x_158, y_159);
  return x_716;
}

fn fn0_free_listUU_717(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_719, f_165, hd_168);
      move1(x_171, x_719);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_717(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_718(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_721 := fn0_free_listUU_717(A_164, f_165, __166);
  return x_721;
}

fn fn0_free_listUL_722(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_724, f_175, hd_178);
      move1(x_181, x_724);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_722(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_723(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_726 := fn0_free_listUL_722(A_174, f_175, __176);
  return x_726;
}

fn fn0_free_listLL_727(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_729, f_185, hd_188);
      move1(x_191, x_729);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_727(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_728(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_731 := fn0_free_listLL_727(A_184, f_185, __186);
  return x_731;
}

fn fn0_pow_732(x_194, y_195) {
  mkclo1(x_197, fn1_loop_734, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_738, loop_196, 1);
  appc(x_739, x_738, y_195);
  move1(x_206, x_739);
  return x_206;
}

fn fn1_pow_733(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_741 := fn0_pow_732(x_194, y_195);
  return x_741;
}

fn fn0_powm_742(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_744, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_748, loop_211, 1);
  appc(x_749, x_748, y_209);
  move1(x_222, x_749);
  return x_222;
}

fn fn1_powm_743(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_751 := fn0_powm_742(x_208, y_209, m_210);
  return x_751;
}

fn fn0_ord_752(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_753(env) {
  c_224 := env[1];
  x_754 := fn0_ord_752(c_224);
  return x_754;
}

fn fn0_chr_755(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_756(env) {
  i_227 := env[1];
  x_757 := fn0_chr_755(i_227);
  return x_757;
}

fn fn0_str_758(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_759(env) {
  c_230 := env[1];
  x_760 := fn0_str_758(c_230);
  return x_760;
}

fn fn0_strlen_761(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_762(env) {
  s_234 := env[1];
  x_763 := fn0_strlen_761(s_234);
  return x_763;
}

fn fn0_string_of_int_764(i_237) {
  mkclo1(x_239, fn1_aux_766, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_769, aux_238, i_237);
      move1(x_259, x_769);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_771, aux_238, x_263);
      move1(x_262, x_771);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_765(env) {
  i_237 := env[1];
  x_773 := fn0_string_of_int_764(i_237);
  return x_773;
}

fn fn0_splitU_774(__265) {
  switch(ctagof(__265)){
    nilUU_24 => {
      mkbox(x_267, nilUU_24, 0);
      mkbox(x_268, nilUU_24, 0);
      mkbox(x_269, ex1UU_33, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_25 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_24 => {
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, consUU_25, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_24, 0);
          mkbox(x_276, ex1UU_33, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_25 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_774(tl_278);
          switch(ctagof(x_280)){
            ex1UU_33 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_25);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_25, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_33, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_775(env) {
  __265 := env[1];
  x_776 := fn0_splitU_774(__265);
  return x_776;
}

fn fn0_splitL_777(__287) {
  switch(ctagof(__287)){
    nilUL_22 => {
      rebox(x_289, __287, nilUL_22);
      mkbox(x_290, nilUL_22, 0);
      mkbox(x_291, ex1LL_30, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_23 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_22 => {
          rebox(x_295, tl_293, nilUL_22);
          rebox(x_296, __287, consUL_23);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_22, 0);
          mkbox(x_298, ex1LL_30, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_23 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_777(tl_300);
          switch(ctagof(x_302)){
            ex1LL_30 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_23);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_23);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_30);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_778(env) {
  __287 := env[1];
  x_779 := fn0_splitL_777(__287);
  return x_779;
}

fn fn0_mergeU_780(__309, __310) {
  switch(ctagof(__309)){
    nilUU_24 => {
      move1(x_311, __310);
      break;
    }
    consUU_25 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_24 => {
          mkbox(x_315, consUU_25, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_25 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_25, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_780(tl_313, x_321);
              mkbox(x_322, consUU_25, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_25, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_780(x_324, tl_317);
              mkbox(x_325, consUU_25, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_781(env) {
  __309 := env[1];
  __310 := env[2];
  x_782 := fn0_mergeU_780(__309, __310);
  return x_782;
}

fn fn0_mergeL_783(__327, __328) {
  switch(ctagof(__327)){
    nilUL_22 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_23 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_22 => {
          rebox(x_333, __327, consUL_23);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_23 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_23);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_783(tl_331, x_339);
              rebox(x_340, __327, consUL_23);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_23);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_783(x_342, tl_335);
              rebox(x_343, __327, consUL_23);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_784(env) {
  __327 := env[1];
  __328 := env[2];
  x_785 := fn0_mergeL_783(__327, __328);
  return x_785;
}

fn fn0_msortU_786(__345) {
  switch(ctagof(__345)){
    nilUU_24 => {
      mkbox(x_347, nilUU_24, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_25 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_24 => {
          mkbox(x_351, nilUU_24, 0);
          mkbox(x_352, consUU_25, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_25 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_25, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_25, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_774(x_358);
          switch(ctagof(x_356)){
            ex1UU_33 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_786(m_359);
              x_363 := fn0_msortU_786(n_360);
              x_361 := fn0_mergeU_780(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_787(env) {
  __345 := env[1];
  x_788 := fn0_msortU_786(__345);
  return x_788;
}

fn fn0_msortL_789(__365) {
  switch(ctagof(__365)){
    nilUL_22 => {
      rebox(x_367, __365, nilUL_22);
      move1(x_366, x_367);
      break;
    }
    consUL_23 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_22 => {
          rebox(x_371, tl_369, nilUL_22);
          rebox(x_372, __365, consUL_23);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_23 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_23);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_23);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_777(x_378);
          switch(ctagof(x_376)){
            ex1LL_30 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_789(m_379);
              x_383 := fn0_msortL_789(n_380);
              x_381 := fn0_mergeL_783(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_790(env) {
  __365 := env[1];
  x_791 := fn0_msortL_789(__365);
  return x_791;
}

fn fn0_cmsort_workerU_792(spwn_385) {
  lte(x_387, spwn_385, 0);
  switch(x_387){
    true_4 => {
      mkclo1(x_388, fn1_lam_794, fvc:=1, argc:=2);
      setclo(x_388, msortU_344, 1);
      move1(x_386, x_388);
      break;
    }
    false_5 => {
      mkclo1(x_397, fn1_lam_796, fvc:=5, argc:=2);
      setclo(x_397, rwlUU_7, 1);
      setclo(x_397, splitU_264, 2);
      setclo(x_397, mergeU_308, 3);
      setclo(x_397, cmsort_workerU_384, 4);
      setclo(x_397, spwn_385, 5);
      move1(x_386, x_397);
      break;
    }
  }
  return x_386;
}

fn fn1_cmsort_workerU_793(env) {
  spwn_385 := env[1];
  x_810 := fn0_cmsort_workerU_792(spwn_385);
  return x_810;
}

fn fn0_cmsort_workerL_811(spwn_462) {
  lte(x_464, spwn_462, 0);
  switch(x_464){
    true_4 => {
      mkclo1(x_465, fn1_lam_813, fvc:=1, argc:=2);
      setclo(x_465, msortL_364, 1);
      move1(x_463, x_465);
      break;
    }
    false_5 => {
      mkclo1(x_474, fn1_lam_815, fvc:=5, argc:=2);
      setclo(x_474, rwlLL_28, 1);
      setclo(x_474, splitL_286, 2);
      setclo(x_474, mergeL_326, 3);
      setclo(x_474, cmsort_workerL_461, 4);
      setclo(x_474, spwn_462, 5);
      move1(x_463, x_474);
      break;
    }
  }
  return x_463;
}

fn fn1_cmsort_workerL_812(env) {
  spwn_462 := env[1];
  x_829 := fn0_cmsort_workerL_811(spwn_462);
  return x_829;
}

fn fn0_cmsortU_830(zs_539) {
  lazy(x_540, lazy__832, 2);
  setlazy(x_540, cmsort_workerU_384, 0);
  setlazy(x_540, zs_539, 1);
  return x_540;
}

fn fn1_cmsortU_831(env) {
  zs_539 := env[1];
  x_838 := fn0_cmsortU_830(zs_539);
  return x_838;
}

fn fn0_cmsortL_839(zs_555) {
  lazy(x_556, lazy__841, 2);
  setlazy(x_556, cmsort_workerL_461, 0);
  setlazy(x_556, zs_555, 1);
  return x_556;
}

fn fn1_cmsortL_840(env) {
  zs_555 := env[1];
  x_847 := fn0_cmsortL_839(zs_555);
  return x_847;
}

fn fn0_mklistU_848(n_571) {
  lte(x_573, n_571, 0);
  switch(x_573){
    true_4 => {
      mkbox(x_574, nilUU_24, 0);
      move1(x_572, x_574);
      break;
    }
    false_5 => {
      sub(x_576, n_571, 1);
      x_575 := fn0_mklistU_848(x_576);
      mkbox(x_577, consUU_25, 2);
      setbox(x_577, n_571, 0);
      setbox(x_577, x_575, 1);
      move1(x_572, x_577);
      break;
    }
  }
  return x_572;
}

fn fn1_mklistU_849(env) {
  n_571 := env[1];
  x_850 := fn0_mklistU_848(n_571);
  return x_850;
}

fn fn0_mklistL_851(n_579) {
  lte(x_581, n_579, 0);
  switch(x_581){
    true_4 => {
      mkbox(x_582, nilUL_22, 0);
      move1(x_580, x_582);
      break;
    }
    false_5 => {
      sub(x_584, n_579, 1);
      x_583 := fn0_mklistL_851(x_584);
      mkbox(x_585, consUL_23, 2);
      setbox(x_585, n_579, 0);
      setbox(x_585, x_583, 1);
      move1(x_580, x_585);
      break;
    }
  }
  return x_580;
}

fn fn1_mklistL_852(env) {
  n_579 := env[1];
  x_853 := fn0_mklistL_851(n_579);
  return x_853;
}

fn fn0_list_lenU_854(__587) {
  switch(ctagof(__587)){
    nilUU_24 => {
      move1(x_588, 0);
      break;
    }
    consUU_25 => {
      getbox(hd_589, __587, 0);
      getbox(tl_590, __587, 1);
      x_592 := fn0_list_lenU_854(tl_590);
      add(x_591, 1, x_592);
      move1(x_588, x_591);
      break;
    }
  }
  return x_588;
}

fn fn1_list_lenU_855(env) {
  __587 := env[1];
  x_856 := fn0_list_lenU_854(__587);
  return x_856;
}

fn fn0_list_lenL_857(__594) {
  switch(ctagof(__594)){
    nilUL_22 => {
      move1(x_595, 0);
      free(__594);
      break;
    }
    consUL_23 => {
      getbox(hd_596, __594, 0);
      getbox(tl_597, __594, 1);
      x_599 := fn0_list_lenL_857(tl_597);
      add(x_598, 1, x_599);
      move1(x_595, x_598);
      free(__594);
      break;
    }
  }
  return x_595;
}

fn fn1_list_lenL_858(env) {
  __594 := env[1];
  x_859 := fn0_list_lenL_857(__594);
  return x_859;
}

fn fn0_string_of_listU_860(__601) {
  switch(ctagof(__601)){
    nilUU_24 => {
      str(x_603, "nil")
      move1(x_602, x_603);
      break;
    }
    consUU_25 => {
      getbox(hd_604, __601, 0);
      getbox(tl_605, __601, 1);
      x_608 := fn0_string_of_int_764(hd_604);
      str(x_609, " :: ")
      cat(x_607, x_608, x_609);
      x_610 := fn0_string_of_listU_860(tl_605);
      cat(x_606, x_607, x_610);
      move1(x_602, x_606);
      break;
    }
  }
  return x_602;
}

fn fn1_string_of_listU_861(env) {
  __601 := env[1];
  x_862 := fn0_string_of_listU_860(__601);
  return x_862;
}

fn fn0_string_of_listL_863(__612) {
  switch(ctagof(__612)){
    nilUL_22 => {
      str(x_614, "nil")
      move1(x_613, x_614);
      free(__612);
      break;
    }
    consUL_23 => {
      getbox(hd_615, __612, 0);
      getbox(tl_616, __612, 1);
      x_619 := fn0_string_of_int_764(hd_615);
      str(x_620, " :: ")
      cat(x_618, x_619, x_620);
      x_621 := fn0_string_of_listL_863(tl_616);
      cat(x_617, x_618, x_621);
      move1(x_613, x_617);
      free(__612);
      break;
    }
  }
  return x_613;
}

fn fn1_string_of_listL_864(env) {
  __612 := env[1];
  x_865 := fn0_string_of_listL_863(__612);
  return x_865;
}

fn lazy__867(env) {
  string_of_int_236 := env[0];
  cmsortL_554 := env[1];
  list_lenL_593 := env[2];
  test_622 := env[3];
  x_627 := fn0_cmsortL_839(test_622);
  force(x_626, x_627);
  free(x_627);
  move1(_625, x_626);
  x_629 := fn0_list_lenL_857(_625);
  move1(len_628, x_629);
  x_631 := fn0_string_of_int_764(len_628);
  print(x_630, x_631);
  return x_630;
}

fn lazy__841(env) {
  cmsort_workerL_461 := env[0];
  zs_555 := env[1];
  mkclo1(x_559, fn1_lam_842, fvc:=2, argc:=1);
  setclo(x_559, cmsort_workerL_461, 1);
  setclo(x_559, zs_555, 2);
  fork(x_558, x_559);
  move1(c_557, x_558);
  recv1(x_564, c_557);
  move1(_563, x_564);
  switch(ctagof(_563)){
    ex1LL_30 => {
      getbox(m_566, _563, 0);
      getbox(n_567, _563, 1);
      close1(x_569, n_567);
      move1(__568, x_569);
      move1(x_565, m_566);
      free(_563);
      break;
    }
  }
  return x_565;
}

fn fn1_lam_842(env) {
  lam_560 := env[0];
  cmsort_workerL_461 := env[1];
  zs_555 := env[2];
  _561 := env[3];
  appc(x_843, cmsort_workerL_461, 4);
  appc(x_844, x_843, zs_555);
  appc(x_845, x_844, _561);
  free(x_844);
  move1(x_562, x_845);
  return x_562;
}

fn lazy__832(env) {
  cmsort_workerU_384 := env[0];
  zs_539 := env[1];
  mkclo1(x_543, fn1_lam_833, fvc:=2, argc:=1);
  setclo(x_543, cmsort_workerU_384, 1);
  setclo(x_543, zs_539, 2);
  fork(x_542, x_543);
  move1(c_541, x_542);
  recv0(x_548, c_541);
  move1(_547, x_548);
  switch(ctagof(_547)){
    ex1UL_32 => {
      getbox(m_550, _547, 0);
      getbox(n_551, _547, 1);
      close1(x_553, n_551);
      move1(__552, x_553);
      move1(x_549, m_550);
      free(_547);
      break;
    }
  }
  return x_549;
}

fn fn1_lam_833(env) {
  lam_544 := env[0];
  cmsort_workerU_384 := env[1];
  zs_539 := env[2];
  _545 := env[3];
  appc(x_834, cmsort_workerU_384, 4);
  appc(x_835, x_834, zs_539);
  appc(x_836, x_835, _545);
  free(x_835);
  move1(x_546, x_836);
  return x_546;
}

fn fn1_lam_815(env) {
  lam_475 := env[0];
  rwlLL_28 := env[1];
  splitL_286 := env[2];
  mergeL_326 := env[3];
  cmsort_workerL_461 := env[4];
  spwn_462 := env[5];
  zs_476 := env[6];
  __477 := env[7];
  switch(ctagof(zs_476)){
    nilUL_22 => {
      lazy(x_479, lazy__816, 2);
      setlazy(x_479, zs_476, 0);
      setlazy(x_479, __477, 1);
      move1(x_478, x_479);
      break;
    }
    consUL_23 => {
      getbox(hd_484, zs_476, 0);
      getbox(tl_485, zs_476, 1);
      switch(ctagof(tl_485)){
        nilUL_22 => {
          lazy(x_487, lazy__817, 4);
          setlazy(x_487, zs_476, 0);
          setlazy(x_487, __477, 1);
          setlazy(x_487, hd_484, 2);
          setlazy(x_487, tl_485, 3);
          move1(x_486, x_487);
          break;
        }
        consUL_23 => {
          getbox(hd_493, tl_485, 0);
          getbox(tl_494, tl_485, 1);
          rebox(x_497, tl_485, consUL_23);
          setbox(x_497, hd_493, 0);
          setbox(x_497, tl_494, 1);
          rebox(x_498, zs_476, consUL_23);
          setbox(x_498, hd_484, 0);
          setbox(x_498, x_497, 1);
          x_496 := fn0_splitL_777(x_498);
          switch(ctagof(x_496)){
            ex1LL_30 => {
              getbox(m_499, x_496, 0);
              getbox(n_500, x_496, 1);
              lazy(x_501, lazy__818, 7);
              setlazy(x_501, rwlLL_28, 0);
              setlazy(x_501, mergeL_326, 1);
              setlazy(x_501, cmsort_workerL_461, 2);
              setlazy(x_501, spwn_462, 3);
              setlazy(x_501, __477, 4);
              setlazy(x_501, m_499, 5);
              setlazy(x_501, n_500, 6);
              move1(x_495, x_501);
              free(x_496);
              break;
            }
          }
          move1(x_486, x_495);
          break;
        }
      }
      move1(x_478, x_486);
      break;
    }
  }
  return x_478;
}

fn lazy__818(env) {
  rwlLL_28 := env[0];
  mergeL_326 := env[1];
  cmsort_workerL_461 := env[2];
  spwn_462 := env[3];
  __477 := env[4];
  m_499 := env[5];
  n_500 := env[6];
  mkclo1(x_504, fn1_lam_819, fvc:=3, argc:=1);
  setclo(x_504, cmsort_workerL_461, 1);
  setclo(x_504, spwn_462, 2);
  setclo(x_504, m_499, 3);
  fork(x_503, x_504);
  move1(r1_502, x_503);
  mkclo1(x_511, fn1_lam_824, fvc:=3, argc:=1);
  setclo(x_511, cmsort_workerL_461, 1);
  setclo(x_511, spwn_462, 2);
  setclo(x_511, n_500, 3);
  fork(x_510, x_511);
  move1(r2_509, x_510);
  recv1(x_517, r1_502);
  move1(_516, x_517);
  switch(ctagof(_516)){
    ex1LL_30 => {
      getbox(m_519, _516, 0);
      getbox(n_520, _516, 1);
      close1(x_522, n_520);
      move1(__521, x_522);
      recv1(x_524, r2_509);
      move1(_523, x_524);
      switch(ctagof(_523)){
        ex1LL_30 => {
          getbox(m_526, _523, 0);
          getbox(n_527, _523, 1);
          close1(x_529, n_527);
          move1(__528, x_529);
          x_531 := fn0_mergeL_783(m_519, m_526);
          move1(zs1_530, x_531);
          x_533 := fn0_rwlLL_647(NULL, NULL, NULL, NULL, NULL, zs1_530);
          move1(zs1_532, x_533);
          send(x_535, __477, zs1_532);
          move1(c_534, x_535);
          close0(x_537, c_534);
          move1(__536, x_537);
          move1(x_525, tt_3);
          free(_523);
          break;
        }
      }
      move1(x_518, x_525);
      free(_516);
      break;
    }
  }
  return x_518;
}

fn fn1_lam_819(env) {
  lam_505 := env[0];
  cmsort_workerL_461 := env[1];
  spwn_462 := env[2];
  m_499 := env[3];
  _506 := env[4];
  sub(x_508, spwn_462, 1);
  appc(x_820, cmsort_workerL_461, x_508);
  appc(x_821, x_820, m_499);
  appc(x_822, x_821, _506);
  free(x_821);
  move1(x_507, x_822);
  return x_507;
}

fn fn1_lam_824(env) {
  lam_512 := env[0];
  cmsort_workerL_461 := env[1];
  spwn_462 := env[2];
  n_500 := env[3];
  _513 := env[4];
  sub(x_515, spwn_462, 1);
  appc(x_825, cmsort_workerL_461, x_515);
  appc(x_826, x_825, n_500);
  appc(x_827, x_826, _513);
  free(x_826);
  move1(x_514, x_827);
  return x_514;
}

fn lazy__817(env) {
  zs_476 := env[0];
  __477 := env[1];
  hd_484 := env[2];
  tl_485 := env[3];
  rebox(x_490, tl_485, nilUL_22);
  rebox(x_491, zs_476, consUL_23);
  setbox(x_491, hd_484, 0);
  setbox(x_491, x_490, 1);
  send(x_489, __477, x_491);
  move1(c_488, x_489);
  close0(x_492, c_488);
  return x_492;
}

fn lazy__816(env) {
  zs_476 := env[0];
  __477 := env[1];
  rebox(x_482, zs_476, nilUL_22);
  send(x_481, __477, x_482);
  move1(c_480, x_481);
  close0(x_483, c_480);
  return x_483;
}

fn fn1_lam_813(env) {
  lam_466 := env[0];
  msortL_364 := env[1];
  zs_467 := env[2];
  __468 := env[3];
  lazy(x_469, lazy__814, 3);
  setlazy(x_469, msortL_364, 0);
  setlazy(x_469, zs_467, 1);
  setlazy(x_469, __468, 2);
  return x_469;
}

fn lazy__814(env) {
  msortL_364 := env[0];
  zs_467 := env[1];
  __468 := env[2];
  x_472 := fn0_msortL_789(zs_467);
  send(x_471, __468, x_472);
  move1(c_470, x_471);
  close0(x_473, c_470);
  return x_473;
}

fn fn1_lam_796(env) {
  lam_398 := env[0];
  rwlUU_7 := env[1];
  splitU_264 := env[2];
  mergeU_308 := env[3];
  cmsort_workerU_384 := env[4];
  spwn_385 := env[5];
  zs_399 := env[6];
  __400 := env[7];
  switch(ctagof(zs_399)){
    nilUU_24 => {
      lazy(x_402, lazy__797, 1);
      setlazy(x_402, __400, 0);
      move1(x_401, x_402);
      break;
    }
    consUU_25 => {
      getbox(hd_407, zs_399, 0);
      getbox(tl_408, zs_399, 1);
      switch(ctagof(tl_408)){
        nilUU_24 => {
          lazy(x_410, lazy__798, 2);
          setlazy(x_410, __400, 0);
          setlazy(x_410, hd_407, 1);
          move1(x_409, x_410);
          break;
        }
        consUU_25 => {
          getbox(hd_416, tl_408, 0);
          getbox(tl_417, tl_408, 1);
          mkbox(x_420, consUU_25, 2);
          setbox(x_420, hd_416, 0);
          setbox(x_420, tl_417, 1);
          mkbox(x_421, consUU_25, 2);
          setbox(x_421, hd_407, 0);
          setbox(x_421, x_420, 1);
          x_419 := fn0_splitU_774(x_421);
          switch(ctagof(x_419)){
            ex1UU_33 => {
              getbox(m_422, x_419, 0);
              getbox(n_423, x_419, 1);
              lazy(x_424, lazy__799, 7);
              setlazy(x_424, rwlUU_7, 0);
              setlazy(x_424, mergeU_308, 1);
              setlazy(x_424, cmsort_workerU_384, 2);
              setlazy(x_424, spwn_385, 3);
              setlazy(x_424, __400, 4);
              setlazy(x_424, m_422, 5);
              setlazy(x_424, n_423, 6);
              move1(x_418, x_424);
              free(x_419);
              break;
            }
          }
          move1(x_409, x_418);
          break;
        }
      }
      move1(x_401, x_409);
      break;
    }
  }
  return x_401;
}

fn lazy__799(env) {
  rwlUU_7 := env[0];
  mergeU_308 := env[1];
  cmsort_workerU_384 := env[2];
  spwn_385 := env[3];
  __400 := env[4];
  m_422 := env[5];
  n_423 := env[6];
  mkclo1(x_427, fn1_lam_800, fvc:=3, argc:=1);
  setclo(x_427, cmsort_workerU_384, 1);
  setclo(x_427, spwn_385, 2);
  setclo(x_427, m_422, 3);
  fork(x_426, x_427);
  move1(r1_425, x_426);
  mkclo1(x_434, fn1_lam_805, fvc:=3, argc:=1);
  setclo(x_434, cmsort_workerU_384, 1);
  setclo(x_434, spwn_385, 2);
  setclo(x_434, n_423, 3);
  fork(x_433, x_434);
  move1(r2_432, x_433);
  recv0(x_440, r1_425);
  move1(_439, x_440);
  switch(ctagof(_439)){
    ex1UL_32 => {
      getbox(m_442, _439, 0);
      getbox(n_443, _439, 1);
      close1(x_445, n_443);
      move1(__444, x_445);
      recv0(x_447, r2_432);
      move1(_446, x_447);
      switch(ctagof(_446)){
        ex1UL_32 => {
          getbox(m_449, _446, 0);
          getbox(n_450, _446, 1);
          close1(x_452, n_450);
          move1(__451, x_452);
          x_454 := fn0_mergeU_780(m_442, m_449);
          move1(zs1_453, x_454);
          x_456 := fn0_rwlUU_638(NULL, NULL, NULL, NULL, NULL, zs1_453);
          move1(zs1_455, x_456);
          send(x_458, __400, zs1_455);
          move1(c_457, x_458);
          close0(x_460, c_457);
          move1(__459, x_460);
          move1(x_448, tt_3);
          free(_446);
          break;
        }
      }
      move1(x_441, x_448);
      free(_439);
      break;
    }
  }
  return x_441;
}

fn fn1_lam_800(env) {
  lam_428 := env[0];
  cmsort_workerU_384 := env[1];
  spwn_385 := env[2];
  m_422 := env[3];
  _429 := env[4];
  sub(x_431, spwn_385, 1);
  appc(x_801, cmsort_workerU_384, x_431);
  appc(x_802, x_801, m_422);
  appc(x_803, x_802, _429);
  free(x_802);
  move1(x_430, x_803);
  return x_430;
}

fn fn1_lam_805(env) {
  lam_435 := env[0];
  cmsort_workerU_384 := env[1];
  spwn_385 := env[2];
  n_423 := env[3];
  _436 := env[4];
  sub(x_438, spwn_385, 1);
  appc(x_806, cmsort_workerU_384, x_438);
  appc(x_807, x_806, n_423);
  appc(x_808, x_807, _436);
  free(x_807);
  move1(x_437, x_808);
  return x_437;
}

fn lazy__798(env) {
  __400 := env[0];
  hd_407 := env[1];
  mkbox(x_413, nilUU_24, 0);
  mkbox(x_414, consUU_25, 2);
  setbox(x_414, hd_407, 0);
  setbox(x_414, x_413, 1);
  send(x_412, __400, x_414);
  move1(c_411, x_412);
  close0(x_415, c_411);
  return x_415;
}

fn lazy__797(env) {
  __400 := env[0];
  mkbox(x_405, nilUU_24, 0);
  send(x_404, __400, x_405);
  move1(c_403, x_404);
  close0(x_406, c_403);
  return x_406;
}

fn fn1_lam_794(env) {
  lam_389 := env[0];
  msortU_344 := env[1];
  zs_390 := env[2];
  __391 := env[3];
  lazy(x_392, lazy__795, 3);
  setlazy(x_392, msortU_344, 0);
  setlazy(x_392, zs_390, 1);
  setlazy(x_392, __391, 2);
  return x_392;
}

fn lazy__795(env) {
  msortU_344 := env[0];
  zs_390 := env[1];
  __391 := env[2];
  x_395 := fn0_msortU_786(zs_390);
  send(x_394, __391, x_395);
  move1(c_393, x_394);
  close0(x_396, c_393);
  return x_396;
}

fn fn1_aux_766(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_767, aux_240, i_246);
      move1(x_249, x_767);
      x_252 := fn0_ord_752(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_755(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_752(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_755(x_255);
      x_253 := fn0_str_758(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_744(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_745, loop_213, x_219);
      appc(x_746, x_745, x_221);
      move1(x_218, x_746);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_734(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_735, loop_198, x_204);
      appc(x_736, x_735, x_205);
      move1(x_203, x_736);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_706(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_692(y_148);
  x_150 := fn0_sub_698(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_707, loop_146, n_153);
      appc(x_708, x_707, y_148);
      move1(x_154, x_708);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_633, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_636, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_639, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_642, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_645, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_648, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_651, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_654, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_657, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_660, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_663, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_666, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_669, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_672, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_675, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_678, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_681, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_684, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_687, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_690, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_693, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_696, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_699, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_702, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_705, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_715, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_718, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_723, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_728, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_733, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_743, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_753, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_756, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_759, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_762, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_765, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_775, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_778, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_781, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_784, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_787, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_790, fvc:=0, argc:=1);
  mkclo0(cmsort_workerU_384, fn1_cmsort_workerU_793, fvc:=0, argc:=1);
  mkclo0(cmsort_workerL_461, fn1_cmsort_workerL_812, fvc:=0, argc:=1);
  mkclo0(cmsortU_538, fn1_cmsortU_831, fvc:=0, argc:=1);
  mkclo0(cmsortL_554, fn1_cmsortL_840, fvc:=0, argc:=1);
  mkclo0(mklistU_570, fn1_mklistU_849, fvc:=0, argc:=1);
  mkclo0(mklistL_578, fn1_mklistL_852, fvc:=0, argc:=1);
  mkclo0(list_lenU_586, fn1_list_lenU_855, fvc:=0, argc:=1);
  mkclo0(list_lenL_593, fn1_list_lenL_858, fvc:=0, argc:=1);
  mkclo0(string_of_listU_600, fn1_string_of_listU_861, fvc:=0, argc:=1);
  mkclo0(string_of_listL_611, fn1_string_of_listL_864, fvc:=0, argc:=1);
  x_623 := fn0_mklistL_851(2000000);
  move1(test_622, x_623);
  lazy(x_624, lazy__867, 4);
  setlazy(x_624, string_of_int_236, 0);
  setlazy(x_624, cmsortL_554, 1);
  setlazy(x_624, list_lenL_593, 2);
  setlazy(x_624, test_622, 3);
  force(x_866, x_624);
  return x_866;
}

-----------------------------------------

compilation success

-----------------------------------------

