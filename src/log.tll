[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_393› : ∀ (A_394 : Type‹s_393›) -> A_394 -> ?_2[0;0] :=
  fun id_396 : ∀ (A_397 : Type‹s_393›) -> A_397 -> ?_1[0;0]
  | A_399 m_400 => m_400

#[logical]
inductive eq_1‹s_401› (A_402 : Type‹s_401›) (m_403 : A_402):
  A_402 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_403 m_403)

#[program]
def rwl_2‹s_405,r_406› :
  ∀ {A_407 : Type‹s_405›} ->
    ∀ {m_408 : A_407} ->
      ∀ {n_409 : A_407} ->
        ∀ {B_410 : A_407 -> Type‹r_406›} ->
          {(eq_1‹??_3› ?_5[0;0] m_408 n_409)} ->
            ((B_410) m_408) -> ((B_410) n_409)
:=
  fun rwl_414 :
    ∀ {A_415 : Type‹s_405›} ->
      ∀ {m_416 : A_415} ->
        ∀ {n_417 : A_415} ->
          ∀ {B_418 : A_415 -> Type‹r_406›} ->
            {(eq_1‹??_2› ?_4[0;0] m_416 n_417)} ->
              ((B_418) m_416) -> ((B_418) n_417)
  | A_422 m_423 n_424 B_425 refl_1 x_426 => x_426

#[program]
def rwr_3‹s_427,r_428› :
  ∀ {A_429 : Type‹s_427›} ->
    ∀ {m_430 : A_429} ->
      ∀ {n_431 : A_429} ->
        ∀ {B_432 : A_429 -> Type‹r_428›} ->
          {(eq_1‹??_5› ?_7[0;0] m_430 n_431)} ->
            ((B_432) n_431) -> ((B_432) m_430)
:=
  fun rwr_436 :
    ∀ {A_437 : Type‹s_427›} ->
      ∀ {m_438 : A_437} ->
        ∀ {n_439 : A_437} ->
          ∀ {B_440 : A_437 -> Type‹r_428›} ->
            {(eq_1‹??_4› ?_6[0;0] m_438 n_439)} ->
              ((B_440) n_439) -> ((B_440) m_438)
  | A_444 m_445 n_446 B_447 refl_1 x_448 => x_448

#[logical]
def congr_4‹s_449,r_450,t_451› :
  ∀ (A_452 : Type‹s_449›) ->
    ∀ (B_453 : Type‹r_450›) ->
      ∀ (m_454 : A_452) ->
        ∀ (n_455 : A_452) ->
          ∀ (f_456 : forall‹t_451›(__457 : A_452), B_453) ->
            (eq_1‹??_9› ?_12[0;0] m_454 n_455) ->
              (eq_1‹??_10› ?_13[0;0] ((f_456) m_454) ((f_456) n_455))
:=
  fun congr_459 :
    ∀ (A_460 : Type‹s_449›) ->
      ∀ (B_461 : Type‹r_450›) ->
        ∀ (m_462 : A_460) ->
          ∀ (n_463 : A_460) ->
            ∀ (f_464 : forall‹t_451›(__465 : A_460), B_461) ->
              (eq_1‹??_6› ?_8[0;0] m_462 n_463) ->
                (eq_1‹??_7› ?_9[0;0] ((f_464) m_462) ((f_464) n_463))
  | A_467 B_468 m_469 n_470 f_471 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_472 : U} ->
    ∀ {m_473 : A_472} ->
      ∀ (x_474 : (eq_1‹??_15› ?_20[0;0] m_473 m_473)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_474 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_475 :
    ∀ {A_476 : U} ->
      ∀ {m_477 : A_476} ->
        ∀ (x_478 : (eq_1‹??_11› ?_14[0;0] m_477 m_477)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_478 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_479 m_480 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_481,t_482› (A_483 : Type‹s_481›):
  A_483 -> Type‹t_482›
where
| just_2 (m_485 : A_483) : (sing_2‹??_18,??_19› ?_24[0;0] m_485)

#[logical]
def ssing_6‹s_486› :
  ∀ (A_487 : Type‹s_486›) -> A_487 -> Type‹s_486›
:=
  fun ssing_489 : ∀ (A_490 : Type‹s_486›) -> A_490 -> Type‹s_486›
  | A_492 m_493 => (sing_2‹s_486,s_486› A_492 m_493)

#[program]
def sing_elim_7‹s_494,t_495› :
  ∀ {A_496 : Type‹s_494›} ->
    ∀ {x_497 : A_496} -> (sing_2‹s_494,t_495› ?_26[0;0] x_497) -> A_496
:=
  fun sing_elim_499 :
    ∀ {A_500 : Type‹s_494›} ->
      ∀ {x_501 : A_500} ->
        (sing_2‹s_494,t_495› ?_25[0;0] x_501) -> A_500
  | A_503 x_504 (just_2 x_505) => x_505

#[logical]
def sing_uniq_8‹s_506,t_507› :
  ∀ (A_508 : Type‹s_506›) ->
    ∀ (x0_509 : A_508) ->
      ∀ (x_510 : (sing_2‹s_506,t_507› ?_33[0;0] x0_509)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_509
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_510))
:=
  fun sing_uniq_511 :
    ∀ (A_512 : Type‹s_506›) ->
      ∀ (x0_513 : A_512) ->
        ∀ (x_514 : (sing_2‹s_506,t_507› ?_27[0;0] x0_513)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_513
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_514))
  | A_515 x0_516 (just_2 _517) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_518 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_518 tt_3)
:=
  fun unit_eta_519 :
    ∀ (x_520 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_520 tt_3)
  | x_521 =>
    match x_521 in
      ∀ (x0_522 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_522 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_524 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_528 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _531 _532 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_535 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _538 _539 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_542 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _545 _546 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_547 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_550 : nat_5 -> nat_5 -> bool_4
  | zero_6 _553 => true_4
  | _554 zero_6 => false_5
  | (succ_7 x_555) (succ_7 y_556) => ((lte_550) x_555 y_556)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_559 : nat_5 -> nat_5 -> bool_4
  | x_562 y_563 => ((lte_14) (succ_7‹› x_562) y_563)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_565 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_567) => x_567

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_570 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_573 => y_573
  | (succ_7 x_574) y_575 => (succ_7‹› ((add_570) x_574 y_575))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_578 : nat_5 -> nat_5 -> nat_5
  | x_581 zero_6 => x_581
  | x_582 (succ_7 y_583) => ((sub_578) ((pred_16) x_582) y_583)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_586 : nat_5 -> nat_5 -> nat_5
  | zero_6 _589 => zero_6
  | (succ_7 x_590) y_591 => ((add_17) y_591 ((mul_586) x_590 y_591))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_594 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_597 y_598 =>
    match ((lt_15) x_597 y_598) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_600 :=
        fun loop_601 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_604 y_605 =>
          match ((sub_18) x_604 ((pred_16) y_605)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_607) => (succ_7‹› ((loop_601) x_607 y_605))
      in ((loop_600) x_597 y_598)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_610 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_613 y_614 => ((sub_18) x_613 ((mul_19) ((div_20) x_613 y_614) y_614))

#[program]
inductive list_6‹s_615,t_616› (A_617 : Type‹s_615›): Type‹t_616›
where
| nil_8 : (list_6‹??_31,??_32› A_617)
| cons_9
    (hd_618 : A_617) (tl_619 : (list_6‹??_33,t_616› A_617))
    : (list_6‹??_34,??_35› A_617)

#[program]
def free_list_22‹s_620,t_621› :
  ∀ {A_622 : Type‹s_620›} ->
    A_622 -> unit_3 -> (list_6‹??_37,t_621› A_622) -> unit_3
:=
  fun free_list_626 :
    ∀ {A_627 : Type‹s_620›} ->
      A_627 -> unit_3 -> (list_6‹??_36,t_621› A_627) -> unit_3
  | A_631 f_632 nil_8 => tt_3
  | A_633 f_634 (cons_9 x_635 xs_636) =>
    let __637 := ((f_634) x_635) in ((free_list_626) ?_52[0;0] f_634 xs_636)

#[program]
inductive exists0_7‹s_638,r_639› (A_640 : Type‹s_638›) (B_641 : 
A_640 -> Type‹r_639›): L where
| ex0_10
    {m_643 : A_640} (n_644 : ((B_641) m_643))
    : (exists0_7‹??_38,??_39› A_640 B_641)

#[program]
inductive exists1_8‹s_645,r_646› (A_647 : Type‹s_645›) (B_648 : 
A_647 -> Type‹r_646›): L where
| ex1_11
    (m_650 : A_647) (n_651 : ((B_648) m_650))
    : (exists1_8‹??_40,??_41› A_647 B_648)

#[logical]
def prod0_23‹s_652,r_653› :
  Type‹s_652› -> Type‹r_653› -> ?_56[0;0]
:=
  fun prod0_656 : Type‹s_652› -> Type‹r_653› -> ?_53[0;0]
  | A_659 B_660 =>
    (exists0_7‹??_42,??_43›
      A_659 fun _661 : ?_54[0;0] -> ?_55[0;0]
            | _663 => B_660)

#[logical]
def prod1_24‹s_664,r_665› :
  Type‹s_664› -> Type‹r_665› -> ?_60[0;0]
:=
  fun prod1_668 : Type‹s_664› -> Type‹r_665› -> ?_57[0;0]
  | A_671 B_672 =>
    (exists1_8‹??_44,??_45›
      A_671 fun _673 : ?_58[0;0] -> ?_59[0;0]
            | _675 => B_672)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_678 : int -> int -> int
  | x_681 y_682 =>
    let loop_683 :=
      fun loop_684 : int -> int -> int
      | acc_687 y_688 =>
        match (__lte__ y_688 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_687
        | false_5 => ((loop_684) (__mul__ x_681 acc_687) (__sub__ y_688 1))
    in ((loop_683) 1 y_682)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_693 : int -> int -> int -> int
  | x_697 y_698 m_699 =>
    let loop_700 :=
      fun loop_701 : int -> int -> int
      | acc_704 y_705 =>
        match (__lte__ y_705 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_704
        | false_5 =>
          ((loop_701)
            (__mod__ (__mul__ x_697 acc_704) m_699) (__sub__ y_705 1))
    in ((loop_700) 1 y_698)

#[program]
def ord_27‹› : char -> int :=
  fun ord_708 : char -> int
  | c_710 => (__ord__ c_710)

#[program]
def chr_28‹› : int -> char :=
  fun chr_712 : int -> char
  | i_714 => (__chr__ i_714)

#[program]
def str_29‹› : char -> string :=
  fun str_716 : char -> string
  | c_718 => (__push__ "" c_718)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_720 : string -> int
  | s_722 => (__size__ s_722)

#[program]
def split_31‹t_723› :
  (list_6‹??_71,t_723› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_723› int) (list_6‹??_73,t_723› int))
:=
  fun split_725 :
    (list_6‹??_46,t_723› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_723› int) (list_6‹??_48,t_723› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_67[0;0] ?_68[0;0] (nil_8‹??_51,??_52› ?_65[0;0])
      (nil_8‹??_53,??_54› ?_66[0;0]))
  | (cons_9 x_727 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_72[0;0] ?_73[0;0]
      (cons_9‹??_59,??_60›
        ?_70[0;0] x_727 (nil_8‹??_57,??_58› ?_69[0;0]))
      (nil_8‹??_61,??_62› ?_71[0;0]))
  | (cons_9 x_728 (cons_9 y_729 zs_730)) =>
    match ((split_725) zs_730) in ?_79[0;0] -o ?_78[0;0] with
    | (ex1_11 xs_732 ys_733) =>
      (ex1_11‹??_69,??_70›
        ?_76[0;0] ?_77[0;0] (cons_9‹??_65,??_66› ?_74[0;0] x_728 xs_732)
        (cons_9‹??_67,??_68› ?_75[0;0] y_729 ys_733))

#[program]
def merge_32‹t_734› :
  (list_6‹??_87,t_734› int) ->
    (list_6‹??_88,t_734› int) -o (list_6‹??_89,t_734› int)
:=
  fun merge_737 :
    (list_6‹??_76,t_734› int) ->
      (list_6‹??_77,t_734› int) -o (list_6‹??_78,t_734› int)
  | nil_8 ys_740 => ys_740
  | xs_741 nil_8 => xs_741
  | (cons_9 x_742 xs_743) (cons_9 y_744 ys_745) =>
    match (__lte__ x_742 y_744) in ?_80[0;0] -o ?_81[0;0] with
    | true_4 =>
      (cons_9‹??_81,??_82›
        ?_83[0;0] x_742
        ((merge_737) xs_743 (cons_9‹??_79,??_80› ?_82[0;0] y_744 ys_745)))
    | false_5 =>
      (cons_9‹??_85,??_86›
        ?_85[0;0] y_744
        ((merge_737) (cons_9‹??_83,??_84› ?_84[0;0] x_742 xs_743) ys_745))

#[program]
def msort_33‹t_747› :
  (list_6‹??_100,t_747› int) -> (list_6‹??_101,t_747› int)
:=
  fun msort_749 :
    (list_6‹??_90,t_747› int) -> (list_6‹??_91,t_747› int)
  | nil_8 => (nil_8‹??_92,??_93› ?_86[0;0])
  | (cons_9 z_751 nil_8) =>
    (cons_9‹??_96,??_97›
      ?_88[0;0] z_751 (nil_8‹??_94,??_95› ?_87[0;0]))
  | zs_752 =>
    match ((split_31‹??_98›) zs_752) in ?_90[0;0] -o ?_89[0;0] with
    | (ex1_11 xs_754 ys_755) =>
      ((merge_32‹??_99›) ((msort_749) xs_754) ((msort_749) ys_755))

-----------------------------------------

#[program]
def id_1‹s_5452› : ∀ (A_5453 : Type‹s_5452›) -> A_5453 -> A_5453 :=
  fun id_5455 : ∀ (A_5456 : Type‹s_5452›) -> A_5456 -> A_5456
  | A_5458 m_5459 => m_5459

#[logical]
inductive eq_1‹s_5460› (A_5461 : Type‹s_5460›) (m_5462 : A_5461):
  A_5461 -> U
where
| refl_1 : (eq_1‹s_5460› A_5461 m_5462 m_5462)

#[program]
def rwl_2‹s_5464,r_5465› :
  ∀ {A_5466 : Type‹s_5464›} ->
    ∀ {m_5467 : A_5466} ->
      ∀ {n_5468 : A_5466} ->
        ∀ {B_5469 : A_5466 -> Type‹r_5465›} ->
          {(eq_1‹s_5464› A_5466 m_5467 n_5468)} ->
            ((B_5469) m_5467) -> ((B_5469) n_5468)
:=
  fun rwl_5473 :
    ∀ {A_5474 : Type‹s_5464›} ->
      ∀ {m_5475 : A_5474} ->
        ∀ {n_5476 : A_5474} ->
          ∀ {B_5477 : A_5474 -> Type‹r_5465›} ->
            {(eq_1‹s_5464› A_5474 m_5475 n_5476)} ->
              ((B_5477) m_5475) -> ((B_5477) n_5476)
  | A_5481 m_5482 n_5483 B_5484 refl_1 __5485 => __5485

#[program]
def rwr_3‹s_5486,r_5487› :
  ∀ {A_5488 : Type‹s_5486›} ->
    ∀ {m_5489 : A_5488} ->
      ∀ {n_5490 : A_5488} ->
        ∀ {B_5491 : A_5488 -> Type‹r_5487›} ->
          {(eq_1‹s_5486› A_5488 m_5489 n_5490)} ->
            ((B_5491) n_5490) -> ((B_5491) m_5489)
:=
  fun rwr_5495 :
    ∀ {A_5496 : Type‹s_5486›} ->
      ∀ {m_5497 : A_5496} ->
        ∀ {n_5498 : A_5496} ->
          ∀ {B_5499 : A_5496 -> Type‹r_5487›} ->
            {(eq_1‹s_5486› A_5496 m_5497 n_5498)} ->
              ((B_5499) n_5498) -> ((B_5499) m_5497)
  | A_5503 m_5504 n_5505 B_5506 refl_1 __5507 => __5507

#[logical]
def congr_4‹s_5508,r_5509,t_5510› :
  ∀ (A_5511 : Type‹s_5508›) ->
    ∀ (B_5512 : Type‹r_5509›) ->
      ∀ (m_5513 : A_5511) ->
        ∀ (n_5514 : A_5511) ->
          ∀ (f_5515 : forall‹t_5510›(__5516 : A_5511), B_5512) ->
            (eq_1‹s_5508› A_5511 m_5513 n_5514) ->
              (eq_1‹r_5509› B_5512 ((f_5515) m_5513) ((f_5515) n_5514))
:=
  fun congr_5518 :
    ∀ (A_5519 : Type‹s_5508›) ->
      ∀ (B_5520 : Type‹r_5509›) ->
        ∀ (m_5521 : A_5519) ->
          ∀ (n_5522 : A_5519) ->
            ∀ (f_5523 : forall‹t_5510›(__5524 : A_5519), B_5520) ->
              (eq_1‹s_5508› A_5519 m_5521 n_5522) ->
                (eq_1‹r_5509› B_5520 ((f_5523) m_5521) ((f_5523) n_5522))
  | A_5526 B_5527 m_5528 n_5529 f_5530 refl_1 =>
    (refl_1‹r_5509› B_5527 ((f_5530) n_5529))

#[logical]
def axiom_K_5‹› :
  ∀ {A_5531 : U} ->
    ∀ {m_5532 : A_5531} ->
      ∀ (x_5533 : (eq_1‹U› A_5531 m_5532 m_5532)) ->
        (eq_1‹U›
          (eq_1‹U› A_5531 m_5532 m_5532) x_5533
          (refl_1‹U› A_5531 m_5532))
:=
  fun axiom_K_5534 :
    ∀ {A_5535 : U} ->
      ∀ {m_5536 : A_5535} ->
        ∀ (x_5537 : (eq_1‹U› A_5535 m_5536 m_5536)) ->
          (eq_1‹U›
            (eq_1‹U› A_5535 m_5536 m_5536) x_5537
            (refl_1‹U› A_5535 m_5536))
  | A_5538 m_5539 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_5538 m_5539 m_5539) (refl_1‹U› A_5538 m_5539))

#[program]
inductive sing_2‹s_5540,t_5541› (A_5542 : Type‹s_5540›):
  A_5542 -> Type‹t_5541›
where
| just_2 (m_5544 : A_5542) : (sing_2‹s_5540,t_5541› A_5542 m_5544)

#[logical]
def ssing_6‹s_5545› :
  ∀ (A_5546 : Type‹s_5545›) -> A_5546 -> Type‹s_5545›
:=
  fun ssing_5548 :
    ∀ (A_5549 : Type‹s_5545›) -> A_5549 -> Type‹s_5545›
  | A_5551 m_5552 => (sing_2‹s_5545,s_5545› A_5551 m_5552)

#[program]
def sing_elim_7‹s_5553,t_5554› :
  ∀ {A_5555 : Type‹s_5553›} ->
    ∀ {x_5556 : A_5555} ->
      (sing_2‹s_5553,t_5554› A_5555 x_5556) -> A_5555
:=
  fun sing_elim_5558 :
    ∀ {A_5559 : Type‹s_5553›} ->
      ∀ {x_5560 : A_5559} ->
        (sing_2‹s_5553,t_5554› A_5559 x_5560) -> A_5559
  | A_5562 x_5563 (just_2 m_5564) => m_5564

#[logical]
def sing_uniq_8‹s_5565,t_5566› :
  ∀ (A_5567 : Type‹s_5565›) ->
    ∀ (x0_5568 : A_5567) ->
      ∀ (x_5569 : (sing_2‹s_5565,t_5566› A_5567 x0_5568)) ->
        (eq_1‹s_5565›
          A_5567 x0_5568
          ((sing_elim_7‹s_5565,t_5566›) A_5567 x0_5568 x_5569))
:=
  fun sing_uniq_5570 :
    ∀ (A_5571 : Type‹s_5565›) ->
      ∀ (x0_5572 : A_5571) ->
        ∀ (x_5573 : (sing_2‹s_5565,t_5566› A_5571 x0_5572)) ->
          (eq_1‹s_5565›
            A_5571 x0_5572
            ((sing_elim_7‹s_5565,t_5566›) A_5571 x0_5572 x_5573))
  | A_5574 x0_5575 (just_2 m_5576) => (refl_1‹s_5565› A_5574 m_5576)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_5577 : unit_3) -> (eq_1‹U› unit_3 x_5577 tt_3)
:=
  fun unit_eta_5578 :
    ∀ (x_5579 : unit_3) -> (eq_1‹U› unit_3 x_5579 tt_3)
  | x_5580 =>
    match x_5580 in
      ∀ (x0_5581 : unit_3) -o (eq_1‹U› unit_3 x0_5581 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_5583 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_5587 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __5590 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_5593 : bool_4 -> bool_4 -> bool_4
  | true_4 __5596 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_5599 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_5602 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_5605 : nat_5 -> nat_5 -> bool_4
  | zero_6 __5608 => true_4
  | (succ_7 n_5609) zero_6 => false_5
  | (succ_7 n_5610) (succ_7 n_5611) => ((lte_5605) n_5610 n_5611)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_5614 : nat_5 -> nat_5 -> bool_4
  | x_5617 y_5618 => ((lte_14) (succ_7‹› x_5617) y_5618)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_5620 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_5622) => n_5622

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_5625 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5628 => __5628
  | (succ_7 n_5629) __5630 => (succ_7‹› ((add_5625) n_5629 __5630))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_5633 : nat_5 -> nat_5 -> nat_5
  | __5636 zero_6 => __5636
  | __5637 (succ_7 n_5638) => ((sub_5633) ((pred_16) __5637) n_5638)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_5641 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5644 => zero_6
  | (succ_7 n_5645) __5646 => ((add_17) __5646 ((mul_5641) n_5645 __5646))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_5649 : nat_5 -> nat_5 -> nat_5
  | x_5652 y_5653 =>
    match ((lt_15) x_5652 y_5653) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_5655 :=
        fun loop_5656 : nat_5 -> nat_5 -> nat_5
        | x_5659 y_5660 =>
          match ((sub_18) x_5659 ((pred_16) y_5660)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_5662) => (succ_7‹› ((loop_5656) n_5662 y_5660))
      in ((loop_5655) x_5652 y_5653)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_5665 : nat_5 -> nat_5 -> nat_5
  | x_5668 y_5669 =>
    ((sub_18) x_5668 ((mul_19) ((div_20) x_5668 y_5669) y_5669))

#[program]
inductive list_6‹s_5670,t_5671› (A_5672 : Type‹s_5670›):
  Type‹t_5671›
where
| nil_8 : (list_6‹s_5670,t_5671› A_5672)
| cons_9
    (hd_5673 : A_5672) (tl_5674 : (list_6‹s_5670,t_5671› A_5672))
    : (list_6‹s_5670,t_5671› A_5672)

#[program]
def free_list_22‹s_5675,t_5676› :
  ∀ {A_5677 : Type‹s_5675›} ->
    A_5677 -> unit_3 -> (list_6‹s_5675,t_5676› A_5677) -> unit_3
:=
  fun free_list_5681 :
    ∀ {A_5682 : Type‹s_5675›} ->
      A_5682 -> unit_3 -> (list_6‹s_5675,t_5676› A_5682) -> unit_3
  | A_5686 f_5687 nil_8 => tt_3
  | A_5688 f_5689 (cons_9 hd_5690 tl_5691) =>
    let __5692 := ((f_5689) hd_5690) in
    ((free_list_5681) A_5688 f_5689 tl_5691)

#[program]
inductive exists0_7‹s_5693,r_5694› (A_5695 : Type‹s_5693›) (B_5696 : 
A_5695 -> Type‹r_5694›): L where
| ex0_10
    {m_5698 : A_5695} (n_5699 : ((B_5696) m_5698))
    : (exists0_7‹s_5693,r_5694› A_5695 B_5696)

#[program]
inductive exists1_8‹s_5700,r_5701› (A_5702 : Type‹s_5700›) (B_5703 : 
A_5702 -> Type‹r_5701›): L where
| ex1_11
    (m_5705 : A_5702) (n_5706 : ((B_5703) m_5705))
    : (exists1_8‹s_5700,r_5701› A_5702 B_5703)

#[logical]
def prod0_23‹s_5707,r_5708› : Type‹s_5707› -> Type‹r_5708› -> L
:=
  fun prod0_5711 : Type‹s_5707› -> Type‹r_5708› -> L
  | A_5714 B_5715 =>
    (exists0_7‹s_5707,r_5708›
      A_5714 fun _5716 : A_5714 -> Type‹r_5708›
             | __5718 => B_5715)

#[logical]
def prod1_24‹s_5719,r_5720› : Type‹s_5719› -> Type‹r_5720› -> L
:=
  fun prod1_5723 : Type‹s_5719› -> Type‹r_5720› -> L
  | A_5726 B_5727 =>
    (exists1_8‹s_5719,r_5720›
      A_5726 fun _5728 : A_5726 -> Type‹r_5720›
             | __5730 => B_5727)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_5733 : int -> int -> int
  | x_5736 y_5737 =>
    let loop_5738 :=
      fun loop_5739 : int -> int -> int
      | acc_5742 y_5743 =>
        match (__lte__ y_5743 0) in bool_4 -o int with
        | true_4 => acc_5742
        | false_5 =>
          ((loop_5739) (__mul__ x_5736 acc_5742) (__sub__ y_5743 1))
    in ((loop_5738) 1 y_5737)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_5748 : int -> int -> int -> int
  | x_5752 y_5753 m_5754 =>
    let loop_5755 :=
      fun loop_5756 : int -> int -> int
      | acc_5759 y_5760 =>
        match (__lte__ y_5760 0) in bool_4 -o int with
        | true_4 => acc_5759
        | false_5 =>
          ((loop_5756)
            (__mod__ (__mul__ x_5752 acc_5759) m_5754) (__sub__ y_5760 1))
    in ((loop_5755) 1 y_5753)

#[program]
def ord_27‹› : char -> int :=
  fun ord_5763 : char -> int
  | c_5765 => (__ord__ c_5765)

#[program]
def chr_28‹› : int -> char :=
  fun chr_5767 : int -> char
  | i_5769 => (__chr__ i_5769)

#[program]
def str_29‹› : char -> string :=
  fun str_5771 : char -> string
  | c_5773 => (__push__ "" c_5773)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_5775 : string -> int
  | s_5777 => (__size__ s_5777)

#[program]
def split_31‹t_5778› :
  (list_6‹U,t_5778› int) ->
    ((prod1_24‹t_5778,t_5778›)
      (list_6‹U,t_5778› int) (list_6‹U,t_5778› int))
:=
  fun split_5780 :
    (list_6‹U,t_5778› int) ->
      ((prod1_24‹t_5778,t_5778›)
        (list_6‹U,t_5778› int) (list_6‹U,t_5778› int))
  | nil_8 =>
    (ex1_11‹t_5778,t_5778›
      (list_6‹U,t_5778› int)
      fun _5782 : (list_6‹U,t_5778› int) -> Type‹t_5778›
      | __5784 => (list_6‹U,t_5778› int) (nil_8‹U,t_5778› int)
      (nil_8‹U,t_5778› int))
  | (cons_9 hd_5785 nil_8) =>
    (ex1_11‹t_5778,t_5778›
      (list_6‹U,t_5778› int)
      fun _5786 : (list_6‹U,t_5778› int) -> Type‹t_5778›
      | __5788 => (list_6‹U,t_5778› int)
      (cons_9‹U,t_5778› int hd_5785 (nil_8‹U,t_5778› int))
      (nil_8‹U,t_5778› int))
  | (cons_9 hd_5789 (cons_9 hd_5790 tl_5791)) =>
    match ((split_5780) tl_5791) in
      ((prod1_24‹t_5778,t_5778›)
        (list_6‹U,t_5778› int) (list_6‹U,t_5778› int)) -o
        ((prod1_24‹t_5778,t_5778›)
          (list_6‹U,t_5778› int) (list_6‹U,t_5778› int))
    with
    | (ex1_11 m_5793 n_5794) =>
      (ex1_11‹t_5778,t_5778›
        (list_6‹U,t_5778› int)
        fun _5795 : (list_6‹U,t_5778› int) -> Type‹t_5778›
        | __5797 => (list_6‹U,t_5778› int)
        (cons_9‹U,t_5778› int hd_5789 m_5793)
        (cons_9‹U,t_5778› int hd_5790 n_5794))

#[program]
def merge_32‹t_5798› :
  (list_6‹U,t_5798› int) ->
    (list_6‹U,t_5798› int) -o (list_6‹U,t_5798› int)
:=
  fun merge_5801 :
    (list_6‹U,t_5798› int) ->
      (list_6‹U,t_5798› int) -o (list_6‹U,t_5798› int)
  | nil_8 __5804 => __5804
  | (cons_9 hd_5805 tl_5806) nil_8 =>
    (cons_9‹U,t_5798› int hd_5805 tl_5806)
  | (cons_9 hd_5807 tl_5808) (cons_9 hd_5809 tl_5810) =>
    match (__lte__ hd_5807 hd_5809) in bool_4 -o (list_6‹U,t_5798› int)
    with
    | true_4 =>
      (cons_9‹U,t_5798›
        int hd_5807
        ((merge_5801) tl_5808 (cons_9‹U,t_5798› int hd_5809 tl_5810)))
    | false_5 =>
      (cons_9‹U,t_5798›
        int hd_5809
        ((merge_5801) (cons_9‹U,t_5798› int hd_5807 tl_5808) tl_5810))

#[program]
def msort_33‹t_5812› :
  (list_6‹U,t_5812› int) -> (list_6‹U,t_5812› int)
:=
  fun msort_5814 : (list_6‹U,t_5812› int) -> (list_6‹U,t_5812› int)
  | nil_8 => (nil_8‹U,t_5812› int)
  | (cons_9 hd_5816 nil_8) =>
    (cons_9‹U,t_5812› int hd_5816 (nil_8‹U,t_5812› int))
  | (cons_9 hd_5817 (cons_9 hd_5818 tl_5819)) =>
    match ((split_31‹t_5812›)
            (cons_9‹U,t_5812›
              int hd_5817 (cons_9‹U,t_5812› int hd_5818 tl_5819))) in
      ((prod1_24‹t_5812,t_5812›)
        (list_6‹U,t_5812› int) (list_6‹U,t_5812› int)) -o
        (list_6‹U,t_5812› int)
    with
    | (ex1_11 m_5821 n_5822) =>
      ((merge_32‹t_5812›) ((msort_5814) m_5821) ((msort_5814) n_5822))

-----------------------------------------

#[program]
def idU_35 := fun id_9604 (A_9605) -> (m_9606) ->
                m_9606

#[program]
def idL_34 := fun id_9607 (A_9608) -> (m_9609) ->
                m_9609

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_39 :=
  fun rwl_9610 {A_9611} -> {m_9612} -> {n_9613} -> {B_9614} -> {__9615} ->
  (__9616) ->
    match {NULL} with
    | reflU_13  => __9616
    end

#[program]
def rwlUL_38 :=
  fun rwl_9617 {A_9618} -> {m_9619} -> {n_9620} -> {B_9621} -> {__9622} ->
  (__9623) ->
    match {NULL} with
    | reflU_13  => __9623
    end

#[program]
def rwlLU_37 :=
  fun rwl_9624 {A_9625} -> {m_9626} -> {n_9627} -> {B_9628} -> {__9629} ->
  (__9630) ->
    match {NULL} with
    | reflL_12  => __9630
    end

#[program]
def rwlLL_36 :=
  fun rwl_9631 {A_9632} -> {m_9633} -> {n_9634} -> {B_9635} -> {__9636} ->
  (__9637) ->
    match {NULL} with
    | reflL_12  => __9637
    end

#[program]
def rwrUU_43 :=
  fun rwr_9638 {A_9639} -> {m_9640} -> {n_9641} -> {B_9642} -> {__9643} ->
  (__9644) ->
    match {NULL} with
    | reflU_13  => __9644
    end

#[program]
def rwrUL_42 :=
  fun rwr_9645 {A_9646} -> {m_9647} -> {n_9648} -> {B_9649} -> {__9650} ->
  (__9651) ->
    match {NULL} with
    | reflU_13  => __9651
    end

#[program]
def rwrLU_41 :=
  fun rwr_9652 {A_9653} -> {m_9654} -> {n_9655} -> {B_9656} -> {__9657} ->
  (__9658) ->
    match {NULL} with
    | reflL_12  => __9658
    end

#[program]
def rwrLL_40 :=
  fun rwr_9659 {A_9660} -> {m_9661} -> {n_9662} -> {B_9663} -> {__9664} ->
  (__9665) ->
    match {NULL} with
    | reflL_12  => __9665
    end

#[logical]
def congrUUU_51 := NULL

#[logical]
def congrUUL_50 := NULL

#[logical]
def congrULU_49 := NULL

#[logical]
def congrULL_48 := NULL

#[logical]
def congrLUU_47 := NULL

#[logical]
def congrLUL_46 := NULL

#[logical]
def congrLLU_45 := NULL

#[logical]
def congrLLL_44 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_53 := NULL

#[logical]
def ssingL_52 := NULL

#[program]
def sing_elimUU_57 :=
  fun sing_elim_9666 {A_9667} -> {x_9668} -> (__9669) ->
    match __9669 with
    | justUU_17 m_9670 => m_9670
    end

#[program]
def sing_elimUL_56 :=
  fun sing_elim_9671 {A_9672} -> {x_9673} -> (__9674) ->
    match __9674 with
    | justUL_16 m_9675 => m_9675
    end

#[program]
def sing_elimLU_55 :=
  fun sing_elim_9676 {A_9677} -> {x_9678} -> (__9679) ->
    match __9679 with
    
    end

#[program]
def sing_elimLL_54 :=
  fun sing_elim_9680 {A_9681} -> {x_9682} -> (__9683) ->
    match __9683 with
    | justLL_14 m_9684 => m_9684
    end

#[logical]
def sing_uniqUU_61 := NULL

#[logical]
def sing_uniqUL_60 := NULL

#[logical]
def sing_uniqLU_59 := NULL

#[logical]
def sing_uniqLL_58 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_9685 (__9686) ->
    match __9686 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_9687 (__9688) -> (__9689) ->
    match __9688 with
    | true_4  =>
      match __9689 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_9690 (__9691) -> (__9692) ->
    match __9691 with
    | true_4  => true_4
    | false_5  =>
      match __9692 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_9693 (__9694) -> (__9695) -o
    match __9694 with
    | true_4  =>
      match __9695 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __9695 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_9696 (__9697) -> (__9698) ->
    match __9697 with
    | zero_6  => true_4
    | succ_7 n_9699 =>
      match __9698 with
      | zero_6  => false_5 | succ_7 n_9700 => ((lte_9696) n_9699 n_9700)
      end
    end

#[program]
def lt_15 :=
  fun lt_9701 (x_9702) -> (y_9703) ->
    ((lte_14) (succ_7 x_9702) y_9703)

#[program]
def pred_16 :=
  fun pred_9704 (__9705) ->
    match __9705 with
    | zero_6  => zero_6 | succ_7 n_9706 => n_9706
    end

#[program]
def add_17 :=
  fun add_9707 (__9708) -> (__9709) ->
    match __9708 with
    | zero_6  => __9709
    | succ_7 n_9710 => (succ_7 ((add_9707) n_9710 __9709))
    end

#[program]
def sub_18 :=
  fun sub_9711 (__9712) -> (__9713) ->
    match __9713 with
    | zero_6  => __9712
    | succ_7 n_9714 => ((sub_9711) ((pred_16) __9712) n_9714)
    end

#[program]
def mul_19 :=
  fun mul_9715 (__9716) -> (__9717) ->
    match __9716 with
    | zero_6  => zero_6
    | succ_7 n_9718 => ((add_17) __9717 ((mul_9715) n_9718 __9717))
    end

#[program]
def div_20 :=
  fun div_9719 (x_9720) -> (y_9721) ->
    match ((lt_15) x_9720 y_9721) with
    | true_4  => zero_6
    | false_5  =>
      let loop_9722 :=
        fun loop_9723 (x_9724) -> (y_9725) ->
          match ((sub_18) x_9724 ((pred_16) y_9725)) with
          | zero_6  => zero_6
          | succ_7 n_9726 => (succ_7 ((loop_9723) n_9726 y_9725))
          end
      in ((loop_9722) x_9720 y_9721)
    end

#[program]
def rem_21 :=
  fun rem_9727 (x_9728) -> (y_9729) ->
    ((sub_18) x_9728 ((mul_19) ((div_20) x_9728 y_9729) y_9729))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_65 :=
  fun free_list_9730 {A_9731} -> (f_9732) -> (__9733) ->
    match __9733 with
    | nilUU_24  => tt_3
    | consUU_25 hd_9734 tl_9735 =>
      let __9736 := ((f_9732) hd_9734) in
      ((free_list_9730) NULL f_9732 tl_9735)
    end

#[program]
def free_listUL_64 :=
  fun free_list_9737 {A_9738} -> (f_9739) -> (__9740) ->
    match __9740 with
    | nilUL_22  => tt_3
    | consUL_23 hd_9741 tl_9742 =>
      let __9743 := ((f_9739) hd_9741) in
      ((free_list_9737) NULL f_9739 tl_9742)
    end

#[program]
def free_listLL_62 :=
  fun free_list_9744 {A_9745} -> (f_9746) -> (__9747) ->
    match __9747 with
    | nilLL_18  => tt_3
    | consLL_19 hd_9748 tl_9749 =>
      let __9750 := ((f_9746) hd_9748) in
      ((free_list_9744) NULL f_9746 tl_9749)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_69 := NULL

#[logical]
def prod0UL_68 := NULL

#[logical]
def prod0LU_67 := NULL

#[logical]
def prod0LL_66 := NULL

#[logical]
def prod1UU_73 := NULL

#[logical]
def prod1UL_72 := NULL

#[logical]
def prod1LU_71 := NULL

#[logical]
def prod1LL_70 := NULL

#[program]
def pow_25 :=
  fun pow_9751 (x_9752) -> (y_9753) ->
    let loop_9754 :=
      fun loop_9755 (acc_9756) -> (y_9757) ->
        match (__lte__ y_9757 0) with
        | true_4  => acc_9756
        | false_5  =>
          ((loop_9755) (__mul__ x_9752 acc_9756) (__sub__ y_9757 1))
        end
    in ((loop_9754) 1 y_9753)

#[program]
def powm_26 :=
  fun powm_9758 (x_9759) -> (y_9760) -> (m_9761) ->
    let loop_9762 :=
      fun loop_9763 (acc_9764) -> (y_9765) ->
        match (__lte__ y_9765 0) with
        | true_4  => acc_9764
        | false_5  =>
          ((loop_9763)
            (__mod__ (__mul__ x_9759 acc_9764) m_9761) (__sub__ y_9765 1))
        end
    in ((loop_9762) 1 y_9760)

#[program]
def ord_27 := fun ord_9766 (c_9767) ->
                (__ord__ c_9767)

#[program]
def chr_28 := fun chr_9768 (i_9769) ->
                (__chr__ i_9769)

#[program]
def str_29 := fun str_9770 (c_9771) ->
                (__push__ "" c_9771)

#[program]
def strlen_30 := fun strlen_9772 (s_9773) ->
                   (__size__ s_9773)

#[program]
def splitU_75 :=
  fun split_9774 (__9775) ->
    match __9775 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_9776 tl_9777 =>
      match tl_9777 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9776 nilUU_24) nilUU_24)
      | consUU_25 hd_9778 tl_9779 =>
        match ((split_9774) tl_9779) with
        | ex1UU_33 m_9780 n_9781 =>
          (ex1UU_33 (consUU_25 hd_9776 m_9780) (consUU_25 hd_9778 n_9781))
        end
      end
    end

#[program]
def splitL_74 :=
  fun split_9782 (__9783) ->
    match __9783 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_9784 tl_9785 =>
      match tl_9785 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9784 nilUL_22) nilUL_22)
      | consUL_23 hd_9786 tl_9787 =>
        match ((split_9782) tl_9787) with
        | ex1LL_30 m_9788 n_9789 =>
          (ex1LL_30 (consUL_23 hd_9784 m_9788) (consUL_23 hd_9786 n_9789))
        end
      end
    end

#[program]
def mergeU_77 :=
  fun merge_9790 (__9791) -> (__9792) -o
    match __9791 with
    | nilUU_24  => __9792
    | consUU_25 hd_9793 tl_9794 =>
      match __9792 with
      | nilUU_24  => (consUU_25 hd_9793 tl_9794)
      | consUU_25 hd_9795 tl_9796 =>
        match (__lte__ hd_9793 hd_9795) with
        | true_4  =>
          (consUU_25
            hd_9793 ((merge_9790) tl_9794 (consUU_25 hd_9795 tl_9796)))
        | false_5  =>
          (consUU_25
            hd_9795 ((merge_9790) (consUU_25 hd_9793 tl_9794) tl_9796))
        end
      end
    end

#[program]
def mergeL_76 :=
  fun merge_9797 (__9798) -> (__9799) -o
    match __9798 with
    | nilUL_22  => __9799
    | consUL_23 hd_9800 tl_9801 =>
      match __9799 with
      | nilUL_22  => (consUL_23 hd_9800 tl_9801)
      | consUL_23 hd_9802 tl_9803 =>
        match (__lte__ hd_9800 hd_9802) with
        | true_4  =>
          (consUL_23
            hd_9800 ((merge_9797) tl_9801 (consUL_23 hd_9802 tl_9803)))
        | false_5  =>
          (consUL_23
            hd_9802 ((merge_9797) (consUL_23 hd_9800 tl_9801) tl_9803))
        end
      end
    end

#[program]
def msortU_79 :=
  fun msort_9804 (__9805) ->
    match __9805 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_9806 tl_9807 =>
      match tl_9807 with
      | nilUU_24  => (consUU_25 hd_9806 nilUU_24)
      | consUU_25 hd_9808 tl_9809 =>
        match ((splitU_75) (consUU_25 hd_9806 (consUU_25 hd_9808 tl_9809))) with
        | ex1UU_33 m_9810 n_9811 =>
          ((mergeU_77) ((msort_9804) m_9810) ((msort_9804) n_9811))
        end
      end
    end

#[program]
def msortL_78 :=
  fun msort_9812 (__9813) ->
    match __9813 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_9814 tl_9815 =>
      match tl_9815 with
      | nilUL_22  => (consUL_23 hd_9814 nilUL_22)
      | consUL_23 hd_9816 tl_9817 =>
        match ((splitL_74) (consUL_23 hd_9814 (consUL_23 hd_9816 tl_9817))) with
        | ex1LL_30 m_9818 n_9819 =>
          ((mergeL_76) ((msort_9812) m_9818) ((msort_9812) n_9819))
        end
      end
    end

-----------------------------------------

#[program]
def idU_35 := fun id_10036 (A_10037) -> (m_10038) ->
                m_10038

#[program]
def idL_34 := fun id_10039 (A_10040) -> (m_10041) ->
                m_10041

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_39 :=
  fun rwl_10042 {A_10043} -> {m_10044} -> {n_10045} -> {B_10046} ->
  {__10047} -> (__10048) ->
    __10048

#[program]
def rwlUL_38 :=
  fun rwl_10049 {A_10050} -> {m_10051} -> {n_10052} -> {B_10053} ->
  {__10054} -> (__10055) ->
    __10055

#[program]
def rwlLU_37 :=
  fun rwl_10056 {A_10057} -> {m_10058} -> {n_10059} -> {B_10060} ->
  {__10061} -> (__10062) ->
    __10062

#[program]
def rwlLL_36 :=
  fun rwl_10063 {A_10064} -> {m_10065} -> {n_10066} -> {B_10067} ->
  {__10068} -> (__10069) ->
    __10069

#[program]
def rwrUU_43 :=
  fun rwr_10070 {A_10071} -> {m_10072} -> {n_10073} -> {B_10074} ->
  {__10075} -> (__10076) ->
    __10076

#[program]
def rwrUL_42 :=
  fun rwr_10077 {A_10078} -> {m_10079} -> {n_10080} -> {B_10081} ->
  {__10082} -> (__10083) ->
    __10083

#[program]
def rwrLU_41 :=
  fun rwr_10084 {A_10085} -> {m_10086} -> {n_10087} -> {B_10088} ->
  {__10089} -> (__10090) ->
    __10090

#[program]
def rwrLL_40 :=
  fun rwr_10091 {A_10092} -> {m_10093} -> {n_10094} -> {B_10095} ->
  {__10096} -> (__10097) ->
    __10097

#[logical]
def congrUUU_51 := NULL

#[logical]
def congrUUL_50 := NULL

#[logical]
def congrULU_49 := NULL

#[logical]
def congrULL_48 := NULL

#[logical]
def congrLUU_47 := NULL

#[logical]
def congrLUL_46 := NULL

#[logical]
def congrLLU_45 := NULL

#[logical]
def congrLLL_44 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_53 := NULL

#[logical]
def ssingL_52 := NULL

#[program]
def sing_elimUU_57 :=
  fun sing_elim_10098 {A_10099} -> {x_10100} -> (__10101) ->
    match __10101 with
    | justUU_17 m_10102 => m_10102
    end

#[program]
def sing_elimUL_56 :=
  fun sing_elim_10103 {A_10104} -> {x_10105} -> (__10106) ->
    match __10106 with
    | justUL_16 m_10107 => m_10107
    end

#[program]
def sing_elimLU_55 :=
  fun sing_elim_10108 {A_10109} -> {x_10110} -> (__10111) ->
    !!

#[program]
def sing_elimLL_54 :=
  fun sing_elim_10112 {A_10113} -> {x_10114} -> (__10115) ->
    match __10115 with
    | justLL_14 m_10116 => m_10116
    end

#[logical]
def sing_uniqUU_61 := NULL

#[logical]
def sing_uniqUL_60 := NULL

#[logical]
def sing_uniqLU_59 := NULL

#[logical]
def sing_uniqLL_58 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_10117 (__10118) ->
    match __10118 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_10119 (__10120) -> (__10121) ->
    match __10120 with
    | true_4  =>
      match __10121 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_10122 (__10123) -> (__10124) ->
    match __10123 with
    | true_4  => true_4
    | false_5  =>
      match __10124 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_10125 (__10126) -> (__10127) -o
    match __10126 with
    | true_4  =>
      match __10127 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __10127 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_10128 (__10129) -> (__10130) ->
    match __10129 with
    | zero_6  => true_4
    | succ_7 n_10131 =>
      match __10130 with
      | zero_6  => false_5 | succ_7 n_10132 => ((lte_10128) n_10131 n_10132)
      end
    end

#[program]
def lt_15 :=
  fun lt_10133 (x_10134) -> (y_10135) ->
    ((lte_14) (succ_7 x_10134) y_10135)

#[program]
def pred_16 :=
  fun pred_10136 (__10137) ->
    match __10137 with
    | zero_6  => zero_6 | succ_7 n_10138 => n_10138
    end

#[program]
def add_17 :=
  fun add_10139 (__10140) -> (__10141) ->
    match __10140 with
    | zero_6  => __10141
    | succ_7 n_10142 => (succ_7 ((add_10139) n_10142 __10141))
    end

#[program]
def sub_18 :=
  fun sub_10143 (__10144) -> (__10145) ->
    match __10145 with
    | zero_6  => __10144
    | succ_7 n_10146 => ((sub_10143) ((pred_16) __10144) n_10146)
    end

#[program]
def mul_19 :=
  fun mul_10147 (__10148) -> (__10149) ->
    match __10148 with
    | zero_6  => zero_6
    | succ_7 n_10150 => ((add_17) __10149 ((mul_10147) n_10150 __10149))
    end

#[program]
def div_20 :=
  fun div_10151 (x_10152) -> (y_10153) ->
    match ((lt_15) x_10152 y_10153) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10154 :=
        fun loop_10155 (x_10156) -> (y_10157) ->
          match ((sub_18) x_10156 ((pred_16) y_10157)) with
          | zero_6  => zero_6
          | succ_7 n_10158 => (succ_7 ((loop_10155) n_10158 y_10157))
          end
      in ((loop_10154) x_10152 y_10153)
    end

#[program]
def rem_21 :=
  fun rem_10159 (x_10160) -> (y_10161) ->
    ((sub_18) x_10160 ((mul_19) ((div_20) x_10160 y_10161) y_10161))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_65 :=
  fun free_list_10162 {A_10163} -> (f_10164) -> (__10165) ->
    match __10165 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10166 tl_10167 =>
      let __10168 := ((f_10164) hd_10166) in
      ((free_list_10162) NULL f_10164 tl_10167)
    end

#[program]
def free_listUL_64 :=
  fun free_list_10169 {A_10170} -> (f_10171) -> (__10172) ->
    match __10172 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10173 tl_10174 =>
      let __10175 := ((f_10171) hd_10173) in
      ((free_list_10169) NULL f_10171 tl_10174)
    end

#[program]
def free_listLL_62 :=
  fun free_list_10176 {A_10177} -> (f_10178) -> (__10179) ->
    match __10179 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10180 tl_10181 =>
      let __10182 := ((f_10178) hd_10180) in
      ((free_list_10176) NULL f_10178 tl_10181)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_69 := NULL

#[logical]
def prod0UL_68 := NULL

#[logical]
def prod0LU_67 := NULL

#[logical]
def prod0LL_66 := NULL

#[logical]
def prod1UU_73 := NULL

#[logical]
def prod1UL_72 := NULL

#[logical]
def prod1LU_71 := NULL

#[logical]
def prod1LL_70 := NULL

#[program]
def pow_25 :=
  fun pow_10183 (x_10184) -> (y_10185) ->
    let loop_10186 :=
      fun loop_10187 (acc_10188) -> (y_10189) ->
        match (__lte__ y_10189 0) with
        | true_4  => acc_10188
        | false_5  =>
          ((loop_10187) (__mul__ x_10184 acc_10188) (__sub__ y_10189 1))
        end
    in ((loop_10186) 1 y_10185)

#[program]
def powm_26 :=
  fun powm_10190 (x_10191) -> (y_10192) -> (m_10193) ->
    let loop_10194 :=
      fun loop_10195 (acc_10196) -> (y_10197) ->
        match (__lte__ y_10197 0) with
        | true_4  => acc_10196
        | false_5  =>
          ((loop_10195)
            (__mod__ (__mul__ x_10191 acc_10196) m_10193) (__sub__ y_10197 1))
        end
    in ((loop_10194) 1 y_10192)

#[program]
def ord_27 := fun ord_10198 (c_10199) ->
                (__ord__ c_10199)

#[program]
def chr_28 := fun chr_10200 (i_10201) ->
                (__chr__ i_10201)

#[program]
def str_29 := fun str_10202 (c_10203) ->
                (__push__ "" c_10203)

#[program]
def strlen_30 := fun strlen_10204 (s_10205) ->
                   (__size__ s_10205)

#[program]
def splitU_75 :=
  fun split_10206 (__10207) ->
    match __10207 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_10208 tl_10209 =>
      match tl_10209 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10208 nilUU_24) nilUU_24)
      | consUU_25 hd_10210 tl_10211 =>
        match ((split_10206) tl_10211) with
        | ex1UU_33 m_10212 n_10213 =>
          (ex1UU_33
            (consUU_25 hd_10208 m_10212) (consUU_25 hd_10210 n_10213))
        end
      end
    end

#[program]
def splitL_74 :=
  fun split_10214 (__10215) ->
    match __10215 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_10216 tl_10217 =>
      match tl_10217 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10216 nilUL_22) nilUL_22)
      | consUL_23 hd_10218 tl_10219 =>
        match ((split_10214) tl_10219) with
        | ex1LL_30 m_10220 n_10221 =>
          (ex1LL_30
            (consUL_23 hd_10216 m_10220) (consUL_23 hd_10218 n_10221))
        end
      end
    end

#[program]
def mergeU_77 :=
  fun merge_10222 (__10223) -> (__10224) -o
    match __10223 with
    | nilUU_24  => __10224
    | consUU_25 hd_10225 tl_10226 =>
      match __10224 with
      | nilUU_24  => (consUU_25 hd_10225 tl_10226)
      | consUU_25 hd_10227 tl_10228 =>
        match (__lte__ hd_10225 hd_10227) with
        | true_4  =>
          (consUU_25
            hd_10225 ((merge_10222) tl_10226 (consUU_25 hd_10227 tl_10228)))
        | false_5  =>
          (consUU_25
            hd_10227 ((merge_10222) (consUU_25 hd_10225 tl_10226) tl_10228))
        end
      end
    end

#[program]
def mergeL_76 :=
  fun merge_10229 (__10230) -> (__10231) -o
    match __10230 with
    | nilUL_22  => __10231
    | consUL_23 hd_10232 tl_10233 =>
      match __10231 with
      | nilUL_22  => (consUL_23 hd_10232 tl_10233)
      | consUL_23 hd_10234 tl_10235 =>
        match (__lte__ hd_10232 hd_10234) with
        | true_4  =>
          (consUL_23
            hd_10232 ((merge_10229) tl_10233 (consUL_23 hd_10234 tl_10235)))
        | false_5  =>
          (consUL_23
            hd_10234 ((merge_10229) (consUL_23 hd_10232 tl_10233) tl_10235))
        end
      end
    end

#[program]
def msortU_79 :=
  fun msort_10236 (__10237) ->
    match __10237 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_10238 tl_10239 =>
      match tl_10239 with
      | nilUU_24  => (consUU_25 hd_10238 nilUU_24)
      | consUU_25 hd_10240 tl_10241 =>
        match ((splitU_75)
                (consUU_25 hd_10238 (consUU_25 hd_10240 tl_10241))) with
        | ex1UU_33 m_10242 n_10243 =>
          ((mergeU_77) ((msort_10236) m_10242) ((msort_10236) n_10243))
        end
      end
    end

#[program]
def msortL_78 :=
  fun msort_10244 (__10245) ->
    match __10245 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_10246 tl_10247 =>
      match tl_10247 with
      | nilUL_22  => (consUL_23 hd_10246 nilUL_22)
      | consUL_23 hd_10248 tl_10249 =>
        match ((splitL_74)
                (consUL_23 hd_10246 (consUL_23 hd_10248 tl_10249))) with
        | ex1LL_30 m_10250 n_10251 =>
          ((mergeL_76) ((msort_10244) m_10250) ((msort_10244) n_10251))
        end
      end
    end

-----------------------------------------

def idU_35 := fun id_10468 (A_10469) -> (m_10470) -> m_10470

def idL_34 := fun id_10471 (A_10472) -> (m_10473) -> m_10473

def rwlUU_39 :=
  fun rwl_10474 (A_10475) -> (m_10476) -> (n_10477) -> (B_10478) ->
  (__10479) -> (__10480) -> __10480

def rwlUL_38 :=
  fun rwl_10481 (A_10482) -> (m_10483) -> (n_10484) -> (B_10485) ->
  (__10486) -> (__10487) -> __10487

def rwlLU_37 :=
  fun rwl_10488 (A_10489) -> (m_10490) -> (n_10491) -> (B_10492) ->
  (__10493) -> (__10494) -> __10494

def rwlLL_36 :=
  fun rwl_10495 (A_10496) -> (m_10497) -> (n_10498) -> (B_10499) ->
  (__10500) -> (__10501) -> __10501

def rwrUU_43 :=
  fun rwr_10502 (A_10503) -> (m_10504) -> (n_10505) -> (B_10506) ->
  (__10507) -> (__10508) -> __10508

def rwrUL_42 :=
  fun rwr_10509 (A_10510) -> (m_10511) -> (n_10512) -> (B_10513) ->
  (__10514) -> (__10515) -> __10515

def rwrLU_41 :=
  fun rwr_10516 (A_10517) -> (m_10518) -> (n_10519) -> (B_10520) ->
  (__10521) -> (__10522) -> __10522

def rwrLL_40 :=
  fun rwr_10523 (A_10524) -> (m_10525) -> (n_10526) -> (B_10527) ->
  (__10528) -> (__10529) -> __10529

def sing_elimUU_57 :=
  fun sing_elim_10530 (A_10531) -> (x_10532) -> (__10533) -> __10533

def sing_elimUL_56 :=
  fun sing_elim_10534 (A_10535) -> (x_10536) -> (__10537) -> __10537

def sing_elimLU_55 :=
  fun sing_elim_10538 (A_10539) -> (x_10540) -> (__10541) -> !!

def sing_elimLL_54 :=
  fun sing_elim_10542 (A_10543) -> (x_10544) -> (__10545) -> __10545

def not_10 :=
  fun not_10546 (__10547) ->
    match __10547 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_10548 (__10549) -> (__10550) ->
    match __10549 with
    | true_4 =>
      match __10550 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_10551 (__10552) -> (__10553) ->
    match __10552 with
    | true_4 => true_4
    | false_5 =>
      match __10553 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_10554 (__10555) -> (__10556) -o
    match __10555 with
    | true_4 =>
      match __10556 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __10556 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_10557 (__10558) -> (__10559) ->
    match __10558 with
    | zero_6  => true_4
    | succ_7 n_10560 =>
      match __10559 with
      | zero_6  => false_5 | succ_7 n_10561 => ((lte_10557) n_10560 n_10561)
      end
    end

def lt_15 :=
  fun lt_10562 (x_10563) -> (y_10564) -> ((lte_14) (succ_7 x_10563) y_10564)

def pred_16 :=
  fun pred_10565 (__10566) ->
    match __10566 with
    | zero_6  => (zero_6 ) | succ_7 n_10567 => n_10567
    end

def add_17 :=
  fun add_10568 (__10569) -> (__10570) ->
    match __10569 with
    | zero_6  => __10570
    | succ_7 n_10571 => (succ_7 ((add_10568) n_10571 __10570))
    end

def sub_18 :=
  fun sub_10572 (__10573) -> (__10574) ->
    match __10574 with
    | zero_6  => __10573
    | succ_7 n_10575 => ((sub_10572) ((pred_16) __10573) n_10575)
    end

def mul_19 :=
  fun mul_10576 (__10577) -> (__10578) ->
    match __10577 with
    | zero_6  => (zero_6 )
    | succ_7 n_10579 => ((add_17) __10578 ((mul_10576) n_10579 __10578))
    end

def div_20 :=
  fun div_10580 (x_10581) -> (y_10582) ->
    match ((lt_15) x_10581 y_10582) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_10583 :=
        fun loop_10584 (x_10585) -> (y_10586) ->
          match ((sub_18) x_10585 ((pred_16) y_10586)) with
          | zero_6  => (zero_6 )
          | succ_7 n_10587 => (succ_7 ((loop_10584) n_10587 y_10586))
          end
      in ((loop_10583) x_10581 y_10582)
    end

def rem_21 :=
  fun rem_10588 (x_10589) -> (y_10590) ->
    ((sub_18) x_10589 ((mul_19) ((div_20) x_10589 y_10590) y_10590))

def free_listUU_65 :=
  fun free_list_10591 (A_10592) -> (f_10593) -> (__10594) ->
    match __10594 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10595 tl_10596 =>
      let __10597 := ((f_10593) hd_10595) in
      ((free_list_10591) NULL f_10593 tl_10596)
    end

def free_listUL_64 :=
  fun free_list_10598 (A_10599) -> (f_10600) -> (__10601) ->
    match __10601 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10602 tl_10603 =>
      let __10604 := ((f_10600) hd_10602) in
      ((free_list_10598) NULL f_10600 tl_10603)
    end

def free_listLL_62 :=
  fun free_list_10605 (A_10606) -> (f_10607) -> (__10608) ->
    match __10608 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10609 tl_10610 =>
      let __10611 := ((f_10607) hd_10609) in
      ((free_list_10605) NULL f_10607 tl_10610)
    end

def pow_25 :=
  fun pow_10612 (x_10613) -> (y_10614) ->
    let loop_10615 :=
      fun loop_10616 (acc_10617) -> (y_10618) ->
        match (__lte__ y_10618 0) with
        | true_4 => acc_10617
        | false_5 =>
          ((loop_10616) (__mul__ x_10613 acc_10617) (__sub__ y_10618 1))
        end
    in ((loop_10615) 1 y_10614)

def powm_26 :=
  fun powm_10619 (x_10620) -> (y_10621) -> (m_10622) ->
    let loop_10623 :=
      fun loop_10624 (acc_10625) -> (y_10626) ->
        match (__lte__ y_10626 0) with
        | true_4 => acc_10625
        | false_5 =>
          ((loop_10624)
            (__mod__ (__mul__ x_10620 acc_10625) m_10622) (__sub__ y_10626 1))
        end
    in ((loop_10623) 1 y_10621)

def ord_27 := fun ord_10627 (c_10628) -> (__ord__ c_10628)

def chr_28 := fun chr_10629 (i_10630) -> (__chr__ i_10630)

def str_29 := fun str_10631 (c_10632) -> (__push__ "" c_10632)

def strlen_30 := fun strlen_10633 (s_10634) -> (__size__ s_10634)

def splitU_75 :=
  fun split_10635 (__10636) ->
    match __10636 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_10637 tl_10638 =>
      match tl_10638 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10637 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_10639 tl_10640 =>
        match ((split_10635) tl_10640) with
        | ex1UU_33 m_10641 n_10642 =>
          (ex1UU_33
            (consUU_25 hd_10637 m_10641) (consUU_25 hd_10639 n_10642))
        end
      end
    end

def splitL_74 :=
  fun split_10643 (__10644) ->
    match __10644 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_10645 tl_10646 =>
      match tl_10646 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10645 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_10647 tl_10648 =>
        match ((split_10643) tl_10648) with
        | ex1LL_30 m_10649 n_10650 =>
          (ex1LL_30
            (consUL_23 hd_10645 m_10649) (consUL_23 hd_10647 n_10650))
        end
      end
    end

def mergeU_77 :=
  fun merge_10651 (__10652) -> (__10653) -o
    match __10652 with
    | nilUU_24  => __10653
    | consUU_25 hd_10654 tl_10655 =>
      match __10653 with
      | nilUU_24  => (consUU_25 hd_10654 tl_10655)
      | consUU_25 hd_10656 tl_10657 =>
        match (__lte__ hd_10654 hd_10656) with
        | true_4 =>
          (consUU_25
            hd_10654 ((merge_10651) tl_10655 (consUU_25 hd_10656 tl_10657)))
        | false_5 =>
          (consUU_25
            hd_10656 ((merge_10651) (consUU_25 hd_10654 tl_10655) tl_10657))
        end
      end
    end

def mergeL_76 :=
  fun merge_10658 (__10659) -> (__10660) -o
    match __10659 with
    | nilUL_22  => __10660
    | consUL_23 hd_10661 tl_10662 =>
      match __10660 with
      | nilUL_22  => (consUL_23 hd_10661 tl_10662)
      | consUL_23 hd_10663 tl_10664 =>
        match (__lte__ hd_10661 hd_10663) with
        | true_4 =>
          (consUL_23
            hd_10661 ((merge_10658) tl_10662 (consUL_23 hd_10663 tl_10664)))
        | false_5 =>
          (consUL_23
            hd_10663 ((merge_10658) (consUL_23 hd_10661 tl_10662) tl_10664))
        end
      end
    end

def msortU_79 :=
  fun msort_10665 (__10666) ->
    match __10666 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_10667 tl_10668 =>
      match tl_10668 with
      | nilUU_24  => (consUU_25 hd_10667 (nilUU_24 ))
      | consUU_25 hd_10669 tl_10670 =>
        match ((splitU_75)
                (consUU_25 hd_10667 (consUU_25 hd_10669 tl_10670))) with
        | ex1UU_33 m_10671 n_10672 =>
          ((mergeU_77) ((msort_10665) m_10671) ((msort_10665) n_10672))
        end
      end
    end

def msortL_78 :=
  fun msort_10673 (__10674) ->
    match __10674 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_10675 tl_10676 =>
      match tl_10676 with
      | nilUL_22  => (consUL_23 hd_10675 (nilUL_22 ))
      | consUL_23 hd_10677 tl_10678 =>
        match ((splitL_74)
                (consUL_23 hd_10675 (consUL_23 hd_10677 tl_10678))) with
        | ex1LL_30 m_10679 n_10680 =>
          ((mergeL_76) ((msort_10673) m_10679) ((msort_10673) n_10680))
        end
      end
    end

-----------------------------------------

def idU_35 := lam (A_10894) -> (m_10895) -> m_10895

def idL_34 := lam (A_10896) -> (m_10897) -> m_10897

def rwlUU_39 :=
  lam (A_10898) -> (m_10899) -> (n_10900) -> (B_10901) -> (__10902) ->
  (__10903) -> __10903

def rwlUL_38 :=
  lam (A_10904) -> (m_10905) -> (n_10906) -> (B_10907) -> (__10908) ->
  (__10909) -> __10909

def rwlLU_37 :=
  lam (A_10910) -> (m_10911) -> (n_10912) -> (B_10913) -> (__10914) ->
  (__10915) -> __10915

def rwlLL_36 :=
  lam (A_10916) -> (m_10917) -> (n_10918) -> (B_10919) -> (__10920) ->
  (__10921) -> __10921

def rwrUU_43 :=
  lam (A_10922) -> (m_10923) -> (n_10924) -> (B_10925) -> (__10926) ->
  (__10927) -> __10927

def rwrUL_42 :=
  lam (A_10928) -> (m_10929) -> (n_10930) -> (B_10931) -> (__10932) ->
  (__10933) -> __10933

def rwrLU_41 :=
  lam (A_10934) -> (m_10935) -> (n_10936) -> (B_10937) -> (__10938) ->
  (__10939) -> __10939

def rwrLL_40 :=
  lam (A_10940) -> (m_10941) -> (n_10942) -> (B_10943) -> (__10944) ->
  (__10945) -> __10945

def sing_elimUU_57 := lam (A_10946) -> (x_10947) -> (__10948) -> __10948

def sing_elimUL_56 := lam (A_10949) -> (x_10950) -> (__10951) -> __10951

def sing_elimLU_55 := lam (A_10952) -> (x_10953) -> (__10954) -> !!

def sing_elimLL_54 := lam (A_10955) -> (x_10956) -> (__10957) -> __10957

def not_10 :=
  lam (__10958) ->
    match __10958 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__10959) -> (__10960) ->
    match __10959 with
    | true_4 =>
      match __10960 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__10961) -> (__10962) ->
    match __10961 with
    | true_4 => true_4
    | false_5 =>
      match __10962 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__10963) -> (__10964) -o
    match __10963 with
    | true_4 =>
      match __10964 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __10964 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_10965 (__10966) -> (__10967) ->
    match __10966 with
    | zero_6  => true_4
    | succ_7 n_10968 =>
      match __10967 with
      | zero_6  => false_5 | succ_7 n_10969 => ((lte_10965) n_10968 n_10969)
      end
    end

def lt_15 :=
  lam (x_10970) -> (y_10971) -> ((lte_14) (succ_7 x_10970) y_10971)

def pred_16 :=
  lam (__10972) ->
    match __10972 with
    | zero_6  => (zero_6 ) | succ_7 n_10973 => n_10973
    end

def add_17 :=
  fun add_10974 (__10975) -> (__10976) ->
    match __10975 with
    | zero_6  => __10976
    | succ_7 n_10977 => (succ_7 ((add_10974) n_10977 __10976))
    end

def sub_18 :=
  fun sub_10978 (__10979) -> (__10980) ->
    match __10980 with
    | zero_6  => __10979
    | succ_7 n_10981 => ((sub_10978) ((pred_16) __10979) n_10981)
    end

def mul_19 :=
  fun mul_10982 (__10983) -> (__10984) ->
    match __10983 with
    | zero_6  => (zero_6 )
    | succ_7 n_10985 => ((add_17) __10984 ((mul_10982) n_10985 __10984))
    end

def div_20 :=
  lam (x_10986) -> (y_10987) ->
    match ((lt_15) x_10986 y_10987) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_10988 :=
        fun loop_10989 (x_10990) -> (y_10991) ->
          match ((sub_18) x_10990 ((pred_16) y_10991)) with
          | zero_6  => (zero_6 )
          | succ_7 n_10992 => (succ_7 ((loop_10989) n_10992 y_10991))
          end
      in ((loop_10988) x_10986 y_10987)
    end

def rem_21 :=
  lam (x_10993) -> (y_10994) ->
    ((sub_18) x_10993 ((mul_19) ((div_20) x_10993 y_10994) y_10994))

def free_listUU_65 :=
  fun free_list_10995 (A_10996) -> (f_10997) -> (__10998) ->
    match __10998 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10999 tl_11000 =>
      let __11001 := ((f_10997) hd_10999) in
      ((free_list_10995) NULL f_10997 tl_11000)
    end

def free_listUL_64 :=
  fun free_list_11002 (A_11003) -> (f_11004) -> (__11005) ->
    match __11005 with
    | nilUL_22  => tt_3
    | consUL_23 hd_11006 tl_11007 =>
      let __11008 := ((f_11004) hd_11006) in
      ((free_list_11002) NULL f_11004 tl_11007)
    end

def free_listLL_62 :=
  fun free_list_11009 (A_11010) -> (f_11011) -> (__11012) ->
    match __11012 with
    | nilLL_18  => tt_3
    | consLL_19 hd_11013 tl_11014 =>
      let __11015 := ((f_11011) hd_11013) in
      ((free_list_11009) NULL f_11011 tl_11014)
    end

def pow_25 :=
  lam (x_11016) -> (y_11017) ->
    let loop_11018 :=
      fun loop_11019 (acc_11020) -> (y_11021) ->
        match (__lte__ y_11021 0) with
        | true_4 => acc_11020
        | false_5 =>
          ((loop_11019) (__mul__ x_11016 acc_11020) (__sub__ y_11021 1))
        end
    in ((loop_11018) 1 y_11017)

def powm_26 :=
  lam (x_11022) -> (y_11023) -> (m_11024) ->
    let loop_11025 :=
      fun loop_11026 (acc_11027) -> (y_11028) ->
        match (__lte__ y_11028 0) with
        | true_4 => acc_11027
        | false_5 =>
          ((loop_11026)
            (__mod__ (__mul__ x_11022 acc_11027) m_11024) (__sub__ y_11028 1))
        end
    in ((loop_11025) 1 y_11023)

def ord_27 := lam (c_11029) -> (__ord__ c_11029)

def chr_28 := lam (i_11030) -> (__chr__ i_11030)

def str_29 := lam (c_11031) -> (__push__ "" c_11031)

def strlen_30 := lam (s_11032) -> (__size__ s_11032)

def splitU_75 :=
  fun split_11033 (__11034) ->
    match __11034 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_11035 tl_11036 =>
      match tl_11036 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_11035 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_11037 tl_11038 =>
        match ((split_11033) tl_11038) with
        | ex1UU_33 m_11039 n_11040 =>
          (ex1UU_33
            (consUU_25 hd_11035 m_11039) (consUU_25 hd_11037 n_11040))
        end
      end
    end

def splitL_74 :=
  fun split_11041 (__11042) ->
    match __11042 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_11043 tl_11044 =>
      match tl_11044 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_11043 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_11045 tl_11046 =>
        match ((split_11041) tl_11046) with
        | ex1LL_30 m_11047 n_11048 =>
          (ex1LL_30
            (consUL_23 hd_11043 m_11047) (consUL_23 hd_11045 n_11048))
        end
      end
    end

def mergeU_77 :=
  fun merge_11049 (__11050) -> (__11051) -o
    match __11050 with
    | nilUU_24  => __11051
    | consUU_25 hd_11052 tl_11053 =>
      match __11051 with
      | nilUU_24  => (consUU_25 hd_11052 tl_11053)
      | consUU_25 hd_11054 tl_11055 =>
        match (__lte__ hd_11052 hd_11054) with
        | true_4 =>
          (consUU_25
            hd_11052 ((merge_11049) tl_11053 (consUU_25 hd_11054 tl_11055)))
        | false_5 =>
          (consUU_25
            hd_11054 ((merge_11049) (consUU_25 hd_11052 tl_11053) tl_11055))
        end
      end
    end

def mergeL_76 :=
  fun merge_11056 (__11057) -> (__11058) -o
    match __11057 with
    | nilUL_22  => __11058
    | consUL_23 hd_11059 tl_11060 =>
      match __11058 with
      | nilUL_22  => (consUL_23 hd_11059 tl_11060)
      | consUL_23 hd_11061 tl_11062 =>
        match (__lte__ hd_11059 hd_11061) with
        | true_4 =>
          (consUL_23
            hd_11059 ((merge_11056) tl_11060 (consUL_23 hd_11061 tl_11062)))
        | false_5 =>
          (consUL_23
            hd_11061 ((merge_11056) (consUL_23 hd_11059 tl_11060) tl_11062))
        end
      end
    end

def msortU_79 :=
  fun msort_11063 (__11064) ->
    match __11064 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_11065 tl_11066 =>
      match tl_11066 with
      | nilUU_24  => (consUU_25 hd_11065 (nilUU_24 ))
      | consUU_25 hd_11067 tl_11068 =>
        match ((splitU_75)
                (consUU_25 hd_11065 (consUU_25 hd_11067 tl_11068))) with
        | ex1UU_33 m_11069 n_11070 =>
          ((mergeU_77) ((msort_11063) m_11069) ((msort_11063) n_11070))
        end
      end
    end

def msortL_78 :=
  fun msort_11071 (__11072) ->
    match __11072 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_11073 tl_11074 =>
      match tl_11074 with
      | nilUL_22  => (consUL_23 hd_11073 (nilUL_22 ))
      | consUL_23 hd_11075 tl_11076 =>
        match ((splitL_74)
                (consUL_23 hd_11073 (consUL_23 hd_11075 tl_11076))) with
        | ex1LL_30 m_11077 n_11078 =>
          ((mergeL_76) ((msort_11071) m_11077) ((msort_11071) n_11078))
        end
      end
    end

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_231 := push("", c_230);
  return x_231;
}

fn strlen_232(s_233%U) {
  x_234 := size(s_233);
  return x_234;
}

fn splitU_235(__236%U) {
  match[U](__236){
    nilUU_24() => {
      x_238 := mkconstr(nilUU_24, []);
      x_239 := mkconstr(nilUU_24, []);
      x_240 := mkconstr(ex1UU_33, [x_238, x_239]);
      x_237 := x_240;
    }
    consUU_25(hd_241, tl_242) => {
      match[U](tl_242){
        nilUU_24() => {
          x_244 := mkconstr(nilUU_24, []);
          x_245 := mkconstr(consUU_25, [hd_241, x_244]);
          x_246 := mkconstr(nilUU_24, []);
          x_247 := mkconstr(ex1UU_33, [x_245, x_246]);
          x_243 := x_247;
        }
        consUU_25(hd_248, tl_249) => {
          x_251 := splitU_235(tl_249);
          match[L](x_251){
            ex1UU_33(m_252, n_253) => {
              x_254 := mkconstr(consUU_25, [hd_241, m_252]);
              x_255 := mkconstr(consUU_25, [hd_248, n_253]);
              x_256 := mkconstr(ex1UU_33, [x_254, x_255]);
              x_250 := x_256;
            }
          }
          x_243 := x_250;
        }
      }
      x_237 := x_243;
    }
  }
  return x_237;
}

fn splitL_257(__258%U) {
  match[L](__258){
    nilUL_22() => {
      x_260 := mkconstr(nilUL_22, []);
      x_261 := mkconstr(nilUL_22, []);
      x_262 := mkconstr(ex1LL_30, [x_260, x_261]);
      x_259 := x_262;
    }
    consUL_23(hd_263, tl_264) => {
      match[L](tl_264){
        nilUL_22() => {
          x_266 := mkconstr(nilUL_22, []);
          x_267 := mkconstr(consUL_23, [hd_263, x_266]);
          x_268 := mkconstr(nilUL_22, []);
          x_269 := mkconstr(ex1LL_30, [x_267, x_268]);
          x_265 := x_269;
        }
        consUL_23(hd_270, tl_271) => {
          x_273 := splitL_257(tl_271);
          match[L](x_273){
            ex1LL_30(m_274, n_275) => {
              x_276 := mkconstr(consUL_23, [hd_263, m_274]);
              x_277 := mkconstr(consUL_23, [hd_270, n_275]);
              x_278 := mkconstr(ex1LL_30, [x_276, x_277]);
              x_272 := x_278;
            }
          }
          x_265 := x_272;
        }
      }
      x_259 := x_265;
    }
  }
  return x_259;
}

fn mergeU_279(__280%U, __281%L) {
  match[U](__280){
    nilUU_24() => {
      x_282 := __281;
    }
    consUU_25(hd_283, tl_284) => {
      match[U](__281){
        nilUU_24() => {
          x_286 := mkconstr(consUU_25, [hd_283, tl_284]);
          x_285 := x_286;
        }
        consUU_25(hd_287, tl_288) => {
          x_290 := lte(hd_283, hd_287);
          match(x_290){
            true_4() => {
              x_292 := mkconstr(consUU_25, [hd_287, tl_288]);
              x_291 := mergeU_279(tl_284, x_292);
              x_293 := mkconstr(consUU_25, [hd_283, x_291]);
              x_289 := x_293;
            }
            false_5() => {
              x_295 := mkconstr(consUU_25, [hd_283, tl_284]);
              x_294 := mergeU_279(x_295, tl_288);
              x_296 := mkconstr(consUU_25, [hd_287, x_294]);
              x_289 := x_296;
            }
          }
          x_285 := x_289;
        }
      }
      x_282 := x_285;
    }
  }
  return x_282;
}

fn mergeL_297(__298%U, __299%L) {
  match[L](__298){
    nilUL_22() => {
      x_300 := __299;
    }
    consUL_23(hd_301, tl_302) => {
      match[L](__299){
        nilUL_22() => {
          x_304 := mkconstr(consUL_23, [hd_301, tl_302]);
          x_303 := x_304;
        }
        consUL_23(hd_305, tl_306) => {
          x_308 := lte(hd_301, hd_305);
          match(x_308){
            true_4() => {
              x_310 := mkconstr(consUL_23, [hd_305, tl_306]);
              x_309 := mergeL_297(tl_302, x_310);
              x_311 := mkconstr(consUL_23, [hd_301, x_309]);
              x_307 := x_311;
            }
            false_5() => {
              x_313 := mkconstr(consUL_23, [hd_301, tl_302]);
              x_312 := mergeL_297(x_313, tl_306);
              x_314 := mkconstr(consUL_23, [hd_305, x_312]);
              x_307 := x_314;
            }
          }
          x_303 := x_307;
        }
      }
      x_300 := x_303;
    }
  }
  return x_300;
}

fn msortU_315(__316%U) {
  match[U](__316){
    nilUU_24() => {
      x_318 := mkconstr(nilUU_24, []);
      x_317 := x_318;
    }
    consUU_25(hd_319, tl_320) => {
      match[U](tl_320){
        nilUU_24() => {
          x_322 := mkconstr(nilUU_24, []);
          x_323 := mkconstr(consUU_25, [hd_319, x_322]);
          x_321 := x_323;
        }
        consUU_25(hd_324, tl_325) => {
          x_328 := mkconstr(consUU_25, [hd_324, tl_325]);
          x_329 := mkconstr(consUU_25, [hd_319, x_328]);
          x_327 := splitU_235(x_329);
          match[L](x_327){
            ex1UU_33(m_330, n_331) => {
              x_333 := msortU_315(m_330);
              x_334 := msortU_315(n_331);
              x_332 := mergeU_279(x_333, x_334);
              x_326 := x_332;
            }
          }
          x_321 := x_326;
        }
      }
      x_317 := x_321;
    }
  }
  return x_317;
}

fn msortL_335(__336%U) {
  match[L](__336){
    nilUL_22() => {
      x_338 := mkconstr(nilUL_22, []);
      x_337 := x_338;
    }
    consUL_23(hd_339, tl_340) => {
      match[L](tl_340){
        nilUL_22() => {
          x_342 := mkconstr(nilUL_22, []);
          x_343 := mkconstr(consUL_23, [hd_339, x_342]);
          x_341 := x_343;
        }
        consUL_23(hd_344, tl_345) => {
          x_348 := mkconstr(consUL_23, [hd_344, tl_345]);
          x_349 := mkconstr(consUL_23, [hd_339, x_348]);
          x_347 := splitL_257(x_349);
          match[L](x_347){
            ex1LL_30(m_350, n_351) => {
              x_353 := msortL_335(m_350);
              x_354 := msortL_335(n_351);
              x_352 := mergeL_297(x_353, x_354);
              x_346 := x_352;
            }
          }
          x_341 := x_346;
        }
      }
      x_337 := x_341;
    }
  }
  return x_337;
}

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_231 := push("", c_230);
  return x_231;
}

fn strlen_232(s_233%U) {
  x_234 := size(s_233);
  return x_234;
}

fn splitU_235(__236%U) {
  match[U](__236){
    nilUU_24() => {
      x_238 := mkconstr(nilUU_24, []);
      x_239 := mkconstr(nilUU_24, []);
      x_240 := mkconstr(ex1UU_33, [x_238, x_239]);
      x_237 := x_240;
    }
    consUU_25(hd_241, tl_242) => {
      match[U](tl_242){
        nilUU_24() => {
          x_244 := mkconstr(nilUU_24, []);
          x_245 := mkconstr(consUU_25, [hd_241, x_244]);
          x_246 := mkconstr(nilUU_24, []);
          x_247 := mkconstr(ex1UU_33, [x_245, x_246]);
          x_243 := x_247;
        }
        consUU_25(hd_248, tl_249) => {
          x_251 := splitU_235(tl_249);
          match[L](x_251){
            ex1UU_33(m_252, n_253) => {
              x_254 := reconstr(x_251, consUU_25, hd_241, m_252);
              x_255 := mkconstr(consUU_25, [hd_248, n_253]);
              x_256 := mkconstr(ex1UU_33, [x_254, x_255]);
              x_250 := x_256;
            }
          }
          x_243 := x_250;
        }
      }
      x_237 := x_243;
    }
  }
  return x_237;
}

fn splitL_257(__258%U) {
  match[L](__258){
    nilUL_22() => {
      x_260 := reconstr(__258, nilUL_22, );
      x_261 := mkconstr(nilUL_22, []);
      x_262 := mkconstr(ex1LL_30, [x_260, x_261]);
      x_259 := x_262;
    }
    consUL_23(hd_263, tl_264) => {
      match[L](tl_264){
        nilUL_22() => {
          x_266 := reconstr(tl_264, nilUL_22, );
          x_267 := reconstr(__258, consUL_23, hd_263, x_266);
          x_268 := mkconstr(nilUL_22, []);
          x_269 := mkconstr(ex1LL_30, [x_267, x_268]);
          x_265 := x_269;
        }
        consUL_23(hd_270, tl_271) => {
          x_273 := splitL_257(tl_271);
          match[L](x_273){
            ex1LL_30(m_274, n_275) => {
              x_276 := reconstr(x_273, consUL_23, hd_263, m_274);
              x_277 := reconstr(tl_264, consUL_23, hd_270, n_275);
              x_278 := reconstr(__258, ex1LL_30, x_276, x_277);
              x_272 := x_278;
            }
          }
          x_265 := x_272;
        }
      }
      x_259 := x_265;
    }
  }
  return x_259;
}

fn mergeU_279(__280%U, __281%L) {
  match[U](__280){
    nilUU_24() => {
      x_282 := __281;
    }
    consUU_25(hd_283, tl_284) => {
      match[U](__281){
        nilUU_24() => {
          x_286 := mkconstr(consUU_25, [hd_283, tl_284]);
          x_285 := x_286;
        }
        consUU_25(hd_287, tl_288) => {
          x_290 := lte(hd_283, hd_287);
          match(x_290){
            true_4() => {
              x_292 := mkconstr(consUU_25, [hd_287, tl_288]);
              x_291 := mergeU_279(tl_284, x_292);
              x_293 := mkconstr(consUU_25, [hd_283, x_291]);
              x_289 := x_293;
            }
            false_5() => {
              x_295 := mkconstr(consUU_25, [hd_283, tl_284]);
              x_294 := mergeU_279(x_295, tl_288);
              x_296 := mkconstr(consUU_25, [hd_287, x_294]);
              x_289 := x_296;
            }
          }
          x_285 := x_289;
        }
      }
      x_282 := x_285;
    }
  }
  return x_282;
}

fn mergeL_297(__298%U, __299%L) {
  match[L](__298){
    nilUL_22() => {
      x_300 := __299;
      free(__298);
    }
    consUL_23(hd_301, tl_302) => {
      match[L](__299){
        nilUL_22() => {
          x_304 := reconstr(__298, consUL_23, hd_301, tl_302);
          x_303 := x_304;
          free(__299);
        }
        consUL_23(hd_305, tl_306) => {
          x_308 := lte(hd_301, hd_305);
          match(x_308){
            true_4() => {
              x_310 := reconstr(__299, consUL_23, hd_305, tl_306);
              x_309 := mergeL_297(tl_302, x_310);
              x_311 := reconstr(__298, consUL_23, hd_301, x_309);
              x_307 := x_311;
            }
            false_5() => {
              x_313 := reconstr(__299, consUL_23, hd_301, tl_302);
              x_312 := mergeL_297(x_313, tl_306);
              x_314 := reconstr(__298, consUL_23, hd_305, x_312);
              x_307 := x_314;
            }
          }
          x_303 := x_307;
        }
      }
      x_300 := x_303;
    }
  }
  return x_300;
}

fn msortU_315(__316%U) {
  match[U](__316){
    nilUU_24() => {
      x_318 := mkconstr(nilUU_24, []);
      x_317 := x_318;
    }
    consUU_25(hd_319, tl_320) => {
      match[U](tl_320){
        nilUU_24() => {
          x_322 := mkconstr(nilUU_24, []);
          x_323 := mkconstr(consUU_25, [hd_319, x_322]);
          x_321 := x_323;
        }
        consUU_25(hd_324, tl_325) => {
          x_328 := mkconstr(consUU_25, [hd_324, tl_325]);
          x_329 := mkconstr(consUU_25, [hd_319, x_328]);
          x_327 := splitU_235(x_329);
          match[L](x_327){
            ex1UU_33(m_330, n_331) => {
              x_333 := msortU_315(m_330);
              x_334 := msortU_315(n_331);
              x_332 := mergeU_279(x_333, x_334);
              x_326 := x_332;
              free(x_327);
            }
          }
          x_321 := x_326;
        }
      }
      x_317 := x_321;
    }
  }
  return x_317;
}

fn msortL_335(__336%U) {
  match[L](__336){
    nilUL_22() => {
      x_338 := reconstr(__336, nilUL_22, );
      x_337 := x_338;
    }
    consUL_23(hd_339, tl_340) => {
      match[L](tl_340){
        nilUL_22() => {
          x_342 := reconstr(tl_340, nilUL_22, );
          x_343 := reconstr(__336, consUL_23, hd_339, x_342);
          x_341 := x_343;
        }
        consUL_23(hd_344, tl_345) => {
          x_348 := reconstr(tl_340, consUL_23, hd_344, tl_345);
          x_349 := reconstr(__336, consUL_23, hd_339, x_348);
          x_347 := splitL_257(x_349);
          match[L](x_347){
            ex1LL_30(m_350, n_351) => {
              x_353 := msortL_335(m_350);
              x_354 := msortL_335(n_351);
              x_352 := mergeL_297(x_353, x_354);
              x_346 := x_352;
              free(x_347);
            }
          }
          x_341 := x_346;
        }
      }
      x_337 := x_341;
    }
  }
  return x_337;
}

-----------------------------------------

