[Definition {name = "append"; relv = R;
   body =
   (Binder (["s"; "t"],
      ((Fun (
          (Pi (N, U, (Type (SId "s")),
             (Binder ("A",
                (Pi (R, U,
                   (App
                      [(Inst ("list", [(SId "s"); (SId "t")], I));
                        (Id ("A", I))]),
                   (Binder ("_",
                      (Pi (R, L,
                         (App
                            [(Inst ("list", [(SId "s"); (SId "t")], I));
                              (Id ("A", I))]),
                         (Binder ("_",
                            (App
                               [(Inst ("list", [(SId "s"); (SId "t")], I));
                                 (Id ("A", I))])
                            ))
                         ))
                      ))
                   ))
                ))
             )),
          (Binder ((Some "append"),
             [([(PId "A"); (PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
               ([(PId "A"); (PBOpr ("::", (PId "x"), (PId "xs"))); (PId "ys")
                  ],
                (Some (BOpr ("::", (Id ("x", I)),
                         (App
                            [(Id ("append", I)); (Id ("xs", I));
                              (Id ("ys", I))])
                         ))))
               ]
             )),
          [I])),
       (Pi (N, U, (Type (SId "s")),
          (Binder ("A",
             (Pi (R, U,
                (App
                   [(Inst ("list", [(SId "s"); (SId "t")], I)); (Id ("A", I))
                     ]),
                (Binder ("_",
                   (Pi (R, L,
                      (App
                         [(Inst ("list", [(SId "s"); (SId "t")], I));
                           (Id ("A", I))]),
                      (Binder ("_",
                         (App
                            [(Inst ("list", [(SId "s"); (SId "t")], I));
                              (Id ("A", I))])
                         ))
                      ))
                   ))
                ))
             ))
          )))
      ));
   view = [I]};
  Definition {name = "len"; relv = N;
    body =
    (Binder (["s"; "t"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U,
                    (App
                       [(Inst ("list", [(SId "_"); (SId "t")], I));
                         (Id ("A", I))]),
                    (Binder ("_", (Id ("nat", I))))))
                 ))
              )),
           (Binder ((Some "len"),
              [([(PId "A"); (PId "nil")], (Some (Id ("zero", I))));
                ([(PId "A"); (PBOpr ("::", (PId "_"), (PId "tl")))],
                 (Some (App
                          [(Id ("succ", I));
                            (App [(Id ("len", I)); (Id ("tl", I))])])))
                ]
              )),
           [I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U,
                 (App
                    [(Inst ("list", [(SId "_"); (SId "t")], I));
                      (Id ("A", I))]),
                 (Binder ("_", (Id ("nat", I))))))
              ))
           )))
       ));
    view = [I]};
  Definition {name = "append_len"; relv = N;
    body =
    (Binder (["s"; "t"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U,
                    (App
                       [(Inst ("list", [(SId "_"); (SId "t")], I));
                         (Id ("A", I))]),
                    (Binder ("xs",
                       (Pi (R, U,
                          (App
                             [(Inst ("list", [(SId "_"); (SId "t")], I));
                               (Id ("A", I))]),
                          (Binder ("ys",
                             (BOpr ("=",
                                (App
                                   [(Id ("len", I));
                                     (App
                                        [(Id ("append", I)); (Id ("xs", I));
                                          (Id ("ys", I))])
                                     ]),
                                (App
                                   [(Id ("add", I));
                                     (App [(Id ("len", I)); (Id ("xs", I))]);
                                     (App [(Id ("len", I)); (Id ("ys", I))])])
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "append_len"),
              [([(PId "A"); (PId "nil"); (PId "ys")], (Some (Id ("refl", I))));
                ([(PId "A"); (PBOpr ("::", (PId "x"), (PId "xs")));
                   (PId "ys")],
                 (Some (App
                          [(Id ("rwl", I));
                            (Fun ((Pi (R, U, IMeta, (Binder ("n", IMeta)))),
                               (Binder (None,
                                  [([(PId "n")],
                                    (Some (BOpr ("=",
                                             (App
                                                [(Id ("succ", I));
                                                  (App
                                                     [(Id ("len", I));
                                                       (App
                                                          [(Id ("append", I));
                                                            (Id ("xs", I));
                                                            (Id ("ys", I))])
                                                       ])
                                                  ]),
                                             (App
                                                [(Id ("succ", I));
                                                  (Id ("n", I))])
                                             ))))
                                    ]
                                  )),
                               []));
                            (App
                               [(Id ("append_len", I)); (Id ("xs", I));
                                 (Id ("ys", I))]);
                            (Id ("refl", I))])))
                ]
              )),
           [I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U,
                 (App
                    [(Inst ("list", [(SId "_"); (SId "t")], I));
                      (Id ("A", I))]),
                 (Binder ("xs",
                    (Pi (R, U,
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I));
                            (Id ("A", I))]),
                       (Binder ("ys",
                          (BOpr ("=",
                             (App
                                [(Id ("len", I));
                                  (App
                                     [(Id ("append", I)); (Id ("xs", I));
                                       (Id ("ys", I))])
                                  ]),
                             (App
                                [(Id ("add", I));
                                  (App [(Id ("len", I)); (Id ("xs", I))]);
                                  (App [(Id ("len", I)); (Id ("ys", I))])])
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I]}
  ]

[parse success]

-----------------------------------------

#[program]
def append_33‹s_429,t_430› :
  ∀ {A_431 : Type‹s_429›} ->
    (list_6‹s_429,t_430› A_431) ->
      (list_6‹s_429,t_430› A_431) -o (list_6‹s_429,t_430› A_431)
:=
  fun append_434 :
    ∀ {A_435 : Type‹s_429›} ->
      (list_6‹s_429,t_430› A_435) ->
        (list_6‹s_429,t_430› A_435) -o (list_6‹s_429,t_430› A_435)
  | A_438, nil_8, ys_439 => ys_439
  | A_440, (cons_9 x_441 xs_442), ys_443 =>
    (cons_9‹??_54,??_55›
      ?_70[0;0] x_441 ((append_434) ?_69[0;0] xs_442 ys_443))

#[logical]
def len_34‹s_444,t_445› :
  ∀ {A_446 : Type‹s_444›} -> (list_6‹??_57,t_445› A_446) -> nat_5
:=
  fun len_448 :
    ∀ {A_449 : Type‹s_444›} -> (list_6‹??_56,t_445› A_449) -> nat_5
  | A_451, nil_8 => zero_6
  | A_452, (cons_9 _453 tl_454) =>
    (succ_7‹› ((len_448) ?_71[0;0] tl_454))

#[logical]
def append_len_35‹s_455,t_456› :
  ∀ {A_457 : Type‹s_455›} ->
    ∀ (xs_458 : (list_6‹??_78,t_456› A_457)) ->
      ∀ (ys_459 : (list_6‹??_79,t_456› A_457)) ->
        (eq_1‹??_88›
          ?_94[0;0]
          ((len_34‹??_82,??_83›)
            ?_91[0;0] ((append_33‹??_80,??_81›) ?_90[0;0] xs_458 ys_459))
          ((add_18)
            ((len_34‹??_84,??_85›) ?_92[0;0] xs_458)
            ((len_34‹??_86,??_87›) ?_93[0;0] ys_459)))
:=
  fun append_len_460 :
    ∀ {A_461 : Type‹s_455›} ->
      ∀ (xs_462 : (list_6‹??_58,t_456› A_461)) ->
        ∀ (ys_463 : (list_6‹??_59,t_456› A_461)) ->
          (eq_1‹??_68›
            ?_76[0;0]
            ((len_34‹??_62,??_63›)
              ?_73[0;0]
              ((append_33‹??_60,??_61›) ?_72[0;0] xs_462 ys_463))
            ((add_18)
              ((len_34‹??_64,??_65›) ?_74[0;0] xs_462)
              ((len_34‹??_66,??_67›) ?_75[0;0] ys_463)))
  | A_464, nil_8, ys_465 => (refl_1‹??_69› ?_77[0;0] ?_78[0;0])
  | A_466, (cons_9 x_467 xs_468), ys_469 =>
    ((rwl_2‹??_76,??_77›)
      ?_89[0;0] ?_88[0;0] ?_87[0;0]
      fun _470 : ?_79[0;0] -> ?_80[0;0]
      | n_472 =>
        (eq_1‹??_74›
          ?_83[0;0]
          (succ_7‹›
            ((len_34‹??_72,??_73›)
              ?_82[0;0]
              ((append_33‹??_70,??_71›) ?_81[0;0] xs_468 ys_469)))
          (succ_7‹› n_472))
      ((append_len_460) ?_84[0;0] xs_468 ys_469)
      (refl_1‹??_75› ?_85[0;0] ?_86[0;0]))

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_5974› : ∀ (A_5975 : Type‹s_5974›) -> A_5975 -> A_5975 :=
  fun id_5977 : ∀ (A_5978 : Type‹s_5974›) -> A_5978 -> A_5978
  | A_5980, m_5981 => m_5981

#[logical]
inductive eq_1‹s_5982› (A_5983 : Type‹s_5982›) (m_5984 : A_5983):
  A_5983 -> U
where
| refl_1 : (eq_1‹s_5982› A_5983 m_5984 m_5984)

#[program]
def rwl_2‹s_5986,r_5987› :
  ∀ {A_5988 : Type‹s_5986›} ->
    ∀ {m_5989 : A_5988} ->
      ∀ {n_5990 : A_5988} ->
        ∀ {B_5991 : A_5988 -> Type‹r_5987›} ->
          {(eq_1‹s_5986› A_5988 m_5989 n_5990)} ->
            ((B_5991) m_5989) -> ((B_5991) n_5990)
:=
  fun rwl_5995 :
    ∀ {A_5996 : Type‹s_5986›} ->
      ∀ {m_5997 : A_5996} ->
        ∀ {n_5998 : A_5996} ->
          ∀ {B_5999 : A_5996 -> Type‹r_5987›} ->
            {(eq_1‹s_5986› A_5996 m_5997 n_5998)} ->
              ((B_5999) m_5997) -> ((B_5999) n_5998)
  | A_6003, m_6004, n_6005, B_6006, refl_1, __6007 => __6007

#[program]
def rwr_3‹s_6008,r_6009› :
  ∀ {A_6010 : Type‹s_6008›} ->
    ∀ {m_6011 : A_6010} ->
      ∀ {n_6012 : A_6010} ->
        ∀ {B_6013 : A_6010 -> Type‹r_6009›} ->
          {(eq_1‹s_6008› A_6010 m_6011 n_6012)} ->
            ((B_6013) n_6012) -> ((B_6013) m_6011)
:=
  fun rwr_6017 :
    ∀ {A_6018 : Type‹s_6008›} ->
      ∀ {m_6019 : A_6018} ->
        ∀ {n_6020 : A_6018} ->
          ∀ {B_6021 : A_6018 -> Type‹r_6009›} ->
            {(eq_1‹s_6008› A_6018 m_6019 n_6020)} ->
              ((B_6021) n_6020) -> ((B_6021) m_6019)
  | A_6025, m_6026, n_6027, B_6028, refl_1, __6029 => __6029

#[logical]
def congr_4‹s_6030,r_6031,t_6032› :
  ∀ (A_6033 : Type‹s_6030›) ->
    ∀ (B_6034 : Type‹r_6031›) ->
      ∀ (m_6035 : A_6033) ->
        ∀ (n_6036 : A_6033) ->
          ∀ (f_6037 : forall‹t_6032›(__6038 : A_6033), B_6034) ->
            (eq_1‹s_6030› A_6033 m_6035 n_6036) ->
              (eq_1‹r_6031› B_6034 ((f_6037) m_6035) ((f_6037) n_6036))
:=
  fun congr_6040 :
    ∀ (A_6041 : Type‹s_6030›) ->
      ∀ (B_6042 : Type‹r_6031›) ->
        ∀ (m_6043 : A_6041) ->
          ∀ (n_6044 : A_6041) ->
            ∀ (f_6045 : forall‹t_6032›(__6046 : A_6041), B_6042) ->
              (eq_1‹s_6030› A_6041 m_6043 n_6044) ->
                (eq_1‹r_6031› B_6042 ((f_6045) m_6043) ((f_6045) n_6044))
  | A_6048, B_6049, m_6050, n_6051, f_6052, refl_1 =>
    (refl_1‹r_6031› B_6049 ((f_6052) n_6051))

#[logical]
def axiom_K_5‹› :
  ∀ {A_6053 : U} ->
    ∀ {m_6054 : A_6053} ->
      ∀ (x_6055 : (eq_1‹U› A_6053 m_6054 m_6054)) ->
        (eq_1‹U›
          (eq_1‹U› A_6053 m_6054 m_6054) x_6055
          (refl_1‹U› A_6053 m_6054))
:=
  fun axiom_K_6056 :
    ∀ {A_6057 : U} ->
      ∀ {m_6058 : A_6057} ->
        ∀ (x_6059 : (eq_1‹U› A_6057 m_6058 m_6058)) ->
          (eq_1‹U›
            (eq_1‹U› A_6057 m_6058 m_6058) x_6059
            (refl_1‹U› A_6057 m_6058))
  | A_6060, m_6061, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_6060 m_6061 m_6061) (refl_1‹U› A_6060 m_6061))

#[program]
inductive sing_2‹s_6062,t_6063› (A_6064 : Type‹s_6062›):
  A_6064 -> Type‹t_6063›
where
| just_2 (m_6066 : A_6064) : (sing_2‹s_6062,t_6063› A_6064 m_6066)

#[logical]
def ssing_6‹s_6067› :
  ∀ (A_6068 : Type‹s_6067›) -> A_6068 -> Type‹s_6067›
:=
  fun ssing_6070 :
    ∀ (A_6071 : Type‹s_6067›) -> A_6071 -> Type‹s_6067›
  | A_6073, m_6074 => (sing_2‹s_6067,s_6067› A_6073 m_6074)

#[program]
def sing_elim_7‹s_6075,t_6076› :
  ∀ {A_6077 : Type‹s_6075›} ->
    ∀ {x_6078 : A_6077} ->
      (sing_2‹s_6075,t_6076› A_6077 x_6078) -> A_6077
:=
  fun sing_elim_6080 :
    ∀ {A_6081 : Type‹s_6075›} ->
      ∀ {x_6082 : A_6081} ->
        (sing_2‹s_6075,t_6076› A_6081 x_6082) -> A_6081
  | A_6084, x_6085, (just_2 m_6086) => m_6086

#[logical]
def sing_uniq_8‹s_6087,t_6088› :
  ∀ (A_6089 : Type‹s_6087›) ->
    ∀ (x0_6090 : A_6089) ->
      ∀ (x_6091 : (sing_2‹s_6087,t_6088› A_6089 x0_6090)) ->
        (eq_1‹s_6087›
          A_6089 x0_6090
          ((sing_elim_7‹s_6087,t_6088›) A_6089 x0_6090 x_6091))
:=
  fun sing_uniq_6092 :
    ∀ (A_6093 : Type‹s_6087›) ->
      ∀ (x0_6094 : A_6093) ->
        ∀ (x_6095 : (sing_2‹s_6087,t_6088› A_6093 x0_6094)) ->
          (eq_1‹s_6087›
            A_6093 x0_6094
            ((sing_elim_7‹s_6087,t_6088›) A_6093 x0_6094 x_6095))
  | A_6096, x0_6097, (just_2 m_6098) => (refl_1‹s_6087› A_6096 m_6098)

#[program]
inductive base_3‹s_6099› : Type‹s_6099› where
| tt_3 : base_3‹s_6099›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_6100 : unit_9) -> (eq_1‹U› base_3‹U› x_6100 tt_3‹U›)
:=
  fun unit_eta_6101 :
    ∀ (x_6102 : unit_9) -> (eq_1‹U› base_3‹U› x_6102 tt_3‹U›)
  | x_6103 =>
    (match x_6103 in
       ∀ (x0_6104 : base_3‹U›) -o
         (eq_1‹U› base_3‹U› x0_6104 tt_3‹U›)
     with
    | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›))

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  fun not_6106 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_6110 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __6113 => false_5

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_6116 : bool_4 -> bool_4 -> bool_4
  | true_4, __6119 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  fun xor_6122 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_6125 : nat_5) : nat_5

#[program]
def lte_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_6128 : nat_5 -> nat_5 -> bool_4
  | zero_6, __6131 => true_4
  | (succ_7 n_6132), zero_6 => false_5
  | (succ_7 n_6133), (succ_7 n_6134) => ((lte_6128) n_6133 n_6134)

#[program]
def lt_16‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_6137 : nat_5 -> nat_5 -> bool_4
  | x_6140, y_6141 => ((lte_15) (succ_7‹› x_6140) y_6141)

#[program]
def pred_17‹› : nat_5 -> nat_5 :=
  fun pred_6143 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_6145) => n_6145

#[program]
def add_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_6148 : nat_5 -> nat_5 -> nat_5
  | zero_6, __6151 => __6151
  | (succ_7 n_6152), __6153 => (succ_7‹› ((add_6148) n_6152 __6153))

#[program]
def sub_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_6156 : nat_5 -> nat_5 -> nat_5
  | __6159, zero_6 => __6159
  | __6160, (succ_7 n_6161) => ((sub_6156) ((pred_17) __6160) n_6161)

#[program]
def mul_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_6164 : nat_5 -> nat_5 -> nat_5
  | zero_6, __6167 => zero_6
  | (succ_7 n_6168), __6169 => ((add_18) __6169 ((mul_6164) n_6168 __6169))

#[program]
def div_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_6172 : nat_5 -> nat_5 -> nat_5
  | x_6175, y_6176 =>
    (match ((lt_16) x_6175 y_6176) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_6178 :=
        fun loop_6179 : nat_5 -> nat_5 -> nat_5
        | x_6182, y_6183 =>
          (match ((sub_19) x_6182 ((pred_17) y_6183)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_6185) => (succ_7‹› ((loop_6179) n_6185 y_6183)))
      in ((loop_6178) x_6175 y_6176))

#[program]
def rem_22‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_6188 : nat_5 -> nat_5 -> nat_5
  | x_6191, y_6192 =>
    ((sub_19) x_6191 ((mul_20) ((div_21) x_6191 y_6192) y_6192))

#[program]
inductive list_6‹s_6193,t_6194› (A_6195 : Type‹s_6193›):
  Type‹t_6194›
where
| nil_8 : (list_6‹s_6193,t_6194› A_6195)
| cons_9
    (hd_6196 : A_6195) (tl_6197 : (list_6‹s_6193,t_6194› A_6195))
    : (list_6‹s_6193,t_6194› A_6195)

#[program]
def free_list_23‹s_6198,t_6199› :
  ∀ {A_6200 : Type‹s_6198›} ->
    A_6200 -> unit_9 -> (list_6‹s_6198,t_6199› A_6200) -> unit_9
:=
  fun free_list_6204 :
    ∀ {A_6205 : Type‹s_6198›} ->
      A_6205 -> unit_9 -> (list_6‹s_6198,t_6199› A_6205) -> unit_9
  | A_6209, f_6210, nil_8 => tt_3‹U›
  | A_6211, f_6212, (cons_9 hd_6213 tl_6214) =>
    let __6215 := ((f_6212) hd_6213) in
    ((free_list_6204) A_6211 f_6212 tl_6214)

#[program]
inductive exists_7‹s_6216,r_6217› (A_6218 : Type‹s_6216›) (B_6219 : 
A_6218 -> Type‹r_6217›): L where
| ex_10
    (m_6221 : A_6218) {n_6222 : ((B_6219) m_6221)}
    : (exists_7‹s_6216,r_6217› A_6218 B_6219)

#[program]
inductive exists0_8‹s_6223,r_6224› (A_6225 : Type‹s_6223›) (B_6226 : 
A_6225 -> Type‹r_6224›): L where
| ex0_11
    {m_6228 : A_6225} (n_6229 : ((B_6226) m_6228))
    : (exists0_8‹s_6223,r_6224› A_6225 B_6226)

#[program]
inductive exists1_9‹s_6230,r_6231› (A_6232 : Type‹s_6230›) (B_6233 : 
A_6232 -> Type‹r_6231›): L where
| ex1_12
    (m_6235 : A_6232) (n_6236 : ((B_6233) m_6235))
    : (exists1_9‹s_6230,r_6231› A_6232 B_6233)

#[logical]
def prod0_24‹s_6237,r_6238› : Type‹s_6237› -> Type‹r_6238› -> L
:=
  fun prod0_6241 : Type‹s_6237› -> Type‹r_6238› -> L
  | A_6244, B_6245 =>
    (exists0_8‹s_6237,r_6238›
      A_6244 fun _6246 : A_6244 -> Type‹r_6238›
             | __6248 => B_6245)

#[logical]
def prod1_25‹s_6249,r_6250› : Type‹s_6249› -> Type‹r_6250› -> L
:=
  fun prod1_6253 : Type‹s_6249› -> Type‹r_6250› -> L
  | A_6256, B_6257 =>
    (exists1_9‹s_6249,r_6250›
      A_6256 fun _6258 : A_6256 -> Type‹r_6250›
             | __6260 => B_6257)

#[program]
def pow_26‹› : int -> int -> int :=
  fun pow_6263 : int -> int -> int
  | x_6266, y_6267 =>
    let loop_6268 :=
      fun loop_6269 : int -> int -> int
      | acc_6272, y_6273 =>
        (match (__lte__ y_6273 0) in bool_4 -o int with
        | true_4 => acc_6272
        | false_5 =>
          ((loop_6269) (__mul__ x_6266 acc_6272) (__sub__ y_6273 1)))
    in ((loop_6268) 1 y_6267)

#[program]
def powm_27‹› : int -> int -> int -> int :=
  fun powm_6278 : int -> int -> int -> int
  | x_6282, y_6283, m_6284 =>
    let loop_6285 :=
      fun loop_6286 : int -> int -> int
      | acc_6289, y_6290 =>
        (match (__lte__ y_6290 0) in bool_4 -o int with
        | true_4 => acc_6289
        | false_5 =>
          ((loop_6286)
            (__mod__ (__mul__ x_6282 acc_6289) m_6284) (__sub__ y_6290 1)))
    in ((loop_6285) 1 y_6283)

#[program]
def ord_28‹› : char -> int :=
  fun ord_6293 : char -> int
  | c_6295 => (__ord__ c_6295)

#[program]
def chr_29‹› : int -> char :=
  fun chr_6297 : int -> char
  | i_6299 => (__chr__ i_6299)

#[program]
def str_30‹› : char -> string :=
  fun str_6301 : char -> string
  | c_6303 => (__push__ "" c_6303)

#[program]
def strlen_31‹› : string -> int :=
  fun strlen_6305 : string -> int
  | s_6307 => (__size__ s_6307)

#[program]
def string_of_int_32‹› : int -> string :=
  fun string_of_int_6309 : int -> string
  | i_6311 =>
    let aux_6312 :=
      fun aux_6313 : int -> string
      | i_6315 =>
        (match (__lte__ 10 i_6315) in bool_4 -o string with
        | true_4 =>
          let r_6317 := (__mod__ i_6315 10) in
          let i_6318 := (__div__ i_6315 10) in
          (__push__ ((aux_6313) i_6318)
            ((chr_29) (__add__ r_6317 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_6315 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_6311) in bool_4 -o string with
    | true_4 => ((aux_6312) i_6311)
    | false_5 => (__cat__ "~" ((aux_6312) (__neg__ i_6311))))

#[program]
def append_33‹s_6320,t_6321› :
  ∀ {A_6322 : Type‹s_6320›} ->
    (list_6‹s_6320,t_6321› A_6322) ->
      (list_6‹s_6320,t_6321› A_6322) -o
        (list_6‹s_6320,t_6321› A_6322)
:=
  fun append_6325 :
    ∀ {A_6326 : Type‹s_6320›} ->
      (list_6‹s_6320,t_6321› A_6326) ->
        (list_6‹s_6320,t_6321› A_6326) -o
          (list_6‹s_6320,t_6321› A_6326)
  | A_6329, nil_8, __6330 => __6330
  | A_6331, (cons_9 hd_6332 tl_6333), __6334 =>
    (cons_9‹s_6320,t_6321›
      A_6331 hd_6332 ((append_6325) A_6331 tl_6333 __6334))

#[logical]
def len_34‹s_6335,t_6336› :
  ∀ {A_6337 : Type‹s_6335›} ->
    (list_6‹s_6335,t_6336› A_6337) -> nat_5
:=
  fun len_6339 :
    ∀ {A_6340 : Type‹s_6335›} ->
      (list_6‹s_6335,t_6336› A_6340) -> nat_5
  | A_6342, nil_8 => zero_6
  | A_6343, (cons_9 hd_6344 tl_6345) =>
    (succ_7‹› ((len_6339) A_6343 tl_6345))

#[logical]
def append_len_35‹s_6346,t_6347› :
  ∀ {A_6348 : Type‹s_6346›} ->
    ∀ (xs_6349 : (list_6‹s_6346,t_6347› A_6348)) ->
      ∀ (ys_6350 : (list_6‹s_6346,t_6347› A_6348)) ->
        (eq_1‹U›
          nat_5
          ((len_34‹s_6346,t_6347›)
            A_6348 ((append_33‹s_6346,t_6347›) A_6348 xs_6349 ys_6350))
          ((add_18)
            ((len_34‹s_6346,t_6347›) A_6348 xs_6349)
            ((len_34‹s_6346,t_6347›) A_6348 ys_6350)))
:=
  fun append_len_6351 :
    ∀ {A_6352 : Type‹s_6346›} ->
      ∀ (xs_6353 : (list_6‹s_6346,t_6347› A_6352)) ->
        ∀ (ys_6354 : (list_6‹s_6346,t_6347› A_6352)) ->
          (eq_1‹U›
            nat_5
            ((len_34‹s_6346,t_6347›)
              A_6352 ((append_33‹s_6346,t_6347›) A_6352 xs_6353 ys_6354))
            ((add_18)
              ((len_34‹s_6346,t_6347›) A_6352 xs_6353)
              ((len_34‹s_6346,t_6347›) A_6352 ys_6354)))
  | A_6355, nil_8, ys_6356 =>
    (refl_1‹U›
      nat_5
      ((len_34‹s_6346,t_6347›)
        A_6355
        ((append_33‹s_6346,t_6347›)
          A_6355 (nil_8‹s_6346,t_6347› A_6355) ys_6356)))
  | A_6357, (cons_9 hd_6358 tl_6359), ys_6360 =>
    ((rwl_2‹U,U›)
      nat_5
      ((len_34‹s_6346,t_6347›)
        A_6357 ((append_33‹s_6346,t_6347›) A_6357 tl_6359 ys_6360))
      ((add_18)
        ((len_34‹s_6346,t_6347›) A_6357 tl_6359)
        ((len_34‹s_6346,t_6347›) A_6357 ys_6360))
      fun _6361 : nat_5 -> U
      | __6363 =>
        (eq_1‹U›
          nat_5
          (succ_7‹›
            ((len_34‹s_6346,t_6347›)
              A_6357 ((append_33‹s_6346,t_6347›) A_6357 tl_6359 ys_6360)))
          (succ_7‹› __6363))
      ((append_len_6351) A_6357 tl_6359 ys_6360)
      (refl_1‹U›
        nat_5
        (succ_7‹›
          ((len_34‹s_6346,t_6347›)
            A_6357 ((append_33‹s_6346,t_6347›) A_6357 tl_6359 ys_6360)))))

[trans1e success]

-----------------------------------------

#[program]
def idU_37 := fun id_10169 (A_10170) -> (m_10171) ->
                m_10171

#[program]
def idL_36 := fun id_10172 (A_10173) -> (m_10174) ->
                m_10174

#[logical]
inductive eqU_11 where
| reflU_14 of layout[]

#[logical]
inductive eqL_10 where
| reflL_13 of layout[]

#[program]
def rwlUU_41 :=
  fun rwl_10175 {A_10176} -> {m_10177} -> {n_10178} -> {B_10179} ->
  {__10180} -> (__10181) ->
    (match {NULL} with
    | reflU_14  => __10181)

#[program]
def rwlUL_40 :=
  fun rwl_10182 {A_10183} -> {m_10184} -> {n_10185} -> {B_10186} ->
  {__10187} -> (__10188) ->
    (match {NULL} with
    | reflU_14  => __10188)

#[program]
def rwlLU_39 :=
  fun rwl_10189 {A_10190} -> {m_10191} -> {n_10192} -> {B_10193} ->
  {__10194} -> (__10195) ->
    (match {NULL} with
    | reflL_13  => __10195)

#[program]
def rwlLL_38 :=
  fun rwl_10196 {A_10197} -> {m_10198} -> {n_10199} -> {B_10200} ->
  {__10201} -> (__10202) ->
    (match {NULL} with
    | reflL_13  => __10202)

#[program]
def rwrUU_45 :=
  fun rwr_10203 {A_10204} -> {m_10205} -> {n_10206} -> {B_10207} ->
  {__10208} -> (__10209) ->
    (match {NULL} with
    | reflU_14  => __10209)

#[program]
def rwrUL_44 :=
  fun rwr_10210 {A_10211} -> {m_10212} -> {n_10213} -> {B_10214} ->
  {__10215} -> (__10216) ->
    (match {NULL} with
    | reflU_14  => __10216)

#[program]
def rwrLU_43 :=
  fun rwr_10217 {A_10218} -> {m_10219} -> {n_10220} -> {B_10221} ->
  {__10222} -> (__10223) ->
    (match {NULL} with
    | reflL_13  => __10223)

#[program]
def rwrLL_42 :=
  fun rwr_10224 {A_10225} -> {m_10226} -> {n_10227} -> {B_10228} ->
  {__10229} -> (__10230) ->
    (match {NULL} with
    | reflL_13  => __10230)

#[logical]
def congrUUU_53 := NULL

#[logical]
def congrUUL_52 := NULL

#[logical]
def congrULU_51 := NULL

#[logical]
def congrULL_50 := NULL

#[logical]
def congrLUU_49 := NULL

#[logical]
def congrLUL_48 := NULL

#[logical]
def congrLLU_47 := NULL

#[logical]
def congrLLL_46 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_15 where
| justUU_18 of layout[R]

#[program]
inductive singUL_14 where
| justUL_17 of layout[R]

#[program]
inductive singLU_13 where


#[program]
inductive singLL_12 where
| justLL_15 of layout[R]

#[logical]
def ssingU_55 := NULL

#[logical]
def ssingL_54 := NULL

#[program]
def sing_elimUU_59 :=
  fun sing_elim_10231 {A_10232} -> {x_10233} -> (__10234) ->
    (match __10234 with
    | justUU_18 m_10235 => m_10235)

#[program]
def sing_elimUL_58 :=
  fun sing_elim_10236 {A_10237} -> {x_10238} -> (__10239) ->
    (match __10239 with
    | justUL_17 m_10240 => m_10240)

#[program]
def sing_elimLU_57 :=
  fun sing_elim_10241 {A_10242} -> {x_10243} -> (__10244) ->
    (match __10244 with
    )

#[program]
def sing_elimLL_56 :=
  fun sing_elim_10245 {A_10246} -> {x_10247} -> (__10248) ->
    (match __10248 with
    | justLL_15 m_10249 => m_10249)

#[logical]
def sing_uniqUU_63 := NULL

#[logical]
def sing_uniqUL_62 := NULL

#[logical]
def sing_uniqLU_61 := NULL

#[logical]
def sing_uniqLL_60 := NULL

#[program]
inductive baseU_17 where
| ttU_20 of layout[]

#[program]
inductive baseL_16 where
| ttL_19 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_10250 (__10251) ->
    (match __10251 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_10252 (__10253) -> (__10254) ->
    (match __10253 with
    | true_4  =>
      (match __10254 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_10255 (__10256) -> (__10257) ->
    (match __10256 with
    | true_4  => true_4
    | false_5  =>
      (match __10257 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_10258 (__10259) -> (__10260) ->
    (match __10259 with
    | true_4  =>
      (match __10260 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __10260 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_10261 (__10262) -> (__10263) ->
    (match __10262 with
    | zero_6  => true_4
    | succ_7 n_10264 =>
      (match __10263 with
      | zero_6  => false_5 | succ_7 n_10265 => ((lte_10261) n_10264 n_10265)))

#[program]
def lt_16 :=
  fun lt_10266 (x_10267) -> (y_10268) ->
    ((lte_15) (succ_7 x_10267) y_10268)

#[program]
def pred_17 :=
  fun pred_10269 (__10270) ->
    (match __10270 with
    | zero_6  => zero_6 | succ_7 n_10271 => n_10271)

#[program]
def add_18 :=
  fun add_10272 (__10273) -> (__10274) ->
    (match __10273 with
    | zero_6  => __10274
    | succ_7 n_10275 => (succ_7 ((add_10272) n_10275 __10274)))

#[program]
def sub_19 :=
  fun sub_10276 (__10277) -> (__10278) ->
    (match __10278 with
    | zero_6  => __10277
    | succ_7 n_10279 => ((sub_10276) ((pred_17) __10277) n_10279))

#[program]
def mul_20 :=
  fun mul_10280 (__10281) -> (__10282) ->
    (match __10281 with
    | zero_6  => zero_6
    | succ_7 n_10283 => ((add_18) __10282 ((mul_10280) n_10283 __10282)))

#[program]
def div_21 :=
  fun div_10284 (x_10285) -> (y_10286) ->
    (match ((lt_16) x_10285 y_10286) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10287 :=
        fun loop_10288 (x_10289) -> (y_10290) ->
          (match ((sub_19) x_10289 ((pred_17) y_10290)) with
          | zero_6  => zero_6
          | succ_7 n_10291 => (succ_7 ((loop_10288) n_10291 y_10290)))
      in ((loop_10287) x_10285 y_10286))

#[program]
def rem_22 :=
  fun rem_10292 (x_10293) -> (y_10294) ->
    ((sub_19) x_10293 ((mul_20) ((div_21) x_10293 y_10294) y_10294))

#[program]
inductive listUU_21 where
| nilUU_27 of layout[]
| consUU_28 of layout[R, R]

#[program]
inductive listUL_20 where
| nilUL_25 of layout[]
| consUL_26 of layout[R, R]

#[program]
inductive listLU_19 where
| nilLU_23 of layout[]

#[program]
inductive listLL_18 where
| nilLL_21 of layout[]
| consLL_22 of layout[R, R]

#[program]
def free_listUU_67 :=
  fun free_list_10295 {A_10296} -> (f_10297) -> (__10298) ->
    (match __10298 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_10299 tl_10300 =>
      let __10301 := ((f_10297) hd_10299) in
      ((free_list_10295) NULL f_10297 tl_10300))

#[program]
def free_listUL_66 :=
  fun free_list_10302 {A_10303} -> (f_10304) -> (__10305) ->
    (match __10305 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_10306 tl_10307 =>
      let __10308 := ((f_10304) hd_10306) in
      ((free_list_10302) NULL f_10304 tl_10307))

#[program]
def free_listLL_64 :=
  fun free_list_10309 {A_10310} -> (f_10311) -> (__10312) ->
    (match __10312 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_10313 tl_10314 =>
      let __10315 := ((f_10311) hd_10313) in
      ((free_list_10309) NULL f_10311 tl_10314))

#[program]
inductive existsUU_25 where
| exUU_32 of layout[R, N]

#[program]
inductive existsUL_24 where
| exUL_31 of layout[R, N]

#[program]
inductive existsLU_23 where
| exLU_30 of layout[R, N]

#[program]
inductive existsLL_22 where
| exLL_29 of layout[R, N]

#[program]
inductive exists0UU_29 where
| ex0UU_36 of layout[N, R]

#[program]
inductive exists0UL_28 where
| ex0UL_35 of layout[N, R]

#[program]
inductive exists0LU_27 where
| ex0LU_34 of layout[N, R]

#[program]
inductive exists0LL_26 where
| ex0LL_33 of layout[N, R]

#[program]
inductive exists1UU_33 where
| ex1UU_40 of layout[R, R]

#[program]
inductive exists1UL_32 where
| ex1UL_39 of layout[R, R]

#[program]
inductive exists1LU_31 where
| ex1LU_38 of layout[R, R]

#[program]
inductive exists1LL_30 where
| ex1LL_37 of layout[R, R]

#[logical]
def prod0UU_71 := NULL

#[logical]
def prod0UL_70 := NULL

#[logical]
def prod0LU_69 := NULL

#[logical]
def prod0LL_68 := NULL

#[logical]
def prod1UU_75 := NULL

#[logical]
def prod1UL_74 := NULL

#[logical]
def prod1LU_73 := NULL

#[logical]
def prod1LL_72 := NULL

#[program]
def pow_26 :=
  fun pow_10316 (x_10317) -> (y_10318) ->
    let loop_10319 :=
      fun loop_10320 (acc_10321) -> (y_10322) ->
        (match (__lte__ y_10322 0) with
        | true_4  => acc_10321
        | false_5  =>
          ((loop_10320) (__mul__ x_10317 acc_10321) (__sub__ y_10322 1)))
    in ((loop_10319) 1 y_10318)

#[program]
def powm_27 :=
  fun powm_10323 (x_10324) -> (y_10325) -> (m_10326) ->
    let loop_10327 :=
      fun loop_10328 (acc_10329) -> (y_10330) ->
        (match (__lte__ y_10330 0) with
        | true_4  => acc_10329
        | false_5  =>
          ((loop_10328)
            (__mod__ (__mul__ x_10324 acc_10329) m_10326) (__sub__ y_10330 1)))
    in ((loop_10327) 1 y_10325)

#[program]
def ord_28 := fun ord_10331 (c_10332) ->
                (__ord__ c_10332)

#[program]
def chr_29 := fun chr_10333 (i_10334) ->
                (__chr__ i_10334)

#[program]
def str_30 := fun str_10335 (c_10336) ->
                (__push__ "" c_10336)

#[program]
def strlen_31 := fun strlen_10337 (s_10338) ->
                   (__size__ s_10338)

#[program]
def string_of_int_32 :=
  fun string_of_int_10339 (i_10340) ->
    let aux_10341 :=
      fun aux_10342 (i_10343) ->
        (match (__lte__ 10 i_10343) with
        | true_4  =>
          let r_10344 := (__mod__ i_10343 10) in
          let i_10345 := (__div__ i_10343 10) in
          (__push__ ((aux_10342) i_10345)
            ((chr_29) (__add__ r_10344 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_10343 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_10340) with
    | true_4  => ((aux_10341) i_10340)
    | false_5  => (__cat__ "~" ((aux_10341) (__neg__ i_10340))))

#[program]
def appendUU_79 :=
  fun append_10346 {A_10347} -> (__10348) -> (__10349) -o
    (match __10348 with
    | nilUU_27  => __10349
    | consUU_28 hd_10350 tl_10351 =>
      (consUU_28 hd_10350 ((append_10346) NULL tl_10351 __10349)))

#[program]
def appendUL_78 :=
  fun append_10352 {A_10353} -> (__10354) -> (__10355) -o
    (match __10354 with
    | nilUL_25  => __10355
    | consUL_26 hd_10356 tl_10357 =>
      (consUL_26 hd_10356 ((append_10352) NULL tl_10357 __10355)))

#[program]
def appendLL_76 :=
  fun append_10358 {A_10359} -> (__10360) -> (__10361) -o
    (match __10360 with
    | nilLL_21  => __10361
    | consLL_22 hd_10362 tl_10363 =>
      (consLL_22 hd_10362 ((append_10358) NULL tl_10363 __10361)))

#[logical]
def lenUU_83 := NULL

#[logical]
def lenUL_82 := NULL

#[logical]
def lenLL_80 := NULL

#[logical]
def append_lenUU_87 := NULL

#[logical]
def append_lenUL_86 := NULL

#[logical]
def append_lenLL_84 := NULL

[trans12 success]

-----------------------------------------

#[program]
def idU_37 := fun id_10559 (A_10560) -> (m_10561) ->
                m_10561

#[program]
def idL_36 := fun id_10562 (A_10563) -> (m_10564) ->
                m_10564

#[logical]
inductive eqU_11 where
| reflU_14 of layout[]

#[logical]
inductive eqL_10 where
| reflL_13 of layout[]

#[program]
def rwlUU_41 :=
  fun rwl_10565 {A_10566} -> {m_10567} -> {n_10568} -> {B_10569} ->
  {__10570} -> (__10571) ->
    __10571

#[program]
def rwlUL_40 :=
  fun rwl_10572 {A_10573} -> {m_10574} -> {n_10575} -> {B_10576} ->
  {__10577} -> (__10578) ->
    __10578

#[program]
def rwlLU_39 :=
  fun rwl_10579 {A_10580} -> {m_10581} -> {n_10582} -> {B_10583} ->
  {__10584} -> (__10585) ->
    __10585

#[program]
def rwlLL_38 :=
  fun rwl_10586 {A_10587} -> {m_10588} -> {n_10589} -> {B_10590} ->
  {__10591} -> (__10592) ->
    __10592

#[program]
def rwrUU_45 :=
  fun rwr_10593 {A_10594} -> {m_10595} -> {n_10596} -> {B_10597} ->
  {__10598} -> (__10599) ->
    __10599

#[program]
def rwrUL_44 :=
  fun rwr_10600 {A_10601} -> {m_10602} -> {n_10603} -> {B_10604} ->
  {__10605} -> (__10606) ->
    __10606

#[program]
def rwrLU_43 :=
  fun rwr_10607 {A_10608} -> {m_10609} -> {n_10610} -> {B_10611} ->
  {__10612} -> (__10613) ->
    __10613

#[program]
def rwrLL_42 :=
  fun rwr_10614 {A_10615} -> {m_10616} -> {n_10617} -> {B_10618} ->
  {__10619} -> (__10620) ->
    __10620

#[logical]
def congrUUU_53 := NULL

#[logical]
def congrUUL_52 := NULL

#[logical]
def congrULU_51 := NULL

#[logical]
def congrULL_50 := NULL

#[logical]
def congrLUU_49 := NULL

#[logical]
def congrLUL_48 := NULL

#[logical]
def congrLLU_47 := NULL

#[logical]
def congrLLL_46 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_15 where
| justUU_18 of layout[R]

#[program]
inductive singUL_14 where
| justUL_17 of layout[R]

#[program]
inductive singLU_13 where


#[program]
inductive singLL_12 where
| justLL_15 of layout[R]

#[logical]
def ssingU_55 := NULL

#[logical]
def ssingL_54 := NULL

#[program]
def sing_elimUU_59 :=
  fun sing_elim_10621 {A_10622} -> {x_10623} -> (__10624) ->
    (match __10624 with
    | justUU_18 m_10625 => m_10625)

#[program]
def sing_elimUL_58 :=
  fun sing_elim_10626 {A_10627} -> {x_10628} -> (__10629) ->
    (match __10629 with
    | justUL_17 m_10630 => m_10630)

#[program]
def sing_elimLU_57 :=
  fun sing_elim_10631 {A_10632} -> {x_10633} -> (__10634) ->
    !!

#[program]
def sing_elimLL_56 :=
  fun sing_elim_10635 {A_10636} -> {x_10637} -> (__10638) ->
    (match __10638 with
    | justLL_15 m_10639 => m_10639)

#[logical]
def sing_uniqUU_63 := NULL

#[logical]
def sing_uniqUL_62 := NULL

#[logical]
def sing_uniqLU_61 := NULL

#[logical]
def sing_uniqLL_60 := NULL

#[program]
inductive baseU_17 where
| ttU_20 of layout[]

#[program]
inductive baseL_16 where
| ttL_19 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_10640 (__10641) ->
    (match __10641 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_10642 (__10643) -> (__10644) ->
    (match __10643 with
    | true_4  =>
      (match __10644 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_10645 (__10646) -> (__10647) ->
    (match __10646 with
    | true_4  => true_4
    | false_5  =>
      (match __10647 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_10648 (__10649) -> (__10650) ->
    (match __10649 with
    | true_4  =>
      (match __10650 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __10650 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_10651 (__10652) -> (__10653) ->
    (match __10652 with
    | zero_6  => true_4
    | succ_7 n_10654 =>
      (match __10653 with
      | zero_6  => false_5 | succ_7 n_10655 => ((lte_10651) n_10654 n_10655)))

#[program]
def lt_16 :=
  fun lt_10656 (x_10657) -> (y_10658) ->
    ((lte_15) (succ_7 x_10657) y_10658)

#[program]
def pred_17 :=
  fun pred_10659 (__10660) ->
    (match __10660 with
    | zero_6  => zero_6 | succ_7 n_10661 => n_10661)

#[program]
def add_18 :=
  fun add_10662 (__10663) -> (__10664) ->
    (match __10663 with
    | zero_6  => __10664
    | succ_7 n_10665 => (succ_7 ((add_10662) n_10665 __10664)))

#[program]
def sub_19 :=
  fun sub_10666 (__10667) -> (__10668) ->
    (match __10668 with
    | zero_6  => __10667
    | succ_7 n_10669 => ((sub_10666) ((pred_17) __10667) n_10669))

#[program]
def mul_20 :=
  fun mul_10670 (__10671) -> (__10672) ->
    (match __10671 with
    | zero_6  => zero_6
    | succ_7 n_10673 => ((add_18) __10672 ((mul_10670) n_10673 __10672)))

#[program]
def div_21 :=
  fun div_10674 (x_10675) -> (y_10676) ->
    (match ((lt_16) x_10675 y_10676) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10677 :=
        fun loop_10678 (x_10679) -> (y_10680) ->
          (match ((sub_19) x_10679 ((pred_17) y_10680)) with
          | zero_6  => zero_6
          | succ_7 n_10681 => (succ_7 ((loop_10678) n_10681 y_10680)))
      in ((loop_10677) x_10675 y_10676))

#[program]
def rem_22 :=
  fun rem_10682 (x_10683) -> (y_10684) ->
    ((sub_19) x_10683 ((mul_20) ((div_21) x_10683 y_10684) y_10684))

#[program]
inductive listUU_21 where
| nilUU_27 of layout[]
| consUU_28 of layout[R, R]

#[program]
inductive listUL_20 where
| nilUL_25 of layout[]
| consUL_26 of layout[R, R]

#[program]
inductive listLU_19 where
| nilLU_23 of layout[]

#[program]
inductive listLL_18 where
| nilLL_21 of layout[]
| consLL_22 of layout[R, R]

#[program]
def free_listUU_67 :=
  fun free_list_10685 {A_10686} -> (f_10687) -> (__10688) ->
    (match __10688 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_10689 tl_10690 =>
      let __10691 := ((f_10687) hd_10689) in
      ((free_list_10685) NULL f_10687 tl_10690))

#[program]
def free_listUL_66 :=
  fun free_list_10692 {A_10693} -> (f_10694) -> (__10695) ->
    (match __10695 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_10696 tl_10697 =>
      let __10698 := ((f_10694) hd_10696) in
      ((free_list_10692) NULL f_10694 tl_10697))

#[program]
def free_listLL_64 :=
  fun free_list_10699 {A_10700} -> (f_10701) -> (__10702) ->
    (match __10702 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_10703 tl_10704 =>
      let __10705 := ((f_10701) hd_10703) in
      ((free_list_10699) NULL f_10701 tl_10704))

#[program]
inductive existsUU_25 where
| exUU_32 of layout[R, N]

#[program]
inductive existsUL_24 where
| exUL_31 of layout[R, N]

#[program]
inductive existsLU_23 where
| exLU_30 of layout[R, N]

#[program]
inductive existsLL_22 where
| exLL_29 of layout[R, N]

#[program]
inductive exists0UU_29 where
| ex0UU_36 of layout[N, R]

#[program]
inductive exists0UL_28 where
| ex0UL_35 of layout[N, R]

#[program]
inductive exists0LU_27 where
| ex0LU_34 of layout[N, R]

#[program]
inductive exists0LL_26 where
| ex0LL_33 of layout[N, R]

#[program]
inductive exists1UU_33 where
| ex1UU_40 of layout[R, R]

#[program]
inductive exists1UL_32 where
| ex1UL_39 of layout[R, R]

#[program]
inductive exists1LU_31 where
| ex1LU_38 of layout[R, R]

#[program]
inductive exists1LL_30 where
| ex1LL_37 of layout[R, R]

#[logical]
def prod0UU_71 := NULL

#[logical]
def prod0UL_70 := NULL

#[logical]
def prod0LU_69 := NULL

#[logical]
def prod0LL_68 := NULL

#[logical]
def prod1UU_75 := NULL

#[logical]
def prod1UL_74 := NULL

#[logical]
def prod1LU_73 := NULL

#[logical]
def prod1LL_72 := NULL

#[program]
def pow_26 :=
  fun pow_10706 (x_10707) -> (y_10708) ->
    let loop_10709 :=
      fun loop_10710 (acc_10711) -> (y_10712) ->
        (match (__lte__ y_10712 0) with
        | true_4  => acc_10711
        | false_5  =>
          ((loop_10710) (__mul__ x_10707 acc_10711) (__sub__ y_10712 1)))
    in ((loop_10709) 1 y_10708)

#[program]
def powm_27 :=
  fun powm_10713 (x_10714) -> (y_10715) -> (m_10716) ->
    let loop_10717 :=
      fun loop_10718 (acc_10719) -> (y_10720) ->
        (match (__lte__ y_10720 0) with
        | true_4  => acc_10719
        | false_5  =>
          ((loop_10718)
            (__mod__ (__mul__ x_10714 acc_10719) m_10716) (__sub__ y_10720 1)))
    in ((loop_10717) 1 y_10715)

#[program]
def ord_28 := fun ord_10721 (c_10722) ->
                (__ord__ c_10722)

#[program]
def chr_29 := fun chr_10723 (i_10724) ->
                (__chr__ i_10724)

#[program]
def str_30 := fun str_10725 (c_10726) ->
                (__push__ "" c_10726)

#[program]
def strlen_31 := fun strlen_10727 (s_10728) ->
                   (__size__ s_10728)

#[program]
def string_of_int_32 :=
  fun string_of_int_10729 (i_10730) ->
    let aux_10731 :=
      fun aux_10732 (i_10733) ->
        (match (__lte__ 10 i_10733) with
        | true_4  =>
          let r_10734 := (__mod__ i_10733 10) in
          let i_10735 := (__div__ i_10733 10) in
          (__push__ ((aux_10732) i_10735)
            ((chr_29) (__add__ r_10734 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_10733 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_10730) with
    | true_4  => ((aux_10731) i_10730)
    | false_5  => (__cat__ "~" ((aux_10731) (__neg__ i_10730))))

#[program]
def appendUU_79 :=
  fun append_10736 {A_10737} -> (__10738) -> (__10739) -o
    (match __10738 with
    | nilUU_27  => __10739
    | consUU_28 hd_10740 tl_10741 =>
      (consUU_28 hd_10740 ((append_10736) NULL tl_10741 __10739)))

#[program]
def appendUL_78 :=
  fun append_10742 {A_10743} -> (__10744) -> (__10745) -o
    (match __10744 with
    | nilUL_25  => __10745
    | consUL_26 hd_10746 tl_10747 =>
      (consUL_26 hd_10746 ((append_10742) NULL tl_10747 __10745)))

#[program]
def appendLL_76 :=
  fun append_10748 {A_10749} -> (__10750) -> (__10751) -o
    (match __10750 with
    | nilLL_21  => __10751
    | consLL_22 hd_10752 tl_10753 =>
      (consLL_22 hd_10752 ((append_10748) NULL tl_10753 __10751)))

#[logical]
def lenUU_83 := NULL

#[logical]
def lenUL_82 := NULL

#[logical]
def lenLL_80 := NULL

#[logical]
def append_lenUU_87 := NULL

#[logical]
def append_lenUL_86 := NULL

#[logical]
def append_lenLL_84 := NULL

[trans2e success]

-----------------------------------------

def idU_37 := fun id_10949 (A_10950) -> (m_10951) -> m_10951

def idL_36 := fun id_10952 (A_10953) -> (m_10954) -> m_10954

def rwlUU_41 :=
  fun rwl_10955 (A_10956) -> (m_10957) -> (n_10958) -> (B_10959) ->
  (__10960) -> (__10961) -> __10961

def rwlUL_40 :=
  fun rwl_10962 (A_10963) -> (m_10964) -> (n_10965) -> (B_10966) ->
  (__10967) -> (__10968) -> __10968

def rwlLU_39 :=
  fun rwl_10969 (A_10970) -> (m_10971) -> (n_10972) -> (B_10973) ->
  (__10974) -> (__10975) -> __10975

def rwlLL_38 :=
  fun rwl_10976 (A_10977) -> (m_10978) -> (n_10979) -> (B_10980) ->
  (__10981) -> (__10982) -> __10982

def rwrUU_45 :=
  fun rwr_10983 (A_10984) -> (m_10985) -> (n_10986) -> (B_10987) ->
  (__10988) -> (__10989) -> __10989

def rwrUL_44 :=
  fun rwr_10990 (A_10991) -> (m_10992) -> (n_10993) -> (B_10994) ->
  (__10995) -> (__10996) -> __10996

def rwrLU_43 :=
  fun rwr_10997 (A_10998) -> (m_10999) -> (n_11000) -> (B_11001) ->
  (__11002) -> (__11003) -> __11003

def rwrLL_42 :=
  fun rwr_11004 (A_11005) -> (m_11006) -> (n_11007) -> (B_11008) ->
  (__11009) -> (__11010) -> __11010

def sing_elimUU_59 :=
  fun sing_elim_11011 (A_11012) -> (x_11013) -> (__11014) -> __11014

def sing_elimUL_58 :=
  fun sing_elim_11015 (A_11016) -> (x_11017) -> (__11018) -> __11018

def sing_elimLU_57 :=
  fun sing_elim_11019 (A_11020) -> (x_11021) -> (__11022) -> !!

def sing_elimLL_56 :=
  fun sing_elim_11023 (A_11024) -> (x_11025) -> (__11026) -> __11026

def not_11 :=
  fun not_11027 (__11028) ->
    (match __11028 with
    | true_4 => false_5 | false_5 => true_4)

def and_12 :=
  fun and_11029 (__11030) -> (__11031) ->
    (match __11030 with
    | true_4 => (match __11031 with
                | true_4 => true_4 | false_5 => false_5)
    | false_5 => false_5)

def or_13 :=
  fun or_11032 (__11033) -> (__11034) ->
    (match __11033 with
    | true_4 => true_4
    | false_5 => (match __11034 with
                 | true_4 => true_4 | false_5 => false_5))

def xor_14 :=
  fun xor_11035 (__11036) -> (__11037) ->
    (match __11036 with
    | true_4 => (match __11037 with
                | true_4 => false_5 | false_5 => true_4)
    | false_5 => (match __11037 with
                 | true_4 => true_4 | false_5 => false_5))

def lte_15 :=
  fun lte_11038 (__11039) -> (__11040) ->
    (match __11039 with
    | zero_6  => true_4
    | succ_7 n_11041 =>
      (match __11040 with
      | zero_6  => false_5 | succ_7 n_11042 => ((lte_11038) n_11041 n_11042)))

def lt_16 :=
  fun lt_11043 (x_11044) -> (y_11045) -> ((lte_15) (succ_7 x_11044) y_11045)

def pred_17 :=
  fun pred_11046 (__11047) ->
    (match __11047 with
    | zero_6  => (zero_6 ) | succ_7 n_11048 => n_11048)

def add_18 :=
  fun add_11049 (__11050) -> (__11051) ->
    (match __11050 with
    | zero_6  => __11051
    | succ_7 n_11052 => (succ_7 ((add_11049) n_11052 __11051)))

def sub_19 :=
  fun sub_11053 (__11054) -> (__11055) ->
    (match __11055 with
    | zero_6  => __11054
    | succ_7 n_11056 => ((sub_11053) ((pred_17) __11054) n_11056))

def mul_20 :=
  fun mul_11057 (__11058) -> (__11059) ->
    (match __11058 with
    | zero_6  => (zero_6 )
    | succ_7 n_11060 => ((add_18) __11059 ((mul_11057) n_11060 __11059)))

def div_21 :=
  fun div_11061 (x_11062) -> (y_11063) ->
    (match ((lt_16) x_11062 y_11063) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_11064 :=
        fun loop_11065 (x_11066) -> (y_11067) ->
          (match ((sub_19) x_11066 ((pred_17) y_11067)) with
          | zero_6  => (zero_6 )
          | succ_7 n_11068 => (succ_7 ((loop_11065) n_11068 y_11067)))
      in ((loop_11064) x_11062 y_11063))

def rem_22 :=
  fun rem_11069 (x_11070) -> (y_11071) ->
    ((sub_19) x_11070 ((mul_20) ((div_21) x_11070 y_11071) y_11071))

def free_listUU_67 :=
  fun free_list_11072 (A_11073) -> (f_11074) -> (__11075) ->
    (match __11075 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_11076 tl_11077 =>
      let __11078 := ((f_11074) hd_11076) in
      ((free_list_11072) NULL f_11074 tl_11077))

def free_listUL_66 :=
  fun free_list_11079 (A_11080) -> (f_11081) -> (__11082) ->
    (match __11082 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_11083 tl_11084 =>
      let __11085 := ((f_11081) hd_11083) in
      ((free_list_11079) NULL f_11081 tl_11084))

def free_listLL_64 :=
  fun free_list_11086 (A_11087) -> (f_11088) -> (__11089) ->
    (match __11089 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_11090 tl_11091 =>
      let __11092 := ((f_11088) hd_11090) in
      ((free_list_11086) NULL f_11088 tl_11091))

def pow_26 :=
  fun pow_11093 (x_11094) -> (y_11095) ->
    let loop_11096 :=
      fun loop_11097 (acc_11098) -> (y_11099) ->
        (match (__lte__ y_11099 0) with
        | true_4 => acc_11098
        | false_5 =>
          ((loop_11097) (__mul__ x_11094 acc_11098) (__sub__ y_11099 1)))
    in ((loop_11096) 1 y_11095)

def powm_27 :=
  fun powm_11100 (x_11101) -> (y_11102) -> (m_11103) ->
    let loop_11104 :=
      fun loop_11105 (acc_11106) -> (y_11107) ->
        (match (__lte__ y_11107 0) with
        | true_4 => acc_11106
        | false_5 =>
          ((loop_11105)
            (__mod__ (__mul__ x_11101 acc_11106) m_11103) (__sub__ y_11107 1)))
    in ((loop_11104) 1 y_11102)

def ord_28 := fun ord_11108 (c_11109) -> (__ord__ c_11109)

def chr_29 := fun chr_11110 (i_11111) -> (__chr__ i_11111)

def str_30 := fun str_11112 (c_11113) -> (__push__ "" c_11113)

def strlen_31 := fun strlen_11114 (s_11115) -> (__size__ s_11115)

def string_of_int_32 :=
  fun string_of_int_11116 (i_11117) ->
    let aux_11118 :=
      fun aux_11119 (i_11120) ->
        (match (__lte__ 10 i_11120) with
        | true_4 =>
          let r_11121 := (__mod__ i_11120 10) in
          let i_11122 := (__div__ i_11120 10) in
          (__push__ ((aux_11119) i_11122)
            ((chr_29) (__add__ r_11121 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_11120 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_11117) with
    | true_4 => ((aux_11118) i_11117)
    | false_5 => (__cat__ "~" ((aux_11118) (__neg__ i_11117))))

def appendUU_79 :=
  fun append_11123 (A_11124) -> (__11125) -> (__11126) -o
    (match __11125 with
    | nilUU_27  => __11126
    | consUU_28 hd_11127 tl_11128 =>
      (consUU_28 hd_11127 ((append_11123) NULL tl_11128 __11126)))

def appendUL_78 :=
  fun append_11129 (A_11130) -> (__11131) -> (__11132) -o
    (match __11131 with
    | nilUL_25  => __11132
    | consUL_26 hd_11133 tl_11134 =>
      (consUL_26 hd_11133 ((append_11129) NULL tl_11134 __11132)))

def appendLL_76 :=
  fun append_11135 (A_11136) -> (__11137) -> (__11138) -o
    (match __11137 with
    | nilLL_21  => __11138
    | consLL_22 hd_11139 tl_11140 =>
      (consLL_22 hd_11139 ((append_11135) NULL tl_11140 __11138)))

[trans23 success]

-----------------------------------------

def idU_37 := lam (A_11333) -> (m_11334) -> m_11334

def idL_36 := lam (A_11335) -> (m_11336) -> m_11336

def rwlUU_41 :=
  lam (A_11337) -> (m_11338) -> (n_11339) -> (B_11340) -> (__11341) ->
  (__11342) -> __11342

def rwlUL_40 :=
  lam (A_11343) -> (m_11344) -> (n_11345) -> (B_11346) -> (__11347) ->
  (__11348) -> __11348

def rwlLU_39 :=
  lam (A_11349) -> (m_11350) -> (n_11351) -> (B_11352) -> (__11353) ->
  (__11354) -> __11354

def rwlLL_38 :=
  lam (A_11355) -> (m_11356) -> (n_11357) -> (B_11358) -> (__11359) ->
  (__11360) -> __11360

def rwrUU_45 :=
  lam (A_11361) -> (m_11362) -> (n_11363) -> (B_11364) -> (__11365) ->
  (__11366) -> __11366

def rwrUL_44 :=
  lam (A_11367) -> (m_11368) -> (n_11369) -> (B_11370) -> (__11371) ->
  (__11372) -> __11372

def rwrLU_43 :=
  lam (A_11373) -> (m_11374) -> (n_11375) -> (B_11376) -> (__11377) ->
  (__11378) -> __11378

def rwrLL_42 :=
  lam (A_11379) -> (m_11380) -> (n_11381) -> (B_11382) -> (__11383) ->
  (__11384) -> __11384

def sing_elimUU_59 := lam (A_11385) -> (x_11386) -> (__11387) -> __11387

def sing_elimUL_58 := lam (A_11388) -> (x_11389) -> (__11390) -> __11390

def sing_elimLU_57 := lam (A_11391) -> (x_11392) -> (__11393) -> !!

def sing_elimLL_56 := lam (A_11394) -> (x_11395) -> (__11396) -> __11396

def not_11 :=
  lam (__11397) ->
    (match __11397 with
    | true_4 => false_5 | false_5 => true_4)

def and_12 :=
  lam (__11398) -> (__11399) ->
    (match __11398 with
    | true_4 => (match __11399 with
                | true_4 => true_4 | false_5 => false_5)
    | false_5 => false_5)

def or_13 :=
  lam (__11400) -> (__11401) ->
    (match __11400 with
    | true_4 => true_4
    | false_5 => (match __11401 with
                 | true_4 => true_4 | false_5 => false_5))

def xor_14 :=
  lam (__11402) -> (__11403) ->
    (match __11402 with
    | true_4 => (match __11403 with
                | true_4 => false_5 | false_5 => true_4)
    | false_5 => (match __11403 with
                 | true_4 => true_4 | false_5 => false_5))

def lte_15 :=
  fun lte_11404 (__11405) -> (__11406) ->
    (match __11405 with
    | zero_6  => true_4
    | succ_7 n_11407 =>
      (match __11406 with
      | zero_6  => false_5 | succ_7 n_11408 => ((lte_11404) n_11407 n_11408)))

def lt_16 :=
  lam (x_11409) -> (y_11410) -> ((lte_15) (succ_7 x_11409) y_11410)

def pred_17 :=
  lam (__11411) ->
    (match __11411 with
    | zero_6  => (zero_6 ) | succ_7 n_11412 => n_11412)

def add_18 :=
  fun add_11413 (__11414) -> (__11415) ->
    (match __11414 with
    | zero_6  => __11415
    | succ_7 n_11416 => (succ_7 ((add_11413) n_11416 __11415)))

def sub_19 :=
  fun sub_11417 (__11418) -> (__11419) ->
    (match __11419 with
    | zero_6  => __11418
    | succ_7 n_11420 => ((sub_11417) ((pred_17) __11418) n_11420))

def mul_20 :=
  fun mul_11421 (__11422) -> (__11423) ->
    (match __11422 with
    | zero_6  => (zero_6 )
    | succ_7 n_11424 => ((add_18) __11423 ((mul_11421) n_11424 __11423)))

def div_21 :=
  lam (x_11425) -> (y_11426) ->
    (match ((lt_16) x_11425 y_11426) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_11427 :=
        fun loop_11428 (x_11429) -> (y_11430) ->
          (match ((sub_19) x_11429 ((pred_17) y_11430)) with
          | zero_6  => (zero_6 )
          | succ_7 n_11431 => (succ_7 ((loop_11428) n_11431 y_11430)))
      in ((loop_11427) x_11425 y_11426))

def rem_22 :=
  lam (x_11432) -> (y_11433) ->
    ((sub_19) x_11432 ((mul_20) ((div_21) x_11432 y_11433) y_11433))

def free_listUU_67 :=
  fun free_list_11434 (A_11435) -> (f_11436) -> (__11437) ->
    (match __11437 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_11438 tl_11439 =>
      let __11440 := ((f_11436) hd_11438) in
      ((free_list_11434) NULL f_11436 tl_11439))

def free_listUL_66 :=
  fun free_list_11441 (A_11442) -> (f_11443) -> (__11444) ->
    (match __11444 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_11445 tl_11446 =>
      let __11447 := ((f_11443) hd_11445) in
      ((free_list_11441) NULL f_11443 tl_11446))

def free_listLL_64 :=
  fun free_list_11448 (A_11449) -> (f_11450) -> (__11451) ->
    (match __11451 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_11452 tl_11453 =>
      let __11454 := ((f_11450) hd_11452) in
      ((free_list_11448) NULL f_11450 tl_11453))

def pow_26 :=
  lam (x_11455) -> (y_11456) ->
    let loop_11457 :=
      fun loop_11458 (acc_11459) -> (y_11460) ->
        (match (__lte__ y_11460 0) with
        | true_4 => acc_11459
        | false_5 =>
          ((loop_11458) (__mul__ x_11455 acc_11459) (__sub__ y_11460 1)))
    in ((loop_11457) 1 y_11456)

def powm_27 :=
  lam (x_11461) -> (y_11462) -> (m_11463) ->
    let loop_11464 :=
      fun loop_11465 (acc_11466) -> (y_11467) ->
        (match (__lte__ y_11467 0) with
        | true_4 => acc_11466
        | false_5 =>
          ((loop_11465)
            (__mod__ (__mul__ x_11461 acc_11466) m_11463) (__sub__ y_11467 1)))
    in ((loop_11464) 1 y_11462)

def ord_28 := lam (c_11468) -> (__ord__ c_11468)

def chr_29 := lam (i_11469) -> (__chr__ i_11469)

def str_30 := lam (c_11470) -> (__push__ "" c_11470)

def strlen_31 := lam (s_11471) -> (__size__ s_11471)

def string_of_int_32 :=
  lam (i_11472) ->
    let aux_11473 :=
      fun aux_11474 (i_11475) ->
        (match (__lte__ 10 i_11475) with
        | true_4 =>
          let r_11476 := (__mod__ i_11475 10) in
          let i_11477 := (__div__ i_11475 10) in
          (__push__ ((aux_11474) i_11477)
            ((chr_29) (__add__ r_11476 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_11475 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_11472) with
    | true_4 => ((aux_11473) i_11472)
    | false_5 => (__cat__ "~" ((aux_11473) (__neg__ i_11472))))

def appendUU_79 :=
  fun append_11478 (A_11479) -> (__11480) -> (__11481) -o
    (match __11480 with
    | nilUU_27  => __11481
    | consUU_28 hd_11482 tl_11483 =>
      (consUU_28 hd_11482 ((append_11478) NULL tl_11483 __11481)))

def appendUL_78 :=
  fun append_11484 (A_11485) -> (__11486) -> (__11487) -o
    (match __11486 with
    | nilUL_25  => __11487
    | consUL_26 hd_11488 tl_11489 =>
      (consUL_26 hd_11488 ((append_11484) NULL tl_11489 __11487)))

def appendLL_76 :=
  fun append_11490 (A_11491) -> (__11492) -> (__11493) -o
    (match __11492 with
    | nilLL_21  => __11493
    | consLL_22 hd_11494 tl_11495 =>
      (consLL_22 hd_11494 ((append_11490) NULL tl_11495 __11493)))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_27() => {
      x_167 := ttU_20;
    }
    consUU_28(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_25() => {
      x_177 := ttU_20;
    }
    consUL_26(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_21() => {
      x_187 := ttU_20;
    }
    consLL_22(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn appendUU_264(A_265%U, __266%U, __267%L) {
  match[U](__266){
    nilUU_27() => {
      x_268 := __267;
    }
    consUU_28(hd_269, tl_270) => {
      x_271 := appendUU_264(NULL, tl_270, __267);
      x_272 := mkconstr(consUU_28, [hd_269, x_271]);
      x_268 := x_272;
    }
  }
  return x_268;
}

fn appendUL_273(A_274%U, __275%U, __276%L) {
  match[L](__275){
    nilUL_25() => {
      x_277 := __276;
    }
    consUL_26(hd_278, tl_279) => {
      x_280 := appendUL_273(NULL, tl_279, __276);
      x_281 := mkconstr(consUL_26, [hd_278, x_280]);
      x_277 := x_281;
    }
  }
  return x_277;
}

fn appendLL_282(A_283%U, __284%U, __285%L) {
  match[L](__284){
    nilLL_21() => {
      x_286 := __285;
    }
    consLL_22(hd_287, tl_288) => {
      x_289 := appendLL_282(NULL, tl_288, __285);
      x_290 := mkconstr(consLL_22, [hd_287, x_289]);
      x_286 := x_290;
    }
  }
  return x_286;
}

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_27() => {
      x_167 := ttU_20;
    }
    consUU_28(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_25() => {
      x_177 := ttU_20;
      free(__176);
    }
    consUL_26(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_21() => {
      x_187 := ttU_20;
      free(__186);
    }
    consLL_22(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn appendUU_264(A_265%U, __266%U, __267%L) {
  match[U](__266){
    nilUU_27() => {
      x_268 := __267;
    }
    consUU_28(hd_269, tl_270) => {
      x_271 := appendUU_264(NULL, tl_270, __267);
      x_272 := mkconstr(consUU_28, [hd_269, x_271]);
      x_268 := x_272;
    }
  }
  return x_268;
}

fn appendUL_273(A_274%U, __275%U, __276%L) {
  match[L](__275){
    nilUL_25() => {
      x_277 := __276;
      free(__275);
    }
    consUL_26(hd_278, tl_279) => {
      x_280 := appendUL_273(NULL, tl_279, __276);
      x_281 := reconstr(__275, consUL_26, [hd_278, x_280]);
      x_277 := x_281;
    }
  }
  return x_277;
}

fn appendLL_282(A_283%U, __284%U, __285%L) {
  match[L](__284){
    nilLL_21() => {
      x_286 := __285;
      free(__284);
    }
    consLL_22(hd_287, tl_288) => {
      x_289 := appendLL_282(NULL, tl_288, __285);
      x_290 := reconstr(__284, consLL_22, [hd_287, x_289]);
      x_286 := x_290;
    }
  }
  return x_286;
}

[trans4e success]

-----------------------------------------

fn fn0_idU_291(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_292(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_293 := fn0_idU_291(A_2, m_3);
  return x_293;
}

fn fn0_idL_294(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_295(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_296 := fn0_idL_294(A_5, m_6);
  return x_296;
}

fn fn0_rwlUU_297(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_298(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_299 := fn0_rwlUU_297(A_8, m_9, n_10, B_11, __12, __13);
  return x_299;
}

fn fn0_rwlUL_300(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_301(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_302 := fn0_rwlUL_300(A_15, m_16, n_17, B_18, __19, __20);
  return x_302;
}

fn fn0_rwlLU_303(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_304(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_305 := fn0_rwlLU_303(A_22, m_23, n_24, B_25, __26, __27);
  return x_305;
}

fn fn0_rwlLL_306(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_307(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_308 := fn0_rwlLL_306(A_29, m_30, n_31, B_32, __33, __34);
  return x_308;
}

fn fn0_rwrUU_309(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_310(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_311 := fn0_rwrUU_309(A_36, m_37, n_38, B_39, __40, __41);
  return x_311;
}

fn fn0_rwrUL_312(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_313(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_314 := fn0_rwrUL_312(A_43, m_44, n_45, B_46, __47, __48);
  return x_314;
}

fn fn0_rwrLU_315(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_316(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_317 := fn0_rwrLU_315(A_50, m_51, n_52, B_53, __54, __55);
  return x_317;
}

fn fn0_rwrLL_318(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_319(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_320 := fn0_rwrLL_318(A_57, m_58, n_59, B_60, __61, __62);
  return x_320;
}

fn fn0_sing_elimUU_321(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_322(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_323 := fn0_sing_elimUU_321(A_64, x_65, __66);
  return x_323;
}

fn fn0_sing_elimUL_324(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_325(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_326 := fn0_sing_elimUL_324(A_68, x_69, __70);
  return x_326;
}

fn fn0_sing_elimLU_327(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_328(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_329 := fn0_sing_elimLU_327(A_72, x_73, __74);
  return x_329;
}

fn fn0_sing_elimLL_330(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_331(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_332 := fn0_sing_elimLL_330(A_76, x_77, __78);
  return x_332;
}

fn fn0_not_333(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_334(env) {
  __80 := env[1];
  x_335 := fn0_not_333(__80);
  return x_335;
}

fn fn0_and_336(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_337(env) {
  __83 := env[1];
  __84 := env[2];
  x_338 := fn0_and_336(__83, __84);
  return x_338;
}

fn fn0_or_339(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_340(env) {
  __88 := env[1];
  __89 := env[2];
  x_341 := fn0_or_339(__88, __89);
  return x_341;
}

fn fn0_xor_342(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_343(env) {
  __93 := env[1];
  __94 := env[2];
  x_344 := fn0_xor_342(__93, __94);
  return x_344;
}

fn fn0_lte_345(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_345(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_346(env) {
  __99 := env[1];
  __100 := env[2];
  x_347 := fn0_lte_345(__99, __100);
  return x_347;
}

fn fn0_lt_348(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_345(x_110, y_108);
  return x_109;
}

fn fn1_lt_349(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_350 := fn0_lt_348(x_107, y_108);
  return x_350;
}

fn fn0_pred_351(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_352(env) {
  __112 := env[1];
  x_353 := fn0_pred_351(__112);
  return x_353;
}

fn fn0_add_354(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_354(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_355(env) {
  __117 := env[1];
  __118 := env[2];
  x_356 := fn0_add_354(__117, __118);
  return x_356;
}

fn fn0_sub_357(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_351(__124);
      x_128 := fn0_sub_357(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_358(env) {
  __124 := env[1];
  __125 := env[2];
  x_359 := fn0_sub_357(__124, __125);
  return x_359;
}

fn fn0_mul_360(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_360(n_135, __132);
      x_136 := fn0_add_354(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_361(env) {
  __131 := env[1];
  __132 := env[2];
  x_362 := fn0_mul_360(__131, __132);
  return x_362;
}

fn fn0_div_363(x_139, y_140) {
  x_142 := fn0_lt_348(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_365, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_369, loop_144, x_139);
      appc(x_370, x_369, y_140);
      move1(x_156, x_370);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_364(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_372 := fn0_div_363(x_139, y_140);
  return x_372;
}

fn fn0_rem_373(x_158, y_159) {
  x_162 := fn0_div_363(x_158, y_159);
  x_161 := fn0_mul_360(x_162, y_159);
  x_160 := fn0_sub_357(x_158, x_161);
  return x_160;
}

fn fn1_rem_374(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_375 := fn0_rem_373(x_158, y_159);
  return x_375;
}

fn fn0_free_listUU_376(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_27 => {
      move1(x_167, ttU_20);
      break;
    }
    consUU_28 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_378, f_165, hd_168);
      move1(x_171, x_378);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_376(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_377(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_380 := fn0_free_listUU_376(A_164, f_165, __166);
  return x_380;
}

fn fn0_free_listUL_381(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_25 => {
      move1(x_177, ttU_20);
      free(__176);
      break;
    }
    consUL_26 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_383, f_175, hd_178);
      move1(x_181, x_383);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_381(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_382(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_385 := fn0_free_listUL_381(A_174, f_175, __176);
  return x_385;
}

fn fn0_free_listLL_386(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_21 => {
      move1(x_187, ttU_20);
      free(__186);
      break;
    }
    consLL_22 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_388, f_185, hd_188);
      move1(x_191, x_388);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_386(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_387(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_390 := fn0_free_listLL_386(A_184, f_185, __186);
  return x_390;
}

fn fn0_pow_391(x_194, y_195) {
  mkclo1(x_197, fn1_loop_393, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_397, loop_196, 1);
  appc(x_398, x_397, y_195);
  move1(x_206, x_398);
  return x_206;
}

fn fn1_pow_392(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_400 := fn0_pow_391(x_194, y_195);
  return x_400;
}

fn fn0_powm_401(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_403, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_407, loop_211, 1);
  appc(x_408, x_407, y_209);
  move1(x_222, x_408);
  return x_222;
}

fn fn1_powm_402(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_410 := fn0_powm_401(x_208, y_209, m_210);
  return x_410;
}

fn fn0_ord_411(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_412(env) {
  c_224 := env[1];
  x_413 := fn0_ord_411(c_224);
  return x_413;
}

fn fn0_chr_414(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_415(env) {
  i_227 := env[1];
  x_416 := fn0_chr_414(i_227);
  return x_416;
}

fn fn0_str_417(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_418(env) {
  c_230 := env[1];
  x_419 := fn0_str_417(c_230);
  return x_419;
}

fn fn0_strlen_420(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_421(env) {
  s_234 := env[1];
  x_422 := fn0_strlen_420(s_234);
  return x_422;
}

fn fn0_string_of_int_423(i_237) {
  mkclo1(x_239, fn1_aux_425, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_428, aux_238, i_237);
      move1(x_259, x_428);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_430, aux_238, x_263);
      move1(x_262, x_430);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_424(env) {
  i_237 := env[1];
  x_432 := fn0_string_of_int_423(i_237);
  return x_432;
}

fn fn0_appendUU_433(A_265, __266, __267) {
  switch(ctagof(__266)){
    nilUU_27 => {
      move1(x_268, __267);
      break;
    }
    consUU_28 => {
      getbox(hd_269, __266, 0);
      getbox(tl_270, __266, 1);
      x_271 := fn0_appendUU_433(NULL, tl_270, __267);
      mkbox(x_272, consUU_28, 2);
      setbox(x_272, hd_269, 0);
      setbox(x_272, x_271, 1);
      move1(x_268, x_272);
      break;
    }
  }
  return x_268;
}

fn fn1_appendUU_434(env) {
  A_265 := env[1];
  __266 := env[2];
  __267 := env[3];
  x_435 := fn0_appendUU_433(A_265, __266, __267);
  return x_435;
}

fn fn0_appendUL_436(A_274, __275, __276) {
  switch(ctagof(__275)){
    nilUL_25 => {
      move1(x_277, __276);
      free(__275);
      break;
    }
    consUL_26 => {
      getbox(hd_278, __275, 0);
      getbox(tl_279, __275, 1);
      x_280 := fn0_appendUL_436(NULL, tl_279, __276);
      rebox(x_281, __275, consUL_26);
      setbox(x_281, hd_278, 0);
      setbox(x_281, x_280, 1);
      move1(x_277, x_281);
      break;
    }
  }
  return x_277;
}

fn fn1_appendUL_437(env) {
  A_274 := env[1];
  __275 := env[2];
  __276 := env[3];
  x_438 := fn0_appendUL_436(A_274, __275, __276);
  return x_438;
}

fn fn0_appendLL_439(A_283, __284, __285) {
  switch(ctagof(__284)){
    nilLL_21 => {
      move1(x_286, __285);
      free(__284);
      break;
    }
    consLL_22 => {
      getbox(hd_287, __284, 0);
      getbox(tl_288, __284, 1);
      x_289 := fn0_appendLL_439(NULL, tl_288, __285);
      rebox(x_290, __284, consLL_22);
      setbox(x_290, hd_287, 0);
      setbox(x_290, x_289, 1);
      move1(x_286, x_290);
      break;
    }
  }
  return x_286;
}

fn fn1_appendLL_440(env) {
  A_283 := env[1];
  __284 := env[2];
  __285 := env[3];
  x_441 := fn0_appendLL_439(A_283, __284, __285);
  return x_441;
}

fn fn1_aux_425(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_426, aux_240, i_246);
      move1(x_249, x_426);
      x_252 := fn0_ord_411(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_414(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_411(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_414(x_255);
      x_253 := fn0_str_417(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_403(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_404, loop_213, x_219);
      appc(x_405, x_404, x_221);
      move1(x_218, x_405);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_393(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_394, loop_198, x_204);
      appc(x_395, x_394, x_205);
      move1(x_203, x_395);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_365(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_351(y_148);
  x_150 := fn0_sub_357(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_366, loop_146, n_153);
      appc(x_367, x_366, y_148);
      move1(x_154, x_367);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_292, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_295, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_298, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_301, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_304, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_307, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_310, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_313, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_316, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_319, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_322, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_325, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_328, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_331, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_334, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_337, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_340, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_343, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_346, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_349, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_352, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_355, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_358, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_361, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_364, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_374, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_377, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_382, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_387, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_392, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_402, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_412, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_415, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_418, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_421, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_424, fvc:=0, argc:=1);
  mkclo0(appendUU_264, fn1_appendUU_434, fvc:=0, argc:=3);
  mkclo0(appendUL_273, fn1_appendUL_437, fvc:=0, argc:=3);
  mkclo0(appendLL_282, fn1_appendLL_440, fvc:=0, argc:=3);
  return NULL;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

