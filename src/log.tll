[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "cmsort_ch"; relv = N;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "cmsort_ch"),
              [([(PId "xs")],
                (Some (Ch (true,
                         (Act (R, true,
                            (UOpr ("`",
                               (App [(Id ("msort", I)); (Id ("xs", I))]))),
                            (Binder ("_", End))))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "cmsort_worker"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("_",
                 (Pi (R, U,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("zs",
                       (Pi (R, L,
                          (App
                             [(Inst ("cmsort_ch", [(SId "t")], I));
                               (Id ("zs", I))]),
                          (Binder ("_", (IO (Id ("unit", I)))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cmsort_worker"),
              [([(PId "_"); (PId "nil"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Send (Id ("c", I)));
                              (App [(Id ("just", I)); (Id ("nil", I))])]),
                         (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "_"); (PBOpr ("::", (PId "z"), (PId "nil")));
                   (PId "c")],
                 (Some (MLet (
                          (App
                             [(Send (Id ("c", I)));
                               (App
                                  [(Id ("just", I));
                                    (BOpr ("::", (Id ("z", I)),
                                       (Id ("nil", I))))
                                    ])
                               ]),
                          (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "i"); (PId "zs"); (PId "c")],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("i", I)), (Int 0))), None)],
                          None,
                          [([(PId "true")],
                            (Some (MLet (
                                     (App
                                        [(Send (Id ("c", I)));
                                          (App
                                             [(Id ("just", I));
                                               (App
                                                  [(Id ("msort", I));
                                                    (Id ("zs", I))])
                                               ])
                                          ]),
                                     (Binder ((PId "c"),
                                        (Close (Id ("c", I)))))
                                     ))));
                            ([(PId "false")],
                             (Some (Match (
                                      [(R,
                                        (App
                                           [(Id ("split", I)); (Id ("zs", I))
                                             ]),
                                        (Some ("h1", IMeta)));
                                        (N, (Id ("refl", I)),
                                         (Some ("_",
                                                (BOpr ("=",
                                                   (Let (R, (Id ("h1", I)),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      )),
                                                   (Let (R,
                                                      (App
                                                         [(Id ("split", I));
                                                           (Id ("zs", I))]),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      ))
                                                   )))))
                                        ],
                                      None,
                                      [([(PBOpr ("\226\159\168,\226\159\169",
                                            (PId "xs0"), (PId "ys0")));
                                          (PId "pf")],
                                        (Some (MLet (
                                                 (Fork
                                                    (Fun (
                                                       (Pi (R, L, IMeta,
                                                          (Binder ("",
                                                             (IO
                                                                (Id ("unit",
                                                                   I)))
                                                             ))
                                                          )),
                                                       (Binder (None,
                                                          [([(PId "c1")],
                                                            (Some (App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ));
                                                                    (Id (
                                                                    "c1", I))
                                                                    ])))
                                                            ]
                                                          )),
                                                       []))),
                                                 (Binder ((PId "r1"),
                                                    (MLet (
                                                       (Fork
                                                          (Fun (
                                                             (Pi (R, L,
                                                                IMeta,
                                                                (Binder ("",
                                                                   (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    )))
                                                                   ))
                                                                )),
                                                             (Binder (None,
                                                                [([(PId "c2")
                                                                    ],
                                                                  (Some (
                                                                  App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ));
                                                                    (Id (
                                                                    "c2", I))
                                                                    ])))
                                                                  ]
                                                                )),
                                                             []))),
                                                       (Binder ((PId "r2"),
                                                          (MLet (
                                                             (Recv
                                                                (Id ("r1", I
                                                                   ))),
                                                             (Binder (
                                                                (PBOpr (
                                                                   "\226\159\168,\226\159\169",
                                                                   (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "xs1")])),
                                                                   (PId "c1")
                                                                   )),
                                                                (MLet (
                                                                   (Recv
                                                                    (Id (
                                                                    "r2", I))),
                                                                   (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "ys1")])),
                                                                    (PId "c2")
                                                                    )),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (Id (
                                                                    "xs1", I
                                                                    ));
                                                                    (Id (
                                                                    "ys1", I
                                                                    ))])]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ))]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ))])])))
                                                                    )),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "rwl", I
                                                                    ));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U, IMeta,
                                                                    (Binder (
                                                                    "x",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "x")],
                                                                    (Some (
                                                                    UOpr (
                                                                    "`",
                                                                    (Id ("x",
                                                                    I))))))]
                                                                    )), 
                                                                    []));
                                                                    (Id (
                                                                    "pf", I));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]))))),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c1", I))),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c2", I))),
                                                                    (Close
                                                                    (Id ("c",
                                                                    I)))))))
                                                                    ))))))))
                                                                    ))))))
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))))
                                        ]
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, Int_t,
           (Binder ("_",
              (Pi (R, U,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("zs",
                    (Pi (R, L,
                       (App
                          [(Inst ("cmsort_ch", [(SId "t")], I));
                            (Id ("zs", I))]),
                       (Binder ("_", (IO (Id ("unit", I)))))))
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "cmsort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("zs",
                 (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))
                 ))
              )),
           (Binder ((Some "cmsort"),
              [([(PId "zs")],
                (Some (MLet (
                         (Fork
                            (Fun (
                               (Pi (R, L, IMeta,
                                  (Binder ("", (IO (Id ("unit", I))))))),
                               (Binder (None,
                                  [([(PId "c")],
                                    (Some (App
                                             [(Id ("cmsort_worker", I));
                                               (Int 4); (Id ("zs", I));
                                               (Id ("c", I))])))
                                    ]
                                  )),
                               []))),
                         (Binder ((PId "c"),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "msg"), (PId "c"))),
                                  (BOpr (";", (Close (Id ("c", I))),
                                     (Return (Id ("msg", I)))))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("zs",
              (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))))
           )))
       ));
    view = [E]};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "print_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", (IO (Id ("unit", I))))))),
           (Binder ((Some "print_list"),
              [([(PId "nil")], (Some (Print (String "nil"))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr (";",
                          (Print
                             (App [(Id ("string_of_int", I)); (Id ("x", I))])),
                          (BOpr (";", (Print (String " :: ")),
                             (App [(Id ("print_list", I)); (Id ("xs", I))])))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", (IO (Id ("unit", I))))))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 2000000)]),
           (Binder ((PId "test"),
              (MLet ((App [(Id ("cmsort", I)); (Id ("test", I))]),
                 (Binder ((PConstr ("just", [(PId "sorted")])),
                    (Let (R,
                       (App [(Id ("list_len", I)); (Id ("sorted", I))]),
                       (Binder ((PId "len"),
                          (Print
                             (App
                                [(Id ("string_of_int", I)); (Id ("len", I))]))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

[parse success]

-----------------------------------------

#[program]
def split_33‹t_545› :
  (list_6‹??_79,t_545› int) ->
    ((prod1_25‹??_82,??_83›)
      (list_6‹??_80,t_545› int) (list_6‹??_81,t_545› int))
:=
  fun split_547 :
    (list_6‹??_54,t_545› int) ->
      ((prod1_25‹??_57,??_58›)
        (list_6‹??_55,t_545› int) (list_6‹??_56,t_545› int))
  | nil_8 =>
    (ex1_12‹??_63,??_64›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_59,??_60› ?_69[0;0])
      (nil_8‹??_61,??_62› ?_70[0;0]))
  | (cons_9 x_549 nil_8) =>
    (ex1_12‹??_71,??_72›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_67,??_68›
        ?_74[0;0] x_549 (nil_8‹??_65,??_66› ?_73[0;0]))
      (nil_8‹??_69,??_70› ?_75[0;0]))
  | (cons_9 x_550 (cons_9 y_551 zs_552)) =>
    (match ((split_547) zs_552) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_12 xs_554 ys_555) =>
      (ex1_12‹??_77,??_78›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_73,??_74› ?_78[0;0] x_550 xs_554)
        (cons_9‹??_75,??_76› ?_79[0;0] y_551 ys_555)))

#[program]
def merge_34‹t_556› :
  (list_6‹??_95,t_556› int) ->
    (list_6‹??_96,t_556› int) -o (list_6‹??_97,t_556› int)
:=
  fun merge_559 :
    (list_6‹??_84,t_556› int) ->
      (list_6‹??_85,t_556› int) -o (list_6‹??_86,t_556› int)
  | nil_8, ys_562 => ys_562
  | xs_563, nil_8 => xs_563
  | (cons_9 x_564 xs_565), (cons_9 y_566 ys_567) =>
    (match (__lte__ x_564 y_566) in ?_84[0;0] -o ?_85[0;0] with
    | true_4 =>
      (cons_9‹??_89,??_90›
        ?_87[0;0] x_564
        ((merge_559) xs_565 (cons_9‹??_87,??_88› ?_86[0;0] y_566 ys_567)))
    | false_5 =>
      (cons_9‹??_93,??_94›
        ?_89[0;0] y_566
        ((merge_559) (cons_9‹??_91,??_92› ?_88[0;0] x_564 xs_565) ys_567)))

#[program]
def msort_35‹t_569› :
  (list_6‹??_108,t_569› int) -> (list_6‹??_109,t_569› int)
:=
  fun msort_571 :
    (list_6‹??_98,t_569› int) -> (list_6‹??_99,t_569› int)
  | nil_8 => (nil_8‹??_100,??_101› ?_90[0;0])
  | (cons_9 z_573 nil_8) =>
    (cons_9‹??_104,??_105›
      ?_92[0;0] z_573 (nil_8‹??_102,??_103› ?_91[0;0]))
  | zs_574 =>
    (match ((split_33‹??_106›) zs_574) in ?_94[0;0] -o ?_93[0;0] with
    | (ex1_12 xs_576 ys_577) =>
      ((merge_34‹??_107›) ((msort_571) xs_576) ((msort_571) ys_577)))

#[logical]
def cmsort_ch_36‹t_578› : (list_6‹??_113,t_578› int) -> L :=
  fun cmsort_ch_580 : (list_6‹??_110,t_578› int) -> L
  | xs_582 =>
    ch⟨⇑(__583 :
           ((ssing_6‹??_112›) ?_95[0;0] ((msort_35‹??_111›) xs_582))) ⇒
           •⟩

#[program]
def cmsort_worker_37‹t_584› :
  int ->
    ∀ (zs_586 : (list_6‹??_150,t_584› int)) ->
      ((cmsort_ch_36‹t_584›) zs_586) -o IO unit_9
:=
  fun cmsort_worker_588 :
    int ->
      ∀ (zs_590 : (list_6‹??_114,t_584› int)) ->
        ((cmsort_ch_36‹t_584›) zs_590) -o IO unit_9
  | _592, nil_8, c_593 =>
    let* c_594 :=
      ((send c_593)
        (just_2‹??_117,??_118›
          ?_97[0;0] (nil_8‹??_115,??_116› ?_96[0;0])))
    in close c_594
  | _595, (cons_9 z_596 nil_8), c_597 =>
    let* c_598 :=
      ((send c_597)
        (just_2‹??_123,??_124›
          ?_100[0;0]
          (cons_9‹??_121,??_122›
            ?_99[0;0] z_596 (nil_8‹??_119,??_120› ?_98[0;0]))))
    in close c_598
  | i_599, zs_600, c_601 =>
    (match (__lte__ i_599 0) in ?_101[0;0] -o ?_102[0;0] with
    | true_4 =>
      let* c_603 :=
        ((send c_601)
          (just_2‹??_126,??_127›
            ?_103[0;0] ((msort_35‹??_125›) zs_600)))
      in close c_603
    | false_5 =>
      (match ((split_33‹??_128›) zs_600),
       (refl_1‹??_129› ?_104[0;0] ?_105[0;0]) in
         ∀ (h1_604 : ?_106[0;0]) -o
           {(eq_1‹??_137›
              ?_111[0;0]
              (match h1_604 in ?_108[0;0] -o ?_107[0;0] with
              | (ex1_12 xs_607 ys_608) =>
                ((merge_34‹??_132›)
                  ((msort_35‹??_130›) xs_607)
                  ((msort_35‹??_131›) ys_608)))
              (match ((split_33‹??_133›) zs_600) in
                 ?_110[0;0] -o ?_109[0;0]
               with
              | (ex1_12 xs_610 ys_611) =>
                ((merge_34‹??_136›)
                  ((msort_35‹??_134›) xs_610)
                  ((msort_35‹??_135›) ys_611))))} -o
             ?_112[0;0]
       with
      | (ex1_12 xs0_612 ys0_613), pf_614 =>
        let* r1_615 :=
          fork
            fun _616 : ?_113[0;0] -o IO unit_9
            | c1_618 =>
              ((cmsort_worker_588) (__sub__ i_599 1) xs0_612 c1_618)
        in
        let* r2_619 :=
          fork
            fun _620 : ?_114[0;0] -o IO unit_9
            | c2_622 =>
              ((cmsort_worker_588) (__sub__ i_599 1) ys0_613 c2_622)
        in
        let* _623 := recv r1_615 in
        (match _623 in ?_127[0;0] -o ?_126[0;0] with
        | (ex1_12 (just_2 xs1_625) c1_626) =>
          let* _627 := recv r2_619 in
          (match _627 in ?_125[0;0] -o ?_124[0;0] with
          | (ex1_12 (just_2 ys1_629) c2_630) =>
            let zs1_631 :=
              ((just_2‹??_139,??_140›
                 ?_115[0;0] ((merge_34‹??_138›) xs1_625 ys1_629))
                : ((ssing_6‹??_144›)
                    ?_116[0;0]
                    ((merge_34‹??_143›)
                      ((msort_35‹??_141›) xs0_612)
                      ((msort_35‹??_142›) ys0_613))))
            in
            let zs1_632 :=
              (((rwl_2‹??_146,??_147›)
                 ?_122[0;0] ?_121[0;0] ?_120[0;0]
                 fun _633 : ?_117[0;0] -> ?_118[0;0]
                 | x_635 => ((ssing_6‹??_145›) ?_119[0;0] x_635) pf_614
                 zs1_631)
                : ((ssing_6‹??_149›)
                    ?_123[0;0] ((msort_35‹??_148›) zs_600)))
            in
            let* c_636 := ((send c_601) zs1_632) in
            let* __637 := close c1_626 in
            let* __638 := close c2_630 in close c_636))))

#[program]
def cmsort_38‹t_639› :
  ∀ (zs_640 : (list_6‹??_155,t_639› int)) ->
    IO ((ssing_6‹??_157›) ?_132[0;0] ((msort_35‹??_156›) zs_640))
:=
  fun cmsort_641 :
    ∀ (zs_642 : (list_6‹??_151,t_639› int)) ->
      IO ((ssing_6‹??_153›) ?_128[0;0] ((msort_35‹??_152›) zs_642))
  | zs_643 =>
    let* c_644 :=
      fork
        fun _645 : ?_129[0;0] -o IO unit_9
        | c_647 => ((cmsort_worker_37‹??_154›) 4 zs_643 c_647)
    in
    let* _648 := recv c_644 in
    (match _648 in ?_131[0;0] -o ?_130[0;0] with
    | (ex1_12 msg_650 c_651) => let* __652 := close c_651 in return msg_650)

#[program]
def mklist_39‹t_653› : int -> (list_6‹??_163,t_653› int) :=
  fun mklist_655 : int -> (list_6‹??_158,t_653› int)
  | n_657 =>
    (match (__lte__ n_657 0) in ?_133[0;0] -o ?_134[0;0] with
    | true_4 => (nil_8‹??_159,??_160› ?_135[0;0])
    | false_5 =>
      (cons_9‹??_161,??_162›
        ?_136[0;0] n_657 ((mklist_655) (__sub__ n_657 1))))

#[program]
def list_len_40‹t_659› : (list_6‹??_165,t_659› int) -> int :=
  fun list_len_661 : (list_6‹??_164,t_659› int) -> int
  | nil_8 => 0
  | (cons_9 _663 xs_664) => (__add__ 1 ((list_len_661) xs_664))

#[program]
def print_list_41‹t_665› : (list_6‹??_167,t_665› int) -> IO unit_9 :=
  fun print_list_667 : (list_6‹??_166,t_665› int) -> IO unit_9
  | nil_8 => print "nil"
  | (cons_9 x_669 xs_670) =>
    let* __671 := print ((string_of_int_32) x_669) in
    let* __672 := print " :: " in ((print_list_667) xs_670)

#[program]
def main_42‹› : IO unit_9 :=
  let test_673 := ((mklist_39‹L›) 2000000) in
  let* _674 := ((cmsort_38‹??_168›) test_673) in
  (match _674 in ?_138[0;0] -o ?_137[0;0] with
  | (just_2 sorted_676) =>
    let len_677 := ((list_len_40‹??_169›) sorted_676) in
    print ((string_of_int_32) len_677))

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_11909› :
  ∀ (A_11910 : Type‹s_11909›) -> A_11910 -> A_11910
:=
  fun id_11912 : ∀ (A_11913 : Type‹s_11909›) -> A_11913 -> A_11913
  | A_11915, m_11916 => m_11916

#[logical]
inductive eq_1‹s_11917› (A_11918 : Type‹s_11917›) (m_11919 : A_11918):
  A_11918 -> U
where
| refl_1 : (eq_1‹s_11917› A_11918 m_11919 m_11919)

#[program]
def rwl_2‹s_11921,r_11922› :
  ∀ {A_11923 : Type‹s_11921›} ->
    ∀ {m_11924 : A_11923} ->
      ∀ {n_11925 : A_11923} ->
        ∀ {B_11926 : A_11923 -> Type‹r_11922›} ->
          {(eq_1‹s_11921› A_11923 m_11924 n_11925)} ->
            ((B_11926) m_11924) -> ((B_11926) n_11925)
:=
  fun rwl_11930 :
    ∀ {A_11931 : Type‹s_11921›} ->
      ∀ {m_11932 : A_11931} ->
        ∀ {n_11933 : A_11931} ->
          ∀ {B_11934 : A_11931 -> Type‹r_11922›} ->
            {(eq_1‹s_11921› A_11931 m_11932 n_11933)} ->
              ((B_11934) m_11932) -> ((B_11934) n_11933)
  | A_11938, m_11939, n_11940, B_11941, refl_1, __11942 => __11942

#[program]
def rwr_3‹s_11943,r_11944› :
  ∀ {A_11945 : Type‹s_11943›} ->
    ∀ {m_11946 : A_11945} ->
      ∀ {n_11947 : A_11945} ->
        ∀ {B_11948 : A_11945 -> Type‹r_11944›} ->
          {(eq_1‹s_11943› A_11945 m_11946 n_11947)} ->
            ((B_11948) n_11947) -> ((B_11948) m_11946)
:=
  fun rwr_11952 :
    ∀ {A_11953 : Type‹s_11943›} ->
      ∀ {m_11954 : A_11953} ->
        ∀ {n_11955 : A_11953} ->
          ∀ {B_11956 : A_11953 -> Type‹r_11944›} ->
            {(eq_1‹s_11943› A_11953 m_11954 n_11955)} ->
              ((B_11956) n_11955) -> ((B_11956) m_11954)
  | A_11960, m_11961, n_11962, B_11963, refl_1, __11964 => __11964

#[logical]
def congr_4‹s_11965,r_11966,t_11967› :
  ∀ (A_11968 : Type‹s_11965›) ->
    ∀ (B_11969 : Type‹r_11966›) ->
      ∀ (m_11970 : A_11968) ->
        ∀ (n_11971 : A_11968) ->
          ∀ (f_11972 : forall‹t_11967›(__11973 : A_11968), B_11969) ->
            (eq_1‹s_11965› A_11968 m_11970 n_11971) ->
              (eq_1‹r_11966›
                B_11969 ((f_11972) m_11970) ((f_11972) n_11971))
:=
  fun congr_11975 :
    ∀ (A_11976 : Type‹s_11965›) ->
      ∀ (B_11977 : Type‹r_11966›) ->
        ∀ (m_11978 : A_11976) ->
          ∀ (n_11979 : A_11976) ->
            ∀ (f_11980 :
              forall‹t_11967›(__11981 : A_11976), B_11977) ->
              (eq_1‹s_11965› A_11976 m_11978 n_11979) ->
                (eq_1‹r_11966›
                  B_11977 ((f_11980) m_11978) ((f_11980) n_11979))
  | A_11983, B_11984, m_11985, n_11986, f_11987, refl_1 =>
    (refl_1‹r_11966› B_11984 ((f_11987) n_11986))

#[logical]
def axiom_K_5‹› :
  ∀ {A_11988 : U} ->
    ∀ {m_11989 : A_11988} ->
      ∀ (x_11990 : (eq_1‹U› A_11988 m_11989 m_11989)) ->
        (eq_1‹U›
          (eq_1‹U› A_11988 m_11989 m_11989) x_11990
          (refl_1‹U› A_11988 m_11989))
:=
  fun axiom_K_11991 :
    ∀ {A_11992 : U} ->
      ∀ {m_11993 : A_11992} ->
        ∀ (x_11994 : (eq_1‹U› A_11992 m_11993 m_11993)) ->
          (eq_1‹U›
            (eq_1‹U› A_11992 m_11993 m_11993) x_11994
            (refl_1‹U› A_11992 m_11993))
  | A_11995, m_11996, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_11995 m_11996 m_11996) (refl_1‹U› A_11995 m_11996))

#[program]
inductive sing_2‹s_11997,t_11998› (A_11999 : Type‹s_11997›):
  A_11999 -> Type‹t_11998›
where
| just_2 (m_12001 : A_11999) : (sing_2‹s_11997,t_11998› A_11999 m_12001)

#[logical]
def ssing_6‹s_12002› :
  ∀ (A_12003 : Type‹s_12002›) -> A_12003 -> Type‹s_12002›
:=
  fun ssing_12005 :
    ∀ (A_12006 : Type‹s_12002›) -> A_12006 -> Type‹s_12002›
  | A_12008, m_12009 => (sing_2‹s_12002,s_12002› A_12008 m_12009)

#[program]
def sing_elim_7‹s_12010,t_12011› :
  ∀ {A_12012 : Type‹s_12010›} ->
    ∀ {x_12013 : A_12012} ->
      (sing_2‹s_12010,t_12011› A_12012 x_12013) -> A_12012
:=
  fun sing_elim_12015 :
    ∀ {A_12016 : Type‹s_12010›} ->
      ∀ {x_12017 : A_12016} ->
        (sing_2‹s_12010,t_12011› A_12016 x_12017) -> A_12016
  | A_12019, x_12020, (just_2 m_12021) => m_12021

#[logical]
def sing_uniq_8‹s_12022,t_12023› :
  ∀ (A_12024 : Type‹s_12022›) ->
    ∀ (x0_12025 : A_12024) ->
      ∀ (x_12026 : (sing_2‹s_12022,t_12023› A_12024 x0_12025)) ->
        (eq_1‹s_12022›
          A_12024 x0_12025
          ((sing_elim_7‹s_12022,t_12023›) A_12024 x0_12025 x_12026))
:=
  fun sing_uniq_12027 :
    ∀ (A_12028 : Type‹s_12022›) ->
      ∀ (x0_12029 : A_12028) ->
        ∀ (x_12030 : (sing_2‹s_12022,t_12023› A_12028 x0_12029)) ->
          (eq_1‹s_12022›
            A_12028 x0_12029
            ((sing_elim_7‹s_12022,t_12023›) A_12028 x0_12029 x_12030))
  | A_12031, x0_12032, (just_2 m_12033) =>
    (refl_1‹s_12022› A_12031 m_12033)

#[program]
inductive base_3‹s_12034› : Type‹s_12034› where
| tt_3 : base_3‹s_12034›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_12035 : unit_9) -> (eq_1‹U› base_3‹U› x_12035 tt_3‹U›)
:=
  fun unit_eta_12036 :
    ∀ (x_12037 : unit_9) -> (eq_1‹U› base_3‹U› x_12037 tt_3‹U›)
  | x_12038 =>
    (match x_12038 in
       ∀ (x0_12039 : base_3‹U›) -o
         (eq_1‹U› base_3‹U› x0_12039 tt_3‹U›)
     with
    | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›))

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  fun not_12041 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_12045 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __12048 => false_5

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_12051 : bool_4 -> bool_4 -> bool_4
  | true_4, __12054 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  fun xor_12057 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_12060 : nat_5) : nat_5

#[program]
def lte_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_12063 : nat_5 -> nat_5 -> bool_4
  | zero_6, __12066 => true_4
  | (succ_7 n_12067), zero_6 => false_5
  | (succ_7 n_12068), (succ_7 n_12069) => ((lte_12063) n_12068 n_12069)

#[program]
def lt_16‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_12072 : nat_5 -> nat_5 -> bool_4
  | x_12075, y_12076 => ((lte_15) (succ_7‹› x_12075) y_12076)

#[program]
def pred_17‹› : nat_5 -> nat_5 :=
  fun pred_12078 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_12080) => n_12080

#[program]
def add_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_12083 : nat_5 -> nat_5 -> nat_5
  | zero_6, __12086 => __12086
  | (succ_7 n_12087), __12088 => (succ_7‹› ((add_12083) n_12087 __12088))

#[program]
def sub_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_12091 : nat_5 -> nat_5 -> nat_5
  | __12094, zero_6 => __12094
  | __12095, (succ_7 n_12096) => ((sub_12091) ((pred_17) __12095) n_12096)

#[program]
def mul_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_12099 : nat_5 -> nat_5 -> nat_5
  | zero_6, __12102 => zero_6
  | (succ_7 n_12103), __12104 =>
    ((add_18) __12104 ((mul_12099) n_12103 __12104))

#[program]
def div_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_12107 : nat_5 -> nat_5 -> nat_5
  | x_12110, y_12111 =>
    (match ((lt_16) x_12110 y_12111) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_12113 :=
        fun loop_12114 : nat_5 -> nat_5 -> nat_5
        | x_12117, y_12118 =>
          (match ((sub_19) x_12117 ((pred_17) y_12118)) in nat_5 -o nat_5
           with
          | zero_6 => zero_6
          | (succ_7 n_12120) => (succ_7‹› ((loop_12114) n_12120 y_12118)))
      in ((loop_12113) x_12110 y_12111))

#[program]
def rem_22‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_12123 : nat_5 -> nat_5 -> nat_5
  | x_12126, y_12127 =>
    ((sub_19) x_12126 ((mul_20) ((div_21) x_12126 y_12127) y_12127))

#[program]
inductive list_6‹s_12128,t_12129› (A_12130 : Type‹s_12128›):
  Type‹t_12129›
where
| nil_8 : (list_6‹s_12128,t_12129› A_12130)
| cons_9
    (hd_12131 : A_12130) (tl_12132 : (list_6‹s_12128,t_12129› A_12130))
    : (list_6‹s_12128,t_12129› A_12130)

#[program]
def free_list_23‹s_12133,t_12134› :
  ∀ {A_12135 : Type‹s_12133›} ->
    A_12135 -> unit_9 -> (list_6‹s_12133,t_12134› A_12135) -> unit_9
:=
  fun free_list_12139 :
    ∀ {A_12140 : Type‹s_12133›} ->
      A_12140 -> unit_9 -> (list_6‹s_12133,t_12134› A_12140) -> unit_9
  | A_12144, f_12145, nil_8 => tt_3‹U›
  | A_12146, f_12147, (cons_9 hd_12148 tl_12149) =>
    let __12150 := ((f_12147) hd_12148) in
    ((free_list_12139) A_12146 f_12147 tl_12149)

#[program]
inductive exists_7‹s_12151,r_12152› (A_12153 : Type‹s_12151›) (B_12154 : 
A_12153 -> Type‹r_12152›): L where
| ex_10
    (m_12156 : A_12153) {n_12157 : ((B_12154) m_12156)}
    : (exists_7‹s_12151,r_12152› A_12153 B_12154)

#[program]
inductive exists0_8‹s_12158,r_12159› (A_12160 : Type‹s_12158›) (B_12161 : 
A_12160 -> Type‹r_12159›): L where
| ex0_11
    {m_12163 : A_12160} (n_12164 : ((B_12161) m_12163))
    : (exists0_8‹s_12158,r_12159› A_12160 B_12161)

#[program]
inductive exists1_9‹s_12165,r_12166› (A_12167 : Type‹s_12165›) (B_12168 : 
A_12167 -> Type‹r_12166›): L where
| ex1_12
    (m_12170 : A_12167) (n_12171 : ((B_12168) m_12170))
    : (exists1_9‹s_12165,r_12166› A_12167 B_12168)

#[logical]
def prod0_24‹s_12172,r_12173› :
  Type‹s_12172› -> Type‹r_12173› -> L
:=
  fun prod0_12176 : Type‹s_12172› -> Type‹r_12173› -> L
  | A_12179, B_12180 =>
    (exists0_8‹s_12172,r_12173›
      A_12179 fun _12181 : A_12179 -> Type‹r_12173›
              | __12183 => B_12180)

#[logical]
def prod1_25‹s_12184,r_12185› :
  Type‹s_12184› -> Type‹r_12185› -> L
:=
  fun prod1_12188 : Type‹s_12184› -> Type‹r_12185› -> L
  | A_12191, B_12192 =>
    (exists1_9‹s_12184,r_12185›
      A_12191 fun _12193 : A_12191 -> Type‹r_12185›
              | __12195 => B_12192)

#[program]
def pow_26‹› : int -> int -> int :=
  fun pow_12198 : int -> int -> int
  | x_12201, y_12202 =>
    let loop_12203 :=
      fun loop_12204 : int -> int -> int
      | acc_12207, y_12208 =>
        (match (__lte__ y_12208 0) in bool_4 -o int with
        | true_4 => acc_12207
        | false_5 =>
          ((loop_12204) (__mul__ x_12201 acc_12207) (__sub__ y_12208 1)))
    in ((loop_12203) 1 y_12202)

#[program]
def powm_27‹› : int -> int -> int -> int :=
  fun powm_12213 : int -> int -> int -> int
  | x_12217, y_12218, m_12219 =>
    let loop_12220 :=
      fun loop_12221 : int -> int -> int
      | acc_12224, y_12225 =>
        (match (__lte__ y_12225 0) in bool_4 -o int with
        | true_4 => acc_12224
        | false_5 =>
          ((loop_12221)
            (__mod__ (__mul__ x_12217 acc_12224) m_12219) (__sub__ y_12225 1)))
    in ((loop_12220) 1 y_12218)

#[program]
def ord_28‹› : char -> int :=
  fun ord_12228 : char -> int
  | c_12230 => (__ord__ c_12230)

#[program]
def chr_29‹› : int -> char :=
  fun chr_12232 : int -> char
  | i_12234 => (__chr__ i_12234)

#[program]
def str_30‹› : char -> string :=
  fun str_12236 : char -> string
  | c_12238 => (__push__ "" c_12238)

#[program]
def strlen_31‹› : string -> int :=
  fun strlen_12240 : string -> int
  | s_12242 => (__size__ s_12242)

#[program]
def string_of_int_32‹› : int -> string :=
  fun string_of_int_12244 : int -> string
  | i_12246 =>
    let aux_12247 :=
      fun aux_12248 : int -> string
      | i_12250 =>
        (match (__lte__ 10 i_12250) in bool_4 -o string with
        | true_4 =>
          let r_12252 := (__mod__ i_12250 10) in
          let i_12253 := (__div__ i_12250 10) in
          (__push__ ((aux_12248) i_12253)
            ((chr_29) (__add__ r_12252 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_12250 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_12246) in bool_4 -o string with
    | true_4 => ((aux_12247) i_12246)
    | false_5 => (__cat__ "~" ((aux_12247) (__neg__ i_12246))))

#[program]
def split_33‹t_12255› :
  (list_6‹U,t_12255› int) ->
    ((prod1_25‹t_12255,t_12255›)
      (list_6‹U,t_12255› int) (list_6‹U,t_12255› int))
:=
  fun split_12257 :
    (list_6‹U,t_12255› int) ->
      ((prod1_25‹t_12255,t_12255›)
        (list_6‹U,t_12255› int) (list_6‹U,t_12255› int))
  | nil_8 =>
    (ex1_12‹t_12255,t_12255›
      (list_6‹U,t_12255› int)
      fun _12259 : (list_6‹U,t_12255› int) -> Type‹t_12255›
      | __12261 => (list_6‹U,t_12255› int) (nil_8‹U,t_12255› int)
      (nil_8‹U,t_12255› int))
  | (cons_9 hd_12262 nil_8) =>
    (ex1_12‹t_12255,t_12255›
      (list_6‹U,t_12255› int)
      fun _12263 : (list_6‹U,t_12255› int) -> Type‹t_12255›
      | __12265 => (list_6‹U,t_12255› int)
      (cons_9‹U,t_12255› int hd_12262 (nil_8‹U,t_12255› int))
      (nil_8‹U,t_12255› int))
  | (cons_9 hd_12266 (cons_9 hd_12267 tl_12268)) =>
    (match ((split_12257) tl_12268) in
       ((prod1_25‹t_12255,t_12255›)
         (list_6‹U,t_12255› int) (list_6‹U,t_12255› int)) -o
         ((prod1_25‹t_12255,t_12255›)
           (list_6‹U,t_12255› int) (list_6‹U,t_12255› int))
     with
    | (ex1_12 m_12270 n_12271) =>
      (ex1_12‹t_12255,t_12255›
        (list_6‹U,t_12255› int)
        fun _12272 : (list_6‹U,t_12255› int) -> Type‹t_12255›
        | __12274 => (list_6‹U,t_12255› int)
        (cons_9‹U,t_12255› int hd_12266 m_12270)
        (cons_9‹U,t_12255› int hd_12267 n_12271)))

#[program]
def merge_34‹t_12275› :
  (list_6‹U,t_12275› int) ->
    (list_6‹U,t_12275› int) -o (list_6‹U,t_12275› int)
:=
  fun merge_12278 :
    (list_6‹U,t_12275› int) ->
      (list_6‹U,t_12275› int) -o (list_6‹U,t_12275› int)
  | nil_8, __12281 => __12281
  | (cons_9 hd_12282 tl_12283), nil_8 =>
    (cons_9‹U,t_12275› int hd_12282 tl_12283)
  | (cons_9 hd_12284 tl_12285), (cons_9 hd_12286 tl_12287) =>
    (match (__lte__ hd_12284 hd_12286) in
       bool_4 -o (list_6‹U,t_12275› int)
     with
    | true_4 =>
      (cons_9‹U,t_12275›
        int hd_12284
        ((merge_12278)
          tl_12285 (cons_9‹U,t_12275› int hd_12286 tl_12287)))
    | false_5 =>
      (cons_9‹U,t_12275›
        int hd_12286
        ((merge_12278)
          (cons_9‹U,t_12275› int hd_12284 tl_12285) tl_12287)))

#[program]
def msort_35‹t_12289› :
  (list_6‹U,t_12289› int) -> (list_6‹U,t_12289› int)
:=
  fun msort_12291 :
    (list_6‹U,t_12289› int) -> (list_6‹U,t_12289› int)
  | nil_8 => (nil_8‹U,t_12289› int)
  | (cons_9 hd_12293 nil_8) =>
    (cons_9‹U,t_12289› int hd_12293 (nil_8‹U,t_12289› int))
  | (cons_9 hd_12294 (cons_9 hd_12295 tl_12296)) =>
    (match ((split_33‹t_12289›)
             (cons_9‹U,t_12289›
               int hd_12294 (cons_9‹U,t_12289› int hd_12295 tl_12296))) in
       ((prod1_25‹t_12289,t_12289›)
         (list_6‹U,t_12289› int) (list_6‹U,t_12289› int)) -o
         (list_6‹U,t_12289› int)
     with
    | (ex1_12 m_12298 n_12299) =>
      ((merge_34‹t_12289›)
        ((msort_12291) m_12298) ((msort_12291) n_12299)))

#[logical]
def cmsort_ch_36‹t_12300› : (list_6‹U,t_12300› int) -> L :=
  fun cmsort_ch_12302 : (list_6‹U,t_12300› int) -> L
  | xs_12304 =>
    ch⟨⇑(__12305 :
           ((ssing_6‹t_12300›)
             (list_6‹U,t_12300› int) ((msort_35‹t_12300›) xs_12304))) ⇒
           •⟩

#[program]
def cmsort_worker_37‹t_12306› :
  int ->
    ∀ (zs_12308 : (list_6‹U,t_12306› int)) ->
      ((cmsort_ch_36‹t_12306›) zs_12308) -o IO unit_9
:=
  fun cmsort_worker_12310 :
    int ->
      ∀ (zs_12312 : (list_6‹U,t_12306› int)) ->
        ((cmsort_ch_36‹t_12306›) zs_12312) -o IO unit_9
  | __12314, nil_8, __12315 =>
    let* c_12316 :=
      ((send __12315)
        (just_2‹t_12306,t_12306›
          (list_6‹U,t_12306› int) (nil_8‹U,t_12306› int)))
    in close c_12316
  | __12317, (cons_9 hd_12318 nil_8), __12319 =>
    let* c_12320 :=
      ((send __12319)
        (just_2‹t_12306,t_12306›
          (list_6‹U,t_12306› int)
          (cons_9‹U,t_12306› int hd_12318 (nil_8‹U,t_12306› int))))
    in close c_12320
  | __12321, (cons_9 hd_12322 (cons_9 hd_12323 tl_12324)), __12325 =>
    (match (__lte__ __12321 0) in bool_4 -o IO unit_9 with
    | true_4 =>
      let* c_12327 :=
        ((send __12325)
          (just_2‹t_12306,t_12306›
            (list_6‹U,t_12306› int)
            ((msort_35‹t_12306›)
              (cons_9‹U,t_12306›
                int hd_12322 (cons_9‹U,t_12306› int hd_12323 tl_12324)))))
      in close c_12327
    | false_5 =>
      (match ((split_33‹t_12306›)
               (cons_9‹U,t_12306›
                 int hd_12322 (cons_9‹U,t_12306› int hd_12323 tl_12324))),
       (refl_1‹t_12306›
         (list_6‹U,t_12306› int)
         (match ((split_33‹t_12306›)
                  (cons_9‹U,t_12306›
                    int hd_12322
                    (cons_9‹U,t_12306› int hd_12323 tl_12324))) in
            ((prod1_25‹t_12306,t_12306›)
              (list_6‹U,t_12306› int) (list_6‹U,t_12306› int)) -o
              (list_6‹U,t_12306› int)
          with
         | (ex1_12 m_12329 n_12330) =>
           ((merge_34‹t_12306›)
             ((msort_35‹t_12306›) m_12329)
             ((msort_35‹t_12306›) n_12330)))) in
         ∀ (h1_12331 :
           ((prod1_25‹t_12306,t_12306›)
             (list_6‹U,t_12306› int) (list_6‹U,t_12306› int))) -o
           {(eq_1‹t_12306›
              (list_6‹U,t_12306› int)
              (match h1_12331 in
                 ((prod1_25‹t_12306,t_12306›)
                   (list_6‹U,t_12306› int) (list_6‹U,t_12306› int)) -o
                   (list_6‹U,t_12306› int)
               with
              | (ex1_12 m_12334 n_12335) =>
                ((merge_34‹t_12306›)
                  ((msort_35‹t_12306›) m_12334)
                  ((msort_35‹t_12306›) n_12335)))
              (match ((split_33‹t_12306›)
                       (cons_9‹U,t_12306›
                         int hd_12322
                         (cons_9‹U,t_12306› int hd_12323 tl_12324))) in
                 ((prod1_25‹t_12306,t_12306›)
                   (list_6‹U,t_12306› int) (list_6‹U,t_12306› int)) -o
                   (list_6‹U,t_12306› int)
               with
              | (ex1_12 m_12337 n_12338) =>
                ((merge_34‹t_12306›)
                  ((msort_35‹t_12306›) m_12337)
                  ((msort_35‹t_12306›) n_12338))))} -o
             IO unit_9
       with
      | (ex1_12 m_12339 n_12340), __12341 =>
        let* r1_12342 :=
          fork
            fun _12343 : ((cmsort_ch_36‹t_12306›) m_12339) -o IO unit_9
            | _12345 =>
              ((cmsort_worker_12310) (__sub__ __12321 1) m_12339 _12345)
        in
        let* r2_12346 :=
          fork
            fun _12347 : ((cmsort_ch_36‹t_12306›) n_12340) -o IO unit_9
            | _12349 =>
              ((cmsort_worker_12310) (__sub__ __12321 1) n_12340 _12349)
        in
        let* _12350 := recv r1_12342 in
        (match _12350 in
           (exists1_9‹t_12306,L›
             ((ssing_6‹t_12306›)
               (list_6‹U,t_12306› int) ((msort_35‹t_12306›) m_12339))
             fun _12352 :
               ((ssing_6‹t_12306›)
                 (list_6‹U,t_12306› int)
                 ((msort_35‹t_12306›) m_12339)) -> L
             | __12354 => hc⟨•⟩) -o IO base_3‹U›
         with
        | (ex1_12 (just_2 m_12355) n_12356) =>
          let* _12357 := recv r2_12346 in
          (match _12357 in
             (exists1_9‹t_12306,L›
               ((ssing_6‹t_12306›)
                 (list_6‹U,t_12306› int)
                 ((msort_35‹t_12306›) n_12340))
               fun _12359 :
                 ((ssing_6‹t_12306›)
                   (list_6‹U,t_12306› int)
                   ((msort_35‹t_12306›) n_12340)) -> L
               | __12361 => hc⟨•⟩) -o IO base_3‹U›
           with
          | (ex1_12 (just_2 m_12362) n_12363) =>
            let zs1_12364 :=
              ((just_2‹t_12306,t_12306›
                 (list_6‹U,t_12306› int)
                 ((merge_34‹t_12306›) m_12355 m_12362))
                : ((ssing_6‹t_12306›)
                    (list_6‹U,t_12306› int)
                    ((merge_34‹t_12306›)
                      ((msort_35‹t_12306›) m_12339)
                      ((msort_35‹t_12306›) n_12340))))
            in
            let zs1_12365 :=
              (((rwl_2‹t_12306,t_12306›)
                 (list_6‹U,t_12306› int)
                 ((merge_34‹t_12306›)
                   ((msort_35‹t_12306›) m_12339)
                   ((msort_35‹t_12306›) n_12340))
                 (match ((split_33‹t_12306›)
                          (cons_9‹U,t_12306›
                            int hd_12322
                            (cons_9‹U,t_12306› int hd_12323 tl_12324))) in
                    ((prod1_25‹t_12306,t_12306›)
                      (list_6‹U,t_12306› int) (list_6‹U,t_12306› int)) -o
                      (list_6‹U,t_12306› int)
                  with
                 | (ex1_12 m_12367 n_12368) =>
                   ((merge_34‹t_12306›)
                     ((msort_35‹t_12306›) m_12367)
                     ((msort_35‹t_12306›) n_12368)))
                 fun _12369 :
                   (list_6‹U,t_12306› int) -> Type‹t_12306›
                 | __12371 =>
                   ((ssing_6‹t_12306›)
                     (list_6‹U,t_12306› int) __12371)
                 __12341 zs1_12364)
                : ((ssing_6‹t_12306›)
                    (list_6‹U,t_12306› int)
                    ((msort_35‹t_12306›)
                      (cons_9‹U,t_12306›
                        int hd_12322
                        (cons_9‹U,t_12306› int hd_12323 tl_12324)))))
            in
            let* c_12372 := ((send __12325) zs1_12365) in
            let* __12373 := close n_12356 in
            let* __12374 := close n_12363 in close c_12372))))

#[program]
def cmsort_38‹t_12375› :
  ∀ (zs_12376 : (list_6‹U,t_12375› int)) ->
    IO ((ssing_6‹t_12375›)
         (list_6‹U,t_12375› int) ((msort_35‹t_12375›) zs_12376))
:=
  fun cmsort_12377 :
    ∀ (zs_12378 : (list_6‹U,t_12375› int)) ->
      IO ((ssing_6‹t_12375›)
           (list_6‹U,t_12375› int) ((msort_35‹t_12375›) zs_12378))
  | zs_12379 =>
    let* c_12380 :=
      fork
        fun _12381 : ((cmsort_ch_36‹t_12375›) zs_12379) -o IO unit_9
        | _12383 => ((cmsort_worker_37‹t_12375›) 4 zs_12379 _12383)
    in
    let* _12384 := recv c_12380 in
    (match _12384 in
       (exists1_9‹t_12375,L›
         ((ssing_6‹t_12375›)
           (list_6‹U,t_12375› int) ((msort_35‹t_12375›) zs_12379))
         fun _12386 :
           ((ssing_6‹t_12375›)
             (list_6‹U,t_12375› int) ((msort_35‹t_12375›) zs_12379)) ->
             L
         | __12388 => hc⟨•⟩) -o
         IO ((ssing_6‹t_12375›)
              (list_6‹U,t_12375› int) ((msort_35‹t_12375›) zs_12379))
     with
    | (ex1_12 m_12389 n_12390) =>
      let* __12391 := close n_12390 in return m_12389)

#[program]
def mklist_39‹t_12392› : int -> (list_6‹U,t_12392› int) :=
  fun mklist_12394 : int -> (list_6‹U,t_12392› int)
  | n_12396 =>
    (match (__lte__ n_12396 0) in bool_4 -o (list_6‹U,t_12392› int) with
    | true_4 => (nil_8‹U,t_12392› int)
    | false_5 =>
      (cons_9‹U,t_12392›
        int n_12396 ((mklist_12394) (__sub__ n_12396 1))))

#[program]
def list_len_40‹t_12398› : (list_6‹U,t_12398› int) -> int :=
  fun list_len_12400 : (list_6‹U,t_12398› int) -> int
  | nil_8 => 0
  | (cons_9 hd_12402 tl_12403) => (__add__ 1 ((list_len_12400) tl_12403))

#[program]
def print_list_41‹t_12404› : (list_6‹U,t_12404› int) -> IO unit_9 :=
  fun print_list_12406 : (list_6‹U,t_12404› int) -> IO unit_9
  | nil_8 => print "nil"
  | (cons_9 hd_12408 tl_12409) =>
    let* __12410 := print ((string_of_int_32) hd_12408) in
    let* __12411 := print " :: " in ((print_list_12406) tl_12409)

#[program]
def main_42‹› : IO unit_9 :=
  let test_12412 := ((mklist_39‹L›) 2000000) in
  let* _12413 := ((cmsort_38‹L›) test_12412) in
  (match _12413 in
     ((ssing_6‹L›) (list_6‹U,L› int) ((msort_35‹L›) test_12412)) -o
       IO base_3‹U›
   with
  | (just_2 m_12415) =>
    let len_12416 := ((list_len_40‹L›) m_12415) in
    print ((string_of_int_32) len_12416))

[trans1e success]

-----------------------------------------

#[program]
def idU_44 := fun id_21131 (A_21132) -> (m_21133) ->
                m_21133

#[program]
def idL_43 := fun id_21134 (A_21135) -> (m_21136) ->
                m_21136

#[logical]
inductive eqU_11 where
| reflU_14 of layout[]

#[logical]
inductive eqL_10 where
| reflL_13 of layout[]

#[program]
def rwlUU_48 :=
  fun rwl_21137 {A_21138} -> {m_21139} -> {n_21140} -> {B_21141} ->
  {__21142} -> (__21143) ->
    (match {NULL} with
    | reflU_14  => __21143)

#[program]
def rwlUL_47 :=
  fun rwl_21144 {A_21145} -> {m_21146} -> {n_21147} -> {B_21148} ->
  {__21149} -> (__21150) ->
    (match {NULL} with
    | reflU_14  => __21150)

#[program]
def rwlLU_46 :=
  fun rwl_21151 {A_21152} -> {m_21153} -> {n_21154} -> {B_21155} ->
  {__21156} -> (__21157) ->
    (match {NULL} with
    | reflL_13  => __21157)

#[program]
def rwlLL_45 :=
  fun rwl_21158 {A_21159} -> {m_21160} -> {n_21161} -> {B_21162} ->
  {__21163} -> (__21164) ->
    (match {NULL} with
    | reflL_13  => __21164)

#[program]
def rwrUU_52 :=
  fun rwr_21165 {A_21166} -> {m_21167} -> {n_21168} -> {B_21169} ->
  {__21170} -> (__21171) ->
    (match {NULL} with
    | reflU_14  => __21171)

#[program]
def rwrUL_51 :=
  fun rwr_21172 {A_21173} -> {m_21174} -> {n_21175} -> {B_21176} ->
  {__21177} -> (__21178) ->
    (match {NULL} with
    | reflU_14  => __21178)

#[program]
def rwrLU_50 :=
  fun rwr_21179 {A_21180} -> {m_21181} -> {n_21182} -> {B_21183} ->
  {__21184} -> (__21185) ->
    (match {NULL} with
    | reflL_13  => __21185)

#[program]
def rwrLL_49 :=
  fun rwr_21186 {A_21187} -> {m_21188} -> {n_21189} -> {B_21190} ->
  {__21191} -> (__21192) ->
    (match {NULL} with
    | reflL_13  => __21192)

#[logical]
def congrUUU_60 := NULL

#[logical]
def congrUUL_59 := NULL

#[logical]
def congrULU_58 := NULL

#[logical]
def congrULL_57 := NULL

#[logical]
def congrLUU_56 := NULL

#[logical]
def congrLUL_55 := NULL

#[logical]
def congrLLU_54 := NULL

#[logical]
def congrLLL_53 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_15 where
| justUU_18 of layout[R]

#[program]
inductive singUL_14 where
| justUL_17 of layout[R]

#[program]
inductive singLU_13 where


#[program]
inductive singLL_12 where
| justLL_15 of layout[R]

#[logical]
def ssingU_62 := NULL

#[logical]
def ssingL_61 := NULL

#[program]
def sing_elimUU_66 :=
  fun sing_elim_21193 {A_21194} -> {x_21195} -> (__21196) ->
    (match __21196 with
    | justUU_18 m_21197 => m_21197)

#[program]
def sing_elimUL_65 :=
  fun sing_elim_21198 {A_21199} -> {x_21200} -> (__21201) ->
    (match __21201 with
    | justUL_17 m_21202 => m_21202)

#[program]
def sing_elimLU_64 :=
  fun sing_elim_21203 {A_21204} -> {x_21205} -> (__21206) ->
    (match __21206 with
    )

#[program]
def sing_elimLL_63 :=
  fun sing_elim_21207 {A_21208} -> {x_21209} -> (__21210) ->
    (match __21210 with
    | justLL_15 m_21211 => m_21211)

#[logical]
def sing_uniqUU_70 := NULL

#[logical]
def sing_uniqUL_69 := NULL

#[logical]
def sing_uniqLU_68 := NULL

#[logical]
def sing_uniqLL_67 := NULL

#[program]
inductive baseU_17 where
| ttU_20 of layout[]

#[program]
inductive baseL_16 where
| ttL_19 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_21212 (__21213) ->
    (match __21213 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_21214 (__21215) -> (__21216) ->
    (match __21215 with
    | true_4  =>
      (match __21216 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_21217 (__21218) -> (__21219) ->
    (match __21218 with
    | true_4  => true_4
    | false_5  =>
      (match __21219 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_21220 (__21221) -> (__21222) ->
    (match __21221 with
    | true_4  =>
      (match __21222 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __21222 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_21223 (__21224) -> (__21225) ->
    (match __21224 with
    | zero_6  => true_4
    | succ_7 n_21226 =>
      (match __21225 with
      | zero_6  => false_5 | succ_7 n_21227 => ((lte_21223) n_21226 n_21227)))

#[program]
def lt_16 :=
  fun lt_21228 (x_21229) -> (y_21230) ->
    ((lte_15) (succ_7 x_21229) y_21230)

#[program]
def pred_17 :=
  fun pred_21231 (__21232) ->
    (match __21232 with
    | zero_6  => zero_6 | succ_7 n_21233 => n_21233)

#[program]
def add_18 :=
  fun add_21234 (__21235) -> (__21236) ->
    (match __21235 with
    | zero_6  => __21236
    | succ_7 n_21237 => (succ_7 ((add_21234) n_21237 __21236)))

#[program]
def sub_19 :=
  fun sub_21238 (__21239) -> (__21240) ->
    (match __21240 with
    | zero_6  => __21239
    | succ_7 n_21241 => ((sub_21238) ((pred_17) __21239) n_21241))

#[program]
def mul_20 :=
  fun mul_21242 (__21243) -> (__21244) ->
    (match __21243 with
    | zero_6  => zero_6
    | succ_7 n_21245 => ((add_18) __21244 ((mul_21242) n_21245 __21244)))

#[program]
def div_21 :=
  fun div_21246 (x_21247) -> (y_21248) ->
    (match ((lt_16) x_21247 y_21248) with
    | true_4  => zero_6
    | false_5  =>
      let loop_21249 :=
        fun loop_21250 (x_21251) -> (y_21252) ->
          (match ((sub_19) x_21251 ((pred_17) y_21252)) with
          | zero_6  => zero_6
          | succ_7 n_21253 => (succ_7 ((loop_21250) n_21253 y_21252)))
      in ((loop_21249) x_21247 y_21248))

#[program]
def rem_22 :=
  fun rem_21254 (x_21255) -> (y_21256) ->
    ((sub_19) x_21255 ((mul_20) ((div_21) x_21255 y_21256) y_21256))

#[program]
inductive listUU_21 where
| nilUU_27 of layout[]
| consUU_28 of layout[R, R]

#[program]
inductive listUL_20 where
| nilUL_25 of layout[]
| consUL_26 of layout[R, R]

#[program]
inductive listLU_19 where
| nilLU_23 of layout[]

#[program]
inductive listLL_18 where
| nilLL_21 of layout[]
| consLL_22 of layout[R, R]

#[program]
def free_listUU_74 :=
  fun free_list_21257 {A_21258} -> (f_21259) -> (__21260) ->
    (match __21260 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_21261 tl_21262 =>
      let __21263 := ((f_21259) hd_21261) in
      ((free_list_21257) NULL f_21259 tl_21262))

#[program]
def free_listUL_73 :=
  fun free_list_21264 {A_21265} -> (f_21266) -> (__21267) ->
    (match __21267 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_21268 tl_21269 =>
      let __21270 := ((f_21266) hd_21268) in
      ((free_list_21264) NULL f_21266 tl_21269))

#[program]
def free_listLL_71 :=
  fun free_list_21271 {A_21272} -> (f_21273) -> (__21274) ->
    (match __21274 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_21275 tl_21276 =>
      let __21277 := ((f_21273) hd_21275) in
      ((free_list_21271) NULL f_21273 tl_21276))

#[program]
inductive existsUU_25 where
| exUU_32 of layout[R, N]

#[program]
inductive existsUL_24 where
| exUL_31 of layout[R, N]

#[program]
inductive existsLU_23 where
| exLU_30 of layout[R, N]

#[program]
inductive existsLL_22 where
| exLL_29 of layout[R, N]

#[program]
inductive exists0UU_29 where
| ex0UU_36 of layout[N, R]

#[program]
inductive exists0UL_28 where
| ex0UL_35 of layout[N, R]

#[program]
inductive exists0LU_27 where
| ex0LU_34 of layout[N, R]

#[program]
inductive exists0LL_26 where
| ex0LL_33 of layout[N, R]

#[program]
inductive exists1UU_33 where
| ex1UU_40 of layout[R, R]

#[program]
inductive exists1UL_32 where
| ex1UL_39 of layout[R, R]

#[program]
inductive exists1LU_31 where
| ex1LU_38 of layout[R, R]

#[program]
inductive exists1LL_30 where
| ex1LL_37 of layout[R, R]

#[logical]
def prod0UU_78 := NULL

#[logical]
def prod0UL_77 := NULL

#[logical]
def prod0LU_76 := NULL

#[logical]
def prod0LL_75 := NULL

#[logical]
def prod1UU_82 := NULL

#[logical]
def prod1UL_81 := NULL

#[logical]
def prod1LU_80 := NULL

#[logical]
def prod1LL_79 := NULL

#[program]
def pow_26 :=
  fun pow_21278 (x_21279) -> (y_21280) ->
    let loop_21281 :=
      fun loop_21282 (acc_21283) -> (y_21284) ->
        (match (__lte__ y_21284 0) with
        | true_4  => acc_21283
        | false_5  =>
          ((loop_21282) (__mul__ x_21279 acc_21283) (__sub__ y_21284 1)))
    in ((loop_21281) 1 y_21280)

#[program]
def powm_27 :=
  fun powm_21285 (x_21286) -> (y_21287) -> (m_21288) ->
    let loop_21289 :=
      fun loop_21290 (acc_21291) -> (y_21292) ->
        (match (__lte__ y_21292 0) with
        | true_4  => acc_21291
        | false_5  =>
          ((loop_21290)
            (__mod__ (__mul__ x_21286 acc_21291) m_21288) (__sub__ y_21292 1)))
    in ((loop_21289) 1 y_21287)

#[program]
def ord_28 := fun ord_21293 (c_21294) ->
                (__ord__ c_21294)

#[program]
def chr_29 := fun chr_21295 (i_21296) ->
                (__chr__ i_21296)

#[program]
def str_30 := fun str_21297 (c_21298) ->
                (__push__ "" c_21298)

#[program]
def strlen_31 := fun strlen_21299 (s_21300) ->
                   (__size__ s_21300)

#[program]
def string_of_int_32 :=
  fun string_of_int_21301 (i_21302) ->
    let aux_21303 :=
      fun aux_21304 (i_21305) ->
        (match (__lte__ 10 i_21305) with
        | true_4  =>
          let r_21306 := (__mod__ i_21305 10) in
          let i_21307 := (__div__ i_21305 10) in
          (__push__ ((aux_21304) i_21307)
            ((chr_29) (__add__ r_21306 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_21305 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_21302) with
    | true_4  => ((aux_21303) i_21302)
    | false_5  => (__cat__ "~" ((aux_21303) (__neg__ i_21302))))

#[program]
def splitU_84 :=
  fun split_21308 (__21309) ->
    (match __21309 with
    | nilUU_27  => (ex1UU_40 nilUU_27 nilUU_27)
    | consUU_28 hd_21310 tl_21311 =>
      (match tl_21311 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_21310 nilUU_27) nilUU_27)
      | consUU_28 hd_21312 tl_21313 =>
        (match ((split_21308) tl_21313) with
        | ex1UU_40 m_21314 n_21315 =>
          (ex1UU_40
            (consUU_28 hd_21310 m_21314) (consUU_28 hd_21312 n_21315)))))

#[program]
def splitL_83 :=
  fun split_21316 (__21317) ->
    (match __21317 with
    | nilUL_25  => (ex1LL_37 nilUL_25 nilUL_25)
    | consUL_26 hd_21318 tl_21319 =>
      (match tl_21319 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_21318 nilUL_25) nilUL_25)
      | consUL_26 hd_21320 tl_21321 =>
        (match ((split_21316) tl_21321) with
        | ex1LL_37 m_21322 n_21323 =>
          (ex1LL_37
            (consUL_26 hd_21318 m_21322) (consUL_26 hd_21320 n_21323)))))

#[program]
def mergeU_86 :=
  fun merge_21324 (__21325) -> (__21326) -o
    (match __21325 with
    | nilUU_27  => __21326
    | consUU_28 hd_21327 tl_21328 =>
      (match __21326 with
      | nilUU_27  => (consUU_28 hd_21327 tl_21328)
      | consUU_28 hd_21329 tl_21330 =>
        (match (__lte__ hd_21327 hd_21329) with
        | true_4  =>
          (consUU_28
            hd_21327 ((merge_21324) tl_21328 (consUU_28 hd_21329 tl_21330)))
        | false_5  =>
          (consUU_28
            hd_21329 ((merge_21324) (consUU_28 hd_21327 tl_21328) tl_21330)))))

#[program]
def mergeL_85 :=
  fun merge_21331 (__21332) -> (__21333) -o
    (match __21332 with
    | nilUL_25  => __21333
    | consUL_26 hd_21334 tl_21335 =>
      (match __21333 with
      | nilUL_25  => (consUL_26 hd_21334 tl_21335)
      | consUL_26 hd_21336 tl_21337 =>
        (match (__lte__ hd_21334 hd_21336) with
        | true_4  =>
          (consUL_26
            hd_21334 ((merge_21331) tl_21335 (consUL_26 hd_21336 tl_21337)))
        | false_5  =>
          (consUL_26
            hd_21336 ((merge_21331) (consUL_26 hd_21334 tl_21335) tl_21337)))))

#[program]
def msortU_88 :=
  fun msort_21338 (__21339) ->
    (match __21339 with
    | nilUU_27  => nilUU_27
    | consUU_28 hd_21340 tl_21341 =>
      (match tl_21341 with
      | nilUU_27  => (consUU_28 hd_21340 nilUU_27)
      | consUU_28 hd_21342 tl_21343 =>
        (match ((splitU_84)
                 (consUU_28 hd_21340 (consUU_28 hd_21342 tl_21343))) with
        | ex1UU_40 m_21344 n_21345 =>
          ((mergeU_86) ((msort_21338) m_21344) ((msort_21338) n_21345)))))

#[program]
def msortL_87 :=
  fun msort_21346 (__21347) ->
    (match __21347 with
    | nilUL_25  => nilUL_25
    | consUL_26 hd_21348 tl_21349 =>
      (match tl_21349 with
      | nilUL_25  => (consUL_26 hd_21348 nilUL_25)
      | consUL_26 hd_21350 tl_21351 =>
        (match ((splitL_83)
                 (consUL_26 hd_21348 (consUL_26 hd_21350 tl_21351))) with
        | ex1LL_37 m_21352 n_21353 =>
          ((mergeL_85) ((msort_21346) m_21352) ((msort_21346) n_21353)))))

#[logical]
def cmsort_chU_90 := NULL

#[logical]
def cmsort_chL_89 := NULL

#[program]
def cmsort_workerU_92 :=
  fun cmsort_worker_21354 (__21355) -> (zs_21356) -> (__21357) -o
    (match zs_21356 with
    | nilUU_27  =>
      let* c_21358 := ((send[R,U] __21357) (justUU_18 nilUU_27)) in
      close[true] c_21358
    | consUU_28 hd_21359 tl_21360 =>
      (match tl_21360 with
      | nilUU_27  =>
        let* c_21361 :=
          ((send[R,U] __21357) (justUU_18 (consUU_28 hd_21359 nilUU_27)))
        in close[true] c_21361
      | consUU_28 hd_21362 tl_21363 =>
        (match (__lte__ __21355 0) with
        | true_4  =>
          let* c_21364 :=
            ((send[R,U] __21357)
              (justUU_18
                ((msortU_88)
                  (consUU_28 hd_21359 (consUU_28 hd_21362 tl_21363)))))
          in close[true] c_21364
        | false_5  =>
          (match ((splitU_84)
                   (consUU_28 hd_21359 (consUU_28 hd_21362 tl_21363))) with
          | ex1UU_40 m_21365 n_21366 =>
            let* r1_21367 :=
              fork
                fun _21368 (_21369) -o
                  ((cmsort_worker_21354) (__sub__ __21355 1) m_21365 _21369)
            in
            let* r2_21370 :=
              fork
                fun _21371 (_21372) -o
                  ((cmsort_worker_21354) (__sub__ __21355 1) n_21366 _21372)
            in
            let* _21373 := recv[R,U] r1_21367 in
            (match _21373 with
            | ex1UL_39 m_21374 n_21375 =>
              (match m_21374 with
              | justUU_18 m_21376 =>
                let* _21377 := recv[R,U] r2_21370 in
                (match _21377 with
                | ex1UL_39 m_21378 n_21379 =>
                  (match m_21378 with
                  | justUU_18 m_21380 =>
                    let zs1_21381 :=
                      (justUU_18 ((mergeU_86) m_21376 m_21380))
                    in
                    let zs1_21382 :=
                      ((rwlUU_48) NULL NULL NULL NULL NULL zs1_21381)
                    in
                    let* c_21383 := ((send[R,U] __21357) zs1_21382) in
                    let* __21384 := close[false] n_21375 in
                    let* __21385 := close[false] n_21379 in
                    close[true] c_21383))))))))

#[program]
def cmsort_workerL_91 :=
  fun cmsort_worker_21386 (__21387) -> (zs_21388) -> (__21389) -o
    (match zs_21388 with
    | nilUL_25  =>
      let* c_21390 := ((send[R,L] __21389) (justLL_15 nilUL_25)) in
      close[true] c_21390
    | consUL_26 hd_21391 tl_21392 =>
      (match tl_21392 with
      | nilUL_25  =>
        let* c_21393 :=
          ((send[R,L] __21389) (justLL_15 (consUL_26 hd_21391 nilUL_25)))
        in close[true] c_21393
      | consUL_26 hd_21394 tl_21395 =>
        (match (__lte__ __21387 0) with
        | true_4  =>
          let* c_21396 :=
            ((send[R,L] __21389)
              (justLL_15
                ((msortL_87)
                  (consUL_26 hd_21391 (consUL_26 hd_21394 tl_21395)))))
          in close[true] c_21396
        | false_5  =>
          (match ((splitL_83)
                   (consUL_26 hd_21391 (consUL_26 hd_21394 tl_21395))) with
          | ex1LL_37 m_21397 n_21398 =>
            let* r1_21399 :=
              fork
                fun _21400 (_21401) -o
                  ((cmsort_worker_21386) (__sub__ __21387 1) m_21397 _21401)
            in
            let* r2_21402 :=
              fork
                fun _21403 (_21404) -o
                  ((cmsort_worker_21386) (__sub__ __21387 1) n_21398 _21404)
            in
            let* _21405 := recv[R,L] r1_21399 in
            (match _21405 with
            | ex1LL_37 m_21406 n_21407 =>
              (match m_21406 with
              | justLL_15 m_21408 =>
                let* _21409 := recv[R,L] r2_21402 in
                (match _21409 with
                | ex1LL_37 m_21410 n_21411 =>
                  (match m_21410 with
                  | justLL_15 m_21412 =>
                    let zs1_21413 :=
                      (justLL_15 ((mergeL_85) m_21408 m_21412))
                    in
                    let zs1_21414 :=
                      ((rwlLL_45) NULL NULL NULL NULL NULL zs1_21413)
                    in
                    let* c_21415 := ((send[R,L] __21389) zs1_21414) in
                    let* __21416 := close[false] n_21407 in
                    let* __21417 := close[false] n_21411 in
                    close[true] c_21415))))))))

#[program]
def cmsortU_94 :=
  fun cmsort_21418 (zs_21419) ->
    let* c_21420 :=
      fork fun _21421 (_21422) -o
             ((cmsort_workerU_92) 4 zs_21419 _21422)
    in
    let* _21423 := recv[R,U] c_21420 in
    (match _21423 with
    | ex1UL_39 m_21424 n_21425 =>
      let* __21426 := close[false] n_21425 in return m_21424)

#[program]
def cmsortL_93 :=
  fun cmsort_21427 (zs_21428) ->
    let* c_21429 :=
      fork fun _21430 (_21431) -o
             ((cmsort_workerL_91) 4 zs_21428 _21431)
    in
    let* _21432 := recv[R,L] c_21429 in
    (match _21432 with
    | ex1LL_37 m_21433 n_21434 =>
      let* __21435 := close[false] n_21434 in return m_21433)

#[program]
def mklistU_96 :=
  fun mklist_21436 (n_21437) ->
    (match (__lte__ n_21437 0) with
    | true_4  => nilUU_27
    | false_5  => (consUU_28 n_21437 ((mklist_21436) (__sub__ n_21437 1))))

#[program]
def mklistL_95 :=
  fun mklist_21438 (n_21439) ->
    (match (__lte__ n_21439 0) with
    | true_4  => nilUL_25
    | false_5  => (consUL_26 n_21439 ((mklist_21438) (__sub__ n_21439 1))))

#[program]
def list_lenU_98 :=
  fun list_len_21440 (__21441) ->
    (match __21441 with
    | nilUU_27  => 0
    | consUU_28 hd_21442 tl_21443 => (__add__ 1 ((list_len_21440) tl_21443)))

#[program]
def list_lenL_97 :=
  fun list_len_21444 (__21445) ->
    (match __21445 with
    | nilUL_25  => 0
    | consUL_26 hd_21446 tl_21447 => (__add__ 1 ((list_len_21444) tl_21447)))

#[program]
def print_listU_100 :=
  fun print_list_21448 (__21449) ->
    (match __21449 with
    | nilUU_27  => print "nil"
    | consUU_28 hd_21450 tl_21451 =>
      let* __21452 := print ((string_of_int_32) hd_21450) in
      let* __21453 := print " :: " in ((print_list_21448) tl_21451))

#[program]
def print_listL_99 :=
  fun print_list_21454 (__21455) ->
    (match __21455 with
    | nilUL_25  => print "nil"
    | consUL_26 hd_21456 tl_21457 =>
      let* __21458 := print ((string_of_int_32) hd_21456) in
      let* __21459 := print " :: " in ((print_list_21454) tl_21457))

#[program]
def main :=
  let test_21460 := ((mklistL_95) 2000000) in
  let* _21461 := ((cmsortL_93) test_21460) in
  (match _21461 with
  | justLL_15 m_21462 =>
    let len_21463 := ((list_lenL_97) m_21462) in
    print ((string_of_int_32) len_21463))

[trans12 success]

-----------------------------------------

#[program]
def idU_44 := fun id_21797 (A_21798) -> (m_21799) ->
                m_21799

#[program]
def idL_43 := fun id_21800 (A_21801) -> (m_21802) ->
                m_21802

#[logical]
inductive eqU_11 where
| reflU_14 of layout[]

#[logical]
inductive eqL_10 where
| reflL_13 of layout[]

#[program]
def rwlUU_48 :=
  fun rwl_21803 {A_21804} -> {m_21805} -> {n_21806} -> {B_21807} ->
  {__21808} -> (__21809) ->
    __21809

#[program]
def rwlUL_47 :=
  fun rwl_21810 {A_21811} -> {m_21812} -> {n_21813} -> {B_21814} ->
  {__21815} -> (__21816) ->
    __21816

#[program]
def rwlLU_46 :=
  fun rwl_21817 {A_21818} -> {m_21819} -> {n_21820} -> {B_21821} ->
  {__21822} -> (__21823) ->
    __21823

#[program]
def rwlLL_45 :=
  fun rwl_21824 {A_21825} -> {m_21826} -> {n_21827} -> {B_21828} ->
  {__21829} -> (__21830) ->
    __21830

#[program]
def rwrUU_52 :=
  fun rwr_21831 {A_21832} -> {m_21833} -> {n_21834} -> {B_21835} ->
  {__21836} -> (__21837) ->
    __21837

#[program]
def rwrUL_51 :=
  fun rwr_21838 {A_21839} -> {m_21840} -> {n_21841} -> {B_21842} ->
  {__21843} -> (__21844) ->
    __21844

#[program]
def rwrLU_50 :=
  fun rwr_21845 {A_21846} -> {m_21847} -> {n_21848} -> {B_21849} ->
  {__21850} -> (__21851) ->
    __21851

#[program]
def rwrLL_49 :=
  fun rwr_21852 {A_21853} -> {m_21854} -> {n_21855} -> {B_21856} ->
  {__21857} -> (__21858) ->
    __21858

#[logical]
def congrUUU_60 := NULL

#[logical]
def congrUUL_59 := NULL

#[logical]
def congrULU_58 := NULL

#[logical]
def congrULL_57 := NULL

#[logical]
def congrLUU_56 := NULL

#[logical]
def congrLUL_55 := NULL

#[logical]
def congrLLU_54 := NULL

#[logical]
def congrLLL_53 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_15 where
| justUU_18 of layout[R]

#[program]
inductive singUL_14 where
| justUL_17 of layout[R]

#[program]
inductive singLU_13 where


#[program]
inductive singLL_12 where
| justLL_15 of layout[R]

#[logical]
def ssingU_62 := NULL

#[logical]
def ssingL_61 := NULL

#[program]
def sing_elimUU_66 :=
  fun sing_elim_21859 {A_21860} -> {x_21861} -> (__21862) ->
    (match __21862 with
    | justUU_18 m_21863 => m_21863)

#[program]
def sing_elimUL_65 :=
  fun sing_elim_21864 {A_21865} -> {x_21866} -> (__21867) ->
    (match __21867 with
    | justUL_17 m_21868 => m_21868)

#[program]
def sing_elimLU_64 :=
  fun sing_elim_21869 {A_21870} -> {x_21871} -> (__21872) ->
    !!

#[program]
def sing_elimLL_63 :=
  fun sing_elim_21873 {A_21874} -> {x_21875} -> (__21876) ->
    (match __21876 with
    | justLL_15 m_21877 => m_21877)

#[logical]
def sing_uniqUU_70 := NULL

#[logical]
def sing_uniqUL_69 := NULL

#[logical]
def sing_uniqLU_68 := NULL

#[logical]
def sing_uniqLL_67 := NULL

#[program]
inductive baseU_17 where
| ttU_20 of layout[]

#[program]
inductive baseL_16 where
| ttL_19 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_21878 (__21879) ->
    (match __21879 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_21880 (__21881) -> (__21882) ->
    (match __21881 with
    | true_4  =>
      (match __21882 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_21883 (__21884) -> (__21885) ->
    (match __21884 with
    | true_4  => true_4
    | false_5  =>
      (match __21885 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_21886 (__21887) -> (__21888) ->
    (match __21887 with
    | true_4  =>
      (match __21888 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __21888 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_21889 (__21890) -> (__21891) ->
    (match __21890 with
    | zero_6  => true_4
    | succ_7 n_21892 =>
      (match __21891 with
      | zero_6  => false_5 | succ_7 n_21893 => ((lte_21889) n_21892 n_21893)))

#[program]
def lt_16 :=
  fun lt_21894 (x_21895) -> (y_21896) ->
    ((lte_15) (succ_7 x_21895) y_21896)

#[program]
def pred_17 :=
  fun pred_21897 (__21898) ->
    (match __21898 with
    | zero_6  => zero_6 | succ_7 n_21899 => n_21899)

#[program]
def add_18 :=
  fun add_21900 (__21901) -> (__21902) ->
    (match __21901 with
    | zero_6  => __21902
    | succ_7 n_21903 => (succ_7 ((add_21900) n_21903 __21902)))

#[program]
def sub_19 :=
  fun sub_21904 (__21905) -> (__21906) ->
    (match __21906 with
    | zero_6  => __21905
    | succ_7 n_21907 => ((sub_21904) ((pred_17) __21905) n_21907))

#[program]
def mul_20 :=
  fun mul_21908 (__21909) -> (__21910) ->
    (match __21909 with
    | zero_6  => zero_6
    | succ_7 n_21911 => ((add_18) __21910 ((mul_21908) n_21911 __21910)))

#[program]
def div_21 :=
  fun div_21912 (x_21913) -> (y_21914) ->
    (match ((lt_16) x_21913 y_21914) with
    | true_4  => zero_6
    | false_5  =>
      let loop_21915 :=
        fun loop_21916 (x_21917) -> (y_21918) ->
          (match ((sub_19) x_21917 ((pred_17) y_21918)) with
          | zero_6  => zero_6
          | succ_7 n_21919 => (succ_7 ((loop_21916) n_21919 y_21918)))
      in ((loop_21915) x_21913 y_21914))

#[program]
def rem_22 :=
  fun rem_21920 (x_21921) -> (y_21922) ->
    ((sub_19) x_21921 ((mul_20) ((div_21) x_21921 y_21922) y_21922))

#[program]
inductive listUU_21 where
| nilUU_27 of layout[]
| consUU_28 of layout[R, R]

#[program]
inductive listUL_20 where
| nilUL_25 of layout[]
| consUL_26 of layout[R, R]

#[program]
inductive listLU_19 where
| nilLU_23 of layout[]

#[program]
inductive listLL_18 where
| nilLL_21 of layout[]
| consLL_22 of layout[R, R]

#[program]
def free_listUU_74 :=
  fun free_list_21923 {A_21924} -> (f_21925) -> (__21926) ->
    (match __21926 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_21927 tl_21928 =>
      let __21929 := ((f_21925) hd_21927) in
      ((free_list_21923) NULL f_21925 tl_21928))

#[program]
def free_listUL_73 :=
  fun free_list_21930 {A_21931} -> (f_21932) -> (__21933) ->
    (match __21933 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_21934 tl_21935 =>
      let __21936 := ((f_21932) hd_21934) in
      ((free_list_21930) NULL f_21932 tl_21935))

#[program]
def free_listLL_71 :=
  fun free_list_21937 {A_21938} -> (f_21939) -> (__21940) ->
    (match __21940 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_21941 tl_21942 =>
      let __21943 := ((f_21939) hd_21941) in
      ((free_list_21937) NULL f_21939 tl_21942))

#[program]
inductive existsUU_25 where
| exUU_32 of layout[R, N]

#[program]
inductive existsUL_24 where
| exUL_31 of layout[R, N]

#[program]
inductive existsLU_23 where
| exLU_30 of layout[R, N]

#[program]
inductive existsLL_22 where
| exLL_29 of layout[R, N]

#[program]
inductive exists0UU_29 where
| ex0UU_36 of layout[N, R]

#[program]
inductive exists0UL_28 where
| ex0UL_35 of layout[N, R]

#[program]
inductive exists0LU_27 where
| ex0LU_34 of layout[N, R]

#[program]
inductive exists0LL_26 where
| ex0LL_33 of layout[N, R]

#[program]
inductive exists1UU_33 where
| ex1UU_40 of layout[R, R]

#[program]
inductive exists1UL_32 where
| ex1UL_39 of layout[R, R]

#[program]
inductive exists1LU_31 where
| ex1LU_38 of layout[R, R]

#[program]
inductive exists1LL_30 where
| ex1LL_37 of layout[R, R]

#[logical]
def prod0UU_78 := NULL

#[logical]
def prod0UL_77 := NULL

#[logical]
def prod0LU_76 := NULL

#[logical]
def prod0LL_75 := NULL

#[logical]
def prod1UU_82 := NULL

#[logical]
def prod1UL_81 := NULL

#[logical]
def prod1LU_80 := NULL

#[logical]
def prod1LL_79 := NULL

#[program]
def pow_26 :=
  fun pow_21944 (x_21945) -> (y_21946) ->
    let loop_21947 :=
      fun loop_21948 (acc_21949) -> (y_21950) ->
        (match (__lte__ y_21950 0) with
        | true_4  => acc_21949
        | false_5  =>
          ((loop_21948) (__mul__ x_21945 acc_21949) (__sub__ y_21950 1)))
    in ((loop_21947) 1 y_21946)

#[program]
def powm_27 :=
  fun powm_21951 (x_21952) -> (y_21953) -> (m_21954) ->
    let loop_21955 :=
      fun loop_21956 (acc_21957) -> (y_21958) ->
        (match (__lte__ y_21958 0) with
        | true_4  => acc_21957
        | false_5  =>
          ((loop_21956)
            (__mod__ (__mul__ x_21952 acc_21957) m_21954) (__sub__ y_21958 1)))
    in ((loop_21955) 1 y_21953)

#[program]
def ord_28 := fun ord_21959 (c_21960) ->
                (__ord__ c_21960)

#[program]
def chr_29 := fun chr_21961 (i_21962) ->
                (__chr__ i_21962)

#[program]
def str_30 := fun str_21963 (c_21964) ->
                (__push__ "" c_21964)

#[program]
def strlen_31 := fun strlen_21965 (s_21966) ->
                   (__size__ s_21966)

#[program]
def string_of_int_32 :=
  fun string_of_int_21967 (i_21968) ->
    let aux_21969 :=
      fun aux_21970 (i_21971) ->
        (match (__lte__ 10 i_21971) with
        | true_4  =>
          let r_21972 := (__mod__ i_21971 10) in
          let i_21973 := (__div__ i_21971 10) in
          (__push__ ((aux_21970) i_21973)
            ((chr_29) (__add__ r_21972 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_21971 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_21968) with
    | true_4  => ((aux_21969) i_21968)
    | false_5  => (__cat__ "~" ((aux_21969) (__neg__ i_21968))))

#[program]
def splitU_84 :=
  fun split_21974 (__21975) ->
    (match __21975 with
    | nilUU_27  => (ex1UU_40 nilUU_27 nilUU_27)
    | consUU_28 hd_21976 tl_21977 =>
      (match tl_21977 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_21976 nilUU_27) nilUU_27)
      | consUU_28 hd_21978 tl_21979 =>
        (match ((split_21974) tl_21979) with
        | ex1UU_40 m_21980 n_21981 =>
          (ex1UU_40
            (consUU_28 hd_21976 m_21980) (consUU_28 hd_21978 n_21981)))))

#[program]
def splitL_83 :=
  fun split_21982 (__21983) ->
    (match __21983 with
    | nilUL_25  => (ex1LL_37 nilUL_25 nilUL_25)
    | consUL_26 hd_21984 tl_21985 =>
      (match tl_21985 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_21984 nilUL_25) nilUL_25)
      | consUL_26 hd_21986 tl_21987 =>
        (match ((split_21982) tl_21987) with
        | ex1LL_37 m_21988 n_21989 =>
          (ex1LL_37
            (consUL_26 hd_21984 m_21988) (consUL_26 hd_21986 n_21989)))))

#[program]
def mergeU_86 :=
  fun merge_21990 (__21991) -> (__21992) -o
    (match __21991 with
    | nilUU_27  => __21992
    | consUU_28 hd_21993 tl_21994 =>
      (match __21992 with
      | nilUU_27  => (consUU_28 hd_21993 tl_21994)
      | consUU_28 hd_21995 tl_21996 =>
        (match (__lte__ hd_21993 hd_21995) with
        | true_4  =>
          (consUU_28
            hd_21993 ((merge_21990) tl_21994 (consUU_28 hd_21995 tl_21996)))
        | false_5  =>
          (consUU_28
            hd_21995 ((merge_21990) (consUU_28 hd_21993 tl_21994) tl_21996)))))

#[program]
def mergeL_85 :=
  fun merge_21997 (__21998) -> (__21999) -o
    (match __21998 with
    | nilUL_25  => __21999
    | consUL_26 hd_22000 tl_22001 =>
      (match __21999 with
      | nilUL_25  => (consUL_26 hd_22000 tl_22001)
      | consUL_26 hd_22002 tl_22003 =>
        (match (__lte__ hd_22000 hd_22002) with
        | true_4  =>
          (consUL_26
            hd_22000 ((merge_21997) tl_22001 (consUL_26 hd_22002 tl_22003)))
        | false_5  =>
          (consUL_26
            hd_22002 ((merge_21997) (consUL_26 hd_22000 tl_22001) tl_22003)))))

#[program]
def msortU_88 :=
  fun msort_22004 (__22005) ->
    (match __22005 with
    | nilUU_27  => nilUU_27
    | consUU_28 hd_22006 tl_22007 =>
      (match tl_22007 with
      | nilUU_27  => (consUU_28 hd_22006 nilUU_27)
      | consUU_28 hd_22008 tl_22009 =>
        (match ((splitU_84)
                 (consUU_28 hd_22006 (consUU_28 hd_22008 tl_22009))) with
        | ex1UU_40 m_22010 n_22011 =>
          ((mergeU_86) ((msort_22004) m_22010) ((msort_22004) n_22011)))))

#[program]
def msortL_87 :=
  fun msort_22012 (__22013) ->
    (match __22013 with
    | nilUL_25  => nilUL_25
    | consUL_26 hd_22014 tl_22015 =>
      (match tl_22015 with
      | nilUL_25  => (consUL_26 hd_22014 nilUL_25)
      | consUL_26 hd_22016 tl_22017 =>
        (match ((splitL_83)
                 (consUL_26 hd_22014 (consUL_26 hd_22016 tl_22017))) with
        | ex1LL_37 m_22018 n_22019 =>
          ((mergeL_85) ((msort_22012) m_22018) ((msort_22012) n_22019)))))

#[logical]
def cmsort_chU_90 := NULL

#[logical]
def cmsort_chL_89 := NULL

#[program]
def cmsort_workerU_92 :=
  fun cmsort_worker_22020 (__22021) -> (zs_22022) -> (__22023) -o
    (match zs_22022 with
    | nilUU_27  =>
      let* c_22024 := ((send[R,U] __22023) (justUU_18 nilUU_27)) in
      close[true] c_22024
    | consUU_28 hd_22025 tl_22026 =>
      (match tl_22026 with
      | nilUU_27  =>
        let* c_22027 :=
          ((send[R,U] __22023) (justUU_18 (consUU_28 hd_22025 nilUU_27)))
        in close[true] c_22027
      | consUU_28 hd_22028 tl_22029 =>
        (match (__lte__ __22021 0) with
        | true_4  =>
          let* c_22030 :=
            ((send[R,U] __22023)
              (justUU_18
                ((msortU_88)
                  (consUU_28 hd_22025 (consUU_28 hd_22028 tl_22029)))))
          in close[true] c_22030
        | false_5  =>
          (match ((splitU_84)
                   (consUU_28 hd_22025 (consUU_28 hd_22028 tl_22029))) with
          | ex1UU_40 m_22031 n_22032 =>
            let* r1_22033 :=
              fork
                fun _22034 (_22035) -o
                  ((cmsort_worker_22020) (__sub__ __22021 1) m_22031 _22035)
            in
            let* r2_22036 :=
              fork
                fun _22037 (_22038) -o
                  ((cmsort_worker_22020) (__sub__ __22021 1) n_22032 _22038)
            in
            let* _22039 := recv[R,U] r1_22033 in
            (match _22039 with
            | ex1UL_39 m_22040 n_22041 =>
              (match m_22040 with
              | justUU_18 m_22042 =>
                let* _22043 := recv[R,U] r2_22036 in
                (match _22043 with
                | ex1UL_39 m_22044 n_22045 =>
                  (match m_22044 with
                  | justUU_18 m_22046 =>
                    let zs1_22047 :=
                      (justUU_18 ((mergeU_86) m_22042 m_22046))
                    in
                    let zs1_22048 :=
                      ((rwlUU_48) NULL NULL NULL NULL NULL zs1_22047)
                    in
                    let* c_22049 := ((send[R,U] __22023) zs1_22048) in
                    let* __22050 := close[false] n_22041 in
                    let* __22051 := close[false] n_22045 in
                    close[true] c_22049))))))))

#[program]
def cmsort_workerL_91 :=
  fun cmsort_worker_22052 (__22053) -> (zs_22054) -> (__22055) -o
    (match zs_22054 with
    | nilUL_25  =>
      let* c_22056 := ((send[R,L] __22055) (justLL_15 nilUL_25)) in
      close[true] c_22056
    | consUL_26 hd_22057 tl_22058 =>
      (match tl_22058 with
      | nilUL_25  =>
        let* c_22059 :=
          ((send[R,L] __22055) (justLL_15 (consUL_26 hd_22057 nilUL_25)))
        in close[true] c_22059
      | consUL_26 hd_22060 tl_22061 =>
        (match (__lte__ __22053 0) with
        | true_4  =>
          let* c_22062 :=
            ((send[R,L] __22055)
              (justLL_15
                ((msortL_87)
                  (consUL_26 hd_22057 (consUL_26 hd_22060 tl_22061)))))
          in close[true] c_22062
        | false_5  =>
          (match ((splitL_83)
                   (consUL_26 hd_22057 (consUL_26 hd_22060 tl_22061))) with
          | ex1LL_37 m_22063 n_22064 =>
            let* r1_22065 :=
              fork
                fun _22066 (_22067) -o
                  ((cmsort_worker_22052) (__sub__ __22053 1) m_22063 _22067)
            in
            let* r2_22068 :=
              fork
                fun _22069 (_22070) -o
                  ((cmsort_worker_22052) (__sub__ __22053 1) n_22064 _22070)
            in
            let* _22071 := recv[R,L] r1_22065 in
            (match _22071 with
            | ex1LL_37 m_22072 n_22073 =>
              (match m_22072 with
              | justLL_15 m_22074 =>
                let* _22075 := recv[R,L] r2_22068 in
                (match _22075 with
                | ex1LL_37 m_22076 n_22077 =>
                  (match m_22076 with
                  | justLL_15 m_22078 =>
                    let zs1_22079 :=
                      (justLL_15 ((mergeL_85) m_22074 m_22078))
                    in
                    let zs1_22080 :=
                      ((rwlLL_45) NULL NULL NULL NULL NULL zs1_22079)
                    in
                    let* c_22081 := ((send[R,L] __22055) zs1_22080) in
                    let* __22082 := close[false] n_22073 in
                    let* __22083 := close[false] n_22077 in
                    close[true] c_22081))))))))

#[program]
def cmsortU_94 :=
  fun cmsort_22084 (zs_22085) ->
    let* c_22086 :=
      fork fun _22087 (_22088) -o
             ((cmsort_workerU_92) 4 zs_22085 _22088)
    in
    let* _22089 := recv[R,U] c_22086 in
    (match _22089 with
    | ex1UL_39 m_22090 n_22091 =>
      let* __22092 := close[false] n_22091 in return m_22090)

#[program]
def cmsortL_93 :=
  fun cmsort_22093 (zs_22094) ->
    let* c_22095 :=
      fork fun _22096 (_22097) -o
             ((cmsort_workerL_91) 4 zs_22094 _22097)
    in
    let* _22098 := recv[R,L] c_22095 in
    (match _22098 with
    | ex1LL_37 m_22099 n_22100 =>
      let* __22101 := close[false] n_22100 in return m_22099)

#[program]
def mklistU_96 :=
  fun mklist_22102 (n_22103) ->
    (match (__lte__ n_22103 0) with
    | true_4  => nilUU_27
    | false_5  => (consUU_28 n_22103 ((mklist_22102) (__sub__ n_22103 1))))

#[program]
def mklistL_95 :=
  fun mklist_22104 (n_22105) ->
    (match (__lte__ n_22105 0) with
    | true_4  => nilUL_25
    | false_5  => (consUL_26 n_22105 ((mklist_22104) (__sub__ n_22105 1))))

#[program]
def list_lenU_98 :=
  fun list_len_22106 (__22107) ->
    (match __22107 with
    | nilUU_27  => 0
    | consUU_28 hd_22108 tl_22109 => (__add__ 1 ((list_len_22106) tl_22109)))

#[program]
def list_lenL_97 :=
  fun list_len_22110 (__22111) ->
    (match __22111 with
    | nilUL_25  => 0
    | consUL_26 hd_22112 tl_22113 => (__add__ 1 ((list_len_22110) tl_22113)))

#[program]
def print_listU_100 :=
  fun print_list_22114 (__22115) ->
    (match __22115 with
    | nilUU_27  => print "nil"
    | consUU_28 hd_22116 tl_22117 =>
      let* __22118 := print ((string_of_int_32) hd_22116) in
      let* __22119 := print " :: " in ((print_list_22114) tl_22117))

#[program]
def print_listL_99 :=
  fun print_list_22120 (__22121) ->
    (match __22121 with
    | nilUL_25  => print "nil"
    | consUL_26 hd_22122 tl_22123 =>
      let* __22124 := print ((string_of_int_32) hd_22122) in
      let* __22125 := print " :: " in ((print_list_22120) tl_22123))

#[program]
def main :=
  let test_22126 := ((mklistL_95) 2000000) in
  let* _22127 := ((cmsortL_93) test_22126) in
  (match _22127 with
  | justLL_15 m_22128 =>
    let len_22129 := ((list_lenL_97) m_22128) in
    print ((string_of_int_32) len_22129))

[trans2e success]

-----------------------------------------

def idU_44 := fun id_22501 (A_22502) -> (m_22503) -> m_22503

def idL_43 := fun id_22504 (A_22505) -> (m_22506) -> m_22506

def rwlUU_48 :=
  fun rwl_22507 (A_22508) -> (m_22509) -> (n_22510) -> (B_22511) ->
  (__22512) -> (__22513) -> __22513

def rwlUL_47 :=
  fun rwl_22514 (A_22515) -> (m_22516) -> (n_22517) -> (B_22518) ->
  (__22519) -> (__22520) -> __22520

def rwlLU_46 :=
  fun rwl_22521 (A_22522) -> (m_22523) -> (n_22524) -> (B_22525) ->
  (__22526) -> (__22527) -> __22527

def rwlLL_45 :=
  fun rwl_22528 (A_22529) -> (m_22530) -> (n_22531) -> (B_22532) ->
  (__22533) -> (__22534) -> __22534

def rwrUU_52 :=
  fun rwr_22535 (A_22536) -> (m_22537) -> (n_22538) -> (B_22539) ->
  (__22540) -> (__22541) -> __22541

def rwrUL_51 :=
  fun rwr_22542 (A_22543) -> (m_22544) -> (n_22545) -> (B_22546) ->
  (__22547) -> (__22548) -> __22548

def rwrLU_50 :=
  fun rwr_22549 (A_22550) -> (m_22551) -> (n_22552) -> (B_22553) ->
  (__22554) -> (__22555) -> __22555

def rwrLL_49 :=
  fun rwr_22556 (A_22557) -> (m_22558) -> (n_22559) -> (B_22560) ->
  (__22561) -> (__22562) -> __22562

def sing_elimUU_66 :=
  fun sing_elim_22563 (A_22564) -> (x_22565) -> (__22566) -> __22566

def sing_elimUL_65 :=
  fun sing_elim_22567 (A_22568) -> (x_22569) -> (__22570) -> __22570

def sing_elimLU_64 :=
  fun sing_elim_22571 (A_22572) -> (x_22573) -> (__22574) -> !!

def sing_elimLL_63 :=
  fun sing_elim_22575 (A_22576) -> (x_22577) -> (__22578) -> __22578

def not_11 :=
  fun not_22579 (__22580) ->
    (match __22580 with
    | true_4 => false_5 | false_5 => true_4)

def and_12 :=
  fun and_22581 (__22582) -> (__22583) ->
    (match __22582 with
    | true_4 => (match __22583 with
                | true_4 => true_4 | false_5 => false_5)
    | false_5 => false_5)

def or_13 :=
  fun or_22584 (__22585) -> (__22586) ->
    (match __22585 with
    | true_4 => true_4
    | false_5 => (match __22586 with
                 | true_4 => true_4 | false_5 => false_5))

def xor_14 :=
  fun xor_22587 (__22588) -> (__22589) ->
    (match __22588 with
    | true_4 => (match __22589 with
                | true_4 => false_5 | false_5 => true_4)
    | false_5 => (match __22589 with
                 | true_4 => true_4 | false_5 => false_5))

def lte_15 :=
  fun lte_22590 (__22591) -> (__22592) ->
    (match __22591 with
    | zero_6  => true_4
    | succ_7 n_22593 =>
      (match __22592 with
      | zero_6  => false_5 | succ_7 n_22594 => ((lte_22590) n_22593 n_22594)))

def lt_16 :=
  fun lt_22595 (x_22596) -> (y_22597) -> ((lte_15) (succ_7 x_22596) y_22597)

def pred_17 :=
  fun pred_22598 (__22599) ->
    (match __22599 with
    | zero_6  => (zero_6 ) | succ_7 n_22600 => n_22600)

def add_18 :=
  fun add_22601 (__22602) -> (__22603) ->
    (match __22602 with
    | zero_6  => __22603
    | succ_7 n_22604 => (succ_7 ((add_22601) n_22604 __22603)))

def sub_19 :=
  fun sub_22605 (__22606) -> (__22607) ->
    (match __22607 with
    | zero_6  => __22606
    | succ_7 n_22608 => ((sub_22605) ((pred_17) __22606) n_22608))

def mul_20 :=
  fun mul_22609 (__22610) -> (__22611) ->
    (match __22610 with
    | zero_6  => (zero_6 )
    | succ_7 n_22612 => ((add_18) __22611 ((mul_22609) n_22612 __22611)))

def div_21 :=
  fun div_22613 (x_22614) -> (y_22615) ->
    (match ((lt_16) x_22614 y_22615) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_22616 :=
        fun loop_22617 (x_22618) -> (y_22619) ->
          (match ((sub_19) x_22618 ((pred_17) y_22619)) with
          | zero_6  => (zero_6 )
          | succ_7 n_22620 => (succ_7 ((loop_22617) n_22620 y_22619)))
      in ((loop_22616) x_22614 y_22615))

def rem_22 :=
  fun rem_22621 (x_22622) -> (y_22623) ->
    ((sub_19) x_22622 ((mul_20) ((div_21) x_22622 y_22623) y_22623))

def free_listUU_74 :=
  fun free_list_22624 (A_22625) -> (f_22626) -> (__22627) ->
    (match __22627 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_22628 tl_22629 =>
      let __22630 := ((f_22626) hd_22628) in
      ((free_list_22624) NULL f_22626 tl_22629))

def free_listUL_73 :=
  fun free_list_22631 (A_22632) -> (f_22633) -> (__22634) ->
    (match __22634 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_22635 tl_22636 =>
      let __22637 := ((f_22633) hd_22635) in
      ((free_list_22631) NULL f_22633 tl_22636))

def free_listLL_71 :=
  fun free_list_22638 (A_22639) -> (f_22640) -> (__22641) ->
    (match __22641 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_22642 tl_22643 =>
      let __22644 := ((f_22640) hd_22642) in
      ((free_list_22638) NULL f_22640 tl_22643))

def pow_26 :=
  fun pow_22645 (x_22646) -> (y_22647) ->
    let loop_22648 :=
      fun loop_22649 (acc_22650) -> (y_22651) ->
        (match (__lte__ y_22651 0) with
        | true_4 => acc_22650
        | false_5 =>
          ((loop_22649) (__mul__ x_22646 acc_22650) (__sub__ y_22651 1)))
    in ((loop_22648) 1 y_22647)

def powm_27 :=
  fun powm_22652 (x_22653) -> (y_22654) -> (m_22655) ->
    let loop_22656 :=
      fun loop_22657 (acc_22658) -> (y_22659) ->
        (match (__lte__ y_22659 0) with
        | true_4 => acc_22658
        | false_5 =>
          ((loop_22657)
            (__mod__ (__mul__ x_22653 acc_22658) m_22655) (__sub__ y_22659 1)))
    in ((loop_22656) 1 y_22654)

def ord_28 := fun ord_22660 (c_22661) -> (__ord__ c_22661)

def chr_29 := fun chr_22662 (i_22663) -> (__chr__ i_22663)

def str_30 := fun str_22664 (c_22665) -> (__push__ "" c_22665)

def strlen_31 := fun strlen_22666 (s_22667) -> (__size__ s_22667)

def string_of_int_32 :=
  fun string_of_int_22668 (i_22669) ->
    let aux_22670 :=
      fun aux_22671 (i_22672) ->
        (match (__lte__ 10 i_22672) with
        | true_4 =>
          let r_22673 := (__mod__ i_22672 10) in
          let i_22674 := (__div__ i_22672 10) in
          (__push__ ((aux_22671) i_22674)
            ((chr_29) (__add__ r_22673 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_22672 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_22669) with
    | true_4 => ((aux_22670) i_22669)
    | false_5 => (__cat__ "~" ((aux_22670) (__neg__ i_22669))))

def splitU_84 :=
  fun split_22675 (__22676) ->
    (match __22676 with
    | nilUU_27  => (ex1UU_40 (nilUU_27 ) (nilUU_27 ))
    | consUU_28 hd_22677 tl_22678 =>
      (match tl_22678 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_22677 (nilUU_27 )) (nilUU_27 ))
      | consUU_28 hd_22679 tl_22680 =>
        (match ((split_22675) tl_22680) with
        | ex1UU_40 m_22681 n_22682 =>
          (ex1UU_40
            (consUU_28 hd_22677 m_22681) (consUU_28 hd_22679 n_22682)))))

def splitL_83 :=
  fun split_22683 (__22684) ->
    (match __22684 with
    | nilUL_25  => (ex1LL_37 (nilUL_25 ) (nilUL_25 ))
    | consUL_26 hd_22685 tl_22686 =>
      (match tl_22686 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_22685 (nilUL_25 )) (nilUL_25 ))
      | consUL_26 hd_22687 tl_22688 =>
        (match ((split_22683) tl_22688) with
        | ex1LL_37 m_22689 n_22690 =>
          (ex1LL_37
            (consUL_26 hd_22685 m_22689) (consUL_26 hd_22687 n_22690)))))

def mergeU_86 :=
  fun merge_22691 (__22692) -> (__22693) -o
    (match __22692 with
    | nilUU_27  => __22693
    | consUU_28 hd_22694 tl_22695 =>
      (match __22693 with
      | nilUU_27  => (consUU_28 hd_22694 tl_22695)
      | consUU_28 hd_22696 tl_22697 =>
        (match (__lte__ hd_22694 hd_22696) with
        | true_4 =>
          (consUU_28
            hd_22694 ((merge_22691) tl_22695 (consUU_28 hd_22696 tl_22697)))
        | false_5 =>
          (consUU_28
            hd_22696 ((merge_22691) (consUU_28 hd_22694 tl_22695) tl_22697)))))

def mergeL_85 :=
  fun merge_22698 (__22699) -> (__22700) -o
    (match __22699 with
    | nilUL_25  => __22700
    | consUL_26 hd_22701 tl_22702 =>
      (match __22700 with
      | nilUL_25  => (consUL_26 hd_22701 tl_22702)
      | consUL_26 hd_22703 tl_22704 =>
        (match (__lte__ hd_22701 hd_22703) with
        | true_4 =>
          (consUL_26
            hd_22701 ((merge_22698) tl_22702 (consUL_26 hd_22703 tl_22704)))
        | false_5 =>
          (consUL_26
            hd_22703 ((merge_22698) (consUL_26 hd_22701 tl_22702) tl_22704)))))

def msortU_88 :=
  fun msort_22705 (__22706) ->
    (match __22706 with
    | nilUU_27  => (nilUU_27 )
    | consUU_28 hd_22707 tl_22708 =>
      (match tl_22708 with
      | nilUU_27  => (consUU_28 hd_22707 (nilUU_27 ))
      | consUU_28 hd_22709 tl_22710 =>
        (match ((splitU_84)
                 (consUU_28 hd_22707 (consUU_28 hd_22709 tl_22710))) with
        | ex1UU_40 m_22711 n_22712 =>
          ((mergeU_86) ((msort_22705) m_22711) ((msort_22705) n_22712)))))

def msortL_87 :=
  fun msort_22713 (__22714) ->
    (match __22714 with
    | nilUL_25  => (nilUL_25 )
    | consUL_26 hd_22715 tl_22716 =>
      (match tl_22716 with
      | nilUL_25  => (consUL_26 hd_22715 (nilUL_25 ))
      | consUL_26 hd_22717 tl_22718 =>
        (match ((splitL_83)
                 (consUL_26 hd_22715 (consUL_26 hd_22717 tl_22718))) with
        | ex1LL_37 m_22719 n_22720 =>
          ((mergeL_85) ((msort_22713) m_22719) ((msort_22713) n_22720)))))

def cmsort_workerU_92 :=
  fun cmsort_worker_22721 (__22722) -> (zs_22723) -> (__22724) -o
    (match zs_22723 with
    | nilUU_27  =>
      lazy(let c_22725 :=
             force(((lam (x_22726) -> lazy(send(__22724, x_22726)))
                     (nilUU_27 )))
           in force(lazy(close[true] c_22725)))
    | consUU_28 hd_22727 tl_22728 =>
      (match tl_22728 with
      | nilUU_27  =>
        lazy(let c_22729 :=
               force(((lam (x_22730) -> lazy(send(__22724, x_22730)))
                       (consUU_28 hd_22727 (nilUU_27 ))))
             in force(lazy(close[true] c_22729)))
      | consUU_28 hd_22731 tl_22732 =>
        (match (__lte__ __22722 0) with
        | true_4 =>
          lazy(let c_22733 :=
                 force(((lam (x_22734) -> lazy(send(__22724, x_22734)))
                         ((msortU_88)
                           (consUU_28 hd_22727 (consUU_28 hd_22731 tl_22732)))))
               in force(lazy(close[true] c_22733)))
        | false_5 =>
          (match ((splitU_84)
                   (consUU_28 hd_22727 (consUU_28 hd_22731 tl_22732))) with
          | ex1UU_40 m_22735 n_22736 =>
            lazy(let r1_22737 :=
                   force(lazy(fork
                                fun _22738 (_22739) -o
                                  ((cmsort_worker_22721)
                                    (__sub__ __22722 1) m_22735 _22739)))
                 in
                 let r2_22740 :=
                   force(lazy(fork
                                fun _22741 (_22742) -o
                                  ((cmsort_worker_22721)
                                    (__sub__ __22722 1) n_22736 _22742)))
                 in
                 let _22743 := force(lazy(recv[U](r1_22737))) in
                 force((match _22743 with
                       | ex1UL_39 m_22744 n_22745 =>
                         lazy(let _22746 := force(lazy(recv[U](r2_22740))) in
                              force((match _22746 with
                                    | ex1UL_39 m_22747 n_22748 =>
                                      let zs1_22749 :=
                                        ((mergeU_86) m_22744 m_22747)
                                      in
                                      let zs1_22750 :=
                                        ((rwlUU_48)
                                          NULL NULL NULL NULL NULL zs1_22749)
                                      in
                                      lazy(let c_22751 :=
                                             force(((lam (x_22752) ->
                                                       lazy(send(__22724, x_22752)))
                                                     zs1_22750))
                                           in
                                           let __22753 :=
                                             force(lazy(close[false] n_22745))
                                           in
                                           let __22754 :=
                                             force(lazy(close[false] n_22748))
                                           in
                                           force(lazy(close[true] c_22751)))))))))))))

def cmsort_workerL_91 :=
  fun cmsort_worker_22755 (__22756) -> (zs_22757) -> (__22758) -o
    (match zs_22757 with
    | nilUL_25  =>
      lazy(let c_22759 :=
             force(((lam (x_22760) -> lazy(send(__22758, x_22760)))
                     (nilUL_25 )))
           in force(lazy(close[true] c_22759)))
    | consUL_26 hd_22761 tl_22762 =>
      (match tl_22762 with
      | nilUL_25  =>
        lazy(let c_22763 :=
               force(((lam (x_22764) -> lazy(send(__22758, x_22764)))
                       (consUL_26 hd_22761 (nilUL_25 ))))
             in force(lazy(close[true] c_22763)))
      | consUL_26 hd_22765 tl_22766 =>
        (match (__lte__ __22756 0) with
        | true_4 =>
          lazy(let c_22767 :=
                 force(((lam (x_22768) -> lazy(send(__22758, x_22768)))
                         ((msortL_87)
                           (consUL_26 hd_22761 (consUL_26 hd_22765 tl_22766)))))
               in force(lazy(close[true] c_22767)))
        | false_5 =>
          (match ((splitL_83)
                   (consUL_26 hd_22761 (consUL_26 hd_22765 tl_22766))) with
          | ex1LL_37 m_22769 n_22770 =>
            lazy(let r1_22771 :=
                   force(lazy(fork
                                fun _22772 (_22773) -o
                                  ((cmsort_worker_22755)
                                    (__sub__ __22756 1) m_22769 _22773)))
                 in
                 let r2_22774 :=
                   force(lazy(fork
                                fun _22775 (_22776) -o
                                  ((cmsort_worker_22755)
                                    (__sub__ __22756 1) n_22770 _22776)))
                 in
                 let _22777 := force(lazy(recv[L](r1_22771))) in
                 force((match _22777 with
                       | ex1LL_37 m_22778 n_22779 =>
                         lazy(let _22780 := force(lazy(recv[L](r2_22774))) in
                              force((match _22780 with
                                    | ex1LL_37 m_22781 n_22782 =>
                                      let zs1_22783 :=
                                        ((mergeL_85) m_22778 m_22781)
                                      in
                                      let zs1_22784 :=
                                        ((rwlLL_45)
                                          NULL NULL NULL NULL NULL zs1_22783)
                                      in
                                      lazy(let c_22785 :=
                                             force(((lam (x_22786) ->
                                                       lazy(send(__22758, x_22786)))
                                                     zs1_22784))
                                           in
                                           let __22787 :=
                                             force(lazy(close[false] n_22779))
                                           in
                                           let __22788 :=
                                             force(lazy(close[false] n_22782))
                                           in
                                           force(lazy(close[true] c_22785)))))))))))))

def cmsortU_94 :=
  fun cmsort_22789 (zs_22790) ->
    lazy(let c_22791 :=
           force(lazy(fork
                        fun _22792 (_22793) -o
                          ((cmsort_workerU_92) 4 zs_22790 _22793)))
         in
         let _22794 := force(lazy(recv[U](c_22791))) in
         force((match _22794 with
               | ex1UL_39 m_22795 n_22796 =>
                 lazy(let __22797 := force(lazy(close[false] n_22796)) in
                      force(lazy(m_22795))))))

def cmsortL_93 :=
  fun cmsort_22798 (zs_22799) ->
    lazy(let c_22800 :=
           force(lazy(fork
                        fun _22801 (_22802) -o
                          ((cmsort_workerL_91) 4 zs_22799 _22802)))
         in
         let _22803 := force(lazy(recv[L](c_22800))) in
         force((match _22803 with
               | ex1LL_37 m_22804 n_22805 =>
                 lazy(let __22806 := force(lazy(close[false] n_22805)) in
                      force(lazy(m_22804))))))

def mklistU_96 :=
  fun mklist_22807 (n_22808) ->
    (match (__lte__ n_22808 0) with
    | true_4 => (nilUU_27 )
    | false_5 => (consUU_28 n_22808 ((mklist_22807) (__sub__ n_22808 1))))

def mklistL_95 :=
  fun mklist_22809 (n_22810) ->
    (match (__lte__ n_22810 0) with
    | true_4 => (nilUL_25 )
    | false_5 => (consUL_26 n_22810 ((mklist_22809) (__sub__ n_22810 1))))

def list_lenU_98 :=
  fun list_len_22811 (__22812) ->
    (match __22812 with
    | nilUU_27  => 0
    | consUU_28 hd_22813 tl_22814 => (__add__ 1 ((list_len_22811) tl_22814)))

def list_lenL_97 :=
  fun list_len_22815 (__22816) ->
    (match __22816 with
    | nilUL_25  => 0
    | consUL_26 hd_22817 tl_22818 => (__add__ 1 ((list_len_22815) tl_22818)))

def print_listU_100 :=
  fun print_list_22819 (__22820) ->
    (match __22820 with
    | nilUU_27  => lazy(print "nil")
    | consUU_28 hd_22821 tl_22822 =>
      lazy(let __22823 := force(lazy(print ((string_of_int_32) hd_22821))) in
           let __22824 := force(lazy(print " :: ")) in
           force(((print_list_22819) tl_22822))))

def print_listL_99 :=
  fun print_list_22825 (__22826) ->
    (match __22826 with
    | nilUL_25  => lazy(print "nil")
    | consUL_26 hd_22827 tl_22828 =>
      lazy(let __22829 := force(lazy(print ((string_of_int_32) hd_22827))) in
           let __22830 := force(lazy(print " :: ")) in
           force(((print_list_22825) tl_22828))))

def main :=
  let test_22831 := ((mklistL_95) 2000000) in
  lazy(let _22832 := force(((cmsortL_93) test_22831)) in
       force(let len_22833 := ((list_lenL_97) _22832) in
             lazy(print ((string_of_int_32) len_22833))))

[trans23 success]

-----------------------------------------

def idU_44 := lam (A_23258) -> (m_23259) -> m_23259

def idL_43 := lam (A_23260) -> (m_23261) -> m_23261

def rwlUU_48 :=
  lam (A_23262) -> (m_23263) -> (n_23264) -> (B_23265) -> (__23266) ->
  (__23267) -> __23267

def rwlUL_47 :=
  lam (A_23268) -> (m_23269) -> (n_23270) -> (B_23271) -> (__23272) ->
  (__23273) -> __23273

def rwlLU_46 :=
  lam (A_23274) -> (m_23275) -> (n_23276) -> (B_23277) -> (__23278) ->
  (__23279) -> __23279

def rwlLL_45 :=
  lam (A_23280) -> (m_23281) -> (n_23282) -> (B_23283) -> (__23284) ->
  (__23285) -> __23285

def rwrUU_52 :=
  lam (A_23286) -> (m_23287) -> (n_23288) -> (B_23289) -> (__23290) ->
  (__23291) -> __23291

def rwrUL_51 :=
  lam (A_23292) -> (m_23293) -> (n_23294) -> (B_23295) -> (__23296) ->
  (__23297) -> __23297

def rwrLU_50 :=
  lam (A_23298) -> (m_23299) -> (n_23300) -> (B_23301) -> (__23302) ->
  (__23303) -> __23303

def rwrLL_49 :=
  lam (A_23304) -> (m_23305) -> (n_23306) -> (B_23307) -> (__23308) ->
  (__23309) -> __23309

def sing_elimUU_66 := lam (A_23310) -> (x_23311) -> (__23312) -> __23312

def sing_elimUL_65 := lam (A_23313) -> (x_23314) -> (__23315) -> __23315

def sing_elimLU_64 := lam (A_23316) -> (x_23317) -> (__23318) -> !!

def sing_elimLL_63 := lam (A_23319) -> (x_23320) -> (__23321) -> __23321

def not_11 :=
  lam (__23322) ->
    (match __23322 with
    | true_4 => false_5 | false_5 => true_4)

def and_12 :=
  lam (__23323) -> (__23324) ->
    (match __23323 with
    | true_4 => (match __23324 with
                | true_4 => true_4 | false_5 => false_5)
    | false_5 => false_5)

def or_13 :=
  lam (__23325) -> (__23326) ->
    (match __23325 with
    | true_4 => true_4
    | false_5 => (match __23326 with
                 | true_4 => true_4 | false_5 => false_5))

def xor_14 :=
  lam (__23327) -> (__23328) ->
    (match __23327 with
    | true_4 => (match __23328 with
                | true_4 => false_5 | false_5 => true_4)
    | false_5 => (match __23328 with
                 | true_4 => true_4 | false_5 => false_5))

def lte_15 :=
  fun lte_23329 (__23330) -> (__23331) ->
    (match __23330 with
    | zero_6  => true_4
    | succ_7 n_23332 =>
      (match __23331 with
      | zero_6  => false_5 | succ_7 n_23333 => ((lte_23329) n_23332 n_23333)))

def lt_16 :=
  lam (x_23334) -> (y_23335) -> ((lte_15) (succ_7 x_23334) y_23335)

def pred_17 :=
  lam (__23336) ->
    (match __23336 with
    | zero_6  => (zero_6 ) | succ_7 n_23337 => n_23337)

def add_18 :=
  fun add_23338 (__23339) -> (__23340) ->
    (match __23339 with
    | zero_6  => __23340
    | succ_7 n_23341 => (succ_7 ((add_23338) n_23341 __23340)))

def sub_19 :=
  fun sub_23342 (__23343) -> (__23344) ->
    (match __23344 with
    | zero_6  => __23343
    | succ_7 n_23345 => ((sub_23342) ((pred_17) __23343) n_23345))

def mul_20 :=
  fun mul_23346 (__23347) -> (__23348) ->
    (match __23347 with
    | zero_6  => (zero_6 )
    | succ_7 n_23349 => ((add_18) __23348 ((mul_23346) n_23349 __23348)))

def div_21 :=
  lam (x_23350) -> (y_23351) ->
    (match ((lt_16) x_23350 y_23351) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_23352 :=
        fun loop_23353 (x_23354) -> (y_23355) ->
          (match ((sub_19) x_23354 ((pred_17) y_23355)) with
          | zero_6  => (zero_6 )
          | succ_7 n_23356 => (succ_7 ((loop_23353) n_23356 y_23355)))
      in ((loop_23352) x_23350 y_23351))

def rem_22 :=
  lam (x_23357) -> (y_23358) ->
    ((sub_19) x_23357 ((mul_20) ((div_21) x_23357 y_23358) y_23358))

def free_listUU_74 :=
  fun free_list_23359 (A_23360) -> (f_23361) -> (__23362) ->
    (match __23362 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_23363 tl_23364 =>
      let __23365 := ((f_23361) hd_23363) in
      ((free_list_23359) NULL f_23361 tl_23364))

def free_listUL_73 :=
  fun free_list_23366 (A_23367) -> (f_23368) -> (__23369) ->
    (match __23369 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_23370 tl_23371 =>
      let __23372 := ((f_23368) hd_23370) in
      ((free_list_23366) NULL f_23368 tl_23371))

def free_listLL_71 :=
  fun free_list_23373 (A_23374) -> (f_23375) -> (__23376) ->
    (match __23376 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_23377 tl_23378 =>
      let __23379 := ((f_23375) hd_23377) in
      ((free_list_23373) NULL f_23375 tl_23378))

def pow_26 :=
  lam (x_23380) -> (y_23381) ->
    let loop_23382 :=
      fun loop_23383 (acc_23384) -> (y_23385) ->
        (match (__lte__ y_23385 0) with
        | true_4 => acc_23384
        | false_5 =>
          ((loop_23383) (__mul__ x_23380 acc_23384) (__sub__ y_23385 1)))
    in ((loop_23382) 1 y_23381)

def powm_27 :=
  lam (x_23386) -> (y_23387) -> (m_23388) ->
    let loop_23389 :=
      fun loop_23390 (acc_23391) -> (y_23392) ->
        (match (__lte__ y_23392 0) with
        | true_4 => acc_23391
        | false_5 =>
          ((loop_23390)
            (__mod__ (__mul__ x_23386 acc_23391) m_23388) (__sub__ y_23392 1)))
    in ((loop_23389) 1 y_23387)

def ord_28 := lam (c_23393) -> (__ord__ c_23393)

def chr_29 := lam (i_23394) -> (__chr__ i_23394)

def str_30 := lam (c_23395) -> (__push__ "" c_23395)

def strlen_31 := lam (s_23396) -> (__size__ s_23396)

def string_of_int_32 :=
  lam (i_23397) ->
    let aux_23398 :=
      fun aux_23399 (i_23400) ->
        (match (__lte__ 10 i_23400) with
        | true_4 =>
          let r_23401 := (__mod__ i_23400 10) in
          let i_23402 := (__div__ i_23400 10) in
          (__push__ ((aux_23399) i_23402)
            ((chr_29) (__add__ r_23401 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_23400 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_23397) with
    | true_4 => ((aux_23398) i_23397)
    | false_5 => (__cat__ "~" ((aux_23398) (__neg__ i_23397))))

def splitU_84 :=
  fun split_23403 (__23404) ->
    (match __23404 with
    | nilUU_27  => (ex1UU_40 (nilUU_27 ) (nilUU_27 ))
    | consUU_28 hd_23405 tl_23406 =>
      (match tl_23406 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_23405 (nilUU_27 )) (nilUU_27 ))
      | consUU_28 hd_23407 tl_23408 =>
        (match ((split_23403) tl_23408) with
        | ex1UU_40 m_23409 n_23410 =>
          (ex1UU_40
            (consUU_28 hd_23405 m_23409) (consUU_28 hd_23407 n_23410)))))

def splitL_83 :=
  fun split_23411 (__23412) ->
    (match __23412 with
    | nilUL_25  => (ex1LL_37 (nilUL_25 ) (nilUL_25 ))
    | consUL_26 hd_23413 tl_23414 =>
      (match tl_23414 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_23413 (nilUL_25 )) (nilUL_25 ))
      | consUL_26 hd_23415 tl_23416 =>
        (match ((split_23411) tl_23416) with
        | ex1LL_37 m_23417 n_23418 =>
          (ex1LL_37
            (consUL_26 hd_23413 m_23417) (consUL_26 hd_23415 n_23418)))))

def mergeU_86 :=
  fun merge_23419 (__23420) -> (__23421) -o
    (match __23420 with
    | nilUU_27  => __23421
    | consUU_28 hd_23422 tl_23423 =>
      (match __23421 with
      | nilUU_27  => (consUU_28 hd_23422 tl_23423)
      | consUU_28 hd_23424 tl_23425 =>
        (match (__lte__ hd_23422 hd_23424) with
        | true_4 =>
          (consUU_28
            hd_23422 ((merge_23419) tl_23423 (consUU_28 hd_23424 tl_23425)))
        | false_5 =>
          (consUU_28
            hd_23424 ((merge_23419) (consUU_28 hd_23422 tl_23423) tl_23425)))))

def mergeL_85 :=
  fun merge_23426 (__23427) -> (__23428) -o
    (match __23427 with
    | nilUL_25  => __23428
    | consUL_26 hd_23429 tl_23430 =>
      (match __23428 with
      | nilUL_25  => (consUL_26 hd_23429 tl_23430)
      | consUL_26 hd_23431 tl_23432 =>
        (match (__lte__ hd_23429 hd_23431) with
        | true_4 =>
          (consUL_26
            hd_23429 ((merge_23426) tl_23430 (consUL_26 hd_23431 tl_23432)))
        | false_5 =>
          (consUL_26
            hd_23431 ((merge_23426) (consUL_26 hd_23429 tl_23430) tl_23432)))))

def msortU_88 :=
  fun msort_23433 (__23434) ->
    (match __23434 with
    | nilUU_27  => (nilUU_27 )
    | consUU_28 hd_23435 tl_23436 =>
      (match tl_23436 with
      | nilUU_27  => (consUU_28 hd_23435 (nilUU_27 ))
      | consUU_28 hd_23437 tl_23438 =>
        (match ((splitU_84)
                 (consUU_28 hd_23435 (consUU_28 hd_23437 tl_23438))) with
        | ex1UU_40 m_23439 n_23440 =>
          ((mergeU_86) ((msort_23433) m_23439) ((msort_23433) n_23440)))))

def msortL_87 :=
  fun msort_23441 (__23442) ->
    (match __23442 with
    | nilUL_25  => (nilUL_25 )
    | consUL_26 hd_23443 tl_23444 =>
      (match tl_23444 with
      | nilUL_25  => (consUL_26 hd_23443 (nilUL_25 ))
      | consUL_26 hd_23445 tl_23446 =>
        (match ((splitL_83)
                 (consUL_26 hd_23443 (consUL_26 hd_23445 tl_23446))) with
        | ex1LL_37 m_23447 n_23448 =>
          ((mergeL_85) ((msort_23441) m_23447) ((msort_23441) n_23448)))))

def cmsort_workerU_92 :=
  fun cmsort_worker_23449 (__23450) -> (zs_23451) -> (__23452) -o
    (match zs_23451 with
    | nilUU_27  =>
      lazy(let c_23453 := send(__23452, (nilUU_27 )) in close[true] c_23453)
    | consUU_28 hd_23454 tl_23455 =>
      (match tl_23455 with
      | nilUU_27  =>
        lazy(let c_23456 := send(__23452, (consUU_28 hd_23454 (nilUU_27 )))
             in close[true] c_23456)
      | consUU_28 hd_23457 tl_23458 =>
        (match (__lte__ __23450 0) with
        | true_4 =>
          lazy(let c_23459 :=
                 send(__23452, ((msortU_88)
                                 (consUU_28
                                   hd_23454 (consUU_28 hd_23457 tl_23458))))
               in close[true] c_23459)
        | false_5 =>
          (match ((splitU_84)
                   (consUU_28 hd_23454 (consUU_28 hd_23457 tl_23458))) with
          | ex1UU_40 m_23460 n_23461 =>
            lazy(let r1_23462 :=
                   fork
                     lam (_23463) -o
                       ((cmsort_worker_23449)
                         (__sub__ __23450 1) m_23460 _23463)
                 in
                 let r2_23464 :=
                   fork
                     lam (_23465) -o
                       ((cmsort_worker_23449)
                         (__sub__ __23450 1) n_23461 _23465)
                 in
                 let _23466 := recv[U](r1_23462) in
                 (match _23466 with
                 | ex1UL_39 m_23467 n_23468 =>
                   let _23469 := recv[U](r2_23464) in
                   (match _23469 with
                   | ex1UL_39 m_23470 n_23471 =>
                     let zs1_23472 := ((mergeU_86) m_23467 m_23470) in
                     let zs1_23473 :=
                       ((rwlUU_48) NULL NULL NULL NULL NULL zs1_23472)
                     in
                     let c_23474 := send(__23452, zs1_23473) in
                     let __23475 := close[false] n_23468 in
                     let __23476 := close[false] n_23471 in
                     close[true] c_23474)))))))

def cmsort_workerL_91 :=
  fun cmsort_worker_23477 (__23478) -> (zs_23479) -> (__23480) -o
    (match zs_23479 with
    | nilUL_25  =>
      lazy(let c_23481 := send(__23480, (nilUL_25 )) in close[true] c_23481)
    | consUL_26 hd_23482 tl_23483 =>
      (match tl_23483 with
      | nilUL_25  =>
        lazy(let c_23484 := send(__23480, (consUL_26 hd_23482 (nilUL_25 )))
             in close[true] c_23484)
      | consUL_26 hd_23485 tl_23486 =>
        (match (__lte__ __23478 0) with
        | true_4 =>
          lazy(let c_23487 :=
                 send(__23480, ((msortL_87)
                                 (consUL_26
                                   hd_23482 (consUL_26 hd_23485 tl_23486))))
               in close[true] c_23487)
        | false_5 =>
          (match ((splitL_83)
                   (consUL_26 hd_23482 (consUL_26 hd_23485 tl_23486))) with
          | ex1LL_37 m_23488 n_23489 =>
            lazy(let r1_23490 :=
                   fork
                     lam (_23491) -o
                       ((cmsort_worker_23477)
                         (__sub__ __23478 1) m_23488 _23491)
                 in
                 let r2_23492 :=
                   fork
                     lam (_23493) -o
                       ((cmsort_worker_23477)
                         (__sub__ __23478 1) n_23489 _23493)
                 in
                 let _23494 := recv[L](r1_23490) in
                 (match _23494 with
                 | ex1LL_37 m_23495 n_23496 =>
                   let _23497 := recv[L](r2_23492) in
                   (match _23497 with
                   | ex1LL_37 m_23498 n_23499 =>
                     let zs1_23500 := ((mergeL_85) m_23495 m_23498) in
                     let zs1_23501 :=
                       ((rwlLL_45) NULL NULL NULL NULL NULL zs1_23500)
                     in
                     let c_23502 := send(__23480, zs1_23501) in
                     let __23503 := close[false] n_23496 in
                     let __23504 := close[false] n_23499 in
                     close[true] c_23502)))))))

def cmsortU_94 :=
  lam (zs_23505) ->
    lazy(let c_23506 :=
           fork lam (_23507) -o ((cmsort_workerU_92) 4 zs_23505 _23507)
         in
         let _23508 := recv[U](c_23506) in
         (match _23508 with
         | ex1UL_39 m_23509 n_23510 =>
           let __23511 := close[false] n_23510 in m_23509))

def cmsortL_93 :=
  lam (zs_23512) ->
    lazy(let c_23513 :=
           fork lam (_23514) -o ((cmsort_workerL_91) 4 zs_23512 _23514)
         in
         let _23515 := recv[L](c_23513) in
         (match _23515 with
         | ex1LL_37 m_23516 n_23517 =>
           let __23518 := close[false] n_23517 in m_23516))

def mklistU_96 :=
  fun mklist_23519 (n_23520) ->
    (match (__lte__ n_23520 0) with
    | true_4 => (nilUU_27 )
    | false_5 => (consUU_28 n_23520 ((mklist_23519) (__sub__ n_23520 1))))

def mklistL_95 :=
  fun mklist_23521 (n_23522) ->
    (match (__lte__ n_23522 0) with
    | true_4 => (nilUL_25 )
    | false_5 => (consUL_26 n_23522 ((mklist_23521) (__sub__ n_23522 1))))

def list_lenU_98 :=
  fun list_len_23523 (__23524) ->
    (match __23524 with
    | nilUU_27  => 0
    | consUU_28 hd_23525 tl_23526 => (__add__ 1 ((list_len_23523) tl_23526)))

def list_lenL_97 :=
  fun list_len_23527 (__23528) ->
    (match __23528 with
    | nilUL_25  => 0
    | consUL_26 hd_23529 tl_23530 => (__add__ 1 ((list_len_23527) tl_23530)))

def print_listU_100 :=
  fun print_list_23531 (__23532) ->
    (match __23532 with
    | nilUU_27  => lazy(print "nil")
    | consUU_28 hd_23533 tl_23534 =>
      lazy(let __23535 := print ((string_of_int_32) hd_23533) in
           let __23536 := print " :: " in
           force(((print_list_23531) tl_23534))))

def print_listL_99 :=
  fun print_list_23537 (__23538) ->
    (match __23538 with
    | nilUL_25  => lazy(print "nil")
    | consUL_26 hd_23539 tl_23540 =>
      lazy(let __23541 := print ((string_of_int_32) hd_23539) in
           let __23542 := print " :: " in
           force(((print_list_23537) tl_23540))))

def main :=
  let test_23543 := ((mklistL_95) 2000000) in
  lazy(let _23544 := force(((cmsortL_93) test_23543)) in
       let len_23545 := ((list_lenL_97) _23544) in
       print ((string_of_int_32) len_23545))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_27() => {
      x_167 := ttU_20;
    }
    consUU_28(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_25() => {
      x_177 := ttU_20;
    }
    consUL_26(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_21() => {
      x_187 := ttU_20;
    }
    consLL_22(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_27() => {
      x_267 := mkconstr(nilUU_27, []);
      x_268 := mkconstr(nilUU_27, []);
      x_269 := mkconstr(ex1UU_40, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_28(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_27() => {
          x_273 := mkconstr(nilUU_27, []);
          x_274 := mkconstr(consUU_28, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_27, []);
          x_276 := mkconstr(ex1UU_40, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_28(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_40(m_281, n_282) => {
              x_283 := mkconstr(consUU_28, [hd_270, m_281]);
              x_284 := mkconstr(consUU_28, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_40, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_25() => {
      x_289 := mkconstr(nilUL_25, []);
      x_290 := mkconstr(nilUL_25, []);
      x_291 := mkconstr(ex1LL_37, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_26(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_25() => {
          x_295 := mkconstr(nilUL_25, []);
          x_296 := mkconstr(consUL_26, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_25, []);
          x_298 := mkconstr(ex1LL_37, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_26(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_37(m_303, n_304) => {
              x_305 := mkconstr(consUL_26, [hd_292, m_303]);
              x_306 := mkconstr(consUL_26, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_37, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_27() => {
      x_311 := __310;
    }
    consUU_28(hd_312, tl_313) => {
      match[U](__310){
        nilUU_27() => {
          x_315 := mkconstr(consUU_28, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_28(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_28, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_28, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_28, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_28, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_25() => {
      x_329 := __328;
    }
    consUL_26(hd_330, tl_331) => {
      match[L](__328){
        nilUL_25() => {
          x_333 := mkconstr(consUL_26, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_26(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_26, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_26, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_26, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_26, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_27() => {
      x_347 := mkconstr(nilUU_27, []);
      x_346 := x_347;
    }
    consUU_28(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_27() => {
          x_351 := mkconstr(nilUU_27, []);
          x_352 := mkconstr(consUU_28, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_28(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_28, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_28, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_40(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_25() => {
      x_367 := mkconstr(nilUL_25, []);
      x_366 := x_367;
    }
    consUL_26(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_25() => {
          x_371 := mkconstr(nilUL_25, []);
          x_372 := mkconstr(consUL_26, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_26(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_26, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_26, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_37(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_27() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_27, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_28(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_27() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_27, []);
              x_401 := mkconstr(consUU_28, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_28(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_28, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_28, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_28, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_28, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_40(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_39(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_39(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                            }
                          }
                          x_437 := x_442;
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_25() => {
      x_461 :=
        lazy {
          x_464 := mkconstr(nilUL_25, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_26(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_25() => {
          x_469 :=
            lazy {
              x_472 := mkconstr(nilUL_25, []);
              x_473 := mkconstr(consUL_26, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_26(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := mkconstr(consUL_26, [hd_475, tl_476]);
                  x_484 := mkconstr(consUL_26, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := mkconstr(consUL_26, [hd_475, tl_476]);
              x_489 := mkconstr(consUL_26, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_37(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_37(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_37(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                            }
                          }
                          x_509 := x_514;
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_39(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_37(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_27, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_28, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_25, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_26, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_27() => {
      x_578 := 0;
    }
    consUU_28(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_25() => {
      x_585 := 0;
    }
    consUL_26(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_27() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_28(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_25() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
    }
    consUL_26(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_27() => {
      x_167 := ttU_20;
    }
    consUU_28(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_25() => {
      x_177 := ttU_20;
      free(__176);
    }
    consUL_26(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_21() => {
      x_187 := ttU_20;
      free(__186);
    }
    consLL_22(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_27() => {
      x_267 := mkconstr(nilUU_27, []);
      x_268 := mkconstr(nilUU_27, []);
      x_269 := mkconstr(ex1UU_40, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_28(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_27() => {
          x_273 := mkconstr(nilUU_27, []);
          x_274 := mkconstr(consUU_28, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_27, []);
          x_276 := mkconstr(ex1UU_40, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_28(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_40(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_28, [hd_270, m_281]);
              x_284 := mkconstr(consUU_28, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_40, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_25() => {
      x_289 := reconstr(__287, nilUL_25, []);
      x_290 := mkconstr(nilUL_25, []);
      x_291 := mkconstr(ex1LL_37, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_26(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_25() => {
          x_295 := reconstr(tl_293, nilUL_25, []);
          x_296 := reconstr(__287, consUL_26, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_25, []);
          x_298 := mkconstr(ex1LL_37, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_26(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_37(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_26, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_26, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_37, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_27() => {
      x_311 := __310;
    }
    consUU_28(hd_312, tl_313) => {
      match[U](__310){
        nilUU_27() => {
          x_315 := mkconstr(consUU_28, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_28(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_28, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_28, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_28, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_28, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_25() => {
      x_329 := __328;
      free(__327);
    }
    consUL_26(hd_330, tl_331) => {
      match[L](__328){
        nilUL_25() => {
          x_333 := reconstr(__327, consUL_26, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_26(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_26, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_26, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_26, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_26, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_27() => {
      x_347 := mkconstr(nilUU_27, []);
      x_346 := x_347;
    }
    consUU_28(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_27() => {
          x_351 := mkconstr(nilUU_27, []);
          x_352 := mkconstr(consUU_28, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_28(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_28, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_28, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_40(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_25() => {
      x_367 := reconstr(__365, nilUL_25, []);
      x_366 := x_367;
    }
    consUL_26(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_25() => {
          x_371 := reconstr(tl_369, nilUL_25, []);
          x_372 := reconstr(__365, consUL_26, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_26(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_26, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_26, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_37(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_27() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_27, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_28(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_27() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_27, []);
              x_401 := mkconstr(consUU_28, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_28(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_28, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_28, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_28, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_28, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_40(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_39(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_39(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                              free(_440);
                            }
                          }
                          x_437 := x_442;
                          free(_435);
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                  free(x_415);
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_25() => {
      x_461 :=
        lazy {
          x_464 := reconstr(zs_458, nilUL_25, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_26(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_25() => {
          x_469 :=
            lazy {
              x_472 := reconstr(tl_467, nilUL_25, []);
              x_473 := reconstr(zs_458, consUL_26, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_26(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := reconstr(tl_467, consUL_26, [hd_475, tl_476]);
                  x_484 := reconstr(zs_458, consUL_26, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := reconstr(tl_467, consUL_26, [hd_475, tl_476]);
              x_489 := reconstr(zs_458, consUL_26, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_37(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_37(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_37(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                              free(_512);
                            }
                          }
                          x_509 := x_514;
                          free(_507);
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                  free(x_487);
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_39(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
          free(_537);
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_37(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
          free(_553);
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_27, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_28, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_25, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_26, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_27() => {
      x_578 := 0;
    }
    consUU_28(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_25() => {
      x_585 := 0;
      free(__584);
    }
    consUL_26(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
      free(__584);
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_27() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_28(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_25() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
      free(__608);
    }
    consUL_26(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
      free(__608);
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_634(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_635(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_636 := fn0_idU_634(A_2, m_3);
  return x_636;
}

fn fn0_idL_637(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_638(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_639 := fn0_idL_637(A_5, m_6);
  return x_639;
}

fn fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_641(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_642 := fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13);
  return x_642;
}

fn fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_644(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_645 := fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20);
  return x_645;
}

fn fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_647(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_648 := fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27);
  return x_648;
}

fn fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_650(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_651 := fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34);
  return x_651;
}

fn fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_653(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_654 := fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41);
  return x_654;
}

fn fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_656(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_657 := fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48);
  return x_657;
}

fn fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_659(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_660 := fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55);
  return x_660;
}

fn fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_662(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_663 := fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62);
  return x_663;
}

fn fn0_sing_elimUU_664(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_665(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_666 := fn0_sing_elimUU_664(A_64, x_65, __66);
  return x_666;
}

fn fn0_sing_elimUL_667(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_668(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_669 := fn0_sing_elimUL_667(A_68, x_69, __70);
  return x_669;
}

fn fn0_sing_elimLU_670(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_671(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_672 := fn0_sing_elimLU_670(A_72, x_73, __74);
  return x_672;
}

fn fn0_sing_elimLL_673(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_674(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_675 := fn0_sing_elimLL_673(A_76, x_77, __78);
  return x_675;
}

fn fn0_not_676(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_677(env) {
  __80 := env[1];
  x_678 := fn0_not_676(__80);
  return x_678;
}

fn fn0_and_679(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_680(env) {
  __83 := env[1];
  __84 := env[2];
  x_681 := fn0_and_679(__83, __84);
  return x_681;
}

fn fn0_or_682(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_683(env) {
  __88 := env[1];
  __89 := env[2];
  x_684 := fn0_or_682(__88, __89);
  return x_684;
}

fn fn0_xor_685(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_686(env) {
  __93 := env[1];
  __94 := env[2];
  x_687 := fn0_xor_685(__93, __94);
  return x_687;
}

fn fn0_lte_688(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_688(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_689(env) {
  __99 := env[1];
  __100 := env[2];
  x_690 := fn0_lte_688(__99, __100);
  return x_690;
}

fn fn0_lt_691(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_688(x_110, y_108);
  return x_109;
}

fn fn1_lt_692(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_693 := fn0_lt_691(x_107, y_108);
  return x_693;
}

fn fn0_pred_694(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_695(env) {
  __112 := env[1];
  x_696 := fn0_pred_694(__112);
  return x_696;
}

fn fn0_add_697(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_697(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_698(env) {
  __117 := env[1];
  __118 := env[2];
  x_699 := fn0_add_697(__117, __118);
  return x_699;
}

fn fn0_sub_700(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_694(__124);
      x_128 := fn0_sub_700(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_701(env) {
  __124 := env[1];
  __125 := env[2];
  x_702 := fn0_sub_700(__124, __125);
  return x_702;
}

fn fn0_mul_703(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_703(n_135, __132);
      x_136 := fn0_add_697(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_704(env) {
  __131 := env[1];
  __132 := env[2];
  x_705 := fn0_mul_703(__131, __132);
  return x_705;
}

fn fn0_div_706(x_139, y_140) {
  x_142 := fn0_lt_691(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_708, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_712, loop_144, x_139);
      appc(x_713, x_712, y_140);
      move1(x_156, x_713);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_707(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_715 := fn0_div_706(x_139, y_140);
  return x_715;
}

fn fn0_rem_716(x_158, y_159) {
  x_162 := fn0_div_706(x_158, y_159);
  x_161 := fn0_mul_703(x_162, y_159);
  x_160 := fn0_sub_700(x_158, x_161);
  return x_160;
}

fn fn1_rem_717(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_718 := fn0_rem_716(x_158, y_159);
  return x_718;
}

fn fn0_free_listUU_719(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_27 => {
      move1(x_167, ttU_20);
      break;
    }
    consUU_28 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_721, f_165, hd_168);
      move1(x_171, x_721);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_719(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_720(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_723 := fn0_free_listUU_719(A_164, f_165, __166);
  return x_723;
}

fn fn0_free_listUL_724(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_25 => {
      move1(x_177, ttU_20);
      free(__176);
      break;
    }
    consUL_26 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_726, f_175, hd_178);
      move1(x_181, x_726);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_724(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_725(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_728 := fn0_free_listUL_724(A_174, f_175, __176);
  return x_728;
}

fn fn0_free_listLL_729(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_21 => {
      move1(x_187, ttU_20);
      free(__186);
      break;
    }
    consLL_22 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_731, f_185, hd_188);
      move1(x_191, x_731);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_729(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_730(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_733 := fn0_free_listLL_729(A_184, f_185, __186);
  return x_733;
}

fn fn0_pow_734(x_194, y_195) {
  mkclo1(x_197, fn1_loop_736, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_740, loop_196, 1);
  appc(x_741, x_740, y_195);
  move1(x_206, x_741);
  return x_206;
}

fn fn1_pow_735(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_743 := fn0_pow_734(x_194, y_195);
  return x_743;
}

fn fn0_powm_744(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_746, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_750, loop_211, 1);
  appc(x_751, x_750, y_209);
  move1(x_222, x_751);
  return x_222;
}

fn fn1_powm_745(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_753 := fn0_powm_744(x_208, y_209, m_210);
  return x_753;
}

fn fn0_ord_754(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_755(env) {
  c_224 := env[1];
  x_756 := fn0_ord_754(c_224);
  return x_756;
}

fn fn0_chr_757(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_758(env) {
  i_227 := env[1];
  x_759 := fn0_chr_757(i_227);
  return x_759;
}

fn fn0_str_760(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_761(env) {
  c_230 := env[1];
  x_762 := fn0_str_760(c_230);
  return x_762;
}

fn fn0_strlen_763(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_764(env) {
  s_234 := env[1];
  x_765 := fn0_strlen_763(s_234);
  return x_765;
}

fn fn0_string_of_int_766(i_237) {
  mkclo1(x_239, fn1_aux_768, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_771, aux_238, i_237);
      move1(x_259, x_771);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_773, aux_238, x_263);
      move1(x_262, x_773);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_767(env) {
  i_237 := env[1];
  x_775 := fn0_string_of_int_766(i_237);
  return x_775;
}

fn fn0_splitU_776(__265) {
  switch(ctagof(__265)){
    nilUU_27 => {
      mkbox(x_267, nilUU_27, 0);
      mkbox(x_268, nilUU_27, 0);
      mkbox(x_269, ex1UU_40, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_28 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_27 => {
          mkbox(x_273, nilUU_27, 0);
          mkbox(x_274, consUU_28, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_27, 0);
          mkbox(x_276, ex1UU_40, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_28 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_776(tl_278);
          switch(ctagof(x_280)){
            ex1UU_40 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_28);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_28, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_40, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_777(env) {
  __265 := env[1];
  x_778 := fn0_splitU_776(__265);
  return x_778;
}

fn fn0_splitL_779(__287) {
  switch(ctagof(__287)){
    nilUL_25 => {
      rebox(x_289, __287, nilUL_25);
      mkbox(x_290, nilUL_25, 0);
      mkbox(x_291, ex1LL_37, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_26 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_25 => {
          rebox(x_295, tl_293, nilUL_25);
          rebox(x_296, __287, consUL_26);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_25, 0);
          mkbox(x_298, ex1LL_37, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_26 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_779(tl_300);
          switch(ctagof(x_302)){
            ex1LL_37 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_26);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_26);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_37);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_780(env) {
  __287 := env[1];
  x_781 := fn0_splitL_779(__287);
  return x_781;
}

fn fn0_mergeU_782(__309, __310) {
  switch(ctagof(__309)){
    nilUU_27 => {
      move1(x_311, __310);
      break;
    }
    consUU_28 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_27 => {
          mkbox(x_315, consUU_28, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_28 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_28, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_782(tl_313, x_321);
              mkbox(x_322, consUU_28, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_28, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_782(x_324, tl_317);
              mkbox(x_325, consUU_28, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_783(env) {
  __309 := env[1];
  __310 := env[2];
  x_784 := fn0_mergeU_782(__309, __310);
  return x_784;
}

fn fn0_mergeL_785(__327, __328) {
  switch(ctagof(__327)){
    nilUL_25 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_26 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_25 => {
          rebox(x_333, __327, consUL_26);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_26 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_26);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_785(tl_331, x_339);
              rebox(x_340, __327, consUL_26);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_26);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_785(x_342, tl_335);
              rebox(x_343, __327, consUL_26);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_786(env) {
  __327 := env[1];
  __328 := env[2];
  x_787 := fn0_mergeL_785(__327, __328);
  return x_787;
}

fn fn0_msortU_788(__345) {
  switch(ctagof(__345)){
    nilUU_27 => {
      mkbox(x_347, nilUU_27, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_28 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_27 => {
          mkbox(x_351, nilUU_27, 0);
          mkbox(x_352, consUU_28, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_28 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_28, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_28, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_776(x_358);
          switch(ctagof(x_356)){
            ex1UU_40 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_788(m_359);
              x_363 := fn0_msortU_788(n_360);
              x_361 := fn0_mergeU_782(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_789(env) {
  __345 := env[1];
  x_790 := fn0_msortU_788(__345);
  return x_790;
}

fn fn0_msortL_791(__365) {
  switch(ctagof(__365)){
    nilUL_25 => {
      rebox(x_367, __365, nilUL_25);
      move1(x_366, x_367);
      break;
    }
    consUL_26 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_25 => {
          rebox(x_371, tl_369, nilUL_25);
          rebox(x_372, __365, consUL_26);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_26 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_26);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_26);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_779(x_378);
          switch(ctagof(x_376)){
            ex1LL_37 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_791(m_379);
              x_383 := fn0_msortL_791(n_380);
              x_381 := fn0_mergeL_785(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_792(env) {
  __365 := env[1];
  x_793 := fn0_msortL_791(__365);
  return x_793;
}

fn fn0_cmsort_workerU_794(__385, zs_386, __387) {
  switch(ctagof(zs_386)){
    nilUU_27 => {
      lazy(x_389, lazy__796, 1);
      setlazy(x_389, __387, 0);
      move1(x_388, x_389);
      break;
    }
    consUU_28 => {
      getbox(hd_394, zs_386, 0);
      getbox(tl_395, zs_386, 1);
      switch(ctagof(tl_395)){
        nilUU_27 => {
          lazy(x_397, lazy__797, 2);
          setlazy(x_397, __387, 0);
          setlazy(x_397, hd_394, 1);
          move1(x_396, x_397);
          break;
        }
        consUU_28 => {
          getbox(hd_403, tl_395, 0);
          getbox(tl_404, tl_395, 1);
          lte(x_406, __385, 0);
          switch(x_406){
            true_4 => {
              lazy(x_407, lazy__798, 5);
              setlazy(x_407, msortU_344, 0);
              setlazy(x_407, __387, 1);
              setlazy(x_407, hd_394, 2);
              setlazy(x_407, hd_403, 3);
              setlazy(x_407, tl_404, 4);
              move1(x_405, x_407);
              break;
            }
            false_5 => {
              mkbox(x_416, consUU_28, 2);
              setbox(x_416, hd_403, 0);
              setbox(x_416, tl_404, 1);
              mkbox(x_417, consUU_28, 2);
              setbox(x_417, hd_394, 0);
              setbox(x_417, x_416, 1);
              x_415 := fn0_splitU_776(x_417);
              switch(ctagof(x_415)){
                ex1UU_40 => {
                  getbox(m_418, x_415, 0);
                  getbox(n_419, x_415, 1);
                  lazy(x_420, lazy__799, 7);
                  setlazy(x_420, rwlUU_7, 0);
                  setlazy(x_420, mergeU_308, 1);
                  setlazy(x_420, cmsort_workerU_384, 2);
                  setlazy(x_420, __385, 3);
                  setlazy(x_420, __387, 4);
                  setlazy(x_420, m_418, 5);
                  setlazy(x_420, n_419, 6);
                  move1(x_414, x_420);
                  free(x_415);
                  break;
                }
              }
              move1(x_405, x_414);
              break;
            }
          }
          move1(x_396, x_405);
          break;
        }
      }
      move1(x_388, x_396);
      break;
    }
  }
  return x_388;
}

fn fn1_cmsort_workerU_795(env) {
  __385 := env[1];
  zs_386 := env[2];
  __387 := env[3];
  x_802 := fn0_cmsort_workerU_794(__385, zs_386, __387);
  return x_802;
}

fn fn0_cmsort_workerL_803(__457, zs_458, __459) {
  switch(ctagof(zs_458)){
    nilUL_25 => {
      lazy(x_461, lazy__805, 2);
      setlazy(x_461, zs_458, 0);
      setlazy(x_461, __459, 1);
      move1(x_460, x_461);
      break;
    }
    consUL_26 => {
      getbox(hd_466, zs_458, 0);
      getbox(tl_467, zs_458, 1);
      switch(ctagof(tl_467)){
        nilUL_25 => {
          lazy(x_469, lazy__806, 4);
          setlazy(x_469, zs_458, 0);
          setlazy(x_469, __459, 1);
          setlazy(x_469, hd_466, 2);
          setlazy(x_469, tl_467, 3);
          move1(x_468, x_469);
          break;
        }
        consUL_26 => {
          getbox(hd_475, tl_467, 0);
          getbox(tl_476, tl_467, 1);
          lte(x_478, __457, 0);
          switch(x_478){
            true_4 => {
              lazy(x_479, lazy__807, 7);
              setlazy(x_479, msortL_364, 0);
              setlazy(x_479, zs_458, 1);
              setlazy(x_479, __459, 2);
              setlazy(x_479, hd_466, 3);
              setlazy(x_479, tl_467, 4);
              setlazy(x_479, hd_475, 5);
              setlazy(x_479, tl_476, 6);
              move1(x_477, x_479);
              break;
            }
            false_5 => {
              rebox(x_488, tl_467, consUL_26);
              setbox(x_488, hd_475, 0);
              setbox(x_488, tl_476, 1);
              rebox(x_489, zs_458, consUL_26);
              setbox(x_489, hd_466, 0);
              setbox(x_489, x_488, 1);
              x_487 := fn0_splitL_779(x_489);
              switch(ctagof(x_487)){
                ex1LL_37 => {
                  getbox(m_490, x_487, 0);
                  getbox(n_491, x_487, 1);
                  lazy(x_492, lazy__808, 7);
                  setlazy(x_492, rwlLL_28, 0);
                  setlazy(x_492, mergeL_326, 1);
                  setlazy(x_492, cmsort_workerL_456, 2);
                  setlazy(x_492, __457, 3);
                  setlazy(x_492, __459, 4);
                  setlazy(x_492, m_490, 5);
                  setlazy(x_492, n_491, 6);
                  move1(x_486, x_492);
                  free(x_487);
                  break;
                }
              }
              move1(x_477, x_486);
              break;
            }
          }
          move1(x_468, x_477);
          break;
        }
      }
      move1(x_460, x_468);
      break;
    }
  }
  return x_460;
}

fn fn1_cmsort_workerL_804(env) {
  __457 := env[1];
  zs_458 := env[2];
  __459 := env[3];
  x_811 := fn0_cmsort_workerL_803(__457, zs_458, __459);
  return x_811;
}

fn fn0_cmsortU_812(zs_529) {
  lazy(x_530, lazy__814, 2);
  setlazy(x_530, cmsort_workerU_384, 0);
  setlazy(x_530, zs_529, 1);
  return x_530;
}

fn fn1_cmsortU_813(env) {
  zs_529 := env[1];
  x_816 := fn0_cmsortU_812(zs_529);
  return x_816;
}

fn fn0_cmsortL_817(zs_545) {
  lazy(x_546, lazy__819, 2);
  setlazy(x_546, cmsort_workerL_456, 0);
  setlazy(x_546, zs_545, 1);
  return x_546;
}

fn fn1_cmsortL_818(env) {
  zs_545 := env[1];
  x_821 := fn0_cmsortL_817(zs_545);
  return x_821;
}

fn fn0_mklistU_822(n_561) {
  lte(x_563, n_561, 0);
  switch(x_563){
    true_4 => {
      mkbox(x_564, nilUU_27, 0);
      move1(x_562, x_564);
      break;
    }
    false_5 => {
      sub(x_566, n_561, 1);
      x_565 := fn0_mklistU_822(x_566);
      mkbox(x_567, consUU_28, 2);
      setbox(x_567, n_561, 0);
      setbox(x_567, x_565, 1);
      move1(x_562, x_567);
      break;
    }
  }
  return x_562;
}

fn fn1_mklistU_823(env) {
  n_561 := env[1];
  x_824 := fn0_mklistU_822(n_561);
  return x_824;
}

fn fn0_mklistL_825(n_569) {
  lte(x_571, n_569, 0);
  switch(x_571){
    true_4 => {
      mkbox(x_572, nilUL_25, 0);
      move1(x_570, x_572);
      break;
    }
    false_5 => {
      sub(x_574, n_569, 1);
      x_573 := fn0_mklistL_825(x_574);
      mkbox(x_575, consUL_26, 2);
      setbox(x_575, n_569, 0);
      setbox(x_575, x_573, 1);
      move1(x_570, x_575);
      break;
    }
  }
  return x_570;
}

fn fn1_mklistL_826(env) {
  n_569 := env[1];
  x_827 := fn0_mklistL_825(n_569);
  return x_827;
}

fn fn0_list_lenU_828(__577) {
  switch(ctagof(__577)){
    nilUU_27 => {
      move1(x_578, 0);
      break;
    }
    consUU_28 => {
      getbox(hd_579, __577, 0);
      getbox(tl_580, __577, 1);
      x_582 := fn0_list_lenU_828(tl_580);
      add(x_581, 1, x_582);
      move1(x_578, x_581);
      break;
    }
  }
  return x_578;
}

fn fn1_list_lenU_829(env) {
  __577 := env[1];
  x_830 := fn0_list_lenU_828(__577);
  return x_830;
}

fn fn0_list_lenL_831(__584) {
  switch(ctagof(__584)){
    nilUL_25 => {
      move1(x_585, 0);
      free(__584);
      break;
    }
    consUL_26 => {
      getbox(hd_586, __584, 0);
      getbox(tl_587, __584, 1);
      x_589 := fn0_list_lenL_831(tl_587);
      add(x_588, 1, x_589);
      move1(x_585, x_588);
      free(__584);
      break;
    }
  }
  return x_585;
}

fn fn1_list_lenL_832(env) {
  __584 := env[1];
  x_833 := fn0_list_lenL_831(__584);
  return x_833;
}

fn fn0_print_listU_834(__591) {
  switch(ctagof(__591)){
    nilUU_27 => {
      lazy(x_593, lazy__836, 0);
      move1(x_592, x_593);
      break;
    }
    consUU_28 => {
      getbox(hd_596, __591, 0);
      getbox(tl_597, __591, 1);
      lazy(x_598, lazy__837, 4);
      setlazy(x_598, string_of_int_236, 0);
      setlazy(x_598, print_listU_590, 1);
      setlazy(x_598, hd_596, 2);
      setlazy(x_598, tl_597, 3);
      move1(x_592, x_598);
      break;
    }
  }
  return x_592;
}

fn fn1_print_listU_835(env) {
  __591 := env[1];
  x_838 := fn0_print_listU_834(__591);
  return x_838;
}

fn fn0_print_listL_839(__608) {
  switch(ctagof(__608)){
    nilUL_25 => {
      lazy(x_610, lazy__841, 0);
      move1(x_609, x_610);
      free(__608);
      break;
    }
    consUL_26 => {
      getbox(hd_613, __608, 0);
      getbox(tl_614, __608, 1);
      lazy(x_615, lazy__842, 4);
      setlazy(x_615, string_of_int_236, 0);
      setlazy(x_615, print_listL_607, 1);
      setlazy(x_615, hd_613, 2);
      setlazy(x_615, tl_614, 3);
      move1(x_609, x_615);
      free(__608);
      break;
    }
  }
  return x_609;
}

fn fn1_print_listL_840(env) {
  __608 := env[1];
  x_843 := fn0_print_listL_839(__608);
  return x_843;
}

fn lazy__845(env) {
  string_of_int_236 := env[0];
  cmsortL_544 := env[1];
  list_lenL_583 := env[2];
  test_624 := env[3];
  x_629 := fn0_cmsortL_817(test_624);
  force(x_628, x_629);
  free(x_629);
  move1(_627, x_628);
  x_631 := fn0_list_lenL_831(_627);
  move1(len_630, x_631);
  x_633 := fn0_string_of_int_766(len_630);
  print(x_632, x_633);
  return x_632;
}

fn lazy__842(env) {
  string_of_int_236 := env[0];
  print_listL_607 := env[1];
  hd_613 := env[2];
  tl_614 := env[3];
  x_618 := fn0_string_of_int_766(hd_613);
  print(x_617, x_618);
  move1(__616, x_617);
  str(x_621, " :: ")
  print(x_620, x_621);
  move1(__619, x_620);
  x_623 := fn0_print_listL_839(tl_614);
  force(x_622, x_623);
  free(x_623);
  return x_622;
}

fn lazy__841(env) {
  str(x_612, "nil")
  print(x_611, x_612);
  return x_611;
}

fn lazy__837(env) {
  string_of_int_236 := env[0];
  print_listU_590 := env[1];
  hd_596 := env[2];
  tl_597 := env[3];
  x_601 := fn0_string_of_int_766(hd_596);
  print(x_600, x_601);
  move1(__599, x_600);
  str(x_604, " :: ")
  print(x_603, x_604);
  move1(__602, x_603);
  x_606 := fn0_print_listU_834(tl_597);
  force(x_605, x_606);
  free(x_606);
  return x_605;
}

fn lazy__836(env) {
  str(x_595, "nil")
  print(x_594, x_595);
  return x_594;
}

fn lazy__819(env) {
  cmsort_workerL_456 := env[0];
  zs_545 := env[1];
  mkclo1(x_549, fn1_lam_820, fvc:=2, argc:=1);
  setclo(x_549, cmsort_workerL_456, 1);
  setclo(x_549, zs_545, 2);
  fork(x_548, x_549);
  move1(c_547, x_548);
  recv1(x_554, c_547);
  move1(_553, x_554);
  switch(ctagof(_553)){
    ex1LL_37 => {
      getbox(m_556, _553, 0);
      getbox(n_557, _553, 1);
      close1(x_559, n_557);
      move1(__558, x_559);
      move1(x_555, m_556);
      free(_553);
      break;
    }
  }
  return x_555;
}

fn fn1_lam_820(env) {
  lam_550 := env[0];
  cmsort_workerL_456 := env[1];
  zs_545 := env[2];
  _551 := env[3];
  x_552 := fn0_cmsort_workerL_803(4, zs_545, _551);
  return x_552;
}

fn lazy__814(env) {
  cmsort_workerU_384 := env[0];
  zs_529 := env[1];
  mkclo1(x_533, fn1_lam_815, fvc:=2, argc:=1);
  setclo(x_533, cmsort_workerU_384, 1);
  setclo(x_533, zs_529, 2);
  fork(x_532, x_533);
  move1(c_531, x_532);
  recv0(x_538, c_531);
  move1(_537, x_538);
  switch(ctagof(_537)){
    ex1UL_39 => {
      getbox(m_540, _537, 0);
      getbox(n_541, _537, 1);
      close1(x_543, n_541);
      move1(__542, x_543);
      move1(x_539, m_540);
      free(_537);
      break;
    }
  }
  return x_539;
}

fn fn1_lam_815(env) {
  lam_534 := env[0];
  cmsort_workerU_384 := env[1];
  zs_529 := env[2];
  _535 := env[3];
  x_536 := fn0_cmsort_workerU_794(4, zs_529, _535);
  return x_536;
}

fn lazy__808(env) {
  rwlLL_28 := env[0];
  mergeL_326 := env[1];
  cmsort_workerL_456 := env[2];
  __457 := env[3];
  __459 := env[4];
  m_490 := env[5];
  n_491 := env[6];
  mkclo1(x_495, fn1_lam_809, fvc:=3, argc:=1);
  setclo(x_495, cmsort_workerL_456, 1);
  setclo(x_495, __457, 2);
  setclo(x_495, m_490, 3);
  fork(x_494, x_495);
  move1(r1_493, x_494);
  mkclo1(x_502, fn1_lam_810, fvc:=3, argc:=1);
  setclo(x_502, cmsort_workerL_456, 1);
  setclo(x_502, __457, 2);
  setclo(x_502, n_491, 3);
  fork(x_501, x_502);
  move1(r2_500, x_501);
  recv1(x_508, r1_493);
  move1(_507, x_508);
  switch(ctagof(_507)){
    ex1LL_37 => {
      getbox(m_510, _507, 0);
      getbox(n_511, _507, 1);
      recv1(x_513, r2_500);
      move1(_512, x_513);
      switch(ctagof(_512)){
        ex1LL_37 => {
          getbox(m_515, _512, 0);
          getbox(n_516, _512, 1);
          x_518 := fn0_mergeL_785(m_510, m_515);
          move1(zs1_517, x_518);
          x_520 := fn0_rwlLL_649(NULL, NULL, NULL, NULL, NULL, zs1_517);
          move1(zs1_519, x_520);
          send(x_522, __459, zs1_519);
          move1(c_521, x_522);
          close1(x_524, n_511);
          move1(__523, x_524);
          close1(x_526, n_516);
          move1(__525, x_526);
          close0(x_527, c_521);
          move1(x_514, x_527);
          free(_512);
          break;
        }
      }
      move1(x_509, x_514);
      free(_507);
      break;
    }
  }
  return x_509;
}

fn fn1_lam_809(env) {
  lam_496 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  m_490 := env[3];
  _497 := env[4];
  sub(x_499, __457, 1);
  x_498 := fn0_cmsort_workerL_803(x_499, m_490, _497);
  return x_498;
}

fn fn1_lam_810(env) {
  lam_503 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  n_491 := env[3];
  _504 := env[4];
  sub(x_506, __457, 1);
  x_505 := fn0_cmsort_workerL_803(x_506, n_491, _504);
  return x_505;
}

fn lazy__807(env) {
  msortL_364 := env[0];
  zs_458 := env[1];
  __459 := env[2];
  hd_466 := env[3];
  tl_467 := env[4];
  hd_475 := env[5];
  tl_476 := env[6];
  rebox(x_483, tl_467, consUL_26);
  setbox(x_483, hd_475, 0);
  setbox(x_483, tl_476, 1);
  rebox(x_484, zs_458, consUL_26);
  setbox(x_484, hd_466, 0);
  setbox(x_484, x_483, 1);
  x_482 := fn0_msortL_791(x_484);
  send(x_481, __459, x_482);
  move1(c_480, x_481);
  close0(x_485, c_480);
  return x_485;
}

fn lazy__806(env) {
  zs_458 := env[0];
  __459 := env[1];
  hd_466 := env[2];
  tl_467 := env[3];
  rebox(x_472, tl_467, nilUL_25);
  rebox(x_473, zs_458, consUL_26);
  setbox(x_473, hd_466, 0);
  setbox(x_473, x_472, 1);
  send(x_471, __459, x_473);
  move1(c_470, x_471);
  close0(x_474, c_470);
  return x_474;
}

fn lazy__805(env) {
  zs_458 := env[0];
  __459 := env[1];
  rebox(x_464, zs_458, nilUL_25);
  send(x_463, __459, x_464);
  move1(c_462, x_463);
  close0(x_465, c_462);
  return x_465;
}

fn lazy__799(env) {
  rwlUU_7 := env[0];
  mergeU_308 := env[1];
  cmsort_workerU_384 := env[2];
  __385 := env[3];
  __387 := env[4];
  m_418 := env[5];
  n_419 := env[6];
  mkclo1(x_423, fn1_lam_800, fvc:=3, argc:=1);
  setclo(x_423, cmsort_workerU_384, 1);
  setclo(x_423, __385, 2);
  setclo(x_423, m_418, 3);
  fork(x_422, x_423);
  move1(r1_421, x_422);
  mkclo1(x_430, fn1_lam_801, fvc:=3, argc:=1);
  setclo(x_430, cmsort_workerU_384, 1);
  setclo(x_430, __385, 2);
  setclo(x_430, n_419, 3);
  fork(x_429, x_430);
  move1(r2_428, x_429);
  recv0(x_436, r1_421);
  move1(_435, x_436);
  switch(ctagof(_435)){
    ex1UL_39 => {
      getbox(m_438, _435, 0);
      getbox(n_439, _435, 1);
      recv0(x_441, r2_428);
      move1(_440, x_441);
      switch(ctagof(_440)){
        ex1UL_39 => {
          getbox(m_443, _440, 0);
          getbox(n_444, _440, 1);
          x_446 := fn0_mergeU_782(m_438, m_443);
          move1(zs1_445, x_446);
          x_448 := fn0_rwlUU_640(NULL, NULL, NULL, NULL, NULL, zs1_445);
          move1(zs1_447, x_448);
          send(x_450, __387, zs1_447);
          move1(c_449, x_450);
          close1(x_452, n_439);
          move1(__451, x_452);
          close1(x_454, n_444);
          move1(__453, x_454);
          close0(x_455, c_449);
          move1(x_442, x_455);
          free(_440);
          break;
        }
      }
      move1(x_437, x_442);
      free(_435);
      break;
    }
  }
  return x_437;
}

fn fn1_lam_800(env) {
  lam_424 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  m_418 := env[3];
  _425 := env[4];
  sub(x_427, __385, 1);
  x_426 := fn0_cmsort_workerU_794(x_427, m_418, _425);
  return x_426;
}

fn fn1_lam_801(env) {
  lam_431 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  n_419 := env[3];
  _432 := env[4];
  sub(x_434, __385, 1);
  x_433 := fn0_cmsort_workerU_794(x_434, n_419, _432);
  return x_433;
}

fn lazy__798(env) {
  msortU_344 := env[0];
  __387 := env[1];
  hd_394 := env[2];
  hd_403 := env[3];
  tl_404 := env[4];
  mkbox(x_411, consUU_28, 2);
  setbox(x_411, hd_403, 0);
  setbox(x_411, tl_404, 1);
  mkbox(x_412, consUU_28, 2);
  setbox(x_412, hd_394, 0);
  setbox(x_412, x_411, 1);
  x_410 := fn0_msortU_788(x_412);
  send(x_409, __387, x_410);
  move1(c_408, x_409);
  close0(x_413, c_408);
  return x_413;
}

fn lazy__797(env) {
  __387 := env[0];
  hd_394 := env[1];
  mkbox(x_400, nilUU_27, 0);
  mkbox(x_401, consUU_28, 2);
  setbox(x_401, hd_394, 0);
  setbox(x_401, x_400, 1);
  send(x_399, __387, x_401);
  move1(c_398, x_399);
  close0(x_402, c_398);
  return x_402;
}

fn lazy__796(env) {
  __387 := env[0];
  mkbox(x_392, nilUU_27, 0);
  send(x_391, __387, x_392);
  move1(c_390, x_391);
  close0(x_393, c_390);
  return x_393;
}

fn fn1_aux_768(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_769, aux_240, i_246);
      move1(x_249, x_769);
      x_252 := fn0_ord_754(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_757(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_754(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_757(x_255);
      x_253 := fn0_str_760(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_746(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_747, loop_213, x_219);
      appc(x_748, x_747, x_221);
      move1(x_218, x_748);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_736(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_737, loop_198, x_204);
      appc(x_738, x_737, x_205);
      move1(x_203, x_738);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_708(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_694(y_148);
  x_150 := fn0_sub_700(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_709, loop_146, n_153);
      appc(x_710, x_709, y_148);
      move1(x_154, x_710);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_635, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_638, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_641, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_644, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_647, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_650, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_653, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_656, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_659, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_662, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_665, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_668, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_671, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_674, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_677, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_680, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_683, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_686, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_689, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_692, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_695, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_698, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_701, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_704, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_707, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_717, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_720, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_725, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_730, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_735, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_745, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_755, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_758, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_761, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_764, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_767, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_777, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_780, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_783, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_786, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_789, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_792, fvc:=0, argc:=1);
  mkclo0(cmsort_workerU_384, fn1_cmsort_workerU_795, fvc:=0, argc:=3);
  mkclo0(cmsort_workerL_456, fn1_cmsort_workerL_804, fvc:=0, argc:=3);
  mkclo0(cmsortU_528, fn1_cmsortU_813, fvc:=0, argc:=1);
  mkclo0(cmsortL_544, fn1_cmsortL_818, fvc:=0, argc:=1);
  mkclo0(mklistU_560, fn1_mklistU_823, fvc:=0, argc:=1);
  mkclo0(mklistL_568, fn1_mklistL_826, fvc:=0, argc:=1);
  mkclo0(list_lenU_576, fn1_list_lenU_829, fvc:=0, argc:=1);
  mkclo0(list_lenL_583, fn1_list_lenL_832, fvc:=0, argc:=1);
  mkclo0(print_listU_590, fn1_print_listU_835, fvc:=0, argc:=1);
  mkclo0(print_listL_607, fn1_print_listL_840, fvc:=0, argc:=1);
  x_625 := fn0_mklistL_825(2000000);
  move1(test_624, x_625);
  lazy(x_626, lazy__845, 4);
  setlazy(x_626, string_of_int_236, 0);
  setlazy(x_626, cmsortL_544, 1);
  setlazy(x_626, list_lenL_583, 2);
  setlazy(x_626, test_624, 3);
  force(x_844, x_626);
  return x_844;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

