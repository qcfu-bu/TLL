[Definition {name = "gcd"; relv = R;
   body =
   (Binder ([],
      ((Fun (
          (Pi (R, U, Int_t,
             (Binder ("a", (Pi (R, U, Int_t, (Binder ("b", Int_t)))))))),
          (Binder ((Some "gcd"),
             [([(PId "a"); (PId "b")],
               (Some (Match (
                        [(R, (BOpr ("<=", (Id ("b", I)), (Int 0))), None)],
                        None,
                        [([(PId "true")], (Some (Id ("a", I))));
                          ([(PId "false")],
                           (Some (App
                                    [(Id ("gcd", I)); (Id ("b", I));
                                      (BOpr ("%", (Id ("a", I)),
                                         (Id ("b", I))))
                                      ])))
                          ]
                        ))))
               ]
             )),
          [E; E])),
       (Pi (R, U, Int_t,
          (Binder ("a", (Pi (R, U, Int_t, (Binder ("b", Int_t)))))))))
      ));
   view = [E; E]};
  Definition {name = "lcm"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("a", (Pi (R, U, Int_t, (Binder ("b", Int_t)))))))),
           (Binder ((Some "lcm"),
              [([(PId "a"); (PId "b")],
                (Some (BOpr ("/", (BOpr ("*", (Id ("a", I)), (Id ("b", I)))),
                         (App [(Id ("gcd", I)); (Id ("a", I)); (Id ("b", I))])
                         ))))
                ]
              )),
           [E; E])),
        (Pi (R, U, Int_t,
           (Binder ("a", (Pi (R, U, Int_t, (Binder ("b", Int_t)))))))))
       ));
    view = [E; E]};
  Definition {name = "coprime"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("a", (Pi (R, U, Int_t, (Binder ("b", (Type U))))))))),
           (Binder ((Some "coprime"),
              [([(PId "a"); (PId "b")],
                (Some (BOpr ("=",
                         (App [(Id ("gcd", I)); (Id ("a", I)); (Id ("b", I))]),
                         (Int 1)))))
                ]
              )),
           [E; E])),
        (Pi (R, U, Int_t,
           (Binder ("a", (Pi (R, U, Int_t, (Binder ("b", (Type U))))))))))
       ));
    view = [E; E]};
  Definition {name = "RSA"; relv = N;
    body =
    (Binder ([],
       ((Act (N, true, Int_t,
           (Binder ("x",
              (Act (N, true, Int_t,
                 (Binder ("y",
                    (Act (R, true, Int_t,
                       (Binder ("n",
                          (Act (N, true,
                             (BOpr ("=", (Id ("n", I)),
                                (BOpr ("*", (Id ("x", I)), (Id ("y", I)))))),
                             (Binder ("_",
                                (Act (N, true, Int_t,
                                   (Binder ("tot",
                                      (Act (N, true,
                                         (BOpr ("=", (Id ("tot", I)),
                                            (App
                                               [(Id ("lcm", I));
                                                 (BOpr ("-", (Id ("x", I)),
                                                    (Int 1)));
                                                 (BOpr ("-", (Id ("y", I)),
                                                    (Int 1)))
                                                 ])
                                            )),
                                         (Binder ("_",
                                            (Act (R, true, Int_t,
                                               (Binder ("e",
                                                  (Act (N, true,
                                                     (App
                                                        [(Id ("coprime", I));
                                                          (Id ("e", I));
                                                          (Id ("tot", I))]),
                                                     (Binder ("_",
                                                        (Act (N, true,
                                                           (BOpr ("=",
                                                              (BOpr ("<",
                                                                 (Int 1),
                                                                 (Id ("e", I
                                                                    ))
                                                                 )),
                                                              (Id ("true", I
                                                                 ))
                                                              )),
                                                           (Binder ("_",
                                                              (Act (N, true,
                                                                 (BOpr ("=",
                                                                    (
                                                                    BOpr (
                                                                    "<",
                                                                    (Id ("e",
                                                                    I)),
                                                                    (Id (
                                                                    "tot", I
                                                                    )))),
                                                                    (
                                                                    Id (
                                                                    "true", I
                                                                    )))),
                                                                 (Binder (
                                                                    "_",
                                                                    (
                                                                    Act (N,
                                                                    false,
                                                                    Int_t,
                                                                    (Binder (
                                                                    "P0",
                                                                    (Act (R,
                                                                    false,
                                                                    Int_t,
                                                                    (Binder (
                                                                    "C",
                                                                    (Act (N,
                                                                    false,
                                                                    (BOpr (
                                                                    "=",
                                                                    (Id ("C",
                                                                    I)),
                                                                    (App
                                                                    [(Id (
                                                                    "powm", I
                                                                    ));
                                                                    (Id (
                                                                    "P0", I));
                                                                    (Id ("e",
                                                                    I));
                                                                    (Id ("n",
                                                                    I))]))),
                                                                    (Binder (
                                                                    "_", End
                                                                    ))))))))
                                                                    ))))))
                                                                 ))
                                                              ))
                                                           ))
                                                        ))
                                                     ))
                                                  ))
                                               ))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        Proto)
       ));
    view = []};
  Definition {name = "RSA_ch"; relv = N;
    body = (Binder ([], ((Ch (true, (Id ("RSA", I)))), (Type L)))); view = []};
  Definition {name = "RSA_hc"; relv = N;
    body = (Binder ([], ((Ch (false, (Id ("RSA", I)))), (Type L))));
    view = []};
  Definition {name = "server"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("RSA_ch", I)),
              (Binder ("ch", (IO (Id ("unit", I))))))),
           (Binder ((Some "server"),
              [([(PId "ch")],
                (Some (Let (R, (Int 61),
                         (Binder ((PId "x"),
                            (Let (R, (Int 53),
                               (Binder ((PId "y"),
                                  (Let (R,
                                     (BOpr ("*", (Id ("x", I)), (Id ("y", I))
                                        )),
                                     (Binder ((PId "n"),
                                        (Let (R,
                                           (App
                                              [(Id ("lcm", I));
                                                (BOpr ("-", (Id ("x", I)),
                                                   (Int 1)));
                                                (BOpr ("-", (Id ("y", I)),
                                                   (Int 1)))
                                                ]),
                                           (Binder ((PId "tot"),
                                              (Let (R, (Int 17),
                                                 (Binder ((PId "e"),
                                                    (Let (R, (Int 413),
                                                       (Binder ((PId "d"),
                                                          (MLet (
                                                             (App
                                                                [(Send
                                                                    (
                                                                    Id ("ch",
                                                                    I)));
                                                                  (Id ("x", I
                                                                    ))
                                                                  ]),
                                                             (Binder (
                                                                (PId "ch"),
                                                                (MLet (
                                                                   (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (Id ("y",
                                                                    I))]),
                                                                   (Binder (
                                                                    (PId "ch"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (Id ("n",
                                                                    I))]),
                                                                    (Binder (
                                                                    (PId "ch"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (Id (
                                                                    "refl", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "ch"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (Id (
                                                                    "tot", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "ch"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (Id (
                                                                    "refl", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "ch"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (Id ("e",
                                                                    I))]),
                                                                    (Binder (
                                                                    (PId "ch"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (Id (
                                                                    "refl", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "ch"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (Id (
                                                                    "refl", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "ch"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (Id (
                                                                    "refl", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "ch"),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "ch", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168{},\226\159\169",
                                                                    (PId "P0"),
                                                                    (PId "ch")
                                                                    )),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "ch", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "C"),
                                                                    (PId "ch")
                                                                    )),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "ch", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168{},\226\159\169",
                                                                    (PId "pf"),
                                                                    (PId "ch")
                                                                    )),
                                                                    (Let (R,
                                                                    (App
                                                                    [(Id (
                                                                    "powm", I
                                                                    ));
                                                                    (Id ("C",
                                                                    I));
                                                                    (Id ("d",
                                                                    I));
                                                                    (Id ("n",
                                                                    I))]),
                                                                    (Binder (
                                                                    (PId "P1"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Print
                                                                    (BOpr (
                                                                    "++",
                                                                    (BOpr (
                                                                    "++",
                                                                    (String
                                                                    "server received: "),
                                                                    (App
                                                                    [(Id (
                                                                    "string_of_int",
                                                                    I));
                                                                    (Id (
                                                                    "P1", I))
                                                                    ]))),
                                                                    (String
                                                                    "\n")))),
                                                                    (Close
                                                                    (Id (
                                                                    "ch", I)))
                                                                    ))))))))
                                                                    ))))))))
                                                                    ))))))))
                                                                    ))))))))
                                                                    ))))))))
                                                                    ))))))))
                                                                    ))))
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("RSA_ch", I)), (Binder ("ch", (IO (Id ("unit", I)))))
           )))
       ));
    view = [E]};
  Definition {name = "client"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("RSA_hc", I)),
              (Binder ("ch", (IO (Id ("unit", I))))))),
           (Binder ((Some "client"),
              [([(PId "ch")],
                (Some (Let (R, (Int 123),
                         (Binder ((PId "P0"),
                            (MLet ((Recv (Id ("ch", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168{},\226\159\169",
                                     (PId "x"), (PId "ch"))),
                                  (MLet ((Recv (Id ("ch", I))),
                                     (Binder (
                                        (PBOpr (
                                           "\226\159\168{},\226\159\169",
                                           (PId "y"), (PId "ch"))),
                                        (MLet ((Recv (Id ("ch", I))),
                                           (Binder (
                                              (PBOpr (
                                                 "\226\159\168,\226\159\169",
                                                 (PId "n"), (PId "ch"))),
                                              (MLet ((Recv (Id ("ch", I))),
                                                 (Binder (
                                                    (PBOpr (
                                                       "\226\159\168{},\226\159\169",
                                                       (PId "pf1"),
                                                       (PId "ch"))),
                                                    (MLet (
                                                       (Recv (Id ("ch", I))),
                                                       (Binder (
                                                          (PBOpr (
                                                             "\226\159\168{},\226\159\169",
                                                             (PId "tot"),
                                                             (PId "ch"))),
                                                          (MLet (
                                                             (Recv
                                                                (Id ("ch", I
                                                                   ))),
                                                             (Binder (
                                                                (PBOpr (
                                                                   "\226\159\168{},\226\159\169",
                                                                   (PId "pf2"),
                                                                   (PId "ch")
                                                                   )),
                                                                (MLet (
                                                                   (Recv
                                                                    (Id (
                                                                    "ch", I))),
                                                                   (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "e"),
                                                                    (PId "ch")
                                                                    )),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "ch", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168{},\226\159\169",
                                                                    (PId
                                                                    "pf3"),
                                                                    (PId "ch")
                                                                    )),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "ch", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168{},\226\159\169",
                                                                    (PId
                                                                    "pf4"),
                                                                    (PId "ch")
                                                                    )),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "ch", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168{},\226\159\169",
                                                                    (PId
                                                                    "pf5"),
                                                                    (PId "ch")
                                                                    )),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (Id (
                                                                    "P0", I))
                                                                    ]),
                                                                    (Binder (
                                                                    (PId "ch"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (App
                                                                    [(Id (
                                                                    "powm", I
                                                                    ));
                                                                    (Id (
                                                                    "P0", I));
                                                                    (Id ("e",
                                                                    I));
                                                                    (Id ("n",
                                                                    I))])]),
                                                                    (Binder (
                                                                    (PId "ch"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "ch", I)));
                                                                    (Id (
                                                                    "refl", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "ch"),
                                                                    (Close
                                                                    (Id (
                                                                    "ch", I)))
                                                                    ))))))))
                                                                    ))))))))
                                                                    ))))))))
                                                                    ))
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("RSA_hc", I)), (Binder ("ch", (IO (Id ("unit", I)))))
           )))
       ));
    view = [E]};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((MLet (
           (Fork
              (Fun ((Pi (R, L, IMeta, (Binder ("", (IO (Id ("unit", I))))))),
                 (Binder (None,
                    [([(PId "c")],
                      (Some (App [(Id ("server", I)); (Id ("c", I))])))]
                    )),
                 []))),
           (Binder ((PId "c"),
              (MLet (
                 (Fork
                    (Fun (
                       (Pi (R, L,
                          (Ch (true,
                             (Act (R, false, (Id ("RSA_hc", I)),
                                (Binder ("_", End))))
                             )),
                          (Binder ("", (IO (Id ("unit", I))))))),
                       (Binder (None,
                          [([(PId "c0")],
                            (Some (MLet ((Recv (Id ("c0", I))),
                                     (Binder (
                                        (PBOpr ("\226\159\168,\226\159\169",
                                           (PId "c"), (PId "c0"))),
                                        (BOpr (";", (Close (Id ("c0", I))),
                                           (App
                                              [(Id ("client", I));
                                                (Id ("c", I))])
                                           ))
                                        ))
                                     ))))
                            ]
                          )),
                       []))),
                 (Binder ((PId "c0"),
                    (MLet ((App [(Send (Id ("c0", I))); (Id ("c", I))]),
                       (Binder ((PId "c0"), (Close (Id ("c0", I)))))))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

[parse success]

-----------------------------------------

#[program]
def gcd_33‹› : int -> int -> int :=
  fun gcd_557 : int -> int -> int
  | a_560, b_561 =>
    (match (__lte__ b_561 0) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => a_560
    | false_5 => ((gcd_557) b_561 (__mod__ a_560 b_561)))

#[program]
def lcm_34‹› : int -> int -> int :=
  fun lcm_565 : int -> int -> int
  | a_568, b_569 => (__div__ (__mul__ a_568 b_569) ((gcd_33) a_568 b_569))

#[logical]
def coprime_35‹› : int -> int -> U :=
  fun coprime_572 : int -> int -> U
  | a_575, b_576 => (eq_1‹??_52› ?_69[0;0] ((gcd_33) a_575 b_576) 1)

#[logical]
def RSA_36‹› : proto :=
  ⇑{x_577 : int} ⇒
    ⇑{y_578 : int} ⇒
      ⇑(n_579 : int) ⇒
        ⇑{__580 :
          (eq_1‹??_53› ?_70[0;0] n_579 (__mul__ x_577 y_578))} ⇒
          ⇑{tot_581 : int} ⇒
            ⇑{__582 :
              (eq_1‹??_54›
                ?_71[0;0] tot_581
                ((lcm_34) (__sub__ x_577 1) (__sub__ y_578 1)))} ⇒
              ⇑(e_583 : int) ⇒
                ⇑{__584 : ((coprime_35) e_583 tot_581)} ⇒
                  ⇑{__585 :
                    (eq_1‹??_55› ?_72[0;0] (__lt__ 1 e_583) true_4)} ⇒
                    ⇑{__586 :
                      (eq_1‹??_56›
                        ?_73[0;0] (__lt__ e_583 tot_581) true_4)} ⇒
                      ⇓{P0_587 : int} ⇒
                        ⇓(C_588 : int) ⇒
                          ⇓{__589 :
                            (eq_1‹??_57›
                              ?_74[0;0] C_588 ((powm_27) P0_587 e_583 n_579))} ⇒
                            •

#[logical]
def RSA_ch_37‹› : L := ch⟨RSA_36⟩

#[logical]
def RSA_hc_38‹› : L := hc⟨RSA_36⟩

#[program]
def server_39‹› : RSA_ch_37 -> IO unit_9 :=
  fun server_591 : RSA_ch_37 -> IO unit_9
  | ch_593 =>
    let x_594 := 61 in
    let y_595 := 53 in
    let n_596 := (__mul__ x_594 y_595) in
    let tot_597 := ((lcm_34) (__sub__ x_594 1) (__sub__ y_595 1)) in
    let e_598 := 17 in
    let d_599 := 413 in
    let* ch_600 := ((send ch_593) x_594) in
    let* ch_601 := ((send ch_600) y_595) in
    let* ch_602 := ((send ch_601) n_596) in
    let* ch_603 := ((send ch_602) (refl_1‹??_58› ?_75[0;0] ?_76[0;0])) in
    let* ch_604 := ((send ch_603) tot_597) in
    let* ch_605 := ((send ch_604) (refl_1‹??_59› ?_77[0;0] ?_78[0;0])) in
    let* ch_606 := ((send ch_605) e_598) in
    let* ch_607 := ((send ch_606) (refl_1‹??_60› ?_79[0;0] ?_80[0;0])) in
    let* ch_608 := ((send ch_607) (refl_1‹??_61› ?_81[0;0] ?_82[0;0])) in
    let* ch_609 := ((send ch_608) (refl_1‹??_62› ?_83[0;0] ?_84[0;0])) in
    let* _610 := recv ch_609 in
    (match _610 in ?_90[0;0] -o ?_89[0;0] with
    | (ex0_11 P0_612 ch_613) =>
      let* _614 := recv ch_613 in
      (match _614 in ?_88[0;0] -o ?_87[0;0] with
      | (ex1_12 C_616 ch_617) =>
        let* _618 := recv ch_617 in
        (match _618 in ?_86[0;0] -o ?_85[0;0] with
        | (ex0_11 pf_620 ch_621) =>
          let P1_622 := ((powm_27) C_616 d_599 n_596) in
          let* __623 :=
            print
              (__cat__
                (__cat__ "server received: " ((string_of_int_32) P1_622))
                "\n")
          in close ch_621)))

#[program]
def client_40‹› : RSA_hc_38 -> IO unit_9 :=
  fun client_625 : RSA_hc_38 -> IO unit_9
  | ch_627 =>
    let P0_628 := 123 in
    let* _629 := recv ch_627 in
    (match _629 in ?_112[0;0] -o ?_111[0;0] with
    | (ex0_11 x_631 ch_632) =>
      let* _633 := recv ch_632 in
      (match _633 in ?_110[0;0] -o ?_109[0;0] with
      | (ex0_11 y_635 ch_636) =>
        let* _637 := recv ch_636 in
        (match _637 in ?_108[0;0] -o ?_107[0;0] with
        | (ex1_12 n_639 ch_640) =>
          let* _641 := recv ch_640 in
          (match _641 in ?_106[0;0] -o ?_105[0;0] with
          | (ex0_11 pf1_643 ch_644) =>
            let* _645 := recv ch_644 in
            (match _645 in ?_104[0;0] -o ?_103[0;0] with
            | (ex0_11 tot_647 ch_648) =>
              let* _649 := recv ch_648 in
              (match _649 in ?_102[0;0] -o ?_101[0;0] with
              | (ex0_11 pf2_651 ch_652) =>
                let* _653 := recv ch_652 in
                (match _653 in ?_100[0;0] -o ?_99[0;0] with
                | (ex1_12 e_655 ch_656) =>
                  let* _657 := recv ch_656 in
                  (match _657 in ?_98[0;0] -o ?_97[0;0] with
                  | (ex0_11 pf3_659 ch_660) =>
                    let* _661 := recv ch_660 in
                    (match _661 in ?_96[0;0] -o ?_95[0;0] with
                    | (ex0_11 pf4_663 ch_664) =>
                      let* _665 := recv ch_664 in
                      (match _665 in ?_94[0;0] -o ?_93[0;0] with
                      | (ex0_11 pf5_667 ch_668) =>
                        let* ch_669 := ((send ch_668) P0_628) in
                        let* ch_670 :=
                          ((send ch_669) ((powm_27) P0_628 e_655 n_639))
                        in
                        let* ch_671 :=
                          ((send ch_670)
                            (refl_1‹??_63› ?_91[0;0] ?_92[0;0]))
                        in close ch_671))))))))))

#[program]
def main_41‹› : IO unit_9 :=
  let* c_672 :=
    fork fun _673 : ?_113[0;0] -o IO unit_9
         | c_675 => ((server_39) c_675)
  in
  let* c0_676 :=
    fork
      fun _677 : ch⟨⇓(__679 : RSA_hc_38) ⇒ •⟩ -o IO unit_9
      | c0_680 =>
        let* _681 := recv c0_680 in
        (match _681 in ?_115[0;0] -o ?_114[0;0] with
        | (ex1_12 c_683 c0_684) =>
          let* __685 := close c0_684 in ((client_40) c_683))
  in let* c0_686 := ((send c0_676) c_672) in close c0_686

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_24350› :
  ∀ (A_24351 : Type‹s_24350›) -> A_24351 -> A_24351
:=
  fun id_24353 : ∀ (A_24354 : Type‹s_24350›) -> A_24354 -> A_24354
  | A_24356, m_24357 => m_24357

#[logical]
inductive eq_1‹s_24358› (A_24359 : Type‹s_24358›) (m_24360 : A_24359):
  A_24359 -> U
where
| refl_1 : (eq_1‹s_24358› A_24359 m_24360 m_24360)

#[program]
def rwl_2‹s_24362,r_24363› :
  ∀ {A_24364 : Type‹s_24362›} ->
    ∀ {m_24365 : A_24364} ->
      ∀ {n_24366 : A_24364} ->
        ∀ {B_24367 : A_24364 -> Type‹r_24363›} ->
          {(eq_1‹s_24362› A_24364 m_24365 n_24366)} ->
            ((B_24367) m_24365) -> ((B_24367) n_24366)
:=
  fun rwl_24371 :
    ∀ {A_24372 : Type‹s_24362›} ->
      ∀ {m_24373 : A_24372} ->
        ∀ {n_24374 : A_24372} ->
          ∀ {B_24375 : A_24372 -> Type‹r_24363›} ->
            {(eq_1‹s_24362› A_24372 m_24373 n_24374)} ->
              ((B_24375) m_24373) -> ((B_24375) n_24374)
  | A_24379, m_24380, n_24381, B_24382, refl_1, __24383 => __24383

#[program]
def rwr_3‹s_24384,r_24385› :
  ∀ {A_24386 : Type‹s_24384›} ->
    ∀ {m_24387 : A_24386} ->
      ∀ {n_24388 : A_24386} ->
        ∀ {B_24389 : A_24386 -> Type‹r_24385›} ->
          {(eq_1‹s_24384› A_24386 m_24387 n_24388)} ->
            ((B_24389) n_24388) -> ((B_24389) m_24387)
:=
  fun rwr_24393 :
    ∀ {A_24394 : Type‹s_24384›} ->
      ∀ {m_24395 : A_24394} ->
        ∀ {n_24396 : A_24394} ->
          ∀ {B_24397 : A_24394 -> Type‹r_24385›} ->
            {(eq_1‹s_24384› A_24394 m_24395 n_24396)} ->
              ((B_24397) n_24396) -> ((B_24397) m_24395)
  | A_24401, m_24402, n_24403, B_24404, refl_1, __24405 => __24405

#[logical]
def congr_4‹s_24406,r_24407,t_24408› :
  ∀ (A_24409 : Type‹s_24406›) ->
    ∀ (B_24410 : Type‹r_24407›) ->
      ∀ (m_24411 : A_24409) ->
        ∀ (n_24412 : A_24409) ->
          ∀ (f_24413 : forall‹t_24408›(__24414 : A_24409), B_24410) ->
            (eq_1‹s_24406› A_24409 m_24411 n_24412) ->
              (eq_1‹r_24407›
                B_24410 ((f_24413) m_24411) ((f_24413) n_24412))
:=
  fun congr_24416 :
    ∀ (A_24417 : Type‹s_24406›) ->
      ∀ (B_24418 : Type‹r_24407›) ->
        ∀ (m_24419 : A_24417) ->
          ∀ (n_24420 : A_24417) ->
            ∀ (f_24421 :
              forall‹t_24408›(__24422 : A_24417), B_24418) ->
              (eq_1‹s_24406› A_24417 m_24419 n_24420) ->
                (eq_1‹r_24407›
                  B_24418 ((f_24421) m_24419) ((f_24421) n_24420))
  | A_24424, B_24425, m_24426, n_24427, f_24428, refl_1 =>
    (refl_1‹r_24407› B_24425 ((f_24428) n_24427))

#[logical]
def axiom_K_5‹› :
  ∀ {A_24429 : U} ->
    ∀ {m_24430 : A_24429} ->
      ∀ (x_24431 : (eq_1‹U› A_24429 m_24430 m_24430)) ->
        (eq_1‹U›
          (eq_1‹U› A_24429 m_24430 m_24430) x_24431
          (refl_1‹U› A_24429 m_24430))
:=
  fun axiom_K_24432 :
    ∀ {A_24433 : U} ->
      ∀ {m_24434 : A_24433} ->
        ∀ (x_24435 : (eq_1‹U› A_24433 m_24434 m_24434)) ->
          (eq_1‹U›
            (eq_1‹U› A_24433 m_24434 m_24434) x_24435
            (refl_1‹U› A_24433 m_24434))
  | A_24436, m_24437, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_24436 m_24437 m_24437) (refl_1‹U› A_24436 m_24437))

#[program]
inductive sing_2‹s_24438,t_24439› (A_24440 : Type‹s_24438›):
  A_24440 -> Type‹t_24439›
where
| just_2 (m_24442 : A_24440) : (sing_2‹s_24438,t_24439› A_24440 m_24442)

#[logical]
def ssing_6‹s_24443› :
  ∀ (A_24444 : Type‹s_24443›) -> A_24444 -> Type‹s_24443›
:=
  fun ssing_24446 :
    ∀ (A_24447 : Type‹s_24443›) -> A_24447 -> Type‹s_24443›
  | A_24449, m_24450 => (sing_2‹s_24443,s_24443› A_24449 m_24450)

#[program]
def sing_elim_7‹s_24451,t_24452› :
  ∀ {A_24453 : Type‹s_24451›} ->
    ∀ {x_24454 : A_24453} ->
      (sing_2‹s_24451,t_24452› A_24453 x_24454) -> A_24453
:=
  fun sing_elim_24456 :
    ∀ {A_24457 : Type‹s_24451›} ->
      ∀ {x_24458 : A_24457} ->
        (sing_2‹s_24451,t_24452› A_24457 x_24458) -> A_24457
  | A_24460, x_24461, (just_2 m_24462) => m_24462

#[logical]
def sing_uniq_8‹s_24463,t_24464› :
  ∀ (A_24465 : Type‹s_24463›) ->
    ∀ (x0_24466 : A_24465) ->
      ∀ (x_24467 : (sing_2‹s_24463,t_24464› A_24465 x0_24466)) ->
        (eq_1‹s_24463›
          A_24465 x0_24466
          ((sing_elim_7‹s_24463,t_24464›) A_24465 x0_24466 x_24467))
:=
  fun sing_uniq_24468 :
    ∀ (A_24469 : Type‹s_24463›) ->
      ∀ (x0_24470 : A_24469) ->
        ∀ (x_24471 : (sing_2‹s_24463,t_24464› A_24469 x0_24470)) ->
          (eq_1‹s_24463›
            A_24469 x0_24470
            ((sing_elim_7‹s_24463,t_24464›) A_24469 x0_24470 x_24471))
  | A_24472, x0_24473, (just_2 m_24474) =>
    (refl_1‹s_24463› A_24472 m_24474)

#[program]
inductive base_3‹s_24475› : Type‹s_24475› where
| tt_3 : base_3‹s_24475›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_24476 : unit_9) -> (eq_1‹U› base_3‹U› x_24476 tt_3‹U›)
:=
  fun unit_eta_24477 :
    ∀ (x_24478 : unit_9) -> (eq_1‹U› base_3‹U› x_24478 tt_3‹U›)
  | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  fun not_24480 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_24484 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __24487 => false_5

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_24490 : bool_4 -> bool_4 -> bool_4
  | true_4, __24493 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  fun xor_24496 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_24499 : nat_5) : nat_5

#[program]
def lte_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_24502 : nat_5 -> nat_5 -> bool_4
  | zero_6, __24505 => true_4
  | (succ_7 n_24506), zero_6 => false_5
  | (succ_7 n_24507), (succ_7 n_24508) => ((lte_24502) n_24507 n_24508)

#[program]
def lt_16‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_24511 : nat_5 -> nat_5 -> bool_4
  | x_24514, y_24515 => ((lte_15) (succ_7‹› x_24514) y_24515)

#[program]
def pred_17‹› : nat_5 -> nat_5 :=
  fun pred_24517 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_24519) => n_24519

#[program]
def add_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_24522 : nat_5 -> nat_5 -> nat_5
  | zero_6, __24525 => __24525
  | (succ_7 n_24526), __24527 => (succ_7‹› ((add_24522) n_24526 __24527))

#[program]
def sub_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_24530 : nat_5 -> nat_5 -> nat_5
  | __24533, zero_6 => __24533
  | __24534, (succ_7 n_24535) => ((sub_24530) ((pred_17) __24534) n_24535)

#[program]
def mul_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_24538 : nat_5 -> nat_5 -> nat_5
  | zero_6, __24541 => zero_6
  | (succ_7 n_24542), __24543 =>
    ((add_18) __24543 ((mul_24538) n_24542 __24543))

#[program]
def div_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_24546 : nat_5 -> nat_5 -> nat_5
  | x_24549, y_24550 =>
    (match ((lt_16) x_24549 y_24550) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_24552 :=
        fun loop_24553 : nat_5 -> nat_5 -> nat_5
        | x_24556, y_24557 =>
          (match ((sub_19) x_24556 ((pred_17) y_24557)) in nat_5 -o nat_5
           with
          | zero_6 => zero_6
          | (succ_7 n_24559) => (succ_7‹› ((loop_24553) n_24559 y_24557)))
      in ((loop_24552) x_24549 y_24550))

#[program]
def rem_22‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_24562 : nat_5 -> nat_5 -> nat_5
  | x_24565, y_24566 =>
    ((sub_19) x_24565 ((mul_20) ((div_21) x_24565 y_24566) y_24566))

#[program]
inductive list_6‹s_24567,t_24568› (A_24569 : Type‹s_24567›):
  Type‹t_24568›
where
| nil_8 : (list_6‹s_24567,t_24568› A_24569)
| cons_9
    (hd_24570 : A_24569) (tl_24571 : (list_6‹s_24567,t_24568› A_24569))
    : (list_6‹s_24567,t_24568› A_24569)

#[program]
def free_list_23‹s_24572,t_24573› :
  ∀ {A_24574 : Type‹s_24572›} ->
    A_24574 -> unit_9 -> (list_6‹s_24572,t_24573› A_24574) -> unit_9
:=
  fun free_list_24578 :
    ∀ {A_24579 : Type‹s_24572›} ->
      A_24579 -> unit_9 -> (list_6‹s_24572,t_24573› A_24579) -> unit_9
  | A_24583, f_24584, nil_8 => tt_3‹U›
  | A_24585, f_24586, (cons_9 hd_24587 tl_24588) =>
    let __24589 := ((f_24586) hd_24587) in
    ((free_list_24578) A_24585 f_24586 tl_24588)

#[program]
inductive exists_7‹s_24590,r_24591› (A_24592 : Type‹s_24590›) (B_24593 : 
A_24592 -> Type‹r_24591›): L where
| ex_10
    (m_24595 : A_24592) {n_24596 : ((B_24593) m_24595)}
    : (exists_7‹s_24590,r_24591› A_24592 B_24593)

#[program]
inductive exists0_8‹s_24597,r_24598› (A_24599 : Type‹s_24597›) (B_24600 : 
A_24599 -> Type‹r_24598›): L where
| ex0_11
    {m_24602 : A_24599} (n_24603 : ((B_24600) m_24602))
    : (exists0_8‹s_24597,r_24598› A_24599 B_24600)

#[program]
inductive exists1_9‹s_24604,r_24605› (A_24606 : Type‹s_24604›) (B_24607 : 
A_24606 -> Type‹r_24605›): L where
| ex1_12
    (m_24609 : A_24606) (n_24610 : ((B_24607) m_24609))
    : (exists1_9‹s_24604,r_24605› A_24606 B_24607)

#[logical]
def prod0_24‹s_24611,r_24612› :
  Type‹s_24611› -> Type‹r_24612› -> L
:=
  fun prod0_24615 : Type‹s_24611› -> Type‹r_24612› -> L
  | A_24618, B_24619 =>
    (exists0_8‹s_24611,r_24612›
      A_24618 fun _24620 : A_24618 -> Type‹r_24612›
              | __24622 => B_24619)

#[logical]
def prod1_25‹s_24623,r_24624› :
  Type‹s_24623› -> Type‹r_24624› -> L
:=
  fun prod1_24627 : Type‹s_24623› -> Type‹r_24624› -> L
  | A_24630, B_24631 =>
    (exists1_9‹s_24623,r_24624›
      A_24630 fun _24632 : A_24630 -> Type‹r_24624›
              | __24634 => B_24631)

#[program]
def pow_26‹› : int -> int -> int :=
  fun pow_24637 : int -> int -> int
  | x_24640, y_24641 =>
    let loop_24642 :=
      fun loop_24643 : int -> int -> int
      | acc_24646, y_24647 =>
        (match (__lte__ y_24647 0) in bool_4 -o int with
        | true_4 => acc_24646
        | false_5 =>
          ((loop_24643) (__mul__ x_24640 acc_24646) (__sub__ y_24647 1)))
    in ((loop_24642) 1 y_24641)

#[program]
def powm_27‹› : int -> int -> int -> int :=
  fun powm_24652 : int -> int -> int -> int
  | x_24656, y_24657, m_24658 =>
    let loop_24659 :=
      fun loop_24660 : int -> int -> int
      | acc_24663, y_24664 =>
        (match (__lte__ y_24664 0) in bool_4 -o int with
        | true_4 => acc_24663
        | false_5 =>
          ((loop_24660)
            (__mod__ (__mul__ x_24656 acc_24663) m_24658) (__sub__ y_24664 1)))
    in ((loop_24659) 1 y_24657)

#[program]
def ord_28‹› : char -> int :=
  fun ord_24667 : char -> int
  | c_24669 => (__ord__ c_24669)

#[program]
def chr_29‹› : int -> char :=
  fun chr_24671 : int -> char
  | i_24673 => (__chr__ i_24673)

#[program]
def str_30‹› : char -> string :=
  fun str_24675 : char -> string
  | c_24677 => (__push__ "" c_24677)

#[program]
def strlen_31‹› : string -> int :=
  fun strlen_24679 : string -> int
  | s_24681 => (__size__ s_24681)

#[program]
def string_of_int_32‹› : int -> string :=
  fun string_of_int_24683 : int -> string
  | i_24685 =>
    let aux_24686 :=
      fun aux_24687 : int -> string
      | i_24689 =>
        (match (__lte__ 10 i_24689) in bool_4 -o string with
        | true_4 =>
          let r_24691 := (__mod__ i_24689 10) in
          let i_24692 := (__div__ i_24689 10) in
          (__push__ ((aux_24687) i_24692)
            ((chr_29) (__add__ r_24691 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_24689 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_24685) in bool_4 -o string with
    | true_4 => ((aux_24686) i_24685)
    | false_5 => (__cat__ "~" ((aux_24686) (__neg__ i_24685))))

#[program]
def gcd_33‹› : int -> int -> int :=
  fun gcd_24696 : int -> int -> int
  | a_24699, b_24700 =>
    (match (__lte__ b_24700 0) in bool_4 -o int with
    | true_4 => a_24699
    | false_5 => ((gcd_24696) b_24700 (__mod__ a_24699 b_24700)))

#[program]
def lcm_34‹› : int -> int -> int :=
  fun lcm_24704 : int -> int -> int
  | a_24707, b_24708 =>
    (__div__ (__mul__ a_24707 b_24708) ((gcd_33) a_24707 b_24708))

#[logical]
def coprime_35‹› : int -> int -> U :=
  fun coprime_24711 : int -> int -> U
  | a_24714, b_24715 => (eq_1‹U› int ((gcd_33) a_24714 b_24715) 1)

#[logical]
def RSA_36‹› : proto :=
  ⇑{x_24716 : int} ⇒
    ⇑{y_24717 : int} ⇒
      ⇑(n_24718 : int) ⇒
        ⇑{__24719 :
          (eq_1‹U› int n_24718 (__mul__ x_24716 y_24717))} ⇒
          ⇑{tot_24720 : int} ⇒
            ⇑{__24721 :
              (eq_1‹U›
                int tot_24720
                ((lcm_34) (__sub__ x_24716 1) (__sub__ y_24717 1)))} ⇒
              ⇑(e_24722 : int) ⇒
                ⇑{__24723 : ((coprime_35) e_24722 tot_24720)} ⇒
                  ⇑{__24724 :
                    (eq_1‹U› bool_4 (__lt__ 1 e_24722) true_4)} ⇒
                    ⇑{__24725 :
                      (eq_1‹U› bool_4 (__lt__ e_24722 tot_24720) true_4)} ⇒
                      ⇓{P0_24726 : int} ⇒
                        ⇓(C_24727 : int) ⇒
                          ⇓{__24728 :
                            (eq_1‹U›
                              int C_24727
                              ((powm_27) P0_24726 e_24722 n_24718))} ⇒
                            •

#[logical]
def RSA_ch_37‹› : L := ch⟨RSA_36⟩

#[logical]
def RSA_hc_38‹› : L := hc⟨RSA_36⟩

#[program]
def server_39‹› : RSA_ch_37 -> IO unit_9 :=
  fun server_24730 : RSA_ch_37 -> IO unit_9
  | ch_24732 =>
    let x_24733 := 61 in
    let y_24734 := 53 in
    let n_24735 := (__mul__ x_24733 y_24734) in
    let tot_24736 := ((lcm_34) (__sub__ x_24733 1) (__sub__ y_24734 1)) in
    let e_24737 := 17 in
    let d_24738 := 413 in
    let* ch_24739 := ((send ch_24732) x_24733) in
    let* ch_24740 := ((send ch_24739) y_24734) in
    let* ch_24741 := ((send ch_24740) n_24735) in
    let* ch_24742 := ((send ch_24741) (refl_1‹U› int n_24735)) in
    let* ch_24743 := ((send ch_24742) tot_24736) in
    let* ch_24744 := ((send ch_24743) (refl_1‹U› int tot_24736)) in
    let* ch_24745 := ((send ch_24744) e_24737) in
    let* ch_24746 :=
      ((send ch_24745) (refl_1‹U› int ((gcd_33) e_24737 tot_24736)))
    in
    let* ch_24747 :=
      ((send ch_24746) (refl_1‹U› bool_4 (__lt__ 1 e_24737)))
    in
    let* ch_24748 :=
      ((send ch_24747) (refl_1‹U› bool_4 (__lt__ e_24737 tot_24736)))
    in
    let* _24749 := recv ch_24748 in
    (match _24749 in
       (exists0_8‹U,L›
         int
         fun _24751 : int -> L
         | P0_24753 =>
           ch⟨⇓(C_24754 : int) ⇒
                  ⇓{__24755 :
                    (eq_1‹U›
                      int C_24754 ((powm_27) P0_24753 e_24737 n_24735))} ⇒
                    •⟩) -o
         IO base_3‹U›
     with
    | (ex0_11 m_24756 n_24757) =>
      let* _24758 := recv n_24757 in
      (match _24758 in
         (exists1_9‹U,L›
           int
           fun _24760 : int -> L
           | C_24762 =>
             ch⟨⇓{__24763 :
                    (eq_1‹U›
                      int C_24762 ((powm_27) m_24756 e_24737 n_24735))} ⇒
                    •⟩) -o
           IO base_3‹U›
       with
      | (ex1_12 m_24764 n_24765) =>
        let* _24766 := recv n_24765 in
        (match _24766 in
           (exists0_8‹U,L›
             (eq_1‹U› int m_24764 ((powm_27) m_24756 e_24737 n_24735))
             fun _24768 :
               (eq_1‹U› int m_24764 ((powm_27) m_24756 e_24737 n_24735)) ->
                 L
             | __24770 => ch⟨•⟩) -o IO base_3‹U›
         with
        | (ex0_11 m_24771 n_24772) =>
          let P1_24773 := ((powm_27) m_24764 d_24738 n_24735) in
          let* __24774 :=
            print
              (__cat__
                (__cat__ "server received: " ((string_of_int_32) P1_24773))
                "\n")
          in close n_24772)))

#[program]
def client_40‹› : RSA_hc_38 -> IO unit_9 :=
  fun client_24776 : RSA_hc_38 -> IO unit_9
  | ch_24778 =>
    let P0_24779 := 123 in
    let* _24780 := recv ch_24778 in
    (match _24780 in
       (exists0_8‹U,L›
         int
         fun _24782 : int -> L
         | x_24784 =>
           hc⟨⇑{y_24785 : int} ⇒
                  ⇑(n_24786 : int) ⇒
                    ⇑{__24787 :
                      (eq_1‹U› int n_24786 (__mul__ x_24784 y_24785))} ⇒
                      ⇑{tot_24788 : int} ⇒
                        ⇑{__24789 :
                          (eq_1‹U›
                            int tot_24788
                            ((lcm_34)
                              (__sub__ x_24784 1) (__sub__ y_24785 1)))} ⇒
                          ⇑(e_24790 : int) ⇒
                            ⇑{__24791 :
                              ((coprime_35) e_24790 tot_24788)} ⇒
                              ⇑{__24792 :
                                (eq_1‹U›
                                  bool_4 (__lt__ 1 e_24790) true_4)} ⇒
                                ⇑{__24793 :
                                  (eq_1‹U›
                                    bool_4 (__lt__ e_24790 tot_24788) true_4)} ⇒
                                  ⇓{P0_24794 : int} ⇒
                                    ⇓(C_24795 : int) ⇒
                                      ⇓{__24796 :
                                        (eq_1‹U›
                                          int C_24795
                                          ((powm_27)
                                            P0_24794 e_24790 n_24786))} ⇒
                                        •⟩) -o
         IO base_3‹U›
     with
    | (ex0_11 m_24797 n_24798) =>
      let* _24799 := recv n_24798 in
      (match _24799 in
         (exists0_8‹U,L›
           int
           fun _24801 : int -> L
           | y_24803 =>
             hc⟨⇑(n_24804 : int) ⇒
                    ⇑{__24805 :
                      (eq_1‹U› int n_24804 (__mul__ m_24797 y_24803))} ⇒
                      ⇑{tot_24806 : int} ⇒
                        ⇑{__24807 :
                          (eq_1‹U›
                            int tot_24806
                            ((lcm_34)
                              (__sub__ m_24797 1) (__sub__ y_24803 1)))} ⇒
                          ⇑(e_24808 : int) ⇒
                            ⇑{__24809 :
                              ((coprime_35) e_24808 tot_24806)} ⇒
                              ⇑{__24810 :
                                (eq_1‹U›
                                  bool_4 (__lt__ 1 e_24808) true_4)} ⇒
                                ⇑{__24811 :
                                  (eq_1‹U›
                                    bool_4 (__lt__ e_24808 tot_24806) true_4)} ⇒
                                  ⇓{P0_24812 : int} ⇒
                                    ⇓(C_24813 : int) ⇒
                                      ⇓{__24814 :
                                        (eq_1‹U›
                                          int C_24813
                                          ((powm_27)
                                            P0_24812 e_24808 n_24804))} ⇒
                                        •⟩) -o
           IO base_3‹U›
       with
      | (ex0_11 m_24815 n_24816) =>
        let* _24817 := recv n_24816 in
        (match _24817 in
           (exists1_9‹U,L›
             int
             fun _24819 : int -> L
             | n_24821 =>
               hc⟨⇑{__24822 :
                      (eq_1‹U› int n_24821 (__mul__ m_24797 m_24815))} ⇒
                      ⇑{tot_24823 : int} ⇒
                        ⇑{__24824 :
                          (eq_1‹U›
                            int tot_24823
                            ((lcm_34)
                              (__sub__ m_24797 1) (__sub__ m_24815 1)))} ⇒
                          ⇑(e_24825 : int) ⇒
                            ⇑{__24826 :
                              ((coprime_35) e_24825 tot_24823)} ⇒
                              ⇑{__24827 :
                                (eq_1‹U›
                                  bool_4 (__lt__ 1 e_24825) true_4)} ⇒
                                ⇑{__24828 :
                                  (eq_1‹U›
                                    bool_4 (__lt__ e_24825 tot_24823) true_4)} ⇒
                                  ⇓{P0_24829 : int} ⇒
                                    ⇓(C_24830 : int) ⇒
                                      ⇓{__24831 :
                                        (eq_1‹U›
                                          int C_24830
                                          ((powm_27)
                                            P0_24829 e_24825 n_24821))} ⇒
                                        •⟩) -o
             IO base_3‹U›
         with
        | (ex1_12 m_24832 n_24833) =>
          let* _24834 := recv n_24833 in
          (match _24834 in
             (exists0_8‹U,L›
               (eq_1‹U› int m_24832 (__mul__ m_24797 m_24815))
               fun _24836 :
                 (eq_1‹U› int m_24832 (__mul__ m_24797 m_24815)) -> L
               | __24838 =>
                 hc⟨⇑{tot_24839 : int} ⇒
                        ⇑{__24840 :
                          (eq_1‹U›
                            int tot_24839
                            ((lcm_34)
                              (__sub__ m_24797 1) (__sub__ m_24815 1)))} ⇒
                          ⇑(e_24841 : int) ⇒
                            ⇑{__24842 :
                              ((coprime_35) e_24841 tot_24839)} ⇒
                              ⇑{__24843 :
                                (eq_1‹U›
                                  bool_4 (__lt__ 1 e_24841) true_4)} ⇒
                                ⇑{__24844 :
                                  (eq_1‹U›
                                    bool_4 (__lt__ e_24841 tot_24839) true_4)} ⇒
                                  ⇓{P0_24845 : int} ⇒
                                    ⇓(C_24846 : int) ⇒
                                      ⇓{__24847 :
                                        (eq_1‹U›
                                          int C_24846
                                          ((powm_27)
                                            P0_24845 e_24841 m_24832))} ⇒
                                        •⟩) -o
               IO base_3‹U›
           with
          | (ex0_11 m_24848 n_24849) =>
            let* _24850 := recv n_24849 in
            (match _24850 in
               (exists0_8‹U,L›
                 int
                 fun _24852 : int -> L
                 | tot_24854 =>
                   hc⟨⇑{__24855 :
                          (eq_1‹U›
                            int tot_24854
                            ((lcm_34)
                              (__sub__ m_24797 1) (__sub__ m_24815 1)))} ⇒
                          ⇑(e_24856 : int) ⇒
                            ⇑{__24857 :
                              ((coprime_35) e_24856 tot_24854)} ⇒
                              ⇑{__24858 :
                                (eq_1‹U›
                                  bool_4 (__lt__ 1 e_24856) true_4)} ⇒
                                ⇑{__24859 :
                                  (eq_1‹U›
                                    bool_4 (__lt__ e_24856 tot_24854) true_4)} ⇒
                                  ⇓{P0_24860 : int} ⇒
                                    ⇓(C_24861 : int) ⇒
                                      ⇓{__24862 :
                                        (eq_1‹U›
                                          int C_24861
                                          ((powm_27)
                                            P0_24860 e_24856 m_24832))} ⇒
                                        •⟩) -o
                 IO base_3‹U›
             with
            | (ex0_11 m_24863 n_24864) =>
              let* _24865 := recv n_24864 in
              (match _24865 in
                 (exists0_8‹U,L›
                   (eq_1‹U›
                     int m_24863
                     ((lcm_34) (__sub__ m_24797 1) (__sub__ m_24815 1)))
                   fun _24867 :
                     (eq_1‹U›
                       int m_24863
                       ((lcm_34) (__sub__ m_24797 1) (__sub__ m_24815 1))) ->
                       L
                   | __24869 =>
                     hc⟨⇑(e_24870 : int) ⇒
                            ⇑{__24871 : ((coprime_35) e_24870 m_24863)} ⇒
                              ⇑{__24872 :
                                (eq_1‹U›
                                  bool_4 (__lt__ 1 e_24870) true_4)} ⇒
                                ⇑{__24873 :
                                  (eq_1‹U›
                                    bool_4 (__lt__ e_24870 m_24863) true_4)} ⇒
                                  ⇓{P0_24874 : int} ⇒
                                    ⇓(C_24875 : int) ⇒
                                      ⇓{__24876 :
                                        (eq_1‹U›
                                          int C_24875
                                          ((powm_27)
                                            P0_24874 e_24870 m_24832))} ⇒
                                        •⟩) -o
                   IO base_3‹U›
               with
              | (ex0_11 m_24877 n_24878) =>
                let* _24879 := recv n_24878 in
                (match _24879 in
                   (exists1_9‹U,L›
                     int
                     fun _24881 : int -> L
                     | e_24883 =>
                       hc⟨⇑{__24884 : ((coprime_35) e_24883 m_24863)} ⇒
                              ⇑{__24885 :
                                (eq_1‹U›
                                  bool_4 (__lt__ 1 e_24883) true_4)} ⇒
                                ⇑{__24886 :
                                  (eq_1‹U›
                                    bool_4 (__lt__ e_24883 m_24863) true_4)} ⇒
                                  ⇓{P0_24887 : int} ⇒
                                    ⇓(C_24888 : int) ⇒
                                      ⇓{__24889 :
                                        (eq_1‹U›
                                          int C_24888
                                          ((powm_27)
                                            P0_24887 e_24883 m_24832))} ⇒
                                        •⟩) -o
                     IO base_3‹U›
                 with
                | (ex1_12 m_24890 n_24891) =>
                  let* _24892 := recv n_24891 in
                  (match _24892 in
                     (exists0_8‹U,L›
                       ((coprime_35) m_24890 m_24863)
                       fun _24894 : ((coprime_35) m_24890 m_24863) -> L
                       | __24896 =>
                         hc⟨⇑{__24897 :
                                (eq_1‹U›
                                  bool_4 (__lt__ 1 m_24890) true_4)} ⇒
                                ⇑{__24898 :
                                  (eq_1‹U›
                                    bool_4 (__lt__ m_24890 m_24863) true_4)} ⇒
                                  ⇓{P0_24899 : int} ⇒
                                    ⇓(C_24900 : int) ⇒
                                      ⇓{__24901 :
                                        (eq_1‹U›
                                          int C_24900
                                          ((powm_27)
                                            P0_24899 m_24890 m_24832))} ⇒
                                        •⟩) -o
                       IO base_3‹U›
                   with
                  | (ex0_11 m_24902 n_24903) =>
                    let* _24904 := recv n_24903 in
                    (match _24904 in
                       (exists0_8‹U,L›
                         (eq_1‹U› bool_4 (__lt__ 1 m_24890) true_4)
                         fun _24906 :
                           (eq_1‹U› bool_4 (__lt__ 1 m_24890) true_4) ->
                             L
                         | __24908 =>
                           hc⟨⇑{__24909 :
                                  (eq_1‹U›
                                    bool_4 (__lt__ m_24890 m_24863) true_4)} ⇒
                                  ⇓{P0_24910 : int} ⇒
                                    ⇓(C_24911 : int) ⇒
                                      ⇓{__24912 :
                                        (eq_1‹U›
                                          int C_24911
                                          ((powm_27)
                                            P0_24910 m_24890 m_24832))} ⇒
                                        •⟩) -o
                         IO base_3‹U›
                     with
                    | (ex0_11 m_24913 n_24914) =>
                      let* _24915 := recv n_24914 in
                      (match _24915 in
                         (exists0_8‹U,L›
                           (eq_1‹U›
                             bool_4 (__lt__ m_24890 m_24863) true_4)
                           fun _24917 :
                             (eq_1‹U›
                               bool_4 (__lt__ m_24890 m_24863) true_4) -> L
                           | __24919 =>
                             hc⟨⇓{P0_24920 : int} ⇒
                                    ⇓(C_24921 : int) ⇒
                                      ⇓{__24922 :
                                        (eq_1‹U›
                                          int C_24921
                                          ((powm_27)
                                            P0_24920 m_24890 m_24832))} ⇒
                                        •⟩) -o
                           IO base_3‹U›
                       with
                      | (ex0_11 m_24923 n_24924) =>
                        let* ch_24925 := ((send n_24924) P0_24779) in
                        let* ch_24926 :=
                          ((send ch_24925)
                            ((powm_27) P0_24779 m_24890 m_24832))
                        in
                        let* ch_24927 :=
                          ((send ch_24926)
                            (refl_1‹U›
                              int ((powm_27) P0_24779 m_24890 m_24832)))
                        in close ch_24927))))))))))

#[program]
def main_41‹› : IO unit_9 :=
  let* c_24928 :=
    fork fun _24929 : RSA_ch_37 -o IO unit_9
         | _24931 => ((server_39) _24931)
  in
  let* c0_24932 :=
    fork
      fun _24933 : ch⟨⇓(__24935 : RSA_hc_38) ⇒ •⟩ -o IO unit_9
      | _24936 =>
        let* _24937 := recv _24936 in
        (match _24937 in
           (exists1_9‹L,L›
             RSA_hc_38 fun _24939 : RSA_hc_38 -> L
                       | __24941 => ch⟨•⟩) -o
             IO unit_9
         with
        | (ex1_12 m_24942 n_24943) =>
          let* __24944 := close n_24943 in ((client_40) m_24942))
  in let* c0_24945 := ((send c0_24932) c_24928) in close c0_24945

[trans1e success]

-----------------------------------------

#[program]
def idU_43 := fun id_62083 (A_62084) -> (m_62085) ->
                m_62085

#[program]
def idL_42 := fun id_62086 (A_62087) -> (m_62088) ->
                m_62088

#[logical]
inductive eqU_11 where
| reflU_14 of layout[]

#[logical]
inductive eqL_10 where
| reflL_13 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_62089 {A_62090} -> {m_62091} -> {n_62092} -> {B_62093} ->
  {__62094} -> (__62095) ->
    (match {NULL} with
    | reflU_14  => __62095)

#[program]
def rwlUL_46 :=
  fun rwl_62096 {A_62097} -> {m_62098} -> {n_62099} -> {B_62100} ->
  {__62101} -> (__62102) ->
    (match {NULL} with
    | reflU_14  => __62102)

#[program]
def rwlLU_45 :=
  fun rwl_62103 {A_62104} -> {m_62105} -> {n_62106} -> {B_62107} ->
  {__62108} -> (__62109) ->
    (match {NULL} with
    | reflL_13  => __62109)

#[program]
def rwlLL_44 :=
  fun rwl_62110 {A_62111} -> {m_62112} -> {n_62113} -> {B_62114} ->
  {__62115} -> (__62116) ->
    (match {NULL} with
    | reflL_13  => __62116)

#[program]
def rwrUU_51 :=
  fun rwr_62117 {A_62118} -> {m_62119} -> {n_62120} -> {B_62121} ->
  {__62122} -> (__62123) ->
    (match {NULL} with
    | reflU_14  => __62123)

#[program]
def rwrUL_50 :=
  fun rwr_62124 {A_62125} -> {m_62126} -> {n_62127} -> {B_62128} ->
  {__62129} -> (__62130) ->
    (match {NULL} with
    | reflU_14  => __62130)

#[program]
def rwrLU_49 :=
  fun rwr_62131 {A_62132} -> {m_62133} -> {n_62134} -> {B_62135} ->
  {__62136} -> (__62137) ->
    (match {NULL} with
    | reflL_13  => __62137)

#[program]
def rwrLL_48 :=
  fun rwr_62138 {A_62139} -> {m_62140} -> {n_62141} -> {B_62142} ->
  {__62143} -> (__62144) ->
    (match {NULL} with
    | reflL_13  => __62144)

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_15 where
| justUU_18 of layout[R]

#[program]
inductive singUL_14 where
| justUL_17 of layout[R]

#[program]
inductive singLU_13 where


#[program]
inductive singLL_12 where
| justLL_15 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_62145 {A_62146} -> {x_62147} -> (__62148) ->
    (match __62148 with
    | justUU_18 m_62149 => m_62149)

#[program]
def sing_elimUL_64 :=
  fun sing_elim_62150 {A_62151} -> {x_62152} -> (__62153) ->
    (match __62153 with
    | justUL_17 m_62154 => m_62154)

#[program]
def sing_elimLU_63 :=
  fun sing_elim_62155 {A_62156} -> {x_62157} -> (__62158) ->
    (match __62158 with
    )

#[program]
def sing_elimLL_62 :=
  fun sing_elim_62159 {A_62160} -> {x_62161} -> (__62162) ->
    (match __62162 with
    | justLL_15 m_62163 => m_62163)

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive baseU_17 where
| ttU_20 of layout[]

#[program]
inductive baseL_16 where
| ttL_19 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_62164 (__62165) ->
    (match __62165 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_62166 (__62167) -> (__62168) ->
    (match __62167 with
    | true_4  =>
      (match __62168 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_62169 (__62170) -> (__62171) ->
    (match __62170 with
    | true_4  => true_4
    | false_5  =>
      (match __62171 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_62172 (__62173) -> (__62174) ->
    (match __62173 with
    | true_4  =>
      (match __62174 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __62174 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_62175 (__62176) -> (__62177) ->
    (match __62176 with
    | zero_6  => true_4
    | succ_7 n_62178 =>
      (match __62177 with
      | zero_6  => false_5 | succ_7 n_62179 => ((lte_62175) n_62178 n_62179)))

#[program]
def lt_16 :=
  fun lt_62180 (x_62181) -> (y_62182) ->
    ((lte_15) (succ_7 x_62181) y_62182)

#[program]
def pred_17 :=
  fun pred_62183 (__62184) ->
    (match __62184 with
    | zero_6  => zero_6 | succ_7 n_62185 => n_62185)

#[program]
def add_18 :=
  fun add_62186 (__62187) -> (__62188) ->
    (match __62187 with
    | zero_6  => __62188
    | succ_7 n_62189 => (succ_7 ((add_62186) n_62189 __62188)))

#[program]
def sub_19 :=
  fun sub_62190 (__62191) -> (__62192) ->
    (match __62192 with
    | zero_6  => __62191
    | succ_7 n_62193 => ((sub_62190) ((pred_17) __62191) n_62193))

#[program]
def mul_20 :=
  fun mul_62194 (__62195) -> (__62196) ->
    (match __62195 with
    | zero_6  => zero_6
    | succ_7 n_62197 => ((add_18) __62196 ((mul_62194) n_62197 __62196)))

#[program]
def div_21 :=
  fun div_62198 (x_62199) -> (y_62200) ->
    (match ((lt_16) x_62199 y_62200) with
    | true_4  => zero_6
    | false_5  =>
      let loop_62201 :=
        fun loop_62202 (x_62203) -> (y_62204) ->
          (match ((sub_19) x_62203 ((pred_17) y_62204)) with
          | zero_6  => zero_6
          | succ_7 n_62205 => (succ_7 ((loop_62202) n_62205 y_62204)))
      in ((loop_62201) x_62199 y_62200))

#[program]
def rem_22 :=
  fun rem_62206 (x_62207) -> (y_62208) ->
    ((sub_19) x_62207 ((mul_20) ((div_21) x_62207 y_62208) y_62208))

#[program]
inductive listUU_21 where
| nilUU_27 of layout[]
| consUU_28 of layout[R, R]

#[program]
inductive listUL_20 where
| nilUL_25 of layout[]
| consUL_26 of layout[R, R]

#[program]
inductive listLU_19 where
| nilLU_23 of layout[]

#[program]
inductive listLL_18 where
| nilLL_21 of layout[]
| consLL_22 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_62209 {A_62210} -> (f_62211) -> (__62212) ->
    (match __62212 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_62213 tl_62214 =>
      let __62215 := ((f_62211) hd_62213) in
      ((free_list_62209) NULL f_62211 tl_62214))

#[program]
def free_listUL_72 :=
  fun free_list_62216 {A_62217} -> (f_62218) -> (__62219) ->
    (match __62219 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_62220 tl_62221 =>
      let __62222 := ((f_62218) hd_62220) in
      ((free_list_62216) NULL f_62218 tl_62221))

#[program]
def free_listLL_70 :=
  fun free_list_62223 {A_62224} -> (f_62225) -> (__62226) ->
    (match __62226 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_62227 tl_62228 =>
      let __62229 := ((f_62225) hd_62227) in
      ((free_list_62223) NULL f_62225 tl_62228))

#[program]
inductive existsUU_25 where
| exUU_32 of layout[R, N]

#[program]
inductive existsUL_24 where
| exUL_31 of layout[R, N]

#[program]
inductive existsLU_23 where
| exLU_30 of layout[R, N]

#[program]
inductive existsLL_22 where
| exLL_29 of layout[R, N]

#[program]
inductive exists0UU_29 where
| ex0UU_36 of layout[N, R]

#[program]
inductive exists0UL_28 where
| ex0UL_35 of layout[N, R]

#[program]
inductive exists0LU_27 where
| ex0LU_34 of layout[N, R]

#[program]
inductive exists0LL_26 where
| ex0LL_33 of layout[N, R]

#[program]
inductive exists1UU_33 where
| ex1UU_40 of layout[R, R]

#[program]
inductive exists1UL_32 where
| ex1UL_39 of layout[R, R]

#[program]
inductive exists1LU_31 where
| ex1LU_38 of layout[R, R]

#[program]
inductive exists1LL_30 where
| ex1LL_37 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_26 :=
  fun pow_62230 (x_62231) -> (y_62232) ->
    let loop_62233 :=
      fun loop_62234 (acc_62235) -> (y_62236) ->
        (match (__lte__ y_62236 0) with
        | true_4  => acc_62235
        | false_5  =>
          ((loop_62234) (__mul__ x_62231 acc_62235) (__sub__ y_62236 1)))
    in ((loop_62233) 1 y_62232)

#[program]
def powm_27 :=
  fun powm_62237 (x_62238) -> (y_62239) -> (m_62240) ->
    let loop_62241 :=
      fun loop_62242 (acc_62243) -> (y_62244) ->
        (match (__lte__ y_62244 0) with
        | true_4  => acc_62243
        | false_5  =>
          ((loop_62242)
            (__mod__ (__mul__ x_62238 acc_62243) m_62240) (__sub__ y_62244 1)))
    in ((loop_62241) 1 y_62239)

#[program]
def ord_28 := fun ord_62245 (c_62246) ->
                (__ord__ c_62246)

#[program]
def chr_29 := fun chr_62247 (i_62248) ->
                (__chr__ i_62248)

#[program]
def str_30 := fun str_62249 (c_62250) ->
                (__push__ "" c_62250)

#[program]
def strlen_31 := fun strlen_62251 (s_62252) ->
                   (__size__ s_62252)

#[program]
def string_of_int_32 :=
  fun string_of_int_62253 (i_62254) ->
    let aux_62255 :=
      fun aux_62256 (i_62257) ->
        (match (__lte__ 10 i_62257) with
        | true_4  =>
          let r_62258 := (__mod__ i_62257 10) in
          let i_62259 := (__div__ i_62257 10) in
          (__push__ ((aux_62256) i_62259)
            ((chr_29) (__add__ r_62258 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_62257 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_62254) with
    | true_4  => ((aux_62255) i_62254)
    | false_5  => (__cat__ "~" ((aux_62255) (__neg__ i_62254))))

#[program]
def gcd_33 :=
  fun gcd_62260 (a_62261) -> (b_62262) ->
    (match (__lte__ b_62262 0) with
    | true_4  => a_62261
    | false_5  => ((gcd_62260) b_62262 (__mod__ a_62261 b_62262)))

#[program]
def lcm_34 :=
  fun lcm_62263 (a_62264) -> (b_62265) ->
    (__div__ (__mul__ a_62264 b_62265) ((gcd_33) a_62264 b_62265))

#[logical]
def coprime_35 := NULL

#[logical]
def RSA_36 := NULL

#[logical]
def RSA_ch_37 := NULL

#[logical]
def RSA_hc_38 := NULL

#[program]
def server_39 :=
  fun server_62266 (ch_62267) ->
    let x_62268 := 61 in
    let y_62269 := 53 in
    let n_62270 := (__mul__ x_62268 y_62269) in
    let tot_62271 := ((lcm_34) (__sub__ x_62268 1) (__sub__ y_62269 1)) in
    let e_62272 := 17 in
    let d_62273 := 413 in
    let* ch_62274 := ((send[N,U] ch_62267) NULL) in
    let* ch_62275 := ((send[N,U] ch_62274) NULL) in
    let* ch_62276 := ((send[R,U] ch_62275) n_62270) in
    let* ch_62277 := ((send[N,U] ch_62276) NULL) in
    let* ch_62278 := ((send[N,U] ch_62277) NULL) in
    let* ch_62279 := ((send[N,U] ch_62278) NULL) in
    let* ch_62280 := ((send[R,U] ch_62279) e_62272) in
    let* ch_62281 := ((send[N,U] ch_62280) NULL) in
    let* ch_62282 := ((send[N,U] ch_62281) NULL) in
    let* ch_62283 := ((send[N,U] ch_62282) NULL) in
    let* _62284 := recv[N,U] ch_62283 in
    (match _62284 with
    | ex0UL_35 m_62285 n_62286 =>
      let* _62287 := recv[R,U] n_62286 in
      (match _62287 with
      | ex1UL_39 m_62288 n_62289 =>
        let* _62290 := recv[N,U] n_62289 in
        (match _62290 with
        | ex0UL_35 m_62291 n_62292 =>
          let P1_62293 := ((powm_27) m_62288 d_62273 n_62270) in
          let* __62294 :=
            print
              (__cat__
                (__cat__ "server received: " ((string_of_int_32) P1_62293))
                "\n")
          in close[true] n_62292)))

#[program]
def client_40 :=
  fun client_62295 (ch_62296) ->
    let P0_62297 := 123 in
    let* _62298 := recv[N,U] ch_62296 in
    (match _62298 with
    | ex0UL_35 m_62299 n_62300 =>
      let* _62301 := recv[N,U] n_62300 in
      (match _62301 with
      | ex0UL_35 m_62302 n_62303 =>
        let* _62304 := recv[R,U] n_62303 in
        (match _62304 with
        | ex1UL_39 m_62305 n_62306 =>
          let* _62307 := recv[N,U] n_62306 in
          (match _62307 with
          | ex0UL_35 m_62308 n_62309 =>
            let* _62310 := recv[N,U] n_62309 in
            (match _62310 with
            | ex0UL_35 m_62311 n_62312 =>
              let* _62313 := recv[N,U] n_62312 in
              (match _62313 with
              | ex0UL_35 m_62314 n_62315 =>
                let* _62316 := recv[R,U] n_62315 in
                (match _62316 with
                | ex1UL_39 m_62317 n_62318 =>
                  let* _62319 := recv[N,U] n_62318 in
                  (match _62319 with
                  | ex0UL_35 m_62320 n_62321 =>
                    let* _62322 := recv[N,U] n_62321 in
                    (match _62322 with
                    | ex0UL_35 m_62323 n_62324 =>
                      let* _62325 := recv[N,U] n_62324 in
                      (match _62325 with
                      | ex0UL_35 m_62326 n_62327 =>
                        let* ch_62328 := ((send[N,U] n_62327) NULL) in
                        let* ch_62329 :=
                          ((send[R,U] ch_62328)
                            ((powm_27) P0_62297 m_62317 m_62305))
                        in
                        let* ch_62330 := ((send[N,U] ch_62329) NULL) in
                        close[false] ch_62330))))))))))

#[program]
def main :=
  let* c_62331 := fork fun _62332 (_62333) -o
                         ((server_39) _62333)
  in
  let* c0_62334 :=
    fork
      fun _62335 (_62336) -o
        let* _62337 := recv[R,L] _62336 in
        (match _62337 with
        | ex1LL_37 m_62338 n_62339 =>
          let* __62340 := close[true] n_62339 in ((client_40) m_62338))
  in let* c0_62341 := ((send[R,L] c0_62334) c_62331) in close[false] c0_62341

[trans12 success]

-----------------------------------------

#[program]
def idU_43 := fun id_62601 (A_62602) -> (m_62603) ->
                m_62603

#[program]
def idL_42 := fun id_62604 (A_62605) -> (m_62606) ->
                m_62606

#[logical]
inductive eqU_11 where
| reflU_14 of layout[]

#[logical]
inductive eqL_10 where
| reflL_13 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_62607 {A_62608} -> {m_62609} -> {n_62610} -> {B_62611} ->
  {__62612} -> (__62613) ->
    __62613

#[program]
def rwlUL_46 :=
  fun rwl_62614 {A_62615} -> {m_62616} -> {n_62617} -> {B_62618} ->
  {__62619} -> (__62620) ->
    __62620

#[program]
def rwlLU_45 :=
  fun rwl_62621 {A_62622} -> {m_62623} -> {n_62624} -> {B_62625} ->
  {__62626} -> (__62627) ->
    __62627

#[program]
def rwlLL_44 :=
  fun rwl_62628 {A_62629} -> {m_62630} -> {n_62631} -> {B_62632} ->
  {__62633} -> (__62634) ->
    __62634

#[program]
def rwrUU_51 :=
  fun rwr_62635 {A_62636} -> {m_62637} -> {n_62638} -> {B_62639} ->
  {__62640} -> (__62641) ->
    __62641

#[program]
def rwrUL_50 :=
  fun rwr_62642 {A_62643} -> {m_62644} -> {n_62645} -> {B_62646} ->
  {__62647} -> (__62648) ->
    __62648

#[program]
def rwrLU_49 :=
  fun rwr_62649 {A_62650} -> {m_62651} -> {n_62652} -> {B_62653} ->
  {__62654} -> (__62655) ->
    __62655

#[program]
def rwrLL_48 :=
  fun rwr_62656 {A_62657} -> {m_62658} -> {n_62659} -> {B_62660} ->
  {__62661} -> (__62662) ->
    __62662

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_15 where
| justUU_18 of layout[R]

#[program]
inductive singUL_14 where
| justUL_17 of layout[R]

#[program]
inductive singLU_13 where


#[program]
inductive singLL_12 where
| justLL_15 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_62663 {A_62664} -> {x_62665} -> (__62666) ->
    (match __62666 with
    | justUU_18 m_62667 => m_62667)

#[program]
def sing_elimUL_64 :=
  fun sing_elim_62668 {A_62669} -> {x_62670} -> (__62671) ->
    (match __62671 with
    | justUL_17 m_62672 => m_62672)

#[program]
def sing_elimLU_63 :=
  fun sing_elim_62673 {A_62674} -> {x_62675} -> (__62676) ->
    !!

#[program]
def sing_elimLL_62 :=
  fun sing_elim_62677 {A_62678} -> {x_62679} -> (__62680) ->
    (match __62680 with
    | justLL_15 m_62681 => m_62681)

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive baseU_17 where
| ttU_20 of layout[]

#[program]
inductive baseL_16 where
| ttL_19 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_62682 (__62683) ->
    (match __62683 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_62684 (__62685) -> (__62686) ->
    (match __62685 with
    | true_4  =>
      (match __62686 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_62687 (__62688) -> (__62689) ->
    (match __62688 with
    | true_4  => true_4
    | false_5  =>
      (match __62689 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_62690 (__62691) -> (__62692) ->
    (match __62691 with
    | true_4  =>
      (match __62692 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __62692 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_62693 (__62694) -> (__62695) ->
    (match __62694 with
    | zero_6  => true_4
    | succ_7 n_62696 =>
      (match __62695 with
      | zero_6  => false_5 | succ_7 n_62697 => ((lte_62693) n_62696 n_62697)))

#[program]
def lt_16 :=
  fun lt_62698 (x_62699) -> (y_62700) ->
    ((lte_15) (succ_7 x_62699) y_62700)

#[program]
def pred_17 :=
  fun pred_62701 (__62702) ->
    (match __62702 with
    | zero_6  => zero_6 | succ_7 n_62703 => n_62703)

#[program]
def add_18 :=
  fun add_62704 (__62705) -> (__62706) ->
    (match __62705 with
    | zero_6  => __62706
    | succ_7 n_62707 => (succ_7 ((add_62704) n_62707 __62706)))

#[program]
def sub_19 :=
  fun sub_62708 (__62709) -> (__62710) ->
    (match __62710 with
    | zero_6  => __62709
    | succ_7 n_62711 => ((sub_62708) ((pred_17) __62709) n_62711))

#[program]
def mul_20 :=
  fun mul_62712 (__62713) -> (__62714) ->
    (match __62713 with
    | zero_6  => zero_6
    | succ_7 n_62715 => ((add_18) __62714 ((mul_62712) n_62715 __62714)))

#[program]
def div_21 :=
  fun div_62716 (x_62717) -> (y_62718) ->
    (match ((lt_16) x_62717 y_62718) with
    | true_4  => zero_6
    | false_5  =>
      let loop_62719 :=
        fun loop_62720 (x_62721) -> (y_62722) ->
          (match ((sub_19) x_62721 ((pred_17) y_62722)) with
          | zero_6  => zero_6
          | succ_7 n_62723 => (succ_7 ((loop_62720) n_62723 y_62722)))
      in ((loop_62719) x_62717 y_62718))

#[program]
def rem_22 :=
  fun rem_62724 (x_62725) -> (y_62726) ->
    ((sub_19) x_62725 ((mul_20) ((div_21) x_62725 y_62726) y_62726))

#[program]
inductive listUU_21 where
| nilUU_27 of layout[]
| consUU_28 of layout[R, R]

#[program]
inductive listUL_20 where
| nilUL_25 of layout[]
| consUL_26 of layout[R, R]

#[program]
inductive listLU_19 where
| nilLU_23 of layout[]

#[program]
inductive listLL_18 where
| nilLL_21 of layout[]
| consLL_22 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_62727 {A_62728} -> (f_62729) -> (__62730) ->
    (match __62730 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_62731 tl_62732 =>
      let __62733 := ((f_62729) hd_62731) in
      ((free_list_62727) NULL f_62729 tl_62732))

#[program]
def free_listUL_72 :=
  fun free_list_62734 {A_62735} -> (f_62736) -> (__62737) ->
    (match __62737 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_62738 tl_62739 =>
      let __62740 := ((f_62736) hd_62738) in
      ((free_list_62734) NULL f_62736 tl_62739))

#[program]
def free_listLL_70 :=
  fun free_list_62741 {A_62742} -> (f_62743) -> (__62744) ->
    (match __62744 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_62745 tl_62746 =>
      let __62747 := ((f_62743) hd_62745) in
      ((free_list_62741) NULL f_62743 tl_62746))

#[program]
inductive existsUU_25 where
| exUU_32 of layout[R, N]

#[program]
inductive existsUL_24 where
| exUL_31 of layout[R, N]

#[program]
inductive existsLU_23 where
| exLU_30 of layout[R, N]

#[program]
inductive existsLL_22 where
| exLL_29 of layout[R, N]

#[program]
inductive exists0UU_29 where
| ex0UU_36 of layout[N, R]

#[program]
inductive exists0UL_28 where
| ex0UL_35 of layout[N, R]

#[program]
inductive exists0LU_27 where
| ex0LU_34 of layout[N, R]

#[program]
inductive exists0LL_26 where
| ex0LL_33 of layout[N, R]

#[program]
inductive exists1UU_33 where
| ex1UU_40 of layout[R, R]

#[program]
inductive exists1UL_32 where
| ex1UL_39 of layout[R, R]

#[program]
inductive exists1LU_31 where
| ex1LU_38 of layout[R, R]

#[program]
inductive exists1LL_30 where
| ex1LL_37 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_26 :=
  fun pow_62748 (x_62749) -> (y_62750) ->
    let loop_62751 :=
      fun loop_62752 (acc_62753) -> (y_62754) ->
        (match (__lte__ y_62754 0) with
        | true_4  => acc_62753
        | false_5  =>
          ((loop_62752) (__mul__ x_62749 acc_62753) (__sub__ y_62754 1)))
    in ((loop_62751) 1 y_62750)

#[program]
def powm_27 :=
  fun powm_62755 (x_62756) -> (y_62757) -> (m_62758) ->
    let loop_62759 :=
      fun loop_62760 (acc_62761) -> (y_62762) ->
        (match (__lte__ y_62762 0) with
        | true_4  => acc_62761
        | false_5  =>
          ((loop_62760)
            (__mod__ (__mul__ x_62756 acc_62761) m_62758) (__sub__ y_62762 1)))
    in ((loop_62759) 1 y_62757)

#[program]
def ord_28 := fun ord_62763 (c_62764) ->
                (__ord__ c_62764)

#[program]
def chr_29 := fun chr_62765 (i_62766) ->
                (__chr__ i_62766)

#[program]
def str_30 := fun str_62767 (c_62768) ->
                (__push__ "" c_62768)

#[program]
def strlen_31 := fun strlen_62769 (s_62770) ->
                   (__size__ s_62770)

#[program]
def string_of_int_32 :=
  fun string_of_int_62771 (i_62772) ->
    let aux_62773 :=
      fun aux_62774 (i_62775) ->
        (match (__lte__ 10 i_62775) with
        | true_4  =>
          let r_62776 := (__mod__ i_62775 10) in
          let i_62777 := (__div__ i_62775 10) in
          (__push__ ((aux_62774) i_62777)
            ((chr_29) (__add__ r_62776 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_62775 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_62772) with
    | true_4  => ((aux_62773) i_62772)
    | false_5  => (__cat__ "~" ((aux_62773) (__neg__ i_62772))))

#[program]
def gcd_33 :=
  fun gcd_62778 (a_62779) -> (b_62780) ->
    (match (__lte__ b_62780 0) with
    | true_4  => a_62779
    | false_5  => ((gcd_62778) b_62780 (__mod__ a_62779 b_62780)))

#[program]
def lcm_34 :=
  fun lcm_62781 (a_62782) -> (b_62783) ->
    (__div__ (__mul__ a_62782 b_62783) ((gcd_33) a_62782 b_62783))

#[logical]
def coprime_35 := NULL

#[logical]
def RSA_36 := NULL

#[logical]
def RSA_ch_37 := NULL

#[logical]
def RSA_hc_38 := NULL

#[program]
def server_39 :=
  fun server_62784 (ch_62785) ->
    let x_62786 := 61 in
    let y_62787 := 53 in
    let n_62788 := (__mul__ x_62786 y_62787) in
    let tot_62789 := ((lcm_34) (__sub__ x_62786 1) (__sub__ y_62787 1)) in
    let e_62790 := 17 in
    let d_62791 := 413 in
    let* ch_62792 := ((send[N,U] ch_62785) NULL) in
    let* ch_62793 := ((send[N,U] ch_62792) NULL) in
    let* ch_62794 := ((send[R,U] ch_62793) n_62788) in
    let* ch_62795 := ((send[N,U] ch_62794) NULL) in
    let* ch_62796 := ((send[N,U] ch_62795) NULL) in
    let* ch_62797 := ((send[N,U] ch_62796) NULL) in
    let* ch_62798 := ((send[R,U] ch_62797) e_62790) in
    let* ch_62799 := ((send[N,U] ch_62798) NULL) in
    let* ch_62800 := ((send[N,U] ch_62799) NULL) in
    let* ch_62801 := ((send[N,U] ch_62800) NULL) in
    let* _62802 := recv[N,U] ch_62801 in
    (match _62802 with
    | ex0UL_35 m_62803 n_62804 =>
      let* _62805 := recv[R,U] n_62804 in
      (match _62805 with
      | ex1UL_39 m_62806 n_62807 =>
        let* _62808 := recv[N,U] n_62807 in
        (match _62808 with
        | ex0UL_35 m_62809 n_62810 =>
          let P1_62811 := ((powm_27) m_62806 d_62791 n_62788) in
          let* __62812 :=
            print
              (__cat__
                (__cat__ "server received: " ((string_of_int_32) P1_62811))
                "\n")
          in close[true] n_62810)))

#[program]
def client_40 :=
  fun client_62813 (ch_62814) ->
    let P0_62815 := 123 in
    let* _62816 := recv[N,U] ch_62814 in
    (match _62816 with
    | ex0UL_35 m_62817 n_62818 =>
      let* _62819 := recv[N,U] n_62818 in
      (match _62819 with
      | ex0UL_35 m_62820 n_62821 =>
        let* _62822 := recv[R,U] n_62821 in
        (match _62822 with
        | ex1UL_39 m_62823 n_62824 =>
          let* _62825 := recv[N,U] n_62824 in
          (match _62825 with
          | ex0UL_35 m_62826 n_62827 =>
            let* _62828 := recv[N,U] n_62827 in
            (match _62828 with
            | ex0UL_35 m_62829 n_62830 =>
              let* _62831 := recv[N,U] n_62830 in
              (match _62831 with
              | ex0UL_35 m_62832 n_62833 =>
                let* _62834 := recv[R,U] n_62833 in
                (match _62834 with
                | ex1UL_39 m_62835 n_62836 =>
                  let* _62837 := recv[N,U] n_62836 in
                  (match _62837 with
                  | ex0UL_35 m_62838 n_62839 =>
                    let* _62840 := recv[N,U] n_62839 in
                    (match _62840 with
                    | ex0UL_35 m_62841 n_62842 =>
                      let* _62843 := recv[N,U] n_62842 in
                      (match _62843 with
                      | ex0UL_35 m_62844 n_62845 =>
                        let* ch_62846 := ((send[N,U] n_62845) NULL) in
                        let* ch_62847 :=
                          ((send[R,U] ch_62846)
                            ((powm_27) P0_62815 m_62835 m_62823))
                        in
                        let* ch_62848 := ((send[N,U] ch_62847) NULL) in
                        close[false] ch_62848))))))))))

#[program]
def main :=
  let* c_62849 := fork fun _62850 (_62851) -o
                         ((server_39) _62851)
  in
  let* c0_62852 :=
    fork
      fun _62853 (_62854) -o
        let* _62855 := recv[R,L] _62854 in
        (match _62855 with
        | ex1LL_37 m_62856 n_62857 =>
          let* __62858 := close[true] n_62857 in ((client_40) m_62856))
  in let* c0_62859 := ((send[R,L] c0_62852) c_62849) in close[false] c0_62859

[trans2e success]

-----------------------------------------

def idU_43 := fun id_63214 (A_63215) -> (m_63216) -> m_63216

def idL_42 := fun id_63217 (A_63218) -> (m_63219) -> m_63219

def rwlUU_47 :=
  fun rwl_63220 (A_63221) -> (m_63222) -> (n_63223) -> (B_63224) ->
  (__63225) -> (__63226) -> __63226

def rwlUL_46 :=
  fun rwl_63227 (A_63228) -> (m_63229) -> (n_63230) -> (B_63231) ->
  (__63232) -> (__63233) -> __63233

def rwlLU_45 :=
  fun rwl_63234 (A_63235) -> (m_63236) -> (n_63237) -> (B_63238) ->
  (__63239) -> (__63240) -> __63240

def rwlLL_44 :=
  fun rwl_63241 (A_63242) -> (m_63243) -> (n_63244) -> (B_63245) ->
  (__63246) -> (__63247) -> __63247

def rwrUU_51 :=
  fun rwr_63248 (A_63249) -> (m_63250) -> (n_63251) -> (B_63252) ->
  (__63253) -> (__63254) -> __63254

def rwrUL_50 :=
  fun rwr_63255 (A_63256) -> (m_63257) -> (n_63258) -> (B_63259) ->
  (__63260) -> (__63261) -> __63261

def rwrLU_49 :=
  fun rwr_63262 (A_63263) -> (m_63264) -> (n_63265) -> (B_63266) ->
  (__63267) -> (__63268) -> __63268

def rwrLL_48 :=
  fun rwr_63269 (A_63270) -> (m_63271) -> (n_63272) -> (B_63273) ->
  (__63274) -> (__63275) -> __63275

def sing_elimUU_65 :=
  fun sing_elim_63276 (A_63277) -> (x_63278) -> (__63279) -> __63279

def sing_elimUL_64 :=
  fun sing_elim_63280 (A_63281) -> (x_63282) -> (__63283) -> __63283

def sing_elimLU_63 :=
  fun sing_elim_63284 (A_63285) -> (x_63286) -> (__63287) -> !!

def sing_elimLL_62 :=
  fun sing_elim_63288 (A_63289) -> (x_63290) -> (__63291) -> __63291

def not_11 :=
  fun not_63292 (__63293) ->
    (match __63293 with
    | true_4 => false_5 | false_5 => true_4)

def and_12 :=
  fun and_63294 (__63295) -> (__63296) ->
    (match __63295 with
    | true_4 => (match __63296 with
                | true_4 => true_4 | false_5 => false_5)
    | false_5 => false_5)

def or_13 :=
  fun or_63297 (__63298) -> (__63299) ->
    (match __63298 with
    | true_4 => true_4
    | false_5 => (match __63299 with
                 | true_4 => true_4 | false_5 => false_5))

def xor_14 :=
  fun xor_63300 (__63301) -> (__63302) ->
    (match __63301 with
    | true_4 => (match __63302 with
                | true_4 => false_5 | false_5 => true_4)
    | false_5 => (match __63302 with
                 | true_4 => true_4 | false_5 => false_5))

def lte_15 :=
  fun lte_63303 (__63304) -> (__63305) ->
    (match __63304 with
    | zero_6  => true_4
    | succ_7 n_63306 =>
      (match __63305 with
      | zero_6  => false_5 | succ_7 n_63307 => ((lte_63303) n_63306 n_63307)))

def lt_16 :=
  fun lt_63308 (x_63309) -> (y_63310) -> ((lte_15) (succ_7 x_63309) y_63310)

def pred_17 :=
  fun pred_63311 (__63312) ->
    (match __63312 with
    | zero_6  => (zero_6 ) | succ_7 n_63313 => n_63313)

def add_18 :=
  fun add_63314 (__63315) -> (__63316) ->
    (match __63315 with
    | zero_6  => __63316
    | succ_7 n_63317 => (succ_7 ((add_63314) n_63317 __63316)))

def sub_19 :=
  fun sub_63318 (__63319) -> (__63320) ->
    (match __63320 with
    | zero_6  => __63319
    | succ_7 n_63321 => ((sub_63318) ((pred_17) __63319) n_63321))

def mul_20 :=
  fun mul_63322 (__63323) -> (__63324) ->
    (match __63323 with
    | zero_6  => (zero_6 )
    | succ_7 n_63325 => ((add_18) __63324 ((mul_63322) n_63325 __63324)))

def div_21 :=
  fun div_63326 (x_63327) -> (y_63328) ->
    (match ((lt_16) x_63327 y_63328) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_63329 :=
        fun loop_63330 (x_63331) -> (y_63332) ->
          (match ((sub_19) x_63331 ((pred_17) y_63332)) with
          | zero_6  => (zero_6 )
          | succ_7 n_63333 => (succ_7 ((loop_63330) n_63333 y_63332)))
      in ((loop_63329) x_63327 y_63328))

def rem_22 :=
  fun rem_63334 (x_63335) -> (y_63336) ->
    ((sub_19) x_63335 ((mul_20) ((div_21) x_63335 y_63336) y_63336))

def free_listUU_73 :=
  fun free_list_63337 (A_63338) -> (f_63339) -> (__63340) ->
    (match __63340 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_63341 tl_63342 =>
      let __63343 := ((f_63339) hd_63341) in
      ((free_list_63337) NULL f_63339 tl_63342))

def free_listUL_72 :=
  fun free_list_63344 (A_63345) -> (f_63346) -> (__63347) ->
    (match __63347 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_63348 tl_63349 =>
      let __63350 := ((f_63346) hd_63348) in
      ((free_list_63344) NULL f_63346 tl_63349))

def free_listLL_70 :=
  fun free_list_63351 (A_63352) -> (f_63353) -> (__63354) ->
    (match __63354 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_63355 tl_63356 =>
      let __63357 := ((f_63353) hd_63355) in
      ((free_list_63351) NULL f_63353 tl_63356))

def pow_26 :=
  fun pow_63358 (x_63359) -> (y_63360) ->
    let loop_63361 :=
      fun loop_63362 (acc_63363) -> (y_63364) ->
        (match (__lte__ y_63364 0) with
        | true_4 => acc_63363
        | false_5 =>
          ((loop_63362) (__mul__ x_63359 acc_63363) (__sub__ y_63364 1)))
    in ((loop_63361) 1 y_63360)

def powm_27 :=
  fun powm_63365 (x_63366) -> (y_63367) -> (m_63368) ->
    let loop_63369 :=
      fun loop_63370 (acc_63371) -> (y_63372) ->
        (match (__lte__ y_63372 0) with
        | true_4 => acc_63371
        | false_5 =>
          ((loop_63370)
            (__mod__ (__mul__ x_63366 acc_63371) m_63368) (__sub__ y_63372 1)))
    in ((loop_63369) 1 y_63367)

def ord_28 := fun ord_63373 (c_63374) -> (__ord__ c_63374)

def chr_29 := fun chr_63375 (i_63376) -> (__chr__ i_63376)

def str_30 := fun str_63377 (c_63378) -> (__push__ "" c_63378)

def strlen_31 := fun strlen_63379 (s_63380) -> (__size__ s_63380)

def string_of_int_32 :=
  fun string_of_int_63381 (i_63382) ->
    let aux_63383 :=
      fun aux_63384 (i_63385) ->
        (match (__lte__ 10 i_63385) with
        | true_4 =>
          let r_63386 := (__mod__ i_63385 10) in
          let i_63387 := (__div__ i_63385 10) in
          (__push__ ((aux_63384) i_63387)
            ((chr_29) (__add__ r_63386 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_63385 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_63382) with
    | true_4 => ((aux_63383) i_63382)
    | false_5 => (__cat__ "~" ((aux_63383) (__neg__ i_63382))))

def gcd_33 :=
  fun gcd_63388 (a_63389) -> (b_63390) ->
    (match (__lte__ b_63390 0) with
    | true_4 => a_63389
    | false_5 => ((gcd_63388) b_63390 (__mod__ a_63389 b_63390)))

def lcm_34 :=
  fun lcm_63391 (a_63392) -> (b_63393) ->
    (__div__ (__mul__ a_63392 b_63393) ((gcd_33) a_63392 b_63393))

def server_39 :=
  fun server_63394 (ch_63395) ->
    let x_63396 := 61 in
    let y_63397 := 53 in
    let n_63398 := (__mul__ x_63396 y_63397) in
    let tot_63399 := ((lcm_34) (__sub__ x_63396 1) (__sub__ y_63397 1)) in
    let e_63400 := 17 in
    let d_63401 := 413 in
    lazy(let ch_63402 := force(((lam (x_63403) -> lazy(ch_63395)) NULL)) in
         let ch_63404 := force(((lam (x_63405) -> lazy(ch_63402)) NULL)) in
         let ch_63406 :=
           force(((lam (x_63407) -> lazy(send(ch_63404, x_63407))) n_63398))
         in
         let ch_63408 := force(((lam (x_63409) -> lazy(ch_63406)) NULL)) in
         let ch_63410 := force(((lam (x_63411) -> lazy(ch_63408)) NULL)) in
         let ch_63412 := force(((lam (x_63413) -> lazy(ch_63410)) NULL)) in
         let ch_63414 :=
           force(((lam (x_63415) -> lazy(send(ch_63412, x_63415))) e_63400))
         in
         let ch_63416 := force(((lam (x_63417) -> lazy(ch_63414)) NULL)) in
         let ch_63418 := force(((lam (x_63419) -> lazy(ch_63416)) NULL)) in
         let ch_63420 := force(((lam (x_63421) -> lazy(ch_63418)) NULL)) in
         let _63422 := force(lazy(ch_63420)) in
         force(lazy(let _63423 := force(lazy(recv[U](_63422))) in
                    force((match _63423 with
                          | ex1UL_39 m_63424 n_63425 =>
                            lazy(let _63426 := force(lazy(n_63425)) in
                                 force(let P1_63427 :=
                                         ((powm_27) m_63424 d_63401 n_63398)
                                       in
                                       lazy(let __63428 :=
                                              force(lazy(print
                                                           (__cat__
                                                             (__cat__
                                                               "server received: "
                                                               ((string_of_int_32)
                                                                 P1_63427))
                                                             "\n")))
                                            in
                                            force(lazy(close[true] _63426))))))))))

def client_40 :=
  fun client_63429 (ch_63430) ->
    let P0_63431 := 123 in
    lazy(let _63432 := force(lazy(ch_63430)) in
         force(lazy(let _63433 := force(lazy(_63432)) in
                    force(lazy(let _63434 := force(lazy(recv[U](_63433))) in
                               force((match _63434 with
                                     | ex1UL_39 m_63435 n_63436 =>
                                       lazy(let _63437 :=
                                              force(lazy(n_63436))
                                            in
                                            force(lazy(let _63438 :=
                                                         force(lazy(_63437))
                                                       in
                                                       force(lazy(let _63439 :=
                                                                    force(
                                                                    lazy(
                                                                    _63438))
                                                                  in
                                                                  force(
                                                                  lazy(
                                                                  let _63440 :=
                                                                    force(
                                                                    lazy(
                                                                    recv[U](_63439)))
                                                                  in
                                                                  force(
                                                                  (match _63440 with
                                                                  | ex1UL_39 m_63441
                                                                    n_63442 =>
                                                                    lazy(
                                                                    let _63443 :=
                                                                    force(
                                                                    lazy(
                                                                    n_63442))
                                                                    in
                                                                    force(
                                                                    lazy(
                                                                    let _63444 :=
                                                                    force(
                                                                    lazy(
                                                                    _63443))
                                                                    in
                                                                    force(
                                                                    lazy(
                                                                    let _63445 :=
                                                                    force(
                                                                    lazy(
                                                                    _63444))
                                                                    in
                                                                    force(
                                                                    lazy(
                                                                    let ch_63446 :=
                                                                    force(
                                                                    ((
                                                                    lam (x_63447) ->
                                                                    lazy(
                                                                    _63445))
                                                                    NULL)) in
                                                                    let ch_63448 :=
                                                                    force(
                                                                    ((
                                                                    lam (x_63449) ->
                                                                    lazy(
                                                                    send(ch_63446, x_63449)))
                                                                    ((powm_27)
                                                                    P0_63431
                                                                    m_63441
                                                                    m_63435)))
                                                                    in
                                                                    let ch_63450 :=
                                                                    force(
                                                                    ((
                                                                    lam (x_63451) ->
                                                                    lazy(
                                                                    ch_63448))
                                                                    NULL)) in
                                                                    force(
                                                                    lazy(
                                                                    close[false]
                                                                    ch_63450)))))))))))))))))))))))))

def main :=
  lazy(let c_63452 :=
         force(lazy(fork fun _63453 (_63454) -o ((server_39) _63454)))
       in
       let c0_63455 :=
         force(lazy(fork
                      fun _63456 (_63457) -o
                        lazy(let _63458 := force(lazy(recv[L](_63457))) in
                             force((match _63458 with
                                   | ex1LL_37 m_63459 n_63460 =>
                                     lazy(let __63461 :=
                                            force(lazy(close[true] n_63460))
                                          in force(((client_40) m_63459))))))))
       in
       let c0_63462 :=
         force(((lam (x_63463) -> lazy(send(c0_63455, x_63463))) c_63452))
       in force(lazy(close[false] c0_63462)))

[trans23 success]

-----------------------------------------

def idU_43 := lam (A_63841) -> (m_63842) -> m_63842

def idL_42 := lam (A_63843) -> (m_63844) -> m_63844

def rwlUU_47 :=
  lam (A_63845) -> (m_63846) -> (n_63847) -> (B_63848) -> (__63849) ->
  (__63850) -> __63850

def rwlUL_46 :=
  lam (A_63851) -> (m_63852) -> (n_63853) -> (B_63854) -> (__63855) ->
  (__63856) -> __63856

def rwlLU_45 :=
  lam (A_63857) -> (m_63858) -> (n_63859) -> (B_63860) -> (__63861) ->
  (__63862) -> __63862

def rwlLL_44 :=
  lam (A_63863) -> (m_63864) -> (n_63865) -> (B_63866) -> (__63867) ->
  (__63868) -> __63868

def rwrUU_51 :=
  lam (A_63869) -> (m_63870) -> (n_63871) -> (B_63872) -> (__63873) ->
  (__63874) -> __63874

def rwrUL_50 :=
  lam (A_63875) -> (m_63876) -> (n_63877) -> (B_63878) -> (__63879) ->
  (__63880) -> __63880

def rwrLU_49 :=
  lam (A_63881) -> (m_63882) -> (n_63883) -> (B_63884) -> (__63885) ->
  (__63886) -> __63886

def rwrLL_48 :=
  lam (A_63887) -> (m_63888) -> (n_63889) -> (B_63890) -> (__63891) ->
  (__63892) -> __63892

def sing_elimUU_65 := lam (A_63893) -> (x_63894) -> (__63895) -> __63895

def sing_elimUL_64 := lam (A_63896) -> (x_63897) -> (__63898) -> __63898

def sing_elimLU_63 := lam (A_63899) -> (x_63900) -> (__63901) -> !!

def sing_elimLL_62 := lam (A_63902) -> (x_63903) -> (__63904) -> __63904

def not_11 :=
  lam (__63905) ->
    (match __63905 with
    | true_4 => false_5 | false_5 => true_4)

def and_12 :=
  lam (__63906) -> (__63907) ->
    (match __63906 with
    | true_4 => (match __63907 with
                | true_4 => true_4 | false_5 => false_5)
    | false_5 => false_5)

def or_13 :=
  lam (__63908) -> (__63909) ->
    (match __63908 with
    | true_4 => true_4
    | false_5 => (match __63909 with
                 | true_4 => true_4 | false_5 => false_5))

def xor_14 :=
  lam (__63910) -> (__63911) ->
    (match __63910 with
    | true_4 => (match __63911 with
                | true_4 => false_5 | false_5 => true_4)
    | false_5 => (match __63911 with
                 | true_4 => true_4 | false_5 => false_5))

def lte_15 :=
  fun lte_63912 (__63913) -> (__63914) ->
    (match __63913 with
    | zero_6  => true_4
    | succ_7 n_63915 =>
      (match __63914 with
      | zero_6  => false_5 | succ_7 n_63916 => ((lte_63912) n_63915 n_63916)))

def lt_16 :=
  lam (x_63917) -> (y_63918) -> ((lte_15) (succ_7 x_63917) y_63918)

def pred_17 :=
  lam (__63919) ->
    (match __63919 with
    | zero_6  => (zero_6 ) | succ_7 n_63920 => n_63920)

def add_18 :=
  fun add_63921 (__63922) -> (__63923) ->
    (match __63922 with
    | zero_6  => __63923
    | succ_7 n_63924 => (succ_7 ((add_63921) n_63924 __63923)))

def sub_19 :=
  fun sub_63925 (__63926) -> (__63927) ->
    (match __63927 with
    | zero_6  => __63926
    | succ_7 n_63928 => ((sub_63925) ((pred_17) __63926) n_63928))

def mul_20 :=
  fun mul_63929 (__63930) -> (__63931) ->
    (match __63930 with
    | zero_6  => (zero_6 )
    | succ_7 n_63932 => ((add_18) __63931 ((mul_63929) n_63932 __63931)))

def div_21 :=
  lam (x_63933) -> (y_63934) ->
    (match ((lt_16) x_63933 y_63934) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_63935 :=
        fun loop_63936 (x_63937) -> (y_63938) ->
          (match ((sub_19) x_63937 ((pred_17) y_63938)) with
          | zero_6  => (zero_6 )
          | succ_7 n_63939 => (succ_7 ((loop_63936) n_63939 y_63938)))
      in ((loop_63935) x_63933 y_63934))

def rem_22 :=
  lam (x_63940) -> (y_63941) ->
    ((sub_19) x_63940 ((mul_20) ((div_21) x_63940 y_63941) y_63941))

def free_listUU_73 :=
  fun free_list_63942 (A_63943) -> (f_63944) -> (__63945) ->
    (match __63945 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_63946 tl_63947 =>
      let __63948 := ((f_63944) hd_63946) in
      ((free_list_63942) NULL f_63944 tl_63947))

def free_listUL_72 :=
  fun free_list_63949 (A_63950) -> (f_63951) -> (__63952) ->
    (match __63952 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_63953 tl_63954 =>
      let __63955 := ((f_63951) hd_63953) in
      ((free_list_63949) NULL f_63951 tl_63954))

def free_listLL_70 :=
  fun free_list_63956 (A_63957) -> (f_63958) -> (__63959) ->
    (match __63959 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_63960 tl_63961 =>
      let __63962 := ((f_63958) hd_63960) in
      ((free_list_63956) NULL f_63958 tl_63961))

def pow_26 :=
  lam (x_63963) -> (y_63964) ->
    let loop_63965 :=
      fun loop_63966 (acc_63967) -> (y_63968) ->
        (match (__lte__ y_63968 0) with
        | true_4 => acc_63967
        | false_5 =>
          ((loop_63966) (__mul__ x_63963 acc_63967) (__sub__ y_63968 1)))
    in ((loop_63965) 1 y_63964)

def powm_27 :=
  lam (x_63969) -> (y_63970) -> (m_63971) ->
    let loop_63972 :=
      fun loop_63973 (acc_63974) -> (y_63975) ->
        (match (__lte__ y_63975 0) with
        | true_4 => acc_63974
        | false_5 =>
          ((loop_63973)
            (__mod__ (__mul__ x_63969 acc_63974) m_63971) (__sub__ y_63975 1)))
    in ((loop_63972) 1 y_63970)

def ord_28 := lam (c_63976) -> (__ord__ c_63976)

def chr_29 := lam (i_63977) -> (__chr__ i_63977)

def str_30 := lam (c_63978) -> (__push__ "" c_63978)

def strlen_31 := lam (s_63979) -> (__size__ s_63979)

def string_of_int_32 :=
  lam (i_63980) ->
    let aux_63981 :=
      fun aux_63982 (i_63983) ->
        (match (__lte__ 10 i_63983) with
        | true_4 =>
          let r_63984 := (__mod__ i_63983 10) in
          let i_63985 := (__div__ i_63983 10) in
          (__push__ ((aux_63982) i_63985)
            ((chr_29) (__add__ r_63984 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_63983 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_63980) with
    | true_4 => ((aux_63981) i_63980)
    | false_5 => (__cat__ "~" ((aux_63981) (__neg__ i_63980))))

def gcd_33 :=
  fun gcd_63986 (a_63987) -> (b_63988) ->
    (match (__lte__ b_63988 0) with
    | true_4 => a_63987
    | false_5 => ((gcd_63986) b_63988 (__mod__ a_63987 b_63988)))

def lcm_34 :=
  lam (a_63989) -> (b_63990) ->
    (__div__ (__mul__ a_63989 b_63990) ((gcd_33) a_63989 b_63990))

def server_39 :=
  lam (ch_63991) ->
    let x_63992 := 61 in
    let y_63993 := 53 in
    let n_63994 := (__mul__ x_63992 y_63993) in
    let tot_63995 := ((lcm_34) (__sub__ x_63992 1) (__sub__ y_63993 1)) in
    let e_63996 := 17 in
    let d_63997 := 413 in
    lazy(let ch_63998 := send(ch_63991, n_63994) in
         let ch_63999 := send(ch_63998, e_63996) in
         let _64000 := recv[U](ch_63999) in
         (match _64000 with
         | ex1UL_39 m_64001 n_64002 =>
           let P1_64003 := ((powm_27) m_64001 d_63997 n_63994) in
           let __64004 :=
             print
               (__cat__
                 (__cat__ "server received: " ((string_of_int_32) P1_64003))
                 "\n")
           in close[true] n_64002))

def client_40 :=
  lam (ch_64005) ->
    let P0_64006 := 123 in
    lazy(let _64007 := recv[U](ch_64005) in
         (match _64007 with
         | ex1UL_39 m_64008 n_64009 =>
           let _64010 := recv[U](n_64009) in
           (match _64010 with
           | ex1UL_39 m_64011 n_64012 =>
             let ch_64013 :=
               send(n_64012, ((powm_27) P0_64006 m_64011 m_64008))
             in close[false] ch_64013)))

def main :=
  lazy(let c_64014 := fork lam (_64015) -o ((server_39) _64015) in
       let c0_64016 :=
         fork
           lam (_64017) -o
             lazy(let _64018 := recv[L](_64017) in
                  (match _64018 with
                  | ex1LL_37 m_64019 n_64020 =>
                    let __64021 := close[true] n_64020 in
                    force(((client_40) m_64019))))
       in let c0_64022 := send(c0_64016, c_64014) in close[false] c0_64022)

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_27() => {
      x_167 := ttU_20;
    }
    consUU_28(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_25() => {
      x_177 := ttU_20;
    }
    consUL_26(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_21() => {
      x_187 := ttU_20;
    }
    consLL_22(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn gcd_264(a_265%U, b_266%U) {
  x_268 := lte(b_266, 0);
  match(x_268){
    true_4() => {
      x_267 := a_265;
    }
    false_5() => {
      x_270 := mod(a_265, b_266);
      x_269 := gcd_264(b_266, x_270);
      x_267 := x_269;
    }
  }
  return x_267;
}

fn lcm_271(a_272%U, b_273%U) {
  x_275 := mul(a_272, b_273);
  x_276 := gcd_264(a_272, b_273);
  x_274 := div(x_275, x_276);
  return x_274;
}

fn server_277(ch_278%U) {
  x_279 := 61;
  y_280 := 53;
  x_282 := mul(x_279, y_280);
  n_281 := x_282;
  x_285 := sub(x_279, 1);
  x_286 := sub(y_280, 1);
  x_284 := lcm_271(x_285, x_286);
  tot_283 := x_284;
  e_287 := 17;
  d_288 := 413;
  x_289 :=
    lazy {
      x_291 := send(ch_278, n_281);
      ch_290 := x_291;
      x_293 := send(ch_290, e_287);
      ch_292 := x_293;
      x_295 := recv[U](ch_292);
      _294 := x_295;
      match[L](_294){
        ex1UL_39(m_297, n_298) => {
          x_300 := powm_207(m_297, d_288, n_281);
          P1_299 := x_300;
          x_305 := str("server received: ");
          x_306 := string_of_int_236(P1_299);
          x_304 := cat(x_305, x_306);
          x_307 := str("\n");
          x_303 := cat(x_304, x_307);
          x_302 := print(x_303);
          __301 := x_302;
          x_308 := close[true](n_298);
          x_296 := x_308;
        }
      }
      return x_296;
    };
  return x_289;
}

fn client_309(ch_310%U) {
  P0_311 := 123;
  x_312 :=
    lazy {
      x_314 := recv[U](ch_310);
      _313 := x_314;
      match[L](_313){
        ex1UL_39(m_316, n_317) => {
          x_319 := recv[U](n_317);
          _318 := x_319;
          match[L](_318){
            ex1UL_39(m_321, n_322) => {
              x_325 := powm_207(P0_311, m_321, m_316);
              x_324 := send(n_322, x_325);
              ch_323 := x_324;
              x_326 := close[false](ch_323);
              x_320 := x_326;
            }
          }
          x_315 := x_320;
        }
      }
      return x_315;
    };
  return x_312;
}

main := {
  x_327 :=
    lazy {
      x_330 :=
        fn lam_331(_332%L) { x_333 := server_277(_332);
                             return x_333; };
      x_329 := fork(x_330);
      c_328 := x_329;
      x_336 :=
        fn lam_337(_338%L) {
          x_339 :=
            lazy {
              x_341 := recv[L](_338);
              _340 := x_341;
              match[L](_340){
                ex1LL_37(m_343, n_344) => {
                  x_346 := close[true](n_344);
                  __345 := x_346;
                  x_348 := client_309(m_343);
                  x_347 := force(x_348);
                  x_342 := x_347;
                }
              }
              return x_342;
            };
          return x_339;
        };
      x_335 := fork(x_336);
      c0_334 := x_335;
      x_350 := send(c0_334, c_328);
      c0_349 := x_350;
      x_351 := close[false](c0_349);
      return x_351;
    };
  return x_327;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_27() => {
      x_167 := ttU_20;
    }
    consUU_28(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_25() => {
      x_177 := ttU_20;
      free(__176);
    }
    consUL_26(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_21() => {
      x_187 := ttU_20;
      free(__186);
    }
    consLL_22(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn gcd_264(a_265%U, b_266%U) {
  x_268 := lte(b_266, 0);
  match(x_268){
    true_4() => {
      x_267 := a_265;
    }
    false_5() => {
      x_270 := mod(a_265, b_266);
      x_269 := gcd_264(b_266, x_270);
      x_267 := x_269;
    }
  }
  return x_267;
}

fn lcm_271(a_272%U, b_273%U) {
  x_275 := mul(a_272, b_273);
  x_276 := gcd_264(a_272, b_273);
  x_274 := div(x_275, x_276);
  return x_274;
}

fn server_277(ch_278%U) {
  x_279 := 61;
  y_280 := 53;
  x_282 := mul(x_279, y_280);
  n_281 := x_282;
  x_285 := sub(x_279, 1);
  x_286 := sub(y_280, 1);
  x_284 := lcm_271(x_285, x_286);
  tot_283 := x_284;
  e_287 := 17;
  d_288 := 413;
  x_289 :=
    lazy {
      x_291 := send(ch_278, n_281);
      ch_290 := x_291;
      x_293 := send(ch_290, e_287);
      ch_292 := x_293;
      x_295 := recv[U](ch_292);
      _294 := x_295;
      match[L](_294){
        ex1UL_39(m_297, n_298) => {
          x_300 := powm_207(m_297, d_288, n_281);
          P1_299 := x_300;
          x_305 := str("server received: ");
          x_306 := string_of_int_236(P1_299);
          x_304 := cat(x_305, x_306);
          x_307 := str("\n");
          x_303 := cat(x_304, x_307);
          x_302 := print(x_303);
          __301 := x_302;
          x_308 := close[true](n_298);
          x_296 := x_308;
          free(_294);
        }
      }
      return x_296;
    };
  return x_289;
}

fn client_309(ch_310%U) {
  P0_311 := 123;
  x_312 :=
    lazy {
      x_314 := recv[U](ch_310);
      _313 := x_314;
      match[L](_313){
        ex1UL_39(m_316, n_317) => {
          x_319 := recv[U](n_317);
          _318 := x_319;
          match[L](_318){
            ex1UL_39(m_321, n_322) => {
              x_325 := powm_207(P0_311, m_321, m_316);
              x_324 := send(n_322, x_325);
              ch_323 := x_324;
              x_326 := close[false](ch_323);
              x_320 := x_326;
              free(_318);
            }
          }
          x_315 := x_320;
          free(_313);
        }
      }
      return x_315;
    };
  return x_312;
}

main := {
  x_327 :=
    lazy {
      x_330 :=
        fn lam_331(_332%L) { x_333 := server_277(_332);
                             return x_333; };
      x_329 := fork(x_330);
      c_328 := x_329;
      x_336 :=
        fn lam_337(_338%L) {
          x_339 :=
            lazy {
              x_341 := recv[L](_338);
              _340 := x_341;
              match[L](_340){
                ex1LL_37(m_343, n_344) => {
                  x_346 := close[true](n_344);
                  __345 := x_346;
                  x_348 := client_309(m_343);
                  x_347 := force(x_348);
                  x_342 := x_347;
                  free(_340);
                }
              }
              return x_342;
            };
          return x_339;
        };
      x_335 := fork(x_336);
      c0_334 := x_335;
      x_350 := send(c0_334, c_328);
      c0_349 := x_350;
      x_351 := close[false](c0_349);
      return x_351;
    };
  return x_327;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_352(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_353(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_354 := fn0_idU_352(A_2, m_3);
  return x_354;
}

fn fn0_idL_355(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_356(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_357 := fn0_idL_355(A_5, m_6);
  return x_357;
}

fn fn0_rwlUU_358(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_359(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_360 := fn0_rwlUU_358(A_8, m_9, n_10, B_11, __12, __13);
  return x_360;
}

fn fn0_rwlUL_361(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_362(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_363 := fn0_rwlUL_361(A_15, m_16, n_17, B_18, __19, __20);
  return x_363;
}

fn fn0_rwlLU_364(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_365(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_366 := fn0_rwlLU_364(A_22, m_23, n_24, B_25, __26, __27);
  return x_366;
}

fn fn0_rwlLL_367(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_368(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_369 := fn0_rwlLL_367(A_29, m_30, n_31, B_32, __33, __34);
  return x_369;
}

fn fn0_rwrUU_370(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_371(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_372 := fn0_rwrUU_370(A_36, m_37, n_38, B_39, __40, __41);
  return x_372;
}

fn fn0_rwrUL_373(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_374(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_375 := fn0_rwrUL_373(A_43, m_44, n_45, B_46, __47, __48);
  return x_375;
}

fn fn0_rwrLU_376(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_377(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_378 := fn0_rwrLU_376(A_50, m_51, n_52, B_53, __54, __55);
  return x_378;
}

fn fn0_rwrLL_379(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_380(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_381 := fn0_rwrLL_379(A_57, m_58, n_59, B_60, __61, __62);
  return x_381;
}

fn fn0_sing_elimUU_382(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_383(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_384 := fn0_sing_elimUU_382(A_64, x_65, __66);
  return x_384;
}

fn fn0_sing_elimUL_385(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_386(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_387 := fn0_sing_elimUL_385(A_68, x_69, __70);
  return x_387;
}

fn fn0_sing_elimLU_388(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_389(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_390 := fn0_sing_elimLU_388(A_72, x_73, __74);
  return x_390;
}

fn fn0_sing_elimLL_391(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_392(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_393 := fn0_sing_elimLL_391(A_76, x_77, __78);
  return x_393;
}

fn fn0_not_394(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_395(env) {
  __80 := env[1];
  x_396 := fn0_not_394(__80);
  return x_396;
}

fn fn0_and_397(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_398(env) {
  __83 := env[1];
  __84 := env[2];
  x_399 := fn0_and_397(__83, __84);
  return x_399;
}

fn fn0_or_400(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_401(env) {
  __88 := env[1];
  __89 := env[2];
  x_402 := fn0_or_400(__88, __89);
  return x_402;
}

fn fn0_xor_403(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_404(env) {
  __93 := env[1];
  __94 := env[2];
  x_405 := fn0_xor_403(__93, __94);
  return x_405;
}

fn fn0_lte_406(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_406(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_407(env) {
  __99 := env[1];
  __100 := env[2];
  x_408 := fn0_lte_406(__99, __100);
  return x_408;
}

fn fn0_lt_409(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_406(x_110, y_108);
  return x_109;
}

fn fn1_lt_410(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_411 := fn0_lt_409(x_107, y_108);
  return x_411;
}

fn fn0_pred_412(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_413(env) {
  __112 := env[1];
  x_414 := fn0_pred_412(__112);
  return x_414;
}

fn fn0_add_415(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_415(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_416(env) {
  __117 := env[1];
  __118 := env[2];
  x_417 := fn0_add_415(__117, __118);
  return x_417;
}

fn fn0_sub_418(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_412(__124);
      x_128 := fn0_sub_418(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_419(env) {
  __124 := env[1];
  __125 := env[2];
  x_420 := fn0_sub_418(__124, __125);
  return x_420;
}

fn fn0_mul_421(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_421(n_135, __132);
      x_136 := fn0_add_415(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_422(env) {
  __131 := env[1];
  __132 := env[2];
  x_423 := fn0_mul_421(__131, __132);
  return x_423;
}

fn fn0_div_424(x_139, y_140) {
  x_142 := fn0_lt_409(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_426, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_430, loop_144, x_139);
      appc(x_431, x_430, y_140);
      move1(x_156, x_431);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_425(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_433 := fn0_div_424(x_139, y_140);
  return x_433;
}

fn fn0_rem_434(x_158, y_159) {
  x_162 := fn0_div_424(x_158, y_159);
  x_161 := fn0_mul_421(x_162, y_159);
  x_160 := fn0_sub_418(x_158, x_161);
  return x_160;
}

fn fn1_rem_435(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_436 := fn0_rem_434(x_158, y_159);
  return x_436;
}

fn fn0_free_listUU_437(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_27 => {
      move1(x_167, ttU_20);
      break;
    }
    consUU_28 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_439, f_165, hd_168);
      move1(x_171, x_439);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_437(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_438(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_441 := fn0_free_listUU_437(A_164, f_165, __166);
  return x_441;
}

fn fn0_free_listUL_442(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_25 => {
      move1(x_177, ttU_20);
      free(__176);
      break;
    }
    consUL_26 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_444, f_175, hd_178);
      move1(x_181, x_444);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_442(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_443(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_446 := fn0_free_listUL_442(A_174, f_175, __176);
  return x_446;
}

fn fn0_free_listLL_447(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_21 => {
      move1(x_187, ttU_20);
      free(__186);
      break;
    }
    consLL_22 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_449, f_185, hd_188);
      move1(x_191, x_449);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_447(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_448(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_451 := fn0_free_listLL_447(A_184, f_185, __186);
  return x_451;
}

fn fn0_pow_452(x_194, y_195) {
  mkclo1(x_197, fn1_loop_454, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_458, loop_196, 1);
  appc(x_459, x_458, y_195);
  move1(x_206, x_459);
  return x_206;
}

fn fn1_pow_453(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_461 := fn0_pow_452(x_194, y_195);
  return x_461;
}

fn fn0_powm_462(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_464, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_468, loop_211, 1);
  appc(x_469, x_468, y_209);
  move1(x_222, x_469);
  return x_222;
}

fn fn1_powm_463(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_471 := fn0_powm_462(x_208, y_209, m_210);
  return x_471;
}

fn fn0_ord_472(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_473(env) {
  c_224 := env[1];
  x_474 := fn0_ord_472(c_224);
  return x_474;
}

fn fn0_chr_475(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_476(env) {
  i_227 := env[1];
  x_477 := fn0_chr_475(i_227);
  return x_477;
}

fn fn0_str_478(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_479(env) {
  c_230 := env[1];
  x_480 := fn0_str_478(c_230);
  return x_480;
}

fn fn0_strlen_481(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_482(env) {
  s_234 := env[1];
  x_483 := fn0_strlen_481(s_234);
  return x_483;
}

fn fn0_string_of_int_484(i_237) {
  mkclo1(x_239, fn1_aux_486, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_489, aux_238, i_237);
      move1(x_259, x_489);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_491, aux_238, x_263);
      move1(x_262, x_491);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_485(env) {
  i_237 := env[1];
  x_493 := fn0_string_of_int_484(i_237);
  return x_493;
}

fn fn0_gcd_494(a_265, b_266) {
  lte(x_268, b_266, 0);
  switch(x_268){
    true_4 => {
      move1(x_267, a_265);
      break;
    }
    false_5 => {
      mod(x_270, a_265, b_266);
      x_269 := fn0_gcd_494(b_266, x_270);
      move1(x_267, x_269);
      break;
    }
  }
  return x_267;
}

fn fn1_gcd_495(env) {
  a_265 := env[1];
  b_266 := env[2];
  x_496 := fn0_gcd_494(a_265, b_266);
  return x_496;
}

fn fn0_lcm_497(a_272, b_273) {
  mul(x_275, a_272, b_273);
  x_276 := fn0_gcd_494(a_272, b_273);
  div(x_274, x_275, x_276);
  return x_274;
}

fn fn1_lcm_498(env) {
  a_272 := env[1];
  b_273 := env[2];
  x_499 := fn0_lcm_497(a_272, b_273);
  return x_499;
}

fn fn0_server_500(ch_278) {
  move1(x_279, 61);
  move1(y_280, 53);
  mul(x_282, x_279, y_280);
  move1(n_281, x_282);
  sub(x_285, x_279, 1);
  sub(x_286, y_280, 1);
  x_284 := fn0_lcm_497(x_285, x_286);
  move1(tot_283, x_284);
  move1(e_287, 17);
  move1(d_288, 413);
  lazy(x_289, lazy__502, 6);
  setlazy(x_289, powm_207, 0);
  setlazy(x_289, string_of_int_236, 1);
  setlazy(x_289, ch_278, 2);
  setlazy(x_289, n_281, 3);
  setlazy(x_289, e_287, 4);
  setlazy(x_289, d_288, 5);
  return x_289;
}

fn fn1_server_501(env) {
  ch_278 := env[1];
  x_503 := fn0_server_500(ch_278);
  return x_503;
}

fn fn0_client_504(ch_310) {
  move1(P0_311, 123);
  lazy(x_312, lazy__506, 3);
  setlazy(x_312, powm_207, 0);
  setlazy(x_312, ch_310, 1);
  setlazy(x_312, P0_311, 2);
  return x_312;
}

fn fn1_client_505(env) {
  ch_310 := env[1];
  x_507 := fn0_client_504(ch_310);
  return x_507;
}

fn lazy__509(env) {
  server_277 := env[0];
  client_309 := env[1];
  mkclo1(x_330, fn1_lam_510, fvc:=1, argc:=1);
  setclo(x_330, server_277, 1);
  fork(x_329, x_330);
  move1(c_328, x_329);
  mkclo1(x_336, fn1_lam_511, fvc:=1, argc:=1);
  setclo(x_336, client_309, 1);
  fork(x_335, x_336);
  move1(c0_334, x_335);
  send(x_350, c0_334, c_328);
  move1(c0_349, x_350);
  close1(x_351, c0_349);
  return x_351;
}

fn fn1_lam_510(env) {
  lam_331 := env[0];
  server_277 := env[1];
  _332 := env[2];
  x_333 := fn0_server_500(_332);
  return x_333;
}

fn fn1_lam_511(env) {
  lam_337 := env[0];
  client_309 := env[1];
  _338 := env[2];
  lazy(x_339, lazy__512, 2);
  setlazy(x_339, client_309, 0);
  setlazy(x_339, _338, 1);
  return x_339;
}

fn lazy__512(env) {
  client_309 := env[0];
  _338 := env[1];
  recv1(x_341, _338);
  move1(_340, x_341);
  switch(ctagof(_340)){
    ex1LL_37 => {
      getbox(m_343, _340, 0);
      getbox(n_344, _340, 1);
      close0(x_346, n_344);
      move1(__345, x_346);
      x_348 := fn0_client_504(m_343);
      force(x_347, x_348);
      free(x_348);
      move1(x_342, x_347);
      free(_340);
      break;
    }
  }
  return x_342;
}

fn lazy__506(env) {
  powm_207 := env[0];
  ch_310 := env[1];
  P0_311 := env[2];
  recv0(x_314, ch_310);
  move1(_313, x_314);
  switch(ctagof(_313)){
    ex1UL_39 => {
      getbox(m_316, _313, 0);
      getbox(n_317, _313, 1);
      recv0(x_319, n_317);
      move1(_318, x_319);
      switch(ctagof(_318)){
        ex1UL_39 => {
          getbox(m_321, _318, 0);
          getbox(n_322, _318, 1);
          x_325 := fn0_powm_462(P0_311, m_321, m_316);
          send(x_324, n_322, x_325);
          move1(ch_323, x_324);
          close1(x_326, ch_323);
          move1(x_320, x_326);
          free(_318);
          break;
        }
      }
      move1(x_315, x_320);
      free(_313);
      break;
    }
  }
  return x_315;
}

fn lazy__502(env) {
  powm_207 := env[0];
  string_of_int_236 := env[1];
  ch_278 := env[2];
  n_281 := env[3];
  e_287 := env[4];
  d_288 := env[5];
  send(x_291, ch_278, n_281);
  move1(ch_290, x_291);
  send(x_293, ch_290, e_287);
  move1(ch_292, x_293);
  recv0(x_295, ch_292);
  move1(_294, x_295);
  switch(ctagof(_294)){
    ex1UL_39 => {
      getbox(m_297, _294, 0);
      getbox(n_298, _294, 1);
      x_300 := fn0_powm_462(m_297, d_288, n_281);
      move1(P1_299, x_300);
      str(x_305, "server received: ")
      x_306 := fn0_string_of_int_484(P1_299);
      cat(x_304, x_305, x_306);
      str(x_307, "\n")
      cat(x_303, x_304, x_307);
      print(x_302, x_303);
      move1(__301, x_302);
      close0(x_308, n_298);
      move1(x_296, x_308);
      free(_294);
      break;
    }
  }
  return x_296;
}

fn fn1_aux_486(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_487, aux_240, i_246);
      move1(x_249, x_487);
      x_252 := fn0_ord_472(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_475(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_472(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_475(x_255);
      x_253 := fn0_str_478(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_464(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_465, loop_213, x_219);
      appc(x_466, x_465, x_221);
      move1(x_218, x_466);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_454(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_455, loop_198, x_204);
      appc(x_456, x_455, x_205);
      move1(x_203, x_456);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_426(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_412(y_148);
  x_150 := fn0_sub_418(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_427, loop_146, n_153);
      appc(x_428, x_427, y_148);
      move1(x_154, x_428);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_353, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_356, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_359, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_362, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_365, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_368, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_371, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_374, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_377, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_380, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_383, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_386, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_389, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_392, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_395, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_398, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_401, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_404, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_407, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_410, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_413, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_416, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_419, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_422, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_425, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_435, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_438, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_443, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_448, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_453, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_463, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_473, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_476, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_479, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_482, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_485, fvc:=0, argc:=1);
  mkclo0(gcd_264, fn1_gcd_495, fvc:=0, argc:=2);
  mkclo0(lcm_271, fn1_lcm_498, fvc:=0, argc:=2);
  mkclo0(server_277, fn1_server_501, fvc:=0, argc:=1);
  mkclo0(client_309, fn1_client_505, fvc:=0, argc:=1);
  lazy(x_327, lazy__509, 2);
  setlazy(x_327, server_277, 0);
  setlazy(x_327, client_309, 1);
  force(x_508, x_327);
  return x_508;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

