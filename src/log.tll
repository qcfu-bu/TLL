[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "cmsort_ch"; relv = N;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "cmsort_ch"),
              [([(PId "xs")],
                (Some (Ch (true,
                         (Act (R, true,
                            (UOpr ("`",
                               (App [(Id ("msort", I)); (Id ("xs", I))]))),
                            (Binder ("_", End))))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "cmsort_worker"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("spwn",
                 (Pi (R, U,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("zs",
                       (Pi (R, L,
                          (App
                             [(Inst ("cmsort_ch", [(SId "t")], I));
                               (Id ("zs", I))]),
                          (Binder ("_", (IO (Id ("unit", I)))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cmsort_worker"),
              [([(PId "spwn")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("spwn", I)), (Int 0))), None)
                           ],
                         None,
                         [([(PId "true")],
                           (Some (Fun (
                                    (Pi (R, U,
                                       (App
                                          [(Inst ("list",
                                              [(SId "_"); (SId "t")], I));
                                            Int_t]),
                                       (Binder ("zs",
                                          (Pi (R, L,
                                             (App
                                                [(Inst ("cmsort_ch",
                                                    [(SId "t")], I));
                                                  (Id ("zs", I))]),
                                             (Binder ("_",
                                                (IO (Id ("unit", I)))))
                                             ))
                                          ))
                                       )),
                                    (Binder (None,
                                       [([(PId "zs"); (PId "c")],
                                         (Some (MLet (
                                                  (App
                                                     [(Send (Id ("c", I)));
                                                       (App
                                                          [(Id ("just", I));
                                                            (App
                                                               [(Id ("msort",
                                                                   I));
                                                                 (Id ("zs", I
                                                                    ))
                                                                 ])
                                                            ])
                                                       ]),
                                                  (Binder ((PId "c"),
                                                     (Close (Id ("c", I)))))
                                                  ))))
                                         ]
                                       )),
                                    []))));
                           ([(PId "false")],
                            (Some (Fun (
                                     (Pi (R, U,
                                        (App
                                           [(Inst ("list",
                                               [(SId "_"); (SId "t")], I));
                                             Int_t]),
                                        (Binder ("zs",
                                           (Pi (R, L,
                                              (App
                                                 [(Inst ("cmsort_ch",
                                                     [(SId "t")], I));
                                                   (Id ("zs", I))]),
                                              (Binder ("_",
                                                 (IO (Id ("unit", I)))))
                                              ))
                                           ))
                                        )),
                                     (Binder (None,
                                        [([(PId "nil"); (PId "c")],
                                          (Some (MLet (
                                                   (App
                                                      [(Send (Id ("c", I)));
                                                        (App
                                                           [(Id ("just", I));
                                                             (Id ("nil", I))])
                                                        ]),
                                                   (Binder ((PId "c"),
                                                      (Close (Id ("c", I)))))
                                                   ))));
                                          ([(PBOpr ("::", (PId "z"),
                                               (PId "nil")));
                                             (PId "c")],
                                           (Some (MLet (
                                                    (App
                                                       [(Send (Id ("c", I)));
                                                         (App
                                                            [(Id ("just", I));
                                                              (BOpr ("::",
                                                                 (Id ("z", I
                                                                    )),
                                                                 (Id ("nil",
                                                                    I))
                                                                 ))
                                                              ])
                                                         ]),
                                                    (Binder ((PId "c"),
                                                       (Close (Id ("c", I)))
                                                       ))
                                                    ))));
                                          ([(PId "zs"); (PId "c")],
                                           (Some (Match (
                                                    [(R,
                                                      (App
                                                         [(Id ("split", I));
                                                           (Id ("zs", I))]),
                                                      (Some ("h1", IMeta)));
                                                      (N, (Id ("refl", I)),
                                                       (Some ("_",
                                                              (BOpr ("=",
                                                                 (Let (R,
                                                                    (
                                                                    Id ("h1",
                                                                    I)),
                                                                    (
                                                                    Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "xs"),
                                                                    (PId "ys")
                                                                    )),
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs", I))
                                                                    ]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys", I))
                                                                    ])]))))),
                                                                 (Let (R,
                                                                    (
                                                                    App
                                                                    [(Id (
                                                                    "split",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]),
                                                                    (
                                                                    Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "xs"),
                                                                    (PId "ys")
                                                                    )),
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs", I))
                                                                    ]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys", I))
                                                                    ])])))))
                                                                 )))))
                                                      ],
                                                    None,
                                                    [([(PBOpr (
                                                          "\226\159\168,\226\159\169",
                                                          (PId "xs0"),
                                                          (PId "ys0")));
                                                        (PId "pf")],
                                                      (Some (MLet (
                                                               (Fork
                                                                  (Fun (
                                                                    (Pi (R,
                                                                    L, IMeta,
                                                                    (Binder (
                                                                    "",
                                                                    (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    ))))))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "c1")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id (
                                                                    "spwn", I
                                                                    )),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ));
                                                                    (Id (
                                                                    "c1", I))
                                                                    ])))])),
                                                                    []))),
                                                               (Binder (
                                                                  (PId "r1"),
                                                                  (MLet (
                                                                    (Fork
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    L, IMeta,
                                                                    (Binder (
                                                                    "",
                                                                    (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    ))))))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "c2")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id (
                                                                    "spwn", I
                                                                    )),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ));
                                                                    (Id (
                                                                    "c2", I))
                                                                    ])))])),
                                                                    []))),
                                                                    (Binder (
                                                                    (PId "r2"),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r1", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId
                                                                    "xs1"),
                                                                    (PId "c1")
                                                                    )),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c1", I))),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r2", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId
                                                                    "ys1"),
                                                                    (PId "c2")
                                                                    )),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c2", I))),
                                                                    (Match (
                                                                    [(R,
                                                                    (Id (
                                                                    "xs1", I
                                                                    )), None);
                                                                    (R,
                                                                    (Id (
                                                                    "ys1", I
                                                                    )), None)
                                                                    ], None,
                                                                    [([(PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "xs1")]));
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "ys1")]))
                                                                    ],
                                                                    (Some (
                                                                    Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (Id (
                                                                    "xs1", I
                                                                    ));
                                                                    (Id (
                                                                    "ys1", I
                                                                    ))])]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ))]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ))])])))
                                                                    )),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "rwl", I
                                                                    ));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U, IMeta,
                                                                    (Binder (
                                                                    "x",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "x")],
                                                                    (Some (
                                                                    UOpr (
                                                                    "`",
                                                                    (Id ("x",
                                                                    I))))))]
                                                                    )), 
                                                                    []));
                                                                    (Id (
                                                                    "pf", I));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]))))),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id ("c",
                                                                    I))),
                                                                    (Return
                                                                    (Id (
                                                                    "tt", I)))
                                                                    ))))))))
                                                                    ))))))))]
                                                                    ))))))))
                                                                    ))))))))
                                                                    ))
                                                                  ))
                                                               ))))
                                                      ]
                                                    ))))
                                          ]
                                        )),
                                     []))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("spwn",
              (Pi (R, U,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("zs",
                    (Pi (R, L,
                       (App
                          [(Inst ("cmsort_ch", [(SId "t")], I));
                            (Id ("zs", I))]),
                       (Binder ("_", (IO (Id ("unit", I)))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [E]};
  Definition {name = "cmsort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("zs",
                 (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))
                 ))
              )),
           (Binder ((Some "cmsort"),
              [([(PId "zs")],
                (Some (MLet (
                         (Fork
                            (Fun (
                               (Pi (R, L, IMeta,
                                  (Binder ("", (IO (Id ("unit", I))))))),
                               (Binder (None,
                                  [([(PId "c")],
                                    (Some (App
                                             [(Id ("cmsort_worker", I));
                                               (Int 4); (Id ("zs", I));
                                               (Id ("c", I))])))
                                    ]
                                  )),
                               []))),
                         (Binder ((PId "c"),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "msg"), (PId "c"))),
                                  (BOpr (";", (Close (Id ("c", I))),
                                     (Return (Id ("msg", I)))))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("zs",
              (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))))
           )))
       ));
    view = [E]};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "string_of_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", String_t)))),
           (Binder ((Some "string_of_list"),
              [([(PId "nil")], (Some (String "nil")));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr ("++",
                          (BOpr ("++",
                             (App [(Id ("string_of_int", I)); (Id ("x", I))]),
                             (String " :: "))),
                          (App [(Id ("string_of_list", I)); (Id ("xs", I))])
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", String_t)))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 2000000)]),
           (Binder ((PId "test"),
              (MLet ((App [(Id ("cmsort", I)); (Id ("test", I))]),
                 (Binder ((PConstr ("just", [(PId "sorted")])),
                    (Let (R,
                       (App [(Id ("list_len", I)); (Id ("sorted", I))]),
                       (Binder ((PId "len"),
                          (Print
                             (App
                                [(Id ("string_of_int", I)); (Id ("len", I))]))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_539› : ∀ (A_540 : Type‹s_539›) -> A_540 -> ?_2[0;0] :=
  fun id_542 : ∀ (A_543 : Type‹s_539›) -> A_543 -> ?_1[0;0]
  | A_545 m_546 => m_546

#[logical]
inductive eq_1‹s_547› (A_548 : Type‹s_547›) (m_549 : A_548):
  A_548 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_549 m_549)

#[program]
def rwl_2‹s_551,r_552› :
  ∀ {A_553 : Type‹s_551›} ->
    ∀ {m_554 : A_553} ->
      ∀ {n_555 : A_553} ->
        ∀ {B_556 : A_553 -> Type‹r_552›} ->
          {(eq_1‹??_3› ?_5[0;0] m_554 n_555)} ->
            ((B_556) m_554) -> ((B_556) n_555)
:=
  fun rwl_560 :
    ∀ {A_561 : Type‹s_551›} ->
      ∀ {m_562 : A_561} ->
        ∀ {n_563 : A_561} ->
          ∀ {B_564 : A_561 -> Type‹r_552›} ->
            {(eq_1‹??_2› ?_4[0;0] m_562 n_563)} ->
              ((B_564) m_562) -> ((B_564) n_563)
  | A_568 m_569 n_570 B_571 refl_1 x_572 => x_572

#[program]
def rwr_3‹s_573,r_574› :
  ∀ {A_575 : Type‹s_573›} ->
    ∀ {m_576 : A_575} ->
      ∀ {n_577 : A_575} ->
        ∀ {B_578 : A_575 -> Type‹r_574›} ->
          {(eq_1‹??_5› ?_7[0;0] m_576 n_577)} ->
            ((B_578) n_577) -> ((B_578) m_576)
:=
  fun rwr_582 :
    ∀ {A_583 : Type‹s_573›} ->
      ∀ {m_584 : A_583} ->
        ∀ {n_585 : A_583} ->
          ∀ {B_586 : A_583 -> Type‹r_574›} ->
            {(eq_1‹??_4› ?_6[0;0] m_584 n_585)} ->
              ((B_586) n_585) -> ((B_586) m_584)
  | A_590 m_591 n_592 B_593 refl_1 x_594 => x_594

#[logical]
def congr_4‹s_595,r_596,t_597› :
  ∀ (A_598 : Type‹s_595›) ->
    ∀ (B_599 : Type‹r_596›) ->
      ∀ (m_600 : A_598) ->
        ∀ (n_601 : A_598) ->
          ∀ (f_602 : forall‹t_597›(__603 : A_598), B_599) ->
            (eq_1‹??_9› ?_12[0;0] m_600 n_601) ->
              (eq_1‹??_10› ?_13[0;0] ((f_602) m_600) ((f_602) n_601))
:=
  fun congr_605 :
    ∀ (A_606 : Type‹s_595›) ->
      ∀ (B_607 : Type‹r_596›) ->
        ∀ (m_608 : A_606) ->
          ∀ (n_609 : A_606) ->
            ∀ (f_610 : forall‹t_597›(__611 : A_606), B_607) ->
              (eq_1‹??_6› ?_8[0;0] m_608 n_609) ->
                (eq_1‹??_7› ?_9[0;0] ((f_610) m_608) ((f_610) n_609))
  | A_613 B_614 m_615 n_616 f_617 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_618 : U} ->
    ∀ {m_619 : A_618} ->
      ∀ (x_620 : (eq_1‹??_15› ?_20[0;0] m_619 m_619)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_620 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_621 :
    ∀ {A_622 : U} ->
      ∀ {m_623 : A_622} ->
        ∀ (x_624 : (eq_1‹??_11› ?_14[0;0] m_623 m_623)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_624 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_625 m_626 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_627,t_628› (A_629 : Type‹s_627›):
  A_629 -> Type‹t_628›
where
| just_2 (m_631 : A_629) : (sing_2‹??_18,??_19› ?_24[0;0] m_631)

#[logical]
def ssing_6‹s_632› :
  ∀ (A_633 : Type‹s_632›) -> A_633 -> Type‹s_632›
:=
  fun ssing_635 : ∀ (A_636 : Type‹s_632›) -> A_636 -> Type‹s_632›
  | A_638 m_639 => (sing_2‹s_632,s_632› A_638 m_639)

#[program]
def sing_elim_7‹s_640,t_641› :
  ∀ {A_642 : Type‹s_640›} ->
    ∀ {x_643 : A_642} -> (sing_2‹s_640,t_641› ?_26[0;0] x_643) -> A_642
:=
  fun sing_elim_645 :
    ∀ {A_646 : Type‹s_640›} ->
      ∀ {x_647 : A_646} ->
        (sing_2‹s_640,t_641› ?_25[0;0] x_647) -> A_646
  | A_649 x_650 (just_2 x_651) => x_651

#[logical]
def sing_uniq_8‹s_652,t_653› :
  ∀ (A_654 : Type‹s_652›) ->
    ∀ (x0_655 : A_654) ->
      ∀ (x_656 : (sing_2‹s_652,t_653› ?_33[0;0] x0_655)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_655
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_656))
:=
  fun sing_uniq_657 :
    ∀ (A_658 : Type‹s_652›) ->
      ∀ (x0_659 : A_658) ->
        ∀ (x_660 : (sing_2‹s_652,t_653› ?_27[0;0] x0_659)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_659
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_660))
  | A_661 x0_662 (just_2 _663) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_664 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_664 tt_3)
:=
  fun unit_eta_665 :
    ∀ (x_666 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_666 tt_3)
  | x_667 =>
    match x_667 in
      ∀ (x0_668 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_668 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_670 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_674 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _677 _678 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_681 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _684 _685 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_688 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _691 _692 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_693 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_696 : nat_5 -> nat_5 -> bool_4
  | zero_6 _699 => true_4
  | _700 zero_6 => false_5
  | (succ_7 x_701) (succ_7 y_702) => ((lte_696) x_701 y_702)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_705 : nat_5 -> nat_5 -> bool_4
  | x_708 y_709 => ((lte_14) (succ_7‹› x_708) y_709)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_711 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_713) => x_713

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_716 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_719 => y_719
  | (succ_7 x_720) y_721 => (succ_7‹› ((add_716) x_720 y_721))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_724 : nat_5 -> nat_5 -> nat_5
  | x_727 zero_6 => x_727
  | x_728 (succ_7 y_729) => ((sub_724) ((pred_16) x_728) y_729)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_732 : nat_5 -> nat_5 -> nat_5
  | zero_6 _735 => zero_6
  | (succ_7 x_736) y_737 => ((add_17) y_737 ((mul_732) x_736 y_737))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_740 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_743 y_744 =>
    match ((lt_15) x_743 y_744) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_746 :=
        fun loop_747 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_750 y_751 =>
          match ((sub_18) x_750 ((pred_16) y_751)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_753) => (succ_7‹› ((loop_747) x_753 y_751))
      in ((loop_746) x_743 y_744)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_756 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_759 y_760 => ((sub_18) x_759 ((mul_19) ((div_20) x_759 y_760) y_760))

#[program]
inductive list_6‹s_761,t_762› (A_763 : Type‹s_761›): Type‹t_762›
where
| nil_8 : (list_6‹??_31,??_32› A_763)
| cons_9
    (hd_764 : A_763) (tl_765 : (list_6‹??_33,t_762› A_763))
    : (list_6‹??_34,??_35› A_763)

#[program]
def free_list_22‹s_766,t_767› :
  ∀ {A_768 : Type‹s_766›} ->
    A_768 -> unit_3 -> (list_6‹??_37,t_767› A_768) -> unit_3
:=
  fun free_list_772 :
    ∀ {A_773 : Type‹s_766›} ->
      A_773 -> unit_3 -> (list_6‹??_36,t_767› A_773) -> unit_3
  | A_777 f_778 nil_8 => tt_3
  | A_779 f_780 (cons_9 x_781 xs_782) =>
    let __783 := ((f_780) x_781) in ((free_list_772) ?_52[0;0] f_780 xs_782)

#[program]
inductive exists0_7‹s_784,r_785› (A_786 : Type‹s_784›) (B_787 : 
A_786 -> Type‹r_785›): L where
| ex0_10
    {m_789 : A_786} (n_790 : ((B_787) m_789))
    : (exists0_7‹??_38,??_39› A_786 B_787)

#[program]
inductive exists1_8‹s_791,r_792› (A_793 : Type‹s_791›) (B_794 : 
A_793 -> Type‹r_792›): L where
| ex1_11
    (m_796 : A_793) (n_797 : ((B_794) m_796))
    : (exists1_8‹??_40,??_41› A_793 B_794)

#[logical]
def prod0_23‹s_798,r_799› :
  Type‹s_798› -> Type‹r_799› -> ?_56[0;0]
:=
  fun prod0_802 : Type‹s_798› -> Type‹r_799› -> ?_53[0;0]
  | A_805 B_806 =>
    (exists0_7‹??_42,??_43›
      A_805 fun _807 : ?_54[0;0] -> ?_55[0;0]
            | _809 => B_806)

#[logical]
def prod1_24‹s_810,r_811› :
  Type‹s_810› -> Type‹r_811› -> ?_60[0;0]
:=
  fun prod1_814 : Type‹s_810› -> Type‹r_811› -> ?_57[0;0]
  | A_817 B_818 =>
    (exists1_8‹??_44,??_45›
      A_817 fun _819 : ?_58[0;0] -> ?_59[0;0]
            | _821 => B_818)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_824 : int -> int -> int
  | x_827 y_828 =>
    let loop_829 :=
      fun loop_830 : int -> int -> int
      | acc_833 y_834 =>
        match (__lte__ y_834 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_833
        | false_5 => ((loop_830) (__mul__ x_827 acc_833) (__sub__ y_834 1))
    in ((loop_829) 1 y_828)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_839 : int -> int -> int -> int
  | x_843 y_844 m_845 =>
    let loop_846 :=
      fun loop_847 : int -> int -> int
      | acc_850 y_851 =>
        match (__lte__ y_851 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_850
        | false_5 =>
          ((loop_847)
            (__mod__ (__mul__ x_843 acc_850) m_845) (__sub__ y_851 1))
    in ((loop_846) 1 y_844)

#[program]
def ord_27‹› : char -> int :=
  fun ord_854 : char -> int
  | c_856 => (__ord__ c_856)

#[program]
def chr_28‹› : int -> char :=
  fun chr_858 : int -> char
  | i_860 => (__chr__ i_860)

#[program]
def str_29‹› : char -> string :=
  fun str_862 : char -> string
  | c_864 => (__push__ "" c_864)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_866 : string -> int
  | s_868 => (__size__ s_868)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_870 : int -> string
  | i_872 =>
    let aux_873 :=
      fun aux_874 : int -> string
      | i_876 =>
        match (__lte__ 10 i_876) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_878 := (__mod__ i_876 10) in
          let i_879 := (__div__ i_876 10) in
          (__push__ ((aux_874) i_879)
            ((chr_28) (__add__ r_878 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_876 ((ord_27) 0))))
    in
    match (__lt__ 0 i_872) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_873) i_872)
    | false_5 => (__cat__ "~" ((aux_873) (__neg__ i_872)))

#[program]
def split_32‹t_881› :
  (list_6‹??_71,t_881› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_881› int) (list_6‹??_73,t_881› int))
:=
  fun split_883 :
    (list_6‹??_46,t_881› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_881› int) (list_6‹??_48,t_881› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_885 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_885 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_886 (cons_9 y_887 zs_888)) =>
    match ((split_883) zs_888) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_890 ys_891) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_886 xs_890)
        (cons_9‹??_67,??_68› ?_79[0;0] y_887 ys_891))

#[program]
def merge_33‹t_892› :
  (list_6‹??_87,t_892› int) ->
    (list_6‹??_88,t_892› int) -o (list_6‹??_89,t_892› int)
:=
  fun merge_895 :
    (list_6‹??_76,t_892› int) ->
      (list_6‹??_77,t_892› int) -o (list_6‹??_78,t_892› int)
  | nil_8 ys_898 => ys_898
  | xs_899 nil_8 => xs_899
  | (cons_9 x_900 xs_901) (cons_9 y_902 ys_903) =>
    match (__lte__ x_900 y_902) in ?_84[0;0] -o ?_85[0;0] with
    | true_4 =>
      (cons_9‹??_81,??_82›
        ?_87[0;0] x_900
        ((merge_895) xs_901 (cons_9‹??_79,??_80› ?_86[0;0] y_902 ys_903)))
    | false_5 =>
      (cons_9‹??_85,??_86›
        ?_89[0;0] y_902
        ((merge_895) (cons_9‹??_83,??_84› ?_88[0;0] x_900 xs_901) ys_903))

#[program]
def msort_34‹t_905› :
  (list_6‹??_100,t_905› int) -> (list_6‹??_101,t_905› int)
:=
  fun msort_907 :
    (list_6‹??_90,t_905› int) -> (list_6‹??_91,t_905› int)
  | nil_8 => (nil_8‹??_92,??_93› ?_90[0;0])
  | (cons_9 z_909 nil_8) =>
    (cons_9‹??_96,??_97›
      ?_92[0;0] z_909 (nil_8‹??_94,??_95› ?_91[0;0]))
  | zs_910 =>
    match ((split_32‹??_98›) zs_910) in ?_94[0;0] -o ?_93[0;0] with
    | (ex1_11 xs_912 ys_913) =>
      ((merge_33‹??_99›) ((msort_907) xs_912) ((msort_907) ys_913))

#[logical]
def cmsort_ch_35‹t_914› : (list_6‹??_105,t_914› int) -> L :=
  fun cmsort_ch_916 : (list_6‹??_102,t_914› int) -> L
  | xs_918 =>
    ch⟨⇑(__919 :
           ((ssing_6‹??_104›) ?_95[0;0] ((msort_34‹??_103›) xs_918))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_920› :
  int ->
    ∀ (zs_922 : (list_6‹??_144,t_920› int)) ->
      ((cmsort_ch_35‹t_920›) zs_922) -o IO unit_3
:=
  fun cmsort_worker_924 :
    int ->
      ∀ (zs_926 : (list_6‹??_106,t_920› int)) ->
        ((cmsort_ch_35‹t_920›) zs_926) -o IO unit_3
  | spwn_928 =>
    match (__lte__ spwn_928 0) in ?_96[0;0] -o ?_97[0;0] with
    | true_4 =>
      fun _930 :
        ∀ (zs_931 : (list_6‹??_107,t_920› int)) ->
          ((cmsort_ch_35‹t_920›) zs_931) -o IO unit_3
      | zs_933 c_934 =>
        let* c_935 :=
          ((send c_934)
            (just_2‹??_109,??_110›
              ?_98[0;0] ((msort_34‹??_108›) zs_933)))
        in close c_935
    | false_5 =>
      fun _936 :
        ∀ (zs_937 : (list_6‹??_111,t_920› int)) ->
          ((cmsort_ch_35‹t_920›) zs_937) -o IO unit_3
      | nil_8 c_939 =>
        let* c_940 :=
          ((send c_939)
            (just_2‹??_114,??_115›
              ?_100[0;0] (nil_8‹??_112,??_113› ?_99[0;0])))
        in close c_940
      | (cons_9 z_941 nil_8) c_942 =>
        let* c_943 :=
          ((send c_942)
            (just_2‹??_120,??_121›
              ?_103[0;0]
              (cons_9‹??_118,??_119›
                ?_102[0;0] z_941 (nil_8‹??_116,??_117› ?_101[0;0]))))
        in close c_943
      | zs_944 c_945 =>
        match ((split_32‹??_122›) zs_944),
        (refl_1‹??_123› ?_104[0;0] ?_105[0;0]) in
          ∀ (h1_946 : ?_106[0;0]) -o
            {(eq_1‹??_131›
               ?_111[0;0]
               match h1_946 in ?_108[0;0] -o ?_107[0;0] with
               | (ex1_11 xs_949 ys_950) =>
                 ((merge_33‹??_126›)
                   ((msort_34‹??_124›) xs_949)
                   ((msort_34‹??_125›) ys_950))
               match ((split_32‹??_127›) zs_944) in
                 ?_110[0;0] -o ?_109[0;0]
               with
               | (ex1_11 xs_952 ys_953) =>
                 ((merge_33‹??_130›)
                   ((msort_34‹??_128›) xs_952)
                   ((msort_34‹??_129›) ys_953)))} -o
              ?_112[0;0]
        with
        | (ex1_11 xs0_954 ys0_955), pf_956 =>
          let* r1_957 :=
            fork
              fun _958 : ?_113[0;0] -o IO unit_3
              | c1_960 =>
                ((cmsort_worker_924) (__sub__ spwn_928 1) xs0_954 c1_960)
          in
          let* r2_961 :=
            fork
              fun _962 : ?_114[0;0] -o IO unit_3
              | c2_964 =>
                ((cmsort_worker_924) (__sub__ spwn_928 1) ys0_955 c2_964)
          in
          let* _965 := recv r1_957 in
          match _965 in ?_130[0;0] -o ?_129[0;0] with
          | (ex1_11 xs1_967 c1_968) =>
            let* __969 := close c1_968 in
            let* _970 := recv r2_961 in
            match _970 in ?_128[0;0] -o ?_127[0;0] with
            | (ex1_11 ys1_972 c2_973) =>
              let* __974 := close c2_973 in
              match xs1_967, ys1_972 in
                ?_115[0;0] -o ?_116[0;0] -o ?_117[0;0]
              with
              | (just_2 xs1_977), (just_2 ys1_978) =>
                let zs1_979 :=
                  ((just_2‹??_133,??_134›
                     ?_118[0;0] ((merge_33‹??_132›) xs1_977 ys1_978))
                    : ((ssing_6‹??_138›)
                        ?_119[0;0]
                        ((merge_33‹??_137›)
                          ((msort_34‹??_135›) xs0_954)
                          ((msort_34‹??_136›) ys0_955))))
                in
                let zs1_980 :=
                  (((rwl_2‹??_140,??_141›)
                     ?_125[0;0] ?_124[0;0] ?_123[0;0]
                     fun _981 : ?_120[0;0] -> ?_121[0;0]
                     | x_983 => ((ssing_6‹??_139›) ?_122[0;0] x_983)
                     pf_956 zs1_979)
                    : ((ssing_6‹??_143›)
                        ?_126[0;0] ((msort_34‹??_142›) zs_944)))
                in
                let* c_984 := ((send c_945) zs1_980) in
                let* __985 := close c_984 in return tt_3

#[program]
def cmsort_37‹t_986› :
  ∀ (zs_987 : (list_6‹??_149,t_986› int)) ->
    IO ((ssing_6‹??_151›) ?_135[0;0] ((msort_34‹??_150›) zs_987))
:=
  fun cmsort_988 :
    ∀ (zs_989 : (list_6‹??_145,t_986› int)) ->
      IO ((ssing_6‹??_147›) ?_131[0;0] ((msort_34‹??_146›) zs_989))
  | zs_990 =>
    let* c_991 :=
      fork
        fun _992 : ?_132[0;0] -o IO unit_3
        | c_994 => ((cmsort_worker_36‹??_148›) 4 zs_990 c_994)
    in
    let* _995 := recv c_991 in
    match _995 in ?_134[0;0] -o ?_133[0;0] with
    | (ex1_11 msg_997 c_998) => let* __999 := close c_998 in return msg_997

#[program]
def mklist_38‹t_1000› : int -> (list_6‹??_157,t_1000› int) :=
  fun mklist_1002 : int -> (list_6‹??_152,t_1000› int)
  | n_1004 =>
    match (__lte__ n_1004 0) in ?_136[0;0] -o ?_137[0;0] with
    | true_4 => (nil_8‹??_153,??_154› ?_138[0;0])
    | false_5 =>
      (cons_9‹??_155,??_156›
        ?_139[0;0] n_1004 ((mklist_1002) (__sub__ n_1004 1)))

#[program]
def list_len_39‹t_1006› : (list_6‹??_159,t_1006› int) -> int :=
  fun list_len_1008 : (list_6‹??_158,t_1006› int) -> int
  | nil_8 => 0
  | (cons_9 _1010 xs_1011) => (__add__ 1 ((list_len_1008) xs_1011))

#[program]
def string_of_list_40‹t_1012› : (list_6‹??_161,t_1012› int) -> string
:=
  fun string_of_list_1014 : (list_6‹??_160,t_1012› int) -> string
  | nil_8 => "nil"
  | (cons_9 x_1016 xs_1017) =>
    (__cat__ (__cat__ ((string_of_int_31) x_1016) " :: ")
      ((string_of_list_1014) xs_1017))

#[program]
def main_41‹› : IO unit_3 :=
  let test_1018 := ((mklist_38‹L›) 2000000) in
  let* _1019 := ((cmsort_37‹??_162›) test_1018) in
  match _1019 in ?_141[0;0] -o ?_140[0;0] with
  | (just_2 sorted_1021) =>
    let len_1022 := ((list_len_39‹??_163›) sorted_1021) in
    print ((string_of_int_31) len_1022)

-----------------------------------------

#[program]
def id_1‹s_13903› :
  ∀ (A_13904 : Type‹s_13903›) -> A_13904 -> A_13904
:=
  fun id_13906 : ∀ (A_13907 : Type‹s_13903›) -> A_13907 -> A_13907
  | A_13909 m_13910 => m_13910

#[logical]
inductive eq_1‹s_13911› (A_13912 : Type‹s_13911›) (m_13913 : A_13912):
  A_13912 -> U
where
| refl_1 : (eq_1‹s_13911› A_13912 m_13913 m_13913)

#[program]
def rwl_2‹s_13915,r_13916› :
  ∀ {A_13917 : Type‹s_13915›} ->
    ∀ {m_13918 : A_13917} ->
      ∀ {n_13919 : A_13917} ->
        ∀ {B_13920 : A_13917 -> Type‹r_13916›} ->
          {(eq_1‹s_13915› A_13917 m_13918 n_13919)} ->
            ((B_13920) m_13918) -> ((B_13920) n_13919)
:=
  fun rwl_13924 :
    ∀ {A_13925 : Type‹s_13915›} ->
      ∀ {m_13926 : A_13925} ->
        ∀ {n_13927 : A_13925} ->
          ∀ {B_13928 : A_13925 -> Type‹r_13916›} ->
            {(eq_1‹s_13915› A_13925 m_13926 n_13927)} ->
              ((B_13928) m_13926) -> ((B_13928) n_13927)
  | A_13932 m_13933 n_13934 B_13935 refl_1 __13936 => __13936

#[program]
def rwr_3‹s_13937,r_13938› :
  ∀ {A_13939 : Type‹s_13937›} ->
    ∀ {m_13940 : A_13939} ->
      ∀ {n_13941 : A_13939} ->
        ∀ {B_13942 : A_13939 -> Type‹r_13938›} ->
          {(eq_1‹s_13937› A_13939 m_13940 n_13941)} ->
            ((B_13942) n_13941) -> ((B_13942) m_13940)
:=
  fun rwr_13946 :
    ∀ {A_13947 : Type‹s_13937›} ->
      ∀ {m_13948 : A_13947} ->
        ∀ {n_13949 : A_13947} ->
          ∀ {B_13950 : A_13947 -> Type‹r_13938›} ->
            {(eq_1‹s_13937› A_13947 m_13948 n_13949)} ->
              ((B_13950) n_13949) -> ((B_13950) m_13948)
  | A_13954 m_13955 n_13956 B_13957 refl_1 __13958 => __13958

#[logical]
def congr_4‹s_13959,r_13960,t_13961› :
  ∀ (A_13962 : Type‹s_13959›) ->
    ∀ (B_13963 : Type‹r_13960›) ->
      ∀ (m_13964 : A_13962) ->
        ∀ (n_13965 : A_13962) ->
          ∀ (f_13966 : forall‹t_13961›(__13967 : A_13962), B_13963) ->
            (eq_1‹s_13959› A_13962 m_13964 n_13965) ->
              (eq_1‹r_13960›
                B_13963 ((f_13966) m_13964) ((f_13966) n_13965))
:=
  fun congr_13969 :
    ∀ (A_13970 : Type‹s_13959›) ->
      ∀ (B_13971 : Type‹r_13960›) ->
        ∀ (m_13972 : A_13970) ->
          ∀ (n_13973 : A_13970) ->
            ∀ (f_13974 :
              forall‹t_13961›(__13975 : A_13970), B_13971) ->
              (eq_1‹s_13959› A_13970 m_13972 n_13973) ->
                (eq_1‹r_13960›
                  B_13971 ((f_13974) m_13972) ((f_13974) n_13973))
  | A_13977 B_13978 m_13979 n_13980 f_13981 refl_1 =>
    (refl_1‹r_13960› B_13978 ((f_13981) n_13980))

#[logical]
def axiom_K_5‹› :
  ∀ {A_13982 : U} ->
    ∀ {m_13983 : A_13982} ->
      ∀ (x_13984 : (eq_1‹U› A_13982 m_13983 m_13983)) ->
        (eq_1‹U›
          (eq_1‹U› A_13982 m_13983 m_13983) x_13984
          (refl_1‹U› A_13982 m_13983))
:=
  fun axiom_K_13985 :
    ∀ {A_13986 : U} ->
      ∀ {m_13987 : A_13986} ->
        ∀ (x_13988 : (eq_1‹U› A_13986 m_13987 m_13987)) ->
          (eq_1‹U›
            (eq_1‹U› A_13986 m_13987 m_13987) x_13988
            (refl_1‹U› A_13986 m_13987))
  | A_13989 m_13990 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_13989 m_13990 m_13990) (refl_1‹U› A_13989 m_13990))

#[program]
inductive sing_2‹s_13991,t_13992› (A_13993 : Type‹s_13991›):
  A_13993 -> Type‹t_13992›
where
| just_2 (m_13995 : A_13993) : (sing_2‹s_13991,t_13992› A_13993 m_13995)

#[logical]
def ssing_6‹s_13996› :
  ∀ (A_13997 : Type‹s_13996›) -> A_13997 -> Type‹s_13996›
:=
  fun ssing_13999 :
    ∀ (A_14000 : Type‹s_13996›) -> A_14000 -> Type‹s_13996›
  | A_14002 m_14003 => (sing_2‹s_13996,s_13996› A_14002 m_14003)

#[program]
def sing_elim_7‹s_14004,t_14005› :
  ∀ {A_14006 : Type‹s_14004›} ->
    ∀ {x_14007 : A_14006} ->
      (sing_2‹s_14004,t_14005› A_14006 x_14007) -> A_14006
:=
  fun sing_elim_14009 :
    ∀ {A_14010 : Type‹s_14004›} ->
      ∀ {x_14011 : A_14010} ->
        (sing_2‹s_14004,t_14005› A_14010 x_14011) -> A_14010
  | A_14013 x_14014 (just_2 m_14015) => m_14015

#[logical]
def sing_uniq_8‹s_14016,t_14017› :
  ∀ (A_14018 : Type‹s_14016›) ->
    ∀ (x0_14019 : A_14018) ->
      ∀ (x_14020 : (sing_2‹s_14016,t_14017› A_14018 x0_14019)) ->
        (eq_1‹s_14016›
          A_14018 x0_14019
          ((sing_elim_7‹s_14016,t_14017›) A_14018 x0_14019 x_14020))
:=
  fun sing_uniq_14021 :
    ∀ (A_14022 : Type‹s_14016›) ->
      ∀ (x0_14023 : A_14022) ->
        ∀ (x_14024 : (sing_2‹s_14016,t_14017› A_14022 x0_14023)) ->
          (eq_1‹s_14016›
            A_14022 x0_14023
            ((sing_elim_7‹s_14016,t_14017›) A_14022 x0_14023 x_14024))
  | A_14025 x0_14026 (just_2 m_14027) =>
    (refl_1‹s_14016› A_14025 m_14027)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_14028 : unit_3) -> (eq_1‹U› unit_3 x_14028 tt_3)
:=
  fun unit_eta_14029 :
    ∀ (x_14030 : unit_3) -> (eq_1‹U› unit_3 x_14030 tt_3)
  | x_14031 =>
    match x_14031 in
      ∀ (x0_14032 : unit_3) -o (eq_1‹U› unit_3 x0_14032 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_14034 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_14038 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __14041 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_14044 : bool_4 -> bool_4 -> bool_4
  | true_4 __14047 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_14050 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_14053 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_14056 : nat_5 -> nat_5 -> bool_4
  | zero_6 __14059 => true_4
  | (succ_7 n_14060) zero_6 => false_5
  | (succ_7 n_14061) (succ_7 n_14062) => ((lte_14056) n_14061 n_14062)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_14065 : nat_5 -> nat_5 -> bool_4
  | x_14068 y_14069 => ((lte_14) (succ_7‹› x_14068) y_14069)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_14071 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_14073) => n_14073

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_14076 : nat_5 -> nat_5 -> nat_5
  | zero_6 __14079 => __14079
  | (succ_7 n_14080) __14081 => (succ_7‹› ((add_14076) n_14080 __14081))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_14084 : nat_5 -> nat_5 -> nat_5
  | __14087 zero_6 => __14087
  | __14088 (succ_7 n_14089) => ((sub_14084) ((pred_16) __14088) n_14089)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_14092 : nat_5 -> nat_5 -> nat_5
  | zero_6 __14095 => zero_6
  | (succ_7 n_14096) __14097 =>
    ((add_17) __14097 ((mul_14092) n_14096 __14097))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_14100 : nat_5 -> nat_5 -> nat_5
  | x_14103 y_14104 =>
    match ((lt_15) x_14103 y_14104) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_14106 :=
        fun loop_14107 : nat_5 -> nat_5 -> nat_5
        | x_14110 y_14111 =>
          match ((sub_18) x_14110 ((pred_16) y_14111)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_14113) => (succ_7‹› ((loop_14107) n_14113 y_14111))
      in ((loop_14106) x_14103 y_14104)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_14116 : nat_5 -> nat_5 -> nat_5
  | x_14119 y_14120 =>
    ((sub_18) x_14119 ((mul_19) ((div_20) x_14119 y_14120) y_14120))

#[program]
inductive list_6‹s_14121,t_14122› (A_14123 : Type‹s_14121›):
  Type‹t_14122›
where
| nil_8 : (list_6‹s_14121,t_14122› A_14123)
| cons_9
    (hd_14124 : A_14123) (tl_14125 : (list_6‹s_14121,t_14122› A_14123))
    : (list_6‹s_14121,t_14122› A_14123)

#[program]
def free_list_22‹s_14126,t_14127› :
  ∀ {A_14128 : Type‹s_14126›} ->
    A_14128 -> unit_3 -> (list_6‹s_14126,t_14127› A_14128) -> unit_3
:=
  fun free_list_14132 :
    ∀ {A_14133 : Type‹s_14126›} ->
      A_14133 -> unit_3 -> (list_6‹s_14126,t_14127› A_14133) -> unit_3
  | A_14137 f_14138 nil_8 => tt_3
  | A_14139 f_14140 (cons_9 hd_14141 tl_14142) =>
    let __14143 := ((f_14140) hd_14141) in
    ((free_list_14132) A_14139 f_14140 tl_14142)

#[program]
inductive exists0_7‹s_14144,r_14145› (A_14146 : Type‹s_14144›) (B_14147 : 
A_14146 -> Type‹r_14145›): L where
| ex0_10
    {m_14149 : A_14146} (n_14150 : ((B_14147) m_14149))
    : (exists0_7‹s_14144,r_14145› A_14146 B_14147)

#[program]
inductive exists1_8‹s_14151,r_14152› (A_14153 : Type‹s_14151›) (B_14154 : 
A_14153 -> Type‹r_14152›): L where
| ex1_11
    (m_14156 : A_14153) (n_14157 : ((B_14154) m_14156))
    : (exists1_8‹s_14151,r_14152› A_14153 B_14154)

#[logical]
def prod0_23‹s_14158,r_14159› :
  Type‹s_14158› -> Type‹r_14159› -> L
:=
  fun prod0_14162 : Type‹s_14158› -> Type‹r_14159› -> L
  | A_14165 B_14166 =>
    (exists0_7‹s_14158,r_14159›
      A_14165 fun _14167 : A_14165 -> Type‹r_14159›
              | __14169 => B_14166)

#[logical]
def prod1_24‹s_14170,r_14171› :
  Type‹s_14170› -> Type‹r_14171› -> L
:=
  fun prod1_14174 : Type‹s_14170› -> Type‹r_14171› -> L
  | A_14177 B_14178 =>
    (exists1_8‹s_14170,r_14171›
      A_14177 fun _14179 : A_14177 -> Type‹r_14171›
              | __14181 => B_14178)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_14184 : int -> int -> int
  | x_14187 y_14188 =>
    let loop_14189 :=
      fun loop_14190 : int -> int -> int
      | acc_14193 y_14194 =>
        match (__lte__ y_14194 0) in bool_4 -o int with
        | true_4 => acc_14193
        | false_5 =>
          ((loop_14190) (__mul__ x_14187 acc_14193) (__sub__ y_14194 1))
    in ((loop_14189) 1 y_14188)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_14199 : int -> int -> int -> int
  | x_14203 y_14204 m_14205 =>
    let loop_14206 :=
      fun loop_14207 : int -> int -> int
      | acc_14210 y_14211 =>
        match (__lte__ y_14211 0) in bool_4 -o int with
        | true_4 => acc_14210
        | false_5 =>
          ((loop_14207)
            (__mod__ (__mul__ x_14203 acc_14210) m_14205) (__sub__ y_14211 1))
    in ((loop_14206) 1 y_14204)

#[program]
def ord_27‹› : char -> int :=
  fun ord_14214 : char -> int
  | c_14216 => (__ord__ c_14216)

#[program]
def chr_28‹› : int -> char :=
  fun chr_14218 : int -> char
  | i_14220 => (__chr__ i_14220)

#[program]
def str_29‹› : char -> string :=
  fun str_14222 : char -> string
  | c_14224 => (__push__ "" c_14224)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_14226 : string -> int
  | s_14228 => (__size__ s_14228)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_14230 : int -> string
  | i_14232 =>
    let aux_14233 :=
      fun aux_14234 : int -> string
      | i_14236 =>
        match (__lte__ 10 i_14236) in bool_4 -o string with
        | true_4 =>
          let r_14238 := (__mod__ i_14236 10) in
          let i_14239 := (__div__ i_14236 10) in
          (__push__ ((aux_14234) i_14239)
            ((chr_28) (__add__ r_14238 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_14236 ((ord_27) 0))))
    in
    match (__lt__ 0 i_14232) in bool_4 -o string with
    | true_4 => ((aux_14233) i_14232)
    | false_5 => (__cat__ "~" ((aux_14233) (__neg__ i_14232)))

#[program]
def split_32‹t_14241› :
  (list_6‹U,t_14241› int) ->
    ((prod1_24‹t_14241,t_14241›)
      (list_6‹U,t_14241› int) (list_6‹U,t_14241› int))
:=
  fun split_14243 :
    (list_6‹U,t_14241› int) ->
      ((prod1_24‹t_14241,t_14241›)
        (list_6‹U,t_14241› int) (list_6‹U,t_14241› int))
  | nil_8 =>
    (ex1_11‹t_14241,t_14241›
      (list_6‹U,t_14241› int)
      fun _14245 : (list_6‹U,t_14241› int) -> Type‹t_14241›
      | __14247 => (list_6‹U,t_14241› int) (nil_8‹U,t_14241› int)
      (nil_8‹U,t_14241› int))
  | (cons_9 hd_14248 nil_8) =>
    (ex1_11‹t_14241,t_14241›
      (list_6‹U,t_14241› int)
      fun _14249 : (list_6‹U,t_14241› int) -> Type‹t_14241›
      | __14251 => (list_6‹U,t_14241› int)
      (cons_9‹U,t_14241› int hd_14248 (nil_8‹U,t_14241› int))
      (nil_8‹U,t_14241› int))
  | (cons_9 hd_14252 (cons_9 hd_14253 tl_14254)) =>
    match ((split_14243) tl_14254) in
      ((prod1_24‹t_14241,t_14241›)
        (list_6‹U,t_14241› int) (list_6‹U,t_14241› int)) -o
        ((prod1_24‹t_14241,t_14241›)
          (list_6‹U,t_14241› int) (list_6‹U,t_14241› int))
    with
    | (ex1_11 m_14256 n_14257) =>
      (ex1_11‹t_14241,t_14241›
        (list_6‹U,t_14241› int)
        fun _14258 : (list_6‹U,t_14241› int) -> Type‹t_14241›
        | __14260 => (list_6‹U,t_14241› int)
        (cons_9‹U,t_14241› int hd_14252 m_14256)
        (cons_9‹U,t_14241› int hd_14253 n_14257))

#[program]
def merge_33‹t_14261› :
  (list_6‹U,t_14261› int) ->
    (list_6‹U,t_14261› int) -o (list_6‹U,t_14261› int)
:=
  fun merge_14264 :
    (list_6‹U,t_14261› int) ->
      (list_6‹U,t_14261› int) -o (list_6‹U,t_14261› int)
  | nil_8 __14267 => __14267
  | (cons_9 hd_14268 tl_14269) nil_8 =>
    (cons_9‹U,t_14261› int hd_14268 tl_14269)
  | (cons_9 hd_14270 tl_14271) (cons_9 hd_14272 tl_14273) =>
    match (__lte__ hd_14270 hd_14272) in
      bool_4 -o (list_6‹U,t_14261› int)
    with
    | true_4 =>
      (cons_9‹U,t_14261›
        int hd_14270
        ((merge_14264)
          tl_14271 (cons_9‹U,t_14261› int hd_14272 tl_14273)))
    | false_5 =>
      (cons_9‹U,t_14261›
        int hd_14272
        ((merge_14264)
          (cons_9‹U,t_14261› int hd_14270 tl_14271) tl_14273))

#[program]
def msort_34‹t_14275› :
  (list_6‹U,t_14275› int) -> (list_6‹U,t_14275› int)
:=
  fun msort_14277 :
    (list_6‹U,t_14275› int) -> (list_6‹U,t_14275› int)
  | nil_8 => (nil_8‹U,t_14275› int)
  | (cons_9 hd_14279 nil_8) =>
    (cons_9‹U,t_14275› int hd_14279 (nil_8‹U,t_14275› int))
  | (cons_9 hd_14280 (cons_9 hd_14281 tl_14282)) =>
    match ((split_32‹t_14275›)
            (cons_9‹U,t_14275›
              int hd_14280 (cons_9‹U,t_14275› int hd_14281 tl_14282))) in
      ((prod1_24‹t_14275,t_14275›)
        (list_6‹U,t_14275› int) (list_6‹U,t_14275› int)) -o
        (list_6‹U,t_14275› int)
    with
    | (ex1_11 m_14284 n_14285) =>
      ((merge_33‹t_14275›)
        ((msort_14277) m_14284) ((msort_14277) n_14285))

#[logical]
def cmsort_ch_35‹t_14286› : (list_6‹U,t_14286› int) -> L :=
  fun cmsort_ch_14288 : (list_6‹U,t_14286› int) -> L
  | xs_14290 =>
    ch⟨⇑(__14291 :
           ((ssing_6‹t_14286›)
             (list_6‹U,t_14286› int) ((msort_34‹t_14286›) xs_14290))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_14292› :
  int ->
    ∀ (zs_14294 : (list_6‹U,t_14292› int)) ->
      ((cmsort_ch_35‹t_14292›) zs_14294) -o IO unit_3
:=
  fun cmsort_worker_14296 :
    int ->
      ∀ (zs_14298 : (list_6‹U,t_14292› int)) ->
        ((cmsort_ch_35‹t_14292›) zs_14298) -o IO unit_3
  | spwn_14300 =>
    match (__lte__ spwn_14300 0) in
      bool_4 -o
        ∀ (zs_14302 : (list_6‹U,t_14292› int)) ->
          ((cmsort_ch_35‹t_14292›) zs_14302) -o IO unit_3
    with
    | true_4 =>
      fun _14304 :
        ∀ (zs_14305 : (list_6‹U,t_14292› int)) ->
          ((cmsort_ch_35‹t_14292›) zs_14305) -o IO unit_3
      | zs_14307 __14308 =>
        let* c_14309 :=
          ((send __14308)
            (just_2‹t_14292,t_14292›
              (list_6‹U,t_14292› int) ((msort_34‹t_14292›) zs_14307)))
        in close c_14309
    | false_5 =>
      fun _14310 :
        ∀ (zs_14311 : (list_6‹U,t_14292› int)) ->
          ((cmsort_ch_35‹t_14292›) zs_14311) -o IO unit_3
      | nil_8 __14313 =>
        let* c_14314 :=
          ((send __14313)
            (just_2‹t_14292,t_14292›
              (list_6‹U,t_14292› int) (nil_8‹U,t_14292› int)))
        in close c_14314
      | (cons_9 hd_14315 nil_8) __14316 =>
        let* c_14317 :=
          ((send __14316)
            (just_2‹t_14292,t_14292›
              (list_6‹U,t_14292› int)
              (cons_9‹U,t_14292› int hd_14315 (nil_8‹U,t_14292› int))))
        in close c_14317
      | (cons_9 hd_14318 (cons_9 hd_14319 tl_14320)) __14321 =>
        match ((split_32‹t_14292›)
                (cons_9‹U,t_14292›
                  int hd_14318 (cons_9‹U,t_14292› int hd_14319 tl_14320))),
        (refl_1‹t_14292›
          (list_6‹U,t_14292› int)
          match ((split_32‹t_14292›)
                  (cons_9‹U,t_14292›
                    int hd_14318
                    (cons_9‹U,t_14292› int hd_14319 tl_14320))) in
            ((prod1_24‹t_14292,t_14292›)
              (list_6‹U,t_14292› int) (list_6‹U,t_14292› int)) -o
              (list_6‹U,t_14292› int)
          with
          | (ex1_11 m_14323 n_14324) =>
            ((merge_33‹t_14292›)
              ((msort_34‹t_14292›) m_14323)
              ((msort_34‹t_14292›) n_14324))) in
          ∀ (h1_14325 :
            ((prod1_24‹t_14292,t_14292›)
              (list_6‹U,t_14292› int) (list_6‹U,t_14292› int))) -o
            {(eq_1‹t_14292›
               (list_6‹U,t_14292› int)
               match h1_14325 in
                 ((prod1_24‹t_14292,t_14292›)
                   (list_6‹U,t_14292› int) (list_6‹U,t_14292› int)) -o
                   (list_6‹U,t_14292› int)
               with
               | (ex1_11 m_14328 n_14329) =>
                 ((merge_33‹t_14292›)
                   ((msort_34‹t_14292›) m_14328)
                   ((msort_34‹t_14292›) n_14329))
               match ((split_32‹t_14292›)
                       (cons_9‹U,t_14292›
                         int hd_14318
                         (cons_9‹U,t_14292› int hd_14319 tl_14320))) in
                 ((prod1_24‹t_14292,t_14292›)
                   (list_6‹U,t_14292› int) (list_6‹U,t_14292› int)) -o
                   (list_6‹U,t_14292› int)
               with
               | (ex1_11 m_14331 n_14332) =>
                 ((merge_33‹t_14292›)
                   ((msort_34‹t_14292›) m_14331)
                   ((msort_34‹t_14292›) n_14332)))} -o
              IO unit_3
        with
        | (ex1_11 m_14333 n_14334), __14335 =>
          let* r1_14336 :=
            fork
              fun _14337 : ((cmsort_ch_35‹t_14292›) m_14333) -o IO unit_3
              | _14339 =>
                ((cmsort_worker_14296) (__sub__ spwn_14300 1) m_14333 _14339)
          in
          let* r2_14340 :=
            fork
              fun _14341 : ((cmsort_ch_35‹t_14292›) n_14334) -o IO unit_3
              | _14343 =>
                ((cmsort_worker_14296) (__sub__ spwn_14300 1) n_14334 _14343)
          in
          let* _14344 := recv r1_14336 in
          match _14344 in
            (exists1_8‹t_14292,L›
              ((ssing_6‹t_14292›)
                (list_6‹U,t_14292› int) ((msort_34‹t_14292›) m_14333))
              fun _14346 :
                ((ssing_6‹t_14292›)
                  (list_6‹U,t_14292› int)
                  ((msort_34‹t_14292›) m_14333)) -> L
              | __14348 => hc⟨•⟩) -o IO unit_3
          with
          | (ex1_11 m_14349 n_14350) =>
            let* __14351 := close n_14350 in
            let* _14352 := recv r2_14340 in
            match _14352 in
              (exists1_8‹t_14292,L›
                ((ssing_6‹t_14292›)
                  (list_6‹U,t_14292› int)
                  ((msort_34‹t_14292›) n_14334))
                fun _14354 :
                  ((ssing_6‹t_14292›)
                    (list_6‹U,t_14292› int)
                    ((msort_34‹t_14292›) n_14334)) -> L
                | __14356 => hc⟨•⟩) -o IO unit_3
            with
            | (ex1_11 m_14357 n_14358) =>
              let* __14359 := close n_14358 in
              match m_14349, m_14357 in
                ((ssing_6‹t_14292›)
                  (list_6‹U,t_14292› int)
                  ((msort_34‹t_14292›) m_14333)) -o
                  ((ssing_6‹t_14292›)
                    (list_6‹U,t_14292› int)
                    ((msort_34‹t_14292›) n_14334)) -o IO unit_3
              with
              | (just_2 m_14362), (just_2 m_14363) =>
                let zs1_14364 :=
                  ((just_2‹t_14292,t_14292›
                     (list_6‹U,t_14292› int)
                     ((merge_33‹t_14292›) m_14362 m_14363))
                    : ((ssing_6‹t_14292›)
                        (list_6‹U,t_14292› int)
                        ((merge_33‹t_14292›)
                          ((msort_34‹t_14292›) m_14333)
                          ((msort_34‹t_14292›) n_14334))))
                in
                let zs1_14365 :=
                  (((rwl_2‹t_14292,t_14292›)
                     (list_6‹U,t_14292› int)
                     ((merge_33‹t_14292›)
                       ((msort_34‹t_14292›) m_14333)
                       ((msort_34‹t_14292›) n_14334))
                     match ((split_32‹t_14292›)
                             (cons_9‹U,t_14292›
                               int hd_14318
                               (cons_9‹U,t_14292› int hd_14319 tl_14320))) in
                       ((prod1_24‹t_14292,t_14292›)
                         (list_6‹U,t_14292› int)
                         (list_6‹U,t_14292› int)) -o
                         (list_6‹U,t_14292› int)
                     with
                     | (ex1_11 m_14367 n_14368) =>
                       ((merge_33‹t_14292›)
                         ((msort_34‹t_14292›) m_14367)
                         ((msort_34‹t_14292›) n_14368))
                     fun _14369 :
                       (list_6‹U,t_14292› int) -> Type‹t_14292›
                     | __14371 =>
                       ((ssing_6‹t_14292›)
                         (list_6‹U,t_14292› int) __14371)
                     __14335 zs1_14364)
                    : ((ssing_6‹t_14292›)
                        (list_6‹U,t_14292› int)
                        ((msort_34‹t_14292›)
                          (cons_9‹U,t_14292›
                            int hd_14318
                            (cons_9‹U,t_14292› int hd_14319 tl_14320)))))
                in
                let* c_14372 := ((send __14321) zs1_14365) in
                let* __14373 := close c_14372 in return tt_3

#[program]
def cmsort_37‹t_14374› :
  ∀ (zs_14375 : (list_6‹U,t_14374› int)) ->
    IO ((ssing_6‹t_14374›)
         (list_6‹U,t_14374› int) ((msort_34‹t_14374›) zs_14375))
:=
  fun cmsort_14376 :
    ∀ (zs_14377 : (list_6‹U,t_14374› int)) ->
      IO ((ssing_6‹t_14374›)
           (list_6‹U,t_14374› int) ((msort_34‹t_14374›) zs_14377))
  | zs_14378 =>
    let* c_14379 :=
      fork
        fun _14380 : ((cmsort_ch_35‹t_14374›) zs_14378) -o IO unit_3
        | _14382 => ((cmsort_worker_36‹t_14374›) 4 zs_14378 _14382)
    in
    let* _14383 := recv c_14379 in
    match _14383 in
      (exists1_8‹t_14374,L›
        ((ssing_6‹t_14374›)
          (list_6‹U,t_14374› int) ((msort_34‹t_14374›) zs_14378))
        fun _14385 :
          ((ssing_6‹t_14374›)
            (list_6‹U,t_14374› int) ((msort_34‹t_14374›) zs_14378)) ->
            L
        | __14387 => hc⟨•⟩) -o
        IO ((ssing_6‹t_14374›)
             (list_6‹U,t_14374› int) ((msort_34‹t_14374›) zs_14378))
    with
    | (ex1_11 m_14388 n_14389) =>
      let* __14390 := close n_14389 in return m_14388

#[program]
def mklist_38‹t_14391› : int -> (list_6‹U,t_14391› int) :=
  fun mklist_14393 : int -> (list_6‹U,t_14391› int)
  | n_14395 =>
    match (__lte__ n_14395 0) in bool_4 -o (list_6‹U,t_14391› int) with
    | true_4 => (nil_8‹U,t_14391› int)
    | false_5 =>
      (cons_9‹U,t_14391›
        int n_14395 ((mklist_14393) (__sub__ n_14395 1)))

#[program]
def list_len_39‹t_14397› : (list_6‹U,t_14397› int) -> int :=
  fun list_len_14399 : (list_6‹U,t_14397› int) -> int
  | nil_8 => 0
  | (cons_9 hd_14401 tl_14402) => (__add__ 1 ((list_len_14399) tl_14402))

#[program]
def string_of_list_40‹t_14403› : (list_6‹U,t_14403› int) -> string :=
  fun string_of_list_14405 : (list_6‹U,t_14403› int) -> string
  | nil_8 => "nil"
  | (cons_9 hd_14407 tl_14408) =>
    (__cat__ (__cat__ ((string_of_int_31) hd_14407) " :: ")
      ((string_of_list_14405) tl_14408))

#[program]
def main_41‹› : IO unit_3 :=
  let test_14409 := ((mklist_38‹L›) 2000000) in
  let* _14410 := ((cmsort_37‹L›) test_14409) in
  match _14410 in
    ((ssing_6‹L›) (list_6‹U,L› int) ((msort_34‹L›) test_14409)) -o
      IO unit_3
  with
  | (just_2 m_14412) =>
    let len_14413 := ((list_len_39‹L›) m_14412) in
    print ((string_of_int_31) len_14413)

-----------------------------------------

#[program]
def idU_43 := fun id_25796 (A_25797) -> (m_25798) ->
                m_25798

#[program]
def idL_42 := fun id_25799 (A_25800) -> (m_25801) ->
                m_25801

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_25802 {A_25803} -> {m_25804} -> {n_25805} -> {B_25806} ->
  {__25807} -> (__25808) ->
    match {NULL} with
    | reflU_13  => __25808
    end

#[program]
def rwlUL_46 :=
  fun rwl_25809 {A_25810} -> {m_25811} -> {n_25812} -> {B_25813} ->
  {__25814} -> (__25815) ->
    match {NULL} with
    | reflU_13  => __25815
    end

#[program]
def rwlLU_45 :=
  fun rwl_25816 {A_25817} -> {m_25818} -> {n_25819} -> {B_25820} ->
  {__25821} -> (__25822) ->
    match {NULL} with
    | reflL_12  => __25822
    end

#[program]
def rwlLL_44 :=
  fun rwl_25823 {A_25824} -> {m_25825} -> {n_25826} -> {B_25827} ->
  {__25828} -> (__25829) ->
    match {NULL} with
    | reflL_12  => __25829
    end

#[program]
def rwrUU_51 :=
  fun rwr_25830 {A_25831} -> {m_25832} -> {n_25833} -> {B_25834} ->
  {__25835} -> (__25836) ->
    match {NULL} with
    | reflU_13  => __25836
    end

#[program]
def rwrUL_50 :=
  fun rwr_25837 {A_25838} -> {m_25839} -> {n_25840} -> {B_25841} ->
  {__25842} -> (__25843) ->
    match {NULL} with
    | reflU_13  => __25843
    end

#[program]
def rwrLU_49 :=
  fun rwr_25844 {A_25845} -> {m_25846} -> {n_25847} -> {B_25848} ->
  {__25849} -> (__25850) ->
    match {NULL} with
    | reflL_12  => __25850
    end

#[program]
def rwrLL_48 :=
  fun rwr_25851 {A_25852} -> {m_25853} -> {n_25854} -> {B_25855} ->
  {__25856} -> (__25857) ->
    match {NULL} with
    | reflL_12  => __25857
    end

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_25858 {A_25859} -> {x_25860} -> (__25861) ->
    match __25861 with
    | justUU_17 m_25862 => m_25862
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_25863 {A_25864} -> {x_25865} -> (__25866) ->
    match __25866 with
    | justUL_16 m_25867 => m_25867
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_25868 {A_25869} -> {x_25870} -> (__25871) ->
    match __25871 with
    
    end

#[program]
def sing_elimLL_62 :=
  fun sing_elim_25872 {A_25873} -> {x_25874} -> (__25875) ->
    match __25875 with
    | justLL_14 m_25876 => m_25876
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_25877 (__25878) ->
    match __25878 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_25879 (__25880) -> (__25881) ->
    match __25880 with
    | true_4  =>
      match __25881 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_25882 (__25883) -> (__25884) ->
    match __25883 with
    | true_4  => true_4
    | false_5  =>
      match __25884 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_25885 (__25886) -> (__25887) -o
    match __25886 with
    | true_4  =>
      match __25887 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __25887 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_25888 (__25889) -> (__25890) ->
    match __25889 with
    | zero_6  => true_4
    | succ_7 n_25891 =>
      match __25890 with
      | zero_6  => false_5 | succ_7 n_25892 => ((lte_25888) n_25891 n_25892)
      end
    end

#[program]
def lt_15 :=
  fun lt_25893 (x_25894) -> (y_25895) ->
    ((lte_14) (succ_7 x_25894) y_25895)

#[program]
def pred_16 :=
  fun pred_25896 (__25897) ->
    match __25897 with
    | zero_6  => zero_6 | succ_7 n_25898 => n_25898
    end

#[program]
def add_17 :=
  fun add_25899 (__25900) -> (__25901) ->
    match __25900 with
    | zero_6  => __25901
    | succ_7 n_25902 => (succ_7 ((add_25899) n_25902 __25901))
    end

#[program]
def sub_18 :=
  fun sub_25903 (__25904) -> (__25905) ->
    match __25905 with
    | zero_6  => __25904
    | succ_7 n_25906 => ((sub_25903) ((pred_16) __25904) n_25906)
    end

#[program]
def mul_19 :=
  fun mul_25907 (__25908) -> (__25909) ->
    match __25908 with
    | zero_6  => zero_6
    | succ_7 n_25910 => ((add_17) __25909 ((mul_25907) n_25910 __25909))
    end

#[program]
def div_20 :=
  fun div_25911 (x_25912) -> (y_25913) ->
    match ((lt_15) x_25912 y_25913) with
    | true_4  => zero_6
    | false_5  =>
      let loop_25914 :=
        fun loop_25915 (x_25916) -> (y_25917) ->
          match ((sub_18) x_25916 ((pred_16) y_25917)) with
          | zero_6  => zero_6
          | succ_7 n_25918 => (succ_7 ((loop_25915) n_25918 y_25917))
          end
      in ((loop_25914) x_25912 y_25913)
    end

#[program]
def rem_21 :=
  fun rem_25919 (x_25920) -> (y_25921) ->
    ((sub_18) x_25920 ((mul_19) ((div_20) x_25920 y_25921) y_25921))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_25922 {A_25923} -> (f_25924) -> (__25925) ->
    match __25925 with
    | nilUU_24  => tt_3
    | consUU_25 hd_25926 tl_25927 =>
      let __25928 := ((f_25924) hd_25926) in
      ((free_list_25922) NULL f_25924 tl_25927)
    end

#[program]
def free_listUL_72 :=
  fun free_list_25929 {A_25930} -> (f_25931) -> (__25932) ->
    match __25932 with
    | nilUL_22  => tt_3
    | consUL_23 hd_25933 tl_25934 =>
      let __25935 := ((f_25931) hd_25933) in
      ((free_list_25929) NULL f_25931 tl_25934)
    end

#[program]
def free_listLL_70 :=
  fun free_list_25936 {A_25937} -> (f_25938) -> (__25939) ->
    match __25939 with
    | nilLL_18  => tt_3
    | consLL_19 hd_25940 tl_25941 =>
      let __25942 := ((f_25938) hd_25940) in
      ((free_list_25936) NULL f_25938 tl_25941)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_25943 (x_25944) -> (y_25945) ->
    let loop_25946 :=
      fun loop_25947 (acc_25948) -> (y_25949) ->
        match (__lte__ y_25949 0) with
        | true_4  => acc_25948
        | false_5  =>
          ((loop_25947) (__mul__ x_25944 acc_25948) (__sub__ y_25949 1))
        end
    in ((loop_25946) 1 y_25945)

#[program]
def powm_26 :=
  fun powm_25950 (x_25951) -> (y_25952) -> (m_25953) ->
    let loop_25954 :=
      fun loop_25955 (acc_25956) -> (y_25957) ->
        match (__lte__ y_25957 0) with
        | true_4  => acc_25956
        | false_5  =>
          ((loop_25955)
            (__mod__ (__mul__ x_25951 acc_25956) m_25953) (__sub__ y_25957 1))
        end
    in ((loop_25954) 1 y_25952)

#[program]
def ord_27 := fun ord_25958 (c_25959) ->
                (__ord__ c_25959)

#[program]
def chr_28 := fun chr_25960 (i_25961) ->
                (__chr__ i_25961)

#[program]
def str_29 := fun str_25962 (c_25963) ->
                (__push__ "" c_25963)

#[program]
def strlen_30 := fun strlen_25964 (s_25965) ->
                   (__size__ s_25965)

#[program]
def string_of_int_31 :=
  fun string_of_int_25966 (i_25967) ->
    let aux_25968 :=
      fun aux_25969 (i_25970) ->
        match (__lte__ 10 i_25970) with
        | true_4  =>
          let r_25971 := (__mod__ i_25970 10) in
          let i_25972 := (__div__ i_25970 10) in
          (__push__ ((aux_25969) i_25972)
            ((chr_28) (__add__ r_25971 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_25970 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_25967) with
    | true_4  => ((aux_25968) i_25967)
    | false_5  => (__cat__ "~" ((aux_25968) (__neg__ i_25967)))
    end

#[program]
def splitU_83 :=
  fun split_25973 (__25974) ->
    match __25974 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_25975 tl_25976 =>
      match tl_25976 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_25975 nilUU_24) nilUU_24)
      | consUU_25 hd_25977 tl_25978 =>
        match ((split_25973) tl_25978) with
        | ex1UU_33 m_25979 n_25980 =>
          (ex1UU_33
            (consUU_25 hd_25975 m_25979) (consUU_25 hd_25977 n_25980))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_25981 (__25982) ->
    match __25982 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_25983 tl_25984 =>
      match tl_25984 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_25983 nilUL_22) nilUL_22)
      | consUL_23 hd_25985 tl_25986 =>
        match ((split_25981) tl_25986) with
        | ex1LL_30 m_25987 n_25988 =>
          (ex1LL_30
            (consUL_23 hd_25983 m_25987) (consUL_23 hd_25985 n_25988))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_25989 (__25990) -> (__25991) -o
    match __25990 with
    | nilUU_24  => __25991
    | consUU_25 hd_25992 tl_25993 =>
      match __25991 with
      | nilUU_24  => (consUU_25 hd_25992 tl_25993)
      | consUU_25 hd_25994 tl_25995 =>
        match (__lte__ hd_25992 hd_25994) with
        | true_4  =>
          (consUU_25
            hd_25992 ((merge_25989) tl_25993 (consUU_25 hd_25994 tl_25995)))
        | false_5  =>
          (consUU_25
            hd_25994 ((merge_25989) (consUU_25 hd_25992 tl_25993) tl_25995))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_25996 (__25997) -> (__25998) -o
    match __25997 with
    | nilUL_22  => __25998
    | consUL_23 hd_25999 tl_26000 =>
      match __25998 with
      | nilUL_22  => (consUL_23 hd_25999 tl_26000)
      | consUL_23 hd_26001 tl_26002 =>
        match (__lte__ hd_25999 hd_26001) with
        | true_4  =>
          (consUL_23
            hd_25999 ((merge_25996) tl_26000 (consUL_23 hd_26001 tl_26002)))
        | false_5  =>
          (consUL_23
            hd_26001 ((merge_25996) (consUL_23 hd_25999 tl_26000) tl_26002))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_26003 (__26004) ->
    match __26004 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_26005 tl_26006 =>
      match tl_26006 with
      | nilUU_24  => (consUU_25 hd_26005 nilUU_24)
      | consUU_25 hd_26007 tl_26008 =>
        match ((splitU_83)
                (consUU_25 hd_26005 (consUU_25 hd_26007 tl_26008))) with
        | ex1UU_33 m_26009 n_26010 =>
          ((mergeU_85) ((msort_26003) m_26009) ((msort_26003) n_26010))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_26011 (__26012) ->
    match __26012 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_26013 tl_26014 =>
      match tl_26014 with
      | nilUL_22  => (consUL_23 hd_26013 nilUL_22)
      | consUL_23 hd_26015 tl_26016 =>
        match ((splitL_82)
                (consUL_23 hd_26013 (consUL_23 hd_26015 tl_26016))) with
        | ex1LL_30 m_26017 n_26018 =>
          ((mergeL_84) ((msort_26011) m_26017) ((msort_26011) n_26018))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_26019 (spwn_26020) ->
    match (__lte__ spwn_26020 0) with
    | true_4  =>
      fun _26021 (zs_26022) -> (__26023) -o
        let* c_26024 :=
          ((send[R,U] __26023) (justUU_17 ((msortU_87) zs_26022)))
        in close[true] c_26024
    | false_5  =>
      fun _26025 (zs_26026) -> (__26027) -o
        match zs_26026 with
        | nilUU_24  =>
          let* c_26028 := ((send[R,U] __26027) (justUU_17 nilUU_24)) in
          close[true] c_26028
        | consUU_25 hd_26029 tl_26030 =>
          match tl_26030 with
          | nilUU_24  =>
            let* c_26031 :=
              ((send[R,U] __26027) (justUU_17 (consUU_25 hd_26029 nilUU_24)))
            in close[true] c_26031
          | consUU_25 hd_26032 tl_26033 =>
            match ((splitU_83)
                    (consUU_25 hd_26029 (consUU_25 hd_26032 tl_26033))) with
            | ex1UU_33 m_26034 n_26035 =>
              let* r1_26036 :=
                fork
                  fun _26037 (_26038) -o
                    ((cmsort_worker_26019)
                      (__sub__ spwn_26020 1) m_26034 _26038)
              in
              let* r2_26039 :=
                fork
                  fun _26040 (_26041) -o
                    ((cmsort_worker_26019)
                      (__sub__ spwn_26020 1) n_26035 _26041)
              in
              let* _26042 := recv[R,U] r1_26036 in
              match _26042 with
              | ex1UL_32 m_26043 n_26044 =>
                let* __26045 := close[false] n_26044 in
                let* _26046 := recv[R,U] r2_26039 in
                match _26046 with
                | ex1UL_32 m_26047 n_26048 =>
                  let* __26049 := close[false] n_26048 in
                  match m_26043 with
                  | justUU_17 m_26050 =>
                    match m_26047 with
                    | justUU_17 m_26051 =>
                      let zs1_26052 :=
                        (justUU_17 ((mergeU_85) m_26050 m_26051))
                      in
                      let zs1_26053 :=
                        ((rwlUU_47) NULL NULL NULL NULL NULL zs1_26052)
                      in
                      let* c_26054 := ((send[R,U] __26027) zs1_26053) in
                      let* __26055 := close[true] c_26054 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_26056 (spwn_26057) ->
    match (__lte__ spwn_26057 0) with
    | true_4  =>
      fun _26058 (zs_26059) -> (__26060) -o
        let* c_26061 :=
          ((send[R,L] __26060) (justLL_14 ((msortL_86) zs_26059)))
        in close[true] c_26061
    | false_5  =>
      fun _26062 (zs_26063) -> (__26064) -o
        match zs_26063 with
        | nilUL_22  =>
          let* c_26065 := ((send[R,L] __26064) (justLL_14 nilUL_22)) in
          close[true] c_26065
        | consUL_23 hd_26066 tl_26067 =>
          match tl_26067 with
          | nilUL_22  =>
            let* c_26068 :=
              ((send[R,L] __26064) (justLL_14 (consUL_23 hd_26066 nilUL_22)))
            in close[true] c_26068
          | consUL_23 hd_26069 tl_26070 =>
            match ((splitL_82)
                    (consUL_23 hd_26066 (consUL_23 hd_26069 tl_26070))) with
            | ex1LL_30 m_26071 n_26072 =>
              let* r1_26073 :=
                fork
                  fun _26074 (_26075) -o
                    ((cmsort_worker_26056)
                      (__sub__ spwn_26057 1) m_26071 _26075)
              in
              let* r2_26076 :=
                fork
                  fun _26077 (_26078) -o
                    ((cmsort_worker_26056)
                      (__sub__ spwn_26057 1) n_26072 _26078)
              in
              let* _26079 := recv[R,L] r1_26073 in
              match _26079 with
              | ex1LL_30 m_26080 n_26081 =>
                let* __26082 := close[false] n_26081 in
                let* _26083 := recv[R,L] r2_26076 in
                match _26083 with
                | ex1LL_30 m_26084 n_26085 =>
                  let* __26086 := close[false] n_26085 in
                  match m_26080 with
                  | justLL_14 m_26087 =>
                    match m_26084 with
                    | justLL_14 m_26088 =>
                      let zs1_26089 :=
                        (justLL_14 ((mergeL_84) m_26087 m_26088))
                      in
                      let zs1_26090 :=
                        ((rwlLL_44) NULL NULL NULL NULL NULL zs1_26089)
                      in
                      let* c_26091 := ((send[R,L] __26064) zs1_26090) in
                      let* __26092 := close[true] c_26091 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_26093 (zs_26094) ->
    let* c_26095 :=
      fork fun _26096 (_26097) -o
             ((cmsort_workerU_91) 4 zs_26094 _26097)
    in
    let* _26098 := recv[R,U] c_26095 in
    match _26098 with
    | ex1UL_32 m_26099 n_26100 =>
      let* __26101 := close[false] n_26100 in return m_26099
    end

#[program]
def cmsortL_92 :=
  fun cmsort_26102 (zs_26103) ->
    let* c_26104 :=
      fork fun _26105 (_26106) -o
             ((cmsort_workerL_90) 4 zs_26103 _26106)
    in
    let* _26107 := recv[R,L] c_26104 in
    match _26107 with
    | ex1LL_30 m_26108 n_26109 =>
      let* __26110 := close[false] n_26109 in return m_26108
    end

#[program]
def mklistU_95 :=
  fun mklist_26111 (n_26112) ->
    match (__lte__ n_26112 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_26112 ((mklist_26111) (__sub__ n_26112 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_26113 (n_26114) ->
    match (__lte__ n_26114 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_26114 ((mklist_26113) (__sub__ n_26114 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_26115 (__26116) ->
    match __26116 with
    | nilUU_24  => 0
    | consUU_25 hd_26117 tl_26118 => (__add__ 1 ((list_len_26115) tl_26118))
    end

#[program]
def list_lenL_96 :=
  fun list_len_26119 (__26120) ->
    match __26120 with
    | nilUL_22  => 0
    | consUL_23 hd_26121 tl_26122 => (__add__ 1 ((list_len_26119) tl_26122))
    end

#[program]
def string_of_listU_99 :=
  fun string_of_list_26123 (__26124) ->
    match __26124 with
    | nilUU_24  => "nil"
    | consUU_25 hd_26125 tl_26126 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26125) " :: ")
        ((string_of_list_26123) tl_26126))
    end

#[program]
def string_of_listL_98 :=
  fun string_of_list_26127 (__26128) ->
    match __26128 with
    | nilUL_22  => "nil"
    | consUL_23 hd_26129 tl_26130 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26129) " :: ")
        ((string_of_list_26127) tl_26130))
    end

#[program]
def main :=
  let test_26131 := ((mklistL_94) 2000000) in
  let* _26132 := ((cmsortL_92) test_26131) in
  match _26132 with
  | justLL_14 m_26133 =>
    let len_26134 := ((list_lenL_96) m_26133) in
    print ((string_of_int_31) len_26134)
  end

-----------------------------------------

#[program]
def idU_43 := fun id_26474 (A_26475) -> (m_26476) ->
                m_26476

#[program]
def idL_42 := fun id_26477 (A_26478) -> (m_26479) ->
                m_26479

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_26480 {A_26481} -> {m_26482} -> {n_26483} -> {B_26484} ->
  {__26485} -> (__26486) ->
    __26486

#[program]
def rwlUL_46 :=
  fun rwl_26487 {A_26488} -> {m_26489} -> {n_26490} -> {B_26491} ->
  {__26492} -> (__26493) ->
    __26493

#[program]
def rwlLU_45 :=
  fun rwl_26494 {A_26495} -> {m_26496} -> {n_26497} -> {B_26498} ->
  {__26499} -> (__26500) ->
    __26500

#[program]
def rwlLL_44 :=
  fun rwl_26501 {A_26502} -> {m_26503} -> {n_26504} -> {B_26505} ->
  {__26506} -> (__26507) ->
    __26507

#[program]
def rwrUU_51 :=
  fun rwr_26508 {A_26509} -> {m_26510} -> {n_26511} -> {B_26512} ->
  {__26513} -> (__26514) ->
    __26514

#[program]
def rwrUL_50 :=
  fun rwr_26515 {A_26516} -> {m_26517} -> {n_26518} -> {B_26519} ->
  {__26520} -> (__26521) ->
    __26521

#[program]
def rwrLU_49 :=
  fun rwr_26522 {A_26523} -> {m_26524} -> {n_26525} -> {B_26526} ->
  {__26527} -> (__26528) ->
    __26528

#[program]
def rwrLL_48 :=
  fun rwr_26529 {A_26530} -> {m_26531} -> {n_26532} -> {B_26533} ->
  {__26534} -> (__26535) ->
    __26535

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_26536 {A_26537} -> {x_26538} -> (__26539) ->
    match __26539 with
    | justUU_17 m_26540 => m_26540
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_26541 {A_26542} -> {x_26543} -> (__26544) ->
    match __26544 with
    | justUL_16 m_26545 => m_26545
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_26546 {A_26547} -> {x_26548} -> (__26549) ->
    !!

#[program]
def sing_elimLL_62 :=
  fun sing_elim_26550 {A_26551} -> {x_26552} -> (__26553) ->
    match __26553 with
    | justLL_14 m_26554 => m_26554
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_26555 (__26556) ->
    match __26556 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_26557 (__26558) -> (__26559) ->
    match __26558 with
    | true_4  =>
      match __26559 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_26560 (__26561) -> (__26562) ->
    match __26561 with
    | true_4  => true_4
    | false_5  =>
      match __26562 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_26563 (__26564) -> (__26565) -o
    match __26564 with
    | true_4  =>
      match __26565 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __26565 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_26566 (__26567) -> (__26568) ->
    match __26567 with
    | zero_6  => true_4
    | succ_7 n_26569 =>
      match __26568 with
      | zero_6  => false_5 | succ_7 n_26570 => ((lte_26566) n_26569 n_26570)
      end
    end

#[program]
def lt_15 :=
  fun lt_26571 (x_26572) -> (y_26573) ->
    ((lte_14) (succ_7 x_26572) y_26573)

#[program]
def pred_16 :=
  fun pred_26574 (__26575) ->
    match __26575 with
    | zero_6  => zero_6 | succ_7 n_26576 => n_26576
    end

#[program]
def add_17 :=
  fun add_26577 (__26578) -> (__26579) ->
    match __26578 with
    | zero_6  => __26579
    | succ_7 n_26580 => (succ_7 ((add_26577) n_26580 __26579))
    end

#[program]
def sub_18 :=
  fun sub_26581 (__26582) -> (__26583) ->
    match __26583 with
    | zero_6  => __26582
    | succ_7 n_26584 => ((sub_26581) ((pred_16) __26582) n_26584)
    end

#[program]
def mul_19 :=
  fun mul_26585 (__26586) -> (__26587) ->
    match __26586 with
    | zero_6  => zero_6
    | succ_7 n_26588 => ((add_17) __26587 ((mul_26585) n_26588 __26587))
    end

#[program]
def div_20 :=
  fun div_26589 (x_26590) -> (y_26591) ->
    match ((lt_15) x_26590 y_26591) with
    | true_4  => zero_6
    | false_5  =>
      let loop_26592 :=
        fun loop_26593 (x_26594) -> (y_26595) ->
          match ((sub_18) x_26594 ((pred_16) y_26595)) with
          | zero_6  => zero_6
          | succ_7 n_26596 => (succ_7 ((loop_26593) n_26596 y_26595))
          end
      in ((loop_26592) x_26590 y_26591)
    end

#[program]
def rem_21 :=
  fun rem_26597 (x_26598) -> (y_26599) ->
    ((sub_18) x_26598 ((mul_19) ((div_20) x_26598 y_26599) y_26599))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_26600 {A_26601} -> (f_26602) -> (__26603) ->
    match __26603 with
    | nilUU_24  => tt_3
    | consUU_25 hd_26604 tl_26605 =>
      let __26606 := ((f_26602) hd_26604) in
      ((free_list_26600) NULL f_26602 tl_26605)
    end

#[program]
def free_listUL_72 :=
  fun free_list_26607 {A_26608} -> (f_26609) -> (__26610) ->
    match __26610 with
    | nilUL_22  => tt_3
    | consUL_23 hd_26611 tl_26612 =>
      let __26613 := ((f_26609) hd_26611) in
      ((free_list_26607) NULL f_26609 tl_26612)
    end

#[program]
def free_listLL_70 :=
  fun free_list_26614 {A_26615} -> (f_26616) -> (__26617) ->
    match __26617 with
    | nilLL_18  => tt_3
    | consLL_19 hd_26618 tl_26619 =>
      let __26620 := ((f_26616) hd_26618) in
      ((free_list_26614) NULL f_26616 tl_26619)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_26621 (x_26622) -> (y_26623) ->
    let loop_26624 :=
      fun loop_26625 (acc_26626) -> (y_26627) ->
        match (__lte__ y_26627 0) with
        | true_4  => acc_26626
        | false_5  =>
          ((loop_26625) (__mul__ x_26622 acc_26626) (__sub__ y_26627 1))
        end
    in ((loop_26624) 1 y_26623)

#[program]
def powm_26 :=
  fun powm_26628 (x_26629) -> (y_26630) -> (m_26631) ->
    let loop_26632 :=
      fun loop_26633 (acc_26634) -> (y_26635) ->
        match (__lte__ y_26635 0) with
        | true_4  => acc_26634
        | false_5  =>
          ((loop_26633)
            (__mod__ (__mul__ x_26629 acc_26634) m_26631) (__sub__ y_26635 1))
        end
    in ((loop_26632) 1 y_26630)

#[program]
def ord_27 := fun ord_26636 (c_26637) ->
                (__ord__ c_26637)

#[program]
def chr_28 := fun chr_26638 (i_26639) ->
                (__chr__ i_26639)

#[program]
def str_29 := fun str_26640 (c_26641) ->
                (__push__ "" c_26641)

#[program]
def strlen_30 := fun strlen_26642 (s_26643) ->
                   (__size__ s_26643)

#[program]
def string_of_int_31 :=
  fun string_of_int_26644 (i_26645) ->
    let aux_26646 :=
      fun aux_26647 (i_26648) ->
        match (__lte__ 10 i_26648) with
        | true_4  =>
          let r_26649 := (__mod__ i_26648 10) in
          let i_26650 := (__div__ i_26648 10) in
          (__push__ ((aux_26647) i_26650)
            ((chr_28) (__add__ r_26649 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_26648 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_26645) with
    | true_4  => ((aux_26646) i_26645)
    | false_5  => (__cat__ "~" ((aux_26646) (__neg__ i_26645)))
    end

#[program]
def splitU_83 :=
  fun split_26651 (__26652) ->
    match __26652 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_26653 tl_26654 =>
      match tl_26654 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_26653 nilUU_24) nilUU_24)
      | consUU_25 hd_26655 tl_26656 =>
        match ((split_26651) tl_26656) with
        | ex1UU_33 m_26657 n_26658 =>
          (ex1UU_33
            (consUU_25 hd_26653 m_26657) (consUU_25 hd_26655 n_26658))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_26659 (__26660) ->
    match __26660 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_26661 tl_26662 =>
      match tl_26662 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_26661 nilUL_22) nilUL_22)
      | consUL_23 hd_26663 tl_26664 =>
        match ((split_26659) tl_26664) with
        | ex1LL_30 m_26665 n_26666 =>
          (ex1LL_30
            (consUL_23 hd_26661 m_26665) (consUL_23 hd_26663 n_26666))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_26667 (__26668) -> (__26669) -o
    match __26668 with
    | nilUU_24  => __26669
    | consUU_25 hd_26670 tl_26671 =>
      match __26669 with
      | nilUU_24  => (consUU_25 hd_26670 tl_26671)
      | consUU_25 hd_26672 tl_26673 =>
        match (__lte__ hd_26670 hd_26672) with
        | true_4  =>
          (consUU_25
            hd_26670 ((merge_26667) tl_26671 (consUU_25 hd_26672 tl_26673)))
        | false_5  =>
          (consUU_25
            hd_26672 ((merge_26667) (consUU_25 hd_26670 tl_26671) tl_26673))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_26674 (__26675) -> (__26676) -o
    match __26675 with
    | nilUL_22  => __26676
    | consUL_23 hd_26677 tl_26678 =>
      match __26676 with
      | nilUL_22  => (consUL_23 hd_26677 tl_26678)
      | consUL_23 hd_26679 tl_26680 =>
        match (__lte__ hd_26677 hd_26679) with
        | true_4  =>
          (consUL_23
            hd_26677 ((merge_26674) tl_26678 (consUL_23 hd_26679 tl_26680)))
        | false_5  =>
          (consUL_23
            hd_26679 ((merge_26674) (consUL_23 hd_26677 tl_26678) tl_26680))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_26681 (__26682) ->
    match __26682 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_26683 tl_26684 =>
      match tl_26684 with
      | nilUU_24  => (consUU_25 hd_26683 nilUU_24)
      | consUU_25 hd_26685 tl_26686 =>
        match ((splitU_83)
                (consUU_25 hd_26683 (consUU_25 hd_26685 tl_26686))) with
        | ex1UU_33 m_26687 n_26688 =>
          ((mergeU_85) ((msort_26681) m_26687) ((msort_26681) n_26688))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_26689 (__26690) ->
    match __26690 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_26691 tl_26692 =>
      match tl_26692 with
      | nilUL_22  => (consUL_23 hd_26691 nilUL_22)
      | consUL_23 hd_26693 tl_26694 =>
        match ((splitL_82)
                (consUL_23 hd_26691 (consUL_23 hd_26693 tl_26694))) with
        | ex1LL_30 m_26695 n_26696 =>
          ((mergeL_84) ((msort_26689) m_26695) ((msort_26689) n_26696))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_26697 (spwn_26698) ->
    match (__lte__ spwn_26698 0) with
    | true_4  =>
      fun _26699 (zs_26700) -> (__26701) -o
        let* c_26702 :=
          ((send[R,U] __26701) (justUU_17 ((msortU_87) zs_26700)))
        in close[true] c_26702
    | false_5  =>
      fun _26703 (zs_26704) -> (__26705) -o
        match zs_26704 with
        | nilUU_24  =>
          let* c_26706 := ((send[R,U] __26705) (justUU_17 nilUU_24)) in
          close[true] c_26706
        | consUU_25 hd_26707 tl_26708 =>
          match tl_26708 with
          | nilUU_24  =>
            let* c_26709 :=
              ((send[R,U] __26705) (justUU_17 (consUU_25 hd_26707 nilUU_24)))
            in close[true] c_26709
          | consUU_25 hd_26710 tl_26711 =>
            match ((splitU_83)
                    (consUU_25 hd_26707 (consUU_25 hd_26710 tl_26711))) with
            | ex1UU_33 m_26712 n_26713 =>
              let* r1_26714 :=
                fork
                  fun _26715 (_26716) -o
                    ((cmsort_worker_26697)
                      (__sub__ spwn_26698 1) m_26712 _26716)
              in
              let* r2_26717 :=
                fork
                  fun _26718 (_26719) -o
                    ((cmsort_worker_26697)
                      (__sub__ spwn_26698 1) n_26713 _26719)
              in
              let* _26720 := recv[R,U] r1_26714 in
              match _26720 with
              | ex1UL_32 m_26721 n_26722 =>
                let* __26723 := close[false] n_26722 in
                let* _26724 := recv[R,U] r2_26717 in
                match _26724 with
                | ex1UL_32 m_26725 n_26726 =>
                  let* __26727 := close[false] n_26726 in
                  match m_26721 with
                  | justUU_17 m_26728 =>
                    match m_26725 with
                    | justUU_17 m_26729 =>
                      let zs1_26730 :=
                        (justUU_17 ((mergeU_85) m_26728 m_26729))
                      in
                      let zs1_26731 :=
                        ((rwlUU_47) NULL NULL NULL NULL NULL zs1_26730)
                      in
                      let* c_26732 := ((send[R,U] __26705) zs1_26731) in
                      let* __26733 := close[true] c_26732 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_26734 (spwn_26735) ->
    match (__lte__ spwn_26735 0) with
    | true_4  =>
      fun _26736 (zs_26737) -> (__26738) -o
        let* c_26739 :=
          ((send[R,L] __26738) (justLL_14 ((msortL_86) zs_26737)))
        in close[true] c_26739
    | false_5  =>
      fun _26740 (zs_26741) -> (__26742) -o
        match zs_26741 with
        | nilUL_22  =>
          let* c_26743 := ((send[R,L] __26742) (justLL_14 nilUL_22)) in
          close[true] c_26743
        | consUL_23 hd_26744 tl_26745 =>
          match tl_26745 with
          | nilUL_22  =>
            let* c_26746 :=
              ((send[R,L] __26742) (justLL_14 (consUL_23 hd_26744 nilUL_22)))
            in close[true] c_26746
          | consUL_23 hd_26747 tl_26748 =>
            match ((splitL_82)
                    (consUL_23 hd_26744 (consUL_23 hd_26747 tl_26748))) with
            | ex1LL_30 m_26749 n_26750 =>
              let* r1_26751 :=
                fork
                  fun _26752 (_26753) -o
                    ((cmsort_worker_26734)
                      (__sub__ spwn_26735 1) m_26749 _26753)
              in
              let* r2_26754 :=
                fork
                  fun _26755 (_26756) -o
                    ((cmsort_worker_26734)
                      (__sub__ spwn_26735 1) n_26750 _26756)
              in
              let* _26757 := recv[R,L] r1_26751 in
              match _26757 with
              | ex1LL_30 m_26758 n_26759 =>
                let* __26760 := close[false] n_26759 in
                let* _26761 := recv[R,L] r2_26754 in
                match _26761 with
                | ex1LL_30 m_26762 n_26763 =>
                  let* __26764 := close[false] n_26763 in
                  match m_26758 with
                  | justLL_14 m_26765 =>
                    match m_26762 with
                    | justLL_14 m_26766 =>
                      let zs1_26767 :=
                        (justLL_14 ((mergeL_84) m_26765 m_26766))
                      in
                      let zs1_26768 :=
                        ((rwlLL_44) NULL NULL NULL NULL NULL zs1_26767)
                      in
                      let* c_26769 := ((send[R,L] __26742) zs1_26768) in
                      let* __26770 := close[true] c_26769 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_26771 (zs_26772) ->
    let* c_26773 :=
      fork fun _26774 (_26775) -o
             ((cmsort_workerU_91) 4 zs_26772 _26775)
    in
    let* _26776 := recv[R,U] c_26773 in
    match _26776 with
    | ex1UL_32 m_26777 n_26778 =>
      let* __26779 := close[false] n_26778 in return m_26777
    end

#[program]
def cmsortL_92 :=
  fun cmsort_26780 (zs_26781) ->
    let* c_26782 :=
      fork fun _26783 (_26784) -o
             ((cmsort_workerL_90) 4 zs_26781 _26784)
    in
    let* _26785 := recv[R,L] c_26782 in
    match _26785 with
    | ex1LL_30 m_26786 n_26787 =>
      let* __26788 := close[false] n_26787 in return m_26786
    end

#[program]
def mklistU_95 :=
  fun mklist_26789 (n_26790) ->
    match (__lte__ n_26790 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_26790 ((mklist_26789) (__sub__ n_26790 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_26791 (n_26792) ->
    match (__lte__ n_26792 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_26792 ((mklist_26791) (__sub__ n_26792 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_26793 (__26794) ->
    match __26794 with
    | nilUU_24  => 0
    | consUU_25 hd_26795 tl_26796 => (__add__ 1 ((list_len_26793) tl_26796))
    end

#[program]
def list_lenL_96 :=
  fun list_len_26797 (__26798) ->
    match __26798 with
    | nilUL_22  => 0
    | consUL_23 hd_26799 tl_26800 => (__add__ 1 ((list_len_26797) tl_26800))
    end

#[program]
def string_of_listU_99 :=
  fun string_of_list_26801 (__26802) ->
    match __26802 with
    | nilUU_24  => "nil"
    | consUU_25 hd_26803 tl_26804 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26803) " :: ")
        ((string_of_list_26801) tl_26804))
    end

#[program]
def string_of_listL_98 :=
  fun string_of_list_26805 (__26806) ->
    match __26806 with
    | nilUL_22  => "nil"
    | consUL_23 hd_26807 tl_26808 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26807) " :: ")
        ((string_of_list_26805) tl_26808))
    end

#[program]
def main :=
  let test_26809 := ((mklistL_94) 2000000) in
  let* _26810 := ((cmsortL_92) test_26809) in
  match _26810 with
  | justLL_14 m_26811 =>
    let len_26812 := ((list_lenL_96) m_26811) in
    print ((string_of_int_31) len_26812)
  end

-----------------------------------------

def idU_43 := fun id_27172 (A_27173) -> (m_27174) -> m_27174

def idL_42 := fun id_27175 (A_27176) -> (m_27177) -> m_27177

def rwlUU_47 :=
  fun rwl_27178 (A_27179) -> (m_27180) -> (n_27181) -> (B_27182) ->
  (__27183) -> (__27184) -> __27184

def rwlUL_46 :=
  fun rwl_27185 (A_27186) -> (m_27187) -> (n_27188) -> (B_27189) ->
  (__27190) -> (__27191) -> __27191

def rwlLU_45 :=
  fun rwl_27192 (A_27193) -> (m_27194) -> (n_27195) -> (B_27196) ->
  (__27197) -> (__27198) -> __27198

def rwlLL_44 :=
  fun rwl_27199 (A_27200) -> (m_27201) -> (n_27202) -> (B_27203) ->
  (__27204) -> (__27205) -> __27205

def rwrUU_51 :=
  fun rwr_27206 (A_27207) -> (m_27208) -> (n_27209) -> (B_27210) ->
  (__27211) -> (__27212) -> __27212

def rwrUL_50 :=
  fun rwr_27213 (A_27214) -> (m_27215) -> (n_27216) -> (B_27217) ->
  (__27218) -> (__27219) -> __27219

def rwrLU_49 :=
  fun rwr_27220 (A_27221) -> (m_27222) -> (n_27223) -> (B_27224) ->
  (__27225) -> (__27226) -> __27226

def rwrLL_48 :=
  fun rwr_27227 (A_27228) -> (m_27229) -> (n_27230) -> (B_27231) ->
  (__27232) -> (__27233) -> __27233

def sing_elimUU_65 :=
  fun sing_elim_27234 (A_27235) -> (x_27236) -> (__27237) -> __27237

def sing_elimUL_64 :=
  fun sing_elim_27238 (A_27239) -> (x_27240) -> (__27241) -> __27241

def sing_elimLU_63 :=
  fun sing_elim_27242 (A_27243) -> (x_27244) -> (__27245) -> !!

def sing_elimLL_62 :=
  fun sing_elim_27246 (A_27247) -> (x_27248) -> (__27249) -> __27249

def not_10 :=
  fun not_27250 (__27251) ->
    match __27251 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_27252 (__27253) -> (__27254) ->
    match __27253 with
    | true_4 =>
      match __27254 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_27255 (__27256) -> (__27257) ->
    match __27256 with
    | true_4 => true_4
    | false_5 =>
      match __27257 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_27258 (__27259) -> (__27260) -o
    match __27259 with
    | true_4 =>
      match __27260 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __27260 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_27261 (__27262) -> (__27263) ->
    match __27262 with
    | zero_6  => true_4
    | succ_7 n_27264 =>
      match __27263 with
      | zero_6  => false_5 | succ_7 n_27265 => ((lte_27261) n_27264 n_27265)
      end
    end

def lt_15 :=
  fun lt_27266 (x_27267) -> (y_27268) -> ((lte_14) (succ_7 x_27267) y_27268)

def pred_16 :=
  fun pred_27269 (__27270) ->
    match __27270 with
    | zero_6  => (zero_6 ) | succ_7 n_27271 => n_27271
    end

def add_17 :=
  fun add_27272 (__27273) -> (__27274) ->
    match __27273 with
    | zero_6  => __27274
    | succ_7 n_27275 => (succ_7 ((add_27272) n_27275 __27274))
    end

def sub_18 :=
  fun sub_27276 (__27277) -> (__27278) ->
    match __27278 with
    | zero_6  => __27277
    | succ_7 n_27279 => ((sub_27276) ((pred_16) __27277) n_27279)
    end

def mul_19 :=
  fun mul_27280 (__27281) -> (__27282) ->
    match __27281 with
    | zero_6  => (zero_6 )
    | succ_7 n_27283 => ((add_17) __27282 ((mul_27280) n_27283 __27282))
    end

def div_20 :=
  fun div_27284 (x_27285) -> (y_27286) ->
    match ((lt_15) x_27285 y_27286) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_27287 :=
        fun loop_27288 (x_27289) -> (y_27290) ->
          match ((sub_18) x_27289 ((pred_16) y_27290)) with
          | zero_6  => (zero_6 )
          | succ_7 n_27291 => (succ_7 ((loop_27288) n_27291 y_27290))
          end
      in ((loop_27287) x_27285 y_27286)
    end

def rem_21 :=
  fun rem_27292 (x_27293) -> (y_27294) ->
    ((sub_18) x_27293 ((mul_19) ((div_20) x_27293 y_27294) y_27294))

def free_listUU_73 :=
  fun free_list_27295 (A_27296) -> (f_27297) -> (__27298) ->
    match __27298 with
    | nilUU_24  => tt_3
    | consUU_25 hd_27299 tl_27300 =>
      let __27301 := ((f_27297) hd_27299) in
      ((free_list_27295) NULL f_27297 tl_27300)
    end

def free_listUL_72 :=
  fun free_list_27302 (A_27303) -> (f_27304) -> (__27305) ->
    match __27305 with
    | nilUL_22  => tt_3
    | consUL_23 hd_27306 tl_27307 =>
      let __27308 := ((f_27304) hd_27306) in
      ((free_list_27302) NULL f_27304 tl_27307)
    end

def free_listLL_70 :=
  fun free_list_27309 (A_27310) -> (f_27311) -> (__27312) ->
    match __27312 with
    | nilLL_18  => tt_3
    | consLL_19 hd_27313 tl_27314 =>
      let __27315 := ((f_27311) hd_27313) in
      ((free_list_27309) NULL f_27311 tl_27314)
    end

def pow_25 :=
  fun pow_27316 (x_27317) -> (y_27318) ->
    let loop_27319 :=
      fun loop_27320 (acc_27321) -> (y_27322) ->
        match (__lte__ y_27322 0) with
        | true_4 => acc_27321
        | false_5 =>
          ((loop_27320) (__mul__ x_27317 acc_27321) (__sub__ y_27322 1))
        end
    in ((loop_27319) 1 y_27318)

def powm_26 :=
  fun powm_27323 (x_27324) -> (y_27325) -> (m_27326) ->
    let loop_27327 :=
      fun loop_27328 (acc_27329) -> (y_27330) ->
        match (__lte__ y_27330 0) with
        | true_4 => acc_27329
        | false_5 =>
          ((loop_27328)
            (__mod__ (__mul__ x_27324 acc_27329) m_27326) (__sub__ y_27330 1))
        end
    in ((loop_27327) 1 y_27325)

def ord_27 := fun ord_27331 (c_27332) -> (__ord__ c_27332)

def chr_28 := fun chr_27333 (i_27334) -> (__chr__ i_27334)

def str_29 := fun str_27335 (c_27336) -> (__push__ "" c_27336)

def strlen_30 := fun strlen_27337 (s_27338) -> (__size__ s_27338)

def string_of_int_31 :=
  fun string_of_int_27339 (i_27340) ->
    let aux_27341 :=
      fun aux_27342 (i_27343) ->
        match (__lte__ 10 i_27343) with
        | true_4 =>
          let r_27344 := (__mod__ i_27343 10) in
          let i_27345 := (__div__ i_27343 10) in
          (__push__ ((aux_27342) i_27345)
            ((chr_28) (__add__ r_27344 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_27343 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_27340) with
    | true_4 => ((aux_27341) i_27340)
    | false_5 => (__cat__ "~" ((aux_27341) (__neg__ i_27340)))
    end

def splitU_83 :=
  fun split_27346 (__27347) ->
    match __27347 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_27348 tl_27349 =>
      match tl_27349 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_27348 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_27350 tl_27351 =>
        match ((split_27346) tl_27351) with
        | ex1UU_33 m_27352 n_27353 =>
          (ex1UU_33
            (consUU_25 hd_27348 m_27352) (consUU_25 hd_27350 n_27353))
        end
      end
    end

def splitL_82 :=
  fun split_27354 (__27355) ->
    match __27355 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_27356 tl_27357 =>
      match tl_27357 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_27356 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_27358 tl_27359 =>
        match ((split_27354) tl_27359) with
        | ex1LL_30 m_27360 n_27361 =>
          (ex1LL_30
            (consUL_23 hd_27356 m_27360) (consUL_23 hd_27358 n_27361))
        end
      end
    end

def mergeU_85 :=
  fun merge_27362 (__27363) -> (__27364) -o
    match __27363 with
    | nilUU_24  => __27364
    | consUU_25 hd_27365 tl_27366 =>
      match __27364 with
      | nilUU_24  => (consUU_25 hd_27365 tl_27366)
      | consUU_25 hd_27367 tl_27368 =>
        match (__lte__ hd_27365 hd_27367) with
        | true_4 =>
          (consUU_25
            hd_27365 ((merge_27362) tl_27366 (consUU_25 hd_27367 tl_27368)))
        | false_5 =>
          (consUU_25
            hd_27367 ((merge_27362) (consUU_25 hd_27365 tl_27366) tl_27368))
        end
      end
    end

def mergeL_84 :=
  fun merge_27369 (__27370) -> (__27371) -o
    match __27370 with
    | nilUL_22  => __27371
    | consUL_23 hd_27372 tl_27373 =>
      match __27371 with
      | nilUL_22  => (consUL_23 hd_27372 tl_27373)
      | consUL_23 hd_27374 tl_27375 =>
        match (__lte__ hd_27372 hd_27374) with
        | true_4 =>
          (consUL_23
            hd_27372 ((merge_27369) tl_27373 (consUL_23 hd_27374 tl_27375)))
        | false_5 =>
          (consUL_23
            hd_27374 ((merge_27369) (consUL_23 hd_27372 tl_27373) tl_27375))
        end
      end
    end

def msortU_87 :=
  fun msort_27376 (__27377) ->
    match __27377 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_27378 tl_27379 =>
      match tl_27379 with
      | nilUU_24  => (consUU_25 hd_27378 (nilUU_24 ))
      | consUU_25 hd_27380 tl_27381 =>
        match ((splitU_83)
                (consUU_25 hd_27378 (consUU_25 hd_27380 tl_27381))) with
        | ex1UU_33 m_27382 n_27383 =>
          ((mergeU_85) ((msort_27376) m_27382) ((msort_27376) n_27383))
        end
      end
    end

def msortL_86 :=
  fun msort_27384 (__27385) ->
    match __27385 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_27386 tl_27387 =>
      match tl_27387 with
      | nilUL_22  => (consUL_23 hd_27386 (nilUL_22 ))
      | consUL_23 hd_27388 tl_27389 =>
        match ((splitL_82)
                (consUL_23 hd_27386 (consUL_23 hd_27388 tl_27389))) with
        | ex1LL_30 m_27390 n_27391 =>
          ((mergeL_84) ((msort_27384) m_27390) ((msort_27384) n_27391))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_27392 (spwn_27393) ->
    match (__lte__ spwn_27393 0) with
    | true_4 =>
      fun _27394 (zs_27395) -> (__27396) -o
        lazy(let c_27397 :=
               force(((lam (x_27398) -> lazy(send(__27396, x_27398)))
                       ((msortU_87) zs_27395)))
             in force(lazy(close[true] c_27397)))
      | false_5 =>
        fun _27399 (zs_27400) -> (__27401) -o
          match zs_27400 with
          | nilUU_24  =>
            lazy(let c_27402 :=
                   force(((lam (x_27403) -> lazy(send(__27401, x_27403)))
                           (nilUU_24 )))
                 in force(lazy(close[true] c_27402)))
          | consUU_25 hd_27404 tl_27405 =>
            match tl_27405 with
            | nilUU_24  =>
              lazy(let c_27406 :=
                     force(((lam (x_27407) -> lazy(send(__27401, x_27407)))
                             (consUU_25 hd_27404 (nilUU_24 ))))
                   in force(lazy(close[true] c_27406)))
            | consUU_25 hd_27408 tl_27409 =>
              match ((splitU_83)
                      (consUU_25 hd_27404 (consUU_25 hd_27408 tl_27409))) with
              | ex1UU_33 m_27410 n_27411 =>
                lazy(let r1_27412 :=
                       force(lazy(fork
                                    fun _27413 (_27414) -o
                                      ((cmsort_worker_27392)
                                        (__sub__ spwn_27393 1) m_27410 _27414)))
                     in
                     let r2_27415 :=
                       force(lazy(fork
                                    fun _27416 (_27417) -o
                                      ((cmsort_worker_27392)
                                        (__sub__ spwn_27393 1) n_27411 _27417)))
                     in
                     let _27418 := force(lazy(recv[U](r1_27412))) in
                     force(match _27418 with
                           | ex1UL_32 m_27419 n_27420 =>
                             lazy(let __27421 :=
                                    force(lazy(close[false] n_27420))
                                  in
                                  let _27422 :=
                                    force(lazy(recv[U](r2_27415)))
                                  in
                                  force(match _27422 with
                                        | ex1UL_32 m_27423 n_27424 =>
                                          lazy(let __27425 :=
                                                 force(lazy(close[false]
                                                              n_27424))
                                               in
                                               force(let zs1_27426 :=
                                                       ((mergeU_85)
                                                         m_27419 m_27423)
                                                     in
                                                     let zs1_27427 :=
                                                       ((rwlUU_47)
                                                         NULL NULL NULL NULL
                                                           NULL zs1_27426)
                                                     in
                                                     lazy(let c_27428 :=
                                                            force(((lam (x_27429) ->
                                                                    lazy(
                                                                    send(__27401, x_27429)))
                                                                    zs1_27427))
                                                          in
                                                          let __27430 :=
                                                            force(lazy(
                                                                  close[true]
                                                                    c_27428))
                                                          in
                                                          force(lazy(tt_3)))))
                                        end))
                           end))
                end
              end
            end
        end

def cmsort_workerL_90 :=
  fun cmsort_worker_27431 (spwn_27432) ->
    match (__lte__ spwn_27432 0) with
    | true_4 =>
      fun _27433 (zs_27434) -> (__27435) -o
        lazy(let c_27436 :=
               force(((lam (x_27437) -> lazy(send(__27435, x_27437)))
                       ((msortL_86) zs_27434)))
             in force(lazy(close[true] c_27436)))
      | false_5 =>
        fun _27438 (zs_27439) -> (__27440) -o
          match zs_27439 with
          | nilUL_22  =>
            lazy(let c_27441 :=
                   force(((lam (x_27442) -> lazy(send(__27440, x_27442)))
                           (nilUL_22 )))
                 in force(lazy(close[true] c_27441)))
          | consUL_23 hd_27443 tl_27444 =>
            match tl_27444 with
            | nilUL_22  =>
              lazy(let c_27445 :=
                     force(((lam (x_27446) -> lazy(send(__27440, x_27446)))
                             (consUL_23 hd_27443 (nilUL_22 ))))
                   in force(lazy(close[true] c_27445)))
            | consUL_23 hd_27447 tl_27448 =>
              match ((splitL_82)
                      (consUL_23 hd_27443 (consUL_23 hd_27447 tl_27448))) with
              | ex1LL_30 m_27449 n_27450 =>
                lazy(let r1_27451 :=
                       force(lazy(fork
                                    fun _27452 (_27453) -o
                                      ((cmsort_worker_27431)
                                        (__sub__ spwn_27432 1) m_27449 _27453)))
                     in
                     let r2_27454 :=
                       force(lazy(fork
                                    fun _27455 (_27456) -o
                                      ((cmsort_worker_27431)
                                        (__sub__ spwn_27432 1) n_27450 _27456)))
                     in
                     let _27457 := force(lazy(recv[L](r1_27451))) in
                     force(match _27457 with
                           | ex1LL_30 m_27458 n_27459 =>
                             lazy(let __27460 :=
                                    force(lazy(close[false] n_27459))
                                  in
                                  let _27461 :=
                                    force(lazy(recv[L](r2_27454)))
                                  in
                                  force(match _27461 with
                                        | ex1LL_30 m_27462 n_27463 =>
                                          lazy(let __27464 :=
                                                 force(lazy(close[false]
                                                              n_27463))
                                               in
                                               force(let zs1_27465 :=
                                                       ((mergeL_84)
                                                         m_27458 m_27462)
                                                     in
                                                     let zs1_27466 :=
                                                       ((rwlLL_44)
                                                         NULL NULL NULL NULL
                                                           NULL zs1_27465)
                                                     in
                                                     lazy(let c_27467 :=
                                                            force(((lam (x_27468) ->
                                                                    lazy(
                                                                    send(__27440, x_27468)))
                                                                    zs1_27466))
                                                          in
                                                          let __27469 :=
                                                            force(lazy(
                                                                  close[true]
                                                                    c_27467))
                                                          in
                                                          force(lazy(tt_3)))))
                                        end))
                           end))
                end
              end
            end
        end

def cmsortU_93 :=
  fun cmsort_27470 (zs_27471) ->
    lazy(let c_27472 :=
           force(lazy(fork
                        fun _27473 (_27474) -o
                          ((cmsort_workerU_91) 4 zs_27471 _27474)))
         in
         let _27475 := force(lazy(recv[U](c_27472))) in
         force(match _27475 with
               | ex1UL_32 m_27476 n_27477 =>
                 lazy(let __27478 := force(lazy(close[false] n_27477)) in
                      force(lazy(m_27476)))
               end))

def cmsortL_92 :=
  fun cmsort_27479 (zs_27480) ->
    lazy(let c_27481 :=
           force(lazy(fork
                        fun _27482 (_27483) -o
                          ((cmsort_workerL_90) 4 zs_27480 _27483)))
         in
         let _27484 := force(lazy(recv[L](c_27481))) in
         force(match _27484 with
               | ex1LL_30 m_27485 n_27486 =>
                 lazy(let __27487 := force(lazy(close[false] n_27486)) in
                      force(lazy(m_27485)))
               end))

def mklistU_95 :=
  fun mklist_27488 (n_27489) ->
    match (__lte__ n_27489 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_27489 ((mklist_27488) (__sub__ n_27489 1)))
    end

def mklistL_94 :=
  fun mklist_27490 (n_27491) ->
    match (__lte__ n_27491 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_27491 ((mklist_27490) (__sub__ n_27491 1)))
    end

def list_lenU_97 :=
  fun list_len_27492 (__27493) ->
    match __27493 with
    | nilUU_24  => 0
    | consUU_25 hd_27494 tl_27495 => (__add__ 1 ((list_len_27492) tl_27495))
    end

def list_lenL_96 :=
  fun list_len_27496 (__27497) ->
    match __27497 with
    | nilUL_22  => 0
    | consUL_23 hd_27498 tl_27499 => (__add__ 1 ((list_len_27496) tl_27499))
    end

def string_of_listU_99 :=
  fun string_of_list_27500 (__27501) ->
    match __27501 with
    | nilUU_24  => "nil"
    | consUU_25 hd_27502 tl_27503 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_27502) " :: ")
        ((string_of_list_27500) tl_27503))
    end

def string_of_listL_98 :=
  fun string_of_list_27504 (__27505) ->
    match __27505 with
    | nilUL_22  => "nil"
    | consUL_23 hd_27506 tl_27507 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_27506) " :: ")
        ((string_of_list_27504) tl_27507))
    end

def main :=
  let test_27508 := ((mklistL_94) 2000000) in
  lazy(let _27509 := force(((cmsortL_92) test_27508)) in
       force(let len_27510 := ((list_lenL_96) _27509) in
             lazy(print ((string_of_int_31) len_27510))))

-----------------------------------------

def idU_43 := lam (A_27937) -> (m_27938) -> m_27938

def idL_42 := lam (A_27939) -> (m_27940) -> m_27940

def rwlUU_47 :=
  lam (A_27941) -> (m_27942) -> (n_27943) -> (B_27944) -> (__27945) ->
  (__27946) -> __27946

def rwlUL_46 :=
  lam (A_27947) -> (m_27948) -> (n_27949) -> (B_27950) -> (__27951) ->
  (__27952) -> __27952

def rwlLU_45 :=
  lam (A_27953) -> (m_27954) -> (n_27955) -> (B_27956) -> (__27957) ->
  (__27958) -> __27958

def rwlLL_44 :=
  lam (A_27959) -> (m_27960) -> (n_27961) -> (B_27962) -> (__27963) ->
  (__27964) -> __27964

def rwrUU_51 :=
  lam (A_27965) -> (m_27966) -> (n_27967) -> (B_27968) -> (__27969) ->
  (__27970) -> __27970

def rwrUL_50 :=
  lam (A_27971) -> (m_27972) -> (n_27973) -> (B_27974) -> (__27975) ->
  (__27976) -> __27976

def rwrLU_49 :=
  lam (A_27977) -> (m_27978) -> (n_27979) -> (B_27980) -> (__27981) ->
  (__27982) -> __27982

def rwrLL_48 :=
  lam (A_27983) -> (m_27984) -> (n_27985) -> (B_27986) -> (__27987) ->
  (__27988) -> __27988

def sing_elimUU_65 := lam (A_27989) -> (x_27990) -> (__27991) -> __27991

def sing_elimUL_64 := lam (A_27992) -> (x_27993) -> (__27994) -> __27994

def sing_elimLU_63 := lam (A_27995) -> (x_27996) -> (__27997) -> !!

def sing_elimLL_62 := lam (A_27998) -> (x_27999) -> (__28000) -> __28000

def not_10 :=
  lam (__28001) ->
    match __28001 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__28002) -> (__28003) ->
    match __28002 with
    | true_4 =>
      match __28003 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__28004) -> (__28005) ->
    match __28004 with
    | true_4 => true_4
    | false_5 =>
      match __28005 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__28006) -> (__28007) -o
    match __28006 with
    | true_4 =>
      match __28007 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __28007 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_28008 (__28009) -> (__28010) ->
    match __28009 with
    | zero_6  => true_4
    | succ_7 n_28011 =>
      match __28010 with
      | zero_6  => false_5 | succ_7 n_28012 => ((lte_28008) n_28011 n_28012)
      end
    end

def lt_15 :=
  lam (x_28013) -> (y_28014) -> ((lte_14) (succ_7 x_28013) y_28014)

def pred_16 :=
  lam (__28015) ->
    match __28015 with
    | zero_6  => (zero_6 ) | succ_7 n_28016 => n_28016
    end

def add_17 :=
  fun add_28017 (__28018) -> (__28019) ->
    match __28018 with
    | zero_6  => __28019
    | succ_7 n_28020 => (succ_7 ((add_28017) n_28020 __28019))
    end

def sub_18 :=
  fun sub_28021 (__28022) -> (__28023) ->
    match __28023 with
    | zero_6  => __28022
    | succ_7 n_28024 => ((sub_28021) ((pred_16) __28022) n_28024)
    end

def mul_19 :=
  fun mul_28025 (__28026) -> (__28027) ->
    match __28026 with
    | zero_6  => (zero_6 )
    | succ_7 n_28028 => ((add_17) __28027 ((mul_28025) n_28028 __28027))
    end

def div_20 :=
  lam (x_28029) -> (y_28030) ->
    match ((lt_15) x_28029 y_28030) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_28031 :=
        fun loop_28032 (x_28033) -> (y_28034) ->
          match ((sub_18) x_28033 ((pred_16) y_28034)) with
          | zero_6  => (zero_6 )
          | succ_7 n_28035 => (succ_7 ((loop_28032) n_28035 y_28034))
          end
      in ((loop_28031) x_28029 y_28030)
    end

def rem_21 :=
  lam (x_28036) -> (y_28037) ->
    ((sub_18) x_28036 ((mul_19) ((div_20) x_28036 y_28037) y_28037))

def free_listUU_73 :=
  fun free_list_28038 (A_28039) -> (f_28040) -> (__28041) ->
    match __28041 with
    | nilUU_24  => tt_3
    | consUU_25 hd_28042 tl_28043 =>
      let __28044 := ((f_28040) hd_28042) in
      ((free_list_28038) NULL f_28040 tl_28043)
    end

def free_listUL_72 :=
  fun free_list_28045 (A_28046) -> (f_28047) -> (__28048) ->
    match __28048 with
    | nilUL_22  => tt_3
    | consUL_23 hd_28049 tl_28050 =>
      let __28051 := ((f_28047) hd_28049) in
      ((free_list_28045) NULL f_28047 tl_28050)
    end

def free_listLL_70 :=
  fun free_list_28052 (A_28053) -> (f_28054) -> (__28055) ->
    match __28055 with
    | nilLL_18  => tt_3
    | consLL_19 hd_28056 tl_28057 =>
      let __28058 := ((f_28054) hd_28056) in
      ((free_list_28052) NULL f_28054 tl_28057)
    end

def pow_25 :=
  lam (x_28059) -> (y_28060) ->
    let loop_28061 :=
      fun loop_28062 (acc_28063) -> (y_28064) ->
        match (__lte__ y_28064 0) with
        | true_4 => acc_28063
        | false_5 =>
          ((loop_28062) (__mul__ x_28059 acc_28063) (__sub__ y_28064 1))
        end
    in ((loop_28061) 1 y_28060)

def powm_26 :=
  lam (x_28065) -> (y_28066) -> (m_28067) ->
    let loop_28068 :=
      fun loop_28069 (acc_28070) -> (y_28071) ->
        match (__lte__ y_28071 0) with
        | true_4 => acc_28070
        | false_5 =>
          ((loop_28069)
            (__mod__ (__mul__ x_28065 acc_28070) m_28067) (__sub__ y_28071 1))
        end
    in ((loop_28068) 1 y_28066)

def ord_27 := lam (c_28072) -> (__ord__ c_28072)

def chr_28 := lam (i_28073) -> (__chr__ i_28073)

def str_29 := lam (c_28074) -> (__push__ "" c_28074)

def strlen_30 := lam (s_28075) -> (__size__ s_28075)

def string_of_int_31 :=
  lam (i_28076) ->
    let aux_28077 :=
      fun aux_28078 (i_28079) ->
        match (__lte__ 10 i_28079) with
        | true_4 =>
          let r_28080 := (__mod__ i_28079 10) in
          let i_28081 := (__div__ i_28079 10) in
          (__push__ ((aux_28078) i_28081)
            ((chr_28) (__add__ r_28080 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_28079 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_28076) with
    | true_4 => ((aux_28077) i_28076)
    | false_5 => (__cat__ "~" ((aux_28077) (__neg__ i_28076)))
    end

def splitU_83 :=
  fun split_28082 (__28083) ->
    match __28083 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_28084 tl_28085 =>
      match tl_28085 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_28084 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_28086 tl_28087 =>
        match ((split_28082) tl_28087) with
        | ex1UU_33 m_28088 n_28089 =>
          (ex1UU_33
            (consUU_25 hd_28084 m_28088) (consUU_25 hd_28086 n_28089))
        end
      end
    end

def splitL_82 :=
  fun split_28090 (__28091) ->
    match __28091 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_28092 tl_28093 =>
      match tl_28093 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_28092 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_28094 tl_28095 =>
        match ((split_28090) tl_28095) with
        | ex1LL_30 m_28096 n_28097 =>
          (ex1LL_30
            (consUL_23 hd_28092 m_28096) (consUL_23 hd_28094 n_28097))
        end
      end
    end

def mergeU_85 :=
  fun merge_28098 (__28099) -> (__28100) -o
    match __28099 with
    | nilUU_24  => __28100
    | consUU_25 hd_28101 tl_28102 =>
      match __28100 with
      | nilUU_24  => (consUU_25 hd_28101 tl_28102)
      | consUU_25 hd_28103 tl_28104 =>
        match (__lte__ hd_28101 hd_28103) with
        | true_4 =>
          (consUU_25
            hd_28101 ((merge_28098) tl_28102 (consUU_25 hd_28103 tl_28104)))
        | false_5 =>
          (consUU_25
            hd_28103 ((merge_28098) (consUU_25 hd_28101 tl_28102) tl_28104))
        end
      end
    end

def mergeL_84 :=
  fun merge_28105 (__28106) -> (__28107) -o
    match __28106 with
    | nilUL_22  => __28107
    | consUL_23 hd_28108 tl_28109 =>
      match __28107 with
      | nilUL_22  => (consUL_23 hd_28108 tl_28109)
      | consUL_23 hd_28110 tl_28111 =>
        match (__lte__ hd_28108 hd_28110) with
        | true_4 =>
          (consUL_23
            hd_28108 ((merge_28105) tl_28109 (consUL_23 hd_28110 tl_28111)))
        | false_5 =>
          (consUL_23
            hd_28110 ((merge_28105) (consUL_23 hd_28108 tl_28109) tl_28111))
        end
      end
    end

def msortU_87 :=
  fun msort_28112 (__28113) ->
    match __28113 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_28114 tl_28115 =>
      match tl_28115 with
      | nilUU_24  => (consUU_25 hd_28114 (nilUU_24 ))
      | consUU_25 hd_28116 tl_28117 =>
        match ((splitU_83)
                (consUU_25 hd_28114 (consUU_25 hd_28116 tl_28117))) with
        | ex1UU_33 m_28118 n_28119 =>
          ((mergeU_85) ((msort_28112) m_28118) ((msort_28112) n_28119))
        end
      end
    end

def msortL_86 :=
  fun msort_28120 (__28121) ->
    match __28121 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_28122 tl_28123 =>
      match tl_28123 with
      | nilUL_22  => (consUL_23 hd_28122 (nilUL_22 ))
      | consUL_23 hd_28124 tl_28125 =>
        match ((splitL_82)
                (consUL_23 hd_28122 (consUL_23 hd_28124 tl_28125))) with
        | ex1LL_30 m_28126 n_28127 =>
          ((mergeL_84) ((msort_28120) m_28126) ((msort_28120) n_28127))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_28128 (spwn_28129) ->
    match (__lte__ spwn_28129 0) with
    | true_4 =>
      lam (zs_28130) -> (__28131) -o
        lazy(let c_28132 := send(__28131, ((msortU_87) zs_28130)) in
             close[true] c_28132)
    | false_5 =>
      lam (zs_28133) -> (__28134) -o
        match zs_28133 with
        | nilUU_24  =>
          lazy(let c_28135 := send(__28134, (nilUU_24 )) in
               close[true] c_28135)
        | consUU_25 hd_28136 tl_28137 =>
          match tl_28137 with
          | nilUU_24  =>
            lazy(let c_28138 :=
                   send(__28134, (consUU_25 hd_28136 (nilUU_24 )))
                 in close[true] c_28138)
          | consUU_25 hd_28139 tl_28140 =>
            match ((splitU_83)
                    (consUU_25 hd_28136 (consUU_25 hd_28139 tl_28140))) with
            | ex1UU_33 m_28141 n_28142 =>
              lazy(let r1_28143 :=
                     fork
                       lam (_28144) -o
                         ((cmsort_worker_28128)
                           (__sub__ spwn_28129 1) m_28141 _28144)
                   in
                   let r2_28145 :=
                     fork
                       lam (_28146) -o
                         ((cmsort_worker_28128)
                           (__sub__ spwn_28129 1) n_28142 _28146)
                   in
                   let _28147 := recv[U](r1_28143) in
                   match _28147 with
                   | ex1UL_32 m_28148 n_28149 =>
                     let __28150 := close[false] n_28149 in
                     let _28151 := recv[U](r2_28145) in
                     match _28151 with
                     | ex1UL_32 m_28152 n_28153 =>
                       let __28154 := close[false] n_28153 in
                       let zs1_28155 := ((mergeU_85) m_28148 m_28152) in
                       let zs1_28156 :=
                         ((rwlUU_47) NULL NULL NULL NULL NULL zs1_28155)
                       in
                       let c_28157 := send(__28134, zs1_28156) in
                       let __28158 := close[true] c_28157 in tt_3
                     end
                   end)
            end
          end
        end
    end

def cmsort_workerL_90 :=
  fun cmsort_worker_28159 (spwn_28160) ->
    match (__lte__ spwn_28160 0) with
    | true_4 =>
      lam (zs_28161) -> (__28162) -o
        lazy(let c_28163 := send(__28162, ((msortL_86) zs_28161)) in
             close[true] c_28163)
    | false_5 =>
      lam (zs_28164) -> (__28165) -o
        match zs_28164 with
        | nilUL_22  =>
          lazy(let c_28166 := send(__28165, (nilUL_22 )) in
               close[true] c_28166)
        | consUL_23 hd_28167 tl_28168 =>
          match tl_28168 with
          | nilUL_22  =>
            lazy(let c_28169 :=
                   send(__28165, (consUL_23 hd_28167 (nilUL_22 )))
                 in close[true] c_28169)
          | consUL_23 hd_28170 tl_28171 =>
            match ((splitL_82)
                    (consUL_23 hd_28167 (consUL_23 hd_28170 tl_28171))) with
            | ex1LL_30 m_28172 n_28173 =>
              lazy(let r1_28174 :=
                     fork
                       lam (_28175) -o
                         ((cmsort_worker_28159)
                           (__sub__ spwn_28160 1) m_28172 _28175)
                   in
                   let r2_28176 :=
                     fork
                       lam (_28177) -o
                         ((cmsort_worker_28159)
                           (__sub__ spwn_28160 1) n_28173 _28177)
                   in
                   let _28178 := recv[L](r1_28174) in
                   match _28178 with
                   | ex1LL_30 m_28179 n_28180 =>
                     let __28181 := close[false] n_28180 in
                     let _28182 := recv[L](r2_28176) in
                     match _28182 with
                     | ex1LL_30 m_28183 n_28184 =>
                       let __28185 := close[false] n_28184 in
                       let zs1_28186 := ((mergeL_84) m_28179 m_28183) in
                       let zs1_28187 :=
                         ((rwlLL_44) NULL NULL NULL NULL NULL zs1_28186)
                       in
                       let c_28188 := send(__28165, zs1_28187) in
                       let __28189 := close[true] c_28188 in tt_3
                     end
                   end)
            end
          end
        end
    end

def cmsortU_93 :=
  lam (zs_28190) ->
    lazy(let c_28191 :=
           fork lam (_28192) -o ((cmsort_workerU_91) 4 zs_28190 _28192)
         in
         let _28193 := recv[U](c_28191) in
         match _28193 with
         | ex1UL_32 m_28194 n_28195 =>
           let __28196 := close[false] n_28195 in m_28194
         end)

def cmsortL_92 :=
  lam (zs_28197) ->
    lazy(let c_28198 :=
           fork lam (_28199) -o ((cmsort_workerL_90) 4 zs_28197 _28199)
         in
         let _28200 := recv[L](c_28198) in
         match _28200 with
         | ex1LL_30 m_28201 n_28202 =>
           let __28203 := close[false] n_28202 in m_28201
         end)

def mklistU_95 :=
  fun mklist_28204 (n_28205) ->
    match (__lte__ n_28205 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_28205 ((mklist_28204) (__sub__ n_28205 1)))
    end

def mklistL_94 :=
  fun mklist_28206 (n_28207) ->
    match (__lte__ n_28207 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_28207 ((mklist_28206) (__sub__ n_28207 1)))
    end

def list_lenU_97 :=
  fun list_len_28208 (__28209) ->
    match __28209 with
    | nilUU_24  => 0
    | consUU_25 hd_28210 tl_28211 => (__add__ 1 ((list_len_28208) tl_28211))
    end

def list_lenL_96 :=
  fun list_len_28212 (__28213) ->
    match __28213 with
    | nilUL_22  => 0
    | consUL_23 hd_28214 tl_28215 => (__add__ 1 ((list_len_28212) tl_28215))
    end

def string_of_listU_99 :=
  fun string_of_list_28216 (__28217) ->
    match __28217 with
    | nilUU_24  => "nil"
    | consUU_25 hd_28218 tl_28219 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_28218) " :: ")
        ((string_of_list_28216) tl_28219))
    end

def string_of_listL_98 :=
  fun string_of_list_28220 (__28221) ->
    match __28221 with
    | nilUL_22  => "nil"
    | consUL_23 hd_28222 tl_28223 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_28222) " :: ")
        ((string_of_list_28220) tl_28223))
    end

def main :=
  let test_28224 := ((mklistL_94) 2000000) in
  lazy(let _28225 := force(((cmsortL_92) test_28224)) in
       let len_28226 := ((list_lenL_96) _28225) in
       print ((string_of_int_31) len_28226))

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := mkconstr(consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := mkconstr(nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := mkconstr(consUL_23, [hd_292, m_303]);
              x_306 := mkconstr(consUL_23, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := mkconstr(consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := mkconstr(nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := mkconstr(nilUL_22, []);
          x_372 := mkconstr(consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_23, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(spwn_385%U) {
  x_387 := lte(spwn_385, 0);
  match(x_387){
    true_4() => {
      x_388 :=
        fn lam_389(zs_390%U, __391%L) {
          x_392 :=
            lazy {
              x_395 := msortU_344(zs_390);
              x_394 := send(__391, x_395);
              c_393 := x_394;
              x_396 := close[true](c_393);
              return x_396;
            };
          return x_392;
        };
      x_386 := x_388;
    }
    false_5() => {
      x_397 :=
        fn lam_398(zs_399%U, __400%L) {
          match[U](zs_399){
            nilUU_24() => {
              x_402 :=
                lazy {
                  x_405 := mkconstr(nilUU_24, []);
                  x_404 := send(__400, x_405);
                  c_403 := x_404;
                  x_406 := close[true](c_403);
                  return x_406;
                };
              x_401 := x_402;
            }
            consUU_25(hd_407, tl_408) => {
              match[U](tl_408){
                nilUU_24() => {
                  x_410 :=
                    lazy {
                      x_413 := mkconstr(nilUU_24, []);
                      x_414 := mkconstr(consUU_25, [hd_407, x_413]);
                      x_412 := send(__400, x_414);
                      c_411 := x_412;
                      x_415 := close[true](c_411);
                      return x_415;
                    };
                  x_409 := x_410;
                }
                consUU_25(hd_416, tl_417) => {
                  x_420 := mkconstr(consUU_25, [hd_416, tl_417]);
                  x_421 := mkconstr(consUU_25, [hd_407, x_420]);
                  x_419 := splitU_264(x_421);
                  match[L](x_419){
                    ex1UU_33(m_422, n_423) => {
                      x_424 :=
                        lazy {
                          x_427 :=
                            fn lam_428(_429%L) {
                              x_431 := sub(spwn_385, 1);
                              x_430 := cmsort_workerU_384(x_431, m_422, _429);
                              return x_430;
                            };
                          x_426 := fork(x_427);
                          r1_425 := x_426;
                          x_434 :=
                            fn lam_435(_436%L) {
                              x_438 := sub(spwn_385, 1);
                              x_437 := cmsort_workerU_384(x_438, n_423, _436);
                              return x_437;
                            };
                          x_433 := fork(x_434);
                          r2_432 := x_433;
                          x_440 := recv[U](r1_425);
                          _439 := x_440;
                          match[L](_439){
                            ex1UL_32(m_442, n_443) => {
                              x_445 := close[false](n_443);
                              __444 := x_445;
                              x_447 := recv[U](r2_432);
                              _446 := x_447;
                              match[L](_446){
                                ex1UL_32(m_449, n_450) => {
                                  x_452 := close[false](n_450);
                                  __451 := x_452;
                                  x_454 := mergeU_308(m_442, m_449);
                                  zs1_453 := x_454;
                                  x_456 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_453);
                                  zs1_455 := x_456;
                                  x_458 := send(__400, zs1_455);
                                  c_457 := x_458;
                                  x_460 := close[true](c_457);
                                  __459 := x_460;
                                  x_448 := tt_3;
                                }
                              }
                              x_441 := x_448;
                            }
                          }
                          return x_441;
                        };
                      x_418 := x_424;
                    }
                  }
                  x_409 := x_418;
                }
              }
              x_401 := x_409;
            }
          }
          return x_401;
        };
      x_386 := x_397;
    }
  }
  return x_386;
}

fn cmsort_workerL_461(spwn_462%U) {
  x_464 := lte(spwn_462, 0);
  match(x_464){
    true_4() => {
      x_465 :=
        fn lam_466(zs_467%U, __468%L) {
          x_469 :=
            lazy {
              x_472 := msortL_364(zs_467);
              x_471 := send(__468, x_472);
              c_470 := x_471;
              x_473 := close[true](c_470);
              return x_473;
            };
          return x_469;
        };
      x_463 := x_465;
    }
    false_5() => {
      x_474 :=
        fn lam_475(zs_476%U, __477%L) {
          match[L](zs_476){
            nilUL_22() => {
              x_479 :=
                lazy {
                  x_482 := mkconstr(nilUL_22, []);
                  x_481 := send(__477, x_482);
                  c_480 := x_481;
                  x_483 := close[true](c_480);
                  return x_483;
                };
              x_478 := x_479;
            }
            consUL_23(hd_484, tl_485) => {
              match[L](tl_485){
                nilUL_22() => {
                  x_487 :=
                    lazy {
                      x_490 := mkconstr(nilUL_22, []);
                      x_491 := mkconstr(consUL_23, [hd_484, x_490]);
                      x_489 := send(__477, x_491);
                      c_488 := x_489;
                      x_492 := close[true](c_488);
                      return x_492;
                    };
                  x_486 := x_487;
                }
                consUL_23(hd_493, tl_494) => {
                  x_497 := mkconstr(consUL_23, [hd_493, tl_494]);
                  x_498 := mkconstr(consUL_23, [hd_484, x_497]);
                  x_496 := splitL_286(x_498);
                  match[L](x_496){
                    ex1LL_30(m_499, n_500) => {
                      x_501 :=
                        lazy {
                          x_504 :=
                            fn lam_505(_506%L) {
                              x_508 := sub(spwn_462, 1);
                              x_507 := cmsort_workerL_461(x_508, m_499, _506);
                              return x_507;
                            };
                          x_503 := fork(x_504);
                          r1_502 := x_503;
                          x_511 :=
                            fn lam_512(_513%L) {
                              x_515 := sub(spwn_462, 1);
                              x_514 := cmsort_workerL_461(x_515, n_500, _513);
                              return x_514;
                            };
                          x_510 := fork(x_511);
                          r2_509 := x_510;
                          x_517 := recv[L](r1_502);
                          _516 := x_517;
                          match[L](_516){
                            ex1LL_30(m_519, n_520) => {
                              x_522 := close[false](n_520);
                              __521 := x_522;
                              x_524 := recv[L](r2_509);
                              _523 := x_524;
                              match[L](_523){
                                ex1LL_30(m_526, n_527) => {
                                  x_529 := close[false](n_527);
                                  __528 := x_529;
                                  x_531 := mergeL_326(m_519, m_526);
                                  zs1_530 := x_531;
                                  x_533 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_530);
                                  zs1_532 := x_533;
                                  x_535 := send(__477, zs1_532);
                                  c_534 := x_535;
                                  x_537 := close[true](c_534);
                                  __536 := x_537;
                                  x_525 := tt_3;
                                }
                              }
                              x_518 := x_525;
                            }
                          }
                          return x_518;
                        };
                      x_495 := x_501;
                    }
                  }
                  x_486 := x_495;
                }
              }
              x_478 := x_486;
            }
          }
          return x_478;
        };
      x_463 := x_474;
    }
  }
  return x_463;
}

fn cmsortU_538(zs_539%U) {
  x_540 :=
    lazy {
      x_543 :=
        fn lam_544(_545%L) {
          x_546 := cmsort_workerU_384(4, zs_539, _545);
          return x_546;
        };
      x_542 := fork(x_543);
      c_541 := x_542;
      x_548 := recv[U](c_541);
      _547 := x_548;
      match[L](_547){
        ex1UL_32(m_550, n_551) => {
          x_553 := close[false](n_551);
          __552 := x_553;
          x_549 := m_550;
        }
      }
      return x_549;
    };
  return x_540;
}

fn cmsortL_554(zs_555%U) {
  x_556 :=
    lazy {
      x_559 :=
        fn lam_560(_561%L) {
          x_562 := cmsort_workerL_461(4, zs_555, _561);
          return x_562;
        };
      x_558 := fork(x_559);
      c_557 := x_558;
      x_564 := recv[L](c_557);
      _563 := x_564;
      match[L](_563){
        ex1LL_30(m_566, n_567) => {
          x_569 := close[false](n_567);
          __568 := x_569;
          x_565 := m_566;
        }
      }
      return x_565;
    };
  return x_556;
}

fn mklistU_570(n_571%U) {
  x_573 := lte(n_571, 0);
  match(x_573){
    true_4() => {
      x_574 := mkconstr(nilUU_24, []);
      x_572 := x_574;
    }
    false_5() => {
      x_576 := sub(n_571, 1);
      x_575 := mklistU_570(x_576);
      x_577 := mkconstr(consUU_25, [n_571, x_575]);
      x_572 := x_577;
    }
  }
  return x_572;
}

fn mklistL_578(n_579%U) {
  x_581 := lte(n_579, 0);
  match(x_581){
    true_4() => {
      x_582 := mkconstr(nilUL_22, []);
      x_580 := x_582;
    }
    false_5() => {
      x_584 := sub(n_579, 1);
      x_583 := mklistL_578(x_584);
      x_585 := mkconstr(consUL_23, [n_579, x_583]);
      x_580 := x_585;
    }
  }
  return x_580;
}

fn list_lenU_586(__587%U) {
  match[U](__587){
    nilUU_24() => {
      x_588 := 0;
    }
    consUU_25(hd_589, tl_590) => {
      x_592 := list_lenU_586(tl_590);
      x_591 := add(1, x_592);
      x_588 := x_591;
    }
  }
  return x_588;
}

fn list_lenL_593(__594%U) {
  match[L](__594){
    nilUL_22() => {
      x_595 := 0;
    }
    consUL_23(hd_596, tl_597) => {
      x_599 := list_lenL_593(tl_597);
      x_598 := add(1, x_599);
      x_595 := x_598;
    }
  }
  return x_595;
}

fn string_of_listU_600(__601%U) {
  match[U](__601){
    nilUU_24() => {
      x_603 := str("nil");
      x_602 := x_603;
    }
    consUU_25(hd_604, tl_605) => {
      x_608 := string_of_int_236(hd_604);
      x_609 := str(" :: ");
      x_607 := cat(x_608, x_609);
      x_610 := string_of_listU_600(tl_605);
      x_606 := cat(x_607, x_610);
      x_602 := x_606;
    }
  }
  return x_602;
}

fn string_of_listL_611(__612%U) {
  match[L](__612){
    nilUL_22() => {
      x_614 := str("nil");
      x_613 := x_614;
    }
    consUL_23(hd_615, tl_616) => {
      x_619 := string_of_int_236(hd_615);
      x_620 := str(" :: ");
      x_618 := cat(x_619, x_620);
      x_621 := string_of_listL_611(tl_616);
      x_617 := cat(x_618, x_621);
      x_613 := x_617;
    }
  }
  return x_613;
}

main := {
  x_623 := mklistL_578(2000000);
  test_622 := x_623;
  x_624 :=
    lazy {
      x_627 := cmsortL_554(test_622);
      x_626 := force(x_627);
      _625 := x_626;
      x_629 := list_lenL_593(_625);
      len_628 := x_629;
      x_631 := string_of_int_236(len_628);
      x_630 := print(x_631);
      return x_630;
    };
  return x_624;
};

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := reconstr(__287, nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := reconstr(tl_293, nilUL_22, []);
          x_296 := reconstr(__287, consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_23, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_23, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
      free(__327);
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := reconstr(__327, consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := reconstr(__365, nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := reconstr(tl_369, nilUL_22, []);
          x_372 := reconstr(__365, consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_23, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(spwn_385%U) {
  x_387 := lte(spwn_385, 0);
  match(x_387){
    true_4() => {
      x_388 :=
        fn lam_389(zs_390%U, __391%L) {
          x_392 :=
            lazy {
              x_395 := msortU_344(zs_390);
              x_394 := send(__391, x_395);
              c_393 := x_394;
              x_396 := close[true](c_393);
              return x_396;
            };
          return x_392;
        };
      x_386 := x_388;
    }
    false_5() => {
      x_397 :=
        fn lam_398(zs_399%U, __400%L) {
          match[U](zs_399){
            nilUU_24() => {
              x_402 :=
                lazy {
                  x_405 := mkconstr(nilUU_24, []);
                  x_404 := send(__400, x_405);
                  c_403 := x_404;
                  x_406 := close[true](c_403);
                  return x_406;
                };
              x_401 := x_402;
            }
            consUU_25(hd_407, tl_408) => {
              match[U](tl_408){
                nilUU_24() => {
                  x_410 :=
                    lazy {
                      x_413 := mkconstr(nilUU_24, []);
                      x_414 := mkconstr(consUU_25, [hd_407, x_413]);
                      x_412 := send(__400, x_414);
                      c_411 := x_412;
                      x_415 := close[true](c_411);
                      return x_415;
                    };
                  x_409 := x_410;
                }
                consUU_25(hd_416, tl_417) => {
                  x_420 := mkconstr(consUU_25, [hd_416, tl_417]);
                  x_421 := mkconstr(consUU_25, [hd_407, x_420]);
                  x_419 := splitU_264(x_421);
                  match[L](x_419){
                    ex1UU_33(m_422, n_423) => {
                      x_424 :=
                        lazy {
                          x_427 :=
                            fn lam_428(_429%L) {
                              x_431 := sub(spwn_385, 1);
                              x_430 := cmsort_workerU_384(x_431, m_422, _429);
                              return x_430;
                            };
                          x_426 := fork(x_427);
                          r1_425 := x_426;
                          x_434 :=
                            fn lam_435(_436%L) {
                              x_438 := sub(spwn_385, 1);
                              x_437 := cmsort_workerU_384(x_438, n_423, _436);
                              return x_437;
                            };
                          x_433 := fork(x_434);
                          r2_432 := x_433;
                          x_440 := recv[U](r1_425);
                          _439 := x_440;
                          match[L](_439){
                            ex1UL_32(m_442, n_443) => {
                              x_445 := close[false](n_443);
                              __444 := x_445;
                              x_447 := recv[U](r2_432);
                              _446 := x_447;
                              match[L](_446){
                                ex1UL_32(m_449, n_450) => {
                                  x_452 := close[false](n_450);
                                  __451 := x_452;
                                  x_454 := mergeU_308(m_442, m_449);
                                  zs1_453 := x_454;
                                  x_456 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_453);
                                  zs1_455 := x_456;
                                  x_458 := send(__400, zs1_455);
                                  c_457 := x_458;
                                  x_460 := close[true](c_457);
                                  __459 := x_460;
                                  x_448 := tt_3;
                                  free(_446);
                                }
                              }
                              x_441 := x_448;
                              free(_439);
                            }
                          }
                          return x_441;
                        };
                      x_418 := x_424;
                      free(x_419);
                    }
                  }
                  x_409 := x_418;
                }
              }
              x_401 := x_409;
            }
          }
          return x_401;
        };
      x_386 := x_397;
    }
  }
  return x_386;
}

fn cmsort_workerL_461(spwn_462%U) {
  x_464 := lte(spwn_462, 0);
  match(x_464){
    true_4() => {
      x_465 :=
        fn lam_466(zs_467%U, __468%L) {
          x_469 :=
            lazy {
              x_472 := msortL_364(zs_467);
              x_471 := send(__468, x_472);
              c_470 := x_471;
              x_473 := close[true](c_470);
              return x_473;
            };
          return x_469;
        };
      x_463 := x_465;
    }
    false_5() => {
      x_474 :=
        fn lam_475(zs_476%U, __477%L) {
          match[L](zs_476){
            nilUL_22() => {
              x_479 :=
                lazy {
                  x_482 := reconstr(zs_476, nilUL_22, []);
                  x_481 := send(__477, x_482);
                  c_480 := x_481;
                  x_483 := close[true](c_480);
                  return x_483;
                };
              x_478 := x_479;
            }
            consUL_23(hd_484, tl_485) => {
              match[L](tl_485){
                nilUL_22() => {
                  x_487 :=
                    lazy {
                      x_490 := reconstr(tl_485, nilUL_22, []);
                      x_491 := reconstr(zs_476, consUL_23, [hd_484, x_490]);
                      x_489 := send(__477, x_491);
                      c_488 := x_489;
                      x_492 := close[true](c_488);
                      return x_492;
                    };
                  x_486 := x_487;
                }
                consUL_23(hd_493, tl_494) => {
                  x_497 := reconstr(tl_485, consUL_23, [hd_493, tl_494]);
                  x_498 := reconstr(zs_476, consUL_23, [hd_484, x_497]);
                  x_496 := splitL_286(x_498);
                  match[L](x_496){
                    ex1LL_30(m_499, n_500) => {
                      x_501 :=
                        lazy {
                          x_504 :=
                            fn lam_505(_506%L) {
                              x_508 := sub(spwn_462, 1);
                              x_507 := cmsort_workerL_461(x_508, m_499, _506);
                              return x_507;
                            };
                          x_503 := fork(x_504);
                          r1_502 := x_503;
                          x_511 :=
                            fn lam_512(_513%L) {
                              x_515 := sub(spwn_462, 1);
                              x_514 := cmsort_workerL_461(x_515, n_500, _513);
                              return x_514;
                            };
                          x_510 := fork(x_511);
                          r2_509 := x_510;
                          x_517 := recv[L](r1_502);
                          _516 := x_517;
                          match[L](_516){
                            ex1LL_30(m_519, n_520) => {
                              x_522 := close[false](n_520);
                              __521 := x_522;
                              x_524 := recv[L](r2_509);
                              _523 := x_524;
                              match[L](_523){
                                ex1LL_30(m_526, n_527) => {
                                  x_529 := close[false](n_527);
                                  __528 := x_529;
                                  x_531 := mergeL_326(m_519, m_526);
                                  zs1_530 := x_531;
                                  x_533 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_530);
                                  zs1_532 := x_533;
                                  x_535 := send(__477, zs1_532);
                                  c_534 := x_535;
                                  x_537 := close[true](c_534);
                                  __536 := x_537;
                                  x_525 := tt_3;
                                  free(_523);
                                }
                              }
                              x_518 := x_525;
                              free(_516);
                            }
                          }
                          return x_518;
                        };
                      x_495 := x_501;
                      free(x_496);
                    }
                  }
                  x_486 := x_495;
                }
              }
              x_478 := x_486;
            }
          }
          return x_478;
        };
      x_463 := x_474;
    }
  }
  return x_463;
}

fn cmsortU_538(zs_539%U) {
  x_540 :=
    lazy {
      x_543 :=
        fn lam_544(_545%L) {
          x_546 := cmsort_workerU_384(4, zs_539, _545);
          return x_546;
        };
      x_542 := fork(x_543);
      c_541 := x_542;
      x_548 := recv[U](c_541);
      _547 := x_548;
      match[L](_547){
        ex1UL_32(m_550, n_551) => {
          x_553 := close[false](n_551);
          __552 := x_553;
          x_549 := m_550;
          free(_547);
        }
      }
      return x_549;
    };
  return x_540;
}

fn cmsortL_554(zs_555%U) {
  x_556 :=
    lazy {
      x_559 :=
        fn lam_560(_561%L) {
          x_562 := cmsort_workerL_461(4, zs_555, _561);
          return x_562;
        };
      x_558 := fork(x_559);
      c_557 := x_558;
      x_564 := recv[L](c_557);
      _563 := x_564;
      match[L](_563){
        ex1LL_30(m_566, n_567) => {
          x_569 := close[false](n_567);
          __568 := x_569;
          x_565 := m_566;
          free(_563);
        }
      }
      return x_565;
    };
  return x_556;
}

fn mklistU_570(n_571%U) {
  x_573 := lte(n_571, 0);
  match(x_573){
    true_4() => {
      x_574 := mkconstr(nilUU_24, []);
      x_572 := x_574;
    }
    false_5() => {
      x_576 := sub(n_571, 1);
      x_575 := mklistU_570(x_576);
      x_577 := mkconstr(consUU_25, [n_571, x_575]);
      x_572 := x_577;
    }
  }
  return x_572;
}

fn mklistL_578(n_579%U) {
  x_581 := lte(n_579, 0);
  match(x_581){
    true_4() => {
      x_582 := mkconstr(nilUL_22, []);
      x_580 := x_582;
    }
    false_5() => {
      x_584 := sub(n_579, 1);
      x_583 := mklistL_578(x_584);
      x_585 := mkconstr(consUL_23, [n_579, x_583]);
      x_580 := x_585;
    }
  }
  return x_580;
}

fn list_lenU_586(__587%U) {
  match[U](__587){
    nilUU_24() => {
      x_588 := 0;
    }
    consUU_25(hd_589, tl_590) => {
      x_592 := list_lenU_586(tl_590);
      x_591 := add(1, x_592);
      x_588 := x_591;
    }
  }
  return x_588;
}

fn list_lenL_593(__594%U) {
  match[L](__594){
    nilUL_22() => {
      x_595 := 0;
      free(__594);
    }
    consUL_23(hd_596, tl_597) => {
      x_599 := list_lenL_593(tl_597);
      x_598 := add(1, x_599);
      x_595 := x_598;
      free(__594);
    }
  }
  return x_595;
}

fn string_of_listU_600(__601%U) {
  match[U](__601){
    nilUU_24() => {
      x_603 := str("nil");
      x_602 := x_603;
    }
    consUU_25(hd_604, tl_605) => {
      x_608 := string_of_int_236(hd_604);
      x_609 := str(" :: ");
      x_607 := cat(x_608, x_609);
      x_610 := string_of_listU_600(tl_605);
      x_606 := cat(x_607, x_610);
      x_602 := x_606;
    }
  }
  return x_602;
}

fn string_of_listL_611(__612%U) {
  match[L](__612){
    nilUL_22() => {
      x_614 := str("nil");
      x_613 := x_614;
      free(__612);
    }
    consUL_23(hd_615, tl_616) => {
      x_619 := string_of_int_236(hd_615);
      x_620 := str(" :: ");
      x_618 := cat(x_619, x_620);
      x_621 := string_of_listL_611(tl_616);
      x_617 := cat(x_618, x_621);
      x_613 := x_617;
      free(__612);
    }
  }
  return x_613;
}

main := {
  x_623 := mklistL_578(2000000);
  test_622 := x_623;
  x_624 :=
    lazy {
      x_627 := cmsortL_554(test_622);
      x_626 := force(x_627);
      _625 := x_626;
      x_629 := list_lenL_593(_625);
      len_628 := x_629;
      x_631 := string_of_int_236(len_628);
      x_630 := print(x_631);
      return x_630;
    };
  return x_624;
};

-----------------------------------------

fn fn0_idU_632(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_633(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_634 := fn0_idU_632(A_2, m_3);
  return x_634;
}

fn fn0_idL_635(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_636(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_637 := fn0_idL_635(A_5, m_6);
  return x_637;
}

fn fn0_rwlUU_638(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_639(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_640 := fn0_rwlUU_638(A_8, m_9, n_10, B_11, __12, __13);
  return x_640;
}

fn fn0_rwlUL_641(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_642(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_643 := fn0_rwlUL_641(A_15, m_16, n_17, B_18, __19, __20);
  return x_643;
}

fn fn0_rwlLU_644(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_645(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_646 := fn0_rwlLU_644(A_22, m_23, n_24, B_25, __26, __27);
  return x_646;
}

fn fn0_rwlLL_647(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_648(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_649 := fn0_rwlLL_647(A_29, m_30, n_31, B_32, __33, __34);
  return x_649;
}

fn fn0_rwrUU_650(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_651(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_652 := fn0_rwrUU_650(A_36, m_37, n_38, B_39, __40, __41);
  return x_652;
}

fn fn0_rwrUL_653(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_654(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_655 := fn0_rwrUL_653(A_43, m_44, n_45, B_46, __47, __48);
  return x_655;
}

fn fn0_rwrLU_656(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_657(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_658 := fn0_rwrLU_656(A_50, m_51, n_52, B_53, __54, __55);
  return x_658;
}

fn fn0_rwrLL_659(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_660(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_661 := fn0_rwrLL_659(A_57, m_58, n_59, B_60, __61, __62);
  return x_661;
}

fn fn0_sing_elimUU_662(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_663(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_664 := fn0_sing_elimUU_662(A_64, x_65, __66);
  return x_664;
}

fn fn0_sing_elimUL_665(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_666(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_667 := fn0_sing_elimUL_665(A_68, x_69, __70);
  return x_667;
}

fn fn0_sing_elimLU_668(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_669(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_670 := fn0_sing_elimLU_668(A_72, x_73, __74);
  return x_670;
}

fn fn0_sing_elimLL_671(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_672(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_673 := fn0_sing_elimLL_671(A_76, x_77, __78);
  return x_673;
}

fn fn0_not_674(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_675(env) {
  __80 := env[1];
  x_676 := fn0_not_674(__80);
  return x_676;
}

fn fn0_and_677(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_678(env) {
  __83 := env[1];
  __84 := env[2];
  x_679 := fn0_and_677(__83, __84);
  return x_679;
}

fn fn0_or_680(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_681(env) {
  __88 := env[1];
  __89 := env[2];
  x_682 := fn0_or_680(__88, __89);
  return x_682;
}

fn fn0_xor_683(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_684(env) {
  __93 := env[1];
  __94 := env[2];
  x_685 := fn0_xor_683(__93, __94);
  return x_685;
}

fn fn0_lte_686(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_686(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_687(env) {
  __99 := env[1];
  __100 := env[2];
  x_688 := fn0_lte_686(__99, __100);
  return x_688;
}

fn fn0_lt_689(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_686(x_110, y_108);
  return x_109;
}

fn fn1_lt_690(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_691 := fn0_lt_689(x_107, y_108);
  return x_691;
}

fn fn0_pred_692(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_693(env) {
  __112 := env[1];
  x_694 := fn0_pred_692(__112);
  return x_694;
}

fn fn0_add_695(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_695(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_696(env) {
  __117 := env[1];
  __118 := env[2];
  x_697 := fn0_add_695(__117, __118);
  return x_697;
}

fn fn0_sub_698(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_692(__124);
      x_128 := fn0_sub_698(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_699(env) {
  __124 := env[1];
  __125 := env[2];
  x_700 := fn0_sub_698(__124, __125);
  return x_700;
}

fn fn0_mul_701(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_701(n_135, __132);
      x_136 := fn0_add_695(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_702(env) {
  __131 := env[1];
  __132 := env[2];
  x_703 := fn0_mul_701(__131, __132);
  return x_703;
}

fn fn0_div_704(x_139, y_140) {
  x_142 := fn0_lt_689(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_706, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_710, loop_144, x_139);
      appc(x_711, x_710, y_140);
      move1(x_156, x_711);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_705(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_713 := fn0_div_704(x_139, y_140);
  return x_713;
}

fn fn0_rem_714(x_158, y_159) {
  x_162 := fn0_div_704(x_158, y_159);
  x_161 := fn0_mul_701(x_162, y_159);
  x_160 := fn0_sub_698(x_158, x_161);
  return x_160;
}

fn fn1_rem_715(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_716 := fn0_rem_714(x_158, y_159);
  return x_716;
}

fn fn0_free_listUU_717(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_719, f_165, hd_168);
      move1(x_171, x_719);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_717(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_718(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_721 := fn0_free_listUU_717(A_164, f_165, __166);
  return x_721;
}

fn fn0_free_listUL_722(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_724, f_175, hd_178);
      move1(x_181, x_724);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_722(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_723(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_726 := fn0_free_listUL_722(A_174, f_175, __176);
  return x_726;
}

fn fn0_free_listLL_727(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_729, f_185, hd_188);
      move1(x_191, x_729);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_727(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_728(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_731 := fn0_free_listLL_727(A_184, f_185, __186);
  return x_731;
}

fn fn0_pow_732(x_194, y_195) {
  mkclo1(x_197, fn1_loop_734, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_738, loop_196, 1);
  appc(x_739, x_738, y_195);
  move1(x_206, x_739);
  return x_206;
}

fn fn1_pow_733(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_741 := fn0_pow_732(x_194, y_195);
  return x_741;
}

fn fn0_powm_742(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_744, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_748, loop_211, 1);
  appc(x_749, x_748, y_209);
  move1(x_222, x_749);
  return x_222;
}

fn fn1_powm_743(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_751 := fn0_powm_742(x_208, y_209, m_210);
  return x_751;
}

fn fn0_ord_752(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_753(env) {
  c_224 := env[1];
  x_754 := fn0_ord_752(c_224);
  return x_754;
}

fn fn0_chr_755(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_756(env) {
  i_227 := env[1];
  x_757 := fn0_chr_755(i_227);
  return x_757;
}

fn fn0_str_758(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_759(env) {
  c_230 := env[1];
  x_760 := fn0_str_758(c_230);
  return x_760;
}

fn fn0_strlen_761(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_762(env) {
  s_234 := env[1];
  x_763 := fn0_strlen_761(s_234);
  return x_763;
}

fn fn0_string_of_int_764(i_237) {
  mkclo1(x_239, fn1_aux_766, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lt(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_769, aux_238, i_237);
      move1(x_259, x_769);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_771, aux_238, x_263);
      move1(x_262, x_771);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_765(env) {
  i_237 := env[1];
  x_773 := fn0_string_of_int_764(i_237);
  return x_773;
}

fn fn0_splitU_774(__265) {
  switch(ctagof(__265)){
    nilUU_24 => {
      mkbox(x_267, nilUU_24, 0);
      mkbox(x_268, nilUU_24, 0);
      mkbox(x_269, ex1UU_33, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_25 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_24 => {
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, consUU_25, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_24, 0);
          mkbox(x_276, ex1UU_33, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_25 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_774(tl_278);
          switch(ctagof(x_280)){
            ex1UU_33 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_25);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_25, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_33, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_775(env) {
  __265 := env[1];
  x_776 := fn0_splitU_774(__265);
  return x_776;
}

fn fn0_splitL_777(__287) {
  switch(ctagof(__287)){
    nilUL_22 => {
      rebox(x_289, __287, nilUL_22);
      mkbox(x_290, nilUL_22, 0);
      mkbox(x_291, ex1LL_30, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_23 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_22 => {
          rebox(x_295, tl_293, nilUL_22);
          rebox(x_296, __287, consUL_23);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_22, 0);
          mkbox(x_298, ex1LL_30, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_23 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_777(tl_300);
          switch(ctagof(x_302)){
            ex1LL_30 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_23);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_23);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_30);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_778(env) {
  __287 := env[1];
  x_779 := fn0_splitL_777(__287);
  return x_779;
}

fn fn0_mergeU_780(__309, __310) {
  switch(ctagof(__309)){
    nilUU_24 => {
      move1(x_311, __310);
      break;
    }
    consUU_25 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_24 => {
          mkbox(x_315, consUU_25, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_25 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_25, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_780(tl_313, x_321);
              mkbox(x_322, consUU_25, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_25, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_780(x_324, tl_317);
              mkbox(x_325, consUU_25, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_781(env) {
  __309 := env[1];
  __310 := env[2];
  x_782 := fn0_mergeU_780(__309, __310);
  return x_782;
}

fn fn0_mergeL_783(__327, __328) {
  switch(ctagof(__327)){
    nilUL_22 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_23 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_22 => {
          rebox(x_333, __327, consUL_23);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_23 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_23);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_783(tl_331, x_339);
              rebox(x_340, __327, consUL_23);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_23);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_783(x_342, tl_335);
              rebox(x_343, __327, consUL_23);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_784(env) {
  __327 := env[1];
  __328 := env[2];
  x_785 := fn0_mergeL_783(__327, __328);
  return x_785;
}

fn fn0_msortU_786(__345) {
  switch(ctagof(__345)){
    nilUU_24 => {
      mkbox(x_347, nilUU_24, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_25 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_24 => {
          mkbox(x_351, nilUU_24, 0);
          mkbox(x_352, consUU_25, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_25 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_25, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_25, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_774(x_358);
          switch(ctagof(x_356)){
            ex1UU_33 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_786(m_359);
              x_363 := fn0_msortU_786(n_360);
              x_361 := fn0_mergeU_780(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_787(env) {
  __345 := env[1];
  x_788 := fn0_msortU_786(__345);
  return x_788;
}

fn fn0_msortL_789(__365) {
  switch(ctagof(__365)){
    nilUL_22 => {
      rebox(x_367, __365, nilUL_22);
      move1(x_366, x_367);
      break;
    }
    consUL_23 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_22 => {
          rebox(x_371, tl_369, nilUL_22);
          rebox(x_372, __365, consUL_23);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_23 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_23);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_23);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_777(x_378);
          switch(ctagof(x_376)){
            ex1LL_30 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_789(m_379);
              x_383 := fn0_msortL_789(n_380);
              x_381 := fn0_mergeL_783(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_790(env) {
  __365 := env[1];
  x_791 := fn0_msortL_789(__365);
  return x_791;
}

fn fn0_cmsort_workerU_792(spwn_385) {
  lte(x_387, spwn_385, 0);
  switch(x_387){
    true_4 => {
      mkclo1(x_388, fn1_lam_794, fvc:=1, argc:=2);
      setclo(x_388, msortU_344, 1);
      move1(x_386, x_388);
      break;
    }
    false_5 => {
      mkclo1(x_397, fn1_lam_796, fvc:=5, argc:=2);
      setclo(x_397, rwlUU_7, 1);
      setclo(x_397, splitU_264, 2);
      setclo(x_397, mergeU_308, 3);
      setclo(x_397, cmsort_workerU_384, 4);
      setclo(x_397, spwn_385, 5);
      move1(x_386, x_397);
      break;
    }
  }
  return x_386;
}

fn fn1_cmsort_workerU_793(env) {
  spwn_385 := env[1];
  x_810 := fn0_cmsort_workerU_792(spwn_385);
  return x_810;
}

fn fn0_cmsort_workerL_811(spwn_462) {
  lte(x_464, spwn_462, 0);
  switch(x_464){
    true_4 => {
      mkclo1(x_465, fn1_lam_813, fvc:=1, argc:=2);
      setclo(x_465, msortL_364, 1);
      move1(x_463, x_465);
      break;
    }
    false_5 => {
      mkclo1(x_474, fn1_lam_815, fvc:=5, argc:=2);
      setclo(x_474, rwlLL_28, 1);
      setclo(x_474, splitL_286, 2);
      setclo(x_474, mergeL_326, 3);
      setclo(x_474, cmsort_workerL_461, 4);
      setclo(x_474, spwn_462, 5);
      move1(x_463, x_474);
      break;
    }
  }
  return x_463;
}

fn fn1_cmsort_workerL_812(env) {
  spwn_462 := env[1];
  x_829 := fn0_cmsort_workerL_811(spwn_462);
  return x_829;
}

fn fn0_cmsortU_830(zs_539) {
  lazy(x_540, lazy__832, 2);
  setlazy(x_540, cmsort_workerU_384, 0);
  setlazy(x_540, zs_539, 1);
  return x_540;
}

fn fn1_cmsortU_831(env) {
  zs_539 := env[1];
  x_838 := fn0_cmsortU_830(zs_539);
  return x_838;
}

fn fn0_cmsortL_839(zs_555) {
  lazy(x_556, lazy__841, 2);
  setlazy(x_556, cmsort_workerL_461, 0);
  setlazy(x_556, zs_555, 1);
  return x_556;
}

fn fn1_cmsortL_840(env) {
  zs_555 := env[1];
  x_847 := fn0_cmsortL_839(zs_555);
  return x_847;
}

fn fn0_mklistU_848(n_571) {
  lte(x_573, n_571, 0);
  switch(x_573){
    true_4 => {
      mkbox(x_574, nilUU_24, 0);
      move1(x_572, x_574);
      break;
    }
    false_5 => {
      sub(x_576, n_571, 1);
      x_575 := fn0_mklistU_848(x_576);
      mkbox(x_577, consUU_25, 2);
      setbox(x_577, n_571, 0);
      setbox(x_577, x_575, 1);
      move1(x_572, x_577);
      break;
    }
  }
  return x_572;
}

fn fn1_mklistU_849(env) {
  n_571 := env[1];
  x_850 := fn0_mklistU_848(n_571);
  return x_850;
}

fn fn0_mklistL_851(n_579) {
  lte(x_581, n_579, 0);
  switch(x_581){
    true_4 => {
      mkbox(x_582, nilUL_22, 0);
      move1(x_580, x_582);
      break;
    }
    false_5 => {
      sub(x_584, n_579, 1);
      x_583 := fn0_mklistL_851(x_584);
      mkbox(x_585, consUL_23, 2);
      setbox(x_585, n_579, 0);
      setbox(x_585, x_583, 1);
      move1(x_580, x_585);
      break;
    }
  }
  return x_580;
}

fn fn1_mklistL_852(env) {
  n_579 := env[1];
  x_853 := fn0_mklistL_851(n_579);
  return x_853;
}

fn fn0_list_lenU_854(__587) {
  switch(ctagof(__587)){
    nilUU_24 => {
      move1(x_588, 0);
      break;
    }
    consUU_25 => {
      getbox(hd_589, __587, 0);
      getbox(tl_590, __587, 1);
      x_592 := fn0_list_lenU_854(tl_590);
      add(x_591, 1, x_592);
      move1(x_588, x_591);
      break;
    }
  }
  return x_588;
}

fn fn1_list_lenU_855(env) {
  __587 := env[1];
  x_856 := fn0_list_lenU_854(__587);
  return x_856;
}

fn fn0_list_lenL_857(__594) {
  switch(ctagof(__594)){
    nilUL_22 => {
      move1(x_595, 0);
      free(__594);
      break;
    }
    consUL_23 => {
      getbox(hd_596, __594, 0);
      getbox(tl_597, __594, 1);
      x_599 := fn0_list_lenL_857(tl_597);
      add(x_598, 1, x_599);
      move1(x_595, x_598);
      free(__594);
      break;
    }
  }
  return x_595;
}

fn fn1_list_lenL_858(env) {
  __594 := env[1];
  x_859 := fn0_list_lenL_857(__594);
  return x_859;
}

fn fn0_string_of_listU_860(__601) {
  switch(ctagof(__601)){
    nilUU_24 => {
      str(x_603, "nil")
      move1(x_602, x_603);
      break;
    }
    consUU_25 => {
      getbox(hd_604, __601, 0);
      getbox(tl_605, __601, 1);
      x_608 := fn0_string_of_int_764(hd_604);
      str(x_609, " :: ")
      cat(x_607, x_608, x_609);
      x_610 := fn0_string_of_listU_860(tl_605);
      cat(x_606, x_607, x_610);
      move1(x_602, x_606);
      break;
    }
  }
  return x_602;
}

fn fn1_string_of_listU_861(env) {
  __601 := env[1];
  x_862 := fn0_string_of_listU_860(__601);
  return x_862;
}

fn fn0_string_of_listL_863(__612) {
  switch(ctagof(__612)){
    nilUL_22 => {
      str(x_614, "nil")
      move1(x_613, x_614);
      free(__612);
      break;
    }
    consUL_23 => {
      getbox(hd_615, __612, 0);
      getbox(tl_616, __612, 1);
      x_619 := fn0_string_of_int_764(hd_615);
      str(x_620, " :: ")
      cat(x_618, x_619, x_620);
      x_621 := fn0_string_of_listL_863(tl_616);
      cat(x_617, x_618, x_621);
      move1(x_613, x_617);
      free(__612);
      break;
    }
  }
  return x_613;
}

fn fn1_string_of_listL_864(env) {
  __612 := env[1];
  x_865 := fn0_string_of_listL_863(__612);
  return x_865;
}

fn lazy__867(env) {
  string_of_int_236 := env[0];
  cmsortL_554 := env[1];
  list_lenL_593 := env[2];
  test_622 := env[3];
  x_627 := fn0_cmsortL_839(test_622);
  force(x_626, x_627);
  free(x_627);
  move1(_625, x_626);
  x_629 := fn0_list_lenL_857(_625);
  move1(len_628, x_629);
  x_631 := fn0_string_of_int_764(len_628);
  print(x_630, x_631);
  return x_630;
}

fn lazy__841(env) {
  cmsort_workerL_461 := env[0];
  zs_555 := env[1];
  mkclo1(x_559, fn1_lam_842, fvc:=2, argc:=1);
  setclo(x_559, cmsort_workerL_461, 1);
  setclo(x_559, zs_555, 2);
  fork(x_558, x_559);
  move1(c_557, x_558);
  recv1(x_564, c_557);
  move1(_563, x_564);
  switch(ctagof(_563)){
    ex1LL_30 => {
      getbox(m_566, _563, 0);
      getbox(n_567, _563, 1);
      close1(x_569, n_567);
      move1(__568, x_569);
      move1(x_565, m_566);
      free(_563);
      break;
    }
  }
  return x_565;
}

fn fn1_lam_842(env) {
  lam_560 := env[0];
  cmsort_workerL_461 := env[1];
  zs_555 := env[2];
  _561 := env[3];
  appc(x_843, cmsort_workerL_461, 4);
  appc(x_844, x_843, zs_555);
  appc(x_845, x_844, _561);
  free(x_844);
  move1(x_562, x_845);
  return x_562;
}

fn lazy__832(env) {
  cmsort_workerU_384 := env[0];
  zs_539 := env[1];
  mkclo1(x_543, fn1_lam_833, fvc:=2, argc:=1);
  setclo(x_543, cmsort_workerU_384, 1);
  setclo(x_543, zs_539, 2);
  fork(x_542, x_543);
  move1(c_541, x_542);
  recv0(x_548, c_541);
  move1(_547, x_548);
  switch(ctagof(_547)){
    ex1UL_32 => {
      getbox(m_550, _547, 0);
      getbox(n_551, _547, 1);
      close1(x_553, n_551);
      move1(__552, x_553);
      move1(x_549, m_550);
      free(_547);
      break;
    }
  }
  return x_549;
}

fn fn1_lam_833(env) {
  lam_544 := env[0];
  cmsort_workerU_384 := env[1];
  zs_539 := env[2];
  _545 := env[3];
  appc(x_834, cmsort_workerU_384, 4);
  appc(x_835, x_834, zs_539);
  appc(x_836, x_835, _545);
  free(x_835);
  move1(x_546, x_836);
  return x_546;
}

fn fn1_lam_815(env) {
  lam_475 := env[0];
  rwlLL_28 := env[1];
  splitL_286 := env[2];
  mergeL_326 := env[3];
  cmsort_workerL_461 := env[4];
  spwn_462 := env[5];
  zs_476 := env[6];
  __477 := env[7];
  switch(ctagof(zs_476)){
    nilUL_22 => {
      lazy(x_479, lazy__816, 2);
      setlazy(x_479, zs_476, 0);
      setlazy(x_479, __477, 1);
      move1(x_478, x_479);
      break;
    }
    consUL_23 => {
      getbox(hd_484, zs_476, 0);
      getbox(tl_485, zs_476, 1);
      switch(ctagof(tl_485)){
        nilUL_22 => {
          lazy(x_487, lazy__817, 4);
          setlazy(x_487, zs_476, 0);
          setlazy(x_487, __477, 1);
          setlazy(x_487, hd_484, 2);
          setlazy(x_487, tl_485, 3);
          move1(x_486, x_487);
          break;
        }
        consUL_23 => {
          getbox(hd_493, tl_485, 0);
          getbox(tl_494, tl_485, 1);
          rebox(x_497, tl_485, consUL_23);
          setbox(x_497, hd_493, 0);
          setbox(x_497, tl_494, 1);
          rebox(x_498, zs_476, consUL_23);
          setbox(x_498, hd_484, 0);
          setbox(x_498, x_497, 1);
          x_496 := fn0_splitL_777(x_498);
          switch(ctagof(x_496)){
            ex1LL_30 => {
              getbox(m_499, x_496, 0);
              getbox(n_500, x_496, 1);
              lazy(x_501, lazy__818, 7);
              setlazy(x_501, rwlLL_28, 0);
              setlazy(x_501, mergeL_326, 1);
              setlazy(x_501, cmsort_workerL_461, 2);
              setlazy(x_501, spwn_462, 3);
              setlazy(x_501, __477, 4);
              setlazy(x_501, m_499, 5);
              setlazy(x_501, n_500, 6);
              move1(x_495, x_501);
              free(x_496);
              break;
            }
          }
          move1(x_486, x_495);
          break;
        }
      }
      move1(x_478, x_486);
      break;
    }
  }
  return x_478;
}

fn lazy__818(env) {
  rwlLL_28 := env[0];
  mergeL_326 := env[1];
  cmsort_workerL_461 := env[2];
  spwn_462 := env[3];
  __477 := env[4];
  m_499 := env[5];
  n_500 := env[6];
  mkclo1(x_504, fn1_lam_819, fvc:=3, argc:=1);
  setclo(x_504, cmsort_workerL_461, 1);
  setclo(x_504, spwn_462, 2);
  setclo(x_504, m_499, 3);
  fork(x_503, x_504);
  move1(r1_502, x_503);
  mkclo1(x_511, fn1_lam_824, fvc:=3, argc:=1);
  setclo(x_511, cmsort_workerL_461, 1);
  setclo(x_511, spwn_462, 2);
  setclo(x_511, n_500, 3);
  fork(x_510, x_511);
  move1(r2_509, x_510);
  recv1(x_517, r1_502);
  move1(_516, x_517);
  switch(ctagof(_516)){
    ex1LL_30 => {
      getbox(m_519, _516, 0);
      getbox(n_520, _516, 1);
      close1(x_522, n_520);
      move1(__521, x_522);
      recv1(x_524, r2_509);
      move1(_523, x_524);
      switch(ctagof(_523)){
        ex1LL_30 => {
          getbox(m_526, _523, 0);
          getbox(n_527, _523, 1);
          close1(x_529, n_527);
          move1(__528, x_529);
          x_531 := fn0_mergeL_783(m_519, m_526);
          move1(zs1_530, x_531);
          x_533 := fn0_rwlLL_647(NULL, NULL, NULL, NULL, NULL, zs1_530);
          move1(zs1_532, x_533);
          send(x_535, __477, zs1_532);
          move1(c_534, x_535);
          close0(x_537, c_534);
          move1(__536, x_537);
          move1(x_525, tt_3);
          free(_523);
          break;
        }
      }
      move1(x_518, x_525);
      free(_516);
      break;
    }
  }
  return x_518;
}

fn fn1_lam_819(env) {
  lam_505 := env[0];
  cmsort_workerL_461 := env[1];
  spwn_462 := env[2];
  m_499 := env[3];
  _506 := env[4];
  sub(x_508, spwn_462, 1);
  appc(x_820, cmsort_workerL_461, x_508);
  appc(x_821, x_820, m_499);
  appc(x_822, x_821, _506);
  free(x_821);
  move1(x_507, x_822);
  return x_507;
}

fn fn1_lam_824(env) {
  lam_512 := env[0];
  cmsort_workerL_461 := env[1];
  spwn_462 := env[2];
  n_500 := env[3];
  _513 := env[4];
  sub(x_515, spwn_462, 1);
  appc(x_825, cmsort_workerL_461, x_515);
  appc(x_826, x_825, n_500);
  appc(x_827, x_826, _513);
  free(x_826);
  move1(x_514, x_827);
  return x_514;
}

fn lazy__817(env) {
  zs_476 := env[0];
  __477 := env[1];
  hd_484 := env[2];
  tl_485 := env[3];
  rebox(x_490, tl_485, nilUL_22);
  rebox(x_491, zs_476, consUL_23);
  setbox(x_491, hd_484, 0);
  setbox(x_491, x_490, 1);
  send(x_489, __477, x_491);
  move1(c_488, x_489);
  close0(x_492, c_488);
  return x_492;
}

fn lazy__816(env) {
  zs_476 := env[0];
  __477 := env[1];
  rebox(x_482, zs_476, nilUL_22);
  send(x_481, __477, x_482);
  move1(c_480, x_481);
  close0(x_483, c_480);
  return x_483;
}

fn fn1_lam_813(env) {
  lam_466 := env[0];
  msortL_364 := env[1];
  zs_467 := env[2];
  __468 := env[3];
  lazy(x_469, lazy__814, 3);
  setlazy(x_469, msortL_364, 0);
  setlazy(x_469, zs_467, 1);
  setlazy(x_469, __468, 2);
  return x_469;
}

fn lazy__814(env) {
  msortL_364 := env[0];
  zs_467 := env[1];
  __468 := env[2];
  x_472 := fn0_msortL_789(zs_467);
  send(x_471, __468, x_472);
  move1(c_470, x_471);
  close0(x_473, c_470);
  return x_473;
}

fn fn1_lam_796(env) {
  lam_398 := env[0];
  rwlUU_7 := env[1];
  splitU_264 := env[2];
  mergeU_308 := env[3];
  cmsort_workerU_384 := env[4];
  spwn_385 := env[5];
  zs_399 := env[6];
  __400 := env[7];
  switch(ctagof(zs_399)){
    nilUU_24 => {
      lazy(x_402, lazy__797, 1);
      setlazy(x_402, __400, 0);
      move1(x_401, x_402);
      break;
    }
    consUU_25 => {
      getbox(hd_407, zs_399, 0);
      getbox(tl_408, zs_399, 1);
      switch(ctagof(tl_408)){
        nilUU_24 => {
          lazy(x_410, lazy__798, 2);
          setlazy(x_410, __400, 0);
          setlazy(x_410, hd_407, 1);
          move1(x_409, x_410);
          break;
        }
        consUU_25 => {
          getbox(hd_416, tl_408, 0);
          getbox(tl_417, tl_408, 1);
          mkbox(x_420, consUU_25, 2);
          setbox(x_420, hd_416, 0);
          setbox(x_420, tl_417, 1);
          mkbox(x_421, consUU_25, 2);
          setbox(x_421, hd_407, 0);
          setbox(x_421, x_420, 1);
          x_419 := fn0_splitU_774(x_421);
          switch(ctagof(x_419)){
            ex1UU_33 => {
              getbox(m_422, x_419, 0);
              getbox(n_423, x_419, 1);
              lazy(x_424, lazy__799, 7);
              setlazy(x_424, rwlUU_7, 0);
              setlazy(x_424, mergeU_308, 1);
              setlazy(x_424, cmsort_workerU_384, 2);
              setlazy(x_424, spwn_385, 3);
              setlazy(x_424, __400, 4);
              setlazy(x_424, m_422, 5);
              setlazy(x_424, n_423, 6);
              move1(x_418, x_424);
              free(x_419);
              break;
            }
          }
          move1(x_409, x_418);
          break;
        }
      }
      move1(x_401, x_409);
      break;
    }
  }
  return x_401;
}

fn lazy__799(env) {
  rwlUU_7 := env[0];
  mergeU_308 := env[1];
  cmsort_workerU_384 := env[2];
  spwn_385 := env[3];
  __400 := env[4];
  m_422 := env[5];
  n_423 := env[6];
  mkclo1(x_427, fn1_lam_800, fvc:=3, argc:=1);
  setclo(x_427, cmsort_workerU_384, 1);
  setclo(x_427, spwn_385, 2);
  setclo(x_427, m_422, 3);
  fork(x_426, x_427);
  move1(r1_425, x_426);
  mkclo1(x_434, fn1_lam_805, fvc:=3, argc:=1);
  setclo(x_434, cmsort_workerU_384, 1);
  setclo(x_434, spwn_385, 2);
  setclo(x_434, n_423, 3);
  fork(x_433, x_434);
  move1(r2_432, x_433);
  recv0(x_440, r1_425);
  move1(_439, x_440);
  switch(ctagof(_439)){
    ex1UL_32 => {
      getbox(m_442, _439, 0);
      getbox(n_443, _439, 1);
      close1(x_445, n_443);
      move1(__444, x_445);
      recv0(x_447, r2_432);
      move1(_446, x_447);
      switch(ctagof(_446)){
        ex1UL_32 => {
          getbox(m_449, _446, 0);
          getbox(n_450, _446, 1);
          close1(x_452, n_450);
          move1(__451, x_452);
          x_454 := fn0_mergeU_780(m_442, m_449);
          move1(zs1_453, x_454);
          x_456 := fn0_rwlUU_638(NULL, NULL, NULL, NULL, NULL, zs1_453);
          move1(zs1_455, x_456);
          send(x_458, __400, zs1_455);
          move1(c_457, x_458);
          close0(x_460, c_457);
          move1(__459, x_460);
          move1(x_448, tt_3);
          free(_446);
          break;
        }
      }
      move1(x_441, x_448);
      free(_439);
      break;
    }
  }
  return x_441;
}

fn fn1_lam_800(env) {
  lam_428 := env[0];
  cmsort_workerU_384 := env[1];
  spwn_385 := env[2];
  m_422 := env[3];
  _429 := env[4];
  sub(x_431, spwn_385, 1);
  appc(x_801, cmsort_workerU_384, x_431);
  appc(x_802, x_801, m_422);
  appc(x_803, x_802, _429);
  free(x_802);
  move1(x_430, x_803);
  return x_430;
}

fn fn1_lam_805(env) {
  lam_435 := env[0];
  cmsort_workerU_384 := env[1];
  spwn_385 := env[2];
  n_423 := env[3];
  _436 := env[4];
  sub(x_438, spwn_385, 1);
  appc(x_806, cmsort_workerU_384, x_438);
  appc(x_807, x_806, n_423);
  appc(x_808, x_807, _436);
  free(x_807);
  move1(x_437, x_808);
  return x_437;
}

fn lazy__798(env) {
  __400 := env[0];
  hd_407 := env[1];
  mkbox(x_413, nilUU_24, 0);
  mkbox(x_414, consUU_25, 2);
  setbox(x_414, hd_407, 0);
  setbox(x_414, x_413, 1);
  send(x_412, __400, x_414);
  move1(c_411, x_412);
  close0(x_415, c_411);
  return x_415;
}

fn lazy__797(env) {
  __400 := env[0];
  mkbox(x_405, nilUU_24, 0);
  send(x_404, __400, x_405);
  move1(c_403, x_404);
  close0(x_406, c_403);
  return x_406;
}

fn fn1_lam_794(env) {
  lam_389 := env[0];
  msortU_344 := env[1];
  zs_390 := env[2];
  __391 := env[3];
  lazy(x_392, lazy__795, 3);
  setlazy(x_392, msortU_344, 0);
  setlazy(x_392, zs_390, 1);
  setlazy(x_392, __391, 2);
  return x_392;
}

fn lazy__795(env) {
  msortU_344 := env[0];
  zs_390 := env[1];
  __391 := env[2];
  x_395 := fn0_msortU_786(zs_390);
  send(x_394, __391, x_395);
  move1(c_393, x_394);
  close0(x_396, c_393);
  return x_396;
}

fn fn1_aux_766(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_767, aux_240, i_246);
      move1(x_249, x_767);
      x_252 := fn0_ord_752(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_755(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_752(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_755(x_255);
      x_253 := fn0_str_758(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_744(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_745, loop_213, x_219);
      appc(x_746, x_745, x_221);
      move1(x_218, x_746);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_734(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_735, loop_198, x_204);
      appc(x_736, x_735, x_205);
      move1(x_203, x_736);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_706(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_692(y_148);
  x_150 := fn0_sub_698(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_707, loop_146, n_153);
      appc(x_708, x_707, y_148);
      move1(x_154, x_708);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_633, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_636, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_639, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_642, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_645, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_648, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_651, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_654, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_657, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_660, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_663, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_666, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_669, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_672, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_675, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_678, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_681, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_684, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_687, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_690, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_693, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_696, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_699, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_702, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_705, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_715, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_718, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_723, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_728, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_733, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_743, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_753, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_756, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_759, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_762, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_765, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_775, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_778, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_781, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_784, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_787, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_790, fvc:=0, argc:=1);
  mkclo0(cmsort_workerU_384, fn1_cmsort_workerU_793, fvc:=0, argc:=1);
  mkclo0(cmsort_workerL_461, fn1_cmsort_workerL_812, fvc:=0, argc:=1);
  mkclo0(cmsortU_538, fn1_cmsortU_831, fvc:=0, argc:=1);
  mkclo0(cmsortL_554, fn1_cmsortL_840, fvc:=0, argc:=1);
  mkclo0(mklistU_570, fn1_mklistU_849, fvc:=0, argc:=1);
  mkclo0(mklistL_578, fn1_mklistL_852, fvc:=0, argc:=1);
  mkclo0(list_lenU_586, fn1_list_lenU_855, fvc:=0, argc:=1);
  mkclo0(list_lenL_593, fn1_list_lenL_858, fvc:=0, argc:=1);
  mkclo0(string_of_listU_600, fn1_string_of_listU_861, fvc:=0, argc:=1);
  mkclo0(string_of_listL_611, fn1_string_of_listL_864, fvc:=0, argc:=1);
  x_623 := fn0_mklistL_851(2000000);
  move1(test_622, x_623);
  lazy(x_624, lazy__867, 4);
  setlazy(x_624, string_of_int_236, 0);
  setlazy(x_624, cmsortL_554, 1);
  setlazy(x_624, list_lenL_593, 2);
  setlazy(x_624, test_622, 3);
  force(x_866, x_624);
  return x_866;
}

-----------------------------------------

compilation success

-----------------------------------------

