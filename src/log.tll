[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "cmsort_ch"; relv = N;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "cmsort_ch"),
              [([(PId "xs")],
                (Some (Ch (true,
                         (Act (R, true,
                            (UOpr ("`",
                               (App [(Id ("msort", I)); (Id ("xs", I))]))),
                            (Binder ("_", End))))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "cmsort_worker"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("_",
                 (Pi (R, U,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("zs",
                       (Pi (R, L,
                          (App
                             [(Inst ("cmsort_ch", [(SId "t")], I));
                               (Id ("zs", I))]),
                          (Binder ("_", (IO (Id ("unit", I)))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cmsort_worker"),
              [([(PId "_"); (PId "nil"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Send (Id ("c", I)));
                              (App [(Id ("just", I)); (Id ("nil", I))])]),
                         (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "_"); (PBOpr ("::", (PId "z"), (PId "nil")));
                   (PId "c")],
                 (Some (MLet (
                          (App
                             [(Send (Id ("c", I)));
                               (App
                                  [(Id ("just", I));
                                    (BOpr ("::", (Id ("z", I)),
                                       (Id ("nil", I))))
                                    ])
                               ]),
                          (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "i"); (PId "zs"); (PId "c")],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("i", I)), (Int 0))), None)],
                          None,
                          [([(PId "true")],
                            (Some (MLet (
                                     (App
                                        [(Send (Id ("c", I)));
                                          (App
                                             [(Id ("just", I));
                                               (App
                                                  [(Id ("msort", I));
                                                    (Id ("zs", I))])
                                               ])
                                          ]),
                                     (Binder ((PId "c"),
                                        (Close (Id ("c", I)))))
                                     ))));
                            ([(PId "false")],
                             (Some (Match (
                                      [(R,
                                        (App
                                           [(Id ("split", I)); (Id ("zs", I))
                                             ]),
                                        (Some ("h1", IMeta)));
                                        (N, (Id ("refl", I)),
                                         (Some ("_",
                                                (BOpr ("=",
                                                   (Let (R, (Id ("h1", I)),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      )),
                                                   (Let (R,
                                                      (App
                                                         [(Id ("split", I));
                                                           (Id ("zs", I))]),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      ))
                                                   )))))
                                        ],
                                      None,
                                      [([(PBOpr ("\226\159\168,\226\159\169",
                                            (PId "xs0"), (PId "ys0")));
                                          (PId "pf")],
                                        (Some (MLet (
                                                 (Fork
                                                    (Fun (
                                                       (Pi (R, L, IMeta,
                                                          (Binder ("",
                                                             (IO
                                                                (Id ("unit",
                                                                   I)))
                                                             ))
                                                          )),
                                                       (Binder (None,
                                                          [([(PId "c1")],
                                                            (Some (App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ));
                                                                    (Id (
                                                                    "c1", I))
                                                                    ])))
                                                            ]
                                                          )),
                                                       []))),
                                                 (Binder ((PId "r1"),
                                                    (MLet (
                                                       (Fork
                                                          (Fun (
                                                             (Pi (R, L,
                                                                IMeta,
                                                                (Binder ("",
                                                                   (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    )))
                                                                   ))
                                                                )),
                                                             (Binder (None,
                                                                [([(PId "c2")
                                                                    ],
                                                                  (Some (
                                                                  App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ));
                                                                    (Id (
                                                                    "c2", I))
                                                                    ])))
                                                                  ]
                                                                )),
                                                             []))),
                                                       (Binder ((PId "r2"),
                                                          (MLet (
                                                             (Recv
                                                                (Id ("r1", I
                                                                   ))),
                                                             (Binder (
                                                                (PBOpr (
                                                                   "\226\159\168,\226\159\169",
                                                                   (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "xs1")])),
                                                                   (PId "c1")
                                                                   )),
                                                                (MLet (
                                                                   (Recv
                                                                    (Id (
                                                                    "r2", I))),
                                                                   (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "ys1")])),
                                                                    (PId "c2")
                                                                    )),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (Id (
                                                                    "xs1", I
                                                                    ));
                                                                    (Id (
                                                                    "ys1", I
                                                                    ))])]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ))]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ))])])))
                                                                    )),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "rwl", I
                                                                    ));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U, IMeta,
                                                                    (Binder (
                                                                    "x",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "x")],
                                                                    (Some (
                                                                    UOpr (
                                                                    "`",
                                                                    (Id ("x",
                                                                    I))))))]
                                                                    )), 
                                                                    []));
                                                                    (Id (
                                                                    "pf", I));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]))))),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c1", I))),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c2", I))),
                                                                    (Close
                                                                    (Id ("c",
                                                                    I)))))))
                                                                    ))))))))
                                                                    ))))))
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))))
                                        ]
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, Int_t,
           (Binder ("_",
              (Pi (R, U,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("zs",
                    (Pi (R, L,
                       (App
                          [(Inst ("cmsort_ch", [(SId "t")], I));
                            (Id ("zs", I))]),
                       (Binder ("_", (IO (Id ("unit", I)))))))
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "cmsort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("zs",
                 (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))
                 ))
              )),
           (Binder ((Some "cmsort"),
              [([(PId "zs")],
                (Some (MLet (
                         (Fork
                            (Fun (
                               (Pi (R, L, IMeta,
                                  (Binder ("", (IO (Id ("unit", I))))))),
                               (Binder (None,
                                  [([(PId "c")],
                                    (Some (App
                                             [(Id ("cmsort_worker", I));
                                               (Int 4); (Id ("zs", I));
                                               (Id ("c", I))])))
                                    ]
                                  )),
                               []))),
                         (Binder ((PId "c"),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "msg"), (PId "c"))),
                                  (BOpr (";", (Close (Id ("c", I))),
                                     (Return (Id ("msg", I)))))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("zs",
              (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))))
           )))
       ));
    view = [E]};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "print_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", (IO (Id ("unit", I))))))),
           (Binder ((Some "print_list"),
              [([(PId "nil")], (Some (Print (String "nil"))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr (";",
                          (Print
                             (App [(Id ("string_of_int", I)); (Id ("x", I))])),
                          (BOpr (";", (Print (String " :: ")),
                             (App [(Id ("print_list", I)); (Id ("xs", I))])))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", (IO (Id ("unit", I))))))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 2000000)]),
           (Binder ((PId "test"),
              (MLet ((App [(Id ("cmsort", I)); (Id ("test", I))]),
                 (Binder ((PConstr ("just", [(PId "sorted")])),
                    (Let (R,
                       (App [(Id ("list_len", I)); (Id ("sorted", I))]),
                       (Binder ((PId "len"),
                          (Print
                             (App
                                [(Id ("string_of_int", I)); (Id ("len", I))]))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

[parse success]

-----------------------------------------

#[program]
def split_33‹t_533› :
  (list_6‹??_77,t_533› int) ->
    ((prod1_25‹??_80,??_81›)
      (list_6‹??_78,t_533› int) (list_6‹??_79,t_533› int))
:=
  fun split_535 :
    (list_6‹??_52,t_533› int) ->
      ((prod1_25‹??_55,??_56›)
        (list_6‹??_53,t_533› int) (list_6‹??_54,t_533› int))
  | nil_8 =>
    (ex1_11‹??_61,??_62›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_57,??_58› ?_69[0;0])
      (nil_8‹??_59,??_60› ?_70[0;0]))
  | (cons_9 x_537 nil_8) =>
    (ex1_11‹??_69,??_70›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_65,??_66›
        ?_74[0;0] x_537 (nil_8‹??_63,??_64› ?_73[0;0]))
      (nil_8‹??_67,??_68› ?_75[0;0]))
  | (cons_9 x_538 (cons_9 y_539 zs_540)) =>
    match ((split_535) zs_540) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_542 ys_543) =>
      (ex1_11‹??_75,??_76›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_71,??_72› ?_78[0;0] x_538 xs_542)
        (cons_9‹??_73,??_74› ?_79[0;0] y_539 ys_543))

#[program]
def merge_34‹t_544› :
  (list_6‹??_93,t_544› int) ->
    (list_6‹??_94,t_544› int) -o (list_6‹??_95,t_544› int)
:=
  fun merge_547 :
    (list_6‹??_82,t_544› int) ->
      (list_6‹??_83,t_544› int) -o (list_6‹??_84,t_544› int)
  | nil_8, ys_550 => ys_550
  | xs_551, nil_8 => xs_551
  | (cons_9 x_552 xs_553), (cons_9 y_554 ys_555) =>
    match (__lte__ x_552 y_554) in ?_84[0;0] -o ?_85[0;0] with
    | true_4 =>
      (cons_9‹??_87,??_88›
        ?_87[0;0] x_552
        ((merge_547) xs_553 (cons_9‹??_85,??_86› ?_86[0;0] y_554 ys_555)))
    | false_5 =>
      (cons_9‹??_91,??_92›
        ?_89[0;0] y_554
        ((merge_547) (cons_9‹??_89,??_90› ?_88[0;0] x_552 xs_553) ys_555))

#[program]
def msort_35‹t_557› :
  (list_6‹??_106,t_557› int) -> (list_6‹??_107,t_557› int)
:=
  fun msort_559 :
    (list_6‹??_96,t_557› int) -> (list_6‹??_97,t_557› int)
  | nil_8 => (nil_8‹??_98,??_99› ?_90[0;0])
  | (cons_9 z_561 nil_8) =>
    (cons_9‹??_102,??_103›
      ?_92[0;0] z_561 (nil_8‹??_100,??_101› ?_91[0;0]))
  | zs_562 =>
    match ((split_33‹??_104›) zs_562) in ?_94[0;0] -o ?_93[0;0] with
    | (ex1_11 xs_564 ys_565) =>
      ((merge_34‹??_105›) ((msort_559) xs_564) ((msort_559) ys_565))

#[logical]
def cmsort_ch_36‹t_566› : (list_6‹??_111,t_566› int) -> L :=
  fun cmsort_ch_568 : (list_6‹??_108,t_566› int) -> L
  | xs_570 =>
    ch⟨⇑(__571 :
           ((ssing_6‹??_110›) ?_95[0;0] ((msort_35‹??_109›) xs_570))) ⇒
           •⟩

#[program]
def cmsort_worker_37‹t_572› :
  int ->
    ∀ (zs_574 : (list_6‹??_148,t_572› int)) ->
      ((cmsort_ch_36‹t_572›) zs_574) -o IO unit_9
:=
  fun cmsort_worker_576 :
    int ->
      ∀ (zs_578 : (list_6‹??_112,t_572› int)) ->
        ((cmsort_ch_36‹t_572›) zs_578) -o IO unit_9
  | _580, nil_8, c_581 =>
    let* c_582 :=
      ((send c_581)
        (just_2‹??_115,??_116›
          ?_97[0;0] (nil_8‹??_113,??_114› ?_96[0;0])))
    in close c_582
  | _583, (cons_9 z_584 nil_8), c_585 =>
    let* c_586 :=
      ((send c_585)
        (just_2‹??_121,??_122›
          ?_100[0;0]
          (cons_9‹??_119,??_120›
            ?_99[0;0] z_584 (nil_8‹??_117,??_118› ?_98[0;0]))))
    in close c_586
  | i_587, zs_588, c_589 =>
    match (__lte__ i_587 0) in ?_101[0;0] -o ?_102[0;0] with
    | true_4 =>
      let* c_591 :=
        ((send c_589)
          (just_2‹??_124,??_125›
            ?_103[0;0] ((msort_35‹??_123›) zs_588)))
      in close c_591
    | false_5 =>
      match ((split_33‹??_126›) zs_588),
      (refl_1‹??_127› ?_104[0;0] ?_105[0;0]) in
        ∀ (h1_592 : ?_106[0;0]) -o
          {(eq_1‹??_135›
             ?_111[0;0]
             match h1_592 in ?_108[0;0] -o ?_107[0;0] with
             | (ex1_11 xs_595 ys_596) =>
               ((merge_34‹??_130›)
                 ((msort_35‹??_128›) xs_595)
                 ((msort_35‹??_129›) ys_596))
             match ((split_33‹??_131›) zs_588) in
               ?_110[0;0] -o ?_109[0;0]
             with
             | (ex1_11 xs_598 ys_599) =>
               ((merge_34‹??_134›)
                 ((msort_35‹??_132›) xs_598)
                 ((msort_35‹??_133›) ys_599)))} -o
            ?_112[0;0]
      with
      | (ex1_11 xs0_600 ys0_601), pf_602 =>
        let* r1_603 :=
          fork
            fun _604 : ?_113[0;0] -o IO unit_9
            | c1_606 =>
              ((cmsort_worker_576) (__sub__ i_587 1) xs0_600 c1_606)
        in
        let* r2_607 :=
          fork
            fun _608 : ?_114[0;0] -o IO unit_9
            | c2_610 =>
              ((cmsort_worker_576) (__sub__ i_587 1) ys0_601 c2_610)
        in
        let* _611 := recv r1_603 in
        match _611 in ?_127[0;0] -o ?_126[0;0] with
        | (ex1_11 (just_2 xs1_613) c1_614) =>
          let* _615 := recv r2_607 in
          match _615 in ?_125[0;0] -o ?_124[0;0] with
          | (ex1_11 (just_2 ys1_617) c2_618) =>
            let zs1_619 :=
              ((just_2‹??_137,??_138›
                 ?_115[0;0] ((merge_34‹??_136›) xs1_613 ys1_617))
                : ((ssing_6‹??_142›)
                    ?_116[0;0]
                    ((merge_34‹??_141›)
                      ((msort_35‹??_139›) xs0_600)
                      ((msort_35‹??_140›) ys0_601))))
            in
            let zs1_620 :=
              (((rwl_2‹??_144,??_145›)
                 ?_122[0;0] ?_121[0;0] ?_120[0;0]
                 fun _621 : ?_117[0;0] -> ?_118[0;0]
                 | x_623 => ((ssing_6‹??_143›) ?_119[0;0] x_623) pf_602
                 zs1_619)
                : ((ssing_6‹??_147›)
                    ?_123[0;0] ((msort_35‹??_146›) zs_588)))
            in
            let* c_624 := ((send c_589) zs1_620) in
            let* __625 := close c1_614 in
            let* __626 := close c2_618 in close c_624

#[program]
def cmsort_38‹t_627› :
  ∀ (zs_628 : (list_6‹??_153,t_627› int)) ->
    IO ((ssing_6‹??_155›) ?_132[0;0] ((msort_35‹??_154›) zs_628))
:=
  fun cmsort_629 :
    ∀ (zs_630 : (list_6‹??_149,t_627› int)) ->
      IO ((ssing_6‹??_151›) ?_128[0;0] ((msort_35‹??_150›) zs_630))
  | zs_631 =>
    let* c_632 :=
      fork
        fun _633 : ?_129[0;0] -o IO unit_9
        | c_635 => ((cmsort_worker_37‹??_152›) 4 zs_631 c_635)
    in
    let* _636 := recv c_632 in
    match _636 in ?_131[0;0] -o ?_130[0;0] with
    | (ex1_11 msg_638 c_639) => let* __640 := close c_639 in return msg_638

#[program]
def mklist_39‹t_641› : int -> (list_6‹??_161,t_641› int) :=
  fun mklist_643 : int -> (list_6‹??_156,t_641› int)
  | n_645 =>
    match (__lte__ n_645 0) in ?_133[0;0] -o ?_134[0;0] with
    | true_4 => (nil_8‹??_157,??_158› ?_135[0;0])
    | false_5 =>
      (cons_9‹??_159,??_160›
        ?_136[0;0] n_645 ((mklist_643) (__sub__ n_645 1)))

#[program]
def list_len_40‹t_647› : (list_6‹??_163,t_647› int) -> int :=
  fun list_len_649 : (list_6‹??_162,t_647› int) -> int
  | nil_8 => 0
  | (cons_9 _651 xs_652) => (__add__ 1 ((list_len_649) xs_652))

#[program]
def print_list_41‹t_653› : (list_6‹??_165,t_653› int) -> IO unit_9 :=
  fun print_list_655 : (list_6‹??_164,t_653› int) -> IO unit_9
  | nil_8 => print "nil"
  | (cons_9 x_657 xs_658) =>
    let* __659 := print ((string_of_int_32) x_657) in
    let* __660 := print " :: " in ((print_list_655) xs_658)

#[program]
def main_42‹› : IO unit_9 :=
  let test_661 := ((mklist_39‹L›) 2000000) in
  let* _662 := ((cmsort_38‹??_166›) test_661) in
  match _662 in ?_138[0;0] -o ?_137[0;0] with
  | (just_2 sorted_664) =>
    let len_665 := ((list_len_40‹??_167›) sorted_664) in
    print ((string_of_int_32) len_665)

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_11850› :
  ∀ (A_11851 : Type‹s_11850›) -> A_11851 -> A_11851
:=
  fun id_11853 : ∀ (A_11854 : Type‹s_11850›) -> A_11854 -> A_11854
  | A_11856, m_11857 => m_11857

#[logical]
inductive eq_1‹s_11858› (A_11859 : Type‹s_11858›) (m_11860 : A_11859):
  A_11859 -> U
where
| refl_1 : (eq_1‹s_11858› A_11859 m_11860 m_11860)

#[program]
def rwl_2‹s_11862,r_11863› :
  ∀ {A_11864 : Type‹s_11862›} ->
    ∀ {m_11865 : A_11864} ->
      ∀ {n_11866 : A_11864} ->
        ∀ {B_11867 : A_11864 -> Type‹r_11863›} ->
          {(eq_1‹s_11862› A_11864 m_11865 n_11866)} ->
            ((B_11867) m_11865) -> ((B_11867) n_11866)
:=
  fun rwl_11871 :
    ∀ {A_11872 : Type‹s_11862›} ->
      ∀ {m_11873 : A_11872} ->
        ∀ {n_11874 : A_11872} ->
          ∀ {B_11875 : A_11872 -> Type‹r_11863›} ->
            {(eq_1‹s_11862› A_11872 m_11873 n_11874)} ->
              ((B_11875) m_11873) -> ((B_11875) n_11874)
  | A_11879, m_11880, n_11881, B_11882, refl_1, __11883 => __11883

#[program]
def rwr_3‹s_11884,r_11885› :
  ∀ {A_11886 : Type‹s_11884›} ->
    ∀ {m_11887 : A_11886} ->
      ∀ {n_11888 : A_11886} ->
        ∀ {B_11889 : A_11886 -> Type‹r_11885›} ->
          {(eq_1‹s_11884› A_11886 m_11887 n_11888)} ->
            ((B_11889) n_11888) -> ((B_11889) m_11887)
:=
  fun rwr_11893 :
    ∀ {A_11894 : Type‹s_11884›} ->
      ∀ {m_11895 : A_11894} ->
        ∀ {n_11896 : A_11894} ->
          ∀ {B_11897 : A_11894 -> Type‹r_11885›} ->
            {(eq_1‹s_11884› A_11894 m_11895 n_11896)} ->
              ((B_11897) n_11896) -> ((B_11897) m_11895)
  | A_11901, m_11902, n_11903, B_11904, refl_1, __11905 => __11905

#[logical]
def congr_4‹s_11906,r_11907,t_11908› :
  ∀ (A_11909 : Type‹s_11906›) ->
    ∀ (B_11910 : Type‹r_11907›) ->
      ∀ (m_11911 : A_11909) ->
        ∀ (n_11912 : A_11909) ->
          ∀ (f_11913 : forall‹t_11908›(__11914 : A_11909), B_11910) ->
            (eq_1‹s_11906› A_11909 m_11911 n_11912) ->
              (eq_1‹r_11907›
                B_11910 ((f_11913) m_11911) ((f_11913) n_11912))
:=
  fun congr_11916 :
    ∀ (A_11917 : Type‹s_11906›) ->
      ∀ (B_11918 : Type‹r_11907›) ->
        ∀ (m_11919 : A_11917) ->
          ∀ (n_11920 : A_11917) ->
            ∀ (f_11921 :
              forall‹t_11908›(__11922 : A_11917), B_11918) ->
              (eq_1‹s_11906› A_11917 m_11919 n_11920) ->
                (eq_1‹r_11907›
                  B_11918 ((f_11921) m_11919) ((f_11921) n_11920))
  | A_11924, B_11925, m_11926, n_11927, f_11928, refl_1 =>
    (refl_1‹r_11907› B_11925 ((f_11928) n_11927))

#[logical]
def axiom_K_5‹› :
  ∀ {A_11929 : U} ->
    ∀ {m_11930 : A_11929} ->
      ∀ (x_11931 : (eq_1‹U› A_11929 m_11930 m_11930)) ->
        (eq_1‹U›
          (eq_1‹U› A_11929 m_11930 m_11930) x_11931
          (refl_1‹U› A_11929 m_11930))
:=
  fun axiom_K_11932 :
    ∀ {A_11933 : U} ->
      ∀ {m_11934 : A_11933} ->
        ∀ (x_11935 : (eq_1‹U› A_11933 m_11934 m_11934)) ->
          (eq_1‹U›
            (eq_1‹U› A_11933 m_11934 m_11934) x_11935
            (refl_1‹U› A_11933 m_11934))
  | A_11936, m_11937, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_11936 m_11937 m_11937) (refl_1‹U› A_11936 m_11937))

#[program]
inductive sing_2‹s_11938,t_11939› (A_11940 : Type‹s_11938›):
  A_11940 -> Type‹t_11939›
where
| just_2 (m_11942 : A_11940) : (sing_2‹s_11938,t_11939› A_11940 m_11942)

#[logical]
def ssing_6‹s_11943› :
  ∀ (A_11944 : Type‹s_11943›) -> A_11944 -> Type‹s_11943›
:=
  fun ssing_11946 :
    ∀ (A_11947 : Type‹s_11943›) -> A_11947 -> Type‹s_11943›
  | A_11949, m_11950 => (sing_2‹s_11943,s_11943› A_11949 m_11950)

#[program]
def sing_elim_7‹s_11951,t_11952› :
  ∀ {A_11953 : Type‹s_11951›} ->
    ∀ {x_11954 : A_11953} ->
      (sing_2‹s_11951,t_11952› A_11953 x_11954) -> A_11953
:=
  fun sing_elim_11956 :
    ∀ {A_11957 : Type‹s_11951›} ->
      ∀ {x_11958 : A_11957} ->
        (sing_2‹s_11951,t_11952› A_11957 x_11958) -> A_11957
  | A_11960, x_11961, (just_2 m_11962) => m_11962

#[logical]
def sing_uniq_8‹s_11963,t_11964› :
  ∀ (A_11965 : Type‹s_11963›) ->
    ∀ (x0_11966 : A_11965) ->
      ∀ (x_11967 : (sing_2‹s_11963,t_11964› A_11965 x0_11966)) ->
        (eq_1‹s_11963›
          A_11965 x0_11966
          ((sing_elim_7‹s_11963,t_11964›) A_11965 x0_11966 x_11967))
:=
  fun sing_uniq_11968 :
    ∀ (A_11969 : Type‹s_11963›) ->
      ∀ (x0_11970 : A_11969) ->
        ∀ (x_11971 : (sing_2‹s_11963,t_11964› A_11969 x0_11970)) ->
          (eq_1‹s_11963›
            A_11969 x0_11970
            ((sing_elim_7‹s_11963,t_11964›) A_11969 x0_11970 x_11971))
  | A_11972, x0_11973, (just_2 m_11974) =>
    (refl_1‹s_11963› A_11972 m_11974)

#[program]
inductive base_3‹s_11975› : Type‹s_11975› where
| tt_3 : base_3‹s_11975›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_11976 : unit_9) -> (eq_1‹U› base_3‹U› x_11976 tt_3‹U›)
:=
  fun unit_eta_11977 :
    ∀ (x_11978 : unit_9) -> (eq_1‹U› base_3‹U› x_11978 tt_3‹U›)
  | x_11979 =>
    match x_11979 in
      ∀ (x0_11980 : base_3‹U›) -o
        (eq_1‹U› base_3‹U› x0_11980 tt_3‹U›)
    with
    | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  fun not_11982 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_11986 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __11989 => false_5

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_11992 : bool_4 -> bool_4 -> bool_4
  | true_4, __11995 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  fun xor_11998 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_12001 : nat_5) : nat_5

#[program]
def lte_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_12004 : nat_5 -> nat_5 -> bool_4
  | zero_6, __12007 => true_4
  | (succ_7 n_12008), zero_6 => false_5
  | (succ_7 n_12009), (succ_7 n_12010) => ((lte_12004) n_12009 n_12010)

#[program]
def lt_16‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_12013 : nat_5 -> nat_5 -> bool_4
  | x_12016, y_12017 => ((lte_15) (succ_7‹› x_12016) y_12017)

#[program]
def pred_17‹› : nat_5 -> nat_5 :=
  fun pred_12019 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_12021) => n_12021

#[program]
def add_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_12024 : nat_5 -> nat_5 -> nat_5
  | zero_6, __12027 => __12027
  | (succ_7 n_12028), __12029 => (succ_7‹› ((add_12024) n_12028 __12029))

#[program]
def sub_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_12032 : nat_5 -> nat_5 -> nat_5
  | __12035, zero_6 => __12035
  | __12036, (succ_7 n_12037) => ((sub_12032) ((pred_17) __12036) n_12037)

#[program]
def mul_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_12040 : nat_5 -> nat_5 -> nat_5
  | zero_6, __12043 => zero_6
  | (succ_7 n_12044), __12045 =>
    ((add_18) __12045 ((mul_12040) n_12044 __12045))

#[program]
def div_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_12048 : nat_5 -> nat_5 -> nat_5
  | x_12051, y_12052 =>
    match ((lt_16) x_12051 y_12052) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_12054 :=
        fun loop_12055 : nat_5 -> nat_5 -> nat_5
        | x_12058, y_12059 =>
          match ((sub_19) x_12058 ((pred_17) y_12059)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_12061) => (succ_7‹› ((loop_12055) n_12061 y_12059))
      in ((loop_12054) x_12051 y_12052)

#[program]
def rem_22‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_12064 : nat_5 -> nat_5 -> nat_5
  | x_12067, y_12068 =>
    ((sub_19) x_12067 ((mul_20) ((div_21) x_12067 y_12068) y_12068))

#[program]
inductive list_6‹s_12069,t_12070› (A_12071 : Type‹s_12069›):
  Type‹t_12070›
where
| nil_8 : (list_6‹s_12069,t_12070› A_12071)
| cons_9
    (hd_12072 : A_12071) (tl_12073 : (list_6‹s_12069,t_12070› A_12071))
    : (list_6‹s_12069,t_12070› A_12071)

#[program]
def free_list_23‹s_12074,t_12075› :
  ∀ {A_12076 : Type‹s_12074›} ->
    A_12076 -> unit_9 -> (list_6‹s_12074,t_12075› A_12076) -> unit_9
:=
  fun free_list_12080 :
    ∀ {A_12081 : Type‹s_12074›} ->
      A_12081 -> unit_9 -> (list_6‹s_12074,t_12075› A_12081) -> unit_9
  | A_12085, f_12086, nil_8 => tt_3‹U›
  | A_12087, f_12088, (cons_9 hd_12089 tl_12090) =>
    let __12091 := ((f_12088) hd_12089) in
    ((free_list_12080) A_12087 f_12088 tl_12090)

#[program]
inductive exists0_7‹s_12092,r_12093› (A_12094 : Type‹s_12092›) (B_12095 : 
A_12094 -> Type‹r_12093›): L where
| ex0_10
    {m_12097 : A_12094} (n_12098 : ((B_12095) m_12097))
    : (exists0_7‹s_12092,r_12093› A_12094 B_12095)

#[program]
inductive exists1_8‹s_12099,r_12100› (A_12101 : Type‹s_12099›) (B_12102 : 
A_12101 -> Type‹r_12100›): L where
| ex1_11
    (m_12104 : A_12101) (n_12105 : ((B_12102) m_12104))
    : (exists1_8‹s_12099,r_12100› A_12101 B_12102)

#[logical]
def prod0_24‹s_12106,r_12107› :
  Type‹s_12106› -> Type‹r_12107› -> L
:=
  fun prod0_12110 : Type‹s_12106› -> Type‹r_12107› -> L
  | A_12113, B_12114 =>
    (exists0_7‹s_12106,r_12107›
      A_12113 fun _12115 : A_12113 -> Type‹r_12107›
              | __12117 => B_12114)

#[logical]
def prod1_25‹s_12118,r_12119› :
  Type‹s_12118› -> Type‹r_12119› -> L
:=
  fun prod1_12122 : Type‹s_12118› -> Type‹r_12119› -> L
  | A_12125, B_12126 =>
    (exists1_8‹s_12118,r_12119›
      A_12125 fun _12127 : A_12125 -> Type‹r_12119›
              | __12129 => B_12126)

#[program]
def pow_26‹› : int -> int -> int :=
  fun pow_12132 : int -> int -> int
  | x_12135, y_12136 =>
    let loop_12137 :=
      fun loop_12138 : int -> int -> int
      | acc_12141, y_12142 =>
        match (__lte__ y_12142 0) in bool_4 -o int with
        | true_4 => acc_12141
        | false_5 =>
          ((loop_12138) (__mul__ x_12135 acc_12141) (__sub__ y_12142 1))
    in ((loop_12137) 1 y_12136)

#[program]
def powm_27‹› : int -> int -> int -> int :=
  fun powm_12147 : int -> int -> int -> int
  | x_12151, y_12152, m_12153 =>
    let loop_12154 :=
      fun loop_12155 : int -> int -> int
      | acc_12158, y_12159 =>
        match (__lte__ y_12159 0) in bool_4 -o int with
        | true_4 => acc_12158
        | false_5 =>
          ((loop_12155)
            (__mod__ (__mul__ x_12151 acc_12158) m_12153) (__sub__ y_12159 1))
    in ((loop_12154) 1 y_12152)

#[program]
def ord_28‹› : char -> int :=
  fun ord_12162 : char -> int
  | c_12164 => (__ord__ c_12164)

#[program]
def chr_29‹› : int -> char :=
  fun chr_12166 : int -> char
  | i_12168 => (__chr__ i_12168)

#[program]
def str_30‹› : char -> string :=
  fun str_12170 : char -> string
  | c_12172 => (__push__ "" c_12172)

#[program]
def strlen_31‹› : string -> int :=
  fun strlen_12174 : string -> int
  | s_12176 => (__size__ s_12176)

#[program]
def string_of_int_32‹› : int -> string :=
  fun string_of_int_12178 : int -> string
  | i_12180 =>
    let aux_12181 :=
      fun aux_12182 : int -> string
      | i_12184 =>
        match (__lte__ 10 i_12184) in bool_4 -o string with
        | true_4 =>
          let r_12186 := (__mod__ i_12184 10) in
          let i_12187 := (__div__ i_12184 10) in
          (__push__ ((aux_12182) i_12187)
            ((chr_29) (__add__ r_12186 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_12184 ((ord_28) 0))))
    in
    match (__lte__ 0 i_12180) in bool_4 -o string with
    | true_4 => ((aux_12181) i_12180)
    | false_5 => (__cat__ "~" ((aux_12181) (__neg__ i_12180)))

#[program]
def split_33‹t_12189› :
  (list_6‹U,t_12189› int) ->
    ((prod1_25‹t_12189,t_12189›)
      (list_6‹U,t_12189› int) (list_6‹U,t_12189› int))
:=
  fun split_12191 :
    (list_6‹U,t_12189› int) ->
      ((prod1_25‹t_12189,t_12189›)
        (list_6‹U,t_12189› int) (list_6‹U,t_12189› int))
  | nil_8 =>
    (ex1_11‹t_12189,t_12189›
      (list_6‹U,t_12189› int)
      fun _12193 : (list_6‹U,t_12189› int) -> Type‹t_12189›
      | __12195 => (list_6‹U,t_12189› int) (nil_8‹U,t_12189› int)
      (nil_8‹U,t_12189› int))
  | (cons_9 hd_12196 nil_8) =>
    (ex1_11‹t_12189,t_12189›
      (list_6‹U,t_12189› int)
      fun _12197 : (list_6‹U,t_12189› int) -> Type‹t_12189›
      | __12199 => (list_6‹U,t_12189› int)
      (cons_9‹U,t_12189› int hd_12196 (nil_8‹U,t_12189› int))
      (nil_8‹U,t_12189› int))
  | (cons_9 hd_12200 (cons_9 hd_12201 tl_12202)) =>
    match ((split_12191) tl_12202) in
      ((prod1_25‹t_12189,t_12189›)
        (list_6‹U,t_12189› int) (list_6‹U,t_12189› int)) -o
        ((prod1_25‹t_12189,t_12189›)
          (list_6‹U,t_12189› int) (list_6‹U,t_12189› int))
    with
    | (ex1_11 m_12204 n_12205) =>
      (ex1_11‹t_12189,t_12189›
        (list_6‹U,t_12189› int)
        fun _12206 : (list_6‹U,t_12189› int) -> Type‹t_12189›
        | __12208 => (list_6‹U,t_12189› int)
        (cons_9‹U,t_12189› int hd_12200 m_12204)
        (cons_9‹U,t_12189› int hd_12201 n_12205))

#[program]
def merge_34‹t_12209› :
  (list_6‹U,t_12209› int) ->
    (list_6‹U,t_12209› int) -o (list_6‹U,t_12209› int)
:=
  fun merge_12212 :
    (list_6‹U,t_12209› int) ->
      (list_6‹U,t_12209› int) -o (list_6‹U,t_12209› int)
  | nil_8, __12215 => __12215
  | (cons_9 hd_12216 tl_12217), nil_8 =>
    (cons_9‹U,t_12209› int hd_12216 tl_12217)
  | (cons_9 hd_12218 tl_12219), (cons_9 hd_12220 tl_12221) =>
    match (__lte__ hd_12218 hd_12220) in
      bool_4 -o (list_6‹U,t_12209› int)
    with
    | true_4 =>
      (cons_9‹U,t_12209›
        int hd_12218
        ((merge_12212)
          tl_12219 (cons_9‹U,t_12209› int hd_12220 tl_12221)))
    | false_5 =>
      (cons_9‹U,t_12209›
        int hd_12220
        ((merge_12212)
          (cons_9‹U,t_12209› int hd_12218 tl_12219) tl_12221))

#[program]
def msort_35‹t_12223› :
  (list_6‹U,t_12223› int) -> (list_6‹U,t_12223› int)
:=
  fun msort_12225 :
    (list_6‹U,t_12223› int) -> (list_6‹U,t_12223› int)
  | nil_8 => (nil_8‹U,t_12223› int)
  | (cons_9 hd_12227 nil_8) =>
    (cons_9‹U,t_12223› int hd_12227 (nil_8‹U,t_12223› int))
  | (cons_9 hd_12228 (cons_9 hd_12229 tl_12230)) =>
    match ((split_33‹t_12223›)
            (cons_9‹U,t_12223›
              int hd_12228 (cons_9‹U,t_12223› int hd_12229 tl_12230))) in
      ((prod1_25‹t_12223,t_12223›)
        (list_6‹U,t_12223› int) (list_6‹U,t_12223› int)) -o
        (list_6‹U,t_12223› int)
    with
    | (ex1_11 m_12232 n_12233) =>
      ((merge_34‹t_12223›)
        ((msort_12225) m_12232) ((msort_12225) n_12233))

#[logical]
def cmsort_ch_36‹t_12234› : (list_6‹U,t_12234› int) -> L :=
  fun cmsort_ch_12236 : (list_6‹U,t_12234› int) -> L
  | xs_12238 =>
    ch⟨⇑(__12239 :
           ((ssing_6‹t_12234›)
             (list_6‹U,t_12234› int) ((msort_35‹t_12234›) xs_12238))) ⇒
           •⟩

#[program]
def cmsort_worker_37‹t_12240› :
  int ->
    ∀ (zs_12242 : (list_6‹U,t_12240› int)) ->
      ((cmsort_ch_36‹t_12240›) zs_12242) -o IO unit_9
:=
  fun cmsort_worker_12244 :
    int ->
      ∀ (zs_12246 : (list_6‹U,t_12240› int)) ->
        ((cmsort_ch_36‹t_12240›) zs_12246) -o IO unit_9
  | __12248, nil_8, __12249 =>
    let* c_12250 :=
      ((send __12249)
        (just_2‹t_12240,t_12240›
          (list_6‹U,t_12240› int) (nil_8‹U,t_12240› int)))
    in close c_12250
  | __12251, (cons_9 hd_12252 nil_8), __12253 =>
    let* c_12254 :=
      ((send __12253)
        (just_2‹t_12240,t_12240›
          (list_6‹U,t_12240› int)
          (cons_9‹U,t_12240› int hd_12252 (nil_8‹U,t_12240› int))))
    in close c_12254
  | __12255, (cons_9 hd_12256 (cons_9 hd_12257 tl_12258)), __12259 =>
    match (__lte__ __12255 0) in bool_4 -o IO unit_9 with
    | true_4 =>
      let* c_12261 :=
        ((send __12259)
          (just_2‹t_12240,t_12240›
            (list_6‹U,t_12240› int)
            ((msort_35‹t_12240›)
              (cons_9‹U,t_12240›
                int hd_12256 (cons_9‹U,t_12240› int hd_12257 tl_12258)))))
      in close c_12261
    | false_5 =>
      match ((split_33‹t_12240›)
              (cons_9‹U,t_12240›
                int hd_12256 (cons_9‹U,t_12240› int hd_12257 tl_12258))),
      (refl_1‹t_12240›
        (list_6‹U,t_12240› int)
        match ((split_33‹t_12240›)
                (cons_9‹U,t_12240›
                  int hd_12256 (cons_9‹U,t_12240› int hd_12257 tl_12258))) in
          ((prod1_25‹t_12240,t_12240›)
            (list_6‹U,t_12240› int) (list_6‹U,t_12240› int)) -o
            (list_6‹U,t_12240› int)
        with
        | (ex1_11 m_12263 n_12264) =>
          ((merge_34‹t_12240›)
            ((msort_35‹t_12240›) m_12263)
            ((msort_35‹t_12240›) n_12264))) in
        ∀ (h1_12265 :
          ((prod1_25‹t_12240,t_12240›)
            (list_6‹U,t_12240› int) (list_6‹U,t_12240› int))) -o
          {(eq_1‹t_12240›
             (list_6‹U,t_12240› int)
             match h1_12265 in
               ((prod1_25‹t_12240,t_12240›)
                 (list_6‹U,t_12240› int) (list_6‹U,t_12240› int)) -o
                 (list_6‹U,t_12240› int)
             with
             | (ex1_11 m_12268 n_12269) =>
               ((merge_34‹t_12240›)
                 ((msort_35‹t_12240›) m_12268)
                 ((msort_35‹t_12240›) n_12269))
             match ((split_33‹t_12240›)
                     (cons_9‹U,t_12240›
                       int hd_12256
                       (cons_9‹U,t_12240› int hd_12257 tl_12258))) in
               ((prod1_25‹t_12240,t_12240›)
                 (list_6‹U,t_12240› int) (list_6‹U,t_12240› int)) -o
                 (list_6‹U,t_12240› int)
             with
             | (ex1_11 m_12271 n_12272) =>
               ((merge_34‹t_12240›)
                 ((msort_35‹t_12240›) m_12271)
                 ((msort_35‹t_12240›) n_12272)))} -o
            IO unit_9
      with
      | (ex1_11 m_12273 n_12274), __12275 =>
        let* r1_12276 :=
          fork
            fun _12277 : ((cmsort_ch_36‹t_12240›) m_12273) -o IO unit_9
            | _12279 =>
              ((cmsort_worker_12244) (__sub__ __12255 1) m_12273 _12279)
        in
        let* r2_12280 :=
          fork
            fun _12281 : ((cmsort_ch_36‹t_12240›) n_12274) -o IO unit_9
            | _12283 =>
              ((cmsort_worker_12244) (__sub__ __12255 1) n_12274 _12283)
        in
        let* _12284 := recv r1_12276 in
        match _12284 in
          (exists1_8‹t_12240,L›
            ((ssing_6‹t_12240›)
              (list_6‹U,t_12240› int) ((msort_35‹t_12240›) m_12273))
            fun _12286 :
              ((ssing_6‹t_12240›)
                (list_6‹U,t_12240› int) ((msort_35‹t_12240›) m_12273)) ->
                L
            | __12288 => hc⟨•⟩) -o IO base_3‹U›
        with
        | (ex1_11 (just_2 m_12289) n_12290) =>
          let* _12291 := recv r2_12280 in
          match _12291 in
            (exists1_8‹t_12240,L›
              ((ssing_6‹t_12240›)
                (list_6‹U,t_12240› int) ((msort_35‹t_12240›) n_12274))
              fun _12293 :
                ((ssing_6‹t_12240›)
                  (list_6‹U,t_12240› int)
                  ((msort_35‹t_12240›) n_12274)) -> L
              | __12295 => hc⟨•⟩) -o IO base_3‹U›
          with
          | (ex1_11 (just_2 m_12296) n_12297) =>
            let zs1_12298 :=
              ((just_2‹t_12240,t_12240›
                 (list_6‹U,t_12240› int)
                 ((merge_34‹t_12240›) m_12289 m_12296))
                : ((ssing_6‹t_12240›)
                    (list_6‹U,t_12240› int)
                    ((merge_34‹t_12240›)
                      ((msort_35‹t_12240›) m_12273)
                      ((msort_35‹t_12240›) n_12274))))
            in
            let zs1_12299 :=
              (((rwl_2‹t_12240,t_12240›)
                 (list_6‹U,t_12240› int)
                 ((merge_34‹t_12240›)
                   ((msort_35‹t_12240›) m_12273)
                   ((msort_35‹t_12240›) n_12274))
                 match ((split_33‹t_12240›)
                         (cons_9‹U,t_12240›
                           int hd_12256
                           (cons_9‹U,t_12240› int hd_12257 tl_12258))) in
                   ((prod1_25‹t_12240,t_12240›)
                     (list_6‹U,t_12240› int) (list_6‹U,t_12240› int)) -o
                     (list_6‹U,t_12240› int)
                 with
                 | (ex1_11 m_12301 n_12302) =>
                   ((merge_34‹t_12240›)
                     ((msort_35‹t_12240›) m_12301)
                     ((msort_35‹t_12240›) n_12302))
                 fun _12303 :
                   (list_6‹U,t_12240› int) -> Type‹t_12240›
                 | __12305 =>
                   ((ssing_6‹t_12240›)
                     (list_6‹U,t_12240› int) __12305)
                 __12275 zs1_12298)
                : ((ssing_6‹t_12240›)
                    (list_6‹U,t_12240› int)
                    ((msort_35‹t_12240›)
                      (cons_9‹U,t_12240›
                        int hd_12256
                        (cons_9‹U,t_12240› int hd_12257 tl_12258)))))
            in
            let* c_12306 := ((send __12259) zs1_12299) in
            let* __12307 := close n_12290 in
            let* __12308 := close n_12297 in close c_12306

#[program]
def cmsort_38‹t_12309› :
  ∀ (zs_12310 : (list_6‹U,t_12309› int)) ->
    IO ((ssing_6‹t_12309›)
         (list_6‹U,t_12309› int) ((msort_35‹t_12309›) zs_12310))
:=
  fun cmsort_12311 :
    ∀ (zs_12312 : (list_6‹U,t_12309› int)) ->
      IO ((ssing_6‹t_12309›)
           (list_6‹U,t_12309› int) ((msort_35‹t_12309›) zs_12312))
  | zs_12313 =>
    let* c_12314 :=
      fork
        fun _12315 : ((cmsort_ch_36‹t_12309›) zs_12313) -o IO unit_9
        | _12317 => ((cmsort_worker_37‹t_12309›) 4 zs_12313 _12317)
    in
    let* _12318 := recv c_12314 in
    match _12318 in
      (exists1_8‹t_12309,L›
        ((ssing_6‹t_12309›)
          (list_6‹U,t_12309› int) ((msort_35‹t_12309›) zs_12313))
        fun _12320 :
          ((ssing_6‹t_12309›)
            (list_6‹U,t_12309› int) ((msort_35‹t_12309›) zs_12313)) ->
            L
        | __12322 => hc⟨•⟩) -o
        IO ((ssing_6‹t_12309›)
             (list_6‹U,t_12309› int) ((msort_35‹t_12309›) zs_12313))
    with
    | (ex1_11 m_12323 n_12324) =>
      let* __12325 := close n_12324 in return m_12323

#[program]
def mklist_39‹t_12326› : int -> (list_6‹U,t_12326› int) :=
  fun mklist_12328 : int -> (list_6‹U,t_12326› int)
  | n_12330 =>
    match (__lte__ n_12330 0) in bool_4 -o (list_6‹U,t_12326› int) with
    | true_4 => (nil_8‹U,t_12326› int)
    | false_5 =>
      (cons_9‹U,t_12326›
        int n_12330 ((mklist_12328) (__sub__ n_12330 1)))

#[program]
def list_len_40‹t_12332› : (list_6‹U,t_12332› int) -> int :=
  fun list_len_12334 : (list_6‹U,t_12332› int) -> int
  | nil_8 => 0
  | (cons_9 hd_12336 tl_12337) => (__add__ 1 ((list_len_12334) tl_12337))

#[program]
def print_list_41‹t_12338› : (list_6‹U,t_12338› int) -> IO unit_9 :=
  fun print_list_12340 : (list_6‹U,t_12338› int) -> IO unit_9
  | nil_8 => print "nil"
  | (cons_9 hd_12342 tl_12343) =>
    let* __12344 := print ((string_of_int_32) hd_12342) in
    let* __12345 := print " :: " in ((print_list_12340) tl_12343)

#[program]
def main_42‹› : IO unit_9 :=
  let test_12346 := ((mklist_39‹L›) 2000000) in
  let* _12347 := ((cmsort_38‹L›) test_12346) in
  match _12347 in
    ((ssing_6‹L›) (list_6‹U,L› int) ((msort_35‹L›) test_12346)) -o
      IO base_3‹U›
  with
  | (just_2 m_12349) =>
    let len_12350 := ((list_len_40‹L›) m_12349) in
    print ((string_of_int_32) len_12350)

[trans1e success]

-----------------------------------------

#[program]
def idU_44 := fun id_21029 (A_21030) -> (m_21031) ->
                m_21031

#[program]
def idL_43 := fun id_21032 (A_21033) -> (m_21034) ->
                m_21034

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_48 :=
  fun rwl_21035 {A_21036} -> {m_21037} -> {n_21038} -> {B_21039} ->
  {__21040} -> (__21041) ->
    match {NULL} with
    | reflU_13  => __21041
    end

#[program]
def rwlUL_47 :=
  fun rwl_21042 {A_21043} -> {m_21044} -> {n_21045} -> {B_21046} ->
  {__21047} -> (__21048) ->
    match {NULL} with
    | reflU_13  => __21048
    end

#[program]
def rwlLU_46 :=
  fun rwl_21049 {A_21050} -> {m_21051} -> {n_21052} -> {B_21053} ->
  {__21054} -> (__21055) ->
    match {NULL} with
    | reflL_12  => __21055
    end

#[program]
def rwlLL_45 :=
  fun rwl_21056 {A_21057} -> {m_21058} -> {n_21059} -> {B_21060} ->
  {__21061} -> (__21062) ->
    match {NULL} with
    | reflL_12  => __21062
    end

#[program]
def rwrUU_52 :=
  fun rwr_21063 {A_21064} -> {m_21065} -> {n_21066} -> {B_21067} ->
  {__21068} -> (__21069) ->
    match {NULL} with
    | reflU_13  => __21069
    end

#[program]
def rwrUL_51 :=
  fun rwr_21070 {A_21071} -> {m_21072} -> {n_21073} -> {B_21074} ->
  {__21075} -> (__21076) ->
    match {NULL} with
    | reflU_13  => __21076
    end

#[program]
def rwrLU_50 :=
  fun rwr_21077 {A_21078} -> {m_21079} -> {n_21080} -> {B_21081} ->
  {__21082} -> (__21083) ->
    match {NULL} with
    | reflL_12  => __21083
    end

#[program]
def rwrLL_49 :=
  fun rwr_21084 {A_21085} -> {m_21086} -> {n_21087} -> {B_21088} ->
  {__21089} -> (__21090) ->
    match {NULL} with
    | reflL_12  => __21090
    end

#[logical]
def congrUUU_60 := NULL

#[logical]
def congrUUL_59 := NULL

#[logical]
def congrULU_58 := NULL

#[logical]
def congrULL_57 := NULL

#[logical]
def congrLUU_56 := NULL

#[logical]
def congrLUL_55 := NULL

#[logical]
def congrLLU_54 := NULL

#[logical]
def congrLLL_53 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_62 := NULL

#[logical]
def ssingL_61 := NULL

#[program]
def sing_elimUU_66 :=
  fun sing_elim_21091 {A_21092} -> {x_21093} -> (__21094) ->
    match __21094 with
    | justUU_17 m_21095 => m_21095
    end

#[program]
def sing_elimUL_65 :=
  fun sing_elim_21096 {A_21097} -> {x_21098} -> (__21099) ->
    match __21099 with
    | justUL_16 m_21100 => m_21100
    end

#[program]
def sing_elimLU_64 :=
  fun sing_elim_21101 {A_21102} -> {x_21103} -> (__21104) ->
    match __21104 with
    
    end

#[program]
def sing_elimLL_63 :=
  fun sing_elim_21105 {A_21106} -> {x_21107} -> (__21108) ->
    match __21108 with
    | justLL_14 m_21109 => m_21109
    end

#[logical]
def sing_uniqUU_70 := NULL

#[logical]
def sing_uniqUL_69 := NULL

#[logical]
def sing_uniqLU_68 := NULL

#[logical]
def sing_uniqLL_67 := NULL

#[program]
inductive baseU_16 where
| ttU_19 of layout[]

#[program]
inductive baseL_15 where
| ttL_18 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_21110 (__21111) ->
    match __21111 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_12 :=
  fun and_21112 (__21113) -> (__21114) ->
    match __21113 with
    | true_4  =>
      match __21114 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_13 :=
  fun or_21115 (__21116) -> (__21117) ->
    match __21116 with
    | true_4  => true_4
    | false_5  =>
      match __21117 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_14 :=
  fun xor_21118 (__21119) -> (__21120) ->
    match __21119 with
    | true_4  =>
      match __21120 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __21120 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_21121 (__21122) -> (__21123) ->
    match __21122 with
    | zero_6  => true_4
    | succ_7 n_21124 =>
      match __21123 with
      | zero_6  => false_5 | succ_7 n_21125 => ((lte_21121) n_21124 n_21125)
      end
    end

#[program]
def lt_16 :=
  fun lt_21126 (x_21127) -> (y_21128) ->
    ((lte_15) (succ_7 x_21127) y_21128)

#[program]
def pred_17 :=
  fun pred_21129 (__21130) ->
    match __21130 with
    | zero_6  => zero_6 | succ_7 n_21131 => n_21131
    end

#[program]
def add_18 :=
  fun add_21132 (__21133) -> (__21134) ->
    match __21133 with
    | zero_6  => __21134
    | succ_7 n_21135 => (succ_7 ((add_21132) n_21135 __21134))
    end

#[program]
def sub_19 :=
  fun sub_21136 (__21137) -> (__21138) ->
    match __21138 with
    | zero_6  => __21137
    | succ_7 n_21139 => ((sub_21136) ((pred_17) __21137) n_21139)
    end

#[program]
def mul_20 :=
  fun mul_21140 (__21141) -> (__21142) ->
    match __21141 with
    | zero_6  => zero_6
    | succ_7 n_21143 => ((add_18) __21142 ((mul_21140) n_21143 __21142))
    end

#[program]
def div_21 :=
  fun div_21144 (x_21145) -> (y_21146) ->
    match ((lt_16) x_21145 y_21146) with
    | true_4  => zero_6
    | false_5  =>
      let loop_21147 :=
        fun loop_21148 (x_21149) -> (y_21150) ->
          match ((sub_19) x_21149 ((pred_17) y_21150)) with
          | zero_6  => zero_6
          | succ_7 n_21151 => (succ_7 ((loop_21148) n_21151 y_21150))
          end
      in ((loop_21147) x_21145 y_21146)
    end

#[program]
def rem_22 :=
  fun rem_21152 (x_21153) -> (y_21154) ->
    ((sub_19) x_21153 ((mul_20) ((div_21) x_21153 y_21154) y_21154))

#[program]
inductive listUU_20 where
| nilUU_26 of layout[]
| consUU_27 of layout[R, R]

#[program]
inductive listUL_19 where
| nilUL_24 of layout[]
| consUL_25 of layout[R, R]

#[program]
inductive listLU_18 where
| nilLU_22 of layout[]

#[program]
inductive listLL_17 where
| nilLL_20 of layout[]
| consLL_21 of layout[R, R]

#[program]
def free_listUU_74 :=
  fun free_list_21155 {A_21156} -> (f_21157) -> (__21158) ->
    match __21158 with
    | nilUU_26  => ttU_19
    | consUU_27 hd_21159 tl_21160 =>
      let __21161 := ((f_21157) hd_21159) in
      ((free_list_21155) NULL f_21157 tl_21160)
    end

#[program]
def free_listUL_73 :=
  fun free_list_21162 {A_21163} -> (f_21164) -> (__21165) ->
    match __21165 with
    | nilUL_24  => ttU_19
    | consUL_25 hd_21166 tl_21167 =>
      let __21168 := ((f_21164) hd_21166) in
      ((free_list_21162) NULL f_21164 tl_21167)
    end

#[program]
def free_listLL_71 :=
  fun free_list_21169 {A_21170} -> (f_21171) -> (__21172) ->
    match __21172 with
    | nilLL_20  => ttU_19
    | consLL_21 hd_21173 tl_21174 =>
      let __21175 := ((f_21171) hd_21173) in
      ((free_list_21169) NULL f_21171 tl_21174)
    end

#[program]
inductive exists0UU_24 where
| ex0UU_31 of layout[N, R]

#[program]
inductive exists0UL_23 where
| ex0UL_30 of layout[N, R]

#[program]
inductive exists0LU_22 where
| ex0LU_29 of layout[N, R]

#[program]
inductive exists0LL_21 where
| ex0LL_28 of layout[N, R]

#[program]
inductive exists1UU_28 where
| ex1UU_35 of layout[R, R]

#[program]
inductive exists1UL_27 where
| ex1UL_34 of layout[R, R]

#[program]
inductive exists1LU_26 where
| ex1LU_33 of layout[R, R]

#[program]
inductive exists1LL_25 where
| ex1LL_32 of layout[R, R]

#[logical]
def prod0UU_78 := NULL

#[logical]
def prod0UL_77 := NULL

#[logical]
def prod0LU_76 := NULL

#[logical]
def prod0LL_75 := NULL

#[logical]
def prod1UU_82 := NULL

#[logical]
def prod1UL_81 := NULL

#[logical]
def prod1LU_80 := NULL

#[logical]
def prod1LL_79 := NULL

#[program]
def pow_26 :=
  fun pow_21176 (x_21177) -> (y_21178) ->
    let loop_21179 :=
      fun loop_21180 (acc_21181) -> (y_21182) ->
        match (__lte__ y_21182 0) with
        | true_4  => acc_21181
        | false_5  =>
          ((loop_21180) (__mul__ x_21177 acc_21181) (__sub__ y_21182 1))
        end
    in ((loop_21179) 1 y_21178)

#[program]
def powm_27 :=
  fun powm_21183 (x_21184) -> (y_21185) -> (m_21186) ->
    let loop_21187 :=
      fun loop_21188 (acc_21189) -> (y_21190) ->
        match (__lte__ y_21190 0) with
        | true_4  => acc_21189
        | false_5  =>
          ((loop_21188)
            (__mod__ (__mul__ x_21184 acc_21189) m_21186) (__sub__ y_21190 1))
        end
    in ((loop_21187) 1 y_21185)

#[program]
def ord_28 := fun ord_21191 (c_21192) ->
                (__ord__ c_21192)

#[program]
def chr_29 := fun chr_21193 (i_21194) ->
                (__chr__ i_21194)

#[program]
def str_30 := fun str_21195 (c_21196) ->
                (__push__ "" c_21196)

#[program]
def strlen_31 := fun strlen_21197 (s_21198) ->
                   (__size__ s_21198)

#[program]
def string_of_int_32 :=
  fun string_of_int_21199 (i_21200) ->
    let aux_21201 :=
      fun aux_21202 (i_21203) ->
        match (__lte__ 10 i_21203) with
        | true_4  =>
          let r_21204 := (__mod__ i_21203 10) in
          let i_21205 := (__div__ i_21203 10) in
          (__push__ ((aux_21202) i_21205)
            ((chr_29) (__add__ r_21204 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_21203 ((ord_28) 0))))
        end
    in
    match (__lte__ 0 i_21200) with
    | true_4  => ((aux_21201) i_21200)
    | false_5  => (__cat__ "~" ((aux_21201) (__neg__ i_21200)))
    end

#[program]
def splitU_84 :=
  fun split_21206 (__21207) ->
    match __21207 with
    | nilUU_26  => (ex1UU_35 nilUU_26 nilUU_26)
    | consUU_27 hd_21208 tl_21209 =>
      match tl_21209 with
      | nilUU_26  => (ex1UU_35 (consUU_27 hd_21208 nilUU_26) nilUU_26)
      | consUU_27 hd_21210 tl_21211 =>
        match ((split_21206) tl_21211) with
        | ex1UU_35 m_21212 n_21213 =>
          (ex1UU_35
            (consUU_27 hd_21208 m_21212) (consUU_27 hd_21210 n_21213))
        end
      end
    end

#[program]
def splitL_83 :=
  fun split_21214 (__21215) ->
    match __21215 with
    | nilUL_24  => (ex1LL_32 nilUL_24 nilUL_24)
    | consUL_25 hd_21216 tl_21217 =>
      match tl_21217 with
      | nilUL_24  => (ex1LL_32 (consUL_25 hd_21216 nilUL_24) nilUL_24)
      | consUL_25 hd_21218 tl_21219 =>
        match ((split_21214) tl_21219) with
        | ex1LL_32 m_21220 n_21221 =>
          (ex1LL_32
            (consUL_25 hd_21216 m_21220) (consUL_25 hd_21218 n_21221))
        end
      end
    end

#[program]
def mergeU_86 :=
  fun merge_21222 (__21223) -> (__21224) -o
    match __21223 with
    | nilUU_26  => __21224
    | consUU_27 hd_21225 tl_21226 =>
      match __21224 with
      | nilUU_26  => (consUU_27 hd_21225 tl_21226)
      | consUU_27 hd_21227 tl_21228 =>
        match (__lte__ hd_21225 hd_21227) with
        | true_4  =>
          (consUU_27
            hd_21225 ((merge_21222) tl_21226 (consUU_27 hd_21227 tl_21228)))
        | false_5  =>
          (consUU_27
            hd_21227 ((merge_21222) (consUU_27 hd_21225 tl_21226) tl_21228))
        end
      end
    end

#[program]
def mergeL_85 :=
  fun merge_21229 (__21230) -> (__21231) -o
    match __21230 with
    | nilUL_24  => __21231
    | consUL_25 hd_21232 tl_21233 =>
      match __21231 with
      | nilUL_24  => (consUL_25 hd_21232 tl_21233)
      | consUL_25 hd_21234 tl_21235 =>
        match (__lte__ hd_21232 hd_21234) with
        | true_4  =>
          (consUL_25
            hd_21232 ((merge_21229) tl_21233 (consUL_25 hd_21234 tl_21235)))
        | false_5  =>
          (consUL_25
            hd_21234 ((merge_21229) (consUL_25 hd_21232 tl_21233) tl_21235))
        end
      end
    end

#[program]
def msortU_88 :=
  fun msort_21236 (__21237) ->
    match __21237 with
    | nilUU_26  => nilUU_26
    | consUU_27 hd_21238 tl_21239 =>
      match tl_21239 with
      | nilUU_26  => (consUU_27 hd_21238 nilUU_26)
      | consUU_27 hd_21240 tl_21241 =>
        match ((splitU_84)
                (consUU_27 hd_21238 (consUU_27 hd_21240 tl_21241))) with
        | ex1UU_35 m_21242 n_21243 =>
          ((mergeU_86) ((msort_21236) m_21242) ((msort_21236) n_21243))
        end
      end
    end

#[program]
def msortL_87 :=
  fun msort_21244 (__21245) ->
    match __21245 with
    | nilUL_24  => nilUL_24
    | consUL_25 hd_21246 tl_21247 =>
      match tl_21247 with
      | nilUL_24  => (consUL_25 hd_21246 nilUL_24)
      | consUL_25 hd_21248 tl_21249 =>
        match ((splitL_83)
                (consUL_25 hd_21246 (consUL_25 hd_21248 tl_21249))) with
        | ex1LL_32 m_21250 n_21251 =>
          ((mergeL_85) ((msort_21244) m_21250) ((msort_21244) n_21251))
        end
      end
    end

#[logical]
def cmsort_chU_90 := NULL

#[logical]
def cmsort_chL_89 := NULL

#[program]
def cmsort_workerU_92 :=
  fun cmsort_worker_21252 (__21253) -> (zs_21254) -> (__21255) -o
    match zs_21254 with
    | nilUU_26  =>
      let* c_21256 := ((send[R,U] __21255) (justUU_17 nilUU_26)) in
      close[true] c_21256
    | consUU_27 hd_21257 tl_21258 =>
      match tl_21258 with
      | nilUU_26  =>
        let* c_21259 :=
          ((send[R,U] __21255) (justUU_17 (consUU_27 hd_21257 nilUU_26)))
        in close[true] c_21259
      | consUU_27 hd_21260 tl_21261 =>
        match (__lte__ __21253 0) with
        | true_4  =>
          let* c_21262 :=
            ((send[R,U] __21255)
              (justUU_17
                ((msortU_88)
                  (consUU_27 hd_21257 (consUU_27 hd_21260 tl_21261)))))
          in close[true] c_21262
        | false_5  =>
          match ((splitU_84)
                  (consUU_27 hd_21257 (consUU_27 hd_21260 tl_21261))) with
          | ex1UU_35 m_21263 n_21264 =>
            let* r1_21265 :=
              fork
                fun _21266 (_21267) -o
                  ((cmsort_worker_21252) (__sub__ __21253 1) m_21263 _21267)
            in
            let* r2_21268 :=
              fork
                fun _21269 (_21270) -o
                  ((cmsort_worker_21252) (__sub__ __21253 1) n_21264 _21270)
            in
            let* _21271 := recv[R,U] r1_21265 in
            match _21271 with
            | ex1UL_34 m_21272 n_21273 =>
              match m_21272 with
              | justUU_17 m_21274 =>
                let* _21275 := recv[R,U] r2_21268 in
                match _21275 with
                | ex1UL_34 m_21276 n_21277 =>
                  match m_21276 with
                  | justUU_17 m_21278 =>
                    let zs1_21279 :=
                      (justUU_17 ((mergeU_86) m_21274 m_21278))
                    in
                    let zs1_21280 :=
                      ((rwlUU_48) NULL NULL NULL NULL NULL zs1_21279)
                    in
                    let* c_21281 := ((send[R,U] __21255) zs1_21280) in
                    let* __21282 := close[false] n_21273 in
                    let* __21283 := close[false] n_21277 in
                    close[true] c_21281
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsort_workerL_91 :=
  fun cmsort_worker_21284 (__21285) -> (zs_21286) -> (__21287) -o
    match zs_21286 with
    | nilUL_24  =>
      let* c_21288 := ((send[R,L] __21287) (justLL_14 nilUL_24)) in
      close[true] c_21288
    | consUL_25 hd_21289 tl_21290 =>
      match tl_21290 with
      | nilUL_24  =>
        let* c_21291 :=
          ((send[R,L] __21287) (justLL_14 (consUL_25 hd_21289 nilUL_24)))
        in close[true] c_21291
      | consUL_25 hd_21292 tl_21293 =>
        match (__lte__ __21285 0) with
        | true_4  =>
          let* c_21294 :=
            ((send[R,L] __21287)
              (justLL_14
                ((msortL_87)
                  (consUL_25 hd_21289 (consUL_25 hd_21292 tl_21293)))))
          in close[true] c_21294
        | false_5  =>
          match ((splitL_83)
                  (consUL_25 hd_21289 (consUL_25 hd_21292 tl_21293))) with
          | ex1LL_32 m_21295 n_21296 =>
            let* r1_21297 :=
              fork
                fun _21298 (_21299) -o
                  ((cmsort_worker_21284) (__sub__ __21285 1) m_21295 _21299)
            in
            let* r2_21300 :=
              fork
                fun _21301 (_21302) -o
                  ((cmsort_worker_21284) (__sub__ __21285 1) n_21296 _21302)
            in
            let* _21303 := recv[R,L] r1_21297 in
            match _21303 with
            | ex1LL_32 m_21304 n_21305 =>
              match m_21304 with
              | justLL_14 m_21306 =>
                let* _21307 := recv[R,L] r2_21300 in
                match _21307 with
                | ex1LL_32 m_21308 n_21309 =>
                  match m_21308 with
                  | justLL_14 m_21310 =>
                    let zs1_21311 :=
                      (justLL_14 ((mergeL_85) m_21306 m_21310))
                    in
                    let zs1_21312 :=
                      ((rwlLL_45) NULL NULL NULL NULL NULL zs1_21311)
                    in
                    let* c_21313 := ((send[R,L] __21287) zs1_21312) in
                    let* __21314 := close[false] n_21305 in
                    let* __21315 := close[false] n_21309 in
                    close[true] c_21313
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsortU_94 :=
  fun cmsort_21316 (zs_21317) ->
    let* c_21318 :=
      fork fun _21319 (_21320) -o
             ((cmsort_workerU_92) 4 zs_21317 _21320)
    in
    let* _21321 := recv[R,U] c_21318 in
    match _21321 with
    | ex1UL_34 m_21322 n_21323 =>
      let* __21324 := close[false] n_21323 in return m_21322
    end

#[program]
def cmsortL_93 :=
  fun cmsort_21325 (zs_21326) ->
    let* c_21327 :=
      fork fun _21328 (_21329) -o
             ((cmsort_workerL_91) 4 zs_21326 _21329)
    in
    let* _21330 := recv[R,L] c_21327 in
    match _21330 with
    | ex1LL_32 m_21331 n_21332 =>
      let* __21333 := close[false] n_21332 in return m_21331
    end

#[program]
def mklistU_96 :=
  fun mklist_21334 (n_21335) ->
    match (__lte__ n_21335 0) with
    | true_4  => nilUU_26
    | false_5  => (consUU_27 n_21335 ((mklist_21334) (__sub__ n_21335 1)))
    end

#[program]
def mklistL_95 :=
  fun mklist_21336 (n_21337) ->
    match (__lte__ n_21337 0) with
    | true_4  => nilUL_24
    | false_5  => (consUL_25 n_21337 ((mklist_21336) (__sub__ n_21337 1)))
    end

#[program]
def list_lenU_98 :=
  fun list_len_21338 (__21339) ->
    match __21339 with
    | nilUU_26  => 0
    | consUU_27 hd_21340 tl_21341 => (__add__ 1 ((list_len_21338) tl_21341))
    end

#[program]
def list_lenL_97 :=
  fun list_len_21342 (__21343) ->
    match __21343 with
    | nilUL_24  => 0
    | consUL_25 hd_21344 tl_21345 => (__add__ 1 ((list_len_21342) tl_21345))
    end

#[program]
def print_listU_100 :=
  fun print_list_21346 (__21347) ->
    match __21347 with
    | nilUU_26  => print "nil"
    | consUU_27 hd_21348 tl_21349 =>
      let* __21350 := print ((string_of_int_32) hd_21348) in
      let* __21351 := print " :: " in ((print_list_21346) tl_21349)
    end

#[program]
def print_listL_99 :=
  fun print_list_21352 (__21353) ->
    match __21353 with
    | nilUL_24  => print "nil"
    | consUL_25 hd_21354 tl_21355 =>
      let* __21356 := print ((string_of_int_32) hd_21354) in
      let* __21357 := print " :: " in ((print_list_21352) tl_21355)
    end

#[program]
def main :=
  let test_21358 := ((mklistL_95) 2000000) in
  let* _21359 := ((cmsortL_93) test_21358) in
  match _21359 with
  | justLL_14 m_21360 =>
    let len_21361 := ((list_lenL_97) m_21360) in
    print ((string_of_int_32) len_21361)
  end

[trans12 success]

-----------------------------------------

#[program]
def idU_44 := fun id_21695 (A_21696) -> (m_21697) ->
                m_21697

#[program]
def idL_43 := fun id_21698 (A_21699) -> (m_21700) ->
                m_21700

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_48 :=
  fun rwl_21701 {A_21702} -> {m_21703} -> {n_21704} -> {B_21705} ->
  {__21706} -> (__21707) ->
    __21707

#[program]
def rwlUL_47 :=
  fun rwl_21708 {A_21709} -> {m_21710} -> {n_21711} -> {B_21712} ->
  {__21713} -> (__21714) ->
    __21714

#[program]
def rwlLU_46 :=
  fun rwl_21715 {A_21716} -> {m_21717} -> {n_21718} -> {B_21719} ->
  {__21720} -> (__21721) ->
    __21721

#[program]
def rwlLL_45 :=
  fun rwl_21722 {A_21723} -> {m_21724} -> {n_21725} -> {B_21726} ->
  {__21727} -> (__21728) ->
    __21728

#[program]
def rwrUU_52 :=
  fun rwr_21729 {A_21730} -> {m_21731} -> {n_21732} -> {B_21733} ->
  {__21734} -> (__21735) ->
    __21735

#[program]
def rwrUL_51 :=
  fun rwr_21736 {A_21737} -> {m_21738} -> {n_21739} -> {B_21740} ->
  {__21741} -> (__21742) ->
    __21742

#[program]
def rwrLU_50 :=
  fun rwr_21743 {A_21744} -> {m_21745} -> {n_21746} -> {B_21747} ->
  {__21748} -> (__21749) ->
    __21749

#[program]
def rwrLL_49 :=
  fun rwr_21750 {A_21751} -> {m_21752} -> {n_21753} -> {B_21754} ->
  {__21755} -> (__21756) ->
    __21756

#[logical]
def congrUUU_60 := NULL

#[logical]
def congrUUL_59 := NULL

#[logical]
def congrULU_58 := NULL

#[logical]
def congrULL_57 := NULL

#[logical]
def congrLUU_56 := NULL

#[logical]
def congrLUL_55 := NULL

#[logical]
def congrLLU_54 := NULL

#[logical]
def congrLLL_53 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_62 := NULL

#[logical]
def ssingL_61 := NULL

#[program]
def sing_elimUU_66 :=
  fun sing_elim_21757 {A_21758} -> {x_21759} -> (__21760) ->
    match __21760 with
    | justUU_17 m_21761 => m_21761
    end

#[program]
def sing_elimUL_65 :=
  fun sing_elim_21762 {A_21763} -> {x_21764} -> (__21765) ->
    match __21765 with
    | justUL_16 m_21766 => m_21766
    end

#[program]
def sing_elimLU_64 :=
  fun sing_elim_21767 {A_21768} -> {x_21769} -> (__21770) ->
    !!

#[program]
def sing_elimLL_63 :=
  fun sing_elim_21771 {A_21772} -> {x_21773} -> (__21774) ->
    match __21774 with
    | justLL_14 m_21775 => m_21775
    end

#[logical]
def sing_uniqUU_70 := NULL

#[logical]
def sing_uniqUL_69 := NULL

#[logical]
def sing_uniqLU_68 := NULL

#[logical]
def sing_uniqLL_67 := NULL

#[program]
inductive baseU_16 where
| ttU_19 of layout[]

#[program]
inductive baseL_15 where
| ttL_18 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_21776 (__21777) ->
    match __21777 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_12 :=
  fun and_21778 (__21779) -> (__21780) ->
    match __21779 with
    | true_4  =>
      match __21780 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_13 :=
  fun or_21781 (__21782) -> (__21783) ->
    match __21782 with
    | true_4  => true_4
    | false_5  =>
      match __21783 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_14 :=
  fun xor_21784 (__21785) -> (__21786) ->
    match __21785 with
    | true_4  =>
      match __21786 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __21786 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_21787 (__21788) -> (__21789) ->
    match __21788 with
    | zero_6  => true_4
    | succ_7 n_21790 =>
      match __21789 with
      | zero_6  => false_5 | succ_7 n_21791 => ((lte_21787) n_21790 n_21791)
      end
    end

#[program]
def lt_16 :=
  fun lt_21792 (x_21793) -> (y_21794) ->
    ((lte_15) (succ_7 x_21793) y_21794)

#[program]
def pred_17 :=
  fun pred_21795 (__21796) ->
    match __21796 with
    | zero_6  => zero_6 | succ_7 n_21797 => n_21797
    end

#[program]
def add_18 :=
  fun add_21798 (__21799) -> (__21800) ->
    match __21799 with
    | zero_6  => __21800
    | succ_7 n_21801 => (succ_7 ((add_21798) n_21801 __21800))
    end

#[program]
def sub_19 :=
  fun sub_21802 (__21803) -> (__21804) ->
    match __21804 with
    | zero_6  => __21803
    | succ_7 n_21805 => ((sub_21802) ((pred_17) __21803) n_21805)
    end

#[program]
def mul_20 :=
  fun mul_21806 (__21807) -> (__21808) ->
    match __21807 with
    | zero_6  => zero_6
    | succ_7 n_21809 => ((add_18) __21808 ((mul_21806) n_21809 __21808))
    end

#[program]
def div_21 :=
  fun div_21810 (x_21811) -> (y_21812) ->
    match ((lt_16) x_21811 y_21812) with
    | true_4  => zero_6
    | false_5  =>
      let loop_21813 :=
        fun loop_21814 (x_21815) -> (y_21816) ->
          match ((sub_19) x_21815 ((pred_17) y_21816)) with
          | zero_6  => zero_6
          | succ_7 n_21817 => (succ_7 ((loop_21814) n_21817 y_21816))
          end
      in ((loop_21813) x_21811 y_21812)
    end

#[program]
def rem_22 :=
  fun rem_21818 (x_21819) -> (y_21820) ->
    ((sub_19) x_21819 ((mul_20) ((div_21) x_21819 y_21820) y_21820))

#[program]
inductive listUU_20 where
| nilUU_26 of layout[]
| consUU_27 of layout[R, R]

#[program]
inductive listUL_19 where
| nilUL_24 of layout[]
| consUL_25 of layout[R, R]

#[program]
inductive listLU_18 where
| nilLU_22 of layout[]

#[program]
inductive listLL_17 where
| nilLL_20 of layout[]
| consLL_21 of layout[R, R]

#[program]
def free_listUU_74 :=
  fun free_list_21821 {A_21822} -> (f_21823) -> (__21824) ->
    match __21824 with
    | nilUU_26  => ttU_19
    | consUU_27 hd_21825 tl_21826 =>
      let __21827 := ((f_21823) hd_21825) in
      ((free_list_21821) NULL f_21823 tl_21826)
    end

#[program]
def free_listUL_73 :=
  fun free_list_21828 {A_21829} -> (f_21830) -> (__21831) ->
    match __21831 with
    | nilUL_24  => ttU_19
    | consUL_25 hd_21832 tl_21833 =>
      let __21834 := ((f_21830) hd_21832) in
      ((free_list_21828) NULL f_21830 tl_21833)
    end

#[program]
def free_listLL_71 :=
  fun free_list_21835 {A_21836} -> (f_21837) -> (__21838) ->
    match __21838 with
    | nilLL_20  => ttU_19
    | consLL_21 hd_21839 tl_21840 =>
      let __21841 := ((f_21837) hd_21839) in
      ((free_list_21835) NULL f_21837 tl_21840)
    end

#[program]
inductive exists0UU_24 where
| ex0UU_31 of layout[N, R]

#[program]
inductive exists0UL_23 where
| ex0UL_30 of layout[N, R]

#[program]
inductive exists0LU_22 where
| ex0LU_29 of layout[N, R]

#[program]
inductive exists0LL_21 where
| ex0LL_28 of layout[N, R]

#[program]
inductive exists1UU_28 where
| ex1UU_35 of layout[R, R]

#[program]
inductive exists1UL_27 where
| ex1UL_34 of layout[R, R]

#[program]
inductive exists1LU_26 where
| ex1LU_33 of layout[R, R]

#[program]
inductive exists1LL_25 where
| ex1LL_32 of layout[R, R]

#[logical]
def prod0UU_78 := NULL

#[logical]
def prod0UL_77 := NULL

#[logical]
def prod0LU_76 := NULL

#[logical]
def prod0LL_75 := NULL

#[logical]
def prod1UU_82 := NULL

#[logical]
def prod1UL_81 := NULL

#[logical]
def prod1LU_80 := NULL

#[logical]
def prod1LL_79 := NULL

#[program]
def pow_26 :=
  fun pow_21842 (x_21843) -> (y_21844) ->
    let loop_21845 :=
      fun loop_21846 (acc_21847) -> (y_21848) ->
        match (__lte__ y_21848 0) with
        | true_4  => acc_21847
        | false_5  =>
          ((loop_21846) (__mul__ x_21843 acc_21847) (__sub__ y_21848 1))
        end
    in ((loop_21845) 1 y_21844)

#[program]
def powm_27 :=
  fun powm_21849 (x_21850) -> (y_21851) -> (m_21852) ->
    let loop_21853 :=
      fun loop_21854 (acc_21855) -> (y_21856) ->
        match (__lte__ y_21856 0) with
        | true_4  => acc_21855
        | false_5  =>
          ((loop_21854)
            (__mod__ (__mul__ x_21850 acc_21855) m_21852) (__sub__ y_21856 1))
        end
    in ((loop_21853) 1 y_21851)

#[program]
def ord_28 := fun ord_21857 (c_21858) ->
                (__ord__ c_21858)

#[program]
def chr_29 := fun chr_21859 (i_21860) ->
                (__chr__ i_21860)

#[program]
def str_30 := fun str_21861 (c_21862) ->
                (__push__ "" c_21862)

#[program]
def strlen_31 := fun strlen_21863 (s_21864) ->
                   (__size__ s_21864)

#[program]
def string_of_int_32 :=
  fun string_of_int_21865 (i_21866) ->
    let aux_21867 :=
      fun aux_21868 (i_21869) ->
        match (__lte__ 10 i_21869) with
        | true_4  =>
          let r_21870 := (__mod__ i_21869 10) in
          let i_21871 := (__div__ i_21869 10) in
          (__push__ ((aux_21868) i_21871)
            ((chr_29) (__add__ r_21870 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_21869 ((ord_28) 0))))
        end
    in
    match (__lte__ 0 i_21866) with
    | true_4  => ((aux_21867) i_21866)
    | false_5  => (__cat__ "~" ((aux_21867) (__neg__ i_21866)))
    end

#[program]
def splitU_84 :=
  fun split_21872 (__21873) ->
    match __21873 with
    | nilUU_26  => (ex1UU_35 nilUU_26 nilUU_26)
    | consUU_27 hd_21874 tl_21875 =>
      match tl_21875 with
      | nilUU_26  => (ex1UU_35 (consUU_27 hd_21874 nilUU_26) nilUU_26)
      | consUU_27 hd_21876 tl_21877 =>
        match ((split_21872) tl_21877) with
        | ex1UU_35 m_21878 n_21879 =>
          (ex1UU_35
            (consUU_27 hd_21874 m_21878) (consUU_27 hd_21876 n_21879))
        end
      end
    end

#[program]
def splitL_83 :=
  fun split_21880 (__21881) ->
    match __21881 with
    | nilUL_24  => (ex1LL_32 nilUL_24 nilUL_24)
    | consUL_25 hd_21882 tl_21883 =>
      match tl_21883 with
      | nilUL_24  => (ex1LL_32 (consUL_25 hd_21882 nilUL_24) nilUL_24)
      | consUL_25 hd_21884 tl_21885 =>
        match ((split_21880) tl_21885) with
        | ex1LL_32 m_21886 n_21887 =>
          (ex1LL_32
            (consUL_25 hd_21882 m_21886) (consUL_25 hd_21884 n_21887))
        end
      end
    end

#[program]
def mergeU_86 :=
  fun merge_21888 (__21889) -> (__21890) -o
    match __21889 with
    | nilUU_26  => __21890
    | consUU_27 hd_21891 tl_21892 =>
      match __21890 with
      | nilUU_26  => (consUU_27 hd_21891 tl_21892)
      | consUU_27 hd_21893 tl_21894 =>
        match (__lte__ hd_21891 hd_21893) with
        | true_4  =>
          (consUU_27
            hd_21891 ((merge_21888) tl_21892 (consUU_27 hd_21893 tl_21894)))
        | false_5  =>
          (consUU_27
            hd_21893 ((merge_21888) (consUU_27 hd_21891 tl_21892) tl_21894))
        end
      end
    end

#[program]
def mergeL_85 :=
  fun merge_21895 (__21896) -> (__21897) -o
    match __21896 with
    | nilUL_24  => __21897
    | consUL_25 hd_21898 tl_21899 =>
      match __21897 with
      | nilUL_24  => (consUL_25 hd_21898 tl_21899)
      | consUL_25 hd_21900 tl_21901 =>
        match (__lte__ hd_21898 hd_21900) with
        | true_4  =>
          (consUL_25
            hd_21898 ((merge_21895) tl_21899 (consUL_25 hd_21900 tl_21901)))
        | false_5  =>
          (consUL_25
            hd_21900 ((merge_21895) (consUL_25 hd_21898 tl_21899) tl_21901))
        end
      end
    end

#[program]
def msortU_88 :=
  fun msort_21902 (__21903) ->
    match __21903 with
    | nilUU_26  => nilUU_26
    | consUU_27 hd_21904 tl_21905 =>
      match tl_21905 with
      | nilUU_26  => (consUU_27 hd_21904 nilUU_26)
      | consUU_27 hd_21906 tl_21907 =>
        match ((splitU_84)
                (consUU_27 hd_21904 (consUU_27 hd_21906 tl_21907))) with
        | ex1UU_35 m_21908 n_21909 =>
          ((mergeU_86) ((msort_21902) m_21908) ((msort_21902) n_21909))
        end
      end
    end

#[program]
def msortL_87 :=
  fun msort_21910 (__21911) ->
    match __21911 with
    | nilUL_24  => nilUL_24
    | consUL_25 hd_21912 tl_21913 =>
      match tl_21913 with
      | nilUL_24  => (consUL_25 hd_21912 nilUL_24)
      | consUL_25 hd_21914 tl_21915 =>
        match ((splitL_83)
                (consUL_25 hd_21912 (consUL_25 hd_21914 tl_21915))) with
        | ex1LL_32 m_21916 n_21917 =>
          ((mergeL_85) ((msort_21910) m_21916) ((msort_21910) n_21917))
        end
      end
    end

#[logical]
def cmsort_chU_90 := NULL

#[logical]
def cmsort_chL_89 := NULL

#[program]
def cmsort_workerU_92 :=
  fun cmsort_worker_21918 (__21919) -> (zs_21920) -> (__21921) -o
    match zs_21920 with
    | nilUU_26  =>
      let* c_21922 := ((send[R,U] __21921) (justUU_17 nilUU_26)) in
      close[true] c_21922
    | consUU_27 hd_21923 tl_21924 =>
      match tl_21924 with
      | nilUU_26  =>
        let* c_21925 :=
          ((send[R,U] __21921) (justUU_17 (consUU_27 hd_21923 nilUU_26)))
        in close[true] c_21925
      | consUU_27 hd_21926 tl_21927 =>
        match (__lte__ __21919 0) with
        | true_4  =>
          let* c_21928 :=
            ((send[R,U] __21921)
              (justUU_17
                ((msortU_88)
                  (consUU_27 hd_21923 (consUU_27 hd_21926 tl_21927)))))
          in close[true] c_21928
        | false_5  =>
          match ((splitU_84)
                  (consUU_27 hd_21923 (consUU_27 hd_21926 tl_21927))) with
          | ex1UU_35 m_21929 n_21930 =>
            let* r1_21931 :=
              fork
                fun _21932 (_21933) -o
                  ((cmsort_worker_21918) (__sub__ __21919 1) m_21929 _21933)
            in
            let* r2_21934 :=
              fork
                fun _21935 (_21936) -o
                  ((cmsort_worker_21918) (__sub__ __21919 1) n_21930 _21936)
            in
            let* _21937 := recv[R,U] r1_21931 in
            match _21937 with
            | ex1UL_34 m_21938 n_21939 =>
              match m_21938 with
              | justUU_17 m_21940 =>
                let* _21941 := recv[R,U] r2_21934 in
                match _21941 with
                | ex1UL_34 m_21942 n_21943 =>
                  match m_21942 with
                  | justUU_17 m_21944 =>
                    let zs1_21945 :=
                      (justUU_17 ((mergeU_86) m_21940 m_21944))
                    in
                    let zs1_21946 :=
                      ((rwlUU_48) NULL NULL NULL NULL NULL zs1_21945)
                    in
                    let* c_21947 := ((send[R,U] __21921) zs1_21946) in
                    let* __21948 := close[false] n_21939 in
                    let* __21949 := close[false] n_21943 in
                    close[true] c_21947
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsort_workerL_91 :=
  fun cmsort_worker_21950 (__21951) -> (zs_21952) -> (__21953) -o
    match zs_21952 with
    | nilUL_24  =>
      let* c_21954 := ((send[R,L] __21953) (justLL_14 nilUL_24)) in
      close[true] c_21954
    | consUL_25 hd_21955 tl_21956 =>
      match tl_21956 with
      | nilUL_24  =>
        let* c_21957 :=
          ((send[R,L] __21953) (justLL_14 (consUL_25 hd_21955 nilUL_24)))
        in close[true] c_21957
      | consUL_25 hd_21958 tl_21959 =>
        match (__lte__ __21951 0) with
        | true_4  =>
          let* c_21960 :=
            ((send[R,L] __21953)
              (justLL_14
                ((msortL_87)
                  (consUL_25 hd_21955 (consUL_25 hd_21958 tl_21959)))))
          in close[true] c_21960
        | false_5  =>
          match ((splitL_83)
                  (consUL_25 hd_21955 (consUL_25 hd_21958 tl_21959))) with
          | ex1LL_32 m_21961 n_21962 =>
            let* r1_21963 :=
              fork
                fun _21964 (_21965) -o
                  ((cmsort_worker_21950) (__sub__ __21951 1) m_21961 _21965)
            in
            let* r2_21966 :=
              fork
                fun _21967 (_21968) -o
                  ((cmsort_worker_21950) (__sub__ __21951 1) n_21962 _21968)
            in
            let* _21969 := recv[R,L] r1_21963 in
            match _21969 with
            | ex1LL_32 m_21970 n_21971 =>
              match m_21970 with
              | justLL_14 m_21972 =>
                let* _21973 := recv[R,L] r2_21966 in
                match _21973 with
                | ex1LL_32 m_21974 n_21975 =>
                  match m_21974 with
                  | justLL_14 m_21976 =>
                    let zs1_21977 :=
                      (justLL_14 ((mergeL_85) m_21972 m_21976))
                    in
                    let zs1_21978 :=
                      ((rwlLL_45) NULL NULL NULL NULL NULL zs1_21977)
                    in
                    let* c_21979 := ((send[R,L] __21953) zs1_21978) in
                    let* __21980 := close[false] n_21971 in
                    let* __21981 := close[false] n_21975 in
                    close[true] c_21979
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsortU_94 :=
  fun cmsort_21982 (zs_21983) ->
    let* c_21984 :=
      fork fun _21985 (_21986) -o
             ((cmsort_workerU_92) 4 zs_21983 _21986)
    in
    let* _21987 := recv[R,U] c_21984 in
    match _21987 with
    | ex1UL_34 m_21988 n_21989 =>
      let* __21990 := close[false] n_21989 in return m_21988
    end

#[program]
def cmsortL_93 :=
  fun cmsort_21991 (zs_21992) ->
    let* c_21993 :=
      fork fun _21994 (_21995) -o
             ((cmsort_workerL_91) 4 zs_21992 _21995)
    in
    let* _21996 := recv[R,L] c_21993 in
    match _21996 with
    | ex1LL_32 m_21997 n_21998 =>
      let* __21999 := close[false] n_21998 in return m_21997
    end

#[program]
def mklistU_96 :=
  fun mklist_22000 (n_22001) ->
    match (__lte__ n_22001 0) with
    | true_4  => nilUU_26
    | false_5  => (consUU_27 n_22001 ((mklist_22000) (__sub__ n_22001 1)))
    end

#[program]
def mklistL_95 :=
  fun mklist_22002 (n_22003) ->
    match (__lte__ n_22003 0) with
    | true_4  => nilUL_24
    | false_5  => (consUL_25 n_22003 ((mklist_22002) (__sub__ n_22003 1)))
    end

#[program]
def list_lenU_98 :=
  fun list_len_22004 (__22005) ->
    match __22005 with
    | nilUU_26  => 0
    | consUU_27 hd_22006 tl_22007 => (__add__ 1 ((list_len_22004) tl_22007))
    end

#[program]
def list_lenL_97 :=
  fun list_len_22008 (__22009) ->
    match __22009 with
    | nilUL_24  => 0
    | consUL_25 hd_22010 tl_22011 => (__add__ 1 ((list_len_22008) tl_22011))
    end

#[program]
def print_listU_100 :=
  fun print_list_22012 (__22013) ->
    match __22013 with
    | nilUU_26  => print "nil"
    | consUU_27 hd_22014 tl_22015 =>
      let* __22016 := print ((string_of_int_32) hd_22014) in
      let* __22017 := print " :: " in ((print_list_22012) tl_22015)
    end

#[program]
def print_listL_99 :=
  fun print_list_22018 (__22019) ->
    match __22019 with
    | nilUL_24  => print "nil"
    | consUL_25 hd_22020 tl_22021 =>
      let* __22022 := print ((string_of_int_32) hd_22020) in
      let* __22023 := print " :: " in ((print_list_22018) tl_22021)
    end

#[program]
def main :=
  let test_22024 := ((mklistL_95) 2000000) in
  let* _22025 := ((cmsortL_93) test_22024) in
  match _22025 with
  | justLL_14 m_22026 =>
    let len_22027 := ((list_lenL_97) m_22026) in
    print ((string_of_int_32) len_22027)
  end

[trans2e success]

-----------------------------------------

def idU_44 := fun id_22399 (A_22400) -> (m_22401) -> m_22401

def idL_43 := fun id_22402 (A_22403) -> (m_22404) -> m_22404

def rwlUU_48 :=
  fun rwl_22405 (A_22406) -> (m_22407) -> (n_22408) -> (B_22409) ->
  (__22410) -> (__22411) -> __22411

def rwlUL_47 :=
  fun rwl_22412 (A_22413) -> (m_22414) -> (n_22415) -> (B_22416) ->
  (__22417) -> (__22418) -> __22418

def rwlLU_46 :=
  fun rwl_22419 (A_22420) -> (m_22421) -> (n_22422) -> (B_22423) ->
  (__22424) -> (__22425) -> __22425

def rwlLL_45 :=
  fun rwl_22426 (A_22427) -> (m_22428) -> (n_22429) -> (B_22430) ->
  (__22431) -> (__22432) -> __22432

def rwrUU_52 :=
  fun rwr_22433 (A_22434) -> (m_22435) -> (n_22436) -> (B_22437) ->
  (__22438) -> (__22439) -> __22439

def rwrUL_51 :=
  fun rwr_22440 (A_22441) -> (m_22442) -> (n_22443) -> (B_22444) ->
  (__22445) -> (__22446) -> __22446

def rwrLU_50 :=
  fun rwr_22447 (A_22448) -> (m_22449) -> (n_22450) -> (B_22451) ->
  (__22452) -> (__22453) -> __22453

def rwrLL_49 :=
  fun rwr_22454 (A_22455) -> (m_22456) -> (n_22457) -> (B_22458) ->
  (__22459) -> (__22460) -> __22460

def sing_elimUU_66 :=
  fun sing_elim_22461 (A_22462) -> (x_22463) -> (__22464) -> __22464

def sing_elimUL_65 :=
  fun sing_elim_22465 (A_22466) -> (x_22467) -> (__22468) -> __22468

def sing_elimLU_64 :=
  fun sing_elim_22469 (A_22470) -> (x_22471) -> (__22472) -> !!

def sing_elimLL_63 :=
  fun sing_elim_22473 (A_22474) -> (x_22475) -> (__22476) -> __22476

def not_11 :=
  fun not_22477 (__22478) ->
    match __22478 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_12 :=
  fun and_22479 (__22480) -> (__22481) ->
    match __22480 with
    | true_4 =>
      match __22481 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_13 :=
  fun or_22482 (__22483) -> (__22484) ->
    match __22483 with
    | true_4 => true_4
    | false_5 =>
      match __22484 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_14 :=
  fun xor_22485 (__22486) -> (__22487) ->
    match __22486 with
    | true_4 =>
      match __22487 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __22487 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_15 :=
  fun lte_22488 (__22489) -> (__22490) ->
    match __22489 with
    | zero_6  => true_4
    | succ_7 n_22491 =>
      match __22490 with
      | zero_6  => false_5 | succ_7 n_22492 => ((lte_22488) n_22491 n_22492)
      end
    end

def lt_16 :=
  fun lt_22493 (x_22494) -> (y_22495) -> ((lte_15) (succ_7 x_22494) y_22495)

def pred_17 :=
  fun pred_22496 (__22497) ->
    match __22497 with
    | zero_6  => (zero_6 ) | succ_7 n_22498 => n_22498
    end

def add_18 :=
  fun add_22499 (__22500) -> (__22501) ->
    match __22500 with
    | zero_6  => __22501
    | succ_7 n_22502 => (succ_7 ((add_22499) n_22502 __22501))
    end

def sub_19 :=
  fun sub_22503 (__22504) -> (__22505) ->
    match __22505 with
    | zero_6  => __22504
    | succ_7 n_22506 => ((sub_22503) ((pred_17) __22504) n_22506)
    end

def mul_20 :=
  fun mul_22507 (__22508) -> (__22509) ->
    match __22508 with
    | zero_6  => (zero_6 )
    | succ_7 n_22510 => ((add_18) __22509 ((mul_22507) n_22510 __22509))
    end

def div_21 :=
  fun div_22511 (x_22512) -> (y_22513) ->
    match ((lt_16) x_22512 y_22513) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_22514 :=
        fun loop_22515 (x_22516) -> (y_22517) ->
          match ((sub_19) x_22516 ((pred_17) y_22517)) with
          | zero_6  => (zero_6 )
          | succ_7 n_22518 => (succ_7 ((loop_22515) n_22518 y_22517))
          end
      in ((loop_22514) x_22512 y_22513)
    end

def rem_22 :=
  fun rem_22519 (x_22520) -> (y_22521) ->
    ((sub_19) x_22520 ((mul_20) ((div_21) x_22520 y_22521) y_22521))

def free_listUU_74 :=
  fun free_list_22522 (A_22523) -> (f_22524) -> (__22525) ->
    match __22525 with
    | nilUU_26  => ttU_19
    | consUU_27 hd_22526 tl_22527 =>
      let __22528 := ((f_22524) hd_22526) in
      ((free_list_22522) NULL f_22524 tl_22527)
    end

def free_listUL_73 :=
  fun free_list_22529 (A_22530) -> (f_22531) -> (__22532) ->
    match __22532 with
    | nilUL_24  => ttU_19
    | consUL_25 hd_22533 tl_22534 =>
      let __22535 := ((f_22531) hd_22533) in
      ((free_list_22529) NULL f_22531 tl_22534)
    end

def free_listLL_71 :=
  fun free_list_22536 (A_22537) -> (f_22538) -> (__22539) ->
    match __22539 with
    | nilLL_20  => ttU_19
    | consLL_21 hd_22540 tl_22541 =>
      let __22542 := ((f_22538) hd_22540) in
      ((free_list_22536) NULL f_22538 tl_22541)
    end

def pow_26 :=
  fun pow_22543 (x_22544) -> (y_22545) ->
    let loop_22546 :=
      fun loop_22547 (acc_22548) -> (y_22549) ->
        match (__lte__ y_22549 0) with
        | true_4 => acc_22548
        | false_5 =>
          ((loop_22547) (__mul__ x_22544 acc_22548) (__sub__ y_22549 1))
        end
    in ((loop_22546) 1 y_22545)

def powm_27 :=
  fun powm_22550 (x_22551) -> (y_22552) -> (m_22553) ->
    let loop_22554 :=
      fun loop_22555 (acc_22556) -> (y_22557) ->
        match (__lte__ y_22557 0) with
        | true_4 => acc_22556
        | false_5 =>
          ((loop_22555)
            (__mod__ (__mul__ x_22551 acc_22556) m_22553) (__sub__ y_22557 1))
        end
    in ((loop_22554) 1 y_22552)

def ord_28 := fun ord_22558 (c_22559) -> (__ord__ c_22559)

def chr_29 := fun chr_22560 (i_22561) -> (__chr__ i_22561)

def str_30 := fun str_22562 (c_22563) -> (__push__ "" c_22563)

def strlen_31 := fun strlen_22564 (s_22565) -> (__size__ s_22565)

def string_of_int_32 :=
  fun string_of_int_22566 (i_22567) ->
    let aux_22568 :=
      fun aux_22569 (i_22570) ->
        match (__lte__ 10 i_22570) with
        | true_4 =>
          let r_22571 := (__mod__ i_22570 10) in
          let i_22572 := (__div__ i_22570 10) in
          (__push__ ((aux_22569) i_22572)
            ((chr_29) (__add__ r_22571 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_22570 ((ord_28) 0))))
        end
    in
    match (__lte__ 0 i_22567) with
    | true_4 => ((aux_22568) i_22567)
    | false_5 => (__cat__ "~" ((aux_22568) (__neg__ i_22567)))
    end

def splitU_84 :=
  fun split_22573 (__22574) ->
    match __22574 with
    | nilUU_26  => (ex1UU_35 (nilUU_26 ) (nilUU_26 ))
    | consUU_27 hd_22575 tl_22576 =>
      match tl_22576 with
      | nilUU_26  => (ex1UU_35 (consUU_27 hd_22575 (nilUU_26 )) (nilUU_26 ))
      | consUU_27 hd_22577 tl_22578 =>
        match ((split_22573) tl_22578) with
        | ex1UU_35 m_22579 n_22580 =>
          (ex1UU_35
            (consUU_27 hd_22575 m_22579) (consUU_27 hd_22577 n_22580))
        end
      end
    end

def splitL_83 :=
  fun split_22581 (__22582) ->
    match __22582 with
    | nilUL_24  => (ex1LL_32 (nilUL_24 ) (nilUL_24 ))
    | consUL_25 hd_22583 tl_22584 =>
      match tl_22584 with
      | nilUL_24  => (ex1LL_32 (consUL_25 hd_22583 (nilUL_24 )) (nilUL_24 ))
      | consUL_25 hd_22585 tl_22586 =>
        match ((split_22581) tl_22586) with
        | ex1LL_32 m_22587 n_22588 =>
          (ex1LL_32
            (consUL_25 hd_22583 m_22587) (consUL_25 hd_22585 n_22588))
        end
      end
    end

def mergeU_86 :=
  fun merge_22589 (__22590) -> (__22591) -o
    match __22590 with
    | nilUU_26  => __22591
    | consUU_27 hd_22592 tl_22593 =>
      match __22591 with
      | nilUU_26  => (consUU_27 hd_22592 tl_22593)
      | consUU_27 hd_22594 tl_22595 =>
        match (__lte__ hd_22592 hd_22594) with
        | true_4 =>
          (consUU_27
            hd_22592 ((merge_22589) tl_22593 (consUU_27 hd_22594 tl_22595)))
        | false_5 =>
          (consUU_27
            hd_22594 ((merge_22589) (consUU_27 hd_22592 tl_22593) tl_22595))
        end
      end
    end

def mergeL_85 :=
  fun merge_22596 (__22597) -> (__22598) -o
    match __22597 with
    | nilUL_24  => __22598
    | consUL_25 hd_22599 tl_22600 =>
      match __22598 with
      | nilUL_24  => (consUL_25 hd_22599 tl_22600)
      | consUL_25 hd_22601 tl_22602 =>
        match (__lte__ hd_22599 hd_22601) with
        | true_4 =>
          (consUL_25
            hd_22599 ((merge_22596) tl_22600 (consUL_25 hd_22601 tl_22602)))
        | false_5 =>
          (consUL_25
            hd_22601 ((merge_22596) (consUL_25 hd_22599 tl_22600) tl_22602))
        end
      end
    end

def msortU_88 :=
  fun msort_22603 (__22604) ->
    match __22604 with
    | nilUU_26  => (nilUU_26 )
    | consUU_27 hd_22605 tl_22606 =>
      match tl_22606 with
      | nilUU_26  => (consUU_27 hd_22605 (nilUU_26 ))
      | consUU_27 hd_22607 tl_22608 =>
        match ((splitU_84)
                (consUU_27 hd_22605 (consUU_27 hd_22607 tl_22608))) with
        | ex1UU_35 m_22609 n_22610 =>
          ((mergeU_86) ((msort_22603) m_22609) ((msort_22603) n_22610))
        end
      end
    end

def msortL_87 :=
  fun msort_22611 (__22612) ->
    match __22612 with
    | nilUL_24  => (nilUL_24 )
    | consUL_25 hd_22613 tl_22614 =>
      match tl_22614 with
      | nilUL_24  => (consUL_25 hd_22613 (nilUL_24 ))
      | consUL_25 hd_22615 tl_22616 =>
        match ((splitL_83)
                (consUL_25 hd_22613 (consUL_25 hd_22615 tl_22616))) with
        | ex1LL_32 m_22617 n_22618 =>
          ((mergeL_85) ((msort_22611) m_22617) ((msort_22611) n_22618))
        end
      end
    end

def cmsort_workerU_92 :=
  fun cmsort_worker_22619 (__22620) -> (zs_22621) -> (__22622) -o
    match zs_22621 with
    | nilUU_26  =>
      lazy(let c_22623 :=
             force(((lam (x_22624) -> lazy(send(__22622, x_22624)))
                     (nilUU_26 )))
           in force(lazy(close[true] c_22623)))
    | consUU_27 hd_22625 tl_22626 =>
      match tl_22626 with
      | nilUU_26  =>
        lazy(let c_22627 :=
               force(((lam (x_22628) -> lazy(send(__22622, x_22628)))
                       (consUU_27 hd_22625 (nilUU_26 ))))
             in force(lazy(close[true] c_22627)))
      | consUU_27 hd_22629 tl_22630 =>
        match (__lte__ __22620 0) with
        | true_4 =>
          lazy(let c_22631 :=
                 force(((lam (x_22632) -> lazy(send(__22622, x_22632)))
                         ((msortU_88)
                           (consUU_27 hd_22625 (consUU_27 hd_22629 tl_22630)))))
               in force(lazy(close[true] c_22631)))
        | false_5 =>
          match ((splitU_84)
                  (consUU_27 hd_22625 (consUU_27 hd_22629 tl_22630))) with
          | ex1UU_35 m_22633 n_22634 =>
            lazy(let r1_22635 :=
                   force(lazy(fork
                                fun _22636 (_22637) -o
                                  ((cmsort_worker_22619)
                                    (__sub__ __22620 1) m_22633 _22637)))
                 in
                 let r2_22638 :=
                   force(lazy(fork
                                fun _22639 (_22640) -o
                                  ((cmsort_worker_22619)
                                    (__sub__ __22620 1) n_22634 _22640)))
                 in
                 let _22641 := force(lazy(recv[U](r1_22635))) in
                 force(match _22641 with
                       | ex1UL_34 m_22642 n_22643 =>
                         lazy(let _22644 := force(lazy(recv[U](r2_22638))) in
                              force(match _22644 with
                                    | ex1UL_34 m_22645 n_22646 =>
                                      let zs1_22647 :=
                                        ((mergeU_86) m_22642 m_22645)
                                      in
                                      let zs1_22648 :=
                                        ((rwlUU_48)
                                          NULL NULL NULL NULL NULL zs1_22647)
                                      in
                                      lazy(let c_22649 :=
                                             force(((lam (x_22650) ->
                                                       lazy(send(__22622, x_22650)))
                                                     zs1_22648))
                                           in
                                           let __22651 :=
                                             force(lazy(close[false] n_22643))
                                           in
                                           let __22652 :=
                                             force(lazy(close[false] n_22646))
                                           in
                                           force(lazy(close[true] c_22649)))
                                    end))
                       end))
            end
          end
        end
      end

def cmsort_workerL_91 :=
  fun cmsort_worker_22653 (__22654) -> (zs_22655) -> (__22656) -o
    match zs_22655 with
    | nilUL_24  =>
      lazy(let c_22657 :=
             force(((lam (x_22658) -> lazy(send(__22656, x_22658)))
                     (nilUL_24 )))
           in force(lazy(close[true] c_22657)))
    | consUL_25 hd_22659 tl_22660 =>
      match tl_22660 with
      | nilUL_24  =>
        lazy(let c_22661 :=
               force(((lam (x_22662) -> lazy(send(__22656, x_22662)))
                       (consUL_25 hd_22659 (nilUL_24 ))))
             in force(lazy(close[true] c_22661)))
      | consUL_25 hd_22663 tl_22664 =>
        match (__lte__ __22654 0) with
        | true_4 =>
          lazy(let c_22665 :=
                 force(((lam (x_22666) -> lazy(send(__22656, x_22666)))
                         ((msortL_87)
                           (consUL_25 hd_22659 (consUL_25 hd_22663 tl_22664)))))
               in force(lazy(close[true] c_22665)))
        | false_5 =>
          match ((splitL_83)
                  (consUL_25 hd_22659 (consUL_25 hd_22663 tl_22664))) with
          | ex1LL_32 m_22667 n_22668 =>
            lazy(let r1_22669 :=
                   force(lazy(fork
                                fun _22670 (_22671) -o
                                  ((cmsort_worker_22653)
                                    (__sub__ __22654 1) m_22667 _22671)))
                 in
                 let r2_22672 :=
                   force(lazy(fork
                                fun _22673 (_22674) -o
                                  ((cmsort_worker_22653)
                                    (__sub__ __22654 1) n_22668 _22674)))
                 in
                 let _22675 := force(lazy(recv[L](r1_22669))) in
                 force(match _22675 with
                       | ex1LL_32 m_22676 n_22677 =>
                         lazy(let _22678 := force(lazy(recv[L](r2_22672))) in
                              force(match _22678 with
                                    | ex1LL_32 m_22679 n_22680 =>
                                      let zs1_22681 :=
                                        ((mergeL_85) m_22676 m_22679)
                                      in
                                      let zs1_22682 :=
                                        ((rwlLL_45)
                                          NULL NULL NULL NULL NULL zs1_22681)
                                      in
                                      lazy(let c_22683 :=
                                             force(((lam (x_22684) ->
                                                       lazy(send(__22656, x_22684)))
                                                     zs1_22682))
                                           in
                                           let __22685 :=
                                             force(lazy(close[false] n_22677))
                                           in
                                           let __22686 :=
                                             force(lazy(close[false] n_22680))
                                           in
                                           force(lazy(close[true] c_22683)))
                                    end))
                       end))
            end
          end
        end
      end

def cmsortU_94 :=
  fun cmsort_22687 (zs_22688) ->
    lazy(let c_22689 :=
           force(lazy(fork
                        fun _22690 (_22691) -o
                          ((cmsort_workerU_92) 4 zs_22688 _22691)))
         in
         let _22692 := force(lazy(recv[U](c_22689))) in
         force(match _22692 with
               | ex1UL_34 m_22693 n_22694 =>
                 lazy(let __22695 := force(lazy(close[false] n_22694)) in
                      force(lazy(m_22693)))
               end))

def cmsortL_93 :=
  fun cmsort_22696 (zs_22697) ->
    lazy(let c_22698 :=
           force(lazy(fork
                        fun _22699 (_22700) -o
                          ((cmsort_workerL_91) 4 zs_22697 _22700)))
         in
         let _22701 := force(lazy(recv[L](c_22698))) in
         force(match _22701 with
               | ex1LL_32 m_22702 n_22703 =>
                 lazy(let __22704 := force(lazy(close[false] n_22703)) in
                      force(lazy(m_22702)))
               end))

def mklistU_96 :=
  fun mklist_22705 (n_22706) ->
    match (__lte__ n_22706 0) with
    | true_4 => (nilUU_26 )
    | false_5 => (consUU_27 n_22706 ((mklist_22705) (__sub__ n_22706 1)))
    end

def mklistL_95 :=
  fun mklist_22707 (n_22708) ->
    match (__lte__ n_22708 0) with
    | true_4 => (nilUL_24 )
    | false_5 => (consUL_25 n_22708 ((mklist_22707) (__sub__ n_22708 1)))
    end

def list_lenU_98 :=
  fun list_len_22709 (__22710) ->
    match __22710 with
    | nilUU_26  => 0
    | consUU_27 hd_22711 tl_22712 => (__add__ 1 ((list_len_22709) tl_22712))
    end

def list_lenL_97 :=
  fun list_len_22713 (__22714) ->
    match __22714 with
    | nilUL_24  => 0
    | consUL_25 hd_22715 tl_22716 => (__add__ 1 ((list_len_22713) tl_22716))
    end

def print_listU_100 :=
  fun print_list_22717 (__22718) ->
    match __22718 with
    | nilUU_26  => lazy(print "nil")
    | consUU_27 hd_22719 tl_22720 =>
      lazy(let __22721 := force(lazy(print ((string_of_int_32) hd_22719))) in
           let __22722 := force(lazy(print " :: ")) in
           force(((print_list_22717) tl_22720)))
    end

def print_listL_99 :=
  fun print_list_22723 (__22724) ->
    match __22724 with
    | nilUL_24  => lazy(print "nil")
    | consUL_25 hd_22725 tl_22726 =>
      lazy(let __22727 := force(lazy(print ((string_of_int_32) hd_22725))) in
           let __22728 := force(lazy(print " :: ")) in
           force(((print_list_22723) tl_22726)))
    end

def main :=
  let test_22729 := ((mklistL_95) 2000000) in
  lazy(let _22730 := force(((cmsortL_93) test_22729)) in
       force(let len_22731 := ((list_lenL_97) _22730) in
             lazy(print ((string_of_int_32) len_22731))))

[trans23 success]

-----------------------------------------

def idU_44 := lam (A_23156) -> (m_23157) -> m_23157

def idL_43 := lam (A_23158) -> (m_23159) -> m_23159

def rwlUU_48 :=
  lam (A_23160) -> (m_23161) -> (n_23162) -> (B_23163) -> (__23164) ->
  (__23165) -> __23165

def rwlUL_47 :=
  lam (A_23166) -> (m_23167) -> (n_23168) -> (B_23169) -> (__23170) ->
  (__23171) -> __23171

def rwlLU_46 :=
  lam (A_23172) -> (m_23173) -> (n_23174) -> (B_23175) -> (__23176) ->
  (__23177) -> __23177

def rwlLL_45 :=
  lam (A_23178) -> (m_23179) -> (n_23180) -> (B_23181) -> (__23182) ->
  (__23183) -> __23183

def rwrUU_52 :=
  lam (A_23184) -> (m_23185) -> (n_23186) -> (B_23187) -> (__23188) ->
  (__23189) -> __23189

def rwrUL_51 :=
  lam (A_23190) -> (m_23191) -> (n_23192) -> (B_23193) -> (__23194) ->
  (__23195) -> __23195

def rwrLU_50 :=
  lam (A_23196) -> (m_23197) -> (n_23198) -> (B_23199) -> (__23200) ->
  (__23201) -> __23201

def rwrLL_49 :=
  lam (A_23202) -> (m_23203) -> (n_23204) -> (B_23205) -> (__23206) ->
  (__23207) -> __23207

def sing_elimUU_66 := lam (A_23208) -> (x_23209) -> (__23210) -> __23210

def sing_elimUL_65 := lam (A_23211) -> (x_23212) -> (__23213) -> __23213

def sing_elimLU_64 := lam (A_23214) -> (x_23215) -> (__23216) -> !!

def sing_elimLL_63 := lam (A_23217) -> (x_23218) -> (__23219) -> __23219

def not_11 :=
  lam (__23220) ->
    match __23220 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_12 :=
  lam (__23221) -> (__23222) ->
    match __23221 with
    | true_4 =>
      match __23222 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_13 :=
  lam (__23223) -> (__23224) ->
    match __23223 with
    | true_4 => true_4
    | false_5 =>
      match __23224 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_14 :=
  lam (__23225) -> (__23226) ->
    match __23225 with
    | true_4 =>
      match __23226 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __23226 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_15 :=
  fun lte_23227 (__23228) -> (__23229) ->
    match __23228 with
    | zero_6  => true_4
    | succ_7 n_23230 =>
      match __23229 with
      | zero_6  => false_5 | succ_7 n_23231 => ((lte_23227) n_23230 n_23231)
      end
    end

def lt_16 :=
  lam (x_23232) -> (y_23233) -> ((lte_15) (succ_7 x_23232) y_23233)

def pred_17 :=
  lam (__23234) ->
    match __23234 with
    | zero_6  => (zero_6 ) | succ_7 n_23235 => n_23235
    end

def add_18 :=
  fun add_23236 (__23237) -> (__23238) ->
    match __23237 with
    | zero_6  => __23238
    | succ_7 n_23239 => (succ_7 ((add_23236) n_23239 __23238))
    end

def sub_19 :=
  fun sub_23240 (__23241) -> (__23242) ->
    match __23242 with
    | zero_6  => __23241
    | succ_7 n_23243 => ((sub_23240) ((pred_17) __23241) n_23243)
    end

def mul_20 :=
  fun mul_23244 (__23245) -> (__23246) ->
    match __23245 with
    | zero_6  => (zero_6 )
    | succ_7 n_23247 => ((add_18) __23246 ((mul_23244) n_23247 __23246))
    end

def div_21 :=
  lam (x_23248) -> (y_23249) ->
    match ((lt_16) x_23248 y_23249) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_23250 :=
        fun loop_23251 (x_23252) -> (y_23253) ->
          match ((sub_19) x_23252 ((pred_17) y_23253)) with
          | zero_6  => (zero_6 )
          | succ_7 n_23254 => (succ_7 ((loop_23251) n_23254 y_23253))
          end
      in ((loop_23250) x_23248 y_23249)
    end

def rem_22 :=
  lam (x_23255) -> (y_23256) ->
    ((sub_19) x_23255 ((mul_20) ((div_21) x_23255 y_23256) y_23256))

def free_listUU_74 :=
  fun free_list_23257 (A_23258) -> (f_23259) -> (__23260) ->
    match __23260 with
    | nilUU_26  => ttU_19
    | consUU_27 hd_23261 tl_23262 =>
      let __23263 := ((f_23259) hd_23261) in
      ((free_list_23257) NULL f_23259 tl_23262)
    end

def free_listUL_73 :=
  fun free_list_23264 (A_23265) -> (f_23266) -> (__23267) ->
    match __23267 with
    | nilUL_24  => ttU_19
    | consUL_25 hd_23268 tl_23269 =>
      let __23270 := ((f_23266) hd_23268) in
      ((free_list_23264) NULL f_23266 tl_23269)
    end

def free_listLL_71 :=
  fun free_list_23271 (A_23272) -> (f_23273) -> (__23274) ->
    match __23274 with
    | nilLL_20  => ttU_19
    | consLL_21 hd_23275 tl_23276 =>
      let __23277 := ((f_23273) hd_23275) in
      ((free_list_23271) NULL f_23273 tl_23276)
    end

def pow_26 :=
  lam (x_23278) -> (y_23279) ->
    let loop_23280 :=
      fun loop_23281 (acc_23282) -> (y_23283) ->
        match (__lte__ y_23283 0) with
        | true_4 => acc_23282
        | false_5 =>
          ((loop_23281) (__mul__ x_23278 acc_23282) (__sub__ y_23283 1))
        end
    in ((loop_23280) 1 y_23279)

def powm_27 :=
  lam (x_23284) -> (y_23285) -> (m_23286) ->
    let loop_23287 :=
      fun loop_23288 (acc_23289) -> (y_23290) ->
        match (__lte__ y_23290 0) with
        | true_4 => acc_23289
        | false_5 =>
          ((loop_23288)
            (__mod__ (__mul__ x_23284 acc_23289) m_23286) (__sub__ y_23290 1))
        end
    in ((loop_23287) 1 y_23285)

def ord_28 := lam (c_23291) -> (__ord__ c_23291)

def chr_29 := lam (i_23292) -> (__chr__ i_23292)

def str_30 := lam (c_23293) -> (__push__ "" c_23293)

def strlen_31 := lam (s_23294) -> (__size__ s_23294)

def string_of_int_32 :=
  lam (i_23295) ->
    let aux_23296 :=
      fun aux_23297 (i_23298) ->
        match (__lte__ 10 i_23298) with
        | true_4 =>
          let r_23299 := (__mod__ i_23298 10) in
          let i_23300 := (__div__ i_23298 10) in
          (__push__ ((aux_23297) i_23300)
            ((chr_29) (__add__ r_23299 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_23298 ((ord_28) 0))))
        end
    in
    match (__lte__ 0 i_23295) with
    | true_4 => ((aux_23296) i_23295)
    | false_5 => (__cat__ "~" ((aux_23296) (__neg__ i_23295)))
    end

def splitU_84 :=
  fun split_23301 (__23302) ->
    match __23302 with
    | nilUU_26  => (ex1UU_35 (nilUU_26 ) (nilUU_26 ))
    | consUU_27 hd_23303 tl_23304 =>
      match tl_23304 with
      | nilUU_26  => (ex1UU_35 (consUU_27 hd_23303 (nilUU_26 )) (nilUU_26 ))
      | consUU_27 hd_23305 tl_23306 =>
        match ((split_23301) tl_23306) with
        | ex1UU_35 m_23307 n_23308 =>
          (ex1UU_35
            (consUU_27 hd_23303 m_23307) (consUU_27 hd_23305 n_23308))
        end
      end
    end

def splitL_83 :=
  fun split_23309 (__23310) ->
    match __23310 with
    | nilUL_24  => (ex1LL_32 (nilUL_24 ) (nilUL_24 ))
    | consUL_25 hd_23311 tl_23312 =>
      match tl_23312 with
      | nilUL_24  => (ex1LL_32 (consUL_25 hd_23311 (nilUL_24 )) (nilUL_24 ))
      | consUL_25 hd_23313 tl_23314 =>
        match ((split_23309) tl_23314) with
        | ex1LL_32 m_23315 n_23316 =>
          (ex1LL_32
            (consUL_25 hd_23311 m_23315) (consUL_25 hd_23313 n_23316))
        end
      end
    end

def mergeU_86 :=
  fun merge_23317 (__23318) -> (__23319) -o
    match __23318 with
    | nilUU_26  => __23319
    | consUU_27 hd_23320 tl_23321 =>
      match __23319 with
      | nilUU_26  => (consUU_27 hd_23320 tl_23321)
      | consUU_27 hd_23322 tl_23323 =>
        match (__lte__ hd_23320 hd_23322) with
        | true_4 =>
          (consUU_27
            hd_23320 ((merge_23317) tl_23321 (consUU_27 hd_23322 tl_23323)))
        | false_5 =>
          (consUU_27
            hd_23322 ((merge_23317) (consUU_27 hd_23320 tl_23321) tl_23323))
        end
      end
    end

def mergeL_85 :=
  fun merge_23324 (__23325) -> (__23326) -o
    match __23325 with
    | nilUL_24  => __23326
    | consUL_25 hd_23327 tl_23328 =>
      match __23326 with
      | nilUL_24  => (consUL_25 hd_23327 tl_23328)
      | consUL_25 hd_23329 tl_23330 =>
        match (__lte__ hd_23327 hd_23329) with
        | true_4 =>
          (consUL_25
            hd_23327 ((merge_23324) tl_23328 (consUL_25 hd_23329 tl_23330)))
        | false_5 =>
          (consUL_25
            hd_23329 ((merge_23324) (consUL_25 hd_23327 tl_23328) tl_23330))
        end
      end
    end

def msortU_88 :=
  fun msort_23331 (__23332) ->
    match __23332 with
    | nilUU_26  => (nilUU_26 )
    | consUU_27 hd_23333 tl_23334 =>
      match tl_23334 with
      | nilUU_26  => (consUU_27 hd_23333 (nilUU_26 ))
      | consUU_27 hd_23335 tl_23336 =>
        match ((splitU_84)
                (consUU_27 hd_23333 (consUU_27 hd_23335 tl_23336))) with
        | ex1UU_35 m_23337 n_23338 =>
          ((mergeU_86) ((msort_23331) m_23337) ((msort_23331) n_23338))
        end
      end
    end

def msortL_87 :=
  fun msort_23339 (__23340) ->
    match __23340 with
    | nilUL_24  => (nilUL_24 )
    | consUL_25 hd_23341 tl_23342 =>
      match tl_23342 with
      | nilUL_24  => (consUL_25 hd_23341 (nilUL_24 ))
      | consUL_25 hd_23343 tl_23344 =>
        match ((splitL_83)
                (consUL_25 hd_23341 (consUL_25 hd_23343 tl_23344))) with
        | ex1LL_32 m_23345 n_23346 =>
          ((mergeL_85) ((msort_23339) m_23345) ((msort_23339) n_23346))
        end
      end
    end

def cmsort_workerU_92 :=
  fun cmsort_worker_23347 (__23348) -> (zs_23349) -> (__23350) -o
    match zs_23349 with
    | nilUU_26  =>
      lazy(let c_23351 := send(__23350, (nilUU_26 )) in close[true] c_23351)
    | consUU_27 hd_23352 tl_23353 =>
      match tl_23353 with
      | nilUU_26  =>
        lazy(let c_23354 := send(__23350, (consUU_27 hd_23352 (nilUU_26 )))
             in close[true] c_23354)
      | consUU_27 hd_23355 tl_23356 =>
        match (__lte__ __23348 0) with
        | true_4 =>
          lazy(let c_23357 :=
                 send(__23350, ((msortU_88)
                                 (consUU_27
                                   hd_23352 (consUU_27 hd_23355 tl_23356))))
               in close[true] c_23357)
        | false_5 =>
          match ((splitU_84)
                  (consUU_27 hd_23352 (consUU_27 hd_23355 tl_23356))) with
          | ex1UU_35 m_23358 n_23359 =>
            lazy(let r1_23360 :=
                   fork
                     lam (_23361) -o
                       ((cmsort_worker_23347)
                         (__sub__ __23348 1) m_23358 _23361)
                 in
                 let r2_23362 :=
                   fork
                     lam (_23363) -o
                       ((cmsort_worker_23347)
                         (__sub__ __23348 1) n_23359 _23363)
                 in
                 let _23364 := recv[U](r1_23360) in
                 match _23364 with
                 | ex1UL_34 m_23365 n_23366 =>
                   let _23367 := recv[U](r2_23362) in
                   match _23367 with
                   | ex1UL_34 m_23368 n_23369 =>
                     let zs1_23370 := ((mergeU_86) m_23365 m_23368) in
                     let zs1_23371 :=
                       ((rwlUU_48) NULL NULL NULL NULL NULL zs1_23370)
                     in
                     let c_23372 := send(__23350, zs1_23371) in
                     let __23373 := close[false] n_23366 in
                     let __23374 := close[false] n_23369 in
                     close[true] c_23372
                   end
                 end)
          end
        end
      end
    end

def cmsort_workerL_91 :=
  fun cmsort_worker_23375 (__23376) -> (zs_23377) -> (__23378) -o
    match zs_23377 with
    | nilUL_24  =>
      lazy(let c_23379 := send(__23378, (nilUL_24 )) in close[true] c_23379)
    | consUL_25 hd_23380 tl_23381 =>
      match tl_23381 with
      | nilUL_24  =>
        lazy(let c_23382 := send(__23378, (consUL_25 hd_23380 (nilUL_24 )))
             in close[true] c_23382)
      | consUL_25 hd_23383 tl_23384 =>
        match (__lte__ __23376 0) with
        | true_4 =>
          lazy(let c_23385 :=
                 send(__23378, ((msortL_87)
                                 (consUL_25
                                   hd_23380 (consUL_25 hd_23383 tl_23384))))
               in close[true] c_23385)
        | false_5 =>
          match ((splitL_83)
                  (consUL_25 hd_23380 (consUL_25 hd_23383 tl_23384))) with
          | ex1LL_32 m_23386 n_23387 =>
            lazy(let r1_23388 :=
                   fork
                     lam (_23389) -o
                       ((cmsort_worker_23375)
                         (__sub__ __23376 1) m_23386 _23389)
                 in
                 let r2_23390 :=
                   fork
                     lam (_23391) -o
                       ((cmsort_worker_23375)
                         (__sub__ __23376 1) n_23387 _23391)
                 in
                 let _23392 := recv[L](r1_23388) in
                 match _23392 with
                 | ex1LL_32 m_23393 n_23394 =>
                   let _23395 := recv[L](r2_23390) in
                   match _23395 with
                   | ex1LL_32 m_23396 n_23397 =>
                     let zs1_23398 := ((mergeL_85) m_23393 m_23396) in
                     let zs1_23399 :=
                       ((rwlLL_45) NULL NULL NULL NULL NULL zs1_23398)
                     in
                     let c_23400 := send(__23378, zs1_23399) in
                     let __23401 := close[false] n_23394 in
                     let __23402 := close[false] n_23397 in
                     close[true] c_23400
                   end
                 end)
          end
        end
      end
    end

def cmsortU_94 :=
  lam (zs_23403) ->
    lazy(let c_23404 :=
           fork lam (_23405) -o ((cmsort_workerU_92) 4 zs_23403 _23405)
         in
         let _23406 := recv[U](c_23404) in
         match _23406 with
         | ex1UL_34 m_23407 n_23408 =>
           let __23409 := close[false] n_23408 in m_23407
         end)

def cmsortL_93 :=
  lam (zs_23410) ->
    lazy(let c_23411 :=
           fork lam (_23412) -o ((cmsort_workerL_91) 4 zs_23410 _23412)
         in
         let _23413 := recv[L](c_23411) in
         match _23413 with
         | ex1LL_32 m_23414 n_23415 =>
           let __23416 := close[false] n_23415 in m_23414
         end)

def mklistU_96 :=
  fun mklist_23417 (n_23418) ->
    match (__lte__ n_23418 0) with
    | true_4 => (nilUU_26 )
    | false_5 => (consUU_27 n_23418 ((mklist_23417) (__sub__ n_23418 1)))
    end

def mklistL_95 :=
  fun mklist_23419 (n_23420) ->
    match (__lte__ n_23420 0) with
    | true_4 => (nilUL_24 )
    | false_5 => (consUL_25 n_23420 ((mklist_23419) (__sub__ n_23420 1)))
    end

def list_lenU_98 :=
  fun list_len_23421 (__23422) ->
    match __23422 with
    | nilUU_26  => 0
    | consUU_27 hd_23423 tl_23424 => (__add__ 1 ((list_len_23421) tl_23424))
    end

def list_lenL_97 :=
  fun list_len_23425 (__23426) ->
    match __23426 with
    | nilUL_24  => 0
    | consUL_25 hd_23427 tl_23428 => (__add__ 1 ((list_len_23425) tl_23428))
    end

def print_listU_100 :=
  fun print_list_23429 (__23430) ->
    match __23430 with
    | nilUU_26  => lazy(print "nil")
    | consUU_27 hd_23431 tl_23432 =>
      lazy(let __23433 := print ((string_of_int_32) hd_23431) in
           let __23434 := print " :: " in
           force(((print_list_23429) tl_23432)))
    end

def print_listL_99 :=
  fun print_list_23435 (__23436) ->
    match __23436 with
    | nilUL_24  => lazy(print "nil")
    | consUL_25 hd_23437 tl_23438 =>
      lazy(let __23439 := print ((string_of_int_32) hd_23437) in
           let __23440 := print " :: " in
           force(((print_list_23435) tl_23438)))
    end

def main :=
  let test_23441 := ((mklistL_95) 2000000) in
  lazy(let _23442 := force(((cmsortL_93) test_23441)) in
       let len_23443 := ((list_lenL_97) _23442) in
       print ((string_of_int_32) len_23443))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_26() => {
      x_167 := ttU_19;
    }
    consUU_27(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_24() => {
      x_177 := ttU_19;
    }
    consUL_25(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_20() => {
      x_187 := ttU_19;
    }
    consLL_21(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_26() => {
      x_267 := mkconstr(nilUU_26, []);
      x_268 := mkconstr(nilUU_26, []);
      x_269 := mkconstr(ex1UU_35, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_27(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_26() => {
          x_273 := mkconstr(nilUU_26, []);
          x_274 := mkconstr(consUU_27, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_26, []);
          x_276 := mkconstr(ex1UU_35, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_27(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_35(m_281, n_282) => {
              x_283 := mkconstr(consUU_27, [hd_270, m_281]);
              x_284 := mkconstr(consUU_27, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_35, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_24() => {
      x_289 := mkconstr(nilUL_24, []);
      x_290 := mkconstr(nilUL_24, []);
      x_291 := mkconstr(ex1LL_32, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_25(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_24() => {
          x_295 := mkconstr(nilUL_24, []);
          x_296 := mkconstr(consUL_25, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_24, []);
          x_298 := mkconstr(ex1LL_32, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_25(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_32(m_303, n_304) => {
              x_305 := mkconstr(consUL_25, [hd_292, m_303]);
              x_306 := mkconstr(consUL_25, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_32, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_26() => {
      x_311 := __310;
    }
    consUU_27(hd_312, tl_313) => {
      match[U](__310){
        nilUU_26() => {
          x_315 := mkconstr(consUU_27, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_27(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_27, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_27, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_27, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_27, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_24() => {
      x_329 := __328;
    }
    consUL_25(hd_330, tl_331) => {
      match[L](__328){
        nilUL_24() => {
          x_333 := mkconstr(consUL_25, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_25(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_25, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_25, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_25, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_25, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_26() => {
      x_347 := mkconstr(nilUU_26, []);
      x_346 := x_347;
    }
    consUU_27(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_26() => {
          x_351 := mkconstr(nilUU_26, []);
          x_352 := mkconstr(consUU_27, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_27(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_27, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_27, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_35(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_24() => {
      x_367 := mkconstr(nilUL_24, []);
      x_366 := x_367;
    }
    consUL_25(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_24() => {
          x_371 := mkconstr(nilUL_24, []);
          x_372 := mkconstr(consUL_25, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_25(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_25, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_25, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_32(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_26() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_26, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_27(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_26() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_26, []);
              x_401 := mkconstr(consUU_27, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_27(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_27, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_27, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_27, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_27, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_35(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_34(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_34(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                            }
                          }
                          x_437 := x_442;
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_24() => {
      x_461 :=
        lazy {
          x_464 := mkconstr(nilUL_24, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_25(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_24() => {
          x_469 :=
            lazy {
              x_472 := mkconstr(nilUL_24, []);
              x_473 := mkconstr(consUL_25, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_25(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := mkconstr(consUL_25, [hd_475, tl_476]);
                  x_484 := mkconstr(consUL_25, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := mkconstr(consUL_25, [hd_475, tl_476]);
              x_489 := mkconstr(consUL_25, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_32(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_32(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_32(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                            }
                          }
                          x_509 := x_514;
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_34(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_32(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_26, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_27, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_24, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_25, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_26() => {
      x_578 := 0;
    }
    consUU_27(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_24() => {
      x_585 := 0;
    }
    consUL_25(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_26() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_27(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_24() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
    }
    consUL_25(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_26() => {
      x_167 := ttU_19;
    }
    consUU_27(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_24() => {
      x_177 := ttU_19;
      free(__176);
    }
    consUL_25(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_20() => {
      x_187 := ttU_19;
      free(__186);
    }
    consLL_21(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_26() => {
      x_267 := mkconstr(nilUU_26, []);
      x_268 := mkconstr(nilUU_26, []);
      x_269 := mkconstr(ex1UU_35, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_27(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_26() => {
          x_273 := mkconstr(nilUU_26, []);
          x_274 := mkconstr(consUU_27, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_26, []);
          x_276 := mkconstr(ex1UU_35, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_27(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_35(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_27, [hd_270, m_281]);
              x_284 := mkconstr(consUU_27, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_35, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_24() => {
      x_289 := reconstr(__287, nilUL_24, []);
      x_290 := mkconstr(nilUL_24, []);
      x_291 := mkconstr(ex1LL_32, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_25(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_24() => {
          x_295 := reconstr(tl_293, nilUL_24, []);
          x_296 := reconstr(__287, consUL_25, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_24, []);
          x_298 := mkconstr(ex1LL_32, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_25(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_32(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_25, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_25, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_32, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_26() => {
      x_311 := __310;
    }
    consUU_27(hd_312, tl_313) => {
      match[U](__310){
        nilUU_26() => {
          x_315 := mkconstr(consUU_27, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_27(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_27, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_27, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_27, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_27, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_24() => {
      x_329 := __328;
      free(__327);
    }
    consUL_25(hd_330, tl_331) => {
      match[L](__328){
        nilUL_24() => {
          x_333 := reconstr(__327, consUL_25, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_25(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_25, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_25, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_25, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_25, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_26() => {
      x_347 := mkconstr(nilUU_26, []);
      x_346 := x_347;
    }
    consUU_27(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_26() => {
          x_351 := mkconstr(nilUU_26, []);
          x_352 := mkconstr(consUU_27, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_27(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_27, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_27, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_35(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_24() => {
      x_367 := reconstr(__365, nilUL_24, []);
      x_366 := x_367;
    }
    consUL_25(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_24() => {
          x_371 := reconstr(tl_369, nilUL_24, []);
          x_372 := reconstr(__365, consUL_25, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_25(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_25, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_25, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_32(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_26() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_26, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_27(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_26() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_26, []);
              x_401 := mkconstr(consUU_27, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_27(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_27, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_27, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_27, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_27, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_35(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_34(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_34(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                              free(_440);
                            }
                          }
                          x_437 := x_442;
                          free(_435);
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                  free(x_415);
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_24() => {
      x_461 :=
        lazy {
          x_464 := reconstr(zs_458, nilUL_24, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_25(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_24() => {
          x_469 :=
            lazy {
              x_472 := reconstr(tl_467, nilUL_24, []);
              x_473 := reconstr(zs_458, consUL_25, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_25(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := reconstr(tl_467, consUL_25, [hd_475, tl_476]);
                  x_484 := reconstr(zs_458, consUL_25, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := reconstr(tl_467, consUL_25, [hd_475, tl_476]);
              x_489 := reconstr(zs_458, consUL_25, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_32(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_32(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_32(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                              free(_512);
                            }
                          }
                          x_509 := x_514;
                          free(_507);
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                  free(x_487);
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_34(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
          free(_537);
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_32(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
          free(_553);
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_26, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_27, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_24, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_25, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_26() => {
      x_578 := 0;
    }
    consUU_27(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_24() => {
      x_585 := 0;
      free(__584);
    }
    consUL_25(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
      free(__584);
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_26() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_27(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_24() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
      free(__608);
    }
    consUL_25(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
      free(__608);
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_634(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_635(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_636 := fn0_idU_634(A_2, m_3);
  return x_636;
}

fn fn0_idL_637(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_638(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_639 := fn0_idL_637(A_5, m_6);
  return x_639;
}

fn fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_641(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_642 := fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13);
  return x_642;
}

fn fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_644(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_645 := fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20);
  return x_645;
}

fn fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_647(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_648 := fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27);
  return x_648;
}

fn fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_650(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_651 := fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34);
  return x_651;
}

fn fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_653(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_654 := fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41);
  return x_654;
}

fn fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_656(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_657 := fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48);
  return x_657;
}

fn fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_659(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_660 := fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55);
  return x_660;
}

fn fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_662(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_663 := fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62);
  return x_663;
}

fn fn0_sing_elimUU_664(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_665(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_666 := fn0_sing_elimUU_664(A_64, x_65, __66);
  return x_666;
}

fn fn0_sing_elimUL_667(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_668(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_669 := fn0_sing_elimUL_667(A_68, x_69, __70);
  return x_669;
}

fn fn0_sing_elimLU_670(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_671(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_672 := fn0_sing_elimLU_670(A_72, x_73, __74);
  return x_672;
}

fn fn0_sing_elimLL_673(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_674(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_675 := fn0_sing_elimLL_673(A_76, x_77, __78);
  return x_675;
}

fn fn0_not_676(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_677(env) {
  __80 := env[1];
  x_678 := fn0_not_676(__80);
  return x_678;
}

fn fn0_and_679(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_680(env) {
  __83 := env[1];
  __84 := env[2];
  x_681 := fn0_and_679(__83, __84);
  return x_681;
}

fn fn0_or_682(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_683(env) {
  __88 := env[1];
  __89 := env[2];
  x_684 := fn0_or_682(__88, __89);
  return x_684;
}

fn fn0_xor_685(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_686(env) {
  __93 := env[1];
  __94 := env[2];
  x_687 := fn0_xor_685(__93, __94);
  return x_687;
}

fn fn0_lte_688(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_688(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_689(env) {
  __99 := env[1];
  __100 := env[2];
  x_690 := fn0_lte_688(__99, __100);
  return x_690;
}

fn fn0_lt_691(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_688(x_110, y_108);
  return x_109;
}

fn fn1_lt_692(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_693 := fn0_lt_691(x_107, y_108);
  return x_693;
}

fn fn0_pred_694(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_695(env) {
  __112 := env[1];
  x_696 := fn0_pred_694(__112);
  return x_696;
}

fn fn0_add_697(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_697(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_698(env) {
  __117 := env[1];
  __118 := env[2];
  x_699 := fn0_add_697(__117, __118);
  return x_699;
}

fn fn0_sub_700(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_694(__124);
      x_128 := fn0_sub_700(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_701(env) {
  __124 := env[1];
  __125 := env[2];
  x_702 := fn0_sub_700(__124, __125);
  return x_702;
}

fn fn0_mul_703(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_703(n_135, __132);
      x_136 := fn0_add_697(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_704(env) {
  __131 := env[1];
  __132 := env[2];
  x_705 := fn0_mul_703(__131, __132);
  return x_705;
}

fn fn0_div_706(x_139, y_140) {
  x_142 := fn0_lt_691(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_708, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_712, loop_144, x_139);
      appc(x_713, x_712, y_140);
      move1(x_156, x_713);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_707(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_715 := fn0_div_706(x_139, y_140);
  return x_715;
}

fn fn0_rem_716(x_158, y_159) {
  x_162 := fn0_div_706(x_158, y_159);
  x_161 := fn0_mul_703(x_162, y_159);
  x_160 := fn0_sub_700(x_158, x_161);
  return x_160;
}

fn fn1_rem_717(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_718 := fn0_rem_716(x_158, y_159);
  return x_718;
}

fn fn0_free_listUU_719(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_26 => {
      move1(x_167, ttU_19);
      break;
    }
    consUU_27 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_721, f_165, hd_168);
      move1(x_171, x_721);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_719(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_720(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_723 := fn0_free_listUU_719(A_164, f_165, __166);
  return x_723;
}

fn fn0_free_listUL_724(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_24 => {
      move1(x_177, ttU_19);
      free(__176);
      break;
    }
    consUL_25 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_726, f_175, hd_178);
      move1(x_181, x_726);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_724(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_725(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_728 := fn0_free_listUL_724(A_174, f_175, __176);
  return x_728;
}

fn fn0_free_listLL_729(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_20 => {
      move1(x_187, ttU_19);
      free(__186);
      break;
    }
    consLL_21 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_731, f_185, hd_188);
      move1(x_191, x_731);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_729(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_730(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_733 := fn0_free_listLL_729(A_184, f_185, __186);
  return x_733;
}

fn fn0_pow_734(x_194, y_195) {
  mkclo1(x_197, fn1_loop_736, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_740, loop_196, 1);
  appc(x_741, x_740, y_195);
  move1(x_206, x_741);
  return x_206;
}

fn fn1_pow_735(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_743 := fn0_pow_734(x_194, y_195);
  return x_743;
}

fn fn0_powm_744(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_746, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_750, loop_211, 1);
  appc(x_751, x_750, y_209);
  move1(x_222, x_751);
  return x_222;
}

fn fn1_powm_745(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_753 := fn0_powm_744(x_208, y_209, m_210);
  return x_753;
}

fn fn0_ord_754(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_755(env) {
  c_224 := env[1];
  x_756 := fn0_ord_754(c_224);
  return x_756;
}

fn fn0_chr_757(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_758(env) {
  i_227 := env[1];
  x_759 := fn0_chr_757(i_227);
  return x_759;
}

fn fn0_str_760(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_761(env) {
  c_230 := env[1];
  x_762 := fn0_str_760(c_230);
  return x_762;
}

fn fn0_strlen_763(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_764(env) {
  s_234 := env[1];
  x_765 := fn0_strlen_763(s_234);
  return x_765;
}

fn fn0_string_of_int_766(i_237) {
  mkclo1(x_239, fn1_aux_768, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_771, aux_238, i_237);
      move1(x_259, x_771);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_773, aux_238, x_263);
      move1(x_262, x_773);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_767(env) {
  i_237 := env[1];
  x_775 := fn0_string_of_int_766(i_237);
  return x_775;
}

fn fn0_splitU_776(__265) {
  switch(ctagof(__265)){
    nilUU_26 => {
      mkbox(x_267, nilUU_26, 0);
      mkbox(x_268, nilUU_26, 0);
      mkbox(x_269, ex1UU_35, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_27 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_26 => {
          mkbox(x_273, nilUU_26, 0);
          mkbox(x_274, consUU_27, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_26, 0);
          mkbox(x_276, ex1UU_35, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_27 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_776(tl_278);
          switch(ctagof(x_280)){
            ex1UU_35 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_27);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_27, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_35, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_777(env) {
  __265 := env[1];
  x_778 := fn0_splitU_776(__265);
  return x_778;
}

fn fn0_splitL_779(__287) {
  switch(ctagof(__287)){
    nilUL_24 => {
      rebox(x_289, __287, nilUL_24);
      mkbox(x_290, nilUL_24, 0);
      mkbox(x_291, ex1LL_32, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_25 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_24 => {
          rebox(x_295, tl_293, nilUL_24);
          rebox(x_296, __287, consUL_25);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_24, 0);
          mkbox(x_298, ex1LL_32, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_25 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_779(tl_300);
          switch(ctagof(x_302)){
            ex1LL_32 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_25);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_25);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_32);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_780(env) {
  __287 := env[1];
  x_781 := fn0_splitL_779(__287);
  return x_781;
}

fn fn0_mergeU_782(__309, __310) {
  switch(ctagof(__309)){
    nilUU_26 => {
      move1(x_311, __310);
      break;
    }
    consUU_27 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_26 => {
          mkbox(x_315, consUU_27, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_27 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_27, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_782(tl_313, x_321);
              mkbox(x_322, consUU_27, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_27, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_782(x_324, tl_317);
              mkbox(x_325, consUU_27, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_783(env) {
  __309 := env[1];
  __310 := env[2];
  x_784 := fn0_mergeU_782(__309, __310);
  return x_784;
}

fn fn0_mergeL_785(__327, __328) {
  switch(ctagof(__327)){
    nilUL_24 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_25 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_24 => {
          rebox(x_333, __327, consUL_25);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_25 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_25);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_785(tl_331, x_339);
              rebox(x_340, __327, consUL_25);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_25);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_785(x_342, tl_335);
              rebox(x_343, __327, consUL_25);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_786(env) {
  __327 := env[1];
  __328 := env[2];
  x_787 := fn0_mergeL_785(__327, __328);
  return x_787;
}

fn fn0_msortU_788(__345) {
  switch(ctagof(__345)){
    nilUU_26 => {
      mkbox(x_347, nilUU_26, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_27 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_26 => {
          mkbox(x_351, nilUU_26, 0);
          mkbox(x_352, consUU_27, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_27 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_27, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_27, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_776(x_358);
          switch(ctagof(x_356)){
            ex1UU_35 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_788(m_359);
              x_363 := fn0_msortU_788(n_360);
              x_361 := fn0_mergeU_782(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_789(env) {
  __345 := env[1];
  x_790 := fn0_msortU_788(__345);
  return x_790;
}

fn fn0_msortL_791(__365) {
  switch(ctagof(__365)){
    nilUL_24 => {
      rebox(x_367, __365, nilUL_24);
      move1(x_366, x_367);
      break;
    }
    consUL_25 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_24 => {
          rebox(x_371, tl_369, nilUL_24);
          rebox(x_372, __365, consUL_25);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_25 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_25);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_25);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_779(x_378);
          switch(ctagof(x_376)){
            ex1LL_32 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_791(m_379);
              x_383 := fn0_msortL_791(n_380);
              x_381 := fn0_mergeL_785(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_792(env) {
  __365 := env[1];
  x_793 := fn0_msortL_791(__365);
  return x_793;
}

fn fn0_cmsort_workerU_794(__385, zs_386, __387) {
  switch(ctagof(zs_386)){
    nilUU_26 => {
      lazy(x_389, lazy__796, 1);
      setlazy(x_389, __387, 0);
      move1(x_388, x_389);
      break;
    }
    consUU_27 => {
      getbox(hd_394, zs_386, 0);
      getbox(tl_395, zs_386, 1);
      switch(ctagof(tl_395)){
        nilUU_26 => {
          lazy(x_397, lazy__797, 2);
          setlazy(x_397, __387, 0);
          setlazy(x_397, hd_394, 1);
          move1(x_396, x_397);
          break;
        }
        consUU_27 => {
          getbox(hd_403, tl_395, 0);
          getbox(tl_404, tl_395, 1);
          lte(x_406, __385, 0);
          switch(x_406){
            true_4 => {
              lazy(x_407, lazy__798, 5);
              setlazy(x_407, msortU_344, 0);
              setlazy(x_407, __387, 1);
              setlazy(x_407, hd_394, 2);
              setlazy(x_407, hd_403, 3);
              setlazy(x_407, tl_404, 4);
              move1(x_405, x_407);
              break;
            }
            false_5 => {
              mkbox(x_416, consUU_27, 2);
              setbox(x_416, hd_403, 0);
              setbox(x_416, tl_404, 1);
              mkbox(x_417, consUU_27, 2);
              setbox(x_417, hd_394, 0);
              setbox(x_417, x_416, 1);
              x_415 := fn0_splitU_776(x_417);
              switch(ctagof(x_415)){
                ex1UU_35 => {
                  getbox(m_418, x_415, 0);
                  getbox(n_419, x_415, 1);
                  lazy(x_420, lazy__799, 7);
                  setlazy(x_420, rwlUU_7, 0);
                  setlazy(x_420, mergeU_308, 1);
                  setlazy(x_420, cmsort_workerU_384, 2);
                  setlazy(x_420, __385, 3);
                  setlazy(x_420, __387, 4);
                  setlazy(x_420, m_418, 5);
                  setlazy(x_420, n_419, 6);
                  move1(x_414, x_420);
                  free(x_415);
                  break;
                }
              }
              move1(x_405, x_414);
              break;
            }
          }
          move1(x_396, x_405);
          break;
        }
      }
      move1(x_388, x_396);
      break;
    }
  }
  return x_388;
}

fn fn1_cmsort_workerU_795(env) {
  __385 := env[1];
  zs_386 := env[2];
  __387 := env[3];
  x_802 := fn0_cmsort_workerU_794(__385, zs_386, __387);
  return x_802;
}

fn fn0_cmsort_workerL_803(__457, zs_458, __459) {
  switch(ctagof(zs_458)){
    nilUL_24 => {
      lazy(x_461, lazy__805, 2);
      setlazy(x_461, zs_458, 0);
      setlazy(x_461, __459, 1);
      move1(x_460, x_461);
      break;
    }
    consUL_25 => {
      getbox(hd_466, zs_458, 0);
      getbox(tl_467, zs_458, 1);
      switch(ctagof(tl_467)){
        nilUL_24 => {
          lazy(x_469, lazy__806, 4);
          setlazy(x_469, zs_458, 0);
          setlazy(x_469, __459, 1);
          setlazy(x_469, hd_466, 2);
          setlazy(x_469, tl_467, 3);
          move1(x_468, x_469);
          break;
        }
        consUL_25 => {
          getbox(hd_475, tl_467, 0);
          getbox(tl_476, tl_467, 1);
          lte(x_478, __457, 0);
          switch(x_478){
            true_4 => {
              lazy(x_479, lazy__807, 7);
              setlazy(x_479, msortL_364, 0);
              setlazy(x_479, zs_458, 1);
              setlazy(x_479, __459, 2);
              setlazy(x_479, hd_466, 3);
              setlazy(x_479, tl_467, 4);
              setlazy(x_479, hd_475, 5);
              setlazy(x_479, tl_476, 6);
              move1(x_477, x_479);
              break;
            }
            false_5 => {
              rebox(x_488, tl_467, consUL_25);
              setbox(x_488, hd_475, 0);
              setbox(x_488, tl_476, 1);
              rebox(x_489, zs_458, consUL_25);
              setbox(x_489, hd_466, 0);
              setbox(x_489, x_488, 1);
              x_487 := fn0_splitL_779(x_489);
              switch(ctagof(x_487)){
                ex1LL_32 => {
                  getbox(m_490, x_487, 0);
                  getbox(n_491, x_487, 1);
                  lazy(x_492, lazy__808, 7);
                  setlazy(x_492, rwlLL_28, 0);
                  setlazy(x_492, mergeL_326, 1);
                  setlazy(x_492, cmsort_workerL_456, 2);
                  setlazy(x_492, __457, 3);
                  setlazy(x_492, __459, 4);
                  setlazy(x_492, m_490, 5);
                  setlazy(x_492, n_491, 6);
                  move1(x_486, x_492);
                  free(x_487);
                  break;
                }
              }
              move1(x_477, x_486);
              break;
            }
          }
          move1(x_468, x_477);
          break;
        }
      }
      move1(x_460, x_468);
      break;
    }
  }
  return x_460;
}

fn fn1_cmsort_workerL_804(env) {
  __457 := env[1];
  zs_458 := env[2];
  __459 := env[3];
  x_811 := fn0_cmsort_workerL_803(__457, zs_458, __459);
  return x_811;
}

fn fn0_cmsortU_812(zs_529) {
  lazy(x_530, lazy__814, 2);
  setlazy(x_530, cmsort_workerU_384, 0);
  setlazy(x_530, zs_529, 1);
  return x_530;
}

fn fn1_cmsortU_813(env) {
  zs_529 := env[1];
  x_816 := fn0_cmsortU_812(zs_529);
  return x_816;
}

fn fn0_cmsortL_817(zs_545) {
  lazy(x_546, lazy__819, 2);
  setlazy(x_546, cmsort_workerL_456, 0);
  setlazy(x_546, zs_545, 1);
  return x_546;
}

fn fn1_cmsortL_818(env) {
  zs_545 := env[1];
  x_821 := fn0_cmsortL_817(zs_545);
  return x_821;
}

fn fn0_mklistU_822(n_561) {
  lte(x_563, n_561, 0);
  switch(x_563){
    true_4 => {
      mkbox(x_564, nilUU_26, 0);
      move1(x_562, x_564);
      break;
    }
    false_5 => {
      sub(x_566, n_561, 1);
      x_565 := fn0_mklistU_822(x_566);
      mkbox(x_567, consUU_27, 2);
      setbox(x_567, n_561, 0);
      setbox(x_567, x_565, 1);
      move1(x_562, x_567);
      break;
    }
  }
  return x_562;
}

fn fn1_mklistU_823(env) {
  n_561 := env[1];
  x_824 := fn0_mklistU_822(n_561);
  return x_824;
}

fn fn0_mklistL_825(n_569) {
  lte(x_571, n_569, 0);
  switch(x_571){
    true_4 => {
      mkbox(x_572, nilUL_24, 0);
      move1(x_570, x_572);
      break;
    }
    false_5 => {
      sub(x_574, n_569, 1);
      x_573 := fn0_mklistL_825(x_574);
      mkbox(x_575, consUL_25, 2);
      setbox(x_575, n_569, 0);
      setbox(x_575, x_573, 1);
      move1(x_570, x_575);
      break;
    }
  }
  return x_570;
}

fn fn1_mklistL_826(env) {
  n_569 := env[1];
  x_827 := fn0_mklistL_825(n_569);
  return x_827;
}

fn fn0_list_lenU_828(__577) {
  switch(ctagof(__577)){
    nilUU_26 => {
      move1(x_578, 0);
      break;
    }
    consUU_27 => {
      getbox(hd_579, __577, 0);
      getbox(tl_580, __577, 1);
      x_582 := fn0_list_lenU_828(tl_580);
      add(x_581, 1, x_582);
      move1(x_578, x_581);
      break;
    }
  }
  return x_578;
}

fn fn1_list_lenU_829(env) {
  __577 := env[1];
  x_830 := fn0_list_lenU_828(__577);
  return x_830;
}

fn fn0_list_lenL_831(__584) {
  switch(ctagof(__584)){
    nilUL_24 => {
      move1(x_585, 0);
      free(__584);
      break;
    }
    consUL_25 => {
      getbox(hd_586, __584, 0);
      getbox(tl_587, __584, 1);
      x_589 := fn0_list_lenL_831(tl_587);
      add(x_588, 1, x_589);
      move1(x_585, x_588);
      free(__584);
      break;
    }
  }
  return x_585;
}

fn fn1_list_lenL_832(env) {
  __584 := env[1];
  x_833 := fn0_list_lenL_831(__584);
  return x_833;
}

fn fn0_print_listU_834(__591) {
  switch(ctagof(__591)){
    nilUU_26 => {
      lazy(x_593, lazy__836, 0);
      move1(x_592, x_593);
      break;
    }
    consUU_27 => {
      getbox(hd_596, __591, 0);
      getbox(tl_597, __591, 1);
      lazy(x_598, lazy__837, 4);
      setlazy(x_598, string_of_int_236, 0);
      setlazy(x_598, print_listU_590, 1);
      setlazy(x_598, hd_596, 2);
      setlazy(x_598, tl_597, 3);
      move1(x_592, x_598);
      break;
    }
  }
  return x_592;
}

fn fn1_print_listU_835(env) {
  __591 := env[1];
  x_838 := fn0_print_listU_834(__591);
  return x_838;
}

fn fn0_print_listL_839(__608) {
  switch(ctagof(__608)){
    nilUL_24 => {
      lazy(x_610, lazy__841, 0);
      move1(x_609, x_610);
      free(__608);
      break;
    }
    consUL_25 => {
      getbox(hd_613, __608, 0);
      getbox(tl_614, __608, 1);
      lazy(x_615, lazy__842, 4);
      setlazy(x_615, string_of_int_236, 0);
      setlazy(x_615, print_listL_607, 1);
      setlazy(x_615, hd_613, 2);
      setlazy(x_615, tl_614, 3);
      move1(x_609, x_615);
      free(__608);
      break;
    }
  }
  return x_609;
}

fn fn1_print_listL_840(env) {
  __608 := env[1];
  x_843 := fn0_print_listL_839(__608);
  return x_843;
}

fn lazy__845(env) {
  string_of_int_236 := env[0];
  cmsortL_544 := env[1];
  list_lenL_583 := env[2];
  test_624 := env[3];
  x_629 := fn0_cmsortL_817(test_624);
  force(x_628, x_629);
  free(x_629);
  move1(_627, x_628);
  x_631 := fn0_list_lenL_831(_627);
  move1(len_630, x_631);
  x_633 := fn0_string_of_int_766(len_630);
  print(x_632, x_633);
  return x_632;
}

fn lazy__842(env) {
  string_of_int_236 := env[0];
  print_listL_607 := env[1];
  hd_613 := env[2];
  tl_614 := env[3];
  x_618 := fn0_string_of_int_766(hd_613);
  print(x_617, x_618);
  move1(__616, x_617);
  str(x_621, " :: ")
  print(x_620, x_621);
  move1(__619, x_620);
  x_623 := fn0_print_listL_839(tl_614);
  force(x_622, x_623);
  free(x_623);
  return x_622;
}

fn lazy__841(env) {
  str(x_612, "nil")
  print(x_611, x_612);
  return x_611;
}

fn lazy__837(env) {
  string_of_int_236 := env[0];
  print_listU_590 := env[1];
  hd_596 := env[2];
  tl_597 := env[3];
  x_601 := fn0_string_of_int_766(hd_596);
  print(x_600, x_601);
  move1(__599, x_600);
  str(x_604, " :: ")
  print(x_603, x_604);
  move1(__602, x_603);
  x_606 := fn0_print_listU_834(tl_597);
  force(x_605, x_606);
  free(x_606);
  return x_605;
}

fn lazy__836(env) {
  str(x_595, "nil")
  print(x_594, x_595);
  return x_594;
}

fn lazy__819(env) {
  cmsort_workerL_456 := env[0];
  zs_545 := env[1];
  mkclo1(x_549, fn1_lam_820, fvc:=2, argc:=1);
  setclo(x_549, cmsort_workerL_456, 1);
  setclo(x_549, zs_545, 2);
  fork(x_548, x_549);
  move1(c_547, x_548);
  recv1(x_554, c_547);
  move1(_553, x_554);
  switch(ctagof(_553)){
    ex1LL_32 => {
      getbox(m_556, _553, 0);
      getbox(n_557, _553, 1);
      close1(x_559, n_557);
      move1(__558, x_559);
      move1(x_555, m_556);
      free(_553);
      break;
    }
  }
  return x_555;
}

fn fn1_lam_820(env) {
  lam_550 := env[0];
  cmsort_workerL_456 := env[1];
  zs_545 := env[2];
  _551 := env[3];
  x_552 := fn0_cmsort_workerL_803(4, zs_545, _551);
  return x_552;
}

fn lazy__814(env) {
  cmsort_workerU_384 := env[0];
  zs_529 := env[1];
  mkclo1(x_533, fn1_lam_815, fvc:=2, argc:=1);
  setclo(x_533, cmsort_workerU_384, 1);
  setclo(x_533, zs_529, 2);
  fork(x_532, x_533);
  move1(c_531, x_532);
  recv0(x_538, c_531);
  move1(_537, x_538);
  switch(ctagof(_537)){
    ex1UL_34 => {
      getbox(m_540, _537, 0);
      getbox(n_541, _537, 1);
      close1(x_543, n_541);
      move1(__542, x_543);
      move1(x_539, m_540);
      free(_537);
      break;
    }
  }
  return x_539;
}

fn fn1_lam_815(env) {
  lam_534 := env[0];
  cmsort_workerU_384 := env[1];
  zs_529 := env[2];
  _535 := env[3];
  x_536 := fn0_cmsort_workerU_794(4, zs_529, _535);
  return x_536;
}

fn lazy__808(env) {
  rwlLL_28 := env[0];
  mergeL_326 := env[1];
  cmsort_workerL_456 := env[2];
  __457 := env[3];
  __459 := env[4];
  m_490 := env[5];
  n_491 := env[6];
  mkclo1(x_495, fn1_lam_809, fvc:=3, argc:=1);
  setclo(x_495, cmsort_workerL_456, 1);
  setclo(x_495, __457, 2);
  setclo(x_495, m_490, 3);
  fork(x_494, x_495);
  move1(r1_493, x_494);
  mkclo1(x_502, fn1_lam_810, fvc:=3, argc:=1);
  setclo(x_502, cmsort_workerL_456, 1);
  setclo(x_502, __457, 2);
  setclo(x_502, n_491, 3);
  fork(x_501, x_502);
  move1(r2_500, x_501);
  recv1(x_508, r1_493);
  move1(_507, x_508);
  switch(ctagof(_507)){
    ex1LL_32 => {
      getbox(m_510, _507, 0);
      getbox(n_511, _507, 1);
      recv1(x_513, r2_500);
      move1(_512, x_513);
      switch(ctagof(_512)){
        ex1LL_32 => {
          getbox(m_515, _512, 0);
          getbox(n_516, _512, 1);
          x_518 := fn0_mergeL_785(m_510, m_515);
          move1(zs1_517, x_518);
          x_520 := fn0_rwlLL_649(NULL, NULL, NULL, NULL, NULL, zs1_517);
          move1(zs1_519, x_520);
          send(x_522, __459, zs1_519);
          move1(c_521, x_522);
          close1(x_524, n_511);
          move1(__523, x_524);
          close1(x_526, n_516);
          move1(__525, x_526);
          close0(x_527, c_521);
          move1(x_514, x_527);
          free(_512);
          break;
        }
      }
      move1(x_509, x_514);
      free(_507);
      break;
    }
  }
  return x_509;
}

fn fn1_lam_809(env) {
  lam_496 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  m_490 := env[3];
  _497 := env[4];
  sub(x_499, __457, 1);
  x_498 := fn0_cmsort_workerL_803(x_499, m_490, _497);
  return x_498;
}

fn fn1_lam_810(env) {
  lam_503 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  n_491 := env[3];
  _504 := env[4];
  sub(x_506, __457, 1);
  x_505 := fn0_cmsort_workerL_803(x_506, n_491, _504);
  return x_505;
}

fn lazy__807(env) {
  msortL_364 := env[0];
  zs_458 := env[1];
  __459 := env[2];
  hd_466 := env[3];
  tl_467 := env[4];
  hd_475 := env[5];
  tl_476 := env[6];
  rebox(x_483, tl_467, consUL_25);
  setbox(x_483, hd_475, 0);
  setbox(x_483, tl_476, 1);
  rebox(x_484, zs_458, consUL_25);
  setbox(x_484, hd_466, 0);
  setbox(x_484, x_483, 1);
  x_482 := fn0_msortL_791(x_484);
  send(x_481, __459, x_482);
  move1(c_480, x_481);
  close0(x_485, c_480);
  return x_485;
}

fn lazy__806(env) {
  zs_458 := env[0];
  __459 := env[1];
  hd_466 := env[2];
  tl_467 := env[3];
  rebox(x_472, tl_467, nilUL_24);
  rebox(x_473, zs_458, consUL_25);
  setbox(x_473, hd_466, 0);
  setbox(x_473, x_472, 1);
  send(x_471, __459, x_473);
  move1(c_470, x_471);
  close0(x_474, c_470);
  return x_474;
}

fn lazy__805(env) {
  zs_458 := env[0];
  __459 := env[1];
  rebox(x_464, zs_458, nilUL_24);
  send(x_463, __459, x_464);
  move1(c_462, x_463);
  close0(x_465, c_462);
  return x_465;
}

fn lazy__799(env) {
  rwlUU_7 := env[0];
  mergeU_308 := env[1];
  cmsort_workerU_384 := env[2];
  __385 := env[3];
  __387 := env[4];
  m_418 := env[5];
  n_419 := env[6];
  mkclo1(x_423, fn1_lam_800, fvc:=3, argc:=1);
  setclo(x_423, cmsort_workerU_384, 1);
  setclo(x_423, __385, 2);
  setclo(x_423, m_418, 3);
  fork(x_422, x_423);
  move1(r1_421, x_422);
  mkclo1(x_430, fn1_lam_801, fvc:=3, argc:=1);
  setclo(x_430, cmsort_workerU_384, 1);
  setclo(x_430, __385, 2);
  setclo(x_430, n_419, 3);
  fork(x_429, x_430);
  move1(r2_428, x_429);
  recv0(x_436, r1_421);
  move1(_435, x_436);
  switch(ctagof(_435)){
    ex1UL_34 => {
      getbox(m_438, _435, 0);
      getbox(n_439, _435, 1);
      recv0(x_441, r2_428);
      move1(_440, x_441);
      switch(ctagof(_440)){
        ex1UL_34 => {
          getbox(m_443, _440, 0);
          getbox(n_444, _440, 1);
          x_446 := fn0_mergeU_782(m_438, m_443);
          move1(zs1_445, x_446);
          x_448 := fn0_rwlUU_640(NULL, NULL, NULL, NULL, NULL, zs1_445);
          move1(zs1_447, x_448);
          send(x_450, __387, zs1_447);
          move1(c_449, x_450);
          close1(x_452, n_439);
          move1(__451, x_452);
          close1(x_454, n_444);
          move1(__453, x_454);
          close0(x_455, c_449);
          move1(x_442, x_455);
          free(_440);
          break;
        }
      }
      move1(x_437, x_442);
      free(_435);
      break;
    }
  }
  return x_437;
}

fn fn1_lam_800(env) {
  lam_424 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  m_418 := env[3];
  _425 := env[4];
  sub(x_427, __385, 1);
  x_426 := fn0_cmsort_workerU_794(x_427, m_418, _425);
  return x_426;
}

fn fn1_lam_801(env) {
  lam_431 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  n_419 := env[3];
  _432 := env[4];
  sub(x_434, __385, 1);
  x_433 := fn0_cmsort_workerU_794(x_434, n_419, _432);
  return x_433;
}

fn lazy__798(env) {
  msortU_344 := env[0];
  __387 := env[1];
  hd_394 := env[2];
  hd_403 := env[3];
  tl_404 := env[4];
  mkbox(x_411, consUU_27, 2);
  setbox(x_411, hd_403, 0);
  setbox(x_411, tl_404, 1);
  mkbox(x_412, consUU_27, 2);
  setbox(x_412, hd_394, 0);
  setbox(x_412, x_411, 1);
  x_410 := fn0_msortU_788(x_412);
  send(x_409, __387, x_410);
  move1(c_408, x_409);
  close0(x_413, c_408);
  return x_413;
}

fn lazy__797(env) {
  __387 := env[0];
  hd_394 := env[1];
  mkbox(x_400, nilUU_26, 0);
  mkbox(x_401, consUU_27, 2);
  setbox(x_401, hd_394, 0);
  setbox(x_401, x_400, 1);
  send(x_399, __387, x_401);
  move1(c_398, x_399);
  close0(x_402, c_398);
  return x_402;
}

fn lazy__796(env) {
  __387 := env[0];
  mkbox(x_392, nilUU_26, 0);
  send(x_391, __387, x_392);
  move1(c_390, x_391);
  close0(x_393, c_390);
  return x_393;
}

fn fn1_aux_768(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_769, aux_240, i_246);
      move1(x_249, x_769);
      x_252 := fn0_ord_754(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_757(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_754(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_757(x_255);
      x_253 := fn0_str_760(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_746(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_747, loop_213, x_219);
      appc(x_748, x_747, x_221);
      move1(x_218, x_748);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_736(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_737, loop_198, x_204);
      appc(x_738, x_737, x_205);
      move1(x_203, x_738);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_708(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_694(y_148);
  x_150 := fn0_sub_700(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_709, loop_146, n_153);
      appc(x_710, x_709, y_148);
      move1(x_154, x_710);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_635, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_638, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_641, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_644, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_647, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_650, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_653, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_656, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_659, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_662, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_665, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_668, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_671, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_674, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_677, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_680, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_683, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_686, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_689, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_692, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_695, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_698, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_701, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_704, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_707, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_717, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_720, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_725, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_730, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_735, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_745, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_755, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_758, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_761, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_764, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_767, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_777, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_780, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_783, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_786, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_789, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_792, fvc:=0, argc:=1);
  mkclo0(cmsort_workerU_384, fn1_cmsort_workerU_795, fvc:=0, argc:=3);
  mkclo0(cmsort_workerL_456, fn1_cmsort_workerL_804, fvc:=0, argc:=3);
  mkclo0(cmsortU_528, fn1_cmsortU_813, fvc:=0, argc:=1);
  mkclo0(cmsortL_544, fn1_cmsortL_818, fvc:=0, argc:=1);
  mkclo0(mklistU_560, fn1_mklistU_823, fvc:=0, argc:=1);
  mkclo0(mklistL_568, fn1_mklistL_826, fvc:=0, argc:=1);
  mkclo0(list_lenU_576, fn1_list_lenU_829, fvc:=0, argc:=1);
  mkclo0(list_lenL_583, fn1_list_lenL_832, fvc:=0, argc:=1);
  mkclo0(print_listU_590, fn1_print_listU_835, fvc:=0, argc:=1);
  mkclo0(print_listL_607, fn1_print_listL_840, fvc:=0, argc:=1);
  x_625 := fn0_mklistL_825(2000000);
  move1(test_624, x_625);
  lazy(x_626, lazy__845, 4);
  setlazy(x_626, string_of_int_236, 0);
  setlazy(x_626, cmsortL_544, 1);
  setlazy(x_626, list_lenL_583, 2);
  setlazy(x_626, test_624, 3);
  force(x_844, x_626);
  return x_844;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

