[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_408› : ∀ (A_409 : Type‹s_408›) -> A_409 -> ?_2[0;0] :=
  fun id_411 : ∀ (A_412 : Type‹s_408›) -> A_412 -> ?_1[0;0]
  | A_414 m_415 => m_415

#[logical]
inductive eq_1‹s_416› (A_417 : Type‹s_416›) (m_418 : A_417):
  A_417 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_418 m_418)

#[program]
def rwl_2‹s_420,r_421› :
  ∀ {A_422 : Type‹s_420›} ->
    ∀ {m_423 : A_422} ->
      ∀ {n_424 : A_422} ->
        ∀ {B_425 : A_422 -> Type‹r_421›} ->
          {(eq_1‹??_3› ?_5[0;0] m_423 n_424)} ->
            ((B_425) m_423) -> ((B_425) n_424)
:=
  fun rwl_429 :
    ∀ {A_430 : Type‹s_420›} ->
      ∀ {m_431 : A_430} ->
        ∀ {n_432 : A_430} ->
          ∀ {B_433 : A_430 -> Type‹r_421›} ->
            {(eq_1‹??_2› ?_4[0;0] m_431 n_432)} ->
              ((B_433) m_431) -> ((B_433) n_432)
  | A_437 m_438 n_439 B_440 refl_1 x_441 => x_441

#[program]
def rwr_3‹s_442,r_443› :
  ∀ {A_444 : Type‹s_442›} ->
    ∀ {m_445 : A_444} ->
      ∀ {n_446 : A_444} ->
        ∀ {B_447 : A_444 -> Type‹r_443›} ->
          {(eq_1‹??_5› ?_7[0;0] m_445 n_446)} ->
            ((B_447) n_446) -> ((B_447) m_445)
:=
  fun rwr_451 :
    ∀ {A_452 : Type‹s_442›} ->
      ∀ {m_453 : A_452} ->
        ∀ {n_454 : A_452} ->
          ∀ {B_455 : A_452 -> Type‹r_443›} ->
            {(eq_1‹??_4› ?_6[0;0] m_453 n_454)} ->
              ((B_455) n_454) -> ((B_455) m_453)
  | A_459 m_460 n_461 B_462 refl_1 x_463 => x_463

#[logical]
def congr_4‹s_464,r_465,t_466› :
  ∀ (A_467 : Type‹s_464›) ->
    ∀ (B_468 : Type‹r_465›) ->
      ∀ (m_469 : A_467) ->
        ∀ (n_470 : A_467) ->
          ∀ (f_471 : forall‹t_466›(__472 : A_467), B_468) ->
            (eq_1‹??_9› ?_12[0;0] m_469 n_470) ->
              (eq_1‹??_10› ?_13[0;0] ((f_471) m_469) ((f_471) n_470))
:=
  fun congr_474 :
    ∀ (A_475 : Type‹s_464›) ->
      ∀ (B_476 : Type‹r_465›) ->
        ∀ (m_477 : A_475) ->
          ∀ (n_478 : A_475) ->
            ∀ (f_479 : forall‹t_466›(__480 : A_475), B_476) ->
              (eq_1‹??_6› ?_8[0;0] m_477 n_478) ->
                (eq_1‹??_7› ?_9[0;0] ((f_479) m_477) ((f_479) n_478))
  | A_482 B_483 m_484 n_485 f_486 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_487 : U} ->
    ∀ {m_488 : A_487} ->
      ∀ (x_489 : (eq_1‹??_15› ?_20[0;0] m_488 m_488)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_489 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_490 :
    ∀ {A_491 : U} ->
      ∀ {m_492 : A_491} ->
        ∀ (x_493 : (eq_1‹??_11› ?_14[0;0] m_492 m_492)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_493 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_494 m_495 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_496,t_497› (A_498 : Type‹s_496›):
  A_498 -> Type‹t_497›
where
| just_2 (m_500 : A_498) : (sing_2‹??_18,??_19› ?_24[0;0] m_500)

#[logical]
def ssing_6‹s_501› :
  ∀ (A_502 : Type‹s_501›) -> A_502 -> Type‹s_501›
:=
  fun ssing_504 : ∀ (A_505 : Type‹s_501›) -> A_505 -> Type‹s_501›
  | A_507 m_508 => (sing_2‹s_501,s_501› A_507 m_508)

#[program]
def sing_elim_7‹s_509,t_510› :
  ∀ {A_511 : Type‹s_509›} ->
    ∀ {x_512 : A_511} -> (sing_2‹s_509,t_510› ?_26[0;0] x_512) -> A_511
:=
  fun sing_elim_514 :
    ∀ {A_515 : Type‹s_509›} ->
      ∀ {x_516 : A_515} ->
        (sing_2‹s_509,t_510› ?_25[0;0] x_516) -> A_515
  | A_518 x_519 (just_2 x_520) => x_520

#[logical]
def sing_uniq_8‹s_521,t_522› :
  ∀ (A_523 : Type‹s_521›) ->
    ∀ (x0_524 : A_523) ->
      ∀ (x_525 : (sing_2‹s_521,t_522› ?_33[0;0] x0_524)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_524
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_525))
:=
  fun sing_uniq_526 :
    ∀ (A_527 : Type‹s_521›) ->
      ∀ (x0_528 : A_527) ->
        ∀ (x_529 : (sing_2‹s_521,t_522› ?_27[0;0] x0_528)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_528
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_529))
  | A_530 x0_531 (just_2 _532) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_533 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_533 tt_3)
:=
  fun unit_eta_534 :
    ∀ (x_535 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_535 tt_3)
  | x_536 =>
    match x_536 in
      ∀ (x0_537 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_537 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_539 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_543 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _546 _547 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_550 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _553 _554 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_557 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _560 _561 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_562 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_565 : nat_5 -> nat_5 -> bool_4
  | zero_6 _568 => true_4
  | _569 zero_6 => false_5
  | (succ_7 x_570) (succ_7 y_571) => ((lte_565) x_570 y_571)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_574 : nat_5 -> nat_5 -> bool_4
  | x_577 y_578 => ((lte_14) (succ_7‹› x_577) y_578)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_580 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_582) => x_582

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_585 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_588 => y_588
  | (succ_7 x_589) y_590 => (succ_7‹› ((add_585) x_589 y_590))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_593 : nat_5 -> nat_5 -> nat_5
  | x_596 zero_6 => x_596
  | x_597 (succ_7 y_598) => ((sub_593) ((pred_16) x_597) y_598)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_601 : nat_5 -> nat_5 -> nat_5
  | zero_6 _604 => zero_6
  | (succ_7 x_605) y_606 => ((add_17) y_606 ((mul_601) x_605 y_606))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_609 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_612 y_613 =>
    match ((lt_15) x_612 y_613) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_615 :=
        fun loop_616 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_619 y_620 =>
          match ((sub_18) x_619 ((pred_16) y_620)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_622) => (succ_7‹› ((loop_616) x_622 y_620))
      in ((loop_615) x_612 y_613)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_625 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_628 y_629 => ((sub_18) x_628 ((mul_19) ((div_20) x_628 y_629) y_629))

#[program]
inductive list_6‹s_630,t_631› (A_632 : Type‹s_630›): Type‹t_631›
where
| nil_8 : (list_6‹??_31,??_32› A_632)
| cons_9
    (hd_633 : A_632) (tl_634 : (list_6‹??_33,t_631› A_632))
    : (list_6‹??_34,??_35› A_632)

#[program]
def free_list_22‹s_635,t_636› :
  ∀ {A_637 : Type‹s_635›} ->
    A_637 -> unit_3 -> (list_6‹??_37,t_636› A_637) -> unit_3
:=
  fun free_list_641 :
    ∀ {A_642 : Type‹s_635›} ->
      A_642 -> unit_3 -> (list_6‹??_36,t_636› A_642) -> unit_3
  | A_646 f_647 nil_8 => tt_3
  | A_648 f_649 (cons_9 x_650 xs_651) =>
    let __652 := ((f_649) x_650) in ((free_list_641) ?_52[0;0] f_649 xs_651)

#[program]
inductive exists0_7‹s_653,r_654› (A_655 : Type‹s_653›) (B_656 : 
A_655 -> Type‹r_654›): L where
| ex0_10
    {m_658 : A_655} (n_659 : ((B_656) m_658))
    : (exists0_7‹??_38,??_39› A_655 B_656)

#[program]
inductive exists1_8‹s_660,r_661› (A_662 : Type‹s_660›) (B_663 : 
A_662 -> Type‹r_661›): L where
| ex1_11
    (m_665 : A_662) (n_666 : ((B_663) m_665))
    : (exists1_8‹??_40,??_41› A_662 B_663)

#[logical]
def prod0_23‹s_667,r_668› :
  Type‹s_667› -> Type‹r_668› -> ?_56[0;0]
:=
  fun prod0_671 : Type‹s_667› -> Type‹r_668› -> ?_53[0;0]
  | A_674 B_675 =>
    (exists0_7‹??_42,??_43›
      A_674 fun _676 : ?_54[0;0] -> ?_55[0;0]
            | _678 => B_675)

#[logical]
def prod1_24‹s_679,r_680› :
  Type‹s_679› -> Type‹r_680› -> ?_60[0;0]
:=
  fun prod1_683 : Type‹s_679› -> Type‹r_680› -> ?_57[0;0]
  | A_686 B_687 =>
    (exists1_8‹??_44,??_45›
      A_686 fun _688 : ?_58[0;0] -> ?_59[0;0]
            | _690 => B_687)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_693 : int -> int -> int
  | x_696 y_697 =>
    let loop_698 :=
      fun loop_699 : int -> int -> int
      | acc_702 y_703 =>
        match (__lte__ y_703 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_702
        | false_5 => ((loop_699) (__mul__ x_696 acc_702) (__sub__ y_703 1))
    in ((loop_698) 1 y_697)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_708 : int -> int -> int -> int
  | x_712 y_713 m_714 =>
    let loop_715 :=
      fun loop_716 : int -> int -> int
      | acc_719 y_720 =>
        match (__lte__ y_720 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_719
        | false_5 =>
          ((loop_716)
            (__mod__ (__mul__ x_712 acc_719) m_714) (__sub__ y_720 1))
    in ((loop_715) 1 y_713)

#[program]
def ord_27‹› : char -> int :=
  fun ord_723 : char -> int
  | c_725 => (__ord__ c_725)

#[program]
def chr_28‹› : int -> char :=
  fun chr_727 : int -> char
  | i_729 => (__chr__ i_729)

#[program]
def str_29‹› : char -> string :=
  fun str_731 : char -> string
  | c_733 => (__push__ "" c_733)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_735 : string -> int
  | s_737 => (__size__ s_737)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_739 : int -> string
  | i_741 =>
    let aux_742 :=
      fun aux_743 : int -> string
      | i_745 =>
        match (__lte__ 10 i_745) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_747 := (__mod__ i_745 10) in
          let i_748 := (__div__ i_745 10) in
          (__push__ ((aux_743) i_748)
            ((chr_28) (__add__ r_747 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_745 ((ord_27) 0))))
    in
    match (__lt__ 0 i_741) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_742) i_741)
    | false_5 => (__cat__ "~" ((aux_742) (__neg__ i_741)))

#[program]
def split_32‹t_750› :
  (list_6‹??_71,t_750› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_750› int) (list_6‹??_73,t_750› int))
:=
  fun split_752 :
    (list_6‹??_46,t_750› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_750› int) (list_6‹??_48,t_750› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_754 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_754 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_755 (cons_9 y_756 zs_757)) =>
    match ((split_752) zs_757) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_759 ys_760) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_755 xs_759)
        (cons_9‹??_67,??_68› ?_79[0;0] y_756 ys_760))

#[program]
def merge_33‹t_761› :
  (list_6‹??_87,t_761› int) ->
    (list_6‹??_88,t_761› int) -o (list_6‹??_89,t_761› int)
:=
  fun merge_764 :
    (list_6‹??_76,t_761› int) ->
      (list_6‹??_77,t_761› int) -o (list_6‹??_78,t_761› int)
  | nil_8 ys_767 => ys_767
  | xs_768 nil_8 => xs_768
  | (cons_9 x_769 xs_770) (cons_9 y_771 ys_772) =>
    match (__lte__ x_769 y_771) in ?_84[0;0] -o ?_85[0;0] with
    | true_4 =>
      (cons_9‹??_81,??_82›
        ?_87[0;0] x_769
        ((merge_764) xs_770 (cons_9‹??_79,??_80› ?_86[0;0] y_771 ys_772)))
    | false_5 =>
      (cons_9‹??_85,??_86›
        ?_89[0;0] y_771
        ((merge_764) (cons_9‹??_83,??_84› ?_88[0;0] x_769 xs_770) ys_772))

#[program]
def msort_34‹t_774› :
  (list_6‹??_100,t_774› int) -> (list_6‹??_101,t_774› int)
:=
  fun msort_776 :
    (list_6‹??_90,t_774› int) -> (list_6‹??_91,t_774› int)
  | nil_8 => (nil_8‹??_92,??_93› ?_90[0;0])
  | (cons_9 z_778 nil_8) =>
    (cons_9‹??_96,??_97›
      ?_92[0;0] z_778 (nil_8‹??_94,??_95› ?_91[0;0]))
  | zs_779 =>
    match ((split_32‹??_98›) zs_779) in ?_94[0;0] -o ?_93[0;0] with
    | (ex1_11 xs_781 ys_782) =>
      ((merge_33‹??_99›) ((msort_776) xs_781) ((msort_776) ys_782))

-----------------------------------------

#[program]
def id_1‹s_5682› : ∀ (A_5683 : Type‹s_5682›) -> A_5683 -> A_5683 :=
  fun id_5685 : ∀ (A_5686 : Type‹s_5682›) -> A_5686 -> A_5686
  | A_5688 m_5689 => m_5689

#[logical]
inductive eq_1‹s_5690› (A_5691 : Type‹s_5690›) (m_5692 : A_5691):
  A_5691 -> U
where
| refl_1 : (eq_1‹s_5690› A_5691 m_5692 m_5692)

#[program]
def rwl_2‹s_5694,r_5695› :
  ∀ {A_5696 : Type‹s_5694›} ->
    ∀ {m_5697 : A_5696} ->
      ∀ {n_5698 : A_5696} ->
        ∀ {B_5699 : A_5696 -> Type‹r_5695›} ->
          {(eq_1‹s_5694› A_5696 m_5697 n_5698)} ->
            ((B_5699) m_5697) -> ((B_5699) n_5698)
:=
  fun rwl_5703 :
    ∀ {A_5704 : Type‹s_5694›} ->
      ∀ {m_5705 : A_5704} ->
        ∀ {n_5706 : A_5704} ->
          ∀ {B_5707 : A_5704 -> Type‹r_5695›} ->
            {(eq_1‹s_5694› A_5704 m_5705 n_5706)} ->
              ((B_5707) m_5705) -> ((B_5707) n_5706)
  | A_5711 m_5712 n_5713 B_5714 refl_1 __5715 => __5715

#[program]
def rwr_3‹s_5716,r_5717› :
  ∀ {A_5718 : Type‹s_5716›} ->
    ∀ {m_5719 : A_5718} ->
      ∀ {n_5720 : A_5718} ->
        ∀ {B_5721 : A_5718 -> Type‹r_5717›} ->
          {(eq_1‹s_5716› A_5718 m_5719 n_5720)} ->
            ((B_5721) n_5720) -> ((B_5721) m_5719)
:=
  fun rwr_5725 :
    ∀ {A_5726 : Type‹s_5716›} ->
      ∀ {m_5727 : A_5726} ->
        ∀ {n_5728 : A_5726} ->
          ∀ {B_5729 : A_5726 -> Type‹r_5717›} ->
            {(eq_1‹s_5716› A_5726 m_5727 n_5728)} ->
              ((B_5729) n_5728) -> ((B_5729) m_5727)
  | A_5733 m_5734 n_5735 B_5736 refl_1 __5737 => __5737

#[logical]
def congr_4‹s_5738,r_5739,t_5740› :
  ∀ (A_5741 : Type‹s_5738›) ->
    ∀ (B_5742 : Type‹r_5739›) ->
      ∀ (m_5743 : A_5741) ->
        ∀ (n_5744 : A_5741) ->
          ∀ (f_5745 : forall‹t_5740›(__5746 : A_5741), B_5742) ->
            (eq_1‹s_5738› A_5741 m_5743 n_5744) ->
              (eq_1‹r_5739› B_5742 ((f_5745) m_5743) ((f_5745) n_5744))
:=
  fun congr_5748 :
    ∀ (A_5749 : Type‹s_5738›) ->
      ∀ (B_5750 : Type‹r_5739›) ->
        ∀ (m_5751 : A_5749) ->
          ∀ (n_5752 : A_5749) ->
            ∀ (f_5753 : forall‹t_5740›(__5754 : A_5749), B_5750) ->
              (eq_1‹s_5738› A_5749 m_5751 n_5752) ->
                (eq_1‹r_5739› B_5750 ((f_5753) m_5751) ((f_5753) n_5752))
  | A_5756 B_5757 m_5758 n_5759 f_5760 refl_1 =>
    (refl_1‹r_5739› B_5757 ((f_5760) n_5759))

#[logical]
def axiom_K_5‹› :
  ∀ {A_5761 : U} ->
    ∀ {m_5762 : A_5761} ->
      ∀ (x_5763 : (eq_1‹U› A_5761 m_5762 m_5762)) ->
        (eq_1‹U›
          (eq_1‹U› A_5761 m_5762 m_5762) x_5763
          (refl_1‹U› A_5761 m_5762))
:=
  fun axiom_K_5764 :
    ∀ {A_5765 : U} ->
      ∀ {m_5766 : A_5765} ->
        ∀ (x_5767 : (eq_1‹U› A_5765 m_5766 m_5766)) ->
          (eq_1‹U›
            (eq_1‹U› A_5765 m_5766 m_5766) x_5767
            (refl_1‹U› A_5765 m_5766))
  | A_5768 m_5769 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_5768 m_5769 m_5769) (refl_1‹U› A_5768 m_5769))

#[program]
inductive sing_2‹s_5770,t_5771› (A_5772 : Type‹s_5770›):
  A_5772 -> Type‹t_5771›
where
| just_2 (m_5774 : A_5772) : (sing_2‹s_5770,t_5771› A_5772 m_5774)

#[logical]
def ssing_6‹s_5775› :
  ∀ (A_5776 : Type‹s_5775›) -> A_5776 -> Type‹s_5775›
:=
  fun ssing_5778 :
    ∀ (A_5779 : Type‹s_5775›) -> A_5779 -> Type‹s_5775›
  | A_5781 m_5782 => (sing_2‹s_5775,s_5775› A_5781 m_5782)

#[program]
def sing_elim_7‹s_5783,t_5784› :
  ∀ {A_5785 : Type‹s_5783›} ->
    ∀ {x_5786 : A_5785} ->
      (sing_2‹s_5783,t_5784› A_5785 x_5786) -> A_5785
:=
  fun sing_elim_5788 :
    ∀ {A_5789 : Type‹s_5783›} ->
      ∀ {x_5790 : A_5789} ->
        (sing_2‹s_5783,t_5784› A_5789 x_5790) -> A_5789
  | A_5792 x_5793 (just_2 m_5794) => m_5794

#[logical]
def sing_uniq_8‹s_5795,t_5796› :
  ∀ (A_5797 : Type‹s_5795›) ->
    ∀ (x0_5798 : A_5797) ->
      ∀ (x_5799 : (sing_2‹s_5795,t_5796› A_5797 x0_5798)) ->
        (eq_1‹s_5795›
          A_5797 x0_5798
          ((sing_elim_7‹s_5795,t_5796›) A_5797 x0_5798 x_5799))
:=
  fun sing_uniq_5800 :
    ∀ (A_5801 : Type‹s_5795›) ->
      ∀ (x0_5802 : A_5801) ->
        ∀ (x_5803 : (sing_2‹s_5795,t_5796› A_5801 x0_5802)) ->
          (eq_1‹s_5795›
            A_5801 x0_5802
            ((sing_elim_7‹s_5795,t_5796›) A_5801 x0_5802 x_5803))
  | A_5804 x0_5805 (just_2 m_5806) => (refl_1‹s_5795› A_5804 m_5806)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_5807 : unit_3) -> (eq_1‹U› unit_3 x_5807 tt_3)
:=
  fun unit_eta_5808 :
    ∀ (x_5809 : unit_3) -> (eq_1‹U› unit_3 x_5809 tt_3)
  | x_5810 =>
    match x_5810 in
      ∀ (x0_5811 : unit_3) -o (eq_1‹U› unit_3 x0_5811 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_5813 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_5817 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __5820 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_5823 : bool_4 -> bool_4 -> bool_4
  | true_4 __5826 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_5829 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_5832 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_5835 : nat_5 -> nat_5 -> bool_4
  | zero_6 __5838 => true_4
  | (succ_7 n_5839) zero_6 => false_5
  | (succ_7 n_5840) (succ_7 n_5841) => ((lte_5835) n_5840 n_5841)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_5844 : nat_5 -> nat_5 -> bool_4
  | x_5847 y_5848 => ((lte_14) (succ_7‹› x_5847) y_5848)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_5850 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_5852) => n_5852

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_5855 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5858 => __5858
  | (succ_7 n_5859) __5860 => (succ_7‹› ((add_5855) n_5859 __5860))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_5863 : nat_5 -> nat_5 -> nat_5
  | __5866 zero_6 => __5866
  | __5867 (succ_7 n_5868) => ((sub_5863) ((pred_16) __5867) n_5868)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_5871 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5874 => zero_6
  | (succ_7 n_5875) __5876 => ((add_17) __5876 ((mul_5871) n_5875 __5876))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_5879 : nat_5 -> nat_5 -> nat_5
  | x_5882 y_5883 =>
    match ((lt_15) x_5882 y_5883) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_5885 :=
        fun loop_5886 : nat_5 -> nat_5 -> nat_5
        | x_5889 y_5890 =>
          match ((sub_18) x_5889 ((pred_16) y_5890)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_5892) => (succ_7‹› ((loop_5886) n_5892 y_5890))
      in ((loop_5885) x_5882 y_5883)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_5895 : nat_5 -> nat_5 -> nat_5
  | x_5898 y_5899 =>
    ((sub_18) x_5898 ((mul_19) ((div_20) x_5898 y_5899) y_5899))

#[program]
inductive list_6‹s_5900,t_5901› (A_5902 : Type‹s_5900›):
  Type‹t_5901›
where
| nil_8 : (list_6‹s_5900,t_5901› A_5902)
| cons_9
    (hd_5903 : A_5902) (tl_5904 : (list_6‹s_5900,t_5901› A_5902))
    : (list_6‹s_5900,t_5901› A_5902)

#[program]
def free_list_22‹s_5905,t_5906› :
  ∀ {A_5907 : Type‹s_5905›} ->
    A_5907 -> unit_3 -> (list_6‹s_5905,t_5906› A_5907) -> unit_3
:=
  fun free_list_5911 :
    ∀ {A_5912 : Type‹s_5905›} ->
      A_5912 -> unit_3 -> (list_6‹s_5905,t_5906› A_5912) -> unit_3
  | A_5916 f_5917 nil_8 => tt_3
  | A_5918 f_5919 (cons_9 hd_5920 tl_5921) =>
    let __5922 := ((f_5919) hd_5920) in
    ((free_list_5911) A_5918 f_5919 tl_5921)

#[program]
inductive exists0_7‹s_5923,r_5924› (A_5925 : Type‹s_5923›) (B_5926 : 
A_5925 -> Type‹r_5924›): L where
| ex0_10
    {m_5928 : A_5925} (n_5929 : ((B_5926) m_5928))
    : (exists0_7‹s_5923,r_5924› A_5925 B_5926)

#[program]
inductive exists1_8‹s_5930,r_5931› (A_5932 : Type‹s_5930›) (B_5933 : 
A_5932 -> Type‹r_5931›): L where
| ex1_11
    (m_5935 : A_5932) (n_5936 : ((B_5933) m_5935))
    : (exists1_8‹s_5930,r_5931› A_5932 B_5933)

#[logical]
def prod0_23‹s_5937,r_5938› : Type‹s_5937› -> Type‹r_5938› -> L
:=
  fun prod0_5941 : Type‹s_5937› -> Type‹r_5938› -> L
  | A_5944 B_5945 =>
    (exists0_7‹s_5937,r_5938›
      A_5944 fun _5946 : A_5944 -> Type‹r_5938›
             | __5948 => B_5945)

#[logical]
def prod1_24‹s_5949,r_5950› : Type‹s_5949› -> Type‹r_5950› -> L
:=
  fun prod1_5953 : Type‹s_5949› -> Type‹r_5950› -> L
  | A_5956 B_5957 =>
    (exists1_8‹s_5949,r_5950›
      A_5956 fun _5958 : A_5956 -> Type‹r_5950›
             | __5960 => B_5957)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_5963 : int -> int -> int
  | x_5966 y_5967 =>
    let loop_5968 :=
      fun loop_5969 : int -> int -> int
      | acc_5972 y_5973 =>
        match (__lte__ y_5973 0) in bool_4 -o int with
        | true_4 => acc_5972
        | false_5 =>
          ((loop_5969) (__mul__ x_5966 acc_5972) (__sub__ y_5973 1))
    in ((loop_5968) 1 y_5967)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_5978 : int -> int -> int -> int
  | x_5982 y_5983 m_5984 =>
    let loop_5985 :=
      fun loop_5986 : int -> int -> int
      | acc_5989 y_5990 =>
        match (__lte__ y_5990 0) in bool_4 -o int with
        | true_4 => acc_5989
        | false_5 =>
          ((loop_5986)
            (__mod__ (__mul__ x_5982 acc_5989) m_5984) (__sub__ y_5990 1))
    in ((loop_5985) 1 y_5983)

#[program]
def ord_27‹› : char -> int :=
  fun ord_5993 : char -> int
  | c_5995 => (__ord__ c_5995)

#[program]
def chr_28‹› : int -> char :=
  fun chr_5997 : int -> char
  | i_5999 => (__chr__ i_5999)

#[program]
def str_29‹› : char -> string :=
  fun str_6001 : char -> string
  | c_6003 => (__push__ "" c_6003)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_6005 : string -> int
  | s_6007 => (__size__ s_6007)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_6009 : int -> string
  | i_6011 =>
    let aux_6012 :=
      fun aux_6013 : int -> string
      | i_6015 =>
        match (__lte__ 10 i_6015) in bool_4 -o string with
        | true_4 =>
          let r_6017 := (__mod__ i_6015 10) in
          let i_6018 := (__div__ i_6015 10) in
          (__push__ ((aux_6013) i_6018)
            ((chr_28) (__add__ r_6017 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_6015 ((ord_27) 0))))
    in
    match (__lt__ 0 i_6011) in bool_4 -o string with
    | true_4 => ((aux_6012) i_6011)
    | false_5 => (__cat__ "~" ((aux_6012) (__neg__ i_6011)))

#[program]
def split_32‹t_6020› :
  (list_6‹U,t_6020› int) ->
    ((prod1_24‹t_6020,t_6020›)
      (list_6‹U,t_6020› int) (list_6‹U,t_6020› int))
:=
  fun split_6022 :
    (list_6‹U,t_6020› int) ->
      ((prod1_24‹t_6020,t_6020›)
        (list_6‹U,t_6020› int) (list_6‹U,t_6020› int))
  | nil_8 =>
    (ex1_11‹t_6020,t_6020›
      (list_6‹U,t_6020› int)
      fun _6024 : (list_6‹U,t_6020› int) -> Type‹t_6020›
      | __6026 => (list_6‹U,t_6020› int) (nil_8‹U,t_6020› int)
      (nil_8‹U,t_6020› int))
  | (cons_9 hd_6027 nil_8) =>
    (ex1_11‹t_6020,t_6020›
      (list_6‹U,t_6020› int)
      fun _6028 : (list_6‹U,t_6020› int) -> Type‹t_6020›
      | __6030 => (list_6‹U,t_6020› int)
      (cons_9‹U,t_6020› int hd_6027 (nil_8‹U,t_6020› int))
      (nil_8‹U,t_6020› int))
  | (cons_9 hd_6031 (cons_9 hd_6032 tl_6033)) =>
    match ((split_6022) tl_6033) in
      ((prod1_24‹t_6020,t_6020›)
        (list_6‹U,t_6020› int) (list_6‹U,t_6020› int)) -o
        ((prod1_24‹t_6020,t_6020›)
          (list_6‹U,t_6020› int) (list_6‹U,t_6020› int))
    with
    | (ex1_11 m_6035 n_6036) =>
      (ex1_11‹t_6020,t_6020›
        (list_6‹U,t_6020› int)
        fun _6037 : (list_6‹U,t_6020› int) -> Type‹t_6020›
        | __6039 => (list_6‹U,t_6020› int)
        (cons_9‹U,t_6020› int hd_6031 m_6035)
        (cons_9‹U,t_6020› int hd_6032 n_6036))

#[program]
def merge_33‹t_6040› :
  (list_6‹U,t_6040› int) ->
    (list_6‹U,t_6040› int) -o (list_6‹U,t_6040› int)
:=
  fun merge_6043 :
    (list_6‹U,t_6040› int) ->
      (list_6‹U,t_6040› int) -o (list_6‹U,t_6040› int)
  | nil_8 __6046 => __6046
  | (cons_9 hd_6047 tl_6048) nil_8 =>
    (cons_9‹U,t_6040› int hd_6047 tl_6048)
  | (cons_9 hd_6049 tl_6050) (cons_9 hd_6051 tl_6052) =>
    match (__lte__ hd_6049 hd_6051) in bool_4 -o (list_6‹U,t_6040› int)
    with
    | true_4 =>
      (cons_9‹U,t_6040›
        int hd_6049
        ((merge_6043) tl_6050 (cons_9‹U,t_6040› int hd_6051 tl_6052)))
    | false_5 =>
      (cons_9‹U,t_6040›
        int hd_6051
        ((merge_6043) (cons_9‹U,t_6040› int hd_6049 tl_6050) tl_6052))

#[program]
def msort_34‹t_6054› :
  (list_6‹U,t_6054› int) -> (list_6‹U,t_6054› int)
:=
  fun msort_6056 : (list_6‹U,t_6054› int) -> (list_6‹U,t_6054› int)
  | nil_8 => (nil_8‹U,t_6054› int)
  | (cons_9 hd_6058 nil_8) =>
    (cons_9‹U,t_6054› int hd_6058 (nil_8‹U,t_6054› int))
  | (cons_9 hd_6059 (cons_9 hd_6060 tl_6061)) =>
    match ((split_32‹t_6054›)
            (cons_9‹U,t_6054›
              int hd_6059 (cons_9‹U,t_6054› int hd_6060 tl_6061))) in
      ((prod1_24‹t_6054,t_6054›)
        (list_6‹U,t_6054› int) (list_6‹U,t_6054› int)) -o
        (list_6‹U,t_6054› int)
    with
    | (ex1_11 m_6063 n_6064) =>
      ((merge_33‹t_6054›) ((msort_6056) m_6063) ((msort_6056) n_6064))

-----------------------------------------

#[program]
def idU_36 := fun id_9907 (A_9908) -> (m_9909) ->
                m_9909

#[program]
def idL_35 := fun id_9910 (A_9911) -> (m_9912) ->
                m_9912

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_40 :=
  fun rwl_9913 {A_9914} -> {m_9915} -> {n_9916} -> {B_9917} -> {__9918} ->
  (__9919) ->
    match {NULL} with
    | reflU_13  => __9919
    end

#[program]
def rwlUL_39 :=
  fun rwl_9920 {A_9921} -> {m_9922} -> {n_9923} -> {B_9924} -> {__9925} ->
  (__9926) ->
    match {NULL} with
    | reflU_13  => __9926
    end

#[program]
def rwlLU_38 :=
  fun rwl_9927 {A_9928} -> {m_9929} -> {n_9930} -> {B_9931} -> {__9932} ->
  (__9933) ->
    match {NULL} with
    | reflL_12  => __9933
    end

#[program]
def rwlLL_37 :=
  fun rwl_9934 {A_9935} -> {m_9936} -> {n_9937} -> {B_9938} -> {__9939} ->
  (__9940) ->
    match {NULL} with
    | reflL_12  => __9940
    end

#[program]
def rwrUU_44 :=
  fun rwr_9941 {A_9942} -> {m_9943} -> {n_9944} -> {B_9945} -> {__9946} ->
  (__9947) ->
    match {NULL} with
    | reflU_13  => __9947
    end

#[program]
def rwrUL_43 :=
  fun rwr_9948 {A_9949} -> {m_9950} -> {n_9951} -> {B_9952} -> {__9953} ->
  (__9954) ->
    match {NULL} with
    | reflU_13  => __9954
    end

#[program]
def rwrLU_42 :=
  fun rwr_9955 {A_9956} -> {m_9957} -> {n_9958} -> {B_9959} -> {__9960} ->
  (__9961) ->
    match {NULL} with
    | reflL_12  => __9961
    end

#[program]
def rwrLL_41 :=
  fun rwr_9962 {A_9963} -> {m_9964} -> {n_9965} -> {B_9966} -> {__9967} ->
  (__9968) ->
    match {NULL} with
    | reflL_12  => __9968
    end

#[logical]
def congrUUU_52 := NULL

#[logical]
def congrUUL_51 := NULL

#[logical]
def congrULU_50 := NULL

#[logical]
def congrULL_49 := NULL

#[logical]
def congrLUU_48 := NULL

#[logical]
def congrLUL_47 := NULL

#[logical]
def congrLLU_46 := NULL

#[logical]
def congrLLL_45 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_54 := NULL

#[logical]
def ssingL_53 := NULL

#[program]
def sing_elimUU_58 :=
  fun sing_elim_9969 {A_9970} -> {x_9971} -> (__9972) ->
    match __9972 with
    | justUU_17 m_9973 => m_9973
    end

#[program]
def sing_elimUL_57 :=
  fun sing_elim_9974 {A_9975} -> {x_9976} -> (__9977) ->
    match __9977 with
    | justUL_16 m_9978 => m_9978
    end

#[program]
def sing_elimLU_56 :=
  fun sing_elim_9979 {A_9980} -> {x_9981} -> (__9982) ->
    match __9982 with
    
    end

#[program]
def sing_elimLL_55 :=
  fun sing_elim_9983 {A_9984} -> {x_9985} -> (__9986) ->
    match __9986 with
    | justLL_14 m_9987 => m_9987
    end

#[logical]
def sing_uniqUU_62 := NULL

#[logical]
def sing_uniqUL_61 := NULL

#[logical]
def sing_uniqLU_60 := NULL

#[logical]
def sing_uniqLL_59 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_9988 (__9989) ->
    match __9989 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_9990 (__9991) -> (__9992) ->
    match __9991 with
    | true_4  =>
      match __9992 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_9993 (__9994) -> (__9995) ->
    match __9994 with
    | true_4  => true_4
    | false_5  =>
      match __9995 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_9996 (__9997) -> (__9998) -o
    match __9997 with
    | true_4  =>
      match __9998 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __9998 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_9999 (__10000) -> (__10001) ->
    match __10000 with
    | zero_6  => true_4
    | succ_7 n_10002 =>
      match __10001 with
      | zero_6  => false_5 | succ_7 n_10003 => ((lte_9999) n_10002 n_10003)
      end
    end

#[program]
def lt_15 :=
  fun lt_10004 (x_10005) -> (y_10006) ->
    ((lte_14) (succ_7 x_10005) y_10006)

#[program]
def pred_16 :=
  fun pred_10007 (__10008) ->
    match __10008 with
    | zero_6  => zero_6 | succ_7 n_10009 => n_10009
    end

#[program]
def add_17 :=
  fun add_10010 (__10011) -> (__10012) ->
    match __10011 with
    | zero_6  => __10012
    | succ_7 n_10013 => (succ_7 ((add_10010) n_10013 __10012))
    end

#[program]
def sub_18 :=
  fun sub_10014 (__10015) -> (__10016) ->
    match __10016 with
    | zero_6  => __10015
    | succ_7 n_10017 => ((sub_10014) ((pred_16) __10015) n_10017)
    end

#[program]
def mul_19 :=
  fun mul_10018 (__10019) -> (__10020) ->
    match __10019 with
    | zero_6  => zero_6
    | succ_7 n_10021 => ((add_17) __10020 ((mul_10018) n_10021 __10020))
    end

#[program]
def div_20 :=
  fun div_10022 (x_10023) -> (y_10024) ->
    match ((lt_15) x_10023 y_10024) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10025 :=
        fun loop_10026 (x_10027) -> (y_10028) ->
          match ((sub_18) x_10027 ((pred_16) y_10028)) with
          | zero_6  => zero_6
          | succ_7 n_10029 => (succ_7 ((loop_10026) n_10029 y_10028))
          end
      in ((loop_10025) x_10023 y_10024)
    end

#[program]
def rem_21 :=
  fun rem_10030 (x_10031) -> (y_10032) ->
    ((sub_18) x_10031 ((mul_19) ((div_20) x_10031 y_10032) y_10032))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_66 :=
  fun free_list_10033 {A_10034} -> (f_10035) -> (__10036) ->
    match __10036 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10037 tl_10038 =>
      let __10039 := ((f_10035) hd_10037) in
      ((free_list_10033) NULL f_10035 tl_10038)
    end

#[program]
def free_listUL_65 :=
  fun free_list_10040 {A_10041} -> (f_10042) -> (__10043) ->
    match __10043 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10044 tl_10045 =>
      let __10046 := ((f_10042) hd_10044) in
      ((free_list_10040) NULL f_10042 tl_10045)
    end

#[program]
def free_listLL_63 :=
  fun free_list_10047 {A_10048} -> (f_10049) -> (__10050) ->
    match __10050 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10051 tl_10052 =>
      let __10053 := ((f_10049) hd_10051) in
      ((free_list_10047) NULL f_10049 tl_10052)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_70 := NULL

#[logical]
def prod0UL_69 := NULL

#[logical]
def prod0LU_68 := NULL

#[logical]
def prod0LL_67 := NULL

#[logical]
def prod1UU_74 := NULL

#[logical]
def prod1UL_73 := NULL

#[logical]
def prod1LU_72 := NULL

#[logical]
def prod1LL_71 := NULL

#[program]
def pow_25 :=
  fun pow_10054 (x_10055) -> (y_10056) ->
    let loop_10057 :=
      fun loop_10058 (acc_10059) -> (y_10060) ->
        match (__lte__ y_10060 0) with
        | true_4  => acc_10059
        | false_5  =>
          ((loop_10058) (__mul__ x_10055 acc_10059) (__sub__ y_10060 1))
        end
    in ((loop_10057) 1 y_10056)

#[program]
def powm_26 :=
  fun powm_10061 (x_10062) -> (y_10063) -> (m_10064) ->
    let loop_10065 :=
      fun loop_10066 (acc_10067) -> (y_10068) ->
        match (__lte__ y_10068 0) with
        | true_4  => acc_10067
        | false_5  =>
          ((loop_10066)
            (__mod__ (__mul__ x_10062 acc_10067) m_10064) (__sub__ y_10068 1))
        end
    in ((loop_10065) 1 y_10063)

#[program]
def ord_27 := fun ord_10069 (c_10070) ->
                (__ord__ c_10070)

#[program]
def chr_28 := fun chr_10071 (i_10072) ->
                (__chr__ i_10072)

#[program]
def str_29 := fun str_10073 (c_10074) ->
                (__push__ "" c_10074)

#[program]
def strlen_30 := fun strlen_10075 (s_10076) ->
                   (__size__ s_10076)

#[program]
def string_of_int_31 :=
  fun string_of_int_10077 (i_10078) ->
    let aux_10079 :=
      fun aux_10080 (i_10081) ->
        match (__lte__ 10 i_10081) with
        | true_4  =>
          let r_10082 := (__mod__ i_10081 10) in
          let i_10083 := (__div__ i_10081 10) in
          (__push__ ((aux_10080) i_10083)
            ((chr_28) (__add__ r_10082 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_10081 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10078) with
    | true_4  => ((aux_10079) i_10078)
    | false_5  => (__cat__ "~" ((aux_10079) (__neg__ i_10078)))
    end

#[program]
def splitU_76 :=
  fun split_10084 (__10085) ->
    match __10085 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_10086 tl_10087 =>
      match tl_10087 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10086 nilUU_24) nilUU_24)
      | consUU_25 hd_10088 tl_10089 =>
        match ((split_10084) tl_10089) with
        | ex1UU_33 m_10090 n_10091 =>
          (ex1UU_33
            (consUU_25 hd_10086 m_10090) (consUU_25 hd_10088 n_10091))
        end
      end
    end

#[program]
def splitL_75 :=
  fun split_10092 (__10093) ->
    match __10093 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_10094 tl_10095 =>
      match tl_10095 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10094 nilUL_22) nilUL_22)
      | consUL_23 hd_10096 tl_10097 =>
        match ((split_10092) tl_10097) with
        | ex1LL_30 m_10098 n_10099 =>
          (ex1LL_30
            (consUL_23 hd_10094 m_10098) (consUL_23 hd_10096 n_10099))
        end
      end
    end

#[program]
def mergeU_78 :=
  fun merge_10100 (__10101) -> (__10102) -o
    match __10101 with
    | nilUU_24  => __10102
    | consUU_25 hd_10103 tl_10104 =>
      match __10102 with
      | nilUU_24  => (consUU_25 hd_10103 tl_10104)
      | consUU_25 hd_10105 tl_10106 =>
        match (__lte__ hd_10103 hd_10105) with
        | true_4  =>
          (consUU_25
            hd_10103 ((merge_10100) tl_10104 (consUU_25 hd_10105 tl_10106)))
        | false_5  =>
          (consUU_25
            hd_10105 ((merge_10100) (consUU_25 hd_10103 tl_10104) tl_10106))
        end
      end
    end

#[program]
def mergeL_77 :=
  fun merge_10107 (__10108) -> (__10109) -o
    match __10108 with
    | nilUL_22  => __10109
    | consUL_23 hd_10110 tl_10111 =>
      match __10109 with
      | nilUL_22  => (consUL_23 hd_10110 tl_10111)
      | consUL_23 hd_10112 tl_10113 =>
        match (__lte__ hd_10110 hd_10112) with
        | true_4  =>
          (consUL_23
            hd_10110 ((merge_10107) tl_10111 (consUL_23 hd_10112 tl_10113)))
        | false_5  =>
          (consUL_23
            hd_10112 ((merge_10107) (consUL_23 hd_10110 tl_10111) tl_10113))
        end
      end
    end

#[program]
def msortU_80 :=
  fun msort_10114 (__10115) ->
    match __10115 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_10116 tl_10117 =>
      match tl_10117 with
      | nilUU_24  => (consUU_25 hd_10116 nilUU_24)
      | consUU_25 hd_10118 tl_10119 =>
        match ((splitU_76)
                (consUU_25 hd_10116 (consUU_25 hd_10118 tl_10119))) with
        | ex1UU_33 m_10120 n_10121 =>
          ((mergeU_78) ((msort_10114) m_10120) ((msort_10114) n_10121))
        end
      end
    end

#[program]
def msortL_79 :=
  fun msort_10122 (__10123) ->
    match __10123 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_10124 tl_10125 =>
      match tl_10125 with
      | nilUL_22  => (consUL_23 hd_10124 nilUL_22)
      | consUL_23 hd_10126 tl_10127 =>
        match ((splitL_75)
                (consUL_23 hd_10124 (consUL_23 hd_10126 tl_10127))) with
        | ex1LL_30 m_10128 n_10129 =>
          ((mergeL_77) ((msort_10122) m_10128) ((msort_10122) n_10129))
        end
      end
    end

-----------------------------------------

#[program]
def idU_36 := fun id_10353 (A_10354) -> (m_10355) ->
                m_10355

#[program]
def idL_35 := fun id_10356 (A_10357) -> (m_10358) ->
                m_10358

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_40 :=
  fun rwl_10359 {A_10360} -> {m_10361} -> {n_10362} -> {B_10363} ->
  {__10364} -> (__10365) ->
    __10365

#[program]
def rwlUL_39 :=
  fun rwl_10366 {A_10367} -> {m_10368} -> {n_10369} -> {B_10370} ->
  {__10371} -> (__10372) ->
    __10372

#[program]
def rwlLU_38 :=
  fun rwl_10373 {A_10374} -> {m_10375} -> {n_10376} -> {B_10377} ->
  {__10378} -> (__10379) ->
    __10379

#[program]
def rwlLL_37 :=
  fun rwl_10380 {A_10381} -> {m_10382} -> {n_10383} -> {B_10384} ->
  {__10385} -> (__10386) ->
    __10386

#[program]
def rwrUU_44 :=
  fun rwr_10387 {A_10388} -> {m_10389} -> {n_10390} -> {B_10391} ->
  {__10392} -> (__10393) ->
    __10393

#[program]
def rwrUL_43 :=
  fun rwr_10394 {A_10395} -> {m_10396} -> {n_10397} -> {B_10398} ->
  {__10399} -> (__10400) ->
    __10400

#[program]
def rwrLU_42 :=
  fun rwr_10401 {A_10402} -> {m_10403} -> {n_10404} -> {B_10405} ->
  {__10406} -> (__10407) ->
    __10407

#[program]
def rwrLL_41 :=
  fun rwr_10408 {A_10409} -> {m_10410} -> {n_10411} -> {B_10412} ->
  {__10413} -> (__10414) ->
    __10414

#[logical]
def congrUUU_52 := NULL

#[logical]
def congrUUL_51 := NULL

#[logical]
def congrULU_50 := NULL

#[logical]
def congrULL_49 := NULL

#[logical]
def congrLUU_48 := NULL

#[logical]
def congrLUL_47 := NULL

#[logical]
def congrLLU_46 := NULL

#[logical]
def congrLLL_45 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_54 := NULL

#[logical]
def ssingL_53 := NULL

#[program]
def sing_elimUU_58 :=
  fun sing_elim_10415 {A_10416} -> {x_10417} -> (__10418) ->
    match __10418 with
    | justUU_17 m_10419 => m_10419
    end

#[program]
def sing_elimUL_57 :=
  fun sing_elim_10420 {A_10421} -> {x_10422} -> (__10423) ->
    match __10423 with
    | justUL_16 m_10424 => m_10424
    end

#[program]
def sing_elimLU_56 :=
  fun sing_elim_10425 {A_10426} -> {x_10427} -> (__10428) ->
    !!

#[program]
def sing_elimLL_55 :=
  fun sing_elim_10429 {A_10430} -> {x_10431} -> (__10432) ->
    match __10432 with
    | justLL_14 m_10433 => m_10433
    end

#[logical]
def sing_uniqUU_62 := NULL

#[logical]
def sing_uniqUL_61 := NULL

#[logical]
def sing_uniqLU_60 := NULL

#[logical]
def sing_uniqLL_59 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_10434 (__10435) ->
    match __10435 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_10436 (__10437) -> (__10438) ->
    match __10437 with
    | true_4  =>
      match __10438 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_10439 (__10440) -> (__10441) ->
    match __10440 with
    | true_4  => true_4
    | false_5  =>
      match __10441 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_10442 (__10443) -> (__10444) -o
    match __10443 with
    | true_4  =>
      match __10444 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __10444 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_10445 (__10446) -> (__10447) ->
    match __10446 with
    | zero_6  => true_4
    | succ_7 n_10448 =>
      match __10447 with
      | zero_6  => false_5 | succ_7 n_10449 => ((lte_10445) n_10448 n_10449)
      end
    end

#[program]
def lt_15 :=
  fun lt_10450 (x_10451) -> (y_10452) ->
    ((lte_14) (succ_7 x_10451) y_10452)

#[program]
def pred_16 :=
  fun pred_10453 (__10454) ->
    match __10454 with
    | zero_6  => zero_6 | succ_7 n_10455 => n_10455
    end

#[program]
def add_17 :=
  fun add_10456 (__10457) -> (__10458) ->
    match __10457 with
    | zero_6  => __10458
    | succ_7 n_10459 => (succ_7 ((add_10456) n_10459 __10458))
    end

#[program]
def sub_18 :=
  fun sub_10460 (__10461) -> (__10462) ->
    match __10462 with
    | zero_6  => __10461
    | succ_7 n_10463 => ((sub_10460) ((pred_16) __10461) n_10463)
    end

#[program]
def mul_19 :=
  fun mul_10464 (__10465) -> (__10466) ->
    match __10465 with
    | zero_6  => zero_6
    | succ_7 n_10467 => ((add_17) __10466 ((mul_10464) n_10467 __10466))
    end

#[program]
def div_20 :=
  fun div_10468 (x_10469) -> (y_10470) ->
    match ((lt_15) x_10469 y_10470) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10471 :=
        fun loop_10472 (x_10473) -> (y_10474) ->
          match ((sub_18) x_10473 ((pred_16) y_10474)) with
          | zero_6  => zero_6
          | succ_7 n_10475 => (succ_7 ((loop_10472) n_10475 y_10474))
          end
      in ((loop_10471) x_10469 y_10470)
    end

#[program]
def rem_21 :=
  fun rem_10476 (x_10477) -> (y_10478) ->
    ((sub_18) x_10477 ((mul_19) ((div_20) x_10477 y_10478) y_10478))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_66 :=
  fun free_list_10479 {A_10480} -> (f_10481) -> (__10482) ->
    match __10482 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10483 tl_10484 =>
      let __10485 := ((f_10481) hd_10483) in
      ((free_list_10479) NULL f_10481 tl_10484)
    end

#[program]
def free_listUL_65 :=
  fun free_list_10486 {A_10487} -> (f_10488) -> (__10489) ->
    match __10489 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10490 tl_10491 =>
      let __10492 := ((f_10488) hd_10490) in
      ((free_list_10486) NULL f_10488 tl_10491)
    end

#[program]
def free_listLL_63 :=
  fun free_list_10493 {A_10494} -> (f_10495) -> (__10496) ->
    match __10496 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10497 tl_10498 =>
      let __10499 := ((f_10495) hd_10497) in
      ((free_list_10493) NULL f_10495 tl_10498)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_70 := NULL

#[logical]
def prod0UL_69 := NULL

#[logical]
def prod0LU_68 := NULL

#[logical]
def prod0LL_67 := NULL

#[logical]
def prod1UU_74 := NULL

#[logical]
def prod1UL_73 := NULL

#[logical]
def prod1LU_72 := NULL

#[logical]
def prod1LL_71 := NULL

#[program]
def pow_25 :=
  fun pow_10500 (x_10501) -> (y_10502) ->
    let loop_10503 :=
      fun loop_10504 (acc_10505) -> (y_10506) ->
        match (__lte__ y_10506 0) with
        | true_4  => acc_10505
        | false_5  =>
          ((loop_10504) (__mul__ x_10501 acc_10505) (__sub__ y_10506 1))
        end
    in ((loop_10503) 1 y_10502)

#[program]
def powm_26 :=
  fun powm_10507 (x_10508) -> (y_10509) -> (m_10510) ->
    let loop_10511 :=
      fun loop_10512 (acc_10513) -> (y_10514) ->
        match (__lte__ y_10514 0) with
        | true_4  => acc_10513
        | false_5  =>
          ((loop_10512)
            (__mod__ (__mul__ x_10508 acc_10513) m_10510) (__sub__ y_10514 1))
        end
    in ((loop_10511) 1 y_10509)

#[program]
def ord_27 := fun ord_10515 (c_10516) ->
                (__ord__ c_10516)

#[program]
def chr_28 := fun chr_10517 (i_10518) ->
                (__chr__ i_10518)

#[program]
def str_29 := fun str_10519 (c_10520) ->
                (__push__ "" c_10520)

#[program]
def strlen_30 := fun strlen_10521 (s_10522) ->
                   (__size__ s_10522)

#[program]
def string_of_int_31 :=
  fun string_of_int_10523 (i_10524) ->
    let aux_10525 :=
      fun aux_10526 (i_10527) ->
        match (__lte__ 10 i_10527) with
        | true_4  =>
          let r_10528 := (__mod__ i_10527 10) in
          let i_10529 := (__div__ i_10527 10) in
          (__push__ ((aux_10526) i_10529)
            ((chr_28) (__add__ r_10528 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_10527 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10524) with
    | true_4  => ((aux_10525) i_10524)
    | false_5  => (__cat__ "~" ((aux_10525) (__neg__ i_10524)))
    end

#[program]
def splitU_76 :=
  fun split_10530 (__10531) ->
    match __10531 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_10532 tl_10533 =>
      match tl_10533 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10532 nilUU_24) nilUU_24)
      | consUU_25 hd_10534 tl_10535 =>
        match ((split_10530) tl_10535) with
        | ex1UU_33 m_10536 n_10537 =>
          (ex1UU_33
            (consUU_25 hd_10532 m_10536) (consUU_25 hd_10534 n_10537))
        end
      end
    end

#[program]
def splitL_75 :=
  fun split_10538 (__10539) ->
    match __10539 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_10540 tl_10541 =>
      match tl_10541 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10540 nilUL_22) nilUL_22)
      | consUL_23 hd_10542 tl_10543 =>
        match ((split_10538) tl_10543) with
        | ex1LL_30 m_10544 n_10545 =>
          (ex1LL_30
            (consUL_23 hd_10540 m_10544) (consUL_23 hd_10542 n_10545))
        end
      end
    end

#[program]
def mergeU_78 :=
  fun merge_10546 (__10547) -> (__10548) -o
    match __10547 with
    | nilUU_24  => __10548
    | consUU_25 hd_10549 tl_10550 =>
      match __10548 with
      | nilUU_24  => (consUU_25 hd_10549 tl_10550)
      | consUU_25 hd_10551 tl_10552 =>
        match (__lte__ hd_10549 hd_10551) with
        | true_4  =>
          (consUU_25
            hd_10549 ((merge_10546) tl_10550 (consUU_25 hd_10551 tl_10552)))
        | false_5  =>
          (consUU_25
            hd_10551 ((merge_10546) (consUU_25 hd_10549 tl_10550) tl_10552))
        end
      end
    end

#[program]
def mergeL_77 :=
  fun merge_10553 (__10554) -> (__10555) -o
    match __10554 with
    | nilUL_22  => __10555
    | consUL_23 hd_10556 tl_10557 =>
      match __10555 with
      | nilUL_22  => (consUL_23 hd_10556 tl_10557)
      | consUL_23 hd_10558 tl_10559 =>
        match (__lte__ hd_10556 hd_10558) with
        | true_4  =>
          (consUL_23
            hd_10556 ((merge_10553) tl_10557 (consUL_23 hd_10558 tl_10559)))
        | false_5  =>
          (consUL_23
            hd_10558 ((merge_10553) (consUL_23 hd_10556 tl_10557) tl_10559))
        end
      end
    end

#[program]
def msortU_80 :=
  fun msort_10560 (__10561) ->
    match __10561 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_10562 tl_10563 =>
      match tl_10563 with
      | nilUU_24  => (consUU_25 hd_10562 nilUU_24)
      | consUU_25 hd_10564 tl_10565 =>
        match ((splitU_76)
                (consUU_25 hd_10562 (consUU_25 hd_10564 tl_10565))) with
        | ex1UU_33 m_10566 n_10567 =>
          ((mergeU_78) ((msort_10560) m_10566) ((msort_10560) n_10567))
        end
      end
    end

#[program]
def msortL_79 :=
  fun msort_10568 (__10569) ->
    match __10569 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_10570 tl_10571 =>
      match tl_10571 with
      | nilUL_22  => (consUL_23 hd_10570 nilUL_22)
      | consUL_23 hd_10572 tl_10573 =>
        match ((splitL_75)
                (consUL_23 hd_10570 (consUL_23 hd_10572 tl_10573))) with
        | ex1LL_30 m_10574 n_10575 =>
          ((mergeL_77) ((msort_10568) m_10574) ((msort_10568) n_10575))
        end
      end
    end

-----------------------------------------

def idU_36 := fun id_10799 (A_10800) -> (m_10801) -> m_10801

def idL_35 := fun id_10802 (A_10803) -> (m_10804) -> m_10804

def rwlUU_40 :=
  fun rwl_10805 (A_10806) -> (m_10807) -> (n_10808) -> (B_10809) ->
  (__10810) -> (__10811) -> __10811

def rwlUL_39 :=
  fun rwl_10812 (A_10813) -> (m_10814) -> (n_10815) -> (B_10816) ->
  (__10817) -> (__10818) -> __10818

def rwlLU_38 :=
  fun rwl_10819 (A_10820) -> (m_10821) -> (n_10822) -> (B_10823) ->
  (__10824) -> (__10825) -> __10825

def rwlLL_37 :=
  fun rwl_10826 (A_10827) -> (m_10828) -> (n_10829) -> (B_10830) ->
  (__10831) -> (__10832) -> __10832

def rwrUU_44 :=
  fun rwr_10833 (A_10834) -> (m_10835) -> (n_10836) -> (B_10837) ->
  (__10838) -> (__10839) -> __10839

def rwrUL_43 :=
  fun rwr_10840 (A_10841) -> (m_10842) -> (n_10843) -> (B_10844) ->
  (__10845) -> (__10846) -> __10846

def rwrLU_42 :=
  fun rwr_10847 (A_10848) -> (m_10849) -> (n_10850) -> (B_10851) ->
  (__10852) -> (__10853) -> __10853

def rwrLL_41 :=
  fun rwr_10854 (A_10855) -> (m_10856) -> (n_10857) -> (B_10858) ->
  (__10859) -> (__10860) -> __10860

def sing_elimUU_58 :=
  fun sing_elim_10861 (A_10862) -> (x_10863) -> (__10864) -> __10864

def sing_elimUL_57 :=
  fun sing_elim_10865 (A_10866) -> (x_10867) -> (__10868) -> __10868

def sing_elimLU_56 :=
  fun sing_elim_10869 (A_10870) -> (x_10871) -> (__10872) -> !!

def sing_elimLL_55 :=
  fun sing_elim_10873 (A_10874) -> (x_10875) -> (__10876) -> __10876

def not_10 :=
  fun not_10877 (__10878) ->
    match __10878 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_10879 (__10880) -> (__10881) ->
    match __10880 with
    | true_4 =>
      match __10881 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_10882 (__10883) -> (__10884) ->
    match __10883 with
    | true_4 => true_4
    | false_5 =>
      match __10884 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_10885 (__10886) -> (__10887) -o
    match __10886 with
    | true_4 =>
      match __10887 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __10887 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_10888 (__10889) -> (__10890) ->
    match __10889 with
    | zero_6  => true_4
    | succ_7 n_10891 =>
      match __10890 with
      | zero_6  => false_5 | succ_7 n_10892 => ((lte_10888) n_10891 n_10892)
      end
    end

def lt_15 :=
  fun lt_10893 (x_10894) -> (y_10895) -> ((lte_14) (succ_7 x_10894) y_10895)

def pred_16 :=
  fun pred_10896 (__10897) ->
    match __10897 with
    | zero_6  => (zero_6 ) | succ_7 n_10898 => n_10898
    end

def add_17 :=
  fun add_10899 (__10900) -> (__10901) ->
    match __10900 with
    | zero_6  => __10901
    | succ_7 n_10902 => (succ_7 ((add_10899) n_10902 __10901))
    end

def sub_18 :=
  fun sub_10903 (__10904) -> (__10905) ->
    match __10905 with
    | zero_6  => __10904
    | succ_7 n_10906 => ((sub_10903) ((pred_16) __10904) n_10906)
    end

def mul_19 :=
  fun mul_10907 (__10908) -> (__10909) ->
    match __10908 with
    | zero_6  => (zero_6 )
    | succ_7 n_10910 => ((add_17) __10909 ((mul_10907) n_10910 __10909))
    end

def div_20 :=
  fun div_10911 (x_10912) -> (y_10913) ->
    match ((lt_15) x_10912 y_10913) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_10914 :=
        fun loop_10915 (x_10916) -> (y_10917) ->
          match ((sub_18) x_10916 ((pred_16) y_10917)) with
          | zero_6  => (zero_6 )
          | succ_7 n_10918 => (succ_7 ((loop_10915) n_10918 y_10917))
          end
      in ((loop_10914) x_10912 y_10913)
    end

def rem_21 :=
  fun rem_10919 (x_10920) -> (y_10921) ->
    ((sub_18) x_10920 ((mul_19) ((div_20) x_10920 y_10921) y_10921))

def free_listUU_66 :=
  fun free_list_10922 (A_10923) -> (f_10924) -> (__10925) ->
    match __10925 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10926 tl_10927 =>
      let __10928 := ((f_10924) hd_10926) in
      ((free_list_10922) NULL f_10924 tl_10927)
    end

def free_listUL_65 :=
  fun free_list_10929 (A_10930) -> (f_10931) -> (__10932) ->
    match __10932 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10933 tl_10934 =>
      let __10935 := ((f_10931) hd_10933) in
      ((free_list_10929) NULL f_10931 tl_10934)
    end

def free_listLL_63 :=
  fun free_list_10936 (A_10937) -> (f_10938) -> (__10939) ->
    match __10939 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10940 tl_10941 =>
      let __10942 := ((f_10938) hd_10940) in
      ((free_list_10936) NULL f_10938 tl_10941)
    end

def pow_25 :=
  fun pow_10943 (x_10944) -> (y_10945) ->
    let loop_10946 :=
      fun loop_10947 (acc_10948) -> (y_10949) ->
        match (__lte__ y_10949 0) with
        | true_4 => acc_10948
        | false_5 =>
          ((loop_10947) (__mul__ x_10944 acc_10948) (__sub__ y_10949 1))
        end
    in ((loop_10946) 1 y_10945)

def powm_26 :=
  fun powm_10950 (x_10951) -> (y_10952) -> (m_10953) ->
    let loop_10954 :=
      fun loop_10955 (acc_10956) -> (y_10957) ->
        match (__lte__ y_10957 0) with
        | true_4 => acc_10956
        | false_5 =>
          ((loop_10955)
            (__mod__ (__mul__ x_10951 acc_10956) m_10953) (__sub__ y_10957 1))
        end
    in ((loop_10954) 1 y_10952)

def ord_27 := fun ord_10958 (c_10959) -> (__ord__ c_10959)

def chr_28 := fun chr_10960 (i_10961) -> (__chr__ i_10961)

def str_29 := fun str_10962 (c_10963) -> (__push__ "" c_10963)

def strlen_30 := fun strlen_10964 (s_10965) -> (__size__ s_10965)

def string_of_int_31 :=
  fun string_of_int_10966 (i_10967) ->
    let aux_10968 :=
      fun aux_10969 (i_10970) ->
        match (__lte__ 10 i_10970) with
        | true_4 =>
          let r_10971 := (__mod__ i_10970 10) in
          let i_10972 := (__div__ i_10970 10) in
          (__push__ ((aux_10969) i_10972)
            ((chr_28) (__add__ r_10971 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_10970 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10967) with
    | true_4 => ((aux_10968) i_10967)
    | false_5 => (__cat__ "~" ((aux_10968) (__neg__ i_10967)))
    end

def splitU_76 :=
  fun split_10973 (__10974) ->
    match __10974 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_10975 tl_10976 =>
      match tl_10976 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10975 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_10977 tl_10978 =>
        match ((split_10973) tl_10978) with
        | ex1UU_33 m_10979 n_10980 =>
          (ex1UU_33
            (consUU_25 hd_10975 m_10979) (consUU_25 hd_10977 n_10980))
        end
      end
    end

def splitL_75 :=
  fun split_10981 (__10982) ->
    match __10982 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_10983 tl_10984 =>
      match tl_10984 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10983 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_10985 tl_10986 =>
        match ((split_10981) tl_10986) with
        | ex1LL_30 m_10987 n_10988 =>
          (ex1LL_30
            (consUL_23 hd_10983 m_10987) (consUL_23 hd_10985 n_10988))
        end
      end
    end

def mergeU_78 :=
  fun merge_10989 (__10990) -> (__10991) -o
    match __10990 with
    | nilUU_24  => __10991
    | consUU_25 hd_10992 tl_10993 =>
      match __10991 with
      | nilUU_24  => (consUU_25 hd_10992 tl_10993)
      | consUU_25 hd_10994 tl_10995 =>
        match (__lte__ hd_10992 hd_10994) with
        | true_4 =>
          (consUU_25
            hd_10992 ((merge_10989) tl_10993 (consUU_25 hd_10994 tl_10995)))
        | false_5 =>
          (consUU_25
            hd_10994 ((merge_10989) (consUU_25 hd_10992 tl_10993) tl_10995))
        end
      end
    end

def mergeL_77 :=
  fun merge_10996 (__10997) -> (__10998) -o
    match __10997 with
    | nilUL_22  => __10998
    | consUL_23 hd_10999 tl_11000 =>
      match __10998 with
      | nilUL_22  => (consUL_23 hd_10999 tl_11000)
      | consUL_23 hd_11001 tl_11002 =>
        match (__lte__ hd_10999 hd_11001) with
        | true_4 =>
          (consUL_23
            hd_10999 ((merge_10996) tl_11000 (consUL_23 hd_11001 tl_11002)))
        | false_5 =>
          (consUL_23
            hd_11001 ((merge_10996) (consUL_23 hd_10999 tl_11000) tl_11002))
        end
      end
    end

def msortU_80 :=
  fun msort_11003 (__11004) ->
    match __11004 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_11005 tl_11006 =>
      match tl_11006 with
      | nilUU_24  => (consUU_25 hd_11005 (nilUU_24 ))
      | consUU_25 hd_11007 tl_11008 =>
        match ((splitU_76)
                (consUU_25 hd_11005 (consUU_25 hd_11007 tl_11008))) with
        | ex1UU_33 m_11009 n_11010 =>
          ((mergeU_78) ((msort_11003) m_11009) ((msort_11003) n_11010))
        end
      end
    end

def msortL_79 :=
  fun msort_11011 (__11012) ->
    match __11012 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_11013 tl_11014 =>
      match tl_11014 with
      | nilUL_22  => (consUL_23 hd_11013 (nilUL_22 ))
      | consUL_23 hd_11015 tl_11016 =>
        match ((splitL_75)
                (consUL_23 hd_11013 (consUL_23 hd_11015 tl_11016))) with
        | ex1LL_30 m_11017 n_11018 =>
          ((mergeL_77) ((msort_11011) m_11017) ((msort_11011) n_11018))
        end
      end
    end

-----------------------------------------

def idU_36 := lam (A_11239) -> (m_11240) -> m_11240

def idL_35 := lam (A_11241) -> (m_11242) -> m_11242

def rwlUU_40 :=
  lam (A_11243) -> (m_11244) -> (n_11245) -> (B_11246) -> (__11247) ->
  (__11248) -> __11248

def rwlUL_39 :=
  lam (A_11249) -> (m_11250) -> (n_11251) -> (B_11252) -> (__11253) ->
  (__11254) -> __11254

def rwlLU_38 :=
  lam (A_11255) -> (m_11256) -> (n_11257) -> (B_11258) -> (__11259) ->
  (__11260) -> __11260

def rwlLL_37 :=
  lam (A_11261) -> (m_11262) -> (n_11263) -> (B_11264) -> (__11265) ->
  (__11266) -> __11266

def rwrUU_44 :=
  lam (A_11267) -> (m_11268) -> (n_11269) -> (B_11270) -> (__11271) ->
  (__11272) -> __11272

def rwrUL_43 :=
  lam (A_11273) -> (m_11274) -> (n_11275) -> (B_11276) -> (__11277) ->
  (__11278) -> __11278

def rwrLU_42 :=
  lam (A_11279) -> (m_11280) -> (n_11281) -> (B_11282) -> (__11283) ->
  (__11284) -> __11284

def rwrLL_41 :=
  lam (A_11285) -> (m_11286) -> (n_11287) -> (B_11288) -> (__11289) ->
  (__11290) -> __11290

def sing_elimUU_58 := lam (A_11291) -> (x_11292) -> (__11293) -> __11293

def sing_elimUL_57 := lam (A_11294) -> (x_11295) -> (__11296) -> __11296

def sing_elimLU_56 := lam (A_11297) -> (x_11298) -> (__11299) -> !!

def sing_elimLL_55 := lam (A_11300) -> (x_11301) -> (__11302) -> __11302

def not_10 :=
  lam (__11303) ->
    match __11303 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__11304) -> (__11305) ->
    match __11304 with
    | true_4 =>
      match __11305 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__11306) -> (__11307) ->
    match __11306 with
    | true_4 => true_4
    | false_5 =>
      match __11307 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__11308) -> (__11309) -o
    match __11308 with
    | true_4 =>
      match __11309 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __11309 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_11310 (__11311) -> (__11312) ->
    match __11311 with
    | zero_6  => true_4
    | succ_7 n_11313 =>
      match __11312 with
      | zero_6  => false_5 | succ_7 n_11314 => ((lte_11310) n_11313 n_11314)
      end
    end

def lt_15 :=
  lam (x_11315) -> (y_11316) -> ((lte_14) (succ_7 x_11315) y_11316)

def pred_16 :=
  lam (__11317) ->
    match __11317 with
    | zero_6  => (zero_6 ) | succ_7 n_11318 => n_11318
    end

def add_17 :=
  fun add_11319 (__11320) -> (__11321) ->
    match __11320 with
    | zero_6  => __11321
    | succ_7 n_11322 => (succ_7 ((add_11319) n_11322 __11321))
    end

def sub_18 :=
  fun sub_11323 (__11324) -> (__11325) ->
    match __11325 with
    | zero_6  => __11324
    | succ_7 n_11326 => ((sub_11323) ((pred_16) __11324) n_11326)
    end

def mul_19 :=
  fun mul_11327 (__11328) -> (__11329) ->
    match __11328 with
    | zero_6  => (zero_6 )
    | succ_7 n_11330 => ((add_17) __11329 ((mul_11327) n_11330 __11329))
    end

def div_20 :=
  lam (x_11331) -> (y_11332) ->
    match ((lt_15) x_11331 y_11332) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_11333 :=
        fun loop_11334 (x_11335) -> (y_11336) ->
          match ((sub_18) x_11335 ((pred_16) y_11336)) with
          | zero_6  => (zero_6 )
          | succ_7 n_11337 => (succ_7 ((loop_11334) n_11337 y_11336))
          end
      in ((loop_11333) x_11331 y_11332)
    end

def rem_21 :=
  lam (x_11338) -> (y_11339) ->
    ((sub_18) x_11338 ((mul_19) ((div_20) x_11338 y_11339) y_11339))

def free_listUU_66 :=
  fun free_list_11340 (A_11341) -> (f_11342) -> (__11343) ->
    match __11343 with
    | nilUU_24  => tt_3
    | consUU_25 hd_11344 tl_11345 =>
      let __11346 := ((f_11342) hd_11344) in
      ((free_list_11340) NULL f_11342 tl_11345)
    end

def free_listUL_65 :=
  fun free_list_11347 (A_11348) -> (f_11349) -> (__11350) ->
    match __11350 with
    | nilUL_22  => tt_3
    | consUL_23 hd_11351 tl_11352 =>
      let __11353 := ((f_11349) hd_11351) in
      ((free_list_11347) NULL f_11349 tl_11352)
    end

def free_listLL_63 :=
  fun free_list_11354 (A_11355) -> (f_11356) -> (__11357) ->
    match __11357 with
    | nilLL_18  => tt_3
    | consLL_19 hd_11358 tl_11359 =>
      let __11360 := ((f_11356) hd_11358) in
      ((free_list_11354) NULL f_11356 tl_11359)
    end

def pow_25 :=
  lam (x_11361) -> (y_11362) ->
    let loop_11363 :=
      fun loop_11364 (acc_11365) -> (y_11366) ->
        match (__lte__ y_11366 0) with
        | true_4 => acc_11365
        | false_5 =>
          ((loop_11364) (__mul__ x_11361 acc_11365) (__sub__ y_11366 1))
        end
    in ((loop_11363) 1 y_11362)

def powm_26 :=
  lam (x_11367) -> (y_11368) -> (m_11369) ->
    let loop_11370 :=
      fun loop_11371 (acc_11372) -> (y_11373) ->
        match (__lte__ y_11373 0) with
        | true_4 => acc_11372
        | false_5 =>
          ((loop_11371)
            (__mod__ (__mul__ x_11367 acc_11372) m_11369) (__sub__ y_11373 1))
        end
    in ((loop_11370) 1 y_11368)

def ord_27 := lam (c_11374) -> (__ord__ c_11374)

def chr_28 := lam (i_11375) -> (__chr__ i_11375)

def str_29 := lam (c_11376) -> (__push__ "" c_11376)

def strlen_30 := lam (s_11377) -> (__size__ s_11377)

def string_of_int_31 :=
  lam (i_11378) ->
    let aux_11379 :=
      fun aux_11380 (i_11381) ->
        match (__lte__ 10 i_11381) with
        | true_4 =>
          let r_11382 := (__mod__ i_11381 10) in
          let i_11383 := (__div__ i_11381 10) in
          (__push__ ((aux_11380) i_11383)
            ((chr_28) (__add__ r_11382 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_11381 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_11378) with
    | true_4 => ((aux_11379) i_11378)
    | false_5 => (__cat__ "~" ((aux_11379) (__neg__ i_11378)))
    end

def splitU_76 :=
  fun split_11384 (__11385) ->
    match __11385 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_11386 tl_11387 =>
      match tl_11387 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_11386 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_11388 tl_11389 =>
        match ((split_11384) tl_11389) with
        | ex1UU_33 m_11390 n_11391 =>
          (ex1UU_33
            (consUU_25 hd_11386 m_11390) (consUU_25 hd_11388 n_11391))
        end
      end
    end

def splitL_75 :=
  fun split_11392 (__11393) ->
    match __11393 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_11394 tl_11395 =>
      match tl_11395 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_11394 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_11396 tl_11397 =>
        match ((split_11392) tl_11397) with
        | ex1LL_30 m_11398 n_11399 =>
          (ex1LL_30
            (consUL_23 hd_11394 m_11398) (consUL_23 hd_11396 n_11399))
        end
      end
    end

def mergeU_78 :=
  fun merge_11400 (__11401) -> (__11402) -o
    match __11401 with
    | nilUU_24  => __11402
    | consUU_25 hd_11403 tl_11404 =>
      match __11402 with
      | nilUU_24  => (consUU_25 hd_11403 tl_11404)
      | consUU_25 hd_11405 tl_11406 =>
        match (__lte__ hd_11403 hd_11405) with
        | true_4 =>
          (consUU_25
            hd_11403 ((merge_11400) tl_11404 (consUU_25 hd_11405 tl_11406)))
        | false_5 =>
          (consUU_25
            hd_11405 ((merge_11400) (consUU_25 hd_11403 tl_11404) tl_11406))
        end
      end
    end

def mergeL_77 :=
  fun merge_11407 (__11408) -> (__11409) -o
    match __11408 with
    | nilUL_22  => __11409
    | consUL_23 hd_11410 tl_11411 =>
      match __11409 with
      | nilUL_22  => (consUL_23 hd_11410 tl_11411)
      | consUL_23 hd_11412 tl_11413 =>
        match (__lte__ hd_11410 hd_11412) with
        | true_4 =>
          (consUL_23
            hd_11410 ((merge_11407) tl_11411 (consUL_23 hd_11412 tl_11413)))
        | false_5 =>
          (consUL_23
            hd_11412 ((merge_11407) (consUL_23 hd_11410 tl_11411) tl_11413))
        end
      end
    end

def msortU_80 :=
  fun msort_11414 (__11415) ->
    match __11415 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_11416 tl_11417 =>
      match tl_11417 with
      | nilUU_24  => (consUU_25 hd_11416 (nilUU_24 ))
      | consUU_25 hd_11418 tl_11419 =>
        match ((splitU_76)
                (consUU_25 hd_11416 (consUU_25 hd_11418 tl_11419))) with
        | ex1UU_33 m_11420 n_11421 =>
          ((mergeU_78) ((msort_11414) m_11420) ((msort_11414) n_11421))
        end
      end
    end

def msortL_79 :=
  fun msort_11422 (__11423) ->
    match __11423 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_11424 tl_11425 =>
      match tl_11425 with
      | nilUL_22  => (consUL_23 hd_11424 (nilUL_22 ))
      | consUL_23 hd_11426 tl_11427 =>
        match ((splitL_75)
                (consUL_23 hd_11424 (consUL_23 hd_11426 tl_11427))) with
        | ex1LL_30 m_11428 n_11429 =>
          ((mergeL_77) ((msort_11422) m_11428) ((msort_11422) n_11429))
        end
      end
    end

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_231 := push("", c_230);
  return x_231;
}

fn strlen_232(s_233%U) {
  x_234 := size(s_233);
  return x_234;
}

fn string_of_int_235(i_236%U) {
  x_238 :=
    fn aux_239(i_240%U) {
      x_242 := lte(10, i_240);
      match(x_242){
        true_4() => {
          x_244 := mul(i_240, 10);
          r_243 := x_244;
          x_246 := mul(i_240, 10);
          i_245 := x_246;
          x_248 := aux_239(i_245);
          x_251 := ord_223(0);
          x_250 := add(r_243, x_251);
          x_249 := chr_226(x_250);
          x_247 := push(x_248, x_249);
          x_241 := x_247;
        }
        false_5() => {
          x_255 := ord_223(0);
          x_254 := add(i_240, x_255);
          x_253 := chr_226(x_254);
          x_252 := str_229(x_253);
          x_241 := x_252;
        }
      }
      return x_241;
    };
  aux_237 := x_238;
  x_257 := lt(0, i_236);
  match(x_257){
    true_4() => {
      x_258 := aux_237(i_236);
      x_256 := x_258;
    }
    false_5() => {
      x_261 := neg(i_236);
      x_260 := aux_237(x_261);
      x_259 := cat("~", x_260);
      x_256 := x_259;
    }
  }
  return x_256;
}

fn splitU_262(__263%U) {
  match[U](__263){
    nilUU_24() => {
      x_265 := mkconstr(nilUU_24, []);
      x_266 := mkconstr(nilUU_24, []);
      x_267 := mkconstr(ex1UU_33, [x_265, x_266]);
      x_264 := x_267;
    }
    consUU_25(hd_268, tl_269) => {
      match[U](tl_269){
        nilUU_24() => {
          x_271 := mkconstr(nilUU_24, []);
          x_272 := mkconstr(consUU_25, [hd_268, x_271]);
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(ex1UU_33, [x_272, x_273]);
          x_270 := x_274;
        }
        consUU_25(hd_275, tl_276) => {
          x_278 := splitU_262(tl_276);
          match[L](x_278){
            ex1UU_33(m_279, n_280) => {
              x_281 := mkconstr(consUU_25, [hd_268, m_279]);
              x_282 := mkconstr(consUU_25, [hd_275, n_280]);
              x_283 := mkconstr(ex1UU_33, [x_281, x_282]);
              x_277 := x_283;
            }
          }
          x_270 := x_277;
        }
      }
      x_264 := x_270;
    }
  }
  return x_264;
}

fn splitL_284(__285%U) {
  match[L](__285){
    nilUL_22() => {
      x_287 := mkconstr(nilUL_22, []);
      x_288 := mkconstr(nilUL_22, []);
      x_289 := mkconstr(ex1LL_30, [x_287, x_288]);
      x_286 := x_289;
    }
    consUL_23(hd_290, tl_291) => {
      match[L](tl_291){
        nilUL_22() => {
          x_293 := mkconstr(nilUL_22, []);
          x_294 := mkconstr(consUL_23, [hd_290, x_293]);
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(ex1LL_30, [x_294, x_295]);
          x_292 := x_296;
        }
        consUL_23(hd_297, tl_298) => {
          x_300 := splitL_284(tl_298);
          match[L](x_300){
            ex1LL_30(m_301, n_302) => {
              x_303 := mkconstr(consUL_23, [hd_290, m_301]);
              x_304 := mkconstr(consUL_23, [hd_297, n_302]);
              x_305 := mkconstr(ex1LL_30, [x_303, x_304]);
              x_299 := x_305;
            }
          }
          x_292 := x_299;
        }
      }
      x_286 := x_292;
    }
  }
  return x_286;
}

fn mergeU_306(__307%U, __308%L) {
  match[U](__307){
    nilUU_24() => {
      x_309 := __308;
    }
    consUU_25(hd_310, tl_311) => {
      match[U](__308){
        nilUU_24() => {
          x_313 := mkconstr(consUU_25, [hd_310, tl_311]);
          x_312 := x_313;
        }
        consUU_25(hd_314, tl_315) => {
          x_317 := lte(hd_310, hd_314);
          match(x_317){
            true_4() => {
              x_319 := mkconstr(consUU_25, [hd_314, tl_315]);
              x_318 := mergeU_306(tl_311, x_319);
              x_320 := mkconstr(consUU_25, [hd_310, x_318]);
              x_316 := x_320;
            }
            false_5() => {
              x_322 := mkconstr(consUU_25, [hd_310, tl_311]);
              x_321 := mergeU_306(x_322, tl_315);
              x_323 := mkconstr(consUU_25, [hd_314, x_321]);
              x_316 := x_323;
            }
          }
          x_312 := x_316;
        }
      }
      x_309 := x_312;
    }
  }
  return x_309;
}

fn mergeL_324(__325%U, __326%L) {
  match[L](__325){
    nilUL_22() => {
      x_327 := __326;
    }
    consUL_23(hd_328, tl_329) => {
      match[L](__326){
        nilUL_22() => {
          x_331 := mkconstr(consUL_23, [hd_328, tl_329]);
          x_330 := x_331;
        }
        consUL_23(hd_332, tl_333) => {
          x_335 := lte(hd_328, hd_332);
          match(x_335){
            true_4() => {
              x_337 := mkconstr(consUL_23, [hd_332, tl_333]);
              x_336 := mergeL_324(tl_329, x_337);
              x_338 := mkconstr(consUL_23, [hd_328, x_336]);
              x_334 := x_338;
            }
            false_5() => {
              x_340 := mkconstr(consUL_23, [hd_328, tl_329]);
              x_339 := mergeL_324(x_340, tl_333);
              x_341 := mkconstr(consUL_23, [hd_332, x_339]);
              x_334 := x_341;
            }
          }
          x_330 := x_334;
        }
      }
      x_327 := x_330;
    }
  }
  return x_327;
}

fn msortU_342(__343%U) {
  match[U](__343){
    nilUU_24() => {
      x_345 := mkconstr(nilUU_24, []);
      x_344 := x_345;
    }
    consUU_25(hd_346, tl_347) => {
      match[U](tl_347){
        nilUU_24() => {
          x_349 := mkconstr(nilUU_24, []);
          x_350 := mkconstr(consUU_25, [hd_346, x_349]);
          x_348 := x_350;
        }
        consUU_25(hd_351, tl_352) => {
          x_355 := mkconstr(consUU_25, [hd_351, tl_352]);
          x_356 := mkconstr(consUU_25, [hd_346, x_355]);
          x_354 := splitU_262(x_356);
          match[L](x_354){
            ex1UU_33(m_357, n_358) => {
              x_360 := msortU_342(m_357);
              x_361 := msortU_342(n_358);
              x_359 := mergeU_306(x_360, x_361);
              x_353 := x_359;
            }
          }
          x_348 := x_353;
        }
      }
      x_344 := x_348;
    }
  }
  return x_344;
}

fn msortL_362(__363%U) {
  match[L](__363){
    nilUL_22() => {
      x_365 := mkconstr(nilUL_22, []);
      x_364 := x_365;
    }
    consUL_23(hd_366, tl_367) => {
      match[L](tl_367){
        nilUL_22() => {
          x_369 := mkconstr(nilUL_22, []);
          x_370 := mkconstr(consUL_23, [hd_366, x_369]);
          x_368 := x_370;
        }
        consUL_23(hd_371, tl_372) => {
          x_375 := mkconstr(consUL_23, [hd_371, tl_372]);
          x_376 := mkconstr(consUL_23, [hd_366, x_375]);
          x_374 := splitL_284(x_376);
          match[L](x_374){
            ex1LL_30(m_377, n_378) => {
              x_380 := msortL_362(m_377);
              x_381 := msortL_362(n_378);
              x_379 := mergeL_324(x_380, x_381);
              x_373 := x_379;
            }
          }
          x_368 := x_373;
        }
      }
      x_364 := x_368;
    }
  }
  return x_364;
}

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_231 := push("", c_230);
  return x_231;
}

fn strlen_232(s_233%U) {
  x_234 := size(s_233);
  return x_234;
}

fn string_of_int_235(i_236%U) {
  x_238 :=
    fn aux_239(i_240%U) {
      x_242 := lte(10, i_240);
      match(x_242){
        true_4() => {
          x_244 := mul(i_240, 10);
          r_243 := x_244;
          x_246 := mul(i_240, 10);
          i_245 := x_246;
          x_248 := aux_239(i_245);
          x_251 := ord_223(0);
          x_250 := add(r_243, x_251);
          x_249 := chr_226(x_250);
          x_247 := push(x_248, x_249);
          x_241 := x_247;
        }
        false_5() => {
          x_255 := ord_223(0);
          x_254 := add(i_240, x_255);
          x_253 := chr_226(x_254);
          x_252 := str_229(x_253);
          x_241 := x_252;
        }
      }
      return x_241;
    };
  aux_237 := x_238;
  x_257 := lt(0, i_236);
  match(x_257){
    true_4() => {
      x_258 := aux_237(i_236);
      x_256 := x_258;
    }
    false_5() => {
      x_261 := neg(i_236);
      x_260 := aux_237(x_261);
      x_259 := cat("~", x_260);
      x_256 := x_259;
    }
  }
  return x_256;
}

fn splitU_262(__263%U) {
  match[U](__263){
    nilUU_24() => {
      x_265 := mkconstr(nilUU_24, []);
      x_266 := mkconstr(nilUU_24, []);
      x_267 := mkconstr(ex1UU_33, [x_265, x_266]);
      x_264 := x_267;
    }
    consUU_25(hd_268, tl_269) => {
      match[U](tl_269){
        nilUU_24() => {
          x_271 := mkconstr(nilUU_24, []);
          x_272 := mkconstr(consUU_25, [hd_268, x_271]);
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(ex1UU_33, [x_272, x_273]);
          x_270 := x_274;
        }
        consUU_25(hd_275, tl_276) => {
          x_278 := splitU_262(tl_276);
          match[L](x_278){
            ex1UU_33(m_279, n_280) => {
              x_281 := reconstr(x_278, consUU_25, [hd_268, m_279]);
              x_282 := mkconstr(consUU_25, [hd_275, n_280]);
              x_283 := mkconstr(ex1UU_33, [x_281, x_282]);
              x_277 := x_283;
            }
          }
          x_270 := x_277;
        }
      }
      x_264 := x_270;
    }
  }
  return x_264;
}

fn splitL_284(__285%U) {
  match[L](__285){
    nilUL_22() => {
      x_287 := reconstr(__285, nilUL_22, []);
      x_288 := mkconstr(nilUL_22, []);
      x_289 := mkconstr(ex1LL_30, [x_287, x_288]);
      x_286 := x_289;
    }
    consUL_23(hd_290, tl_291) => {
      match[L](tl_291){
        nilUL_22() => {
          x_293 := reconstr(tl_291, nilUL_22, []);
          x_294 := reconstr(__285, consUL_23, [hd_290, x_293]);
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(ex1LL_30, [x_294, x_295]);
          x_292 := x_296;
        }
        consUL_23(hd_297, tl_298) => {
          x_300 := splitL_284(tl_298);
          match[L](x_300){
            ex1LL_30(m_301, n_302) => {
              x_303 := reconstr(x_300, consUL_23, [hd_290, m_301]);
              x_304 := reconstr(tl_291, consUL_23, [hd_297, n_302]);
              x_305 := reconstr(__285, ex1LL_30, [x_303, x_304]);
              x_299 := x_305;
            }
          }
          x_292 := x_299;
        }
      }
      x_286 := x_292;
    }
  }
  return x_286;
}

fn mergeU_306(__307%U, __308%L) {
  match[U](__307){
    nilUU_24() => {
      x_309 := __308;
    }
    consUU_25(hd_310, tl_311) => {
      match[U](__308){
        nilUU_24() => {
          x_313 := mkconstr(consUU_25, [hd_310, tl_311]);
          x_312 := x_313;
        }
        consUU_25(hd_314, tl_315) => {
          x_317 := lte(hd_310, hd_314);
          match(x_317){
            true_4() => {
              x_319 := mkconstr(consUU_25, [hd_314, tl_315]);
              x_318 := mergeU_306(tl_311, x_319);
              x_320 := mkconstr(consUU_25, [hd_310, x_318]);
              x_316 := x_320;
            }
            false_5() => {
              x_322 := mkconstr(consUU_25, [hd_310, tl_311]);
              x_321 := mergeU_306(x_322, tl_315);
              x_323 := mkconstr(consUU_25, [hd_314, x_321]);
              x_316 := x_323;
            }
          }
          x_312 := x_316;
        }
      }
      x_309 := x_312;
    }
  }
  return x_309;
}

fn mergeL_324(__325%U, __326%L) {
  match[L](__325){
    nilUL_22() => {
      x_327 := __326;
      free(__325);
    }
    consUL_23(hd_328, tl_329) => {
      match[L](__326){
        nilUL_22() => {
          x_331 := reconstr(__325, consUL_23, [hd_328, tl_329]);
          x_330 := x_331;
          free(__326);
        }
        consUL_23(hd_332, tl_333) => {
          x_335 := lte(hd_328, hd_332);
          match(x_335){
            true_4() => {
              x_337 := reconstr(__326, consUL_23, [hd_332, tl_333]);
              x_336 := mergeL_324(tl_329, x_337);
              x_338 := reconstr(__325, consUL_23, [hd_328, x_336]);
              x_334 := x_338;
            }
            false_5() => {
              x_340 := reconstr(__326, consUL_23, [hd_328, tl_329]);
              x_339 := mergeL_324(x_340, tl_333);
              x_341 := reconstr(__325, consUL_23, [hd_332, x_339]);
              x_334 := x_341;
            }
          }
          x_330 := x_334;
        }
      }
      x_327 := x_330;
    }
  }
  return x_327;
}

fn msortU_342(__343%U) {
  match[U](__343){
    nilUU_24() => {
      x_345 := mkconstr(nilUU_24, []);
      x_344 := x_345;
    }
    consUU_25(hd_346, tl_347) => {
      match[U](tl_347){
        nilUU_24() => {
          x_349 := mkconstr(nilUU_24, []);
          x_350 := mkconstr(consUU_25, [hd_346, x_349]);
          x_348 := x_350;
        }
        consUU_25(hd_351, tl_352) => {
          x_355 := mkconstr(consUU_25, [hd_351, tl_352]);
          x_356 := mkconstr(consUU_25, [hd_346, x_355]);
          x_354 := splitU_262(x_356);
          match[L](x_354){
            ex1UU_33(m_357, n_358) => {
              x_360 := msortU_342(m_357);
              x_361 := msortU_342(n_358);
              x_359 := mergeU_306(x_360, x_361);
              x_353 := x_359;
              free(x_354);
            }
          }
          x_348 := x_353;
        }
      }
      x_344 := x_348;
    }
  }
  return x_344;
}

fn msortL_362(__363%U) {
  match[L](__363){
    nilUL_22() => {
      x_365 := reconstr(__363, nilUL_22, []);
      x_364 := x_365;
    }
    consUL_23(hd_366, tl_367) => {
      match[L](tl_367){
        nilUL_22() => {
          x_369 := reconstr(tl_367, nilUL_22, []);
          x_370 := reconstr(__363, consUL_23, [hd_366, x_369]);
          x_368 := x_370;
        }
        consUL_23(hd_371, tl_372) => {
          x_375 := reconstr(tl_367, consUL_23, [hd_371, tl_372]);
          x_376 := reconstr(__363, consUL_23, [hd_366, x_375]);
          x_374 := splitL_284(x_376);
          match[L](x_374){
            ex1LL_30(m_377, n_378) => {
              x_380 := msortL_362(m_377);
              x_381 := msortL_362(n_378);
              x_379 := mergeL_324(x_380, x_381);
              x_373 := x_379;
              free(x_374);
            }
          }
          x_368 := x_373;
        }
      }
      x_364 := x_368;
    }
  }
  return x_364;
}

-----------------------------------------

fn fn0idU_382(A_2, m_3) {
  
  return m_3;
}

fn fn1idU_383(env) {
  A_2 := env[1]
  m_3 := env[2]
  x_384 := fn0idU_382(A_2, m_3);
  return x_384;
}

fn fn0idL_386(A_5, m_6) {
  
  return m_6;
}

fn fn1idL_387(env) {
  A_5 := env[1]
  m_6 := env[2]
  x_388 := fn0idL_386(A_5, m_6);
  return x_388;
}

fn fn0rwlUU_390(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1rwlUU_391(env) {
  A_8 := env[1]
  m_9 := env[2]
  n_10 := env[3]
  B_11 := env[4]
  __12 := env[5]
  __13 := env[6]
  x_392 := fn0rwlUU_390(A_8, m_9, n_10, B_11, __12, __13);
  return x_392;
}

fn fn0rwlUL_394(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1rwlUL_395(env) {
  A_15 := env[1]
  m_16 := env[2]
  n_17 := env[3]
  B_18 := env[4]
  __19 := env[5]
  __20 := env[6]
  x_396 := fn0rwlUL_394(A_15, m_16, n_17, B_18, __19, __20);
  return x_396;
}

fn fn0rwlLU_398(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1rwlLU_399(env) {
  A_22 := env[1]
  m_23 := env[2]
  n_24 := env[3]
  B_25 := env[4]
  __26 := env[5]
  __27 := env[6]
  x_400 := fn0rwlLU_398(A_22, m_23, n_24, B_25, __26, __27);
  return x_400;
}

fn fn0rwlLL_402(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1rwlLL_403(env) {
  A_29 := env[1]
  m_30 := env[2]
  n_31 := env[3]
  B_32 := env[4]
  __33 := env[5]
  __34 := env[6]
  x_404 := fn0rwlLL_402(A_29, m_30, n_31, B_32, __33, __34);
  return x_404;
}

fn fn0rwrUU_406(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1rwrUU_407(env) {
  A_36 := env[1]
  m_37 := env[2]
  n_38 := env[3]
  B_39 := env[4]
  __40 := env[5]
  __41 := env[6]
  x_408 := fn0rwrUU_406(A_36, m_37, n_38, B_39, __40, __41);
  return x_408;
}

fn fn0rwrUL_410(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1rwrUL_411(env) {
  A_43 := env[1]
  m_44 := env[2]
  n_45 := env[3]
  B_46 := env[4]
  __47 := env[5]
  __48 := env[6]
  x_412 := fn0rwrUL_410(A_43, m_44, n_45, B_46, __47, __48);
  return x_412;
}

fn fn0rwrLU_414(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1rwrLU_415(env) {
  A_50 := env[1]
  m_51 := env[2]
  n_52 := env[3]
  B_53 := env[4]
  __54 := env[5]
  __55 := env[6]
  x_416 := fn0rwrLU_414(A_50, m_51, n_52, B_53, __54, __55);
  return x_416;
}

fn fn0rwrLL_418(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1rwrLL_419(env) {
  A_57 := env[1]
  m_58 := env[2]
  n_59 := env[3]
  B_60 := env[4]
  __61 := env[5]
  __62 := env[6]
  x_420 := fn0rwrLL_418(A_57, m_58, n_59, B_60, __61, __62);
  return x_420;
}

fn fn0sing_elimUU_422(A_64, x_65, __66) {
  
  return __66;
}

fn fn1sing_elimUU_423(env) {
  A_64 := env[1]
  x_65 := env[2]
  __66 := env[3]
  x_424 := fn0sing_elimUU_422(A_64, x_65, __66);
  return x_424;
}

fn fn0sing_elimUL_426(A_68, x_69, __70) {
  
  return __70;
}

fn fn1sing_elimUL_427(env) {
  A_68 := env[1]
  x_69 := env[2]
  __70 := env[3]
  x_428 := fn0sing_elimUL_426(A_68, x_69, __70);
  return x_428;
}

fn fn0sing_elimLU_430(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1sing_elimLU_431(env) {
  A_72 := env[1]
  x_73 := env[2]
  __74 := env[3]
  x_432 := fn0sing_elimLU_430(A_72, x_73, __74);
  return x_432;
}

fn fn0sing_elimLL_434(A_76, x_77, __78) {
  
  return __78;
}

fn fn1sing_elimLL_435(env) {
  A_76 := env[1]
  x_77 := env[2]
  __78 := env[3]
  x_436 := fn0sing_elimLL_434(A_76, x_77, __78);
  return x_436;
}

fn fn0not_438(__80) {
  switch(__80){ true_4 => {
                  x_81 := false_5;
                }
                false_5 => {
                  x_81 := true_4;
                }
  }
  return x_81;
}

fn fn1not_439(env) {
  __80 := env[1]
  x_440 := fn0not_438(__80);
  return x_440;
}

fn fn0and_442(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn fn1and_443(env) {
  __83 := env[1]
  __84 := env[2]
  x_444 := fn0and_442(__83, __84);
  return x_444;
}

fn fn0or_446(__88, __89) {
  switch(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn fn1or_447(env) {
  __88 := env[1]
  __89 := env[2]
  x_448 := fn0or_446(__88, __89);
  return x_448;
}

fn fn0xor_450(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn fn1xor_451(env) {
  __93 := env[1]
  __94 := env[2]
  x_452 := fn0xor_450(__93, __94);
  return x_452;
}

fn fn0lte_454(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      x_101 := true_4;
    }
    succ_7 => {
      getbox(n_102, ctagof(__99), 0)
      switch(ctagof(__100)){
        zero_6 => {
          x_103 := false_5;
        }
        succ_7 => {
          getbox(n_104, ctagof(__100), 0)
          x_105 := fn0lte_454(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn fn1lte_455(env) {
  __99 := env[1]
  __100 := env[2]
  x_456 := fn0lte_454(__99, __100);
  return x_456;
}

fn fn0lt_458(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0)
  x_109 := fn0lte_454(x_110, y_108);
  return x_109;
}

fn fn1lt_459(env) {
  x_107 := env[1]
  y_108 := env[2]
  x_460 := fn0lt_458(x_107, y_108);
  return x_460;
}

fn fn0pred_462(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      x_113 := x_114;
    }
    succ_7 => {
      getbox(n_115, ctagof(__112), 0)
      x_113 := n_115;
    }
  }
  return x_113;
}

fn fn1pred_463(env) {
  __112 := env[1]
  x_464 := fn0pred_462(__112);
  return x_464;
}

fn fn0add_466(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      x_119 := __118;
    }
    succ_7 => {
      getbox(n_120, ctagof(__117), 0)
      x_121 := fn0add_466(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0)
      x_119 := x_122;
    }
  }
  return x_119;
}

fn fn1add_467(env) {
  __117 := env[1]
  __118 := env[2]
  x_468 := fn0add_466(__117, __118);
  return x_468;
}

fn fn0sub_470(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      x_126 := __124;
    }
    succ_7 => {
      getbox(n_127, ctagof(__125), 0)
      x_129 := fn0pred_462(__124);
      x_128 := fn0sub_470(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn fn1sub_471(env) {
  __124 := env[1]
  __125 := env[2]
  x_472 := fn0sub_470(__124, __125);
  return x_472;
}

fn fn0mul_474(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      x_133 := x_134;
    }
    succ_7 => {
      getbox(n_135, ctagof(__131), 0)
      x_137 := fn0mul_474(n_135, __132);
      x_136 := fn0add_466(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn fn1mul_475(env) {
  __131 := env[1]
  __132 := env[2]
  x_476 := fn0mul_474(__131, __132);
  return x_476;
}

fn fn0div_478(x_139, y_140) {
  x_142 := fn0lt_458(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      x_141 := x_143;
    }
    false_5 => {
      mkclo(x_145, fn1loop_480, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      loop_144 := x_145;
      appc(x_484, loop_144, x_139);
      appc(x_485, x_484, y_140);
      x_156 := x_486;
      x_141 := x_156;
    }
  }
  return x_141;
}

fn fn1div_479(env) {
  x_139 := env[1]
  y_140 := env[2]
  x_487 := fn0div_478(x_139, y_140);
  return x_487;
}

fn fn0rem_489(x_158, y_159) {
  x_162 := fn0div_478(x_158, y_159);
  x_161 := fn0mul_474(x_162, y_159);
  x_160 := fn0sub_470(x_158, x_161);
  return x_160;
}

fn fn1rem_490(env) {
  x_158 := env[1]
  y_159 := env[2]
  x_491 := fn0rem_489(x_158, y_159);
  return x_491;
}

fn fn0free_listUU_493(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      x_167 := tt_3;
    }
    consUU_25 => {
      getbox(hd_168, ctagof(__166), 0)
      getbox(tl_169, ctagof(__166), 1)
      appc(x_495, f_165, hd_168);
      x_171 := x_496;
      __170 := x_171;
      x_172 := fn0free_listUU_493(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn fn1free_listUU_494(env) {
  A_164 := env[1]
  f_165 := env[2]
  __166 := env[3]
  x_497 := fn0free_listUU_493(A_164, f_165, __166);
  return x_497;
}

fn fn0free_listUL_499(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23 => {
      getbox(hd_178, ctagof(__176), 0)
      getbox(tl_179, ctagof(__176), 1)
      appc(x_501, f_175, hd_178);
      x_181 := x_502;
      __180 := x_181;
      x_182 := fn0free_listUL_499(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn fn1free_listUL_500(env) {
  A_174 := env[1]
  f_175 := env[2]
  __176 := env[3]
  x_503 := fn0free_listUL_499(A_174, f_175, __176);
  return x_503;
}

fn fn0free_listLL_505(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19 => {
      getbox(hd_188, ctagof(__186), 0)
      getbox(tl_189, ctagof(__186), 1)
      appc(x_507, f_185, hd_188);
      x_191 := x_508;
      __190 := x_191;
      x_192 := fn0free_listLL_505(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn fn1free_listLL_506(env) {
  A_184 := env[1]
  f_185 := env[2]
  __186 := env[3]
  x_509 := fn0free_listLL_505(A_184, f_185, __186);
  return x_509;
}

fn fn0pow_511(x_194, y_195) {
  mkclo(x_197, fn1loop_513, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  loop_196 := x_197;
  appc(x_517, loop_196, 1);
  appc(x_518, x_517, y_195);
  x_206 := x_519;
  return x_206;
}

fn fn1pow_512(env) {
  x_194 := env[1]
  y_195 := env[2]
  x_520 := fn0pow_511(x_194, y_195);
  return x_520;
}

fn fn0powm_522(x_208, y_209, m_210) {
  mkclo(x_212, fn1loop_524, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  loop_211 := x_212;
  appc(x_528, loop_211, 1);
  appc(x_529, x_528, y_209);
  x_222 := x_530;
  return x_222;
}

fn fn1powm_523(env) {
  x_208 := env[1]
  y_209 := env[2]
  m_210 := env[3]
  x_531 := fn0powm_522(x_208, y_209, m_210);
  return x_531;
}

fn fn0ord_533(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1ord_534(env) {
  c_224 := env[1]
  x_535 := fn0ord_533(c_224);
  return x_535;
}

fn fn0chr_537(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1chr_538(env) {
  i_227 := env[1]
  x_539 := fn0chr_537(i_227);
  return x_539;
}

fn fn0str_541(c_230) {
  push(x_231, "", c_230);
  return x_231;
}

fn fn1str_542(env) {
  c_230 := env[1]
  x_543 := fn0str_541(c_230);
  return x_543;
}

fn fn0strlen_545(s_233) {
  size(x_234, s_233);
  return x_234;
}

fn fn1strlen_546(env) {
  s_233 := env[1]
  x_547 := fn0strlen_545(s_233);
  return x_547;
}

fn fn0string_of_int_549(i_236) {
  mkclo(x_238, fn1aux_551, fvc:=3, argc:=1);
  setclo(x_238, ord_223, 1);
  setclo(x_238, chr_226, 2);
  setclo(x_238, str_229, 3);
  aux_237 := x_238;
  lte(x_257, 0, i_236);
  switch(x_257){
    true_4 => {
      appc(x_554, aux_237, i_236);
      x_258 := x_555;
      x_256 := x_258;
    }
    false_5 => {
      neg(x_261, i_236);
      appc(x_556, aux_237, x_261);
      x_260 := x_557;
      cat(x_259, "~", x_260);
      x_256 := x_259;
    }
  }
  return x_256;
}

fn fn1string_of_int_550(env) {
  i_236 := env[1]
  x_558 := fn0string_of_int_549(i_236);
  return x_558;
}

fn fn0splitU_560(__263) {
  switch(ctagof(__263)){
    nilUU_24 => {
      mkbox(x_265, nilUU_24, 0);
      mkbox(x_266, nilUU_24, 0);
      mkbox(x_267, ex1UU_33, 2);
      setbox(x_267, x_265, 0)
      setbox(x_267, x_266, 1)
      x_264 := x_267;
    }
    consUU_25 => {
      getbox(hd_268, ctagof(__263), 0)
      getbox(tl_269, ctagof(__263), 1)
      switch(ctagof(tl_269)){
        nilUU_24 => {
          mkbox(x_271, nilUU_24, 0);
          mkbox(x_272, consUU_25, 2);
          setbox(x_272, hd_268, 0)
          setbox(x_272, x_271, 1)
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, ex1UU_33, 2);
          setbox(x_274, x_272, 0)
          setbox(x_274, x_273, 1)
          x_270 := x_274;
        }
        consUU_25 => {
          getbox(hd_275, ctagof(tl_269), 0)
          getbox(tl_276, ctagof(tl_269), 1)
          x_278 := fn0splitU_560(tl_276);
          switch(ctagof(x_278)){
            ex1UU_33 => {
              getbox(m_279, ctagof(x_278), 0)
              getbox(n_280, ctagof(x_278), 1)
              rebox(x_281, x_278, consUU_25);
              setbox(x_281, hd_268, 0)
              setbox(x_281, m_279, 1)
              mkbox(x_282, consUU_25, 2);
              setbox(x_282, hd_275, 0)
              setbox(x_282, n_280, 1)
              mkbox(x_283, ex1UU_33, 2);
              setbox(x_283, x_281, 0)
              setbox(x_283, x_282, 1)
              x_277 := x_283;
            }
          }
          x_270 := x_277;
        }
      }
      x_264 := x_270;
    }
  }
  return x_264;
}

fn fn1splitU_561(env) {
  __263 := env[1]
  x_562 := fn0splitU_560(__263);
  return x_562;
}

fn fn0splitL_564(__285) {
  switch(ctagof(__285)){
    nilUL_22 => {
      rebox(x_287, __285, nilUL_22);
      mkbox(x_288, nilUL_22, 0);
      mkbox(x_289, ex1LL_30, 2);
      setbox(x_289, x_287, 0)
      setbox(x_289, x_288, 1)
      x_286 := x_289;
    }
    consUL_23 => {
      getbox(hd_290, ctagof(__285), 0)
      getbox(tl_291, ctagof(__285), 1)
      switch(ctagof(tl_291)){
        nilUL_22 => {
          rebox(x_293, tl_291, nilUL_22);
          rebox(x_294, __285, consUL_23);
          setbox(x_294, hd_290, 0)
          setbox(x_294, x_293, 1)
          mkbox(x_295, nilUL_22, 0);
          mkbox(x_296, ex1LL_30, 2);
          setbox(x_296, x_294, 0)
          setbox(x_296, x_295, 1)
          x_292 := x_296;
        }
        consUL_23 => {
          getbox(hd_297, ctagof(tl_291), 0)
          getbox(tl_298, ctagof(tl_291), 1)
          x_300 := fn0splitL_564(tl_298);
          switch(ctagof(x_300)){
            ex1LL_30 => {
              getbox(m_301, ctagof(x_300), 0)
              getbox(n_302, ctagof(x_300), 1)
              rebox(x_303, x_300, consUL_23);
              setbox(x_303, hd_290, 0)
              setbox(x_303, m_301, 1)
              rebox(x_304, tl_291, consUL_23);
              setbox(x_304, hd_297, 0)
              setbox(x_304, n_302, 1)
              rebox(x_305, __285, ex1LL_30);
              setbox(x_305, x_303, 0)
              setbox(x_305, x_304, 1)
              x_299 := x_305;
            }
          }
          x_292 := x_299;
        }
      }
      x_286 := x_292;
    }
  }
  return x_286;
}

fn fn1splitL_565(env) {
  __285 := env[1]
  x_566 := fn0splitL_564(__285);
  return x_566;
}

fn fn0mergeU_568(__307, __308) {
  switch(ctagof(__307)){
    nilUU_24 => {
      x_309 := __308;
    }
    consUU_25 => {
      getbox(hd_310, ctagof(__307), 0)
      getbox(tl_311, ctagof(__307), 1)
      switch(ctagof(__308)){
        nilUU_24 => {
          mkbox(x_313, consUU_25, 2);
          setbox(x_313, hd_310, 0)
          setbox(x_313, tl_311, 1)
          x_312 := x_313;
        }
        consUU_25 => {
          getbox(hd_314, ctagof(__308), 0)
          getbox(tl_315, ctagof(__308), 1)
          lte(x_317, hd_310, hd_314);
          switch(x_317){
            true_4 => {
              mkbox(x_319, consUU_25, 2);
              setbox(x_319, hd_314, 0)
              setbox(x_319, tl_315, 1)
              x_318 := fn0mergeU_568(tl_311, x_319);
              mkbox(x_320, consUU_25, 2);
              setbox(x_320, hd_310, 0)
              setbox(x_320, x_318, 1)
              x_316 := x_320;
            }
            false_5 => {
              mkbox(x_322, consUU_25, 2);
              setbox(x_322, hd_310, 0)
              setbox(x_322, tl_311, 1)
              x_321 := fn0mergeU_568(x_322, tl_315);
              mkbox(x_323, consUU_25, 2);
              setbox(x_323, hd_314, 0)
              setbox(x_323, x_321, 1)
              x_316 := x_323;
            }
          }
          x_312 := x_316;
        }
      }
      x_309 := x_312;
    }
  }
  return x_309;
}

fn fn1mergeU_569(env) {
  __307 := env[1]
  __308 := env[2]
  x_570 := fn0mergeU_568(__307, __308);
  return x_570;
}

fn fn0mergeL_572(__325, __326) {
  switch(ctagof(__325)){
    nilUL_22 => {
      x_327 := __326;
      free(__325);
    }
    consUL_23 => {
      getbox(hd_328, ctagof(__325), 0)
      getbox(tl_329, ctagof(__325), 1)
      switch(ctagof(__326)){
        nilUL_22 => {
          rebox(x_331, __325, consUL_23);
          setbox(x_331, hd_328, 0)
          setbox(x_331, tl_329, 1)
          x_330 := x_331;
          free(__326);
        }
        consUL_23 => {
          getbox(hd_332, ctagof(__326), 0)
          getbox(tl_333, ctagof(__326), 1)
          lte(x_335, hd_328, hd_332);
          switch(x_335){
            true_4 => {
              rebox(x_337, __326, consUL_23);
              setbox(x_337, hd_332, 0)
              setbox(x_337, tl_333, 1)
              x_336 := fn0mergeL_572(tl_329, x_337);
              rebox(x_338, __325, consUL_23);
              setbox(x_338, hd_328, 0)
              setbox(x_338, x_336, 1)
              x_334 := x_338;
            }
            false_5 => {
              rebox(x_340, __326, consUL_23);
              setbox(x_340, hd_328, 0)
              setbox(x_340, tl_329, 1)
              x_339 := fn0mergeL_572(x_340, tl_333);
              rebox(x_341, __325, consUL_23);
              setbox(x_341, hd_332, 0)
              setbox(x_341, x_339, 1)
              x_334 := x_341;
            }
          }
          x_330 := x_334;
        }
      }
      x_327 := x_330;
    }
  }
  return x_327;
}

fn fn1mergeL_573(env) {
  __325 := env[1]
  __326 := env[2]
  x_574 := fn0mergeL_572(__325, __326);
  return x_574;
}

fn fn0msortU_576(__343) {
  switch(ctagof(__343)){
    nilUU_24 => {
      mkbox(x_345, nilUU_24, 0);
      x_344 := x_345;
    }
    consUU_25 => {
      getbox(hd_346, ctagof(__343), 0)
      getbox(tl_347, ctagof(__343), 1)
      switch(ctagof(tl_347)){
        nilUU_24 => {
          mkbox(x_349, nilUU_24, 0);
          mkbox(x_350, consUU_25, 2);
          setbox(x_350, hd_346, 0)
          setbox(x_350, x_349, 1)
          x_348 := x_350;
        }
        consUU_25 => {
          getbox(hd_351, ctagof(tl_347), 0)
          getbox(tl_352, ctagof(tl_347), 1)
          mkbox(x_355, consUU_25, 2);
          setbox(x_355, hd_351, 0)
          setbox(x_355, tl_352, 1)
          mkbox(x_356, consUU_25, 2);
          setbox(x_356, hd_346, 0)
          setbox(x_356, x_355, 1)
          x_354 := fn0splitU_560(x_356);
          switch(ctagof(x_354)){
            ex1UU_33 => {
              getbox(m_357, ctagof(x_354), 0)
              getbox(n_358, ctagof(x_354), 1)
              x_360 := fn0msortU_576(m_357);
              x_361 := fn0msortU_576(n_358);
              x_359 := fn0mergeU_568(x_360, x_361);
              x_353 := x_359;
              free(x_354);
            }
          }
          x_348 := x_353;
        }
      }
      x_344 := x_348;
    }
  }
  return x_344;
}

fn fn1msortU_577(env) {
  __343 := env[1]
  x_578 := fn0msortU_576(__343);
  return x_578;
}

fn fn0msortL_580(__363) {
  switch(ctagof(__363)){
    nilUL_22 => {
      rebox(x_365, __363, nilUL_22);
      x_364 := x_365;
    }
    consUL_23 => {
      getbox(hd_366, ctagof(__363), 0)
      getbox(tl_367, ctagof(__363), 1)
      switch(ctagof(tl_367)){
        nilUL_22 => {
          rebox(x_369, tl_367, nilUL_22);
          rebox(x_370, __363, consUL_23);
          setbox(x_370, hd_366, 0)
          setbox(x_370, x_369, 1)
          x_368 := x_370;
        }
        consUL_23 => {
          getbox(hd_371, ctagof(tl_367), 0)
          getbox(tl_372, ctagof(tl_367), 1)
          rebox(x_375, tl_367, consUL_23);
          setbox(x_375, hd_371, 0)
          setbox(x_375, tl_372, 1)
          rebox(x_376, __363, consUL_23);
          setbox(x_376, hd_366, 0)
          setbox(x_376, x_375, 1)
          x_374 := fn0splitL_564(x_376);
          switch(ctagof(x_374)){
            ex1LL_30 => {
              getbox(m_377, ctagof(x_374), 0)
              getbox(n_378, ctagof(x_374), 1)
              x_380 := fn0msortL_580(m_377);
              x_381 := fn0msortL_580(n_378);
              x_379 := fn0mergeL_572(x_380, x_381);
              x_373 := x_379;
              free(x_374);
            }
          }
          x_368 := x_373;
        }
      }
      x_364 := x_368;
    }
  }
  return x_364;
}

fn fn1msortL_581(env) {
  __363 := env[1]
  x_582 := fn0msortL_580(__363);
  return x_582;
}

fn fn1aux_551(env) {
  aux_239 := env[0]
  ord_223 := env[1]
  chr_226 := env[2]
  str_229 := env[3]
  i_240 := env[4]
  lte(x_242, 10, i_240);
  switch(x_242){
    true_4 => {
      mul(x_244, i_240, 10);
      r_243 := x_244;
      mul(x_246, i_240, 10);
      i_245 := x_246;
      appc(x_552, aux_239, i_245);
      x_248 := x_553;
      x_251 := fn0ord_533(0);
      add(x_250, r_243, x_251);
      x_249 := fn0chr_537(x_250);
      push(x_247, x_248, x_249);
      x_241 := x_247;
    }
    false_5 => {
      x_255 := fn0ord_533(0);
      add(x_254, i_240, x_255);
      x_253 := fn0chr_537(x_254);
      x_252 := fn0str_541(x_253);
      x_241 := x_252;
    }
  }
  return x_241;
}

fn fn1loop_524(env) {
  loop_213 := env[0]
  x_208 := env[1]
  m_210 := env[2]
  acc_214 := env[3]
  y_215 := env[4]
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      x_216 := acc_214;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mul(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_525, loop_213, x_219);
      appc(x_526, x_525, x_221);
      x_218 := x_527;
      x_216 := x_218;
    }
  }
  return x_216;
}

fn fn1loop_513(env) {
  loop_198 := env[0]
  x_194 := env[1]
  acc_199 := env[2]
  y_200 := env[3]
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      x_201 := acc_199;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_514, loop_198, x_204);
      appc(x_515, x_514, x_205);
      x_203 := x_516;
      x_201 := x_203;
    }
  }
  return x_201;
}

fn fn1loop_480(env) {
  loop_146 := env[0]
  pred_111 := env[1]
  sub_123 := env[2]
  x_147 := env[3]
  y_148 := env[4]
  x_151 := fn0pred_462(y_148);
  x_150 := fn0sub_470(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      x_149 := x_152;
    }
    succ_7 => {
      getbox(n_153, ctagof(x_150), 0)
      appc(x_481, loop_146, n_153);
      appc(x_482, x_481, y_148);
      x_154 := x_483;
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0)
      x_149 := x_155;
    }
  }
  return x_149;
}

main {
  mkclo(x_385, fn1idU_383, fvc:=0, argc:=2);
  idU_1 := x_385;
  mkclo(x_389, fn1idL_387, fvc:=0, argc:=2);
  idL_4 := x_389;
  mkclo(x_393, fn1rwlUU_391, fvc:=0, argc:=6);
  rwlUU_7 := x_393;
  mkclo(x_397, fn1rwlUL_395, fvc:=0, argc:=6);
  rwlUL_14 := x_397;
  mkclo(x_401, fn1rwlLU_399, fvc:=0, argc:=6);
  rwlLU_21 := x_401;
  mkclo(x_405, fn1rwlLL_403, fvc:=0, argc:=6);
  rwlLL_28 := x_405;
  mkclo(x_409, fn1rwrUU_407, fvc:=0, argc:=6);
  rwrUU_35 := x_409;
  mkclo(x_413, fn1rwrUL_411, fvc:=0, argc:=6);
  rwrUL_42 := x_413;
  mkclo(x_417, fn1rwrLU_415, fvc:=0, argc:=6);
  rwrLU_49 := x_417;
  mkclo(x_421, fn1rwrLL_419, fvc:=0, argc:=6);
  rwrLL_56 := x_421;
  mkclo(x_425, fn1sing_elimUU_423, fvc:=0, argc:=3);
  sing_elimUU_63 := x_425;
  mkclo(x_429, fn1sing_elimUL_427, fvc:=0, argc:=3);
  sing_elimUL_67 := x_429;
  mkclo(x_433, fn1sing_elimLU_431, fvc:=0, argc:=3);
  sing_elimLU_71 := x_433;
  mkclo(x_437, fn1sing_elimLL_435, fvc:=0, argc:=3);
  sing_elimLL_75 := x_437;
  mkclo(x_441, fn1not_439, fvc:=0, argc:=1);
  not_79 := x_441;
  mkclo(x_445, fn1and_443, fvc:=0, argc:=2);
  and_82 := x_445;
  mkclo(x_449, fn1or_447, fvc:=0, argc:=2);
  or_87 := x_449;
  mkclo(x_453, fn1xor_451, fvc:=0, argc:=2);
  xor_92 := x_453;
  mkclo(x_457, fn1lte_455, fvc:=0, argc:=2);
  lte_98 := x_457;
  mkclo(x_461, fn1lt_459, fvc:=0, argc:=2);
  lt_106 := x_461;
  mkclo(x_465, fn1pred_463, fvc:=0, argc:=1);
  pred_111 := x_465;
  mkclo(x_469, fn1add_467, fvc:=0, argc:=2);
  add_116 := x_469;
  mkclo(x_473, fn1sub_471, fvc:=0, argc:=2);
  sub_123 := x_473;
  mkclo(x_477, fn1mul_475, fvc:=0, argc:=2);
  mul_130 := x_477;
  mkclo(x_488, fn1div_479, fvc:=0, argc:=2);
  div_138 := x_488;
  mkclo(x_492, fn1rem_490, fvc:=0, argc:=2);
  rem_157 := x_492;
  mkclo(x_498, fn1free_listUU_494, fvc:=0, argc:=3);
  free_listUU_163 := x_498;
  mkclo(x_504, fn1free_listUL_500, fvc:=0, argc:=3);
  free_listUL_173 := x_504;
  mkclo(x_510, fn1free_listLL_506, fvc:=0, argc:=3);
  free_listLL_183 := x_510;
  mkclo(x_521, fn1pow_512, fvc:=0, argc:=2);
  pow_193 := x_521;
  mkclo(x_532, fn1powm_523, fvc:=0, argc:=3);
  powm_207 := x_532;
  mkclo(x_536, fn1ord_534, fvc:=0, argc:=1);
  ord_223 := x_536;
  mkclo(x_540, fn1chr_538, fvc:=0, argc:=1);
  chr_226 := x_540;
  mkclo(x_544, fn1str_542, fvc:=0, argc:=1);
  str_229 := x_544;
  mkclo(x_548, fn1strlen_546, fvc:=0, argc:=1);
  strlen_232 := x_548;
  mkclo(x_559, fn1string_of_int_550, fvc:=0, argc:=1);
  string_of_int_235 := x_559;
  mkclo(x_563, fn1splitU_561, fvc:=0, argc:=1);
  splitU_262 := x_563;
  mkclo(x_567, fn1splitL_565, fvc:=0, argc:=1);
  splitL_284 := x_567;
  mkclo(x_571, fn1mergeU_569, fvc:=0, argc:=2);
  mergeU_306 := x_571;
  mkclo(x_575, fn1mergeL_573, fvc:=0, argc:=2);
  mergeL_324 := x_575;
  mkclo(x_579, fn1msortU_577, fvc:=0, argc:=1);
  msortU_342 := x_579;
  mkclo(x_583, fn1msortL_581, fvc:=0, argc:=1);
  msortL_362 := x_583;
  return NULL;
}

-----------------------------------------

