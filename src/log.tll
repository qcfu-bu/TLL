[Inductive {name = "bool"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)),
          [(DMul ("true", (TBase (Id "bool"))));
            (DMul ("false", (TBase (Id "bool"))))]))
      ))};
  Inductive {name = "unit"; relv = R;
    body =
    (Binder ([],
       (PBase ((TBase (Type U)), [(DMul ("tt", (TBase (Id "unit"))))]))))};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DMul ("zero", (TBase (Id "nat"))));
             (DMul ("succ",
                (TBind (R, (Id "nat"), (Binder ("pred", (TBase (Id "nat"))))
                   ))
                ))
             ]))
       ))};
  Inductive {name = "prod"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Type (SId "r")),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DMul ("pair",
                           (TBind (R, (Id "A"),
                              (Binder ("m",
                                 (TBind (R, (Id "B"),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Inst ("prod",
                                                 [(SId "s"); (SId "r");
                                                   (SId "t")]
                                                 ));
                                               (Id "A"); (Id "B")]))
                                       ))
                                    ))
                                 ))
                              ))
                           ))
                         ]))
                   ))
                ))
             ))
          ))
       ))};
  Inductive {name = "vec"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id "nat"),
                    (Binder ("_", (TBase (Type (SId "r"))))))),
                 [(DMul ("vnil",
                     (TBase
                        (App
                           [(Inst ("vec", [(SId "s"); (SId "r")])); (
                             Id "A"); (Id "zero")]))
                     ));
                   (DAdd ("vcons",
                      (TBind (N, (Id "nat"),
                         (Binder ("n",
                            (TBind (R, (Id "A"),
                               (Binder ("hd",
                                  (TBind (R,
                                     (App
                                        [(Inst ("vec", [(SId "s"); (SId "r")]
                                            ));
                                          (Id "A"); (Id "n")]),
                                     (Binder ("tl",
                                        (TBase
                                           (App
                                              [(Inst ("vec",
                                                  [(SId "s"); (SId "r")]));
                                                (Id "A");
                                                (App [(Id "succ"); (Id "n")])
                                                ]))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ]))
             ))
          ))
       ))};
  Definition {name = "max"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id "nat"),
              (Binder ("x",
                 (Pi (R, U, (Id "nat"), (Binder ("y", (Id "nat")))))))
              )),
           (Binder ((Some "max"),
              [([(PId "x"); (PId "y")],
                (Some (Match ([(R, (Id "x"), None); (R, (Id "y"), None)],
                         None,
                         [([(PId "zero"); (PId "j")], (Some (Id "j")));
                           ([(PId "i"); (PId "zero")], (Some (Id "i")));
                           ([(PMul ("succ", [(PId "i")]));
                              (PMul ("succ", [(PId "j")]))],
                            (Some (App
                                     [(Id "succ");
                                       (App [(Id "max"); (Id "i"); (Id "j")])
                                       ])))
                           ]
                         ))))
                ]
              ))
           )),
        (Pi (R, U, (Id "nat"),
           (Binder ("x", (Pi (R, U, (Id "nat"), (Binder ("y", (Id "nat")))))
              ))
           )))
       ))};
  Definition {name = "one"; relv = R;
    body = (Binder ([], ((App [(Id "succ"); (Id "zero")]), (Id "nat"))))};
  Definition {name = "two"; relv = R;
    body = (Binder ([], ((App [(Id "succ"); (Id "one")]), (Id "nat"))))};
  Definition {name = "three"; relv = R;
    body = (Binder ([], ((App [(Id "succ"); (Id "two")]), (Id "nat"))))};
  Definition {name = "test"; relv = R;
    body =
    (Binder ([], ((App [(Id "max"); (Id "two"); (Id "three")]), (Id "nat"))))}
  ]

-----------------------------------------

#[program]
inductive bool_1‹› : U where
| true_1 : bool_1
| false_2 : bool_1

#[program]
inductive unit_2‹› : U where
| tt_3 : unit_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_28 : nat_3) : nat_3

#[program]
inductive prod_4‹s_29,r_30,t_31› (A_32 : Type‹s_29›) (B_33 : Type‹r_30›):
  Type‹t_31›
where
| pair_6 (m_34 : A_32) (n_35 : B_33) : (prod_4‹s_29,r_30,t_31› A_32 B_33)

#[program]
inductive vec_5‹s_36,r_37› (A_38 : Type‹s_36›):
  nat_3 -> Type‹r_37›
where
| vnil_7 : (vec_5‹s_36,r_37› A_38 zero_4)
| #[additive]
  vcons_8
    {n_40 : nat_3} (hd_41 : A_38) (tl_42 : (vec_5‹s_36,r_37› A_38 n_40))
    : (vec_5‹s_36,r_37› A_38 (succ_5‹› n_40))

#[program]
def max_1‹› : nat_3 -> nat_3 -> nat_3 :=
  function max_45 : nat_3 -> nat_3 -> nat_3
  | x_48 y_49 =>
    match x_48, y_49 in ∀ (_50 : ?_1) -o ∀ (_51 : ?_2) -o ?_3 with
    | zero_4, j_52 => j_52 | i_53, zero_4 => i_53
    | (succ_5 i_54), (succ_5 j_55) => (succ_5‹› (max_45 i_54 j_55))

#[program]
def one_2‹› : nat_3 := (succ_5‹› zero_4)

#[program]
def two_3‹› : nat_3 := (succ_5‹› one_2)

#[program]
def three_4‹› : nat_3 := (succ_5‹› two_3)

#[program]
def test_5‹› : nat_3 := (max_1 two_3 three_4)

-----------------------------------------

#[program]
inductive bool_1‹› : U where
| true_1 : bool_1
| false_2 : bool_1

#[program]
inductive unit_2‹› : U where
| tt_3 : unit_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_56 : nat_3) : nat_3

#[program]
inductive prod_4‹s_57,r_58,t_59› (A_60 : Type‹s_57›) (B_61 : Type‹r_58›):
  Type‹t_59›
where
| pair_6 (m_62 : A_60) (n_63 : B_61) : (prod_4‹s_57,r_58,t_59› A_60 B_61)

#[program]
inductive vec_5‹s_64,r_65› (A_66 : Type‹s_64›):
  nat_3 -> Type‹r_65›
where
| vnil_7 : (vec_5‹s_64,r_65› A_66 zero_4)
| #[additive]
  vcons_8
    {n_68 : nat_3} (hd_69 : A_66) (tl_70 : (vec_5‹s_64,r_65› A_66 n_68))
    : (vec_5‹s_64,r_65› A_66 (succ_5‹› n_68))

#[program]
def max_1‹› : nat_3 -> nat_3 -> nat_3 :=
  function max_73 : nat_3 -> nat_3 -> nat_3
  | x_76 y_77 =>
    match x_76, y_77 in ∀ (_78 : ?_1) -o ∀ (_79 : ?_2) -o ?_3 with
    | zero_4, j_80 => j_80 | i_81, zero_4 => i_81
    | (succ_5 i_82), (succ_5 j_83) => (succ_5‹› (max_73 i_82 j_83))

#[program]
def one_2‹› : nat_3 := (succ_5‹› zero_4)

#[program]
def two_3‹› : nat_3 := (succ_5‹› one_2)

#[program]
def three_4‹› : nat_3 := (succ_5‹› two_3)

#[program]
def test_5‹› : nat_3 :=
  (succ_5‹›
    (function max_84 : nat_3 -> nat_3 -> nat_3
     | x_87 y_88 =>
       match x_87, y_88 in ∀ (_89 : ?_1) -o ∀ (_90 : ?_2) -o ?_3 with
       | zero_4, j_91 => j_91 | i_92, zero_4 => i_92
       | (succ_5 i_93), (succ_5 j_94) => (succ_5‹› (max_84 i_93 j_94))
      one_2 two_3))