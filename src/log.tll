[Notation {name = "|>"; body = (App [(Hole 2); (Hole 1)])};
  Notation {name = "@@"; body = (App [(Hole 1); (Hole 2)])};
  Notation {name = "="; body = (App [(Id ("eq", I)); (Hole 1); (Hole 2)])};
  Notation {name = "`"; body = (App [(Id ("sing", I)); (Hole 1)])};
  Notation {name = "&&"; body = (Id ("and", I))};
  Notation {name = "||"; body = (Id ("or", I))};
  Notation {name = "+"; body = (App [(Id ("add", I)); (Hole 1); (Hole 2)])};
  Notation {name = "-"; body = (App [(Id ("sub", I)); (Hole 1); (Hole 2)])};
  Notation {name = "*"; body = (App [(Id ("mul", I)); (Hole 1); (Hole 2)])};
  Notation {name = "/"; body = (App [(Id ("div", I)); (Hole 1); (Hole 2)])};
  Notation {name = "%"; body = (App [(Id ("rem", I)); (Hole 1); (Hole 2)])};
  Notation {name = "^"; body = (App [(Id ("pow", I)); (Hole 1); (Hole 2)])};
  Notation {name = "<"; body = (App [(Id ("lt", I)); (Hole 1); (Hole 2)])};
  Notation {name = ">"; body = (App [(Id ("gt", I)); (Hole 1); (Hole 2)])};
  Notation {name = "<="; body = (App [(Id ("lte", I)); (Hole 1); (Hole 2)])};
  Notation {name = ">="; body = (App [(Id ("gte", I)); (Hole 1); (Hole 2)])};
  Notation {name = "\195\151";
    body = (App [(Id ("prod1", I)); (Hole 1); (Hole 2)])};
  Notation {name = "::"; body = (App [(Id ("cons", I)); (Hole 1); (Hole 2)])};
  Notation {name = ";";
    body = (MLet ((Hole 1), (Binder ((PId "_"), (Hole 2)))))};
  Notation {name = "\226\159\168{},\226\159\169";
    body = (App [(Id ("ex0", I)); (Hole 1); (Hole 2)])};
  Notation {name = "\226\159\168,\226\159\169";
    body = (App [(Id ("ex1", I)); (Hole 1); (Hole 2)])};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id ("A", I)),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id ("A", I)),
                          (Binder ("_", (TBase (Type U)))))),
                       [(DConstr ("refl",
                           (TBase (BOpr ("=", (Id ("m", I)), (Id ("m", I))))),
                           []))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "unit"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)), [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
       ));
    view = []};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("true", (TBase (Id ("bool", I))), []));
             (DConstr ("false", (TBase (Id ("bool", I))), []))]))
       ));
    view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("n", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "exists0"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type L)),
                       [(DConstr ("ex0",
                           (TBind (N, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("exists0", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists1"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type L)),
                       [(DConstr ("ex1",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("exists1", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Definition {name = "not"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("bool", I)), (Binder ("_", (Id ("bool", I)))))),
           (Binder ((Some "not"),
              [([(PId "true")], (Some (Id ("false", I))));
                ([(PId "false")], (Some (Id ("true", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("bool", I)), (Binder ("_", (Id ("bool", I)))))))
       ));
    view = []};
  Definition {name = "and"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("bool", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("bool", I)),
                    (Binder ("_", (Id ("bool", I))))))
                 ))
              )),
           (Binder ((Some "and"),
              [([(PId "true"); (PId "true")], (Some (Id ("true", I))));
                ([(PId "_"); (PId "_")], (Some (Id ("false", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("bool", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("bool", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "or"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("bool", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("bool", I)),
                    (Binder ("_", (Id ("bool", I))))))
                 ))
              )),
           (Binder ((Some "or"),
              [([(PId "false"); (PId "false")], (Some (Id ("false", I))));
                ([(PId "_"); (PId "_")], (Some (Id ("true", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("bool", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("bool", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "xor"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("bool", I)),
              (Binder ("_",
                 (Pi (R, L, (Id ("bool", I)),
                    (Binder ("_", (Id ("bool", I))))))
                 ))
              )),
           (Binder ((Some "xor"),
              [([(PId "true"); (PId "true")], (Some (Id ("false", I))));
                ([(PId "false"); (PId "false")], (Some (Id ("false", I))));
                ([(PId "_"); (PId "_")], (Some (Id ("true", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("bool", I)),
           (Binder ("_",
              (Pi (R, L, (Id ("bool", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "lte"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("bool", I))))
                    ))
                 ))
              )),
           (Binder ((Some "lte"),
              [([(PId "zero"); (PId "_")], (Some (Id ("true", I))));
                ([(PId "_"); (PId "zero")], (Some (Id ("false", I))));
                ([(PConstr ("succ", [(PId "x")]));
                   (PConstr ("succ", [(PId "y")]))],
                 (Some (BOpr ("<=", (Id ("x", I)), (Id ("y", I))))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "lt"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", (Id ("bool", I))))
                    ))
                 ))
              )),
           (Binder ((Some "lt"),
              [([(PId "x"); (PId "y")],
                (Some (BOpr ("<=", (App [(Id ("succ", I)); (Id ("x", I))]),
                         (Id ("y", I))))))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x",
              (Pi (R, U, (Id ("nat", I)), (Binder ("y", (Id ("bool", I))))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "pred"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I)))))),
           (Binder ((Some "pred"),
              [([(PId "zero")], (Some (Id ("zero", I))));
                ([(PConstr ("succ", [(PId "x")]))], (Some (Id ("x", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I)))))))
       ));
    view = []};
  Definition {name = "add"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "add"),
              [([(PId "zero"); (PId "y")], (Some (Id ("y", I))));
                ([(PConstr ("succ", [(PId "x")])); (PId "y")],
                 (Some (App
                          [(Id ("succ", I));
                            (BOpr ("+", (Id ("x", I)), (Id ("y", I))))])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "sub"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "sub"),
              [([(PId "x"); (PId "zero")], (Some (Id ("x", I))));
                ([(PId "x"); (PConstr ("succ", [(PId "y")]))],
                 (Some (BOpr ("-", (App [(Id ("pred", I)); (Id ("x", I))]),
                          (Id ("y", I))))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "mul"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "mul"),
              [([(PId "zero"); (PId "_")], (Some (Id ("zero", I))));
                ([(PConstr ("succ", [(PId "x")])); (PId "y")],
                 (Some (BOpr ("+", (Id ("y", I)),
                          (BOpr ("*", (Id ("x", I)), (Id ("y", I))))))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "div"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))))
              )),
           (Binder ((Some "div"),
              [([(PId "x"); (PId "y")],
                (Some (Match (
                         [(R,
                           (App
                              [(Id ("lt", I)); (Id ("x", I)); (Id ("y", I))]),
                           None)],
                         None,
                         [([(PId "true")], (Some (Id ("zero", I))));
                           ([(PId "false")],
                            (Some (App
                                     [(Id ("succ", I));
                                       (BOpr ("/",
                                          (BOpr ("-", (Id ("x", I)),
                                             (Id ("y", I)))),
                                          (Id ("y", I))))
                                       ])))
                           ]
                         ))))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x", (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "rem"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))))
              )),
           (Binder ((Some "rem"),
              [([(PId "x"); (PId "y")],
                (Some (BOpr ("-", (Id ("x", I)),
                         (BOpr ("*",
                            (BOpr ("/", (Id ("x", I)), (Id ("y", I)))),
                            (Id ("y", I))))
                         ))))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x", (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "pow"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "pow"),
              [([(PId "_"); (PId "zero")],
                (Some (App [(Id ("succ", I)); (Id ("zero", I))])));
                ([(PId "x"); (PConstr ("succ", [(PId "y")]))],
                 (Some (BOpr ("*", (Id ("x", I)),
                          (BOpr ("^", (Id ("x", I)), (Id ("y", I))))))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Extern {name = "proto"; relv = N; body = (Binder ([], (Type U))); view = []};
  Extern {name = "act0"; relv = N;
    body =
    (Binder (["s"],
       (Pi (R, U, (Id ("bool", I)),
          (Binder ("b",
             (Pi (R, U, (Type (SId "s")),
                (Binder ("A",
                   (Pi (R, U,
                      (Pi (R, U, (Id ("A", I)),
                         (Binder ("_", (Id ("proto", I)))))),
                      (Binder ("B", (Id ("proto", I))))))
                   ))
                ))
             ))
          ))
       ));
    view = [E; I; E]};
  Extern {name = "act1"; relv = N;
    body =
    (Binder (["s"],
       (Pi (R, U, (Id ("bool", I)),
          (Binder ("b",
             (Pi (R, U, (Type (SId "s")),
                (Binder ("A",
                   (Pi (R, U,
                      (Pi (R, U, (Id ("A", I)),
                         (Binder ("_", (Id ("proto", I)))))),
                      (Binder ("B", (Id ("proto", I))))))
                   ))
                ))
             ))
          ))
       ));
    view = [E; I; E]};
  Extern {name = "endp"; relv = N; body = (Binder ([], (Id ("proto", I))));
    view = []};
  Extern {name = "ch"; relv = N;
    body =
    (Binder ([],
       (Pi (R, U, (Id ("bool", I)),
          (Binder ("_",
             (Pi (R, U, (Id ("proto", I)), (Binder ("_", (Type L)))))))
          ))
       ));
    view = []};
  Extern {name = "close"; relv = R;
    body =
    (Binder ([],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b",
             (Pi (R, U,
                (App [(Id ("ch", I)); (Id ("b", I)); (Id ("endp", I))]),
                (Binder ("_", (IO (Id ("unit", I)))))))
             ))
          ))
       ));
    view = [I]};
  Extern {name = "send0"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (BOpr ("=",
                                     (App
                                        [(Id ("xor", I)); (Id ("b1", I));
                                          (Id ("b2", I))]),
                                     (Id ("false", I)))),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act0", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (Pi (N, L, (Id ("A", I)),
                                              (Binder ("x",
                                                 (IO
                                                    (App
                                                       [(Id ("ch", I));
                                                         (Id ("b1", I));
                                                         (App
                                                            [(Id ("B", I));
                                                              (Id ("x", I))])
                                                         ]))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "send1"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (BOpr ("=",
                                     (App
                                        [(Id ("xor", I)); (Id ("b1", I));
                                          (Id ("b2", I))]),
                                     (Id ("false", I)))),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act1", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (Pi (R, L, (Id ("A", I)),
                                              (Binder ("x",
                                                 (IO
                                                    (App
                                                       [(Id ("ch", I));
                                                         (Id ("b1", I));
                                                         (App
                                                            [(Id ("B", I));
                                                              (Id ("x", I))])
                                                         ]))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "recv0"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (BOpr ("=",
                                     (App
                                        [(Id ("xor", I)); (Id ("b1", I));
                                          (Id ("b2", I))]),
                                     (Id ("true", I)))),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act0", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (IO
                                              (App
                                                 [(Id ("exists0", I));
                                                   (Fun (
                                                      (Pi (R, U,
                                                         (Id ("A", I)),
                                                         (Binder ("x", IMeta
                                                            ))
                                                         )),
                                                      (Binder (None,
                                                         [([(PId "x")],
                                                           (Some (App
                                                                    [(Id (
                                                                    "ch", I));
                                                                    (Id (
                                                                    "b1", I));
                                                                    (App
                                                                    [(Id (
                                                                    "B", I));
                                                                    (Id ("x",
                                                                    I))])])))
                                                           ]
                                                         )),
                                                      []))
                                                   ]))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "recv1"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (BOpr ("=",
                                     (App
                                        [(Id ("xor", I)); (Id ("b1", I));
                                          (Id ("b2", I))]),
                                     (Id ("true", I)))),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act1", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (IO
                                              (App
                                                 [(Id ("exists1", I));
                                                   (Fun (
                                                      (Pi (R, U,
                                                         (Id ("A", I)),
                                                         (Binder ("x", IMeta
                                                            ))
                                                         )),
                                                      (Binder (None,
                                                         [([(PId "x")],
                                                           (Some (App
                                                                    [(Id (
                                                                    "ch", I));
                                                                    (Id (
                                                                    "b1", I));
                                                                    (App
                                                                    [(Id (
                                                                    "B", I));
                                                                    (Id ("x",
                                                                    I))])])))
                                                           ]
                                                         )),
                                                      []))
                                                   ]))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "fork"; relv = R;
    body =
    (Binder ([],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b",
             (Pi (N, U, (Id ("proto", I)),
                (Binder ("P",
                   (Pi (R, U,
                      (Pi (R, L,
                         (App [(Id ("ch", I)); (Id ("b", I)); (Id ("P", I))]),
                         (Binder ("_", (IO (Id ("unit", I))))))),
                      (Binder ("_",
                         (IO
                            (App
                               [(Id ("ch", I));
                                 (App [(Id ("not", I)); (Id ("b", I))]);
                                 (Id ("P", I))]))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I]};
  Definition {name = "DH"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("p",
                 (Pi (R, U, (Id ("nat", I)),
                    (Binder ("g", (Id ("proto", I))))))
                 ))
              )),
           (Binder ((Some "DH"),
              [([(PId "p"); (PId "g")],
                (Some (App
                         [(Id ("act0", I)); (Id ("true", I));
                           (Fun (
                              (Pi (R, U, (Id ("nat", I)),
                                 (Binder ("a", IMeta)))),
                              (Binder (None,
                                 [([(PId "a")],
                                   (Some (App
                                            [(Id ("act1", I));
                                              (Id ("true", I));
                                              (Fun (
                                                 (Pi (R, U, (Id ("nat", I)),
                                                    (Binder ("A", IMeta)))),
                                                 (Binder (None,
                                                    [([(PId "A")],
                                                      (Some (App
                                                               [(Id ("act0",
                                                                   I));
                                                                 (Id ("true",
                                                                    I));
                                                                 (Fun (
                                                                    (
                                                                    Pi (R, U,
                                                                    (BOpr (
                                                                    "=",
                                                                    (Id ("A",
                                                                    I)),
                                                                    (BOpr (
                                                                    "%",
                                                                    (BOpr (
                                                                    "^",
                                                                    (Id ("g",
                                                                    I)),
                                                                    (Id ("a",
                                                                    I)))),
                                                                    (Id ("p",
                                                                    I)))))),
                                                                    (Binder (
                                                                    "_",
                                                                    IMeta)))),
                                                                    (
                                                                    Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "_")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "act0", I
                                                                    ));
                                                                    (Id (
                                                                    "false",
                                                                    I));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U,
                                                                    (Id (
                                                                    "nat", I
                                                                    )),
                                                                    (Binder (
                                                                    "b",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "b")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "act1", I
                                                                    ));
                                                                    (Id (
                                                                    "false",
                                                                    I));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U,
                                                                    (Id (
                                                                    "nat", I
                                                                    )),
                                                                    (Binder (
                                                                    "B",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "B")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "act0", I
                                                                    ));
                                                                    (Id (
                                                                    "false",
                                                                    I));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U,
                                                                    (BOpr (
                                                                    "=",
                                                                    (Id ("B",
                                                                    I)),
                                                                    (BOpr (
                                                                    "%",
                                                                    (BOpr (
                                                                    "^",
                                                                    (Id ("g",
                                                                    I)),
                                                                    (Id ("b",
                                                                    I)))),
                                                                    (Id ("p",
                                                                    I)))))),
                                                                    (Binder (
                                                                    "_",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "_")],
                                                                    (Some (
                                                                    Id (
                                                                    "endp", I
                                                                    ))))])),
                                                                    []))])))]
                                                                    )), 
                                                                    []))])))]
                                                                    )), 
                                                                    []))])))]
                                                                    )), 
                                                                    []))
                                                                 ])))
                                                      ]
                                                    )),
                                                 []))
                                              ])))
                                   ]
                                 )),
                              []))
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("p",
              (Pi (R, U, (Id ("nat", I)), (Binder ("g", (Id ("proto", I))))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "DH_ch"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("p",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))))
              )),
           (Binder ((Some "DH_ch"),
              [([(PId "p"); (PId "g")],
                (Some (App
                         [(Id ("ch", I)); (Id ("true", I));
                           (App
                              [(Id ("DH", I)); (Id ("p", I)); (Id ("g", I))])
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("p", (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "DH_hc"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("p",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))))
              )),
           (Binder ((Some "DH_hc"),
              [([(PId "p"); (PId "g")],
                (Some (App
                         [(Id ("ch", I)); (Id ("false", I));
                           (App
                              [(Id ("DH", I)); (Id ("p", I)); (Id ("g", I))])
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("p", (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "alice"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("a",
                 (Pi (R, U, (Id ("nat", I)),
                    (Binder ("p",
                       (Pi (R, U, (Id ("nat", I)),
                          (Binder ("g",
                             (Pi (R, U,
                                (App
                                   [(Id ("DH_ch", I)); (Id ("p", I));
                                     (Id ("g", I))]),
                                (Binder ("c", (IO (Id ("unit", I)))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "alice"),
              [([(PId "a"); (PId "p"); (PId "g"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Id ("send0", I)); (Id ("refl", I));
                              (Id ("c", I)); (Id ("a", I))]),
                         (Binder ((PId "c"),
                            (MLet (
                               (App
                                  [(Id ("send1", I)); (Id ("refl", I));
                                    (Id ("c", I));
                                    (BOpr ("%",
                                       (BOpr ("^", (Id ("g", I)),
                                          (Id ("a", I)))),
                                       (Id ("p", I))))
                                    ]),
                               (Binder ((PId "c"),
                                  (MLet (
                                     (App
                                        [(Id ("send0", I)); (Id ("refl", I));
                                          (Id ("c", I)); (Id ("refl", I))]),
                                     (Binder ((PId "c"),
                                        (MLet (
                                           (App
                                              [(Id ("recv0", I));
                                                (Id ("refl", I));
                                                (Id ("c", I))]),
                                           (Binder (
                                              (PBOpr (
                                                 "\226\159\168{},\226\159\169",
                                                 (PId "b"), (PId "c"))),
                                              (MLet (
                                                 (App
                                                    [(Id ("recv1", I));
                                                      (Id ("refl", I));
                                                      (Id ("c", I))]),
                                                 (Binder (
                                                    (PBOpr (
                                                       "\226\159\168,\226\159\169",
                                                       (PId "B"), (PId "c"))),
                                                    (MLet (
                                                       (App
                                                          [(Id ("recv0", I));
                                                            (Id ("refl", I));
                                                            (Id ("c", I))]),
                                                       (Binder (
                                                          (PBOpr (
                                                             "\226\159\168{},\226\159\169",
                                                             (PId "pf"),
                                                             (PId "c"))),
                                                          (App
                                                             [(Id ("close", I
                                                                 ));
                                                               (Id ("c", I))])
                                                          ))
                                                       ))
                                                    ))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; E; E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("a",
              (Pi (R, U, (Id ("nat", I)),
                 (Binder ("p",
                    (Pi (R, U, (Id ("nat", I)),
                       (Binder ("g",
                          (Pi (R, U,
                             (App
                                [(Id ("DH_ch", I)); (Id ("p", I));
                                  (Id ("g", I))]),
                             (Binder ("c", (IO (Id ("unit", I)))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E; E; E]};
  Definition {name = "bob"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("b",
                 (Pi (R, U, (Id ("nat", I)),
                    (Binder ("p",
                       (Pi (R, U, (Id ("nat", I)),
                          (Binder ("g",
                             (Pi (R, U,
                                (App
                                   [(Id ("DH_hc", I)); (Id ("p", I));
                                     (Id ("g", I))]),
                                (Binder ("c", (IO (Id ("unit", I)))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "bob"),
              [([(PId "b"); (PId "p"); (PId "g"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Id ("recv0", I)); (Id ("refl", I));
                              (Id ("c", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168{},\226\159\169", (PId "a"),
                               (PId "c"))),
                            (MLet (
                               (App
                                  [(Id ("recv1", I)); (Id ("refl", I));
                                    (Id ("c", I))]),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "A"), (PId "c"))),
                                  (MLet (
                                     (App
                                        [(Id ("recv0", I)); (Id ("refl", I));
                                          (Id ("c", I))]),
                                     (Binder (
                                        (PBOpr (
                                           "\226\159\168{},\226\159\169",
                                           (PId "pf"), (PId "c"))),
                                        (MLet (
                                           (App
                                              [(Id ("send0", I));
                                                (Id ("refl", I));
                                                (Id ("c", I)); (Id ("b", I))]),
                                           (Binder ((PId "c"),
                                              (MLet (
                                                 (App
                                                    [(Id ("send1", I));
                                                      (Id ("refl", I));
                                                      (Id ("c", I));
                                                      (BOpr ("%",
                                                         (BOpr ("^",
                                                            (Id ("g", I)),
                                                            (Id ("b", I)))),
                                                         (Id ("p", I))))
                                                      ]),
                                                 (Binder ((PId "c"),
                                                    (MLet (
                                                       (App
                                                          [(Id ("send0", I));
                                                            (Id ("refl", I));
                                                            (Id ("c", I));
                                                            (Id ("refl", I))]),
                                                       (Binder ((PId "c"),
                                                          (App
                                                             [(Id ("close", I
                                                                 ));
                                                               (Id ("c", I))])
                                                          ))
                                                       ))
                                                    ))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; E; E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("b",
              (Pi (R, U, (Id ("nat", I)),
                 (Binder ("p",
                    (Pi (R, U, (Id ("nat", I)),
                       (Binder ("g",
                          (Pi (R, U,
                             (App
                                [(Id ("DH_hc", I)); (Id ("p", I));
                                  (Id ("g", I))]),
                             (Binder ("c", (IO (Id ("unit", I)))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E; E; E]}
  ]

-----------------------------------------

#[logical]
inductive eq_1‹s_288› (A_289 : Type‹s_288›) (m_290 : A_289):
  A_289 -> U
where
| refl_1 : (eq_1‹??_1› ?_1[0;0] m_290 m_290)

#[program]
inductive unit_2‹› : U where
| tt_2 : unit_2

#[program]
inductive bool_3‹› : U where
| true_3 : bool_3
| false_4 : bool_3

#[program]
inductive nat_4‹› : U where
| zero_5 : nat_4
| succ_6 (n_292 : nat_4) : nat_4

#[program]
inductive exists0_5‹s_293,r_294› (A_295 : Type‹s_293›) (B_296 : 
A_295 -> Type‹r_294›): L where
| ex0_7
    {m_298 : A_295} (n_299 : ((B_296) m_298))
    : (exists0_5‹??_2,??_3› A_295 B_296)

#[program]
inductive exists1_6‹s_300,r_301› (A_302 : Type‹s_300›) (B_303 : 
A_302 -> Type‹r_301›): L where
| ex1_8
    (m_305 : A_302) (n_306 : ((B_303) m_305))
    : (exists1_6‹??_4,??_5› A_302 B_303)

#[program]
def not_1‹› : bool_3 -> bool_3 :=
  function not_308 : bool_3 -> bool_3
  | true_3 => false_4
  | false_4 => true_3

#[program]
def and_2‹› : bool_3 -> bool_3 -> bool_3 :=
  function and_312 : bool_3 -> bool_3 -> bool_3
  | true_3 true_3 => true_3
  | _315 _316 => false_4

#[program]
def or_3‹› : bool_3 -> bool_3 -> bool_3 :=
  function or_319 : bool_3 -> bool_3 -> bool_3
  | false_4 false_4 => false_4
  | _322 _323 => true_3

#[program]
def xor_4‹› : bool_3 -> bool_3 -o bool_3 :=
  function xor_326 : bool_3 -> bool_3 -o bool_3
  | true_3 true_3 => false_4
  | false_4 false_4 => false_4
  | _329 _330 => true_3

#[program]
def lte_5‹› : nat_4 -> nat_4 -> bool_3 :=
  function lte_333 : nat_4 -> nat_4 -> bool_3
  | zero_5 _336 => true_3
  | _337 zero_5 => false_4
  | (succ_6 x_338) (succ_6 y_339) => ((lte_333) x_338 y_339)

#[program]
def lt_6‹› : nat_4 -> nat_4 -> bool_3 :=
  function lt_342 : nat_4 -> nat_4 -> bool_3
  | x_345 y_346 => ((lte_5) (succ_6‹› x_345) y_346)

#[program]
def pred_7‹› : nat_4 -> nat_4 :=
  function pred_348 : nat_4 -> nat_4
  | zero_5 => zero_5
  | (succ_6 x_350) => x_350

#[program]
def add_8‹› : nat_4 -> nat_4 -> nat_4 :=
  function add_353 : nat_4 -> nat_4 -> nat_4
  | zero_5 y_356 => y_356
  | (succ_6 x_357) y_358 => (succ_6‹› ((add_353) x_357 y_358))

#[program]
def sub_9‹› : nat_4 -> nat_4 -> nat_4 :=
  function sub_361 : nat_4 -> nat_4 -> nat_4
  | x_364 zero_5 => x_364
  | x_365 (succ_6 y_366) => ((sub_361) ((pred_7) x_365) y_366)

#[program]
def mul_10‹› : nat_4 -> nat_4 -> nat_4 :=
  function mul_369 : nat_4 -> nat_4 -> nat_4
  | zero_5 _372 => zero_5
  | (succ_6 x_373) y_374 => ((add_8) y_374 ((mul_369) x_373 y_374))

#[program]
def div_11‹› : nat_4 -> nat_4 -> ?_5[0;0] :=
  function div_377 : nat_4 -> nat_4 -> ?_2[0;0]
  | x_380 y_381 =>
    match ((lt_6) x_380 y_381) in ?_3[0;0] -o ?_4[0;0] with
    | true_3 => zero_5
    | false_4 => (succ_6‹› ((div_377) ((sub_9) x_380 y_381) y_381))

#[program]
def rem_12‹› : nat_4 -> nat_4 -> ?_7[0;0] :=
  function rem_385 : nat_4 -> nat_4 -> ?_6[0;0]
  | x_388 y_389 => ((sub_9) x_388 ((mul_10) ((div_11) x_388 y_389) y_389))

#[program]
def pow_13‹› : nat_4 -> nat_4 -> nat_4 :=
  function pow_392 : nat_4 -> nat_4 -> nat_4
  | _395 zero_5 => (succ_6‹› zero_5)
  | x_396 (succ_6 y_397) => ((mul_10) x_396 ((pow_392) x_396 y_397))

#[logical]
extern proto_14‹› : U

#[logical]
extern act0_15‹s_398› :
  bool_3 -> ∀ (A_400 : Type‹s_398›) -> A_400 -> proto_14 -> proto_14

#[logical]
extern act1_16‹s_403› :
  bool_3 -> ∀ (A_405 : Type‹s_403›) -> A_405 -> proto_14 -> proto_14

#[logical]
extern endp_17‹› : proto_14

#[logical]
extern ch_18‹› : bool_3 -> proto_14 -> L

#[program]
extern close_19‹› :
  ∀ {b_410 : bool_3} -> ((ch_18) b_410 endp_17) -> IO unit_2

#[program]
extern send0_20‹s_412› :
  ∀ {b1_413 : bool_3} ->
    ∀ {b2_414 : bool_3} ->
      ∀ {A_415 : Type‹s_412›} ->
        ∀ {B_416 : A_415 -> proto_14} ->
          {(eq_1‹??_6› ?_8[0;0] ((xor_4) b1_413 b2_414) false_4)} ->
            ((ch_18) b1_413 ((act0_15‹??_7›) b2_414 ?_9[0;0] B_416)) ->
              ∀ {x_420 : A_415} -o IO ((ch_18) b1_413 ((B_416) x_420))

#[program]
extern send1_21‹s_421› :
  ∀ {b1_422 : bool_3} ->
    ∀ {b2_423 : bool_3} ->
      ∀ {A_424 : Type‹s_421›} ->
        ∀ {B_425 : A_424 -> proto_14} ->
          {(eq_1‹??_8› ?_10[0;0] ((xor_4) b1_422 b2_423) false_4)} ->
            ((ch_18) b1_422 ((act1_16‹??_9›) b2_423 ?_11[0;0] B_425)) ->
              ∀ (x_429 : A_424) -o IO ((ch_18) b1_422 ((B_425) x_429))

#[program]
extern recv0_22‹s_430› :
  ∀ {b1_431 : bool_3} ->
    ∀ {b2_432 : bool_3} ->
      ∀ {A_433 : Type‹s_430›} ->
        ∀ {B_434 : A_433 -> proto_14} ->
          {(eq_1‹??_10› ?_12[0;0] ((xor_4) b1_431 b2_432) true_3)} ->
            ((ch_18) b1_431 ((act0_15‹??_11›) b2_432 ?_13[0;0] B_434)) ->
              IO (exists0_5‹??_12,??_13›
                   ?_15[0;0]
                   function _438 : A_433 -> ?_14[0;0]
                   | x_440 => ((ch_18) b1_431 ((B_434) x_440)))

#[program]
extern recv1_23‹s_441› :
  ∀ {b1_442 : bool_3} ->
    ∀ {b2_443 : bool_3} ->
      ∀ {A_444 : Type‹s_441›} ->
        ∀ {B_445 : A_444 -> proto_14} ->
          {(eq_1‹??_14› ?_16[0;0] ((xor_4) b1_442 b2_443) true_3)} ->
            ((ch_18) b1_442 ((act1_16‹??_15›) b2_443 ?_17[0;0] B_445)) ->
              IO (exists1_6‹??_16,??_17›
                   ?_19[0;0]
                   function _449 : A_444 -> ?_18[0;0]
                   | x_451 => ((ch_18) b1_442 ((B_445) x_451)))

#[program]
extern fork_24‹› :
  ∀ {b_452 : bool_3} ->
    ∀ {P_453 : proto_14} ->
      ((ch_18) b_452 P_453) -o IO unit_2 ->
        IO ((ch_18) ((not_1) b_452) P_453)

#[logical]
def DH_25‹› : nat_4 -> nat_4 -> proto_14 :=
  function DH_458 : nat_4 -> nat_4 -> proto_14
  | p_461 g_462 =>
    ((act0_15‹??_25›)
      true_3 ?_33[0;0]
      function _463 : nat_4 -> ?_20[0;0]
      | a_465 =>
        ((act1_16‹??_24›)
          true_3 ?_32[0;0]
          function _466 : nat_4 -> ?_21[0;0]
          | A_468 =>
            ((act0_15‹??_23›)
              true_3 ?_31[0;0]
              function _469 :
                (eq_1‹??_18›
                  ?_22[0;0] A_468 ((rem_12) ((pow_13) g_462 a_465) p_461)) ->
                  ?_23[0;0]
              | _471 =>
                ((act0_15‹??_22›)
                  false_4 ?_30[0;0]
                  function _472 : nat_4 -> ?_24[0;0]
                  | b_474 =>
                    ((act1_16‹??_21›)
                      false_4 ?_29[0;0]
                      function _475 : nat_4 -> ?_25[0;0]
                      | B_477 =>
                        ((act0_15‹??_20›)
                          false_4 ?_28[0;0]
                          function _478 :
                            (eq_1‹??_19›
                              ?_26[0;0] B_477
                              ((rem_12) ((pow_13) g_462 b_474) p_461)) ->
                              ?_27[0;0]
                          | _480 => endp_17))))))

#[logical]
def DH_ch_26‹› : nat_4 -> nat_4 -> ?_35[0;0] :=
  function DH_ch_483 : nat_4 -> nat_4 -> ?_34[0;0]
  | p_486 g_487 => ((ch_18) true_3 ((DH_25) p_486 g_487))

#[logical]
def DH_hc_27‹› : nat_4 -> nat_4 -> ?_37[0;0] :=
  function DH_hc_490 : nat_4 -> nat_4 -> ?_36[0;0]
  | p_493 g_494 => ((ch_18) false_4 ((DH_25) p_493 g_494))

#[program]
def alice_28‹› :
  nat_4 ->
    ∀ (p_496 : nat_4) ->
      ∀ (g_497 : nat_4) -> ((DH_ch_26) p_496 g_497) -> IO unit_2
:=
  function alice_499 :
    nat_4 ->
      ∀ (p_501 : nat_4) ->
        ∀ (g_502 : nat_4) -> ((DH_ch_26) p_501 g_502) -> IO unit_2
  | a_504 p_505 g_506 c_507 =>
    let* c_508 :=
      ((send0_20‹??_27›)
        ?_43[0;0] ?_42[0;0] ?_41[0;0] ?_40[0;0]
        (refl_1‹??_26› ?_38[0;0] ?_39[0;0]) c_507 a_504)
    in
    let* c_509 :=
      ((send1_21‹??_29›)
        ?_49[0;0] ?_48[0;0] ?_47[0;0] ?_46[0;0]
        (refl_1‹??_28› ?_44[0;0] ?_45[0;0]) c_508
        ((rem_12) ((pow_13) g_506 a_504) p_505))
    in
    let* c_510 :=
      ((send0_20‹??_32›)
        ?_57[0;0] ?_56[0;0] ?_55[0;0] ?_54[0;0]
        (refl_1‹??_30› ?_50[0;0] ?_51[0;0]) c_509
        (refl_1‹??_31› ?_52[0;0] ?_53[0;0]))
    in
    let* _511 :=
      ((recv0_22‹??_34›)
        ?_63[0;0] ?_62[0;0] ?_61[0;0] ?_60[0;0]
        (refl_1‹??_33› ?_58[0;0] ?_59[0;0]) c_510)
    in
    match _511 in ?_82[0;0] -o ?_81[0;0] with
    | (ex0_7 b_513 c_514) =>
      let* _515 :=
        ((recv1_23‹??_36›)
          ?_69[0;0] ?_68[0;0] ?_67[0;0] ?_66[0;0]
          (refl_1‹??_35› ?_64[0;0] ?_65[0;0]) c_514)
      in
      match _515 in ?_80[0;0] -o ?_79[0;0] with
      | (ex1_8 B_517 c_518) =>
        let* _519 :=
          ((recv0_22‹??_38›)
            ?_75[0;0] ?_74[0;0] ?_73[0;0] ?_72[0;0]
            (refl_1‹??_37› ?_70[0;0] ?_71[0;0]) c_518)
        in
        match _519 in ?_78[0;0] -o ?_77[0;0] with
        | (ex0_7 pf_521 c_522) => ((close_19) ?_76[0;0] c_522)

#[program]
def bob_29‹› :
  nat_4 ->
    ∀ (p_524 : nat_4) ->
      ∀ (g_525 : nat_4) -> ((DH_hc_27) p_524 g_525) -> IO unit_2
:=
  function bob_527 :
    nat_4 ->
      ∀ (p_529 : nat_4) ->
        ∀ (g_530 : nat_4) -> ((DH_hc_27) p_529 g_530) -> IO unit_2
  | b_532 p_533 g_534 c_535 =>
    let* _536 :=
      ((recv0_22‹??_40›)
        ?_88[0;0] ?_87[0;0] ?_86[0;0] ?_85[0;0]
        (refl_1‹??_39› ?_83[0;0] ?_84[0;0]) c_535)
    in
    match _536 in ?_127[0;0] -o ?_126[0;0] with
    | (ex0_7 a_538 c_539) =>
      let* _540 :=
        ((recv1_23‹??_42›)
          ?_94[0;0] ?_93[0;0] ?_92[0;0] ?_91[0;0]
          (refl_1‹??_41› ?_89[0;0] ?_90[0;0]) c_539)
      in
      match _540 in ?_125[0;0] -o ?_124[0;0] with
      | (ex1_8 A_542 c_543) =>
        let* _544 :=
          ((recv0_22‹??_44›)
            ?_100[0;0] ?_99[0;0] ?_98[0;0] ?_97[0;0]
            (refl_1‹??_43› ?_95[0;0] ?_96[0;0]) c_543)
        in
        match _544 in ?_123[0;0] -o ?_122[0;0] with
        | (ex0_7 pf_546 c_547) =>
          let* c_548 :=
            ((send0_20‹??_46›)
              ?_106[0;0] ?_105[0;0] ?_104[0;0] ?_103[0;0]
              (refl_1‹??_45› ?_101[0;0] ?_102[0;0]) c_547 b_532)
          in
          let* c_549 :=
            ((send1_21‹??_48›)
              ?_112[0;0] ?_111[0;0] ?_110[0;0] ?_109[0;0]
              (refl_1‹??_47› ?_107[0;0] ?_108[0;0]) c_548
              ((rem_12) ((pow_13) g_534 b_532) p_533))
          in
          let* c_550 :=
            ((send0_20‹??_51›)
              ?_120[0;0] ?_119[0;0] ?_118[0;0] ?_117[0;0]
              (refl_1‹??_49› ?_113[0;0] ?_114[0;0]) c_549
              (refl_1‹??_50› ?_115[0;0] ?_116[0;0]))
          in ((close_19) ?_121[0;0] c_550)

-----------------------------------------

#[logical]
inductive eq_1‹s_25938› (A_25939 : Type‹s_25938›) (m_25940 : A_25939):
  A_25939 -> U
where
| refl_1 : (eq_1‹s_25938› A_25939 m_25940 m_25940)

#[program]
inductive unit_2‹› : U where
| tt_2 : unit_2

#[program]
inductive bool_3‹› : U where
| true_3 : bool_3
| false_4 : bool_3

#[program]
inductive nat_4‹› : U where
| zero_5 : nat_4
| succ_6 (n_25942 : nat_4) : nat_4

#[program]
inductive exists0_5‹s_25943,r_25944› (A_25945 : Type‹s_25943›) (B_25946 : 
A_25945 -> Type‹r_25944›): L where
| ex0_7
    {m_25948 : A_25945} (n_25949 : ((B_25946) m_25948))
    : (exists0_5‹s_25943,r_25944› A_25945 B_25946)

#[program]
inductive exists1_6‹s_25950,r_25951› (A_25952 : Type‹s_25950›) (B_25953 : 
A_25952 -> Type‹r_25951›): L where
| ex1_8
    (m_25955 : A_25952) (n_25956 : ((B_25953) m_25955))
    : (exists1_6‹s_25950,r_25951› A_25952 B_25953)

#[program]
def not_1‹› : bool_3 -> bool_3 :=
  function not_25958 : bool_3 -> bool_3
  | true_3 => false_4
  | false_4 => true_3

#[program]
def and_2‹› : bool_3 -> bool_3 -> bool_3 :=
  function and_25962 : bool_3 -> bool_3 -> bool_3
  | true_3 true_3 => true_3
  | true_3 false_4 => false_4
  | false_4 __25965 => false_4

#[program]
def or_3‹› : bool_3 -> bool_3 -> bool_3 :=
  function or_25968 : bool_3 -> bool_3 -> bool_3
  | true_3 __25971 => true_3
  | false_4 true_3 => true_3
  | false_4 false_4 => false_4

#[program]
def xor_4‹› : bool_3 -> bool_3 -o bool_3 :=
  function xor_25974 : bool_3 -> bool_3 -o bool_3
  | true_3 true_3 => false_4
  | true_3 false_4 => true_3
  | false_4 true_3 => true_3
  | false_4 false_4 => false_4

#[program]
def lte_5‹› : nat_4 -> nat_4 -> bool_3 :=
  function lte_25979 : nat_4 -> nat_4 -> bool_3
  | zero_5 __25982 => true_3
  | (succ_6 n_25983) zero_5 => false_4
  | (succ_6 n_25984) (succ_6 n_25985) => ((lte_25979) n_25984 n_25985)

#[program]
def lt_6‹› : nat_4 -> nat_4 -> bool_3 :=
  function lt_25988 : nat_4 -> nat_4 -> bool_3
  | x_25991 y_25992 => ((lte_5) (succ_6‹› x_25991) y_25992)

#[program]
def pred_7‹› : nat_4 -> nat_4 :=
  function pred_25994 : nat_4 -> nat_4
  | zero_5 => zero_5
  | (succ_6 n_25996) => n_25996

#[program]
def add_8‹› : nat_4 -> nat_4 -> nat_4 :=
  function add_25999 : nat_4 -> nat_4 -> nat_4
  | zero_5 __26002 => __26002
  | (succ_6 n_26003) __26004 => (succ_6‹› ((add_25999) n_26003 __26004))

#[program]
def sub_9‹› : nat_4 -> nat_4 -> nat_4 :=
  function sub_26007 : nat_4 -> nat_4 -> nat_4
  | __26010 zero_5 => __26010
  | __26011 (succ_6 n_26012) => ((sub_26007) ((pred_7) __26011) n_26012)

#[program]
def mul_10‹› : nat_4 -> nat_4 -> nat_4 :=
  function mul_26015 : nat_4 -> nat_4 -> nat_4
  | zero_5 __26018 => zero_5
  | (succ_6 n_26019) __26020 =>
    ((add_8) __26020 ((mul_26015) n_26019 __26020))

#[program]
def div_11‹› : nat_4 -> nat_4 -> nat_4 :=
  function div_26023 : nat_4 -> nat_4 -> nat_4
  | x_26026 y_26027 =>
    match ((lt_6) x_26026 y_26027) in bool_3 -o nat_4 with
    | true_3 => zero_5
    | false_4 =>
      (succ_6‹› ((div_26023) ((sub_9) x_26026 y_26027) y_26027))

#[program]
def rem_12‹› : nat_4 -> nat_4 -> nat_4 :=
  function rem_26031 : nat_4 -> nat_4 -> nat_4
  | x_26034 y_26035 =>
    ((sub_9) x_26034 ((mul_10) ((div_11) x_26034 y_26035) y_26035))

#[program]
def pow_13‹› : nat_4 -> nat_4 -> nat_4 :=
  function pow_26038 : nat_4 -> nat_4 -> nat_4
  | __26041 zero_5 => (succ_6‹› zero_5)
  | __26042 (succ_6 n_26043) =>
    ((mul_10) __26042 ((pow_26038) __26042 n_26043))

#[logical]
extern proto_14‹› : U

#[logical]
extern act0_15‹s_26044› :
  bool_3 ->
    ∀ (A_26046 : Type‹s_26044›) -> A_26046 -> proto_14 -> proto_14

#[logical]
extern act1_16‹s_26049› :
  bool_3 ->
    ∀ (A_26051 : Type‹s_26049›) -> A_26051 -> proto_14 -> proto_14

#[logical]
extern endp_17‹› : proto_14

#[logical]
extern ch_18‹› : bool_3 -> proto_14 -> L

#[program]
extern close_19‹› :
  ∀ {b_26056 : bool_3} -> ((ch_18) b_26056 endp_17) -> IO unit_2

#[program]
extern send0_20‹s_26058› :
  ∀ {b1_26059 : bool_3} ->
    ∀ {b2_26060 : bool_3} ->
      ∀ {A_26061 : Type‹s_26058›} ->
        ∀ {B_26062 : A_26061 -> proto_14} ->
          {(eq_1‹U› bool_3 ((xor_4) b1_26059 b2_26060) false_4)} ->
            ((ch_18)
              b1_26059 ((act0_15‹s_26058›) b2_26060 A_26061 B_26062)) ->
              ∀ {x_26066 : A_26061} -o
                IO ((ch_18) b1_26059 ((B_26062) x_26066))

#[program]
extern send1_21‹s_26067› :
  ∀ {b1_26068 : bool_3} ->
    ∀ {b2_26069 : bool_3} ->
      ∀ {A_26070 : Type‹s_26067›} ->
        ∀ {B_26071 : A_26070 -> proto_14} ->
          {(eq_1‹U› bool_3 ((xor_4) b1_26068 b2_26069) false_4)} ->
            ((ch_18)
              b1_26068 ((act1_16‹s_26067›) b2_26069 A_26070 B_26071)) ->
              ∀ (x_26075 : A_26070) -o
                IO ((ch_18) b1_26068 ((B_26071) x_26075))

#[program]
extern recv0_22‹s_26076› :
  ∀ {b1_26077 : bool_3} ->
    ∀ {b2_26078 : bool_3} ->
      ∀ {A_26079 : Type‹s_26076›} ->
        ∀ {B_26080 : A_26079 -> proto_14} ->
          {(eq_1‹U› bool_3 ((xor_4) b1_26077 b2_26078) true_3)} ->
            ((ch_18)
              b1_26077 ((act0_15‹s_26076›) b2_26078 A_26079 B_26080)) ->
              IO (exists0_5‹s_26076,L›
                   A_26079
                   function _26084 : A_26079 -> L
                   | __26086 => ((ch_18) b1_26077 ((B_26080) __26086)))

#[program]
extern recv1_23‹s_26087› :
  ∀ {b1_26088 : bool_3} ->
    ∀ {b2_26089 : bool_3} ->
      ∀ {A_26090 : Type‹s_26087›} ->
        ∀ {B_26091 : A_26090 -> proto_14} ->
          {(eq_1‹U› bool_3 ((xor_4) b1_26088 b2_26089) true_3)} ->
            ((ch_18)
              b1_26088 ((act1_16‹s_26087›) b2_26089 A_26090 B_26091)) ->
              IO (exists1_6‹s_26087,L›
                   A_26090
                   function _26095 : A_26090 -> L
                   | __26097 => ((ch_18) b1_26088 ((B_26091) __26097)))

#[program]
extern fork_24‹› :
  ∀ {b_26098 : bool_3} ->
    ∀ {P_26099 : proto_14} ->
      ((ch_18) b_26098 P_26099) -o IO unit_2 ->
        IO ((ch_18) ((not_1) b_26098) P_26099)

#[logical]
def DH_25‹› : nat_4 -> nat_4 -> proto_14 :=
  function DH_26104 : nat_4 -> nat_4 -> proto_14
  | p_26107 g_26108 =>
    ((act0_15‹U›)
      true_3 nat_4
      function _26109 : nat_4 -> proto_14
      | __26111 =>
        ((act1_16‹U›)
          true_3 nat_4
          function _26112 : nat_4 -> proto_14
          | __26114 =>
            ((act0_15‹U›)
              true_3
              (eq_1‹U›
                nat_4 __26114 ((rem_12) ((pow_13) g_26108 __26111) p_26107))
              function _26115 :
                (eq_1‹U›
                  nat_4 __26114 ((rem_12) ((pow_13) g_26108 __26111) p_26107)) ->
                  proto_14
              | __26117 =>
                ((act0_15‹U›)
                  false_4 nat_4
                  function _26118 : nat_4 -> proto_14
                  | __26120 =>
                    ((act1_16‹U›)
                      false_4 nat_4
                      function _26121 : nat_4 -> proto_14
                      | __26123 =>
                        ((act0_15‹U›)
                          false_4
                          (eq_1‹U›
                            nat_4 __26123
                            ((rem_12) ((pow_13) g_26108 __26120) p_26107))
                          function _26124 :
                            (eq_1‹U›
                              nat_4 __26123
                              ((rem_12) ((pow_13) g_26108 __26120) p_26107)) ->
                              proto_14
                          | __26126 => endp_17))))))

#[logical]
def DH_ch_26‹› : nat_4 -> nat_4 -> L :=
  function DH_ch_26129 : nat_4 -> nat_4 -> L
  | p_26132 g_26133 => ((ch_18) true_3 ((DH_25) p_26132 g_26133))

#[logical]
def DH_hc_27‹› : nat_4 -> nat_4 -> L :=
  function DH_hc_26136 : nat_4 -> nat_4 -> L
  | p_26139 g_26140 => ((ch_18) false_4 ((DH_25) p_26139 g_26140))

#[program]
def alice_28‹› :
  nat_4 ->
    ∀ (p_26142 : nat_4) ->
      ∀ (g_26143 : nat_4) -> ((DH_ch_26) p_26142 g_26143) -> IO unit_2
:=
  function alice_26145 :
    nat_4 ->
      ∀ (p_26147 : nat_4) ->
        ∀ (g_26148 : nat_4) -> ((DH_ch_26) p_26147 g_26148) -> IO unit_2
  | a_26150 p_26151 g_26152 c_26153 =>
    let* c_26154 :=
      ((send0_20‹U›)
        true_3 true_3 nat_4
        function _26155 : nat_4 -> proto_14
        | __26157 =>
          ((act1_16‹U›)
            true_3 nat_4
            function _26158 : nat_4 -> proto_14
            | __26160 =>
              ((act0_15‹U›)
                true_3
                (eq_1‹U›
                  nat_4 __26160 ((rem_12) ((pow_13) g_26152 __26157) p_26151))
                function _26161 :
                  (eq_1‹U›
                    nat_4 __26160
                    ((rem_12) ((pow_13) g_26152 __26157) p_26151)) ->
                    proto_14
                | __26163 =>
                  ((act0_15‹U›)
                    false_4 nat_4
                    function _26164 : nat_4 -> proto_14
                    | __26166 =>
                      ((act1_16‹U›)
                        false_4 nat_4
                        function _26167 : nat_4 -> proto_14
                        | __26169 =>
                          ((act0_15‹U›)
                            false_4
                            (eq_1‹U›
                              nat_4 __26169
                              ((rem_12) ((pow_13) g_26152 __26166) p_26151))
                            function _26170 :
                              (eq_1‹U›
                                nat_4 __26169
                                ((rem_12) ((pow_13) g_26152 __26166) p_26151)) ->
                                proto_14
                            | __26172 => endp_17)))))
        (refl_1‹U› bool_3 ((xor_4) true_3 true_3)) c_26153 a_26150)
    in
    let* c_26173 :=
      ((send1_21‹U›)
        true_3 true_3 nat_4
        function _26174 : nat_4 -> proto_14
        | __26176 =>
          ((act0_15‹U›)
            true_3
            (eq_1‹U›
              nat_4 __26176 ((rem_12) ((pow_13) g_26152 a_26150) p_26151))
            function _26177 :
              (eq_1‹U›
                nat_4 __26176 ((rem_12) ((pow_13) g_26152 a_26150) p_26151)) ->
                proto_14
            | __26179 =>
              ((act0_15‹U›)
                false_4 nat_4
                function _26180 : nat_4 -> proto_14
                | __26182 =>
                  ((act1_16‹U›)
                    false_4 nat_4
                    function _26183 : nat_4 -> proto_14
                    | __26185 =>
                      ((act0_15‹U›)
                        false_4
                        (eq_1‹U›
                          nat_4 __26185
                          ((rem_12) ((pow_13) g_26152 __26182) p_26151))
                        function _26186 :
                          (eq_1‹U›
                            nat_4 __26185
                            ((rem_12) ((pow_13) g_26152 __26182) p_26151)) ->
                            proto_14
                        | __26188 => endp_17))))
        (refl_1‹U› bool_3 ((xor_4) true_3 true_3)) c_26154
        ((rem_12) ((pow_13) g_26152 a_26150) p_26151))
    in
    let* c_26189 :=
      ((send0_20‹U›)
        true_3 true_3
        (eq_1‹U›
          nat_4 ((rem_12) ((pow_13) g_26152 a_26150) p_26151)
          ((rem_12) ((pow_13) g_26152 a_26150) p_26151))
        function _26190 :
          (eq_1‹U›
            nat_4 ((rem_12) ((pow_13) g_26152 a_26150) p_26151)
            ((rem_12) ((pow_13) g_26152 a_26150) p_26151)) -> proto_14
        | __26192 =>
          ((act0_15‹U›)
            false_4 nat_4
            function _26193 : nat_4 -> proto_14
            | __26195 =>
              ((act1_16‹U›)
                false_4 nat_4
                function _26196 : nat_4 -> proto_14
                | __26198 =>
                  ((act0_15‹U›)
                    false_4
                    (eq_1‹U›
                      nat_4 __26198
                      ((rem_12) ((pow_13) g_26152 __26195) p_26151))
                    function _26199 :
                      (eq_1‹U›
                        nat_4 __26198
                        ((rem_12) ((pow_13) g_26152 __26195) p_26151)) ->
                        proto_14
                    | __26201 => endp_17)))
        (refl_1‹U› bool_3 ((xor_4) true_3 true_3)) c_26173
        (refl_1‹U› nat_4 ((rem_12) ((pow_13) g_26152 a_26150) p_26151)))
    in
    let* _26202 :=
      ((recv0_22‹U›)
        true_3 false_4 nat_4
        function _26203 : nat_4 -> proto_14
        | __26205 =>
          ((act1_16‹U›)
            false_4 nat_4
            function _26206 : nat_4 -> proto_14
            | __26208 =>
              ((act0_15‹U›)
                false_4
                (eq_1‹U›
                  nat_4 __26208 ((rem_12) ((pow_13) g_26152 __26205) p_26151))
                function _26209 :
                  (eq_1‹U›
                    nat_4 __26208
                    ((rem_12) ((pow_13) g_26152 __26205) p_26151)) ->
                    proto_14
                | __26211 => endp_17))
        (refl_1‹U› bool_3 ((xor_4) true_3 false_4)) c_26189)
    in
    match _26202 in
      (exists0_5‹U,L›
        nat_4
        function _26213 : nat_4 -> L
        | __26215 =>
          ((ch_18)
            true_3
            ((function _26216 : nat_4 -> proto_14
              | __26218 =>
                ((act1_16‹U›)
                  false_4 nat_4
                  function _26219 : nat_4 -> proto_14
                  | __26221 =>
                    ((act0_15‹U›)
                      false_4
                      (eq_1‹U›
                        nat_4 __26221
                        ((rem_12) ((pow_13) g_26152 __26218) p_26151))
                      function _26222 :
                        (eq_1‹U›
                          nat_4 __26221
                          ((rem_12) ((pow_13) g_26152 __26218) p_26151)) ->
                          proto_14
                      | __26224 => endp_17)))
              __26215))) -o
        IO unit_2
    with
    | (ex0_7 m_26225 n_26226) =>
      let* _26227 :=
        ((recv1_23‹U›)
          true_3 false_4 nat_4
          function _26228 : nat_4 -> proto_14
          | __26230 =>
            ((act0_15‹U›)
              false_4
              (eq_1‹U›
                nat_4 __26230 ((rem_12) ((pow_13) g_26152 m_26225) p_26151))
              function _26231 :
                (eq_1‹U›
                  nat_4 __26230 ((rem_12) ((pow_13) g_26152 m_26225) p_26151)) ->
                  proto_14
              | __26233 => endp_17)
          (refl_1‹U› bool_3 ((xor_4) true_3 false_4)) n_26226)
      in
      match _26227 in
        (exists1_6‹U,L›
          nat_4
          function _26235 : nat_4 -> L
          | __26237 =>
            ((ch_18)
              true_3
              ((function _26238 : nat_4 -> proto_14
                | __26240 =>
                  ((act0_15‹U›)
                    false_4
                    (eq_1‹U›
                      nat_4 __26240
                      ((rem_12) ((pow_13) g_26152 m_26225) p_26151))
                    function _26241 :
                      (eq_1‹U›
                        nat_4 __26240
                        ((rem_12) ((pow_13) g_26152 m_26225) p_26151)) ->
                        proto_14
                    | __26243 => endp_17))
                __26237))) -o
          IO unit_2
      with
      | (ex1_8 m_26244 n_26245) =>
        let* _26246 :=
          ((recv0_22‹U›)
            true_3 false_4
            (eq_1‹U›
              nat_4 m_26244 ((rem_12) ((pow_13) g_26152 m_26225) p_26151))
            function _26247 :
              (eq_1‹U›
                nat_4 m_26244 ((rem_12) ((pow_13) g_26152 m_26225) p_26151)) ->
                proto_14
            | __26249 => endp_17
            (refl_1‹U› bool_3 ((xor_4) true_3 false_4)) n_26245)
        in
        match _26246 in
          (exists0_5‹U,L›
            (eq_1‹U›
              nat_4 m_26244 ((rem_12) ((pow_13) g_26152 m_26225) p_26151))
            function _26251 :
              (eq_1‹U›
                nat_4 m_26244 ((rem_12) ((pow_13) g_26152 m_26225) p_26151)) ->
                L
            | __26253 =>
              ((ch_18)
                true_3
                ((function _26254 :
                    (eq_1‹U›
                      nat_4 m_26244
                      ((rem_12) ((pow_13) g_26152 m_26225) p_26151)) ->
                      proto_14
                  | __26256 => endp_17) __26253))) -o
            IO unit_2
        with
        | (ex0_7 m_26257 n_26258) => ((close_19) true_3 n_26258)

#[program]
def bob_29‹› :
  nat_4 ->
    ∀ (p_26260 : nat_4) ->
      ∀ (g_26261 : nat_4) -> ((DH_hc_27) p_26260 g_26261) -> IO unit_2
:=
  function bob_26263 :
    nat_4 ->
      ∀ (p_26265 : nat_4) ->
        ∀ (g_26266 : nat_4) -> ((DH_hc_27) p_26265 g_26266) -> IO unit_2
  | b_26268 p_26269 g_26270 c_26271 =>
    let* _26272 :=
      ((recv0_22‹U›)
        false_4 true_3 nat_4
        function _26273 : nat_4 -> proto_14
        | __26275 =>
          ((act1_16‹U›)
            true_3 nat_4
            function _26276 : nat_4 -> proto_14
            | __26278 =>
              ((act0_15‹U›)
                true_3
                (eq_1‹U›
                  nat_4 __26278 ((rem_12) ((pow_13) g_26270 __26275) p_26269))
                function _26279 :
                  (eq_1‹U›
                    nat_4 __26278
                    ((rem_12) ((pow_13) g_26270 __26275) p_26269)) ->
                    proto_14
                | __26281 =>
                  ((act0_15‹U›)
                    false_4 nat_4
                    function _26282 : nat_4 -> proto_14
                    | __26284 =>
                      ((act1_16‹U›)
                        false_4 nat_4
                        function _26285 : nat_4 -> proto_14
                        | __26287 =>
                          ((act0_15‹U›)
                            false_4
                            (eq_1‹U›
                              nat_4 __26287
                              ((rem_12) ((pow_13) g_26270 __26284) p_26269))
                            function _26288 :
                              (eq_1‹U›
                                nat_4 __26287
                                ((rem_12) ((pow_13) g_26270 __26284) p_26269)) ->
                                proto_14
                            | __26290 => endp_17)))))
        (refl_1‹U› bool_3 ((xor_4) false_4 true_3)) c_26271)
    in
    match _26272 in
      (exists0_5‹U,L›
        nat_4
        function _26292 : nat_4 -> L
        | __26294 =>
          ((ch_18)
            false_4
            ((function _26295 : nat_4 -> proto_14
              | __26297 =>
                ((act1_16‹U›)
                  true_3 nat_4
                  function _26298 : nat_4 -> proto_14
                  | __26300 =>
                    ((act0_15‹U›)
                      true_3
                      (eq_1‹U›
                        nat_4 __26300
                        ((rem_12) ((pow_13) g_26270 __26297) p_26269))
                      function _26301 :
                        (eq_1‹U›
                          nat_4 __26300
                          ((rem_12) ((pow_13) g_26270 __26297) p_26269)) ->
                          proto_14
                      | __26303 =>
                        ((act0_15‹U›)
                          false_4 nat_4
                          function _26304 : nat_4 -> proto_14
                          | __26306 =>
                            ((act1_16‹U›)
                              false_4 nat_4
                              function _26307 : nat_4 -> proto_14
                              | __26309 =>
                                ((act0_15‹U›)
                                  false_4
                                  (eq_1‹U›
                                    nat_4 __26309
                                    ((rem_12)
                                      ((pow_13) g_26270 __26306) p_26269))
                                  function _26310 :
                                    (eq_1‹U›
                                      nat_4 __26309
                                      ((rem_12)
                                        ((pow_13) g_26270 __26306) p_26269)) ->
                                      proto_14
                                  | __26312 => endp_17))))))
              __26294))) -o
        IO unit_2
    with
    | (ex0_7 m_26313 n_26314) =>
      let* _26315 :=
        ((recv1_23‹U›)
          false_4 true_3 nat_4
          function _26316 : nat_4 -> proto_14
          | __26318 =>
            ((act0_15‹U›)
              true_3
              (eq_1‹U›
                nat_4 __26318 ((rem_12) ((pow_13) g_26270 m_26313) p_26269))
              function _26319 :
                (eq_1‹U›
                  nat_4 __26318 ((rem_12) ((pow_13) g_26270 m_26313) p_26269)) ->
                  proto_14
              | __26321 =>
                ((act0_15‹U›)
                  false_4 nat_4
                  function _26322 : nat_4 -> proto_14
                  | __26324 =>
                    ((act1_16‹U›)
                      false_4 nat_4
                      function _26325 : nat_4 -> proto_14
                      | __26327 =>
                        ((act0_15‹U›)
                          false_4
                          (eq_1‹U›
                            nat_4 __26327
                            ((rem_12) ((pow_13) g_26270 __26324) p_26269))
                          function _26328 :
                            (eq_1‹U›
                              nat_4 __26327
                              ((rem_12) ((pow_13) g_26270 __26324) p_26269)) ->
                              proto_14
                          | __26330 => endp_17))))
          (refl_1‹U› bool_3 ((xor_4) false_4 true_3)) n_26314)
      in
      match _26315 in
        (exists1_6‹U,L›
          nat_4
          function _26332 : nat_4 -> L
          | __26334 =>
            ((ch_18)
              false_4
              ((function _26335 : nat_4 -> proto_14
                | __26337 =>
                  ((act0_15‹U›)
                    true_3
                    (eq_1‹U›
                      nat_4 __26337
                      ((rem_12) ((pow_13) g_26270 m_26313) p_26269))
                    function _26338 :
                      (eq_1‹U›
                        nat_4 __26337
                        ((rem_12) ((pow_13) g_26270 m_26313) p_26269)) ->
                        proto_14
                    | __26340 =>
                      ((act0_15‹U›)
                        false_4 nat_4
                        function _26341 : nat_4 -> proto_14
                        | __26343 =>
                          ((act1_16‹U›)
                            false_4 nat_4
                            function _26344 : nat_4 -> proto_14
                            | __26346 =>
                              ((act0_15‹U›)
                                false_4
                                (eq_1‹U›
                                  nat_4 __26346
                                  ((rem_12)
                                    ((pow_13) g_26270 __26343) p_26269))
                                function _26347 :
                                  (eq_1‹U›
                                    nat_4 __26346
                                    ((rem_12)
                                      ((pow_13) g_26270 __26343) p_26269)) ->
                                    proto_14
                                | __26349 => endp_17)))))
                __26334))) -o
          IO unit_2
      with
      | (ex1_8 m_26350 n_26351) =>
        let* _26352 :=
          ((recv0_22‹U›)
            false_4 true_3
            (eq_1‹U›
              nat_4 m_26350 ((rem_12) ((pow_13) g_26270 m_26313) p_26269))
            function _26353 :
              (eq_1‹U›
                nat_4 m_26350 ((rem_12) ((pow_13) g_26270 m_26313) p_26269)) ->
                proto_14
            | __26355 =>
              ((act0_15‹U›)
                false_4 nat_4
                function _26356 : nat_4 -> proto_14
                | __26358 =>
                  ((act1_16‹U›)
                    false_4 nat_4
                    function _26359 : nat_4 -> proto_14
                    | __26361 =>
                      ((act0_15‹U›)
                        false_4
                        (eq_1‹U›
                          nat_4 __26361
                          ((rem_12) ((pow_13) g_26270 __26358) p_26269))
                        function _26362 :
                          (eq_1‹U›
                            nat_4 __26361
                            ((rem_12) ((pow_13) g_26270 __26358) p_26269)) ->
                            proto_14
                        | __26364 => endp_17)))
            (refl_1‹U› bool_3 ((xor_4) false_4 true_3)) n_26351)
        in
        match _26352 in
          (exists0_5‹U,L›
            (eq_1‹U›
              nat_4 m_26350 ((rem_12) ((pow_13) g_26270 m_26313) p_26269))
            function _26366 :
              (eq_1‹U›
                nat_4 m_26350 ((rem_12) ((pow_13) g_26270 m_26313) p_26269)) ->
                L
            | __26368 =>
              ((ch_18)
                false_4
                ((function _26369 :
                    (eq_1‹U›
                      nat_4 m_26350
                      ((rem_12) ((pow_13) g_26270 m_26313) p_26269)) ->
                      proto_14
                  | __26371 =>
                    ((act0_15‹U›)
                      false_4 nat_4
                      function _26372 : nat_4 -> proto_14
                      | __26374 =>
                        ((act1_16‹U›)
                          false_4 nat_4
                          function _26375 : nat_4 -> proto_14
                          | __26377 =>
                            ((act0_15‹U›)
                              false_4
                              (eq_1‹U›
                                nat_4 __26377
                                ((rem_12) ((pow_13) g_26270 __26374) p_26269))
                              function _26378 :
                                (eq_1‹U›
                                  nat_4 __26377
                                  ((rem_12)
                                    ((pow_13) g_26270 __26374) p_26269)) ->
                                  proto_14
                              | __26380 => endp_17))))
                  __26368))) -o
            IO unit_2
        with
        | (ex0_7 m_26381 n_26382) =>
          let* c_26383 :=
            ((send0_20‹U›)
              false_4 false_4 nat_4
              function _26384 : nat_4 -> proto_14
              | __26386 =>
                ((act1_16‹U›)
                  false_4 nat_4
                  function _26387 : nat_4 -> proto_14
                  | __26389 =>
                    ((act0_15‹U›)
                      false_4
                      (eq_1‹U›
                        nat_4 __26389
                        ((rem_12) ((pow_13) g_26270 __26386) p_26269))
                      function _26390 :
                        (eq_1‹U›
                          nat_4 __26389
                          ((rem_12) ((pow_13) g_26270 __26386) p_26269)) ->
                          proto_14
                      | __26392 => endp_17))
              (refl_1‹U› bool_3 ((xor_4) false_4 false_4)) n_26382
              b_26268)
          in
          let* c_26393 :=
            ((send1_21‹U›)
              false_4 false_4 nat_4
              function _26394 : nat_4 -> proto_14
              | __26396 =>
                ((act0_15‹U›)
                  false_4
                  (eq_1‹U›
                    nat_4 __26396
                    ((rem_12) ((pow_13) g_26270 b_26268) p_26269))
                  function _26397 :
                    (eq_1‹U›
                      nat_4 __26396
                      ((rem_12) ((pow_13) g_26270 b_26268) p_26269)) ->
                      proto_14
                  | __26399 => endp_17)
              (refl_1‹U› bool_3 ((xor_4) false_4 false_4)) c_26383
              ((rem_12) ((pow_13) g_26270 b_26268) p_26269))
          in
          let* c_26400 :=
            ((send0_20‹U›)
              false_4 false_4
              (eq_1‹U›
                nat_4 ((rem_12) ((pow_13) g_26270 b_26268) p_26269)
                ((rem_12) ((pow_13) g_26270 b_26268) p_26269))
              function _26401 :
                (eq_1‹U›
                  nat_4 ((rem_12) ((pow_13) g_26270 b_26268) p_26269)
                  ((rem_12) ((pow_13) g_26270 b_26268) p_26269)) -> proto_14
              | __26403 => endp_17
              (refl_1‹U› bool_3 ((xor_4) false_4 false_4)) c_26393
              (refl_1‹U›
                nat_4 ((rem_12) ((pow_13) g_26270 b_26268) p_26269)))
          in ((close_19) false_4 c_26400)

-----------------------------------------

#[logical]
inductive eqU_8 where
| reflU_10 of layout[]

#[logical]
inductive eqL_7 where
| reflL_9 of layout[]

#[program]
inductive unit_2 where
| tt_2 of layout[]

#[program]
inductive bool_3 where
| true_3 of layout[]
| false_4 of layout[]

#[program]
inductive nat_4 where
| zero_5 of layout[]
| succ_6 of layout[R]

#[program]
inductive exists0UU_12 where
| ex0UU_14 of layout[N, R]

#[program]
inductive exists0UL_11 where
| ex0UL_13 of layout[N, R]

#[program]
inductive exists0LU_10 where
| ex0LU_12 of layout[N, R]

#[program]
inductive exists0LL_9 where
| ex0LL_11 of layout[N, R]

#[program]
inductive exists1UU_16 where
| ex1UU_18 of layout[R, R]

#[program]
inductive exists1UL_15 where
| ex1UL_17 of layout[R, R]

#[program]
inductive exists1LU_14 where
| ex1LU_16 of layout[R, R]

#[program]
inductive exists1LL_13 where
| ex1LL_15 of layout[R, R]

#[program]
def not_1 :=
  fun not_60723 (__60724) ->
    match __60724 with
    | true_3  => false_4 | false_4  => true_3
    end

#[program]
def and_2 :=
  fun and_60725 (__60726) -> (__60727) ->
    match __60726 with
    | true_3  =>
      match __60727 with
      | true_3  => true_3 | false_4  => false_4
      end
    | false_4  => false_4
    end

#[program]
def or_3 :=
  fun or_60728 (__60729) -> (__60730) ->
    match __60729 with
    | true_3  => true_3
    | false_4  =>
      match __60730 with
      | true_3  => true_3 | false_4  => false_4
      end
    end

#[program]
def xor_4 :=
  fun xor_60731 (__60732) -> (__60733) -o
    match __60732 with
    | true_3  =>
      match __60733 with
      | true_3  => false_4 | false_4  => true_3
      end
    | false_4  =>
      match __60733 with
      | true_3  => true_3 | false_4  => false_4
      end
    end

#[program]
def lte_5 :=
  fun lte_60734 (__60735) -> (__60736) ->
    match __60735 with
    | zero_5  => true_3
    | succ_6 n_60737 =>
      match __60736 with
      | zero_5  => false_4 | succ_6 n_60738 => ((lte_60734) n_60737 n_60738)
      end
    end

#[program]
def lt_6 :=
  fun lt_60739 (x_60740) -> (y_60741) -> ((lte_5) (succ_6 x_60740) y_60741)

#[program]
def pred_7 :=
  fun pred_60742 (__60743) ->
    match __60743 with
    | zero_5  => zero_5 | succ_6 n_60744 => n_60744
    end

#[program]
def add_8 :=
  fun add_60745 (__60746) -> (__60747) ->
    match __60746 with
    | zero_5  => __60747
    | succ_6 n_60748 => (succ_6 ((add_60745) n_60748 __60747))
    end

#[program]
def sub_9 :=
  fun sub_60749 (__60750) -> (__60751) ->
    match __60751 with
    | zero_5  => __60750
    | succ_6 n_60752 => ((sub_60749) ((pred_7) __60750) n_60752)
    end

#[program]
def mul_10 :=
  fun mul_60753 (__60754) -> (__60755) ->
    match __60754 with
    | zero_5  => zero_5
    | succ_6 n_60756 => ((add_8) __60755 ((mul_60753) n_60756 __60755))
    end

#[program]
def div_11 :=
  fun div_60757 (x_60758) -> (y_60759) ->
    match ((lt_6) x_60758 y_60759) with
    | true_3  => zero_5
    | false_4  => (succ_6 ((div_60757) ((sub_9) x_60758 y_60759) y_60759))
    end

#[program]
def rem_12 :=
  fun rem_60760 (x_60761) -> (y_60762) ->
    ((sub_9) x_60761 ((mul_10) ((div_11) x_60761 y_60762) y_60762))

#[program]
def pow_13 :=
  fun pow_60763 (__60764) -> (__60765) ->
    match __60765 with
    | zero_5  => (succ_6 zero_5)
    | succ_6 n_60766 => ((mul_10) __60764 ((pow_60763) __60764 n_60766))
    end

#[logical]
extern proto_14

#[logical]
extern act0U_31

#[logical]
extern act0L_30

#[logical]
extern act1U_33

#[logical]
extern act1L_32

#[logical]
extern endp_17

#[logical]
extern ch_18

#[program]
extern close_19

#[program]
extern send0U_35

#[program]
extern send0L_34

#[program]
extern send1U_37

#[program]
extern send1L_36

#[program]
extern recv0U_39

#[program]
extern recv0L_38

#[program]
extern recv1U_41

#[program]
extern recv1L_40

#[program]
extern fork_24

#[logical]
def DH_25 := NULL

#[logical]
def DH_ch_26 := NULL

#[logical]
def DH_hc_27 := NULL

#[program]
def alice_28 :=
  fun alice_60767 (a_60768) -> (p_60769) -> (g_60770) -> (c_60771) ->
    let* c_60772 := ((send0U_35) NULL NULL NULL NULL NULL c_60771 NULL) in
    let* c_60773 :=
      ((send1U_37)
        NULL NULL NULL NULL NULL c_60772
        ((rem_12) ((pow_13) g_60770 a_60768) p_60769))
    in
    let* c_60774 := ((send0U_35) NULL NULL NULL NULL NULL c_60773 NULL) in
    let* _60775 := ((recv0U_39) NULL NULL NULL NULL NULL c_60774) in
    match _60775 with
    | ex0UL_13 m_60776 n_60777 =>
      let* _60778 := ((recv1U_41) NULL NULL NULL NULL NULL n_60777) in
      match _60778 with
      | ex1UL_17 m_60779 n_60780 =>
        let* _60781 := ((recv0U_39) NULL NULL NULL NULL NULL n_60780) in
        match _60781 with
        | ex0UL_13 m_60782 n_60783 => ((close_19) NULL n_60783)
        end
      end
    end

#[program]
def bob_29 :=
  fun bob_60784 (b_60785) -> (p_60786) -> (g_60787) -> (c_60788) ->
    let* _60789 := ((recv0U_39) NULL NULL NULL NULL NULL c_60788) in
    match _60789 with
    | ex0UL_13 m_60790 n_60791 =>
      let* _60792 := ((recv1U_41) NULL NULL NULL NULL NULL n_60791) in
      match _60792 with
      | ex1UL_17 m_60793 n_60794 =>
        let* _60795 := ((recv0U_39) NULL NULL NULL NULL NULL n_60794) in
        match _60795 with
        | ex0UL_13 m_60796 n_60797 =>
          let* c_60798 := ((send0U_35) NULL NULL NULL NULL NULL n_60797 NULL)
          in
          let* c_60799 :=
            ((send1U_37)
              NULL NULL NULL NULL NULL c_60798
              ((rem_12) ((pow_13) g_60787 b_60785) p_60786))
          in
          let* c_60800 := ((send0U_35) NULL NULL NULL NULL NULL c_60799 NULL)
          in ((close_19) NULL c_60800)
        end
      end
    end

-----------------------------------------

#[logical]
inductive eqU_8 where
| reflU_10 of layout[]

#[logical]
inductive eqL_7 where
| reflL_9 of layout[]

#[program]
inductive unit_2 where
| tt_2 of layout[]

#[program]
inductive bool_3 where
| true_3 of layout[]
| false_4 of layout[]

#[program]
inductive nat_4 where
| zero_5 of layout[]
| succ_6 of layout[R]

#[program]
inductive exists0UU_12 where
| ex0UU_14 of layout[N, R]

#[program]
inductive exists0UL_11 where
| ex0UL_13 of layout[N, R]

#[program]
inductive exists0LU_10 where
| ex0LU_12 of layout[N, R]

#[program]
inductive exists0LL_9 where
| ex0LL_11 of layout[N, R]

#[program]
inductive exists1UU_16 where
| ex1UU_18 of layout[R, R]

#[program]
inductive exists1UL_15 where
| ex1UL_17 of layout[R, R]

#[program]
inductive exists1LU_14 where
| ex1LU_16 of layout[R, R]

#[program]
inductive exists1LL_13 where
| ex1LL_15 of layout[R, R]

#[program]
def not_1 :=
  fun not_60879 (__60880) ->
    match __60880 with
    | true_3  => false_4 | false_4  => true_3
    end

#[program]
def and_2 :=
  fun and_60881 (__60882) -> (__60883) ->
    match __60882 with
    | true_3  =>
      match __60883 with
      | true_3  => true_3 | false_4  => false_4
      end
    | false_4  => false_4
    end

#[program]
def or_3 :=
  fun or_60884 (__60885) -> (__60886) ->
    match __60885 with
    | true_3  => true_3
    | false_4  =>
      match __60886 with
      | true_3  => true_3 | false_4  => false_4
      end
    end

#[program]
def xor_4 :=
  fun xor_60887 (__60888) -> (__60889) -o
    match __60888 with
    | true_3  =>
      match __60889 with
      | true_3  => false_4 | false_4  => true_3
      end
    | false_4  =>
      match __60889 with
      | true_3  => true_3 | false_4  => false_4
      end
    end

#[program]
def lte_5 :=
  fun lte_60890 (__60891) -> (__60892) ->
    match __60891 with
    | zero_5  => true_3
    | succ_6 n_60893 =>
      match __60892 with
      | zero_5  => false_4 | succ_6 n_60894 => ((lte_60890) n_60893 n_60894)
      end
    end

#[program]
def lt_6 :=
  fun lt_60895 (x_60896) -> (y_60897) -> ((lte_5) (succ_6 x_60896) y_60897)

#[program]
def pred_7 :=
  fun pred_60898 (__60899) ->
    match __60899 with
    | zero_5  => zero_5 | succ_6 n_60900 => n_60900
    end

#[program]
def add_8 :=
  fun add_60901 (__60902) -> (__60903) ->
    match __60902 with
    | zero_5  => __60903
    | succ_6 n_60904 => (succ_6 ((add_60901) n_60904 __60903))
    end

#[program]
def sub_9 :=
  fun sub_60905 (__60906) -> (__60907) ->
    match __60907 with
    | zero_5  => __60906
    | succ_6 n_60908 => ((sub_60905) ((pred_7) __60906) n_60908)
    end

#[program]
def mul_10 :=
  fun mul_60909 (__60910) -> (__60911) ->
    match __60910 with
    | zero_5  => zero_5
    | succ_6 n_60912 => ((add_8) __60911 ((mul_60909) n_60912 __60911))
    end

#[program]
def div_11 :=
  fun div_60913 (x_60914) -> (y_60915) ->
    match ((lt_6) x_60914 y_60915) with
    | true_3  => zero_5
    | false_4  => (succ_6 ((div_60913) ((sub_9) x_60914 y_60915) y_60915))
    end

#[program]
def rem_12 :=
  fun rem_60916 (x_60917) -> (y_60918) ->
    ((sub_9) x_60917 ((mul_10) ((div_11) x_60917 y_60918) y_60918))

#[program]
def pow_13 :=
  fun pow_60919 (__60920) -> (__60921) ->
    match __60921 with
    | zero_5  => (succ_6 zero_5)
    | succ_6 n_60922 => ((mul_10) __60920 ((pow_60919) __60920 n_60922))
    end

#[logical]
extern proto_14

#[logical]
extern act0U_31

#[logical]
extern act0L_30

#[logical]
extern act1U_33

#[logical]
extern act1L_32

#[logical]
extern endp_17

#[logical]
extern ch_18

#[program]
extern close_19

#[program]
extern send0U_35

#[program]
extern send0L_34

#[program]
extern send1U_37

#[program]
extern send1L_36

#[program]
extern recv0U_39

#[program]
extern recv0L_38

#[program]
extern recv1U_41

#[program]
extern recv1L_40

#[program]
extern fork_24

#[logical]
def DH_25 := NULL

#[logical]
def DH_ch_26 := NULL

#[logical]
def DH_hc_27 := NULL

#[program]
def alice_28 :=
  fun alice_60923 (a_60924) -> (p_60925) -> (g_60926) -> (c_60927) ->
    let* c_60928 := ((send0U_35) NULL NULL NULL NULL NULL c_60927 NULL) in
    let* c_60929 :=
      ((send1U_37)
        NULL NULL NULL NULL NULL c_60928
        ((rem_12) ((pow_13) g_60926 a_60924) p_60925))
    in
    let* c_60930 := ((send0U_35) NULL NULL NULL NULL NULL c_60929 NULL) in
    let* _60931 := ((recv0U_39) NULL NULL NULL NULL NULL c_60930) in
    match _60931 with
    | ex0UL_13 m_60932 n_60933 =>
      let* _60934 := ((recv1U_41) NULL NULL NULL NULL NULL n_60933) in
      match _60934 with
      | ex1UL_17 m_60935 n_60936 =>
        let* _60937 := ((recv0U_39) NULL NULL NULL NULL NULL n_60936) in
        match _60937 with
        | ex0UL_13 m_60938 n_60939 => ((close_19) NULL n_60939)
        end
      end
    end

#[program]
def bob_29 :=
  fun bob_60940 (b_60941) -> (p_60942) -> (g_60943) -> (c_60944) ->
    let* _60945 := ((recv0U_39) NULL NULL NULL NULL NULL c_60944) in
    match _60945 with
    | ex0UL_13 m_60946 n_60947 =>
      let* _60948 := ((recv1U_41) NULL NULL NULL NULL NULL n_60947) in
      match _60948 with
      | ex1UL_17 m_60949 n_60950 =>
        let* _60951 := ((recv0U_39) NULL NULL NULL NULL NULL n_60950) in
        match _60951 with
        | ex0UL_13 m_60952 n_60953 =>
          let* c_60954 := ((send0U_35) NULL NULL NULL NULL NULL n_60953 NULL)
          in
          let* c_60955 :=
            ((send1U_37)
              NULL NULL NULL NULL NULL c_60954
              ((rem_12) ((pow_13) g_60943 b_60941) p_60942))
          in
          let* c_60956 := ((send0U_35) NULL NULL NULL NULL NULL c_60955 NULL)
          in ((close_19) NULL c_60956)
        end
      end
    end

-----------------------------------------

