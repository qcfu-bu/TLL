[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_381› : ∀ (A_382 : Type‹s_381›) -> A_382 -> ?_2[0;0] :=
  fun id_384 : ∀ (A_385 : Type‹s_381›) -> A_385 -> ?_1[0;0]
  | A_387 m_388 => m_388

#[logical]
inductive eq_1‹s_389› (A_390 : Type‹s_389›) (m_391 : A_390):
  A_390 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_391 m_391)

#[program]
def rwl_2‹s_393,r_394› :
  ∀ {A_395 : Type‹s_393›} ->
    ∀ {m_396 : A_395} ->
      ∀ {n_397 : A_395} ->
        ∀ {B_398 : A_395 -> Type‹r_394›} ->
          {(eq_1‹??_3› ?_5[0;0] m_396 n_397)} ->
            ((B_398) m_396) -> ((B_398) n_397)
:=
  fun rwl_402 :
    ∀ {A_403 : Type‹s_393›} ->
      ∀ {m_404 : A_403} ->
        ∀ {n_405 : A_403} ->
          ∀ {B_406 : A_403 -> Type‹r_394›} ->
            {(eq_1‹??_2› ?_4[0;0] m_404 n_405)} ->
              ((B_406) m_404) -> ((B_406) n_405)
  | A_410 m_411 n_412 B_413 refl_1 x_414 => x_414

#[program]
def rwr_3‹s_415,r_416› :
  ∀ {A_417 : Type‹s_415›} ->
    ∀ {m_418 : A_417} ->
      ∀ {n_419 : A_417} ->
        ∀ {B_420 : A_417 -> Type‹r_416›} ->
          {(eq_1‹??_5› ?_7[0;0] m_418 n_419)} ->
            ((B_420) n_419) -> ((B_420) m_418)
:=
  fun rwr_424 :
    ∀ {A_425 : Type‹s_415›} ->
      ∀ {m_426 : A_425} ->
        ∀ {n_427 : A_425} ->
          ∀ {B_428 : A_425 -> Type‹r_416›} ->
            {(eq_1‹??_4› ?_6[0;0] m_426 n_427)} ->
              ((B_428) n_427) -> ((B_428) m_426)
  | A_432 m_433 n_434 B_435 refl_1 x_436 => x_436

#[logical]
def congr_4‹s_437,r_438,t_439› :
  ∀ (A_440 : Type‹s_437›) ->
    ∀ (B_441 : Type‹r_438›) ->
      ∀ (m_442 : A_440) ->
        ∀ (n_443 : A_440) ->
          ∀ (f_444 : forall‹t_439›(__445 : A_440), B_441) ->
            (eq_1‹??_9› ?_12[0;0] m_442 n_443) ->
              (eq_1‹??_10› ?_13[0;0] ((f_444) m_442) ((f_444) n_443))
:=
  fun congr_447 :
    ∀ (A_448 : Type‹s_437›) ->
      ∀ (B_449 : Type‹r_438›) ->
        ∀ (m_450 : A_448) ->
          ∀ (n_451 : A_448) ->
            ∀ (f_452 : forall‹t_439›(__453 : A_448), B_449) ->
              (eq_1‹??_6› ?_8[0;0] m_450 n_451) ->
                (eq_1‹??_7› ?_9[0;0] ((f_452) m_450) ((f_452) n_451))
  | A_455 B_456 m_457 n_458 f_459 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_460 : U} ->
    ∀ {m_461 : A_460} ->
      ∀ (x_462 : (eq_1‹??_15› ?_20[0;0] m_461 m_461)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_462 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_463 :
    ∀ {A_464 : U} ->
      ∀ {m_465 : A_464} ->
        ∀ (x_466 : (eq_1‹??_11› ?_14[0;0] m_465 m_465)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_466 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_467 m_468 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_469,t_470› (A_471 : Type‹s_469›):
  A_471 -> Type‹t_470›
where
| just_2 (m_473 : A_471) : (sing_2‹??_18,??_19› ?_24[0;0] m_473)

#[logical]
def ssing_6‹s_474› :
  ∀ (A_475 : Type‹s_474›) -> A_475 -> Type‹s_474›
:=
  fun ssing_477 : ∀ (A_478 : Type‹s_474›) -> A_478 -> Type‹s_474›
  | A_480 m_481 => (sing_2‹s_474,s_474› A_480 m_481)

#[program]
def sing_elim_7‹s_482,t_483› :
  ∀ {A_484 : Type‹s_482›} ->
    ∀ {x_485 : A_484} -> (sing_2‹s_482,t_483› ?_26[0;0] x_485) -> A_484
:=
  fun sing_elim_487 :
    ∀ {A_488 : Type‹s_482›} ->
      ∀ {x_489 : A_488} ->
        (sing_2‹s_482,t_483› ?_25[0;0] x_489) -> A_488
  | A_491 x_492 (just_2 x_493) => x_493

#[logical]
def sing_uniq_8‹s_494,t_495› :
  ∀ (A_496 : Type‹s_494›) ->
    ∀ (x0_497 : A_496) ->
      ∀ (x_498 : (sing_2‹s_494,t_495› ?_33[0;0] x0_497)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_497
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_498))
:=
  fun sing_uniq_499 :
    ∀ (A_500 : Type‹s_494›) ->
      ∀ (x0_501 : A_500) ->
        ∀ (x_502 : (sing_2‹s_494,t_495› ?_27[0;0] x0_501)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_501
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_502))
  | A_503 x0_504 (just_2 _505) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_506 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_506 tt_3)
:=
  fun unit_eta_507 :
    ∀ (x_508 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_508 tt_3)
  | x_509 =>
    match x_509 in
      ∀ (x0_510 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_510 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_512 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_516 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _519 _520 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_523 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _526 _527 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_530 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _533 _534 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_535 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_538 : nat_5 -> nat_5 -> bool_4
  | zero_6 _541 => true_4
  | _542 zero_6 => false_5
  | (succ_7 x_543) (succ_7 y_544) => ((lte_538) x_543 y_544)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_547 : nat_5 -> nat_5 -> bool_4
  | x_550 y_551 => ((lte_14) (succ_7‹› x_550) y_551)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_553 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_555) => x_555

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_558 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_561 => y_561
  | (succ_7 x_562) y_563 => (succ_7‹› ((add_558) x_562 y_563))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_566 : nat_5 -> nat_5 -> nat_5
  | x_569 zero_6 => x_569
  | x_570 (succ_7 y_571) => ((sub_566) ((pred_16) x_570) y_571)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_574 : nat_5 -> nat_5 -> nat_5
  | zero_6 _577 => zero_6
  | (succ_7 x_578) y_579 => ((add_17) y_579 ((mul_574) x_578 y_579))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_582 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_585 y_586 =>
    match ((lt_15) x_585 y_586) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_588 :=
        fun loop_589 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_592 y_593 =>
          match ((sub_18) x_592 ((pred_16) y_593)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_595) => (succ_7‹› ((loop_589) x_595 y_593))
      in ((loop_588) x_585 y_586)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_598 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_601 y_602 => ((sub_18) x_601 ((mul_19) ((div_20) x_601 y_602) y_602))

#[program]
inductive list_6‹s_603,t_604› (A_605 : Type‹s_603›): Type‹t_604›
where
| nil_8 : (list_6‹??_31,??_32› A_605)
| cons_9
    (hd_606 : A_605) (tl_607 : (list_6‹??_33,t_604› A_605))
    : (list_6‹??_34,??_35› A_605)

#[program]
def free_list_22‹s_608,t_609› :
  ∀ {A_610 : Type‹s_608›} ->
    A_610 -> unit_3 -> (list_6‹??_37,t_609› A_610) -> unit_3
:=
  fun free_list_614 :
    ∀ {A_615 : Type‹s_608›} ->
      A_615 -> unit_3 -> (list_6‹??_36,t_609› A_615) -> unit_3
  | A_619 f_620 nil_8 => tt_3
  | A_621 f_622 (cons_9 x_623 xs_624) =>
    let __625 := ((f_622) x_623) in ((free_list_614) ?_52[0;0] f_622 xs_624)

#[program]
inductive exists0_7‹s_626,r_627› (A_628 : Type‹s_626›) (B_629 : 
A_628 -> Type‹r_627›): L where
| ex0_10
    {m_631 : A_628} (n_632 : ((B_629) m_631))
    : (exists0_7‹??_38,??_39› A_628 B_629)

#[program]
inductive exists1_8‹s_633,r_634› (A_635 : Type‹s_633›) (B_636 : 
A_635 -> Type‹r_634›): L where
| ex1_11
    (m_638 : A_635) (n_639 : ((B_636) m_638))
    : (exists1_8‹??_40,??_41› A_635 B_636)

#[logical]
def prod0_23‹s_640,r_641› :
  Type‹s_640› -> Type‹r_641› -> ?_56[0;0]
:=
  fun prod0_644 : Type‹s_640› -> Type‹r_641› -> ?_53[0;0]
  | A_647 B_648 =>
    (exists0_7‹??_42,??_43›
      A_647 fun _649 : ?_54[0;0] -> ?_55[0;0]
            | _651 => B_648)

#[logical]
def prod1_24‹s_652,r_653› :
  Type‹s_652› -> Type‹r_653› -> ?_60[0;0]
:=
  fun prod1_656 : Type‹s_652› -> Type‹r_653› -> ?_57[0;0]
  | A_659 B_660 =>
    (exists1_8‹??_44,??_45›
      A_659 fun _661 : ?_58[0;0] -> ?_59[0;0]
            | _663 => B_660)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_666 : int -> int -> int
  | x_669 y_670 =>
    let loop_671 :=
      fun loop_672 : int -> int -> int
      | acc_675 y_676 =>
        match (__lte__ y_676 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_675
        | false_5 => ((loop_672) (__mul__ x_669 acc_675) (__sub__ y_676 1))
    in ((loop_671) 1 y_670)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_681 : int -> int -> int -> int
  | x_685 y_686 m_687 =>
    let loop_688 :=
      fun loop_689 : int -> int -> int
      | acc_692 y_693 =>
        match (__lte__ y_693 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_692
        | false_5 =>
          ((loop_689)
            (__mod__ (__mul__ x_685 acc_692) m_687) (__sub__ y_693 1))
    in ((loop_688) 1 y_686)

#[program]
def strlen_27‹› : string -> int :=
  fun strlen_696 : string -> int
  | s_698 => (__size__ s_698)

#[program]
def split_28‹t_699› :
  (list_6‹??_71,t_699› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_699› int) (list_6‹??_73,t_699› int))
:=
  fun split_701 :
    (list_6‹??_46,t_699› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_699› int) (list_6‹??_48,t_699› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_67[0;0] ?_68[0;0] (nil_8‹??_51,??_52› ?_65[0;0])
      (nil_8‹??_53,??_54› ?_66[0;0]))
  | (cons_9 x_703 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_72[0;0] ?_73[0;0]
      (cons_9‹??_59,??_60›
        ?_70[0;0] x_703 (nil_8‹??_57,??_58› ?_69[0;0]))
      (nil_8‹??_61,??_62› ?_71[0;0]))
  | (cons_9 x_704 (cons_9 y_705 zs_706)) =>
    match ((split_701) zs_706) in ?_79[0;0] -o ?_78[0;0] with
    | (ex1_11 xs_708 ys_709) =>
      (ex1_11‹??_69,??_70›
        ?_76[0;0] ?_77[0;0] (cons_9‹??_65,??_66› ?_74[0;0] x_704 xs_708)
        (cons_9‹??_67,??_68› ?_75[0;0] y_705 ys_709))

#[program]
def merge_29‹t_710› :
  (list_6‹??_87,t_710› int) ->
    (list_6‹??_88,t_710› int) -o (list_6‹??_89,t_710› int)
:=
  fun merge_713 :
    (list_6‹??_76,t_710› int) ->
      (list_6‹??_77,t_710› int) -o (list_6‹??_78,t_710› int)
  | nil_8 ys_716 => ys_716
  | xs_717 nil_8 => xs_717
  | (cons_9 x_718 xs_719) (cons_9 y_720 ys_721) =>
    match (__lte__ x_718 y_720) in ?_80[0;0] -o ?_81[0;0] with
    | true_4 =>
      (cons_9‹??_81,??_82›
        ?_83[0;0] x_718
        ((merge_713) xs_719 (cons_9‹??_79,??_80› ?_82[0;0] y_720 ys_721)))
    | false_5 =>
      (cons_9‹??_85,??_86›
        ?_85[0;0] y_720
        ((merge_713) (cons_9‹??_83,??_84› ?_84[0;0] x_718 xs_719) ys_721))

#[program]
def msort_30‹t_723› :
  (list_6‹??_100,t_723› int) -> (list_6‹??_101,t_723› int)
:=
  fun msort_725 :
    (list_6‹??_90,t_723› int) -> (list_6‹??_91,t_723› int)
  | nil_8 => (nil_8‹??_92,??_93› ?_86[0;0])
  | (cons_9 z_727 nil_8) =>
    (cons_9‹??_96,??_97›
      ?_88[0;0] z_727 (nil_8‹??_94,??_95› ?_87[0;0]))
  | zs_728 =>
    match ((split_28‹??_98›) zs_728) in ?_90[0;0] -o ?_89[0;0] with
    | (ex1_11 xs_730 ys_731) =>
      ((merge_29‹??_99›) ((msort_725) xs_730) ((msort_725) ys_731))

-----------------------------------------

#[program]
def id_1‹s_5392› : ∀ (A_5393 : Type‹s_5392›) -> A_5393 -> A_5393 :=
  fun id_5395 : ∀ (A_5396 : Type‹s_5392›) -> A_5396 -> A_5396
  | A_5398 m_5399 => m_5399

#[logical]
inductive eq_1‹s_5400› (A_5401 : Type‹s_5400›) (m_5402 : A_5401):
  A_5401 -> U
where
| refl_1 : (eq_1‹s_5400› A_5401 m_5402 m_5402)

#[program]
def rwl_2‹s_5404,r_5405› :
  ∀ {A_5406 : Type‹s_5404›} ->
    ∀ {m_5407 : A_5406} ->
      ∀ {n_5408 : A_5406} ->
        ∀ {B_5409 : A_5406 -> Type‹r_5405›} ->
          {(eq_1‹s_5404› A_5406 m_5407 n_5408)} ->
            ((B_5409) m_5407) -> ((B_5409) n_5408)
:=
  fun rwl_5413 :
    ∀ {A_5414 : Type‹s_5404›} ->
      ∀ {m_5415 : A_5414} ->
        ∀ {n_5416 : A_5414} ->
          ∀ {B_5417 : A_5414 -> Type‹r_5405›} ->
            {(eq_1‹s_5404› A_5414 m_5415 n_5416)} ->
              ((B_5417) m_5415) -> ((B_5417) n_5416)
  | A_5421 m_5422 n_5423 B_5424 refl_1 __5425 => __5425

#[program]
def rwr_3‹s_5426,r_5427› :
  ∀ {A_5428 : Type‹s_5426›} ->
    ∀ {m_5429 : A_5428} ->
      ∀ {n_5430 : A_5428} ->
        ∀ {B_5431 : A_5428 -> Type‹r_5427›} ->
          {(eq_1‹s_5426› A_5428 m_5429 n_5430)} ->
            ((B_5431) n_5430) -> ((B_5431) m_5429)
:=
  fun rwr_5435 :
    ∀ {A_5436 : Type‹s_5426›} ->
      ∀ {m_5437 : A_5436} ->
        ∀ {n_5438 : A_5436} ->
          ∀ {B_5439 : A_5436 -> Type‹r_5427›} ->
            {(eq_1‹s_5426› A_5436 m_5437 n_5438)} ->
              ((B_5439) n_5438) -> ((B_5439) m_5437)
  | A_5443 m_5444 n_5445 B_5446 refl_1 __5447 => __5447

#[logical]
def congr_4‹s_5448,r_5449,t_5450› :
  ∀ (A_5451 : Type‹s_5448›) ->
    ∀ (B_5452 : Type‹r_5449›) ->
      ∀ (m_5453 : A_5451) ->
        ∀ (n_5454 : A_5451) ->
          ∀ (f_5455 : forall‹t_5450›(__5456 : A_5451), B_5452) ->
            (eq_1‹s_5448› A_5451 m_5453 n_5454) ->
              (eq_1‹r_5449› B_5452 ((f_5455) m_5453) ((f_5455) n_5454))
:=
  fun congr_5458 :
    ∀ (A_5459 : Type‹s_5448›) ->
      ∀ (B_5460 : Type‹r_5449›) ->
        ∀ (m_5461 : A_5459) ->
          ∀ (n_5462 : A_5459) ->
            ∀ (f_5463 : forall‹t_5450›(__5464 : A_5459), B_5460) ->
              (eq_1‹s_5448› A_5459 m_5461 n_5462) ->
                (eq_1‹r_5449› B_5460 ((f_5463) m_5461) ((f_5463) n_5462))
  | A_5466 B_5467 m_5468 n_5469 f_5470 refl_1 =>
    (refl_1‹r_5449› B_5467 ((f_5470) n_5469))

#[logical]
def axiom_K_5‹› :
  ∀ {A_5471 : U} ->
    ∀ {m_5472 : A_5471} ->
      ∀ (x_5473 : (eq_1‹U› A_5471 m_5472 m_5472)) ->
        (eq_1‹U›
          (eq_1‹U› A_5471 m_5472 m_5472) x_5473
          (refl_1‹U› A_5471 m_5472))
:=
  fun axiom_K_5474 :
    ∀ {A_5475 : U} ->
      ∀ {m_5476 : A_5475} ->
        ∀ (x_5477 : (eq_1‹U› A_5475 m_5476 m_5476)) ->
          (eq_1‹U›
            (eq_1‹U› A_5475 m_5476 m_5476) x_5477
            (refl_1‹U› A_5475 m_5476))
  | A_5478 m_5479 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_5478 m_5479 m_5479) (refl_1‹U› A_5478 m_5479))

#[program]
inductive sing_2‹s_5480,t_5481› (A_5482 : Type‹s_5480›):
  A_5482 -> Type‹t_5481›
where
| just_2 (m_5484 : A_5482) : (sing_2‹s_5480,t_5481› A_5482 m_5484)

#[logical]
def ssing_6‹s_5485› :
  ∀ (A_5486 : Type‹s_5485›) -> A_5486 -> Type‹s_5485›
:=
  fun ssing_5488 :
    ∀ (A_5489 : Type‹s_5485›) -> A_5489 -> Type‹s_5485›
  | A_5491 m_5492 => (sing_2‹s_5485,s_5485› A_5491 m_5492)

#[program]
def sing_elim_7‹s_5493,t_5494› :
  ∀ {A_5495 : Type‹s_5493›} ->
    ∀ {x_5496 : A_5495} ->
      (sing_2‹s_5493,t_5494› A_5495 x_5496) -> A_5495
:=
  fun sing_elim_5498 :
    ∀ {A_5499 : Type‹s_5493›} ->
      ∀ {x_5500 : A_5499} ->
        (sing_2‹s_5493,t_5494› A_5499 x_5500) -> A_5499
  | A_5502 x_5503 (just_2 m_5504) => m_5504

#[logical]
def sing_uniq_8‹s_5505,t_5506› :
  ∀ (A_5507 : Type‹s_5505›) ->
    ∀ (x0_5508 : A_5507) ->
      ∀ (x_5509 : (sing_2‹s_5505,t_5506› A_5507 x0_5508)) ->
        (eq_1‹s_5505›
          A_5507 x0_5508
          ((sing_elim_7‹s_5505,t_5506›) A_5507 x0_5508 x_5509))
:=
  fun sing_uniq_5510 :
    ∀ (A_5511 : Type‹s_5505›) ->
      ∀ (x0_5512 : A_5511) ->
        ∀ (x_5513 : (sing_2‹s_5505,t_5506› A_5511 x0_5512)) ->
          (eq_1‹s_5505›
            A_5511 x0_5512
            ((sing_elim_7‹s_5505,t_5506›) A_5511 x0_5512 x_5513))
  | A_5514 x0_5515 (just_2 m_5516) => (refl_1‹s_5505› A_5514 m_5516)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_5517 : unit_3) -> (eq_1‹U› unit_3 x_5517 tt_3)
:=
  fun unit_eta_5518 :
    ∀ (x_5519 : unit_3) -> (eq_1‹U› unit_3 x_5519 tt_3)
  | x_5520 =>
    match x_5520 in
      ∀ (x0_5521 : unit_3) -o (eq_1‹U› unit_3 x0_5521 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_5523 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_5527 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __5530 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_5533 : bool_4 -> bool_4 -> bool_4
  | true_4 __5536 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_5539 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_5542 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_5545 : nat_5 -> nat_5 -> bool_4
  | zero_6 __5548 => true_4
  | (succ_7 n_5549) zero_6 => false_5
  | (succ_7 n_5550) (succ_7 n_5551) => ((lte_5545) n_5550 n_5551)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_5554 : nat_5 -> nat_5 -> bool_4
  | x_5557 y_5558 => ((lte_14) (succ_7‹› x_5557) y_5558)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_5560 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_5562) => n_5562

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_5565 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5568 => __5568
  | (succ_7 n_5569) __5570 => (succ_7‹› ((add_5565) n_5569 __5570))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_5573 : nat_5 -> nat_5 -> nat_5
  | __5576 zero_6 => __5576
  | __5577 (succ_7 n_5578) => ((sub_5573) ((pred_16) __5577) n_5578)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_5581 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5584 => zero_6
  | (succ_7 n_5585) __5586 => ((add_17) __5586 ((mul_5581) n_5585 __5586))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_5589 : nat_5 -> nat_5 -> nat_5
  | x_5592 y_5593 =>
    match ((lt_15) x_5592 y_5593) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_5595 :=
        fun loop_5596 : nat_5 -> nat_5 -> nat_5
        | x_5599 y_5600 =>
          match ((sub_18) x_5599 ((pred_16) y_5600)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_5602) => (succ_7‹› ((loop_5596) n_5602 y_5600))
      in ((loop_5595) x_5592 y_5593)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_5605 : nat_5 -> nat_5 -> nat_5
  | x_5608 y_5609 =>
    ((sub_18) x_5608 ((mul_19) ((div_20) x_5608 y_5609) y_5609))

#[program]
inductive list_6‹s_5610,t_5611› (A_5612 : Type‹s_5610›):
  Type‹t_5611›
where
| nil_8 : (list_6‹s_5610,t_5611› A_5612)
| cons_9
    (hd_5613 : A_5612) (tl_5614 : (list_6‹s_5610,t_5611› A_5612))
    : (list_6‹s_5610,t_5611› A_5612)

#[program]
def free_list_22‹s_5615,t_5616› :
  ∀ {A_5617 : Type‹s_5615›} ->
    A_5617 -> unit_3 -> (list_6‹s_5615,t_5616› A_5617) -> unit_3
:=
  fun free_list_5621 :
    ∀ {A_5622 : Type‹s_5615›} ->
      A_5622 -> unit_3 -> (list_6‹s_5615,t_5616› A_5622) -> unit_3
  | A_5626 f_5627 nil_8 => tt_3
  | A_5628 f_5629 (cons_9 hd_5630 tl_5631) =>
    let __5632 := ((f_5629) hd_5630) in
    ((free_list_5621) A_5628 f_5629 tl_5631)

#[program]
inductive exists0_7‹s_5633,r_5634› (A_5635 : Type‹s_5633›) (B_5636 : 
A_5635 -> Type‹r_5634›): L where
| ex0_10
    {m_5638 : A_5635} (n_5639 : ((B_5636) m_5638))
    : (exists0_7‹s_5633,r_5634› A_5635 B_5636)

#[program]
inductive exists1_8‹s_5640,r_5641› (A_5642 : Type‹s_5640›) (B_5643 : 
A_5642 -> Type‹r_5641›): L where
| ex1_11
    (m_5645 : A_5642) (n_5646 : ((B_5643) m_5645))
    : (exists1_8‹s_5640,r_5641› A_5642 B_5643)

#[logical]
def prod0_23‹s_5647,r_5648› : Type‹s_5647› -> Type‹r_5648› -> L
:=
  fun prod0_5651 : Type‹s_5647› -> Type‹r_5648› -> L
  | A_5654 B_5655 =>
    (exists0_7‹s_5647,r_5648›
      A_5654 fun _5656 : A_5654 -> Type‹r_5648›
             | __5658 => B_5655)

#[logical]
def prod1_24‹s_5659,r_5660› : Type‹s_5659› -> Type‹r_5660› -> L
:=
  fun prod1_5663 : Type‹s_5659› -> Type‹r_5660› -> L
  | A_5666 B_5667 =>
    (exists1_8‹s_5659,r_5660›
      A_5666 fun _5668 : A_5666 -> Type‹r_5660›
             | __5670 => B_5667)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_5673 : int -> int -> int
  | x_5676 y_5677 =>
    let loop_5678 :=
      fun loop_5679 : int -> int -> int
      | acc_5682 y_5683 =>
        match (__lte__ y_5683 0) in bool_4 -o int with
        | true_4 => acc_5682
        | false_5 =>
          ((loop_5679) (__mul__ x_5676 acc_5682) (__sub__ y_5683 1))
    in ((loop_5678) 1 y_5677)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_5688 : int -> int -> int -> int
  | x_5692 y_5693 m_5694 =>
    let loop_5695 :=
      fun loop_5696 : int -> int -> int
      | acc_5699 y_5700 =>
        match (__lte__ y_5700 0) in bool_4 -o int with
        | true_4 => acc_5699
        | false_5 =>
          ((loop_5696)
            (__mod__ (__mul__ x_5692 acc_5699) m_5694) (__sub__ y_5700 1))
    in ((loop_5695) 1 y_5693)

#[program]
def strlen_27‹› : string -> int :=
  fun strlen_5703 : string -> int
  | s_5705 => (__size__ s_5705)

#[program]
def split_28‹t_5706› :
  (list_6‹U,t_5706› int) ->
    ((prod1_24‹t_5706,t_5706›)
      (list_6‹U,t_5706› int) (list_6‹U,t_5706› int))
:=
  fun split_5708 :
    (list_6‹U,t_5706› int) ->
      ((prod1_24‹t_5706,t_5706›)
        (list_6‹U,t_5706› int) (list_6‹U,t_5706› int))
  | nil_8 =>
    (ex1_11‹t_5706,t_5706›
      (list_6‹U,t_5706› int)
      fun _5710 : (list_6‹U,t_5706› int) -> Type‹t_5706›
      | __5712 => (list_6‹U,t_5706› int) (nil_8‹U,t_5706› int)
      (nil_8‹U,t_5706› int))
  | (cons_9 hd_5713 nil_8) =>
    (ex1_11‹t_5706,t_5706›
      (list_6‹U,t_5706› int)
      fun _5714 : (list_6‹U,t_5706› int) -> Type‹t_5706›
      | __5716 => (list_6‹U,t_5706› int)
      (cons_9‹U,t_5706› int hd_5713 (nil_8‹U,t_5706› int))
      (nil_8‹U,t_5706› int))
  | (cons_9 hd_5717 (cons_9 hd_5718 tl_5719)) =>
    match ((split_5708) tl_5719) in
      ((prod1_24‹t_5706,t_5706›)
        (list_6‹U,t_5706› int) (list_6‹U,t_5706› int)) -o
        ((prod1_24‹t_5706,t_5706›)
          (list_6‹U,t_5706› int) (list_6‹U,t_5706› int))
    with
    | (ex1_11 m_5721 n_5722) =>
      (ex1_11‹t_5706,t_5706›
        (list_6‹U,t_5706› int)
        fun _5723 : (list_6‹U,t_5706› int) -> Type‹t_5706›
        | __5725 => (list_6‹U,t_5706› int)
        (cons_9‹U,t_5706› int hd_5717 m_5721)
        (cons_9‹U,t_5706› int hd_5718 n_5722))

#[program]
def merge_29‹t_5726› :
  (list_6‹U,t_5726› int) ->
    (list_6‹U,t_5726› int) -o (list_6‹U,t_5726› int)
:=
  fun merge_5729 :
    (list_6‹U,t_5726› int) ->
      (list_6‹U,t_5726› int) -o (list_6‹U,t_5726› int)
  | nil_8 __5732 => __5732
  | (cons_9 hd_5733 tl_5734) nil_8 =>
    (cons_9‹U,t_5726› int hd_5733 tl_5734)
  | (cons_9 hd_5735 tl_5736) (cons_9 hd_5737 tl_5738) =>
    match (__lte__ hd_5735 hd_5737) in bool_4 -o (list_6‹U,t_5726› int)
    with
    | true_4 =>
      (cons_9‹U,t_5726›
        int hd_5735
        ((merge_5729) tl_5736 (cons_9‹U,t_5726› int hd_5737 tl_5738)))
    | false_5 =>
      (cons_9‹U,t_5726›
        int hd_5737
        ((merge_5729) (cons_9‹U,t_5726› int hd_5735 tl_5736) tl_5738))

#[program]
def msort_30‹t_5740› :
  (list_6‹U,t_5740› int) -> (list_6‹U,t_5740› int)
:=
  fun msort_5742 : (list_6‹U,t_5740› int) -> (list_6‹U,t_5740› int)
  | nil_8 => (nil_8‹U,t_5740› int)
  | (cons_9 hd_5744 nil_8) =>
    (cons_9‹U,t_5740› int hd_5744 (nil_8‹U,t_5740› int))
  | (cons_9 hd_5745 (cons_9 hd_5746 tl_5747)) =>
    match ((split_28‹t_5740›)
            (cons_9‹U,t_5740›
              int hd_5745 (cons_9‹U,t_5740› int hd_5746 tl_5747))) in
      ((prod1_24‹t_5740,t_5740›)
        (list_6‹U,t_5740› int) (list_6‹U,t_5740› int)) -o
        (list_6‹U,t_5740› int)
    with
    | (ex1_11 m_5749 n_5750) =>
      ((merge_29‹t_5740›) ((msort_5742) m_5749) ((msort_5742) n_5750))

-----------------------------------------

#[program]
def idU_32 := fun id_9508 (A_9509) -> (m_9510) ->
                m_9510

#[program]
def idL_31 := fun id_9511 (A_9512) -> (m_9513) ->
                m_9513

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_36 :=
  fun rwl_9514 {A_9515} -> {m_9516} -> {n_9517} -> {B_9518} -> {__9519} ->
  (__9520) ->
    match {NULL} with
    | reflU_13  => __9520
    end

#[program]
def rwlUL_35 :=
  fun rwl_9521 {A_9522} -> {m_9523} -> {n_9524} -> {B_9525} -> {__9526} ->
  (__9527) ->
    match {NULL} with
    | reflU_13  => __9527
    end

#[program]
def rwlLU_34 :=
  fun rwl_9528 {A_9529} -> {m_9530} -> {n_9531} -> {B_9532} -> {__9533} ->
  (__9534) ->
    match {NULL} with
    | reflL_12  => __9534
    end

#[program]
def rwlLL_33 :=
  fun rwl_9535 {A_9536} -> {m_9537} -> {n_9538} -> {B_9539} -> {__9540} ->
  (__9541) ->
    match {NULL} with
    | reflL_12  => __9541
    end

#[program]
def rwrUU_40 :=
  fun rwr_9542 {A_9543} -> {m_9544} -> {n_9545} -> {B_9546} -> {__9547} ->
  (__9548) ->
    match {NULL} with
    | reflU_13  => __9548
    end

#[program]
def rwrUL_39 :=
  fun rwr_9549 {A_9550} -> {m_9551} -> {n_9552} -> {B_9553} -> {__9554} ->
  (__9555) ->
    match {NULL} with
    | reflU_13  => __9555
    end

#[program]
def rwrLU_38 :=
  fun rwr_9556 {A_9557} -> {m_9558} -> {n_9559} -> {B_9560} -> {__9561} ->
  (__9562) ->
    match {NULL} with
    | reflL_12  => __9562
    end

#[program]
def rwrLL_37 :=
  fun rwr_9563 {A_9564} -> {m_9565} -> {n_9566} -> {B_9567} -> {__9568} ->
  (__9569) ->
    match {NULL} with
    | reflL_12  => __9569
    end

#[logical]
def congrUUU_48 := NULL

#[logical]
def congrUUL_47 := NULL

#[logical]
def congrULU_46 := NULL

#[logical]
def congrULL_45 := NULL

#[logical]
def congrLUU_44 := NULL

#[logical]
def congrLUL_43 := NULL

#[logical]
def congrLLU_42 := NULL

#[logical]
def congrLLL_41 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_50 := NULL

#[logical]
def ssingL_49 := NULL

#[program]
def sing_elimUU_54 :=
  fun sing_elim_9570 {A_9571} -> {x_9572} -> (__9573) ->
    match __9573 with
    | justUU_17 m_9574 => m_9574
    end

#[program]
def sing_elimUL_53 :=
  fun sing_elim_9575 {A_9576} -> {x_9577} -> (__9578) ->
    match __9578 with
    | justUL_16 m_9579 => m_9579
    end

#[program]
def sing_elimLU_52 :=
  fun sing_elim_9580 {A_9581} -> {x_9582} -> (__9583) ->
    match __9583 with
    
    end

#[program]
def sing_elimLL_51 :=
  fun sing_elim_9584 {A_9585} -> {x_9586} -> (__9587) ->
    match __9587 with
    | justLL_14 m_9588 => m_9588
    end

#[logical]
def sing_uniqUU_58 := NULL

#[logical]
def sing_uniqUL_57 := NULL

#[logical]
def sing_uniqLU_56 := NULL

#[logical]
def sing_uniqLL_55 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_9589 (__9590) ->
    match __9590 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_9591 (__9592) -> (__9593) ->
    match __9592 with
    | true_4  =>
      match __9593 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_9594 (__9595) -> (__9596) ->
    match __9595 with
    | true_4  => true_4
    | false_5  =>
      match __9596 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_9597 (__9598) -> (__9599) -o
    match __9598 with
    | true_4  =>
      match __9599 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __9599 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_9600 (__9601) -> (__9602) ->
    match __9601 with
    | zero_6  => true_4
    | succ_7 n_9603 =>
      match __9602 with
      | zero_6  => false_5 | succ_7 n_9604 => ((lte_9600) n_9603 n_9604)
      end
    end

#[program]
def lt_15 :=
  fun lt_9605 (x_9606) -> (y_9607) ->
    ((lte_14) (succ_7 x_9606) y_9607)

#[program]
def pred_16 :=
  fun pred_9608 (__9609) ->
    match __9609 with
    | zero_6  => zero_6 | succ_7 n_9610 => n_9610
    end

#[program]
def add_17 :=
  fun add_9611 (__9612) -> (__9613) ->
    match __9612 with
    | zero_6  => __9613
    | succ_7 n_9614 => (succ_7 ((add_9611) n_9614 __9613))
    end

#[program]
def sub_18 :=
  fun sub_9615 (__9616) -> (__9617) ->
    match __9617 with
    | zero_6  => __9616
    | succ_7 n_9618 => ((sub_9615) ((pred_16) __9616) n_9618)
    end

#[program]
def mul_19 :=
  fun mul_9619 (__9620) -> (__9621) ->
    match __9620 with
    | zero_6  => zero_6
    | succ_7 n_9622 => ((add_17) __9621 ((mul_9619) n_9622 __9621))
    end

#[program]
def div_20 :=
  fun div_9623 (x_9624) -> (y_9625) ->
    match ((lt_15) x_9624 y_9625) with
    | true_4  => zero_6
    | false_5  =>
      let loop_9626 :=
        fun loop_9627 (x_9628) -> (y_9629) ->
          match ((sub_18) x_9628 ((pred_16) y_9629)) with
          | zero_6  => zero_6
          | succ_7 n_9630 => (succ_7 ((loop_9627) n_9630 y_9629))
          end
      in ((loop_9626) x_9624 y_9625)
    end

#[program]
def rem_21 :=
  fun rem_9631 (x_9632) -> (y_9633) ->
    ((sub_18) x_9632 ((mul_19) ((div_20) x_9632 y_9633) y_9633))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_62 :=
  fun free_list_9634 {A_9635} -> (f_9636) -> (__9637) ->
    match __9637 with
    | nilUU_24  => tt_3
    | consUU_25 hd_9638 tl_9639 =>
      let __9640 := ((f_9636) hd_9638) in
      ((free_list_9634) NULL f_9636 tl_9639)
    end

#[program]
def free_listUL_61 :=
  fun free_list_9641 {A_9642} -> (f_9643) -> (__9644) ->
    match __9644 with
    | nilUL_22  => tt_3
    | consUL_23 hd_9645 tl_9646 =>
      let __9647 := ((f_9643) hd_9645) in
      ((free_list_9641) NULL f_9643 tl_9646)
    end

#[program]
def free_listLL_59 :=
  fun free_list_9648 {A_9649} -> (f_9650) -> (__9651) ->
    match __9651 with
    | nilLL_18  => tt_3
    | consLL_19 hd_9652 tl_9653 =>
      let __9654 := ((f_9650) hd_9652) in
      ((free_list_9648) NULL f_9650 tl_9653)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_66 := NULL

#[logical]
def prod0UL_65 := NULL

#[logical]
def prod0LU_64 := NULL

#[logical]
def prod0LL_63 := NULL

#[logical]
def prod1UU_70 := NULL

#[logical]
def prod1UL_69 := NULL

#[logical]
def prod1LU_68 := NULL

#[logical]
def prod1LL_67 := NULL

#[program]
def pow_25 :=
  fun pow_9655 (x_9656) -> (y_9657) ->
    let loop_9658 :=
      fun loop_9659 (acc_9660) -> (y_9661) ->
        match (__lte__ y_9661 0) with
        | true_4  => acc_9660
        | false_5  =>
          ((loop_9659) (__mul__ x_9656 acc_9660) (__sub__ y_9661 1))
        end
    in ((loop_9658) 1 y_9657)

#[program]
def powm_26 :=
  fun powm_9662 (x_9663) -> (y_9664) -> (m_9665) ->
    let loop_9666 :=
      fun loop_9667 (acc_9668) -> (y_9669) ->
        match (__lte__ y_9669 0) with
        | true_4  => acc_9668
        | false_5  =>
          ((loop_9667)
            (__mod__ (__mul__ x_9663 acc_9668) m_9665) (__sub__ y_9669 1))
        end
    in ((loop_9666) 1 y_9664)

#[program]
def strlen_27 := fun strlen_9670 (s_9671) ->
                   (__size__ s_9671)

#[program]
def splitU_72 :=
  fun split_9672 (__9673) ->
    match __9673 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_9674 tl_9675 =>
      match tl_9675 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9674 nilUU_24) nilUU_24)
      | consUU_25 hd_9676 tl_9677 =>
        match ((split_9672) tl_9677) with
        | ex1UU_33 m_9678 n_9679 =>
          (ex1UU_33 (consUU_25 hd_9674 m_9678) (consUU_25 hd_9676 n_9679))
        end
      end
    end

#[program]
def splitL_71 :=
  fun split_9680 (__9681) ->
    match __9681 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_9682 tl_9683 =>
      match tl_9683 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9682 nilUL_22) nilUL_22)
      | consUL_23 hd_9684 tl_9685 =>
        match ((split_9680) tl_9685) with
        | ex1LL_30 m_9686 n_9687 =>
          (ex1LL_30 (consUL_23 hd_9682 m_9686) (consUL_23 hd_9684 n_9687))
        end
      end
    end

#[program]
def mergeU_74 :=
  fun merge_9688 (__9689) -> (__9690) -o
    match __9689 with
    | nilUU_24  => __9690
    | consUU_25 hd_9691 tl_9692 =>
      match __9690 with
      | nilUU_24  => (consUU_25 hd_9691 tl_9692)
      | consUU_25 hd_9693 tl_9694 =>
        match (__lte__ hd_9691 hd_9693) with
        | true_4  =>
          (consUU_25
            hd_9691 ((merge_9688) tl_9692 (consUU_25 hd_9693 tl_9694)))
        | false_5  =>
          (consUU_25
            hd_9693 ((merge_9688) (consUU_25 hd_9691 tl_9692) tl_9694))
        end
      end
    end

#[program]
def mergeL_73 :=
  fun merge_9695 (__9696) -> (__9697) -o
    match __9696 with
    | nilUL_22  => __9697
    | consUL_23 hd_9698 tl_9699 =>
      match __9697 with
      | nilUL_22  => (consUL_23 hd_9698 tl_9699)
      | consUL_23 hd_9700 tl_9701 =>
        match (__lte__ hd_9698 hd_9700) with
        | true_4  =>
          (consUL_23
            hd_9698 ((merge_9695) tl_9699 (consUL_23 hd_9700 tl_9701)))
        | false_5  =>
          (consUL_23
            hd_9700 ((merge_9695) (consUL_23 hd_9698 tl_9699) tl_9701))
        end
      end
    end

#[program]
def msortU_76 :=
  fun msort_9702 (__9703) ->
    match __9703 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_9704 tl_9705 =>
      match tl_9705 with
      | nilUU_24  => (consUU_25 hd_9704 nilUU_24)
      | consUU_25 hd_9706 tl_9707 =>
        match ((splitU_72) (consUU_25 hd_9704 (consUU_25 hd_9706 tl_9707))) with
        | ex1UU_33 m_9708 n_9709 =>
          ((mergeU_74) ((msort_9702) m_9708) ((msort_9702) n_9709))
        end
      end
    end

#[program]
def msortL_75 :=
  fun msort_9710 (__9711) ->
    match __9711 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_9712 tl_9713 =>
      match tl_9713 with
      | nilUL_22  => (consUL_23 hd_9712 nilUL_22)
      | consUL_23 hd_9714 tl_9715 =>
        match ((splitL_71) (consUL_23 hd_9712 (consUL_23 hd_9714 tl_9715))) with
        | ex1LL_30 m_9716 n_9717 =>
          ((mergeL_73) ((msort_9710) m_9716) ((msort_9710) n_9717))
        end
      end
    end

-----------------------------------------

#[program]
def idU_32 := fun id_9928 (A_9929) -> (m_9930) ->
                m_9930

#[program]
def idL_31 := fun id_9931 (A_9932) -> (m_9933) ->
                m_9933

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_36 :=
  fun rwl_9934 {A_9935} -> {m_9936} -> {n_9937} -> {B_9938} -> {__9939} ->
  (__9940) ->
    __9940

#[program]
def rwlUL_35 :=
  fun rwl_9941 {A_9942} -> {m_9943} -> {n_9944} -> {B_9945} -> {__9946} ->
  (__9947) ->
    __9947

#[program]
def rwlLU_34 :=
  fun rwl_9948 {A_9949} -> {m_9950} -> {n_9951} -> {B_9952} -> {__9953} ->
  (__9954) ->
    __9954

#[program]
def rwlLL_33 :=
  fun rwl_9955 {A_9956} -> {m_9957} -> {n_9958} -> {B_9959} -> {__9960} ->
  (__9961) ->
    __9961

#[program]
def rwrUU_40 :=
  fun rwr_9962 {A_9963} -> {m_9964} -> {n_9965} -> {B_9966} -> {__9967} ->
  (__9968) ->
    __9968

#[program]
def rwrUL_39 :=
  fun rwr_9969 {A_9970} -> {m_9971} -> {n_9972} -> {B_9973} -> {__9974} ->
  (__9975) ->
    __9975

#[program]
def rwrLU_38 :=
  fun rwr_9976 {A_9977} -> {m_9978} -> {n_9979} -> {B_9980} -> {__9981} ->
  (__9982) ->
    __9982

#[program]
def rwrLL_37 :=
  fun rwr_9983 {A_9984} -> {m_9985} -> {n_9986} -> {B_9987} -> {__9988} ->
  (__9989) ->
    __9989

#[logical]
def congrUUU_48 := NULL

#[logical]
def congrUUL_47 := NULL

#[logical]
def congrULU_46 := NULL

#[logical]
def congrULL_45 := NULL

#[logical]
def congrLUU_44 := NULL

#[logical]
def congrLUL_43 := NULL

#[logical]
def congrLLU_42 := NULL

#[logical]
def congrLLL_41 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_50 := NULL

#[logical]
def ssingL_49 := NULL

#[program]
def sing_elimUU_54 :=
  fun sing_elim_9990 {A_9991} -> {x_9992} -> (__9993) ->
    match __9993 with
    | justUU_17 m_9994 => m_9994
    end

#[program]
def sing_elimUL_53 :=
  fun sing_elim_9995 {A_9996} -> {x_9997} -> (__9998) ->
    match __9998 with
    | justUL_16 m_9999 => m_9999
    end

#[program]
def sing_elimLU_52 :=
  fun sing_elim_10000 {A_10001} -> {x_10002} -> (__10003) ->
    !!

#[program]
def sing_elimLL_51 :=
  fun sing_elim_10004 {A_10005} -> {x_10006} -> (__10007) ->
    match __10007 with
    | justLL_14 m_10008 => m_10008
    end

#[logical]
def sing_uniqUU_58 := NULL

#[logical]
def sing_uniqUL_57 := NULL

#[logical]
def sing_uniqLU_56 := NULL

#[logical]
def sing_uniqLL_55 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_10009 (__10010) ->
    match __10010 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_10011 (__10012) -> (__10013) ->
    match __10012 with
    | true_4  =>
      match __10013 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_10014 (__10015) -> (__10016) ->
    match __10015 with
    | true_4  => true_4
    | false_5  =>
      match __10016 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_10017 (__10018) -> (__10019) -o
    match __10018 with
    | true_4  =>
      match __10019 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __10019 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_10020 (__10021) -> (__10022) ->
    match __10021 with
    | zero_6  => true_4
    | succ_7 n_10023 =>
      match __10022 with
      | zero_6  => false_5 | succ_7 n_10024 => ((lte_10020) n_10023 n_10024)
      end
    end

#[program]
def lt_15 :=
  fun lt_10025 (x_10026) -> (y_10027) ->
    ((lte_14) (succ_7 x_10026) y_10027)

#[program]
def pred_16 :=
  fun pred_10028 (__10029) ->
    match __10029 with
    | zero_6  => zero_6 | succ_7 n_10030 => n_10030
    end

#[program]
def add_17 :=
  fun add_10031 (__10032) -> (__10033) ->
    match __10032 with
    | zero_6  => __10033
    | succ_7 n_10034 => (succ_7 ((add_10031) n_10034 __10033))
    end

#[program]
def sub_18 :=
  fun sub_10035 (__10036) -> (__10037) ->
    match __10037 with
    | zero_6  => __10036
    | succ_7 n_10038 => ((sub_10035) ((pred_16) __10036) n_10038)
    end

#[program]
def mul_19 :=
  fun mul_10039 (__10040) -> (__10041) ->
    match __10040 with
    | zero_6  => zero_6
    | succ_7 n_10042 => ((add_17) __10041 ((mul_10039) n_10042 __10041))
    end

#[program]
def div_20 :=
  fun div_10043 (x_10044) -> (y_10045) ->
    match ((lt_15) x_10044 y_10045) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10046 :=
        fun loop_10047 (x_10048) -> (y_10049) ->
          match ((sub_18) x_10048 ((pred_16) y_10049)) with
          | zero_6  => zero_6
          | succ_7 n_10050 => (succ_7 ((loop_10047) n_10050 y_10049))
          end
      in ((loop_10046) x_10044 y_10045)
    end

#[program]
def rem_21 :=
  fun rem_10051 (x_10052) -> (y_10053) ->
    ((sub_18) x_10052 ((mul_19) ((div_20) x_10052 y_10053) y_10053))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_62 :=
  fun free_list_10054 {A_10055} -> (f_10056) -> (__10057) ->
    match __10057 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10058 tl_10059 =>
      let __10060 := ((f_10056) hd_10058) in
      ((free_list_10054) NULL f_10056 tl_10059)
    end

#[program]
def free_listUL_61 :=
  fun free_list_10061 {A_10062} -> (f_10063) -> (__10064) ->
    match __10064 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10065 tl_10066 =>
      let __10067 := ((f_10063) hd_10065) in
      ((free_list_10061) NULL f_10063 tl_10066)
    end

#[program]
def free_listLL_59 :=
  fun free_list_10068 {A_10069} -> (f_10070) -> (__10071) ->
    match __10071 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10072 tl_10073 =>
      let __10074 := ((f_10070) hd_10072) in
      ((free_list_10068) NULL f_10070 tl_10073)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_66 := NULL

#[logical]
def prod0UL_65 := NULL

#[logical]
def prod0LU_64 := NULL

#[logical]
def prod0LL_63 := NULL

#[logical]
def prod1UU_70 := NULL

#[logical]
def prod1UL_69 := NULL

#[logical]
def prod1LU_68 := NULL

#[logical]
def prod1LL_67 := NULL

#[program]
def pow_25 :=
  fun pow_10075 (x_10076) -> (y_10077) ->
    let loop_10078 :=
      fun loop_10079 (acc_10080) -> (y_10081) ->
        match (__lte__ y_10081 0) with
        | true_4  => acc_10080
        | false_5  =>
          ((loop_10079) (__mul__ x_10076 acc_10080) (__sub__ y_10081 1))
        end
    in ((loop_10078) 1 y_10077)

#[program]
def powm_26 :=
  fun powm_10082 (x_10083) -> (y_10084) -> (m_10085) ->
    let loop_10086 :=
      fun loop_10087 (acc_10088) -> (y_10089) ->
        match (__lte__ y_10089 0) with
        | true_4  => acc_10088
        | false_5  =>
          ((loop_10087)
            (__mod__ (__mul__ x_10083 acc_10088) m_10085) (__sub__ y_10089 1))
        end
    in ((loop_10086) 1 y_10084)

#[program]
def strlen_27 := fun strlen_10090 (s_10091) ->
                   (__size__ s_10091)

#[program]
def splitU_72 :=
  fun split_10092 (__10093) ->
    match __10093 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_10094 tl_10095 =>
      match tl_10095 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10094 nilUU_24) nilUU_24)
      | consUU_25 hd_10096 tl_10097 =>
        match ((split_10092) tl_10097) with
        | ex1UU_33 m_10098 n_10099 =>
          (ex1UU_33
            (consUU_25 hd_10094 m_10098) (consUU_25 hd_10096 n_10099))
        end
      end
    end

#[program]
def splitL_71 :=
  fun split_10100 (__10101) ->
    match __10101 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_10102 tl_10103 =>
      match tl_10103 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10102 nilUL_22) nilUL_22)
      | consUL_23 hd_10104 tl_10105 =>
        match ((split_10100) tl_10105) with
        | ex1LL_30 m_10106 n_10107 =>
          (ex1LL_30
            (consUL_23 hd_10102 m_10106) (consUL_23 hd_10104 n_10107))
        end
      end
    end

#[program]
def mergeU_74 :=
  fun merge_10108 (__10109) -> (__10110) -o
    match __10109 with
    | nilUU_24  => __10110
    | consUU_25 hd_10111 tl_10112 =>
      match __10110 with
      | nilUU_24  => (consUU_25 hd_10111 tl_10112)
      | consUU_25 hd_10113 tl_10114 =>
        match (__lte__ hd_10111 hd_10113) with
        | true_4  =>
          (consUU_25
            hd_10111 ((merge_10108) tl_10112 (consUU_25 hd_10113 tl_10114)))
        | false_5  =>
          (consUU_25
            hd_10113 ((merge_10108) (consUU_25 hd_10111 tl_10112) tl_10114))
        end
      end
    end

#[program]
def mergeL_73 :=
  fun merge_10115 (__10116) -> (__10117) -o
    match __10116 with
    | nilUL_22  => __10117
    | consUL_23 hd_10118 tl_10119 =>
      match __10117 with
      | nilUL_22  => (consUL_23 hd_10118 tl_10119)
      | consUL_23 hd_10120 tl_10121 =>
        match (__lte__ hd_10118 hd_10120) with
        | true_4  =>
          (consUL_23
            hd_10118 ((merge_10115) tl_10119 (consUL_23 hd_10120 tl_10121)))
        | false_5  =>
          (consUL_23
            hd_10120 ((merge_10115) (consUL_23 hd_10118 tl_10119) tl_10121))
        end
      end
    end

#[program]
def msortU_76 :=
  fun msort_10122 (__10123) ->
    match __10123 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_10124 tl_10125 =>
      match tl_10125 with
      | nilUU_24  => (consUU_25 hd_10124 nilUU_24)
      | consUU_25 hd_10126 tl_10127 =>
        match ((splitU_72)
                (consUU_25 hd_10124 (consUU_25 hd_10126 tl_10127))) with
        | ex1UU_33 m_10128 n_10129 =>
          ((mergeU_74) ((msort_10122) m_10128) ((msort_10122) n_10129))
        end
      end
    end

#[program]
def msortL_75 :=
  fun msort_10130 (__10131) ->
    match __10131 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_10132 tl_10133 =>
      match tl_10133 with
      | nilUL_22  => (consUL_23 hd_10132 nilUL_22)
      | consUL_23 hd_10134 tl_10135 =>
        match ((splitL_71)
                (consUL_23 hd_10132 (consUL_23 hd_10134 tl_10135))) with
        | ex1LL_30 m_10136 n_10137 =>
          ((mergeL_73) ((msort_10130) m_10136) ((msort_10130) n_10137))
        end
      end
    end

-----------------------------------------

def idU_32 := fun id_10348 (A_10349) -> (m_10350) -> m_10350

def idL_31 := fun id_10351 (A_10352) -> (m_10353) -> m_10353

def rwlUU_36 :=
  fun rwl_10354 (A_10355) -> (m_10356) -> (n_10357) -> (B_10358) ->
  (__10359) -> (__10360) -> __10360

def rwlUL_35 :=
  fun rwl_10361 (A_10362) -> (m_10363) -> (n_10364) -> (B_10365) ->
  (__10366) -> (__10367) -> __10367

def rwlLU_34 :=
  fun rwl_10368 (A_10369) -> (m_10370) -> (n_10371) -> (B_10372) ->
  (__10373) -> (__10374) -> __10374

def rwlLL_33 :=
  fun rwl_10375 (A_10376) -> (m_10377) -> (n_10378) -> (B_10379) ->
  (__10380) -> (__10381) -> __10381

def rwrUU_40 :=
  fun rwr_10382 (A_10383) -> (m_10384) -> (n_10385) -> (B_10386) ->
  (__10387) -> (__10388) -> __10388

def rwrUL_39 :=
  fun rwr_10389 (A_10390) -> (m_10391) -> (n_10392) -> (B_10393) ->
  (__10394) -> (__10395) -> __10395

def rwrLU_38 :=
  fun rwr_10396 (A_10397) -> (m_10398) -> (n_10399) -> (B_10400) ->
  (__10401) -> (__10402) -> __10402

def rwrLL_37 :=
  fun rwr_10403 (A_10404) -> (m_10405) -> (n_10406) -> (B_10407) ->
  (__10408) -> (__10409) -> __10409

def sing_elimUU_54 :=
  fun sing_elim_10410 (A_10411) -> (x_10412) -> (__10413) -> __10413

def sing_elimUL_53 :=
  fun sing_elim_10414 (A_10415) -> (x_10416) -> (__10417) -> __10417

def sing_elimLU_52 :=
  fun sing_elim_10418 (A_10419) -> (x_10420) -> (__10421) -> !!

def sing_elimLL_51 :=
  fun sing_elim_10422 (A_10423) -> (x_10424) -> (__10425) -> __10425

def not_10 :=
  fun not_10426 (__10427) ->
    match __10427 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_10428 (__10429) -> (__10430) ->
    match __10429 with
    | true_4 =>
      match __10430 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_10431 (__10432) -> (__10433) ->
    match __10432 with
    | true_4 => true_4
    | false_5 =>
      match __10433 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_10434 (__10435) -> (__10436) -o
    match __10435 with
    | true_4 =>
      match __10436 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __10436 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_10437 (__10438) -> (__10439) ->
    match __10438 with
    | zero_6  => true_4
    | succ_7 n_10440 =>
      match __10439 with
      | zero_6  => false_5 | succ_7 n_10441 => ((lte_10437) n_10440 n_10441)
      end
    end

def lt_15 :=
  fun lt_10442 (x_10443) -> (y_10444) -> ((lte_14) (succ_7 x_10443) y_10444)

def pred_16 :=
  fun pred_10445 (__10446) ->
    match __10446 with
    | zero_6  => (zero_6 ) | succ_7 n_10447 => n_10447
    end

def add_17 :=
  fun add_10448 (__10449) -> (__10450) ->
    match __10449 with
    | zero_6  => __10450
    | succ_7 n_10451 => (succ_7 ((add_10448) n_10451 __10450))
    end

def sub_18 :=
  fun sub_10452 (__10453) -> (__10454) ->
    match __10454 with
    | zero_6  => __10453
    | succ_7 n_10455 => ((sub_10452) ((pred_16) __10453) n_10455)
    end

def mul_19 :=
  fun mul_10456 (__10457) -> (__10458) ->
    match __10457 with
    | zero_6  => (zero_6 )
    | succ_7 n_10459 => ((add_17) __10458 ((mul_10456) n_10459 __10458))
    end

def div_20 :=
  fun div_10460 (x_10461) -> (y_10462) ->
    match ((lt_15) x_10461 y_10462) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_10463 :=
        fun loop_10464 (x_10465) -> (y_10466) ->
          match ((sub_18) x_10465 ((pred_16) y_10466)) with
          | zero_6  => (zero_6 )
          | succ_7 n_10467 => (succ_7 ((loop_10464) n_10467 y_10466))
          end
      in ((loop_10463) x_10461 y_10462)
    end

def rem_21 :=
  fun rem_10468 (x_10469) -> (y_10470) ->
    ((sub_18) x_10469 ((mul_19) ((div_20) x_10469 y_10470) y_10470))

def free_listUU_62 :=
  fun free_list_10471 (A_10472) -> (f_10473) -> (__10474) ->
    match __10474 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10475 tl_10476 =>
      let __10477 := ((f_10473) hd_10475) in
      ((free_list_10471) NULL f_10473 tl_10476)
    end

def free_listUL_61 :=
  fun free_list_10478 (A_10479) -> (f_10480) -> (__10481) ->
    match __10481 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10482 tl_10483 =>
      let __10484 := ((f_10480) hd_10482) in
      ((free_list_10478) NULL f_10480 tl_10483)
    end

def free_listLL_59 :=
  fun free_list_10485 (A_10486) -> (f_10487) -> (__10488) ->
    match __10488 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10489 tl_10490 =>
      let __10491 := ((f_10487) hd_10489) in
      ((free_list_10485) NULL f_10487 tl_10490)
    end

def pow_25 :=
  fun pow_10492 (x_10493) -> (y_10494) ->
    let loop_10495 :=
      fun loop_10496 (acc_10497) -> (y_10498) ->
        match (__lte__ y_10498 0) with
        | true_4 => acc_10497
        | false_5 =>
          ((loop_10496) (__mul__ x_10493 acc_10497) (__sub__ y_10498 1))
        end
    in ((loop_10495) 1 y_10494)

def powm_26 :=
  fun powm_10499 (x_10500) -> (y_10501) -> (m_10502) ->
    let loop_10503 :=
      fun loop_10504 (acc_10505) -> (y_10506) ->
        match (__lte__ y_10506 0) with
        | true_4 => acc_10505
        | false_5 =>
          ((loop_10504)
            (__mod__ (__mul__ x_10500 acc_10505) m_10502) (__sub__ y_10506 1))
        end
    in ((loop_10503) 1 y_10501)

def strlen_27 := fun strlen_10507 (s_10508) -> (__size__ s_10508)

def splitU_72 :=
  fun split_10509 (__10510) ->
    match __10510 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_10511 tl_10512 =>
      match tl_10512 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10511 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_10513 tl_10514 =>
        match ((split_10509) tl_10514) with
        | ex1UU_33 m_10515 n_10516 =>
          (ex1UU_33
            (consUU_25 hd_10511 m_10515) (consUU_25 hd_10513 n_10516))
        end
      end
    end

def splitL_71 :=
  fun split_10517 (__10518) ->
    match __10518 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_10519 tl_10520 =>
      match tl_10520 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10519 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_10521 tl_10522 =>
        match ((split_10517) tl_10522) with
        | ex1LL_30 m_10523 n_10524 =>
          (ex1LL_30
            (consUL_23 hd_10519 m_10523) (consUL_23 hd_10521 n_10524))
        end
      end
    end

def mergeU_74 :=
  fun merge_10525 (__10526) -> (__10527) -o
    match __10526 with
    | nilUU_24  => __10527
    | consUU_25 hd_10528 tl_10529 =>
      match __10527 with
      | nilUU_24  => (consUU_25 hd_10528 tl_10529)
      | consUU_25 hd_10530 tl_10531 =>
        match (__lte__ hd_10528 hd_10530) with
        | true_4 =>
          (consUU_25
            hd_10528 ((merge_10525) tl_10529 (consUU_25 hd_10530 tl_10531)))
        | false_5 =>
          (consUU_25
            hd_10530 ((merge_10525) (consUU_25 hd_10528 tl_10529) tl_10531))
        end
      end
    end

def mergeL_73 :=
  fun merge_10532 (__10533) -> (__10534) -o
    match __10533 with
    | nilUL_22  => __10534
    | consUL_23 hd_10535 tl_10536 =>
      match __10534 with
      | nilUL_22  => (consUL_23 hd_10535 tl_10536)
      | consUL_23 hd_10537 tl_10538 =>
        match (__lte__ hd_10535 hd_10537) with
        | true_4 =>
          (consUL_23
            hd_10535 ((merge_10532) tl_10536 (consUL_23 hd_10537 tl_10538)))
        | false_5 =>
          (consUL_23
            hd_10537 ((merge_10532) (consUL_23 hd_10535 tl_10536) tl_10538))
        end
      end
    end

def msortU_76 :=
  fun msort_10539 (__10540) ->
    match __10540 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_10541 tl_10542 =>
      match tl_10542 with
      | nilUU_24  => (consUU_25 hd_10541 (nilUU_24 ))
      | consUU_25 hd_10543 tl_10544 =>
        match ((splitU_72)
                (consUU_25 hd_10541 (consUU_25 hd_10543 tl_10544))) with
        | ex1UU_33 m_10545 n_10546 =>
          ((mergeU_74) ((msort_10539) m_10545) ((msort_10539) n_10546))
        end
      end
    end

def msortL_75 :=
  fun msort_10547 (__10548) ->
    match __10548 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_10549 tl_10550 =>
      match tl_10550 with
      | nilUL_22  => (consUL_23 hd_10549 (nilUL_22 ))
      | consUL_23 hd_10551 tl_10552 =>
        match ((splitL_71)
                (consUL_23 hd_10549 (consUL_23 hd_10551 tl_10552))) with
        | ex1LL_30 m_10553 n_10554 =>
          ((mergeL_73) ((msort_10547) m_10553) ((msort_10547) n_10554))
        end
      end
    end

-----------------------------------------

def idU_32 := lam (A_10762) -> (m_10763) -> m_10763

def idL_31 := lam (A_10764) -> (m_10765) -> m_10765

def rwlUU_36 :=
  lam (A_10766) -> (m_10767) -> (n_10768) -> (B_10769) -> (__10770) ->
  (__10771) -> __10771

def rwlUL_35 :=
  lam (A_10772) -> (m_10773) -> (n_10774) -> (B_10775) -> (__10776) ->
  (__10777) -> __10777

def rwlLU_34 :=
  lam (A_10778) -> (m_10779) -> (n_10780) -> (B_10781) -> (__10782) ->
  (__10783) -> __10783

def rwlLL_33 :=
  lam (A_10784) -> (m_10785) -> (n_10786) -> (B_10787) -> (__10788) ->
  (__10789) -> __10789

def rwrUU_40 :=
  lam (A_10790) -> (m_10791) -> (n_10792) -> (B_10793) -> (__10794) ->
  (__10795) -> __10795

def rwrUL_39 :=
  lam (A_10796) -> (m_10797) -> (n_10798) -> (B_10799) -> (__10800) ->
  (__10801) -> __10801

def rwrLU_38 :=
  lam (A_10802) -> (m_10803) -> (n_10804) -> (B_10805) -> (__10806) ->
  (__10807) -> __10807

def rwrLL_37 :=
  lam (A_10808) -> (m_10809) -> (n_10810) -> (B_10811) -> (__10812) ->
  (__10813) -> __10813

def sing_elimUU_54 := lam (A_10814) -> (x_10815) -> (__10816) -> __10816

def sing_elimUL_53 := lam (A_10817) -> (x_10818) -> (__10819) -> __10819

def sing_elimLU_52 := lam (A_10820) -> (x_10821) -> (__10822) -> !!

def sing_elimLL_51 := lam (A_10823) -> (x_10824) -> (__10825) -> __10825

def not_10 :=
  lam (__10826) ->
    match __10826 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__10827) -> (__10828) ->
    match __10827 with
    | true_4 =>
      match __10828 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__10829) -> (__10830) ->
    match __10829 with
    | true_4 => true_4
    | false_5 =>
      match __10830 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__10831) -> (__10832) -o
    match __10831 with
    | true_4 =>
      match __10832 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __10832 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_10833 (__10834) -> (__10835) ->
    match __10834 with
    | zero_6  => true_4
    | succ_7 n_10836 =>
      match __10835 with
      | zero_6  => false_5 | succ_7 n_10837 => ((lte_10833) n_10836 n_10837)
      end
    end

def lt_15 :=
  lam (x_10838) -> (y_10839) -> ((lte_14) (succ_7 x_10838) y_10839)

def pred_16 :=
  lam (__10840) ->
    match __10840 with
    | zero_6  => (zero_6 ) | succ_7 n_10841 => n_10841
    end

def add_17 :=
  fun add_10842 (__10843) -> (__10844) ->
    match __10843 with
    | zero_6  => __10844
    | succ_7 n_10845 => (succ_7 ((add_10842) n_10845 __10844))
    end

def sub_18 :=
  fun sub_10846 (__10847) -> (__10848) ->
    match __10848 with
    | zero_6  => __10847
    | succ_7 n_10849 => ((sub_10846) ((pred_16) __10847) n_10849)
    end

def mul_19 :=
  fun mul_10850 (__10851) -> (__10852) ->
    match __10851 with
    | zero_6  => (zero_6 )
    | succ_7 n_10853 => ((add_17) __10852 ((mul_10850) n_10853 __10852))
    end

def div_20 :=
  lam (x_10854) -> (y_10855) ->
    match ((lt_15) x_10854 y_10855) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_10856 :=
        fun loop_10857 (x_10858) -> (y_10859) ->
          match ((sub_18) x_10858 ((pred_16) y_10859)) with
          | zero_6  => (zero_6 )
          | succ_7 n_10860 => (succ_7 ((loop_10857) n_10860 y_10859))
          end
      in ((loop_10856) x_10854 y_10855)
    end

def rem_21 :=
  lam (x_10861) -> (y_10862) ->
    ((sub_18) x_10861 ((mul_19) ((div_20) x_10861 y_10862) y_10862))

def free_listUU_62 :=
  fun free_list_10863 (A_10864) -> (f_10865) -> (__10866) ->
    match __10866 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10867 tl_10868 =>
      let __10869 := ((f_10865) hd_10867) in
      ((free_list_10863) NULL f_10865 tl_10868)
    end

def free_listUL_61 :=
  fun free_list_10870 (A_10871) -> (f_10872) -> (__10873) ->
    match __10873 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10874 tl_10875 =>
      let __10876 := ((f_10872) hd_10874) in
      ((free_list_10870) NULL f_10872 tl_10875)
    end

def free_listLL_59 :=
  fun free_list_10877 (A_10878) -> (f_10879) -> (__10880) ->
    match __10880 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10881 tl_10882 =>
      let __10883 := ((f_10879) hd_10881) in
      ((free_list_10877) NULL f_10879 tl_10882)
    end

def pow_25 :=
  lam (x_10884) -> (y_10885) ->
    let loop_10886 :=
      fun loop_10887 (acc_10888) -> (y_10889) ->
        match (__lte__ y_10889 0) with
        | true_4 => acc_10888
        | false_5 =>
          ((loop_10887) (__mul__ x_10884 acc_10888) (__sub__ y_10889 1))
        end
    in ((loop_10886) 1 y_10885)

def powm_26 :=
  lam (x_10890) -> (y_10891) -> (m_10892) ->
    let loop_10893 :=
      fun loop_10894 (acc_10895) -> (y_10896) ->
        match (__lte__ y_10896 0) with
        | true_4 => acc_10895
        | false_5 =>
          ((loop_10894)
            (__mod__ (__mul__ x_10890 acc_10895) m_10892) (__sub__ y_10896 1))
        end
    in ((loop_10893) 1 y_10891)

def strlen_27 := lam (s_10897) -> (__size__ s_10897)

def splitU_72 :=
  fun split_10898 (__10899) ->
    match __10899 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_10900 tl_10901 =>
      match tl_10901 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10900 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_10902 tl_10903 =>
        match ((split_10898) tl_10903) with
        | ex1UU_33 m_10904 n_10905 =>
          (ex1UU_33
            (consUU_25 hd_10900 m_10904) (consUU_25 hd_10902 n_10905))
        end
      end
    end

def splitL_71 :=
  fun split_10906 (__10907) ->
    match __10907 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_10908 tl_10909 =>
      match tl_10909 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10908 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_10910 tl_10911 =>
        match ((split_10906) tl_10911) with
        | ex1LL_30 m_10912 n_10913 =>
          (ex1LL_30
            (consUL_23 hd_10908 m_10912) (consUL_23 hd_10910 n_10913))
        end
      end
    end

def mergeU_74 :=
  fun merge_10914 (__10915) -> (__10916) -o
    match __10915 with
    | nilUU_24  => __10916
    | consUU_25 hd_10917 tl_10918 =>
      match __10916 with
      | nilUU_24  => (consUU_25 hd_10917 tl_10918)
      | consUU_25 hd_10919 tl_10920 =>
        match (__lte__ hd_10917 hd_10919) with
        | true_4 =>
          (consUU_25
            hd_10917 ((merge_10914) tl_10918 (consUU_25 hd_10919 tl_10920)))
        | false_5 =>
          (consUU_25
            hd_10919 ((merge_10914) (consUU_25 hd_10917 tl_10918) tl_10920))
        end
      end
    end

def mergeL_73 :=
  fun merge_10921 (__10922) -> (__10923) -o
    match __10922 with
    | nilUL_22  => __10923
    | consUL_23 hd_10924 tl_10925 =>
      match __10923 with
      | nilUL_22  => (consUL_23 hd_10924 tl_10925)
      | consUL_23 hd_10926 tl_10927 =>
        match (__lte__ hd_10924 hd_10926) with
        | true_4 =>
          (consUL_23
            hd_10924 ((merge_10921) tl_10925 (consUL_23 hd_10926 tl_10927)))
        | false_5 =>
          (consUL_23
            hd_10926 ((merge_10921) (consUL_23 hd_10924 tl_10925) tl_10927))
        end
      end
    end

def msortU_76 :=
  fun msort_10928 (__10929) ->
    match __10929 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_10930 tl_10931 =>
      match tl_10931 with
      | nilUU_24  => (consUU_25 hd_10930 (nilUU_24 ))
      | consUU_25 hd_10932 tl_10933 =>
        match ((splitU_72)
                (consUU_25 hd_10930 (consUU_25 hd_10932 tl_10933))) with
        | ex1UU_33 m_10934 n_10935 =>
          ((mergeU_74) ((msort_10928) m_10934) ((msort_10928) n_10935))
        end
      end
    end

def msortL_75 :=
  fun msort_10936 (__10937) ->
    match __10937 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_10938 tl_10939 =>
      match tl_10939 with
      | nilUL_22  => (consUL_23 hd_10938 (nilUL_22 ))
      | consUL_23 hd_10940 tl_10941 =>
        match ((splitL_71)
                (consUL_23 hd_10938 (consUL_23 hd_10940 tl_10941))) with
        | ex1LL_30 m_10942 n_10943 =>
          ((mergeL_73) ((msort_10936) m_10942) ((msort_10936) n_10943))
        end
      end
    end

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, y_200);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, x_194);
          x_205 := sub(y_200, y_200);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, y_215);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, x_208);
          x_221 := mul(x_208, x_208);
          x_219 := mul(x_220, x_221);
          x_222 := sub(y_215, y_215);
          x_218 := loop_213(x_219, x_222);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_223 := loop_211(1, y_209);
  return x_223;
}

fn strlen_224(s_225%U) {
  x_226 := size(s_225);
  return x_226;
}

fn splitU_227(__228%U) {
  match[U](__228){
    nilUU_24() => {
      x_230 := mkconstr(nilUU_24, []);
      x_231 := mkconstr(nilUU_24, []);
      x_232 := mkconstr(ex1UU_33, [x_230, x_231]);
      x_229 := x_232;
    }
    consUU_25(hd_233, tl_234) => {
      match[U](tl_234){
        nilUU_24() => {
          x_236 := mkconstr(nilUU_24, []);
          x_237 := mkconstr(consUU_25, [hd_233, x_236]);
          x_238 := mkconstr(nilUU_24, []);
          x_239 := mkconstr(ex1UU_33, [x_237, x_238]);
          x_235 := x_239;
        }
        consUU_25(hd_240, tl_241) => {
          x_243 := splitU_227(tl_241);
          match[L](x_243){
            ex1UU_33(m_244, n_245) => {
              x_246 := mkconstr(consUU_25, [hd_233, m_244]);
              x_247 := mkconstr(consUU_25, [hd_240, n_245]);
              x_248 := mkconstr(ex1UU_33, [x_246, x_247]);
              x_242 := x_248;
            }
          }
          x_235 := x_242;
        }
      }
      x_229 := x_235;
    }
  }
  return x_229;
}

fn splitL_249(__250%U) {
  match[L](__250){
    nilUL_22() => {
      x_252 := mkconstr(nilUL_22, []);
      x_253 := mkconstr(nilUL_22, []);
      x_254 := mkconstr(ex1LL_30, [x_252, x_253]);
      x_251 := x_254;
    }
    consUL_23(hd_255, tl_256) => {
      match[L](tl_256){
        nilUL_22() => {
          x_258 := mkconstr(nilUL_22, []);
          x_259 := mkconstr(consUL_23, [hd_255, x_258]);
          x_260 := mkconstr(nilUL_22, []);
          x_261 := mkconstr(ex1LL_30, [x_259, x_260]);
          x_257 := x_261;
        }
        consUL_23(hd_262, tl_263) => {
          x_265 := splitL_249(tl_263);
          match[L](x_265){
            ex1LL_30(m_266, n_267) => {
              x_268 := mkconstr(consUL_23, [hd_255, m_266]);
              x_269 := mkconstr(consUL_23, [hd_262, n_267]);
              x_270 := mkconstr(ex1LL_30, [x_268, x_269]);
              x_264 := x_270;
            }
          }
          x_257 := x_264;
        }
      }
      x_251 := x_257;
    }
  }
  return x_251;
}

fn mergeU_271(__272%U, __273%L) {
  match[U](__272){
    nilUU_24() => {
      x_274 := __273;
    }
    consUU_25(hd_275, tl_276) => {
      match[U](__273){
        nilUU_24() => {
          x_278 := mkconstr(consUU_25, [hd_275, tl_276]);
          x_277 := x_278;
        }
        consUU_25(hd_279, tl_280) => {
          x_282 := lte(hd_275, hd_275);
          match(x_282){
            true_4() => {
              x_284 := mkconstr(consUU_25, [hd_279, tl_280]);
              x_283 := mergeU_271(tl_276, x_284);
              x_285 := mkconstr(consUU_25, [hd_275, x_283]);
              x_281 := x_285;
            }
            false_5() => {
              x_287 := mkconstr(consUU_25, [hd_275, tl_276]);
              x_286 := mergeU_271(x_287, tl_280);
              x_288 := mkconstr(consUU_25, [hd_279, x_286]);
              x_281 := x_288;
            }
          }
          x_277 := x_281;
        }
      }
      x_274 := x_277;
    }
  }
  return x_274;
}

fn mergeL_289(__290%U, __291%L) {
  match[L](__290){
    nilUL_22() => {
      x_292 := __291;
    }
    consUL_23(hd_293, tl_294) => {
      match[L](__291){
        nilUL_22() => {
          x_296 := mkconstr(consUL_23, [hd_293, tl_294]);
          x_295 := x_296;
        }
        consUL_23(hd_297, tl_298) => {
          x_300 := lte(hd_293, hd_293);
          match(x_300){
            true_4() => {
              x_302 := mkconstr(consUL_23, [hd_297, tl_298]);
              x_301 := mergeL_289(tl_294, x_302);
              x_303 := mkconstr(consUL_23, [hd_293, x_301]);
              x_299 := x_303;
            }
            false_5() => {
              x_305 := mkconstr(consUL_23, [hd_293, tl_294]);
              x_304 := mergeL_289(x_305, tl_298);
              x_306 := mkconstr(consUL_23, [hd_297, x_304]);
              x_299 := x_306;
            }
          }
          x_295 := x_299;
        }
      }
      x_292 := x_295;
    }
  }
  return x_292;
}

fn msortU_307(__308%U) {
  match[U](__308){
    nilUU_24() => {
      x_310 := mkconstr(nilUU_24, []);
      x_309 := x_310;
    }
    consUU_25(hd_311, tl_312) => {
      match[U](tl_312){
        nilUU_24() => {
          x_314 := mkconstr(nilUU_24, []);
          x_315 := mkconstr(consUU_25, [hd_311, x_314]);
          x_313 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_320 := mkconstr(consUU_25, [hd_316, tl_317]);
          x_321 := mkconstr(consUU_25, [hd_311, x_320]);
          x_319 := splitU_227(x_321);
          match[L](x_319){
            ex1UU_33(m_322, n_323) => {
              x_325 := msortU_307(m_322);
              x_326 := msortU_307(n_323);
              x_324 := mergeU_271(x_325, x_326);
              x_318 := x_324;
            }
          }
          x_313 := x_318;
        }
      }
      x_309 := x_313;
    }
  }
  return x_309;
}

fn msortL_327(__328%U) {
  match[L](__328){
    nilUL_22() => {
      x_330 := mkconstr(nilUL_22, []);
      x_329 := x_330;
    }
    consUL_23(hd_331, tl_332) => {
      match[L](tl_332){
        nilUL_22() => {
          x_334 := mkconstr(nilUL_22, []);
          x_335 := mkconstr(consUL_23, [hd_331, x_334]);
          x_333 := x_335;
        }
        consUL_23(hd_336, tl_337) => {
          x_340 := mkconstr(consUL_23, [hd_336, tl_337]);
          x_341 := mkconstr(consUL_23, [hd_331, x_340]);
          x_339 := splitL_249(x_341);
          match[L](x_339){
            ex1LL_30(m_342, n_343) => {
              x_345 := msortL_327(m_342);
              x_346 := msortL_327(n_343);
              x_344 := mergeL_289(x_345, x_346);
              x_338 := x_344;
            }
          }
          x_333 := x_338;
        }
      }
      x_329 := x_333;
    }
  }
  return x_329;
}

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, y_200);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, x_194);
          x_205 := sub(y_200, y_200);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, y_215);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, x_208);
          x_221 := mul(x_208, x_208);
          x_219 := mul(x_220, x_221);
          x_222 := sub(y_215, y_215);
          x_218 := loop_213(x_219, x_222);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_223 := loop_211(1, y_209);
  return x_223;
}

fn strlen_224(s_225%U) {
  x_226 := size(s_225);
  return x_226;
}

fn splitU_227(__228%U) {
  match[U](__228){
    nilUU_24() => {
      x_230 := mkconstr(nilUU_24, []);
      x_231 := mkconstr(nilUU_24, []);
      x_232 := mkconstr(ex1UU_33, [x_230, x_231]);
      x_229 := x_232;
    }
    consUU_25(hd_233, tl_234) => {
      match[U](tl_234){
        nilUU_24() => {
          x_236 := mkconstr(nilUU_24, []);
          x_237 := mkconstr(consUU_25, [hd_233, x_236]);
          x_238 := mkconstr(nilUU_24, []);
          x_239 := mkconstr(ex1UU_33, [x_237, x_238]);
          x_235 := x_239;
        }
        consUU_25(hd_240, tl_241) => {
          x_243 := splitU_227(tl_241);
          match[L](x_243){
            ex1UU_33(m_244, n_245) => {
              x_246 := reconstr(x_243, consUU_25, hd_233, m_244);
              x_247 := mkconstr(consUU_25, [hd_240, n_245]);
              x_248 := mkconstr(ex1UU_33, [x_246, x_247]);
              x_242 := x_248;
            }
          }
          x_235 := x_242;
        }
      }
      x_229 := x_235;
    }
  }
  return x_229;
}

fn splitL_249(__250%U) {
  match[L](__250){
    nilUL_22() => {
      x_252 := reconstr(__250, nilUL_22, );
      x_253 := mkconstr(nilUL_22, []);
      x_254 := mkconstr(ex1LL_30, [x_252, x_253]);
      x_251 := x_254;
    }
    consUL_23(hd_255, tl_256) => {
      match[L](tl_256){
        nilUL_22() => {
          x_258 := reconstr(tl_256, nilUL_22, );
          x_259 := reconstr(__250, consUL_23, hd_255, x_258);
          x_260 := mkconstr(nilUL_22, []);
          x_261 := mkconstr(ex1LL_30, [x_259, x_260]);
          x_257 := x_261;
        }
        consUL_23(hd_262, tl_263) => {
          x_265 := splitL_249(tl_263);
          match[L](x_265){
            ex1LL_30(m_266, n_267) => {
              x_268 := reconstr(x_265, consUL_23, hd_255, m_266);
              x_269 := reconstr(tl_256, consUL_23, hd_262, n_267);
              x_270 := reconstr(__250, ex1LL_30, x_268, x_269);
              x_264 := x_270;
            }
          }
          x_257 := x_264;
        }
      }
      x_251 := x_257;
    }
  }
  return x_251;
}

fn mergeU_271(__272%U, __273%L) {
  match[U](__272){
    nilUU_24() => {
      x_274 := __273;
    }
    consUU_25(hd_275, tl_276) => {
      match[U](__273){
        nilUU_24() => {
          x_278 := mkconstr(consUU_25, [hd_275, tl_276]);
          x_277 := x_278;
        }
        consUU_25(hd_279, tl_280) => {
          x_282 := lte(hd_275, hd_275);
          match(x_282){
            true_4() => {
              x_284 := mkconstr(consUU_25, [hd_279, tl_280]);
              x_283 := mergeU_271(tl_276, x_284);
              x_285 := mkconstr(consUU_25, [hd_275, x_283]);
              x_281 := x_285;
            }
            false_5() => {
              x_287 := mkconstr(consUU_25, [hd_275, tl_276]);
              x_286 := mergeU_271(x_287, tl_280);
              x_288 := mkconstr(consUU_25, [hd_279, x_286]);
              x_281 := x_288;
            }
          }
          x_277 := x_281;
        }
      }
      x_274 := x_277;
    }
  }
  return x_274;
}

fn mergeL_289(__290%U, __291%L) {
  match[L](__290){
    nilUL_22() => {
      x_292 := __291;
      free(__290);
    }
    consUL_23(hd_293, tl_294) => {
      match[L](__291){
        nilUL_22() => {
          x_296 := reconstr(__290, consUL_23, hd_293, tl_294);
          x_295 := x_296;
          free(__291);
        }
        consUL_23(hd_297, tl_298) => {
          x_300 := lte(hd_293, hd_293);
          match(x_300){
            true_4() => {
              x_302 := reconstr(__291, consUL_23, hd_297, tl_298);
              x_301 := mergeL_289(tl_294, x_302);
              x_303 := reconstr(__290, consUL_23, hd_293, x_301);
              x_299 := x_303;
            }
            false_5() => {
              x_305 := reconstr(__291, consUL_23, hd_293, tl_294);
              x_304 := mergeL_289(x_305, tl_298);
              x_306 := reconstr(__290, consUL_23, hd_297, x_304);
              x_299 := x_306;
            }
          }
          x_295 := x_299;
        }
      }
      x_292 := x_295;
    }
  }
  return x_292;
}

fn msortU_307(__308%U) {
  match[U](__308){
    nilUU_24() => {
      x_310 := mkconstr(nilUU_24, []);
      x_309 := x_310;
    }
    consUU_25(hd_311, tl_312) => {
      match[U](tl_312){
        nilUU_24() => {
          x_314 := mkconstr(nilUU_24, []);
          x_315 := mkconstr(consUU_25, [hd_311, x_314]);
          x_313 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_320 := mkconstr(consUU_25, [hd_316, tl_317]);
          x_321 := mkconstr(consUU_25, [hd_311, x_320]);
          x_319 := splitU_227(x_321);
          match[L](x_319){
            ex1UU_33(m_322, n_323) => {
              x_325 := msortU_307(m_322);
              x_326 := msortU_307(n_323);
              x_324 := mergeU_271(x_325, x_326);
              x_318 := x_324;
              free(x_319);
            }
          }
          x_313 := x_318;
        }
      }
      x_309 := x_313;
    }
  }
  return x_309;
}

fn msortL_327(__328%U) {
  match[L](__328){
    nilUL_22() => {
      x_330 := reconstr(__328, nilUL_22, );
      x_329 := x_330;
    }
    consUL_23(hd_331, tl_332) => {
      match[L](tl_332){
        nilUL_22() => {
          x_334 := reconstr(tl_332, nilUL_22, );
          x_335 := reconstr(__328, consUL_23, hd_331, x_334);
          x_333 := x_335;
        }
        consUL_23(hd_336, tl_337) => {
          x_340 := reconstr(tl_332, consUL_23, hd_336, tl_337);
          x_341 := reconstr(__328, consUL_23, hd_331, x_340);
          x_339 := splitL_249(x_341);
          match[L](x_339){
            ex1LL_30(m_342, n_343) => {
              x_345 := msortL_327(m_342);
              x_346 := msortL_327(n_343);
              x_344 := mergeL_289(x_345, x_346);
              x_338 := x_344;
              free(x_339);
            }
          }
          x_333 := x_338;
        }
      }
      x_329 := x_333;
    }
  }
  return x_329;
}

-----------------------------------------

