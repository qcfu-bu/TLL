[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "string_of_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", String_t)))),
           (Binder ((Some "string_of_list"),
              [([(PId "nil")], (Some (String "nil")));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr ("++",
                          (BOpr ("++",
                             (App [(Id ("string_of_int", I)); (Id ("x", I))]),
                             (String " :: "))),
                          (App [(Id ("string_of_list", I)); (Id ("xs", I))])
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", String_t)))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 2000000)]),
           (Binder ((PId "test"),
              (Let (R, (App [(Id ("msort", I)); (Id ("test", I))]),
                 (Binder ((PId "sorted"),
                    (Let (R,
                       (App [(Id ("list_len", I)); (Id ("sorted", I))]),
                       (Binder ((PId "len"),
                          (Print
                             (App
                                [(Id ("string_of_int", I)); (Id ("len", I))]))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_432› : ∀ (A_433 : Type‹s_432›) -> A_433 -> ?_2[0;0] :=
  fun id_435 : ∀ (A_436 : Type‹s_432›) -> A_436 -> ?_1[0;0]
  | A_438 m_439 => m_439

#[logical]
inductive eq_1‹s_440› (A_441 : Type‹s_440›) (m_442 : A_441):
  A_441 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_442 m_442)

#[program]
def rwl_2‹s_444,r_445› :
  ∀ {A_446 : Type‹s_444›} ->
    ∀ {m_447 : A_446} ->
      ∀ {n_448 : A_446} ->
        ∀ {B_449 : A_446 -> Type‹r_445›} ->
          {(eq_1‹??_3› ?_5[0;0] m_447 n_448)} ->
            ((B_449) m_447) -> ((B_449) n_448)
:=
  fun rwl_453 :
    ∀ {A_454 : Type‹s_444›} ->
      ∀ {m_455 : A_454} ->
        ∀ {n_456 : A_454} ->
          ∀ {B_457 : A_454 -> Type‹r_445›} ->
            {(eq_1‹??_2› ?_4[0;0] m_455 n_456)} ->
              ((B_457) m_455) -> ((B_457) n_456)
  | A_461 m_462 n_463 B_464 refl_1 x_465 => x_465

#[program]
def rwr_3‹s_466,r_467› :
  ∀ {A_468 : Type‹s_466›} ->
    ∀ {m_469 : A_468} ->
      ∀ {n_470 : A_468} ->
        ∀ {B_471 : A_468 -> Type‹r_467›} ->
          {(eq_1‹??_5› ?_7[0;0] m_469 n_470)} ->
            ((B_471) n_470) -> ((B_471) m_469)
:=
  fun rwr_475 :
    ∀ {A_476 : Type‹s_466›} ->
      ∀ {m_477 : A_476} ->
        ∀ {n_478 : A_476} ->
          ∀ {B_479 : A_476 -> Type‹r_467›} ->
            {(eq_1‹??_4› ?_6[0;0] m_477 n_478)} ->
              ((B_479) n_478) -> ((B_479) m_477)
  | A_483 m_484 n_485 B_486 refl_1 x_487 => x_487

#[logical]
def congr_4‹s_488,r_489,t_490› :
  ∀ (A_491 : Type‹s_488›) ->
    ∀ (B_492 : Type‹r_489›) ->
      ∀ (m_493 : A_491) ->
        ∀ (n_494 : A_491) ->
          ∀ (f_495 : forall‹t_490›(__496 : A_491), B_492) ->
            (eq_1‹??_9› ?_12[0;0] m_493 n_494) ->
              (eq_1‹??_10› ?_13[0;0] ((f_495) m_493) ((f_495) n_494))
:=
  fun congr_498 :
    ∀ (A_499 : Type‹s_488›) ->
      ∀ (B_500 : Type‹r_489›) ->
        ∀ (m_501 : A_499) ->
          ∀ (n_502 : A_499) ->
            ∀ (f_503 : forall‹t_490›(__504 : A_499), B_500) ->
              (eq_1‹??_6› ?_8[0;0] m_501 n_502) ->
                (eq_1‹??_7› ?_9[0;0] ((f_503) m_501) ((f_503) n_502))
  | A_506 B_507 m_508 n_509 f_510 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_511 : U} ->
    ∀ {m_512 : A_511} ->
      ∀ (x_513 : (eq_1‹??_15› ?_20[0;0] m_512 m_512)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_513 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_514 :
    ∀ {A_515 : U} ->
      ∀ {m_516 : A_515} ->
        ∀ (x_517 : (eq_1‹??_11› ?_14[0;0] m_516 m_516)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_517 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_518 m_519 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_520,t_521› (A_522 : Type‹s_520›):
  A_522 -> Type‹t_521›
where
| just_2 (m_524 : A_522) : (sing_2‹??_18,??_19› ?_24[0;0] m_524)

#[logical]
def ssing_6‹s_525› :
  ∀ (A_526 : Type‹s_525›) -> A_526 -> Type‹s_525›
:=
  fun ssing_528 : ∀ (A_529 : Type‹s_525›) -> A_529 -> Type‹s_525›
  | A_531 m_532 => (sing_2‹s_525,s_525› A_531 m_532)

#[program]
def sing_elim_7‹s_533,t_534› :
  ∀ {A_535 : Type‹s_533›} ->
    ∀ {x_536 : A_535} -> (sing_2‹s_533,t_534› ?_26[0;0] x_536) -> A_535
:=
  fun sing_elim_538 :
    ∀ {A_539 : Type‹s_533›} ->
      ∀ {x_540 : A_539} ->
        (sing_2‹s_533,t_534› ?_25[0;0] x_540) -> A_539
  | A_542 x_543 (just_2 x_544) => x_544

#[logical]
def sing_uniq_8‹s_545,t_546› :
  ∀ (A_547 : Type‹s_545›) ->
    ∀ (x0_548 : A_547) ->
      ∀ (x_549 : (sing_2‹s_545,t_546› ?_33[0;0] x0_548)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_548
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_549))
:=
  fun sing_uniq_550 :
    ∀ (A_551 : Type‹s_545›) ->
      ∀ (x0_552 : A_551) ->
        ∀ (x_553 : (sing_2‹s_545,t_546› ?_27[0;0] x0_552)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_552
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_553))
  | A_554 x0_555 (just_2 _556) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_557 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_557 tt_3)
:=
  fun unit_eta_558 :
    ∀ (x_559 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_559 tt_3)
  | x_560 =>
    match x_560 in
      ∀ (x0_561 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_561 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_563 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_567 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _570 _571 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_574 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _577 _578 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_581 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _584 _585 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_586 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_589 : nat_5 -> nat_5 -> bool_4
  | zero_6 _592 => true_4
  | _593 zero_6 => false_5
  | (succ_7 x_594) (succ_7 y_595) => ((lte_589) x_594 y_595)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_598 : nat_5 -> nat_5 -> bool_4
  | x_601 y_602 => ((lte_14) (succ_7‹› x_601) y_602)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_604 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_606) => x_606

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_609 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_612 => y_612
  | (succ_7 x_613) y_614 => (succ_7‹› ((add_609) x_613 y_614))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_617 : nat_5 -> nat_5 -> nat_5
  | x_620 zero_6 => x_620
  | x_621 (succ_7 y_622) => ((sub_617) ((pred_16) x_621) y_622)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_625 : nat_5 -> nat_5 -> nat_5
  | zero_6 _628 => zero_6
  | (succ_7 x_629) y_630 => ((add_17) y_630 ((mul_625) x_629 y_630))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_633 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_636 y_637 =>
    match ((lt_15) x_636 y_637) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_639 :=
        fun loop_640 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_643 y_644 =>
          match ((sub_18) x_643 ((pred_16) y_644)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_646) => (succ_7‹› ((loop_640) x_646 y_644))
      in ((loop_639) x_636 y_637)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_649 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_652 y_653 => ((sub_18) x_652 ((mul_19) ((div_20) x_652 y_653) y_653))

#[program]
inductive list_6‹s_654,t_655› (A_656 : Type‹s_654›): Type‹t_655›
where
| nil_8 : (list_6‹??_31,??_32› A_656)
| cons_9
    (hd_657 : A_656) (tl_658 : (list_6‹??_33,t_655› A_656))
    : (list_6‹??_34,??_35› A_656)

#[program]
def free_list_22‹s_659,t_660› :
  ∀ {A_661 : Type‹s_659›} ->
    A_661 -> unit_3 -> (list_6‹??_37,t_660› A_661) -> unit_3
:=
  fun free_list_665 :
    ∀ {A_666 : Type‹s_659›} ->
      A_666 -> unit_3 -> (list_6‹??_36,t_660› A_666) -> unit_3
  | A_670 f_671 nil_8 => tt_3
  | A_672 f_673 (cons_9 x_674 xs_675) =>
    let __676 := ((f_673) x_674) in ((free_list_665) ?_52[0;0] f_673 xs_675)

#[program]
inductive exists0_7‹s_677,r_678› (A_679 : Type‹s_677›) (B_680 : 
A_679 -> Type‹r_678›): L where
| ex0_10
    {m_682 : A_679} (n_683 : ((B_680) m_682))
    : (exists0_7‹??_38,??_39› A_679 B_680)

#[program]
inductive exists1_8‹s_684,r_685› (A_686 : Type‹s_684›) (B_687 : 
A_686 -> Type‹r_685›): L where
| ex1_11
    (m_689 : A_686) (n_690 : ((B_687) m_689))
    : (exists1_8‹??_40,??_41› A_686 B_687)

#[logical]
def prod0_23‹s_691,r_692› :
  Type‹s_691› -> Type‹r_692› -> ?_56[0;0]
:=
  fun prod0_695 : Type‹s_691› -> Type‹r_692› -> ?_53[0;0]
  | A_698 B_699 =>
    (exists0_7‹??_42,??_43›
      A_698 fun _700 : ?_54[0;0] -> ?_55[0;0]
            | _702 => B_699)

#[logical]
def prod1_24‹s_703,r_704› :
  Type‹s_703› -> Type‹r_704› -> ?_60[0;0]
:=
  fun prod1_707 : Type‹s_703› -> Type‹r_704› -> ?_57[0;0]
  | A_710 B_711 =>
    (exists1_8‹??_44,??_45›
      A_710 fun _712 : ?_58[0;0] -> ?_59[0;0]
            | _714 => B_711)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_717 : int -> int -> int
  | x_720 y_721 =>
    let loop_722 :=
      fun loop_723 : int -> int -> int
      | acc_726 y_727 =>
        match (__lte__ y_727 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_726
        | false_5 => ((loop_723) (__mul__ x_720 acc_726) (__sub__ y_727 1))
    in ((loop_722) 1 y_721)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_732 : int -> int -> int -> int
  | x_736 y_737 m_738 =>
    let loop_739 :=
      fun loop_740 : int -> int -> int
      | acc_743 y_744 =>
        match (__lte__ y_744 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_743
        | false_5 =>
          ((loop_740)
            (__mod__ (__mul__ x_736 acc_743) m_738) (__sub__ y_744 1))
    in ((loop_739) 1 y_737)

#[program]
def ord_27‹› : char -> int :=
  fun ord_747 : char -> int
  | c_749 => (__ord__ c_749)

#[program]
def chr_28‹› : int -> char :=
  fun chr_751 : int -> char
  | i_753 => (__chr__ i_753)

#[program]
def str_29‹› : char -> string :=
  fun str_755 : char -> string
  | c_757 => (__push__ "" c_757)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_759 : string -> int
  | s_761 => (__size__ s_761)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_763 : int -> string
  | i_765 =>
    let aux_766 :=
      fun aux_767 : int -> string
      | i_769 =>
        match (__lte__ 10 i_769) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_771 := (__mod__ i_769 10) in
          let i_772 := (__div__ i_769 10) in
          (__push__ ((aux_767) i_772)
            ((chr_28) (__add__ r_771 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_769 ((ord_27) 0))))
    in
    match (__lt__ 0 i_765) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_766) i_765)
    | false_5 => (__cat__ "~" ((aux_766) (__neg__ i_765)))

#[program]
def split_32‹t_774› :
  (list_6‹??_71,t_774› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_774› int) (list_6‹??_73,t_774› int))
:=
  fun split_776 :
    (list_6‹??_46,t_774› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_774› int) (list_6‹??_48,t_774› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_778 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_778 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_779 (cons_9 y_780 zs_781)) =>
    match ((split_776) zs_781) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_783 ys_784) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_779 xs_783)
        (cons_9‹??_67,??_68› ?_79[0;0] y_780 ys_784))

#[program]
def merge_33‹t_785› :
  (list_6‹??_87,t_785› int) ->
    (list_6‹??_88,t_785› int) -o (list_6‹??_89,t_785› int)
:=
  fun merge_788 :
    (list_6‹??_76,t_785› int) ->
      (list_6‹??_77,t_785› int) -o (list_6‹??_78,t_785› int)
  | nil_8 ys_791 => ys_791
  | xs_792 nil_8 => xs_792
  | (cons_9 x_793 xs_794) (cons_9 y_795 ys_796) =>
    match (__lte__ x_793 y_795) in ?_84[0;0] -o ?_85[0;0] with
    | true_4 =>
      (cons_9‹??_81,??_82›
        ?_87[0;0] x_793
        ((merge_788) xs_794 (cons_9‹??_79,??_80› ?_86[0;0] y_795 ys_796)))
    | false_5 =>
      (cons_9‹??_85,??_86›
        ?_89[0;0] y_795
        ((merge_788) (cons_9‹??_83,??_84› ?_88[0;0] x_793 xs_794) ys_796))

#[program]
def msort_34‹t_798› :
  (list_6‹??_100,t_798› int) -> (list_6‹??_101,t_798› int)
:=
  fun msort_800 :
    (list_6‹??_90,t_798› int) -> (list_6‹??_91,t_798› int)
  | nil_8 => (nil_8‹??_92,??_93› ?_90[0;0])
  | (cons_9 z_802 nil_8) =>
    (cons_9‹??_96,??_97›
      ?_92[0;0] z_802 (nil_8‹??_94,??_95› ?_91[0;0]))
  | zs_803 =>
    match ((split_32‹??_98›) zs_803) in ?_94[0;0] -o ?_93[0;0] with
    | (ex1_11 xs_805 ys_806) =>
      ((merge_33‹??_99›) ((msort_800) xs_805) ((msort_800) ys_806))

#[program]
def mklist_35‹t_807› : int -> (list_6‹??_107,t_807› int) :=
  fun mklist_809 : int -> (list_6‹??_102,t_807› int)
  | n_811 =>
    match (__lte__ n_811 0) in ?_95[0;0] -o ?_96[0;0] with
    | true_4 => (nil_8‹??_103,??_104› ?_97[0;0])
    | false_5 =>
      (cons_9‹??_105,??_106›
        ?_98[0;0] n_811 ((mklist_809) (__sub__ n_811 1)))

#[program]
def list_len_36‹t_813› : (list_6‹??_109,t_813› int) -> int :=
  fun list_len_815 : (list_6‹??_108,t_813› int) -> int
  | nil_8 => 0
  | (cons_9 _817 xs_818) => (__add__ 1 ((list_len_815) xs_818))

#[program]
def string_of_list_37‹t_819› : (list_6‹??_111,t_819› int) -> string
:=
  fun string_of_list_821 : (list_6‹??_110,t_819› int) -> string
  | nil_8 => "nil"
  | (cons_9 x_823 xs_824) =>
    (__cat__ (__cat__ ((string_of_int_31) x_823) " :: ")
      ((string_of_list_821) xs_824))

#[program]
def main_38‹› : IO unit_3 :=
  let test_825 := ((mklist_35‹L›) 2000000) in
  let sorted_826 := ((msort_34‹??_112›) test_825) in
  let len_827 := ((list_len_36‹??_113›) sorted_826) in
  print ((string_of_int_31) len_827)

-----------------------------------------

#[program]
def id_1‹s_5884› : ∀ (A_5885 : Type‹s_5884›) -> A_5885 -> A_5885 :=
  fun id_5887 : ∀ (A_5888 : Type‹s_5884›) -> A_5888 -> A_5888
  | A_5890 m_5891 => m_5891

#[logical]
inductive eq_1‹s_5892› (A_5893 : Type‹s_5892›) (m_5894 : A_5893):
  A_5893 -> U
where
| refl_1 : (eq_1‹s_5892› A_5893 m_5894 m_5894)

#[program]
def rwl_2‹s_5896,r_5897› :
  ∀ {A_5898 : Type‹s_5896›} ->
    ∀ {m_5899 : A_5898} ->
      ∀ {n_5900 : A_5898} ->
        ∀ {B_5901 : A_5898 -> Type‹r_5897›} ->
          {(eq_1‹s_5896› A_5898 m_5899 n_5900)} ->
            ((B_5901) m_5899) -> ((B_5901) n_5900)
:=
  fun rwl_5905 :
    ∀ {A_5906 : Type‹s_5896›} ->
      ∀ {m_5907 : A_5906} ->
        ∀ {n_5908 : A_5906} ->
          ∀ {B_5909 : A_5906 -> Type‹r_5897›} ->
            {(eq_1‹s_5896› A_5906 m_5907 n_5908)} ->
              ((B_5909) m_5907) -> ((B_5909) n_5908)
  | A_5913 m_5914 n_5915 B_5916 refl_1 __5917 => __5917

#[program]
def rwr_3‹s_5918,r_5919› :
  ∀ {A_5920 : Type‹s_5918›} ->
    ∀ {m_5921 : A_5920} ->
      ∀ {n_5922 : A_5920} ->
        ∀ {B_5923 : A_5920 -> Type‹r_5919›} ->
          {(eq_1‹s_5918› A_5920 m_5921 n_5922)} ->
            ((B_5923) n_5922) -> ((B_5923) m_5921)
:=
  fun rwr_5927 :
    ∀ {A_5928 : Type‹s_5918›} ->
      ∀ {m_5929 : A_5928} ->
        ∀ {n_5930 : A_5928} ->
          ∀ {B_5931 : A_5928 -> Type‹r_5919›} ->
            {(eq_1‹s_5918› A_5928 m_5929 n_5930)} ->
              ((B_5931) n_5930) -> ((B_5931) m_5929)
  | A_5935 m_5936 n_5937 B_5938 refl_1 __5939 => __5939

#[logical]
def congr_4‹s_5940,r_5941,t_5942› :
  ∀ (A_5943 : Type‹s_5940›) ->
    ∀ (B_5944 : Type‹r_5941›) ->
      ∀ (m_5945 : A_5943) ->
        ∀ (n_5946 : A_5943) ->
          ∀ (f_5947 : forall‹t_5942›(__5948 : A_5943), B_5944) ->
            (eq_1‹s_5940› A_5943 m_5945 n_5946) ->
              (eq_1‹r_5941› B_5944 ((f_5947) m_5945) ((f_5947) n_5946))
:=
  fun congr_5950 :
    ∀ (A_5951 : Type‹s_5940›) ->
      ∀ (B_5952 : Type‹r_5941›) ->
        ∀ (m_5953 : A_5951) ->
          ∀ (n_5954 : A_5951) ->
            ∀ (f_5955 : forall‹t_5942›(__5956 : A_5951), B_5952) ->
              (eq_1‹s_5940› A_5951 m_5953 n_5954) ->
                (eq_1‹r_5941› B_5952 ((f_5955) m_5953) ((f_5955) n_5954))
  | A_5958 B_5959 m_5960 n_5961 f_5962 refl_1 =>
    (refl_1‹r_5941› B_5959 ((f_5962) n_5961))

#[logical]
def axiom_K_5‹› :
  ∀ {A_5963 : U} ->
    ∀ {m_5964 : A_5963} ->
      ∀ (x_5965 : (eq_1‹U› A_5963 m_5964 m_5964)) ->
        (eq_1‹U›
          (eq_1‹U› A_5963 m_5964 m_5964) x_5965
          (refl_1‹U› A_5963 m_5964))
:=
  fun axiom_K_5966 :
    ∀ {A_5967 : U} ->
      ∀ {m_5968 : A_5967} ->
        ∀ (x_5969 : (eq_1‹U› A_5967 m_5968 m_5968)) ->
          (eq_1‹U›
            (eq_1‹U› A_5967 m_5968 m_5968) x_5969
            (refl_1‹U› A_5967 m_5968))
  | A_5970 m_5971 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_5970 m_5971 m_5971) (refl_1‹U› A_5970 m_5971))

#[program]
inductive sing_2‹s_5972,t_5973› (A_5974 : Type‹s_5972›):
  A_5974 -> Type‹t_5973›
where
| just_2 (m_5976 : A_5974) : (sing_2‹s_5972,t_5973› A_5974 m_5976)

#[logical]
def ssing_6‹s_5977› :
  ∀ (A_5978 : Type‹s_5977›) -> A_5978 -> Type‹s_5977›
:=
  fun ssing_5980 :
    ∀ (A_5981 : Type‹s_5977›) -> A_5981 -> Type‹s_5977›
  | A_5983 m_5984 => (sing_2‹s_5977,s_5977› A_5983 m_5984)

#[program]
def sing_elim_7‹s_5985,t_5986› :
  ∀ {A_5987 : Type‹s_5985›} ->
    ∀ {x_5988 : A_5987} ->
      (sing_2‹s_5985,t_5986› A_5987 x_5988) -> A_5987
:=
  fun sing_elim_5990 :
    ∀ {A_5991 : Type‹s_5985›} ->
      ∀ {x_5992 : A_5991} ->
        (sing_2‹s_5985,t_5986› A_5991 x_5992) -> A_5991
  | A_5994 x_5995 (just_2 m_5996) => m_5996

#[logical]
def sing_uniq_8‹s_5997,t_5998› :
  ∀ (A_5999 : Type‹s_5997›) ->
    ∀ (x0_6000 : A_5999) ->
      ∀ (x_6001 : (sing_2‹s_5997,t_5998› A_5999 x0_6000)) ->
        (eq_1‹s_5997›
          A_5999 x0_6000
          ((sing_elim_7‹s_5997,t_5998›) A_5999 x0_6000 x_6001))
:=
  fun sing_uniq_6002 :
    ∀ (A_6003 : Type‹s_5997›) ->
      ∀ (x0_6004 : A_6003) ->
        ∀ (x_6005 : (sing_2‹s_5997,t_5998› A_6003 x0_6004)) ->
          (eq_1‹s_5997›
            A_6003 x0_6004
            ((sing_elim_7‹s_5997,t_5998›) A_6003 x0_6004 x_6005))
  | A_6006 x0_6007 (just_2 m_6008) => (refl_1‹s_5997› A_6006 m_6008)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_6009 : unit_3) -> (eq_1‹U› unit_3 x_6009 tt_3)
:=
  fun unit_eta_6010 :
    ∀ (x_6011 : unit_3) -> (eq_1‹U› unit_3 x_6011 tt_3)
  | x_6012 =>
    match x_6012 in
      ∀ (x0_6013 : unit_3) -o (eq_1‹U› unit_3 x0_6013 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_6015 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_6019 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __6022 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_6025 : bool_4 -> bool_4 -> bool_4
  | true_4 __6028 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_6031 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_6034 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_6037 : nat_5 -> nat_5 -> bool_4
  | zero_6 __6040 => true_4
  | (succ_7 n_6041) zero_6 => false_5
  | (succ_7 n_6042) (succ_7 n_6043) => ((lte_6037) n_6042 n_6043)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_6046 : nat_5 -> nat_5 -> bool_4
  | x_6049 y_6050 => ((lte_14) (succ_7‹› x_6049) y_6050)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_6052 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_6054) => n_6054

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_6057 : nat_5 -> nat_5 -> nat_5
  | zero_6 __6060 => __6060
  | (succ_7 n_6061) __6062 => (succ_7‹› ((add_6057) n_6061 __6062))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_6065 : nat_5 -> nat_5 -> nat_5
  | __6068 zero_6 => __6068
  | __6069 (succ_7 n_6070) => ((sub_6065) ((pred_16) __6069) n_6070)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_6073 : nat_5 -> nat_5 -> nat_5
  | zero_6 __6076 => zero_6
  | (succ_7 n_6077) __6078 => ((add_17) __6078 ((mul_6073) n_6077 __6078))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_6081 : nat_5 -> nat_5 -> nat_5
  | x_6084 y_6085 =>
    match ((lt_15) x_6084 y_6085) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_6087 :=
        fun loop_6088 : nat_5 -> nat_5 -> nat_5
        | x_6091 y_6092 =>
          match ((sub_18) x_6091 ((pred_16) y_6092)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_6094) => (succ_7‹› ((loop_6088) n_6094 y_6092))
      in ((loop_6087) x_6084 y_6085)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_6097 : nat_5 -> nat_5 -> nat_5
  | x_6100 y_6101 =>
    ((sub_18) x_6100 ((mul_19) ((div_20) x_6100 y_6101) y_6101))

#[program]
inductive list_6‹s_6102,t_6103› (A_6104 : Type‹s_6102›):
  Type‹t_6103›
where
| nil_8 : (list_6‹s_6102,t_6103› A_6104)
| cons_9
    (hd_6105 : A_6104) (tl_6106 : (list_6‹s_6102,t_6103› A_6104))
    : (list_6‹s_6102,t_6103› A_6104)

#[program]
def free_list_22‹s_6107,t_6108› :
  ∀ {A_6109 : Type‹s_6107›} ->
    A_6109 -> unit_3 -> (list_6‹s_6107,t_6108› A_6109) -> unit_3
:=
  fun free_list_6113 :
    ∀ {A_6114 : Type‹s_6107›} ->
      A_6114 -> unit_3 -> (list_6‹s_6107,t_6108› A_6114) -> unit_3
  | A_6118 f_6119 nil_8 => tt_3
  | A_6120 f_6121 (cons_9 hd_6122 tl_6123) =>
    let __6124 := ((f_6121) hd_6122) in
    ((free_list_6113) A_6120 f_6121 tl_6123)

#[program]
inductive exists0_7‹s_6125,r_6126› (A_6127 : Type‹s_6125›) (B_6128 : 
A_6127 -> Type‹r_6126›): L where
| ex0_10
    {m_6130 : A_6127} (n_6131 : ((B_6128) m_6130))
    : (exists0_7‹s_6125,r_6126› A_6127 B_6128)

#[program]
inductive exists1_8‹s_6132,r_6133› (A_6134 : Type‹s_6132›) (B_6135 : 
A_6134 -> Type‹r_6133›): L where
| ex1_11
    (m_6137 : A_6134) (n_6138 : ((B_6135) m_6137))
    : (exists1_8‹s_6132,r_6133› A_6134 B_6135)

#[logical]
def prod0_23‹s_6139,r_6140› : Type‹s_6139› -> Type‹r_6140› -> L
:=
  fun prod0_6143 : Type‹s_6139› -> Type‹r_6140› -> L
  | A_6146 B_6147 =>
    (exists0_7‹s_6139,r_6140›
      A_6146 fun _6148 : A_6146 -> Type‹r_6140›
             | __6150 => B_6147)

#[logical]
def prod1_24‹s_6151,r_6152› : Type‹s_6151› -> Type‹r_6152› -> L
:=
  fun prod1_6155 : Type‹s_6151› -> Type‹r_6152› -> L
  | A_6158 B_6159 =>
    (exists1_8‹s_6151,r_6152›
      A_6158 fun _6160 : A_6158 -> Type‹r_6152›
             | __6162 => B_6159)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_6165 : int -> int -> int
  | x_6168 y_6169 =>
    let loop_6170 :=
      fun loop_6171 : int -> int -> int
      | acc_6174 y_6175 =>
        match (__lte__ y_6175 0) in bool_4 -o int with
        | true_4 => acc_6174
        | false_5 =>
          ((loop_6171) (__mul__ x_6168 acc_6174) (__sub__ y_6175 1))
    in ((loop_6170) 1 y_6169)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_6180 : int -> int -> int -> int
  | x_6184 y_6185 m_6186 =>
    let loop_6187 :=
      fun loop_6188 : int -> int -> int
      | acc_6191 y_6192 =>
        match (__lte__ y_6192 0) in bool_4 -o int with
        | true_4 => acc_6191
        | false_5 =>
          ((loop_6188)
            (__mod__ (__mul__ x_6184 acc_6191) m_6186) (__sub__ y_6192 1))
    in ((loop_6187) 1 y_6185)

#[program]
def ord_27‹› : char -> int :=
  fun ord_6195 : char -> int
  | c_6197 => (__ord__ c_6197)

#[program]
def chr_28‹› : int -> char :=
  fun chr_6199 : int -> char
  | i_6201 => (__chr__ i_6201)

#[program]
def str_29‹› : char -> string :=
  fun str_6203 : char -> string
  | c_6205 => (__push__ "" c_6205)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_6207 : string -> int
  | s_6209 => (__size__ s_6209)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_6211 : int -> string
  | i_6213 =>
    let aux_6214 :=
      fun aux_6215 : int -> string
      | i_6217 =>
        match (__lte__ 10 i_6217) in bool_4 -o string with
        | true_4 =>
          let r_6219 := (__mod__ i_6217 10) in
          let i_6220 := (__div__ i_6217 10) in
          (__push__ ((aux_6215) i_6220)
            ((chr_28) (__add__ r_6219 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_6217 ((ord_27) 0))))
    in
    match (__lt__ 0 i_6213) in bool_4 -o string with
    | true_4 => ((aux_6214) i_6213)
    | false_5 => (__cat__ "~" ((aux_6214) (__neg__ i_6213)))

#[program]
def split_32‹t_6222› :
  (list_6‹U,t_6222› int) ->
    ((prod1_24‹t_6222,t_6222›)
      (list_6‹U,t_6222› int) (list_6‹U,t_6222› int))
:=
  fun split_6224 :
    (list_6‹U,t_6222› int) ->
      ((prod1_24‹t_6222,t_6222›)
        (list_6‹U,t_6222› int) (list_6‹U,t_6222› int))
  | nil_8 =>
    (ex1_11‹t_6222,t_6222›
      (list_6‹U,t_6222› int)
      fun _6226 : (list_6‹U,t_6222› int) -> Type‹t_6222›
      | __6228 => (list_6‹U,t_6222› int) (nil_8‹U,t_6222› int)
      (nil_8‹U,t_6222› int))
  | (cons_9 hd_6229 nil_8) =>
    (ex1_11‹t_6222,t_6222›
      (list_6‹U,t_6222› int)
      fun _6230 : (list_6‹U,t_6222› int) -> Type‹t_6222›
      | __6232 => (list_6‹U,t_6222› int)
      (cons_9‹U,t_6222› int hd_6229 (nil_8‹U,t_6222› int))
      (nil_8‹U,t_6222› int))
  | (cons_9 hd_6233 (cons_9 hd_6234 tl_6235)) =>
    match ((split_6224) tl_6235) in
      ((prod1_24‹t_6222,t_6222›)
        (list_6‹U,t_6222› int) (list_6‹U,t_6222› int)) -o
        ((prod1_24‹t_6222,t_6222›)
          (list_6‹U,t_6222› int) (list_6‹U,t_6222› int))
    with
    | (ex1_11 m_6237 n_6238) =>
      (ex1_11‹t_6222,t_6222›
        (list_6‹U,t_6222› int)
        fun _6239 : (list_6‹U,t_6222› int) -> Type‹t_6222›
        | __6241 => (list_6‹U,t_6222› int)
        (cons_9‹U,t_6222› int hd_6233 m_6237)
        (cons_9‹U,t_6222› int hd_6234 n_6238))

#[program]
def merge_33‹t_6242› :
  (list_6‹U,t_6242› int) ->
    (list_6‹U,t_6242› int) -o (list_6‹U,t_6242› int)
:=
  fun merge_6245 :
    (list_6‹U,t_6242› int) ->
      (list_6‹U,t_6242› int) -o (list_6‹U,t_6242› int)
  | nil_8 __6248 => __6248
  | (cons_9 hd_6249 tl_6250) nil_8 =>
    (cons_9‹U,t_6242› int hd_6249 tl_6250)
  | (cons_9 hd_6251 tl_6252) (cons_9 hd_6253 tl_6254) =>
    match (__lte__ hd_6251 hd_6253) in bool_4 -o (list_6‹U,t_6242› int)
    with
    | true_4 =>
      (cons_9‹U,t_6242›
        int hd_6251
        ((merge_6245) tl_6252 (cons_9‹U,t_6242› int hd_6253 tl_6254)))
    | false_5 =>
      (cons_9‹U,t_6242›
        int hd_6253
        ((merge_6245) (cons_9‹U,t_6242› int hd_6251 tl_6252) tl_6254))

#[program]
def msort_34‹t_6256› :
  (list_6‹U,t_6256› int) -> (list_6‹U,t_6256› int)
:=
  fun msort_6258 : (list_6‹U,t_6256› int) -> (list_6‹U,t_6256› int)
  | nil_8 => (nil_8‹U,t_6256› int)
  | (cons_9 hd_6260 nil_8) =>
    (cons_9‹U,t_6256› int hd_6260 (nil_8‹U,t_6256› int))
  | (cons_9 hd_6261 (cons_9 hd_6262 tl_6263)) =>
    match ((split_32‹t_6256›)
            (cons_9‹U,t_6256›
              int hd_6261 (cons_9‹U,t_6256› int hd_6262 tl_6263))) in
      ((prod1_24‹t_6256,t_6256›)
        (list_6‹U,t_6256› int) (list_6‹U,t_6256› int)) -o
        (list_6‹U,t_6256› int)
    with
    | (ex1_11 m_6265 n_6266) =>
      ((merge_33‹t_6256›) ((msort_6258) m_6265) ((msort_6258) n_6266))

#[program]
def mklist_35‹t_6267› : int -> (list_6‹U,t_6267› int) :=
  fun mklist_6269 : int -> (list_6‹U,t_6267› int)
  | n_6271 =>
    match (__lte__ n_6271 0) in bool_4 -o (list_6‹U,t_6267› int) with
    | true_4 => (nil_8‹U,t_6267› int)
    | false_5 =>
      (cons_9‹U,t_6267› int n_6271 ((mklist_6269) (__sub__ n_6271 1)))

#[program]
def list_len_36‹t_6273› : (list_6‹U,t_6273› int) -> int :=
  fun list_len_6275 : (list_6‹U,t_6273› int) -> int
  | nil_8 => 0
  | (cons_9 hd_6277 tl_6278) => (__add__ 1 ((list_len_6275) tl_6278))

#[program]
def string_of_list_37‹t_6279› : (list_6‹U,t_6279› int) -> string :=
  fun string_of_list_6281 : (list_6‹U,t_6279› int) -> string
  | nil_8 => "nil"
  | (cons_9 hd_6283 tl_6284) =>
    (__cat__ (__cat__ ((string_of_int_31) hd_6283) " :: ")
      ((string_of_list_6281) tl_6284))

#[program]
def main_38‹› : IO unit_3 :=
  let test_6285 := ((mklist_35‹L›) 2000000) in
  let sorted_6286 := ((msort_34‹L›) test_6285) in
  let len_6287 := ((list_len_36‹L›) sorted_6286) in
  print ((string_of_int_31) len_6287)

-----------------------------------------

#[program]
def idU_40 := fun id_10233 (A_10234) -> (m_10235) ->
                m_10235

#[program]
def idL_39 := fun id_10236 (A_10237) -> (m_10238) ->
                m_10238

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_44 :=
  fun rwl_10239 {A_10240} -> {m_10241} -> {n_10242} -> {B_10243} ->
  {__10244} -> (__10245) ->
    match {NULL} with
    | reflU_13  => __10245
    end

#[program]
def rwlUL_43 :=
  fun rwl_10246 {A_10247} -> {m_10248} -> {n_10249} -> {B_10250} ->
  {__10251} -> (__10252) ->
    match {NULL} with
    | reflU_13  => __10252
    end

#[program]
def rwlLU_42 :=
  fun rwl_10253 {A_10254} -> {m_10255} -> {n_10256} -> {B_10257} ->
  {__10258} -> (__10259) ->
    match {NULL} with
    | reflL_12  => __10259
    end

#[program]
def rwlLL_41 :=
  fun rwl_10260 {A_10261} -> {m_10262} -> {n_10263} -> {B_10264} ->
  {__10265} -> (__10266) ->
    match {NULL} with
    | reflL_12  => __10266
    end

#[program]
def rwrUU_48 :=
  fun rwr_10267 {A_10268} -> {m_10269} -> {n_10270} -> {B_10271} ->
  {__10272} -> (__10273) ->
    match {NULL} with
    | reflU_13  => __10273
    end

#[program]
def rwrUL_47 :=
  fun rwr_10274 {A_10275} -> {m_10276} -> {n_10277} -> {B_10278} ->
  {__10279} -> (__10280) ->
    match {NULL} with
    | reflU_13  => __10280
    end

#[program]
def rwrLU_46 :=
  fun rwr_10281 {A_10282} -> {m_10283} -> {n_10284} -> {B_10285} ->
  {__10286} -> (__10287) ->
    match {NULL} with
    | reflL_12  => __10287
    end

#[program]
def rwrLL_45 :=
  fun rwr_10288 {A_10289} -> {m_10290} -> {n_10291} -> {B_10292} ->
  {__10293} -> (__10294) ->
    match {NULL} with
    | reflL_12  => __10294
    end

#[logical]
def congrUUU_56 := NULL

#[logical]
def congrUUL_55 := NULL

#[logical]
def congrULU_54 := NULL

#[logical]
def congrULL_53 := NULL

#[logical]
def congrLUU_52 := NULL

#[logical]
def congrLUL_51 := NULL

#[logical]
def congrLLU_50 := NULL

#[logical]
def congrLLL_49 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_58 := NULL

#[logical]
def ssingL_57 := NULL

#[program]
def sing_elimUU_62 :=
  fun sing_elim_10295 {A_10296} -> {x_10297} -> (__10298) ->
    match __10298 with
    | justUU_17 m_10299 => m_10299
    end

#[program]
def sing_elimUL_61 :=
  fun sing_elim_10300 {A_10301} -> {x_10302} -> (__10303) ->
    match __10303 with
    | justUL_16 m_10304 => m_10304
    end

#[program]
def sing_elimLU_60 :=
  fun sing_elim_10305 {A_10306} -> {x_10307} -> (__10308) ->
    match __10308 with
    
    end

#[program]
def sing_elimLL_59 :=
  fun sing_elim_10309 {A_10310} -> {x_10311} -> (__10312) ->
    match __10312 with
    | justLL_14 m_10313 => m_10313
    end

#[logical]
def sing_uniqUU_66 := NULL

#[logical]
def sing_uniqUL_65 := NULL

#[logical]
def sing_uniqLU_64 := NULL

#[logical]
def sing_uniqLL_63 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_10314 (__10315) ->
    match __10315 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_10316 (__10317) -> (__10318) ->
    match __10317 with
    | true_4  =>
      match __10318 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_10319 (__10320) -> (__10321) ->
    match __10320 with
    | true_4  => true_4
    | false_5  =>
      match __10321 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_10322 (__10323) -> (__10324) -o
    match __10323 with
    | true_4  =>
      match __10324 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __10324 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_10325 (__10326) -> (__10327) ->
    match __10326 with
    | zero_6  => true_4
    | succ_7 n_10328 =>
      match __10327 with
      | zero_6  => false_5 | succ_7 n_10329 => ((lte_10325) n_10328 n_10329)
      end
    end

#[program]
def lt_15 :=
  fun lt_10330 (x_10331) -> (y_10332) ->
    ((lte_14) (succ_7 x_10331) y_10332)

#[program]
def pred_16 :=
  fun pred_10333 (__10334) ->
    match __10334 with
    | zero_6  => zero_6 | succ_7 n_10335 => n_10335
    end

#[program]
def add_17 :=
  fun add_10336 (__10337) -> (__10338) ->
    match __10337 with
    | zero_6  => __10338
    | succ_7 n_10339 => (succ_7 ((add_10336) n_10339 __10338))
    end

#[program]
def sub_18 :=
  fun sub_10340 (__10341) -> (__10342) ->
    match __10342 with
    | zero_6  => __10341
    | succ_7 n_10343 => ((sub_10340) ((pred_16) __10341) n_10343)
    end

#[program]
def mul_19 :=
  fun mul_10344 (__10345) -> (__10346) ->
    match __10345 with
    | zero_6  => zero_6
    | succ_7 n_10347 => ((add_17) __10346 ((mul_10344) n_10347 __10346))
    end

#[program]
def div_20 :=
  fun div_10348 (x_10349) -> (y_10350) ->
    match ((lt_15) x_10349 y_10350) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10351 :=
        fun loop_10352 (x_10353) -> (y_10354) ->
          match ((sub_18) x_10353 ((pred_16) y_10354)) with
          | zero_6  => zero_6
          | succ_7 n_10355 => (succ_7 ((loop_10352) n_10355 y_10354))
          end
      in ((loop_10351) x_10349 y_10350)
    end

#[program]
def rem_21 :=
  fun rem_10356 (x_10357) -> (y_10358) ->
    ((sub_18) x_10357 ((mul_19) ((div_20) x_10357 y_10358) y_10358))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_70 :=
  fun free_list_10359 {A_10360} -> (f_10361) -> (__10362) ->
    match __10362 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10363 tl_10364 =>
      let __10365 := ((f_10361) hd_10363) in
      ((free_list_10359) NULL f_10361 tl_10364)
    end

#[program]
def free_listUL_69 :=
  fun free_list_10366 {A_10367} -> (f_10368) -> (__10369) ->
    match __10369 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10370 tl_10371 =>
      let __10372 := ((f_10368) hd_10370) in
      ((free_list_10366) NULL f_10368 tl_10371)
    end

#[program]
def free_listLL_67 :=
  fun free_list_10373 {A_10374} -> (f_10375) -> (__10376) ->
    match __10376 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10377 tl_10378 =>
      let __10379 := ((f_10375) hd_10377) in
      ((free_list_10373) NULL f_10375 tl_10378)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_74 := NULL

#[logical]
def prod0UL_73 := NULL

#[logical]
def prod0LU_72 := NULL

#[logical]
def prod0LL_71 := NULL

#[logical]
def prod1UU_78 := NULL

#[logical]
def prod1UL_77 := NULL

#[logical]
def prod1LU_76 := NULL

#[logical]
def prod1LL_75 := NULL

#[program]
def pow_25 :=
  fun pow_10380 (x_10381) -> (y_10382) ->
    let loop_10383 :=
      fun loop_10384 (acc_10385) -> (y_10386) ->
        match (__lte__ y_10386 0) with
        | true_4  => acc_10385
        | false_5  =>
          ((loop_10384) (__mul__ x_10381 acc_10385) (__sub__ y_10386 1))
        end
    in ((loop_10383) 1 y_10382)

#[program]
def powm_26 :=
  fun powm_10387 (x_10388) -> (y_10389) -> (m_10390) ->
    let loop_10391 :=
      fun loop_10392 (acc_10393) -> (y_10394) ->
        match (__lte__ y_10394 0) with
        | true_4  => acc_10393
        | false_5  =>
          ((loop_10392)
            (__mod__ (__mul__ x_10388 acc_10393) m_10390) (__sub__ y_10394 1))
        end
    in ((loop_10391) 1 y_10389)

#[program]
def ord_27 := fun ord_10395 (c_10396) ->
                (__ord__ c_10396)

#[program]
def chr_28 := fun chr_10397 (i_10398) ->
                (__chr__ i_10398)

#[program]
def str_29 := fun str_10399 (c_10400) ->
                (__push__ "" c_10400)

#[program]
def strlen_30 := fun strlen_10401 (s_10402) ->
                   (__size__ s_10402)

#[program]
def string_of_int_31 :=
  fun string_of_int_10403 (i_10404) ->
    let aux_10405 :=
      fun aux_10406 (i_10407) ->
        match (__lte__ 10 i_10407) with
        | true_4  =>
          let r_10408 := (__mod__ i_10407 10) in
          let i_10409 := (__div__ i_10407 10) in
          (__push__ ((aux_10406) i_10409)
            ((chr_28) (__add__ r_10408 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_10407 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10404) with
    | true_4  => ((aux_10405) i_10404)
    | false_5  => (__cat__ "~" ((aux_10405) (__neg__ i_10404)))
    end

#[program]
def splitU_80 :=
  fun split_10410 (__10411) ->
    match __10411 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_10412 tl_10413 =>
      match tl_10413 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10412 nilUU_24) nilUU_24)
      | consUU_25 hd_10414 tl_10415 =>
        match ((split_10410) tl_10415) with
        | ex1UU_33 m_10416 n_10417 =>
          (ex1UU_33
            (consUU_25 hd_10412 m_10416) (consUU_25 hd_10414 n_10417))
        end
      end
    end

#[program]
def splitL_79 :=
  fun split_10418 (__10419) ->
    match __10419 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_10420 tl_10421 =>
      match tl_10421 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10420 nilUL_22) nilUL_22)
      | consUL_23 hd_10422 tl_10423 =>
        match ((split_10418) tl_10423) with
        | ex1LL_30 m_10424 n_10425 =>
          (ex1LL_30
            (consUL_23 hd_10420 m_10424) (consUL_23 hd_10422 n_10425))
        end
      end
    end

#[program]
def mergeU_82 :=
  fun merge_10426 (__10427) -> (__10428) -o
    match __10427 with
    | nilUU_24  => __10428
    | consUU_25 hd_10429 tl_10430 =>
      match __10428 with
      | nilUU_24  => (consUU_25 hd_10429 tl_10430)
      | consUU_25 hd_10431 tl_10432 =>
        match (__lte__ hd_10429 hd_10431) with
        | true_4  =>
          (consUU_25
            hd_10429 ((merge_10426) tl_10430 (consUU_25 hd_10431 tl_10432)))
        | false_5  =>
          (consUU_25
            hd_10431 ((merge_10426) (consUU_25 hd_10429 tl_10430) tl_10432))
        end
      end
    end

#[program]
def mergeL_81 :=
  fun merge_10433 (__10434) -> (__10435) -o
    match __10434 with
    | nilUL_22  => __10435
    | consUL_23 hd_10436 tl_10437 =>
      match __10435 with
      | nilUL_22  => (consUL_23 hd_10436 tl_10437)
      | consUL_23 hd_10438 tl_10439 =>
        match (__lte__ hd_10436 hd_10438) with
        | true_4  =>
          (consUL_23
            hd_10436 ((merge_10433) tl_10437 (consUL_23 hd_10438 tl_10439)))
        | false_5  =>
          (consUL_23
            hd_10438 ((merge_10433) (consUL_23 hd_10436 tl_10437) tl_10439))
        end
      end
    end

#[program]
def msortU_84 :=
  fun msort_10440 (__10441) ->
    match __10441 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_10442 tl_10443 =>
      match tl_10443 with
      | nilUU_24  => (consUU_25 hd_10442 nilUU_24)
      | consUU_25 hd_10444 tl_10445 =>
        match ((splitU_80)
                (consUU_25 hd_10442 (consUU_25 hd_10444 tl_10445))) with
        | ex1UU_33 m_10446 n_10447 =>
          ((mergeU_82) ((msort_10440) m_10446) ((msort_10440) n_10447))
        end
      end
    end

#[program]
def msortL_83 :=
  fun msort_10448 (__10449) ->
    match __10449 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_10450 tl_10451 =>
      match tl_10451 with
      | nilUL_22  => (consUL_23 hd_10450 nilUL_22)
      | consUL_23 hd_10452 tl_10453 =>
        match ((splitL_79)
                (consUL_23 hd_10450 (consUL_23 hd_10452 tl_10453))) with
        | ex1LL_30 m_10454 n_10455 =>
          ((mergeL_81) ((msort_10448) m_10454) ((msort_10448) n_10455))
        end
      end
    end

#[program]
def mklistU_86 :=
  fun mklist_10456 (n_10457) ->
    match (__lte__ n_10457 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_10457 ((mklist_10456) (__sub__ n_10457 1)))
    end

#[program]
def mklistL_85 :=
  fun mklist_10458 (n_10459) ->
    match (__lte__ n_10459 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_10459 ((mklist_10458) (__sub__ n_10459 1)))
    end

#[program]
def list_lenU_88 :=
  fun list_len_10460 (__10461) ->
    match __10461 with
    | nilUU_24  => 0
    | consUU_25 hd_10462 tl_10463 => (__add__ 1 ((list_len_10460) tl_10463))
    end

#[program]
def list_lenL_87 :=
  fun list_len_10464 (__10465) ->
    match __10465 with
    | nilUL_22  => 0
    | consUL_23 hd_10466 tl_10467 => (__add__ 1 ((list_len_10464) tl_10467))
    end

#[program]
def string_of_listU_90 :=
  fun string_of_list_10468 (__10469) ->
    match __10469 with
    | nilUU_24  => "nil"
    | consUU_25 hd_10470 tl_10471 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_10470) " :: ")
        ((string_of_list_10468) tl_10471))
    end

#[program]
def string_of_listL_89 :=
  fun string_of_list_10472 (__10473) ->
    match __10473 with
    | nilUL_22  => "nil"
    | consUL_23 hd_10474 tl_10475 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_10474) " :: ")
        ((string_of_list_10472) tl_10475))
    end

#[program]
def main :=
  let test_10476 := ((mklistL_85) 2000000) in
  let sorted_10477 := ((msortL_83) test_10476) in
  let len_10478 := ((list_lenL_87) sorted_10477) in
  print ((string_of_int_31) len_10478)

-----------------------------------------

#[program]
def idU_40 := fun id_10725 (A_10726) -> (m_10727) ->
                m_10727

#[program]
def idL_39 := fun id_10728 (A_10729) -> (m_10730) ->
                m_10730

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_44 :=
  fun rwl_10731 {A_10732} -> {m_10733} -> {n_10734} -> {B_10735} ->
  {__10736} -> (__10737) ->
    __10737

#[program]
def rwlUL_43 :=
  fun rwl_10738 {A_10739} -> {m_10740} -> {n_10741} -> {B_10742} ->
  {__10743} -> (__10744) ->
    __10744

#[program]
def rwlLU_42 :=
  fun rwl_10745 {A_10746} -> {m_10747} -> {n_10748} -> {B_10749} ->
  {__10750} -> (__10751) ->
    __10751

#[program]
def rwlLL_41 :=
  fun rwl_10752 {A_10753} -> {m_10754} -> {n_10755} -> {B_10756} ->
  {__10757} -> (__10758) ->
    __10758

#[program]
def rwrUU_48 :=
  fun rwr_10759 {A_10760} -> {m_10761} -> {n_10762} -> {B_10763} ->
  {__10764} -> (__10765) ->
    __10765

#[program]
def rwrUL_47 :=
  fun rwr_10766 {A_10767} -> {m_10768} -> {n_10769} -> {B_10770} ->
  {__10771} -> (__10772) ->
    __10772

#[program]
def rwrLU_46 :=
  fun rwr_10773 {A_10774} -> {m_10775} -> {n_10776} -> {B_10777} ->
  {__10778} -> (__10779) ->
    __10779

#[program]
def rwrLL_45 :=
  fun rwr_10780 {A_10781} -> {m_10782} -> {n_10783} -> {B_10784} ->
  {__10785} -> (__10786) ->
    __10786

#[logical]
def congrUUU_56 := NULL

#[logical]
def congrUUL_55 := NULL

#[logical]
def congrULU_54 := NULL

#[logical]
def congrULL_53 := NULL

#[logical]
def congrLUU_52 := NULL

#[logical]
def congrLUL_51 := NULL

#[logical]
def congrLLU_50 := NULL

#[logical]
def congrLLL_49 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_58 := NULL

#[logical]
def ssingL_57 := NULL

#[program]
def sing_elimUU_62 :=
  fun sing_elim_10787 {A_10788} -> {x_10789} -> (__10790) ->
    match __10790 with
    | justUU_17 m_10791 => m_10791
    end

#[program]
def sing_elimUL_61 :=
  fun sing_elim_10792 {A_10793} -> {x_10794} -> (__10795) ->
    match __10795 with
    | justUL_16 m_10796 => m_10796
    end

#[program]
def sing_elimLU_60 :=
  fun sing_elim_10797 {A_10798} -> {x_10799} -> (__10800) ->
    !!

#[program]
def sing_elimLL_59 :=
  fun sing_elim_10801 {A_10802} -> {x_10803} -> (__10804) ->
    match __10804 with
    | justLL_14 m_10805 => m_10805
    end

#[logical]
def sing_uniqUU_66 := NULL

#[logical]
def sing_uniqUL_65 := NULL

#[logical]
def sing_uniqLU_64 := NULL

#[logical]
def sing_uniqLL_63 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_10806 (__10807) ->
    match __10807 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_10808 (__10809) -> (__10810) ->
    match __10809 with
    | true_4  =>
      match __10810 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_10811 (__10812) -> (__10813) ->
    match __10812 with
    | true_4  => true_4
    | false_5  =>
      match __10813 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_10814 (__10815) -> (__10816) -o
    match __10815 with
    | true_4  =>
      match __10816 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __10816 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_10817 (__10818) -> (__10819) ->
    match __10818 with
    | zero_6  => true_4
    | succ_7 n_10820 =>
      match __10819 with
      | zero_6  => false_5 | succ_7 n_10821 => ((lte_10817) n_10820 n_10821)
      end
    end

#[program]
def lt_15 :=
  fun lt_10822 (x_10823) -> (y_10824) ->
    ((lte_14) (succ_7 x_10823) y_10824)

#[program]
def pred_16 :=
  fun pred_10825 (__10826) ->
    match __10826 with
    | zero_6  => zero_6 | succ_7 n_10827 => n_10827
    end

#[program]
def add_17 :=
  fun add_10828 (__10829) -> (__10830) ->
    match __10829 with
    | zero_6  => __10830
    | succ_7 n_10831 => (succ_7 ((add_10828) n_10831 __10830))
    end

#[program]
def sub_18 :=
  fun sub_10832 (__10833) -> (__10834) ->
    match __10834 with
    | zero_6  => __10833
    | succ_7 n_10835 => ((sub_10832) ((pred_16) __10833) n_10835)
    end

#[program]
def mul_19 :=
  fun mul_10836 (__10837) -> (__10838) ->
    match __10837 with
    | zero_6  => zero_6
    | succ_7 n_10839 => ((add_17) __10838 ((mul_10836) n_10839 __10838))
    end

#[program]
def div_20 :=
  fun div_10840 (x_10841) -> (y_10842) ->
    match ((lt_15) x_10841 y_10842) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10843 :=
        fun loop_10844 (x_10845) -> (y_10846) ->
          match ((sub_18) x_10845 ((pred_16) y_10846)) with
          | zero_6  => zero_6
          | succ_7 n_10847 => (succ_7 ((loop_10844) n_10847 y_10846))
          end
      in ((loop_10843) x_10841 y_10842)
    end

#[program]
def rem_21 :=
  fun rem_10848 (x_10849) -> (y_10850) ->
    ((sub_18) x_10849 ((mul_19) ((div_20) x_10849 y_10850) y_10850))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_70 :=
  fun free_list_10851 {A_10852} -> (f_10853) -> (__10854) ->
    match __10854 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10855 tl_10856 =>
      let __10857 := ((f_10853) hd_10855) in
      ((free_list_10851) NULL f_10853 tl_10856)
    end

#[program]
def free_listUL_69 :=
  fun free_list_10858 {A_10859} -> (f_10860) -> (__10861) ->
    match __10861 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10862 tl_10863 =>
      let __10864 := ((f_10860) hd_10862) in
      ((free_list_10858) NULL f_10860 tl_10863)
    end

#[program]
def free_listLL_67 :=
  fun free_list_10865 {A_10866} -> (f_10867) -> (__10868) ->
    match __10868 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10869 tl_10870 =>
      let __10871 := ((f_10867) hd_10869) in
      ((free_list_10865) NULL f_10867 tl_10870)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_74 := NULL

#[logical]
def prod0UL_73 := NULL

#[logical]
def prod0LU_72 := NULL

#[logical]
def prod0LL_71 := NULL

#[logical]
def prod1UU_78 := NULL

#[logical]
def prod1UL_77 := NULL

#[logical]
def prod1LU_76 := NULL

#[logical]
def prod1LL_75 := NULL

#[program]
def pow_25 :=
  fun pow_10872 (x_10873) -> (y_10874) ->
    let loop_10875 :=
      fun loop_10876 (acc_10877) -> (y_10878) ->
        match (__lte__ y_10878 0) with
        | true_4  => acc_10877
        | false_5  =>
          ((loop_10876) (__mul__ x_10873 acc_10877) (__sub__ y_10878 1))
        end
    in ((loop_10875) 1 y_10874)

#[program]
def powm_26 :=
  fun powm_10879 (x_10880) -> (y_10881) -> (m_10882) ->
    let loop_10883 :=
      fun loop_10884 (acc_10885) -> (y_10886) ->
        match (__lte__ y_10886 0) with
        | true_4  => acc_10885
        | false_5  =>
          ((loop_10884)
            (__mod__ (__mul__ x_10880 acc_10885) m_10882) (__sub__ y_10886 1))
        end
    in ((loop_10883) 1 y_10881)

#[program]
def ord_27 := fun ord_10887 (c_10888) ->
                (__ord__ c_10888)

#[program]
def chr_28 := fun chr_10889 (i_10890) ->
                (__chr__ i_10890)

#[program]
def str_29 := fun str_10891 (c_10892) ->
                (__push__ "" c_10892)

#[program]
def strlen_30 := fun strlen_10893 (s_10894) ->
                   (__size__ s_10894)

#[program]
def string_of_int_31 :=
  fun string_of_int_10895 (i_10896) ->
    let aux_10897 :=
      fun aux_10898 (i_10899) ->
        match (__lte__ 10 i_10899) with
        | true_4  =>
          let r_10900 := (__mod__ i_10899 10) in
          let i_10901 := (__div__ i_10899 10) in
          (__push__ ((aux_10898) i_10901)
            ((chr_28) (__add__ r_10900 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_10899 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10896) with
    | true_4  => ((aux_10897) i_10896)
    | false_5  => (__cat__ "~" ((aux_10897) (__neg__ i_10896)))
    end

#[program]
def splitU_80 :=
  fun split_10902 (__10903) ->
    match __10903 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_10904 tl_10905 =>
      match tl_10905 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10904 nilUU_24) nilUU_24)
      | consUU_25 hd_10906 tl_10907 =>
        match ((split_10902) tl_10907) with
        | ex1UU_33 m_10908 n_10909 =>
          (ex1UU_33
            (consUU_25 hd_10904 m_10908) (consUU_25 hd_10906 n_10909))
        end
      end
    end

#[program]
def splitL_79 :=
  fun split_10910 (__10911) ->
    match __10911 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_10912 tl_10913 =>
      match tl_10913 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10912 nilUL_22) nilUL_22)
      | consUL_23 hd_10914 tl_10915 =>
        match ((split_10910) tl_10915) with
        | ex1LL_30 m_10916 n_10917 =>
          (ex1LL_30
            (consUL_23 hd_10912 m_10916) (consUL_23 hd_10914 n_10917))
        end
      end
    end

#[program]
def mergeU_82 :=
  fun merge_10918 (__10919) -> (__10920) -o
    match __10919 with
    | nilUU_24  => __10920
    | consUU_25 hd_10921 tl_10922 =>
      match __10920 with
      | nilUU_24  => (consUU_25 hd_10921 tl_10922)
      | consUU_25 hd_10923 tl_10924 =>
        match (__lte__ hd_10921 hd_10923) with
        | true_4  =>
          (consUU_25
            hd_10921 ((merge_10918) tl_10922 (consUU_25 hd_10923 tl_10924)))
        | false_5  =>
          (consUU_25
            hd_10923 ((merge_10918) (consUU_25 hd_10921 tl_10922) tl_10924))
        end
      end
    end

#[program]
def mergeL_81 :=
  fun merge_10925 (__10926) -> (__10927) -o
    match __10926 with
    | nilUL_22  => __10927
    | consUL_23 hd_10928 tl_10929 =>
      match __10927 with
      | nilUL_22  => (consUL_23 hd_10928 tl_10929)
      | consUL_23 hd_10930 tl_10931 =>
        match (__lte__ hd_10928 hd_10930) with
        | true_4  =>
          (consUL_23
            hd_10928 ((merge_10925) tl_10929 (consUL_23 hd_10930 tl_10931)))
        | false_5  =>
          (consUL_23
            hd_10930 ((merge_10925) (consUL_23 hd_10928 tl_10929) tl_10931))
        end
      end
    end

#[program]
def msortU_84 :=
  fun msort_10932 (__10933) ->
    match __10933 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_10934 tl_10935 =>
      match tl_10935 with
      | nilUU_24  => (consUU_25 hd_10934 nilUU_24)
      | consUU_25 hd_10936 tl_10937 =>
        match ((splitU_80)
                (consUU_25 hd_10934 (consUU_25 hd_10936 tl_10937))) with
        | ex1UU_33 m_10938 n_10939 =>
          ((mergeU_82) ((msort_10932) m_10938) ((msort_10932) n_10939))
        end
      end
    end

#[program]
def msortL_83 :=
  fun msort_10940 (__10941) ->
    match __10941 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_10942 tl_10943 =>
      match tl_10943 with
      | nilUL_22  => (consUL_23 hd_10942 nilUL_22)
      | consUL_23 hd_10944 tl_10945 =>
        match ((splitL_79)
                (consUL_23 hd_10942 (consUL_23 hd_10944 tl_10945))) with
        | ex1LL_30 m_10946 n_10947 =>
          ((mergeL_81) ((msort_10940) m_10946) ((msort_10940) n_10947))
        end
      end
    end

#[program]
def mklistU_86 :=
  fun mklist_10948 (n_10949) ->
    match (__lte__ n_10949 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_10949 ((mklist_10948) (__sub__ n_10949 1)))
    end

#[program]
def mklistL_85 :=
  fun mklist_10950 (n_10951) ->
    match (__lte__ n_10951 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_10951 ((mklist_10950) (__sub__ n_10951 1)))
    end

#[program]
def list_lenU_88 :=
  fun list_len_10952 (__10953) ->
    match __10953 with
    | nilUU_24  => 0
    | consUU_25 hd_10954 tl_10955 => (__add__ 1 ((list_len_10952) tl_10955))
    end

#[program]
def list_lenL_87 :=
  fun list_len_10956 (__10957) ->
    match __10957 with
    | nilUL_22  => 0
    | consUL_23 hd_10958 tl_10959 => (__add__ 1 ((list_len_10956) tl_10959))
    end

#[program]
def string_of_listU_90 :=
  fun string_of_list_10960 (__10961) ->
    match __10961 with
    | nilUU_24  => "nil"
    | consUU_25 hd_10962 tl_10963 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_10962) " :: ")
        ((string_of_list_10960) tl_10963))
    end

#[program]
def string_of_listL_89 :=
  fun string_of_list_10964 (__10965) ->
    match __10965 with
    | nilUL_22  => "nil"
    | consUL_23 hd_10966 tl_10967 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_10966) " :: ")
        ((string_of_list_10964) tl_10967))
    end

#[program]
def main :=
  let test_10968 := ((mklistL_85) 2000000) in
  let sorted_10969 := ((msortL_83) test_10968) in
  let len_10970 := ((list_lenL_87) sorted_10969) in
  print ((string_of_int_31) len_10970)

-----------------------------------------

def idU_40 := fun id_11217 (A_11218) -> (m_11219) -> m_11219

def idL_39 := fun id_11220 (A_11221) -> (m_11222) -> m_11222

def rwlUU_44 :=
  fun rwl_11223 (A_11224) -> (m_11225) -> (n_11226) -> (B_11227) ->
  (__11228) -> (__11229) -> __11229

def rwlUL_43 :=
  fun rwl_11230 (A_11231) -> (m_11232) -> (n_11233) -> (B_11234) ->
  (__11235) -> (__11236) -> __11236

def rwlLU_42 :=
  fun rwl_11237 (A_11238) -> (m_11239) -> (n_11240) -> (B_11241) ->
  (__11242) -> (__11243) -> __11243

def rwlLL_41 :=
  fun rwl_11244 (A_11245) -> (m_11246) -> (n_11247) -> (B_11248) ->
  (__11249) -> (__11250) -> __11250

def rwrUU_48 :=
  fun rwr_11251 (A_11252) -> (m_11253) -> (n_11254) -> (B_11255) ->
  (__11256) -> (__11257) -> __11257

def rwrUL_47 :=
  fun rwr_11258 (A_11259) -> (m_11260) -> (n_11261) -> (B_11262) ->
  (__11263) -> (__11264) -> __11264

def rwrLU_46 :=
  fun rwr_11265 (A_11266) -> (m_11267) -> (n_11268) -> (B_11269) ->
  (__11270) -> (__11271) -> __11271

def rwrLL_45 :=
  fun rwr_11272 (A_11273) -> (m_11274) -> (n_11275) -> (B_11276) ->
  (__11277) -> (__11278) -> __11278

def sing_elimUU_62 :=
  fun sing_elim_11279 (A_11280) -> (x_11281) -> (__11282) -> __11282

def sing_elimUL_61 :=
  fun sing_elim_11283 (A_11284) -> (x_11285) -> (__11286) -> __11286

def sing_elimLU_60 :=
  fun sing_elim_11287 (A_11288) -> (x_11289) -> (__11290) -> !!

def sing_elimLL_59 :=
  fun sing_elim_11291 (A_11292) -> (x_11293) -> (__11294) -> __11294

def not_10 :=
  fun not_11295 (__11296) ->
    match __11296 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_11297 (__11298) -> (__11299) ->
    match __11298 with
    | true_4 =>
      match __11299 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_11300 (__11301) -> (__11302) ->
    match __11301 with
    | true_4 => true_4
    | false_5 =>
      match __11302 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_11303 (__11304) -> (__11305) -o
    match __11304 with
    | true_4 =>
      match __11305 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __11305 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_11306 (__11307) -> (__11308) ->
    match __11307 with
    | zero_6  => true_4
    | succ_7 n_11309 =>
      match __11308 with
      | zero_6  => false_5 | succ_7 n_11310 => ((lte_11306) n_11309 n_11310)
      end
    end

def lt_15 :=
  fun lt_11311 (x_11312) -> (y_11313) -> ((lte_14) (succ_7 x_11312) y_11313)

def pred_16 :=
  fun pred_11314 (__11315) ->
    match __11315 with
    | zero_6  => (zero_6 ) | succ_7 n_11316 => n_11316
    end

def add_17 :=
  fun add_11317 (__11318) -> (__11319) ->
    match __11318 with
    | zero_6  => __11319
    | succ_7 n_11320 => (succ_7 ((add_11317) n_11320 __11319))
    end

def sub_18 :=
  fun sub_11321 (__11322) -> (__11323) ->
    match __11323 with
    | zero_6  => __11322
    | succ_7 n_11324 => ((sub_11321) ((pred_16) __11322) n_11324)
    end

def mul_19 :=
  fun mul_11325 (__11326) -> (__11327) ->
    match __11326 with
    | zero_6  => (zero_6 )
    | succ_7 n_11328 => ((add_17) __11327 ((mul_11325) n_11328 __11327))
    end

def div_20 :=
  fun div_11329 (x_11330) -> (y_11331) ->
    match ((lt_15) x_11330 y_11331) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_11332 :=
        fun loop_11333 (x_11334) -> (y_11335) ->
          match ((sub_18) x_11334 ((pred_16) y_11335)) with
          | zero_6  => (zero_6 )
          | succ_7 n_11336 => (succ_7 ((loop_11333) n_11336 y_11335))
          end
      in ((loop_11332) x_11330 y_11331)
    end

def rem_21 :=
  fun rem_11337 (x_11338) -> (y_11339) ->
    ((sub_18) x_11338 ((mul_19) ((div_20) x_11338 y_11339) y_11339))

def free_listUU_70 :=
  fun free_list_11340 (A_11341) -> (f_11342) -> (__11343) ->
    match __11343 with
    | nilUU_24  => tt_3
    | consUU_25 hd_11344 tl_11345 =>
      let __11346 := ((f_11342) hd_11344) in
      ((free_list_11340) NULL f_11342 tl_11345)
    end

def free_listUL_69 :=
  fun free_list_11347 (A_11348) -> (f_11349) -> (__11350) ->
    match __11350 with
    | nilUL_22  => tt_3
    | consUL_23 hd_11351 tl_11352 =>
      let __11353 := ((f_11349) hd_11351) in
      ((free_list_11347) NULL f_11349 tl_11352)
    end

def free_listLL_67 :=
  fun free_list_11354 (A_11355) -> (f_11356) -> (__11357) ->
    match __11357 with
    | nilLL_18  => tt_3
    | consLL_19 hd_11358 tl_11359 =>
      let __11360 := ((f_11356) hd_11358) in
      ((free_list_11354) NULL f_11356 tl_11359)
    end

def pow_25 :=
  fun pow_11361 (x_11362) -> (y_11363) ->
    let loop_11364 :=
      fun loop_11365 (acc_11366) -> (y_11367) ->
        match (__lte__ y_11367 0) with
        | true_4 => acc_11366
        | false_5 =>
          ((loop_11365) (__mul__ x_11362 acc_11366) (__sub__ y_11367 1))
        end
    in ((loop_11364) 1 y_11363)

def powm_26 :=
  fun powm_11368 (x_11369) -> (y_11370) -> (m_11371) ->
    let loop_11372 :=
      fun loop_11373 (acc_11374) -> (y_11375) ->
        match (__lte__ y_11375 0) with
        | true_4 => acc_11374
        | false_5 =>
          ((loop_11373)
            (__mod__ (__mul__ x_11369 acc_11374) m_11371) (__sub__ y_11375 1))
        end
    in ((loop_11372) 1 y_11370)

def ord_27 := fun ord_11376 (c_11377) -> (__ord__ c_11377)

def chr_28 := fun chr_11378 (i_11379) -> (__chr__ i_11379)

def str_29 := fun str_11380 (c_11381) -> (__push__ "" c_11381)

def strlen_30 := fun strlen_11382 (s_11383) -> (__size__ s_11383)

def string_of_int_31 :=
  fun string_of_int_11384 (i_11385) ->
    let aux_11386 :=
      fun aux_11387 (i_11388) ->
        match (__lte__ 10 i_11388) with
        | true_4 =>
          let r_11389 := (__mod__ i_11388 10) in
          let i_11390 := (__div__ i_11388 10) in
          (__push__ ((aux_11387) i_11390)
            ((chr_28) (__add__ r_11389 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_11388 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_11385) with
    | true_4 => ((aux_11386) i_11385)
    | false_5 => (__cat__ "~" ((aux_11386) (__neg__ i_11385)))
    end

def splitU_80 :=
  fun split_11391 (__11392) ->
    match __11392 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_11393 tl_11394 =>
      match tl_11394 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_11393 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_11395 tl_11396 =>
        match ((split_11391) tl_11396) with
        | ex1UU_33 m_11397 n_11398 =>
          (ex1UU_33
            (consUU_25 hd_11393 m_11397) (consUU_25 hd_11395 n_11398))
        end
      end
    end

def splitL_79 :=
  fun split_11399 (__11400) ->
    match __11400 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_11401 tl_11402 =>
      match tl_11402 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_11401 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_11403 tl_11404 =>
        match ((split_11399) tl_11404) with
        | ex1LL_30 m_11405 n_11406 =>
          (ex1LL_30
            (consUL_23 hd_11401 m_11405) (consUL_23 hd_11403 n_11406))
        end
      end
    end

def mergeU_82 :=
  fun merge_11407 (__11408) -> (__11409) -o
    match __11408 with
    | nilUU_24  => __11409
    | consUU_25 hd_11410 tl_11411 =>
      match __11409 with
      | nilUU_24  => (consUU_25 hd_11410 tl_11411)
      | consUU_25 hd_11412 tl_11413 =>
        match (__lte__ hd_11410 hd_11412) with
        | true_4 =>
          (consUU_25
            hd_11410 ((merge_11407) tl_11411 (consUU_25 hd_11412 tl_11413)))
        | false_5 =>
          (consUU_25
            hd_11412 ((merge_11407) (consUU_25 hd_11410 tl_11411) tl_11413))
        end
      end
    end

def mergeL_81 :=
  fun merge_11414 (__11415) -> (__11416) -o
    match __11415 with
    | nilUL_22  => __11416
    | consUL_23 hd_11417 tl_11418 =>
      match __11416 with
      | nilUL_22  => (consUL_23 hd_11417 tl_11418)
      | consUL_23 hd_11419 tl_11420 =>
        match (__lte__ hd_11417 hd_11419) with
        | true_4 =>
          (consUL_23
            hd_11417 ((merge_11414) tl_11418 (consUL_23 hd_11419 tl_11420)))
        | false_5 =>
          (consUL_23
            hd_11419 ((merge_11414) (consUL_23 hd_11417 tl_11418) tl_11420))
        end
      end
    end

def msortU_84 :=
  fun msort_11421 (__11422) ->
    match __11422 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_11423 tl_11424 =>
      match tl_11424 with
      | nilUU_24  => (consUU_25 hd_11423 (nilUU_24 ))
      | consUU_25 hd_11425 tl_11426 =>
        match ((splitU_80)
                (consUU_25 hd_11423 (consUU_25 hd_11425 tl_11426))) with
        | ex1UU_33 m_11427 n_11428 =>
          ((mergeU_82) ((msort_11421) m_11427) ((msort_11421) n_11428))
        end
      end
    end

def msortL_83 :=
  fun msort_11429 (__11430) ->
    match __11430 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_11431 tl_11432 =>
      match tl_11432 with
      | nilUL_22  => (consUL_23 hd_11431 (nilUL_22 ))
      | consUL_23 hd_11433 tl_11434 =>
        match ((splitL_79)
                (consUL_23 hd_11431 (consUL_23 hd_11433 tl_11434))) with
        | ex1LL_30 m_11435 n_11436 =>
          ((mergeL_81) ((msort_11429) m_11435) ((msort_11429) n_11436))
        end
      end
    end

def mklistU_86 :=
  fun mklist_11437 (n_11438) ->
    match (__lte__ n_11438 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_11438 ((mklist_11437) (__sub__ n_11438 1)))
    end

def mklistL_85 :=
  fun mklist_11439 (n_11440) ->
    match (__lte__ n_11440 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_11440 ((mklist_11439) (__sub__ n_11440 1)))
    end

def list_lenU_88 :=
  fun list_len_11441 (__11442) ->
    match __11442 with
    | nilUU_24  => 0
    | consUU_25 hd_11443 tl_11444 => (__add__ 1 ((list_len_11441) tl_11444))
    end

def list_lenL_87 :=
  fun list_len_11445 (__11446) ->
    match __11446 with
    | nilUL_22  => 0
    | consUL_23 hd_11447 tl_11448 => (__add__ 1 ((list_len_11445) tl_11448))
    end

def string_of_listU_90 :=
  fun string_of_list_11449 (__11450) ->
    match __11450 with
    | nilUU_24  => "nil"
    | consUU_25 hd_11451 tl_11452 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_11451) " :: ")
        ((string_of_list_11449) tl_11452))
    end

def string_of_listL_89 :=
  fun string_of_list_11453 (__11454) ->
    match __11454 with
    | nilUL_22  => "nil"
    | consUL_23 hd_11455 tl_11456 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_11455) " :: ")
        ((string_of_list_11453) tl_11456))
    end

def main :=
  let test_11457 := ((mklistL_85) 2000000) in
  let sorted_11458 := ((msortL_83) test_11457) in
  let len_11459 := ((list_lenL_87) sorted_11458) in
  lazy(print ((string_of_int_31) len_11459))

-----------------------------------------

def idU_40 := lam (A_11703) -> (m_11704) -> m_11704

def idL_39 := lam (A_11705) -> (m_11706) -> m_11706

def rwlUU_44 :=
  lam (A_11707) -> (m_11708) -> (n_11709) -> (B_11710) -> (__11711) ->
  (__11712) -> __11712

def rwlUL_43 :=
  lam (A_11713) -> (m_11714) -> (n_11715) -> (B_11716) -> (__11717) ->
  (__11718) -> __11718

def rwlLU_42 :=
  lam (A_11719) -> (m_11720) -> (n_11721) -> (B_11722) -> (__11723) ->
  (__11724) -> __11724

def rwlLL_41 :=
  lam (A_11725) -> (m_11726) -> (n_11727) -> (B_11728) -> (__11729) ->
  (__11730) -> __11730

def rwrUU_48 :=
  lam (A_11731) -> (m_11732) -> (n_11733) -> (B_11734) -> (__11735) ->
  (__11736) -> __11736

def rwrUL_47 :=
  lam (A_11737) -> (m_11738) -> (n_11739) -> (B_11740) -> (__11741) ->
  (__11742) -> __11742

def rwrLU_46 :=
  lam (A_11743) -> (m_11744) -> (n_11745) -> (B_11746) -> (__11747) ->
  (__11748) -> __11748

def rwrLL_45 :=
  lam (A_11749) -> (m_11750) -> (n_11751) -> (B_11752) -> (__11753) ->
  (__11754) -> __11754

def sing_elimUU_62 := lam (A_11755) -> (x_11756) -> (__11757) -> __11757

def sing_elimUL_61 := lam (A_11758) -> (x_11759) -> (__11760) -> __11760

def sing_elimLU_60 := lam (A_11761) -> (x_11762) -> (__11763) -> !!

def sing_elimLL_59 := lam (A_11764) -> (x_11765) -> (__11766) -> __11766

def not_10 :=
  lam (__11767) ->
    match __11767 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__11768) -> (__11769) ->
    match __11768 with
    | true_4 =>
      match __11769 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__11770) -> (__11771) ->
    match __11770 with
    | true_4 => true_4
    | false_5 =>
      match __11771 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__11772) -> (__11773) -o
    match __11772 with
    | true_4 =>
      match __11773 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __11773 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_11774 (__11775) -> (__11776) ->
    match __11775 with
    | zero_6  => true_4
    | succ_7 n_11777 =>
      match __11776 with
      | zero_6  => false_5 | succ_7 n_11778 => ((lte_11774) n_11777 n_11778)
      end
    end

def lt_15 :=
  lam (x_11779) -> (y_11780) -> ((lte_14) (succ_7 x_11779) y_11780)

def pred_16 :=
  lam (__11781) ->
    match __11781 with
    | zero_6  => (zero_6 ) | succ_7 n_11782 => n_11782
    end

def add_17 :=
  fun add_11783 (__11784) -> (__11785) ->
    match __11784 with
    | zero_6  => __11785
    | succ_7 n_11786 => (succ_7 ((add_11783) n_11786 __11785))
    end

def sub_18 :=
  fun sub_11787 (__11788) -> (__11789) ->
    match __11789 with
    | zero_6  => __11788
    | succ_7 n_11790 => ((sub_11787) ((pred_16) __11788) n_11790)
    end

def mul_19 :=
  fun mul_11791 (__11792) -> (__11793) ->
    match __11792 with
    | zero_6  => (zero_6 )
    | succ_7 n_11794 => ((add_17) __11793 ((mul_11791) n_11794 __11793))
    end

def div_20 :=
  lam (x_11795) -> (y_11796) ->
    match ((lt_15) x_11795 y_11796) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_11797 :=
        fun loop_11798 (x_11799) -> (y_11800) ->
          match ((sub_18) x_11799 ((pred_16) y_11800)) with
          | zero_6  => (zero_6 )
          | succ_7 n_11801 => (succ_7 ((loop_11798) n_11801 y_11800))
          end
      in ((loop_11797) x_11795 y_11796)
    end

def rem_21 :=
  lam (x_11802) -> (y_11803) ->
    ((sub_18) x_11802 ((mul_19) ((div_20) x_11802 y_11803) y_11803))

def free_listUU_70 :=
  fun free_list_11804 (A_11805) -> (f_11806) -> (__11807) ->
    match __11807 with
    | nilUU_24  => tt_3
    | consUU_25 hd_11808 tl_11809 =>
      let __11810 := ((f_11806) hd_11808) in
      ((free_list_11804) NULL f_11806 tl_11809)
    end

def free_listUL_69 :=
  fun free_list_11811 (A_11812) -> (f_11813) -> (__11814) ->
    match __11814 with
    | nilUL_22  => tt_3
    | consUL_23 hd_11815 tl_11816 =>
      let __11817 := ((f_11813) hd_11815) in
      ((free_list_11811) NULL f_11813 tl_11816)
    end

def free_listLL_67 :=
  fun free_list_11818 (A_11819) -> (f_11820) -> (__11821) ->
    match __11821 with
    | nilLL_18  => tt_3
    | consLL_19 hd_11822 tl_11823 =>
      let __11824 := ((f_11820) hd_11822) in
      ((free_list_11818) NULL f_11820 tl_11823)
    end

def pow_25 :=
  lam (x_11825) -> (y_11826) ->
    let loop_11827 :=
      fun loop_11828 (acc_11829) -> (y_11830) ->
        match (__lte__ y_11830 0) with
        | true_4 => acc_11829
        | false_5 =>
          ((loop_11828) (__mul__ x_11825 acc_11829) (__sub__ y_11830 1))
        end
    in ((loop_11827) 1 y_11826)

def powm_26 :=
  lam (x_11831) -> (y_11832) -> (m_11833) ->
    let loop_11834 :=
      fun loop_11835 (acc_11836) -> (y_11837) ->
        match (__lte__ y_11837 0) with
        | true_4 => acc_11836
        | false_5 =>
          ((loop_11835)
            (__mod__ (__mul__ x_11831 acc_11836) m_11833) (__sub__ y_11837 1))
        end
    in ((loop_11834) 1 y_11832)

def ord_27 := lam (c_11838) -> (__ord__ c_11838)

def chr_28 := lam (i_11839) -> (__chr__ i_11839)

def str_29 := lam (c_11840) -> (__push__ "" c_11840)

def strlen_30 := lam (s_11841) -> (__size__ s_11841)

def string_of_int_31 :=
  lam (i_11842) ->
    let aux_11843 :=
      fun aux_11844 (i_11845) ->
        match (__lte__ 10 i_11845) with
        | true_4 =>
          let r_11846 := (__mod__ i_11845 10) in
          let i_11847 := (__div__ i_11845 10) in
          (__push__ ((aux_11844) i_11847)
            ((chr_28) (__add__ r_11846 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_11845 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_11842) with
    | true_4 => ((aux_11843) i_11842)
    | false_5 => (__cat__ "~" ((aux_11843) (__neg__ i_11842)))
    end

def splitU_80 :=
  fun split_11848 (__11849) ->
    match __11849 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_11850 tl_11851 =>
      match tl_11851 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_11850 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_11852 tl_11853 =>
        match ((split_11848) tl_11853) with
        | ex1UU_33 m_11854 n_11855 =>
          (ex1UU_33
            (consUU_25 hd_11850 m_11854) (consUU_25 hd_11852 n_11855))
        end
      end
    end

def splitL_79 :=
  fun split_11856 (__11857) ->
    match __11857 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_11858 tl_11859 =>
      match tl_11859 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_11858 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_11860 tl_11861 =>
        match ((split_11856) tl_11861) with
        | ex1LL_30 m_11862 n_11863 =>
          (ex1LL_30
            (consUL_23 hd_11858 m_11862) (consUL_23 hd_11860 n_11863))
        end
      end
    end

def mergeU_82 :=
  fun merge_11864 (__11865) -> (__11866) -o
    match __11865 with
    | nilUU_24  => __11866
    | consUU_25 hd_11867 tl_11868 =>
      match __11866 with
      | nilUU_24  => (consUU_25 hd_11867 tl_11868)
      | consUU_25 hd_11869 tl_11870 =>
        match (__lte__ hd_11867 hd_11869) with
        | true_4 =>
          (consUU_25
            hd_11867 ((merge_11864) tl_11868 (consUU_25 hd_11869 tl_11870)))
        | false_5 =>
          (consUU_25
            hd_11869 ((merge_11864) (consUU_25 hd_11867 tl_11868) tl_11870))
        end
      end
    end

def mergeL_81 :=
  fun merge_11871 (__11872) -> (__11873) -o
    match __11872 with
    | nilUL_22  => __11873
    | consUL_23 hd_11874 tl_11875 =>
      match __11873 with
      | nilUL_22  => (consUL_23 hd_11874 tl_11875)
      | consUL_23 hd_11876 tl_11877 =>
        match (__lte__ hd_11874 hd_11876) with
        | true_4 =>
          (consUL_23
            hd_11874 ((merge_11871) tl_11875 (consUL_23 hd_11876 tl_11877)))
        | false_5 =>
          (consUL_23
            hd_11876 ((merge_11871) (consUL_23 hd_11874 tl_11875) tl_11877))
        end
      end
    end

def msortU_84 :=
  fun msort_11878 (__11879) ->
    match __11879 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_11880 tl_11881 =>
      match tl_11881 with
      | nilUU_24  => (consUU_25 hd_11880 (nilUU_24 ))
      | consUU_25 hd_11882 tl_11883 =>
        match ((splitU_80)
                (consUU_25 hd_11880 (consUU_25 hd_11882 tl_11883))) with
        | ex1UU_33 m_11884 n_11885 =>
          ((mergeU_82) ((msort_11878) m_11884) ((msort_11878) n_11885))
        end
      end
    end

def msortL_83 :=
  fun msort_11886 (__11887) ->
    match __11887 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_11888 tl_11889 =>
      match tl_11889 with
      | nilUL_22  => (consUL_23 hd_11888 (nilUL_22 ))
      | consUL_23 hd_11890 tl_11891 =>
        match ((splitL_79)
                (consUL_23 hd_11888 (consUL_23 hd_11890 tl_11891))) with
        | ex1LL_30 m_11892 n_11893 =>
          ((mergeL_81) ((msort_11886) m_11892) ((msort_11886) n_11893))
        end
      end
    end

def mklistU_86 :=
  fun mklist_11894 (n_11895) ->
    match (__lte__ n_11895 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_11895 ((mklist_11894) (__sub__ n_11895 1)))
    end

def mklistL_85 :=
  fun mklist_11896 (n_11897) ->
    match (__lte__ n_11897 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_11897 ((mklist_11896) (__sub__ n_11897 1)))
    end

def list_lenU_88 :=
  fun list_len_11898 (__11899) ->
    match __11899 with
    | nilUU_24  => 0
    | consUU_25 hd_11900 tl_11901 => (__add__ 1 ((list_len_11898) tl_11901))
    end

def list_lenL_87 :=
  fun list_len_11902 (__11903) ->
    match __11903 with
    | nilUL_22  => 0
    | consUL_23 hd_11904 tl_11905 => (__add__ 1 ((list_len_11902) tl_11905))
    end

def string_of_listU_90 :=
  fun string_of_list_11906 (__11907) ->
    match __11907 with
    | nilUU_24  => "nil"
    | consUU_25 hd_11908 tl_11909 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_11908) " :: ")
        ((string_of_list_11906) tl_11909))
    end

def string_of_listL_89 :=
  fun string_of_list_11910 (__11911) ->
    match __11911 with
    | nilUL_22  => "nil"
    | consUL_23 hd_11912 tl_11913 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_11912) " :: ")
        ((string_of_list_11910) tl_11913))
    end

def main :=
  let test_11914 := ((mklistL_85) 2000000) in
  let sorted_11915 := ((msortL_83) test_11914) in
  let len_11916 := ((list_lenL_87) sorted_11915) in
  lazy(print ((string_of_int_31) len_11916))

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := mkconstr(consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := mkconstr(nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := mkconstr(consUL_23, [hd_292, m_303]);
              x_306 := mkconstr(consUL_23, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := mkconstr(consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := mkconstr(nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := mkconstr(nilUL_22, []);
          x_372 := mkconstr(consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_23, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn mklistU_384(n_385%U) {
  x_387 := lte(n_385, 0);
  match(x_387){
    true_4() => {
      x_388 := mkconstr(nilUU_24, []);
      x_386 := x_388;
    }
    false_5() => {
      x_390 := sub(n_385, 1);
      x_389 := mklistU_384(x_390);
      x_391 := mkconstr(consUU_25, [n_385, x_389]);
      x_386 := x_391;
    }
  }
  return x_386;
}

fn mklistL_392(n_393%U) {
  x_395 := lte(n_393, 0);
  match(x_395){
    true_4() => {
      x_396 := mkconstr(nilUL_22, []);
      x_394 := x_396;
    }
    false_5() => {
      x_398 := sub(n_393, 1);
      x_397 := mklistL_392(x_398);
      x_399 := mkconstr(consUL_23, [n_393, x_397]);
      x_394 := x_399;
    }
  }
  return x_394;
}

fn list_lenU_400(__401%U) {
  match[U](__401){
    nilUU_24() => {
      x_402 := 0;
    }
    consUU_25(hd_403, tl_404) => {
      x_406 := list_lenU_400(tl_404);
      x_405 := add(1, x_406);
      x_402 := x_405;
    }
  }
  return x_402;
}

fn list_lenL_407(__408%U) {
  match[L](__408){
    nilUL_22() => {
      x_409 := 0;
    }
    consUL_23(hd_410, tl_411) => {
      x_413 := list_lenL_407(tl_411);
      x_412 := add(1, x_413);
      x_409 := x_412;
    }
  }
  return x_409;
}

fn string_of_listU_414(__415%U) {
  match[U](__415){
    nilUU_24() => {
      x_417 := str("nil");
      x_416 := x_417;
    }
    consUU_25(hd_418, tl_419) => {
      x_422 := string_of_int_236(hd_418);
      x_423 := str(" :: ");
      x_421 := cat(x_422, x_423);
      x_424 := string_of_listU_414(tl_419);
      x_420 := cat(x_421, x_424);
      x_416 := x_420;
    }
  }
  return x_416;
}

fn string_of_listL_425(__426%U) {
  match[L](__426){
    nilUL_22() => {
      x_428 := str("nil");
      x_427 := x_428;
    }
    consUL_23(hd_429, tl_430) => {
      x_433 := string_of_int_236(hd_429);
      x_434 := str(" :: ");
      x_432 := cat(x_433, x_434);
      x_435 := string_of_listL_425(tl_430);
      x_431 := cat(x_432, x_435);
      x_427 := x_431;
    }
  }
  return x_427;
}

main := {
  x_437 := mklistL_392(2000000);
  test_436 := x_437;
  x_439 := msortL_364(test_436);
  sorted_438 := x_439;
  x_441 := list_lenL_407(sorted_438);
  len_440 := x_441;
  x_442 :=
    lazy {
      x_444 := string_of_int_236(len_440);
      x_443 := print(x_444);
      return x_443;
    };
  return x_442;
};

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := reconstr(__287, nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := reconstr(tl_293, nilUL_22, []);
          x_296 := reconstr(__287, consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_23, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_23, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
      free(__327);
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := reconstr(__327, consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := reconstr(__365, nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := reconstr(tl_369, nilUL_22, []);
          x_372 := reconstr(__365, consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_23, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn mklistU_384(n_385%U) {
  x_387 := lte(n_385, 0);
  match(x_387){
    true_4() => {
      x_388 := mkconstr(nilUU_24, []);
      x_386 := x_388;
    }
    false_5() => {
      x_390 := sub(n_385, 1);
      x_389 := mklistU_384(x_390);
      x_391 := mkconstr(consUU_25, [n_385, x_389]);
      x_386 := x_391;
    }
  }
  return x_386;
}

fn mklistL_392(n_393%U) {
  x_395 := lte(n_393, 0);
  match(x_395){
    true_4() => {
      x_396 := mkconstr(nilUL_22, []);
      x_394 := x_396;
    }
    false_5() => {
      x_398 := sub(n_393, 1);
      x_397 := mklistL_392(x_398);
      x_399 := mkconstr(consUL_23, [n_393, x_397]);
      x_394 := x_399;
    }
  }
  return x_394;
}

fn list_lenU_400(__401%U) {
  match[U](__401){
    nilUU_24() => {
      x_402 := 0;
    }
    consUU_25(hd_403, tl_404) => {
      x_406 := list_lenU_400(tl_404);
      x_405 := add(1, x_406);
      x_402 := x_405;
    }
  }
  return x_402;
}

fn list_lenL_407(__408%U) {
  match[L](__408){
    nilUL_22() => {
      x_409 := 0;
      free(__408);
    }
    consUL_23(hd_410, tl_411) => {
      x_413 := list_lenL_407(tl_411);
      x_412 := add(1, x_413);
      x_409 := x_412;
      free(__408);
    }
  }
  return x_409;
}

fn string_of_listU_414(__415%U) {
  match[U](__415){
    nilUU_24() => {
      x_417 := str("nil");
      x_416 := x_417;
    }
    consUU_25(hd_418, tl_419) => {
      x_422 := string_of_int_236(hd_418);
      x_423 := str(" :: ");
      x_421 := cat(x_422, x_423);
      x_424 := string_of_listU_414(tl_419);
      x_420 := cat(x_421, x_424);
      x_416 := x_420;
    }
  }
  return x_416;
}

fn string_of_listL_425(__426%U) {
  match[L](__426){
    nilUL_22() => {
      x_428 := str("nil");
      x_427 := x_428;
      free(__426);
    }
    consUL_23(hd_429, tl_430) => {
      x_433 := string_of_int_236(hd_429);
      x_434 := str(" :: ");
      x_432 := cat(x_433, x_434);
      x_435 := string_of_listL_425(tl_430);
      x_431 := cat(x_432, x_435);
      x_427 := x_431;
      free(__426);
    }
  }
  return x_427;
}

main := {
  x_437 := mklistL_392(2000000);
  test_436 := x_437;
  x_439 := msortL_364(test_436);
  sorted_438 := x_439;
  x_441 := list_lenL_407(sorted_438);
  len_440 := x_441;
  x_442 :=
    lazy {
      x_444 := string_of_int_236(len_440);
      x_443 := print(x_444);
      return x_443;
    };
  return x_442;
};

-----------------------------------------

fn fn0_idU_445(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_446(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_447 := fn0_idU_445(A_2, m_3);
  return x_447;
}

fn fn0_idL_448(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_449(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_450 := fn0_idL_448(A_5, m_6);
  return x_450;
}

fn fn0_rwlUU_451(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_452(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_453 := fn0_rwlUU_451(A_8, m_9, n_10, B_11, __12, __13);
  return x_453;
}

fn fn0_rwlUL_454(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_455(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_456 := fn0_rwlUL_454(A_15, m_16, n_17, B_18, __19, __20);
  return x_456;
}

fn fn0_rwlLU_457(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_458(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_459 := fn0_rwlLU_457(A_22, m_23, n_24, B_25, __26, __27);
  return x_459;
}

fn fn0_rwlLL_460(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_461(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_462 := fn0_rwlLL_460(A_29, m_30, n_31, B_32, __33, __34);
  return x_462;
}

fn fn0_rwrUU_463(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_464(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_465 := fn0_rwrUU_463(A_36, m_37, n_38, B_39, __40, __41);
  return x_465;
}

fn fn0_rwrUL_466(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_467(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_468 := fn0_rwrUL_466(A_43, m_44, n_45, B_46, __47, __48);
  return x_468;
}

fn fn0_rwrLU_469(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_470(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_471 := fn0_rwrLU_469(A_50, m_51, n_52, B_53, __54, __55);
  return x_471;
}

fn fn0_rwrLL_472(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_473(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_474 := fn0_rwrLL_472(A_57, m_58, n_59, B_60, __61, __62);
  return x_474;
}

fn fn0_sing_elimUU_475(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_476(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_477 := fn0_sing_elimUU_475(A_64, x_65, __66);
  return x_477;
}

fn fn0_sing_elimUL_478(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_479(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_480 := fn0_sing_elimUL_478(A_68, x_69, __70);
  return x_480;
}

fn fn0_sing_elimLU_481(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_482(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_483 := fn0_sing_elimLU_481(A_72, x_73, __74);
  return x_483;
}

fn fn0_sing_elimLL_484(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_485(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_486 := fn0_sing_elimLL_484(A_76, x_77, __78);
  return x_486;
}

fn fn0_not_487(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_488(env) {
  __80 := env[1];
  x_489 := fn0_not_487(__80);
  return x_489;
}

fn fn0_and_490(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_491(env) {
  __83 := env[1];
  __84 := env[2];
  x_492 := fn0_and_490(__83, __84);
  return x_492;
}

fn fn0_or_493(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_494(env) {
  __88 := env[1];
  __89 := env[2];
  x_495 := fn0_or_493(__88, __89);
  return x_495;
}

fn fn0_xor_496(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_497(env) {
  __93 := env[1];
  __94 := env[2];
  x_498 := fn0_xor_496(__93, __94);
  return x_498;
}

fn fn0_lte_499(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_499(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_500(env) {
  __99 := env[1];
  __100 := env[2];
  x_501 := fn0_lte_499(__99, __100);
  return x_501;
}

fn fn0_lt_502(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_499(x_110, y_108);
  return x_109;
}

fn fn1_lt_503(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_504 := fn0_lt_502(x_107, y_108);
  return x_504;
}

fn fn0_pred_505(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_506(env) {
  __112 := env[1];
  x_507 := fn0_pred_505(__112);
  return x_507;
}

fn fn0_add_508(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_508(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_509(env) {
  __117 := env[1];
  __118 := env[2];
  x_510 := fn0_add_508(__117, __118);
  return x_510;
}

fn fn0_sub_511(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_505(__124);
      x_128 := fn0_sub_511(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_512(env) {
  __124 := env[1];
  __125 := env[2];
  x_513 := fn0_sub_511(__124, __125);
  return x_513;
}

fn fn0_mul_514(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_514(n_135, __132);
      x_136 := fn0_add_508(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_515(env) {
  __131 := env[1];
  __132 := env[2];
  x_516 := fn0_mul_514(__131, __132);
  return x_516;
}

fn fn0_div_517(x_139, y_140) {
  x_142 := fn0_lt_502(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_519, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_523, loop_144, x_139);
      appc(x_524, x_523, y_140);
      move1(x_156, x_524);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_518(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_526 := fn0_div_517(x_139, y_140);
  return x_526;
}

fn fn0_rem_527(x_158, y_159) {
  x_162 := fn0_div_517(x_158, y_159);
  x_161 := fn0_mul_514(x_162, y_159);
  x_160 := fn0_sub_511(x_158, x_161);
  return x_160;
}

fn fn1_rem_528(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_529 := fn0_rem_527(x_158, y_159);
  return x_529;
}

fn fn0_free_listUU_530(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_532, f_165, hd_168);
      move1(x_171, x_532);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_530(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_531(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_534 := fn0_free_listUU_530(A_164, f_165, __166);
  return x_534;
}

fn fn0_free_listUL_535(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_537, f_175, hd_178);
      move1(x_181, x_537);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_535(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_536(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_539 := fn0_free_listUL_535(A_174, f_175, __176);
  return x_539;
}

fn fn0_free_listLL_540(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_542, f_185, hd_188);
      move1(x_191, x_542);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_540(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_541(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_544 := fn0_free_listLL_540(A_184, f_185, __186);
  return x_544;
}

fn fn0_pow_545(x_194, y_195) {
  mkclo1(x_197, fn1_loop_547, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_551, loop_196, 1);
  appc(x_552, x_551, y_195);
  move1(x_206, x_552);
  return x_206;
}

fn fn1_pow_546(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_554 := fn0_pow_545(x_194, y_195);
  return x_554;
}

fn fn0_powm_555(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_557, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_561, loop_211, 1);
  appc(x_562, x_561, y_209);
  move1(x_222, x_562);
  return x_222;
}

fn fn1_powm_556(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_564 := fn0_powm_555(x_208, y_209, m_210);
  return x_564;
}

fn fn0_ord_565(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_566(env) {
  c_224 := env[1];
  x_567 := fn0_ord_565(c_224);
  return x_567;
}

fn fn0_chr_568(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_569(env) {
  i_227 := env[1];
  x_570 := fn0_chr_568(i_227);
  return x_570;
}

fn fn0_str_571(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_572(env) {
  c_230 := env[1];
  x_573 := fn0_str_571(c_230);
  return x_573;
}

fn fn0_strlen_574(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_575(env) {
  s_234 := env[1];
  x_576 := fn0_strlen_574(s_234);
  return x_576;
}

fn fn0_string_of_int_577(i_237) {
  mkclo1(x_239, fn1_aux_579, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lt(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_582, aux_238, i_237);
      move1(x_259, x_582);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_584, aux_238, x_263);
      move1(x_262, x_584);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_578(env) {
  i_237 := env[1];
  x_586 := fn0_string_of_int_577(i_237);
  return x_586;
}

fn fn0_splitU_587(__265) {
  switch(ctagof(__265)){
    nilUU_24 => {
      mkbox(x_267, nilUU_24, 0);
      mkbox(x_268, nilUU_24, 0);
      mkbox(x_269, ex1UU_33, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_25 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_24 => {
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, consUU_25, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_24, 0);
          mkbox(x_276, ex1UU_33, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_25 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_587(tl_278);
          switch(ctagof(x_280)){
            ex1UU_33 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_25);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_25, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_33, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_588(env) {
  __265 := env[1];
  x_589 := fn0_splitU_587(__265);
  return x_589;
}

fn fn0_splitL_590(__287) {
  switch(ctagof(__287)){
    nilUL_22 => {
      rebox(x_289, __287, nilUL_22);
      mkbox(x_290, nilUL_22, 0);
      mkbox(x_291, ex1LL_30, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_23 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_22 => {
          rebox(x_295, tl_293, nilUL_22);
          rebox(x_296, __287, consUL_23);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_22, 0);
          mkbox(x_298, ex1LL_30, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_23 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_590(tl_300);
          switch(ctagof(x_302)){
            ex1LL_30 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_23);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_23);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_30);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_591(env) {
  __287 := env[1];
  x_592 := fn0_splitL_590(__287);
  return x_592;
}

fn fn0_mergeU_593(__309, __310) {
  switch(ctagof(__309)){
    nilUU_24 => {
      move1(x_311, __310);
      break;
    }
    consUU_25 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_24 => {
          mkbox(x_315, consUU_25, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_25 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_25, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_593(tl_313, x_321);
              mkbox(x_322, consUU_25, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_25, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_593(x_324, tl_317);
              mkbox(x_325, consUU_25, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_594(env) {
  __309 := env[1];
  __310 := env[2];
  x_595 := fn0_mergeU_593(__309, __310);
  return x_595;
}

fn fn0_mergeL_596(__327, __328) {
  switch(ctagof(__327)){
    nilUL_22 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_23 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_22 => {
          rebox(x_333, __327, consUL_23);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_23 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_23);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_596(tl_331, x_339);
              rebox(x_340, __327, consUL_23);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_23);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_596(x_342, tl_335);
              rebox(x_343, __327, consUL_23);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_597(env) {
  __327 := env[1];
  __328 := env[2];
  x_598 := fn0_mergeL_596(__327, __328);
  return x_598;
}

fn fn0_msortU_599(__345) {
  switch(ctagof(__345)){
    nilUU_24 => {
      mkbox(x_347, nilUU_24, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_25 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_24 => {
          mkbox(x_351, nilUU_24, 0);
          mkbox(x_352, consUU_25, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_25 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_25, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_25, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_587(x_358);
          switch(ctagof(x_356)){
            ex1UU_33 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_599(m_359);
              x_363 := fn0_msortU_599(n_360);
              x_361 := fn0_mergeU_593(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_600(env) {
  __345 := env[1];
  x_601 := fn0_msortU_599(__345);
  return x_601;
}

fn fn0_msortL_602(__365) {
  switch(ctagof(__365)){
    nilUL_22 => {
      rebox(x_367, __365, nilUL_22);
      move1(x_366, x_367);
      break;
    }
    consUL_23 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_22 => {
          rebox(x_371, tl_369, nilUL_22);
          rebox(x_372, __365, consUL_23);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_23 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_23);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_23);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_590(x_378);
          switch(ctagof(x_376)){
            ex1LL_30 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_602(m_379);
              x_383 := fn0_msortL_602(n_380);
              x_381 := fn0_mergeL_596(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_603(env) {
  __365 := env[1];
  x_604 := fn0_msortL_602(__365);
  return x_604;
}

fn fn0_mklistU_605(n_385) {
  lte(x_387, n_385, 0);
  switch(x_387){
    true_4 => {
      mkbox(x_388, nilUU_24, 0);
      move1(x_386, x_388);
      break;
    }
    false_5 => {
      sub(x_390, n_385, 1);
      x_389 := fn0_mklistU_605(x_390);
      mkbox(x_391, consUU_25, 2);
      setbox(x_391, n_385, 0);
      setbox(x_391, x_389, 1);
      move1(x_386, x_391);
      break;
    }
  }
  return x_386;
}

fn fn1_mklistU_606(env) {
  n_385 := env[1];
  x_607 := fn0_mklistU_605(n_385);
  return x_607;
}

fn fn0_mklistL_608(n_393) {
  lte(x_395, n_393, 0);
  switch(x_395){
    true_4 => {
      mkbox(x_396, nilUL_22, 0);
      move1(x_394, x_396);
      break;
    }
    false_5 => {
      sub(x_398, n_393, 1);
      x_397 := fn0_mklistL_608(x_398);
      mkbox(x_399, consUL_23, 2);
      setbox(x_399, n_393, 0);
      setbox(x_399, x_397, 1);
      move1(x_394, x_399);
      break;
    }
  }
  return x_394;
}

fn fn1_mklistL_609(env) {
  n_393 := env[1];
  x_610 := fn0_mklistL_608(n_393);
  return x_610;
}

fn fn0_list_lenU_611(__401) {
  switch(ctagof(__401)){
    nilUU_24 => {
      move1(x_402, 0);
      break;
    }
    consUU_25 => {
      getbox(hd_403, __401, 0);
      getbox(tl_404, __401, 1);
      x_406 := fn0_list_lenU_611(tl_404);
      add(x_405, 1, x_406);
      move1(x_402, x_405);
      break;
    }
  }
  return x_402;
}

fn fn1_list_lenU_612(env) {
  __401 := env[1];
  x_613 := fn0_list_lenU_611(__401);
  return x_613;
}

fn fn0_list_lenL_614(__408) {
  switch(ctagof(__408)){
    nilUL_22 => {
      move1(x_409, 0);
      free(__408);
      break;
    }
    consUL_23 => {
      getbox(hd_410, __408, 0);
      getbox(tl_411, __408, 1);
      x_413 := fn0_list_lenL_614(tl_411);
      add(x_412, 1, x_413);
      move1(x_409, x_412);
      free(__408);
      break;
    }
  }
  return x_409;
}

fn fn1_list_lenL_615(env) {
  __408 := env[1];
  x_616 := fn0_list_lenL_614(__408);
  return x_616;
}

fn fn0_string_of_listU_617(__415) {
  switch(ctagof(__415)){
    nilUU_24 => {
      str(x_417, "nil")
      move1(x_416, x_417);
      break;
    }
    consUU_25 => {
      getbox(hd_418, __415, 0);
      getbox(tl_419, __415, 1);
      x_422 := fn0_string_of_int_577(hd_418);
      str(x_423, " :: ")
      cat(x_421, x_422, x_423);
      x_424 := fn0_string_of_listU_617(tl_419);
      cat(x_420, x_421, x_424);
      move1(x_416, x_420);
      break;
    }
  }
  return x_416;
}

fn fn1_string_of_listU_618(env) {
  __415 := env[1];
  x_619 := fn0_string_of_listU_617(__415);
  return x_619;
}

fn fn0_string_of_listL_620(__426) {
  switch(ctagof(__426)){
    nilUL_22 => {
      str(x_428, "nil")
      move1(x_427, x_428);
      free(__426);
      break;
    }
    consUL_23 => {
      getbox(hd_429, __426, 0);
      getbox(tl_430, __426, 1);
      x_433 := fn0_string_of_int_577(hd_429);
      str(x_434, " :: ")
      cat(x_432, x_433, x_434);
      x_435 := fn0_string_of_listL_620(tl_430);
      cat(x_431, x_432, x_435);
      move1(x_427, x_431);
      free(__426);
      break;
    }
  }
  return x_427;
}

fn fn1_string_of_listL_621(env) {
  __426 := env[1];
  x_622 := fn0_string_of_listL_620(__426);
  return x_622;
}

fn lazy__624(env) {
  string_of_int_236 := env[0];
  len_440 := env[1];
  x_444 := fn0_string_of_int_577(len_440);
  print(x_443, x_444);
  return x_443;
}

fn fn1_aux_579(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_580, aux_240, i_246);
      move1(x_249, x_580);
      x_252 := fn0_ord_565(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_568(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_565(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_568(x_255);
      x_253 := fn0_str_571(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_557(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_558, loop_213, x_219);
      appc(x_559, x_558, x_221);
      move1(x_218, x_559);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_547(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_548, loop_198, x_204);
      appc(x_549, x_548, x_205);
      move1(x_203, x_549);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_519(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_505(y_148);
  x_150 := fn0_sub_511(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_520, loop_146, n_153);
      appc(x_521, x_520, y_148);
      move1(x_154, x_521);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_446, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_449, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_452, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_455, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_458, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_461, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_464, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_467, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_470, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_473, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_476, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_479, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_482, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_485, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_488, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_491, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_494, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_497, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_500, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_503, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_506, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_509, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_512, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_515, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_518, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_528, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_531, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_536, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_541, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_546, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_556, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_566, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_569, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_572, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_575, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_578, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_588, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_591, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_594, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_597, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_600, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_603, fvc:=0, argc:=1);
  mkclo0(mklistU_384, fn1_mklistU_606, fvc:=0, argc:=1);
  mkclo0(mklistL_392, fn1_mklistL_609, fvc:=0, argc:=1);
  mkclo0(list_lenU_400, fn1_list_lenU_612, fvc:=0, argc:=1);
  mkclo0(list_lenL_407, fn1_list_lenL_615, fvc:=0, argc:=1);
  mkclo0(string_of_listU_414, fn1_string_of_listU_618, fvc:=0, argc:=1);
  mkclo0(string_of_listL_425, fn1_string_of_listL_621, fvc:=0, argc:=1);
  x_437 := fn0_mklistL_608(2000000);
  move1(test_436, x_437);
  x_439 := fn0_msortL_602(test_436);
  move1(sorted_438, x_439);
  x_441 := fn0_list_lenL_614(sorted_438);
  move1(len_440, x_441);
  lazy(x_442, lazy__624, 2);
  setlazy(x_442, string_of_int_236, 0);
  setlazy(x_442, len_440, 1);
  force(x_623, x_442);
  return x_623;
}

-----------------------------------------

compilation success

-----------------------------------------

