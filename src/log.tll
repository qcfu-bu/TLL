[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "cmsort_ch"; relv = N;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "cmsort_ch"),
              [([(PId "xs")],
                (Some (Ch (true,
                         (Act (R, true,
                            (UOpr ("`",
                               (App [(Id ("msort", I)); (Id ("xs", I))]))),
                            (Binder ("_", End))))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "cmsort_worker"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("_",
                 (Pi (R, U,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("zs",
                       (Pi (R, L,
                          (App
                             [(Inst ("cmsort_ch", [(SId "t")], I));
                               (Id ("zs", I))]),
                          (Binder ("_", (IO (Id ("unit", I)))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cmsort_worker"),
              [([(PId "_"); (PId "nil"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Send (Id ("c", I)));
                              (App [(Id ("just", I)); (Id ("nil", I))])]),
                         (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "_"); (PBOpr ("::", (PId "z"), (PId "nil")));
                   (PId "c")],
                 (Some (MLet (
                          (App
                             [(Send (Id ("c", I)));
                               (App
                                  [(Id ("just", I));
                                    (BOpr ("::", (Id ("z", I)),
                                       (Id ("nil", I))))
                                    ])
                               ]),
                          (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "i"); (PId "zs"); (PId "c")],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("i", I)), (Int 0))), None)],
                          None,
                          [([(PId "true")],
                            (Some (MLet (
                                     (App
                                        [(Send (Id ("c", I)));
                                          (App
                                             [(Id ("just", I));
                                               (App
                                                  [(Id ("msort", I));
                                                    (Id ("zs", I))])
                                               ])
                                          ]),
                                     (Binder ((PId "c"),
                                        (Close (Id ("c", I)))))
                                     ))));
                            ([(PId "false")],
                             (Some (Match (
                                      [(R,
                                        (App
                                           [(Id ("split", I)); (Id ("zs", I))
                                             ]),
                                        (Some ("h1", IMeta)));
                                        (N, (Id ("refl", I)),
                                         (Some ("_",
                                                (BOpr ("=",
                                                   (Let (R, (Id ("h1", I)),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      )),
                                                   (Let (R,
                                                      (App
                                                         [(Id ("split", I));
                                                           (Id ("zs", I))]),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      ))
                                                   )))))
                                        ],
                                      None,
                                      [([(PBOpr ("\226\159\168,\226\159\169",
                                            (PId "xs0"), (PId "ys0")));
                                          (PId "pf")],
                                        (Some (MLet (
                                                 (Fork
                                                    (Fun (
                                                       (Pi (R, L, IMeta,
                                                          (Binder ("",
                                                             (IO
                                                                (Id ("unit",
                                                                   I)))
                                                             ))
                                                          )),
                                                       (Binder (None,
                                                          [([(PId "c1")],
                                                            (Some (App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ));
                                                                    (Id (
                                                                    "c1", I))
                                                                    ])))
                                                            ]
                                                          )),
                                                       []))),
                                                 (Binder ((PId "r1"),
                                                    (MLet (
                                                       (Fork
                                                          (Fun (
                                                             (Pi (R, L,
                                                                IMeta,
                                                                (Binder ("",
                                                                   (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    )))
                                                                   ))
                                                                )),
                                                             (Binder (None,
                                                                [([(PId "c2")
                                                                    ],
                                                                  (Some (
                                                                  App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ));
                                                                    (Id (
                                                                    "c2", I))
                                                                    ])))
                                                                  ]
                                                                )),
                                                             []))),
                                                       (Binder ((PId "r2"),
                                                          (MLet (
                                                             (Recv
                                                                (Id ("r1", I
                                                                   ))),
                                                             (Binder (
                                                                (PBOpr (
                                                                   "\226\159\168,\226\159\169",
                                                                   (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "xs1")])),
                                                                   (PId "c1")
                                                                   )),
                                                                (MLet (
                                                                   (Recv
                                                                    (Id (
                                                                    "r2", I))),
                                                                   (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "ys1")])),
                                                                    (PId "c2")
                                                                    )),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (Id (
                                                                    "xs1", I
                                                                    ));
                                                                    (Id (
                                                                    "ys1", I
                                                                    ))])]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ))]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ))])])))
                                                                    )),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "rwl", I
                                                                    ));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U, IMeta,
                                                                    (Binder (
                                                                    "x",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "x")],
                                                                    (Some (
                                                                    UOpr (
                                                                    "`",
                                                                    (Id ("x",
                                                                    I))))))]
                                                                    )), 
                                                                    []));
                                                                    (Id (
                                                                    "pf", I));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]))))),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c1", I))),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c2", I))),
                                                                    (Close
                                                                    (Id ("c",
                                                                    I)))))))
                                                                    ))))))))
                                                                    ))))))
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))))
                                        ]
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, Int_t,
           (Binder ("_",
              (Pi (R, U,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("zs",
                    (Pi (R, L,
                       (App
                          [(Inst ("cmsort_ch", [(SId "t")], I));
                            (Id ("zs", I))]),
                       (Binder ("_", (IO (Id ("unit", I)))))))
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "cmsort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("zs",
                 (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))
                 ))
              )),
           (Binder ((Some "cmsort"),
              [([(PId "zs")],
                (Some (MLet (
                         (Fork
                            (Fun (
                               (Pi (R, L, IMeta,
                                  (Binder ("", (IO (Id ("unit", I))))))),
                               (Binder (None,
                                  [([(PId "c")],
                                    (Some (App
                                             [(Id ("cmsort_worker", I));
                                               (Int 4); (Id ("zs", I));
                                               (Id ("c", I))])))
                                    ]
                                  )),
                               []))),
                         (Binder ((PId "c"),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "msg"), (PId "c"))),
                                  (BOpr (";", (Close (Id ("c", I))),
                                     (Return (Id ("msg", I)))))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("zs",
              (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))))
           )))
       ));
    view = [E]};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "print_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", (IO (Id ("unit", I))))))),
           (Binder ((Some "print_list"),
              [([(PId "nil")], (Some (Print (String "nil"))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr (";",
                          (Print
                             (App [(Id ("string_of_int", I)); (Id ("x", I))])),
                          (BOpr (";", (Print (String " :: ")),
                             (App [(Id ("print_list", I)); (Id ("xs", I))])))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", (IO (Id ("unit", I))))))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 2000000)]),
           (Binder ((PId "test"),
              (MLet ((App [(Id ("cmsort", I)); (Id ("test", I))]),
                 (Binder ((PConstr ("just", [(PId "sorted")])),
                    (Let (R,
                       (App [(Id ("list_len", I)); (Id ("sorted", I))]),
                       (Binder ((PId "len"),
                          (Print
                             (App
                                [(Id ("string_of_int", I)); (Id ("len", I))]))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

[parse success]

-----------------------------------------

#[program]
def split_32‹t_531› :
  (list_6‹??_71,t_531› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_531› int) (list_6‹??_73,t_531› int))
:=
  fun split_533 :
    (list_6‹??_46,t_531› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_531› int) (list_6‹??_48,t_531› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_535 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_535 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_536 (cons_9 y_537 zs_538)) =>
    match ((split_533) zs_538) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_540 ys_541) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_536 xs_540)
        (cons_9‹??_67,??_68› ?_79[0;0] y_537 ys_541))

#[program]
def merge_33‹t_542› :
  (list_6‹??_87,t_542› int) ->
    (list_6‹??_88,t_542› int) -o (list_6‹??_89,t_542› int)
:=
  fun merge_545 :
    (list_6‹??_76,t_542› int) ->
      (list_6‹??_77,t_542› int) -o (list_6‹??_78,t_542› int)
  | nil_8, ys_548 => ys_548
  | xs_549, nil_8 => xs_549
  | (cons_9 x_550 xs_551), (cons_9 y_552 ys_553) =>
    match (__lte__ x_550 y_552) in ?_84[0;0] -o ?_85[0;0] with
    | true_4 =>
      (cons_9‹??_81,??_82›
        ?_87[0;0] x_550
        ((merge_545) xs_551 (cons_9‹??_79,??_80› ?_86[0;0] y_552 ys_553)))
    | false_5 =>
      (cons_9‹??_85,??_86›
        ?_89[0;0] y_552
        ((merge_545) (cons_9‹??_83,??_84› ?_88[0;0] x_550 xs_551) ys_553))

#[program]
def msort_34‹t_555› :
  (list_6‹??_100,t_555› int) -> (list_6‹??_101,t_555› int)
:=
  fun msort_557 :
    (list_6‹??_90,t_555› int) -> (list_6‹??_91,t_555› int)
  | nil_8 => (nil_8‹??_92,??_93› ?_90[0;0])
  | (cons_9 z_559 nil_8) =>
    (cons_9‹??_96,??_97›
      ?_92[0;0] z_559 (nil_8‹??_94,??_95› ?_91[0;0]))
  | zs_560 =>
    match ((split_32‹??_98›) zs_560) in ?_94[0;0] -o ?_93[0;0] with
    | (ex1_11 xs_562 ys_563) =>
      ((merge_33‹??_99›) ((msort_557) xs_562) ((msort_557) ys_563))

#[logical]
def cmsort_ch_35‹t_564› : (list_6‹??_105,t_564› int) -> L :=
  fun cmsort_ch_566 : (list_6‹??_102,t_564› int) -> L
  | xs_568 =>
    ch⟨⇑(__569 :
           ((ssing_6‹??_104›) ?_95[0;0] ((msort_34‹??_103›) xs_568))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_570› :
  int ->
    ∀ (zs_572 : (list_6‹??_142,t_570› int)) ->
      ((cmsort_ch_35‹t_570›) zs_572) -o IO unit_3
:=
  fun cmsort_worker_574 :
    int ->
      ∀ (zs_576 : (list_6‹??_106,t_570› int)) ->
        ((cmsort_ch_35‹t_570›) zs_576) -o IO unit_3
  | _578, nil_8, c_579 =>
    let* c_580 :=
      ((send c_579)
        (just_2‹??_109,??_110›
          ?_97[0;0] (nil_8‹??_107,??_108› ?_96[0;0])))
    in close c_580
  | _581, (cons_9 z_582 nil_8), c_583 =>
    let* c_584 :=
      ((send c_583)
        (just_2‹??_115,??_116›
          ?_100[0;0]
          (cons_9‹??_113,??_114›
            ?_99[0;0] z_582 (nil_8‹??_111,??_112› ?_98[0;0]))))
    in close c_584
  | i_585, zs_586, c_587 =>
    match (__lte__ i_585 0) in ?_101[0;0] -o ?_102[0;0] with
    | true_4 =>
      let* c_589 :=
        ((send c_587)
          (just_2‹??_118,??_119›
            ?_103[0;0] ((msort_34‹??_117›) zs_586)))
      in close c_589
    | false_5 =>
      match ((split_32‹??_120›) zs_586),
      (refl_1‹??_121› ?_104[0;0] ?_105[0;0]) in
        ∀ (h1_590 : ?_106[0;0]) -o
          {(eq_1‹??_129›
             ?_111[0;0]
             match h1_590 in ?_108[0;0] -o ?_107[0;0] with
             | (ex1_11 xs_593 ys_594) =>
               ((merge_33‹??_124›)
                 ((msort_34‹??_122›) xs_593)
                 ((msort_34‹??_123›) ys_594))
             match ((split_32‹??_125›) zs_586) in
               ?_110[0;0] -o ?_109[0;0]
             with
             | (ex1_11 xs_596 ys_597) =>
               ((merge_33‹??_128›)
                 ((msort_34‹??_126›) xs_596)
                 ((msort_34‹??_127›) ys_597)))} -o
            ?_112[0;0]
      with
      | (ex1_11 xs0_598 ys0_599), pf_600 =>
        let* r1_601 :=
          fork
            fun _602 : ?_113[0;0] -o IO unit_3
            | c1_604 =>
              ((cmsort_worker_574) (__sub__ i_585 1) xs0_598 c1_604)
        in
        let* r2_605 :=
          fork
            fun _606 : ?_114[0;0] -o IO unit_3
            | c2_608 =>
              ((cmsort_worker_574) (__sub__ i_585 1) ys0_599 c2_608)
        in
        let* _609 := recv r1_601 in
        match _609 in ?_127[0;0] -o ?_126[0;0] with
        | (ex1_11 (just_2 xs1_611) c1_612) =>
          let* _613 := recv r2_605 in
          match _613 in ?_125[0;0] -o ?_124[0;0] with
          | (ex1_11 (just_2 ys1_615) c2_616) =>
            let zs1_617 :=
              ((just_2‹??_131,??_132›
                 ?_115[0;0] ((merge_33‹??_130›) xs1_611 ys1_615))
                : ((ssing_6‹??_136›)
                    ?_116[0;0]
                    ((merge_33‹??_135›)
                      ((msort_34‹??_133›) xs0_598)
                      ((msort_34‹??_134›) ys0_599))))
            in
            let zs1_618 :=
              (((rwl_2‹??_138,??_139›)
                 ?_122[0;0] ?_121[0;0] ?_120[0;0]
                 fun _619 : ?_117[0;0] -> ?_118[0;0]
                 | x_621 => ((ssing_6‹??_137›) ?_119[0;0] x_621) pf_600
                 zs1_617)
                : ((ssing_6‹??_141›)
                    ?_123[0;0] ((msort_34‹??_140›) zs_586)))
            in
            let* c_622 := ((send c_587) zs1_618) in
            let* __623 := close c1_612 in
            let* __624 := close c2_616 in close c_622

#[program]
def cmsort_37‹t_625› :
  ∀ (zs_626 : (list_6‹??_147,t_625› int)) ->
    IO ((ssing_6‹??_149›) ?_132[0;0] ((msort_34‹??_148›) zs_626))
:=
  fun cmsort_627 :
    ∀ (zs_628 : (list_6‹??_143,t_625› int)) ->
      IO ((ssing_6‹??_145›) ?_128[0;0] ((msort_34‹??_144›) zs_628))
  | zs_629 =>
    let* c_630 :=
      fork
        fun _631 : ?_129[0;0] -o IO unit_3
        | c_633 => ((cmsort_worker_36‹??_146›) 4 zs_629 c_633)
    in
    let* _634 := recv c_630 in
    match _634 in ?_131[0;0] -o ?_130[0;0] with
    | (ex1_11 msg_636 c_637) => let* __638 := close c_637 in return msg_636

#[program]
def mklist_38‹t_639› : int -> (list_6‹??_155,t_639› int) :=
  fun mklist_641 : int -> (list_6‹??_150,t_639› int)
  | n_643 =>
    match (__lte__ n_643 0) in ?_133[0;0] -o ?_134[0;0] with
    | true_4 => (nil_8‹??_151,??_152› ?_135[0;0])
    | false_5 =>
      (cons_9‹??_153,??_154›
        ?_136[0;0] n_643 ((mklist_641) (__sub__ n_643 1)))

#[program]
def list_len_39‹t_645› : (list_6‹??_157,t_645› int) -> int :=
  fun list_len_647 : (list_6‹??_156,t_645› int) -> int
  | nil_8 => 0
  | (cons_9 _649 xs_650) => (__add__ 1 ((list_len_647) xs_650))

#[program]
def print_list_40‹t_651› : (list_6‹??_159,t_651› int) -> IO unit_3 :=
  fun print_list_653 : (list_6‹??_158,t_651› int) -> IO unit_3
  | nil_8 => print "nil"
  | (cons_9 x_655 xs_656) =>
    let* __657 := print ((string_of_int_31) x_655) in
    let* __658 := print " :: " in ((print_list_653) xs_656)

#[program]
def main_41‹› : IO unit_3 :=
  let test_659 := ((mklist_38‹L›) 2000000) in
  let* _660 := ((cmsort_37‹??_160›) test_659) in
  match _660 in ?_138[0;0] -o ?_137[0;0] with
  | (just_2 sorted_662) =>
    let len_663 := ((list_len_39‹??_161›) sorted_662) in
    print ((string_of_int_31) len_663)

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_11844› :
  ∀ (A_11845 : Type‹s_11844›) -> A_11845 -> A_11845
:=
  fun id_11847 : ∀ (A_11848 : Type‹s_11844›) -> A_11848 -> A_11848
  | A_11850, m_11851 => m_11851

#[logical]
inductive eq_1‹s_11852› (A_11853 : Type‹s_11852›) (m_11854 : A_11853):
  A_11853 -> U
where
| refl_1 : (eq_1‹s_11852› A_11853 m_11854 m_11854)

#[program]
def rwl_2‹s_11856,r_11857› :
  ∀ {A_11858 : Type‹s_11856›} ->
    ∀ {m_11859 : A_11858} ->
      ∀ {n_11860 : A_11858} ->
        ∀ {B_11861 : A_11858 -> Type‹r_11857›} ->
          {(eq_1‹s_11856› A_11858 m_11859 n_11860)} ->
            ((B_11861) m_11859) -> ((B_11861) n_11860)
:=
  fun rwl_11865 :
    ∀ {A_11866 : Type‹s_11856›} ->
      ∀ {m_11867 : A_11866} ->
        ∀ {n_11868 : A_11866} ->
          ∀ {B_11869 : A_11866 -> Type‹r_11857›} ->
            {(eq_1‹s_11856› A_11866 m_11867 n_11868)} ->
              ((B_11869) m_11867) -> ((B_11869) n_11868)
  | A_11873, m_11874, n_11875, B_11876, refl_1, __11877 => __11877

#[program]
def rwr_3‹s_11878,r_11879› :
  ∀ {A_11880 : Type‹s_11878›} ->
    ∀ {m_11881 : A_11880} ->
      ∀ {n_11882 : A_11880} ->
        ∀ {B_11883 : A_11880 -> Type‹r_11879›} ->
          {(eq_1‹s_11878› A_11880 m_11881 n_11882)} ->
            ((B_11883) n_11882) -> ((B_11883) m_11881)
:=
  fun rwr_11887 :
    ∀ {A_11888 : Type‹s_11878›} ->
      ∀ {m_11889 : A_11888} ->
        ∀ {n_11890 : A_11888} ->
          ∀ {B_11891 : A_11888 -> Type‹r_11879›} ->
            {(eq_1‹s_11878› A_11888 m_11889 n_11890)} ->
              ((B_11891) n_11890) -> ((B_11891) m_11889)
  | A_11895, m_11896, n_11897, B_11898, refl_1, __11899 => __11899

#[logical]
def congr_4‹s_11900,r_11901,t_11902› :
  ∀ (A_11903 : Type‹s_11900›) ->
    ∀ (B_11904 : Type‹r_11901›) ->
      ∀ (m_11905 : A_11903) ->
        ∀ (n_11906 : A_11903) ->
          ∀ (f_11907 : forall‹t_11902›(__11908 : A_11903), B_11904) ->
            (eq_1‹s_11900› A_11903 m_11905 n_11906) ->
              (eq_1‹r_11901›
                B_11904 ((f_11907) m_11905) ((f_11907) n_11906))
:=
  fun congr_11910 :
    ∀ (A_11911 : Type‹s_11900›) ->
      ∀ (B_11912 : Type‹r_11901›) ->
        ∀ (m_11913 : A_11911) ->
          ∀ (n_11914 : A_11911) ->
            ∀ (f_11915 :
              forall‹t_11902›(__11916 : A_11911), B_11912) ->
              (eq_1‹s_11900› A_11911 m_11913 n_11914) ->
                (eq_1‹r_11901›
                  B_11912 ((f_11915) m_11913) ((f_11915) n_11914))
  | A_11918, B_11919, m_11920, n_11921, f_11922, refl_1 =>
    (refl_1‹r_11901› B_11919 ((f_11922) n_11921))

#[logical]
def axiom_K_5‹› :
  ∀ {A_11923 : U} ->
    ∀ {m_11924 : A_11923} ->
      ∀ (x_11925 : (eq_1‹U› A_11923 m_11924 m_11924)) ->
        (eq_1‹U›
          (eq_1‹U› A_11923 m_11924 m_11924) x_11925
          (refl_1‹U› A_11923 m_11924))
:=
  fun axiom_K_11926 :
    ∀ {A_11927 : U} ->
      ∀ {m_11928 : A_11927} ->
        ∀ (x_11929 : (eq_1‹U› A_11927 m_11928 m_11928)) ->
          (eq_1‹U›
            (eq_1‹U› A_11927 m_11928 m_11928) x_11929
            (refl_1‹U› A_11927 m_11928))
  | A_11930, m_11931, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_11930 m_11931 m_11931) (refl_1‹U› A_11930 m_11931))

#[program]
inductive sing_2‹s_11932,t_11933› (A_11934 : Type‹s_11932›):
  A_11934 -> Type‹t_11933›
where
| just_2 (m_11936 : A_11934) : (sing_2‹s_11932,t_11933› A_11934 m_11936)

#[logical]
def ssing_6‹s_11937› :
  ∀ (A_11938 : Type‹s_11937›) -> A_11938 -> Type‹s_11937›
:=
  fun ssing_11940 :
    ∀ (A_11941 : Type‹s_11937›) -> A_11941 -> Type‹s_11937›
  | A_11943, m_11944 => (sing_2‹s_11937,s_11937› A_11943 m_11944)

#[program]
def sing_elim_7‹s_11945,t_11946› :
  ∀ {A_11947 : Type‹s_11945›} ->
    ∀ {x_11948 : A_11947} ->
      (sing_2‹s_11945,t_11946› A_11947 x_11948) -> A_11947
:=
  fun sing_elim_11950 :
    ∀ {A_11951 : Type‹s_11945›} ->
      ∀ {x_11952 : A_11951} ->
        (sing_2‹s_11945,t_11946› A_11951 x_11952) -> A_11951
  | A_11954, x_11955, (just_2 m_11956) => m_11956

#[logical]
def sing_uniq_8‹s_11957,t_11958› :
  ∀ (A_11959 : Type‹s_11957›) ->
    ∀ (x0_11960 : A_11959) ->
      ∀ (x_11961 : (sing_2‹s_11957,t_11958› A_11959 x0_11960)) ->
        (eq_1‹s_11957›
          A_11959 x0_11960
          ((sing_elim_7‹s_11957,t_11958›) A_11959 x0_11960 x_11961))
:=
  fun sing_uniq_11962 :
    ∀ (A_11963 : Type‹s_11957›) ->
      ∀ (x0_11964 : A_11963) ->
        ∀ (x_11965 : (sing_2‹s_11957,t_11958› A_11963 x0_11964)) ->
          (eq_1‹s_11957›
            A_11963 x0_11964
            ((sing_elim_7‹s_11957,t_11958›) A_11963 x0_11964 x_11965))
  | A_11966, x0_11967, (just_2 m_11968) =>
    (refl_1‹s_11957› A_11966 m_11968)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_11969 : unit_3) -> (eq_1‹U› unit_3 x_11969 tt_3)
:=
  fun unit_eta_11970 :
    ∀ (x_11971 : unit_3) -> (eq_1‹U› unit_3 x_11971 tt_3)
  | x_11972 =>
    match x_11972 in
      ∀ (x0_11973 : unit_3) -o (eq_1‹U› unit_3 x0_11973 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_11975 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_11979 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __11982 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_11985 : bool_4 -> bool_4 -> bool_4
  | true_4, __11988 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -> bool_4 :=
  fun xor_11991 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_11994 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_11997 : nat_5 -> nat_5 -> bool_4
  | zero_6, __12000 => true_4
  | (succ_7 n_12001), zero_6 => false_5
  | (succ_7 n_12002), (succ_7 n_12003) => ((lte_11997) n_12002 n_12003)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_12006 : nat_5 -> nat_5 -> bool_4
  | x_12009, y_12010 => ((lte_14) (succ_7‹› x_12009) y_12010)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_12012 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_12014) => n_12014

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_12017 : nat_5 -> nat_5 -> nat_5
  | zero_6, __12020 => __12020
  | (succ_7 n_12021), __12022 => (succ_7‹› ((add_12017) n_12021 __12022))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_12025 : nat_5 -> nat_5 -> nat_5
  | __12028, zero_6 => __12028
  | __12029, (succ_7 n_12030) => ((sub_12025) ((pred_16) __12029) n_12030)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_12033 : nat_5 -> nat_5 -> nat_5
  | zero_6, __12036 => zero_6
  | (succ_7 n_12037), __12038 =>
    ((add_17) __12038 ((mul_12033) n_12037 __12038))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_12041 : nat_5 -> nat_5 -> nat_5
  | x_12044, y_12045 =>
    match ((lt_15) x_12044 y_12045) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_12047 :=
        fun loop_12048 : nat_5 -> nat_5 -> nat_5
        | x_12051, y_12052 =>
          match ((sub_18) x_12051 ((pred_16) y_12052)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_12054) => (succ_7‹› ((loop_12048) n_12054 y_12052))
      in ((loop_12047) x_12044 y_12045)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_12057 : nat_5 -> nat_5 -> nat_5
  | x_12060, y_12061 =>
    ((sub_18) x_12060 ((mul_19) ((div_20) x_12060 y_12061) y_12061))

#[program]
inductive list_6‹s_12062,t_12063› (A_12064 : Type‹s_12062›):
  Type‹t_12063›
where
| nil_8 : (list_6‹s_12062,t_12063› A_12064)
| cons_9
    (hd_12065 : A_12064) (tl_12066 : (list_6‹s_12062,t_12063› A_12064))
    : (list_6‹s_12062,t_12063› A_12064)

#[program]
def free_list_22‹s_12067,t_12068› :
  ∀ {A_12069 : Type‹s_12067›} ->
    A_12069 -> unit_3 -> (list_6‹s_12067,t_12068› A_12069) -> unit_3
:=
  fun free_list_12073 :
    ∀ {A_12074 : Type‹s_12067›} ->
      A_12074 -> unit_3 -> (list_6‹s_12067,t_12068› A_12074) -> unit_3
  | A_12078, f_12079, nil_8 => tt_3
  | A_12080, f_12081, (cons_9 hd_12082 tl_12083) =>
    let __12084 := ((f_12081) hd_12082) in
    ((free_list_12073) A_12080 f_12081 tl_12083)

#[program]
inductive exists0_7‹s_12085,r_12086› (A_12087 : Type‹s_12085›) (B_12088 : 
A_12087 -> Type‹r_12086›): L where
| ex0_10
    {m_12090 : A_12087} (n_12091 : ((B_12088) m_12090))
    : (exists0_7‹s_12085,r_12086› A_12087 B_12088)

#[program]
inductive exists1_8‹s_12092,r_12093› (A_12094 : Type‹s_12092›) (B_12095 : 
A_12094 -> Type‹r_12093›): L where
| ex1_11
    (m_12097 : A_12094) (n_12098 : ((B_12095) m_12097))
    : (exists1_8‹s_12092,r_12093› A_12094 B_12095)

#[logical]
def prod0_23‹s_12099,r_12100› :
  Type‹s_12099› -> Type‹r_12100› -> L
:=
  fun prod0_12103 : Type‹s_12099› -> Type‹r_12100› -> L
  | A_12106, B_12107 =>
    (exists0_7‹s_12099,r_12100›
      A_12106 fun _12108 : A_12106 -> Type‹r_12100›
              | __12110 => B_12107)

#[logical]
def prod1_24‹s_12111,r_12112› :
  Type‹s_12111› -> Type‹r_12112› -> L
:=
  fun prod1_12115 : Type‹s_12111› -> Type‹r_12112› -> L
  | A_12118, B_12119 =>
    (exists1_8‹s_12111,r_12112›
      A_12118 fun _12120 : A_12118 -> Type‹r_12112›
              | __12122 => B_12119)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_12125 : int -> int -> int
  | x_12128, y_12129 =>
    let loop_12130 :=
      fun loop_12131 : int -> int -> int
      | acc_12134, y_12135 =>
        match (__lte__ y_12135 0) in bool_4 -o int with
        | true_4 => acc_12134
        | false_5 =>
          ((loop_12131) (__mul__ x_12128 acc_12134) (__sub__ y_12135 1))
    in ((loop_12130) 1 y_12129)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_12140 : int -> int -> int -> int
  | x_12144, y_12145, m_12146 =>
    let loop_12147 :=
      fun loop_12148 : int -> int -> int
      | acc_12151, y_12152 =>
        match (__lte__ y_12152 0) in bool_4 -o int with
        | true_4 => acc_12151
        | false_5 =>
          ((loop_12148)
            (__mod__ (__mul__ x_12144 acc_12151) m_12146) (__sub__ y_12152 1))
    in ((loop_12147) 1 y_12145)

#[program]
def ord_27‹› : char -> int :=
  fun ord_12155 : char -> int
  | c_12157 => (__ord__ c_12157)

#[program]
def chr_28‹› : int -> char :=
  fun chr_12159 : int -> char
  | i_12161 => (__chr__ i_12161)

#[program]
def str_29‹› : char -> string :=
  fun str_12163 : char -> string
  | c_12165 => (__push__ "" c_12165)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_12167 : string -> int
  | s_12169 => (__size__ s_12169)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_12171 : int -> string
  | i_12173 =>
    let aux_12174 :=
      fun aux_12175 : int -> string
      | i_12177 =>
        match (__lte__ 10 i_12177) in bool_4 -o string with
        | true_4 =>
          let r_12179 := (__mod__ i_12177 10) in
          let i_12180 := (__div__ i_12177 10) in
          (__push__ ((aux_12175) i_12180)
            ((chr_28) (__add__ r_12179 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_12177 ((ord_27) 0))))
    in
    match (__lte__ 0 i_12173) in bool_4 -o string with
    | true_4 => ((aux_12174) i_12173)
    | false_5 => (__cat__ "~" ((aux_12174) (__neg__ i_12173)))

#[program]
def split_32‹t_12182› :
  (list_6‹U,t_12182› int) ->
    ((prod1_24‹t_12182,t_12182›)
      (list_6‹U,t_12182› int) (list_6‹U,t_12182› int))
:=
  fun split_12184 :
    (list_6‹U,t_12182› int) ->
      ((prod1_24‹t_12182,t_12182›)
        (list_6‹U,t_12182› int) (list_6‹U,t_12182› int))
  | nil_8 =>
    (ex1_11‹t_12182,t_12182›
      (list_6‹U,t_12182› int)
      fun _12186 : (list_6‹U,t_12182› int) -> Type‹t_12182›
      | __12188 => (list_6‹U,t_12182› int) (nil_8‹U,t_12182› int)
      (nil_8‹U,t_12182› int))
  | (cons_9 hd_12189 nil_8) =>
    (ex1_11‹t_12182,t_12182›
      (list_6‹U,t_12182› int)
      fun _12190 : (list_6‹U,t_12182› int) -> Type‹t_12182›
      | __12192 => (list_6‹U,t_12182› int)
      (cons_9‹U,t_12182› int hd_12189 (nil_8‹U,t_12182› int))
      (nil_8‹U,t_12182› int))
  | (cons_9 hd_12193 (cons_9 hd_12194 tl_12195)) =>
    match ((split_12184) tl_12195) in
      ((prod1_24‹t_12182,t_12182›)
        (list_6‹U,t_12182› int) (list_6‹U,t_12182› int)) -o
        ((prod1_24‹t_12182,t_12182›)
          (list_6‹U,t_12182› int) (list_6‹U,t_12182› int))
    with
    | (ex1_11 m_12197 n_12198) =>
      (ex1_11‹t_12182,t_12182›
        (list_6‹U,t_12182› int)
        fun _12199 : (list_6‹U,t_12182› int) -> Type‹t_12182›
        | __12201 => (list_6‹U,t_12182› int)
        (cons_9‹U,t_12182› int hd_12193 m_12197)
        (cons_9‹U,t_12182› int hd_12194 n_12198))

#[program]
def merge_33‹t_12202› :
  (list_6‹U,t_12202› int) ->
    (list_6‹U,t_12202› int) -o (list_6‹U,t_12202› int)
:=
  fun merge_12205 :
    (list_6‹U,t_12202› int) ->
      (list_6‹U,t_12202› int) -o (list_6‹U,t_12202› int)
  | nil_8, __12208 => __12208
  | (cons_9 hd_12209 tl_12210), nil_8 =>
    (cons_9‹U,t_12202› int hd_12209 tl_12210)
  | (cons_9 hd_12211 tl_12212), (cons_9 hd_12213 tl_12214) =>
    match (__lte__ hd_12211 hd_12213) in
      bool_4 -o (list_6‹U,t_12202› int)
    with
    | true_4 =>
      (cons_9‹U,t_12202›
        int hd_12211
        ((merge_12205)
          tl_12212 (cons_9‹U,t_12202› int hd_12213 tl_12214)))
    | false_5 =>
      (cons_9‹U,t_12202›
        int hd_12213
        ((merge_12205)
          (cons_9‹U,t_12202› int hd_12211 tl_12212) tl_12214))

#[program]
def msort_34‹t_12216› :
  (list_6‹U,t_12216› int) -> (list_6‹U,t_12216› int)
:=
  fun msort_12218 :
    (list_6‹U,t_12216› int) -> (list_6‹U,t_12216› int)
  | nil_8 => (nil_8‹U,t_12216› int)
  | (cons_9 hd_12220 nil_8) =>
    (cons_9‹U,t_12216› int hd_12220 (nil_8‹U,t_12216› int))
  | (cons_9 hd_12221 (cons_9 hd_12222 tl_12223)) =>
    match ((split_32‹t_12216›)
            (cons_9‹U,t_12216›
              int hd_12221 (cons_9‹U,t_12216› int hd_12222 tl_12223))) in
      ((prod1_24‹t_12216,t_12216›)
        (list_6‹U,t_12216› int) (list_6‹U,t_12216› int)) -o
        (list_6‹U,t_12216› int)
    with
    | (ex1_11 m_12225 n_12226) =>
      ((merge_33‹t_12216›)
        ((msort_12218) m_12225) ((msort_12218) n_12226))

#[logical]
def cmsort_ch_35‹t_12227› : (list_6‹U,t_12227› int) -> L :=
  fun cmsort_ch_12229 : (list_6‹U,t_12227› int) -> L
  | xs_12231 =>
    ch⟨⇑(__12232 :
           ((ssing_6‹t_12227›)
             (list_6‹U,t_12227› int) ((msort_34‹t_12227›) xs_12231))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_12233› :
  int ->
    ∀ (zs_12235 : (list_6‹U,t_12233› int)) ->
      ((cmsort_ch_35‹t_12233›) zs_12235) -o IO unit_3
:=
  fun cmsort_worker_12237 :
    int ->
      ∀ (zs_12239 : (list_6‹U,t_12233› int)) ->
        ((cmsort_ch_35‹t_12233›) zs_12239) -o IO unit_3
  | __12241, nil_8, __12242 =>
    let* c_12243 :=
      ((send __12242)
        (just_2‹t_12233,t_12233›
          (list_6‹U,t_12233› int) (nil_8‹U,t_12233› int)))
    in close c_12243
  | __12244, (cons_9 hd_12245 nil_8), __12246 =>
    let* c_12247 :=
      ((send __12246)
        (just_2‹t_12233,t_12233›
          (list_6‹U,t_12233› int)
          (cons_9‹U,t_12233› int hd_12245 (nil_8‹U,t_12233› int))))
    in close c_12247
  | __12248, (cons_9 hd_12249 (cons_9 hd_12250 tl_12251)), __12252 =>
    match (__lte__ __12248 0) in bool_4 -o IO unit_3 with
    | true_4 =>
      let* c_12254 :=
        ((send __12252)
          (just_2‹t_12233,t_12233›
            (list_6‹U,t_12233› int)
            ((msort_34‹t_12233›)
              (cons_9‹U,t_12233›
                int hd_12249 (cons_9‹U,t_12233› int hd_12250 tl_12251)))))
      in close c_12254
    | false_5 =>
      match ((split_32‹t_12233›)
              (cons_9‹U,t_12233›
                int hd_12249 (cons_9‹U,t_12233› int hd_12250 tl_12251))),
      (refl_1‹t_12233›
        (list_6‹U,t_12233› int)
        match ((split_32‹t_12233›)
                (cons_9‹U,t_12233›
                  int hd_12249 (cons_9‹U,t_12233› int hd_12250 tl_12251))) in
          ((prod1_24‹t_12233,t_12233›)
            (list_6‹U,t_12233› int) (list_6‹U,t_12233› int)) -o
            (list_6‹U,t_12233› int)
        with
        | (ex1_11 m_12256 n_12257) =>
          ((merge_33‹t_12233›)
            ((msort_34‹t_12233›) m_12256)
            ((msort_34‹t_12233›) n_12257))) in
        ∀ (h1_12258 :
          ((prod1_24‹t_12233,t_12233›)
            (list_6‹U,t_12233› int) (list_6‹U,t_12233› int))) -o
          {(eq_1‹t_12233›
             (list_6‹U,t_12233› int)
             match h1_12258 in
               ((prod1_24‹t_12233,t_12233›)
                 (list_6‹U,t_12233› int) (list_6‹U,t_12233› int)) -o
                 (list_6‹U,t_12233› int)
             with
             | (ex1_11 m_12261 n_12262) =>
               ((merge_33‹t_12233›)
                 ((msort_34‹t_12233›) m_12261)
                 ((msort_34‹t_12233›) n_12262))
             match ((split_32‹t_12233›)
                     (cons_9‹U,t_12233›
                       int hd_12249
                       (cons_9‹U,t_12233› int hd_12250 tl_12251))) in
               ((prod1_24‹t_12233,t_12233›)
                 (list_6‹U,t_12233› int) (list_6‹U,t_12233› int)) -o
                 (list_6‹U,t_12233› int)
             with
             | (ex1_11 m_12264 n_12265) =>
               ((merge_33‹t_12233›)
                 ((msort_34‹t_12233›) m_12264)
                 ((msort_34‹t_12233›) n_12265)))} -o
            IO unit_3
      with
      | (ex1_11 m_12266 n_12267), __12268 =>
        let* r1_12269 :=
          fork
            fun _12270 : ((cmsort_ch_35‹t_12233›) m_12266) -o IO unit_3
            | _12272 =>
              ((cmsort_worker_12237) (__sub__ __12248 1) m_12266 _12272)
        in
        let* r2_12273 :=
          fork
            fun _12274 : ((cmsort_ch_35‹t_12233›) n_12267) -o IO unit_3
            | _12276 =>
              ((cmsort_worker_12237) (__sub__ __12248 1) n_12267 _12276)
        in
        let* _12277 := recv r1_12269 in
        match _12277 in
          (exists1_8‹t_12233,L›
            ((ssing_6‹t_12233›)
              (list_6‹U,t_12233› int) ((msort_34‹t_12233›) m_12266))
            fun _12279 :
              ((ssing_6‹t_12233›)
                (list_6‹U,t_12233› int) ((msort_34‹t_12233›) m_12266)) ->
                L
            | __12281 => hc⟨•⟩) -o IO unit_3
        with
        | (ex1_11 (just_2 m_12282) n_12283) =>
          let* _12284 := recv r2_12273 in
          match _12284 in
            (exists1_8‹t_12233,L›
              ((ssing_6‹t_12233›)
                (list_6‹U,t_12233› int) ((msort_34‹t_12233›) n_12267))
              fun _12286 :
                ((ssing_6‹t_12233›)
                  (list_6‹U,t_12233› int)
                  ((msort_34‹t_12233›) n_12267)) -> L
              | __12288 => hc⟨•⟩) -o IO unit_3
          with
          | (ex1_11 (just_2 m_12289) n_12290) =>
            let zs1_12291 :=
              ((just_2‹t_12233,t_12233›
                 (list_6‹U,t_12233› int)
                 ((merge_33‹t_12233›) m_12282 m_12289))
                : ((ssing_6‹t_12233›)
                    (list_6‹U,t_12233› int)
                    ((merge_33‹t_12233›)
                      ((msort_34‹t_12233›) m_12266)
                      ((msort_34‹t_12233›) n_12267))))
            in
            let zs1_12292 :=
              (((rwl_2‹t_12233,t_12233›)
                 (list_6‹U,t_12233› int)
                 ((merge_33‹t_12233›)
                   ((msort_34‹t_12233›) m_12266)
                   ((msort_34‹t_12233›) n_12267))
                 match ((split_32‹t_12233›)
                         (cons_9‹U,t_12233›
                           int hd_12249
                           (cons_9‹U,t_12233› int hd_12250 tl_12251))) in
                   ((prod1_24‹t_12233,t_12233›)
                     (list_6‹U,t_12233› int) (list_6‹U,t_12233› int)) -o
                     (list_6‹U,t_12233› int)
                 with
                 | (ex1_11 m_12294 n_12295) =>
                   ((merge_33‹t_12233›)
                     ((msort_34‹t_12233›) m_12294)
                     ((msort_34‹t_12233›) n_12295))
                 fun _12296 :
                   (list_6‹U,t_12233› int) -> Type‹t_12233›
                 | __12298 =>
                   ((ssing_6‹t_12233›)
                     (list_6‹U,t_12233› int) __12298)
                 __12268 zs1_12291)
                : ((ssing_6‹t_12233›)
                    (list_6‹U,t_12233› int)
                    ((msort_34‹t_12233›)
                      (cons_9‹U,t_12233›
                        int hd_12249
                        (cons_9‹U,t_12233› int hd_12250 tl_12251)))))
            in
            let* c_12299 := ((send __12252) zs1_12292) in
            let* __12300 := close n_12283 in
            let* __12301 := close n_12290 in close c_12299

#[program]
def cmsort_37‹t_12302› :
  ∀ (zs_12303 : (list_6‹U,t_12302› int)) ->
    IO ((ssing_6‹t_12302›)
         (list_6‹U,t_12302› int) ((msort_34‹t_12302›) zs_12303))
:=
  fun cmsort_12304 :
    ∀ (zs_12305 : (list_6‹U,t_12302› int)) ->
      IO ((ssing_6‹t_12302›)
           (list_6‹U,t_12302› int) ((msort_34‹t_12302›) zs_12305))
  | zs_12306 =>
    let* c_12307 :=
      fork
        fun _12308 : ((cmsort_ch_35‹t_12302›) zs_12306) -o IO unit_3
        | _12310 => ((cmsort_worker_36‹t_12302›) 4 zs_12306 _12310)
    in
    let* _12311 := recv c_12307 in
    match _12311 in
      (exists1_8‹t_12302,L›
        ((ssing_6‹t_12302›)
          (list_6‹U,t_12302› int) ((msort_34‹t_12302›) zs_12306))
        fun _12313 :
          ((ssing_6‹t_12302›)
            (list_6‹U,t_12302› int) ((msort_34‹t_12302›) zs_12306)) ->
            L
        | __12315 => hc⟨•⟩) -o
        IO ((ssing_6‹t_12302›)
             (list_6‹U,t_12302› int) ((msort_34‹t_12302›) zs_12306))
    with
    | (ex1_11 m_12316 n_12317) =>
      let* __12318 := close n_12317 in return m_12316

#[program]
def mklist_38‹t_12319› : int -> (list_6‹U,t_12319› int) :=
  fun mklist_12321 : int -> (list_6‹U,t_12319› int)
  | n_12323 =>
    match (__lte__ n_12323 0) in bool_4 -o (list_6‹U,t_12319› int) with
    | true_4 => (nil_8‹U,t_12319› int)
    | false_5 =>
      (cons_9‹U,t_12319›
        int n_12323 ((mklist_12321) (__sub__ n_12323 1)))

#[program]
def list_len_39‹t_12325› : (list_6‹U,t_12325› int) -> int :=
  fun list_len_12327 : (list_6‹U,t_12325› int) -> int
  | nil_8 => 0
  | (cons_9 hd_12329 tl_12330) => (__add__ 1 ((list_len_12327) tl_12330))

#[program]
def print_list_40‹t_12331› : (list_6‹U,t_12331› int) -> IO unit_3 :=
  fun print_list_12333 : (list_6‹U,t_12331› int) -> IO unit_3
  | nil_8 => print "nil"
  | (cons_9 hd_12335 tl_12336) =>
    let* __12337 := print ((string_of_int_31) hd_12335) in
    let* __12338 := print " :: " in ((print_list_12333) tl_12336)

#[program]
def main_41‹› : IO unit_3 :=
  let test_12339 := ((mklist_38‹L›) 2000000) in
  let* _12340 := ((cmsort_37‹L›) test_12339) in
  match _12340 in
    ((ssing_6‹L›) (list_6‹U,L› int) ((msort_34‹L›) test_12339)) -o
      IO unit_3
  with
  | (just_2 m_12342) =>
    let len_12343 := ((list_len_39‹L›) m_12342) in
    print ((string_of_int_31) len_12343)

[trans1e success]

-----------------------------------------

#[program]
def idU_43 := fun id_21022 (A_21023) -> (m_21024) ->
                m_21024

#[program]
def idL_42 := fun id_21025 (A_21026) -> (m_21027) ->
                m_21027

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_21028 {A_21029} -> {m_21030} -> {n_21031} -> {B_21032} ->
  {__21033} -> (__21034) ->
    match {NULL} with
    | reflU_13  => __21034
    end

#[program]
def rwlUL_46 :=
  fun rwl_21035 {A_21036} -> {m_21037} -> {n_21038} -> {B_21039} ->
  {__21040} -> (__21041) ->
    match {NULL} with
    | reflU_13  => __21041
    end

#[program]
def rwlLU_45 :=
  fun rwl_21042 {A_21043} -> {m_21044} -> {n_21045} -> {B_21046} ->
  {__21047} -> (__21048) ->
    match {NULL} with
    | reflL_12  => __21048
    end

#[program]
def rwlLL_44 :=
  fun rwl_21049 {A_21050} -> {m_21051} -> {n_21052} -> {B_21053} ->
  {__21054} -> (__21055) ->
    match {NULL} with
    | reflL_12  => __21055
    end

#[program]
def rwrUU_51 :=
  fun rwr_21056 {A_21057} -> {m_21058} -> {n_21059} -> {B_21060} ->
  {__21061} -> (__21062) ->
    match {NULL} with
    | reflU_13  => __21062
    end

#[program]
def rwrUL_50 :=
  fun rwr_21063 {A_21064} -> {m_21065} -> {n_21066} -> {B_21067} ->
  {__21068} -> (__21069) ->
    match {NULL} with
    | reflU_13  => __21069
    end

#[program]
def rwrLU_49 :=
  fun rwr_21070 {A_21071} -> {m_21072} -> {n_21073} -> {B_21074} ->
  {__21075} -> (__21076) ->
    match {NULL} with
    | reflL_12  => __21076
    end

#[program]
def rwrLL_48 :=
  fun rwr_21077 {A_21078} -> {m_21079} -> {n_21080} -> {B_21081} ->
  {__21082} -> (__21083) ->
    match {NULL} with
    | reflL_12  => __21083
    end

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_21084 {A_21085} -> {x_21086} -> (__21087) ->
    match __21087 with
    | justUU_17 m_21088 => m_21088
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_21089 {A_21090} -> {x_21091} -> (__21092) ->
    match __21092 with
    | justUL_16 m_21093 => m_21093
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_21094 {A_21095} -> {x_21096} -> (__21097) ->
    match __21097 with
    
    end

#[program]
def sing_elimLL_62 :=
  fun sing_elim_21098 {A_21099} -> {x_21100} -> (__21101) ->
    match __21101 with
    | justLL_14 m_21102 => m_21102
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_21103 (__21104) ->
    match __21104 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_21105 (__21106) -> (__21107) ->
    match __21106 with
    | true_4  =>
      match __21107 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_21108 (__21109) -> (__21110) ->
    match __21109 with
    | true_4  => true_4
    | false_5  =>
      match __21110 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_21111 (__21112) -> (__21113) ->
    match __21112 with
    | true_4  =>
      match __21113 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __21113 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_21114 (__21115) -> (__21116) ->
    match __21115 with
    | zero_6  => true_4
    | succ_7 n_21117 =>
      match __21116 with
      | zero_6  => false_5 | succ_7 n_21118 => ((lte_21114) n_21117 n_21118)
      end
    end

#[program]
def lt_15 :=
  fun lt_21119 (x_21120) -> (y_21121) ->
    ((lte_14) (succ_7 x_21120) y_21121)

#[program]
def pred_16 :=
  fun pred_21122 (__21123) ->
    match __21123 with
    | zero_6  => zero_6 | succ_7 n_21124 => n_21124
    end

#[program]
def add_17 :=
  fun add_21125 (__21126) -> (__21127) ->
    match __21126 with
    | zero_6  => __21127
    | succ_7 n_21128 => (succ_7 ((add_21125) n_21128 __21127))
    end

#[program]
def sub_18 :=
  fun sub_21129 (__21130) -> (__21131) ->
    match __21131 with
    | zero_6  => __21130
    | succ_7 n_21132 => ((sub_21129) ((pred_16) __21130) n_21132)
    end

#[program]
def mul_19 :=
  fun mul_21133 (__21134) -> (__21135) ->
    match __21134 with
    | zero_6  => zero_6
    | succ_7 n_21136 => ((add_17) __21135 ((mul_21133) n_21136 __21135))
    end

#[program]
def div_20 :=
  fun div_21137 (x_21138) -> (y_21139) ->
    match ((lt_15) x_21138 y_21139) with
    | true_4  => zero_6
    | false_5  =>
      let loop_21140 :=
        fun loop_21141 (x_21142) -> (y_21143) ->
          match ((sub_18) x_21142 ((pred_16) y_21143)) with
          | zero_6  => zero_6
          | succ_7 n_21144 => (succ_7 ((loop_21141) n_21144 y_21143))
          end
      in ((loop_21140) x_21138 y_21139)
    end

#[program]
def rem_21 :=
  fun rem_21145 (x_21146) -> (y_21147) ->
    ((sub_18) x_21146 ((mul_19) ((div_20) x_21146 y_21147) y_21147))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_21148 {A_21149} -> (f_21150) -> (__21151) ->
    match __21151 with
    | nilUU_24  => tt_3
    | consUU_25 hd_21152 tl_21153 =>
      let __21154 := ((f_21150) hd_21152) in
      ((free_list_21148) NULL f_21150 tl_21153)
    end

#[program]
def free_listUL_72 :=
  fun free_list_21155 {A_21156} -> (f_21157) -> (__21158) ->
    match __21158 with
    | nilUL_22  => tt_3
    | consUL_23 hd_21159 tl_21160 =>
      let __21161 := ((f_21157) hd_21159) in
      ((free_list_21155) NULL f_21157 tl_21160)
    end

#[program]
def free_listLL_70 :=
  fun free_list_21162 {A_21163} -> (f_21164) -> (__21165) ->
    match __21165 with
    | nilLL_18  => tt_3
    | consLL_19 hd_21166 tl_21167 =>
      let __21168 := ((f_21164) hd_21166) in
      ((free_list_21162) NULL f_21164 tl_21167)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_21169 (x_21170) -> (y_21171) ->
    let loop_21172 :=
      fun loop_21173 (acc_21174) -> (y_21175) ->
        match (__lte__ y_21175 0) with
        | true_4  => acc_21174
        | false_5  =>
          ((loop_21173) (__mul__ x_21170 acc_21174) (__sub__ y_21175 1))
        end
    in ((loop_21172) 1 y_21171)

#[program]
def powm_26 :=
  fun powm_21176 (x_21177) -> (y_21178) -> (m_21179) ->
    let loop_21180 :=
      fun loop_21181 (acc_21182) -> (y_21183) ->
        match (__lte__ y_21183 0) with
        | true_4  => acc_21182
        | false_5  =>
          ((loop_21181)
            (__mod__ (__mul__ x_21177 acc_21182) m_21179) (__sub__ y_21183 1))
        end
    in ((loop_21180) 1 y_21178)

#[program]
def ord_27 := fun ord_21184 (c_21185) ->
                (__ord__ c_21185)

#[program]
def chr_28 := fun chr_21186 (i_21187) ->
                (__chr__ i_21187)

#[program]
def str_29 := fun str_21188 (c_21189) ->
                (__push__ "" c_21189)

#[program]
def strlen_30 := fun strlen_21190 (s_21191) ->
                   (__size__ s_21191)

#[program]
def string_of_int_31 :=
  fun string_of_int_21192 (i_21193) ->
    let aux_21194 :=
      fun aux_21195 (i_21196) ->
        match (__lte__ 10 i_21196) with
        | true_4  =>
          let r_21197 := (__mod__ i_21196 10) in
          let i_21198 := (__div__ i_21196 10) in
          (__push__ ((aux_21195) i_21198)
            ((chr_28) (__add__ r_21197 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_21196 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_21193) with
    | true_4  => ((aux_21194) i_21193)
    | false_5  => (__cat__ "~" ((aux_21194) (__neg__ i_21193)))
    end

#[program]
def splitU_83 :=
  fun split_21199 (__21200) ->
    match __21200 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_21201 tl_21202 =>
      match tl_21202 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_21201 nilUU_24) nilUU_24)
      | consUU_25 hd_21203 tl_21204 =>
        match ((split_21199) tl_21204) with
        | ex1UU_33 m_21205 n_21206 =>
          (ex1UU_33
            (consUU_25 hd_21201 m_21205) (consUU_25 hd_21203 n_21206))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_21207 (__21208) ->
    match __21208 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_21209 tl_21210 =>
      match tl_21210 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_21209 nilUL_22) nilUL_22)
      | consUL_23 hd_21211 tl_21212 =>
        match ((split_21207) tl_21212) with
        | ex1LL_30 m_21213 n_21214 =>
          (ex1LL_30
            (consUL_23 hd_21209 m_21213) (consUL_23 hd_21211 n_21214))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_21215 (__21216) -> (__21217) -o
    match __21216 with
    | nilUU_24  => __21217
    | consUU_25 hd_21218 tl_21219 =>
      match __21217 with
      | nilUU_24  => (consUU_25 hd_21218 tl_21219)
      | consUU_25 hd_21220 tl_21221 =>
        match (__lte__ hd_21218 hd_21220) with
        | true_4  =>
          (consUU_25
            hd_21218 ((merge_21215) tl_21219 (consUU_25 hd_21220 tl_21221)))
        | false_5  =>
          (consUU_25
            hd_21220 ((merge_21215) (consUU_25 hd_21218 tl_21219) tl_21221))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_21222 (__21223) -> (__21224) -o
    match __21223 with
    | nilUL_22  => __21224
    | consUL_23 hd_21225 tl_21226 =>
      match __21224 with
      | nilUL_22  => (consUL_23 hd_21225 tl_21226)
      | consUL_23 hd_21227 tl_21228 =>
        match (__lte__ hd_21225 hd_21227) with
        | true_4  =>
          (consUL_23
            hd_21225 ((merge_21222) tl_21226 (consUL_23 hd_21227 tl_21228)))
        | false_5  =>
          (consUL_23
            hd_21227 ((merge_21222) (consUL_23 hd_21225 tl_21226) tl_21228))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_21229 (__21230) ->
    match __21230 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_21231 tl_21232 =>
      match tl_21232 with
      | nilUU_24  => (consUU_25 hd_21231 nilUU_24)
      | consUU_25 hd_21233 tl_21234 =>
        match ((splitU_83)
                (consUU_25 hd_21231 (consUU_25 hd_21233 tl_21234))) with
        | ex1UU_33 m_21235 n_21236 =>
          ((mergeU_85) ((msort_21229) m_21235) ((msort_21229) n_21236))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_21237 (__21238) ->
    match __21238 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_21239 tl_21240 =>
      match tl_21240 with
      | nilUL_22  => (consUL_23 hd_21239 nilUL_22)
      | consUL_23 hd_21241 tl_21242 =>
        match ((splitL_82)
                (consUL_23 hd_21239 (consUL_23 hd_21241 tl_21242))) with
        | ex1LL_30 m_21243 n_21244 =>
          ((mergeL_84) ((msort_21237) m_21243) ((msort_21237) n_21244))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_21245 (__21246) -> (zs_21247) -> (__21248) -o
    match zs_21247 with
    | nilUU_24  =>
      let* c_21249 := ((send[R,U] __21248) (justUU_17 nilUU_24)) in
      close[true] c_21249
    | consUU_25 hd_21250 tl_21251 =>
      match tl_21251 with
      | nilUU_24  =>
        let* c_21252 :=
          ((send[R,U] __21248) (justUU_17 (consUU_25 hd_21250 nilUU_24)))
        in close[true] c_21252
      | consUU_25 hd_21253 tl_21254 =>
        match (__lte__ __21246 0) with
        | true_4  =>
          let* c_21255 :=
            ((send[R,U] __21248)
              (justUU_17
                ((msortU_87)
                  (consUU_25 hd_21250 (consUU_25 hd_21253 tl_21254)))))
          in close[true] c_21255
        | false_5  =>
          match ((splitU_83)
                  (consUU_25 hd_21250 (consUU_25 hd_21253 tl_21254))) with
          | ex1UU_33 m_21256 n_21257 =>
            let* r1_21258 :=
              fork
                fun _21259 (_21260) -o
                  ((cmsort_worker_21245) (__sub__ __21246 1) m_21256 _21260)
            in
            let* r2_21261 :=
              fork
                fun _21262 (_21263) -o
                  ((cmsort_worker_21245) (__sub__ __21246 1) n_21257 _21263)
            in
            let* _21264 := recv[R,U] r1_21258 in
            match _21264 with
            | ex1UL_32 m_21265 n_21266 =>
              match m_21265 with
              | justUU_17 m_21267 =>
                let* _21268 := recv[R,U] r2_21261 in
                match _21268 with
                | ex1UL_32 m_21269 n_21270 =>
                  match m_21269 with
                  | justUU_17 m_21271 =>
                    let zs1_21272 :=
                      (justUU_17 ((mergeU_85) m_21267 m_21271))
                    in
                    let zs1_21273 :=
                      ((rwlUU_47) NULL NULL NULL NULL NULL zs1_21272)
                    in
                    let* c_21274 := ((send[R,U] __21248) zs1_21273) in
                    let* __21275 := close[false] n_21266 in
                    let* __21276 := close[false] n_21270 in
                    close[true] c_21274
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_21277 (__21278) -> (zs_21279) -> (__21280) -o
    match zs_21279 with
    | nilUL_22  =>
      let* c_21281 := ((send[R,L] __21280) (justLL_14 nilUL_22)) in
      close[true] c_21281
    | consUL_23 hd_21282 tl_21283 =>
      match tl_21283 with
      | nilUL_22  =>
        let* c_21284 :=
          ((send[R,L] __21280) (justLL_14 (consUL_23 hd_21282 nilUL_22)))
        in close[true] c_21284
      | consUL_23 hd_21285 tl_21286 =>
        match (__lte__ __21278 0) with
        | true_4  =>
          let* c_21287 :=
            ((send[R,L] __21280)
              (justLL_14
                ((msortL_86)
                  (consUL_23 hd_21282 (consUL_23 hd_21285 tl_21286)))))
          in close[true] c_21287
        | false_5  =>
          match ((splitL_82)
                  (consUL_23 hd_21282 (consUL_23 hd_21285 tl_21286))) with
          | ex1LL_30 m_21288 n_21289 =>
            let* r1_21290 :=
              fork
                fun _21291 (_21292) -o
                  ((cmsort_worker_21277) (__sub__ __21278 1) m_21288 _21292)
            in
            let* r2_21293 :=
              fork
                fun _21294 (_21295) -o
                  ((cmsort_worker_21277) (__sub__ __21278 1) n_21289 _21295)
            in
            let* _21296 := recv[R,L] r1_21290 in
            match _21296 with
            | ex1LL_30 m_21297 n_21298 =>
              match m_21297 with
              | justLL_14 m_21299 =>
                let* _21300 := recv[R,L] r2_21293 in
                match _21300 with
                | ex1LL_30 m_21301 n_21302 =>
                  match m_21301 with
                  | justLL_14 m_21303 =>
                    let zs1_21304 :=
                      (justLL_14 ((mergeL_84) m_21299 m_21303))
                    in
                    let zs1_21305 :=
                      ((rwlLL_44) NULL NULL NULL NULL NULL zs1_21304)
                    in
                    let* c_21306 := ((send[R,L] __21280) zs1_21305) in
                    let* __21307 := close[false] n_21298 in
                    let* __21308 := close[false] n_21302 in
                    close[true] c_21306
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_21309 (zs_21310) ->
    let* c_21311 :=
      fork fun _21312 (_21313) -o
             ((cmsort_workerU_91) 4 zs_21310 _21313)
    in
    let* _21314 := recv[R,U] c_21311 in
    match _21314 with
    | ex1UL_32 m_21315 n_21316 =>
      let* __21317 := close[false] n_21316 in return m_21315
    end

#[program]
def cmsortL_92 :=
  fun cmsort_21318 (zs_21319) ->
    let* c_21320 :=
      fork fun _21321 (_21322) -o
             ((cmsort_workerL_90) 4 zs_21319 _21322)
    in
    let* _21323 := recv[R,L] c_21320 in
    match _21323 with
    | ex1LL_30 m_21324 n_21325 =>
      let* __21326 := close[false] n_21325 in return m_21324
    end

#[program]
def mklistU_95 :=
  fun mklist_21327 (n_21328) ->
    match (__lte__ n_21328 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_21328 ((mklist_21327) (__sub__ n_21328 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_21329 (n_21330) ->
    match (__lte__ n_21330 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_21330 ((mklist_21329) (__sub__ n_21330 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_21331 (__21332) ->
    match __21332 with
    | nilUU_24  => 0
    | consUU_25 hd_21333 tl_21334 => (__add__ 1 ((list_len_21331) tl_21334))
    end

#[program]
def list_lenL_96 :=
  fun list_len_21335 (__21336) ->
    match __21336 with
    | nilUL_22  => 0
    | consUL_23 hd_21337 tl_21338 => (__add__ 1 ((list_len_21335) tl_21338))
    end

#[program]
def print_listU_99 :=
  fun print_list_21339 (__21340) ->
    match __21340 with
    | nilUU_24  => print "nil"
    | consUU_25 hd_21341 tl_21342 =>
      let* __21343 := print ((string_of_int_31) hd_21341) in
      let* __21344 := print " :: " in ((print_list_21339) tl_21342)
    end

#[program]
def print_listL_98 :=
  fun print_list_21345 (__21346) ->
    match __21346 with
    | nilUL_22  => print "nil"
    | consUL_23 hd_21347 tl_21348 =>
      let* __21349 := print ((string_of_int_31) hd_21347) in
      let* __21350 := print " :: " in ((print_list_21345) tl_21348)
    end

#[program]
def main :=
  let test_21351 := ((mklistL_94) 2000000) in
  let* _21352 := ((cmsortL_92) test_21351) in
  match _21352 with
  | justLL_14 m_21353 =>
    let len_21354 := ((list_lenL_96) m_21353) in
    print ((string_of_int_31) len_21354)
  end

[trans12 success]

-----------------------------------------

#[program]
def idU_43 := fun id_21688 (A_21689) -> (m_21690) ->
                m_21690

#[program]
def idL_42 := fun id_21691 (A_21692) -> (m_21693) ->
                m_21693

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_21694 {A_21695} -> {m_21696} -> {n_21697} -> {B_21698} ->
  {__21699} -> (__21700) ->
    __21700

#[program]
def rwlUL_46 :=
  fun rwl_21701 {A_21702} -> {m_21703} -> {n_21704} -> {B_21705} ->
  {__21706} -> (__21707) ->
    __21707

#[program]
def rwlLU_45 :=
  fun rwl_21708 {A_21709} -> {m_21710} -> {n_21711} -> {B_21712} ->
  {__21713} -> (__21714) ->
    __21714

#[program]
def rwlLL_44 :=
  fun rwl_21715 {A_21716} -> {m_21717} -> {n_21718} -> {B_21719} ->
  {__21720} -> (__21721) ->
    __21721

#[program]
def rwrUU_51 :=
  fun rwr_21722 {A_21723} -> {m_21724} -> {n_21725} -> {B_21726} ->
  {__21727} -> (__21728) ->
    __21728

#[program]
def rwrUL_50 :=
  fun rwr_21729 {A_21730} -> {m_21731} -> {n_21732} -> {B_21733} ->
  {__21734} -> (__21735) ->
    __21735

#[program]
def rwrLU_49 :=
  fun rwr_21736 {A_21737} -> {m_21738} -> {n_21739} -> {B_21740} ->
  {__21741} -> (__21742) ->
    __21742

#[program]
def rwrLL_48 :=
  fun rwr_21743 {A_21744} -> {m_21745} -> {n_21746} -> {B_21747} ->
  {__21748} -> (__21749) ->
    __21749

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_21750 {A_21751} -> {x_21752} -> (__21753) ->
    match __21753 with
    | justUU_17 m_21754 => m_21754
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_21755 {A_21756} -> {x_21757} -> (__21758) ->
    match __21758 with
    | justUL_16 m_21759 => m_21759
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_21760 {A_21761} -> {x_21762} -> (__21763) ->
    !!

#[program]
def sing_elimLL_62 :=
  fun sing_elim_21764 {A_21765} -> {x_21766} -> (__21767) ->
    match __21767 with
    | justLL_14 m_21768 => m_21768
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_21769 (__21770) ->
    match __21770 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_21771 (__21772) -> (__21773) ->
    match __21772 with
    | true_4  =>
      match __21773 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_21774 (__21775) -> (__21776) ->
    match __21775 with
    | true_4  => true_4
    | false_5  =>
      match __21776 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_21777 (__21778) -> (__21779) ->
    match __21778 with
    | true_4  =>
      match __21779 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __21779 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_21780 (__21781) -> (__21782) ->
    match __21781 with
    | zero_6  => true_4
    | succ_7 n_21783 =>
      match __21782 with
      | zero_6  => false_5 | succ_7 n_21784 => ((lte_21780) n_21783 n_21784)
      end
    end

#[program]
def lt_15 :=
  fun lt_21785 (x_21786) -> (y_21787) ->
    ((lte_14) (succ_7 x_21786) y_21787)

#[program]
def pred_16 :=
  fun pred_21788 (__21789) ->
    match __21789 with
    | zero_6  => zero_6 | succ_7 n_21790 => n_21790
    end

#[program]
def add_17 :=
  fun add_21791 (__21792) -> (__21793) ->
    match __21792 with
    | zero_6  => __21793
    | succ_7 n_21794 => (succ_7 ((add_21791) n_21794 __21793))
    end

#[program]
def sub_18 :=
  fun sub_21795 (__21796) -> (__21797) ->
    match __21797 with
    | zero_6  => __21796
    | succ_7 n_21798 => ((sub_21795) ((pred_16) __21796) n_21798)
    end

#[program]
def mul_19 :=
  fun mul_21799 (__21800) -> (__21801) ->
    match __21800 with
    | zero_6  => zero_6
    | succ_7 n_21802 => ((add_17) __21801 ((mul_21799) n_21802 __21801))
    end

#[program]
def div_20 :=
  fun div_21803 (x_21804) -> (y_21805) ->
    match ((lt_15) x_21804 y_21805) with
    | true_4  => zero_6
    | false_5  =>
      let loop_21806 :=
        fun loop_21807 (x_21808) -> (y_21809) ->
          match ((sub_18) x_21808 ((pred_16) y_21809)) with
          | zero_6  => zero_6
          | succ_7 n_21810 => (succ_7 ((loop_21807) n_21810 y_21809))
          end
      in ((loop_21806) x_21804 y_21805)
    end

#[program]
def rem_21 :=
  fun rem_21811 (x_21812) -> (y_21813) ->
    ((sub_18) x_21812 ((mul_19) ((div_20) x_21812 y_21813) y_21813))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_21814 {A_21815} -> (f_21816) -> (__21817) ->
    match __21817 with
    | nilUU_24  => tt_3
    | consUU_25 hd_21818 tl_21819 =>
      let __21820 := ((f_21816) hd_21818) in
      ((free_list_21814) NULL f_21816 tl_21819)
    end

#[program]
def free_listUL_72 :=
  fun free_list_21821 {A_21822} -> (f_21823) -> (__21824) ->
    match __21824 with
    | nilUL_22  => tt_3
    | consUL_23 hd_21825 tl_21826 =>
      let __21827 := ((f_21823) hd_21825) in
      ((free_list_21821) NULL f_21823 tl_21826)
    end

#[program]
def free_listLL_70 :=
  fun free_list_21828 {A_21829} -> (f_21830) -> (__21831) ->
    match __21831 with
    | nilLL_18  => tt_3
    | consLL_19 hd_21832 tl_21833 =>
      let __21834 := ((f_21830) hd_21832) in
      ((free_list_21828) NULL f_21830 tl_21833)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_21835 (x_21836) -> (y_21837) ->
    let loop_21838 :=
      fun loop_21839 (acc_21840) -> (y_21841) ->
        match (__lte__ y_21841 0) with
        | true_4  => acc_21840
        | false_5  =>
          ((loop_21839) (__mul__ x_21836 acc_21840) (__sub__ y_21841 1))
        end
    in ((loop_21838) 1 y_21837)

#[program]
def powm_26 :=
  fun powm_21842 (x_21843) -> (y_21844) -> (m_21845) ->
    let loop_21846 :=
      fun loop_21847 (acc_21848) -> (y_21849) ->
        match (__lte__ y_21849 0) with
        | true_4  => acc_21848
        | false_5  =>
          ((loop_21847)
            (__mod__ (__mul__ x_21843 acc_21848) m_21845) (__sub__ y_21849 1))
        end
    in ((loop_21846) 1 y_21844)

#[program]
def ord_27 := fun ord_21850 (c_21851) ->
                (__ord__ c_21851)

#[program]
def chr_28 := fun chr_21852 (i_21853) ->
                (__chr__ i_21853)

#[program]
def str_29 := fun str_21854 (c_21855) ->
                (__push__ "" c_21855)

#[program]
def strlen_30 := fun strlen_21856 (s_21857) ->
                   (__size__ s_21857)

#[program]
def string_of_int_31 :=
  fun string_of_int_21858 (i_21859) ->
    let aux_21860 :=
      fun aux_21861 (i_21862) ->
        match (__lte__ 10 i_21862) with
        | true_4  =>
          let r_21863 := (__mod__ i_21862 10) in
          let i_21864 := (__div__ i_21862 10) in
          (__push__ ((aux_21861) i_21864)
            ((chr_28) (__add__ r_21863 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_21862 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_21859) with
    | true_4  => ((aux_21860) i_21859)
    | false_5  => (__cat__ "~" ((aux_21860) (__neg__ i_21859)))
    end

#[program]
def splitU_83 :=
  fun split_21865 (__21866) ->
    match __21866 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_21867 tl_21868 =>
      match tl_21868 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_21867 nilUU_24) nilUU_24)
      | consUU_25 hd_21869 tl_21870 =>
        match ((split_21865) tl_21870) with
        | ex1UU_33 m_21871 n_21872 =>
          (ex1UU_33
            (consUU_25 hd_21867 m_21871) (consUU_25 hd_21869 n_21872))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_21873 (__21874) ->
    match __21874 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_21875 tl_21876 =>
      match tl_21876 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_21875 nilUL_22) nilUL_22)
      | consUL_23 hd_21877 tl_21878 =>
        match ((split_21873) tl_21878) with
        | ex1LL_30 m_21879 n_21880 =>
          (ex1LL_30
            (consUL_23 hd_21875 m_21879) (consUL_23 hd_21877 n_21880))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_21881 (__21882) -> (__21883) -o
    match __21882 with
    | nilUU_24  => __21883
    | consUU_25 hd_21884 tl_21885 =>
      match __21883 with
      | nilUU_24  => (consUU_25 hd_21884 tl_21885)
      | consUU_25 hd_21886 tl_21887 =>
        match (__lte__ hd_21884 hd_21886) with
        | true_4  =>
          (consUU_25
            hd_21884 ((merge_21881) tl_21885 (consUU_25 hd_21886 tl_21887)))
        | false_5  =>
          (consUU_25
            hd_21886 ((merge_21881) (consUU_25 hd_21884 tl_21885) tl_21887))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_21888 (__21889) -> (__21890) -o
    match __21889 with
    | nilUL_22  => __21890
    | consUL_23 hd_21891 tl_21892 =>
      match __21890 with
      | nilUL_22  => (consUL_23 hd_21891 tl_21892)
      | consUL_23 hd_21893 tl_21894 =>
        match (__lte__ hd_21891 hd_21893) with
        | true_4  =>
          (consUL_23
            hd_21891 ((merge_21888) tl_21892 (consUL_23 hd_21893 tl_21894)))
        | false_5  =>
          (consUL_23
            hd_21893 ((merge_21888) (consUL_23 hd_21891 tl_21892) tl_21894))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_21895 (__21896) ->
    match __21896 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_21897 tl_21898 =>
      match tl_21898 with
      | nilUU_24  => (consUU_25 hd_21897 nilUU_24)
      | consUU_25 hd_21899 tl_21900 =>
        match ((splitU_83)
                (consUU_25 hd_21897 (consUU_25 hd_21899 tl_21900))) with
        | ex1UU_33 m_21901 n_21902 =>
          ((mergeU_85) ((msort_21895) m_21901) ((msort_21895) n_21902))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_21903 (__21904) ->
    match __21904 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_21905 tl_21906 =>
      match tl_21906 with
      | nilUL_22  => (consUL_23 hd_21905 nilUL_22)
      | consUL_23 hd_21907 tl_21908 =>
        match ((splitL_82)
                (consUL_23 hd_21905 (consUL_23 hd_21907 tl_21908))) with
        | ex1LL_30 m_21909 n_21910 =>
          ((mergeL_84) ((msort_21903) m_21909) ((msort_21903) n_21910))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_21911 (__21912) -> (zs_21913) -> (__21914) -o
    match zs_21913 with
    | nilUU_24  =>
      let* c_21915 := ((send[R,U] __21914) (justUU_17 nilUU_24)) in
      close[true] c_21915
    | consUU_25 hd_21916 tl_21917 =>
      match tl_21917 with
      | nilUU_24  =>
        let* c_21918 :=
          ((send[R,U] __21914) (justUU_17 (consUU_25 hd_21916 nilUU_24)))
        in close[true] c_21918
      | consUU_25 hd_21919 tl_21920 =>
        match (__lte__ __21912 0) with
        | true_4  =>
          let* c_21921 :=
            ((send[R,U] __21914)
              (justUU_17
                ((msortU_87)
                  (consUU_25 hd_21916 (consUU_25 hd_21919 tl_21920)))))
          in close[true] c_21921
        | false_5  =>
          match ((splitU_83)
                  (consUU_25 hd_21916 (consUU_25 hd_21919 tl_21920))) with
          | ex1UU_33 m_21922 n_21923 =>
            let* r1_21924 :=
              fork
                fun _21925 (_21926) -o
                  ((cmsort_worker_21911) (__sub__ __21912 1) m_21922 _21926)
            in
            let* r2_21927 :=
              fork
                fun _21928 (_21929) -o
                  ((cmsort_worker_21911) (__sub__ __21912 1) n_21923 _21929)
            in
            let* _21930 := recv[R,U] r1_21924 in
            match _21930 with
            | ex1UL_32 m_21931 n_21932 =>
              match m_21931 with
              | justUU_17 m_21933 =>
                let* _21934 := recv[R,U] r2_21927 in
                match _21934 with
                | ex1UL_32 m_21935 n_21936 =>
                  match m_21935 with
                  | justUU_17 m_21937 =>
                    let zs1_21938 :=
                      (justUU_17 ((mergeU_85) m_21933 m_21937))
                    in
                    let zs1_21939 :=
                      ((rwlUU_47) NULL NULL NULL NULL NULL zs1_21938)
                    in
                    let* c_21940 := ((send[R,U] __21914) zs1_21939) in
                    let* __21941 := close[false] n_21932 in
                    let* __21942 := close[false] n_21936 in
                    close[true] c_21940
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_21943 (__21944) -> (zs_21945) -> (__21946) -o
    match zs_21945 with
    | nilUL_22  =>
      let* c_21947 := ((send[R,L] __21946) (justLL_14 nilUL_22)) in
      close[true] c_21947
    | consUL_23 hd_21948 tl_21949 =>
      match tl_21949 with
      | nilUL_22  =>
        let* c_21950 :=
          ((send[R,L] __21946) (justLL_14 (consUL_23 hd_21948 nilUL_22)))
        in close[true] c_21950
      | consUL_23 hd_21951 tl_21952 =>
        match (__lte__ __21944 0) with
        | true_4  =>
          let* c_21953 :=
            ((send[R,L] __21946)
              (justLL_14
                ((msortL_86)
                  (consUL_23 hd_21948 (consUL_23 hd_21951 tl_21952)))))
          in close[true] c_21953
        | false_5  =>
          match ((splitL_82)
                  (consUL_23 hd_21948 (consUL_23 hd_21951 tl_21952))) with
          | ex1LL_30 m_21954 n_21955 =>
            let* r1_21956 :=
              fork
                fun _21957 (_21958) -o
                  ((cmsort_worker_21943) (__sub__ __21944 1) m_21954 _21958)
            in
            let* r2_21959 :=
              fork
                fun _21960 (_21961) -o
                  ((cmsort_worker_21943) (__sub__ __21944 1) n_21955 _21961)
            in
            let* _21962 := recv[R,L] r1_21956 in
            match _21962 with
            | ex1LL_30 m_21963 n_21964 =>
              match m_21963 with
              | justLL_14 m_21965 =>
                let* _21966 := recv[R,L] r2_21959 in
                match _21966 with
                | ex1LL_30 m_21967 n_21968 =>
                  match m_21967 with
                  | justLL_14 m_21969 =>
                    let zs1_21970 :=
                      (justLL_14 ((mergeL_84) m_21965 m_21969))
                    in
                    let zs1_21971 :=
                      ((rwlLL_44) NULL NULL NULL NULL NULL zs1_21970)
                    in
                    let* c_21972 := ((send[R,L] __21946) zs1_21971) in
                    let* __21973 := close[false] n_21964 in
                    let* __21974 := close[false] n_21968 in
                    close[true] c_21972
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_21975 (zs_21976) ->
    let* c_21977 :=
      fork fun _21978 (_21979) -o
             ((cmsort_workerU_91) 4 zs_21976 _21979)
    in
    let* _21980 := recv[R,U] c_21977 in
    match _21980 with
    | ex1UL_32 m_21981 n_21982 =>
      let* __21983 := close[false] n_21982 in return m_21981
    end

#[program]
def cmsortL_92 :=
  fun cmsort_21984 (zs_21985) ->
    let* c_21986 :=
      fork fun _21987 (_21988) -o
             ((cmsort_workerL_90) 4 zs_21985 _21988)
    in
    let* _21989 := recv[R,L] c_21986 in
    match _21989 with
    | ex1LL_30 m_21990 n_21991 =>
      let* __21992 := close[false] n_21991 in return m_21990
    end

#[program]
def mklistU_95 :=
  fun mklist_21993 (n_21994) ->
    match (__lte__ n_21994 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_21994 ((mklist_21993) (__sub__ n_21994 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_21995 (n_21996) ->
    match (__lte__ n_21996 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_21996 ((mklist_21995) (__sub__ n_21996 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_21997 (__21998) ->
    match __21998 with
    | nilUU_24  => 0
    | consUU_25 hd_21999 tl_22000 => (__add__ 1 ((list_len_21997) tl_22000))
    end

#[program]
def list_lenL_96 :=
  fun list_len_22001 (__22002) ->
    match __22002 with
    | nilUL_22  => 0
    | consUL_23 hd_22003 tl_22004 => (__add__ 1 ((list_len_22001) tl_22004))
    end

#[program]
def print_listU_99 :=
  fun print_list_22005 (__22006) ->
    match __22006 with
    | nilUU_24  => print "nil"
    | consUU_25 hd_22007 tl_22008 =>
      let* __22009 := print ((string_of_int_31) hd_22007) in
      let* __22010 := print " :: " in ((print_list_22005) tl_22008)
    end

#[program]
def print_listL_98 :=
  fun print_list_22011 (__22012) ->
    match __22012 with
    | nilUL_22  => print "nil"
    | consUL_23 hd_22013 tl_22014 =>
      let* __22015 := print ((string_of_int_31) hd_22013) in
      let* __22016 := print " :: " in ((print_list_22011) tl_22014)
    end

#[program]
def main :=
  let test_22017 := ((mklistL_94) 2000000) in
  let* _22018 := ((cmsortL_92) test_22017) in
  match _22018 with
  | justLL_14 m_22019 =>
    let len_22020 := ((list_lenL_96) m_22019) in
    print ((string_of_int_31) len_22020)
  end

[trans2e success]

-----------------------------------------

def idU_43 := fun id_22392 (A_22393) -> (m_22394) -> m_22394

def idL_42 := fun id_22395 (A_22396) -> (m_22397) -> m_22397

def rwlUU_47 :=
  fun rwl_22398 (A_22399) -> (m_22400) -> (n_22401) -> (B_22402) ->
  (__22403) -> (__22404) -> __22404

def rwlUL_46 :=
  fun rwl_22405 (A_22406) -> (m_22407) -> (n_22408) -> (B_22409) ->
  (__22410) -> (__22411) -> __22411

def rwlLU_45 :=
  fun rwl_22412 (A_22413) -> (m_22414) -> (n_22415) -> (B_22416) ->
  (__22417) -> (__22418) -> __22418

def rwlLL_44 :=
  fun rwl_22419 (A_22420) -> (m_22421) -> (n_22422) -> (B_22423) ->
  (__22424) -> (__22425) -> __22425

def rwrUU_51 :=
  fun rwr_22426 (A_22427) -> (m_22428) -> (n_22429) -> (B_22430) ->
  (__22431) -> (__22432) -> __22432

def rwrUL_50 :=
  fun rwr_22433 (A_22434) -> (m_22435) -> (n_22436) -> (B_22437) ->
  (__22438) -> (__22439) -> __22439

def rwrLU_49 :=
  fun rwr_22440 (A_22441) -> (m_22442) -> (n_22443) -> (B_22444) ->
  (__22445) -> (__22446) -> __22446

def rwrLL_48 :=
  fun rwr_22447 (A_22448) -> (m_22449) -> (n_22450) -> (B_22451) ->
  (__22452) -> (__22453) -> __22453

def sing_elimUU_65 :=
  fun sing_elim_22454 (A_22455) -> (x_22456) -> (__22457) -> __22457

def sing_elimUL_64 :=
  fun sing_elim_22458 (A_22459) -> (x_22460) -> (__22461) -> __22461

def sing_elimLU_63 :=
  fun sing_elim_22462 (A_22463) -> (x_22464) -> (__22465) -> !!

def sing_elimLL_62 :=
  fun sing_elim_22466 (A_22467) -> (x_22468) -> (__22469) -> __22469

def not_10 :=
  fun not_22470 (__22471) ->
    match __22471 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_22472 (__22473) -> (__22474) ->
    match __22473 with
    | true_4 =>
      match __22474 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_22475 (__22476) -> (__22477) ->
    match __22476 with
    | true_4 => true_4
    | false_5 =>
      match __22477 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_22478 (__22479) -> (__22480) ->
    match __22479 with
    | true_4 =>
      match __22480 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __22480 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_22481 (__22482) -> (__22483) ->
    match __22482 with
    | zero_6  => true_4
    | succ_7 n_22484 =>
      match __22483 with
      | zero_6  => false_5 | succ_7 n_22485 => ((lte_22481) n_22484 n_22485)
      end
    end

def lt_15 :=
  fun lt_22486 (x_22487) -> (y_22488) -> ((lte_14) (succ_7 x_22487) y_22488)

def pred_16 :=
  fun pred_22489 (__22490) ->
    match __22490 with
    | zero_6  => (zero_6 ) | succ_7 n_22491 => n_22491
    end

def add_17 :=
  fun add_22492 (__22493) -> (__22494) ->
    match __22493 with
    | zero_6  => __22494
    | succ_7 n_22495 => (succ_7 ((add_22492) n_22495 __22494))
    end

def sub_18 :=
  fun sub_22496 (__22497) -> (__22498) ->
    match __22498 with
    | zero_6  => __22497
    | succ_7 n_22499 => ((sub_22496) ((pred_16) __22497) n_22499)
    end

def mul_19 :=
  fun mul_22500 (__22501) -> (__22502) ->
    match __22501 with
    | zero_6  => (zero_6 )
    | succ_7 n_22503 => ((add_17) __22502 ((mul_22500) n_22503 __22502))
    end

def div_20 :=
  fun div_22504 (x_22505) -> (y_22506) ->
    match ((lt_15) x_22505 y_22506) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_22507 :=
        fun loop_22508 (x_22509) -> (y_22510) ->
          match ((sub_18) x_22509 ((pred_16) y_22510)) with
          | zero_6  => (zero_6 )
          | succ_7 n_22511 => (succ_7 ((loop_22508) n_22511 y_22510))
          end
      in ((loop_22507) x_22505 y_22506)
    end

def rem_21 :=
  fun rem_22512 (x_22513) -> (y_22514) ->
    ((sub_18) x_22513 ((mul_19) ((div_20) x_22513 y_22514) y_22514))

def free_listUU_73 :=
  fun free_list_22515 (A_22516) -> (f_22517) -> (__22518) ->
    match __22518 with
    | nilUU_24  => tt_3
    | consUU_25 hd_22519 tl_22520 =>
      let __22521 := ((f_22517) hd_22519) in
      ((free_list_22515) NULL f_22517 tl_22520)
    end

def free_listUL_72 :=
  fun free_list_22522 (A_22523) -> (f_22524) -> (__22525) ->
    match __22525 with
    | nilUL_22  => tt_3
    | consUL_23 hd_22526 tl_22527 =>
      let __22528 := ((f_22524) hd_22526) in
      ((free_list_22522) NULL f_22524 tl_22527)
    end

def free_listLL_70 :=
  fun free_list_22529 (A_22530) -> (f_22531) -> (__22532) ->
    match __22532 with
    | nilLL_18  => tt_3
    | consLL_19 hd_22533 tl_22534 =>
      let __22535 := ((f_22531) hd_22533) in
      ((free_list_22529) NULL f_22531 tl_22534)
    end

def pow_25 :=
  fun pow_22536 (x_22537) -> (y_22538) ->
    let loop_22539 :=
      fun loop_22540 (acc_22541) -> (y_22542) ->
        match (__lte__ y_22542 0) with
        | true_4 => acc_22541
        | false_5 =>
          ((loop_22540) (__mul__ x_22537 acc_22541) (__sub__ y_22542 1))
        end
    in ((loop_22539) 1 y_22538)

def powm_26 :=
  fun powm_22543 (x_22544) -> (y_22545) -> (m_22546) ->
    let loop_22547 :=
      fun loop_22548 (acc_22549) -> (y_22550) ->
        match (__lte__ y_22550 0) with
        | true_4 => acc_22549
        | false_5 =>
          ((loop_22548)
            (__mod__ (__mul__ x_22544 acc_22549) m_22546) (__sub__ y_22550 1))
        end
    in ((loop_22547) 1 y_22545)

def ord_27 := fun ord_22551 (c_22552) -> (__ord__ c_22552)

def chr_28 := fun chr_22553 (i_22554) -> (__chr__ i_22554)

def str_29 := fun str_22555 (c_22556) -> (__push__ "" c_22556)

def strlen_30 := fun strlen_22557 (s_22558) -> (__size__ s_22558)

def string_of_int_31 :=
  fun string_of_int_22559 (i_22560) ->
    let aux_22561 :=
      fun aux_22562 (i_22563) ->
        match (__lte__ 10 i_22563) with
        | true_4 =>
          let r_22564 := (__mod__ i_22563 10) in
          let i_22565 := (__div__ i_22563 10) in
          (__push__ ((aux_22562) i_22565)
            ((chr_28) (__add__ r_22564 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_22563 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_22560) with
    | true_4 => ((aux_22561) i_22560)
    | false_5 => (__cat__ "~" ((aux_22561) (__neg__ i_22560)))
    end

def splitU_83 :=
  fun split_22566 (__22567) ->
    match __22567 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_22568 tl_22569 =>
      match tl_22569 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_22568 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_22570 tl_22571 =>
        match ((split_22566) tl_22571) with
        | ex1UU_33 m_22572 n_22573 =>
          (ex1UU_33
            (consUU_25 hd_22568 m_22572) (consUU_25 hd_22570 n_22573))
        end
      end
    end

def splitL_82 :=
  fun split_22574 (__22575) ->
    match __22575 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_22576 tl_22577 =>
      match tl_22577 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_22576 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_22578 tl_22579 =>
        match ((split_22574) tl_22579) with
        | ex1LL_30 m_22580 n_22581 =>
          (ex1LL_30
            (consUL_23 hd_22576 m_22580) (consUL_23 hd_22578 n_22581))
        end
      end
    end

def mergeU_85 :=
  fun merge_22582 (__22583) -> (__22584) -o
    match __22583 with
    | nilUU_24  => __22584
    | consUU_25 hd_22585 tl_22586 =>
      match __22584 with
      | nilUU_24  => (consUU_25 hd_22585 tl_22586)
      | consUU_25 hd_22587 tl_22588 =>
        match (__lte__ hd_22585 hd_22587) with
        | true_4 =>
          (consUU_25
            hd_22585 ((merge_22582) tl_22586 (consUU_25 hd_22587 tl_22588)))
        | false_5 =>
          (consUU_25
            hd_22587 ((merge_22582) (consUU_25 hd_22585 tl_22586) tl_22588))
        end
      end
    end

def mergeL_84 :=
  fun merge_22589 (__22590) -> (__22591) -o
    match __22590 with
    | nilUL_22  => __22591
    | consUL_23 hd_22592 tl_22593 =>
      match __22591 with
      | nilUL_22  => (consUL_23 hd_22592 tl_22593)
      | consUL_23 hd_22594 tl_22595 =>
        match (__lte__ hd_22592 hd_22594) with
        | true_4 =>
          (consUL_23
            hd_22592 ((merge_22589) tl_22593 (consUL_23 hd_22594 tl_22595)))
        | false_5 =>
          (consUL_23
            hd_22594 ((merge_22589) (consUL_23 hd_22592 tl_22593) tl_22595))
        end
      end
    end

def msortU_87 :=
  fun msort_22596 (__22597) ->
    match __22597 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_22598 tl_22599 =>
      match tl_22599 with
      | nilUU_24  => (consUU_25 hd_22598 (nilUU_24 ))
      | consUU_25 hd_22600 tl_22601 =>
        match ((splitU_83)
                (consUU_25 hd_22598 (consUU_25 hd_22600 tl_22601))) with
        | ex1UU_33 m_22602 n_22603 =>
          ((mergeU_85) ((msort_22596) m_22602) ((msort_22596) n_22603))
        end
      end
    end

def msortL_86 :=
  fun msort_22604 (__22605) ->
    match __22605 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_22606 tl_22607 =>
      match tl_22607 with
      | nilUL_22  => (consUL_23 hd_22606 (nilUL_22 ))
      | consUL_23 hd_22608 tl_22609 =>
        match ((splitL_82)
                (consUL_23 hd_22606 (consUL_23 hd_22608 tl_22609))) with
        | ex1LL_30 m_22610 n_22611 =>
          ((mergeL_84) ((msort_22604) m_22610) ((msort_22604) n_22611))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_22612 (__22613) -> (zs_22614) -> (__22615) -o
    match zs_22614 with
    | nilUU_24  =>
      lazy(let c_22616 :=
             force(((lam (x_22617) -> lazy(send(__22615, x_22617)))
                     (nilUU_24 )))
           in force(lazy(close[true] c_22616)))
    | consUU_25 hd_22618 tl_22619 =>
      match tl_22619 with
      | nilUU_24  =>
        lazy(let c_22620 :=
               force(((lam (x_22621) -> lazy(send(__22615, x_22621)))
                       (consUU_25 hd_22618 (nilUU_24 ))))
             in force(lazy(close[true] c_22620)))
      | consUU_25 hd_22622 tl_22623 =>
        match (__lte__ __22613 0) with
        | true_4 =>
          lazy(let c_22624 :=
                 force(((lam (x_22625) -> lazy(send(__22615, x_22625)))
                         ((msortU_87)
                           (consUU_25 hd_22618 (consUU_25 hd_22622 tl_22623)))))
               in force(lazy(close[true] c_22624)))
        | false_5 =>
          match ((splitU_83)
                  (consUU_25 hd_22618 (consUU_25 hd_22622 tl_22623))) with
          | ex1UU_33 m_22626 n_22627 =>
            lazy(let r1_22628 :=
                   force(lazy(fork
                                fun _22629 (_22630) -o
                                  ((cmsort_worker_22612)
                                    (__sub__ __22613 1) m_22626 _22630)))
                 in
                 let r2_22631 :=
                   force(lazy(fork
                                fun _22632 (_22633) -o
                                  ((cmsort_worker_22612)
                                    (__sub__ __22613 1) n_22627 _22633)))
                 in
                 let _22634 := force(lazy(recv[U](r1_22628))) in
                 force(match _22634 with
                       | ex1UL_32 m_22635 n_22636 =>
                         lazy(let _22637 := force(lazy(recv[U](r2_22631))) in
                              force(match _22637 with
                                    | ex1UL_32 m_22638 n_22639 =>
                                      let zs1_22640 :=
                                        ((mergeU_85) m_22635 m_22638)
                                      in
                                      let zs1_22641 :=
                                        ((rwlUU_47)
                                          NULL NULL NULL NULL NULL zs1_22640)
                                      in
                                      lazy(let c_22642 :=
                                             force(((lam (x_22643) ->
                                                       lazy(send(__22615, x_22643)))
                                                     zs1_22641))
                                           in
                                           let __22644 :=
                                             force(lazy(close[false] n_22636))
                                           in
                                           let __22645 :=
                                             force(lazy(close[false] n_22639))
                                           in
                                           force(lazy(close[true] c_22642)))
                                    end))
                       end))
            end
          end
        end
      end

def cmsort_workerL_90 :=
  fun cmsort_worker_22646 (__22647) -> (zs_22648) -> (__22649) -o
    match zs_22648 with
    | nilUL_22  =>
      lazy(let c_22650 :=
             force(((lam (x_22651) -> lazy(send(__22649, x_22651)))
                     (nilUL_22 )))
           in force(lazy(close[true] c_22650)))
    | consUL_23 hd_22652 tl_22653 =>
      match tl_22653 with
      | nilUL_22  =>
        lazy(let c_22654 :=
               force(((lam (x_22655) -> lazy(send(__22649, x_22655)))
                       (consUL_23 hd_22652 (nilUL_22 ))))
             in force(lazy(close[true] c_22654)))
      | consUL_23 hd_22656 tl_22657 =>
        match (__lte__ __22647 0) with
        | true_4 =>
          lazy(let c_22658 :=
                 force(((lam (x_22659) -> lazy(send(__22649, x_22659)))
                         ((msortL_86)
                           (consUL_23 hd_22652 (consUL_23 hd_22656 tl_22657)))))
               in force(lazy(close[true] c_22658)))
        | false_5 =>
          match ((splitL_82)
                  (consUL_23 hd_22652 (consUL_23 hd_22656 tl_22657))) with
          | ex1LL_30 m_22660 n_22661 =>
            lazy(let r1_22662 :=
                   force(lazy(fork
                                fun _22663 (_22664) -o
                                  ((cmsort_worker_22646)
                                    (__sub__ __22647 1) m_22660 _22664)))
                 in
                 let r2_22665 :=
                   force(lazy(fork
                                fun _22666 (_22667) -o
                                  ((cmsort_worker_22646)
                                    (__sub__ __22647 1) n_22661 _22667)))
                 in
                 let _22668 := force(lazy(recv[L](r1_22662))) in
                 force(match _22668 with
                       | ex1LL_30 m_22669 n_22670 =>
                         lazy(let _22671 := force(lazy(recv[L](r2_22665))) in
                              force(match _22671 with
                                    | ex1LL_30 m_22672 n_22673 =>
                                      let zs1_22674 :=
                                        ((mergeL_84) m_22669 m_22672)
                                      in
                                      let zs1_22675 :=
                                        ((rwlLL_44)
                                          NULL NULL NULL NULL NULL zs1_22674)
                                      in
                                      lazy(let c_22676 :=
                                             force(((lam (x_22677) ->
                                                       lazy(send(__22649, x_22677)))
                                                     zs1_22675))
                                           in
                                           let __22678 :=
                                             force(lazy(close[false] n_22670))
                                           in
                                           let __22679 :=
                                             force(lazy(close[false] n_22673))
                                           in
                                           force(lazy(close[true] c_22676)))
                                    end))
                       end))
            end
          end
        end
      end

def cmsortU_93 :=
  fun cmsort_22680 (zs_22681) ->
    lazy(let c_22682 :=
           force(lazy(fork
                        fun _22683 (_22684) -o
                          ((cmsort_workerU_91) 4 zs_22681 _22684)))
         in
         let _22685 := force(lazy(recv[U](c_22682))) in
         force(match _22685 with
               | ex1UL_32 m_22686 n_22687 =>
                 lazy(let __22688 := force(lazy(close[false] n_22687)) in
                      force(lazy(m_22686)))
               end))

def cmsortL_92 :=
  fun cmsort_22689 (zs_22690) ->
    lazy(let c_22691 :=
           force(lazy(fork
                        fun _22692 (_22693) -o
                          ((cmsort_workerL_90) 4 zs_22690 _22693)))
         in
         let _22694 := force(lazy(recv[L](c_22691))) in
         force(match _22694 with
               | ex1LL_30 m_22695 n_22696 =>
                 lazy(let __22697 := force(lazy(close[false] n_22696)) in
                      force(lazy(m_22695)))
               end))

def mklistU_95 :=
  fun mklist_22698 (n_22699) ->
    match (__lte__ n_22699 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_22699 ((mklist_22698) (__sub__ n_22699 1)))
    end

def mklistL_94 :=
  fun mklist_22700 (n_22701) ->
    match (__lte__ n_22701 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_22701 ((mklist_22700) (__sub__ n_22701 1)))
    end

def list_lenU_97 :=
  fun list_len_22702 (__22703) ->
    match __22703 with
    | nilUU_24  => 0
    | consUU_25 hd_22704 tl_22705 => (__add__ 1 ((list_len_22702) tl_22705))
    end

def list_lenL_96 :=
  fun list_len_22706 (__22707) ->
    match __22707 with
    | nilUL_22  => 0
    | consUL_23 hd_22708 tl_22709 => (__add__ 1 ((list_len_22706) tl_22709))
    end

def print_listU_99 :=
  fun print_list_22710 (__22711) ->
    match __22711 with
    | nilUU_24  => lazy(print "nil")
    | consUU_25 hd_22712 tl_22713 =>
      lazy(let __22714 := force(lazy(print ((string_of_int_31) hd_22712))) in
           let __22715 := force(lazy(print " :: ")) in
           force(((print_list_22710) tl_22713)))
    end

def print_listL_98 :=
  fun print_list_22716 (__22717) ->
    match __22717 with
    | nilUL_22  => lazy(print "nil")
    | consUL_23 hd_22718 tl_22719 =>
      lazy(let __22720 := force(lazy(print ((string_of_int_31) hd_22718))) in
           let __22721 := force(lazy(print " :: ")) in
           force(((print_list_22716) tl_22719)))
    end

def main :=
  let test_22722 := ((mklistL_94) 2000000) in
  lazy(let _22723 := force(((cmsortL_92) test_22722)) in
       force(let len_22724 := ((list_lenL_96) _22723) in
             lazy(print ((string_of_int_31) len_22724))))

[trans23 success]

-----------------------------------------

def idU_43 := lam (A_23149) -> (m_23150) -> m_23150

def idL_42 := lam (A_23151) -> (m_23152) -> m_23152

def rwlUU_47 :=
  lam (A_23153) -> (m_23154) -> (n_23155) -> (B_23156) -> (__23157) ->
  (__23158) -> __23158

def rwlUL_46 :=
  lam (A_23159) -> (m_23160) -> (n_23161) -> (B_23162) -> (__23163) ->
  (__23164) -> __23164

def rwlLU_45 :=
  lam (A_23165) -> (m_23166) -> (n_23167) -> (B_23168) -> (__23169) ->
  (__23170) -> __23170

def rwlLL_44 :=
  lam (A_23171) -> (m_23172) -> (n_23173) -> (B_23174) -> (__23175) ->
  (__23176) -> __23176

def rwrUU_51 :=
  lam (A_23177) -> (m_23178) -> (n_23179) -> (B_23180) -> (__23181) ->
  (__23182) -> __23182

def rwrUL_50 :=
  lam (A_23183) -> (m_23184) -> (n_23185) -> (B_23186) -> (__23187) ->
  (__23188) -> __23188

def rwrLU_49 :=
  lam (A_23189) -> (m_23190) -> (n_23191) -> (B_23192) -> (__23193) ->
  (__23194) -> __23194

def rwrLL_48 :=
  lam (A_23195) -> (m_23196) -> (n_23197) -> (B_23198) -> (__23199) ->
  (__23200) -> __23200

def sing_elimUU_65 := lam (A_23201) -> (x_23202) -> (__23203) -> __23203

def sing_elimUL_64 := lam (A_23204) -> (x_23205) -> (__23206) -> __23206

def sing_elimLU_63 := lam (A_23207) -> (x_23208) -> (__23209) -> !!

def sing_elimLL_62 := lam (A_23210) -> (x_23211) -> (__23212) -> __23212

def not_10 :=
  lam (__23213) ->
    match __23213 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__23214) -> (__23215) ->
    match __23214 with
    | true_4 =>
      match __23215 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__23216) -> (__23217) ->
    match __23216 with
    | true_4 => true_4
    | false_5 =>
      match __23217 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__23218) -> (__23219) ->
    match __23218 with
    | true_4 =>
      match __23219 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __23219 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_23220 (__23221) -> (__23222) ->
    match __23221 with
    | zero_6  => true_4
    | succ_7 n_23223 =>
      match __23222 with
      | zero_6  => false_5 | succ_7 n_23224 => ((lte_23220) n_23223 n_23224)
      end
    end

def lt_15 :=
  lam (x_23225) -> (y_23226) -> ((lte_14) (succ_7 x_23225) y_23226)

def pred_16 :=
  lam (__23227) ->
    match __23227 with
    | zero_6  => (zero_6 ) | succ_7 n_23228 => n_23228
    end

def add_17 :=
  fun add_23229 (__23230) -> (__23231) ->
    match __23230 with
    | zero_6  => __23231
    | succ_7 n_23232 => (succ_7 ((add_23229) n_23232 __23231))
    end

def sub_18 :=
  fun sub_23233 (__23234) -> (__23235) ->
    match __23235 with
    | zero_6  => __23234
    | succ_7 n_23236 => ((sub_23233) ((pred_16) __23234) n_23236)
    end

def mul_19 :=
  fun mul_23237 (__23238) -> (__23239) ->
    match __23238 with
    | zero_6  => (zero_6 )
    | succ_7 n_23240 => ((add_17) __23239 ((mul_23237) n_23240 __23239))
    end

def div_20 :=
  lam (x_23241) -> (y_23242) ->
    match ((lt_15) x_23241 y_23242) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_23243 :=
        fun loop_23244 (x_23245) -> (y_23246) ->
          match ((sub_18) x_23245 ((pred_16) y_23246)) with
          | zero_6  => (zero_6 )
          | succ_7 n_23247 => (succ_7 ((loop_23244) n_23247 y_23246))
          end
      in ((loop_23243) x_23241 y_23242)
    end

def rem_21 :=
  lam (x_23248) -> (y_23249) ->
    ((sub_18) x_23248 ((mul_19) ((div_20) x_23248 y_23249) y_23249))

def free_listUU_73 :=
  fun free_list_23250 (A_23251) -> (f_23252) -> (__23253) ->
    match __23253 with
    | nilUU_24  => tt_3
    | consUU_25 hd_23254 tl_23255 =>
      let __23256 := ((f_23252) hd_23254) in
      ((free_list_23250) NULL f_23252 tl_23255)
    end

def free_listUL_72 :=
  fun free_list_23257 (A_23258) -> (f_23259) -> (__23260) ->
    match __23260 with
    | nilUL_22  => tt_3
    | consUL_23 hd_23261 tl_23262 =>
      let __23263 := ((f_23259) hd_23261) in
      ((free_list_23257) NULL f_23259 tl_23262)
    end

def free_listLL_70 :=
  fun free_list_23264 (A_23265) -> (f_23266) -> (__23267) ->
    match __23267 with
    | nilLL_18  => tt_3
    | consLL_19 hd_23268 tl_23269 =>
      let __23270 := ((f_23266) hd_23268) in
      ((free_list_23264) NULL f_23266 tl_23269)
    end

def pow_25 :=
  lam (x_23271) -> (y_23272) ->
    let loop_23273 :=
      fun loop_23274 (acc_23275) -> (y_23276) ->
        match (__lte__ y_23276 0) with
        | true_4 => acc_23275
        | false_5 =>
          ((loop_23274) (__mul__ x_23271 acc_23275) (__sub__ y_23276 1))
        end
    in ((loop_23273) 1 y_23272)

def powm_26 :=
  lam (x_23277) -> (y_23278) -> (m_23279) ->
    let loop_23280 :=
      fun loop_23281 (acc_23282) -> (y_23283) ->
        match (__lte__ y_23283 0) with
        | true_4 => acc_23282
        | false_5 =>
          ((loop_23281)
            (__mod__ (__mul__ x_23277 acc_23282) m_23279) (__sub__ y_23283 1))
        end
    in ((loop_23280) 1 y_23278)

def ord_27 := lam (c_23284) -> (__ord__ c_23284)

def chr_28 := lam (i_23285) -> (__chr__ i_23285)

def str_29 := lam (c_23286) -> (__push__ "" c_23286)

def strlen_30 := lam (s_23287) -> (__size__ s_23287)

def string_of_int_31 :=
  lam (i_23288) ->
    let aux_23289 :=
      fun aux_23290 (i_23291) ->
        match (__lte__ 10 i_23291) with
        | true_4 =>
          let r_23292 := (__mod__ i_23291 10) in
          let i_23293 := (__div__ i_23291 10) in
          (__push__ ((aux_23290) i_23293)
            ((chr_28) (__add__ r_23292 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_23291 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_23288) with
    | true_4 => ((aux_23289) i_23288)
    | false_5 => (__cat__ "~" ((aux_23289) (__neg__ i_23288)))
    end

def splitU_83 :=
  fun split_23294 (__23295) ->
    match __23295 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_23296 tl_23297 =>
      match tl_23297 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_23296 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_23298 tl_23299 =>
        match ((split_23294) tl_23299) with
        | ex1UU_33 m_23300 n_23301 =>
          (ex1UU_33
            (consUU_25 hd_23296 m_23300) (consUU_25 hd_23298 n_23301))
        end
      end
    end

def splitL_82 :=
  fun split_23302 (__23303) ->
    match __23303 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_23304 tl_23305 =>
      match tl_23305 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_23304 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_23306 tl_23307 =>
        match ((split_23302) tl_23307) with
        | ex1LL_30 m_23308 n_23309 =>
          (ex1LL_30
            (consUL_23 hd_23304 m_23308) (consUL_23 hd_23306 n_23309))
        end
      end
    end

def mergeU_85 :=
  fun merge_23310 (__23311) -> (__23312) -o
    match __23311 with
    | nilUU_24  => __23312
    | consUU_25 hd_23313 tl_23314 =>
      match __23312 with
      | nilUU_24  => (consUU_25 hd_23313 tl_23314)
      | consUU_25 hd_23315 tl_23316 =>
        match (__lte__ hd_23313 hd_23315) with
        | true_4 =>
          (consUU_25
            hd_23313 ((merge_23310) tl_23314 (consUU_25 hd_23315 tl_23316)))
        | false_5 =>
          (consUU_25
            hd_23315 ((merge_23310) (consUU_25 hd_23313 tl_23314) tl_23316))
        end
      end
    end

def mergeL_84 :=
  fun merge_23317 (__23318) -> (__23319) -o
    match __23318 with
    | nilUL_22  => __23319
    | consUL_23 hd_23320 tl_23321 =>
      match __23319 with
      | nilUL_22  => (consUL_23 hd_23320 tl_23321)
      | consUL_23 hd_23322 tl_23323 =>
        match (__lte__ hd_23320 hd_23322) with
        | true_4 =>
          (consUL_23
            hd_23320 ((merge_23317) tl_23321 (consUL_23 hd_23322 tl_23323)))
        | false_5 =>
          (consUL_23
            hd_23322 ((merge_23317) (consUL_23 hd_23320 tl_23321) tl_23323))
        end
      end
    end

def msortU_87 :=
  fun msort_23324 (__23325) ->
    match __23325 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_23326 tl_23327 =>
      match tl_23327 with
      | nilUU_24  => (consUU_25 hd_23326 (nilUU_24 ))
      | consUU_25 hd_23328 tl_23329 =>
        match ((splitU_83)
                (consUU_25 hd_23326 (consUU_25 hd_23328 tl_23329))) with
        | ex1UU_33 m_23330 n_23331 =>
          ((mergeU_85) ((msort_23324) m_23330) ((msort_23324) n_23331))
        end
      end
    end

def msortL_86 :=
  fun msort_23332 (__23333) ->
    match __23333 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_23334 tl_23335 =>
      match tl_23335 with
      | nilUL_22  => (consUL_23 hd_23334 (nilUL_22 ))
      | consUL_23 hd_23336 tl_23337 =>
        match ((splitL_82)
                (consUL_23 hd_23334 (consUL_23 hd_23336 tl_23337))) with
        | ex1LL_30 m_23338 n_23339 =>
          ((mergeL_84) ((msort_23332) m_23338) ((msort_23332) n_23339))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_23340 (__23341) -> (zs_23342) -> (__23343) -o
    match zs_23342 with
    | nilUU_24  =>
      lazy(let c_23344 := send(__23343, (nilUU_24 )) in close[true] c_23344)
    | consUU_25 hd_23345 tl_23346 =>
      match tl_23346 with
      | nilUU_24  =>
        lazy(let c_23347 := send(__23343, (consUU_25 hd_23345 (nilUU_24 )))
             in close[true] c_23347)
      | consUU_25 hd_23348 tl_23349 =>
        match (__lte__ __23341 0) with
        | true_4 =>
          lazy(let c_23350 :=
                 send(__23343, ((msortU_87)
                                 (consUU_25
                                   hd_23345 (consUU_25 hd_23348 tl_23349))))
               in close[true] c_23350)
        | false_5 =>
          match ((splitU_83)
                  (consUU_25 hd_23345 (consUU_25 hd_23348 tl_23349))) with
          | ex1UU_33 m_23351 n_23352 =>
            lazy(let r1_23353 :=
                   fork
                     lam (_23354) -o
                       ((cmsort_worker_23340)
                         (__sub__ __23341 1) m_23351 _23354)
                 in
                 let r2_23355 :=
                   fork
                     lam (_23356) -o
                       ((cmsort_worker_23340)
                         (__sub__ __23341 1) n_23352 _23356)
                 in
                 let _23357 := recv[U](r1_23353) in
                 match _23357 with
                 | ex1UL_32 m_23358 n_23359 =>
                   let _23360 := recv[U](r2_23355) in
                   match _23360 with
                   | ex1UL_32 m_23361 n_23362 =>
                     let zs1_23363 := ((mergeU_85) m_23358 m_23361) in
                     let zs1_23364 :=
                       ((rwlUU_47) NULL NULL NULL NULL NULL zs1_23363)
                     in
                     let c_23365 := send(__23343, zs1_23364) in
                     let __23366 := close[false] n_23359 in
                     let __23367 := close[false] n_23362 in
                     close[true] c_23365
                   end
                 end)
          end
        end
      end
    end

def cmsort_workerL_90 :=
  fun cmsort_worker_23368 (__23369) -> (zs_23370) -> (__23371) -o
    match zs_23370 with
    | nilUL_22  =>
      lazy(let c_23372 := send(__23371, (nilUL_22 )) in close[true] c_23372)
    | consUL_23 hd_23373 tl_23374 =>
      match tl_23374 with
      | nilUL_22  =>
        lazy(let c_23375 := send(__23371, (consUL_23 hd_23373 (nilUL_22 )))
             in close[true] c_23375)
      | consUL_23 hd_23376 tl_23377 =>
        match (__lte__ __23369 0) with
        | true_4 =>
          lazy(let c_23378 :=
                 send(__23371, ((msortL_86)
                                 (consUL_23
                                   hd_23373 (consUL_23 hd_23376 tl_23377))))
               in close[true] c_23378)
        | false_5 =>
          match ((splitL_82)
                  (consUL_23 hd_23373 (consUL_23 hd_23376 tl_23377))) with
          | ex1LL_30 m_23379 n_23380 =>
            lazy(let r1_23381 :=
                   fork
                     lam (_23382) -o
                       ((cmsort_worker_23368)
                         (__sub__ __23369 1) m_23379 _23382)
                 in
                 let r2_23383 :=
                   fork
                     lam (_23384) -o
                       ((cmsort_worker_23368)
                         (__sub__ __23369 1) n_23380 _23384)
                 in
                 let _23385 := recv[L](r1_23381) in
                 match _23385 with
                 | ex1LL_30 m_23386 n_23387 =>
                   let _23388 := recv[L](r2_23383) in
                   match _23388 with
                   | ex1LL_30 m_23389 n_23390 =>
                     let zs1_23391 := ((mergeL_84) m_23386 m_23389) in
                     let zs1_23392 :=
                       ((rwlLL_44) NULL NULL NULL NULL NULL zs1_23391)
                     in
                     let c_23393 := send(__23371, zs1_23392) in
                     let __23394 := close[false] n_23387 in
                     let __23395 := close[false] n_23390 in
                     close[true] c_23393
                   end
                 end)
          end
        end
      end
    end

def cmsortU_93 :=
  lam (zs_23396) ->
    lazy(let c_23397 :=
           fork lam (_23398) -o ((cmsort_workerU_91) 4 zs_23396 _23398)
         in
         let _23399 := recv[U](c_23397) in
         match _23399 with
         | ex1UL_32 m_23400 n_23401 =>
           let __23402 := close[false] n_23401 in m_23400
         end)

def cmsortL_92 :=
  lam (zs_23403) ->
    lazy(let c_23404 :=
           fork lam (_23405) -o ((cmsort_workerL_90) 4 zs_23403 _23405)
         in
         let _23406 := recv[L](c_23404) in
         match _23406 with
         | ex1LL_30 m_23407 n_23408 =>
           let __23409 := close[false] n_23408 in m_23407
         end)

def mklistU_95 :=
  fun mklist_23410 (n_23411) ->
    match (__lte__ n_23411 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_23411 ((mklist_23410) (__sub__ n_23411 1)))
    end

def mklistL_94 :=
  fun mklist_23412 (n_23413) ->
    match (__lte__ n_23413 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_23413 ((mklist_23412) (__sub__ n_23413 1)))
    end

def list_lenU_97 :=
  fun list_len_23414 (__23415) ->
    match __23415 with
    | nilUU_24  => 0
    | consUU_25 hd_23416 tl_23417 => (__add__ 1 ((list_len_23414) tl_23417))
    end

def list_lenL_96 :=
  fun list_len_23418 (__23419) ->
    match __23419 with
    | nilUL_22  => 0
    | consUL_23 hd_23420 tl_23421 => (__add__ 1 ((list_len_23418) tl_23421))
    end

def print_listU_99 :=
  fun print_list_23422 (__23423) ->
    match __23423 with
    | nilUU_24  => lazy(print "nil")
    | consUU_25 hd_23424 tl_23425 =>
      lazy(let __23426 := print ((string_of_int_31) hd_23424) in
           let __23427 := print " :: " in
           force(((print_list_23422) tl_23425)))
    end

def print_listL_98 :=
  fun print_list_23428 (__23429) ->
    match __23429 with
    | nilUL_22  => lazy(print "nil")
    | consUL_23 hd_23430 tl_23431 =>
      lazy(let __23432 := print ((string_of_int_31) hd_23430) in
           let __23433 := print " :: " in
           force(((print_list_23428) tl_23431)))
    end

def main :=
  let test_23434 := ((mklistL_94) 2000000) in
  lazy(let _23435 := force(((cmsortL_92) test_23434)) in
       let len_23436 := ((list_lenL_96) _23435) in
       print ((string_of_int_31) len_23436))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := mkconstr(consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := mkconstr(nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := mkconstr(consUL_23, [hd_292, m_303]);
              x_306 := mkconstr(consUL_23, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := mkconstr(consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := mkconstr(nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := mkconstr(nilUL_22, []);
          x_372 := mkconstr(consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_23, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_24() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_24, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_25(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_24() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_24, []);
              x_401 := mkconstr(consUU_25, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_25(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_25, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_25, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_25, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_25, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_33(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_32(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_32(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                            }
                          }
                          x_437 := x_442;
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_22() => {
      x_461 :=
        lazy {
          x_464 := mkconstr(nilUL_22, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_23(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_22() => {
          x_469 :=
            lazy {
              x_472 := mkconstr(nilUL_22, []);
              x_473 := mkconstr(consUL_23, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_23(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := mkconstr(consUL_23, [hd_475, tl_476]);
                  x_484 := mkconstr(consUL_23, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := mkconstr(consUL_23, [hd_475, tl_476]);
              x_489 := mkconstr(consUL_23, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_30(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_30(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_30(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                            }
                          }
                          x_509 := x_514;
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_32(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_30(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_24, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_25, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_22, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_23, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_24() => {
      x_578 := 0;
    }
    consUU_25(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_22() => {
      x_585 := 0;
    }
    consUL_23(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_24() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_25(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_22() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
    }
    consUL_23(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := reconstr(__287, nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := reconstr(tl_293, nilUL_22, []);
          x_296 := reconstr(__287, consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_23, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_23, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
      free(__327);
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := reconstr(__327, consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := reconstr(__365, nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := reconstr(tl_369, nilUL_22, []);
          x_372 := reconstr(__365, consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_23, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_24() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_24, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_25(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_24() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_24, []);
              x_401 := mkconstr(consUU_25, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_25(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_25, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_25, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_25, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_25, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_33(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_32(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_32(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                              free(_440);
                            }
                          }
                          x_437 := x_442;
                          free(_435);
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                  free(x_415);
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_22() => {
      x_461 :=
        lazy {
          x_464 := reconstr(zs_458, nilUL_22, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_23(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_22() => {
          x_469 :=
            lazy {
              x_472 := reconstr(tl_467, nilUL_22, []);
              x_473 := reconstr(zs_458, consUL_23, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_23(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := reconstr(tl_467, consUL_23, [hd_475, tl_476]);
                  x_484 := reconstr(zs_458, consUL_23, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := reconstr(tl_467, consUL_23, [hd_475, tl_476]);
              x_489 := reconstr(zs_458, consUL_23, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_30(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_30(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_30(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                              free(_512);
                            }
                          }
                          x_509 := x_514;
                          free(_507);
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                  free(x_487);
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_32(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
          free(_537);
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_30(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
          free(_553);
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_24, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_25, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_22, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_23, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_24() => {
      x_578 := 0;
    }
    consUU_25(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_22() => {
      x_585 := 0;
      free(__584);
    }
    consUL_23(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
      free(__584);
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_24() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_25(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_22() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
      free(__608);
    }
    consUL_23(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
      free(__608);
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_634(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_635(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_636 := fn0_idU_634(A_2, m_3);
  return x_636;
}

fn fn0_idL_637(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_638(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_639 := fn0_idL_637(A_5, m_6);
  return x_639;
}

fn fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_641(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_642 := fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13);
  return x_642;
}

fn fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_644(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_645 := fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20);
  return x_645;
}

fn fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_647(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_648 := fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27);
  return x_648;
}

fn fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_650(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_651 := fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34);
  return x_651;
}

fn fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_653(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_654 := fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41);
  return x_654;
}

fn fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_656(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_657 := fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48);
  return x_657;
}

fn fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_659(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_660 := fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55);
  return x_660;
}

fn fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_662(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_663 := fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62);
  return x_663;
}

fn fn0_sing_elimUU_664(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_665(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_666 := fn0_sing_elimUU_664(A_64, x_65, __66);
  return x_666;
}

fn fn0_sing_elimUL_667(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_668(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_669 := fn0_sing_elimUL_667(A_68, x_69, __70);
  return x_669;
}

fn fn0_sing_elimLU_670(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_671(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_672 := fn0_sing_elimLU_670(A_72, x_73, __74);
  return x_672;
}

fn fn0_sing_elimLL_673(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_674(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_675 := fn0_sing_elimLL_673(A_76, x_77, __78);
  return x_675;
}

fn fn0_not_676(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_677(env) {
  __80 := env[1];
  x_678 := fn0_not_676(__80);
  return x_678;
}

fn fn0_and_679(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_680(env) {
  __83 := env[1];
  __84 := env[2];
  x_681 := fn0_and_679(__83, __84);
  return x_681;
}

fn fn0_or_682(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_683(env) {
  __88 := env[1];
  __89 := env[2];
  x_684 := fn0_or_682(__88, __89);
  return x_684;
}

fn fn0_xor_685(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_686(env) {
  __93 := env[1];
  __94 := env[2];
  x_687 := fn0_xor_685(__93, __94);
  return x_687;
}

fn fn0_lte_688(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_688(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_689(env) {
  __99 := env[1];
  __100 := env[2];
  x_690 := fn0_lte_688(__99, __100);
  return x_690;
}

fn fn0_lt_691(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_688(x_110, y_108);
  return x_109;
}

fn fn1_lt_692(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_693 := fn0_lt_691(x_107, y_108);
  return x_693;
}

fn fn0_pred_694(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_695(env) {
  __112 := env[1];
  x_696 := fn0_pred_694(__112);
  return x_696;
}

fn fn0_add_697(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_697(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_698(env) {
  __117 := env[1];
  __118 := env[2];
  x_699 := fn0_add_697(__117, __118);
  return x_699;
}

fn fn0_sub_700(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_694(__124);
      x_128 := fn0_sub_700(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_701(env) {
  __124 := env[1];
  __125 := env[2];
  x_702 := fn0_sub_700(__124, __125);
  return x_702;
}

fn fn0_mul_703(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_703(n_135, __132);
      x_136 := fn0_add_697(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_704(env) {
  __131 := env[1];
  __132 := env[2];
  x_705 := fn0_mul_703(__131, __132);
  return x_705;
}

fn fn0_div_706(x_139, y_140) {
  x_142 := fn0_lt_691(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_708, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_712, loop_144, x_139);
      appc(x_713, x_712, y_140);
      move1(x_156, x_713);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_707(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_715 := fn0_div_706(x_139, y_140);
  return x_715;
}

fn fn0_rem_716(x_158, y_159) {
  x_162 := fn0_div_706(x_158, y_159);
  x_161 := fn0_mul_703(x_162, y_159);
  x_160 := fn0_sub_700(x_158, x_161);
  return x_160;
}

fn fn1_rem_717(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_718 := fn0_rem_716(x_158, y_159);
  return x_718;
}

fn fn0_free_listUU_719(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_721, f_165, hd_168);
      move1(x_171, x_721);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_719(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_720(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_723 := fn0_free_listUU_719(A_164, f_165, __166);
  return x_723;
}

fn fn0_free_listUL_724(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_726, f_175, hd_178);
      move1(x_181, x_726);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_724(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_725(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_728 := fn0_free_listUL_724(A_174, f_175, __176);
  return x_728;
}

fn fn0_free_listLL_729(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_731, f_185, hd_188);
      move1(x_191, x_731);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_729(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_730(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_733 := fn0_free_listLL_729(A_184, f_185, __186);
  return x_733;
}

fn fn0_pow_734(x_194, y_195) {
  mkclo1(x_197, fn1_loop_736, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_740, loop_196, 1);
  appc(x_741, x_740, y_195);
  move1(x_206, x_741);
  return x_206;
}

fn fn1_pow_735(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_743 := fn0_pow_734(x_194, y_195);
  return x_743;
}

fn fn0_powm_744(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_746, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_750, loop_211, 1);
  appc(x_751, x_750, y_209);
  move1(x_222, x_751);
  return x_222;
}

fn fn1_powm_745(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_753 := fn0_powm_744(x_208, y_209, m_210);
  return x_753;
}

fn fn0_ord_754(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_755(env) {
  c_224 := env[1];
  x_756 := fn0_ord_754(c_224);
  return x_756;
}

fn fn0_chr_757(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_758(env) {
  i_227 := env[1];
  x_759 := fn0_chr_757(i_227);
  return x_759;
}

fn fn0_str_760(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_761(env) {
  c_230 := env[1];
  x_762 := fn0_str_760(c_230);
  return x_762;
}

fn fn0_strlen_763(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_764(env) {
  s_234 := env[1];
  x_765 := fn0_strlen_763(s_234);
  return x_765;
}

fn fn0_string_of_int_766(i_237) {
  mkclo1(x_239, fn1_aux_768, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_771, aux_238, i_237);
      move1(x_259, x_771);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_773, aux_238, x_263);
      move1(x_262, x_773);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_767(env) {
  i_237 := env[1];
  x_775 := fn0_string_of_int_766(i_237);
  return x_775;
}

fn fn0_splitU_776(__265) {
  switch(ctagof(__265)){
    nilUU_24 => {
      mkbox(x_267, nilUU_24, 0);
      mkbox(x_268, nilUU_24, 0);
      mkbox(x_269, ex1UU_33, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_25 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_24 => {
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, consUU_25, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_24, 0);
          mkbox(x_276, ex1UU_33, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_25 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_776(tl_278);
          switch(ctagof(x_280)){
            ex1UU_33 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_25);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_25, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_33, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_777(env) {
  __265 := env[1];
  x_778 := fn0_splitU_776(__265);
  return x_778;
}

fn fn0_splitL_779(__287) {
  switch(ctagof(__287)){
    nilUL_22 => {
      rebox(x_289, __287, nilUL_22);
      mkbox(x_290, nilUL_22, 0);
      mkbox(x_291, ex1LL_30, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_23 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_22 => {
          rebox(x_295, tl_293, nilUL_22);
          rebox(x_296, __287, consUL_23);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_22, 0);
          mkbox(x_298, ex1LL_30, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_23 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_779(tl_300);
          switch(ctagof(x_302)){
            ex1LL_30 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_23);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_23);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_30);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_780(env) {
  __287 := env[1];
  x_781 := fn0_splitL_779(__287);
  return x_781;
}

fn fn0_mergeU_782(__309, __310) {
  switch(ctagof(__309)){
    nilUU_24 => {
      move1(x_311, __310);
      break;
    }
    consUU_25 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_24 => {
          mkbox(x_315, consUU_25, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_25 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_25, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_782(tl_313, x_321);
              mkbox(x_322, consUU_25, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_25, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_782(x_324, tl_317);
              mkbox(x_325, consUU_25, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_783(env) {
  __309 := env[1];
  __310 := env[2];
  x_784 := fn0_mergeU_782(__309, __310);
  return x_784;
}

fn fn0_mergeL_785(__327, __328) {
  switch(ctagof(__327)){
    nilUL_22 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_23 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_22 => {
          rebox(x_333, __327, consUL_23);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_23 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_23);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_785(tl_331, x_339);
              rebox(x_340, __327, consUL_23);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_23);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_785(x_342, tl_335);
              rebox(x_343, __327, consUL_23);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_786(env) {
  __327 := env[1];
  __328 := env[2];
  x_787 := fn0_mergeL_785(__327, __328);
  return x_787;
}

fn fn0_msortU_788(__345) {
  switch(ctagof(__345)){
    nilUU_24 => {
      mkbox(x_347, nilUU_24, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_25 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_24 => {
          mkbox(x_351, nilUU_24, 0);
          mkbox(x_352, consUU_25, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_25 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_25, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_25, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_776(x_358);
          switch(ctagof(x_356)){
            ex1UU_33 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_788(m_359);
              x_363 := fn0_msortU_788(n_360);
              x_361 := fn0_mergeU_782(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_789(env) {
  __345 := env[1];
  x_790 := fn0_msortU_788(__345);
  return x_790;
}

fn fn0_msortL_791(__365) {
  switch(ctagof(__365)){
    nilUL_22 => {
      rebox(x_367, __365, nilUL_22);
      move1(x_366, x_367);
      break;
    }
    consUL_23 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_22 => {
          rebox(x_371, tl_369, nilUL_22);
          rebox(x_372, __365, consUL_23);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_23 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_23);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_23);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_779(x_378);
          switch(ctagof(x_376)){
            ex1LL_30 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_791(m_379);
              x_383 := fn0_msortL_791(n_380);
              x_381 := fn0_mergeL_785(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_792(env) {
  __365 := env[1];
  x_793 := fn0_msortL_791(__365);
  return x_793;
}

fn fn0_cmsort_workerU_794(__385, zs_386, __387) {
  switch(ctagof(zs_386)){
    nilUU_24 => {
      lazy(x_389, lazy__796, 1);
      setlazy(x_389, __387, 0);
      move1(x_388, x_389);
      break;
    }
    consUU_25 => {
      getbox(hd_394, zs_386, 0);
      getbox(tl_395, zs_386, 1);
      switch(ctagof(tl_395)){
        nilUU_24 => {
          lazy(x_397, lazy__797, 2);
          setlazy(x_397, __387, 0);
          setlazy(x_397, hd_394, 1);
          move1(x_396, x_397);
          break;
        }
        consUU_25 => {
          getbox(hd_403, tl_395, 0);
          getbox(tl_404, tl_395, 1);
          lte(x_406, __385, 0);
          switch(x_406){
            true_4 => {
              lazy(x_407, lazy__798, 5);
              setlazy(x_407, msortU_344, 0);
              setlazy(x_407, __387, 1);
              setlazy(x_407, hd_394, 2);
              setlazy(x_407, hd_403, 3);
              setlazy(x_407, tl_404, 4);
              move1(x_405, x_407);
              break;
            }
            false_5 => {
              mkbox(x_416, consUU_25, 2);
              setbox(x_416, hd_403, 0);
              setbox(x_416, tl_404, 1);
              mkbox(x_417, consUU_25, 2);
              setbox(x_417, hd_394, 0);
              setbox(x_417, x_416, 1);
              x_415 := fn0_splitU_776(x_417);
              switch(ctagof(x_415)){
                ex1UU_33 => {
                  getbox(m_418, x_415, 0);
                  getbox(n_419, x_415, 1);
                  lazy(x_420, lazy__799, 7);
                  setlazy(x_420, rwlUU_7, 0);
                  setlazy(x_420, mergeU_308, 1);
                  setlazy(x_420, cmsort_workerU_384, 2);
                  setlazy(x_420, __385, 3);
                  setlazy(x_420, __387, 4);
                  setlazy(x_420, m_418, 5);
                  setlazy(x_420, n_419, 6);
                  move1(x_414, x_420);
                  free(x_415);
                  break;
                }
              }
              move1(x_405, x_414);
              break;
            }
          }
          move1(x_396, x_405);
          break;
        }
      }
      move1(x_388, x_396);
      break;
    }
  }
  return x_388;
}

fn fn1_cmsort_workerU_795(env) {
  __385 := env[1];
  zs_386 := env[2];
  __387 := env[3];
  x_802 := fn0_cmsort_workerU_794(__385, zs_386, __387);
  return x_802;
}

fn fn0_cmsort_workerL_803(__457, zs_458, __459) {
  switch(ctagof(zs_458)){
    nilUL_22 => {
      lazy(x_461, lazy__805, 2);
      setlazy(x_461, zs_458, 0);
      setlazy(x_461, __459, 1);
      move1(x_460, x_461);
      break;
    }
    consUL_23 => {
      getbox(hd_466, zs_458, 0);
      getbox(tl_467, zs_458, 1);
      switch(ctagof(tl_467)){
        nilUL_22 => {
          lazy(x_469, lazy__806, 4);
          setlazy(x_469, zs_458, 0);
          setlazy(x_469, __459, 1);
          setlazy(x_469, hd_466, 2);
          setlazy(x_469, tl_467, 3);
          move1(x_468, x_469);
          break;
        }
        consUL_23 => {
          getbox(hd_475, tl_467, 0);
          getbox(tl_476, tl_467, 1);
          lte(x_478, __457, 0);
          switch(x_478){
            true_4 => {
              lazy(x_479, lazy__807, 7);
              setlazy(x_479, msortL_364, 0);
              setlazy(x_479, zs_458, 1);
              setlazy(x_479, __459, 2);
              setlazy(x_479, hd_466, 3);
              setlazy(x_479, tl_467, 4);
              setlazy(x_479, hd_475, 5);
              setlazy(x_479, tl_476, 6);
              move1(x_477, x_479);
              break;
            }
            false_5 => {
              rebox(x_488, tl_467, consUL_23);
              setbox(x_488, hd_475, 0);
              setbox(x_488, tl_476, 1);
              rebox(x_489, zs_458, consUL_23);
              setbox(x_489, hd_466, 0);
              setbox(x_489, x_488, 1);
              x_487 := fn0_splitL_779(x_489);
              switch(ctagof(x_487)){
                ex1LL_30 => {
                  getbox(m_490, x_487, 0);
                  getbox(n_491, x_487, 1);
                  lazy(x_492, lazy__808, 7);
                  setlazy(x_492, rwlLL_28, 0);
                  setlazy(x_492, mergeL_326, 1);
                  setlazy(x_492, cmsort_workerL_456, 2);
                  setlazy(x_492, __457, 3);
                  setlazy(x_492, __459, 4);
                  setlazy(x_492, m_490, 5);
                  setlazy(x_492, n_491, 6);
                  move1(x_486, x_492);
                  free(x_487);
                  break;
                }
              }
              move1(x_477, x_486);
              break;
            }
          }
          move1(x_468, x_477);
          break;
        }
      }
      move1(x_460, x_468);
      break;
    }
  }
  return x_460;
}

fn fn1_cmsort_workerL_804(env) {
  __457 := env[1];
  zs_458 := env[2];
  __459 := env[3];
  x_811 := fn0_cmsort_workerL_803(__457, zs_458, __459);
  return x_811;
}

fn fn0_cmsortU_812(zs_529) {
  lazy(x_530, lazy__814, 2);
  setlazy(x_530, cmsort_workerU_384, 0);
  setlazy(x_530, zs_529, 1);
  return x_530;
}

fn fn1_cmsortU_813(env) {
  zs_529 := env[1];
  x_816 := fn0_cmsortU_812(zs_529);
  return x_816;
}

fn fn0_cmsortL_817(zs_545) {
  lazy(x_546, lazy__819, 2);
  setlazy(x_546, cmsort_workerL_456, 0);
  setlazy(x_546, zs_545, 1);
  return x_546;
}

fn fn1_cmsortL_818(env) {
  zs_545 := env[1];
  x_821 := fn0_cmsortL_817(zs_545);
  return x_821;
}

fn fn0_mklistU_822(n_561) {
  lte(x_563, n_561, 0);
  switch(x_563){
    true_4 => {
      mkbox(x_564, nilUU_24, 0);
      move1(x_562, x_564);
      break;
    }
    false_5 => {
      sub(x_566, n_561, 1);
      x_565 := fn0_mklistU_822(x_566);
      mkbox(x_567, consUU_25, 2);
      setbox(x_567, n_561, 0);
      setbox(x_567, x_565, 1);
      move1(x_562, x_567);
      break;
    }
  }
  return x_562;
}

fn fn1_mklistU_823(env) {
  n_561 := env[1];
  x_824 := fn0_mklistU_822(n_561);
  return x_824;
}

fn fn0_mklistL_825(n_569) {
  lte(x_571, n_569, 0);
  switch(x_571){
    true_4 => {
      mkbox(x_572, nilUL_22, 0);
      move1(x_570, x_572);
      break;
    }
    false_5 => {
      sub(x_574, n_569, 1);
      x_573 := fn0_mklistL_825(x_574);
      mkbox(x_575, consUL_23, 2);
      setbox(x_575, n_569, 0);
      setbox(x_575, x_573, 1);
      move1(x_570, x_575);
      break;
    }
  }
  return x_570;
}

fn fn1_mklistL_826(env) {
  n_569 := env[1];
  x_827 := fn0_mklistL_825(n_569);
  return x_827;
}

fn fn0_list_lenU_828(__577) {
  switch(ctagof(__577)){
    nilUU_24 => {
      move1(x_578, 0);
      break;
    }
    consUU_25 => {
      getbox(hd_579, __577, 0);
      getbox(tl_580, __577, 1);
      x_582 := fn0_list_lenU_828(tl_580);
      add(x_581, 1, x_582);
      move1(x_578, x_581);
      break;
    }
  }
  return x_578;
}

fn fn1_list_lenU_829(env) {
  __577 := env[1];
  x_830 := fn0_list_lenU_828(__577);
  return x_830;
}

fn fn0_list_lenL_831(__584) {
  switch(ctagof(__584)){
    nilUL_22 => {
      move1(x_585, 0);
      free(__584);
      break;
    }
    consUL_23 => {
      getbox(hd_586, __584, 0);
      getbox(tl_587, __584, 1);
      x_589 := fn0_list_lenL_831(tl_587);
      add(x_588, 1, x_589);
      move1(x_585, x_588);
      free(__584);
      break;
    }
  }
  return x_585;
}

fn fn1_list_lenL_832(env) {
  __584 := env[1];
  x_833 := fn0_list_lenL_831(__584);
  return x_833;
}

fn fn0_print_listU_834(__591) {
  switch(ctagof(__591)){
    nilUU_24 => {
      lazy(x_593, lazy__836, 0);
      move1(x_592, x_593);
      break;
    }
    consUU_25 => {
      getbox(hd_596, __591, 0);
      getbox(tl_597, __591, 1);
      lazy(x_598, lazy__837, 4);
      setlazy(x_598, string_of_int_236, 0);
      setlazy(x_598, print_listU_590, 1);
      setlazy(x_598, hd_596, 2);
      setlazy(x_598, tl_597, 3);
      move1(x_592, x_598);
      break;
    }
  }
  return x_592;
}

fn fn1_print_listU_835(env) {
  __591 := env[1];
  x_838 := fn0_print_listU_834(__591);
  return x_838;
}

fn fn0_print_listL_839(__608) {
  switch(ctagof(__608)){
    nilUL_22 => {
      lazy(x_610, lazy__841, 0);
      move1(x_609, x_610);
      free(__608);
      break;
    }
    consUL_23 => {
      getbox(hd_613, __608, 0);
      getbox(tl_614, __608, 1);
      lazy(x_615, lazy__842, 4);
      setlazy(x_615, string_of_int_236, 0);
      setlazy(x_615, print_listL_607, 1);
      setlazy(x_615, hd_613, 2);
      setlazy(x_615, tl_614, 3);
      move1(x_609, x_615);
      free(__608);
      break;
    }
  }
  return x_609;
}

fn fn1_print_listL_840(env) {
  __608 := env[1];
  x_843 := fn0_print_listL_839(__608);
  return x_843;
}

fn lazy__845(env) {
  string_of_int_236 := env[0];
  cmsortL_544 := env[1];
  list_lenL_583 := env[2];
  test_624 := env[3];
  x_629 := fn0_cmsortL_817(test_624);
  force(x_628, x_629);
  free(x_629);
  move1(_627, x_628);
  x_631 := fn0_list_lenL_831(_627);
  move1(len_630, x_631);
  x_633 := fn0_string_of_int_766(len_630);
  print(x_632, x_633);
  return x_632;
}

fn lazy__842(env) {
  string_of_int_236 := env[0];
  print_listL_607 := env[1];
  hd_613 := env[2];
  tl_614 := env[3];
  x_618 := fn0_string_of_int_766(hd_613);
  print(x_617, x_618);
  move1(__616, x_617);
  str(x_621, " :: ")
  print(x_620, x_621);
  move1(__619, x_620);
  x_623 := fn0_print_listL_839(tl_614);
  force(x_622, x_623);
  free(x_623);
  return x_622;
}

fn lazy__841(env) {
  str(x_612, "nil")
  print(x_611, x_612);
  return x_611;
}

fn lazy__837(env) {
  string_of_int_236 := env[0];
  print_listU_590 := env[1];
  hd_596 := env[2];
  tl_597 := env[3];
  x_601 := fn0_string_of_int_766(hd_596);
  print(x_600, x_601);
  move1(__599, x_600);
  str(x_604, " :: ")
  print(x_603, x_604);
  move1(__602, x_603);
  x_606 := fn0_print_listU_834(tl_597);
  force(x_605, x_606);
  free(x_606);
  return x_605;
}

fn lazy__836(env) {
  str(x_595, "nil")
  print(x_594, x_595);
  return x_594;
}

fn lazy__819(env) {
  cmsort_workerL_456 := env[0];
  zs_545 := env[1];
  mkclo1(x_549, fn1_lam_820, fvc:=2, argc:=1);
  setclo(x_549, cmsort_workerL_456, 1);
  setclo(x_549, zs_545, 2);
  fork(x_548, x_549);
  move1(c_547, x_548);
  recv1(x_554, c_547);
  move1(_553, x_554);
  switch(ctagof(_553)){
    ex1LL_30 => {
      getbox(m_556, _553, 0);
      getbox(n_557, _553, 1);
      close1(x_559, n_557);
      move1(__558, x_559);
      move1(x_555, m_556);
      free(_553);
      break;
    }
  }
  return x_555;
}

fn fn1_lam_820(env) {
  lam_550 := env[0];
  cmsort_workerL_456 := env[1];
  zs_545 := env[2];
  _551 := env[3];
  x_552 := fn0_cmsort_workerL_803(4, zs_545, _551);
  return x_552;
}

fn lazy__814(env) {
  cmsort_workerU_384 := env[0];
  zs_529 := env[1];
  mkclo1(x_533, fn1_lam_815, fvc:=2, argc:=1);
  setclo(x_533, cmsort_workerU_384, 1);
  setclo(x_533, zs_529, 2);
  fork(x_532, x_533);
  move1(c_531, x_532);
  recv0(x_538, c_531);
  move1(_537, x_538);
  switch(ctagof(_537)){
    ex1UL_32 => {
      getbox(m_540, _537, 0);
      getbox(n_541, _537, 1);
      close1(x_543, n_541);
      move1(__542, x_543);
      move1(x_539, m_540);
      free(_537);
      break;
    }
  }
  return x_539;
}

fn fn1_lam_815(env) {
  lam_534 := env[0];
  cmsort_workerU_384 := env[1];
  zs_529 := env[2];
  _535 := env[3];
  x_536 := fn0_cmsort_workerU_794(4, zs_529, _535);
  return x_536;
}

fn lazy__808(env) {
  rwlLL_28 := env[0];
  mergeL_326 := env[1];
  cmsort_workerL_456 := env[2];
  __457 := env[3];
  __459 := env[4];
  m_490 := env[5];
  n_491 := env[6];
  mkclo1(x_495, fn1_lam_809, fvc:=3, argc:=1);
  setclo(x_495, cmsort_workerL_456, 1);
  setclo(x_495, __457, 2);
  setclo(x_495, m_490, 3);
  fork(x_494, x_495);
  move1(r1_493, x_494);
  mkclo1(x_502, fn1_lam_810, fvc:=3, argc:=1);
  setclo(x_502, cmsort_workerL_456, 1);
  setclo(x_502, __457, 2);
  setclo(x_502, n_491, 3);
  fork(x_501, x_502);
  move1(r2_500, x_501);
  recv1(x_508, r1_493);
  move1(_507, x_508);
  switch(ctagof(_507)){
    ex1LL_30 => {
      getbox(m_510, _507, 0);
      getbox(n_511, _507, 1);
      recv1(x_513, r2_500);
      move1(_512, x_513);
      switch(ctagof(_512)){
        ex1LL_30 => {
          getbox(m_515, _512, 0);
          getbox(n_516, _512, 1);
          x_518 := fn0_mergeL_785(m_510, m_515);
          move1(zs1_517, x_518);
          x_520 := fn0_rwlLL_649(NULL, NULL, NULL, NULL, NULL, zs1_517);
          move1(zs1_519, x_520);
          send(x_522, __459, zs1_519);
          move1(c_521, x_522);
          close1(x_524, n_511);
          move1(__523, x_524);
          close1(x_526, n_516);
          move1(__525, x_526);
          close0(x_527, c_521);
          move1(x_514, x_527);
          free(_512);
          break;
        }
      }
      move1(x_509, x_514);
      free(_507);
      break;
    }
  }
  return x_509;
}

fn fn1_lam_809(env) {
  lam_496 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  m_490 := env[3];
  _497 := env[4];
  sub(x_499, __457, 1);
  x_498 := fn0_cmsort_workerL_803(x_499, m_490, _497);
  return x_498;
}

fn fn1_lam_810(env) {
  lam_503 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  n_491 := env[3];
  _504 := env[4];
  sub(x_506, __457, 1);
  x_505 := fn0_cmsort_workerL_803(x_506, n_491, _504);
  return x_505;
}

fn lazy__807(env) {
  msortL_364 := env[0];
  zs_458 := env[1];
  __459 := env[2];
  hd_466 := env[3];
  tl_467 := env[4];
  hd_475 := env[5];
  tl_476 := env[6];
  rebox(x_483, tl_467, consUL_23);
  setbox(x_483, hd_475, 0);
  setbox(x_483, tl_476, 1);
  rebox(x_484, zs_458, consUL_23);
  setbox(x_484, hd_466, 0);
  setbox(x_484, x_483, 1);
  x_482 := fn0_msortL_791(x_484);
  send(x_481, __459, x_482);
  move1(c_480, x_481);
  close0(x_485, c_480);
  return x_485;
}

fn lazy__806(env) {
  zs_458 := env[0];
  __459 := env[1];
  hd_466 := env[2];
  tl_467 := env[3];
  rebox(x_472, tl_467, nilUL_22);
  rebox(x_473, zs_458, consUL_23);
  setbox(x_473, hd_466, 0);
  setbox(x_473, x_472, 1);
  send(x_471, __459, x_473);
  move1(c_470, x_471);
  close0(x_474, c_470);
  return x_474;
}

fn lazy__805(env) {
  zs_458 := env[0];
  __459 := env[1];
  rebox(x_464, zs_458, nilUL_22);
  send(x_463, __459, x_464);
  move1(c_462, x_463);
  close0(x_465, c_462);
  return x_465;
}

fn lazy__799(env) {
  rwlUU_7 := env[0];
  mergeU_308 := env[1];
  cmsort_workerU_384 := env[2];
  __385 := env[3];
  __387 := env[4];
  m_418 := env[5];
  n_419 := env[6];
  mkclo1(x_423, fn1_lam_800, fvc:=3, argc:=1);
  setclo(x_423, cmsort_workerU_384, 1);
  setclo(x_423, __385, 2);
  setclo(x_423, m_418, 3);
  fork(x_422, x_423);
  move1(r1_421, x_422);
  mkclo1(x_430, fn1_lam_801, fvc:=3, argc:=1);
  setclo(x_430, cmsort_workerU_384, 1);
  setclo(x_430, __385, 2);
  setclo(x_430, n_419, 3);
  fork(x_429, x_430);
  move1(r2_428, x_429);
  recv0(x_436, r1_421);
  move1(_435, x_436);
  switch(ctagof(_435)){
    ex1UL_32 => {
      getbox(m_438, _435, 0);
      getbox(n_439, _435, 1);
      recv0(x_441, r2_428);
      move1(_440, x_441);
      switch(ctagof(_440)){
        ex1UL_32 => {
          getbox(m_443, _440, 0);
          getbox(n_444, _440, 1);
          x_446 := fn0_mergeU_782(m_438, m_443);
          move1(zs1_445, x_446);
          x_448 := fn0_rwlUU_640(NULL, NULL, NULL, NULL, NULL, zs1_445);
          move1(zs1_447, x_448);
          send(x_450, __387, zs1_447);
          move1(c_449, x_450);
          close1(x_452, n_439);
          move1(__451, x_452);
          close1(x_454, n_444);
          move1(__453, x_454);
          close0(x_455, c_449);
          move1(x_442, x_455);
          free(_440);
          break;
        }
      }
      move1(x_437, x_442);
      free(_435);
      break;
    }
  }
  return x_437;
}

fn fn1_lam_800(env) {
  lam_424 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  m_418 := env[3];
  _425 := env[4];
  sub(x_427, __385, 1);
  x_426 := fn0_cmsort_workerU_794(x_427, m_418, _425);
  return x_426;
}

fn fn1_lam_801(env) {
  lam_431 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  n_419 := env[3];
  _432 := env[4];
  sub(x_434, __385, 1);
  x_433 := fn0_cmsort_workerU_794(x_434, n_419, _432);
  return x_433;
}

fn lazy__798(env) {
  msortU_344 := env[0];
  __387 := env[1];
  hd_394 := env[2];
  hd_403 := env[3];
  tl_404 := env[4];
  mkbox(x_411, consUU_25, 2);
  setbox(x_411, hd_403, 0);
  setbox(x_411, tl_404, 1);
  mkbox(x_412, consUU_25, 2);
  setbox(x_412, hd_394, 0);
  setbox(x_412, x_411, 1);
  x_410 := fn0_msortU_788(x_412);
  send(x_409, __387, x_410);
  move1(c_408, x_409);
  close0(x_413, c_408);
  return x_413;
}

fn lazy__797(env) {
  __387 := env[0];
  hd_394 := env[1];
  mkbox(x_400, nilUU_24, 0);
  mkbox(x_401, consUU_25, 2);
  setbox(x_401, hd_394, 0);
  setbox(x_401, x_400, 1);
  send(x_399, __387, x_401);
  move1(c_398, x_399);
  close0(x_402, c_398);
  return x_402;
}

fn lazy__796(env) {
  __387 := env[0];
  mkbox(x_392, nilUU_24, 0);
  send(x_391, __387, x_392);
  move1(c_390, x_391);
  close0(x_393, c_390);
  return x_393;
}

fn fn1_aux_768(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_769, aux_240, i_246);
      move1(x_249, x_769);
      x_252 := fn0_ord_754(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_757(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_754(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_757(x_255);
      x_253 := fn0_str_760(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_746(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_747, loop_213, x_219);
      appc(x_748, x_747, x_221);
      move1(x_218, x_748);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_736(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_737, loop_198, x_204);
      appc(x_738, x_737, x_205);
      move1(x_203, x_738);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_708(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_694(y_148);
  x_150 := fn0_sub_700(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_709, loop_146, n_153);
      appc(x_710, x_709, y_148);
      move1(x_154, x_710);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_635, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_638, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_641, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_644, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_647, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_650, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_653, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_656, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_659, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_662, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_665, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_668, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_671, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_674, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_677, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_680, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_683, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_686, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_689, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_692, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_695, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_698, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_701, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_704, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_707, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_717, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_720, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_725, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_730, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_735, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_745, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_755, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_758, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_761, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_764, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_767, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_777, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_780, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_783, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_786, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_789, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_792, fvc:=0, argc:=1);
  mkclo0(cmsort_workerU_384, fn1_cmsort_workerU_795, fvc:=0, argc:=3);
  mkclo0(cmsort_workerL_456, fn1_cmsort_workerL_804, fvc:=0, argc:=3);
  mkclo0(cmsortU_528, fn1_cmsortU_813, fvc:=0, argc:=1);
  mkclo0(cmsortL_544, fn1_cmsortL_818, fvc:=0, argc:=1);
  mkclo0(mklistU_560, fn1_mklistU_823, fvc:=0, argc:=1);
  mkclo0(mklistL_568, fn1_mklistL_826, fvc:=0, argc:=1);
  mkclo0(list_lenU_576, fn1_list_lenU_829, fvc:=0, argc:=1);
  mkclo0(list_lenL_583, fn1_list_lenL_832, fvc:=0, argc:=1);
  mkclo0(print_listU_590, fn1_print_listU_835, fvc:=0, argc:=1);
  mkclo0(print_listL_607, fn1_print_listL_840, fvc:=0, argc:=1);
  x_625 := fn0_mklistL_825(2000000);
  move1(test_624, x_625);
  lazy(x_626, lazy__845, 4);
  setlazy(x_626, string_of_int_236, 0);
  setlazy(x_626, cmsortL_544, 1);
  setlazy(x_626, list_lenL_583, 2);
  setlazy(x_626, test_624, 3);
  force(x_844, x_626);
  return x_844;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

