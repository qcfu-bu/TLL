[Inductive {name = "unit"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)), [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
      ));
   view = []};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("true", (TBase (Id ("bool", I))), []));
             (DConstr ("false", (TBase (Id ("bool", I))), []))]))
       ));
    view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("pred", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id ("A", I)),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id ("A", I)),
                          (Binder ("_", (TBase (Type U)))))),
                       [(DConstr ("refl",
                           (TBase
                              (App
                                 [(Id ("eq", I)); (Id ("m", I));
                                   (Id ("m", I))])),
                           []))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DConstr ("ex",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (N,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("pf",
                                       (TBase
                                          (App
                                             [(Id ("exists", I));
                                               (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "prod"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Type (SId "r")),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DConstr ("pair",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R, (Id ("B", I)),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("prod", I));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [E; E]};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("A", I)),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DConstr ("just",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("m",
                           (TBase (App [(Id ("sing", I)); (Id ("m", I))]))))
                        )),
                     [E]))
                   ]))
             ))
          ))
       ));
    view = [I]};
  Inductive {name = "list"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type U)),
                 [(DConstr ("nil",
                     (TBase (App [(Id ("list", I)); (Id ("A", I))])), 
                     []));
                   (DConstr ("cons",
                      (TBind (R, (Id ("A", I)),
                         (Binder ("hd",
                            (TBind (R,
                               (App [(Id ("list", I)); (Id ("A", I))]),
                               (Binder ("tl",
                                  (TBase
                                     (App [(Id ("list", I)); (Id ("A", I))]))
                                  ))
                               ))
                            ))
                         )),
                      [E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Inductive {name = "vec"; relv = R;
    body =
    (Binder ([],
       (PBind ((Type U),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("nat", I)), (Binder ("_", (TBase (Type U))))
                    )),
                 [(DConstr ("vnil",
                     (TBase
                        (App
                           [(Id ("vec", I)); (Id ("A", I)); (Id ("zero", I))])),
                     []));
                   (DConstr ("vcons",
                      (TBind (N, (Id ("nat", I)),
                         (Binder ("n",
                            (TBind (R, (Id ("A", I)),
                               (Binder ("hd",
                                  (TBind (R,
                                     (App
                                        [(Id ("vec", I)); (Id ("A", I));
                                          (Id ("n", I))]),
                                     (Binder ("tl",
                                        (TBase
                                           (App
                                              [(Id ("vec", I));
                                                (Id ("A", I));
                                                (App
                                                   [(Id ("succ", I));
                                                     (Id ("n", I))])
                                                ]))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         )),
                      [I; E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Definition {name = "uncons"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("_", (Id ("A", I))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "uncons"),
              [([(PId "A"); (PId "zero");
                  (PConstr ("vcons", [(PId "n"); (PId "hd"); (PId "_")]))],
                (Some (Match ([(N, (Id ("n", I)), None)], None,
                         [([(PId "zero")], (Some (Id ("hd", I))));
                           ([(PConstr ("succ", [(PId "_")]))],
                            (Some (Id ("hd", I))))
                           ]
                         ))));
                ([(PId "A"); (PId "_");
                   (PConstr ("vcons", [(PId "_"); (PId "hd"); (PId "_")]))],
                 (Some (Id ("hd", I))))
                ]
              )),
           [I])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("_", (Id ("A", I))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I]};
  Definition {name = "uncons2"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("_",
                             (Pi (R, U,
                                (App
                                   [(Id ("vec", I)); (Id ("A", I));
                                     (App [(Id ("succ", I)); (Id ("n", I))])]),
                                (Binder ("_",
                                   (App
                                      [(Inst ("prod",
                                          [(SId "_"); (SId "_"); L], I));
                                        (Id ("A", I)); (Id ("A", I))])
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "uncons2"),
              [([(PId "A"); (PId "n");
                  (PConstr ("vcons", [(PId "_"); (PId "hd1"); (PId "_")]));
                  (PConstr ("vcons", [(PId "_"); (PId "hd2"); (PId "_")]))],
                (Some (App
                         [(Id ("pair", I)); (Id ("hd1", I)); (Id ("hd2", I))])))
                ]
              )),
           [I; I])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("_",
                          (Pi (R, U,
                             (App
                                [(Id ("vec", I)); (Id ("A", I));
                                  (App [(Id ("succ", I)); (Id ("n", I))])]),
                             (Binder ("_",
                                (App
                                   [(Inst ("prod", [(SId "_"); (SId "_"); L],
                                       I));
                                     (Id ("A", I)); (Id ("A", I))])
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]}
  ]

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_90 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_91› (A_92 : Type‹s_91›) (m_93 : A_92): A_92 -> U
where
| refl_6 : (eq_4‹??_1› ?_1 m_93 m_93)

#[program]
inductive exists_5‹s_95,r_96,t_97› (A_98 : Type‹s_95›) (B_99 : 
A_98 -> Type‹r_96›): Type‹t_97› where
| ex_7
    (m_101 : A_98) {pf_102 : ((B_99) m_101)}
    : (exists_5‹??_2,??_3,??_4› ?_2 B_99)

#[program]
inductive prod_6‹s_103,r_104,t_105› (A_106 : Type‹s_103›) (B_107 : Type‹r_104›):
  Type‹t_105›
where
| pair_8
    (m_108 : A_106) (n_109 : B_107)
    : (prod_6‹??_5,??_6,??_7› A_106 B_107)

#[program]
inductive sing_7‹s_110› (A_111 : Type‹s_110›):
  A_111 -> Type‹s_110›
where
| just_9 (m_113 : A_111) : (sing_7‹??_8› ?_3 m_113)

#[program]
inductive list_8‹s_114› (A_115 : Type‹s_114›): U where
| nil_10 : (list_8‹??_9› A_115)
| cons_11
    (hd_116 : A_115) (tl_117 : (list_8‹??_10› A_115))
    : (list_8‹??_11› A_115)

#[program]
inductive vec_9‹› (A_118 : U): nat_3 -> U where
| vnil_12 : (vec_9 A_118 zero_4)
| vcons_13
    {n_120 : nat_3} (hd_121 : A_118) (tl_122 : (vec_9 A_118 n_120))
    : (vec_9 A_118 (succ_5‹› n_120))

#[program]
def uncons_1‹› :
  ∀ {A_123 : U} ->
    ∀ {n_124 : nat_3} -> (vec_9 A_123 (succ_5‹› n_124)) -> A_123
:=
  function uncons_126 :
    ∀ {A_127 : U} ->
      ∀ {n_128 : nat_3} -> (vec_9 A_127 (succ_5‹› n_128)) -> A_127
  | A_130 zero_4 (vcons_13 n_131 hd_132 _133) =>
    match n_131 in ∀ {_134 : ?_4} -o ?_5 with
    | zero_4 => hd_132
    | (succ_5 _135) => hd_132
  | A_136 _137 (vcons_13 _138 hd_139 _140) => hd_139

#[program]
def uncons2_2‹› :
  ∀ {A_141 : U} ->
    ∀ {n_142 : nat_3} ->
      (vec_9 A_141 (succ_5‹› n_142)) ->
        (vec_9 A_141 (succ_5‹› n_142)) ->
          (prod_6‹??_17,??_18,L› A_141 A_141)
:=
  function uncons2_145 :
    ∀ {A_146 : U} ->
      ∀ {n_147 : nat_3} ->
        (vec_9 A_146 (succ_5‹› n_147)) ->
          (vec_9 A_146 (succ_5‹› n_147)) ->
            (prod_6‹??_12,??_13,L› A_146 A_146)
  | A_150 n_151 (vcons_13 _152 hd1_153 _154) (vcons_13 _155 hd2_156 _157) =>
    (pair_8‹??_14,??_15,??_16› hd1_153 hd2_156)

-----------------------------------------

inductive-------------------------
infer_tm(unit_1)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(bool_2)
infer_tm(bool_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(nat_3)
infer_tm(nat_3)
infer_tm(nat_3)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_160›)
infer_tm(A_161)
infer_tm(A_161)
infer_tm(Type‹s_164›)
infer_tm(A_165)
assert_equal1( A_165, ?_1)
assert_equal1( m_166, m_166)
infer_tm((eq_4‹??_1› ?_1 m_166 m_166))
check_tm( ?_1, Type‹??_1›)
check_tm( m_166, ?_1)
infer_tm(m_166)
assert_equal1( ?_1, A_165)
check_tm( m_166, ?_1)
infer_tm(m_166)
assert_equal1( ?_1, A_165)
simpl_tm ~expand:false( ?_1, A_165)
simpl_tm ~expand:false( A_165, A_165)
simpl_tm ~expand:false( A_165, A_165)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_167
    
  |}
  imeta_meta {|
    ?_1 <= A_170
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_164›)
check_tm( A_165, Type‹s_164›)
infer_tm(A_165)
assert_equal1( Type‹s_164›, Type‹s_164›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_182›)
infer_tm(A_185 -> Type‹r_183›)
infer_tm(A_185)
infer_tm(Type‹r_183›)
infer_tm(Type‹s_189›)
infer_tm(A_192 -> Type‹r_190›)
infer_tm(A_192)
infer_tm(Type‹r_190›)
infer_tm(A_192)
infer_tm(((B_193) m_196))
infer_tm(B_193)
check_tm( m_196, A_192)
infer_tm(m_196)
assert_equal1( A_192, A_192)
assert_equal1( A_192, ?_2)
assert_equal1( B_193, B_193)
infer_tm((exists_5‹??_2,??_3,??_4› ?_2 B_193))
check_tm( ?_2, Type‹??_2›)
check_tm( B_193, ?_2 -> Type‹??_3›)
infer_tm(B_193)
assert_equal1( ?_2 -> Type‹??_3›, A_192 -> Type‹r_190›)
simpl_tm ~expand:false( ?_2 -> Type‹??_3›, A_192 -> Type‹r_190›)
simpl_tm ~expand:false( ?_2, A_192)
simpl_tm ~expand:false( Type‹??_3›, Type‹r_190›)
simpl_tm ~expand:false( A_192, A_192)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_207
    ??_2 <= s_210
    ??_3 <= r_212
    ??_4 <= t_214
    
  |}
  imeta_meta {|
    ?_1 <= A_219
    ?_2 <= A_226
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_189›)
check_tm( A_192, Type‹s_189›)
infer_tm(A_192)
assert_equal1( Type‹s_189›, Type‹s_189›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_259›)
infer_tm(Type‹r_260›)
infer_tm(Type‹s_264›)
infer_tm(Type‹r_265›)
infer_tm(A_267)
infer_tm(B_268)
assert_equal1( A_267, A_267)
assert_equal1( B_268, B_268)
infer_tm((prod_6‹??_5,??_6,??_7› A_267 B_268))
check_tm( A_267, Type‹??_5›)
infer_tm(A_267)
assert_equal1( Type‹??_5›, Type‹s_264›)
check_tm( B_268, Type‹??_6›)
infer_tm(B_268)
assert_equal1( Type‹??_6›, Type‹r_265›)
simpl_tm ~expand:false( Type‹??_6›, Type‹r_265›)
simpl_tm ~expand:false( Type‹??_5›, Type‹s_264›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_271
    ??_2 <= s_274
    ??_3 <= r_276
    ??_4 <= t_278
    ??_5 <= s_283
    ??_6 <= r_285
    ??_7 <= t_287
    
  |}
  imeta_meta {|
    ?_1 <= A_292
    ?_2 <= A_299
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_325›)
infer_tm(A_326)
infer_tm(Type‹s_328›)
infer_tm(A_329)
assert_equal1( A_329, ?_3)
infer_tm((sing_7‹??_8› ?_3 m_330))
check_tm( ?_3, Type‹??_8›)
check_tm( m_330, ?_3)
infer_tm(m_330)
assert_equal1( ?_3, A_329)
simpl_tm ~expand:false( ?_3, A_329)
simpl_tm ~expand:false( A_329, A_329)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_331
    ??_2 <= s_334
    ??_3 <= r_336
    ??_4 <= t_338
    ??_5 <= s_343
    ??_6 <= r_345
    ??_7 <= t_347
    ??_8 <= s_350
    
  |}
  imeta_meta {|
    ?_1 <= A_353
    ?_2 <= A_360
    ?_3 <= A_363
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_328›)
check_tm( A_329, Type‹s_328›)
infer_tm(A_329)
assert_equal1( Type‹s_328›, Type‹s_328›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_376›)
infer_tm(Type‹s_378›)
assert_equal1( A_379, A_379)
infer_tm((list_8‹??_9› A_379))
check_tm( A_379, Type‹??_9›)
infer_tm(A_379)
assert_equal1( Type‹??_9›, Type‹s_378›)
simpl_tm ~expand:false( Type‹??_9›, Type‹s_378›)
infer_tm(Type‹s_380›)
infer_tm(A_381)
infer_tm((list_8‹??_10› A_381))
check_tm( A_381, Type‹??_10›)
infer_tm(A_381)
assert_equal1( Type‹??_10›, Type‹s_380›)
simpl_tm ~expand:false( Type‹??_10›, Type‹s_380›)
assert_equal1( A_381, A_381)
infer_tm((list_8‹??_11› A_381))
check_tm( A_381, Type‹??_11›)
infer_tm(A_381)
assert_equal1( Type‹??_11›, Type‹s_380›)
simpl_tm ~expand:false( Type‹??_11›, Type‹s_380›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_384
    ??_2 <= s_387
    ??_3 <= r_389
    ??_4 <= t_391
    ??_5 <= s_396
    ??_6 <= r_398
    ??_7 <= t_400
    ??_8 <= s_403
    ??_9 <= s_404
    ??_10 <= s_405
    ??_11 <= s_406
    
  |}
  imeta_meta {|
    ?_1 <= A_409
    ?_2 <= A_416
    ?_3 <= A_419
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(U)
infer_tm(nat_3)
infer_tm(U)
assert_equal1( A_437, A_437)
infer_tm((vec_9 A_437 zero_4))
check_tm( A_437, U)
infer_tm(A_437)
assert_equal1( U, U)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
infer_tm(U)
infer_tm(nat_3)
infer_tm(A_438)
infer_tm((vec_9 A_438 n_439))
check_tm( A_438, U)
infer_tm(A_438)
assert_equal1( U, U)
check_tm( n_439, nat_3)
infer_tm(n_439)
assert_equal1( nat_3, nat_3)
assert_equal1( A_438, A_438)
infer_tm((vec_9 A_438 (succ_5‹› n_439)))
check_tm( A_438, U)
infer_tm(A_438)
assert_equal1( U, U)
check_tm( (succ_5‹› n_439), nat_3)
infer_tm((succ_5‹› n_439))
check_tm( n_439, nat_3)
infer_tm(n_439)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_442
    ??_2 <= s_445
    ??_3 <= r_447
    ??_4 <= t_449
    ??_5 <= s_454
    ??_6 <= r_456
    ??_7 <= t_458
    ??_8 <= s_461
    ??_9 <= s_462
    ??_10 <= s_463
    ??_11 <= s_464
    
  |}
  imeta_meta {|
    ?_1 <= A_467
    ?_2 <= A_474
    ?_3 <= A_477
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(∀ {A_491 : U} ->
           ∀ {n_492 : nat_3} -> (vec_9 A_491 (succ_5‹› n_492)) -> A_491)
infer_tm(U)
infer_tm(∀ {n_495 : nat_3} -> (vec_9 A_494 (succ_5‹› n_495)) -> A_494)
infer_tm(nat_3)
infer_tm((vec_9 A_494 (succ_5‹› n_497)) -> A_494)
infer_tm((vec_9 A_494 (succ_5‹› n_497)))
check_tm( A_494, U)
infer_tm(A_494)
assert_equal1( U, U)
check_tm( (succ_5‹› n_497), nat_3)
infer_tm((succ_5‹› n_497))
check_tm( n_497, nat_3)
infer_tm(n_497)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
infer_tm(A_494)
check_tm(
  function uncons_500 :
    ∀ {A_501 : U} ->
      ∀ {n_502 : nat_3} -> (vec_9 A_501 (succ_5‹› n_502)) -> A_501
  | A_504 zero_4 (vcons_13 n_505 hd_506 _507) =>
    match n_505 in ∀ {_508 : ?_4} -o ?_5 with
    | zero_4 => hd_506
    | (succ_5 _509) => hd_506
  | A_510 _511 (vcons_13 _512 hd_513 _514) => hd_513,
  ∀ {A_515 : U} ->
    ∀ {n_516 : nat_3} -> (vec_9 A_515 (succ_5‹› n_516)) -> A_515)
infer_tm(∀ {A_519 : U} ->
           ∀ {n_520 : nat_3} -> (vec_9 A_519 (succ_5‹› n_520)) -> A_519)
infer_tm(U)
infer_tm(∀ {n_523 : nat_3} -> (vec_9 A_522 (succ_5‹› n_523)) -> A_522)
infer_tm(nat_3)
infer_tm((vec_9 A_522 (succ_5‹› n_525)) -> A_522)
infer_tm((vec_9 A_522 (succ_5‹› n_525)))
check_tm( A_522, U)
infer_tm(A_522)
assert_equal1( U, U)
check_tm( (succ_5‹› n_525), nat_3)
infer_tm((succ_5‹› n_525))
check_tm( n_525, nat_3)
infer_tm(n_525)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
infer_tm(A_522)
assert_equal1(
  ∀ {A_528 : U} ->
    ∀ {n_529 : nat_3} -> (vec_9 A_528 (succ_5‹› n_529)) -> A_528,
  ∀ {A_531 : U} ->
    ∀ {n_532 : nat_3} -> (vec_9 A_531 (succ_5‹› n_532)) -> A_531)
check_cls {|
  prblm {| ;
    {|  ::: [A_537, zero_4, (vcons_13 n_538 hd_539 _540)] =>?
         match #n_538 in ∀ {_552 : ?_4} -o ?_5 with
         | zero_4 => #hd_539
         | (succ_5 _553) => #hd_539
    |} {|  ::: [A_541, _542, (vcons_13 _543 hd_544 _545)] =>? #hd_544 |}
  |}
|}
case_intro
case_intro
case_intro
case_splitting
splitting_on(zero_4)
case_splitting
splitting_on(vnil_12)
case_empty
unify_local(  )
unify_global(
  eq_term?( (vec_9 #A_554 (succ_5‹› zero_4)), (vec_9 #A_554 zero_4))
  eq_term?( nat_3, nat_3)
)
simpl_pprbm ~expand:false( (vec_9 #A_554 (succ_5‹› zero_4)),
  (vec_9 #A_554 zero_4))
simpl_pprbm ~expand:false( #A_554, #A_554)
simpl_pprbm ~expand:false( (succ_5‹› zero_4), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› zero_4), zero_4)
splitting_on(vcons_13)
case_coverage{|
  prblm {|
    eq_term?( (vec_9 #A_554 (succ_5‹› zero_4)),
      (vec_9 #A_554 (succ_5‹› #n_569)))
    eq_term?( nat_3, nat_3);
    {| eq_pat?( #A_554, A_537 : U)
       eq_pat?( #n_569, n_538 : nat_3)
       eq_pat?( #hd_570, hd_539 : #A_554)
       eq_pat?( #tl_571, _540 : (vec_9 #A_554 #n_569)) ::: [] =>?
         match #n_538 in ∀ {_578 : ?_4} -o ?_5 with
         | zero_4 => #hd_539
         | (succ_5 _579) => #hd_539
    |}
    {| eq_pat?( #A_554, A_541 : U)
       eq_pat?( zero_4, _542 : nat_3)
       eq_pat?( #n_569, _543 : nat_3)
       eq_pat?( #hd_570, hd_544 : #A_554)
       eq_pat?( #tl_571, _545 : (vec_9 #A_554 #n_569)) ::: [] =>? #hd_544
    |}
  |}
|}
unify_local(
  eq_pat?( #A_554, A_537 : U)
  eq_pat?( #n_569, n_538 : nat_3)
  eq_pat?( #hd_570, hd_539 : #A_554)
  eq_pat?( #tl_571, _540 : (vec_9 #A_554 #n_569))
)
unify_global(
  eq_term?( (vec_9 #A_554 (succ_5‹› zero_4)),
    (vec_9 #A_554 (succ_5‹› #n_569)))
  eq_term?( nat_3, nat_3)
)
simpl_pprbm ~expand:false( #A_554, #A_537)
simpl_pprbm ~expand:false( #n_569, #n_538)
simpl_pprbm ~expand:false( #hd_570, #hd_539)
simpl_pprbm ~expand:false( #tl_571, #_540)
simpl_pprbm ~expand:false( (vec_9 #A_554 (succ_5‹› zero_4)),
  (vec_9 #A_554 (succ_5‹› #n_569)))
simpl_pprbm ~expand:false( #A_554, #A_554)
simpl_pprbm ~expand:false( (succ_5‹› zero_4), (succ_5‹› #n_569))
simpl_pprbm ~expand:false( zero_4, #n_569)
simpl_pprbm ~expand:false( nat_3, nat_3)
case_coverage_ok(
  match n_569 in ∀ {_588 : ?_4} -o ?_5 with
  | zero_4 => hd_570
  | (succ_5 _589) => hd_570, A_554)
check_tm(
  match n_569 in ∀ {_590 : ?_4} -o ?_5 with
  | zero_4 => hd_570
  | (succ_5 _591) => hd_570, A_554)
infer_tm(match n_569 in ∀ {_592 : ?_4} -o ?_5 with
         | zero_4 => hd_570
         | (succ_5 _593) => hd_570)
infer_tm(∀ {_594 : ?_4} -o ?_5)
infer_tm(?_4)
delay_assert(?_8, ??_19)
infer_tm(?_5)
simpl_tm ~expand:false( ?_8, Type‹??_19›)
delay_assert(?_9, ??_20)
simpl_tm ~expand:false( ?_9, Type‹??_20›)
check_tm( n_569, ?_4)
infer_tm(n_569)
assert_equal1( ?_4, nat_3)
simpl_tm ~expand:false( ?_4, nat_3)
check_cls {|
  prblm {| ;
    {|  ::: [zero_4] =>? hd_570 |} {|  ::: [(succ_5 _596)] =>? hd_570 |}
  |}
|}
case_intro
case_splitting
splitting_on(zero_4)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3); {|  ::: [] =>? hd_570 |} |}
|}
unify_local(  )
unify_global( eq_term?( nat_3, nat_3) )
simpl_pprbm ~expand:false( nat_3, nat_3)
case_coverage_ok( hd_570, ?_5)
check_tm( hd_570, ?_5)
infer_tm(hd_570)
assert_equal1( ?_5, A_554)
splitting_on(succ_5)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3);
    {| eq_pat?( #pred_611, _596 : nat_3) ::: [] =>? hd_570 |}
  |}
|}
unify_local( eq_pat?( #pred_611, _596 : nat_3) )
unify_global( eq_term?( nat_3, nat_3) )
simpl_pprbm ~expand:false( #pred_611, #_596)
simpl_pprbm ~expand:false( nat_3, nat_3)
case_coverage_ok( hd_570, ?_5)
check_tm( hd_570, ?_5)
infer_tm(hd_570)
assert_equal1( ?_5, A_554)
assert_equal1( A_554, ?_5)
splitting_on(succ_5)
case_splitting
splitting_on(vnil_12)
case_empty
unify_local(  )
unify_global(
  eq_term?( (vec_9 #A_554 (succ_5‹› (succ_5‹› #pred_624))),
    (vec_9 #A_554 zero_4))
  eq_term?( nat_3, nat_3)
)
simpl_pprbm ~expand:false(
  (vec_9 #A_554 (succ_5‹› (succ_5‹› #pred_624))),
  (vec_9 #A_554 zero_4))
simpl_pprbm ~expand:false( #A_554, #A_554)
simpl_pprbm ~expand:false( (succ_5‹› (succ_5‹› #pred_624)), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› (succ_5‹› #pred_624)), zero_4)
splitting_on(vcons_13)
case_coverage{|
  prblm {|
    eq_term?( (vec_9 #A_554 (succ_5‹› (succ_5‹› #pred_624))),
      (vec_9 #A_554 (succ_5‹› #n_637)))
    eq_term?( nat_3, nat_3);
    {| eq_pat?( #A_554, A_541 : U)
       eq_pat?( (succ_5‹› #pred_624), _542 : nat_3)
       eq_pat?( #n_637, _543 : nat_3)
       eq_pat?( #hd_638, hd_544 : #A_554)
       eq_pat?( #tl_639, _545 : (vec_9 #A_554 #n_637)) ::: [] =>? #hd_544
    |}
  |}
|}
unify_local(
  eq_pat?( #A_554, A_541 : U)
  eq_pat?( (succ_5‹› #pred_624), _542 : nat_3)
  eq_pat?( #n_637, _543 : nat_3)
  eq_pat?( #hd_638, hd_544 : #A_554)
  eq_pat?( #tl_639, _545 : (vec_9 #A_554 #n_637))
)
unify_global(
  eq_term?( (vec_9 #A_554 (succ_5‹› (succ_5‹› #pred_624))),
    (vec_9 #A_554 (succ_5‹› #n_637)))
  eq_term?( nat_3, nat_3)
)
simpl_pprbm ~expand:false( #A_554, #A_541)
simpl_pprbm ~expand:false( (succ_5‹› #pred_624), #_542)
simpl_pprbm ~expand:false( #n_637, #_543)
simpl_pprbm ~expand:false( #hd_638, #hd_544)
simpl_pprbm ~expand:false( #tl_639, #_545)
simpl_pprbm ~expand:false(
  (vec_9 #A_554 (succ_5‹› (succ_5‹› #pred_624))),
  (vec_9 #A_554 (succ_5‹› #n_637)))
simpl_pprbm ~expand:false( #A_554, #A_554)
simpl_pprbm ~expand:false( (succ_5‹› (succ_5‹› #pred_624)),
  (succ_5‹› #n_637))
simpl_pprbm ~expand:false( (succ_5‹› #pred_624), #n_637)
simpl_pprbm ~expand:false( nat_3, nat_3)
case_coverage_ok( hd_638, A_554)
check_tm( hd_638, A_554)
infer_tm(hd_638)
assert_equal1( A_554, A_554)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_652
    ??_2 <= s_655
    ??_3 <= r_657
    ??_4 <= t_659
    ??_5 <= s_664
    ??_6 <= r_666
    ??_7 <= t_668
    ??_8 <= s_671
    ??_9 <= s_672
    ??_10 <= s_673
    ??_11 <= s_674
    
  |}
  imeta_meta {|
    ?_1 <= A_677
    ?_2 <= A_684
    ?_3 <= A_687
    ?_4 <= nat_3
    ?_8 <= Type‹??_19›
    ?_9 <= Type‹??_20›
    
  |}
  eqns {|
    equal_tm? (A_554, ?_5);
    equal_tm? (?_5, A_554);
    equal_tm? (?_5, A_554)
  |}
end_dump
simpl_tm ~expand:false( A_554, ?_5)
simpl_tm ~expand:false( A_554, A_554)
simpl_tm ~expand:false( A_554, A_554)
infer_tm(Type‹??_19›)
check_tm( nat_3, Type‹??_19›)
infer_tm(nat_3)
assert_equal1( Type‹??_19›, U)
simpl_tm ~expand:false( Type‹??_19›, U)
infer_tm(Type‹??_20›)
check_tm( A_554, Type‹??_20›)
infer_tm(A_554)
assert_equal1( Type‹??_20›, U)
simpl_tm ~expand:false( Type‹??_20›, U)
----------------------------------

definition-------------------------
infer_tm(∀ {A_746 : U} ->
           ∀ {n_747 : nat_3} ->
             (vec_9 A_746 (succ_5‹› n_747)) ->
               (vec_9 A_746 (succ_5‹› n_747)) ->
                 (prod_6‹??_17,??_18,L› A_746 A_746))
infer_tm(U)
infer_tm(∀ {n_751 : nat_3} ->
           (vec_9 A_750 (succ_5‹› n_751)) ->
             (vec_9 A_750 (succ_5‹› n_751)) ->
               (prod_6‹??_17,??_18,L› A_750 A_750))
infer_tm(nat_3)
infer_tm((vec_9 A_750 (succ_5‹› n_754)) ->
           (vec_9 A_750 (succ_5‹› n_754)) ->
             (prod_6‹??_17,??_18,L› A_750 A_750))
infer_tm((vec_9 A_750 (succ_5‹› n_754)))
check_tm( A_750, U)
infer_tm(A_750)
assert_equal1( U, U)
check_tm( (succ_5‹› n_754), nat_3)
infer_tm((succ_5‹› n_754))
check_tm( n_754, nat_3)
infer_tm(n_754)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
infer_tm((vec_9 A_750 (succ_5‹› n_754)) ->
           (prod_6‹??_17,??_18,L› A_750 A_750))
infer_tm((vec_9 A_750 (succ_5‹› n_754)))
check_tm( A_750, U)
infer_tm(A_750)
assert_equal1( U, U)
check_tm( (succ_5‹› n_754), nat_3)
infer_tm((succ_5‹› n_754))
check_tm( n_754, nat_3)
infer_tm(n_754)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
infer_tm((prod_6‹??_17,??_18,L› A_750 A_750))
check_tm( A_750, Type‹??_17›)
infer_tm(A_750)
assert_equal1( Type‹??_17›, U)
check_tm( A_750, Type‹??_18›)
infer_tm(A_750)
assert_equal1( Type‹??_18›, U)
simpl_tm ~expand:false( Type‹??_18›, U)
simpl_tm ~expand:false( Type‹??_17›, U)
check_tm(
  function uncons2_760 :
    ∀ {A_761 : U} ->
      ∀ {n_762 : nat_3} ->
        (vec_9 A_761 (succ_5‹› n_762)) ->
          (vec_9 A_761 (succ_5‹› n_762)) ->
            (prod_6‹??_12,??_13,L› A_761 A_761)
  | A_765 n_766 (vcons_13 _767 hd1_768 _769) (vcons_13 _770 hd2_771 _772) =>
    (pair_8‹??_14,??_15,??_16› hd1_768 hd2_771),
  ∀ {A_773 : U} ->
    ∀ {n_774 : nat_3} ->
      (vec_9 A_773 (succ_5‹› n_774)) ->
        (vec_9 A_773 (succ_5‹› n_774)) ->
          (prod_6‹??_17,??_18,L› A_773 A_773))
infer_tm(∀ {A_778 : U} ->
           ∀ {n_779 : nat_3} ->
             (vec_9 A_778 (succ_5‹› n_779)) ->
               (vec_9 A_778 (succ_5‹› n_779)) ->
                 (prod_6‹??_12,??_13,L› A_778 A_778))
infer_tm(U)
infer_tm(∀ {n_783 : nat_3} ->
           (vec_9 A_782 (succ_5‹› n_783)) ->
             (vec_9 A_782 (succ_5‹› n_783)) ->
               (prod_6‹??_12,??_13,L› A_782 A_782))
infer_tm(nat_3)
infer_tm((vec_9 A_782 (succ_5‹› n_786)) ->
           (vec_9 A_782 (succ_5‹› n_786)) ->
             (prod_6‹??_12,??_13,L› A_782 A_782))
infer_tm((vec_9 A_782 (succ_5‹› n_786)))
check_tm( A_782, U)
infer_tm(A_782)
assert_equal1( U, U)
check_tm( (succ_5‹› n_786), nat_3)
infer_tm((succ_5‹› n_786))
check_tm( n_786, nat_3)
infer_tm(n_786)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
infer_tm((vec_9 A_782 (succ_5‹› n_786)) ->
           (prod_6‹??_12,??_13,L› A_782 A_782))
infer_tm((vec_9 A_782 (succ_5‹› n_786)))
check_tm( A_782, U)
infer_tm(A_782)
assert_equal1( U, U)
check_tm( (succ_5‹› n_786), nat_3)
infer_tm((succ_5‹› n_786))
check_tm( n_786, nat_3)
infer_tm(n_786)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
infer_tm((prod_6‹??_12,??_13,L› A_782 A_782))
check_tm( A_782, Type‹??_12›)
infer_tm(A_782)
assert_equal1( Type‹??_12›, U)
check_tm( A_782, Type‹??_13›)
infer_tm(A_782)
assert_equal1( Type‹??_13›, U)
simpl_tm ~expand:false( Type‹??_13›, U)
simpl_tm ~expand:false( Type‹??_12›, U)
assert_equal1(
  ∀ {A_792 : U} ->
    ∀ {n_793 : nat_3} ->
      (vec_9 A_792 (succ_5‹› n_793)) ->
        (vec_9 A_792 (succ_5‹› n_793)) ->
          (prod_6‹??_17,??_18,L› A_792 A_792),
  ∀ {A_796 : U} ->
    ∀ {n_797 : nat_3} ->
      (vec_9 A_796 (succ_5‹› n_797)) ->
        (vec_9 A_796 (succ_5‹› n_797)) ->
          (prod_6‹??_12,??_13,L› A_796 A_796))
simpl_tm ~expand:false(
  ∀ {A_856 : U} ->
    ∀ {n_857 : nat_3} ->
      (vec_9 A_856 (succ_5‹› n_857)) ->
        (vec_9 A_856 (succ_5‹› n_857)) -> (prod_6‹U,U,L› A_856 A_856),
  ∀ {A_860 : U} ->
    ∀ {n_861 : nat_3} ->
      (vec_9 A_860 (succ_5‹› n_861)) ->
        (vec_9 A_860 (succ_5‹› n_861)) -> (prod_6‹U,U,L› A_860 A_860))
simpl_tm ~expand:false( U, U)
simpl_tm ~expand:false(
  ∀ {n_865 : nat_3} ->
    (vec_9 A_864 (succ_5‹› n_865)) ->
      (vec_9 A_864 (succ_5‹› n_865)) -> (prod_6‹U,U,L› A_864 A_864),
  ∀ {n_868 : nat_3} ->
    (vec_9 A_864 (succ_5‹› n_868)) ->
      (vec_9 A_864 (succ_5‹› n_868)) -> (prod_6‹U,U,L› A_864 A_864))
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false(
  (vec_9 A_864 (succ_5‹› n_871)) ->
    (vec_9 A_864 (succ_5‹› n_871)) -> (prod_6‹U,U,L› A_864 A_864),
  (vec_9 A_864 (succ_5‹› n_871)) ->
    (vec_9 A_864 (succ_5‹› n_871)) -> (prod_6‹U,U,L› A_864 A_864))
simpl_tm ~expand:false( (vec_9 A_864 (succ_5‹› n_871)),
  (vec_9 A_864 (succ_5‹› n_871)))
simpl_tm ~expand:false( A_864, A_864)
simpl_tm ~expand:false( (succ_5‹› n_871), (succ_5‹› n_871))
simpl_tm ~expand:false( n_871, n_871)
simpl_tm ~expand:false(
  (vec_9 A_864 (succ_5‹› n_871)) -> (prod_6‹U,U,L› A_864 A_864),
  (vec_9 A_864 (succ_5‹› n_871)) -> (prod_6‹U,U,L› A_864 A_864))
simpl_tm ~expand:false( (vec_9 A_864 (succ_5‹› n_871)),
  (vec_9 A_864 (succ_5‹› n_871)))
simpl_tm ~expand:false( A_864, A_864)
simpl_tm ~expand:false( (succ_5‹› n_871), (succ_5‹› n_871))
simpl_tm ~expand:false( n_871, n_871)
simpl_tm ~expand:false( (prod_6‹U,U,L› A_864 A_864),
  (prod_6‹U,U,L› A_864 A_864))
simpl_tm ~expand:false( A_864, A_864)
simpl_tm ~expand:false( A_864, A_864)
check_cls {|
  prblm {| ;
    {|  ::: [A_828, n_829, (vcons_13 _830 hd1_831 _832), (vcons_13 _833 hd2_834 _835)] =>?
         (pair_8‹??_14,??_15,??_16› #hd1_831 #hd2_834)
    |}
  |}
|}
case_intro
case_intro
case_intro
case_intro
case_splitting
splitting_on(vnil_12)
case_empty
unify_local(  )
unify_global(
  eq_term?( (vec_9 #A_890 (succ_5‹› #n_891)), (vec_9 #A_890 zero_4))
)
simpl_pprbm ~expand:false( (vec_9 #A_890 (succ_5‹› #n_891)),
  (vec_9 #A_890 zero_4))
simpl_pprbm ~expand:false( #A_890, #A_890)
simpl_pprbm ~expand:false( (succ_5‹› #n_891), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› #n_891), zero_4)
splitting_on(vcons_13)
case_splitting
splitting_on(vnil_12)
case_empty
unify_local(  )
unify_global(
  eq_term?( (vec_9 #A_890 (succ_5‹› #n_891)), (vec_9 #A_890 zero_4))
  eq_term?( (vec_9 #A_890 (succ_5‹› #n_891)),
    (vec_9 #A_890 (succ_5‹› #n_904)))
)
simpl_pprbm ~expand:false( (vec_9 #A_890 (succ_5‹› #n_891)),
  (vec_9 #A_890 zero_4))
simpl_pprbm ~expand:false( #A_890, #A_890)
simpl_pprbm ~expand:false( (succ_5‹› #n_891), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› #n_891), zero_4)
splitting_on(vcons_13)
case_coverage{|
  prblm {|
    eq_term?( (vec_9 #A_890 (succ_5‹› #n_891)),
      (vec_9 #A_890 (succ_5‹› #n_927)))
    eq_term?( (vec_9 #A_890 (succ_5‹› #n_891)),
      (vec_9 #A_890 (succ_5‹› #n_904)));
    {| eq_pat?( #A_890, A_828 : U)
       eq_pat?( #n_891, n_829 : nat_3)
       eq_pat?( #n_904, _830 : nat_3)
       eq_pat?( #hd_905, hd1_831 : #A_890)
       eq_pat?( #tl_906, _832 : (vec_9 #A_890 #n_904))
       eq_pat?( #n_927, _833 : nat_3)
       eq_pat?( #hd_928, hd2_834 : #A_890)
       eq_pat?( #tl_929, _835 : (vec_9 #A_890 #n_927)) ::: [] =>?
         (pair_8‹??_14,??_15,??_16› #hd1_831 #hd2_834)
    |}
  |}
|}
unify_local(
  eq_pat?( #A_890, A_828 : U)
  eq_pat?( #n_891, n_829 : nat_3)
  eq_pat?( #n_904, _830 : nat_3)
  eq_pat?( #hd_905, hd1_831 : #A_890)
  eq_pat?( #tl_906, _832 : (vec_9 #A_890 #n_904))
  eq_pat?( #n_927, _833 : nat_3)
  eq_pat?( #hd_928, hd2_834 : #A_890)
  eq_pat?( #tl_929, _835 : (vec_9 #A_890 #n_927))
)
unify_global(
  eq_term?( (vec_9 #A_890 (succ_5‹› #n_891)),
    (vec_9 #A_890 (succ_5‹› #n_927)))
  eq_term?( (vec_9 #A_890 (succ_5‹› #n_891)),
    (vec_9 #A_890 (succ_5‹› #n_904)))
)
simpl_pprbm ~expand:false( #A_890, #A_828)
simpl_pprbm ~expand:false( #n_891, #n_829)
simpl_pprbm ~expand:false( #n_904, #_830)
simpl_pprbm ~expand:false( #hd_905, #hd1_831)
simpl_pprbm ~expand:false( #tl_906, #_832)
simpl_pprbm ~expand:false( #n_927, #_833)
simpl_pprbm ~expand:false( #hd_928, #hd2_834)
simpl_pprbm ~expand:false( #tl_929, #_835)
simpl_pprbm ~expand:false( (vec_9 #A_890 (succ_5‹› #n_891)),
  (vec_9 #A_890 (succ_5‹› #n_927)))
simpl_pprbm ~expand:false( #A_890, #A_890)
simpl_pprbm ~expand:false( (succ_5‹› #n_891), (succ_5‹› #n_927))
simpl_pprbm ~expand:false( #n_891, #n_927)
simpl_pprbm ~expand:false( (vec_9 #A_890 (succ_5‹› #n_927)),
  (vec_9 #A_890 (succ_5‹› #n_904)))
simpl_pprbm ~expand:false( #A_890, #A_890)
simpl_pprbm ~expand:false( (succ_5‹› #n_927), (succ_5‹› #n_904))
simpl_pprbm ~expand:false( #n_927, #n_904)
case_coverage_ok( (pair_8‹??_14,??_15,??_16› hd_905 hd_928),
  (prod_6‹U,U,L› A_890 A_890))
check_tm( (pair_8‹??_14,??_15,??_16› hd_905 hd_928),
  (prod_6‹U,U,L› A_890 A_890))
infer_tm((pair_8‹??_14,??_15,??_16› hd_905 hd_928))
check_tm( ?_6, Type‹??_14›)
check_tm( ?_7, Type‹??_15›)
check_tm( hd_905, ?_6)
infer_tm(hd_905)
assert_equal1( ?_6, A_890)
check_tm( hd_928, ?_7)
infer_tm(hd_928)
assert_equal1( ?_7, A_890)
assert_equal1( (prod_6‹U,U,L› A_890 A_890),
  (prod_6‹??_14,??_15,??_16› ?_6 ?_7))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_950
    ??_2 <= s_953
    ??_3 <= r_955
    ??_4 <= t_957
    ??_5 <= s_962
    ??_6 <= r_964
    ??_7 <= t_966
    ??_8 <= s_969
    ??_9 <= s_970
    ??_10 <= s_971
    ??_11 <= s_972
    ??_12 <= U
    ??_13 <= U
    ??_17 <= U
    ??_18 <= U
    ??_19 <= U
    ??_20 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_975
    ?_2 <= A_982
    ?_3 <= A_985
    ?_4 <= nat_3
    ?_5 <= A_995
    ?_8 <= Type‹??_19›
    ?_9 <= Type‹??_20›
    
  |}
  eqns {|
    equal_tm? ((prod_6‹U,U,L› A_890 A_890),
      (prod_6‹??_14,??_15,??_16› ?_6 ?_7));
    equal_tm? (?_7, A_890);
    equal_tm? (?_6, A_890)
  |}
end_dump
simpl_tm ~expand:false( (prod_6‹U,U,L› A_890 A_890),
  (prod_6‹??_14,??_15,??_16› ?_6 ?_7))
simpl_tm ~expand:false( A_890, ?_6)
simpl_tm ~expand:false( A_890, ?_7)
simpl_tm ~expand:false( A_890, ?_6)
simpl_tm ~expand:false( A_890, ?_7)
simpl_tm ~expand:false( A_890, A_890)
simpl_tm ~expand:false( A_890, A_890)
infer_tm(U)
check_tm( A_890, U)
infer_tm(A_890)
assert_equal1( U, U)
infer_tm(U)
check_tm( A_890, U)
infer_tm(A_890)
assert_equal1( U, U)
----------------------------------

smeta_meta {|
  ??_1 <= s_1061
  ??_2 <= s_1064
  ??_3 <= r_1066
  ??_4 <= t_1068
  ??_5 <= s_1073
  ??_6 <= r_1075
  ??_7 <= t_1077
  ??_8 <= s_1080
  ??_9 <= s_1081
  ??_10 <= s_1082
  ??_11 <= s_1083
  ??_12 <= U
  ??_13 <= U
  ??_14 <= U
  ??_15 <= U
  ??_16 <= L
  ??_17 <= U
  ??_18 <= U
  ??_19 <= U
  ??_20 <= U
  
|}
imeta_meta {|
  ?_1 <= A_1086
  ?_2 <= A_1093
  ?_3 <= A_1096
  ?_4 <= nat_3
  ?_5 <= A_1106
  ?_6 <= A_1115
  ?_7 <= A_1124
  ?_8 <= Type‹??_19›
  ?_9 <= Type‹??_20›
  
|}
#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_1304 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_1305› (A_1306 : Type‹s_1305›) (m_1307 : A_1306):
  A_1306 -> U
where
| refl_6 : (eq_4‹s_1305› A_1306 m_1307 m_1307)

#[program]
inductive exists_5‹s_1309,r_1310,t_1311› (A_1312 : Type‹s_1309›) (B_1313 : 
A_1312 -> Type‹r_1310›): Type‹t_1311› where
| ex_7
    (m_1315 : A_1312) {pf_1316 : ((B_1313) m_1315)}
    : (exists_5‹s_1309,r_1310,t_1311› A_1312 B_1313)

#[program]
inductive prod_6‹s_1317,r_1318,t_1319› (A_1320 : Type‹s_1317›) (B_1321 : Type‹r_1318›):
  Type‹t_1319›
where
| pair_8
    (m_1322 : A_1320) (n_1323 : B_1321)
    : (prod_6‹s_1317,r_1318,t_1319› A_1320 B_1321)

#[program]
inductive sing_7‹s_1324› (A_1325 : Type‹s_1324›):
  A_1325 -> Type‹s_1324›
where
| just_9 (m_1327 : A_1325) : (sing_7‹s_1324› A_1325 m_1327)

#[program]
inductive list_8‹s_1328› (A_1329 : Type‹s_1328›): U where
| nil_10 : (list_8‹s_1328› A_1329)
| cons_11
    (hd_1330 : A_1329) (tl_1331 : (list_8‹s_1328› A_1329))
    : (list_8‹s_1328› A_1329)

#[program]
inductive vec_9‹› (A_1332 : U): nat_3 -> U where
| vnil_12 : (vec_9 A_1332 zero_4)
| vcons_13
    {n_1334 : nat_3} (hd_1335 : A_1332) (tl_1336 : (vec_9 A_1332 n_1334))
    : (vec_9 A_1332 (succ_5‹› n_1334))

#[program]
def uncons_1‹› :
  ∀ {A_1337 : U} ->
    ∀ {n_1338 : nat_3} -> (vec_9 A_1337 (succ_5‹› n_1338)) -> A_1337
:=
  function uncons_1340 :
    ∀ {A_1341 : U} ->
      ∀ {n_1342 : nat_3} -> (vec_9 A_1341 (succ_5‹› n_1342)) -> A_1341
  | A_1344 zero_4 (vcons_13 n_1345 hd_1346 _1347) =>
    match n_1345 in {nat_3} -o A_1344 with
    | zero_4 => hd_1346
    | (succ_5 _1349) => hd_1346
  | A_1350 _1351 (vcons_13 _1352 hd_1353 _1354) => hd_1353

#[program]
def uncons2_2‹› :
  ∀ {A_1355 : U} ->
    ∀ {n_1356 : nat_3} ->
      (vec_9 A_1355 (succ_5‹› n_1356)) ->
        (vec_9 A_1355 (succ_5‹› n_1356)) ->
          (prod_6‹U,U,L› A_1355 A_1355)
:=
  function uncons2_1359 :
    ∀ {A_1360 : U} ->
      ∀ {n_1361 : nat_3} ->
        (vec_9 A_1360 (succ_5‹› n_1361)) ->
          (vec_9 A_1360 (succ_5‹› n_1361)) ->
            (prod_6‹U,U,L› A_1360 A_1360)
  | A_1364 n_1365 (vcons_13 _1366 hd1_1367 _1368) (vcons_13 _1369 hd2_1370 _1371) =>
    (pair_8‹U,U,L› hd1_1367 hd2_1370)

-----------------------------------------

