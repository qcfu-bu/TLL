[Inductive {name = "eq"; relv = N;
   body =
   (Binder (["s"],
      (PBind ((Type (SId "s")),
         (Binder ("A",
            (PBind ((Id ("A", I)),
               (Binder ("m",
                  (PBase
                     ((TBind (R, (Id ("A", I)),
                         (Binder ("_", (TBase (Type U)))))),
                      [(DConstr ("refl",
                          (TBase
                             (App
                                [(Id ("eq", I)); (Id ("m", I)); (Id ("m", I))
                                  ])),
                          []))
                        ]))
                  ))
               ))
            ))
         ))
      ));
   view = [I; E]};
  Inductive {name = "unit"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)), [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
       ));
    view = []};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type L)),
           [(DConstr ("true", (TBase (Id ("bool", I))), []));
             (DConstr ("false", (TBase (Id ("bool", I))), []))]))
       ));
    view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type L)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("pred", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "list"; relv = R;
    body =
    (Binder (["s"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type (SId "t"))),
                 [(DConstr ("nil",
                     (TBase (App [(Id ("list", I)); (Id ("A", I))])), 
                     []));
                   (DConstr ("cons",
                      (TBind (R, (Id ("A", I)),
                         (Binder ("hd",
                            (TBind (R,
                               (App [(Id ("list", I)); (Id ("A", I))]),
                               (Binder ("tl",
                                  (TBase
                                     (App [(Id ("list", I)); (Id ("A", I))]))
                                  ))
                               ))
                            ))
                         )),
                      [E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Inductive {name = "exists0"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type L)),
                       [(DConstr ("ex0",
                           (TBind (N, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("exists0", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists1"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type L)),
                       [(DConstr ("ex1",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("exists1", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Extern {name = "proto"; relv = N; body = (Binder ([], (Type U))); view = []};
  Extern {name = "Send0"; relv = N;
    body =
    (Binder (["s"],
       (Pi (R, U, (Type (SId "s")),
          (Binder ("A",
             (Pi (R, U,
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Id ("proto", I)))))),
                (Binder ("B", (Id ("proto", I))))))
             ))
          ))
       ));
    view = [I; E]}
  ]

-----------------------------------------

#[logical]
inductive eq_1‹s_47› (A_48 : Type‹s_47›) (m_49 : A_48): A_48 -> U
where
| refl_1 : (eq_1‹??_1› ?_1 m_49 m_49)

#[program]
inductive unit_2‹› : U where
| tt_2 : unit_2

#[program]
inductive bool_3‹› : L where
| true_3 : bool_3
| false_4 : bool_3

#[program]
inductive nat_4‹› : L where
| zero_5 : nat_4
| succ_6 (pred_51 : nat_4) : nat_4

#[program]
inductive list_5‹s_52,t_53› (A_54 : Type‹s_52›): Type‹t_53› where
| nil_7 : (list_5‹??_2,??_3› A_54)
| cons_8
    (hd_55 : A_54) (tl_56 : (list_5‹??_4,??_5› A_54))
    : (list_5‹??_6,??_7› A_54)

#[program]
inductive exists0_6‹s_57,r_58› (A_59 : Type‹s_57›) (B_60 : A_59 ->
                                                                    Type‹r_58›):
  L
where
| ex0_9
    {m_62 : A_59} (n_63 : ((B_60) m_62))
    : (exists0_6‹??_8,??_9› A_59 B_60)

#[program]
inductive exists1_7‹s_64,r_65› (A_66 : Type‹s_64›) (B_67 : A_66 ->
                                                                    Type‹r_65›):
  L
where
| ex1_10
    (m_69 : A_66) (n_70 : ((B_67) m_69))
    : (exists1_7‹??_10,??_11› A_66 B_67)

#[logical]
extern proto_1‹› : U

#[logical]
extern Send0_2‹s_71› :
  ∀ (A_72 : Type‹s_71›) -> A_72 -> proto_1 -> proto_1

-----------------------------------------

#[logical]
inductive eq_1‹s_315› (A_316 : Type‹s_315›) (m_317 : A_316):
  A_316 -> U
where
| refl_1 : (eq_1‹s_315› A_316 m_317 m_317)

#[program]
inductive unit_2‹› : U where
| tt_2 : unit_2

#[program]
inductive bool_3‹› : L where
| true_3 : bool_3
| false_4 : bool_3

#[program]
inductive nat_4‹› : L where
| zero_5 : nat_4
| succ_6 (pred_319 : nat_4) : nat_4

#[program]
inductive list_5‹s_320,t_321› (A_322 : Type‹s_320›): Type‹t_321›
where
| nil_7 : (list_5‹s_320,t_321› A_322)
| cons_8
    (hd_323 : A_322) (tl_324 : (list_5‹s_320,??_5› A_322))
    : (list_5‹s_320,t_321› A_322)

#[program]
inductive exists0_6‹s_325,r_326› (A_327 : Type‹s_325›) (B_328 : 
A_327 -> Type‹r_326›): L where
| ex0_9
    {m_330 : A_327} (n_331 : ((B_328) m_330))
    : (exists0_6‹s_325,r_326› A_327 B_328)

#[program]
inductive exists1_7‹s_332,r_333› (A_334 : Type‹s_332›) (B_335 : 
A_334 -> Type‹r_333›): L where
| ex1_10
    (m_337 : A_334) (n_338 : ((B_335) m_337))
    : (exists1_7‹s_332,r_333› A_334 B_335)

#[logical]
extern proto_1‹› : U

#[logical]
extern Send0_2‹s_339› :
  ∀ (A_340 : Type‹s_339›) -> A_340 -> proto_1 -> proto_1

-----------------------------------------

  warning - pruned constructor consLL_14 trans12.Logical.assert_sort
  warning - pruned constructor consLU_16 trans12.Logical.assert_sort
  warning - pruned constructor consUL_18 trans12.Logical.assert_sort
  warning - pruned constructor consUU_20 trans12.Logical.assert_sort
#[logical]
inductive eqU_9 where
| reflU_12 of layout[]

#[logical]
inductive eqL_8 where
| reflL_11 of layout[]

#[program]
inductive unit_2 where
| tt_2 of layout[]

#[program]
inductive bool_3 where
| true_3 of layout[]
| false_4 of layout[]

#[program]
inductive nat_4 where
| zero_5 of layout[]
| succ_6 of layout[R]

#[program]
inductive listUU_13 where
| nilUU_19 of layout[]

#[program]
inductive listUL_12 where
| nilUL_17 of layout[]

#[program]
inductive listLU_11 where
| nilLU_15 of layout[]

#[program]
inductive listLL_10 where
| nilLL_13 of layout[]

#[program]
inductive exists0UU_17 where
| ex0UU_24 of layout[N, R]

#[program]
inductive exists0UL_16 where
| ex0UL_23 of layout[N, R]

#[program]
inductive exists0LU_15 where
| ex0LU_22 of layout[N, R]

#[program]
inductive exists0LL_14 where
| ex0LL_21 of layout[N, R]

#[program]
inductive exists1UU_21 where
| ex1UU_28 of layout[R, R]

#[program]
inductive exists1UL_20 where
| ex1UL_27 of layout[R, R]

#[program]
inductive exists1LU_19 where
| ex1LU_26 of layout[R, R]

#[program]
inductive exists1LL_18 where
| ex1LL_25 of layout[R, R]

#[logical]
extern proto_1

#[logical]
extern Send0U_4

#[logical]
extern Send0L_3

-----------------------------------------

#[logical]
inductive eqU_9 where
| reflU_12 of layout[]

#[logical]
inductive eqL_8 where
| reflL_11 of layout[]

#[program]
inductive unit_2 where
| tt_2 of layout[]

#[program]
inductive bool_3 where
| true_3 of layout[]
| false_4 of layout[]

#[program]
inductive nat_4 where
| zero_5 of layout[]
| succ_6 of layout[R]

#[program]
inductive listUU_13 where
| nilUU_19 of layout[]

#[program]
inductive listUL_12 where
| nilUL_17 of layout[]

#[program]
inductive listLU_11 where
| nilLU_15 of layout[]

#[program]
inductive listLL_10 where
| nilLL_13 of layout[]

#[program]
inductive exists0UU_17 where
| ex0UU_24 of layout[N, R]

#[program]
inductive exists0UL_16 where
| ex0UL_23 of layout[N, R]

#[program]
inductive exists0LU_15 where
| ex0LU_22 of layout[N, R]

#[program]
inductive exists0LL_14 where
| ex0LL_21 of layout[N, R]

#[program]
inductive exists1UU_21 where
| ex1UU_28 of layout[R, R]

#[program]
inductive exists1UL_20 where
| ex1UL_27 of layout[R, R]

#[program]
inductive exists1LU_19 where
| ex1LU_26 of layout[R, R]

#[program]
inductive exists1LL_18 where
| ex1LL_25 of layout[R, R]

#[logical]
extern proto_1

#[logical]
extern Send0U_4

#[logical]
extern Send0L_3

-----------------------------------------

