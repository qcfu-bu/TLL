[Inductive {name = "unit"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)), [(DMul ("tt", (TBase (Id ("unit", I))), []))]))
      ));
   view = []};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DMul ("true", (TBase (Id ("bool", I))), []));
             (DMul ("false", (TBase (Id ("bool", I))), []))]))
       ));
    view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DMul ("zero", (TBase (Id ("nat", I))), []));
             (DMul ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("pred", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id ("A", I)),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id ("A", I)),
                          (Binder ("_", (TBase (Type U)))))),
                       [(DMul ("refl",
                           (TBase
                              (App
                                 [(Id ("eq", I)); (Id ("m", I));
                                   (Id ("m", I))])),
                           []))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DMul ("ex",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (N,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("pf",
                                       (TBase
                                          (App
                                             [(Id ("exists", I));
                                               (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("A", I)),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DMul ("just",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("m",
                           (TBase (App [(Id ("sing", I)); (Id ("m", I))]))))
                        )),
                     [E]))
                   ]))
             ))
          ))
       ));
    view = [I]};
  Inductive {name = "list"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type U)),
                 [(DMul ("nil",
                     (TBase (App [(Id ("list", I)); (Id ("A", I))])), 
                     []));
                   (DMul ("cons",
                      (TBind (R, (Id ("A", I)),
                         (Binder ("hd",
                            (TBind (R,
                               (App [(Id ("list", I)); (Id ("A", I))]),
                               (Binder ("tl",
                                  (TBase
                                     (App [(Id ("list", I)); (Id ("A", I))]))
                                  ))
                               ))
                            ))
                         )),
                      [E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Definition {name = "lte"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("bool", I))))
                    ))
                 ))
              )),
           (Binder ((Some "lte"),
              [([(PId "zero"); (PId "_")], (Some (Id ("true", I))));
                ([(PId "_"); (PId "zero")], (Some (Id ("false", I))));
                ([(PMul ("succ", [(PId "x")])); (PMul ("succ", [(PId "y")]))],
                 (Some (App [(Id ("lte", I)); (Id ("x", I)); (Id ("y", I))])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "lt"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", (Id ("bool", I))))
                    ))
                 ))
              )),
           (Binder ((Some "lt"),
              [([(PId "x"); (PId "y")],
                (Some (App
                         [(Id ("lte", I));
                           (App [(Id ("succ", I)); (Id ("x", I))]);
                           (Id ("y", I))])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x",
              (Pi (R, U, (Id ("nat", I)), (Binder ("y", (Id ("bool", I))))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "length"; relv = N;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (R, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (App [(Id ("list", I)); (Id ("A", I))]),
                    (Binder ("_", (Id ("nat", I))))))
                 ))
              )),
           (Binder ((Some "length"),
              [([(PId "A"); (PId "nil")], (Some (Id ("zero", I))));
                ([(PId "A"); (PMul ("cons", [(PId "_"); (PId "tl")]))],
                 (Some (App
                          [(Id ("succ", I));
                            (App [(Id ("length", I)); (Id ("tl", I))])])))
                ]
              )),
           [I])),
        (Pi (R, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (R, U, (App [(Id ("list", I)); (Id ("A", I))]),
                 (Binder ("_", (Id ("nat", I))))))
              ))
           )))
       ));
    view = [I]};
  Inductive {name = "at"; relv = N;
    body =
    (Binder ([],
       (PBind ((Type U),
          (Binder ("A",
             (PBind ((Id ("A", I)),
                (Binder ("x",
                   (PBase
                      ((TBind (R, (Id ("nat", I)),
                          (Binder ("_",
                             (TBind (R,
                                (App [(Id ("list", I)); (Id ("A", I))]),
                                (Binder ("_", (TBase (Type U))))))
                             ))
                          )),
                       [(DMul ("at_zero",
                           (TBind (R,
                              (App [(Id ("list", I)); (Id ("A", I))]),
                              (Binder ("xs0",
                                 (TBase
                                    (App
                                       [(Id ("at", I)); (Id ("x", I));
                                         (Id ("zero", I));
                                         (App
                                            [(Id ("cons", I)); (Id ("x", I));
                                              (Id ("xs0", I))])
                                         ]))
                                 ))
                              )),
                           [E]));
                         (DMul ("at_succ",
                            (TBind (R, (Id ("nat", I)),
                               (Binder ("n",
                                  (TBind (R, (Id ("A", I)),
                                     (Binder ("x0",
                                        (TBind (R,
                                           (App
                                              [(Id ("list", I));
                                                (Id ("A", I))]),
                                           (Binder ("xs0",
                                              (TBind (R,
                                                 (App
                                                    [(Id ("at", I));
                                                      (Id ("x", I));
                                                      (Id ("n", I));
                                                      (Id ("xs0", I))]),
                                                 (Binder ("h",
                                                    (TBase
                                                       (App
                                                          [(Id ("at", I));
                                                            (Id ("x", I));
                                                            (App
                                                               [(Id ("succ",
                                                                   I));
                                                                 (Id ("n", I
                                                                    ))
                                                                 ]);
                                                            (App
                                                               [(Id ("cons",
                                                                   I));
                                                                 (Id ("x0", I
                                                                    ));
                                                                 (Id ("xs0",
                                                                    I))
                                                                 ])
                                                            ]))
                                                    ))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               )),
                            [I; E; I; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Definition {name = "get_at"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (R, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U, (App [(Id ("list", I)); (Id ("A", I))]),
                          (Binder ("xs",
                             (Pi (R, U,
                                (App
                                   [(Id ("eq", I));
                                     (App
                                        [(Id ("lt", I)); (Id ("n", I));
                                          (App
                                             [(Id ("length", I));
                                               (Id ("xs", I))])
                                          ]);
                                     (Id ("true", I))]),
                                (Binder ("_",
                                   (App
                                      [(Inst ("exists",
                                          [(SId "_"); (SId "_"); L], I));
                                        (Fun (
                                           (Pi (R, U, IMeta,
                                              (Binder ("x", IMeta)))),
                                           (Binder (None,
                                              [([(PId "x")],
                                                (Some (App
                                                         [(Id ("at", I));
                                                           (Id ("x", I));
                                                           (Id ("n", I));
                                                           (Id ("xs", I))])))
                                                ]
                                              )),
                                           []))
                                        ])
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "get_at"),
              [([(PId "A"); (PId "_"); (PId "nil"); PAbsurd], None);
                ([(PId "A"); (PId "zero");
                   (PMul ("cons", [(PId "x"); (PId "xs")])); (PId "_")],
                 (Some (App
                          [(Id ("ex", I)); (Id ("x", I));
                            (App [(Id ("at_zero", I)); (Id ("xs", I))])])));
                ([(PId "A"); (PMul ("succ", [(PId "n")]));
                   (PMul ("cons", [(PId "x"); (PId "xs")])); (PId "e")],
                 (Some (Match (
                          [(R,
                            (App
                               [(Id ("get_at", I)); (Id ("n", I));
                                 (Id ("xs", I)); (Id ("e", I))]),
                            None)],
                          None,
                          [([(PMul ("ex", [(PId "x0"); (PId "pf")]))],
                            (Some (App
                                     [(Id ("ex", I)); (Id ("x0", I));
                                       (App
                                          [(Id ("at_succ", I)); IMeta;
                                            (Id ("pf", I))])
                                       ])))
                            ]
                          ))))
                ]
              )),
           [I])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (R, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U, (App [(Id ("list", I)); (Id ("A", I))]),
                       (Binder ("xs",
                          (Pi (R, U,
                             (App
                                [(Id ("eq", I));
                                  (App
                                     [(Id ("lt", I)); (Id ("n", I));
                                       (App
                                          [(Id ("length", I)); (Id ("xs", I))
                                            ])
                                       ]);
                                  (Id ("true", I))]),
                             (Binder ("_",
                                (App
                                   [(Inst ("exists",
                                       [(SId "_"); (SId "_"); L], I));
                                     (Fun (
                                        (Pi (R, U, IMeta,
                                           (Binder ("x", IMeta)))),
                                        (Binder (None,
                                           [([(PId "x")],
                                             (Some (App
                                                      [(Id ("at", I));
                                                        (Id ("x", I));
                                                        (Id ("n", I));
                                                        (Id ("xs", I))])))
                                             ]
                                           )),
                                        []))
                                     ])
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I]}
  ]

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_104 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_105› (A_106 : Type‹s_105›) (m_107 : A_106):
  A_106 -> U
where
| refl_6 : (eq_4‹??_1› ?_1 m_107 m_107)

#[program]
inductive exists_5‹s_109,r_110,t_111› (A_112 : Type‹s_109›) (B_113 : 
A_112 -> Type‹r_110›): Type‹t_111› where
| ex_7
    (m_115 : A_112) {pf_116 : ((B_113) m_115)}
    : (exists_5‹??_2,??_3,??_4› ?_2 B_113)

#[program]
inductive sing_6‹s_117› (A_118 : Type‹s_117›):
  A_118 -> Type‹s_117›
where
| just_8 (m_120 : A_118) : (sing_6‹??_5› ?_3 m_120)

#[program]
inductive list_7‹s_121› (A_122 : Type‹s_121›): U where
| nil_9 : (list_7‹??_6› A_122)
| cons_10
    (hd_123 : A_122) (tl_124 : (list_7‹??_7› A_122))
    : (list_7‹??_8› A_122)

#[program]
def lte_1‹› : nat_3 -> nat_3 -> bool_2 :=
  function lte_127 : nat_3 -> nat_3 -> bool_2
  | zero_4 _130 => true_2
  | _131 zero_4 => false_3
  | (succ_5 x_132) (succ_5 y_133) => ((lte_127) x_132 y_133)

#[program]
def lt_2‹› : nat_3 -> nat_3 -> bool_2 :=
  function lt_136 : nat_3 -> nat_3 -> bool_2
  | x_139 y_140 => ((lte_1) (succ_5‹› x_139) y_140)

#[logical]
def length_3‹s_141› :
  ∀ (A_142 : Type‹s_141›) -> (list_7‹??_10› A_142) -> nat_3
:=
  function length_144 :
    ∀ (A_145 : Type‹s_141›) -> (list_7‹??_9› A_145) -> nat_3
  | A_147 nil_9 => zero_4
  | A_148 (cons_10 _149 tl_150) => (succ_5‹› ((length_144) ?_4 tl_150))

#[logical]
inductive at_8‹› (A_151 : U) (x_152 : A_151):
  nat_3 -> (list_7‹??_11› A_151) -> U
where
| at_zero_11
    (xs0_155 : (list_7‹??_12› A_151))
    : (at_8 ?_6 x_152 zero_4 (cons_10‹??_13› x_152 xs0_155))
| at_succ_12
    (n_156 : nat_3) (x0_157 : A_151) (xs0_158 : (list_7‹??_14› A_151))
    (h_159 : (at_8 ?_7 x_152 n_156 xs0_158))
    : (at_8
        ?_9 x_152 (succ_5‹› n_156) (cons_10‹??_15› x0_157 xs0_158))

#[program]
def get_at_4‹› :
  ∀ {A_160 : U} ->
    ∀ (n_161 : nat_3) ->
      ∀ (xs_162 : (list_7‹??_27› A_160)) ->
        ∀ (__163 :
          (eq_4‹??_29›
            ?_31 ((lt_2) n_161 ((length_3‹??_28›) ?_30 xs_162)) true_2)) ->
          (exists_5‹??_30,??_31,L›
            ?_35
            function _164 : ∀ (x_165 : ?_32) -> ?_33
            | x_166 => (at_8 ?_34 x_166 n_161 xs_162))
:=
  function get_at_167 :
    ∀ {A_168 : U} ->
      ∀ (n_169 : nat_3) ->
        ∀ (xs_170 : (list_7‹??_16› A_168)) ->
          ∀ (__171 :
            (eq_4‹??_18›
              ?_11 ((lt_2) n_169 ((length_3‹??_17›) ?_10 xs_170)) true_2)) ->
            (exists_5‹??_19,??_20,L›
              ?_15
              function _172 : ∀ (x_173 : ?_12) -> ?_13
              | x_174 => (at_8 ?_14 x_174 n_169 xs_170))
  | A_175 _176 nil_9 !! =>
  | A_177 zero_4 (cons_10 x_178 xs_179) _180 =>
    (ex_7‹??_21,??_22,??_23› x_178 (at_zero_11‹› xs_179))
  | A_181 (succ_5 n_182) (cons_10 x_183 xs_184) e_185 =>
    match ((get_at_167) ?_20 n_182 xs_184 e_185) in ∀ (_186 : ?_21) -o ?_22
    with
    | (ex_7 x0_187 pf_188) =>
      (ex_7‹??_24,??_25,??_26›
        x0_187 (at_succ_12‹› ?_25 ?_23 ?_24 pf_188))

-----------------------------------------

inductive-------------------------
infer_tm(unit_1)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(bool_2)
infer_tm(bool_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(nat_3)
infer_tm(nat_3)
infer_tm(nat_3)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_191›)
infer_tm(A_192)
infer_tm(A_192)
infer_tm(Type‹s_195›)
infer_tm(A_196)
assert_equal1( A_196, ?_1)
assert_equal1( m_197, m_197)
infer_tm((eq_4‹??_1› ?_1 m_197 m_197))
check_tm( ?_1, Type‹??_1›)
check_tm( m_197, ?_1)
infer_tm(m_197)
assert_equal1( ?_1, A_196)
check_tm( m_197, ?_1)
infer_tm(m_197)
assert_equal1( ?_1, A_196)
simpl_tm ~expand:false( ?_1, A_196)
simpl_tm ~expand:false( A_196, A_196)
simpl_tm ~expand:false( A_196, A_196)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_198
    
  |}
  imeta_meta {|
    ?_1 <= A_201
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_195›)
check_tm( A_196, Type‹s_195›)
infer_tm(A_196)
assert_equal1( Type‹s_195›, Type‹s_195›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_213›)
infer_tm(A_216 -> Type‹r_214›)
infer_tm(A_216)
infer_tm(Type‹r_214›)
infer_tm(Type‹s_220›)
infer_tm(A_223 -> Type‹r_221›)
infer_tm(A_223)
infer_tm(Type‹r_221›)
infer_tm(A_223)
infer_tm(((B_224) m_227))
infer_tm(B_224)
check_tm( m_227, A_223)
infer_tm(m_227)
assert_equal1( A_223, A_223)
assert_equal1( A_223, ?_2)
assert_equal1( B_224, B_224)
infer_tm((exists_5‹??_2,??_3,??_4› ?_2 B_224))
check_tm( ?_2, Type‹??_2›)
check_tm( B_224, ?_2 -> Type‹??_3›)
infer_tm(B_224)
assert_equal1( ?_2 -> Type‹??_3›, A_223 -> Type‹r_221›)
simpl_tm ~expand:false( ?_2 -> Type‹??_3›, A_223 -> Type‹r_221›)
simpl_tm ~expand:false( ?_2, A_223)
simpl_tm ~expand:false( Type‹??_3›, Type‹r_221›)
simpl_tm ~expand:false( A_223, A_223)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_238
    ??_2 <= s_241
    ??_3 <= r_243
    ??_4 <= t_245
    
  |}
  imeta_meta {|
    ?_1 <= A_250
    ?_2 <= A_257
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_220›)
check_tm( A_223, Type‹s_220›)
infer_tm(A_223)
assert_equal1( Type‹s_220›, Type‹s_220›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_290›)
infer_tm(A_291)
infer_tm(Type‹s_293›)
infer_tm(A_294)
assert_equal1( A_294, ?_3)
infer_tm((sing_6‹??_5› ?_3 m_295))
check_tm( ?_3, Type‹??_5›)
check_tm( m_295, ?_3)
infer_tm(m_295)
assert_equal1( ?_3, A_294)
simpl_tm ~expand:false( ?_3, A_294)
simpl_tm ~expand:false( A_294, A_294)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_296
    ??_2 <= s_299
    ??_3 <= r_301
    ??_4 <= t_303
    ??_5 <= s_306
    
  |}
  imeta_meta {|
    ?_1 <= A_309
    ?_2 <= A_316
    ?_3 <= A_319
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_293›)
check_tm( A_294, Type‹s_293›)
infer_tm(A_294)
assert_equal1( Type‹s_293›, Type‹s_293›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_332›)
infer_tm(Type‹s_334›)
assert_equal1( A_335, A_335)
infer_tm((list_7‹??_6› A_335))
check_tm( A_335, Type‹??_6›)
infer_tm(A_335)
assert_equal1( Type‹??_6›, Type‹s_334›)
simpl_tm ~expand:false( Type‹??_6›, Type‹s_334›)
infer_tm(Type‹s_336›)
infer_tm(A_337)
infer_tm((list_7‹??_7› A_337))
check_tm( A_337, Type‹??_7›)
infer_tm(A_337)
assert_equal1( Type‹??_7›, Type‹s_336›)
simpl_tm ~expand:false( Type‹??_7›, Type‹s_336›)
assert_equal1( A_337, A_337)
infer_tm((list_7‹??_8› A_337))
check_tm( A_337, Type‹??_8›)
infer_tm(A_337)
assert_equal1( Type‹??_8›, Type‹s_336›)
simpl_tm ~expand:false( Type‹??_8›, Type‹s_336›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_340
    ??_2 <= s_343
    ??_3 <= r_345
    ??_4 <= t_347
    ??_5 <= s_350
    ??_6 <= s_351
    ??_7 <= s_352
    ??_8 <= s_353
    
  |}
  imeta_meta {|
    ?_1 <= A_356
    ?_2 <= A_363
    ?_3 <= A_366
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(nat_3 -> nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(bool_2)
check_tm(
  function lte_387 : nat_3 -> nat_3 -> bool_2
  | zero_4 _390 => true_2
  | _391 zero_4 => false_3
  | (succ_5 x_392) (succ_5 y_393) => ((lte_387) x_392 y_393),
  nat_3 -> nat_3 -> bool_2)
infer_tm(nat_3 -> nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(bool_2)
assert_equal1( nat_3 -> nat_3 -> bool_2, nat_3 -> nat_3 -> bool_2)
check_cls {|
  prblm {| ;
    {|  ::: [zero_4, _408] =>? true_2 |}
    {|  ::: [_409, zero_4] =>? false_3 |}
    {|  ::: [(succ_5 x_410), (succ_5 y_411)] =>? ((lte_396) #x_410 #y_411) |}
  |}
|}
case_intro
case_intro
case_splitting
splitting_on(zero_4)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3);
    {| eq_pat?( #__415, _408 : nat_3) ::: [] =>? true_2 |}
    {| eq_pat?( zero_4, _409 : nat_3)
       eq_pat?( #__415, zero_4 : nat_3) ::: [] =>? false_3
    |}
  |}
|}
unify_pprbm( eq_term?( nat_3, nat_3)
             eq_pat?( #__415, _408 : nat_3) )
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( #__415, #_408)
simpl_pprbm ~expand:false( #__415, #_408)
case_coverage_ok( true_2, bool_2)
check_tm( true_2, bool_2)
infer_tm(true_2)
assert_equal1( bool_2, bool_2)
splitting_on(succ_5)
case_splitting
splitting_on(zero_4)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3)
           eq_term?( nat_3, nat_3);
    {| eq_pat?( (succ_5‹› #pred_420), _409 : nat_3) ::: [] =>? false_3 |}
  |}
|}
unify_pprbm(
  eq_term?( nat_3, nat_3)
  eq_term?( nat_3, nat_3)
  eq_pat?( (succ_5‹› #pred_420), _409 : nat_3)
)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( (succ_5‹› #pred_420), #_409)
simpl_pprbm ~expand:false( (succ_5‹› #pred_420), #_409)
case_coverage_ok( false_3, bool_2)
check_tm( false_3, bool_2)
infer_tm(false_3)
assert_equal1( bool_2, bool_2)
splitting_on(succ_5)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3)
           eq_term?( nat_3, nat_3);
    {| eq_pat?( #pred_420, x_410 : nat_3)
       eq_pat?( #pred_427, y_411 : nat_3) ::: [] =>?
         ((lte_396) #x_410 #y_411)
    |}
  |}
|}
unify_pprbm(
  eq_term?( nat_3, nat_3)
  eq_term?( nat_3, nat_3)
  eq_pat?( #pred_420, x_410 : nat_3)
  eq_pat?( #pred_427, y_411 : nat_3)
)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( #pred_420, #x_410)
simpl_pprbm ~expand:false( #pred_427, #y_411)
simpl_pprbm ~expand:false( #pred_420, #x_410)
simpl_pprbm ~expand:false( #pred_427, #y_411)
case_coverage_ok( ((lte_396) pred_420 pred_427), bool_2)
check_tm( ((lte_396) pred_420 pred_427), bool_2)
infer_tm(((lte_396) pred_420 pred_427))
infer_tm(((lte_396) pred_420))
infer_tm(lte_396)
check_tm( pred_420, nat_3)
infer_tm(pred_420)
assert_equal1( nat_3, nat_3)
check_tm( pred_427, nat_3)
infer_tm(pred_427)
assert_equal1( nat_3, nat_3)
assert_equal1( bool_2, bool_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_435
    ??_2 <= s_438
    ??_3 <= r_440
    ??_4 <= t_442
    ??_5 <= s_445
    ??_6 <= s_446
    ??_7 <= s_447
    ??_8 <= s_448
    
  |}
  imeta_meta {|
    ?_1 <= A_451
    ?_2 <= A_458
    ?_3 <= A_461
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(nat_3 -> nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(bool_2)
check_tm(
  function lt_476 : nat_3 -> nat_3 -> bool_2
  | x_479 y_480 => ((lte_1) (succ_5‹› x_479) y_480),
  nat_3 -> nat_3 -> bool_2)
infer_tm(nat_3 -> nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(nat_3 -> bool_2)
infer_tm(nat_3)
infer_tm(bool_2)
assert_equal1( nat_3 -> nat_3 -> bool_2, nat_3 -> nat_3 -> bool_2)
check_cls {|
  prblm {| ;
    {|  ::: [x_495, y_496] =>? ((lte_1) (succ_5‹› #x_495) #y_496) |}
  |}
|}
case_intro
case_intro
case_coverage{|
  prblm {| ;
    {| eq_pat?( #x_499, x_495 : nat_3)
       eq_pat?( #y_500, y_496 : nat_3) ::: [] =>?
         ((lte_1) (succ_5‹› #x_495) #y_496)
    |}
  |}
|}
unify_pprbm( eq_pat?( #x_499, x_495 : nat_3)
             eq_pat?( #y_500, y_496 : nat_3)
)
simpl_pprbm ~expand:false( #x_499, #x_495)
simpl_pprbm ~expand:false( #y_500, #y_496)
simpl_pprbm ~expand:false( #x_499, #x_495)
simpl_pprbm ~expand:false( #y_500, #y_496)
case_coverage_ok( ((lte_1) (succ_5‹› x_499) y_500), bool_2)
check_tm( ((lte_1) (succ_5‹› x_499) y_500), bool_2)
infer_tm(((lte_1) (succ_5‹› x_499) y_500))
infer_tm(((lte_1) (succ_5‹› x_499)))
infer_tm(lte_1)
check_tm( (succ_5‹› x_499), nat_3)
infer_tm((succ_5‹› x_499))
check_tm( x_499, nat_3)
infer_tm(x_499)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
check_tm( y_500, nat_3)
infer_tm(y_500)
assert_equal1( nat_3, nat_3)
assert_equal1( bool_2, bool_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_506
    ??_2 <= s_509
    ??_3 <= r_511
    ??_4 <= t_513
    ??_5 <= s_516
    ??_6 <= s_517
    ??_7 <= s_518
    ??_8 <= s_519
    
  |}
  imeta_meta {|
    ?_1 <= A_522
    ?_2 <= A_529
    ?_3 <= A_532
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(∀ (A_541 : Type‹s_540›) -> (list_7‹??_10› A_541) -> nat_3)
infer_tm(Type‹s_540›)
infer_tm((list_7‹??_10› A_543) -> nat_3)
infer_tm((list_7‹??_10› A_543))
check_tm( A_543, Type‹??_10›)
infer_tm(A_543)
assert_equal1( Type‹??_10›, Type‹s_540›)
simpl_tm ~expand:false( Type‹??_10›, Type‹s_540›)
infer_tm(nat_3)
check_tm(
  function length_546 :
    ∀ (A_547 : Type‹s_540›) -> (list_7‹??_9› A_547) -> nat_3
  | A_549 nil_9 => zero_4
  | A_550 (cons_10 _551 tl_552) => (succ_5‹› ((length_546) ?_4 tl_552)),
  ∀ (A_553 : Type‹s_540›) -> (list_7‹??_10› A_553) -> nat_3)
infer_tm(∀ (A_556 : Type‹s_540›) -> (list_7‹??_9› A_556) -> nat_3)
infer_tm(Type‹s_540›)
infer_tm((list_7‹??_9› A_558) -> nat_3)
infer_tm((list_7‹??_9› A_558))
check_tm( A_558, Type‹??_9›)
infer_tm(A_558)
assert_equal1( Type‹??_9›, Type‹s_540›)
simpl_tm ~expand:false( Type‹??_9›, Type‹s_540›)
infer_tm(nat_3)
assert_equal1(
  ∀ (A_561 : Type‹s_540›) -> (list_7‹??_10› A_561) -> nat_3,
  ∀ (A_563 : Type‹s_540›) -> (list_7‹??_9› A_563) -> nat_3)
simpl_tm ~expand:false(
  ∀ (A_577 : Type‹s_540›) -> (list_7‹s_540› A_577) -> nat_3,
  ∀ (A_579 : Type‹s_540›) -> (list_7‹s_540› A_579) -> nat_3)
simpl_tm ~expand:false( Type‹s_540›, Type‹s_540›)
simpl_tm ~expand:false( (list_7‹s_540› A_581) -> nat_3,
  (list_7‹s_540› A_581) -> nat_3)
simpl_tm ~expand:false( (list_7‹s_540› A_581), (list_7‹s_540› A_581))
simpl_tm ~expand:false( A_581, A_581)
simpl_tm ~expand:false( nat_3, nat_3)
check_cls {|
  prblm {| ;
    {|  ::: [A_569, nil_9] =>? zero_4 |}
    {|  ::: [A_570, (cons_10 _571 tl_572)] =>?
         (succ_5‹› ((length_555) ?_4 #tl_572))
    |}
  |}
|}
case_intro
case_intro
case_splitting
splitting_on(nil_9)
case_coverage{|
  prblm {| eq_term?( (list_7‹s_540› #A_587), (list_7‹s_540› #A_587));
    {| eq_pat?( #A_587, A_569 : Type‹s_540›) ::: [] =>? zero_4 |}
  |}
|}
unify_pprbm(
  eq_term?( (list_7‹s_540› #A_587), (list_7‹s_540› #A_587))
  eq_pat?( #A_587, A_569 : Type‹s_540›)
)
simpl_pprbm ~expand:false( (list_7‹s_540› #A_587),
  (list_7‹s_540› #A_587))
simpl_pprbm ~expand:false( #A_587, #A_587)
simpl_pprbm ~expand:false( #A_587, #A_569)
simpl_pprbm ~expand:false( #A_587, #A_569)
case_coverage_ok( zero_4, nat_3)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
splitting_on(cons_10)
case_coverage{|
  prblm {| eq_term?( (list_7‹s_540› #A_587), (list_7‹s_540› #A_587));
    {| eq_pat?( #A_587, A_570 : Type‹s_540›)
       eq_pat?( #hd_593, _571 : #A_587)
       eq_pat?( #tl_594, tl_572 : (list_7‹s_540› #A_587)) ::: [] =>?
         (succ_5‹› ((length_555) ?_4 #tl_572))
    |}
  |}
|}
unify_pprbm(
  eq_term?( (list_7‹s_540› #A_587), (list_7‹s_540› #A_587))
  eq_pat?( #A_587, A_570 : Type‹s_540›)
  eq_pat?( #hd_593, _571 : #A_587)
  eq_pat?( #tl_594, tl_572 : (list_7‹s_540› #A_587))
)
simpl_pprbm ~expand:false( (list_7‹s_540› #A_587),
  (list_7‹s_540› #A_587))
simpl_pprbm ~expand:false( #A_587, #A_587)
simpl_pprbm ~expand:false( #A_587, #A_570)
simpl_pprbm ~expand:false( #hd_593, #_571)
simpl_pprbm ~expand:false( #tl_594, #tl_572)
simpl_pprbm ~expand:false( #A_587, #A_570)
simpl_pprbm ~expand:false( #hd_593, #_571)
simpl_pprbm ~expand:false( #tl_594, #tl_572)
case_coverage_ok( (succ_5‹› ((length_555) ?_4 tl_594)), nat_3)
check_tm( (succ_5‹› ((length_555) ?_4 tl_594)), nat_3)
infer_tm((succ_5‹› ((length_555) ?_4 tl_594)))
check_tm( ((length_555) ?_4 tl_594), nat_3)
infer_tm(((length_555) ?_4 tl_594))
infer_tm(((length_555) ?_4))
infer_tm(length_555)
check_tm( ?_4, Type‹s_540›)
check_tm( tl_594, (list_7‹s_540› ?_4))
infer_tm(tl_594)
assert_equal1( (list_7‹s_540› ?_4), (list_7‹s_540› A_587))
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_602
    ??_2 <= s_605
    ??_3 <= r_607
    ??_4 <= t_609
    ??_5 <= s_612
    ??_6 <= s_613
    ??_7 <= s_614
    ??_8 <= s_615
    ??_9 <= s_616
    ??_10 <= s_617
    
  |}
  imeta_meta {|
    ?_1 <= A_620
    ?_2 <= A_627
    ?_3 <= A_630
    
  |}
  eqns {|
    equal_tm? ((list_7‹s_540› ?_4), (list_7‹s_540› A_587))
  |}
end_dump
simpl_tm ~expand:false( (list_7‹s_540› ?_4), (list_7‹s_540› A_587))
simpl_tm ~expand:false( ?_4, A_587)
infer_tm(Type‹s_540›)
check_tm( A_587, Type‹s_540›)
infer_tm(A_587)
assert_equal1( Type‹s_540›, Type‹s_540›)
----------------------------------

inductive-------------------------
infer_tm(U)
infer_tm(A_645)
infer_tm(nat_3)
infer_tm((list_7‹??_11› A_645))
check_tm( A_645, Type‹??_11›)
infer_tm(A_645)
assert_equal1( Type‹??_11›, U)
simpl_tm ~expand:false( Type‹??_11›, U)
infer_tm(U)
infer_tm(A_649)
infer_tm((list_7‹??_12› A_649))
check_tm( A_649, Type‹??_12›)
infer_tm(A_649)
assert_equal1( Type‹??_12›, U)
simpl_tm ~expand:false( Type‹??_12›, U)
assert_equal1( A_649, ?_6)
assert_equal1( x_650, x_650)
infer_tm((at_8 ?_6 x_650 zero_4 (cons_10‹??_13› x_650 xs0_651)))
check_tm( ?_6, U)
check_tm( x_650, ?_6)
infer_tm(x_650)
assert_equal1( ?_6, A_649)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
check_tm( (cons_10‹??_13› x_650 xs0_651), (list_7‹??_11› ?_6))
infer_tm((cons_10‹??_13› x_650 xs0_651))
check_tm( ?_5, Type‹??_13›)
check_tm( x_650, ?_5)
infer_tm(x_650)
assert_equal1( ?_5, A_649)
check_tm( xs0_651, (list_7‹??_13› ?_5))
infer_tm(xs0_651)
assert_equal1( (list_7‹??_13› ?_5), (list_7‹??_12› A_649))
assert_equal1( (list_7‹??_11› ?_6), (list_7‹??_13› ?_5))
simpl_tm ~expand:false( (list_7‹U› ?_6), (list_7‹??_13› ?_5))
simpl_tm ~expand:false( ?_6, ?_5)
simpl_tm ~expand:false( ?_5, ?_6)
simpl_tm ~expand:false( (list_7‹U› ?_5), (list_7‹U› A_649))
simpl_tm ~expand:false( ?_5, A_649)
simpl_tm ~expand:false( A_649, A_649)
simpl_tm ~expand:false( A_649, A_649)
simpl_tm ~expand:false( A_649, A_649)
infer_tm(U)
infer_tm(A_652)
infer_tm(nat_3)
infer_tm(A_652)
infer_tm((list_7‹??_14› A_652))
check_tm( A_652, Type‹??_14›)
infer_tm(A_652)
assert_equal1( Type‹??_14›, U)
simpl_tm ~expand:false( Type‹??_14›, U)
infer_tm((at_8 ?_7 x_653 n_654 xs0_656))
check_tm( ?_7, U)
check_tm( x_653, ?_7)
infer_tm(x_653)
assert_equal1( ?_7, A_652)
check_tm( n_654, nat_3)
infer_tm(n_654)
assert_equal1( nat_3, nat_3)
check_tm( xs0_656, (list_7‹??_11› ?_7))
infer_tm(xs0_656)
assert_equal1( (list_7‹??_11› ?_7), (list_7‹??_14› A_652))
simpl_tm ~expand:false( (list_7‹U› ?_7), (list_7‹U› A_652))
simpl_tm ~expand:false( ?_7, A_652)
simpl_tm ~expand:false( A_652, A_652)
assert_equal1( A_652, ?_9)
assert_equal1( x_653, x_653)
infer_tm((at_8
           ?_9 x_653 (succ_5‹› n_654) (cons_10‹??_15› x0_655 xs0_656)))
check_tm( ?_9, U)
check_tm( x_653, ?_9)
infer_tm(x_653)
assert_equal1( ?_9, A_652)
check_tm( (succ_5‹› n_654), nat_3)
infer_tm((succ_5‹› n_654))
check_tm( n_654, nat_3)
infer_tm(n_654)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
check_tm( (cons_10‹??_15› x0_655 xs0_656), (list_7‹??_11› ?_9))
infer_tm((cons_10‹??_15› x0_655 xs0_656))
check_tm( ?_8, Type‹??_15›)
check_tm( x0_655, ?_8)
infer_tm(x0_655)
assert_equal1( ?_8, A_652)
check_tm( xs0_656, (list_7‹??_15› ?_8))
infer_tm(xs0_656)
assert_equal1( (list_7‹??_15› ?_8), (list_7‹??_14› A_652))
assert_equal1( (list_7‹??_11› ?_9), (list_7‹??_15› ?_8))
simpl_tm ~expand:false( (list_7‹U› ?_9), (list_7‹??_15› ?_8))
simpl_tm ~expand:false( ?_9, ?_8)
simpl_tm ~expand:false( ?_8, ?_9)
simpl_tm ~expand:false( (list_7‹U› ?_8), (list_7‹U› A_652))
simpl_tm ~expand:false( ?_8, A_652)
simpl_tm ~expand:false( A_652, A_652)
simpl_tm ~expand:false( A_652, A_652)
simpl_tm ~expand:false( A_652, A_652)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_658
    ??_2 <= s_661
    ??_3 <= r_663
    ??_4 <= t_665
    ??_5 <= s_668
    ??_6 <= s_669
    ??_7 <= s_670
    ??_8 <= s_671
    ??_9 <= s_672
    ??_10 <= s_673
    ??_11 <= U
    ??_12 <= U
    ??_13 <= U
    ??_14 <= U
    ??_15 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_676
    ?_2 <= A_683
    ?_3 <= A_686
    ?_4 <= A_690
    ?_5 <= A_694
    ?_6 <= ?_5
    ?_7 <= A_702
    ?_8 <= A_708
    ?_9 <= ?_8
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(U)
check_tm( A_649, U)
infer_tm(A_649)
assert_equal1( U, U)
infer_tm(U)
check_tm( A_649, U)
infer_tm(A_649)
assert_equal1( U, U)
infer_tm(U)
check_tm( A_652, U)
infer_tm(A_652)
assert_equal1( U, U)
infer_tm(U)
check_tm( A_652, U)
infer_tm(A_652)
assert_equal1( U, U)
infer_tm(U)
check_tm( A_652, U)
infer_tm(A_652)
assert_equal1( U, U)
----------------------------------

definition-------------------------
infer_tm(∀ {A_749 : U} ->
           ∀ (n_750 : nat_3) ->
             ∀ (xs_751 : (list_7‹??_27› A_749)) ->
               ∀ (__752 :
                 (eq_4‹??_29›
                   ?_31 ((lt_2) n_750 ((length_3‹??_28›) ?_30 xs_751))
                   true_2)) ->
                 (exists_5‹??_30,??_31,L›
                   ?_35
                   function _753 : ∀ (x_754 : ?_32) -> ?_33
                   | x_755 => (at_8 ?_34 x_755 n_750 xs_751)))
infer_tm(U)
infer_tm(∀ (n_757 : nat_3) ->
           ∀ (xs_758 : (list_7‹??_27› A_756)) ->
             ∀ (__759 :
               (eq_4‹??_29›
                 ?_31 ((lt_2) n_757 ((length_3‹??_28›) ?_30 xs_758))
                 true_2)) ->
               (exists_5‹??_30,??_31,L›
                 ?_35
                 function _760 : ∀ (x_761 : ?_32) -> ?_33
                 | x_762 => (at_8 ?_34 x_762 n_757 xs_758)))
infer_tm(nat_3)
infer_tm(∀ (xs_764 : (list_7‹??_27› A_756)) ->
           ∀ (__765 :
             (eq_4‹??_29›
               ?_31 ((lt_2) n_763 ((length_3‹??_28›) ?_30 xs_764)) true_2)) ->
             (exists_5‹??_30,??_31,L›
               ?_35
               function _766 : ∀ (x_767 : ?_32) -> ?_33
               | x_768 => (at_8 ?_34 x_768 n_763 xs_764)))
infer_tm((list_7‹??_27› A_756))
check_tm( A_756, Type‹??_27›)
infer_tm(A_756)
assert_equal1( Type‹??_27›, U)
simpl_tm ~expand:false( Type‹??_27›, U)
infer_tm(∀ (__770 :
           (eq_4‹??_29›
             ?_31 ((lt_2) n_763 ((length_3‹??_28›) ?_30 xs_769)) true_2)) ->
           (exists_5‹??_30,??_31,L›
             ?_35
             function _771 : ∀ (x_772 : ?_32) -> ?_33
             | x_773 => (at_8 ?_34 x_773 n_763 xs_769)))
infer_tm((eq_4‹??_29›
           ?_31 ((lt_2) n_763 ((length_3‹??_28›) ?_30 xs_769)) true_2))
check_tm( ?_31, Type‹??_29›)
check_tm( ((lt_2) n_763 ((length_3‹??_28›) ?_30 xs_769)), ?_31)
infer_tm(((lt_2) n_763 ((length_3‹??_28›) ?_30 xs_769)))
infer_tm(((lt_2) n_763))
infer_tm(lt_2)
check_tm( n_763, nat_3)
infer_tm(n_763)
assert_equal1( nat_3, nat_3)
check_tm( ((length_3‹??_28›) ?_30 xs_769), nat_3)
infer_tm(((length_3‹??_28›) ?_30 xs_769))
infer_tm(((length_3‹??_28›) ?_30))
infer_tm(length_3‹??_28›)
check_tm( ?_30, Type‹??_28›)
check_tm( xs_769, (list_7‹??_28› ?_30))
infer_tm(xs_769)
assert_equal1( (list_7‹??_28› ?_30), (list_7‹??_27› A_756))
assert_equal1( nat_3, nat_3)
assert_equal1( ?_31, bool_2)
check_tm( true_2, ?_31)
infer_tm(true_2)
assert_equal1( ?_31, bool_2)
simpl_tm ~expand:false( ?_31, bool_2)
simpl_tm ~expand:false( bool_2, bool_2)
simpl_tm ~expand:false( (list_7‹??_28› ?_30), (list_7‹U› A_756))
simpl_tm ~expand:false( ?_30, A_756)
simpl_tm ~expand:false( A_756, ?_30)
infer_tm((exists_5‹??_30,??_31,L›
           ?_35
           function _781 : ∀ (x_782 : ?_32) -> ?_33
           | x_783 => (at_8 ?_34 x_783 n_763 xs_769)))
check_tm( ?_35, Type‹??_30›)
check_tm(
  function _784 : ∀ (x_785 : ?_32) -> ?_33
  | x_786 => (at_8 ?_34 x_786 n_763 xs_769), ?_35 -> Type‹??_31›)
infer_tm(∀ (x_789 : ?_32) -> ?_33)
infer_tm(?_32)
delay_assert(?_36, ??_32)
infer_tm(?_33)
simpl_tm ~expand:false( ?_36, Type‹??_32›)
delay_assert(?_37, ??_33)
simpl_tm ~expand:false( ?_37, Type‹??_33›)
assert_equal1( ?_35 -> Type‹??_31›, ∀ (x_792 : ?_32) -> ?_33)
simpl_tm ~expand:false( ?_35 -> Type‹??_31›, ∀ (x_797 : ?_32) -> ?_33)
simpl_tm ~expand:false( ?_35, ?_32)
simpl_tm ~expand:false( Type‹??_31›, ?_33)
simpl_tm ~expand:false( Type‹??_31›, ?_33)
check_cls {|
  prblm {| ; {|  ::: [x_793] =>? (at_8 ?_34 #x_793 n_763 xs_769) |} |}
|}
case_intro
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__800, x_793 : ?_32) ::: [] =>?
         (at_8 ?_34 #x_793 n_763 xs_769)
    |}
  |}
|}
unify_pprbm( eq_pat?( #__800, x_793 : ?_32) )
simpl_pprbm ~expand:false( #__800, #x_793)
simpl_pprbm ~expand:false( #__800, #x_793)
case_coverage_ok( (at_8 ?_34 __800 n_763 xs_769), Type‹??_31›)
check_tm( (at_8 ?_34 __800 n_763 xs_769), Type‹??_31›)
infer_tm((at_8 ?_34 __800 n_763 xs_769))
check_tm( ?_34, U)
check_tm( __800, ?_34)
infer_tm(__800)
assert_equal1( ?_34, ?_32)
check_tm( n_763, nat_3)
infer_tm(n_763)
assert_equal1( nat_3, nat_3)
check_tm( xs_769, (list_7‹U› ?_34))
infer_tm(xs_769)
assert_equal1( (list_7‹U› ?_34), (list_7‹??_27› A_756))
assert_equal1( Type‹??_31›, U)
simpl_tm ~expand:false( Type‹??_31›, U)
simpl_tm ~expand:false( (list_7‹U› ?_34), (list_7‹U› A_756))
simpl_tm ~expand:false( ?_34, A_756)
simpl_tm ~expand:false( A_756, ?_32)
check_tm(
  function get_at_802 :
    ∀ {A_803 : U} ->
      ∀ (n_804 : nat_3) ->
        ∀ (xs_805 : (list_7‹??_16› A_803)) ->
          ∀ (__806 :
            (eq_4‹??_18›
              ?_11 ((lt_2) n_804 ((length_3‹??_17›) ?_10 xs_805)) true_2)) ->
            (exists_5‹??_19,??_20,L›
              ?_15
              function _807 : ∀ (x_808 : ?_12) -> ?_13
              | x_809 => (at_8 ?_14 x_809 n_804 xs_805))
  | A_810 _811 nil_9 !! =>
  | A_812 zero_4 (cons_10 x_813 xs_814) _815 =>
    (ex_7‹??_21,??_22,??_23› x_813 (at_zero_11‹› xs_814))
  | A_816 (succ_5 n_817) (cons_10 x_818 xs_819) e_820 =>
    match ((get_at_802) ?_20 n_817 xs_819 e_820) in ∀ (_821 : ?_21) -o ?_22
    with
    | (ex_7 x0_822 pf_823) =>
      (ex_7‹??_24,??_25,??_26›
        x0_822 (at_succ_12‹› ?_25 ?_23 ?_24 pf_823)),
  ∀ {A_824 : U} ->
    ∀ (n_825 : nat_3) ->
      ∀ (xs_826 : (list_7‹??_27› A_824)) ->
        ∀ (__827 :
          (eq_4‹??_29›
            ?_31 ((lt_2) n_825 ((length_3‹??_28›) ?_30 xs_826)) true_2)) ->
          (exists_5‹??_30,??_31,L›
            ?_35
            function _828 : ∀ (x_829 : ?_32) -> ?_33
            | x_830 => (at_8 ?_34 x_830 n_825 xs_826)))
infer_tm(∀ {A_832 : U} ->
           ∀ (n_833 : nat_3) ->
             ∀ (xs_834 : (list_7‹??_16› A_832)) ->
               ∀ (__835 :
                 (eq_4‹??_18›
                   ?_11 ((lt_2) n_833 ((length_3‹??_17›) ?_10 xs_834))
                   true_2)) ->
                 (exists_5‹??_19,??_20,L›
                   ?_15
                   function _836 : ∀ (x_837 : ?_12) -> ?_13
                   | x_838 => (at_8 ?_14 x_838 n_833 xs_834)))
infer_tm(U)
infer_tm(∀ (n_840 : nat_3) ->
           ∀ (xs_841 : (list_7‹??_16› A_839)) ->
             ∀ (__842 :
               (eq_4‹??_18›
                 ?_11 ((lt_2) n_840 ((length_3‹??_17›) ?_10 xs_841))
                 true_2)) ->
               (exists_5‹??_19,??_20,L›
                 ?_15
                 function _843 : ∀ (x_844 : ?_12) -> ?_13
                 | x_845 => (at_8 ?_14 x_845 n_840 xs_841)))
infer_tm(nat_3)
infer_tm(∀ (xs_847 : (list_7‹??_16› A_839)) ->
           ∀ (__848 :
             (eq_4‹??_18›
               ?_11 ((lt_2) n_846 ((length_3‹??_17›) ?_10 xs_847)) true_2)) ->
             (exists_5‹??_19,??_20,L›
               ?_15
               function _849 : ∀ (x_850 : ?_12) -> ?_13
               | x_851 => (at_8 ?_14 x_851 n_846 xs_847)))
infer_tm((list_7‹??_16› A_839))
check_tm( A_839, Type‹??_16›)
infer_tm(A_839)
assert_equal1( Type‹??_16›, U)
simpl_tm ~expand:false( Type‹??_16›, U)
infer_tm(∀ (__853 :
           (eq_4‹??_18›
             ?_11 ((lt_2) n_846 ((length_3‹??_17›) ?_10 xs_852)) true_2)) ->
           (exists_5‹??_19,??_20,L›
             ?_15
             function _854 : ∀ (x_855 : ?_12) -> ?_13
             | x_856 => (at_8 ?_14 x_856 n_846 xs_852)))
infer_tm((eq_4‹??_18›
           ?_11 ((lt_2) n_846 ((length_3‹??_17›) ?_10 xs_852)) true_2))
check_tm( ?_11, Type‹??_18›)
check_tm( ((lt_2) n_846 ((length_3‹??_17›) ?_10 xs_852)), ?_11)
infer_tm(((lt_2) n_846 ((length_3‹??_17›) ?_10 xs_852)))
infer_tm(((lt_2) n_846))
infer_tm(lt_2)
check_tm( n_846, nat_3)
infer_tm(n_846)
assert_equal1( nat_3, nat_3)
check_tm( ((length_3‹??_17›) ?_10 xs_852), nat_3)
infer_tm(((length_3‹??_17›) ?_10 xs_852))
infer_tm(((length_3‹??_17›) ?_10))
infer_tm(length_3‹??_17›)
check_tm( ?_10, Type‹??_17›)
check_tm( xs_852, (list_7‹??_17› ?_10))
infer_tm(xs_852)
assert_equal1( (list_7‹??_17› ?_10), (list_7‹??_16› A_839))
assert_equal1( nat_3, nat_3)
assert_equal1( ?_11, bool_2)
check_tm( true_2, ?_11)
infer_tm(true_2)
assert_equal1( ?_11, bool_2)
simpl_tm ~expand:false( ?_11, bool_2)
simpl_tm ~expand:false( bool_2, bool_2)
simpl_tm ~expand:false( (list_7‹??_17› ?_10), (list_7‹U› A_839))
simpl_tm ~expand:false( ?_10, A_839)
simpl_tm ~expand:false( A_839, ?_10)
infer_tm((exists_5‹??_19,??_20,L›
           ?_15
           function _864 : ∀ (x_865 : ?_12) -> ?_13
           | x_866 => (at_8 ?_14 x_866 n_846 xs_852)))
check_tm( ?_15, Type‹??_19›)
check_tm(
  function _867 : ∀ (x_868 : ?_12) -> ?_13
  | x_869 => (at_8 ?_14 x_869 n_846 xs_852), ?_15 -> Type‹??_20›)
infer_tm(∀ (x_872 : ?_12) -> ?_13)
infer_tm(?_12)
delay_assert(?_38, ??_34)
infer_tm(?_13)
simpl_tm ~expand:false( ?_38, Type‹??_34›)
delay_assert(?_39, ??_35)
simpl_tm ~expand:false( ?_39, Type‹??_35›)
assert_equal1( ?_15 -> Type‹??_20›, ∀ (x_875 : ?_12) -> ?_13)
simpl_tm ~expand:false( ?_15 -> Type‹??_20›, ∀ (x_880 : ?_12) -> ?_13)
simpl_tm ~expand:false( ?_15, ?_12)
simpl_tm ~expand:false( Type‹??_20›, ?_13)
simpl_tm ~expand:false( Type‹??_20›, ?_13)
check_cls {|
  prblm {| ; {|  ::: [x_876] =>? (at_8 ?_14 #x_876 n_846 xs_852) |} |}
|}
case_intro
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__883, x_876 : ?_12) ::: [] =>?
         (at_8 ?_14 #x_876 n_846 xs_852)
    |}
  |}
|}
unify_pprbm( eq_pat?( #__883, x_876 : ?_12) )
simpl_pprbm ~expand:false( #__883, #x_876)
simpl_pprbm ~expand:false( #__883, #x_876)
case_coverage_ok( (at_8 ?_14 __883 n_846 xs_852), Type‹??_20›)
check_tm( (at_8 ?_14 __883 n_846 xs_852), Type‹??_20›)
infer_tm((at_8 ?_14 __883 n_846 xs_852))
check_tm( ?_14, U)
check_tm( __883, ?_14)
infer_tm(__883)
assert_equal1( ?_14, ?_12)
check_tm( n_846, nat_3)
infer_tm(n_846)
assert_equal1( nat_3, nat_3)
check_tm( xs_852, (list_7‹U› ?_14))
infer_tm(xs_852)
assert_equal1( (list_7‹U› ?_14), (list_7‹??_16› A_839))
assert_equal1( Type‹??_20›, U)
simpl_tm ~expand:false( Type‹??_20›, U)
simpl_tm ~expand:false( (list_7‹U› ?_14), (list_7‹U› A_839))
simpl_tm ~expand:false( ?_14, A_839)
simpl_tm ~expand:false( A_839, ?_12)
assert_equal1(
  ∀ {A_885 : U} ->
    ∀ (n_886 : nat_3) ->
      ∀ (xs_887 : (list_7‹??_27› A_885)) ->
        ∀ (__888 :
          (eq_4‹??_29›
            ?_31 ((lt_2) n_886 ((length_3‹??_28›) ?_30 xs_887)) true_2)) ->
          (exists_5‹??_30,??_31,L›
            ?_35
            function _889 : ∀ (x_890 : ?_32) -> ?_33
            | x_891 => (at_8 ?_34 x_891 n_886 xs_887)),
  ∀ {A_892 : U} ->
    ∀ (n_893 : nat_3) ->
      ∀ (xs_894 : (list_7‹??_16› A_892)) ->
        ∀ (__895 :
          (eq_4‹??_18›
            ?_11 ((lt_2) n_893 ((length_3‹??_17›) ?_10 xs_894)) true_2)) ->
          (exists_5‹??_19,??_20,L›
            ?_15
            function _896 : ∀ (x_897 : ?_12) -> ?_13
            | x_898 => (at_8 ?_14 x_898 n_893 xs_894)))
simpl_tm ~expand:false(
  ∀ {A_962 : U} ->
    ∀ (n_963 : nat_3) ->
      ∀ (xs_964 : (list_7‹U› A_962)) ->
        (eq_4‹??_29›
          bool_2 ((lt_2) n_963 ((length_3‹U›) A_962 xs_964)) true_2) ->
          (exists_5‹??_30,U,L›
            A_962
            function _966 : A_962 -> U
            | x_968 => (at_8 A_962 x_968 n_963 xs_964)),
  ∀ {A_969 : U} ->
    ∀ (n_970 : nat_3) ->
      ∀ (xs_971 : (list_7‹U› A_969)) ->
        (eq_4‹??_18›
          bool_2 ((lt_2) n_970 ((length_3‹U›) A_969 xs_971)) true_2) ->
          (exists_5‹??_19,U,L›
            A_969
            function _973 : A_969 -> U
            | x_975 => (at_8 A_969 x_975 n_970 xs_971)))
simpl_tm ~expand:false( U, U)
simpl_tm ~expand:false(
  ∀ (n_977 : nat_3) ->
    ∀ (xs_978 : (list_7‹U› A_976)) ->
      (eq_4‹??_29›
        bool_2 ((lt_2) n_977 ((length_3‹U›) A_976 xs_978)) true_2) ->
        (exists_5‹??_30,U,L›
          A_976
          function _980 : A_976 -> U
          | x_982 => (at_8 A_976 x_982 n_977 xs_978)),
  ∀ (n_983 : nat_3) ->
    ∀ (xs_984 : (list_7‹U› A_976)) ->
      (eq_4‹??_18›
        bool_2 ((lt_2) n_983 ((length_3‹U›) A_976 xs_984)) true_2) ->
        (exists_5‹??_19,U,L›
          A_976
          function _986 : A_976 -> U
          | x_988 => (at_8 A_976 x_988 n_983 xs_984)))
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false(
  ∀ (xs_990 : (list_7‹U› A_976)) ->
    (eq_4‹??_29›
      bool_2 ((lt_2) n_989 ((length_3‹U›) A_976 xs_990)) true_2) ->
      (exists_5‹??_30,U,L›
        A_976
        function _992 : A_976 -> U
        | x_994 => (at_8 A_976 x_994 n_989 xs_990)),
  ∀ (xs_995 : (list_7‹U› A_976)) ->
    (eq_4‹??_18›
      bool_2 ((lt_2) n_989 ((length_3‹U›) A_976 xs_995)) true_2) ->
      (exists_5‹??_19,U,L›
        A_976
        function _997 : A_976 -> U
        | x_999 => (at_8 A_976 x_999 n_989 xs_995)))
simpl_tm ~expand:false( (list_7‹U› A_976), (list_7‹U› A_976))
simpl_tm ~expand:false( A_976, A_976)
simpl_tm ~expand:false(
  (eq_4‹??_29›
    bool_2 ((lt_2) n_989 ((length_3‹U›) A_976 xs_1000)) true_2) ->
    (exists_5‹??_30,U,L›
      A_976
      function _1002 : A_976 -> U
      | x_1004 => (at_8 A_976 x_1004 n_989 xs_1000)),
  (eq_4‹??_18›
    bool_2 ((lt_2) n_989 ((length_3‹U›) A_976 xs_1000)) true_2) ->
    (exists_5‹??_19,U,L›
      A_976
      function _1006 : A_976 -> U
      | x_1008 => (at_8 A_976 x_1008 n_989 xs_1000)))
simpl_tm ~expand:false(
  (eq_4‹??_29›
    bool_2 ((lt_2) n_989 ((length_3‹U›) A_976 xs_1000)) true_2),
  (eq_4‹??_18›
    bool_2 ((lt_2) n_989 ((length_3‹U›) A_976 xs_1000)) true_2))
simpl_tm ~expand:false( bool_2, bool_2)
simpl_tm ~expand:false( ((lt_2) n_989 ((length_3‹U›) A_976 xs_1000)),
  ((lt_2) n_989 ((length_3‹U›) A_976 xs_1000)))
simpl_tm ~expand:false( lt_2, lt_2)
simpl_tm ~expand:false( n_989, n_989)
simpl_tm ~expand:false( ((length_3‹U›) A_976 xs_1000),
  ((length_3‹U›) A_976 xs_1000))
simpl_tm ~expand:false( length_3‹U›, length_3‹U›)
simpl_tm ~expand:false( A_976, A_976)
simpl_tm ~expand:false( xs_1000, xs_1000)
simpl_tm ~expand:false( true_2, true_2)
simpl_tm ~expand:false(
  (exists_5‹??_30,U,L›
    A_976
    function _1010 : A_976 -> U
    | x_1012 => (at_8 A_976 x_1012 n_989 xs_1000)),
  (exists_5‹??_19,U,L›
    A_976
    function _1013 : A_976 -> U
    | x_1015 => (at_8 A_976 x_1015 n_989 xs_1000)))
simpl_tm ~expand:false( A_976, A_976)
simpl_tm ~expand:false(
  function _1016 : A_976 -> U
  | x_1018 => (at_8 A_976 x_1018 n_989 xs_1000),
  function _1019 : A_976 -> U
  | x_1021 => (at_8 A_976 x_1021 n_989 xs_1000))
simpl_function(
  function _1022 : A_976 -> U
  | x_1024 => (at_8 A_976 x_1024 n_989 xs_1000),
  function _1025 : A_976 -> U
  | x_1027 => (at_8 A_976 x_1027 n_989 xs_1000))
simpl_tm ~expand:false( A_976 -> U, A_976 -> U)
simpl_tm ~expand:false( A_976, A_976)
simpl_tm ~expand:false( U, U)
simpl_tm ~expand:false( (at_8 A_976 x_1032 n_989 xs_1000),
  (at_8 A_976 x_1032 n_989 xs_1000))
simpl_tm ~expand:false( A_976, A_976)
simpl_tm ~expand:false( x_1032, x_1032)
simpl_tm ~expand:false( n_989, n_989)
simpl_tm ~expand:false( xs_1000, xs_1000)
check_cls {|
  prblm {| ;
    () ::: [A_909, _910, nil_9, !!] =>? !!
    {|  ::: [A_911, zero_4, (cons_10 x_912 xs_913), _914] =>?
         (ex_7‹??_21,??_22,??_23› #x_912 (at_zero_11‹› #xs_913))
    |}
    {|  ::: [A_915, (succ_5 n_916), (cons_10 x_917 xs_918), e_919] =>?
         match ((get_at_831) ?_20 #n_916 #xs_918 #e_919) in
           ∀ (_1054 : ?_21) -o ?_22
         with
         | (ex_7 x0_1055 pf_1056) =>
           (ex_7‹??_24,??_25,??_26›
             x0_1055 (at_succ_12‹› ?_25 ?_23 ?_24 pf_1056))
    |}
  |}
|}
case_intro
case_intro
case_intro
case_intro
case_splitting
splitting_on(nil_9)
case_absurd
unify_pprbm( eq_term?( (list_7‹U› #A_1057), (list_7‹U› #A_1057)) )
simpl_pprbm ~expand:false( (list_7‹U› #A_1057), (list_7‹U› #A_1057))
simpl_pprbm ~expand:false( #A_1057, #A_1057)
unify_pprbm(
  eq_term?(
    (eq_4‹??_18›
      bool_2 ((lt_2) #n_1058 ((length_3‹U›) #A_1057 nil_9‹U›)) true_2),
    (eq_4‹??_18›
      bool_2 ((lt_2) #n_1058 ((length_3‹U›) #A_1057 nil_9‹U›))
      ((lt_2) #n_1058 ((length_3‹U›) #A_1057 nil_9‹U›))))
  eq_term?( (list_7‹U› #A_1057), (list_7‹U› #A_1057))
)
simpl_pprbm ~expand:false(
  (eq_4‹??_18›
    bool_2 ((lt_2) #n_1058 ((length_3‹U›) #A_1057 nil_9‹U›)) true_2),
  (eq_4‹??_18›
    bool_2 ((lt_2) #n_1058 ((length_3‹U›) #A_1057 nil_9‹U›))
    ((lt_2) #n_1058 ((length_3‹U›) #A_1057 nil_9‹U›))))
simpl_pprbm ~expand:false( bool_2, bool_2)
simpl_pprbm ~expand:false(
  ((lt_2) #n_1058 ((length_3‹U›) #A_1057 nil_9‹U›)),
  ((lt_2) #n_1058 ((length_3‹U›) #A_1057 nil_9‹U›)))
simpl_pprbm ~expand:false( lt_2, lt_2)
simpl_pprbm ~expand:false( #n_1058, #n_1058)
simpl_pprbm ~expand:false( ((length_3‹U›) #A_1057 nil_9‹U›),
  ((length_3‹U›) #A_1057 nil_9‹U›))
simpl_pprbm ~expand:false( length_3‹U›, length_3‹U›)
simpl_pprbm ~expand:false( #A_1057, #A_1057)
simpl_pprbm ~expand:false( nil_9‹U›, nil_9‹U›)
simpl_pprbm ~expand:false( #A_1057, #A_1057)
simpl_pprbm ~expand:false( true_2,
  ((lt_2) #n_1058 ((length_3‹U›) #A_1057 nil_9‹U›)))
simpl_pprbm ~expand:false( true_2, lt_2)
simpl_pprbm ~expand:true( true_2,
  function lt_1089 : nat_3 -> nat_3 -> bool_2
  | x_1092 y_1093 => ((lte_1) (succ_5‹› x_1092) y_1093))
simpl_pprbm ~expand:true( true_2, false_3)
splitting_on(cons_10)
case_splitting
splitting_on(zero_4)
case_coverage{|
  prblm {|
    eq_term?( nat_3, nat_3)
    eq_term?( (list_7‹U› #A_1057), (list_7‹U› #A_1057));
    {| eq_pat?( #A_1057, A_911 : U)
       eq_pat?( #hd_1099, x_912 : #A_1057)
       eq_pat?( #tl_1100, xs_913 : (list_7‹U› #A_1057))
       eq_pat?( #__1060, _914 :
         (eq_4‹??_18›
           bool_2
           ((lt_2)
             zero_4
             ((length_3‹U›) #A_1057 (cons_10‹U› #hd_1099 #tl_1100)))
           true_2)) ::: [] =>?
         (ex_7‹??_21,??_22,??_23› #x_912 (at_zero_11‹› #xs_913))
    |}
  |}
|}
unify_pprbm(
  eq_term?( nat_3, nat_3)
  eq_term?( (list_7‹U› #A_1057), (list_7‹U› #A_1057))
  eq_pat?( #A_1057, A_911 : U)
  eq_pat?( #hd_1099, x_912 : #A_1057)
  eq_pat?( #tl_1100, xs_913 : (list_7‹U› #A_1057))
  eq_pat?( #__1060, _914 :
    (eq_4‹??_18›
      bool_2
      ((lt_2)
        zero_4 ((length_3‹U›) #A_1057 (cons_10‹U› #hd_1099 #tl_1100)))
      true_2))
)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( (list_7‹U› #A_1057), (list_7‹U› #A_1057))
simpl_pprbm ~expand:false( #A_1057, #A_1057)
simpl_pprbm ~expand:false( #A_1057, #A_911)
simpl_pprbm ~expand:false( #hd_1099, #x_912)
simpl_pprbm ~expand:false( #tl_1100, #xs_913)
simpl_pprbm ~expand:false( #__1060, #_914)
simpl_pprbm ~expand:false( #A_1057, #A_911)
simpl_pprbm ~expand:false( #hd_1099, #x_912)
simpl_pprbm ~expand:false( #tl_1100, #xs_913)
simpl_pprbm ~expand:false( #__1060, #_914)
case_coverage_ok(
  (ex_7‹??_21,??_22,??_23› hd_1099 (at_zero_11‹› tl_1100)),
  (exists_5‹??_19,U,L›
    A_1057
    function _1185 : A_1057 -> U
    | x_1187 => (at_8 A_1057 x_1187 zero_4 (cons_10‹U› hd_1099 tl_1100))))
check_tm( (ex_7‹??_21,??_22,??_23› hd_1099 (at_zero_11‹› tl_1100)),
  (exists_5‹??_19,U,L›
    A_1057
    function _1188 : A_1057 -> U
    | x_1190 => (at_8 A_1057 x_1190 zero_4 (cons_10‹U› hd_1099 tl_1100))))
infer_tm((ex_7‹??_21,??_22,??_23› hd_1099 (at_zero_11‹› tl_1100)))
check_tm( ?_18, Type‹??_21›)
check_tm( ?_19, ?_18 -> Type‹??_22›)
check_tm( hd_1099, ?_18)
infer_tm(hd_1099)
assert_equal1( ?_18, A_1057)
check_tm( (at_zero_11‹› tl_1100), ((?_19) hd_1099))
infer_tm((at_zero_11‹› tl_1100))
check_tm( ?_16, U)
check_tm( ?_17, ?_16)
check_tm( tl_1100, (list_7‹U› ?_16))
infer_tm(tl_1100)
assert_equal1( (list_7‹U› ?_16), (list_7‹U› A_1057))
assert_equal1( ((?_19) hd_1099),
  (at_8 ?_16 ?_17 zero_4 (cons_10‹U› ?_17 tl_1100)))
assert_equal1(
  (exists_5‹??_19,U,L›
    A_1057
    function _1192 : A_1057 -> U
    | x_1194 => (at_8 A_1057 x_1194 zero_4 (cons_10‹U› hd_1099 tl_1100))),
  (exists_5‹??_21,??_22,??_23› ?_18 ?_19))
splitting_on(succ_5)
case_coverage{|
  prblm {|
    eq_term?( nat_3, nat_3)
    eq_term?( (list_7‹U› #A_1057), (list_7‹U› #A_1057));
    {| eq_pat?( #A_1057, A_915 : U)
       eq_pat?( #pred_1195, n_916 : nat_3)
       eq_pat?( #hd_1099, x_917 : #A_1057)
       eq_pat?( #tl_1100, xs_918 : (list_7‹U› #A_1057))
       eq_pat?( #__1060, e_919 :
         (eq_4‹??_18›
           bool_2
           ((lt_2)
             (succ_5‹› #pred_1195)
             ((length_3‹U›) #A_1057 (cons_10‹U› #hd_1099 #tl_1100)))
           true_2)) ::: [] =>?
         match ((get_at_831) ?_20 #n_916 #xs_918 #e_919) in
           ∀ (_1224 : ?_21) -o ?_22
         with
         | (ex_7 x0_1225 pf_1226) =>
           (ex_7‹??_24,??_25,??_26›
             x0_1225 (at_succ_12‹› ?_25 ?_23 ?_24 pf_1226))
    |}
  |}
|}
unify_pprbm(
  eq_term?( nat_3, nat_3)
  eq_term?( (list_7‹U› #A_1057), (list_7‹U› #A_1057))
  eq_pat?( #A_1057, A_915 : U)
  eq_pat?( #pred_1195, n_916 : nat_3)
  eq_pat?( #hd_1099, x_917 : #A_1057)
  eq_pat?( #tl_1100, xs_918 : (list_7‹U› #A_1057))
  eq_pat?( #__1060, e_919 :
    (eq_4‹??_18›
      bool_2
      ((lt_2)
        (succ_5‹› #pred_1195)
        ((length_3‹U›) #A_1057 (cons_10‹U› #hd_1099 #tl_1100)))
      true_2))
)
simpl_pprbm ~expand:false( nat_3, nat_3)
simpl_pprbm ~expand:false( (list_7‹U› #A_1057), (list_7‹U› #A_1057))
simpl_pprbm ~expand:false( #A_1057, #A_1057)
simpl_pprbm ~expand:false( #A_1057, #A_915)
simpl_pprbm ~expand:false( #pred_1195, #n_916)
simpl_pprbm ~expand:false( #hd_1099, #x_917)
simpl_pprbm ~expand:false( #tl_1100, #xs_918)
simpl_pprbm ~expand:false( #__1060, #e_919)
simpl_pprbm ~expand:false( #A_1057, #A_915)
simpl_pprbm ~expand:false( #pred_1195, #n_916)
simpl_pprbm ~expand:false( #hd_1099, #x_917)
simpl_pprbm ~expand:false( #tl_1100, #xs_918)
simpl_pprbm ~expand:false( #__1060, #e_919)
case_coverage_ok(
  match ((get_at_831) ?_20 pred_1195 tl_1100 __1060) in
    ∀ (_1258 : ?_21) -o ?_22
  with
  | (ex_7 x0_1259 pf_1260) =>
    (ex_7‹??_24,??_25,??_26›
      x0_1259 (at_succ_12‹› ?_25 ?_23 ?_24 pf_1260)),
  (exists_5‹??_19,U,L›
    A_1057
    function _1261 : A_1057 -> U
    | x_1263 =>
      (at_8
        A_1057 x_1263 (succ_5‹› pred_1195)
        (cons_10‹U› hd_1099 tl_1100))))
check_tm(
  match ((get_at_831) ?_20 pred_1195 tl_1100 __1060) in
    ∀ (_1264 : ?_21) -o ?_22
  with
  | (ex_7 x0_1265 pf_1266) =>
    (ex_7‹??_24,??_25,??_26›
      x0_1265 (at_succ_12‹› ?_25 ?_23 ?_24 pf_1266)),
  (exists_5‹??_19,U,L›
    A_1057
    function _1267 : A_1057 -> U
    | x_1269 =>
      (at_8
        A_1057 x_1269 (succ_5‹› pred_1195)
        (cons_10‹U› hd_1099 tl_1100))))
infer_tm(match ((get_at_831) ?_20 pred_1195 tl_1100 __1060) in
           ∀ (_1270 : ?_21) -o ?_22
         with
         | (ex_7 x0_1271 pf_1272) =>
           (ex_7‹??_24,??_25,??_26›
             x0_1271 (at_succ_12‹› ?_25 ?_23 ?_24 pf_1272)))
infer_tm(∀ (_1273 : ?_21) -o ?_22)
infer_tm(?_21)
simpl_tm ~expand:false(
  (exists_5‹??_19,U,L›
    A_1057
    function _1278 : A_1057 -> U
    | x_1280 => (at_8 A_1057 x_1280 zero_4 (cons_10‹U› hd_1099 tl_1100))),
  (exists_5‹??_21,??_22,??_23› ?_18 ?_19))
simpl_tm ~expand:false( A_1057, ?_18)
simpl_tm ~expand:false(
  function _1281 : A_1057 -> U
  | x_1283 => (at_8 A_1057 x_1283 zero_4 (cons_10‹U› hd_1099 tl_1100)),
  ?_19)
simpl_tm ~expand:false( A_1057, ?_18)
simpl_tm ~expand:false(
  function _1287 : A_1057 -> U
  | x_1289 => (at_8 A_1057 x_1289 zero_4 (cons_10‹U› hd_1099 tl_1100)),
  ?_19)
simpl_tm ~expand:false(
  (at_8 A_1057 hd_1099 zero_4 (cons_10‹U› hd_1099 tl_1100)),
  (at_8 ?_16 ?_17 zero_4 (cons_10‹U› ?_17 tl_1100)))
simpl_tm ~expand:false( A_1057, ?_16)
simpl_tm ~expand:false( hd_1099, ?_17)
simpl_tm ~expand:false( zero_4, zero_4)
simpl_tm ~expand:false( (cons_10‹U› hd_1099 tl_1100),
  (cons_10‹U› ?_17 tl_1100))
simpl_tm ~expand:false( A_1057, ?_16)
simpl_tm ~expand:false( hd_1099, ?_17)
simpl_tm ~expand:false( tl_1100, tl_1100)
simpl_tm ~expand:false( hd_1099, ?_17)
simpl_tm ~expand:false( A_1057, A_1057)
simpl_tm ~expand:false( hd_1099, hd_1099)
simpl_tm ~expand:false( (list_7‹U› A_1057), (list_7‹U› A_1057))
simpl_tm ~expand:false( A_1057, A_1057)
simpl_tm ~expand:false( A_1057, A_1057)
delay_assert(?_40, ??_36)
infer_tm(?_22)
simpl_tm ~expand:false( ?_40, Type‹??_36›)
delay_assert(?_41, ??_37)
simpl_tm ~expand:false( ?_41, Type‹??_37›)
check_tm( ((get_at_831) ?_20 pred_1195 tl_1100 __1060), ?_21)
infer_tm(((get_at_831) ?_20 pred_1195 tl_1100 __1060))
infer_tm(((get_at_831) ?_20 pred_1195 tl_1100))
infer_tm(((get_at_831) ?_20 pred_1195))
infer_tm(((get_at_831) ?_20))
infer_tm(get_at_831)
check_tm( ?_20, U)
check_tm( pred_1195, nat_3)
infer_tm(pred_1195)
assert_equal1( nat_3, nat_3)
check_tm( tl_1100, (list_7‹U› ?_20))
infer_tm(tl_1100)
assert_equal1( (list_7‹U› ?_20), (list_7‹U› A_1057))
simpl_tm ~expand:false( (list_7‹U› ?_20), (list_7‹U› A_1057))
simpl_tm ~expand:false( ?_20, A_1057)
check_tm( __1060,
  (eq_4‹??_18›
    bool_2 ((lt_2) pred_1195 ((length_3‹U›) A_1057 tl_1100)) true_2))
infer_tm(__1060)
assert_equal1(
  (eq_4‹??_18›
    bool_2 ((lt_2) pred_1195 ((length_3‹U›) A_1057 tl_1100)) true_2),
  (eq_4‹??_18›
    bool_2
    ((lt_2)
      (succ_5‹› pred_1195)
      ((length_3‹U›) A_1057 (cons_10‹U› hd_1099 tl_1100)))
    true_2))
assert_equal1( ?_21,
  (exists_5‹??_19,U,L›
    A_1057
    function _1351 : A_1057 -> U
    | x_1353 => (at_8 A_1057 x_1353 pred_1195 tl_1100)))
simpl_tm ~expand:false( ?_21,
  (exists_5‹??_19,U,L›
    A_1057
    function _1359 : A_1057 -> U
    | x_1361 => (at_8 A_1057 x_1361 pred_1195 tl_1100)))
check_cls {|
  prblm {| ;
    {|  ::: [(ex_7 x0_1354 pf_1355)] =>?
         (ex_7‹??_24,??_25,??_26›
           #x0_1354 (at_succ_12‹› ?_25 ?_23 ?_24 #pf_1355))
    |}
  |}
|}
case_intro
case_splitting
splitting_on(ex_7)
case_coverage{|
  prblm {|
    eq_term?(
      (exists_5‹??_19,U,L›
        A_1057
        function _1414 : A_1057 -> U
        | x_1416 => (at_8 A_1057 x_1416 pred_1195 tl_1100)),
      (exists_5‹??_19,U,L›
        A_1057
        function _1417 : A_1057 -> U
        | x_1419 => (at_8 A_1057 x_1419 pred_1195 tl_1100)));
    {| eq_pat?( #m_1372, x0_1354 : A_1057)
       eq_pat?( #pf_1373, pf_1355 : (at_8 A_1057 #m_1372 pred_1195 tl_1100)) ::: [] =>?
         (ex_7‹??_24,??_25,??_26›
           #x0_1354 (at_succ_12‹› ?_25 ?_23 ?_24 #pf_1355))
    |}
  |}
|}
unify_pprbm(
  eq_term?(
    (exists_5‹??_19,U,L›
      A_1057
      function _1420 : A_1057 -> U
      | x_1422 => (at_8 A_1057 x_1422 pred_1195 tl_1100)),
    (exists_5‹??_19,U,L›
      A_1057
      function _1423 : A_1057 -> U
      | x_1425 => (at_8 A_1057 x_1425 pred_1195 tl_1100)))
  eq_pat?( #m_1372, x0_1354 : A_1057)
  eq_pat?( #pf_1373, pf_1355 : (at_8 A_1057 #m_1372 pred_1195 tl_1100))
)
simpl_pprbm ~expand:false(
  (exists_5‹??_19,U,L›
    A_1057
    function _1426 : A_1057 -> U
    | x_1428 => (at_8 A_1057 x_1428 pred_1195 tl_1100)),
  (exists_5‹??_19,U,L›
    A_1057
    function _1429 : A_1057 -> U
    | x_1431 => (at_8 A_1057 x_1431 pred_1195 tl_1100)))
simpl_pprbm ~expand:false( A_1057, A_1057)
simpl_pprbm ~expand:false(
  function _1432 : A_1057 -> U
  | x_1434 => (at_8 A_1057 x_1434 pred_1195 tl_1100),
  function _1435 : A_1057 -> U
  | x_1437 => (at_8 A_1057 x_1437 pred_1195 tl_1100))
simpl_pprbm ~expand:false( A_1057 -> U, A_1057 -> U)
simpl_pprbm ~expand:false( A_1057, A_1057)
simpl_pprbm ~expand:false( U, U)
simpl_pprbm ~expand:false( (at_8 A_1057 x_1442 pred_1195 tl_1100),
  (at_8 A_1057 x_1442 pred_1195 tl_1100))
simpl_pprbm ~expand:false( A_1057, A_1057)
simpl_pprbm ~expand:false( x_1442, x_1442)
simpl_pprbm ~expand:false( pred_1195, pred_1195)
simpl_pprbm ~expand:false( tl_1100, tl_1100)
simpl_pprbm ~expand:false( #m_1372, #x0_1354)
simpl_pprbm ~expand:false( #pf_1373, #pf_1355)
simpl_pprbm ~expand:false( #m_1372, #x0_1354)
simpl_pprbm ~expand:false( #pf_1373, #pf_1355)
case_coverage_ok(
  (ex_7‹??_24,??_25,??_26›
    m_1372 (at_succ_12‹› ?_25 ?_23 ?_24 pf_1373)),
  ?_22)
check_tm(
  (ex_7‹??_24,??_25,??_26›
    m_1372 (at_succ_12‹› ?_25 ?_23 ?_24 pf_1373)),
  ?_22)
infer_tm((ex_7‹??_24,??_25,??_26›
           m_1372 (at_succ_12‹› ?_25 ?_23 ?_24 pf_1373)))
check_tm( ?_28, Type‹??_24›)
check_tm( ?_29, ?_28 -> Type‹??_25›)
check_tm( m_1372, ?_28)
infer_tm(m_1372)
assert_equal1( ?_28, A_1057)
check_tm( (at_succ_12‹› ?_25 ?_23 ?_24 pf_1373), ((?_29) m_1372))
infer_tm((at_succ_12‹› ?_25 ?_23 ?_24 pf_1373))
check_tm( ?_26, U)
check_tm( ?_27, ?_26)
check_tm( ?_25, nat_3)
check_tm( ?_23, ?_26)
check_tm( ?_24, (list_7‹U› ?_26))
check_tm( pf_1373, (at_8 ?_26 ?_27 ?_25 ?_24))
infer_tm(pf_1373)
assert_equal1( (at_8 ?_26 ?_27 ?_25 ?_24),
  ((function _1478 : A_1057 -> U
    | x_1480 => (at_8 A_1057 x_1480 pred_1195 tl_1100)) m_1372))
assert_equal1( ((?_29) m_1372),
  (at_8 ?_26 ?_27 (succ_5‹› ?_25) (cons_10‹U› ?_23 ?_24)))
assert_equal1( ?_22, (exists_5‹??_24,??_25,??_26› ?_28 ?_29))
assert_equal1(
  (exists_5‹??_19,U,L›
    A_1057
    function _1481 : A_1057 -> U
    | x_1483 =>
      (at_8
        A_1057 x_1483 (succ_5‹› pred_1195)
        (cons_10‹U› hd_1099 tl_1100))),
  ?_22)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_1484
    ??_2 <= s_1487
    ??_3 <= r_1489
    ??_4 <= t_1491
    ??_5 <= s_1494
    ??_6 <= s_1495
    ??_7 <= s_1496
    ??_8 <= s_1497
    ??_9 <= s_1498
    ??_10 <= s_1499
    ??_11 <= U
    ??_12 <= U
    ??_13 <= U
    ??_14 <= U
    ??_15 <= U
    ??_16 <= U
    ??_17 <= U
    ??_20 <= U
    ??_21 <= ??_19
    ??_22 <= U
    ??_23 <= L
    ??_27 <= U
    ??_28 <= U
    ??_29 <= ??_18
    ??_30 <= ??_19
    ??_31 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_1502
    ?_2 <= A_1509
    ?_3 <= A_1512
    ?_4 <= A_1516
    ?_5 <= A_1520
    ?_6 <= ?_5
    ?_7 <= A_1528
    ?_8 <= A_1534
    ?_9 <= ?_8
    ?_10 <= A_1543
    ?_11 <= bool_2
    ?_12 <= A_1550
    ?_13 <= Type‹??_20›
    ?_14 <= A_1560
    ?_15 <= ?_12
    ?_16 <= A_1568
    ?_17 <= hd_1572
    ?_18 <= A_1578
    ?_19 <= function _1585 : A_1583 -> U
            | x_1587 =>
              (at_8 A_1583 x_1587 zero_4 (cons_10‹U› hd_1582 tl_1581))
    ?_20 <= A_1592
    ?_21 <= (exists_5‹??_19,U,L›
              A_1598
              function _1600 : A_1598 -> U
              | x_1602 => (at_8 A_1598 x_1602 pred_1597 tl_1595))
    ?_30 <= A_1605
    ?_31 <= bool_2
    ?_32 <= A_1612
    ?_33 <= Type‹??_31›
    ?_34 <= A_1622
    ?_35 <= ?_32
    ?_36 <= Type‹??_32›
    ?_37 <= Type‹??_33›
    ?_38 <= Type‹??_34›
    ?_39 <= Type‹??_35›
    ?_40 <= Type‹??_36›
    ?_41 <= Type‹??_37›
    
  |}
  eqns {|
    equal_tm?
      ((exists_5‹??_19,U,L›
         A_1057
         function _1662 : A_1057 -> U
         | x_1664 =>
           (at_8
             A_1057 x_1664 (succ_5‹› pred_1195)
             (cons_10‹U› hd_1099 tl_1100))),
      ?_22);
    equal_tm? (?_22, (exists_5‹??_24,??_25,??_26› ?_28 ?_29));
    equal_tm? (((?_29) m_1372),
      (at_8 ?_26 ?_27 (succ_5‹› ?_25) (cons_10‹U› ?_23 ?_24)));
    equal_tm? ((at_8 ?_26 ?_27 ?_25 ?_24),
      ((function _1665 : A_1057 -> U
        | x_1667 => (at_8 A_1057 x_1667 pred_1195 tl_1100)) m_1372));
    equal_tm? (?_28, A_1057)
  |}
end_dump
simpl_tm ~expand:false(
  (exists_5‹??_19,U,L›
    A_1057
    function _1671 : A_1057 -> U
    | x_1673 =>
      (at_8
        A_1057 x_1673 (succ_5‹› pred_1195)
        (cons_10‹U› hd_1099 tl_1100))),
  ?_22)
simpl_tm ~expand:false(
  (exists_5‹??_19,U,L›
    A_1057
    function _1683 : A_1057 -> U
    | x_1685 =>
      (at_8
        A_1057 x_1685 (succ_5‹› pred_1195)
        (cons_10‹U› hd_1099 tl_1100))),
  (exists_5‹??_24,??_25,??_26› ?_28 ?_29))
simpl_tm ~expand:false( A_1057, ?_28)
simpl_tm ~expand:false(
  function _1686 : A_1057 -> U
  | x_1688 =>
    (at_8
      A_1057 x_1688 (succ_5‹› pred_1195) (cons_10‹U› hd_1099 tl_1100)),
  ?_29)
simpl_tm ~expand:false( A_1057, ?_28)
simpl_tm ~expand:false(
  function _1692 : A_1057 -> U
  | x_1694 =>
    (at_8
      A_1057 x_1694 (succ_5‹› pred_1195) (cons_10‹U› hd_1099 tl_1100)),
  ?_29)
simpl_tm ~expand:false(
  (at_8
    A_1057 m_1372 (succ_5‹› pred_1195) (cons_10‹U› hd_1099 tl_1100)),
  (at_8 ?_26 ?_27 (succ_5‹› ?_25) (cons_10‹U› ?_23 ?_24)))
simpl_tm ~expand:false( A_1057, ?_26)
simpl_tm ~expand:false( m_1372, ?_27)
simpl_tm ~expand:false( (succ_5‹› pred_1195), (succ_5‹› ?_25))
simpl_tm ~expand:false( pred_1195, ?_25)
simpl_tm ~expand:false( (cons_10‹U› hd_1099 tl_1100),
  (cons_10‹U› ?_23 ?_24))
simpl_tm ~expand:false( A_1057, ?_26)
simpl_tm ~expand:false( hd_1099, ?_23)
simpl_tm ~expand:false( tl_1100, ?_24)
simpl_tm ~expand:false( m_1372, ?_27)
simpl_tm ~expand:false( pred_1195, ?_25)
simpl_tm ~expand:false( A_1057, A_1057)
simpl_tm ~expand:false( hd_1099, ?_23)
simpl_tm ~expand:false( tl_1100, ?_24)
simpl_tm ~expand:false( (at_8 A_1057 m_1372 pred_1195 tl_1100),
  (at_8 A_1057 m_1372 pred_1195 tl_1100))
simpl_tm ~expand:false( A_1057, A_1057)
simpl_tm ~expand:false( m_1372, m_1372)
simpl_tm ~expand:false( pred_1195, pred_1195)
simpl_tm ~expand:false( tl_1100, tl_1100)
simpl_tm ~expand:false( A_1057, A_1057)
infer_tm(U)
check_tm( A_839, U)
infer_tm(A_839)
assert_equal1( U, U)
infer_tm(Type‹??_18›)
check_tm( bool_2, Type‹??_18›)
infer_tm(bool_2)
assert_equal1( Type‹??_18›, U)
simpl_tm ~expand:false( Type‹??_18›, U)
infer_tm(Type‹??_34›)
check_tm( A_839, Type‹??_34›)
infer_tm(A_839)
assert_equal1( Type‹??_34›, U)
simpl_tm ~expand:false( Type‹??_34›, U)
infer_tm(Type‹??_35›)
check_tm( U, Type‹??_35›)
infer_tm(U)
assert_equal1( Type‹??_35›, U)
simpl_tm ~expand:false( Type‹??_35›, U)
infer_tm(U)
check_tm( A_839, U)
infer_tm(A_839)
assert_equal1( U, U)
infer_tm(Type‹??_19›)
check_tm( A_839, Type‹??_19›)
infer_tm(A_839)
assert_equal1( Type‹??_19›, U)
simpl_tm ~expand:false( Type‹??_19›, U)
infer_tm(U)
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
infer_tm(A_1057)
check_tm( hd_1099, A_1057)
infer_tm(hd_1099)
assert_equal1( A_1057, A_1057)
infer_tm(U)
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
infer_tm(A_1057 -> U)
infer_tm(A_1057)
infer_tm(U)
check_tm(
  function _1797 : A_1057 -> U
  | x_1799 => (at_8 A_1057 x_1799 zero_4 (cons_10‹U› hd_1099 tl_1100)),
  A_1057 -> U)
infer_tm(A_1057 -> U)
infer_tm(A_1057)
infer_tm(U)
assert_equal1( A_1057 -> U, A_1057 -> U)
check_cls {|
  prblm {| ;
    {|  ::: [x_1807] =>?
         (at_8 A_1057 #x_1807 zero_4 (cons_10‹U› hd_1099 tl_1100))
    |}
  |}
|}
case_intro
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__1809, x_1807 : A_1057) ::: [] =>?
         (at_8 A_1057 #x_1807 zero_4 (cons_10‹U› hd_1099 tl_1100))
    |}
  |}
|}
unify_pprbm( eq_pat?( #__1809, x_1807 : A_1057) )
simpl_pprbm ~expand:false( #__1809, #x_1807)
simpl_pprbm ~expand:false( #__1809, #x_1807)
case_coverage_ok(
  (at_8 A_1057 __1809 zero_4 (cons_10‹U› hd_1099 tl_1100)), U)
check_tm( (at_8 A_1057 __1809 zero_4 (cons_10‹U› hd_1099 tl_1100)), U)
infer_tm((at_8 A_1057 __1809 zero_4 (cons_10‹U› hd_1099 tl_1100)))
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
check_tm( __1809, A_1057)
infer_tm(__1809)
assert_equal1( A_1057, A_1057)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
check_tm( (cons_10‹U› hd_1099 tl_1100), (list_7‹U› A_1057))
infer_tm((cons_10‹U› hd_1099 tl_1100))
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
check_tm( hd_1099, A_1057)
infer_tm(hd_1099)
assert_equal1( A_1057, A_1057)
check_tm( tl_1100, (list_7‹U› A_1057))
infer_tm(tl_1100)
assert_equal1( (list_7‹U› A_1057), (list_7‹U› A_1057))
assert_equal1( (list_7‹U› A_1057), (list_7‹U› A_1057))
assert_equal1( U, U)
infer_tm(U)
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
infer_tm(Type‹??_36›)
check_tm(
  (exists_5‹U,U,L›
    A_1057
    function _1877 : A_1057 -> U
    | x_1879 => (at_8 A_1057 x_1879 pred_1195 tl_1100)),
  Type‹??_36›)
infer_tm((exists_5‹U,U,L›
           A_1057
           function _1880 : A_1057 -> U
           | x_1882 => (at_8 A_1057 x_1882 pred_1195 tl_1100)))
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
check_tm(
  function _1883 : A_1057 -> U
  | x_1885 => (at_8 A_1057 x_1885 pred_1195 tl_1100), A_1057 -> U)
infer_tm(A_1057 -> U)
infer_tm(A_1057)
infer_tm(U)
assert_equal1( A_1057 -> U, A_1057 -> U)
check_cls {|
  prblm {| ; {|  ::: [x_1893] =>? (at_8 A_1057 #x_1893 pred_1195 tl_1100) |}
  |}
|}
case_intro
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__1895, x_1893 : A_1057) ::: [] =>?
         (at_8 A_1057 #x_1893 pred_1195 tl_1100)
    |}
  |}
|}
unify_pprbm( eq_pat?( #__1895, x_1893 : A_1057) )
simpl_pprbm ~expand:false( #__1895, #x_1893)
simpl_pprbm ~expand:false( #__1895, #x_1893)
case_coverage_ok( (at_8 A_1057 __1895 pred_1195 tl_1100), U)
check_tm( (at_8 A_1057 __1895 pred_1195 tl_1100), U)
infer_tm((at_8 A_1057 __1895 pred_1195 tl_1100))
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
check_tm( __1895, A_1057)
infer_tm(__1895)
assert_equal1( A_1057, A_1057)
check_tm( pred_1195, nat_3)
infer_tm(pred_1195)
assert_equal1( nat_3, nat_3)
check_tm( tl_1100, (list_7‹U› A_1057))
infer_tm(tl_1100)
assert_equal1( (list_7‹U› A_1057), (list_7‹U› A_1057))
assert_equal1( U, U)
assert_equal1( Type‹??_36›, L)
simpl_tm ~expand:false( Type‹??_36›, L)
infer_tm(Type‹??_37›)
check_tm(
  (exists_5‹U,U,L›
    A_1057
    function _1945 : A_1057 -> U
    | x_1947 =>
      (at_8
        A_1057 x_1947 (succ_5‹› pred_1195)
        (cons_10‹U› hd_1099 tl_1100))),
  Type‹??_37›)
infer_tm((exists_5‹U,U,L›
           A_1057
           function _1948 : A_1057 -> U
           | x_1950 =>
             (at_8
               A_1057 x_1950 (succ_5‹› pred_1195)
               (cons_10‹U› hd_1099 tl_1100))))
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
check_tm(
  function _1951 : A_1057 -> U
  | x_1953 =>
    (at_8
      A_1057 x_1953 (succ_5‹› pred_1195) (cons_10‹U› hd_1099 tl_1100)),
  A_1057 -> U)
infer_tm(A_1057 -> U)
infer_tm(A_1057)
infer_tm(U)
assert_equal1( A_1057 -> U, A_1057 -> U)
check_cls {|
  prblm {| ;
    {|  ::: [x_1961] =>?
         (at_8
           A_1057 #x_1961 (succ_5‹› pred_1195)
           (cons_10‹U› hd_1099 tl_1100))
    |}
  |}
|}
case_intro
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__1963, x_1961 : A_1057) ::: [] =>?
         (at_8
           A_1057 #x_1961 (succ_5‹› pred_1195)
           (cons_10‹U› hd_1099 tl_1100))
    |}
  |}
|}
unify_pprbm( eq_pat?( #__1963, x_1961 : A_1057) )
simpl_pprbm ~expand:false( #__1963, #x_1961)
simpl_pprbm ~expand:false( #__1963, #x_1961)
case_coverage_ok(
  (at_8
    A_1057 __1963 (succ_5‹› pred_1195) (cons_10‹U› hd_1099 tl_1100)),
  U)
check_tm(
  (at_8
    A_1057 __1963 (succ_5‹› pred_1195) (cons_10‹U› hd_1099 tl_1100)),
  U)
infer_tm((at_8
           A_1057 __1963 (succ_5‹› pred_1195)
           (cons_10‹U› hd_1099 tl_1100)))
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
check_tm( __1963, A_1057)
infer_tm(__1963)
assert_equal1( A_1057, A_1057)
check_tm( (succ_5‹› pred_1195), nat_3)
infer_tm((succ_5‹› pred_1195))
check_tm( pred_1195, nat_3)
infer_tm(pred_1195)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
check_tm( (cons_10‹U› hd_1099 tl_1100), (list_7‹U› A_1057))
infer_tm((cons_10‹U› hd_1099 tl_1100))
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
check_tm( hd_1099, A_1057)
infer_tm(hd_1099)
assert_equal1( A_1057, A_1057)
check_tm( tl_1100, (list_7‹U› A_1057))
infer_tm(tl_1100)
assert_equal1( (list_7‹U› A_1057), (list_7‹U› A_1057))
assert_equal1( (list_7‹U› A_1057), (list_7‹U› A_1057))
assert_equal1( U, U)
assert_equal1( Type‹??_37›, L)
simpl_tm ~expand:false( Type‹??_37›, L)
infer_tm(A_1057)
check_tm( hd_1099, A_1057)
infer_tm(hd_1099)
assert_equal1( A_1057, A_1057)
infer_tm((list_7‹U› A_1057))
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
check_tm( tl_1100, (list_7‹U› A_1057))
infer_tm(tl_1100)
assert_equal1( (list_7‹U› A_1057), (list_7‹U› A_1057))
infer_tm(nat_3)
check_tm( pred_1195, nat_3)
infer_tm(pred_1195)
assert_equal1( nat_3, nat_3)
infer_tm(U)
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
infer_tm(A_1057)
check_tm( m_1372, A_1057)
infer_tm(m_1372)
assert_equal1( A_1057, A_1057)
infer_tm(U)
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
infer_tm(A_1057 -> U)
infer_tm(A_1057)
infer_tm(U)
check_tm(
  function _2184 : A_1057 -> U
  | x_2186 =>
    (at_8
      A_1057 x_2186 (succ_5‹› pred_1195) (cons_10‹U› hd_1099 tl_1100)),
  A_1057 -> U)
infer_tm(A_1057 -> U)
infer_tm(A_1057)
infer_tm(U)
assert_equal1( A_1057 -> U, A_1057 -> U)
check_cls {|
  prblm {| ;
    {|  ::: [x_2194] =>?
         (at_8
           A_1057 #x_2194 (succ_5‹› pred_1195)
           (cons_10‹U› hd_1099 tl_1100))
    |}
  |}
|}
case_intro
case_coverage{|
  prblm {| ;
    {| eq_pat?( #__2196, x_2194 : A_1057) ::: [] =>?
         (at_8
           A_1057 #x_2194 (succ_5‹› pred_1195)
           (cons_10‹U› hd_1099 tl_1100))
    |}
  |}
|}
unify_pprbm( eq_pat?( #__2196, x_2194 : A_1057) )
simpl_pprbm ~expand:false( #__2196, #x_2194)
simpl_pprbm ~expand:false( #__2196, #x_2194)
case_coverage_ok(
  (at_8
    A_1057 __2196 (succ_5‹› pred_1195) (cons_10‹U› hd_1099 tl_1100)),
  U)
check_tm(
  (at_8
    A_1057 __2196 (succ_5‹› pred_1195) (cons_10‹U› hd_1099 tl_1100)),
  U)
infer_tm((at_8
           A_1057 __2196 (succ_5‹› pred_1195)
           (cons_10‹U› hd_1099 tl_1100)))
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
check_tm( __2196, A_1057)
infer_tm(__2196)
assert_equal1( A_1057, A_1057)
check_tm( (succ_5‹› pred_1195), nat_3)
infer_tm((succ_5‹› pred_1195))
check_tm( pred_1195, nat_3)
infer_tm(pred_1195)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
check_tm( (cons_10‹U› hd_1099 tl_1100), (list_7‹U› A_1057))
infer_tm((cons_10‹U› hd_1099 tl_1100))
check_tm( A_1057, U)
infer_tm(A_1057)
assert_equal1( U, U)
check_tm( hd_1099, A_1057)
infer_tm(hd_1099)
assert_equal1( A_1057, A_1057)
check_tm( tl_1100, (list_7‹U› A_1057))
infer_tm(tl_1100)
assert_equal1( (list_7‹U› A_1057), (list_7‹U› A_1057))
assert_equal1( (list_7‹U› A_1057), (list_7‹U› A_1057))
assert_equal1( U, U)
infer_tm(U)
check_tm( A_756, U)
infer_tm(A_756)
assert_equal1( U, U)
infer_tm(U)
check_tm( bool_2, U)
infer_tm(bool_2)
assert_equal1( U, U)
infer_tm(Type‹??_32›)
check_tm( A_756, Type‹??_32›)
infer_tm(A_756)
assert_equal1( Type‹??_32›, U)
simpl_tm ~expand:false( Type‹??_32›, U)
infer_tm(Type‹??_33›)
check_tm( U, Type‹??_33›)
infer_tm(U)
assert_equal1( Type‹??_33›, U)
simpl_tm ~expand:false( Type‹??_33›, U)
infer_tm(U)
check_tm( A_756, U)
infer_tm(A_756)
assert_equal1( U, U)
infer_tm(U)
check_tm( A_756, U)
infer_tm(A_756)
assert_equal1( U, U)
----------------------------------

smeta_meta {|
  ??_1 <= s_2310
  ??_2 <= s_2313
  ??_3 <= r_2315
  ??_4 <= t_2317
  ??_5 <= s_2320
  ??_6 <= s_2321
  ??_7 <= s_2322
  ??_8 <= s_2323
  ??_9 <= s_2324
  ??_10 <= s_2325
  ??_11 <= U
  ??_12 <= U
  ??_13 <= U
  ??_14 <= U
  ??_15 <= U
  ??_16 <= U
  ??_17 <= U
  ??_18 <= U
  ??_19 <= U
  ??_20 <= U
  ??_21 <= ??_19
  ??_22 <= U
  ??_23 <= L
  ??_24 <= ??_19
  ??_25 <= U
  ??_26 <= L
  ??_27 <= U
  ??_28 <= U
  ??_29 <= ??_18
  ??_30 <= ??_19
  ??_31 <= U
  ??_32 <= U
  ??_33 <= U
  ??_34 <= U
  ??_35 <= U
  ??_36 <= L
  ??_37 <= L
  
|}
imeta_meta {|
  ?_1 <= A_2328
  ?_2 <= A_2335
  ?_3 <= A_2338
  ?_4 <= A_2342
  ?_5 <= A_2346
  ?_6 <= ?_5
  ?_7 <= A_2354
  ?_8 <= A_2360
  ?_9 <= ?_8
  ?_10 <= A_2369
  ?_11 <= bool_2
  ?_12 <= A_2376
  ?_13 <= Type‹??_20›
  ?_14 <= A_2386
  ?_15 <= ?_12
  ?_16 <= A_2394
  ?_17 <= hd_2398
  ?_18 <= A_2404
  ?_19 <= function _2411 : A_2409 -> U
          | x_2413 =>
            (at_8 A_2409 x_2413 zero_4 (cons_10‹U› hd_2408 tl_2407))
  ?_20 <= A_2418
  ?_21 <= (exists_5‹??_19,U,L›
            A_2424
            function _2426 : A_2424 -> U
            | x_2428 => (at_8 A_2424 x_2428 pred_2423 tl_2421))
  ?_22 <= (exists_5‹??_19,U,L›
            A_2434
            function _2436 : A_2434 -> U
            | x_2438 =>
              (at_8
                A_2434 x_2438 (succ_5‹› pred_2433)
                (cons_10‹U› hd_2432 tl_2431)))
  ?_23 <= hd_2443
  ?_24 <= tl_2450
  ?_25 <= pred_2460
  ?_26 <= A_2469
  ?_27 <= m_2472
  ?_28 <= A_2485
  ?_29 <= function _2495 : A_2493 -> U
          | x_2497 =>
            (at_8
              A_2493 x_2497 (succ_5‹› pred_2492)
              (cons_10‹U› hd_2491 tl_2490))
  ?_30 <= A_2500
  ?_31 <= bool_2
  ?_32 <= A_2507
  ?_33 <= Type‹??_31›
  ?_34 <= A_2517
  ?_35 <= ?_32
  ?_36 <= Type‹??_32›
  ?_37 <= Type‹??_33›
  ?_38 <= Type‹??_34›
  ?_39 <= Type‹??_35›
  ?_40 <= Type‹??_36›
  ?_41 <= Type‹??_37›
  
|}
#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_2773 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_2774› (A_2775 : Type‹s_2774›) (m_2776 : A_2775):
  A_2775 -> U
where
| refl_6 : (eq_4‹s_2774› A_2775 m_2776 m_2776)

#[program]
inductive exists_5‹s_2778,r_2779,t_2780› (A_2781 : Type‹s_2778›) (B_2782 : 
A_2781 -> Type‹r_2779›): Type‹t_2780› where
| ex_7
    (m_2784 : A_2781) {pf_2785 : ((B_2782) m_2784)}
    : (exists_5‹s_2778,r_2779,t_2780› A_2781 B_2782)

#[program]
inductive sing_6‹s_2786› (A_2787 : Type‹s_2786›):
  A_2787 -> Type‹s_2786›
where
| just_8 (m_2789 : A_2787) : (sing_6‹s_2786› A_2787 m_2789)

#[program]
inductive list_7‹s_2790› (A_2791 : Type‹s_2790›): U where
| nil_9 : (list_7‹s_2790› A_2791)
| cons_10
    (hd_2792 : A_2791) (tl_2793 : (list_7‹s_2790› A_2791))
    : (list_7‹s_2790› A_2791)

#[program]
def lte_1‹› : nat_3 -> nat_3 -> bool_2 :=
  function lte_2796 : nat_3 -> nat_3 -> bool_2
  | zero_4 _2799 => true_2
  | _2800 zero_4 => false_3
  | (succ_5 x_2801) (succ_5 y_2802) => ((lte_2796) x_2801 y_2802)

#[program]
def lt_2‹› : nat_3 -> nat_3 -> bool_2 :=
  function lt_2805 : nat_3 -> nat_3 -> bool_2
  | x_2808 y_2809 => ((lte_1) (succ_5‹› x_2808) y_2809)

#[logical]
def length_3‹s_2810› :
  ∀ (A_2811 : Type‹s_2810›) -> (list_7‹s_2810› A_2811) -> nat_3
:=
  function length_2813 :
    ∀ (A_2814 : Type‹s_2810›) -> (list_7‹s_2810› A_2814) -> nat_3
  | A_2816 nil_9 => zero_4
  | A_2817 (cons_10 _2818 tl_2819) =>
    (succ_5‹› ((length_2813) A_2817 tl_2819))

#[logical]
inductive at_8‹› (A_2820 : U) (x_2821 : A_2820):
  nat_3 -> (list_7‹U› A_2820) -> U
where
| at_zero_11
    (xs0_2824 : (list_7‹U› A_2820))
    : (at_8 A_2820 x_2821 zero_4 (cons_10‹U› x_2821 xs0_2824))
| at_succ_12
    (n_2825 : nat_3) (x0_2826 : A_2820) (xs0_2827 : (list_7‹U› A_2820))
    (h_2828 : (at_8 A_2820 x_2821 n_2825 xs0_2827))
    : (at_8
        A_2820 x_2821 (succ_5‹› n_2825) (cons_10‹U› x0_2826 xs0_2827))

#[program]
def get_at_4‹› :
  ∀ {A_2829 : U} ->
    ∀ (n_2830 : nat_3) ->
      ∀ (xs_2831 : (list_7‹U› A_2829)) ->
        (eq_4‹U›
          bool_2 ((lt_2) n_2830 ((length_3‹U›) A_2829 xs_2831)) true_2) ->
          (exists_5‹U,U,L›
            A_2829
            function _2833 : A_2829 -> U
            | x_2835 => (at_8 A_2829 x_2835 n_2830 xs_2831))
:=
  function get_at_2836 :
    ∀ {A_2837 : U} ->
      ∀ (n_2838 : nat_3) ->
        ∀ (xs_2839 : (list_7‹U› A_2837)) ->
          (eq_4‹U›
            bool_2 ((lt_2) n_2838 ((length_3‹U›) A_2837 xs_2839)) true_2) ->
            (exists_5‹U,U,L›
              A_2837
              function _2841 : A_2837 -> U
              | x_2843 => (at_8 A_2837 x_2843 n_2838 xs_2839))
  | A_2844 _2845 nil_9 !! =>
  | A_2846 zero_4 (cons_10 x_2847 xs_2848) _2849 =>
    (ex_7‹U,U,L› x_2847 (at_zero_11‹› xs_2848))
  | A_2850 (succ_5 n_2851) (cons_10 x_2852 xs_2853) e_2854 =>
    match ((get_at_2836) A_2850 n_2851 xs_2853 e_2854) in
      (exists_5‹U,U,L›
        A_2850
        function _2856 : A_2850 -> U
        | x_2858 => (at_8 A_2850 x_2858 n_2851 xs_2853)) -o
        (exists_5‹U,U,L›
          A_2850
          function _2859 : A_2850 -> U
          | x_2861 =>
            (at_8
              A_2850 x_2861 (succ_5‹› n_2851)
              (cons_10‹U› x_2852 xs_2853)))
    with
    | (ex_7 x0_2862 pf_2863) =>
      (ex_7‹U,U,L›
        x0_2862 (at_succ_12‹› n_2851 x_2852 xs_2853 pf_2863))

-----------------------------------------

