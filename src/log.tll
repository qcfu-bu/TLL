[Inductive {name = "unit"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)), [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
      ));
   view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("pred", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id ("A", I)),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id ("A", I)),
                          (Binder ("_", (TBase (Type U)))))),
                       [(DConstr ("refl",
                           (TBase
                              (App
                                 [(Id ("eq", I)); (Id ("m", I));
                                   (Id ("m", I))])),
                           []))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DConstr ("ex",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (N,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("pf",
                                       (TBase
                                          (App
                                             [(Id ("exists", I));
                                               (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("A", I)),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DConstr ("just",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("m",
                           (TBase (App [(Id ("sing", I)); (Id ("m", I))]))))
                        )),
                     [E]))
                   ]))
             ))
          ))
       ));
    view = [I]};
  Inductive {name = "prod"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Type (SId "r")),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DConstr ("pair",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R, (Id ("B", I)),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("prod", I));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [E; E]};
  Definition {name = "sing_double"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("A", I)),
                    (Binder ("m",
                       (Pi (R, L, (App [(Id ("sing", I)); (Id ("m", I))]),
                          (Binder ("_",
                             (Pi (R, L,
                                (App [(Id ("sing", I)); (Id ("m", I))]),
                                (Binder ("_",
                                   (App
                                      [(Inst ("prod",
                                          [(SId "_"); (SId "_"); L], I));
                                        (Id ("A", I)); (Id ("A", I))])
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "sing_double"),
              [([(PId "A"); (PId "m"); (PConstr ("just", [(PId "x")]));
                  (PConstr ("just", [(PId "y")]))],
                (Some (Let (N,
                         (Ann ((Id ("refl", I)),
                            (App
                               [(Id ("eq", I)); (Id ("x", I)); (Id ("y", I))])
                            )),
                         (Binder ("pf",
                            (App
                               [(Id ("pair", I)); (Id ("x", I));
                                 (Id ("y", I))])
                            ))
                         ))))
                ]
              )),
           [E; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("A", I)),
                 (Binder ("m",
                    (Pi (R, L, (App [(Id ("sing", I)); (Id ("m", I))]),
                       (Binder ("_",
                          (Pi (R, L, (App [(Id ("sing", I)); (Id ("m", I))]),
                             (Binder ("_",
                                (App
                                   [(Inst ("prod", [(SId "_"); (SId "_"); L],
                                       I));
                                     (Id ("A", I)); (Id ("A", I))])
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E]}
  ]

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive nat_2‹› : U where
| zero_2 : nat_2
| succ_3 (pred_55 : nat_2) : nat_2

#[logical]
inductive eq_3‹s_56› (A_57 : Type‹s_56›) (m_58 : A_57): A_57 -> U
where
| refl_4 : (eq_3‹??_1› ?_1 m_58 m_58)

#[program]
inductive exists_4‹s_60,r_61,t_62› (A_63 : Type‹s_60›) (B_64 : 
A_63 -> Type‹r_61›): Type‹t_62› where
| ex_5
    (m_66 : A_63) {pf_67 : ((B_64) m_66)}
    : (exists_4‹??_2,??_3,??_4› ?_2 B_64)

#[program]
inductive sing_5‹s_68› (A_69 : Type‹s_68›): A_69 -> Type‹s_68›
where
| just_6 (m_71 : A_69) : (sing_5‹??_5› ?_3 m_71)

#[program]
inductive prod_6‹s_72,r_73,t_74› (A_75 : Type‹s_72›) (B_76 : Type‹r_73›):
  Type‹t_74›
where
| pair_7 (m_77 : A_75) (n_78 : B_76) : (prod_6‹??_6,??_7,??_8› A_75 B_76)

#[program]
def sing_double_1‹s_79› :
  ∀ {A_80 : Type‹s_79›} ->
    ∀ {m_81 : A_80} ->
      ∀ (__82 : (sing_5‹??_18› ?_11 m_81)) -o
        (sing_5‹??_19› ?_12 m_81) -o
          (prod_6‹??_20,??_21,L› A_80 A_80)
:=
  function sing_double_84 :
    ∀ {A_85 : Type‹s_79›} ->
      ∀ {m_86 : A_85} ->
        ∀ (__87 : (sing_5‹??_9› ?_4 m_86)) -o
          (sing_5‹??_10› ?_5 m_86) -o
            (prod_6‹??_11,??_12,L› A_85 A_85)
  | A_89 m_90 (just_6 x_91) (just_6 y_92) =>
    let {pf_93} := (refl_4‹??_13› : (eq_3‹??_14› ?_8 x_91 y_92)) in
    (pair_7‹??_15,??_16,??_17› x_91 y_92)

-----------------------------------------

inductive-------------------------
infer_tm(unit_1)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(nat_2)
infer_tm(nat_2)
infer_tm(nat_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_96›)
infer_tm(A_97)
infer_tm(A_97)
infer_tm(Type‹s_100›)
infer_tm(A_101)
assert_equal1( A_101, ?_1)
assert_equal1( m_102, m_102)
infer_tm((eq_3‹??_1› ?_1 m_102 m_102))
check_tm( ?_1, Type‹??_1›)
check_tm( m_102, ?_1)
infer_tm(m_102)
assert_equal1( ?_1, A_101)
check_tm( m_102, ?_1)
infer_tm(m_102)
assert_equal1( ?_1, A_101)
simpl_tm ~expand:false( ?_1, A_101)
simpl_tm ~expand:false( A_101, A_101)
simpl_tm ~expand:false( A_101, A_101)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_103
    
  |}
  imeta_meta {|
    ?_1 <= A_106
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_100›)
check_tm( A_101, Type‹s_100›)
infer_tm(A_101)
assert_equal1( Type‹s_100›, Type‹s_100›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_118›)
infer_tm(A_121 -> Type‹r_119›)
infer_tm(A_121)
infer_tm(Type‹r_119›)
infer_tm(Type‹s_125›)
infer_tm(A_128 -> Type‹r_126›)
infer_tm(A_128)
infer_tm(Type‹r_126›)
infer_tm(A_128)
infer_tm(((B_129) m_132))
infer_tm(B_129)
check_tm( m_132, A_128)
infer_tm(m_132)
assert_equal1( A_128, A_128)
assert_equal1( A_128, ?_2)
assert_equal1( B_129, B_129)
infer_tm((exists_4‹??_2,??_3,??_4› ?_2 B_129))
check_tm( ?_2, Type‹??_2›)
check_tm( B_129, ?_2 -> Type‹??_3›)
infer_tm(B_129)
assert_equal1( ?_2 -> Type‹??_3›, A_128 -> Type‹r_126›)
simpl_tm ~expand:false( ?_2 -> Type‹??_3›, A_128 -> Type‹r_126›)
simpl_tm ~expand:false( ?_2, A_128)
simpl_tm ~expand:false( Type‹??_3›, Type‹r_126›)
simpl_tm ~expand:false( A_128, A_128)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_143
    ??_2 <= s_146
    ??_3 <= r_148
    ??_4 <= t_150
    
  |}
  imeta_meta {|
    ?_1 <= A_155
    ?_2 <= A_162
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_125›)
check_tm( A_128, Type‹s_125›)
infer_tm(A_128)
assert_equal1( Type‹s_125›, Type‹s_125›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_195›)
infer_tm(A_196)
infer_tm(Type‹s_198›)
infer_tm(A_199)
assert_equal1( A_199, ?_3)
infer_tm((sing_5‹??_5› ?_3 m_200))
check_tm( ?_3, Type‹??_5›)
check_tm( m_200, ?_3)
infer_tm(m_200)
assert_equal1( ?_3, A_199)
simpl_tm ~expand:false( ?_3, A_199)
simpl_tm ~expand:false( A_199, A_199)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_201
    ??_2 <= s_204
    ??_3 <= r_206
    ??_4 <= t_208
    ??_5 <= s_211
    
  |}
  imeta_meta {|
    ?_1 <= A_214
    ?_2 <= A_221
    ?_3 <= A_224
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_198›)
check_tm( A_199, Type‹s_198›)
infer_tm(A_199)
assert_equal1( Type‹s_198›, Type‹s_198›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_237›)
infer_tm(Type‹r_238›)
infer_tm(Type‹s_242›)
infer_tm(Type‹r_243›)
infer_tm(A_245)
infer_tm(B_246)
assert_equal1( A_245, A_245)
assert_equal1( B_246, B_246)
infer_tm((prod_6‹??_6,??_7,??_8› A_245 B_246))
check_tm( A_245, Type‹??_6›)
infer_tm(A_245)
assert_equal1( Type‹??_6›, Type‹s_242›)
check_tm( B_246, Type‹??_7›)
infer_tm(B_246)
assert_equal1( Type‹??_7›, Type‹r_243›)
simpl_tm ~expand:false( Type‹??_7›, Type‹r_243›)
simpl_tm ~expand:false( Type‹??_6›, Type‹s_242›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_249
    ??_2 <= s_252
    ??_3 <= r_254
    ??_4 <= t_256
    ??_5 <= s_259
    ??_6 <= s_262
    ??_7 <= r_264
    ??_8 <= t_266
    
  |}
  imeta_meta {|
    ?_1 <= A_271
    ?_2 <= A_278
    ?_3 <= A_281
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(∀ {A_308 : Type‹s_307›} ->
           ∀ {m_309 : A_308} ->
             ∀ (__310 : (sing_5‹??_18› ?_11 m_309)) -o
               (sing_5‹??_19› ?_12 m_309) -o
                 (prod_6‹??_20,??_21,L› A_308 A_308))
infer_tm(Type‹s_307›)
infer_tm(∀ {m_313 : A_312} ->
           ∀ (__314 : (sing_5‹??_18› ?_11 m_313)) -o
             (sing_5‹??_19› ?_12 m_313) -o
               (prod_6‹??_20,??_21,L› A_312 A_312))
infer_tm(A_312)
infer_tm(∀ (__317 : (sing_5‹??_18› ?_11 m_316)) -o
           (sing_5‹??_19› ?_12 m_316) -o
             (prod_6‹??_20,??_21,L› A_312 A_312))
infer_tm((sing_5‹??_18› ?_11 m_316))
check_tm( ?_11, Type‹??_18›)
check_tm( m_316, ?_11)
infer_tm(m_316)
assert_equal1( ?_11, A_312)
simpl_tm ~expand:false( ?_11, A_312)
infer_tm((sing_5‹??_19› ?_12 m_316) -o
           (prod_6‹??_20,??_21,L› A_312 A_312))
infer_tm((sing_5‹??_19› ?_12 m_316))
check_tm( ?_12, Type‹??_19›)
check_tm( m_316, ?_12)
infer_tm(m_316)
assert_equal1( ?_12, A_312)
simpl_tm ~expand:false( ?_12, A_312)
infer_tm((prod_6‹??_20,??_21,L› A_312 A_312))
check_tm( A_312, Type‹??_20›)
infer_tm(A_312)
assert_equal1( Type‹??_20›, Type‹s_307›)
check_tm( A_312, Type‹??_21›)
infer_tm(A_312)
assert_equal1( Type‹??_21›, Type‹s_307›)
simpl_tm ~expand:false( Type‹??_21›, Type‹s_307›)
simpl_tm ~expand:false( Type‹??_20›, Type‹s_307›)
check_tm(
  function sing_double_322 :
    ∀ {A_323 : Type‹s_307›} ->
      ∀ {m_324 : A_323} ->
        ∀ (__325 : (sing_5‹??_9› ?_4 m_324)) -o
          (sing_5‹??_10› ?_5 m_324) -o
            (prod_6‹??_11,??_12,L› A_323 A_323)
  | A_327 m_328 (just_6 x_329) (just_6 y_330) =>
    let {pf_331} := (refl_4‹??_13› : (eq_3‹??_14› ?_8 x_329 y_330))
    in (pair_7‹??_15,??_16,??_17› x_329 y_330),
  ∀ {A_332 : Type‹s_307›} ->
    ∀ {m_333 : A_332} ->
      ∀ (__334 : (sing_5‹??_18› ?_11 m_333)) -o
        (sing_5‹??_19› ?_12 m_333) -o
          (prod_6‹??_20,??_21,L› A_332 A_332))
infer_tm(∀ {A_337 : Type‹s_307›} ->
           ∀ {m_338 : A_337} ->
             ∀ (__339 : (sing_5‹??_9› ?_4 m_338)) -o
               (sing_5‹??_10› ?_5 m_338) -o
                 (prod_6‹??_11,??_12,L› A_337 A_337))
infer_tm(Type‹s_307›)
infer_tm(∀ {m_342 : A_341} ->
           ∀ (__343 : (sing_5‹??_9› ?_4 m_342)) -o
             (sing_5‹??_10› ?_5 m_342) -o
               (prod_6‹??_11,??_12,L› A_341 A_341))
infer_tm(A_341)
infer_tm(∀ (__346 : (sing_5‹??_9› ?_4 m_345)) -o
           (sing_5‹??_10› ?_5 m_345) -o
             (prod_6‹??_11,??_12,L› A_341 A_341))
infer_tm((sing_5‹??_9› ?_4 m_345))
check_tm( ?_4, Type‹??_9›)
check_tm( m_345, ?_4)
infer_tm(m_345)
assert_equal1( ?_4, A_341)
simpl_tm ~expand:false( ?_4, A_341)
infer_tm((sing_5‹??_10› ?_5 m_345) -o
           (prod_6‹??_11,??_12,L› A_341 A_341))
infer_tm((sing_5‹??_10› ?_5 m_345))
check_tm( ?_5, Type‹??_10›)
check_tm( m_345, ?_5)
infer_tm(m_345)
assert_equal1( ?_5, A_341)
simpl_tm ~expand:false( ?_5, A_341)
infer_tm((prod_6‹??_11,??_12,L› A_341 A_341))
check_tm( A_341, Type‹??_11›)
infer_tm(A_341)
assert_equal1( Type‹??_11›, Type‹s_307›)
check_tm( A_341, Type‹??_12›)
infer_tm(A_341)
assert_equal1( Type‹??_12›, Type‹s_307›)
simpl_tm ~expand:false( Type‹??_12›, Type‹s_307›)
simpl_tm ~expand:false( Type‹??_11›, Type‹s_307›)
assert_equal1(
  ∀ {A_351 : Type‹s_307›} ->
    ∀ {m_352 : A_351} ->
      ∀ (__353 : (sing_5‹??_18› ?_11 m_352)) -o
        (sing_5‹??_19› ?_12 m_352) -o
          (prod_6‹??_20,??_21,L› A_351 A_351),
  ∀ {A_355 : Type‹s_307›} ->
    ∀ {m_356 : A_355} ->
      ∀ (__357 : (sing_5‹??_9› ?_4 m_356)) -o
        (sing_5‹??_10› ?_5 m_356) -o
          (prod_6‹??_11,??_12,L› A_355 A_355))
simpl_tm ~expand:false(
  ∀ {A_393 : Type‹s_307›} ->
    ∀ {m_394 : A_393} ->
      (sing_5‹??_18› A_393 m_394) -o
        (sing_5‹??_19› A_393 m_394) -o
          (prod_6‹s_307,s_307,L› A_393 A_393),
  ∀ {A_397 : Type‹s_307›} ->
    ∀ {m_398 : A_397} ->
      (sing_5‹??_9› A_397 m_398) -o
        (sing_5‹??_10› A_397 m_398) -o
          (prod_6‹s_307,s_307,L› A_397 A_397))
simpl_tm ~expand:false( Type‹s_307›, Type‹s_307›)
simpl_tm ~expand:false(
  ∀ {m_402 : A_401} ->
    (sing_5‹??_18› A_401 m_402) -o
      (sing_5‹??_19› A_401 m_402) -o
        (prod_6‹s_307,s_307,L› A_401 A_401),
  ∀ {m_405 : A_401} ->
    (sing_5‹??_9› A_401 m_405) -o
      (sing_5‹??_10› A_401 m_405) -o
        (prod_6‹s_307,s_307,L› A_401 A_401))
simpl_tm ~expand:false( A_401, A_401)
simpl_tm ~expand:false(
  (sing_5‹??_18› A_401 m_408) -o
    (sing_5‹??_19› A_401 m_408) -o
      (prod_6‹s_307,s_307,L› A_401 A_401),
  (sing_5‹??_9› A_401 m_408) -o
    (sing_5‹??_10› A_401 m_408) -o
      (prod_6‹s_307,s_307,L› A_401 A_401))
simpl_tm ~expand:false( (sing_5‹??_18› A_401 m_408),
  (sing_5‹??_9› A_401 m_408))
simpl_tm ~expand:false( A_401, A_401)
simpl_tm ~expand:false( m_408, m_408)
simpl_tm ~expand:false(
  (sing_5‹??_19› A_401 m_408) -o (prod_6‹s_307,s_307,L› A_401 A_401),
  (sing_5‹??_10› A_401 m_408) -o (prod_6‹s_307,s_307,L› A_401 A_401))
simpl_tm ~expand:false( (sing_5‹??_19› A_401 m_408),
  (sing_5‹??_10› A_401 m_408))
simpl_tm ~expand:false( A_401, A_401)
simpl_tm ~expand:false( m_408, m_408)
simpl_tm ~expand:false( (prod_6‹s_307,s_307,L› A_401 A_401),
  (prod_6‹s_307,s_307,L› A_401 A_401))
simpl_tm ~expand:false( A_401, A_401)
simpl_tm ~expand:false( A_401, A_401)
check_cls {|
  prblm {| ;
    {|  ::: [A_369, m_370, (just_6 x_371), (just_6 y_372)] =>?
         let {pf_427} :=
           (refl_4‹??_13› : (eq_3‹??_14› ?_8 #x_371 #y_372))
         in (pair_7‹??_15,??_16,??_17› #x_371 #y_372)
    |}
  |}
|}
case_intro
case_intro
case_intro
case_intro
case_splitting
splitting_on(just_6)
case_splitting
splitting_on(just_6)
case_coverage{|
  prblm {|
    eq_term?( (sing_5‹??_10› #A_428 #m_429),
      (sing_5‹??_10› #A_428 #m_443))
    eq_term?( (sing_5‹??_9› #A_428 #m_429),
      (sing_5‹??_9› #A_428 #m_432));
    {| eq_pat?( #A_428, A_369 : Type‹s_307›)
       eq_pat?( #m_429, m_370 : #A_428)
       eq_pat?( #m_432, x_371 : #A_428)
       eq_pat?( #m_443, y_372 : #A_428) ::: [] =>?
         let {pf_454} :=
           (refl_4‹??_13› : (eq_3‹??_14› ?_8 #x_371 #y_372))
         in (pair_7‹??_15,??_16,??_17› #x_371 #y_372)
    |}
  |}
|}
unify_local(
  eq_pat?( #A_428, A_369 : Type‹s_307›)
  eq_pat?( #m_429, m_370 : #A_428)
  eq_pat?( #m_432, x_371 : #A_428)
  eq_pat?( #m_443, y_372 : #A_428)
)
unify_global(
  eq_term?( (sing_5‹??_10› #A_428 #m_429),
    (sing_5‹??_10› #A_428 #m_443))
  eq_term?( (sing_5‹??_9› #A_428 #m_429),
    (sing_5‹??_9› #A_428 #m_432))
)
simpl_pprbm ~expand:false( #A_428, #A_369)
simpl_pprbm ~expand:false( #m_429, #m_370)
simpl_pprbm ~expand:false( #m_432, #x_371)
simpl_pprbm ~expand:false( #m_443, #y_372)
simpl_pprbm ~expand:false( (sing_5‹??_10› #A_428 #m_429),
  (sing_5‹??_10› #A_428 #m_443))
simpl_pprbm ~expand:false( #A_428, #A_428)
simpl_pprbm ~expand:false( #m_429, #m_443)
simpl_pprbm ~expand:false( (sing_5‹??_9› #A_428 #m_443),
  (sing_5‹??_9› #A_428 #m_432))
simpl_pprbm ~expand:false( #A_428, #A_428)
simpl_pprbm ~expand:false( #m_443, #m_432)
case_coverage_ok(
  let {pf_466} := (refl_4‹??_13› : (eq_3‹??_14› ?_8 m_432 m_443)) in
  (pair_7‹??_15,??_16,??_17› m_432 m_443),
  (prod_6‹s_307,s_307,L› A_428 A_428))
check_tm(
  let {pf_467} := (refl_4‹??_13› : (eq_3‹??_14› ?_8 m_432 m_443)) in
  (pair_7‹??_15,??_16,??_17› m_432 m_443),
  (prod_6‹s_307,s_307,L› A_428 A_428))
infer_tm(let {pf_468} :=
           (refl_4‹??_13› : (eq_3‹??_14› ?_8 m_432 m_443))
         in (pair_7‹??_15,??_16,??_17› m_432 m_443))
infer_tm((refl_4‹??_13› : (eq_3‹??_14› ?_8 m_432 m_443)))
infer_tm((eq_3‹??_14› ?_8 m_432 m_443))
check_tm( ?_8, Type‹??_14›)
check_tm( m_432, ?_8)
infer_tm(m_432)
assert_equal1( ?_8, A_428)
check_tm( m_443, ?_8)
infer_tm(m_443)
assert_equal1( ?_8, A_428)
simpl_tm ~expand:false( ?_8, A_428)
simpl_tm ~expand:false( A_428, A_428)
check_tm( refl_4‹??_13›, (eq_3‹??_14› ?_8 m_432 m_443))
infer_tm(refl_4‹??_13›)
check_tm( ?_6, Type‹??_13›)
check_tm( ?_7, ?_6)
assert_equal1( (eq_3‹??_14› ?_8 m_432 m_443),
  (eq_3‹??_13› ?_6 ?_7 ?_7))
infer_tm((pair_7‹??_15,??_16,??_17› m_432 m_443))
check_tm( ?_9, Type‹??_15›)
check_tm( ?_10, Type‹??_16›)
check_tm( m_432, ?_9)
infer_tm(m_432)
assert_equal1( ?_9, A_428)
check_tm( m_443, ?_10)
infer_tm(m_443)
assert_equal1( ?_10, A_428)
assert_equal1( (prod_6‹s_307,s_307,L› A_428 A_428),
  (prod_6‹??_15,??_16,??_17› ?_9 ?_10))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_470
    ??_2 <= s_473
    ??_3 <= r_475
    ??_4 <= t_477
    ??_5 <= s_480
    ??_6 <= s_483
    ??_7 <= r_485
    ??_8 <= t_487
    ??_11 <= s_490
    ??_12 <= s_491
    ??_18 <= ??_9
    ??_19 <= ??_10
    ??_20 <= s_494
    ??_21 <= s_495
    
  |}
  imeta_meta {|
    ?_1 <= A_498
    ?_2 <= A_505
    ?_3 <= A_508
    ?_4 <= A_511
    ?_5 <= A_515
    ?_8 <= A_520
    ?_11 <= A_524
    ?_12 <= A_528
    
  |}
  eqns {|
    equal_tm? ((prod_6‹s_307,s_307,L› A_428 A_428),
      (prod_6‹??_15,??_16,??_17› ?_9 ?_10));
    equal_tm? (?_10, A_428);
    equal_tm? (?_9, A_428);
    equal_tm? ((eq_3‹??_14› ?_8 m_432 m_443),
      (eq_3‹??_13› ?_6 ?_7 ?_7))
  |}
end_dump
simpl_tm ~expand:false( (prod_6‹s_307,s_307,L› A_428 A_428),
  (prod_6‹??_15,??_16,??_17› ?_9 ?_10))
simpl_tm ~expand:false( A_428, ?_9)
simpl_tm ~expand:false( A_428, ?_10)
simpl_tm ~expand:false( A_428, ?_9)
simpl_tm ~expand:false( A_428, ?_10)
simpl_tm ~expand:false( A_428, A_428)
simpl_tm ~expand:false( A_428, A_428)
simpl_tm ~expand:false( (eq_3‹??_14› A_428 m_432 m_443),
  (eq_3‹??_13› ?_6 ?_7 ?_7))
simpl_tm ~expand:false( A_428, ?_6)
simpl_tm ~expand:false( m_432, ?_7)
simpl_tm ~expand:false( m_443, ?_7)
simpl_tm ~expand:false( A_428, ?_6)
simpl_tm ~expand:false( m_432, ?_7)
simpl_tm ~expand:false( m_443, m_432)
simpl_tm ~expand:true( m_443, m_443)
infer_tm(Type‹??_9›)
check_tm( A_341, Type‹??_9›)
infer_tm(A_341)
assert_equal1( Type‹??_9›, Type‹s_307›)
simpl_tm ~expand:false( Type‹??_9›, Type‹s_307›)
infer_tm(Type‹??_10›)
check_tm( A_341, Type‹??_10›)
infer_tm(A_341)
assert_equal1( Type‹??_10›, Type‹s_307›)
simpl_tm ~expand:false( Type‹??_10›, Type‹s_307›)
infer_tm(Type‹??_13›)
check_tm( A_428, Type‹??_13›)
infer_tm(A_428)
assert_equal1( Type‹??_13›, Type‹s_307›)
simpl_tm ~expand:false( Type‹??_13›, Type‹s_307›)
infer_tm(A_428)
check_tm( m_432, A_428)
infer_tm(m_432)
assert_equal1( A_428, A_428)
infer_tm(Type‹s_307›)
check_tm( A_428, Type‹s_307›)
infer_tm(A_428)
assert_equal1( Type‹s_307›, Type‹s_307›)
infer_tm(Type‹s_307›)
check_tm( A_428, Type‹s_307›)
infer_tm(A_428)
assert_equal1( Type‹s_307›, Type‹s_307›)
infer_tm(Type‹s_307›)
check_tm( A_428, Type‹s_307›)
infer_tm(A_428)
assert_equal1( Type‹s_307›, Type‹s_307›)
infer_tm(Type‹s_307›)
check_tm( A_312, Type‹s_307›)
infer_tm(A_312)
assert_equal1( Type‹s_307›, Type‹s_307›)
infer_tm(Type‹s_307›)
check_tm( A_312, Type‹s_307›)
infer_tm(A_312)
assert_equal1( Type‹s_307›, Type‹s_307›)
----------------------------------

smeta_meta {|
  ??_1 <= s_620
  ??_2 <= s_623
  ??_3 <= r_625
  ??_4 <= t_627
  ??_5 <= s_630
  ??_6 <= s_633
  ??_7 <= r_635
  ??_8 <= t_637
  ??_9 <= s_640
  ??_10 <= s_641
  ??_11 <= s_642
  ??_12 <= s_643
  ??_13 <= s_644
  ??_14 <= ??_13
  ??_15 <= s_646
  ??_16 <= s_647
  ??_17 <= L
  ??_18 <= ??_9
  ??_19 <= ??_10
  ??_20 <= s_651
  ??_21 <= s_652
  
|}
imeta_meta {|
  ?_1 <= A_655
  ?_2 <= A_662
  ?_3 <= A_665
  ?_4 <= A_668
  ?_5 <= A_672
  ?_6 <= A_677
  ?_7 <= m_681
  ?_8 <= A_689
  ?_9 <= A_696
  ?_10 <= A_703
  ?_11 <= A_707
  ?_12 <= A_711
  
|}
#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive nat_2‹› : U where
| zero_2 : nat_2
| succ_3 (pred_834 : nat_2) : nat_2

#[logical]
inductive eq_3‹s_835› (A_836 : Type‹s_835›) (m_837 : A_836):
  A_836 -> U
where
| refl_4 : (eq_3‹s_835› A_836 m_837 m_837)

#[program]
inductive exists_4‹s_839,r_840,t_841› (A_842 : Type‹s_839›) (B_843 : 
A_842 -> Type‹r_840›): Type‹t_841› where
| ex_5
    (m_845 : A_842) {pf_846 : ((B_843) m_845)}
    : (exists_4‹s_839,r_840,t_841› A_842 B_843)

#[program]
inductive sing_5‹s_847› (A_848 : Type‹s_847›):
  A_848 -> Type‹s_847›
where
| just_6 (m_850 : A_848) : (sing_5‹s_847› A_848 m_850)

#[program]
inductive prod_6‹s_851,r_852,t_853› (A_854 : Type‹s_851›) (B_855 : Type‹r_852›):
  Type‹t_853›
where
| pair_7
    (m_856 : A_854) (n_857 : B_855)
    : (prod_6‹s_851,r_852,t_853› A_854 B_855)

#[program]
def sing_double_1‹s_858› :
  ∀ {A_859 : Type‹s_858›} ->
    ∀ {m_860 : A_859} ->
      (sing_5‹s_858› A_859 m_860) -o
        (sing_5‹s_858› A_859 m_860) -o
          (prod_6‹s_858,s_858,L› A_859 A_859)
:=
  function sing_double_863 :
    ∀ {A_864 : Type‹s_858›} ->
      ∀ {m_865 : A_864} ->
        (sing_5‹s_858› A_864 m_865) -o
          (sing_5‹s_858› A_864 m_865) -o
            (prod_6‹s_858,s_858,L› A_864 A_864)
  | A_868 m_869 (just_6 x_870) (just_6 y_871) =>
    let {pf_872} := (refl_4‹s_858› : (eq_3‹s_858› A_868 x_870 y_871))
    in (pair_7‹s_858,s_858,L› x_870 y_871)

-----------------------------------------

Logical.infer_tm(unit_1)
Logical.infer_tm(nat_2)
Logical.infer_tm(nat_2)
Logical.infer_tm(nat_2)
Logical.infer_tm(L)
Logical.infer_tm(A_874)
Logical.infer_tm(A_874)
Logical.infer_tm(L)
Logical.infer_tm(A_877)
Logical.infer_tm((eq_3‹L› A_877 m_878 m_878))
Logical.check_tm( A_877, L )
Logical.infer_tm(A_877)
Logical.check_tm( m_878, A_877 )
Logical.infer_tm(m_878)
Logical.check_tm( m_878, A_877 )
Logical.infer_tm(m_878)
Logical.infer_tm(U)
Logical.infer_tm(A_879)
Logical.infer_tm(A_879)
Logical.infer_tm(U)
Logical.infer_tm(A_882)
Logical.infer_tm((eq_3‹U› A_882 m_883 m_883))
Logical.check_tm( A_882, U )
Logical.infer_tm(A_882)
Logical.check_tm( m_883, A_882 )
Logical.infer_tm(m_883)
Logical.check_tm( m_883, A_882 )
Logical.infer_tm(m_883)
Logical.infer_tm(L)
Logical.infer_tm(A_884 -> L)
Logical.infer_tm(A_884)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_888 -> L)
Logical.infer_tm(A_888)
Logical.infer_tm(L)
Logical.infer_tm(A_888)
Logical.infer_tm(((B_889) m_892))
Logical.infer_tm(B_889)
Logical.check_tm( m_892, A_888 )
Logical.infer_tm(m_892)
Logical.infer_tm((exists_4‹L,L,L› A_888 B_889))
Logical.check_tm( A_888, L )
Logical.infer_tm(A_888)
Logical.check_tm( B_889, A_888 -> L )
Logical.infer_tm(B_889)
Logical.infer_tm(L)
Logical.infer_tm(A_896 -> L)
Logical.infer_tm(A_896)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_900 -> L)
Logical.infer_tm(A_900)
Logical.infer_tm(L)
Logical.infer_tm(A_900)
Logical.infer_tm(((B_901) m_904))
Logical.infer_tm(B_901)
Logical.check_tm( m_904, A_900 )
Logical.infer_tm(m_904)
Logical.infer_tm((exists_4‹L,L,U› A_900 B_901))
Logical.check_tm( A_900, L )
Logical.infer_tm(A_900)
Logical.check_tm( B_901, A_900 -> L )
Logical.infer_tm(B_901)
  warning - pruned constructor exLLU_11 trans12.check_dconstrs
Logical.infer_tm(L)
Logical.infer_tm(A_908 -> U)
Logical.infer_tm(A_908)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(A_912 -> U)
Logical.infer_tm(A_912)
Logical.infer_tm(U)
Logical.infer_tm(A_912)
Logical.infer_tm(((B_913) m_916))
Logical.infer_tm(B_913)
Logical.check_tm( m_916, A_912 )
Logical.infer_tm(m_916)
Logical.infer_tm((exists_4‹L,U,L› A_912 B_913))
Logical.check_tm( A_912, L )
Logical.infer_tm(A_912)
Logical.check_tm( B_913, A_912 -> U )
Logical.infer_tm(B_913)
Logical.infer_tm(L)
Logical.infer_tm(A_920 -> U)
Logical.infer_tm(A_920)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(A_924 -> U)
Logical.infer_tm(A_924)
Logical.infer_tm(U)
Logical.infer_tm(A_924)
Logical.infer_tm(((B_925) m_928))
Logical.infer_tm(B_925)
Logical.check_tm( m_928, A_924 )
Logical.infer_tm(m_928)
Logical.infer_tm((exists_4‹L,U,U› A_924 B_925))
Logical.check_tm( A_924, L )
Logical.infer_tm(A_924)
Logical.check_tm( B_925, A_924 -> U )
Logical.infer_tm(B_925)
  warning - pruned constructor exLUU_13 trans12.check_dconstrs
Logical.infer_tm(U)
Logical.infer_tm(A_932 -> L)
Logical.infer_tm(A_932)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(A_936 -> L)
Logical.infer_tm(A_936)
Logical.infer_tm(L)
Logical.infer_tm(A_936)
Logical.infer_tm(((B_937) m_940))
Logical.infer_tm(B_937)
Logical.check_tm( m_940, A_936 )
Logical.infer_tm(m_940)
Logical.infer_tm((exists_4‹U,L,L› A_936 B_937))
Logical.check_tm( A_936, U )
Logical.infer_tm(A_936)
Logical.check_tm( B_937, A_936 -> L )
Logical.infer_tm(B_937)
Logical.infer_tm(U)
Logical.infer_tm(A_944 -> L)
Logical.infer_tm(A_944)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(A_948 -> L)
Logical.infer_tm(A_948)
Logical.infer_tm(L)
Logical.infer_tm(A_948)
Logical.infer_tm(((B_949) m_952))
Logical.infer_tm(B_949)
Logical.check_tm( m_952, A_948 )
Logical.infer_tm(m_952)
Logical.infer_tm((exists_4‹U,L,U› A_948 B_949))
Logical.check_tm( A_948, U )
Logical.infer_tm(A_948)
Logical.check_tm( B_949, A_948 -> L )
Logical.infer_tm(B_949)
Logical.infer_tm(U)
Logical.infer_tm(A_956 -> U)
Logical.infer_tm(A_956)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_960 -> U)
Logical.infer_tm(A_960)
Logical.infer_tm(U)
Logical.infer_tm(A_960)
Logical.infer_tm(((B_961) m_964))
Logical.infer_tm(B_961)
Logical.check_tm( m_964, A_960 )
Logical.infer_tm(m_964)
Logical.infer_tm((exists_4‹U,U,L› A_960 B_961))
Logical.check_tm( A_960, U )
Logical.infer_tm(A_960)
Logical.check_tm( B_961, A_960 -> U )
Logical.infer_tm(B_961)
Logical.infer_tm(U)
Logical.infer_tm(A_968 -> U)
Logical.infer_tm(A_968)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_972 -> U)
Logical.infer_tm(A_972)
Logical.infer_tm(U)
Logical.infer_tm(A_972)
Logical.infer_tm(((B_973) m_976))
Logical.infer_tm(B_973)
Logical.check_tm( m_976, A_972 )
Logical.infer_tm(m_976)
Logical.infer_tm((exists_4‹U,U,U› A_972 B_973))
Logical.check_tm( A_972, U )
Logical.infer_tm(A_972)
Logical.check_tm( B_973, A_972 -> U )
Logical.infer_tm(B_973)
Logical.infer_tm(L)
Logical.infer_tm(A_980)
Logical.infer_tm(L)
Logical.infer_tm(A_982)
Logical.infer_tm((sing_5‹L› A_982 m_983))
Logical.check_tm( A_982, L )
Logical.infer_tm(A_982)
Logical.check_tm( m_983, A_982 )
Logical.infer_tm(m_983)
Logical.infer_tm(U)
Logical.infer_tm(A_984)
Logical.infer_tm(U)
Logical.infer_tm(A_986)
Logical.infer_tm((sing_5‹U› A_986 m_987))
Logical.check_tm( A_986, U )
Logical.infer_tm(A_986)
Logical.check_tm( m_987, A_986 )
Logical.infer_tm(m_987)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_990)
Logical.infer_tm(B_991)
Logical.infer_tm((prod_6‹L,L,L› A_990 B_991))
Logical.check_tm( A_990, L )
Logical.infer_tm(A_990)
Logical.check_tm( B_991, L )
Logical.infer_tm(B_991)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(L)
Logical.infer_tm(A_996)
Logical.infer_tm(B_997)
Logical.infer_tm((prod_6‹L,L,U› A_996 B_997))
Logical.check_tm( A_996, L )
Logical.infer_tm(A_996)
Logical.check_tm( B_997, L )
Logical.infer_tm(B_997)
  warning - pruned constructor pairLLU_21 trans12.check_dconstrs
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(A_1002)
Logical.infer_tm(B_1003)
Logical.infer_tm((prod_6‹L,U,L› A_1002 B_1003))
Logical.check_tm( A_1002, L )
Logical.infer_tm(A_1002)
Logical.check_tm( B_1003, U )
Logical.infer_tm(B_1003)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(A_1008)
Logical.infer_tm(B_1009)
Logical.infer_tm((prod_6‹L,U,U› A_1008 B_1009))
Logical.check_tm( A_1008, L )
Logical.infer_tm(A_1008)
Logical.check_tm( B_1009, U )
Logical.infer_tm(B_1009)
  warning - pruned constructor pairLUU_23 trans12.check_dconstrs
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(A_1014)
Logical.infer_tm(B_1015)
Logical.infer_tm((prod_6‹U,L,L› A_1014 B_1015))
Logical.check_tm( A_1014, U )
Logical.infer_tm(A_1014)
Logical.check_tm( B_1015, L )
Logical.infer_tm(B_1015)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(U)
Logical.infer_tm(L)
Logical.infer_tm(A_1020)
Logical.infer_tm(B_1021)
Logical.infer_tm((prod_6‹U,L,U› A_1020 B_1021))
Logical.check_tm( A_1020, U )
Logical.infer_tm(A_1020)
Logical.check_tm( B_1021, L )
Logical.infer_tm(B_1021)
  warning - pruned constructor pairULU_25 trans12.check_dconstrs
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_1026)
Logical.infer_tm(B_1027)
Logical.infer_tm((prod_6‹U,U,L› A_1026 B_1027))
Logical.check_tm( A_1026, U )
Logical.infer_tm(A_1026)
Logical.check_tm( B_1027, U )
Logical.infer_tm(B_1027)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(U)
Logical.infer_tm(A_1032)
Logical.infer_tm(B_1033)
Logical.infer_tm((prod_6‹U,U,U› A_1032 B_1033))
Logical.check_tm( A_1032, U )
Logical.infer_tm(A_1032)
Logical.check_tm( B_1033, U )
Logical.infer_tm(B_1033)
Logical.infer_tm(∀ {A_1036 : L} ->
                   ∀ {m_1037 : A_1036} ->
                     (sing_5‹L› A_1036 m_1037) -o
                       (sing_5‹L› A_1036 m_1037) -o
                         (prod_6‹L,L,L› A_1036 A_1036))
Logical.infer_tm(L)
Logical.infer_tm(∀ {m_1041 : A_1040} ->
                   (sing_5‹L› A_1040 m_1041) -o
                     (sing_5‹L› A_1040 m_1041) -o
                       (prod_6‹L,L,L› A_1040 A_1040))
Logical.infer_tm(A_1040)
Logical.infer_tm((sing_5‹L› A_1040 m_1044) -o
                   (sing_5‹L› A_1040 m_1044) -o
                     (prod_6‹L,L,L› A_1040 A_1040))
Logical.infer_tm((sing_5‹L› A_1040 m_1044))
Logical.check_tm( A_1040, L )
Logical.infer_tm(A_1040)
Logical.check_tm( m_1044, A_1040 )
Logical.infer_tm(m_1044)
Logical.infer_tm((sing_5‹L› A_1040 m_1044) -o
                   (prod_6‹L,L,L› A_1040 A_1040))
Logical.infer_tm((sing_5‹L› A_1040 m_1044))
Logical.check_tm( A_1040, L )
Logical.infer_tm(A_1040)
Logical.check_tm( m_1044, A_1040 )
Logical.infer_tm(m_1044)
Logical.infer_tm((prod_6‹L,L,L› A_1040 A_1040))
Logical.check_tm( A_1040, L )
Logical.infer_tm(A_1040)
Logical.check_tm( A_1040, L )
Logical.infer_tm(A_1040)
Program.check_tm(
  function sing_double_1050 :
    ∀ {A_1051 : L} ->
      ∀ {m_1052 : A_1051} ->
        (sing_5‹L› A_1051 m_1052) -o
          (sing_5‹L› A_1051 m_1052) -o (prod_6‹L,L,L› A_1051 A_1051)
  | A_1055 m_1056 (just_6 x_1057) (just_6 y_1058) =>
    let {pf_1059} := (refl_4‹L› : (eq_3‹L› A_1055 x_1057 y_1058)) in
    (pair_7‹L,L,L› x_1057 y_1058),
  ∀ {A_1060 : L} ->
    ∀ {m_1061 : A_1060} ->
      (sing_5‹L› A_1060 m_1061) -o
        (sing_5‹L› A_1060 m_1061) -o (prod_6‹L,L,L› A_1060 A_1060)
)
Program.infer_tm(function sing_double_1064 :
                   ∀ {A_1065 : L} ->
                     ∀ {m_1066 : A_1065} ->
                       (sing_5‹L› A_1065 m_1066) -o
                         (sing_5‹L› A_1065 m_1066) -o
                           (prod_6‹L,L,L› A_1065 A_1065)
                 | A_1069 m_1070 (just_6 x_1071) (just_6 y_1072) =>
                   let {pf_1073} :=
                     (refl_4‹L› : (eq_3‹L› A_1069 x_1071 y_1072))
                   in (pair_7‹L,L,L› x_1071 y_1072))
Logical.infer_tm(∀ {A_1075 : L} ->
                   ∀ {m_1076 : A_1075} ->
                     (sing_5‹L› A_1075 m_1076) -o
                       (sing_5‹L› A_1075 m_1076) -o
                         (prod_6‹L,L,L› A_1075 A_1075))
Logical.infer_tm(L)
Logical.infer_tm(∀ {m_1080 : A_1079} ->
                   (sing_5‹L› A_1079 m_1080) -o
                     (sing_5‹L› A_1079 m_1080) -o
                       (prod_6‹L,L,L› A_1079 A_1079))
Logical.infer_tm(A_1079)
Logical.infer_tm((sing_5‹L› A_1079 m_1083) -o
                   (sing_5‹L› A_1079 m_1083) -o
                     (prod_6‹L,L,L› A_1079 A_1079))
Logical.infer_tm((sing_5‹L› A_1079 m_1083))
Logical.check_tm( A_1079, L )
Logical.infer_tm(A_1079)
Logical.check_tm( m_1083, A_1079 )
Logical.infer_tm(m_1083)
Logical.infer_tm((sing_5‹L› A_1079 m_1083) -o
                   (prod_6‹L,L,L› A_1079 A_1079))
Logical.infer_tm((sing_5‹L› A_1079 m_1083))
Logical.check_tm( A_1079, L )
Logical.infer_tm(A_1079)
Logical.check_tm( m_1083, A_1079 )
Logical.infer_tm(m_1083)
Logical.infer_tm((prod_6‹L,L,L› A_1079 A_1079))
Logical.check_tm( A_1079, L )
Logical.infer_tm(A_1079)
Logical.check_tm( A_1079, L )
Logical.infer_tm(A_1079)
trans12.Program.case_intro(L)
Logical.infer_tm(L)
trans12.Program.case_intro(#A_1093)
Logical.infer_tm(A_1093)
trans12.Program.case_intro((sing_5‹L› #A_1093 #m_1104))
Logical.infer_tm((sing_5‹L› A_1093 m_1104))
Logical.check_tm( A_1093, L )
Logical.infer_tm(A_1093)
Logical.check_tm( m_1104, A_1093 )
Logical.infer_tm(m_1104)
trans12.Program.case_intro((sing_5‹L› #A_1093 #m_1104))
Logical.infer_tm((sing_5‹L› A_1093 m_1104))
Logical.check_tm( A_1093, L )
Logical.infer_tm(A_1093)
Logical.check_tm( m_1104, A_1093 )
Logical.infer_tm(m_1104)
Logical.infer_tm((sing_5‹L› A_1093 m_1104))
Logical.check_tm( A_1093, L )
Logical.infer_tm(A_1093)
Logical.check_tm( m_1104, A_1093 )
Logical.infer_tm(m_1104)
Logical.infer_tm(A_1093)
Logical.infer_tm((sing_5‹L› A_1093 m_1104))
Logical.check_tm( A_1093, L )
Logical.infer_tm(A_1093)
Logical.check_tm( m_1104, A_1093 )
Logical.infer_tm(m_1104)
Logical.infer_tm(A_1093)
case_coverage{|
  prblm {|
    eq_term?( (sing_5‹L› #A_1093 #m_1104),
      (sing_5‹L› #A_1093 #m_1178))
    eq_term?( (sing_5‹L› #A_1093 #m_1104),
      (sing_5‹L› #A_1093 #m_1147));
    {| eq_pat?(N #A_1093, A_1089 : L)
       eq_pat?(N #m_1104, m_1090 : #A_1093)
       eq_pat?(R #m_1147, x_1091 : #A_1093)
       eq_pat?(R #m_1178, y_1092 : #A_1093) ::: [] =>?
         let {pf_1199} :=
           (refl_4‹L› : (eq_3‹L› #A_1089 #x_1091 #y_1092))
         in (pair_7‹L,L,L› #x_1091 #y_1092)
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_1093, A_1089 : L)
  eq_pat?(N #m_1104, m_1090 : #A_1093)
  eq_pat?(R #m_1147, x_1091 : #A_1093)
  eq_pat?(R #m_1178, y_1092 : #A_1093)
)
unify_global(
  eq_term?( (sing_5‹L› #A_1093 #m_1104), (sing_5‹L› #A_1093 #m_1178))
  eq_term?( (sing_5‹L› #A_1093 #m_1104), (sing_5‹L› #A_1093 #m_1147))
)
simpl_pprbm ~expand:false( #A_1093, #A_1089)
simpl_pprbm ~expand:false( #m_1104, #m_1090)
simpl_pprbm ~expand:false( #m_1147, #x_1091)
simpl_pprbm ~expand:false( #m_1178, #y_1092)
simpl_pprbm ~expand:false( (sing_5‹L› #A_1093 #m_1104),
  (sing_5‹L› #A_1093 #m_1178))
simpl_pprbm ~expand:false( #A_1093, #A_1093)
simpl_pprbm ~expand:false( #m_1104, #m_1178)
simpl_pprbm ~expand:false( (sing_5‹L› #A_1093 #m_1178),
  (sing_5‹L› #A_1093 #m_1147))
simpl_pprbm ~expand:false( #A_1093, #A_1093)
simpl_pprbm ~expand:false( #m_1178, #m_1147)
case_coverage_ok(
  let {pf_1211} := (refl_4‹L› : (eq_3‹L› A_1093 m_1147 m_1178)) in
  (pair_7‹L,L,L› m_1147 m_1178), (prod_6‹L,L,L› A_1093 A_1093))
Program.check_tm(
  let {pf_1212} := (refl_4‹L› : (eq_3‹L› A_1093 m_1147 m_1178)) in
  (pair_7‹L,L,L› m_1147 m_1178), (prod_6‹L,L,L› A_1093 A_1093)
)
Program.infer_tm(let {pf_1213} :=
                   (refl_4‹L› : (eq_3‹L› A_1093 m_1147 m_1178))
                 in (pair_7‹L,L,L› m_1147 m_1178))
Logical.infer_tm((refl_4‹L› : (eq_3‹L› A_1093 m_1147 m_1178)))
Logical.infer_tm((eq_3‹L› A_1093 m_1147 m_1178))
Logical.check_tm( A_1093, L )
Logical.infer_tm(A_1093)
Logical.check_tm( m_1147, A_1093 )
Logical.infer_tm(m_1147)
Logical.check_tm( m_1178, A_1093 )
Logical.infer_tm(m_1178)
Logical.check_tm( refl_4‹L›, (eq_3‹L› A_1093 m_1147 m_1178) )
Logical.infer_tm(refl_4‹L›)
Logical.check_tm( A_1093, L )
Logical.infer_tm(A_1093)
Logical.check_tm( m_1147, A_1093 )
Logical.infer_tm(m_1147)
Logical.infer_tm((eq_3‹L› A_1093 m_1147 m_1178))
Logical.check_tm( A_1093, L )
Logical.infer_tm(A_1093)
Logical.check_tm( m_1147, A_1093 )
Logical.infer_tm(m_1147)
Logical.check_tm( m_1178, A_1093 )
Logical.infer_tm(m_1178)
Program.infer_tm((pair_7‹L,L,L› m_1147 m_1178))
Logical.check_tm( A_1093, L )
Logical.infer_tm(A_1093)
Logical.check_tm( A_1093, L )
Logical.infer_tm(A_1093)
Program.check_tm( m_1147, A_1093 )
Program.infer_tm(m_1147)
Program.check_tm( m_1178, A_1093 )
Program.infer_tm(m_1178)
Logical.infer_tm(∀ {A_1219 : U} ->
                   ∀ {m_1220 : A_1219} ->
                     (sing_5‹U› A_1219 m_1220) -o
                       (sing_5‹U› A_1219 m_1220) -o
                         (prod_6‹U,U,L› A_1219 A_1219))
Logical.infer_tm(U)
Logical.infer_tm(∀ {m_1224 : A_1223} ->
                   (sing_5‹U› A_1223 m_1224) -o
                     (sing_5‹U› A_1223 m_1224) -o
                       (prod_6‹U,U,L› A_1223 A_1223))
Logical.infer_tm(A_1223)
Logical.infer_tm((sing_5‹U› A_1223 m_1227) -o
                   (sing_5‹U› A_1223 m_1227) -o
                     (prod_6‹U,U,L› A_1223 A_1223))
Logical.infer_tm((sing_5‹U› A_1223 m_1227))
Logical.check_tm( A_1223, U )
Logical.infer_tm(A_1223)
Logical.check_tm( m_1227, A_1223 )
Logical.infer_tm(m_1227)
Logical.infer_tm((sing_5‹U› A_1223 m_1227) -o
                   (prod_6‹U,U,L› A_1223 A_1223))
Logical.infer_tm((sing_5‹U› A_1223 m_1227))
Logical.check_tm( A_1223, U )
Logical.infer_tm(A_1223)
Logical.check_tm( m_1227, A_1223 )
Logical.infer_tm(m_1227)
Logical.infer_tm((prod_6‹U,U,L› A_1223 A_1223))
Logical.check_tm( A_1223, U )
Logical.infer_tm(A_1223)
Logical.check_tm( A_1223, U )
Logical.infer_tm(A_1223)
Program.check_tm(
  function sing_double_1233 :
    ∀ {A_1234 : U} ->
      ∀ {m_1235 : A_1234} ->
        (sing_5‹U› A_1234 m_1235) -o
          (sing_5‹U› A_1234 m_1235) -o (prod_6‹U,U,L› A_1234 A_1234)
  | A_1238 m_1239 (just_6 x_1240) (just_6 y_1241) =>
    let {pf_1242} := (refl_4‹U› : (eq_3‹U› A_1238 x_1240 y_1241)) in
    (pair_7‹U,U,L› x_1240 y_1241),
  ∀ {A_1243 : U} ->
    ∀ {m_1244 : A_1243} ->
      (sing_5‹U› A_1243 m_1244) -o
        (sing_5‹U› A_1243 m_1244) -o (prod_6‹U,U,L› A_1243 A_1243)
)
Program.infer_tm(function sing_double_1247 :
                   ∀ {A_1248 : U} ->
                     ∀ {m_1249 : A_1248} ->
                       (sing_5‹U› A_1248 m_1249) -o
                         (sing_5‹U› A_1248 m_1249) -o
                           (prod_6‹U,U,L› A_1248 A_1248)
                 | A_1252 m_1253 (just_6 x_1254) (just_6 y_1255) =>
                   let {pf_1256} :=
                     (refl_4‹U› : (eq_3‹U› A_1252 x_1254 y_1255))
                   in (pair_7‹U,U,L› x_1254 y_1255))
Logical.infer_tm(∀ {A_1258 : U} ->
                   ∀ {m_1259 : A_1258} ->
                     (sing_5‹U› A_1258 m_1259) -o
                       (sing_5‹U› A_1258 m_1259) -o
                         (prod_6‹U,U,L› A_1258 A_1258))
Logical.infer_tm(U)
Logical.infer_tm(∀ {m_1263 : A_1262} ->
                   (sing_5‹U› A_1262 m_1263) -o
                     (sing_5‹U› A_1262 m_1263) -o
                       (prod_6‹U,U,L› A_1262 A_1262))
Logical.infer_tm(A_1262)
Logical.infer_tm((sing_5‹U› A_1262 m_1266) -o
                   (sing_5‹U› A_1262 m_1266) -o
                     (prod_6‹U,U,L› A_1262 A_1262))
Logical.infer_tm((sing_5‹U› A_1262 m_1266))
Logical.check_tm( A_1262, U )
Logical.infer_tm(A_1262)
Logical.check_tm( m_1266, A_1262 )
Logical.infer_tm(m_1266)
Logical.infer_tm((sing_5‹U› A_1262 m_1266) -o
                   (prod_6‹U,U,L› A_1262 A_1262))
Logical.infer_tm((sing_5‹U› A_1262 m_1266))
Logical.check_tm( A_1262, U )
Logical.infer_tm(A_1262)
Logical.check_tm( m_1266, A_1262 )
Logical.infer_tm(m_1266)
Logical.infer_tm((prod_6‹U,U,L› A_1262 A_1262))
Logical.check_tm( A_1262, U )
Logical.infer_tm(A_1262)
Logical.check_tm( A_1262, U )
Logical.infer_tm(A_1262)
trans12.Program.case_intro(U)
Logical.infer_tm(U)
trans12.Program.case_intro(#A_1276)
Logical.infer_tm(A_1276)
trans12.Program.case_intro((sing_5‹U› #A_1276 #m_1287))
Logical.infer_tm((sing_5‹U› A_1276 m_1287))
Logical.check_tm( A_1276, U )
Logical.infer_tm(A_1276)
Logical.check_tm( m_1287, A_1276 )
Logical.infer_tm(m_1287)
trans12.Program.case_intro((sing_5‹U› #A_1276 #m_1287))
Logical.infer_tm((sing_5‹U› A_1276 m_1287))
Logical.check_tm( A_1276, U )
Logical.infer_tm(A_1276)
Logical.check_tm( m_1287, A_1276 )
Logical.infer_tm(m_1287)
Logical.infer_tm((sing_5‹U› A_1276 m_1287))
Logical.check_tm( A_1276, U )
Logical.infer_tm(A_1276)
Logical.check_tm( m_1287, A_1276 )
Logical.infer_tm(m_1287)
Logical.infer_tm(A_1276)
Logical.infer_tm((sing_5‹U› A_1276 m_1287))
Logical.check_tm( A_1276, U )
Logical.infer_tm(A_1276)
Logical.check_tm( m_1287, A_1276 )
Logical.infer_tm(m_1287)
Logical.infer_tm(A_1276)
case_coverage{|
  prblm {|
    eq_term?( (sing_5‹U› #A_1276 #m_1287),
      (sing_5‹U› #A_1276 #m_1361))
    eq_term?( (sing_5‹U› #A_1276 #m_1287),
      (sing_5‹U› #A_1276 #m_1330));
    {| eq_pat?(N #A_1276, A_1272 : U)
       eq_pat?(N #m_1287, m_1273 : #A_1276)
       eq_pat?(R #m_1330, x_1274 : #A_1276)
       eq_pat?(R #m_1361, y_1275 : #A_1276) ::: [] =>?
         let {pf_1382} :=
           (refl_4‹U› : (eq_3‹U› #A_1272 #x_1274 #y_1275))
         in (pair_7‹U,U,L› #x_1274 #y_1275)
    |}
  |}
|}
unify_local(
  eq_pat?(N #A_1276, A_1272 : U)
  eq_pat?(N #m_1287, m_1273 : #A_1276)
  eq_pat?(R #m_1330, x_1274 : #A_1276)
  eq_pat?(R #m_1361, y_1275 : #A_1276)
)
unify_global(
  eq_term?( (sing_5‹U› #A_1276 #m_1287), (sing_5‹U› #A_1276 #m_1361))
  eq_term?( (sing_5‹U› #A_1276 #m_1287), (sing_5‹U› #A_1276 #m_1330))
)
simpl_pprbm ~expand:false( #A_1276, #A_1272)
simpl_pprbm ~expand:false( #m_1287, #m_1273)
simpl_pprbm ~expand:false( #m_1330, #x_1274)
simpl_pprbm ~expand:false( #m_1361, #y_1275)
simpl_pprbm ~expand:false( (sing_5‹U› #A_1276 #m_1287),
  (sing_5‹U› #A_1276 #m_1361))
simpl_pprbm ~expand:false( #A_1276, #A_1276)
simpl_pprbm ~expand:false( #m_1287, #m_1361)
simpl_pprbm ~expand:false( (sing_5‹U› #A_1276 #m_1361),
  (sing_5‹U› #A_1276 #m_1330))
simpl_pprbm ~expand:false( #A_1276, #A_1276)
simpl_pprbm ~expand:false( #m_1361, #m_1330)
case_coverage_ok(
  let {pf_1394} := (refl_4‹U› : (eq_3‹U› A_1276 m_1330 m_1361)) in
  (pair_7‹U,U,L› m_1330 m_1361), (prod_6‹U,U,L› A_1276 A_1276))
Program.check_tm(
  let {pf_1395} := (refl_4‹U› : (eq_3‹U› A_1276 m_1330 m_1361)) in
  (pair_7‹U,U,L› m_1330 m_1361), (prod_6‹U,U,L› A_1276 A_1276)
)
Program.infer_tm(let {pf_1396} :=
                   (refl_4‹U› : (eq_3‹U› A_1276 m_1330 m_1361))
                 in (pair_7‹U,U,L› m_1330 m_1361))
Logical.infer_tm((refl_4‹U› : (eq_3‹U› A_1276 m_1330 m_1361)))
Logical.infer_tm((eq_3‹U› A_1276 m_1330 m_1361))
Logical.check_tm( A_1276, U )
Logical.infer_tm(A_1276)
Logical.check_tm( m_1330, A_1276 )
Logical.infer_tm(m_1330)
Logical.check_tm( m_1361, A_1276 )
Logical.infer_tm(m_1361)
Logical.check_tm( refl_4‹U›, (eq_3‹U› A_1276 m_1330 m_1361) )
Logical.infer_tm(refl_4‹U›)
Logical.check_tm( A_1276, U )
Logical.infer_tm(A_1276)
Logical.check_tm( m_1330, A_1276 )
Logical.infer_tm(m_1330)
Logical.infer_tm((eq_3‹U› A_1276 m_1330 m_1361))
Logical.check_tm( A_1276, U )
Logical.infer_tm(A_1276)
Logical.check_tm( m_1330, A_1276 )
Logical.infer_tm(m_1330)
Logical.check_tm( m_1361, A_1276 )
Logical.infer_tm(m_1361)
Program.infer_tm((pair_7‹U,U,L› m_1330 m_1361))
Logical.check_tm( A_1276, U )
Logical.infer_tm(A_1276)
Logical.check_tm( A_1276, U )
Logical.infer_tm(A_1276)
Program.check_tm( m_1330, A_1276 )
Program.infer_tm(m_1330)
Program.check_tm( m_1361, A_1276 )
Program.infer_tm(m_1361)
inductive unit_1 where
| tt_1 of size(0)

inductive nat_2 where
| zero_2 of size(0) | succ_3 of size(1)

inductive eqU_8 where
| reflU_9 of size(0)

inductive eqL_7 where
| reflL_8 of size(0)

inductive existsUUU_16 where
| exUUU_17 of size(2)

inductive existsUUL_15 where
| exUUL_16 of size(2)

inductive existsULU_14 where
| exULU_15 of size(2)

inductive existsULL_13 where
| exULL_14 of size(2)

inductive existsLUU_12 where


inductive existsLUL_11 where
| exLUL_12 of size(2)

inductive existsLLU_10 where


inductive existsLLL_9 where
| exLLL_10 of size(2)

inductive singU_18 where
| justU_19 of size(1)

inductive singL_17 where
| justL_18 of size(1)

inductive prodUUU_26 where
| pairUUU_27 of size(2)

inductive prodUUL_25 where
| pairUUL_26 of size(2)

inductive prodULU_24 where


inductive prodULL_23 where
| pairULL_24 of size(2)

inductive prodLUU_22 where


inductive prodLUL_21 where
| pairLUL_22 of size(2)

inductive prodLLU_20 where


inductive prodLLL_19 where
| pairLLL_20 of size(2)

def sing_doubleU_3 =
  fun sing_double_1402 (A_1403, m_1404, __1405, __1406) =>
    match __1405 with
    | justU_19 m_1407 =>
      match __1406 with
      | justU_19 m_1408 => let pf_1409 := NULL in (pairUUL_26 m_1407 m_1408)
      end
    end

def sing_doubleL_2 =
  fun sing_double_1410 (A_1411, m_1412, __1413, __1414) =>
    match __1413 with
    | justL_18 m_1415 =>
      match __1414 with
      | justL_18 m_1416 => let pf_1417 := NULL in (pairLLL_20 m_1415 m_1416)
      end
    end

-----------------------------------------

