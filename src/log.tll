[Inductive {name = "tree"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)),
          [(DConstr ("Leaf", (TBase (Id ("tree", I))), []));
            (DConstr ("Node",
               (TBind (R, Int_t,
                  (Binder ("_",
                     (TBind (R, (Id ("tree", I)),
                        (Binder ("l",
                           (TBind (R, (Id ("tree", I)),
                              (Binder ("r", (TBase (Id ("tree", I)))))))
                           ))
                        ))
                     ))
                  )),
               [E; E; E]))
            ]))
      ));
   view = []};
  Inductive {name = "opr"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("Free", (TBase (Id ("opr", I))), []));
             (DConstr ("Lookup",
                (TBind (R, Int_t, (Binder ("k", (TBase (Id ("opr", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Definition {name = "lookup"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (Pi (R, U, (Id ("tree", I)),
                    (Binder ("_", (Id ("bool", I))))))
                 ))
              )),
           (Binder ((Some "lookup"),
              [([(PId "n"); (PId "Leaf")], (Some (Id ("false", I))));
                ([(PId "n");
                   (PConstr ("Node", [(PId "x"); (PId "l"); (PId "r")]))],
                 (Some (Match (
                          [(R, (BOpr ("==", (Id ("x", I)), (Id ("n", I)))),
                            None)],
                          None,
                          [([(PId "true")], (Some (Id ("true", I))));
                            ([(PId "false")],
                             (Some (BOpr ("||",
                                      (App
                                         [(Id ("lookup", I)); (Id ("n", I));
                                           (Id ("l", I))]),
                                      (App
                                         [(Id ("lookup", I)); (Id ("n", I));
                                           (Id ("r", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (Pi (R, U, (Id ("tree", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = [E]};
  Definition {name = "tree_p"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", Proto)))),
           (Binder ((Some "tree_p"),
              [([(PId "t")],
                (Some (Act (R, false, (Id ("opr", I)),
                         (Binder ("o",
                            (Match ([(R, (Id ("o", I)), None)], None,
                               [([(PId "Free")], (Some End));
                                 ([(PConstr ("Lookup", [(PId "k")]))],
                                  (Some (Act (R, true,
                                           (UOpr ("`",
                                              (App
                                                 [(Id ("lookup", I));
                                                   (Id ("k", I));
                                                   (Id ("t", I))])
                                              )),
                                           (Binder ("_",
                                              (App
                                                 [(Id ("tree_p", I));
                                                   (Id ("t", I))])
                                              ))
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", Proto)))))
       ));
    view = [E]};
  Definition {name = "ctree_ch"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))),
           (Binder ((Some "ctree_ch"),
              [([(PId "t")],
                (Some (Ch (true, (App [(Id ("tree_p", I)); (Id ("t", I))])))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))))
       ));
    view = [E]};
  Definition {name = "ctree_hc"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))),
           (Binder ((Some "ctree_hc"),
              [([(PId "t")],
                (Some (Ch (false, (App [(Id ("tree_p", I)); (Id ("t", I))])))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))))
       ));
    view = [E]};
  Definition {name = "ctree"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))),
           (Binder ((Some "ctree"),
              [([(PId "t")],
                (Some (IO (App [(Id ("ctree_hc", I)); (Id ("t", I))]))))]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))))
       ));
    view = [E]};
  Definition {name = "leaf_worker"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (App [(Id ("ctree_ch", I)); (Id ("Leaf", I))]),
              (Binder ("c", (IO (Id ("unit", I))))))),
           (Binder ((Some "leaf_worker"),
              [([(PId "c")],
                (Some (MLet ((Recv (Id ("c", I))),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "o"),
                               (PId "c"))),
                            (Match (
                               [(R, (Id ("o", I)), (Some ("o0", IMeta)));
                                 (R, (Id ("c", I)),
                                  (Some ("_",
                                         (Ch (true,
                                            (Match (
                                               [(R, (Id ("o0", I)), None)],
                                               None,
                                               [([(PId "Free")], (Some End));
                                                 ([(PConstr ("Lookup",
                                                      [(PId "_")]))
                                                    ],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (Id ("false", I
                                                                 ))
                                                              )),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (Id (
                                                                    "Leaf", I
                                                                    ))
                                                                   ])
                                                              ))
                                                           ))))
                                                 ]
                                               ))
                                            )))))
                                 ],
                               None,
                               [([(PId "Free"); (PId "c")],
                                 (Some (Close (Id ("c", I)))));
                                 ([(PConstr ("Lookup", [(PId "_")]));
                                    (PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("c", I)));
                                                (App
                                                   [(Id ("just", I));
                                                     (Id ("false", I))])
                                                ]),
                                           (Binder ((PId "c"),
                                              (App
                                                 [(Id ("leaf_worker", I));
                                                   (Id ("c", I))])
                                              ))
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Id ("ctree_ch", I)); (Id ("Leaf", I))]),
           (Binder ("c", (IO (Id ("unit", I))))))))
       ));
    view = [E]};
  Definition {name = "node_worker"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("x",
                 (Pi (N, U, (Id ("tree", I)),
                    (Binder ("l",
                       (Pi (N, U, (Id ("tree", I)),
                          (Binder ("r",
                             (Pi (R, L,
                                (App [(Id ("ctree_hc", I)); (Id ("l", I))]),
                                (Binder ("_",
                                   (Pi (R, L,
                                      (App
                                         [(Id ("ctree_hc", I)); (Id ("r", I))
                                           ]),
                                      (Binder ("_",
                                         (Pi (R, L,
                                            (App
                                               [(Id ("ctree_ch", I));
                                                 (App
                                                    [(Id ("Node", I));
                                                      (Id ("x", I));
                                                      (Id ("l", I));
                                                      (Id ("r", I))])
                                                 ]),
                                            (Binder ("_",
                                               (IO (Id ("unit", I)))))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "node_worker"),
              [([(PId "x"); (PId "l"); (PId "r"); (PId "l_ch"); (PId "r_ch");
                  (PId "c")],
                (Some (MLet ((Recv (Id ("c", I))),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "o"),
                               (PId "c"))),
                            (Match (
                               [(R, (Id ("o", I)), (Some ("o0", IMeta)));
                                 (R, (Id ("c", I)),
                                  (Some ("_",
                                         (Ch (true,
                                            (Match (
                                               [(R, (Id ("o0", I)), None)],
                                               None,
                                               [([(PId "Free")], (Some End));
                                                 ([(PConstr ("Lookup",
                                                      [(PId "k")]))
                                                    ],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (App
                                                                 [(Id (
                                                                    "lookup",
                                                                    I));
                                                                   (Id ("k",
                                                                    I));
                                                                   (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])
                                                                   ])
                                                              )),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])
                                                                   ])
                                                              ))
                                                           ))))
                                                 ]
                                               ))
                                            )))))
                                 ],
                               None,
                               [([(PId "Free"); (PId "c")],
                                 (Some (MLet (
                                          (App
                                             [(Send (Id ("l_ch", I)));
                                               (Id ("Free", I))]),
                                          (Binder ((PId "l_ch"),
                                             (MLet (
                                                (App
                                                   [(Send (Id ("r_ch", I)));
                                                     (Id ("Free", I))]),
                                                (Binder ((PId "r_ch"),
                                                   (BOpr (";",
                                                      (Close (Id ("l_ch", I))),
                                                      (BOpr (";",
                                                         (Close
                                                            (Id ("r_ch", I))),
                                                         (Close (Id ("c", I)))
                                                         ))
                                                      ))
                                                   ))
                                                ))
                                             ))
                                          ))));
                                 ([(PConstr ("Lookup", [(PId "k")]));
                                    (PId "c")],
                                  (Some (Match (
                                           [(R,
                                             (BOpr ("==", (Id ("x", I)),
                                                (Id ("k", I)))),
                                             (Some ("b0", IMeta)));
                                             (R, (Id ("c", I)),
                                              (Some ("_",
                                                     (Ch (true,
                                                        (Act (R, true,
                                                           (UOpr ("`",
                                                              (Match (
                                                                 [(R,
                                                                   (Id ("b0",
                                                                    I)),
                                                                   None)],
                                                                 None,
                                                                 [([(PId
                                                                    "true")],
                                                                   (Some (
                                                                   Id (
                                                                    "true", I
                                                                    ))));
                                                                   ([(PId
                                                                    "false")],
                                                                    (Some (
                                                                    BOpr (
                                                                    "||",
                                                                    (App
                                                                    [(Id (
                                                                    "lookup",
                                                                    I));
                                                                    (Id ("k",
                                                                    I));
                                                                    (Id ("l",
                                                                    I))]),
                                                                    (App
                                                                    [(Id (
                                                                    "lookup",
                                                                    I));
                                                                    (Id ("k",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])))))
                                                                   ]
                                                                 ))
                                                              )),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])
                                                                   ])
                                                              ))
                                                           ))
                                                        )))))
                                             ],
                                           None,
                                           [([(PId "true"); (PId "c")],
                                             (Some (MLet (
                                                      (App
                                                         [(Send (Id ("c", I)));
                                                           (App
                                                              [(Id ("just", I
                                                                  ));
                                                                (Id ("true",
                                                                   I))
                                                                ])
                                                           ]),
                                                      (Binder ((PId "c"),
                                                         (App
                                                            [(Id (
                                                                "node_worker",
                                                                I));
                                                              (Id ("x", I));
                                                              (Id ("l_ch", I
                                                                 ));
                                                              (Id ("r_ch", I
                                                                 ));
                                                              (Id ("c", I))])
                                                         ))
                                                      ))));
                                             ([(PId "false"); (PId "c")],
                                              (Some (MLet (
                                                       (App
                                                          [(Send
                                                              (Id ("l_ch", I
                                                                 )));
                                                            (App
                                                               [(Id (
                                                                   "Lookup",
                                                                   I));
                                                                 (Id ("k", I
                                                                    ))
                                                                 ])
                                                            ]),
                                                       (Binder ((PId "l_ch"),
                                                          (MLet (
                                                             (App
                                                                [(Send
                                                                    (
                                                                    Id (
                                                                    "r_ch", I
                                                                    )));
                                                                  (App
                                                                    [(Id (
                                                                    "Lookup",
                                                                    I));
                                                                    (Id ("k",
                                                                    I))])
                                                                  ]),
                                                             (Binder (
                                                                (PId "r_ch"),
                                                                (MLet (
                                                                   (Recv
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ))),
                                                                   (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "l_b")])),
                                                                    (PId
                                                                    "l_ch"))),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "r_b")])),
                                                                    (PId
                                                                    "r_ch"))),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (BOpr (
                                                                    "||",
                                                                    (Id (
                                                                    "l_b", I
                                                                    )),
                                                                    (Id (
                                                                    "r_b", I
                                                                    ))))])]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (App
                                                                    [(Id (
                                                                    "node_worker",
                                                                    I));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ));
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))])))))
                                                                    ))))))
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))))
                                             ]
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E; I; I])),
        (Pi (R, U, Int_t,
           (Binder ("x",
              (Pi (N, U, (Id ("tree", I)),
                 (Binder ("l",
                    (Pi (N, U, (Id ("tree", I)),
                       (Binder ("r",
                          (Pi (R, L,
                             (App [(Id ("ctree_hc", I)); (Id ("l", I))]),
                             (Binder ("_",
                                (Pi (R, L,
                                   (App [(Id ("ctree_hc", I)); (Id ("r", I))]),
                                   (Binder ("_",
                                      (Pi (R, L,
                                         (App
                                            [(Id ("ctree_ch", I));
                                              (App
                                                 [(Id ("Node", I));
                                                   (Id ("x", I));
                                                   (Id ("l", I));
                                                   (Id ("r", I))])
                                              ]),
                                         (Binder ("_", (IO (Id ("unit", I)))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; I; I]};
  Definition {name = "cleaf"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("unit", I)),
              (Binder ("_", (App [(Id ("ctree", I)); (Id ("Leaf", I))]))))),
           (Binder ((Some "cleaf"),
              [([(PId "_")],
                (Some (Fork
                         (Fun (
                            (Pi (R, L,
                               (App [(Id ("ctree_ch", I)); (Id ("Leaf", I))]),
                               (Binder ("", (IO (Id ("unit", I))))))),
                            (Binder (None,
                               [([(PId "c")],
                                 (Some (App
                                          [(Id ("leaf_worker", I));
                                            (Id ("c", I))])))
                                 ]
                               )),
                            [])))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("unit", I)),
           (Binder ("_", (App [(Id ("ctree", I)); (Id ("Leaf", I))]))))))
       ));
    view = [E]};
  Definition {name = "cnode"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("x",
                 (Pi (N, U, (Id ("tree", I)),
                    (Binder ("l",
                       (Pi (N, U, (Id ("tree", I)),
                          (Binder ("r",
                             (Pi (R, L,
                                (App [(Id ("ctree", I)); (Id ("l", I))]),
                                (Binder ("_",
                                   (Pi (R, L,
                                      (App [(Id ("ctree", I)); (Id ("r", I))]),
                                      (Binder ("_",
                                         (App
                                            [(Id ("ctree", I));
                                              (App
                                                 [(Id ("Node", I));
                                                   (Id ("x", I));
                                                   (Id ("l", I));
                                                   (Id ("r", I))])
                                              ])
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cnode"),
              [([(PId "x"); (PId "l"); (PId "r"); (PId "l0"); (PId "r0")],
                (Some (MLet ((Id ("l0", I)),
                         (Binder ((PId "l_ch"),
                            (MLet ((Id ("r0", I)),
                               (Binder ((PId "r_ch"),
                                  (Fork
                                     (Fun (
                                        (Pi (R, L,
                                           (App
                                              [(Id ("ctree_ch", I));
                                                (App
                                                   [(Id ("Node", I));
                                                     (Id ("x", I));
                                                     (Id ("l", I));
                                                     (Id ("r", I))])
                                                ]),
                                           (Binder ("", (IO (Id ("unit", I)))
                                              ))
                                           )),
                                        (Binder (None,
                                           [([(PId "c")],
                                             (Some (App
                                                      [(Id ("node_worker", I
                                                          ));
                                                        (Id ("x", I));
                                                        (Id ("l_ch", I));
                                                        (Id ("r_ch", I));
                                                        (Id ("c", I))])))
                                             ]
                                           )),
                                        [])))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; I; I])),
        (Pi (R, U, Int_t,
           (Binder ("x",
              (Pi (N, U, (Id ("tree", I)),
                 (Binder ("l",
                    (Pi (N, U, (Id ("tree", I)),
                       (Binder ("r",
                          (Pi (R, L,
                             (App [(Id ("ctree", I)); (Id ("l", I))]),
                             (Binder ("_",
                                (Pi (R, L,
                                   (App [(Id ("ctree", I)); (Id ("r", I))]),
                                   (Binder ("_",
                                      (App
                                         [(Id ("ctree", I));
                                           (App
                                              [(Id ("Node", I));
                                                (Id ("x", I)); (Id ("l", I));
                                                (Id ("r", I))])
                                           ])
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; I; I]};
  Definition {name = "cfree"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Id ("tree", I)),
              (Binder ("t",
                 (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                    (Binder ("ct", (IO (Id ("unit", I)))))))
                 ))
              )),
           (Binder ((Some "cfree"),
              [([(PId "t"); (PId "ct")],
                (Some (MLet ((Id ("ct", I)),
                         (Binder ((PId "c"),
                            (MLet (
                               (App [(Send (Id ("c", I))); (Id ("Free", I))]),
                               (Binder ((PId "c"), (Close (Id ("c", I)))))))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (Id ("tree", I)),
           (Binder ("t",
              (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                 (Binder ("ct", (IO (Id ("unit", I)))))))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "clookup"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("k",
                 (Pi (N, U, (Id ("tree", I)),
                    (Binder ("t",
                       (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                          (Binder ("ct",
                             (IO
                                (BOpr ("\226\138\151",
                                   (UOpr ("`",
                                      (App
                                         [(Id ("lookup", I)); (Id ("k", I));
                                           (Id ("t", I))])
                                      )),
                                   (App [(Id ("ctree", I)); (Id ("t", I))]))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "clookup"),
              [([(PId "k"); (PId "t"); (PId "ct")],
                (Some (MLet ((Id ("ct", I)),
                         (Binder ((PId "c"),
                            (MLet (
                               (App
                                  [(Send (Id ("c", I)));
                                    (App [(Id ("Lookup", I)); (Id ("k", I))])
                                    ]),
                               (Binder ((PId "c"),
                                  (MLet ((Recv (Id ("c", I))),
                                     (Binder (
                                        (PBOpr ("\226\159\168,\226\159\169",
                                           (PId "x"), (PId "ct"))),
                                        (Return
                                           (BOpr (
                                              "\226\159\168,\226\159\169",
                                              (Id ("x", I)),
                                              (Return (Id ("ct", I))))))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; I; E])),
        (Pi (R, U, Int_t,
           (Binder ("k",
              (Pi (N, U, (Id ("tree", I)),
                 (Binder ("t",
                    (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                       (Binder ("ct",
                          (IO
                             (BOpr ("\226\138\151",
                                (UOpr ("`",
                                   (App
                                      [(Id ("lookup", I)); (Id ("k", I));
                                        (Id ("t", I))])
                                   )),
                                (App [(Id ("ctree", I)); (Id ("t", I))]))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; I; E]};
  Definition {name = "mytree1"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree1"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("cleaf", I)); (Id ("tt", I))]);
                           (App [(Id ("cleaf", I)); (Id ("tt", I))])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree2"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree2"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree1", I)); (Int 1)]);
                           (App [(Id ("mytree1", I)); (Int 2)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree3"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree3"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree2", I)); (Int 3)]);
                           (App [(Id ("mytree2", I)); (Int 4)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree4"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree4"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree3", I)); (Int 8)]);
                           (App [(Id ("mytree3", I)); (Int 7)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree5"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree5"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree4", I)); (Int 9)]);
                           (App [(Id ("mytree4", I)); (Int 10)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree6"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree6"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree5", I)); (Int 11)]);
                           (App [(Id ("mytree5", I)); (Int 12)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Id ("mytree6", I)); (Int 100)]),
           (Binder ((PId "ct"),
              (MLet ((App [(Id ("clookup", I)); (Int 1); (Id ("ct", I))]),
                 (Binder (
                    (PBOpr ("\226\159\168,\226\159\169",
                       (PConstr ("just", [(PId "b")])), (PId "ct"))),
                    (MLet (
                       (Match ([(R, (Id ("b", I)), None)], None,
                          [([(PId "true")], (Some (Print (String "true"))));
                            ([(PId "false")], (Some (Print (String "false"))))
                            ]
                          )),
                       (Binder ((PId "_"),
                          (App [(Id ("cfree", I)); (Id ("ct", I))])))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

[parse success]

-----------------------------------------

#[program]
inductive tree_10‹› : U where
| Leaf_13 : tree_10
| Node_14 (__583 : int) (l_584 : tree_10) (r_585 : tree_10) : tree_10

#[program]
inductive opr_11‹› : U where
| Free_15 : opr_11
| Lookup_16 (k_586 : int) : opr_11

#[program]
def lookup_32‹› : int -> tree_10 -> bool_4 :=
  (fun lookup_589 : int -> tree_10 -> bool_4
  | n_592, Leaf_13 => false_5
  | n_593, (Node_14 x_594 l_595 r_596) =>
    (match (__eq__ x_594 n_593) in ?_61[0;0] -o ?_62[0;0] with
    | true_4 => true_4
    | false_5 =>
      ((or_13) ((lookup_589) n_593 l_595) ((lookup_589) n_593 r_596))))

#[logical]
def tree_p_33‹› : tree_10 -> proto :=
  (fun tree_p_599 : tree_10 -> proto
  | t_601 =>
    ⇓(o_602 : opr_11) ⇒
      (match o_602 in ?_63[0;0] -o ?_64[0;0] with
      | Free_15 => •
      | (Lookup_16 k_604) =>
        ⇑(__605 :
          ((ssing_6‹??_50›) ?_65[0;0] ((lookup_32) k_604 t_601))) ⇒
          ((tree_p_599) t_601)))

#[logical]
def ctree_ch_34‹› : tree_10 -> L :=
  (fun ctree_ch_607 : tree_10 -> L
  | t_609 => ch⟨((tree_p_33) t_609)⟩)

#[logical]
def ctree_hc_35‹› : tree_10 -> L :=
  (fun ctree_hc_611 : tree_10 -> L
  | t_613 => hc⟨((tree_p_33) t_613)⟩)

#[logical]
def ctree_36‹› : tree_10 -> L :=
  (fun ctree_615 : tree_10 -> L
  | t_617 => IO ((ctree_hc_35) t_617))

#[program]
def leaf_worker_37‹› : ((ctree_ch_34) Leaf_13) -> IO unit_9 :=
  (fun leaf_worker_619 : ((ctree_ch_34) Leaf_13) -> IO unit_9
  | c_621 =>
    let* _622 := recv c_621 in
    (match _622 in ?_73[0;0] -o ?_72[0;0] with
    | (ex1_12 o_624 c_625) =>
      (match o_624, c_625 in
         ∀ (o0_626 : ?_66[0;0]) -o
           ch⟨(match o0_626 in ?_67[0;0] -o ?_68[0;0] with
                | Free_15 => •
                | (Lookup_16 _629) =>
                  ⇑(__630 : ((ssing_6‹??_51›) ?_69[0;0] false_5)) ⇒
                    ((tree_p_33) Leaf_13))⟩ -o
             ?_70[0;0]
       with
      | Free_15, c_631 => close c_631
      | (Lookup_16 _632), c_633 =>
        let* c_634 :=
          ((send c_633) (just_2‹??_52,??_53› ?_71[0;0] false_5))
        in ((leaf_worker_619) c_634))))

#[program]
def node_worker_38‹› :
  ∀ (x_635 : int) ->
    ∀ {l_636 : tree_10} ->
      ∀ {r_637 : tree_10} ->
        ((ctree_hc_35) l_636) -o
          ((ctree_hc_35) r_637) -o
            ((ctree_ch_34) (Node_14‹› x_635 l_636 r_637)) -o IO unit_9
:=
  (fun node_worker_641 :
    ∀ (x_642 : int) ->
      ∀ {l_643 : tree_10} ->
        ∀ {r_644 : tree_10} ->
          ((ctree_hc_35) l_643) -o
            ((ctree_hc_35) r_644) -o
              ((ctree_ch_34) (Node_14‹› x_642 l_643 r_644)) -o IO unit_9
  | x_648, l_649, r_650, l_ch_651, r_ch_652, c_653 =>
    let* _654 := recv c_653 in
    (match _654 in ?_95[0;0] -o ?_94[0;0] with
    | (ex1_12 o_656 c_657) =>
      (match o_656, c_657 in
         ∀ (o0_658 : ?_74[0;0]) -o
           ch⟨(match o0_658 in ?_75[0;0] -o ?_76[0;0] with
                | Free_15 => •
                | (Lookup_16 k_661) =>
                  ⇑(__662 :
                    ((ssing_6‹??_54›)
                      ?_77[0;0]
                      ((lookup_32) k_661 (Node_14‹› x_648 l_649 r_650)))) ⇒
                    ((tree_p_33) (Node_14‹› x_648 l_649 r_650)))⟩ -o
             ?_78[0;0]
       with
      | Free_15, c_663 =>
        let* l_ch_664 := ((send l_ch_651) Free_15) in
        let* r_ch_665 := ((send r_ch_652) Free_15) in
        let* __666 := close l_ch_664 in
        let* __667 := close r_ch_665 in close c_663
      | (Lookup_16 k_668), c_669 =>
        (match (__eq__ x_648 k_668), c_669 in
           ∀ (b0_670 : ?_79[0;0]) -o
             ch⟨⇑(__672 :
                    ((ssing_6‹??_55›)
                      ?_82[0;0]
                      (match b0_670 in ?_80[0;0] -o ?_81[0;0] with
                      | true_4 => true_4
                      | false_5 =>
                        ((or_13)
                          ((lookup_32) k_668 l_649) ((lookup_32) k_668 r_650))))) ⇒
                    ((tree_p_33) (Node_14‹› x_648 l_649 r_650))⟩ -o
               ?_83[0;0]
         with
        | true_4, c_674 =>
          let* c_675 :=
            ((send c_674) (just_2‹??_56,??_57› ?_84[0;0] true_4))
          in
          ((node_worker_641)
            x_648 ?_86[0;0] ?_85[0;0] l_ch_651 r_ch_652 c_675)
        | false_5, c_676 =>
          let* l_ch_677 := ((send l_ch_651) (Lookup_16‹› k_668)) in
          let* r_ch_678 := ((send r_ch_652) (Lookup_16‹› k_668)) in
          let* _679 := recv l_ch_677 in
          (match _679 in ?_93[0;0] -o ?_92[0;0] with
          | (ex1_12 (just_2 l_b_681) l_ch_682) =>
            let* _683 := recv r_ch_678 in
            (match _683 in ?_91[0;0] -o ?_90[0;0] with
            | (ex1_12 (just_2 r_b_685) r_ch_686) =>
              let* c_687 :=
                ((send c_676)
                  (just_2‹??_58,??_59›
                    ?_87[0;0] ((or_13) l_b_681 r_b_685)))
              in
              ((node_worker_641)
                x_648 ?_89[0;0] ?_88[0;0] l_ch_682 r_ch_686 c_687)))))))

#[program]
def cleaf_39‹› : unit_9 -> ((ctree_36) Leaf_13) :=
  (fun cleaf_689 : unit_9 -> ((ctree_36) Leaf_13)
  | _691 =>
    fork
      (fun _692 : ((ctree_ch_34) Leaf_13) -o IO unit_9
      | c_694 => ((leaf_worker_37) c_694)))

#[program]
def cnode_40‹› :
  ∀ (x_695 : int) ->
    ∀ {l_696 : tree_10} ->
      ∀ {r_697 : tree_10} ->
        ((ctree_36) l_696) -o
          ((ctree_36) r_697) -o
            ((ctree_36) (Node_14‹› x_695 l_696 r_697))
:=
  (fun cnode_700 :
    ∀ (x_701 : int) ->
      ∀ {l_702 : tree_10} ->
        ∀ {r_703 : tree_10} ->
          ((ctree_36) l_702) -o
            ((ctree_36) r_703) -o
              ((ctree_36) (Node_14‹› x_701 l_702 r_703))
  | x_706, l_707, r_708, l0_709, r0_710 =>
    let* l_ch_711 := l0_709 in
    let* r_ch_712 := r0_710 in
    fork
      (fun _713 :
        ((ctree_ch_34) (Node_14‹› x_706 l_707 r_708)) -o IO unit_9
      | c_715 =>
        ((node_worker_38) x_706 ?_97[0;0] ?_96[0;0] l_ch_711 r_ch_712 c_715)))

#[program]
def cfree_41‹› : ∀ {t_716 : tree_10} -> ((ctree_36) t_716) -> IO unit_9
:=
  (fun cfree_718 : ∀ {t_719 : tree_10} -> ((ctree_36) t_719) -> IO unit_9
  | t_721, ct_722 =>
    let* c_723 := ct_722 in
    let* c_724 := ((send c_723) Free_15) in close c_724)

#[program]
def clookup_42‹› :
  ∀ (k_725 : int) ->
    ∀ {t_726 : tree_10} ->
      ((ctree_36) t_726) ->
        IO ((tensor_24‹??_66,??_67›)
             ((ssing_6‹??_65›) ?_103[0;0] ((lookup_32) k_725 t_726))
             ((ctree_36) t_726))
:=
  (fun clookup_728 :
    ∀ (k_729 : int) ->
      ∀ {t_730 : tree_10} ->
        ((ctree_36) t_730) ->
          IO ((tensor_24‹??_61,??_62›)
               ((ssing_6‹??_60›) ?_98[0;0] ((lookup_32) k_729 t_730))
               ((ctree_36) t_730))
  | k_732, t_733, ct_734 =>
    let* c_735 := ct_734 in
    let* c_736 := ((send c_735) (Lookup_16‹› k_732)) in
    let* _737 := recv c_736 in
    (match _737 in ?_102[0;0] -o ?_101[0;0] with
    | (ex1_12 x_739 ct_740) =>
      return (ex1_12‹??_63,??_64›
               ?_99[0;0] ?_100[0;0] x_739 return ct_740)))

#[program]
def mytree1_43‹› : int -> ?_107[0;0] :=
  (fun mytree1_742 : int -> ?_104[0;0]
  | x_744 =>
    ((cnode_40)
      x_744 ?_106[0;0] ?_105[0;0] ((cleaf_39) tt_3‹??_68›)
      ((cleaf_39) tt_3‹??_69›)))

#[program]
def mytree2_44‹› : int -> ?_111[0;0] :=
  (fun mytree2_746 : int -> ?_108[0;0]
  | x_748 =>
    ((cnode_40)
      x_748 ?_110[0;0] ?_109[0;0] ((mytree1_43) 1) ((mytree1_43) 2)))

#[program]
def mytree3_45‹› : int -> ?_115[0;0] :=
  (fun mytree3_750 : int -> ?_112[0;0]
  | x_752 =>
    ((cnode_40)
      x_752 ?_114[0;0] ?_113[0;0] ((mytree2_44) 3) ((mytree2_44) 4)))

#[program]
def mytree4_46‹› : int -> ?_119[0;0] :=
  (fun mytree4_754 : int -> ?_116[0;0]
  | x_756 =>
    ((cnode_40)
      x_756 ?_118[0;0] ?_117[0;0] ((mytree3_45) 8) ((mytree3_45) 7)))

#[program]
def mytree5_47‹› : int -> ?_123[0;0] :=
  (fun mytree5_758 : int -> ?_120[0;0]
  | x_760 =>
    ((cnode_40)
      x_760 ?_122[0;0] ?_121[0;0] ((mytree4_46) 9) ((mytree4_46) 10)))

#[program]
def mytree6_48‹› : int -> ?_127[0;0] :=
  (fun mytree6_762 : int -> ?_124[0;0]
  | x_764 =>
    ((cnode_40)
      x_764 ?_126[0;0] ?_125[0;0] ((mytree5_47) 11) ((mytree5_47) 12)))

#[program]
def main_49‹› : IO unit_9 :=
  let ct_765 := ((mytree6_48) 100) in
  let* _766 := ((clookup_42) 1 ?_128[0;0] ct_765) in
  (match _766 in ?_133[0;0] -o ?_132[0;0] with
  | (ex1_12 (just_2 b_768) ct_769) =>
    let* __770 :=
      (match b_768 in ?_129[0;0] -o ?_130[0;0] with
      | true_4 => print "true"
      | false_5 => print "false")
    in ((cfree_41) ?_131[0;0] ct_769))

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_17320› :
  ∀ (A_17321 : Type‹s_17320›) -> A_17321 -> A_17321
:=
  (fun id_17323 : ∀ (A_17324 : Type‹s_17320›) -> A_17324 -> A_17324
  | A_17326, m_17327 => m_17327)

#[logical]
inductive eq_1‹s_17328› (A_17329 : Type‹s_17328›) (m_17330 : A_17329):
  A_17329 -> U
where
| refl_1 : (eq_1‹s_17328› A_17329 m_17330 m_17330)

#[program]
def rwl_2‹s_17332,r_17333› :
  ∀ {A_17334 : Type‹s_17332›} ->
    ∀ {m_17335 : A_17334} ->
      ∀ {n_17336 : A_17334} ->
        ∀ {B_17337 : A_17334 -> Type‹r_17333›} ->
          {(eq_1‹s_17332› A_17334 m_17335 n_17336)} ->
            ((B_17337) m_17335) -> ((B_17337) n_17336)
:=
  (fun rwl_17341 :
    ∀ {A_17342 : Type‹s_17332›} ->
      ∀ {m_17343 : A_17342} ->
        ∀ {n_17344 : A_17342} ->
          ∀ {B_17345 : A_17342 -> Type‹r_17333›} ->
            {(eq_1‹s_17332› A_17342 m_17343 n_17344)} ->
              ((B_17345) m_17343) -> ((B_17345) n_17344)
  | A_17349, m_17350, n_17351, B_17352, refl_1, __17353 => __17353)

#[program]
def rwr_3‹s_17354,r_17355› :
  ∀ {A_17356 : Type‹s_17354›} ->
    ∀ {m_17357 : A_17356} ->
      ∀ {n_17358 : A_17356} ->
        ∀ {B_17359 : A_17356 -> Type‹r_17355›} ->
          {(eq_1‹s_17354› A_17356 m_17357 n_17358)} ->
            ((B_17359) n_17358) -> ((B_17359) m_17357)
:=
  (fun rwr_17363 :
    ∀ {A_17364 : Type‹s_17354›} ->
      ∀ {m_17365 : A_17364} ->
        ∀ {n_17366 : A_17364} ->
          ∀ {B_17367 : A_17364 -> Type‹r_17355›} ->
            {(eq_1‹s_17354› A_17364 m_17365 n_17366)} ->
              ((B_17367) n_17366) -> ((B_17367) m_17365)
  | A_17371, m_17372, n_17373, B_17374, refl_1, __17375 => __17375)

#[logical]
def congr_4‹s_17376,r_17377,t_17378› :
  ∀ (A_17379 : Type‹s_17376›) ->
    ∀ (B_17380 : Type‹r_17377›) ->
      ∀ (m_17381 : A_17379) ->
        ∀ (n_17382 : A_17379) ->
          ∀ (f_17383 : forall‹t_17378›(__17384 : A_17379), B_17380) ->
            (eq_1‹s_17376› A_17379 m_17381 n_17382) ->
              (eq_1‹r_17377›
                B_17380 ((f_17383) m_17381) ((f_17383) n_17382))
:=
  (fun congr_17386 :
    ∀ (A_17387 : Type‹s_17376›) ->
      ∀ (B_17388 : Type‹r_17377›) ->
        ∀ (m_17389 : A_17387) ->
          ∀ (n_17390 : A_17387) ->
            ∀ (f_17391 :
              forall‹t_17378›(__17392 : A_17387), B_17388) ->
              (eq_1‹s_17376› A_17387 m_17389 n_17390) ->
                (eq_1‹r_17377›
                  B_17388 ((f_17391) m_17389) ((f_17391) n_17390))
  | A_17394, B_17395, m_17396, n_17397, f_17398, refl_1 =>
    (refl_1‹r_17377› B_17395 ((f_17398) n_17397)))

#[logical]
def axiom_K_5‹› :
  ∀ {A_17399 : U} ->
    ∀ {m_17400 : A_17399} ->
      ∀ (x_17401 : (eq_1‹U› A_17399 m_17400 m_17400)) ->
        (eq_1‹U›
          (eq_1‹U› A_17399 m_17400 m_17400) x_17401
          (refl_1‹U› A_17399 m_17400))
:=
  (fun axiom_K_17402 :
    ∀ {A_17403 : U} ->
      ∀ {m_17404 : A_17403} ->
        ∀ (x_17405 : (eq_1‹U› A_17403 m_17404 m_17404)) ->
          (eq_1‹U›
            (eq_1‹U› A_17403 m_17404 m_17404) x_17405
            (refl_1‹U› A_17403 m_17404))
  | A_17406, m_17407, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_17406 m_17407 m_17407) (refl_1‹U› A_17406 m_17407)))

#[program]
inductive sing_2‹s_17408,t_17409› (A_17410 : Type‹s_17408›):
  A_17410 -> Type‹t_17409›
where
| just_2 (m_17412 : A_17410) : (sing_2‹s_17408,t_17409› A_17410 m_17412)

#[logical]
def ssing_6‹s_17413› :
  ∀ (A_17414 : Type‹s_17413›) -> A_17414 -> Type‹s_17413›
:=
  (fun ssing_17416 :
    ∀ (A_17417 : Type‹s_17413›) -> A_17417 -> Type‹s_17413›
  | A_17419, m_17420 => (sing_2‹s_17413,s_17413› A_17419 m_17420))

#[program]
def sing_elim_7‹s_17421,t_17422› :
  ∀ {A_17423 : Type‹s_17421›} ->
    ∀ {x_17424 : A_17423} ->
      (sing_2‹s_17421,t_17422› A_17423 x_17424) -> A_17423
:=
  (fun sing_elim_17426 :
    ∀ {A_17427 : Type‹s_17421›} ->
      ∀ {x_17428 : A_17427} ->
        (sing_2‹s_17421,t_17422› A_17427 x_17428) -> A_17427
  | A_17430, x_17431, (just_2 m_17432) => m_17432)

#[logical]
def sing_uniq_8‹s_17433,t_17434› :
  ∀ (A_17435 : Type‹s_17433›) ->
    ∀ (x0_17436 : A_17435) ->
      ∀ (x_17437 : (sing_2‹s_17433,t_17434› A_17435 x0_17436)) ->
        (eq_1‹s_17433›
          A_17435 x0_17436
          ((sing_elim_7‹s_17433,t_17434›) A_17435 x0_17436 x_17437))
:=
  (fun sing_uniq_17438 :
    ∀ (A_17439 : Type‹s_17433›) ->
      ∀ (x0_17440 : A_17439) ->
        ∀ (x_17441 : (sing_2‹s_17433,t_17434› A_17439 x0_17440)) ->
          (eq_1‹s_17433›
            A_17439 x0_17440
            ((sing_elim_7‹s_17433,t_17434›) A_17439 x0_17440 x_17441))
  | A_17442, x0_17443, (just_2 m_17444) =>
    (refl_1‹s_17433› A_17442 m_17444))

#[program]
inductive base_3‹s_17445› : Type‹s_17445› where
| tt_3 : base_3‹s_17445›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_17446 : unit_9) -> (eq_1‹U› base_3‹U› x_17446 tt_3‹U›)
:=
  (fun unit_eta_17447 :
    ∀ (x_17448 : unit_9) -> (eq_1‹U› base_3‹U› x_17448 tt_3‹U›)
  | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›))

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  (fun not_17450 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4)

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun and_17454 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __17457 => false_5)

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun or_17460 : bool_4 -> bool_4 -> bool_4
  | true_4, __17463 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun xor_17466 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_17469 : nat_5) : nat_5

#[program]
def lte_15‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lte_17472 : nat_5 -> nat_5 -> bool_4
  | zero_6, __17475 => true_4
  | (succ_7 n_17476), zero_6 => false_5
  | (succ_7 n_17477), (succ_7 n_17478) => ((lte_17472) n_17477 n_17478))

#[program]
def lt_16‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lt_17481 : nat_5 -> nat_5 -> bool_4
  | x_17484, y_17485 => ((lte_15) (succ_7‹› x_17484) y_17485))

#[program]
def pred_17‹› : nat_5 -> nat_5 :=
  (fun pred_17487 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_17489) => n_17489)

#[program]
def add_18‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun add_17492 : nat_5 -> nat_5 -> nat_5
  | zero_6, __17495 => __17495
  | (succ_7 n_17496), __17497 => (succ_7‹› ((add_17492) n_17496 __17497)))

#[program]
def sub_19‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun sub_17500 : nat_5 -> nat_5 -> nat_5
  | __17503, zero_6 => __17503
  | __17504, (succ_7 n_17505) => ((sub_17500) ((pred_17) __17504) n_17505))

#[program]
def mul_20‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun mul_17508 : nat_5 -> nat_5 -> nat_5
  | zero_6, __17511 => zero_6
  | (succ_7 n_17512), __17513 =>
    ((add_18) __17513 ((mul_17508) n_17512 __17513)))

#[program]
def div_21‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun div_17516 : nat_5 -> nat_5 -> nat_5
  | x_17519, y_17520 =>
    (match ((lt_16) x_17519 y_17520) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_17522 :=
        (fun loop_17523 : nat_5 -> nat_5 -> nat_5
        | x_17526, y_17527 =>
          (match ((sub_19) x_17526 ((pred_17) y_17527)) in nat_5 -o nat_5
           with
          | zero_6 => zero_6
          | (succ_7 n_17529) => (succ_7‹› ((loop_17523) n_17529 y_17527))))
      in ((loop_17522) x_17519 y_17520)))

#[program]
def rem_22‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun rem_17532 : nat_5 -> nat_5 -> nat_5
  | x_17535, y_17536 =>
    ((sub_19) x_17535 ((mul_20) ((div_21) x_17535 y_17536) y_17536)))

#[program]
inductive list_6‹s_17537,t_17538› (A_17539 : Type‹s_17537›):
  Type‹t_17538›
where
| nil_8 : (list_6‹s_17537,t_17538› A_17539)
| cons_9
    (hd_17540 : A_17539) (tl_17541 : (list_6‹s_17537,t_17538› A_17539))
    : (list_6‹s_17537,t_17538› A_17539)

#[program]
def free_list_23‹s_17542,t_17543› :
  ∀ {A_17544 : Type‹s_17542›} ->
    A_17544 -> unit_9 -> (list_6‹s_17542,t_17543› A_17544) -> unit_9
:=
  (fun free_list_17548 :
    ∀ {A_17549 : Type‹s_17542›} ->
      A_17549 -> unit_9 -> (list_6‹s_17542,t_17543› A_17549) -> unit_9
  | A_17553, f_17554, nil_8 => tt_3‹U›
  | A_17555, f_17556, (cons_9 hd_17557 tl_17558) =>
    let __17559 := ((f_17556) hd_17557) in
    ((free_list_17548) A_17555 f_17556 tl_17558))

#[program]
inductive exists_7‹s_17560,r_17561› (A_17562 : Type‹s_17560›) (B_17563 : 
A_17562 -> Type‹r_17561›): L where
| ex_10
    (m_17565 : A_17562) {n_17566 : ((B_17563) m_17565)}
    : (exists_7‹s_17560,r_17561› A_17562 B_17563)

#[program]
inductive exists0_8‹s_17567,r_17568› (A_17569 : Type‹s_17567›) (B_17570 : 
A_17569 -> Type‹r_17568›): L where
| ex0_11
    {m_17572 : A_17569} (n_17573 : ((B_17570) m_17572))
    : (exists0_8‹s_17567,r_17568› A_17569 B_17570)

#[program]
inductive exists1_9‹s_17574,r_17575› (A_17576 : Type‹s_17574›) (B_17577 : 
A_17576 -> Type‹r_17575›): L where
| ex1_12
    (m_17579 : A_17576) (n_17580 : ((B_17577) m_17579))
    : (exists1_9‹s_17574,r_17575› A_17576 B_17577)

#[logical]
def tensor_24‹s_17581,r_17582› :
  Type‹s_17581› -> Type‹r_17582› -> L
:=
  (fun tensor_17585 : Type‹s_17581› -> Type‹r_17582› -> L
  | A_17588, B_17589 =>
    (exists1_9‹s_17581,r_17582›
      A_17588
      (fun _17590 : A_17588 -> Type‹r_17582›
      | __17592 => B_17589)))

#[program]
def pow_25‹› : int -> int -> int :=
  (fun pow_17595 : int -> int -> int
  | x_17598, y_17599 =>
    let loop_17600 :=
      (fun loop_17601 : int -> int -> int
      | acc_17604, y_17605 =>
        (match (__lte__ y_17605 0) in bool_4 -o int with
        | true_4 => acc_17604
        | false_5 =>
          ((loop_17601) (__mul__ x_17598 acc_17604) (__sub__ y_17605 1))))
    in ((loop_17600) 1 y_17599))

#[program]
def powm_26‹› : int -> int -> int -> int :=
  (fun powm_17610 : int -> int -> int -> int
  | x_17614, y_17615, m_17616 =>
    let loop_17617 :=
      (fun loop_17618 : int -> int -> int
      | acc_17621, y_17622 =>
        (match (__lte__ y_17622 0) in bool_4 -o int with
        | true_4 => acc_17621
        | false_5 =>
          ((loop_17618)
            (__mod__ (__mul__ x_17614 acc_17621) m_17616) (__sub__ y_17622 1))))
    in ((loop_17617) 1 y_17615))

#[program]
def ord_27‹› : char -> int :=
  (fun ord_17625 : char -> int
  | c_17627 => (__ord__ c_17627))

#[program]
def chr_28‹› : int -> char :=
  (fun chr_17629 : int -> char
  | i_17631 => (__chr__ i_17631))

#[program]
def str_29‹› : char -> string :=
  (fun str_17633 : char -> string
  | c_17635 => (__push__ "" c_17635))

#[program]
def strlen_30‹› : string -> int :=
  (fun strlen_17637 : string -> int
  | s_17639 => (__size__ s_17639))

#[program]
def string_of_int_31‹› : int -> string :=
  (fun string_of_int_17641 : int -> string
  | i_17643 =>
    let aux_17644 :=
      (fun aux_17645 : int -> string
      | i_17647 =>
        (match (__lte__ 10 i_17647) in bool_4 -o string with
        | true_4 =>
          let r_17649 := (__mod__ i_17647 10) in
          let i_17650 := (__div__ i_17647 10) in
          (__push__ ((aux_17645) i_17650)
            ((chr_28) (__add__ r_17649 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_17647 ((ord_27) 0))))))
    in
    (match (__lte__ 0 i_17643) in bool_4 -o string with
    | true_4 => ((aux_17644) i_17643)
    | false_5 => (__cat__ "~" ((aux_17644) (__neg__ i_17643)))))

#[program]
inductive tree_10‹› : U where
| Leaf_13 : tree_10
| Node_14 (__17652 : int) (l_17653 : tree_10) (r_17654 : tree_10) : tree_10

#[program]
inductive opr_11‹› : U where
| Free_15 : opr_11
| Lookup_16 (k_17655 : int) : opr_11

#[program]
def lookup_32‹› : int -> tree_10 -> bool_4 :=
  (fun lookup_17658 : int -> tree_10 -> bool_4
  | n_17661, Leaf_13 => false_5
  | n_17662, (Node_14 __17663 l_17664 r_17665) =>
    (match (__eq__ __17663 n_17662) in bool_4 -o bool_4 with
    | true_4 => true_4
    | false_5 =>
      ((or_13)
        ((lookup_17658) n_17662 l_17664) ((lookup_17658) n_17662 r_17665))))

#[logical]
def tree_p_33‹› : tree_10 -> proto :=
  (fun tree_p_17668 : tree_10 -> proto
  | t_17670 =>
    ⇓(o_17671 : opr_11) ⇒
      (match o_17671 in opr_11 -o proto with
      | Free_15 => •
      | (Lookup_16 k_17673) =>
        ⇑(__17674 :
          ((ssing_6‹U›) bool_4 ((lookup_32) k_17673 t_17670))) ⇒
          ((tree_p_17668) t_17670)))

#[logical]
def ctree_ch_34‹› : tree_10 -> L :=
  (fun ctree_ch_17676 : tree_10 -> L
  | t_17678 => ch⟨((tree_p_33) t_17678)⟩)

#[logical]
def ctree_hc_35‹› : tree_10 -> L :=
  (fun ctree_hc_17680 : tree_10 -> L
  | t_17682 => hc⟨((tree_p_33) t_17682)⟩)

#[logical]
def ctree_36‹› : tree_10 -> L :=
  (fun ctree_17684 : tree_10 -> L
  | t_17686 => IO ((ctree_hc_35) t_17686))

#[program]
def leaf_worker_37‹› : ((ctree_ch_34) Leaf_13) -> IO unit_9 :=
  (fun leaf_worker_17688 : ((ctree_ch_34) Leaf_13) -> IO unit_9
  | c_17690 =>
    let* _17691 := recv c_17690 in
    (match _17691 in
       (exists1_9‹U,L›
         opr_11
         (fun _17693 : opr_11 -> L
         | o_17695 =>
           ch⟨(match o_17695 in opr_11 -o proto with
                | Free_15 => •
                | (Lookup_16 k_17697) =>
                  ⇑(__17698 :
                    ((ssing_6‹U›) bool_4 ((lookup_32) k_17697 Leaf_13))) ⇒
                    (((fun tree_p_17699 : tree_10 -> proto
                      | t_17701 =>
                        ⇓(o_17702 : opr_11) ⇒
                          (match o_17702 in opr_11 -o proto with
                          | Free_15 => •
                          | (Lookup_16 k_17704) =>
                            ⇑(__17705 :
                              ((ssing_6‹U›)
                                bool_4 ((lookup_32) k_17704 t_17701))) ⇒
                              ((tree_p_17699) t_17701))))
                      Leaf_13))⟩)) -o
         IO base_3‹U›
     with
    | (ex1_12 m_17706 n_17707) =>
      (match m_17706, n_17707 in
         ∀ (o0_17708 : opr_11) -o
           ch⟨(match o0_17708 in opr_11 -o proto with
                | Free_15 => •
                | (Lookup_16 k_17711) =>
                  ⇑(__17712 : ((ssing_6‹U›) bool_4 false_5)) ⇒
                    ((tree_p_33) Leaf_13))⟩ -o
             IO base_3‹U›
       with
      | Free_15, __17713 => close __17713
      | (Lookup_16 k_17714), __17715 =>
        let* c_17716 := ((send __17715) (just_2‹U,U› bool_4 false_5)) in
        ((leaf_worker_17688) c_17716))))

#[program]
def node_worker_38‹› :
  ∀ (x_17717 : int) ->
    ∀ {l_17718 : tree_10} ->
      ∀ {r_17719 : tree_10} ->
        ((ctree_hc_35) l_17718) -o
          ((ctree_hc_35) r_17719) -o
            ((ctree_ch_34) (Node_14‹› x_17717 l_17718 r_17719)) -o
              IO unit_9
:=
  (fun node_worker_17723 :
    ∀ (x_17724 : int) ->
      ∀ {l_17725 : tree_10} ->
        ∀ {r_17726 : tree_10} ->
          ((ctree_hc_35) l_17725) -o
            ((ctree_hc_35) r_17726) -o
              ((ctree_ch_34) (Node_14‹› x_17724 l_17725 r_17726)) -o
                IO unit_9
  | x_17730, l_17731, r_17732, __17733, __17734, __17735 =>
    let* _17736 := recv __17735 in
    (match _17736 in
       (exists1_9‹U,L›
         opr_11
         (fun _17738 : opr_11 -> L
         | o_17740 =>
           ch⟨(match o_17740 in opr_11 -o proto with
                | Free_15 => •
                | (Lookup_16 k_17742) =>
                  ⇑(__17743 :
                    ((ssing_6‹U›)
                      bool_4
                      ((lookup_32)
                        k_17742 (Node_14‹› x_17730 l_17731 r_17732)))) ⇒
                    (((fun tree_p_17744 : tree_10 -> proto
                      | t_17746 =>
                        ⇓(o_17747 : opr_11) ⇒
                          (match o_17747 in opr_11 -o proto with
                          | Free_15 => •
                          | (Lookup_16 k_17749) =>
                            ⇑(__17750 :
                              ((ssing_6‹U›)
                                bool_4 ((lookup_32) k_17749 t_17746))) ⇒
                              ((tree_p_17744) t_17746))))
                      (Node_14‹› x_17730 l_17731 r_17732)))⟩)) -o
         IO base_3‹U›
     with
    | (ex1_12 m_17751 n_17752) =>
      (match m_17751, n_17752 in
         ∀ (o0_17753 : opr_11) -o
           ch⟨(match o0_17753 in opr_11 -o proto with
                | Free_15 => •
                | (Lookup_16 k_17756) =>
                  ⇑(__17757 :
                    ((ssing_6‹U›)
                      bool_4
                      ((lookup_32)
                        k_17756 (Node_14‹› x_17730 l_17731 r_17732)))) ⇒
                    ((tree_p_33) (Node_14‹› x_17730 l_17731 r_17732)))⟩ -o
             IO base_3‹U›
       with
      | Free_15, __17758 =>
        let* l_ch_17759 := ((send __17733) Free_15) in
        let* r_ch_17760 := ((send __17734) Free_15) in
        let* __17761 := close l_ch_17759 in
        let* __17762 := close r_ch_17760 in close __17758
      | (Lookup_16 k_17763), __17764 =>
        (match (__eq__ x_17730 k_17763), __17764 in
           ∀ (b0_17765 : bool_4) -o
             ch⟨⇑(__17767 :
                    ((ssing_6‹U›)
                      bool_4
                      (match b0_17765 in bool_4 -o bool_4 with
                      | true_4 => true_4
                      | false_5 =>
                        ((or_13)
                          ((lookup_32) k_17763 l_17731)
                          ((lookup_32) k_17763 r_17732))))) ⇒
                    ((tree_p_33) (Node_14‹› x_17730 l_17731 r_17732))⟩ -o
               IO base_3‹U›
         with
        | true_4, __17769 =>
          let* c_17770 := ((send __17769) (just_2‹U,U› bool_4 true_4)) in
          ((node_worker_17723)
            x_17730 l_17731 r_17732 __17733 __17734 c_17770)
        | false_5, __17771 =>
          let* l_ch_17772 := ((send __17733) (Lookup_16‹› k_17763)) in
          let* r_ch_17773 := ((send __17734) (Lookup_16‹› k_17763)) in
          let* _17774 := recv l_ch_17772 in
          (match _17774 in
             (exists1_9‹U,L›
               ((ssing_6‹U›) bool_4 ((lookup_32) k_17763 l_17731))
               (fun _17776 :
                 ((ssing_6‹U›) bool_4 ((lookup_32) k_17763 l_17731)) -> L
               | __17778 =>
                 hc⟨(((fun tree_p_17779 : tree_10 -> proto
                        | t_17781 =>
                          ⇓(o_17782 : opr_11) ⇒
                            (match o_17782 in opr_11 -o proto with
                            | Free_15 => •
                            | (Lookup_16 k_17784) =>
                              ⇑(__17785 :
                                ((ssing_6‹U›)
                                  bool_4 ((lookup_32) k_17784 t_17781))) ⇒
                                ((tree_p_17779) t_17781))))
                        l_17731)⟩)) -o
               IO unit_9
           with
          | (ex1_12 (just_2 m_17786) n_17787) =>
            let* _17788 := recv r_ch_17773 in
            (match _17788 in
               (exists1_9‹U,L›
                 ((ssing_6‹U›) bool_4 ((lookup_32) k_17763 r_17732))
                 (fun _17790 :
                   ((ssing_6‹U›) bool_4 ((lookup_32) k_17763 r_17732)) ->
                     L
                 | __17792 =>
                   hc⟨(((fun tree_p_17793 : tree_10 -> proto
                          | t_17795 =>
                            ⇓(o_17796 : opr_11) ⇒
                              (match o_17796 in opr_11 -o proto with
                              | Free_15 => •
                              | (Lookup_16 k_17798) =>
                                ⇑(__17799 :
                                  ((ssing_6‹U›)
                                    bool_4 ((lookup_32) k_17798 t_17795))) ⇒
                                  ((tree_p_17793) t_17795))))
                          r_17732)⟩)) -o
                 IO unit_9
             with
            | (ex1_12 (just_2 m_17800) n_17801) =>
              let* c_17802 :=
                ((send __17771)
                  (just_2‹U,U› bool_4 ((or_13) m_17786 m_17800)))
              in
              ((node_worker_17723)
                x_17730 l_17731 r_17732 n_17787 n_17801 c_17802)))))))

#[program]
def cleaf_39‹› : unit_9 -> ((ctree_36) Leaf_13) :=
  (fun cleaf_17804 : unit_9 -> ((ctree_36) Leaf_13)
  | __17806 =>
    fork
      (fun _17807 : ((ctree_ch_34) Leaf_13) -o IO unit_9
      | _17809 => ((leaf_worker_37) _17809)))

#[program]
def cnode_40‹› :
  ∀ (x_17810 : int) ->
    ∀ {l_17811 : tree_10} ->
      ∀ {r_17812 : tree_10} ->
        ((ctree_36) l_17811) -o
          ((ctree_36) r_17812) -o
            ((ctree_36) (Node_14‹› x_17810 l_17811 r_17812))
:=
  (fun cnode_17815 :
    ∀ (x_17816 : int) ->
      ∀ {l_17817 : tree_10} ->
        ∀ {r_17818 : tree_10} ->
          ((ctree_36) l_17817) -o
            ((ctree_36) r_17818) -o
              ((ctree_36) (Node_14‹› x_17816 l_17817 r_17818))
  | x_17821, l_17822, r_17823, __17824, __17825 =>
    let* l_ch_17826 := __17824 in
    let* r_ch_17827 := __17825 in
    fork
      (fun _17828 :
        ((ctree_ch_34) (Node_14‹› x_17821 l_17822 r_17823)) -o IO unit_9
      | _17830 =>
        ((node_worker_38)
          x_17821 l_17822 r_17823 l_ch_17826 r_ch_17827 _17830)))

#[program]
def cfree_41‹› :
  ∀ {t_17831 : tree_10} -> ((ctree_36) t_17831) -> IO unit_9
:=
  (fun cfree_17833 :
    ∀ {t_17834 : tree_10} -> ((ctree_36) t_17834) -> IO unit_9
  | t_17836, ct_17837 =>
    let* c_17838 := ct_17837 in
    let* c_17839 := ((send c_17838) Free_15) in close c_17839)

#[program]
def clookup_42‹› :
  ∀ (k_17840 : int) ->
    ∀ {t_17841 : tree_10} ->
      ((ctree_36) t_17841) ->
        IO ((tensor_24‹U,L›)
             ((ssing_6‹U›) bool_4 ((lookup_32) k_17840 t_17841))
             ((ctree_36) t_17841))
:=
  (fun clookup_17843 :
    ∀ (k_17844 : int) ->
      ∀ {t_17845 : tree_10} ->
        ((ctree_36) t_17845) ->
          IO ((tensor_24‹U,L›)
               ((ssing_6‹U›) bool_4 ((lookup_32) k_17844 t_17845))
               ((ctree_36) t_17845))
  | k_17847, t_17848, ct_17849 =>
    let* c_17850 := ct_17849 in
    let* c_17851 := ((send c_17850) (Lookup_16‹› k_17847)) in
    let* _17852 := recv c_17851 in
    (match _17852 in
       (exists1_9‹U,L›
         ((ssing_6‹U›) bool_4 ((lookup_32) k_17847 t_17848))
         (fun _17854 :
           ((ssing_6‹U›) bool_4 ((lookup_32) k_17847 t_17848)) -> L
         | __17856 =>
           hc⟨(((fun tree_p_17857 : tree_10 -> proto
                  | t_17859 =>
                    ⇓(o_17860 : opr_11) ⇒
                      (match o_17860 in opr_11 -o proto with
                      | Free_15 => •
                      | (Lookup_16 k_17862) =>
                        ⇑(__17863 :
                          ((ssing_6‹U›)
                            bool_4 ((lookup_32) k_17862 t_17859))) ⇒
                          ((tree_p_17857) t_17859))))
                  t_17848)⟩)) -o
         IO (exists1_9‹U,L›
              ((ssing_6‹U›) bool_4 ((lookup_32) k_17847 t_17848))
              (fun _17864 :
                ((ssing_6‹U›) bool_4 ((lookup_32) k_17847 t_17848)) -> L
              | __17866 => ((ctree_36) t_17848)))
     with
    | (ex1_12 m_17867 n_17868) =>
      return (ex1_12‹U,L›
               ((ssing_6‹U›) bool_4 ((lookup_32) k_17847 t_17848))
               (fun _17869 :
                 ((ssing_6‹U›) bool_4 ((lookup_32) k_17847 t_17848)) -> L
               | __17871 => ((ctree_36) t_17848)) m_17867 return n_17868)))

#[program]
def mytree1_43‹› :
  ∀ (x_17872 : int) -> ((ctree_36) (Node_14‹› x_17872 Leaf_13 Leaf_13))
:=
  (fun mytree1_17873 :
    ∀ (x_17874 : int) ->
      ((ctree_36) (Node_14‹› x_17874 Leaf_13 Leaf_13))
  | x_17875 =>
    ((cnode_40)
      x_17875 Leaf_13 Leaf_13 ((cleaf_39) tt_3‹U›)
      ((cleaf_39) tt_3‹U›)))

#[program]
def mytree2_44‹› :
  ∀ (x_17876 : int) ->
    ((ctree_36)
      (Node_14‹›
        x_17876 (Node_14‹› 1 Leaf_13 Leaf_13)
        (Node_14‹› 2 Leaf_13 Leaf_13)))
:=
  (fun mytree2_17877 :
    ∀ (x_17878 : int) ->
      ((ctree_36)
        (Node_14‹›
          x_17878 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13)))
  | x_17879 =>
    ((cnode_40)
      x_17879 (Node_14‹› 1 Leaf_13 Leaf_13)
      (Node_14‹› 2 Leaf_13 Leaf_13) ((mytree1_43) 1) ((mytree1_43) 2)))

#[program]
def mytree3_45‹› :
  ∀ (x_17880 : int) ->
    ((ctree_36)
      (Node_14‹›
        x_17880
        (Node_14‹›
          3 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13))
        (Node_14‹›
          4 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13))))
:=
  (fun mytree3_17881 :
    ∀ (x_17882 : int) ->
      ((ctree_36)
        (Node_14‹›
          x_17882
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))))
  | x_17883 =>
    ((cnode_40)
      x_17883
      (Node_14‹›
        3 (Node_14‹› 1 Leaf_13 Leaf_13) (Node_14‹› 2 Leaf_13 Leaf_13))
      (Node_14‹›
        4 (Node_14‹› 1 Leaf_13 Leaf_13) (Node_14‹› 2 Leaf_13 Leaf_13))
      ((mytree2_44) 3) ((mytree2_44) 4)))

#[program]
def mytree4_46‹› :
  ∀ (x_17884 : int) ->
    ((ctree_36)
      (Node_14‹›
        x_17884
        (Node_14‹›
          8
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13)))
        (Node_14‹›
          7
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13)))))
:=
  (fun mytree4_17885 :
    ∀ (x_17886 : int) ->
      ((ctree_36)
        (Node_14‹›
          x_17886
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))))
  | x_17887 =>
    ((cnode_40)
      x_17887
      (Node_14‹›
        8
        (Node_14‹›
          3 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13))
        (Node_14‹›
          4 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13)))
      (Node_14‹›
        7
        (Node_14‹›
          3 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13))
        (Node_14‹›
          4 (Node_14‹› 1 Leaf_13 Leaf_13)
          (Node_14‹› 2 Leaf_13 Leaf_13)))
      ((mytree3_45) 8) ((mytree3_45) 7)))

#[program]
def mytree5_47‹› :
  ∀ (x_17888 : int) ->
    ((ctree_36)
      (Node_14‹›
        x_17888
        (Node_14‹›
          9
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))))
        (Node_14‹›
          10
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))))))
:=
  (fun mytree5_17889 :
    ∀ (x_17890 : int) ->
      ((ctree_36)
        (Node_14‹›
          x_17890
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))))
  | x_17891 =>
    ((cnode_40)
      x_17891
      (Node_14‹›
        9
        (Node_14‹›
          8
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13)))
        (Node_14‹›
          7
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))))
      (Node_14‹›
        10
        (Node_14‹›
          8
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13)))
        (Node_14‹›
          7
          (Node_14‹›
            3 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))
          (Node_14‹›
            4 (Node_14‹› 1 Leaf_13 Leaf_13)
            (Node_14‹› 2 Leaf_13 Leaf_13))))
      ((mytree4_46) 9) ((mytree4_46) 10)))

#[program]
def mytree6_48‹› :
  ∀ (x_17892 : int) ->
    ((ctree_36)
      (Node_14‹›
        x_17892
        (Node_14‹›
          11
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))))
        (Node_14‹›
          12
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))))))
:=
  (fun mytree6_17893 :
    ∀ (x_17894 : int) ->
      ((ctree_36)
        (Node_14‹›
          x_17894
          (Node_14‹›
            11
            (Node_14‹›
              9
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))))
            (Node_14‹›
              10
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))))
          (Node_14‹›
            12
            (Node_14‹›
              9
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))))
            (Node_14‹›
              10
              (Node_14‹›
                8
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))
              (Node_14‹›
                7
                (Node_14‹›
                  3 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13))
                (Node_14‹›
                  4 (Node_14‹› 1 Leaf_13 Leaf_13)
                  (Node_14‹› 2 Leaf_13 Leaf_13)))))))
  | x_17895 =>
    ((cnode_40)
      x_17895
      (Node_14‹›
        11
        (Node_14‹›
          9
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))))
        (Node_14‹›
          10
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))))
      (Node_14‹›
        12
        (Node_14‹›
          9
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))))
        (Node_14‹›
          10
          (Node_14‹›
            8
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))
          (Node_14‹›
            7
            (Node_14‹›
              3 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13))
            (Node_14‹›
              4 (Node_14‹› 1 Leaf_13 Leaf_13)
              (Node_14‹› 2 Leaf_13 Leaf_13)))))
      ((mytree5_47) 11) ((mytree5_47) 12)))

#[program]
def main_49‹› : IO unit_9 :=
  let ct_17896 := ((mytree6_48) 100) in
  let* _17897 :=
    ((clookup_42)
      1
      (Node_14‹›
        100
        (Node_14‹›
          11
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))))
        (Node_14‹›
          12
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))))
      ct_17896)
  in
  (match _17897 in
     ((tensor_24‹U,L›)
       ((ssing_6‹U›)
         bool_4
         ((lookup_32)
           1
           (Node_14‹›
             100
             (Node_14‹›
               11
               (Node_14‹›
                 9
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))))
               (Node_14‹›
                 10
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))))
             (Node_14‹›
               12
               (Node_14‹›
                 9
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))))
               (Node_14‹›
                 10
                 (Node_14‹›
                   8
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13)))
                 (Node_14‹›
                   7
                   (Node_14‹›
                     3 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))
                   (Node_14‹›
                     4 (Node_14‹› 1 Leaf_13 Leaf_13)
                     (Node_14‹› 2 Leaf_13 Leaf_13))))))))
       ((ctree_36)
         (Node_14‹›
           100
           (Node_14‹›
             11
             (Node_14‹›
               9
               (Node_14‹›
                 8
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))
               (Node_14‹›
                 7
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))))
             (Node_14‹›
               10
               (Node_14‹›
                 8
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))
               (Node_14‹›
                 7
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))))
           (Node_14‹›
             12
             (Node_14‹›
               9
               (Node_14‹›
                 8
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))
               (Node_14‹›
                 7
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))))
             (Node_14‹›
               10
               (Node_14‹›
                 8
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))
               (Node_14‹›
                 7
                 (Node_14‹›
                   3 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13))
                 (Node_14‹›
                   4 (Node_14‹› 1 Leaf_13 Leaf_13)
                   (Node_14‹› 2 Leaf_13 Leaf_13)))))))) -o
       IO unit_9
   with
  | (ex1_12 (just_2 m_17899) n_17900) =>
    let* __17901 :=
      (match m_17899 in bool_4 -o IO base_3‹U› with
      | true_4 => print "true"
      | false_5 => print "false")
    in
    ((cfree_41)
      (Node_14‹›
        100
        (Node_14‹›
          11
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))))
        (Node_14‹›
          12
          (Node_14‹›
            9
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))
          (Node_14‹›
            10
            (Node_14‹›
              8
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13)))
            (Node_14‹›
              7
              (Node_14‹›
                3 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))
              (Node_14‹›
                4 (Node_14‹› 1 Leaf_13 Leaf_13)
                (Node_14‹› 2 Leaf_13 Leaf_13))))))
      n_17900))

[trans1e success]

-----------------------------------------

#[program]
def idU_51 := fun id_43635 (A_43636) -> (m_43637) ->
                m_43637

#[program]
def idL_50 := fun id_43638 (A_43639) -> (m_43640) ->
                m_43640

#[logical]
inductive eqU_13 where
| reflU_18 of layout[]

#[logical]
inductive eqL_12 where
| reflL_17 of layout[]

#[program]
def rwlUU_55 :=
  fun rwl_43641 {A_43642} -> {m_43643} -> {n_43644} -> {B_43645} ->
  {__43646} -> (__43647) ->
    (match {NULL} with
    | reflU_18  => __43647)

#[program]
def rwlUL_54 :=
  fun rwl_43648 {A_43649} -> {m_43650} -> {n_43651} -> {B_43652} ->
  {__43653} -> (__43654) ->
    (match {NULL} with
    | reflU_18  => __43654)

#[program]
def rwlLU_53 :=
  fun rwl_43655 {A_43656} -> {m_43657} -> {n_43658} -> {B_43659} ->
  {__43660} -> (__43661) ->
    (match {NULL} with
    | reflL_17  => __43661)

#[program]
def rwlLL_52 :=
  fun rwl_43662 {A_43663} -> {m_43664} -> {n_43665} -> {B_43666} ->
  {__43667} -> (__43668) ->
    (match {NULL} with
    | reflL_17  => __43668)

#[program]
def rwrUU_59 :=
  fun rwr_43669 {A_43670} -> {m_43671} -> {n_43672} -> {B_43673} ->
  {__43674} -> (__43675) ->
    (match {NULL} with
    | reflU_18  => __43675)

#[program]
def rwrUL_58 :=
  fun rwr_43676 {A_43677} -> {m_43678} -> {n_43679} -> {B_43680} ->
  {__43681} -> (__43682) ->
    (match {NULL} with
    | reflU_18  => __43682)

#[program]
def rwrLU_57 :=
  fun rwr_43683 {A_43684} -> {m_43685} -> {n_43686} -> {B_43687} ->
  {__43688} -> (__43689) ->
    (match {NULL} with
    | reflL_17  => __43689)

#[program]
def rwrLL_56 :=
  fun rwr_43690 {A_43691} -> {m_43692} -> {n_43693} -> {B_43694} ->
  {__43695} -> (__43696) ->
    (match {NULL} with
    | reflL_17  => __43696)

#[logical]
def congrUUU_67 := NULL

#[logical]
def congrUUL_66 := NULL

#[logical]
def congrULU_65 := NULL

#[logical]
def congrULL_64 := NULL

#[logical]
def congrLUU_63 := NULL

#[logical]
def congrLUL_62 := NULL

#[logical]
def congrLLU_61 := NULL

#[logical]
def congrLLL_60 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_17 where
| justUU_22 of layout[R]

#[program]
inductive singUL_16 where
| justUL_21 of layout[R]

#[program]
inductive singLU_15 where


#[program]
inductive singLL_14 where
| justLL_19 of layout[R]

#[logical]
def ssingU_69 := NULL

#[logical]
def ssingL_68 := NULL

#[program]
def sing_elimUU_73 :=
  fun sing_elim_43697 {A_43698} -> {x_43699} -> (__43700) ->
    (match __43700 with
    | justUU_22 m_43701 => m_43701)

#[program]
def sing_elimUL_72 :=
  fun sing_elim_43702 {A_43703} -> {x_43704} -> (__43705) ->
    (match __43705 with
    | justUL_21 m_43706 => m_43706)

#[program]
def sing_elimLU_71 :=
  fun sing_elim_43707 {A_43708} -> {x_43709} -> (__43710) ->
    (match __43710 with
    )

#[program]
def sing_elimLL_70 :=
  fun sing_elim_43711 {A_43712} -> {x_43713} -> (__43714) ->
    (match __43714 with
    | justLL_19 m_43715 => m_43715)

#[logical]
def sing_uniqUU_77 := NULL

#[logical]
def sing_uniqUL_76 := NULL

#[logical]
def sing_uniqLU_75 := NULL

#[logical]
def sing_uniqLL_74 := NULL

#[program]
inductive baseU_19 where
| ttU_24 of layout[]

#[program]
inductive baseL_18 where
| ttL_23 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_43716 (__43717) ->
    (match __43717 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_43718 (__43719) -> (__43720) ->
    (match __43719 with
    | true_4  =>
      (match __43720 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_43721 (__43722) -> (__43723) ->
    (match __43722 with
    | true_4  => true_4
    | false_5  =>
      (match __43723 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_43724 (__43725) -> (__43726) ->
    (match __43725 with
    | true_4  =>
      (match __43726 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __43726 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_43727 (__43728) -> (__43729) ->
    (match __43728 with
    | zero_6  => true_4
    | succ_7 n_43730 =>
      (match __43729 with
      | zero_6  => false_5 | succ_7 n_43731 => ((lte_43727) n_43730 n_43731)))

#[program]
def lt_16 :=
  fun lt_43732 (x_43733) -> (y_43734) ->
    ((lte_15) (succ_7 x_43733) y_43734)

#[program]
def pred_17 :=
  fun pred_43735 (__43736) ->
    (match __43736 with
    | zero_6  => zero_6 | succ_7 n_43737 => n_43737)

#[program]
def add_18 :=
  fun add_43738 (__43739) -> (__43740) ->
    (match __43739 with
    | zero_6  => __43740
    | succ_7 n_43741 => (succ_7 ((add_43738) n_43741 __43740)))

#[program]
def sub_19 :=
  fun sub_43742 (__43743) -> (__43744) ->
    (match __43744 with
    | zero_6  => __43743
    | succ_7 n_43745 => ((sub_43742) ((pred_17) __43743) n_43745))

#[program]
def mul_20 :=
  fun mul_43746 (__43747) -> (__43748) ->
    (match __43747 with
    | zero_6  => zero_6
    | succ_7 n_43749 => ((add_18) __43748 ((mul_43746) n_43749 __43748)))

#[program]
def div_21 :=
  fun div_43750 (x_43751) -> (y_43752) ->
    (match ((lt_16) x_43751 y_43752) with
    | true_4  => zero_6
    | false_5  =>
      let loop_43753 :=
        fun loop_43754 (x_43755) -> (y_43756) ->
          (match ((sub_19) x_43755 ((pred_17) y_43756)) with
          | zero_6  => zero_6
          | succ_7 n_43757 => (succ_7 ((loop_43754) n_43757 y_43756)))
      in ((loop_43753) x_43751 y_43752))

#[program]
def rem_22 :=
  fun rem_43758 (x_43759) -> (y_43760) ->
    ((sub_19) x_43759 ((mul_20) ((div_21) x_43759 y_43760) y_43760))

#[program]
inductive listUU_23 where
| nilUU_31 of layout[]
| consUU_32 of layout[R, R]

#[program]
inductive listUL_22 where
| nilUL_29 of layout[]
| consUL_30 of layout[R, R]

#[program]
inductive listLU_21 where
| nilLU_27 of layout[]

#[program]
inductive listLL_20 where
| nilLL_25 of layout[]
| consLL_26 of layout[R, R]

#[program]
def free_listUU_81 :=
  fun free_list_43761 {A_43762} -> (f_43763) -> (__43764) ->
    (match __43764 with
    | nilUU_31  => ttU_24
    | consUU_32 hd_43765 tl_43766 =>
      let __43767 := ((f_43763) hd_43765) in
      ((free_list_43761) NULL f_43763 tl_43766))

#[program]
def free_listUL_80 :=
  fun free_list_43768 {A_43769} -> (f_43770) -> (__43771) ->
    (match __43771 with
    | nilUL_29  => ttU_24
    | consUL_30 hd_43772 tl_43773 =>
      let __43774 := ((f_43770) hd_43772) in
      ((free_list_43768) NULL f_43770 tl_43773))

#[program]
def free_listLL_78 :=
  fun free_list_43775 {A_43776} -> (f_43777) -> (__43778) ->
    (match __43778 with
    | nilLL_25  => ttU_24
    | consLL_26 hd_43779 tl_43780 =>
      let __43781 := ((f_43777) hd_43779) in
      ((free_list_43775) NULL f_43777 tl_43780))

#[program]
inductive existsUU_27 where
| exUU_36 of layout[R, N]

#[program]
inductive existsUL_26 where
| exUL_35 of layout[R, N]

#[program]
inductive existsLU_25 where
| exLU_34 of layout[R, N]

#[program]
inductive existsLL_24 where
| exLL_33 of layout[R, N]

#[program]
inductive exists0UU_31 where
| ex0UU_40 of layout[N, R]

#[program]
inductive exists0UL_30 where
| ex0UL_39 of layout[N, R]

#[program]
inductive exists0LU_29 where
| ex0LU_38 of layout[N, R]

#[program]
inductive exists0LL_28 where
| ex0LL_37 of layout[N, R]

#[program]
inductive exists1UU_35 where
| ex1UU_44 of layout[R, R]

#[program]
inductive exists1UL_34 where
| ex1UL_43 of layout[R, R]

#[program]
inductive exists1LU_33 where
| ex1LU_42 of layout[R, R]

#[program]
inductive exists1LL_32 where
| ex1LL_41 of layout[R, R]

#[logical]
def tensorUU_85 := NULL

#[logical]
def tensorUL_84 := NULL

#[logical]
def tensorLU_83 := NULL

#[logical]
def tensorLL_82 := NULL

#[program]
def pow_25 :=
  fun pow_43782 (x_43783) -> (y_43784) ->
    let loop_43785 :=
      fun loop_43786 (acc_43787) -> (y_43788) ->
        (match (__lte__ y_43788 0) with
        | true_4  => acc_43787
        | false_5  =>
          ((loop_43786) (__mul__ x_43783 acc_43787) (__sub__ y_43788 1)))
    in ((loop_43785) 1 y_43784)

#[program]
def powm_26 :=
  fun powm_43789 (x_43790) -> (y_43791) -> (m_43792) ->
    let loop_43793 :=
      fun loop_43794 (acc_43795) -> (y_43796) ->
        (match (__lte__ y_43796 0) with
        | true_4  => acc_43795
        | false_5  =>
          ((loop_43794)
            (__mod__ (__mul__ x_43790 acc_43795) m_43792) (__sub__ y_43796 1)))
    in ((loop_43793) 1 y_43791)

#[program]
def ord_27 := fun ord_43797 (c_43798) ->
                (__ord__ c_43798)

#[program]
def chr_28 := fun chr_43799 (i_43800) ->
                (__chr__ i_43800)

#[program]
def str_29 := fun str_43801 (c_43802) ->
                (__push__ "" c_43802)

#[program]
def strlen_30 := fun strlen_43803 (s_43804) ->
                   (__size__ s_43804)

#[program]
def string_of_int_31 :=
  fun string_of_int_43805 (i_43806) ->
    let aux_43807 :=
      fun aux_43808 (i_43809) ->
        (match (__lte__ 10 i_43809) with
        | true_4  =>
          let r_43810 := (__mod__ i_43809 10) in
          let i_43811 := (__div__ i_43809 10) in
          (__push__ ((aux_43808) i_43811)
            ((chr_28) (__add__ r_43810 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_43809 ((ord_27) 0)))))
    in
    (match (__lte__ 0 i_43806) with
    | true_4  => ((aux_43807) i_43806)
    | false_5  => (__cat__ "~" ((aux_43807) (__neg__ i_43806))))

#[program]
inductive tree_10 where
| Leaf_13 of layout[]
| Node_14 of layout[R, R, R]

#[program]
inductive opr_11 where
| Free_15 of layout[]
| Lookup_16 of layout[R]

#[program]
def lookup_32 :=
  fun lookup_43812 (n_43813) -> (__43814) ->
    (match __43814 with
    | Leaf_13  => false_5
    | Node_14 __43815 l_43816 r_43817 =>
      (match (__eq__ __43815 n_43813) with
      | true_4  => true_4
      | false_5  =>
        ((or_13)
          ((lookup_43812) n_43813 l_43816) ((lookup_43812) n_43813 r_43817))))

#[logical]
def tree_p_33 := NULL

#[logical]
def ctree_ch_34 := NULL

#[logical]
def ctree_hc_35 := NULL

#[logical]
def ctree_36 := NULL

#[program]
def leaf_worker_37 :=
  fun leaf_worker_43818 (c_43819) ->
    let* _43820 := recv[R,U] c_43819 in
    (match _43820 with
    | ex1UL_43 m_43821 n_43822 =>
      (match m_43821 with
      | Free_15  => close[true] n_43822
      | Lookup_16 k_43823 =>
        let* c_43824 := ((send[R,U] n_43822) (justUU_22 false_5)) in
        ((leaf_worker_43818) c_43824)))

#[program]
def node_worker_38 :=
  fun node_worker_43825 (x_43826) -> {l_43827} -> {r_43828} -> (__43829) -o
  (__43830) -o (__43831) -o
    let* _43832 := recv[R,U] __43831 in
    (match _43832 with
    | ex1UL_43 m_43833 n_43834 =>
      (match m_43833 with
      | Free_15  =>
        let* l_ch_43835 := ((send[R,U] __43829) Free_15) in
        let* r_ch_43836 := ((send[R,U] __43830) Free_15) in
        let* __43837 := close[false] l_ch_43835 in
        let* __43838 := close[false] r_ch_43836 in close[true] n_43834
      | Lookup_16 k_43839 =>
        (match (__eq__ x_43826 k_43839) with
        | true_4  =>
          let* c_43840 := ((send[R,U] n_43834) (justUU_22 true_4)) in
          ((node_worker_43825) x_43826 NULL NULL __43829 __43830 c_43840)
        | false_5  =>
          let* l_ch_43841 := ((send[R,U] __43829) (Lookup_16 k_43839)) in
          let* r_ch_43842 := ((send[R,U] __43830) (Lookup_16 k_43839)) in
          let* _43843 := recv[R,U] l_ch_43841 in
          (match _43843 with
          | ex1UL_43 m_43844 n_43845 =>
            (match m_43844 with
            | justUU_22 m_43846 =>
              let* _43847 := recv[R,U] r_ch_43842 in
              (match _43847 with
              | ex1UL_43 m_43848 n_43849 =>
                (match m_43848 with
                | justUU_22 m_43850 =>
                  let* c_43851 :=
                    ((send[R,U] n_43834)
                      (justUU_22 ((or_13) m_43846 m_43850)))
                  in
                  ((node_worker_43825)
                    x_43826 NULL NULL n_43845 n_43849 c_43851))))))))

#[program]
def cleaf_39 :=
  fun cleaf_43852 (__43853) ->
    fork fun _43854 (_43855) -o
           ((leaf_worker_37) _43855)

#[program]
def cnode_40 :=
  fun cnode_43856 (x_43857) -> {l_43858} -> {r_43859} -> (__43860) -o
  (__43861) -o
    let* l_ch_43862 := __43860 in
    let* r_ch_43863 := __43861 in
    fork
      fun _43864 (_43865) -o
        ((node_worker_38) x_43857 NULL NULL l_ch_43862 r_ch_43863 _43865)

#[program]
def cfree_41 :=
  fun cfree_43866 {t_43867} -> (ct_43868) ->
    let* c_43869 := ct_43868 in
    let* c_43870 := ((send[R,U] c_43869) Free_15) in close[false] c_43870

#[program]
def clookup_42 :=
  fun clookup_43871 (k_43872) -> {t_43873} -> (ct_43874) ->
    let* c_43875 := ct_43874 in
    let* c_43876 := ((send[R,U] c_43875) (Lookup_16 k_43872)) in
    let* _43877 := recv[R,U] c_43876 in
    (match _43877 with
    | ex1UL_43 m_43878 n_43879 => return (ex1UL_43 m_43878 return n_43879))

#[program]
def mytree1_43 :=
  fun mytree1_43880 (x_43881) ->
    ((cnode_40) x_43881 NULL NULL ((cleaf_39) ttU_24) ((cleaf_39) ttU_24))

#[program]
def mytree2_44 :=
  fun mytree2_43882 (x_43883) ->
    ((cnode_40) x_43883 NULL NULL ((mytree1_43) 1) ((mytree1_43) 2))

#[program]
def mytree3_45 :=
  fun mytree3_43884 (x_43885) ->
    ((cnode_40) x_43885 NULL NULL ((mytree2_44) 3) ((mytree2_44) 4))

#[program]
def mytree4_46 :=
  fun mytree4_43886 (x_43887) ->
    ((cnode_40) x_43887 NULL NULL ((mytree3_45) 8) ((mytree3_45) 7))

#[program]
def mytree5_47 :=
  fun mytree5_43888 (x_43889) ->
    ((cnode_40) x_43889 NULL NULL ((mytree4_46) 9) ((mytree4_46) 10))

#[program]
def mytree6_48 :=
  fun mytree6_43890 (x_43891) ->
    ((cnode_40) x_43891 NULL NULL ((mytree5_47) 11) ((mytree5_47) 12))

#[program]
def main :=
  let ct_43892 := ((mytree6_48) 100) in
  let* _43893 := ((clookup_42) 1 NULL ct_43892) in
  (match _43893 with
  | ex1UL_43 m_43894 n_43895 =>
    (match m_43894 with
    | justUU_22 m_43896 =>
      let* __43897 :=
        (match m_43896 with
        | true_4  => print "true" | false_5  => print "false")
      in ((cfree_41) NULL n_43895)))

[trans12 success]

-----------------------------------------

#[program]
def idU_51 := fun id_44161 (A_44162) -> (m_44163) ->
                m_44163

#[program]
def idL_50 := fun id_44164 (A_44165) -> (m_44166) ->
                m_44166

#[logical]
inductive eqU_13 where
| reflU_18 of layout[]

#[logical]
inductive eqL_12 where
| reflL_17 of layout[]

#[program]
def rwlUU_55 :=
  fun rwl_44167 {A_44168} -> {m_44169} -> {n_44170} -> {B_44171} ->
  {__44172} -> (__44173) ->
    __44173

#[program]
def rwlUL_54 :=
  fun rwl_44174 {A_44175} -> {m_44176} -> {n_44177} -> {B_44178} ->
  {__44179} -> (__44180) ->
    __44180

#[program]
def rwlLU_53 :=
  fun rwl_44181 {A_44182} -> {m_44183} -> {n_44184} -> {B_44185} ->
  {__44186} -> (__44187) ->
    __44187

#[program]
def rwlLL_52 :=
  fun rwl_44188 {A_44189} -> {m_44190} -> {n_44191} -> {B_44192} ->
  {__44193} -> (__44194) ->
    __44194

#[program]
def rwrUU_59 :=
  fun rwr_44195 {A_44196} -> {m_44197} -> {n_44198} -> {B_44199} ->
  {__44200} -> (__44201) ->
    __44201

#[program]
def rwrUL_58 :=
  fun rwr_44202 {A_44203} -> {m_44204} -> {n_44205} -> {B_44206} ->
  {__44207} -> (__44208) ->
    __44208

#[program]
def rwrLU_57 :=
  fun rwr_44209 {A_44210} -> {m_44211} -> {n_44212} -> {B_44213} ->
  {__44214} -> (__44215) ->
    __44215

#[program]
def rwrLL_56 :=
  fun rwr_44216 {A_44217} -> {m_44218} -> {n_44219} -> {B_44220} ->
  {__44221} -> (__44222) ->
    __44222

#[logical]
def congrUUU_67 := NULL

#[logical]
def congrUUL_66 := NULL

#[logical]
def congrULU_65 := NULL

#[logical]
def congrULL_64 := NULL

#[logical]
def congrLUU_63 := NULL

#[logical]
def congrLUL_62 := NULL

#[logical]
def congrLLU_61 := NULL

#[logical]
def congrLLL_60 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_17 where
| justUU_22 of layout[R]

#[program]
inductive singUL_16 where
| justUL_21 of layout[R]

#[program]
inductive singLU_15 where


#[program]
inductive singLL_14 where
| justLL_19 of layout[R]

#[logical]
def ssingU_69 := NULL

#[logical]
def ssingL_68 := NULL

#[program]
def sing_elimUU_73 :=
  fun sing_elim_44223 {A_44224} -> {x_44225} -> (__44226) ->
    (match __44226 with
    | justUU_22 m_44227 => m_44227)

#[program]
def sing_elimUL_72 :=
  fun sing_elim_44228 {A_44229} -> {x_44230} -> (__44231) ->
    (match __44231 with
    | justUL_21 m_44232 => m_44232)

#[program]
def sing_elimLU_71 :=
  fun sing_elim_44233 {A_44234} -> {x_44235} -> (__44236) ->
    !!

#[program]
def sing_elimLL_70 :=
  fun sing_elim_44237 {A_44238} -> {x_44239} -> (__44240) ->
    (match __44240 with
    | justLL_19 m_44241 => m_44241)

#[logical]
def sing_uniqUU_77 := NULL

#[logical]
def sing_uniqUL_76 := NULL

#[logical]
def sing_uniqLU_75 := NULL

#[logical]
def sing_uniqLL_74 := NULL

#[program]
inductive baseU_19 where
| ttU_24 of layout[]

#[program]
inductive baseL_18 where
| ttL_23 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_44242 (__44243) ->
    (match __44243 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_44244 (__44245) -> (__44246) ->
    (match __44245 with
    | true_4  =>
      (match __44246 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_44247 (__44248) -> (__44249) ->
    (match __44248 with
    | true_4  => true_4
    | false_5  =>
      (match __44249 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_44250 (__44251) -> (__44252) ->
    (match __44251 with
    | true_4  =>
      (match __44252 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __44252 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_44253 (__44254) -> (__44255) ->
    (match __44254 with
    | zero_6  => true_4
    | succ_7 n_44256 =>
      (match __44255 with
      | zero_6  => false_5 | succ_7 n_44257 => ((lte_44253) n_44256 n_44257)))

#[program]
def lt_16 :=
  fun lt_44258 (x_44259) -> (y_44260) ->
    ((lte_15) (succ_7 x_44259) y_44260)

#[program]
def pred_17 :=
  fun pred_44261 (__44262) ->
    (match __44262 with
    | zero_6  => zero_6 | succ_7 n_44263 => n_44263)

#[program]
def add_18 :=
  fun add_44264 (__44265) -> (__44266) ->
    (match __44265 with
    | zero_6  => __44266
    | succ_7 n_44267 => (succ_7 ((add_44264) n_44267 __44266)))

#[program]
def sub_19 :=
  fun sub_44268 (__44269) -> (__44270) ->
    (match __44270 with
    | zero_6  => __44269
    | succ_7 n_44271 => ((sub_44268) ((pred_17) __44269) n_44271))

#[program]
def mul_20 :=
  fun mul_44272 (__44273) -> (__44274) ->
    (match __44273 with
    | zero_6  => zero_6
    | succ_7 n_44275 => ((add_18) __44274 ((mul_44272) n_44275 __44274)))

#[program]
def div_21 :=
  fun div_44276 (x_44277) -> (y_44278) ->
    (match ((lt_16) x_44277 y_44278) with
    | true_4  => zero_6
    | false_5  =>
      let loop_44279 :=
        fun loop_44280 (x_44281) -> (y_44282) ->
          (match ((sub_19) x_44281 ((pred_17) y_44282)) with
          | zero_6  => zero_6
          | succ_7 n_44283 => (succ_7 ((loop_44280) n_44283 y_44282)))
      in ((loop_44279) x_44277 y_44278))

#[program]
def rem_22 :=
  fun rem_44284 (x_44285) -> (y_44286) ->
    ((sub_19) x_44285 ((mul_20) ((div_21) x_44285 y_44286) y_44286))

#[program]
inductive listUU_23 where
| nilUU_31 of layout[]
| consUU_32 of layout[R, R]

#[program]
inductive listUL_22 where
| nilUL_29 of layout[]
| consUL_30 of layout[R, R]

#[program]
inductive listLU_21 where
| nilLU_27 of layout[]

#[program]
inductive listLL_20 where
| nilLL_25 of layout[]
| consLL_26 of layout[R, R]

#[program]
def free_listUU_81 :=
  fun free_list_44287 {A_44288} -> (f_44289) -> (__44290) ->
    (match __44290 with
    | nilUU_31  => ttU_24
    | consUU_32 hd_44291 tl_44292 =>
      let __44293 := ((f_44289) hd_44291) in
      ((free_list_44287) NULL f_44289 tl_44292))

#[program]
def free_listUL_80 :=
  fun free_list_44294 {A_44295} -> (f_44296) -> (__44297) ->
    (match __44297 with
    | nilUL_29  => ttU_24
    | consUL_30 hd_44298 tl_44299 =>
      let __44300 := ((f_44296) hd_44298) in
      ((free_list_44294) NULL f_44296 tl_44299))

#[program]
def free_listLL_78 :=
  fun free_list_44301 {A_44302} -> (f_44303) -> (__44304) ->
    (match __44304 with
    | nilLL_25  => ttU_24
    | consLL_26 hd_44305 tl_44306 =>
      let __44307 := ((f_44303) hd_44305) in
      ((free_list_44301) NULL f_44303 tl_44306))

#[program]
inductive existsUU_27 where
| exUU_36 of layout[R, N]

#[program]
inductive existsUL_26 where
| exUL_35 of layout[R, N]

#[program]
inductive existsLU_25 where
| exLU_34 of layout[R, N]

#[program]
inductive existsLL_24 where
| exLL_33 of layout[R, N]

#[program]
inductive exists0UU_31 where
| ex0UU_40 of layout[N, R]

#[program]
inductive exists0UL_30 where
| ex0UL_39 of layout[N, R]

#[program]
inductive exists0LU_29 where
| ex0LU_38 of layout[N, R]

#[program]
inductive exists0LL_28 where
| ex0LL_37 of layout[N, R]

#[program]
inductive exists1UU_35 where
| ex1UU_44 of layout[R, R]

#[program]
inductive exists1UL_34 where
| ex1UL_43 of layout[R, R]

#[program]
inductive exists1LU_33 where
| ex1LU_42 of layout[R, R]

#[program]
inductive exists1LL_32 where
| ex1LL_41 of layout[R, R]

#[logical]
def tensorUU_85 := NULL

#[logical]
def tensorUL_84 := NULL

#[logical]
def tensorLU_83 := NULL

#[logical]
def tensorLL_82 := NULL

#[program]
def pow_25 :=
  fun pow_44308 (x_44309) -> (y_44310) ->
    let loop_44311 :=
      fun loop_44312 (acc_44313) -> (y_44314) ->
        (match (__lte__ y_44314 0) with
        | true_4  => acc_44313
        | false_5  =>
          ((loop_44312) (__mul__ x_44309 acc_44313) (__sub__ y_44314 1)))
    in ((loop_44311) 1 y_44310)

#[program]
def powm_26 :=
  fun powm_44315 (x_44316) -> (y_44317) -> (m_44318) ->
    let loop_44319 :=
      fun loop_44320 (acc_44321) -> (y_44322) ->
        (match (__lte__ y_44322 0) with
        | true_4  => acc_44321
        | false_5  =>
          ((loop_44320)
            (__mod__ (__mul__ x_44316 acc_44321) m_44318) (__sub__ y_44322 1)))
    in ((loop_44319) 1 y_44317)

#[program]
def ord_27 := fun ord_44323 (c_44324) ->
                (__ord__ c_44324)

#[program]
def chr_28 := fun chr_44325 (i_44326) ->
                (__chr__ i_44326)

#[program]
def str_29 := fun str_44327 (c_44328) ->
                (__push__ "" c_44328)

#[program]
def strlen_30 := fun strlen_44329 (s_44330) ->
                   (__size__ s_44330)

#[program]
def string_of_int_31 :=
  fun string_of_int_44331 (i_44332) ->
    let aux_44333 :=
      fun aux_44334 (i_44335) ->
        (match (__lte__ 10 i_44335) with
        | true_4  =>
          let r_44336 := (__mod__ i_44335 10) in
          let i_44337 := (__div__ i_44335 10) in
          (__push__ ((aux_44334) i_44337)
            ((chr_28) (__add__ r_44336 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_44335 ((ord_27) 0)))))
    in
    (match (__lte__ 0 i_44332) with
    | true_4  => ((aux_44333) i_44332)
    | false_5  => (__cat__ "~" ((aux_44333) (__neg__ i_44332))))

#[program]
inductive tree_10 where
| Leaf_13 of layout[]
| Node_14 of layout[R, R, R]

#[program]
inductive opr_11 where
| Free_15 of layout[]
| Lookup_16 of layout[R]

#[program]
def lookup_32 :=
  fun lookup_44338 (n_44339) -> (__44340) ->
    (match __44340 with
    | Leaf_13  => false_5
    | Node_14 __44341 l_44342 r_44343 =>
      (match (__eq__ __44341 n_44339) with
      | true_4  => true_4
      | false_5  =>
        ((or_13)
          ((lookup_44338) n_44339 l_44342) ((lookup_44338) n_44339 r_44343))))

#[logical]
def tree_p_33 := NULL

#[logical]
def ctree_ch_34 := NULL

#[logical]
def ctree_hc_35 := NULL

#[logical]
def ctree_36 := NULL

#[program]
def leaf_worker_37 :=
  fun leaf_worker_44344 (c_44345) ->
    let* _44346 := recv[R,U] c_44345 in
    (match _44346 with
    | ex1UL_43 m_44347 n_44348 =>
      (match m_44347 with
      | Free_15  => close[true] n_44348
      | Lookup_16 k_44349 =>
        let* c_44350 := ((send[R,U] n_44348) (justUU_22 false_5)) in
        ((leaf_worker_44344) c_44350)))

#[program]
def node_worker_38 :=
  fun node_worker_44351 (x_44352) -> {l_44353} -> {r_44354} -> (__44355) -o
  (__44356) -o (__44357) -o
    let* _44358 := recv[R,U] __44357 in
    (match _44358 with
    | ex1UL_43 m_44359 n_44360 =>
      (match m_44359 with
      | Free_15  =>
        let* l_ch_44361 := ((send[R,U] __44355) Free_15) in
        let* r_ch_44362 := ((send[R,U] __44356) Free_15) in
        let* __44363 := close[false] l_ch_44361 in
        let* __44364 := close[false] r_ch_44362 in close[true] n_44360
      | Lookup_16 k_44365 =>
        (match (__eq__ x_44352 k_44365) with
        | true_4  =>
          let* c_44366 := ((send[R,U] n_44360) (justUU_22 true_4)) in
          ((node_worker_44351) x_44352 NULL NULL __44355 __44356 c_44366)
        | false_5  =>
          let* l_ch_44367 := ((send[R,U] __44355) (Lookup_16 k_44365)) in
          let* r_ch_44368 := ((send[R,U] __44356) (Lookup_16 k_44365)) in
          let* _44369 := recv[R,U] l_ch_44367 in
          (match _44369 with
          | ex1UL_43 m_44370 n_44371 =>
            (match m_44370 with
            | justUU_22 m_44372 =>
              let* _44373 := recv[R,U] r_ch_44368 in
              (match _44373 with
              | ex1UL_43 m_44374 n_44375 =>
                (match m_44374 with
                | justUU_22 m_44376 =>
                  let* c_44377 :=
                    ((send[R,U] n_44360)
                      (justUU_22 ((or_13) m_44372 m_44376)))
                  in
                  ((node_worker_44351)
                    x_44352 NULL NULL n_44371 n_44375 c_44377))))))))

#[program]
def cleaf_39 :=
  fun cleaf_44378 (__44379) ->
    fork fun _44380 (_44381) -o
           ((leaf_worker_37) _44381)

#[program]
def cnode_40 :=
  fun cnode_44382 (x_44383) -> {l_44384} -> {r_44385} -> (__44386) -o
  (__44387) -o
    let* l_ch_44388 := __44386 in
    let* r_ch_44389 := __44387 in
    fork
      fun _44390 (_44391) -o
        ((node_worker_38) x_44383 NULL NULL l_ch_44388 r_ch_44389 _44391)

#[program]
def cfree_41 :=
  fun cfree_44392 {t_44393} -> (ct_44394) ->
    let* c_44395 := ct_44394 in
    let* c_44396 := ((send[R,U] c_44395) Free_15) in close[false] c_44396

#[program]
def clookup_42 :=
  fun clookup_44397 (k_44398) -> {t_44399} -> (ct_44400) ->
    let* c_44401 := ct_44400 in
    let* c_44402 := ((send[R,U] c_44401) (Lookup_16 k_44398)) in
    let* _44403 := recv[R,U] c_44402 in
    (match _44403 with
    | ex1UL_43 m_44404 n_44405 => return (ex1UL_43 m_44404 return n_44405))

#[program]
def mytree1_43 :=
  fun mytree1_44406 (x_44407) ->
    ((cnode_40) x_44407 NULL NULL ((cleaf_39) ttU_24) ((cleaf_39) ttU_24))

#[program]
def mytree2_44 :=
  fun mytree2_44408 (x_44409) ->
    ((cnode_40) x_44409 NULL NULL ((mytree1_43) 1) ((mytree1_43) 2))

#[program]
def mytree3_45 :=
  fun mytree3_44410 (x_44411) ->
    ((cnode_40) x_44411 NULL NULL ((mytree2_44) 3) ((mytree2_44) 4))

#[program]
def mytree4_46 :=
  fun mytree4_44412 (x_44413) ->
    ((cnode_40) x_44413 NULL NULL ((mytree3_45) 8) ((mytree3_45) 7))

#[program]
def mytree5_47 :=
  fun mytree5_44414 (x_44415) ->
    ((cnode_40) x_44415 NULL NULL ((mytree4_46) 9) ((mytree4_46) 10))

#[program]
def mytree6_48 :=
  fun mytree6_44416 (x_44417) ->
    ((cnode_40) x_44417 NULL NULL ((mytree5_47) 11) ((mytree5_47) 12))

#[program]
def main :=
  let ct_44418 := ((mytree6_48) 100) in
  let* _44419 := ((clookup_42) 1 NULL ct_44418) in
  (match _44419 with
  | ex1UL_43 m_44420 n_44421 =>
    (match m_44420 with
    | justUU_22 m_44422 =>
      let* __44423 :=
        (match m_44422 with
        | true_4  => print "true" | false_5  => print "false")
      in ((cfree_41) NULL n_44421)))

[trans2e success]

-----------------------------------------

def idU_51 := fun id_44704 (A_44705) -> (m_44706) -> m_44706

def idL_50 := fun id_44707 (A_44708) -> (m_44709) -> m_44709

def rwlUU_55 :=
  fun rwl_44710 (A_44711) -> (m_44712) -> (n_44713) -> (B_44714) ->
  (__44715) -> (__44716) -> __44716

def rwlUL_54 :=
  fun rwl_44717 (A_44718) -> (m_44719) -> (n_44720) -> (B_44721) ->
  (__44722) -> (__44723) -> __44723

def rwlLU_53 :=
  fun rwl_44724 (A_44725) -> (m_44726) -> (n_44727) -> (B_44728) ->
  (__44729) -> (__44730) -> __44730

def rwlLL_52 :=
  fun rwl_44731 (A_44732) -> (m_44733) -> (n_44734) -> (B_44735) ->
  (__44736) -> (__44737) -> __44737

def rwrUU_59 :=
  fun rwr_44738 (A_44739) -> (m_44740) -> (n_44741) -> (B_44742) ->
  (__44743) -> (__44744) -> __44744

def rwrUL_58 :=
  fun rwr_44745 (A_44746) -> (m_44747) -> (n_44748) -> (B_44749) ->
  (__44750) -> (__44751) -> __44751

def rwrLU_57 :=
  fun rwr_44752 (A_44753) -> (m_44754) -> (n_44755) -> (B_44756) ->
  (__44757) -> (__44758) -> __44758

def rwrLL_56 :=
  fun rwr_44759 (A_44760) -> (m_44761) -> (n_44762) -> (B_44763) ->
  (__44764) -> (__44765) -> __44765

def sing_elimUU_73 :=
  fun sing_elim_44766 (A_44767) -> (x_44768) -> (__44769) -> __44769

def sing_elimUL_72 :=
  fun sing_elim_44770 (A_44771) -> (x_44772) -> (__44773) -> __44773

def sing_elimLU_71 :=
  fun sing_elim_44774 (A_44775) -> (x_44776) -> (__44777) -> !!

def sing_elimLL_70 :=
  fun sing_elim_44778 (A_44779) -> (x_44780) -> (__44781) -> __44781

def not_11 :=
  fun not_44782 (__44783) ->
    (match __44783 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  fun and_44784 (__44785) -> (__44786) ->
    (match __44785 with
    | true_4 =>
      (match __44786 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  fun or_44787 (__44788) -> (__44789) ->
    (match __44788 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __44789 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  fun xor_44790 (__44791) -> (__44792) ->
    (match __44791 with
    | true_4 =>
      (match __44792 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __44792 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def lte_15 :=
  fun lte_44793 (__44794) -> (__44795) ->
    (match __44794 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __44794 with
      | succ_7 n_44796 =>
        (match __44795 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __44795 with
          | succ_7 n_44797 => ((lte_44793) n_44796 n_44797)))))

def lt_16 :=
  fun lt_44798 (x_44799) -> (y_44800) -> ((lte_15) (succ_7 x_44799) y_44800)

def pred_17 :=
  fun pred_44801 (__44802) ->
    (match __44802 with
    | zero_6 => constr0(zero_6)
    | _ => (match __44802 with
           | succ_7 n_44803 => n_44803))

def add_18 :=
  fun add_44804 (__44805) -> (__44806) ->
    (match __44805 with
    | zero_6 => __44806
    | _ =>
      (match __44805 with
      | succ_7 n_44807 => (succ_7 ((add_44804) n_44807 __44806))))

def sub_19 :=
  fun sub_44808 (__44809) -> (__44810) ->
    (match __44810 with
    | zero_6 => __44809
    | _ =>
      (match __44810 with
      | succ_7 n_44811 => ((sub_44808) ((pred_17) __44809) n_44811)))

def mul_20 :=
  fun mul_44812 (__44813) -> (__44814) ->
    (match __44813 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __44813 with
      | succ_7 n_44815 => ((add_18) __44814 ((mul_44812) n_44815 __44814))))

def div_21 :=
  fun div_44816 (x_44817) -> (y_44818) ->
    (match ((lt_16) x_44817 y_44818) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_44819 :=
        fun loop_44820 (x_44821) -> (y_44822) ->
          (match ((sub_19) x_44821 ((pred_17) y_44822)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_19) x_44821 ((pred_17) y_44822)) with
            | succ_7 n_44823 => (succ_7 ((loop_44820) n_44823 y_44822))))
      in ((loop_44819) x_44817 y_44818))

def rem_22 :=
  fun rem_44824 (x_44825) -> (y_44826) ->
    ((sub_19) x_44825 ((mul_20) ((div_21) x_44825 y_44826) y_44826))

def free_listUU_81 :=
  fun free_list_44827 (A_44828) -> (f_44829) -> (__44830) ->
    (match __44830 with
    | nilUU_31 => constr0(ttU_24)
    | _ =>
      (match __44830 with
      | consUU_32 hd_44831 tl_44832 =>
        let __44833 := ((f_44829) hd_44831) in
        ((free_list_44827) NULL f_44829 tl_44832)))

def free_listUL_80 :=
  fun free_list_44834 (A_44835) -> (f_44836) -> (__44837) ->
    (match __44837 with
    | nilUL_29 => constr0(ttU_24)
    | _ =>
      (match __44837 with
      | consUL_30 hd_44838 tl_44839 =>
        let __44840 := ((f_44836) hd_44838) in
        ((free_list_44834) NULL f_44836 tl_44839)))

def free_listLL_78 :=
  fun free_list_44841 (A_44842) -> (f_44843) -> (__44844) ->
    (match __44844 with
    | nilLL_25 => constr0(ttU_24)
    | _ =>
      (match __44844 with
      | consLL_26 hd_44845 tl_44846 =>
        let __44847 := ((f_44843) hd_44845) in
        ((free_list_44841) NULL f_44843 tl_44846)))

def pow_25 :=
  fun pow_44848 (x_44849) -> (y_44850) ->
    let loop_44851 :=
      fun loop_44852 (acc_44853) -> (y_44854) ->
        (match (__lte__ y_44854 0) with
        | true_4 => acc_44853
        | false_5 =>
          ((loop_44852) (__mul__ x_44849 acc_44853) (__sub__ y_44854 1)))
    in ((loop_44851) 1 y_44850)

def powm_26 :=
  fun powm_44855 (x_44856) -> (y_44857) -> (m_44858) ->
    let loop_44859 :=
      fun loop_44860 (acc_44861) -> (y_44862) ->
        (match (__lte__ y_44862 0) with
        | true_4 => acc_44861
        | false_5 =>
          ((loop_44860)
            (__mod__ (__mul__ x_44856 acc_44861) m_44858) (__sub__ y_44862 1)))
    in ((loop_44859) 1 y_44857)

def ord_27 := fun ord_44863 (c_44864) -> (__ord__ c_44864)

def chr_28 := fun chr_44865 (i_44866) -> (__chr__ i_44866)

def str_29 := fun str_44867 (c_44868) -> (__push__ "" c_44868)

def strlen_30 := fun strlen_44869 (s_44870) -> (__size__ s_44870)

def string_of_int_31 :=
  fun string_of_int_44871 (i_44872) ->
    let aux_44873 :=
      fun aux_44874 (i_44875) ->
        (match (__lte__ 10 i_44875) with
        | true_4 =>
          let r_44876 := (__mod__ i_44875 10) in
          let i_44877 := (__div__ i_44875 10) in
          (__push__ ((aux_44874) i_44877)
            ((chr_28) (__add__ r_44876 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_44875 ((ord_27) 0)))))
    in
    (match (__lte__ 0 i_44872) with
    | true_4 => ((aux_44873) i_44872)
    | false_5 => (__cat__ "~" ((aux_44873) (__neg__ i_44872))))

def lookup_32 :=
  fun lookup_44878 (n_44879) -> (__44880) ->
    (match __44880 with
    | Leaf_13 => constr0(false_5)
    | _ =>
      (match __44880 with
      | Node_14 __44881 l_44882 r_44883 =>
        (match (__eq__ __44881 n_44879) with
        | true_4 => constr0(true_4)
        | false_5 =>
          ((or_13)
            ((lookup_44878) n_44879 l_44882) ((lookup_44878) n_44879 r_44883)))))

def leaf_worker_37 :=
  fun leaf_worker_44884 (c_44885) ->
    lazy(let _44886 := force(lazy(recv[U](c_44885))) in
         force((match _44886 with
               | ex1UL_43 m_44887 n_44888 =>
                 (match m_44887 with
                 | Free_15 => lazy(close[true] n_44888)
                 | _ =>
                   (match m_44887 with
                   | Lookup_16 k_44889 =>
                     lazy(let c_44890 :=
                            force(((lam (x_44891) ->
                                      lazy(send(n_44888, x_44891)))
                                    constr0(false_5)))
                          in force(((leaf_worker_44884) c_44890))))))))

def node_worker_38 :=
  fun node_worker_44892 (x_44893) -> (l_44894) -> (r_44895) -> (__44896) -o
  (__44897) -o (__44898) -o
    lazy(let _44899 := force(lazy(recv[U](__44898))) in
         force((match _44899 with
               | ex1UL_43 m_44900 n_44901 =>
                 (match m_44900 with
                 | Free_15 =>
                   lazy(let l_ch_44902 :=
                          force(((lam (x_44903) ->
                                    lazy(send(__44896, x_44903)))
                                  constr0(Free_15)))
                        in
                        let r_ch_44904 :=
                          force(((lam (x_44905) ->
                                    lazy(send(__44897, x_44905)))
                                  constr0(Free_15)))
                        in
                        let __44906 := force(lazy(close[false] l_ch_44902))
                        in
                        let __44907 := force(lazy(close[false] r_ch_44904))
                        in force(lazy(close[true] n_44901)))
                 | _ =>
                   (match m_44900 with
                   | Lookup_16 k_44908 =>
                     (match (__eq__ x_44893 k_44908) with
                     | true_4 =>
                       lazy(let c_44909 :=
                              force(((lam (x_44910) ->
                                        lazy(send(n_44901, x_44910)))
                                      constr0(true_4)))
                            in
                            force(((node_worker_44892)
                                    x_44893 NULL NULL __44896 __44897 c_44909)))
                     | false_5 =>
                       lazy(let l_ch_44911 :=
                              force(((lam (x_44912) ->
                                        lazy(send(__44896, x_44912)))
                                      (Lookup_16 k_44908)))
                            in
                            let r_ch_44913 :=
                              force(((lam (x_44914) ->
                                        lazy(send(__44897, x_44914)))
                                      (Lookup_16 k_44908)))
                            in
                            let _44915 := force(lazy(recv[U](l_ch_44911))) in
                            force((match _44915 with
                                  | ex1UL_43 m_44916 n_44917 =>
                                    lazy(let _44918 :=
                                           force(lazy(recv[U](r_ch_44913)))
                                         in
                                         force((match _44918 with
                                               | ex1UL_43 m_44919 n_44920 =>
                                                 lazy(let c_44921 :=
                                                        force(((lam (x_44922) ->
                                                                  lazy(
                                                                  send(n_44901, x_44922)))
                                                                ((or_13)
                                                                  m_44916
                                                                    m_44919)))
                                                      in
                                                      force(((node_worker_44892)
                                                              x_44893 NULL
                                                                NULL n_44917
                                                                n_44920
                                                                c_44921)))))))))))))))

def cleaf_39 :=
  fun cleaf_44923 (__44924) ->
    lazy(fork fun _44925 (_44926) -o ((leaf_worker_37) _44926))

def cnode_40 :=
  fun cnode_44927 (x_44928) -> (l_44929) -> (r_44930) -> (__44931) -o
  (__44932) -o
    lazy(let l_ch_44933 := force(__44931) in
         let r_ch_44934 := force(__44932) in
         force(lazy(fork
                      fun _44935 (_44936) -o
                        ((node_worker_38)
                          x_44928 NULL NULL l_ch_44933 r_ch_44934 _44936))))

def cfree_41 :=
  fun cfree_44937 (t_44938) -> (ct_44939) ->
    lazy(let c_44940 := force(ct_44939) in
         let c_44941 :=
           force(((lam (x_44942) -> lazy(send(c_44940, x_44942)))
                   constr0(Free_15)))
         in force(lazy(close[false] c_44941)))

def clookup_42 :=
  fun clookup_44943 (k_44944) -> (t_44945) -> (ct_44946) ->
    lazy(let c_44947 := force(ct_44946) in
         let c_44948 :=
           force(((lam (x_44949) -> lazy(send(c_44947, x_44949)))
                   (Lookup_16 k_44944)))
         in
         let _44950 := force(lazy(recv[U](c_44948))) in
         force((match _44950 with
               | ex1UL_43 m_44951 n_44952 =>
                 lazy((ex1UL_43 m_44951 lazy(n_44952))))))

def mytree1_43 :=
  fun mytree1_44953 (x_44954) ->
    ((cnode_40)
      x_44954 NULL NULL ((cleaf_39) constr0(ttU_24))
        ((cleaf_39) constr0(ttU_24)))

def mytree2_44 :=
  fun mytree2_44955 (x_44956) ->
    ((cnode_40) x_44956 NULL NULL ((mytree1_43) 1) ((mytree1_43) 2))

def mytree3_45 :=
  fun mytree3_44957 (x_44958) ->
    ((cnode_40) x_44958 NULL NULL ((mytree2_44) 3) ((mytree2_44) 4))

def mytree4_46 :=
  fun mytree4_44959 (x_44960) ->
    ((cnode_40) x_44960 NULL NULL ((mytree3_45) 8) ((mytree3_45) 7))

def mytree5_47 :=
  fun mytree5_44961 (x_44962) ->
    ((cnode_40) x_44962 NULL NULL ((mytree4_46) 9) ((mytree4_46) 10))

def mytree6_48 :=
  fun mytree6_44963 (x_44964) ->
    ((cnode_40) x_44964 NULL NULL ((mytree5_47) 11) ((mytree5_47) 12))

def main :=
  let ct_44965 := ((mytree6_48) 100) in
  lazy(let _44966 := force(((clookup_42) 1 NULL ct_44965)) in
       force((match _44966 with
             | ex1UL_43 m_44967 n_44968 =>
               lazy(let __44969 :=
                      force((match m_44967 with
                            | true_4 => lazy(print "true")
                            | false_5 => lazy(print "false")))
                    in force(((cfree_41) NULL n_44968))))))

[trans23 success]

-----------------------------------------

def idU_51 := lam (A_45334) -> (m_45335) -> m_45335

def idL_50 := lam (A_45336) -> (m_45337) -> m_45337

def rwlUU_55 :=
  lam (A_45338) -> (m_45339) -> (n_45340) -> (B_45341) -> (__45342) ->
  (__45343) -> __45343

def rwlUL_54 :=
  lam (A_45344) -> (m_45345) -> (n_45346) -> (B_45347) -> (__45348) ->
  (__45349) -> __45349

def rwlLU_53 :=
  lam (A_45350) -> (m_45351) -> (n_45352) -> (B_45353) -> (__45354) ->
  (__45355) -> __45355

def rwlLL_52 :=
  lam (A_45356) -> (m_45357) -> (n_45358) -> (B_45359) -> (__45360) ->
  (__45361) -> __45361

def rwrUU_59 :=
  lam (A_45362) -> (m_45363) -> (n_45364) -> (B_45365) -> (__45366) ->
  (__45367) -> __45367

def rwrUL_58 :=
  lam (A_45368) -> (m_45369) -> (n_45370) -> (B_45371) -> (__45372) ->
  (__45373) -> __45373

def rwrLU_57 :=
  lam (A_45374) -> (m_45375) -> (n_45376) -> (B_45377) -> (__45378) ->
  (__45379) -> __45379

def rwrLL_56 :=
  lam (A_45380) -> (m_45381) -> (n_45382) -> (B_45383) -> (__45384) ->
  (__45385) -> __45385

def sing_elimUU_73 := lam (A_45386) -> (x_45387) -> (__45388) -> __45388

def sing_elimUL_72 := lam (A_45389) -> (x_45390) -> (__45391) -> __45391

def sing_elimLU_71 := lam (A_45392) -> (x_45393) -> (__45394) -> !!

def sing_elimLL_70 := lam (A_45395) -> (x_45396) -> (__45397) -> __45397

def not_11 :=
  lam (__45398) ->
    (match __45398 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  lam (__45399) -> (__45400) ->
    (match __45399 with
    | true_4 =>
      (match __45400 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  lam (__45401) -> (__45402) ->
    (match __45401 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __45402 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  lam (__45403) -> (__45404) ->
    (match __45403 with
    | true_4 =>
      (match __45404 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __45404 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def lte_15 :=
  fun lte_45405 (__45406) -> (__45407) ->
    (match __45406 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __45406 with
      | succ_7 n_45408 =>
        (match __45407 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __45407 with
          | succ_7 n_45409 => ((lte_45405) n_45408 n_45409)))))

def lt_16 :=
  lam (x_45410) -> (y_45411) -> ((lte_15) (succ_7 x_45410) y_45411)

def pred_17 :=
  lam (__45412) ->
    (match __45412 with
    | zero_6 => constr0(zero_6)
    | _ => (match __45412 with
           | succ_7 n_45413 => n_45413))

def add_18 :=
  fun add_45414 (__45415) -> (__45416) ->
    (match __45415 with
    | zero_6 => __45416
    | _ =>
      (match __45415 with
      | succ_7 n_45417 => (succ_7 ((add_45414) n_45417 __45416))))

def sub_19 :=
  fun sub_45418 (__45419) -> (__45420) ->
    (match __45420 with
    | zero_6 => __45419
    | _ =>
      (match __45420 with
      | succ_7 n_45421 => ((sub_45418) ((pred_17) __45419) n_45421)))

def mul_20 :=
  fun mul_45422 (__45423) -> (__45424) ->
    (match __45423 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __45423 with
      | succ_7 n_45425 => ((add_18) __45424 ((mul_45422) n_45425 __45424))))

def div_21 :=
  lam (x_45426) -> (y_45427) ->
    (match ((lt_16) x_45426 y_45427) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_45428 :=
        fun loop_45429 (x_45430) -> (y_45431) ->
          (match ((sub_19) x_45430 ((pred_17) y_45431)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_19) x_45430 ((pred_17) y_45431)) with
            | succ_7 n_45432 => (succ_7 ((loop_45429) n_45432 y_45431))))
      in ((loop_45428) x_45426 y_45427))

def rem_22 :=
  lam (x_45433) -> (y_45434) ->
    ((sub_19) x_45433 ((mul_20) ((div_21) x_45433 y_45434) y_45434))

def free_listUU_81 :=
  fun free_list_45435 (A_45436) -> (f_45437) -> (__45438) ->
    (match __45438 with
    | nilUU_31 => constr0(ttU_24)
    | _ =>
      (match __45438 with
      | consUU_32 hd_45439 tl_45440 =>
        let __45441 := ((f_45437) hd_45439) in
        ((free_list_45435) NULL f_45437 tl_45440)))

def free_listUL_80 :=
  fun free_list_45442 (A_45443) -> (f_45444) -> (__45445) ->
    (match __45445 with
    | nilUL_29 => constr0(ttU_24)
    | _ =>
      (match __45445 with
      | consUL_30 hd_45446 tl_45447 =>
        let __45448 := ((f_45444) hd_45446) in
        ((free_list_45442) NULL f_45444 tl_45447)))

def free_listLL_78 :=
  fun free_list_45449 (A_45450) -> (f_45451) -> (__45452) ->
    (match __45452 with
    | nilLL_25 => constr0(ttU_24)
    | _ =>
      (match __45452 with
      | consLL_26 hd_45453 tl_45454 =>
        let __45455 := ((f_45451) hd_45453) in
        ((free_list_45449) NULL f_45451 tl_45454)))

def pow_25 :=
  lam (x_45456) -> (y_45457) ->
    let loop_45458 :=
      fun loop_45459 (acc_45460) -> (y_45461) ->
        (match (__lte__ y_45461 0) with
        | true_4 => acc_45460
        | false_5 =>
          ((loop_45459) (__mul__ x_45456 acc_45460) (__sub__ y_45461 1)))
    in ((loop_45458) 1 y_45457)

def powm_26 :=
  lam (x_45462) -> (y_45463) -> (m_45464) ->
    let loop_45465 :=
      fun loop_45466 (acc_45467) -> (y_45468) ->
        (match (__lte__ y_45468 0) with
        | true_4 => acc_45467
        | false_5 =>
          ((loop_45466)
            (__mod__ (__mul__ x_45462 acc_45467) m_45464) (__sub__ y_45468 1)))
    in ((loop_45465) 1 y_45463)

def ord_27 := lam (c_45469) -> (__ord__ c_45469)

def chr_28 := lam (i_45470) -> (__chr__ i_45470)

def str_29 := lam (c_45471) -> (__push__ "" c_45471)

def strlen_30 := lam (s_45472) -> (__size__ s_45472)

def string_of_int_31 :=
  lam (i_45473) ->
    let aux_45474 :=
      fun aux_45475 (i_45476) ->
        (match (__lte__ 10 i_45476) with
        | true_4 =>
          let r_45477 := (__mod__ i_45476 10) in
          let i_45478 := (__div__ i_45476 10) in
          (__push__ ((aux_45475) i_45478)
            ((chr_28) (__add__ r_45477 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_45476 ((ord_27) 0)))))
    in
    (match (__lte__ 0 i_45473) with
    | true_4 => ((aux_45474) i_45473)
    | false_5 => (__cat__ "~" ((aux_45474) (__neg__ i_45473))))

def lookup_32 :=
  fun lookup_45479 (n_45480) -> (__45481) ->
    (match __45481 with
    | Leaf_13 => constr0(false_5)
    | _ =>
      (match __45481 with
      | Node_14 __45482 l_45483 r_45484 =>
        (match (__eq__ __45482 n_45480) with
        | true_4 => constr0(true_4)
        | false_5 =>
          ((or_13)
            ((lookup_45479) n_45480 l_45483) ((lookup_45479) n_45480 r_45484)))))

def leaf_worker_37 :=
  fun leaf_worker_45485 (c_45486) ->
    lazy(let _45487 := recv[U](c_45486) in
         (match _45487 with
         | ex1UL_43 m_45488 n_45489 =>
           (match m_45488 with
           | Free_15 => close[true] n_45489
           | _ =>
             (match m_45488 with
             | Lookup_16 k_45490 =>
               let c_45491 := send(n_45489, constr0(false_5)) in
               force(((leaf_worker_45485) c_45491))))))

def node_worker_38 :=
  fun node_worker_45492 (x_45493) -> (l_45494) -> (r_45495) -> (__45496) -o
  (__45497) -o (__45498) -o
    lazy(let _45499 := recv[U](__45498) in
         (match _45499 with
         | ex1UL_43 m_45500 n_45501 =>
           (match m_45500 with
           | Free_15 =>
             let l_ch_45502 := send(__45496, constr0(Free_15)) in
             let r_ch_45503 := send(__45497, constr0(Free_15)) in
             let __45504 := close[false] l_ch_45502 in
             let __45505 := close[false] r_ch_45503 in close[true] n_45501
           | _ =>
             (match m_45500 with
             | Lookup_16 k_45506 =>
               (match (__eq__ x_45493 k_45506) with
               | true_4 =>
                 let c_45507 := send(n_45501, constr0(true_4)) in
                 force(((node_worker_45492)
                         x_45493 NULL NULL __45496 __45497 c_45507))
               | false_5 =>
                 let l_ch_45508 := send(__45496, (Lookup_16 k_45506)) in
                 let r_ch_45509 := send(__45497, (Lookup_16 k_45506)) in
                 let _45510 := recv[U](l_ch_45508) in
                 (match _45510 with
                 | ex1UL_43 m_45511 n_45512 =>
                   let _45513 := recv[U](r_ch_45509) in
                   (match _45513 with
                   | ex1UL_43 m_45514 n_45515 =>
                     let c_45516 := send(n_45501, ((or_13) m_45511 m_45514))
                     in
                     force(((node_worker_45492)
                             x_45493 NULL NULL n_45512 n_45515 c_45516)))))))))

def cleaf_39 :=
  lam (__45517) -> lazy(fork lam (_45518) -o ((leaf_worker_37) _45518))

def cnode_40 :=
  lam (x_45519) -> (l_45520) -> (r_45521) -> (__45522) -o (__45523) -o
    lazy(let l_ch_45524 := force(__45522) in
         let r_ch_45525 := force(__45523) in
         fork
           lam (_45526) -o
             ((node_worker_38)
               x_45519 NULL NULL l_ch_45524 r_ch_45525 _45526))

def cfree_41 :=
  lam (t_45527) -> (ct_45528) ->
    lazy(let c_45529 := force(ct_45528) in
         let c_45530 := send(c_45529, constr0(Free_15)) in
         close[false] c_45530)

def clookup_42 :=
  lam (k_45531) -> (t_45532) -> (ct_45533) ->
    lazy(let c_45534 := force(ct_45533) in
         let c_45535 := send(c_45534, (Lookup_16 k_45531)) in
         let _45536 := recv[U](c_45535) in
         (match _45536 with
         | ex1UL_43 m_45537 n_45538 => (ex1UL_43 m_45537 lazy(n_45538))))

def mytree1_43 :=
  lam (x_45539) ->
    ((cnode_40)
      x_45539 NULL NULL ((cleaf_39) constr0(ttU_24))
        ((cleaf_39) constr0(ttU_24)))

def mytree2_44 :=
  lam (x_45540) ->
    ((cnode_40) x_45540 NULL NULL ((mytree1_43) 1) ((mytree1_43) 2))

def mytree3_45 :=
  lam (x_45541) ->
    ((cnode_40) x_45541 NULL NULL ((mytree2_44) 3) ((mytree2_44) 4))

def mytree4_46 :=
  lam (x_45542) ->
    ((cnode_40) x_45542 NULL NULL ((mytree3_45) 8) ((mytree3_45) 7))

def mytree5_47 :=
  lam (x_45543) ->
    ((cnode_40) x_45543 NULL NULL ((mytree4_46) 9) ((mytree4_46) 10))

def mytree6_48 :=
  lam (x_45544) ->
    ((cnode_40) x_45544 NULL NULL ((mytree5_47) 11) ((mytree5_47) 12))

def main :=
  let ct_45545 := ((mytree6_48) 100) in
  lazy(let _45546 := force(((clookup_42) 1 NULL ct_45545)) in
       (match _45546 with
       | ex1UL_43 m_45547 n_45548 =>
         let __45549 :=
           (match m_45547 with
           | true_4 => print "true" | false_5 => print "false")
         in force(((cfree_41) NULL n_45548))))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match(__99){
    zero_6 => {
      x_101 := true_4;
    }
    _ => {
      match[U](__99){
        succ_7(n_103) => {
          match(__100){
            zero_6 => {
              x_104 := false_5;
            }
            _ => {
              match[U](__100){
                succ_7(n_106) => {
                  x_107 := lte_98(n_103, n_106);
                  x_105 := x_107;
                }
              }
              x_104 := x_105;
            }
          }
          x_102 := x_104;
        }
      }
      x_101 := x_102;
    }
  }
  return x_101;
}

fn lt_108(x_109%U, y_110%U) {
  x_112 := mkconstr(succ_7, [x_109]);
  x_111 := lte_98(x_112, y_110);
  return x_111;
}

fn pred_113(__114%U) {
  match(__114){
    zero_6 => {
      x_115 := zero_6;
    }
    _ => {
      match[U](__114){ succ_7(n_117) => {
                         x_116 := n_117;
                       } }
      x_115 := x_116;
    }
  }
  return x_115;
}

fn add_118(__119%U, __120%U) {
  match(__119){
    zero_6 => {
      x_121 := __120;
    }
    _ => {
      match[U](__119){
        succ_7(n_123) => {
          x_124 := add_118(n_123, __120);
          x_125 := mkconstr(succ_7, [x_124]);
          x_122 := x_125;
        }
      }
      x_121 := x_122;
    }
  }
  return x_121;
}

fn sub_126(__127%U, __128%U) {
  match(__128){
    zero_6 => {
      x_129 := __127;
    }
    _ => {
      match[U](__128){
        succ_7(n_131) => {
          x_133 := pred_113(__127);
          x_132 := sub_126(x_133, n_131);
          x_130 := x_132;
        }
      }
      x_129 := x_130;
    }
  }
  return x_129;
}

fn mul_134(__135%U, __136%U) {
  match(__135){
    zero_6 => {
      x_137 := zero_6;
    }
    _ => {
      match[U](__135){
        succ_7(n_139) => {
          x_141 := mul_134(n_139, __136);
          x_140 := add_118(__136, x_141);
          x_138 := x_140;
        }
      }
      x_137 := x_138;
    }
  }
  return x_137;
}

fn div_142(x_143%U, y_144%U) {
  x_146 := lt_108(x_143, y_144);
  match(x_146){
    true_4 => {
      x_145 := zero_6;
    }
    false_5 => {
      x_148 :=
        fn loop_149(x_150%U, y_151%U) {
          x_154 := pred_113(y_151);
          x_153 := sub_126(x_150, x_154);
          match(x_153){
            zero_6 => {
              x_152 := zero_6;
            }
            _ => {
              x_157 := pred_113(y_151);
              x_156 := sub_126(x_150, x_157);
              match[U](x_156){
                succ_7(n_158) => {
                  x_159 := loop_149(n_158, y_151);
                  x_160 := mkconstr(succ_7, [x_159]);
                  x_155 := x_160;
                }
              }
              x_152 := x_155;
            }
          }
          return x_152;
        };
      loop_147 := x_148;
      x_161 := loop_147(x_143, y_144);
      x_145 := x_161;
    }
  }
  return x_145;
}

fn rem_162(x_163%U, y_164%U) {
  x_167 := div_142(x_163, y_164);
  x_166 := mul_134(x_167, y_164);
  x_165 := sub_126(x_163, x_166);
  return x_165;
}

fn free_listUU_168(A_169%U, f_170%U, __171%U) {
  match(__171){
    nilUU_31 => {
      x_172 := ttU_24;
    }
    _ => {
      match[U](__171){
        consUU_32(hd_174, tl_175) => {
          x_177 := f_170(hd_174);
          __176 := x_177;
          x_178 := free_listUU_168(NULL, f_170, tl_175);
          x_173 := x_178;
        }
      }
      x_172 := x_173;
    }
  }
  return x_172;
}

fn free_listUL_179(A_180%U, f_181%U, __182%U) {
  match(__182){
    nilUL_29 => {
      x_183 := ttU_24;
    }
    _ => {
      match[L](__182){
        consUL_30(hd_185, tl_186) => {
          x_188 := f_181(hd_185);
          __187 := x_188;
          x_189 := free_listUL_179(NULL, f_181, tl_186);
          x_184 := x_189;
        }
      }
      x_183 := x_184;
    }
  }
  return x_183;
}

fn free_listLL_190(A_191%U, f_192%U, __193%U) {
  match(__193){
    nilLL_25 => {
      x_194 := ttU_24;
    }
    _ => {
      match[L](__193){
        consLL_26(hd_196, tl_197) => {
          x_199 := f_192(hd_196);
          __198 := x_199;
          x_200 := free_listLL_190(NULL, f_192, tl_197);
          x_195 := x_200;
        }
      }
      x_194 := x_195;
    }
  }
  return x_194;
}

fn pow_201(x_202%U, y_203%U) {
  x_205 :=
    fn loop_206(acc_207%U, y_208%U) {
      x_210 := lte(y_208, 0);
      match(x_210){
        true_4 => {
          x_209 := acc_207;
        }
        false_5 => {
          x_212 := mul(x_202, acc_207);
          x_213 := sub(y_208, 1);
          x_211 := loop_206(x_212, x_213);
          x_209 := x_211;
        }
      }
      return x_209;
    };
  loop_204 := x_205;
  x_214 := loop_204(1, y_203);
  return x_214;
}

fn powm_215(x_216%U, y_217%U, m_218%U) {
  x_220 :=
    fn loop_221(acc_222%U, y_223%U) {
      x_225 := lte(y_223, 0);
      match(x_225){
        true_4 => {
          x_224 := acc_222;
        }
        false_5 => {
          x_228 := mul(x_216, acc_222);
          x_227 := mod(x_228, m_218);
          x_229 := sub(y_223, 1);
          x_226 := loop_221(x_227, x_229);
          x_224 := x_226;
        }
      }
      return x_224;
    };
  loop_219 := x_220;
  x_230 := loop_219(1, y_217);
  return x_230;
}

fn ord_231(c_232%U) {
  x_233 := ord(c_232);
  return x_233;
}

fn chr_234(i_235%U) {
  x_236 := chr(i_235);
  return x_236;
}

fn str_237(c_238%U) {
  x_240 := str("");
  x_239 := push(x_240, c_238);
  return x_239;
}

fn strlen_241(s_242%U) {
  x_243 := size(s_242);
  return x_243;
}

fn string_of_int_244(i_245%U) {
  x_247 :=
    fn aux_248(i_249%U) {
      x_251 := lte(10, i_249);
      match(x_251){
        true_4 => {
          x_253 := mod(i_249, 10);
          r_252 := x_253;
          x_255 := div(i_249, 10);
          i_254 := x_255;
          x_257 := aux_248(i_254);
          x_260 := ord_231(0);
          x_259 := add(r_252, x_260);
          x_258 := chr_234(x_259);
          x_256 := push(x_257, x_258);
          x_250 := x_256;
        }
        false_5 => {
          x_264 := ord_231(0);
          x_263 := add(i_249, x_264);
          x_262 := chr_234(x_263);
          x_261 := str_237(x_262);
          x_250 := x_261;
        }
      }
      return x_250;
    };
  aux_246 := x_247;
  x_266 := lte(0, i_245);
  match(x_266){
    true_4 => {
      x_267 := aux_246(i_245);
      x_265 := x_267;
    }
    false_5 => {
      x_269 := str("~");
      x_271 := neg(i_245);
      x_270 := aux_246(x_271);
      x_268 := cat(x_269, x_270);
      x_265 := x_268;
    }
  }
  return x_265;
}

fn lookup_272(n_273%U, __274%U) {
  match(__274){
    Leaf_13 => {
      x_275 := false_5;
    }
    _ => {
      match[U](__274){
        Node_14(__277, l_278, r_279) => {
          x_281 := eq(__277, n_273);
          match(x_281){
            true_4 => {
              x_280 := true_4;
            }
            false_5 => {
              x_283 := lookup_272(n_273, l_278);
              x_284 := lookup_272(n_273, r_279);
              x_282 := or_87(x_283, x_284);
              x_280 := x_282;
            }
          }
          x_276 := x_280;
        }
      }
      x_275 := x_276;
    }
  }
  return x_275;
}

fn leaf_worker_285(c_286%U) {
  x_287 :=
    lazy {
      x_289 := recv[U](c_286);
      _288 := x_289;
      match[L](_288){
        ex1UL_43(m_291, n_292) => {
          match(m_291){
            Free_15 => {
              x_294 := close[true](n_292);
              x_293 := x_294;
            }
            _ => {
              match[U](m_291){
                Lookup_16(k_296) => {
                  x_298 := send(n_292, false_5);
                  c_297 := x_298;
                  x_300 := leaf_worker_285(c_297);
                  x_299 := force(x_300);
                  x_295 := x_299;
                }
              }
              x_293 := x_295;
            }
          }
          x_290 := x_293;
        }
      }
      return x_290;
    };
  return x_287;
}

fn node_worker_301(x_302%U, l_303%U, r_304%U, __305%L, __306%L, __307%L) {
  x_308 :=
    lazy {
      x_310 := recv[U](__307);
      _309 := x_310;
      match[L](_309){
        ex1UL_43(m_312, n_313) => {
          match(m_312){
            Free_15 => {
              x_316 := send(__305, Free_15);
              l_ch_315 := x_316;
              x_318 := send(__306, Free_15);
              r_ch_317 := x_318;
              x_320 := close[false](l_ch_315);
              __319 := x_320;
              x_322 := close[false](r_ch_317);
              __321 := x_322;
              x_323 := close[true](n_313);
              x_314 := x_323;
            }
            _ => {
              match[U](m_312){
                Lookup_16(k_325) => {
                  x_327 := eq(x_302, k_325);
                  match(x_327){
                    true_4 => {
                      x_329 := send(n_313, true_4);
                      c_328 := x_329;
                      x_331 := node_worker_301(x_302, NULL, NULL, __305, __306, c_328);
                      x_330 := force(x_331);
                      x_326 := x_330;
                    }
                    false_5 => {
                      x_334 := mkconstr(Lookup_16, [k_325]);
                      x_333 := send(__305, x_334);
                      l_ch_332 := x_333;
                      x_337 := mkconstr(Lookup_16, [k_325]);
                      x_336 := send(__306, x_337);
                      r_ch_335 := x_336;
                      x_339 := recv[U](l_ch_332);
                      _338 := x_339;
                      match[L](_338){
                        ex1UL_43(m_341, n_342) => {
                          x_344 := recv[U](r_ch_335);
                          _343 := x_344;
                          match[L](_343){
                            ex1UL_43(m_346, n_347) => {
                              x_350 := or_87(m_341, m_346);
                              x_349 := send(n_313, x_350);
                              c_348 := x_349;
                              x_352 := node_worker_301(x_302, NULL, NULL, n_342, n_347, c_348);
                              x_351 := force(x_352);
                              x_345 := x_351;
                            }
                          }
                          x_340 := x_345;
                        }
                      }
                      x_326 := x_340;
                    }
                  }
                  x_324 := x_326;
                }
              }
              x_314 := x_324;
            }
          }
          x_311 := x_314;
        }
      }
      return x_311;
    };
  return x_308;
}

fn cleaf_353(__354%U) {
  x_355 :=
    lazy {
      x_357 :=
        fn lam_358(_359%L) { x_360 := leaf_worker_285(_359);
                             return x_360; };
      x_356 := fork(x_357);
      return x_356;
    };
  return x_355;
}

fn cnode_361(x_362%U, l_363%U, r_364%U, __365%L, __366%L) {
  x_367 :=
    lazy {
      x_369 := force(__365);
      l_ch_368 := x_369;
      x_371 := force(__366);
      r_ch_370 := x_371;
      x_373 :=
        fn lam_374(_375%L) {
          x_376 := node_worker_301(x_362, NULL, NULL, l_ch_368, r_ch_370, _375);
          return x_376;
        };
      x_372 := fork(x_373);
      return x_372;
    };
  return x_367;
}

fn cfree_377(t_378%U, ct_379%U) {
  x_380 :=
    lazy {
      x_382 := force(ct_379);
      c_381 := x_382;
      x_384 := send(c_381, Free_15);
      c_383 := x_384;
      x_385 := close[false](c_383);
      return x_385;
    };
  return x_380;
}

fn clookup_386(k_387%U, t_388%U, ct_389%U) {
  x_390 :=
    lazy {
      x_392 := force(ct_389);
      c_391 := x_392;
      x_395 := mkconstr(Lookup_16, [k_387]);
      x_394 := send(c_391, x_395);
      c_393 := x_394;
      x_397 := recv[U](c_393);
      _396 := x_397;
      match[L](_396){
        ex1UL_43(m_399, n_400) => {
          x_401 := lazy { 
                          return n_400; };
          x_402 := mkconstr(ex1UL_43, [m_399, x_401]);
          x_398 := x_402;
        }
      }
      return x_398;
    };
  return x_390;
}

fn mytree1_403(x_404%U) {
  x_406 := cleaf_353(ttU_24);
  x_407 := cleaf_353(ttU_24);
  x_405 := cnode_361(x_404, NULL, NULL, x_406, x_407);
  return x_405;
}

fn mytree2_408(x_409%U) {
  x_411 := mytree1_403(1);
  x_412 := mytree1_403(2);
  x_410 := cnode_361(x_409, NULL, NULL, x_411, x_412);
  return x_410;
}

fn mytree3_413(x_414%U) {
  x_416 := mytree2_408(3);
  x_417 := mytree2_408(4);
  x_415 := cnode_361(x_414, NULL, NULL, x_416, x_417);
  return x_415;
}

fn mytree4_418(x_419%U) {
  x_421 := mytree3_413(8);
  x_422 := mytree3_413(7);
  x_420 := cnode_361(x_419, NULL, NULL, x_421, x_422);
  return x_420;
}

fn mytree5_423(x_424%U) {
  x_426 := mytree4_418(9);
  x_427 := mytree4_418(10);
  x_425 := cnode_361(x_424, NULL, NULL, x_426, x_427);
  return x_425;
}

fn mytree6_428(x_429%U) {
  x_431 := mytree5_423(11);
  x_432 := mytree5_423(12);
  x_430 := cnode_361(x_429, NULL, NULL, x_431, x_432);
  return x_430;
}

main := {
  x_434 := mytree6_428(100);
  ct_433 := x_434;
  x_435 :=
    lazy {
      x_438 := clookup_386(1, NULL, ct_433);
      x_437 := force(x_438);
      _436 := x_437;
      match[L](_436){
        ex1UL_43(m_440, n_441) => {
          match(m_440){
            true_4 => {
              x_445 := str("true");
              x_444 := print(x_445);
              x_443 := x_444;
            }
            false_5 => {
              x_447 := str("false");
              x_446 := print(x_447);
              x_443 := x_446;
            }
          }
          __442 := x_443;
          x_449 := cfree_377(NULL, n_441);
          x_448 := force(x_449);
          x_439 := x_448;
        }
      }
      return x_439;
    };
  return x_435;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match(__99){
    zero_6 => {
      x_101 := true_4;
    }
    _ => {
      match[U](__99){
        succ_7(n_103) => {
          match(__100){
            zero_6 => {
              x_104 := false_5;
            }
            _ => {
              match[U](__100){
                succ_7(n_106) => {
                  x_107 := lte_98(n_103, n_106);
                  x_105 := x_107;
                }
              }
              x_104 := x_105;
            }
          }
          x_102 := x_104;
        }
      }
      x_101 := x_102;
    }
  }
  return x_101;
}

fn lt_108(x_109%U, y_110%U) {
  x_112 := mkconstr(succ_7, [x_109]);
  x_111 := lte_98(x_112, y_110);
  return x_111;
}

fn pred_113(__114%U) {
  match(__114){
    zero_6 => {
      x_115 := zero_6;
    }
    _ => {
      match[U](__114){ succ_7(n_117) => {
                         x_116 := n_117;
                       } }
      x_115 := x_116;
    }
  }
  return x_115;
}

fn add_118(__119%U, __120%U) {
  match(__119){
    zero_6 => {
      x_121 := __120;
    }
    _ => {
      match[U](__119){
        succ_7(n_123) => {
          x_124 := add_118(n_123, __120);
          x_125 := mkconstr(succ_7, [x_124]);
          x_122 := x_125;
        }
      }
      x_121 := x_122;
    }
  }
  return x_121;
}

fn sub_126(__127%U, __128%U) {
  match(__128){
    zero_6 => {
      x_129 := __127;
    }
    _ => {
      match[U](__128){
        succ_7(n_131) => {
          x_133 := pred_113(__127);
          x_132 := sub_126(x_133, n_131);
          x_130 := x_132;
        }
      }
      x_129 := x_130;
    }
  }
  return x_129;
}

fn mul_134(__135%U, __136%U) {
  match(__135){
    zero_6 => {
      x_137 := zero_6;
    }
    _ => {
      match[U](__135){
        succ_7(n_139) => {
          x_141 := mul_134(n_139, __136);
          x_140 := add_118(__136, x_141);
          x_138 := x_140;
        }
      }
      x_137 := x_138;
    }
  }
  return x_137;
}

fn div_142(x_143%U, y_144%U) {
  x_146 := lt_108(x_143, y_144);
  match(x_146){
    true_4 => {
      x_145 := zero_6;
    }
    false_5 => {
      x_148 :=
        fn loop_149(x_150%U, y_151%U) {
          x_154 := pred_113(y_151);
          x_153 := sub_126(x_150, x_154);
          match(x_153){
            zero_6 => {
              x_152 := zero_6;
            }
            _ => {
              x_157 := pred_113(y_151);
              x_156 := sub_126(x_150, x_157);
              match[U](x_156){
                succ_7(n_158) => {
                  x_159 := loop_149(n_158, y_151);
                  x_160 := mkconstr(succ_7, [x_159]);
                  x_155 := x_160;
                }
              }
              x_152 := x_155;
            }
          }
          return x_152;
        };
      loop_147 := x_148;
      x_161 := loop_147(x_143, y_144);
      x_145 := x_161;
    }
  }
  return x_145;
}

fn rem_162(x_163%U, y_164%U) {
  x_167 := div_142(x_163, y_164);
  x_166 := mul_134(x_167, y_164);
  x_165 := sub_126(x_163, x_166);
  return x_165;
}

fn free_listUU_168(A_169%U, f_170%U, __171%U) {
  match(__171){
    nilUU_31 => {
      x_172 := ttU_24;
    }
    _ => {
      match[U](__171){
        consUU_32(hd_174, tl_175) => {
          x_177 := f_170(hd_174);
          __176 := x_177;
          x_178 := free_listUU_168(NULL, f_170, tl_175);
          x_173 := x_178;
        }
      }
      x_172 := x_173;
    }
  }
  return x_172;
}

fn free_listUL_179(A_180%U, f_181%U, __182%U) {
  match(__182){
    nilUL_29 => {
      x_183 := ttU_24;
    }
    _ => {
      match[L](__182){
        consUL_30(hd_185, tl_186) => {
          x_188 := f_181(hd_185);
          __187 := x_188;
          x_189 := free_listUL_179(NULL, f_181, tl_186);
          x_184 := x_189;
          free(__182);
        }
      }
      x_183 := x_184;
    }
  }
  return x_183;
}

fn free_listLL_190(A_191%U, f_192%U, __193%U) {
  match(__193){
    nilLL_25 => {
      x_194 := ttU_24;
    }
    _ => {
      match[L](__193){
        consLL_26(hd_196, tl_197) => {
          x_199 := f_192(hd_196);
          __198 := x_199;
          x_200 := free_listLL_190(NULL, f_192, tl_197);
          x_195 := x_200;
          free(__193);
        }
      }
      x_194 := x_195;
    }
  }
  return x_194;
}

fn pow_201(x_202%U, y_203%U) {
  x_205 :=
    fn loop_206(acc_207%U, y_208%U) {
      x_210 := lte(y_208, 0);
      match(x_210){
        true_4 => {
          x_209 := acc_207;
        }
        false_5 => {
          x_212 := mul(x_202, acc_207);
          x_213 := sub(y_208, 1);
          x_211 := loop_206(x_212, x_213);
          x_209 := x_211;
        }
      }
      return x_209;
    };
  loop_204 := x_205;
  x_214 := loop_204(1, y_203);
  return x_214;
}

fn powm_215(x_216%U, y_217%U, m_218%U) {
  x_220 :=
    fn loop_221(acc_222%U, y_223%U) {
      x_225 := lte(y_223, 0);
      match(x_225){
        true_4 => {
          x_224 := acc_222;
        }
        false_5 => {
          x_228 := mul(x_216, acc_222);
          x_227 := mod(x_228, m_218);
          x_229 := sub(y_223, 1);
          x_226 := loop_221(x_227, x_229);
          x_224 := x_226;
        }
      }
      return x_224;
    };
  loop_219 := x_220;
  x_230 := loop_219(1, y_217);
  return x_230;
}

fn ord_231(c_232%U) {
  x_233 := ord(c_232);
  return x_233;
}

fn chr_234(i_235%U) {
  x_236 := chr(i_235);
  return x_236;
}

fn str_237(c_238%U) {
  x_240 := str("");
  x_239 := push(x_240, c_238);
  return x_239;
}

fn strlen_241(s_242%U) {
  x_243 := size(s_242);
  return x_243;
}

fn string_of_int_244(i_245%U) {
  x_247 :=
    fn aux_248(i_249%U) {
      x_251 := lte(10, i_249);
      match(x_251){
        true_4 => {
          x_253 := mod(i_249, 10);
          r_252 := x_253;
          x_255 := div(i_249, 10);
          i_254 := x_255;
          x_257 := aux_248(i_254);
          x_260 := ord_231(0);
          x_259 := add(r_252, x_260);
          x_258 := chr_234(x_259);
          x_256 := push(x_257, x_258);
          x_250 := x_256;
        }
        false_5 => {
          x_264 := ord_231(0);
          x_263 := add(i_249, x_264);
          x_262 := chr_234(x_263);
          x_261 := str_237(x_262);
          x_250 := x_261;
        }
      }
      return x_250;
    };
  aux_246 := x_247;
  x_266 := lte(0, i_245);
  match(x_266){
    true_4 => {
      x_267 := aux_246(i_245);
      x_265 := x_267;
    }
    false_5 => {
      x_269 := str("~");
      x_271 := neg(i_245);
      x_270 := aux_246(x_271);
      x_268 := cat(x_269, x_270);
      x_265 := x_268;
    }
  }
  return x_265;
}

fn lookup_272(n_273%U, __274%U) {
  match(__274){
    Leaf_13 => {
      x_275 := false_5;
    }
    _ => {
      match[U](__274){
        Node_14(__277, l_278, r_279) => {
          x_281 := eq(__277, n_273);
          match(x_281){
            true_4 => {
              x_280 := true_4;
            }
            false_5 => {
              x_283 := lookup_272(n_273, l_278);
              x_284 := lookup_272(n_273, r_279);
              x_282 := or_87(x_283, x_284);
              x_280 := x_282;
            }
          }
          x_276 := x_280;
        }
      }
      x_275 := x_276;
    }
  }
  return x_275;
}

fn leaf_worker_285(c_286%U) {
  x_287 :=
    lazy {
      x_289 := recv[U](c_286);
      _288 := x_289;
      match[L](_288){
        ex1UL_43(m_291, n_292) => {
          match(m_291){
            Free_15 => {
              x_294 := close[true](n_292);
              x_293 := x_294;
            }
            _ => {
              match[U](m_291){
                Lookup_16(k_296) => {
                  x_298 := send(n_292, false_5);
                  c_297 := x_298;
                  x_300 := leaf_worker_285(c_297);
                  x_299 := force(x_300);
                  x_295 := x_299;
                }
              }
              x_293 := x_295;
            }
          }
          x_290 := x_293;
          free(_288);
        }
      }
      return x_290;
    };
  return x_287;
}

fn node_worker_301(x_302%U, l_303%U, r_304%U, __305%L, __306%L, __307%L) {
  x_308 :=
    lazy {
      x_310 := recv[U](__307);
      _309 := x_310;
      match[L](_309){
        ex1UL_43(m_312, n_313) => {
          match(m_312){
            Free_15 => {
              x_316 := send(__305, Free_15);
              l_ch_315 := x_316;
              x_318 := send(__306, Free_15);
              r_ch_317 := x_318;
              x_320 := close[false](l_ch_315);
              __319 := x_320;
              x_322 := close[false](r_ch_317);
              __321 := x_322;
              x_323 := close[true](n_313);
              x_314 := x_323;
            }
            _ => {
              match[U](m_312){
                Lookup_16(k_325) => {
                  x_327 := eq(x_302, k_325);
                  match(x_327){
                    true_4 => {
                      x_329 := send(n_313, true_4);
                      c_328 := x_329;
                      x_331 := node_worker_301(x_302, NULL, NULL, __305, __306, c_328);
                      x_330 := force(x_331);
                      x_326 := x_330;
                    }
                    false_5 => {
                      x_334 := mkconstr(Lookup_16, [k_325]);
                      x_333 := send(__305, x_334);
                      l_ch_332 := x_333;
                      x_337 := mkconstr(Lookup_16, [k_325]);
                      x_336 := send(__306, x_337);
                      r_ch_335 := x_336;
                      x_339 := recv[U](l_ch_332);
                      _338 := x_339;
                      match[L](_338){
                        ex1UL_43(m_341, n_342) => {
                          x_344 := recv[U](r_ch_335);
                          _343 := x_344;
                          match[L](_343){
                            ex1UL_43(m_346, n_347) => {
                              x_350 := or_87(m_341, m_346);
                              x_349 := send(n_313, x_350);
                              c_348 := x_349;
                              x_352 := node_worker_301(x_302, NULL, NULL, n_342, n_347, c_348);
                              x_351 := force(x_352);
                              x_345 := x_351;
                              free(_343);
                            }
                          }
                          x_340 := x_345;
                          free(_338);
                        }
                      }
                      x_326 := x_340;
                    }
                  }
                  x_324 := x_326;
                }
              }
              x_314 := x_324;
            }
          }
          x_311 := x_314;
          free(_309);
        }
      }
      return x_311;
    };
  return x_308;
}

fn cleaf_353(__354%U) {
  x_355 :=
    lazy {
      x_357 :=
        fn lam_358(_359%L) { x_360 := leaf_worker_285(_359);
                             return x_360; };
      x_356 := fork(x_357);
      return x_356;
    };
  return x_355;
}

fn cnode_361(x_362%U, l_363%U, r_364%U, __365%L, __366%L) {
  x_367 :=
    lazy {
      x_369 := force(__365);
      l_ch_368 := x_369;
      x_371 := force(__366);
      r_ch_370 := x_371;
      x_373 :=
        fn lam_374(_375%L) {
          x_376 := node_worker_301(x_362, NULL, NULL, l_ch_368, r_ch_370, _375);
          return x_376;
        };
      x_372 := fork(x_373);
      return x_372;
    };
  return x_367;
}

fn cfree_377(t_378%U, ct_379%U) {
  x_380 :=
    lazy {
      x_382 := force(ct_379);
      c_381 := x_382;
      x_384 := send(c_381, Free_15);
      c_383 := x_384;
      x_385 := close[false](c_383);
      return x_385;
    };
  return x_380;
}

fn clookup_386(k_387%U, t_388%U, ct_389%U) {
  x_390 :=
    lazy {
      x_392 := force(ct_389);
      c_391 := x_392;
      x_395 := mkconstr(Lookup_16, [k_387]);
      x_394 := send(c_391, x_395);
      c_393 := x_394;
      x_397 := recv[U](c_393);
      _396 := x_397;
      match[L](_396){
        ex1UL_43(m_399, n_400) => {
          x_401 := lazy { 
                          return n_400; };
          x_402 := reconstr(_396, ex1UL_43, [m_399, x_401]);
          x_398 := x_402;
        }
      }
      return x_398;
    };
  return x_390;
}

fn mytree1_403(x_404%U) {
  x_406 := cleaf_353(ttU_24);
  x_407 := cleaf_353(ttU_24);
  x_405 := cnode_361(x_404, NULL, NULL, x_406, x_407);
  return x_405;
}

fn mytree2_408(x_409%U) {
  x_411 := mytree1_403(1);
  x_412 := mytree1_403(2);
  x_410 := cnode_361(x_409, NULL, NULL, x_411, x_412);
  return x_410;
}

fn mytree3_413(x_414%U) {
  x_416 := mytree2_408(3);
  x_417 := mytree2_408(4);
  x_415 := cnode_361(x_414, NULL, NULL, x_416, x_417);
  return x_415;
}

fn mytree4_418(x_419%U) {
  x_421 := mytree3_413(8);
  x_422 := mytree3_413(7);
  x_420 := cnode_361(x_419, NULL, NULL, x_421, x_422);
  return x_420;
}

fn mytree5_423(x_424%U) {
  x_426 := mytree4_418(9);
  x_427 := mytree4_418(10);
  x_425 := cnode_361(x_424, NULL, NULL, x_426, x_427);
  return x_425;
}

fn mytree6_428(x_429%U) {
  x_431 := mytree5_423(11);
  x_432 := mytree5_423(12);
  x_430 := cnode_361(x_429, NULL, NULL, x_431, x_432);
  return x_430;
}

main := {
  x_434 := mytree6_428(100);
  ct_433 := x_434;
  x_435 :=
    lazy {
      x_438 := clookup_386(1, NULL, ct_433);
      x_437 := force(x_438);
      _436 := x_437;
      match[L](_436){
        ex1UL_43(m_440, n_441) => {
          match(m_440){
            true_4 => {
              x_445 := str("true");
              x_444 := print(x_445);
              x_443 := x_444;
            }
            false_5 => {
              x_447 := str("false");
              x_446 := print(x_447);
              x_443 := x_446;
            }
          }
          __442 := x_443;
          x_449 := cfree_377(NULL, n_441);
          x_448 := force(x_449);
          x_439 := x_448;
          free(_436);
        }
      }
      return x_439;
    };
  return x_435;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_450(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_451(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_452 := fn0_idU_450(A_2, m_3);
  return x_452;
}

fn fn0_idL_453(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_454(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_455 := fn0_idL_453(A_5, m_6);
  return x_455;
}

fn fn0_rwlUU_456(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_457(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_458 := fn0_rwlUU_456(A_8, m_9, n_10, B_11, __12, __13);
  return x_458;
}

fn fn0_rwlUL_459(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_460(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_461 := fn0_rwlUL_459(A_15, m_16, n_17, B_18, __19, __20);
  return x_461;
}

fn fn0_rwlLU_462(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_463(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_464 := fn0_rwlLU_462(A_22, m_23, n_24, B_25, __26, __27);
  return x_464;
}

fn fn0_rwlLL_465(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_466(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_467 := fn0_rwlLL_465(A_29, m_30, n_31, B_32, __33, __34);
  return x_467;
}

fn fn0_rwrUU_468(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_469(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_470 := fn0_rwrUU_468(A_36, m_37, n_38, B_39, __40, __41);
  return x_470;
}

fn fn0_rwrUL_471(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_472(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_473 := fn0_rwrUL_471(A_43, m_44, n_45, B_46, __47, __48);
  return x_473;
}

fn fn0_rwrLU_474(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_475(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_476 := fn0_rwrLU_474(A_50, m_51, n_52, B_53, __54, __55);
  return x_476;
}

fn fn0_rwrLL_477(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_478(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_479 := fn0_rwrLL_477(A_57, m_58, n_59, B_60, __61, __62);
  return x_479;
}

fn fn0_sing_elimUU_480(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_481(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_482 := fn0_sing_elimUU_480(A_64, x_65, __66);
  return x_482;
}

fn fn0_sing_elimUL_483(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_484(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_485 := fn0_sing_elimUL_483(A_68, x_69, __70);
  return x_485;
}

fn fn0_sing_elimLU_486(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_487(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_488 := fn0_sing_elimLU_486(A_72, x_73, __74);
  return x_488;
}

fn fn0_sing_elimLL_489(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_490(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_491 := fn0_sing_elimLL_489(A_76, x_77, __78);
  return x_491;
}

fn fn0_not_492(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_493(env) {
  __80 := env[1];
  x_494 := fn0_not_492(__80);
  return x_494;
}

fn fn0_and_495(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_496(env) {
  __83 := env[1];
  __84 := env[2];
  x_497 := fn0_and_495(__83, __84);
  return x_497;
}

fn fn0_or_498(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_499(env) {
  __88 := env[1];
  __89 := env[2];
  x_500 := fn0_or_498(__88, __89);
  return x_500;
}

fn fn0_xor_501(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_502(env) {
  __93 := env[1];
  __94 := env[2];
  x_503 := fn0_xor_501(__93, __94);
  return x_503;
}

fn fn0_lte_504(__99, __100) {
  switch(__99){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    _ => {
      getbox(n_103, __99, 0);
      switch(__100){
        zero_6 => {
          move1(x_104, false_5);
          break;
        }
        _ => {
          getbox(n_106, __100, 0);
          x_107 := fn0_lte_504(n_103, n_106);
          move1(x_105, x_107);
          move1(x_104, x_105);
          break;
        }
      }
      move1(x_102, x_104);
      move1(x_101, x_102);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_505(env) {
  __99 := env[1];
  __100 := env[2];
  x_506 := fn0_lte_504(__99, __100);
  return x_506;
}

fn fn0_lt_507(x_109, y_110) {
  mkbox(x_112, succ_7, 1);
  setbox(x_112, x_109, 0);
  x_111 := fn0_lte_504(x_112, y_110);
  return x_111;
}

fn fn1_lt_508(env) {
  x_109 := env[1];
  y_110 := env[2];
  x_509 := fn0_lt_507(x_109, y_110);
  return x_509;
}

fn fn0_pred_510(__114) {
  switch(__114){
    zero_6 => {
      move1(x_115, zero_6);
      break;
    }
    _ => {
      getbox(n_117, __114, 0);
      move1(x_116, n_117);
      move1(x_115, x_116);
      break;
    }
  }
  return x_115;
}

fn fn1_pred_511(env) {
  __114 := env[1];
  x_512 := fn0_pred_510(__114);
  return x_512;
}

fn fn0_add_513(__119, __120) {
  switch(__119){
    zero_6 => {
      move1(x_121, __120);
      break;
    }
    _ => {
      getbox(n_123, __119, 0);
      x_124 := fn0_add_513(n_123, __120);
      mkbox(x_125, succ_7, 1);
      setbox(x_125, x_124, 0);
      move1(x_122, x_125);
      move1(x_121, x_122);
      break;
    }
  }
  return x_121;
}

fn fn1_add_514(env) {
  __119 := env[1];
  __120 := env[2];
  x_515 := fn0_add_513(__119, __120);
  return x_515;
}

fn fn0_sub_516(__127, __128) {
  switch(__128){
    zero_6 => {
      move1(x_129, __127);
      break;
    }
    _ => {
      getbox(n_131, __128, 0);
      x_133 := fn0_pred_510(__127);
      x_132 := fn0_sub_516(x_133, n_131);
      move1(x_130, x_132);
      move1(x_129, x_130);
      break;
    }
  }
  return x_129;
}

fn fn1_sub_517(env) {
  __127 := env[1];
  __128 := env[2];
  x_518 := fn0_sub_516(__127, __128);
  return x_518;
}

fn fn0_mul_519(__135, __136) {
  switch(__135){
    zero_6 => {
      move1(x_137, zero_6);
      break;
    }
    _ => {
      getbox(n_139, __135, 0);
      x_141 := fn0_mul_519(n_139, __136);
      x_140 := fn0_add_513(__136, x_141);
      move1(x_138, x_140);
      move1(x_137, x_138);
      break;
    }
  }
  return x_137;
}

fn fn1_mul_520(env) {
  __135 := env[1];
  __136 := env[2];
  x_521 := fn0_mul_519(__135, __136);
  return x_521;
}

fn fn0_div_522(x_143, y_144) {
  x_146 := fn0_lt_507(x_143, y_144);
  switch(x_146){
    true_4 => {
      move1(x_145, zero_6);
      break;
    }
    false_5 => {
      mkclo1(x_148, fn1_loop_524, fvc:=2, argc:=2);
      setclo(x_148, pred_113, 1);
      setclo(x_148, sub_126, 2);
      move1(loop_147, x_148);
      appc(x_528, loop_147, x_143);
      appc(x_529, x_528, y_144);
      move1(x_161, x_529);
      move1(x_145, x_161);
      break;
    }
  }
  return x_145;
}

fn fn1_div_523(env) {
  x_143 := env[1];
  y_144 := env[2];
  x_531 := fn0_div_522(x_143, y_144);
  return x_531;
}

fn fn0_rem_532(x_163, y_164) {
  x_167 := fn0_div_522(x_163, y_164);
  x_166 := fn0_mul_519(x_167, y_164);
  x_165 := fn0_sub_516(x_163, x_166);
  return x_165;
}

fn fn1_rem_533(env) {
  x_163 := env[1];
  y_164 := env[2];
  x_534 := fn0_rem_532(x_163, y_164);
  return x_534;
}

fn fn0_free_listUU_535(A_169, f_170, __171) {
  switch(__171){
    nilUU_31 => {
      move1(x_172, ttU_24);
      break;
    }
    _ => {
      getbox(hd_174, __171, 0);
      getbox(tl_175, __171, 1);
      appc(x_537, f_170, hd_174);
      move1(x_177, x_537);
      move1(__176, x_177);
      x_178 := fn0_free_listUU_535(NULL, f_170, tl_175);
      move1(x_173, x_178);
      move1(x_172, x_173);
      break;
    }
  }
  return x_172;
}

fn fn1_free_listUU_536(env) {
  A_169 := env[1];
  f_170 := env[2];
  __171 := env[3];
  x_539 := fn0_free_listUU_535(A_169, f_170, __171);
  return x_539;
}

fn fn0_free_listUL_540(A_180, f_181, __182) {
  switch(__182){
    nilUL_29 => {
      move1(x_183, ttU_24);
      break;
    }
    _ => {
      getbox(hd_185, __182, 0);
      getbox(tl_186, __182, 1);
      appc(x_542, f_181, hd_185);
      move1(x_188, x_542);
      move1(__187, x_188);
      x_189 := fn0_free_listUL_540(NULL, f_181, tl_186);
      move1(x_184, x_189);
      free(__182);
      move1(x_183, x_184);
      break;
    }
  }
  return x_183;
}

fn fn1_free_listUL_541(env) {
  A_180 := env[1];
  f_181 := env[2];
  __182 := env[3];
  x_544 := fn0_free_listUL_540(A_180, f_181, __182);
  return x_544;
}

fn fn0_free_listLL_545(A_191, f_192, __193) {
  switch(__193){
    nilLL_25 => {
      move1(x_194, ttU_24);
      break;
    }
    _ => {
      getbox(hd_196, __193, 0);
      getbox(tl_197, __193, 1);
      appc(x_547, f_192, hd_196);
      move1(x_199, x_547);
      move1(__198, x_199);
      x_200 := fn0_free_listLL_545(NULL, f_192, tl_197);
      move1(x_195, x_200);
      free(__193);
      move1(x_194, x_195);
      break;
    }
  }
  return x_194;
}

fn fn1_free_listLL_546(env) {
  A_191 := env[1];
  f_192 := env[2];
  __193 := env[3];
  x_549 := fn0_free_listLL_545(A_191, f_192, __193);
  return x_549;
}

fn fn0_pow_550(x_202, y_203) {
  mkclo1(x_205, fn1_loop_552, fvc:=1, argc:=2);
  setclo(x_205, x_202, 1);
  move1(loop_204, x_205);
  appc(x_556, loop_204, 1);
  appc(x_557, x_556, y_203);
  move1(x_214, x_557);
  return x_214;
}

fn fn1_pow_551(env) {
  x_202 := env[1];
  y_203 := env[2];
  x_559 := fn0_pow_550(x_202, y_203);
  return x_559;
}

fn fn0_powm_560(x_216, y_217, m_218) {
  mkclo1(x_220, fn1_loop_562, fvc:=2, argc:=2);
  setclo(x_220, x_216, 1);
  setclo(x_220, m_218, 2);
  move1(loop_219, x_220);
  appc(x_566, loop_219, 1);
  appc(x_567, x_566, y_217);
  move1(x_230, x_567);
  return x_230;
}

fn fn1_powm_561(env) {
  x_216 := env[1];
  y_217 := env[2];
  m_218 := env[3];
  x_569 := fn0_powm_560(x_216, y_217, m_218);
  return x_569;
}

fn fn0_ord_570(c_232) {
  ord(x_233, c_232);
  return x_233;
}

fn fn1_ord_571(env) {
  c_232 := env[1];
  x_572 := fn0_ord_570(c_232);
  return x_572;
}

fn fn0_chr_573(i_235) {
  chr(x_236, i_235);
  return x_236;
}

fn fn1_chr_574(env) {
  i_235 := env[1];
  x_575 := fn0_chr_573(i_235);
  return x_575;
}

fn fn0_str_576(c_238) {
  str(x_240, "")
  push(x_239, x_240, c_238);
  return x_239;
}

fn fn1_str_577(env) {
  c_238 := env[1];
  x_578 := fn0_str_576(c_238);
  return x_578;
}

fn fn0_strlen_579(s_242) {
  size(x_243, s_242);
  return x_243;
}

fn fn1_strlen_580(env) {
  s_242 := env[1];
  x_581 := fn0_strlen_579(s_242);
  return x_581;
}

fn fn0_string_of_int_582(i_245) {
  mkclo1(x_247, fn1_aux_584, fvc:=3, argc:=1);
  setclo(x_247, ord_231, 1);
  setclo(x_247, chr_234, 2);
  setclo(x_247, str_237, 3);
  move1(aux_246, x_247);
  lte(x_266, 0, i_245);
  switch(x_266){
    true_4 => {
      appc(x_587, aux_246, i_245);
      move1(x_267, x_587);
      move1(x_265, x_267);
      break;
    }
    false_5 => {
      str(x_269, "~")
      neg(x_271, i_245);
      appc(x_589, aux_246, x_271);
      move1(x_270, x_589);
      cat(x_268, x_269, x_270);
      move1(x_265, x_268);
      break;
    }
  }
  return x_265;
}

fn fn1_string_of_int_583(env) {
  i_245 := env[1];
  x_591 := fn0_string_of_int_582(i_245);
  return x_591;
}

fn fn0_lookup_592(n_273, __274) {
  switch(__274){
    Leaf_13 => {
      move1(x_275, false_5);
      break;
    }
    _ => {
      getbox(__277, __274, 0);
      getbox(l_278, __274, 1);
      getbox(r_279, __274, 2);
      eq(x_281, __277, n_273);
      switch(x_281){
        true_4 => {
          move1(x_280, true_4);
          break;
        }
        false_5 => {
          x_283 := fn0_lookup_592(n_273, l_278);
          x_284 := fn0_lookup_592(n_273, r_279);
          x_282 := fn0_or_498(x_283, x_284);
          move1(x_280, x_282);
          break;
        }
      }
      move1(x_276, x_280);
      move1(x_275, x_276);
      break;
    }
  }
  return x_275;
}

fn fn1_lookup_593(env) {
  n_273 := env[1];
  __274 := env[2];
  x_594 := fn0_lookup_592(n_273, __274);
  return x_594;
}

fn fn0_leaf_worker_595(c_286) {
  lazy(x_287, lazy__597, 2);
  setlazy(x_287, leaf_worker_285, 0);
  setlazy(x_287, c_286, 1);
  return x_287;
}

fn fn1_leaf_worker_596(env) {
  c_286 := env[1];
  x_598 := fn0_leaf_worker_595(c_286);
  return x_598;
}

fn fn0_node_worker_599(x_302, l_303, r_304, __305, __306, __307) {
  lazy(x_308, lazy__601, 6);
  setlazy(x_308, or_87, 0);
  setlazy(x_308, node_worker_301, 1);
  setlazy(x_308, x_302, 2);
  setlazy(x_308, __305, 3);
  setlazy(x_308, __306, 4);
  setlazy(x_308, __307, 5);
  return x_308;
}

fn fn1_node_worker_600(env) {
  x_302 := env[1];
  l_303 := env[2];
  r_304 := env[3];
  __305 := env[4];
  __306 := env[5];
  __307 := env[6];
  x_602 := fn0_node_worker_599(x_302, l_303, r_304, __305, __306, __307);
  return x_602;
}

fn fn0_cleaf_603(__354) {
  lazy(x_355, lazy__605, 1);
  setlazy(x_355, leaf_worker_285, 0);
  return x_355;
}

fn fn1_cleaf_604(env) {
  __354 := env[1];
  x_607 := fn0_cleaf_603(__354);
  return x_607;
}

fn fn0_cnode_608(x_362, l_363, r_364, __365, __366) {
  lazy(x_367, lazy__610, 4);
  setlazy(x_367, node_worker_301, 0);
  setlazy(x_367, x_362, 1);
  setlazy(x_367, __365, 2);
  setlazy(x_367, __366, 3);
  return x_367;
}

fn fn1_cnode_609(env) {
  x_362 := env[1];
  l_363 := env[2];
  r_364 := env[3];
  __365 := env[4];
  __366 := env[5];
  x_612 := fn0_cnode_608(x_362, l_363, r_364, __365, __366);
  return x_612;
}

fn fn0_cfree_613(t_378, ct_379) {
  lazy(x_380, lazy__615, 1);
  setlazy(x_380, ct_379, 0);
  return x_380;
}

fn fn1_cfree_614(env) {
  t_378 := env[1];
  ct_379 := env[2];
  x_616 := fn0_cfree_613(t_378, ct_379);
  return x_616;
}

fn fn0_clookup_617(k_387, t_388, ct_389) {
  lazy(x_390, lazy__619, 2);
  setlazy(x_390, k_387, 0);
  setlazy(x_390, ct_389, 1);
  return x_390;
}

fn fn1_clookup_618(env) {
  k_387 := env[1];
  t_388 := env[2];
  ct_389 := env[3];
  x_621 := fn0_clookup_617(k_387, t_388, ct_389);
  return x_621;
}

fn fn0_mytree1_622(x_404) {
  x_406 := fn0_cleaf_603(ttU_24);
  x_407 := fn0_cleaf_603(ttU_24);
  x_405 := fn0_cnode_608(x_404, NULL, NULL, x_406, x_407);
  return x_405;
}

fn fn1_mytree1_623(env) {
  x_404 := env[1];
  x_624 := fn0_mytree1_622(x_404);
  return x_624;
}

fn fn0_mytree2_625(x_409) {
  x_411 := fn0_mytree1_622(1);
  x_412 := fn0_mytree1_622(2);
  x_410 := fn0_cnode_608(x_409, NULL, NULL, x_411, x_412);
  return x_410;
}

fn fn1_mytree2_626(env) {
  x_409 := env[1];
  x_627 := fn0_mytree2_625(x_409);
  return x_627;
}

fn fn0_mytree3_628(x_414) {
  x_416 := fn0_mytree2_625(3);
  x_417 := fn0_mytree2_625(4);
  x_415 := fn0_cnode_608(x_414, NULL, NULL, x_416, x_417);
  return x_415;
}

fn fn1_mytree3_629(env) {
  x_414 := env[1];
  x_630 := fn0_mytree3_628(x_414);
  return x_630;
}

fn fn0_mytree4_631(x_419) {
  x_421 := fn0_mytree3_628(8);
  x_422 := fn0_mytree3_628(7);
  x_420 := fn0_cnode_608(x_419, NULL, NULL, x_421, x_422);
  return x_420;
}

fn fn1_mytree4_632(env) {
  x_419 := env[1];
  x_633 := fn0_mytree4_631(x_419);
  return x_633;
}

fn fn0_mytree5_634(x_424) {
  x_426 := fn0_mytree4_631(9);
  x_427 := fn0_mytree4_631(10);
  x_425 := fn0_cnode_608(x_424, NULL, NULL, x_426, x_427);
  return x_425;
}

fn fn1_mytree5_635(env) {
  x_424 := env[1];
  x_636 := fn0_mytree5_634(x_424);
  return x_636;
}

fn fn0_mytree6_637(x_429) {
  x_431 := fn0_mytree5_634(11);
  x_432 := fn0_mytree5_634(12);
  x_430 := fn0_cnode_608(x_429, NULL, NULL, x_431, x_432);
  return x_430;
}

fn fn1_mytree6_638(env) {
  x_429 := env[1];
  x_639 := fn0_mytree6_637(x_429);
  return x_639;
}

fn lazy__641(env) {
  cfree_377 := env[0];
  clookup_386 := env[1];
  ct_433 := env[2];
  x_438 := fn0_clookup_617(1, NULL, ct_433);
  force(x_437, x_438);
  free(x_438);
  move1(_436, x_437);
  getbox(m_440, _436, 0);
  getbox(n_441, _436, 1);
  switch(m_440){
    true_4 => {
      str(x_445, "true")
      print(x_444, x_445);
      move1(x_443, x_444);
      break;
    }
    false_5 => {
      str(x_447, "false")
      print(x_446, x_447);
      move1(x_443, x_446);
      break;
    }
  }
  move1(__442, x_443);
  x_449 := fn0_cfree_613(NULL, n_441);
  force(x_448, x_449);
  free(x_449);
  move1(x_439, x_448);
  free(_436);
  return x_439;
}

fn lazy__619(env) {
  k_387 := env[0];
  ct_389 := env[1];
  force(x_392, ct_389);
  free(ct_389);
  move1(c_391, x_392);
  mkbox(x_395, Lookup_16, 1);
  setbox(x_395, k_387, 0);
  send(x_394, c_391, x_395);
  move1(c_393, x_394);
  recv0(x_397, c_393);
  move1(_396, x_397);
  getbox(m_399, _396, 0);
  getbox(n_400, _396, 1);
  lazy(x_401, lazy__620, 1);
  setlazy(x_401, n_400, 0);
  rebox(x_402, _396, ex1UL_43);
  setbox(x_402, m_399, 0);
  setbox(x_402, x_401, 1);
  move1(x_398, x_402);
  return x_398;
}

fn lazy__620(env) {
  n_400 := env[0];
  return n_400;
}

fn lazy__615(env) {
  ct_379 := env[0];
  force(x_382, ct_379);
  free(ct_379);
  move1(c_381, x_382);
  send(x_384, c_381, Free_15);
  move1(c_383, x_384);
  close1(x_385, c_383);
  return x_385;
}

fn lazy__610(env) {
  node_worker_301 := env[0];
  x_362 := env[1];
  __365 := env[2];
  __366 := env[3];
  force(x_369, __365);
  free(__365);
  move1(l_ch_368, x_369);
  force(x_371, __366);
  free(__366);
  move1(r_ch_370, x_371);
  mkclo1(x_373, fn1_lam_611, fvc:=4, argc:=1);
  setclo(x_373, node_worker_301, 1);
  setclo(x_373, x_362, 2);
  setclo(x_373, l_ch_368, 3);
  setclo(x_373, r_ch_370, 4);
  fork(x_372, x_373);
  return x_372;
}

fn fn1_lam_611(env) {
  lam_374 := env[0];
  node_worker_301 := env[1];
  x_362 := env[2];
  l_ch_368 := env[3];
  r_ch_370 := env[4];
  _375 := env[5];
  x_376 := fn0_node_worker_599(x_362, NULL, NULL, l_ch_368, r_ch_370, _375);
  return x_376;
}

fn lazy__605(env) {
  leaf_worker_285 := env[0];
  mkclo1(x_357, fn1_lam_606, fvc:=1, argc:=1);
  setclo(x_357, leaf_worker_285, 1);
  fork(x_356, x_357);
  return x_356;
}

fn fn1_lam_606(env) {
  lam_358 := env[0];
  leaf_worker_285 := env[1];
  _359 := env[2];
  x_360 := fn0_leaf_worker_595(_359);
  return x_360;
}

fn lazy__601(env) {
  or_87 := env[0];
  node_worker_301 := env[1];
  x_302 := env[2];
  __305 := env[3];
  __306 := env[4];
  __307 := env[5];
  recv0(x_310, __307);
  move1(_309, x_310);
  getbox(m_312, _309, 0);
  getbox(n_313, _309, 1);
  switch(m_312){
    Free_15 => {
      send(x_316, __305, Free_15);
      move1(l_ch_315, x_316);
      send(x_318, __306, Free_15);
      move1(r_ch_317, x_318);
      close1(x_320, l_ch_315);
      move1(__319, x_320);
      close1(x_322, r_ch_317);
      move1(__321, x_322);
      close0(x_323, n_313);
      move1(x_314, x_323);
      break;
    }
    _ => {
      getbox(k_325, m_312, 0);
      eq(x_327, x_302, k_325);
      switch(x_327){
        true_4 => {
          send(x_329, n_313, true_4);
          move1(c_328, x_329);
          x_331 := fn0_node_worker_599(x_302, NULL, NULL, __305, __306, c_328);
          force(x_330, x_331);
          free(x_331);
          move1(x_326, x_330);
          break;
        }
        false_5 => {
          mkbox(x_334, Lookup_16, 1);
          setbox(x_334, k_325, 0);
          send(x_333, __305, x_334);
          move1(l_ch_332, x_333);
          mkbox(x_337, Lookup_16, 1);
          setbox(x_337, k_325, 0);
          send(x_336, __306, x_337);
          move1(r_ch_335, x_336);
          recv0(x_339, l_ch_332);
          move1(_338, x_339);
          getbox(m_341, _338, 0);
          getbox(n_342, _338, 1);
          recv0(x_344, r_ch_335);
          move1(_343, x_344);
          getbox(m_346, _343, 0);
          getbox(n_347, _343, 1);
          x_350 := fn0_or_498(m_341, m_346);
          send(x_349, n_313, x_350);
          move1(c_348, x_349);
          x_352 := fn0_node_worker_599(x_302, NULL, NULL, n_342, n_347, c_348);
          force(x_351, x_352);
          free(x_352);
          move1(x_345, x_351);
          free(_343);
          move1(x_340, x_345);
          free(_338);
          move1(x_326, x_340);
          break;
        }
      }
      move1(x_324, x_326);
      move1(x_314, x_324);
      break;
    }
  }
  move1(x_311, x_314);
  free(_309);
  return x_311;
}

fn lazy__597(env) {
  leaf_worker_285 := env[0];
  c_286 := env[1];
  recv0(x_289, c_286);
  move1(_288, x_289);
  getbox(m_291, _288, 0);
  getbox(n_292, _288, 1);
  switch(m_291){
    Free_15 => {
      close0(x_294, n_292);
      move1(x_293, x_294);
      break;
    }
    _ => {
      send(x_298, n_292, false_5);
      move1(c_297, x_298);
      x_300 := fn0_leaf_worker_595(c_297);
      force(x_299, x_300);
      free(x_300);
      move1(x_295, x_299);
      move1(x_293, x_295);
      break;
    }
  }
  move1(x_290, x_293);
  free(_288);
  return x_290;
}

fn fn1_aux_584(env) {
  aux_248 := env[0];
  ord_231 := env[1];
  chr_234 := env[2];
  str_237 := env[3];
  i_249 := env[4];
  lte(x_251, 10, i_249);
  switch(x_251){
    true_4 => {
      mod(x_253, i_249, 10);
      move1(r_252, x_253);
      div(x_255, i_249, 10);
      move1(i_254, x_255);
      appc(x_585, aux_248, i_254);
      move1(x_257, x_585);
      x_260 := fn0_ord_570(0);
      add(x_259, r_252, x_260);
      x_258 := fn0_chr_573(x_259);
      push(x_256, x_257, x_258);
      move1(x_250, x_256);
      break;
    }
    false_5 => {
      x_264 := fn0_ord_570(0);
      add(x_263, i_249, x_264);
      x_262 := fn0_chr_573(x_263);
      x_261 := fn0_str_576(x_262);
      move1(x_250, x_261);
      break;
    }
  }
  return x_250;
}

fn fn1_loop_562(env) {
  loop_221 := env[0];
  x_216 := env[1];
  m_218 := env[2];
  acc_222 := env[3];
  y_223 := env[4];
  lte(x_225, y_223, 0);
  switch(x_225){
    true_4 => {
      move1(x_224, acc_222);
      break;
    }
    false_5 => {
      mul(x_228, x_216, acc_222);
      mod(x_227, x_228, m_218);
      sub(x_229, y_223, 1);
      appc(x_563, loop_221, x_227);
      appc(x_564, x_563, x_229);
      move1(x_226, x_564);
      move1(x_224, x_226);
      break;
    }
  }
  return x_224;
}

fn fn1_loop_552(env) {
  loop_206 := env[0];
  x_202 := env[1];
  acc_207 := env[2];
  y_208 := env[3];
  lte(x_210, y_208, 0);
  switch(x_210){
    true_4 => {
      move1(x_209, acc_207);
      break;
    }
    false_5 => {
      mul(x_212, x_202, acc_207);
      sub(x_213, y_208, 1);
      appc(x_553, loop_206, x_212);
      appc(x_554, x_553, x_213);
      move1(x_211, x_554);
      move1(x_209, x_211);
      break;
    }
  }
  return x_209;
}

fn fn1_loop_524(env) {
  loop_149 := env[0];
  pred_113 := env[1];
  sub_126 := env[2];
  x_150 := env[3];
  y_151 := env[4];
  x_154 := fn0_pred_510(y_151);
  x_153 := fn0_sub_516(x_150, x_154);
  switch(x_153){
    zero_6 => {
      move1(x_152, zero_6);
      break;
    }
    _ => {
      x_157 := fn0_pred_510(y_151);
      x_156 := fn0_sub_516(x_150, x_157);
      getbox(n_158, x_156, 0);
      appc(x_525, loop_149, n_158);
      appc(x_526, x_525, y_151);
      move1(x_159, x_526);
      mkbox(x_160, succ_7, 1);
      setbox(x_160, x_159, 0);
      move1(x_155, x_160);
      move1(x_152, x_155);
      break;
    }
  }
  return x_152;
}

main {
  mkclo0(idU_1, fn1_idU_451, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_454, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_457, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_460, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_463, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_466, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_469, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_472, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_475, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_478, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_481, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_484, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_487, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_490, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_493, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_496, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_499, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_502, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_505, fvc:=0, argc:=2);
  mkclo0(lt_108, fn1_lt_508, fvc:=0, argc:=2);
  mkclo0(pred_113, fn1_pred_511, fvc:=0, argc:=1);
  mkclo0(add_118, fn1_add_514, fvc:=0, argc:=2);
  mkclo0(sub_126, fn1_sub_517, fvc:=0, argc:=2);
  mkclo0(mul_134, fn1_mul_520, fvc:=0, argc:=2);
  mkclo0(div_142, fn1_div_523, fvc:=0, argc:=2);
  mkclo0(rem_162, fn1_rem_533, fvc:=0, argc:=2);
  mkclo0(free_listUU_168, fn1_free_listUU_536, fvc:=0, argc:=3);
  mkclo0(free_listUL_179, fn1_free_listUL_541, fvc:=0, argc:=3);
  mkclo0(free_listLL_190, fn1_free_listLL_546, fvc:=0, argc:=3);
  mkclo0(pow_201, fn1_pow_551, fvc:=0, argc:=2);
  mkclo0(powm_215, fn1_powm_561, fvc:=0, argc:=3);
  mkclo0(ord_231, fn1_ord_571, fvc:=0, argc:=1);
  mkclo0(chr_234, fn1_chr_574, fvc:=0, argc:=1);
  mkclo0(str_237, fn1_str_577, fvc:=0, argc:=1);
  mkclo0(strlen_241, fn1_strlen_580, fvc:=0, argc:=1);
  mkclo0(string_of_int_244, fn1_string_of_int_583, fvc:=0, argc:=1);
  mkclo0(lookup_272, fn1_lookup_593, fvc:=0, argc:=2);
  mkclo0(leaf_worker_285, fn1_leaf_worker_596, fvc:=0, argc:=1);
  mkclo0(node_worker_301, fn1_node_worker_600, fvc:=0, argc:=6);
  mkclo0(cleaf_353, fn1_cleaf_604, fvc:=0, argc:=1);
  mkclo0(cnode_361, fn1_cnode_609, fvc:=0, argc:=5);
  mkclo0(cfree_377, fn1_cfree_614, fvc:=0, argc:=2);
  mkclo0(clookup_386, fn1_clookup_618, fvc:=0, argc:=3);
  mkclo0(mytree1_403, fn1_mytree1_623, fvc:=0, argc:=1);
  mkclo0(mytree2_408, fn1_mytree2_626, fvc:=0, argc:=1);
  mkclo0(mytree3_413, fn1_mytree3_629, fvc:=0, argc:=1);
  mkclo0(mytree4_418, fn1_mytree4_632, fvc:=0, argc:=1);
  mkclo0(mytree5_423, fn1_mytree5_635, fvc:=0, argc:=1);
  mkclo0(mytree6_428, fn1_mytree6_638, fvc:=0, argc:=1);
  x_434 := fn0_mytree6_637(100);
  move1(ct_433, x_434);
  lazy(x_435, lazy__641, 3);
  setlazy(x_435, cfree_377, 0);
  setlazy(x_435, clookup_386, 1);
  setlazy(x_435, ct_433, 2);
  force(x_640, x_435);
  return x_640;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

