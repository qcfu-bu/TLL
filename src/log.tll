[Inductive {name = "bool"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)),
          [(DMul ("true", (TBase (Id "bool"))));
            (DMul ("false", (TBase (Id "bool"))))]))
      ))};
  Inductive {name = "unit"; relv = R;
    body =
    (Binder ([],
       (PBase ((TBase (Type U)), [(DMul ("tt", (TBase (Id "unit"))))]))))};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DMul ("zero", (TBase (Id "nat"))));
             (DMul ("succ",
                (TBind (R, (Id "nat"), (Binder ("pred", (TBase (Id "nat"))))
                   ))
                ))
             ]))
       ))};
  Inductive {name = "vec"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id "nat"),
                    (Binder ("_", (TBase (Type (SId "r"))))))),
                 [(DMul ("vnil",
                     (TBase
                        (App
                           [(Inst ("vec", [(SId "s"); (SId "r")])); (
                             Id "A"); (Id "zero")]))
                     ));
                   (DAdd ("vcons",
                      (TBind (N, (Id "nat"),
                         (Binder ("n",
                            (TBind (R, (Id "A"),
                               (Binder ("hd",
                                  (TBind (R,
                                     (App
                                        [(Inst ("vec", [(SId "s"); (SId "r")]
                                            ));
                                          (Id "A"); (Id "n")]),
                                     (Binder ("tl",
                                        (TBase
                                           (App
                                              [(Inst ("vec",
                                                  [(SId "s"); (SId "r")]));
                                                (Id "A");
                                                (App [(Id "succ"); (Id "n")])
                                                ]))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ]))
             ))
          ))
       ))};
  Definition {name = "add"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id "nat"),
              (Binder ("x",
                 (Pi (R, U, (Id "nat"), (Binder ("_", (Id "nat")))))))
              )),
           (Binder ((Some "add"),
              [([(PId "x"); (PId "zero")], (Some (Id "x")));
                ([(PId "x"); (PId "succ");
                   (PMul ("succ", [(PId "m1"); (PId "n1")]));
                   (PMul ("succ", [(PId "m2"); (PId "n2")]))],
                 (Some (App
                          [(Id "succ");
                            (App [(Id "add"); (Id "x"); (Id "n2")])])))
                ]
              ))
           )),
        (Pi (R, U, (Id "nat"),
           (Binder ("x", (Pi (R, U, (Id "nat"), (Binder ("_", (Id "nat")))))
              ))
           )))
       ))};
  Definition {name = "test"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id "bool"),
              (Binder ("b",
                 (Match ([(R, (Id "b"), None)], None,
                    [([(PId "true")], (Some (Id "unit")));
                      ([(PId "false")], (Some (Id "nat")))]
                    ))
                 ))
              )),
           (Binder ((Some "test"),
              [([(PId "b")],
                (Some (Match ([(R, (Id "b"), (Some ("x", (Id "bool"))))],
                         (Some (Match ([(R, (Id "x"), None)], None,
                                  [([(PId "true")], (Some (Id "unit")));
                                    ([(PId "false")], (Some (Id "nat")))]
                                  ))),
                         [([(PId "true")], (Some (Id "tt")));
                           ([(PId "false")], (Some (Id "zero")))]
                         ))))
                ]
              ))
           )),
        (Pi (R, U, (Id "bool"),
           (Binder ("b",
              (Match ([(R, (Id "b"), None)], None,
                 [([(PId "true")], (Some (Id "unit")));
                   ([(PId "false")], (Some (Id "nat")))]
                 ))
              ))
           )))
       ))}
  ]

-----------------------------------------

#[program]
inductive bool_1‹› : U where
| true_1 : bool_1
| false_2 : bool_1

#[program]
inductive unit_2‹› : U where
| tt_3 : unit_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_27 : nat_3) : nat_3

#[program]
inductive vec_4‹s_28,r_29› (A_30 : Type‹s_28›):
  nat_3 -> Type‹r_29›
where
| vnil_6 : (vec_4‹s_28,r_29› A_30 zero_4)
| #[additive]
  vcons_7
    {n_32 : nat_3} (hd_33 : A_30) (tl_34 : (vec_4‹s_28,r_29› A_30 n_32))
    : (vec_4‹s_28,r_29› A_30 (succ_5‹› n_32))

#[logical]
def add_1‹› : nat_3 -> nat_3 -> nat_3 :=
  function add_37 : nat_3 -> nat_3 -> nat_3
  | x_40 zero_4 => x_40
  | x_41 succ_5 (succ_5 m1_42 n1_43) (succ_5 m2_44 n2_45) =>
    (succ_5‹› (add_37 x_41 n2_45))

#[program]
def test_2‹› :
  ∀ (b_46 : bool_1) ->
    match b_46 in ∀ (_47 : ?_5) -o ?_6 with
    | true_1 => unit_2 | false_2 => nat_3
:=
  function test_48 :
    ∀ (b_49 : bool_1) ->
      match b_49 in ∀ (_50 : ?_1) -o ?_2 with
      | true_1 => unit_2 | false_2 => nat_3
  | b_51 =>
    match b_51 in
      ∀ (x_52 : bool_1) -o
        match x_52 in ∀ (_53 : ?_3) -o ?_4 with
        | true_1 => unit_2 | false_2 => nat_3
    with
    | true_1 => tt_3 | false_2 => zero_4