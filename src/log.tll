[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "cmsort_ch"; relv = N;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "cmsort_ch"),
              [([(PId "xs")],
                (Some (Ch (true,
                         (Act (R, true,
                            (UOpr ("`",
                               (App [(Id ("msort", I)); (Id ("xs", I))]))),
                            (Binder ("_", End))))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "cmsort_worker"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("spwn",
                 (Pi (R, U,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("zs",
                       (Pi (R, L,
                          (App
                             [(Inst ("cmsort_ch", [(SId "t")], I));
                               (Id ("zs", I))]),
                          (Binder ("_", (IO (Id ("unit", I)))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cmsort_worker"),
              [([(PId "spwn")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("spwn", I)), (Int 0))), None)
                           ],
                         None,
                         [([(PId "true")],
                           (Some (Fun (
                                    (Pi (R, U,
                                       (App
                                          [(Inst ("list",
                                              [(SId "_"); (SId "t")], I));
                                            Int_t]),
                                       (Binder ("zs",
                                          (Pi (R, L,
                                             (App
                                                [(Inst ("cmsort_ch",
                                                    [(SId "t")], I));
                                                  (Id ("zs", I))]),
                                             (Binder ("_",
                                                (IO (Id ("unit", I)))))
                                             ))
                                          ))
                                       )),
                                    (Binder (None,
                                       [([(PId "zs"); (PId "c")],
                                         (Some (MLet (
                                                  (App
                                                     [(Send (Id ("c", I)));
                                                       (App
                                                          [(Id ("just", I));
                                                            (App
                                                               [(Id ("msort",
                                                                   I));
                                                                 (Id ("zs", I
                                                                    ))
                                                                 ])
                                                            ])
                                                       ]),
                                                  (Binder ((PId "c"),
                                                     (Close (Id ("c", I)))))
                                                  ))))
                                         ]
                                       )),
                                    []))));
                           ([(PId "false")],
                            (Some (Fun (
                                     (Pi (R, U,
                                        (App
                                           [(Inst ("list",
                                               [(SId "_"); (SId "t")], I));
                                             Int_t]),
                                        (Binder ("zs",
                                           (Pi (R, L,
                                              (App
                                                 [(Inst ("cmsort_ch",
                                                     [(SId "t")], I));
                                                   (Id ("zs", I))]),
                                              (Binder ("_",
                                                 (IO (Id ("unit", I)))))
                                              ))
                                           ))
                                        )),
                                     (Binder (None,
                                        [([(PId "nil"); (PId "c")],
                                          (Some (MLet (
                                                   (App
                                                      [(Send (Id ("c", I)));
                                                        (App
                                                           [(Id ("just", I));
                                                             (Id ("nil", I))])
                                                        ]),
                                                   (Binder ((PId "c"),
                                                      (Close (Id ("c", I)))))
                                                   ))));
                                          ([(PBOpr ("::", (PId "z"),
                                               (PId "nil")));
                                             (PId "c")],
                                           (Some (MLet (
                                                    (App
                                                       [(Send (Id ("c", I)));
                                                         (App
                                                            [(Id ("just", I));
                                                              (BOpr ("::",
                                                                 (Id ("z", I
                                                                    )),
                                                                 (Id ("nil",
                                                                    I))
                                                                 ))
                                                              ])
                                                         ]),
                                                    (Binder ((PId "c"),
                                                       (Close (Id ("c", I)))
                                                       ))
                                                    ))));
                                          ([(PId "zs"); (PId "c")],
                                           (Some (Match (
                                                    [(R,
                                                      (App
                                                         [(Id ("split", I));
                                                           (Id ("zs", I))]),
                                                      (Some ("h1", IMeta)));
                                                      (N, (Id ("refl", I)),
                                                       (Some ("_",
                                                              (BOpr ("=",
                                                                 (Let (R,
                                                                    (
                                                                    Id ("h1",
                                                                    I)),
                                                                    (
                                                                    Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "xs"),
                                                                    (PId "ys")
                                                                    )),
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs", I))
                                                                    ]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys", I))
                                                                    ])]))))),
                                                                 (Let (R,
                                                                    (
                                                                    App
                                                                    [(Id (
                                                                    "split",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]),
                                                                    (
                                                                    Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "xs"),
                                                                    (PId "ys")
                                                                    )),
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs", I))
                                                                    ]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys", I))
                                                                    ])])))))
                                                                 )))))
                                                      ],
                                                    None,
                                                    [([(PBOpr (
                                                          "\226\159\168,\226\159\169",
                                                          (PId "xs0"),
                                                          (PId "ys0")));
                                                        (PId "pf")],
                                                      (Some (MLet (
                                                               (Fork
                                                                  (Fun (
                                                                    (Pi (R,
                                                                    L, IMeta,
                                                                    (Binder (
                                                                    "",
                                                                    (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    ))))))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "c1")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id (
                                                                    "spwn", I
                                                                    )),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ));
                                                                    (Id (
                                                                    "c1", I))
                                                                    ])))])),
                                                                    []))),
                                                               (Binder (
                                                                  (PId "r1"),
                                                                  (MLet (
                                                                    (Fork
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    L, IMeta,
                                                                    (Binder (
                                                                    "",
                                                                    (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    ))))))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "c2")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id (
                                                                    "spwn", I
                                                                    )),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ));
                                                                    (Id (
                                                                    "c2", I))
                                                                    ])))])),
                                                                    []))),
                                                                    (Binder (
                                                                    (PId "r2"),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r1", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId
                                                                    "xs1"),
                                                                    (PId "c1")
                                                                    )),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c1", I))),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r2", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId
                                                                    "ys1"),
                                                                    (PId "c2")
                                                                    )),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c2", I))),
                                                                    (Match (
                                                                    [(R,
                                                                    (Id (
                                                                    "xs1", I
                                                                    )), None);
                                                                    (R,
                                                                    (Id (
                                                                    "ys1", I
                                                                    )), None)
                                                                    ], None,
                                                                    [([(PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "xs1")]));
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "ys1")]))
                                                                    ],
                                                                    (Some (
                                                                    Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (Id (
                                                                    "xs1", I
                                                                    ));
                                                                    (Id (
                                                                    "ys1", I
                                                                    ))])]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ))]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ))])])))
                                                                    )),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "rwl", I
                                                                    ));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U, IMeta,
                                                                    (Binder (
                                                                    "x",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "x")],
                                                                    (Some (
                                                                    UOpr (
                                                                    "`",
                                                                    (Id ("x",
                                                                    I))))))]
                                                                    )), 
                                                                    []));
                                                                    (Id (
                                                                    "pf", I));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]))))),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id ("c",
                                                                    I))),
                                                                    (Return
                                                                    (Id (
                                                                    "tt", I)))
                                                                    ))))))))
                                                                    ))))))))]
                                                                    ))))))))
                                                                    ))))))))
                                                                    ))
                                                                  ))
                                                               ))))
                                                      ]
                                                    ))))
                                          ]
                                        )),
                                     []))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("spwn",
              (Pi (R, U,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("zs",
                    (Pi (R, L,
                       (App
                          [(Inst ("cmsort_ch", [(SId "t")], I));
                            (Id ("zs", I))]),
                       (Binder ("_", (IO (Id ("unit", I)))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [E]};
  Definition {name = "cmsort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("zs",
                 (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))
                 ))
              )),
           (Binder ((Some "cmsort"),
              [([(PId "zs")],
                (Some (MLet (
                         (Fork
                            (Fun (
                               (Pi (R, L, IMeta,
                                  (Binder ("", (IO (Id ("unit", I))))))),
                               (Binder (None,
                                  [([(PId "c")],
                                    (Some (App
                                             [(Id ("cmsort_worker", I));
                                               (Int 4); (Id ("zs", I));
                                               (Id ("c", I))])))
                                    ]
                                  )),
                               []))),
                         (Binder ((PId "c"),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "msg"), (PId "c"))),
                                  (BOpr (";", (Close (Id ("c", I))),
                                     (Return (Id ("msg", I)))))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("zs",
              (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))))
           )))
       ));
    view = [E]};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "string_of_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", String_t)))),
           (Binder ((Some "string_of_list"),
              [([(PId "nil")], (Some (String "nil")));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr ("++",
                          (BOpr ("++",
                             (App [(Id ("string_of_int", I)); (Id ("x", I))]),
                             (String " :: "))),
                          (App [(Id ("string_of_list", I)); (Id ("xs", I))])
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", String_t)))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 2)]),
           (Binder ((PId "test"),
              (MLet ((App [(Id ("cmsort", I)); (Id ("test", I))]),
                 (Binder ((PConstr ("just", [(PId "sorted")])),
                    (Let (R,
                       (App [(Id ("list_len", I)); (Id ("sorted", I))]),
                       (Binder ((PId "len"),
                          (Print
                             (App
                                [(Id ("string_of_int", I)); (Id ("len", I))]))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_539› : ∀ (A_540 : Type‹s_539›) -> A_540 -> ?_2[0;0] :=
  fun id_542 : ∀ (A_543 : Type‹s_539›) -> A_543 -> ?_1[0;0]
  | A_545 m_546 => m_546

#[logical]
inductive eq_1‹s_547› (A_548 : Type‹s_547›) (m_549 : A_548):
  A_548 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_549 m_549)

#[program]
def rwl_2‹s_551,r_552› :
  ∀ {A_553 : Type‹s_551›} ->
    ∀ {m_554 : A_553} ->
      ∀ {n_555 : A_553} ->
        ∀ {B_556 : A_553 -> Type‹r_552›} ->
          {(eq_1‹??_3› ?_5[0;0] m_554 n_555)} ->
            ((B_556) m_554) -> ((B_556) n_555)
:=
  fun rwl_560 :
    ∀ {A_561 : Type‹s_551›} ->
      ∀ {m_562 : A_561} ->
        ∀ {n_563 : A_561} ->
          ∀ {B_564 : A_561 -> Type‹r_552›} ->
            {(eq_1‹??_2› ?_4[0;0] m_562 n_563)} ->
              ((B_564) m_562) -> ((B_564) n_563)
  | A_568 m_569 n_570 B_571 refl_1 x_572 => x_572

#[program]
def rwr_3‹s_573,r_574› :
  ∀ {A_575 : Type‹s_573›} ->
    ∀ {m_576 : A_575} ->
      ∀ {n_577 : A_575} ->
        ∀ {B_578 : A_575 -> Type‹r_574›} ->
          {(eq_1‹??_5› ?_7[0;0] m_576 n_577)} ->
            ((B_578) n_577) -> ((B_578) m_576)
:=
  fun rwr_582 :
    ∀ {A_583 : Type‹s_573›} ->
      ∀ {m_584 : A_583} ->
        ∀ {n_585 : A_583} ->
          ∀ {B_586 : A_583 -> Type‹r_574›} ->
            {(eq_1‹??_4› ?_6[0;0] m_584 n_585)} ->
              ((B_586) n_585) -> ((B_586) m_584)
  | A_590 m_591 n_592 B_593 refl_1 x_594 => x_594

#[logical]
def congr_4‹s_595,r_596,t_597› :
  ∀ (A_598 : Type‹s_595›) ->
    ∀ (B_599 : Type‹r_596›) ->
      ∀ (m_600 : A_598) ->
        ∀ (n_601 : A_598) ->
          ∀ (f_602 : forall‹t_597›(__603 : A_598), B_599) ->
            (eq_1‹??_9› ?_12[0;0] m_600 n_601) ->
              (eq_1‹??_10› ?_13[0;0] ((f_602) m_600) ((f_602) n_601))
:=
  fun congr_605 :
    ∀ (A_606 : Type‹s_595›) ->
      ∀ (B_607 : Type‹r_596›) ->
        ∀ (m_608 : A_606) ->
          ∀ (n_609 : A_606) ->
            ∀ (f_610 : forall‹t_597›(__611 : A_606), B_607) ->
              (eq_1‹??_6› ?_8[0;0] m_608 n_609) ->
                (eq_1‹??_7› ?_9[0;0] ((f_610) m_608) ((f_610) n_609))
  | A_613 B_614 m_615 n_616 f_617 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_618 : U} ->
    ∀ {m_619 : A_618} ->
      ∀ (x_620 : (eq_1‹??_15› ?_20[0;0] m_619 m_619)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_620 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_621 :
    ∀ {A_622 : U} ->
      ∀ {m_623 : A_622} ->
        ∀ (x_624 : (eq_1‹??_11› ?_14[0;0] m_623 m_623)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_624 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_625 m_626 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_627,t_628› (A_629 : Type‹s_627›):
  A_629 -> Type‹t_628›
where
| just_2 (m_631 : A_629) : (sing_2‹??_18,??_19› ?_24[0;0] m_631)

#[logical]
def ssing_6‹s_632› :
  ∀ (A_633 : Type‹s_632›) -> A_633 -> Type‹s_632›
:=
  fun ssing_635 : ∀ (A_636 : Type‹s_632›) -> A_636 -> Type‹s_632›
  | A_638 m_639 => (sing_2‹s_632,s_632› A_638 m_639)

#[program]
def sing_elim_7‹s_640,t_641› :
  ∀ {A_642 : Type‹s_640›} ->
    ∀ {x_643 : A_642} -> (sing_2‹s_640,t_641› ?_26[0;0] x_643) -> A_642
:=
  fun sing_elim_645 :
    ∀ {A_646 : Type‹s_640›} ->
      ∀ {x_647 : A_646} ->
        (sing_2‹s_640,t_641› ?_25[0;0] x_647) -> A_646
  | A_649 x_650 (just_2 x_651) => x_651

#[logical]
def sing_uniq_8‹s_652,t_653› :
  ∀ (A_654 : Type‹s_652›) ->
    ∀ (x0_655 : A_654) ->
      ∀ (x_656 : (sing_2‹s_652,t_653› ?_33[0;0] x0_655)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_655
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_656))
:=
  fun sing_uniq_657 :
    ∀ (A_658 : Type‹s_652›) ->
      ∀ (x0_659 : A_658) ->
        ∀ (x_660 : (sing_2‹s_652,t_653› ?_27[0;0] x0_659)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_659
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_660))
  | A_661 x0_662 (just_2 _663) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_664 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_664 tt_3)
:=
  fun unit_eta_665 :
    ∀ (x_666 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_666 tt_3)
  | x_667 =>
    match x_667 in
      ∀ (x0_668 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_668 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_670 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_674 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _677 _678 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_681 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _684 _685 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_688 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _691 _692 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_693 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_696 : nat_5 -> nat_5 -> bool_4
  | zero_6 _699 => true_4
  | _700 zero_6 => false_5
  | (succ_7 x_701) (succ_7 y_702) => ((lte_696) x_701 y_702)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_705 : nat_5 -> nat_5 -> bool_4
  | x_708 y_709 => ((lte_14) (succ_7‹› x_708) y_709)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_711 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_713) => x_713

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_716 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_719 => y_719
  | (succ_7 x_720) y_721 => (succ_7‹› ((add_716) x_720 y_721))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_724 : nat_5 -> nat_5 -> nat_5
  | x_727 zero_6 => x_727
  | x_728 (succ_7 y_729) => ((sub_724) ((pred_16) x_728) y_729)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_732 : nat_5 -> nat_5 -> nat_5
  | zero_6 _735 => zero_6
  | (succ_7 x_736) y_737 => ((add_17) y_737 ((mul_732) x_736 y_737))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_740 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_743 y_744 =>
    match ((lt_15) x_743 y_744) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_746 :=
        fun loop_747 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_750 y_751 =>
          match ((sub_18) x_750 ((pred_16) y_751)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_753) => (succ_7‹› ((loop_747) x_753 y_751))
      in ((loop_746) x_743 y_744)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_756 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_759 y_760 => ((sub_18) x_759 ((mul_19) ((div_20) x_759 y_760) y_760))

#[program]
inductive list_6‹s_761,t_762› (A_763 : Type‹s_761›): Type‹t_762›
where
| nil_8 : (list_6‹??_31,??_32› A_763)
| cons_9
    (hd_764 : A_763) (tl_765 : (list_6‹??_33,t_762› A_763))
    : (list_6‹??_34,??_35› A_763)

#[program]
def free_list_22‹s_766,t_767› :
  ∀ {A_768 : Type‹s_766›} ->
    A_768 -> unit_3 -> (list_6‹??_37,t_767› A_768) -> unit_3
:=
  fun free_list_772 :
    ∀ {A_773 : Type‹s_766›} ->
      A_773 -> unit_3 -> (list_6‹??_36,t_767› A_773) -> unit_3
  | A_777 f_778 nil_8 => tt_3
  | A_779 f_780 (cons_9 x_781 xs_782) =>
    let __783 := ((f_780) x_781) in ((free_list_772) ?_52[0;0] f_780 xs_782)

#[program]
inductive exists0_7‹s_784,r_785› (A_786 : Type‹s_784›) (B_787 : 
A_786 -> Type‹r_785›): L where
| ex0_10
    {m_789 : A_786} (n_790 : ((B_787) m_789))
    : (exists0_7‹??_38,??_39› A_786 B_787)

#[program]
inductive exists1_8‹s_791,r_792› (A_793 : Type‹s_791›) (B_794 : 
A_793 -> Type‹r_792›): L where
| ex1_11
    (m_796 : A_793) (n_797 : ((B_794) m_796))
    : (exists1_8‹??_40,??_41› A_793 B_794)

#[logical]
def prod0_23‹s_798,r_799› :
  Type‹s_798› -> Type‹r_799› -> ?_56[0;0]
:=
  fun prod0_802 : Type‹s_798› -> Type‹r_799› -> ?_53[0;0]
  | A_805 B_806 =>
    (exists0_7‹??_42,??_43›
      A_805 fun _807 : ?_54[0;0] -> ?_55[0;0]
            | _809 => B_806)

#[logical]
def prod1_24‹s_810,r_811› :
  Type‹s_810› -> Type‹r_811› -> ?_60[0;0]
:=
  fun prod1_814 : Type‹s_810› -> Type‹r_811› -> ?_57[0;0]
  | A_817 B_818 =>
    (exists1_8‹??_44,??_45›
      A_817 fun _819 : ?_58[0;0] -> ?_59[0;0]
            | _821 => B_818)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_824 : int -> int -> int
  | x_827 y_828 =>
    let loop_829 :=
      fun loop_830 : int -> int -> int
      | acc_833 y_834 =>
        match (__lte__ y_834 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_833
        | false_5 => ((loop_830) (__mul__ x_827 acc_833) (__sub__ y_834 1))
    in ((loop_829) 1 y_828)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_839 : int -> int -> int -> int
  | x_843 y_844 m_845 =>
    let loop_846 :=
      fun loop_847 : int -> int -> int
      | acc_850 y_851 =>
        match (__lte__ y_851 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_850
        | false_5 =>
          ((loop_847)
            (__mod__ (__mul__ x_843 acc_850) m_845) (__sub__ y_851 1))
    in ((loop_846) 1 y_844)

#[program]
def ord_27‹› : char -> int :=
  fun ord_854 : char -> int
  | c_856 => (__ord__ c_856)

#[program]
def chr_28‹› : int -> char :=
  fun chr_858 : int -> char
  | i_860 => (__chr__ i_860)

#[program]
def str_29‹› : char -> string :=
  fun str_862 : char -> string
  | c_864 => (__push__ "" c_864)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_866 : string -> int
  | s_868 => (__size__ s_868)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_870 : int -> string
  | i_872 =>
    let aux_873 :=
      fun aux_874 : int -> string
      | i_876 =>
        match (__lte__ 10 i_876) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_878 := (__mod__ i_876 10) in
          let i_879 := (__div__ i_876 10) in
          (__push__ ((aux_874) i_879)
            ((chr_28) (__add__ r_878 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_876 ((ord_27) 0))))
    in
    match (__lt__ 0 i_872) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_873) i_872)
    | false_5 => (__cat__ "~" ((aux_873) (__neg__ i_872)))

#[program]
def split_32‹t_881› :
  (list_6‹??_71,t_881› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_881› int) (list_6‹??_73,t_881› int))
:=
  fun split_883 :
    (list_6‹??_46,t_881› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_881› int) (list_6‹??_48,t_881› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_885 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_885 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_886 (cons_9 y_887 zs_888)) =>
    match ((split_883) zs_888) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_890 ys_891) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_886 xs_890)
        (cons_9‹??_67,??_68› ?_79[0;0] y_887 ys_891))

#[program]
def merge_33‹t_892› :
  (list_6‹??_87,t_892› int) ->
    (list_6‹??_88,t_892› int) -o (list_6‹??_89,t_892› int)
:=
  fun merge_895 :
    (list_6‹??_76,t_892› int) ->
      (list_6‹??_77,t_892› int) -o (list_6‹??_78,t_892› int)
  | nil_8 ys_898 => ys_898
  | xs_899 nil_8 => xs_899
  | (cons_9 x_900 xs_901) (cons_9 y_902 ys_903) =>
    match (__lte__ x_900 y_902) in ?_84[0;0] -o ?_85[0;0] with
    | true_4 =>
      (cons_9‹??_81,??_82›
        ?_87[0;0] x_900
        ((merge_895) xs_901 (cons_9‹??_79,??_80› ?_86[0;0] y_902 ys_903)))
    | false_5 =>
      (cons_9‹??_85,??_86›
        ?_89[0;0] y_902
        ((merge_895) (cons_9‹??_83,??_84› ?_88[0;0] x_900 xs_901) ys_903))

#[program]
def msort_34‹t_905› :
  (list_6‹??_100,t_905› int) -> (list_6‹??_101,t_905› int)
:=
  fun msort_907 :
    (list_6‹??_90,t_905› int) -> (list_6‹??_91,t_905› int)
  | nil_8 => (nil_8‹??_92,??_93› ?_90[0;0])
  | (cons_9 z_909 nil_8) =>
    (cons_9‹??_96,??_97›
      ?_92[0;0] z_909 (nil_8‹??_94,??_95› ?_91[0;0]))
  | zs_910 =>
    match ((split_32‹??_98›) zs_910) in ?_94[0;0] -o ?_93[0;0] with
    | (ex1_11 xs_912 ys_913) =>
      ((merge_33‹??_99›) ((msort_907) xs_912) ((msort_907) ys_913))

#[logical]
def cmsort_ch_35‹t_914› : (list_6‹??_105,t_914› int) -> L :=
  fun cmsort_ch_916 : (list_6‹??_102,t_914› int) -> L
  | xs_918 =>
    ch⟨⇑(__919 :
           ((ssing_6‹??_104›) ?_95[0;0] ((msort_34‹??_103›) xs_918))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_920› :
  int ->
    ∀ (zs_922 : (list_6‹??_144,t_920› int)) ->
      ((cmsort_ch_35‹t_920›) zs_922) -o IO unit_3
:=
  fun cmsort_worker_924 :
    int ->
      ∀ (zs_926 : (list_6‹??_106,t_920› int)) ->
        ((cmsort_ch_35‹t_920›) zs_926) -o IO unit_3
  | spwn_928 =>
    match (__lte__ spwn_928 0) in ?_96[0;0] -o ?_97[0;0] with
    | true_4 =>
      fun _930 :
        ∀ (zs_931 : (list_6‹??_107,t_920› int)) ->
          ((cmsort_ch_35‹t_920›) zs_931) -o IO unit_3
      | zs_933 c_934 =>
        let* c_935 :=
          ((send c_934)
            (just_2‹??_109,??_110›
              ?_98[0;0] ((msort_34‹??_108›) zs_933)))
        in close c_935
    | false_5 =>
      fun _936 :
        ∀ (zs_937 : (list_6‹??_111,t_920› int)) ->
          ((cmsort_ch_35‹t_920›) zs_937) -o IO unit_3
      | nil_8 c_939 =>
        let* c_940 :=
          ((send c_939)
            (just_2‹??_114,??_115›
              ?_100[0;0] (nil_8‹??_112,??_113› ?_99[0;0])))
        in close c_940
      | (cons_9 z_941 nil_8) c_942 =>
        let* c_943 :=
          ((send c_942)
            (just_2‹??_120,??_121›
              ?_103[0;0]
              (cons_9‹??_118,??_119›
                ?_102[0;0] z_941 (nil_8‹??_116,??_117› ?_101[0;0]))))
        in close c_943
      | zs_944 c_945 =>
        match ((split_32‹??_122›) zs_944),
        (refl_1‹??_123› ?_104[0;0] ?_105[0;0]) in
          ∀ (h1_946 : ?_106[0;0]) -o
            {(eq_1‹??_131›
               ?_111[0;0]
               match h1_946 in ?_108[0;0] -o ?_107[0;0] with
               | (ex1_11 xs_949 ys_950) =>
                 ((merge_33‹??_126›)
                   ((msort_34‹??_124›) xs_949)
                   ((msort_34‹??_125›) ys_950))
               match ((split_32‹??_127›) zs_944) in
                 ?_110[0;0] -o ?_109[0;0]
               with
               | (ex1_11 xs_952 ys_953) =>
                 ((merge_33‹??_130›)
                   ((msort_34‹??_128›) xs_952)
                   ((msort_34‹??_129›) ys_953)))} -o
              ?_112[0;0]
        with
        | (ex1_11 xs0_954 ys0_955), pf_956 =>
          let* r1_957 :=
            fork
              fun _958 : ?_113[0;0] -o IO unit_3
              | c1_960 =>
                ((cmsort_worker_924) (__sub__ spwn_928 1) xs0_954 c1_960)
          in
          let* r2_961 :=
            fork
              fun _962 : ?_114[0;0] -o IO unit_3
              | c2_964 =>
                ((cmsort_worker_924) (__sub__ spwn_928 1) ys0_955 c2_964)
          in
          let* _965 := recv r1_957 in
          match _965 in ?_130[0;0] -o ?_129[0;0] with
          | (ex1_11 xs1_967 c1_968) =>
            let* __969 := close c1_968 in
            let* _970 := recv r2_961 in
            match _970 in ?_128[0;0] -o ?_127[0;0] with
            | (ex1_11 ys1_972 c2_973) =>
              let* __974 := close c2_973 in
              match xs1_967, ys1_972 in
                ?_115[0;0] -o ?_116[0;0] -o ?_117[0;0]
              with
              | (just_2 xs1_977), (just_2 ys1_978) =>
                let zs1_979 :=
                  ((just_2‹??_133,??_134›
                     ?_118[0;0] ((merge_33‹??_132›) xs1_977 ys1_978))
                    : ((ssing_6‹??_138›)
                        ?_119[0;0]
                        ((merge_33‹??_137›)
                          ((msort_34‹??_135›) xs0_954)
                          ((msort_34‹??_136›) ys0_955))))
                in
                let zs1_980 :=
                  (((rwl_2‹??_140,??_141›)
                     ?_125[0;0] ?_124[0;0] ?_123[0;0]
                     fun _981 : ?_120[0;0] -> ?_121[0;0]
                     | x_983 => ((ssing_6‹??_139›) ?_122[0;0] x_983)
                     pf_956 zs1_979)
                    : ((ssing_6‹??_143›)
                        ?_126[0;0] ((msort_34‹??_142›) zs_944)))
                in
                let* c_984 := ((send c_945) zs1_980) in
                let* __985 := close c_984 in return tt_3

#[program]
def cmsort_37‹t_986› :
  ∀ (zs_987 : (list_6‹??_149,t_986› int)) ->
    IO ((ssing_6‹??_151›) ?_135[0;0] ((msort_34‹??_150›) zs_987))
:=
  fun cmsort_988 :
    ∀ (zs_989 : (list_6‹??_145,t_986› int)) ->
      IO ((ssing_6‹??_147›) ?_131[0;0] ((msort_34‹??_146›) zs_989))
  | zs_990 =>
    let* c_991 :=
      fork
        fun _992 : ?_132[0;0] -o IO unit_3
        | c_994 => ((cmsort_worker_36‹??_148›) 4 zs_990 c_994)
    in
    let* _995 := recv c_991 in
    match _995 in ?_134[0;0] -o ?_133[0;0] with
    | (ex1_11 msg_997 c_998) => let* __999 := close c_998 in return msg_997

#[program]
def mklist_38‹t_1000› : int -> (list_6‹??_157,t_1000› int) :=
  fun mklist_1002 : int -> (list_6‹??_152,t_1000› int)
  | n_1004 =>
    match (__lte__ n_1004 0) in ?_136[0;0] -o ?_137[0;0] with
    | true_4 => (nil_8‹??_153,??_154› ?_138[0;0])
    | false_5 =>
      (cons_9‹??_155,??_156›
        ?_139[0;0] n_1004 ((mklist_1002) (__sub__ n_1004 1)))

#[program]
def list_len_39‹t_1006› : (list_6‹??_159,t_1006› int) -> int :=
  fun list_len_1008 : (list_6‹??_158,t_1006› int) -> int
  | nil_8 => 0
  | (cons_9 _1010 xs_1011) => (__add__ 1 ((list_len_1008) xs_1011))

#[program]
def string_of_list_40‹t_1012› : (list_6‹??_161,t_1012› int) -> string
:=
  fun string_of_list_1014 : (list_6‹??_160,t_1012› int) -> string
  | nil_8 => "nil"
  | (cons_9 x_1016 xs_1017) =>
    (__cat__ (__cat__ ((string_of_int_31) x_1016) " :: ")
      ((string_of_list_1014) xs_1017))

#[program]
def main_41‹› : IO unit_3 :=
  let test_1018 := ((mklist_38‹L›) 2) in
  let* _1019 := ((cmsort_37‹??_162›) test_1018) in
  match _1019 in ?_141[0;0] -o ?_140[0;0] with
  | (just_2 sorted_1021) =>
    let len_1022 := ((list_len_39‹??_163›) sorted_1021) in
    print ((string_of_int_31) len_1022)

-----------------------------------------

#[program]
def id_1‹s_13897› :
  ∀ (A_13898 : Type‹s_13897›) -> A_13898 -> A_13898
:=
  fun id_13900 : ∀ (A_13901 : Type‹s_13897›) -> A_13901 -> A_13901
  | A_13903 m_13904 => m_13904

#[logical]
inductive eq_1‹s_13905› (A_13906 : Type‹s_13905›) (m_13907 : A_13906):
  A_13906 -> U
where
| refl_1 : (eq_1‹s_13905› A_13906 m_13907 m_13907)

#[program]
def rwl_2‹s_13909,r_13910› :
  ∀ {A_13911 : Type‹s_13909›} ->
    ∀ {m_13912 : A_13911} ->
      ∀ {n_13913 : A_13911} ->
        ∀ {B_13914 : A_13911 -> Type‹r_13910›} ->
          {(eq_1‹s_13909› A_13911 m_13912 n_13913)} ->
            ((B_13914) m_13912) -> ((B_13914) n_13913)
:=
  fun rwl_13918 :
    ∀ {A_13919 : Type‹s_13909›} ->
      ∀ {m_13920 : A_13919} ->
        ∀ {n_13921 : A_13919} ->
          ∀ {B_13922 : A_13919 -> Type‹r_13910›} ->
            {(eq_1‹s_13909› A_13919 m_13920 n_13921)} ->
              ((B_13922) m_13920) -> ((B_13922) n_13921)
  | A_13926 m_13927 n_13928 B_13929 refl_1 __13930 => __13930

#[program]
def rwr_3‹s_13931,r_13932› :
  ∀ {A_13933 : Type‹s_13931›} ->
    ∀ {m_13934 : A_13933} ->
      ∀ {n_13935 : A_13933} ->
        ∀ {B_13936 : A_13933 -> Type‹r_13932›} ->
          {(eq_1‹s_13931› A_13933 m_13934 n_13935)} ->
            ((B_13936) n_13935) -> ((B_13936) m_13934)
:=
  fun rwr_13940 :
    ∀ {A_13941 : Type‹s_13931›} ->
      ∀ {m_13942 : A_13941} ->
        ∀ {n_13943 : A_13941} ->
          ∀ {B_13944 : A_13941 -> Type‹r_13932›} ->
            {(eq_1‹s_13931› A_13941 m_13942 n_13943)} ->
              ((B_13944) n_13943) -> ((B_13944) m_13942)
  | A_13948 m_13949 n_13950 B_13951 refl_1 __13952 => __13952

#[logical]
def congr_4‹s_13953,r_13954,t_13955› :
  ∀ (A_13956 : Type‹s_13953›) ->
    ∀ (B_13957 : Type‹r_13954›) ->
      ∀ (m_13958 : A_13956) ->
        ∀ (n_13959 : A_13956) ->
          ∀ (f_13960 : forall‹t_13955›(__13961 : A_13956), B_13957) ->
            (eq_1‹s_13953› A_13956 m_13958 n_13959) ->
              (eq_1‹r_13954›
                B_13957 ((f_13960) m_13958) ((f_13960) n_13959))
:=
  fun congr_13963 :
    ∀ (A_13964 : Type‹s_13953›) ->
      ∀ (B_13965 : Type‹r_13954›) ->
        ∀ (m_13966 : A_13964) ->
          ∀ (n_13967 : A_13964) ->
            ∀ (f_13968 :
              forall‹t_13955›(__13969 : A_13964), B_13965) ->
              (eq_1‹s_13953› A_13964 m_13966 n_13967) ->
                (eq_1‹r_13954›
                  B_13965 ((f_13968) m_13966) ((f_13968) n_13967))
  | A_13971 B_13972 m_13973 n_13974 f_13975 refl_1 =>
    (refl_1‹r_13954› B_13972 ((f_13975) n_13974))

#[logical]
def axiom_K_5‹› :
  ∀ {A_13976 : U} ->
    ∀ {m_13977 : A_13976} ->
      ∀ (x_13978 : (eq_1‹U› A_13976 m_13977 m_13977)) ->
        (eq_1‹U›
          (eq_1‹U› A_13976 m_13977 m_13977) x_13978
          (refl_1‹U› A_13976 m_13977))
:=
  fun axiom_K_13979 :
    ∀ {A_13980 : U} ->
      ∀ {m_13981 : A_13980} ->
        ∀ (x_13982 : (eq_1‹U› A_13980 m_13981 m_13981)) ->
          (eq_1‹U›
            (eq_1‹U› A_13980 m_13981 m_13981) x_13982
            (refl_1‹U› A_13980 m_13981))
  | A_13983 m_13984 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_13983 m_13984 m_13984) (refl_1‹U› A_13983 m_13984))

#[program]
inductive sing_2‹s_13985,t_13986› (A_13987 : Type‹s_13985›):
  A_13987 -> Type‹t_13986›
where
| just_2 (m_13989 : A_13987) : (sing_2‹s_13985,t_13986› A_13987 m_13989)

#[logical]
def ssing_6‹s_13990› :
  ∀ (A_13991 : Type‹s_13990›) -> A_13991 -> Type‹s_13990›
:=
  fun ssing_13993 :
    ∀ (A_13994 : Type‹s_13990›) -> A_13994 -> Type‹s_13990›
  | A_13996 m_13997 => (sing_2‹s_13990,s_13990› A_13996 m_13997)

#[program]
def sing_elim_7‹s_13998,t_13999› :
  ∀ {A_14000 : Type‹s_13998›} ->
    ∀ {x_14001 : A_14000} ->
      (sing_2‹s_13998,t_13999› A_14000 x_14001) -> A_14000
:=
  fun sing_elim_14003 :
    ∀ {A_14004 : Type‹s_13998›} ->
      ∀ {x_14005 : A_14004} ->
        (sing_2‹s_13998,t_13999› A_14004 x_14005) -> A_14004
  | A_14007 x_14008 (just_2 m_14009) => m_14009

#[logical]
def sing_uniq_8‹s_14010,t_14011› :
  ∀ (A_14012 : Type‹s_14010›) ->
    ∀ (x0_14013 : A_14012) ->
      ∀ (x_14014 : (sing_2‹s_14010,t_14011› A_14012 x0_14013)) ->
        (eq_1‹s_14010›
          A_14012 x0_14013
          ((sing_elim_7‹s_14010,t_14011›) A_14012 x0_14013 x_14014))
:=
  fun sing_uniq_14015 :
    ∀ (A_14016 : Type‹s_14010›) ->
      ∀ (x0_14017 : A_14016) ->
        ∀ (x_14018 : (sing_2‹s_14010,t_14011› A_14016 x0_14017)) ->
          (eq_1‹s_14010›
            A_14016 x0_14017
            ((sing_elim_7‹s_14010,t_14011›) A_14016 x0_14017 x_14018))
  | A_14019 x0_14020 (just_2 m_14021) =>
    (refl_1‹s_14010› A_14019 m_14021)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_14022 : unit_3) -> (eq_1‹U› unit_3 x_14022 tt_3)
:=
  fun unit_eta_14023 :
    ∀ (x_14024 : unit_3) -> (eq_1‹U› unit_3 x_14024 tt_3)
  | x_14025 =>
    match x_14025 in
      ∀ (x0_14026 : unit_3) -o (eq_1‹U› unit_3 x0_14026 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_14028 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_14032 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __14035 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_14038 : bool_4 -> bool_4 -> bool_4
  | true_4 __14041 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_14044 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_14047 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_14050 : nat_5 -> nat_5 -> bool_4
  | zero_6 __14053 => true_4
  | (succ_7 n_14054) zero_6 => false_5
  | (succ_7 n_14055) (succ_7 n_14056) => ((lte_14050) n_14055 n_14056)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_14059 : nat_5 -> nat_5 -> bool_4
  | x_14062 y_14063 => ((lte_14) (succ_7‹› x_14062) y_14063)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_14065 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_14067) => n_14067

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_14070 : nat_5 -> nat_5 -> nat_5
  | zero_6 __14073 => __14073
  | (succ_7 n_14074) __14075 => (succ_7‹› ((add_14070) n_14074 __14075))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_14078 : nat_5 -> nat_5 -> nat_5
  | __14081 zero_6 => __14081
  | __14082 (succ_7 n_14083) => ((sub_14078) ((pred_16) __14082) n_14083)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_14086 : nat_5 -> nat_5 -> nat_5
  | zero_6 __14089 => zero_6
  | (succ_7 n_14090) __14091 =>
    ((add_17) __14091 ((mul_14086) n_14090 __14091))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_14094 : nat_5 -> nat_5 -> nat_5
  | x_14097 y_14098 =>
    match ((lt_15) x_14097 y_14098) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_14100 :=
        fun loop_14101 : nat_5 -> nat_5 -> nat_5
        | x_14104 y_14105 =>
          match ((sub_18) x_14104 ((pred_16) y_14105)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_14107) => (succ_7‹› ((loop_14101) n_14107 y_14105))
      in ((loop_14100) x_14097 y_14098)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_14110 : nat_5 -> nat_5 -> nat_5
  | x_14113 y_14114 =>
    ((sub_18) x_14113 ((mul_19) ((div_20) x_14113 y_14114) y_14114))

#[program]
inductive list_6‹s_14115,t_14116› (A_14117 : Type‹s_14115›):
  Type‹t_14116›
where
| nil_8 : (list_6‹s_14115,t_14116› A_14117)
| cons_9
    (hd_14118 : A_14117) (tl_14119 : (list_6‹s_14115,t_14116› A_14117))
    : (list_6‹s_14115,t_14116› A_14117)

#[program]
def free_list_22‹s_14120,t_14121› :
  ∀ {A_14122 : Type‹s_14120›} ->
    A_14122 -> unit_3 -> (list_6‹s_14120,t_14121› A_14122) -> unit_3
:=
  fun free_list_14126 :
    ∀ {A_14127 : Type‹s_14120›} ->
      A_14127 -> unit_3 -> (list_6‹s_14120,t_14121› A_14127) -> unit_3
  | A_14131 f_14132 nil_8 => tt_3
  | A_14133 f_14134 (cons_9 hd_14135 tl_14136) =>
    let __14137 := ((f_14134) hd_14135) in
    ((free_list_14126) A_14133 f_14134 tl_14136)

#[program]
inductive exists0_7‹s_14138,r_14139› (A_14140 : Type‹s_14138›) (B_14141 : 
A_14140 -> Type‹r_14139›): L where
| ex0_10
    {m_14143 : A_14140} (n_14144 : ((B_14141) m_14143))
    : (exists0_7‹s_14138,r_14139› A_14140 B_14141)

#[program]
inductive exists1_8‹s_14145,r_14146› (A_14147 : Type‹s_14145›) (B_14148 : 
A_14147 -> Type‹r_14146›): L where
| ex1_11
    (m_14150 : A_14147) (n_14151 : ((B_14148) m_14150))
    : (exists1_8‹s_14145,r_14146› A_14147 B_14148)

#[logical]
def prod0_23‹s_14152,r_14153› :
  Type‹s_14152› -> Type‹r_14153› -> L
:=
  fun prod0_14156 : Type‹s_14152› -> Type‹r_14153› -> L
  | A_14159 B_14160 =>
    (exists0_7‹s_14152,r_14153›
      A_14159 fun _14161 : A_14159 -> Type‹r_14153›
              | __14163 => B_14160)

#[logical]
def prod1_24‹s_14164,r_14165› :
  Type‹s_14164› -> Type‹r_14165› -> L
:=
  fun prod1_14168 : Type‹s_14164› -> Type‹r_14165› -> L
  | A_14171 B_14172 =>
    (exists1_8‹s_14164,r_14165›
      A_14171 fun _14173 : A_14171 -> Type‹r_14165›
              | __14175 => B_14172)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_14178 : int -> int -> int
  | x_14181 y_14182 =>
    let loop_14183 :=
      fun loop_14184 : int -> int -> int
      | acc_14187 y_14188 =>
        match (__lte__ y_14188 0) in bool_4 -o int with
        | true_4 => acc_14187
        | false_5 =>
          ((loop_14184) (__mul__ x_14181 acc_14187) (__sub__ y_14188 1))
    in ((loop_14183) 1 y_14182)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_14193 : int -> int -> int -> int
  | x_14197 y_14198 m_14199 =>
    let loop_14200 :=
      fun loop_14201 : int -> int -> int
      | acc_14204 y_14205 =>
        match (__lte__ y_14205 0) in bool_4 -o int with
        | true_4 => acc_14204
        | false_5 =>
          ((loop_14201)
            (__mod__ (__mul__ x_14197 acc_14204) m_14199) (__sub__ y_14205 1))
    in ((loop_14200) 1 y_14198)

#[program]
def ord_27‹› : char -> int :=
  fun ord_14208 : char -> int
  | c_14210 => (__ord__ c_14210)

#[program]
def chr_28‹› : int -> char :=
  fun chr_14212 : int -> char
  | i_14214 => (__chr__ i_14214)

#[program]
def str_29‹› : char -> string :=
  fun str_14216 : char -> string
  | c_14218 => (__push__ "" c_14218)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_14220 : string -> int
  | s_14222 => (__size__ s_14222)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_14224 : int -> string
  | i_14226 =>
    let aux_14227 :=
      fun aux_14228 : int -> string
      | i_14230 =>
        match (__lte__ 10 i_14230) in bool_4 -o string with
        | true_4 =>
          let r_14232 := (__mod__ i_14230 10) in
          let i_14233 := (__div__ i_14230 10) in
          (__push__ ((aux_14228) i_14233)
            ((chr_28) (__add__ r_14232 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_14230 ((ord_27) 0))))
    in
    match (__lt__ 0 i_14226) in bool_4 -o string with
    | true_4 => ((aux_14227) i_14226)
    | false_5 => (__cat__ "~" ((aux_14227) (__neg__ i_14226)))

#[program]
def split_32‹t_14235› :
  (list_6‹U,t_14235› int) ->
    ((prod1_24‹t_14235,t_14235›)
      (list_6‹U,t_14235› int) (list_6‹U,t_14235› int))
:=
  fun split_14237 :
    (list_6‹U,t_14235› int) ->
      ((prod1_24‹t_14235,t_14235›)
        (list_6‹U,t_14235› int) (list_6‹U,t_14235› int))
  | nil_8 =>
    (ex1_11‹t_14235,t_14235›
      (list_6‹U,t_14235› int)
      fun _14239 : (list_6‹U,t_14235› int) -> Type‹t_14235›
      | __14241 => (list_6‹U,t_14235› int) (nil_8‹U,t_14235› int)
      (nil_8‹U,t_14235› int))
  | (cons_9 hd_14242 nil_8) =>
    (ex1_11‹t_14235,t_14235›
      (list_6‹U,t_14235› int)
      fun _14243 : (list_6‹U,t_14235› int) -> Type‹t_14235›
      | __14245 => (list_6‹U,t_14235› int)
      (cons_9‹U,t_14235› int hd_14242 (nil_8‹U,t_14235› int))
      (nil_8‹U,t_14235› int))
  | (cons_9 hd_14246 (cons_9 hd_14247 tl_14248)) =>
    match ((split_14237) tl_14248) in
      ((prod1_24‹t_14235,t_14235›)
        (list_6‹U,t_14235› int) (list_6‹U,t_14235› int)) -o
        ((prod1_24‹t_14235,t_14235›)
          (list_6‹U,t_14235› int) (list_6‹U,t_14235› int))
    with
    | (ex1_11 m_14250 n_14251) =>
      (ex1_11‹t_14235,t_14235›
        (list_6‹U,t_14235› int)
        fun _14252 : (list_6‹U,t_14235› int) -> Type‹t_14235›
        | __14254 => (list_6‹U,t_14235› int)
        (cons_9‹U,t_14235› int hd_14246 m_14250)
        (cons_9‹U,t_14235› int hd_14247 n_14251))

#[program]
def merge_33‹t_14255› :
  (list_6‹U,t_14255› int) ->
    (list_6‹U,t_14255› int) -o (list_6‹U,t_14255› int)
:=
  fun merge_14258 :
    (list_6‹U,t_14255› int) ->
      (list_6‹U,t_14255› int) -o (list_6‹U,t_14255› int)
  | nil_8 __14261 => __14261
  | (cons_9 hd_14262 tl_14263) nil_8 =>
    (cons_9‹U,t_14255› int hd_14262 tl_14263)
  | (cons_9 hd_14264 tl_14265) (cons_9 hd_14266 tl_14267) =>
    match (__lte__ hd_14264 hd_14266) in
      bool_4 -o (list_6‹U,t_14255› int)
    with
    | true_4 =>
      (cons_9‹U,t_14255›
        int hd_14264
        ((merge_14258)
          tl_14265 (cons_9‹U,t_14255› int hd_14266 tl_14267)))
    | false_5 =>
      (cons_9‹U,t_14255›
        int hd_14266
        ((merge_14258)
          (cons_9‹U,t_14255› int hd_14264 tl_14265) tl_14267))

#[program]
def msort_34‹t_14269› :
  (list_6‹U,t_14269› int) -> (list_6‹U,t_14269› int)
:=
  fun msort_14271 :
    (list_6‹U,t_14269› int) -> (list_6‹U,t_14269› int)
  | nil_8 => (nil_8‹U,t_14269› int)
  | (cons_9 hd_14273 nil_8) =>
    (cons_9‹U,t_14269› int hd_14273 (nil_8‹U,t_14269› int))
  | (cons_9 hd_14274 (cons_9 hd_14275 tl_14276)) =>
    match ((split_32‹t_14269›)
            (cons_9‹U,t_14269›
              int hd_14274 (cons_9‹U,t_14269› int hd_14275 tl_14276))) in
      ((prod1_24‹t_14269,t_14269›)
        (list_6‹U,t_14269› int) (list_6‹U,t_14269› int)) -o
        (list_6‹U,t_14269› int)
    with
    | (ex1_11 m_14278 n_14279) =>
      ((merge_33‹t_14269›)
        ((msort_14271) m_14278) ((msort_14271) n_14279))

#[logical]
def cmsort_ch_35‹t_14280› : (list_6‹U,t_14280› int) -> L :=
  fun cmsort_ch_14282 : (list_6‹U,t_14280› int) -> L
  | xs_14284 =>
    ch⟨⇑(__14285 :
           ((ssing_6‹t_14280›)
             (list_6‹U,t_14280› int) ((msort_34‹t_14280›) xs_14284))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_14286› :
  int ->
    ∀ (zs_14288 : (list_6‹U,t_14286› int)) ->
      ((cmsort_ch_35‹t_14286›) zs_14288) -o IO unit_3
:=
  fun cmsort_worker_14290 :
    int ->
      ∀ (zs_14292 : (list_6‹U,t_14286› int)) ->
        ((cmsort_ch_35‹t_14286›) zs_14292) -o IO unit_3
  | spwn_14294 =>
    match (__lte__ spwn_14294 0) in
      bool_4 -o
        ∀ (zs_14296 : (list_6‹U,t_14286› int)) ->
          ((cmsort_ch_35‹t_14286›) zs_14296) -o IO unit_3
    with
    | true_4 =>
      fun _14298 :
        ∀ (zs_14299 : (list_6‹U,t_14286› int)) ->
          ((cmsort_ch_35‹t_14286›) zs_14299) -o IO unit_3
      | zs_14301 __14302 =>
        let* c_14303 :=
          ((send __14302)
            (just_2‹t_14286,t_14286›
              (list_6‹U,t_14286› int) ((msort_34‹t_14286›) zs_14301)))
        in close c_14303
    | false_5 =>
      fun _14304 :
        ∀ (zs_14305 : (list_6‹U,t_14286› int)) ->
          ((cmsort_ch_35‹t_14286›) zs_14305) -o IO unit_3
      | nil_8 __14307 =>
        let* c_14308 :=
          ((send __14307)
            (just_2‹t_14286,t_14286›
              (list_6‹U,t_14286› int) (nil_8‹U,t_14286› int)))
        in close c_14308
      | (cons_9 hd_14309 nil_8) __14310 =>
        let* c_14311 :=
          ((send __14310)
            (just_2‹t_14286,t_14286›
              (list_6‹U,t_14286› int)
              (cons_9‹U,t_14286› int hd_14309 (nil_8‹U,t_14286› int))))
        in close c_14311
      | (cons_9 hd_14312 (cons_9 hd_14313 tl_14314)) __14315 =>
        match ((split_32‹t_14286›)
                (cons_9‹U,t_14286›
                  int hd_14312 (cons_9‹U,t_14286› int hd_14313 tl_14314))),
        (refl_1‹t_14286›
          (list_6‹U,t_14286› int)
          match ((split_32‹t_14286›)
                  (cons_9‹U,t_14286›
                    int hd_14312
                    (cons_9‹U,t_14286› int hd_14313 tl_14314))) in
            ((prod1_24‹t_14286,t_14286›)
              (list_6‹U,t_14286› int) (list_6‹U,t_14286› int)) -o
              (list_6‹U,t_14286› int)
          with
          | (ex1_11 m_14317 n_14318) =>
            ((merge_33‹t_14286›)
              ((msort_34‹t_14286›) m_14317)
              ((msort_34‹t_14286›) n_14318))) in
          ∀ (h1_14319 :
            ((prod1_24‹t_14286,t_14286›)
              (list_6‹U,t_14286› int) (list_6‹U,t_14286› int))) -o
            {(eq_1‹t_14286›
               (list_6‹U,t_14286› int)
               match h1_14319 in
                 ((prod1_24‹t_14286,t_14286›)
                   (list_6‹U,t_14286› int) (list_6‹U,t_14286› int)) -o
                   (list_6‹U,t_14286› int)
               with
               | (ex1_11 m_14322 n_14323) =>
                 ((merge_33‹t_14286›)
                   ((msort_34‹t_14286›) m_14322)
                   ((msort_34‹t_14286›) n_14323))
               match ((split_32‹t_14286›)
                       (cons_9‹U,t_14286›
                         int hd_14312
                         (cons_9‹U,t_14286› int hd_14313 tl_14314))) in
                 ((prod1_24‹t_14286,t_14286›)
                   (list_6‹U,t_14286› int) (list_6‹U,t_14286› int)) -o
                   (list_6‹U,t_14286› int)
               with
               | (ex1_11 m_14325 n_14326) =>
                 ((merge_33‹t_14286›)
                   ((msort_34‹t_14286›) m_14325)
                   ((msort_34‹t_14286›) n_14326)))} -o
              IO unit_3
        with
        | (ex1_11 m_14327 n_14328), __14329 =>
          let* r1_14330 :=
            fork
              fun _14331 : ((cmsort_ch_35‹t_14286›) m_14327) -o IO unit_3
              | _14333 =>
                ((cmsort_worker_14290) (__sub__ spwn_14294 1) m_14327 _14333)
          in
          let* r2_14334 :=
            fork
              fun _14335 : ((cmsort_ch_35‹t_14286›) n_14328) -o IO unit_3
              | _14337 =>
                ((cmsort_worker_14290) (__sub__ spwn_14294 1) n_14328 _14337)
          in
          let* _14338 := recv r1_14330 in
          match _14338 in
            (exists1_8‹t_14286,L›
              ((ssing_6‹t_14286›)
                (list_6‹U,t_14286› int) ((msort_34‹t_14286›) m_14327))
              fun _14340 :
                ((ssing_6‹t_14286›)
                  (list_6‹U,t_14286› int)
                  ((msort_34‹t_14286›) m_14327)) -> L
              | __14342 => hc⟨•⟩) -o IO unit_3
          with
          | (ex1_11 m_14343 n_14344) =>
            let* __14345 := close n_14344 in
            let* _14346 := recv r2_14334 in
            match _14346 in
              (exists1_8‹t_14286,L›
                ((ssing_6‹t_14286›)
                  (list_6‹U,t_14286› int)
                  ((msort_34‹t_14286›) n_14328))
                fun _14348 :
                  ((ssing_6‹t_14286›)
                    (list_6‹U,t_14286› int)
                    ((msort_34‹t_14286›) n_14328)) -> L
                | __14350 => hc⟨•⟩) -o IO unit_3
            with
            | (ex1_11 m_14351 n_14352) =>
              let* __14353 := close n_14352 in
              match m_14343, m_14351 in
                ((ssing_6‹t_14286›)
                  (list_6‹U,t_14286› int)
                  ((msort_34‹t_14286›) m_14327)) -o
                  ((ssing_6‹t_14286›)
                    (list_6‹U,t_14286› int)
                    ((msort_34‹t_14286›) n_14328)) -o IO unit_3
              with
              | (just_2 m_14356), (just_2 m_14357) =>
                let zs1_14358 :=
                  ((just_2‹t_14286,t_14286›
                     (list_6‹U,t_14286› int)
                     ((merge_33‹t_14286›) m_14356 m_14357))
                    : ((ssing_6‹t_14286›)
                        (list_6‹U,t_14286› int)
                        ((merge_33‹t_14286›)
                          ((msort_34‹t_14286›) m_14327)
                          ((msort_34‹t_14286›) n_14328))))
                in
                let zs1_14359 :=
                  (((rwl_2‹t_14286,t_14286›)
                     (list_6‹U,t_14286› int)
                     ((merge_33‹t_14286›)
                       ((msort_34‹t_14286›) m_14327)
                       ((msort_34‹t_14286›) n_14328))
                     match ((split_32‹t_14286›)
                             (cons_9‹U,t_14286›
                               int hd_14312
                               (cons_9‹U,t_14286› int hd_14313 tl_14314))) in
                       ((prod1_24‹t_14286,t_14286›)
                         (list_6‹U,t_14286› int)
                         (list_6‹U,t_14286› int)) -o
                         (list_6‹U,t_14286› int)
                     with
                     | (ex1_11 m_14361 n_14362) =>
                       ((merge_33‹t_14286›)
                         ((msort_34‹t_14286›) m_14361)
                         ((msort_34‹t_14286›) n_14362))
                     fun _14363 :
                       (list_6‹U,t_14286› int) -> Type‹t_14286›
                     | __14365 =>
                       ((ssing_6‹t_14286›)
                         (list_6‹U,t_14286› int) __14365)
                     __14329 zs1_14358)
                    : ((ssing_6‹t_14286›)
                        (list_6‹U,t_14286› int)
                        ((msort_34‹t_14286›)
                          (cons_9‹U,t_14286›
                            int hd_14312
                            (cons_9‹U,t_14286› int hd_14313 tl_14314)))))
                in
                let* c_14366 := ((send __14315) zs1_14359) in
                let* __14367 := close c_14366 in return tt_3

#[program]
def cmsort_37‹t_14368› :
  ∀ (zs_14369 : (list_6‹U,t_14368› int)) ->
    IO ((ssing_6‹t_14368›)
         (list_6‹U,t_14368› int) ((msort_34‹t_14368›) zs_14369))
:=
  fun cmsort_14370 :
    ∀ (zs_14371 : (list_6‹U,t_14368› int)) ->
      IO ((ssing_6‹t_14368›)
           (list_6‹U,t_14368› int) ((msort_34‹t_14368›) zs_14371))
  | zs_14372 =>
    let* c_14373 :=
      fork
        fun _14374 : ((cmsort_ch_35‹t_14368›) zs_14372) -o IO unit_3
        | _14376 => ((cmsort_worker_36‹t_14368›) 4 zs_14372 _14376)
    in
    let* _14377 := recv c_14373 in
    match _14377 in
      (exists1_8‹t_14368,L›
        ((ssing_6‹t_14368›)
          (list_6‹U,t_14368› int) ((msort_34‹t_14368›) zs_14372))
        fun _14379 :
          ((ssing_6‹t_14368›)
            (list_6‹U,t_14368› int) ((msort_34‹t_14368›) zs_14372)) ->
            L
        | __14381 => hc⟨•⟩) -o
        IO ((ssing_6‹t_14368›)
             (list_6‹U,t_14368› int) ((msort_34‹t_14368›) zs_14372))
    with
    | (ex1_11 m_14382 n_14383) =>
      let* __14384 := close n_14383 in return m_14382

#[program]
def mklist_38‹t_14385› : int -> (list_6‹U,t_14385› int) :=
  fun mklist_14387 : int -> (list_6‹U,t_14385› int)
  | n_14389 =>
    match (__lte__ n_14389 0) in bool_4 -o (list_6‹U,t_14385› int) with
    | true_4 => (nil_8‹U,t_14385› int)
    | false_5 =>
      (cons_9‹U,t_14385›
        int n_14389 ((mklist_14387) (__sub__ n_14389 1)))

#[program]
def list_len_39‹t_14391› : (list_6‹U,t_14391› int) -> int :=
  fun list_len_14393 : (list_6‹U,t_14391› int) -> int
  | nil_8 => 0
  | (cons_9 hd_14395 tl_14396) => (__add__ 1 ((list_len_14393) tl_14396))

#[program]
def string_of_list_40‹t_14397› : (list_6‹U,t_14397› int) -> string :=
  fun string_of_list_14399 : (list_6‹U,t_14397› int) -> string
  | nil_8 => "nil"
  | (cons_9 hd_14401 tl_14402) =>
    (__cat__ (__cat__ ((string_of_int_31) hd_14401) " :: ")
      ((string_of_list_14399) tl_14402))

#[program]
def main_41‹› : IO unit_3 :=
  let test_14403 := ((mklist_38‹L›) 2) in
  let* _14404 := ((cmsort_37‹L›) test_14403) in
  match _14404 in
    ((ssing_6‹L›) (list_6‹U,L› int) ((msort_34‹L›) test_14403)) -o
      IO unit_3
  with
  | (just_2 m_14406) =>
    let len_14407 := ((list_len_39‹L›) m_14406) in
    print ((string_of_int_31) len_14407)

-----------------------------------------

#[program]
def idU_43 := fun id_25786 (A_25787) -> (m_25788) ->
                m_25788

#[program]
def idL_42 := fun id_25789 (A_25790) -> (m_25791) ->
                m_25791

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_25792 {A_25793} -> {m_25794} -> {n_25795} -> {B_25796} ->
  {__25797} -> (__25798) ->
    match {NULL} with
    | reflU_13  => __25798
    end

#[program]
def rwlUL_46 :=
  fun rwl_25799 {A_25800} -> {m_25801} -> {n_25802} -> {B_25803} ->
  {__25804} -> (__25805) ->
    match {NULL} with
    | reflU_13  => __25805
    end

#[program]
def rwlLU_45 :=
  fun rwl_25806 {A_25807} -> {m_25808} -> {n_25809} -> {B_25810} ->
  {__25811} -> (__25812) ->
    match {NULL} with
    | reflL_12  => __25812
    end

#[program]
def rwlLL_44 :=
  fun rwl_25813 {A_25814} -> {m_25815} -> {n_25816} -> {B_25817} ->
  {__25818} -> (__25819) ->
    match {NULL} with
    | reflL_12  => __25819
    end

#[program]
def rwrUU_51 :=
  fun rwr_25820 {A_25821} -> {m_25822} -> {n_25823} -> {B_25824} ->
  {__25825} -> (__25826) ->
    match {NULL} with
    | reflU_13  => __25826
    end

#[program]
def rwrUL_50 :=
  fun rwr_25827 {A_25828} -> {m_25829} -> {n_25830} -> {B_25831} ->
  {__25832} -> (__25833) ->
    match {NULL} with
    | reflU_13  => __25833
    end

#[program]
def rwrLU_49 :=
  fun rwr_25834 {A_25835} -> {m_25836} -> {n_25837} -> {B_25838} ->
  {__25839} -> (__25840) ->
    match {NULL} with
    | reflL_12  => __25840
    end

#[program]
def rwrLL_48 :=
  fun rwr_25841 {A_25842} -> {m_25843} -> {n_25844} -> {B_25845} ->
  {__25846} -> (__25847) ->
    match {NULL} with
    | reflL_12  => __25847
    end

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_25848 {A_25849} -> {x_25850} -> (__25851) ->
    match __25851 with
    | justUU_17 m_25852 => m_25852
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_25853 {A_25854} -> {x_25855} -> (__25856) ->
    match __25856 with
    | justUL_16 m_25857 => m_25857
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_25858 {A_25859} -> {x_25860} -> (__25861) ->
    match __25861 with
    
    end

#[program]
def sing_elimLL_62 :=
  fun sing_elim_25862 {A_25863} -> {x_25864} -> (__25865) ->
    match __25865 with
    | justLL_14 m_25866 => m_25866
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_25867 (__25868) ->
    match __25868 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_25869 (__25870) -> (__25871) ->
    match __25870 with
    | true_4  =>
      match __25871 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_25872 (__25873) -> (__25874) ->
    match __25873 with
    | true_4  => true_4
    | false_5  =>
      match __25874 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_25875 (__25876) -> (__25877) -o
    match __25876 with
    | true_4  =>
      match __25877 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __25877 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_25878 (__25879) -> (__25880) ->
    match __25879 with
    | zero_6  => true_4
    | succ_7 n_25881 =>
      match __25880 with
      | zero_6  => false_5 | succ_7 n_25882 => ((lte_25878) n_25881 n_25882)
      end
    end

#[program]
def lt_15 :=
  fun lt_25883 (x_25884) -> (y_25885) ->
    ((lte_14) (succ_7 x_25884) y_25885)

#[program]
def pred_16 :=
  fun pred_25886 (__25887) ->
    match __25887 with
    | zero_6  => zero_6 | succ_7 n_25888 => n_25888
    end

#[program]
def add_17 :=
  fun add_25889 (__25890) -> (__25891) ->
    match __25890 with
    | zero_6  => __25891
    | succ_7 n_25892 => (succ_7 ((add_25889) n_25892 __25891))
    end

#[program]
def sub_18 :=
  fun sub_25893 (__25894) -> (__25895) ->
    match __25895 with
    | zero_6  => __25894
    | succ_7 n_25896 => ((sub_25893) ((pred_16) __25894) n_25896)
    end

#[program]
def mul_19 :=
  fun mul_25897 (__25898) -> (__25899) ->
    match __25898 with
    | zero_6  => zero_6
    | succ_7 n_25900 => ((add_17) __25899 ((mul_25897) n_25900 __25899))
    end

#[program]
def div_20 :=
  fun div_25901 (x_25902) -> (y_25903) ->
    match ((lt_15) x_25902 y_25903) with
    | true_4  => zero_6
    | false_5  =>
      let loop_25904 :=
        fun loop_25905 (x_25906) -> (y_25907) ->
          match ((sub_18) x_25906 ((pred_16) y_25907)) with
          | zero_6  => zero_6
          | succ_7 n_25908 => (succ_7 ((loop_25905) n_25908 y_25907))
          end
      in ((loop_25904) x_25902 y_25903)
    end

#[program]
def rem_21 :=
  fun rem_25909 (x_25910) -> (y_25911) ->
    ((sub_18) x_25910 ((mul_19) ((div_20) x_25910 y_25911) y_25911))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_25912 {A_25913} -> (f_25914) -> (__25915) ->
    match __25915 with
    | nilUU_24  => tt_3
    | consUU_25 hd_25916 tl_25917 =>
      let __25918 := ((f_25914) hd_25916) in
      ((free_list_25912) NULL f_25914 tl_25917)
    end

#[program]
def free_listUL_72 :=
  fun free_list_25919 {A_25920} -> (f_25921) -> (__25922) ->
    match __25922 with
    | nilUL_22  => tt_3
    | consUL_23 hd_25923 tl_25924 =>
      let __25925 := ((f_25921) hd_25923) in
      ((free_list_25919) NULL f_25921 tl_25924)
    end

#[program]
def free_listLL_70 :=
  fun free_list_25926 {A_25927} -> (f_25928) -> (__25929) ->
    match __25929 with
    | nilLL_18  => tt_3
    | consLL_19 hd_25930 tl_25931 =>
      let __25932 := ((f_25928) hd_25930) in
      ((free_list_25926) NULL f_25928 tl_25931)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_25933 (x_25934) -> (y_25935) ->
    let loop_25936 :=
      fun loop_25937 (acc_25938) -> (y_25939) ->
        match (__lte__ y_25939 0) with
        | true_4  => acc_25938
        | false_5  =>
          ((loop_25937) (__mul__ x_25934 acc_25938) (__sub__ y_25939 1))
        end
    in ((loop_25936) 1 y_25935)

#[program]
def powm_26 :=
  fun powm_25940 (x_25941) -> (y_25942) -> (m_25943) ->
    let loop_25944 :=
      fun loop_25945 (acc_25946) -> (y_25947) ->
        match (__lte__ y_25947 0) with
        | true_4  => acc_25946
        | false_5  =>
          ((loop_25945)
            (__mod__ (__mul__ x_25941 acc_25946) m_25943) (__sub__ y_25947 1))
        end
    in ((loop_25944) 1 y_25942)

#[program]
def ord_27 := fun ord_25948 (c_25949) ->
                (__ord__ c_25949)

#[program]
def chr_28 := fun chr_25950 (i_25951) ->
                (__chr__ i_25951)

#[program]
def str_29 := fun str_25952 (c_25953) ->
                (__push__ "" c_25953)

#[program]
def strlen_30 := fun strlen_25954 (s_25955) ->
                   (__size__ s_25955)

#[program]
def string_of_int_31 :=
  fun string_of_int_25956 (i_25957) ->
    let aux_25958 :=
      fun aux_25959 (i_25960) ->
        match (__lte__ 10 i_25960) with
        | true_4  =>
          let r_25961 := (__mod__ i_25960 10) in
          let i_25962 := (__div__ i_25960 10) in
          (__push__ ((aux_25959) i_25962)
            ((chr_28) (__add__ r_25961 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_25960 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_25957) with
    | true_4  => ((aux_25958) i_25957)
    | false_5  => (__cat__ "~" ((aux_25958) (__neg__ i_25957)))
    end

#[program]
def splitU_83 :=
  fun split_25963 (__25964) ->
    match __25964 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_25965 tl_25966 =>
      match tl_25966 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_25965 nilUU_24) nilUU_24)
      | consUU_25 hd_25967 tl_25968 =>
        match ((split_25963) tl_25968) with
        | ex1UU_33 m_25969 n_25970 =>
          (ex1UU_33
            (consUU_25 hd_25965 m_25969) (consUU_25 hd_25967 n_25970))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_25971 (__25972) ->
    match __25972 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_25973 tl_25974 =>
      match tl_25974 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_25973 nilUL_22) nilUL_22)
      | consUL_23 hd_25975 tl_25976 =>
        match ((split_25971) tl_25976) with
        | ex1LL_30 m_25977 n_25978 =>
          (ex1LL_30
            (consUL_23 hd_25973 m_25977) (consUL_23 hd_25975 n_25978))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_25979 (__25980) -> (__25981) -o
    match __25980 with
    | nilUU_24  => __25981
    | consUU_25 hd_25982 tl_25983 =>
      match __25981 with
      | nilUU_24  => (consUU_25 hd_25982 tl_25983)
      | consUU_25 hd_25984 tl_25985 =>
        match (__lte__ hd_25982 hd_25984) with
        | true_4  =>
          (consUU_25
            hd_25982 ((merge_25979) tl_25983 (consUU_25 hd_25984 tl_25985)))
        | false_5  =>
          (consUU_25
            hd_25984 ((merge_25979) (consUU_25 hd_25982 tl_25983) tl_25985))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_25986 (__25987) -> (__25988) -o
    match __25987 with
    | nilUL_22  => __25988
    | consUL_23 hd_25989 tl_25990 =>
      match __25988 with
      | nilUL_22  => (consUL_23 hd_25989 tl_25990)
      | consUL_23 hd_25991 tl_25992 =>
        match (__lte__ hd_25989 hd_25991) with
        | true_4  =>
          (consUL_23
            hd_25989 ((merge_25986) tl_25990 (consUL_23 hd_25991 tl_25992)))
        | false_5  =>
          (consUL_23
            hd_25991 ((merge_25986) (consUL_23 hd_25989 tl_25990) tl_25992))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_25993 (__25994) ->
    match __25994 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_25995 tl_25996 =>
      match tl_25996 with
      | nilUU_24  => (consUU_25 hd_25995 nilUU_24)
      | consUU_25 hd_25997 tl_25998 =>
        match ((splitU_83)
                (consUU_25 hd_25995 (consUU_25 hd_25997 tl_25998))) with
        | ex1UU_33 m_25999 n_26000 =>
          ((mergeU_85) ((msort_25993) m_25999) ((msort_25993) n_26000))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_26001 (__26002) ->
    match __26002 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_26003 tl_26004 =>
      match tl_26004 with
      | nilUL_22  => (consUL_23 hd_26003 nilUL_22)
      | consUL_23 hd_26005 tl_26006 =>
        match ((splitL_82)
                (consUL_23 hd_26003 (consUL_23 hd_26005 tl_26006))) with
        | ex1LL_30 m_26007 n_26008 =>
          ((mergeL_84) ((msort_26001) m_26007) ((msort_26001) n_26008))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_26009 (spwn_26010) ->
    match (__lte__ spwn_26010 0) with
    | true_4  =>
      fun _26011 (zs_26012) -> (__26013) -o
        let* c_26014 :=
          ((send[R,U] __26013) (justUU_17 ((msortU_87) zs_26012)))
        in close[true] c_26014
    | false_5  =>
      fun _26015 (zs_26016) -> (__26017) -o
        match zs_26016 with
        | nilUU_24  =>
          let* c_26018 := ((send[R,U] __26017) (justUU_17 nilUU_24)) in
          close[true] c_26018
        | consUU_25 hd_26019 tl_26020 =>
          match tl_26020 with
          | nilUU_24  =>
            let* c_26021 :=
              ((send[R,U] __26017) (justUU_17 (consUU_25 hd_26019 nilUU_24)))
            in close[true] c_26021
          | consUU_25 hd_26022 tl_26023 =>
            match ((splitU_83)
                    (consUU_25 hd_26019 (consUU_25 hd_26022 tl_26023))) with
            | ex1UU_33 m_26024 n_26025 =>
              let* r1_26026 :=
                fork
                  fun _26027 (_26028) -o
                    ((cmsort_worker_26009)
                      (__sub__ spwn_26010 1) m_26024 _26028)
              in
              let* r2_26029 :=
                fork
                  fun _26030 (_26031) -o
                    ((cmsort_worker_26009)
                      (__sub__ spwn_26010 1) n_26025 _26031)
              in
              let* _26032 := recv[R,U] r1_26026 in
              match _26032 with
              | ex1UL_32 m_26033 n_26034 =>
                let* __26035 := close[false] n_26034 in
                let* _26036 := recv[R,U] r2_26029 in
                match _26036 with
                | ex1UL_32 m_26037 n_26038 =>
                  let* __26039 := close[false] n_26038 in
                  match m_26033 with
                  | justUU_17 m_26040 =>
                    match m_26037 with
                    | justUU_17 m_26041 =>
                      let zs1_26042 :=
                        (justUU_17 ((mergeU_85) m_26040 m_26041))
                      in
                      let zs1_26043 :=
                        ((rwlUU_47) NULL NULL NULL NULL NULL zs1_26042)
                      in
                      let* c_26044 := ((send[R,U] __26017) zs1_26043) in
                      let* __26045 := close[true] c_26044 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_26046 (spwn_26047) ->
    match (__lte__ spwn_26047 0) with
    | true_4  =>
      fun _26048 (zs_26049) -> (__26050) -o
        let* c_26051 :=
          ((send[R,L] __26050) (justLL_14 ((msortL_86) zs_26049)))
        in close[true] c_26051
    | false_5  =>
      fun _26052 (zs_26053) -> (__26054) -o
        match zs_26053 with
        | nilUL_22  =>
          let* c_26055 := ((send[R,L] __26054) (justLL_14 nilUL_22)) in
          close[true] c_26055
        | consUL_23 hd_26056 tl_26057 =>
          match tl_26057 with
          | nilUL_22  =>
            let* c_26058 :=
              ((send[R,L] __26054) (justLL_14 (consUL_23 hd_26056 nilUL_22)))
            in close[true] c_26058
          | consUL_23 hd_26059 tl_26060 =>
            match ((splitL_82)
                    (consUL_23 hd_26056 (consUL_23 hd_26059 tl_26060))) with
            | ex1LL_30 m_26061 n_26062 =>
              let* r1_26063 :=
                fork
                  fun _26064 (_26065) -o
                    ((cmsort_worker_26046)
                      (__sub__ spwn_26047 1) m_26061 _26065)
              in
              let* r2_26066 :=
                fork
                  fun _26067 (_26068) -o
                    ((cmsort_worker_26046)
                      (__sub__ spwn_26047 1) n_26062 _26068)
              in
              let* _26069 := recv[R,L] r1_26063 in
              match _26069 with
              | ex1LL_30 m_26070 n_26071 =>
                let* __26072 := close[false] n_26071 in
                let* _26073 := recv[R,L] r2_26066 in
                match _26073 with
                | ex1LL_30 m_26074 n_26075 =>
                  let* __26076 := close[false] n_26075 in
                  match m_26070 with
                  | justLL_14 m_26077 =>
                    match m_26074 with
                    | justLL_14 m_26078 =>
                      let zs1_26079 :=
                        (justLL_14 ((mergeL_84) m_26077 m_26078))
                      in
                      let zs1_26080 :=
                        ((rwlLL_44) NULL NULL NULL NULL NULL zs1_26079)
                      in
                      let* c_26081 := ((send[R,L] __26054) zs1_26080) in
                      let* __26082 := close[true] c_26081 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_26083 (zs_26084) ->
    let* c_26085 :=
      fork fun _26086 (_26087) -o
             ((cmsort_workerU_91) 4 zs_26084 _26087)
    in
    let* _26088 := recv[R,U] c_26085 in
    match _26088 with
    | ex1UL_32 m_26089 n_26090 =>
      let* __26091 := close[false] n_26090 in return m_26089
    end

#[program]
def cmsortL_92 :=
  fun cmsort_26092 (zs_26093) ->
    let* c_26094 :=
      fork fun _26095 (_26096) -o
             ((cmsort_workerL_90) 4 zs_26093 _26096)
    in
    let* _26097 := recv[R,L] c_26094 in
    match _26097 with
    | ex1LL_30 m_26098 n_26099 =>
      let* __26100 := close[false] n_26099 in return m_26098
    end

#[program]
def mklistU_95 :=
  fun mklist_26101 (n_26102) ->
    match (__lte__ n_26102 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_26102 ((mklist_26101) (__sub__ n_26102 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_26103 (n_26104) ->
    match (__lte__ n_26104 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_26104 ((mklist_26103) (__sub__ n_26104 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_26105 (__26106) ->
    match __26106 with
    | nilUU_24  => 0
    | consUU_25 hd_26107 tl_26108 => (__add__ 1 ((list_len_26105) tl_26108))
    end

#[program]
def list_lenL_96 :=
  fun list_len_26109 (__26110) ->
    match __26110 with
    | nilUL_22  => 0
    | consUL_23 hd_26111 tl_26112 => (__add__ 1 ((list_len_26109) tl_26112))
    end

#[program]
def string_of_listU_99 :=
  fun string_of_list_26113 (__26114) ->
    match __26114 with
    | nilUU_24  => "nil"
    | consUU_25 hd_26115 tl_26116 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26115) " :: ")
        ((string_of_list_26113) tl_26116))
    end

#[program]
def string_of_listL_98 :=
  fun string_of_list_26117 (__26118) ->
    match __26118 with
    | nilUL_22  => "nil"
    | consUL_23 hd_26119 tl_26120 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26119) " :: ")
        ((string_of_list_26117) tl_26120))
    end

#[program]
def main :=
  let test_26121 := ((mklistL_94) 2) in
  let* _26122 := ((cmsortL_92) test_26121) in
  match _26122 with
  | justLL_14 m_26123 =>
    let len_26124 := ((list_lenL_96) m_26123) in
    print ((string_of_int_31) len_26124)
  end

-----------------------------------------

#[program]
def idU_43 := fun id_26464 (A_26465) -> (m_26466) ->
                m_26466

#[program]
def idL_42 := fun id_26467 (A_26468) -> (m_26469) ->
                m_26469

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_26470 {A_26471} -> {m_26472} -> {n_26473} -> {B_26474} ->
  {__26475} -> (__26476) ->
    __26476

#[program]
def rwlUL_46 :=
  fun rwl_26477 {A_26478} -> {m_26479} -> {n_26480} -> {B_26481} ->
  {__26482} -> (__26483) ->
    __26483

#[program]
def rwlLU_45 :=
  fun rwl_26484 {A_26485} -> {m_26486} -> {n_26487} -> {B_26488} ->
  {__26489} -> (__26490) ->
    __26490

#[program]
def rwlLL_44 :=
  fun rwl_26491 {A_26492} -> {m_26493} -> {n_26494} -> {B_26495} ->
  {__26496} -> (__26497) ->
    __26497

#[program]
def rwrUU_51 :=
  fun rwr_26498 {A_26499} -> {m_26500} -> {n_26501} -> {B_26502} ->
  {__26503} -> (__26504) ->
    __26504

#[program]
def rwrUL_50 :=
  fun rwr_26505 {A_26506} -> {m_26507} -> {n_26508} -> {B_26509} ->
  {__26510} -> (__26511) ->
    __26511

#[program]
def rwrLU_49 :=
  fun rwr_26512 {A_26513} -> {m_26514} -> {n_26515} -> {B_26516} ->
  {__26517} -> (__26518) ->
    __26518

#[program]
def rwrLL_48 :=
  fun rwr_26519 {A_26520} -> {m_26521} -> {n_26522} -> {B_26523} ->
  {__26524} -> (__26525) ->
    __26525

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_26526 {A_26527} -> {x_26528} -> (__26529) ->
    match __26529 with
    | justUU_17 m_26530 => m_26530
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_26531 {A_26532} -> {x_26533} -> (__26534) ->
    match __26534 with
    | justUL_16 m_26535 => m_26535
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_26536 {A_26537} -> {x_26538} -> (__26539) ->
    !!

#[program]
def sing_elimLL_62 :=
  fun sing_elim_26540 {A_26541} -> {x_26542} -> (__26543) ->
    match __26543 with
    | justLL_14 m_26544 => m_26544
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_26545 (__26546) ->
    match __26546 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_26547 (__26548) -> (__26549) ->
    match __26548 with
    | true_4  =>
      match __26549 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_26550 (__26551) -> (__26552) ->
    match __26551 with
    | true_4  => true_4
    | false_5  =>
      match __26552 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_26553 (__26554) -> (__26555) -o
    match __26554 with
    | true_4  =>
      match __26555 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __26555 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_26556 (__26557) -> (__26558) ->
    match __26557 with
    | zero_6  => true_4
    | succ_7 n_26559 =>
      match __26558 with
      | zero_6  => false_5 | succ_7 n_26560 => ((lte_26556) n_26559 n_26560)
      end
    end

#[program]
def lt_15 :=
  fun lt_26561 (x_26562) -> (y_26563) ->
    ((lte_14) (succ_7 x_26562) y_26563)

#[program]
def pred_16 :=
  fun pred_26564 (__26565) ->
    match __26565 with
    | zero_6  => zero_6 | succ_7 n_26566 => n_26566
    end

#[program]
def add_17 :=
  fun add_26567 (__26568) -> (__26569) ->
    match __26568 with
    | zero_6  => __26569
    | succ_7 n_26570 => (succ_7 ((add_26567) n_26570 __26569))
    end

#[program]
def sub_18 :=
  fun sub_26571 (__26572) -> (__26573) ->
    match __26573 with
    | zero_6  => __26572
    | succ_7 n_26574 => ((sub_26571) ((pred_16) __26572) n_26574)
    end

#[program]
def mul_19 :=
  fun mul_26575 (__26576) -> (__26577) ->
    match __26576 with
    | zero_6  => zero_6
    | succ_7 n_26578 => ((add_17) __26577 ((mul_26575) n_26578 __26577))
    end

#[program]
def div_20 :=
  fun div_26579 (x_26580) -> (y_26581) ->
    match ((lt_15) x_26580 y_26581) with
    | true_4  => zero_6
    | false_5  =>
      let loop_26582 :=
        fun loop_26583 (x_26584) -> (y_26585) ->
          match ((sub_18) x_26584 ((pred_16) y_26585)) with
          | zero_6  => zero_6
          | succ_7 n_26586 => (succ_7 ((loop_26583) n_26586 y_26585))
          end
      in ((loop_26582) x_26580 y_26581)
    end

#[program]
def rem_21 :=
  fun rem_26587 (x_26588) -> (y_26589) ->
    ((sub_18) x_26588 ((mul_19) ((div_20) x_26588 y_26589) y_26589))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_26590 {A_26591} -> (f_26592) -> (__26593) ->
    match __26593 with
    | nilUU_24  => tt_3
    | consUU_25 hd_26594 tl_26595 =>
      let __26596 := ((f_26592) hd_26594) in
      ((free_list_26590) NULL f_26592 tl_26595)
    end

#[program]
def free_listUL_72 :=
  fun free_list_26597 {A_26598} -> (f_26599) -> (__26600) ->
    match __26600 with
    | nilUL_22  => tt_3
    | consUL_23 hd_26601 tl_26602 =>
      let __26603 := ((f_26599) hd_26601) in
      ((free_list_26597) NULL f_26599 tl_26602)
    end

#[program]
def free_listLL_70 :=
  fun free_list_26604 {A_26605} -> (f_26606) -> (__26607) ->
    match __26607 with
    | nilLL_18  => tt_3
    | consLL_19 hd_26608 tl_26609 =>
      let __26610 := ((f_26606) hd_26608) in
      ((free_list_26604) NULL f_26606 tl_26609)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_26611 (x_26612) -> (y_26613) ->
    let loop_26614 :=
      fun loop_26615 (acc_26616) -> (y_26617) ->
        match (__lte__ y_26617 0) with
        | true_4  => acc_26616
        | false_5  =>
          ((loop_26615) (__mul__ x_26612 acc_26616) (__sub__ y_26617 1))
        end
    in ((loop_26614) 1 y_26613)

#[program]
def powm_26 :=
  fun powm_26618 (x_26619) -> (y_26620) -> (m_26621) ->
    let loop_26622 :=
      fun loop_26623 (acc_26624) -> (y_26625) ->
        match (__lte__ y_26625 0) with
        | true_4  => acc_26624
        | false_5  =>
          ((loop_26623)
            (__mod__ (__mul__ x_26619 acc_26624) m_26621) (__sub__ y_26625 1))
        end
    in ((loop_26622) 1 y_26620)

#[program]
def ord_27 := fun ord_26626 (c_26627) ->
                (__ord__ c_26627)

#[program]
def chr_28 := fun chr_26628 (i_26629) ->
                (__chr__ i_26629)

#[program]
def str_29 := fun str_26630 (c_26631) ->
                (__push__ "" c_26631)

#[program]
def strlen_30 := fun strlen_26632 (s_26633) ->
                   (__size__ s_26633)

#[program]
def string_of_int_31 :=
  fun string_of_int_26634 (i_26635) ->
    let aux_26636 :=
      fun aux_26637 (i_26638) ->
        match (__lte__ 10 i_26638) with
        | true_4  =>
          let r_26639 := (__mod__ i_26638 10) in
          let i_26640 := (__div__ i_26638 10) in
          (__push__ ((aux_26637) i_26640)
            ((chr_28) (__add__ r_26639 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_26638 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_26635) with
    | true_4  => ((aux_26636) i_26635)
    | false_5  => (__cat__ "~" ((aux_26636) (__neg__ i_26635)))
    end

#[program]
def splitU_83 :=
  fun split_26641 (__26642) ->
    match __26642 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_26643 tl_26644 =>
      match tl_26644 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_26643 nilUU_24) nilUU_24)
      | consUU_25 hd_26645 tl_26646 =>
        match ((split_26641) tl_26646) with
        | ex1UU_33 m_26647 n_26648 =>
          (ex1UU_33
            (consUU_25 hd_26643 m_26647) (consUU_25 hd_26645 n_26648))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_26649 (__26650) ->
    match __26650 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_26651 tl_26652 =>
      match tl_26652 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_26651 nilUL_22) nilUL_22)
      | consUL_23 hd_26653 tl_26654 =>
        match ((split_26649) tl_26654) with
        | ex1LL_30 m_26655 n_26656 =>
          (ex1LL_30
            (consUL_23 hd_26651 m_26655) (consUL_23 hd_26653 n_26656))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_26657 (__26658) -> (__26659) -o
    match __26658 with
    | nilUU_24  => __26659
    | consUU_25 hd_26660 tl_26661 =>
      match __26659 with
      | nilUU_24  => (consUU_25 hd_26660 tl_26661)
      | consUU_25 hd_26662 tl_26663 =>
        match (__lte__ hd_26660 hd_26662) with
        | true_4  =>
          (consUU_25
            hd_26660 ((merge_26657) tl_26661 (consUU_25 hd_26662 tl_26663)))
        | false_5  =>
          (consUU_25
            hd_26662 ((merge_26657) (consUU_25 hd_26660 tl_26661) tl_26663))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_26664 (__26665) -> (__26666) -o
    match __26665 with
    | nilUL_22  => __26666
    | consUL_23 hd_26667 tl_26668 =>
      match __26666 with
      | nilUL_22  => (consUL_23 hd_26667 tl_26668)
      | consUL_23 hd_26669 tl_26670 =>
        match (__lte__ hd_26667 hd_26669) with
        | true_4  =>
          (consUL_23
            hd_26667 ((merge_26664) tl_26668 (consUL_23 hd_26669 tl_26670)))
        | false_5  =>
          (consUL_23
            hd_26669 ((merge_26664) (consUL_23 hd_26667 tl_26668) tl_26670))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_26671 (__26672) ->
    match __26672 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_26673 tl_26674 =>
      match tl_26674 with
      | nilUU_24  => (consUU_25 hd_26673 nilUU_24)
      | consUU_25 hd_26675 tl_26676 =>
        match ((splitU_83)
                (consUU_25 hd_26673 (consUU_25 hd_26675 tl_26676))) with
        | ex1UU_33 m_26677 n_26678 =>
          ((mergeU_85) ((msort_26671) m_26677) ((msort_26671) n_26678))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_26679 (__26680) ->
    match __26680 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_26681 tl_26682 =>
      match tl_26682 with
      | nilUL_22  => (consUL_23 hd_26681 nilUL_22)
      | consUL_23 hd_26683 tl_26684 =>
        match ((splitL_82)
                (consUL_23 hd_26681 (consUL_23 hd_26683 tl_26684))) with
        | ex1LL_30 m_26685 n_26686 =>
          ((mergeL_84) ((msort_26679) m_26685) ((msort_26679) n_26686))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_26687 (spwn_26688) ->
    match (__lte__ spwn_26688 0) with
    | true_4  =>
      fun _26689 (zs_26690) -> (__26691) -o
        let* c_26692 :=
          ((send[R,U] __26691) (justUU_17 ((msortU_87) zs_26690)))
        in close[true] c_26692
    | false_5  =>
      fun _26693 (zs_26694) -> (__26695) -o
        match zs_26694 with
        | nilUU_24  =>
          let* c_26696 := ((send[R,U] __26695) (justUU_17 nilUU_24)) in
          close[true] c_26696
        | consUU_25 hd_26697 tl_26698 =>
          match tl_26698 with
          | nilUU_24  =>
            let* c_26699 :=
              ((send[R,U] __26695) (justUU_17 (consUU_25 hd_26697 nilUU_24)))
            in close[true] c_26699
          | consUU_25 hd_26700 tl_26701 =>
            match ((splitU_83)
                    (consUU_25 hd_26697 (consUU_25 hd_26700 tl_26701))) with
            | ex1UU_33 m_26702 n_26703 =>
              let* r1_26704 :=
                fork
                  fun _26705 (_26706) -o
                    ((cmsort_worker_26687)
                      (__sub__ spwn_26688 1) m_26702 _26706)
              in
              let* r2_26707 :=
                fork
                  fun _26708 (_26709) -o
                    ((cmsort_worker_26687)
                      (__sub__ spwn_26688 1) n_26703 _26709)
              in
              let* _26710 := recv[R,U] r1_26704 in
              match _26710 with
              | ex1UL_32 m_26711 n_26712 =>
                let* __26713 := close[false] n_26712 in
                let* _26714 := recv[R,U] r2_26707 in
                match _26714 with
                | ex1UL_32 m_26715 n_26716 =>
                  let* __26717 := close[false] n_26716 in
                  match m_26711 with
                  | justUU_17 m_26718 =>
                    match m_26715 with
                    | justUU_17 m_26719 =>
                      let zs1_26720 :=
                        (justUU_17 ((mergeU_85) m_26718 m_26719))
                      in
                      let zs1_26721 :=
                        ((rwlUU_47) NULL NULL NULL NULL NULL zs1_26720)
                      in
                      let* c_26722 := ((send[R,U] __26695) zs1_26721) in
                      let* __26723 := close[true] c_26722 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_26724 (spwn_26725) ->
    match (__lte__ spwn_26725 0) with
    | true_4  =>
      fun _26726 (zs_26727) -> (__26728) -o
        let* c_26729 :=
          ((send[R,L] __26728) (justLL_14 ((msortL_86) zs_26727)))
        in close[true] c_26729
    | false_5  =>
      fun _26730 (zs_26731) -> (__26732) -o
        match zs_26731 with
        | nilUL_22  =>
          let* c_26733 := ((send[R,L] __26732) (justLL_14 nilUL_22)) in
          close[true] c_26733
        | consUL_23 hd_26734 tl_26735 =>
          match tl_26735 with
          | nilUL_22  =>
            let* c_26736 :=
              ((send[R,L] __26732) (justLL_14 (consUL_23 hd_26734 nilUL_22)))
            in close[true] c_26736
          | consUL_23 hd_26737 tl_26738 =>
            match ((splitL_82)
                    (consUL_23 hd_26734 (consUL_23 hd_26737 tl_26738))) with
            | ex1LL_30 m_26739 n_26740 =>
              let* r1_26741 :=
                fork
                  fun _26742 (_26743) -o
                    ((cmsort_worker_26724)
                      (__sub__ spwn_26725 1) m_26739 _26743)
              in
              let* r2_26744 :=
                fork
                  fun _26745 (_26746) -o
                    ((cmsort_worker_26724)
                      (__sub__ spwn_26725 1) n_26740 _26746)
              in
              let* _26747 := recv[R,L] r1_26741 in
              match _26747 with
              | ex1LL_30 m_26748 n_26749 =>
                let* __26750 := close[false] n_26749 in
                let* _26751 := recv[R,L] r2_26744 in
                match _26751 with
                | ex1LL_30 m_26752 n_26753 =>
                  let* __26754 := close[false] n_26753 in
                  match m_26748 with
                  | justLL_14 m_26755 =>
                    match m_26752 with
                    | justLL_14 m_26756 =>
                      let zs1_26757 :=
                        (justLL_14 ((mergeL_84) m_26755 m_26756))
                      in
                      let zs1_26758 :=
                        ((rwlLL_44) NULL NULL NULL NULL NULL zs1_26757)
                      in
                      let* c_26759 := ((send[R,L] __26732) zs1_26758) in
                      let* __26760 := close[true] c_26759 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_26761 (zs_26762) ->
    let* c_26763 :=
      fork fun _26764 (_26765) -o
             ((cmsort_workerU_91) 4 zs_26762 _26765)
    in
    let* _26766 := recv[R,U] c_26763 in
    match _26766 with
    | ex1UL_32 m_26767 n_26768 =>
      let* __26769 := close[false] n_26768 in return m_26767
    end

#[program]
def cmsortL_92 :=
  fun cmsort_26770 (zs_26771) ->
    let* c_26772 :=
      fork fun _26773 (_26774) -o
             ((cmsort_workerL_90) 4 zs_26771 _26774)
    in
    let* _26775 := recv[R,L] c_26772 in
    match _26775 with
    | ex1LL_30 m_26776 n_26777 =>
      let* __26778 := close[false] n_26777 in return m_26776
    end

#[program]
def mklistU_95 :=
  fun mklist_26779 (n_26780) ->
    match (__lte__ n_26780 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_26780 ((mklist_26779) (__sub__ n_26780 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_26781 (n_26782) ->
    match (__lte__ n_26782 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_26782 ((mklist_26781) (__sub__ n_26782 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_26783 (__26784) ->
    match __26784 with
    | nilUU_24  => 0
    | consUU_25 hd_26785 tl_26786 => (__add__ 1 ((list_len_26783) tl_26786))
    end

#[program]
def list_lenL_96 :=
  fun list_len_26787 (__26788) ->
    match __26788 with
    | nilUL_22  => 0
    | consUL_23 hd_26789 tl_26790 => (__add__ 1 ((list_len_26787) tl_26790))
    end

#[program]
def string_of_listU_99 :=
  fun string_of_list_26791 (__26792) ->
    match __26792 with
    | nilUU_24  => "nil"
    | consUU_25 hd_26793 tl_26794 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26793) " :: ")
        ((string_of_list_26791) tl_26794))
    end

#[program]
def string_of_listL_98 :=
  fun string_of_list_26795 (__26796) ->
    match __26796 with
    | nilUL_22  => "nil"
    | consUL_23 hd_26797 tl_26798 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_26797) " :: ")
        ((string_of_list_26795) tl_26798))
    end

#[program]
def main :=
  let test_26799 := ((mklistL_94) 2) in
  let* _26800 := ((cmsortL_92) test_26799) in
  match _26800 with
  | justLL_14 m_26801 =>
    let len_26802 := ((list_lenL_96) m_26801) in
    print ((string_of_int_31) len_26802)
  end

-----------------------------------------

def idU_43 := fun id_27162 (A_27163) -> (m_27164) -> m_27164

def idL_42 := fun id_27165 (A_27166) -> (m_27167) -> m_27167

def rwlUU_47 :=
  fun rwl_27168 (A_27169) -> (m_27170) -> (n_27171) -> (B_27172) ->
  (__27173) -> (__27174) -> __27174

def rwlUL_46 :=
  fun rwl_27175 (A_27176) -> (m_27177) -> (n_27178) -> (B_27179) ->
  (__27180) -> (__27181) -> __27181

def rwlLU_45 :=
  fun rwl_27182 (A_27183) -> (m_27184) -> (n_27185) -> (B_27186) ->
  (__27187) -> (__27188) -> __27188

def rwlLL_44 :=
  fun rwl_27189 (A_27190) -> (m_27191) -> (n_27192) -> (B_27193) ->
  (__27194) -> (__27195) -> __27195

def rwrUU_51 :=
  fun rwr_27196 (A_27197) -> (m_27198) -> (n_27199) -> (B_27200) ->
  (__27201) -> (__27202) -> __27202

def rwrUL_50 :=
  fun rwr_27203 (A_27204) -> (m_27205) -> (n_27206) -> (B_27207) ->
  (__27208) -> (__27209) -> __27209

def rwrLU_49 :=
  fun rwr_27210 (A_27211) -> (m_27212) -> (n_27213) -> (B_27214) ->
  (__27215) -> (__27216) -> __27216

def rwrLL_48 :=
  fun rwr_27217 (A_27218) -> (m_27219) -> (n_27220) -> (B_27221) ->
  (__27222) -> (__27223) -> __27223

def sing_elimUU_65 :=
  fun sing_elim_27224 (A_27225) -> (x_27226) -> (__27227) -> __27227

def sing_elimUL_64 :=
  fun sing_elim_27228 (A_27229) -> (x_27230) -> (__27231) -> __27231

def sing_elimLU_63 :=
  fun sing_elim_27232 (A_27233) -> (x_27234) -> (__27235) -> !!

def sing_elimLL_62 :=
  fun sing_elim_27236 (A_27237) -> (x_27238) -> (__27239) -> __27239

def not_10 :=
  fun not_27240 (__27241) ->
    match __27241 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_27242 (__27243) -> (__27244) ->
    match __27243 with
    | true_4 =>
      match __27244 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_27245 (__27246) -> (__27247) ->
    match __27246 with
    | true_4 => true_4
    | false_5 =>
      match __27247 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_27248 (__27249) -> (__27250) -o
    match __27249 with
    | true_4 =>
      match __27250 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __27250 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_27251 (__27252) -> (__27253) ->
    match __27252 with
    | zero_6  => true_4
    | succ_7 n_27254 =>
      match __27253 with
      | zero_6  => false_5 | succ_7 n_27255 => ((lte_27251) n_27254 n_27255)
      end
    end

def lt_15 :=
  fun lt_27256 (x_27257) -> (y_27258) -> ((lte_14) (succ_7 x_27257) y_27258)

def pred_16 :=
  fun pred_27259 (__27260) ->
    match __27260 with
    | zero_6  => (zero_6 ) | succ_7 n_27261 => n_27261
    end

def add_17 :=
  fun add_27262 (__27263) -> (__27264) ->
    match __27263 with
    | zero_6  => __27264
    | succ_7 n_27265 => (succ_7 ((add_27262) n_27265 __27264))
    end

def sub_18 :=
  fun sub_27266 (__27267) -> (__27268) ->
    match __27268 with
    | zero_6  => __27267
    | succ_7 n_27269 => ((sub_27266) ((pred_16) __27267) n_27269)
    end

def mul_19 :=
  fun mul_27270 (__27271) -> (__27272) ->
    match __27271 with
    | zero_6  => (zero_6 )
    | succ_7 n_27273 => ((add_17) __27272 ((mul_27270) n_27273 __27272))
    end

def div_20 :=
  fun div_27274 (x_27275) -> (y_27276) ->
    match ((lt_15) x_27275 y_27276) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_27277 :=
        fun loop_27278 (x_27279) -> (y_27280) ->
          match ((sub_18) x_27279 ((pred_16) y_27280)) with
          | zero_6  => (zero_6 )
          | succ_7 n_27281 => (succ_7 ((loop_27278) n_27281 y_27280))
          end
      in ((loop_27277) x_27275 y_27276)
    end

def rem_21 :=
  fun rem_27282 (x_27283) -> (y_27284) ->
    ((sub_18) x_27283 ((mul_19) ((div_20) x_27283 y_27284) y_27284))

def free_listUU_73 :=
  fun free_list_27285 (A_27286) -> (f_27287) -> (__27288) ->
    match __27288 with
    | nilUU_24  => tt_3
    | consUU_25 hd_27289 tl_27290 =>
      let __27291 := ((f_27287) hd_27289) in
      ((free_list_27285) NULL f_27287 tl_27290)
    end

def free_listUL_72 :=
  fun free_list_27292 (A_27293) -> (f_27294) -> (__27295) ->
    match __27295 with
    | nilUL_22  => tt_3
    | consUL_23 hd_27296 tl_27297 =>
      let __27298 := ((f_27294) hd_27296) in
      ((free_list_27292) NULL f_27294 tl_27297)
    end

def free_listLL_70 :=
  fun free_list_27299 (A_27300) -> (f_27301) -> (__27302) ->
    match __27302 with
    | nilLL_18  => tt_3
    | consLL_19 hd_27303 tl_27304 =>
      let __27305 := ((f_27301) hd_27303) in
      ((free_list_27299) NULL f_27301 tl_27304)
    end

def pow_25 :=
  fun pow_27306 (x_27307) -> (y_27308) ->
    let loop_27309 :=
      fun loop_27310 (acc_27311) -> (y_27312) ->
        match (__lte__ y_27312 0) with
        | true_4 => acc_27311
        | false_5 =>
          ((loop_27310) (__mul__ x_27307 acc_27311) (__sub__ y_27312 1))
        end
    in ((loop_27309) 1 y_27308)

def powm_26 :=
  fun powm_27313 (x_27314) -> (y_27315) -> (m_27316) ->
    let loop_27317 :=
      fun loop_27318 (acc_27319) -> (y_27320) ->
        match (__lte__ y_27320 0) with
        | true_4 => acc_27319
        | false_5 =>
          ((loop_27318)
            (__mod__ (__mul__ x_27314 acc_27319) m_27316) (__sub__ y_27320 1))
        end
    in ((loop_27317) 1 y_27315)

def ord_27 := fun ord_27321 (c_27322) -> (__ord__ c_27322)

def chr_28 := fun chr_27323 (i_27324) -> (__chr__ i_27324)

def str_29 := fun str_27325 (c_27326) -> (__push__ "" c_27326)

def strlen_30 := fun strlen_27327 (s_27328) -> (__size__ s_27328)

def string_of_int_31 :=
  fun string_of_int_27329 (i_27330) ->
    let aux_27331 :=
      fun aux_27332 (i_27333) ->
        match (__lte__ 10 i_27333) with
        | true_4 =>
          let r_27334 := (__mod__ i_27333 10) in
          let i_27335 := (__div__ i_27333 10) in
          (__push__ ((aux_27332) i_27335)
            ((chr_28) (__add__ r_27334 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_27333 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_27330) with
    | true_4 => ((aux_27331) i_27330)
    | false_5 => (__cat__ "~" ((aux_27331) (__neg__ i_27330)))
    end

def splitU_83 :=
  fun split_27336 (__27337) ->
    match __27337 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_27338 tl_27339 =>
      match tl_27339 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_27338 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_27340 tl_27341 =>
        match ((split_27336) tl_27341) with
        | ex1UU_33 m_27342 n_27343 =>
          (ex1UU_33
            (consUU_25 hd_27338 m_27342) (consUU_25 hd_27340 n_27343))
        end
      end
    end

def splitL_82 :=
  fun split_27344 (__27345) ->
    match __27345 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_27346 tl_27347 =>
      match tl_27347 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_27346 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_27348 tl_27349 =>
        match ((split_27344) tl_27349) with
        | ex1LL_30 m_27350 n_27351 =>
          (ex1LL_30
            (consUL_23 hd_27346 m_27350) (consUL_23 hd_27348 n_27351))
        end
      end
    end

def mergeU_85 :=
  fun merge_27352 (__27353) -> (__27354) -o
    match __27353 with
    | nilUU_24  => __27354
    | consUU_25 hd_27355 tl_27356 =>
      match __27354 with
      | nilUU_24  => (consUU_25 hd_27355 tl_27356)
      | consUU_25 hd_27357 tl_27358 =>
        match (__lte__ hd_27355 hd_27357) with
        | true_4 =>
          (consUU_25
            hd_27355 ((merge_27352) tl_27356 (consUU_25 hd_27357 tl_27358)))
        | false_5 =>
          (consUU_25
            hd_27357 ((merge_27352) (consUU_25 hd_27355 tl_27356) tl_27358))
        end
      end
    end

def mergeL_84 :=
  fun merge_27359 (__27360) -> (__27361) -o
    match __27360 with
    | nilUL_22  => __27361
    | consUL_23 hd_27362 tl_27363 =>
      match __27361 with
      | nilUL_22  => (consUL_23 hd_27362 tl_27363)
      | consUL_23 hd_27364 tl_27365 =>
        match (__lte__ hd_27362 hd_27364) with
        | true_4 =>
          (consUL_23
            hd_27362 ((merge_27359) tl_27363 (consUL_23 hd_27364 tl_27365)))
        | false_5 =>
          (consUL_23
            hd_27364 ((merge_27359) (consUL_23 hd_27362 tl_27363) tl_27365))
        end
      end
    end

def msortU_87 :=
  fun msort_27366 (__27367) ->
    match __27367 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_27368 tl_27369 =>
      match tl_27369 with
      | nilUU_24  => (consUU_25 hd_27368 (nilUU_24 ))
      | consUU_25 hd_27370 tl_27371 =>
        match ((splitU_83)
                (consUU_25 hd_27368 (consUU_25 hd_27370 tl_27371))) with
        | ex1UU_33 m_27372 n_27373 =>
          ((mergeU_85) ((msort_27366) m_27372) ((msort_27366) n_27373))
        end
      end
    end

def msortL_86 :=
  fun msort_27374 (__27375) ->
    match __27375 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_27376 tl_27377 =>
      match tl_27377 with
      | nilUL_22  => (consUL_23 hd_27376 (nilUL_22 ))
      | consUL_23 hd_27378 tl_27379 =>
        match ((splitL_82)
                (consUL_23 hd_27376 (consUL_23 hd_27378 tl_27379))) with
        | ex1LL_30 m_27380 n_27381 =>
          ((mergeL_84) ((msort_27374) m_27380) ((msort_27374) n_27381))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_27382 (spwn_27383) ->
    match (__lte__ spwn_27383 0) with
    | true_4 =>
      fun _27384 (zs_27385) -> (__27386) -o
        lazy(let c_27387 :=
               force(((lam (x_27388) -> lazy(send(__27386, x_27388)))
                       ((msortU_87) zs_27385)))
             in force(lazy(close[true] c_27387)))
      | false_5 =>
        fun _27389 (zs_27390) -> (__27391) -o
          match zs_27390 with
          | nilUU_24  =>
            lazy(let c_27392 :=
                   force(((lam (x_27393) -> lazy(send(__27391, x_27393)))
                           (nilUU_24 )))
                 in force(lazy(close[true] c_27392)))
          | consUU_25 hd_27394 tl_27395 =>
            match tl_27395 with
            | nilUU_24  =>
              lazy(let c_27396 :=
                     force(((lam (x_27397) -> lazy(send(__27391, x_27397)))
                             (consUU_25 hd_27394 (nilUU_24 ))))
                   in force(lazy(close[true] c_27396)))
            | consUU_25 hd_27398 tl_27399 =>
              match ((splitU_83)
                      (consUU_25 hd_27394 (consUU_25 hd_27398 tl_27399))) with
              | ex1UU_33 m_27400 n_27401 =>
                lazy(let r1_27402 :=
                       force(lazy(fork
                                    fun _27403 (_27404) -o
                                      ((cmsort_worker_27382)
                                        (__sub__ spwn_27383 1) m_27400 _27404)))
                     in
                     let r2_27405 :=
                       force(lazy(fork
                                    fun _27406 (_27407) -o
                                      ((cmsort_worker_27382)
                                        (__sub__ spwn_27383 1) n_27401 _27407)))
                     in
                     let _27408 := force(lazy(recv[U](r1_27402))) in
                     force(match _27408 with
                           | ex1UL_32 m_27409 n_27410 =>
                             lazy(let __27411 :=
                                    force(lazy(close[false] n_27410))
                                  in
                                  let _27412 :=
                                    force(lazy(recv[U](r2_27405)))
                                  in
                                  force(match _27412 with
                                        | ex1UL_32 m_27413 n_27414 =>
                                          lazy(let __27415 :=
                                                 force(lazy(close[false]
                                                              n_27414))
                                               in
                                               force(let zs1_27416 :=
                                                       ((mergeU_85)
                                                         m_27409 m_27413)
                                                     in
                                                     let zs1_27417 :=
                                                       ((rwlUU_47)
                                                         NULL NULL NULL NULL
                                                           NULL zs1_27416)
                                                     in
                                                     lazy(let c_27418 :=
                                                            force(((lam (x_27419) ->
                                                                    lazy(
                                                                    send(__27391, x_27419)))
                                                                    zs1_27417))
                                                          in
                                                          let __27420 :=
                                                            force(lazy(
                                                                  close[true]
                                                                    c_27418))
                                                          in
                                                          force(lazy(tt_3)))))
                                        end))
                           end))
                end
              end
            end
        end

def cmsort_workerL_90 :=
  fun cmsort_worker_27421 (spwn_27422) ->
    match (__lte__ spwn_27422 0) with
    | true_4 =>
      fun _27423 (zs_27424) -> (__27425) -o
        lazy(let c_27426 :=
               force(((lam (x_27427) -> lazy(send(__27425, x_27427)))
                       ((msortL_86) zs_27424)))
             in force(lazy(close[true] c_27426)))
      | false_5 =>
        fun _27428 (zs_27429) -> (__27430) -o
          match zs_27429 with
          | nilUL_22  =>
            lazy(let c_27431 :=
                   force(((lam (x_27432) -> lazy(send(__27430, x_27432)))
                           (nilUL_22 )))
                 in force(lazy(close[true] c_27431)))
          | consUL_23 hd_27433 tl_27434 =>
            match tl_27434 with
            | nilUL_22  =>
              lazy(let c_27435 :=
                     force(((lam (x_27436) -> lazy(send(__27430, x_27436)))
                             (consUL_23 hd_27433 (nilUL_22 ))))
                   in force(lazy(close[true] c_27435)))
            | consUL_23 hd_27437 tl_27438 =>
              match ((splitL_82)
                      (consUL_23 hd_27433 (consUL_23 hd_27437 tl_27438))) with
              | ex1LL_30 m_27439 n_27440 =>
                lazy(let r1_27441 :=
                       force(lazy(fork
                                    fun _27442 (_27443) -o
                                      ((cmsort_worker_27421)
                                        (__sub__ spwn_27422 1) m_27439 _27443)))
                     in
                     let r2_27444 :=
                       force(lazy(fork
                                    fun _27445 (_27446) -o
                                      ((cmsort_worker_27421)
                                        (__sub__ spwn_27422 1) n_27440 _27446)))
                     in
                     let _27447 := force(lazy(recv[L](r1_27441))) in
                     force(match _27447 with
                           | ex1LL_30 m_27448 n_27449 =>
                             lazy(let __27450 :=
                                    force(lazy(close[false] n_27449))
                                  in
                                  let _27451 :=
                                    force(lazy(recv[L](r2_27444)))
                                  in
                                  force(match _27451 with
                                        | ex1LL_30 m_27452 n_27453 =>
                                          lazy(let __27454 :=
                                                 force(lazy(close[false]
                                                              n_27453))
                                               in
                                               force(let zs1_27455 :=
                                                       ((mergeL_84)
                                                         m_27448 m_27452)
                                                     in
                                                     let zs1_27456 :=
                                                       ((rwlLL_44)
                                                         NULL NULL NULL NULL
                                                           NULL zs1_27455)
                                                     in
                                                     lazy(let c_27457 :=
                                                            force(((lam (x_27458) ->
                                                                    lazy(
                                                                    send(__27430, x_27458)))
                                                                    zs1_27456))
                                                          in
                                                          let __27459 :=
                                                            force(lazy(
                                                                  close[true]
                                                                    c_27457))
                                                          in
                                                          force(lazy(tt_3)))))
                                        end))
                           end))
                end
              end
            end
        end

def cmsortU_93 :=
  fun cmsort_27460 (zs_27461) ->
    lazy(let c_27462 :=
           force(lazy(fork
                        fun _27463 (_27464) -o
                          ((cmsort_workerU_91) 4 zs_27461 _27464)))
         in
         let _27465 := force(lazy(recv[U](c_27462))) in
         force(match _27465 with
               | ex1UL_32 m_27466 n_27467 =>
                 lazy(let __27468 := force(lazy(close[false] n_27467)) in
                      force(lazy(m_27466)))
               end))

def cmsortL_92 :=
  fun cmsort_27469 (zs_27470) ->
    lazy(let c_27471 :=
           force(lazy(fork
                        fun _27472 (_27473) -o
                          ((cmsort_workerL_90) 4 zs_27470 _27473)))
         in
         let _27474 := force(lazy(recv[L](c_27471))) in
         force(match _27474 with
               | ex1LL_30 m_27475 n_27476 =>
                 lazy(let __27477 := force(lazy(close[false] n_27476)) in
                      force(lazy(m_27475)))
               end))

def mklistU_95 :=
  fun mklist_27478 (n_27479) ->
    match (__lte__ n_27479 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_27479 ((mklist_27478) (__sub__ n_27479 1)))
    end

def mklistL_94 :=
  fun mklist_27480 (n_27481) ->
    match (__lte__ n_27481 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_27481 ((mklist_27480) (__sub__ n_27481 1)))
    end

def list_lenU_97 :=
  fun list_len_27482 (__27483) ->
    match __27483 with
    | nilUU_24  => 0
    | consUU_25 hd_27484 tl_27485 => (__add__ 1 ((list_len_27482) tl_27485))
    end

def list_lenL_96 :=
  fun list_len_27486 (__27487) ->
    match __27487 with
    | nilUL_22  => 0
    | consUL_23 hd_27488 tl_27489 => (__add__ 1 ((list_len_27486) tl_27489))
    end

def string_of_listU_99 :=
  fun string_of_list_27490 (__27491) ->
    match __27491 with
    | nilUU_24  => "nil"
    | consUU_25 hd_27492 tl_27493 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_27492) " :: ")
        ((string_of_list_27490) tl_27493))
    end

def string_of_listL_98 :=
  fun string_of_list_27494 (__27495) ->
    match __27495 with
    | nilUL_22  => "nil"
    | consUL_23 hd_27496 tl_27497 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_27496) " :: ")
        ((string_of_list_27494) tl_27497))
    end

def main :=
  let test_27498 := ((mklistL_94) 2) in
  lazy(let _27499 := force(((cmsortL_92) test_27498)) in
       force(let len_27500 := ((list_lenL_96) _27499) in
             lazy(print ((string_of_int_31) len_27500))))

-----------------------------------------

def idU_43 := lam (A_27927) -> (m_27928) -> m_27928

def idL_42 := lam (A_27929) -> (m_27930) -> m_27930

def rwlUU_47 :=
  lam (A_27931) -> (m_27932) -> (n_27933) -> (B_27934) -> (__27935) ->
  (__27936) -> __27936

def rwlUL_46 :=
  lam (A_27937) -> (m_27938) -> (n_27939) -> (B_27940) -> (__27941) ->
  (__27942) -> __27942

def rwlLU_45 :=
  lam (A_27943) -> (m_27944) -> (n_27945) -> (B_27946) -> (__27947) ->
  (__27948) -> __27948

def rwlLL_44 :=
  lam (A_27949) -> (m_27950) -> (n_27951) -> (B_27952) -> (__27953) ->
  (__27954) -> __27954

def rwrUU_51 :=
  lam (A_27955) -> (m_27956) -> (n_27957) -> (B_27958) -> (__27959) ->
  (__27960) -> __27960

def rwrUL_50 :=
  lam (A_27961) -> (m_27962) -> (n_27963) -> (B_27964) -> (__27965) ->
  (__27966) -> __27966

def rwrLU_49 :=
  lam (A_27967) -> (m_27968) -> (n_27969) -> (B_27970) -> (__27971) ->
  (__27972) -> __27972

def rwrLL_48 :=
  lam (A_27973) -> (m_27974) -> (n_27975) -> (B_27976) -> (__27977) ->
  (__27978) -> __27978

def sing_elimUU_65 := lam (A_27979) -> (x_27980) -> (__27981) -> __27981

def sing_elimUL_64 := lam (A_27982) -> (x_27983) -> (__27984) -> __27984

def sing_elimLU_63 := lam (A_27985) -> (x_27986) -> (__27987) -> !!

def sing_elimLL_62 := lam (A_27988) -> (x_27989) -> (__27990) -> __27990

def not_10 :=
  lam (__27991) ->
    match __27991 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__27992) -> (__27993) ->
    match __27992 with
    | true_4 =>
      match __27993 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__27994) -> (__27995) ->
    match __27994 with
    | true_4 => true_4
    | false_5 =>
      match __27995 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__27996) -> (__27997) -o
    match __27996 with
    | true_4 =>
      match __27997 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __27997 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_27998 (__27999) -> (__28000) ->
    match __27999 with
    | zero_6  => true_4
    | succ_7 n_28001 =>
      match __28000 with
      | zero_6  => false_5 | succ_7 n_28002 => ((lte_27998) n_28001 n_28002)
      end
    end

def lt_15 :=
  lam (x_28003) -> (y_28004) -> ((lte_14) (succ_7 x_28003) y_28004)

def pred_16 :=
  lam (__28005) ->
    match __28005 with
    | zero_6  => (zero_6 ) | succ_7 n_28006 => n_28006
    end

def add_17 :=
  fun add_28007 (__28008) -> (__28009) ->
    match __28008 with
    | zero_6  => __28009
    | succ_7 n_28010 => (succ_7 ((add_28007) n_28010 __28009))
    end

def sub_18 :=
  fun sub_28011 (__28012) -> (__28013) ->
    match __28013 with
    | zero_6  => __28012
    | succ_7 n_28014 => ((sub_28011) ((pred_16) __28012) n_28014)
    end

def mul_19 :=
  fun mul_28015 (__28016) -> (__28017) ->
    match __28016 with
    | zero_6  => (zero_6 )
    | succ_7 n_28018 => ((add_17) __28017 ((mul_28015) n_28018 __28017))
    end

def div_20 :=
  lam (x_28019) -> (y_28020) ->
    match ((lt_15) x_28019 y_28020) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_28021 :=
        fun loop_28022 (x_28023) -> (y_28024) ->
          match ((sub_18) x_28023 ((pred_16) y_28024)) with
          | zero_6  => (zero_6 )
          | succ_7 n_28025 => (succ_7 ((loop_28022) n_28025 y_28024))
          end
      in ((loop_28021) x_28019 y_28020)
    end

def rem_21 :=
  lam (x_28026) -> (y_28027) ->
    ((sub_18) x_28026 ((mul_19) ((div_20) x_28026 y_28027) y_28027))

def free_listUU_73 :=
  fun free_list_28028 (A_28029) -> (f_28030) -> (__28031) ->
    match __28031 with
    | nilUU_24  => tt_3
    | consUU_25 hd_28032 tl_28033 =>
      let __28034 := ((f_28030) hd_28032) in
      ((free_list_28028) NULL f_28030 tl_28033)
    end

def free_listUL_72 :=
  fun free_list_28035 (A_28036) -> (f_28037) -> (__28038) ->
    match __28038 with
    | nilUL_22  => tt_3
    | consUL_23 hd_28039 tl_28040 =>
      let __28041 := ((f_28037) hd_28039) in
      ((free_list_28035) NULL f_28037 tl_28040)
    end

def free_listLL_70 :=
  fun free_list_28042 (A_28043) -> (f_28044) -> (__28045) ->
    match __28045 with
    | nilLL_18  => tt_3
    | consLL_19 hd_28046 tl_28047 =>
      let __28048 := ((f_28044) hd_28046) in
      ((free_list_28042) NULL f_28044 tl_28047)
    end

def pow_25 :=
  lam (x_28049) -> (y_28050) ->
    let loop_28051 :=
      fun loop_28052 (acc_28053) -> (y_28054) ->
        match (__lte__ y_28054 0) with
        | true_4 => acc_28053
        | false_5 =>
          ((loop_28052) (__mul__ x_28049 acc_28053) (__sub__ y_28054 1))
        end
    in ((loop_28051) 1 y_28050)

def powm_26 :=
  lam (x_28055) -> (y_28056) -> (m_28057) ->
    let loop_28058 :=
      fun loop_28059 (acc_28060) -> (y_28061) ->
        match (__lte__ y_28061 0) with
        | true_4 => acc_28060
        | false_5 =>
          ((loop_28059)
            (__mod__ (__mul__ x_28055 acc_28060) m_28057) (__sub__ y_28061 1))
        end
    in ((loop_28058) 1 y_28056)

def ord_27 := lam (c_28062) -> (__ord__ c_28062)

def chr_28 := lam (i_28063) -> (__chr__ i_28063)

def str_29 := lam (c_28064) -> (__push__ "" c_28064)

def strlen_30 := lam (s_28065) -> (__size__ s_28065)

def string_of_int_31 :=
  lam (i_28066) ->
    let aux_28067 :=
      fun aux_28068 (i_28069) ->
        match (__lte__ 10 i_28069) with
        | true_4 =>
          let r_28070 := (__mod__ i_28069 10) in
          let i_28071 := (__div__ i_28069 10) in
          (__push__ ((aux_28068) i_28071)
            ((chr_28) (__add__ r_28070 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_28069 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_28066) with
    | true_4 => ((aux_28067) i_28066)
    | false_5 => (__cat__ "~" ((aux_28067) (__neg__ i_28066)))
    end

def splitU_83 :=
  fun split_28072 (__28073) ->
    match __28073 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_28074 tl_28075 =>
      match tl_28075 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_28074 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_28076 tl_28077 =>
        match ((split_28072) tl_28077) with
        | ex1UU_33 m_28078 n_28079 =>
          (ex1UU_33
            (consUU_25 hd_28074 m_28078) (consUU_25 hd_28076 n_28079))
        end
      end
    end

def splitL_82 :=
  fun split_28080 (__28081) ->
    match __28081 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_28082 tl_28083 =>
      match tl_28083 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_28082 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_28084 tl_28085 =>
        match ((split_28080) tl_28085) with
        | ex1LL_30 m_28086 n_28087 =>
          (ex1LL_30
            (consUL_23 hd_28082 m_28086) (consUL_23 hd_28084 n_28087))
        end
      end
    end

def mergeU_85 :=
  fun merge_28088 (__28089) -> (__28090) -o
    match __28089 with
    | nilUU_24  => __28090
    | consUU_25 hd_28091 tl_28092 =>
      match __28090 with
      | nilUU_24  => (consUU_25 hd_28091 tl_28092)
      | consUU_25 hd_28093 tl_28094 =>
        match (__lte__ hd_28091 hd_28093) with
        | true_4 =>
          (consUU_25
            hd_28091 ((merge_28088) tl_28092 (consUU_25 hd_28093 tl_28094)))
        | false_5 =>
          (consUU_25
            hd_28093 ((merge_28088) (consUU_25 hd_28091 tl_28092) tl_28094))
        end
      end
    end

def mergeL_84 :=
  fun merge_28095 (__28096) -> (__28097) -o
    match __28096 with
    | nilUL_22  => __28097
    | consUL_23 hd_28098 tl_28099 =>
      match __28097 with
      | nilUL_22  => (consUL_23 hd_28098 tl_28099)
      | consUL_23 hd_28100 tl_28101 =>
        match (__lte__ hd_28098 hd_28100) with
        | true_4 =>
          (consUL_23
            hd_28098 ((merge_28095) tl_28099 (consUL_23 hd_28100 tl_28101)))
        | false_5 =>
          (consUL_23
            hd_28100 ((merge_28095) (consUL_23 hd_28098 tl_28099) tl_28101))
        end
      end
    end

def msortU_87 :=
  fun msort_28102 (__28103) ->
    match __28103 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_28104 tl_28105 =>
      match tl_28105 with
      | nilUU_24  => (consUU_25 hd_28104 (nilUU_24 ))
      | consUU_25 hd_28106 tl_28107 =>
        match ((splitU_83)
                (consUU_25 hd_28104 (consUU_25 hd_28106 tl_28107))) with
        | ex1UU_33 m_28108 n_28109 =>
          ((mergeU_85) ((msort_28102) m_28108) ((msort_28102) n_28109))
        end
      end
    end

def msortL_86 :=
  fun msort_28110 (__28111) ->
    match __28111 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_28112 tl_28113 =>
      match tl_28113 with
      | nilUL_22  => (consUL_23 hd_28112 (nilUL_22 ))
      | consUL_23 hd_28114 tl_28115 =>
        match ((splitL_82)
                (consUL_23 hd_28112 (consUL_23 hd_28114 tl_28115))) with
        | ex1LL_30 m_28116 n_28117 =>
          ((mergeL_84) ((msort_28110) m_28116) ((msort_28110) n_28117))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_28118 (spwn_28119) ->
    match (__lte__ spwn_28119 0) with
    | true_4 =>
      lam (zs_28120) -> (__28121) -o
        lazy(let c_28122 := send(__28121, ((msortU_87) zs_28120)) in
             close[true] c_28122)
    | false_5 =>
      lam (zs_28123) -> (__28124) -o
        match zs_28123 with
        | nilUU_24  =>
          lazy(let c_28125 := send(__28124, (nilUU_24 )) in
               close[true] c_28125)
        | consUU_25 hd_28126 tl_28127 =>
          match tl_28127 with
          | nilUU_24  =>
            lazy(let c_28128 :=
                   send(__28124, (consUU_25 hd_28126 (nilUU_24 )))
                 in close[true] c_28128)
          | consUU_25 hd_28129 tl_28130 =>
            match ((splitU_83)
                    (consUU_25 hd_28126 (consUU_25 hd_28129 tl_28130))) with
            | ex1UU_33 m_28131 n_28132 =>
              lazy(let r1_28133 :=
                     fork
                       lam (_28134) -o
                         ((cmsort_worker_28118)
                           (__sub__ spwn_28119 1) m_28131 _28134)
                   in
                   let r2_28135 :=
                     fork
                       lam (_28136) -o
                         ((cmsort_worker_28118)
                           (__sub__ spwn_28119 1) n_28132 _28136)
                   in
                   let _28137 := recv[U](r1_28133) in
                   match _28137 with
                   | ex1UL_32 m_28138 n_28139 =>
                     let __28140 := close[false] n_28139 in
                     let _28141 := recv[U](r2_28135) in
                     match _28141 with
                     | ex1UL_32 m_28142 n_28143 =>
                       let __28144 := close[false] n_28143 in
                       let zs1_28145 := ((mergeU_85) m_28138 m_28142) in
                       let zs1_28146 :=
                         ((rwlUU_47) NULL NULL NULL NULL NULL zs1_28145)
                       in
                       let c_28147 := send(__28124, zs1_28146) in
                       let __28148 := close[true] c_28147 in tt_3
                     end
                   end)
            end
          end
        end
    end

def cmsort_workerL_90 :=
  fun cmsort_worker_28149 (spwn_28150) ->
    match (__lte__ spwn_28150 0) with
    | true_4 =>
      lam (zs_28151) -> (__28152) -o
        lazy(let c_28153 := send(__28152, ((msortL_86) zs_28151)) in
             close[true] c_28153)
    | false_5 =>
      lam (zs_28154) -> (__28155) -o
        match zs_28154 with
        | nilUL_22  =>
          lazy(let c_28156 := send(__28155, (nilUL_22 )) in
               close[true] c_28156)
        | consUL_23 hd_28157 tl_28158 =>
          match tl_28158 with
          | nilUL_22  =>
            lazy(let c_28159 :=
                   send(__28155, (consUL_23 hd_28157 (nilUL_22 )))
                 in close[true] c_28159)
          | consUL_23 hd_28160 tl_28161 =>
            match ((splitL_82)
                    (consUL_23 hd_28157 (consUL_23 hd_28160 tl_28161))) with
            | ex1LL_30 m_28162 n_28163 =>
              lazy(let r1_28164 :=
                     fork
                       lam (_28165) -o
                         ((cmsort_worker_28149)
                           (__sub__ spwn_28150 1) m_28162 _28165)
                   in
                   let r2_28166 :=
                     fork
                       lam (_28167) -o
                         ((cmsort_worker_28149)
                           (__sub__ spwn_28150 1) n_28163 _28167)
                   in
                   let _28168 := recv[L](r1_28164) in
                   match _28168 with
                   | ex1LL_30 m_28169 n_28170 =>
                     let __28171 := close[false] n_28170 in
                     let _28172 := recv[L](r2_28166) in
                     match _28172 with
                     | ex1LL_30 m_28173 n_28174 =>
                       let __28175 := close[false] n_28174 in
                       let zs1_28176 := ((mergeL_84) m_28169 m_28173) in
                       let zs1_28177 :=
                         ((rwlLL_44) NULL NULL NULL NULL NULL zs1_28176)
                       in
                       let c_28178 := send(__28155, zs1_28177) in
                       let __28179 := close[true] c_28178 in tt_3
                     end
                   end)
            end
          end
        end
    end

def cmsortU_93 :=
  lam (zs_28180) ->
    lazy(let c_28181 :=
           fork lam (_28182) -o ((cmsort_workerU_91) 4 zs_28180 _28182)
         in
         let _28183 := recv[U](c_28181) in
         match _28183 with
         | ex1UL_32 m_28184 n_28185 =>
           let __28186 := close[false] n_28185 in m_28184
         end)

def cmsortL_92 :=
  lam (zs_28187) ->
    lazy(let c_28188 :=
           fork lam (_28189) -o ((cmsort_workerL_90) 4 zs_28187 _28189)
         in
         let _28190 := recv[L](c_28188) in
         match _28190 with
         | ex1LL_30 m_28191 n_28192 =>
           let __28193 := close[false] n_28192 in m_28191
         end)

def mklistU_95 :=
  fun mklist_28194 (n_28195) ->
    match (__lte__ n_28195 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_28195 ((mklist_28194) (__sub__ n_28195 1)))
    end

def mklistL_94 :=
  fun mklist_28196 (n_28197) ->
    match (__lte__ n_28197 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_28197 ((mklist_28196) (__sub__ n_28197 1)))
    end

def list_lenU_97 :=
  fun list_len_28198 (__28199) ->
    match __28199 with
    | nilUU_24  => 0
    | consUU_25 hd_28200 tl_28201 => (__add__ 1 ((list_len_28198) tl_28201))
    end

def list_lenL_96 :=
  fun list_len_28202 (__28203) ->
    match __28203 with
    | nilUL_22  => 0
    | consUL_23 hd_28204 tl_28205 => (__add__ 1 ((list_len_28202) tl_28205))
    end

def string_of_listU_99 :=
  fun string_of_list_28206 (__28207) ->
    match __28207 with
    | nilUU_24  => "nil"
    | consUU_25 hd_28208 tl_28209 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_28208) " :: ")
        ((string_of_list_28206) tl_28209))
    end

def string_of_listL_98 :=
  fun string_of_list_28210 (__28211) ->
    match __28211 with
    | nilUL_22  => "nil"
    | consUL_23 hd_28212 tl_28213 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_28212) " :: ")
        ((string_of_list_28210) tl_28213))
    end

def main :=
  let test_28214 := ((mklistL_94) 2) in
  lazy(let _28215 := force(((cmsortL_92) test_28214)) in
       let len_28216 := ((list_lenL_96) _28215) in
       print ((string_of_int_31) len_28216))

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := mkconstr(consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := mkconstr(nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := mkconstr(consUL_23, [hd_292, m_303]);
              x_306 := mkconstr(consUL_23, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := mkconstr(consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := mkconstr(nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := mkconstr(nilUL_22, []);
          x_372 := mkconstr(consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_23, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(spwn_385%U) {
  x_387 := lte(spwn_385, 0);
  match(x_387){
    true_4() => {
      x_388 :=
        fn lam_389(zs_390%U, __391%L) {
          x_392 :=
            lazy {
              x_395 := msortU_344(zs_390);
              x_394 := send(__391, x_395);
              c_393 := x_394;
              x_396 := close[true](c_393);
              return x_396;
            };
          return x_392;
        };
      x_386 := x_388;
    }
    false_5() => {
      x_397 :=
        fn lam_398(zs_399%U, __400%L) {
          match[U](zs_399){
            nilUU_24() => {
              x_402 :=
                lazy {
                  x_405 := mkconstr(nilUU_24, []);
                  x_404 := send(__400, x_405);
                  c_403 := x_404;
                  x_406 := close[true](c_403);
                  return x_406;
                };
              x_401 := x_402;
            }
            consUU_25(hd_407, tl_408) => {
              match[U](tl_408){
                nilUU_24() => {
                  x_410 :=
                    lazy {
                      x_413 := mkconstr(nilUU_24, []);
                      x_414 := mkconstr(consUU_25, [hd_407, x_413]);
                      x_412 := send(__400, x_414);
                      c_411 := x_412;
                      x_415 := close[true](c_411);
                      return x_415;
                    };
                  x_409 := x_410;
                }
                consUU_25(hd_416, tl_417) => {
                  x_420 := mkconstr(consUU_25, [hd_416, tl_417]);
                  x_421 := mkconstr(consUU_25, [hd_407, x_420]);
                  x_419 := splitU_264(x_421);
                  match[L](x_419){
                    ex1UU_33(m_422, n_423) => {
                      x_424 :=
                        lazy {
                          x_427 :=
                            fn lam_428(_429%L) {
                              x_431 := sub(spwn_385, 1);
                              x_430 := cmsort_workerU_384(x_431, m_422, _429);
                              return x_430;
                            };
                          x_426 := fork(x_427);
                          r1_425 := x_426;
                          x_434 :=
                            fn lam_435(_436%L) {
                              x_438 := sub(spwn_385, 1);
                              x_437 := cmsort_workerU_384(x_438, n_423, _436);
                              return x_437;
                            };
                          x_433 := fork(x_434);
                          r2_432 := x_433;
                          x_440 := recv[U](r1_425);
                          _439 := x_440;
                          match[L](_439){
                            ex1UL_32(m_442, n_443) => {
                              x_445 := close[false](n_443);
                              __444 := x_445;
                              x_447 := recv[U](r2_432);
                              _446 := x_447;
                              match[L](_446){
                                ex1UL_32(m_449, n_450) => {
                                  x_452 := close[false](n_450);
                                  __451 := x_452;
                                  x_454 := mergeU_308(m_442, m_449);
                                  zs1_453 := x_454;
                                  x_456 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_453);
                                  zs1_455 := x_456;
                                  x_458 := send(__400, zs1_455);
                                  c_457 := x_458;
                                  x_460 := close[true](c_457);
                                  __459 := x_460;
                                  x_448 := tt_3;
                                }
                              }
                              x_441 := x_448;
                            }
                          }
                          return x_441;
                        };
                      x_418 := x_424;
                    }
                  }
                  x_409 := x_418;
                }
              }
              x_401 := x_409;
            }
          }
          return x_401;
        };
      x_386 := x_397;
    }
  }
  return x_386;
}

fn cmsort_workerL_461(spwn_462%U) {
  x_464 := lte(spwn_462, 0);
  match(x_464){
    true_4() => {
      x_465 :=
        fn lam_466(zs_467%U, __468%L) {
          x_469 :=
            lazy {
              x_472 := msortL_364(zs_467);
              x_471 := send(__468, x_472);
              c_470 := x_471;
              x_473 := close[true](c_470);
              return x_473;
            };
          return x_469;
        };
      x_463 := x_465;
    }
    false_5() => {
      x_474 :=
        fn lam_475(zs_476%U, __477%L) {
          match[L](zs_476){
            nilUL_22() => {
              x_479 :=
                lazy {
                  x_482 := mkconstr(nilUL_22, []);
                  x_481 := send(__477, x_482);
                  c_480 := x_481;
                  x_483 := close[true](c_480);
                  return x_483;
                };
              x_478 := x_479;
            }
            consUL_23(hd_484, tl_485) => {
              match[L](tl_485){
                nilUL_22() => {
                  x_487 :=
                    lazy {
                      x_490 := mkconstr(nilUL_22, []);
                      x_491 := mkconstr(consUL_23, [hd_484, x_490]);
                      x_489 := send(__477, x_491);
                      c_488 := x_489;
                      x_492 := close[true](c_488);
                      return x_492;
                    };
                  x_486 := x_487;
                }
                consUL_23(hd_493, tl_494) => {
                  x_497 := mkconstr(consUL_23, [hd_493, tl_494]);
                  x_498 := mkconstr(consUL_23, [hd_484, x_497]);
                  x_496 := splitL_286(x_498);
                  match[L](x_496){
                    ex1LL_30(m_499, n_500) => {
                      x_501 :=
                        lazy {
                          x_504 :=
                            fn lam_505(_506%L) {
                              x_508 := sub(spwn_462, 1);
                              x_507 := cmsort_workerL_461(x_508, m_499, _506);
                              return x_507;
                            };
                          x_503 := fork(x_504);
                          r1_502 := x_503;
                          x_511 :=
                            fn lam_512(_513%L) {
                              x_515 := sub(spwn_462, 1);
                              x_514 := cmsort_workerL_461(x_515, n_500, _513);
                              return x_514;
                            };
                          x_510 := fork(x_511);
                          r2_509 := x_510;
                          x_517 := recv[L](r1_502);
                          _516 := x_517;
                          match[L](_516){
                            ex1LL_30(m_519, n_520) => {
                              x_522 := close[false](n_520);
                              __521 := x_522;
                              x_524 := recv[L](r2_509);
                              _523 := x_524;
                              match[L](_523){
                                ex1LL_30(m_526, n_527) => {
                                  x_529 := close[false](n_527);
                                  __528 := x_529;
                                  x_531 := mergeL_326(m_519, m_526);
                                  zs1_530 := x_531;
                                  x_533 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_530);
                                  zs1_532 := x_533;
                                  x_535 := send(__477, zs1_532);
                                  c_534 := x_535;
                                  x_537 := close[true](c_534);
                                  __536 := x_537;
                                  x_525 := tt_3;
                                }
                              }
                              x_518 := x_525;
                            }
                          }
                          return x_518;
                        };
                      x_495 := x_501;
                    }
                  }
                  x_486 := x_495;
                }
              }
              x_478 := x_486;
            }
          }
          return x_478;
        };
      x_463 := x_474;
    }
  }
  return x_463;
}

fn cmsortU_538(zs_539%U) {
  x_540 :=
    lazy {
      x_543 :=
        fn lam_544(_545%L) {
          x_546 := cmsort_workerU_384(4, zs_539, _545);
          return x_546;
        };
      x_542 := fork(x_543);
      c_541 := x_542;
      x_548 := recv[U](c_541);
      _547 := x_548;
      match[L](_547){
        ex1UL_32(m_550, n_551) => {
          x_553 := close[false](n_551);
          __552 := x_553;
          x_549 := m_550;
        }
      }
      return x_549;
    };
  return x_540;
}

fn cmsortL_554(zs_555%U) {
  x_556 :=
    lazy {
      x_559 :=
        fn lam_560(_561%L) {
          x_562 := cmsort_workerL_461(4, zs_555, _561);
          return x_562;
        };
      x_558 := fork(x_559);
      c_557 := x_558;
      x_564 := recv[L](c_557);
      _563 := x_564;
      match[L](_563){
        ex1LL_30(m_566, n_567) => {
          x_569 := close[false](n_567);
          __568 := x_569;
          x_565 := m_566;
        }
      }
      return x_565;
    };
  return x_556;
}

fn mklistU_570(n_571%U) {
  x_573 := lte(n_571, 0);
  match(x_573){
    true_4() => {
      x_574 := mkconstr(nilUU_24, []);
      x_572 := x_574;
    }
    false_5() => {
      x_576 := sub(n_571, 1);
      x_575 := mklistU_570(x_576);
      x_577 := mkconstr(consUU_25, [n_571, x_575]);
      x_572 := x_577;
    }
  }
  return x_572;
}

fn mklistL_578(n_579%U) {
  x_581 := lte(n_579, 0);
  match(x_581){
    true_4() => {
      x_582 := mkconstr(nilUL_22, []);
      x_580 := x_582;
    }
    false_5() => {
      x_584 := sub(n_579, 1);
      x_583 := mklistL_578(x_584);
      x_585 := mkconstr(consUL_23, [n_579, x_583]);
      x_580 := x_585;
    }
  }
  return x_580;
}

fn list_lenU_586(__587%U) {
  match[U](__587){
    nilUU_24() => {
      x_588 := 0;
    }
    consUU_25(hd_589, tl_590) => {
      x_592 := list_lenU_586(tl_590);
      x_591 := add(1, x_592);
      x_588 := x_591;
    }
  }
  return x_588;
}

fn list_lenL_593(__594%U) {
  match[L](__594){
    nilUL_22() => {
      x_595 := 0;
    }
    consUL_23(hd_596, tl_597) => {
      x_599 := list_lenL_593(tl_597);
      x_598 := add(1, x_599);
      x_595 := x_598;
    }
  }
  return x_595;
}

fn string_of_listU_600(__601%U) {
  match[U](__601){
    nilUU_24() => {
      x_603 := str("nil");
      x_602 := x_603;
    }
    consUU_25(hd_604, tl_605) => {
      x_608 := string_of_int_236(hd_604);
      x_609 := str(" :: ");
      x_607 := cat(x_608, x_609);
      x_610 := string_of_listU_600(tl_605);
      x_606 := cat(x_607, x_610);
      x_602 := x_606;
    }
  }
  return x_602;
}

fn string_of_listL_611(__612%U) {
  match[L](__612){
    nilUL_22() => {
      x_614 := str("nil");
      x_613 := x_614;
    }
    consUL_23(hd_615, tl_616) => {
      x_619 := string_of_int_236(hd_615);
      x_620 := str(" :: ");
      x_618 := cat(x_619, x_620);
      x_621 := string_of_listL_611(tl_616);
      x_617 := cat(x_618, x_621);
      x_613 := x_617;
    }
  }
  return x_613;
}

main := {
  x_623 := mklistL_578(2);
  test_622 := x_623;
  x_624 :=
    lazy {
      x_627 := cmsortL_554(test_622);
      x_626 := force(x_627);
      _625 := x_626;
      x_629 := list_lenL_593(_625);
      len_628 := x_629;
      x_631 := string_of_int_236(len_628);
      x_630 := print(x_631);
      return x_630;
    };
  return x_624;
};

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := reconstr(__287, nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := reconstr(tl_293, nilUL_22, []);
          x_296 := reconstr(__287, consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_23, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_23, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
      free(__327);
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := reconstr(__327, consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := reconstr(__365, nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := reconstr(tl_369, nilUL_22, []);
          x_372 := reconstr(__365, consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_23, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(spwn_385%U) {
  x_387 := lte(spwn_385, 0);
  match(x_387){
    true_4() => {
      x_388 :=
        fn lam_389(zs_390%U, __391%L) {
          x_392 :=
            lazy {
              x_395 := msortU_344(zs_390);
              x_394 := send(__391, x_395);
              c_393 := x_394;
              x_396 := close[true](c_393);
              return x_396;
            };
          return x_392;
        };
      x_386 := x_388;
    }
    false_5() => {
      x_397 :=
        fn lam_398(zs_399%U, __400%L) {
          match[U](zs_399){
            nilUU_24() => {
              x_402 :=
                lazy {
                  x_405 := mkconstr(nilUU_24, []);
                  x_404 := send(__400, x_405);
                  c_403 := x_404;
                  x_406 := close[true](c_403);
                  return x_406;
                };
              x_401 := x_402;
            }
            consUU_25(hd_407, tl_408) => {
              match[U](tl_408){
                nilUU_24() => {
                  x_410 :=
                    lazy {
                      x_413 := mkconstr(nilUU_24, []);
                      x_414 := mkconstr(consUU_25, [hd_407, x_413]);
                      x_412 := send(__400, x_414);
                      c_411 := x_412;
                      x_415 := close[true](c_411);
                      return x_415;
                    };
                  x_409 := x_410;
                }
                consUU_25(hd_416, tl_417) => {
                  x_420 := mkconstr(consUU_25, [hd_416, tl_417]);
                  x_421 := mkconstr(consUU_25, [hd_407, x_420]);
                  x_419 := splitU_264(x_421);
                  match[L](x_419){
                    ex1UU_33(m_422, n_423) => {
                      x_424 :=
                        lazy {
                          x_427 :=
                            fn lam_428(_429%L) {
                              x_431 := sub(spwn_385, 1);
                              x_430 := cmsort_workerU_384(x_431, m_422, _429);
                              return x_430;
                            };
                          x_426 := fork(x_427);
                          r1_425 := x_426;
                          x_434 :=
                            fn lam_435(_436%L) {
                              x_438 := sub(spwn_385, 1);
                              x_437 := cmsort_workerU_384(x_438, n_423, _436);
                              return x_437;
                            };
                          x_433 := fork(x_434);
                          r2_432 := x_433;
                          x_440 := recv[U](r1_425);
                          _439 := x_440;
                          match[L](_439){
                            ex1UL_32(m_442, n_443) => {
                              x_445 := close[false](n_443);
                              __444 := x_445;
                              x_447 := recv[U](r2_432);
                              _446 := x_447;
                              match[L](_446){
                                ex1UL_32(m_449, n_450) => {
                                  x_452 := close[false](n_450);
                                  __451 := x_452;
                                  x_454 := mergeU_308(m_442, m_449);
                                  zs1_453 := x_454;
                                  x_456 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_453);
                                  zs1_455 := x_456;
                                  x_458 := send(__400, zs1_455);
                                  c_457 := x_458;
                                  x_460 := close[true](c_457);
                                  __459 := x_460;
                                  x_448 := tt_3;
                                  free(_446);
                                }
                              }
                              x_441 := x_448;
                              free(_439);
                            }
                          }
                          return x_441;
                        };
                      x_418 := x_424;
                      free(x_419);
                    }
                  }
                  x_409 := x_418;
                }
              }
              x_401 := x_409;
            }
          }
          return x_401;
        };
      x_386 := x_397;
    }
  }
  return x_386;
}

fn cmsort_workerL_461(spwn_462%U) {
  x_464 := lte(spwn_462, 0);
  match(x_464){
    true_4() => {
      x_465 :=
        fn lam_466(zs_467%U, __468%L) {
          x_469 :=
            lazy {
              x_472 := msortL_364(zs_467);
              x_471 := send(__468, x_472);
              c_470 := x_471;
              x_473 := close[true](c_470);
              return x_473;
            };
          return x_469;
        };
      x_463 := x_465;
    }
    false_5() => {
      x_474 :=
        fn lam_475(zs_476%U, __477%L) {
          match[L](zs_476){
            nilUL_22() => {
              x_479 :=
                lazy {
                  x_482 := reconstr(zs_476, nilUL_22, []);
                  x_481 := send(__477, x_482);
                  c_480 := x_481;
                  x_483 := close[true](c_480);
                  return x_483;
                };
              x_478 := x_479;
            }
            consUL_23(hd_484, tl_485) => {
              match[L](tl_485){
                nilUL_22() => {
                  x_487 :=
                    lazy {
                      x_490 := reconstr(tl_485, nilUL_22, []);
                      x_491 := reconstr(zs_476, consUL_23, [hd_484, x_490]);
                      x_489 := send(__477, x_491);
                      c_488 := x_489;
                      x_492 := close[true](c_488);
                      return x_492;
                    };
                  x_486 := x_487;
                }
                consUL_23(hd_493, tl_494) => {
                  x_497 := reconstr(tl_485, consUL_23, [hd_493, tl_494]);
                  x_498 := reconstr(zs_476, consUL_23, [hd_484, x_497]);
                  x_496 := splitL_286(x_498);
                  match[L](x_496){
                    ex1LL_30(m_499, n_500) => {
                      x_501 :=
                        lazy {
                          x_504 :=
                            fn lam_505(_506%L) {
                              x_508 := sub(spwn_462, 1);
                              x_507 := cmsort_workerL_461(x_508, m_499, _506);
                              return x_507;
                            };
                          x_503 := fork(x_504);
                          r1_502 := x_503;
                          x_511 :=
                            fn lam_512(_513%L) {
                              x_515 := sub(spwn_462, 1);
                              x_514 := cmsort_workerL_461(x_515, n_500, _513);
                              return x_514;
                            };
                          x_510 := fork(x_511);
                          r2_509 := x_510;
                          x_517 := recv[L](r1_502);
                          _516 := x_517;
                          match[L](_516){
                            ex1LL_30(m_519, n_520) => {
                              x_522 := close[false](n_520);
                              __521 := x_522;
                              x_524 := recv[L](r2_509);
                              _523 := x_524;
                              match[L](_523){
                                ex1LL_30(m_526, n_527) => {
                                  x_529 := close[false](n_527);
                                  __528 := x_529;
                                  x_531 := mergeL_326(m_519, m_526);
                                  zs1_530 := x_531;
                                  x_533 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_530);
                                  zs1_532 := x_533;
                                  x_535 := send(__477, zs1_532);
                                  c_534 := x_535;
                                  x_537 := close[true](c_534);
                                  __536 := x_537;
                                  x_525 := tt_3;
                                  free(_523);
                                }
                              }
                              x_518 := x_525;
                              free(_516);
                            }
                          }
                          return x_518;
                        };
                      x_495 := x_501;
                      free(x_496);
                    }
                  }
                  x_486 := x_495;
                }
              }
              x_478 := x_486;
            }
          }
          return x_478;
        };
      x_463 := x_474;
    }
  }
  return x_463;
}

fn cmsortU_538(zs_539%U) {
  x_540 :=
    lazy {
      x_543 :=
        fn lam_544(_545%L) {
          x_546 := cmsort_workerU_384(4, zs_539, _545);
          return x_546;
        };
      x_542 := fork(x_543);
      c_541 := x_542;
      x_548 := recv[U](c_541);
      _547 := x_548;
      match[L](_547){
        ex1UL_32(m_550, n_551) => {
          x_553 := close[false](n_551);
          __552 := x_553;
          x_549 := m_550;
          free(_547);
        }
      }
      return x_549;
    };
  return x_540;
}

fn cmsortL_554(zs_555%U) {
  x_556 :=
    lazy {
      x_559 :=
        fn lam_560(_561%L) {
          x_562 := cmsort_workerL_461(4, zs_555, _561);
          return x_562;
        };
      x_558 := fork(x_559);
      c_557 := x_558;
      x_564 := recv[L](c_557);
      _563 := x_564;
      match[L](_563){
        ex1LL_30(m_566, n_567) => {
          x_569 := close[false](n_567);
          __568 := x_569;
          x_565 := m_566;
          free(_563);
        }
      }
      return x_565;
    };
  return x_556;
}

fn mklistU_570(n_571%U) {
  x_573 := lte(n_571, 0);
  match(x_573){
    true_4() => {
      x_574 := mkconstr(nilUU_24, []);
      x_572 := x_574;
    }
    false_5() => {
      x_576 := sub(n_571, 1);
      x_575 := mklistU_570(x_576);
      x_577 := mkconstr(consUU_25, [n_571, x_575]);
      x_572 := x_577;
    }
  }
  return x_572;
}

fn mklistL_578(n_579%U) {
  x_581 := lte(n_579, 0);
  match(x_581){
    true_4() => {
      x_582 := mkconstr(nilUL_22, []);
      x_580 := x_582;
    }
    false_5() => {
      x_584 := sub(n_579, 1);
      x_583 := mklistL_578(x_584);
      x_585 := mkconstr(consUL_23, [n_579, x_583]);
      x_580 := x_585;
    }
  }
  return x_580;
}

fn list_lenU_586(__587%U) {
  match[U](__587){
    nilUU_24() => {
      x_588 := 0;
    }
    consUU_25(hd_589, tl_590) => {
      x_592 := list_lenU_586(tl_590);
      x_591 := add(1, x_592);
      x_588 := x_591;
    }
  }
  return x_588;
}

fn list_lenL_593(__594%U) {
  match[L](__594){
    nilUL_22() => {
      x_595 := 0;
      free(__594);
    }
    consUL_23(hd_596, tl_597) => {
      x_599 := list_lenL_593(tl_597);
      x_598 := add(1, x_599);
      x_595 := x_598;
      free(__594);
    }
  }
  return x_595;
}

fn string_of_listU_600(__601%U) {
  match[U](__601){
    nilUU_24() => {
      x_603 := str("nil");
      x_602 := x_603;
    }
    consUU_25(hd_604, tl_605) => {
      x_608 := string_of_int_236(hd_604);
      x_609 := str(" :: ");
      x_607 := cat(x_608, x_609);
      x_610 := string_of_listU_600(tl_605);
      x_606 := cat(x_607, x_610);
      x_602 := x_606;
    }
  }
  return x_602;
}

fn string_of_listL_611(__612%U) {
  match[L](__612){
    nilUL_22() => {
      x_614 := str("nil");
      x_613 := x_614;
      free(__612);
    }
    consUL_23(hd_615, tl_616) => {
      x_619 := string_of_int_236(hd_615);
      x_620 := str(" :: ");
      x_618 := cat(x_619, x_620);
      x_621 := string_of_listL_611(tl_616);
      x_617 := cat(x_618, x_621);
      x_613 := x_617;
      free(__612);
    }
  }
  return x_613;
}

main := {
  x_623 := mklistL_578(2);
  test_622 := x_623;
  x_624 :=
    lazy {
      x_627 := cmsortL_554(test_622);
      x_626 := force(x_627);
      _625 := x_626;
      x_629 := list_lenL_593(_625);
      len_628 := x_629;
      x_631 := string_of_int_236(len_628);
      x_630 := print(x_631);
      return x_630;
    };
  return x_624;
};

-----------------------------------------

fn fn0_idU_632(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_633(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_634 := fn0_idU_632(A_2, m_3);
  return x_634;
}

fn fn0_idL_635(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_636(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_637 := fn0_idL_635(A_5, m_6);
  return x_637;
}

fn fn0_rwlUU_638(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_639(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_640 := fn0_rwlUU_638(A_8, m_9, n_10, B_11, __12, __13);
  return x_640;
}

fn fn0_rwlUL_641(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_642(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_643 := fn0_rwlUL_641(A_15, m_16, n_17, B_18, __19, __20);
  return x_643;
}

fn fn0_rwlLU_644(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_645(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_646 := fn0_rwlLU_644(A_22, m_23, n_24, B_25, __26, __27);
  return x_646;
}

fn fn0_rwlLL_647(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_648(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_649 := fn0_rwlLL_647(A_29, m_30, n_31, B_32, __33, __34);
  return x_649;
}

fn fn0_rwrUU_650(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_651(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_652 := fn0_rwrUU_650(A_36, m_37, n_38, B_39, __40, __41);
  return x_652;
}

fn fn0_rwrUL_653(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_654(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_655 := fn0_rwrUL_653(A_43, m_44, n_45, B_46, __47, __48);
  return x_655;
}

fn fn0_rwrLU_656(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_657(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_658 := fn0_rwrLU_656(A_50, m_51, n_52, B_53, __54, __55);
  return x_658;
}

fn fn0_rwrLL_659(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_660(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_661 := fn0_rwrLL_659(A_57, m_58, n_59, B_60, __61, __62);
  return x_661;
}

fn fn0_sing_elimUU_662(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_663(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_664 := fn0_sing_elimUU_662(A_64, x_65, __66);
  return x_664;
}

fn fn0_sing_elimUL_665(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_666(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_667 := fn0_sing_elimUL_665(A_68, x_69, __70);
  return x_667;
}

fn fn0_sing_elimLU_668(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_669(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_670 := fn0_sing_elimLU_668(A_72, x_73, __74);
  return x_670;
}

fn fn0_sing_elimLL_671(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_672(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_673 := fn0_sing_elimLL_671(A_76, x_77, __78);
  return x_673;
}

fn fn0_not_674(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_675(env) {
  __80 := env[1];
  x_676 := fn0_not_674(__80);
  return x_676;
}

fn fn0_and_677(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_678(env) {
  __83 := env[1];
  __84 := env[2];
  x_679 := fn0_and_677(__83, __84);
  return x_679;
}

fn fn0_or_680(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_681(env) {
  __88 := env[1];
  __89 := env[2];
  x_682 := fn0_or_680(__88, __89);
  return x_682;
}

fn fn0_xor_683(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_684(env) {
  __93 := env[1];
  __94 := env[2];
  x_685 := fn0_xor_683(__93, __94);
  return x_685;
}

fn fn0_lte_686(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_686(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_687(env) {
  __99 := env[1];
  __100 := env[2];
  x_688 := fn0_lte_686(__99, __100);
  return x_688;
}

fn fn0_lt_689(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_686(x_110, y_108);
  return x_109;
}

fn fn1_lt_690(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_691 := fn0_lt_689(x_107, y_108);
  return x_691;
}

fn fn0_pred_692(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_693(env) {
  __112 := env[1];
  x_694 := fn0_pred_692(__112);
  return x_694;
}

fn fn0_add_695(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_695(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_696(env) {
  __117 := env[1];
  __118 := env[2];
  x_697 := fn0_add_695(__117, __118);
  return x_697;
}

fn fn0_sub_698(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_692(__124);
      x_128 := fn0_sub_698(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_699(env) {
  __124 := env[1];
  __125 := env[2];
  x_700 := fn0_sub_698(__124, __125);
  return x_700;
}

fn fn0_mul_701(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_701(n_135, __132);
      x_136 := fn0_add_695(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_702(env) {
  __131 := env[1];
  __132 := env[2];
  x_703 := fn0_mul_701(__131, __132);
  return x_703;
}

fn fn0_div_704(x_139, y_140) {
  x_142 := fn0_lt_689(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_706, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_710, loop_144, x_139);
      appc(x_711, x_710, y_140);
      move1(x_156, x_711);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_705(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_713 := fn0_div_704(x_139, y_140);
  return x_713;
}

fn fn0_rem_714(x_158, y_159) {
  x_162 := fn0_div_704(x_158, y_159);
  x_161 := fn0_mul_701(x_162, y_159);
  x_160 := fn0_sub_698(x_158, x_161);
  return x_160;
}

fn fn1_rem_715(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_716 := fn0_rem_714(x_158, y_159);
  return x_716;
}

fn fn0_free_listUU_717(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_719, f_165, hd_168);
      move1(x_171, x_719);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_717(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_718(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_721 := fn0_free_listUU_717(A_164, f_165, __166);
  return x_721;
}

fn fn0_free_listUL_722(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_724, f_175, hd_178);
      move1(x_181, x_724);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_722(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_723(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_726 := fn0_free_listUL_722(A_174, f_175, __176);
  return x_726;
}

fn fn0_free_listLL_727(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_729, f_185, hd_188);
      move1(x_191, x_729);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_727(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_728(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_731 := fn0_free_listLL_727(A_184, f_185, __186);
  return x_731;
}

fn fn0_pow_732(x_194, y_195) {
  mkclo1(x_197, fn1_loop_734, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_738, loop_196, 1);
  appc(x_739, x_738, y_195);
  move1(x_206, x_739);
  return x_206;
}

fn fn1_pow_733(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_741 := fn0_pow_732(x_194, y_195);
  return x_741;
}

fn fn0_powm_742(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_744, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_748, loop_211, 1);
  appc(x_749, x_748, y_209);
  move1(x_222, x_749);
  return x_222;
}

fn fn1_powm_743(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_751 := fn0_powm_742(x_208, y_209, m_210);
  return x_751;
}

fn fn0_ord_752(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_753(env) {
  c_224 := env[1];
  x_754 := fn0_ord_752(c_224);
  return x_754;
}

fn fn0_chr_755(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_756(env) {
  i_227 := env[1];
  x_757 := fn0_chr_755(i_227);
  return x_757;
}

fn fn0_str_758(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_759(env) {
  c_230 := env[1];
  x_760 := fn0_str_758(c_230);
  return x_760;
}

fn fn0_strlen_761(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_762(env) {
  s_234 := env[1];
  x_763 := fn0_strlen_761(s_234);
  return x_763;
}

fn fn0_string_of_int_764(i_237) {
  mkclo1(x_239, fn1_aux_766, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lt(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_769, aux_238, i_237);
      move1(x_259, x_769);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_771, aux_238, x_263);
      move1(x_262, x_771);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_765(env) {
  i_237 := env[1];
  x_773 := fn0_string_of_int_764(i_237);
  return x_773;
}

fn fn0_splitU_774(__265) {
  switch(ctagof(__265)){
    nilUU_24 => {
      mkbox(x_267, nilUU_24, 0);
      mkbox(x_268, nilUU_24, 0);
      mkbox(x_269, ex1UU_33, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_25 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_24 => {
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, consUU_25, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_24, 0);
          mkbox(x_276, ex1UU_33, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_25 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_774(tl_278);
          switch(ctagof(x_280)){
            ex1UU_33 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_25);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_25, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_33, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_775(env) {
  __265 := env[1];
  x_776 := fn0_splitU_774(__265);
  return x_776;
}

fn fn0_splitL_777(__287) {
  switch(ctagof(__287)){
    nilUL_22 => {
      rebox(x_289, __287, nilUL_22);
      mkbox(x_290, nilUL_22, 0);
      mkbox(x_291, ex1LL_30, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_23 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_22 => {
          rebox(x_295, tl_293, nilUL_22);
          rebox(x_296, __287, consUL_23);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_22, 0);
          mkbox(x_298, ex1LL_30, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_23 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_777(tl_300);
          switch(ctagof(x_302)){
            ex1LL_30 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_23);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_23);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_30);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_778(env) {
  __287 := env[1];
  x_779 := fn0_splitL_777(__287);
  return x_779;
}

fn fn0_mergeU_780(__309, __310) {
  switch(ctagof(__309)){
    nilUU_24 => {
      move1(x_311, __310);
      break;
    }
    consUU_25 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_24 => {
          mkbox(x_315, consUU_25, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_25 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_25, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_780(tl_313, x_321);
              mkbox(x_322, consUU_25, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_25, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_780(x_324, tl_317);
              mkbox(x_325, consUU_25, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_781(env) {
  __309 := env[1];
  __310 := env[2];
  x_782 := fn0_mergeU_780(__309, __310);
  return x_782;
}

fn fn0_mergeL_783(__327, __328) {
  switch(ctagof(__327)){
    nilUL_22 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_23 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_22 => {
          rebox(x_333, __327, consUL_23);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_23 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_23);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_783(tl_331, x_339);
              rebox(x_340, __327, consUL_23);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_23);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_783(x_342, tl_335);
              rebox(x_343, __327, consUL_23);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_784(env) {
  __327 := env[1];
  __328 := env[2];
  x_785 := fn0_mergeL_783(__327, __328);
  return x_785;
}

fn fn0_msortU_786(__345) {
  switch(ctagof(__345)){
    nilUU_24 => {
      mkbox(x_347, nilUU_24, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_25 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_24 => {
          mkbox(x_351, nilUU_24, 0);
          mkbox(x_352, consUU_25, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_25 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_25, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_25, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_774(x_358);
          switch(ctagof(x_356)){
            ex1UU_33 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_786(m_359);
              x_363 := fn0_msortU_786(n_360);
              x_361 := fn0_mergeU_780(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_787(env) {
  __345 := env[1];
  x_788 := fn0_msortU_786(__345);
  return x_788;
}

fn fn0_msortL_789(__365) {
  switch(ctagof(__365)){
    nilUL_22 => {
      rebox(x_367, __365, nilUL_22);
      move1(x_366, x_367);
      break;
    }
    consUL_23 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_22 => {
          rebox(x_371, tl_369, nilUL_22);
          rebox(x_372, __365, consUL_23);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_23 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_23);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_23);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_777(x_378);
          switch(ctagof(x_376)){
            ex1LL_30 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_789(m_379);
              x_383 := fn0_msortL_789(n_380);
              x_381 := fn0_mergeL_783(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_790(env) {
  __365 := env[1];
  x_791 := fn0_msortL_789(__365);
  return x_791;
}

fn fn0_cmsort_workerU_792(spwn_385) {
  lte(x_387, spwn_385, 0);
  switch(x_387){
    true_4 => {
      mkclo1(x_388, fn1_lam_794, fvc:=1, argc:=2);
      setclo(x_388, msortU_344, 1);
      move1(x_386, x_388);
      break;
    }
    false_5 => {
      mkclo1(x_397, fn1_lam_796, fvc:=5, argc:=2);
      setclo(x_397, rwlUU_7, 1);
      setclo(x_397, splitU_264, 2);
      setclo(x_397, mergeU_308, 3);
      setclo(x_397, cmsort_workerU_384, 4);
      setclo(x_397, spwn_385, 5);
      move1(x_386, x_397);
      break;
    }
  }
  return x_386;
}

fn fn1_cmsort_workerU_793(env) {
  spwn_385 := env[1];
  x_810 := fn0_cmsort_workerU_792(spwn_385);
  return x_810;
}

fn fn0_cmsort_workerL_811(spwn_462) {
  lte(x_464, spwn_462, 0);
  switch(x_464){
    true_4 => {
      mkclo1(x_465, fn1_lam_813, fvc:=1, argc:=2);
      setclo(x_465, msortL_364, 1);
      move1(x_463, x_465);
      break;
    }
    false_5 => {
      mkclo1(x_474, fn1_lam_815, fvc:=5, argc:=2);
      setclo(x_474, rwlLL_28, 1);
      setclo(x_474, splitL_286, 2);
      setclo(x_474, mergeL_326, 3);
      setclo(x_474, cmsort_workerL_461, 4);
      setclo(x_474, spwn_462, 5);
      move1(x_463, x_474);
      break;
    }
  }
  return x_463;
}

fn fn1_cmsort_workerL_812(env) {
  spwn_462 := env[1];
  x_829 := fn0_cmsort_workerL_811(spwn_462);
  return x_829;
}

fn fn0_cmsortU_830(zs_539) {
  lazy(x_540, lazy__832, 2);
  setlazy(x_540, cmsort_workerU_384, 0);
  setlazy(x_540, zs_539, 1);
  return x_540;
}

fn fn1_cmsortU_831(env) {
  zs_539 := env[1];
  x_838 := fn0_cmsortU_830(zs_539);
  return x_838;
}

fn fn0_cmsortL_839(zs_555) {
  lazy(x_556, lazy__841, 2);
  setlazy(x_556, cmsort_workerL_461, 0);
  setlazy(x_556, zs_555, 1);
  return x_556;
}

fn fn1_cmsortL_840(env) {
  zs_555 := env[1];
  x_847 := fn0_cmsortL_839(zs_555);
  return x_847;
}

fn fn0_mklistU_848(n_571) {
  lte(x_573, n_571, 0);
  switch(x_573){
    true_4 => {
      mkbox(x_574, nilUU_24, 0);
      move1(x_572, x_574);
      break;
    }
    false_5 => {
      sub(x_576, n_571, 1);
      x_575 := fn0_mklistU_848(x_576);
      mkbox(x_577, consUU_25, 2);
      setbox(x_577, n_571, 0);
      setbox(x_577, x_575, 1);
      move1(x_572, x_577);
      break;
    }
  }
  return x_572;
}

fn fn1_mklistU_849(env) {
  n_571 := env[1];
  x_850 := fn0_mklistU_848(n_571);
  return x_850;
}

fn fn0_mklistL_851(n_579) {
  lte(x_581, n_579, 0);
  switch(x_581){
    true_4 => {
      mkbox(x_582, nilUL_22, 0);
      move1(x_580, x_582);
      break;
    }
    false_5 => {
      sub(x_584, n_579, 1);
      x_583 := fn0_mklistL_851(x_584);
      mkbox(x_585, consUL_23, 2);
      setbox(x_585, n_579, 0);
      setbox(x_585, x_583, 1);
      move1(x_580, x_585);
      break;
    }
  }
  return x_580;
}

fn fn1_mklistL_852(env) {
  n_579 := env[1];
  x_853 := fn0_mklistL_851(n_579);
  return x_853;
}

fn fn0_list_lenU_854(__587) {
  switch(ctagof(__587)){
    nilUU_24 => {
      move1(x_588, 0);
      break;
    }
    consUU_25 => {
      getbox(hd_589, __587, 0);
      getbox(tl_590, __587, 1);
      x_592 := fn0_list_lenU_854(tl_590);
      add(x_591, 1, x_592);
      move1(x_588, x_591);
      break;
    }
  }
  return x_588;
}

fn fn1_list_lenU_855(env) {
  __587 := env[1];
  x_856 := fn0_list_lenU_854(__587);
  return x_856;
}

fn fn0_list_lenL_857(__594) {
  switch(ctagof(__594)){
    nilUL_22 => {
      move1(x_595, 0);
      free(__594);
      break;
    }
    consUL_23 => {
      getbox(hd_596, __594, 0);
      getbox(tl_597, __594, 1);
      x_599 := fn0_list_lenL_857(tl_597);
      add(x_598, 1, x_599);
      move1(x_595, x_598);
      free(__594);
      break;
    }
  }
  return x_595;
}

fn fn1_list_lenL_858(env) {
  __594 := env[1];
  x_859 := fn0_list_lenL_857(__594);
  return x_859;
}

fn fn0_string_of_listU_860(__601) {
  switch(ctagof(__601)){
    nilUU_24 => {
      str(x_603, "nil")
      move1(x_602, x_603);
      break;
    }
    consUU_25 => {
      getbox(hd_604, __601, 0);
      getbox(tl_605, __601, 1);
      x_608 := fn0_string_of_int_764(hd_604);
      str(x_609, " :: ")
      cat(x_607, x_608, x_609);
      x_610 := fn0_string_of_listU_860(tl_605);
      cat(x_606, x_607, x_610);
      move1(x_602, x_606);
      break;
    }
  }
  return x_602;
}

fn fn1_string_of_listU_861(env) {
  __601 := env[1];
  x_862 := fn0_string_of_listU_860(__601);
  return x_862;
}

fn fn0_string_of_listL_863(__612) {
  switch(ctagof(__612)){
    nilUL_22 => {
      str(x_614, "nil")
      move1(x_613, x_614);
      free(__612);
      break;
    }
    consUL_23 => {
      getbox(hd_615, __612, 0);
      getbox(tl_616, __612, 1);
      x_619 := fn0_string_of_int_764(hd_615);
      str(x_620, " :: ")
      cat(x_618, x_619, x_620);
      x_621 := fn0_string_of_listL_863(tl_616);
      cat(x_617, x_618, x_621);
      move1(x_613, x_617);
      free(__612);
      break;
    }
  }
  return x_613;
}

fn fn1_string_of_listL_864(env) {
  __612 := env[1];
  x_865 := fn0_string_of_listL_863(__612);
  return x_865;
}

fn lazy__867(env) {
  string_of_int_236 := env[0];
  cmsortL_554 := env[1];
  list_lenL_593 := env[2];
  test_622 := env[3];
  x_627 := fn0_cmsortL_839(test_622);
  force(x_626, x_627);
  free(x_627);
  move1(_625, x_626);
  x_629 := fn0_list_lenL_857(_625);
  move1(len_628, x_629);
  x_631 := fn0_string_of_int_764(len_628);
  print(x_630, x_631);
  return x_630;
}

fn lazy__841(env) {
  cmsort_workerL_461 := env[0];
  zs_555 := env[1];
  mkclo1(x_559, fn1_lam_842, fvc:=2, argc:=1);
  setclo(x_559, cmsort_workerL_461, 1);
  setclo(x_559, zs_555, 2);
  fork(x_558, x_559);
  move1(c_557, x_558);
  recv1(x_564, c_557);
  move1(_563, x_564);
  switch(ctagof(_563)){
    ex1LL_30 => {
      getbox(m_566, _563, 0);
      getbox(n_567, _563, 1);
      close1(x_569, n_567);
      move1(__568, x_569);
      move1(x_565, m_566);
      free(_563);
      break;
    }
  }
  return x_565;
}

fn fn1_lam_842(env) {
  lam_560 := env[0];
  cmsort_workerL_461 := env[1];
  zs_555 := env[2];
  _561 := env[3];
  appc(x_843, cmsort_workerL_461, 4);
  appc(x_844, x_843, zs_555);
  appc(x_845, x_844, _561);
  free(x_844);
  move1(x_562, x_845);
  return x_562;
}

fn lazy__832(env) {
  cmsort_workerU_384 := env[0];
  zs_539 := env[1];
  mkclo1(x_543, fn1_lam_833, fvc:=2, argc:=1);
  setclo(x_543, cmsort_workerU_384, 1);
  setclo(x_543, zs_539, 2);
  fork(x_542, x_543);
  move1(c_541, x_542);
  recv0(x_548, c_541);
  move1(_547, x_548);
  switch(ctagof(_547)){
    ex1UL_32 => {
      getbox(m_550, _547, 0);
      getbox(n_551, _547, 1);
      close1(x_553, n_551);
      move1(__552, x_553);
      move1(x_549, m_550);
      free(_547);
      break;
    }
  }
  return x_549;
}

fn fn1_lam_833(env) {
  lam_544 := env[0];
  cmsort_workerU_384 := env[1];
  zs_539 := env[2];
  _545 := env[3];
  appc(x_834, cmsort_workerU_384, 4);
  appc(x_835, x_834, zs_539);
  appc(x_836, x_835, _545);
  free(x_835);
  move1(x_546, x_836);
  return x_546;
}

fn fn1_lam_815(env) {
  lam_475 := env[0];
  rwlLL_28 := env[1];
  splitL_286 := env[2];
  mergeL_326 := env[3];
  cmsort_workerL_461 := env[4];
  spwn_462 := env[5];
  zs_476 := env[6];
  __477 := env[7];
  switch(ctagof(zs_476)){
    nilUL_22 => {
      lazy(x_479, lazy__816, 2);
      setlazy(x_479, zs_476, 0);
      setlazy(x_479, __477, 1);
      move1(x_478, x_479);
      break;
    }
    consUL_23 => {
      getbox(hd_484, zs_476, 0);
      getbox(tl_485, zs_476, 1);
      switch(ctagof(tl_485)){
        nilUL_22 => {
          lazy(x_487, lazy__817, 4);
          setlazy(x_487, zs_476, 0);
          setlazy(x_487, __477, 1);
          setlazy(x_487, hd_484, 2);
          setlazy(x_487, tl_485, 3);
          move1(x_486, x_487);
          break;
        }
        consUL_23 => {
          getbox(hd_493, tl_485, 0);
          getbox(tl_494, tl_485, 1);
          rebox(x_497, tl_485, consUL_23);
          setbox(x_497, hd_493, 0);
          setbox(x_497, tl_494, 1);
          rebox(x_498, zs_476, consUL_23);
          setbox(x_498, hd_484, 0);
          setbox(x_498, x_497, 1);
          x_496 := fn0_splitL_777(x_498);
          switch(ctagof(x_496)){
            ex1LL_30 => {
              getbox(m_499, x_496, 0);
              getbox(n_500, x_496, 1);
              lazy(x_501, lazy__818, 7);
              setlazy(x_501, rwlLL_28, 0);
              setlazy(x_501, mergeL_326, 1);
              setlazy(x_501, cmsort_workerL_461, 2);
              setlazy(x_501, spwn_462, 3);
              setlazy(x_501, __477, 4);
              setlazy(x_501, m_499, 5);
              setlazy(x_501, n_500, 6);
              move1(x_495, x_501);
              free(x_496);
              break;
            }
          }
          move1(x_486, x_495);
          break;
        }
      }
      move1(x_478, x_486);
      break;
    }
  }
  return x_478;
}

fn lazy__818(env) {
  rwlLL_28 := env[0];
  mergeL_326 := env[1];
  cmsort_workerL_461 := env[2];
  spwn_462 := env[3];
  __477 := env[4];
  m_499 := env[5];
  n_500 := env[6];
  mkclo1(x_504, fn1_lam_819, fvc:=3, argc:=1);
  setclo(x_504, cmsort_workerL_461, 1);
  setclo(x_504, spwn_462, 2);
  setclo(x_504, m_499, 3);
  fork(x_503, x_504);
  move1(r1_502, x_503);
  mkclo1(x_511, fn1_lam_824, fvc:=3, argc:=1);
  setclo(x_511, cmsort_workerL_461, 1);
  setclo(x_511, spwn_462, 2);
  setclo(x_511, n_500, 3);
  fork(x_510, x_511);
  move1(r2_509, x_510);
  recv1(x_517, r1_502);
  move1(_516, x_517);
  switch(ctagof(_516)){
    ex1LL_30 => {
      getbox(m_519, _516, 0);
      getbox(n_520, _516, 1);
      close1(x_522, n_520);
      move1(__521, x_522);
      recv1(x_524, r2_509);
      move1(_523, x_524);
      switch(ctagof(_523)){
        ex1LL_30 => {
          getbox(m_526, _523, 0);
          getbox(n_527, _523, 1);
          close1(x_529, n_527);
          move1(__528, x_529);
          x_531 := fn0_mergeL_783(m_519, m_526);
          move1(zs1_530, x_531);
          x_533 := fn0_rwlLL_647(NULL, NULL, NULL, NULL, NULL, zs1_530);
          move1(zs1_532, x_533);
          send(x_535, __477, zs1_532);
          move1(c_534, x_535);
          close0(x_537, c_534);
          move1(__536, x_537);
          move1(x_525, tt_3);
          free(_523);
          break;
        }
      }
      move1(x_518, x_525);
      free(_516);
      break;
    }
  }
  return x_518;
}

fn fn1_lam_819(env) {
  lam_505 := env[0];
  cmsort_workerL_461 := env[1];
  spwn_462 := env[2];
  m_499 := env[3];
  _506 := env[4];
  sub(x_508, spwn_462, 1);
  appc(x_820, cmsort_workerL_461, x_508);
  appc(x_821, x_820, m_499);
  appc(x_822, x_821, _506);
  free(x_821);
  move1(x_507, x_822);
  return x_507;
}

fn fn1_lam_824(env) {
  lam_512 := env[0];
  cmsort_workerL_461 := env[1];
  spwn_462 := env[2];
  n_500 := env[3];
  _513 := env[4];
  sub(x_515, spwn_462, 1);
  appc(x_825, cmsort_workerL_461, x_515);
  appc(x_826, x_825, n_500);
  appc(x_827, x_826, _513);
  free(x_826);
  move1(x_514, x_827);
  return x_514;
}

fn lazy__817(env) {
  zs_476 := env[0];
  __477 := env[1];
  hd_484 := env[2];
  tl_485 := env[3];
  rebox(x_490, tl_485, nilUL_22);
  rebox(x_491, zs_476, consUL_23);
  setbox(x_491, hd_484, 0);
  setbox(x_491, x_490, 1);
  send(x_489, __477, x_491);
  move1(c_488, x_489);
  close0(x_492, c_488);
  return x_492;
}

fn lazy__816(env) {
  zs_476 := env[0];
  __477 := env[1];
  rebox(x_482, zs_476, nilUL_22);
  send(x_481, __477, x_482);
  move1(c_480, x_481);
  close0(x_483, c_480);
  return x_483;
}

fn fn1_lam_813(env) {
  lam_466 := env[0];
  msortL_364 := env[1];
  zs_467 := env[2];
  __468 := env[3];
  lazy(x_469, lazy__814, 3);
  setlazy(x_469, msortL_364, 0);
  setlazy(x_469, zs_467, 1);
  setlazy(x_469, __468, 2);
  return x_469;
}

fn lazy__814(env) {
  msortL_364 := env[0];
  zs_467 := env[1];
  __468 := env[2];
  x_472 := fn0_msortL_789(zs_467);
  send(x_471, __468, x_472);
  move1(c_470, x_471);
  close0(x_473, c_470);
  return x_473;
}

fn fn1_lam_796(env) {
  lam_398 := env[0];
  rwlUU_7 := env[1];
  splitU_264 := env[2];
  mergeU_308 := env[3];
  cmsort_workerU_384 := env[4];
  spwn_385 := env[5];
  zs_399 := env[6];
  __400 := env[7];
  switch(ctagof(zs_399)){
    nilUU_24 => {
      lazy(x_402, lazy__797, 1);
      setlazy(x_402, __400, 0);
      move1(x_401, x_402);
      break;
    }
    consUU_25 => {
      getbox(hd_407, zs_399, 0);
      getbox(tl_408, zs_399, 1);
      switch(ctagof(tl_408)){
        nilUU_24 => {
          lazy(x_410, lazy__798, 2);
          setlazy(x_410, __400, 0);
          setlazy(x_410, hd_407, 1);
          move1(x_409, x_410);
          break;
        }
        consUU_25 => {
          getbox(hd_416, tl_408, 0);
          getbox(tl_417, tl_408, 1);
          mkbox(x_420, consUU_25, 2);
          setbox(x_420, hd_416, 0);
          setbox(x_420, tl_417, 1);
          mkbox(x_421, consUU_25, 2);
          setbox(x_421, hd_407, 0);
          setbox(x_421, x_420, 1);
          x_419 := fn0_splitU_774(x_421);
          switch(ctagof(x_419)){
            ex1UU_33 => {
              getbox(m_422, x_419, 0);
              getbox(n_423, x_419, 1);
              lazy(x_424, lazy__799, 7);
              setlazy(x_424, rwlUU_7, 0);
              setlazy(x_424, mergeU_308, 1);
              setlazy(x_424, cmsort_workerU_384, 2);
              setlazy(x_424, spwn_385, 3);
              setlazy(x_424, __400, 4);
              setlazy(x_424, m_422, 5);
              setlazy(x_424, n_423, 6);
              move1(x_418, x_424);
              free(x_419);
              break;
            }
          }
          move1(x_409, x_418);
          break;
        }
      }
      move1(x_401, x_409);
      break;
    }
  }
  return x_401;
}

fn lazy__799(env) {
  rwlUU_7 := env[0];
  mergeU_308 := env[1];
  cmsort_workerU_384 := env[2];
  spwn_385 := env[3];
  __400 := env[4];
  m_422 := env[5];
  n_423 := env[6];
  mkclo1(x_427, fn1_lam_800, fvc:=3, argc:=1);
  setclo(x_427, cmsort_workerU_384, 1);
  setclo(x_427, spwn_385, 2);
  setclo(x_427, m_422, 3);
  fork(x_426, x_427);
  move1(r1_425, x_426);
  mkclo1(x_434, fn1_lam_805, fvc:=3, argc:=1);
  setclo(x_434, cmsort_workerU_384, 1);
  setclo(x_434, spwn_385, 2);
  setclo(x_434, n_423, 3);
  fork(x_433, x_434);
  move1(r2_432, x_433);
  recv0(x_440, r1_425);
  move1(_439, x_440);
  switch(ctagof(_439)){
    ex1UL_32 => {
      getbox(m_442, _439, 0);
      getbox(n_443, _439, 1);
      close1(x_445, n_443);
      move1(__444, x_445);
      recv0(x_447, r2_432);
      move1(_446, x_447);
      switch(ctagof(_446)){
        ex1UL_32 => {
          getbox(m_449, _446, 0);
          getbox(n_450, _446, 1);
          close1(x_452, n_450);
          move1(__451, x_452);
          x_454 := fn0_mergeU_780(m_442, m_449);
          move1(zs1_453, x_454);
          x_456 := fn0_rwlUU_638(NULL, NULL, NULL, NULL, NULL, zs1_453);
          move1(zs1_455, x_456);
          send(x_458, __400, zs1_455);
          move1(c_457, x_458);
          close0(x_460, c_457);
          move1(__459, x_460);
          move1(x_448, tt_3);
          free(_446);
          break;
        }
      }
      move1(x_441, x_448);
      free(_439);
      break;
    }
  }
  return x_441;
}

fn fn1_lam_800(env) {
  lam_428 := env[0];
  cmsort_workerU_384 := env[1];
  spwn_385 := env[2];
  m_422 := env[3];
  _429 := env[4];
  sub(x_431, spwn_385, 1);
  appc(x_801, cmsort_workerU_384, x_431);
  appc(x_802, x_801, m_422);
  appc(x_803, x_802, _429);
  free(x_802);
  move1(x_430, x_803);
  return x_430;
}

fn fn1_lam_805(env) {
  lam_435 := env[0];
  cmsort_workerU_384 := env[1];
  spwn_385 := env[2];
  n_423 := env[3];
  _436 := env[4];
  sub(x_438, spwn_385, 1);
  appc(x_806, cmsort_workerU_384, x_438);
  appc(x_807, x_806, n_423);
  appc(x_808, x_807, _436);
  free(x_807);
  move1(x_437, x_808);
  return x_437;
}

fn lazy__798(env) {
  __400 := env[0];
  hd_407 := env[1];
  mkbox(x_413, nilUU_24, 0);
  mkbox(x_414, consUU_25, 2);
  setbox(x_414, hd_407, 0);
  setbox(x_414, x_413, 1);
  send(x_412, __400, x_414);
  move1(c_411, x_412);
  close0(x_415, c_411);
  return x_415;
}

fn lazy__797(env) {
  __400 := env[0];
  mkbox(x_405, nilUU_24, 0);
  send(x_404, __400, x_405);
  move1(c_403, x_404);
  close0(x_406, c_403);
  return x_406;
}

fn fn1_lam_794(env) {
  lam_389 := env[0];
  msortU_344 := env[1];
  zs_390 := env[2];
  __391 := env[3];
  lazy(x_392, lazy__795, 3);
  setlazy(x_392, msortU_344, 0);
  setlazy(x_392, zs_390, 1);
  setlazy(x_392, __391, 2);
  return x_392;
}

fn lazy__795(env) {
  msortU_344 := env[0];
  zs_390 := env[1];
  __391 := env[2];
  x_395 := fn0_msortU_786(zs_390);
  send(x_394, __391, x_395);
  move1(c_393, x_394);
  close0(x_396, c_393);
  return x_396;
}

fn fn1_aux_766(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_767, aux_240, i_246);
      move1(x_249, x_767);
      x_252 := fn0_ord_752(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_755(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_752(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_755(x_255);
      x_253 := fn0_str_758(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_744(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_745, loop_213, x_219);
      appc(x_746, x_745, x_221);
      move1(x_218, x_746);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_734(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_735, loop_198, x_204);
      appc(x_736, x_735, x_205);
      move1(x_203, x_736);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_706(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_692(y_148);
  x_150 := fn0_sub_698(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_707, loop_146, n_153);
      appc(x_708, x_707, y_148);
      move1(x_154, x_708);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_633, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_636, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_639, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_642, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_645, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_648, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_651, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_654, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_657, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_660, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_663, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_666, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_669, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_672, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_675, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_678, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_681, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_684, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_687, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_690, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_693, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_696, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_699, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_702, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_705, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_715, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_718, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_723, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_728, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_733, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_743, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_753, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_756, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_759, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_762, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_765, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_775, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_778, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_781, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_784, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_787, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_790, fvc:=0, argc:=1);
  mkclo0(cmsort_workerU_384, fn1_cmsort_workerU_793, fvc:=0, argc:=1);
  mkclo0(cmsort_workerL_461, fn1_cmsort_workerL_812, fvc:=0, argc:=1);
  mkclo0(cmsortU_538, fn1_cmsortU_831, fvc:=0, argc:=1);
  mkclo0(cmsortL_554, fn1_cmsortL_840, fvc:=0, argc:=1);
  mkclo0(mklistU_570, fn1_mklistU_849, fvc:=0, argc:=1);
  mkclo0(mklistL_578, fn1_mklistL_852, fvc:=0, argc:=1);
  mkclo0(list_lenU_586, fn1_list_lenU_855, fvc:=0, argc:=1);
  mkclo0(list_lenL_593, fn1_list_lenL_858, fvc:=0, argc:=1);
  mkclo0(string_of_listU_600, fn1_string_of_listU_861, fvc:=0, argc:=1);
  mkclo0(string_of_listL_611, fn1_string_of_listL_864, fvc:=0, argc:=1);
  x_623 := fn0_mklistL_851(2);
  move1(test_622, x_623);
  lazy(x_624, lazy__867, 4);
  setlazy(x_624, string_of_int_236, 0);
  setlazy(x_624, cmsortL_554, 1);
  setlazy(x_624, list_lenL_593, 2);
  setlazy(x_624, test_622, 3);
  force(x_866, x_624);
  return x_866;
}

-----------------------------------------

compilation success

-----------------------------------------

