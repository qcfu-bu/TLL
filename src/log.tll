[Inductive {name = "eq"; relv = N;
   body =
   (Binder (["s"],
      (PBind ((Type (SId "s")),
         (Binder ("A",
            (PBind ((Id ("A", I)),
               (Binder ("m",
                  (PBase
                     ((TBind (R, (Id ("A", I)),
                         (Binder ("_", (TBase (Type U)))))),
                      [(DConstr ("refl",
                          (TBase
                             (App
                                [(Id ("eq", I)); (Id ("m", I)); (Id ("m", I))
                                  ])),
                          []))
                        ]))
                  ))
               ))
            ))
         ))
      ));
   view = [I; E]};
  Inductive {name = "unit"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)), [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
       ));
    view = []};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("true", (TBase (Id ("bool", I))), []));
             (DConstr ("false", (TBase (Id ("bool", I))), []))]))
       ));
    view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("n", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "list"; relv = R;
    body =
    (Binder (["s"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type (SId "t"))),
                 [(DConstr ("nil",
                     (TBase (App [(Id ("list", I)); (Id ("A", I))])), 
                     []));
                   (DConstr ("cons",
                      (TBind (R, (Id ("A", I)),
                         (Binder ("hd",
                            (TBind (R,
                               (App [(Id ("list", I)); (Id ("A", I))]),
                               (Binder ("tl",
                                  (TBase
                                     (App [(Id ("list", I)); (Id ("A", I))]))
                                  ))
                               ))
                            ))
                         )),
                      [E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Inductive {name = "exists0"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type L)),
                       [(DConstr ("ex0",
                           (TBind (N, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("exists0", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists1"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type L)),
                       [(DConstr ("ex1",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("exists1", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Definition {name = "xor"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("bool", I)),
              (Binder ("_",
                 (Pi (R, L, (Id ("bool", I)),
                    (Binder ("_", (Id ("bool", I))))))
                 ))
              )),
           (Binder ((Some "xor"),
              [([(PId "true"); (PId "true")], (Some (Id ("false", I))));
                ([(PId "false"); (PId "false")], (Some (Id ("false", I))));
                ([(PId "_"); (PId "_")], (Some (Id ("true", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("bool", I)),
           (Binder ("_",
              (Pi (R, L, (Id ("bool", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "lte"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("bool", I))))
                    ))
                 ))
              )),
           (Binder ((Some "lte"),
              [([(PId "zero"); (PId "_")], (Some (Id ("true", I))));
                ([(PId "_"); (PId "zero")], (Some (Id ("false", I))));
                ([(PConstr ("succ", [(PId "x")]));
                   (PConstr ("succ", [(PId "y")]))],
                 (Some (App [(Id ("lte", I)); (Id ("x", I)); (Id ("y", I))])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "lt"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", (Id ("bool", I))))
                    ))
                 ))
              )),
           (Binder ((Some "lt"),
              [([(PId "x"); (PId "y")],
                (Some (App
                         [(Id ("lte", I));
                           (App [(Id ("succ", I)); (Id ("x", I))]);
                           (Id ("y", I))])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x",
              (Pi (R, U, (Id ("nat", I)), (Binder ("y", (Id ("bool", I))))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "pred"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I)))))),
           (Binder ((Some "pred"),
              [([(PId "zero")], (Some (Id ("zero", I))));
                ([(PConstr ("succ", [(PId "x")]))], (Some (Id ("x", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I)))))))
       ));
    view = []};
  Definition {name = "add"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "add"),
              [([(PId "zero"); (PId "y")], (Some (Id ("y", I))));
                ([(PConstr ("succ", [(PId "x")])); (PId "y")],
                 (Some (App
                          [(Id ("succ", I));
                            (App
                               [(Id ("add", I)); (Id ("x", I)); (Id ("y", I))
                                 ])
                            ])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "sub"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "sub"),
              [([(PId "x"); (PId "zero")], (Some (Id ("x", I))));
                ([(PId "x"); (PConstr ("succ", [(PId "y")]))],
                 (Some (App
                          [(Id ("sub", I));
                            (App [(Id ("pred", I)); (Id ("x", I))]);
                            (Id ("y", I))])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "mul"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "mul"),
              [([(PId "zero"); (PId "_")], (Some (Id ("zero", I))));
                ([(PConstr ("succ", [(PId "x")])); (PId "y")],
                 (Some (App
                          [(Id ("add", I)); (Id ("y", I));
                            (App
                               [(Id ("mul", I)); (Id ("x", I)); (Id ("y", I))
                                 ])
                            ])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "div"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))))
              )),
           (Binder ((Some "div"),
              [([(PId "x"); (PId "y")],
                (Some (Match (
                         [(R,
                           (App
                              [(Id ("lt", I)); (Id ("x", I)); (Id ("y", I))]),
                           None)],
                         None,
                         [([(PId "true")], (Some (Id ("zero", I))));
                           ([(PId "false")],
                            (Some (App
                                     [(Id ("succ", I));
                                       (App
                                          [(Id ("div", I));
                                            (App
                                               [(Id ("sub", I));
                                                 (Id ("x", I)); (Id ("y", I))
                                                 ]);
                                            (Id ("y", I))])
                                       ])))
                           ]
                         ))))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x", (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "rem"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))))
              )),
           (Binder ((Some "rem"),
              [([(PId "x"); (PId "y")],
                (Some (App
                         [(Id ("sub", I)); (Id ("x", I));
                           (App
                              [(Id ("mul", I));
                                (App
                                   [(Id ("div", I)); (Id ("x", I));
                                     (Id ("y", I))]);
                                (Id ("y", I))])
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x", (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "pow"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "pow"),
              [([(PId "_"); (PId "zero")],
                (Some (App [(Id ("succ", I)); (Id ("zero", I))])));
                ([(PId "x"); (PConstr ("succ", [(PId "y")]))],
                 (Some (App
                          [(Id ("mul", I)); (Id ("x", I));
                            (App
                               [(Id ("pow", I)); (Id ("x", I)); (Id ("y", I))
                                 ])
                            ])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Extern {name = "proto"; relv = N; body = (Binder ([], (Type U))); view = []};
  Extern {name = "act0"; relv = N;
    body =
    (Binder (["s"],
       (Pi (R, U, (Id ("bool", I)),
          (Binder ("b",
             (Pi (R, U, (Type (SId "s")),
                (Binder ("A",
                   (Pi (R, U,
                      (Pi (R, U, (Id ("A", I)),
                         (Binder ("_", (Id ("proto", I)))))),
                      (Binder ("B", (Id ("proto", I))))))
                   ))
                ))
             ))
          ))
       ));
    view = [E; I; E]};
  Extern {name = "act1"; relv = N;
    body =
    (Binder (["s"],
       (Pi (R, U, (Id ("bool", I)),
          (Binder ("b",
             (Pi (R, U, (Type (SId "s")),
                (Binder ("A",
                   (Pi (R, U,
                      (Pi (R, U, (Id ("A", I)),
                         (Binder ("_", (Id ("proto", I)))))),
                      (Binder ("B", (Id ("proto", I))))))
                   ))
                ))
             ))
          ))
       ));
    view = [E; I; E]};
  Extern {name = "endp"; relv = N; body = (Binder ([], (Id ("proto", I))));
    view = []};
  Extern {name = "ch"; relv = N;
    body =
    (Binder ([],
       (Pi (R, U, (Id ("bool", I)),
          (Binder ("_",
             (Pi (R, U, (Id ("proto", I)), (Binder ("_", (Type L)))))))
          ))
       ));
    view = []};
  Extern {name = "close"; relv = R;
    body =
    (Binder ([],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b",
             (Pi (R, U,
                (App [(Id ("ch", I)); (Id ("b", I)); (Id ("endp", I))]),
                (Binder ("_", (IO (Id ("unit", I)))))))
             ))
          ))
       ));
    view = [I]};
  Extern {name = "send0"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (App
                                     [(Id ("eq", I));
                                       (App
                                          [(Id ("xor", I)); (Id ("b1", I));
                                            (Id ("b2", I))]);
                                       (Id ("false", I))]),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act0", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (Pi (N, L, (Id ("A", I)),
                                              (Binder ("x",
                                                 (IO
                                                    (App
                                                       [(Id ("ch", I));
                                                         (Id ("b1", I));
                                                         (App
                                                            [(Id ("B", I));
                                                              (Id ("x", I))])
                                                         ]))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "send1"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (App
                                     [(Id ("eq", I));
                                       (App
                                          [(Id ("xor", I)); (Id ("b1", I));
                                            (Id ("b2", I))]);
                                       (Id ("false", I))]),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act1", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (Pi (R, L, (Id ("A", I)),
                                              (Binder ("x",
                                                 (IO
                                                    (App
                                                       [(Id ("ch", I));
                                                         (Id ("b1", I));
                                                         (App
                                                            [(Id ("B", I));
                                                              (Id ("x", I))])
                                                         ]))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "recv0"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (App
                                     [(Id ("eq", I));
                                       (App
                                          [(Id ("xor", I)); (Id ("b1", I));
                                            (Id ("b2", I))]);
                                       (Id ("true", I))]),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act0", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (IO
                                              (App
                                                 [(Id ("exists0", I));
                                                   (Fun (
                                                      (Pi (R, U,
                                                         (Id ("A", I)),
                                                         (Binder ("x", IMeta
                                                            ))
                                                         )),
                                                      (Binder (None,
                                                         [([(PId "x")],
                                                           (Some (App
                                                                    [(Id (
                                                                    "ch", I));
                                                                    (Id (
                                                                    "b1", I));
                                                                    (App
                                                                    [(Id (
                                                                    "B", I));
                                                                    (Id ("x",
                                                                    I))])])))
                                                           ]
                                                         )),
                                                      []))
                                                   ]))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "recv1"; relv = R;
    body =
    (Binder (["s"],
       (Pi (N, U, (Id ("bool", I)),
          (Binder ("b1",
             (Pi (N, U, (Id ("bool", I)),
                (Binder ("b2",
                   (Pi (N, U, (Type (SId "s")),
                      (Binder ("A",
                         (Pi (N, U,
                            (Pi (R, U, (Id ("A", I)),
                               (Binder ("_", (Id ("proto", I)))))),
                            (Binder ("B",
                               (Pi (N, U,
                                  (App
                                     [(Id ("eq", I));
                                       (App
                                          [(Id ("xor", I)); (Id ("b1", I));
                                            (Id ("b2", I))]);
                                       (Id ("true", I))]),
                                  (Binder ("_",
                                     (Pi (R, U,
                                        (App
                                           [(Id ("ch", I)); (Id ("b1", I));
                                             (App
                                                [(Id ("act1", I));
                                                  (Id ("b2", I));
                                                  (Id ("B", I))])
                                             ]),
                                        (Binder ("_",
                                           (IO
                                              (App
                                                 [(Id ("exists1", I));
                                                   (Fun (
                                                      (Pi (R, U,
                                                         (Id ("A", I)),
                                                         (Binder ("x", IMeta
                                                            ))
                                                         )),
                                                      (Binder (None,
                                                         [([(PId "x")],
                                                           (Some (App
                                                                    [(Id (
                                                                    "ch", I));
                                                                    (Id (
                                                                    "b1", I));
                                                                    (App
                                                                    [(Id (
                                                                    "B", I));
                                                                    (Id ("x",
                                                                    I))])])))
                                                           ]
                                                         )),
                                                      []))
                                                   ]))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ))
                ))
             ))
          ))
       ));
    view = [I; I; I; I]};
  Extern {name = "fork"; relv = R;
    body =
    (Binder ([],
       (Pi (N, U, (Id ("proto", I)),
          (Binder ("P",
             (Pi (R, U,
                (Pi (R, L,
                   (App [(Id ("ch", I)); (Id ("false", I)); (Id ("P", I))]),
                   (Binder ("_", (IO (Id ("unit", I))))))),
                (Binder ("_",
                   (IO
                      (App [(Id ("ch", I)); (Id ("true", I)); (Id ("P", I))]))
                   ))
                ))
             ))
          ))
       ));
    view = [E]};
  Definition {name = "DH"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("p",
                 (Pi (R, U, (Id ("nat", I)),
                    (Binder ("g", (Id ("proto", I))))))
                 ))
              )),
           (Binder ((Some "DH"),
              [([(PId "p"); (PId "g")],
                (Some (App
                         [(Id ("act0", I)); (Id ("true", I));
                           (Fun (
                              (Pi (R, U, (Id ("nat", I)),
                                 (Binder ("a", IMeta)))),
                              (Binder (None,
                                 [([(PId "a")],
                                   (Some (App
                                            [(Id ("act1", I));
                                              (Id ("true", I));
                                              (Fun (
                                                 (Pi (R, U, (Id ("nat", I)),
                                                    (Binder ("A", IMeta)))),
                                                 (Binder (None,
                                                    [([(PId "A")],
                                                      (Some (App
                                                               [(Id ("act0",
                                                                   I));
                                                                 (Id ("true",
                                                                    I));
                                                                 (Fun (
                                                                    (
                                                                    Pi (R, U,
                                                                    (App
                                                                    [(Id (
                                                                    "eq", I));
                                                                    (Id ("A",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "rem", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "pow", I
                                                                    ));
                                                                    (Id ("g",
                                                                    I));
                                                                    (Id ("a",
                                                                    I))]);
                                                                    (Id ("p",
                                                                    I))])]),
                                                                    (Binder (
                                                                    "_",
                                                                    IMeta)))),
                                                                    (
                                                                    Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "_")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "act0", I
                                                                    ));
                                                                    (Id (
                                                                    "false",
                                                                    I));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U,
                                                                    (Id (
                                                                    "nat", I
                                                                    )),
                                                                    (Binder (
                                                                    "b",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "b")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "act1", I
                                                                    ));
                                                                    (Id (
                                                                    "false",
                                                                    I));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U,
                                                                    (Id (
                                                                    "nat", I
                                                                    )),
                                                                    (Binder (
                                                                    "B",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "B")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "act0", I
                                                                    ));
                                                                    (Id (
                                                                    "false",
                                                                    I));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U,
                                                                    (App
                                                                    [(Id (
                                                                    "eq", I));
                                                                    (Id ("B",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "rem", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "pow", I
                                                                    ));
                                                                    (Id ("g",
                                                                    I));
                                                                    (Id ("b",
                                                                    I))]);
                                                                    (Id ("p",
                                                                    I))])]),
                                                                    (Binder (
                                                                    "_",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "_")],
                                                                    (Some (
                                                                    Id (
                                                                    "endp", I
                                                                    ))))])),
                                                                    []))])))]
                                                                    )), 
                                                                    []))])))]
                                                                    )), 
                                                                    []))])))]
                                                                    )), 
                                                                    []))
                                                                 ])))
                                                      ]
                                                    )),
                                                 []))
                                              ])))
                                   ]
                                 )),
                              []))
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("p",
              (Pi (R, U, (Id ("nat", I)), (Binder ("g", (Id ("proto", I))))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "DH_ch"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("p",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))))
              )),
           (Binder ((Some "DH_ch"),
              [([(PId "p"); (PId "g")],
                (Some (App
                         [(Id ("ch", I)); (Id ("true", I));
                           (App
                              [(Id ("DH", I)); (Id ("p", I)); (Id ("g", I))])
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("p", (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "DH_hc"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("p",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))))
              )),
           (Binder ((Some "DH_hc"),
              [([(PId "p"); (PId "g")],
                (Some (App
                         [(Id ("ch", I)); (Id ("false", I));
                           (App
                              [(Id ("DH", I)); (Id ("p", I)); (Id ("g", I))])
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("p", (Pi (R, U, (Id ("nat", I)), (Binder ("g", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "alice"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("a",
                 (Pi (R, U, (Id ("nat", I)),
                    (Binder ("p",
                       (Pi (R, U, (Id ("nat", I)),
                          (Binder ("g",
                             (Pi (R, U,
                                (App
                                   [(Id ("DH_ch", I)); (Id ("p", I));
                                     (Id ("g", I))]),
                                (Binder ("c", (IO (Id ("unit", I)))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "alice"),
              [([(PId "a"); (PId "p"); (PId "g"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Id ("send0", I)); (Id ("refl", I));
                              (Id ("c", I)); (Id ("a", I))]),
                         (Binder ("c",
                            (MLet (
                               (App
                                  [(Id ("send1", I)); (Id ("refl", I));
                                    (Id ("c", I));
                                    (App
                                       [(Id ("rem", I));
                                         (App
                                            [(Id ("pow", I)); (Id ("g", I));
                                              (Id ("a", I))]);
                                         (Id ("p", I))])
                                    ]),
                               (Binder ("c",
                                  (MLet (
                                     (App
                                        [(Id ("send0", I)); (Id ("refl", I));
                                          (Id ("c", I)); (Id ("refl", I))]),
                                     (Binder ("c",
                                        (MLet (
                                           (App
                                              [(Id ("recv0", I));
                                                (Id ("refl", I));
                                                (Id ("c", I))]),
                                           (Binder ("r",
                                              (Match (
                                                 [(R, (Id ("r", I)), None)],
                                                 None,
                                                 [([(PConstr ("ex0",
                                                       [(PId "b"); (PId "c")]
                                                       ))
                                                     ],
                                                   (Some (MLet (
                                                            (App
                                                               [(Id ("recv1",
                                                                   I));
                                                                 (Id ("refl",
                                                                    I));
                                                                 (Id ("c", I
                                                                    ))
                                                                 ]),
                                                            (Binder ("r",
                                                               (Match (
                                                                  [(R,
                                                                    (
                                                                    Id ("r",
                                                                    I)), None)
                                                                    ],
                                                                  None,
                                                                  [([(PConstr (
                                                                    "ex1",
                                                                    [(PId "B");
                                                                    (PId "c")
                                                                    ]))],
                                                                    (Some (
                                                                    MLet (
                                                                    (App
                                                                    [(Id (
                                                                    "recv0",
                                                                    I));
                                                                    (Id (
                                                                    "refl", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))]),
                                                                    (Binder (
                                                                    "r",
                                                                    (Match (
                                                                    [(R,
                                                                    (Id ("r",
                                                                    I)), None)
                                                                    ], None,
                                                                    [([(PConstr (
                                                                    "ex0",
                                                                    [(PId
                                                                    "pf");
                                                                    (PId "c")
                                                                    ]))],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "close",
                                                                    I));
                                                                    (Id ("c",
                                                                    I))])))]
                                                                    ))))))))]
                                                                  ))
                                                               ))
                                                            ))))
                                                   ]
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; E; E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("a",
              (Pi (R, U, (Id ("nat", I)),
                 (Binder ("p",
                    (Pi (R, U, (Id ("nat", I)),
                       (Binder ("g",
                          (Pi (R, U,
                             (App
                                [(Id ("DH_ch", I)); (Id ("p", I));
                                  (Id ("g", I))]),
                             (Binder ("c", (IO (Id ("unit", I)))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E; E; E]};
  Definition {name = "bob"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("b",
                 (Pi (R, U, (Id ("nat", I)),
                    (Binder ("p",
                       (Pi (R, U, (Id ("nat", I)),
                          (Binder ("g",
                             (Pi (R, U,
                                (App
                                   [(Id ("DH_hc", I)); (Id ("p", I));
                                     (Id ("g", I))]),
                                (Binder ("c", (IO (Id ("unit", I)))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "bob"),
              [([(PId "b"); (PId "p"); (PId "g"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Id ("recv0", I)); (Id ("refl", I));
                              (Id ("c", I))]),
                         (Binder ("r",
                            (Match ([(R, (Id ("r", I)), None)], None,
                               [([(PConstr ("ex0", [(PId "a"); (PId "c")]))],
                                 (Some (MLet (
                                          (App
                                             [(Id ("recv1", I));
                                               (Id ("refl", I));
                                               (Id ("c", I))]),
                                          (Binder ("r",
                                             (Match (
                                                [(R, (Id ("r", I)), None)],
                                                None,
                                                [([(PConstr ("ex1",
                                                      [(PId "A"); (PId "c")]
                                                      ))
                                                    ],
                                                  (Some (MLet (
                                                           (App
                                                              [(Id ("recv0",
                                                                  I));
                                                                (Id ("refl",
                                                                   I));
                                                                (Id ("c", I))
                                                                ]),
                                                           (Binder ("r",
                                                              (Match (
                                                                 [(R,
                                                                   (Id ("r",
                                                                    I)),
                                                                   None)],
                                                                 None,
                                                                 [([(PConstr (
                                                                    "ex0",
                                                                    [(PId
                                                                    "pf");
                                                                    (PId "c")
                                                                    ]))],
                                                                   (Some (
                                                                   MLet (
                                                                    (App
                                                                    [(Id (
                                                                    "send0",
                                                                    I));
                                                                    (Id (
                                                                    "refl", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I));
                                                                    (Id ("b",
                                                                    I))]),
                                                                    (Binder (
                                                                    "c",
                                                                    (MLet (
                                                                    (App
                                                                    [(Id (
                                                                    "send1",
                                                                    I));
                                                                    (Id (
                                                                    "refl", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "rem", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "pow", I
                                                                    ));
                                                                    (Id ("g",
                                                                    I));
                                                                    (Id ("b",
                                                                    I))]);
                                                                    (Id ("p",
                                                                    I))])]),
                                                                    (Binder (
                                                                    "c",
                                                                    (MLet (
                                                                    (App
                                                                    [(Id (
                                                                    "send0",
                                                                    I));
                                                                    (Id (
                                                                    "refl", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I));
                                                                    (Id (
                                                                    "refl", I
                                                                    ))]),
                                                                    (Binder (
                                                                    "c",
                                                                    (App
                                                                    [(Id (
                                                                    "close",
                                                                    I));
                                                                    (Id ("c",
                                                                    I))])))))
                                                                    ))))))))))
                                                                   ]
                                                                 ))
                                                              ))
                                                           ))))
                                                  ]
                                                ))
                                             ))
                                          ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E; E; E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("b",
              (Pi (R, U, (Id ("nat", I)),
                 (Binder ("p",
                    (Pi (R, U, (Id ("nat", I)),
                       (Binder ("g",
                          (Pi (R, U,
                             (App
                                [(Id ("DH_hc", I)); (Id ("p", I));
                                  (Id ("g", I))]),
                             (Binder ("c", (IO (Id ("unit", I)))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E; E; E]}
  ]

-----------------------------------------

#[logical]
inductive eq_1‹s_269› (A_270 : Type‹s_269›) (m_271 : A_270):
  A_270 -> U
where
| refl_1 : (eq_1‹??_1› ?_1 m_271 m_271)

#[program]
inductive unit_2‹› : U where
| tt_2 : unit_2

#[program]
inductive bool_3‹› : U where
| true_3 : bool_3
| false_4 : bool_3

#[program]
inductive nat_4‹› : U where
| zero_5 : nat_4
| succ_6 (n_273 : nat_4) : nat_4

#[program]
inductive list_5‹s_274,t_275› (A_276 : Type‹s_274›): Type‹t_275›
where
| nil_7 : (list_5‹??_2,??_3› A_276)
| cons_8
    (hd_277 : A_276) (tl_278 : (list_5‹??_4,??_5› A_276))
    : (list_5‹??_6,??_7› A_276)

#[program]
inductive exists0_6‹s_279,r_280› (A_281 : Type‹s_279›) (B_282 : 
A_281 -> Type‹r_280›): L where
| ex0_9
    {m_284 : A_281} (n_285 : ((B_282) m_284))
    : (exists0_6‹??_8,??_9› A_281 B_282)

#[program]
inductive exists1_7‹s_286,r_287› (A_288 : Type‹s_286›) (B_289 : 
A_288 -> Type‹r_287›): L where
| ex1_10
    (m_291 : A_288) (n_292 : ((B_289) m_291))
    : (exists1_7‹??_10,??_11› A_288 B_289)

#[program]
def xor_1‹› : bool_3 -> bool_3 -o bool_3 :=
  function xor_295 : bool_3 -> bool_3 -o bool_3
  | true_3 true_3 => false_4
  | false_4 false_4 => false_4
  | _298 _299 => true_3

#[program]
def lte_2‹› : nat_4 -> nat_4 -> bool_3 :=
  function lte_302 : nat_4 -> nat_4 -> bool_3
  | zero_5 _305 => true_3
  | _306 zero_5 => false_4
  | (succ_6 x_307) (succ_6 y_308) => ((lte_302) x_307 y_308)

#[program]
def lt_3‹› : nat_4 -> nat_4 -> bool_3 :=
  function lt_311 : nat_4 -> nat_4 -> bool_3
  | x_314 y_315 => ((lte_2) (succ_6‹› x_314) y_315)

#[program]
def pred_4‹› : nat_4 -> nat_4 :=
  function pred_317 : nat_4 -> nat_4
  | zero_5 => zero_5
  | (succ_6 x_319) => x_319

#[program]
def add_5‹› : nat_4 -> nat_4 -> nat_4 :=
  function add_322 : nat_4 -> nat_4 -> nat_4
  | zero_5 y_325 => y_325
  | (succ_6 x_326) y_327 => (succ_6‹› ((add_322) x_326 y_327))

#[program]
def sub_6‹› : nat_4 -> nat_4 -> nat_4 :=
  function sub_330 : nat_4 -> nat_4 -> nat_4
  | x_333 zero_5 => x_333
  | x_334 (succ_6 y_335) => ((sub_330) ((pred_4) x_334) y_335)

#[program]
def mul_7‹› : nat_4 -> nat_4 -> nat_4 :=
  function mul_338 : nat_4 -> nat_4 -> nat_4
  | zero_5 _341 => zero_5
  | (succ_6 x_342) y_343 => ((add_5) y_343 ((mul_338) x_342 y_343))

#[program]
def div_8‹› : ∀ (x_344 : nat_4) -> ∀ (y_345 : nat_4) -> ?_5 :=
  function div_346 : ∀ (x_347 : nat_4) -> ∀ (y_348 : nat_4) -> ?_2
  | x_349 y_350 =>
    match ((lt_3) x_349 y_350) in ∀ (_351 : ?_3) -o ?_4 with
    | true_3 => zero_5
    | false_4 => (succ_6‹› ((div_346) ((sub_6) x_349 y_350) y_350))

#[program]
def rem_9‹› : ∀ (x_352 : nat_4) -> ∀ (y_353 : nat_4) -> ?_7 :=
  function rem_354 : ∀ (x_355 : nat_4) -> ∀ (y_356 : nat_4) -> ?_6
  | x_357 y_358 => ((sub_6) x_357 ((mul_7) ((div_8) x_357 y_358) y_358))

#[program]
def pow_10‹› : nat_4 -> nat_4 -> nat_4 :=
  function pow_361 : nat_4 -> nat_4 -> nat_4
  | _364 zero_5 => (succ_6‹› zero_5)
  | x_365 (succ_6 y_366) => ((mul_7) x_365 ((pow_361) x_365 y_366))

#[logical]
extern proto_11‹› : U

#[logical]
extern act0_12‹s_367› :
  bool_3 -> ∀ (A_369 : Type‹s_367›) -> A_369 -> proto_11 -> proto_11

#[logical]
extern act1_13‹s_372› :
  bool_3 -> ∀ (A_374 : Type‹s_372›) -> A_374 -> proto_11 -> proto_11

#[logical]
extern endp_14‹› : proto_11

#[logical]
extern ch_15‹› : bool_3 -> proto_11 -> L

#[program]
extern close_16‹› :
  ∀ {b_379 : bool_3} -> ((ch_15) b_379 endp_14) -> IO unit_2

#[program]
extern send0_17‹s_381› :
  ∀ {b1_382 : bool_3} ->
    ∀ {b2_383 : bool_3} ->
      ∀ {A_384 : Type‹s_381›} ->
        ∀ {B_385 : A_384 -> proto_11} ->
          ∀ {__387 :
            (eq_1‹??_12› ?_8 ((xor_1) b1_382 b2_383) false_4)} ->
            ((ch_15) b1_382 ((act0_12‹??_13›) b2_383 ?_9 B_385)) ->
              ∀ {x_389 : A_384} -o IO ((ch_15) b1_382 ((B_385) x_389))

#[program]
extern send1_18‹s_390› :
  ∀ {b1_391 : bool_3} ->
    ∀ {b2_392 : bool_3} ->
      ∀ {A_393 : Type‹s_390›} ->
        ∀ {B_394 : A_393 -> proto_11} ->
          ∀ {__396 :
            (eq_1‹??_14› ?_10 ((xor_1) b1_391 b2_392) false_4)} ->
            ((ch_15) b1_391 ((act1_13‹??_15›) b2_392 ?_11 B_394)) ->
              ∀ (x_398 : A_393) -o IO ((ch_15) b1_391 ((B_394) x_398))

#[program]
extern recv0_19‹s_399› :
  ∀ {b1_400 : bool_3} ->
    ∀ {b2_401 : bool_3} ->
      ∀ {A_402 : Type‹s_399›} ->
        ∀ {B_403 : A_402 -> proto_11} ->
          ∀ {__405 :
            (eq_1‹??_16› ?_12 ((xor_1) b1_400 b2_401) true_3)} ->
            ∀ (__406 :
              ((ch_15) b1_400 ((act0_12‹??_17›) b2_401 ?_13 B_403))) ->
              IO (exists0_6‹??_18,??_19›
                   ?_15
                   function _407 : ∀ (x_408 : A_402) -> ?_14
                   | x_409 => ((ch_15) b1_400 ((B_403) x_409)))

#[program]
extern recv1_20‹s_410› :
  ∀ {b1_411 : bool_3} ->
    ∀ {b2_412 : bool_3} ->
      ∀ {A_413 : Type‹s_410›} ->
        ∀ {B_414 : A_413 -> proto_11} ->
          ∀ {__416 :
            (eq_1‹??_20› ?_16 ((xor_1) b1_411 b2_412) true_3)} ->
            ∀ (__417 :
              ((ch_15) b1_411 ((act1_13‹??_21›) b2_412 ?_17 B_414))) ->
              IO (exists1_7‹??_22,??_23›
                   ?_19
                   function _418 : ∀ (x_419 : A_413) -> ?_18
                   | x_420 => ((ch_15) b1_411 ((B_414) x_420)))

#[program]
extern fork_21‹› :
  ∀ {P_421 : proto_11} ->
    ((ch_15) false_4 P_421) -o IO unit_2 -> IO ((ch_15) true_3 P_421)

#[logical]
def DH_22‹› : nat_4 -> nat_4 -> proto_11 :=
  function DH_426 : nat_4 -> nat_4 -> proto_11
  | p_429 g_430 =>
    ((act0_12‹??_31›)
      true_3 ?_33
      function _431 : ∀ (a_432 : nat_4) -> ?_20
      | a_433 =>
        ((act1_13‹??_30›)
          true_3 ?_32
          function _434 : ∀ (A_435 : nat_4) -> ?_21
          | A_436 =>
            ((act0_12‹??_29›)
              true_3 ?_31
              function _437 :
                ∀ (__438 :
                  (eq_1‹??_24›
                    ?_22 A_436 ((rem_9) ((pow_10) g_430 a_433) p_429))) ->
                  ?_23
              | _439 =>
                ((act0_12‹??_28›)
                  false_4 ?_30
                  function _440 : ∀ (b_441 : nat_4) -> ?_24
                  | b_442 =>
                    ((act1_13‹??_27›)
                      false_4 ?_29
                      function _443 : ∀ (B_444 : nat_4) -> ?_25
                      | B_445 =>
                        ((act0_12‹??_26›)
                          false_4 ?_28
                          function _446 :
                            ∀ (__447 :
                              (eq_1‹??_25›
                                ?_26 B_445
                                ((rem_9) ((pow_10) g_430 b_442) p_429))) ->
                              ?_27
                          | _448 => endp_14))))))

#[logical]
def DH_ch_23‹› : ∀ (p_449 : nat_4) -> ∀ (g_450 : nat_4) -> ?_35 :=
  function DH_ch_451 : ∀ (p_452 : nat_4) -> ∀ (g_453 : nat_4) -> ?_34
  | p_454 g_455 => ((ch_15) true_3 ((DH_22) p_454 g_455))

#[logical]
def DH_hc_24‹› : ∀ (p_456 : nat_4) -> ∀ (g_457 : nat_4) -> ?_37 :=
  function DH_hc_458 : ∀ (p_459 : nat_4) -> ∀ (g_460 : nat_4) -> ?_36
  | p_461 g_462 => ((ch_15) false_4 ((DH_22) p_461 g_462))

#[program]
def alice_25‹› :
  nat_4 ->
    ∀ (p_464 : nat_4) ->
      ∀ (g_465 : nat_4) -> ((DH_ch_23) p_464 g_465) -> IO unit_2
:=
  function alice_467 :
    nat_4 ->
      ∀ (p_469 : nat_4) ->
        ∀ (g_470 : nat_4) -> ((DH_ch_23) p_469 g_470) -> IO unit_2
  | a_472 p_473 g_474 c_475 =>
    let* c_476 :=
      ((send0_17‹??_33›)
        ?_43 ?_42 ?_41 ?_40 refl_1‹??_32› c_475 a_472)
    in
    let* c_477 :=
      ((send1_18‹??_35›)
        ?_49 ?_48 ?_47 ?_46 refl_1‹??_34› c_476
        ((rem_9) ((pow_10) g_474 a_472) p_473))
    in
    let* c_478 :=
      ((send0_17‹??_38›)
        ?_57 ?_56 ?_55 ?_54 refl_1‹??_36› c_477 refl_1‹??_37›)
    in
    let* r_479 :=
      ((recv0_19‹??_40›) ?_63 ?_62 ?_61 ?_60 refl_1‹??_39› c_478)
    in
    match r_479 in ∀ (_480 : ?_64) -o ?_65 with
    | (ex0_9 b_481 c_482) =>
      let* r_483 :=
        ((recv1_20‹??_42›) ?_71 ?_70 ?_69 ?_68 refl_1‹??_41› c_482)
      in
      match r_483 in ∀ (_484 : ?_72) -o ?_73 with
      | (ex1_10 B_485 c_486) =>
        let* r_487 :=
          ((recv0_19‹??_44›) ?_79 ?_78 ?_77 ?_76 refl_1‹??_43› c_486)
        in
        match r_487 in ∀ (_488 : ?_80) -o ?_81 with
        | (ex0_9 pf_489 c_490) => ((close_16) ?_82 c_490)

#[program]
def bob_26‹› :
  nat_4 ->
    ∀ (p_492 : nat_4) ->
      ∀ (g_493 : nat_4) -> ((DH_hc_24) p_492 g_493) -> IO unit_2
:=
  function bob_495 :
    nat_4 ->
      ∀ (p_497 : nat_4) ->
        ∀ (g_498 : nat_4) -> ((DH_hc_24) p_497 g_498) -> IO unit_2
  | b_500 p_501 g_502 c_503 =>
    let* r_504 :=
      ((recv0_19‹??_46›) ?_88 ?_87 ?_86 ?_85 refl_1‹??_45› c_503)
    in
    match r_504 in ∀ (_505 : ?_89) -o ?_90 with
    | (ex0_9 a_506 c_507) =>
      let* r_508 :=
        ((recv1_20‹??_48›) ?_96 ?_95 ?_94 ?_93 refl_1‹??_47› c_507)
      in
      match r_508 in ∀ (_509 : ?_97) -o ?_98 with
      | (ex1_10 A_510 c_511) =>
        let* r_512 :=
          ((recv0_19‹??_50›)
            ?_104 ?_103 ?_102 ?_101 refl_1‹??_49› c_511)
        in
        match r_512 in ∀ (_513 : ?_105) -o ?_106 with
        | (ex0_9 pf_514 c_515) =>
          let* c_516 :=
            ((send0_17‹??_52›)
              ?_112 ?_111 ?_110 ?_109 refl_1‹??_51› c_515 b_500)
          in
          let* c_517 :=
            ((send1_18‹??_54›)
              ?_118 ?_117 ?_116 ?_115 refl_1‹??_53› c_516
              ((rem_9) ((pow_10) g_502 b_500) p_501))
          in
          let* c_518 :=
            ((send0_17‹??_57›)
              ?_126 ?_125 ?_124 ?_123 refl_1‹??_55› c_517
              refl_1‹??_56›)
          in ((close_16) ?_127 c_518)

-----------------------------------------

#[logical]
inductive eq_1‹s_31842› (A_31843 : Type‹s_31842›) (m_31844 : A_31843):
  A_31843 -> U
where
| refl_1 : (eq_1‹s_31842› A_31843 m_31844 m_31844)

#[program]
inductive unit_2‹› : U where
| tt_2 : unit_2

#[program]
inductive bool_3‹› : U where
| true_3 : bool_3
| false_4 : bool_3

#[program]
inductive nat_4‹› : U where
| zero_5 : nat_4
| succ_6 (n_31846 : nat_4) : nat_4

#[program]
inductive list_5‹s_31847,t_31848› (A_31849 : Type‹s_31847›):
  Type‹t_31848›
where
| nil_7 : (list_5‹s_31847,t_31848› A_31849)
| cons_8
    (hd_31850 : A_31849) (tl_31851 : (list_5‹s_31847,??_5› A_31849))
    : (list_5‹s_31847,t_31848› A_31849)

#[program]
inductive exists0_6‹s_31852,r_31853› (A_31854 : Type‹s_31852›) (B_31855 : 
A_31854 -> Type‹r_31853›): L where
| ex0_9
    {m_31857 : A_31854} (n_31858 : ((B_31855) m_31857))
    : (exists0_6‹s_31852,r_31853› A_31854 B_31855)

#[program]
inductive exists1_7‹s_31859,r_31860› (A_31861 : Type‹s_31859›) (B_31862 : 
A_31861 -> Type‹r_31860›): L where
| ex1_10
    (m_31864 : A_31861) (n_31865 : ((B_31862) m_31864))
    : (exists1_7‹s_31859,r_31860› A_31861 B_31862)

#[program]
def xor_1‹› : bool_3 -> bool_3 -o bool_3 :=
  function xor_31868 : bool_3 -> bool_3 -o bool_3
  | true_3 true_3 => false_4
  | false_4 false_4 => false_4
  | _31871 _31872 => true_3

#[program]
def lte_2‹› : nat_4 -> nat_4 -> bool_3 :=
  function lte_31875 : nat_4 -> nat_4 -> bool_3
  | zero_5 _31878 => true_3
  | _31879 zero_5 => false_4
  | (succ_6 x_31880) (succ_6 y_31881) => ((lte_31875) x_31880 y_31881)

#[program]
def lt_3‹› : nat_4 -> nat_4 -> bool_3 :=
  function lt_31884 : nat_4 -> nat_4 -> bool_3
  | x_31887 y_31888 => ((lte_2) (succ_6‹› x_31887) y_31888)

#[program]
def pred_4‹› : nat_4 -> nat_4 :=
  function pred_31890 : nat_4 -> nat_4
  | zero_5 => zero_5
  | (succ_6 x_31892) => x_31892

#[program]
def add_5‹› : nat_4 -> nat_4 -> nat_4 :=
  function add_31895 : nat_4 -> nat_4 -> nat_4
  | zero_5 y_31898 => y_31898
  | (succ_6 x_31899) y_31900 => (succ_6‹› ((add_31895) x_31899 y_31900))

#[program]
def sub_6‹› : nat_4 -> nat_4 -> nat_4 :=
  function sub_31903 : nat_4 -> nat_4 -> nat_4
  | x_31906 zero_5 => x_31906
  | x_31907 (succ_6 y_31908) => ((sub_31903) ((pred_4) x_31907) y_31908)

#[program]
def mul_7‹› : nat_4 -> nat_4 -> nat_4 :=
  function mul_31911 : nat_4 -> nat_4 -> nat_4
  | zero_5 _31914 => zero_5
  | (succ_6 x_31915) y_31916 =>
    ((add_5) y_31916 ((mul_31911) x_31915 y_31916))

#[program]
def div_8‹› : nat_4 -> nat_4 -> nat_4 :=
  function div_31919 : nat_4 -> nat_4 -> nat_4
  | x_31922 y_31923 =>
    match ((lt_3) x_31922 y_31923) in bool_3 -o nat_4 with
    | true_3 => zero_5
    | false_4 =>
      (succ_6‹› ((div_31919) ((sub_6) x_31922 y_31923) y_31923))

#[program]
def rem_9‹› : nat_4 -> nat_4 -> nat_4 :=
  function rem_31927 : nat_4 -> nat_4 -> nat_4
  | x_31930 y_31931 =>
    ((sub_6) x_31930 ((mul_7) ((div_8) x_31930 y_31931) y_31931))

#[program]
def pow_10‹› : nat_4 -> nat_4 -> nat_4 :=
  function pow_31934 : nat_4 -> nat_4 -> nat_4
  | _31937 zero_5 => (succ_6‹› zero_5)
  | x_31938 (succ_6 y_31939) =>
    ((mul_7) x_31938 ((pow_31934) x_31938 y_31939))

#[logical]
extern proto_11‹› : U

#[logical]
extern act0_12‹s_31940› :
  bool_3 ->
    ∀ (A_31942 : Type‹s_31940›) -> A_31942 -> proto_11 -> proto_11

#[logical]
extern act1_13‹s_31945› :
  bool_3 ->
    ∀ (A_31947 : Type‹s_31945›) -> A_31947 -> proto_11 -> proto_11

#[logical]
extern endp_14‹› : proto_11

#[logical]
extern ch_15‹› : bool_3 -> proto_11 -> L

#[program]
extern close_16‹› :
  ∀ {b_31952 : bool_3} -> ((ch_15) b_31952 endp_14) -> IO unit_2

#[program]
extern send0_17‹s_31954› :
  ∀ {b1_31955 : bool_3} ->
    ∀ {b2_31956 : bool_3} ->
      ∀ {A_31957 : Type‹s_31954›} ->
        ∀ {B_31958 : A_31957 -> proto_11} ->
          {(eq_1‹U› bool_3 ((xor_1) b1_31955 b2_31956) false_4)} ->
            ((ch_15)
              b1_31955 ((act0_12‹s_31954›) b2_31956 A_31957 B_31958)) ->
              ∀ {x_31962 : A_31957} -o
                IO ((ch_15) b1_31955 ((B_31958) x_31962))

#[program]
extern send1_18‹s_31963› :
  ∀ {b1_31964 : bool_3} ->
    ∀ {b2_31965 : bool_3} ->
      ∀ {A_31966 : Type‹s_31963›} ->
        ∀ {B_31967 : A_31966 -> proto_11} ->
          {(eq_1‹U› bool_3 ((xor_1) b1_31964 b2_31965) false_4)} ->
            ((ch_15)
              b1_31964 ((act1_13‹s_31963›) b2_31965 A_31966 B_31967)) ->
              ∀ (x_31971 : A_31966) -o
                IO ((ch_15) b1_31964 ((B_31967) x_31971))

#[program]
extern recv0_19‹s_31972› :
  ∀ {b1_31973 : bool_3} ->
    ∀ {b2_31974 : bool_3} ->
      ∀ {A_31975 : Type‹s_31972›} ->
        ∀ {B_31976 : A_31975 -> proto_11} ->
          {(eq_1‹U› bool_3 ((xor_1) b1_31973 b2_31974) true_3)} ->
            ((ch_15)
              b1_31973 ((act0_12‹s_31972›) b2_31974 A_31975 B_31976)) ->
              IO (exists0_6‹s_31972,L›
                   A_31975
                   function _31980 : A_31975 -> L
                   | x_31982 => ((ch_15) b1_31973 ((B_31976) x_31982)))

#[program]
extern recv1_20‹s_31983› :
  ∀ {b1_31984 : bool_3} ->
    ∀ {b2_31985 : bool_3} ->
      ∀ {A_31986 : Type‹s_31983›} ->
        ∀ {B_31987 : A_31986 -> proto_11} ->
          {(eq_1‹U› bool_3 ((xor_1) b1_31984 b2_31985) true_3)} ->
            ((ch_15)
              b1_31984 ((act1_13‹s_31983›) b2_31985 A_31986 B_31987)) ->
              IO (exists1_7‹s_31983,L›
                   A_31986
                   function _31991 : A_31986 -> L
                   | x_31993 => ((ch_15) b1_31984 ((B_31987) x_31993)))

#[program]
extern fork_21‹› :
  ∀ {P_31994 : proto_11} ->
    ((ch_15) false_4 P_31994) -o IO unit_2 -> IO ((ch_15) true_3 P_31994)

#[logical]
def DH_22‹› : nat_4 -> nat_4 -> proto_11 :=
  function DH_31999 : nat_4 -> nat_4 -> proto_11
  | p_32002 g_32003 =>
    ((act0_12‹U›)
      true_3 nat_4
      function _32004 : nat_4 -> proto_11
      | a_32006 =>
        ((act1_13‹U›)
          true_3 nat_4
          function _32007 : nat_4 -> proto_11
          | A_32009 =>
            ((act0_12‹U›)
              true_3
              (eq_1‹U›
                nat_4 A_32009 ((rem_9) ((pow_10) g_32003 a_32006) p_32002))
              function _32010 :
                (eq_1‹U›
                  nat_4 A_32009 ((rem_9) ((pow_10) g_32003 a_32006) p_32002)) ->
                  proto_11
              | _32012 =>
                ((act0_12‹U›)
                  false_4 nat_4
                  function _32013 : nat_4 -> proto_11
                  | b_32015 =>
                    ((act1_13‹U›)
                      false_4 nat_4
                      function _32016 : nat_4 -> proto_11
                      | B_32018 =>
                        ((act0_12‹U›)
                          false_4
                          (eq_1‹U›
                            nat_4 B_32018
                            ((rem_9) ((pow_10) g_32003 b_32015) p_32002))
                          function _32019 :
                            (eq_1‹U›
                              nat_4 B_32018
                              ((rem_9) ((pow_10) g_32003 b_32015) p_32002)) ->
                              proto_11
                          | _32021 => endp_14))))))

#[logical]
def DH_ch_23‹› : nat_4 -> nat_4 -> L :=
  function DH_ch_32024 : nat_4 -> nat_4 -> L
  | p_32027 g_32028 => ((ch_15) true_3 ((DH_22) p_32027 g_32028))

#[logical]
def DH_hc_24‹› : nat_4 -> nat_4 -> L :=
  function DH_hc_32031 : nat_4 -> nat_4 -> L
  | p_32034 g_32035 => ((ch_15) false_4 ((DH_22) p_32034 g_32035))

#[program]
def alice_25‹› :
  nat_4 ->
    ∀ (p_32037 : nat_4) ->
      ∀ (g_32038 : nat_4) -> ((DH_ch_23) p_32037 g_32038) -> IO unit_2
:=
  function alice_32040 :
    nat_4 ->
      ∀ (p_32042 : nat_4) ->
        ∀ (g_32043 : nat_4) -> ((DH_ch_23) p_32042 g_32043) -> IO unit_2
  | a_32045 p_32046 g_32047 c_32048 =>
    let* c_32049 :=
      ((send0_17‹U›)
        true_3 true_3 nat_4
        function _32050 : nat_4 -> proto_11
        | a_32052 =>
          ((act1_13‹U›)
            true_3 nat_4
            function _32053 : nat_4 -> proto_11
            | A_32055 =>
              ((act0_12‹U›)
                true_3
                (eq_1‹U›
                  nat_4 A_32055 ((rem_9) ((pow_10) g_32047 a_32052) p_32046))
                function _32056 :
                  (eq_1‹U›
                    nat_4 A_32055
                    ((rem_9) ((pow_10) g_32047 a_32052) p_32046)) -> proto_11
                | _32058 =>
                  ((act0_12‹U›)
                    false_4 nat_4
                    function _32059 : nat_4 -> proto_11
                    | b_32061 =>
                      ((act1_13‹U›)
                        false_4 nat_4
                        function _32062 : nat_4 -> proto_11
                        | B_32064 =>
                          ((act0_12‹U›)
                            false_4
                            (eq_1‹U›
                              nat_4 B_32064
                              ((rem_9) ((pow_10) g_32047 b_32061) p_32046))
                            function _32065 :
                              (eq_1‹U›
                                nat_4 B_32064
                                ((rem_9) ((pow_10) g_32047 b_32061) p_32046)) ->
                                proto_11
                            | _32067 => endp_14)))))
        refl_1‹U› c_32048 a_32045)
    in
    let* c_32068 :=
      ((send1_18‹U›)
        true_3 true_3 nat_4
        function _32069 : nat_4 -> proto_11
        | A_32071 =>
          ((act0_12‹U›)
            true_3
            (eq_1‹U›
              nat_4 A_32071 ((rem_9) ((pow_10) g_32047 a_32045) p_32046))
            function _32072 :
              (eq_1‹U›
                nat_4 A_32071 ((rem_9) ((pow_10) g_32047 a_32045) p_32046)) ->
                proto_11
            | _32074 =>
              ((act0_12‹U›)
                false_4 nat_4
                function _32075 : nat_4 -> proto_11
                | b_32077 =>
                  ((act1_13‹U›)
                    false_4 nat_4
                    function _32078 : nat_4 -> proto_11
                    | B_32080 =>
                      ((act0_12‹U›)
                        false_4
                        (eq_1‹U›
                          nat_4 B_32080
                          ((rem_9) ((pow_10) g_32047 b_32077) p_32046))
                        function _32081 :
                          (eq_1‹U›
                            nat_4 B_32080
                            ((rem_9) ((pow_10) g_32047 b_32077) p_32046)) ->
                            proto_11
                        | _32083 => endp_14))))
        refl_1‹U› c_32049 ((rem_9) ((pow_10) g_32047 a_32045) p_32046))
    in
    let* c_32084 :=
      ((send0_17‹U›)
        true_3 true_3
        (eq_1‹U›
          nat_4 ((rem_9) ((pow_10) g_32047 a_32045) p_32046)
          ((rem_9) ((pow_10) g_32047 a_32045) p_32046))
        function _32085 :
          (eq_1‹U›
            nat_4 ((rem_9) ((pow_10) g_32047 a_32045) p_32046)
            ((rem_9) ((pow_10) g_32047 a_32045) p_32046)) -> proto_11
        | _32087 =>
          ((act0_12‹U›)
            false_4 nat_4
            function _32088 : nat_4 -> proto_11
            | b_32090 =>
              ((act1_13‹U›)
                false_4 nat_4
                function _32091 : nat_4 -> proto_11
                | B_32093 =>
                  ((act0_12‹U›)
                    false_4
                    (eq_1‹U›
                      nat_4 B_32093
                      ((rem_9) ((pow_10) g_32047 b_32090) p_32046))
                    function _32094 :
                      (eq_1‹U›
                        nat_4 B_32093
                        ((rem_9) ((pow_10) g_32047 b_32090) p_32046)) ->
                        proto_11
                    | _32096 => endp_14)))
        refl_1‹U› c_32068 refl_1‹U›)
    in
    let* r_32097 :=
      ((recv0_19‹U›)
        true_3 false_4 nat_4
        function _32098 : nat_4 -> proto_11
        | b_32100 =>
          ((act1_13‹U›)
            false_4 nat_4
            function _32101 : nat_4 -> proto_11
            | B_32103 =>
              ((act0_12‹U›)
                false_4
                (eq_1‹U›
                  nat_4 B_32103 ((rem_9) ((pow_10) g_32047 b_32100) p_32046))
                function _32104 :
                  (eq_1‹U›
                    nat_4 B_32103
                    ((rem_9) ((pow_10) g_32047 b_32100) p_32046)) -> proto_11
                | _32106 => endp_14))
        refl_1‹U› c_32084)
    in
    match r_32097 in
      (exists0_6‹U,L›
        nat_4
        function _32108 : nat_4 -> L
        | x_32110 =>
          ((ch_15)
            true_3
            ((function _32111 : nat_4 -> proto_11
              | b_32113 =>
                ((act1_13‹U›)
                  false_4 nat_4
                  function _32114 : nat_4 -> proto_11
                  | B_32116 =>
                    ((act0_12‹U›)
                      false_4
                      (eq_1‹U›
                        nat_4 B_32116
                        ((rem_9) ((pow_10) g_32047 b_32113) p_32046))
                      function _32117 :
                        (eq_1‹U›
                          nat_4 B_32116
                          ((rem_9) ((pow_10) g_32047 b_32113) p_32046)) ->
                          proto_11
                      | _32119 => endp_14)))
              x_32110))) -o
        IO unit_2
    with
    | (ex0_9 b_32120 c_32121) =>
      let* r_32122 :=
        ((recv1_20‹U›)
          true_3 false_4 nat_4
          function _32123 : nat_4 -> proto_11
          | B_32125 =>
            ((act0_12‹U›)
              false_4
              (eq_1‹U›
                nat_4 B_32125 ((rem_9) ((pow_10) g_32047 b_32120) p_32046))
              function _32126 :
                (eq_1‹U›
                  nat_4 B_32125 ((rem_9) ((pow_10) g_32047 b_32120) p_32046)) ->
                  proto_11
              | _32128 => endp_14)
          refl_1‹U› c_32121)
      in
      match r_32122 in
        (exists1_7‹U,L›
          nat_4
          function _32130 : nat_4 -> L
          | x_32132 =>
            ((ch_15)
              true_3
              ((function _32133 : nat_4 -> proto_11
                | B_32135 =>
                  ((act0_12‹U›)
                    false_4
                    (eq_1‹U›
                      nat_4 B_32135
                      ((rem_9) ((pow_10) g_32047 b_32120) p_32046))
                    function _32136 :
                      (eq_1‹U›
                        nat_4 B_32135
                        ((rem_9) ((pow_10) g_32047 b_32120) p_32046)) ->
                        proto_11
                    | _32138 => endp_14))
                x_32132))) -o
          IO unit_2
      with
      | (ex1_10 B_32139 c_32140) =>
        let* r_32141 :=
          ((recv0_19‹U›)
            true_3 false_4
            (eq_1‹U›
              nat_4 B_32139 ((rem_9) ((pow_10) g_32047 b_32120) p_32046))
            function _32142 :
              (eq_1‹U›
                nat_4 B_32139 ((rem_9) ((pow_10) g_32047 b_32120) p_32046)) ->
                proto_11
            | _32144 => endp_14 refl_1‹U› c_32140)
        in
        match r_32141 in
          (exists0_6‹U,L›
            (eq_1‹U›
              nat_4 B_32139 ((rem_9) ((pow_10) g_32047 b_32120) p_32046))
            function _32146 :
              (eq_1‹U›
                nat_4 B_32139 ((rem_9) ((pow_10) g_32047 b_32120) p_32046)) ->
                L
            | x_32148 =>
              ((ch_15)
                true_3
                ((function _32149 :
                    (eq_1‹U›
                      nat_4 B_32139
                      ((rem_9) ((pow_10) g_32047 b_32120) p_32046)) ->
                      proto_11
                  | _32151 => endp_14) x_32148))) -o
            IO unit_2
        with
        | (ex0_9 pf_32152 c_32153) => ((close_16) true_3 c_32153)

#[program]
def bob_26‹› :
  nat_4 ->
    ∀ (p_32155 : nat_4) ->
      ∀ (g_32156 : nat_4) -> ((DH_hc_24) p_32155 g_32156) -> IO unit_2
:=
  function bob_32158 :
    nat_4 ->
      ∀ (p_32160 : nat_4) ->
        ∀ (g_32161 : nat_4) -> ((DH_hc_24) p_32160 g_32161) -> IO unit_2
  | b_32163 p_32164 g_32165 c_32166 =>
    let* r_32167 :=
      ((recv0_19‹U›)
        false_4 true_3 nat_4
        function _32168 : nat_4 -> proto_11
        | a_32170 =>
          ((act1_13‹U›)
            true_3 nat_4
            function _32171 : nat_4 -> proto_11
            | A_32173 =>
              ((act0_12‹U›)
                true_3
                (eq_1‹U›
                  nat_4 A_32173 ((rem_9) ((pow_10) g_32165 a_32170) p_32164))
                function _32174 :
                  (eq_1‹U›
                    nat_4 A_32173
                    ((rem_9) ((pow_10) g_32165 a_32170) p_32164)) -> proto_11
                | _32176 =>
                  ((act0_12‹U›)
                    false_4 nat_4
                    function _32177 : nat_4 -> proto_11
                    | b_32179 =>
                      ((act1_13‹U›)
                        false_4 nat_4
                        function _32180 : nat_4 -> proto_11
                        | B_32182 =>
                          ((act0_12‹U›)
                            false_4
                            (eq_1‹U›
                              nat_4 B_32182
                              ((rem_9) ((pow_10) g_32165 b_32179) p_32164))
                            function _32183 :
                              (eq_1‹U›
                                nat_4 B_32182
                                ((rem_9) ((pow_10) g_32165 b_32179) p_32164)) ->
                                proto_11
                            | _32185 => endp_14)))))
        refl_1‹U› c_32166)
    in
    match r_32167 in
      (exists0_6‹U,L›
        nat_4
        function _32187 : nat_4 -> L
        | x_32189 =>
          ((ch_15)
            false_4
            ((function _32190 : nat_4 -> proto_11
              | a_32192 =>
                ((act1_13‹U›)
                  true_3 nat_4
                  function _32193 : nat_4 -> proto_11
                  | A_32195 =>
                    ((act0_12‹U›)
                      true_3
                      (eq_1‹U›
                        nat_4 A_32195
                        ((rem_9) ((pow_10) g_32165 a_32192) p_32164))
                      function _32196 :
                        (eq_1‹U›
                          nat_4 A_32195
                          ((rem_9) ((pow_10) g_32165 a_32192) p_32164)) ->
                          proto_11
                      | _32198 =>
                        ((act0_12‹U›)
                          false_4 nat_4
                          function _32199 : nat_4 -> proto_11
                          | b_32201 =>
                            ((act1_13‹U›)
                              false_4 nat_4
                              function _32202 : nat_4 -> proto_11
                              | B_32204 =>
                                ((act0_12‹U›)
                                  false_4
                                  (eq_1‹U›
                                    nat_4 B_32204
                                    ((rem_9)
                                      ((pow_10) g_32165 b_32201) p_32164))
                                  function _32205 :
                                    (eq_1‹U›
                                      nat_4 B_32204
                                      ((rem_9)
                                        ((pow_10) g_32165 b_32201) p_32164)) ->
                                      proto_11
                                  | _32207 => endp_14))))))
              x_32189))) -o
        IO unit_2
    with
    | (ex0_9 a_32208 c_32209) =>
      let* r_32210 :=
        ((recv1_20‹U›)
          false_4 true_3 nat_4
          function _32211 : nat_4 -> proto_11
          | A_32213 =>
            ((act0_12‹U›)
              true_3
              (eq_1‹U›
                nat_4 A_32213 ((rem_9) ((pow_10) g_32165 a_32208) p_32164))
              function _32214 :
                (eq_1‹U›
                  nat_4 A_32213 ((rem_9) ((pow_10) g_32165 a_32208) p_32164)) ->
                  proto_11
              | _32216 =>
                ((act0_12‹U›)
                  false_4 nat_4
                  function _32217 : nat_4 -> proto_11
                  | b_32219 =>
                    ((act1_13‹U›)
                      false_4 nat_4
                      function _32220 : nat_4 -> proto_11
                      | B_32222 =>
                        ((act0_12‹U›)
                          false_4
                          (eq_1‹U›
                            nat_4 B_32222
                            ((rem_9) ((pow_10) g_32165 b_32219) p_32164))
                          function _32223 :
                            (eq_1‹U›
                              nat_4 B_32222
                              ((rem_9) ((pow_10) g_32165 b_32219) p_32164)) ->
                              proto_11
                          | _32225 => endp_14))))
          refl_1‹U› c_32209)
      in
      match r_32210 in
        (exists1_7‹U,L›
          nat_4
          function _32227 : nat_4 -> L
          | x_32229 =>
            ((ch_15)
              false_4
              ((function _32230 : nat_4 -> proto_11
                | A_32232 =>
                  ((act0_12‹U›)
                    true_3
                    (eq_1‹U›
                      nat_4 A_32232
                      ((rem_9) ((pow_10) g_32165 a_32208) p_32164))
                    function _32233 :
                      (eq_1‹U›
                        nat_4 A_32232
                        ((rem_9) ((pow_10) g_32165 a_32208) p_32164)) ->
                        proto_11
                    | _32235 =>
                      ((act0_12‹U›)
                        false_4 nat_4
                        function _32236 : nat_4 -> proto_11
                        | b_32238 =>
                          ((act1_13‹U›)
                            false_4 nat_4
                            function _32239 : nat_4 -> proto_11
                            | B_32241 =>
                              ((act0_12‹U›)
                                false_4
                                (eq_1‹U›
                                  nat_4 B_32241
                                  ((rem_9)
                                    ((pow_10) g_32165 b_32238) p_32164))
                                function _32242 :
                                  (eq_1‹U›
                                    nat_4 B_32241
                                    ((rem_9)
                                      ((pow_10) g_32165 b_32238) p_32164)) ->
                                    proto_11
                                | _32244 => endp_14)))))
                x_32229))) -o
          IO unit_2
      with
      | (ex1_10 A_32245 c_32246) =>
        let* r_32247 :=
          ((recv0_19‹U›)
            false_4 true_3
            (eq_1‹U›
              nat_4 A_32245 ((rem_9) ((pow_10) g_32165 a_32208) p_32164))
            function _32248 :
              (eq_1‹U›
                nat_4 A_32245 ((rem_9) ((pow_10) g_32165 a_32208) p_32164)) ->
                proto_11
            | _32250 =>
              ((act0_12‹U›)
                false_4 nat_4
                function _32251 : nat_4 -> proto_11
                | b_32253 =>
                  ((act1_13‹U›)
                    false_4 nat_4
                    function _32254 : nat_4 -> proto_11
                    | B_32256 =>
                      ((act0_12‹U›)
                        false_4
                        (eq_1‹U›
                          nat_4 B_32256
                          ((rem_9) ((pow_10) g_32165 b_32253) p_32164))
                        function _32257 :
                          (eq_1‹U›
                            nat_4 B_32256
                            ((rem_9) ((pow_10) g_32165 b_32253) p_32164)) ->
                            proto_11
                        | _32259 => endp_14)))
            refl_1‹U› c_32246)
        in
        match r_32247 in
          (exists0_6‹U,L›
            (eq_1‹U›
              nat_4 A_32245 ((rem_9) ((pow_10) g_32165 a_32208) p_32164))
            function _32261 :
              (eq_1‹U›
                nat_4 A_32245 ((rem_9) ((pow_10) g_32165 a_32208) p_32164)) ->
                L
            | x_32263 =>
              ((ch_15)
                false_4
                ((function _32264 :
                    (eq_1‹U›
                      nat_4 A_32245
                      ((rem_9) ((pow_10) g_32165 a_32208) p_32164)) ->
                      proto_11
                  | _32266 =>
                    ((act0_12‹U›)
                      false_4 nat_4
                      function _32267 : nat_4 -> proto_11
                      | b_32269 =>
                        ((act1_13‹U›)
                          false_4 nat_4
                          function _32270 : nat_4 -> proto_11
                          | B_32272 =>
                            ((act0_12‹U›)
                              false_4
                              (eq_1‹U›
                                nat_4 B_32272
                                ((rem_9) ((pow_10) g_32165 b_32269) p_32164))
                              function _32273 :
                                (eq_1‹U›
                                  nat_4 B_32272
                                  ((rem_9)
                                    ((pow_10) g_32165 b_32269) p_32164)) ->
                                  proto_11
                              | _32275 => endp_14))))
                  x_32263))) -o
            IO unit_2
        with
        | (ex0_9 pf_32276 c_32277) =>
          let* c_32278 :=
            ((send0_17‹U›)
              false_4 false_4 nat_4
              function _32279 : nat_4 -> proto_11
              | b_32281 =>
                ((act1_13‹U›)
                  false_4 nat_4
                  function _32282 : nat_4 -> proto_11
                  | B_32284 =>
                    ((act0_12‹U›)
                      false_4
                      (eq_1‹U›
                        nat_4 B_32284
                        ((rem_9) ((pow_10) g_32165 b_32281) p_32164))
                      function _32285 :
                        (eq_1‹U›
                          nat_4 B_32284
                          ((rem_9) ((pow_10) g_32165 b_32281) p_32164)) ->
                          proto_11
                      | _32287 => endp_14))
              refl_1‹U› c_32277 b_32163)
          in
          let* c_32288 :=
            ((send1_18‹U›)
              false_4 false_4 nat_4
              function _32289 : nat_4 -> proto_11
              | B_32291 =>
                ((act0_12‹U›)
                  false_4
                  (eq_1‹U›
                    nat_4 B_32291
                    ((rem_9) ((pow_10) g_32165 b_32163) p_32164))
                  function _32292 :
                    (eq_1‹U›
                      nat_4 B_32291
                      ((rem_9) ((pow_10) g_32165 b_32163) p_32164)) ->
                      proto_11
                  | _32294 => endp_14)
              refl_1‹U› c_32278
              ((rem_9) ((pow_10) g_32165 b_32163) p_32164))
          in
          let* c_32295 :=
            ((send0_17‹U›)
              false_4 false_4
              (eq_1‹U›
                nat_4 ((rem_9) ((pow_10) g_32165 b_32163) p_32164)
                ((rem_9) ((pow_10) g_32165 b_32163) p_32164))
              function _32296 :
                (eq_1‹U›
                  nat_4 ((rem_9) ((pow_10) g_32165 b_32163) p_32164)
                  ((rem_9) ((pow_10) g_32165 b_32163) p_32164)) -> proto_11
              | _32298 => endp_14 refl_1‹U› c_32288 refl_1‹U›)
          in ((close_16) false_4 c_32295)

-----------------------------------------

#[logical]
inductive eqU_9 where
| reflU_12 of layout[]

#[logical]
inductive eqL_8 where
| reflL_11 of layout[]

#[program]
inductive unit_2 where
| tt_2 of layout[]

#[program]
inductive bool_3 where
| true_3 of layout[]
| false_4 of layout[]

#[program]
inductive nat_4 where
| zero_5 of layout[]
| succ_6 of layout[R]

#[program]
inductive listUU_13 where
| nilUU_19 of layout[]

#[program]
inductive listUL_12 where
| nilUL_17 of layout[]

#[program]
inductive listLU_11 where
| nilLU_15 of layout[]

#[program]
inductive listLL_10 where
| nilLL_13 of layout[]

#[program]
inductive exists0UU_17 where
| ex0UU_24 of layout[N, R]

#[program]
inductive exists0UL_16 where
| ex0UL_23 of layout[N, R]

#[program]
inductive exists0LU_15 where
| ex0LU_22 of layout[N, R]

#[program]
inductive exists0LL_14 where
| ex0LL_21 of layout[N, R]

#[program]
inductive exists1UU_21 where
| ex1UU_28 of layout[R, R]

#[program]
inductive exists1UL_20 where
| ex1UL_27 of layout[R, R]

#[program]
inductive exists1LU_19 where
| ex1LU_26 of layout[R, R]

#[program]
inductive exists1LL_18 where
| ex1LL_25 of layout[R, R]

#[program]
def xor_1 :=
  fun xor_66564 (__66565, __66566) =>
    match __66565 with
    | true_3  =>
      match __66566 with
      | true_3  => false_4 | false_4  => true_3
      end
    | false_4  =>
      match __66566 with
      | true_3  => true_3 | false_4  => false_4
      end
    end

#[program]
def lte_2 :=
  fun lte_66567 (__66568, __66569) =>
    match __66568 with
    | zero_5  => true_3
    | succ_6 n_66570 =>
      match __66569 with
      | zero_5  => false_4 | succ_6 n_66571 => ((lte_66567) n_66570 n_66571)
      end
    end

#[program]
def lt_3 :=
  fun lt_66572 (x_66573, y_66574) => ((lte_2) (succ_6 x_66573) y_66574)

#[program]
def pred_4 :=
  fun pred_66575 (__66576) =>
    match __66576 with
    | zero_5  => zero_5 | succ_6 n_66577 => n_66577
    end

#[program]
def add_5 :=
  fun add_66578 (__66579, __66580) =>
    match __66579 with
    | zero_5  => __66580
    | succ_6 n_66581 => (succ_6 ((add_66578) n_66581 __66580))
    end

#[program]
def sub_6 :=
  fun sub_66582 (__66583, __66584) =>
    match __66584 with
    | zero_5  => __66583
    | succ_6 n_66585 => ((sub_66582) ((pred_4) __66583) n_66585)
    end

#[program]
def mul_7 :=
  fun mul_66586 (__66587, __66588) =>
    match __66587 with
    | zero_5  => zero_5
    | succ_6 n_66589 => ((add_5) __66588 ((mul_66586) n_66589 __66588))
    end

#[program]
def div_8 :=
  fun div_66590 (x_66591, y_66592) =>
    match ((lt_3) x_66591 y_66592) with
    | true_3  => zero_5
    | false_4  => (succ_6 ((div_66590) ((sub_6) x_66591 y_66592) y_66592))
    end

#[program]
def rem_9 :=
  fun rem_66593 (x_66594, y_66595) =>
    ((sub_6) x_66594 ((mul_7) ((div_8) x_66594 y_66595) y_66595))

#[program]
def pow_10 :=
  fun pow_66596 (__66597, __66598) =>
    match __66598 with
    | zero_5  => (succ_6 zero_5)
    | succ_6 n_66599 => ((mul_7) __66597 ((pow_66596) __66597 n_66599))
    end

#[logical]
extern proto_11

#[logical]
extern act0U_28

#[logical]
extern act0L_27

#[logical]
extern act1U_30

#[logical]
extern act1L_29

#[logical]
extern endp_14

#[logical]
extern ch_15

#[program]
extern close_16

#[program]
extern send0U_32

#[program]
extern send0L_31

#[program]
extern send1U_34

#[program]
extern send1L_33

#[program]
extern recv0U_36

#[program]
extern recv0L_35

#[program]
extern recv1U_38

#[program]
extern recv1L_37

#[program]
extern fork_21

#[logical]
def DH_22 := NULL

#[logical]
def DH_ch_23 := NULL

#[logical]
def DH_hc_24 := NULL

#[program]
def alice_25 :=
  fun alice_66600 (a_66601, p_66602, g_66603, c_66604) =>
    let* c_66605 := ((send0U_32) NULL NULL NULL NULL NULL c_66604 NULL) in
    let* c_66606 :=
      ((send1U_34)
        NULL NULL NULL NULL NULL c_66605
        ((rem_9) ((pow_10) g_66603 a_66601) p_66602))
    in
    let* c_66607 := ((send0U_32) NULL NULL NULL NULL NULL c_66606 NULL) in
    let* r_66608 := ((recv0U_36) NULL NULL NULL NULL NULL c_66607) in
    match r_66608 with
    | ex0UL_23 m_66609 n_66610 =>
      let* r_66611 := ((recv1U_38) NULL NULL NULL NULL NULL n_66610) in
      match r_66611 with
      | ex1UL_27 m_66612 n_66613 =>
        let* r_66614 := ((recv0U_36) NULL NULL NULL NULL NULL n_66613) in
        match r_66614 with
        | ex0UL_23 m_66615 n_66616 => ((close_16) NULL n_66616)
        end
      end
    end

#[program]
def bob_26 :=
  fun bob_66617 (b_66618, p_66619, g_66620, c_66621) =>
    let* r_66622 := ((recv0U_36) NULL NULL NULL NULL NULL c_66621) in
    match r_66622 with
    | ex0UL_23 m_66623 n_66624 =>
      let* r_66625 := ((recv1U_38) NULL NULL NULL NULL NULL n_66624) in
      match r_66625 with
      | ex1UL_27 m_66626 n_66627 =>
        let* r_66628 := ((recv0U_36) NULL NULL NULL NULL NULL n_66627) in
        match r_66628 with
        | ex0UL_23 m_66629 n_66630 =>
          let* c_66631 := ((send0U_32) NULL NULL NULL NULL NULL n_66630 NULL)
          in
          let* c_66632 :=
            ((send1U_34)
              NULL NULL NULL NULL NULL c_66631
              ((rem_9) ((pow_10) g_66620 b_66618) p_66619))
          in
          let* c_66633 := ((send0U_32) NULL NULL NULL NULL NULL c_66632 NULL)
          in ((close_16) NULL c_66633)
        end
      end
    end

-----------------------------------------

#[logical]
inductive eqU_9 where
| reflU_12 of layout[]

#[logical]
inductive eqL_8 where
| reflL_11 of layout[]

#[program]
inductive unit_2 where
| tt_2 of layout[]

#[program]
inductive bool_3 where
| true_3 of layout[]
| false_4 of layout[]

#[program]
inductive nat_4 where
| zero_5 of layout[]
| succ_6 of layout[R]

#[program]
inductive listUU_13 where
| nilUU_19 of layout[]

#[program]
inductive listUL_12 where
| nilUL_17 of layout[]

#[program]
inductive listLU_11 where
| nilLU_15 of layout[]

#[program]
inductive listLL_10 where
| nilLL_13 of layout[]

#[program]
inductive exists0UU_17 where
| ex0UU_24 of layout[N, R]

#[program]
inductive exists0UL_16 where
| ex0UL_23 of layout[N, R]

#[program]
inductive exists0LU_15 where
| ex0LU_22 of layout[N, R]

#[program]
inductive exists0LL_14 where
| ex0LL_21 of layout[N, R]

#[program]
inductive exists1UU_21 where
| ex1UU_28 of layout[R, R]

#[program]
inductive exists1UL_20 where
| ex1UL_27 of layout[R, R]

#[program]
inductive exists1LU_19 where
| ex1LU_26 of layout[R, R]

#[program]
inductive exists1LL_18 where
| ex1LL_25 of layout[R, R]

#[program]
def xor_1 :=
  fun xor_66704 (__66705, __66706) =>
    match __66705 with
    | true_3  =>
      match __66706 with
      | true_3  => false_4 | false_4  => true_3
      end
    | false_4  =>
      match __66706 with
      | true_3  => true_3 | false_4  => false_4
      end
    end

#[program]
def lte_2 :=
  fun lte_66707 (__66708, __66709) =>
    match __66708 with
    | zero_5  => true_3
    | succ_6 n_66710 =>
      match __66709 with
      | zero_5  => false_4 | succ_6 n_66711 => ((lte_66707) n_66710 n_66711)
      end
    end

#[program]
def lt_3 :=
  fun lt_66712 (x_66713, y_66714) => ((lte_2) (succ_6 x_66713) y_66714)

#[program]
def pred_4 :=
  fun pred_66715 (__66716) =>
    match __66716 with
    | zero_5  => zero_5 | succ_6 n_66717 => n_66717
    end

#[program]
def add_5 :=
  fun add_66718 (__66719, __66720) =>
    match __66719 with
    | zero_5  => __66720
    | succ_6 n_66721 => (succ_6 ((add_66718) n_66721 __66720))
    end

#[program]
def sub_6 :=
  fun sub_66722 (__66723, __66724) =>
    match __66724 with
    | zero_5  => __66723
    | succ_6 n_66725 => ((sub_66722) ((pred_4) __66723) n_66725)
    end

#[program]
def mul_7 :=
  fun mul_66726 (__66727, __66728) =>
    match __66727 with
    | zero_5  => zero_5
    | succ_6 n_66729 => ((add_5) __66728 ((mul_66726) n_66729 __66728))
    end

#[program]
def div_8 :=
  fun div_66730 (x_66731, y_66732) =>
    match ((lt_3) x_66731 y_66732) with
    | true_3  => zero_5
    | false_4  => (succ_6 ((div_66730) ((sub_6) x_66731 y_66732) y_66732))
    end

#[program]
def rem_9 :=
  fun rem_66733 (x_66734, y_66735) =>
    ((sub_6) x_66734 ((mul_7) ((div_8) x_66734 y_66735) y_66735))

#[program]
def pow_10 :=
  fun pow_66736 (__66737, __66738) =>
    match __66738 with
    | zero_5  => (succ_6 zero_5)
    | succ_6 n_66739 => ((mul_7) __66737 ((pow_66736) __66737 n_66739))
    end

#[logical]
extern proto_11

#[logical]
extern act0U_28

#[logical]
extern act0L_27

#[logical]
extern act1U_30

#[logical]
extern act1L_29

#[logical]
extern endp_14

#[logical]
extern ch_15

#[program]
extern close_16

#[program]
extern send0U_32

#[program]
extern send0L_31

#[program]
extern send1U_34

#[program]
extern send1L_33

#[program]
extern recv0U_36

#[program]
extern recv0L_35

#[program]
extern recv1U_38

#[program]
extern recv1L_37

#[program]
extern fork_21

#[logical]
def DH_22 := NULL

#[logical]
def DH_ch_23 := NULL

#[logical]
def DH_hc_24 := NULL

#[program]
def alice_25 :=
  fun alice_66740 (a_66741, p_66742, g_66743, c_66744) =>
    let* c_66745 := ((send0U_32) NULL NULL NULL NULL NULL c_66744 NULL) in
    let* c_66746 :=
      ((send1U_34)
        NULL NULL NULL NULL NULL c_66745
        ((rem_9) ((pow_10) g_66743 a_66741) p_66742))
    in
    let* c_66747 := ((send0U_32) NULL NULL NULL NULL NULL c_66746 NULL) in
    let* r_66748 := ((recv0U_36) NULL NULL NULL NULL NULL c_66747) in
    match r_66748 with
    | ex0UL_23 m_66749 n_66750 =>
      let* r_66751 := ((recv1U_38) NULL NULL NULL NULL NULL n_66750) in
      match r_66751 with
      | ex1UL_27 m_66752 n_66753 =>
        let* r_66754 := ((recv0U_36) NULL NULL NULL NULL NULL n_66753) in
        match r_66754 with
        | ex0UL_23 m_66755 n_66756 => ((close_16) NULL n_66756)
        end
      end
    end

#[program]
def bob_26 :=
  fun bob_66757 (b_66758, p_66759, g_66760, c_66761) =>
    let* r_66762 := ((recv0U_36) NULL NULL NULL NULL NULL c_66761) in
    match r_66762 with
    | ex0UL_23 m_66763 n_66764 =>
      let* r_66765 := ((recv1U_38) NULL NULL NULL NULL NULL n_66764) in
      match r_66765 with
      | ex1UL_27 m_66766 n_66767 =>
        let* r_66768 := ((recv0U_36) NULL NULL NULL NULL NULL n_66767) in
        match r_66768 with
        | ex0UL_23 m_66769 n_66770 =>
          let* c_66771 := ((send0U_32) NULL NULL NULL NULL NULL n_66770 NULL)
          in
          let* c_66772 :=
            ((send1U_34)
              NULL NULL NULL NULL NULL c_66771
              ((rem_9) ((pow_10) g_66760 b_66758) p_66759))
          in
          let* c_66773 := ((send0U_32) NULL NULL NULL NULL NULL c_66772 NULL)
          in ((close_16) NULL c_66773)
        end
      end
    end

-----------------------------------------

