[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "cmsort_ch"; relv = N;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "cmsort_ch"),
              [([(PId "xs")],
                (Some (Ch (true,
                         (Act (R, true,
                            (UOpr ("`",
                               (App [(Id ("msort", I)); (Id ("xs", I))]))),
                            (Binder ("_", End))))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "cmsort_worker"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("zs",
                       (Pi (R, L,
                          (App
                             [(Inst ("cmsort_ch", [(SId "t")], I));
                               (Id ("zs", I))]),
                          (Binder ("_", (IO (Id ("unit", I)))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cmsort_worker"),
              [([(PId "zero"); (PId "zs"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Send (Id ("c", I)));
                              (App
                                 [(Id ("just", I));
                                   (App [(Id ("msort", I)); (Id ("zs", I))])])
                              ]),
                         (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PConstr ("succ", [(PId "n")])); (PId "nil"); (PId "c")],
                 (Some (MLet (
                          (App
                             [(Send (Id ("c", I)));
                               (App [(Id ("just", I)); (Id ("nil", I))])]),
                          (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PConstr ("succ", [(PId "n")]));
                   (PBOpr ("::", (PId "z"), (PId "nil"))); (PId "c")],
                 (Some (MLet (
                          (App
                             [(Send (Id ("c", I)));
                               (App
                                  [(Id ("just", I));
                                    (BOpr ("::", (Id ("z", I)),
                                       (Id ("nil", I))))
                                    ])
                               ]),
                          (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PConstr ("succ", [(PId "n")])); (PId "zs"); (PId "c")],
                 (Some (Match (
                          [(R, (App [(Id ("split", I)); (Id ("zs", I))]),
                            (Some ("h1", IMeta)));
                            (N, (Id ("refl", I)),
                             (Some ("_",
                                    (BOpr ("=",
                                       (Let (R, (Id ("h1", I)),
                                          (Binder (
                                             (PBOpr (
                                                "\226\159\168,\226\159\169",
                                                (PId "xs"), (PId "ys"))),
                                             (App
                                                [(Id ("merge", I));
                                                  (App
                                                     [(Id ("msort", I));
                                                       (Id ("xs", I))]);
                                                  (App
                                                     [(Id ("msort", I));
                                                       (Id ("ys", I))])
                                                  ])
                                             ))
                                          )),
                                       (Let (R,
                                          (App
                                             [(Id ("split", I));
                                               (Id ("zs", I))]),
                                          (Binder (
                                             (PBOpr (
                                                "\226\159\168,\226\159\169",
                                                (PId "xs"), (PId "ys"))),
                                             (App
                                                [(Id ("merge", I));
                                                  (App
                                                     [(Id ("msort", I));
                                                       (Id ("xs", I))]);
                                                  (App
                                                     [(Id ("msort", I));
                                                       (Id ("ys", I))])
                                                  ])
                                             ))
                                          ))
                                       )))))
                            ],
                          None,
                          [([(PBOpr ("\226\159\168,\226\159\169",
                                (PId "xs0"), (PId "ys0")));
                              (PId "pf")],
                            (Some (MLet (
                                     (Fork
                                        (Fun (
                                           (Pi (R, L, IMeta,
                                              (Binder ("",
                                                 (IO (Id ("unit", I)))))
                                              )),
                                           (Binder (None,
                                              [([(PId "c1")],
                                                (Some (App
                                                         [(Id (
                                                             "cmsort_worker",
                                                             I));
                                                           (Id ("n", I));
                                                           (Id ("xs0", I));
                                                           (Id ("c1", I))])))
                                                ]
                                              )),
                                           []))),
                                     (Binder ((PId "r1"),
                                        (MLet (
                                           (Fork
                                              (Fun (
                                                 (Pi (R, L, IMeta,
                                                    (Binder ("",
                                                       (IO (Id ("unit", I)))
                                                       ))
                                                    )),
                                                 (Binder (None,
                                                    [([(PId "c2")],
                                                      (Some (App
                                                               [(Id (
                                                                   "cmsort_worker",
                                                                   I));
                                                                 (Id ("n", I
                                                                    ));
                                                                 (Id ("ys0",
                                                                    I));
                                                                 (Id ("c2", I
                                                                    ))
                                                                 ])))
                                                      ]
                                                    )),
                                                 []))),
                                           (Binder ((PId "r2"),
                                              (MLet ((Recv (Id ("r1", I))),
                                                 (Binder (
                                                    (PBOpr (
                                                       "\226\159\168,\226\159\169",
                                                       (PId "xs1"),
                                                       (PId "c1"))),
                                                    (BOpr (";",
                                                       (Close (Id ("c1", I))),
                                                       (MLet (
                                                          (Recv
                                                             (Id ("r2", I))),
                                                          (Binder (
                                                             (PBOpr (
                                                                "\226\159\168,\226\159\169",
                                                                (PId "ys1"),
                                                                (PId "c2"))),
                                                             (BOpr (";",
                                                                (Close
                                                                   (Id ("c2",
                                                                    I))),
                                                                (Match (
                                                                   [(R,
                                                                    (Id (
                                                                    "xs1", I
                                                                    )), None);
                                                                    (R,
                                                                    (Id (
                                                                    "ys1", I
                                                                    )), None)
                                                                    ],
                                                                   None,
                                                                   [([(PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "xs1")]));
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "ys1")]))
                                                                    ],
                                                                    (Some (
                                                                    Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (Id (
                                                                    "xs1", I
                                                                    ));
                                                                    (Id (
                                                                    "ys1", I
                                                                    ))])]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ))]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ))])])))
                                                                    )),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "rwl", I
                                                                    ));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U, IMeta,
                                                                    (Binder (
                                                                    "x",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "x")],
                                                                    (Some (
                                                                    UOpr (
                                                                    "`",
                                                                    (Id ("x",
                                                                    I))))))]
                                                                    )), 
                                                                    []));
                                                                    (Id (
                                                                    "pf", I));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]))))),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id ("c",
                                                                    I))),
                                                                    (Return
                                                                    (Id (
                                                                    "tt", I)))
                                                                    ))))))))
                                                                    ))))))))]
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("zs",
                    (Pi (R, L,
                       (App
                          [(Inst ("cmsort_ch", [(SId "t")], I));
                            (Id ("zs", I))]),
                       (Binder ("_", (IO (Id ("unit", I)))))))
                    ))
                 ))
              ))
           )))
       ));
    view = []}
  ]

-----------------------------------------

#[logical]
inductive eq_1‹s_434› (A_435 : Type‹s_434›) (m_436 : A_435):
  A_435 -> U
where
| refl_1 : (eq_1‹??_1› ?_1[0;0] m_436 m_436)

#[program]
def rwl_1‹s_438,r_439› :
  ∀ {A_440 : Type‹s_438›} ->
    ∀ {m_441 : A_440} ->
      ∀ {n_442 : A_440} ->
        ∀ {B_443 : A_440 -> Type‹r_439›} ->
          {(eq_1‹??_3› ?_3[0;0] m_441 n_442)} ->
            ((B_443) m_441) -> ((B_443) n_442)
:=
  fun rwl_447 :
    ∀ {A_448 : Type‹s_438›} ->
      ∀ {m_449 : A_448} ->
        ∀ {n_450 : A_448} ->
          ∀ {B_451 : A_448 -> Type‹r_439›} ->
            {(eq_1‹??_2› ?_2[0;0] m_449 n_450)} ->
              ((B_451) m_449) -> ((B_451) n_450)
  | A_455 m_456 n_457 B_458 refl_1 x_459 => x_459

#[program]
def rwr_2‹s_460,r_461› :
  ∀ {A_462 : Type‹s_460›} ->
    ∀ {m_463 : A_462} ->
      ∀ {n_464 : A_462} ->
        ∀ {B_465 : A_462 -> Type‹r_461›} ->
          {(eq_1‹??_5› ?_5[0;0] m_463 n_464)} ->
            ((B_465) n_464) -> ((B_465) m_463)
:=
  fun rwr_469 :
    ∀ {A_470 : Type‹s_460›} ->
      ∀ {m_471 : A_470} ->
        ∀ {n_472 : A_470} ->
          ∀ {B_473 : A_470 -> Type‹r_461›} ->
            {(eq_1‹??_4› ?_4[0;0] m_471 n_472)} ->
              ((B_473) n_472) -> ((B_473) m_471)
  | A_477 m_478 n_479 B_480 refl_1 x_481 => x_481

#[logical]
def congr_3‹s_482,r_483,t_484› :
  ∀ (A_485 : Type‹s_482›) ->
    ∀ (B_486 : Type‹r_483›) ->
      ∀ (m_487 : A_485) ->
        ∀ (n_488 : A_485) ->
          ∀ (f_489 : forall‹t_484›(__490 : A_485), B_486) ->
            (eq_1‹??_9› ?_10[0;0] m_487 n_488) ->
              (eq_1‹??_10› ?_11[0;0] ((f_489) m_487) ((f_489) n_488))
:=
  fun congr_492 :
    ∀ (A_493 : Type‹s_482›) ->
      ∀ (B_494 : Type‹r_483›) ->
        ∀ (m_495 : A_493) ->
          ∀ (n_496 : A_493) ->
            ∀ (f_497 : forall‹t_484›(__498 : A_493), B_494) ->
              (eq_1‹??_6› ?_6[0;0] m_495 n_496) ->
                (eq_1‹??_7› ?_7[0;0] ((f_497) m_495) ((f_497) n_496))
  | A_500 B_501 m_502 n_503 f_504 refl_1 =>
    (refl_1‹??_8› ?_8[0;0] ?_9[0;0])

#[logical]
def axiom_K_4‹› :
  ∀ {A_505 : U} ->
    ∀ {m_506 : A_505} ->
      ∀ (x_507 : (eq_1‹??_15› ?_18[0;0] m_506 m_506)) ->
        (eq_1‹??_17›
          ?_21[0;0] x_507 (refl_1‹??_16› ?_19[0;0] ?_20[0;0]))
:=
  fun axiom_K_508 :
    ∀ {A_509 : U} ->
      ∀ {m_510 : A_509} ->
        ∀ (x_511 : (eq_1‹??_11› ?_12[0;0] m_510 m_510)) ->
          (eq_1‹??_13›
            ?_15[0;0] x_511 (refl_1‹??_12› ?_13[0;0] ?_14[0;0]))
  | A_512 m_513 refl_1 => (refl_1‹??_14› ?_16[0;0] ?_17[0;0])

#[program]
inductive sing_2‹s_514,t_515› (A_516 : Type‹s_514›):
  A_516 -> Type‹t_515›
where
| just_2 (m_518 : A_516) : (sing_2‹??_18,??_19› ?_22[0;0] m_518)

#[logical]
def ssing_5‹s_519› :
  ∀ (A_520 : Type‹s_519›) -> A_520 -> Type‹s_519›
:=
  fun ssing_522 : ∀ (A_523 : Type‹s_519›) -> A_523 -> Type‹s_519›
  | A_525 m_526 => (sing_2‹s_519,s_519› A_525 m_526)

#[program]
def sing_elim_6‹s_527,t_528› :
  ∀ {A_529 : Type‹s_527›} ->
    ∀ {x_530 : A_529} -> (sing_2‹s_527,t_528› ?_24[0;0] x_530) -> A_529
:=
  fun sing_elim_532 :
    ∀ {A_533 : Type‹s_527›} ->
      ∀ {x_534 : A_533} ->
        (sing_2‹s_527,t_528› ?_23[0;0] x_534) -> A_533
  | A_536 x_537 (just_2 x_538) => x_538

#[logical]
def sing_uniq_7‹s_539,t_540› :
  ∀ (A_541 : Type‹s_539›) ->
    ∀ (x0_542 : A_541) ->
      ∀ (x_543 : (sing_2‹s_539,t_540› ?_31[0;0] x0_542)) ->
        (eq_1‹??_26›
          ?_34[0;0] x0_542
          ((sing_elim_6‹??_24,??_25›) ?_33[0;0] ?_32[0;0] x_543))
:=
  fun sing_uniq_544 :
    ∀ (A_545 : Type‹s_539›) ->
      ∀ (x0_546 : A_545) ->
        ∀ (x_547 : (sing_2‹s_539,t_540› ?_25[0;0] x0_546)) ->
          (eq_1‹??_22›
            ?_28[0;0] x0_546
            ((sing_elim_6‹??_20,??_21›) ?_27[0;0] ?_26[0;0] x_547))
  | A_548 x0_549 (just_2 _550) => (refl_1‹??_23› ?_29[0;0] ?_30[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_8‹› :
  ∀ (x_551 : unit_3) -> (eq_1‹??_30› ?_40[0;0] x_551 tt_3)
:=
  fun unit_eta_552 :
    ∀ (x_553 : unit_3) -> (eq_1‹??_27› ?_35[0;0] x_553 tt_3)
  | x_554 =>
    match x_554 in
      ∀ (x0_555 : ?_36[0;0]) -o (eq_1‹??_28› ?_37[0;0] x0_555 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_38[0;0] ?_39[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_9‹› : bool_4 -> bool_4 :=
  fun not_557 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_10‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_561 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _564 _565 => false_5

#[program]
def or_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_568 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _571 _572 => true_4

#[program]
def xor_12‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_575 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _578 _579 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_580 : nat_5) : nat_5

#[program]
def lte_13‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_583 : nat_5 -> nat_5 -> bool_4
  | zero_6 _586 => true_4
  | _587 zero_6 => false_5
  | (succ_7 x_588) (succ_7 y_589) => ((lte_583) x_588 y_589)

#[program]
def lt_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_592 : nat_5 -> nat_5 -> bool_4
  | x_595 y_596 => ((lte_13) (succ_7‹› x_595) y_596)

#[program]
def pred_15‹› : nat_5 -> nat_5 :=
  fun pred_598 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_600) => x_600

#[program]
def add_16‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_603 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_606 => y_606
  | (succ_7 x_607) y_608 => (succ_7‹› ((add_603) x_607 y_608))

#[program]
def sub_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_611 : nat_5 -> nat_5 -> nat_5
  | x_614 zero_6 => x_614
  | x_615 (succ_7 y_616) => ((sub_611) ((pred_15) x_615) y_616)

#[program]
def mul_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_619 : nat_5 -> nat_5 -> nat_5
  | zero_6 _622 => zero_6
  | (succ_7 x_623) y_624 => ((add_16) y_624 ((mul_619) x_623 y_624))

#[program]
def div_19‹› : nat_5 -> nat_5 -> ?_47[0;0] :=
  fun div_627 : nat_5 -> nat_5 -> ?_41[0;0]
  | x_630 y_631 =>
    match ((lt_14) x_630 y_631) in ?_42[0;0] -o ?_43[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_633 :=
        fun loop_634 : nat_5 -> nat_5 -> ?_44[0;0]
        | x_637 y_638 =>
          match ((sub_17) x_637 ((pred_15) y_638)) in ?_45[0;0] -o ?_46[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_640) => (succ_7‹› ((loop_634) x_640 y_638))
      in ((loop_633) x_630 y_631)

#[program]
def rem_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun rem_643 : nat_5 -> nat_5 -> ?_48[0;0]
  | x_646 y_647 => ((sub_17) x_646 ((mul_18) ((div_19) x_646 y_647) y_647))

#[program]
inductive list_6‹s_648,t_649› (A_650 : Type‹s_648›): Type‹t_649›
where
| nil_8 : (list_6‹??_31,??_32› A_650)
| cons_9
    (hd_651 : A_650) (tl_652 : (list_6‹??_33,t_649› A_650))
    : (list_6‹??_34,??_35› A_650)

#[program]
inductive exists0_7‹s_653,r_654› (A_655 : Type‹s_653›) (B_656 : 
A_655 -> Type‹r_654›): L where
| ex0_10
    {m_658 : A_655} (n_659 : ((B_656) m_658))
    : (exists0_7‹??_36,??_37› A_655 B_656)

#[program]
inductive exists1_8‹s_660,r_661› (A_662 : Type‹s_660›) (B_663 : 
A_662 -> Type‹r_661›): L where
| ex1_11
    (m_665 : A_662) (n_666 : ((B_663) m_665))
    : (exists1_8‹??_38,??_39› A_662 B_663)

#[logical]
def prod0_21‹s_667,r_668› :
  Type‹s_667› -> Type‹r_668› -> ?_53[0;0]
:=
  fun prod0_671 : Type‹s_667› -> Type‹r_668› -> ?_50[0;0]
  | A_674 B_675 =>
    (exists0_7‹??_40,??_41›
      A_674 fun _676 : ?_51[0;0] -> ?_52[0;0]
            | _678 => B_675)

#[logical]
def prod1_22‹s_679,r_680› :
  Type‹s_679› -> Type‹r_680› -> ?_57[0;0]
:=
  fun prod1_683 : Type‹s_679› -> Type‹r_680› -> ?_54[0;0]
  | A_686 B_687 =>
    (exists1_8‹??_42,??_43›
      A_686 fun _688 : ?_55[0;0] -> ?_56[0;0]
            | _690 => B_687)

#[program]
def pow_23‹› : int -> int -> int :=
  fun pow_693 : int -> int -> int
  | x_696 y_697 =>
    let loop_698 :=
      fun loop_699 : int -> int -> int
      | acc_702 y_703 =>
        match (__lte__ y_703 0) in ?_58[0;0] -o ?_59[0;0] with
        | true_4 => acc_702
        | false_5 => ((loop_699) (__mul__ x_696 acc_702) (__sub__ y_703 1))
    in ((loop_698) 1 y_697)

#[program]
def powm_24‹› : int -> int -> int -> int :=
  fun powm_708 : int -> int -> int -> int
  | x_712 y_713 m_714 =>
    let loop_715 :=
      fun loop_716 : int -> int -> int
      | acc_719 y_720 =>
        match (__lte__ y_720 0) in ?_60[0;0] -o ?_61[0;0] with
        | true_4 => acc_719
        | false_5 =>
          ((loop_716)
            (__mod__ (__mul__ x_712 acc_719) m_714) (__sub__ y_720 1))
    in ((loop_715) 1 y_713)

#[program]
def split_25‹t_722› :
  (list_6‹??_69,t_722› int) ->
    ((prod1_22‹??_72,??_73›)
      (list_6‹??_70,t_722› int) (list_6‹??_71,t_722› int))
:=
  fun split_724 :
    (list_6‹??_44,t_722› int) ->
      ((prod1_22‹??_47,??_48›)
        (list_6‹??_45,t_722› int) (list_6‹??_46,t_722› int))
  | nil_8 =>
    (ex1_11‹??_53,??_54›
      ?_64[0;0] ?_65[0;0] (nil_8‹??_49,??_50› ?_62[0;0])
      (nil_8‹??_51,??_52› ?_63[0;0]))
  | (cons_9 x_726 nil_8) =>
    (ex1_11‹??_61,??_62›
      ?_69[0;0] ?_70[0;0]
      (cons_9‹??_57,??_58›
        ?_67[0;0] x_726 (nil_8‹??_55,??_56› ?_66[0;0]))
      (nil_8‹??_59,??_60› ?_68[0;0]))
  | (cons_9 x_727 (cons_9 y_728 zs_729)) =>
    match ((split_724) zs_729) in ?_76[0;0] -o ?_75[0;0] with
    | (ex1_11 xs_731 ys_732) =>
      (ex1_11‹??_67,??_68›
        ?_73[0;0] ?_74[0;0] (cons_9‹??_63,??_64› ?_71[0;0] x_727 xs_731)
        (cons_9‹??_65,??_66› ?_72[0;0] y_728 ys_732))

#[program]
def merge_26‹t_733› :
  (list_6‹??_85,t_733› int) ->
    (list_6‹??_86,t_733› int) -o (list_6‹??_87,t_733› int)
:=
  fun merge_736 :
    (list_6‹??_74,t_733› int) ->
      (list_6‹??_75,t_733› int) -o (list_6‹??_76,t_733› int)
  | nil_8 ys_739 => ys_739
  | xs_740 nil_8 => xs_740
  | (cons_9 x_741 xs_742) (cons_9 y_743 ys_744) =>
    match (__lte__ x_741 y_743) in ?_77[0;0] -o ?_78[0;0] with
    | true_4 =>
      (cons_9‹??_79,??_80›
        ?_80[0;0] x_741
        ((merge_736) xs_742 (cons_9‹??_77,??_78› ?_79[0;0] y_743 ys_744)))
    | false_5 =>
      (cons_9‹??_83,??_84›
        ?_82[0;0] y_743
        ((merge_736) (cons_9‹??_81,??_82› ?_81[0;0] x_741 xs_742) ys_744))

#[program]
def msort_27‹t_746› :
  (list_6‹??_98,t_746› int) -> (list_6‹??_99,t_746› int)
:=
  fun msort_748 :
    (list_6‹??_88,t_746› int) -> (list_6‹??_89,t_746› int)
  | nil_8 => (nil_8‹??_90,??_91› ?_83[0;0])
  | (cons_9 z_750 nil_8) =>
    (cons_9‹??_94,??_95›
      ?_85[0;0] z_750 (nil_8‹??_92,??_93› ?_84[0;0]))
  | zs_751 =>
    match ((split_25‹??_96›) zs_751) in ?_87[0;0] -o ?_86[0;0] with
    | (ex1_11 xs_753 ys_754) =>
      ((merge_26‹??_97›) ((msort_748) xs_753) ((msort_748) ys_754))

#[logical]
def cmsort_ch_28‹t_755› : (list_6‹??_103,t_755› int) -> L :=
  fun cmsort_ch_757 : (list_6‹??_100,t_755› int) -> L
  | xs_759 =>
    ch⟨⇑(__760 :
           ((ssing_5‹??_102›) ?_88[0;0] ((msort_27‹??_101›) xs_759))) ⇒
           •⟩

#[program]
def cmsort_worker_29‹t_761› :
  nat_5 ->
    ∀ (zs_763 : (list_6‹??_140,t_761› int)) ->
      ((cmsort_ch_28‹t_761›) zs_763) -o IO unit_3
:=
  fun cmsort_worker_765 :
    nat_5 ->
      ∀ (zs_767 : (list_6‹??_104,t_761› int)) ->
        ((cmsort_ch_28‹t_761›) zs_767) -o IO unit_3
  | zero_6 zs_769 c_770 =>
    let* c_771 :=
      ((send c_770)
        (just_2‹??_106,??_107› ?_89[0;0] ((msort_27‹??_105›) zs_769)))
    in close c_771
  | (succ_7 n_772) nil_8 c_773 =>
    let* c_774 :=
      ((send c_773)
        (just_2‹??_110,??_111›
          ?_91[0;0] (nil_8‹??_108,??_109› ?_90[0;0])))
    in close c_774
  | (succ_7 n_775) (cons_9 z_776 nil_8) c_777 =>
    let* c_778 :=
      ((send c_777)
        (just_2‹??_116,??_117›
          ?_94[0;0]
          (cons_9‹??_114,??_115›
            ?_93[0;0] z_776 (nil_8‹??_112,??_113› ?_92[0;0]))))
    in close c_778
  | (succ_7 n_779) zs_780 c_781 =>
    match ((split_25‹??_118›) zs_780),
    (refl_1‹??_119› ?_95[0;0] ?_96[0;0]) in
      ∀ (h1_782 : ?_97[0;0]) -o
        {(eq_1‹??_127›
           ?_102[0;0]
           match h1_782 in ?_99[0;0] -o ?_98[0;0] with
           | (ex1_11 xs_785 ys_786) =>
             ((merge_26‹??_122›)
               ((msort_27‹??_120›) xs_785)
               ((msort_27‹??_121›) ys_786))
           match ((split_25‹??_123›) zs_780) in ?_101[0;0] -o ?_100[0;0]
           with
           | (ex1_11 xs_788 ys_789) =>
             ((merge_26‹??_126›)
               ((msort_27‹??_124›) xs_788)
               ((msort_27‹??_125›) ys_789)))} -o
          ?_103[0;0]
    with
    | (ex1_11 xs0_790 ys0_791), pf_792 =>
      let* r1_793 :=
        fork
          fun _794 : ?_104[0;0] -o IO unit_3
          | c1_796 => ((cmsort_worker_765) n_779 xs0_790 c1_796)
      in
      let* r2_797 :=
        fork
          fun _798 : ?_105[0;0] -o IO unit_3
          | c2_800 => ((cmsort_worker_765) n_779 ys0_791 c2_800)
      in
      let* _801 := recv r1_793 in
      match _801 in ?_121[0;0] -o ?_120[0;0] with
      | (ex1_11 xs1_803 c1_804) =>
        let* __805 := close c1_804 in
        let* _806 := recv r2_797 in
        match _806 in ?_119[0;0] -o ?_118[0;0] with
        | (ex1_11 ys1_808 c2_809) =>
          let* __810 := close c2_809 in
          match xs1_803, ys1_808 in ?_106[0;0] -o ?_107[0;0] -o ?_108[0;0]
          with
          | (just_2 xs1_813), (just_2 ys1_814) =>
            let zs1_815 :=
              ((just_2‹??_129,??_130›
                 ?_109[0;0] ((merge_26‹??_128›) xs1_813 ys1_814))
                : ((ssing_5‹??_134›)
                    ?_110[0;0]
                    ((merge_26‹??_133›)
                      ((msort_27‹??_131›) xs0_790)
                      ((msort_27‹??_132›) ys0_791))))
            in
            let zs1_816 :=
              (((rwl_1‹??_136,??_137›)
                 ?_116[0;0] ?_115[0;0] ?_114[0;0]
                 fun _817 : ?_111[0;0] -> ?_112[0;0]
                 | x_819 => ((ssing_5‹??_135›) ?_113[0;0] x_819) pf_792
                 zs1_815)
                : ((ssing_5‹??_139›)
                    ?_117[0;0] ((msort_27‹??_138›) zs_780)))
            in
            let* c_820 := ((send c_781) zs1_816) in
            let* __821 := close c_820 in return tt_3

-----------------------------------------

#[logical]
inductive eq_1‹s_12179› (A_12180 : Type‹s_12179›) (m_12181 : A_12180):
  A_12180 -> U
where
| refl_1 : (eq_1‹s_12179› A_12180 m_12181 m_12181)

#[program]
def rwl_1‹s_12183,r_12184› :
  ∀ {A_12185 : Type‹s_12183›} ->
    ∀ {m_12186 : A_12185} ->
      ∀ {n_12187 : A_12185} ->
        ∀ {B_12188 : A_12185 -> Type‹r_12184›} ->
          {(eq_1‹s_12183› A_12185 m_12186 n_12187)} ->
            ((B_12188) m_12186) -> ((B_12188) n_12187)
:=
  fun rwl_12192 :
    ∀ {A_12193 : Type‹s_12183›} ->
      ∀ {m_12194 : A_12193} ->
        ∀ {n_12195 : A_12193} ->
          ∀ {B_12196 : A_12193 -> Type‹r_12184›} ->
            {(eq_1‹s_12183› A_12193 m_12194 n_12195)} ->
              ((B_12196) m_12194) -> ((B_12196) n_12195)
  | A_12200 m_12201 n_12202 B_12203 refl_1 __12204 => __12204

#[program]
def rwr_2‹s_12205,r_12206› :
  ∀ {A_12207 : Type‹s_12205›} ->
    ∀ {m_12208 : A_12207} ->
      ∀ {n_12209 : A_12207} ->
        ∀ {B_12210 : A_12207 -> Type‹r_12206›} ->
          {(eq_1‹s_12205› A_12207 m_12208 n_12209)} ->
            ((B_12210) n_12209) -> ((B_12210) m_12208)
:=
  fun rwr_12214 :
    ∀ {A_12215 : Type‹s_12205›} ->
      ∀ {m_12216 : A_12215} ->
        ∀ {n_12217 : A_12215} ->
          ∀ {B_12218 : A_12215 -> Type‹r_12206›} ->
            {(eq_1‹s_12205› A_12215 m_12216 n_12217)} ->
              ((B_12218) n_12217) -> ((B_12218) m_12216)
  | A_12222 m_12223 n_12224 B_12225 refl_1 __12226 => __12226

#[logical]
def congr_3‹s_12227,r_12228,t_12229› :
  ∀ (A_12230 : Type‹s_12227›) ->
    ∀ (B_12231 : Type‹r_12228›) ->
      ∀ (m_12232 : A_12230) ->
        ∀ (n_12233 : A_12230) ->
          ∀ (f_12234 : forall‹t_12229›(__12235 : A_12230), B_12231) ->
            (eq_1‹s_12227› A_12230 m_12232 n_12233) ->
              (eq_1‹r_12228›
                B_12231 ((f_12234) m_12232) ((f_12234) n_12233))
:=
  fun congr_12237 :
    ∀ (A_12238 : Type‹s_12227›) ->
      ∀ (B_12239 : Type‹r_12228›) ->
        ∀ (m_12240 : A_12238) ->
          ∀ (n_12241 : A_12238) ->
            ∀ (f_12242 :
              forall‹t_12229›(__12243 : A_12238), B_12239) ->
              (eq_1‹s_12227› A_12238 m_12240 n_12241) ->
                (eq_1‹r_12228›
                  B_12239 ((f_12242) m_12240) ((f_12242) n_12241))
  | A_12245 B_12246 m_12247 n_12248 f_12249 refl_1 =>
    (refl_1‹r_12228› B_12246 ((f_12249) n_12248))

#[logical]
def axiom_K_4‹› :
  ∀ {A_12250 : U} ->
    ∀ {m_12251 : A_12250} ->
      ∀ (x_12252 : (eq_1‹U› A_12250 m_12251 m_12251)) ->
        (eq_1‹U›
          (eq_1‹U› A_12250 m_12251 m_12251) x_12252
          (refl_1‹U› A_12250 m_12251))
:=
  fun axiom_K_12253 :
    ∀ {A_12254 : U} ->
      ∀ {m_12255 : A_12254} ->
        ∀ (x_12256 : (eq_1‹U› A_12254 m_12255 m_12255)) ->
          (eq_1‹U›
            (eq_1‹U› A_12254 m_12255 m_12255) x_12256
            (refl_1‹U› A_12254 m_12255))
  | A_12257 m_12258 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_12257 m_12258 m_12258) (refl_1‹U› A_12257 m_12258))

#[program]
inductive sing_2‹s_12259,t_12260› (A_12261 : Type‹s_12259›):
  A_12261 -> Type‹t_12260›
where
| just_2 (m_12263 : A_12261) : (sing_2‹s_12259,t_12260› A_12261 m_12263)

#[logical]
def ssing_5‹s_12264› :
  ∀ (A_12265 : Type‹s_12264›) -> A_12265 -> Type‹s_12264›
:=
  fun ssing_12267 :
    ∀ (A_12268 : Type‹s_12264›) -> A_12268 -> Type‹s_12264›
  | A_12270 m_12271 => (sing_2‹s_12264,s_12264› A_12270 m_12271)

#[program]
def sing_elim_6‹s_12272,t_12273› :
  ∀ {A_12274 : Type‹s_12272›} ->
    ∀ {x_12275 : A_12274} ->
      (sing_2‹s_12272,t_12273› A_12274 x_12275) -> A_12274
:=
  fun sing_elim_12277 :
    ∀ {A_12278 : Type‹s_12272›} ->
      ∀ {x_12279 : A_12278} ->
        (sing_2‹s_12272,t_12273› A_12278 x_12279) -> A_12278
  | A_12281 x_12282 (just_2 m_12283) => m_12283

#[logical]
def sing_uniq_7‹s_12284,t_12285› :
  ∀ (A_12286 : Type‹s_12284›) ->
    ∀ (x0_12287 : A_12286) ->
      ∀ (x_12288 : (sing_2‹s_12284,t_12285› A_12286 x0_12287)) ->
        (eq_1‹s_12284›
          A_12286 x0_12287
          ((sing_elim_6‹s_12284,t_12285›) A_12286 x0_12287 x_12288))
:=
  fun sing_uniq_12289 :
    ∀ (A_12290 : Type‹s_12284›) ->
      ∀ (x0_12291 : A_12290) ->
        ∀ (x_12292 : (sing_2‹s_12284,t_12285› A_12290 x0_12291)) ->
          (eq_1‹s_12284›
            A_12290 x0_12291
            ((sing_elim_6‹s_12284,t_12285›) A_12290 x0_12291 x_12292))
  | A_12293 x0_12294 (just_2 m_12295) =>
    (refl_1‹s_12284› A_12293 m_12295)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_8‹› :
  ∀ (x_12296 : unit_3) -> (eq_1‹U› unit_3 x_12296 tt_3)
:=
  fun unit_eta_12297 :
    ∀ (x_12298 : unit_3) -> (eq_1‹U› unit_3 x_12298 tt_3)
  | x_12299 =>
    match x_12299 in
      ∀ (x0_12300 : unit_3) -o (eq_1‹U› unit_3 x0_12300 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_9‹› : bool_4 -> bool_4 :=
  fun not_12302 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_10‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_12306 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __12309 => false_5

#[program]
def or_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_12312 : bool_4 -> bool_4 -> bool_4
  | true_4 __12315 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_12‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_12318 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_12321 : nat_5) : nat_5

#[program]
def lte_13‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_12324 : nat_5 -> nat_5 -> bool_4
  | zero_6 __12327 => true_4
  | (succ_7 n_12328) zero_6 => false_5
  | (succ_7 n_12329) (succ_7 n_12330) => ((lte_12324) n_12329 n_12330)

#[program]
def lt_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_12333 : nat_5 -> nat_5 -> bool_4
  | x_12336 y_12337 => ((lte_13) (succ_7‹› x_12336) y_12337)

#[program]
def pred_15‹› : nat_5 -> nat_5 :=
  fun pred_12339 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_12341) => n_12341

#[program]
def add_16‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_12344 : nat_5 -> nat_5 -> nat_5
  | zero_6 __12347 => __12347
  | (succ_7 n_12348) __12349 => (succ_7‹› ((add_12344) n_12348 __12349))

#[program]
def sub_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_12352 : nat_5 -> nat_5 -> nat_5
  | __12355 zero_6 => __12355
  | __12356 (succ_7 n_12357) => ((sub_12352) ((pred_15) __12356) n_12357)

#[program]
def mul_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_12360 : nat_5 -> nat_5 -> nat_5
  | zero_6 __12363 => zero_6
  | (succ_7 n_12364) __12365 =>
    ((add_16) __12365 ((mul_12360) n_12364 __12365))

#[program]
def div_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_12368 : nat_5 -> nat_5 -> nat_5
  | x_12371 y_12372 =>
    match ((lt_14) x_12371 y_12372) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_12374 :=
        fun loop_12375 : nat_5 -> nat_5 -> nat_5
        | x_12378 y_12379 =>
          match ((sub_17) x_12378 ((pred_15) y_12379)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_12381) => (succ_7‹› ((loop_12375) n_12381 y_12379))
      in ((loop_12374) x_12371 y_12372)

#[program]
def rem_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_12384 : nat_5 -> nat_5 -> nat_5
  | x_12387 y_12388 =>
    ((sub_17) x_12387 ((mul_18) ((div_19) x_12387 y_12388) y_12388))

#[program]
inductive list_6‹s_12389,t_12390› (A_12391 : Type‹s_12389›):
  Type‹t_12390›
where
| nil_8 : (list_6‹s_12389,t_12390› A_12391)
| cons_9
    (hd_12392 : A_12391) (tl_12393 : (list_6‹s_12389,t_12390› A_12391))
    : (list_6‹s_12389,t_12390› A_12391)

#[program]
inductive exists0_7‹s_12394,r_12395› (A_12396 : Type‹s_12394›) (B_12397 : 
A_12396 -> Type‹r_12395›): L where
| ex0_10
    {m_12399 : A_12396} (n_12400 : ((B_12397) m_12399))
    : (exists0_7‹s_12394,r_12395› A_12396 B_12397)

#[program]
inductive exists1_8‹s_12401,r_12402› (A_12403 : Type‹s_12401›) (B_12404 : 
A_12403 -> Type‹r_12402›): L where
| ex1_11
    (m_12406 : A_12403) (n_12407 : ((B_12404) m_12406))
    : (exists1_8‹s_12401,r_12402› A_12403 B_12404)

#[logical]
def prod0_21‹s_12408,r_12409› :
  Type‹s_12408› -> Type‹r_12409› -> L
:=
  fun prod0_12412 : Type‹s_12408› -> Type‹r_12409› -> L
  | A_12415 B_12416 =>
    (exists0_7‹s_12408,r_12409›
      A_12415 fun _12417 : A_12415 -> Type‹r_12409›
              | __12419 => B_12416)

#[logical]
def prod1_22‹s_12420,r_12421› :
  Type‹s_12420› -> Type‹r_12421› -> L
:=
  fun prod1_12424 : Type‹s_12420› -> Type‹r_12421› -> L
  | A_12427 B_12428 =>
    (exists1_8‹s_12420,r_12421›
      A_12427 fun _12429 : A_12427 -> Type‹r_12421›
              | __12431 => B_12428)

#[program]
def pow_23‹› : int -> int -> int :=
  fun pow_12434 : int -> int -> int
  | x_12437 y_12438 =>
    let loop_12439 :=
      fun loop_12440 : int -> int -> int
      | acc_12443 y_12444 =>
        match (__lte__ y_12444 0) in bool_4 -o int with
        | true_4 => acc_12443
        | false_5 =>
          ((loop_12440) (__mul__ x_12437 acc_12443) (__sub__ y_12444 1))
    in ((loop_12439) 1 y_12438)

#[program]
def powm_24‹› : int -> int -> int -> int :=
  fun powm_12449 : int -> int -> int -> int
  | x_12453 y_12454 m_12455 =>
    let loop_12456 :=
      fun loop_12457 : int -> int -> int
      | acc_12460 y_12461 =>
        match (__lte__ y_12461 0) in bool_4 -o int with
        | true_4 => acc_12460
        | false_5 =>
          ((loop_12457)
            (__mod__ (__mul__ x_12453 acc_12460) m_12455) (__sub__ y_12461 1))
    in ((loop_12456) 1 y_12454)

#[program]
def split_25‹t_12463› :
  (list_6‹U,t_12463› int) ->
    ((prod1_22‹t_12463,t_12463›)
      (list_6‹U,t_12463› int) (list_6‹U,t_12463› int))
:=
  fun split_12465 :
    (list_6‹U,t_12463› int) ->
      ((prod1_22‹t_12463,t_12463›)
        (list_6‹U,t_12463› int) (list_6‹U,t_12463› int))
  | nil_8 =>
    (ex1_11‹t_12463,t_12463›
      (list_6‹U,t_12463› int)
      fun _12467 : (list_6‹U,t_12463› int) -> Type‹t_12463›
      | __12469 => (list_6‹U,t_12463› int) (nil_8‹U,t_12463› int)
      (nil_8‹U,t_12463› int))
  | (cons_9 hd_12470 nil_8) =>
    (ex1_11‹t_12463,t_12463›
      (list_6‹U,t_12463› int)
      fun _12471 : (list_6‹U,t_12463› int) -> Type‹t_12463›
      | __12473 => (list_6‹U,t_12463› int)
      (cons_9‹U,t_12463› int hd_12470 (nil_8‹U,t_12463› int))
      (nil_8‹U,t_12463› int))
  | (cons_9 hd_12474 (cons_9 hd_12475 tl_12476)) =>
    match ((split_12465) tl_12476) in
      ((prod1_22‹t_12463,t_12463›)
        (list_6‹U,t_12463› int) (list_6‹U,t_12463› int)) -o
        ((prod1_22‹t_12463,t_12463›)
          (list_6‹U,t_12463› int) (list_6‹U,t_12463› int))
    with
    | (ex1_11 m_12478 n_12479) =>
      (ex1_11‹t_12463,t_12463›
        (list_6‹U,t_12463› int)
        fun _12480 : (list_6‹U,t_12463› int) -> Type‹t_12463›
        | __12482 => (list_6‹U,t_12463› int)
        (cons_9‹U,t_12463› int hd_12474 m_12478)
        (cons_9‹U,t_12463› int hd_12475 n_12479))

#[program]
def merge_26‹t_12483› :
  (list_6‹U,t_12483› int) ->
    (list_6‹U,t_12483› int) -o (list_6‹U,t_12483› int)
:=
  fun merge_12486 :
    (list_6‹U,t_12483› int) ->
      (list_6‹U,t_12483› int) -o (list_6‹U,t_12483› int)
  | nil_8 __12489 => __12489
  | (cons_9 hd_12490 tl_12491) nil_8 =>
    (cons_9‹U,t_12483› int hd_12490 tl_12491)
  | (cons_9 hd_12492 tl_12493) (cons_9 hd_12494 tl_12495) =>
    match (__lte__ hd_12492 hd_12494) in
      bool_4 -o (list_6‹U,t_12483› int)
    with
    | true_4 =>
      (cons_9‹U,t_12483›
        int hd_12492
        ((merge_12486)
          tl_12493 (cons_9‹U,t_12483› int hd_12494 tl_12495)))
    | false_5 =>
      (cons_9‹U,t_12483›
        int hd_12494
        ((merge_12486)
          (cons_9‹U,t_12483› int hd_12492 tl_12493) tl_12495))

#[program]
def msort_27‹t_12497› :
  (list_6‹U,t_12497› int) -> (list_6‹U,t_12497› int)
:=
  fun msort_12499 :
    (list_6‹U,t_12497› int) -> (list_6‹U,t_12497› int)
  | nil_8 => (nil_8‹U,t_12497› int)
  | (cons_9 hd_12501 nil_8) =>
    (cons_9‹U,t_12497› int hd_12501 (nil_8‹U,t_12497› int))
  | (cons_9 hd_12502 (cons_9 hd_12503 tl_12504)) =>
    match ((split_25‹t_12497›)
            (cons_9‹U,t_12497›
              int hd_12502 (cons_9‹U,t_12497› int hd_12503 tl_12504))) in
      ((prod1_22‹t_12497,t_12497›)
        (list_6‹U,t_12497› int) (list_6‹U,t_12497› int)) -o
        (list_6‹U,t_12497› int)
    with
    | (ex1_11 m_12506 n_12507) =>
      ((merge_26‹t_12497›)
        ((msort_12499) m_12506) ((msort_12499) n_12507))

#[logical]
def cmsort_ch_28‹t_12508› : (list_6‹U,t_12508› int) -> L :=
  fun cmsort_ch_12510 : (list_6‹U,t_12508› int) -> L
  | xs_12512 =>
    ch⟨⇑(__12513 :
           ((ssing_5‹t_12508›)
             (list_6‹U,t_12508› int) ((msort_27‹t_12508›) xs_12512))) ⇒
           •⟩

#[program]
def cmsort_worker_29‹t_12514› :
  nat_5 ->
    ∀ (zs_12516 : (list_6‹U,t_12514› int)) ->
      ((cmsort_ch_28‹t_12514›) zs_12516) -o IO unit_3
:=
  fun cmsort_worker_12518 :
    nat_5 ->
      ∀ (zs_12520 : (list_6‹U,t_12514› int)) ->
        ((cmsort_ch_28‹t_12514›) zs_12520) -o IO unit_3
  | zero_6 zs_12522 __12523 =>
    let* c_12524 :=
      ((send __12523)
        (just_2‹t_12514,t_12514›
          (list_6‹U,t_12514› int) ((msort_27‹t_12514›) zs_12522)))
    in close c_12524
  | (succ_7 n_12525) nil_8 __12526 =>
    let* c_12527 :=
      ((send __12526)
        (just_2‹t_12514,t_12514›
          (list_6‹U,t_12514› int) (nil_8‹U,t_12514› int)))
    in close c_12527
  | (succ_7 n_12528) (cons_9 hd_12529 nil_8) __12530 =>
    let* c_12531 :=
      ((send __12530)
        (just_2‹t_12514,t_12514›
          (list_6‹U,t_12514› int)
          (cons_9‹U,t_12514› int hd_12529 (nil_8‹U,t_12514› int))))
    in close c_12531
  | (succ_7 n_12532) (cons_9 hd_12533 (cons_9 hd_12534 tl_12535)) __12536 =>
    match ((split_25‹t_12514›)
            (cons_9‹U,t_12514›
              int hd_12533 (cons_9‹U,t_12514› int hd_12534 tl_12535))),
    (refl_1‹t_12514›
      (list_6‹U,t_12514› int)
      match ((split_25‹t_12514›)
              (cons_9‹U,t_12514›
                int hd_12533 (cons_9‹U,t_12514› int hd_12534 tl_12535))) in
        ((prod1_22‹t_12514,t_12514›)
          (list_6‹U,t_12514› int) (list_6‹U,t_12514› int)) -o
          (list_6‹U,t_12514› int)
      with
      | (ex1_11 m_12538 n_12539) =>
        ((merge_26‹t_12514›)
          ((msort_27‹t_12514›) m_12538) ((msort_27‹t_12514›) n_12539))) in
      ∀ (h1_12540 :
        ((prod1_22‹t_12514,t_12514›)
          (list_6‹U,t_12514› int) (list_6‹U,t_12514› int))) -o
        {(eq_1‹t_12514›
           (list_6‹U,t_12514› int)
           match h1_12540 in
             ((prod1_22‹t_12514,t_12514›)
               (list_6‹U,t_12514› int) (list_6‹U,t_12514› int)) -o
               (list_6‹U,t_12514› int)
           with
           | (ex1_11 m_12543 n_12544) =>
             ((merge_26‹t_12514›)
               ((msort_27‹t_12514›) m_12543)
               ((msort_27‹t_12514›) n_12544))
           match ((split_25‹t_12514›)
                   (cons_9‹U,t_12514›
                     int hd_12533
                     (cons_9‹U,t_12514› int hd_12534 tl_12535))) in
             ((prod1_22‹t_12514,t_12514›)
               (list_6‹U,t_12514› int) (list_6‹U,t_12514› int)) -o
               (list_6‹U,t_12514› int)
           with
           | (ex1_11 m_12546 n_12547) =>
             ((merge_26‹t_12514›)
               ((msort_27‹t_12514›) m_12546)
               ((msort_27‹t_12514›) n_12547)))} -o
          IO unit_3
    with
    | (ex1_11 m_12548 n_12549), __12550 =>
      let* r1_12551 :=
        fork
          fun _12552 : ((cmsort_ch_28‹t_12514›) m_12548) -o IO unit_3
          | _12554 => ((cmsort_worker_12518) n_12532 m_12548 _12554)
      in
      let* r2_12555 :=
        fork
          fun _12556 : ((cmsort_ch_28‹t_12514›) n_12549) -o IO unit_3
          | _12558 => ((cmsort_worker_12518) n_12532 n_12549 _12558)
      in
      let* _12559 := recv r1_12551 in
      match _12559 in
        (exists1_8‹t_12514,L›
          ((ssing_5‹t_12514›)
            (list_6‹U,t_12514› int) ((msort_27‹t_12514›) m_12548))
          fun _12561 :
            ((ssing_5‹t_12514›)
              (list_6‹U,t_12514› int) ((msort_27‹t_12514›) m_12548)) ->
              L
          | __12563 => hc⟨•⟩) -o IO unit_3
      with
      | (ex1_11 m_12564 n_12565) =>
        let* __12566 := close n_12565 in
        let* _12567 := recv r2_12555 in
        match _12567 in
          (exists1_8‹t_12514,L›
            ((ssing_5‹t_12514›)
              (list_6‹U,t_12514› int) ((msort_27‹t_12514›) n_12549))
            fun _12569 :
              ((ssing_5‹t_12514›)
                (list_6‹U,t_12514› int) ((msort_27‹t_12514›) n_12549)) ->
                L
            | __12571 => hc⟨•⟩) -o IO unit_3
        with
        | (ex1_11 m_12572 n_12573) =>
          let* __12574 := close n_12573 in
          match m_12564, m_12572 in
            ((ssing_5‹t_12514›)
              (list_6‹U,t_12514› int) ((msort_27‹t_12514›) m_12548)) -o
              ((ssing_5‹t_12514›)
                (list_6‹U,t_12514› int) ((msort_27‹t_12514›) n_12549)) -o
                IO unit_3
          with
          | (just_2 m_12577), (just_2 m_12578) =>
            let zs1_12579 :=
              ((just_2‹t_12514,t_12514›
                 (list_6‹U,t_12514› int)
                 ((merge_26‹t_12514›) m_12577 m_12578))
                : ((ssing_5‹t_12514›)
                    (list_6‹U,t_12514› int)
                    ((merge_26‹t_12514›)
                      ((msort_27‹t_12514›) m_12548)
                      ((msort_27‹t_12514›) n_12549))))
            in
            let zs1_12580 :=
              (((rwl_1‹t_12514,t_12514›)
                 (list_6‹U,t_12514› int)
                 ((merge_26‹t_12514›)
                   ((msort_27‹t_12514›) m_12548)
                   ((msort_27‹t_12514›) n_12549))
                 match ((split_25‹t_12514›)
                         (cons_9‹U,t_12514›
                           int hd_12533
                           (cons_9‹U,t_12514› int hd_12534 tl_12535))) in
                   ((prod1_22‹t_12514,t_12514›)
                     (list_6‹U,t_12514› int) (list_6‹U,t_12514› int)) -o
                     (list_6‹U,t_12514› int)
                 with
                 | (ex1_11 m_12582 n_12583) =>
                   ((merge_26‹t_12514›)
                     ((msort_27‹t_12514›) m_12582)
                     ((msort_27‹t_12514›) n_12583))
                 fun _12584 :
                   (list_6‹U,t_12514› int) -> Type‹t_12514›
                 | __12586 =>
                   ((ssing_5‹t_12514›)
                     (list_6‹U,t_12514› int) __12586)
                 __12550 zs1_12579)
                : ((ssing_5‹t_12514›)
                    (list_6‹U,t_12514› int)
                    ((msort_27‹t_12514›)
                      (cons_9‹U,t_12514›
                        int hd_12533
                        (cons_9‹U,t_12514› int hd_12534 tl_12535)))))
            in
            let* c_12587 := ((send __12536) zs1_12580) in
            let* __12588 := close c_12587 in return tt_3

-----------------------------------------

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_33 :=
  fun rwl_22159 {A_22160} -> {m_22161} -> {n_22162} -> {B_22163} ->
  {__22164} -> (__22165) ->
    match {NULL} with
    | reflU_13  => __22165
    end

#[program]
def rwlUL_32 :=
  fun rwl_22166 {A_22167} -> {m_22168} -> {n_22169} -> {B_22170} ->
  {__22171} -> (__22172) ->
    match {NULL} with
    | reflU_13  => __22172
    end

#[program]
def rwlLU_31 :=
  fun rwl_22173 {A_22174} -> {m_22175} -> {n_22176} -> {B_22177} ->
  {__22178} -> (__22179) ->
    match {NULL} with
    | reflL_12  => __22179
    end

#[program]
def rwlLL_30 :=
  fun rwl_22180 {A_22181} -> {m_22182} -> {n_22183} -> {B_22184} ->
  {__22185} -> (__22186) ->
    match {NULL} with
    | reflL_12  => __22186
    end

#[program]
def rwrUU_37 :=
  fun rwr_22187 {A_22188} -> {m_22189} -> {n_22190} -> {B_22191} ->
  {__22192} -> (__22193) ->
    match {NULL} with
    | reflU_13  => __22193
    end

#[program]
def rwrUL_36 :=
  fun rwr_22194 {A_22195} -> {m_22196} -> {n_22197} -> {B_22198} ->
  {__22199} -> (__22200) ->
    match {NULL} with
    | reflU_13  => __22200
    end

#[program]
def rwrLU_35 :=
  fun rwr_22201 {A_22202} -> {m_22203} -> {n_22204} -> {B_22205} ->
  {__22206} -> (__22207) ->
    match {NULL} with
    | reflL_12  => __22207
    end

#[program]
def rwrLL_34 :=
  fun rwr_22208 {A_22209} -> {m_22210} -> {n_22211} -> {B_22212} ->
  {__22213} -> (__22214) ->
    match {NULL} with
    | reflL_12  => __22214
    end

#[logical]
def congrUUU_45 := NULL

#[logical]
def congrUUL_44 := NULL

#[logical]
def congrULU_43 := NULL

#[logical]
def congrULL_42 := NULL

#[logical]
def congrLUU_41 := NULL

#[logical]
def congrLUL_40 := NULL

#[logical]
def congrLLU_39 := NULL

#[logical]
def congrLLL_38 := NULL

#[logical]
def axiom_K_4 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_47 := NULL

#[logical]
def ssingL_46 := NULL

#[program]
def sing_elimUU_51 :=
  fun sing_elim_22215 {A_22216} -> {x_22217} -> (__22218) ->
    match __22218 with
    | justUU_17 m_22219 => m_22219
    end

#[program]
def sing_elimUL_50 :=
  fun sing_elim_22220 {A_22221} -> {x_22222} -> (__22223) ->
    match __22223 with
    | justUL_16 m_22224 => m_22224
    end

#[program]
def sing_elimLU_49 :=
  fun sing_elim_22225 {A_22226} -> {x_22227} -> (__22228) ->
    match __22228 with
    
    end

#[program]
def sing_elimLL_48 :=
  fun sing_elim_22229 {A_22230} -> {x_22231} -> (__22232) ->
    match __22232 with
    | justLL_14 m_22233 => m_22233
    end

#[logical]
def sing_uniqUU_55 := NULL

#[logical]
def sing_uniqUL_54 := NULL

#[logical]
def sing_uniqLU_53 := NULL

#[logical]
def sing_uniqLL_52 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_8 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_9 :=
  fun not_22234 (__22235) ->
    match __22235 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_10 :=
  fun and_22236 (__22237) -> (__22238) ->
    match __22237 with
    | true_4  =>
      match __22238 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_11 :=
  fun or_22239 (__22240) -> (__22241) ->
    match __22240 with
    | true_4  => true_4
    | false_5  =>
      match __22241 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_12 :=
  fun xor_22242 (__22243) -> (__22244) -o
    match __22243 with
    | true_4  =>
      match __22244 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __22244 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_13 :=
  fun lte_22245 (__22246) -> (__22247) ->
    match __22246 with
    | zero_6  => true_4
    | succ_7 n_22248 =>
      match __22247 with
      | zero_6  => false_5 | succ_7 n_22249 => ((lte_22245) n_22248 n_22249)
      end
    end

#[program]
def lt_14 :=
  fun lt_22250 (x_22251) -> (y_22252) ->
    ((lte_13) (succ_7 x_22251) y_22252)

#[program]
def pred_15 :=
  fun pred_22253 (__22254) ->
    match __22254 with
    | zero_6  => zero_6 | succ_7 n_22255 => n_22255
    end

#[program]
def add_16 :=
  fun add_22256 (__22257) -> (__22258) ->
    match __22257 with
    | zero_6  => __22258
    | succ_7 n_22259 => (succ_7 ((add_22256) n_22259 __22258))
    end

#[program]
def sub_17 :=
  fun sub_22260 (__22261) -> (__22262) ->
    match __22262 with
    | zero_6  => __22261
    | succ_7 n_22263 => ((sub_22260) ((pred_15) __22261) n_22263)
    end

#[program]
def mul_18 :=
  fun mul_22264 (__22265) -> (__22266) ->
    match __22265 with
    | zero_6  => zero_6
    | succ_7 n_22267 => ((add_16) __22266 ((mul_22264) n_22267 __22266))
    end

#[program]
def div_19 :=
  fun div_22268 (x_22269) -> (y_22270) ->
    match ((lt_14) x_22269 y_22270) with
    | true_4  => zero_6
    | false_5  =>
      let loop_22271 :=
        fun loop_22272 (x_22273) -> (y_22274) ->
          match ((sub_17) x_22273 ((pred_15) y_22274)) with
          | zero_6  => zero_6
          | succ_7 n_22275 => (succ_7 ((loop_22272) n_22275 y_22274))
          end
      in ((loop_22271) x_22269 y_22270)
    end

#[program]
def rem_20 :=
  fun rem_22276 (x_22277) -> (y_22278) ->
    ((sub_17) x_22277 ((mul_18) ((div_19) x_22277 y_22278) y_22278))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_59 := NULL

#[logical]
def prod0UL_58 := NULL

#[logical]
def prod0LU_57 := NULL

#[logical]
def prod0LL_56 := NULL

#[logical]
def prod1UU_63 := NULL

#[logical]
def prod1UL_62 := NULL

#[logical]
def prod1LU_61 := NULL

#[logical]
def prod1LL_60 := NULL

#[program]
def pow_23 :=
  fun pow_22279 (x_22280) -> (y_22281) ->
    let loop_22282 :=
      fun loop_22283 (acc_22284) -> (y_22285) ->
        match (__lte__ y_22285 0) with
        | true_4  => acc_22284
        | false_5  =>
          ((loop_22283) (__mul__ x_22280 acc_22284) (__sub__ y_22285 1))
        end
    in ((loop_22282) 1 y_22281)

#[program]
def powm_24 :=
  fun powm_22286 (x_22287) -> (y_22288) -> (m_22289) ->
    let loop_22290 :=
      fun loop_22291 (acc_22292) -> (y_22293) ->
        match (__lte__ y_22293 0) with
        | true_4  => acc_22292
        | false_5  =>
          ((loop_22291)
            (__mod__ (__mul__ x_22287 acc_22292) m_22289) (__sub__ y_22293 1))
        end
    in ((loop_22290) 1 y_22288)

#[program]
def splitU_65 :=
  fun split_22294 (__22295) ->
    match __22295 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_22296 tl_22297 =>
      match tl_22297 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_22296 nilUU_24) nilUU_24)
      | consUU_25 hd_22298 tl_22299 =>
        match ((split_22294) tl_22299) with
        | ex1UU_33 m_22300 n_22301 =>
          (ex1UU_33
            (consUU_25 hd_22296 m_22300) (consUU_25 hd_22298 n_22301))
        end
      end
    end

#[program]
def splitL_64 :=
  fun split_22302 (__22303) ->
    match __22303 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_22304 tl_22305 =>
      match tl_22305 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_22304 nilUL_22) nilUL_22)
      | consUL_23 hd_22306 tl_22307 =>
        match ((split_22302) tl_22307) with
        | ex1LL_30 m_22308 n_22309 =>
          (ex1LL_30
            (consUL_23 hd_22304 m_22308) (consUL_23 hd_22306 n_22309))
        end
      end
    end

#[program]
def mergeU_67 :=
  fun merge_22310 (__22311) -> (__22312) -o
    match __22311 with
    | nilUU_24  => __22312
    | consUU_25 hd_22313 tl_22314 =>
      match __22312 with
      | nilUU_24  => (consUU_25 hd_22313 tl_22314)
      | consUU_25 hd_22315 tl_22316 =>
        match (__lte__ hd_22313 hd_22315) with
        | true_4  =>
          (consUU_25
            hd_22313 ((merge_22310) tl_22314 (consUU_25 hd_22315 tl_22316)))
        | false_5  =>
          (consUU_25
            hd_22315 ((merge_22310) (consUU_25 hd_22313 tl_22314) tl_22316))
        end
      end
    end

#[program]
def mergeL_66 :=
  fun merge_22317 (__22318) -> (__22319) -o
    match __22318 with
    | nilUL_22  => __22319
    | consUL_23 hd_22320 tl_22321 =>
      match __22319 with
      | nilUL_22  => (consUL_23 hd_22320 tl_22321)
      | consUL_23 hd_22322 tl_22323 =>
        match (__lte__ hd_22320 hd_22322) with
        | true_4  =>
          (consUL_23
            hd_22320 ((merge_22317) tl_22321 (consUL_23 hd_22322 tl_22323)))
        | false_5  =>
          (consUL_23
            hd_22322 ((merge_22317) (consUL_23 hd_22320 tl_22321) tl_22323))
        end
      end
    end

#[program]
def msortU_69 :=
  fun msort_22324 (__22325) ->
    match __22325 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_22326 tl_22327 =>
      match tl_22327 with
      | nilUU_24  => (consUU_25 hd_22326 nilUU_24)
      | consUU_25 hd_22328 tl_22329 =>
        match ((splitU_65)
                (consUU_25 hd_22326 (consUU_25 hd_22328 tl_22329))) with
        | ex1UU_33 m_22330 n_22331 =>
          ((mergeU_67) ((msort_22324) m_22330) ((msort_22324) n_22331))
        end
      end
    end

#[program]
def msortL_68 :=
  fun msort_22332 (__22333) ->
    match __22333 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_22334 tl_22335 =>
      match tl_22335 with
      | nilUL_22  => (consUL_23 hd_22334 nilUL_22)
      | consUL_23 hd_22336 tl_22337 =>
        match ((splitL_64)
                (consUL_23 hd_22334 (consUL_23 hd_22336 tl_22337))) with
        | ex1LL_30 m_22338 n_22339 =>
          ((mergeL_66) ((msort_22332) m_22338) ((msort_22332) n_22339))
        end
      end
    end

#[logical]
def cmsort_chU_71 := NULL

#[logical]
def cmsort_chL_70 := NULL

#[program]
def cmsort_workerU_73 :=
  fun cmsort_worker_22340 (__22341) -> (zs_22342) -> (__22343) -o
    match __22341 with
    | zero_6  =>
      let* c_22344 :=
        ((send[R,U] __22343) (justUU_17 ((msortU_69) zs_22342)))
      in close[true] c_22344
    | succ_7 n_22345 =>
      match zs_22342 with
      | nilUU_24  =>
        let* c_22346 := ((send[R,U] __22343) (justUU_17 nilUU_24)) in
        close[true] c_22346
      | consUU_25 hd_22347 tl_22348 =>
        match tl_22348 with
        | nilUU_24  =>
          let* c_22349 :=
            ((send[R,U] __22343) (justUU_17 (consUU_25 hd_22347 nilUU_24)))
          in close[true] c_22349
        | consUU_25 hd_22350 tl_22351 =>
          match ((splitU_65)
                  (consUU_25 hd_22347 (consUU_25 hd_22350 tl_22351))) with
          | ex1UU_33 m_22352 n_22353 =>
            let* r1_22354 :=
              fork
                fun _22355 (_22356) -o
                  ((cmsort_worker_22340) n_22345 m_22352 _22356)
            in
            let* r2_22357 :=
              fork
                fun _22358 (_22359) -o
                  ((cmsort_worker_22340) n_22345 n_22353 _22359)
            in
            let* _22360 := recv[R,U] r1_22354 in
            match _22360 with
            | ex1UL_32 m_22361 n_22362 =>
              let* __22363 := close[false] n_22362 in
              let* _22364 := recv[R,U] r2_22357 in
              match _22364 with
              | ex1UL_32 m_22365 n_22366 =>
                let* __22367 := close[false] n_22366 in
                match m_22361 with
                | justUU_17 m_22368 =>
                  match m_22365 with
                  | justUU_17 m_22369 =>
                    let zs1_22370 :=
                      (justUU_17 ((mergeU_67) m_22368 m_22369))
                    in
                    let zs1_22371 :=
                      ((rwlUU_33) NULL NULL NULL NULL NULL zs1_22370)
                    in
                    let* c_22372 := ((send[R,U] __22343) zs1_22371) in
                    let* __22373 := close[true] c_22372 in return tt_3
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsort_workerL_72 :=
  fun cmsort_worker_22374 (__22375) -> (zs_22376) -> (__22377) -o
    match __22375 with
    | zero_6  =>
      let* c_22378 :=
        ((send[R,L] __22377) (justLL_14 ((msortL_68) zs_22376)))
      in close[true] c_22378
    | succ_7 n_22379 =>
      match zs_22376 with
      | nilUL_22  =>
        let* c_22380 := ((send[R,L] __22377) (justLL_14 nilUL_22)) in
        close[true] c_22380
      | consUL_23 hd_22381 tl_22382 =>
        match tl_22382 with
        | nilUL_22  =>
          let* c_22383 :=
            ((send[R,L] __22377) (justLL_14 (consUL_23 hd_22381 nilUL_22)))
          in close[true] c_22383
        | consUL_23 hd_22384 tl_22385 =>
          match ((splitL_64)
                  (consUL_23 hd_22381 (consUL_23 hd_22384 tl_22385))) with
          | ex1LL_30 m_22386 n_22387 =>
            let* r1_22388 :=
              fork
                fun _22389 (_22390) -o
                  ((cmsort_worker_22374) n_22379 m_22386 _22390)
            in
            let* r2_22391 :=
              fork
                fun _22392 (_22393) -o
                  ((cmsort_worker_22374) n_22379 n_22387 _22393)
            in
            let* _22394 := recv[R,L] r1_22388 in
            match _22394 with
            | ex1LL_30 m_22395 n_22396 =>
              let* __22397 := close[false] n_22396 in
              let* _22398 := recv[R,L] r2_22391 in
              match _22398 with
              | ex1LL_30 m_22399 n_22400 =>
                let* __22401 := close[false] n_22400 in
                match m_22395 with
                | justLL_14 m_22402 =>
                  match m_22399 with
                  | justLL_14 m_22403 =>
                    let zs1_22404 :=
                      (justLL_14 ((mergeL_66) m_22402 m_22403))
                    in
                    let zs1_22405 :=
                      ((rwlLL_30) NULL NULL NULL NULL NULL zs1_22404)
                    in
                    let* c_22406 := ((send[R,L] __22377) zs1_22405) in
                    let* __22407 := close[true] c_22406 in return tt_3
                  end
                end
              end
            end
          end
        end
      end
    end

-----------------------------------------

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_33 :=
  fun rwl_22657 {A_22658} -> {m_22659} -> {n_22660} -> {B_22661} ->
  {__22662} -> (__22663) ->
    __22663

#[program]
def rwlUL_32 :=
  fun rwl_22664 {A_22665} -> {m_22666} -> {n_22667} -> {B_22668} ->
  {__22669} -> (__22670) ->
    __22670

#[program]
def rwlLU_31 :=
  fun rwl_22671 {A_22672} -> {m_22673} -> {n_22674} -> {B_22675} ->
  {__22676} -> (__22677) ->
    __22677

#[program]
def rwlLL_30 :=
  fun rwl_22678 {A_22679} -> {m_22680} -> {n_22681} -> {B_22682} ->
  {__22683} -> (__22684) ->
    __22684

#[program]
def rwrUU_37 :=
  fun rwr_22685 {A_22686} -> {m_22687} -> {n_22688} -> {B_22689} ->
  {__22690} -> (__22691) ->
    __22691

#[program]
def rwrUL_36 :=
  fun rwr_22692 {A_22693} -> {m_22694} -> {n_22695} -> {B_22696} ->
  {__22697} -> (__22698) ->
    __22698

#[program]
def rwrLU_35 :=
  fun rwr_22699 {A_22700} -> {m_22701} -> {n_22702} -> {B_22703} ->
  {__22704} -> (__22705) ->
    __22705

#[program]
def rwrLL_34 :=
  fun rwr_22706 {A_22707} -> {m_22708} -> {n_22709} -> {B_22710} ->
  {__22711} -> (__22712) ->
    __22712

#[logical]
def congrUUU_45 := NULL

#[logical]
def congrUUL_44 := NULL

#[logical]
def congrULU_43 := NULL

#[logical]
def congrULL_42 := NULL

#[logical]
def congrLUU_41 := NULL

#[logical]
def congrLUL_40 := NULL

#[logical]
def congrLLU_39 := NULL

#[logical]
def congrLLL_38 := NULL

#[logical]
def axiom_K_4 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_47 := NULL

#[logical]
def ssingL_46 := NULL

#[program]
def sing_elimUU_51 :=
  fun sing_elim_22713 {A_22714} -> {x_22715} -> (__22716) ->
    match __22716 with
    | justUU_17 m_22717 => m_22717
    end

#[program]
def sing_elimUL_50 :=
  fun sing_elim_22718 {A_22719} -> {x_22720} -> (__22721) ->
    match __22721 with
    | justUL_16 m_22722 => m_22722
    end

#[program]
def sing_elimLU_49 :=
  fun sing_elim_22723 {A_22724} -> {x_22725} -> (__22726) ->
    !!

#[program]
def sing_elimLL_48 :=
  fun sing_elim_22727 {A_22728} -> {x_22729} -> (__22730) ->
    match __22730 with
    | justLL_14 m_22731 => m_22731
    end

#[logical]
def sing_uniqUU_55 := NULL

#[logical]
def sing_uniqUL_54 := NULL

#[logical]
def sing_uniqLU_53 := NULL

#[logical]
def sing_uniqLL_52 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_8 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_9 :=
  fun not_22732 (__22733) ->
    match __22733 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_10 :=
  fun and_22734 (__22735) -> (__22736) ->
    match __22735 with
    | true_4  =>
      match __22736 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_11 :=
  fun or_22737 (__22738) -> (__22739) ->
    match __22738 with
    | true_4  => true_4
    | false_5  =>
      match __22739 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_12 :=
  fun xor_22740 (__22741) -> (__22742) -o
    match __22741 with
    | true_4  =>
      match __22742 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __22742 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_13 :=
  fun lte_22743 (__22744) -> (__22745) ->
    match __22744 with
    | zero_6  => true_4
    | succ_7 n_22746 =>
      match __22745 with
      | zero_6  => false_5 | succ_7 n_22747 => ((lte_22743) n_22746 n_22747)
      end
    end

#[program]
def lt_14 :=
  fun lt_22748 (x_22749) -> (y_22750) ->
    ((lte_13) (succ_7 x_22749) y_22750)

#[program]
def pred_15 :=
  fun pred_22751 (__22752) ->
    match __22752 with
    | zero_6  => zero_6 | succ_7 n_22753 => n_22753
    end

#[program]
def add_16 :=
  fun add_22754 (__22755) -> (__22756) ->
    match __22755 with
    | zero_6  => __22756
    | succ_7 n_22757 => (succ_7 ((add_22754) n_22757 __22756))
    end

#[program]
def sub_17 :=
  fun sub_22758 (__22759) -> (__22760) ->
    match __22760 with
    | zero_6  => __22759
    | succ_7 n_22761 => ((sub_22758) ((pred_15) __22759) n_22761)
    end

#[program]
def mul_18 :=
  fun mul_22762 (__22763) -> (__22764) ->
    match __22763 with
    | zero_6  => zero_6
    | succ_7 n_22765 => ((add_16) __22764 ((mul_22762) n_22765 __22764))
    end

#[program]
def div_19 :=
  fun div_22766 (x_22767) -> (y_22768) ->
    match ((lt_14) x_22767 y_22768) with
    | true_4  => zero_6
    | false_5  =>
      let loop_22769 :=
        fun loop_22770 (x_22771) -> (y_22772) ->
          match ((sub_17) x_22771 ((pred_15) y_22772)) with
          | zero_6  => zero_6
          | succ_7 n_22773 => (succ_7 ((loop_22770) n_22773 y_22772))
          end
      in ((loop_22769) x_22767 y_22768)
    end

#[program]
def rem_20 :=
  fun rem_22774 (x_22775) -> (y_22776) ->
    ((sub_17) x_22775 ((mul_18) ((div_19) x_22775 y_22776) y_22776))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_59 := NULL

#[logical]
def prod0UL_58 := NULL

#[logical]
def prod0LU_57 := NULL

#[logical]
def prod0LL_56 := NULL

#[logical]
def prod1UU_63 := NULL

#[logical]
def prod1UL_62 := NULL

#[logical]
def prod1LU_61 := NULL

#[logical]
def prod1LL_60 := NULL

#[program]
def pow_23 :=
  fun pow_22777 (x_22778) -> (y_22779) ->
    let loop_22780 :=
      fun loop_22781 (acc_22782) -> (y_22783) ->
        match (__lte__ y_22783 0) with
        | true_4  => acc_22782
        | false_5  =>
          ((loop_22781) (__mul__ x_22778 acc_22782) (__sub__ y_22783 1))
        end
    in ((loop_22780) 1 y_22779)

#[program]
def powm_24 :=
  fun powm_22784 (x_22785) -> (y_22786) -> (m_22787) ->
    let loop_22788 :=
      fun loop_22789 (acc_22790) -> (y_22791) ->
        match (__lte__ y_22791 0) with
        | true_4  => acc_22790
        | false_5  =>
          ((loop_22789)
            (__mod__ (__mul__ x_22785 acc_22790) m_22787) (__sub__ y_22791 1))
        end
    in ((loop_22788) 1 y_22786)

#[program]
def splitU_65 :=
  fun split_22792 (__22793) ->
    match __22793 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_22794 tl_22795 =>
      match tl_22795 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_22794 nilUU_24) nilUU_24)
      | consUU_25 hd_22796 tl_22797 =>
        match ((split_22792) tl_22797) with
        | ex1UU_33 m_22798 n_22799 =>
          (ex1UU_33
            (consUU_25 hd_22794 m_22798) (consUU_25 hd_22796 n_22799))
        end
      end
    end

#[program]
def splitL_64 :=
  fun split_22800 (__22801) ->
    match __22801 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_22802 tl_22803 =>
      match tl_22803 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_22802 nilUL_22) nilUL_22)
      | consUL_23 hd_22804 tl_22805 =>
        match ((split_22800) tl_22805) with
        | ex1LL_30 m_22806 n_22807 =>
          (ex1LL_30
            (consUL_23 hd_22802 m_22806) (consUL_23 hd_22804 n_22807))
        end
      end
    end

#[program]
def mergeU_67 :=
  fun merge_22808 (__22809) -> (__22810) -o
    match __22809 with
    | nilUU_24  => __22810
    | consUU_25 hd_22811 tl_22812 =>
      match __22810 with
      | nilUU_24  => (consUU_25 hd_22811 tl_22812)
      | consUU_25 hd_22813 tl_22814 =>
        match (__lte__ hd_22811 hd_22813) with
        | true_4  =>
          (consUU_25
            hd_22811 ((merge_22808) tl_22812 (consUU_25 hd_22813 tl_22814)))
        | false_5  =>
          (consUU_25
            hd_22813 ((merge_22808) (consUU_25 hd_22811 tl_22812) tl_22814))
        end
      end
    end

#[program]
def mergeL_66 :=
  fun merge_22815 (__22816) -> (__22817) -o
    match __22816 with
    | nilUL_22  => __22817
    | consUL_23 hd_22818 tl_22819 =>
      match __22817 with
      | nilUL_22  => (consUL_23 hd_22818 tl_22819)
      | consUL_23 hd_22820 tl_22821 =>
        match (__lte__ hd_22818 hd_22820) with
        | true_4  =>
          (consUL_23
            hd_22818 ((merge_22815) tl_22819 (consUL_23 hd_22820 tl_22821)))
        | false_5  =>
          (consUL_23
            hd_22820 ((merge_22815) (consUL_23 hd_22818 tl_22819) tl_22821))
        end
      end
    end

#[program]
def msortU_69 :=
  fun msort_22822 (__22823) ->
    match __22823 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_22824 tl_22825 =>
      match tl_22825 with
      | nilUU_24  => (consUU_25 hd_22824 nilUU_24)
      | consUU_25 hd_22826 tl_22827 =>
        match ((splitU_65)
                (consUU_25 hd_22824 (consUU_25 hd_22826 tl_22827))) with
        | ex1UU_33 m_22828 n_22829 =>
          ((mergeU_67) ((msort_22822) m_22828) ((msort_22822) n_22829))
        end
      end
    end

#[program]
def msortL_68 :=
  fun msort_22830 (__22831) ->
    match __22831 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_22832 tl_22833 =>
      match tl_22833 with
      | nilUL_22  => (consUL_23 hd_22832 nilUL_22)
      | consUL_23 hd_22834 tl_22835 =>
        match ((splitL_64)
                (consUL_23 hd_22832 (consUL_23 hd_22834 tl_22835))) with
        | ex1LL_30 m_22836 n_22837 =>
          ((mergeL_66) ((msort_22830) m_22836) ((msort_22830) n_22837))
        end
      end
    end

#[logical]
def cmsort_chU_71 := NULL

#[logical]
def cmsort_chL_70 := NULL

#[program]
def cmsort_workerU_73 :=
  fun cmsort_worker_22838 (__22839) -> (zs_22840) -> (__22841) -o
    match __22839 with
    | zero_6  =>
      let* c_22842 :=
        ((send[R,U] __22841) (justUU_17 ((msortU_69) zs_22840)))
      in close[true] c_22842
    | succ_7 n_22843 =>
      match zs_22840 with
      | nilUU_24  =>
        let* c_22844 := ((send[R,U] __22841) (justUU_17 nilUU_24)) in
        close[true] c_22844
      | consUU_25 hd_22845 tl_22846 =>
        match tl_22846 with
        | nilUU_24  =>
          let* c_22847 :=
            ((send[R,U] __22841) (justUU_17 (consUU_25 hd_22845 nilUU_24)))
          in close[true] c_22847
        | consUU_25 hd_22848 tl_22849 =>
          match ((splitU_65)
                  (consUU_25 hd_22845 (consUU_25 hd_22848 tl_22849))) with
          | ex1UU_33 m_22850 n_22851 =>
            let* r1_22852 :=
              fork
                fun _22853 (_22854) -o
                  ((cmsort_worker_22838) n_22843 m_22850 _22854)
            in
            let* r2_22855 :=
              fork
                fun _22856 (_22857) -o
                  ((cmsort_worker_22838) n_22843 n_22851 _22857)
            in
            let* _22858 := recv[R,U] r1_22852 in
            match _22858 with
            | ex1UL_32 m_22859 n_22860 =>
              let* __22861 := close[false] n_22860 in
              let* _22862 := recv[R,U] r2_22855 in
              match _22862 with
              | ex1UL_32 m_22863 n_22864 =>
                let* __22865 := close[false] n_22864 in
                match m_22859 with
                | justUU_17 m_22866 =>
                  match m_22863 with
                  | justUU_17 m_22867 =>
                    let zs1_22868 :=
                      (justUU_17 ((mergeU_67) m_22866 m_22867))
                    in
                    let zs1_22869 :=
                      ((rwlUU_33) NULL NULL NULL NULL NULL zs1_22868)
                    in
                    let* c_22870 := ((send[R,U] __22841) zs1_22869) in
                    let* __22871 := close[true] c_22870 in return tt_3
                  end
                end
              end
            end
          end
        end
      end
    end

#[program]
def cmsort_workerL_72 :=
  fun cmsort_worker_22872 (__22873) -> (zs_22874) -> (__22875) -o
    match __22873 with
    | zero_6  =>
      let* c_22876 :=
        ((send[R,L] __22875) (justLL_14 ((msortL_68) zs_22874)))
      in close[true] c_22876
    | succ_7 n_22877 =>
      match zs_22874 with
      | nilUL_22  =>
        let* c_22878 := ((send[R,L] __22875) (justLL_14 nilUL_22)) in
        close[true] c_22878
      | consUL_23 hd_22879 tl_22880 =>
        match tl_22880 with
        | nilUL_22  =>
          let* c_22881 :=
            ((send[R,L] __22875) (justLL_14 (consUL_23 hd_22879 nilUL_22)))
          in close[true] c_22881
        | consUL_23 hd_22882 tl_22883 =>
          match ((splitL_64)
                  (consUL_23 hd_22879 (consUL_23 hd_22882 tl_22883))) with
          | ex1LL_30 m_22884 n_22885 =>
            let* r1_22886 :=
              fork
                fun _22887 (_22888) -o
                  ((cmsort_worker_22872) n_22877 m_22884 _22888)
            in
            let* r2_22889 :=
              fork
                fun _22890 (_22891) -o
                  ((cmsort_worker_22872) n_22877 n_22885 _22891)
            in
            let* _22892 := recv[R,L] r1_22886 in
            match _22892 with
            | ex1LL_30 m_22893 n_22894 =>
              let* __22895 := close[false] n_22894 in
              let* _22896 := recv[R,L] r2_22889 in
              match _22896 with
              | ex1LL_30 m_22897 n_22898 =>
                let* __22899 := close[false] n_22898 in
                match m_22893 with
                | justLL_14 m_22900 =>
                  match m_22897 with
                  | justLL_14 m_22901 =>
                    let zs1_22902 :=
                      (justLL_14 ((mergeL_66) m_22900 m_22901))
                    in
                    let zs1_22903 :=
                      ((rwlLL_30) NULL NULL NULL NULL NULL zs1_22902)
                    in
                    let* c_22904 := ((send[R,L] __22875) zs1_22903) in
                    let* __22905 := close[true] c_22904 in return tt_3
                  end
                end
              end
            end
          end
        end
      end
    end

-----------------------------------------

def rwlUU_33 :=
  fun rwl_23175 (A_23176) -> (m_23177) -> (n_23178) -> (B_23179) ->
  (__23180) -> (__23181) -> __23181

def rwlUL_32 :=
  fun rwl_23182 (A_23183) -> (m_23184) -> (n_23185) -> (B_23186) ->
  (__23187) -> (__23188) -> __23188

def rwlLU_31 :=
  fun rwl_23189 (A_23190) -> (m_23191) -> (n_23192) -> (B_23193) ->
  (__23194) -> (__23195) -> __23195

def rwlLL_30 :=
  fun rwl_23196 (A_23197) -> (m_23198) -> (n_23199) -> (B_23200) ->
  (__23201) -> (__23202) -> __23202

def rwrUU_37 :=
  fun rwr_23203 (A_23204) -> (m_23205) -> (n_23206) -> (B_23207) ->
  (__23208) -> (__23209) -> __23209

def rwrUL_36 :=
  fun rwr_23210 (A_23211) -> (m_23212) -> (n_23213) -> (B_23214) ->
  (__23215) -> (__23216) -> __23216

def rwrLU_35 :=
  fun rwr_23217 (A_23218) -> (m_23219) -> (n_23220) -> (B_23221) ->
  (__23222) -> (__23223) -> __23223

def rwrLL_34 :=
  fun rwr_23224 (A_23225) -> (m_23226) -> (n_23227) -> (B_23228) ->
  (__23229) -> (__23230) -> __23230

def sing_elimUU_51 :=
  fun sing_elim_23231 (A_23232) -> (x_23233) -> (__23234) -> __23234

def sing_elimUL_50 :=
  fun sing_elim_23235 (A_23236) -> (x_23237) -> (__23238) -> __23238

def sing_elimLU_49 :=
  fun sing_elim_23239 (A_23240) -> (x_23241) -> (__23242) -> !!

def sing_elimLL_48 :=
  fun sing_elim_23243 (A_23244) -> (x_23245) -> (__23246) -> __23246

def not_9 :=
  fun not_23247 (__23248) ->
    match __23248 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_10 :=
  fun and_23249 (__23250) -> (__23251) ->
    match __23250 with
    | true_4 =>
      match __23251 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_11 :=
  fun or_23252 (__23253) -> (__23254) ->
    match __23253 with
    | true_4 => true_4
    | false_5 =>
      match __23254 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_12 :=
  fun xor_23255 (__23256) -> (__23257) -o
    match __23256 with
    | true_4 =>
      match __23257 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __23257 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_13 :=
  fun lte_23258 (__23259) -> (__23260) ->
    match __23259 with
    | zero_6  => true_4
    | succ_7 n_23261 =>
      match __23260 with
      | zero_6  => false_5 | succ_7 n_23262 => ((lte_23258) n_23261 n_23262)
      end
    end

def lt_14 :=
  fun lt_23263 (x_23264) -> (y_23265) -> ((lte_13) (succ_7 x_23264) y_23265)

def pred_15 :=
  fun pred_23266 (__23267) ->
    match __23267 with
    | zero_6  => (zero_6 ) | succ_7 n_23268 => n_23268
    end

def add_16 :=
  fun add_23269 (__23270) -> (__23271) ->
    match __23270 with
    | zero_6  => __23271
    | succ_7 n_23272 => (succ_7 ((add_23269) n_23272 __23271))
    end

def sub_17 :=
  fun sub_23273 (__23274) -> (__23275) ->
    match __23275 with
    | zero_6  => __23274
    | succ_7 n_23276 => ((sub_23273) ((pred_15) __23274) n_23276)
    end

def mul_18 :=
  fun mul_23277 (__23278) -> (__23279) ->
    match __23278 with
    | zero_6  => (zero_6 )
    | succ_7 n_23280 => ((add_16) __23279 ((mul_23277) n_23280 __23279))
    end

def div_19 :=
  fun div_23281 (x_23282) -> (y_23283) ->
    match ((lt_14) x_23282 y_23283) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_23284 :=
        fun loop_23285 (x_23286) -> (y_23287) ->
          match ((sub_17) x_23286 ((pred_15) y_23287)) with
          | zero_6  => (zero_6 )
          | succ_7 n_23288 => (succ_7 ((loop_23285) n_23288 y_23287))
          end
      in ((loop_23284) x_23282 y_23283)
    end

def rem_20 :=
  fun rem_23289 (x_23290) -> (y_23291) ->
    ((sub_17) x_23290 ((mul_18) ((div_19) x_23290 y_23291) y_23291))

def pow_23 :=
  fun pow_23292 (x_23293) -> (y_23294) ->
    let loop_23295 :=
      fun loop_23296 (acc_23297) -> (y_23298) ->
        match (__lte__ y_23298 0) with
        | true_4 => acc_23297
        | false_5 =>
          ((loop_23296) (__mul__ x_23293 acc_23297) (__sub__ y_23298 1))
        end
    in ((loop_23295) 1 y_23294)

def powm_24 :=
  fun powm_23299 (x_23300) -> (y_23301) -> (m_23302) ->
    let loop_23303 :=
      fun loop_23304 (acc_23305) -> (y_23306) ->
        match (__lte__ y_23306 0) with
        | true_4 => acc_23305
        | false_5 =>
          ((loop_23304)
            (__mod__ (__mul__ x_23300 acc_23305) m_23302) (__sub__ y_23306 1))
        end
    in ((loop_23303) 1 y_23301)

def splitU_65 :=
  fun split_23307 (__23308) ->
    match __23308 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_23309 tl_23310 =>
      match tl_23310 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_23309 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_23311 tl_23312 =>
        match ((split_23307) tl_23312) with
        | ex1UU_33 m_23313 n_23314 =>
          (ex1UU_33
            (consUU_25 hd_23309 m_23313) (consUU_25 hd_23311 n_23314))
        end
      end
    end

def splitL_64 :=
  fun split_23315 (__23316) ->
    match __23316 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_23317 tl_23318 =>
      match tl_23318 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_23317 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_23319 tl_23320 =>
        match ((split_23315) tl_23320) with
        | ex1LL_30 m_23321 n_23322 =>
          (ex1LL_30
            (consUL_23 hd_23317 m_23321) (consUL_23 hd_23319 n_23322))
        end
      end
    end

def mergeU_67 :=
  fun merge_23323 (__23324) -> (__23325) -o
    match __23324 with
    | nilUU_24  => __23325
    | consUU_25 hd_23326 tl_23327 =>
      match __23325 with
      | nilUU_24  => (consUU_25 hd_23326 tl_23327)
      | consUU_25 hd_23328 tl_23329 =>
        match (__lte__ hd_23326 hd_23328) with
        | true_4 =>
          (consUU_25
            hd_23326 ((merge_23323) tl_23327 (consUU_25 hd_23328 tl_23329)))
        | false_5 =>
          (consUU_25
            hd_23328 ((merge_23323) (consUU_25 hd_23326 tl_23327) tl_23329))
        end
      end
    end

def mergeL_66 :=
  fun merge_23330 (__23331) -> (__23332) -o
    match __23331 with
    | nilUL_22  => __23332
    | consUL_23 hd_23333 tl_23334 =>
      match __23332 with
      | nilUL_22  => (consUL_23 hd_23333 tl_23334)
      | consUL_23 hd_23335 tl_23336 =>
        match (__lte__ hd_23333 hd_23335) with
        | true_4 =>
          (consUL_23
            hd_23333 ((merge_23330) tl_23334 (consUL_23 hd_23335 tl_23336)))
        | false_5 =>
          (consUL_23
            hd_23335 ((merge_23330) (consUL_23 hd_23333 tl_23334) tl_23336))
        end
      end
    end

def msortU_69 :=
  fun msort_23337 (__23338) ->
    match __23338 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_23339 tl_23340 =>
      match tl_23340 with
      | nilUU_24  => (consUU_25 hd_23339 (nilUU_24 ))
      | consUU_25 hd_23341 tl_23342 =>
        match ((splitU_65)
                (consUU_25 hd_23339 (consUU_25 hd_23341 tl_23342))) with
        | ex1UU_33 m_23343 n_23344 =>
          ((mergeU_67) ((msort_23337) m_23343) ((msort_23337) n_23344))
        end
      end
    end

def msortL_68 :=
  fun msort_23345 (__23346) ->
    match __23346 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_23347 tl_23348 =>
      match tl_23348 with
      | nilUL_22  => (consUL_23 hd_23347 (nilUL_22 ))
      | consUL_23 hd_23349 tl_23350 =>
        match ((splitL_64)
                (consUL_23 hd_23347 (consUL_23 hd_23349 tl_23350))) with
        | ex1LL_30 m_23351 n_23352 =>
          ((mergeL_66) ((msort_23345) m_23351) ((msort_23345) n_23352))
        end
      end
    end

def cmsort_workerU_73 :=
  fun cmsort_worker_23353 (__23354) -> (zs_23355) -> (__23356) -o
    match __23354 with
    | zero_6  =>
      lazy(let c_23357 :=
             force(((lam (x_23358) -> lazy(send(__23356, x_23358)))
                     ((msortU_69) zs_23355)))
           in force(lazy(close[true] c_23357)))
    | succ_7 n_23359 =>
      match zs_23355 with
      | nilUU_24  =>
        lazy(let c_23360 :=
               force(((lam (x_23361) -> lazy(send(__23356, x_23361)))
                       (nilUU_24 )))
             in force(lazy(close[true] c_23360)))
      | consUU_25 hd_23362 tl_23363 =>
        match tl_23363 with
        | nilUU_24  =>
          lazy(let c_23364 :=
                 force(((lam (x_23365) -> lazy(send(__23356, x_23365)))
                         (consUU_25 hd_23362 (nilUU_24 ))))
               in force(lazy(close[true] c_23364)))
        | consUU_25 hd_23366 tl_23367 =>
          match ((splitU_65)
                  (consUU_25 hd_23362 (consUU_25 hd_23366 tl_23367))) with
          | ex1UU_33 m_23368 n_23369 =>
            lazy(let r1_23370 :=
                   force(lazy(fork
                                fun _23371 (_23372) -o
                                  ((cmsort_worker_23353)
                                    n_23359 m_23368 _23372)))
                 in
                 let r2_23373 :=
                   force(lazy(fork
                                fun _23374 (_23375) -o
                                  ((cmsort_worker_23353)
                                    n_23359 n_23369 _23375)))
                 in
                 let _23376 := force(lazy(recv[U](r1_23370))) in
                 force(match _23376 with
                       | ex1UL_32 m_23377 n_23378 =>
                         lazy(let __23379 :=
                                force(lazy(close[false] n_23378))
                              in
                              let _23380 := force(lazy(recv[U](r2_23373))) in
                              force(match _23380 with
                                    | ex1UL_32 m_23381 n_23382 =>
                                      lazy(let __23383 :=
                                             force(lazy(close[false] n_23382))
                                           in
                                           force(let zs1_23384 :=
                                                   ((mergeU_67)
                                                     m_23377 m_23381)
                                                 in
                                                 let zs1_23385 :=
                                                   ((rwlUU_33)
                                                     NULL NULL NULL NULL NULL
                                                       zs1_23384)
                                                 in
                                                 lazy(let c_23386 :=
                                                        force(((lam (x_23387) ->
                                                                  lazy(
                                                                  send(__23356, x_23387)))
                                                                zs1_23385))
                                                      in
                                                      let __23388 :=
                                                        force(lazy(close[true]
                                                                    c_23386))
                                                      in force(lazy(tt_3)))))
                                    end))
                       end))
            end
          end
        end
      end

def cmsort_workerL_72 :=
  fun cmsort_worker_23389 (__23390) -> (zs_23391) -> (__23392) -o
    match __23390 with
    | zero_6  =>
      lazy(let c_23393 :=
             force(((lam (x_23394) -> lazy(send(__23392, x_23394)))
                     ((msortL_68) zs_23391)))
           in force(lazy(close[true] c_23393)))
    | succ_7 n_23395 =>
      match zs_23391 with
      | nilUL_22  =>
        lazy(let c_23396 :=
               force(((lam (x_23397) -> lazy(send(__23392, x_23397)))
                       (nilUL_22 )))
             in force(lazy(close[true] c_23396)))
      | consUL_23 hd_23398 tl_23399 =>
        match tl_23399 with
        | nilUL_22  =>
          lazy(let c_23400 :=
                 force(((lam (x_23401) -> lazy(send(__23392, x_23401)))
                         (consUL_23 hd_23398 (nilUL_22 ))))
               in force(lazy(close[true] c_23400)))
        | consUL_23 hd_23402 tl_23403 =>
          match ((splitL_64)
                  (consUL_23 hd_23398 (consUL_23 hd_23402 tl_23403))) with
          | ex1LL_30 m_23404 n_23405 =>
            lazy(let r1_23406 :=
                   force(lazy(fork
                                fun _23407 (_23408) -o
                                  ((cmsort_worker_23389)
                                    n_23395 m_23404 _23408)))
                 in
                 let r2_23409 :=
                   force(lazy(fork
                                fun _23410 (_23411) -o
                                  ((cmsort_worker_23389)
                                    n_23395 n_23405 _23411)))
                 in
                 let _23412 := force(lazy(recv[L](r1_23406))) in
                 force(match _23412 with
                       | ex1LL_30 m_23413 n_23414 =>
                         lazy(let __23415 :=
                                force(lazy(close[false] n_23414))
                              in
                              let _23416 := force(lazy(recv[L](r2_23409))) in
                              force(match _23416 with
                                    | ex1LL_30 m_23417 n_23418 =>
                                      lazy(let __23419 :=
                                             force(lazy(close[false] n_23418))
                                           in
                                           force(let zs1_23420 :=
                                                   ((mergeL_66)
                                                     m_23413 m_23417)
                                                 in
                                                 let zs1_23421 :=
                                                   ((rwlLL_30)
                                                     NULL NULL NULL NULL NULL
                                                       zs1_23420)
                                                 in
                                                 lazy(let c_23422 :=
                                                        force(((lam (x_23423) ->
                                                                  lazy(
                                                                  send(__23392, x_23423)))
                                                                zs1_23421))
                                                      in
                                                      let __23424 :=
                                                        force(lazy(close[true]
                                                                    c_23422))
                                                      in force(lazy(tt_3)))))
                                    end))
                       end))
            end
          end
        end
      end

-----------------------------------------

def rwlUU_33 :=
  lam (A_23751) -> (m_23752) -> (n_23753) -> (B_23754) -> (__23755) ->
  (__23756) -> __23756

def rwlUL_32 :=
  lam (A_23757) -> (m_23758) -> (n_23759) -> (B_23760) -> (__23761) ->
  (__23762) -> __23762

def rwlLU_31 :=
  lam (A_23763) -> (m_23764) -> (n_23765) -> (B_23766) -> (__23767) ->
  (__23768) -> __23768

def rwlLL_30 :=
  lam (A_23769) -> (m_23770) -> (n_23771) -> (B_23772) -> (__23773) ->
  (__23774) -> __23774

def rwrUU_37 :=
  lam (A_23775) -> (m_23776) -> (n_23777) -> (B_23778) -> (__23779) ->
  (__23780) -> __23780

def rwrUL_36 :=
  lam (A_23781) -> (m_23782) -> (n_23783) -> (B_23784) -> (__23785) ->
  (__23786) -> __23786

def rwrLU_35 :=
  lam (A_23787) -> (m_23788) -> (n_23789) -> (B_23790) -> (__23791) ->
  (__23792) -> __23792

def rwrLL_34 :=
  lam (A_23793) -> (m_23794) -> (n_23795) -> (B_23796) -> (__23797) ->
  (__23798) -> __23798

def sing_elimUU_51 := lam (A_23799) -> (x_23800) -> (__23801) -> __23801

def sing_elimUL_50 := lam (A_23802) -> (x_23803) -> (__23804) -> __23804

def sing_elimLU_49 := lam (A_23805) -> (x_23806) -> (__23807) -> !!

def sing_elimLL_48 := lam (A_23808) -> (x_23809) -> (__23810) -> __23810

def not_9 :=
  lam (__23811) ->
    match __23811 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_10 :=
  lam (__23812) -> (__23813) ->
    match __23812 with
    | true_4 =>
      match __23813 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_11 :=
  lam (__23814) -> (__23815) ->
    match __23814 with
    | true_4 => true_4
    | false_5 =>
      match __23815 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_12 :=
  lam (__23816) -> (__23817) -o
    match __23816 with
    | true_4 =>
      match __23817 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __23817 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_13 :=
  fun lte_23818 (__23819) -> (__23820) ->
    match __23819 with
    | zero_6  => true_4
    | succ_7 n_23821 =>
      match __23820 with
      | zero_6  => false_5 | succ_7 n_23822 => ((lte_23818) n_23821 n_23822)
      end
    end

def lt_14 :=
  lam (x_23823) -> (y_23824) -> ((lte_13) (succ_7 x_23823) y_23824)

def pred_15 :=
  lam (__23825) ->
    match __23825 with
    | zero_6  => (zero_6 ) | succ_7 n_23826 => n_23826
    end

def add_16 :=
  fun add_23827 (__23828) -> (__23829) ->
    match __23828 with
    | zero_6  => __23829
    | succ_7 n_23830 => (succ_7 ((add_23827) n_23830 __23829))
    end

def sub_17 :=
  fun sub_23831 (__23832) -> (__23833) ->
    match __23833 with
    | zero_6  => __23832
    | succ_7 n_23834 => ((sub_23831) ((pred_15) __23832) n_23834)
    end

def mul_18 :=
  fun mul_23835 (__23836) -> (__23837) ->
    match __23836 with
    | zero_6  => (zero_6 )
    | succ_7 n_23838 => ((add_16) __23837 ((mul_23835) n_23838 __23837))
    end

def div_19 :=
  lam (x_23839) -> (y_23840) ->
    match ((lt_14) x_23839 y_23840) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_23841 :=
        fun loop_23842 (x_23843) -> (y_23844) ->
          match ((sub_17) x_23843 ((pred_15) y_23844)) with
          | zero_6  => (zero_6 )
          | succ_7 n_23845 => (succ_7 ((loop_23842) n_23845 y_23844))
          end
      in ((loop_23841) x_23839 y_23840)
    end

def rem_20 :=
  lam (x_23846) -> (y_23847) ->
    ((sub_17) x_23846 ((mul_18) ((div_19) x_23846 y_23847) y_23847))

def pow_23 :=
  lam (x_23848) -> (y_23849) ->
    let loop_23850 :=
      fun loop_23851 (acc_23852) -> (y_23853) ->
        match (__lte__ y_23853 0) with
        | true_4 => acc_23852
        | false_5 =>
          ((loop_23851) (__mul__ x_23848 acc_23852) (__sub__ y_23853 1))
        end
    in ((loop_23850) 1 y_23849)

def powm_24 :=
  lam (x_23854) -> (y_23855) -> (m_23856) ->
    let loop_23857 :=
      fun loop_23858 (acc_23859) -> (y_23860) ->
        match (__lte__ y_23860 0) with
        | true_4 => acc_23859
        | false_5 =>
          ((loop_23858)
            (__mod__ (__mul__ x_23854 acc_23859) m_23856) (__sub__ y_23860 1))
        end
    in ((loop_23857) 1 y_23855)

def splitU_65 :=
  fun split_23861 (__23862) ->
    match __23862 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_23863 tl_23864 =>
      match tl_23864 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_23863 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_23865 tl_23866 =>
        match ((split_23861) tl_23866) with
        | ex1UU_33 m_23867 n_23868 =>
          (ex1UU_33
            (consUU_25 hd_23863 m_23867) (consUU_25 hd_23865 n_23868))
        end
      end
    end

def splitL_64 :=
  fun split_23869 (__23870) ->
    match __23870 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_23871 tl_23872 =>
      match tl_23872 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_23871 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_23873 tl_23874 =>
        match ((split_23869) tl_23874) with
        | ex1LL_30 m_23875 n_23876 =>
          (ex1LL_30
            (consUL_23 hd_23871 m_23875) (consUL_23 hd_23873 n_23876))
        end
      end
    end

def mergeU_67 :=
  fun merge_23877 (__23878) -> (__23879) -o
    match __23878 with
    | nilUU_24  => __23879
    | consUU_25 hd_23880 tl_23881 =>
      match __23879 with
      | nilUU_24  => (consUU_25 hd_23880 tl_23881)
      | consUU_25 hd_23882 tl_23883 =>
        match (__lte__ hd_23880 hd_23882) with
        | true_4 =>
          (consUU_25
            hd_23880 ((merge_23877) tl_23881 (consUU_25 hd_23882 tl_23883)))
        | false_5 =>
          (consUU_25
            hd_23882 ((merge_23877) (consUU_25 hd_23880 tl_23881) tl_23883))
        end
      end
    end

def mergeL_66 :=
  fun merge_23884 (__23885) -> (__23886) -o
    match __23885 with
    | nilUL_22  => __23886
    | consUL_23 hd_23887 tl_23888 =>
      match __23886 with
      | nilUL_22  => (consUL_23 hd_23887 tl_23888)
      | consUL_23 hd_23889 tl_23890 =>
        match (__lte__ hd_23887 hd_23889) with
        | true_4 =>
          (consUL_23
            hd_23887 ((merge_23884) tl_23888 (consUL_23 hd_23889 tl_23890)))
        | false_5 =>
          (consUL_23
            hd_23889 ((merge_23884) (consUL_23 hd_23887 tl_23888) tl_23890))
        end
      end
    end

def msortU_69 :=
  fun msort_23891 (__23892) ->
    match __23892 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_23893 tl_23894 =>
      match tl_23894 with
      | nilUU_24  => (consUU_25 hd_23893 (nilUU_24 ))
      | consUU_25 hd_23895 tl_23896 =>
        match ((splitU_65)
                (consUU_25 hd_23893 (consUU_25 hd_23895 tl_23896))) with
        | ex1UU_33 m_23897 n_23898 =>
          ((mergeU_67) ((msort_23891) m_23897) ((msort_23891) n_23898))
        end
      end
    end

def msortL_68 :=
  fun msort_23899 (__23900) ->
    match __23900 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_23901 tl_23902 =>
      match tl_23902 with
      | nilUL_22  => (consUL_23 hd_23901 (nilUL_22 ))
      | consUL_23 hd_23903 tl_23904 =>
        match ((splitL_64)
                (consUL_23 hd_23901 (consUL_23 hd_23903 tl_23904))) with
        | ex1LL_30 m_23905 n_23906 =>
          ((mergeL_66) ((msort_23899) m_23905) ((msort_23899) n_23906))
        end
      end
    end

def cmsort_workerU_73 :=
  fun cmsort_worker_23907 (__23908) -> (zs_23909) -> (__23910) -o
    match __23908 with
    | zero_6  =>
      lazy(let c_23911 := send(__23910, ((msortU_69) zs_23909)) in
           close[true] c_23911)
    | succ_7 n_23912 =>
      match zs_23909 with
      | nilUU_24  =>
        lazy(let c_23913 := send(__23910, (nilUU_24 )) in close[true] c_23913)
      | consUU_25 hd_23914 tl_23915 =>
        match tl_23915 with
        | nilUU_24  =>
          lazy(let c_23916 := send(__23910, (consUU_25 hd_23914 (nilUU_24 )))
               in close[true] c_23916)
        | consUU_25 hd_23917 tl_23918 =>
          match ((splitU_65)
                  (consUU_25 hd_23914 (consUU_25 hd_23917 tl_23918))) with
          | ex1UU_33 m_23919 n_23920 =>
            lazy(let r1_23921 :=
                   fork
                     lam (_23922) -o
                       ((cmsort_worker_23907) n_23912 m_23919 _23922)
                 in
                 let r2_23923 :=
                   fork
                     lam (_23924) -o
                       ((cmsort_worker_23907) n_23912 n_23920 _23924)
                 in
                 let _23925 := recv[U](r1_23921) in
                 match _23925 with
                 | ex1UL_32 m_23926 n_23927 =>
                   let __23928 := close[false] n_23927 in
                   let _23929 := recv[U](r2_23923) in
                   match _23929 with
                   | ex1UL_32 m_23930 n_23931 =>
                     let __23932 := close[false] n_23931 in
                     let zs1_23933 := ((mergeU_67) m_23926 m_23930) in
                     let zs1_23934 :=
                       ((rwlUU_33) NULL NULL NULL NULL NULL zs1_23933)
                     in
                     let c_23935 := send(__23910, zs1_23934) in
                     let __23936 := close[true] c_23935 in tt_3
                   end
                 end)
          end
        end
      end
    end

def cmsort_workerL_72 :=
  fun cmsort_worker_23937 (__23938) -> (zs_23939) -> (__23940) -o
    match __23938 with
    | zero_6  =>
      lazy(let c_23941 := send(__23940, ((msortL_68) zs_23939)) in
           close[true] c_23941)
    | succ_7 n_23942 =>
      match zs_23939 with
      | nilUL_22  =>
        lazy(let c_23943 := send(__23940, (nilUL_22 )) in close[true] c_23943)
      | consUL_23 hd_23944 tl_23945 =>
        match tl_23945 with
        | nilUL_22  =>
          lazy(let c_23946 := send(__23940, (consUL_23 hd_23944 (nilUL_22 )))
               in close[true] c_23946)
        | consUL_23 hd_23947 tl_23948 =>
          match ((splitL_64)
                  (consUL_23 hd_23944 (consUL_23 hd_23947 tl_23948))) with
          | ex1LL_30 m_23949 n_23950 =>
            lazy(let r1_23951 :=
                   fork
                     lam (_23952) -o
                       ((cmsort_worker_23937) n_23942 m_23949 _23952)
                 in
                 let r2_23953 :=
                   fork
                     lam (_23954) -o
                       ((cmsort_worker_23937) n_23942 n_23950 _23954)
                 in
                 let _23955 := recv[L](r1_23951) in
                 match _23955 with
                 | ex1LL_30 m_23956 n_23957 =>
                   let __23958 := close[false] n_23957 in
                   let _23959 := recv[L](r2_23953) in
                   match _23959 with
                   | ex1LL_30 m_23960 n_23961 =>
                     let __23962 := close[false] n_23961 in
                     let zs1_23963 := ((mergeL_66) m_23956 m_23960) in
                     let zs1_23964 :=
                       ((rwlLL_30) NULL NULL NULL NULL NULL zs1_23963)
                     in
                     let c_23965 := send(__23940, zs1_23964) in
                     let __23966 := close[true] c_23965 in tt_3
                   end
                 end)
          end
        end
      end
    end

-----------------------------------------

fn rwlUU_1(A_2%U, m_3%U, n_4%U, B_5%U, __6%U, __7%U) {
  
  return __7;
}

fn rwlUL_8(A_9%U, m_10%U, n_11%U, B_12%U, __13%U, __14%U) {
  
  return __14;
}

fn rwlLU_15(A_16%U, m_17%U, n_18%U, B_19%U, __20%U, __21%U) {
  
  return __21;
}

fn rwlLL_22(A_23%U, m_24%U, n_25%U, B_26%U, __27%U, __28%U) {
  
  return __28;
}

fn rwrUU_29(A_30%U, m_31%U, n_32%U, B_33%U, __34%U, __35%U) {
  
  return __35;
}

fn rwrUL_36(A_37%U, m_38%U, n_39%U, B_40%U, __41%U, __42%U) {
  
  return __42;
}

fn rwrLU_43(A_44%U, m_45%U, n_46%U, B_47%U, __48%U, __49%U) {
  
  return __49;
}

fn rwrLL_50(A_51%U, m_52%U, n_53%U, B_54%U, __55%U, __56%U) {
  
  return __56;
}

fn sing_elimUU_57(A_58%U, x_59%U, __60%U) {
  
  return __60;
}

fn sing_elimUL_61(A_62%U, x_63%U, __64%U) {
  
  return __64;
}

fn sing_elimLU_65(A_66%U, x_67%U, __68%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_69(A_70%U, x_71%U, __72%U) {
  
  return __72;
}

fn not_73(__74%U) {
  match(__74){
    true_4() => {
      val x_75 := false_5;
    }
    false_5() => {
      val x_75 := true_4;
    }
  }
  return x_75;
}

fn and_76(__77%U, __78%U) {
  match(__77){
    true_4() => {
      match(__78){
        true_4() => {
          val x_80 := true_4;
        }
        false_5() => {
          val x_80 := false_5;
        }
      }
      val x_79 := x_80;
    }
    false_5() => {
      val x_79 := false_5;
    }
  }
  return x_79;
}

fn or_81(__82%U, __83%U) {
  match(__82){
    true_4() => {
      val x_84 := true_4;
    }
    false_5() => {
      match(__83){
        true_4() => {
          val x_85 := true_4;
        }
        false_5() => {
          val x_85 := false_5;
        }
      }
      val x_84 := x_85;
    }
  }
  return x_84;
}

fn xor_86(__87%U, __88%L) {
  match(__87){
    true_4() => {
      match(__88){
        true_4() => {
          val x_90 := false_5;
        }
        false_5() => {
          val x_90 := true_4;
        }
      }
      val x_89 := x_90;
    }
    false_5() => {
      match(__88){
        true_4() => {
          val x_91 := true_4;
        }
        false_5() => {
          val x_91 := false_5;
        }
      }
      val x_89 := x_91;
    }
  }
  return x_89;
}

fn lte_92(__93%U, __94%U) {
  match[U](__93){
    zero_6() => {
      val x_95 := true_4;
    }
    succ_7(n_96) => {
      match[U](__94){
        zero_6() => {
          val x_97 := false_5;
        }
        succ_7(n_98) => {
          val x_99 := lte_92(n_96, n_98);
          val x_97 := x_99;
        }
      }
      val x_95 := x_97;
    }
  }
  return x_95;
}

fn lt_100(x_101%U, y_102%U) {
  val x_104 := mkconstr(succ_7, [x_101]);
  val x_103 := lte_92(x_104, y_102);
  return x_103;
}

fn pred_105(__106%U) {
  match[U](__106){
    zero_6() => {
      val x_108 := mkconstr(zero_6, []);
      val x_107 := x_108;
    }
    succ_7(n_109) => {
      val x_107 := n_109;
    }
  }
  return x_107;
}

fn add_110(__111%U, __112%U) {
  match[U](__111){
    zero_6() => {
      val x_113 := __112;
    }
    succ_7(n_114) => {
      val x_115 := add_110(n_114, __112);
      val x_116 := mkconstr(succ_7, [x_115]);
      val x_113 := x_116;
    }
  }
  return x_113;
}

fn sub_117(__118%U, __119%U) {
  match[U](__119){
    zero_6() => {
      val x_120 := __118;
    }
    succ_7(n_121) => {
      val x_123 := pred_105(__118);
      val x_122 := sub_117(x_123, n_121);
      val x_120 := x_122;
    }
  }
  return x_120;
}

fn mul_124(__125%U, __126%U) {
  match[U](__125){
    zero_6() => {
      val x_128 := mkconstr(zero_6, []);
      val x_127 := x_128;
    }
    succ_7(n_129) => {
      val x_131 := mul_124(n_129, __126);
      val x_130 := add_110(__126, x_131);
      val x_127 := x_130;
    }
  }
  return x_127;
}

fn div_132(x_133%U, y_134%U) {
  val x_136 := lt_100(x_133, y_134);
  match(x_136){
    true_4() => {
      val x_137 := mkconstr(zero_6, []);
      val x_135 := x_137;
    }
    false_5() => {
      val x_139 :=
        fn loop_140(x_141%U, y_142%U) {
          val x_145 := pred_105(y_142);
          val x_144 := sub_117(x_141, x_145);
          match[U](x_144){
            zero_6() => {
              val x_146 := mkconstr(zero_6, []);
              val x_143 := x_146;
            }
            succ_7(n_147) => {
              val x_148 := loop_140(n_147, y_142);
              val x_149 := mkconstr(succ_7, [x_148]);
              val x_143 := x_149;
            }
          }
          return x_143;
        };
      val loop_138 := x_139;
      val x_150 := loop_138(x_133, y_134);
      val x_135 := x_150;
    }
  }
  return x_135;
}

fn rem_151(x_152%U, y_153%U) {
  val x_156 := div_132(x_152, y_153);
  val x_155 := mul_124(x_156, y_153);
  val x_154 := sub_117(x_152, x_155);
  return x_154;
}

fn pow_157(x_158%U, y_159%U) {
  val x_161 :=
    fn loop_162(acc_163%U, y_164%U) {
      val x_166 := lte(y_164, y_164);
      match(x_166){
        true_4() => {
          val x_165 := acc_163;
        }
        false_5() => {
          val x_168 := mul(x_158, x_158);
          val x_169 := sub(y_164, y_164);
          val x_167 := loop_162(x_168, x_169);
          val x_165 := x_167;
        }
      }
      return x_165;
    };
  val loop_160 := x_161;
  val x_170 := loop_160(1, y_159);
  return x_170;
}

fn powm_171(x_172%U, y_173%U, m_174%U) {
  val x_176 :=
    fn loop_177(acc_178%U, y_179%U) {
      val x_181 := lte(y_179, y_179);
      match(x_181){
        true_4() => {
          val x_180 := acc_178;
        }
        false_5() => {
          val x_184 := mul(x_172, x_172);
          val x_185 := mul(x_172, x_172);
          val x_183 := mul(x_184, x_185);
          val x_186 := sub(y_179, y_179);
          val x_182 := loop_177(x_183, x_186);
          val x_180 := x_182;
        }
      }
      return x_180;
    };
  val loop_175 := x_176;
  val x_187 := loop_175(1, y_173);
  return x_187;
}

fn splitU_188(__189%U) {
  match[U](__189){
    nilUU_24() => {
      val x_191 := mkconstr(nilUU_24, []);
      val x_192 := mkconstr(nilUU_24, []);
      val x_193 := mkconstr(ex1UU_33, [x_191, x_192]);
      val x_190 := x_193;
    }
    consUU_25(hd_194, tl_195) => {
      match[U](tl_195){
        nilUU_24() => {
          val x_197 := mkconstr(nilUU_24, []);
          val x_198 := mkconstr(consUU_25, [hd_194, x_197]);
          val x_199 := mkconstr(nilUU_24, []);
          val x_200 := mkconstr(ex1UU_33, [x_198, x_199]);
          val x_196 := x_200;
        }
        consUU_25(hd_201, tl_202) => {
          val x_204 := splitU_188(tl_202);
          match[L](x_204){
            ex1UU_33(m_205, n_206) => {
              val x_207 := mkconstr(consUU_25, [hd_194, m_205]);
              val x_208 := mkconstr(consUU_25, [hd_201, n_206]);
              val x_209 := mkconstr(ex1UU_33, [x_207, x_208]);
              val x_203 := x_209;
            }
          }
          val x_196 := x_203;
        }
      }
      val x_190 := x_196;
    }
  }
  return x_190;
}

fn splitL_210(__211%U) {
  match[L](__211){
    nilUL_22() => {
      val x_213 := mkconstr(nilUL_22, []);
      val x_214 := mkconstr(nilUL_22, []);
      val x_215 := mkconstr(ex1LL_30, [x_213, x_214]);
      val x_212 := x_215;
    }
    consUL_23(hd_216, tl_217) => {
      match[L](tl_217){
        nilUL_22() => {
          val x_219 := mkconstr(nilUL_22, []);
          val x_220 := mkconstr(consUL_23, [hd_216, x_219]);
          val x_221 := mkconstr(nilUL_22, []);
          val x_222 := mkconstr(ex1LL_30, [x_220, x_221]);
          val x_218 := x_222;
        }
        consUL_23(hd_223, tl_224) => {
          val x_226 := splitL_210(tl_224);
          match[L](x_226){
            ex1LL_30(m_227, n_228) => {
              val x_229 := mkconstr(consUL_23, [hd_216, m_227]);
              val x_230 := mkconstr(consUL_23, [hd_223, n_228]);
              val x_231 := mkconstr(ex1LL_30, [x_229, x_230]);
              val x_225 := x_231;
            }
          }
          val x_218 := x_225;
        }
      }
      val x_212 := x_218;
    }
  }
  return x_212;
}

fn mergeU_232(__233%U, __234%L) {
  match[U](__233){
    nilUU_24() => {
      val x_235 := __234;
    }
    consUU_25(hd_236, tl_237) => {
      match[U](__234){
        nilUU_24() => {
          val x_239 := mkconstr(consUU_25, [hd_236, tl_237]);
          val x_238 := x_239;
        }
        consUU_25(hd_240, tl_241) => {
          val x_243 := lte(hd_236, hd_236);
          match(x_243){
            true_4() => {
              val x_245 := mkconstr(consUU_25, [hd_240, tl_241]);
              val x_244 := mergeU_232(tl_237, x_245);
              val x_246 := mkconstr(consUU_25, [hd_236, x_244]);
              val x_242 := x_246;
            }
            false_5() => {
              val x_248 := mkconstr(consUU_25, [hd_236, tl_237]);
              val x_247 := mergeU_232(x_248, tl_241);
              val x_249 := mkconstr(consUU_25, [hd_240, x_247]);
              val x_242 := x_249;
            }
          }
          val x_238 := x_242;
        }
      }
      val x_235 := x_238;
    }
  }
  return x_235;
}

fn mergeL_250(__251%U, __252%L) {
  match[L](__251){
    nilUL_22() => {
      val x_253 := __252;
    }
    consUL_23(hd_254, tl_255) => {
      match[L](__252){
        nilUL_22() => {
          val x_257 := mkconstr(consUL_23, [hd_254, tl_255]);
          val x_256 := x_257;
        }
        consUL_23(hd_258, tl_259) => {
          val x_261 := lte(hd_254, hd_254);
          match(x_261){
            true_4() => {
              val x_263 := mkconstr(consUL_23, [hd_258, tl_259]);
              val x_262 := mergeL_250(tl_255, x_263);
              val x_264 := mkconstr(consUL_23, [hd_254, x_262]);
              val x_260 := x_264;
            }
            false_5() => {
              val x_266 := mkconstr(consUL_23, [hd_254, tl_255]);
              val x_265 := mergeL_250(x_266, tl_259);
              val x_267 := mkconstr(consUL_23, [hd_258, x_265]);
              val x_260 := x_267;
            }
          }
          val x_256 := x_260;
        }
      }
      val x_253 := x_256;
    }
  }
  return x_253;
}

fn msortU_268(__269%U) {
  match[U](__269){
    nilUU_24() => {
      val x_271 := mkconstr(nilUU_24, []);
      val x_270 := x_271;
    }
    consUU_25(hd_272, tl_273) => {
      match[U](tl_273){
        nilUU_24() => {
          val x_275 := mkconstr(nilUU_24, []);
          val x_276 := mkconstr(consUU_25, [hd_272, x_275]);
          val x_274 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          val x_281 := mkconstr(consUU_25, [hd_277, tl_278]);
          val x_282 := mkconstr(consUU_25, [hd_272, x_281]);
          val x_280 := splitU_188(x_282);
          match[L](x_280){
            ex1UU_33(m_283, n_284) => {
              val x_286 := msortU_268(m_283);
              val x_287 := msortU_268(n_284);
              val x_285 := mergeU_232(x_286, x_287);
              val x_279 := x_285;
            }
          }
          val x_274 := x_279;
        }
      }
      val x_270 := x_274;
    }
  }
  return x_270;
}

fn msortL_288(__289%U) {
  match[L](__289){
    nilUL_22() => {
      val x_291 := mkconstr(nilUL_22, []);
      val x_290 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          val x_295 := mkconstr(nilUL_22, []);
          val x_296 := mkconstr(consUL_23, [hd_292, x_295]);
          val x_294 := x_296;
        }
        consUL_23(hd_297, tl_298) => {
          val x_301 := mkconstr(consUL_23, [hd_297, tl_298]);
          val x_302 := mkconstr(consUL_23, [hd_292, x_301]);
          val x_300 := splitL_210(x_302);
          match[L](x_300){
            ex1LL_30(m_303, n_304) => {
              val x_306 := msortL_288(m_303);
              val x_307 := msortL_288(n_304);
              val x_305 := mergeL_250(x_306, x_307);
              val x_299 := x_305;
            }
          }
          val x_294 := x_299;
        }
      }
      val x_290 := x_294;
    }
  }
  return x_290;
}

fn cmsort_workerU_308(__309%U, zs_310%U, __311%L) {
  match[U](__309){
    zero_6() => {
      val x_313 :=
        lazy {
          val x_316 := msortU_268(zs_310);
          val x_315 := send(__311, x_316);
          val c_314 := x_315;
          val x_317 := close[true](c_314);
          return x_317;
        };
      val x_312 := x_313;
    }
    succ_7(n_318) => {
      match[U](zs_310){
        nilUU_24() => {
          val x_320 :=
            lazy {
              val x_323 := mkconstr(nilUU_24, []);
              val x_322 := send(__311, x_323);
              val c_321 := x_322;
              val x_324 := close[true](c_321);
              return x_324;
            };
          val x_319 := x_320;
        }
        consUU_25(hd_325, tl_326) => {
          match[U](tl_326){
            nilUU_24() => {
              val x_328 :=
                lazy {
                  val x_331 := mkconstr(nilUU_24, []);
                  val x_332 := mkconstr(consUU_25, [hd_325, x_331]);
                  val x_330 := send(__311, x_332);
                  val c_329 := x_330;
                  val x_333 := close[true](c_329);
                  return x_333;
                };
              val x_327 := x_328;
            }
            consUU_25(hd_334, tl_335) => {
              val x_338 := mkconstr(consUU_25, [hd_334, tl_335]);
              val x_339 := mkconstr(consUU_25, [hd_325, x_338]);
              val x_337 := splitU_188(x_339);
              match[L](x_337){
                ex1UU_33(m_340, n_341) => {
                  val x_342 :=
                    lazy {
                      val x_345 :=
                        fn lam_346(_347%L) {
                          val x_348 := cmsort_workerU_308(n_318, m_340, _347);
                          return x_348;
                        };
                      val x_344 := fork(x_345);
                      val r1_343 := x_344;
                      val x_351 :=
                        fn lam_352(_353%L) {
                          val x_354 := cmsort_workerU_308(n_318, n_341, _353);
                          return x_354;
                        };
                      val x_350 := fork(x_351);
                      val r2_349 := x_350;
                      val x_356 := recv[U](r1_343);
                      val _355 := x_356;
                      match[L](_355){
                        ex1UL_32(m_358, n_359) => {
                          val x_361 := close[false](n_359);
                          val __360 := x_361;
                          val x_363 := recv[U](r2_349);
                          val _362 := x_363;
                          match[L](_362){
                            ex1UL_32(m_365, n_366) => {
                              val x_368 := close[false](n_366);
                              val __367 := x_368;
                              val x_370 := mergeU_232(m_358, m_365);
                              val zs1_369 := x_370;
                              val x_372 := rwlUU_1(NULL, NULL, NULL, NULL, NULL, zs1_369);
                              val zs1_371 := x_372;
                              val x_374 := send(__311, zs1_371);
                              val c_373 := x_374;
                              val x_376 := close[true](c_373);
                              val __375 := x_376;
                              val x_364 := tt_3;
                            }
                          }
                          val x_357 := x_364;
                        }
                      }
                      return x_357;
                    };
                  val x_336 := x_342;
                }
              }
              val x_327 := x_336;
            }
          }
          val x_319 := x_327;
        }
      }
      val x_312 := x_319;
    }
  }
  return x_312;
}

fn cmsort_workerL_377(__378%U, zs_379%U, __380%L) {
  match[U](__378){
    zero_6() => {
      val x_382 :=
        lazy {
          val x_385 := msortL_288(zs_379);
          val x_384 := send(__380, x_385);
          val c_383 := x_384;
          val x_386 := close[true](c_383);
          return x_386;
        };
      val x_381 := x_382;
    }
    succ_7(n_387) => {
      match[L](zs_379){
        nilUL_22() => {
          val x_389 :=
            lazy {
              val x_392 := mkconstr(nilUL_22, []);
              val x_391 := send(__380, x_392);
              val c_390 := x_391;
              val x_393 := close[true](c_390);
              return x_393;
            };
          val x_388 := x_389;
        }
        consUL_23(hd_394, tl_395) => {
          match[L](tl_395){
            nilUL_22() => {
              val x_397 :=
                lazy {
                  val x_400 := mkconstr(nilUL_22, []);
                  val x_401 := mkconstr(consUL_23, [hd_394, x_400]);
                  val x_399 := send(__380, x_401);
                  val c_398 := x_399;
                  val x_402 := close[true](c_398);
                  return x_402;
                };
              val x_396 := x_397;
            }
            consUL_23(hd_403, tl_404) => {
              val x_407 := mkconstr(consUL_23, [hd_403, tl_404]);
              val x_408 := mkconstr(consUL_23, [hd_394, x_407]);
              val x_406 := splitL_210(x_408);
              match[L](x_406){
                ex1LL_30(m_409, n_410) => {
                  val x_411 :=
                    lazy {
                      val x_414 :=
                        fn lam_415(_416%L) {
                          val x_417 := cmsort_workerL_377(n_387, m_409, _416);
                          return x_417;
                        };
                      val x_413 := fork(x_414);
                      val r1_412 := x_413;
                      val x_420 :=
                        fn lam_421(_422%L) {
                          val x_423 := cmsort_workerL_377(n_387, n_410, _422);
                          return x_423;
                        };
                      val x_419 := fork(x_420);
                      val r2_418 := x_419;
                      val x_425 := recv[L](r1_412);
                      val _424 := x_425;
                      match[L](_424){
                        ex1LL_30(m_427, n_428) => {
                          val x_430 := close[false](n_428);
                          val __429 := x_430;
                          val x_432 := recv[L](r2_418);
                          val _431 := x_432;
                          match[L](_431){
                            ex1LL_30(m_434, n_435) => {
                              val x_437 := close[false](n_435);
                              val __436 := x_437;
                              val x_439 := mergeL_250(m_427, m_434);
                              val zs1_438 := x_439;
                              val x_441 := rwlLL_22(NULL, NULL, NULL, NULL, NULL, zs1_438);
                              val zs1_440 := x_441;
                              val x_443 := send(__380, zs1_440);
                              val c_442 := x_443;
                              val x_445 := close[true](c_442);
                              val __444 := x_445;
                              val x_433 := tt_3;
                            }
                          }
                          val x_426 := x_433;
                        }
                      }
                      return x_426;
                    };
                  val x_405 := x_411;
                }
              }
              val x_396 := x_405;
            }
          }
          val x_388 := x_396;
        }
      }
      val x_381 := x_388;
    }
  }
  return x_381;
}

-----------------------------------------

