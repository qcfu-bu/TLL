#[program]
inductive unit_1‹s_42› : Type‹s_42› where
| tt_1 : unit_1‹??_1›

#[program]
inductive nat_2‹› : U where
| zero_2 : nat_2
| succ_3 (pred_43 : nat_2) : nat_2

#[program]
inductive choice_3‹› : L where
| next_4 : choice_3
| free_5 : choice_3

#[program]
inductive stream_node_4‹s_44› (A_45 : Type‹s_44›): L where
| stream_nil_6 : (stream_node_4‹??_2› A_45)
| stream_cons_7
    (hd_46 : A_45)
    (tl_47 : ∀ (x_48 : choice_3) -o
               match x_48 in ?_1[0;0] -o ?_2[0;0] with
               | next_4 => (stream_node_4‹??_3› A_45)
               | free_5 => unit_1‹??_4›)
    : (stream_node_4‹??_5› A_45)

#[logical]
def stream_1‹s_50› : Type‹s_50› -> ?_6[0;0] :=
  function stream_52 : Type‹s_50› -> ?_3[0;0]
  | A_54 =>
    ∀ (x_55 : choice_3) -o
      match x_55 in ?_4[0;0] -o ?_5[0;0] with
      | next_4 => (stream_node_4‹??_6› A_54)
      | free_5 => unit_1‹??_7›

#[program]
def free_stream_2‹s_57› :
  ∀ {A_58 : Type‹s_57›} ->
    ((stream_1‹??_10›) A_58) -> unit_1‹U›
:=
  function free_stream_60 :
    ∀ {A_61 : Type‹s_57›} ->
      ((stream_1‹??_8›) A_61) -> unit_1‹U›
  | A_63 st_64 =>
    match ((st_64) free_5) in ?_7[0;0] -o ?_8[0;0] with
    | tt_1 => tt_1‹??_9›

#[program]
def stream_succ_3‹› :
  ((stream_1‹??_15›) nat_2) -> ((stream_1‹??_16›) nat_2)
:=
  function stream_succ_67 :
    ((stream_1‹??_11›) nat_2) -> ((stream_1‹??_12›) nat_2)
  | xs_69 next_4 =>
    match ((xs_69) next_4) in ?_9[0;0] -o ?_10[0;0] with
    | stream_nil_6 => (stream_nil_6‹??_13› ?_11[0;0])
    | (stream_cons_7 hd_71 tl_72) =>
      (stream_cons_7‹??_14›
        ?_12[0;0] (succ_3‹› hd_71) ((stream_succ_67) tl_72))
  | xs_73 free_5 => ((xs_73) free_5)

#[program]
def nat_make_4‹› : nat_2 -> ((stream_1‹??_20›) nat_2) :=
  function nat_make_75 : nat_2 -> ((stream_1‹??_17›) nat_2)
  | n_77 next_4 =>
    (stream_cons_7‹??_18›
      ?_13[0;0] n_77 ((nat_make_75) (succ_3‹› n_77)))
  | n_78 free_5 => tt_1‹??_19›

#[program]
def nat_stream_5‹› : ?_14[0;0] := ((nat_make_4) zero_2)

#[program]
def snat_stream_6‹› : ?_15[0;0] := ((stream_succ_3) nat_stream_5)

#[program]
def __7‹› : ?_17[0;0] :=
  ((free_stream_2‹??_21›) ?_16[0;0] snat_stream_6)

-----------------------------------------

#[program]
inductive unit_1‹s_620› : Type‹s_620› where
| tt_1 : unit_1‹s_620›

#[program]
inductive nat_2‹› : U where
| zero_2 : nat_2
| succ_3 (pred_621 : nat_2) : nat_2

#[program]
inductive choice_3‹› : L where
| next_4 : choice_3
| free_5 : choice_3

#[program]
inductive stream_node_4‹s_622› (A_623 : Type‹s_622›): L where
| stream_nil_6 : (stream_node_4‹s_622› A_623)
| stream_cons_7
    (hd_624 : A_623)
    (tl_625 : ∀ (x_626 : choice_3) -o
                match x_626 in choice_3 -o L with
                | next_4 => (stream_node_4‹s_622› A_623)
                | free_5 => unit_1‹L›)
    : (stream_node_4‹s_622› A_623)

#[logical]
def stream_1‹s_628› : Type‹s_628› -> L :=
  function stream_630 : Type‹s_628› -> L
  | A_632 =>
    ∀ (x_633 : choice_3) -o
      match x_633 in choice_3 -o L with
      | next_4 => (stream_node_4‹s_628› A_632)
      | free_5 => unit_1‹L›

#[program]
def free_stream_2‹s_635› :
  ∀ {A_636 : Type‹s_635›} ->
    ((stream_1‹s_635›) A_636) -> unit_1‹U›
:=
  function free_stream_638 :
    ∀ {A_639 : Type‹s_635›} ->
      ((stream_1‹s_635›) A_639) -> unit_1‹U›
  | A_641 st_642 =>
    match ((st_642) free_5) in unit_1‹L› -o unit_1‹U› with
    | tt_1 => tt_1‹U›

#[program]
def stream_succ_3‹› :
  ((stream_1‹U›) nat_2) -> ((stream_1‹U›) nat_2)
:=
  function stream_succ_645 :
    ((stream_1‹U›) nat_2) -> ((stream_1‹U›) nat_2)
  | xs_647 next_4 =>
    match ((xs_647) next_4) in
      (stream_node_4‹U› nat_2) -o (stream_node_4‹U› nat_2)
    with
    | stream_nil_6 => (stream_nil_6‹U› nat_2)
    | (stream_cons_7 hd_649 tl_650) =>
      (stream_cons_7‹U›
        nat_2 (succ_3‹› hd_649) ((stream_succ_645) tl_650))
  | xs_651 free_5 => ((xs_651) free_5)

#[program]
def nat_make_4‹› : nat_2 -> ((stream_1‹U›) nat_2) :=
  function nat_make_653 : nat_2 -> ((stream_1‹U›) nat_2)
  | n_655 next_4 =>
    (stream_cons_7‹U› nat_2 n_655 ((nat_make_653) (succ_3‹› n_655)))
  | n_656 free_5 => tt_1‹L›

#[program]
def nat_stream_5‹› : ((stream_1‹U›) nat_2) := ((nat_make_4) zero_2)

#[program]
def snat_stream_6‹› : ((stream_1‹U›) nat_2) :=
  ((stream_succ_3) nat_stream_5)

#[program]
def __7‹› : unit_1‹U› := ((free_stream_2‹U›) nat_2 snat_stream_6)

-----------------------------------------

#[program]
inductive unitU_6 where
| ttU_9 of layout[]

#[program]
inductive unitL_5 where
| ttL_8 of layout[]

#[program]
inductive nat_2 where
| zero_2 of layout[]
| succ_3 of layout[R]

#[program]
inductive choice_3 where
| next_4 of layout[]
| free_5 of layout[]

#[program]
inductive stream_nodeU_8 where
| stream_nilU_12 of layout[]
| stream_consU_13 of layout[R, R]

#[program]
inductive stream_nodeL_7 where
| stream_nilL_10 of layout[]
| stream_consL_11 of layout[R, R]

#[logical]
def streamU_9 := NULL

#[logical]
def streamL_8 := NULL

#[program]
def free_streamU_11 :=
  fun free_stream_836 {A_837} -> (st_838) ->
    match ((st_838) free_5) with
    | ttL_8  => ttU_9
    end

#[program]
def free_streamL_10 :=
  fun free_stream_839 {A_840} -> (st_841) ->
    match ((st_841) free_5) with
    | ttL_8  => ttU_9
    end

#[program]
def stream_succ_3 :=
  fun stream_succ_842 (xs_843) -> (x_844) -o
    match x_844 with
    | next_4  =>
      match ((xs_843) next_4) with
      | stream_nilU_12  => stream_nilU_12
      | stream_consU_13 hd_845 tl_846 =>
        (stream_consU_13 (succ_3 hd_845) ((stream_succ_842) tl_846))
      end
    | free_5  => ((xs_843) free_5)
    end

#[program]
def nat_make_4 :=
  fun nat_make_847 (n_848) -> (x_849) -o
    match x_849 with
    | next_4  => (stream_consU_13 n_848 ((nat_make_847) (succ_3 n_848)))
    | free_5  => ttL_8
    end

#[program]
def nat_stream_5 := ((nat_make_4) zero_2)

#[program]
def snat_stream_6 := ((stream_succ_3) nat_stream_5)

#[program]
def __7 := ((free_streamU_11) NULL snat_stream_6)

-----------------------------------------

#[program]
inductive unitU_6 where
| ttU_9 of layout[]

#[program]
inductive unitL_5 where
| ttL_8 of layout[]

#[program]
inductive nat_2 where
| zero_2 of layout[]
| succ_3 of layout[R]

#[program]
inductive choice_3 where
| next_4 of layout[]
| free_5 of layout[]

#[program]
inductive stream_nodeU_8 where
| stream_nilU_12 of layout[]
| stream_consU_13 of layout[R, R]

#[program]
inductive stream_nodeL_7 where
| stream_nilL_10 of layout[]
| stream_consL_11 of layout[R, R]

#[logical]
def streamU_9 := NULL

#[logical]
def streamL_8 := NULL

#[program]
def free_streamU_11 :=
  fun free_stream_864 {A_865} -> (st_866) ->
    match ((st_866) free_5) with
    | ttL_8  => ttU_9
    end

#[program]
def free_streamL_10 :=
  fun free_stream_867 {A_868} -> (st_869) ->
    match ((st_869) free_5) with
    | ttL_8  => ttU_9
    end

#[program]
def stream_succ_3 :=
  fun stream_succ_870 (xs_871) -> (x_872) -o
    match x_872 with
    | next_4  =>
      match ((xs_871) next_4) with
      | stream_nilU_12  => stream_nilU_12
      | stream_consU_13 hd_873 tl_874 =>
        (stream_consU_13 (succ_3 hd_873) ((stream_succ_870) tl_874))
      end
    | free_5  => ((xs_871) free_5)
    end

#[program]
def nat_make_4 :=
  fun nat_make_875 (n_876) -> (x_877) -o
    match x_877 with
    | next_4  => (stream_consU_13 n_876 ((nat_make_875) (succ_3 n_876)))
    | free_5  => ttL_8
    end

#[program]
def nat_stream_5 := ((nat_make_4) zero_2)

#[program]
def snat_stream_6 := ((stream_succ_3) nat_stream_5)

#[program]
def __7 := ((free_streamU_11) NULL snat_stream_6)

-----------------------------------------

