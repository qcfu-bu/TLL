[Inductive {name = "unit"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)), [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
      ));
   view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("pred", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id ("A", I)),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id ("A", I)),
                          (Binder ("_", (TBase (Type U)))))),
                       [(DConstr ("refl",
                           (TBase
                              (App
                                 [(Id ("eq", I)); (Id ("m", I));
                                   (Id ("m", I))])),
                           []))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DConstr ("ex",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (N,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("pf",
                                       (TBase
                                          (App
                                             [(Id ("exists", I));
                                               (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("A", I)),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DConstr ("just",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("m",
                           (TBase (App [(Id ("sing", I)); (Id ("m", I))]))))
                        )),
                     [E]))
                   ]))
             ))
          ))
       ));
    view = [I]};
  Inductive {name = "prod"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Type (SId "r")),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DConstr ("pair",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R, (Id ("B", I)),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("prod", I));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [E; E]};
  Definition {name = "sing_double"; relv = N;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("A", I)),
                    (Binder ("m",
                       (Pi (R, L, (App [(Id ("sing", I)); (Id ("m", I))]),
                          (Binder ("x",
                             (Pi (R, L,
                                (App [(Id ("sing", I)); (Id ("m", I))]),
                                (Binder ("y",
                                   (App
                                      [(Id ("eq", I)); (Id ("x", I));
                                        (Id ("y", I))])
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "sing_double"),
              [([(PId "A"); (PId "m"); (PConstr ("just", [(PId "x")]));
                  (PConstr ("just", [(PId "y")]))],
                (Some (Id ("refl", I))))]
              )),
           [E; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("A", I)),
                 (Binder ("m",
                    (Pi (R, L, (App [(Id ("sing", I)); (Id ("m", I))]),
                       (Binder ("x",
                          (Pi (R, L, (App [(Id ("sing", I)); (Id ("m", I))]),
                             (Binder ("y",
                                (App
                                   [(Id ("eq", I)); (Id ("x", I));
                                     (Id ("y", I))])
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E]}
  ]

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive nat_2‹› : U where
| zero_2 : nat_2
| succ_3 (pred_54 : nat_2) : nat_2

#[logical]
inductive eq_3‹s_55› (A_56 : Type‹s_55›) (m_57 : A_56): A_56 -> U
where
| refl_4 : (eq_3‹??_1› ?_1 m_57 m_57)

#[program]
inductive exists_4‹s_59,r_60,t_61› (A_62 : Type‹s_59›) (B_63 : 
A_62 -> Type‹r_60›): Type‹t_61› where
| ex_5
    (m_65 : A_62) {pf_66 : ((B_63) m_65)}
    : (exists_4‹??_2,??_3,??_4› ?_2 B_63)

#[program]
inductive sing_5‹s_67› (A_68 : Type‹s_67›): A_68 -> Type‹s_67›
where
| just_6 (m_70 : A_68) : (sing_5‹??_5› ?_3 m_70)

#[program]
inductive prod_6‹s_71,r_72,t_73› (A_74 : Type‹s_71›) (B_75 : Type‹r_72›):
  Type‹t_73›
where
| pair_7 (m_76 : A_74) (n_77 : B_75) : (prod_6‹??_6,??_7,??_8› A_74 B_75)

#[logical]
def sing_double_1‹s_78› :
  ∀ {A_79 : Type‹s_78›} ->
    ∀ {m_80 : A_79} ->
      ∀ (x_81 : (sing_5‹??_13› ?_9 m_80)) -o
        ∀ (y_82 : (sing_5‹??_14› ?_10 m_80)) -o
          (eq_3‹??_15› ?_11 x_81 y_82)
:=
  function sing_double_83 :
    ∀ {A_84 : Type‹s_78›} ->
      ∀ {m_85 : A_84} ->
        ∀ (x_86 : (sing_5‹??_9› ?_4 m_85)) -o
          ∀ (y_87 : (sing_5‹??_10› ?_5 m_85)) -o
            (eq_3‹??_11› ?_6 x_86 y_87)
  | A_88 m_89 (just_6 x_90) (just_6 y_91) => refl_4‹??_12›

-----------------------------------------

inductive-------------------------
infer_tm(unit_1)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(nat_2)
infer_tm(nat_2)
infer_tm(nat_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_94›)
infer_tm(A_95)
infer_tm(A_95)
infer_tm(Type‹s_98›)
infer_tm(A_99)
assert_equal1( A_99, ?_1)
assert_equal1( m_100, m_100)
infer_tm((eq_3‹??_1› ?_1 m_100 m_100))
check_tm( ?_1, Type‹??_1›)
check_tm( m_100, ?_1)
infer_tm(m_100)
assert_equal1( ?_1, A_99)
check_tm( m_100, ?_1)
infer_tm(m_100)
assert_equal1( ?_1, A_99)
simpl_tm ~expand:false( ?_1, A_99)
simpl_tm ~expand:false( A_99, A_99)
simpl_tm ~expand:false( A_99, A_99)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_101
    
  |}
  imeta_meta {|
    ?_1 <= A_104
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_98›)
check_tm( A_99, Type‹s_98›)
infer_tm(A_99)
assert_equal1( Type‹s_98›, Type‹s_98›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_116›)
infer_tm(A_119 -> Type‹r_117›)
infer_tm(A_119)
infer_tm(Type‹r_117›)
infer_tm(Type‹s_123›)
infer_tm(A_126 -> Type‹r_124›)
infer_tm(A_126)
infer_tm(Type‹r_124›)
infer_tm(A_126)
infer_tm(((B_127) m_130))
infer_tm(B_127)
check_tm( m_130, A_126)
infer_tm(m_130)
assert_equal1( A_126, A_126)
assert_equal1( A_126, ?_2)
assert_equal1( B_127, B_127)
infer_tm((exists_4‹??_2,??_3,??_4› ?_2 B_127))
check_tm( ?_2, Type‹??_2›)
check_tm( B_127, ?_2 -> Type‹??_3›)
infer_tm(B_127)
assert_equal1( ?_2 -> Type‹??_3›, A_126 -> Type‹r_124›)
simpl_tm ~expand:false( ?_2 -> Type‹??_3›, A_126 -> Type‹r_124›)
simpl_tm ~expand:false( ?_2, A_126)
simpl_tm ~expand:false( Type‹??_3›, Type‹r_124›)
simpl_tm ~expand:false( A_126, A_126)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_141
    ??_2 <= s_144
    ??_3 <= r_146
    ??_4 <= t_148
    
  |}
  imeta_meta {|
    ?_1 <= A_153
    ?_2 <= A_160
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_123›)
check_tm( A_126, Type‹s_123›)
infer_tm(A_126)
assert_equal1( Type‹s_123›, Type‹s_123›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_193›)
infer_tm(A_194)
infer_tm(Type‹s_196›)
infer_tm(A_197)
assert_equal1( A_197, ?_3)
infer_tm((sing_5‹??_5› ?_3 m_198))
check_tm( ?_3, Type‹??_5›)
check_tm( m_198, ?_3)
infer_tm(m_198)
assert_equal1( ?_3, A_197)
simpl_tm ~expand:false( ?_3, A_197)
simpl_tm ~expand:false( A_197, A_197)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_199
    ??_2 <= s_202
    ??_3 <= r_204
    ??_4 <= t_206
    ??_5 <= s_209
    
  |}
  imeta_meta {|
    ?_1 <= A_212
    ?_2 <= A_219
    ?_3 <= A_222
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_196›)
check_tm( A_197, Type‹s_196›)
infer_tm(A_197)
assert_equal1( Type‹s_196›, Type‹s_196›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_235›)
infer_tm(Type‹r_236›)
infer_tm(Type‹s_240›)
infer_tm(Type‹r_241›)
infer_tm(A_243)
infer_tm(B_244)
assert_equal1( A_243, A_243)
assert_equal1( B_244, B_244)
infer_tm((prod_6‹??_6,??_7,??_8› A_243 B_244))
check_tm( A_243, Type‹??_6›)
infer_tm(A_243)
assert_equal1( Type‹??_6›, Type‹s_240›)
check_tm( B_244, Type‹??_7›)
infer_tm(B_244)
assert_equal1( Type‹??_7›, Type‹r_241›)
simpl_tm ~expand:false( Type‹??_7›, Type‹r_241›)
simpl_tm ~expand:false( Type‹??_6›, Type‹s_240›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_247
    ??_2 <= s_250
    ??_3 <= r_252
    ??_4 <= t_254
    ??_5 <= s_257
    ??_6 <= s_260
    ??_7 <= r_262
    ??_8 <= t_264
    
  |}
  imeta_meta {|
    ?_1 <= A_269
    ?_2 <= A_276
    ?_3 <= A_279
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(∀ {A_306 : Type‹s_305›} ->
           ∀ {m_307 : A_306} ->
             ∀ (x_308 : (sing_5‹??_13› ?_9 m_307)) -o
               ∀ (y_309 : (sing_5‹??_14› ?_10 m_307)) -o
                 (eq_3‹??_15› ?_11 x_308 y_309))
infer_tm(Type‹s_305›)
infer_tm(∀ {m_311 : A_310} ->
           ∀ (x_312 : (sing_5‹??_13› ?_9 m_311)) -o
             ∀ (y_313 : (sing_5‹??_14› ?_10 m_311)) -o
               (eq_3‹??_15› ?_11 x_312 y_313))
infer_tm(A_310)
infer_tm(∀ (x_315 : (sing_5‹??_13› ?_9 m_314)) -o
           ∀ (y_316 : (sing_5‹??_14› ?_10 m_314)) -o
             (eq_3‹??_15› ?_11 x_315 y_316))
infer_tm((sing_5‹??_13› ?_9 m_314))
check_tm( ?_9, Type‹??_13›)
check_tm( m_314, ?_9)
infer_tm(m_314)
assert_equal1( ?_9, A_310)
simpl_tm ~expand:false( ?_9, A_310)
infer_tm(∀ (y_318 : (sing_5‹??_14› ?_10 m_314)) -o
           (eq_3‹??_15› ?_11 x_317 y_318))
infer_tm((sing_5‹??_14› ?_10 m_314))
check_tm( ?_10, Type‹??_14›)
check_tm( m_314, ?_10)
infer_tm(m_314)
assert_equal1( ?_10, A_310)
simpl_tm ~expand:false( ?_10, A_310)
infer_tm((eq_3‹??_15› ?_11 x_317 y_319))
check_tm( ?_11, Type‹??_15›)
check_tm( x_317, ?_11)
infer_tm(x_317)
assert_equal1( ?_11, (sing_5‹??_13› ?_9 m_314))
check_tm( y_319, ?_11)
infer_tm(y_319)
assert_equal1( ?_11, (sing_5‹??_14› ?_10 m_314))
simpl_tm ~expand:false( ?_11, (sing_5‹??_14› A_310 m_314))
simpl_tm ~expand:false( (sing_5‹??_14› A_310 m_314),
  (sing_5‹??_13› A_310 m_314))
simpl_tm ~expand:false( A_310, A_310)
simpl_tm ~expand:false( m_314, m_314)
check_tm(
  function sing_double_320 :
    ∀ {A_321 : Type‹s_305›} ->
      ∀ {m_322 : A_321} ->
        ∀ (x_323 : (sing_5‹??_9› ?_4 m_322)) -o
          ∀ (y_324 : (sing_5‹??_10› ?_5 m_322)) -o
            (eq_3‹??_11› ?_6 x_323 y_324)
  | A_325 m_326 (just_6 x_327) (just_6 y_328) => refl_4‹??_12›,
  ∀ {A_329 : Type‹s_305›} ->
    ∀ {m_330 : A_329} ->
      ∀ (x_331 : (sing_5‹??_13› ?_9 m_330)) -o
        ∀ (y_332 : (sing_5‹??_14› ?_10 m_330)) -o
          (eq_3‹??_15› ?_11 x_331 y_332))
infer_tm(∀ {A_334 : Type‹s_305›} ->
           ∀ {m_335 : A_334} ->
             ∀ (x_336 : (sing_5‹??_9› ?_4 m_335)) -o
               ∀ (y_337 : (sing_5‹??_10› ?_5 m_335)) -o
                 (eq_3‹??_11› ?_6 x_336 y_337))
infer_tm(Type‹s_305›)
infer_tm(∀ {m_339 : A_338} ->
           ∀ (x_340 : (sing_5‹??_9› ?_4 m_339)) -o
             ∀ (y_341 : (sing_5‹??_10› ?_5 m_339)) -o
               (eq_3‹??_11› ?_6 x_340 y_341))
infer_tm(A_338)
infer_tm(∀ (x_343 : (sing_5‹??_9› ?_4 m_342)) -o
           ∀ (y_344 : (sing_5‹??_10› ?_5 m_342)) -o
             (eq_3‹??_11› ?_6 x_343 y_344))
infer_tm((sing_5‹??_9› ?_4 m_342))
check_tm( ?_4, Type‹??_9›)
check_tm( m_342, ?_4)
infer_tm(m_342)
assert_equal1( ?_4, A_338)
simpl_tm ~expand:false( ?_4, A_338)
infer_tm(∀ (y_346 : (sing_5‹??_10› ?_5 m_342)) -o
           (eq_3‹??_11› ?_6 x_345 y_346))
infer_tm((sing_5‹??_10› ?_5 m_342))
check_tm( ?_5, Type‹??_10›)
check_tm( m_342, ?_5)
infer_tm(m_342)
assert_equal1( ?_5, A_338)
simpl_tm ~expand:false( ?_5, A_338)
infer_tm((eq_3‹??_11› ?_6 x_345 y_347))
check_tm( ?_6, Type‹??_11›)
check_tm( x_345, ?_6)
infer_tm(x_345)
assert_equal1( ?_6, (sing_5‹??_9› ?_4 m_342))
check_tm( y_347, ?_6)
infer_tm(y_347)
assert_equal1( ?_6, (sing_5‹??_10› ?_5 m_342))
simpl_tm ~expand:false( ?_6, (sing_5‹??_10› A_338 m_342))
simpl_tm ~expand:false( (sing_5‹??_10› A_338 m_342),
  (sing_5‹??_9› A_338 m_342))
simpl_tm ~expand:false( A_338, A_338)
simpl_tm ~expand:false( m_342, m_342)
assert_equal1(
  ∀ {A_348 : Type‹s_305›} ->
    ∀ {m_349 : A_348} ->
      ∀ (x_350 : (sing_5‹??_13› ?_9 m_349)) -o
        ∀ (y_351 : (sing_5‹??_14› ?_10 m_349)) -o
          (eq_3‹??_15› ?_11 x_350 y_351),
  ∀ {A_352 : Type‹s_305›} ->
    ∀ {m_353 : A_352} ->
      ∀ (x_354 : (sing_5‹??_9› ?_4 m_353)) -o
        ∀ (y_355 : (sing_5‹??_10› ?_5 m_353)) -o
          (eq_3‹??_11› ?_6 x_354 y_355))
simpl_tm ~expand:false(
  ∀ {A_390 : Type‹s_305›} ->
    ∀ {m_391 : A_390} ->
      ∀ (x_392 : (sing_5‹??_13› A_390 m_391)) -o
        ∀ (y_393 : (sing_5‹??_13› A_390 m_391)) -o
          (eq_3‹??_15› (sing_5‹??_13› A_390 m_391) x_392 y_393),
  ∀ {A_394 : Type‹s_305›} ->
    ∀ {m_395 : A_394} ->
      ∀ (x_396 : (sing_5‹??_9› A_394 m_395)) -o
        ∀ (y_397 : (sing_5‹??_9› A_394 m_395)) -o
          (eq_3‹??_11› (sing_5‹??_9› A_394 m_395) x_396 y_397))
simpl_tm ~expand:false( Type‹s_305›, Type‹s_305›)
simpl_tm ~expand:false(
  ∀ {m_399 : A_398} ->
    ∀ (x_400 : (sing_5‹??_13› A_398 m_399)) -o
      ∀ (y_401 : (sing_5‹??_13› A_398 m_399)) -o
        (eq_3‹??_15› (sing_5‹??_13› A_398 m_399) x_400 y_401),
  ∀ {m_402 : A_398} ->
    ∀ (x_403 : (sing_5‹??_9› A_398 m_402)) -o
      ∀ (y_404 : (sing_5‹??_9› A_398 m_402)) -o
        (eq_3‹??_11› (sing_5‹??_9› A_398 m_402) x_403 y_404))
simpl_tm ~expand:false( A_398, A_398)
simpl_tm ~expand:false(
  ∀ (x_406 : (sing_5‹??_13› A_398 m_405)) -o
    ∀ (y_407 : (sing_5‹??_13› A_398 m_405)) -o
      (eq_3‹??_15› (sing_5‹??_13› A_398 m_405) x_406 y_407),
  ∀ (x_408 : (sing_5‹??_9› A_398 m_405)) -o
    ∀ (y_409 : (sing_5‹??_9› A_398 m_405)) -o
      (eq_3‹??_11› (sing_5‹??_9› A_398 m_405) x_408 y_409))
simpl_tm ~expand:false( (sing_5‹??_13› A_398 m_405),
  (sing_5‹??_9› A_398 m_405))
simpl_tm ~expand:false( A_398, A_398)
simpl_tm ~expand:false( m_405, m_405)
simpl_tm ~expand:false(
  ∀ (y_411 : (sing_5‹??_13› A_398 m_405)) -o
    (eq_3‹??_15› (sing_5‹??_13› A_398 m_405) x_410 y_411),
  ∀ (y_412 : (sing_5‹??_9› A_398 m_405)) -o
    (eq_3‹??_11› (sing_5‹??_9› A_398 m_405) x_410 y_412))
simpl_tm ~expand:false( (sing_5‹??_13› A_398 m_405),
  (sing_5‹??_9› A_398 m_405))
simpl_tm ~expand:false( A_398, A_398)
simpl_tm ~expand:false( m_405, m_405)
simpl_tm ~expand:false(
  (eq_3‹??_15› (sing_5‹??_13› A_398 m_405) x_410 y_413),
  (eq_3‹??_11› (sing_5‹??_9› A_398 m_405) x_410 y_413))
simpl_tm ~expand:false( (sing_5‹??_13› A_398 m_405),
  (sing_5‹??_9› A_398 m_405))
simpl_tm ~expand:false( A_398, A_398)
simpl_tm ~expand:false( m_405, m_405)
simpl_tm ~expand:false( x_410, x_410)
simpl_tm ~expand:false( y_413, y_413)
check_cls {|
  prblm {| ;
    {|  ::: [A_366, m_367, (just_6 x_368), (just_6 y_369)] =>?
         refl_4‹??_12›
    |}
  |}
|}
case_intro
case_intro
case_intro
case_intro
case_splitting
splitting_on(just_6)
case_splitting
splitting_on(just_6)
case_coverage{|
  prblm {|
    eq_term?( (sing_5‹??_9› #A_424 #m_425),
      (sing_5‹??_9› #A_424 #m_439))
    eq_term?( (sing_5‹??_9› #A_424 #m_425),
      (sing_5‹??_9› #A_424 #m_428));
    {| eq_pat?( #A_424, A_366 : Type‹s_305›)
       eq_pat?( #m_425, m_367 : #A_424)
       eq_pat?( #m_428, x_368 : #A_424)
       eq_pat?( #m_439, y_369 : #A_424) ::: [] =>? refl_4‹??_12›
    |}
  |}
|}
unify_local(
  eq_pat?( #A_424, A_366 : Type‹s_305›)
  eq_pat?( #m_425, m_367 : #A_424)
  eq_pat?( #m_428, x_368 : #A_424)
  eq_pat?( #m_439, y_369 : #A_424)
)
unify_global(
  eq_term?( (sing_5‹??_9› #A_424 #m_425),
    (sing_5‹??_9› #A_424 #m_439))
  eq_term?( (sing_5‹??_9› #A_424 #m_425),
    (sing_5‹??_9› #A_424 #m_428))
)
simpl_pprbm ~expand:false( #A_424, #A_366)
simpl_pprbm ~expand:false( #m_425, #m_367)
simpl_pprbm ~expand:false( #m_428, #x_368)
simpl_pprbm ~expand:false( #m_439, #y_369)
simpl_pprbm ~expand:false( (sing_5‹??_9› #A_424 #m_425),
  (sing_5‹??_9› #A_424 #m_439))
simpl_pprbm ~expand:false( #A_424, #A_424)
simpl_pprbm ~expand:false( #m_425, #m_439)
simpl_pprbm ~expand:false( (sing_5‹??_9› #A_424 #m_439),
  (sing_5‹??_9› #A_424 #m_428))
simpl_pprbm ~expand:false( #A_424, #A_424)
simpl_pprbm ~expand:false( #m_439, #m_428)
case_coverage_ok( refl_4‹??_12›,
  (eq_3‹??_11›
    (sing_5‹??_9› A_424 m_439) (just_6‹??_9› m_439)
    (just_6‹??_9› m_439)))
check_tm( refl_4‹??_12›,
  (eq_3‹??_11›
    (sing_5‹??_9› A_424 m_439) (just_6‹??_9› m_439)
    (just_6‹??_9› m_439)))
infer_tm(refl_4‹??_12›)
check_tm( ?_7, Type‹??_12›)
check_tm( ?_8, ?_7)
assert_equal1(
  (eq_3‹??_11›
    (sing_5‹??_9› A_424 m_439) (just_6‹??_9› m_439)
    (just_6‹??_9› m_439)),
  (eq_3‹??_12› ?_7 ?_8 ?_8))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_460
    ??_2 <= s_463
    ??_3 <= r_465
    ??_4 <= t_467
    ??_5 <= s_470
    ??_6 <= s_473
    ??_7 <= r_475
    ??_8 <= t_477
    ??_10 <= ??_9
    ??_13 <= ??_9
    ??_14 <= ??_13
    ??_15 <= ??_11
    
  |}
  imeta_meta {|
    ?_1 <= A_486
    ?_2 <= A_493
    ?_3 <= A_496
    ?_4 <= A_499
    ?_5 <= A_503
    ?_6 <= (sing_5‹??_10› A_508 m_507)
    ?_9 <= A_511
    ?_10 <= A_515
    ?_11 <= (sing_5‹??_14› A_520 m_519)
    
  |}
  eqns {|
    equal_tm?
      ((eq_3‹??_11›
         (sing_5‹??_9› A_424 m_439) (just_6‹??_9› m_439)
         (just_6‹??_9› m_439)),
      (eq_3‹??_12› ?_7 ?_8 ?_8))
  |}
end_dump
simpl_tm ~expand:false(
  (eq_3‹??_11›
    (sing_5‹??_9› A_424 m_439) (just_6‹??_9› m_439)
    (just_6‹??_9› m_439)),
  (eq_3‹??_12› ?_7 ?_8 ?_8))
simpl_tm ~expand:false( (sing_5‹??_9› A_424 m_439), ?_7)
simpl_tm ~expand:false( (just_6‹??_9› m_439), ?_8)
simpl_tm ~expand:false( (just_6‹??_9› m_439), ?_8)
simpl_tm ~expand:false( (sing_5‹??_9› A_424 m_439), ?_7)
simpl_tm ~expand:false( (just_6‹??_9› m_439), ?_8)
simpl_tm ~expand:false( (just_6‹??_9› m_439), (just_6‹??_9› m_439))
simpl_tm ~expand:false( A_424, A_424)
simpl_tm ~expand:false( m_439, m_439)
infer_tm(Type‹??_9›)
check_tm( A_338, Type‹??_9›)
infer_tm(A_338)
assert_equal1( Type‹??_9›, Type‹s_305›)
simpl_tm ~expand:false( Type‹??_9›, Type‹s_305›)
infer_tm(Type‹s_305›)
check_tm( A_338, Type‹s_305›)
infer_tm(A_338)
assert_equal1( Type‹s_305›, Type‹s_305›)
infer_tm(Type‹??_11›)
check_tm( (sing_5‹s_305› A_338 m_342), Type‹??_11›)
infer_tm((sing_5‹s_305› A_338 m_342))
check_tm( A_338, Type‹s_305›)
infer_tm(A_338)
assert_equal1( Type‹s_305›, Type‹s_305›)
check_tm( m_342, A_338)
infer_tm(m_342)
assert_equal1( A_338, A_338)
assert_equal1( Type‹??_11›, Type‹s_305›)
simpl_tm ~expand:false( Type‹??_11›, Type‹s_305›)
infer_tm(Type‹s_305›)
check_tm( (sing_5‹s_305› A_424 m_439), Type‹s_305›)
infer_tm((sing_5‹s_305› A_424 m_439))
check_tm( A_424, Type‹s_305›)
infer_tm(A_424)
assert_equal1( Type‹s_305›, Type‹s_305›)
check_tm( m_439, A_424)
infer_tm(m_439)
assert_equal1( A_424, A_424)
assert_equal1( Type‹s_305›, Type‹s_305›)
infer_tm((sing_5‹s_305› A_424 m_439))
check_tm( A_424, Type‹s_305›)
infer_tm(A_424)
assert_equal1( Type‹s_305›, Type‹s_305›)
check_tm( m_439, A_424)
infer_tm(m_439)
assert_equal1( A_424, A_424)
check_tm( (just_6‹s_305› m_439), (sing_5‹s_305› A_424 m_439))
infer_tm((just_6‹s_305› m_439))
check_tm( A_424, Type‹s_305›)
infer_tm(A_424)
assert_equal1( Type‹s_305›, Type‹s_305›)
check_tm( m_439, A_424)
infer_tm(m_439)
assert_equal1( A_424, A_424)
assert_equal1( (sing_5‹s_305› A_424 m_439),
  (sing_5‹s_305› A_424 m_439))
infer_tm(Type‹s_305›)
check_tm( A_310, Type‹s_305›)
infer_tm(A_310)
assert_equal1( Type‹s_305›, Type‹s_305›)
infer_tm(Type‹s_305›)
check_tm( A_310, Type‹s_305›)
infer_tm(A_310)
assert_equal1( Type‹s_305›, Type‹s_305›)
infer_tm(Type‹s_305›)
check_tm( (sing_5‹s_305› A_310 m_314), Type‹s_305›)
infer_tm((sing_5‹s_305› A_310 m_314))
check_tm( A_310, Type‹s_305›)
infer_tm(A_310)
assert_equal1( Type‹s_305›, Type‹s_305›)
check_tm( m_314, A_310)
infer_tm(m_314)
assert_equal1( A_310, A_310)
assert_equal1( Type‹s_305›, Type‹s_305›)
----------------------------------

smeta_meta {|
  ??_1 <= s_579
  ??_2 <= s_582
  ??_3 <= r_584
  ??_4 <= t_586
  ??_5 <= s_589
  ??_6 <= s_592
  ??_7 <= r_594
  ??_8 <= t_596
  ??_9 <= s_599
  ??_10 <= ??_9
  ??_11 <= s_601
  ??_12 <= ??_11
  ??_13 <= ??_9
  ??_14 <= ??_13
  ??_15 <= ??_11
  
|}
imeta_meta {|
  ?_1 <= A_608
  ?_2 <= A_615
  ?_3 <= A_618
  ?_4 <= A_621
  ?_5 <= A_625
  ?_6 <= (sing_5‹??_10› A_630 m_629)
  ?_7 <= (sing_5‹??_9› A_635 m_632)
  ?_8 <= (just_6‹??_9› m_638)
  ?_9 <= A_645
  ?_10 <= A_649
  ?_11 <= (sing_5‹??_14› A_654 m_653)
  
|}
#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive nat_2‹› : U where
| zero_2 : nat_2
| succ_3 (pred_774 : nat_2) : nat_2

#[logical]
inductive eq_3‹s_775› (A_776 : Type‹s_775›) (m_777 : A_776):
  A_776 -> U
where
| refl_4 : (eq_3‹s_775› A_776 m_777 m_777)

#[program]
inductive exists_4‹s_779,r_780,t_781› (A_782 : Type‹s_779›) (B_783 : 
A_782 -> Type‹r_780›): Type‹t_781› where
| ex_5
    (m_785 : A_782) {pf_786 : ((B_783) m_785)}
    : (exists_4‹s_779,r_780,t_781› A_782 B_783)

#[program]
inductive sing_5‹s_787› (A_788 : Type‹s_787›):
  A_788 -> Type‹s_787›
where
| just_6 (m_790 : A_788) : (sing_5‹s_787› A_788 m_790)

#[program]
inductive prod_6‹s_791,r_792,t_793› (A_794 : Type‹s_791›) (B_795 : Type‹r_792›):
  Type‹t_793›
where
| pair_7
    (m_796 : A_794) (n_797 : B_795)
    : (prod_6‹s_791,r_792,t_793› A_794 B_795)

#[logical]
def sing_double_1‹s_798› :
  ∀ {A_799 : Type‹s_798›} ->
    ∀ {m_800 : A_799} ->
      ∀ (x_801 : (sing_5‹s_798› A_799 m_800)) -o
        ∀ (y_802 : (sing_5‹s_798› A_799 m_800)) -o
          (eq_3‹s_798› (sing_5‹s_798› A_799 m_800) x_801 y_802)
:=
  function sing_double_803 :
    ∀ {A_804 : Type‹s_798›} ->
      ∀ {m_805 : A_804} ->
        ∀ (x_806 : (sing_5‹s_798› A_804 m_805)) -o
          ∀ (y_807 : (sing_5‹s_798› A_804 m_805)) -o
            (eq_3‹s_798› (sing_5‹s_798› A_804 m_805) x_806 y_807)
  | A_808 m_809 (just_6 x_810) (just_6 y_811) => refl_4‹s_798›

-----------------------------------------

