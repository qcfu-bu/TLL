[Inductive {name = "tree"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)),
          [(DConstr ("Leaf", (TBase (Id ("tree", I))), []));
            (DConstr ("Node",
               (TBind (R, Int_t,
                  (Binder ("_",
                     (TBind (R, (Id ("tree", I)),
                        (Binder ("l",
                           (TBind (R, (Id ("tree", I)),
                              (Binder ("r", (TBase (Id ("tree", I)))))))
                           ))
                        ))
                     ))
                  )),
               [E; E; E]))
            ]))
      ));
   view = []};
  Inductive {name = "opr"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type L)),
           [(DConstr ("Free", (TBase (Id ("opr", I))), []));
             (DConstr ("Height", (TBase (Id ("opr", I))), []));
             (DConstr ("Size", (TBase (Id ("opr", I))), []));
             (DConstr ("Find",
                (TBind (R, Int_t, (Binder ("k", (TBase (Id ("opr", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Definition {name = "height"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("_", Int_t)))),
           (Binder ((Some "height"),
              [([(PId "Leaf")], (Some (Int 0)));
                ([(PConstr ("Node", [(PId "_"); (PId "l"); (PId "r")]))],
                 (Some (Let (R, (App [(Id ("height", I)); (Id ("l", I))]),
                          (Binder ((PId "x"),
                             (Let (R,
                                (App [(Id ("height", I)); (Id ("r", I))]),
                                (Binder ((PId "y"),
                                   (Match (
                                      [(R,
                                        (BOpr ("<", (Id ("x", I)),
                                           (Id ("y", I)))),
                                        None)],
                                      None,
                                      [([(PId "true")],
                                        (Some (BOpr ("+", (Id ("y", I)),
                                                 (Int 1)))));
                                        ([(PId "false")],
                                         (Some (BOpr ("+", (Id ("x", I)),
                                                  (Int 1)))))
                                        ]
                                      ))
                                   ))
                                ))
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "size"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("_", Int_t)))),
           (Binder ((Some "size"),
              [([(PId "Leaf")], (Some (Int 0)));
                ([(PConstr ("Node", [(PId "_"); (PId "l"); (PId "r")]))],
                 (Some (BOpr ("+",
                          (BOpr ("+", (Int 1),
                             (App [(Id ("size", I)); (Id ("l", I))]))),
                          (App [(Id ("size", I)); (Id ("r", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "find"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (Pi (R, U, (Id ("tree", I)),
                    (Binder ("_", (Id ("bool", I))))))
                 ))
              )),
           (Binder ((Some "find"),
              [([(PId "n"); (PId "Leaf")], (Some (Id ("false", I))));
                ([(PId "n");
                   (PConstr ("Node", [(PId "x"); (PId "l"); (PId "r")]))],
                 (Some (Match (
                          [(R, (BOpr ("==", (Id ("x", I)), (Id ("n", I)))),
                            None)],
                          None,
                          [([(PId "true")], (Some (Id ("true", I))));
                            ([(PId "false")],
                             (Some (BOpr ("||",
                                      (App
                                         [(Id ("find", I)); (Id ("n", I));
                                           (Id ("l", I))]),
                                      (App
                                         [(Id ("find", I)); (Id ("n", I));
                                           (Id ("r", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (Pi (R, U, (Id ("tree", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = [E]};
  Definition {name = "tree_p"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", Proto)))),
           (Binder ((Some "tree_p"),
              [([(PId "t")],
                (Some (Act (R, false, (Id ("opr", I)),
                         (Binder ("o",
                            (Match ([(R, (Id ("o", I)), None)], None,
                               [([(PId "Free")], (Some End));
                                 ([(PId "Height")],
                                  (Some (Act (R, true,
                                           (UOpr ("`",
                                              (App
                                                 [(Id ("height", I));
                                                   (Id ("t", I))])
                                              )),
                                           (Binder ("_",
                                              (App
                                                 [(Id ("tree_p", I));
                                                   (Id ("t", I))])
                                              ))
                                           ))));
                                 ([(PId "Size")],
                                  (Some (Act (R, true,
                                           (UOpr ("`",
                                              (App
                                                 [(Id ("size", I));
                                                   (Id ("t", I))])
                                              )),
                                           (Binder ("_",
                                              (App
                                                 [(Id ("tree_p", I));
                                                   (Id ("t", I))])
                                              ))
                                           ))));
                                 ([(PConstr ("Find", [(PId "k")]))],
                                  (Some (Act (R, true,
                                           (UOpr ("`",
                                              (App
                                                 [(Id ("find", I));
                                                   (Id ("k", I));
                                                   (Id ("t", I))])
                                              )),
                                           (Binder ("_",
                                              (App
                                                 [(Id ("tree_p", I));
                                                   (Id ("t", I))])
                                              ))
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", Proto)))))
       ));
    view = [E]};
  Definition {name = "ctree_ch"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))),
           (Binder ((Some "ctree_ch"),
              [([(PId "t")],
                (Some (Ch (true, (App [(Id ("tree_p", I)); (Id ("t", I))])))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))))
       ));
    view = [E]};
  Definition {name = "ctree_hc"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))),
           (Binder ((Some "ctree_hc"),
              [([(PId "t")],
                (Some (Ch (false, (App [(Id ("tree_p", I)); (Id ("t", I))])))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))))
       ));
    view = [E]};
  Definition {name = "ctree"; relv = N;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))),
           (Binder ((Some "ctree"),
              [([(PId "t")],
                (Some (IO (App [(Id ("ctree_hc", I)); (Id ("t", I))]))))]
              )),
           [E])),
        (Pi (R, U, (Id ("tree", I)), (Binder ("t", (Type L))))))
       ));
    view = [E]};
  Definition {name = "leaf_worker"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (App [(Id ("ctree_ch", I)); (Id ("Leaf", I))]),
              (Binder ("c", (IO (Id ("unit", I))))))),
           (Binder ((Some "leaf_worker"),
              [([(PId "c")],
                (Some (MLet ((Recv (Id ("c", I))),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "o"),
                               (PId "c"))),
                            (Match (
                               [(R, (Id ("o", I)), (Some ("o0", IMeta)));
                                 (R, (Id ("c", I)),
                                  (Some ("_",
                                         (Ch (true,
                                            (Match (
                                               [(R, (Id ("o0", I)), None)],
                                               None,
                                               [([(PId "Free")], (Some End));
                                                 ([(PId "Height")],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (Int 0))),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (Id (
                                                                    "Leaf", I
                                                                    ))
                                                                   ])
                                                              ))
                                                           ))));
                                                 ([(PId "Size")],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (Int 0))),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (Id (
                                                                    "Leaf", I
                                                                    ))
                                                                   ])
                                                              ))
                                                           ))));
                                                 ([(PConstr ("Find",
                                                      [(PId "_")]))
                                                    ],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (Id ("false", I
                                                                 ))
                                                              )),
                                                           (Binder ("_",
                                                              (App
                                                                 [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                   (Id (
                                                                    "Leaf", I
                                                                    ))
                                                                   ])
                                                              ))
                                                           ))))
                                                 ]
                                               ))
                                            )))))
                                 ],
                               None,
                               [([(PId "Free"); (PId "c")],
                                 (Some (Close (Id ("c", I)))));
                                 ([(PId "Height"); (PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("c", I)));
                                                (App
                                                   [(Id ("just", I)); (
                                                     Int 0)])
                                                ]),
                                           (Binder ((PId "c"),
                                              (App
                                                 [(Id ("leaf_worker", I));
                                                   (Id ("c", I))])
                                              ))
                                           ))));
                                 ([(PId "Size"); (PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("c", I)));
                                                (App
                                                   [(Id ("just", I)); (
                                                     Int 0)])
                                                ]),
                                           (Binder ((PId "c"),
                                              (App
                                                 [(Id ("leaf_worker", I));
                                                   (Id ("c", I))])
                                              ))
                                           ))));
                                 ([(PConstr ("Find", [(PId "_")])); (
                                    PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("c", I)));
                                                (App
                                                   [(Id ("just", I));
                                                     (Id ("false", I))])
                                                ]),
                                           (Binder ((PId "c"),
                                              (App
                                                 [(Id ("leaf_worker", I));
                                                   (Id ("c", I))])
                                              ))
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Id ("ctree_ch", I)); (Id ("Leaf", I))]),
           (Binder ("c", (IO (Id ("unit", I))))))))
       ));
    view = [E]};
  Definition {name = "node_worker"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("x",
                 (Pi (N, U, (Id ("tree", I)),
                    (Binder ("l",
                       (Pi (N, U, (Id ("tree", I)),
                          (Binder ("r",
                             (Pi (R, L,
                                (App [(Id ("ctree_hc", I)); (Id ("l", I))]),
                                (Binder ("_",
                                   (Pi (R, L,
                                      (App
                                         [(Id ("ctree_hc", I)); (Id ("r", I))
                                           ]),
                                      (Binder ("_",
                                         (Pi (R, L,
                                            (App
                                               [(Id ("ctree_ch", I));
                                                 (App
                                                    [(Id ("Node", I));
                                                      (Id ("x", I));
                                                      (Id ("l", I));
                                                      (Id ("r", I))])
                                                 ]),
                                            (Binder ("_",
                                               (IO (Id ("unit", I)))))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "node_worker"),
              [([(PId "x"); (PId "l"); (PId "r")],
                (Some (Fun (
                         (Pi (R, L, IMeta,
                            (Binder ("l_ch",
                               (Pi (R, L, IMeta,
                                  (Binder ("r_ch",
                                     (Pi (R, L, IMeta, (Binder ("c", IMeta))
                                        ))
                                     ))
                                  ))
                               ))
                            )),
                         (Binder (None,
                            [([(PId "l_ch"); (PId "r_ch"); (PId "c")],
                              (Some (MLet ((Recv (Id ("c", I))),
                                       (Binder (
                                          (PBOpr (
                                             "\226\159\168,\226\159\169",
                                             (PId "o"), (PId "c"))),
                                          (Match (
                                             [(R, (Id ("o", I)),
                                               (Some ("o0", IMeta)));
                                               (R, (Id ("c", I)),
                                                (Some ("_",
                                                       (Ch (true,
                                                          (Match (
                                                             [(R,
                                                               (Id ("o0", I)),
                                                               None)],
                                                             None,
                                                             [([(PId "Free")],
                                                               (Some End));
                                                               ([(PId
                                                                    "Height")
                                                                  ],
                                                                (Some (
                                                                Act (R, true,
                                                                  (UOpr ("`",
                                                                    (App
                                                                    [(Id (
                                                                    "height",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])]))),
                                                                  (Binder (
                                                                    "_",
                                                                    (App
                                                                    [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])])))
                                                                  ))));
                                                               ([(PId "Size")
                                                                  ],
                                                                (Some (
                                                                Act (R, true,
                                                                  (UOpr ("`",
                                                                    (App
                                                                    [(Id (
                                                                    "size", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])]))),
                                                                  (Binder (
                                                                    "_",
                                                                    (App
                                                                    [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])])))
                                                                  ))));
                                                               ([(PConstr (
                                                                    "Find",
                                                                    [(PId "k")
                                                                    ]))
                                                                  ],
                                                                (Some (
                                                                Act (R, true,
                                                                  (UOpr ("`",
                                                                    (App
                                                                    [(Id (
                                                                    "find", I
                                                                    ));
                                                                    (Id ("k",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])]))),
                                                                  (Binder (
                                                                    "_",
                                                                    (App
                                                                    [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])])))
                                                                  ))))
                                                               ]
                                                             ))
                                                          )))))
                                               ],
                                             None,
                                             [([(PId "Free"); (PId "c")],
                                               (Some (MLet (
                                                        (App
                                                           [(Send
                                                               (Id ("l_ch", I
                                                                  )));
                                                             (Id ("Free", I))
                                                             ]),
                                                        (Binder (
                                                           (PId "l_ch"),
                                                           (MLet (
                                                              (App
                                                                 [(Send
                                                                    (Id (
                                                                    "r_ch", I
                                                                    )));
                                                                   (Id (
                                                                    "Free", I
                                                                    ))
                                                                   ]),
                                                              (Binder (
                                                                 (PId "r_ch"),
                                                                 (BOpr (";",
                                                                    (
                                                                    Close
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ))),
                                                                    (
                                                                    BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ))),
                                                                    (Close
                                                                    (Id ("c",
                                                                    I)))))))
                                                                 ))
                                                              ))
                                                           ))
                                                        ))));
                                               ([(PId "Height"); (PId "c")],
                                                (Some (MLet (
                                                         (App
                                                            [(Send
                                                                (Id ("l_ch",
                                                                   I)));
                                                              (Id ("Height",
                                                                 I))
                                                              ]),
                                                         (Binder (
                                                            (PId "l_ch"),
                                                            (MLet (
                                                               (App
                                                                  [(Send
                                                                    (Id (
                                                                    "r_ch", I
                                                                    )));
                                                                    (
                                                                    Id (
                                                                    "Height",
                                                                    I))]),
                                                               (Binder (
                                                                  (PId "r_ch"),
                                                                  (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "l_h")])),
                                                                    (PId
                                                                    "l_ch"))),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "r_h")])),
                                                                    (PId
                                                                    "r_ch"))),
                                                                    (Match (
                                                                    [(R,
                                                                    (BOpr (
                                                                    "<",
                                                                    (Id (
                                                                    "l_h", I
                                                                    )),
                                                                    (Id (
                                                                    "r_h", I
                                                                    )))),
                                                                    (Some (
                                                                    "b0",
                                                                    IMeta)));
                                                                    (R,
                                                                    (Id ("c",
                                                                    I)),
                                                                    (Some (
                                                                    "_",
                                                                    (
                                                                    Ch (true,
                                                                    (Act (R,
                                                                    true,
                                                                    (UOpr (
                                                                    "`",
                                                                    (Match (
                                                                    [(R,
                                                                    (Id (
                                                                    "b0", I)),
                                                                    None)],
                                                                    None,
                                                                    [([(PId
                                                                    "true")],
                                                                    (Some (
                                                                    BOpr (
                                                                    "+",
                                                                    (Id (
                                                                    "r_h", I
                                                                    )),
                                                                    (Int 1)))));
                                                                    ([(PId
                                                                    "false")],
                                                                    (Some (
                                                                    BOpr (
                                                                    "+",
                                                                    (Id (
                                                                    "l_h", I
                                                                    )),
                                                                    (Int 1)))))
                                                                    ])))),
                                                                    (Binder (
                                                                    "_",
                                                                    (App
                                                                    [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])])))
                                                                    )))))))],
                                                                    None,
                                                                    [([(PId
                                                                    "true");
                                                                    (PId "c")
                                                                    ],
                                                                    (Some (
                                                                    MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (BOpr (
                                                                    "+",
                                                                    (Id (
                                                                    "r_h", I
                                                                    )),
                                                                    (Int 1)))
                                                                    ])]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (App
                                                                    [(Id (
                                                                    "node_worker",
                                                                    I));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ));
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))])))))));
                                                                    ([(PId
                                                                    "false");
                                                                    (PId "c")
                                                                    ],
                                                                    (Some (
                                                                    MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (BOpr (
                                                                    "+",
                                                                    (Id (
                                                                    "l_h", I
                                                                    )),
                                                                    (Int 1)))
                                                                    ])]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (App
                                                                    [(Id (
                                                                    "node_worker",
                                                                    I));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ));
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))])))))))
                                                                    ]))))))))
                                                                    ))
                                                                  ))
                                                               ))
                                                            ))
                                                         ))));
                                               ([(PId "Size"); (PId "c")],
                                                (Some (MLet (
                                                         (App
                                                            [(Send
                                                                (Id ("l_ch",
                                                                   I)));
                                                              (Id ("Size", I
                                                                 ))
                                                              ]),
                                                         (Binder (
                                                            (PId "l_ch"),
                                                            (MLet (
                                                               (App
                                                                  [(Send
                                                                    (Id (
                                                                    "r_ch", I
                                                                    )));
                                                                    (
                                                                    Id (
                                                                    "Size", I
                                                                    ))]),
                                                               (Binder (
                                                                  (PId "r_ch"),
                                                                  (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "l_sz")]
                                                                    )),
                                                                    (PId
                                                                    "l_ch"))),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "r_sz")]
                                                                    )),
                                                                    (PId
                                                                    "r_ch"))),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (BOpr (
                                                                    "+",
                                                                    (BOpr (
                                                                    "+",
                                                                    (Int 1),
                                                                    (Id (
                                                                    "l_sz", I
                                                                    )))),
                                                                    (Id (
                                                                    "r_sz", I
                                                                    ))))])]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (App
                                                                    [(Id (
                                                                    "node_worker",
                                                                    I));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ));
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))])))))
                                                                    ))))))))
                                                                  ))
                                                               ))
                                                            ))
                                                         ))));
                                               ([(PConstr ("Find",
                                                    [(PId "k")]));
                                                  (PId "c")],
                                                (Some (Match (
                                                         [(R,
                                                           (BOpr ("==",
                                                              (Id ("x", I)),
                                                              (Id ("k", I)))),
                                                           (Some ("b0", IMeta)));
                                                           (R, (Id ("c", I)),
                                                            (Some ("_",
                                                                   (Ch (true,
                                                                    (Act (R,
                                                                    true,
                                                                    (UOpr (
                                                                    "`",
                                                                    (Match (
                                                                    [(R,
                                                                    (Id (
                                                                    "b0", I)),
                                                                    None)],
                                                                    None,
                                                                    [([(PId
                                                                    "true")],
                                                                    (Some (
                                                                    Id (
                                                                    "true", I
                                                                    ))));
                                                                    ([(PId
                                                                    "false")],
                                                                    (Some (
                                                                    BOpr (
                                                                    "||",
                                                                    (App
                                                                    [(Id (
                                                                    "find", I
                                                                    ));
                                                                    (Id ("k",
                                                                    I));
                                                                    (Id ("l",
                                                                    I))]),
                                                                    (App
                                                                    [(Id (
                                                                    "find", I
                                                                    ));
                                                                    (Id ("k",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])))))
                                                                    ])))),
                                                                    (Binder (
                                                                    "_",
                                                                    (App
                                                                    [(Id (
                                                                    "tree_p",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "Node", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("l",
                                                                    I));
                                                                    (Id ("r",
                                                                    I))])])))
                                                                    )))))))
                                                           ],
                                                         None,
                                                         [([(PId "true");
                                                             (PId "c")],
                                                           (Some (MLet (
                                                                    (
                                                                    App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (Id (
                                                                    "true", I
                                                                    ))])]),
                                                                    (
                                                                    Binder (
                                                                    (PId "c"),
                                                                    (App
                                                                    [(Id (
                                                                    "node_worker",
                                                                    I));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ));
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))])))))));
                                                           ([(PId "false");
                                                              (PId "c")],
                                                            (Some (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "l_ch", I
                                                                    )));
                                                                    (App
                                                                    [(Id (
                                                                    "Find", I
                                                                    ));
                                                                    (Id ("k",
                                                                    I))])]),
                                                                    (Binder (
                                                                    (PId
                                                                    "l_ch"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id (
                                                                    "r_ch", I
                                                                    )));
                                                                    (App
                                                                    [(Id (
                                                                    "Find", I
                                                                    ));
                                                                    (Id ("k",
                                                                    I))])]),
                                                                    (Binder (
                                                                    (PId
                                                                    "r_ch"),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "l_b")])),
                                                                    (PId
                                                                    "l_ch"))),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "r_b")])),
                                                                    (PId
                                                                    "r_ch"))),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (BOpr (
                                                                    "||",
                                                                    (Id (
                                                                    "l_b", I
                                                                    )),
                                                                    (Id (
                                                                    "r_b", I
                                                                    ))))])]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (App
                                                                    [(Id (
                                                                    "node_worker",
                                                                    I));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id (
                                                                    "l_ch", I
                                                                    ));
                                                                    (Id (
                                                                    "r_ch", I
                                                                    ));
                                                                    (Id ("c",
                                                                    I))])))))
                                                                    ))))))))
                                                                    ))))))))))
                                                           ]
                                                         ))))
                                               ]
                                             ))
                                          ))
                                       ))))
                              ]
                            )),
                         []))))
                ]
              )),
           [E; I; I])),
        (Pi (R, U, Int_t,
           (Binder ("x",
              (Pi (N, U, (Id ("tree", I)),
                 (Binder ("l",
                    (Pi (N, U, (Id ("tree", I)),
                       (Binder ("r",
                          (Pi (R, L,
                             (App [(Id ("ctree_hc", I)); (Id ("l", I))]),
                             (Binder ("_",
                                (Pi (R, L,
                                   (App [(Id ("ctree_hc", I)); (Id ("r", I))]),
                                   (Binder ("_",
                                      (Pi (R, L,
                                         (App
                                            [(Id ("ctree_ch", I));
                                              (App
                                                 [(Id ("Node", I));
                                                   (Id ("x", I));
                                                   (Id ("l", I));
                                                   (Id ("r", I))])
                                              ]),
                                         (Binder ("_", (IO (Id ("unit", I)))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; I; I]};
  Definition {name = "cleaf"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("unit", I)),
              (Binder ("_", (App [(Id ("ctree", I)); (Id ("Leaf", I))]))))),
           (Binder ((Some "cleaf"),
              [([(PId "_")],
                (Some (Fork
                         (Fun (
                            (Pi (R, L,
                               (App [(Id ("ctree_ch", I)); (Id ("Leaf", I))]),
                               (Binder ("", (IO (Id ("unit", I))))))),
                            (Binder (None,
                               [([(PId "c")],
                                 (Some (App
                                          [(Id ("leaf_worker", I));
                                            (Id ("c", I))])))
                                 ]
                               )),
                            [])))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("unit", I)),
           (Binder ("_", (App [(Id ("ctree", I)); (Id ("Leaf", I))]))))))
       ));
    view = [E]};
  Definition {name = "cnode"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("x",
                 (Pi (N, U, (Id ("tree", I)),
                    (Binder ("l",
                       (Pi (N, U, (Id ("tree", I)),
                          (Binder ("r",
                             (Pi (R, L,
                                (App [(Id ("ctree", I)); (Id ("l", I))]),
                                (Binder ("_",
                                   (Pi (R, L,
                                      (App [(Id ("ctree", I)); (Id ("r", I))]),
                                      (Binder ("_",
                                         (App
                                            [(Id ("ctree", I));
                                              (App
                                                 [(Id ("Node", I));
                                                   (Id ("x", I));
                                                   (Id ("l", I));
                                                   (Id ("r", I))])
                                              ])
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cnode"),
              [([(PId "x"); (PId "l"); (PId "r"); (PId "l0"); (PId "r0")],
                (Some (MLet ((Id ("l0", I)),
                         (Binder ((PId "l_ch"),
                            (MLet ((Id ("r0", I)),
                               (Binder ((PId "r_ch"),
                                  (Fork
                                     (Fun (
                                        (Pi (R, L,
                                           (App
                                              [(Id ("ctree_ch", I));
                                                (App
                                                   [(Id ("Node", I));
                                                     (Id ("x", I));
                                                     (Id ("l", I));
                                                     (Id ("r", I))])
                                                ]),
                                           (Binder ("", (IO (Id ("unit", I)))
                                              ))
                                           )),
                                        (Binder (None,
                                           [([(PId "c")],
                                             (Some (App
                                                      [(Id ("node_worker", I
                                                          ));
                                                        (Id ("x", I));
                                                        (Id ("l_ch", I));
                                                        (Id ("r_ch", I));
                                                        (Id ("c", I))])))
                                             ]
                                           )),
                                        [])))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; I; I])),
        (Pi (R, U, Int_t,
           (Binder ("x",
              (Pi (N, U, (Id ("tree", I)),
                 (Binder ("l",
                    (Pi (N, U, (Id ("tree", I)),
                       (Binder ("r",
                          (Pi (R, L,
                             (App [(Id ("ctree", I)); (Id ("l", I))]),
                             (Binder ("_",
                                (Pi (R, L,
                                   (App [(Id ("ctree", I)); (Id ("r", I))]),
                                   (Binder ("_",
                                      (App
                                         [(Id ("ctree", I));
                                           (App
                                              [(Id ("Node", I));
                                                (Id ("x", I)); (Id ("l", I));
                                                (Id ("r", I))])
                                           ])
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; I; I]};
  Definition {name = "ctree_of_tree"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("tree", I)),
              (Binder ("x", (App [(Id ("ctree", I)); (Id ("x", I))]))))),
           (Binder ((Some "ctree_of_tree"),
              [([(PId "Leaf")],
                (Some (App [(Id ("cleaf", I)); (Id ("tt", I))])));
                ([(PConstr ("Node", [(PId "x"); (PId "l"); (PId "r")]))],
                 (Some (App
                          [(Id ("cnode", I)); (Id ("x", I));
                            (App [(Id ("ctree_of_tree", I)); (Id ("l", I))]);
                            (App [(Id ("ctree_of_tree", I)); (Id ("r", I))])])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("tree", I)),
           (Binder ("x", (App [(Id ("ctree", I)); (Id ("x", I))]))))))
       ));
    view = []};
  Definition {name = "cfree"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Id ("tree", I)),
              (Binder ("t",
                 (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                    (Binder ("ct", (IO (Id ("unit", I)))))))
                 ))
              )),
           (Binder ((Some "cfree"),
              [([(PId "t"); (PId "ct")],
                (Some (MLet ((Id ("ct", I)),
                         (Binder ((PId "c"),
                            (MLet (
                               (App [(Send (Id ("c", I))); (Id ("Free", I))]),
                               (Binder ((PId "c"), (Close (Id ("c", I)))))))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (Id ("tree", I)),
           (Binder ("t",
              (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                 (Binder ("ct", (IO (Id ("unit", I)))))))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "cheight"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Id ("tree", I)),
              (Binder ("t",
                 (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                    (Binder ("ct",
                       (IO
                          (BOpr ("\226\138\151",
                             (UOpr ("`",
                                (App [(Id ("height", I)); (Id ("t", I))]))),
                             (App [(Id ("ctree", I)); (Id ("t", I))]))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cheight"),
              [([(PId "t"); (PId "ct")],
                (Some (MLet ((Id ("ct", I)),
                         (Binder ((PId "c"),
                            (MLet (
                               (App
                                  [(Send (Id ("c", I))); (Id ("Height", I))]),
                               (Binder ((PId "c"),
                                  (MLet ((Recv (Id ("c", I))),
                                     (Binder (
                                        (PBOpr ("\226\159\168,\226\159\169",
                                           (PId "x"), (PId "ct"))),
                                        (Return
                                           (BOpr (
                                              "\226\159\168,\226\159\169",
                                              (Id ("x", I)),
                                              (Return (Id ("ct", I))))))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (Id ("tree", I)),
           (Binder ("t",
              (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                 (Binder ("ct",
                    (IO
                       (BOpr ("\226\138\151",
                          (UOpr ("`",
                             (App [(Id ("height", I)); (Id ("t", I))]))),
                          (App [(Id ("ctree", I)); (Id ("t", I))]))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "csize"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Id ("tree", I)),
              (Binder ("t",
                 (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                    (Binder ("ct",
                       (IO
                          (BOpr ("\226\138\151",
                             (UOpr ("`",
                                (App [(Id ("size", I)); (Id ("t", I))]))),
                             (App [(Id ("ctree", I)); (Id ("t", I))]))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "csize"),
              [([(PId "t"); (PId "ct")],
                (Some (MLet ((Id ("ct", I)),
                         (Binder ((PId "c"),
                            (MLet (
                               (App [(Send (Id ("c", I))); (Id ("Size", I))]),
                               (Binder ((PId "c"),
                                  (MLet ((Recv (Id ("c", I))),
                                     (Binder (
                                        (PBOpr ("\226\159\168,\226\159\169",
                                           (PId "x"), (PId "ct"))),
                                        (Return
                                           (BOpr (
                                              "\226\159\168,\226\159\169",
                                              (Id ("x", I)),
                                              (Return (Id ("ct", I))))))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (Id ("tree", I)),
           (Binder ("t",
              (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                 (Binder ("ct",
                    (IO
                       (BOpr ("\226\138\151",
                          (UOpr ("`", (App [(Id ("size", I)); (Id ("t", I))])
                             )),
                          (App [(Id ("ctree", I)); (Id ("t", I))]))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "cfind"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("k",
                 (Pi (N, U, (Id ("tree", I)),
                    (Binder ("t",
                       (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                          (Binder ("ct",
                             (IO
                                (BOpr ("\226\138\151",
                                   (UOpr ("`",
                                      (App
                                         [(Id ("find", I)); (Id ("k", I));
                                           (Id ("t", I))])
                                      )),
                                   (App [(Id ("ctree", I)); (Id ("t", I))]))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cfind"),
              [([(PId "k"); (PId "t"); (PId "ct")],
                (Some (MLet ((Id ("ct", I)),
                         (Binder ((PId "c"),
                            (MLet (
                               (App
                                  [(Send (Id ("c", I)));
                                    (App [(Id ("Find", I)); (Id ("k", I))])]),
                               (Binder ((PId "c"),
                                  (MLet ((Recv (Id ("c", I))),
                                     (Binder (
                                        (PBOpr ("\226\159\168,\226\159\169",
                                           (PId "x"), (PId "ct"))),
                                        (Return
                                           (BOpr (
                                              "\226\159\168,\226\159\169",
                                              (Id ("x", I)),
                                              (Return (Id ("ct", I))))))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; I; E])),
        (Pi (R, U, Int_t,
           (Binder ("k",
              (Pi (N, U, (Id ("tree", I)),
                 (Binder ("t",
                    (Pi (R, U, (App [(Id ("ctree", I)); (Id ("t", I))]),
                       (Binder ("ct",
                          (IO
                             (BOpr ("\226\138\151",
                                (UOpr ("`",
                                   (App
                                      [(Id ("find", I)); (Id ("k", I));
                                        (Id ("t", I))])
                                   )),
                                (App [(Id ("ctree", I)); (Id ("t", I))]))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; I; E]};
  Definition {name = "mytree1"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree1"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("cleaf", I)); (Id ("tt", I))]);
                           (App [(Id ("cleaf", I)); (Id ("tt", I))])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree2"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree2"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree1", I)); (Int 1)]);
                           (App [(Id ("mytree1", I)); (Int 2)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree3"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree3"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree2", I)); (Int 3)]);
                           (App [(Id ("mytree2", I)); (Int 4)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree4"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree4"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree3", I)); (Int 8)]);
                           (App [(Id ("mytree3", I)); (Int 7)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree5"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree5"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree4", I)); (Int 9)]);
                           (App [(Id ("mytree4", I)); (Int 10)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "mytree6"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, Int_t, (Binder ("x", IMeta)))),
           (Binder ((Some "mytree6"),
              [([(PId "x")],
                (Some (App
                         [(Id ("cnode", I)); (Id ("x", I));
                           (App [(Id ("mytree5", I)); (Int 11)]);
                           (App [(Id ("mytree5", I)); (Int 12)])])))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t, (Binder ("x", IMeta)))))
       ));
    view = [E]};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Id ("mytree6", I)); (Int 100)]),
           (Binder ((PId "ct"),
              (MLet ((App [(Id ("cheight", I)); (Id ("ct", I))]),
                 (Binder (
                    (PBOpr ("\226\159\168,\226\159\169",
                       (PConstr ("just", [(PId "h")])), (PId "ct"))),
                    (MLet ((App [(Id ("csize", I)); (Id ("ct", I))]),
                       (Binder (
                          (PBOpr ("\226\159\168,\226\159\169",
                             (PConstr ("just", [(PId "sz")])), (PId "ct"))),
                          (MLet (
                             (App
                                [(Id ("cfind", I)); (Int 1); (Id ("ct", I))]),
                             (Binder (
                                (PBOpr ("\226\159\168,\226\159\169",
                                   (PConstr ("just", [(PId "b")])),
                                   (PId "ct"))),
                                (MLet (
                                   (App [(Id ("cfree", I)); (Id ("ct", I))]),
                                   (Binder ((PId "tt"),
                                      (Print
                                         (BOpr ("++",
                                            (BOpr ("++",
                                               (BOpr ("++",
                                                  (BOpr ("++",
                                                     (BOpr ("++",
                                                        (BOpr ("++",
                                                           (BOpr ("++",
                                                              (BOpr ("++",
                                                                 (String
                                                                    "height := "),
                                                                 (App
                                                                    [(Id (
                                                                    "string_of_int",
                                                                    I));
                                                                    (Id ("h",
                                                                    I))])
                                                                 )),
                                                              (String "\n"))),
                                                           (String
                                                              "size   := ")
                                                           )),
                                                        (App
                                                           [(Id (
                                                               "string_of_int",
                                                               I));
                                                             (Id ("sz", I))])
                                                        )),
                                                     (String "\n"))),
                                                  (String "find   := "))),
                                               (App
                                                  [(Id ("string_of_bool", I));
                                                    (Id ("b", I))])
                                               )),
                                            (String "\n"))))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

[parse success]

-----------------------------------------

#[program]
inductive tree_11‹› : U where
| Leaf_15 : tree_11
| Node_16 (__729 : int) (l_730 : tree_11) (r_731 : tree_11) : tree_11

#[program]
inductive opr_12‹› : L where
| Free_17 : opr_12
| Height_18 : opr_12
| Size_19 : opr_12
| Find_20 (k_732 : int) : opr_12

#[program]
def height_34‹› : tree_11 -> int :=
  (fun height_734 : tree_11 -> int
  | Leaf_15 => 0
  | (Node_16 _736 l_737 r_738) =>
    let x_739 := ((height_734) l_737) in
    let y_740 := ((height_734) r_738) in
    (match (__lt__ x_739 y_740) in ?_65[0;0] -o ?_66[0;0] with
    | true_4 => (__add__ y_740 1)
    | false_5 => (__add__ x_739 1)))

#[program]
def size_35‹› : tree_11 -> int :=
  (fun size_743 : tree_11 -> int
  | Leaf_15 => 0
  | (Node_16 _745 l_746 r_747) =>
    (__add__ (__add__ 1 ((size_743) l_746)) ((size_743) r_747)))

#[program]
def find_36‹› : int -> tree_11 -> bool_4 :=
  (fun find_750 : int -> tree_11 -> bool_4
  | n_753, Leaf_15 => false_5
  | n_754, (Node_16 x_755 l_756 r_757) =>
    (match (__eq__ x_755 n_754) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => true_4
    | false_5 => ((or_13) ((find_750) n_754 l_756) ((find_750) n_754 r_757))))

#[logical]
def tree_p_37‹› : tree_11 -> proto :=
  (fun tree_p_760 : tree_11 -> proto
  | t_762 =>
    ⇓(o_763 : opr_12) ⇒
      (match o_763 in ?_69[0;0] -o ?_70[0;0] with
      | Free_17 => •
      | Height_18 =>
        ⇑(__765 : ((ssing_6‹??_62›) ?_71[0;0] ((height_34) t_762))) ⇒
          ((tree_p_760) t_762)
      | Size_19 =>
        ⇑(__766 : ((ssing_6‹??_63›) ?_72[0;0] ((size_35) t_762))) ⇒
          ((tree_p_760) t_762)
      | (Find_20 k_767) =>
        ⇑(__768 :
          ((ssing_6‹??_64›) ?_73[0;0] ((find_36) k_767 t_762))) ⇒
          ((tree_p_760) t_762)))

#[logical]
def ctree_ch_38‹› : tree_11 -> L :=
  (fun ctree_ch_770 : tree_11 -> L
  | t_772 => ch⟨((tree_p_37) t_772)⟩)

#[logical]
def ctree_hc_39‹› : tree_11 -> L :=
  (fun ctree_hc_774 : tree_11 -> L
  | t_776 => hc⟨((tree_p_37) t_776)⟩)

#[logical]
def ctree_40‹› : tree_11 -> L :=
  (fun ctree_778 : tree_11 -> L
  | t_780 => IO ((ctree_hc_39) t_780))

#[program]
def leaf_worker_41‹› : ((ctree_ch_38) Leaf_15) -> IO unit_9 :=
  (fun leaf_worker_782 : ((ctree_ch_38) Leaf_15) -> IO unit_9
  | c_784 =>
    let* _785 := recv c_784 in
    (match _785 in ?_85[0;0] -o ?_84[0;0] with
    | (ex1_14 o_787 c_788) =>
      (match o_787, c_788 in
         ∀ (o0_789 : ?_74[0;0]) -o
           ch⟨(match o0_789 in ?_75[0;0] -o ?_76[0;0] with
                | Free_17 => •
                | Height_18 =>
                  ⇑(__792 : ((ssing_6‹??_65›) ?_77[0;0] 0)) ⇒
                    ((tree_p_37) Leaf_15)
                | Size_19 =>
                  ⇑(__793 : ((ssing_6‹??_66›) ?_78[0;0] 0)) ⇒
                    ((tree_p_37) Leaf_15)
                | (Find_20 _794) =>
                  ⇑(__795 : ((ssing_6‹??_67›) ?_79[0;0] false_5)) ⇒
                    ((tree_p_37) Leaf_15))⟩ -o
             ?_80[0;0]
       with
      | Free_17, c_796 => close c_796
      | Height_18, c_797 =>
        let* c_798 := ((send c_797) (just_2‹??_68,??_69› ?_81[0;0] 0)) in
        ((leaf_worker_782) c_798)
      | Size_19, c_799 =>
        let* c_800 := ((send c_799) (just_2‹??_70,??_71› ?_82[0;0] 0)) in
        ((leaf_worker_782) c_800)
      | (Find_20 _801), c_802 =>
        let* c_803 :=
          ((send c_802) (just_2‹??_72,??_73› ?_83[0;0] false_5))
        in ((leaf_worker_782) c_803))))

#[program]
def node_worker_42‹› :
  ∀ (x_804 : int) ->
    ∀ {l_805 : tree_11} ->
      ∀ {r_806 : tree_11} ->
        ((ctree_hc_39) l_805) -o
          ((ctree_hc_39) r_806) -o
            ((ctree_ch_38) (Node_16‹› x_804 l_805 r_806)) -o IO unit_9
:=
  (fun node_worker_810 :
    ∀ (x_811 : int) ->
      ∀ {l_812 : tree_11} ->
        ∀ {r_813 : tree_11} ->
          ((ctree_hc_39) l_812) -o
            ((ctree_hc_39) r_813) -o
              ((ctree_ch_38) (Node_16‹› x_811 l_812 r_813)) -o IO unit_9
  | x_817, l_818, r_819 =>
    (fun _820 : ?_86[0;0] -o ?_87[0;0] -o ?_88[0;0] -o ?_89[0;0]
    | l_ch_824, r_ch_825, c_826 =>
      let* _827 := recv c_826 in
      (match _827 in ?_135[0;0] -o ?_134[0;0] with
      | (ex1_14 o_829 c_830) =>
        (match o_829, c_830 in
           ∀ (o0_831 : ?_90[0;0]) -o
             ch⟨(match o0_831 in ?_91[0;0] -o ?_92[0;0] with
                  | Free_17 => •
                  | Height_18 =>
                    ⇑(__834 :
                      ((ssing_6‹??_74›)
                        ?_93[0;0]
                        ((height_34) (Node_16‹› x_817 l_818 r_819)))) ⇒
                      ((tree_p_37) (Node_16‹› x_817 l_818 r_819))
                  | Size_19 =>
                    ⇑(__835 :
                      ((ssing_6‹??_75›)
                        ?_94[0;0]
                        ((size_35) (Node_16‹› x_817 l_818 r_819)))) ⇒
                      ((tree_p_37) (Node_16‹› x_817 l_818 r_819))
                  | (Find_20 k_836) =>
                    ⇑(__837 :
                      ((ssing_6‹??_76›)
                        ?_95[0;0]
                        ((find_36) k_836 (Node_16‹› x_817 l_818 r_819)))) ⇒
                      ((tree_p_37) (Node_16‹› x_817 l_818 r_819)))⟩ -o
               ?_96[0;0]
         with
        | Free_17, c_838 =>
          let* l_ch_839 := ((send l_ch_824) Free_17) in
          let* r_ch_840 := ((send r_ch_825) Free_17) in
          let* __841 := close l_ch_839 in
          let* __842 := close r_ch_840 in close c_838
        | Height_18, c_843 =>
          let* l_ch_844 := ((send l_ch_824) Height_18) in
          let* r_ch_845 := ((send r_ch_825) Height_18) in
          let* _846 := recv l_ch_844 in
          (match _846 in ?_111[0;0] -o ?_110[0;0] with
          | (ex1_14 (just_2 l_h_848) l_ch_849) =>
            let* _850 := recv r_ch_845 in
            (match _850 in ?_109[0;0] -o ?_108[0;0] with
            | (ex1_14 (just_2 r_h_852) r_ch_853) =>
              (match (__lt__ l_h_848 r_h_852), c_843 in
                 ∀ (b0_854 : ?_97[0;0]) -o
                   ch⟨⇑(__856 :
                          ((ssing_6‹??_77›)
                            ?_100[0;0]
                            (match b0_854 in ?_98[0;0] -o ?_99[0;0] with
                            | true_4 => (__add__ r_h_852 1)
                            | false_5 => (__add__ l_h_848 1)))) ⇒
                          ((tree_p_37) (Node_16‹› x_817 l_818 r_819))⟩ -o
                     ?_101[0;0]
               with
              | true_4, c_858 =>
                let* c_859 :=
                  ((send c_858)
                    (just_2‹??_78,??_79› ?_102[0;0] (__add__ r_h_852 1)))
                in
                ((node_worker_810)
                  x_817 ?_104[0;0] ?_103[0;0] l_ch_849 r_ch_853 c_859)
              | false_5, c_860 =>
                let* c_861 :=
                  ((send c_860)
                    (just_2‹??_80,??_81› ?_105[0;0] (__add__ l_h_848 1)))
                in
                ((node_worker_810)
                  x_817 ?_107[0;0] ?_106[0;0] l_ch_849 r_ch_853 c_861))))
        | Size_19, c_862 =>
          let* l_ch_863 := ((send l_ch_824) Size_19) in
          let* r_ch_864 := ((send r_ch_825) Size_19) in
          let* _865 := recv l_ch_863 in
          (match _865 in ?_118[0;0] -o ?_117[0;0] with
          | (ex1_14 (just_2 l_sz_867) l_ch_868) =>
            let* _869 := recv r_ch_864 in
            (match _869 in ?_116[0;0] -o ?_115[0;0] with
            | (ex1_14 (just_2 r_sz_871) r_ch_872) =>
              let* c_873 :=
                ((send c_862)
                  (just_2‹??_82,??_83›
                    ?_112[0;0] (__add__ (__add__ 1 l_sz_867) r_sz_871)))
              in
              ((node_worker_810)
                x_817 ?_114[0;0] ?_113[0;0] l_ch_868 r_ch_872 c_873)))
        | (Find_20 k_874), c_875 =>
          (match (__eq__ x_817 k_874), c_875 in
             ∀ (b0_876 : ?_119[0;0]) -o
               ch⟨⇑(__878 :
                      ((ssing_6‹??_84›)
                        ?_122[0;0]
                        (match b0_876 in ?_120[0;0] -o ?_121[0;0] with
                        | true_4 => true_4
                        | false_5 =>
                          ((or_13)
                            ((find_36) k_874 l_818) ((find_36) k_874 r_819))))) ⇒
                      ((tree_p_37) (Node_16‹› x_817 l_818 r_819))⟩ -o
                 ?_123[0;0]
           with
          | true_4, c_880 =>
            let* c_881 :=
              ((send c_880) (just_2‹??_85,??_86› ?_124[0;0] true_4))
            in
            ((node_worker_810)
              x_817 ?_126[0;0] ?_125[0;0] l_ch_824 r_ch_825 c_881)
          | false_5, c_882 =>
            let* l_ch_883 := ((send l_ch_824) (Find_20‹› k_874)) in
            let* r_ch_884 := ((send r_ch_825) (Find_20‹› k_874)) in
            let* _885 := recv l_ch_883 in
            (match _885 in ?_133[0;0] -o ?_132[0;0] with
            | (ex1_14 (just_2 l_b_887) l_ch_888) =>
              let* _889 := recv r_ch_884 in
              (match _889 in ?_131[0;0] -o ?_130[0;0] with
              | (ex1_14 (just_2 r_b_891) r_ch_892) =>
                let* c_893 :=
                  ((send c_882)
                    (just_2‹??_87,??_88›
                      ?_127[0;0] ((or_13) l_b_887 r_b_891)))
                in
                ((node_worker_810)
                  x_817 ?_129[0;0] ?_128[0;0] l_ch_888 r_ch_892 c_893))))))))

#[program]
def cleaf_43‹› : unit_9 -> ((ctree_40) Leaf_15) :=
  (fun cleaf_895 : unit_9 -> ((ctree_40) Leaf_15)
  | _897 =>
    fork
      (fun _898 : ((ctree_ch_38) Leaf_15) -o IO unit_9
      | c_900 => ((leaf_worker_41) c_900)))

#[program]
def cnode_44‹› :
  ∀ (x_901 : int) ->
    ∀ {l_902 : tree_11} ->
      ∀ {r_903 : tree_11} ->
        ((ctree_40) l_902) -o
          ((ctree_40) r_903) -o
            ((ctree_40) (Node_16‹› x_901 l_902 r_903))
:=
  (fun cnode_906 :
    ∀ (x_907 : int) ->
      ∀ {l_908 : tree_11} ->
        ∀ {r_909 : tree_11} ->
          ((ctree_40) l_908) -o
            ((ctree_40) r_909) -o
              ((ctree_40) (Node_16‹› x_907 l_908 r_909))
  | x_912, l_913, r_914, l0_915, r0_916 =>
    let* l_ch_917 := l0_915 in
    let* r_ch_918 := r0_916 in
    fork
      (fun _919 :
        ((ctree_ch_38) (Node_16‹› x_912 l_913 r_914)) -o IO unit_9
      | c_921 =>
        ((node_worker_42)
          x_912 ?_137[0;0] ?_136[0;0] l_ch_917 r_ch_918 c_921)))

#[program]
def ctree_of_tree_45‹› : ∀ (x_922 : tree_11) -> ((ctree_40) x_922) :=
  (fun ctree_of_tree_923 : ∀ (x_924 : tree_11) -> ((ctree_40) x_924)
  | Leaf_15 => ((cleaf_43) tt_3‹??_89›)
  | (Node_16 x_925 l_926 r_927) =>
    ((cnode_44)
      x_925 ?_139[0;0] ?_138[0;0] ((ctree_of_tree_923) l_926)
      ((ctree_of_tree_923) r_927)))

#[program]
def cfree_46‹› : ∀ {t_928 : tree_11} -> ((ctree_40) t_928) -> IO unit_9
:=
  (fun cfree_930 : ∀ {t_931 : tree_11} -> ((ctree_40) t_931) -> IO unit_9
  | t_933, ct_934 =>
    let* c_935 := ct_934 in
    let* c_936 := ((send c_935) Free_17) in close c_936)

#[program]
def cheight_47‹› :
  ∀ {t_937 : tree_11} ->
    ((ctree_40) t_937) ->
      IO ((tensor_26‹??_96,??_97›)
           ((ssing_6‹??_95›) ?_145[0;0] ((height_34) t_937))
           ((ctree_40) t_937))
:=
  (fun cheight_939 :
    ∀ {t_940 : tree_11} ->
      ((ctree_40) t_940) ->
        IO ((tensor_26‹??_91,??_92›)
             ((ssing_6‹??_90›) ?_140[0;0] ((height_34) t_940))
             ((ctree_40) t_940))
  | t_942, ct_943 =>
    let* c_944 := ct_943 in
    let* c_945 := ((send c_944) Height_18) in
    let* _946 := recv c_945 in
    (match _946 in ?_144[0;0] -o ?_143[0;0] with
    | (ex1_14 x_948 ct_949) =>
      return (ex1_14‹??_93,??_94›
               ?_141[0;0] ?_142[0;0] x_948 return ct_949)))

#[program]
def csize_48‹› :
  ∀ {t_950 : tree_11} ->
    ((ctree_40) t_950) ->
      IO ((tensor_26‹??_104,??_105›)
           ((ssing_6‹??_103›) ?_151[0;0] ((size_35) t_950))
           ((ctree_40) t_950))
:=
  (fun csize_952 :
    ∀ {t_953 : tree_11} ->
      ((ctree_40) t_953) ->
        IO ((tensor_26‹??_99,??_100›)
             ((ssing_6‹??_98›) ?_146[0;0] ((size_35) t_953))
             ((ctree_40) t_953))
  | t_955, ct_956 =>
    let* c_957 := ct_956 in
    let* c_958 := ((send c_957) Size_19) in
    let* _959 := recv c_958 in
    (match _959 in ?_150[0;0] -o ?_149[0;0] with
    | (ex1_14 x_961 ct_962) =>
      return (ex1_14‹??_101,??_102›
               ?_147[0;0] ?_148[0;0] x_961 return ct_962)))

#[program]
def cfind_49‹› :
  ∀ (k_963 : int) ->
    ∀ {t_964 : tree_11} ->
      ((ctree_40) t_964) ->
        IO ((tensor_26‹??_112,??_113›)
             ((ssing_6‹??_111›) ?_157[0;0] ((find_36) k_963 t_964))
             ((ctree_40) t_964))
:=
  (fun cfind_966 :
    ∀ (k_967 : int) ->
      ∀ {t_968 : tree_11} ->
        ((ctree_40) t_968) ->
          IO ((tensor_26‹??_107,??_108›)
               ((ssing_6‹??_106›) ?_152[0;0] ((find_36) k_967 t_968))
               ((ctree_40) t_968))
  | k_970, t_971, ct_972 =>
    let* c_973 := ct_972 in
    let* c_974 := ((send c_973) (Find_20‹› k_970)) in
    let* _975 := recv c_974 in
    (match _975 in ?_156[0;0] -o ?_155[0;0] with
    | (ex1_14 x_977 ct_978) =>
      return (ex1_14‹??_109,??_110›
               ?_153[0;0] ?_154[0;0] x_977 return ct_978)))

#[program]
def mytree1_50‹› : int -> ?_161[0;0] :=
  (fun mytree1_980 : int -> ?_158[0;0]
  | x_982 =>
    ((cnode_44)
      x_982 ?_160[0;0] ?_159[0;0] ((cleaf_43) tt_3‹??_114›)
      ((cleaf_43) tt_3‹??_115›)))

#[program]
def mytree2_51‹› : int -> ?_165[0;0] :=
  (fun mytree2_984 : int -> ?_162[0;0]
  | x_986 =>
    ((cnode_44)
      x_986 ?_164[0;0] ?_163[0;0] ((mytree1_50) 1) ((mytree1_50) 2)))

#[program]
def mytree3_52‹› : int -> ?_169[0;0] :=
  (fun mytree3_988 : int -> ?_166[0;0]
  | x_990 =>
    ((cnode_44)
      x_990 ?_168[0;0] ?_167[0;0] ((mytree2_51) 3) ((mytree2_51) 4)))

#[program]
def mytree4_53‹› : int -> ?_173[0;0] :=
  (fun mytree4_992 : int -> ?_170[0;0]
  | x_994 =>
    ((cnode_44)
      x_994 ?_172[0;0] ?_171[0;0] ((mytree3_52) 8) ((mytree3_52) 7)))

#[program]
def mytree5_54‹› : int -> ?_177[0;0] :=
  (fun mytree5_996 : int -> ?_174[0;0]
  | x_998 =>
    ((cnode_44)
      x_998 ?_176[0;0] ?_175[0;0] ((mytree4_53) 9) ((mytree4_53) 10)))

#[program]
def mytree6_55‹› : int -> ?_181[0;0] :=
  (fun mytree6_1000 : int -> ?_178[0;0]
  | x_1002 =>
    ((cnode_44)
      x_1002 ?_180[0;0] ?_179[0;0] ((mytree5_54) 11) ((mytree5_54) 12)))

#[program]
def main_56‹› : IO unit_9 :=
  let ct_1003 := ((mytree6_55) 100) in
  let* _1004 := ((cheight_47) ?_182[0;0] ct_1003) in
  (match _1004 in ?_193[0;0] -o ?_192[0;0] with
  | (ex1_14 (just_2 h_1006) ct_1007) =>
    let* _1008 := ((csize_48) ?_183[0;0] ct_1007) in
    (match _1008 in ?_191[0;0] -o ?_190[0;0] with
    | (ex1_14 (just_2 sz_1010) ct_1011) =>
      let* _1012 := ((cfind_49) 1 ?_184[0;0] ct_1011) in
      (match _1012 in ?_189[0;0] -o ?_188[0;0] with
      | (ex1_14 (just_2 b_1014) ct_1015) =>
        let* _1016 := ((cfree_46) ?_185[0;0] ct_1015) in
        (match _1016 in ?_187[0;0] -o ?_186[0;0] with
        | tt_3 =>
          print
            (__cat__
              (__cat__
                (__cat__
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__ "height := " ((string_of_int_33) h_1006))
                          "\n")
                        "size   := ")
                      ((string_of_int_33) sz_1010))
                    "\n")
                  "find   := ")
                ((string_of_bool_15) b_1014))
              "\n")))))

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_67710› :
  ∀ (A_67711 : Type‹s_67710›) -> A_67711 -> A_67711
:=
  (fun id_67713 : ∀ (A_67714 : Type‹s_67710›) -> A_67714 -> A_67714
  | A_67716, m_67717 => m_67717)

#[logical]
inductive eq_1‹s_67718› (A_67719 : Type‹s_67718›) (m_67720 : A_67719):
  A_67719 -> U
where
| refl_1 : (eq_1‹s_67718› A_67719 m_67720 m_67720)

#[program]
def rwl_2‹s_67722,r_67723› :
  ∀ {A_67724 : Type‹s_67722›} ->
    ∀ {m_67725 : A_67724} ->
      ∀ {n_67726 : A_67724} ->
        ∀ {B_67727 : A_67724 -> Type‹r_67723›} ->
          {(eq_1‹s_67722› A_67724 m_67725 n_67726)} ->
            ((B_67727) m_67725) -> ((B_67727) n_67726)
:=
  (fun rwl_67731 :
    ∀ {A_67732 : Type‹s_67722›} ->
      ∀ {m_67733 : A_67732} ->
        ∀ {n_67734 : A_67732} ->
          ∀ {B_67735 : A_67732 -> Type‹r_67723›} ->
            {(eq_1‹s_67722› A_67732 m_67733 n_67734)} ->
              ((B_67735) m_67733) -> ((B_67735) n_67734)
  | A_67739, m_67740, n_67741, B_67742, refl_1, __67743 => __67743)

#[program]
def rwr_3‹s_67744,r_67745› :
  ∀ {A_67746 : Type‹s_67744›} ->
    ∀ {m_67747 : A_67746} ->
      ∀ {n_67748 : A_67746} ->
        ∀ {B_67749 : A_67746 -> Type‹r_67745›} ->
          {(eq_1‹s_67744› A_67746 m_67747 n_67748)} ->
            ((B_67749) n_67748) -> ((B_67749) m_67747)
:=
  (fun rwr_67753 :
    ∀ {A_67754 : Type‹s_67744›} ->
      ∀ {m_67755 : A_67754} ->
        ∀ {n_67756 : A_67754} ->
          ∀ {B_67757 : A_67754 -> Type‹r_67745›} ->
            {(eq_1‹s_67744› A_67754 m_67755 n_67756)} ->
              ((B_67757) n_67756) -> ((B_67757) m_67755)
  | A_67761, m_67762, n_67763, B_67764, refl_1, __67765 => __67765)

#[logical]
def congr_4‹s_67766,r_67767,t_67768› :
  ∀ (A_67769 : Type‹s_67766›) ->
    ∀ (B_67770 : Type‹r_67767›) ->
      ∀ (m_67771 : A_67769) ->
        ∀ (n_67772 : A_67769) ->
          ∀ (f_67773 : forall‹t_67768›(__67774 : A_67769), B_67770) ->
            (eq_1‹s_67766› A_67769 m_67771 n_67772) ->
              (eq_1‹r_67767›
                B_67770 ((f_67773) m_67771) ((f_67773) n_67772))
:=
  (fun congr_67776 :
    ∀ (A_67777 : Type‹s_67766›) ->
      ∀ (B_67778 : Type‹r_67767›) ->
        ∀ (m_67779 : A_67777) ->
          ∀ (n_67780 : A_67777) ->
            ∀ (f_67781 :
              forall‹t_67768›(__67782 : A_67777), B_67778) ->
              (eq_1‹s_67766› A_67777 m_67779 n_67780) ->
                (eq_1‹r_67767›
                  B_67778 ((f_67781) m_67779) ((f_67781) n_67780))
  | A_67784, B_67785, m_67786, n_67787, f_67788, refl_1 =>
    (refl_1‹r_67767› B_67785 ((f_67788) n_67787)))

#[logical]
def axiom_K_5‹› :
  ∀ {A_67789 : U} ->
    ∀ {m_67790 : A_67789} ->
      ∀ (x_67791 : (eq_1‹U› A_67789 m_67790 m_67790)) ->
        (eq_1‹U›
          (eq_1‹U› A_67789 m_67790 m_67790) x_67791
          (refl_1‹U› A_67789 m_67790))
:=
  (fun axiom_K_67792 :
    ∀ {A_67793 : U} ->
      ∀ {m_67794 : A_67793} ->
        ∀ (x_67795 : (eq_1‹U› A_67793 m_67794 m_67794)) ->
          (eq_1‹U›
            (eq_1‹U› A_67793 m_67794 m_67794) x_67795
            (refl_1‹U› A_67793 m_67794))
  | A_67796, m_67797, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_67796 m_67797 m_67797) (refl_1‹U› A_67796 m_67797)))

#[program]
inductive sing_2‹s_67798,t_67799› (A_67800 : Type‹s_67798›):
  A_67800 -> Type‹t_67799›
where
| just_2 (m_67802 : A_67800) : (sing_2‹s_67798,t_67799› A_67800 m_67802)

#[logical]
def ssing_6‹s_67803› :
  ∀ (A_67804 : Type‹s_67803›) -> A_67804 -> Type‹s_67803›
:=
  (fun ssing_67806 :
    ∀ (A_67807 : Type‹s_67803›) -> A_67807 -> Type‹s_67803›
  | A_67809, m_67810 => (sing_2‹s_67803,s_67803› A_67809 m_67810))

#[program]
def sing_elim_7‹s_67811,t_67812› :
  ∀ {A_67813 : Type‹s_67811›} ->
    ∀ {x_67814 : A_67813} ->
      (sing_2‹s_67811,t_67812› A_67813 x_67814) -> A_67813
:=
  (fun sing_elim_67816 :
    ∀ {A_67817 : Type‹s_67811›} ->
      ∀ {x_67818 : A_67817} ->
        (sing_2‹s_67811,t_67812› A_67817 x_67818) -> A_67817
  | A_67820, x_67821, (just_2 m_67822) => m_67822)

#[logical]
def sing_uniq_8‹s_67823,t_67824› :
  ∀ (A_67825 : Type‹s_67823›) ->
    ∀ (x0_67826 : A_67825) ->
      ∀ (x_67827 : (sing_2‹s_67823,t_67824› A_67825 x0_67826)) ->
        (eq_1‹s_67823›
          A_67825 x0_67826
          ((sing_elim_7‹s_67823,t_67824›) A_67825 x0_67826 x_67827))
:=
  (fun sing_uniq_67828 :
    ∀ (A_67829 : Type‹s_67823›) ->
      ∀ (x0_67830 : A_67829) ->
        ∀ (x_67831 : (sing_2‹s_67823,t_67824› A_67829 x0_67830)) ->
          (eq_1‹s_67823›
            A_67829 x0_67830
            ((sing_elim_7‹s_67823,t_67824›) A_67829 x0_67830 x_67831))
  | A_67832, x0_67833, (just_2 m_67834) =>
    (refl_1‹s_67823› A_67832 m_67834))

#[program]
inductive base_3‹s_67835› : Type‹s_67835› where
| tt_3 : base_3‹s_67835›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_67836 : unit_9) -> (eq_1‹U› base_3‹U› x_67836 tt_3‹U›)
:=
  (fun unit_eta_67837 :
    ∀ (x_67838 : unit_9) -> (eq_1‹U› base_3‹U› x_67838 tt_3‹U›)
  | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›))

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  (fun not_67840 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4)

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun and_67844 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __67847 => false_5)

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun or_67850 : bool_4 -> bool_4 -> bool_4
  | true_4, __67853 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun xor_67856 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
def string_of_bool_15‹› : bool_4 -> string :=
  (fun string_of_bool_67860 : bool_4 -> string
  | true_4 => "true"
  | false_5 => "false")

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_67862 : nat_5) : nat_5

#[program]
def lte_16‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lte_67865 : nat_5 -> nat_5 -> bool_4
  | zero_6, __67868 => true_4
  | (succ_7 n_67869), zero_6 => false_5
  | (succ_7 n_67870), (succ_7 n_67871) => ((lte_67865) n_67870 n_67871))

#[program]
def lt_17‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lt_67874 : nat_5 -> nat_5 -> bool_4
  | x_67877, y_67878 => ((lte_16) (succ_7‹› x_67877) y_67878))

#[program]
def pred_18‹› : nat_5 -> nat_5 :=
  (fun pred_67880 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_67882) => n_67882)

#[program]
def add_19‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun add_67885 : nat_5 -> nat_5 -> nat_5
  | zero_6, __67888 => __67888
  | (succ_7 n_67889), __67890 => (succ_7‹› ((add_67885) n_67889 __67890)))

#[program]
def sub_20‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun sub_67893 : nat_5 -> nat_5 -> nat_5
  | __67896, zero_6 => __67896
  | __67897, (succ_7 n_67898) => ((sub_67893) ((pred_18) __67897) n_67898))

#[program]
def mul_21‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun mul_67901 : nat_5 -> nat_5 -> nat_5
  | zero_6, __67904 => zero_6
  | (succ_7 n_67905), __67906 =>
    ((add_19) __67906 ((mul_67901) n_67905 __67906)))

#[program]
def div_22‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun div_67909 : nat_5 -> nat_5 -> nat_5
  | x_67912, y_67913 =>
    (match ((lt_17) x_67912 y_67913) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_67915 :=
        (fun loop_67916 : nat_5 -> nat_5 -> nat_5
        | x_67919, y_67920 =>
          (match ((sub_20) x_67919 ((pred_18) y_67920)) in nat_5 -o nat_5
           with
          | zero_6 => zero_6
          | (succ_7 n_67922) => (succ_7‹› ((loop_67916) n_67922 y_67920))))
      in ((loop_67915) x_67912 y_67913)))

#[program]
def rem_23‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun rem_67925 : nat_5 -> nat_5 -> nat_5
  | x_67928, y_67929 =>
    ((sub_20) x_67928 ((mul_21) ((div_22) x_67928 y_67929) y_67929)))

#[program]
inductive option_6‹s_67930› (A_67931 : Type‹s_67930›):
  Type‹s_67930›
where
| None_8 : (option_6‹s_67930› A_67931)
| Some_9 (m_67932 : A_67931) : (option_6‹s_67930› A_67931)

#[program]
inductive list_7‹s_67933,t_67934› (A_67935 : Type‹s_67933›):
  Type‹t_67934›
where
| nil_10 : (list_7‹s_67933,t_67934› A_67935)
| cons_11
    (hd_67936 : A_67935) (tl_67937 : (list_7‹s_67933,t_67934› A_67935))
    : (list_7‹s_67933,t_67934› A_67935)

#[program]
def rcons_24‹s_67938,t_67939› :
  ∀ {A_67940 : Type‹s_67938›} ->
    (list_7‹s_67938,t_67939› A_67940) -o
      A_67940 -o (list_7‹s_67938,t_67939› A_67940)
:=
  (fun rcons_67943 :
    ∀ {A_67944 : Type‹s_67938›} ->
      (list_7‹s_67938,t_67939› A_67944) -o
        A_67944 -o (list_7‹s_67938,t_67939› A_67944)
  | A_67947, nil_10, __67948 =>
    (cons_11‹s_67938,t_67939›
      A_67947 __67948 (nil_10‹s_67938,t_67939› A_67947))
  | A_67949, (cons_11 hd_67950 tl_67951), __67952 =>
    (cons_11‹s_67938,t_67939›
      A_67949 hd_67950 ((rcons_67943) A_67949 tl_67951 __67952)))

#[program]
def free_list_25‹s_67953,t_67954› :
  ∀ {A_67955 : Type‹s_67953›} ->
    A_67955 -> unit_9 -> (list_7‹s_67953,t_67954› A_67955) -> unit_9
:=
  (fun free_list_67959 :
    ∀ {A_67960 : Type‹s_67953›} ->
      A_67960 -> unit_9 -> (list_7‹s_67953,t_67954› A_67960) -> unit_9
  | A_67964, f_67965, nil_10 => tt_3‹U›
  | A_67966, f_67967, (cons_11 hd_67968 tl_67969) =>
    let __67970 := ((f_67967) hd_67968) in
    ((free_list_67959) A_67966 f_67967 tl_67969))

#[program]
inductive exists_8‹s_67971,r_67972› (A_67973 : Type‹s_67971›) (B_67974 : 
A_67973 -> Type‹r_67972›): L where
| ex_12
    (m_67976 : A_67973) {n_67977 : ((B_67974) m_67976)}
    : (exists_8‹s_67971,r_67972› A_67973 B_67974)

#[program]
inductive exists0_9‹s_67978,r_67979› (A_67980 : Type‹s_67978›) (B_67981 : 
A_67980 -> Type‹r_67979›): L where
| ex0_13
    {m_67983 : A_67980} (n_67984 : ((B_67981) m_67983))
    : (exists0_9‹s_67978,r_67979› A_67980 B_67981)

#[program]
inductive exists1_10‹s_67985,r_67986› (A_67987 : Type‹s_67985›) (B_67988 : 
A_67987 -> Type‹r_67986›): L where
| ex1_14
    (m_67990 : A_67987) (n_67991 : ((B_67988) m_67990))
    : (exists1_10‹s_67985,r_67986› A_67987 B_67988)

#[logical]
def tensor_26‹s_67992,r_67993› :
  Type‹s_67992› -> Type‹r_67993› -> L
:=
  (fun tensor_67996 : Type‹s_67992› -> Type‹r_67993› -> L
  | A_67999, B_68000 =>
    (exists1_10‹s_67992,r_67993›
      A_67999
      (fun _68001 : A_67999 -> Type‹r_67993›
      | __68003 => B_68000)))

#[program]
def pow_27‹› : int -> int -> int :=
  (fun pow_68006 : int -> int -> int
  | x_68009, y_68010 =>
    let loop_68011 :=
      (fun loop_68012 : int -> int -> int
      | acc_68015, y_68016 =>
        (match (__lte__ y_68016 0) in bool_4 -o int with
        | true_4 => acc_68015
        | false_5 =>
          ((loop_68012) (__mul__ x_68009 acc_68015) (__sub__ y_68016 1))))
    in ((loop_68011) 1 y_68010))

#[program]
def powm_28‹› : int -> int -> int -> int :=
  (fun powm_68021 : int -> int -> int -> int
  | x_68025, y_68026, m_68027 =>
    let loop_68028 :=
      (fun loop_68029 : int -> int -> int
      | acc_68032, y_68033 =>
        (match (__lte__ y_68033 0) in bool_4 -o int with
        | true_4 => acc_68032
        | false_5 =>
          ((loop_68029)
            (__mod__ (__mul__ x_68025 acc_68032) m_68027) (__sub__ y_68033 1))))
    in ((loop_68028) 1 y_68026))

#[program]
def ord_29‹› : char -> int :=
  (fun ord_68036 : char -> int
  | c_68038 => (__ord__ c_68038))

#[program]
def chr_30‹› : int -> char :=
  (fun chr_68040 : int -> char
  | i_68042 => (__chr__ i_68042))

#[program]
def str_31‹› : char -> string :=
  (fun str_68044 : char -> string
  | c_68046 => (__push__ "" c_68046))

#[program]
def strlen_32‹› : string -> int :=
  (fun strlen_68048 : string -> int
  | s_68050 => (__size__ s_68050))

#[program]
def string_of_int_33‹› : int -> string :=
  (fun string_of_int_68052 : int -> string
  | i_68054 =>
    let aux_68055 :=
      (fun aux_68056 : int -> string
      | i_68058 =>
        (match (__lte__ 10 i_68058) in bool_4 -o string with
        | true_4 =>
          let r_68060 := (__mod__ i_68058 10) in
          let i_68061 := (__div__ i_68058 10) in
          (__push__ ((aux_68056) i_68061)
            ((chr_30) (__add__ r_68060 ((ord_29) 0))))
        | false_5 => ((str_31) ((chr_30) (__add__ i_68058 ((ord_29) 0))))))
    in
    (match (__lte__ 0 i_68054) in bool_4 -o string with
    | true_4 => ((aux_68055) i_68054)
    | false_5 => (__cat__ "~" ((aux_68055) (__neg__ i_68054)))))

#[program]
inductive tree_11‹› : U where
| Leaf_15 : tree_11
| Node_16 (__68063 : int) (l_68064 : tree_11) (r_68065 : tree_11) : tree_11

#[program]
inductive opr_12‹› : L where
| Free_17 : opr_12
| Height_18 : opr_12
| Size_19 : opr_12
| Find_20 (k_68066 : int) : opr_12

#[program]
def height_34‹› : tree_11 -> int :=
  (fun height_68068 : tree_11 -> int
  | Leaf_15 => 0
  | (Node_16 __68070 l_68071 r_68072) =>
    let x_68073 := ((height_68068) l_68071) in
    let y_68074 := ((height_68068) r_68072) in
    (match (__lt__ x_68073 y_68074) in bool_4 -o int with
    | true_4 => (__add__ y_68074 1)
    | false_5 => (__add__ x_68073 1)))

#[program]
def size_35‹› : tree_11 -> int :=
  (fun size_68077 : tree_11 -> int
  | Leaf_15 => 0
  | (Node_16 __68079 l_68080 r_68081) =>
    (__add__ (__add__ 1 ((size_68077) l_68080)) ((size_68077) r_68081)))

#[program]
def find_36‹› : int -> tree_11 -> bool_4 :=
  (fun find_68084 : int -> tree_11 -> bool_4
  | n_68087, Leaf_15 => false_5
  | n_68088, (Node_16 __68089 l_68090 r_68091) =>
    (match (__eq__ __68089 n_68088) in bool_4 -o bool_4 with
    | true_4 => true_4
    | false_5 =>
      ((or_13) ((find_68084) n_68088 l_68090) ((find_68084) n_68088 r_68091))))

#[logical]
def tree_p_37‹› : tree_11 -> proto :=
  (fun tree_p_68094 : tree_11 -> proto
  | t_68096 =>
    ⇓(o_68097 : opr_12) ⇒
      (match o_68097 in opr_12 -o proto with
      | Free_17 => •
      | Height_18 =>
        ⇑(__68099 : ((ssing_6‹U›) int ((height_34) t_68096))) ⇒
          ((tree_p_68094) t_68096)
      | Size_19 =>
        ⇑(__68100 : ((ssing_6‹U›) int ((size_35) t_68096))) ⇒
          ((tree_p_68094) t_68096)
      | (Find_20 k_68101) =>
        ⇑(__68102 :
          ((ssing_6‹U›) bool_4 ((find_36) k_68101 t_68096))) ⇒
          ((tree_p_68094) t_68096)))

#[logical]
def ctree_ch_38‹› : tree_11 -> L :=
  (fun ctree_ch_68104 : tree_11 -> L
  | t_68106 => ch⟨((tree_p_37) t_68106)⟩)

#[logical]
def ctree_hc_39‹› : tree_11 -> L :=
  (fun ctree_hc_68108 : tree_11 -> L
  | t_68110 => hc⟨((tree_p_37) t_68110)⟩)

#[logical]
def ctree_40‹› : tree_11 -> L :=
  (fun ctree_68112 : tree_11 -> L
  | t_68114 => IO ((ctree_hc_39) t_68114))

#[program]
def leaf_worker_41‹› : ((ctree_ch_38) Leaf_15) -> IO unit_9 :=
  (fun leaf_worker_68116 : ((ctree_ch_38) Leaf_15) -> IO unit_9
  | c_68118 =>
    let* _68119 := recv c_68118 in
    (match _68119 in
       (exists1_10‹L,L›
         opr_12
         (fun _68121 : opr_12 -> L
         | o_68123 =>
           ch⟨(match o_68123 in opr_12 -o proto with
                | Free_17 => •
                | Height_18 =>
                  ⇑(__68125 :
                    ((ssing_6‹U›) int ((height_34) Leaf_15))) ⇒
                    (((fun tree_p_68126 : tree_11 -> proto
                      | t_68128 =>
                        ⇓(o_68129 : opr_12) ⇒
                          (match o_68129 in opr_12 -o proto with
                          | Free_17 => •
                          | Height_18 =>
                            ⇑(__68131 :
                              ((ssing_6‹U›) int ((height_34) t_68128))) ⇒
                              ((tree_p_68126) t_68128)
                          | Size_19 =>
                            ⇑(__68132 :
                              ((ssing_6‹U›) int ((size_35) t_68128))) ⇒
                              ((tree_p_68126) t_68128)
                          | (Find_20 k_68133) =>
                            ⇑(__68134 :
                              ((ssing_6‹U›)
                                bool_4 ((find_36) k_68133 t_68128))) ⇒
                              ((tree_p_68126) t_68128))))
                      Leaf_15)
                | Size_19 =>
                  ⇑(__68135 :
                    ((ssing_6‹U›) int ((size_35) Leaf_15))) ⇒
                    (((fun tree_p_68136 : tree_11 -> proto
                      | t_68138 =>
                        ⇓(o_68139 : opr_12) ⇒
                          (match o_68139 in opr_12 -o proto with
                          | Free_17 => •
                          | Height_18 =>
                            ⇑(__68141 :
                              ((ssing_6‹U›) int ((height_34) t_68138))) ⇒
                              ((tree_p_68136) t_68138)
                          | Size_19 =>
                            ⇑(__68142 :
                              ((ssing_6‹U›) int ((size_35) t_68138))) ⇒
                              ((tree_p_68136) t_68138)
                          | (Find_20 k_68143) =>
                            ⇑(__68144 :
                              ((ssing_6‹U›)
                                bool_4 ((find_36) k_68143 t_68138))) ⇒
                              ((tree_p_68136) t_68138))))
                      Leaf_15)
                | (Find_20 k_68145) =>
                  ⇑(__68146 :
                    ((ssing_6‹U›) bool_4 ((find_36) k_68145 Leaf_15))) ⇒
                    (((fun tree_p_68147 : tree_11 -> proto
                      | t_68149 =>
                        ⇓(o_68150 : opr_12) ⇒
                          (match o_68150 in opr_12 -o proto with
                          | Free_17 => •
                          | Height_18 =>
                            ⇑(__68152 :
                              ((ssing_6‹U›) int ((height_34) t_68149))) ⇒
                              ((tree_p_68147) t_68149)
                          | Size_19 =>
                            ⇑(__68153 :
                              ((ssing_6‹U›) int ((size_35) t_68149))) ⇒
                              ((tree_p_68147) t_68149)
                          | (Find_20 k_68154) =>
                            ⇑(__68155 :
                              ((ssing_6‹U›)
                                bool_4 ((find_36) k_68154 t_68149))) ⇒
                              ((tree_p_68147) t_68149))))
                      Leaf_15))⟩)) -o
         IO base_3‹U›
     with
    | (ex1_14 m_68156 n_68157) =>
      (match m_68156, n_68157 in
         ∀ (o0_68158 : opr_12) -o
           ch⟨(match o0_68158 in opr_12 -o proto with
                | Free_17 => •
                | Height_18 =>
                  ⇑(__68161 : ((ssing_6‹U›) int 0)) ⇒
                    ((tree_p_37) Leaf_15)
                | Size_19 =>
                  ⇑(__68162 : ((ssing_6‹U›) int 0)) ⇒
                    ((tree_p_37) Leaf_15)
                | (Find_20 k_68163) =>
                  ⇑(__68164 : ((ssing_6‹U›) bool_4 false_5)) ⇒
                    ((tree_p_37) Leaf_15))⟩ -o
             IO base_3‹U›
       with
      | Free_17, __68165 => close __68165
      | Height_18, __68166 =>
        let* c_68167 := ((send __68166) (just_2‹U,U› int 0)) in
        ((leaf_worker_68116) c_68167)
      | Size_19, __68168 =>
        let* c_68169 := ((send __68168) (just_2‹U,U› int 0)) in
        ((leaf_worker_68116) c_68169)
      | (Find_20 k_68170), __68171 =>
        let* c_68172 := ((send __68171) (just_2‹U,U› bool_4 false_5)) in
        ((leaf_worker_68116) c_68172))))

#[program]
def node_worker_42‹› :
  ∀ (x_68173 : int) ->
    ∀ {l_68174 : tree_11} ->
      ∀ {r_68175 : tree_11} ->
        ((ctree_hc_39) l_68174) -o
          ((ctree_hc_39) r_68175) -o
            ((ctree_ch_38) (Node_16‹› x_68173 l_68174 r_68175)) -o
              IO unit_9
:=
  (fun node_worker_68179 :
    ∀ (x_68180 : int) ->
      ∀ {l_68181 : tree_11} ->
        ∀ {r_68182 : tree_11} ->
          ((ctree_hc_39) l_68181) -o
            ((ctree_hc_39) r_68182) -o
              ((ctree_ch_38) (Node_16‹› x_68180 l_68181 r_68182)) -o
                IO unit_9
  | x_68186, l_68187, r_68188 =>
    (fun _68189 :
      ((ctree_hc_39) l_68187) -o
        ((ctree_hc_39) r_68188) -o
          ((ctree_ch_38) (Node_16‹› x_68186 l_68187 r_68188)) -o
            IO unit_9
    | __68193, __68194, __68195 =>
      let* _68196 := recv __68195 in
      (match _68196 in
         (exists1_10‹L,L›
           opr_12
           (fun _68198 : opr_12 -> L
           | o_68200 =>
             ch⟨(match o_68200 in opr_12 -o proto with
                  | Free_17 => •
                  | Height_18 =>
                    ⇑(__68202 :
                      ((ssing_6‹U›)
                        int
                        ((height_34) (Node_16‹› x_68186 l_68187 r_68188)))) ⇒
                      (((fun tree_p_68203 : tree_11 -> proto
                        | t_68205 =>
                          ⇓(o_68206 : opr_12) ⇒
                            (match o_68206 in opr_12 -o proto with
                            | Free_17 => •
                            | Height_18 =>
                              ⇑(__68208 :
                                ((ssing_6‹U›) int ((height_34) t_68205))) ⇒
                                ((tree_p_68203) t_68205)
                            | Size_19 =>
                              ⇑(__68209 :
                                ((ssing_6‹U›) int ((size_35) t_68205))) ⇒
                                ((tree_p_68203) t_68205)
                            | (Find_20 k_68210) =>
                              ⇑(__68211 :
                                ((ssing_6‹U›)
                                  bool_4 ((find_36) k_68210 t_68205))) ⇒
                                ((tree_p_68203) t_68205))))
                        (Node_16‹› x_68186 l_68187 r_68188))
                  | Size_19 =>
                    ⇑(__68212 :
                      ((ssing_6‹U›)
                        int
                        ((size_35) (Node_16‹› x_68186 l_68187 r_68188)))) ⇒
                      (((fun tree_p_68213 : tree_11 -> proto
                        | t_68215 =>
                          ⇓(o_68216 : opr_12) ⇒
                            (match o_68216 in opr_12 -o proto with
                            | Free_17 => •
                            | Height_18 =>
                              ⇑(__68218 :
                                ((ssing_6‹U›) int ((height_34) t_68215))) ⇒
                                ((tree_p_68213) t_68215)
                            | Size_19 =>
                              ⇑(__68219 :
                                ((ssing_6‹U›) int ((size_35) t_68215))) ⇒
                                ((tree_p_68213) t_68215)
                            | (Find_20 k_68220) =>
                              ⇑(__68221 :
                                ((ssing_6‹U›)
                                  bool_4 ((find_36) k_68220 t_68215))) ⇒
                                ((tree_p_68213) t_68215))))
                        (Node_16‹› x_68186 l_68187 r_68188))
                  | (Find_20 k_68222) =>
                    ⇑(__68223 :
                      ((ssing_6‹U›)
                        bool_4
                        ((find_36)
                          k_68222 (Node_16‹› x_68186 l_68187 r_68188)))) ⇒
                      (((fun tree_p_68224 : tree_11 -> proto
                        | t_68226 =>
                          ⇓(o_68227 : opr_12) ⇒
                            (match o_68227 in opr_12 -o proto with
                            | Free_17 => •
                            | Height_18 =>
                              ⇑(__68229 :
                                ((ssing_6‹U›) int ((height_34) t_68226))) ⇒
                                ((tree_p_68224) t_68226)
                            | Size_19 =>
                              ⇑(__68230 :
                                ((ssing_6‹U›) int ((size_35) t_68226))) ⇒
                                ((tree_p_68224) t_68226)
                            | (Find_20 k_68231) =>
                              ⇑(__68232 :
                                ((ssing_6‹U›)
                                  bool_4 ((find_36) k_68231 t_68226))) ⇒
                                ((tree_p_68224) t_68226))))
                        (Node_16‹› x_68186 l_68187 r_68188)))⟩)) -o
           IO base_3‹U›
       with
      | (ex1_14 m_68233 n_68234) =>
        (match m_68233, n_68234 in
           ∀ (o0_68235 : opr_12) -o
             ch⟨(match o0_68235 in opr_12 -o proto with
                  | Free_17 => •
                  | Height_18 =>
                    ⇑(__68238 :
                      ((ssing_6‹U›)
                        int
                        ((height_34) (Node_16‹› x_68186 l_68187 r_68188)))) ⇒
                      ((tree_p_37) (Node_16‹› x_68186 l_68187 r_68188))
                  | Size_19 =>
                    ⇑(__68239 :
                      ((ssing_6‹U›)
                        int
                        ((size_35) (Node_16‹› x_68186 l_68187 r_68188)))) ⇒
                      ((tree_p_37) (Node_16‹› x_68186 l_68187 r_68188))
                  | (Find_20 k_68240) =>
                    ⇑(__68241 :
                      ((ssing_6‹U›)
                        bool_4
                        ((find_36)
                          k_68240 (Node_16‹› x_68186 l_68187 r_68188)))) ⇒
                      ((tree_p_37) (Node_16‹› x_68186 l_68187 r_68188)))⟩ -o
               IO base_3‹U›
         with
        | Free_17, __68242 =>
          let* l_ch_68243 := ((send __68193) Free_17) in
          let* r_ch_68244 := ((send __68194) Free_17) in
          let* __68245 := close l_ch_68243 in
          let* __68246 := close r_ch_68244 in close __68242
        | Height_18, __68247 =>
          let* l_ch_68248 := ((send __68193) Height_18) in
          let* r_ch_68249 := ((send __68194) Height_18) in
          let* _68250 := recv l_ch_68248 in
          (match _68250 in
             (exists1_10‹U,L›
               ((ssing_6‹U›) int ((height_34) l_68187))
               (fun _68252 :
                 ((ssing_6‹U›) int ((height_34) l_68187)) -> L
               | __68254 =>
                 hc⟨(((fun tree_p_68255 : tree_11 -> proto
                        | t_68257 =>
                          ⇓(o_68258 : opr_12) ⇒
                            (match o_68258 in opr_12 -o proto with
                            | Free_17 => •
                            | Height_18 =>
                              ⇑(__68260 :
                                ((ssing_6‹U›) int ((height_34) t_68257))) ⇒
                                ((tree_p_68255) t_68257)
                            | Size_19 =>
                              ⇑(__68261 :
                                ((ssing_6‹U›) int ((size_35) t_68257))) ⇒
                                ((tree_p_68255) t_68257)
                            | (Find_20 k_68262) =>
                              ⇑(__68263 :
                                ((ssing_6‹U›)
                                  bool_4 ((find_36) k_68262 t_68257))) ⇒
                                ((tree_p_68255) t_68257))))
                        l_68187)⟩)) -o
               IO unit_9
           with
          | (ex1_14 (just_2 m_68264) n_68265) =>
            let* _68266 := recv r_ch_68249 in
            (match _68266 in
               (exists1_10‹U,L›
                 ((ssing_6‹U›) int ((height_34) r_68188))
                 (fun _68268 :
                   ((ssing_6‹U›) int ((height_34) r_68188)) -> L
                 | __68270 =>
                   hc⟨(((fun tree_p_68271 : tree_11 -> proto
                          | t_68273 =>
                            ⇓(o_68274 : opr_12) ⇒
                              (match o_68274 in opr_12 -o proto with
                              | Free_17 => •
                              | Height_18 =>
                                ⇑(__68276 :
                                  ((ssing_6‹U›)
                                    int ((height_34) t_68273))) ⇒
                                  ((tree_p_68271) t_68273)
                              | Size_19 =>
                                ⇑(__68277 :
                                  ((ssing_6‹U›) int ((size_35) t_68273))) ⇒
                                  ((tree_p_68271) t_68273)
                              | (Find_20 k_68278) =>
                                ⇑(__68279 :
                                  ((ssing_6‹U›)
                                    bool_4 ((find_36) k_68278 t_68273))) ⇒
                                  ((tree_p_68271) t_68273))))
                          r_68188)⟩)) -o
                 IO unit_9
             with
            | (ex1_14 (just_2 m_68280) n_68281) =>
              (match (__lt__ m_68264 m_68280), __68247 in
                 ∀ (b0_68282 : bool_4) -o
                   ch⟨⇑(__68284 :
                          ((ssing_6‹U›)
                            int
                            (match b0_68282 in bool_4 -o int with
                            | true_4 => (__add__ m_68280 1)
                            | false_5 => (__add__ m_68264 1)))) ⇒
                          ((tree_p_37)
                            (Node_16‹› x_68186 l_68187 r_68188))⟩ -o
                     IO unit_9
               with
              | true_4, __68286 =>
                let* c_68287 :=
                  ((send __68286) (just_2‹U,U› int (__add__ m_68280 1)))
                in
                ((node_worker_68179)
                  x_68186 l_68187 r_68188 n_68265 n_68281 c_68287)
              | false_5, __68288 =>
                let* c_68289 :=
                  ((send __68288) (just_2‹U,U› int (__add__ m_68264 1)))
                in
                ((node_worker_68179)
                  x_68186 l_68187 r_68188 n_68265 n_68281 c_68289))))
        | Size_19, __68290 =>
          let* l_ch_68291 := ((send __68193) Size_19) in
          let* r_ch_68292 := ((send __68194) Size_19) in
          let* _68293 := recv l_ch_68291 in
          (match _68293 in
             (exists1_10‹U,L›
               ((ssing_6‹U›) int ((size_35) l_68187))
               (fun _68295 : ((ssing_6‹U›) int ((size_35) l_68187)) -> L
               | __68297 =>
                 hc⟨(((fun tree_p_68298 : tree_11 -> proto
                        | t_68300 =>
                          ⇓(o_68301 : opr_12) ⇒
                            (match o_68301 in opr_12 -o proto with
                            | Free_17 => •
                            | Height_18 =>
                              ⇑(__68303 :
                                ((ssing_6‹U›) int ((height_34) t_68300))) ⇒
                                ((tree_p_68298) t_68300)
                            | Size_19 =>
                              ⇑(__68304 :
                                ((ssing_6‹U›) int ((size_35) t_68300))) ⇒
                                ((tree_p_68298) t_68300)
                            | (Find_20 k_68305) =>
                              ⇑(__68306 :
                                ((ssing_6‹U›)
                                  bool_4 ((find_36) k_68305 t_68300))) ⇒
                                ((tree_p_68298) t_68300))))
                        l_68187)⟩)) -o
               IO unit_9
           with
          | (ex1_14 (just_2 m_68307) n_68308) =>
            let* _68309 := recv r_ch_68292 in
            (match _68309 in
               (exists1_10‹U,L›
                 ((ssing_6‹U›) int ((size_35) r_68188))
                 (fun _68311 :
                   ((ssing_6‹U›) int ((size_35) r_68188)) -> L
                 | __68313 =>
                   hc⟨(((fun tree_p_68314 : tree_11 -> proto
                          | t_68316 =>
                            ⇓(o_68317 : opr_12) ⇒
                              (match o_68317 in opr_12 -o proto with
                              | Free_17 => •
                              | Height_18 =>
                                ⇑(__68319 :
                                  ((ssing_6‹U›)
                                    int ((height_34) t_68316))) ⇒
                                  ((tree_p_68314) t_68316)
                              | Size_19 =>
                                ⇑(__68320 :
                                  ((ssing_6‹U›) int ((size_35) t_68316))) ⇒
                                  ((tree_p_68314) t_68316)
                              | (Find_20 k_68321) =>
                                ⇑(__68322 :
                                  ((ssing_6‹U›)
                                    bool_4 ((find_36) k_68321 t_68316))) ⇒
                                  ((tree_p_68314) t_68316))))
                          r_68188)⟩)) -o
                 IO unit_9
             with
            | (ex1_14 (just_2 m_68323) n_68324) =>
              let* c_68325 :=
                ((send __68290)
                  (just_2‹U,U› int (__add__ (__add__ 1 m_68307) m_68323)))
              in
              ((node_worker_68179)
                x_68186 l_68187 r_68188 n_68308 n_68324 c_68325)))
        | (Find_20 k_68326), __68327 =>
          (match (__eq__ x_68186 k_68326), __68327 in
             ∀ (b0_68328 : bool_4) -o
               ch⟨⇑(__68330 :
                      ((ssing_6‹U›)
                        bool_4
                        (match b0_68328 in bool_4 -o bool_4 with
                        | true_4 => true_4
                        | false_5 =>
                          ((or_13)
                            ((find_36) k_68326 l_68187)
                            ((find_36) k_68326 r_68188))))) ⇒
                      ((tree_p_37) (Node_16‹› x_68186 l_68187 r_68188))⟩ -o
                 IO base_3‹U›
           with
          | true_4, __68332 =>
            let* c_68333 := ((send __68332) (just_2‹U,U› bool_4 true_4))
            in
            ((node_worker_68179)
              x_68186 l_68187 r_68188 __68193 __68194 c_68333)
          | false_5, __68334 =>
            let* l_ch_68335 := ((send __68193) (Find_20‹› k_68326)) in
            let* r_ch_68336 := ((send __68194) (Find_20‹› k_68326)) in
            let* _68337 := recv l_ch_68335 in
            (match _68337 in
               (exists1_10‹U,L›
                 ((ssing_6‹U›) bool_4 ((find_36) k_68326 l_68187))
                 (fun _68339 :
                   ((ssing_6‹U›) bool_4 ((find_36) k_68326 l_68187)) -> L
                 | __68341 =>
                   hc⟨(((fun tree_p_68342 : tree_11 -> proto
                          | t_68344 =>
                            ⇓(o_68345 : opr_12) ⇒
                              (match o_68345 in opr_12 -o proto with
                              | Free_17 => •
                              | Height_18 =>
                                ⇑(__68347 :
                                  ((ssing_6‹U›)
                                    int ((height_34) t_68344))) ⇒
                                  ((tree_p_68342) t_68344)
                              | Size_19 =>
                                ⇑(__68348 :
                                  ((ssing_6‹U›) int ((size_35) t_68344))) ⇒
                                  ((tree_p_68342) t_68344)
                              | (Find_20 k_68349) =>
                                ⇑(__68350 :
                                  ((ssing_6‹U›)
                                    bool_4 ((find_36) k_68349 t_68344))) ⇒
                                  ((tree_p_68342) t_68344))))
                          l_68187)⟩)) -o
                 IO unit_9
             with
            | (ex1_14 (just_2 m_68351) n_68352) =>
              let* _68353 := recv r_ch_68336 in
              (match _68353 in
                 (exists1_10‹U,L›
                   ((ssing_6‹U›) bool_4 ((find_36) k_68326 r_68188))
                   (fun _68355 :
                     ((ssing_6‹U›) bool_4 ((find_36) k_68326 r_68188)) ->
                       L
                   | __68357 =>
                     hc⟨(((fun tree_p_68358 : tree_11 -> proto
                            | t_68360 =>
                              ⇓(o_68361 : opr_12) ⇒
                                (match o_68361 in opr_12 -o proto with
                                | Free_17 => •
                                | Height_18 =>
                                  ⇑(__68363 :
                                    ((ssing_6‹U›)
                                      int ((height_34) t_68360))) ⇒
                                    ((tree_p_68358) t_68360)
                                | Size_19 =>
                                  ⇑(__68364 :
                                    ((ssing_6‹U›)
                                      int ((size_35) t_68360))) ⇒
                                    ((tree_p_68358) t_68360)
                                | (Find_20 k_68365) =>
                                  ⇑(__68366 :
                                    ((ssing_6‹U›)
                                      bool_4 ((find_36) k_68365 t_68360))) ⇒
                                    ((tree_p_68358) t_68360))))
                            r_68188)⟩)) -o
                   IO unit_9
               with
              | (ex1_14 (just_2 m_68367) n_68368) =>
                let* c_68369 :=
                  ((send __68334)
                    (just_2‹U,U› bool_4 ((or_13) m_68351 m_68367)))
                in
                ((node_worker_68179)
                  x_68186 l_68187 r_68188 n_68352 n_68368 c_68369))))))))

#[program]
def cleaf_43‹› : unit_9 -> ((ctree_40) Leaf_15) :=
  (fun cleaf_68371 : unit_9 -> ((ctree_40) Leaf_15)
  | __68373 =>
    fork
      (fun _68374 : ((ctree_ch_38) Leaf_15) -o IO unit_9
      | _68376 => ((leaf_worker_41) _68376)))

#[program]
def cnode_44‹› :
  ∀ (x_68377 : int) ->
    ∀ {l_68378 : tree_11} ->
      ∀ {r_68379 : tree_11} ->
        ((ctree_40) l_68378) -o
          ((ctree_40) r_68379) -o
            ((ctree_40) (Node_16‹› x_68377 l_68378 r_68379))
:=
  (fun cnode_68382 :
    ∀ (x_68383 : int) ->
      ∀ {l_68384 : tree_11} ->
        ∀ {r_68385 : tree_11} ->
          ((ctree_40) l_68384) -o
            ((ctree_40) r_68385) -o
              ((ctree_40) (Node_16‹› x_68383 l_68384 r_68385))
  | x_68388, l_68389, r_68390, __68391, __68392 =>
    let* l_ch_68393 := __68391 in
    let* r_ch_68394 := __68392 in
    fork
      (fun _68395 :
        ((ctree_ch_38) (Node_16‹› x_68388 l_68389 r_68390)) -o IO unit_9
      | _68397 =>
        ((node_worker_42)
          x_68388 l_68389 r_68390 l_ch_68393 r_ch_68394 _68397)))

#[program]
def ctree_of_tree_45‹› : ∀ (x_68398 : tree_11) -> ((ctree_40) x_68398)
:=
  (fun ctree_of_tree_68399 : ∀ (x_68400 : tree_11) -> ((ctree_40) x_68400)
  | Leaf_15 => ((cleaf_43) tt_3‹U›)
  | (Node_16 __68401 l_68402 r_68403) =>
    ((cnode_44)
      __68401 l_68402 r_68403 ((ctree_of_tree_68399) l_68402)
      ((ctree_of_tree_68399) r_68403)))

#[program]
def cfree_46‹› :
  ∀ {t_68404 : tree_11} -> ((ctree_40) t_68404) -> IO unit_9
:=
  (fun cfree_68406 :
    ∀ {t_68407 : tree_11} -> ((ctree_40) t_68407) -> IO unit_9
  | t_68409, ct_68410 =>
    let* c_68411 := ct_68410 in
    let* c_68412 := ((send c_68411) Free_17) in close c_68412)

#[program]
def cheight_47‹› :
  ∀ {t_68413 : tree_11} ->
    ((ctree_40) t_68413) ->
      IO ((tensor_26‹U,L›)
           ((ssing_6‹U›) int ((height_34) t_68413)) ((ctree_40) t_68413))
:=
  (fun cheight_68415 :
    ∀ {t_68416 : tree_11} ->
      ((ctree_40) t_68416) ->
        IO ((tensor_26‹U,L›)
             ((ssing_6‹U›) int ((height_34) t_68416))
             ((ctree_40) t_68416))
  | t_68418, ct_68419 =>
    let* c_68420 := ct_68419 in
    let* c_68421 := ((send c_68420) Height_18) in
    let* _68422 := recv c_68421 in
    (match _68422 in
       (exists1_10‹U,L›
         ((ssing_6‹U›) int ((height_34) t_68418))
         (fun _68424 : ((ssing_6‹U›) int ((height_34) t_68418)) -> L
         | __68426 =>
           hc⟨(((fun tree_p_68427 : tree_11 -> proto
                  | t_68429 =>
                    ⇓(o_68430 : opr_12) ⇒
                      (match o_68430 in opr_12 -o proto with
                      | Free_17 => •
                      | Height_18 =>
                        ⇑(__68432 :
                          ((ssing_6‹U›) int ((height_34) t_68429))) ⇒
                          ((tree_p_68427) t_68429)
                      | Size_19 =>
                        ⇑(__68433 :
                          ((ssing_6‹U›) int ((size_35) t_68429))) ⇒
                          ((tree_p_68427) t_68429)
                      | (Find_20 k_68434) =>
                        ⇑(__68435 :
                          ((ssing_6‹U›)
                            bool_4 ((find_36) k_68434 t_68429))) ⇒
                          ((tree_p_68427) t_68429))))
                  t_68418)⟩)) -o
         IO (exists1_10‹U,L›
              ((ssing_6‹U›) int ((height_34) t_68418))
              (fun _68436 : ((ssing_6‹U›) int ((height_34) t_68418)) -> L
              | __68438 => ((ctree_40) t_68418)))
     with
    | (ex1_14 m_68439 n_68440) =>
      return (ex1_14‹U,L›
               ((ssing_6‹U›) int ((height_34) t_68418))
               (fun _68441 :
                 ((ssing_6‹U›) int ((height_34) t_68418)) -> L
               | __68443 => ((ctree_40) t_68418)) m_68439 return n_68440)))

#[program]
def csize_48‹› :
  ∀ {t_68444 : tree_11} ->
    ((ctree_40) t_68444) ->
      IO ((tensor_26‹U,L›)
           ((ssing_6‹U›) int ((size_35) t_68444)) ((ctree_40) t_68444))
:=
  (fun csize_68446 :
    ∀ {t_68447 : tree_11} ->
      ((ctree_40) t_68447) ->
        IO ((tensor_26‹U,L›)
             ((ssing_6‹U›) int ((size_35) t_68447)) ((ctree_40) t_68447))
  | t_68449, ct_68450 =>
    let* c_68451 := ct_68450 in
    let* c_68452 := ((send c_68451) Size_19) in
    let* _68453 := recv c_68452 in
    (match _68453 in
       (exists1_10‹U,L›
         ((ssing_6‹U›) int ((size_35) t_68449))
         (fun _68455 : ((ssing_6‹U›) int ((size_35) t_68449)) -> L
         | __68457 =>
           hc⟨(((fun tree_p_68458 : tree_11 -> proto
                  | t_68460 =>
                    ⇓(o_68461 : opr_12) ⇒
                      (match o_68461 in opr_12 -o proto with
                      | Free_17 => •
                      | Height_18 =>
                        ⇑(__68463 :
                          ((ssing_6‹U›) int ((height_34) t_68460))) ⇒
                          ((tree_p_68458) t_68460)
                      | Size_19 =>
                        ⇑(__68464 :
                          ((ssing_6‹U›) int ((size_35) t_68460))) ⇒
                          ((tree_p_68458) t_68460)
                      | (Find_20 k_68465) =>
                        ⇑(__68466 :
                          ((ssing_6‹U›)
                            bool_4 ((find_36) k_68465 t_68460))) ⇒
                          ((tree_p_68458) t_68460))))
                  t_68449)⟩)) -o
         IO (exists1_10‹U,L›
              ((ssing_6‹U›) int ((size_35) t_68449))
              (fun _68467 : ((ssing_6‹U›) int ((size_35) t_68449)) -> L
              | __68469 => ((ctree_40) t_68449)))
     with
    | (ex1_14 m_68470 n_68471) =>
      return (ex1_14‹U,L›
               ((ssing_6‹U›) int ((size_35) t_68449))
               (fun _68472 : ((ssing_6‹U›) int ((size_35) t_68449)) -> L
               | __68474 => ((ctree_40) t_68449)) m_68470 return n_68471)))

#[program]
def cfind_49‹› :
  ∀ (k_68475 : int) ->
    ∀ {t_68476 : tree_11} ->
      ((ctree_40) t_68476) ->
        IO ((tensor_26‹U,L›)
             ((ssing_6‹U›) bool_4 ((find_36) k_68475 t_68476))
             ((ctree_40) t_68476))
:=
  (fun cfind_68478 :
    ∀ (k_68479 : int) ->
      ∀ {t_68480 : tree_11} ->
        ((ctree_40) t_68480) ->
          IO ((tensor_26‹U,L›)
               ((ssing_6‹U›) bool_4 ((find_36) k_68479 t_68480))
               ((ctree_40) t_68480))
  | k_68482, t_68483, ct_68484 =>
    let* c_68485 := ct_68484 in
    let* c_68486 := ((send c_68485) (Find_20‹› k_68482)) in
    let* _68487 := recv c_68486 in
    (match _68487 in
       (exists1_10‹U,L›
         ((ssing_6‹U›) bool_4 ((find_36) k_68482 t_68483))
         (fun _68489 :
           ((ssing_6‹U›) bool_4 ((find_36) k_68482 t_68483)) -> L
         | __68491 =>
           hc⟨(((fun tree_p_68492 : tree_11 -> proto
                  | t_68494 =>
                    ⇓(o_68495 : opr_12) ⇒
                      (match o_68495 in opr_12 -o proto with
                      | Free_17 => •
                      | Height_18 =>
                        ⇑(__68497 :
                          ((ssing_6‹U›) int ((height_34) t_68494))) ⇒
                          ((tree_p_68492) t_68494)
                      | Size_19 =>
                        ⇑(__68498 :
                          ((ssing_6‹U›) int ((size_35) t_68494))) ⇒
                          ((tree_p_68492) t_68494)
                      | (Find_20 k_68499) =>
                        ⇑(__68500 :
                          ((ssing_6‹U›)
                            bool_4 ((find_36) k_68499 t_68494))) ⇒
                          ((tree_p_68492) t_68494))))
                  t_68483)⟩)) -o
         IO (exists1_10‹U,L›
              ((ssing_6‹U›) bool_4 ((find_36) k_68482 t_68483))
              (fun _68501 :
                ((ssing_6‹U›) bool_4 ((find_36) k_68482 t_68483)) -> L
              | __68503 => ((ctree_40) t_68483)))
     with
    | (ex1_14 m_68504 n_68505) =>
      return (ex1_14‹U,L›
               ((ssing_6‹U›) bool_4 ((find_36) k_68482 t_68483))
               (fun _68506 :
                 ((ssing_6‹U›) bool_4 ((find_36) k_68482 t_68483)) -> L
               | __68508 => ((ctree_40) t_68483)) m_68504 return n_68505)))

#[program]
def mytree1_50‹› :
  ∀ (x_68509 : int) -> ((ctree_40) (Node_16‹› x_68509 Leaf_15 Leaf_15))
:=
  (fun mytree1_68510 :
    ∀ (x_68511 : int) ->
      ((ctree_40) (Node_16‹› x_68511 Leaf_15 Leaf_15))
  | x_68512 =>
    ((cnode_44)
      x_68512 Leaf_15 Leaf_15 ((cleaf_43) tt_3‹U›)
      ((cleaf_43) tt_3‹U›)))

#[program]
def mytree2_51‹› :
  ∀ (x_68513 : int) ->
    ((ctree_40)
      (Node_16‹›
        x_68513 (Node_16‹› 1 Leaf_15 Leaf_15)
        (Node_16‹› 2 Leaf_15 Leaf_15)))
:=
  (fun mytree2_68514 :
    ∀ (x_68515 : int) ->
      ((ctree_40)
        (Node_16‹›
          x_68515 (Node_16‹› 1 Leaf_15 Leaf_15)
          (Node_16‹› 2 Leaf_15 Leaf_15)))
  | x_68516 =>
    ((cnode_44)
      x_68516 (Node_16‹› 1 Leaf_15 Leaf_15)
      (Node_16‹› 2 Leaf_15 Leaf_15) ((mytree1_50) 1) ((mytree1_50) 2)))

#[program]
def mytree3_52‹› :
  ∀ (x_68517 : int) ->
    ((ctree_40)
      (Node_16‹›
        x_68517
        (Node_16‹›
          3 (Node_16‹› 1 Leaf_15 Leaf_15)
          (Node_16‹› 2 Leaf_15 Leaf_15))
        (Node_16‹›
          4 (Node_16‹› 1 Leaf_15 Leaf_15)
          (Node_16‹› 2 Leaf_15 Leaf_15))))
:=
  (fun mytree3_68518 :
    ∀ (x_68519 : int) ->
      ((ctree_40)
        (Node_16‹›
          x_68519
          (Node_16‹›
            3 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15))
          (Node_16‹›
            4 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15))))
  | x_68520 =>
    ((cnode_44)
      x_68520
      (Node_16‹›
        3 (Node_16‹› 1 Leaf_15 Leaf_15) (Node_16‹› 2 Leaf_15 Leaf_15))
      (Node_16‹›
        4 (Node_16‹› 1 Leaf_15 Leaf_15) (Node_16‹› 2 Leaf_15 Leaf_15))
      ((mytree2_51) 3) ((mytree2_51) 4)))

#[program]
def mytree4_53‹› :
  ∀ (x_68521 : int) ->
    ((ctree_40)
      (Node_16‹›
        x_68521
        (Node_16‹›
          8
          (Node_16‹›
            3 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15))
          (Node_16‹›
            4 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15)))
        (Node_16‹›
          7
          (Node_16‹›
            3 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15))
          (Node_16‹›
            4 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15)))))
:=
  (fun mytree4_68522 :
    ∀ (x_68523 : int) ->
      ((ctree_40)
        (Node_16‹›
          x_68523
          (Node_16‹›
            8
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15)))
          (Node_16‹›
            7
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15)))))
  | x_68524 =>
    ((cnode_44)
      x_68524
      (Node_16‹›
        8
        (Node_16‹›
          3 (Node_16‹› 1 Leaf_15 Leaf_15)
          (Node_16‹› 2 Leaf_15 Leaf_15))
        (Node_16‹›
          4 (Node_16‹› 1 Leaf_15 Leaf_15)
          (Node_16‹› 2 Leaf_15 Leaf_15)))
      (Node_16‹›
        7
        (Node_16‹›
          3 (Node_16‹› 1 Leaf_15 Leaf_15)
          (Node_16‹› 2 Leaf_15 Leaf_15))
        (Node_16‹›
          4 (Node_16‹› 1 Leaf_15 Leaf_15)
          (Node_16‹› 2 Leaf_15 Leaf_15)))
      ((mytree3_52) 8) ((mytree3_52) 7)))

#[program]
def mytree5_54‹› :
  ∀ (x_68525 : int) ->
    ((ctree_40)
      (Node_16‹›
        x_68525
        (Node_16‹›
          9
          (Node_16‹›
            8
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15)))
          (Node_16‹›
            7
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))))
        (Node_16‹›
          10
          (Node_16‹›
            8
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15)))
          (Node_16‹›
            7
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))))))
:=
  (fun mytree5_68526 :
    ∀ (x_68527 : int) ->
      ((ctree_40)
        (Node_16‹›
          x_68527
          (Node_16‹›
            9
            (Node_16‹›
              8
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))
            (Node_16‹›
              7
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))))
          (Node_16‹›
            10
            (Node_16‹›
              8
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))
            (Node_16‹›
              7
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))))))
  | x_68528 =>
    ((cnode_44)
      x_68528
      (Node_16‹›
        9
        (Node_16‹›
          8
          (Node_16‹›
            3 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15))
          (Node_16‹›
            4 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15)))
        (Node_16‹›
          7
          (Node_16‹›
            3 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15))
          (Node_16‹›
            4 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15))))
      (Node_16‹›
        10
        (Node_16‹›
          8
          (Node_16‹›
            3 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15))
          (Node_16‹›
            4 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15)))
        (Node_16‹›
          7
          (Node_16‹›
            3 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15))
          (Node_16‹›
            4 (Node_16‹› 1 Leaf_15 Leaf_15)
            (Node_16‹› 2 Leaf_15 Leaf_15))))
      ((mytree4_53) 9) ((mytree4_53) 10)))

#[program]
def mytree6_55‹› :
  ∀ (x_68529 : int) ->
    ((ctree_40)
      (Node_16‹›
        x_68529
        (Node_16‹›
          11
          (Node_16‹›
            9
            (Node_16‹›
              8
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))
            (Node_16‹›
              7
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))))
          (Node_16‹›
            10
            (Node_16‹›
              8
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))
            (Node_16‹›
              7
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))))
        (Node_16‹›
          12
          (Node_16‹›
            9
            (Node_16‹›
              8
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))
            (Node_16‹›
              7
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))))
          (Node_16‹›
            10
            (Node_16‹›
              8
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))
            (Node_16‹›
              7
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))))))
:=
  (fun mytree6_68530 :
    ∀ (x_68531 : int) ->
      ((ctree_40)
        (Node_16‹›
          x_68531
          (Node_16‹›
            11
            (Node_16‹›
              9
              (Node_16‹›
                8
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15)))
              (Node_16‹›
                7
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))))
            (Node_16‹›
              10
              (Node_16‹›
                8
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15)))
              (Node_16‹›
                7
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15)))))
          (Node_16‹›
            12
            (Node_16‹›
              9
              (Node_16‹›
                8
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15)))
              (Node_16‹›
                7
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))))
            (Node_16‹›
              10
              (Node_16‹›
                8
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15)))
              (Node_16‹›
                7
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15)))))))
  | x_68532 =>
    ((cnode_44)
      x_68532
      (Node_16‹›
        11
        (Node_16‹›
          9
          (Node_16‹›
            8
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15)))
          (Node_16‹›
            7
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))))
        (Node_16‹›
          10
          (Node_16‹›
            8
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15)))
          (Node_16‹›
            7
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15)))))
      (Node_16‹›
        12
        (Node_16‹›
          9
          (Node_16‹›
            8
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15)))
          (Node_16‹›
            7
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))))
        (Node_16‹›
          10
          (Node_16‹›
            8
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15)))
          (Node_16‹›
            7
            (Node_16‹›
              3 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15))
            (Node_16‹›
              4 (Node_16‹› 1 Leaf_15 Leaf_15)
              (Node_16‹› 2 Leaf_15 Leaf_15)))))
      ((mytree5_54) 11) ((mytree5_54) 12)))

#[program]
def main_56‹› : IO unit_9 :=
  let ct_68533 := ((mytree6_55) 100) in
  let* _68534 :=
    ((cheight_47)
      (Node_16‹›
        100
        (Node_16‹›
          11
          (Node_16‹›
            9
            (Node_16‹›
              8
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))
            (Node_16‹›
              7
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))))
          (Node_16‹›
            10
            (Node_16‹›
              8
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))
            (Node_16‹›
              7
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))))
        (Node_16‹›
          12
          (Node_16‹›
            9
            (Node_16‹›
              8
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))
            (Node_16‹›
              7
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))))
          (Node_16‹›
            10
            (Node_16‹›
              8
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15)))
            (Node_16‹›
              7
              (Node_16‹›
                3 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))
              (Node_16‹›
                4 (Node_16‹› 1 Leaf_15 Leaf_15)
                (Node_16‹› 2 Leaf_15 Leaf_15))))))
      ct_68533)
  in
  (match _68534 in
     ((tensor_26‹U,L›)
       ((ssing_6‹U›)
         int
         ((height_34)
           (Node_16‹›
             100
             (Node_16‹›
               11
               (Node_16‹›
                 9
                 (Node_16‹›
                   8
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15)))
                 (Node_16‹›
                   7
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))))
               (Node_16‹›
                 10
                 (Node_16‹›
                   8
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15)))
                 (Node_16‹›
                   7
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15)))))
             (Node_16‹›
               12
               (Node_16‹›
                 9
                 (Node_16‹›
                   8
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15)))
                 (Node_16‹›
                   7
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))))
               (Node_16‹›
                 10
                 (Node_16‹›
                   8
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15)))
                 (Node_16‹›
                   7
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))))))))
       ((ctree_40)
         (Node_16‹›
           100
           (Node_16‹›
             11
             (Node_16‹›
               9
               (Node_16‹›
                 8
                 (Node_16‹›
                   3 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15))
                 (Node_16‹›
                   4 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15)))
               (Node_16‹›
                 7
                 (Node_16‹›
                   3 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15))
                 (Node_16‹›
                   4 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15))))
             (Node_16‹›
               10
               (Node_16‹›
                 8
                 (Node_16‹›
                   3 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15))
                 (Node_16‹›
                   4 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15)))
               (Node_16‹›
                 7
                 (Node_16‹›
                   3 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15))
                 (Node_16‹›
                   4 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15)))))
           (Node_16‹›
             12
             (Node_16‹›
               9
               (Node_16‹›
                 8
                 (Node_16‹›
                   3 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15))
                 (Node_16‹›
                   4 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15)))
               (Node_16‹›
                 7
                 (Node_16‹›
                   3 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15))
                 (Node_16‹›
                   4 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15))))
             (Node_16‹›
               10
               (Node_16‹›
                 8
                 (Node_16‹›
                   3 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15))
                 (Node_16‹›
                   4 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15)))
               (Node_16‹›
                 7
                 (Node_16‹›
                   3 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15))
                 (Node_16‹›
                   4 (Node_16‹› 1 Leaf_15 Leaf_15)
                   (Node_16‹› 2 Leaf_15 Leaf_15)))))))) -o
       IO base_3‹U›
   with
  | (ex1_14 (just_2 m_68536) n_68537) =>
    let* _68538 :=
      ((csize_48)
        (Node_16‹›
          100
          (Node_16‹›
            11
            (Node_16‹›
              9
              (Node_16‹›
                8
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15)))
              (Node_16‹›
                7
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))))
            (Node_16‹›
              10
              (Node_16‹›
                8
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15)))
              (Node_16‹›
                7
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15)))))
          (Node_16‹›
            12
            (Node_16‹›
              9
              (Node_16‹›
                8
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15)))
              (Node_16‹›
                7
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))))
            (Node_16‹›
              10
              (Node_16‹›
                8
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15)))
              (Node_16‹›
                7
                (Node_16‹›
                  3 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))
                (Node_16‹›
                  4 (Node_16‹› 1 Leaf_15 Leaf_15)
                  (Node_16‹› 2 Leaf_15 Leaf_15))))))
        n_68537)
    in
    (match _68538 in
       ((tensor_26‹U,L›)
         ((ssing_6‹U›)
           int
           ((size_35)
             (Node_16‹›
               100
               (Node_16‹›
                 11
                 (Node_16‹›
                   9
                   (Node_16‹›
                     8
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15)))
                   (Node_16‹›
                     7
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))))
                 (Node_16‹›
                   10
                   (Node_16‹›
                     8
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15)))
                   (Node_16‹›
                     7
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15)))))
               (Node_16‹›
                 12
                 (Node_16‹›
                   9
                   (Node_16‹›
                     8
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15)))
                   (Node_16‹›
                     7
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))))
                 (Node_16‹›
                   10
                   (Node_16‹›
                     8
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15)))
                   (Node_16‹›
                     7
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))))))))
         ((ctree_40)
           (Node_16‹›
             100
             (Node_16‹›
               11
               (Node_16‹›
                 9
                 (Node_16‹›
                   8
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15)))
                 (Node_16‹›
                   7
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))))
               (Node_16‹›
                 10
                 (Node_16‹›
                   8
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15)))
                 (Node_16‹›
                   7
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15)))))
             (Node_16‹›
               12
               (Node_16‹›
                 9
                 (Node_16‹›
                   8
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15)))
                 (Node_16‹›
                   7
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))))
               (Node_16‹›
                 10
                 (Node_16‹›
                   8
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15)))
                 (Node_16‹›
                   7
                   (Node_16‹›
                     3 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15))
                   (Node_16‹›
                     4 (Node_16‹› 1 Leaf_15 Leaf_15)
                     (Node_16‹› 2 Leaf_15 Leaf_15)))))))) -o
         IO base_3‹U›
     with
    | (ex1_14 (just_2 m_68540) n_68541) =>
      let* _68542 :=
        ((cfind_49)
          1
          (Node_16‹›
            100
            (Node_16‹›
              11
              (Node_16‹›
                9
                (Node_16‹›
                  8
                  (Node_16‹›
                    3 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15))
                  (Node_16‹›
                    4 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15)))
                (Node_16‹›
                  7
                  (Node_16‹›
                    3 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15))
                  (Node_16‹›
                    4 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15))))
              (Node_16‹›
                10
                (Node_16‹›
                  8
                  (Node_16‹›
                    3 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15))
                  (Node_16‹›
                    4 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15)))
                (Node_16‹›
                  7
                  (Node_16‹›
                    3 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15))
                  (Node_16‹›
                    4 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15)))))
            (Node_16‹›
              12
              (Node_16‹›
                9
                (Node_16‹›
                  8
                  (Node_16‹›
                    3 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15))
                  (Node_16‹›
                    4 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15)))
                (Node_16‹›
                  7
                  (Node_16‹›
                    3 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15))
                  (Node_16‹›
                    4 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15))))
              (Node_16‹›
                10
                (Node_16‹›
                  8
                  (Node_16‹›
                    3 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15))
                  (Node_16‹›
                    4 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15)))
                (Node_16‹›
                  7
                  (Node_16‹›
                    3 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15))
                  (Node_16‹›
                    4 (Node_16‹› 1 Leaf_15 Leaf_15)
                    (Node_16‹› 2 Leaf_15 Leaf_15))))))
          n_68541)
      in
      (match _68542 in
         ((tensor_26‹U,L›)
           ((ssing_6‹U›)
             bool_4
             ((find_36)
               1
               (Node_16‹›
                 100
                 (Node_16‹›
                   11
                   (Node_16‹›
                     9
                     (Node_16‹›
                       8
                       (Node_16‹›
                         3 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15))
                       (Node_16‹›
                         4 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15)))
                     (Node_16‹›
                       7
                       (Node_16‹›
                         3 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15))
                       (Node_16‹›
                         4 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15))))
                   (Node_16‹›
                     10
                     (Node_16‹›
                       8
                       (Node_16‹›
                         3 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15))
                       (Node_16‹›
                         4 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15)))
                     (Node_16‹›
                       7
                       (Node_16‹›
                         3 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15))
                       (Node_16‹›
                         4 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15)))))
                 (Node_16‹›
                   12
                   (Node_16‹›
                     9
                     (Node_16‹›
                       8
                       (Node_16‹›
                         3 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15))
                       (Node_16‹›
                         4 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15)))
                     (Node_16‹›
                       7
                       (Node_16‹›
                         3 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15))
                       (Node_16‹›
                         4 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15))))
                   (Node_16‹›
                     10
                     (Node_16‹›
                       8
                       (Node_16‹›
                         3 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15))
                       (Node_16‹›
                         4 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15)))
                     (Node_16‹›
                       7
                       (Node_16‹›
                         3 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15))
                       (Node_16‹›
                         4 (Node_16‹› 1 Leaf_15 Leaf_15)
                         (Node_16‹› 2 Leaf_15 Leaf_15))))))))
           ((ctree_40)
             (Node_16‹›
               100
               (Node_16‹›
                 11
                 (Node_16‹›
                   9
                   (Node_16‹›
                     8
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15)))
                   (Node_16‹›
                     7
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))))
                 (Node_16‹›
                   10
                   (Node_16‹›
                     8
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15)))
                   (Node_16‹›
                     7
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15)))))
               (Node_16‹›
                 12
                 (Node_16‹›
                   9
                   (Node_16‹›
                     8
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15)))
                   (Node_16‹›
                     7
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))))
                 (Node_16‹›
                   10
                   (Node_16‹›
                     8
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15)))
                   (Node_16‹›
                     7
                     (Node_16‹›
                       3 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15))
                     (Node_16‹›
                       4 (Node_16‹› 1 Leaf_15 Leaf_15)
                       (Node_16‹› 2 Leaf_15 Leaf_15)))))))) -o
           IO base_3‹U›
       with
      | (ex1_14 (just_2 m_68544) n_68545) =>
        let* _68546 :=
          ((cfree_46)
            (Node_16‹›
              100
              (Node_16‹›
                11
                (Node_16‹›
                  9
                  (Node_16‹›
                    8
                    (Node_16‹›
                      3 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15))
                    (Node_16‹›
                      4 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15)))
                  (Node_16‹›
                    7
                    (Node_16‹›
                      3 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15))
                    (Node_16‹›
                      4 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15))))
                (Node_16‹›
                  10
                  (Node_16‹›
                    8
                    (Node_16‹›
                      3 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15))
                    (Node_16‹›
                      4 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15)))
                  (Node_16‹›
                    7
                    (Node_16‹›
                      3 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15))
                    (Node_16‹›
                      4 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15)))))
              (Node_16‹›
                12
                (Node_16‹›
                  9
                  (Node_16‹›
                    8
                    (Node_16‹›
                      3 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15))
                    (Node_16‹›
                      4 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15)))
                  (Node_16‹›
                    7
                    (Node_16‹›
                      3 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15))
                    (Node_16‹›
                      4 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15))))
                (Node_16‹›
                  10
                  (Node_16‹›
                    8
                    (Node_16‹›
                      3 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15))
                    (Node_16‹›
                      4 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15)))
                  (Node_16‹›
                    7
                    (Node_16‹›
                      3 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15))
                    (Node_16‹›
                      4 (Node_16‹› 1 Leaf_15 Leaf_15)
                      (Node_16‹› 2 Leaf_15 Leaf_15))))))
            n_68545)
        in
        (match _68546 in unit_9 -o IO base_3‹U› with
        | tt_3 =>
          print
            (__cat__
              (__cat__
                (__cat__
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__ "height := " ((string_of_int_33) m_68536))
                          "\n")
                        "size   := ")
                      ((string_of_int_33) m_68540))
                    "\n")
                  "find   := ")
                ((string_of_bool_15) m_68544))
              "\n")))))

[trans1e success]

-----------------------------------------

#[program]
def idU_58 := fun id_260471 (A_260472) -> (m_260473) ->
                m_260473

#[program]
def idL_57 := fun id_260474 (A_260475) -> (m_260476) ->
                m_260476

#[logical]
inductive eqU_14 where
| reflU_22 of layout[]

#[logical]
inductive eqL_13 where
| reflL_21 of layout[]

#[program]
def rwlUU_62 :=
  fun rwl_260477 {A_260478} -> {m_260479} -> {n_260480} -> {B_260481} ->
  {__260482} -> (__260483) ->
    (match {NULL} with
    | reflU_22  => __260483)

#[program]
def rwlUL_61 :=
  fun rwl_260484 {A_260485} -> {m_260486} -> {n_260487} -> {B_260488} ->
  {__260489} -> (__260490) ->
    (match {NULL} with
    | reflU_22  => __260490)

#[program]
def rwlLU_60 :=
  fun rwl_260491 {A_260492} -> {m_260493} -> {n_260494} -> {B_260495} ->
  {__260496} -> (__260497) ->
    (match {NULL} with
    | reflL_21  => __260497)

#[program]
def rwlLL_59 :=
  fun rwl_260498 {A_260499} -> {m_260500} -> {n_260501} -> {B_260502} ->
  {__260503} -> (__260504) ->
    (match {NULL} with
    | reflL_21  => __260504)

#[program]
def rwrUU_66 :=
  fun rwr_260505 {A_260506} -> {m_260507} -> {n_260508} -> {B_260509} ->
  {__260510} -> (__260511) ->
    (match {NULL} with
    | reflU_22  => __260511)

#[program]
def rwrUL_65 :=
  fun rwr_260512 {A_260513} -> {m_260514} -> {n_260515} -> {B_260516} ->
  {__260517} -> (__260518) ->
    (match {NULL} with
    | reflU_22  => __260518)

#[program]
def rwrLU_64 :=
  fun rwr_260519 {A_260520} -> {m_260521} -> {n_260522} -> {B_260523} ->
  {__260524} -> (__260525) ->
    (match {NULL} with
    | reflL_21  => __260525)

#[program]
def rwrLL_63 :=
  fun rwr_260526 {A_260527} -> {m_260528} -> {n_260529} -> {B_260530} ->
  {__260531} -> (__260532) ->
    (match {NULL} with
    | reflL_21  => __260532)

#[logical]
def congrUUU_74 := NULL

#[logical]
def congrUUL_73 := NULL

#[logical]
def congrULU_72 := NULL

#[logical]
def congrULL_71 := NULL

#[logical]
def congrLUU_70 := NULL

#[logical]
def congrLUL_69 := NULL

#[logical]
def congrLLU_68 := NULL

#[logical]
def congrLLL_67 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_18 where
| justUU_26 of layout[R]

#[program]
inductive singUL_17 where
| justUL_25 of layout[R]

#[program]
inductive singLU_16 where


#[program]
inductive singLL_15 where
| justLL_23 of layout[R]

#[logical]
def ssingU_76 := NULL

#[logical]
def ssingL_75 := NULL

#[program]
def sing_elimUU_80 :=
  fun sing_elim_260533 {A_260534} -> {x_260535} -> (__260536) ->
    (match __260536 with
    | justUU_26 m_260537 => m_260537)

#[program]
def sing_elimUL_79 :=
  fun sing_elim_260538 {A_260539} -> {x_260540} -> (__260541) ->
    (match __260541 with
    | justUL_25 m_260542 => m_260542)

#[program]
def sing_elimLU_78 :=
  fun sing_elim_260543 {A_260544} -> {x_260545} -> (__260546) ->
    (match __260546 with
    )

#[program]
def sing_elimLL_77 :=
  fun sing_elim_260547 {A_260548} -> {x_260549} -> (__260550) ->
    (match __260550 with
    | justLL_23 m_260551 => m_260551)

#[logical]
def sing_uniqUU_84 := NULL

#[logical]
def sing_uniqUL_83 := NULL

#[logical]
def sing_uniqLU_82 := NULL

#[logical]
def sing_uniqLL_81 := NULL

#[program]
inductive baseU_20 where
| ttU_28 of layout[]

#[program]
inductive baseL_19 where
| ttL_27 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_260552 (__260553) ->
    (match __260553 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_260554 (__260555) -> (__260556) ->
    (match __260555 with
    | true_4  =>
      (match __260556 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_260557 (__260558) -> (__260559) ->
    (match __260558 with
    | true_4  => true_4
    | false_5  =>
      (match __260559 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_260560 (__260561) -> (__260562) ->
    (match __260561 with
    | true_4  =>
      (match __260562 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __260562 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def string_of_bool_15 :=
  fun string_of_bool_260563 (__260564) ->
    (match __260564 with
    | true_4  => "true" | false_5  => "false")

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_16 :=
  fun lte_260565 (__260566) -> (__260567) ->
    (match __260566 with
    | zero_6  => true_4
    | succ_7 n_260568 =>
      (match __260567 with
      | zero_6  => false_5
      | succ_7 n_260569 => ((lte_260565) n_260568 n_260569)))

#[program]
def lt_17 :=
  fun lt_260570 (x_260571) -> (y_260572) ->
    ((lte_16) (succ_7 x_260571) y_260572)

#[program]
def pred_18 :=
  fun pred_260573 (__260574) ->
    (match __260574 with
    | zero_6  => zero_6 | succ_7 n_260575 => n_260575)

#[program]
def add_19 :=
  fun add_260576 (__260577) -> (__260578) ->
    (match __260577 with
    | zero_6  => __260578
    | succ_7 n_260579 => (succ_7 ((add_260576) n_260579 __260578)))

#[program]
def sub_20 :=
  fun sub_260580 (__260581) -> (__260582) ->
    (match __260582 with
    | zero_6  => __260581
    | succ_7 n_260583 => ((sub_260580) ((pred_18) __260581) n_260583))

#[program]
def mul_21 :=
  fun mul_260584 (__260585) -> (__260586) ->
    (match __260585 with
    | zero_6  => zero_6
    | succ_7 n_260587 => ((add_19) __260586 ((mul_260584) n_260587 __260586)))

#[program]
def div_22 :=
  fun div_260588 (x_260589) -> (y_260590) ->
    (match ((lt_17) x_260589 y_260590) with
    | true_4  => zero_6
    | false_5  =>
      let loop_260591 :=
        fun loop_260592 (x_260593) -> (y_260594) ->
          (match ((sub_20) x_260593 ((pred_18) y_260594)) with
          | zero_6  => zero_6
          | succ_7 n_260595 => (succ_7 ((loop_260592) n_260595 y_260594)))
      in ((loop_260591) x_260589 y_260590))

#[program]
def rem_23 :=
  fun rem_260596 (x_260597) -> (y_260598) ->
    ((sub_20) x_260597 ((mul_21) ((div_22) x_260597 y_260598) y_260598))

#[program]
inductive optionU_22 where
| NoneU_31 of layout[]
| SomeU_32 of layout[R]

#[program]
inductive optionL_21 where
| NoneL_29 of layout[]
| SomeL_30 of layout[R]

#[program]
inductive listUU_26 where
| nilUU_39 of layout[]
| consUU_40 of layout[R, R]

#[program]
inductive listUL_25 where
| nilUL_37 of layout[]
| consUL_38 of layout[R, R]

#[program]
inductive listLU_24 where
| nilLU_35 of layout[]

#[program]
inductive listLL_23 where
| nilLL_33 of layout[]
| consLL_34 of layout[R, R]

#[program]
def rconsUU_88 :=
  fun rcons_260599 {A_260600} -> (__260601) -o (__260602) -o
    (match __260601 with
    | nilUU_39  => (consUU_40 __260602 nilUU_39)
    | consUU_40 hd_260603 tl_260604 =>
      (consUU_40 hd_260603 ((rcons_260599) NULL tl_260604 __260602)))

#[program]
def rconsUL_87 :=
  fun rcons_260605 {A_260606} -> (__260607) -o (__260608) -o
    (match __260607 with
    | nilUL_37  => (consUL_38 __260608 nilUL_37)
    | consUL_38 hd_260609 tl_260610 =>
      (consUL_38 hd_260609 ((rcons_260605) NULL tl_260610 __260608)))

#[program]
def rconsLL_85 :=
  fun rcons_260611 {A_260612} -> (__260613) -o (__260614) -o
    (match __260613 with
    | nilLL_33  => (consLL_34 __260614 nilLL_33)
    | consLL_34 hd_260615 tl_260616 =>
      (consLL_34 hd_260615 ((rcons_260611) NULL tl_260616 __260614)))

#[program]
def free_listUU_92 :=
  fun free_list_260617 {A_260618} -> (f_260619) -> (__260620) ->
    (match __260620 with
    | nilUU_39  => ttU_28
    | consUU_40 hd_260621 tl_260622 =>
      let __260623 := ((f_260619) hd_260621) in
      ((free_list_260617) NULL f_260619 tl_260622))

#[program]
def free_listUL_91 :=
  fun free_list_260624 {A_260625} -> (f_260626) -> (__260627) ->
    (match __260627 with
    | nilUL_37  => ttU_28
    | consUL_38 hd_260628 tl_260629 =>
      let __260630 := ((f_260626) hd_260628) in
      ((free_list_260624) NULL f_260626 tl_260629))

#[program]
def free_listLL_89 :=
  fun free_list_260631 {A_260632} -> (f_260633) -> (__260634) ->
    (match __260634 with
    | nilLL_33  => ttU_28
    | consLL_34 hd_260635 tl_260636 =>
      let __260637 := ((f_260633) hd_260635) in
      ((free_list_260631) NULL f_260633 tl_260636))

#[program]
inductive existsUU_30 where
| exUU_44 of layout[R, N]

#[program]
inductive existsUL_29 where
| exUL_43 of layout[R, N]

#[program]
inductive existsLU_28 where
| exLU_42 of layout[R, N]

#[program]
inductive existsLL_27 where
| exLL_41 of layout[R, N]

#[program]
inductive exists0UU_34 where
| ex0UU_48 of layout[N, R]

#[program]
inductive exists0UL_33 where
| ex0UL_47 of layout[N, R]

#[program]
inductive exists0LU_32 where
| ex0LU_46 of layout[N, R]

#[program]
inductive exists0LL_31 where
| ex0LL_45 of layout[N, R]

#[program]
inductive exists1UU_38 where
| ex1UU_52 of layout[R, R]

#[program]
inductive exists1UL_37 where
| ex1UL_51 of layout[R, R]

#[program]
inductive exists1LU_36 where
| ex1LU_50 of layout[R, R]

#[program]
inductive exists1LL_35 where
| ex1LL_49 of layout[R, R]

#[logical]
def tensorUU_96 := NULL

#[logical]
def tensorUL_95 := NULL

#[logical]
def tensorLU_94 := NULL

#[logical]
def tensorLL_93 := NULL

#[program]
def pow_27 :=
  fun pow_260638 (x_260639) -> (y_260640) ->
    let loop_260641 :=
      fun loop_260642 (acc_260643) -> (y_260644) ->
        (match (__lte__ y_260644 0) with
        | true_4  => acc_260643
        | false_5  =>
          ((loop_260642) (__mul__ x_260639 acc_260643) (__sub__ y_260644 1)))
    in ((loop_260641) 1 y_260640)

#[program]
def powm_28 :=
  fun powm_260645 (x_260646) -> (y_260647) -> (m_260648) ->
    let loop_260649 :=
      fun loop_260650 (acc_260651) -> (y_260652) ->
        (match (__lte__ y_260652 0) with
        | true_4  => acc_260651
        | false_5  =>
          ((loop_260650)
            (__mod__ (__mul__ x_260646 acc_260651) m_260648)
            (__sub__ y_260652 1)))
    in ((loop_260649) 1 y_260647)

#[program]
def ord_29 := fun ord_260653 (c_260654) ->
                (__ord__ c_260654)

#[program]
def chr_30 := fun chr_260655 (i_260656) ->
                (__chr__ i_260656)

#[program]
def str_31 := fun str_260657 (c_260658) ->
                (__push__ "" c_260658)

#[program]
def strlen_32 := fun strlen_260659 (s_260660) ->
                   (__size__ s_260660)

#[program]
def string_of_int_33 :=
  fun string_of_int_260661 (i_260662) ->
    let aux_260663 :=
      fun aux_260664 (i_260665) ->
        (match (__lte__ 10 i_260665) with
        | true_4  =>
          let r_260666 := (__mod__ i_260665 10) in
          let i_260667 := (__div__ i_260665 10) in
          (__push__ ((aux_260664) i_260667)
            ((chr_30) (__add__ r_260666 ((ord_29) 0))))
        | false_5  => ((str_31) ((chr_30) (__add__ i_260665 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_260662) with
    | true_4  => ((aux_260663) i_260662)
    | false_5  => (__cat__ "~" ((aux_260663) (__neg__ i_260662))))

#[program]
inductive tree_11 where
| Leaf_15 of layout[]
| Node_16 of layout[R, R, R]

#[program]
inductive opr_12 where
| Free_17 of layout[]
| Height_18 of layout[]
| Size_19 of layout[]
| Find_20 of layout[R]

#[program]
def height_34 :=
  fun height_260668 (__260669) ->
    (match __260669 with
    | Leaf_15  => 0
    | Node_16 __260670 l_260671 r_260672 =>
      let x_260673 := ((height_260668) l_260671) in
      let y_260674 := ((height_260668) r_260672) in
      (match (__lt__ x_260673 y_260674) with
      | true_4  => (__add__ y_260674 1) | false_5  => (__add__ x_260673 1)))

#[program]
def size_35 :=
  fun size_260675 (__260676) ->
    (match __260676 with
    | Leaf_15  => 0
    | Node_16 __260677 l_260678 r_260679 =>
      (__add__ (__add__ 1 ((size_260675) l_260678)) ((size_260675) r_260679)))

#[program]
def find_36 :=
  fun find_260680 (n_260681) -> (__260682) ->
    (match __260682 with
    | Leaf_15  => false_5
    | Node_16 __260683 l_260684 r_260685 =>
      (match (__eq__ __260683 n_260681) with
      | true_4  => true_4
      | false_5  =>
        ((or_13)
          ((find_260680) n_260681 l_260684) ((find_260680) n_260681 r_260685))))

#[logical]
def tree_p_37 := NULL

#[logical]
def ctree_ch_38 := NULL

#[logical]
def ctree_hc_39 := NULL

#[logical]
def ctree_40 := NULL

#[program]
def leaf_worker_41 :=
  fun leaf_worker_260686 (c_260687) ->
    let* _260688 := recv[R,L] c_260687 in
    (match _260688 with
    | ex1LL_49 m_260689 n_260690 =>
      (match m_260689 with
      | Free_17  => close[true] n_260690
      | Height_18  =>
        let* c_260691 := ((send[R,U] n_260690) (justUU_26 0)) in
        ((leaf_worker_260686) c_260691)
      | Size_19  =>
        let* c_260692 := ((send[R,U] n_260690) (justUU_26 0)) in
        ((leaf_worker_260686) c_260692)
      | Find_20 k_260693 =>
        let* c_260694 := ((send[R,U] n_260690) (justUU_26 false_5)) in
        ((leaf_worker_260686) c_260694)))

#[program]
def node_worker_42 :=
  fun node_worker_260695 (x_260696) -> {l_260697} -> {r_260698} ->
    fun _260699 (l_ch_260700) -o (r_ch_260701) -o (c_260702) -o
      let* _260703 := recv[R,L] c_260702 in
      (match _260703 with
      | ex1LL_49 m_260704 n_260705 =>
        (match m_260704 with
        | Free_17  =>
          let* l_ch_260706 := ((send[R,L] l_ch_260700) Free_17) in
          let* r_ch_260707 := ((send[R,L] r_ch_260701) Free_17) in
          let* __260708 := close[false] l_ch_260706 in
          let* __260709 := close[false] r_ch_260707 in close[true] n_260705
        | Height_18  =>
          let* l_ch_260710 := ((send[R,L] l_ch_260700) Height_18) in
          let* r_ch_260711 := ((send[R,L] r_ch_260701) Height_18) in
          let* _260712 := recv[R,U] l_ch_260710 in
          (match _260712 with
          | ex1UL_51 m_260713 n_260714 =>
            (match m_260713 with
            | justUU_26 m_260715 =>
              let* _260716 := recv[R,U] r_ch_260711 in
              (match _260716 with
              | ex1UL_51 m_260717 n_260718 =>
                (match m_260717 with
                | justUU_26 m_260719 =>
                  (match (__lt__ m_260715 m_260719) with
                  | true_4  =>
                    let* c_260720 :=
                      ((send[R,U] n_260705) (justUU_26 (__add__ m_260719 1)))
                    in
                    ((node_worker_260695)
                      x_260696 NULL NULL n_260714 n_260718 c_260720)
                  | false_5  =>
                    let* c_260721 :=
                      ((send[R,U] n_260705) (justUU_26 (__add__ m_260715 1)))
                    in
                    ((node_worker_260695)
                      x_260696 NULL NULL n_260714 n_260718 c_260721))))))
        | Size_19  =>
          let* l_ch_260722 := ((send[R,L] l_ch_260700) Size_19) in
          let* r_ch_260723 := ((send[R,L] r_ch_260701) Size_19) in
          let* _260724 := recv[R,U] l_ch_260722 in
          (match _260724 with
          | ex1UL_51 m_260725 n_260726 =>
            (match m_260725 with
            | justUU_26 m_260727 =>
              let* _260728 := recv[R,U] r_ch_260723 in
              (match _260728 with
              | ex1UL_51 m_260729 n_260730 =>
                (match m_260729 with
                | justUU_26 m_260731 =>
                  let* c_260732 :=
                    ((send[R,U] n_260705)
                      (justUU_26 (__add__ (__add__ 1 m_260727) m_260731)))
                  in
                  ((node_worker_260695)
                    x_260696 NULL NULL n_260726 n_260730 c_260732)))))
        | Find_20 k_260733 =>
          (match (__eq__ x_260696 k_260733) with
          | true_4  =>
            let* c_260734 := ((send[R,U] n_260705) (justUU_26 true_4)) in
            ((node_worker_260695)
              x_260696 NULL NULL l_ch_260700 r_ch_260701 c_260734)
          | false_5  =>
            let* l_ch_260735 := ((send[R,L] l_ch_260700) (Find_20 k_260733))
            in
            let* r_ch_260736 := ((send[R,L] r_ch_260701) (Find_20 k_260733))
            in
            let* _260737 := recv[R,U] l_ch_260735 in
            (match _260737 with
            | ex1UL_51 m_260738 n_260739 =>
              (match m_260738 with
              | justUU_26 m_260740 =>
                let* _260741 := recv[R,U] r_ch_260736 in
                (match _260741 with
                | ex1UL_51 m_260742 n_260743 =>
                  (match m_260742 with
                  | justUU_26 m_260744 =>
                    let* c_260745 :=
                      ((send[R,U] n_260705)
                        (justUU_26 ((or_13) m_260740 m_260744)))
                    in
                    ((node_worker_260695)
                      x_260696 NULL NULL n_260739 n_260743 c_260745))))))))

#[program]
def cleaf_43 :=
  fun cleaf_260746 (__260747) ->
    fork fun _260748 (_260749) -o
           ((leaf_worker_41) _260749)

#[program]
def cnode_44 :=
  fun cnode_260750 (x_260751) -> {l_260752} -> {r_260753} -> (__260754) -o
  (__260755) -o
    let* l_ch_260756 := __260754 in
    let* r_ch_260757 := __260755 in
    fork
      fun _260758 (_260759) -o
        ((node_worker_42) x_260751 NULL NULL l_ch_260756 r_ch_260757 _260759)

#[program]
def ctree_of_tree_45 :=
  fun ctree_of_tree_260760 (x_260761) ->
    (match x_260761 with
    | Leaf_15  => ((cleaf_43) ttU_28)
    | Node_16 __260762 l_260763 r_260764 =>
      ((cnode_44)
        __260762 NULL NULL ((ctree_of_tree_260760) l_260763)
        ((ctree_of_tree_260760) r_260764)))

#[program]
def cfree_46 :=
  fun cfree_260765 {t_260766} -> (ct_260767) ->
    let* c_260768 := ct_260767 in
    let* c_260769 := ((send[R,L] c_260768) Free_17) in close[false] c_260769

#[program]
def cheight_47 :=
  fun cheight_260770 {t_260771} -> (ct_260772) ->
    let* c_260773 := ct_260772 in
    let* c_260774 := ((send[R,L] c_260773) Height_18) in
    let* _260775 := recv[R,U] c_260774 in
    (match _260775 with
    | ex1UL_51 m_260776 n_260777 =>
      return (ex1UL_51 m_260776 return n_260777))

#[program]
def csize_48 :=
  fun csize_260778 {t_260779} -> (ct_260780) ->
    let* c_260781 := ct_260780 in
    let* c_260782 := ((send[R,L] c_260781) Size_19) in
    let* _260783 := recv[R,U] c_260782 in
    (match _260783 with
    | ex1UL_51 m_260784 n_260785 =>
      return (ex1UL_51 m_260784 return n_260785))

#[program]
def cfind_49 :=
  fun cfind_260786 (k_260787) -> {t_260788} -> (ct_260789) ->
    let* c_260790 := ct_260789 in
    let* c_260791 := ((send[R,L] c_260790) (Find_20 k_260787)) in
    let* _260792 := recv[R,U] c_260791 in
    (match _260792 with
    | ex1UL_51 m_260793 n_260794 =>
      return (ex1UL_51 m_260793 return n_260794))

#[program]
def mytree1_50 :=
  fun mytree1_260795 (x_260796) ->
    ((cnode_44) x_260796 NULL NULL ((cleaf_43) ttU_28) ((cleaf_43) ttU_28))

#[program]
def mytree2_51 :=
  fun mytree2_260797 (x_260798) ->
    ((cnode_44) x_260798 NULL NULL ((mytree1_50) 1) ((mytree1_50) 2))

#[program]
def mytree3_52 :=
  fun mytree3_260799 (x_260800) ->
    ((cnode_44) x_260800 NULL NULL ((mytree2_51) 3) ((mytree2_51) 4))

#[program]
def mytree4_53 :=
  fun mytree4_260801 (x_260802) ->
    ((cnode_44) x_260802 NULL NULL ((mytree3_52) 8) ((mytree3_52) 7))

#[program]
def mytree5_54 :=
  fun mytree5_260803 (x_260804) ->
    ((cnode_44) x_260804 NULL NULL ((mytree4_53) 9) ((mytree4_53) 10))

#[program]
def mytree6_55 :=
  fun mytree6_260805 (x_260806) ->
    ((cnode_44) x_260806 NULL NULL ((mytree5_54) 11) ((mytree5_54) 12))

#[program]
def main :=
  let ct_260807 := ((mytree6_55) 100) in
  let* _260808 := ((cheight_47) NULL ct_260807) in
  (match _260808 with
  | ex1UL_51 m_260809 n_260810 =>
    (match m_260809 with
    | justUU_26 m_260811 =>
      let* _260812 := ((csize_48) NULL n_260810) in
      (match _260812 with
      | ex1UL_51 m_260813 n_260814 =>
        (match m_260813 with
        | justUU_26 m_260815 =>
          let* _260816 := ((cfind_49) 1 NULL n_260814) in
          (match _260816 with
          | ex1UL_51 m_260817 n_260818 =>
            (match m_260817 with
            | justUU_26 m_260819 =>
              let* _260820 := ((cfree_46) NULL n_260818) in
              (match _260820 with
              | ttU_28  =>
                print
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__
                            (__cat__
                              (__cat__
                                (__cat__ "height := "
                                  ((string_of_int_33) m_260811))
                                "\n")
                              "size   := ")
                            ((string_of_int_33) m_260815))
                          "\n")
                        "find   := ")
                      ((string_of_bool_15) m_260819))
                    "\n"))))))))

[trans12 success]

-----------------------------------------

#[program]
def idU_58 := fun id_261171 (A_261172) -> (m_261173) ->
                m_261173

#[program]
def idL_57 := fun id_261174 (A_261175) -> (m_261176) ->
                m_261176

#[logical]
inductive eqU_14 where
| reflU_22 of layout[]

#[logical]
inductive eqL_13 where
| reflL_21 of layout[]

#[program]
def rwlUU_62 :=
  fun rwl_261177 {A_261178} -> {m_261179} -> {n_261180} -> {B_261181} ->
  {__261182} -> (__261183) ->
    __261183

#[program]
def rwlUL_61 :=
  fun rwl_261184 {A_261185} -> {m_261186} -> {n_261187} -> {B_261188} ->
  {__261189} -> (__261190) ->
    __261190

#[program]
def rwlLU_60 :=
  fun rwl_261191 {A_261192} -> {m_261193} -> {n_261194} -> {B_261195} ->
  {__261196} -> (__261197) ->
    __261197

#[program]
def rwlLL_59 :=
  fun rwl_261198 {A_261199} -> {m_261200} -> {n_261201} -> {B_261202} ->
  {__261203} -> (__261204) ->
    __261204

#[program]
def rwrUU_66 :=
  fun rwr_261205 {A_261206} -> {m_261207} -> {n_261208} -> {B_261209} ->
  {__261210} -> (__261211) ->
    __261211

#[program]
def rwrUL_65 :=
  fun rwr_261212 {A_261213} -> {m_261214} -> {n_261215} -> {B_261216} ->
  {__261217} -> (__261218) ->
    __261218

#[program]
def rwrLU_64 :=
  fun rwr_261219 {A_261220} -> {m_261221} -> {n_261222} -> {B_261223} ->
  {__261224} -> (__261225) ->
    __261225

#[program]
def rwrLL_63 :=
  fun rwr_261226 {A_261227} -> {m_261228} -> {n_261229} -> {B_261230} ->
  {__261231} -> (__261232) ->
    __261232

#[logical]
def congrUUU_74 := NULL

#[logical]
def congrUUL_73 := NULL

#[logical]
def congrULU_72 := NULL

#[logical]
def congrULL_71 := NULL

#[logical]
def congrLUU_70 := NULL

#[logical]
def congrLUL_69 := NULL

#[logical]
def congrLLU_68 := NULL

#[logical]
def congrLLL_67 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_18 where
| justUU_26 of layout[R]

#[program]
inductive singUL_17 where
| justUL_25 of layout[R]

#[program]
inductive singLU_16 where


#[program]
inductive singLL_15 where
| justLL_23 of layout[R]

#[logical]
def ssingU_76 := NULL

#[logical]
def ssingL_75 := NULL

#[program]
def sing_elimUU_80 :=
  fun sing_elim_261233 {A_261234} -> {x_261235} -> (__261236) ->
    (match __261236 with
    | justUU_26 m_261237 => m_261237)

#[program]
def sing_elimUL_79 :=
  fun sing_elim_261238 {A_261239} -> {x_261240} -> (__261241) ->
    (match __261241 with
    | justUL_25 m_261242 => m_261242)

#[program]
def sing_elimLU_78 :=
  fun sing_elim_261243 {A_261244} -> {x_261245} -> (__261246) ->
    !!

#[program]
def sing_elimLL_77 :=
  fun sing_elim_261247 {A_261248} -> {x_261249} -> (__261250) ->
    (match __261250 with
    | justLL_23 m_261251 => m_261251)

#[logical]
def sing_uniqUU_84 := NULL

#[logical]
def sing_uniqUL_83 := NULL

#[logical]
def sing_uniqLU_82 := NULL

#[logical]
def sing_uniqLL_81 := NULL

#[program]
inductive baseU_20 where
| ttU_28 of layout[]

#[program]
inductive baseL_19 where
| ttL_27 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_261252 (__261253) ->
    (match __261253 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_261254 (__261255) -> (__261256) ->
    (match __261255 with
    | true_4  =>
      (match __261256 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_261257 (__261258) -> (__261259) ->
    (match __261258 with
    | true_4  => true_4
    | false_5  =>
      (match __261259 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_261260 (__261261) -> (__261262) ->
    (match __261261 with
    | true_4  =>
      (match __261262 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __261262 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def string_of_bool_15 :=
  fun string_of_bool_261263 (__261264) ->
    (match __261264 with
    | true_4  => "true" | false_5  => "false")

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_16 :=
  fun lte_261265 (__261266) -> (__261267) ->
    (match __261266 with
    | zero_6  => true_4
    | succ_7 n_261268 =>
      (match __261267 with
      | zero_6  => false_5
      | succ_7 n_261269 => ((lte_261265) n_261268 n_261269)))

#[program]
def lt_17 :=
  fun lt_261270 (x_261271) -> (y_261272) ->
    ((lte_16) (succ_7 x_261271) y_261272)

#[program]
def pred_18 :=
  fun pred_261273 (__261274) ->
    (match __261274 with
    | zero_6  => zero_6 | succ_7 n_261275 => n_261275)

#[program]
def add_19 :=
  fun add_261276 (__261277) -> (__261278) ->
    (match __261277 with
    | zero_6  => __261278
    | succ_7 n_261279 => (succ_7 ((add_261276) n_261279 __261278)))

#[program]
def sub_20 :=
  fun sub_261280 (__261281) -> (__261282) ->
    (match __261282 with
    | zero_6  => __261281
    | succ_7 n_261283 => ((sub_261280) ((pred_18) __261281) n_261283))

#[program]
def mul_21 :=
  fun mul_261284 (__261285) -> (__261286) ->
    (match __261285 with
    | zero_6  => zero_6
    | succ_7 n_261287 => ((add_19) __261286 ((mul_261284) n_261287 __261286)))

#[program]
def div_22 :=
  fun div_261288 (x_261289) -> (y_261290) ->
    (match ((lt_17) x_261289 y_261290) with
    | true_4  => zero_6
    | false_5  =>
      let loop_261291 :=
        fun loop_261292 (x_261293) -> (y_261294) ->
          (match ((sub_20) x_261293 ((pred_18) y_261294)) with
          | zero_6  => zero_6
          | succ_7 n_261295 => (succ_7 ((loop_261292) n_261295 y_261294)))
      in ((loop_261291) x_261289 y_261290))

#[program]
def rem_23 :=
  fun rem_261296 (x_261297) -> (y_261298) ->
    ((sub_20) x_261297 ((mul_21) ((div_22) x_261297 y_261298) y_261298))

#[program]
inductive optionU_22 where
| NoneU_31 of layout[]
| SomeU_32 of layout[R]

#[program]
inductive optionL_21 where
| NoneL_29 of layout[]
| SomeL_30 of layout[R]

#[program]
inductive listUU_26 where
| nilUU_39 of layout[]
| consUU_40 of layout[R, R]

#[program]
inductive listUL_25 where
| nilUL_37 of layout[]
| consUL_38 of layout[R, R]

#[program]
inductive listLU_24 where
| nilLU_35 of layout[]

#[program]
inductive listLL_23 where
| nilLL_33 of layout[]
| consLL_34 of layout[R, R]

#[program]
def rconsUU_88 :=
  fun rcons_261299 {A_261300} -> (__261301) -o (__261302) -o
    (match __261301 with
    | nilUU_39  => (consUU_40 __261302 nilUU_39)
    | consUU_40 hd_261303 tl_261304 =>
      (consUU_40 hd_261303 ((rcons_261299) NULL tl_261304 __261302)))

#[program]
def rconsUL_87 :=
  fun rcons_261305 {A_261306} -> (__261307) -o (__261308) -o
    (match __261307 with
    | nilUL_37  => (consUL_38 __261308 nilUL_37)
    | consUL_38 hd_261309 tl_261310 =>
      (consUL_38 hd_261309 ((rcons_261305) NULL tl_261310 __261308)))

#[program]
def rconsLL_85 :=
  fun rcons_261311 {A_261312} -> (__261313) -o (__261314) -o
    (match __261313 with
    | nilLL_33  => (consLL_34 __261314 nilLL_33)
    | consLL_34 hd_261315 tl_261316 =>
      (consLL_34 hd_261315 ((rcons_261311) NULL tl_261316 __261314)))

#[program]
def free_listUU_92 :=
  fun free_list_261317 {A_261318} -> (f_261319) -> (__261320) ->
    (match __261320 with
    | nilUU_39  => ttU_28
    | consUU_40 hd_261321 tl_261322 =>
      let __261323 := ((f_261319) hd_261321) in
      ((free_list_261317) NULL f_261319 tl_261322))

#[program]
def free_listUL_91 :=
  fun free_list_261324 {A_261325} -> (f_261326) -> (__261327) ->
    (match __261327 with
    | nilUL_37  => ttU_28
    | consUL_38 hd_261328 tl_261329 =>
      let __261330 := ((f_261326) hd_261328) in
      ((free_list_261324) NULL f_261326 tl_261329))

#[program]
def free_listLL_89 :=
  fun free_list_261331 {A_261332} -> (f_261333) -> (__261334) ->
    (match __261334 with
    | nilLL_33  => ttU_28
    | consLL_34 hd_261335 tl_261336 =>
      let __261337 := ((f_261333) hd_261335) in
      ((free_list_261331) NULL f_261333 tl_261336))

#[program]
inductive existsUU_30 where
| exUU_44 of layout[R, N]

#[program]
inductive existsUL_29 where
| exUL_43 of layout[R, N]

#[program]
inductive existsLU_28 where
| exLU_42 of layout[R, N]

#[program]
inductive existsLL_27 where
| exLL_41 of layout[R, N]

#[program]
inductive exists0UU_34 where
| ex0UU_48 of layout[N, R]

#[program]
inductive exists0UL_33 where
| ex0UL_47 of layout[N, R]

#[program]
inductive exists0LU_32 where
| ex0LU_46 of layout[N, R]

#[program]
inductive exists0LL_31 where
| ex0LL_45 of layout[N, R]

#[program]
inductive exists1UU_38 where
| ex1UU_52 of layout[R, R]

#[program]
inductive exists1UL_37 where
| ex1UL_51 of layout[R, R]

#[program]
inductive exists1LU_36 where
| ex1LU_50 of layout[R, R]

#[program]
inductive exists1LL_35 where
| ex1LL_49 of layout[R, R]

#[logical]
def tensorUU_96 := NULL

#[logical]
def tensorUL_95 := NULL

#[logical]
def tensorLU_94 := NULL

#[logical]
def tensorLL_93 := NULL

#[program]
def pow_27 :=
  fun pow_261338 (x_261339) -> (y_261340) ->
    let loop_261341 :=
      fun loop_261342 (acc_261343) -> (y_261344) ->
        (match (__lte__ y_261344 0) with
        | true_4  => acc_261343
        | false_5  =>
          ((loop_261342) (__mul__ x_261339 acc_261343) (__sub__ y_261344 1)))
    in ((loop_261341) 1 y_261340)

#[program]
def powm_28 :=
  fun powm_261345 (x_261346) -> (y_261347) -> (m_261348) ->
    let loop_261349 :=
      fun loop_261350 (acc_261351) -> (y_261352) ->
        (match (__lte__ y_261352 0) with
        | true_4  => acc_261351
        | false_5  =>
          ((loop_261350)
            (__mod__ (__mul__ x_261346 acc_261351) m_261348)
            (__sub__ y_261352 1)))
    in ((loop_261349) 1 y_261347)

#[program]
def ord_29 := fun ord_261353 (c_261354) ->
                (__ord__ c_261354)

#[program]
def chr_30 := fun chr_261355 (i_261356) ->
                (__chr__ i_261356)

#[program]
def str_31 := fun str_261357 (c_261358) ->
                (__push__ "" c_261358)

#[program]
def strlen_32 := fun strlen_261359 (s_261360) ->
                   (__size__ s_261360)

#[program]
def string_of_int_33 :=
  fun string_of_int_261361 (i_261362) ->
    let aux_261363 :=
      fun aux_261364 (i_261365) ->
        (match (__lte__ 10 i_261365) with
        | true_4  =>
          let r_261366 := (__mod__ i_261365 10) in
          let i_261367 := (__div__ i_261365 10) in
          (__push__ ((aux_261364) i_261367)
            ((chr_30) (__add__ r_261366 ((ord_29) 0))))
        | false_5  => ((str_31) ((chr_30) (__add__ i_261365 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_261362) with
    | true_4  => ((aux_261363) i_261362)
    | false_5  => (__cat__ "~" ((aux_261363) (__neg__ i_261362))))

#[program]
inductive tree_11 where
| Leaf_15 of layout[]
| Node_16 of layout[R, R, R]

#[program]
inductive opr_12 where
| Free_17 of layout[]
| Height_18 of layout[]
| Size_19 of layout[]
| Find_20 of layout[R]

#[program]
def height_34 :=
  fun height_261368 (__261369) ->
    (match __261369 with
    | Leaf_15  => 0
    | Node_16 __261370 l_261371 r_261372 =>
      let x_261373 := ((height_261368) l_261371) in
      let y_261374 := ((height_261368) r_261372) in
      (match (__lt__ x_261373 y_261374) with
      | true_4  => (__add__ y_261374 1) | false_5  => (__add__ x_261373 1)))

#[program]
def size_35 :=
  fun size_261375 (__261376) ->
    (match __261376 with
    | Leaf_15  => 0
    | Node_16 __261377 l_261378 r_261379 =>
      (__add__ (__add__ 1 ((size_261375) l_261378)) ((size_261375) r_261379)))

#[program]
def find_36 :=
  fun find_261380 (n_261381) -> (__261382) ->
    (match __261382 with
    | Leaf_15  => false_5
    | Node_16 __261383 l_261384 r_261385 =>
      (match (__eq__ __261383 n_261381) with
      | true_4  => true_4
      | false_5  =>
        ((or_13)
          ((find_261380) n_261381 l_261384) ((find_261380) n_261381 r_261385))))

#[logical]
def tree_p_37 := NULL

#[logical]
def ctree_ch_38 := NULL

#[logical]
def ctree_hc_39 := NULL

#[logical]
def ctree_40 := NULL

#[program]
def leaf_worker_41 :=
  fun leaf_worker_261386 (c_261387) ->
    let* _261388 := recv[R,L] c_261387 in
    (match _261388 with
    | ex1LL_49 m_261389 n_261390 =>
      (match m_261389 with
      | Free_17  => close[true] n_261390
      | Height_18  =>
        let* c_261391 := ((send[R,U] n_261390) (justUU_26 0)) in
        ((leaf_worker_261386) c_261391)
      | Size_19  =>
        let* c_261392 := ((send[R,U] n_261390) (justUU_26 0)) in
        ((leaf_worker_261386) c_261392)
      | Find_20 k_261393 =>
        let* c_261394 := ((send[R,U] n_261390) (justUU_26 false_5)) in
        ((leaf_worker_261386) c_261394)))

#[program]
def node_worker_42 :=
  fun node_worker_261395 (x_261396) -> {l_261397} -> {r_261398} ->
    fun _261399 (l_ch_261400) -o (r_ch_261401) -o (c_261402) -o
      let* _261403 := recv[R,L] c_261402 in
      (match _261403 with
      | ex1LL_49 m_261404 n_261405 =>
        (match m_261404 with
        | Free_17  =>
          let* l_ch_261406 := ((send[R,L] l_ch_261400) Free_17) in
          let* r_ch_261407 := ((send[R,L] r_ch_261401) Free_17) in
          let* __261408 := close[false] l_ch_261406 in
          let* __261409 := close[false] r_ch_261407 in close[true] n_261405
        | Height_18  =>
          let* l_ch_261410 := ((send[R,L] l_ch_261400) Height_18) in
          let* r_ch_261411 := ((send[R,L] r_ch_261401) Height_18) in
          let* _261412 := recv[R,U] l_ch_261410 in
          (match _261412 with
          | ex1UL_51 m_261413 n_261414 =>
            (match m_261413 with
            | justUU_26 m_261415 =>
              let* _261416 := recv[R,U] r_ch_261411 in
              (match _261416 with
              | ex1UL_51 m_261417 n_261418 =>
                (match m_261417 with
                | justUU_26 m_261419 =>
                  (match (__lt__ m_261415 m_261419) with
                  | true_4  =>
                    let* c_261420 :=
                      ((send[R,U] n_261405) (justUU_26 (__add__ m_261419 1)))
                    in
                    ((node_worker_261395)
                      x_261396 NULL NULL n_261414 n_261418 c_261420)
                  | false_5  =>
                    let* c_261421 :=
                      ((send[R,U] n_261405) (justUU_26 (__add__ m_261415 1)))
                    in
                    ((node_worker_261395)
                      x_261396 NULL NULL n_261414 n_261418 c_261421))))))
        | Size_19  =>
          let* l_ch_261422 := ((send[R,L] l_ch_261400) Size_19) in
          let* r_ch_261423 := ((send[R,L] r_ch_261401) Size_19) in
          let* _261424 := recv[R,U] l_ch_261422 in
          (match _261424 with
          | ex1UL_51 m_261425 n_261426 =>
            (match m_261425 with
            | justUU_26 m_261427 =>
              let* _261428 := recv[R,U] r_ch_261423 in
              (match _261428 with
              | ex1UL_51 m_261429 n_261430 =>
                (match m_261429 with
                | justUU_26 m_261431 =>
                  let* c_261432 :=
                    ((send[R,U] n_261405)
                      (justUU_26 (__add__ (__add__ 1 m_261427) m_261431)))
                  in
                  ((node_worker_261395)
                    x_261396 NULL NULL n_261426 n_261430 c_261432)))))
        | Find_20 k_261433 =>
          (match (__eq__ x_261396 k_261433) with
          | true_4  =>
            let* c_261434 := ((send[R,U] n_261405) (justUU_26 true_4)) in
            ((node_worker_261395)
              x_261396 NULL NULL l_ch_261400 r_ch_261401 c_261434)
          | false_5  =>
            let* l_ch_261435 := ((send[R,L] l_ch_261400) (Find_20 k_261433))
            in
            let* r_ch_261436 := ((send[R,L] r_ch_261401) (Find_20 k_261433))
            in
            let* _261437 := recv[R,U] l_ch_261435 in
            (match _261437 with
            | ex1UL_51 m_261438 n_261439 =>
              (match m_261438 with
              | justUU_26 m_261440 =>
                let* _261441 := recv[R,U] r_ch_261436 in
                (match _261441 with
                | ex1UL_51 m_261442 n_261443 =>
                  (match m_261442 with
                  | justUU_26 m_261444 =>
                    let* c_261445 :=
                      ((send[R,U] n_261405)
                        (justUU_26 ((or_13) m_261440 m_261444)))
                    in
                    ((node_worker_261395)
                      x_261396 NULL NULL n_261439 n_261443 c_261445))))))))

#[program]
def cleaf_43 :=
  fun cleaf_261446 (__261447) ->
    fork fun _261448 (_261449) -o
           ((leaf_worker_41) _261449)

#[program]
def cnode_44 :=
  fun cnode_261450 (x_261451) -> {l_261452} -> {r_261453} -> (__261454) -o
  (__261455) -o
    let* l_ch_261456 := __261454 in
    let* r_ch_261457 := __261455 in
    fork
      fun _261458 (_261459) -o
        ((node_worker_42) x_261451 NULL NULL l_ch_261456 r_ch_261457 _261459)

#[program]
def ctree_of_tree_45 :=
  fun ctree_of_tree_261460 (x_261461) ->
    (match x_261461 with
    | Leaf_15  => ((cleaf_43) ttU_28)
    | Node_16 __261462 l_261463 r_261464 =>
      ((cnode_44)
        __261462 NULL NULL ((ctree_of_tree_261460) l_261463)
        ((ctree_of_tree_261460) r_261464)))

#[program]
def cfree_46 :=
  fun cfree_261465 {t_261466} -> (ct_261467) ->
    let* c_261468 := ct_261467 in
    let* c_261469 := ((send[R,L] c_261468) Free_17) in close[false] c_261469

#[program]
def cheight_47 :=
  fun cheight_261470 {t_261471} -> (ct_261472) ->
    let* c_261473 := ct_261472 in
    let* c_261474 := ((send[R,L] c_261473) Height_18) in
    let* _261475 := recv[R,U] c_261474 in
    (match _261475 with
    | ex1UL_51 m_261476 n_261477 =>
      return (ex1UL_51 m_261476 return n_261477))

#[program]
def csize_48 :=
  fun csize_261478 {t_261479} -> (ct_261480) ->
    let* c_261481 := ct_261480 in
    let* c_261482 := ((send[R,L] c_261481) Size_19) in
    let* _261483 := recv[R,U] c_261482 in
    (match _261483 with
    | ex1UL_51 m_261484 n_261485 =>
      return (ex1UL_51 m_261484 return n_261485))

#[program]
def cfind_49 :=
  fun cfind_261486 (k_261487) -> {t_261488} -> (ct_261489) ->
    let* c_261490 := ct_261489 in
    let* c_261491 := ((send[R,L] c_261490) (Find_20 k_261487)) in
    let* _261492 := recv[R,U] c_261491 in
    (match _261492 with
    | ex1UL_51 m_261493 n_261494 =>
      return (ex1UL_51 m_261493 return n_261494))

#[program]
def mytree1_50 :=
  fun mytree1_261495 (x_261496) ->
    ((cnode_44) x_261496 NULL NULL ((cleaf_43) ttU_28) ((cleaf_43) ttU_28))

#[program]
def mytree2_51 :=
  fun mytree2_261497 (x_261498) ->
    ((cnode_44) x_261498 NULL NULL ((mytree1_50) 1) ((mytree1_50) 2))

#[program]
def mytree3_52 :=
  fun mytree3_261499 (x_261500) ->
    ((cnode_44) x_261500 NULL NULL ((mytree2_51) 3) ((mytree2_51) 4))

#[program]
def mytree4_53 :=
  fun mytree4_261501 (x_261502) ->
    ((cnode_44) x_261502 NULL NULL ((mytree3_52) 8) ((mytree3_52) 7))

#[program]
def mytree5_54 :=
  fun mytree5_261503 (x_261504) ->
    ((cnode_44) x_261504 NULL NULL ((mytree4_53) 9) ((mytree4_53) 10))

#[program]
def mytree6_55 :=
  fun mytree6_261505 (x_261506) ->
    ((cnode_44) x_261506 NULL NULL ((mytree5_54) 11) ((mytree5_54) 12))

#[program]
def main :=
  let ct_261507 := ((mytree6_55) 100) in
  let* _261508 := ((cheight_47) NULL ct_261507) in
  (match _261508 with
  | ex1UL_51 m_261509 n_261510 =>
    (match m_261509 with
    | justUU_26 m_261511 =>
      let* _261512 := ((csize_48) NULL n_261510) in
      (match _261512 with
      | ex1UL_51 m_261513 n_261514 =>
        (match m_261513 with
        | justUU_26 m_261515 =>
          let* _261516 := ((cfind_49) 1 NULL n_261514) in
          (match _261516 with
          | ex1UL_51 m_261517 n_261518 =>
            (match m_261517 with
            | justUU_26 m_261519 =>
              let* _261520 := ((cfree_46) NULL n_261518) in
              (match _261520 with
              | ttU_28  =>
                print
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__
                            (__cat__
                              (__cat__
                                (__cat__ "height := "
                                  ((string_of_int_33) m_261511))
                                "\n")
                              "size   := ")
                            ((string_of_int_33) m_261515))
                          "\n")
                        "find   := ")
                      ((string_of_bool_15) m_261519))
                    "\n"))))))))

[trans2e success]

-----------------------------------------

def idU_58 := fun id_261928 (A_261929) -> (m_261930) -> m_261930

def idL_57 := fun id_261931 (A_261932) -> (m_261933) -> m_261933

def rwlUU_62 :=
  fun rwl_261934 (A_261935) -> (m_261936) -> (n_261937) -> (B_261938) ->
  (__261939) -> (__261940) -> __261940

def rwlUL_61 :=
  fun rwl_261941 (A_261942) -> (m_261943) -> (n_261944) -> (B_261945) ->
  (__261946) -> (__261947) -> __261947

def rwlLU_60 :=
  fun rwl_261948 (A_261949) -> (m_261950) -> (n_261951) -> (B_261952) ->
  (__261953) -> (__261954) -> __261954

def rwlLL_59 :=
  fun rwl_261955 (A_261956) -> (m_261957) -> (n_261958) -> (B_261959) ->
  (__261960) -> (__261961) -> __261961

def rwrUU_66 :=
  fun rwr_261962 (A_261963) -> (m_261964) -> (n_261965) -> (B_261966) ->
  (__261967) -> (__261968) -> __261968

def rwrUL_65 :=
  fun rwr_261969 (A_261970) -> (m_261971) -> (n_261972) -> (B_261973) ->
  (__261974) -> (__261975) -> __261975

def rwrLU_64 :=
  fun rwr_261976 (A_261977) -> (m_261978) -> (n_261979) -> (B_261980) ->
  (__261981) -> (__261982) -> __261982

def rwrLL_63 :=
  fun rwr_261983 (A_261984) -> (m_261985) -> (n_261986) -> (B_261987) ->
  (__261988) -> (__261989) -> __261989

def sing_elimUU_80 :=
  fun sing_elim_261990 (A_261991) -> (x_261992) -> (__261993) -> __261993

def sing_elimUL_79 :=
  fun sing_elim_261994 (A_261995) -> (x_261996) -> (__261997) -> __261997

def sing_elimLU_78 :=
  fun sing_elim_261998 (A_261999) -> (x_262000) -> (__262001) -> !!

def sing_elimLL_77 :=
  fun sing_elim_262002 (A_262003) -> (x_262004) -> (__262005) -> __262005

def not_11 :=
  fun not_262006 (__262007) ->
    (match __262007 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  fun and_262008 (__262009) -> (__262010) ->
    (match __262009 with
    | true_4 =>
      (match __262010 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  fun or_262011 (__262012) -> (__262013) ->
    (match __262012 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __262013 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  fun xor_262014 (__262015) -> (__262016) ->
    (match __262015 with
    | true_4 =>
      (match __262016 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __262016 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def string_of_bool_15 :=
  fun string_of_bool_262017 (__262018) ->
    (match __262018 with
    | true_4 => "true" | false_5 => "false")

def lte_16 :=
  fun lte_262019 (__262020) -> (__262021) ->
    (match __262020 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __262020 with
      | succ_7 n_262022 =>
        (match __262021 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __262021 with
          | succ_7 n_262023 => ((lte_262019) n_262022 n_262023)))))

def lt_17 :=
  fun lt_262024 (x_262025) -> (y_262026) ->
    ((lte_16) (succ_7 x_262025) y_262026)

def pred_18 :=
  fun pred_262027 (__262028) ->
    (match __262028 with
    | zero_6 => constr0(zero_6)
    | _ => (match __262028 with
           | succ_7 n_262029 => n_262029))

def add_19 :=
  fun add_262030 (__262031) -> (__262032) ->
    (match __262031 with
    | zero_6 => __262032
    | _ =>
      (match __262031 with
      | succ_7 n_262033 => (succ_7 ((add_262030) n_262033 __262032))))

def sub_20 :=
  fun sub_262034 (__262035) -> (__262036) ->
    (match __262036 with
    | zero_6 => __262035
    | _ =>
      (match __262036 with
      | succ_7 n_262037 => ((sub_262034) ((pred_18) __262035) n_262037)))

def mul_21 :=
  fun mul_262038 (__262039) -> (__262040) ->
    (match __262039 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __262039 with
      | succ_7 n_262041 =>
        ((add_19) __262040 ((mul_262038) n_262041 __262040))))

def div_22 :=
  fun div_262042 (x_262043) -> (y_262044) ->
    (match ((lt_17) x_262043 y_262044) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_262045 :=
        fun loop_262046 (x_262047) -> (y_262048) ->
          (match ((sub_20) x_262047 ((pred_18) y_262048)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_20) x_262047 ((pred_18) y_262048)) with
            | succ_7 n_262049 => (succ_7 ((loop_262046) n_262049 y_262048))))
      in ((loop_262045) x_262043 y_262044))

def rem_23 :=
  fun rem_262050 (x_262051) -> (y_262052) ->
    ((sub_20) x_262051 ((mul_21) ((div_22) x_262051 y_262052) y_262052))

def rconsUU_88 :=
  fun rcons_262053 (A_262054) -> (__262055) -o (__262056) -o
    (match __262055 with
    | nilUU_39 => (consUU_40 __262056 constr0(nilUU_39))
    | _ =>
      (match __262055 with
      | consUU_40 hd_262057 tl_262058 =>
        (consUU_40 hd_262057 ((rcons_262053) NULL tl_262058 __262056))))

def rconsUL_87 :=
  fun rcons_262059 (A_262060) -> (__262061) -o (__262062) -o
    (match __262061 with
    | nilUL_37 => (consUL_38 __262062 constr0(nilUL_37))
    | _ =>
      (match __262061 with
      | consUL_38 hd_262063 tl_262064 =>
        (consUL_38 hd_262063 ((rcons_262059) NULL tl_262064 __262062))))

def rconsLL_85 :=
  fun rcons_262065 (A_262066) -> (__262067) -o (__262068) -o
    (match __262067 with
    | nilLL_33 => (consLL_34 __262068 constr0(nilLL_33))
    | _ =>
      (match __262067 with
      | consLL_34 hd_262069 tl_262070 =>
        (consLL_34 hd_262069 ((rcons_262065) NULL tl_262070 __262068))))

def free_listUU_92 :=
  fun free_list_262071 (A_262072) -> (f_262073) -> (__262074) ->
    (match __262074 with
    | nilUU_39 => constr0(ttU_28)
    | _ =>
      (match __262074 with
      | consUU_40 hd_262075 tl_262076 =>
        let __262077 := ((f_262073) hd_262075) in
        ((free_list_262071) NULL f_262073 tl_262076)))

def free_listUL_91 :=
  fun free_list_262078 (A_262079) -> (f_262080) -> (__262081) ->
    (match __262081 with
    | nilUL_37 => constr0(ttU_28)
    | _ =>
      (match __262081 with
      | consUL_38 hd_262082 tl_262083 =>
        let __262084 := ((f_262080) hd_262082) in
        ((free_list_262078) NULL f_262080 tl_262083)))

def free_listLL_89 :=
  fun free_list_262085 (A_262086) -> (f_262087) -> (__262088) ->
    (match __262088 with
    | nilLL_33 => constr0(ttU_28)
    | _ =>
      (match __262088 with
      | consLL_34 hd_262089 tl_262090 =>
        let __262091 := ((f_262087) hd_262089) in
        ((free_list_262085) NULL f_262087 tl_262090)))

def pow_27 :=
  fun pow_262092 (x_262093) -> (y_262094) ->
    let loop_262095 :=
      fun loop_262096 (acc_262097) -> (y_262098) ->
        (match (__lte__ y_262098 0) with
        | true_4 => acc_262097
        | false_5 =>
          ((loop_262096) (__mul__ x_262093 acc_262097) (__sub__ y_262098 1)))
    in ((loop_262095) 1 y_262094)

def powm_28 :=
  fun powm_262099 (x_262100) -> (y_262101) -> (m_262102) ->
    let loop_262103 :=
      fun loop_262104 (acc_262105) -> (y_262106) ->
        (match (__lte__ y_262106 0) with
        | true_4 => acc_262105
        | false_5 =>
          ((loop_262104)
            (__mod__ (__mul__ x_262100 acc_262105) m_262102)
              (__sub__ y_262106 1)))
    in ((loop_262103) 1 y_262101)

def ord_29 := fun ord_262107 (c_262108) -> (__ord__ c_262108)

def chr_30 := fun chr_262109 (i_262110) -> (__chr__ i_262110)

def str_31 := fun str_262111 (c_262112) -> (__push__ "" c_262112)

def strlen_32 := fun strlen_262113 (s_262114) -> (__size__ s_262114)

def string_of_int_33 :=
  fun string_of_int_262115 (i_262116) ->
    let aux_262117 :=
      fun aux_262118 (i_262119) ->
        (match (__lte__ 10 i_262119) with
        | true_4 =>
          let r_262120 := (__mod__ i_262119 10) in
          let i_262121 := (__div__ i_262119 10) in
          (__push__ ((aux_262118) i_262121)
            ((chr_30) (__add__ r_262120 ((ord_29) 0))))
        | false_5 => ((str_31) ((chr_30) (__add__ i_262119 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_262116) with
    | true_4 => ((aux_262117) i_262116)
    | false_5 => (__cat__ "~" ((aux_262117) (__neg__ i_262116))))

def height_34 :=
  fun height_262122 (__262123) ->
    (match __262123 with
    | Leaf_15 => 0
    | _ =>
      (match __262123 with
      | Node_16 __262124 l_262125 r_262126 =>
        let x_262127 := ((height_262122) l_262125) in
        let y_262128 := ((height_262122) r_262126) in
        (match (__lt__ x_262127 y_262128) with
        | true_4 => (__add__ y_262128 1) | false_5 => (__add__ x_262127 1))))

def size_35 :=
  fun size_262129 (__262130) ->
    (match __262130 with
    | Leaf_15 => 0
    | _ =>
      (match __262130 with
      | Node_16 __262131 l_262132 r_262133 =>
        (__add__ (__add__ 1 ((size_262129) l_262132))
          ((size_262129) r_262133))))

def find_36 :=
  fun find_262134 (n_262135) -> (__262136) ->
    (match __262136 with
    | Leaf_15 => constr0(false_5)
    | _ =>
      (match __262136 with
      | Node_16 __262137 l_262138 r_262139 =>
        (match (__eq__ __262137 n_262135) with
        | true_4 => constr0(true_4)
        | false_5 =>
          ((or_13)
            ((find_262134) n_262135 l_262138)
              ((find_262134) n_262135 r_262139)))))

def leaf_worker_41 :=
  fun leaf_worker_262140 (c_262141) ->
    lazy(let _262142 := force(lazy(recv[L](c_262141))) in
         force((match _262142 with
               | ex1LL_49 m_262143 n_262144 =>
                 (match m_262143 with
                 | Free_17 => lazy(close[true] n_262144)
                 | Height_18 =>
                   lazy(let c_262145 :=
                          force(((lam (x_262146) ->
                                    lazy(send(n_262144, x_262146)))
                                  0))
                        in force(((leaf_worker_262140) c_262145)))
                 | Size_19 =>
                   lazy(let c_262147 :=
                          force(((lam (x_262148) ->
                                    lazy(send(n_262144, x_262148)))
                                  0))
                        in force(((leaf_worker_262140) c_262147)))
                 | _ =>
                   (match m_262143 with
                   | Find_20 k_262149 =>
                     lazy(let c_262150 :=
                            force(((lam (x_262151) ->
                                      lazy(send(n_262144, x_262151)))
                                    constr0(false_5)))
                          in force(((leaf_worker_262140) c_262150))))))))

def node_worker_42 :=
  fun node_worker_262152 (x_262153) -> (l_262154) -> (r_262155) ->
    fun _262156 (l_ch_262157) -o (r_ch_262158) -o (c_262159) -o
      lazy(let _262160 := force(lazy(recv[L](c_262159))) in
           force((match _262160 with
                 | ex1LL_49 m_262161 n_262162 =>
                   (match m_262161 with
                   | Free_17 =>
                     lazy(let l_ch_262163 :=
                            force(((lam (x_262164) ->
                                      lazy(send(l_ch_262157, x_262164)))
                                    constr0(Free_17)))
                          in
                          let r_ch_262165 :=
                            force(((lam (x_262166) ->
                                      lazy(send(r_ch_262158, x_262166)))
                                    constr0(Free_17)))
                          in
                          let __262167 :=
                            force(lazy(close[false] l_ch_262163))
                          in
                          let __262168 :=
                            force(lazy(close[false] r_ch_262165))
                          in force(lazy(close[true] n_262162)))
                   | Height_18 =>
                     lazy(let l_ch_262169 :=
                            force(((lam (x_262170) ->
                                      lazy(send(l_ch_262157, x_262170)))
                                    constr0(Height_18)))
                          in
                          let r_ch_262171 :=
                            force(((lam (x_262172) ->
                                      lazy(send(r_ch_262158, x_262172)))
                                    constr0(Height_18)))
                          in
                          let _262173 := force(lazy(recv[U](l_ch_262169))) in
                          force((match _262173 with
                                | ex1UL_51 m_262174 n_262175 =>
                                  lazy(let _262176 :=
                                         force(lazy(recv[U](r_ch_262171)))
                                       in
                                       force((match _262176 with
                                             | ex1UL_51 m_262177 n_262178 =>
                                               (match (__lt__ m_262174
                                                        m_262177) with
                                               | true_4 =>
                                                 lazy(let c_262179 :=
                                                        force(((lam (x_262180) ->
                                                                  lazy(
                                                                  send(n_262162, x_262180)))
                                                                (__add__
                                                                  m_262177 
                                                                1)))
                                                      in
                                                      force(((node_worker_262152)
                                                              x_262153 NULL
                                                                NULL n_262175
                                                                n_262178
                                                                c_262179)))
                                               | false_5 =>
                                                 lazy(let c_262181 :=
                                                        force(((lam (x_262182) ->
                                                                  lazy(
                                                                  send(n_262162, x_262182)))
                                                                (__add__
                                                                  m_262174 
                                                                1)))
                                                      in
                                                      force(((node_worker_262152)
                                                              x_262153 NULL
                                                                NULL n_262175
                                                                n_262178
                                                                c_262181))))))))))
                   | Size_19 =>
                     lazy(let l_ch_262183 :=
                            force(((lam (x_262184) ->
                                      lazy(send(l_ch_262157, x_262184)))
                                    constr0(Size_19)))
                          in
                          let r_ch_262185 :=
                            force(((lam (x_262186) ->
                                      lazy(send(r_ch_262158, x_262186)))
                                    constr0(Size_19)))
                          in
                          let _262187 := force(lazy(recv[U](l_ch_262183))) in
                          force((match _262187 with
                                | ex1UL_51 m_262188 n_262189 =>
                                  lazy(let _262190 :=
                                         force(lazy(recv[U](r_ch_262185)))
                                       in
                                       force((match _262190 with
                                             | ex1UL_51 m_262191 n_262192 =>
                                               lazy(let c_262193 :=
                                                      force(((lam (x_262194) ->
                                                                lazy(
                                                                send(n_262162, x_262194)))
                                                              (__add__
                                                                (__add__ 
                                                                1 m_262188)
                                                                m_262191)))
                                                    in
                                                    force(((node_worker_262152)
                                                            x_262153 NULL
                                                              NULL n_262189
                                                              n_262192
                                                              c_262193)))))))))
                   | _ =>
                     (match m_262161 with
                     | Find_20 k_262195 =>
                       (match (__eq__ x_262153 k_262195) with
                       | true_4 =>
                         lazy(let c_262196 :=
                                force(((lam (x_262197) ->
                                          lazy(send(n_262162, x_262197)))
                                        constr0(true_4)))
                              in
                              force(((node_worker_262152)
                                      x_262153 NULL NULL l_ch_262157
                                        r_ch_262158 c_262196)))
                       | false_5 =>
                         lazy(let l_ch_262198 :=
                                force(((lam (x_262199) ->
                                          lazy(send(l_ch_262157, x_262199)))
                                        (Find_20 k_262195)))
                              in
                              let r_ch_262200 :=
                                force(((lam (x_262201) ->
                                          lazy(send(r_ch_262158, x_262201)))
                                        (Find_20 k_262195)))
                              in
                              let _262202 :=
                                force(lazy(recv[U](l_ch_262198)))
                              in
                              force((match _262202 with
                                    | ex1UL_51 m_262203 n_262204 =>
                                      lazy(let _262205 :=
                                             force(lazy(recv[U](r_ch_262200)))
                                           in
                                           force((match _262205 with
                                                 | ex1UL_51 m_262206
                                                   n_262207 =>
                                                   lazy(let c_262208 :=
                                                          force(((lam (x_262209) ->
                                                                    lazy(
                                                                    send(n_262162, x_262209)))
                                                                  ((or_13)
                                                                    m_262203
                                                                    m_262206)))
                                                        in
                                                        force(((node_worker_262152)
                                                                x_262153 NULL
                                                                  NULL
                                                                  n_262204
                                                                  n_262207
                                                                  c_262208)))))))))))))))

def cleaf_43 :=
  fun cleaf_262210 (__262211) ->
    lazy(fork fun _262212 (_262213) -o ((leaf_worker_41) _262213))

def cnode_44 :=
  fun cnode_262214 (x_262215) -> (l_262216) -> (r_262217) -> (__262218) -o
  (__262219) -o
    lazy(let l_ch_262220 := force(__262218) in
         let r_ch_262221 := force(__262219) in
         force(lazy(fork
                      fun _262222 (_262223) -o
                        ((node_worker_42)
                          x_262215 NULL NULL l_ch_262220 r_ch_262221 _262223))))

def ctree_of_tree_45 :=
  fun ctree_of_tree_262224 (x_262225) ->
    (match x_262225 with
    | Leaf_15 => ((cleaf_43) constr0(ttU_28))
    | _ =>
      (match x_262225 with
      | Node_16 __262226 l_262227 r_262228 =>
        ((cnode_44)
          __262226 NULL NULL ((ctree_of_tree_262224) l_262227)
            ((ctree_of_tree_262224) r_262228))))

def cfree_46 :=
  fun cfree_262229 (t_262230) -> (ct_262231) ->
    lazy(let c_262232 := force(ct_262231) in
         let c_262233 :=
           force(((lam (x_262234) -> lazy(send(c_262232, x_262234)))
                   constr0(Free_17)))
         in force(lazy(close[false] c_262233)))

def cheight_47 :=
  fun cheight_262235 (t_262236) -> (ct_262237) ->
    lazy(let c_262238 := force(ct_262237) in
         let c_262239 :=
           force(((lam (x_262240) -> lazy(send(c_262238, x_262240)))
                   constr0(Height_18)))
         in
         let _262241 := force(lazy(recv[U](c_262239))) in
         force((match _262241 with
               | ex1UL_51 m_262242 n_262243 =>
                 lazy((ex1UL_51 m_262242 lazy(n_262243))))))

def csize_48 :=
  fun csize_262244 (t_262245) -> (ct_262246) ->
    lazy(let c_262247 := force(ct_262246) in
         let c_262248 :=
           force(((lam (x_262249) -> lazy(send(c_262247, x_262249)))
                   constr0(Size_19)))
         in
         let _262250 := force(lazy(recv[U](c_262248))) in
         force((match _262250 with
               | ex1UL_51 m_262251 n_262252 =>
                 lazy((ex1UL_51 m_262251 lazy(n_262252))))))

def cfind_49 :=
  fun cfind_262253 (k_262254) -> (t_262255) -> (ct_262256) ->
    lazy(let c_262257 := force(ct_262256) in
         let c_262258 :=
           force(((lam (x_262259) -> lazy(send(c_262257, x_262259)))
                   (Find_20 k_262254)))
         in
         let _262260 := force(lazy(recv[U](c_262258))) in
         force((match _262260 with
               | ex1UL_51 m_262261 n_262262 =>
                 lazy((ex1UL_51 m_262261 lazy(n_262262))))))

def mytree1_50 :=
  fun mytree1_262263 (x_262264) ->
    ((cnode_44)
      x_262264 NULL NULL ((cleaf_43) constr0(ttU_28))
        ((cleaf_43) constr0(ttU_28)))

def mytree2_51 :=
  fun mytree2_262265 (x_262266) ->
    ((cnode_44) x_262266 NULL NULL ((mytree1_50) 1) ((mytree1_50) 2))

def mytree3_52 :=
  fun mytree3_262267 (x_262268) ->
    ((cnode_44) x_262268 NULL NULL ((mytree2_51) 3) ((mytree2_51) 4))

def mytree4_53 :=
  fun mytree4_262269 (x_262270) ->
    ((cnode_44) x_262270 NULL NULL ((mytree3_52) 8) ((mytree3_52) 7))

def mytree5_54 :=
  fun mytree5_262271 (x_262272) ->
    ((cnode_44) x_262272 NULL NULL ((mytree4_53) 9) ((mytree4_53) 10))

def mytree6_55 :=
  fun mytree6_262273 (x_262274) ->
    ((cnode_44) x_262274 NULL NULL ((mytree5_54) 11) ((mytree5_54) 12))

def main :=
  let ct_262275 := ((mytree6_55) 100) in
  lazy(let _262276 := force(((cheight_47) NULL ct_262275)) in
       force((match _262276 with
             | ex1UL_51 m_262277 n_262278 =>
               lazy(let _262279 := force(((csize_48) NULL n_262278)) in
                    force((match _262279 with
                          | ex1UL_51 m_262280 n_262281 =>
                            lazy(let _262282 :=
                                   force(((cfind_49) 1 NULL n_262281))
                                 in
                                 force((match _262282 with
                                       | ex1UL_51 m_262283 n_262284 =>
                                         lazy(let _262285 :=
                                                force(((cfree_46)
                                                        NULL n_262284))
                                              in
                                              force((match _262285 with
                                                    | ttU_28 =>
                                                      lazy(print
                                                             (__cat__
                                                               (__cat__
                                                                 (__cat__
                                                                   (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    "height := "
                                                                    ((string_of_int_33)
                                                                    m_262277))
                                                                    "\n")
                                                                    "size   := ")
                                                                    ((string_of_int_33)
                                                                    m_262280))
                                                                    "\n")
                                                                   "find   := ")
                                                                 ((string_of_bool_15)
                                                                   m_262283))
                                                               "\n"))))))))))))))

[trans23 success]

-----------------------------------------

def idU_58 := lam (A_262872) -> (m_262873) -> m_262873

def idL_57 := lam (A_262874) -> (m_262875) -> m_262875

def rwlUU_62 :=
  lam (A_262876) -> (m_262877) -> (n_262878) -> (B_262879) -> (__262880) ->
  (__262881) -> __262881

def rwlUL_61 :=
  lam (A_262882) -> (m_262883) -> (n_262884) -> (B_262885) -> (__262886) ->
  (__262887) -> __262887

def rwlLU_60 :=
  lam (A_262888) -> (m_262889) -> (n_262890) -> (B_262891) -> (__262892) ->
  (__262893) -> __262893

def rwlLL_59 :=
  lam (A_262894) -> (m_262895) -> (n_262896) -> (B_262897) -> (__262898) ->
  (__262899) -> __262899

def rwrUU_66 :=
  lam (A_262900) -> (m_262901) -> (n_262902) -> (B_262903) -> (__262904) ->
  (__262905) -> __262905

def rwrUL_65 :=
  lam (A_262906) -> (m_262907) -> (n_262908) -> (B_262909) -> (__262910) ->
  (__262911) -> __262911

def rwrLU_64 :=
  lam (A_262912) -> (m_262913) -> (n_262914) -> (B_262915) -> (__262916) ->
  (__262917) -> __262917

def rwrLL_63 :=
  lam (A_262918) -> (m_262919) -> (n_262920) -> (B_262921) -> (__262922) ->
  (__262923) -> __262923

def sing_elimUU_80 := lam (A_262924) -> (x_262925) -> (__262926) -> __262926

def sing_elimUL_79 := lam (A_262927) -> (x_262928) -> (__262929) -> __262929

def sing_elimLU_78 := lam (A_262930) -> (x_262931) -> (__262932) -> !!

def sing_elimLL_77 := lam (A_262933) -> (x_262934) -> (__262935) -> __262935

def not_11 :=
  lam (__262936) ->
    (match __262936 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  lam (__262937) -> (__262938) ->
    (match __262937 with
    | true_4 =>
      (match __262938 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  lam (__262939) -> (__262940) ->
    (match __262939 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __262940 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  lam (__262941) -> (__262942) ->
    (match __262941 with
    | true_4 =>
      (match __262942 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __262942 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def string_of_bool_15 :=
  lam (__262943) ->
    (match __262943 with
    | true_4 => "true" | false_5 => "false")

def lte_16 :=
  fun lte_262944 (__262945) -> (__262946) ->
    (match __262945 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __262945 with
      | succ_7 n_262947 =>
        (match __262946 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __262946 with
          | succ_7 n_262948 => ((lte_262944) n_262947 n_262948)))))

def lt_17 :=
  lam (x_262949) -> (y_262950) -> ((lte_16) (succ_7 x_262949) y_262950)

def pred_18 :=
  lam (__262951) ->
    (match __262951 with
    | zero_6 => constr0(zero_6)
    | _ => (match __262951 with
           | succ_7 n_262952 => n_262952))

def add_19 :=
  fun add_262953 (__262954) -> (__262955) ->
    (match __262954 with
    | zero_6 => __262955
    | _ =>
      (match __262954 with
      | succ_7 n_262956 => (succ_7 ((add_262953) n_262956 __262955))))

def sub_20 :=
  fun sub_262957 (__262958) -> (__262959) ->
    (match __262959 with
    | zero_6 => __262958
    | _ =>
      (match __262959 with
      | succ_7 n_262960 => ((sub_262957) ((pred_18) __262958) n_262960)))

def mul_21 :=
  fun mul_262961 (__262962) -> (__262963) ->
    (match __262962 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __262962 with
      | succ_7 n_262964 =>
        ((add_19) __262963 ((mul_262961) n_262964 __262963))))

def div_22 :=
  lam (x_262965) -> (y_262966) ->
    (match ((lt_17) x_262965 y_262966) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_262967 :=
        fun loop_262968 (x_262969) -> (y_262970) ->
          (match ((sub_20) x_262969 ((pred_18) y_262970)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_20) x_262969 ((pred_18) y_262970)) with
            | succ_7 n_262971 => (succ_7 ((loop_262968) n_262971 y_262970))))
      in ((loop_262967) x_262965 y_262966))

def rem_23 :=
  lam (x_262972) -> (y_262973) ->
    ((sub_20) x_262972 ((mul_21) ((div_22) x_262972 y_262973) y_262973))

def rconsUU_88 :=
  fun rcons_262974 (A_262975) -> (__262976) -o (__262977) -o
    (match __262976 with
    | nilUU_39 => (consUU_40 __262977 constr0(nilUU_39))
    | _ =>
      (match __262976 with
      | consUU_40 hd_262978 tl_262979 =>
        (consUU_40 hd_262978 ((rcons_262974) NULL tl_262979 __262977))))

def rconsUL_87 :=
  fun rcons_262980 (A_262981) -> (__262982) -o (__262983) -o
    (match __262982 with
    | nilUL_37 => (consUL_38 __262983 constr0(nilUL_37))
    | _ =>
      (match __262982 with
      | consUL_38 hd_262984 tl_262985 =>
        (consUL_38 hd_262984 ((rcons_262980) NULL tl_262985 __262983))))

def rconsLL_85 :=
  fun rcons_262986 (A_262987) -> (__262988) -o (__262989) -o
    (match __262988 with
    | nilLL_33 => (consLL_34 __262989 constr0(nilLL_33))
    | _ =>
      (match __262988 with
      | consLL_34 hd_262990 tl_262991 =>
        (consLL_34 hd_262990 ((rcons_262986) NULL tl_262991 __262989))))

def free_listUU_92 :=
  fun free_list_262992 (A_262993) -> (f_262994) -> (__262995) ->
    (match __262995 with
    | nilUU_39 => constr0(ttU_28)
    | _ =>
      (match __262995 with
      | consUU_40 hd_262996 tl_262997 =>
        let __262998 := ((f_262994) hd_262996) in
        ((free_list_262992) NULL f_262994 tl_262997)))

def free_listUL_91 :=
  fun free_list_262999 (A_263000) -> (f_263001) -> (__263002) ->
    (match __263002 with
    | nilUL_37 => constr0(ttU_28)
    | _ =>
      (match __263002 with
      | consUL_38 hd_263003 tl_263004 =>
        let __263005 := ((f_263001) hd_263003) in
        ((free_list_262999) NULL f_263001 tl_263004)))

def free_listLL_89 :=
  fun free_list_263006 (A_263007) -> (f_263008) -> (__263009) ->
    (match __263009 with
    | nilLL_33 => constr0(ttU_28)
    | _ =>
      (match __263009 with
      | consLL_34 hd_263010 tl_263011 =>
        let __263012 := ((f_263008) hd_263010) in
        ((free_list_263006) NULL f_263008 tl_263011)))

def pow_27 :=
  lam (x_263013) -> (y_263014) ->
    let loop_263015 :=
      fun loop_263016 (acc_263017) -> (y_263018) ->
        (match (__lte__ y_263018 0) with
        | true_4 => acc_263017
        | false_5 =>
          ((loop_263016) (__mul__ x_263013 acc_263017) (__sub__ y_263018 1)))
    in ((loop_263015) 1 y_263014)

def powm_28 :=
  lam (x_263019) -> (y_263020) -> (m_263021) ->
    let loop_263022 :=
      fun loop_263023 (acc_263024) -> (y_263025) ->
        (match (__lte__ y_263025 0) with
        | true_4 => acc_263024
        | false_5 =>
          ((loop_263023)
            (__mod__ (__mul__ x_263019 acc_263024) m_263021)
              (__sub__ y_263025 1)))
    in ((loop_263022) 1 y_263020)

def ord_29 := lam (c_263026) -> (__ord__ c_263026)

def chr_30 := lam (i_263027) -> (__chr__ i_263027)

def str_31 := lam (c_263028) -> (__push__ "" c_263028)

def strlen_32 := lam (s_263029) -> (__size__ s_263029)

def string_of_int_33 :=
  lam (i_263030) ->
    let aux_263031 :=
      fun aux_263032 (i_263033) ->
        (match (__lte__ 10 i_263033) with
        | true_4 =>
          let r_263034 := (__mod__ i_263033 10) in
          let i_263035 := (__div__ i_263033 10) in
          (__push__ ((aux_263032) i_263035)
            ((chr_30) (__add__ r_263034 ((ord_29) 0))))
        | false_5 => ((str_31) ((chr_30) (__add__ i_263033 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_263030) with
    | true_4 => ((aux_263031) i_263030)
    | false_5 => (__cat__ "~" ((aux_263031) (__neg__ i_263030))))

def height_34 :=
  fun height_263036 (__263037) ->
    (match __263037 with
    | Leaf_15 => 0
    | _ =>
      (match __263037 with
      | Node_16 __263038 l_263039 r_263040 =>
        let x_263041 := ((height_263036) l_263039) in
        let y_263042 := ((height_263036) r_263040) in
        (match (__lt__ x_263041 y_263042) with
        | true_4 => (__add__ y_263042 1) | false_5 => (__add__ x_263041 1))))

def size_35 :=
  fun size_263043 (__263044) ->
    (match __263044 with
    | Leaf_15 => 0
    | _ =>
      (match __263044 with
      | Node_16 __263045 l_263046 r_263047 =>
        (__add__ (__add__ 1 ((size_263043) l_263046))
          ((size_263043) r_263047))))

def find_36 :=
  fun find_263048 (n_263049) -> (__263050) ->
    (match __263050 with
    | Leaf_15 => constr0(false_5)
    | _ =>
      (match __263050 with
      | Node_16 __263051 l_263052 r_263053 =>
        (match (__eq__ __263051 n_263049) with
        | true_4 => constr0(true_4)
        | false_5 =>
          ((or_13)
            ((find_263048) n_263049 l_263052)
              ((find_263048) n_263049 r_263053)))))

def leaf_worker_41 :=
  fun leaf_worker_263054 (c_263055) ->
    lazy(let _263056 := recv[L](c_263055) in
         (match _263056 with
         | ex1LL_49 m_263057 n_263058 =>
           (match m_263057 with
           | Free_17 => close[true] n_263058
           | Height_18 =>
             let c_263059 := send(n_263058, 0) in
             force(((leaf_worker_263054) c_263059))
           | Size_19 =>
             let c_263060 := send(n_263058, 0) in
             force(((leaf_worker_263054) c_263060))
           | _ =>
             (match m_263057 with
             | Find_20 k_263061 =>
               let c_263062 := send(n_263058, constr0(false_5)) in
               force(((leaf_worker_263054) c_263062))))))

def node_worker_42 :=
  fun node_worker_263063 (x_263064) -> (l_263065) -> (r_263066) ->
  (l_ch_263067) -o (r_ch_263068) -o (c_263069) -o
    lazy(let _263070 := recv[L](c_263069) in
         (match _263070 with
         | ex1LL_49 m_263071 n_263072 =>
           (match m_263071 with
           | Free_17 =>
             let l_ch_263073 := send(l_ch_263067, constr0(Free_17)) in
             let r_ch_263074 := send(r_ch_263068, constr0(Free_17)) in
             let __263075 := close[false] l_ch_263073 in
             let __263076 := close[false] r_ch_263074 in close[true] n_263072
           | Height_18 =>
             let l_ch_263077 := send(l_ch_263067, constr0(Height_18)) in
             let r_ch_263078 := send(r_ch_263068, constr0(Height_18)) in
             let _263079 := recv[U](l_ch_263077) in
             (match _263079 with
             | ex1UL_51 m_263080 n_263081 =>
               let _263082 := recv[U](r_ch_263078) in
               (match _263082 with
               | ex1UL_51 m_263083 n_263084 =>
                 (match (__lt__ m_263080 m_263083) with
                 | true_4 =>
                   let c_263085 := send(n_263072, (__add__ m_263083 1)) in
                   force(((node_worker_263063)
                           x_263064 NULL NULL n_263081 n_263084 c_263085))
                 | false_5 =>
                   let c_263086 := send(n_263072, (__add__ m_263080 1)) in
                   force(((node_worker_263063)
                           x_263064 NULL NULL n_263081 n_263084 c_263086)))))
           | Size_19 =>
             let l_ch_263087 := send(l_ch_263067, constr0(Size_19)) in
             let r_ch_263088 := send(r_ch_263068, constr0(Size_19)) in
             let _263089 := recv[U](l_ch_263087) in
             (match _263089 with
             | ex1UL_51 m_263090 n_263091 =>
               let _263092 := recv[U](r_ch_263088) in
               (match _263092 with
               | ex1UL_51 m_263093 n_263094 =>
                 let c_263095 :=
                   send(n_263072, (__add__ (__add__ 1 m_263090) m_263093))
                 in
                 force(((node_worker_263063)
                         x_263064 NULL NULL n_263091 n_263094 c_263095))))
           | _ =>
             (match m_263071 with
             | Find_20 k_263096 =>
               (match (__eq__ x_263064 k_263096) with
               | true_4 =>
                 let c_263097 := send(n_263072, constr0(true_4)) in
                 force(((node_worker_263063)
                         x_263064 NULL NULL l_ch_263067 r_ch_263068 c_263097))
               | false_5 =>
                 let l_ch_263098 := send(l_ch_263067, (Find_20 k_263096)) in
                 let r_ch_263099 := send(r_ch_263068, (Find_20 k_263096)) in
                 let _263100 := recv[U](l_ch_263098) in
                 (match _263100 with
                 | ex1UL_51 m_263101 n_263102 =>
                   let _263103 := recv[U](r_ch_263099) in
                   (match _263103 with
                   | ex1UL_51 m_263104 n_263105 =>
                     let c_263106 :=
                       send(n_263072, ((or_13) m_263101 m_263104))
                     in
                     force(((node_worker_263063)
                             x_263064 NULL NULL n_263102 n_263105 c_263106)))))))))

def cleaf_43 :=
  lam (__263107) -> lazy(fork lam (_263108) -o ((leaf_worker_41) _263108))

def cnode_44 :=
  lam (x_263109) -> (l_263110) -> (r_263111) -> (__263112) -o (__263113) -o
    lazy(let l_ch_263114 := force(__263112) in
         let r_ch_263115 := force(__263113) in
         fork
           lam (_263116) -o
             ((node_worker_42)
               x_263109 NULL NULL l_ch_263114 r_ch_263115 _263116))

def ctree_of_tree_45 :=
  fun ctree_of_tree_263117 (x_263118) ->
    (match x_263118 with
    | Leaf_15 => ((cleaf_43) constr0(ttU_28))
    | _ =>
      (match x_263118 with
      | Node_16 __263119 l_263120 r_263121 =>
        ((cnode_44)
          __263119 NULL NULL ((ctree_of_tree_263117) l_263120)
            ((ctree_of_tree_263117) r_263121))))

def cfree_46 :=
  lam (t_263122) -> (ct_263123) ->
    lazy(let c_263124 := force(ct_263123) in
         let c_263125 := send(c_263124, constr0(Free_17)) in
         close[false] c_263125)

def cheight_47 :=
  lam (t_263126) -> (ct_263127) ->
    lazy(let c_263128 := force(ct_263127) in
         let c_263129 := send(c_263128, constr0(Height_18)) in
         let _263130 := recv[U](c_263129) in
         (match _263130 with
         | ex1UL_51 m_263131 n_263132 => (ex1UL_51 m_263131 lazy(n_263132))))

def csize_48 :=
  lam (t_263133) -> (ct_263134) ->
    lazy(let c_263135 := force(ct_263134) in
         let c_263136 := send(c_263135, constr0(Size_19)) in
         let _263137 := recv[U](c_263136) in
         (match _263137 with
         | ex1UL_51 m_263138 n_263139 => (ex1UL_51 m_263138 lazy(n_263139))))

def cfind_49 :=
  lam (k_263140) -> (t_263141) -> (ct_263142) ->
    lazy(let c_263143 := force(ct_263142) in
         let c_263144 := send(c_263143, (Find_20 k_263140)) in
         let _263145 := recv[U](c_263144) in
         (match _263145 with
         | ex1UL_51 m_263146 n_263147 => (ex1UL_51 m_263146 lazy(n_263147))))

def mytree1_50 :=
  lam (x_263148) ->
    ((cnode_44)
      x_263148 NULL NULL ((cleaf_43) constr0(ttU_28))
        ((cleaf_43) constr0(ttU_28)))

def mytree2_51 :=
  lam (x_263149) ->
    ((cnode_44) x_263149 NULL NULL ((mytree1_50) 1) ((mytree1_50) 2))

def mytree3_52 :=
  lam (x_263150) ->
    ((cnode_44) x_263150 NULL NULL ((mytree2_51) 3) ((mytree2_51) 4))

def mytree4_53 :=
  lam (x_263151) ->
    ((cnode_44) x_263151 NULL NULL ((mytree3_52) 8) ((mytree3_52) 7))

def mytree5_54 :=
  lam (x_263152) ->
    ((cnode_44) x_263152 NULL NULL ((mytree4_53) 9) ((mytree4_53) 10))

def mytree6_55 :=
  lam (x_263153) ->
    ((cnode_44) x_263153 NULL NULL ((mytree5_54) 11) ((mytree5_54) 12))

def main :=
  let ct_263154 := ((mytree6_55) 100) in
  lazy(let _263155 := force(((cheight_47) NULL ct_263154)) in
       (match _263155 with
       | ex1UL_51 m_263156 n_263157 =>
         let _263158 := force(((csize_48) NULL n_263157)) in
         (match _263158 with
         | ex1UL_51 m_263159 n_263160 =>
           let _263161 := force(((cfind_49) 1 NULL n_263160)) in
           (match _263161 with
           | ex1UL_51 m_263162 n_263163 =>
             let _263164 := force(((cfree_46) NULL n_263163)) in
             (match _263164 with
             | ttU_28 =>
               print
                 (__cat__
                   (__cat__
                     (__cat__
                       (__cat__
                         (__cat__
                           (__cat__
                             (__cat__
                               (__cat__ "height := "
                                 ((string_of_int_33) m_263156))
                               "\n")
                             "size   := ")
                           ((string_of_int_33) m_263159))
                         "\n")
                       "find   := ")
                     ((string_of_bool_15) m_263162))
                   "\n"))))))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn string_of_bool_98(__99%U) {
  match(__99){
    true_4 => {
      x_101 := str("true");
      x_100 := x_101;
    }
    false_5 => {
      x_102 := str("false");
      x_100 := x_102;
    }
  }
  return x_100;
}

fn lte_103(__104%U, __105%U) {
  match(__104){
    zero_6 => {
      x_106 := true_4;
    }
    _ => {
      match[U](__104){
        succ_7(n_108) => {
          match(__105){
            zero_6 => {
              x_109 := false_5;
            }
            _ => {
              match[U](__105){
                succ_7(n_111) => {
                  x_112 := lte_103(n_108, n_111);
                  x_110 := x_112;
                }
              }
              x_109 := x_110;
            }
          }
          x_107 := x_109;
        }
      }
      x_106 := x_107;
    }
  }
  return x_106;
}

fn lt_113(x_114%U, y_115%U) {
  x_117 := mkconstr(succ_7, [x_114]);
  x_116 := lte_103(x_117, y_115);
  return x_116;
}

fn pred_118(__119%U) {
  match(__119){
    zero_6 => {
      x_120 := zero_6;
    }
    _ => {
      match[U](__119){ succ_7(n_122) => {
                         x_121 := n_122;
                       } }
      x_120 := x_121;
    }
  }
  return x_120;
}

fn add_123(__124%U, __125%U) {
  match(__124){
    zero_6 => {
      x_126 := __125;
    }
    _ => {
      match[U](__124){
        succ_7(n_128) => {
          x_129 := add_123(n_128, __125);
          x_130 := mkconstr(succ_7, [x_129]);
          x_127 := x_130;
        }
      }
      x_126 := x_127;
    }
  }
  return x_126;
}

fn sub_131(__132%U, __133%U) {
  match(__133){
    zero_6 => {
      x_134 := __132;
    }
    _ => {
      match[U](__133){
        succ_7(n_136) => {
          x_138 := pred_118(__132);
          x_137 := sub_131(x_138, n_136);
          x_135 := x_137;
        }
      }
      x_134 := x_135;
    }
  }
  return x_134;
}

fn mul_139(__140%U, __141%U) {
  match(__140){
    zero_6 => {
      x_142 := zero_6;
    }
    _ => {
      match[U](__140){
        succ_7(n_144) => {
          x_146 := mul_139(n_144, __141);
          x_145 := add_123(__141, x_146);
          x_143 := x_145;
        }
      }
      x_142 := x_143;
    }
  }
  return x_142;
}

fn div_147(x_148%U, y_149%U) {
  x_151 := lt_113(x_148, y_149);
  match(x_151){
    true_4 => {
      x_150 := zero_6;
    }
    false_5 => {
      x_153 :=
        fn loop_154(x_155%U, y_156%U) {
          x_159 := pred_118(y_156);
          x_158 := sub_131(x_155, x_159);
          match(x_158){
            zero_6 => {
              x_157 := zero_6;
            }
            _ => {
              x_162 := pred_118(y_156);
              x_161 := sub_131(x_155, x_162);
              match[U](x_161){
                succ_7(n_163) => {
                  x_164 := loop_154(n_163, y_156);
                  x_165 := mkconstr(succ_7, [x_164]);
                  x_160 := x_165;
                }
              }
              x_157 := x_160;
            }
          }
          return x_157;
        };
      loop_152 := x_153;
      x_166 := loop_152(x_148, y_149);
      x_150 := x_166;
    }
  }
  return x_150;
}

fn rem_167(x_168%U, y_169%U) {
  x_172 := div_147(x_168, y_169);
  x_171 := mul_139(x_172, y_169);
  x_170 := sub_131(x_168, x_171);
  return x_170;
}

fn rconsUU_173(A_174%U, __175%L, __176%L) {
  match(__175){
    nilUU_39 => {
      x_178 := mkconstr(consUU_40, [__176, nilUU_39]);
      x_177 := x_178;
    }
    _ => {
      match[U](__175){
        consUU_40(hd_180, tl_181) => {
          x_182 := rconsUU_173(NULL, tl_181, __176);
          x_183 := mkconstr(consUU_40, [hd_180, x_182]);
          x_179 := x_183;
        }
      }
      x_177 := x_179;
    }
  }
  return x_177;
}

fn rconsUL_184(A_185%U, __186%L, __187%L) {
  match(__186){
    nilUL_37 => {
      x_189 := mkconstr(consUL_38, [__187, nilUL_37]);
      x_188 := x_189;
    }
    _ => {
      match[L](__186){
        consUL_38(hd_191, tl_192) => {
          x_193 := rconsUL_184(NULL, tl_192, __187);
          x_194 := mkconstr(consUL_38, [hd_191, x_193]);
          x_190 := x_194;
        }
      }
      x_188 := x_190;
    }
  }
  return x_188;
}

fn rconsLL_195(A_196%U, __197%L, __198%L) {
  match(__197){
    nilLL_33 => {
      x_200 := mkconstr(consLL_34, [__198, nilLL_33]);
      x_199 := x_200;
    }
    _ => {
      match[L](__197){
        consLL_34(hd_202, tl_203) => {
          x_204 := rconsLL_195(NULL, tl_203, __198);
          x_205 := mkconstr(consLL_34, [hd_202, x_204]);
          x_201 := x_205;
        }
      }
      x_199 := x_201;
    }
  }
  return x_199;
}

fn free_listUU_206(A_207%U, f_208%U, __209%U) {
  match(__209){
    nilUU_39 => {
      x_210 := ttU_28;
    }
    _ => {
      match[U](__209){
        consUU_40(hd_212, tl_213) => {
          x_215 := f_208(hd_212);
          __214 := x_215;
          x_216 := free_listUU_206(NULL, f_208, tl_213);
          x_211 := x_216;
        }
      }
      x_210 := x_211;
    }
  }
  return x_210;
}

fn free_listUL_217(A_218%U, f_219%U, __220%U) {
  match(__220){
    nilUL_37 => {
      x_221 := ttU_28;
    }
    _ => {
      match[L](__220){
        consUL_38(hd_223, tl_224) => {
          x_226 := f_219(hd_223);
          __225 := x_226;
          x_227 := free_listUL_217(NULL, f_219, tl_224);
          x_222 := x_227;
        }
      }
      x_221 := x_222;
    }
  }
  return x_221;
}

fn free_listLL_228(A_229%U, f_230%U, __231%U) {
  match(__231){
    nilLL_33 => {
      x_232 := ttU_28;
    }
    _ => {
      match[L](__231){
        consLL_34(hd_234, tl_235) => {
          x_237 := f_230(hd_234);
          __236 := x_237;
          x_238 := free_listLL_228(NULL, f_230, tl_235);
          x_233 := x_238;
        }
      }
      x_232 := x_233;
    }
  }
  return x_232;
}

fn pow_239(x_240%U, y_241%U) {
  x_243 :=
    fn loop_244(acc_245%U, y_246%U) {
      x_248 := lte(y_246, 0);
      match(x_248){
        true_4 => {
          x_247 := acc_245;
        }
        false_5 => {
          x_250 := mul(x_240, acc_245);
          x_251 := sub(y_246, 1);
          x_249 := loop_244(x_250, x_251);
          x_247 := x_249;
        }
      }
      return x_247;
    };
  loop_242 := x_243;
  x_252 := loop_242(1, y_241);
  return x_252;
}

fn powm_253(x_254%U, y_255%U, m_256%U) {
  x_258 :=
    fn loop_259(acc_260%U, y_261%U) {
      x_263 := lte(y_261, 0);
      match(x_263){
        true_4 => {
          x_262 := acc_260;
        }
        false_5 => {
          x_266 := mul(x_254, acc_260);
          x_265 := mod(x_266, m_256);
          x_267 := sub(y_261, 1);
          x_264 := loop_259(x_265, x_267);
          x_262 := x_264;
        }
      }
      return x_262;
    };
  loop_257 := x_258;
  x_268 := loop_257(1, y_255);
  return x_268;
}

fn ord_269(c_270%U) {
  x_271 := ord(c_270);
  return x_271;
}

fn chr_272(i_273%U) {
  x_274 := chr(i_273);
  return x_274;
}

fn str_275(c_276%U) {
  x_278 := str("");
  x_277 := push(x_278, c_276);
  return x_277;
}

fn strlen_279(s_280%U) {
  x_281 := size(s_280);
  return x_281;
}

fn string_of_int_282(i_283%U) {
  x_285 :=
    fn aux_286(i_287%U) {
      x_289 := lte(10, i_287);
      match(x_289){
        true_4 => {
          x_291 := mod(i_287, 10);
          r_290 := x_291;
          x_293 := div(i_287, 10);
          i_292 := x_293;
          x_295 := aux_286(i_292);
          x_298 := ord_269(0);
          x_297 := add(r_290, x_298);
          x_296 := chr_272(x_297);
          x_294 := push(x_295, x_296);
          x_288 := x_294;
        }
        false_5 => {
          x_302 := ord_269(0);
          x_301 := add(i_287, x_302);
          x_300 := chr_272(x_301);
          x_299 := str_275(x_300);
          x_288 := x_299;
        }
      }
      return x_288;
    };
  aux_284 := x_285;
  x_304 := lte(0, i_283);
  match(x_304){
    true_4 => {
      x_305 := aux_284(i_283);
      x_303 := x_305;
    }
    false_5 => {
      x_307 := str("~");
      x_309 := neg(i_283);
      x_308 := aux_284(x_309);
      x_306 := cat(x_307, x_308);
      x_303 := x_306;
    }
  }
  return x_303;
}

fn height_310(__311%U) {
  match(__311){
    Leaf_15 => {
      x_312 := 0;
    }
    _ => {
      match[U](__311){
        Node_16(__314, l_315, r_316) => {
          x_318 := height_310(l_315);
          x_317 := x_318;
          x_320 := height_310(r_316);
          y_319 := x_320;
          x_322 := lt(x_317, y_319);
          match(x_322){
            true_4 => {
              x_323 := add(y_319, 1);
              x_321 := x_323;
            }
            false_5 => {
              x_324 := add(x_317, 1);
              x_321 := x_324;
            }
          }
          x_313 := x_321;
        }
      }
      x_312 := x_313;
    }
  }
  return x_312;
}

fn size_325(__326%U) {
  match(__326){
    Leaf_15 => {
      x_327 := 0;
    }
    _ => {
      match[U](__326){
        Node_16(__329, l_330, r_331) => {
          x_334 := size_325(l_330);
          x_333 := add(1, x_334);
          x_335 := size_325(r_331);
          x_332 := add(x_333, x_335);
          x_328 := x_332;
        }
      }
      x_327 := x_328;
    }
  }
  return x_327;
}

fn find_336(n_337%U, __338%U) {
  match(__338){
    Leaf_15 => {
      x_339 := false_5;
    }
    _ => {
      match[U](__338){
        Node_16(__341, l_342, r_343) => {
          x_345 := eq(__341, n_337);
          match(x_345){
            true_4 => {
              x_344 := true_4;
            }
            false_5 => {
              x_347 := find_336(n_337, l_342);
              x_348 := find_336(n_337, r_343);
              x_346 := or_87(x_347, x_348);
              x_344 := x_346;
            }
          }
          x_340 := x_344;
        }
      }
      x_339 := x_340;
    }
  }
  return x_339;
}

fn leaf_worker_349(c_350%U) {
  x_351 :=
    lazy {
      x_353 := recv[L](c_350);
      _352 := x_353;
      match[L](_352){
        ex1LL_49(m_355, n_356) => {
          match(m_355){
            Free_17 => {
              x_358 := close[true](n_356);
              x_357 := x_358;
            }
            Height_18 => {
              x_360 := send(n_356, 0);
              c_359 := x_360;
              x_362 := leaf_worker_349(c_359);
              x_361 := force(x_362);
              x_357 := x_361;
            }
            Size_19 => {
              x_364 := send(n_356, 0);
              c_363 := x_364;
              x_366 := leaf_worker_349(c_363);
              x_365 := force(x_366);
              x_357 := x_365;
            }
            _ => {
              match[L](m_355){
                Find_20(k_368) => {
                  x_370 := send(n_356, false_5);
                  c_369 := x_370;
                  x_372 := leaf_worker_349(c_369);
                  x_371 := force(x_372);
                  x_367 := x_371;
                }
              }
              x_357 := x_367;
            }
          }
          x_354 := x_357;
        }
      }
      return x_354;
    };
  return x_351;
}

fn node_worker_373(x_374%U, l_375%U, r_376%U, l_ch_377%L, r_ch_378%L, c_379%L) {
  x_380 :=
    lazy {
      x_382 := recv[L](c_379);
      _381 := x_382;
      match[L](_381){
        ex1LL_49(m_384, n_385) => {
          match(m_384){
            Free_17 => {
              x_388 := send(l_ch_377, Free_17);
              l_ch_387 := x_388;
              x_390 := send(r_ch_378, Free_17);
              r_ch_389 := x_390;
              x_392 := close[false](l_ch_387);
              __391 := x_392;
              x_394 := close[false](r_ch_389);
              __393 := x_394;
              x_395 := close[true](n_385);
              x_386 := x_395;
            }
            Height_18 => {
              x_397 := send(l_ch_377, Height_18);
              l_ch_396 := x_397;
              x_399 := send(r_ch_378, Height_18);
              r_ch_398 := x_399;
              x_401 := recv[U](l_ch_396);
              _400 := x_401;
              match[L](_400){
                ex1UL_51(m_403, n_404) => {
                  x_406 := recv[U](r_ch_398);
                  _405 := x_406;
                  match[L](_405){
                    ex1UL_51(m_408, n_409) => {
                      x_411 := lt(m_403, m_408);
                      match(x_411){
                        true_4 => {
                          x_414 := add(m_408, 1);
                          x_413 := send(n_385, x_414);
                          c_412 := x_413;
                          x_416 := node_worker_373(x_374, NULL, NULL, n_404, n_409, c_412);
                          x_415 := force(x_416);
                          x_410 := x_415;
                        }
                        false_5 => {
                          x_419 := add(m_403, 1);
                          x_418 := send(n_385, x_419);
                          c_417 := x_418;
                          x_421 := node_worker_373(x_374, NULL, NULL, n_404, n_409, c_417);
                          x_420 := force(x_421);
                          x_410 := x_420;
                        }
                      }
                      x_407 := x_410;
                    }
                  }
                  x_402 := x_407;
                }
              }
              x_386 := x_402;
            }
            Size_19 => {
              x_423 := send(l_ch_377, Size_19);
              l_ch_422 := x_423;
              x_425 := send(r_ch_378, Size_19);
              r_ch_424 := x_425;
              x_427 := recv[U](l_ch_422);
              _426 := x_427;
              match[L](_426){
                ex1UL_51(m_429, n_430) => {
                  x_432 := recv[U](r_ch_424);
                  _431 := x_432;
                  match[L](_431){
                    ex1UL_51(m_434, n_435) => {
                      x_439 := add(1, m_429);
                      x_438 := add(x_439, m_434);
                      x_437 := send(n_385, x_438);
                      c_436 := x_437;
                      x_441 := node_worker_373(x_374, NULL, NULL, n_430, n_435, c_436);
                      x_440 := force(x_441);
                      x_433 := x_440;
                    }
                  }
                  x_428 := x_433;
                }
              }
              x_386 := x_428;
            }
            _ => {
              match[L](m_384){
                Find_20(k_443) => {
                  x_445 := eq(x_374, k_443);
                  match(x_445){
                    true_4 => {
                      x_447 := send(n_385, true_4);
                      c_446 := x_447;
                      x_449 := node_worker_373(x_374, NULL, NULL, l_ch_377, r_ch_378, c_446);
                      x_448 := force(x_449);
                      x_444 := x_448;
                    }
                    false_5 => {
                      x_452 := mkconstr(Find_20, [k_443]);
                      x_451 := send(l_ch_377, x_452);
                      l_ch_450 := x_451;
                      x_455 := mkconstr(Find_20, [k_443]);
                      x_454 := send(r_ch_378, x_455);
                      r_ch_453 := x_454;
                      x_457 := recv[U](l_ch_450);
                      _456 := x_457;
                      match[L](_456){
                        ex1UL_51(m_459, n_460) => {
                          x_462 := recv[U](r_ch_453);
                          _461 := x_462;
                          match[L](_461){
                            ex1UL_51(m_464, n_465) => {
                              x_468 := or_87(m_459, m_464);
                              x_467 := send(n_385, x_468);
                              c_466 := x_467;
                              x_470 := node_worker_373(x_374, NULL, NULL, n_460, n_465, c_466);
                              x_469 := force(x_470);
                              x_463 := x_469;
                            }
                          }
                          x_458 := x_463;
                        }
                      }
                      x_444 := x_458;
                    }
                  }
                  x_442 := x_444;
                }
              }
              x_386 := x_442;
            }
          }
          x_383 := x_386;
        }
      }
      return x_383;
    };
  return x_380;
}

fn cleaf_471(__472%U) {
  x_473 :=
    lazy {
      x_475 :=
        fn lam_476(_477%L) { x_478 := leaf_worker_349(_477);
                             return x_478; };
      x_474 := fork(x_475);
      return x_474;
    };
  return x_473;
}

fn cnode_479(x_480%U, l_481%U, r_482%U, __483%L, __484%L) {
  x_485 :=
    lazy {
      x_487 := force(__483);
      l_ch_486 := x_487;
      x_489 := force(__484);
      r_ch_488 := x_489;
      x_491 :=
        fn lam_492(_493%L) {
          x_494 := node_worker_373(x_480, NULL, NULL, l_ch_486, r_ch_488, _493);
          return x_494;
        };
      x_490 := fork(x_491);
      return x_490;
    };
  return x_485;
}

fn ctree_of_tree_495(x_496%U) {
  match(x_496){
    Leaf_15 => {
      x_498 := cleaf_471(ttU_28);
      x_497 := x_498;
    }
    _ => {
      match[U](x_496){
        Node_16(__500, l_501, r_502) => {
          x_504 := ctree_of_tree_495(l_501);
          x_505 := ctree_of_tree_495(r_502);
          x_503 := cnode_479(__500, NULL, NULL, x_504, x_505);
          x_499 := x_503;
        }
      }
      x_497 := x_499;
    }
  }
  return x_497;
}

fn cfree_506(t_507%U, ct_508%U) {
  x_509 :=
    lazy {
      x_511 := force(ct_508);
      c_510 := x_511;
      x_513 := send(c_510, Free_17);
      c_512 := x_513;
      x_514 := close[false](c_512);
      return x_514;
    };
  return x_509;
}

fn cheight_515(t_516%U, ct_517%U) {
  x_518 :=
    lazy {
      x_520 := force(ct_517);
      c_519 := x_520;
      x_522 := send(c_519, Height_18);
      c_521 := x_522;
      x_524 := recv[U](c_521);
      _523 := x_524;
      match[L](_523){
        ex1UL_51(m_526, n_527) => {
          x_528 := lazy { 
                          return n_527; };
          x_529 := mkconstr(ex1UL_51, [m_526, x_528]);
          x_525 := x_529;
        }
      }
      return x_525;
    };
  return x_518;
}

fn csize_530(t_531%U, ct_532%U) {
  x_533 :=
    lazy {
      x_535 := force(ct_532);
      c_534 := x_535;
      x_537 := send(c_534, Size_19);
      c_536 := x_537;
      x_539 := recv[U](c_536);
      _538 := x_539;
      match[L](_538){
        ex1UL_51(m_541, n_542) => {
          x_543 := lazy { 
                          return n_542; };
          x_544 := mkconstr(ex1UL_51, [m_541, x_543]);
          x_540 := x_544;
        }
      }
      return x_540;
    };
  return x_533;
}

fn cfind_545(k_546%U, t_547%U, ct_548%U) {
  x_549 :=
    lazy {
      x_551 := force(ct_548);
      c_550 := x_551;
      x_554 := mkconstr(Find_20, [k_546]);
      x_553 := send(c_550, x_554);
      c_552 := x_553;
      x_556 := recv[U](c_552);
      _555 := x_556;
      match[L](_555){
        ex1UL_51(m_558, n_559) => {
          x_560 := lazy { 
                          return n_559; };
          x_561 := mkconstr(ex1UL_51, [m_558, x_560]);
          x_557 := x_561;
        }
      }
      return x_557;
    };
  return x_549;
}

fn mytree1_562(x_563%U) {
  x_565 := cleaf_471(ttU_28);
  x_566 := cleaf_471(ttU_28);
  x_564 := cnode_479(x_563, NULL, NULL, x_565, x_566);
  return x_564;
}

fn mytree2_567(x_568%U) {
  x_570 := mytree1_562(1);
  x_571 := mytree1_562(2);
  x_569 := cnode_479(x_568, NULL, NULL, x_570, x_571);
  return x_569;
}

fn mytree3_572(x_573%U) {
  x_575 := mytree2_567(3);
  x_576 := mytree2_567(4);
  x_574 := cnode_479(x_573, NULL, NULL, x_575, x_576);
  return x_574;
}

fn mytree4_577(x_578%U) {
  x_580 := mytree3_572(8);
  x_581 := mytree3_572(7);
  x_579 := cnode_479(x_578, NULL, NULL, x_580, x_581);
  return x_579;
}

fn mytree5_582(x_583%U) {
  x_585 := mytree4_577(9);
  x_586 := mytree4_577(10);
  x_584 := cnode_479(x_583, NULL, NULL, x_585, x_586);
  return x_584;
}

fn mytree6_587(x_588%U) {
  x_590 := mytree5_582(11);
  x_591 := mytree5_582(12);
  x_589 := cnode_479(x_588, NULL, NULL, x_590, x_591);
  return x_589;
}

main := {
  x_593 := mytree6_587(100);
  ct_592 := x_593;
  x_594 :=
    lazy {
      x_597 := cheight_515(NULL, ct_592);
      x_596 := force(x_597);
      _595 := x_596;
      match[L](_595){
        ex1UL_51(m_599, n_600) => {
          x_603 := csize_530(NULL, n_600);
          x_602 := force(x_603);
          _601 := x_602;
          match[L](_601){
            ex1UL_51(m_605, n_606) => {
              x_609 := cfind_545(1, NULL, n_606);
              x_608 := force(x_609);
              _607 := x_608;
              match[L](_607){
                ex1UL_51(m_611, n_612) => {
                  x_615 := cfree_506(NULL, n_612);
                  x_614 := force(x_615);
                  _613 := x_614;
                  match(_613){
                    ttU_28 => {
                      x_626 := str("height := ");
                      x_627 := string_of_int_282(m_599);
                      x_625 := cat(x_626, x_627);
                      x_628 := str("\n");
                      x_624 := cat(x_625, x_628);
                      x_629 := str("size   := ");
                      x_623 := cat(x_624, x_629);
                      x_630 := string_of_int_282(m_605);
                      x_622 := cat(x_623, x_630);
                      x_631 := str("\n");
                      x_621 := cat(x_622, x_631);
                      x_632 := str("find   := ");
                      x_620 := cat(x_621, x_632);
                      x_633 := string_of_bool_98(m_611);
                      x_619 := cat(x_620, x_633);
                      x_634 := str("\n");
                      x_618 := cat(x_619, x_634);
                      x_617 := print(x_618);
                      x_616 := x_617;
                    }
                  }
                  x_610 := x_616;
                }
              }
              x_604 := x_610;
            }
          }
          x_598 := x_604;
        }
      }
      return x_598;
    };
  return x_594;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn string_of_bool_98(__99%U) {
  match(__99){
    true_4 => {
      x_101 := str("true");
      x_100 := x_101;
    }
    false_5 => {
      x_102 := str("false");
      x_100 := x_102;
    }
  }
  return x_100;
}

fn lte_103(__104%U, __105%U) {
  match(__104){
    zero_6 => {
      x_106 := true_4;
    }
    _ => {
      match[U](__104){
        succ_7(n_108) => {
          match(__105){
            zero_6 => {
              x_109 := false_5;
            }
            _ => {
              match[U](__105){
                succ_7(n_111) => {
                  x_112 := lte_103(n_108, n_111);
                  x_110 := x_112;
                }
              }
              x_109 := x_110;
            }
          }
          x_107 := x_109;
        }
      }
      x_106 := x_107;
    }
  }
  return x_106;
}

fn lt_113(x_114%U, y_115%U) {
  x_117 := mkconstr(succ_7, [x_114]);
  x_116 := lte_103(x_117, y_115);
  return x_116;
}

fn pred_118(__119%U) {
  match(__119){
    zero_6 => {
      x_120 := zero_6;
    }
    _ => {
      match[U](__119){ succ_7(n_122) => {
                         x_121 := n_122;
                       } }
      x_120 := x_121;
    }
  }
  return x_120;
}

fn add_123(__124%U, __125%U) {
  match(__124){
    zero_6 => {
      x_126 := __125;
    }
    _ => {
      match[U](__124){
        succ_7(n_128) => {
          x_129 := add_123(n_128, __125);
          x_130 := mkconstr(succ_7, [x_129]);
          x_127 := x_130;
        }
      }
      x_126 := x_127;
    }
  }
  return x_126;
}

fn sub_131(__132%U, __133%U) {
  match(__133){
    zero_6 => {
      x_134 := __132;
    }
    _ => {
      match[U](__133){
        succ_7(n_136) => {
          x_138 := pred_118(__132);
          x_137 := sub_131(x_138, n_136);
          x_135 := x_137;
        }
      }
      x_134 := x_135;
    }
  }
  return x_134;
}

fn mul_139(__140%U, __141%U) {
  match(__140){
    zero_6 => {
      x_142 := zero_6;
    }
    _ => {
      match[U](__140){
        succ_7(n_144) => {
          x_146 := mul_139(n_144, __141);
          x_145 := add_123(__141, x_146);
          x_143 := x_145;
        }
      }
      x_142 := x_143;
    }
  }
  return x_142;
}

fn div_147(x_148%U, y_149%U) {
  x_151 := lt_113(x_148, y_149);
  match(x_151){
    true_4 => {
      x_150 := zero_6;
    }
    false_5 => {
      x_153 :=
        fn loop_154(x_155%U, y_156%U) {
          x_159 := pred_118(y_156);
          x_158 := sub_131(x_155, x_159);
          match(x_158){
            zero_6 => {
              x_157 := zero_6;
            }
            _ => {
              x_162 := pred_118(y_156);
              x_161 := sub_131(x_155, x_162);
              match[U](x_161){
                succ_7(n_163) => {
                  x_164 := loop_154(n_163, y_156);
                  x_165 := mkconstr(succ_7, [x_164]);
                  x_160 := x_165;
                }
              }
              x_157 := x_160;
            }
          }
          return x_157;
        };
      loop_152 := x_153;
      x_166 := loop_152(x_148, y_149);
      x_150 := x_166;
    }
  }
  return x_150;
}

fn rem_167(x_168%U, y_169%U) {
  x_172 := div_147(x_168, y_169);
  x_171 := mul_139(x_172, y_169);
  x_170 := sub_131(x_168, x_171);
  return x_170;
}

fn rconsUU_173(A_174%U, __175%L, __176%L) {
  match(__175){
    nilUU_39 => {
      x_178 := mkconstr(consUU_40, [__176, nilUU_39]);
      x_177 := x_178;
    }
    _ => {
      match[U](__175){
        consUU_40(hd_180, tl_181) => {
          x_182 := rconsUU_173(NULL, tl_181, __176);
          x_183 := mkconstr(consUU_40, [hd_180, x_182]);
          x_179 := x_183;
        }
      }
      x_177 := x_179;
    }
  }
  return x_177;
}

fn rconsUL_184(A_185%U, __186%L, __187%L) {
  match(__186){
    nilUL_37 => {
      x_189 := mkconstr(consUL_38, [__187, nilUL_37]);
      x_188 := x_189;
    }
    _ => {
      match[L](__186){
        consUL_38(hd_191, tl_192) => {
          x_193 := rconsUL_184(NULL, tl_192, __187);
          x_194 := reconstr(__186, consUL_38, [hd_191, x_193]);
          x_190 := x_194;
        }
      }
      x_188 := x_190;
    }
  }
  return x_188;
}

fn rconsLL_195(A_196%U, __197%L, __198%L) {
  match(__197){
    nilLL_33 => {
      x_200 := mkconstr(consLL_34, [__198, nilLL_33]);
      x_199 := x_200;
    }
    _ => {
      match[L](__197){
        consLL_34(hd_202, tl_203) => {
          x_204 := rconsLL_195(NULL, tl_203, __198);
          x_205 := reconstr(__197, consLL_34, [hd_202, x_204]);
          x_201 := x_205;
        }
      }
      x_199 := x_201;
    }
  }
  return x_199;
}

fn free_listUU_206(A_207%U, f_208%U, __209%U) {
  match(__209){
    nilUU_39 => {
      x_210 := ttU_28;
    }
    _ => {
      match[U](__209){
        consUU_40(hd_212, tl_213) => {
          x_215 := f_208(hd_212);
          __214 := x_215;
          x_216 := free_listUU_206(NULL, f_208, tl_213);
          x_211 := x_216;
        }
      }
      x_210 := x_211;
    }
  }
  return x_210;
}

fn free_listUL_217(A_218%U, f_219%U, __220%U) {
  match(__220){
    nilUL_37 => {
      x_221 := ttU_28;
    }
    _ => {
      match[L](__220){
        consUL_38(hd_223, tl_224) => {
          x_226 := f_219(hd_223);
          __225 := x_226;
          x_227 := free_listUL_217(NULL, f_219, tl_224);
          x_222 := x_227;
          free(__220);
        }
      }
      x_221 := x_222;
    }
  }
  return x_221;
}

fn free_listLL_228(A_229%U, f_230%U, __231%U) {
  match(__231){
    nilLL_33 => {
      x_232 := ttU_28;
    }
    _ => {
      match[L](__231){
        consLL_34(hd_234, tl_235) => {
          x_237 := f_230(hd_234);
          __236 := x_237;
          x_238 := free_listLL_228(NULL, f_230, tl_235);
          x_233 := x_238;
          free(__231);
        }
      }
      x_232 := x_233;
    }
  }
  return x_232;
}

fn pow_239(x_240%U, y_241%U) {
  x_243 :=
    fn loop_244(acc_245%U, y_246%U) {
      x_248 := lte(y_246, 0);
      match(x_248){
        true_4 => {
          x_247 := acc_245;
        }
        false_5 => {
          x_250 := mul(x_240, acc_245);
          x_251 := sub(y_246, 1);
          x_249 := loop_244(x_250, x_251);
          x_247 := x_249;
        }
      }
      return x_247;
    };
  loop_242 := x_243;
  x_252 := loop_242(1, y_241);
  return x_252;
}

fn powm_253(x_254%U, y_255%U, m_256%U) {
  x_258 :=
    fn loop_259(acc_260%U, y_261%U) {
      x_263 := lte(y_261, 0);
      match(x_263){
        true_4 => {
          x_262 := acc_260;
        }
        false_5 => {
          x_266 := mul(x_254, acc_260);
          x_265 := mod(x_266, m_256);
          x_267 := sub(y_261, 1);
          x_264 := loop_259(x_265, x_267);
          x_262 := x_264;
        }
      }
      return x_262;
    };
  loop_257 := x_258;
  x_268 := loop_257(1, y_255);
  return x_268;
}

fn ord_269(c_270%U) {
  x_271 := ord(c_270);
  return x_271;
}

fn chr_272(i_273%U) {
  x_274 := chr(i_273);
  return x_274;
}

fn str_275(c_276%U) {
  x_278 := str("");
  x_277 := push(x_278, c_276);
  return x_277;
}

fn strlen_279(s_280%U) {
  x_281 := size(s_280);
  return x_281;
}

fn string_of_int_282(i_283%U) {
  x_285 :=
    fn aux_286(i_287%U) {
      x_289 := lte(10, i_287);
      match(x_289){
        true_4 => {
          x_291 := mod(i_287, 10);
          r_290 := x_291;
          x_293 := div(i_287, 10);
          i_292 := x_293;
          x_295 := aux_286(i_292);
          x_298 := ord_269(0);
          x_297 := add(r_290, x_298);
          x_296 := chr_272(x_297);
          x_294 := push(x_295, x_296);
          x_288 := x_294;
        }
        false_5 => {
          x_302 := ord_269(0);
          x_301 := add(i_287, x_302);
          x_300 := chr_272(x_301);
          x_299 := str_275(x_300);
          x_288 := x_299;
        }
      }
      return x_288;
    };
  aux_284 := x_285;
  x_304 := lte(0, i_283);
  match(x_304){
    true_4 => {
      x_305 := aux_284(i_283);
      x_303 := x_305;
    }
    false_5 => {
      x_307 := str("~");
      x_309 := neg(i_283);
      x_308 := aux_284(x_309);
      x_306 := cat(x_307, x_308);
      x_303 := x_306;
    }
  }
  return x_303;
}

fn height_310(__311%U) {
  match(__311){
    Leaf_15 => {
      x_312 := 0;
    }
    _ => {
      match[U](__311){
        Node_16(__314, l_315, r_316) => {
          x_318 := height_310(l_315);
          x_317 := x_318;
          x_320 := height_310(r_316);
          y_319 := x_320;
          x_322 := lt(x_317, y_319);
          match(x_322){
            true_4 => {
              x_323 := add(y_319, 1);
              x_321 := x_323;
            }
            false_5 => {
              x_324 := add(x_317, 1);
              x_321 := x_324;
            }
          }
          x_313 := x_321;
        }
      }
      x_312 := x_313;
    }
  }
  return x_312;
}

fn size_325(__326%U) {
  match(__326){
    Leaf_15 => {
      x_327 := 0;
    }
    _ => {
      match[U](__326){
        Node_16(__329, l_330, r_331) => {
          x_334 := size_325(l_330);
          x_333 := add(1, x_334);
          x_335 := size_325(r_331);
          x_332 := add(x_333, x_335);
          x_328 := x_332;
        }
      }
      x_327 := x_328;
    }
  }
  return x_327;
}

fn find_336(n_337%U, __338%U) {
  match(__338){
    Leaf_15 => {
      x_339 := false_5;
    }
    _ => {
      match[U](__338){
        Node_16(__341, l_342, r_343) => {
          x_345 := eq(__341, n_337);
          match(x_345){
            true_4 => {
              x_344 := true_4;
            }
            false_5 => {
              x_347 := find_336(n_337, l_342);
              x_348 := find_336(n_337, r_343);
              x_346 := or_87(x_347, x_348);
              x_344 := x_346;
            }
          }
          x_340 := x_344;
        }
      }
      x_339 := x_340;
    }
  }
  return x_339;
}

fn leaf_worker_349(c_350%U) {
  x_351 :=
    lazy {
      x_353 := recv[L](c_350);
      _352 := x_353;
      match[L](_352){
        ex1LL_49(m_355, n_356) => {
          match(m_355){
            Free_17 => {
              x_358 := close[true](n_356);
              x_357 := x_358;
            }
            Height_18 => {
              x_360 := send(n_356, 0);
              c_359 := x_360;
              x_362 := leaf_worker_349(c_359);
              x_361 := force(x_362);
              x_357 := x_361;
            }
            Size_19 => {
              x_364 := send(n_356, 0);
              c_363 := x_364;
              x_366 := leaf_worker_349(c_363);
              x_365 := force(x_366);
              x_357 := x_365;
            }
            _ => {
              match[L](m_355){
                Find_20(k_368) => {
                  x_370 := send(n_356, false_5);
                  c_369 := x_370;
                  x_372 := leaf_worker_349(c_369);
                  x_371 := force(x_372);
                  x_367 := x_371;
                  free(m_355);
                }
              }
              x_357 := x_367;
            }
          }
          x_354 := x_357;
          free(_352);
        }
      }
      return x_354;
    };
  return x_351;
}

fn node_worker_373(x_374%U, l_375%U, r_376%U, l_ch_377%L, r_ch_378%L, c_379%L) {
  x_380 :=
    lazy {
      x_382 := recv[L](c_379);
      _381 := x_382;
      match[L](_381){
        ex1LL_49(m_384, n_385) => {
          match(m_384){
            Free_17 => {
              x_388 := send(l_ch_377, Free_17);
              l_ch_387 := x_388;
              x_390 := send(r_ch_378, Free_17);
              r_ch_389 := x_390;
              x_392 := close[false](l_ch_387);
              __391 := x_392;
              x_394 := close[false](r_ch_389);
              __393 := x_394;
              x_395 := close[true](n_385);
              x_386 := x_395;
            }
            Height_18 => {
              x_397 := send(l_ch_377, Height_18);
              l_ch_396 := x_397;
              x_399 := send(r_ch_378, Height_18);
              r_ch_398 := x_399;
              x_401 := recv[U](l_ch_396);
              _400 := x_401;
              match[L](_400){
                ex1UL_51(m_403, n_404) => {
                  x_406 := recv[U](r_ch_398);
                  _405 := x_406;
                  match[L](_405){
                    ex1UL_51(m_408, n_409) => {
                      x_411 := lt(m_403, m_408);
                      match(x_411){
                        true_4 => {
                          x_414 := add(m_408, 1);
                          x_413 := send(n_385, x_414);
                          c_412 := x_413;
                          x_416 := node_worker_373(x_374, NULL, NULL, n_404, n_409, c_412);
                          x_415 := force(x_416);
                          x_410 := x_415;
                        }
                        false_5 => {
                          x_419 := add(m_403, 1);
                          x_418 := send(n_385, x_419);
                          c_417 := x_418;
                          x_421 := node_worker_373(x_374, NULL, NULL, n_404, n_409, c_417);
                          x_420 := force(x_421);
                          x_410 := x_420;
                        }
                      }
                      x_407 := x_410;
                      free(_405);
                    }
                  }
                  x_402 := x_407;
                  free(_400);
                }
              }
              x_386 := x_402;
            }
            Size_19 => {
              x_423 := send(l_ch_377, Size_19);
              l_ch_422 := x_423;
              x_425 := send(r_ch_378, Size_19);
              r_ch_424 := x_425;
              x_427 := recv[U](l_ch_422);
              _426 := x_427;
              match[L](_426){
                ex1UL_51(m_429, n_430) => {
                  x_432 := recv[U](r_ch_424);
                  _431 := x_432;
                  match[L](_431){
                    ex1UL_51(m_434, n_435) => {
                      x_439 := add(1, m_429);
                      x_438 := add(x_439, m_434);
                      x_437 := send(n_385, x_438);
                      c_436 := x_437;
                      x_441 := node_worker_373(x_374, NULL, NULL, n_430, n_435, c_436);
                      x_440 := force(x_441);
                      x_433 := x_440;
                      free(_431);
                    }
                  }
                  x_428 := x_433;
                  free(_426);
                }
              }
              x_386 := x_428;
            }
            _ => {
              match[L](m_384){
                Find_20(k_443) => {
                  x_445 := eq(x_374, k_443);
                  match(x_445){
                    true_4 => {
                      x_447 := send(n_385, true_4);
                      c_446 := x_447;
                      x_449 := node_worker_373(x_374, NULL, NULL, l_ch_377, r_ch_378, c_446);
                      x_448 := force(x_449);
                      x_444 := x_448;
                    }
                    false_5 => {
                      x_452 := mkconstr(Find_20, [k_443]);
                      x_451 := send(l_ch_377, x_452);
                      l_ch_450 := x_451;
                      x_455 := mkconstr(Find_20, [k_443]);
                      x_454 := send(r_ch_378, x_455);
                      r_ch_453 := x_454;
                      x_457 := recv[U](l_ch_450);
                      _456 := x_457;
                      match[L](_456){
                        ex1UL_51(m_459, n_460) => {
                          x_462 := recv[U](r_ch_453);
                          _461 := x_462;
                          match[L](_461){
                            ex1UL_51(m_464, n_465) => {
                              x_468 := or_87(m_459, m_464);
                              x_467 := send(n_385, x_468);
                              c_466 := x_467;
                              x_470 := node_worker_373(x_374, NULL, NULL, n_460, n_465, c_466);
                              x_469 := force(x_470);
                              x_463 := x_469;
                              free(_461);
                            }
                          }
                          x_458 := x_463;
                          free(_456);
                        }
                      }
                      x_444 := x_458;
                    }
                  }
                  x_442 := x_444;
                  free(m_384);
                }
              }
              x_386 := x_442;
            }
          }
          x_383 := x_386;
          free(_381);
        }
      }
      return x_383;
    };
  return x_380;
}

fn cleaf_471(__472%U) {
  x_473 :=
    lazy {
      x_475 :=
        fn lam_476(_477%L) { x_478 := leaf_worker_349(_477);
                             return x_478; };
      x_474 := fork(x_475);
      return x_474;
    };
  return x_473;
}

fn cnode_479(x_480%U, l_481%U, r_482%U, __483%L, __484%L) {
  x_485 :=
    lazy {
      x_487 := force(__483);
      l_ch_486 := x_487;
      x_489 := force(__484);
      r_ch_488 := x_489;
      x_491 :=
        fn lam_492(_493%L) {
          x_494 := node_worker_373(x_480, NULL, NULL, l_ch_486, r_ch_488, _493);
          return x_494;
        };
      x_490 := fork(x_491);
      return x_490;
    };
  return x_485;
}

fn ctree_of_tree_495(x_496%U) {
  match(x_496){
    Leaf_15 => {
      x_498 := cleaf_471(ttU_28);
      x_497 := x_498;
    }
    _ => {
      match[U](x_496){
        Node_16(__500, l_501, r_502) => {
          x_504 := ctree_of_tree_495(l_501);
          x_505 := ctree_of_tree_495(r_502);
          x_503 := cnode_479(__500, NULL, NULL, x_504, x_505);
          x_499 := x_503;
        }
      }
      x_497 := x_499;
    }
  }
  return x_497;
}

fn cfree_506(t_507%U, ct_508%U) {
  x_509 :=
    lazy {
      x_511 := force(ct_508);
      c_510 := x_511;
      x_513 := send(c_510, Free_17);
      c_512 := x_513;
      x_514 := close[false](c_512);
      return x_514;
    };
  return x_509;
}

fn cheight_515(t_516%U, ct_517%U) {
  x_518 :=
    lazy {
      x_520 := force(ct_517);
      c_519 := x_520;
      x_522 := send(c_519, Height_18);
      c_521 := x_522;
      x_524 := recv[U](c_521);
      _523 := x_524;
      match[L](_523){
        ex1UL_51(m_526, n_527) => {
          x_528 := lazy { 
                          return n_527; };
          x_529 := reconstr(_523, ex1UL_51, [m_526, x_528]);
          x_525 := x_529;
        }
      }
      return x_525;
    };
  return x_518;
}

fn csize_530(t_531%U, ct_532%U) {
  x_533 :=
    lazy {
      x_535 := force(ct_532);
      c_534 := x_535;
      x_537 := send(c_534, Size_19);
      c_536 := x_537;
      x_539 := recv[U](c_536);
      _538 := x_539;
      match[L](_538){
        ex1UL_51(m_541, n_542) => {
          x_543 := lazy { 
                          return n_542; };
          x_544 := reconstr(_538, ex1UL_51, [m_541, x_543]);
          x_540 := x_544;
        }
      }
      return x_540;
    };
  return x_533;
}

fn cfind_545(k_546%U, t_547%U, ct_548%U) {
  x_549 :=
    lazy {
      x_551 := force(ct_548);
      c_550 := x_551;
      x_554 := mkconstr(Find_20, [k_546]);
      x_553 := send(c_550, x_554);
      c_552 := x_553;
      x_556 := recv[U](c_552);
      _555 := x_556;
      match[L](_555){
        ex1UL_51(m_558, n_559) => {
          x_560 := lazy { 
                          return n_559; };
          x_561 := reconstr(_555, ex1UL_51, [m_558, x_560]);
          x_557 := x_561;
        }
      }
      return x_557;
    };
  return x_549;
}

fn mytree1_562(x_563%U) {
  x_565 := cleaf_471(ttU_28);
  x_566 := cleaf_471(ttU_28);
  x_564 := cnode_479(x_563, NULL, NULL, x_565, x_566);
  return x_564;
}

fn mytree2_567(x_568%U) {
  x_570 := mytree1_562(1);
  x_571 := mytree1_562(2);
  x_569 := cnode_479(x_568, NULL, NULL, x_570, x_571);
  return x_569;
}

fn mytree3_572(x_573%U) {
  x_575 := mytree2_567(3);
  x_576 := mytree2_567(4);
  x_574 := cnode_479(x_573, NULL, NULL, x_575, x_576);
  return x_574;
}

fn mytree4_577(x_578%U) {
  x_580 := mytree3_572(8);
  x_581 := mytree3_572(7);
  x_579 := cnode_479(x_578, NULL, NULL, x_580, x_581);
  return x_579;
}

fn mytree5_582(x_583%U) {
  x_585 := mytree4_577(9);
  x_586 := mytree4_577(10);
  x_584 := cnode_479(x_583, NULL, NULL, x_585, x_586);
  return x_584;
}

fn mytree6_587(x_588%U) {
  x_590 := mytree5_582(11);
  x_591 := mytree5_582(12);
  x_589 := cnode_479(x_588, NULL, NULL, x_590, x_591);
  return x_589;
}

main := {
  x_593 := mytree6_587(100);
  ct_592 := x_593;
  x_594 :=
    lazy {
      x_597 := cheight_515(NULL, ct_592);
      x_596 := force(x_597);
      _595 := x_596;
      match[L](_595){
        ex1UL_51(m_599, n_600) => {
          x_603 := csize_530(NULL, n_600);
          x_602 := force(x_603);
          _601 := x_602;
          match[L](_601){
            ex1UL_51(m_605, n_606) => {
              x_609 := cfind_545(1, NULL, n_606);
              x_608 := force(x_609);
              _607 := x_608;
              match[L](_607){
                ex1UL_51(m_611, n_612) => {
                  x_615 := cfree_506(NULL, n_612);
                  x_614 := force(x_615);
                  _613 := x_614;
                  match(_613){
                    ttU_28 => {
                      x_626 := str("height := ");
                      x_627 := string_of_int_282(m_599);
                      x_625 := cat(x_626, x_627);
                      x_628 := str("\n");
                      x_624 := cat(x_625, x_628);
                      x_629 := str("size   := ");
                      x_623 := cat(x_624, x_629);
                      x_630 := string_of_int_282(m_605);
                      x_622 := cat(x_623, x_630);
                      x_631 := str("\n");
                      x_621 := cat(x_622, x_631);
                      x_632 := str("find   := ");
                      x_620 := cat(x_621, x_632);
                      x_633 := string_of_bool_98(m_611);
                      x_619 := cat(x_620, x_633);
                      x_634 := str("\n");
                      x_618 := cat(x_619, x_634);
                      x_617 := print(x_618);
                      x_616 := x_617;
                    }
                  }
                  x_610 := x_616;
                  free(_607);
                }
              }
              x_604 := x_610;
              free(_601);
            }
          }
          x_598 := x_604;
          free(_595);
        }
      }
      return x_598;
    };
  return x_594;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_635(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_636(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_637 := fn0_idU_635(A_2, m_3);
  return x_637;
}

fn fn0_idL_638(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_639(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_640 := fn0_idL_638(A_5, m_6);
  return x_640;
}

fn fn0_rwlUU_641(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_642(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_643 := fn0_rwlUU_641(A_8, m_9, n_10, B_11, __12, __13);
  return x_643;
}

fn fn0_rwlUL_644(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_645(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_646 := fn0_rwlUL_644(A_15, m_16, n_17, B_18, __19, __20);
  return x_646;
}

fn fn0_rwlLU_647(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_648(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_649 := fn0_rwlLU_647(A_22, m_23, n_24, B_25, __26, __27);
  return x_649;
}

fn fn0_rwlLL_650(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_651(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_652 := fn0_rwlLL_650(A_29, m_30, n_31, B_32, __33, __34);
  return x_652;
}

fn fn0_rwrUU_653(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_654(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_655 := fn0_rwrUU_653(A_36, m_37, n_38, B_39, __40, __41);
  return x_655;
}

fn fn0_rwrUL_656(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_657(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_658 := fn0_rwrUL_656(A_43, m_44, n_45, B_46, __47, __48);
  return x_658;
}

fn fn0_rwrLU_659(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_660(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_661 := fn0_rwrLU_659(A_50, m_51, n_52, B_53, __54, __55);
  return x_661;
}

fn fn0_rwrLL_662(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_663(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_664 := fn0_rwrLL_662(A_57, m_58, n_59, B_60, __61, __62);
  return x_664;
}

fn fn0_sing_elimUU_665(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_666(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_667 := fn0_sing_elimUU_665(A_64, x_65, __66);
  return x_667;
}

fn fn0_sing_elimUL_668(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_669(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_670 := fn0_sing_elimUL_668(A_68, x_69, __70);
  return x_670;
}

fn fn0_sing_elimLU_671(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_672(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_673 := fn0_sing_elimLU_671(A_72, x_73, __74);
  return x_673;
}

fn fn0_sing_elimLL_674(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_675(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_676 := fn0_sing_elimLL_674(A_76, x_77, __78);
  return x_676;
}

fn fn0_not_677(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_678(env) {
  __80 := env[1];
  x_679 := fn0_not_677(__80);
  return x_679;
}

fn fn0_and_680(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_681(env) {
  __83 := env[1];
  __84 := env[2];
  x_682 := fn0_and_680(__83, __84);
  return x_682;
}

fn fn0_or_683(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_684(env) {
  __88 := env[1];
  __89 := env[2];
  x_685 := fn0_or_683(__88, __89);
  return x_685;
}

fn fn0_xor_686(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_687(env) {
  __93 := env[1];
  __94 := env[2];
  x_688 := fn0_xor_686(__93, __94);
  return x_688;
}

fn fn0_string_of_bool_689(__99) {
  switch(__99){
    true_4 => {
      str(x_101, "true")
      move1(x_100, x_101);
      break;
    }
    false_5 => {
      str(x_102, "false")
      move1(x_100, x_102);
      break;
    }
  }
  return x_100;
}

fn fn1_string_of_bool_690(env) {
  __99 := env[1];
  x_691 := fn0_string_of_bool_689(__99);
  return x_691;
}

fn fn0_lte_692(__104, __105) {
  switch(__104){
    zero_6 => {
      move1(x_106, true_4);
      break;
    }
    _ => {
      getbox(n_108, __104, 0);
      switch(__105){
        zero_6 => {
          move1(x_109, false_5);
          break;
        }
        _ => {
          getbox(n_111, __105, 0);
          x_112 := fn0_lte_692(n_108, n_111);
          move1(x_110, x_112);
          move1(x_109, x_110);
          break;
        }
      }
      move1(x_107, x_109);
      move1(x_106, x_107);
      break;
    }
  }
  return x_106;
}

fn fn1_lte_693(env) {
  __104 := env[1];
  __105 := env[2];
  x_694 := fn0_lte_692(__104, __105);
  return x_694;
}

fn fn0_lt_695(x_114, y_115) {
  mkbox(x_117, succ_7, 1);
  setbox(x_117, x_114, 0);
  x_116 := fn0_lte_692(x_117, y_115);
  return x_116;
}

fn fn1_lt_696(env) {
  x_114 := env[1];
  y_115 := env[2];
  x_697 := fn0_lt_695(x_114, y_115);
  return x_697;
}

fn fn0_pred_698(__119) {
  switch(__119){
    zero_6 => {
      move1(x_120, zero_6);
      break;
    }
    _ => {
      getbox(n_122, __119, 0);
      move1(x_121, n_122);
      move1(x_120, x_121);
      break;
    }
  }
  return x_120;
}

fn fn1_pred_699(env) {
  __119 := env[1];
  x_700 := fn0_pred_698(__119);
  return x_700;
}

fn fn0_add_701(__124, __125) {
  switch(__124){
    zero_6 => {
      move1(x_126, __125);
      break;
    }
    _ => {
      getbox(n_128, __124, 0);
      x_129 := fn0_add_701(n_128, __125);
      mkbox(x_130, succ_7, 1);
      setbox(x_130, x_129, 0);
      move1(x_127, x_130);
      move1(x_126, x_127);
      break;
    }
  }
  return x_126;
}

fn fn1_add_702(env) {
  __124 := env[1];
  __125 := env[2];
  x_703 := fn0_add_701(__124, __125);
  return x_703;
}

fn fn0_sub_704(__132, __133) {
  switch(__133){
    zero_6 => {
      move1(x_134, __132);
      break;
    }
    _ => {
      getbox(n_136, __133, 0);
      x_138 := fn0_pred_698(__132);
      x_137 := fn0_sub_704(x_138, n_136);
      move1(x_135, x_137);
      move1(x_134, x_135);
      break;
    }
  }
  return x_134;
}

fn fn1_sub_705(env) {
  __132 := env[1];
  __133 := env[2];
  x_706 := fn0_sub_704(__132, __133);
  return x_706;
}

fn fn0_mul_707(__140, __141) {
  switch(__140){
    zero_6 => {
      move1(x_142, zero_6);
      break;
    }
    _ => {
      getbox(n_144, __140, 0);
      x_146 := fn0_mul_707(n_144, __141);
      x_145 := fn0_add_701(__141, x_146);
      move1(x_143, x_145);
      move1(x_142, x_143);
      break;
    }
  }
  return x_142;
}

fn fn1_mul_708(env) {
  __140 := env[1];
  __141 := env[2];
  x_709 := fn0_mul_707(__140, __141);
  return x_709;
}

fn fn0_div_710(x_148, y_149) {
  x_151 := fn0_lt_695(x_148, y_149);
  switch(x_151){
    true_4 => {
      move1(x_150, zero_6);
      break;
    }
    false_5 => {
      mkclo1(x_153, fn1_loop_712, fvc:=2, argc:=2);
      setclo(x_153, pred_118, 1);
      setclo(x_153, sub_131, 2);
      move1(loop_152, x_153);
      appc(x_716, loop_152, x_148);
      appc(x_717, x_716, y_149);
      move1(x_166, x_717);
      move1(x_150, x_166);
      break;
    }
  }
  return x_150;
}

fn fn1_div_711(env) {
  x_148 := env[1];
  y_149 := env[2];
  x_719 := fn0_div_710(x_148, y_149);
  return x_719;
}

fn fn0_rem_720(x_168, y_169) {
  x_172 := fn0_div_710(x_168, y_169);
  x_171 := fn0_mul_707(x_172, y_169);
  x_170 := fn0_sub_704(x_168, x_171);
  return x_170;
}

fn fn1_rem_721(env) {
  x_168 := env[1];
  y_169 := env[2];
  x_722 := fn0_rem_720(x_168, y_169);
  return x_722;
}

fn fn0_rconsUU_723(A_174, __175, __176) {
  switch(__175){
    nilUU_39 => {
      mkbox(x_178, consUU_40, 2);
      setbox(x_178, __176, 0);
      setbox(x_178, nilUU_39, 1);
      move1(x_177, x_178);
      break;
    }
    _ => {
      getbox(hd_180, __175, 0);
      getbox(tl_181, __175, 1);
      x_182 := fn0_rconsUU_723(NULL, tl_181, __176);
      mkbox(x_183, consUU_40, 2);
      setbox(x_183, hd_180, 0);
      setbox(x_183, x_182, 1);
      move1(x_179, x_183);
      move1(x_177, x_179);
      break;
    }
  }
  return x_177;
}

fn fn1_rconsUU_724(env) {
  A_174 := env[1];
  __175 := env[2];
  __176 := env[3];
  x_725 := fn0_rconsUU_723(A_174, __175, __176);
  return x_725;
}

fn fn0_rconsUL_726(A_185, __186, __187) {
  switch(__186){
    nilUL_37 => {
      mkbox(x_189, consUL_38, 2);
      setbox(x_189, __187, 0);
      setbox(x_189, nilUL_37, 1);
      move1(x_188, x_189);
      break;
    }
    _ => {
      getbox(hd_191, __186, 0);
      getbox(tl_192, __186, 1);
      x_193 := fn0_rconsUL_726(NULL, tl_192, __187);
      rebox(x_194, __186, consUL_38);
      setbox(x_194, hd_191, 0);
      setbox(x_194, x_193, 1);
      move1(x_190, x_194);
      move1(x_188, x_190);
      break;
    }
  }
  return x_188;
}

fn fn1_rconsUL_727(env) {
  A_185 := env[1];
  __186 := env[2];
  __187 := env[3];
  x_728 := fn0_rconsUL_726(A_185, __186, __187);
  return x_728;
}

fn fn0_rconsLL_729(A_196, __197, __198) {
  switch(__197){
    nilLL_33 => {
      mkbox(x_200, consLL_34, 2);
      setbox(x_200, __198, 0);
      setbox(x_200, nilLL_33, 1);
      move1(x_199, x_200);
      break;
    }
    _ => {
      getbox(hd_202, __197, 0);
      getbox(tl_203, __197, 1);
      x_204 := fn0_rconsLL_729(NULL, tl_203, __198);
      rebox(x_205, __197, consLL_34);
      setbox(x_205, hd_202, 0);
      setbox(x_205, x_204, 1);
      move1(x_201, x_205);
      move1(x_199, x_201);
      break;
    }
  }
  return x_199;
}

fn fn1_rconsLL_730(env) {
  A_196 := env[1];
  __197 := env[2];
  __198 := env[3];
  x_731 := fn0_rconsLL_729(A_196, __197, __198);
  return x_731;
}

fn fn0_free_listUU_732(A_207, f_208, __209) {
  switch(__209){
    nilUU_39 => {
      move1(x_210, ttU_28);
      break;
    }
    _ => {
      getbox(hd_212, __209, 0);
      getbox(tl_213, __209, 1);
      appc(x_734, f_208, hd_212);
      move1(x_215, x_734);
      move1(__214, x_215);
      x_216 := fn0_free_listUU_732(NULL, f_208, tl_213);
      move1(x_211, x_216);
      move1(x_210, x_211);
      break;
    }
  }
  return x_210;
}

fn fn1_free_listUU_733(env) {
  A_207 := env[1];
  f_208 := env[2];
  __209 := env[3];
  x_736 := fn0_free_listUU_732(A_207, f_208, __209);
  return x_736;
}

fn fn0_free_listUL_737(A_218, f_219, __220) {
  switch(__220){
    nilUL_37 => {
      move1(x_221, ttU_28);
      break;
    }
    _ => {
      getbox(hd_223, __220, 0);
      getbox(tl_224, __220, 1);
      appc(x_739, f_219, hd_223);
      move1(x_226, x_739);
      move1(__225, x_226);
      x_227 := fn0_free_listUL_737(NULL, f_219, tl_224);
      move1(x_222, x_227);
      free(__220);
      move1(x_221, x_222);
      break;
    }
  }
  return x_221;
}

fn fn1_free_listUL_738(env) {
  A_218 := env[1];
  f_219 := env[2];
  __220 := env[3];
  x_741 := fn0_free_listUL_737(A_218, f_219, __220);
  return x_741;
}

fn fn0_free_listLL_742(A_229, f_230, __231) {
  switch(__231){
    nilLL_33 => {
      move1(x_232, ttU_28);
      break;
    }
    _ => {
      getbox(hd_234, __231, 0);
      getbox(tl_235, __231, 1);
      appc(x_744, f_230, hd_234);
      move1(x_237, x_744);
      move1(__236, x_237);
      x_238 := fn0_free_listLL_742(NULL, f_230, tl_235);
      move1(x_233, x_238);
      free(__231);
      move1(x_232, x_233);
      break;
    }
  }
  return x_232;
}

fn fn1_free_listLL_743(env) {
  A_229 := env[1];
  f_230 := env[2];
  __231 := env[3];
  x_746 := fn0_free_listLL_742(A_229, f_230, __231);
  return x_746;
}

fn fn0_pow_747(x_240, y_241) {
  mkclo1(x_243, fn1_loop_749, fvc:=1, argc:=2);
  setclo(x_243, x_240, 1);
  move1(loop_242, x_243);
  appc(x_753, loop_242, 1);
  appc(x_754, x_753, y_241);
  move1(x_252, x_754);
  return x_252;
}

fn fn1_pow_748(env) {
  x_240 := env[1];
  y_241 := env[2];
  x_756 := fn0_pow_747(x_240, y_241);
  return x_756;
}

fn fn0_powm_757(x_254, y_255, m_256) {
  mkclo1(x_258, fn1_loop_759, fvc:=2, argc:=2);
  setclo(x_258, x_254, 1);
  setclo(x_258, m_256, 2);
  move1(loop_257, x_258);
  appc(x_763, loop_257, 1);
  appc(x_764, x_763, y_255);
  move1(x_268, x_764);
  return x_268;
}

fn fn1_powm_758(env) {
  x_254 := env[1];
  y_255 := env[2];
  m_256 := env[3];
  x_766 := fn0_powm_757(x_254, y_255, m_256);
  return x_766;
}

fn fn0_ord_767(c_270) {
  ord(x_271, c_270);
  return x_271;
}

fn fn1_ord_768(env) {
  c_270 := env[1];
  x_769 := fn0_ord_767(c_270);
  return x_769;
}

fn fn0_chr_770(i_273) {
  chr(x_274, i_273);
  return x_274;
}

fn fn1_chr_771(env) {
  i_273 := env[1];
  x_772 := fn0_chr_770(i_273);
  return x_772;
}

fn fn0_str_773(c_276) {
  str(x_278, "")
  push(x_277, x_278, c_276);
  return x_277;
}

fn fn1_str_774(env) {
  c_276 := env[1];
  x_775 := fn0_str_773(c_276);
  return x_775;
}

fn fn0_strlen_776(s_280) {
  size(x_281, s_280);
  return x_281;
}

fn fn1_strlen_777(env) {
  s_280 := env[1];
  x_778 := fn0_strlen_776(s_280);
  return x_778;
}

fn fn0_string_of_int_779(i_283) {
  mkclo1(x_285, fn1_aux_781, fvc:=3, argc:=1);
  setclo(x_285, ord_269, 1);
  setclo(x_285, chr_272, 2);
  setclo(x_285, str_275, 3);
  move1(aux_284, x_285);
  lte(x_304, 0, i_283);
  switch(x_304){
    true_4 => {
      appc(x_784, aux_284, i_283);
      move1(x_305, x_784);
      move1(x_303, x_305);
      break;
    }
    false_5 => {
      str(x_307, "~")
      neg(x_309, i_283);
      appc(x_786, aux_284, x_309);
      move1(x_308, x_786);
      cat(x_306, x_307, x_308);
      move1(x_303, x_306);
      break;
    }
  }
  return x_303;
}

fn fn1_string_of_int_780(env) {
  i_283 := env[1];
  x_788 := fn0_string_of_int_779(i_283);
  return x_788;
}

fn fn0_height_789(__311) {
  switch(__311){
    Leaf_15 => {
      move1(x_312, 0);
      break;
    }
    _ => {
      getbox(l_315, __311, 1);
      getbox(r_316, __311, 2);
      x_318 := fn0_height_789(l_315);
      move1(x_317, x_318);
      x_320 := fn0_height_789(r_316);
      move1(y_319, x_320);
      lt(x_322, x_317, y_319);
      switch(x_322){
        true_4 => {
          add(x_323, y_319, 1);
          move1(x_321, x_323);
          break;
        }
        false_5 => {
          add(x_324, x_317, 1);
          move1(x_321, x_324);
          break;
        }
      }
      move1(x_313, x_321);
      move1(x_312, x_313);
      break;
    }
  }
  return x_312;
}

fn fn1_height_790(env) {
  __311 := env[1];
  x_791 := fn0_height_789(__311);
  return x_791;
}

fn fn0_size_792(__326) {
  switch(__326){
    Leaf_15 => {
      move1(x_327, 0);
      break;
    }
    _ => {
      getbox(l_330, __326, 1);
      getbox(r_331, __326, 2);
      x_334 := fn0_size_792(l_330);
      add(x_333, 1, x_334);
      x_335 := fn0_size_792(r_331);
      add(x_332, x_333, x_335);
      move1(x_328, x_332);
      move1(x_327, x_328);
      break;
    }
  }
  return x_327;
}

fn fn1_size_793(env) {
  __326 := env[1];
  x_794 := fn0_size_792(__326);
  return x_794;
}

fn fn0_find_795(n_337, __338) {
  switch(__338){
    Leaf_15 => {
      move1(x_339, false_5);
      break;
    }
    _ => {
      getbox(__341, __338, 0);
      getbox(l_342, __338, 1);
      getbox(r_343, __338, 2);
      eq(x_345, __341, n_337);
      switch(x_345){
        true_4 => {
          move1(x_344, true_4);
          break;
        }
        false_5 => {
          x_347 := fn0_find_795(n_337, l_342);
          x_348 := fn0_find_795(n_337, r_343);
          x_346 := fn0_or_683(x_347, x_348);
          move1(x_344, x_346);
          break;
        }
      }
      move1(x_340, x_344);
      move1(x_339, x_340);
      break;
    }
  }
  return x_339;
}

fn fn1_find_796(env) {
  n_337 := env[1];
  __338 := env[2];
  x_797 := fn0_find_795(n_337, __338);
  return x_797;
}

fn fn0_leaf_worker_798(c_350) {
  lazy(x_351, lazy__800, 2);
  setlazy(x_351, leaf_worker_349, 0);
  setlazy(x_351, c_350, 1);
  return x_351;
}

fn fn1_leaf_worker_799(env) {
  c_350 := env[1];
  x_801 := fn0_leaf_worker_798(c_350);
  return x_801;
}

fn fn0_node_worker_802(x_374, l_375, r_376, l_ch_377, r_ch_378, c_379) {
  lazy(x_380, lazy__804, 6);
  setlazy(x_380, or_87, 0);
  setlazy(x_380, node_worker_373, 1);
  setlazy(x_380, x_374, 2);
  setlazy(x_380, l_ch_377, 3);
  setlazy(x_380, r_ch_378, 4);
  setlazy(x_380, c_379, 5);
  return x_380;
}

fn fn1_node_worker_803(env) {
  x_374 := env[1];
  l_375 := env[2];
  r_376 := env[3];
  l_ch_377 := env[4];
  r_ch_378 := env[5];
  c_379 := env[6];
  x_805 := fn0_node_worker_802(x_374, l_375, r_376, l_ch_377, r_ch_378, c_379);
  return x_805;
}

fn fn0_cleaf_806(__472) {
  lazy(x_473, lazy__808, 1);
  setlazy(x_473, leaf_worker_349, 0);
  return x_473;
}

fn fn1_cleaf_807(env) {
  __472 := env[1];
  x_810 := fn0_cleaf_806(__472);
  return x_810;
}

fn fn0_cnode_811(x_480, l_481, r_482, __483, __484) {
  lazy(x_485, lazy__813, 4);
  setlazy(x_485, node_worker_373, 0);
  setlazy(x_485, x_480, 1);
  setlazy(x_485, __483, 2);
  setlazy(x_485, __484, 3);
  return x_485;
}

fn fn1_cnode_812(env) {
  x_480 := env[1];
  l_481 := env[2];
  r_482 := env[3];
  __483 := env[4];
  __484 := env[5];
  x_815 := fn0_cnode_811(x_480, l_481, r_482, __483, __484);
  return x_815;
}

fn fn0_ctree_of_tree_816(x_496) {
  switch(x_496){
    Leaf_15 => {
      x_498 := fn0_cleaf_806(ttU_28);
      move1(x_497, x_498);
      break;
    }
    _ => {
      getbox(__500, x_496, 0);
      getbox(l_501, x_496, 1);
      getbox(r_502, x_496, 2);
      x_504 := fn0_ctree_of_tree_816(l_501);
      x_505 := fn0_ctree_of_tree_816(r_502);
      x_503 := fn0_cnode_811(__500, NULL, NULL, x_504, x_505);
      move1(x_499, x_503);
      move1(x_497, x_499);
      break;
    }
  }
  return x_497;
}

fn fn1_ctree_of_tree_817(env) {
  x_496 := env[1];
  x_818 := fn0_ctree_of_tree_816(x_496);
  return x_818;
}

fn fn0_cfree_819(t_507, ct_508) {
  lazy(x_509, lazy__821, 1);
  setlazy(x_509, ct_508, 0);
  return x_509;
}

fn fn1_cfree_820(env) {
  t_507 := env[1];
  ct_508 := env[2];
  x_822 := fn0_cfree_819(t_507, ct_508);
  return x_822;
}

fn fn0_cheight_823(t_516, ct_517) {
  lazy(x_518, lazy__825, 1);
  setlazy(x_518, ct_517, 0);
  return x_518;
}

fn fn1_cheight_824(env) {
  t_516 := env[1];
  ct_517 := env[2];
  x_827 := fn0_cheight_823(t_516, ct_517);
  return x_827;
}

fn fn0_csize_828(t_531, ct_532) {
  lazy(x_533, lazy__830, 1);
  setlazy(x_533, ct_532, 0);
  return x_533;
}

fn fn1_csize_829(env) {
  t_531 := env[1];
  ct_532 := env[2];
  x_832 := fn0_csize_828(t_531, ct_532);
  return x_832;
}

fn fn0_cfind_833(k_546, t_547, ct_548) {
  lazy(x_549, lazy__835, 2);
  setlazy(x_549, k_546, 0);
  setlazy(x_549, ct_548, 1);
  return x_549;
}

fn fn1_cfind_834(env) {
  k_546 := env[1];
  t_547 := env[2];
  ct_548 := env[3];
  x_837 := fn0_cfind_833(k_546, t_547, ct_548);
  return x_837;
}

fn fn0_mytree1_838(x_563) {
  x_565 := fn0_cleaf_806(ttU_28);
  x_566 := fn0_cleaf_806(ttU_28);
  x_564 := fn0_cnode_811(x_563, NULL, NULL, x_565, x_566);
  return x_564;
}

fn fn1_mytree1_839(env) {
  x_563 := env[1];
  x_840 := fn0_mytree1_838(x_563);
  return x_840;
}

fn fn0_mytree2_841(x_568) {
  x_570 := fn0_mytree1_838(1);
  x_571 := fn0_mytree1_838(2);
  x_569 := fn0_cnode_811(x_568, NULL, NULL, x_570, x_571);
  return x_569;
}

fn fn1_mytree2_842(env) {
  x_568 := env[1];
  x_843 := fn0_mytree2_841(x_568);
  return x_843;
}

fn fn0_mytree3_844(x_573) {
  x_575 := fn0_mytree2_841(3);
  x_576 := fn0_mytree2_841(4);
  x_574 := fn0_cnode_811(x_573, NULL, NULL, x_575, x_576);
  return x_574;
}

fn fn1_mytree3_845(env) {
  x_573 := env[1];
  x_846 := fn0_mytree3_844(x_573);
  return x_846;
}

fn fn0_mytree4_847(x_578) {
  x_580 := fn0_mytree3_844(8);
  x_581 := fn0_mytree3_844(7);
  x_579 := fn0_cnode_811(x_578, NULL, NULL, x_580, x_581);
  return x_579;
}

fn fn1_mytree4_848(env) {
  x_578 := env[1];
  x_849 := fn0_mytree4_847(x_578);
  return x_849;
}

fn fn0_mytree5_850(x_583) {
  x_585 := fn0_mytree4_847(9);
  x_586 := fn0_mytree4_847(10);
  x_584 := fn0_cnode_811(x_583, NULL, NULL, x_585, x_586);
  return x_584;
}

fn fn1_mytree5_851(env) {
  x_583 := env[1];
  x_852 := fn0_mytree5_850(x_583);
  return x_852;
}

fn fn0_mytree6_853(x_588) {
  x_590 := fn0_mytree5_850(11);
  x_591 := fn0_mytree5_850(12);
  x_589 := fn0_cnode_811(x_588, NULL, NULL, x_590, x_591);
  return x_589;
}

fn fn1_mytree6_854(env) {
  x_588 := env[1];
  x_855 := fn0_mytree6_853(x_588);
  return x_855;
}

fn lazy__857(env) {
  string_of_bool_98 := env[0];
  string_of_int_282 := env[1];
  cfree_506 := env[2];
  cheight_515 := env[3];
  csize_530 := env[4];
  cfind_545 := env[5];
  ct_592 := env[6];
  x_597 := fn0_cheight_823(NULL, ct_592);
  force(x_596, x_597);
  free(x_597);
  move1(_595, x_596);
  getbox(m_599, _595, 0);
  getbox(n_600, _595, 1);
  x_603 := fn0_csize_828(NULL, n_600);
  force(x_602, x_603);
  free(x_603);
  move1(_601, x_602);
  getbox(m_605, _601, 0);
  getbox(n_606, _601, 1);
  x_609 := fn0_cfind_833(1, NULL, n_606);
  force(x_608, x_609);
  free(x_609);
  move1(_607, x_608);
  getbox(m_611, _607, 0);
  getbox(n_612, _607, 1);
  x_615 := fn0_cfree_819(NULL, n_612);
  force(x_614, x_615);
  free(x_615);
  move1(_613, x_614);
  switch(_613){
    ttU_28 => {
      str(x_626, "height := ")
      x_627 := fn0_string_of_int_779(m_599);
      cat(x_625, x_626, x_627);
      str(x_628, "\n")
      cat(x_624, x_625, x_628);
      str(x_629, "size   := ")
      cat(x_623, x_624, x_629);
      x_630 := fn0_string_of_int_779(m_605);
      cat(x_622, x_623, x_630);
      str(x_631, "\n")
      cat(x_621, x_622, x_631);
      str(x_632, "find   := ")
      cat(x_620, x_621, x_632);
      x_633 := fn0_string_of_bool_689(m_611);
      cat(x_619, x_620, x_633);
      str(x_634, "\n")
      cat(x_618, x_619, x_634);
      print(x_617, x_618);
      move1(x_616, x_617);
      break;
    }
  }
  move1(x_610, x_616);
  free(_607);
  move1(x_604, x_610);
  free(_601);
  move1(x_598, x_604);
  free(_595);
  return x_598;
}

fn lazy__835(env) {
  k_546 := env[0];
  ct_548 := env[1];
  force(x_551, ct_548);
  free(ct_548);
  move1(c_550, x_551);
  mkbox(x_554, Find_20, 1);
  setbox(x_554, k_546, 0);
  send(x_553, c_550, x_554);
  move1(c_552, x_553);
  recv0(x_556, c_552);
  move1(_555, x_556);
  getbox(m_558, _555, 0);
  getbox(n_559, _555, 1);
  lazy(x_560, lazy__836, 1);
  setlazy(x_560, n_559, 0);
  rebox(x_561, _555, ex1UL_51);
  setbox(x_561, m_558, 0);
  setbox(x_561, x_560, 1);
  move1(x_557, x_561);
  return x_557;
}

fn lazy__836(env) {
  n_559 := env[0];
  return n_559;
}

fn lazy__830(env) {
  ct_532 := env[0];
  force(x_535, ct_532);
  free(ct_532);
  move1(c_534, x_535);
  send(x_537, c_534, Size_19);
  move1(c_536, x_537);
  recv0(x_539, c_536);
  move1(_538, x_539);
  getbox(m_541, _538, 0);
  getbox(n_542, _538, 1);
  lazy(x_543, lazy__831, 1);
  setlazy(x_543, n_542, 0);
  rebox(x_544, _538, ex1UL_51);
  setbox(x_544, m_541, 0);
  setbox(x_544, x_543, 1);
  move1(x_540, x_544);
  return x_540;
}

fn lazy__831(env) {
  n_542 := env[0];
  return n_542;
}

fn lazy__825(env) {
  ct_517 := env[0];
  force(x_520, ct_517);
  free(ct_517);
  move1(c_519, x_520);
  send(x_522, c_519, Height_18);
  move1(c_521, x_522);
  recv0(x_524, c_521);
  move1(_523, x_524);
  getbox(m_526, _523, 0);
  getbox(n_527, _523, 1);
  lazy(x_528, lazy__826, 1);
  setlazy(x_528, n_527, 0);
  rebox(x_529, _523, ex1UL_51);
  setbox(x_529, m_526, 0);
  setbox(x_529, x_528, 1);
  move1(x_525, x_529);
  return x_525;
}

fn lazy__826(env) {
  n_527 := env[0];
  return n_527;
}

fn lazy__821(env) {
  ct_508 := env[0];
  force(x_511, ct_508);
  free(ct_508);
  move1(c_510, x_511);
  send(x_513, c_510, Free_17);
  move1(c_512, x_513);
  close1(x_514, c_512);
  return x_514;
}

fn lazy__813(env) {
  node_worker_373 := env[0];
  x_480 := env[1];
  __483 := env[2];
  __484 := env[3];
  force(x_487, __483);
  free(__483);
  move1(l_ch_486, x_487);
  force(x_489, __484);
  free(__484);
  move1(r_ch_488, x_489);
  mkclo1(x_491, fn1_lam_814, fvc:=4, argc:=1);
  setclo(x_491, node_worker_373, 1);
  setclo(x_491, x_480, 2);
  setclo(x_491, l_ch_486, 3);
  setclo(x_491, r_ch_488, 4);
  fork(x_490, x_491);
  return x_490;
}

fn fn1_lam_814(env) {
  lam_492 := env[0];
  node_worker_373 := env[1];
  x_480 := env[2];
  l_ch_486 := env[3];
  r_ch_488 := env[4];
  _493 := env[5];
  x_494 := fn0_node_worker_802(x_480, NULL, NULL, l_ch_486, r_ch_488, _493);
  return x_494;
}

fn lazy__808(env) {
  leaf_worker_349 := env[0];
  mkclo1(x_475, fn1_lam_809, fvc:=1, argc:=1);
  setclo(x_475, leaf_worker_349, 1);
  fork(x_474, x_475);
  return x_474;
}

fn fn1_lam_809(env) {
  lam_476 := env[0];
  leaf_worker_349 := env[1];
  _477 := env[2];
  x_478 := fn0_leaf_worker_798(_477);
  return x_478;
}

fn lazy__804(env) {
  or_87 := env[0];
  node_worker_373 := env[1];
  x_374 := env[2];
  l_ch_377 := env[3];
  r_ch_378 := env[4];
  c_379 := env[5];
  recv1(x_382, c_379);
  move1(_381, x_382);
  getbox(m_384, _381, 0);
  getbox(n_385, _381, 1);
  switch(m_384){
    Free_17 => {
      send(x_388, l_ch_377, Free_17);
      move1(l_ch_387, x_388);
      send(x_390, r_ch_378, Free_17);
      move1(r_ch_389, x_390);
      close1(x_392, l_ch_387);
      move1(__391, x_392);
      close1(x_394, r_ch_389);
      move1(__393, x_394);
      close0(x_395, n_385);
      move1(x_386, x_395);
      break;
    }
    Height_18 => {
      send(x_397, l_ch_377, Height_18);
      move1(l_ch_396, x_397);
      send(x_399, r_ch_378, Height_18);
      move1(r_ch_398, x_399);
      recv0(x_401, l_ch_396);
      move1(_400, x_401);
      getbox(m_403, _400, 0);
      getbox(n_404, _400, 1);
      recv0(x_406, r_ch_398);
      move1(_405, x_406);
      getbox(m_408, _405, 0);
      getbox(n_409, _405, 1);
      lt(x_411, m_403, m_408);
      switch(x_411){
        true_4 => {
          add(x_414, m_408, 1);
          send(x_413, n_385, x_414);
          move1(c_412, x_413);
          x_416 := fn0_node_worker_802(x_374, NULL, NULL, n_404, n_409, c_412);
          force(x_415, x_416);
          free(x_416);
          move1(x_410, x_415);
          break;
        }
        false_5 => {
          add(x_419, m_403, 1);
          send(x_418, n_385, x_419);
          move1(c_417, x_418);
          x_421 := fn0_node_worker_802(x_374, NULL, NULL, n_404, n_409, c_417);
          force(x_420, x_421);
          free(x_421);
          move1(x_410, x_420);
          break;
        }
      }
      move1(x_407, x_410);
      free(_405);
      move1(x_402, x_407);
      free(_400);
      move1(x_386, x_402);
      break;
    }
    Size_19 => {
      send(x_423, l_ch_377, Size_19);
      move1(l_ch_422, x_423);
      send(x_425, r_ch_378, Size_19);
      move1(r_ch_424, x_425);
      recv0(x_427, l_ch_422);
      move1(_426, x_427);
      getbox(m_429, _426, 0);
      getbox(n_430, _426, 1);
      recv0(x_432, r_ch_424);
      move1(_431, x_432);
      getbox(m_434, _431, 0);
      getbox(n_435, _431, 1);
      add(x_439, 1, m_429);
      add(x_438, x_439, m_434);
      send(x_437, n_385, x_438);
      move1(c_436, x_437);
      x_441 := fn0_node_worker_802(x_374, NULL, NULL, n_430, n_435, c_436);
      force(x_440, x_441);
      free(x_441);
      move1(x_433, x_440);
      free(_431);
      move1(x_428, x_433);
      free(_426);
      move1(x_386, x_428);
      break;
    }
    _ => {
      getbox(k_443, m_384, 0);
      eq(x_445, x_374, k_443);
      switch(x_445){
        true_4 => {
          send(x_447, n_385, true_4);
          move1(c_446, x_447);
          x_449 := fn0_node_worker_802(x_374, NULL, NULL, l_ch_377, r_ch_378, c_446);
          force(x_448, x_449);
          free(x_449);
          move1(x_444, x_448);
          break;
        }
        false_5 => {
          mkbox(x_452, Find_20, 1);
          setbox(x_452, k_443, 0);
          send(x_451, l_ch_377, x_452);
          move1(l_ch_450, x_451);
          mkbox(x_455, Find_20, 1);
          setbox(x_455, k_443, 0);
          send(x_454, r_ch_378, x_455);
          move1(r_ch_453, x_454);
          recv0(x_457, l_ch_450);
          move1(_456, x_457);
          getbox(m_459, _456, 0);
          getbox(n_460, _456, 1);
          recv0(x_462, r_ch_453);
          move1(_461, x_462);
          getbox(m_464, _461, 0);
          getbox(n_465, _461, 1);
          x_468 := fn0_or_683(m_459, m_464);
          send(x_467, n_385, x_468);
          move1(c_466, x_467);
          x_470 := fn0_node_worker_802(x_374, NULL, NULL, n_460, n_465, c_466);
          force(x_469, x_470);
          free(x_470);
          move1(x_463, x_469);
          free(_461);
          move1(x_458, x_463);
          free(_456);
          move1(x_444, x_458);
          break;
        }
      }
      move1(x_442, x_444);
      free(m_384);
      move1(x_386, x_442);
      break;
    }
  }
  move1(x_383, x_386);
  free(_381);
  return x_383;
}

fn lazy__800(env) {
  leaf_worker_349 := env[0];
  c_350 := env[1];
  recv1(x_353, c_350);
  move1(_352, x_353);
  getbox(m_355, _352, 0);
  getbox(n_356, _352, 1);
  switch(m_355){
    Free_17 => {
      close0(x_358, n_356);
      move1(x_357, x_358);
      break;
    }
    Height_18 => {
      send(x_360, n_356, 0);
      move1(c_359, x_360);
      x_362 := fn0_leaf_worker_798(c_359);
      force(x_361, x_362);
      free(x_362);
      move1(x_357, x_361);
      break;
    }
    Size_19 => {
      send(x_364, n_356, 0);
      move1(c_363, x_364);
      x_366 := fn0_leaf_worker_798(c_363);
      force(x_365, x_366);
      free(x_366);
      move1(x_357, x_365);
      break;
    }
    _ => {
      send(x_370, n_356, false_5);
      move1(c_369, x_370);
      x_372 := fn0_leaf_worker_798(c_369);
      force(x_371, x_372);
      free(x_372);
      move1(x_367, x_371);
      free(m_355);
      move1(x_357, x_367);
      break;
    }
  }
  move1(x_354, x_357);
  free(_352);
  return x_354;
}

fn fn1_aux_781(env) {
  aux_286 := env[0];
  ord_269 := env[1];
  chr_272 := env[2];
  str_275 := env[3];
  i_287 := env[4];
  lte(x_289, 10, i_287);
  switch(x_289){
    true_4 => {
      mod(x_291, i_287, 10);
      move1(r_290, x_291);
      div(x_293, i_287, 10);
      move1(i_292, x_293);
      appc(x_782, aux_286, i_292);
      move1(x_295, x_782);
      x_298 := fn0_ord_767(0);
      add(x_297, r_290, x_298);
      x_296 := fn0_chr_770(x_297);
      push(x_294, x_295, x_296);
      move1(x_288, x_294);
      break;
    }
    false_5 => {
      x_302 := fn0_ord_767(0);
      add(x_301, i_287, x_302);
      x_300 := fn0_chr_770(x_301);
      x_299 := fn0_str_773(x_300);
      move1(x_288, x_299);
      break;
    }
  }
  return x_288;
}

fn fn1_loop_759(env) {
  loop_259 := env[0];
  x_254 := env[1];
  m_256 := env[2];
  acc_260 := env[3];
  y_261 := env[4];
  lte(x_263, y_261, 0);
  switch(x_263){
    true_4 => {
      move1(x_262, acc_260);
      break;
    }
    false_5 => {
      mul(x_266, x_254, acc_260);
      mod(x_265, x_266, m_256);
      sub(x_267, y_261, 1);
      appc(x_760, loop_259, x_265);
      appc(x_761, x_760, x_267);
      move1(x_264, x_761);
      move1(x_262, x_264);
      break;
    }
  }
  return x_262;
}

fn fn1_loop_749(env) {
  loop_244 := env[0];
  x_240 := env[1];
  acc_245 := env[2];
  y_246 := env[3];
  lte(x_248, y_246, 0);
  switch(x_248){
    true_4 => {
      move1(x_247, acc_245);
      break;
    }
    false_5 => {
      mul(x_250, x_240, acc_245);
      sub(x_251, y_246, 1);
      appc(x_750, loop_244, x_250);
      appc(x_751, x_750, x_251);
      move1(x_249, x_751);
      move1(x_247, x_249);
      break;
    }
  }
  return x_247;
}

fn fn1_loop_712(env) {
  loop_154 := env[0];
  pred_118 := env[1];
  sub_131 := env[2];
  x_155 := env[3];
  y_156 := env[4];
  x_159 := fn0_pred_698(y_156);
  x_158 := fn0_sub_704(x_155, x_159);
  switch(x_158){
    zero_6 => {
      move1(x_157, zero_6);
      break;
    }
    _ => {
      x_162 := fn0_pred_698(y_156);
      x_161 := fn0_sub_704(x_155, x_162);
      getbox(n_163, x_161, 0);
      appc(x_713, loop_154, n_163);
      appc(x_714, x_713, y_156);
      move1(x_164, x_714);
      mkbox(x_165, succ_7, 1);
      setbox(x_165, x_164, 0);
      move1(x_160, x_165);
      move1(x_157, x_160);
      break;
    }
  }
  return x_157;
}

main {
  mkclo0(idU_1, fn1_idU_636, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_639, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_642, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_645, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_648, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_651, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_654, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_657, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_660, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_663, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_666, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_669, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_672, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_675, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_678, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_681, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_684, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_687, fvc:=0, argc:=2);
  mkclo0(string_of_bool_98, fn1_string_of_bool_690, fvc:=0, argc:=1);
  mkclo0(lte_103, fn1_lte_693, fvc:=0, argc:=2);
  mkclo0(lt_113, fn1_lt_696, fvc:=0, argc:=2);
  mkclo0(pred_118, fn1_pred_699, fvc:=0, argc:=1);
  mkclo0(add_123, fn1_add_702, fvc:=0, argc:=2);
  mkclo0(sub_131, fn1_sub_705, fvc:=0, argc:=2);
  mkclo0(mul_139, fn1_mul_708, fvc:=0, argc:=2);
  mkclo0(div_147, fn1_div_711, fvc:=0, argc:=2);
  mkclo0(rem_167, fn1_rem_721, fvc:=0, argc:=2);
  mkclo0(rconsUU_173, fn1_rconsUU_724, fvc:=0, argc:=3);
  mkclo0(rconsUL_184, fn1_rconsUL_727, fvc:=0, argc:=3);
  mkclo0(rconsLL_195, fn1_rconsLL_730, fvc:=0, argc:=3);
  mkclo0(free_listUU_206, fn1_free_listUU_733, fvc:=0, argc:=3);
  mkclo0(free_listUL_217, fn1_free_listUL_738, fvc:=0, argc:=3);
  mkclo0(free_listLL_228, fn1_free_listLL_743, fvc:=0, argc:=3);
  mkclo0(pow_239, fn1_pow_748, fvc:=0, argc:=2);
  mkclo0(powm_253, fn1_powm_758, fvc:=0, argc:=3);
  mkclo0(ord_269, fn1_ord_768, fvc:=0, argc:=1);
  mkclo0(chr_272, fn1_chr_771, fvc:=0, argc:=1);
  mkclo0(str_275, fn1_str_774, fvc:=0, argc:=1);
  mkclo0(strlen_279, fn1_strlen_777, fvc:=0, argc:=1);
  mkclo0(string_of_int_282, fn1_string_of_int_780, fvc:=0, argc:=1);
  mkclo0(height_310, fn1_height_790, fvc:=0, argc:=1);
  mkclo0(size_325, fn1_size_793, fvc:=0, argc:=1);
  mkclo0(find_336, fn1_find_796, fvc:=0, argc:=2);
  mkclo0(leaf_worker_349, fn1_leaf_worker_799, fvc:=0, argc:=1);
  mkclo0(node_worker_373, fn1_node_worker_803, fvc:=0, argc:=6);
  mkclo0(cleaf_471, fn1_cleaf_807, fvc:=0, argc:=1);
  mkclo0(cnode_479, fn1_cnode_812, fvc:=0, argc:=5);
  mkclo0(ctree_of_tree_495, fn1_ctree_of_tree_817, fvc:=0, argc:=1);
  mkclo0(cfree_506, fn1_cfree_820, fvc:=0, argc:=2);
  mkclo0(cheight_515, fn1_cheight_824, fvc:=0, argc:=2);
  mkclo0(csize_530, fn1_csize_829, fvc:=0, argc:=2);
  mkclo0(cfind_545, fn1_cfind_834, fvc:=0, argc:=3);
  mkclo0(mytree1_562, fn1_mytree1_839, fvc:=0, argc:=1);
  mkclo0(mytree2_567, fn1_mytree2_842, fvc:=0, argc:=1);
  mkclo0(mytree3_572, fn1_mytree3_845, fvc:=0, argc:=1);
  mkclo0(mytree4_577, fn1_mytree4_848, fvc:=0, argc:=1);
  mkclo0(mytree5_582, fn1_mytree5_851, fvc:=0, argc:=1);
  mkclo0(mytree6_587, fn1_mytree6_854, fvc:=0, argc:=1);
  x_593 := fn0_mytree6_853(100);
  move1(ct_592, x_593);
  lazy(x_594, lazy__857, 7);
  setlazy(x_594, string_of_bool_98, 0);
  setlazy(x_594, string_of_int_282, 1);
  setlazy(x_594, cfree_506, 2);
  setlazy(x_594, cheight_515, 3);
  setlazy(x_594, csize_530, 4);
  setlazy(x_594, cfind_545, 5);
  setlazy(x_594, ct_592, 6);
  force(x_856, x_594);
  return x_856;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

