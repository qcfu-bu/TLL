[Inductive {name = "unit"; relv = R;
   body =
   (Binder ([],
      (PBase ((TBase (Type U)), [(DMul ("tt", (TBase (Id "unit"))))]))))};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DMul ("zero", (TBase (Id "nat"))));
             (DMul ("succ",
                (TBind (R, (Id "nat"), (Binder ("n", (TBase (Id "nat"))))))))
             ]))
       ))};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id "A"),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DMul ("just",
                     (TBind (R, (Id "A"),
                        (Binder ("m",
                           (TBase
                              (App
                                 [(Inst ("sing", [(SId "s")])); (Id "A");
                                   (Id "m")]))
                           ))
                        ))
                     ))
                   ]))
             ))
          ))
       ))};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id "A"),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id "A"), (Binder ("_", (TBase (Type U))))
                          )),
                       [(DMul ("eq_refl",
                           (TBase
                              (App [(Id "eq"); (Id "_"); (Id "m"); (Id "m")]))
                           ))
                         ]))
                   ))
                ))
             ))
          ))
       ))};
  Definition {name = "test"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U,
              (App
                 [(Id "sing"); (Id "nat"); (App [(Id "succ"); (Id "zero")])]),
              (Binder ("_", (Id "unit"))))),
           (Binder ((Some "test"),
              [([(PMul ("just", [(PId "x")]))],
                (Some (Let (R,
                         (Ann ((Id "eq_refl"),
                            (App
                               [(Id "eq"); (Id "_"); (Id "x");
                                 (App [(Id "succ"); (Id "zero")])])
                            )),
                         (Binder ("pf", (Id "tt")))))))
                ]
              ))
           )),
        (Pi (R, U,
           (App [(Id "sing"); (Id "nat"); (App [(Id "succ"); (Id "zero")])]),
           (Binder ("_", (Id "unit"))))))
       ))}
  ]

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive nat_2‹› : U where
| zero_2 : nat_2
| succ_3 (n_19 : nat_2) : nat_2

#[program]
inductive sing_3‹s_20› (A_21 : Type‹s_20›): A_21 -> Type‹s_20›
where
| just_4 (m_23 : A_21) : (sing_3‹s_20› A_21 m_23)

#[logical]
inductive eq_4‹s_24› (A_25 : Type‹s_24›) (m_26 : A_25): A_25 -> U
where
| eq_refl_5 : (eq_4‹??_1› ?_1 m_26 m_26)

#[program]
def test_1‹› : (sing_3‹??_5› nat_2 (succ_3‹› zero_2)) -> unit_1
:=
  function test_29 : (sing_3‹??_2› nat_2 (succ_3‹› zero_2)) -> unit_1
  | (just_4 x_31) =>
    let pf_32 :=
      (eq_refl_5‹??_3› : (eq_4‹??_4› ?_4 x_31 (succ_3‹› zero_2)))
    in tt_1

-----------------------------------------

group0 {|
  
  
|}

group1 {|
  
  
|}

group2 {|
  
  
|}

group3 {|
  equal_tm? (?_1, A_45);
  equal_tm? (?_1, A_45);
  equal_tm? (A_45, ?_1);
  equal_sort? (s_44, ??_1)
  ?_1 :? Type‹??_1›
|}

group4 {|
  equal_tm? ((sing_3‹??_5› nat_2 (succ_3‹› zero_2)) -> unit_1,
    (sing_3‹??_2› nat_2 (succ_3‹› zero_2)) -> unit_1);
  equal_tm?
    ((eq_4‹??_4› ?_4 (succ_3‹› zero_2) (succ_3‹› zero_2)),
    (eq_4‹??_1› ?_1 ?_3 ?_3));
  equal_tm? (?_4, nat_2);
  equal_tm? (?_4, nat_2);
  equal_tm? (Type‹??_2›, U);
  equal_tm? (Type‹??_5›, U)
  ?_2 :? Type‹??_3›
  ?_3 :? ?_2
  ?_4 :? Type‹??_4›
|}

-----------------------------------------

