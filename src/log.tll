[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "add_zero"; relv = R;
    body = (Binder ([], ((App [(Id ("add", I)); (Id ("zero", I))]), IMeta)));
    view = []};
  Definition {name = "test"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("add", I)); (Id ("zero", I)); (Id ("zero", I))]), IMeta)));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_384› : ∀ (A_385 : Type‹s_384›) -> A_385 -> ?_2[0;0] :=
  fun id_387 : ∀ (A_388 : Type‹s_384›) -> A_388 -> ?_1[0;0]
  | A_390 m_391 => m_391

#[logical]
inductive eq_1‹s_392› (A_393 : Type‹s_392›) (m_394 : A_393):
  A_393 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_394 m_394)

#[program]
def rwl_2‹s_396,r_397› :
  ∀ {A_398 : Type‹s_396›} ->
    ∀ {m_399 : A_398} ->
      ∀ {n_400 : A_398} ->
        ∀ {B_401 : A_398 -> Type‹r_397›} ->
          {(eq_1‹??_3› ?_5[0;0] m_399 n_400)} ->
            ((B_401) m_399) -> ((B_401) n_400)
:=
  fun rwl_405 :
    ∀ {A_406 : Type‹s_396›} ->
      ∀ {m_407 : A_406} ->
        ∀ {n_408 : A_406} ->
          ∀ {B_409 : A_406 -> Type‹r_397›} ->
            {(eq_1‹??_2› ?_4[0;0] m_407 n_408)} ->
              ((B_409) m_407) -> ((B_409) n_408)
  | A_413 m_414 n_415 B_416 refl_1 x_417 => x_417

#[program]
def rwr_3‹s_418,r_419› :
  ∀ {A_420 : Type‹s_418›} ->
    ∀ {m_421 : A_420} ->
      ∀ {n_422 : A_420} ->
        ∀ {B_423 : A_420 -> Type‹r_419›} ->
          {(eq_1‹??_5› ?_7[0;0] m_421 n_422)} ->
            ((B_423) n_422) -> ((B_423) m_421)
:=
  fun rwr_427 :
    ∀ {A_428 : Type‹s_418›} ->
      ∀ {m_429 : A_428} ->
        ∀ {n_430 : A_428} ->
          ∀ {B_431 : A_428 -> Type‹r_419›} ->
            {(eq_1‹??_4› ?_6[0;0] m_429 n_430)} ->
              ((B_431) n_430) -> ((B_431) m_429)
  | A_435 m_436 n_437 B_438 refl_1 x_439 => x_439

#[logical]
def congr_4‹s_440,r_441,t_442› :
  ∀ (A_443 : Type‹s_440›) ->
    ∀ (B_444 : Type‹r_441›) ->
      ∀ (m_445 : A_443) ->
        ∀ (n_446 : A_443) ->
          ∀ (f_447 : forall‹t_442›(__448 : A_443), B_444) ->
            (eq_1‹??_9› ?_12[0;0] m_445 n_446) ->
              (eq_1‹??_10› ?_13[0;0] ((f_447) m_445) ((f_447) n_446))
:=
  fun congr_450 :
    ∀ (A_451 : Type‹s_440›) ->
      ∀ (B_452 : Type‹r_441›) ->
        ∀ (m_453 : A_451) ->
          ∀ (n_454 : A_451) ->
            ∀ (f_455 : forall‹t_442›(__456 : A_451), B_452) ->
              (eq_1‹??_6› ?_8[0;0] m_453 n_454) ->
                (eq_1‹??_7› ?_9[0;0] ((f_455) m_453) ((f_455) n_454))
  | A_458 B_459 m_460 n_461 f_462 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_463 : U} ->
    ∀ {m_464 : A_463} ->
      ∀ (x_465 : (eq_1‹??_15› ?_20[0;0] m_464 m_464)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_465 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_466 :
    ∀ {A_467 : U} ->
      ∀ {m_468 : A_467} ->
        ∀ (x_469 : (eq_1‹??_11› ?_14[0;0] m_468 m_468)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_469 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_470 m_471 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_472,t_473› (A_474 : Type‹s_472›):
  A_474 -> Type‹t_473›
where
| just_2 (m_476 : A_474) : (sing_2‹??_18,??_19› ?_24[0;0] m_476)

#[logical]
def ssing_6‹s_477› :
  ∀ (A_478 : Type‹s_477›) -> A_478 -> Type‹s_477›
:=
  fun ssing_480 : ∀ (A_481 : Type‹s_477›) -> A_481 -> Type‹s_477›
  | A_483 m_484 => (sing_2‹s_477,s_477› A_483 m_484)

#[program]
def sing_elim_7‹s_485,t_486› :
  ∀ {A_487 : Type‹s_485›} ->
    ∀ {x_488 : A_487} -> (sing_2‹s_485,t_486› ?_26[0;0] x_488) -> A_487
:=
  fun sing_elim_490 :
    ∀ {A_491 : Type‹s_485›} ->
      ∀ {x_492 : A_491} ->
        (sing_2‹s_485,t_486› ?_25[0;0] x_492) -> A_491
  | A_494 x_495 (just_2 x_496) => x_496

#[logical]
def sing_uniq_8‹s_497,t_498› :
  ∀ (A_499 : Type‹s_497›) ->
    ∀ (x0_500 : A_499) ->
      ∀ (x_501 : (sing_2‹s_497,t_498› ?_33[0;0] x0_500)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_500
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_501))
:=
  fun sing_uniq_502 :
    ∀ (A_503 : Type‹s_497›) ->
      ∀ (x0_504 : A_503) ->
        ∀ (x_505 : (sing_2‹s_497,t_498› ?_27[0;0] x0_504)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_504
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_505))
  | A_506 x0_507 (just_2 _508) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_509 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_509 tt_3)
:=
  fun unit_eta_510 :
    ∀ (x_511 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_511 tt_3)
  | x_512 =>
    match x_512 in
      ∀ (x0_513 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_513 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_515 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_519 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _522 _523 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_526 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _529 _530 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_533 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _536 _537 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_538 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_541 : nat_5 -> nat_5 -> bool_4
  | zero_6 _544 => true_4
  | _545 zero_6 => false_5
  | (succ_7 x_546) (succ_7 y_547) => ((lte_541) x_546 y_547)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_550 : nat_5 -> nat_5 -> bool_4
  | x_553 y_554 => ((lte_14) (succ_7‹› x_553) y_554)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_556 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_558) => x_558

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_561 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_564 => y_564
  | (succ_7 x_565) y_566 => (succ_7‹› ((add_561) x_565 y_566))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_569 : nat_5 -> nat_5 -> nat_5
  | x_572 zero_6 => x_572
  | x_573 (succ_7 y_574) => ((sub_569) ((pred_16) x_573) y_574)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_577 : nat_5 -> nat_5 -> nat_5
  | zero_6 _580 => zero_6
  | (succ_7 x_581) y_582 => ((add_17) y_582 ((mul_577) x_581 y_582))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_585 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_588 y_589 =>
    match ((lt_15) x_588 y_589) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_591 :=
        fun loop_592 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_595 y_596 =>
          match ((sub_18) x_595 ((pred_16) y_596)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_598) => (succ_7‹› ((loop_592) x_598 y_596))
      in ((loop_591) x_588 y_589)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_601 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_604 y_605 => ((sub_18) x_604 ((mul_19) ((div_20) x_604 y_605) y_605))

#[program]
inductive list_6‹s_606,t_607› (A_608 : Type‹s_606›): Type‹t_607›
where
| nil_8 : (list_6‹??_31,??_32› A_608)
| cons_9
    (hd_609 : A_608) (tl_610 : (list_6‹??_33,t_607› A_608))
    : (list_6‹??_34,??_35› A_608)

#[program]
def free_list_22‹s_611,t_612› :
  ∀ {A_613 : Type‹s_611›} ->
    A_613 -> unit_3 -> (list_6‹??_37,t_612› A_613) -> unit_3
:=
  fun free_list_617 :
    ∀ {A_618 : Type‹s_611›} ->
      A_618 -> unit_3 -> (list_6‹??_36,t_612› A_618) -> unit_3
  | A_622 f_623 nil_8 => tt_3
  | A_624 f_625 (cons_9 x_626 xs_627) =>
    let __628 := ((f_625) x_626) in ((free_list_617) ?_52[0;0] f_625 xs_627)

#[program]
inductive exists0_7‹s_629,r_630› (A_631 : Type‹s_629›) (B_632 : 
A_631 -> Type‹r_630›): L where
| ex0_10
    {m_634 : A_631} (n_635 : ((B_632) m_634))
    : (exists0_7‹??_38,??_39› A_631 B_632)

#[program]
inductive exists1_8‹s_636,r_637› (A_638 : Type‹s_636›) (B_639 : 
A_638 -> Type‹r_637›): L where
| ex1_11
    (m_641 : A_638) (n_642 : ((B_639) m_641))
    : (exists1_8‹??_40,??_41› A_638 B_639)

#[logical]
def prod0_23‹s_643,r_644› :
  Type‹s_643› -> Type‹r_644› -> ?_56[0;0]
:=
  fun prod0_647 : Type‹s_643› -> Type‹r_644› -> ?_53[0;0]
  | A_650 B_651 =>
    (exists0_7‹??_42,??_43›
      A_650 fun _652 : ?_54[0;0] -> ?_55[0;0]
            | _654 => B_651)

#[logical]
def prod1_24‹s_655,r_656› :
  Type‹s_655› -> Type‹r_656› -> ?_60[0;0]
:=
  fun prod1_659 : Type‹s_655› -> Type‹r_656› -> ?_57[0;0]
  | A_662 B_663 =>
    (exists1_8‹??_44,??_45›
      A_662 fun _664 : ?_58[0;0] -> ?_59[0;0]
            | _666 => B_663)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_669 : int -> int -> int
  | x_672 y_673 =>
    let loop_674 :=
      fun loop_675 : int -> int -> int
      | acc_678 y_679 =>
        match (__lte__ y_679 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_678
        | false_5 => ((loop_675) (__mul__ x_672 acc_678) (__sub__ y_679 1))
    in ((loop_674) 1 y_673)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_684 : int -> int -> int -> int
  | x_688 y_689 m_690 =>
    let loop_691 :=
      fun loop_692 : int -> int -> int
      | acc_695 y_696 =>
        match (__lte__ y_696 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_695
        | false_5 =>
          ((loop_692)
            (__mod__ (__mul__ x_688 acc_695) m_690) (__sub__ y_696 1))
    in ((loop_691) 1 y_689)

#[program]
def ord_27‹› : char -> int :=
  fun ord_699 : char -> int
  | c_701 => (__ord__ c_701)

#[program]
def chr_28‹› : int -> char :=
  fun chr_703 : int -> char
  | i_705 => (__chr__ i_705)

#[program]
def str_29‹› : char -> string :=
  fun str_707 : char -> string
  | c_709 => (__push__ "" c_709)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_711 : string -> int
  | s_713 => (__size__ s_713)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_715 : int -> string
  | i_717 =>
    let aux_718 :=
      fun aux_719 : int -> string
      | i_721 =>
        match (__lte__ 10 i_721) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_723 := (__mod__ i_721 10) in
          let i_724 := (__div__ i_721 10) in
          (__push__ ((aux_719) i_724)
            ((chr_28) (__add__ r_723 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_721 ((ord_27) 0))))
    in
    match (__lt__ 0 i_717) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_718) i_717)
    | false_5 => (__cat__ "~" ((aux_718) (__neg__ i_717)))

#[program]
def split_32‹t_726› :
  (list_6‹??_71,t_726› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_726› int) (list_6‹??_73,t_726› int))
:=
  fun split_728 :
    (list_6‹??_46,t_726› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_726› int) (list_6‹??_48,t_726› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_730 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_730 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_731 (cons_9 y_732 zs_733)) =>
    match ((split_728) zs_733) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_735 ys_736) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_731 xs_735)
        (cons_9‹??_67,??_68› ?_79[0;0] y_732 ys_736))

#[program]
def add_zero_33‹› : ?_84[0;0] := ((add_17) zero_6)

#[program]
def test_34‹› : ?_85[0;0] := ((add_17) zero_6 zero_6)

-----------------------------------------

#[program]
def id_1‹s_5102› : ∀ (A_5103 : Type‹s_5102›) -> A_5103 -> A_5103 :=
  fun id_5105 : ∀ (A_5106 : Type‹s_5102›) -> A_5106 -> A_5106
  | A_5108 m_5109 => m_5109

#[logical]
inductive eq_1‹s_5110› (A_5111 : Type‹s_5110›) (m_5112 : A_5111):
  A_5111 -> U
where
| refl_1 : (eq_1‹s_5110› A_5111 m_5112 m_5112)

#[program]
def rwl_2‹s_5114,r_5115› :
  ∀ {A_5116 : Type‹s_5114›} ->
    ∀ {m_5117 : A_5116} ->
      ∀ {n_5118 : A_5116} ->
        ∀ {B_5119 : A_5116 -> Type‹r_5115›} ->
          {(eq_1‹s_5114› A_5116 m_5117 n_5118)} ->
            ((B_5119) m_5117) -> ((B_5119) n_5118)
:=
  fun rwl_5123 :
    ∀ {A_5124 : Type‹s_5114›} ->
      ∀ {m_5125 : A_5124} ->
        ∀ {n_5126 : A_5124} ->
          ∀ {B_5127 : A_5124 -> Type‹r_5115›} ->
            {(eq_1‹s_5114› A_5124 m_5125 n_5126)} ->
              ((B_5127) m_5125) -> ((B_5127) n_5126)
  | A_5131 m_5132 n_5133 B_5134 refl_1 __5135 => __5135

#[program]
def rwr_3‹s_5136,r_5137› :
  ∀ {A_5138 : Type‹s_5136›} ->
    ∀ {m_5139 : A_5138} ->
      ∀ {n_5140 : A_5138} ->
        ∀ {B_5141 : A_5138 -> Type‹r_5137›} ->
          {(eq_1‹s_5136› A_5138 m_5139 n_5140)} ->
            ((B_5141) n_5140) -> ((B_5141) m_5139)
:=
  fun rwr_5145 :
    ∀ {A_5146 : Type‹s_5136›} ->
      ∀ {m_5147 : A_5146} ->
        ∀ {n_5148 : A_5146} ->
          ∀ {B_5149 : A_5146 -> Type‹r_5137›} ->
            {(eq_1‹s_5136› A_5146 m_5147 n_5148)} ->
              ((B_5149) n_5148) -> ((B_5149) m_5147)
  | A_5153 m_5154 n_5155 B_5156 refl_1 __5157 => __5157

#[logical]
def congr_4‹s_5158,r_5159,t_5160› :
  ∀ (A_5161 : Type‹s_5158›) ->
    ∀ (B_5162 : Type‹r_5159›) ->
      ∀ (m_5163 : A_5161) ->
        ∀ (n_5164 : A_5161) ->
          ∀ (f_5165 : forall‹t_5160›(__5166 : A_5161), B_5162) ->
            (eq_1‹s_5158› A_5161 m_5163 n_5164) ->
              (eq_1‹r_5159› B_5162 ((f_5165) m_5163) ((f_5165) n_5164))
:=
  fun congr_5168 :
    ∀ (A_5169 : Type‹s_5158›) ->
      ∀ (B_5170 : Type‹r_5159›) ->
        ∀ (m_5171 : A_5169) ->
          ∀ (n_5172 : A_5169) ->
            ∀ (f_5173 : forall‹t_5160›(__5174 : A_5169), B_5170) ->
              (eq_1‹s_5158› A_5169 m_5171 n_5172) ->
                (eq_1‹r_5159› B_5170 ((f_5173) m_5171) ((f_5173) n_5172))
  | A_5176 B_5177 m_5178 n_5179 f_5180 refl_1 =>
    (refl_1‹r_5159› B_5177 ((f_5180) n_5179))

#[logical]
def axiom_K_5‹› :
  ∀ {A_5181 : U} ->
    ∀ {m_5182 : A_5181} ->
      ∀ (x_5183 : (eq_1‹U› A_5181 m_5182 m_5182)) ->
        (eq_1‹U›
          (eq_1‹U› A_5181 m_5182 m_5182) x_5183
          (refl_1‹U› A_5181 m_5182))
:=
  fun axiom_K_5184 :
    ∀ {A_5185 : U} ->
      ∀ {m_5186 : A_5185} ->
        ∀ (x_5187 : (eq_1‹U› A_5185 m_5186 m_5186)) ->
          (eq_1‹U›
            (eq_1‹U› A_5185 m_5186 m_5186) x_5187
            (refl_1‹U› A_5185 m_5186))
  | A_5188 m_5189 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_5188 m_5189 m_5189) (refl_1‹U› A_5188 m_5189))

#[program]
inductive sing_2‹s_5190,t_5191› (A_5192 : Type‹s_5190›):
  A_5192 -> Type‹t_5191›
where
| just_2 (m_5194 : A_5192) : (sing_2‹s_5190,t_5191› A_5192 m_5194)

#[logical]
def ssing_6‹s_5195› :
  ∀ (A_5196 : Type‹s_5195›) -> A_5196 -> Type‹s_5195›
:=
  fun ssing_5198 :
    ∀ (A_5199 : Type‹s_5195›) -> A_5199 -> Type‹s_5195›
  | A_5201 m_5202 => (sing_2‹s_5195,s_5195› A_5201 m_5202)

#[program]
def sing_elim_7‹s_5203,t_5204› :
  ∀ {A_5205 : Type‹s_5203›} ->
    ∀ {x_5206 : A_5205} ->
      (sing_2‹s_5203,t_5204› A_5205 x_5206) -> A_5205
:=
  fun sing_elim_5208 :
    ∀ {A_5209 : Type‹s_5203›} ->
      ∀ {x_5210 : A_5209} ->
        (sing_2‹s_5203,t_5204› A_5209 x_5210) -> A_5209
  | A_5212 x_5213 (just_2 m_5214) => m_5214

#[logical]
def sing_uniq_8‹s_5215,t_5216› :
  ∀ (A_5217 : Type‹s_5215›) ->
    ∀ (x0_5218 : A_5217) ->
      ∀ (x_5219 : (sing_2‹s_5215,t_5216› A_5217 x0_5218)) ->
        (eq_1‹s_5215›
          A_5217 x0_5218
          ((sing_elim_7‹s_5215,t_5216›) A_5217 x0_5218 x_5219))
:=
  fun sing_uniq_5220 :
    ∀ (A_5221 : Type‹s_5215›) ->
      ∀ (x0_5222 : A_5221) ->
        ∀ (x_5223 : (sing_2‹s_5215,t_5216› A_5221 x0_5222)) ->
          (eq_1‹s_5215›
            A_5221 x0_5222
            ((sing_elim_7‹s_5215,t_5216›) A_5221 x0_5222 x_5223))
  | A_5224 x0_5225 (just_2 m_5226) => (refl_1‹s_5215› A_5224 m_5226)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_5227 : unit_3) -> (eq_1‹U› unit_3 x_5227 tt_3)
:=
  fun unit_eta_5228 :
    ∀ (x_5229 : unit_3) -> (eq_1‹U› unit_3 x_5229 tt_3)
  | x_5230 =>
    match x_5230 in
      ∀ (x0_5231 : unit_3) -o (eq_1‹U› unit_3 x0_5231 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_5233 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_5237 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __5240 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_5243 : bool_4 -> bool_4 -> bool_4
  | true_4 __5246 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_5249 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_5252 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_5255 : nat_5 -> nat_5 -> bool_4
  | zero_6 __5258 => true_4
  | (succ_7 n_5259) zero_6 => false_5
  | (succ_7 n_5260) (succ_7 n_5261) => ((lte_5255) n_5260 n_5261)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_5264 : nat_5 -> nat_5 -> bool_4
  | x_5267 y_5268 => ((lte_14) (succ_7‹› x_5267) y_5268)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_5270 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_5272) => n_5272

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_5275 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5278 => __5278
  | (succ_7 n_5279) __5280 => (succ_7‹› ((add_5275) n_5279 __5280))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_5283 : nat_5 -> nat_5 -> nat_5
  | __5286 zero_6 => __5286
  | __5287 (succ_7 n_5288) => ((sub_5283) ((pred_16) __5287) n_5288)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_5291 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5294 => zero_6
  | (succ_7 n_5295) __5296 => ((add_17) __5296 ((mul_5291) n_5295 __5296))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_5299 : nat_5 -> nat_5 -> nat_5
  | x_5302 y_5303 =>
    match ((lt_15) x_5302 y_5303) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_5305 :=
        fun loop_5306 : nat_5 -> nat_5 -> nat_5
        | x_5309 y_5310 =>
          match ((sub_18) x_5309 ((pred_16) y_5310)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_5312) => (succ_7‹› ((loop_5306) n_5312 y_5310))
      in ((loop_5305) x_5302 y_5303)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_5315 : nat_5 -> nat_5 -> nat_5
  | x_5318 y_5319 =>
    ((sub_18) x_5318 ((mul_19) ((div_20) x_5318 y_5319) y_5319))

#[program]
inductive list_6‹s_5320,t_5321› (A_5322 : Type‹s_5320›):
  Type‹t_5321›
where
| nil_8 : (list_6‹s_5320,t_5321› A_5322)
| cons_9
    (hd_5323 : A_5322) (tl_5324 : (list_6‹s_5320,t_5321› A_5322))
    : (list_6‹s_5320,t_5321› A_5322)

#[program]
def free_list_22‹s_5325,t_5326› :
  ∀ {A_5327 : Type‹s_5325›} ->
    A_5327 -> unit_3 -> (list_6‹s_5325,t_5326› A_5327) -> unit_3
:=
  fun free_list_5331 :
    ∀ {A_5332 : Type‹s_5325›} ->
      A_5332 -> unit_3 -> (list_6‹s_5325,t_5326› A_5332) -> unit_3
  | A_5336 f_5337 nil_8 => tt_3
  | A_5338 f_5339 (cons_9 hd_5340 tl_5341) =>
    let __5342 := ((f_5339) hd_5340) in
    ((free_list_5331) A_5338 f_5339 tl_5341)

#[program]
inductive exists0_7‹s_5343,r_5344› (A_5345 : Type‹s_5343›) (B_5346 : 
A_5345 -> Type‹r_5344›): L where
| ex0_10
    {m_5348 : A_5345} (n_5349 : ((B_5346) m_5348))
    : (exists0_7‹s_5343,r_5344› A_5345 B_5346)

#[program]
inductive exists1_8‹s_5350,r_5351› (A_5352 : Type‹s_5350›) (B_5353 : 
A_5352 -> Type‹r_5351›): L where
| ex1_11
    (m_5355 : A_5352) (n_5356 : ((B_5353) m_5355))
    : (exists1_8‹s_5350,r_5351› A_5352 B_5353)

#[logical]
def prod0_23‹s_5357,r_5358› : Type‹s_5357› -> Type‹r_5358› -> L
:=
  fun prod0_5361 : Type‹s_5357› -> Type‹r_5358› -> L
  | A_5364 B_5365 =>
    (exists0_7‹s_5357,r_5358›
      A_5364 fun _5366 : A_5364 -> Type‹r_5358›
             | __5368 => B_5365)

#[logical]
def prod1_24‹s_5369,r_5370› : Type‹s_5369› -> Type‹r_5370› -> L
:=
  fun prod1_5373 : Type‹s_5369› -> Type‹r_5370› -> L
  | A_5376 B_5377 =>
    (exists1_8‹s_5369,r_5370›
      A_5376 fun _5378 : A_5376 -> Type‹r_5370›
             | __5380 => B_5377)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_5383 : int -> int -> int
  | x_5386 y_5387 =>
    let loop_5388 :=
      fun loop_5389 : int -> int -> int
      | acc_5392 y_5393 =>
        match (__lte__ y_5393 0) in bool_4 -o int with
        | true_4 => acc_5392
        | false_5 =>
          ((loop_5389) (__mul__ x_5386 acc_5392) (__sub__ y_5393 1))
    in ((loop_5388) 1 y_5387)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_5398 : int -> int -> int -> int
  | x_5402 y_5403 m_5404 =>
    let loop_5405 :=
      fun loop_5406 : int -> int -> int
      | acc_5409 y_5410 =>
        match (__lte__ y_5410 0) in bool_4 -o int with
        | true_4 => acc_5409
        | false_5 =>
          ((loop_5406)
            (__mod__ (__mul__ x_5402 acc_5409) m_5404) (__sub__ y_5410 1))
    in ((loop_5405) 1 y_5403)

#[program]
def ord_27‹› : char -> int :=
  fun ord_5413 : char -> int
  | c_5415 => (__ord__ c_5415)

#[program]
def chr_28‹› : int -> char :=
  fun chr_5417 : int -> char
  | i_5419 => (__chr__ i_5419)

#[program]
def str_29‹› : char -> string :=
  fun str_5421 : char -> string
  | c_5423 => (__push__ "" c_5423)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_5425 : string -> int
  | s_5427 => (__size__ s_5427)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_5429 : int -> string
  | i_5431 =>
    let aux_5432 :=
      fun aux_5433 : int -> string
      | i_5435 =>
        match (__lte__ 10 i_5435) in bool_4 -o string with
        | true_4 =>
          let r_5437 := (__mod__ i_5435 10) in
          let i_5438 := (__div__ i_5435 10) in
          (__push__ ((aux_5433) i_5438)
            ((chr_28) (__add__ r_5437 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_5435 ((ord_27) 0))))
    in
    match (__lt__ 0 i_5431) in bool_4 -o string with
    | true_4 => ((aux_5432) i_5431)
    | false_5 => (__cat__ "~" ((aux_5432) (__neg__ i_5431)))

#[program]
def split_32‹t_5440› :
  (list_6‹U,t_5440› int) ->
    ((prod1_24‹t_5440,t_5440›)
      (list_6‹U,t_5440› int) (list_6‹U,t_5440› int))
:=
  fun split_5442 :
    (list_6‹U,t_5440› int) ->
      ((prod1_24‹t_5440,t_5440›)
        (list_6‹U,t_5440› int) (list_6‹U,t_5440› int))
  | nil_8 =>
    (ex1_11‹t_5440,t_5440›
      (list_6‹U,t_5440› int)
      fun _5444 : (list_6‹U,t_5440› int) -> Type‹t_5440›
      | __5446 => (list_6‹U,t_5440› int) (nil_8‹U,t_5440› int)
      (nil_8‹U,t_5440› int))
  | (cons_9 hd_5447 nil_8) =>
    (ex1_11‹t_5440,t_5440›
      (list_6‹U,t_5440› int)
      fun _5448 : (list_6‹U,t_5440› int) -> Type‹t_5440›
      | __5450 => (list_6‹U,t_5440› int)
      (cons_9‹U,t_5440› int hd_5447 (nil_8‹U,t_5440› int))
      (nil_8‹U,t_5440› int))
  | (cons_9 hd_5451 (cons_9 hd_5452 tl_5453)) =>
    match ((split_5442) tl_5453) in
      ((prod1_24‹t_5440,t_5440›)
        (list_6‹U,t_5440› int) (list_6‹U,t_5440› int)) -o
        ((prod1_24‹t_5440,t_5440›)
          (list_6‹U,t_5440› int) (list_6‹U,t_5440› int))
    with
    | (ex1_11 m_5455 n_5456) =>
      (ex1_11‹t_5440,t_5440›
        (list_6‹U,t_5440› int)
        fun _5457 : (list_6‹U,t_5440› int) -> Type‹t_5440›
        | __5459 => (list_6‹U,t_5440› int)
        (cons_9‹U,t_5440› int hd_5451 m_5455)
        (cons_9‹U,t_5440› int hd_5452 n_5456))

#[program]
def add_zero_33‹› : nat_5 -> nat_5 := ((add_17) zero_6)

#[program]
def test_34‹› : nat_5 := ((add_17) zero_6 zero_6)

-----------------------------------------

#[program]
def idU_36 := fun id_9017 (A_9018) -> (m_9019) ->
                m_9019

#[program]
def idL_35 := fun id_9020 (A_9021) -> (m_9022) ->
                m_9022

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_40 :=
  fun rwl_9023 {A_9024} -> {m_9025} -> {n_9026} -> {B_9027} -> {__9028} ->
  (__9029) ->
    match {NULL} with
    | reflU_13  => __9029
    end

#[program]
def rwlUL_39 :=
  fun rwl_9030 {A_9031} -> {m_9032} -> {n_9033} -> {B_9034} -> {__9035} ->
  (__9036) ->
    match {NULL} with
    | reflU_13  => __9036
    end

#[program]
def rwlLU_38 :=
  fun rwl_9037 {A_9038} -> {m_9039} -> {n_9040} -> {B_9041} -> {__9042} ->
  (__9043) ->
    match {NULL} with
    | reflL_12  => __9043
    end

#[program]
def rwlLL_37 :=
  fun rwl_9044 {A_9045} -> {m_9046} -> {n_9047} -> {B_9048} -> {__9049} ->
  (__9050) ->
    match {NULL} with
    | reflL_12  => __9050
    end

#[program]
def rwrUU_44 :=
  fun rwr_9051 {A_9052} -> {m_9053} -> {n_9054} -> {B_9055} -> {__9056} ->
  (__9057) ->
    match {NULL} with
    | reflU_13  => __9057
    end

#[program]
def rwrUL_43 :=
  fun rwr_9058 {A_9059} -> {m_9060} -> {n_9061} -> {B_9062} -> {__9063} ->
  (__9064) ->
    match {NULL} with
    | reflU_13  => __9064
    end

#[program]
def rwrLU_42 :=
  fun rwr_9065 {A_9066} -> {m_9067} -> {n_9068} -> {B_9069} -> {__9070} ->
  (__9071) ->
    match {NULL} with
    | reflL_12  => __9071
    end

#[program]
def rwrLL_41 :=
  fun rwr_9072 {A_9073} -> {m_9074} -> {n_9075} -> {B_9076} -> {__9077} ->
  (__9078) ->
    match {NULL} with
    | reflL_12  => __9078
    end

#[logical]
def congrUUU_52 := NULL

#[logical]
def congrUUL_51 := NULL

#[logical]
def congrULU_50 := NULL

#[logical]
def congrULL_49 := NULL

#[logical]
def congrLUU_48 := NULL

#[logical]
def congrLUL_47 := NULL

#[logical]
def congrLLU_46 := NULL

#[logical]
def congrLLL_45 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_54 := NULL

#[logical]
def ssingL_53 := NULL

#[program]
def sing_elimUU_58 :=
  fun sing_elim_9079 {A_9080} -> {x_9081} -> (__9082) ->
    match __9082 with
    | justUU_17 m_9083 => m_9083
    end

#[program]
def sing_elimUL_57 :=
  fun sing_elim_9084 {A_9085} -> {x_9086} -> (__9087) ->
    match __9087 with
    | justUL_16 m_9088 => m_9088
    end

#[program]
def sing_elimLU_56 :=
  fun sing_elim_9089 {A_9090} -> {x_9091} -> (__9092) ->
    match __9092 with
    
    end

#[program]
def sing_elimLL_55 :=
  fun sing_elim_9093 {A_9094} -> {x_9095} -> (__9096) ->
    match __9096 with
    | justLL_14 m_9097 => m_9097
    end

#[logical]
def sing_uniqUU_62 := NULL

#[logical]
def sing_uniqUL_61 := NULL

#[logical]
def sing_uniqLU_60 := NULL

#[logical]
def sing_uniqLL_59 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_9098 (__9099) ->
    match __9099 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_9100 (__9101) -> (__9102) ->
    match __9101 with
    | true_4  =>
      match __9102 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_9103 (__9104) -> (__9105) ->
    match __9104 with
    | true_4  => true_4
    | false_5  =>
      match __9105 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_9106 (__9107) -> (__9108) -o
    match __9107 with
    | true_4  =>
      match __9108 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __9108 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_9109 (__9110) -> (__9111) ->
    match __9110 with
    | zero_6  => true_4
    | succ_7 n_9112 =>
      match __9111 with
      | zero_6  => false_5 | succ_7 n_9113 => ((lte_9109) n_9112 n_9113)
      end
    end

#[program]
def lt_15 :=
  fun lt_9114 (x_9115) -> (y_9116) ->
    ((lte_14) (succ_7 x_9115) y_9116)

#[program]
def pred_16 :=
  fun pred_9117 (__9118) ->
    match __9118 with
    | zero_6  => zero_6 | succ_7 n_9119 => n_9119
    end

#[program]
def add_17 :=
  fun add_9120 (__9121) -> (__9122) ->
    match __9121 with
    | zero_6  => __9122
    | succ_7 n_9123 => (succ_7 ((add_9120) n_9123 __9122))
    end

#[program]
def sub_18 :=
  fun sub_9124 (__9125) -> (__9126) ->
    match __9126 with
    | zero_6  => __9125
    | succ_7 n_9127 => ((sub_9124) ((pred_16) __9125) n_9127)
    end

#[program]
def mul_19 :=
  fun mul_9128 (__9129) -> (__9130) ->
    match __9129 with
    | zero_6  => zero_6
    | succ_7 n_9131 => ((add_17) __9130 ((mul_9128) n_9131 __9130))
    end

#[program]
def div_20 :=
  fun div_9132 (x_9133) -> (y_9134) ->
    match ((lt_15) x_9133 y_9134) with
    | true_4  => zero_6
    | false_5  =>
      let loop_9135 :=
        fun loop_9136 (x_9137) -> (y_9138) ->
          match ((sub_18) x_9137 ((pred_16) y_9138)) with
          | zero_6  => zero_6
          | succ_7 n_9139 => (succ_7 ((loop_9136) n_9139 y_9138))
          end
      in ((loop_9135) x_9133 y_9134)
    end

#[program]
def rem_21 :=
  fun rem_9140 (x_9141) -> (y_9142) ->
    ((sub_18) x_9141 ((mul_19) ((div_20) x_9141 y_9142) y_9142))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_66 :=
  fun free_list_9143 {A_9144} -> (f_9145) -> (__9146) ->
    match __9146 with
    | nilUU_24  => tt_3
    | consUU_25 hd_9147 tl_9148 =>
      let __9149 := ((f_9145) hd_9147) in
      ((free_list_9143) NULL f_9145 tl_9148)
    end

#[program]
def free_listUL_65 :=
  fun free_list_9150 {A_9151} -> (f_9152) -> (__9153) ->
    match __9153 with
    | nilUL_22  => tt_3
    | consUL_23 hd_9154 tl_9155 =>
      let __9156 := ((f_9152) hd_9154) in
      ((free_list_9150) NULL f_9152 tl_9155)
    end

#[program]
def free_listLL_63 :=
  fun free_list_9157 {A_9158} -> (f_9159) -> (__9160) ->
    match __9160 with
    | nilLL_18  => tt_3
    | consLL_19 hd_9161 tl_9162 =>
      let __9163 := ((f_9159) hd_9161) in
      ((free_list_9157) NULL f_9159 tl_9162)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_70 := NULL

#[logical]
def prod0UL_69 := NULL

#[logical]
def prod0LU_68 := NULL

#[logical]
def prod0LL_67 := NULL

#[logical]
def prod1UU_74 := NULL

#[logical]
def prod1UL_73 := NULL

#[logical]
def prod1LU_72 := NULL

#[logical]
def prod1LL_71 := NULL

#[program]
def pow_25 :=
  fun pow_9164 (x_9165) -> (y_9166) ->
    let loop_9167 :=
      fun loop_9168 (acc_9169) -> (y_9170) ->
        match (__lte__ y_9170 0) with
        | true_4  => acc_9169
        | false_5  =>
          ((loop_9168) (__mul__ x_9165 acc_9169) (__sub__ y_9170 1))
        end
    in ((loop_9167) 1 y_9166)

#[program]
def powm_26 :=
  fun powm_9171 (x_9172) -> (y_9173) -> (m_9174) ->
    let loop_9175 :=
      fun loop_9176 (acc_9177) -> (y_9178) ->
        match (__lte__ y_9178 0) with
        | true_4  => acc_9177
        | false_5  =>
          ((loop_9176)
            (__mod__ (__mul__ x_9172 acc_9177) m_9174) (__sub__ y_9178 1))
        end
    in ((loop_9175) 1 y_9173)

#[program]
def ord_27 := fun ord_9179 (c_9180) ->
                (__ord__ c_9180)

#[program]
def chr_28 := fun chr_9181 (i_9182) ->
                (__chr__ i_9182)

#[program]
def str_29 := fun str_9183 (c_9184) ->
                (__push__ "" c_9184)

#[program]
def strlen_30 := fun strlen_9185 (s_9186) ->
                   (__size__ s_9186)

#[program]
def string_of_int_31 :=
  fun string_of_int_9187 (i_9188) ->
    let aux_9189 :=
      fun aux_9190 (i_9191) ->
        match (__lte__ 10 i_9191) with
        | true_4  =>
          let r_9192 := (__mod__ i_9191 10) in
          let i_9193 := (__div__ i_9191 10) in
          (__push__ ((aux_9190) i_9193)
            ((chr_28) (__add__ r_9192 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_9191 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_9188) with
    | true_4  => ((aux_9189) i_9188)
    | false_5  => (__cat__ "~" ((aux_9189) (__neg__ i_9188)))
    end

#[program]
def splitU_76 :=
  fun split_9194 (__9195) ->
    match __9195 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_9196 tl_9197 =>
      match tl_9197 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9196 nilUU_24) nilUU_24)
      | consUU_25 hd_9198 tl_9199 =>
        match ((split_9194) tl_9199) with
        | ex1UU_33 m_9200 n_9201 =>
          (ex1UU_33 (consUU_25 hd_9196 m_9200) (consUU_25 hd_9198 n_9201))
        end
      end
    end

#[program]
def splitL_75 :=
  fun split_9202 (__9203) ->
    match __9203 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_9204 tl_9205 =>
      match tl_9205 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9204 nilUL_22) nilUL_22)
      | consUL_23 hd_9206 tl_9207 =>
        match ((split_9202) tl_9207) with
        | ex1LL_30 m_9208 n_9209 =>
          (ex1LL_30 (consUL_23 hd_9204 m_9208) (consUL_23 hd_9206 n_9209))
        end
      end
    end

#[program]
def add_zero_33 := ((add_17) zero_6)

#[program]
def test_34 := ((add_17) zero_6 zero_6)

-----------------------------------------

#[program]
def idU_36 := fun id_9403 (A_9404) -> (m_9405) ->
                m_9405

#[program]
def idL_35 := fun id_9406 (A_9407) -> (m_9408) ->
                m_9408

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_40 :=
  fun rwl_9409 {A_9410} -> {m_9411} -> {n_9412} -> {B_9413} -> {__9414} ->
  (__9415) ->
    __9415

#[program]
def rwlUL_39 :=
  fun rwl_9416 {A_9417} -> {m_9418} -> {n_9419} -> {B_9420} -> {__9421} ->
  (__9422) ->
    __9422

#[program]
def rwlLU_38 :=
  fun rwl_9423 {A_9424} -> {m_9425} -> {n_9426} -> {B_9427} -> {__9428} ->
  (__9429) ->
    __9429

#[program]
def rwlLL_37 :=
  fun rwl_9430 {A_9431} -> {m_9432} -> {n_9433} -> {B_9434} -> {__9435} ->
  (__9436) ->
    __9436

#[program]
def rwrUU_44 :=
  fun rwr_9437 {A_9438} -> {m_9439} -> {n_9440} -> {B_9441} -> {__9442} ->
  (__9443) ->
    __9443

#[program]
def rwrUL_43 :=
  fun rwr_9444 {A_9445} -> {m_9446} -> {n_9447} -> {B_9448} -> {__9449} ->
  (__9450) ->
    __9450

#[program]
def rwrLU_42 :=
  fun rwr_9451 {A_9452} -> {m_9453} -> {n_9454} -> {B_9455} -> {__9456} ->
  (__9457) ->
    __9457

#[program]
def rwrLL_41 :=
  fun rwr_9458 {A_9459} -> {m_9460} -> {n_9461} -> {B_9462} -> {__9463} ->
  (__9464) ->
    __9464

#[logical]
def congrUUU_52 := NULL

#[logical]
def congrUUL_51 := NULL

#[logical]
def congrULU_50 := NULL

#[logical]
def congrULL_49 := NULL

#[logical]
def congrLUU_48 := NULL

#[logical]
def congrLUL_47 := NULL

#[logical]
def congrLLU_46 := NULL

#[logical]
def congrLLL_45 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_54 := NULL

#[logical]
def ssingL_53 := NULL

#[program]
def sing_elimUU_58 :=
  fun sing_elim_9465 {A_9466} -> {x_9467} -> (__9468) ->
    match __9468 with
    | justUU_17 m_9469 => m_9469
    end

#[program]
def sing_elimUL_57 :=
  fun sing_elim_9470 {A_9471} -> {x_9472} -> (__9473) ->
    match __9473 with
    | justUL_16 m_9474 => m_9474
    end

#[program]
def sing_elimLU_56 :=
  fun sing_elim_9475 {A_9476} -> {x_9477} -> (__9478) ->
    !!

#[program]
def sing_elimLL_55 :=
  fun sing_elim_9479 {A_9480} -> {x_9481} -> (__9482) ->
    match __9482 with
    | justLL_14 m_9483 => m_9483
    end

#[logical]
def sing_uniqUU_62 := NULL

#[logical]
def sing_uniqUL_61 := NULL

#[logical]
def sing_uniqLU_60 := NULL

#[logical]
def sing_uniqLL_59 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_9484 (__9485) ->
    match __9485 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_9486 (__9487) -> (__9488) ->
    match __9487 with
    | true_4  =>
      match __9488 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_9489 (__9490) -> (__9491) ->
    match __9490 with
    | true_4  => true_4
    | false_5  =>
      match __9491 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_9492 (__9493) -> (__9494) -o
    match __9493 with
    | true_4  =>
      match __9494 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __9494 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_9495 (__9496) -> (__9497) ->
    match __9496 with
    | zero_6  => true_4
    | succ_7 n_9498 =>
      match __9497 with
      | zero_6  => false_5 | succ_7 n_9499 => ((lte_9495) n_9498 n_9499)
      end
    end

#[program]
def lt_15 :=
  fun lt_9500 (x_9501) -> (y_9502) ->
    ((lte_14) (succ_7 x_9501) y_9502)

#[program]
def pred_16 :=
  fun pred_9503 (__9504) ->
    match __9504 with
    | zero_6  => zero_6 | succ_7 n_9505 => n_9505
    end

#[program]
def add_17 :=
  fun add_9506 (__9507) -> (__9508) ->
    match __9507 with
    | zero_6  => __9508
    | succ_7 n_9509 => (succ_7 ((add_9506) n_9509 __9508))
    end

#[program]
def sub_18 :=
  fun sub_9510 (__9511) -> (__9512) ->
    match __9512 with
    | zero_6  => __9511
    | succ_7 n_9513 => ((sub_9510) ((pred_16) __9511) n_9513)
    end

#[program]
def mul_19 :=
  fun mul_9514 (__9515) -> (__9516) ->
    match __9515 with
    | zero_6  => zero_6
    | succ_7 n_9517 => ((add_17) __9516 ((mul_9514) n_9517 __9516))
    end

#[program]
def div_20 :=
  fun div_9518 (x_9519) -> (y_9520) ->
    match ((lt_15) x_9519 y_9520) with
    | true_4  => zero_6
    | false_5  =>
      let loop_9521 :=
        fun loop_9522 (x_9523) -> (y_9524) ->
          match ((sub_18) x_9523 ((pred_16) y_9524)) with
          | zero_6  => zero_6
          | succ_7 n_9525 => (succ_7 ((loop_9522) n_9525 y_9524))
          end
      in ((loop_9521) x_9519 y_9520)
    end

#[program]
def rem_21 :=
  fun rem_9526 (x_9527) -> (y_9528) ->
    ((sub_18) x_9527 ((mul_19) ((div_20) x_9527 y_9528) y_9528))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_66 :=
  fun free_list_9529 {A_9530} -> (f_9531) -> (__9532) ->
    match __9532 with
    | nilUU_24  => tt_3
    | consUU_25 hd_9533 tl_9534 =>
      let __9535 := ((f_9531) hd_9533) in
      ((free_list_9529) NULL f_9531 tl_9534)
    end

#[program]
def free_listUL_65 :=
  fun free_list_9536 {A_9537} -> (f_9538) -> (__9539) ->
    match __9539 with
    | nilUL_22  => tt_3
    | consUL_23 hd_9540 tl_9541 =>
      let __9542 := ((f_9538) hd_9540) in
      ((free_list_9536) NULL f_9538 tl_9541)
    end

#[program]
def free_listLL_63 :=
  fun free_list_9543 {A_9544} -> (f_9545) -> (__9546) ->
    match __9546 with
    | nilLL_18  => tt_3
    | consLL_19 hd_9547 tl_9548 =>
      let __9549 := ((f_9545) hd_9547) in
      ((free_list_9543) NULL f_9545 tl_9548)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_70 := NULL

#[logical]
def prod0UL_69 := NULL

#[logical]
def prod0LU_68 := NULL

#[logical]
def prod0LL_67 := NULL

#[logical]
def prod1UU_74 := NULL

#[logical]
def prod1UL_73 := NULL

#[logical]
def prod1LU_72 := NULL

#[logical]
def prod1LL_71 := NULL

#[program]
def pow_25 :=
  fun pow_9550 (x_9551) -> (y_9552) ->
    let loop_9553 :=
      fun loop_9554 (acc_9555) -> (y_9556) ->
        match (__lte__ y_9556 0) with
        | true_4  => acc_9555
        | false_5  =>
          ((loop_9554) (__mul__ x_9551 acc_9555) (__sub__ y_9556 1))
        end
    in ((loop_9553) 1 y_9552)

#[program]
def powm_26 :=
  fun powm_9557 (x_9558) -> (y_9559) -> (m_9560) ->
    let loop_9561 :=
      fun loop_9562 (acc_9563) -> (y_9564) ->
        match (__lte__ y_9564 0) with
        | true_4  => acc_9563
        | false_5  =>
          ((loop_9562)
            (__mod__ (__mul__ x_9558 acc_9563) m_9560) (__sub__ y_9564 1))
        end
    in ((loop_9561) 1 y_9559)

#[program]
def ord_27 := fun ord_9565 (c_9566) ->
                (__ord__ c_9566)

#[program]
def chr_28 := fun chr_9567 (i_9568) ->
                (__chr__ i_9568)

#[program]
def str_29 := fun str_9569 (c_9570) ->
                (__push__ "" c_9570)

#[program]
def strlen_30 := fun strlen_9571 (s_9572) ->
                   (__size__ s_9572)

#[program]
def string_of_int_31 :=
  fun string_of_int_9573 (i_9574) ->
    let aux_9575 :=
      fun aux_9576 (i_9577) ->
        match (__lte__ 10 i_9577) with
        | true_4  =>
          let r_9578 := (__mod__ i_9577 10) in
          let i_9579 := (__div__ i_9577 10) in
          (__push__ ((aux_9576) i_9579)
            ((chr_28) (__add__ r_9578 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_9577 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_9574) with
    | true_4  => ((aux_9575) i_9574)
    | false_5  => (__cat__ "~" ((aux_9575) (__neg__ i_9574)))
    end

#[program]
def splitU_76 :=
  fun split_9580 (__9581) ->
    match __9581 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_9582 tl_9583 =>
      match tl_9583 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9582 nilUU_24) nilUU_24)
      | consUU_25 hd_9584 tl_9585 =>
        match ((split_9580) tl_9585) with
        | ex1UU_33 m_9586 n_9587 =>
          (ex1UU_33 (consUU_25 hd_9582 m_9586) (consUU_25 hd_9584 n_9587))
        end
      end
    end

#[program]
def splitL_75 :=
  fun split_9588 (__9589) ->
    match __9589 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_9590 tl_9591 =>
      match tl_9591 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9590 nilUL_22) nilUL_22)
      | consUL_23 hd_9592 tl_9593 =>
        match ((split_9588) tl_9593) with
        | ex1LL_30 m_9594 n_9595 =>
          (ex1LL_30 (consUL_23 hd_9590 m_9594) (consUL_23 hd_9592 n_9595))
        end
      end
    end

#[program]
def add_zero_33 := ((add_17) zero_6)

#[program]
def test_34 := ((add_17) zero_6 zero_6)

-----------------------------------------

def idU_36 := fun id_9789 (A_9790) -> (m_9791) -> m_9791

def idL_35 := fun id_9792 (A_9793) -> (m_9794) -> m_9794

def rwlUU_40 :=
  fun rwl_9795 (A_9796) -> (m_9797) -> (n_9798) -> (B_9799) -> (__9800) ->
  (__9801) -> __9801

def rwlUL_39 :=
  fun rwl_9802 (A_9803) -> (m_9804) -> (n_9805) -> (B_9806) -> (__9807) ->
  (__9808) -> __9808

def rwlLU_38 :=
  fun rwl_9809 (A_9810) -> (m_9811) -> (n_9812) -> (B_9813) -> (__9814) ->
  (__9815) -> __9815

def rwlLL_37 :=
  fun rwl_9816 (A_9817) -> (m_9818) -> (n_9819) -> (B_9820) -> (__9821) ->
  (__9822) -> __9822

def rwrUU_44 :=
  fun rwr_9823 (A_9824) -> (m_9825) -> (n_9826) -> (B_9827) -> (__9828) ->
  (__9829) -> __9829

def rwrUL_43 :=
  fun rwr_9830 (A_9831) -> (m_9832) -> (n_9833) -> (B_9834) -> (__9835) ->
  (__9836) -> __9836

def rwrLU_42 :=
  fun rwr_9837 (A_9838) -> (m_9839) -> (n_9840) -> (B_9841) -> (__9842) ->
  (__9843) -> __9843

def rwrLL_41 :=
  fun rwr_9844 (A_9845) -> (m_9846) -> (n_9847) -> (B_9848) -> (__9849) ->
  (__9850) -> __9850

def sing_elimUU_58 :=
  fun sing_elim_9851 (A_9852) -> (x_9853) -> (__9854) -> __9854

def sing_elimUL_57 :=
  fun sing_elim_9855 (A_9856) -> (x_9857) -> (__9858) -> __9858

def sing_elimLU_56 :=
  fun sing_elim_9859 (A_9860) -> (x_9861) -> (__9862) -> !!

def sing_elimLL_55 :=
  fun sing_elim_9863 (A_9864) -> (x_9865) -> (__9866) -> __9866

def not_10 :=
  fun not_9867 (__9868) ->
    match __9868 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_9869 (__9870) -> (__9871) ->
    match __9870 with
    | true_4 => match __9871 with
                | true_4 => true_4 | false_5 => false_5
                end
    | false_5 => false_5
    end

def or_12 :=
  fun or_9872 (__9873) -> (__9874) ->
    match __9873 with
    | true_4 => true_4
    | false_5 =>
      match __9874 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_9875 (__9876) -> (__9877) -o
    match __9876 with
    | true_4 => match __9877 with
                | true_4 => false_5 | false_5 => true_4
                end
    | false_5 =>
      match __9877 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_9878 (__9879) -> (__9880) ->
    match __9879 with
    | zero_6  => true_4
    | succ_7 n_9881 =>
      match __9880 with
      | zero_6  => false_5 | succ_7 n_9882 => ((lte_9878) n_9881 n_9882)
      end
    end

def lt_15 :=
  fun lt_9883 (x_9884) -> (y_9885) -> ((lte_14) (succ_7 x_9884) y_9885)

def pred_16 :=
  fun pred_9886 (__9887) ->
    match __9887 with
    | zero_6  => (zero_6 ) | succ_7 n_9888 => n_9888
    end

def add_17 :=
  fun add_9889 (__9890) -> (__9891) ->
    match __9890 with
    | zero_6  => __9891
    | succ_7 n_9892 => (succ_7 ((add_9889) n_9892 __9891))
    end

def sub_18 :=
  fun sub_9893 (__9894) -> (__9895) ->
    match __9895 with
    | zero_6  => __9894
    | succ_7 n_9896 => ((sub_9893) ((pred_16) __9894) n_9896)
    end

def mul_19 :=
  fun mul_9897 (__9898) -> (__9899) ->
    match __9898 with
    | zero_6  => (zero_6 )
    | succ_7 n_9900 => ((add_17) __9899 ((mul_9897) n_9900 __9899))
    end

def div_20 :=
  fun div_9901 (x_9902) -> (y_9903) ->
    match ((lt_15) x_9902 y_9903) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_9904 :=
        fun loop_9905 (x_9906) -> (y_9907) ->
          match ((sub_18) x_9906 ((pred_16) y_9907)) with
          | zero_6  => (zero_6 )
          | succ_7 n_9908 => (succ_7 ((loop_9905) n_9908 y_9907))
          end
      in ((loop_9904) x_9902 y_9903)
    end

def rem_21 :=
  fun rem_9909 (x_9910) -> (y_9911) ->
    ((sub_18) x_9910 ((mul_19) ((div_20) x_9910 y_9911) y_9911))

def free_listUU_66 :=
  fun free_list_9912 (A_9913) -> (f_9914) -> (__9915) ->
    match __9915 with
    | nilUU_24  => tt_3
    | consUU_25 hd_9916 tl_9917 =>
      let __9918 := ((f_9914) hd_9916) in
      ((free_list_9912) NULL f_9914 tl_9917)
    end

def free_listUL_65 :=
  fun free_list_9919 (A_9920) -> (f_9921) -> (__9922) ->
    match __9922 with
    | nilUL_22  => tt_3
    | consUL_23 hd_9923 tl_9924 =>
      let __9925 := ((f_9921) hd_9923) in
      ((free_list_9919) NULL f_9921 tl_9924)
    end

def free_listLL_63 :=
  fun free_list_9926 (A_9927) -> (f_9928) -> (__9929) ->
    match __9929 with
    | nilLL_18  => tt_3
    | consLL_19 hd_9930 tl_9931 =>
      let __9932 := ((f_9928) hd_9930) in
      ((free_list_9926) NULL f_9928 tl_9931)
    end

def pow_25 :=
  fun pow_9933 (x_9934) -> (y_9935) ->
    let loop_9936 :=
      fun loop_9937 (acc_9938) -> (y_9939) ->
        match (__lte__ y_9939 0) with
        | true_4 => acc_9938
        | false_5 =>
          ((loop_9937) (__mul__ x_9934 acc_9938) (__sub__ y_9939 1))
        end
    in ((loop_9936) 1 y_9935)

def powm_26 :=
  fun powm_9940 (x_9941) -> (y_9942) -> (m_9943) ->
    let loop_9944 :=
      fun loop_9945 (acc_9946) -> (y_9947) ->
        match (__lte__ y_9947 0) with
        | true_4 => acc_9946
        | false_5 =>
          ((loop_9945)
            (__mod__ (__mul__ x_9941 acc_9946) m_9943) (__sub__ y_9947 1))
        end
    in ((loop_9944) 1 y_9942)

def ord_27 := fun ord_9948 (c_9949) -> (__ord__ c_9949)

def chr_28 := fun chr_9950 (i_9951) -> (__chr__ i_9951)

def str_29 := fun str_9952 (c_9953) -> (__push__ "" c_9953)

def strlen_30 := fun strlen_9954 (s_9955) -> (__size__ s_9955)

def string_of_int_31 :=
  fun string_of_int_9956 (i_9957) ->
    let aux_9958 :=
      fun aux_9959 (i_9960) ->
        match (__lte__ 10 i_9960) with
        | true_4 =>
          let r_9961 := (__mod__ i_9960 10) in
          let i_9962 := (__div__ i_9960 10) in
          (__push__ ((aux_9959) i_9962)
            ((chr_28) (__add__ r_9961 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_9960 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_9957) with
    | true_4 => ((aux_9958) i_9957)
    | false_5 => (__cat__ "~" ((aux_9958) (__neg__ i_9957)))
    end

def splitU_76 :=
  fun split_9963 (__9964) ->
    match __9964 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_9965 tl_9966 =>
      match tl_9966 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9965 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_9967 tl_9968 =>
        match ((split_9963) tl_9968) with
        | ex1UU_33 m_9969 n_9970 =>
          (ex1UU_33 (consUU_25 hd_9965 m_9969) (consUU_25 hd_9967 n_9970))
        end
      end
    end

def splitL_75 :=
  fun split_9971 (__9972) ->
    match __9972 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_9973 tl_9974 =>
      match tl_9974 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9973 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_9975 tl_9976 =>
        match ((split_9971) tl_9976) with
        | ex1LL_30 m_9977 n_9978 =>
          (ex1LL_30 (consUL_23 hd_9973 m_9977) (consUL_23 hd_9975 n_9978))
        end
      end
    end

def add_zero_33 := ((add_17) (zero_6 ))

def test_34 := ((add_17) (zero_6 ) (zero_6 ))

-----------------------------------------

def idU_36 := lam (A_10169) -> (m_10170) -> m_10170

def idL_35 := lam (A_10171) -> (m_10172) -> m_10172

def rwlUU_40 :=
  lam (A_10173) -> (m_10174) -> (n_10175) -> (B_10176) -> (__10177) ->
  (__10178) -> __10178

def rwlUL_39 :=
  lam (A_10179) -> (m_10180) -> (n_10181) -> (B_10182) -> (__10183) ->
  (__10184) -> __10184

def rwlLU_38 :=
  lam (A_10185) -> (m_10186) -> (n_10187) -> (B_10188) -> (__10189) ->
  (__10190) -> __10190

def rwlLL_37 :=
  lam (A_10191) -> (m_10192) -> (n_10193) -> (B_10194) -> (__10195) ->
  (__10196) -> __10196

def rwrUU_44 :=
  lam (A_10197) -> (m_10198) -> (n_10199) -> (B_10200) -> (__10201) ->
  (__10202) -> __10202

def rwrUL_43 :=
  lam (A_10203) -> (m_10204) -> (n_10205) -> (B_10206) -> (__10207) ->
  (__10208) -> __10208

def rwrLU_42 :=
  lam (A_10209) -> (m_10210) -> (n_10211) -> (B_10212) -> (__10213) ->
  (__10214) -> __10214

def rwrLL_41 :=
  lam (A_10215) -> (m_10216) -> (n_10217) -> (B_10218) -> (__10219) ->
  (__10220) -> __10220

def sing_elimUU_58 := lam (A_10221) -> (x_10222) -> (__10223) -> __10223

def sing_elimUL_57 := lam (A_10224) -> (x_10225) -> (__10226) -> __10226

def sing_elimLU_56 := lam (A_10227) -> (x_10228) -> (__10229) -> !!

def sing_elimLL_55 := lam (A_10230) -> (x_10231) -> (__10232) -> __10232

def not_10 :=
  lam (__10233) ->
    match __10233 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__10234) -> (__10235) ->
    match __10234 with
    | true_4 =>
      match __10235 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__10236) -> (__10237) ->
    match __10236 with
    | true_4 => true_4
    | false_5 =>
      match __10237 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__10238) -> (__10239) -o
    match __10238 with
    | true_4 =>
      match __10239 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __10239 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_10240 (__10241) -> (__10242) ->
    match __10241 with
    | zero_6  => true_4
    | succ_7 n_10243 =>
      match __10242 with
      | zero_6  => false_5 | succ_7 n_10244 => ((lte_10240) n_10243 n_10244)
      end
    end

def lt_15 :=
  lam (x_10245) -> (y_10246) -> ((lte_14) (succ_7 x_10245) y_10246)

def pred_16 :=
  lam (__10247) ->
    match __10247 with
    | zero_6  => (zero_6 ) | succ_7 n_10248 => n_10248
    end

def add_17 :=
  fun add_10249 (__10250) -> (__10251) ->
    match __10250 with
    | zero_6  => __10251
    | succ_7 n_10252 => (succ_7 ((add_10249) n_10252 __10251))
    end

def sub_18 :=
  fun sub_10253 (__10254) -> (__10255) ->
    match __10255 with
    | zero_6  => __10254
    | succ_7 n_10256 => ((sub_10253) ((pred_16) __10254) n_10256)
    end

def mul_19 :=
  fun mul_10257 (__10258) -> (__10259) ->
    match __10258 with
    | zero_6  => (zero_6 )
    | succ_7 n_10260 => ((add_17) __10259 ((mul_10257) n_10260 __10259))
    end

def div_20 :=
  lam (x_10261) -> (y_10262) ->
    match ((lt_15) x_10261 y_10262) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_10263 :=
        fun loop_10264 (x_10265) -> (y_10266) ->
          match ((sub_18) x_10265 ((pred_16) y_10266)) with
          | zero_6  => (zero_6 )
          | succ_7 n_10267 => (succ_7 ((loop_10264) n_10267 y_10266))
          end
      in ((loop_10263) x_10261 y_10262)
    end

def rem_21 :=
  lam (x_10268) -> (y_10269) ->
    ((sub_18) x_10268 ((mul_19) ((div_20) x_10268 y_10269) y_10269))

def free_listUU_66 :=
  fun free_list_10270 (A_10271) -> (f_10272) -> (__10273) ->
    match __10273 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10274 tl_10275 =>
      let __10276 := ((f_10272) hd_10274) in
      ((free_list_10270) NULL f_10272 tl_10275)
    end

def free_listUL_65 :=
  fun free_list_10277 (A_10278) -> (f_10279) -> (__10280) ->
    match __10280 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10281 tl_10282 =>
      let __10283 := ((f_10279) hd_10281) in
      ((free_list_10277) NULL f_10279 tl_10282)
    end

def free_listLL_63 :=
  fun free_list_10284 (A_10285) -> (f_10286) -> (__10287) ->
    match __10287 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10288 tl_10289 =>
      let __10290 := ((f_10286) hd_10288) in
      ((free_list_10284) NULL f_10286 tl_10289)
    end

def pow_25 :=
  lam (x_10291) -> (y_10292) ->
    let loop_10293 :=
      fun loop_10294 (acc_10295) -> (y_10296) ->
        match (__lte__ y_10296 0) with
        | true_4 => acc_10295
        | false_5 =>
          ((loop_10294) (__mul__ x_10291 acc_10295) (__sub__ y_10296 1))
        end
    in ((loop_10293) 1 y_10292)

def powm_26 :=
  lam (x_10297) -> (y_10298) -> (m_10299) ->
    let loop_10300 :=
      fun loop_10301 (acc_10302) -> (y_10303) ->
        match (__lte__ y_10303 0) with
        | true_4 => acc_10302
        | false_5 =>
          ((loop_10301)
            (__mod__ (__mul__ x_10297 acc_10302) m_10299) (__sub__ y_10303 1))
        end
    in ((loop_10300) 1 y_10298)

def ord_27 := lam (c_10304) -> (__ord__ c_10304)

def chr_28 := lam (i_10305) -> (__chr__ i_10305)

def str_29 := lam (c_10306) -> (__push__ "" c_10306)

def strlen_30 := lam (s_10307) -> (__size__ s_10307)

def string_of_int_31 :=
  lam (i_10308) ->
    let aux_10309 :=
      fun aux_10310 (i_10311) ->
        match (__lte__ 10 i_10311) with
        | true_4 =>
          let r_10312 := (__mod__ i_10311 10) in
          let i_10313 := (__div__ i_10311 10) in
          (__push__ ((aux_10310) i_10313)
            ((chr_28) (__add__ r_10312 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_10311 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10308) with
    | true_4 => ((aux_10309) i_10308)
    | false_5 => (__cat__ "~" ((aux_10309) (__neg__ i_10308)))
    end

def splitU_76 :=
  fun split_10314 (__10315) ->
    match __10315 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_10316 tl_10317 =>
      match tl_10317 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10316 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_10318 tl_10319 =>
        match ((split_10314) tl_10319) with
        | ex1UU_33 m_10320 n_10321 =>
          (ex1UU_33
            (consUU_25 hd_10316 m_10320) (consUU_25 hd_10318 n_10321))
        end
      end
    end

def splitL_75 :=
  fun split_10322 (__10323) ->
    match __10323 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_10324 tl_10325 =>
      match tl_10325 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10324 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_10326 tl_10327 =>
        match ((split_10322) tl_10327) with
        | ex1LL_30 m_10328 n_10329 =>
          (ex1LL_30
            (consUL_23 hd_10324 m_10328) (consUL_23 hd_10326 n_10329))
        end
      end
    end

def add_zero_33 := ((add_17) (zero_6 ))

def test_34 := ((add_17) (zero_6 ) (zero_6 ))

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_231 := push("", c_230);
  return x_231;
}

fn strlen_232(s_233%U) {
  x_234 := size(s_233);
  return x_234;
}

fn string_of_int_235(i_236%U) {
  x_238 :=
    fn aux_239(i_240%U) {
      x_242 := lte(10, i_240);
      match(x_242){
        true_4() => {
          x_244 := mul(i_240, 10);
          r_243 := x_244;
          x_246 := mul(i_240, 10);
          i_245 := x_246;
          x_248 := aux_239(i_245);
          x_251 := ord_223(0);
          x_250 := add(r_243, x_251);
          x_249 := chr_226(x_250);
          x_247 := push(x_248, x_249);
          x_241 := x_247;
        }
        false_5() => {
          x_255 := ord_223(0);
          x_254 := add(i_240, x_255);
          x_253 := chr_226(x_254);
          x_252 := str_229(x_253);
          x_241 := x_252;
        }
      }
      return x_241;
    };
  aux_237 := x_238;
  x_257 := lt(0, i_236);
  match(x_257){
    true_4() => {
      x_258 := aux_237(i_236);
      x_256 := x_258;
    }
    false_5() => {
      x_261 := neg(i_236);
      x_260 := aux_237(x_261);
      x_259 := cat("~", x_260);
      x_256 := x_259;
    }
  }
  return x_256;
}

fn splitU_262(__263%U) {
  match[U](__263){
    nilUU_24() => {
      x_265 := mkconstr(nilUU_24, []);
      x_266 := mkconstr(nilUU_24, []);
      x_267 := mkconstr(ex1UU_33, [x_265, x_266]);
      x_264 := x_267;
    }
    consUU_25(hd_268, tl_269) => {
      match[U](tl_269){
        nilUU_24() => {
          x_271 := mkconstr(nilUU_24, []);
          x_272 := mkconstr(consUU_25, [hd_268, x_271]);
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(ex1UU_33, [x_272, x_273]);
          x_270 := x_274;
        }
        consUU_25(hd_275, tl_276) => {
          x_278 := splitU_262(tl_276);
          match[L](x_278){
            ex1UU_33(m_279, n_280) => {
              x_281 := mkconstr(consUU_25, [hd_268, m_279]);
              x_282 := mkconstr(consUU_25, [hd_275, n_280]);
              x_283 := mkconstr(ex1UU_33, [x_281, x_282]);
              x_277 := x_283;
            }
          }
          x_270 := x_277;
        }
      }
      x_264 := x_270;
    }
  }
  return x_264;
}

fn splitL_284(__285%U) {
  match[L](__285){
    nilUL_22() => {
      x_287 := mkconstr(nilUL_22, []);
      x_288 := mkconstr(nilUL_22, []);
      x_289 := mkconstr(ex1LL_30, [x_287, x_288]);
      x_286 := x_289;
    }
    consUL_23(hd_290, tl_291) => {
      match[L](tl_291){
        nilUL_22() => {
          x_293 := mkconstr(nilUL_22, []);
          x_294 := mkconstr(consUL_23, [hd_290, x_293]);
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(ex1LL_30, [x_294, x_295]);
          x_292 := x_296;
        }
        consUL_23(hd_297, tl_298) => {
          x_300 := splitL_284(tl_298);
          match[L](x_300){
            ex1LL_30(m_301, n_302) => {
              x_303 := mkconstr(consUL_23, [hd_290, m_301]);
              x_304 := mkconstr(consUL_23, [hd_297, n_302]);
              x_305 := mkconstr(ex1LL_30, [x_303, x_304]);
              x_299 := x_305;
            }
          }
          x_292 := x_299;
        }
      }
      x_286 := x_292;
    }
  }
  return x_286;
}

add_zero_306 := {
  x_308 := mkconstr(zero_6, []);
  x_307 := add_116(x_308);
  return x_307;
};

test_309 := {
  x_311 := mkconstr(zero_6, []);
  x_312 := mkconstr(zero_6, []);
  x_310 := add_116(x_311, x_312);
  return x_310;
};

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_231 := push("", c_230);
  return x_231;
}

fn strlen_232(s_233%U) {
  x_234 := size(s_233);
  return x_234;
}

fn string_of_int_235(i_236%U) {
  x_238 :=
    fn aux_239(i_240%U) {
      x_242 := lte(10, i_240);
      match(x_242){
        true_4() => {
          x_244 := mul(i_240, 10);
          r_243 := x_244;
          x_246 := mul(i_240, 10);
          i_245 := x_246;
          x_248 := aux_239(i_245);
          x_251 := ord_223(0);
          x_250 := add(r_243, x_251);
          x_249 := chr_226(x_250);
          x_247 := push(x_248, x_249);
          x_241 := x_247;
        }
        false_5() => {
          x_255 := ord_223(0);
          x_254 := add(i_240, x_255);
          x_253 := chr_226(x_254);
          x_252 := str_229(x_253);
          x_241 := x_252;
        }
      }
      return x_241;
    };
  aux_237 := x_238;
  x_257 := lt(0, i_236);
  match(x_257){
    true_4() => {
      x_258 := aux_237(i_236);
      x_256 := x_258;
    }
    false_5() => {
      x_261 := neg(i_236);
      x_260 := aux_237(x_261);
      x_259 := cat("~", x_260);
      x_256 := x_259;
    }
  }
  return x_256;
}

fn splitU_262(__263%U) {
  match[U](__263){
    nilUU_24() => {
      x_265 := mkconstr(nilUU_24, []);
      x_266 := mkconstr(nilUU_24, []);
      x_267 := mkconstr(ex1UU_33, [x_265, x_266]);
      x_264 := x_267;
    }
    consUU_25(hd_268, tl_269) => {
      match[U](tl_269){
        nilUU_24() => {
          x_271 := mkconstr(nilUU_24, []);
          x_272 := mkconstr(consUU_25, [hd_268, x_271]);
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(ex1UU_33, [x_272, x_273]);
          x_270 := x_274;
        }
        consUU_25(hd_275, tl_276) => {
          x_278 := splitU_262(tl_276);
          match[L](x_278){
            ex1UU_33(m_279, n_280) => {
              x_281 := reconstr(x_278, consUU_25, [hd_268, m_279]);
              x_282 := mkconstr(consUU_25, [hd_275, n_280]);
              x_283 := mkconstr(ex1UU_33, [x_281, x_282]);
              x_277 := x_283;
            }
          }
          x_270 := x_277;
        }
      }
      x_264 := x_270;
    }
  }
  return x_264;
}

fn splitL_284(__285%U) {
  match[L](__285){
    nilUL_22() => {
      x_287 := reconstr(__285, nilUL_22, []);
      x_288 := mkconstr(nilUL_22, []);
      x_289 := mkconstr(ex1LL_30, [x_287, x_288]);
      x_286 := x_289;
    }
    consUL_23(hd_290, tl_291) => {
      match[L](tl_291){
        nilUL_22() => {
          x_293 := reconstr(tl_291, nilUL_22, []);
          x_294 := reconstr(__285, consUL_23, [hd_290, x_293]);
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(ex1LL_30, [x_294, x_295]);
          x_292 := x_296;
        }
        consUL_23(hd_297, tl_298) => {
          x_300 := splitL_284(tl_298);
          match[L](x_300){
            ex1LL_30(m_301, n_302) => {
              x_303 := reconstr(x_300, consUL_23, [hd_290, m_301]);
              x_304 := reconstr(tl_291, consUL_23, [hd_297, n_302]);
              x_305 := reconstr(__285, ex1LL_30, [x_303, x_304]);
              x_299 := x_305;
            }
          }
          x_292 := x_299;
        }
      }
      x_286 := x_292;
    }
  }
  return x_286;
}

add_zero_306 := {
  x_308 := mkconstr(zero_6, []);
  x_307 := add_116(x_308);
  return x_307;
};

test_309 := {
  x_311 := mkconstr(zero_6, []);
  x_312 := mkconstr(zero_6, []);
  x_310 := add_116(x_311, x_312);
  return x_310;
};

-----------------------------------------

fn fn0_idU_313(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_314(env) {
  A_2 := env[1]
  m_3 := env[2]
  x_315 := fn0_idU_313(A_2, m_3);
  return x_315;
}

fn fn0_idL_316(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_317(env) {
  A_5 := env[1]
  m_6 := env[2]
  x_318 := fn0_idL_316(A_5, m_6);
  return x_318;
}

fn fn0_rwlUU_319(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_320(env) {
  A_8 := env[1]
  m_9 := env[2]
  n_10 := env[3]
  B_11 := env[4]
  __12 := env[5]
  __13 := env[6]
  x_321 := fn0_rwlUU_319(A_8, m_9, n_10, B_11, __12, __13);
  return x_321;
}

fn fn0_rwlUL_322(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_323(env) {
  A_15 := env[1]
  m_16 := env[2]
  n_17 := env[3]
  B_18 := env[4]
  __19 := env[5]
  __20 := env[6]
  x_324 := fn0_rwlUL_322(A_15, m_16, n_17, B_18, __19, __20);
  return x_324;
}

fn fn0_rwlLU_325(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_326(env) {
  A_22 := env[1]
  m_23 := env[2]
  n_24 := env[3]
  B_25 := env[4]
  __26 := env[5]
  __27 := env[6]
  x_327 := fn0_rwlLU_325(A_22, m_23, n_24, B_25, __26, __27);
  return x_327;
}

fn fn0_rwlLL_328(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_329(env) {
  A_29 := env[1]
  m_30 := env[2]
  n_31 := env[3]
  B_32 := env[4]
  __33 := env[5]
  __34 := env[6]
  x_330 := fn0_rwlLL_328(A_29, m_30, n_31, B_32, __33, __34);
  return x_330;
}

fn fn0_rwrUU_331(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_332(env) {
  A_36 := env[1]
  m_37 := env[2]
  n_38 := env[3]
  B_39 := env[4]
  __40 := env[5]
  __41 := env[6]
  x_333 := fn0_rwrUU_331(A_36, m_37, n_38, B_39, __40, __41);
  return x_333;
}

fn fn0_rwrUL_334(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_335(env) {
  A_43 := env[1]
  m_44 := env[2]
  n_45 := env[3]
  B_46 := env[4]
  __47 := env[5]
  __48 := env[6]
  x_336 := fn0_rwrUL_334(A_43, m_44, n_45, B_46, __47, __48);
  return x_336;
}

fn fn0_rwrLU_337(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_338(env) {
  A_50 := env[1]
  m_51 := env[2]
  n_52 := env[3]
  B_53 := env[4]
  __54 := env[5]
  __55 := env[6]
  x_339 := fn0_rwrLU_337(A_50, m_51, n_52, B_53, __54, __55);
  return x_339;
}

fn fn0_rwrLL_340(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_341(env) {
  A_57 := env[1]
  m_58 := env[2]
  n_59 := env[3]
  B_60 := env[4]
  __61 := env[5]
  __62 := env[6]
  x_342 := fn0_rwrLL_340(A_57, m_58, n_59, B_60, __61, __62);
  return x_342;
}

fn fn0_sing_elimUU_343(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_344(env) {
  A_64 := env[1]
  x_65 := env[2]
  __66 := env[3]
  x_345 := fn0_sing_elimUU_343(A_64, x_65, __66);
  return x_345;
}

fn fn0_sing_elimUL_346(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_347(env) {
  A_68 := env[1]
  x_69 := env[2]
  __70 := env[3]
  x_348 := fn0_sing_elimUL_346(A_68, x_69, __70);
  return x_348;
}

fn fn0_sing_elimLU_349(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_350(env) {
  A_72 := env[1]
  x_73 := env[2]
  __74 := env[3]
  x_351 := fn0_sing_elimLU_349(A_72, x_73, __74);
  return x_351;
}

fn fn0_sing_elimLL_352(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_353(env) {
  A_76 := env[1]
  x_77 := env[2]
  __78 := env[3]
  x_354 := fn0_sing_elimLL_352(A_76, x_77, __78);
  return x_354;
}

fn fn0_not_355(__80) {
  switch(__80){ true_4 => {
                  x_81 := false_5;
                }
                false_5 => {
                  x_81 := true_4;
                }
  }
  return x_81;
}

fn fn1_not_356(env) {
  __80 := env[1]
  x_357 := fn0_not_355(__80);
  return x_357;
}

fn fn0_and_358(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn fn1_and_359(env) {
  __83 := env[1]
  __84 := env[2]
  x_360 := fn0_and_358(__83, __84);
  return x_360;
}

fn fn0_or_361(__88, __89) {
  switch(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn fn1_or_362(env) {
  __88 := env[1]
  __89 := env[2]
  x_363 := fn0_or_361(__88, __89);
  return x_363;
}

fn fn0_xor_364(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn fn1_xor_365(env) {
  __93 := env[1]
  __94 := env[2]
  x_366 := fn0_xor_364(__93, __94);
  return x_366;
}

fn fn0_lte_367(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      x_101 := true_4;
    }
    succ_7 => {
      getbox(n_102, ctagof(__99), 0)
      switch(ctagof(__100)){
        zero_6 => {
          x_103 := false_5;
        }
        succ_7 => {
          getbox(n_104, ctagof(__100), 0)
          x_105 := fn0_lte_367(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn fn1_lte_368(env) {
  __99 := env[1]
  __100 := env[2]
  x_369 := fn0_lte_367(__99, __100);
  return x_369;
}

fn fn0_lt_370(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0)
  x_109 := fn0_lte_367(x_110, y_108);
  return x_109;
}

fn fn1_lt_371(env) {
  x_107 := env[1]
  y_108 := env[2]
  x_372 := fn0_lt_370(x_107, y_108);
  return x_372;
}

fn fn0_pred_373(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      x_113 := x_114;
    }
    succ_7 => {
      getbox(n_115, ctagof(__112), 0)
      x_113 := n_115;
    }
  }
  return x_113;
}

fn fn1_pred_374(env) {
  __112 := env[1]
  x_375 := fn0_pred_373(__112);
  return x_375;
}

fn fn0_add_376(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      x_119 := __118;
    }
    succ_7 => {
      getbox(n_120, ctagof(__117), 0)
      x_121 := fn0_add_376(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0)
      x_119 := x_122;
    }
  }
  return x_119;
}

fn fn1_add_377(env) {
  __117 := env[1]
  __118 := env[2]
  x_378 := fn0_add_376(__117, __118);
  return x_378;
}

fn fn0_sub_379(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      x_126 := __124;
    }
    succ_7 => {
      getbox(n_127, ctagof(__125), 0)
      x_129 := fn0_pred_373(__124);
      x_128 := fn0_sub_379(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn fn1_sub_380(env) {
  __124 := env[1]
  __125 := env[2]
  x_381 := fn0_sub_379(__124, __125);
  return x_381;
}

fn fn0_mul_382(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      x_133 := x_134;
    }
    succ_7 => {
      getbox(n_135, ctagof(__131), 0)
      x_137 := fn0_mul_382(n_135, __132);
      x_136 := fn0_add_376(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn fn1_mul_383(env) {
  __131 := env[1]
  __132 := env[2]
  x_384 := fn0_mul_382(__131, __132);
  return x_384;
}

fn fn0_div_385(x_139, y_140) {
  x_142 := fn0_lt_370(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      x_141 := x_143;
    }
    false_5 => {
      mkclo(x_145, fn1_loop_387, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      loop_144 := x_145;
      appc(x_391, loop_144, x_139);
      appc(x_392, x_391, y_140);
      x_156 := x_392;
      x_141 := x_156;
    }
  }
  return x_141;
}

fn fn1_div_386(env) {
  x_139 := env[1]
  y_140 := env[2]
  x_394 := fn0_div_385(x_139, y_140);
  return x_394;
}

fn fn0_rem_395(x_158, y_159) {
  x_162 := fn0_div_385(x_158, y_159);
  x_161 := fn0_mul_382(x_162, y_159);
  x_160 := fn0_sub_379(x_158, x_161);
  return x_160;
}

fn fn1_rem_396(env) {
  x_158 := env[1]
  y_159 := env[2]
  x_397 := fn0_rem_395(x_158, y_159);
  return x_397;
}

fn fn0_free_listUU_398(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      x_167 := tt_3;
    }
    consUU_25 => {
      getbox(hd_168, ctagof(__166), 0)
      getbox(tl_169, ctagof(__166), 1)
      appc(x_400, f_165, hd_168);
      x_171 := x_400;
      __170 := x_171;
      x_172 := fn0_free_listUU_398(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn fn1_free_listUU_399(env) {
  A_164 := env[1]
  f_165 := env[2]
  __166 := env[3]
  x_402 := fn0_free_listUU_398(A_164, f_165, __166);
  return x_402;
}

fn fn0_free_listUL_403(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23 => {
      getbox(hd_178, ctagof(__176), 0)
      getbox(tl_179, ctagof(__176), 1)
      appc(x_405, f_175, hd_178);
      x_181 := x_405;
      __180 := x_181;
      x_182 := fn0_free_listUL_403(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn fn1_free_listUL_404(env) {
  A_174 := env[1]
  f_175 := env[2]
  __176 := env[3]
  x_407 := fn0_free_listUL_403(A_174, f_175, __176);
  return x_407;
}

fn fn0_free_listLL_408(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19 => {
      getbox(hd_188, ctagof(__186), 0)
      getbox(tl_189, ctagof(__186), 1)
      appc(x_410, f_185, hd_188);
      x_191 := x_410;
      __190 := x_191;
      x_192 := fn0_free_listLL_408(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn fn1_free_listLL_409(env) {
  A_184 := env[1]
  f_185 := env[2]
  __186 := env[3]
  x_412 := fn0_free_listLL_408(A_184, f_185, __186);
  return x_412;
}

fn fn0_pow_413(x_194, y_195) {
  mkclo(x_197, fn1_loop_415, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  loop_196 := x_197;
  appc(x_419, loop_196, 1);
  appc(x_420, x_419, y_195);
  x_206 := x_420;
  return x_206;
}

fn fn1_pow_414(env) {
  x_194 := env[1]
  y_195 := env[2]
  x_422 := fn0_pow_413(x_194, y_195);
  return x_422;
}

fn fn0_powm_423(x_208, y_209, m_210) {
  mkclo(x_212, fn1_loop_425, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  loop_211 := x_212;
  appc(x_429, loop_211, 1);
  appc(x_430, x_429, y_209);
  x_222 := x_430;
  return x_222;
}

fn fn1_powm_424(env) {
  x_208 := env[1]
  y_209 := env[2]
  m_210 := env[3]
  x_432 := fn0_powm_423(x_208, y_209, m_210);
  return x_432;
}

fn fn0_ord_433(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_434(env) {
  c_224 := env[1]
  x_435 := fn0_ord_433(c_224);
  return x_435;
}

fn fn0_chr_436(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_437(env) {
  i_227 := env[1]
  x_438 := fn0_chr_436(i_227);
  return x_438;
}

fn fn0_str_439(c_230) {
  push(x_231, "", c_230);
  return x_231;
}

fn fn1_str_440(env) {
  c_230 := env[1]
  x_441 := fn0_str_439(c_230);
  return x_441;
}

fn fn0_strlen_442(s_233) {
  size(x_234, s_233);
  return x_234;
}

fn fn1_strlen_443(env) {
  s_233 := env[1]
  x_444 := fn0_strlen_442(s_233);
  return x_444;
}

fn fn0_string_of_int_445(i_236) {
  mkclo(x_238, fn1_aux_447, fvc:=3, argc:=1);
  setclo(x_238, ord_223, 1);
  setclo(x_238, chr_226, 2);
  setclo(x_238, str_229, 3);
  aux_237 := x_238;
  lte(x_257, 0, i_236);
  switch(x_257){
    true_4 => {
      appc(x_450, aux_237, i_236);
      x_258 := x_450;
      x_256 := x_258;
    }
    false_5 => {
      neg(x_261, i_236);
      appc(x_452, aux_237, x_261);
      x_260 := x_452;
      cat(x_259, "~", x_260);
      x_256 := x_259;
    }
  }
  return x_256;
}

fn fn1_string_of_int_446(env) {
  i_236 := env[1]
  x_454 := fn0_string_of_int_445(i_236);
  return x_454;
}

fn fn0_splitU_455(__263) {
  switch(ctagof(__263)){
    nilUU_24 => {
      mkbox(x_265, nilUU_24, 0);
      mkbox(x_266, nilUU_24, 0);
      mkbox(x_267, ex1UU_33, 2);
      setbox(x_267, x_265, 0)
      setbox(x_267, x_266, 1)
      x_264 := x_267;
    }
    consUU_25 => {
      getbox(hd_268, ctagof(__263), 0)
      getbox(tl_269, ctagof(__263), 1)
      switch(ctagof(tl_269)){
        nilUU_24 => {
          mkbox(x_271, nilUU_24, 0);
          mkbox(x_272, consUU_25, 2);
          setbox(x_272, hd_268, 0)
          setbox(x_272, x_271, 1)
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, ex1UU_33, 2);
          setbox(x_274, x_272, 0)
          setbox(x_274, x_273, 1)
          x_270 := x_274;
        }
        consUU_25 => {
          getbox(hd_275, ctagof(tl_269), 0)
          getbox(tl_276, ctagof(tl_269), 1)
          x_278 := fn0_splitU_455(tl_276);
          switch(ctagof(x_278)){
            ex1UU_33 => {
              getbox(m_279, ctagof(x_278), 0)
              getbox(n_280, ctagof(x_278), 1)
              rebox(x_281, x_278, consUU_25);
              setbox(x_281, hd_268, 0)
              setbox(x_281, m_279, 1)
              mkbox(x_282, consUU_25, 2);
              setbox(x_282, hd_275, 0)
              setbox(x_282, n_280, 1)
              mkbox(x_283, ex1UU_33, 2);
              setbox(x_283, x_281, 0)
              setbox(x_283, x_282, 1)
              x_277 := x_283;
            }
          }
          x_270 := x_277;
        }
      }
      x_264 := x_270;
    }
  }
  return x_264;
}

fn fn1_splitU_456(env) {
  __263 := env[1]
  x_457 := fn0_splitU_455(__263);
  return x_457;
}

fn fn0_splitL_458(__285) {
  switch(ctagof(__285)){
    nilUL_22 => {
      rebox(x_287, __285, nilUL_22);
      mkbox(x_288, nilUL_22, 0);
      mkbox(x_289, ex1LL_30, 2);
      setbox(x_289, x_287, 0)
      setbox(x_289, x_288, 1)
      x_286 := x_289;
    }
    consUL_23 => {
      getbox(hd_290, ctagof(__285), 0)
      getbox(tl_291, ctagof(__285), 1)
      switch(ctagof(tl_291)){
        nilUL_22 => {
          rebox(x_293, tl_291, nilUL_22);
          rebox(x_294, __285, consUL_23);
          setbox(x_294, hd_290, 0)
          setbox(x_294, x_293, 1)
          mkbox(x_295, nilUL_22, 0);
          mkbox(x_296, ex1LL_30, 2);
          setbox(x_296, x_294, 0)
          setbox(x_296, x_295, 1)
          x_292 := x_296;
        }
        consUL_23 => {
          getbox(hd_297, ctagof(tl_291), 0)
          getbox(tl_298, ctagof(tl_291), 1)
          x_300 := fn0_splitL_458(tl_298);
          switch(ctagof(x_300)){
            ex1LL_30 => {
              getbox(m_301, ctagof(x_300), 0)
              getbox(n_302, ctagof(x_300), 1)
              rebox(x_303, x_300, consUL_23);
              setbox(x_303, hd_290, 0)
              setbox(x_303, m_301, 1)
              rebox(x_304, tl_291, consUL_23);
              setbox(x_304, hd_297, 0)
              setbox(x_304, n_302, 1)
              rebox(x_305, __285, ex1LL_30);
              setbox(x_305, x_303, 0)
              setbox(x_305, x_304, 1)
              x_299 := x_305;
            }
          }
          x_292 := x_299;
        }
      }
      x_286 := x_292;
    }
  }
  return x_286;
}

fn fn1_splitL_459(env) {
  __285 := env[1]
  x_460 := fn0_splitL_458(__285);
  return x_460;
}

fn fn1_aux_447(env) {
  aux_239 := env[0]
  ord_223 := env[1]
  chr_226 := env[2]
  str_229 := env[3]
  i_240 := env[4]
  lte(x_242, 10, i_240);
  switch(x_242){
    true_4 => {
      mul(x_244, i_240, 10);
      r_243 := x_244;
      mul(x_246, i_240, 10);
      i_245 := x_246;
      appc(x_448, aux_239, i_245);
      x_248 := x_448;
      x_251 := fn0_ord_433(0);
      add(x_250, r_243, x_251);
      x_249 := fn0_chr_436(x_250);
      push(x_247, x_248, x_249);
      x_241 := x_247;
    }
    false_5 => {
      x_255 := fn0_ord_433(0);
      add(x_254, i_240, x_255);
      x_253 := fn0_chr_436(x_254);
      x_252 := fn0_str_439(x_253);
      x_241 := x_252;
    }
  }
  return x_241;
}

fn fn1_loop_425(env) {
  loop_213 := env[0]
  x_208 := env[1]
  m_210 := env[2]
  acc_214 := env[3]
  y_215 := env[4]
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      x_216 := acc_214;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mul(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_426, loop_213, x_219);
      appc(x_427, x_426, x_221);
      x_218 := x_427;
      x_216 := x_218;
    }
  }
  return x_216;
}

fn fn1_loop_415(env) {
  loop_198 := env[0]
  x_194 := env[1]
  acc_199 := env[2]
  y_200 := env[3]
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      x_201 := acc_199;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_416, loop_198, x_204);
      appc(x_417, x_416, x_205);
      x_203 := x_417;
      x_201 := x_203;
    }
  }
  return x_201;
}

fn fn1_loop_387(env) {
  loop_146 := env[0]
  pred_111 := env[1]
  sub_123 := env[2]
  x_147 := env[3]
  y_148 := env[4]
  x_151 := fn0_pred_373(y_148);
  x_150 := fn0_sub_379(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      x_149 := x_152;
    }
    succ_7 => {
      getbox(n_153, ctagof(x_150), 0)
      appc(x_388, loop_146, n_153);
      appc(x_389, x_388, y_148);
      x_154 := x_389;
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0)
      x_149 := x_155;
    }
  }
  return x_149;
}

main {
  mkclo(idU_1, fn1_idU_314, fvc:=0, argc:=2);
  mkclo(idL_4, fn1_idL_317, fvc:=0, argc:=2);
  mkclo(rwlUU_7, fn1_rwlUU_320, fvc:=0, argc:=6);
  mkclo(rwlUL_14, fn1_rwlUL_323, fvc:=0, argc:=6);
  mkclo(rwlLU_21, fn1_rwlLU_326, fvc:=0, argc:=6);
  mkclo(rwlLL_28, fn1_rwlLL_329, fvc:=0, argc:=6);
  mkclo(rwrUU_35, fn1_rwrUU_332, fvc:=0, argc:=6);
  mkclo(rwrUL_42, fn1_rwrUL_335, fvc:=0, argc:=6);
  mkclo(rwrLU_49, fn1_rwrLU_338, fvc:=0, argc:=6);
  mkclo(rwrLL_56, fn1_rwrLL_341, fvc:=0, argc:=6);
  mkclo(sing_elimUU_63, fn1_sing_elimUU_344, fvc:=0, argc:=3);
  mkclo(sing_elimUL_67, fn1_sing_elimUL_347, fvc:=0, argc:=3);
  mkclo(sing_elimLU_71, fn1_sing_elimLU_350, fvc:=0, argc:=3);
  mkclo(sing_elimLL_75, fn1_sing_elimLL_353, fvc:=0, argc:=3);
  mkclo(not_79, fn1_not_356, fvc:=0, argc:=1);
  mkclo(and_82, fn1_and_359, fvc:=0, argc:=2);
  mkclo(or_87, fn1_or_362, fvc:=0, argc:=2);
  mkclo(xor_92, fn1_xor_365, fvc:=0, argc:=2);
  mkclo(lte_98, fn1_lte_368, fvc:=0, argc:=2);
  mkclo(lt_106, fn1_lt_371, fvc:=0, argc:=2);
  mkclo(pred_111, fn1_pred_374, fvc:=0, argc:=1);
  mkclo(add_116, fn1_add_377, fvc:=0, argc:=2);
  mkclo(sub_123, fn1_sub_380, fvc:=0, argc:=2);
  mkclo(mul_130, fn1_mul_383, fvc:=0, argc:=2);
  mkclo(div_138, fn1_div_386, fvc:=0, argc:=2);
  mkclo(rem_157, fn1_rem_396, fvc:=0, argc:=2);
  mkclo(free_listUU_163, fn1_free_listUU_399, fvc:=0, argc:=3);
  mkclo(free_listUL_173, fn1_free_listUL_404, fvc:=0, argc:=3);
  mkclo(free_listLL_183, fn1_free_listLL_409, fvc:=0, argc:=3);
  mkclo(pow_193, fn1_pow_414, fvc:=0, argc:=2);
  mkclo(powm_207, fn1_powm_424, fvc:=0, argc:=3);
  mkclo(ord_223, fn1_ord_434, fvc:=0, argc:=1);
  mkclo(chr_226, fn1_chr_437, fvc:=0, argc:=1);
  mkclo(str_229, fn1_str_440, fvc:=0, argc:=1);
  mkclo(strlen_232, fn1_strlen_443, fvc:=0, argc:=1);
  mkclo(string_of_int_235, fn1_string_of_int_446, fvc:=0, argc:=1);
  mkclo(splitU_262, fn1_splitU_456, fvc:=0, argc:=1);
  mkclo(splitL_284, fn1_splitL_459, fvc:=0, argc:=1);
  mkbox(x_308, zero_6, 0);
  appc(x_461, add_116, x_308);
  x_307 := x_461;
  add_zero_306 := x_307;
  mkbox(x_311, zero_6, 0);
  mkbox(x_312, zero_6, 0);
  x_310 := fn0_add_376(x_311, x_312);
  test_309 := x_310;
  return NULL;
}

-----------------------------------------

