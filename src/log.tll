[Inductive {name = "unit"; relv = R;
   body =
   (Binder ([],
      (PBase
         ((TBase (Type U)), [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
      ));
   view = []};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("true", (TBase (Id ("bool", I))), []));
             (DConstr ("false", (TBase (Id ("bool", I))), []))]))
       ));
    view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("pred", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id ("A", I)),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id ("A", I)),
                          (Binder ("_", (TBase (Type U)))))),
                       [(DConstr ("refl",
                           (TBase
                              (App
                                 [(Id ("eq", I)); (Id ("m", I));
                                   (Id ("m", I))])),
                           []))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DConstr ("ex",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (N,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("pf",
                                       (TBase
                                          (App
                                             [(Id ("exists", I));
                                               (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "prod"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Type (SId "r")),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DConstr ("pair",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R, (Id ("B", I)),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("prod", I));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [E; E]};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("A", I)),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DConstr ("just",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("m",
                           (TBase (App [(Id ("sing", I)); (Id ("m", I))]))))
                        )),
                     [E]))
                   ]))
             ))
          ))
       ));
    view = [I]};
  Inductive {name = "list"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type U)),
                 [(DConstr ("nil",
                     (TBase (App [(Id ("list", I)); (Id ("A", I))])), 
                     []));
                   (DConstr ("cons",
                      (TBind (R, (Id ("A", I)),
                         (Binder ("hd",
                            (TBind (R,
                               (App [(Id ("list", I)); (Id ("A", I))]),
                               (Binder ("tl",
                                  (TBase
                                     (App [(Id ("list", I)); (Id ("A", I))]))
                                  ))
                               ))
                            ))
                         )),
                      [E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Inductive {name = "vec"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("nat", I)),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DConstr ("vnil",
                     (TBase
                        (App
                           [(Id ("vec", I)); (Id ("A", I)); (Id ("zero", I))])),
                     []));
                   (DConstr ("vcons",
                      (TBind (N, (Id ("nat", I)),
                         (Binder ("n",
                            (TBind (R, (Id ("A", I)),
                               (Binder ("hd",
                                  (TBind (R,
                                     (App
                                        [(Id ("vec", I)); (Id ("A", I));
                                          (Id ("n", I))]),
                                     (Binder ("tl",
                                        (TBase
                                           (App
                                              [(Id ("vec", I));
                                                (Id ("A", I));
                                                (App
                                                   [(Id ("succ", I));
                                                     (Id ("n", I))])
                                                ]))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         )),
                      [I; E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Definition {name = "uncons"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("_", (Id ("A", I))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "uncons"),
              [([(PId "A"); (PId "zero");
                  (PConstr ("vcons", [(PId "n"); (PId "hd"); (PId "_")]))],
                (Some (Match ([(N, (Id ("n", I)), None)], None,
                         [([(PId "zero")], (Some (Id ("hd", I))));
                           ([(PConstr ("succ", [(PId "_")]))],
                            (Some (Id ("hd", I))))
                           ]
                         ))));
                ([(PId "A"); (PId "_");
                   (PConstr ("vcons", [(PId "_"); (PId "hd"); (PId "_")]))],
                 (Some (Id ("hd", I))))
                ]
              )),
           [I])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("_", (Id ("A", I))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I]};
  Definition {name = "uncons2"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (Type U),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Id ("vec", I)); (Id ("A", I));
                               (App [(Id ("succ", I)); (Id ("n", I))])]),
                          (Binder ("_",
                             (Pi (R, U,
                                (App
                                   [(Id ("vec", I)); (Id ("A", I));
                                     (App [(Id ("succ", I)); (Id ("n", I))])]),
                                (Binder ("_",
                                   (App
                                      [(Inst ("prod",
                                          [(SId "_"); (SId "_"); L], I));
                                        (Id ("A", I)); (Id ("A", I))])
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "uncons2"),
              [([(PId "A"); (PId "n");
                  (PConstr ("vcons", [(PId "_"); (PId "hd1"); (PId "_")]));
                  (PConstr ("vcons", [(PId "_"); (PId "hd2"); (PId "_")]))],
                (Some (App
                         [(Id ("pair", I)); (Id ("hd1", I)); (Id ("hd2", I))])))
                ]
              )),
           [I; I])),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Id ("vec", I)); (Id ("A", I));
                            (App [(Id ("succ", I)); (Id ("n", I))])]),
                       (Binder ("_",
                          (Pi (R, U,
                             (App
                                [(Id ("vec", I)); (Id ("A", I));
                                  (App [(Id ("succ", I)); (Id ("n", I))])]),
                             (Binder ("_",
                                (App
                                   [(Inst ("prod", [(SId "_"); (SId "_"); L],
                                       I));
                                     (Id ("A", I)); (Id ("A", I))])
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]}
  ]

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_93 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_94› (A_95 : Type‹s_94›) (m_96 : A_95): A_95 -> U
where
| refl_6 : (eq_4‹??_1› ?_1 m_96 m_96)

#[program]
inductive exists_5‹s_98,r_99,t_100› (A_101 : Type‹s_98›) (B_102 : 
A_101 -> Type‹r_99›): Type‹t_100› where
| ex_7
    (m_104 : A_101) {pf_105 : ((B_102) m_104)}
    : (exists_5‹??_2,??_3,??_4› ?_2 B_102)

#[program]
inductive prod_6‹s_106,r_107,t_108› (A_109 : Type‹s_106›) (B_110 : Type‹r_107›):
  Type‹t_108›
where
| pair_8
    (m_111 : A_109) (n_112 : B_110)
    : (prod_6‹??_5,??_6,??_7› A_109 B_110)

#[program]
inductive sing_7‹s_113› (A_114 : Type‹s_113›):
  A_114 -> Type‹s_113›
where
| just_9 (m_116 : A_114) : (sing_7‹??_8› ?_3 m_116)

#[program]
inductive list_8‹s_117› (A_118 : Type‹s_117›): U where
| nil_10 : (list_8‹??_9› A_118)
| cons_11
    (hd_119 : A_118) (tl_120 : (list_8‹??_10› A_118))
    : (list_8‹??_11› A_118)

#[program]
inductive vec_9‹s_121› (A_122 : Type‹s_121›):
  nat_3 -> Type‹s_121›
where
| vnil_12 : (vec_9‹??_12› A_122 zero_4)
| vcons_13
    {n_124 : nat_3} (hd_125 : A_122)
    (tl_126 : (vec_9‹??_13› A_122 n_124))
    : (vec_9‹??_14› A_122 (succ_5‹› n_124))

#[program]
def uncons_1‹› :
  ∀ {A_127 : U} ->
    ∀ {n_128 : nat_3} ->
      (vec_9‹??_16› A_127 (succ_5‹› n_128)) -> A_127
:=
  function uncons_130 :
    ∀ {A_131 : U} ->
      ∀ {n_132 : nat_3} ->
        (vec_9‹??_15› A_131 (succ_5‹› n_132)) -> A_131
  | A_134 zero_4 (vcons_13 n_135 hd_136 _137) =>
    match n_135 in ∀ {_138 : ?_4} -o ?_5 with
    | zero_4 => hd_136
    | (succ_5 _139) => hd_136
  | A_140 _141 (vcons_13 _142 hd_143 _144) => hd_143

#[program]
def uncons2_2‹› :
  ∀ {A_145 : U} ->
    ∀ {n_146 : nat_3} ->
      (vec_9‹??_24› A_145 (succ_5‹› n_146)) ->
        (vec_9‹??_25› A_145 (succ_5‹› n_146)) ->
          (prod_6‹??_26,??_27,L› A_145 A_145)
:=
  function uncons2_149 :
    ∀ {A_150 : U} ->
      ∀ {n_151 : nat_3} ->
        (vec_9‹??_17› A_150 (succ_5‹› n_151)) ->
          (vec_9‹??_18› A_150 (succ_5‹› n_151)) ->
            (prod_6‹??_19,??_20,L› A_150 A_150)
  | A_154 n_155 (vcons_13 _156 hd1_157 _158) (vcons_13 _159 hd2_160 _161) =>
    (pair_8‹??_21,??_22,??_23› hd1_157 hd2_160)

-----------------------------------------

inductive-------------------------
infer_tm(unit_1)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(bool_2)
infer_tm(bool_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(nat_3)
infer_tm(nat_3)
infer_tm(nat_3)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_164›)
infer_tm(A_165)
infer_tm(A_165)
infer_tm(Type‹s_168›)
infer_tm(A_169)
assert_equal1( A_169, ?_1)
assert_equal1_extend( A_169, ?_1)
assert_equal1( m_170, m_170)
assert_equal1_ok( m_170, m_170)
infer_tm((eq_4‹??_1› ?_1 m_170 m_170))
check_tm( ?_1, Type‹??_1›)
check_tm( m_170, ?_1)
infer_tm(m_170)
assert_equal1( ?_1, A_169)
assert_equal1_extend( ?_1, A_169)
check_tm( m_170, ?_1)
infer_tm(m_170)
assert_equal1( ?_1, A_169)
assert_equal1_extend( ?_1, A_169)
simpl_tm ~expand:false( ?_1, A_169)
simpl_tm ~expand:false( A_169, A_169)
simpl_tm ~expand:false( A_169, A_169)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_171
    
  |}
  imeta_meta {|
    ?_1 <= A_174
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_168›)
check_tm( A_169, Type‹s_168›)
infer_tm(A_169)
assert_equal1( Type‹s_168›, Type‹s_168›)
assert_equal1_ok( Type‹s_168›, Type‹s_168›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_186›)
infer_tm(A_189 -> Type‹r_187›)
infer_tm(A_189)
infer_tm(Type‹r_187›)
infer_tm(Type‹s_193›)
infer_tm(A_196 -> Type‹r_194›)
infer_tm(A_196)
infer_tm(Type‹r_194›)
infer_tm(A_196)
infer_tm(((B_197) m_200))
infer_tm(B_197)
check_tm( m_200, A_196)
infer_tm(m_200)
assert_equal1( A_196, A_196)
assert_equal1_ok( A_196, A_196)
assert_equal1( A_196, ?_2)
assert_equal1_extend( A_196, ?_2)
assert_equal1( B_197, B_197)
assert_equal1_ok( B_197, B_197)
infer_tm((exists_5‹??_2,??_3,??_4› ?_2 B_197))
check_tm( ?_2, Type‹??_2›)
check_tm( B_197, ?_2 -> Type‹??_3›)
infer_tm(B_197)
assert_equal1( ?_2 -> Type‹??_3›, A_196 -> Type‹r_194›)
assert_equal1_extend( ?_2 -> Type‹??_3›, A_196 -> Type‹r_194›)
simpl_tm ~expand:false( ?_2 -> Type‹??_3›, A_196 -> Type‹r_194›)
simpl_tm ~expand:false( ?_2, A_196)
simpl_tm ~expand:false( Type‹??_3›, Type‹r_194›)
simpl_tm ~expand:false( A_196, A_196)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_213
    ??_2 <= s_216
    ??_3 <= r_218
    ??_4 <= t_220
    
  |}
  imeta_meta {|
    ?_1 <= A_225
    ?_2 <= A_232
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_193›)
check_tm( A_196, Type‹s_193›)
infer_tm(A_196)
assert_equal1( Type‹s_193›, Type‹s_193›)
assert_equal1_ok( Type‹s_193›, Type‹s_193›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_265›)
infer_tm(Type‹r_266›)
infer_tm(Type‹s_270›)
infer_tm(Type‹r_271›)
infer_tm(A_273)
infer_tm(B_274)
assert_equal1( A_273, A_273)
assert_equal1_ok( A_273, A_273)
assert_equal1( B_274, B_274)
assert_equal1_ok( B_274, B_274)
infer_tm((prod_6‹??_5,??_6,??_7› A_273 B_274))
check_tm( A_273, Type‹??_5›)
infer_tm(A_273)
assert_equal1( Type‹??_5›, Type‹s_270›)
assert_equal1_extend( Type‹??_5›, Type‹s_270›)
check_tm( B_274, Type‹??_6›)
infer_tm(B_274)
assert_equal1( Type‹??_6›, Type‹r_271›)
assert_equal1_extend( Type‹??_6›, Type‹r_271›)
simpl_tm ~expand:false( Type‹??_6›, Type‹r_271›)
simpl_tm ~expand:false( Type‹??_5›, Type‹s_270›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_277
    ??_2 <= s_280
    ??_3 <= r_282
    ??_4 <= t_284
    ??_5 <= s_289
    ??_6 <= r_291
    ??_7 <= t_293
    
  |}
  imeta_meta {|
    ?_1 <= A_298
    ?_2 <= A_305
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_331›)
infer_tm(A_332)
infer_tm(Type‹s_334›)
infer_tm(A_335)
assert_equal1( A_335, ?_3)
assert_equal1_extend( A_335, ?_3)
infer_tm((sing_7‹??_8› ?_3 m_336))
check_tm( ?_3, Type‹??_8›)
check_tm( m_336, ?_3)
infer_tm(m_336)
assert_equal1( ?_3, A_335)
assert_equal1_extend( ?_3, A_335)
simpl_tm ~expand:false( ?_3, A_335)
simpl_tm ~expand:false( A_335, A_335)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_337
    ??_2 <= s_340
    ??_3 <= r_342
    ??_4 <= t_344
    ??_5 <= s_349
    ??_6 <= r_351
    ??_7 <= t_353
    ??_8 <= s_356
    
  |}
  imeta_meta {|
    ?_1 <= A_359
    ?_2 <= A_366
    ?_3 <= A_369
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_334›)
check_tm( A_335, Type‹s_334›)
infer_tm(A_335)
assert_equal1( Type‹s_334›, Type‹s_334›)
assert_equal1_ok( Type‹s_334›, Type‹s_334›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_382›)
infer_tm(Type‹s_384›)
assert_equal1( A_385, A_385)
assert_equal1_ok( A_385, A_385)
infer_tm((list_8‹??_9› A_385))
check_tm( A_385, Type‹??_9›)
infer_tm(A_385)
assert_equal1( Type‹??_9›, Type‹s_384›)
assert_equal1_extend( Type‹??_9›, Type‹s_384›)
simpl_tm ~expand:false( Type‹??_9›, Type‹s_384›)
infer_tm(Type‹s_386›)
infer_tm(A_387)
infer_tm((list_8‹??_10› A_387))
check_tm( A_387, Type‹??_10›)
infer_tm(A_387)
assert_equal1( Type‹??_10›, Type‹s_386›)
assert_equal1_extend( Type‹??_10›, Type‹s_386›)
simpl_tm ~expand:false( Type‹??_10›, Type‹s_386›)
assert_equal1( A_387, A_387)
assert_equal1_ok( A_387, A_387)
infer_tm((list_8‹??_11› A_387))
check_tm( A_387, Type‹??_11›)
infer_tm(A_387)
assert_equal1( Type‹??_11›, Type‹s_386›)
assert_equal1_extend( Type‹??_11›, Type‹s_386›)
simpl_tm ~expand:false( Type‹??_11›, Type‹s_386›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_390
    ??_2 <= s_393
    ??_3 <= r_395
    ??_4 <= t_397
    ??_5 <= s_402
    ??_6 <= r_404
    ??_7 <= t_406
    ??_8 <= s_409
    ??_9 <= s_410
    ??_10 <= s_411
    ??_11 <= s_412
    
  |}
  imeta_meta {|
    ?_1 <= A_415
    ?_2 <= A_422
    ?_3 <= A_425
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_441›)
infer_tm(nat_3)
infer_tm(Type‹s_444›)
assert_equal1( A_445, A_445)
assert_equal1_ok( A_445, A_445)
infer_tm((vec_9‹??_12› A_445 zero_4))
check_tm( A_445, Type‹??_12›)
infer_tm(A_445)
assert_equal1( Type‹??_12›, Type‹s_444›)
assert_equal1_extend( Type‹??_12›, Type‹s_444›)
check_tm( zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_12›, Type‹s_444›)
infer_tm(Type‹s_446›)
infer_tm(nat_3)
infer_tm(A_447)
infer_tm((vec_9‹??_13› A_447 n_448))
check_tm( A_447, Type‹??_13›)
infer_tm(A_447)
assert_equal1( Type‹??_13›, Type‹s_446›)
assert_equal1_extend( Type‹??_13›, Type‹s_446›)
check_tm( n_448, nat_3)
infer_tm(n_448)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_13›, Type‹s_446›)
assert_equal1( A_447, A_447)
assert_equal1_ok( A_447, A_447)
infer_tm((vec_9‹??_14› A_447 (succ_5‹› n_448)))
check_tm( A_447, Type‹??_14›)
infer_tm(A_447)
assert_equal1( Type‹??_14›, Type‹s_446›)
assert_equal1_extend( Type‹??_14›, Type‹s_446›)
check_tm( (succ_5‹› n_448), nat_3)
infer_tm((succ_5‹› n_448))
check_tm( n_448, nat_3)
infer_tm(n_448)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_14›, Type‹s_446›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_451
    ??_2 <= s_454
    ??_3 <= r_456
    ??_4 <= t_458
    ??_5 <= s_463
    ??_6 <= r_465
    ??_7 <= t_467
    ??_8 <= s_470
    ??_9 <= s_471
    ??_10 <= s_472
    ??_11 <= s_473
    ??_12 <= s_474
    ??_13 <= s_475
    ??_14 <= s_476
    
  |}
  imeta_meta {|
    ?_1 <= A_479
    ?_2 <= A_486
    ?_3 <= A_489
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(∀ {A_514 : U} ->
           ∀ {n_515 : nat_3} ->
             (vec_9‹??_16› A_514 (succ_5‹› n_515)) -> A_514)
infer_tm(U)
infer_tm(∀ {n_518 : nat_3} ->
           (vec_9‹??_16› A_517 (succ_5‹› n_518)) -> A_517)
infer_tm(nat_3)
infer_tm((vec_9‹??_16› A_517 (succ_5‹› n_520)) -> A_517)
infer_tm((vec_9‹??_16› A_517 (succ_5‹› n_520)))
check_tm( A_517, Type‹??_16›)
infer_tm(A_517)
assert_equal1( Type‹??_16›, U)
assert_equal1_extend( Type‹??_16›, U)
check_tm( (succ_5‹› n_520), nat_3)
infer_tm((succ_5‹› n_520))
check_tm( n_520, nat_3)
infer_tm(n_520)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_16›, U)
infer_tm(A_517)
check_tm(
  function uncons_523 :
    ∀ {A_524 : U} ->
      ∀ {n_525 : nat_3} ->
        (vec_9‹??_15› A_524 (succ_5‹› n_525)) -> A_524
  | A_527 zero_4 (vcons_13 n_528 hd_529 _530) =>
    match n_528 in ∀ {_531 : ?_4} -o ?_5 with
    | zero_4 => hd_529
    | (succ_5 _532) => hd_529
  | A_533 _534 (vcons_13 _535 hd_536 _537) => hd_536,
  ∀ {A_538 : U} ->
    ∀ {n_539 : nat_3} ->
      (vec_9‹??_16› A_538 (succ_5‹› n_539)) -> A_538)
infer_tm(∀ {A_542 : U} ->
           ∀ {n_543 : nat_3} ->
             (vec_9‹??_15› A_542 (succ_5‹› n_543)) -> A_542)
infer_tm(U)
infer_tm(∀ {n_546 : nat_3} ->
           (vec_9‹??_15› A_545 (succ_5‹› n_546)) -> A_545)
infer_tm(nat_3)
infer_tm((vec_9‹??_15› A_545 (succ_5‹› n_548)) -> A_545)
infer_tm((vec_9‹??_15› A_545 (succ_5‹› n_548)))
check_tm( A_545, Type‹??_15›)
infer_tm(A_545)
assert_equal1( Type‹??_15›, U)
assert_equal1_extend( Type‹??_15›, U)
check_tm( (succ_5‹› n_548), nat_3)
infer_tm((succ_5‹› n_548))
check_tm( n_548, nat_3)
infer_tm(n_548)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_15›, U)
infer_tm(A_545)
assert_equal1(
  ∀ {A_551 : U} ->
    ∀ {n_552 : nat_3} ->
      (vec_9‹??_16› A_551 (succ_5‹› n_552)) -> A_551,
  ∀ {A_554 : U} ->
    ∀ {n_555 : nat_3} ->
      (vec_9‹??_15› A_554 (succ_5‹› n_555)) -> A_554)
assert_equal1_extend(
  ∀ {A_567 : U} ->
    ∀ {n_568 : nat_3} ->
      (vec_9‹??_16› A_567 (succ_5‹› n_568)) -> A_567,
  ∀ {A_570 : U} ->
    ∀ {n_571 : nat_3} ->
      (vec_9‹??_15› A_570 (succ_5‹› n_571)) -> A_570)
simpl_tm ~expand:false(
  ∀ {A_594 : U} ->
    ∀ {n_595 : nat_3} -> (vec_9‹U› A_594 (succ_5‹› n_595)) -> A_594,
  ∀ {A_597 : U} ->
    ∀ {n_598 : nat_3} -> (vec_9‹U› A_597 (succ_5‹› n_598)) -> A_597)
simpl_tm ~expand:false( U, U)
simpl_tm ~expand:false(
  ∀ {n_601 : nat_3} -> (vec_9‹U› A_600 (succ_5‹› n_601)) -> A_600,
  ∀ {n_603 : nat_3} -> (vec_9‹U› A_600 (succ_5‹› n_603)) -> A_600)
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false( (vec_9‹U› A_600 (succ_5‹› n_605)) -> A_600,
  (vec_9‹U› A_600 (succ_5‹› n_605)) -> A_600)
simpl_tm ~expand:false( (vec_9‹U› A_600 (succ_5‹› n_605)),
  (vec_9‹U› A_600 (succ_5‹› n_605)))
simpl_tm ~expand:false( A_600, A_600)
simpl_tm ~expand:false( (succ_5‹› n_605), (succ_5‹› n_605))
simpl_tm ~expand:false( n_605, n_605)
simpl_tm ~expand:false( A_600, A_600)
check_cls {|
  prblm {| ;
    {|  ::: [A_573, zero_4, (vcons_13 n_574 hd_575 _576)] =>?
         match #n_574 in ∀ {_615 : ?_4} -o ?_5 with
         | zero_4 => #hd_575
         | (succ_5 _616) => #hd_575
    |} {|  ::: [A_577, _578, (vcons_13 _579 hd_580 _581)] =>? #hd_580 |}
  |}
  a := ∀ {A_617 : U} ->
         ∀ {n_618 : nat_3} ->
           (vec_9‹U› A_617 (succ_5‹› n_618)) -> A_617
|}
case_intro
case_introed(A_620 : U)
case_intro
case_introed(n_621 : nat_3)
case_intro
case_introed(__622 : (vec_9‹U› #A_620 (succ_5‹› #n_621)))
case_splitting
splitting_on(zero_4)
case_splitting
splitting_on(vnil_12)
case_empty
unify_local(  )
unify_global(
  eq_term?( (vec_9‹U› #A_620 (succ_5‹› zero_4)),
    (vec_9‹U› #A_620 zero_4))
  eq_term?( nat_3, nat_3)
)
local_map solved
simpl_pprbm ~expand:false( (vec_9‹U› #A_620 (succ_5‹› zero_4)),
  (vec_9‹U› #A_620 zero_4))
simpl_pprbm ~expand:false( #A_620, #A_620)
simpl_pprbm ~expand:false( (succ_5‹› zero_4), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› zero_4), zero_4)
splitting_on(vcons_13)
case_coverage{|
  prblm {|
    eq_term?( (vec_9‹U› #A_620 (succ_5‹› zero_4)),
      (vec_9‹U› #A_620 (succ_5‹› #n_635)))
    eq_term?( nat_3, nat_3);
    {| eq_pat?( #A_620, A_573 : U)
       eq_pat?( #n_635, n_574 : nat_3)
       eq_pat?( #hd_636, hd_575 : #A_620)
       eq_pat?( #tl_637, _576 : (vec_9‹U› #A_620 #n_635)) ::: [] =>?
         match #n_574 in ∀ {_644 : ?_4} -o ?_5 with
         | zero_4 => #hd_575
         | (succ_5 _645) => #hd_575
    |}
    {| eq_pat?( #A_620, A_577 : U)
       eq_pat?( zero_4, _578 : nat_3)
       eq_pat?( #n_635, _579 : nat_3)
       eq_pat?( #hd_636, hd_580 : #A_620)
       eq_pat?( #tl_637, _581 : (vec_9‹U› #A_620 #n_635)) ::: [] =>?
         #hd_580
    |}
  |}
|}
unify_local(
  eq_pat?( #A_620, A_573 : U)
  eq_pat?( #n_635, n_574 : nat_3)
  eq_pat?( #hd_636, hd_575 : #A_620)
  eq_pat?( #tl_637, _576 : (vec_9‹U› #A_620 #n_635))
)
unify_global(
  eq_term?( (vec_9‹U› #A_620 (succ_5‹› zero_4)),
    (vec_9‹U› #A_620 (succ_5‹› #n_635)))
  eq_term?( nat_3, nat_3)
)
simpl_pprbm ~expand:false( #A_620, #A_573)
simpl_pprbm ~expand:false( #n_635, #n_574)
simpl_pprbm ~expand:false( #hd_636, #hd_575)
simpl_pprbm ~expand:false( #tl_637, #_576)
local_map solved
simpl_pprbm ~expand:false( (vec_9‹U› #A_620 (succ_5‹› zero_4)),
  (vec_9‹U› #A_620 (succ_5‹› #n_635)))
simpl_pprbm ~expand:false( #A_620, #A_620)
simpl_pprbm ~expand:false( (succ_5‹› zero_4), (succ_5‹› #n_635))
simpl_pprbm ~expand:false( zero_4, #n_635)
simpl_pprbm ~expand:false( nat_3, nat_3)
global_map solved
case_coverage_ok(
  match n_635 in ∀ {_654 : ?_4} -o ?_5 with
  | zero_4 => hd_636
  | (succ_5 _655) => hd_636, A_620)
check_tm(
  match n_635 in ∀ {_656 : ?_4} -o ?_5 with
  | zero_4 => hd_636
  | (succ_5 _657) => hd_636, A_620)
infer_tm(match n_635 in ∀ {_658 : ?_4} -o ?_5 with
         | zero_4 => hd_636
         | (succ_5 _659) => hd_636)
infer_motive(n_635 : ?_4)
infer_tm(?_4)
delay_assert(?_8, ??_28)
check_tm( n_635, ?_4)
infer_tm(n_635)
assert_equal1( ?_4, nat_3)
assert_equal1_extend( ?_4, nat_3)
infer_tm(?_5)
simpl_tm ~expand:false( ?_4, nat_3)
simpl_tm ~expand:false( ?_8, Type‹??_28›)
delay_assert(?_9, ??_29)
simpl_tm ~expand:false( ?_9, Type‹??_29›)
check_cls {|
  prblm {| ;
    {|  ::: [zero_4] =>? hd_636 |} {|  ::: [(succ_5 _660)] =>? hd_636 |}
  |}
  a := ∀ {_662 : nat_3} -o ?_5
|}
case_intro
case_introed(_663 : nat_3)
case_splitting
splitting_on(zero_4)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3); {|  ::: [] =>? hd_636 |} |}
|}
unify_local(  )
unify_global( eq_term?( nat_3, nat_3) )
local_map solved
simpl_pprbm ~expand:false( nat_3, nat_3)
global_map solved
case_coverage_ok( hd_636, ?_5)
check_tm( hd_636, ?_5)
infer_tm(hd_636)
assert_equal1( ?_5, A_620)
assert_equal1_extend( ?_5, A_620)
splitting_on(succ_5)
case_coverage{|
  prblm {| eq_term?( nat_3, nat_3);
    {| eq_pat?( #pred_676, _660 : nat_3) ::: [] =>? hd_636 |}
  |}
|}
unify_local( eq_pat?( #pred_676, _660 : nat_3) )
unify_global( eq_term?( nat_3, nat_3) )
simpl_pprbm ~expand:false( #pred_676, #_660)
local_map solved
simpl_pprbm ~expand:false( nat_3, nat_3)
global_map solved
case_coverage_ok( hd_636, ?_5)
check_tm( hd_636, ?_5)
infer_tm(hd_636)
assert_equal1( ?_5, A_620)
assert_equal1_extend( ?_5, A_620)
assert_equal1( A_620, ?_5)
assert_equal1_extend( A_620, ?_5)
splitting_on(succ_5)
case_splitting
splitting_on(vnil_12)
case_empty
unify_local(  )
unify_global(
  eq_term?( (vec_9‹U› #A_620 (succ_5‹› (succ_5‹› #pred_689))),
    (vec_9‹U› #A_620 zero_4))
  eq_term?( nat_3, nat_3)
)
local_map solved
simpl_pprbm ~expand:false(
  (vec_9‹U› #A_620 (succ_5‹› (succ_5‹› #pred_689))),
  (vec_9‹U› #A_620 zero_4))
simpl_pprbm ~expand:false( #A_620, #A_620)
simpl_pprbm ~expand:false( (succ_5‹› (succ_5‹› #pred_689)), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› (succ_5‹› #pred_689)), zero_4)
splitting_on(vcons_13)
case_coverage{|
  prblm {|
    eq_term?( (vec_9‹U› #A_620 (succ_5‹› (succ_5‹› #pred_689))),
      (vec_9‹U› #A_620 (succ_5‹› #n_702)))
    eq_term?( nat_3, nat_3);
    {| eq_pat?( #A_620, A_577 : U)
       eq_pat?( (succ_5‹› #pred_689), _578 : nat_3)
       eq_pat?( #n_702, _579 : nat_3)
       eq_pat?( #hd_703, hd_580 : #A_620)
       eq_pat?( #tl_704, _581 : (vec_9‹U› #A_620 #n_702)) ::: [] =>?
         #hd_580
    |}
  |}
|}
unify_local(
  eq_pat?( #A_620, A_577 : U)
  eq_pat?( (succ_5‹› #pred_689), _578 : nat_3)
  eq_pat?( #n_702, _579 : nat_3)
  eq_pat?( #hd_703, hd_580 : #A_620)
  eq_pat?( #tl_704, _581 : (vec_9‹U› #A_620 #n_702))
)
unify_global(
  eq_term?( (vec_9‹U› #A_620 (succ_5‹› (succ_5‹› #pred_689))),
    (vec_9‹U› #A_620 (succ_5‹› #n_702)))
  eq_term?( nat_3, nat_3)
)
simpl_pprbm ~expand:false( #A_620, #A_577)
simpl_pprbm ~expand:false( (succ_5‹› #pred_689), #_578)
simpl_pprbm ~expand:false( #n_702, #_579)
simpl_pprbm ~expand:false( #hd_703, #hd_580)
simpl_pprbm ~expand:false( #tl_704, #_581)
local_map solved
simpl_pprbm ~expand:false(
  (vec_9‹U› #A_620 (succ_5‹› (succ_5‹› #pred_689))),
  (vec_9‹U› #A_620 (succ_5‹› #n_702)))
simpl_pprbm ~expand:false( #A_620, #A_620)
simpl_pprbm ~expand:false( (succ_5‹› (succ_5‹› #pred_689)),
  (succ_5‹› #n_702))
simpl_pprbm ~expand:false( (succ_5‹› #pred_689), #n_702)
simpl_pprbm ~expand:false( nat_3, nat_3)
global_map solved
case_coverage_ok( hd_703, A_620)
check_tm( hd_703, A_620)
infer_tm(hd_703)
assert_equal1( A_620, A_620)
assert_equal1_ok( A_620, A_620)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_717
    ??_2 <= s_720
    ??_3 <= r_722
    ??_4 <= t_724
    ??_5 <= s_729
    ??_6 <= r_731
    ??_7 <= t_733
    ??_8 <= s_736
    ??_9 <= s_737
    ??_10 <= s_738
    ??_11 <= s_739
    ??_12 <= s_740
    ??_13 <= s_741
    ??_14 <= s_742
    ??_15 <= U
    ??_16 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_745
    ?_2 <= A_752
    ?_3 <= A_755
    ?_4 <= nat_3
    ?_8 <= Type‹??_28›
    ?_9 <= Type‹??_29›
    
  |}
  eqns {|
    equal_tm? (A_620, ?_5);
    equal_tm? (?_5, A_620);
    equal_tm? (?_5, A_620)
  |}
end_dump
simpl_tm ~expand:false( A_620, ?_5)
simpl_tm ~expand:false( A_620, A_620)
simpl_tm ~expand:false( A_620, A_620)
infer_tm(Type‹??_28›)
check_tm( nat_3, Type‹??_28›)
infer_tm(nat_3)
assert_equal1( Type‹??_28›, U)
assert_equal1_extend( Type‹??_28›, U)
simpl_tm ~expand:false( Type‹??_28›, U)
infer_tm(Type‹??_29›)
check_tm( A_620, Type‹??_29›)
infer_tm(A_620)
assert_equal1( Type‹??_29›, U)
assert_equal1_extend( Type‹??_29›, U)
simpl_tm ~expand:false( Type‹??_29›, U)
----------------------------------

definition-------------------------
infer_tm(∀ {A_813 : U} ->
           ∀ {n_814 : nat_3} ->
             (vec_9‹??_24› A_813 (succ_5‹› n_814)) ->
               (vec_9‹??_25› A_813 (succ_5‹› n_814)) ->
                 (prod_6‹??_26,??_27,L› A_813 A_813))
infer_tm(U)
infer_tm(∀ {n_818 : nat_3} ->
           (vec_9‹??_24› A_817 (succ_5‹› n_818)) ->
             (vec_9‹??_25› A_817 (succ_5‹› n_818)) ->
               (prod_6‹??_26,??_27,L› A_817 A_817))
infer_tm(nat_3)
infer_tm((vec_9‹??_24› A_817 (succ_5‹› n_821)) ->
           (vec_9‹??_25› A_817 (succ_5‹› n_821)) ->
             (prod_6‹??_26,??_27,L› A_817 A_817))
infer_tm((vec_9‹??_24› A_817 (succ_5‹› n_821)))
check_tm( A_817, Type‹??_24›)
infer_tm(A_817)
assert_equal1( Type‹??_24›, U)
assert_equal1_extend( Type‹??_24›, U)
check_tm( (succ_5‹› n_821), nat_3)
infer_tm((succ_5‹› n_821))
check_tm( n_821, nat_3)
infer_tm(n_821)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_24›, U)
infer_tm((vec_9‹??_25› A_817 (succ_5‹› n_821)) ->
           (prod_6‹??_26,??_27,L› A_817 A_817))
infer_tm((vec_9‹??_25› A_817 (succ_5‹› n_821)))
check_tm( A_817, Type‹??_25›)
infer_tm(A_817)
assert_equal1( Type‹??_25›, U)
assert_equal1_extend( Type‹??_25›, U)
check_tm( (succ_5‹› n_821), nat_3)
infer_tm((succ_5‹› n_821))
check_tm( n_821, nat_3)
infer_tm(n_821)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_25›, U)
infer_tm((prod_6‹??_26,??_27,L› A_817 A_817))
check_tm( A_817, Type‹??_26›)
infer_tm(A_817)
assert_equal1( Type‹??_26›, U)
assert_equal1_extend( Type‹??_26›, U)
check_tm( A_817, Type‹??_27›)
infer_tm(A_817)
assert_equal1( Type‹??_27›, U)
assert_equal1_extend( Type‹??_27›, U)
simpl_tm ~expand:false( Type‹??_27›, U)
simpl_tm ~expand:false( Type‹??_26›, U)
check_tm(
  function uncons2_827 :
    ∀ {A_828 : U} ->
      ∀ {n_829 : nat_3} ->
        (vec_9‹??_17› A_828 (succ_5‹› n_829)) ->
          (vec_9‹??_18› A_828 (succ_5‹› n_829)) ->
            (prod_6‹??_19,??_20,L› A_828 A_828)
  | A_832 n_833 (vcons_13 _834 hd1_835 _836) (vcons_13 _837 hd2_838 _839) =>
    (pair_8‹??_21,??_22,??_23› hd1_835 hd2_838),
  ∀ {A_840 : U} ->
    ∀ {n_841 : nat_3} ->
      (vec_9‹??_24› A_840 (succ_5‹› n_841)) ->
        (vec_9‹??_25› A_840 (succ_5‹› n_841)) ->
          (prod_6‹??_26,??_27,L› A_840 A_840))
infer_tm(∀ {A_845 : U} ->
           ∀ {n_846 : nat_3} ->
             (vec_9‹??_17› A_845 (succ_5‹› n_846)) ->
               (vec_9‹??_18› A_845 (succ_5‹› n_846)) ->
                 (prod_6‹??_19,??_20,L› A_845 A_845))
infer_tm(U)
infer_tm(∀ {n_850 : nat_3} ->
           (vec_9‹??_17› A_849 (succ_5‹› n_850)) ->
             (vec_9‹??_18› A_849 (succ_5‹› n_850)) ->
               (prod_6‹??_19,??_20,L› A_849 A_849))
infer_tm(nat_3)
infer_tm((vec_9‹??_17› A_849 (succ_5‹› n_853)) ->
           (vec_9‹??_18› A_849 (succ_5‹› n_853)) ->
             (prod_6‹??_19,??_20,L› A_849 A_849))
infer_tm((vec_9‹??_17› A_849 (succ_5‹› n_853)))
check_tm( A_849, Type‹??_17›)
infer_tm(A_849)
assert_equal1( Type‹??_17›, U)
assert_equal1_extend( Type‹??_17›, U)
check_tm( (succ_5‹› n_853), nat_3)
infer_tm((succ_5‹› n_853))
check_tm( n_853, nat_3)
infer_tm(n_853)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_17›, U)
infer_tm((vec_9‹??_18› A_849 (succ_5‹› n_853)) ->
           (prod_6‹??_19,??_20,L› A_849 A_849))
infer_tm((vec_9‹??_18› A_849 (succ_5‹› n_853)))
check_tm( A_849, Type‹??_18›)
infer_tm(A_849)
assert_equal1( Type‹??_18›, U)
assert_equal1_extend( Type‹??_18›, U)
check_tm( (succ_5‹› n_853), nat_3)
infer_tm((succ_5‹› n_853))
check_tm( n_853, nat_3)
infer_tm(n_853)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
assert_equal1_ok( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_18›, U)
infer_tm((prod_6‹??_19,??_20,L› A_849 A_849))
check_tm( A_849, Type‹??_19›)
infer_tm(A_849)
assert_equal1( Type‹??_19›, U)
assert_equal1_extend( Type‹??_19›, U)
check_tm( A_849, Type‹??_20›)
infer_tm(A_849)
assert_equal1( Type‹??_20›, U)
assert_equal1_extend( Type‹??_20›, U)
simpl_tm ~expand:false( Type‹??_20›, U)
simpl_tm ~expand:false( Type‹??_19›, U)
assert_equal1(
  ∀ {A_859 : U} ->
    ∀ {n_860 : nat_3} ->
      (vec_9‹??_24› A_859 (succ_5‹› n_860)) ->
        (vec_9‹??_25› A_859 (succ_5‹› n_860)) ->
          (prod_6‹??_26,??_27,L› A_859 A_859),
  ∀ {A_863 : U} ->
    ∀ {n_864 : nat_3} ->
      (vec_9‹??_17› A_863 (succ_5‹› n_864)) ->
        (vec_9‹??_18› A_863 (succ_5‹› n_864)) ->
          (prod_6‹??_19,??_20,L› A_863 A_863))
assert_equal1_extend(
  ∀ {A_877 : U} ->
    ∀ {n_878 : nat_3} ->
      (vec_9‹??_24› A_877 (succ_5‹› n_878)) ->
        (vec_9‹??_25› A_877 (succ_5‹› n_878)) ->
          (prod_6‹??_26,??_27,L› A_877 A_877),
  ∀ {A_881 : U} ->
    ∀ {n_882 : nat_3} ->
      (vec_9‹??_17› A_881 (succ_5‹› n_882)) ->
        (vec_9‹??_18› A_881 (succ_5‹› n_882)) ->
          (prod_6‹??_19,??_20,L› A_881 A_881))
simpl_tm ~expand:false(
  ∀ {A_913 : U} ->
    ∀ {n_914 : nat_3} ->
      (vec_9‹U› A_913 (succ_5‹› n_914)) ->
        (vec_9‹U› A_913 (succ_5‹› n_914)) ->
          (prod_6‹U,U,L› A_913 A_913),
  ∀ {A_917 : U} ->
    ∀ {n_918 : nat_3} ->
      (vec_9‹U› A_917 (succ_5‹› n_918)) ->
        (vec_9‹U› A_917 (succ_5‹› n_918)) ->
          (prod_6‹U,U,L› A_917 A_917))
simpl_tm ~expand:false( U, U)
simpl_tm ~expand:false(
  ∀ {n_922 : nat_3} ->
    (vec_9‹U› A_921 (succ_5‹› n_922)) ->
      (vec_9‹U› A_921 (succ_5‹› n_922)) ->
        (prod_6‹U,U,L› A_921 A_921),
  ∀ {n_925 : nat_3} ->
    (vec_9‹U› A_921 (succ_5‹› n_925)) ->
      (vec_9‹U› A_921 (succ_5‹› n_925)) ->
        (prod_6‹U,U,L› A_921 A_921))
simpl_tm ~expand:false( nat_3, nat_3)
simpl_tm ~expand:false(
  (vec_9‹U› A_921 (succ_5‹› n_928)) ->
    (vec_9‹U› A_921 (succ_5‹› n_928)) ->
      (prod_6‹U,U,L› A_921 A_921),
  (vec_9‹U› A_921 (succ_5‹› n_928)) ->
    (vec_9‹U› A_921 (succ_5‹› n_928)) ->
      (prod_6‹U,U,L› A_921 A_921))
simpl_tm ~expand:false( (vec_9‹U› A_921 (succ_5‹› n_928)),
  (vec_9‹U› A_921 (succ_5‹› n_928)))
simpl_tm ~expand:false( A_921, A_921)
simpl_tm ~expand:false( (succ_5‹› n_928), (succ_5‹› n_928))
simpl_tm ~expand:false( n_928, n_928)
simpl_tm ~expand:false(
  (vec_9‹U› A_921 (succ_5‹› n_928)) ->
    (prod_6‹U,U,L› A_921 A_921),
  (vec_9‹U› A_921 (succ_5‹› n_928)) ->
    (prod_6‹U,U,L› A_921 A_921))
simpl_tm ~expand:false( (vec_9‹U› A_921 (succ_5‹› n_928)),
  (vec_9‹U› A_921 (succ_5‹› n_928)))
simpl_tm ~expand:false( A_921, A_921)
simpl_tm ~expand:false( (succ_5‹› n_928), (succ_5‹› n_928))
simpl_tm ~expand:false( n_928, n_928)
simpl_tm ~expand:false( (prod_6‹U,U,L› A_921 A_921),
  (prod_6‹U,U,L› A_921 A_921))
simpl_tm ~expand:false( A_921, A_921)
simpl_tm ~expand:false( A_921, A_921)
check_cls {|
  prblm {| ;
    {|  ::: [A_885, n_886, (vcons_13 _887 hd1_888 _889), (vcons_13 _890 hd2_891 _892)] =>?
         (pair_8‹??_21,??_22,??_23› #hd1_888 #hd2_891)
    |}
  |}
  a := ∀ {A_947 : U} ->
         ∀ {n_948 : nat_3} ->
           (vec_9‹U› A_947 (succ_5‹› n_948)) ->
             (vec_9‹U› A_947 (succ_5‹› n_948)) ->
               (prod_6‹U,U,L› A_947 A_947)
|}
case_intro
case_introed(A_951 : U)
case_intro
case_introed(n_952 : nat_3)
case_intro
case_introed(__953 : (vec_9‹U› #A_951 (succ_5‹› #n_952)))
case_intro
case_introed(__954 : (vec_9‹U› #A_951 (succ_5‹› #n_952)))
case_splitting
splitting_on(vnil_12)
case_empty
unify_local(  )
unify_global(
  eq_term?( (vec_9‹U› #A_951 (succ_5‹› #n_952)),
    (vec_9‹U› #A_951 zero_4))
)
local_map solved
simpl_pprbm ~expand:false( (vec_9‹U› #A_951 (succ_5‹› #n_952)),
  (vec_9‹U› #A_951 zero_4))
simpl_pprbm ~expand:false( #A_951, #A_951)
simpl_pprbm ~expand:false( (succ_5‹› #n_952), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› #n_952), zero_4)
splitting_on(vcons_13)
case_splitting
splitting_on(vnil_12)
case_empty
unify_local(  )
unify_global(
  eq_term?( (vec_9‹U› #A_951 (succ_5‹› #n_952)),
    (vec_9‹U› #A_951 zero_4))
  eq_term?( (vec_9‹U› #A_951 (succ_5‹› #n_952)),
    (vec_9‹U› #A_951 (succ_5‹› #n_965)))
)
local_map solved
simpl_pprbm ~expand:false( (vec_9‹U› #A_951 (succ_5‹› #n_952)),
  (vec_9‹U› #A_951 zero_4))
simpl_pprbm ~expand:false( #A_951, #A_951)
simpl_pprbm ~expand:false( (succ_5‹› #n_952), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› #n_952), zero_4)
splitting_on(vcons_13)
case_coverage{|
  prblm {|
    eq_term?( (vec_9‹U› #A_951 (succ_5‹› #n_952)),
      (vec_9‹U› #A_951 (succ_5‹› #n_988)))
    eq_term?( (vec_9‹U› #A_951 (succ_5‹› #n_952)),
      (vec_9‹U› #A_951 (succ_5‹› #n_965)));
    {| eq_pat?( #A_951, A_885 : U)
       eq_pat?( #n_952, n_886 : nat_3)
       eq_pat?( #n_965, _887 : nat_3)
       eq_pat?( #hd_966, hd1_888 : #A_951)
       eq_pat?( #tl_967, _889 : (vec_9‹U› #A_951 #n_965))
       eq_pat?( #n_988, _890 : nat_3)
       eq_pat?( #hd_989, hd2_891 : #A_951)
       eq_pat?( #tl_990, _892 : (vec_9‹U› #A_951 #n_988)) ::: [] =>?
         (pair_8‹??_21,??_22,??_23› #hd1_888 #hd2_891)
    |}
  |}
|}
unify_local(
  eq_pat?( #A_951, A_885 : U)
  eq_pat?( #n_952, n_886 : nat_3)
  eq_pat?( #n_965, _887 : nat_3)
  eq_pat?( #hd_966, hd1_888 : #A_951)
  eq_pat?( #tl_967, _889 : (vec_9‹U› #A_951 #n_965))
  eq_pat?( #n_988, _890 : nat_3)
  eq_pat?( #hd_989, hd2_891 : #A_951)
  eq_pat?( #tl_990, _892 : (vec_9‹U› #A_951 #n_988))
)
unify_global(
  eq_term?( (vec_9‹U› #A_951 (succ_5‹› #n_952)),
    (vec_9‹U› #A_951 (succ_5‹› #n_988)))
  eq_term?( (vec_9‹U› #A_951 (succ_5‹› #n_952)),
    (vec_9‹U› #A_951 (succ_5‹› #n_965)))
)
simpl_pprbm ~expand:false( #A_951, #A_885)
simpl_pprbm ~expand:false( #n_952, #n_886)
simpl_pprbm ~expand:false( #n_965, #_887)
simpl_pprbm ~expand:false( #hd_966, #hd1_888)
simpl_pprbm ~expand:false( #tl_967, #_889)
simpl_pprbm ~expand:false( #n_988, #_890)
simpl_pprbm ~expand:false( #hd_989, #hd2_891)
simpl_pprbm ~expand:false( #tl_990, #_892)
local_map solved
simpl_pprbm ~expand:false( (vec_9‹U› #A_951 (succ_5‹› #n_952)),
  (vec_9‹U› #A_951 (succ_5‹› #n_988)))
simpl_pprbm ~expand:false( #A_951, #A_951)
simpl_pprbm ~expand:false( (succ_5‹› #n_952), (succ_5‹› #n_988))
simpl_pprbm ~expand:false( #n_952, #n_988)
simpl_pprbm ~expand:false( (vec_9‹U› #A_951 (succ_5‹› #n_988)),
  (vec_9‹U› #A_951 (succ_5‹› #n_965)))
simpl_pprbm ~expand:false( #A_951, #A_951)
simpl_pprbm ~expand:false( (succ_5‹› #n_988), (succ_5‹› #n_965))
simpl_pprbm ~expand:false( #n_988, #n_965)
global_map solved
case_coverage_ok( (pair_8‹??_21,??_22,??_23› hd_966 hd_989),
  (prod_6‹U,U,L› A_951 A_951))
check_tm( (pair_8‹??_21,??_22,??_23› hd_966 hd_989),
  (prod_6‹U,U,L› A_951 A_951))
infer_tm((pair_8‹??_21,??_22,??_23› hd_966 hd_989))
check_tm( ?_6, Type‹??_21›)
check_tm( ?_7, Type‹??_22›)
check_tm( hd_966, ?_6)
infer_tm(hd_966)
assert_equal1( ?_6, A_951)
assert_equal1_extend( ?_6, A_951)
check_tm( hd_989, ?_7)
infer_tm(hd_989)
assert_equal1( ?_7, A_951)
assert_equal1_extend( ?_7, A_951)
assert_equal1( (prod_6‹U,U,L› A_951 A_951),
  (prod_6‹??_21,??_22,??_23› ?_6 ?_7))
assert_equal1_extend( (prod_6‹U,U,L› A_951 A_951),
  (prod_6‹??_21,??_22,??_23› ?_6 ?_7))
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_1011
    ??_2 <= s_1014
    ??_3 <= r_1016
    ??_4 <= t_1018
    ??_5 <= s_1023
    ??_6 <= r_1025
    ??_7 <= t_1027
    ??_8 <= s_1030
    ??_9 <= s_1031
    ??_10 <= s_1032
    ??_11 <= s_1033
    ??_12 <= s_1034
    ??_13 <= s_1035
    ??_14 <= s_1036
    ??_15 <= U
    ??_16 <= U
    ??_17 <= U
    ??_18 <= U
    ??_19 <= U
    ??_20 <= U
    ??_24 <= U
    ??_25 <= U
    ??_26 <= U
    ??_27 <= U
    ??_28 <= U
    ??_29 <= U
    
  |}
  imeta_meta {|
    ?_1 <= A_1039
    ?_2 <= A_1046
    ?_3 <= A_1049
    ?_4 <= nat_3
    ?_5 <= A_1059
    ?_8 <= Type‹??_28›
    ?_9 <= Type‹??_29›
    
  |}
  eqns {|
    equal_tm? ((prod_6‹U,U,L› A_951 A_951),
      (prod_6‹??_21,??_22,??_23› ?_6 ?_7));
    equal_tm? (?_7, A_951);
    equal_tm? (?_6, A_951)
  |}
end_dump
simpl_tm ~expand:false( (prod_6‹U,U,L› A_951 A_951),
  (prod_6‹??_21,??_22,??_23› ?_6 ?_7))
simpl_tm ~expand:false( A_951, ?_6)
simpl_tm ~expand:false( A_951, ?_7)
simpl_tm ~expand:false( A_951, ?_6)
simpl_tm ~expand:false( A_951, ?_7)
simpl_tm ~expand:false( A_951, A_951)
simpl_tm ~expand:false( A_951, A_951)
infer_tm(U)
check_tm( A_951, U)
infer_tm(A_951)
assert_equal1( U, U)
assert_equal1_ok( U, U)
infer_tm(U)
check_tm( A_951, U)
infer_tm(A_951)
assert_equal1( U, U)
assert_equal1_ok( U, U)
----------------------------------

smeta_meta {|
  ??_1 <= s_1124
  ??_2 <= s_1127
  ??_3 <= r_1129
  ??_4 <= t_1131
  ??_5 <= s_1136
  ??_6 <= r_1138
  ??_7 <= t_1140
  ??_8 <= s_1143
  ??_9 <= s_1144
  ??_10 <= s_1145
  ??_11 <= s_1146
  ??_12 <= s_1147
  ??_13 <= s_1148
  ??_14 <= s_1149
  ??_15 <= U
  ??_16 <= U
  ??_17 <= U
  ??_18 <= U
  ??_19 <= U
  ??_20 <= U
  ??_21 <= U
  ??_22 <= U
  ??_23 <= L
  ??_24 <= U
  ??_25 <= U
  ??_26 <= U
  ??_27 <= U
  ??_28 <= U
  ??_29 <= U
  
|}
imeta_meta {|
  ?_1 <= A_1152
  ?_2 <= A_1159
  ?_3 <= A_1162
  ?_4 <= nat_3
  ?_5 <= A_1172
  ?_6 <= A_1181
  ?_7 <= A_1190
  ?_8 <= Type‹??_28›
  ?_9 <= Type‹??_29›
  
|}
#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_1380 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_1381› (A_1382 : Type‹s_1381›) (m_1383 : A_1382):
  A_1382 -> U
where
| refl_6 : (eq_4‹s_1381› A_1382 m_1383 m_1383)

#[program]
inductive exists_5‹s_1385,r_1386,t_1387› (A_1388 : Type‹s_1385›) (B_1389 : 
A_1388 -> Type‹r_1386›): Type‹t_1387› where
| ex_7
    (m_1391 : A_1388) {pf_1392 : ((B_1389) m_1391)}
    : (exists_5‹s_1385,r_1386,t_1387› A_1388 B_1389)

#[program]
inductive prod_6‹s_1393,r_1394,t_1395› (A_1396 : Type‹s_1393›) (B_1397 : Type‹r_1394›):
  Type‹t_1395›
where
| pair_8
    (m_1398 : A_1396) (n_1399 : B_1397)
    : (prod_6‹s_1393,r_1394,t_1395› A_1396 B_1397)

#[program]
inductive sing_7‹s_1400› (A_1401 : Type‹s_1400›):
  A_1401 -> Type‹s_1400›
where
| just_9 (m_1403 : A_1401) : (sing_7‹s_1400› A_1401 m_1403)

#[program]
inductive list_8‹s_1404› (A_1405 : Type‹s_1404›): U where
| nil_10 : (list_8‹s_1404› A_1405)
| cons_11
    (hd_1406 : A_1405) (tl_1407 : (list_8‹s_1404› A_1405))
    : (list_8‹s_1404› A_1405)

#[program]
inductive vec_9‹s_1408› (A_1409 : Type‹s_1408›):
  nat_3 -> Type‹s_1408›
where
| vnil_12 : (vec_9‹s_1408› A_1409 zero_4)
| vcons_13
    {n_1411 : nat_3} (hd_1412 : A_1409)
    (tl_1413 : (vec_9‹s_1408› A_1409 n_1411))
    : (vec_9‹s_1408› A_1409 (succ_5‹› n_1411))

#[program]
def uncons_1‹› :
  ∀ {A_1414 : U} ->
    ∀ {n_1415 : nat_3} ->
      (vec_9‹U› A_1414 (succ_5‹› n_1415)) -> A_1414
:=
  function uncons_1417 :
    ∀ {A_1418 : U} ->
      ∀ {n_1419 : nat_3} ->
        (vec_9‹U› A_1418 (succ_5‹› n_1419)) -> A_1418
  | A_1421 zero_4 (vcons_13 n_1422 hd_1423 _1424) =>
    match n_1422 in {nat_3} -o A_1421 with
    | zero_4 => hd_1423
    | (succ_5 _1426) => hd_1423
  | A_1427 _1428 (vcons_13 _1429 hd_1430 _1431) => hd_1430

#[program]
def uncons2_2‹› :
  ∀ {A_1432 : U} ->
    ∀ {n_1433 : nat_3} ->
      (vec_9‹U› A_1432 (succ_5‹› n_1433)) ->
        (vec_9‹U› A_1432 (succ_5‹› n_1433)) ->
          (prod_6‹U,U,L› A_1432 A_1432)
:=
  function uncons2_1436 :
    ∀ {A_1437 : U} ->
      ∀ {n_1438 : nat_3} ->
        (vec_9‹U› A_1437 (succ_5‹› n_1438)) ->
          (vec_9‹U› A_1437 (succ_5‹› n_1438)) ->
            (prod_6‹U,U,L› A_1437 A_1437)
  | A_1441 n_1442 (vcons_13 _1443 hd1_1444 _1445) (vcons_13 _1446 hd2_1447 _1448) =>
    (pair_8‹U,U,L› hd1_1444 hd2_1447)

-----------------------------------------

  warning - pruned constructor exLLU_17 trans12.check_dconstrs
  warning - pruned constructor exLUU_19 trans12.check_dconstrs
  warning - pruned constructor pairLLU_25 trans12.check_dconstrs
  warning - pruned constructor pairLUU_27 trans12.check_dconstrs
  warning - pruned constructor pairULU_29 trans12.check_dconstrs
  warning - pruned constructor consL_35 trans12.check_dconstrs
inductive unit_1 where
| tt_1 of layout[]

inductive bool_2 where
| true_2 of layout[] | false_3 of layout[]

inductive nat_3 where
| zero_4 of layout[] | succ_5 of layout[R]

inductive eqU_11 where
| reflU_15 of layout[]

inductive eqL_10 where
| reflL_14 of layout[]

inductive existsUUU_19 where
| exUUU_23 of layout[R, N]

inductive existsUUL_18 where
| exUUL_22 of layout[R, N]

inductive existsULU_17 where
| exULU_21 of layout[R, N]

inductive existsULL_16 where
| exULL_20 of layout[R, N]

inductive existsLUU_15 where


inductive existsLUL_14 where
| exLUL_18 of layout[R, N]

inductive existsLLU_13 where


inductive existsLLL_12 where
| exLLL_16 of layout[R, N]

inductive prodUUU_27 where
| pairUUU_31 of layout[R, R]

inductive prodUUL_26 where
| pairUUL_30 of layout[R, R]

inductive prodULU_25 where


inductive prodULL_24 where
| pairULL_28 of layout[R, R]

inductive prodLUU_23 where


inductive prodLUL_22 where
| pairLUL_26 of layout[R, R]

inductive prodLLU_21 where


inductive prodLLL_20 where
| pairLLL_24 of layout[R, R]

inductive singU_29 where
| justU_33 of layout[R]

inductive singL_28 where
| justL_32 of layout[R]

inductive listU_31 where
| nilU_36 of layout[] | consU_37 of layout[R, R]

inductive listL_30 where
| nilL_34 of layout[]

inductive vecU_33 where
| vnilU_40 of layout[] | vconsU_41 of layout[N, R, R]

inductive vecL_32 where
| vnilL_38 of layout[] | vconsL_39 of layout[N, R, R]

def uncons_1 :=
  fun uncons_2016 (A_2017, n_2018, __2019) =>
    match {NULL} with
    | zero_4  =>
      match __2019 with
      | vnilU_40  => !!
      | vconsU_41 n_2020 hd_2021 tl_2022 =>
        match {NULL} with
        | zero_4  => hd_2021
        | succ_5 pred_2023 => hd_2021
        end
      end
    | succ_5 pred_2024 =>
      match __2019 with
      | vnilU_40  => !!
      | vconsU_41 n_2025 hd_2026 tl_2027 => hd_2026
      end
    end

def uncons2_2 :=
  fun uncons2_2028 (A_2029, n_2030, __2031, __2032) =>
    match __2031 with
    | vconsU_41 n_2033 hd_2034 tl_2035 =>
      match __2032 with
      | vconsU_41 n_2036 hd_2037 tl_2038 => (pairUUL_30 hd_2034 hd_2037)
      end
    end

-----------------------------------------

