[Definition {name = "llist"; relv = N;
   body =
   (Binder (["s"],
      ((Fun ((Pi (R, U, (Type (SId "s")), (Binder ("A", IMeta)))),
          (Binder ((Some "llist"),
             [([(PId "A")],
               (Some (App [(Inst ("list", [(SId "_"); L], I)); (Id ("A", I))])))
               ]
             )),
          [E])),
       (Pi (R, U, (Type (SId "s")), (Binder ("A", IMeta)))))
      ));
   view = [E]};
  Inductive {name = "opr"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type L)),
           [(DConstr ("Free", (TBase (Id ("opr", I))), []));
             (DConstr ("Enqueue",
                (TBind (R, Int_t, (Binder ("n", (TBase (Id ("opr", I))))))),
                [E]));
             (DConstr ("Dequeue", (TBase (Id ("opr", I))), []))]))
       ));
    view = []};
  Definition {name = "queue_p"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (App [(Id ("llist", I)); Int_t]),
              (Binder ("xs", Proto)))),
           (Binder ((Some "queue_p"),
              [([(PId "xs")],
                (Some (Act (R, false, (Id ("opr", I)),
                         (Binder ("o",
                            (Match ([(R, (Id ("o", I)), None)], None,
                               [([(PId "Free")], (Some End));
                                 ([(PConstr ("Enqueue", [(PId "x")]))],
                                  (Some (App
                                           [(Id ("queue_p", I));
                                             (App
                                                [(Id ("rcons", I));
                                                  (Id ("xs", I));
                                                  (Id ("x", I))])
                                             ])));
                                 ([(PId "Dequeue")],
                                  (Some (Match ([(R, (Id ("xs", I)), None)],
                                           None,
                                           [([(PBOpr ("::", (PId "x"),
                                                 (PId "xs")))
                                               ],
                                             (Some (Act (R, true,
                                                      (UOpr ("`",
                                                         (Id ("x", I)))),
                                                      (Binder ("_",
                                                         (Act (R, true,
                                                            (Ch (false,
                                                               (App
                                                                  [(Id (
                                                                    "queue_p",
                                                                    I));
                                                                    (
                                                                    Id ("xs",
                                                                    I))])
                                                               )),
                                                            (Binder ("_", End
                                                               ))
                                                            ))
                                                         ))
                                                      ))));
                                             ([(PId "nil")],
                                              (Some (App
                                                       [(Id ("queue_p", I));
                                                         (Id ("xs", I))])))
                                             ]
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Id ("llist", I)); Int_t]), (Binder ("xs", Proto)))))
       ));
    view = [E]};
  Definition {name = "queue_ch"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (App [(Id ("llist", I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "queue_ch"),
              [([(PId "xs")],
                (Some (Ch (true, (App [(Id ("queue_p", I)); (Id ("xs", I))])
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Id ("llist", I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "queue_hc"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (App [(Id ("llist", I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "queue_hc"),
              [([(PId "xs")],
                (Some (Ch (false, (App [(Id ("queue_p", I)); (Id ("xs", I))])
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Id ("llist", I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "queue"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (App [(Id ("llist", I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "queue"),
              [([(PId "xs")],
                (Some (IO (App [(Id ("queue_hc", I)); (Id ("xs", I))]))))]
              )),
           [E])),
        (Pi (R, U, (App [(Id ("llist", I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "node_worker"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (App [(Id ("llist", I)); Int_t]),
              (Binder ("xs",
                 (Pi (R, U, Int_t,
                    (Binder ("x",
                       (Pi (R, L,
                          (App [(Id ("queue_hc", I)); (Id ("xs", I))]),
                          (Binder ("_",
                             (Pi (R, L,
                                (App
                                   [(Id ("queue_ch", I));
                                     (BOpr ("::", (Id ("x", I)),
                                        (Id ("xs", I))))
                                     ]),
                                (Binder ("_", (IO (Id ("unit", I)))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "node_worker"),
              [([(PId "xs"); (PId "x"); (PId "c_next"); (PId "c")],
                (Some (MLet ((Recv (Id ("c", I))),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "o"),
                               (PId "c"))),
                            (Match (
                               [(R, (Id ("o", I)), (Some ("o0", IMeta)));
                                 (R, (Id ("c", I)),
                                  (Some ("_",
                                         (Ch (true,
                                            (Match (
                                               [(R, (Id ("o0", I)), None)],
                                               None,
                                               [([(PId "Free")], (Some End));
                                                 ([(PConstr ("Enqueue",
                                                      [(PId "n")]))
                                                    ],
                                                  (Some (App
                                                           [(Id ("queue_p", I
                                                               ));
                                                             (App
                                                                [(Id (
                                                                    "rcons",
                                                                    I));
                                                                  (BOpr (
                                                                    "::",
                                                                    (Id ("x",
                                                                    I)),
                                                                    (Id (
                                                                    "xs", I))
                                                                    ));
                                                                  (Id ("n", I
                                                                    ))
                                                                  ])
                                                             ])));
                                                 ([(PId "Dequeue")],
                                                  (Some (Act (R, true,
                                                           (UOpr ("`",
                                                              (Id ("x", I)))),
                                                           (Binder ("_",
                                                              (Act (R, true,
                                                                 (Ch (false,
                                                                    (
                                                                    App
                                                                    [(Id (
                                                                    "queue_p",
                                                                    I));
                                                                    (Id (
                                                                    "xs", I))
                                                                    ]))),
                                                                 (Binder (
                                                                    "_", End
                                                                    ))
                                                                 ))
                                                              ))
                                                           ))))
                                                 ]
                                               ))
                                            )))))
                                 ],
                               None,
                               [([(PId "Free"); (PId "c")],
                                 (Some (MLet (
                                          (App
                                             [(Send (Id ("c_next", I)));
                                               (Id ("Free", I))]),
                                          (Binder ((PId "c_next"),
                                             (BOpr (";",
                                                (Close (Id ("c_next", I))),
                                                (Close (Id ("c", I)))))
                                             ))
                                          ))));
                                 ([(PConstr ("Enqueue", [(PId "n")]));
                                    (PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("c_next", I)));
                                                (App
                                                   [(Id ("Enqueue", I));
                                                     (Id ("n", I))])
                                                ]),
                                           (Binder ((PId "c_next"),
                                              (App
                                                 [(Id ("node_worker", I));
                                                   (Id ("x", I));
                                                   (Id ("c_next", I));
                                                   (Id ("c", I))])
                                              ))
                                           ))));
                                 ([(PId "Dequeue"); (PId "c")],
                                  (Some (MLet (
                                           (App
                                              [(Send (Id ("c", I)));
                                                (App
                                                   [(Id ("just", I));
                                                     (Id ("x", I))])
                                                ]),
                                           (Binder ((PId "c"),
                                              (MLet (
                                                 (App
                                                    [(Send (Id ("c", I)));
                                                      (Id ("c_next", I))]),
                                                 (Binder ((PId "c"),
                                                    (Close (Id ("c", I)))))
                                                 ))
                                              ))
                                           ))))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (App [(Id ("llist", I)); Int_t]),
           (Binder ("xs",
              (Pi (R, U, Int_t,
                 (Binder ("x",
                    (Pi (R, L, (App [(Id ("queue_hc", I)); (Id ("xs", I))]),
                       (Binder ("_",
                          (Pi (R, L,
                             (App
                                [(Id ("queue_ch", I));
                                  (BOpr ("::", (Id ("x", I)), (Id ("xs", I))
                                     ))
                                  ]),
                             (Binder ("_", (IO (Id ("unit", I)))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "empty_worker"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (App [(Id ("queue_ch", I)); (Id ("nil", I))]),
              (Binder ("c", (IO (Id ("unit", I))))))),
           (Binder ((Some "empty_worker"),
              [([(PId "c")],
                (Some (MLet ((Recv (Id ("c", I))),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "o"),
                               (PId "c"))),
                            (Match (
                               [(R, (Id ("o", I)), (Some ("o0", IMeta)));
                                 (R, (Id ("c", I)),
                                  (Some ("_",
                                         (Ch (true,
                                            (Match (
                                               [(R, (Id ("o0", I)), None)],
                                               None,
                                               [([(PId "Free")], (Some End));
                                                 ([(PConstr ("Enqueue",
                                                      [(PId "n")]))
                                                    ],
                                                  (Some (App
                                                           [(Id ("queue_p", I
                                                               ));
                                                             (BOpr ("::",
                                                                (Id ("n", I)),
                                                                (Id ("nil", I
                                                                   ))
                                                                ))
                                                             ])));
                                                 ([(PId "Dequeue")],
                                                  (Some (App
                                                           [(Id ("queue_p", I
                                                               ));
                                                             (Id ("nil", I))])))
                                                 ]
                                               ))
                                            )))))
                                 ],
                               None,
                               [([(PId "Free"); (PId "c")],
                                 (Some (Close (Id ("c", I)))));
                                 ([(PConstr ("Enqueue", [(PId "n")]));
                                    (PId "c")],
                                  (Some (MLet (
                                           (Fork
                                              (Fun (
                                                 (Pi (R, L,
                                                    (App
                                                       [(Id ("queue_hc", I));
                                                         (Id ("nil", I))]),
                                                    (Binder ("",
                                                       (IO (Id ("unit", I)))
                                                       ))
                                                    )),
                                                 (Binder (None,
                                                    [([(PId "c0")],
                                                      (Some (App
                                                               [(Id (
                                                                   "node_worker",
                                                                   I));
                                                                 (Id ("n", I
                                                                    ));
                                                                 (Id ("c0", I
                                                                    ));
                                                                 (Id ("c", I
                                                                    ))
                                                                 ])))
                                                      ]
                                                    )),
                                                 []))),
                                           (Binder ((PId "c0"),
                                              (App
                                                 [(Id ("empty_worker", I));
                                                   (Id ("c0", I))])
                                              ))
                                           ))));
                                 ([(PId "Dequeue"); (PId "c")],
                                  (Some (App
                                           [(Id ("empty_worker", I));
                                             (Id ("c", I))])))
                                 ]
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Id ("queue_ch", I)); (Id ("nil", I))]),
           (Binder ("c", (IO (Id ("unit", I))))))))
       ));
    view = [E]};
  Definition {name = "q_empty"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("unit", I)),
              (Binder ("_", (App [(Id ("queue", I)); (Id ("nil", I))]))))),
           (Binder ((Some "q_empty"),
              [([(PId "_")],
                (Some (Fork
                         (Fun (
                            (Pi (R, L,
                               (App [(Id ("queue_ch", I)); (Id ("nil", I))]),
                               (Binder ("", (IO (Id ("unit", I))))))),
                            (Binder (None,
                               [([(PId "c")],
                                 (Some (App
                                          [(Id ("empty_worker", I));
                                            (Id ("c", I))])))
                                 ]
                               )),
                            [])))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("unit", I)),
           (Binder ("_", (App [(Id ("queue", I)); (Id ("nil", I))]))))))
       ));
    view = [E]};
  Definition {name = "q_free"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (App [(Id ("llist", I)); Int_t]),
              (Binder ("xs",
                 (Pi (R, U, (App [(Id ("queue", I)); (Id ("xs", I))]),
                    (Binder ("q", (IO (Id ("unit", I)))))))
                 ))
              )),
           (Binder ((Some "q_free"),
              [([(PId "xs"); (PId "q")],
                (Some (MLet ((Id ("q", I)),
                         (Binder ((PId "q"),
                            (MLet (
                               (App [(Send (Id ("q", I))); (Id ("Free", I))]),
                               (Binder ((PId "q"), (Close (Id ("q", I)))))))
                            ))
                         ))))
                ]
              )),
           [I; E])),
        (Pi (N, U, (App [(Id ("llist", I)); Int_t]),
           (Binder ("xs",
              (Pi (R, U, (App [(Id ("queue", I)); (Id ("xs", I))]),
                 (Binder ("q", (IO (Id ("unit", I)))))))
              ))
           )))
       ));
    view = [I; E]};
  Definition {name = "q_enqueue"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, (App [(Id ("llist", I)); Int_t]),
              (Binder ("xs",
                 (Pi (R, U, Int_t,
                    (Binder ("n",
                       (Pi (R, U, (App [(Id ("queue", I)); (Id ("xs", I))]),
                          (Binder ("q",
                             (App
                                [(Id ("queue", I));
                                  (App
                                     [(Id ("rcons", I)); (Id ("xs", I));
                                       (Id ("n", I))])
                                  ])
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "q_enqueue"),
              [([(PId "xs"); (PId "n"); (PId "q")],
                (Some (MLet ((Id ("q", I)),
                         (Binder ((PId "q"),
                            (MLet (
                               (App
                                  [(Send (Id ("q", I)));
                                    (App [(Id ("Enqueue", I)); (Id ("n", I))])
                                    ]),
                               (Binder ((PId "q"), (Return (Id ("q", I)))))))
                            ))
                         ))))
                ]
              )),
           [I; E; E])),
        (Pi (N, U, (App [(Id ("llist", I)); Int_t]),
           (Binder ("xs",
              (Pi (R, U, Int_t,
                 (Binder ("n",
                    (Pi (R, U, (App [(Id ("queue", I)); (Id ("xs", I))]),
                       (Binder ("q",
                          (App
                             [(Id ("queue", I));
                               (App
                                  [(Id ("rcons", I)); (Id ("xs", I));
                                    (Id ("n", I))])
                               ])
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; E; E]};
  Definition {name = "q_dequeue"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (N, U, Int_t,
              (Binder ("x",
                 (Pi (N, U, (App [(Id ("llist", I)); Int_t]),
                    (Binder ("xs",
                       (Pi (R, U,
                          (App
                             [(Id ("queue", I));
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I))))]),
                          (Binder ("q",
                             (IO
                                (BOpr ("\226\138\151",
                                   (UOpr ("`", (Id ("x", I)))),
                                   (App [(Id ("queue", I)); (Id ("xs", I))])
                                   )))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "q_dequeue"),
              [([(PId "x"); (PId "xs"); (PId "q")],
                (Some (MLet ((Id ("q", I)),
                         (Binder ((PId "q"),
                            (MLet (
                               (App
                                  [(Send (Id ("q", I))); (Id ("Dequeue", I))]),
                               (Binder ((PId "q"),
                                  (MLet ((Recv (Id ("q", I))),
                                     (Binder (
                                        (PBOpr ("\226\159\168,\226\159\169",
                                           (PId "n"), (PId "q"))),
                                        (MLet ((Recv (Id ("q", I))),
                                           (Binder (
                                              (PBOpr (
                                                 "\226\159\168,\226\159\169",
                                                 (PId "q0"), (PId "q"))),
                                              (BOpr (";",
                                                 (Close (Id ("q", I))),
                                                 (Return
                                                    (BOpr (
                                                       "\226\159\168,\226\159\169",
                                                       (Id ("n", I)),
                                                       (Return (Id ("q0", I)))
                                                       )))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [I; I; E])),
        (Pi (N, U, Int_t,
           (Binder ("x",
              (Pi (N, U, (App [(Id ("llist", I)); Int_t]),
                 (Binder ("xs",
                    (Pi (R, U,
                       (App
                          [(Id ("queue", I));
                            (BOpr ("::", (Id ("x", I)), (Id ("xs", I))))]),
                       (Binder ("q",
                          (IO
                             (BOpr ("\226\138\151",
                                (UOpr ("`", (Id ("x", I)))),
                                (App [(Id ("queue", I)); (Id ("xs", I))]))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; E]};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([], ((App [(Id ("q_empty", I)); (Id ("tt", I))]), IMeta)));
    view = []};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("q_enqueue", I)); (Int 0); (Id ("myqueue", I))]), IMeta)));
    view = []};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("q_enqueue", I)); (Int 1); (Id ("myqueue", I))]), IMeta)));
    view = []};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("q_enqueue", I)); (Int 2); (Id ("myqueue", I))]), IMeta)));
    view = []};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("q_enqueue", I)); (Int 3); (Id ("myqueue", I))]), IMeta)));
    view = []};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("q_enqueue", I)); (Int 4); (Id ("myqueue", I))]), IMeta)));
    view = []};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("q_enqueue", I)); (Int 5); (Id ("myqueue", I))]), IMeta)));
    view = []};
  Definition {name = "myqueue"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("q_enqueue", I)); (Int 6); (Id ("myqueue", I))]), IMeta)));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((MLet ((App [(Id ("q_dequeue", I)); (Id ("myqueue", I))]),
           (Binder (
              (PBOpr ("\226\159\168,\226\159\169",
                 (PConstr ("just", [(PId "x")])), (PId "myqueue"))),
              (MLet ((App [(Id ("q_dequeue", I)); (Id ("myqueue", I))]),
                 (Binder (
                    (PBOpr ("\226\159\168,\226\159\169",
                       (PConstr ("just", [(PId "y")])), (PId "myqueue"))),
                    (MLet (
                       (App [(Id ("q_dequeue", I)); (Id ("myqueue", I))]),
                       (Binder (
                          (PBOpr ("\226\159\168,\226\159\169",
                             (PConstr ("just", [(PId "z")])), (PId "myqueue")
                             )),
                          (MLet (
                             (App [(Id ("q_free", I)); (Id ("myqueue", I))]),
                             (Binder ((PId "tt"),
                                (Print
                                   (BOpr ("++",
                                      (BOpr ("++",
                                         (BOpr ("++",
                                            (BOpr ("++",
                                               (BOpr ("++",
                                                  (BOpr ("++",
                                                     (BOpr ("++",
                                                        (BOpr ("++",
                                                           (String "x := "),
                                                           (App
                                                              [(Id (
                                                                  "string_of_int",
                                                                  I));
                                                                (Id ("x", I))
                                                                ])
                                                           )),
                                                        (String "\n"))),
                                                     (String "y := "))),
                                                  (App
                                                     [(Id ("string_of_int", I
                                                         ));
                                                       (Id ("y", I))])
                                                  )),
                                               (String "\n"))),
                                            (String "z := "))),
                                         (App
                                            [(Id ("string_of_int", I));
                                              (Id ("z", I))])
                                         )),
                                      (String "\n"))))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

[parse success]

-----------------------------------------

#[logical]
def llist_34‹s_560› : Type‹s_560› -> ?_66[0;0] :=
  (fun llist_562 : Type‹s_560› -> ?_65[0;0]
  | A_564 => (list_7‹??_62,L› A_564))

#[program]
inductive opr_11‹› : L where
| Free_15 : opr_11
| Enqueue_16 (n_565 : int) : opr_11
| Dequeue_17 : opr_11

#[logical]
def queue_p_35‹› : ((llist_34‹??_67›) int) -> proto :=
  (fun queue_p_567 : ((llist_34‹??_63›) int) -> proto
  | xs_569 =>
    ⇓(o_570 : opr_11) ⇒
      (match o_570 in ?_67[0;0] -o ?_68[0;0] with
      | Free_15 => •
      | (Enqueue_16 x_572) =>
        ((queue_p_567) ((rcons_24‹??_64,??_65›) ?_69[0;0] xs_569 x_572))
      | Dequeue_17 =>
        (match xs_569 in ?_70[0;0] -o ?_71[0;0] with
        | (cons_11 x_574 xs_575) =>
          ⇑(__576 : ((ssing_6‹??_66›) ?_72[0;0] x_574)) ⇒
            ⇑(__577 : hc⟨((queue_p_567) xs_575)⟩) ⇒ •
        | nil_10 => ((queue_p_567) xs_569))))

#[logical]
def queue_ch_36‹› : ((llist_34‹??_69›) int) -> L :=
  (fun queue_ch_579 : ((llist_34‹??_68›) int) -> L
  | xs_581 => ch⟨((queue_p_35) xs_581)⟩)

#[logical]
def queue_hc_37‹› : ((llist_34‹??_71›) int) -> L :=
  (fun queue_hc_583 : ((llist_34‹??_70›) int) -> L
  | xs_585 => hc⟨((queue_p_35) xs_585)⟩)

#[logical]
def queue_38‹› : ((llist_34‹??_73›) int) -> L :=
  (fun queue_587 : ((llist_34‹??_72›) int) -> L
  | xs_589 => IO ((queue_hc_37) xs_589))

#[program]
def node_worker_39‹› :
  ∀ {xs_590 : ((llist_34‹??_84›) int)} ->
    ∀ (x_591 : int) ->
      ((queue_hc_37) xs_590) -o
        ((queue_ch_36) (cons_11‹??_85,??_86› ?_85[0;0] x_591 xs_590)) -o
          IO unit_9
:=
  (fun node_worker_594 :
    ∀ {xs_595 : ((llist_34‹??_74›) int)} ->
      ∀ (x_596 : int) ->
        ((queue_hc_37) xs_595) -o
          ((queue_ch_36) (cons_11‹??_75,??_76› ?_73[0;0] x_596 xs_595)) -o
            IO unit_9
  | xs_599, x_600, c_next_601, c_602 =>
    let* _603 := recv c_602 in
    (match _603 in ?_84[0;0] -o ?_83[0;0] with
    | (ex1_14 o_605 c_606) =>
      (match o_605, c_606 in
         ∀ (o0_607 : ?_74[0;0]) -o
           ch⟨(match o0_607 in ?_75[0;0] -o ?_76[0;0] with
                | Free_15 => •
                | (Enqueue_16 n_610) =>
                  ((queue_p_35)
                    ((rcons_24‹??_79,??_80›)
                      ?_78[0;0]
                      (cons_11‹??_77,??_78› ?_77[0;0] x_600 xs_599) n_610))
                | Dequeue_17 =>
                  ⇑(__611 : ((ssing_6‹??_81›) ?_79[0;0] x_600)) ⇒
                    ⇑(__612 : hc⟨((queue_p_35) xs_599)⟩) ⇒ •)⟩ -o
             ?_80[0;0]
       with
      | Free_15, c_613 =>
        let* c_next_614 := ((send c_next_601) Free_15) in
        let* __615 := close c_next_614 in close c_613
      | (Enqueue_16 n_616), c_617 =>
        let* c_next_618 := ((send c_next_601) (Enqueue_16‹› n_616)) in
        ((node_worker_594) ?_81[0;0] x_600 c_next_618 c_617)
      | Dequeue_17, c_619 =>
        let* c_620 :=
          ((send c_619) (just_2‹??_82,??_83› ?_82[0;0] x_600))
        in let* c_621 := ((send c_620) c_next_601) in close c_621)))

#[program]
def empty_worker_40‹› :
  ((queue_ch_36) (nil_10‹??_97,??_98› ?_98[0;0])) -> IO unit_9
:=
  (fun empty_worker_623 :
    ((queue_ch_36) (nil_10‹??_87,??_88› ?_86[0;0])) -> IO unit_9
  | c_625 =>
    let* _626 := recv c_625 in
    (match _626 in ?_97[0;0] -o ?_96[0;0] with
    | (ex1_14 o_628 c_629) =>
      (match o_628, c_629 in
         ∀ (o0_630 : ?_87[0;0]) -o
           ch⟨(match o0_630 in ?_88[0;0] -o ?_89[0;0] with
                | Free_15 => •
                | (Enqueue_16 n_633) =>
                  ((queue_p_35)
                    (cons_11‹??_91,??_92›
                      ?_91[0;0] n_633 (nil_10‹??_89,??_90› ?_90[0;0])))
                | Dequeue_17 =>
                  ((queue_p_35) (nil_10‹??_93,??_94› ?_92[0;0])))⟩ -o
             ?_93[0;0]
       with
      | Free_15, c_634 => close c_634
      | (Enqueue_16 n_635), c_636 =>
        let* c0_637 :=
          fork
            (fun _638 :
              ((queue_hc_37) (nil_10‹??_95,??_96› ?_94[0;0])) -o
                IO unit_9
            | c0_640 => ((node_worker_39) ?_95[0;0] n_635 c0_640 c_636))
        in ((empty_worker_623) c0_637)
      | Dequeue_17, c_641 => ((empty_worker_623) c_641))))

#[program]
def q_empty_41‹› :
  unit_9 -> ((queue_38) (nil_10‹??_103,??_104› ?_101[0;0]))
:=
  (fun q_empty_643 :
    unit_9 -> ((queue_38) (nil_10‹??_99,??_100› ?_99[0;0]))
  | _645 =>
    fork
      (fun _646 :
        ((queue_ch_36) (nil_10‹??_101,??_102› ?_100[0;0])) -o IO unit_9
      | c_648 => ((empty_worker_40) c_648)))

#[program]
def q_free_42‹› :
  ∀ {xs_649 : ((llist_34‹??_106›) int)} ->
    ((queue_38) xs_649) -> IO unit_9
:=
  (fun q_free_651 :
    ∀ {xs_652 : ((llist_34‹??_105›) int)} ->
      ((queue_38) xs_652) -> IO unit_9
  | xs_654, q_655 =>
    let* q_656 := q_655 in
    let* q_657 := ((send q_656) Free_15) in close q_657)

#[program]
def q_enqueue_43‹› :
  ∀ {xs_658 : ((llist_34‹??_110›) int)} ->
    ∀ (n_659 : int) ->
      ((queue_38) xs_658) ->
        ((queue_38) ((rcons_24‹??_111,??_112›) ?_103[0;0] xs_658 n_659))
:=
  (fun q_enqueue_661 :
    ∀ {xs_662 : ((llist_34‹??_107›) int)} ->
      ∀ (n_663 : int) ->
        ((queue_38) xs_662) ->
          ((queue_38)
            ((rcons_24‹??_108,??_109›) ?_102[0;0] xs_662 n_663))
  | xs_665, n_666, q_667 =>
    let* q_668 := q_667 in
    let* q_669 := ((send q_668) (Enqueue_16‹› n_666)) in return q_669)

#[program]
def q_dequeue_44‹› :
  ∀ {x_670 : int} ->
    ∀ {xs_671 : ((llist_34‹??_121›) int)} ->
      ((queue_38) (cons_11‹??_122,??_123› ?_112[0;0] x_670 xs_671)) ->
        IO ((tensor_26‹??_125,??_126›)
             ((ssing_6‹??_124›) ?_113[0;0] x_670) ((queue_38) xs_671))
:=
  (fun q_dequeue_673 :
    ∀ {x_674 : int} ->
      ∀ {xs_675 : ((llist_34‹??_113›) int)} ->
        ((queue_38) (cons_11‹??_114,??_115› ?_104[0;0] x_674 xs_675)) ->
          IO ((tensor_26‹??_117,??_118›)
               ((ssing_6‹??_116›) ?_105[0;0] x_674) ((queue_38) xs_675))
  | x_677, xs_678, q_679 =>
    let* q_680 := q_679 in
    let* q_681 := ((send q_680) Dequeue_17) in
    let* _682 := recv q_681 in
    (match _682 in ?_111[0;0] -o ?_110[0;0] with
    | (ex1_14 n_684 q_685) =>
      let* _686 := recv q_685 in
      (match _686 in ?_109[0;0] -o ?_108[0;0] with
      | (ex1_14 q0_688 q_689) =>
        let* __690 := close q_689 in
        return (ex1_14‹??_119,??_120›
                 ?_106[0;0] ?_107[0;0] n_684 return q0_688))))

#[program]
def myqueue_45‹› : ?_114[0;0] := ((q_empty_41) tt_3‹??_127›)

#[program]
def myqueue_46‹› : ?_116[0;0] := ((q_enqueue_43) ?_115[0;0] 0 myqueue_45)

#[program]
def myqueue_47‹› : ?_118[0;0] := ((q_enqueue_43) ?_117[0;0] 1 myqueue_46)

#[program]
def myqueue_48‹› : ?_120[0;0] := ((q_enqueue_43) ?_119[0;0] 2 myqueue_47)

#[program]
def myqueue_49‹› : ?_122[0;0] := ((q_enqueue_43) ?_121[0;0] 3 myqueue_48)

#[program]
def myqueue_50‹› : ?_124[0;0] := ((q_enqueue_43) ?_123[0;0] 4 myqueue_49)

#[program]
def myqueue_51‹› : ?_126[0;0] := ((q_enqueue_43) ?_125[0;0] 5 myqueue_50)

#[program]
def myqueue_52‹› : ?_128[0;0] := ((q_enqueue_43) ?_127[0;0] 6 myqueue_51)

#[program]
def main_53‹› : IO unit_9 :=
  let* _691 := ((q_dequeue_44) ?_130[0;0] ?_129[0;0] myqueue_52) in
  (match _691 in ?_143[0;0] -o ?_142[0;0] with
  | (ex1_14 (just_2 x_693) myqueue_694) =>
    let* _695 := ((q_dequeue_44) ?_132[0;0] ?_131[0;0] myqueue_694) in
    (match _695 in ?_141[0;0] -o ?_140[0;0] with
    | (ex1_14 (just_2 y_697) myqueue_698) =>
      let* _699 := ((q_dequeue_44) ?_134[0;0] ?_133[0;0] myqueue_698) in
      (match _699 in ?_139[0;0] -o ?_138[0;0] with
      | (ex1_14 (just_2 z_701) myqueue_702) =>
        let* _703 := ((q_free_42) ?_135[0;0] myqueue_702) in
        (match _703 in ?_137[0;0] -o ?_136[0;0] with
        | tt_3 =>
          print
            (__cat__
              (__cat__
                (__cat__
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__ (__cat__ "x := " ((string_of_int_33) x_693))
                          "\n")
                        "y := ")
                      ((string_of_int_33) y_697))
                    "\n")
                  "z := ")
                ((string_of_int_33) z_701))
              "\n")))))

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_72893› :
  ∀ (A_72894 : Type‹s_72893›) -> A_72894 -> A_72894
:=
  (fun id_72896 : ∀ (A_72897 : Type‹s_72893›) -> A_72897 -> A_72897
  | A_72899, m_72900 => m_72900)

#[logical]
inductive eq_1‹s_72901› (A_72902 : Type‹s_72901›) (m_72903 : A_72902):
  A_72902 -> U
where
| refl_1 : (eq_1‹s_72901› A_72902 m_72903 m_72903)

#[program]
def rwl_2‹s_72905,r_72906› :
  ∀ {A_72907 : Type‹s_72905›} ->
    ∀ {m_72908 : A_72907} ->
      ∀ {n_72909 : A_72907} ->
        ∀ {B_72910 : A_72907 -> Type‹r_72906›} ->
          {(eq_1‹s_72905› A_72907 m_72908 n_72909)} ->
            ((B_72910) m_72908) -> ((B_72910) n_72909)
:=
  (fun rwl_72914 :
    ∀ {A_72915 : Type‹s_72905›} ->
      ∀ {m_72916 : A_72915} ->
        ∀ {n_72917 : A_72915} ->
          ∀ {B_72918 : A_72915 -> Type‹r_72906›} ->
            {(eq_1‹s_72905› A_72915 m_72916 n_72917)} ->
              ((B_72918) m_72916) -> ((B_72918) n_72917)
  | A_72922, m_72923, n_72924, B_72925, refl_1, __72926 => __72926)

#[program]
def rwr_3‹s_72927,r_72928› :
  ∀ {A_72929 : Type‹s_72927›} ->
    ∀ {m_72930 : A_72929} ->
      ∀ {n_72931 : A_72929} ->
        ∀ {B_72932 : A_72929 -> Type‹r_72928›} ->
          {(eq_1‹s_72927› A_72929 m_72930 n_72931)} ->
            ((B_72932) n_72931) -> ((B_72932) m_72930)
:=
  (fun rwr_72936 :
    ∀ {A_72937 : Type‹s_72927›} ->
      ∀ {m_72938 : A_72937} ->
        ∀ {n_72939 : A_72937} ->
          ∀ {B_72940 : A_72937 -> Type‹r_72928›} ->
            {(eq_1‹s_72927› A_72937 m_72938 n_72939)} ->
              ((B_72940) n_72939) -> ((B_72940) m_72938)
  | A_72944, m_72945, n_72946, B_72947, refl_1, __72948 => __72948)

#[logical]
def congr_4‹s_72949,r_72950,t_72951› :
  ∀ (A_72952 : Type‹s_72949›) ->
    ∀ (B_72953 : Type‹r_72950›) ->
      ∀ (m_72954 : A_72952) ->
        ∀ (n_72955 : A_72952) ->
          ∀ (f_72956 : forall‹t_72951›(__72957 : A_72952), B_72953) ->
            (eq_1‹s_72949› A_72952 m_72954 n_72955) ->
              (eq_1‹r_72950›
                B_72953 ((f_72956) m_72954) ((f_72956) n_72955))
:=
  (fun congr_72959 :
    ∀ (A_72960 : Type‹s_72949›) ->
      ∀ (B_72961 : Type‹r_72950›) ->
        ∀ (m_72962 : A_72960) ->
          ∀ (n_72963 : A_72960) ->
            ∀ (f_72964 :
              forall‹t_72951›(__72965 : A_72960), B_72961) ->
              (eq_1‹s_72949› A_72960 m_72962 n_72963) ->
                (eq_1‹r_72950›
                  B_72961 ((f_72964) m_72962) ((f_72964) n_72963))
  | A_72967, B_72968, m_72969, n_72970, f_72971, refl_1 =>
    (refl_1‹r_72950› B_72968 ((f_72971) n_72970)))

#[logical]
def axiom_K_5‹› :
  ∀ {A_72972 : U} ->
    ∀ {m_72973 : A_72972} ->
      ∀ (x_72974 : (eq_1‹U› A_72972 m_72973 m_72973)) ->
        (eq_1‹U›
          (eq_1‹U› A_72972 m_72973 m_72973) x_72974
          (refl_1‹U› A_72972 m_72973))
:=
  (fun axiom_K_72975 :
    ∀ {A_72976 : U} ->
      ∀ {m_72977 : A_72976} ->
        ∀ (x_72978 : (eq_1‹U› A_72976 m_72977 m_72977)) ->
          (eq_1‹U›
            (eq_1‹U› A_72976 m_72977 m_72977) x_72978
            (refl_1‹U› A_72976 m_72977))
  | A_72979, m_72980, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_72979 m_72980 m_72980) (refl_1‹U› A_72979 m_72980)))

#[program]
inductive sing_2‹s_72981,t_72982› (A_72983 : Type‹s_72981›):
  A_72983 -> Type‹t_72982›
where
| just_2 (m_72985 : A_72983) : (sing_2‹s_72981,t_72982› A_72983 m_72985)

#[logical]
def ssing_6‹s_72986› :
  ∀ (A_72987 : Type‹s_72986›) -> A_72987 -> Type‹s_72986›
:=
  (fun ssing_72989 :
    ∀ (A_72990 : Type‹s_72986›) -> A_72990 -> Type‹s_72986›
  | A_72992, m_72993 => (sing_2‹s_72986,s_72986› A_72992 m_72993))

#[program]
def sing_elim_7‹s_72994,t_72995› :
  ∀ {A_72996 : Type‹s_72994›} ->
    ∀ {x_72997 : A_72996} ->
      (sing_2‹s_72994,t_72995› A_72996 x_72997) -> A_72996
:=
  (fun sing_elim_72999 :
    ∀ {A_73000 : Type‹s_72994›} ->
      ∀ {x_73001 : A_73000} ->
        (sing_2‹s_72994,t_72995› A_73000 x_73001) -> A_73000
  | A_73003, x_73004, (just_2 m_73005) => m_73005)

#[logical]
def sing_uniq_8‹s_73006,t_73007› :
  ∀ (A_73008 : Type‹s_73006›) ->
    ∀ (x0_73009 : A_73008) ->
      ∀ (x_73010 : (sing_2‹s_73006,t_73007› A_73008 x0_73009)) ->
        (eq_1‹s_73006›
          A_73008 x0_73009
          ((sing_elim_7‹s_73006,t_73007›) A_73008 x0_73009 x_73010))
:=
  (fun sing_uniq_73011 :
    ∀ (A_73012 : Type‹s_73006›) ->
      ∀ (x0_73013 : A_73012) ->
        ∀ (x_73014 : (sing_2‹s_73006,t_73007› A_73012 x0_73013)) ->
          (eq_1‹s_73006›
            A_73012 x0_73013
            ((sing_elim_7‹s_73006,t_73007›) A_73012 x0_73013 x_73014))
  | A_73015, x0_73016, (just_2 m_73017) =>
    (refl_1‹s_73006› A_73015 m_73017))

#[program]
inductive base_3‹s_73018› : Type‹s_73018› where
| tt_3 : base_3‹s_73018›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_73019 : unit_9) -> (eq_1‹U› base_3‹U› x_73019 tt_3‹U›)
:=
  (fun unit_eta_73020 :
    ∀ (x_73021 : unit_9) -> (eq_1‹U› base_3‹U› x_73021 tt_3‹U›)
  | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›))

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  (fun not_73023 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4)

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun and_73027 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __73030 => false_5)

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun or_73033 : bool_4 -> bool_4 -> bool_4
  | true_4, __73036 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  (fun xor_73039 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5)

#[program]
def string_of_bool_15‹› : bool_4 -> string :=
  (fun string_of_bool_73043 : bool_4 -> string
  | true_4 => "true"
  | false_5 => "false")

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_73045 : nat_5) : nat_5

#[program]
def lte_16‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lte_73048 : nat_5 -> nat_5 -> bool_4
  | zero_6, __73051 => true_4
  | (succ_7 n_73052), zero_6 => false_5
  | (succ_7 n_73053), (succ_7 n_73054) => ((lte_73048) n_73053 n_73054))

#[program]
def lt_17‹› : nat_5 -> nat_5 -> bool_4 :=
  (fun lt_73057 : nat_5 -> nat_5 -> bool_4
  | x_73060, y_73061 => ((lte_16) (succ_7‹› x_73060) y_73061))

#[program]
def pred_18‹› : nat_5 -> nat_5 :=
  (fun pred_73063 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_73065) => n_73065)

#[program]
def add_19‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun add_73068 : nat_5 -> nat_5 -> nat_5
  | zero_6, __73071 => __73071
  | (succ_7 n_73072), __73073 => (succ_7‹› ((add_73068) n_73072 __73073)))

#[program]
def sub_20‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun sub_73076 : nat_5 -> nat_5 -> nat_5
  | __73079, zero_6 => __73079
  | __73080, (succ_7 n_73081) => ((sub_73076) ((pred_18) __73080) n_73081))

#[program]
def mul_21‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun mul_73084 : nat_5 -> nat_5 -> nat_5
  | zero_6, __73087 => zero_6
  | (succ_7 n_73088), __73089 =>
    ((add_19) __73089 ((mul_73084) n_73088 __73089)))

#[program]
def div_22‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun div_73092 : nat_5 -> nat_5 -> nat_5
  | x_73095, y_73096 =>
    (match ((lt_17) x_73095 y_73096) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_73098 :=
        (fun loop_73099 : nat_5 -> nat_5 -> nat_5
        | x_73102, y_73103 =>
          (match ((sub_20) x_73102 ((pred_18) y_73103)) in nat_5 -o nat_5
           with
          | zero_6 => zero_6
          | (succ_7 n_73105) => (succ_7‹› ((loop_73099) n_73105 y_73103))))
      in ((loop_73098) x_73095 y_73096)))

#[program]
def rem_23‹› : nat_5 -> nat_5 -> nat_5 :=
  (fun rem_73108 : nat_5 -> nat_5 -> nat_5
  | x_73111, y_73112 =>
    ((sub_20) x_73111 ((mul_21) ((div_22) x_73111 y_73112) y_73112)))

#[program]
inductive option_6‹s_73113› (A_73114 : Type‹s_73113›):
  Type‹s_73113›
where
| None_8 : (option_6‹s_73113› A_73114)
| Some_9 (m_73115 : A_73114) : (option_6‹s_73113› A_73114)

#[program]
inductive list_7‹s_73116,t_73117› (A_73118 : Type‹s_73116›):
  Type‹t_73117›
where
| nil_10 : (list_7‹s_73116,t_73117› A_73118)
| cons_11
    (hd_73119 : A_73118) (tl_73120 : (list_7‹s_73116,t_73117› A_73118))
    : (list_7‹s_73116,t_73117› A_73118)

#[program]
def rcons_24‹s_73121,t_73122› :
  ∀ {A_73123 : Type‹s_73121›} ->
    (list_7‹s_73121,t_73122› A_73123) -o
      A_73123 -o (list_7‹s_73121,t_73122› A_73123)
:=
  (fun rcons_73126 :
    ∀ {A_73127 : Type‹s_73121›} ->
      (list_7‹s_73121,t_73122› A_73127) -o
        A_73127 -o (list_7‹s_73121,t_73122› A_73127)
  | A_73130, nil_10, __73131 =>
    (cons_11‹s_73121,t_73122›
      A_73130 __73131 (nil_10‹s_73121,t_73122› A_73130))
  | A_73132, (cons_11 hd_73133 tl_73134), __73135 =>
    (cons_11‹s_73121,t_73122›
      A_73132 hd_73133 ((rcons_73126) A_73132 tl_73134 __73135)))

#[program]
def free_list_25‹s_73136,t_73137› :
  ∀ {A_73138 : Type‹s_73136›} ->
    A_73138 -> unit_9 -> (list_7‹s_73136,t_73137› A_73138) -> unit_9
:=
  (fun free_list_73142 :
    ∀ {A_73143 : Type‹s_73136›} ->
      A_73143 -> unit_9 -> (list_7‹s_73136,t_73137› A_73143) -> unit_9
  | A_73147, f_73148, nil_10 => tt_3‹U›
  | A_73149, f_73150, (cons_11 hd_73151 tl_73152) =>
    let __73153 := ((f_73150) hd_73151) in
    ((free_list_73142) A_73149 f_73150 tl_73152))

#[program]
inductive exists_8‹s_73154,r_73155› (A_73156 : Type‹s_73154›) (B_73157 : 
A_73156 -> Type‹r_73155›): L where
| ex_12
    (m_73159 : A_73156) {n_73160 : ((B_73157) m_73159)}
    : (exists_8‹s_73154,r_73155› A_73156 B_73157)

#[program]
inductive exists0_9‹s_73161,r_73162› (A_73163 : Type‹s_73161›) (B_73164 : 
A_73163 -> Type‹r_73162›): L where
| ex0_13
    {m_73166 : A_73163} (n_73167 : ((B_73164) m_73166))
    : (exists0_9‹s_73161,r_73162› A_73163 B_73164)

#[program]
inductive exists1_10‹s_73168,r_73169› (A_73170 : Type‹s_73168›) (B_73171 : 
A_73170 -> Type‹r_73169›): L where
| ex1_14
    (m_73173 : A_73170) (n_73174 : ((B_73171) m_73173))
    : (exists1_10‹s_73168,r_73169› A_73170 B_73171)

#[logical]
def tensor_26‹s_73175,r_73176› :
  Type‹s_73175› -> Type‹r_73176› -> L
:=
  (fun tensor_73179 : Type‹s_73175› -> Type‹r_73176› -> L
  | A_73182, B_73183 =>
    (exists1_10‹s_73175,r_73176›
      A_73182
      (fun _73184 : A_73182 -> Type‹r_73176›
      | __73186 => B_73183)))

#[program]
def pow_27‹› : int -> int -> int :=
  (fun pow_73189 : int -> int -> int
  | x_73192, y_73193 =>
    let loop_73194 :=
      (fun loop_73195 : int -> int -> int
      | acc_73198, y_73199 =>
        (match (__lte__ y_73199 0) in bool_4 -o int with
        | true_4 => acc_73198
        | false_5 =>
          ((loop_73195) (__mul__ x_73192 acc_73198) (__sub__ y_73199 1))))
    in ((loop_73194) 1 y_73193))

#[program]
def powm_28‹› : int -> int -> int -> int :=
  (fun powm_73204 : int -> int -> int -> int
  | x_73208, y_73209, m_73210 =>
    let loop_73211 :=
      (fun loop_73212 : int -> int -> int
      | acc_73215, y_73216 =>
        (match (__lte__ y_73216 0) in bool_4 -o int with
        | true_4 => acc_73215
        | false_5 =>
          ((loop_73212)
            (__mod__ (__mul__ x_73208 acc_73215) m_73210) (__sub__ y_73216 1))))
    in ((loop_73211) 1 y_73209))

#[program]
def ord_29‹› : char -> int :=
  (fun ord_73219 : char -> int
  | c_73221 => (__ord__ c_73221))

#[program]
def chr_30‹› : int -> char :=
  (fun chr_73223 : int -> char
  | i_73225 => (__chr__ i_73225))

#[program]
def str_31‹› : char -> string :=
  (fun str_73227 : char -> string
  | c_73229 => (__push__ "" c_73229))

#[program]
def strlen_32‹› : string -> int :=
  (fun strlen_73231 : string -> int
  | s_73233 => (__size__ s_73233))

#[program]
def string_of_int_33‹› : int -> string :=
  (fun string_of_int_73235 : int -> string
  | i_73237 =>
    let aux_73238 :=
      (fun aux_73239 : int -> string
      | i_73241 =>
        (match (__lte__ 10 i_73241) in bool_4 -o string with
        | true_4 =>
          let r_73243 := (__mod__ i_73241 10) in
          let i_73244 := (__div__ i_73241 10) in
          (__push__ ((aux_73239) i_73244)
            ((chr_30) (__add__ r_73243 ((ord_29) 0))))
        | false_5 => ((str_31) ((chr_30) (__add__ i_73241 ((ord_29) 0))))))
    in
    (match (__lte__ 0 i_73237) in bool_4 -o string with
    | true_4 => ((aux_73238) i_73237)
    | false_5 => (__cat__ "~" ((aux_73238) (__neg__ i_73237)))))

#[logical]
def llist_34‹s_73246› : Type‹s_73246› -> L :=
  (fun llist_73248 : Type‹s_73246› -> L
  | A_73250 => (list_7‹s_73246,L› A_73250))

#[program]
inductive opr_11‹› : L where
| Free_15 : opr_11
| Enqueue_16 (n_73251 : int) : opr_11
| Dequeue_17 : opr_11

#[logical]
def queue_p_35‹› : ((llist_34‹U›) int) -> proto :=
  (fun queue_p_73253 : ((llist_34‹U›) int) -> proto
  | xs_73255 =>
    ⇓(o_73256 : opr_11) ⇒
      (match o_73256 in opr_11 -o proto with
      | Free_15 => •
      | (Enqueue_16 n_73258) =>
        ((queue_p_73253) ((rcons_24‹U,L›) int xs_73255 n_73258))
      | Dequeue_17 =>
        (match xs_73255 in ((llist_34‹U›) int) -o proto with
        | nil_10 => ((queue_p_73253) xs_73255)
        | (cons_11 hd_73260 tl_73261) =>
          ⇑(__73262 : ((ssing_6‹U›) int hd_73260)) ⇒
            ⇑(__73263 : hc⟨((queue_p_73253) tl_73261)⟩) ⇒ •)))

#[logical]
def queue_ch_36‹› : ((llist_34‹U›) int) -> L :=
  (fun queue_ch_73265 : ((llist_34‹U›) int) -> L
  | xs_73267 => ch⟨((queue_p_35) xs_73267)⟩)

#[logical]
def queue_hc_37‹› : ((llist_34‹U›) int) -> L :=
  (fun queue_hc_73269 : ((llist_34‹U›) int) -> L
  | xs_73271 => hc⟨((queue_p_35) xs_73271)⟩)

#[logical]
def queue_38‹› : ((llist_34‹U›) int) -> L :=
  (fun queue_73273 : ((llist_34‹U›) int) -> L
  | xs_73275 => IO ((queue_hc_37) xs_73275))

#[program]
def node_worker_39‹› :
  ∀ {xs_73276 : ((llist_34‹U›) int)} ->
    ∀ (x_73277 : int) ->
      ((queue_hc_37) xs_73276) -o
        ((queue_ch_36) (cons_11‹U,L› int x_73277 xs_73276)) -o IO unit_9
:=
  (fun node_worker_73280 :
    ∀ {xs_73281 : ((llist_34‹U›) int)} ->
      ∀ (x_73282 : int) ->
        ((queue_hc_37) xs_73281) -o
          ((queue_ch_36) (cons_11‹U,L› int x_73282 xs_73281)) -o
            IO unit_9
  | xs_73285, x_73286, __73287, __73288 =>
    let* _73289 := recv __73288 in
    (match _73289 in
       (exists1_10‹L,L›
         opr_11
         (fun _73291 : opr_11 -> L
         | o_73293 =>
           ch⟨(match o_73293 in opr_11 -o proto with
                | Free_15 => •
                | (Enqueue_16 n_73295) =>
                  (((fun queue_p_73296 : ((llist_34‹U›) int) -> proto
                    | xs_73298 =>
                      ⇓(o_73299 : opr_11) ⇒
                        (match o_73299 in opr_11 -o proto with
                        | Free_15 => •
                        | (Enqueue_16 n_73301) =>
                          ((queue_p_73296)
                            ((rcons_24‹U,L›) int xs_73298 n_73301))
                        | Dequeue_17 =>
                          (match xs_73298 in ((llist_34‹U›) int) -o proto
                           with
                          | nil_10 => ((queue_p_73296) xs_73298)
                          | (cons_11 hd_73303 tl_73304) =>
                            ⇑(__73305 :
                              ((ssing_6‹U›) int hd_73303)) ⇒
                              ⇑(__73306 :
                                hc⟨((queue_p_73296) tl_73304)⟩) ⇒ •))))
                    ((rcons_24‹U,L›)
                      int (cons_11‹U,L› int x_73286 xs_73285) n_73295))
                | Dequeue_17 =>
                  (match (cons_11‹U,L› int x_73286 xs_73285) in
                     ((llist_34‹U›) int) -o proto
                   with
                  | nil_10 =>
                    (((fun queue_p_73308 : ((llist_34‹U›) int) -> proto
                      | xs_73310 =>
                        ⇓(o_73311 : opr_11) ⇒
                          (match o_73311 in opr_11 -o proto with
                          | Free_15 => •
                          | (Enqueue_16 n_73313) =>
                            ((queue_p_73308)
                              ((rcons_24‹U,L›) int xs_73310 n_73313))
                          | Dequeue_17 =>
                            (match xs_73310 in
                               ((llist_34‹U›) int) -o proto
                             with
                            | nil_10 => ((queue_p_73308) xs_73310)
                            | (cons_11 hd_73315 tl_73316) =>
                              ⇑(__73317 :
                                ((ssing_6‹U›) int hd_73315)) ⇒
                                ⇑(__73318 :
                                  hc⟨((queue_p_73308) tl_73316)⟩) ⇒ •))))
                      (cons_11‹U,L› int x_73286 xs_73285))
                  | (cons_11 hd_73319 tl_73320) =>
                    ⇑(__73321 : ((ssing_6‹U›) int hd_73319)) ⇒
                      ⇑(__73322 :
                        hc⟨(((fun queue_p_73323 :
                                 ((llist_34‹U›) int) -> proto
                               | xs_73325 =>
                                 ⇓(o_73326 : opr_11) ⇒
                                   (match o_73326 in opr_11 -o proto with
                                   | Free_15 => •
                                   | (Enqueue_16 n_73328) =>
                                     ((queue_p_73323)
                                       ((rcons_24‹U,L›)
                                         int xs_73325 n_73328))
                                   | Dequeue_17 =>
                                     (match xs_73325 in
                                        ((llist_34‹U›) int) -o proto
                                      with
                                     | nil_10 => ((queue_p_73323) xs_73325)
                                     | (cons_11 hd_73330 tl_73331) =>
                                       ⇑(__73332 :
                                         ((ssing_6‹U›) int hd_73330)) ⇒
                                         ⇑(__73333 :
                                           hc⟨((queue_p_73323) tl_73331)⟩) ⇒
                                           •))))
                               tl_73320)⟩) ⇒
                        •))⟩)) -o
         IO base_3‹U›
     with
    | (ex1_14 m_73334 n_73335) =>
      (match m_73334, n_73335 in
         ∀ (o0_73336 : opr_11) -o
           ch⟨(match o0_73336 in opr_11 -o proto with
                | Free_15 => •
                | (Enqueue_16 n_73339) =>
                  ((queue_p_35)
                    ((rcons_24‹U,L›)
                      int (cons_11‹U,L› int x_73286 xs_73285) n_73339))
                | Dequeue_17 =>
                  ⇑(__73340 : ((ssing_6‹U›) int x_73286)) ⇒
                    ⇑(__73341 : hc⟨((queue_p_35) xs_73285)⟩) ⇒ •)⟩ -o
             IO base_3‹U›
       with
      | Free_15, __73342 =>
        let* c_next_73343 := ((send __73287) Free_15) in
        let* __73344 := close c_next_73343 in close __73342
      | (Enqueue_16 n_73345), __73346 =>
        let* c_next_73347 := ((send __73287) (Enqueue_16‹› n_73345)) in
        ((node_worker_73280)
          ((rcons_24‹U,L›) int xs_73285 n_73345) x_73286 c_next_73347
          __73346)
      | Dequeue_17, __73348 =>
        let* c_73349 := ((send __73348) (just_2‹U,U› int x_73286)) in
        let* c_73350 := ((send c_73349) __73287) in close c_73350)))

#[program]
def empty_worker_40‹› :
  ((queue_ch_36) (nil_10‹U,L› int)) -> IO unit_9
:=
  (fun empty_worker_73352 :
    ((queue_ch_36) (nil_10‹U,L› int)) -> IO unit_9
  | c_73354 =>
    let* _73355 := recv c_73354 in
    (match _73355 in
       (exists1_10‹L,L›
         opr_11
         (fun _73357 : opr_11 -> L
         | o_73359 =>
           ch⟨(match o_73359 in opr_11 -o proto with
                | Free_15 => •
                | (Enqueue_16 n_73361) =>
                  (((fun queue_p_73362 : ((llist_34‹U›) int) -> proto
                    | xs_73364 =>
                      ⇓(o_73365 : opr_11) ⇒
                        (match o_73365 in opr_11 -o proto with
                        | Free_15 => •
                        | (Enqueue_16 n_73367) =>
                          ((queue_p_73362)
                            ((rcons_24‹U,L›) int xs_73364 n_73367))
                        | Dequeue_17 =>
                          (match xs_73364 in ((llist_34‹U›) int) -o proto
                           with
                          | nil_10 => ((queue_p_73362) xs_73364)
                          | (cons_11 hd_73369 tl_73370) =>
                            ⇑(__73371 :
                              ((ssing_6‹U›) int hd_73369)) ⇒
                              ⇑(__73372 :
                                hc⟨((queue_p_73362) tl_73370)⟩) ⇒ •))))
                    ((rcons_24‹U,L›) int (nil_10‹U,L› int) n_73361))
                | Dequeue_17 =>
                  (match (nil_10‹U,L› int) in
                     ((llist_34‹U›) int) -o proto
                   with
                  | nil_10 =>
                    (((fun queue_p_73374 : ((llist_34‹U›) int) -> proto
                      | xs_73376 =>
                        ⇓(o_73377 : opr_11) ⇒
                          (match o_73377 in opr_11 -o proto with
                          | Free_15 => •
                          | (Enqueue_16 n_73379) =>
                            ((queue_p_73374)
                              ((rcons_24‹U,L›) int xs_73376 n_73379))
                          | Dequeue_17 =>
                            (match xs_73376 in
                               ((llist_34‹U›) int) -o proto
                             with
                            | nil_10 => ((queue_p_73374) xs_73376)
                            | (cons_11 hd_73381 tl_73382) =>
                              ⇑(__73383 :
                                ((ssing_6‹U›) int hd_73381)) ⇒
                                ⇑(__73384 :
                                  hc⟨((queue_p_73374) tl_73382)⟩) ⇒ •))))
                      (nil_10‹U,L› int))
                  | (cons_11 hd_73385 tl_73386) =>
                    ⇑(__73387 : ((ssing_6‹U›) int hd_73385)) ⇒
                      ⇑(__73388 :
                        hc⟨(((fun queue_p_73389 :
                                 ((llist_34‹U›) int) -> proto
                               | xs_73391 =>
                                 ⇓(o_73392 : opr_11) ⇒
                                   (match o_73392 in opr_11 -o proto with
                                   | Free_15 => •
                                   | (Enqueue_16 n_73394) =>
                                     ((queue_p_73389)
                                       ((rcons_24‹U,L›)
                                         int xs_73391 n_73394))
                                   | Dequeue_17 =>
                                     (match xs_73391 in
                                        ((llist_34‹U›) int) -o proto
                                      with
                                     | nil_10 => ((queue_p_73389) xs_73391)
                                     | (cons_11 hd_73396 tl_73397) =>
                                       ⇑(__73398 :
                                         ((ssing_6‹U›) int hd_73396)) ⇒
                                         ⇑(__73399 :
                                           hc⟨((queue_p_73389) tl_73397)⟩) ⇒
                                           •))))
                               tl_73386)⟩) ⇒
                        •))⟩)) -o
         IO base_3‹U›
     with
    | (ex1_14 m_73400 n_73401) =>
      (match m_73400, n_73401 in
         ∀ (o0_73402 : opr_11) -o
           ch⟨(match o0_73402 in opr_11 -o proto with
                | Free_15 => •
                | (Enqueue_16 n_73405) =>
                  ((queue_p_35)
                    (cons_11‹U,L› int n_73405 (nil_10‹U,L› int)))
                | Dequeue_17 => ((queue_p_35) (nil_10‹U,L› int)))⟩ -o
             IO base_3‹U›
       with
      | Free_15, __73406 => close __73406
      | (Enqueue_16 n_73407), __73408 =>
        let* c0_73409 :=
          fork
            (fun _73410 : ((queue_hc_37) (nil_10‹U,L› int)) -o IO unit_9
            | _73412 =>
              ((node_worker_39) (nil_10‹U,L› int) n_73407 _73412 __73408))
        in ((empty_worker_73352) c0_73409)
      | Dequeue_17, __73413 => ((empty_worker_73352) __73413))))

#[program]
def q_empty_41‹› : unit_9 -> ((queue_38) (nil_10‹U,L› int)) :=
  (fun q_empty_73415 : unit_9 -> ((queue_38) (nil_10‹U,L› int))
  | __73417 =>
    fork
      (fun _73418 : ((queue_ch_36) (nil_10‹U,L› int)) -o IO unit_9
      | _73420 => ((empty_worker_40) _73420)))

#[program]
def q_free_42‹› :
  ∀ {xs_73421 : ((llist_34‹U›) int)} ->
    ((queue_38) xs_73421) -> IO unit_9
:=
  (fun q_free_73423 :
    ∀ {xs_73424 : ((llist_34‹U›) int)} ->
      ((queue_38) xs_73424) -> IO unit_9
  | xs_73426, q_73427 =>
    let* q_73428 := q_73427 in
    let* q_73429 := ((send q_73428) Free_15) in close q_73429)

#[program]
def q_enqueue_43‹› :
  ∀ {xs_73430 : ((llist_34‹U›) int)} ->
    ∀ (n_73431 : int) ->
      ((queue_38) xs_73430) ->
        ((queue_38) ((rcons_24‹U,L›) int xs_73430 n_73431))
:=
  (fun q_enqueue_73433 :
    ∀ {xs_73434 : ((llist_34‹U›) int)} ->
      ∀ (n_73435 : int) ->
        ((queue_38) xs_73434) ->
          ((queue_38) ((rcons_24‹U,L›) int xs_73434 n_73435))
  | xs_73437, n_73438, q_73439 =>
    let* q_73440 := q_73439 in
    let* q_73441 := ((send q_73440) (Enqueue_16‹› n_73438)) in
    return q_73441)

#[program]
def q_dequeue_44‹› :
  ∀ {x_73442 : int} ->
    ∀ {xs_73443 : ((llist_34‹U›) int)} ->
      ((queue_38) (cons_11‹U,L› int x_73442 xs_73443)) ->
        IO ((tensor_26‹U,L›)
             ((ssing_6‹U›) int x_73442) ((queue_38) xs_73443))
:=
  (fun q_dequeue_73445 :
    ∀ {x_73446 : int} ->
      ∀ {xs_73447 : ((llist_34‹U›) int)} ->
        ((queue_38) (cons_11‹U,L› int x_73446 xs_73447)) ->
          IO ((tensor_26‹U,L›)
               ((ssing_6‹U›) int x_73446) ((queue_38) xs_73447))
  | x_73449, xs_73450, q_73451 =>
    let* q_73452 := q_73451 in
    let* q_73453 := ((send q_73452) Dequeue_17) in
    let* _73454 := recv q_73453 in
    (match _73454 in
       (exists1_10‹U,L›
         ((ssing_6‹U›) int x_73449)
         (fun _73456 : ((ssing_6‹U›) int x_73449) -> L
         | __73458 =>
           hc⟨⇑(__73459 :
                  hc⟨(((fun queue_p_73460 :
                           ((llist_34‹U›) int) -> proto
                         | xs_73462 =>
                           ⇓(o_73463 : opr_11) ⇒
                             (match o_73463 in opr_11 -o proto with
                             | Free_15 => •
                             | (Enqueue_16 n_73465) =>
                               ((queue_p_73460)
                                 ((rcons_24‹U,L›) int xs_73462 n_73465))
                             | Dequeue_17 =>
                               (match xs_73462 in
                                  ((llist_34‹U›) int) -o proto
                                with
                               | nil_10 => ((queue_p_73460) xs_73462)
                               | (cons_11 hd_73467 tl_73468) =>
                                 ⇑(__73469 :
                                   ((ssing_6‹U›) int hd_73467)) ⇒
                                   ⇑(__73470 :
                                     hc⟨((queue_p_73460) tl_73468)⟩) ⇒
                                     •))))
                         xs_73450)⟩) ⇒
                  •⟩)) -o
         IO (exists1_10‹U,L›
              ((ssing_6‹U›) int x_73449)
              (fun _73471 : ((ssing_6‹U›) int x_73449) -> L
              | __73473 => ((queue_38) xs_73450)))
     with
    | (ex1_14 m_73474 n_73475) =>
      let* _73476 := recv n_73475 in
      (match _73476 in
         (exists1_10‹L,L›
           hc⟨(((fun queue_p_73478 : ((llist_34‹U›) int) -> proto
                  | xs_73480 =>
                    ⇓(o_73481 : opr_11) ⇒
                      (match o_73481 in opr_11 -o proto with
                      | Free_15 => •
                      | (Enqueue_16 n_73483) =>
                        ((queue_p_73478)
                          ((rcons_24‹U,L›) int xs_73480 n_73483))
                      | Dequeue_17 =>
                        (match xs_73480 in ((llist_34‹U›) int) -o proto
                         with
                        | nil_10 => ((queue_p_73478) xs_73480)
                        | (cons_11 hd_73485 tl_73486) =>
                          ⇑(__73487 : ((ssing_6‹U›) int hd_73485)) ⇒
                            ⇑(__73488 :
                              hc⟨((queue_p_73478) tl_73486)⟩) ⇒ •))))
                  xs_73450)⟩
           (fun _73489 :
             hc⟨(((fun queue_p_73491 : ((llist_34‹U›) int) -> proto
                    | xs_73493 =>
                      ⇓(o_73494 : opr_11) ⇒
                        (match o_73494 in opr_11 -o proto with
                        | Free_15 => •
                        | (Enqueue_16 n_73496) =>
                          ((queue_p_73491)
                            ((rcons_24‹U,L›) int xs_73493 n_73496))
                        | Dequeue_17 =>
                          (match xs_73493 in ((llist_34‹U›) int) -o proto
                           with
                          | nil_10 => ((queue_p_73491) xs_73493)
                          | (cons_11 hd_73498 tl_73499) =>
                            ⇑(__73500 :
                              ((ssing_6‹U›) int hd_73498)) ⇒
                              ⇑(__73501 :
                                hc⟨((queue_p_73491) tl_73499)⟩) ⇒ •))))
                    xs_73450)⟩ ->
               L
           | __73502 => hc⟨•⟩)) -o
           IO (exists1_10‹U,L›
                ((ssing_6‹U›) int x_73449)
                (fun _73503 : ((ssing_6‹U›) int x_73449) -> L
                | __73505 => ((queue_38) xs_73450)))
       with
      | (ex1_14 m_73506 n_73507) =>
        let* __73508 := close n_73507 in
        return (ex1_14‹U,L›
                 ((ssing_6‹U›) int x_73449)
                 (fun _73509 : ((ssing_6‹U›) int x_73449) -> L
                 | __73511 => ((queue_38) xs_73450)) m_73474 return m_73506))))

#[program]
def myqueue_45‹› : ((queue_38) (nil_10‹U,L› int)) :=
  ((q_empty_41) tt_3‹U›)

#[program]
def myqueue_46‹› :
  ((queue_38) ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0))
:= ((q_enqueue_43) (nil_10‹U,L› int) 0 myqueue_45)

#[program]
def myqueue_47‹› :
  ((queue_38)
    ((rcons_24‹U,L›)
      int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1))
:=
  ((q_enqueue_43)
    ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1 myqueue_46)

#[program]
def myqueue_48‹› :
  ((queue_38)
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
      2))
:=
  ((q_enqueue_43)
    ((rcons_24‹U,L›)
      int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
    2 myqueue_47)

#[program]
def myqueue_49‹› :
  ((queue_38)
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int
        ((rcons_24‹U,L›)
          int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
        2)
      3))
:=
  ((q_enqueue_43)
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
      2)
    3 myqueue_48)

#[program]
def myqueue_50‹› :
  ((queue_38)
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int
        ((rcons_24‹U,L›)
          int
          ((rcons_24‹U,L›)
            int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
          2)
        3)
      4))
:=
  ((q_enqueue_43)
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int
        ((rcons_24‹U,L›)
          int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
        2)
      3)
    4 myqueue_49)

#[program]
def myqueue_51‹› :
  ((queue_38)
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int
        ((rcons_24‹U,L›)
          int
          ((rcons_24‹U,L›)
            int
            ((rcons_24‹U,L›)
              int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
            2)
          3)
        4)
      5))
:=
  ((q_enqueue_43)
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int
        ((rcons_24‹U,L›)
          int
          ((rcons_24‹U,L›)
            int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
          2)
        3)
      4)
    5 myqueue_50)

#[program]
def myqueue_52‹› :
  ((queue_38)
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int
        ((rcons_24‹U,L›)
          int
          ((rcons_24‹U,L›)
            int
            ((rcons_24‹U,L›)
              int
              ((rcons_24‹U,L›)
                int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
              2)
            3)
          4)
        5)
      6))
:=
  ((q_enqueue_43)
    ((rcons_24‹U,L›)
      int
      ((rcons_24‹U,L›)
        int
        ((rcons_24‹U,L›)
          int
          ((rcons_24‹U,L›)
            int
            ((rcons_24‹U,L›)
              int ((rcons_24‹U,L›) int (nil_10‹U,L› int) 0) 1)
            2)
          3)
        4)
      5)
    6 myqueue_51)

#[program]
def main_53‹› : IO unit_9 :=
  let* _73512 :=
    ((q_dequeue_44)
      0
      (((fun rcons_73513 :
          ∀ {A_73514 : U} ->
            (list_7‹U,L› A_73514) -o A_73514 -o (list_7‹U,L› A_73514)
        | A_73517, nil_10, __73518 =>
          (cons_11‹U,L› A_73517 __73518 (nil_10‹U,L› A_73517))
        | A_73519, (cons_11 hd_73520 tl_73521), __73522 =>
          (cons_11‹U,L›
            A_73519 hd_73520 ((rcons_73513) A_73519 tl_73521 __73522))))
        int
        (((fun rcons_73523 :
            ∀ {A_73524 : U} ->
              (list_7‹U,L› A_73524) -o
                A_73524 -o (list_7‹U,L› A_73524)
          | A_73527, nil_10, __73528 =>
            (cons_11‹U,L› A_73527 __73528 (nil_10‹U,L› A_73527))
          | A_73529, (cons_11 hd_73530 tl_73531), __73532 =>
            (cons_11‹U,L›
              A_73529 hd_73530 ((rcons_73523) A_73529 tl_73531 __73532))))
          int
          (((fun rcons_73533 :
              ∀ {A_73534 : U} ->
                (list_7‹U,L› A_73534) -o
                  A_73534 -o (list_7‹U,L› A_73534)
            | A_73537, nil_10, __73538 =>
              (cons_11‹U,L› A_73537 __73538 (nil_10‹U,L› A_73537))
            | A_73539, (cons_11 hd_73540 tl_73541), __73542 =>
              (cons_11‹U,L›
                A_73539 hd_73540 ((rcons_73533) A_73539 tl_73541 __73542))))
            int
            (((fun rcons_73543 :
                ∀ {A_73544 : U} ->
                  (list_7‹U,L› A_73544) -o
                    A_73544 -o (list_7‹U,L› A_73544)
              | A_73547, nil_10, __73548 =>
                (cons_11‹U,L› A_73547 __73548 (nil_10‹U,L› A_73547))
              | A_73549, (cons_11 hd_73550 tl_73551), __73552 =>
                (cons_11‹U,L›
                  A_73549 hd_73550 ((rcons_73543) A_73549 tl_73551 __73552))))
              int
              (((fun rcons_73553 :
                  ∀ {A_73554 : U} ->
                    (list_7‹U,L› A_73554) -o
                      A_73554 -o (list_7‹U,L› A_73554)
                | A_73557, nil_10, __73558 =>
                  (cons_11‹U,L›
                    A_73557 __73558 (nil_10‹U,L› A_73557))
                | A_73559, (cons_11 hd_73560 tl_73561), __73562 =>
                  (cons_11‹U,L›
                    A_73559 hd_73560 ((rcons_73553) A_73559 tl_73561 __73562))))
                int
                (((fun rcons_73563 :
                    ∀ {A_73564 : U} ->
                      (list_7‹U,L› A_73564) -o
                        A_73564 -o (list_7‹U,L› A_73564)
                  | A_73567, nil_10, __73568 =>
                    (cons_11‹U,L›
                      A_73567 __73568 (nil_10‹U,L› A_73567))
                  | A_73569, (cons_11 hd_73570 tl_73571), __73572 =>
                    (cons_11‹U,L›
                      A_73569 hd_73570
                      ((rcons_73563) A_73569 tl_73571 __73572))))
                  int (nil_10‹U,L› int) 1)
                2)
              3)
            4)
          5)
        6)
      myqueue_52)
  in
  (match _73512 in
     ((tensor_26‹U,L›)
       ((ssing_6‹U›) int 0)
       ((queue_38)
         (((fun rcons_73574 :
             ∀ {A_73575 : U} ->
               (list_7‹U,L› A_73575) -o
                 A_73575 -o (list_7‹U,L› A_73575)
           | A_73578, nil_10, __73579 =>
             (cons_11‹U,L› A_73578 __73579 (nil_10‹U,L› A_73578))
           | A_73580, (cons_11 hd_73581 tl_73582), __73583 =>
             (cons_11‹U,L›
               A_73580 hd_73581 ((rcons_73574) A_73580 tl_73582 __73583))))
           int
           (((fun rcons_73584 :
               ∀ {A_73585 : U} ->
                 (list_7‹U,L› A_73585) -o
                   A_73585 -o (list_7‹U,L› A_73585)
             | A_73588, nil_10, __73589 =>
               (cons_11‹U,L› A_73588 __73589 (nil_10‹U,L› A_73588))
             | A_73590, (cons_11 hd_73591 tl_73592), __73593 =>
               (cons_11‹U,L›
                 A_73590 hd_73591 ((rcons_73584) A_73590 tl_73592 __73593))))
             int
             (((fun rcons_73594 :
                 ∀ {A_73595 : U} ->
                   (list_7‹U,L› A_73595) -o
                     A_73595 -o (list_7‹U,L› A_73595)
               | A_73598, nil_10, __73599 =>
                 (cons_11‹U,L› A_73598 __73599 (nil_10‹U,L› A_73598))
               | A_73600, (cons_11 hd_73601 tl_73602), __73603 =>
                 (cons_11‹U,L›
                   A_73600 hd_73601 ((rcons_73594) A_73600 tl_73602 __73603))))
               int
               (((fun rcons_73604 :
                   ∀ {A_73605 : U} ->
                     (list_7‹U,L› A_73605) -o
                       A_73605 -o (list_7‹U,L› A_73605)
                 | A_73608, nil_10, __73609 =>
                   (cons_11‹U,L›
                     A_73608 __73609 (nil_10‹U,L› A_73608))
                 | A_73610, (cons_11 hd_73611 tl_73612), __73613 =>
                   (cons_11‹U,L›
                     A_73610 hd_73611
                     ((rcons_73604) A_73610 tl_73612 __73613))))
                 int
                 (((fun rcons_73614 :
                     ∀ {A_73615 : U} ->
                       (list_7‹U,L› A_73615) -o
                         A_73615 -o (list_7‹U,L› A_73615)
                   | A_73618, nil_10, __73619 =>
                     (cons_11‹U,L›
                       A_73618 __73619 (nil_10‹U,L› A_73618))
                   | A_73620, (cons_11 hd_73621 tl_73622), __73623 =>
                     (cons_11‹U,L›
                       A_73620 hd_73621
                       ((rcons_73614) A_73620 tl_73622 __73623))))
                   int
                   (((fun rcons_73624 :
                       ∀ {A_73625 : U} ->
                         (list_7‹U,L› A_73625) -o
                           A_73625 -o (list_7‹U,L› A_73625)
                     | A_73628, nil_10, __73629 =>
                       (cons_11‹U,L›
                         A_73628 __73629 (nil_10‹U,L› A_73628))
                     | A_73630, (cons_11 hd_73631 tl_73632), __73633 =>
                       (cons_11‹U,L›
                         A_73630 hd_73631
                         ((rcons_73624) A_73630 tl_73632 __73633))))
                     int (nil_10‹U,L› int) 1)
                   2)
                 3)
               4)
             5)
           6))) -o
       IO base_3‹U›
   with
  | (ex1_14 (just_2 m_73634) n_73635) =>
    let* _73636 :=
      ((q_dequeue_44)
        1
        (((fun rcons_73637 :
            ∀ {A_73638 : U} ->
              (list_7‹U,L› A_73638) -o
                A_73638 -o (list_7‹U,L› A_73638)
          | A_73641, nil_10, __73642 =>
            (cons_11‹U,L› A_73641 __73642 (nil_10‹U,L› A_73641))
          | A_73643, (cons_11 hd_73644 tl_73645), __73646 =>
            (cons_11‹U,L›
              A_73643 hd_73644 ((rcons_73637) A_73643 tl_73645 __73646))))
          int
          (((fun rcons_73647 :
              ∀ {A_73648 : U} ->
                (list_7‹U,L› A_73648) -o
                  A_73648 -o (list_7‹U,L› A_73648)
            | A_73651, nil_10, __73652 =>
              (cons_11‹U,L› A_73651 __73652 (nil_10‹U,L› A_73651))
            | A_73653, (cons_11 hd_73654 tl_73655), __73656 =>
              (cons_11‹U,L›
                A_73653 hd_73654 ((rcons_73647) A_73653 tl_73655 __73656))))
            int
            (((fun rcons_73657 :
                ∀ {A_73658 : U} ->
                  (list_7‹U,L› A_73658) -o
                    A_73658 -o (list_7‹U,L› A_73658)
              | A_73661, nil_10, __73662 =>
                (cons_11‹U,L› A_73661 __73662 (nil_10‹U,L› A_73661))
              | A_73663, (cons_11 hd_73664 tl_73665), __73666 =>
                (cons_11‹U,L›
                  A_73663 hd_73664 ((rcons_73657) A_73663 tl_73665 __73666))))
              int
              (((fun rcons_73667 :
                  ∀ {A_73668 : U} ->
                    (list_7‹U,L› A_73668) -o
                      A_73668 -o (list_7‹U,L› A_73668)
                | A_73671, nil_10, __73672 =>
                  (cons_11‹U,L›
                    A_73671 __73672 (nil_10‹U,L› A_73671))
                | A_73673, (cons_11 hd_73674 tl_73675), __73676 =>
                  (cons_11‹U,L›
                    A_73673 hd_73674 ((rcons_73667) A_73673 tl_73675 __73676))))
                int
                (((fun rcons_73677 :
                    ∀ {A_73678 : U} ->
                      (list_7‹U,L› A_73678) -o
                        A_73678 -o (list_7‹U,L› A_73678)
                  | A_73681, nil_10, __73682 =>
                    (cons_11‹U,L›
                      A_73681 __73682 (nil_10‹U,L› A_73681))
                  | A_73683, (cons_11 hd_73684 tl_73685), __73686 =>
                    (cons_11‹U,L›
                      A_73683 hd_73684
                      ((rcons_73677) A_73683 tl_73685 __73686))))
                  int (nil_10‹U,L› int) 2)
                3)
              4)
            5)
          6)
        n_73635)
    in
    (match _73636 in
       ((tensor_26‹U,L›)
         ((ssing_6‹U›) int 1)
         ((queue_38)
           (((fun rcons_73688 :
               ∀ {A_73689 : U} ->
                 (list_7‹U,L› A_73689) -o
                   A_73689 -o (list_7‹U,L› A_73689)
             | A_73692, nil_10, __73693 =>
               (cons_11‹U,L› A_73692 __73693 (nil_10‹U,L› A_73692))
             | A_73694, (cons_11 hd_73695 tl_73696), __73697 =>
               (cons_11‹U,L›
                 A_73694 hd_73695 ((rcons_73688) A_73694 tl_73696 __73697))))
             int
             (((fun rcons_73698 :
                 ∀ {A_73699 : U} ->
                   (list_7‹U,L› A_73699) -o
                     A_73699 -o (list_7‹U,L› A_73699)
               | A_73702, nil_10, __73703 =>
                 (cons_11‹U,L› A_73702 __73703 (nil_10‹U,L› A_73702))
               | A_73704, (cons_11 hd_73705 tl_73706), __73707 =>
                 (cons_11‹U,L›
                   A_73704 hd_73705 ((rcons_73698) A_73704 tl_73706 __73707))))
               int
               (((fun rcons_73708 :
                   ∀ {A_73709 : U} ->
                     (list_7‹U,L› A_73709) -o
                       A_73709 -o (list_7‹U,L› A_73709)
                 | A_73712, nil_10, __73713 =>
                   (cons_11‹U,L›
                     A_73712 __73713 (nil_10‹U,L› A_73712))
                 | A_73714, (cons_11 hd_73715 tl_73716), __73717 =>
                   (cons_11‹U,L›
                     A_73714 hd_73715
                     ((rcons_73708) A_73714 tl_73716 __73717))))
                 int
                 (((fun rcons_73718 :
                     ∀ {A_73719 : U} ->
                       (list_7‹U,L› A_73719) -o
                         A_73719 -o (list_7‹U,L› A_73719)
                   | A_73722, nil_10, __73723 =>
                     (cons_11‹U,L›
                       A_73722 __73723 (nil_10‹U,L› A_73722))
                   | A_73724, (cons_11 hd_73725 tl_73726), __73727 =>
                     (cons_11‹U,L›
                       A_73724 hd_73725
                       ((rcons_73718) A_73724 tl_73726 __73727))))
                   int
                   (((fun rcons_73728 :
                       ∀ {A_73729 : U} ->
                         (list_7‹U,L› A_73729) -o
                           A_73729 -o (list_7‹U,L› A_73729)
                     | A_73732, nil_10, __73733 =>
                       (cons_11‹U,L›
                         A_73732 __73733 (nil_10‹U,L› A_73732))
                     | A_73734, (cons_11 hd_73735 tl_73736), __73737 =>
                       (cons_11‹U,L›
                         A_73734 hd_73735
                         ((rcons_73728) A_73734 tl_73736 __73737))))
                     int (nil_10‹U,L› int) 2)
                   3)
                 4)
               5)
             6))) -o
         IO base_3‹U›
     with
    | (ex1_14 (just_2 m_73738) n_73739) =>
      let* _73740 :=
        ((q_dequeue_44)
          2
          (((fun rcons_73741 :
              ∀ {A_73742 : U} ->
                (list_7‹U,L› A_73742) -o
                  A_73742 -o (list_7‹U,L› A_73742)
            | A_73745, nil_10, __73746 =>
              (cons_11‹U,L› A_73745 __73746 (nil_10‹U,L› A_73745))
            | A_73747, (cons_11 hd_73748 tl_73749), __73750 =>
              (cons_11‹U,L›
                A_73747 hd_73748 ((rcons_73741) A_73747 tl_73749 __73750))))
            int
            (((fun rcons_73751 :
                ∀ {A_73752 : U} ->
                  (list_7‹U,L› A_73752) -o
                    A_73752 -o (list_7‹U,L› A_73752)
              | A_73755, nil_10, __73756 =>
                (cons_11‹U,L› A_73755 __73756 (nil_10‹U,L› A_73755))
              | A_73757, (cons_11 hd_73758 tl_73759), __73760 =>
                (cons_11‹U,L›
                  A_73757 hd_73758 ((rcons_73751) A_73757 tl_73759 __73760))))
              int
              (((fun rcons_73761 :
                  ∀ {A_73762 : U} ->
                    (list_7‹U,L› A_73762) -o
                      A_73762 -o (list_7‹U,L› A_73762)
                | A_73765, nil_10, __73766 =>
                  (cons_11‹U,L›
                    A_73765 __73766 (nil_10‹U,L› A_73765))
                | A_73767, (cons_11 hd_73768 tl_73769), __73770 =>
                  (cons_11‹U,L›
                    A_73767 hd_73768 ((rcons_73761) A_73767 tl_73769 __73770))))
                int
                (((fun rcons_73771 :
                    ∀ {A_73772 : U} ->
                      (list_7‹U,L› A_73772) -o
                        A_73772 -o (list_7‹U,L› A_73772)
                  | A_73775, nil_10, __73776 =>
                    (cons_11‹U,L›
                      A_73775 __73776 (nil_10‹U,L› A_73775))
                  | A_73777, (cons_11 hd_73778 tl_73779), __73780 =>
                    (cons_11‹U,L›
                      A_73777 hd_73778
                      ((rcons_73771) A_73777 tl_73779 __73780))))
                  int (nil_10‹U,L› int) 3)
                4)
              5)
            6)
          n_73739)
      in
      (match _73740 in
         ((tensor_26‹U,L›)
           ((ssing_6‹U›) int 2)
           ((queue_38)
             (((fun rcons_73782 :
                 ∀ {A_73783 : U} ->
                   (list_7‹U,L› A_73783) -o
                     A_73783 -o (list_7‹U,L› A_73783)
               | A_73786, nil_10, __73787 =>
                 (cons_11‹U,L› A_73786 __73787 (nil_10‹U,L› A_73786))
               | A_73788, (cons_11 hd_73789 tl_73790), __73791 =>
                 (cons_11‹U,L›
                   A_73788 hd_73789 ((rcons_73782) A_73788 tl_73790 __73791))))
               int
               (((fun rcons_73792 :
                   ∀ {A_73793 : U} ->
                     (list_7‹U,L› A_73793) -o
                       A_73793 -o (list_7‹U,L› A_73793)
                 | A_73796, nil_10, __73797 =>
                   (cons_11‹U,L›
                     A_73796 __73797 (nil_10‹U,L› A_73796))
                 | A_73798, (cons_11 hd_73799 tl_73800), __73801 =>
                   (cons_11‹U,L›
                     A_73798 hd_73799
                     ((rcons_73792) A_73798 tl_73800 __73801))))
                 int
                 (((fun rcons_73802 :
                     ∀ {A_73803 : U} ->
                       (list_7‹U,L› A_73803) -o
                         A_73803 -o (list_7‹U,L› A_73803)
                   | A_73806, nil_10, __73807 =>
                     (cons_11‹U,L›
                       A_73806 __73807 (nil_10‹U,L› A_73806))
                   | A_73808, (cons_11 hd_73809 tl_73810), __73811 =>
                     (cons_11‹U,L›
                       A_73808 hd_73809
                       ((rcons_73802) A_73808 tl_73810 __73811))))
                   int
                   (((fun rcons_73812 :
                       ∀ {A_73813 : U} ->
                         (list_7‹U,L› A_73813) -o
                           A_73813 -o (list_7‹U,L› A_73813)
                     | A_73816, nil_10, __73817 =>
                       (cons_11‹U,L›
                         A_73816 __73817 (nil_10‹U,L› A_73816))
                     | A_73818, (cons_11 hd_73819 tl_73820), __73821 =>
                       (cons_11‹U,L›
                         A_73818 hd_73819
                         ((rcons_73812) A_73818 tl_73820 __73821))))
                     int (nil_10‹U,L› int) 3)
                   4)
                 5)
               6))) -o
           IO base_3‹U›
       with
      | (ex1_14 (just_2 m_73822) n_73823) =>
        let* _73824 :=
          ((q_free_42)
            (((fun rcons_73825 :
                ∀ {A_73826 : U} ->
                  (list_7‹U,L› A_73826) -o
                    A_73826 -o (list_7‹U,L› A_73826)
              | A_73829, nil_10, __73830 =>
                (cons_11‹U,L› A_73829 __73830 (nil_10‹U,L› A_73829))
              | A_73831, (cons_11 hd_73832 tl_73833), __73834 =>
                (cons_11‹U,L›
                  A_73831 hd_73832 ((rcons_73825) A_73831 tl_73833 __73834))))
              int
              (((fun rcons_73835 :
                  ∀ {A_73836 : U} ->
                    (list_7‹U,L› A_73836) -o
                      A_73836 -o (list_7‹U,L› A_73836)
                | A_73839, nil_10, __73840 =>
                  (cons_11‹U,L›
                    A_73839 __73840 (nil_10‹U,L› A_73839))
                | A_73841, (cons_11 hd_73842 tl_73843), __73844 =>
                  (cons_11‹U,L›
                    A_73841 hd_73842 ((rcons_73835) A_73841 tl_73843 __73844))))
                int
                (((fun rcons_73845 :
                    ∀ {A_73846 : U} ->
                      (list_7‹U,L› A_73846) -o
                        A_73846 -o (list_7‹U,L› A_73846)
                  | A_73849, nil_10, __73850 =>
                    (cons_11‹U,L›
                      A_73849 __73850 (nil_10‹U,L› A_73849))
                  | A_73851, (cons_11 hd_73852 tl_73853), __73854 =>
                    (cons_11‹U,L›
                      A_73851 hd_73852
                      ((rcons_73845) A_73851 tl_73853 __73854))))
                  int
                  (((fun rcons_73855 :
                      ∀ {A_73856 : U} ->
                        (list_7‹U,L› A_73856) -o
                          A_73856 -o (list_7‹U,L› A_73856)
                    | A_73859, nil_10, __73860 =>
                      (cons_11‹U,L›
                        A_73859 __73860 (nil_10‹U,L› A_73859))
                    | A_73861, (cons_11 hd_73862 tl_73863), __73864 =>
                      (cons_11‹U,L›
                        A_73861 hd_73862
                        ((rcons_73855) A_73861 tl_73863 __73864))))
                    int (nil_10‹U,L› int) 3)
                  4)
                5)
              6)
            n_73823)
        in
        (match _73824 in unit_9 -o IO base_3‹U› with
        | tt_3 =>
          print
            (__cat__
              (__cat__
                (__cat__
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__ "x := " ((string_of_int_33) m_73634))
                          "\n")
                        "y := ")
                      ((string_of_int_33) m_73738))
                    "\n")
                  "z := ")
                ((string_of_int_33) m_73822))
              "\n")))))

[trans1e success]

-----------------------------------------

#[program]
def idU_55 := fun id_353338 (A_353339) -> (m_353340) ->
                m_353340

#[program]
def idL_54 := fun id_353341 (A_353342) -> (m_353343) ->
                m_353343

#[logical]
inductive eqU_13 where
| reflU_19 of layout[]

#[logical]
inductive eqL_12 where
| reflL_18 of layout[]

#[program]
def rwlUU_59 :=
  fun rwl_353344 {A_353345} -> {m_353346} -> {n_353347} -> {B_353348} ->
  {__353349} -> (__353350) ->
    (match {NULL} with
    | reflU_19  => __353350)

#[program]
def rwlUL_58 :=
  fun rwl_353351 {A_353352} -> {m_353353} -> {n_353354} -> {B_353355} ->
  {__353356} -> (__353357) ->
    (match {NULL} with
    | reflU_19  => __353357)

#[program]
def rwlLU_57 :=
  fun rwl_353358 {A_353359} -> {m_353360} -> {n_353361} -> {B_353362} ->
  {__353363} -> (__353364) ->
    (match {NULL} with
    | reflL_18  => __353364)

#[program]
def rwlLL_56 :=
  fun rwl_353365 {A_353366} -> {m_353367} -> {n_353368} -> {B_353369} ->
  {__353370} -> (__353371) ->
    (match {NULL} with
    | reflL_18  => __353371)

#[program]
def rwrUU_63 :=
  fun rwr_353372 {A_353373} -> {m_353374} -> {n_353375} -> {B_353376} ->
  {__353377} -> (__353378) ->
    (match {NULL} with
    | reflU_19  => __353378)

#[program]
def rwrUL_62 :=
  fun rwr_353379 {A_353380} -> {m_353381} -> {n_353382} -> {B_353383} ->
  {__353384} -> (__353385) ->
    (match {NULL} with
    | reflU_19  => __353385)

#[program]
def rwrLU_61 :=
  fun rwr_353386 {A_353387} -> {m_353388} -> {n_353389} -> {B_353390} ->
  {__353391} -> (__353392) ->
    (match {NULL} with
    | reflL_18  => __353392)

#[program]
def rwrLL_60 :=
  fun rwr_353393 {A_353394} -> {m_353395} -> {n_353396} -> {B_353397} ->
  {__353398} -> (__353399) ->
    (match {NULL} with
    | reflL_18  => __353399)

#[logical]
def congrUUU_71 := NULL

#[logical]
def congrUUL_70 := NULL

#[logical]
def congrULU_69 := NULL

#[logical]
def congrULL_68 := NULL

#[logical]
def congrLUU_67 := NULL

#[logical]
def congrLUL_66 := NULL

#[logical]
def congrLLU_65 := NULL

#[logical]
def congrLLL_64 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_17 where
| justUU_23 of layout[R]

#[program]
inductive singUL_16 where
| justUL_22 of layout[R]

#[program]
inductive singLU_15 where


#[program]
inductive singLL_14 where
| justLL_20 of layout[R]

#[logical]
def ssingU_73 := NULL

#[logical]
def ssingL_72 := NULL

#[program]
def sing_elimUU_77 :=
  fun sing_elim_353400 {A_353401} -> {x_353402} -> (__353403) ->
    (match __353403 with
    | justUU_23 m_353404 => m_353404)

#[program]
def sing_elimUL_76 :=
  fun sing_elim_353405 {A_353406} -> {x_353407} -> (__353408) ->
    (match __353408 with
    | justUL_22 m_353409 => m_353409)

#[program]
def sing_elimLU_75 :=
  fun sing_elim_353410 {A_353411} -> {x_353412} -> (__353413) ->
    (match __353413 with
    )

#[program]
def sing_elimLL_74 :=
  fun sing_elim_353414 {A_353415} -> {x_353416} -> (__353417) ->
    (match __353417 with
    | justLL_20 m_353418 => m_353418)

#[logical]
def sing_uniqUU_81 := NULL

#[logical]
def sing_uniqUL_80 := NULL

#[logical]
def sing_uniqLU_79 := NULL

#[logical]
def sing_uniqLL_78 := NULL

#[program]
inductive baseU_19 where
| ttU_25 of layout[]

#[program]
inductive baseL_18 where
| ttL_24 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_353419 (__353420) ->
    (match __353420 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_353421 (__353422) -> (__353423) ->
    (match __353422 with
    | true_4  =>
      (match __353423 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_353424 (__353425) -> (__353426) ->
    (match __353425 with
    | true_4  => true_4
    | false_5  =>
      (match __353426 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_353427 (__353428) -> (__353429) ->
    (match __353428 with
    | true_4  =>
      (match __353429 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __353429 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def string_of_bool_15 :=
  fun string_of_bool_353430 (__353431) ->
    (match __353431 with
    | true_4  => "true" | false_5  => "false")

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_16 :=
  fun lte_353432 (__353433) -> (__353434) ->
    (match __353433 with
    | zero_6  => true_4
    | succ_7 n_353435 =>
      (match __353434 with
      | zero_6  => false_5
      | succ_7 n_353436 => ((lte_353432) n_353435 n_353436)))

#[program]
def lt_17 :=
  fun lt_353437 (x_353438) -> (y_353439) ->
    ((lte_16) (succ_7 x_353438) y_353439)

#[program]
def pred_18 :=
  fun pred_353440 (__353441) ->
    (match __353441 with
    | zero_6  => zero_6 | succ_7 n_353442 => n_353442)

#[program]
def add_19 :=
  fun add_353443 (__353444) -> (__353445) ->
    (match __353444 with
    | zero_6  => __353445
    | succ_7 n_353446 => (succ_7 ((add_353443) n_353446 __353445)))

#[program]
def sub_20 :=
  fun sub_353447 (__353448) -> (__353449) ->
    (match __353449 with
    | zero_6  => __353448
    | succ_7 n_353450 => ((sub_353447) ((pred_18) __353448) n_353450))

#[program]
def mul_21 :=
  fun mul_353451 (__353452) -> (__353453) ->
    (match __353452 with
    | zero_6  => zero_6
    | succ_7 n_353454 => ((add_19) __353453 ((mul_353451) n_353454 __353453)))

#[program]
def div_22 :=
  fun div_353455 (x_353456) -> (y_353457) ->
    (match ((lt_17) x_353456 y_353457) with
    | true_4  => zero_6
    | false_5  =>
      let loop_353458 :=
        fun loop_353459 (x_353460) -> (y_353461) ->
          (match ((sub_20) x_353460 ((pred_18) y_353461)) with
          | zero_6  => zero_6
          | succ_7 n_353462 => (succ_7 ((loop_353459) n_353462 y_353461)))
      in ((loop_353458) x_353456 y_353457))

#[program]
def rem_23 :=
  fun rem_353463 (x_353464) -> (y_353465) ->
    ((sub_20) x_353464 ((mul_21) ((div_22) x_353464 y_353465) y_353465))

#[program]
inductive optionU_21 where
| NoneU_28 of layout[]
| SomeU_29 of layout[R]

#[program]
inductive optionL_20 where
| NoneL_26 of layout[]
| SomeL_27 of layout[R]

#[program]
inductive listUU_25 where
| nilUU_36 of layout[]
| consUU_37 of layout[R, R]

#[program]
inductive listUL_24 where
| nilUL_34 of layout[]
| consUL_35 of layout[R, R]

#[program]
inductive listLU_23 where
| nilLU_32 of layout[]

#[program]
inductive listLL_22 where
| nilLL_30 of layout[]
| consLL_31 of layout[R, R]

#[program]
def rconsUU_85 :=
  fun rcons_353466 {A_353467} -> (__353468) -o (__353469) -o
    (match __353468 with
    | nilUU_36  => (consUU_37 __353469 nilUU_36)
    | consUU_37 hd_353470 tl_353471 =>
      (consUU_37 hd_353470 ((rcons_353466) NULL tl_353471 __353469)))

#[program]
def rconsUL_84 :=
  fun rcons_353472 {A_353473} -> (__353474) -o (__353475) -o
    (match __353474 with
    | nilUL_34  => (consUL_35 __353475 nilUL_34)
    | consUL_35 hd_353476 tl_353477 =>
      (consUL_35 hd_353476 ((rcons_353472) NULL tl_353477 __353475)))

#[program]
def rconsLL_82 :=
  fun rcons_353478 {A_353479} -> (__353480) -o (__353481) -o
    (match __353480 with
    | nilLL_30  => (consLL_31 __353481 nilLL_30)
    | consLL_31 hd_353482 tl_353483 =>
      (consLL_31 hd_353482 ((rcons_353478) NULL tl_353483 __353481)))

#[program]
def free_listUU_89 :=
  fun free_list_353484 {A_353485} -> (f_353486) -> (__353487) ->
    (match __353487 with
    | nilUU_36  => ttU_25
    | consUU_37 hd_353488 tl_353489 =>
      let __353490 := ((f_353486) hd_353488) in
      ((free_list_353484) NULL f_353486 tl_353489))

#[program]
def free_listUL_88 :=
  fun free_list_353491 {A_353492} -> (f_353493) -> (__353494) ->
    (match __353494 with
    | nilUL_34  => ttU_25
    | consUL_35 hd_353495 tl_353496 =>
      let __353497 := ((f_353493) hd_353495) in
      ((free_list_353491) NULL f_353493 tl_353496))

#[program]
def free_listLL_86 :=
  fun free_list_353498 {A_353499} -> (f_353500) -> (__353501) ->
    (match __353501 with
    | nilLL_30  => ttU_25
    | consLL_31 hd_353502 tl_353503 =>
      let __353504 := ((f_353500) hd_353502) in
      ((free_list_353498) NULL f_353500 tl_353503))

#[program]
inductive existsUU_29 where
| exUU_41 of layout[R, N]

#[program]
inductive existsUL_28 where
| exUL_40 of layout[R, N]

#[program]
inductive existsLU_27 where
| exLU_39 of layout[R, N]

#[program]
inductive existsLL_26 where
| exLL_38 of layout[R, N]

#[program]
inductive exists0UU_33 where
| ex0UU_45 of layout[N, R]

#[program]
inductive exists0UL_32 where
| ex0UL_44 of layout[N, R]

#[program]
inductive exists0LU_31 where
| ex0LU_43 of layout[N, R]

#[program]
inductive exists0LL_30 where
| ex0LL_42 of layout[N, R]

#[program]
inductive exists1UU_37 where
| ex1UU_49 of layout[R, R]

#[program]
inductive exists1UL_36 where
| ex1UL_48 of layout[R, R]

#[program]
inductive exists1LU_35 where
| ex1LU_47 of layout[R, R]

#[program]
inductive exists1LL_34 where
| ex1LL_46 of layout[R, R]

#[logical]
def tensorUU_93 := NULL

#[logical]
def tensorUL_92 := NULL

#[logical]
def tensorLU_91 := NULL

#[logical]
def tensorLL_90 := NULL

#[program]
def pow_27 :=
  fun pow_353505 (x_353506) -> (y_353507) ->
    let loop_353508 :=
      fun loop_353509 (acc_353510) -> (y_353511) ->
        (match (__lte__ y_353511 0) with
        | true_4  => acc_353510
        | false_5  =>
          ((loop_353509) (__mul__ x_353506 acc_353510) (__sub__ y_353511 1)))
    in ((loop_353508) 1 y_353507)

#[program]
def powm_28 :=
  fun powm_353512 (x_353513) -> (y_353514) -> (m_353515) ->
    let loop_353516 :=
      fun loop_353517 (acc_353518) -> (y_353519) ->
        (match (__lte__ y_353519 0) with
        | true_4  => acc_353518
        | false_5  =>
          ((loop_353517)
            (__mod__ (__mul__ x_353513 acc_353518) m_353515)
            (__sub__ y_353519 1)))
    in ((loop_353516) 1 y_353514)

#[program]
def ord_29 := fun ord_353520 (c_353521) ->
                (__ord__ c_353521)

#[program]
def chr_30 := fun chr_353522 (i_353523) ->
                (__chr__ i_353523)

#[program]
def str_31 := fun str_353524 (c_353525) ->
                (__push__ "" c_353525)

#[program]
def strlen_32 := fun strlen_353526 (s_353527) ->
                   (__size__ s_353527)

#[program]
def string_of_int_33 :=
  fun string_of_int_353528 (i_353529) ->
    let aux_353530 :=
      fun aux_353531 (i_353532) ->
        (match (__lte__ 10 i_353532) with
        | true_4  =>
          let r_353533 := (__mod__ i_353532 10) in
          let i_353534 := (__div__ i_353532 10) in
          (__push__ ((aux_353531) i_353534)
            ((chr_30) (__add__ r_353533 ((ord_29) 0))))
        | false_5  => ((str_31) ((chr_30) (__add__ i_353532 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_353529) with
    | true_4  => ((aux_353530) i_353529)
    | false_5  => (__cat__ "~" ((aux_353530) (__neg__ i_353529))))

#[logical]
def llistU_95 := NULL

#[logical]
def llistL_94 := NULL

#[program]
inductive opr_11 where
| Free_15 of layout[]
| Enqueue_16 of layout[R]
| Dequeue_17 of layout[]

#[logical]
def queue_p_35 := NULL

#[logical]
def queue_ch_36 := NULL

#[logical]
def queue_hc_37 := NULL

#[logical]
def queue_38 := NULL

#[program]
def node_worker_39 :=
  fun node_worker_353535 {xs_353536} -> (x_353537) -> (__353538) -o
  (__353539) -o
    let* _353540 := recv[R,L] __353539 in
    (match _353540 with
    | ex1LL_46 m_353541 n_353542 =>
      (match m_353541 with
      | Free_15  =>
        let* c_next_353543 := ((send[R,L] __353538) Free_15) in
        let* __353544 := close[false] c_next_353543 in close[true] n_353542
      | Enqueue_16 n_353545 =>
        let* c_next_353546 := ((send[R,L] __353538) (Enqueue_16 n_353545)) in
        ((node_worker_353535) NULL x_353537 c_next_353546 n_353542)
      | Dequeue_17  =>
        let* c_353547 := ((send[R,U] n_353542) (justUU_23 x_353537)) in
        let* c_353548 := ((send[R,L] c_353547) __353538) in
        close[true] c_353548))

#[program]
def empty_worker_40 :=
  fun empty_worker_353549 (c_353550) ->
    let* _353551 := recv[R,L] c_353550 in
    (match _353551 with
    | ex1LL_46 m_353552 n_353553 =>
      (match m_353552 with
      | Free_15  => close[true] n_353553
      | Enqueue_16 n_353554 =>
        let* c0_353555 :=
          fork
            fun _353556 (_353557) -o
              ((node_worker_39) NULL n_353554 _353557 n_353553)
        in ((empty_worker_353549) c0_353555)
      | Dequeue_17  => ((empty_worker_353549) n_353553)))

#[program]
def q_empty_41 :=
  fun q_empty_353558 (__353559) ->
    fork fun _353560 (_353561) -o
           ((empty_worker_40) _353561)

#[program]
def q_free_42 :=
  fun q_free_353562 {xs_353563} -> (q_353564) ->
    let* q_353565 := q_353564 in
    let* q_353566 := ((send[R,L] q_353565) Free_15) in close[false] q_353566

#[program]
def q_enqueue_43 :=
  fun q_enqueue_353567 {xs_353568} -> (n_353569) -> (q_353570) ->
    let* q_353571 := q_353570 in
    let* q_353572 := ((send[R,L] q_353571) (Enqueue_16 n_353569)) in
    return q_353572

#[program]
def q_dequeue_44 :=
  fun q_dequeue_353573 {x_353574} -> {xs_353575} -> (q_353576) ->
    let* q_353577 := q_353576 in
    let* q_353578 := ((send[R,L] q_353577) Dequeue_17) in
    let* _353579 := recv[R,U] q_353578 in
    (match _353579 with
    | ex1UL_48 m_353580 n_353581 =>
      let* _353582 := recv[R,L] n_353581 in
      (match _353582 with
      | ex1LL_46 m_353583 n_353584 =>
        let* __353585 := close[false] n_353584 in
        return (ex1UL_48 m_353580 return m_353583)))

#[program]
def myqueue_45 := ((q_empty_41) ttU_25)

#[program]
def myqueue_46 := ((q_enqueue_43) NULL 0 myqueue_45)

#[program]
def myqueue_47 := ((q_enqueue_43) NULL 1 myqueue_46)

#[program]
def myqueue_48 := ((q_enqueue_43) NULL 2 myqueue_47)

#[program]
def myqueue_49 := ((q_enqueue_43) NULL 3 myqueue_48)

#[program]
def myqueue_50 := ((q_enqueue_43) NULL 4 myqueue_49)

#[program]
def myqueue_51 := ((q_enqueue_43) NULL 5 myqueue_50)

#[program]
def myqueue_52 := ((q_enqueue_43) NULL 6 myqueue_51)

#[program]
def main :=
  let* _353586 := ((q_dequeue_44) NULL NULL myqueue_52) in
  (match _353586 with
  | ex1UL_48 m_353587 n_353588 =>
    (match m_353587 with
    | justUU_23 m_353589 =>
      let* _353590 := ((q_dequeue_44) NULL NULL n_353588) in
      (match _353590 with
      | ex1UL_48 m_353591 n_353592 =>
        (match m_353591 with
        | justUU_23 m_353593 =>
          let* _353594 := ((q_dequeue_44) NULL NULL n_353592) in
          (match _353594 with
          | ex1UL_48 m_353595 n_353596 =>
            (match m_353595 with
            | justUU_23 m_353597 =>
              let* _353598 := ((q_free_42) NULL n_353596) in
              (match _353598 with
              | ttU_25  =>
                print
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__
                            (__cat__
                              (__cat__
                                (__cat__ "x := "
                                  ((string_of_int_33) m_353589))
                                "\n")
                              "y := ")
                            ((string_of_int_33) m_353593))
                          "\n")
                        "z := ")
                      ((string_of_int_33) m_353597))
                    "\n"))))))))

[trans12 success]

-----------------------------------------

#[program]
def idU_55 := fun id_353860 (A_353861) -> (m_353862) ->
                m_353862

#[program]
def idL_54 := fun id_353863 (A_353864) -> (m_353865) ->
                m_353865

#[logical]
inductive eqU_13 where
| reflU_19 of layout[]

#[logical]
inductive eqL_12 where
| reflL_18 of layout[]

#[program]
def rwlUU_59 :=
  fun rwl_353866 {A_353867} -> {m_353868} -> {n_353869} -> {B_353870} ->
  {__353871} -> (__353872) ->
    __353872

#[program]
def rwlUL_58 :=
  fun rwl_353873 {A_353874} -> {m_353875} -> {n_353876} -> {B_353877} ->
  {__353878} -> (__353879) ->
    __353879

#[program]
def rwlLU_57 :=
  fun rwl_353880 {A_353881} -> {m_353882} -> {n_353883} -> {B_353884} ->
  {__353885} -> (__353886) ->
    __353886

#[program]
def rwlLL_56 :=
  fun rwl_353887 {A_353888} -> {m_353889} -> {n_353890} -> {B_353891} ->
  {__353892} -> (__353893) ->
    __353893

#[program]
def rwrUU_63 :=
  fun rwr_353894 {A_353895} -> {m_353896} -> {n_353897} -> {B_353898} ->
  {__353899} -> (__353900) ->
    __353900

#[program]
def rwrUL_62 :=
  fun rwr_353901 {A_353902} -> {m_353903} -> {n_353904} -> {B_353905} ->
  {__353906} -> (__353907) ->
    __353907

#[program]
def rwrLU_61 :=
  fun rwr_353908 {A_353909} -> {m_353910} -> {n_353911} -> {B_353912} ->
  {__353913} -> (__353914) ->
    __353914

#[program]
def rwrLL_60 :=
  fun rwr_353915 {A_353916} -> {m_353917} -> {n_353918} -> {B_353919} ->
  {__353920} -> (__353921) ->
    __353921

#[logical]
def congrUUU_71 := NULL

#[logical]
def congrUUL_70 := NULL

#[logical]
def congrULU_69 := NULL

#[logical]
def congrULL_68 := NULL

#[logical]
def congrLUU_67 := NULL

#[logical]
def congrLUL_66 := NULL

#[logical]
def congrLLU_65 := NULL

#[logical]
def congrLLL_64 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_17 where
| justUU_23 of layout[R]

#[program]
inductive singUL_16 where
| justUL_22 of layout[R]

#[program]
inductive singLU_15 where


#[program]
inductive singLL_14 where
| justLL_20 of layout[R]

#[logical]
def ssingU_73 := NULL

#[logical]
def ssingL_72 := NULL

#[program]
def sing_elimUU_77 :=
  fun sing_elim_353922 {A_353923} -> {x_353924} -> (__353925) ->
    (match __353925 with
    | justUU_23 m_353926 => m_353926)

#[program]
def sing_elimUL_76 :=
  fun sing_elim_353927 {A_353928} -> {x_353929} -> (__353930) ->
    (match __353930 with
    | justUL_22 m_353931 => m_353931)

#[program]
def sing_elimLU_75 :=
  fun sing_elim_353932 {A_353933} -> {x_353934} -> (__353935) ->
    !!

#[program]
def sing_elimLL_74 :=
  fun sing_elim_353936 {A_353937} -> {x_353938} -> (__353939) ->
    (match __353939 with
    | justLL_20 m_353940 => m_353940)

#[logical]
def sing_uniqUU_81 := NULL

#[logical]
def sing_uniqUL_80 := NULL

#[logical]
def sing_uniqLU_79 := NULL

#[logical]
def sing_uniqLL_78 := NULL

#[program]
inductive baseU_19 where
| ttU_25 of layout[]

#[program]
inductive baseL_18 where
| ttL_24 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_353941 (__353942) ->
    (match __353942 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_353943 (__353944) -> (__353945) ->
    (match __353944 with
    | true_4  =>
      (match __353945 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_353946 (__353947) -> (__353948) ->
    (match __353947 with
    | true_4  => true_4
    | false_5  =>
      (match __353948 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_353949 (__353950) -> (__353951) ->
    (match __353950 with
    | true_4  =>
      (match __353951 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __353951 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def string_of_bool_15 :=
  fun string_of_bool_353952 (__353953) ->
    (match __353953 with
    | true_4  => "true" | false_5  => "false")

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_16 :=
  fun lte_353954 (__353955) -> (__353956) ->
    (match __353955 with
    | zero_6  => true_4
    | succ_7 n_353957 =>
      (match __353956 with
      | zero_6  => false_5
      | succ_7 n_353958 => ((lte_353954) n_353957 n_353958)))

#[program]
def lt_17 :=
  fun lt_353959 (x_353960) -> (y_353961) ->
    ((lte_16) (succ_7 x_353960) y_353961)

#[program]
def pred_18 :=
  fun pred_353962 (__353963) ->
    (match __353963 with
    | zero_6  => zero_6 | succ_7 n_353964 => n_353964)

#[program]
def add_19 :=
  fun add_353965 (__353966) -> (__353967) ->
    (match __353966 with
    | zero_6  => __353967
    | succ_7 n_353968 => (succ_7 ((add_353965) n_353968 __353967)))

#[program]
def sub_20 :=
  fun sub_353969 (__353970) -> (__353971) ->
    (match __353971 with
    | zero_6  => __353970
    | succ_7 n_353972 => ((sub_353969) ((pred_18) __353970) n_353972))

#[program]
def mul_21 :=
  fun mul_353973 (__353974) -> (__353975) ->
    (match __353974 with
    | zero_6  => zero_6
    | succ_7 n_353976 => ((add_19) __353975 ((mul_353973) n_353976 __353975)))

#[program]
def div_22 :=
  fun div_353977 (x_353978) -> (y_353979) ->
    (match ((lt_17) x_353978 y_353979) with
    | true_4  => zero_6
    | false_5  =>
      let loop_353980 :=
        fun loop_353981 (x_353982) -> (y_353983) ->
          (match ((sub_20) x_353982 ((pred_18) y_353983)) with
          | zero_6  => zero_6
          | succ_7 n_353984 => (succ_7 ((loop_353981) n_353984 y_353983)))
      in ((loop_353980) x_353978 y_353979))

#[program]
def rem_23 :=
  fun rem_353985 (x_353986) -> (y_353987) ->
    ((sub_20) x_353986 ((mul_21) ((div_22) x_353986 y_353987) y_353987))

#[program]
inductive optionU_21 where
| NoneU_28 of layout[]
| SomeU_29 of layout[R]

#[program]
inductive optionL_20 where
| NoneL_26 of layout[]
| SomeL_27 of layout[R]

#[program]
inductive listUU_25 where
| nilUU_36 of layout[]
| consUU_37 of layout[R, R]

#[program]
inductive listUL_24 where
| nilUL_34 of layout[]
| consUL_35 of layout[R, R]

#[program]
inductive listLU_23 where
| nilLU_32 of layout[]

#[program]
inductive listLL_22 where
| nilLL_30 of layout[]
| consLL_31 of layout[R, R]

#[program]
def rconsUU_85 :=
  fun rcons_353988 {A_353989} -> (__353990) -o (__353991) -o
    (match __353990 with
    | nilUU_36  => (consUU_37 __353991 nilUU_36)
    | consUU_37 hd_353992 tl_353993 =>
      (consUU_37 hd_353992 ((rcons_353988) NULL tl_353993 __353991)))

#[program]
def rconsUL_84 :=
  fun rcons_353994 {A_353995} -> (__353996) -o (__353997) -o
    (match __353996 with
    | nilUL_34  => (consUL_35 __353997 nilUL_34)
    | consUL_35 hd_353998 tl_353999 =>
      (consUL_35 hd_353998 ((rcons_353994) NULL tl_353999 __353997)))

#[program]
def rconsLL_82 :=
  fun rcons_354000 {A_354001} -> (__354002) -o (__354003) -o
    (match __354002 with
    | nilLL_30  => (consLL_31 __354003 nilLL_30)
    | consLL_31 hd_354004 tl_354005 =>
      (consLL_31 hd_354004 ((rcons_354000) NULL tl_354005 __354003)))

#[program]
def free_listUU_89 :=
  fun free_list_354006 {A_354007} -> (f_354008) -> (__354009) ->
    (match __354009 with
    | nilUU_36  => ttU_25
    | consUU_37 hd_354010 tl_354011 =>
      let __354012 := ((f_354008) hd_354010) in
      ((free_list_354006) NULL f_354008 tl_354011))

#[program]
def free_listUL_88 :=
  fun free_list_354013 {A_354014} -> (f_354015) -> (__354016) ->
    (match __354016 with
    | nilUL_34  => ttU_25
    | consUL_35 hd_354017 tl_354018 =>
      let __354019 := ((f_354015) hd_354017) in
      ((free_list_354013) NULL f_354015 tl_354018))

#[program]
def free_listLL_86 :=
  fun free_list_354020 {A_354021} -> (f_354022) -> (__354023) ->
    (match __354023 with
    | nilLL_30  => ttU_25
    | consLL_31 hd_354024 tl_354025 =>
      let __354026 := ((f_354022) hd_354024) in
      ((free_list_354020) NULL f_354022 tl_354025))

#[program]
inductive existsUU_29 where
| exUU_41 of layout[R, N]

#[program]
inductive existsUL_28 where
| exUL_40 of layout[R, N]

#[program]
inductive existsLU_27 where
| exLU_39 of layout[R, N]

#[program]
inductive existsLL_26 where
| exLL_38 of layout[R, N]

#[program]
inductive exists0UU_33 where
| ex0UU_45 of layout[N, R]

#[program]
inductive exists0UL_32 where
| ex0UL_44 of layout[N, R]

#[program]
inductive exists0LU_31 where
| ex0LU_43 of layout[N, R]

#[program]
inductive exists0LL_30 where
| ex0LL_42 of layout[N, R]

#[program]
inductive exists1UU_37 where
| ex1UU_49 of layout[R, R]

#[program]
inductive exists1UL_36 where
| ex1UL_48 of layout[R, R]

#[program]
inductive exists1LU_35 where
| ex1LU_47 of layout[R, R]

#[program]
inductive exists1LL_34 where
| ex1LL_46 of layout[R, R]

#[logical]
def tensorUU_93 := NULL

#[logical]
def tensorUL_92 := NULL

#[logical]
def tensorLU_91 := NULL

#[logical]
def tensorLL_90 := NULL

#[program]
def pow_27 :=
  fun pow_354027 (x_354028) -> (y_354029) ->
    let loop_354030 :=
      fun loop_354031 (acc_354032) -> (y_354033) ->
        (match (__lte__ y_354033 0) with
        | true_4  => acc_354032
        | false_5  =>
          ((loop_354031) (__mul__ x_354028 acc_354032) (__sub__ y_354033 1)))
    in ((loop_354030) 1 y_354029)

#[program]
def powm_28 :=
  fun powm_354034 (x_354035) -> (y_354036) -> (m_354037) ->
    let loop_354038 :=
      fun loop_354039 (acc_354040) -> (y_354041) ->
        (match (__lte__ y_354041 0) with
        | true_4  => acc_354040
        | false_5  =>
          ((loop_354039)
            (__mod__ (__mul__ x_354035 acc_354040) m_354037)
            (__sub__ y_354041 1)))
    in ((loop_354038) 1 y_354036)

#[program]
def ord_29 := fun ord_354042 (c_354043) ->
                (__ord__ c_354043)

#[program]
def chr_30 := fun chr_354044 (i_354045) ->
                (__chr__ i_354045)

#[program]
def str_31 := fun str_354046 (c_354047) ->
                (__push__ "" c_354047)

#[program]
def strlen_32 := fun strlen_354048 (s_354049) ->
                   (__size__ s_354049)

#[program]
def string_of_int_33 :=
  fun string_of_int_354050 (i_354051) ->
    let aux_354052 :=
      fun aux_354053 (i_354054) ->
        (match (__lte__ 10 i_354054) with
        | true_4  =>
          let r_354055 := (__mod__ i_354054 10) in
          let i_354056 := (__div__ i_354054 10) in
          (__push__ ((aux_354053) i_354056)
            ((chr_30) (__add__ r_354055 ((ord_29) 0))))
        | false_5  => ((str_31) ((chr_30) (__add__ i_354054 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_354051) with
    | true_4  => ((aux_354052) i_354051)
    | false_5  => (__cat__ "~" ((aux_354052) (__neg__ i_354051))))

#[logical]
def llistU_95 := NULL

#[logical]
def llistL_94 := NULL

#[program]
inductive opr_11 where
| Free_15 of layout[]
| Enqueue_16 of layout[R]
| Dequeue_17 of layout[]

#[logical]
def queue_p_35 := NULL

#[logical]
def queue_ch_36 := NULL

#[logical]
def queue_hc_37 := NULL

#[logical]
def queue_38 := NULL

#[program]
def node_worker_39 :=
  fun node_worker_354057 {xs_354058} -> (x_354059) -> (__354060) -o
  (__354061) -o
    let* _354062 := recv[R,L] __354061 in
    (match _354062 with
    | ex1LL_46 m_354063 n_354064 =>
      (match m_354063 with
      | Free_15  =>
        let* c_next_354065 := ((send[R,L] __354060) Free_15) in
        let* __354066 := close[false] c_next_354065 in close[true] n_354064
      | Enqueue_16 n_354067 =>
        let* c_next_354068 := ((send[R,L] __354060) (Enqueue_16 n_354067)) in
        ((node_worker_354057) NULL x_354059 c_next_354068 n_354064)
      | Dequeue_17  =>
        let* c_354069 := ((send[R,U] n_354064) (justUU_23 x_354059)) in
        let* c_354070 := ((send[R,L] c_354069) __354060) in
        close[true] c_354070))

#[program]
def empty_worker_40 :=
  fun empty_worker_354071 (c_354072) ->
    let* _354073 := recv[R,L] c_354072 in
    (match _354073 with
    | ex1LL_46 m_354074 n_354075 =>
      (match m_354074 with
      | Free_15  => close[true] n_354075
      | Enqueue_16 n_354076 =>
        let* c0_354077 :=
          fork
            fun _354078 (_354079) -o
              ((node_worker_39) NULL n_354076 _354079 n_354075)
        in ((empty_worker_354071) c0_354077)
      | Dequeue_17  => ((empty_worker_354071) n_354075)))

#[program]
def q_empty_41 :=
  fun q_empty_354080 (__354081) ->
    fork fun _354082 (_354083) -o
           ((empty_worker_40) _354083)

#[program]
def q_free_42 :=
  fun q_free_354084 {xs_354085} -> (q_354086) ->
    let* q_354087 := q_354086 in
    let* q_354088 := ((send[R,L] q_354087) Free_15) in close[false] q_354088

#[program]
def q_enqueue_43 :=
  fun q_enqueue_354089 {xs_354090} -> (n_354091) -> (q_354092) ->
    let* q_354093 := q_354092 in
    let* q_354094 := ((send[R,L] q_354093) (Enqueue_16 n_354091)) in
    return q_354094

#[program]
def q_dequeue_44 :=
  fun q_dequeue_354095 {x_354096} -> {xs_354097} -> (q_354098) ->
    let* q_354099 := q_354098 in
    let* q_354100 := ((send[R,L] q_354099) Dequeue_17) in
    let* _354101 := recv[R,U] q_354100 in
    (match _354101 with
    | ex1UL_48 m_354102 n_354103 =>
      let* _354104 := recv[R,L] n_354103 in
      (match _354104 with
      | ex1LL_46 m_354105 n_354106 =>
        let* __354107 := close[false] n_354106 in
        return (ex1UL_48 m_354102 return m_354105)))

#[program]
def myqueue_45 := ((q_empty_41) ttU_25)

#[program]
def myqueue_46 := ((q_enqueue_43) NULL 0 myqueue_45)

#[program]
def myqueue_47 := ((q_enqueue_43) NULL 1 myqueue_46)

#[program]
def myqueue_48 := ((q_enqueue_43) NULL 2 myqueue_47)

#[program]
def myqueue_49 := ((q_enqueue_43) NULL 3 myqueue_48)

#[program]
def myqueue_50 := ((q_enqueue_43) NULL 4 myqueue_49)

#[program]
def myqueue_51 := ((q_enqueue_43) NULL 5 myqueue_50)

#[program]
def myqueue_52 := ((q_enqueue_43) NULL 6 myqueue_51)

#[program]
def main :=
  let* _354108 := ((q_dequeue_44) NULL NULL myqueue_52) in
  (match _354108 with
  | ex1UL_48 m_354109 n_354110 =>
    (match m_354109 with
    | justUU_23 m_354111 =>
      let* _354112 := ((q_dequeue_44) NULL NULL n_354110) in
      (match _354112 with
      | ex1UL_48 m_354113 n_354114 =>
        (match m_354113 with
        | justUU_23 m_354115 =>
          let* _354116 := ((q_dequeue_44) NULL NULL n_354114) in
          (match _354116 with
          | ex1UL_48 m_354117 n_354118 =>
            (match m_354117 with
            | justUU_23 m_354119 =>
              let* _354120 := ((q_free_42) NULL n_354118) in
              (match _354120 with
              | ttU_25  =>
                print
                  (__cat__
                    (__cat__
                      (__cat__
                        (__cat__
                          (__cat__
                            (__cat__
                              (__cat__
                                (__cat__ "x := "
                                  ((string_of_int_33) m_354111))
                                "\n")
                              "y := ")
                            ((string_of_int_33) m_354115))
                          "\n")
                        "z := ")
                      ((string_of_int_33) m_354119))
                    "\n"))))))))

[trans2e success]

-----------------------------------------

def idU_55 := fun id_354401 (A_354402) -> (m_354403) -> m_354403

def idL_54 := fun id_354404 (A_354405) -> (m_354406) -> m_354406

def rwlUU_59 :=
  fun rwl_354407 (A_354408) -> (m_354409) -> (n_354410) -> (B_354411) ->
  (__354412) -> (__354413) -> __354413

def rwlUL_58 :=
  fun rwl_354414 (A_354415) -> (m_354416) -> (n_354417) -> (B_354418) ->
  (__354419) -> (__354420) -> __354420

def rwlLU_57 :=
  fun rwl_354421 (A_354422) -> (m_354423) -> (n_354424) -> (B_354425) ->
  (__354426) -> (__354427) -> __354427

def rwlLL_56 :=
  fun rwl_354428 (A_354429) -> (m_354430) -> (n_354431) -> (B_354432) ->
  (__354433) -> (__354434) -> __354434

def rwrUU_63 :=
  fun rwr_354435 (A_354436) -> (m_354437) -> (n_354438) -> (B_354439) ->
  (__354440) -> (__354441) -> __354441

def rwrUL_62 :=
  fun rwr_354442 (A_354443) -> (m_354444) -> (n_354445) -> (B_354446) ->
  (__354447) -> (__354448) -> __354448

def rwrLU_61 :=
  fun rwr_354449 (A_354450) -> (m_354451) -> (n_354452) -> (B_354453) ->
  (__354454) -> (__354455) -> __354455

def rwrLL_60 :=
  fun rwr_354456 (A_354457) -> (m_354458) -> (n_354459) -> (B_354460) ->
  (__354461) -> (__354462) -> __354462

def sing_elimUU_77 :=
  fun sing_elim_354463 (A_354464) -> (x_354465) -> (__354466) -> __354466

def sing_elimUL_76 :=
  fun sing_elim_354467 (A_354468) -> (x_354469) -> (__354470) -> __354470

def sing_elimLU_75 :=
  fun sing_elim_354471 (A_354472) -> (x_354473) -> (__354474) -> !!

def sing_elimLL_74 :=
  fun sing_elim_354475 (A_354476) -> (x_354477) -> (__354478) -> __354478

def not_11 :=
  fun not_354479 (__354480) ->
    (match __354480 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  fun and_354481 (__354482) -> (__354483) ->
    (match __354482 with
    | true_4 =>
      (match __354483 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  fun or_354484 (__354485) -> (__354486) ->
    (match __354485 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __354486 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  fun xor_354487 (__354488) -> (__354489) ->
    (match __354488 with
    | true_4 =>
      (match __354489 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __354489 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def string_of_bool_15 :=
  fun string_of_bool_354490 (__354491) ->
    (match __354491 with
    | true_4 => "true" | false_5 => "false")

def lte_16 :=
  fun lte_354492 (__354493) -> (__354494) ->
    (match __354493 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __354493 with
      | succ_7 n_354495 =>
        (match __354494 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __354494 with
          | succ_7 n_354496 => ((lte_354492) n_354495 n_354496)))))

def lt_17 :=
  fun lt_354497 (x_354498) -> (y_354499) ->
    ((lte_16) (succ_7 x_354498) y_354499)

def pred_18 :=
  fun pred_354500 (__354501) ->
    (match __354501 with
    | zero_6 => constr0(zero_6)
    | _ => (match __354501 with
           | succ_7 n_354502 => n_354502))

def add_19 :=
  fun add_354503 (__354504) -> (__354505) ->
    (match __354504 with
    | zero_6 => __354505
    | _ =>
      (match __354504 with
      | succ_7 n_354506 => (succ_7 ((add_354503) n_354506 __354505))))

def sub_20 :=
  fun sub_354507 (__354508) -> (__354509) ->
    (match __354509 with
    | zero_6 => __354508
    | _ =>
      (match __354509 with
      | succ_7 n_354510 => ((sub_354507) ((pred_18) __354508) n_354510)))

def mul_21 :=
  fun mul_354511 (__354512) -> (__354513) ->
    (match __354512 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __354512 with
      | succ_7 n_354514 =>
        ((add_19) __354513 ((mul_354511) n_354514 __354513))))

def div_22 :=
  fun div_354515 (x_354516) -> (y_354517) ->
    (match ((lt_17) x_354516 y_354517) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_354518 :=
        fun loop_354519 (x_354520) -> (y_354521) ->
          (match ((sub_20) x_354520 ((pred_18) y_354521)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_20) x_354520 ((pred_18) y_354521)) with
            | succ_7 n_354522 => (succ_7 ((loop_354519) n_354522 y_354521))))
      in ((loop_354518) x_354516 y_354517))

def rem_23 :=
  fun rem_354523 (x_354524) -> (y_354525) ->
    ((sub_20) x_354524 ((mul_21) ((div_22) x_354524 y_354525) y_354525))

def rconsUU_85 :=
  fun rcons_354526 (A_354527) -> (__354528) -o (__354529) -o
    (match __354528 with
    | nilUU_36 => (consUU_37 __354529 constr0(nilUU_36))
    | _ =>
      (match __354528 with
      | consUU_37 hd_354530 tl_354531 =>
        (consUU_37 hd_354530 ((rcons_354526) NULL tl_354531 __354529))))

def rconsUL_84 :=
  fun rcons_354532 (A_354533) -> (__354534) -o (__354535) -o
    (match __354534 with
    | nilUL_34 => (consUL_35 __354535 constr0(nilUL_34))
    | _ =>
      (match __354534 with
      | consUL_35 hd_354536 tl_354537 =>
        (consUL_35 hd_354536 ((rcons_354532) NULL tl_354537 __354535))))

def rconsLL_82 :=
  fun rcons_354538 (A_354539) -> (__354540) -o (__354541) -o
    (match __354540 with
    | nilLL_30 => (consLL_31 __354541 constr0(nilLL_30))
    | _ =>
      (match __354540 with
      | consLL_31 hd_354542 tl_354543 =>
        (consLL_31 hd_354542 ((rcons_354538) NULL tl_354543 __354541))))

def free_listUU_89 :=
  fun free_list_354544 (A_354545) -> (f_354546) -> (__354547) ->
    (match __354547 with
    | nilUU_36 => constr0(ttU_25)
    | _ =>
      (match __354547 with
      | consUU_37 hd_354548 tl_354549 =>
        let __354550 := ((f_354546) hd_354548) in
        ((free_list_354544) NULL f_354546 tl_354549)))

def free_listUL_88 :=
  fun free_list_354551 (A_354552) -> (f_354553) -> (__354554) ->
    (match __354554 with
    | nilUL_34 => constr0(ttU_25)
    | _ =>
      (match __354554 with
      | consUL_35 hd_354555 tl_354556 =>
        let __354557 := ((f_354553) hd_354555) in
        ((free_list_354551) NULL f_354553 tl_354556)))

def free_listLL_86 :=
  fun free_list_354558 (A_354559) -> (f_354560) -> (__354561) ->
    (match __354561 with
    | nilLL_30 => constr0(ttU_25)
    | _ =>
      (match __354561 with
      | consLL_31 hd_354562 tl_354563 =>
        let __354564 := ((f_354560) hd_354562) in
        ((free_list_354558) NULL f_354560 tl_354563)))

def pow_27 :=
  fun pow_354565 (x_354566) -> (y_354567) ->
    let loop_354568 :=
      fun loop_354569 (acc_354570) -> (y_354571) ->
        (match (__lte__ y_354571 0) with
        | true_4 => acc_354570
        | false_5 =>
          ((loop_354569) (__mul__ x_354566 acc_354570) (__sub__ y_354571 1)))
    in ((loop_354568) 1 y_354567)

def powm_28 :=
  fun powm_354572 (x_354573) -> (y_354574) -> (m_354575) ->
    let loop_354576 :=
      fun loop_354577 (acc_354578) -> (y_354579) ->
        (match (__lte__ y_354579 0) with
        | true_4 => acc_354578
        | false_5 =>
          ((loop_354577)
            (__mod__ (__mul__ x_354573 acc_354578) m_354575)
              (__sub__ y_354579 1)))
    in ((loop_354576) 1 y_354574)

def ord_29 := fun ord_354580 (c_354581) -> (__ord__ c_354581)

def chr_30 := fun chr_354582 (i_354583) -> (__chr__ i_354583)

def str_31 := fun str_354584 (c_354585) -> (__push__ "" c_354585)

def strlen_32 := fun strlen_354586 (s_354587) -> (__size__ s_354587)

def string_of_int_33 :=
  fun string_of_int_354588 (i_354589) ->
    let aux_354590 :=
      fun aux_354591 (i_354592) ->
        (match (__lte__ 10 i_354592) with
        | true_4 =>
          let r_354593 := (__mod__ i_354592 10) in
          let i_354594 := (__div__ i_354592 10) in
          (__push__ ((aux_354591) i_354594)
            ((chr_30) (__add__ r_354593 ((ord_29) 0))))
        | false_5 => ((str_31) ((chr_30) (__add__ i_354592 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_354589) with
    | true_4 => ((aux_354590) i_354589)
    | false_5 => (__cat__ "~" ((aux_354590) (__neg__ i_354589))))

def node_worker_39 :=
  fun node_worker_354595 (xs_354596) -> (x_354597) -> (__354598) -o
  (__354599) -o
    lazy(let _354600 := force(lazy(recv[L](__354599))) in
         force((match _354600 with
               | ex1LL_46 m_354601 n_354602 =>
                 (match m_354601 with
                 | Free_15 =>
                   lazy(let c_next_354603 :=
                          force(((lam (x_354604) ->
                                    lazy(send(__354598, x_354604)))
                                  constr0(Free_15)))
                        in
                        let __354605 :=
                          force(lazy(close[false] c_next_354603))
                        in force(lazy(close[true] n_354602)))
                 | Dequeue_17 =>
                   lazy(let c_354606 :=
                          force(((lam (x_354607) ->
                                    lazy(send(n_354602, x_354607)))
                                  x_354597))
                        in
                        let c_354608 :=
                          force(((lam (x_354609) ->
                                    lazy(send(c_354606, x_354609)))
                                  __354598))
                        in force(lazy(close[true] c_354608)))
                 | _ =>
                   (match m_354601 with
                   | Enqueue_16 n_354610 =>
                     lazy(let c_next_354611 :=
                            force(((lam (x_354612) ->
                                      lazy(send(__354598, x_354612)))
                                    (Enqueue_16 n_354610)))
                          in
                          force(((node_worker_354595)
                                  NULL x_354597 c_next_354611 n_354602))))))))

def empty_worker_40 :=
  fun empty_worker_354613 (c_354614) ->
    lazy(let _354615 := force(lazy(recv[L](c_354614))) in
         force((match _354615 with
               | ex1LL_46 m_354616 n_354617 =>
                 (match m_354616 with
                 | Free_15 => lazy(close[true] n_354617)
                 | Dequeue_17 => ((empty_worker_354613) n_354617)
                 | _ =>
                   (match m_354616 with
                   | Enqueue_16 n_354618 =>
                     lazy(let c0_354619 :=
                            force(lazy(fork
                                         fun _354620 (_354621) -o
                                           ((node_worker_39)
                                             NULL n_354618 _354621 n_354617)))
                          in force(((empty_worker_354613) c0_354619))))))))

def q_empty_41 :=
  fun q_empty_354622 (__354623) ->
    lazy(fork fun _354624 (_354625) -o ((empty_worker_40) _354625))

def q_free_42 :=
  fun q_free_354626 (xs_354627) -> (q_354628) ->
    lazy(let q_354629 := force(q_354628) in
         let q_354630 :=
           force(((lam (x_354631) -> lazy(send(q_354629, x_354631)))
                   constr0(Free_15)))
         in force(lazy(close[false] q_354630)))

def q_enqueue_43 :=
  fun q_enqueue_354632 (xs_354633) -> (n_354634) -> (q_354635) ->
    lazy(let q_354636 := force(q_354635) in
         let q_354637 :=
           force(((lam (x_354638) -> lazy(send(q_354636, x_354638)))
                   (Enqueue_16 n_354634)))
         in force(lazy(q_354637)))

def q_dequeue_44 :=
  fun q_dequeue_354639 (x_354640) -> (xs_354641) -> (q_354642) ->
    lazy(let q_354643 := force(q_354642) in
         let q_354644 :=
           force(((lam (x_354645) -> lazy(send(q_354643, x_354645)))
                   constr0(Dequeue_17)))
         in
         let _354646 := force(lazy(recv[U](q_354644))) in
         force((match _354646 with
               | ex1UL_48 m_354647 n_354648 =>
                 lazy(let _354649 := force(lazy(recv[L](n_354648))) in
                      force((match _354649 with
                            | ex1LL_46 m_354650 n_354651 =>
                              lazy(let __354652 :=
                                     force(lazy(close[false] n_354651))
                                   in
                                   force(lazy((ex1UL_48
                                                m_354647 lazy(m_354650)))))))))))

def myqueue_45 := ((q_empty_41) constr0(ttU_25))

def myqueue_46 := ((q_enqueue_43) NULL 0 myqueue_45)

def myqueue_47 := ((q_enqueue_43) NULL 1 myqueue_46)

def myqueue_48 := ((q_enqueue_43) NULL 2 myqueue_47)

def myqueue_49 := ((q_enqueue_43) NULL 3 myqueue_48)

def myqueue_50 := ((q_enqueue_43) NULL 4 myqueue_49)

def myqueue_51 := ((q_enqueue_43) NULL 5 myqueue_50)

def myqueue_52 := ((q_enqueue_43) NULL 6 myqueue_51)

def main :=
  lazy(let _354653 := force(((q_dequeue_44) NULL NULL myqueue_52)) in
       force((match _354653 with
             | ex1UL_48 m_354654 n_354655 =>
               lazy(let _354656 := force(((q_dequeue_44) NULL NULL n_354655))
                    in
                    force((match _354656 with
                          | ex1UL_48 m_354657 n_354658 =>
                            lazy(let _354659 :=
                                   force(((q_dequeue_44) NULL NULL n_354658))
                                 in
                                 force((match _354659 with
                                       | ex1UL_48 m_354660 n_354661 =>
                                         lazy(let _354662 :=
                                                force(((q_free_42)
                                                        NULL n_354661))
                                              in
                                              force((match _354662 with
                                                    | ttU_25 =>
                                                      lazy(print
                                                             (__cat__
                                                               (__cat__
                                                                 (__cat__
                                                                   (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    (__cat__
                                                                    "x := "
                                                                    ((string_of_int_33)
                                                                    m_354654))
                                                                    "\n")
                                                                    "y := ")
                                                                    ((string_of_int_33)
                                                                    m_354657))
                                                                    "\n")
                                                                   "z := ")
                                                                 ((string_of_int_33)
                                                                   m_354660))
                                                               "\n"))))))))))))))

[trans23 success]

-----------------------------------------

def idU_55 := lam (A_355003) -> (m_355004) -> m_355004

def idL_54 := lam (A_355005) -> (m_355006) -> m_355006

def rwlUU_59 :=
  lam (A_355007) -> (m_355008) -> (n_355009) -> (B_355010) -> (__355011) ->
  (__355012) -> __355012

def rwlUL_58 :=
  lam (A_355013) -> (m_355014) -> (n_355015) -> (B_355016) -> (__355017) ->
  (__355018) -> __355018

def rwlLU_57 :=
  lam (A_355019) -> (m_355020) -> (n_355021) -> (B_355022) -> (__355023) ->
  (__355024) -> __355024

def rwlLL_56 :=
  lam (A_355025) -> (m_355026) -> (n_355027) -> (B_355028) -> (__355029) ->
  (__355030) -> __355030

def rwrUU_63 :=
  lam (A_355031) -> (m_355032) -> (n_355033) -> (B_355034) -> (__355035) ->
  (__355036) -> __355036

def rwrUL_62 :=
  lam (A_355037) -> (m_355038) -> (n_355039) -> (B_355040) -> (__355041) ->
  (__355042) -> __355042

def rwrLU_61 :=
  lam (A_355043) -> (m_355044) -> (n_355045) -> (B_355046) -> (__355047) ->
  (__355048) -> __355048

def rwrLL_60 :=
  lam (A_355049) -> (m_355050) -> (n_355051) -> (B_355052) -> (__355053) ->
  (__355054) -> __355054

def sing_elimUU_77 := lam (A_355055) -> (x_355056) -> (__355057) -> __355057

def sing_elimUL_76 := lam (A_355058) -> (x_355059) -> (__355060) -> __355060

def sing_elimLU_75 := lam (A_355061) -> (x_355062) -> (__355063) -> !!

def sing_elimLL_74 := lam (A_355064) -> (x_355065) -> (__355066) -> __355066

def not_11 :=
  lam (__355067) ->
    (match __355067 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  lam (__355068) -> (__355069) ->
    (match __355068 with
    | true_4 =>
      (match __355069 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  lam (__355070) -> (__355071) ->
    (match __355070 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __355071 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  lam (__355072) -> (__355073) ->
    (match __355072 with
    | true_4 =>
      (match __355073 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __355073 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def string_of_bool_15 :=
  lam (__355074) ->
    (match __355074 with
    | true_4 => "true" | false_5 => "false")

def lte_16 :=
  fun lte_355075 (__355076) -> (__355077) ->
    (match __355076 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __355076 with
      | succ_7 n_355078 =>
        (match __355077 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __355077 with
          | succ_7 n_355079 => ((lte_355075) n_355078 n_355079)))))

def lt_17 :=
  lam (x_355080) -> (y_355081) -> ((lte_16) (succ_7 x_355080) y_355081)

def pred_18 :=
  lam (__355082) ->
    (match __355082 with
    | zero_6 => constr0(zero_6)
    | _ => (match __355082 with
           | succ_7 n_355083 => n_355083))

def add_19 :=
  fun add_355084 (__355085) -> (__355086) ->
    (match __355085 with
    | zero_6 => __355086
    | _ =>
      (match __355085 with
      | succ_7 n_355087 => (succ_7 ((add_355084) n_355087 __355086))))

def sub_20 :=
  fun sub_355088 (__355089) -> (__355090) ->
    (match __355090 with
    | zero_6 => __355089
    | _ =>
      (match __355090 with
      | succ_7 n_355091 => ((sub_355088) ((pred_18) __355089) n_355091)))

def mul_21 :=
  fun mul_355092 (__355093) -> (__355094) ->
    (match __355093 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __355093 with
      | succ_7 n_355095 =>
        ((add_19) __355094 ((mul_355092) n_355095 __355094))))

def div_22 :=
  lam (x_355096) -> (y_355097) ->
    (match ((lt_17) x_355096 y_355097) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_355098 :=
        fun loop_355099 (x_355100) -> (y_355101) ->
          (match ((sub_20) x_355100 ((pred_18) y_355101)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_20) x_355100 ((pred_18) y_355101)) with
            | succ_7 n_355102 => (succ_7 ((loop_355099) n_355102 y_355101))))
      in ((loop_355098) x_355096 y_355097))

def rem_23 :=
  lam (x_355103) -> (y_355104) ->
    ((sub_20) x_355103 ((mul_21) ((div_22) x_355103 y_355104) y_355104))

def rconsUU_85 :=
  fun rcons_355105 (A_355106) -> (__355107) -o (__355108) -o
    (match __355107 with
    | nilUU_36 => (consUU_37 __355108 constr0(nilUU_36))
    | _ =>
      (match __355107 with
      | consUU_37 hd_355109 tl_355110 =>
        (consUU_37 hd_355109 ((rcons_355105) NULL tl_355110 __355108))))

def rconsUL_84 :=
  fun rcons_355111 (A_355112) -> (__355113) -o (__355114) -o
    (match __355113 with
    | nilUL_34 => (consUL_35 __355114 constr0(nilUL_34))
    | _ =>
      (match __355113 with
      | consUL_35 hd_355115 tl_355116 =>
        (consUL_35 hd_355115 ((rcons_355111) NULL tl_355116 __355114))))

def rconsLL_82 :=
  fun rcons_355117 (A_355118) -> (__355119) -o (__355120) -o
    (match __355119 with
    | nilLL_30 => (consLL_31 __355120 constr0(nilLL_30))
    | _ =>
      (match __355119 with
      | consLL_31 hd_355121 tl_355122 =>
        (consLL_31 hd_355121 ((rcons_355117) NULL tl_355122 __355120))))

def free_listUU_89 :=
  fun free_list_355123 (A_355124) -> (f_355125) -> (__355126) ->
    (match __355126 with
    | nilUU_36 => constr0(ttU_25)
    | _ =>
      (match __355126 with
      | consUU_37 hd_355127 tl_355128 =>
        let __355129 := ((f_355125) hd_355127) in
        ((free_list_355123) NULL f_355125 tl_355128)))

def free_listUL_88 :=
  fun free_list_355130 (A_355131) -> (f_355132) -> (__355133) ->
    (match __355133 with
    | nilUL_34 => constr0(ttU_25)
    | _ =>
      (match __355133 with
      | consUL_35 hd_355134 tl_355135 =>
        let __355136 := ((f_355132) hd_355134) in
        ((free_list_355130) NULL f_355132 tl_355135)))

def free_listLL_86 :=
  fun free_list_355137 (A_355138) -> (f_355139) -> (__355140) ->
    (match __355140 with
    | nilLL_30 => constr0(ttU_25)
    | _ =>
      (match __355140 with
      | consLL_31 hd_355141 tl_355142 =>
        let __355143 := ((f_355139) hd_355141) in
        ((free_list_355137) NULL f_355139 tl_355142)))

def pow_27 :=
  lam (x_355144) -> (y_355145) ->
    let loop_355146 :=
      fun loop_355147 (acc_355148) -> (y_355149) ->
        (match (__lte__ y_355149 0) with
        | true_4 => acc_355148
        | false_5 =>
          ((loop_355147) (__mul__ x_355144 acc_355148) (__sub__ y_355149 1)))
    in ((loop_355146) 1 y_355145)

def powm_28 :=
  lam (x_355150) -> (y_355151) -> (m_355152) ->
    let loop_355153 :=
      fun loop_355154 (acc_355155) -> (y_355156) ->
        (match (__lte__ y_355156 0) with
        | true_4 => acc_355155
        | false_5 =>
          ((loop_355154)
            (__mod__ (__mul__ x_355150 acc_355155) m_355152)
              (__sub__ y_355156 1)))
    in ((loop_355153) 1 y_355151)

def ord_29 := lam (c_355157) -> (__ord__ c_355157)

def chr_30 := lam (i_355158) -> (__chr__ i_355158)

def str_31 := lam (c_355159) -> (__push__ "" c_355159)

def strlen_32 := lam (s_355160) -> (__size__ s_355160)

def string_of_int_33 :=
  lam (i_355161) ->
    let aux_355162 :=
      fun aux_355163 (i_355164) ->
        (match (__lte__ 10 i_355164) with
        | true_4 =>
          let r_355165 := (__mod__ i_355164 10) in
          let i_355166 := (__div__ i_355164 10) in
          (__push__ ((aux_355163) i_355166)
            ((chr_30) (__add__ r_355165 ((ord_29) 0))))
        | false_5 => ((str_31) ((chr_30) (__add__ i_355164 ((ord_29) 0)))))
    in
    (match (__lte__ 0 i_355161) with
    | true_4 => ((aux_355162) i_355161)
    | false_5 => (__cat__ "~" ((aux_355162) (__neg__ i_355161))))

def node_worker_39 :=
  fun node_worker_355167 (xs_355168) -> (x_355169) -> (__355170) -o
  (__355171) -o
    lazy(let _355172 := recv[L](__355171) in
         (match _355172 with
         | ex1LL_46 m_355173 n_355174 =>
           (match m_355173 with
           | Free_15 =>
             let c_next_355175 := send(__355170, constr0(Free_15)) in
             let __355176 := close[false] c_next_355175 in
             close[true] n_355174
           | Dequeue_17 =>
             let c_355177 := send(n_355174, x_355169) in
             let c_355178 := send(c_355177, __355170) in close[true] c_355178
           | _ =>
             (match m_355173 with
             | Enqueue_16 n_355179 =>
               let c_next_355180 := send(__355170, (Enqueue_16 n_355179)) in
               force(((node_worker_355167)
                       NULL x_355169 c_next_355180 n_355174))))))

def empty_worker_40 :=
  fun empty_worker_355181 (c_355182) ->
    lazy(let _355183 := recv[L](c_355182) in
         (match _355183 with
         | ex1LL_46 m_355184 n_355185 =>
           (match m_355184 with
           | Free_15 => close[true] n_355185
           | Dequeue_17 => force(((empty_worker_355181) n_355185))
           | _ =>
             (match m_355184 with
             | Enqueue_16 n_355186 =>
               let c0_355187 :=
                 fork
                   lam (_355188) -o
                     ((node_worker_39) NULL n_355186 _355188 n_355185)
               in force(((empty_worker_355181) c0_355187))))))

def q_empty_41 :=
  lam (__355189) -> lazy(fork lam (_355190) -o ((empty_worker_40) _355190))

def q_free_42 :=
  lam (xs_355191) -> (q_355192) ->
    lazy(let q_355193 := force(q_355192) in
         let q_355194 := send(q_355193, constr0(Free_15)) in
         close[false] q_355194)

def q_enqueue_43 :=
  lam (xs_355195) -> (n_355196) -> (q_355197) ->
    lazy(let q_355198 := force(q_355197) in
         let q_355199 := send(q_355198, (Enqueue_16 n_355196)) in q_355199)

def q_dequeue_44 :=
  lam (x_355200) -> (xs_355201) -> (q_355202) ->
    lazy(let q_355203 := force(q_355202) in
         let q_355204 := send(q_355203, constr0(Dequeue_17)) in
         let _355205 := recv[U](q_355204) in
         (match _355205 with
         | ex1UL_48 m_355206 n_355207 =>
           let _355208 := recv[L](n_355207) in
           (match _355208 with
           | ex1LL_46 m_355209 n_355210 =>
             let __355211 := close[false] n_355210 in
             (ex1UL_48 m_355206 lazy(m_355209)))))

def myqueue_45 := ((q_empty_41) constr0(ttU_25))

def myqueue_46 := ((q_enqueue_43) NULL 0 myqueue_45)

def myqueue_47 := ((q_enqueue_43) NULL 1 myqueue_46)

def myqueue_48 := ((q_enqueue_43) NULL 2 myqueue_47)

def myqueue_49 := ((q_enqueue_43) NULL 3 myqueue_48)

def myqueue_50 := ((q_enqueue_43) NULL 4 myqueue_49)

def myqueue_51 := ((q_enqueue_43) NULL 5 myqueue_50)

def myqueue_52 := ((q_enqueue_43) NULL 6 myqueue_51)

def main :=
  lazy(let _355212 := force(((q_dequeue_44) NULL NULL myqueue_52)) in
       (match _355212 with
       | ex1UL_48 m_355213 n_355214 =>
         let _355215 := force(((q_dequeue_44) NULL NULL n_355214)) in
         (match _355215 with
         | ex1UL_48 m_355216 n_355217 =>
           let _355218 := force(((q_dequeue_44) NULL NULL n_355217)) in
           (match _355218 with
           | ex1UL_48 m_355219 n_355220 =>
             let _355221 := force(((q_free_42) NULL n_355220)) in
             (match _355221 with
             | ttU_25 =>
               print
                 (__cat__
                   (__cat__
                     (__cat__
                       (__cat__
                         (__cat__
                           (__cat__
                             (__cat__
                               (__cat__ "x := "
                                 ((string_of_int_33) m_355213))
                               "\n")
                             "y := ")
                           ((string_of_int_33) m_355216))
                         "\n")
                       "z := ")
                     ((string_of_int_33) m_355219))
                   "\n"))))))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn string_of_bool_98(__99%U) {
  match(__99){
    true_4 => {
      x_101 := str("true");
      x_100 := x_101;
    }
    false_5 => {
      x_102 := str("false");
      x_100 := x_102;
    }
  }
  return x_100;
}

fn lte_103(__104%U, __105%U) {
  match(__104){
    zero_6 => {
      x_106 := true_4;
    }
    _ => {
      match[U](__104){
        succ_7(n_108) => {
          match(__105){
            zero_6 => {
              x_109 := false_5;
            }
            _ => {
              match[U](__105){
                succ_7(n_111) => {
                  x_112 := lte_103(n_108, n_111);
                  x_110 := x_112;
                }
              }
              x_109 := x_110;
            }
          }
          x_107 := x_109;
        }
      }
      x_106 := x_107;
    }
  }
  return x_106;
}

fn lt_113(x_114%U, y_115%U) {
  x_117 := mkconstr(succ_7, [x_114]);
  x_116 := lte_103(x_117, y_115);
  return x_116;
}

fn pred_118(__119%U) {
  match(__119){
    zero_6 => {
      x_120 := zero_6;
    }
    _ => {
      match[U](__119){ succ_7(n_122) => {
                         x_121 := n_122;
                       } }
      x_120 := x_121;
    }
  }
  return x_120;
}

fn add_123(__124%U, __125%U) {
  match(__124){
    zero_6 => {
      x_126 := __125;
    }
    _ => {
      match[U](__124){
        succ_7(n_128) => {
          x_129 := add_123(n_128, __125);
          x_130 := mkconstr(succ_7, [x_129]);
          x_127 := x_130;
        }
      }
      x_126 := x_127;
    }
  }
  return x_126;
}

fn sub_131(__132%U, __133%U) {
  match(__133){
    zero_6 => {
      x_134 := __132;
    }
    _ => {
      match[U](__133){
        succ_7(n_136) => {
          x_138 := pred_118(__132);
          x_137 := sub_131(x_138, n_136);
          x_135 := x_137;
        }
      }
      x_134 := x_135;
    }
  }
  return x_134;
}

fn mul_139(__140%U, __141%U) {
  match(__140){
    zero_6 => {
      x_142 := zero_6;
    }
    _ => {
      match[U](__140){
        succ_7(n_144) => {
          x_146 := mul_139(n_144, __141);
          x_145 := add_123(__141, x_146);
          x_143 := x_145;
        }
      }
      x_142 := x_143;
    }
  }
  return x_142;
}

fn div_147(x_148%U, y_149%U) {
  x_151 := lt_113(x_148, y_149);
  match(x_151){
    true_4 => {
      x_150 := zero_6;
    }
    false_5 => {
      x_153 :=
        fn loop_154(x_155%U, y_156%U) {
          x_159 := pred_118(y_156);
          x_158 := sub_131(x_155, x_159);
          match(x_158){
            zero_6 => {
              x_157 := zero_6;
            }
            _ => {
              x_162 := pred_118(y_156);
              x_161 := sub_131(x_155, x_162);
              match[U](x_161){
                succ_7(n_163) => {
                  x_164 := loop_154(n_163, y_156);
                  x_165 := mkconstr(succ_7, [x_164]);
                  x_160 := x_165;
                }
              }
              x_157 := x_160;
            }
          }
          return x_157;
        };
      loop_152 := x_153;
      x_166 := loop_152(x_148, y_149);
      x_150 := x_166;
    }
  }
  return x_150;
}

fn rem_167(x_168%U, y_169%U) {
  x_172 := div_147(x_168, y_169);
  x_171 := mul_139(x_172, y_169);
  x_170 := sub_131(x_168, x_171);
  return x_170;
}

fn rconsUU_173(A_174%U, __175%L, __176%L) {
  match(__175){
    nilUU_36 => {
      x_178 := mkconstr(consUU_37, [__176, nilUU_36]);
      x_177 := x_178;
    }
    _ => {
      match[U](__175){
        consUU_37(hd_180, tl_181) => {
          x_182 := rconsUU_173(NULL, tl_181, __176);
          x_183 := mkconstr(consUU_37, [hd_180, x_182]);
          x_179 := x_183;
        }
      }
      x_177 := x_179;
    }
  }
  return x_177;
}

fn rconsUL_184(A_185%U, __186%L, __187%L) {
  match(__186){
    nilUL_34 => {
      x_189 := mkconstr(consUL_35, [__187, nilUL_34]);
      x_188 := x_189;
    }
    _ => {
      match[L](__186){
        consUL_35(hd_191, tl_192) => {
          x_193 := rconsUL_184(NULL, tl_192, __187);
          x_194 := mkconstr(consUL_35, [hd_191, x_193]);
          x_190 := x_194;
        }
      }
      x_188 := x_190;
    }
  }
  return x_188;
}

fn rconsLL_195(A_196%U, __197%L, __198%L) {
  match(__197){
    nilLL_30 => {
      x_200 := mkconstr(consLL_31, [__198, nilLL_30]);
      x_199 := x_200;
    }
    _ => {
      match[L](__197){
        consLL_31(hd_202, tl_203) => {
          x_204 := rconsLL_195(NULL, tl_203, __198);
          x_205 := mkconstr(consLL_31, [hd_202, x_204]);
          x_201 := x_205;
        }
      }
      x_199 := x_201;
    }
  }
  return x_199;
}

fn free_listUU_206(A_207%U, f_208%U, __209%U) {
  match(__209){
    nilUU_36 => {
      x_210 := ttU_25;
    }
    _ => {
      match[U](__209){
        consUU_37(hd_212, tl_213) => {
          x_215 := f_208(hd_212);
          __214 := x_215;
          x_216 := free_listUU_206(NULL, f_208, tl_213);
          x_211 := x_216;
        }
      }
      x_210 := x_211;
    }
  }
  return x_210;
}

fn free_listUL_217(A_218%U, f_219%U, __220%U) {
  match(__220){
    nilUL_34 => {
      x_221 := ttU_25;
    }
    _ => {
      match[L](__220){
        consUL_35(hd_223, tl_224) => {
          x_226 := f_219(hd_223);
          __225 := x_226;
          x_227 := free_listUL_217(NULL, f_219, tl_224);
          x_222 := x_227;
        }
      }
      x_221 := x_222;
    }
  }
  return x_221;
}

fn free_listLL_228(A_229%U, f_230%U, __231%U) {
  match(__231){
    nilLL_30 => {
      x_232 := ttU_25;
    }
    _ => {
      match[L](__231){
        consLL_31(hd_234, tl_235) => {
          x_237 := f_230(hd_234);
          __236 := x_237;
          x_238 := free_listLL_228(NULL, f_230, tl_235);
          x_233 := x_238;
        }
      }
      x_232 := x_233;
    }
  }
  return x_232;
}

fn pow_239(x_240%U, y_241%U) {
  x_243 :=
    fn loop_244(acc_245%U, y_246%U) {
      x_248 := lte(y_246, 0);
      match(x_248){
        true_4 => {
          x_247 := acc_245;
        }
        false_5 => {
          x_250 := mul(x_240, acc_245);
          x_251 := sub(y_246, 1);
          x_249 := loop_244(x_250, x_251);
          x_247 := x_249;
        }
      }
      return x_247;
    };
  loop_242 := x_243;
  x_252 := loop_242(1, y_241);
  return x_252;
}

fn powm_253(x_254%U, y_255%U, m_256%U) {
  x_258 :=
    fn loop_259(acc_260%U, y_261%U) {
      x_263 := lte(y_261, 0);
      match(x_263){
        true_4 => {
          x_262 := acc_260;
        }
        false_5 => {
          x_266 := mul(x_254, acc_260);
          x_265 := mod(x_266, m_256);
          x_267 := sub(y_261, 1);
          x_264 := loop_259(x_265, x_267);
          x_262 := x_264;
        }
      }
      return x_262;
    };
  loop_257 := x_258;
  x_268 := loop_257(1, y_255);
  return x_268;
}

fn ord_269(c_270%U) {
  x_271 := ord(c_270);
  return x_271;
}

fn chr_272(i_273%U) {
  x_274 := chr(i_273);
  return x_274;
}

fn str_275(c_276%U) {
  x_278 := str("");
  x_277 := push(x_278, c_276);
  return x_277;
}

fn strlen_279(s_280%U) {
  x_281 := size(s_280);
  return x_281;
}

fn string_of_int_282(i_283%U) {
  x_285 :=
    fn aux_286(i_287%U) {
      x_289 := lte(10, i_287);
      match(x_289){
        true_4 => {
          x_291 := mod(i_287, 10);
          r_290 := x_291;
          x_293 := div(i_287, 10);
          i_292 := x_293;
          x_295 := aux_286(i_292);
          x_298 := ord_269(0);
          x_297 := add(r_290, x_298);
          x_296 := chr_272(x_297);
          x_294 := push(x_295, x_296);
          x_288 := x_294;
        }
        false_5 => {
          x_302 := ord_269(0);
          x_301 := add(i_287, x_302);
          x_300 := chr_272(x_301);
          x_299 := str_275(x_300);
          x_288 := x_299;
        }
      }
      return x_288;
    };
  aux_284 := x_285;
  x_304 := lte(0, i_283);
  match(x_304){
    true_4 => {
      x_305 := aux_284(i_283);
      x_303 := x_305;
    }
    false_5 => {
      x_307 := str("~");
      x_309 := neg(i_283);
      x_308 := aux_284(x_309);
      x_306 := cat(x_307, x_308);
      x_303 := x_306;
    }
  }
  return x_303;
}

fn node_worker_310(xs_311%U, x_312%U, __313%L, __314%L) {
  x_315 :=
    lazy {
      x_317 := recv[L](__314);
      _316 := x_317;
      match[L](_316){
        ex1LL_46(m_319, n_320) => {
          match(m_319){
            Free_15 => {
              x_323 := send(__313, Free_15);
              c_next_322 := x_323;
              x_325 := close[false](c_next_322);
              __324 := x_325;
              x_326 := close[true](n_320);
              x_321 := x_326;
            }
            Dequeue_17 => {
              x_328 := send(n_320, x_312);
              c_327 := x_328;
              x_330 := send(c_327, __313);
              c_329 := x_330;
              x_331 := close[true](c_329);
              x_321 := x_331;
            }
            _ => {
              match[L](m_319){
                Enqueue_16(n_333) => {
                  x_336 := mkconstr(Enqueue_16, [n_333]);
                  x_335 := send(__313, x_336);
                  c_next_334 := x_335;
                  x_338 := node_worker_310(NULL, x_312, c_next_334, n_320);
                  x_337 := force(x_338);
                  x_332 := x_337;
                }
              }
              x_321 := x_332;
            }
          }
          x_318 := x_321;
        }
      }
      return x_318;
    };
  return x_315;
}

fn empty_worker_339(c_340%U) {
  x_341 :=
    lazy {
      x_343 := recv[L](c_340);
      _342 := x_343;
      match[L](_342){
        ex1LL_46(m_345, n_346) => {
          match(m_345){
            Free_15 => {
              x_348 := close[true](n_346);
              x_347 := x_348;
            }
            Dequeue_17 => {
              x_350 := empty_worker_339(n_346);
              x_349 := force(x_350);
              x_347 := x_349;
            }
            _ => {
              match[L](m_345){
                Enqueue_16(n_352) => {
                  x_355 :=
                    fn lam_356(_357%L) {
                      x_358 := node_worker_310(NULL, n_352, _357, n_346);
                      return x_358;
                    };
                  x_354 := fork(x_355);
                  c0_353 := x_354;
                  x_360 := empty_worker_339(c0_353);
                  x_359 := force(x_360);
                  x_351 := x_359;
                }
              }
              x_347 := x_351;
            }
          }
          x_344 := x_347;
        }
      }
      return x_344;
    };
  return x_341;
}

fn q_empty_361(__362%U) {
  x_363 :=
    lazy {
      x_365 :=
        fn lam_366(_367%L) { x_368 := empty_worker_339(_367);
                             return x_368; };
      x_364 := fork(x_365);
      return x_364;
    };
  return x_363;
}

fn q_free_369(xs_370%U, q_371%U) {
  x_372 :=
    lazy {
      x_374 := force(q_371);
      q_373 := x_374;
      x_376 := send(q_373, Free_15);
      q_375 := x_376;
      x_377 := close[false](q_375);
      return x_377;
    };
  return x_372;
}

fn q_enqueue_378(xs_379%U, n_380%U, q_381%U) {
  x_382 :=
    lazy {
      x_384 := force(q_381);
      q_383 := x_384;
      x_387 := mkconstr(Enqueue_16, [n_380]);
      x_386 := send(q_383, x_387);
      q_385 := x_386;
      return q_385;
    };
  return x_382;
}

fn q_dequeue_388(x_389%U, xs_390%U, q_391%U) {
  x_392 :=
    lazy {
      x_394 := force(q_391);
      q_393 := x_394;
      x_396 := send(q_393, Dequeue_17);
      q_395 := x_396;
      x_398 := recv[U](q_395);
      _397 := x_398;
      match[L](_397){
        ex1UL_48(m_400, n_401) => {
          x_403 := recv[L](n_401);
          _402 := x_403;
          match[L](_402){
            ex1LL_46(m_405, n_406) => {
              x_408 := close[false](n_406);
              __407 := x_408;
              x_409 := lazy { 
                              return m_405; };
              x_410 := mkconstr(ex1UL_48, [m_400, x_409]);
              x_404 := x_410;
            }
          }
          x_399 := x_404;
        }
      }
      return x_399;
    };
  return x_392;
}

myqueue_411 := {
  x_412 := q_empty_361(ttU_25);
  return x_412;
};

myqueue_413 := {
  x_414 := q_enqueue_378(NULL, 0, myqueue_411);
  return x_414;
};

myqueue_415 := {
  x_416 := q_enqueue_378(NULL, 1, myqueue_413);
  return x_416;
};

myqueue_417 := {
  x_418 := q_enqueue_378(NULL, 2, myqueue_415);
  return x_418;
};

myqueue_419 := {
  x_420 := q_enqueue_378(NULL, 3, myqueue_417);
  return x_420;
};

myqueue_421 := {
  x_422 := q_enqueue_378(NULL, 4, myqueue_419);
  return x_422;
};

myqueue_423 := {
  x_424 := q_enqueue_378(NULL, 5, myqueue_421);
  return x_424;
};

myqueue_425 := {
  x_426 := q_enqueue_378(NULL, 6, myqueue_423);
  return x_426;
};

main := {
  x_427 :=
    lazy {
      x_430 := q_dequeue_388(NULL, NULL, myqueue_425);
      x_429 := force(x_430);
      _428 := x_429;
      match[L](_428){
        ex1UL_48(m_432, n_433) => {
          x_436 := q_dequeue_388(NULL, NULL, n_433);
          x_435 := force(x_436);
          _434 := x_435;
          match[L](_434){
            ex1UL_48(m_438, n_439) => {
              x_442 := q_dequeue_388(NULL, NULL, n_439);
              x_441 := force(x_442);
              _440 := x_441;
              match[L](_440){
                ex1UL_48(m_444, n_445) => {
                  x_448 := q_free_369(NULL, n_445);
                  x_447 := force(x_448);
                  _446 := x_447;
                  match(_446){
                    ttU_25 => {
                      x_459 := str("x := ");
                      x_460 := string_of_int_282(m_432);
                      x_458 := cat(x_459, x_460);
                      x_461 := str("\n");
                      x_457 := cat(x_458, x_461);
                      x_462 := str("y := ");
                      x_456 := cat(x_457, x_462);
                      x_463 := string_of_int_282(m_438);
                      x_455 := cat(x_456, x_463);
                      x_464 := str("\n");
                      x_454 := cat(x_455, x_464);
                      x_465 := str("z := ");
                      x_453 := cat(x_454, x_465);
                      x_466 := string_of_int_282(m_444);
                      x_452 := cat(x_453, x_466);
                      x_467 := str("\n");
                      x_451 := cat(x_452, x_467);
                      x_450 := print(x_451);
                      x_449 := x_450;
                    }
                  }
                  x_443 := x_449;
                }
              }
              x_437 := x_443;
            }
          }
          x_431 := x_437;
        }
      }
      return x_431;
    };
  return x_427;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn string_of_bool_98(__99%U) {
  match(__99){
    true_4 => {
      x_101 := str("true");
      x_100 := x_101;
    }
    false_5 => {
      x_102 := str("false");
      x_100 := x_102;
    }
  }
  return x_100;
}

fn lte_103(__104%U, __105%U) {
  match(__104){
    zero_6 => {
      x_106 := true_4;
    }
    _ => {
      match[U](__104){
        succ_7(n_108) => {
          match(__105){
            zero_6 => {
              x_109 := false_5;
            }
            _ => {
              match[U](__105){
                succ_7(n_111) => {
                  x_112 := lte_103(n_108, n_111);
                  x_110 := x_112;
                }
              }
              x_109 := x_110;
            }
          }
          x_107 := x_109;
        }
      }
      x_106 := x_107;
    }
  }
  return x_106;
}

fn lt_113(x_114%U, y_115%U) {
  x_117 := mkconstr(succ_7, [x_114]);
  x_116 := lte_103(x_117, y_115);
  return x_116;
}

fn pred_118(__119%U) {
  match(__119){
    zero_6 => {
      x_120 := zero_6;
    }
    _ => {
      match[U](__119){ succ_7(n_122) => {
                         x_121 := n_122;
                       } }
      x_120 := x_121;
    }
  }
  return x_120;
}

fn add_123(__124%U, __125%U) {
  match(__124){
    zero_6 => {
      x_126 := __125;
    }
    _ => {
      match[U](__124){
        succ_7(n_128) => {
          x_129 := add_123(n_128, __125);
          x_130 := mkconstr(succ_7, [x_129]);
          x_127 := x_130;
        }
      }
      x_126 := x_127;
    }
  }
  return x_126;
}

fn sub_131(__132%U, __133%U) {
  match(__133){
    zero_6 => {
      x_134 := __132;
    }
    _ => {
      match[U](__133){
        succ_7(n_136) => {
          x_138 := pred_118(__132);
          x_137 := sub_131(x_138, n_136);
          x_135 := x_137;
        }
      }
      x_134 := x_135;
    }
  }
  return x_134;
}

fn mul_139(__140%U, __141%U) {
  match(__140){
    zero_6 => {
      x_142 := zero_6;
    }
    _ => {
      match[U](__140){
        succ_7(n_144) => {
          x_146 := mul_139(n_144, __141);
          x_145 := add_123(__141, x_146);
          x_143 := x_145;
        }
      }
      x_142 := x_143;
    }
  }
  return x_142;
}

fn div_147(x_148%U, y_149%U) {
  x_151 := lt_113(x_148, y_149);
  match(x_151){
    true_4 => {
      x_150 := zero_6;
    }
    false_5 => {
      x_153 :=
        fn loop_154(x_155%U, y_156%U) {
          x_159 := pred_118(y_156);
          x_158 := sub_131(x_155, x_159);
          match(x_158){
            zero_6 => {
              x_157 := zero_6;
            }
            _ => {
              x_162 := pred_118(y_156);
              x_161 := sub_131(x_155, x_162);
              match[U](x_161){
                succ_7(n_163) => {
                  x_164 := loop_154(n_163, y_156);
                  x_165 := mkconstr(succ_7, [x_164]);
                  x_160 := x_165;
                }
              }
              x_157 := x_160;
            }
          }
          return x_157;
        };
      loop_152 := x_153;
      x_166 := loop_152(x_148, y_149);
      x_150 := x_166;
    }
  }
  return x_150;
}

fn rem_167(x_168%U, y_169%U) {
  x_172 := div_147(x_168, y_169);
  x_171 := mul_139(x_172, y_169);
  x_170 := sub_131(x_168, x_171);
  return x_170;
}

fn rconsUU_173(A_174%U, __175%L, __176%L) {
  match(__175){
    nilUU_36 => {
      x_178 := mkconstr(consUU_37, [__176, nilUU_36]);
      x_177 := x_178;
    }
    _ => {
      match[U](__175){
        consUU_37(hd_180, tl_181) => {
          x_182 := rconsUU_173(NULL, tl_181, __176);
          x_183 := mkconstr(consUU_37, [hd_180, x_182]);
          x_179 := x_183;
        }
      }
      x_177 := x_179;
    }
  }
  return x_177;
}

fn rconsUL_184(A_185%U, __186%L, __187%L) {
  match(__186){
    nilUL_34 => {
      x_189 := mkconstr(consUL_35, [__187, nilUL_34]);
      x_188 := x_189;
    }
    _ => {
      match[L](__186){
        consUL_35(hd_191, tl_192) => {
          x_193 := rconsUL_184(NULL, tl_192, __187);
          x_194 := reconstr(__186, consUL_35, [hd_191, x_193]);
          x_190 := x_194;
        }
      }
      x_188 := x_190;
    }
  }
  return x_188;
}

fn rconsLL_195(A_196%U, __197%L, __198%L) {
  match(__197){
    nilLL_30 => {
      x_200 := mkconstr(consLL_31, [__198, nilLL_30]);
      x_199 := x_200;
    }
    _ => {
      match[L](__197){
        consLL_31(hd_202, tl_203) => {
          x_204 := rconsLL_195(NULL, tl_203, __198);
          x_205 := reconstr(__197, consLL_31, [hd_202, x_204]);
          x_201 := x_205;
        }
      }
      x_199 := x_201;
    }
  }
  return x_199;
}

fn free_listUU_206(A_207%U, f_208%U, __209%U) {
  match(__209){
    nilUU_36 => {
      x_210 := ttU_25;
    }
    _ => {
      match[U](__209){
        consUU_37(hd_212, tl_213) => {
          x_215 := f_208(hd_212);
          __214 := x_215;
          x_216 := free_listUU_206(NULL, f_208, tl_213);
          x_211 := x_216;
        }
      }
      x_210 := x_211;
    }
  }
  return x_210;
}

fn free_listUL_217(A_218%U, f_219%U, __220%U) {
  match(__220){
    nilUL_34 => {
      x_221 := ttU_25;
    }
    _ => {
      match[L](__220){
        consUL_35(hd_223, tl_224) => {
          x_226 := f_219(hd_223);
          __225 := x_226;
          x_227 := free_listUL_217(NULL, f_219, tl_224);
          x_222 := x_227;
          free(__220);
        }
      }
      x_221 := x_222;
    }
  }
  return x_221;
}

fn free_listLL_228(A_229%U, f_230%U, __231%U) {
  match(__231){
    nilLL_30 => {
      x_232 := ttU_25;
    }
    _ => {
      match[L](__231){
        consLL_31(hd_234, tl_235) => {
          x_237 := f_230(hd_234);
          __236 := x_237;
          x_238 := free_listLL_228(NULL, f_230, tl_235);
          x_233 := x_238;
          free(__231);
        }
      }
      x_232 := x_233;
    }
  }
  return x_232;
}

fn pow_239(x_240%U, y_241%U) {
  x_243 :=
    fn loop_244(acc_245%U, y_246%U) {
      x_248 := lte(y_246, 0);
      match(x_248){
        true_4 => {
          x_247 := acc_245;
        }
        false_5 => {
          x_250 := mul(x_240, acc_245);
          x_251 := sub(y_246, 1);
          x_249 := loop_244(x_250, x_251);
          x_247 := x_249;
        }
      }
      return x_247;
    };
  loop_242 := x_243;
  x_252 := loop_242(1, y_241);
  return x_252;
}

fn powm_253(x_254%U, y_255%U, m_256%U) {
  x_258 :=
    fn loop_259(acc_260%U, y_261%U) {
      x_263 := lte(y_261, 0);
      match(x_263){
        true_4 => {
          x_262 := acc_260;
        }
        false_5 => {
          x_266 := mul(x_254, acc_260);
          x_265 := mod(x_266, m_256);
          x_267 := sub(y_261, 1);
          x_264 := loop_259(x_265, x_267);
          x_262 := x_264;
        }
      }
      return x_262;
    };
  loop_257 := x_258;
  x_268 := loop_257(1, y_255);
  return x_268;
}

fn ord_269(c_270%U) {
  x_271 := ord(c_270);
  return x_271;
}

fn chr_272(i_273%U) {
  x_274 := chr(i_273);
  return x_274;
}

fn str_275(c_276%U) {
  x_278 := str("");
  x_277 := push(x_278, c_276);
  return x_277;
}

fn strlen_279(s_280%U) {
  x_281 := size(s_280);
  return x_281;
}

fn string_of_int_282(i_283%U) {
  x_285 :=
    fn aux_286(i_287%U) {
      x_289 := lte(10, i_287);
      match(x_289){
        true_4 => {
          x_291 := mod(i_287, 10);
          r_290 := x_291;
          x_293 := div(i_287, 10);
          i_292 := x_293;
          x_295 := aux_286(i_292);
          x_298 := ord_269(0);
          x_297 := add(r_290, x_298);
          x_296 := chr_272(x_297);
          x_294 := push(x_295, x_296);
          x_288 := x_294;
        }
        false_5 => {
          x_302 := ord_269(0);
          x_301 := add(i_287, x_302);
          x_300 := chr_272(x_301);
          x_299 := str_275(x_300);
          x_288 := x_299;
        }
      }
      return x_288;
    };
  aux_284 := x_285;
  x_304 := lte(0, i_283);
  match(x_304){
    true_4 => {
      x_305 := aux_284(i_283);
      x_303 := x_305;
    }
    false_5 => {
      x_307 := str("~");
      x_309 := neg(i_283);
      x_308 := aux_284(x_309);
      x_306 := cat(x_307, x_308);
      x_303 := x_306;
    }
  }
  return x_303;
}

fn node_worker_310(xs_311%U, x_312%U, __313%L, __314%L) {
  x_315 :=
    lazy {
      x_317 := recv[L](__314);
      _316 := x_317;
      match[L](_316){
        ex1LL_46(m_319, n_320) => {
          match(m_319){
            Free_15 => {
              x_323 := send(__313, Free_15);
              c_next_322 := x_323;
              x_325 := close[false](c_next_322);
              __324 := x_325;
              x_326 := close[true](n_320);
              x_321 := x_326;
            }
            Dequeue_17 => {
              x_328 := send(n_320, x_312);
              c_327 := x_328;
              x_330 := send(c_327, __313);
              c_329 := x_330;
              x_331 := close[true](c_329);
              x_321 := x_331;
            }
            _ => {
              match[L](m_319){
                Enqueue_16(n_333) => {
                  x_336 := reconstr(m_319, Enqueue_16, [n_333]);
                  x_335 := send(__313, x_336);
                  c_next_334 := x_335;
                  x_338 := node_worker_310(NULL, x_312, c_next_334, n_320);
                  x_337 := force(x_338);
                  x_332 := x_337;
                }
              }
              x_321 := x_332;
            }
          }
          x_318 := x_321;
          free(_316);
        }
      }
      return x_318;
    };
  return x_315;
}

fn empty_worker_339(c_340%U) {
  x_341 :=
    lazy {
      x_343 := recv[L](c_340);
      _342 := x_343;
      match[L](_342){
        ex1LL_46(m_345, n_346) => {
          match(m_345){
            Free_15 => {
              x_348 := close[true](n_346);
              x_347 := x_348;
            }
            Dequeue_17 => {
              x_350 := empty_worker_339(n_346);
              x_349 := force(x_350);
              x_347 := x_349;
            }
            _ => {
              match[L](m_345){
                Enqueue_16(n_352) => {
                  x_355 :=
                    fn lam_356(_357%L) {
                      x_358 := node_worker_310(NULL, n_352, _357, n_346);
                      return x_358;
                    };
                  x_354 := fork(x_355);
                  c0_353 := x_354;
                  x_360 := empty_worker_339(c0_353);
                  x_359 := force(x_360);
                  x_351 := x_359;
                  free(m_345);
                }
              }
              x_347 := x_351;
            }
          }
          x_344 := x_347;
          free(_342);
        }
      }
      return x_344;
    };
  return x_341;
}

fn q_empty_361(__362%U) {
  x_363 :=
    lazy {
      x_365 :=
        fn lam_366(_367%L) { x_368 := empty_worker_339(_367);
                             return x_368; };
      x_364 := fork(x_365);
      return x_364;
    };
  return x_363;
}

fn q_free_369(xs_370%U, q_371%U) {
  x_372 :=
    lazy {
      x_374 := force(q_371);
      q_373 := x_374;
      x_376 := send(q_373, Free_15);
      q_375 := x_376;
      x_377 := close[false](q_375);
      return x_377;
    };
  return x_372;
}

fn q_enqueue_378(xs_379%U, n_380%U, q_381%U) {
  x_382 :=
    lazy {
      x_384 := force(q_381);
      q_383 := x_384;
      x_387 := mkconstr(Enqueue_16, [n_380]);
      x_386 := send(q_383, x_387);
      q_385 := x_386;
      return q_385;
    };
  return x_382;
}

fn q_dequeue_388(x_389%U, xs_390%U, q_391%U) {
  x_392 :=
    lazy {
      x_394 := force(q_391);
      q_393 := x_394;
      x_396 := send(q_393, Dequeue_17);
      q_395 := x_396;
      x_398 := recv[U](q_395);
      _397 := x_398;
      match[L](_397){
        ex1UL_48(m_400, n_401) => {
          x_403 := recv[L](n_401);
          _402 := x_403;
          match[L](_402){
            ex1LL_46(m_405, n_406) => {
              x_408 := close[false](n_406);
              __407 := x_408;
              x_409 := lazy { 
                              return m_405; };
              x_410 := reconstr(_402, ex1UL_48, [m_400, x_409]);
              x_404 := x_410;
            }
          }
          x_399 := x_404;
          free(_397);
        }
      }
      return x_399;
    };
  return x_392;
}

myqueue_411 := {
  x_412 := q_empty_361(ttU_25);
  return x_412;
};

myqueue_413 := {
  x_414 := q_enqueue_378(NULL, 0, myqueue_411);
  return x_414;
};

myqueue_415 := {
  x_416 := q_enqueue_378(NULL, 1, myqueue_413);
  return x_416;
};

myqueue_417 := {
  x_418 := q_enqueue_378(NULL, 2, myqueue_415);
  return x_418;
};

myqueue_419 := {
  x_420 := q_enqueue_378(NULL, 3, myqueue_417);
  return x_420;
};

myqueue_421 := {
  x_422 := q_enqueue_378(NULL, 4, myqueue_419);
  return x_422;
};

myqueue_423 := {
  x_424 := q_enqueue_378(NULL, 5, myqueue_421);
  return x_424;
};

myqueue_425 := {
  x_426 := q_enqueue_378(NULL, 6, myqueue_423);
  return x_426;
};

main := {
  x_427 :=
    lazy {
      x_430 := q_dequeue_388(NULL, NULL, myqueue_425);
      x_429 := force(x_430);
      _428 := x_429;
      match[L](_428){
        ex1UL_48(m_432, n_433) => {
          x_436 := q_dequeue_388(NULL, NULL, n_433);
          x_435 := force(x_436);
          _434 := x_435;
          match[L](_434){
            ex1UL_48(m_438, n_439) => {
              x_442 := q_dequeue_388(NULL, NULL, n_439);
              x_441 := force(x_442);
              _440 := x_441;
              match[L](_440){
                ex1UL_48(m_444, n_445) => {
                  x_448 := q_free_369(NULL, n_445);
                  x_447 := force(x_448);
                  _446 := x_447;
                  match(_446){
                    ttU_25 => {
                      x_459 := str("x := ");
                      x_460 := string_of_int_282(m_432);
                      x_458 := cat(x_459, x_460);
                      x_461 := str("\n");
                      x_457 := cat(x_458, x_461);
                      x_462 := str("y := ");
                      x_456 := cat(x_457, x_462);
                      x_463 := string_of_int_282(m_438);
                      x_455 := cat(x_456, x_463);
                      x_464 := str("\n");
                      x_454 := cat(x_455, x_464);
                      x_465 := str("z := ");
                      x_453 := cat(x_454, x_465);
                      x_466 := string_of_int_282(m_444);
                      x_452 := cat(x_453, x_466);
                      x_467 := str("\n");
                      x_451 := cat(x_452, x_467);
                      x_450 := print(x_451);
                      x_449 := x_450;
                    }
                  }
                  x_443 := x_449;
                  free(_440);
                }
              }
              x_437 := x_443;
              free(_434);
            }
          }
          x_431 := x_437;
          free(_428);
        }
      }
      return x_431;
    };
  return x_427;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_468(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_469(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_470 := fn0_idU_468(A_2, m_3);
  return x_470;
}

fn fn0_idL_471(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_472(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_473 := fn0_idL_471(A_5, m_6);
  return x_473;
}

fn fn0_rwlUU_474(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_475(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_476 := fn0_rwlUU_474(A_8, m_9, n_10, B_11, __12, __13);
  return x_476;
}

fn fn0_rwlUL_477(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_478(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_479 := fn0_rwlUL_477(A_15, m_16, n_17, B_18, __19, __20);
  return x_479;
}

fn fn0_rwlLU_480(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_481(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_482 := fn0_rwlLU_480(A_22, m_23, n_24, B_25, __26, __27);
  return x_482;
}

fn fn0_rwlLL_483(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_484(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_485 := fn0_rwlLL_483(A_29, m_30, n_31, B_32, __33, __34);
  return x_485;
}

fn fn0_rwrUU_486(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_487(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_488 := fn0_rwrUU_486(A_36, m_37, n_38, B_39, __40, __41);
  return x_488;
}

fn fn0_rwrUL_489(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_490(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_491 := fn0_rwrUL_489(A_43, m_44, n_45, B_46, __47, __48);
  return x_491;
}

fn fn0_rwrLU_492(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_493(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_494 := fn0_rwrLU_492(A_50, m_51, n_52, B_53, __54, __55);
  return x_494;
}

fn fn0_rwrLL_495(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_496(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_497 := fn0_rwrLL_495(A_57, m_58, n_59, B_60, __61, __62);
  return x_497;
}

fn fn0_sing_elimUU_498(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_499(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_500 := fn0_sing_elimUU_498(A_64, x_65, __66);
  return x_500;
}

fn fn0_sing_elimUL_501(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_502(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_503 := fn0_sing_elimUL_501(A_68, x_69, __70);
  return x_503;
}

fn fn0_sing_elimLU_504(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_505(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_506 := fn0_sing_elimLU_504(A_72, x_73, __74);
  return x_506;
}

fn fn0_sing_elimLL_507(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_508(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_509 := fn0_sing_elimLL_507(A_76, x_77, __78);
  return x_509;
}

fn fn0_not_510(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_511(env) {
  __80 := env[1];
  x_512 := fn0_not_510(__80);
  return x_512;
}

fn fn0_and_513(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_514(env) {
  __83 := env[1];
  __84 := env[2];
  x_515 := fn0_and_513(__83, __84);
  return x_515;
}

fn fn0_or_516(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_517(env) {
  __88 := env[1];
  __89 := env[2];
  x_518 := fn0_or_516(__88, __89);
  return x_518;
}

fn fn0_xor_519(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_520(env) {
  __93 := env[1];
  __94 := env[2];
  x_521 := fn0_xor_519(__93, __94);
  return x_521;
}

fn fn0_string_of_bool_522(__99) {
  switch(__99){
    true_4 => {
      str(x_101, "true")
      move1(x_100, x_101);
      break;
    }
    false_5 => {
      str(x_102, "false")
      move1(x_100, x_102);
      break;
    }
  }
  return x_100;
}

fn fn1_string_of_bool_523(env) {
  __99 := env[1];
  x_524 := fn0_string_of_bool_522(__99);
  return x_524;
}

fn fn0_lte_525(__104, __105) {
  switch(__104){
    zero_6 => {
      move1(x_106, true_4);
      break;
    }
    _ => {
      getbox(n_108, __104, 0);
      switch(__105){
        zero_6 => {
          move1(x_109, false_5);
          break;
        }
        _ => {
          getbox(n_111, __105, 0);
          x_112 := fn0_lte_525(n_108, n_111);
          move1(x_110, x_112);
          move1(x_109, x_110);
          break;
        }
      }
      move1(x_107, x_109);
      move1(x_106, x_107);
      break;
    }
  }
  return x_106;
}

fn fn1_lte_526(env) {
  __104 := env[1];
  __105 := env[2];
  x_527 := fn0_lte_525(__104, __105);
  return x_527;
}

fn fn0_lt_528(x_114, y_115) {
  mkbox(x_117, succ_7, 1);
  setbox(x_117, x_114, 0);
  x_116 := fn0_lte_525(x_117, y_115);
  return x_116;
}

fn fn1_lt_529(env) {
  x_114 := env[1];
  y_115 := env[2];
  x_530 := fn0_lt_528(x_114, y_115);
  return x_530;
}

fn fn0_pred_531(__119) {
  switch(__119){
    zero_6 => {
      move1(x_120, zero_6);
      break;
    }
    _ => {
      getbox(n_122, __119, 0);
      move1(x_121, n_122);
      move1(x_120, x_121);
      break;
    }
  }
  return x_120;
}

fn fn1_pred_532(env) {
  __119 := env[1];
  x_533 := fn0_pred_531(__119);
  return x_533;
}

fn fn0_add_534(__124, __125) {
  switch(__124){
    zero_6 => {
      move1(x_126, __125);
      break;
    }
    _ => {
      getbox(n_128, __124, 0);
      x_129 := fn0_add_534(n_128, __125);
      mkbox(x_130, succ_7, 1);
      setbox(x_130, x_129, 0);
      move1(x_127, x_130);
      move1(x_126, x_127);
      break;
    }
  }
  return x_126;
}

fn fn1_add_535(env) {
  __124 := env[1];
  __125 := env[2];
  x_536 := fn0_add_534(__124, __125);
  return x_536;
}

fn fn0_sub_537(__132, __133) {
  switch(__133){
    zero_6 => {
      move1(x_134, __132);
      break;
    }
    _ => {
      getbox(n_136, __133, 0);
      x_138 := fn0_pred_531(__132);
      x_137 := fn0_sub_537(x_138, n_136);
      move1(x_135, x_137);
      move1(x_134, x_135);
      break;
    }
  }
  return x_134;
}

fn fn1_sub_538(env) {
  __132 := env[1];
  __133 := env[2];
  x_539 := fn0_sub_537(__132, __133);
  return x_539;
}

fn fn0_mul_540(__140, __141) {
  switch(__140){
    zero_6 => {
      move1(x_142, zero_6);
      break;
    }
    _ => {
      getbox(n_144, __140, 0);
      x_146 := fn0_mul_540(n_144, __141);
      x_145 := fn0_add_534(__141, x_146);
      move1(x_143, x_145);
      move1(x_142, x_143);
      break;
    }
  }
  return x_142;
}

fn fn1_mul_541(env) {
  __140 := env[1];
  __141 := env[2];
  x_542 := fn0_mul_540(__140, __141);
  return x_542;
}

fn fn0_div_543(x_148, y_149) {
  x_151 := fn0_lt_528(x_148, y_149);
  switch(x_151){
    true_4 => {
      move1(x_150, zero_6);
      break;
    }
    false_5 => {
      mkclo1(x_153, fn1_loop_545, fvc:=2, argc:=2);
      setclo(x_153, pred_118, 1);
      setclo(x_153, sub_131, 2);
      move1(loop_152, x_153);
      appc(x_549, loop_152, x_148);
      appc(x_550, x_549, y_149);
      move1(x_166, x_550);
      move1(x_150, x_166);
      break;
    }
  }
  return x_150;
}

fn fn1_div_544(env) {
  x_148 := env[1];
  y_149 := env[2];
  x_552 := fn0_div_543(x_148, y_149);
  return x_552;
}

fn fn0_rem_553(x_168, y_169) {
  x_172 := fn0_div_543(x_168, y_169);
  x_171 := fn0_mul_540(x_172, y_169);
  x_170 := fn0_sub_537(x_168, x_171);
  return x_170;
}

fn fn1_rem_554(env) {
  x_168 := env[1];
  y_169 := env[2];
  x_555 := fn0_rem_553(x_168, y_169);
  return x_555;
}

fn fn0_rconsUU_556(A_174, __175, __176) {
  switch(__175){
    nilUU_36 => {
      mkbox(x_178, consUU_37, 2);
      setbox(x_178, __176, 0);
      setbox(x_178, nilUU_36, 1);
      move1(x_177, x_178);
      break;
    }
    _ => {
      getbox(hd_180, __175, 0);
      getbox(tl_181, __175, 1);
      x_182 := fn0_rconsUU_556(NULL, tl_181, __176);
      mkbox(x_183, consUU_37, 2);
      setbox(x_183, hd_180, 0);
      setbox(x_183, x_182, 1);
      move1(x_179, x_183);
      move1(x_177, x_179);
      break;
    }
  }
  return x_177;
}

fn fn1_rconsUU_557(env) {
  A_174 := env[1];
  __175 := env[2];
  __176 := env[3];
  x_558 := fn0_rconsUU_556(A_174, __175, __176);
  return x_558;
}

fn fn0_rconsUL_559(A_185, __186, __187) {
  switch(__186){
    nilUL_34 => {
      mkbox(x_189, consUL_35, 2);
      setbox(x_189, __187, 0);
      setbox(x_189, nilUL_34, 1);
      move1(x_188, x_189);
      break;
    }
    _ => {
      getbox(hd_191, __186, 0);
      getbox(tl_192, __186, 1);
      x_193 := fn0_rconsUL_559(NULL, tl_192, __187);
      rebox(x_194, __186, consUL_35);
      setbox(x_194, hd_191, 0);
      setbox(x_194, x_193, 1);
      move1(x_190, x_194);
      move1(x_188, x_190);
      break;
    }
  }
  return x_188;
}

fn fn1_rconsUL_560(env) {
  A_185 := env[1];
  __186 := env[2];
  __187 := env[3];
  x_561 := fn0_rconsUL_559(A_185, __186, __187);
  return x_561;
}

fn fn0_rconsLL_562(A_196, __197, __198) {
  switch(__197){
    nilLL_30 => {
      mkbox(x_200, consLL_31, 2);
      setbox(x_200, __198, 0);
      setbox(x_200, nilLL_30, 1);
      move1(x_199, x_200);
      break;
    }
    _ => {
      getbox(hd_202, __197, 0);
      getbox(tl_203, __197, 1);
      x_204 := fn0_rconsLL_562(NULL, tl_203, __198);
      rebox(x_205, __197, consLL_31);
      setbox(x_205, hd_202, 0);
      setbox(x_205, x_204, 1);
      move1(x_201, x_205);
      move1(x_199, x_201);
      break;
    }
  }
  return x_199;
}

fn fn1_rconsLL_563(env) {
  A_196 := env[1];
  __197 := env[2];
  __198 := env[3];
  x_564 := fn0_rconsLL_562(A_196, __197, __198);
  return x_564;
}

fn fn0_free_listUU_565(A_207, f_208, __209) {
  switch(__209){
    nilUU_36 => {
      move1(x_210, ttU_25);
      break;
    }
    _ => {
      getbox(hd_212, __209, 0);
      getbox(tl_213, __209, 1);
      appc(x_567, f_208, hd_212);
      move1(x_215, x_567);
      move1(__214, x_215);
      x_216 := fn0_free_listUU_565(NULL, f_208, tl_213);
      move1(x_211, x_216);
      move1(x_210, x_211);
      break;
    }
  }
  return x_210;
}

fn fn1_free_listUU_566(env) {
  A_207 := env[1];
  f_208 := env[2];
  __209 := env[3];
  x_569 := fn0_free_listUU_565(A_207, f_208, __209);
  return x_569;
}

fn fn0_free_listUL_570(A_218, f_219, __220) {
  switch(__220){
    nilUL_34 => {
      move1(x_221, ttU_25);
      break;
    }
    _ => {
      getbox(hd_223, __220, 0);
      getbox(tl_224, __220, 1);
      appc(x_572, f_219, hd_223);
      move1(x_226, x_572);
      move1(__225, x_226);
      x_227 := fn0_free_listUL_570(NULL, f_219, tl_224);
      move1(x_222, x_227);
      free(__220);
      move1(x_221, x_222);
      break;
    }
  }
  return x_221;
}

fn fn1_free_listUL_571(env) {
  A_218 := env[1];
  f_219 := env[2];
  __220 := env[3];
  x_574 := fn0_free_listUL_570(A_218, f_219, __220);
  return x_574;
}

fn fn0_free_listLL_575(A_229, f_230, __231) {
  switch(__231){
    nilLL_30 => {
      move1(x_232, ttU_25);
      break;
    }
    _ => {
      getbox(hd_234, __231, 0);
      getbox(tl_235, __231, 1);
      appc(x_577, f_230, hd_234);
      move1(x_237, x_577);
      move1(__236, x_237);
      x_238 := fn0_free_listLL_575(NULL, f_230, tl_235);
      move1(x_233, x_238);
      free(__231);
      move1(x_232, x_233);
      break;
    }
  }
  return x_232;
}

fn fn1_free_listLL_576(env) {
  A_229 := env[1];
  f_230 := env[2];
  __231 := env[3];
  x_579 := fn0_free_listLL_575(A_229, f_230, __231);
  return x_579;
}

fn fn0_pow_580(x_240, y_241) {
  mkclo1(x_243, fn1_loop_582, fvc:=1, argc:=2);
  setclo(x_243, x_240, 1);
  move1(loop_242, x_243);
  appc(x_586, loop_242, 1);
  appc(x_587, x_586, y_241);
  move1(x_252, x_587);
  return x_252;
}

fn fn1_pow_581(env) {
  x_240 := env[1];
  y_241 := env[2];
  x_589 := fn0_pow_580(x_240, y_241);
  return x_589;
}

fn fn0_powm_590(x_254, y_255, m_256) {
  mkclo1(x_258, fn1_loop_592, fvc:=2, argc:=2);
  setclo(x_258, x_254, 1);
  setclo(x_258, m_256, 2);
  move1(loop_257, x_258);
  appc(x_596, loop_257, 1);
  appc(x_597, x_596, y_255);
  move1(x_268, x_597);
  return x_268;
}

fn fn1_powm_591(env) {
  x_254 := env[1];
  y_255 := env[2];
  m_256 := env[3];
  x_599 := fn0_powm_590(x_254, y_255, m_256);
  return x_599;
}

fn fn0_ord_600(c_270) {
  ord(x_271, c_270);
  return x_271;
}

fn fn1_ord_601(env) {
  c_270 := env[1];
  x_602 := fn0_ord_600(c_270);
  return x_602;
}

fn fn0_chr_603(i_273) {
  chr(x_274, i_273);
  return x_274;
}

fn fn1_chr_604(env) {
  i_273 := env[1];
  x_605 := fn0_chr_603(i_273);
  return x_605;
}

fn fn0_str_606(c_276) {
  str(x_278, "")
  push(x_277, x_278, c_276);
  return x_277;
}

fn fn1_str_607(env) {
  c_276 := env[1];
  x_608 := fn0_str_606(c_276);
  return x_608;
}

fn fn0_strlen_609(s_280) {
  size(x_281, s_280);
  return x_281;
}

fn fn1_strlen_610(env) {
  s_280 := env[1];
  x_611 := fn0_strlen_609(s_280);
  return x_611;
}

fn fn0_string_of_int_612(i_283) {
  mkclo1(x_285, fn1_aux_614, fvc:=3, argc:=1);
  setclo(x_285, ord_269, 1);
  setclo(x_285, chr_272, 2);
  setclo(x_285, str_275, 3);
  move1(aux_284, x_285);
  lte(x_304, 0, i_283);
  switch(x_304){
    true_4 => {
      appc(x_617, aux_284, i_283);
      move1(x_305, x_617);
      move1(x_303, x_305);
      break;
    }
    false_5 => {
      str(x_307, "~")
      neg(x_309, i_283);
      appc(x_619, aux_284, x_309);
      move1(x_308, x_619);
      cat(x_306, x_307, x_308);
      move1(x_303, x_306);
      break;
    }
  }
  return x_303;
}

fn fn1_string_of_int_613(env) {
  i_283 := env[1];
  x_621 := fn0_string_of_int_612(i_283);
  return x_621;
}

fn fn0_node_worker_622(xs_311, x_312, __313, __314) {
  lazy(x_315, lazy__624, 4);
  setlazy(x_315, node_worker_310, 0);
  setlazy(x_315, x_312, 1);
  setlazy(x_315, __313, 2);
  setlazy(x_315, __314, 3);
  return x_315;
}

fn fn1_node_worker_623(env) {
  xs_311 := env[1];
  x_312 := env[2];
  __313 := env[3];
  __314 := env[4];
  x_625 := fn0_node_worker_622(xs_311, x_312, __313, __314);
  return x_625;
}

fn fn0_empty_worker_626(c_340) {
  lazy(x_341, lazy__628, 3);
  setlazy(x_341, node_worker_310, 0);
  setlazy(x_341, empty_worker_339, 1);
  setlazy(x_341, c_340, 2);
  return x_341;
}

fn fn1_empty_worker_627(env) {
  c_340 := env[1];
  x_630 := fn0_empty_worker_626(c_340);
  return x_630;
}

fn fn0_q_empty_631(__362) {
  lazy(x_363, lazy__633, 1);
  setlazy(x_363, empty_worker_339, 0);
  return x_363;
}

fn fn1_q_empty_632(env) {
  __362 := env[1];
  x_635 := fn0_q_empty_631(__362);
  return x_635;
}

fn fn0_q_free_636(xs_370, q_371) {
  lazy(x_372, lazy__638, 1);
  setlazy(x_372, q_371, 0);
  return x_372;
}

fn fn1_q_free_637(env) {
  xs_370 := env[1];
  q_371 := env[2];
  x_639 := fn0_q_free_636(xs_370, q_371);
  return x_639;
}

fn fn0_q_enqueue_640(xs_379, n_380, q_381) {
  lazy(x_382, lazy__642, 2);
  setlazy(x_382, n_380, 0);
  setlazy(x_382, q_381, 1);
  return x_382;
}

fn fn1_q_enqueue_641(env) {
  xs_379 := env[1];
  n_380 := env[2];
  q_381 := env[3];
  x_643 := fn0_q_enqueue_640(xs_379, n_380, q_381);
  return x_643;
}

fn fn0_q_dequeue_644(x_389, xs_390, q_391) {
  lazy(x_392, lazy__646, 1);
  setlazy(x_392, q_391, 0);
  return x_392;
}

fn fn1_q_dequeue_645(env) {
  x_389 := env[1];
  xs_390 := env[2];
  q_391 := env[3];
  x_648 := fn0_q_dequeue_644(x_389, xs_390, q_391);
  return x_648;
}

fn lazy__650(env) {
  string_of_int_282 := env[0];
  q_free_369 := env[1];
  q_dequeue_388 := env[2];
  myqueue_425 := env[3];
  x_430 := fn0_q_dequeue_644(NULL, NULL, myqueue_425);
  force(x_429, x_430);
  free(x_430);
  move1(_428, x_429);
  getbox(m_432, _428, 0);
  getbox(n_433, _428, 1);
  x_436 := fn0_q_dequeue_644(NULL, NULL, n_433);
  force(x_435, x_436);
  free(x_436);
  move1(_434, x_435);
  getbox(m_438, _434, 0);
  getbox(n_439, _434, 1);
  x_442 := fn0_q_dequeue_644(NULL, NULL, n_439);
  force(x_441, x_442);
  free(x_442);
  move1(_440, x_441);
  getbox(m_444, _440, 0);
  getbox(n_445, _440, 1);
  x_448 := fn0_q_free_636(NULL, n_445);
  force(x_447, x_448);
  free(x_448);
  move1(_446, x_447);
  switch(_446){
    ttU_25 => {
      str(x_459, "x := ")
      x_460 := fn0_string_of_int_612(m_432);
      cat(x_458, x_459, x_460);
      str(x_461, "\n")
      cat(x_457, x_458, x_461);
      str(x_462, "y := ")
      cat(x_456, x_457, x_462);
      x_463 := fn0_string_of_int_612(m_438);
      cat(x_455, x_456, x_463);
      str(x_464, "\n")
      cat(x_454, x_455, x_464);
      str(x_465, "z := ")
      cat(x_453, x_454, x_465);
      x_466 := fn0_string_of_int_612(m_444);
      cat(x_452, x_453, x_466);
      str(x_467, "\n")
      cat(x_451, x_452, x_467);
      print(x_450, x_451);
      move1(x_449, x_450);
      break;
    }
  }
  move1(x_443, x_449);
  free(_440);
  move1(x_437, x_443);
  free(_434);
  move1(x_431, x_437);
  free(_428);
  return x_431;
}

fn lazy__646(env) {
  q_391 := env[0];
  force(x_394, q_391);
  free(q_391);
  move1(q_393, x_394);
  send(x_396, q_393, Dequeue_17);
  move1(q_395, x_396);
  recv0(x_398, q_395);
  move1(_397, x_398);
  getbox(m_400, _397, 0);
  getbox(n_401, _397, 1);
  recv1(x_403, n_401);
  move1(_402, x_403);
  getbox(m_405, _402, 0);
  getbox(n_406, _402, 1);
  close1(x_408, n_406);
  move1(__407, x_408);
  lazy(x_409, lazy__647, 1);
  setlazy(x_409, m_405, 0);
  rebox(x_410, _402, ex1UL_48);
  setbox(x_410, m_400, 0);
  setbox(x_410, x_409, 1);
  move1(x_404, x_410);
  move1(x_399, x_404);
  free(_397);
  return x_399;
}

fn lazy__647(env) {
  m_405 := env[0];
  return m_405;
}

fn lazy__642(env) {
  n_380 := env[0];
  q_381 := env[1];
  force(x_384, q_381);
  free(q_381);
  move1(q_383, x_384);
  mkbox(x_387, Enqueue_16, 1);
  setbox(x_387, n_380, 0);
  send(x_386, q_383, x_387);
  move1(q_385, x_386);
  return q_385;
}

fn lazy__638(env) {
  q_371 := env[0];
  force(x_374, q_371);
  free(q_371);
  move1(q_373, x_374);
  send(x_376, q_373, Free_15);
  move1(q_375, x_376);
  close1(x_377, q_375);
  return x_377;
}

fn lazy__633(env) {
  empty_worker_339 := env[0];
  mkclo1(x_365, fn1_lam_634, fvc:=1, argc:=1);
  setclo(x_365, empty_worker_339, 1);
  fork(x_364, x_365);
  return x_364;
}

fn fn1_lam_634(env) {
  lam_366 := env[0];
  empty_worker_339 := env[1];
  _367 := env[2];
  x_368 := fn0_empty_worker_626(_367);
  return x_368;
}

fn lazy__628(env) {
  node_worker_310 := env[0];
  empty_worker_339 := env[1];
  c_340 := env[2];
  recv1(x_343, c_340);
  move1(_342, x_343);
  getbox(m_345, _342, 0);
  getbox(n_346, _342, 1);
  switch(m_345){
    Free_15 => {
      close0(x_348, n_346);
      move1(x_347, x_348);
      break;
    }
    Dequeue_17 => {
      x_350 := fn0_empty_worker_626(n_346);
      force(x_349, x_350);
      free(x_350);
      move1(x_347, x_349);
      break;
    }
    _ => {
      getbox(n_352, m_345, 0);
      mkclo1(x_355, fn1_lam_629, fvc:=3, argc:=1);
      setclo(x_355, node_worker_310, 1);
      setclo(x_355, n_346, 2);
      setclo(x_355, n_352, 3);
      fork(x_354, x_355);
      move1(c0_353, x_354);
      x_360 := fn0_empty_worker_626(c0_353);
      force(x_359, x_360);
      free(x_360);
      move1(x_351, x_359);
      free(m_345);
      move1(x_347, x_351);
      break;
    }
  }
  move1(x_344, x_347);
  free(_342);
  return x_344;
}

fn fn1_lam_629(env) {
  lam_356 := env[0];
  node_worker_310 := env[1];
  n_346 := env[2];
  n_352 := env[3];
  _357 := env[4];
  x_358 := fn0_node_worker_622(NULL, n_352, _357, n_346);
  return x_358;
}

fn lazy__624(env) {
  node_worker_310 := env[0];
  x_312 := env[1];
  __313 := env[2];
  __314 := env[3];
  recv1(x_317, __314);
  move1(_316, x_317);
  getbox(m_319, _316, 0);
  getbox(n_320, _316, 1);
  switch(m_319){
    Free_15 => {
      send(x_323, __313, Free_15);
      move1(c_next_322, x_323);
      close1(x_325, c_next_322);
      move1(__324, x_325);
      close0(x_326, n_320);
      move1(x_321, x_326);
      break;
    }
    Dequeue_17 => {
      send(x_328, n_320, x_312);
      move1(c_327, x_328);
      send(x_330, c_327, __313);
      move1(c_329, x_330);
      close0(x_331, c_329);
      move1(x_321, x_331);
      break;
    }
    _ => {
      getbox(n_333, m_319, 0);
      rebox(x_336, m_319, Enqueue_16);
      setbox(x_336, n_333, 0);
      send(x_335, __313, x_336);
      move1(c_next_334, x_335);
      x_338 := fn0_node_worker_622(NULL, x_312, c_next_334, n_320);
      force(x_337, x_338);
      free(x_338);
      move1(x_332, x_337);
      move1(x_321, x_332);
      break;
    }
  }
  move1(x_318, x_321);
  free(_316);
  return x_318;
}

fn fn1_aux_614(env) {
  aux_286 := env[0];
  ord_269 := env[1];
  chr_272 := env[2];
  str_275 := env[3];
  i_287 := env[4];
  lte(x_289, 10, i_287);
  switch(x_289){
    true_4 => {
      mod(x_291, i_287, 10);
      move1(r_290, x_291);
      div(x_293, i_287, 10);
      move1(i_292, x_293);
      appc(x_615, aux_286, i_292);
      move1(x_295, x_615);
      x_298 := fn0_ord_600(0);
      add(x_297, r_290, x_298);
      x_296 := fn0_chr_603(x_297);
      push(x_294, x_295, x_296);
      move1(x_288, x_294);
      break;
    }
    false_5 => {
      x_302 := fn0_ord_600(0);
      add(x_301, i_287, x_302);
      x_300 := fn0_chr_603(x_301);
      x_299 := fn0_str_606(x_300);
      move1(x_288, x_299);
      break;
    }
  }
  return x_288;
}

fn fn1_loop_592(env) {
  loop_259 := env[0];
  x_254 := env[1];
  m_256 := env[2];
  acc_260 := env[3];
  y_261 := env[4];
  lte(x_263, y_261, 0);
  switch(x_263){
    true_4 => {
      move1(x_262, acc_260);
      break;
    }
    false_5 => {
      mul(x_266, x_254, acc_260);
      mod(x_265, x_266, m_256);
      sub(x_267, y_261, 1);
      appc(x_593, loop_259, x_265);
      appc(x_594, x_593, x_267);
      move1(x_264, x_594);
      move1(x_262, x_264);
      break;
    }
  }
  return x_262;
}

fn fn1_loop_582(env) {
  loop_244 := env[0];
  x_240 := env[1];
  acc_245 := env[2];
  y_246 := env[3];
  lte(x_248, y_246, 0);
  switch(x_248){
    true_4 => {
      move1(x_247, acc_245);
      break;
    }
    false_5 => {
      mul(x_250, x_240, acc_245);
      sub(x_251, y_246, 1);
      appc(x_583, loop_244, x_250);
      appc(x_584, x_583, x_251);
      move1(x_249, x_584);
      move1(x_247, x_249);
      break;
    }
  }
  return x_247;
}

fn fn1_loop_545(env) {
  loop_154 := env[0];
  pred_118 := env[1];
  sub_131 := env[2];
  x_155 := env[3];
  y_156 := env[4];
  x_159 := fn0_pred_531(y_156);
  x_158 := fn0_sub_537(x_155, x_159);
  switch(x_158){
    zero_6 => {
      move1(x_157, zero_6);
      break;
    }
    _ => {
      x_162 := fn0_pred_531(y_156);
      x_161 := fn0_sub_537(x_155, x_162);
      getbox(n_163, x_161, 0);
      appc(x_546, loop_154, n_163);
      appc(x_547, x_546, y_156);
      move1(x_164, x_547);
      mkbox(x_165, succ_7, 1);
      setbox(x_165, x_164, 0);
      move1(x_160, x_165);
      move1(x_157, x_160);
      break;
    }
  }
  return x_157;
}

main {
  mkclo0(idU_1, fn1_idU_469, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_472, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_475, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_478, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_481, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_484, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_487, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_490, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_493, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_496, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_499, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_502, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_505, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_508, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_511, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_514, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_517, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_520, fvc:=0, argc:=2);
  mkclo0(string_of_bool_98, fn1_string_of_bool_523, fvc:=0, argc:=1);
  mkclo0(lte_103, fn1_lte_526, fvc:=0, argc:=2);
  mkclo0(lt_113, fn1_lt_529, fvc:=0, argc:=2);
  mkclo0(pred_118, fn1_pred_532, fvc:=0, argc:=1);
  mkclo0(add_123, fn1_add_535, fvc:=0, argc:=2);
  mkclo0(sub_131, fn1_sub_538, fvc:=0, argc:=2);
  mkclo0(mul_139, fn1_mul_541, fvc:=0, argc:=2);
  mkclo0(div_147, fn1_div_544, fvc:=0, argc:=2);
  mkclo0(rem_167, fn1_rem_554, fvc:=0, argc:=2);
  mkclo0(rconsUU_173, fn1_rconsUU_557, fvc:=0, argc:=3);
  mkclo0(rconsUL_184, fn1_rconsUL_560, fvc:=0, argc:=3);
  mkclo0(rconsLL_195, fn1_rconsLL_563, fvc:=0, argc:=3);
  mkclo0(free_listUU_206, fn1_free_listUU_566, fvc:=0, argc:=3);
  mkclo0(free_listUL_217, fn1_free_listUL_571, fvc:=0, argc:=3);
  mkclo0(free_listLL_228, fn1_free_listLL_576, fvc:=0, argc:=3);
  mkclo0(pow_239, fn1_pow_581, fvc:=0, argc:=2);
  mkclo0(powm_253, fn1_powm_591, fvc:=0, argc:=3);
  mkclo0(ord_269, fn1_ord_601, fvc:=0, argc:=1);
  mkclo0(chr_272, fn1_chr_604, fvc:=0, argc:=1);
  mkclo0(str_275, fn1_str_607, fvc:=0, argc:=1);
  mkclo0(strlen_279, fn1_strlen_610, fvc:=0, argc:=1);
  mkclo0(string_of_int_282, fn1_string_of_int_613, fvc:=0, argc:=1);
  mkclo0(node_worker_310, fn1_node_worker_623, fvc:=0, argc:=4);
  mkclo0(empty_worker_339, fn1_empty_worker_627, fvc:=0, argc:=1);
  mkclo0(q_empty_361, fn1_q_empty_632, fvc:=0, argc:=1);
  mkclo0(q_free_369, fn1_q_free_637, fvc:=0, argc:=2);
  mkclo0(q_enqueue_378, fn1_q_enqueue_641, fvc:=0, argc:=3);
  mkclo0(q_dequeue_388, fn1_q_dequeue_645, fvc:=0, argc:=3);
  x_412 := fn0_q_empty_631(ttU_25);
  move0(myqueue_411, x_412);
  x_414 := fn0_q_enqueue_640(NULL, 0, myqueue_411);
  move0(myqueue_413, x_414);
  x_416 := fn0_q_enqueue_640(NULL, 1, myqueue_413);
  move0(myqueue_415, x_416);
  x_418 := fn0_q_enqueue_640(NULL, 2, myqueue_415);
  move0(myqueue_417, x_418);
  x_420 := fn0_q_enqueue_640(NULL, 3, myqueue_417);
  move0(myqueue_419, x_420);
  x_422 := fn0_q_enqueue_640(NULL, 4, myqueue_419);
  move0(myqueue_421, x_422);
  x_424 := fn0_q_enqueue_640(NULL, 5, myqueue_421);
  move0(myqueue_423, x_424);
  x_426 := fn0_q_enqueue_640(NULL, 6, myqueue_423);
  move0(myqueue_425, x_426);
  lazy(x_427, lazy__650, 4);
  setlazy(x_427, string_of_int_282, 0);
  setlazy(x_427, q_free_369, 1);
  setlazy(x_427, q_dequeue_388, 2);
  setlazy(x_427, myqueue_425, 3);
  force(x_649, x_427);
  return x_649;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

