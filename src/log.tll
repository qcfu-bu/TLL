[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "cmsort_ch"; relv = N;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "cmsort_ch"),
              [([(PId "xs")],
                (Some (Ch (true,
                         (Act (R, true,
                            (UOpr ("`",
                               (App [(Id ("msort", I)); (Id ("xs", I))]))),
                            (Binder ("_", End))))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "cmsort_worker"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("_",
                 (Pi (R, U,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("zs",
                       (Pi (R, L,
                          (App
                             [(Inst ("cmsort_ch", [(SId "t")], I));
                               (Id ("zs", I))]),
                          (Binder ("_", (IO (Id ("unit", I)))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cmsort_worker"),
              [([(PId "_"); (PId "nil"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Send (Id ("c", I)));
                              (App [(Id ("just", I)); (Id ("nil", I))])]),
                         (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "_"); (PBOpr ("::", (PId "z"), (PId "nil")));
                   (PId "c")],
                 (Some (MLet (
                          (App
                             [(Send (Id ("c", I)));
                               (App
                                  [(Id ("just", I));
                                    (BOpr ("::", (Id ("z", I)),
                                       (Id ("nil", I))))
                                    ])
                               ]),
                          (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "i"); (PId "zs"); (PId "c")],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("i", I)), (Int 0))), None)],
                          None,
                          [([(PId "true")],
                            (Some (MLet (
                                     (App
                                        [(Send (Id ("c", I)));
                                          (App
                                             [(Id ("just", I));
                                               (App
                                                  [(Id ("msort", I));
                                                    (Id ("zs", I))])
                                               ])
                                          ]),
                                     (Binder ((PId "c"),
                                        (Close (Id ("c", I)))))
                                     ))));
                            ([(PId "false")],
                             (Some (Match (
                                      [(R,
                                        (App
                                           [(Id ("split", I)); (Id ("zs", I))
                                             ]),
                                        (Some ("h1", IMeta)));
                                        (N, (Id ("refl", I)),
                                         (Some ("_",
                                                (BOpr ("=",
                                                   (Let (R, (Id ("h1", I)),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      )),
                                                   (Let (R,
                                                      (App
                                                         [(Id ("split", I));
                                                           (Id ("zs", I))]),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      ))
                                                   )))))
                                        ],
                                      None,
                                      [([(PBOpr ("\226\159\168,\226\159\169",
                                            (PId "xs0"), (PId "ys0")));
                                          (PId "pf")],
                                        (Some (MLet (
                                                 (Fork
                                                    (Fun (
                                                       (Pi (R, L, IMeta,
                                                          (Binder ("",
                                                             (IO
                                                                (Id ("unit",
                                                                   I)))
                                                             ))
                                                          )),
                                                       (Binder (None,
                                                          [([(PId "c1")],
                                                            (Some (App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ));
                                                                    (Id (
                                                                    "c1", I))
                                                                    ])))
                                                            ]
                                                          )),
                                                       []))),
                                                 (Binder ((PId "r1"),
                                                    (MLet (
                                                       (Fork
                                                          (Fun (
                                                             (Pi (R, L,
                                                                IMeta,
                                                                (Binder ("",
                                                                   (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    )))
                                                                   ))
                                                                )),
                                                             (Binder (None,
                                                                [([(PId "c2")
                                                                    ],
                                                                  (Some (
                                                                  App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ));
                                                                    (Id (
                                                                    "c2", I))
                                                                    ])))
                                                                  ]
                                                                )),
                                                             []))),
                                                       (Binder ((PId "r2"),
                                                          (MLet (
                                                             (Recv
                                                                (Id ("r1", I
                                                                   ))),
                                                             (Binder (
                                                                (PBOpr (
                                                                   "\226\159\168,\226\159\169",
                                                                   (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "xs1")])),
                                                                   (PId "c1")
                                                                   )),
                                                                (MLet (
                                                                   (Recv
                                                                    (Id (
                                                                    "r2", I))),
                                                                   (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "ys1")])),
                                                                    (PId "c2")
                                                                    )),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (Id (
                                                                    "xs1", I
                                                                    ));
                                                                    (Id (
                                                                    "ys1", I
                                                                    ))])]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ))]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ))])])))
                                                                    )),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "rwl", I
                                                                    ));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U, IMeta,
                                                                    (Binder (
                                                                    "x",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "x")],
                                                                    (Some (
                                                                    UOpr (
                                                                    "`",
                                                                    (Id ("x",
                                                                    I))))))]
                                                                    )), 
                                                                    []));
                                                                    (Id (
                                                                    "pf", I));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]))))),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c1", I))),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c2", I))),
                                                                    (Close
                                                                    (Id ("c",
                                                                    I)))))))
                                                                    ))))))))
                                                                    ))))))
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))))
                                        ]
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, Int_t,
           (Binder ("_",
              (Pi (R, U,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("zs",
                    (Pi (R, L,
                       (App
                          [(Inst ("cmsort_ch", [(SId "t")], I));
                            (Id ("zs", I))]),
                       (Binder ("_", (IO (Id ("unit", I)))))))
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "cmsort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("zs",
                 (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))
                 ))
              )),
           (Binder ((Some "cmsort"),
              [([(PId "zs")],
                (Some (MLet (
                         (Fork
                            (Fun (
                               (Pi (R, L, IMeta,
                                  (Binder ("", (IO (Id ("unit", I))))))),
                               (Binder (None,
                                  [([(PId "c")],
                                    (Some (App
                                             [(Id ("cmsort_worker", I));
                                               (Int 4); (Id ("zs", I));
                                               (Id ("c", I))])))
                                    ]
                                  )),
                               []))),
                         (Binder ((PId "c"),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "msg"), (PId "c"))),
                                  (BOpr (";", (Close (Id ("c", I))),
                                     (Return (Id ("msg", I)))))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("zs",
              (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))))
           )))
       ));
    view = [E]};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "print_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", (IO (Id ("unit", I))))))),
           (Binder ((Some "print_list"),
              [([(PId "nil")], (Some (Print (String "nil"))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr (";",
                          (Print
                             (App [(Id ("string_of_int", I)); (Id ("x", I))])),
                          (BOpr (";", (Print (String " :: ")),
                             (App [(Id ("print_list", I)); (Id ("xs", I))])))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", (IO (Id ("unit", I))))))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 2000000)]),
           (Binder ((PId "test"),
              (MLet ((App [(Id ("cmsort", I)); (Id ("test", I))]),
                 (Binder ((PConstr ("just", [(PId "sorted")])),
                    (Let (R,
                       (App [(Id ("list_len", I)); (Id ("sorted", I))]),
                       (Binder ((PId "len"),
                          (Print
                             (App
                                [(Id ("string_of_int", I)); (Id ("len", I))]))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

[parse success]

-----------------------------------------

#[program]
def split_33‹t_543› :
  (list_6‹??_77,t_543› int) ->
    ((prod1_25‹??_80,??_81›)
      (list_6‹??_78,t_543› int) (list_6‹??_79,t_543› int))
:=
  fun split_545 :
    (list_6‹??_52,t_543› int) ->
      ((prod1_25‹??_55,??_56›)
        (list_6‹??_53,t_543› int) (list_6‹??_54,t_543› int))
  | nil_8 =>
    (ex1_12‹??_61,??_62›
      ?_69[0;0] ?_70[0;0] (nil_8‹??_57,??_58› ?_67[0;0])
      (nil_8‹??_59,??_60› ?_68[0;0]))
  | (cons_9 x_547 nil_8) =>
    (ex1_12‹??_69,??_70›
      ?_74[0;0] ?_75[0;0]
      (cons_9‹??_65,??_66›
        ?_72[0;0] x_547 (nil_8‹??_63,??_64› ?_71[0;0]))
      (nil_8‹??_67,??_68› ?_73[0;0]))
  | (cons_9 x_548 (cons_9 y_549 zs_550)) =>
    (match ((split_545) zs_550) in ?_81[0;0] -o ?_80[0;0] with
    | (ex1_12 xs_552 ys_553) =>
      (ex1_12‹??_75,??_76›
        ?_78[0;0] ?_79[0;0] (cons_9‹??_71,??_72› ?_76[0;0] x_548 xs_552)
        (cons_9‹??_73,??_74› ?_77[0;0] y_549 ys_553)))

#[program]
def merge_34‹t_554› :
  (list_6‹??_93,t_554› int) ->
    (list_6‹??_94,t_554› int) -o (list_6‹??_95,t_554› int)
:=
  fun merge_557 :
    (list_6‹??_82,t_554› int) ->
      (list_6‹??_83,t_554› int) -o (list_6‹??_84,t_554› int)
  | nil_8, ys_560 => ys_560
  | xs_561, nil_8 => xs_561
  | (cons_9 x_562 xs_563), (cons_9 y_564 ys_565) =>
    (match (__lte__ x_562 y_564) in ?_82[0;0] -o ?_83[0;0] with
    | true_4 =>
      (cons_9‹??_87,??_88›
        ?_85[0;0] x_562
        ((merge_557) xs_563 (cons_9‹??_85,??_86› ?_84[0;0] y_564 ys_565)))
    | false_5 =>
      (cons_9‹??_91,??_92›
        ?_87[0;0] y_564
        ((merge_557) (cons_9‹??_89,??_90› ?_86[0;0] x_562 xs_563) ys_565)))

#[program]
def msort_35‹t_567› :
  (list_6‹??_106,t_567› int) -> (list_6‹??_107,t_567› int)
:=
  fun msort_569 :
    (list_6‹??_96,t_567› int) -> (list_6‹??_97,t_567› int)
  | nil_8 => (nil_8‹??_98,??_99› ?_88[0;0])
  | (cons_9 z_571 nil_8) =>
    (cons_9‹??_102,??_103›
      ?_90[0;0] z_571 (nil_8‹??_100,??_101› ?_89[0;0]))
  | zs_572 =>
    (match ((split_33‹??_104›) zs_572) in ?_92[0;0] -o ?_91[0;0] with
    | (ex1_12 xs_574 ys_575) =>
      ((merge_34‹??_105›) ((msort_569) xs_574) ((msort_569) ys_575)))

#[logical]
def cmsort_ch_36‹t_576› : (list_6‹??_111,t_576› int) -> L :=
  fun cmsort_ch_578 : (list_6‹??_108,t_576› int) -> L
  | xs_580 =>
    ch⟨⇑(__581 :
           ((ssing_6‹??_110›) ?_93[0;0] ((msort_35‹??_109›) xs_580))) ⇒
           •⟩

#[program]
def cmsort_worker_37‹t_582› :
  int ->
    ∀ (zs_584 : (list_6‹??_148,t_582› int)) ->
      ((cmsort_ch_36‹t_582›) zs_584) -o IO unit_9
:=
  fun cmsort_worker_586 :
    int ->
      ∀ (zs_588 : (list_6‹??_112,t_582› int)) ->
        ((cmsort_ch_36‹t_582›) zs_588) -o IO unit_9
  | _590, nil_8, c_591 =>
    let* c_592 :=
      ((send c_591)
        (just_2‹??_115,??_116›
          ?_95[0;0] (nil_8‹??_113,??_114› ?_94[0;0])))
    in close c_592
  | _593, (cons_9 z_594 nil_8), c_595 =>
    let* c_596 :=
      ((send c_595)
        (just_2‹??_121,??_122›
          ?_98[0;0]
          (cons_9‹??_119,??_120›
            ?_97[0;0] z_594 (nil_8‹??_117,??_118› ?_96[0;0]))))
    in close c_596
  | i_597, zs_598, c_599 =>
    (match (__lte__ i_597 0) in ?_99[0;0] -o ?_100[0;0] with
    | true_4 =>
      let* c_601 :=
        ((send c_599)
          (just_2‹??_124,??_125›
            ?_101[0;0] ((msort_35‹??_123›) zs_598)))
      in close c_601
    | false_5 =>
      (match ((split_33‹??_126›) zs_598),
       (refl_1‹??_127› ?_102[0;0] ?_103[0;0]) in
         ∀ (h1_602 : ?_104[0;0]) -o
           {(eq_1‹??_135›
              ?_109[0;0]
              (match h1_602 in ?_106[0;0] -o ?_105[0;0] with
              | (ex1_12 xs_605 ys_606) =>
                ((merge_34‹??_130›)
                  ((msort_35‹??_128›) xs_605)
                  ((msort_35‹??_129›) ys_606)))
              (match ((split_33‹??_131›) zs_598) in
                 ?_108[0;0] -o ?_107[0;0]
               with
              | (ex1_12 xs_608 ys_609) =>
                ((merge_34‹??_134›)
                  ((msort_35‹??_132›) xs_608)
                  ((msort_35‹??_133›) ys_609))))} -o
             ?_110[0;0]
       with
      | (ex1_12 xs0_610 ys0_611), pf_612 =>
        let* r1_613 :=
          fork
            fun _614 : ?_111[0;0] -o IO unit_9
            | c1_616 =>
              ((cmsort_worker_586) (__sub__ i_597 1) xs0_610 c1_616)
        in
        let* r2_617 :=
          fork
            fun _618 : ?_112[0;0] -o IO unit_9
            | c2_620 =>
              ((cmsort_worker_586) (__sub__ i_597 1) ys0_611 c2_620)
        in
        let* _621 := recv r1_613 in
        (match _621 in ?_125[0;0] -o ?_124[0;0] with
        | (ex1_12 (just_2 xs1_623) c1_624) =>
          let* _625 := recv r2_617 in
          (match _625 in ?_123[0;0] -o ?_122[0;0] with
          | (ex1_12 (just_2 ys1_627) c2_628) =>
            let zs1_629 :=
              ((just_2‹??_137,??_138›
                 ?_113[0;0] ((merge_34‹??_136›) xs1_623 ys1_627))
                : ((ssing_6‹??_142›)
                    ?_114[0;0]
                    ((merge_34‹??_141›)
                      ((msort_35‹??_139›) xs0_610)
                      ((msort_35‹??_140›) ys0_611))))
            in
            let zs1_630 :=
              (((rwl_2‹??_144,??_145›)
                 ?_120[0;0] ?_119[0;0] ?_118[0;0]
                 fun _631 : ?_115[0;0] -> ?_116[0;0]
                 | x_633 => ((ssing_6‹??_143›) ?_117[0;0] x_633) pf_612
                 zs1_629)
                : ((ssing_6‹??_147›)
                    ?_121[0;0] ((msort_35‹??_146›) zs_598)))
            in
            let* c_634 := ((send c_599) zs1_630) in
            let* __635 := close c1_624 in
            let* __636 := close c2_628 in close c_634))))

#[program]
def cmsort_38‹t_637› :
  ∀ (zs_638 : (list_6‹??_153,t_637› int)) ->
    IO ((ssing_6‹??_155›) ?_130[0;0] ((msort_35‹??_154›) zs_638))
:=
  fun cmsort_639 :
    ∀ (zs_640 : (list_6‹??_149,t_637› int)) ->
      IO ((ssing_6‹??_151›) ?_126[0;0] ((msort_35‹??_150›) zs_640))
  | zs_641 =>
    let* c_642 :=
      fork
        fun _643 : ?_127[0;0] -o IO unit_9
        | c_645 => ((cmsort_worker_37‹??_152›) 4 zs_641 c_645)
    in
    let* _646 := recv c_642 in
    (match _646 in ?_129[0;0] -o ?_128[0;0] with
    | (ex1_12 msg_648 c_649) => let* __650 := close c_649 in return msg_648)

#[program]
def mklist_39‹t_651› : int -> (list_6‹??_161,t_651› int) :=
  fun mklist_653 : int -> (list_6‹??_156,t_651› int)
  | n_655 =>
    (match (__lte__ n_655 0) in ?_131[0;0] -o ?_132[0;0] with
    | true_4 => (nil_8‹??_157,??_158› ?_133[0;0])
    | false_5 =>
      (cons_9‹??_159,??_160›
        ?_134[0;0] n_655 ((mklist_653) (__sub__ n_655 1))))

#[program]
def list_len_40‹t_657› : (list_6‹??_163,t_657› int) -> int :=
  fun list_len_659 : (list_6‹??_162,t_657› int) -> int
  | nil_8 => 0
  | (cons_9 _661 xs_662) => (__add__ 1 ((list_len_659) xs_662))

#[program]
def print_list_41‹t_663› : (list_6‹??_165,t_663› int) -> IO unit_9 :=
  fun print_list_665 : (list_6‹??_164,t_663› int) -> IO unit_9
  | nil_8 => print "nil"
  | (cons_9 x_667 xs_668) =>
    let* __669 := print ((string_of_int_32) x_667) in
    let* __670 := print " :: " in ((print_list_665) xs_668)

#[program]
def main_42‹› : IO unit_9 :=
  let test_671 := ((mklist_39‹L›) 2000000) in
  let* _672 := ((cmsort_38‹??_166›) test_671) in
  (match _672 in ?_136[0;0] -o ?_135[0;0] with
  | (just_2 sorted_674) =>
    let len_675 := ((list_len_40‹??_167›) sorted_674) in
    print ((string_of_int_32) len_675))

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_11854› :
  ∀ (A_11855 : Type‹s_11854›) -> A_11855 -> A_11855
:=
  fun id_11857 : ∀ (A_11858 : Type‹s_11854›) -> A_11858 -> A_11858
  | A_11860, m_11861 => m_11861

#[logical]
inductive eq_1‹s_11862› (A_11863 : Type‹s_11862›) (m_11864 : A_11863):
  A_11863 -> U
where
| refl_1 : (eq_1‹s_11862› A_11863 m_11864 m_11864)

#[program]
def rwl_2‹s_11866,r_11867› :
  ∀ {A_11868 : Type‹s_11866›} ->
    ∀ {m_11869 : A_11868} ->
      ∀ {n_11870 : A_11868} ->
        ∀ {B_11871 : A_11868 -> Type‹r_11867›} ->
          {(eq_1‹s_11866› A_11868 m_11869 n_11870)} ->
            ((B_11871) m_11869) -> ((B_11871) n_11870)
:=
  fun rwl_11875 :
    ∀ {A_11876 : Type‹s_11866›} ->
      ∀ {m_11877 : A_11876} ->
        ∀ {n_11878 : A_11876} ->
          ∀ {B_11879 : A_11876 -> Type‹r_11867›} ->
            {(eq_1‹s_11866› A_11876 m_11877 n_11878)} ->
              ((B_11879) m_11877) -> ((B_11879) n_11878)
  | A_11883, m_11884, n_11885, B_11886, refl_1, __11887 => __11887

#[program]
def rwr_3‹s_11888,r_11889› :
  ∀ {A_11890 : Type‹s_11888›} ->
    ∀ {m_11891 : A_11890} ->
      ∀ {n_11892 : A_11890} ->
        ∀ {B_11893 : A_11890 -> Type‹r_11889›} ->
          {(eq_1‹s_11888› A_11890 m_11891 n_11892)} ->
            ((B_11893) n_11892) -> ((B_11893) m_11891)
:=
  fun rwr_11897 :
    ∀ {A_11898 : Type‹s_11888›} ->
      ∀ {m_11899 : A_11898} ->
        ∀ {n_11900 : A_11898} ->
          ∀ {B_11901 : A_11898 -> Type‹r_11889›} ->
            {(eq_1‹s_11888› A_11898 m_11899 n_11900)} ->
              ((B_11901) n_11900) -> ((B_11901) m_11899)
  | A_11905, m_11906, n_11907, B_11908, refl_1, __11909 => __11909

#[logical]
def congr_4‹s_11910,r_11911,t_11912› :
  ∀ (A_11913 : Type‹s_11910›) ->
    ∀ (B_11914 : Type‹r_11911›) ->
      ∀ (m_11915 : A_11913) ->
        ∀ (n_11916 : A_11913) ->
          ∀ (f_11917 : forall‹t_11912›(__11918 : A_11913), B_11914) ->
            (eq_1‹s_11910› A_11913 m_11915 n_11916) ->
              (eq_1‹r_11911›
                B_11914 ((f_11917) m_11915) ((f_11917) n_11916))
:=
  fun congr_11920 :
    ∀ (A_11921 : Type‹s_11910›) ->
      ∀ (B_11922 : Type‹r_11911›) ->
        ∀ (m_11923 : A_11921) ->
          ∀ (n_11924 : A_11921) ->
            ∀ (f_11925 :
              forall‹t_11912›(__11926 : A_11921), B_11922) ->
              (eq_1‹s_11910› A_11921 m_11923 n_11924) ->
                (eq_1‹r_11911›
                  B_11922 ((f_11925) m_11923) ((f_11925) n_11924))
  | A_11928, B_11929, m_11930, n_11931, f_11932, refl_1 =>
    (refl_1‹r_11911› B_11929 ((f_11932) n_11931))

#[logical]
def axiom_K_5‹› :
  ∀ {A_11933 : U} ->
    ∀ {m_11934 : A_11933} ->
      ∀ (x_11935 : (eq_1‹U› A_11933 m_11934 m_11934)) ->
        (eq_1‹U›
          (eq_1‹U› A_11933 m_11934 m_11934) x_11935
          (refl_1‹U› A_11933 m_11934))
:=
  fun axiom_K_11936 :
    ∀ {A_11937 : U} ->
      ∀ {m_11938 : A_11937} ->
        ∀ (x_11939 : (eq_1‹U› A_11937 m_11938 m_11938)) ->
          (eq_1‹U›
            (eq_1‹U› A_11937 m_11938 m_11938) x_11939
            (refl_1‹U› A_11937 m_11938))
  | A_11940, m_11941, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_11940 m_11941 m_11941) (refl_1‹U› A_11940 m_11941))

#[program]
inductive sing_2‹s_11942,t_11943› (A_11944 : Type‹s_11942›):
  A_11944 -> Type‹t_11943›
where
| just_2 (m_11946 : A_11944) : (sing_2‹s_11942,t_11943› A_11944 m_11946)

#[logical]
def ssing_6‹s_11947› :
  ∀ (A_11948 : Type‹s_11947›) -> A_11948 -> Type‹s_11947›
:=
  fun ssing_11950 :
    ∀ (A_11951 : Type‹s_11947›) -> A_11951 -> Type‹s_11947›
  | A_11953, m_11954 => (sing_2‹s_11947,s_11947› A_11953 m_11954)

#[program]
def sing_elim_7‹s_11955,t_11956› :
  ∀ {A_11957 : Type‹s_11955›} ->
    ∀ {x_11958 : A_11957} ->
      (sing_2‹s_11955,t_11956› A_11957 x_11958) -> A_11957
:=
  fun sing_elim_11960 :
    ∀ {A_11961 : Type‹s_11955›} ->
      ∀ {x_11962 : A_11961} ->
        (sing_2‹s_11955,t_11956› A_11961 x_11962) -> A_11961
  | A_11964, x_11965, (just_2 m_11966) => m_11966

#[logical]
def sing_uniq_8‹s_11967,t_11968› :
  ∀ (A_11969 : Type‹s_11967›) ->
    ∀ (x0_11970 : A_11969) ->
      ∀ (x_11971 : (sing_2‹s_11967,t_11968› A_11969 x0_11970)) ->
        (eq_1‹s_11967›
          A_11969 x0_11970
          ((sing_elim_7‹s_11967,t_11968›) A_11969 x0_11970 x_11971))
:=
  fun sing_uniq_11972 :
    ∀ (A_11973 : Type‹s_11967›) ->
      ∀ (x0_11974 : A_11973) ->
        ∀ (x_11975 : (sing_2‹s_11967,t_11968› A_11973 x0_11974)) ->
          (eq_1‹s_11967›
            A_11973 x0_11974
            ((sing_elim_7‹s_11967,t_11968›) A_11973 x0_11974 x_11975))
  | A_11976, x0_11977, (just_2 m_11978) =>
    (refl_1‹s_11967› A_11976 m_11978)

#[program]
inductive base_3‹s_11979› : Type‹s_11979› where
| tt_3 : base_3‹s_11979›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_11980 : unit_9) -> (eq_1‹U› base_3‹U› x_11980 tt_3‹U›)
:=
  fun unit_eta_11981 :
    ∀ (x_11982 : unit_9) -> (eq_1‹U› base_3‹U› x_11982 tt_3‹U›)
  | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  fun not_11984 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_11988 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __11991 => false_5

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_11994 : bool_4 -> bool_4 -> bool_4
  | true_4, __11997 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  fun xor_12000 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_12003 : nat_5) : nat_5

#[program]
def lte_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_12006 : nat_5 -> nat_5 -> bool_4
  | zero_6, __12009 => true_4
  | (succ_7 n_12010), zero_6 => false_5
  | (succ_7 n_12011), (succ_7 n_12012) => ((lte_12006) n_12011 n_12012)

#[program]
def lt_16‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_12015 : nat_5 -> nat_5 -> bool_4
  | x_12018, y_12019 => ((lte_15) (succ_7‹› x_12018) y_12019)

#[program]
def pred_17‹› : nat_5 -> nat_5 :=
  fun pred_12021 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_12023) => n_12023

#[program]
def add_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_12026 : nat_5 -> nat_5 -> nat_5
  | zero_6, __12029 => __12029
  | (succ_7 n_12030), __12031 => (succ_7‹› ((add_12026) n_12030 __12031))

#[program]
def sub_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_12034 : nat_5 -> nat_5 -> nat_5
  | __12037, zero_6 => __12037
  | __12038, (succ_7 n_12039) => ((sub_12034) ((pred_17) __12038) n_12039)

#[program]
def mul_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_12042 : nat_5 -> nat_5 -> nat_5
  | zero_6, __12045 => zero_6
  | (succ_7 n_12046), __12047 =>
    ((add_18) __12047 ((mul_12042) n_12046 __12047))

#[program]
def div_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_12050 : nat_5 -> nat_5 -> nat_5
  | x_12053, y_12054 =>
    (match ((lt_16) x_12053 y_12054) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_12056 :=
        fun loop_12057 : nat_5 -> nat_5 -> nat_5
        | x_12060, y_12061 =>
          (match ((sub_19) x_12060 ((pred_17) y_12061)) in nat_5 -o nat_5
           with
          | zero_6 => zero_6
          | (succ_7 n_12063) => (succ_7‹› ((loop_12057) n_12063 y_12061)))
      in ((loop_12056) x_12053 y_12054))

#[program]
def rem_22‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_12066 : nat_5 -> nat_5 -> nat_5
  | x_12069, y_12070 =>
    ((sub_19) x_12069 ((mul_20) ((div_21) x_12069 y_12070) y_12070))

#[program]
inductive list_6‹s_12071,t_12072› (A_12073 : Type‹s_12071›):
  Type‹t_12072›
where
| nil_8 : (list_6‹s_12071,t_12072› A_12073)
| cons_9
    (hd_12074 : A_12073) (tl_12075 : (list_6‹s_12071,t_12072› A_12073))
    : (list_6‹s_12071,t_12072› A_12073)

#[program]
def free_list_23‹s_12076,t_12077› :
  ∀ {A_12078 : Type‹s_12076›} ->
    A_12078 -> unit_9 -> (list_6‹s_12076,t_12077› A_12078) -> unit_9
:=
  fun free_list_12082 :
    ∀ {A_12083 : Type‹s_12076›} ->
      A_12083 -> unit_9 -> (list_6‹s_12076,t_12077› A_12083) -> unit_9
  | A_12087, f_12088, nil_8 => tt_3‹U›
  | A_12089, f_12090, (cons_9 hd_12091 tl_12092) =>
    let __12093 := ((f_12090) hd_12091) in
    ((free_list_12082) A_12089 f_12090 tl_12092)

#[program]
inductive exists_7‹s_12094,r_12095› (A_12096 : Type‹s_12094›) (B_12097 : 
A_12096 -> Type‹r_12095›): L where
| ex_10
    (m_12099 : A_12096) {n_12100 : ((B_12097) m_12099)}
    : (exists_7‹s_12094,r_12095› A_12096 B_12097)

#[program]
inductive exists0_8‹s_12101,r_12102› (A_12103 : Type‹s_12101›) (B_12104 : 
A_12103 -> Type‹r_12102›): L where
| ex0_11
    {m_12106 : A_12103} (n_12107 : ((B_12104) m_12106))
    : (exists0_8‹s_12101,r_12102› A_12103 B_12104)

#[program]
inductive exists1_9‹s_12108,r_12109› (A_12110 : Type‹s_12108›) (B_12111 : 
A_12110 -> Type‹r_12109›): L where
| ex1_12
    (m_12113 : A_12110) (n_12114 : ((B_12111) m_12113))
    : (exists1_9‹s_12108,r_12109› A_12110 B_12111)

#[logical]
def prod0_24‹s_12115,r_12116› :
  Type‹s_12115› -> Type‹r_12116› -> L
:=
  fun prod0_12119 : Type‹s_12115› -> Type‹r_12116› -> L
  | A_12122, B_12123 =>
    (exists0_8‹s_12115,r_12116›
      A_12122 fun _12124 : A_12122 -> Type‹r_12116›
              | __12126 => B_12123)

#[logical]
def prod1_25‹s_12127,r_12128› :
  Type‹s_12127› -> Type‹r_12128› -> L
:=
  fun prod1_12131 : Type‹s_12127› -> Type‹r_12128› -> L
  | A_12134, B_12135 =>
    (exists1_9‹s_12127,r_12128›
      A_12134 fun _12136 : A_12134 -> Type‹r_12128›
              | __12138 => B_12135)

#[program]
def pow_26‹› : int -> int -> int :=
  fun pow_12141 : int -> int -> int
  | x_12144, y_12145 =>
    let loop_12146 :=
      fun loop_12147 : int -> int -> int
      | acc_12150, y_12151 =>
        (match (__lte__ y_12151 0) in bool_4 -o int with
        | true_4 => acc_12150
        | false_5 =>
          ((loop_12147) (__mul__ x_12144 acc_12150) (__sub__ y_12151 1)))
    in ((loop_12146) 1 y_12145)

#[program]
def powm_27‹› : int -> int -> int -> int :=
  fun powm_12156 : int -> int -> int -> int
  | x_12160, y_12161, m_12162 =>
    let loop_12163 :=
      fun loop_12164 : int -> int -> int
      | acc_12167, y_12168 =>
        (match (__lte__ y_12168 0) in bool_4 -o int with
        | true_4 => acc_12167
        | false_5 =>
          ((loop_12164)
            (__mod__ (__mul__ x_12160 acc_12167) m_12162) (__sub__ y_12168 1)))
    in ((loop_12163) 1 y_12161)

#[program]
def ord_28‹› : char -> int :=
  fun ord_12171 : char -> int
  | c_12173 => (__ord__ c_12173)

#[program]
def chr_29‹› : int -> char :=
  fun chr_12175 : int -> char
  | i_12177 => (__chr__ i_12177)

#[program]
def str_30‹› : char -> string :=
  fun str_12179 : char -> string
  | c_12181 => (__push__ "" c_12181)

#[program]
def strlen_31‹› : string -> int :=
  fun strlen_12183 : string -> int
  | s_12185 => (__size__ s_12185)

#[program]
def string_of_int_32‹› : int -> string :=
  fun string_of_int_12187 : int -> string
  | i_12189 =>
    let aux_12190 :=
      fun aux_12191 : int -> string
      | i_12193 =>
        (match (__lte__ 10 i_12193) in bool_4 -o string with
        | true_4 =>
          let r_12195 := (__mod__ i_12193 10) in
          let i_12196 := (__div__ i_12193 10) in
          (__push__ ((aux_12191) i_12196)
            ((chr_29) (__add__ r_12195 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_12193 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_12189) in bool_4 -o string with
    | true_4 => ((aux_12190) i_12189)
    | false_5 => (__cat__ "~" ((aux_12190) (__neg__ i_12189))))

#[program]
def split_33‹t_12198› :
  (list_6‹U,t_12198› int) ->
    ((prod1_25‹t_12198,t_12198›)
      (list_6‹U,t_12198› int) (list_6‹U,t_12198› int))
:=
  fun split_12200 :
    (list_6‹U,t_12198› int) ->
      ((prod1_25‹t_12198,t_12198›)
        (list_6‹U,t_12198› int) (list_6‹U,t_12198› int))
  | nil_8 =>
    (ex1_12‹t_12198,t_12198›
      (list_6‹U,t_12198› int)
      fun _12202 : (list_6‹U,t_12198› int) -> Type‹t_12198›
      | __12204 => (list_6‹U,t_12198› int) (nil_8‹U,t_12198› int)
      (nil_8‹U,t_12198› int))
  | (cons_9 hd_12205 nil_8) =>
    (ex1_12‹t_12198,t_12198›
      (list_6‹U,t_12198› int)
      fun _12206 : (list_6‹U,t_12198› int) -> Type‹t_12198›
      | __12208 => (list_6‹U,t_12198› int)
      (cons_9‹U,t_12198› int hd_12205 (nil_8‹U,t_12198› int))
      (nil_8‹U,t_12198› int))
  | (cons_9 hd_12209 (cons_9 hd_12210 tl_12211)) =>
    (match ((split_12200) tl_12211) in
       ((prod1_25‹t_12198,t_12198›)
         (list_6‹U,t_12198› int) (list_6‹U,t_12198› int)) -o
         ((prod1_25‹t_12198,t_12198›)
           (list_6‹U,t_12198› int) (list_6‹U,t_12198› int))
     with
    | (ex1_12 m_12213 n_12214) =>
      (ex1_12‹t_12198,t_12198›
        (list_6‹U,t_12198› int)
        fun _12215 : (list_6‹U,t_12198› int) -> Type‹t_12198›
        | __12217 => (list_6‹U,t_12198› int)
        (cons_9‹U,t_12198› int hd_12209 m_12213)
        (cons_9‹U,t_12198› int hd_12210 n_12214)))

#[program]
def merge_34‹t_12218› :
  (list_6‹U,t_12218› int) ->
    (list_6‹U,t_12218› int) -o (list_6‹U,t_12218› int)
:=
  fun merge_12221 :
    (list_6‹U,t_12218› int) ->
      (list_6‹U,t_12218› int) -o (list_6‹U,t_12218› int)
  | nil_8, __12224 => __12224
  | (cons_9 hd_12225 tl_12226), nil_8 =>
    (cons_9‹U,t_12218› int hd_12225 tl_12226)
  | (cons_9 hd_12227 tl_12228), (cons_9 hd_12229 tl_12230) =>
    (match (__lte__ hd_12227 hd_12229) in
       bool_4 -o (list_6‹U,t_12218› int)
     with
    | true_4 =>
      (cons_9‹U,t_12218›
        int hd_12227
        ((merge_12221)
          tl_12228 (cons_9‹U,t_12218› int hd_12229 tl_12230)))
    | false_5 =>
      (cons_9‹U,t_12218›
        int hd_12229
        ((merge_12221)
          (cons_9‹U,t_12218› int hd_12227 tl_12228) tl_12230)))

#[program]
def msort_35‹t_12232› :
  (list_6‹U,t_12232› int) -> (list_6‹U,t_12232› int)
:=
  fun msort_12234 :
    (list_6‹U,t_12232› int) -> (list_6‹U,t_12232› int)
  | nil_8 => (nil_8‹U,t_12232› int)
  | (cons_9 hd_12236 nil_8) =>
    (cons_9‹U,t_12232› int hd_12236 (nil_8‹U,t_12232› int))
  | (cons_9 hd_12237 (cons_9 hd_12238 tl_12239)) =>
    (match ((split_33‹t_12232›)
             (cons_9‹U,t_12232›
               int hd_12237 (cons_9‹U,t_12232› int hd_12238 tl_12239))) in
       ((prod1_25‹t_12232,t_12232›)
         (list_6‹U,t_12232› int) (list_6‹U,t_12232› int)) -o
         (list_6‹U,t_12232› int)
     with
    | (ex1_12 m_12241 n_12242) =>
      ((merge_34‹t_12232›)
        ((msort_12234) m_12241) ((msort_12234) n_12242)))

#[logical]
def cmsort_ch_36‹t_12243› : (list_6‹U,t_12243› int) -> L :=
  fun cmsort_ch_12245 : (list_6‹U,t_12243› int) -> L
  | xs_12247 =>
    ch⟨⇑(__12248 :
           ((ssing_6‹t_12243›)
             (list_6‹U,t_12243› int) ((msort_35‹t_12243›) xs_12247))) ⇒
           •⟩

#[program]
def cmsort_worker_37‹t_12249› :
  int ->
    ∀ (zs_12251 : (list_6‹U,t_12249› int)) ->
      ((cmsort_ch_36‹t_12249›) zs_12251) -o IO unit_9
:=
  fun cmsort_worker_12253 :
    int ->
      ∀ (zs_12255 : (list_6‹U,t_12249› int)) ->
        ((cmsort_ch_36‹t_12249›) zs_12255) -o IO unit_9
  | __12257, nil_8, __12258 =>
    let* c_12259 :=
      ((send __12258)
        (just_2‹t_12249,t_12249›
          (list_6‹U,t_12249› int) (nil_8‹U,t_12249› int)))
    in close c_12259
  | __12260, (cons_9 hd_12261 nil_8), __12262 =>
    let* c_12263 :=
      ((send __12262)
        (just_2‹t_12249,t_12249›
          (list_6‹U,t_12249› int)
          (cons_9‹U,t_12249› int hd_12261 (nil_8‹U,t_12249› int))))
    in close c_12263
  | __12264, (cons_9 hd_12265 (cons_9 hd_12266 tl_12267)), __12268 =>
    (match (__lte__ __12264 0) in bool_4 -o IO unit_9 with
    | true_4 =>
      let* c_12270 :=
        ((send __12268)
          (just_2‹t_12249,t_12249›
            (list_6‹U,t_12249› int)
            ((msort_35‹t_12249›)
              (cons_9‹U,t_12249›
                int hd_12265 (cons_9‹U,t_12249› int hd_12266 tl_12267)))))
      in close c_12270
    | false_5 =>
      (match ((split_33‹t_12249›)
               (cons_9‹U,t_12249›
                 int hd_12265 (cons_9‹U,t_12249› int hd_12266 tl_12267))),
       (refl_1‹t_12249›
         (list_6‹U,t_12249› int)
         (match ((split_33‹t_12249›)
                  (cons_9‹U,t_12249›
                    int hd_12265
                    (cons_9‹U,t_12249› int hd_12266 tl_12267))) in
            ((prod1_25‹t_12249,t_12249›)
              (list_6‹U,t_12249› int) (list_6‹U,t_12249› int)) -o
              (list_6‹U,t_12249› int)
          with
         | (ex1_12 m_12272 n_12273) =>
           ((merge_34‹t_12249›)
             ((msort_35‹t_12249›) m_12272)
             ((msort_35‹t_12249›) n_12273)))) in
         ∀ (h1_12274 :
           ((prod1_25‹t_12249,t_12249›)
             (list_6‹U,t_12249› int) (list_6‹U,t_12249› int))) -o
           {(eq_1‹t_12249›
              (list_6‹U,t_12249› int)
              (match h1_12274 in
                 ((prod1_25‹t_12249,t_12249›)
                   (list_6‹U,t_12249› int) (list_6‹U,t_12249› int)) -o
                   (list_6‹U,t_12249› int)
               with
              | (ex1_12 m_12277 n_12278) =>
                ((merge_34‹t_12249›)
                  ((msort_35‹t_12249›) m_12277)
                  ((msort_35‹t_12249›) n_12278)))
              (match ((split_33‹t_12249›)
                       (cons_9‹U,t_12249›
                         int hd_12265
                         (cons_9‹U,t_12249› int hd_12266 tl_12267))) in
                 ((prod1_25‹t_12249,t_12249›)
                   (list_6‹U,t_12249› int) (list_6‹U,t_12249› int)) -o
                   (list_6‹U,t_12249› int)
               with
              | (ex1_12 m_12280 n_12281) =>
                ((merge_34‹t_12249›)
                  ((msort_35‹t_12249›) m_12280)
                  ((msort_35‹t_12249›) n_12281))))} -o
             IO unit_9
       with
      | (ex1_12 m_12282 n_12283), __12284 =>
        let* r1_12285 :=
          fork
            fun _12286 : ((cmsort_ch_36‹t_12249›) m_12282) -o IO unit_9
            | _12288 =>
              ((cmsort_worker_12253) (__sub__ __12264 1) m_12282 _12288)
        in
        let* r2_12289 :=
          fork
            fun _12290 : ((cmsort_ch_36‹t_12249›) n_12283) -o IO unit_9
            | _12292 =>
              ((cmsort_worker_12253) (__sub__ __12264 1) n_12283 _12292)
        in
        let* _12293 := recv r1_12285 in
        (match _12293 in
           (exists1_9‹t_12249,L›
             ((ssing_6‹t_12249›)
               (list_6‹U,t_12249› int) ((msort_35‹t_12249›) m_12282))
             fun _12295 :
               ((ssing_6‹t_12249›)
                 (list_6‹U,t_12249› int)
                 ((msort_35‹t_12249›) m_12282)) -> L
             | __12297 => hc⟨•⟩) -o IO base_3‹U›
         with
        | (ex1_12 (just_2 m_12298) n_12299) =>
          let* _12300 := recv r2_12289 in
          (match _12300 in
             (exists1_9‹t_12249,L›
               ((ssing_6‹t_12249›)
                 (list_6‹U,t_12249› int)
                 ((msort_35‹t_12249›) n_12283))
               fun _12302 :
                 ((ssing_6‹t_12249›)
                   (list_6‹U,t_12249› int)
                   ((msort_35‹t_12249›) n_12283)) -> L
               | __12304 => hc⟨•⟩) -o IO base_3‹U›
           with
          | (ex1_12 (just_2 m_12305) n_12306) =>
            let zs1_12307 :=
              ((just_2‹t_12249,t_12249›
                 (list_6‹U,t_12249› int)
                 ((merge_34‹t_12249›) m_12298 m_12305))
                : ((ssing_6‹t_12249›)
                    (list_6‹U,t_12249› int)
                    ((merge_34‹t_12249›)
                      ((msort_35‹t_12249›) m_12282)
                      ((msort_35‹t_12249›) n_12283))))
            in
            let zs1_12308 :=
              (((rwl_2‹t_12249,t_12249›)
                 (list_6‹U,t_12249› int)
                 ((merge_34‹t_12249›)
                   ((msort_35‹t_12249›) m_12282)
                   ((msort_35‹t_12249›) n_12283))
                 (match ((split_33‹t_12249›)
                          (cons_9‹U,t_12249›
                            int hd_12265
                            (cons_9‹U,t_12249› int hd_12266 tl_12267))) in
                    ((prod1_25‹t_12249,t_12249›)
                      (list_6‹U,t_12249› int) (list_6‹U,t_12249› int)) -o
                      (list_6‹U,t_12249› int)
                  with
                 | (ex1_12 m_12310 n_12311) =>
                   ((merge_34‹t_12249›)
                     ((msort_35‹t_12249›) m_12310)
                     ((msort_35‹t_12249›) n_12311)))
                 fun _12312 :
                   (list_6‹U,t_12249› int) -> Type‹t_12249›
                 | __12314 =>
                   ((ssing_6‹t_12249›)
                     (list_6‹U,t_12249› int) __12314)
                 __12284 zs1_12307)
                : ((ssing_6‹t_12249›)
                    (list_6‹U,t_12249› int)
                    ((msort_35‹t_12249›)
                      (cons_9‹U,t_12249›
                        int hd_12265
                        (cons_9‹U,t_12249› int hd_12266 tl_12267)))))
            in
            let* c_12315 := ((send __12268) zs1_12308) in
            let* __12316 := close n_12299 in
            let* __12317 := close n_12306 in close c_12315))))

#[program]
def cmsort_38‹t_12318› :
  ∀ (zs_12319 : (list_6‹U,t_12318› int)) ->
    IO ((ssing_6‹t_12318›)
         (list_6‹U,t_12318› int) ((msort_35‹t_12318›) zs_12319))
:=
  fun cmsort_12320 :
    ∀ (zs_12321 : (list_6‹U,t_12318› int)) ->
      IO ((ssing_6‹t_12318›)
           (list_6‹U,t_12318› int) ((msort_35‹t_12318›) zs_12321))
  | zs_12322 =>
    let* c_12323 :=
      fork
        fun _12324 : ((cmsort_ch_36‹t_12318›) zs_12322) -o IO unit_9
        | _12326 => ((cmsort_worker_37‹t_12318›) 4 zs_12322 _12326)
    in
    let* _12327 := recv c_12323 in
    (match _12327 in
       (exists1_9‹t_12318,L›
         ((ssing_6‹t_12318›)
           (list_6‹U,t_12318› int) ((msort_35‹t_12318›) zs_12322))
         fun _12329 :
           ((ssing_6‹t_12318›)
             (list_6‹U,t_12318› int) ((msort_35‹t_12318›) zs_12322)) ->
             L
         | __12331 => hc⟨•⟩) -o
         IO ((ssing_6‹t_12318›)
              (list_6‹U,t_12318› int) ((msort_35‹t_12318›) zs_12322))
     with
    | (ex1_12 m_12332 n_12333) =>
      let* __12334 := close n_12333 in return m_12332)

#[program]
def mklist_39‹t_12335› : int -> (list_6‹U,t_12335› int) :=
  fun mklist_12337 : int -> (list_6‹U,t_12335› int)
  | n_12339 =>
    (match (__lte__ n_12339 0) in bool_4 -o (list_6‹U,t_12335› int) with
    | true_4 => (nil_8‹U,t_12335› int)
    | false_5 =>
      (cons_9‹U,t_12335›
        int n_12339 ((mklist_12337) (__sub__ n_12339 1))))

#[program]
def list_len_40‹t_12341› : (list_6‹U,t_12341› int) -> int :=
  fun list_len_12343 : (list_6‹U,t_12341› int) -> int
  | nil_8 => 0
  | (cons_9 hd_12345 tl_12346) => (__add__ 1 ((list_len_12343) tl_12346))

#[program]
def print_list_41‹t_12347› : (list_6‹U,t_12347› int) -> IO unit_9 :=
  fun print_list_12349 : (list_6‹U,t_12347› int) -> IO unit_9
  | nil_8 => print "nil"
  | (cons_9 hd_12351 tl_12352) =>
    let* __12353 := print ((string_of_int_32) hd_12351) in
    let* __12354 := print " :: " in ((print_list_12349) tl_12352)

#[program]
def main_42‹› : IO unit_9 :=
  let test_12355 := ((mklist_39‹L›) 2000000) in
  let* _12356 := ((cmsort_38‹L›) test_12355) in
  (match _12356 in
     ((ssing_6‹L›) (list_6‹U,L› int) ((msort_35‹L›) test_12355)) -o
       IO base_3‹U›
   with
  | (just_2 m_12358) =>
    let len_12359 := ((list_len_40‹L›) m_12358) in
    print ((string_of_int_32) len_12359))

[trans1e success]

-----------------------------------------

#[program]
def idU_44 := fun id_21069 (A_21070) -> (m_21071) ->
                m_21071

#[program]
def idL_43 := fun id_21072 (A_21073) -> (m_21074) ->
                m_21074

#[logical]
inductive eqU_11 where
| reflU_14 of layout[]

#[logical]
inductive eqL_10 where
| reflL_13 of layout[]

#[program]
def rwlUU_48 :=
  fun rwl_21075 {A_21076} -> {m_21077} -> {n_21078} -> {B_21079} ->
  {__21080} -> (__21081) ->
    (match {NULL} with
    | reflU_14  => __21081)

#[program]
def rwlUL_47 :=
  fun rwl_21082 {A_21083} -> {m_21084} -> {n_21085} -> {B_21086} ->
  {__21087} -> (__21088) ->
    (match {NULL} with
    | reflU_14  => __21088)

#[program]
def rwlLU_46 :=
  fun rwl_21089 {A_21090} -> {m_21091} -> {n_21092} -> {B_21093} ->
  {__21094} -> (__21095) ->
    (match {NULL} with
    | reflL_13  => __21095)

#[program]
def rwlLL_45 :=
  fun rwl_21096 {A_21097} -> {m_21098} -> {n_21099} -> {B_21100} ->
  {__21101} -> (__21102) ->
    (match {NULL} with
    | reflL_13  => __21102)

#[program]
def rwrUU_52 :=
  fun rwr_21103 {A_21104} -> {m_21105} -> {n_21106} -> {B_21107} ->
  {__21108} -> (__21109) ->
    (match {NULL} with
    | reflU_14  => __21109)

#[program]
def rwrUL_51 :=
  fun rwr_21110 {A_21111} -> {m_21112} -> {n_21113} -> {B_21114} ->
  {__21115} -> (__21116) ->
    (match {NULL} with
    | reflU_14  => __21116)

#[program]
def rwrLU_50 :=
  fun rwr_21117 {A_21118} -> {m_21119} -> {n_21120} -> {B_21121} ->
  {__21122} -> (__21123) ->
    (match {NULL} with
    | reflL_13  => __21123)

#[program]
def rwrLL_49 :=
  fun rwr_21124 {A_21125} -> {m_21126} -> {n_21127} -> {B_21128} ->
  {__21129} -> (__21130) ->
    (match {NULL} with
    | reflL_13  => __21130)

#[logical]
def congrUUU_60 := NULL

#[logical]
def congrUUL_59 := NULL

#[logical]
def congrULU_58 := NULL

#[logical]
def congrULL_57 := NULL

#[logical]
def congrLUU_56 := NULL

#[logical]
def congrLUL_55 := NULL

#[logical]
def congrLLU_54 := NULL

#[logical]
def congrLLL_53 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_15 where
| justUU_18 of layout[R]

#[program]
inductive singUL_14 where
| justUL_17 of layout[R]

#[program]
inductive singLU_13 where


#[program]
inductive singLL_12 where
| justLL_15 of layout[R]

#[logical]
def ssingU_62 := NULL

#[logical]
def ssingL_61 := NULL

#[program]
def sing_elimUU_66 :=
  fun sing_elim_21131 {A_21132} -> {x_21133} -> (__21134) ->
    (match __21134 with
    | justUU_18 m_21135 => m_21135)

#[program]
def sing_elimUL_65 :=
  fun sing_elim_21136 {A_21137} -> {x_21138} -> (__21139) ->
    (match __21139 with
    | justUL_17 m_21140 => m_21140)

#[program]
def sing_elimLU_64 :=
  fun sing_elim_21141 {A_21142} -> {x_21143} -> (__21144) ->
    (match __21144 with
    )

#[program]
def sing_elimLL_63 :=
  fun sing_elim_21145 {A_21146} -> {x_21147} -> (__21148) ->
    (match __21148 with
    | justLL_15 m_21149 => m_21149)

#[logical]
def sing_uniqUU_70 := NULL

#[logical]
def sing_uniqUL_69 := NULL

#[logical]
def sing_uniqLU_68 := NULL

#[logical]
def sing_uniqLL_67 := NULL

#[program]
inductive baseU_17 where
| ttU_20 of layout[]

#[program]
inductive baseL_16 where
| ttL_19 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_21150 (__21151) ->
    (match __21151 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_21152 (__21153) -> (__21154) ->
    (match __21153 with
    | true_4  =>
      (match __21154 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_21155 (__21156) -> (__21157) ->
    (match __21156 with
    | true_4  => true_4
    | false_5  =>
      (match __21157 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_21158 (__21159) -> (__21160) ->
    (match __21159 with
    | true_4  =>
      (match __21160 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __21160 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_21161 (__21162) -> (__21163) ->
    (match __21162 with
    | zero_6  => true_4
    | succ_7 n_21164 =>
      (match __21163 with
      | zero_6  => false_5 | succ_7 n_21165 => ((lte_21161) n_21164 n_21165)))

#[program]
def lt_16 :=
  fun lt_21166 (x_21167) -> (y_21168) ->
    ((lte_15) (succ_7 x_21167) y_21168)

#[program]
def pred_17 :=
  fun pred_21169 (__21170) ->
    (match __21170 with
    | zero_6  => zero_6 | succ_7 n_21171 => n_21171)

#[program]
def add_18 :=
  fun add_21172 (__21173) -> (__21174) ->
    (match __21173 with
    | zero_6  => __21174
    | succ_7 n_21175 => (succ_7 ((add_21172) n_21175 __21174)))

#[program]
def sub_19 :=
  fun sub_21176 (__21177) -> (__21178) ->
    (match __21178 with
    | zero_6  => __21177
    | succ_7 n_21179 => ((sub_21176) ((pred_17) __21177) n_21179))

#[program]
def mul_20 :=
  fun mul_21180 (__21181) -> (__21182) ->
    (match __21181 with
    | zero_6  => zero_6
    | succ_7 n_21183 => ((add_18) __21182 ((mul_21180) n_21183 __21182)))

#[program]
def div_21 :=
  fun div_21184 (x_21185) -> (y_21186) ->
    (match ((lt_16) x_21185 y_21186) with
    | true_4  => zero_6
    | false_5  =>
      let loop_21187 :=
        fun loop_21188 (x_21189) -> (y_21190) ->
          (match ((sub_19) x_21189 ((pred_17) y_21190)) with
          | zero_6  => zero_6
          | succ_7 n_21191 => (succ_7 ((loop_21188) n_21191 y_21190)))
      in ((loop_21187) x_21185 y_21186))

#[program]
def rem_22 :=
  fun rem_21192 (x_21193) -> (y_21194) ->
    ((sub_19) x_21193 ((mul_20) ((div_21) x_21193 y_21194) y_21194))

#[program]
inductive listUU_21 where
| nilUU_27 of layout[]
| consUU_28 of layout[R, R]

#[program]
inductive listUL_20 where
| nilUL_25 of layout[]
| consUL_26 of layout[R, R]

#[program]
inductive listLU_19 where
| nilLU_23 of layout[]

#[program]
inductive listLL_18 where
| nilLL_21 of layout[]
| consLL_22 of layout[R, R]

#[program]
def free_listUU_74 :=
  fun free_list_21195 {A_21196} -> (f_21197) -> (__21198) ->
    (match __21198 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_21199 tl_21200 =>
      let __21201 := ((f_21197) hd_21199) in
      ((free_list_21195) NULL f_21197 tl_21200))

#[program]
def free_listUL_73 :=
  fun free_list_21202 {A_21203} -> (f_21204) -> (__21205) ->
    (match __21205 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_21206 tl_21207 =>
      let __21208 := ((f_21204) hd_21206) in
      ((free_list_21202) NULL f_21204 tl_21207))

#[program]
def free_listLL_71 :=
  fun free_list_21209 {A_21210} -> (f_21211) -> (__21212) ->
    (match __21212 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_21213 tl_21214 =>
      let __21215 := ((f_21211) hd_21213) in
      ((free_list_21209) NULL f_21211 tl_21214))

#[program]
inductive existsUU_25 where
| exUU_32 of layout[R, N]

#[program]
inductive existsUL_24 where
| exUL_31 of layout[R, N]

#[program]
inductive existsLU_23 where
| exLU_30 of layout[R, N]

#[program]
inductive existsLL_22 where
| exLL_29 of layout[R, N]

#[program]
inductive exists0UU_29 where
| ex0UU_36 of layout[N, R]

#[program]
inductive exists0UL_28 where
| ex0UL_35 of layout[N, R]

#[program]
inductive exists0LU_27 where
| ex0LU_34 of layout[N, R]

#[program]
inductive exists0LL_26 where
| ex0LL_33 of layout[N, R]

#[program]
inductive exists1UU_33 where
| ex1UU_40 of layout[R, R]

#[program]
inductive exists1UL_32 where
| ex1UL_39 of layout[R, R]

#[program]
inductive exists1LU_31 where
| ex1LU_38 of layout[R, R]

#[program]
inductive exists1LL_30 where
| ex1LL_37 of layout[R, R]

#[logical]
def prod0UU_78 := NULL

#[logical]
def prod0UL_77 := NULL

#[logical]
def prod0LU_76 := NULL

#[logical]
def prod0LL_75 := NULL

#[logical]
def prod1UU_82 := NULL

#[logical]
def prod1UL_81 := NULL

#[logical]
def prod1LU_80 := NULL

#[logical]
def prod1LL_79 := NULL

#[program]
def pow_26 :=
  fun pow_21216 (x_21217) -> (y_21218) ->
    let loop_21219 :=
      fun loop_21220 (acc_21221) -> (y_21222) ->
        (match (__lte__ y_21222 0) with
        | true_4  => acc_21221
        | false_5  =>
          ((loop_21220) (__mul__ x_21217 acc_21221) (__sub__ y_21222 1)))
    in ((loop_21219) 1 y_21218)

#[program]
def powm_27 :=
  fun powm_21223 (x_21224) -> (y_21225) -> (m_21226) ->
    let loop_21227 :=
      fun loop_21228 (acc_21229) -> (y_21230) ->
        (match (__lte__ y_21230 0) with
        | true_4  => acc_21229
        | false_5  =>
          ((loop_21228)
            (__mod__ (__mul__ x_21224 acc_21229) m_21226) (__sub__ y_21230 1)))
    in ((loop_21227) 1 y_21225)

#[program]
def ord_28 := fun ord_21231 (c_21232) ->
                (__ord__ c_21232)

#[program]
def chr_29 := fun chr_21233 (i_21234) ->
                (__chr__ i_21234)

#[program]
def str_30 := fun str_21235 (c_21236) ->
                (__push__ "" c_21236)

#[program]
def strlen_31 := fun strlen_21237 (s_21238) ->
                   (__size__ s_21238)

#[program]
def string_of_int_32 :=
  fun string_of_int_21239 (i_21240) ->
    let aux_21241 :=
      fun aux_21242 (i_21243) ->
        (match (__lte__ 10 i_21243) with
        | true_4  =>
          let r_21244 := (__mod__ i_21243 10) in
          let i_21245 := (__div__ i_21243 10) in
          (__push__ ((aux_21242) i_21245)
            ((chr_29) (__add__ r_21244 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_21243 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_21240) with
    | true_4  => ((aux_21241) i_21240)
    | false_5  => (__cat__ "~" ((aux_21241) (__neg__ i_21240))))

#[program]
def splitU_84 :=
  fun split_21246 (__21247) ->
    (match __21247 with
    | nilUU_27  => (ex1UU_40 nilUU_27 nilUU_27)
    | consUU_28 hd_21248 tl_21249 =>
      (match tl_21249 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_21248 nilUU_27) nilUU_27)
      | consUU_28 hd_21250 tl_21251 =>
        (match ((split_21246) tl_21251) with
        | ex1UU_40 m_21252 n_21253 =>
          (ex1UU_40
            (consUU_28 hd_21248 m_21252) (consUU_28 hd_21250 n_21253)))))

#[program]
def splitL_83 :=
  fun split_21254 (__21255) ->
    (match __21255 with
    | nilUL_25  => (ex1LL_37 nilUL_25 nilUL_25)
    | consUL_26 hd_21256 tl_21257 =>
      (match tl_21257 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_21256 nilUL_25) nilUL_25)
      | consUL_26 hd_21258 tl_21259 =>
        (match ((split_21254) tl_21259) with
        | ex1LL_37 m_21260 n_21261 =>
          (ex1LL_37
            (consUL_26 hd_21256 m_21260) (consUL_26 hd_21258 n_21261)))))

#[program]
def mergeU_86 :=
  fun merge_21262 (__21263) -> (__21264) -o
    (match __21263 with
    | nilUU_27  => __21264
    | consUU_28 hd_21265 tl_21266 =>
      (match __21264 with
      | nilUU_27  => (consUU_28 hd_21265 tl_21266)
      | consUU_28 hd_21267 tl_21268 =>
        (match (__lte__ hd_21265 hd_21267) with
        | true_4  =>
          (consUU_28
            hd_21265 ((merge_21262) tl_21266 (consUU_28 hd_21267 tl_21268)))
        | false_5  =>
          (consUU_28
            hd_21267 ((merge_21262) (consUU_28 hd_21265 tl_21266) tl_21268)))))

#[program]
def mergeL_85 :=
  fun merge_21269 (__21270) -> (__21271) -o
    (match __21270 with
    | nilUL_25  => __21271
    | consUL_26 hd_21272 tl_21273 =>
      (match __21271 with
      | nilUL_25  => (consUL_26 hd_21272 tl_21273)
      | consUL_26 hd_21274 tl_21275 =>
        (match (__lte__ hd_21272 hd_21274) with
        | true_4  =>
          (consUL_26
            hd_21272 ((merge_21269) tl_21273 (consUL_26 hd_21274 tl_21275)))
        | false_5  =>
          (consUL_26
            hd_21274 ((merge_21269) (consUL_26 hd_21272 tl_21273) tl_21275)))))

#[program]
def msortU_88 :=
  fun msort_21276 (__21277) ->
    (match __21277 with
    | nilUU_27  => nilUU_27
    | consUU_28 hd_21278 tl_21279 =>
      (match tl_21279 with
      | nilUU_27  => (consUU_28 hd_21278 nilUU_27)
      | consUU_28 hd_21280 tl_21281 =>
        (match ((splitU_84)
                 (consUU_28 hd_21278 (consUU_28 hd_21280 tl_21281))) with
        | ex1UU_40 m_21282 n_21283 =>
          ((mergeU_86) ((msort_21276) m_21282) ((msort_21276) n_21283)))))

#[program]
def msortL_87 :=
  fun msort_21284 (__21285) ->
    (match __21285 with
    | nilUL_25  => nilUL_25
    | consUL_26 hd_21286 tl_21287 =>
      (match tl_21287 with
      | nilUL_25  => (consUL_26 hd_21286 nilUL_25)
      | consUL_26 hd_21288 tl_21289 =>
        (match ((splitL_83)
                 (consUL_26 hd_21286 (consUL_26 hd_21288 tl_21289))) with
        | ex1LL_37 m_21290 n_21291 =>
          ((mergeL_85) ((msort_21284) m_21290) ((msort_21284) n_21291)))))

#[logical]
def cmsort_chU_90 := NULL

#[logical]
def cmsort_chL_89 := NULL

#[program]
def cmsort_workerU_92 :=
  fun cmsort_worker_21292 (__21293) -> (zs_21294) -> (__21295) -o
    (match zs_21294 with
    | nilUU_27  =>
      let* c_21296 := ((send[R,U] __21295) (justUU_18 nilUU_27)) in
      close[true] c_21296
    | consUU_28 hd_21297 tl_21298 =>
      (match tl_21298 with
      | nilUU_27  =>
        let* c_21299 :=
          ((send[R,U] __21295) (justUU_18 (consUU_28 hd_21297 nilUU_27)))
        in close[true] c_21299
      | consUU_28 hd_21300 tl_21301 =>
        (match (__lte__ __21293 0) with
        | true_4  =>
          let* c_21302 :=
            ((send[R,U] __21295)
              (justUU_18
                ((msortU_88)
                  (consUU_28 hd_21297 (consUU_28 hd_21300 tl_21301)))))
          in close[true] c_21302
        | false_5  =>
          (match ((splitU_84)
                   (consUU_28 hd_21297 (consUU_28 hd_21300 tl_21301))) with
          | ex1UU_40 m_21303 n_21304 =>
            let* r1_21305 :=
              fork
                fun _21306 (_21307) -o
                  ((cmsort_worker_21292) (__sub__ __21293 1) m_21303 _21307)
            in
            let* r2_21308 :=
              fork
                fun _21309 (_21310) -o
                  ((cmsort_worker_21292) (__sub__ __21293 1) n_21304 _21310)
            in
            let* _21311 := recv[R,U] r1_21305 in
            (match _21311 with
            | ex1UL_39 m_21312 n_21313 =>
              (match m_21312 with
              | justUU_18 m_21314 =>
                let* _21315 := recv[R,U] r2_21308 in
                (match _21315 with
                | ex1UL_39 m_21316 n_21317 =>
                  (match m_21316 with
                  | justUU_18 m_21318 =>
                    let zs1_21319 :=
                      (justUU_18 ((mergeU_86) m_21314 m_21318))
                    in
                    let zs1_21320 :=
                      ((rwlUU_48) NULL NULL NULL NULL NULL zs1_21319)
                    in
                    let* c_21321 := ((send[R,U] __21295) zs1_21320) in
                    let* __21322 := close[false] n_21313 in
                    let* __21323 := close[false] n_21317 in
                    close[true] c_21321))))))))

#[program]
def cmsort_workerL_91 :=
  fun cmsort_worker_21324 (__21325) -> (zs_21326) -> (__21327) -o
    (match zs_21326 with
    | nilUL_25  =>
      let* c_21328 := ((send[R,L] __21327) (justLL_15 nilUL_25)) in
      close[true] c_21328
    | consUL_26 hd_21329 tl_21330 =>
      (match tl_21330 with
      | nilUL_25  =>
        let* c_21331 :=
          ((send[R,L] __21327) (justLL_15 (consUL_26 hd_21329 nilUL_25)))
        in close[true] c_21331
      | consUL_26 hd_21332 tl_21333 =>
        (match (__lte__ __21325 0) with
        | true_4  =>
          let* c_21334 :=
            ((send[R,L] __21327)
              (justLL_15
                ((msortL_87)
                  (consUL_26 hd_21329 (consUL_26 hd_21332 tl_21333)))))
          in close[true] c_21334
        | false_5  =>
          (match ((splitL_83)
                   (consUL_26 hd_21329 (consUL_26 hd_21332 tl_21333))) with
          | ex1LL_37 m_21335 n_21336 =>
            let* r1_21337 :=
              fork
                fun _21338 (_21339) -o
                  ((cmsort_worker_21324) (__sub__ __21325 1) m_21335 _21339)
            in
            let* r2_21340 :=
              fork
                fun _21341 (_21342) -o
                  ((cmsort_worker_21324) (__sub__ __21325 1) n_21336 _21342)
            in
            let* _21343 := recv[R,L] r1_21337 in
            (match _21343 with
            | ex1LL_37 m_21344 n_21345 =>
              (match m_21344 with
              | justLL_15 m_21346 =>
                let* _21347 := recv[R,L] r2_21340 in
                (match _21347 with
                | ex1LL_37 m_21348 n_21349 =>
                  (match m_21348 with
                  | justLL_15 m_21350 =>
                    let zs1_21351 :=
                      (justLL_15 ((mergeL_85) m_21346 m_21350))
                    in
                    let zs1_21352 :=
                      ((rwlLL_45) NULL NULL NULL NULL NULL zs1_21351)
                    in
                    let* c_21353 := ((send[R,L] __21327) zs1_21352) in
                    let* __21354 := close[false] n_21345 in
                    let* __21355 := close[false] n_21349 in
                    close[true] c_21353))))))))

#[program]
def cmsortU_94 :=
  fun cmsort_21356 (zs_21357) ->
    let* c_21358 :=
      fork fun _21359 (_21360) -o
             ((cmsort_workerU_92) 4 zs_21357 _21360)
    in
    let* _21361 := recv[R,U] c_21358 in
    (match _21361 with
    | ex1UL_39 m_21362 n_21363 =>
      let* __21364 := close[false] n_21363 in return m_21362)

#[program]
def cmsortL_93 :=
  fun cmsort_21365 (zs_21366) ->
    let* c_21367 :=
      fork fun _21368 (_21369) -o
             ((cmsort_workerL_91) 4 zs_21366 _21369)
    in
    let* _21370 := recv[R,L] c_21367 in
    (match _21370 with
    | ex1LL_37 m_21371 n_21372 =>
      let* __21373 := close[false] n_21372 in return m_21371)

#[program]
def mklistU_96 :=
  fun mklist_21374 (n_21375) ->
    (match (__lte__ n_21375 0) with
    | true_4  => nilUU_27
    | false_5  => (consUU_28 n_21375 ((mklist_21374) (__sub__ n_21375 1))))

#[program]
def mklistL_95 :=
  fun mklist_21376 (n_21377) ->
    (match (__lte__ n_21377 0) with
    | true_4  => nilUL_25
    | false_5  => (consUL_26 n_21377 ((mklist_21376) (__sub__ n_21377 1))))

#[program]
def list_lenU_98 :=
  fun list_len_21378 (__21379) ->
    (match __21379 with
    | nilUU_27  => 0
    | consUU_28 hd_21380 tl_21381 => (__add__ 1 ((list_len_21378) tl_21381)))

#[program]
def list_lenL_97 :=
  fun list_len_21382 (__21383) ->
    (match __21383 with
    | nilUL_25  => 0
    | consUL_26 hd_21384 tl_21385 => (__add__ 1 ((list_len_21382) tl_21385)))

#[program]
def print_listU_100 :=
  fun print_list_21386 (__21387) ->
    (match __21387 with
    | nilUU_27  => print "nil"
    | consUU_28 hd_21388 tl_21389 =>
      let* __21390 := print ((string_of_int_32) hd_21388) in
      let* __21391 := print " :: " in ((print_list_21386) tl_21389))

#[program]
def print_listL_99 :=
  fun print_list_21392 (__21393) ->
    (match __21393 with
    | nilUL_25  => print "nil"
    | consUL_26 hd_21394 tl_21395 =>
      let* __21396 := print ((string_of_int_32) hd_21394) in
      let* __21397 := print " :: " in ((print_list_21392) tl_21395))

#[program]
def main :=
  let test_21398 := ((mklistL_95) 2000000) in
  let* _21399 := ((cmsortL_93) test_21398) in
  (match _21399 with
  | justLL_15 m_21400 =>
    let len_21401 := ((list_lenL_97) m_21400) in
    print ((string_of_int_32) len_21401))

[trans12 success]

-----------------------------------------

#[program]
def idU_44 := fun id_21735 (A_21736) -> (m_21737) ->
                m_21737

#[program]
def idL_43 := fun id_21738 (A_21739) -> (m_21740) ->
                m_21740

#[logical]
inductive eqU_11 where
| reflU_14 of layout[]

#[logical]
inductive eqL_10 where
| reflL_13 of layout[]

#[program]
def rwlUU_48 :=
  fun rwl_21741 {A_21742} -> {m_21743} -> {n_21744} -> {B_21745} ->
  {__21746} -> (__21747) ->
    __21747

#[program]
def rwlUL_47 :=
  fun rwl_21748 {A_21749} -> {m_21750} -> {n_21751} -> {B_21752} ->
  {__21753} -> (__21754) ->
    __21754

#[program]
def rwlLU_46 :=
  fun rwl_21755 {A_21756} -> {m_21757} -> {n_21758} -> {B_21759} ->
  {__21760} -> (__21761) ->
    __21761

#[program]
def rwlLL_45 :=
  fun rwl_21762 {A_21763} -> {m_21764} -> {n_21765} -> {B_21766} ->
  {__21767} -> (__21768) ->
    __21768

#[program]
def rwrUU_52 :=
  fun rwr_21769 {A_21770} -> {m_21771} -> {n_21772} -> {B_21773} ->
  {__21774} -> (__21775) ->
    __21775

#[program]
def rwrUL_51 :=
  fun rwr_21776 {A_21777} -> {m_21778} -> {n_21779} -> {B_21780} ->
  {__21781} -> (__21782) ->
    __21782

#[program]
def rwrLU_50 :=
  fun rwr_21783 {A_21784} -> {m_21785} -> {n_21786} -> {B_21787} ->
  {__21788} -> (__21789) ->
    __21789

#[program]
def rwrLL_49 :=
  fun rwr_21790 {A_21791} -> {m_21792} -> {n_21793} -> {B_21794} ->
  {__21795} -> (__21796) ->
    __21796

#[logical]
def congrUUU_60 := NULL

#[logical]
def congrUUL_59 := NULL

#[logical]
def congrULU_58 := NULL

#[logical]
def congrULL_57 := NULL

#[logical]
def congrLUU_56 := NULL

#[logical]
def congrLUL_55 := NULL

#[logical]
def congrLLU_54 := NULL

#[logical]
def congrLLL_53 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_15 where
| justUU_18 of layout[R]

#[program]
inductive singUL_14 where
| justUL_17 of layout[R]

#[program]
inductive singLU_13 where


#[program]
inductive singLL_12 where
| justLL_15 of layout[R]

#[logical]
def ssingU_62 := NULL

#[logical]
def ssingL_61 := NULL

#[program]
def sing_elimUU_66 :=
  fun sing_elim_21797 {A_21798} -> {x_21799} -> (__21800) ->
    (match __21800 with
    | justUU_18 m_21801 => m_21801)

#[program]
def sing_elimUL_65 :=
  fun sing_elim_21802 {A_21803} -> {x_21804} -> (__21805) ->
    (match __21805 with
    | justUL_17 m_21806 => m_21806)

#[program]
def sing_elimLU_64 :=
  fun sing_elim_21807 {A_21808} -> {x_21809} -> (__21810) ->
    !!

#[program]
def sing_elimLL_63 :=
  fun sing_elim_21811 {A_21812} -> {x_21813} -> (__21814) ->
    (match __21814 with
    | justLL_15 m_21815 => m_21815)

#[logical]
def sing_uniqUU_70 := NULL

#[logical]
def sing_uniqUL_69 := NULL

#[logical]
def sing_uniqLU_68 := NULL

#[logical]
def sing_uniqLL_67 := NULL

#[program]
inductive baseU_17 where
| ttU_20 of layout[]

#[program]
inductive baseL_16 where
| ttL_19 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_21816 (__21817) ->
    (match __21817 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_21818 (__21819) -> (__21820) ->
    (match __21819 with
    | true_4  =>
      (match __21820 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_21821 (__21822) -> (__21823) ->
    (match __21822 with
    | true_4  => true_4
    | false_5  =>
      (match __21823 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_21824 (__21825) -> (__21826) ->
    (match __21825 with
    | true_4  =>
      (match __21826 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __21826 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_21827 (__21828) -> (__21829) ->
    (match __21828 with
    | zero_6  => true_4
    | succ_7 n_21830 =>
      (match __21829 with
      | zero_6  => false_5 | succ_7 n_21831 => ((lte_21827) n_21830 n_21831)))

#[program]
def lt_16 :=
  fun lt_21832 (x_21833) -> (y_21834) ->
    ((lte_15) (succ_7 x_21833) y_21834)

#[program]
def pred_17 :=
  fun pred_21835 (__21836) ->
    (match __21836 with
    | zero_6  => zero_6 | succ_7 n_21837 => n_21837)

#[program]
def add_18 :=
  fun add_21838 (__21839) -> (__21840) ->
    (match __21839 with
    | zero_6  => __21840
    | succ_7 n_21841 => (succ_7 ((add_21838) n_21841 __21840)))

#[program]
def sub_19 :=
  fun sub_21842 (__21843) -> (__21844) ->
    (match __21844 with
    | zero_6  => __21843
    | succ_7 n_21845 => ((sub_21842) ((pred_17) __21843) n_21845))

#[program]
def mul_20 :=
  fun mul_21846 (__21847) -> (__21848) ->
    (match __21847 with
    | zero_6  => zero_6
    | succ_7 n_21849 => ((add_18) __21848 ((mul_21846) n_21849 __21848)))

#[program]
def div_21 :=
  fun div_21850 (x_21851) -> (y_21852) ->
    (match ((lt_16) x_21851 y_21852) with
    | true_4  => zero_6
    | false_5  =>
      let loop_21853 :=
        fun loop_21854 (x_21855) -> (y_21856) ->
          (match ((sub_19) x_21855 ((pred_17) y_21856)) with
          | zero_6  => zero_6
          | succ_7 n_21857 => (succ_7 ((loop_21854) n_21857 y_21856)))
      in ((loop_21853) x_21851 y_21852))

#[program]
def rem_22 :=
  fun rem_21858 (x_21859) -> (y_21860) ->
    ((sub_19) x_21859 ((mul_20) ((div_21) x_21859 y_21860) y_21860))

#[program]
inductive listUU_21 where
| nilUU_27 of layout[]
| consUU_28 of layout[R, R]

#[program]
inductive listUL_20 where
| nilUL_25 of layout[]
| consUL_26 of layout[R, R]

#[program]
inductive listLU_19 where
| nilLU_23 of layout[]

#[program]
inductive listLL_18 where
| nilLL_21 of layout[]
| consLL_22 of layout[R, R]

#[program]
def free_listUU_74 :=
  fun free_list_21861 {A_21862} -> (f_21863) -> (__21864) ->
    (match __21864 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_21865 tl_21866 =>
      let __21867 := ((f_21863) hd_21865) in
      ((free_list_21861) NULL f_21863 tl_21866))

#[program]
def free_listUL_73 :=
  fun free_list_21868 {A_21869} -> (f_21870) -> (__21871) ->
    (match __21871 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_21872 tl_21873 =>
      let __21874 := ((f_21870) hd_21872) in
      ((free_list_21868) NULL f_21870 tl_21873))

#[program]
def free_listLL_71 :=
  fun free_list_21875 {A_21876} -> (f_21877) -> (__21878) ->
    (match __21878 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_21879 tl_21880 =>
      let __21881 := ((f_21877) hd_21879) in
      ((free_list_21875) NULL f_21877 tl_21880))

#[program]
inductive existsUU_25 where
| exUU_32 of layout[R, N]

#[program]
inductive existsUL_24 where
| exUL_31 of layout[R, N]

#[program]
inductive existsLU_23 where
| exLU_30 of layout[R, N]

#[program]
inductive existsLL_22 where
| exLL_29 of layout[R, N]

#[program]
inductive exists0UU_29 where
| ex0UU_36 of layout[N, R]

#[program]
inductive exists0UL_28 where
| ex0UL_35 of layout[N, R]

#[program]
inductive exists0LU_27 where
| ex0LU_34 of layout[N, R]

#[program]
inductive exists0LL_26 where
| ex0LL_33 of layout[N, R]

#[program]
inductive exists1UU_33 where
| ex1UU_40 of layout[R, R]

#[program]
inductive exists1UL_32 where
| ex1UL_39 of layout[R, R]

#[program]
inductive exists1LU_31 where
| ex1LU_38 of layout[R, R]

#[program]
inductive exists1LL_30 where
| ex1LL_37 of layout[R, R]

#[logical]
def prod0UU_78 := NULL

#[logical]
def prod0UL_77 := NULL

#[logical]
def prod0LU_76 := NULL

#[logical]
def prod0LL_75 := NULL

#[logical]
def prod1UU_82 := NULL

#[logical]
def prod1UL_81 := NULL

#[logical]
def prod1LU_80 := NULL

#[logical]
def prod1LL_79 := NULL

#[program]
def pow_26 :=
  fun pow_21882 (x_21883) -> (y_21884) ->
    let loop_21885 :=
      fun loop_21886 (acc_21887) -> (y_21888) ->
        (match (__lte__ y_21888 0) with
        | true_4  => acc_21887
        | false_5  =>
          ((loop_21886) (__mul__ x_21883 acc_21887) (__sub__ y_21888 1)))
    in ((loop_21885) 1 y_21884)

#[program]
def powm_27 :=
  fun powm_21889 (x_21890) -> (y_21891) -> (m_21892) ->
    let loop_21893 :=
      fun loop_21894 (acc_21895) -> (y_21896) ->
        (match (__lte__ y_21896 0) with
        | true_4  => acc_21895
        | false_5  =>
          ((loop_21894)
            (__mod__ (__mul__ x_21890 acc_21895) m_21892) (__sub__ y_21896 1)))
    in ((loop_21893) 1 y_21891)

#[program]
def ord_28 := fun ord_21897 (c_21898) ->
                (__ord__ c_21898)

#[program]
def chr_29 := fun chr_21899 (i_21900) ->
                (__chr__ i_21900)

#[program]
def str_30 := fun str_21901 (c_21902) ->
                (__push__ "" c_21902)

#[program]
def strlen_31 := fun strlen_21903 (s_21904) ->
                   (__size__ s_21904)

#[program]
def string_of_int_32 :=
  fun string_of_int_21905 (i_21906) ->
    let aux_21907 :=
      fun aux_21908 (i_21909) ->
        (match (__lte__ 10 i_21909) with
        | true_4  =>
          let r_21910 := (__mod__ i_21909 10) in
          let i_21911 := (__div__ i_21909 10) in
          (__push__ ((aux_21908) i_21911)
            ((chr_29) (__add__ r_21910 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_21909 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_21906) with
    | true_4  => ((aux_21907) i_21906)
    | false_5  => (__cat__ "~" ((aux_21907) (__neg__ i_21906))))

#[program]
def splitU_84 :=
  fun split_21912 (__21913) ->
    (match __21913 with
    | nilUU_27  => (ex1UU_40 nilUU_27 nilUU_27)
    | consUU_28 hd_21914 tl_21915 =>
      (match tl_21915 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_21914 nilUU_27) nilUU_27)
      | consUU_28 hd_21916 tl_21917 =>
        (match ((split_21912) tl_21917) with
        | ex1UU_40 m_21918 n_21919 =>
          (ex1UU_40
            (consUU_28 hd_21914 m_21918) (consUU_28 hd_21916 n_21919)))))

#[program]
def splitL_83 :=
  fun split_21920 (__21921) ->
    (match __21921 with
    | nilUL_25  => (ex1LL_37 nilUL_25 nilUL_25)
    | consUL_26 hd_21922 tl_21923 =>
      (match tl_21923 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_21922 nilUL_25) nilUL_25)
      | consUL_26 hd_21924 tl_21925 =>
        (match ((split_21920) tl_21925) with
        | ex1LL_37 m_21926 n_21927 =>
          (ex1LL_37
            (consUL_26 hd_21922 m_21926) (consUL_26 hd_21924 n_21927)))))

#[program]
def mergeU_86 :=
  fun merge_21928 (__21929) -> (__21930) -o
    (match __21929 with
    | nilUU_27  => __21930
    | consUU_28 hd_21931 tl_21932 =>
      (match __21930 with
      | nilUU_27  => (consUU_28 hd_21931 tl_21932)
      | consUU_28 hd_21933 tl_21934 =>
        (match (__lte__ hd_21931 hd_21933) with
        | true_4  =>
          (consUU_28
            hd_21931 ((merge_21928) tl_21932 (consUU_28 hd_21933 tl_21934)))
        | false_5  =>
          (consUU_28
            hd_21933 ((merge_21928) (consUU_28 hd_21931 tl_21932) tl_21934)))))

#[program]
def mergeL_85 :=
  fun merge_21935 (__21936) -> (__21937) -o
    (match __21936 with
    | nilUL_25  => __21937
    | consUL_26 hd_21938 tl_21939 =>
      (match __21937 with
      | nilUL_25  => (consUL_26 hd_21938 tl_21939)
      | consUL_26 hd_21940 tl_21941 =>
        (match (__lte__ hd_21938 hd_21940) with
        | true_4  =>
          (consUL_26
            hd_21938 ((merge_21935) tl_21939 (consUL_26 hd_21940 tl_21941)))
        | false_5  =>
          (consUL_26
            hd_21940 ((merge_21935) (consUL_26 hd_21938 tl_21939) tl_21941)))))

#[program]
def msortU_88 :=
  fun msort_21942 (__21943) ->
    (match __21943 with
    | nilUU_27  => nilUU_27
    | consUU_28 hd_21944 tl_21945 =>
      (match tl_21945 with
      | nilUU_27  => (consUU_28 hd_21944 nilUU_27)
      | consUU_28 hd_21946 tl_21947 =>
        (match ((splitU_84)
                 (consUU_28 hd_21944 (consUU_28 hd_21946 tl_21947))) with
        | ex1UU_40 m_21948 n_21949 =>
          ((mergeU_86) ((msort_21942) m_21948) ((msort_21942) n_21949)))))

#[program]
def msortL_87 :=
  fun msort_21950 (__21951) ->
    (match __21951 with
    | nilUL_25  => nilUL_25
    | consUL_26 hd_21952 tl_21953 =>
      (match tl_21953 with
      | nilUL_25  => (consUL_26 hd_21952 nilUL_25)
      | consUL_26 hd_21954 tl_21955 =>
        (match ((splitL_83)
                 (consUL_26 hd_21952 (consUL_26 hd_21954 tl_21955))) with
        | ex1LL_37 m_21956 n_21957 =>
          ((mergeL_85) ((msort_21950) m_21956) ((msort_21950) n_21957)))))

#[logical]
def cmsort_chU_90 := NULL

#[logical]
def cmsort_chL_89 := NULL

#[program]
def cmsort_workerU_92 :=
  fun cmsort_worker_21958 (__21959) -> (zs_21960) -> (__21961) -o
    (match zs_21960 with
    | nilUU_27  =>
      let* c_21962 := ((send[R,U] __21961) (justUU_18 nilUU_27)) in
      close[true] c_21962
    | consUU_28 hd_21963 tl_21964 =>
      (match tl_21964 with
      | nilUU_27  =>
        let* c_21965 :=
          ((send[R,U] __21961) (justUU_18 (consUU_28 hd_21963 nilUU_27)))
        in close[true] c_21965
      | consUU_28 hd_21966 tl_21967 =>
        (match (__lte__ __21959 0) with
        | true_4  =>
          let* c_21968 :=
            ((send[R,U] __21961)
              (justUU_18
                ((msortU_88)
                  (consUU_28 hd_21963 (consUU_28 hd_21966 tl_21967)))))
          in close[true] c_21968
        | false_5  =>
          (match ((splitU_84)
                   (consUU_28 hd_21963 (consUU_28 hd_21966 tl_21967))) with
          | ex1UU_40 m_21969 n_21970 =>
            let* r1_21971 :=
              fork
                fun _21972 (_21973) -o
                  ((cmsort_worker_21958) (__sub__ __21959 1) m_21969 _21973)
            in
            let* r2_21974 :=
              fork
                fun _21975 (_21976) -o
                  ((cmsort_worker_21958) (__sub__ __21959 1) n_21970 _21976)
            in
            let* _21977 := recv[R,U] r1_21971 in
            (match _21977 with
            | ex1UL_39 m_21978 n_21979 =>
              (match m_21978 with
              | justUU_18 m_21980 =>
                let* _21981 := recv[R,U] r2_21974 in
                (match _21981 with
                | ex1UL_39 m_21982 n_21983 =>
                  (match m_21982 with
                  | justUU_18 m_21984 =>
                    let zs1_21985 :=
                      (justUU_18 ((mergeU_86) m_21980 m_21984))
                    in
                    let zs1_21986 :=
                      ((rwlUU_48) NULL NULL NULL NULL NULL zs1_21985)
                    in
                    let* c_21987 := ((send[R,U] __21961) zs1_21986) in
                    let* __21988 := close[false] n_21979 in
                    let* __21989 := close[false] n_21983 in
                    close[true] c_21987))))))))

#[program]
def cmsort_workerL_91 :=
  fun cmsort_worker_21990 (__21991) -> (zs_21992) -> (__21993) -o
    (match zs_21992 with
    | nilUL_25  =>
      let* c_21994 := ((send[R,L] __21993) (justLL_15 nilUL_25)) in
      close[true] c_21994
    | consUL_26 hd_21995 tl_21996 =>
      (match tl_21996 with
      | nilUL_25  =>
        let* c_21997 :=
          ((send[R,L] __21993) (justLL_15 (consUL_26 hd_21995 nilUL_25)))
        in close[true] c_21997
      | consUL_26 hd_21998 tl_21999 =>
        (match (__lte__ __21991 0) with
        | true_4  =>
          let* c_22000 :=
            ((send[R,L] __21993)
              (justLL_15
                ((msortL_87)
                  (consUL_26 hd_21995 (consUL_26 hd_21998 tl_21999)))))
          in close[true] c_22000
        | false_5  =>
          (match ((splitL_83)
                   (consUL_26 hd_21995 (consUL_26 hd_21998 tl_21999))) with
          | ex1LL_37 m_22001 n_22002 =>
            let* r1_22003 :=
              fork
                fun _22004 (_22005) -o
                  ((cmsort_worker_21990) (__sub__ __21991 1) m_22001 _22005)
            in
            let* r2_22006 :=
              fork
                fun _22007 (_22008) -o
                  ((cmsort_worker_21990) (__sub__ __21991 1) n_22002 _22008)
            in
            let* _22009 := recv[R,L] r1_22003 in
            (match _22009 with
            | ex1LL_37 m_22010 n_22011 =>
              (match m_22010 with
              | justLL_15 m_22012 =>
                let* _22013 := recv[R,L] r2_22006 in
                (match _22013 with
                | ex1LL_37 m_22014 n_22015 =>
                  (match m_22014 with
                  | justLL_15 m_22016 =>
                    let zs1_22017 :=
                      (justLL_15 ((mergeL_85) m_22012 m_22016))
                    in
                    let zs1_22018 :=
                      ((rwlLL_45) NULL NULL NULL NULL NULL zs1_22017)
                    in
                    let* c_22019 := ((send[R,L] __21993) zs1_22018) in
                    let* __22020 := close[false] n_22011 in
                    let* __22021 := close[false] n_22015 in
                    close[true] c_22019))))))))

#[program]
def cmsortU_94 :=
  fun cmsort_22022 (zs_22023) ->
    let* c_22024 :=
      fork fun _22025 (_22026) -o
             ((cmsort_workerU_92) 4 zs_22023 _22026)
    in
    let* _22027 := recv[R,U] c_22024 in
    (match _22027 with
    | ex1UL_39 m_22028 n_22029 =>
      let* __22030 := close[false] n_22029 in return m_22028)

#[program]
def cmsortL_93 :=
  fun cmsort_22031 (zs_22032) ->
    let* c_22033 :=
      fork fun _22034 (_22035) -o
             ((cmsort_workerL_91) 4 zs_22032 _22035)
    in
    let* _22036 := recv[R,L] c_22033 in
    (match _22036 with
    | ex1LL_37 m_22037 n_22038 =>
      let* __22039 := close[false] n_22038 in return m_22037)

#[program]
def mklistU_96 :=
  fun mklist_22040 (n_22041) ->
    (match (__lte__ n_22041 0) with
    | true_4  => nilUU_27
    | false_5  => (consUU_28 n_22041 ((mklist_22040) (__sub__ n_22041 1))))

#[program]
def mklistL_95 :=
  fun mklist_22042 (n_22043) ->
    (match (__lte__ n_22043 0) with
    | true_4  => nilUL_25
    | false_5  => (consUL_26 n_22043 ((mklist_22042) (__sub__ n_22043 1))))

#[program]
def list_lenU_98 :=
  fun list_len_22044 (__22045) ->
    (match __22045 with
    | nilUU_27  => 0
    | consUU_28 hd_22046 tl_22047 => (__add__ 1 ((list_len_22044) tl_22047)))

#[program]
def list_lenL_97 :=
  fun list_len_22048 (__22049) ->
    (match __22049 with
    | nilUL_25  => 0
    | consUL_26 hd_22050 tl_22051 => (__add__ 1 ((list_len_22048) tl_22051)))

#[program]
def print_listU_100 :=
  fun print_list_22052 (__22053) ->
    (match __22053 with
    | nilUU_27  => print "nil"
    | consUU_28 hd_22054 tl_22055 =>
      let* __22056 := print ((string_of_int_32) hd_22054) in
      let* __22057 := print " :: " in ((print_list_22052) tl_22055))

#[program]
def print_listL_99 :=
  fun print_list_22058 (__22059) ->
    (match __22059 with
    | nilUL_25  => print "nil"
    | consUL_26 hd_22060 tl_22061 =>
      let* __22062 := print ((string_of_int_32) hd_22060) in
      let* __22063 := print " :: " in ((print_list_22058) tl_22061))

#[program]
def main :=
  let test_22064 := ((mklistL_95) 2000000) in
  let* _22065 := ((cmsortL_93) test_22064) in
  (match _22065 with
  | justLL_15 m_22066 =>
    let len_22067 := ((list_lenL_97) m_22066) in
    print ((string_of_int_32) len_22067))

[trans2e success]

-----------------------------------------

def idU_44 := fun id_22439 (A_22440) -> (m_22441) -> m_22441

def idL_43 := fun id_22442 (A_22443) -> (m_22444) -> m_22444

def rwlUU_48 :=
  fun rwl_22445 (A_22446) -> (m_22447) -> (n_22448) -> (B_22449) ->
  (__22450) -> (__22451) -> __22451

def rwlUL_47 :=
  fun rwl_22452 (A_22453) -> (m_22454) -> (n_22455) -> (B_22456) ->
  (__22457) -> (__22458) -> __22458

def rwlLU_46 :=
  fun rwl_22459 (A_22460) -> (m_22461) -> (n_22462) -> (B_22463) ->
  (__22464) -> (__22465) -> __22465

def rwlLL_45 :=
  fun rwl_22466 (A_22467) -> (m_22468) -> (n_22469) -> (B_22470) ->
  (__22471) -> (__22472) -> __22472

def rwrUU_52 :=
  fun rwr_22473 (A_22474) -> (m_22475) -> (n_22476) -> (B_22477) ->
  (__22478) -> (__22479) -> __22479

def rwrUL_51 :=
  fun rwr_22480 (A_22481) -> (m_22482) -> (n_22483) -> (B_22484) ->
  (__22485) -> (__22486) -> __22486

def rwrLU_50 :=
  fun rwr_22487 (A_22488) -> (m_22489) -> (n_22490) -> (B_22491) ->
  (__22492) -> (__22493) -> __22493

def rwrLL_49 :=
  fun rwr_22494 (A_22495) -> (m_22496) -> (n_22497) -> (B_22498) ->
  (__22499) -> (__22500) -> __22500

def sing_elimUU_66 :=
  fun sing_elim_22501 (A_22502) -> (x_22503) -> (__22504) -> __22504

def sing_elimUL_65 :=
  fun sing_elim_22505 (A_22506) -> (x_22507) -> (__22508) -> __22508

def sing_elimLU_64 :=
  fun sing_elim_22509 (A_22510) -> (x_22511) -> (__22512) -> !!

def sing_elimLL_63 :=
  fun sing_elim_22513 (A_22514) -> (x_22515) -> (__22516) -> __22516

def not_11 :=
  fun not_22517 (__22518) ->
    (match __22518 with
    | true_4 => false_5 | false_5 => true_4)

def and_12 :=
  fun and_22519 (__22520) -> (__22521) ->
    (match __22520 with
    | true_4 => (match __22521 with
                | true_4 => true_4 | false_5 => false_5)
    | false_5 => false_5)

def or_13 :=
  fun or_22522 (__22523) -> (__22524) ->
    (match __22523 with
    | true_4 => true_4
    | false_5 => (match __22524 with
                 | true_4 => true_4 | false_5 => false_5))

def xor_14 :=
  fun xor_22525 (__22526) -> (__22527) ->
    (match __22526 with
    | true_4 => (match __22527 with
                | true_4 => false_5 | false_5 => true_4)
    | false_5 => (match __22527 with
                 | true_4 => true_4 | false_5 => false_5))

def lte_15 :=
  fun lte_22528 (__22529) -> (__22530) ->
    (match __22529 with
    | zero_6  => true_4
    | succ_7 n_22531 =>
      (match __22530 with
      | zero_6  => false_5 | succ_7 n_22532 => ((lte_22528) n_22531 n_22532)))

def lt_16 :=
  fun lt_22533 (x_22534) -> (y_22535) -> ((lte_15) (succ_7 x_22534) y_22535)

def pred_17 :=
  fun pred_22536 (__22537) ->
    (match __22537 with
    | zero_6  => (zero_6 ) | succ_7 n_22538 => n_22538)

def add_18 :=
  fun add_22539 (__22540) -> (__22541) ->
    (match __22540 with
    | zero_6  => __22541
    | succ_7 n_22542 => (succ_7 ((add_22539) n_22542 __22541)))

def sub_19 :=
  fun sub_22543 (__22544) -> (__22545) ->
    (match __22545 with
    | zero_6  => __22544
    | succ_7 n_22546 => ((sub_22543) ((pred_17) __22544) n_22546))

def mul_20 :=
  fun mul_22547 (__22548) -> (__22549) ->
    (match __22548 with
    | zero_6  => (zero_6 )
    | succ_7 n_22550 => ((add_18) __22549 ((mul_22547) n_22550 __22549)))

def div_21 :=
  fun div_22551 (x_22552) -> (y_22553) ->
    (match ((lt_16) x_22552 y_22553) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_22554 :=
        fun loop_22555 (x_22556) -> (y_22557) ->
          (match ((sub_19) x_22556 ((pred_17) y_22557)) with
          | zero_6  => (zero_6 )
          | succ_7 n_22558 => (succ_7 ((loop_22555) n_22558 y_22557)))
      in ((loop_22554) x_22552 y_22553))

def rem_22 :=
  fun rem_22559 (x_22560) -> (y_22561) ->
    ((sub_19) x_22560 ((mul_20) ((div_21) x_22560 y_22561) y_22561))

def free_listUU_74 :=
  fun free_list_22562 (A_22563) -> (f_22564) -> (__22565) ->
    (match __22565 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_22566 tl_22567 =>
      let __22568 := ((f_22564) hd_22566) in
      ((free_list_22562) NULL f_22564 tl_22567))

def free_listUL_73 :=
  fun free_list_22569 (A_22570) -> (f_22571) -> (__22572) ->
    (match __22572 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_22573 tl_22574 =>
      let __22575 := ((f_22571) hd_22573) in
      ((free_list_22569) NULL f_22571 tl_22574))

def free_listLL_71 :=
  fun free_list_22576 (A_22577) -> (f_22578) -> (__22579) ->
    (match __22579 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_22580 tl_22581 =>
      let __22582 := ((f_22578) hd_22580) in
      ((free_list_22576) NULL f_22578 tl_22581))

def pow_26 :=
  fun pow_22583 (x_22584) -> (y_22585) ->
    let loop_22586 :=
      fun loop_22587 (acc_22588) -> (y_22589) ->
        (match (__lte__ y_22589 0) with
        | true_4 => acc_22588
        | false_5 =>
          ((loop_22587) (__mul__ x_22584 acc_22588) (__sub__ y_22589 1)))
    in ((loop_22586) 1 y_22585)

def powm_27 :=
  fun powm_22590 (x_22591) -> (y_22592) -> (m_22593) ->
    let loop_22594 :=
      fun loop_22595 (acc_22596) -> (y_22597) ->
        (match (__lte__ y_22597 0) with
        | true_4 => acc_22596
        | false_5 =>
          ((loop_22595)
            (__mod__ (__mul__ x_22591 acc_22596) m_22593) (__sub__ y_22597 1)))
    in ((loop_22594) 1 y_22592)

def ord_28 := fun ord_22598 (c_22599) -> (__ord__ c_22599)

def chr_29 := fun chr_22600 (i_22601) -> (__chr__ i_22601)

def str_30 := fun str_22602 (c_22603) -> (__push__ "" c_22603)

def strlen_31 := fun strlen_22604 (s_22605) -> (__size__ s_22605)

def string_of_int_32 :=
  fun string_of_int_22606 (i_22607) ->
    let aux_22608 :=
      fun aux_22609 (i_22610) ->
        (match (__lte__ 10 i_22610) with
        | true_4 =>
          let r_22611 := (__mod__ i_22610 10) in
          let i_22612 := (__div__ i_22610 10) in
          (__push__ ((aux_22609) i_22612)
            ((chr_29) (__add__ r_22611 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_22610 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_22607) with
    | true_4 => ((aux_22608) i_22607)
    | false_5 => (__cat__ "~" ((aux_22608) (__neg__ i_22607))))

def splitU_84 :=
  fun split_22613 (__22614) ->
    (match __22614 with
    | nilUU_27  => (ex1UU_40 (nilUU_27 ) (nilUU_27 ))
    | consUU_28 hd_22615 tl_22616 =>
      (match tl_22616 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_22615 (nilUU_27 )) (nilUU_27 ))
      | consUU_28 hd_22617 tl_22618 =>
        (match ((split_22613) tl_22618) with
        | ex1UU_40 m_22619 n_22620 =>
          (ex1UU_40
            (consUU_28 hd_22615 m_22619) (consUU_28 hd_22617 n_22620)))))

def splitL_83 :=
  fun split_22621 (__22622) ->
    (match __22622 with
    | nilUL_25  => (ex1LL_37 (nilUL_25 ) (nilUL_25 ))
    | consUL_26 hd_22623 tl_22624 =>
      (match tl_22624 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_22623 (nilUL_25 )) (nilUL_25 ))
      | consUL_26 hd_22625 tl_22626 =>
        (match ((split_22621) tl_22626) with
        | ex1LL_37 m_22627 n_22628 =>
          (ex1LL_37
            (consUL_26 hd_22623 m_22627) (consUL_26 hd_22625 n_22628)))))

def mergeU_86 :=
  fun merge_22629 (__22630) -> (__22631) -o
    (match __22630 with
    | nilUU_27  => __22631
    | consUU_28 hd_22632 tl_22633 =>
      (match __22631 with
      | nilUU_27  => (consUU_28 hd_22632 tl_22633)
      | consUU_28 hd_22634 tl_22635 =>
        (match (__lte__ hd_22632 hd_22634) with
        | true_4 =>
          (consUU_28
            hd_22632 ((merge_22629) tl_22633 (consUU_28 hd_22634 tl_22635)))
        | false_5 =>
          (consUU_28
            hd_22634 ((merge_22629) (consUU_28 hd_22632 tl_22633) tl_22635)))))

def mergeL_85 :=
  fun merge_22636 (__22637) -> (__22638) -o
    (match __22637 with
    | nilUL_25  => __22638
    | consUL_26 hd_22639 tl_22640 =>
      (match __22638 with
      | nilUL_25  => (consUL_26 hd_22639 tl_22640)
      | consUL_26 hd_22641 tl_22642 =>
        (match (__lte__ hd_22639 hd_22641) with
        | true_4 =>
          (consUL_26
            hd_22639 ((merge_22636) tl_22640 (consUL_26 hd_22641 tl_22642)))
        | false_5 =>
          (consUL_26
            hd_22641 ((merge_22636) (consUL_26 hd_22639 tl_22640) tl_22642)))))

def msortU_88 :=
  fun msort_22643 (__22644) ->
    (match __22644 with
    | nilUU_27  => (nilUU_27 )
    | consUU_28 hd_22645 tl_22646 =>
      (match tl_22646 with
      | nilUU_27  => (consUU_28 hd_22645 (nilUU_27 ))
      | consUU_28 hd_22647 tl_22648 =>
        (match ((splitU_84)
                 (consUU_28 hd_22645 (consUU_28 hd_22647 tl_22648))) with
        | ex1UU_40 m_22649 n_22650 =>
          ((mergeU_86) ((msort_22643) m_22649) ((msort_22643) n_22650)))))

def msortL_87 :=
  fun msort_22651 (__22652) ->
    (match __22652 with
    | nilUL_25  => (nilUL_25 )
    | consUL_26 hd_22653 tl_22654 =>
      (match tl_22654 with
      | nilUL_25  => (consUL_26 hd_22653 (nilUL_25 ))
      | consUL_26 hd_22655 tl_22656 =>
        (match ((splitL_83)
                 (consUL_26 hd_22653 (consUL_26 hd_22655 tl_22656))) with
        | ex1LL_37 m_22657 n_22658 =>
          ((mergeL_85) ((msort_22651) m_22657) ((msort_22651) n_22658)))))

def cmsort_workerU_92 :=
  fun cmsort_worker_22659 (__22660) -> (zs_22661) -> (__22662) -o
    (match zs_22661 with
    | nilUU_27  =>
      lazy(let c_22663 :=
             force(((lam (x_22664) -> lazy(send(__22662, x_22664)))
                     (nilUU_27 )))
           in force(lazy(close[true] c_22663)))
    | consUU_28 hd_22665 tl_22666 =>
      (match tl_22666 with
      | nilUU_27  =>
        lazy(let c_22667 :=
               force(((lam (x_22668) -> lazy(send(__22662, x_22668)))
                       (consUU_28 hd_22665 (nilUU_27 ))))
             in force(lazy(close[true] c_22667)))
      | consUU_28 hd_22669 tl_22670 =>
        (match (__lte__ __22660 0) with
        | true_4 =>
          lazy(let c_22671 :=
                 force(((lam (x_22672) -> lazy(send(__22662, x_22672)))
                         ((msortU_88)
                           (consUU_28 hd_22665 (consUU_28 hd_22669 tl_22670)))))
               in force(lazy(close[true] c_22671)))
        | false_5 =>
          (match ((splitU_84)
                   (consUU_28 hd_22665 (consUU_28 hd_22669 tl_22670))) with
          | ex1UU_40 m_22673 n_22674 =>
            lazy(let r1_22675 :=
                   force(lazy(fork
                                fun _22676 (_22677) -o
                                  ((cmsort_worker_22659)
                                    (__sub__ __22660 1) m_22673 _22677)))
                 in
                 let r2_22678 :=
                   force(lazy(fork
                                fun _22679 (_22680) -o
                                  ((cmsort_worker_22659)
                                    (__sub__ __22660 1) n_22674 _22680)))
                 in
                 let _22681 := force(lazy(recv[U](r1_22675))) in
                 force((match _22681 with
                       | ex1UL_39 m_22682 n_22683 =>
                         lazy(let _22684 := force(lazy(recv[U](r2_22678))) in
                              force((match _22684 with
                                    | ex1UL_39 m_22685 n_22686 =>
                                      let zs1_22687 :=
                                        ((mergeU_86) m_22682 m_22685)
                                      in
                                      let zs1_22688 :=
                                        ((rwlUU_48)
                                          NULL NULL NULL NULL NULL zs1_22687)
                                      in
                                      lazy(let c_22689 :=
                                             force(((lam (x_22690) ->
                                                       lazy(send(__22662, x_22690)))
                                                     zs1_22688))
                                           in
                                           let __22691 :=
                                             force(lazy(close[false] n_22683))
                                           in
                                           let __22692 :=
                                             force(lazy(close[false] n_22686))
                                           in
                                           force(lazy(close[true] c_22689)))))))))))))

def cmsort_workerL_91 :=
  fun cmsort_worker_22693 (__22694) -> (zs_22695) -> (__22696) -o
    (match zs_22695 with
    | nilUL_25  =>
      lazy(let c_22697 :=
             force(((lam (x_22698) -> lazy(send(__22696, x_22698)))
                     (nilUL_25 )))
           in force(lazy(close[true] c_22697)))
    | consUL_26 hd_22699 tl_22700 =>
      (match tl_22700 with
      | nilUL_25  =>
        lazy(let c_22701 :=
               force(((lam (x_22702) -> lazy(send(__22696, x_22702)))
                       (consUL_26 hd_22699 (nilUL_25 ))))
             in force(lazy(close[true] c_22701)))
      | consUL_26 hd_22703 tl_22704 =>
        (match (__lte__ __22694 0) with
        | true_4 =>
          lazy(let c_22705 :=
                 force(((lam (x_22706) -> lazy(send(__22696, x_22706)))
                         ((msortL_87)
                           (consUL_26 hd_22699 (consUL_26 hd_22703 tl_22704)))))
               in force(lazy(close[true] c_22705)))
        | false_5 =>
          (match ((splitL_83)
                   (consUL_26 hd_22699 (consUL_26 hd_22703 tl_22704))) with
          | ex1LL_37 m_22707 n_22708 =>
            lazy(let r1_22709 :=
                   force(lazy(fork
                                fun _22710 (_22711) -o
                                  ((cmsort_worker_22693)
                                    (__sub__ __22694 1) m_22707 _22711)))
                 in
                 let r2_22712 :=
                   force(lazy(fork
                                fun _22713 (_22714) -o
                                  ((cmsort_worker_22693)
                                    (__sub__ __22694 1) n_22708 _22714)))
                 in
                 let _22715 := force(lazy(recv[L](r1_22709))) in
                 force((match _22715 with
                       | ex1LL_37 m_22716 n_22717 =>
                         lazy(let _22718 := force(lazy(recv[L](r2_22712))) in
                              force((match _22718 with
                                    | ex1LL_37 m_22719 n_22720 =>
                                      let zs1_22721 :=
                                        ((mergeL_85) m_22716 m_22719)
                                      in
                                      let zs1_22722 :=
                                        ((rwlLL_45)
                                          NULL NULL NULL NULL NULL zs1_22721)
                                      in
                                      lazy(let c_22723 :=
                                             force(((lam (x_22724) ->
                                                       lazy(send(__22696, x_22724)))
                                                     zs1_22722))
                                           in
                                           let __22725 :=
                                             force(lazy(close[false] n_22717))
                                           in
                                           let __22726 :=
                                             force(lazy(close[false] n_22720))
                                           in
                                           force(lazy(close[true] c_22723)))))))))))))

def cmsortU_94 :=
  fun cmsort_22727 (zs_22728) ->
    lazy(let c_22729 :=
           force(lazy(fork
                        fun _22730 (_22731) -o
                          ((cmsort_workerU_92) 4 zs_22728 _22731)))
         in
         let _22732 := force(lazy(recv[U](c_22729))) in
         force((match _22732 with
               | ex1UL_39 m_22733 n_22734 =>
                 lazy(let __22735 := force(lazy(close[false] n_22734)) in
                      force(lazy(m_22733))))))

def cmsortL_93 :=
  fun cmsort_22736 (zs_22737) ->
    lazy(let c_22738 :=
           force(lazy(fork
                        fun _22739 (_22740) -o
                          ((cmsort_workerL_91) 4 zs_22737 _22740)))
         in
         let _22741 := force(lazy(recv[L](c_22738))) in
         force((match _22741 with
               | ex1LL_37 m_22742 n_22743 =>
                 lazy(let __22744 := force(lazy(close[false] n_22743)) in
                      force(lazy(m_22742))))))

def mklistU_96 :=
  fun mklist_22745 (n_22746) ->
    (match (__lte__ n_22746 0) with
    | true_4 => (nilUU_27 )
    | false_5 => (consUU_28 n_22746 ((mklist_22745) (__sub__ n_22746 1))))

def mklistL_95 :=
  fun mklist_22747 (n_22748) ->
    (match (__lte__ n_22748 0) with
    | true_4 => (nilUL_25 )
    | false_5 => (consUL_26 n_22748 ((mklist_22747) (__sub__ n_22748 1))))

def list_lenU_98 :=
  fun list_len_22749 (__22750) ->
    (match __22750 with
    | nilUU_27  => 0
    | consUU_28 hd_22751 tl_22752 => (__add__ 1 ((list_len_22749) tl_22752)))

def list_lenL_97 :=
  fun list_len_22753 (__22754) ->
    (match __22754 with
    | nilUL_25  => 0
    | consUL_26 hd_22755 tl_22756 => (__add__ 1 ((list_len_22753) tl_22756)))

def print_listU_100 :=
  fun print_list_22757 (__22758) ->
    (match __22758 with
    | nilUU_27  => lazy(print "nil")
    | consUU_28 hd_22759 tl_22760 =>
      lazy(let __22761 := force(lazy(print ((string_of_int_32) hd_22759))) in
           let __22762 := force(lazy(print " :: ")) in
           force(((print_list_22757) tl_22760))))

def print_listL_99 :=
  fun print_list_22763 (__22764) ->
    (match __22764 with
    | nilUL_25  => lazy(print "nil")
    | consUL_26 hd_22765 tl_22766 =>
      lazy(let __22767 := force(lazy(print ((string_of_int_32) hd_22765))) in
           let __22768 := force(lazy(print " :: ")) in
           force(((print_list_22763) tl_22766))))

def main :=
  let test_22769 := ((mklistL_95) 2000000) in
  lazy(let _22770 := force(((cmsortL_93) test_22769)) in
       force(let len_22771 := ((list_lenL_97) _22770) in
             lazy(print ((string_of_int_32) len_22771))))

[trans23 success]

-----------------------------------------

def idU_44 := lam (A_23196) -> (m_23197) -> m_23197

def idL_43 := lam (A_23198) -> (m_23199) -> m_23199

def rwlUU_48 :=
  lam (A_23200) -> (m_23201) -> (n_23202) -> (B_23203) -> (__23204) ->
  (__23205) -> __23205

def rwlUL_47 :=
  lam (A_23206) -> (m_23207) -> (n_23208) -> (B_23209) -> (__23210) ->
  (__23211) -> __23211

def rwlLU_46 :=
  lam (A_23212) -> (m_23213) -> (n_23214) -> (B_23215) -> (__23216) ->
  (__23217) -> __23217

def rwlLL_45 :=
  lam (A_23218) -> (m_23219) -> (n_23220) -> (B_23221) -> (__23222) ->
  (__23223) -> __23223

def rwrUU_52 :=
  lam (A_23224) -> (m_23225) -> (n_23226) -> (B_23227) -> (__23228) ->
  (__23229) -> __23229

def rwrUL_51 :=
  lam (A_23230) -> (m_23231) -> (n_23232) -> (B_23233) -> (__23234) ->
  (__23235) -> __23235

def rwrLU_50 :=
  lam (A_23236) -> (m_23237) -> (n_23238) -> (B_23239) -> (__23240) ->
  (__23241) -> __23241

def rwrLL_49 :=
  lam (A_23242) -> (m_23243) -> (n_23244) -> (B_23245) -> (__23246) ->
  (__23247) -> __23247

def sing_elimUU_66 := lam (A_23248) -> (x_23249) -> (__23250) -> __23250

def sing_elimUL_65 := lam (A_23251) -> (x_23252) -> (__23253) -> __23253

def sing_elimLU_64 := lam (A_23254) -> (x_23255) -> (__23256) -> !!

def sing_elimLL_63 := lam (A_23257) -> (x_23258) -> (__23259) -> __23259

def not_11 :=
  lam (__23260) ->
    (match __23260 with
    | true_4 => false_5 | false_5 => true_4)

def and_12 :=
  lam (__23261) -> (__23262) ->
    (match __23261 with
    | true_4 => (match __23262 with
                | true_4 => true_4 | false_5 => false_5)
    | false_5 => false_5)

def or_13 :=
  lam (__23263) -> (__23264) ->
    (match __23263 with
    | true_4 => true_4
    | false_5 => (match __23264 with
                 | true_4 => true_4 | false_5 => false_5))

def xor_14 :=
  lam (__23265) -> (__23266) ->
    (match __23265 with
    | true_4 => (match __23266 with
                | true_4 => false_5 | false_5 => true_4)
    | false_5 => (match __23266 with
                 | true_4 => true_4 | false_5 => false_5))

def lte_15 :=
  fun lte_23267 (__23268) -> (__23269) ->
    (match __23268 with
    | zero_6  => true_4
    | succ_7 n_23270 =>
      (match __23269 with
      | zero_6  => false_5 | succ_7 n_23271 => ((lte_23267) n_23270 n_23271)))

def lt_16 :=
  lam (x_23272) -> (y_23273) -> ((lte_15) (succ_7 x_23272) y_23273)

def pred_17 :=
  lam (__23274) ->
    (match __23274 with
    | zero_6  => (zero_6 ) | succ_7 n_23275 => n_23275)

def add_18 :=
  fun add_23276 (__23277) -> (__23278) ->
    (match __23277 with
    | zero_6  => __23278
    | succ_7 n_23279 => (succ_7 ((add_23276) n_23279 __23278)))

def sub_19 :=
  fun sub_23280 (__23281) -> (__23282) ->
    (match __23282 with
    | zero_6  => __23281
    | succ_7 n_23283 => ((sub_23280) ((pred_17) __23281) n_23283))

def mul_20 :=
  fun mul_23284 (__23285) -> (__23286) ->
    (match __23285 with
    | zero_6  => (zero_6 )
    | succ_7 n_23287 => ((add_18) __23286 ((mul_23284) n_23287 __23286)))

def div_21 :=
  lam (x_23288) -> (y_23289) ->
    (match ((lt_16) x_23288 y_23289) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_23290 :=
        fun loop_23291 (x_23292) -> (y_23293) ->
          (match ((sub_19) x_23292 ((pred_17) y_23293)) with
          | zero_6  => (zero_6 )
          | succ_7 n_23294 => (succ_7 ((loop_23291) n_23294 y_23293)))
      in ((loop_23290) x_23288 y_23289))

def rem_22 :=
  lam (x_23295) -> (y_23296) ->
    ((sub_19) x_23295 ((mul_20) ((div_21) x_23295 y_23296) y_23296))

def free_listUU_74 :=
  fun free_list_23297 (A_23298) -> (f_23299) -> (__23300) ->
    (match __23300 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_23301 tl_23302 =>
      let __23303 := ((f_23299) hd_23301) in
      ((free_list_23297) NULL f_23299 tl_23302))

def free_listUL_73 :=
  fun free_list_23304 (A_23305) -> (f_23306) -> (__23307) ->
    (match __23307 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_23308 tl_23309 =>
      let __23310 := ((f_23306) hd_23308) in
      ((free_list_23304) NULL f_23306 tl_23309))

def free_listLL_71 :=
  fun free_list_23311 (A_23312) -> (f_23313) -> (__23314) ->
    (match __23314 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_23315 tl_23316 =>
      let __23317 := ((f_23313) hd_23315) in
      ((free_list_23311) NULL f_23313 tl_23316))

def pow_26 :=
  lam (x_23318) -> (y_23319) ->
    let loop_23320 :=
      fun loop_23321 (acc_23322) -> (y_23323) ->
        (match (__lte__ y_23323 0) with
        | true_4 => acc_23322
        | false_5 =>
          ((loop_23321) (__mul__ x_23318 acc_23322) (__sub__ y_23323 1)))
    in ((loop_23320) 1 y_23319)

def powm_27 :=
  lam (x_23324) -> (y_23325) -> (m_23326) ->
    let loop_23327 :=
      fun loop_23328 (acc_23329) -> (y_23330) ->
        (match (__lte__ y_23330 0) with
        | true_4 => acc_23329
        | false_5 =>
          ((loop_23328)
            (__mod__ (__mul__ x_23324 acc_23329) m_23326) (__sub__ y_23330 1)))
    in ((loop_23327) 1 y_23325)

def ord_28 := lam (c_23331) -> (__ord__ c_23331)

def chr_29 := lam (i_23332) -> (__chr__ i_23332)

def str_30 := lam (c_23333) -> (__push__ "" c_23333)

def strlen_31 := lam (s_23334) -> (__size__ s_23334)

def string_of_int_32 :=
  lam (i_23335) ->
    let aux_23336 :=
      fun aux_23337 (i_23338) ->
        (match (__lte__ 10 i_23338) with
        | true_4 =>
          let r_23339 := (__mod__ i_23338 10) in
          let i_23340 := (__div__ i_23338 10) in
          (__push__ ((aux_23337) i_23340)
            ((chr_29) (__add__ r_23339 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_23338 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_23335) with
    | true_4 => ((aux_23336) i_23335)
    | false_5 => (__cat__ "~" ((aux_23336) (__neg__ i_23335))))

def splitU_84 :=
  fun split_23341 (__23342) ->
    (match __23342 with
    | nilUU_27  => (ex1UU_40 (nilUU_27 ) (nilUU_27 ))
    | consUU_28 hd_23343 tl_23344 =>
      (match tl_23344 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_23343 (nilUU_27 )) (nilUU_27 ))
      | consUU_28 hd_23345 tl_23346 =>
        (match ((split_23341) tl_23346) with
        | ex1UU_40 m_23347 n_23348 =>
          (ex1UU_40
            (consUU_28 hd_23343 m_23347) (consUU_28 hd_23345 n_23348)))))

def splitL_83 :=
  fun split_23349 (__23350) ->
    (match __23350 with
    | nilUL_25  => (ex1LL_37 (nilUL_25 ) (nilUL_25 ))
    | consUL_26 hd_23351 tl_23352 =>
      (match tl_23352 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_23351 (nilUL_25 )) (nilUL_25 ))
      | consUL_26 hd_23353 tl_23354 =>
        (match ((split_23349) tl_23354) with
        | ex1LL_37 m_23355 n_23356 =>
          (ex1LL_37
            (consUL_26 hd_23351 m_23355) (consUL_26 hd_23353 n_23356)))))

def mergeU_86 :=
  fun merge_23357 (__23358) -> (__23359) -o
    (match __23358 with
    | nilUU_27  => __23359
    | consUU_28 hd_23360 tl_23361 =>
      (match __23359 with
      | nilUU_27  => (consUU_28 hd_23360 tl_23361)
      | consUU_28 hd_23362 tl_23363 =>
        (match (__lte__ hd_23360 hd_23362) with
        | true_4 =>
          (consUU_28
            hd_23360 ((merge_23357) tl_23361 (consUU_28 hd_23362 tl_23363)))
        | false_5 =>
          (consUU_28
            hd_23362 ((merge_23357) (consUU_28 hd_23360 tl_23361) tl_23363)))))

def mergeL_85 :=
  fun merge_23364 (__23365) -> (__23366) -o
    (match __23365 with
    | nilUL_25  => __23366
    | consUL_26 hd_23367 tl_23368 =>
      (match __23366 with
      | nilUL_25  => (consUL_26 hd_23367 tl_23368)
      | consUL_26 hd_23369 tl_23370 =>
        (match (__lte__ hd_23367 hd_23369) with
        | true_4 =>
          (consUL_26
            hd_23367 ((merge_23364) tl_23368 (consUL_26 hd_23369 tl_23370)))
        | false_5 =>
          (consUL_26
            hd_23369 ((merge_23364) (consUL_26 hd_23367 tl_23368) tl_23370)))))

def msortU_88 :=
  fun msort_23371 (__23372) ->
    (match __23372 with
    | nilUU_27  => (nilUU_27 )
    | consUU_28 hd_23373 tl_23374 =>
      (match tl_23374 with
      | nilUU_27  => (consUU_28 hd_23373 (nilUU_27 ))
      | consUU_28 hd_23375 tl_23376 =>
        (match ((splitU_84)
                 (consUU_28 hd_23373 (consUU_28 hd_23375 tl_23376))) with
        | ex1UU_40 m_23377 n_23378 =>
          ((mergeU_86) ((msort_23371) m_23377) ((msort_23371) n_23378)))))

def msortL_87 :=
  fun msort_23379 (__23380) ->
    (match __23380 with
    | nilUL_25  => (nilUL_25 )
    | consUL_26 hd_23381 tl_23382 =>
      (match tl_23382 with
      | nilUL_25  => (consUL_26 hd_23381 (nilUL_25 ))
      | consUL_26 hd_23383 tl_23384 =>
        (match ((splitL_83)
                 (consUL_26 hd_23381 (consUL_26 hd_23383 tl_23384))) with
        | ex1LL_37 m_23385 n_23386 =>
          ((mergeL_85) ((msort_23379) m_23385) ((msort_23379) n_23386)))))

def cmsort_workerU_92 :=
  fun cmsort_worker_23387 (__23388) -> (zs_23389) -> (__23390) -o
    (match zs_23389 with
    | nilUU_27  =>
      lazy(let c_23391 := send(__23390, (nilUU_27 )) in close[true] c_23391)
    | consUU_28 hd_23392 tl_23393 =>
      (match tl_23393 with
      | nilUU_27  =>
        lazy(let c_23394 := send(__23390, (consUU_28 hd_23392 (nilUU_27 )))
             in close[true] c_23394)
      | consUU_28 hd_23395 tl_23396 =>
        (match (__lte__ __23388 0) with
        | true_4 =>
          lazy(let c_23397 :=
                 send(__23390, ((msortU_88)
                                 (consUU_28
                                   hd_23392 (consUU_28 hd_23395 tl_23396))))
               in close[true] c_23397)
        | false_5 =>
          (match ((splitU_84)
                   (consUU_28 hd_23392 (consUU_28 hd_23395 tl_23396))) with
          | ex1UU_40 m_23398 n_23399 =>
            lazy(let r1_23400 :=
                   fork
                     lam (_23401) -o
                       ((cmsort_worker_23387)
                         (__sub__ __23388 1) m_23398 _23401)
                 in
                 let r2_23402 :=
                   fork
                     lam (_23403) -o
                       ((cmsort_worker_23387)
                         (__sub__ __23388 1) n_23399 _23403)
                 in
                 let _23404 := recv[U](r1_23400) in
                 (match _23404 with
                 | ex1UL_39 m_23405 n_23406 =>
                   let _23407 := recv[U](r2_23402) in
                   (match _23407 with
                   | ex1UL_39 m_23408 n_23409 =>
                     let zs1_23410 := ((mergeU_86) m_23405 m_23408) in
                     let zs1_23411 :=
                       ((rwlUU_48) NULL NULL NULL NULL NULL zs1_23410)
                     in
                     let c_23412 := send(__23390, zs1_23411) in
                     let __23413 := close[false] n_23406 in
                     let __23414 := close[false] n_23409 in
                     close[true] c_23412)))))))

def cmsort_workerL_91 :=
  fun cmsort_worker_23415 (__23416) -> (zs_23417) -> (__23418) -o
    (match zs_23417 with
    | nilUL_25  =>
      lazy(let c_23419 := send(__23418, (nilUL_25 )) in close[true] c_23419)
    | consUL_26 hd_23420 tl_23421 =>
      (match tl_23421 with
      | nilUL_25  =>
        lazy(let c_23422 := send(__23418, (consUL_26 hd_23420 (nilUL_25 )))
             in close[true] c_23422)
      | consUL_26 hd_23423 tl_23424 =>
        (match (__lte__ __23416 0) with
        | true_4 =>
          lazy(let c_23425 :=
                 send(__23418, ((msortL_87)
                                 (consUL_26
                                   hd_23420 (consUL_26 hd_23423 tl_23424))))
               in close[true] c_23425)
        | false_5 =>
          (match ((splitL_83)
                   (consUL_26 hd_23420 (consUL_26 hd_23423 tl_23424))) with
          | ex1LL_37 m_23426 n_23427 =>
            lazy(let r1_23428 :=
                   fork
                     lam (_23429) -o
                       ((cmsort_worker_23415)
                         (__sub__ __23416 1) m_23426 _23429)
                 in
                 let r2_23430 :=
                   fork
                     lam (_23431) -o
                       ((cmsort_worker_23415)
                         (__sub__ __23416 1) n_23427 _23431)
                 in
                 let _23432 := recv[L](r1_23428) in
                 (match _23432 with
                 | ex1LL_37 m_23433 n_23434 =>
                   let _23435 := recv[L](r2_23430) in
                   (match _23435 with
                   | ex1LL_37 m_23436 n_23437 =>
                     let zs1_23438 := ((mergeL_85) m_23433 m_23436) in
                     let zs1_23439 :=
                       ((rwlLL_45) NULL NULL NULL NULL NULL zs1_23438)
                     in
                     let c_23440 := send(__23418, zs1_23439) in
                     let __23441 := close[false] n_23434 in
                     let __23442 := close[false] n_23437 in
                     close[true] c_23440)))))))

def cmsortU_94 :=
  lam (zs_23443) ->
    lazy(let c_23444 :=
           fork lam (_23445) -o ((cmsort_workerU_92) 4 zs_23443 _23445)
         in
         let _23446 := recv[U](c_23444) in
         (match _23446 with
         | ex1UL_39 m_23447 n_23448 =>
           let __23449 := close[false] n_23448 in m_23447))

def cmsortL_93 :=
  lam (zs_23450) ->
    lazy(let c_23451 :=
           fork lam (_23452) -o ((cmsort_workerL_91) 4 zs_23450 _23452)
         in
         let _23453 := recv[L](c_23451) in
         (match _23453 with
         | ex1LL_37 m_23454 n_23455 =>
           let __23456 := close[false] n_23455 in m_23454))

def mklistU_96 :=
  fun mklist_23457 (n_23458) ->
    (match (__lte__ n_23458 0) with
    | true_4 => (nilUU_27 )
    | false_5 => (consUU_28 n_23458 ((mklist_23457) (__sub__ n_23458 1))))

def mklistL_95 :=
  fun mklist_23459 (n_23460) ->
    (match (__lte__ n_23460 0) with
    | true_4 => (nilUL_25 )
    | false_5 => (consUL_26 n_23460 ((mklist_23459) (__sub__ n_23460 1))))

def list_lenU_98 :=
  fun list_len_23461 (__23462) ->
    (match __23462 with
    | nilUU_27  => 0
    | consUU_28 hd_23463 tl_23464 => (__add__ 1 ((list_len_23461) tl_23464)))

def list_lenL_97 :=
  fun list_len_23465 (__23466) ->
    (match __23466 with
    | nilUL_25  => 0
    | consUL_26 hd_23467 tl_23468 => (__add__ 1 ((list_len_23465) tl_23468)))

def print_listU_100 :=
  fun print_list_23469 (__23470) ->
    (match __23470 with
    | nilUU_27  => lazy(print "nil")
    | consUU_28 hd_23471 tl_23472 =>
      lazy(let __23473 := print ((string_of_int_32) hd_23471) in
           let __23474 := print " :: " in
           force(((print_list_23469) tl_23472))))

def print_listL_99 :=
  fun print_list_23475 (__23476) ->
    (match __23476 with
    | nilUL_25  => lazy(print "nil")
    | consUL_26 hd_23477 tl_23478 =>
      lazy(let __23479 := print ((string_of_int_32) hd_23477) in
           let __23480 := print " :: " in
           force(((print_list_23475) tl_23478))))

def main :=
  let test_23481 := ((mklistL_95) 2000000) in
  lazy(let _23482 := force(((cmsortL_93) test_23481)) in
       let len_23483 := ((list_lenL_97) _23482) in
       print ((string_of_int_32) len_23483))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_27() => {
      x_167 := ttU_20;
    }
    consUU_28(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_25() => {
      x_177 := ttU_20;
    }
    consUL_26(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_21() => {
      x_187 := ttU_20;
    }
    consLL_22(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_27() => {
      x_267 := mkconstr(nilUU_27, []);
      x_268 := mkconstr(nilUU_27, []);
      x_269 := mkconstr(ex1UU_40, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_28(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_27() => {
          x_273 := mkconstr(nilUU_27, []);
          x_274 := mkconstr(consUU_28, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_27, []);
          x_276 := mkconstr(ex1UU_40, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_28(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_40(m_281, n_282) => {
              x_283 := mkconstr(consUU_28, [hd_270, m_281]);
              x_284 := mkconstr(consUU_28, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_40, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_25() => {
      x_289 := mkconstr(nilUL_25, []);
      x_290 := mkconstr(nilUL_25, []);
      x_291 := mkconstr(ex1LL_37, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_26(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_25() => {
          x_295 := mkconstr(nilUL_25, []);
          x_296 := mkconstr(consUL_26, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_25, []);
          x_298 := mkconstr(ex1LL_37, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_26(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_37(m_303, n_304) => {
              x_305 := mkconstr(consUL_26, [hd_292, m_303]);
              x_306 := mkconstr(consUL_26, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_37, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_27() => {
      x_311 := __310;
    }
    consUU_28(hd_312, tl_313) => {
      match[U](__310){
        nilUU_27() => {
          x_315 := mkconstr(consUU_28, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_28(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_28, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_28, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_28, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_28, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_25() => {
      x_329 := __328;
    }
    consUL_26(hd_330, tl_331) => {
      match[L](__328){
        nilUL_25() => {
          x_333 := mkconstr(consUL_26, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_26(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_26, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_26, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_26, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_26, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_27() => {
      x_347 := mkconstr(nilUU_27, []);
      x_346 := x_347;
    }
    consUU_28(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_27() => {
          x_351 := mkconstr(nilUU_27, []);
          x_352 := mkconstr(consUU_28, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_28(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_28, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_28, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_40(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_25() => {
      x_367 := mkconstr(nilUL_25, []);
      x_366 := x_367;
    }
    consUL_26(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_25() => {
          x_371 := mkconstr(nilUL_25, []);
          x_372 := mkconstr(consUL_26, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_26(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_26, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_26, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_37(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_27() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_27, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_28(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_27() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_27, []);
              x_401 := mkconstr(consUU_28, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_28(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_28, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_28, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_28, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_28, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_40(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_39(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_39(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                            }
                          }
                          x_437 := x_442;
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_25() => {
      x_461 :=
        lazy {
          x_464 := mkconstr(nilUL_25, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_26(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_25() => {
          x_469 :=
            lazy {
              x_472 := mkconstr(nilUL_25, []);
              x_473 := mkconstr(consUL_26, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_26(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := mkconstr(consUL_26, [hd_475, tl_476]);
                  x_484 := mkconstr(consUL_26, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := mkconstr(consUL_26, [hd_475, tl_476]);
              x_489 := mkconstr(consUL_26, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_37(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_37(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_37(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                            }
                          }
                          x_509 := x_514;
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_39(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_37(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_27, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_28, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_25, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_26, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_27() => {
      x_578 := 0;
    }
    consUU_28(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_25() => {
      x_585 := 0;
    }
    consUL_26(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_27() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_28(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_25() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
    }
    consUL_26(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_27() => {
      x_167 := ttU_20;
    }
    consUU_28(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_25() => {
      x_177 := ttU_20;
      free(__176);
    }
    consUL_26(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_21() => {
      x_187 := ttU_20;
      free(__186);
    }
    consLL_22(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_27() => {
      x_267 := mkconstr(nilUU_27, []);
      x_268 := mkconstr(nilUU_27, []);
      x_269 := mkconstr(ex1UU_40, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_28(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_27() => {
          x_273 := mkconstr(nilUU_27, []);
          x_274 := mkconstr(consUU_28, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_27, []);
          x_276 := mkconstr(ex1UU_40, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_28(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_40(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_28, [hd_270, m_281]);
              x_284 := mkconstr(consUU_28, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_40, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_25() => {
      x_289 := reconstr(__287, nilUL_25, []);
      x_290 := mkconstr(nilUL_25, []);
      x_291 := mkconstr(ex1LL_37, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_26(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_25() => {
          x_295 := reconstr(tl_293, nilUL_25, []);
          x_296 := reconstr(__287, consUL_26, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_25, []);
          x_298 := mkconstr(ex1LL_37, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_26(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_37(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_26, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_26, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_37, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_27() => {
      x_311 := __310;
    }
    consUU_28(hd_312, tl_313) => {
      match[U](__310){
        nilUU_27() => {
          x_315 := mkconstr(consUU_28, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_28(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_28, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_28, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_28, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_28, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_25() => {
      x_329 := __328;
      free(__327);
    }
    consUL_26(hd_330, tl_331) => {
      match[L](__328){
        nilUL_25() => {
          x_333 := reconstr(__327, consUL_26, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_26(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_26, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_26, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_26, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_26, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_27() => {
      x_347 := mkconstr(nilUU_27, []);
      x_346 := x_347;
    }
    consUU_28(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_27() => {
          x_351 := mkconstr(nilUU_27, []);
          x_352 := mkconstr(consUU_28, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_28(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_28, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_28, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_40(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_25() => {
      x_367 := reconstr(__365, nilUL_25, []);
      x_366 := x_367;
    }
    consUL_26(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_25() => {
          x_371 := reconstr(tl_369, nilUL_25, []);
          x_372 := reconstr(__365, consUL_26, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_26(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_26, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_26, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_37(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_27() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_27, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_28(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_27() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_27, []);
              x_401 := mkconstr(consUU_28, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_28(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_28, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_28, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_28, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_28, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_40(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_39(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_39(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                              free(_440);
                            }
                          }
                          x_437 := x_442;
                          free(_435);
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                  free(x_415);
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_25() => {
      x_461 :=
        lazy {
          x_464 := reconstr(zs_458, nilUL_25, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_26(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_25() => {
          x_469 :=
            lazy {
              x_472 := reconstr(tl_467, nilUL_25, []);
              x_473 := reconstr(zs_458, consUL_26, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_26(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := reconstr(tl_467, consUL_26, [hd_475, tl_476]);
                  x_484 := reconstr(zs_458, consUL_26, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := reconstr(tl_467, consUL_26, [hd_475, tl_476]);
              x_489 := reconstr(zs_458, consUL_26, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_37(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_37(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_37(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                              free(_512);
                            }
                          }
                          x_509 := x_514;
                          free(_507);
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                  free(x_487);
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_39(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
          free(_537);
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_37(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
          free(_553);
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_27, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_28, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_25, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_26, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_27() => {
      x_578 := 0;
    }
    consUU_28(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_25() => {
      x_585 := 0;
      free(__584);
    }
    consUL_26(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
      free(__584);
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_27() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_28(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_25() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
      free(__608);
    }
    consUL_26(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
      free(__608);
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_634(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_635(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_636 := fn0_idU_634(A_2, m_3);
  return x_636;
}

fn fn0_idL_637(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_638(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_639 := fn0_idL_637(A_5, m_6);
  return x_639;
}

fn fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_641(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_642 := fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13);
  return x_642;
}

fn fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_644(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_645 := fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20);
  return x_645;
}

fn fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_647(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_648 := fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27);
  return x_648;
}

fn fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_650(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_651 := fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34);
  return x_651;
}

fn fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_653(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_654 := fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41);
  return x_654;
}

fn fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_656(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_657 := fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48);
  return x_657;
}

fn fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_659(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_660 := fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55);
  return x_660;
}

fn fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_662(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_663 := fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62);
  return x_663;
}

fn fn0_sing_elimUU_664(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_665(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_666 := fn0_sing_elimUU_664(A_64, x_65, __66);
  return x_666;
}

fn fn0_sing_elimUL_667(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_668(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_669 := fn0_sing_elimUL_667(A_68, x_69, __70);
  return x_669;
}

fn fn0_sing_elimLU_670(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_671(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_672 := fn0_sing_elimLU_670(A_72, x_73, __74);
  return x_672;
}

fn fn0_sing_elimLL_673(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_674(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_675 := fn0_sing_elimLL_673(A_76, x_77, __78);
  return x_675;
}

fn fn0_not_676(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_677(env) {
  __80 := env[1];
  x_678 := fn0_not_676(__80);
  return x_678;
}

fn fn0_and_679(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_680(env) {
  __83 := env[1];
  __84 := env[2];
  x_681 := fn0_and_679(__83, __84);
  return x_681;
}

fn fn0_or_682(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_683(env) {
  __88 := env[1];
  __89 := env[2];
  x_684 := fn0_or_682(__88, __89);
  return x_684;
}

fn fn0_xor_685(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_686(env) {
  __93 := env[1];
  __94 := env[2];
  x_687 := fn0_xor_685(__93, __94);
  return x_687;
}

fn fn0_lte_688(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_688(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_689(env) {
  __99 := env[1];
  __100 := env[2];
  x_690 := fn0_lte_688(__99, __100);
  return x_690;
}

fn fn0_lt_691(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_688(x_110, y_108);
  return x_109;
}

fn fn1_lt_692(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_693 := fn0_lt_691(x_107, y_108);
  return x_693;
}

fn fn0_pred_694(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_695(env) {
  __112 := env[1];
  x_696 := fn0_pred_694(__112);
  return x_696;
}

fn fn0_add_697(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_697(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_698(env) {
  __117 := env[1];
  __118 := env[2];
  x_699 := fn0_add_697(__117, __118);
  return x_699;
}

fn fn0_sub_700(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_694(__124);
      x_128 := fn0_sub_700(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_701(env) {
  __124 := env[1];
  __125 := env[2];
  x_702 := fn0_sub_700(__124, __125);
  return x_702;
}

fn fn0_mul_703(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_703(n_135, __132);
      x_136 := fn0_add_697(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_704(env) {
  __131 := env[1];
  __132 := env[2];
  x_705 := fn0_mul_703(__131, __132);
  return x_705;
}

fn fn0_div_706(x_139, y_140) {
  x_142 := fn0_lt_691(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_708, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_712, loop_144, x_139);
      appc(x_713, x_712, y_140);
      move1(x_156, x_713);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_707(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_715 := fn0_div_706(x_139, y_140);
  return x_715;
}

fn fn0_rem_716(x_158, y_159) {
  x_162 := fn0_div_706(x_158, y_159);
  x_161 := fn0_mul_703(x_162, y_159);
  x_160 := fn0_sub_700(x_158, x_161);
  return x_160;
}

fn fn1_rem_717(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_718 := fn0_rem_716(x_158, y_159);
  return x_718;
}

fn fn0_free_listUU_719(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_27 => {
      move1(x_167, ttU_20);
      break;
    }
    consUU_28 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_721, f_165, hd_168);
      move1(x_171, x_721);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_719(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_720(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_723 := fn0_free_listUU_719(A_164, f_165, __166);
  return x_723;
}

fn fn0_free_listUL_724(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_25 => {
      move1(x_177, ttU_20);
      free(__176);
      break;
    }
    consUL_26 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_726, f_175, hd_178);
      move1(x_181, x_726);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_724(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_725(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_728 := fn0_free_listUL_724(A_174, f_175, __176);
  return x_728;
}

fn fn0_free_listLL_729(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_21 => {
      move1(x_187, ttU_20);
      free(__186);
      break;
    }
    consLL_22 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_731, f_185, hd_188);
      move1(x_191, x_731);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_729(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_730(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_733 := fn0_free_listLL_729(A_184, f_185, __186);
  return x_733;
}

fn fn0_pow_734(x_194, y_195) {
  mkclo1(x_197, fn1_loop_736, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_740, loop_196, 1);
  appc(x_741, x_740, y_195);
  move1(x_206, x_741);
  return x_206;
}

fn fn1_pow_735(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_743 := fn0_pow_734(x_194, y_195);
  return x_743;
}

fn fn0_powm_744(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_746, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_750, loop_211, 1);
  appc(x_751, x_750, y_209);
  move1(x_222, x_751);
  return x_222;
}

fn fn1_powm_745(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_753 := fn0_powm_744(x_208, y_209, m_210);
  return x_753;
}

fn fn0_ord_754(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_755(env) {
  c_224 := env[1];
  x_756 := fn0_ord_754(c_224);
  return x_756;
}

fn fn0_chr_757(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_758(env) {
  i_227 := env[1];
  x_759 := fn0_chr_757(i_227);
  return x_759;
}

fn fn0_str_760(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_761(env) {
  c_230 := env[1];
  x_762 := fn0_str_760(c_230);
  return x_762;
}

fn fn0_strlen_763(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_764(env) {
  s_234 := env[1];
  x_765 := fn0_strlen_763(s_234);
  return x_765;
}

fn fn0_string_of_int_766(i_237) {
  mkclo1(x_239, fn1_aux_768, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_771, aux_238, i_237);
      move1(x_259, x_771);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_773, aux_238, x_263);
      move1(x_262, x_773);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_767(env) {
  i_237 := env[1];
  x_775 := fn0_string_of_int_766(i_237);
  return x_775;
}

fn fn0_splitU_776(__265) {
  switch(ctagof(__265)){
    nilUU_27 => {
      mkbox(x_267, nilUU_27, 0);
      mkbox(x_268, nilUU_27, 0);
      mkbox(x_269, ex1UU_40, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_28 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_27 => {
          mkbox(x_273, nilUU_27, 0);
          mkbox(x_274, consUU_28, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_27, 0);
          mkbox(x_276, ex1UU_40, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_28 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_776(tl_278);
          switch(ctagof(x_280)){
            ex1UU_40 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_28);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_28, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_40, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_777(env) {
  __265 := env[1];
  x_778 := fn0_splitU_776(__265);
  return x_778;
}

fn fn0_splitL_779(__287) {
  switch(ctagof(__287)){
    nilUL_25 => {
      rebox(x_289, __287, nilUL_25);
      mkbox(x_290, nilUL_25, 0);
      mkbox(x_291, ex1LL_37, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_26 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_25 => {
          rebox(x_295, tl_293, nilUL_25);
          rebox(x_296, __287, consUL_26);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_25, 0);
          mkbox(x_298, ex1LL_37, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_26 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_779(tl_300);
          switch(ctagof(x_302)){
            ex1LL_37 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_26);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_26);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_37);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_780(env) {
  __287 := env[1];
  x_781 := fn0_splitL_779(__287);
  return x_781;
}

fn fn0_mergeU_782(__309, __310) {
  switch(ctagof(__309)){
    nilUU_27 => {
      move1(x_311, __310);
      break;
    }
    consUU_28 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_27 => {
          mkbox(x_315, consUU_28, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_28 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_28, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_782(tl_313, x_321);
              mkbox(x_322, consUU_28, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_28, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_782(x_324, tl_317);
              mkbox(x_325, consUU_28, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_783(env) {
  __309 := env[1];
  __310 := env[2];
  x_784 := fn0_mergeU_782(__309, __310);
  return x_784;
}

fn fn0_mergeL_785(__327, __328) {
  switch(ctagof(__327)){
    nilUL_25 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_26 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_25 => {
          rebox(x_333, __327, consUL_26);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_26 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_26);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_785(tl_331, x_339);
              rebox(x_340, __327, consUL_26);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_26);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_785(x_342, tl_335);
              rebox(x_343, __327, consUL_26);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_786(env) {
  __327 := env[1];
  __328 := env[2];
  x_787 := fn0_mergeL_785(__327, __328);
  return x_787;
}

fn fn0_msortU_788(__345) {
  switch(ctagof(__345)){
    nilUU_27 => {
      mkbox(x_347, nilUU_27, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_28 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_27 => {
          mkbox(x_351, nilUU_27, 0);
          mkbox(x_352, consUU_28, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_28 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_28, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_28, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_776(x_358);
          switch(ctagof(x_356)){
            ex1UU_40 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_788(m_359);
              x_363 := fn0_msortU_788(n_360);
              x_361 := fn0_mergeU_782(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_789(env) {
  __345 := env[1];
  x_790 := fn0_msortU_788(__345);
  return x_790;
}

fn fn0_msortL_791(__365) {
  switch(ctagof(__365)){
    nilUL_25 => {
      rebox(x_367, __365, nilUL_25);
      move1(x_366, x_367);
      break;
    }
    consUL_26 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_25 => {
          rebox(x_371, tl_369, nilUL_25);
          rebox(x_372, __365, consUL_26);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_26 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_26);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_26);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_779(x_378);
          switch(ctagof(x_376)){
            ex1LL_37 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_791(m_379);
              x_383 := fn0_msortL_791(n_380);
              x_381 := fn0_mergeL_785(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_792(env) {
  __365 := env[1];
  x_793 := fn0_msortL_791(__365);
  return x_793;
}

fn fn0_cmsort_workerU_794(__385, zs_386, __387) {
  switch(ctagof(zs_386)){
    nilUU_27 => {
      lazy(x_389, lazy__796, 1);
      setlazy(x_389, __387, 0);
      move1(x_388, x_389);
      break;
    }
    consUU_28 => {
      getbox(hd_394, zs_386, 0);
      getbox(tl_395, zs_386, 1);
      switch(ctagof(tl_395)){
        nilUU_27 => {
          lazy(x_397, lazy__797, 2);
          setlazy(x_397, __387, 0);
          setlazy(x_397, hd_394, 1);
          move1(x_396, x_397);
          break;
        }
        consUU_28 => {
          getbox(hd_403, tl_395, 0);
          getbox(tl_404, tl_395, 1);
          lte(x_406, __385, 0);
          switch(x_406){
            true_4 => {
              lazy(x_407, lazy__798, 5);
              setlazy(x_407, msortU_344, 0);
              setlazy(x_407, __387, 1);
              setlazy(x_407, hd_394, 2);
              setlazy(x_407, hd_403, 3);
              setlazy(x_407, tl_404, 4);
              move1(x_405, x_407);
              break;
            }
            false_5 => {
              mkbox(x_416, consUU_28, 2);
              setbox(x_416, hd_403, 0);
              setbox(x_416, tl_404, 1);
              mkbox(x_417, consUU_28, 2);
              setbox(x_417, hd_394, 0);
              setbox(x_417, x_416, 1);
              x_415 := fn0_splitU_776(x_417);
              switch(ctagof(x_415)){
                ex1UU_40 => {
                  getbox(m_418, x_415, 0);
                  getbox(n_419, x_415, 1);
                  lazy(x_420, lazy__799, 7);
                  setlazy(x_420, rwlUU_7, 0);
                  setlazy(x_420, mergeU_308, 1);
                  setlazy(x_420, cmsort_workerU_384, 2);
                  setlazy(x_420, __385, 3);
                  setlazy(x_420, __387, 4);
                  setlazy(x_420, m_418, 5);
                  setlazy(x_420, n_419, 6);
                  move1(x_414, x_420);
                  free(x_415);
                  break;
                }
              }
              move1(x_405, x_414);
              break;
            }
          }
          move1(x_396, x_405);
          break;
        }
      }
      move1(x_388, x_396);
      break;
    }
  }
  return x_388;
}

fn fn1_cmsort_workerU_795(env) {
  __385 := env[1];
  zs_386 := env[2];
  __387 := env[3];
  x_802 := fn0_cmsort_workerU_794(__385, zs_386, __387);
  return x_802;
}

fn fn0_cmsort_workerL_803(__457, zs_458, __459) {
  switch(ctagof(zs_458)){
    nilUL_25 => {
      lazy(x_461, lazy__805, 2);
      setlazy(x_461, zs_458, 0);
      setlazy(x_461, __459, 1);
      move1(x_460, x_461);
      break;
    }
    consUL_26 => {
      getbox(hd_466, zs_458, 0);
      getbox(tl_467, zs_458, 1);
      switch(ctagof(tl_467)){
        nilUL_25 => {
          lazy(x_469, lazy__806, 4);
          setlazy(x_469, zs_458, 0);
          setlazy(x_469, __459, 1);
          setlazy(x_469, hd_466, 2);
          setlazy(x_469, tl_467, 3);
          move1(x_468, x_469);
          break;
        }
        consUL_26 => {
          getbox(hd_475, tl_467, 0);
          getbox(tl_476, tl_467, 1);
          lte(x_478, __457, 0);
          switch(x_478){
            true_4 => {
              lazy(x_479, lazy__807, 7);
              setlazy(x_479, msortL_364, 0);
              setlazy(x_479, zs_458, 1);
              setlazy(x_479, __459, 2);
              setlazy(x_479, hd_466, 3);
              setlazy(x_479, tl_467, 4);
              setlazy(x_479, hd_475, 5);
              setlazy(x_479, tl_476, 6);
              move1(x_477, x_479);
              break;
            }
            false_5 => {
              rebox(x_488, tl_467, consUL_26);
              setbox(x_488, hd_475, 0);
              setbox(x_488, tl_476, 1);
              rebox(x_489, zs_458, consUL_26);
              setbox(x_489, hd_466, 0);
              setbox(x_489, x_488, 1);
              x_487 := fn0_splitL_779(x_489);
              switch(ctagof(x_487)){
                ex1LL_37 => {
                  getbox(m_490, x_487, 0);
                  getbox(n_491, x_487, 1);
                  lazy(x_492, lazy__808, 7);
                  setlazy(x_492, rwlLL_28, 0);
                  setlazy(x_492, mergeL_326, 1);
                  setlazy(x_492, cmsort_workerL_456, 2);
                  setlazy(x_492, __457, 3);
                  setlazy(x_492, __459, 4);
                  setlazy(x_492, m_490, 5);
                  setlazy(x_492, n_491, 6);
                  move1(x_486, x_492);
                  free(x_487);
                  break;
                }
              }
              move1(x_477, x_486);
              break;
            }
          }
          move1(x_468, x_477);
          break;
        }
      }
      move1(x_460, x_468);
      break;
    }
  }
  return x_460;
}

fn fn1_cmsort_workerL_804(env) {
  __457 := env[1];
  zs_458 := env[2];
  __459 := env[3];
  x_811 := fn0_cmsort_workerL_803(__457, zs_458, __459);
  return x_811;
}

fn fn0_cmsortU_812(zs_529) {
  lazy(x_530, lazy__814, 2);
  setlazy(x_530, cmsort_workerU_384, 0);
  setlazy(x_530, zs_529, 1);
  return x_530;
}

fn fn1_cmsortU_813(env) {
  zs_529 := env[1];
  x_816 := fn0_cmsortU_812(zs_529);
  return x_816;
}

fn fn0_cmsortL_817(zs_545) {
  lazy(x_546, lazy__819, 2);
  setlazy(x_546, cmsort_workerL_456, 0);
  setlazy(x_546, zs_545, 1);
  return x_546;
}

fn fn1_cmsortL_818(env) {
  zs_545 := env[1];
  x_821 := fn0_cmsortL_817(zs_545);
  return x_821;
}

fn fn0_mklistU_822(n_561) {
  lte(x_563, n_561, 0);
  switch(x_563){
    true_4 => {
      mkbox(x_564, nilUU_27, 0);
      move1(x_562, x_564);
      break;
    }
    false_5 => {
      sub(x_566, n_561, 1);
      x_565 := fn0_mklistU_822(x_566);
      mkbox(x_567, consUU_28, 2);
      setbox(x_567, n_561, 0);
      setbox(x_567, x_565, 1);
      move1(x_562, x_567);
      break;
    }
  }
  return x_562;
}

fn fn1_mklistU_823(env) {
  n_561 := env[1];
  x_824 := fn0_mklistU_822(n_561);
  return x_824;
}

fn fn0_mklistL_825(n_569) {
  lte(x_571, n_569, 0);
  switch(x_571){
    true_4 => {
      mkbox(x_572, nilUL_25, 0);
      move1(x_570, x_572);
      break;
    }
    false_5 => {
      sub(x_574, n_569, 1);
      x_573 := fn0_mklistL_825(x_574);
      mkbox(x_575, consUL_26, 2);
      setbox(x_575, n_569, 0);
      setbox(x_575, x_573, 1);
      move1(x_570, x_575);
      break;
    }
  }
  return x_570;
}

fn fn1_mklistL_826(env) {
  n_569 := env[1];
  x_827 := fn0_mklistL_825(n_569);
  return x_827;
}

fn fn0_list_lenU_828(__577) {
  switch(ctagof(__577)){
    nilUU_27 => {
      move1(x_578, 0);
      break;
    }
    consUU_28 => {
      getbox(tl_580, __577, 1);
      x_582 := fn0_list_lenU_828(tl_580);
      add(x_581, 1, x_582);
      move1(x_578, x_581);
      break;
    }
  }
  return x_578;
}

fn fn1_list_lenU_829(env) {
  __577 := env[1];
  x_830 := fn0_list_lenU_828(__577);
  return x_830;
}

fn fn0_list_lenL_831(__584) {
  switch(ctagof(__584)){
    nilUL_25 => {
      move1(x_585, 0);
      free(__584);
      break;
    }
    consUL_26 => {
      getbox(tl_587, __584, 1);
      x_589 := fn0_list_lenL_831(tl_587);
      add(x_588, 1, x_589);
      move1(x_585, x_588);
      free(__584);
      break;
    }
  }
  return x_585;
}

fn fn1_list_lenL_832(env) {
  __584 := env[1];
  x_833 := fn0_list_lenL_831(__584);
  return x_833;
}

fn fn0_print_listU_834(__591) {
  switch(ctagof(__591)){
    nilUU_27 => {
      lazy(x_593, lazy__836, 0);
      move1(x_592, x_593);
      break;
    }
    consUU_28 => {
      getbox(hd_596, __591, 0);
      getbox(tl_597, __591, 1);
      lazy(x_598, lazy__837, 4);
      setlazy(x_598, string_of_int_236, 0);
      setlazy(x_598, print_listU_590, 1);
      setlazy(x_598, hd_596, 2);
      setlazy(x_598, tl_597, 3);
      move1(x_592, x_598);
      break;
    }
  }
  return x_592;
}

fn fn1_print_listU_835(env) {
  __591 := env[1];
  x_838 := fn0_print_listU_834(__591);
  return x_838;
}

fn fn0_print_listL_839(__608) {
  switch(ctagof(__608)){
    nilUL_25 => {
      lazy(x_610, lazy__841, 0);
      move1(x_609, x_610);
      free(__608);
      break;
    }
    consUL_26 => {
      getbox(hd_613, __608, 0);
      getbox(tl_614, __608, 1);
      lazy(x_615, lazy__842, 4);
      setlazy(x_615, string_of_int_236, 0);
      setlazy(x_615, print_listL_607, 1);
      setlazy(x_615, hd_613, 2);
      setlazy(x_615, tl_614, 3);
      move1(x_609, x_615);
      free(__608);
      break;
    }
  }
  return x_609;
}

fn fn1_print_listL_840(env) {
  __608 := env[1];
  x_843 := fn0_print_listL_839(__608);
  return x_843;
}

fn lazy__845(env) {
  string_of_int_236 := env[0];
  cmsortL_544 := env[1];
  list_lenL_583 := env[2];
  test_624 := env[3];
  x_629 := fn0_cmsortL_817(test_624);
  force(x_628, x_629);
  free(x_629);
  move1(_627, x_628);
  x_631 := fn0_list_lenL_831(_627);
  move1(len_630, x_631);
  x_633 := fn0_string_of_int_766(len_630);
  print(x_632, x_633);
  return x_632;
}

fn lazy__842(env) {
  string_of_int_236 := env[0];
  print_listL_607 := env[1];
  hd_613 := env[2];
  tl_614 := env[3];
  x_618 := fn0_string_of_int_766(hd_613);
  print(x_617, x_618);
  move1(__616, x_617);
  str(x_621, " :: ")
  print(x_620, x_621);
  move1(__619, x_620);
  x_623 := fn0_print_listL_839(tl_614);
  force(x_622, x_623);
  free(x_623);
  return x_622;
}

fn lazy__841(env) {
  str(x_612, "nil")
  print(x_611, x_612);
  return x_611;
}

fn lazy__837(env) {
  string_of_int_236 := env[0];
  print_listU_590 := env[1];
  hd_596 := env[2];
  tl_597 := env[3];
  x_601 := fn0_string_of_int_766(hd_596);
  print(x_600, x_601);
  move1(__599, x_600);
  str(x_604, " :: ")
  print(x_603, x_604);
  move1(__602, x_603);
  x_606 := fn0_print_listU_834(tl_597);
  force(x_605, x_606);
  free(x_606);
  return x_605;
}

fn lazy__836(env) {
  str(x_595, "nil")
  print(x_594, x_595);
  return x_594;
}

fn lazy__819(env) {
  cmsort_workerL_456 := env[0];
  zs_545 := env[1];
  mkclo1(x_549, fn1_lam_820, fvc:=2, argc:=1);
  setclo(x_549, cmsort_workerL_456, 1);
  setclo(x_549, zs_545, 2);
  fork(x_548, x_549);
  move1(c_547, x_548);
  recv1(x_554, c_547);
  move1(_553, x_554);
  switch(ctagof(_553)){
    ex1LL_37 => {
      getbox(m_556, _553, 0);
      getbox(n_557, _553, 1);
      close1(x_559, n_557);
      move1(__558, x_559);
      move1(x_555, m_556);
      free(_553);
      break;
    }
  }
  return x_555;
}

fn fn1_lam_820(env) {
  lam_550 := env[0];
  cmsort_workerL_456 := env[1];
  zs_545 := env[2];
  _551 := env[3];
  x_552 := fn0_cmsort_workerL_803(4, zs_545, _551);
  return x_552;
}

fn lazy__814(env) {
  cmsort_workerU_384 := env[0];
  zs_529 := env[1];
  mkclo1(x_533, fn1_lam_815, fvc:=2, argc:=1);
  setclo(x_533, cmsort_workerU_384, 1);
  setclo(x_533, zs_529, 2);
  fork(x_532, x_533);
  move1(c_531, x_532);
  recv0(x_538, c_531);
  move1(_537, x_538);
  switch(ctagof(_537)){
    ex1UL_39 => {
      getbox(m_540, _537, 0);
      getbox(n_541, _537, 1);
      close1(x_543, n_541);
      move1(__542, x_543);
      move1(x_539, m_540);
      free(_537);
      break;
    }
  }
  return x_539;
}

fn fn1_lam_815(env) {
  lam_534 := env[0];
  cmsort_workerU_384 := env[1];
  zs_529 := env[2];
  _535 := env[3];
  x_536 := fn0_cmsort_workerU_794(4, zs_529, _535);
  return x_536;
}

fn lazy__808(env) {
  rwlLL_28 := env[0];
  mergeL_326 := env[1];
  cmsort_workerL_456 := env[2];
  __457 := env[3];
  __459 := env[4];
  m_490 := env[5];
  n_491 := env[6];
  mkclo1(x_495, fn1_lam_809, fvc:=3, argc:=1);
  setclo(x_495, cmsort_workerL_456, 1);
  setclo(x_495, __457, 2);
  setclo(x_495, m_490, 3);
  fork(x_494, x_495);
  move1(r1_493, x_494);
  mkclo1(x_502, fn1_lam_810, fvc:=3, argc:=1);
  setclo(x_502, cmsort_workerL_456, 1);
  setclo(x_502, __457, 2);
  setclo(x_502, n_491, 3);
  fork(x_501, x_502);
  move1(r2_500, x_501);
  recv1(x_508, r1_493);
  move1(_507, x_508);
  switch(ctagof(_507)){
    ex1LL_37 => {
      getbox(m_510, _507, 0);
      getbox(n_511, _507, 1);
      recv1(x_513, r2_500);
      move1(_512, x_513);
      switch(ctagof(_512)){
        ex1LL_37 => {
          getbox(m_515, _512, 0);
          getbox(n_516, _512, 1);
          x_518 := fn0_mergeL_785(m_510, m_515);
          move1(zs1_517, x_518);
          x_520 := fn0_rwlLL_649(NULL, NULL, NULL, NULL, NULL, zs1_517);
          move1(zs1_519, x_520);
          send(x_522, __459, zs1_519);
          move1(c_521, x_522);
          close1(x_524, n_511);
          move1(__523, x_524);
          close1(x_526, n_516);
          move1(__525, x_526);
          close0(x_527, c_521);
          move1(x_514, x_527);
          free(_512);
          break;
        }
      }
      move1(x_509, x_514);
      free(_507);
      break;
    }
  }
  return x_509;
}

fn fn1_lam_809(env) {
  lam_496 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  m_490 := env[3];
  _497 := env[4];
  sub(x_499, __457, 1);
  x_498 := fn0_cmsort_workerL_803(x_499, m_490, _497);
  return x_498;
}

fn fn1_lam_810(env) {
  lam_503 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  n_491 := env[3];
  _504 := env[4];
  sub(x_506, __457, 1);
  x_505 := fn0_cmsort_workerL_803(x_506, n_491, _504);
  return x_505;
}

fn lazy__807(env) {
  msortL_364 := env[0];
  zs_458 := env[1];
  __459 := env[2];
  hd_466 := env[3];
  tl_467 := env[4];
  hd_475 := env[5];
  tl_476 := env[6];
  rebox(x_483, tl_467, consUL_26);
  setbox(x_483, hd_475, 0);
  setbox(x_483, tl_476, 1);
  rebox(x_484, zs_458, consUL_26);
  setbox(x_484, hd_466, 0);
  setbox(x_484, x_483, 1);
  x_482 := fn0_msortL_791(x_484);
  send(x_481, __459, x_482);
  move1(c_480, x_481);
  close0(x_485, c_480);
  return x_485;
}

fn lazy__806(env) {
  zs_458 := env[0];
  __459 := env[1];
  hd_466 := env[2];
  tl_467 := env[3];
  rebox(x_472, tl_467, nilUL_25);
  rebox(x_473, zs_458, consUL_26);
  setbox(x_473, hd_466, 0);
  setbox(x_473, x_472, 1);
  send(x_471, __459, x_473);
  move1(c_470, x_471);
  close0(x_474, c_470);
  return x_474;
}

fn lazy__805(env) {
  zs_458 := env[0];
  __459 := env[1];
  rebox(x_464, zs_458, nilUL_25);
  send(x_463, __459, x_464);
  move1(c_462, x_463);
  close0(x_465, c_462);
  return x_465;
}

fn lazy__799(env) {
  rwlUU_7 := env[0];
  mergeU_308 := env[1];
  cmsort_workerU_384 := env[2];
  __385 := env[3];
  __387 := env[4];
  m_418 := env[5];
  n_419 := env[6];
  mkclo1(x_423, fn1_lam_800, fvc:=3, argc:=1);
  setclo(x_423, cmsort_workerU_384, 1);
  setclo(x_423, __385, 2);
  setclo(x_423, m_418, 3);
  fork(x_422, x_423);
  move1(r1_421, x_422);
  mkclo1(x_430, fn1_lam_801, fvc:=3, argc:=1);
  setclo(x_430, cmsort_workerU_384, 1);
  setclo(x_430, __385, 2);
  setclo(x_430, n_419, 3);
  fork(x_429, x_430);
  move1(r2_428, x_429);
  recv0(x_436, r1_421);
  move1(_435, x_436);
  switch(ctagof(_435)){
    ex1UL_39 => {
      getbox(m_438, _435, 0);
      getbox(n_439, _435, 1);
      recv0(x_441, r2_428);
      move1(_440, x_441);
      switch(ctagof(_440)){
        ex1UL_39 => {
          getbox(m_443, _440, 0);
          getbox(n_444, _440, 1);
          x_446 := fn0_mergeU_782(m_438, m_443);
          move1(zs1_445, x_446);
          x_448 := fn0_rwlUU_640(NULL, NULL, NULL, NULL, NULL, zs1_445);
          move1(zs1_447, x_448);
          send(x_450, __387, zs1_447);
          move1(c_449, x_450);
          close1(x_452, n_439);
          move1(__451, x_452);
          close1(x_454, n_444);
          move1(__453, x_454);
          close0(x_455, c_449);
          move1(x_442, x_455);
          free(_440);
          break;
        }
      }
      move1(x_437, x_442);
      free(_435);
      break;
    }
  }
  return x_437;
}

fn fn1_lam_800(env) {
  lam_424 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  m_418 := env[3];
  _425 := env[4];
  sub(x_427, __385, 1);
  x_426 := fn0_cmsort_workerU_794(x_427, m_418, _425);
  return x_426;
}

fn fn1_lam_801(env) {
  lam_431 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  n_419 := env[3];
  _432 := env[4];
  sub(x_434, __385, 1);
  x_433 := fn0_cmsort_workerU_794(x_434, n_419, _432);
  return x_433;
}

fn lazy__798(env) {
  msortU_344 := env[0];
  __387 := env[1];
  hd_394 := env[2];
  hd_403 := env[3];
  tl_404 := env[4];
  mkbox(x_411, consUU_28, 2);
  setbox(x_411, hd_403, 0);
  setbox(x_411, tl_404, 1);
  mkbox(x_412, consUU_28, 2);
  setbox(x_412, hd_394, 0);
  setbox(x_412, x_411, 1);
  x_410 := fn0_msortU_788(x_412);
  send(x_409, __387, x_410);
  move1(c_408, x_409);
  close0(x_413, c_408);
  return x_413;
}

fn lazy__797(env) {
  __387 := env[0];
  hd_394 := env[1];
  mkbox(x_400, nilUU_27, 0);
  mkbox(x_401, consUU_28, 2);
  setbox(x_401, hd_394, 0);
  setbox(x_401, x_400, 1);
  send(x_399, __387, x_401);
  move1(c_398, x_399);
  close0(x_402, c_398);
  return x_402;
}

fn lazy__796(env) {
  __387 := env[0];
  mkbox(x_392, nilUU_27, 0);
  send(x_391, __387, x_392);
  move1(c_390, x_391);
  close0(x_393, c_390);
  return x_393;
}

fn fn1_aux_768(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_769, aux_240, i_246);
      move1(x_249, x_769);
      x_252 := fn0_ord_754(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_757(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_754(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_757(x_255);
      x_253 := fn0_str_760(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_746(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_747, loop_213, x_219);
      appc(x_748, x_747, x_221);
      move1(x_218, x_748);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_736(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_737, loop_198, x_204);
      appc(x_738, x_737, x_205);
      move1(x_203, x_738);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_708(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_694(y_148);
  x_150 := fn0_sub_700(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_709, loop_146, n_153);
      appc(x_710, x_709, y_148);
      move1(x_154, x_710);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_635, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_638, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_641, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_644, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_647, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_650, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_653, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_656, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_659, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_662, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_665, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_668, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_671, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_674, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_677, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_680, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_683, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_686, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_689, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_692, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_695, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_698, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_701, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_704, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_707, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_717, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_720, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_725, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_730, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_735, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_745, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_755, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_758, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_761, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_764, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_767, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_777, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_780, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_783, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_786, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_789, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_792, fvc:=0, argc:=1);
  mkclo0(cmsort_workerU_384, fn1_cmsort_workerU_795, fvc:=0, argc:=3);
  mkclo0(cmsort_workerL_456, fn1_cmsort_workerL_804, fvc:=0, argc:=3);
  mkclo0(cmsortU_528, fn1_cmsortU_813, fvc:=0, argc:=1);
  mkclo0(cmsortL_544, fn1_cmsortL_818, fvc:=0, argc:=1);
  mkclo0(mklistU_560, fn1_mklistU_823, fvc:=0, argc:=1);
  mkclo0(mklistL_568, fn1_mklistL_826, fvc:=0, argc:=1);
  mkclo0(list_lenU_576, fn1_list_lenU_829, fvc:=0, argc:=1);
  mkclo0(list_lenL_583, fn1_list_lenL_832, fvc:=0, argc:=1);
  mkclo0(print_listU_590, fn1_print_listU_835, fvc:=0, argc:=1);
  mkclo0(print_listL_607, fn1_print_listL_840, fvc:=0, argc:=1);
  x_625 := fn0_mklistL_825(2000000);
  move1(test_624, x_625);
  lazy(x_626, lazy__845, 4);
  setlazy(x_626, string_of_int_236, 0);
  setlazy(x_626, cmsortL_544, 1);
  setlazy(x_626, list_lenL_583, 2);
  setlazy(x_626, test_624, 3);
  force(x_844, x_626);
  return x_844;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

