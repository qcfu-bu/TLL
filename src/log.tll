[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "string_of_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", String_t)))),
           (Binder ((Some "string_of_list"),
              [([(PId "nil")], (Some (String "nil")));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr ("++",
                          (BOpr ("++",
                             (App [(Id ("string_of_int", I)); (Id ("x", I))]),
                             (String " :: "))),
                          (App [(Id ("string_of_list", I)); (Id ("xs", I))])
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", String_t)))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 33)]),
           (Binder ((PId "test"),
              (Let (R, (App [(Id ("msort", I)); (Id ("test", I))]),
                 (Binder ((PId "sorted"),
                    (Print
                       (App [(Id ("string_of_list", I)); (Id ("sorted", I))]))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_430› : ∀ (A_431 : Type‹s_430›) -> A_431 -> ?_2[0;0] :=
  fun id_433 : ∀ (A_434 : Type‹s_430›) -> A_434 -> ?_1[0;0]
  | A_436 m_437 => m_437

#[logical]
inductive eq_1‹s_438› (A_439 : Type‹s_438›) (m_440 : A_439):
  A_439 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_440 m_440)

#[program]
def rwl_2‹s_442,r_443› :
  ∀ {A_444 : Type‹s_442›} ->
    ∀ {m_445 : A_444} ->
      ∀ {n_446 : A_444} ->
        ∀ {B_447 : A_444 -> Type‹r_443›} ->
          {(eq_1‹??_3› ?_5[0;0] m_445 n_446)} ->
            ((B_447) m_445) -> ((B_447) n_446)
:=
  fun rwl_451 :
    ∀ {A_452 : Type‹s_442›} ->
      ∀ {m_453 : A_452} ->
        ∀ {n_454 : A_452} ->
          ∀ {B_455 : A_452 -> Type‹r_443›} ->
            {(eq_1‹??_2› ?_4[0;0] m_453 n_454)} ->
              ((B_455) m_453) -> ((B_455) n_454)
  | A_459 m_460 n_461 B_462 refl_1 x_463 => x_463

#[program]
def rwr_3‹s_464,r_465› :
  ∀ {A_466 : Type‹s_464›} ->
    ∀ {m_467 : A_466} ->
      ∀ {n_468 : A_466} ->
        ∀ {B_469 : A_466 -> Type‹r_465›} ->
          {(eq_1‹??_5› ?_7[0;0] m_467 n_468)} ->
            ((B_469) n_468) -> ((B_469) m_467)
:=
  fun rwr_473 :
    ∀ {A_474 : Type‹s_464›} ->
      ∀ {m_475 : A_474} ->
        ∀ {n_476 : A_474} ->
          ∀ {B_477 : A_474 -> Type‹r_465›} ->
            {(eq_1‹??_4› ?_6[0;0] m_475 n_476)} ->
              ((B_477) n_476) -> ((B_477) m_475)
  | A_481 m_482 n_483 B_484 refl_1 x_485 => x_485

#[logical]
def congr_4‹s_486,r_487,t_488› :
  ∀ (A_489 : Type‹s_486›) ->
    ∀ (B_490 : Type‹r_487›) ->
      ∀ (m_491 : A_489) ->
        ∀ (n_492 : A_489) ->
          ∀ (f_493 : forall‹t_488›(__494 : A_489), B_490) ->
            (eq_1‹??_9› ?_12[0;0] m_491 n_492) ->
              (eq_1‹??_10› ?_13[0;0] ((f_493) m_491) ((f_493) n_492))
:=
  fun congr_496 :
    ∀ (A_497 : Type‹s_486›) ->
      ∀ (B_498 : Type‹r_487›) ->
        ∀ (m_499 : A_497) ->
          ∀ (n_500 : A_497) ->
            ∀ (f_501 : forall‹t_488›(__502 : A_497), B_498) ->
              (eq_1‹??_6› ?_8[0;0] m_499 n_500) ->
                (eq_1‹??_7› ?_9[0;0] ((f_501) m_499) ((f_501) n_500))
  | A_504 B_505 m_506 n_507 f_508 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_509 : U} ->
    ∀ {m_510 : A_509} ->
      ∀ (x_511 : (eq_1‹??_15› ?_20[0;0] m_510 m_510)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_511 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_512 :
    ∀ {A_513 : U} ->
      ∀ {m_514 : A_513} ->
        ∀ (x_515 : (eq_1‹??_11› ?_14[0;0] m_514 m_514)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_515 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_516 m_517 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_518,t_519› (A_520 : Type‹s_518›):
  A_520 -> Type‹t_519›
where
| just_2 (m_522 : A_520) : (sing_2‹??_18,??_19› ?_24[0;0] m_522)

#[logical]
def ssing_6‹s_523› :
  ∀ (A_524 : Type‹s_523›) -> A_524 -> Type‹s_523›
:=
  fun ssing_526 : ∀ (A_527 : Type‹s_523›) -> A_527 -> Type‹s_523›
  | A_529 m_530 => (sing_2‹s_523,s_523› A_529 m_530)

#[program]
def sing_elim_7‹s_531,t_532› :
  ∀ {A_533 : Type‹s_531›} ->
    ∀ {x_534 : A_533} -> (sing_2‹s_531,t_532› ?_26[0;0] x_534) -> A_533
:=
  fun sing_elim_536 :
    ∀ {A_537 : Type‹s_531›} ->
      ∀ {x_538 : A_537} ->
        (sing_2‹s_531,t_532› ?_25[0;0] x_538) -> A_537
  | A_540 x_541 (just_2 x_542) => x_542

#[logical]
def sing_uniq_8‹s_543,t_544› :
  ∀ (A_545 : Type‹s_543›) ->
    ∀ (x0_546 : A_545) ->
      ∀ (x_547 : (sing_2‹s_543,t_544› ?_33[0;0] x0_546)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_546
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_547))
:=
  fun sing_uniq_548 :
    ∀ (A_549 : Type‹s_543›) ->
      ∀ (x0_550 : A_549) ->
        ∀ (x_551 : (sing_2‹s_543,t_544› ?_27[0;0] x0_550)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_550
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_551))
  | A_552 x0_553 (just_2 _554) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_555 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_555 tt_3)
:=
  fun unit_eta_556 :
    ∀ (x_557 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_557 tt_3)
  | x_558 =>
    match x_558 in
      ∀ (x0_559 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_559 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_561 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_565 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _568 _569 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_572 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _575 _576 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_579 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _582 _583 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_584 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_587 : nat_5 -> nat_5 -> bool_4
  | zero_6 _590 => true_4
  | _591 zero_6 => false_5
  | (succ_7 x_592) (succ_7 y_593) => ((lte_587) x_592 y_593)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_596 : nat_5 -> nat_5 -> bool_4
  | x_599 y_600 => ((lte_14) (succ_7‹› x_599) y_600)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_602 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_604) => x_604

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_607 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_610 => y_610
  | (succ_7 x_611) y_612 => (succ_7‹› ((add_607) x_611 y_612))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_615 : nat_5 -> nat_5 -> nat_5
  | x_618 zero_6 => x_618
  | x_619 (succ_7 y_620) => ((sub_615) ((pred_16) x_619) y_620)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_623 : nat_5 -> nat_5 -> nat_5
  | zero_6 _626 => zero_6
  | (succ_7 x_627) y_628 => ((add_17) y_628 ((mul_623) x_627 y_628))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_631 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_634 y_635 =>
    match ((lt_15) x_634 y_635) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_637 :=
        fun loop_638 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_641 y_642 =>
          match ((sub_18) x_641 ((pred_16) y_642)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_644) => (succ_7‹› ((loop_638) x_644 y_642))
      in ((loop_637) x_634 y_635)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_647 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_650 y_651 => ((sub_18) x_650 ((mul_19) ((div_20) x_650 y_651) y_651))

#[program]
inductive list_6‹s_652,t_653› (A_654 : Type‹s_652›): Type‹t_653›
where
| nil_8 : (list_6‹??_31,??_32› A_654)
| cons_9
    (hd_655 : A_654) (tl_656 : (list_6‹??_33,t_653› A_654))
    : (list_6‹??_34,??_35› A_654)

#[program]
def free_list_22‹s_657,t_658› :
  ∀ {A_659 : Type‹s_657›} ->
    A_659 -> unit_3 -> (list_6‹??_37,t_658› A_659) -> unit_3
:=
  fun free_list_663 :
    ∀ {A_664 : Type‹s_657›} ->
      A_664 -> unit_3 -> (list_6‹??_36,t_658› A_664) -> unit_3
  | A_668 f_669 nil_8 => tt_3
  | A_670 f_671 (cons_9 x_672 xs_673) =>
    let __674 := ((f_671) x_672) in ((free_list_663) ?_52[0;0] f_671 xs_673)

#[program]
inductive exists0_7‹s_675,r_676› (A_677 : Type‹s_675›) (B_678 : 
A_677 -> Type‹r_676›): L where
| ex0_10
    {m_680 : A_677} (n_681 : ((B_678) m_680))
    : (exists0_7‹??_38,??_39› A_677 B_678)

#[program]
inductive exists1_8‹s_682,r_683› (A_684 : Type‹s_682›) (B_685 : 
A_684 -> Type‹r_683›): L where
| ex1_11
    (m_687 : A_684) (n_688 : ((B_685) m_687))
    : (exists1_8‹??_40,??_41› A_684 B_685)

#[logical]
def prod0_23‹s_689,r_690› :
  Type‹s_689› -> Type‹r_690› -> ?_56[0;0]
:=
  fun prod0_693 : Type‹s_689› -> Type‹r_690› -> ?_53[0;0]
  | A_696 B_697 =>
    (exists0_7‹??_42,??_43›
      A_696 fun _698 : ?_54[0;0] -> ?_55[0;0]
            | _700 => B_697)

#[logical]
def prod1_24‹s_701,r_702› :
  Type‹s_701› -> Type‹r_702› -> ?_60[0;0]
:=
  fun prod1_705 : Type‹s_701› -> Type‹r_702› -> ?_57[0;0]
  | A_708 B_709 =>
    (exists1_8‹??_44,??_45›
      A_708 fun _710 : ?_58[0;0] -> ?_59[0;0]
            | _712 => B_709)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_715 : int -> int -> int
  | x_718 y_719 =>
    let loop_720 :=
      fun loop_721 : int -> int -> int
      | acc_724 y_725 =>
        match (__lte__ y_725 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_724
        | false_5 => ((loop_721) (__mul__ x_718 acc_724) (__sub__ y_725 1))
    in ((loop_720) 1 y_719)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_730 : int -> int -> int -> int
  | x_734 y_735 m_736 =>
    let loop_737 :=
      fun loop_738 : int -> int -> int
      | acc_741 y_742 =>
        match (__lte__ y_742 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_741
        | false_5 =>
          ((loop_738)
            (__mod__ (__mul__ x_734 acc_741) m_736) (__sub__ y_742 1))
    in ((loop_737) 1 y_735)

#[program]
def ord_27‹› : char -> int :=
  fun ord_745 : char -> int
  | c_747 => (__ord__ c_747)

#[program]
def chr_28‹› : int -> char :=
  fun chr_749 : int -> char
  | i_751 => (__chr__ i_751)

#[program]
def str_29‹› : char -> string :=
  fun str_753 : char -> string
  | c_755 => (__push__ "" c_755)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_757 : string -> int
  | s_759 => (__size__ s_759)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_761 : int -> string
  | i_763 =>
    let aux_764 :=
      fun aux_765 : int -> string
      | i_767 =>
        match (__lte__ 10 i_767) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_769 := (__mod__ i_767 10) in
          let i_770 := (__div__ i_767 10) in
          (__push__ ((aux_765) i_770)
            ((chr_28) (__add__ r_769 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_767 ((ord_27) 0))))
    in
    match (__lt__ 0 i_763) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_764) i_763)
    | false_5 => (__cat__ "~" ((aux_764) (__neg__ i_763)))

#[program]
def split_32‹t_772› :
  (list_6‹??_71,t_772› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_772› int) (list_6‹??_73,t_772› int))
:=
  fun split_774 :
    (list_6‹??_46,t_772› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_772› int) (list_6‹??_48,t_772› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_776 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_776 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_777 (cons_9 y_778 zs_779)) =>
    match ((split_774) zs_779) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_781 ys_782) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_777 xs_781)
        (cons_9‹??_67,??_68› ?_79[0;0] y_778 ys_782))

#[program]
def merge_33‹t_783› :
  (list_6‹??_87,t_783› int) ->
    (list_6‹??_88,t_783› int) -o (list_6‹??_89,t_783› int)
:=
  fun merge_786 :
    (list_6‹??_76,t_783› int) ->
      (list_6‹??_77,t_783› int) -o (list_6‹??_78,t_783› int)
  | nil_8 ys_789 => ys_789
  | xs_790 nil_8 => xs_790
  | (cons_9 x_791 xs_792) (cons_9 y_793 ys_794) =>
    match (__lte__ x_791 y_793) in ?_84[0;0] -o ?_85[0;0] with
    | true_4 =>
      (cons_9‹??_81,??_82›
        ?_87[0;0] x_791
        ((merge_786) xs_792 (cons_9‹??_79,??_80› ?_86[0;0] y_793 ys_794)))
    | false_5 =>
      (cons_9‹??_85,??_86›
        ?_89[0;0] y_793
        ((merge_786) (cons_9‹??_83,??_84› ?_88[0;0] x_791 xs_792) ys_794))

#[program]
def msort_34‹t_796› :
  (list_6‹??_100,t_796› int) -> (list_6‹??_101,t_796› int)
:=
  fun msort_798 :
    (list_6‹??_90,t_796› int) -> (list_6‹??_91,t_796› int)
  | nil_8 => (nil_8‹??_92,??_93› ?_90[0;0])
  | (cons_9 z_800 nil_8) =>
    (cons_9‹??_96,??_97›
      ?_92[0;0] z_800 (nil_8‹??_94,??_95› ?_91[0;0]))
  | zs_801 =>
    match ((split_32‹??_98›) zs_801) in ?_94[0;0] -o ?_93[0;0] with
    | (ex1_11 xs_803 ys_804) =>
      ((merge_33‹??_99›) ((msort_798) xs_803) ((msort_798) ys_804))

#[program]
def mklist_35‹t_805› : int -> (list_6‹??_107,t_805› int) :=
  fun mklist_807 : int -> (list_6‹??_102,t_805› int)
  | n_809 =>
    match (__lte__ n_809 0) in ?_95[0;0] -o ?_96[0;0] with
    | true_4 => (nil_8‹??_103,??_104› ?_97[0;0])
    | false_5 =>
      (cons_9‹??_105,??_106›
        ?_98[0;0] n_809 ((mklist_807) (__sub__ n_809 1)))

#[program]
def list_len_36‹t_811› : (list_6‹??_109,t_811› int) -> int :=
  fun list_len_813 : (list_6‹??_108,t_811› int) -> int
  | nil_8 => 0
  | (cons_9 _815 xs_816) => (__add__ 1 ((list_len_813) xs_816))

#[program]
def string_of_list_37‹t_817› : (list_6‹??_111,t_817› int) -> string
:=
  fun string_of_list_819 : (list_6‹??_110,t_817› int) -> string
  | nil_8 => "nil"
  | (cons_9 x_821 xs_822) =>
    (__cat__ (__cat__ ((string_of_int_31) x_821) " :: ")
      ((string_of_list_819) xs_822))

#[program]
def main_38‹› : IO unit_3 :=
  let test_823 := ((mklist_35‹L›) 33) in
  let sorted_824 := ((msort_34‹??_112›) test_823) in
  print ((string_of_list_37‹??_113›) sorted_824)

-----------------------------------------

#[program]
def id_1‹s_5878› : ∀ (A_5879 : Type‹s_5878›) -> A_5879 -> A_5879 :=
  fun id_5881 : ∀ (A_5882 : Type‹s_5878›) -> A_5882 -> A_5882
  | A_5884 m_5885 => m_5885

#[logical]
inductive eq_1‹s_5886› (A_5887 : Type‹s_5886›) (m_5888 : A_5887):
  A_5887 -> U
where
| refl_1 : (eq_1‹s_5886› A_5887 m_5888 m_5888)

#[program]
def rwl_2‹s_5890,r_5891› :
  ∀ {A_5892 : Type‹s_5890›} ->
    ∀ {m_5893 : A_5892} ->
      ∀ {n_5894 : A_5892} ->
        ∀ {B_5895 : A_5892 -> Type‹r_5891›} ->
          {(eq_1‹s_5890› A_5892 m_5893 n_5894)} ->
            ((B_5895) m_5893) -> ((B_5895) n_5894)
:=
  fun rwl_5899 :
    ∀ {A_5900 : Type‹s_5890›} ->
      ∀ {m_5901 : A_5900} ->
        ∀ {n_5902 : A_5900} ->
          ∀ {B_5903 : A_5900 -> Type‹r_5891›} ->
            {(eq_1‹s_5890› A_5900 m_5901 n_5902)} ->
              ((B_5903) m_5901) -> ((B_5903) n_5902)
  | A_5907 m_5908 n_5909 B_5910 refl_1 __5911 => __5911

#[program]
def rwr_3‹s_5912,r_5913› :
  ∀ {A_5914 : Type‹s_5912›} ->
    ∀ {m_5915 : A_5914} ->
      ∀ {n_5916 : A_5914} ->
        ∀ {B_5917 : A_5914 -> Type‹r_5913›} ->
          {(eq_1‹s_5912› A_5914 m_5915 n_5916)} ->
            ((B_5917) n_5916) -> ((B_5917) m_5915)
:=
  fun rwr_5921 :
    ∀ {A_5922 : Type‹s_5912›} ->
      ∀ {m_5923 : A_5922} ->
        ∀ {n_5924 : A_5922} ->
          ∀ {B_5925 : A_5922 -> Type‹r_5913›} ->
            {(eq_1‹s_5912› A_5922 m_5923 n_5924)} ->
              ((B_5925) n_5924) -> ((B_5925) m_5923)
  | A_5929 m_5930 n_5931 B_5932 refl_1 __5933 => __5933

#[logical]
def congr_4‹s_5934,r_5935,t_5936› :
  ∀ (A_5937 : Type‹s_5934›) ->
    ∀ (B_5938 : Type‹r_5935›) ->
      ∀ (m_5939 : A_5937) ->
        ∀ (n_5940 : A_5937) ->
          ∀ (f_5941 : forall‹t_5936›(__5942 : A_5937), B_5938) ->
            (eq_1‹s_5934› A_5937 m_5939 n_5940) ->
              (eq_1‹r_5935› B_5938 ((f_5941) m_5939) ((f_5941) n_5940))
:=
  fun congr_5944 :
    ∀ (A_5945 : Type‹s_5934›) ->
      ∀ (B_5946 : Type‹r_5935›) ->
        ∀ (m_5947 : A_5945) ->
          ∀ (n_5948 : A_5945) ->
            ∀ (f_5949 : forall‹t_5936›(__5950 : A_5945), B_5946) ->
              (eq_1‹s_5934› A_5945 m_5947 n_5948) ->
                (eq_1‹r_5935› B_5946 ((f_5949) m_5947) ((f_5949) n_5948))
  | A_5952 B_5953 m_5954 n_5955 f_5956 refl_1 =>
    (refl_1‹r_5935› B_5953 ((f_5956) n_5955))

#[logical]
def axiom_K_5‹› :
  ∀ {A_5957 : U} ->
    ∀ {m_5958 : A_5957} ->
      ∀ (x_5959 : (eq_1‹U› A_5957 m_5958 m_5958)) ->
        (eq_1‹U›
          (eq_1‹U› A_5957 m_5958 m_5958) x_5959
          (refl_1‹U› A_5957 m_5958))
:=
  fun axiom_K_5960 :
    ∀ {A_5961 : U} ->
      ∀ {m_5962 : A_5961} ->
        ∀ (x_5963 : (eq_1‹U› A_5961 m_5962 m_5962)) ->
          (eq_1‹U›
            (eq_1‹U› A_5961 m_5962 m_5962) x_5963
            (refl_1‹U› A_5961 m_5962))
  | A_5964 m_5965 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_5964 m_5965 m_5965) (refl_1‹U› A_5964 m_5965))

#[program]
inductive sing_2‹s_5966,t_5967› (A_5968 : Type‹s_5966›):
  A_5968 -> Type‹t_5967›
where
| just_2 (m_5970 : A_5968) : (sing_2‹s_5966,t_5967› A_5968 m_5970)

#[logical]
def ssing_6‹s_5971› :
  ∀ (A_5972 : Type‹s_5971›) -> A_5972 -> Type‹s_5971›
:=
  fun ssing_5974 :
    ∀ (A_5975 : Type‹s_5971›) -> A_5975 -> Type‹s_5971›
  | A_5977 m_5978 => (sing_2‹s_5971,s_5971› A_5977 m_5978)

#[program]
def sing_elim_7‹s_5979,t_5980› :
  ∀ {A_5981 : Type‹s_5979›} ->
    ∀ {x_5982 : A_5981} ->
      (sing_2‹s_5979,t_5980› A_5981 x_5982) -> A_5981
:=
  fun sing_elim_5984 :
    ∀ {A_5985 : Type‹s_5979›} ->
      ∀ {x_5986 : A_5985} ->
        (sing_2‹s_5979,t_5980› A_5985 x_5986) -> A_5985
  | A_5988 x_5989 (just_2 m_5990) => m_5990

#[logical]
def sing_uniq_8‹s_5991,t_5992› :
  ∀ (A_5993 : Type‹s_5991›) ->
    ∀ (x0_5994 : A_5993) ->
      ∀ (x_5995 : (sing_2‹s_5991,t_5992› A_5993 x0_5994)) ->
        (eq_1‹s_5991›
          A_5993 x0_5994
          ((sing_elim_7‹s_5991,t_5992›) A_5993 x0_5994 x_5995))
:=
  fun sing_uniq_5996 :
    ∀ (A_5997 : Type‹s_5991›) ->
      ∀ (x0_5998 : A_5997) ->
        ∀ (x_5999 : (sing_2‹s_5991,t_5992› A_5997 x0_5998)) ->
          (eq_1‹s_5991›
            A_5997 x0_5998
            ((sing_elim_7‹s_5991,t_5992›) A_5997 x0_5998 x_5999))
  | A_6000 x0_6001 (just_2 m_6002) => (refl_1‹s_5991› A_6000 m_6002)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_6003 : unit_3) -> (eq_1‹U› unit_3 x_6003 tt_3)
:=
  fun unit_eta_6004 :
    ∀ (x_6005 : unit_3) -> (eq_1‹U› unit_3 x_6005 tt_3)
  | x_6006 =>
    match x_6006 in
      ∀ (x0_6007 : unit_3) -o (eq_1‹U› unit_3 x0_6007 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_6009 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_6013 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __6016 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_6019 : bool_4 -> bool_4 -> bool_4
  | true_4 __6022 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_6025 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_6028 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_6031 : nat_5 -> nat_5 -> bool_4
  | zero_6 __6034 => true_4
  | (succ_7 n_6035) zero_6 => false_5
  | (succ_7 n_6036) (succ_7 n_6037) => ((lte_6031) n_6036 n_6037)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_6040 : nat_5 -> nat_5 -> bool_4
  | x_6043 y_6044 => ((lte_14) (succ_7‹› x_6043) y_6044)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_6046 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_6048) => n_6048

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_6051 : nat_5 -> nat_5 -> nat_5
  | zero_6 __6054 => __6054
  | (succ_7 n_6055) __6056 => (succ_7‹› ((add_6051) n_6055 __6056))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_6059 : nat_5 -> nat_5 -> nat_5
  | __6062 zero_6 => __6062
  | __6063 (succ_7 n_6064) => ((sub_6059) ((pred_16) __6063) n_6064)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_6067 : nat_5 -> nat_5 -> nat_5
  | zero_6 __6070 => zero_6
  | (succ_7 n_6071) __6072 => ((add_17) __6072 ((mul_6067) n_6071 __6072))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_6075 : nat_5 -> nat_5 -> nat_5
  | x_6078 y_6079 =>
    match ((lt_15) x_6078 y_6079) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_6081 :=
        fun loop_6082 : nat_5 -> nat_5 -> nat_5
        | x_6085 y_6086 =>
          match ((sub_18) x_6085 ((pred_16) y_6086)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_6088) => (succ_7‹› ((loop_6082) n_6088 y_6086))
      in ((loop_6081) x_6078 y_6079)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_6091 : nat_5 -> nat_5 -> nat_5
  | x_6094 y_6095 =>
    ((sub_18) x_6094 ((mul_19) ((div_20) x_6094 y_6095) y_6095))

#[program]
inductive list_6‹s_6096,t_6097› (A_6098 : Type‹s_6096›):
  Type‹t_6097›
where
| nil_8 : (list_6‹s_6096,t_6097› A_6098)
| cons_9
    (hd_6099 : A_6098) (tl_6100 : (list_6‹s_6096,t_6097› A_6098))
    : (list_6‹s_6096,t_6097› A_6098)

#[program]
def free_list_22‹s_6101,t_6102› :
  ∀ {A_6103 : Type‹s_6101›} ->
    A_6103 -> unit_3 -> (list_6‹s_6101,t_6102› A_6103) -> unit_3
:=
  fun free_list_6107 :
    ∀ {A_6108 : Type‹s_6101›} ->
      A_6108 -> unit_3 -> (list_6‹s_6101,t_6102› A_6108) -> unit_3
  | A_6112 f_6113 nil_8 => tt_3
  | A_6114 f_6115 (cons_9 hd_6116 tl_6117) =>
    let __6118 := ((f_6115) hd_6116) in
    ((free_list_6107) A_6114 f_6115 tl_6117)

#[program]
inductive exists0_7‹s_6119,r_6120› (A_6121 : Type‹s_6119›) (B_6122 : 
A_6121 -> Type‹r_6120›): L where
| ex0_10
    {m_6124 : A_6121} (n_6125 : ((B_6122) m_6124))
    : (exists0_7‹s_6119,r_6120› A_6121 B_6122)

#[program]
inductive exists1_8‹s_6126,r_6127› (A_6128 : Type‹s_6126›) (B_6129 : 
A_6128 -> Type‹r_6127›): L where
| ex1_11
    (m_6131 : A_6128) (n_6132 : ((B_6129) m_6131))
    : (exists1_8‹s_6126,r_6127› A_6128 B_6129)

#[logical]
def prod0_23‹s_6133,r_6134› : Type‹s_6133› -> Type‹r_6134› -> L
:=
  fun prod0_6137 : Type‹s_6133› -> Type‹r_6134› -> L
  | A_6140 B_6141 =>
    (exists0_7‹s_6133,r_6134›
      A_6140 fun _6142 : A_6140 -> Type‹r_6134›
             | __6144 => B_6141)

#[logical]
def prod1_24‹s_6145,r_6146› : Type‹s_6145› -> Type‹r_6146› -> L
:=
  fun prod1_6149 : Type‹s_6145› -> Type‹r_6146› -> L
  | A_6152 B_6153 =>
    (exists1_8‹s_6145,r_6146›
      A_6152 fun _6154 : A_6152 -> Type‹r_6146›
             | __6156 => B_6153)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_6159 : int -> int -> int
  | x_6162 y_6163 =>
    let loop_6164 :=
      fun loop_6165 : int -> int -> int
      | acc_6168 y_6169 =>
        match (__lte__ y_6169 0) in bool_4 -o int with
        | true_4 => acc_6168
        | false_5 =>
          ((loop_6165) (__mul__ x_6162 acc_6168) (__sub__ y_6169 1))
    in ((loop_6164) 1 y_6163)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_6174 : int -> int -> int -> int
  | x_6178 y_6179 m_6180 =>
    let loop_6181 :=
      fun loop_6182 : int -> int -> int
      | acc_6185 y_6186 =>
        match (__lte__ y_6186 0) in bool_4 -o int with
        | true_4 => acc_6185
        | false_5 =>
          ((loop_6182)
            (__mod__ (__mul__ x_6178 acc_6185) m_6180) (__sub__ y_6186 1))
    in ((loop_6181) 1 y_6179)

#[program]
def ord_27‹› : char -> int :=
  fun ord_6189 : char -> int
  | c_6191 => (__ord__ c_6191)

#[program]
def chr_28‹› : int -> char :=
  fun chr_6193 : int -> char
  | i_6195 => (__chr__ i_6195)

#[program]
def str_29‹› : char -> string :=
  fun str_6197 : char -> string
  | c_6199 => (__push__ "" c_6199)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_6201 : string -> int
  | s_6203 => (__size__ s_6203)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_6205 : int -> string
  | i_6207 =>
    let aux_6208 :=
      fun aux_6209 : int -> string
      | i_6211 =>
        match (__lte__ 10 i_6211) in bool_4 -o string with
        | true_4 =>
          let r_6213 := (__mod__ i_6211 10) in
          let i_6214 := (__div__ i_6211 10) in
          (__push__ ((aux_6209) i_6214)
            ((chr_28) (__add__ r_6213 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_6211 ((ord_27) 0))))
    in
    match (__lt__ 0 i_6207) in bool_4 -o string with
    | true_4 => ((aux_6208) i_6207)
    | false_5 => (__cat__ "~" ((aux_6208) (__neg__ i_6207)))

#[program]
def split_32‹t_6216› :
  (list_6‹U,t_6216› int) ->
    ((prod1_24‹t_6216,t_6216›)
      (list_6‹U,t_6216› int) (list_6‹U,t_6216› int))
:=
  fun split_6218 :
    (list_6‹U,t_6216› int) ->
      ((prod1_24‹t_6216,t_6216›)
        (list_6‹U,t_6216› int) (list_6‹U,t_6216› int))
  | nil_8 =>
    (ex1_11‹t_6216,t_6216›
      (list_6‹U,t_6216› int)
      fun _6220 : (list_6‹U,t_6216› int) -> Type‹t_6216›
      | __6222 => (list_6‹U,t_6216› int) (nil_8‹U,t_6216› int)
      (nil_8‹U,t_6216› int))
  | (cons_9 hd_6223 nil_8) =>
    (ex1_11‹t_6216,t_6216›
      (list_6‹U,t_6216› int)
      fun _6224 : (list_6‹U,t_6216› int) -> Type‹t_6216›
      | __6226 => (list_6‹U,t_6216› int)
      (cons_9‹U,t_6216› int hd_6223 (nil_8‹U,t_6216› int))
      (nil_8‹U,t_6216› int))
  | (cons_9 hd_6227 (cons_9 hd_6228 tl_6229)) =>
    match ((split_6218) tl_6229) in
      ((prod1_24‹t_6216,t_6216›)
        (list_6‹U,t_6216› int) (list_6‹U,t_6216› int)) -o
        ((prod1_24‹t_6216,t_6216›)
          (list_6‹U,t_6216› int) (list_6‹U,t_6216› int))
    with
    | (ex1_11 m_6231 n_6232) =>
      (ex1_11‹t_6216,t_6216›
        (list_6‹U,t_6216› int)
        fun _6233 : (list_6‹U,t_6216› int) -> Type‹t_6216›
        | __6235 => (list_6‹U,t_6216› int)
        (cons_9‹U,t_6216› int hd_6227 m_6231)
        (cons_9‹U,t_6216› int hd_6228 n_6232))

#[program]
def merge_33‹t_6236› :
  (list_6‹U,t_6236› int) ->
    (list_6‹U,t_6236› int) -o (list_6‹U,t_6236› int)
:=
  fun merge_6239 :
    (list_6‹U,t_6236› int) ->
      (list_6‹U,t_6236› int) -o (list_6‹U,t_6236› int)
  | nil_8 __6242 => __6242
  | (cons_9 hd_6243 tl_6244) nil_8 =>
    (cons_9‹U,t_6236› int hd_6243 tl_6244)
  | (cons_9 hd_6245 tl_6246) (cons_9 hd_6247 tl_6248) =>
    match (__lte__ hd_6245 hd_6247) in bool_4 -o (list_6‹U,t_6236› int)
    with
    | true_4 =>
      (cons_9‹U,t_6236›
        int hd_6245
        ((merge_6239) tl_6246 (cons_9‹U,t_6236› int hd_6247 tl_6248)))
    | false_5 =>
      (cons_9‹U,t_6236›
        int hd_6247
        ((merge_6239) (cons_9‹U,t_6236› int hd_6245 tl_6246) tl_6248))

#[program]
def msort_34‹t_6250› :
  (list_6‹U,t_6250› int) -> (list_6‹U,t_6250› int)
:=
  fun msort_6252 : (list_6‹U,t_6250› int) -> (list_6‹U,t_6250› int)
  | nil_8 => (nil_8‹U,t_6250› int)
  | (cons_9 hd_6254 nil_8) =>
    (cons_9‹U,t_6250› int hd_6254 (nil_8‹U,t_6250› int))
  | (cons_9 hd_6255 (cons_9 hd_6256 tl_6257)) =>
    match ((split_32‹t_6250›)
            (cons_9‹U,t_6250›
              int hd_6255 (cons_9‹U,t_6250› int hd_6256 tl_6257))) in
      ((prod1_24‹t_6250,t_6250›)
        (list_6‹U,t_6250› int) (list_6‹U,t_6250› int)) -o
        (list_6‹U,t_6250› int)
    with
    | (ex1_11 m_6259 n_6260) =>
      ((merge_33‹t_6250›) ((msort_6252) m_6259) ((msort_6252) n_6260))

#[program]
def mklist_35‹t_6261› : int -> (list_6‹U,t_6261› int) :=
  fun mklist_6263 : int -> (list_6‹U,t_6261› int)
  | n_6265 =>
    match (__lte__ n_6265 0) in bool_4 -o (list_6‹U,t_6261› int) with
    | true_4 => (nil_8‹U,t_6261› int)
    | false_5 =>
      (cons_9‹U,t_6261› int n_6265 ((mklist_6263) (__sub__ n_6265 1)))

#[program]
def list_len_36‹t_6267› : (list_6‹U,t_6267› int) -> int :=
  fun list_len_6269 : (list_6‹U,t_6267› int) -> int
  | nil_8 => 0
  | (cons_9 hd_6271 tl_6272) => (__add__ 1 ((list_len_6269) tl_6272))

#[program]
def string_of_list_37‹t_6273› : (list_6‹U,t_6273› int) -> string :=
  fun string_of_list_6275 : (list_6‹U,t_6273› int) -> string
  | nil_8 => "nil"
  | (cons_9 hd_6277 tl_6278) =>
    (__cat__ (__cat__ ((string_of_int_31) hd_6277) " :: ")
      ((string_of_list_6275) tl_6278))

#[program]
def main_38‹› : IO unit_3 :=
  let test_6279 := ((mklist_35‹L›) 33) in
  let sorted_6280 := ((msort_34‹L›) test_6279) in
  print ((string_of_list_37‹L›) sorted_6280)

-----------------------------------------

#[program]
def idU_40 := fun id_10225 (A_10226) -> (m_10227) ->
                m_10227

#[program]
def idL_39 := fun id_10228 (A_10229) -> (m_10230) ->
                m_10230

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_44 :=
  fun rwl_10231 {A_10232} -> {m_10233} -> {n_10234} -> {B_10235} ->
  {__10236} -> (__10237) ->
    match {NULL} with
    | reflU_13  => __10237
    end

#[program]
def rwlUL_43 :=
  fun rwl_10238 {A_10239} -> {m_10240} -> {n_10241} -> {B_10242} ->
  {__10243} -> (__10244) ->
    match {NULL} with
    | reflU_13  => __10244
    end

#[program]
def rwlLU_42 :=
  fun rwl_10245 {A_10246} -> {m_10247} -> {n_10248} -> {B_10249} ->
  {__10250} -> (__10251) ->
    match {NULL} with
    | reflL_12  => __10251
    end

#[program]
def rwlLL_41 :=
  fun rwl_10252 {A_10253} -> {m_10254} -> {n_10255} -> {B_10256} ->
  {__10257} -> (__10258) ->
    match {NULL} with
    | reflL_12  => __10258
    end

#[program]
def rwrUU_48 :=
  fun rwr_10259 {A_10260} -> {m_10261} -> {n_10262} -> {B_10263} ->
  {__10264} -> (__10265) ->
    match {NULL} with
    | reflU_13  => __10265
    end

#[program]
def rwrUL_47 :=
  fun rwr_10266 {A_10267} -> {m_10268} -> {n_10269} -> {B_10270} ->
  {__10271} -> (__10272) ->
    match {NULL} with
    | reflU_13  => __10272
    end

#[program]
def rwrLU_46 :=
  fun rwr_10273 {A_10274} -> {m_10275} -> {n_10276} -> {B_10277} ->
  {__10278} -> (__10279) ->
    match {NULL} with
    | reflL_12  => __10279
    end

#[program]
def rwrLL_45 :=
  fun rwr_10280 {A_10281} -> {m_10282} -> {n_10283} -> {B_10284} ->
  {__10285} -> (__10286) ->
    match {NULL} with
    | reflL_12  => __10286
    end

#[logical]
def congrUUU_56 := NULL

#[logical]
def congrUUL_55 := NULL

#[logical]
def congrULU_54 := NULL

#[logical]
def congrULL_53 := NULL

#[logical]
def congrLUU_52 := NULL

#[logical]
def congrLUL_51 := NULL

#[logical]
def congrLLU_50 := NULL

#[logical]
def congrLLL_49 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_58 := NULL

#[logical]
def ssingL_57 := NULL

#[program]
def sing_elimUU_62 :=
  fun sing_elim_10287 {A_10288} -> {x_10289} -> (__10290) ->
    match __10290 with
    | justUU_17 m_10291 => m_10291
    end

#[program]
def sing_elimUL_61 :=
  fun sing_elim_10292 {A_10293} -> {x_10294} -> (__10295) ->
    match __10295 with
    | justUL_16 m_10296 => m_10296
    end

#[program]
def sing_elimLU_60 :=
  fun sing_elim_10297 {A_10298} -> {x_10299} -> (__10300) ->
    match __10300 with
    
    end

#[program]
def sing_elimLL_59 :=
  fun sing_elim_10301 {A_10302} -> {x_10303} -> (__10304) ->
    match __10304 with
    | justLL_14 m_10305 => m_10305
    end

#[logical]
def sing_uniqUU_66 := NULL

#[logical]
def sing_uniqUL_65 := NULL

#[logical]
def sing_uniqLU_64 := NULL

#[logical]
def sing_uniqLL_63 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_10306 (__10307) ->
    match __10307 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_10308 (__10309) -> (__10310) ->
    match __10309 with
    | true_4  =>
      match __10310 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_10311 (__10312) -> (__10313) ->
    match __10312 with
    | true_4  => true_4
    | false_5  =>
      match __10313 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_10314 (__10315) -> (__10316) -o
    match __10315 with
    | true_4  =>
      match __10316 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __10316 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_10317 (__10318) -> (__10319) ->
    match __10318 with
    | zero_6  => true_4
    | succ_7 n_10320 =>
      match __10319 with
      | zero_6  => false_5 | succ_7 n_10321 => ((lte_10317) n_10320 n_10321)
      end
    end

#[program]
def lt_15 :=
  fun lt_10322 (x_10323) -> (y_10324) ->
    ((lte_14) (succ_7 x_10323) y_10324)

#[program]
def pred_16 :=
  fun pred_10325 (__10326) ->
    match __10326 with
    | zero_6  => zero_6 | succ_7 n_10327 => n_10327
    end

#[program]
def add_17 :=
  fun add_10328 (__10329) -> (__10330) ->
    match __10329 with
    | zero_6  => __10330
    | succ_7 n_10331 => (succ_7 ((add_10328) n_10331 __10330))
    end

#[program]
def sub_18 :=
  fun sub_10332 (__10333) -> (__10334) ->
    match __10334 with
    | zero_6  => __10333
    | succ_7 n_10335 => ((sub_10332) ((pred_16) __10333) n_10335)
    end

#[program]
def mul_19 :=
  fun mul_10336 (__10337) -> (__10338) ->
    match __10337 with
    | zero_6  => zero_6
    | succ_7 n_10339 => ((add_17) __10338 ((mul_10336) n_10339 __10338))
    end

#[program]
def div_20 :=
  fun div_10340 (x_10341) -> (y_10342) ->
    match ((lt_15) x_10341 y_10342) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10343 :=
        fun loop_10344 (x_10345) -> (y_10346) ->
          match ((sub_18) x_10345 ((pred_16) y_10346)) with
          | zero_6  => zero_6
          | succ_7 n_10347 => (succ_7 ((loop_10344) n_10347 y_10346))
          end
      in ((loop_10343) x_10341 y_10342)
    end

#[program]
def rem_21 :=
  fun rem_10348 (x_10349) -> (y_10350) ->
    ((sub_18) x_10349 ((mul_19) ((div_20) x_10349 y_10350) y_10350))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_70 :=
  fun free_list_10351 {A_10352} -> (f_10353) -> (__10354) ->
    match __10354 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10355 tl_10356 =>
      let __10357 := ((f_10353) hd_10355) in
      ((free_list_10351) NULL f_10353 tl_10356)
    end

#[program]
def free_listUL_69 :=
  fun free_list_10358 {A_10359} -> (f_10360) -> (__10361) ->
    match __10361 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10362 tl_10363 =>
      let __10364 := ((f_10360) hd_10362) in
      ((free_list_10358) NULL f_10360 tl_10363)
    end

#[program]
def free_listLL_67 :=
  fun free_list_10365 {A_10366} -> (f_10367) -> (__10368) ->
    match __10368 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10369 tl_10370 =>
      let __10371 := ((f_10367) hd_10369) in
      ((free_list_10365) NULL f_10367 tl_10370)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_74 := NULL

#[logical]
def prod0UL_73 := NULL

#[logical]
def prod0LU_72 := NULL

#[logical]
def prod0LL_71 := NULL

#[logical]
def prod1UU_78 := NULL

#[logical]
def prod1UL_77 := NULL

#[logical]
def prod1LU_76 := NULL

#[logical]
def prod1LL_75 := NULL

#[program]
def pow_25 :=
  fun pow_10372 (x_10373) -> (y_10374) ->
    let loop_10375 :=
      fun loop_10376 (acc_10377) -> (y_10378) ->
        match (__lte__ y_10378 0) with
        | true_4  => acc_10377
        | false_5  =>
          ((loop_10376) (__mul__ x_10373 acc_10377) (__sub__ y_10378 1))
        end
    in ((loop_10375) 1 y_10374)

#[program]
def powm_26 :=
  fun powm_10379 (x_10380) -> (y_10381) -> (m_10382) ->
    let loop_10383 :=
      fun loop_10384 (acc_10385) -> (y_10386) ->
        match (__lte__ y_10386 0) with
        | true_4  => acc_10385
        | false_5  =>
          ((loop_10384)
            (__mod__ (__mul__ x_10380 acc_10385) m_10382) (__sub__ y_10386 1))
        end
    in ((loop_10383) 1 y_10381)

#[program]
def ord_27 := fun ord_10387 (c_10388) ->
                (__ord__ c_10388)

#[program]
def chr_28 := fun chr_10389 (i_10390) ->
                (__chr__ i_10390)

#[program]
def str_29 := fun str_10391 (c_10392) ->
                (__push__ "" c_10392)

#[program]
def strlen_30 := fun strlen_10393 (s_10394) ->
                   (__size__ s_10394)

#[program]
def string_of_int_31 :=
  fun string_of_int_10395 (i_10396) ->
    let aux_10397 :=
      fun aux_10398 (i_10399) ->
        match (__lte__ 10 i_10399) with
        | true_4  =>
          let r_10400 := (__mod__ i_10399 10) in
          let i_10401 := (__div__ i_10399 10) in
          (__push__ ((aux_10398) i_10401)
            ((chr_28) (__add__ r_10400 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_10399 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10396) with
    | true_4  => ((aux_10397) i_10396)
    | false_5  => (__cat__ "~" ((aux_10397) (__neg__ i_10396)))
    end

#[program]
def splitU_80 :=
  fun split_10402 (__10403) ->
    match __10403 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_10404 tl_10405 =>
      match tl_10405 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10404 nilUU_24) nilUU_24)
      | consUU_25 hd_10406 tl_10407 =>
        match ((split_10402) tl_10407) with
        | ex1UU_33 m_10408 n_10409 =>
          (ex1UU_33
            (consUU_25 hd_10404 m_10408) (consUU_25 hd_10406 n_10409))
        end
      end
    end

#[program]
def splitL_79 :=
  fun split_10410 (__10411) ->
    match __10411 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_10412 tl_10413 =>
      match tl_10413 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10412 nilUL_22) nilUL_22)
      | consUL_23 hd_10414 tl_10415 =>
        match ((split_10410) tl_10415) with
        | ex1LL_30 m_10416 n_10417 =>
          (ex1LL_30
            (consUL_23 hd_10412 m_10416) (consUL_23 hd_10414 n_10417))
        end
      end
    end

#[program]
def mergeU_82 :=
  fun merge_10418 (__10419) -> (__10420) -o
    match __10419 with
    | nilUU_24  => __10420
    | consUU_25 hd_10421 tl_10422 =>
      match __10420 with
      | nilUU_24  => (consUU_25 hd_10421 tl_10422)
      | consUU_25 hd_10423 tl_10424 =>
        match (__lte__ hd_10421 hd_10423) with
        | true_4  =>
          (consUU_25
            hd_10421 ((merge_10418) tl_10422 (consUU_25 hd_10423 tl_10424)))
        | false_5  =>
          (consUU_25
            hd_10423 ((merge_10418) (consUU_25 hd_10421 tl_10422) tl_10424))
        end
      end
    end

#[program]
def mergeL_81 :=
  fun merge_10425 (__10426) -> (__10427) -o
    match __10426 with
    | nilUL_22  => __10427
    | consUL_23 hd_10428 tl_10429 =>
      match __10427 with
      | nilUL_22  => (consUL_23 hd_10428 tl_10429)
      | consUL_23 hd_10430 tl_10431 =>
        match (__lte__ hd_10428 hd_10430) with
        | true_4  =>
          (consUL_23
            hd_10428 ((merge_10425) tl_10429 (consUL_23 hd_10430 tl_10431)))
        | false_5  =>
          (consUL_23
            hd_10430 ((merge_10425) (consUL_23 hd_10428 tl_10429) tl_10431))
        end
      end
    end

#[program]
def msortU_84 :=
  fun msort_10432 (__10433) ->
    match __10433 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_10434 tl_10435 =>
      match tl_10435 with
      | nilUU_24  => (consUU_25 hd_10434 nilUU_24)
      | consUU_25 hd_10436 tl_10437 =>
        match ((splitU_80)
                (consUU_25 hd_10434 (consUU_25 hd_10436 tl_10437))) with
        | ex1UU_33 m_10438 n_10439 =>
          ((mergeU_82) ((msort_10432) m_10438) ((msort_10432) n_10439))
        end
      end
    end

#[program]
def msortL_83 :=
  fun msort_10440 (__10441) ->
    match __10441 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_10442 tl_10443 =>
      match tl_10443 with
      | nilUL_22  => (consUL_23 hd_10442 nilUL_22)
      | consUL_23 hd_10444 tl_10445 =>
        match ((splitL_79)
                (consUL_23 hd_10442 (consUL_23 hd_10444 tl_10445))) with
        | ex1LL_30 m_10446 n_10447 =>
          ((mergeL_81) ((msort_10440) m_10446) ((msort_10440) n_10447))
        end
      end
    end

#[program]
def mklistU_86 :=
  fun mklist_10448 (n_10449) ->
    match (__lte__ n_10449 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_10449 ((mklist_10448) (__sub__ n_10449 1)))
    end

#[program]
def mklistL_85 :=
  fun mklist_10450 (n_10451) ->
    match (__lte__ n_10451 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_10451 ((mklist_10450) (__sub__ n_10451 1)))
    end

#[program]
def list_lenU_88 :=
  fun list_len_10452 (__10453) ->
    match __10453 with
    | nilUU_24  => 0
    | consUU_25 hd_10454 tl_10455 => (__add__ 1 ((list_len_10452) tl_10455))
    end

#[program]
def list_lenL_87 :=
  fun list_len_10456 (__10457) ->
    match __10457 with
    | nilUL_22  => 0
    | consUL_23 hd_10458 tl_10459 => (__add__ 1 ((list_len_10456) tl_10459))
    end

#[program]
def string_of_listU_90 :=
  fun string_of_list_10460 (__10461) ->
    match __10461 with
    | nilUU_24  => "nil"
    | consUU_25 hd_10462 tl_10463 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_10462) " :: ")
        ((string_of_list_10460) tl_10463))
    end

#[program]
def string_of_listL_89 :=
  fun string_of_list_10464 (__10465) ->
    match __10465 with
    | nilUL_22  => "nil"
    | consUL_23 hd_10466 tl_10467 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_10466) " :: ")
        ((string_of_list_10464) tl_10467))
    end

#[program]
def main :=
  let test_10468 := ((mklistL_85) 33) in
  let sorted_10469 := ((msortL_83) test_10468) in
  print ((string_of_listL_89) sorted_10469)

-----------------------------------------

#[program]
def idU_40 := fun id_10715 (A_10716) -> (m_10717) ->
                m_10717

#[program]
def idL_39 := fun id_10718 (A_10719) -> (m_10720) ->
                m_10720

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_44 :=
  fun rwl_10721 {A_10722} -> {m_10723} -> {n_10724} -> {B_10725} ->
  {__10726} -> (__10727) ->
    __10727

#[program]
def rwlUL_43 :=
  fun rwl_10728 {A_10729} -> {m_10730} -> {n_10731} -> {B_10732} ->
  {__10733} -> (__10734) ->
    __10734

#[program]
def rwlLU_42 :=
  fun rwl_10735 {A_10736} -> {m_10737} -> {n_10738} -> {B_10739} ->
  {__10740} -> (__10741) ->
    __10741

#[program]
def rwlLL_41 :=
  fun rwl_10742 {A_10743} -> {m_10744} -> {n_10745} -> {B_10746} ->
  {__10747} -> (__10748) ->
    __10748

#[program]
def rwrUU_48 :=
  fun rwr_10749 {A_10750} -> {m_10751} -> {n_10752} -> {B_10753} ->
  {__10754} -> (__10755) ->
    __10755

#[program]
def rwrUL_47 :=
  fun rwr_10756 {A_10757} -> {m_10758} -> {n_10759} -> {B_10760} ->
  {__10761} -> (__10762) ->
    __10762

#[program]
def rwrLU_46 :=
  fun rwr_10763 {A_10764} -> {m_10765} -> {n_10766} -> {B_10767} ->
  {__10768} -> (__10769) ->
    __10769

#[program]
def rwrLL_45 :=
  fun rwr_10770 {A_10771} -> {m_10772} -> {n_10773} -> {B_10774} ->
  {__10775} -> (__10776) ->
    __10776

#[logical]
def congrUUU_56 := NULL

#[logical]
def congrUUL_55 := NULL

#[logical]
def congrULU_54 := NULL

#[logical]
def congrULL_53 := NULL

#[logical]
def congrLUU_52 := NULL

#[logical]
def congrLUL_51 := NULL

#[logical]
def congrLLU_50 := NULL

#[logical]
def congrLLL_49 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_58 := NULL

#[logical]
def ssingL_57 := NULL

#[program]
def sing_elimUU_62 :=
  fun sing_elim_10777 {A_10778} -> {x_10779} -> (__10780) ->
    match __10780 with
    | justUU_17 m_10781 => m_10781
    end

#[program]
def sing_elimUL_61 :=
  fun sing_elim_10782 {A_10783} -> {x_10784} -> (__10785) ->
    match __10785 with
    | justUL_16 m_10786 => m_10786
    end

#[program]
def sing_elimLU_60 :=
  fun sing_elim_10787 {A_10788} -> {x_10789} -> (__10790) ->
    !!

#[program]
def sing_elimLL_59 :=
  fun sing_elim_10791 {A_10792} -> {x_10793} -> (__10794) ->
    match __10794 with
    | justLL_14 m_10795 => m_10795
    end

#[logical]
def sing_uniqUU_66 := NULL

#[logical]
def sing_uniqUL_65 := NULL

#[logical]
def sing_uniqLU_64 := NULL

#[logical]
def sing_uniqLL_63 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_10796 (__10797) ->
    match __10797 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_10798 (__10799) -> (__10800) ->
    match __10799 with
    | true_4  =>
      match __10800 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_10801 (__10802) -> (__10803) ->
    match __10802 with
    | true_4  => true_4
    | false_5  =>
      match __10803 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_10804 (__10805) -> (__10806) -o
    match __10805 with
    | true_4  =>
      match __10806 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __10806 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_10807 (__10808) -> (__10809) ->
    match __10808 with
    | zero_6  => true_4
    | succ_7 n_10810 =>
      match __10809 with
      | zero_6  => false_5 | succ_7 n_10811 => ((lte_10807) n_10810 n_10811)
      end
    end

#[program]
def lt_15 :=
  fun lt_10812 (x_10813) -> (y_10814) ->
    ((lte_14) (succ_7 x_10813) y_10814)

#[program]
def pred_16 :=
  fun pred_10815 (__10816) ->
    match __10816 with
    | zero_6  => zero_6 | succ_7 n_10817 => n_10817
    end

#[program]
def add_17 :=
  fun add_10818 (__10819) -> (__10820) ->
    match __10819 with
    | zero_6  => __10820
    | succ_7 n_10821 => (succ_7 ((add_10818) n_10821 __10820))
    end

#[program]
def sub_18 :=
  fun sub_10822 (__10823) -> (__10824) ->
    match __10824 with
    | zero_6  => __10823
    | succ_7 n_10825 => ((sub_10822) ((pred_16) __10823) n_10825)
    end

#[program]
def mul_19 :=
  fun mul_10826 (__10827) -> (__10828) ->
    match __10827 with
    | zero_6  => zero_6
    | succ_7 n_10829 => ((add_17) __10828 ((mul_10826) n_10829 __10828))
    end

#[program]
def div_20 :=
  fun div_10830 (x_10831) -> (y_10832) ->
    match ((lt_15) x_10831 y_10832) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10833 :=
        fun loop_10834 (x_10835) -> (y_10836) ->
          match ((sub_18) x_10835 ((pred_16) y_10836)) with
          | zero_6  => zero_6
          | succ_7 n_10837 => (succ_7 ((loop_10834) n_10837 y_10836))
          end
      in ((loop_10833) x_10831 y_10832)
    end

#[program]
def rem_21 :=
  fun rem_10838 (x_10839) -> (y_10840) ->
    ((sub_18) x_10839 ((mul_19) ((div_20) x_10839 y_10840) y_10840))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_70 :=
  fun free_list_10841 {A_10842} -> (f_10843) -> (__10844) ->
    match __10844 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10845 tl_10846 =>
      let __10847 := ((f_10843) hd_10845) in
      ((free_list_10841) NULL f_10843 tl_10846)
    end

#[program]
def free_listUL_69 :=
  fun free_list_10848 {A_10849} -> (f_10850) -> (__10851) ->
    match __10851 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10852 tl_10853 =>
      let __10854 := ((f_10850) hd_10852) in
      ((free_list_10848) NULL f_10850 tl_10853)
    end

#[program]
def free_listLL_67 :=
  fun free_list_10855 {A_10856} -> (f_10857) -> (__10858) ->
    match __10858 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10859 tl_10860 =>
      let __10861 := ((f_10857) hd_10859) in
      ((free_list_10855) NULL f_10857 tl_10860)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_74 := NULL

#[logical]
def prod0UL_73 := NULL

#[logical]
def prod0LU_72 := NULL

#[logical]
def prod0LL_71 := NULL

#[logical]
def prod1UU_78 := NULL

#[logical]
def prod1UL_77 := NULL

#[logical]
def prod1LU_76 := NULL

#[logical]
def prod1LL_75 := NULL

#[program]
def pow_25 :=
  fun pow_10862 (x_10863) -> (y_10864) ->
    let loop_10865 :=
      fun loop_10866 (acc_10867) -> (y_10868) ->
        match (__lte__ y_10868 0) with
        | true_4  => acc_10867
        | false_5  =>
          ((loop_10866) (__mul__ x_10863 acc_10867) (__sub__ y_10868 1))
        end
    in ((loop_10865) 1 y_10864)

#[program]
def powm_26 :=
  fun powm_10869 (x_10870) -> (y_10871) -> (m_10872) ->
    let loop_10873 :=
      fun loop_10874 (acc_10875) -> (y_10876) ->
        match (__lte__ y_10876 0) with
        | true_4  => acc_10875
        | false_5  =>
          ((loop_10874)
            (__mod__ (__mul__ x_10870 acc_10875) m_10872) (__sub__ y_10876 1))
        end
    in ((loop_10873) 1 y_10871)

#[program]
def ord_27 := fun ord_10877 (c_10878) ->
                (__ord__ c_10878)

#[program]
def chr_28 := fun chr_10879 (i_10880) ->
                (__chr__ i_10880)

#[program]
def str_29 := fun str_10881 (c_10882) ->
                (__push__ "" c_10882)

#[program]
def strlen_30 := fun strlen_10883 (s_10884) ->
                   (__size__ s_10884)

#[program]
def string_of_int_31 :=
  fun string_of_int_10885 (i_10886) ->
    let aux_10887 :=
      fun aux_10888 (i_10889) ->
        match (__lte__ 10 i_10889) with
        | true_4  =>
          let r_10890 := (__mod__ i_10889 10) in
          let i_10891 := (__div__ i_10889 10) in
          (__push__ ((aux_10888) i_10891)
            ((chr_28) (__add__ r_10890 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_10889 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10886) with
    | true_4  => ((aux_10887) i_10886)
    | false_5  => (__cat__ "~" ((aux_10887) (__neg__ i_10886)))
    end

#[program]
def splitU_80 :=
  fun split_10892 (__10893) ->
    match __10893 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_10894 tl_10895 =>
      match tl_10895 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10894 nilUU_24) nilUU_24)
      | consUU_25 hd_10896 tl_10897 =>
        match ((split_10892) tl_10897) with
        | ex1UU_33 m_10898 n_10899 =>
          (ex1UU_33
            (consUU_25 hd_10894 m_10898) (consUU_25 hd_10896 n_10899))
        end
      end
    end

#[program]
def splitL_79 :=
  fun split_10900 (__10901) ->
    match __10901 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_10902 tl_10903 =>
      match tl_10903 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10902 nilUL_22) nilUL_22)
      | consUL_23 hd_10904 tl_10905 =>
        match ((split_10900) tl_10905) with
        | ex1LL_30 m_10906 n_10907 =>
          (ex1LL_30
            (consUL_23 hd_10902 m_10906) (consUL_23 hd_10904 n_10907))
        end
      end
    end

#[program]
def mergeU_82 :=
  fun merge_10908 (__10909) -> (__10910) -o
    match __10909 with
    | nilUU_24  => __10910
    | consUU_25 hd_10911 tl_10912 =>
      match __10910 with
      | nilUU_24  => (consUU_25 hd_10911 tl_10912)
      | consUU_25 hd_10913 tl_10914 =>
        match (__lte__ hd_10911 hd_10913) with
        | true_4  =>
          (consUU_25
            hd_10911 ((merge_10908) tl_10912 (consUU_25 hd_10913 tl_10914)))
        | false_5  =>
          (consUU_25
            hd_10913 ((merge_10908) (consUU_25 hd_10911 tl_10912) tl_10914))
        end
      end
    end

#[program]
def mergeL_81 :=
  fun merge_10915 (__10916) -> (__10917) -o
    match __10916 with
    | nilUL_22  => __10917
    | consUL_23 hd_10918 tl_10919 =>
      match __10917 with
      | nilUL_22  => (consUL_23 hd_10918 tl_10919)
      | consUL_23 hd_10920 tl_10921 =>
        match (__lte__ hd_10918 hd_10920) with
        | true_4  =>
          (consUL_23
            hd_10918 ((merge_10915) tl_10919 (consUL_23 hd_10920 tl_10921)))
        | false_5  =>
          (consUL_23
            hd_10920 ((merge_10915) (consUL_23 hd_10918 tl_10919) tl_10921))
        end
      end
    end

#[program]
def msortU_84 :=
  fun msort_10922 (__10923) ->
    match __10923 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_10924 tl_10925 =>
      match tl_10925 with
      | nilUU_24  => (consUU_25 hd_10924 nilUU_24)
      | consUU_25 hd_10926 tl_10927 =>
        match ((splitU_80)
                (consUU_25 hd_10924 (consUU_25 hd_10926 tl_10927))) with
        | ex1UU_33 m_10928 n_10929 =>
          ((mergeU_82) ((msort_10922) m_10928) ((msort_10922) n_10929))
        end
      end
    end

#[program]
def msortL_83 :=
  fun msort_10930 (__10931) ->
    match __10931 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_10932 tl_10933 =>
      match tl_10933 with
      | nilUL_22  => (consUL_23 hd_10932 nilUL_22)
      | consUL_23 hd_10934 tl_10935 =>
        match ((splitL_79)
                (consUL_23 hd_10932 (consUL_23 hd_10934 tl_10935))) with
        | ex1LL_30 m_10936 n_10937 =>
          ((mergeL_81) ((msort_10930) m_10936) ((msort_10930) n_10937))
        end
      end
    end

#[program]
def mklistU_86 :=
  fun mklist_10938 (n_10939) ->
    match (__lte__ n_10939 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_10939 ((mklist_10938) (__sub__ n_10939 1)))
    end

#[program]
def mklistL_85 :=
  fun mklist_10940 (n_10941) ->
    match (__lte__ n_10941 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_10941 ((mklist_10940) (__sub__ n_10941 1)))
    end

#[program]
def list_lenU_88 :=
  fun list_len_10942 (__10943) ->
    match __10943 with
    | nilUU_24  => 0
    | consUU_25 hd_10944 tl_10945 => (__add__ 1 ((list_len_10942) tl_10945))
    end

#[program]
def list_lenL_87 :=
  fun list_len_10946 (__10947) ->
    match __10947 with
    | nilUL_22  => 0
    | consUL_23 hd_10948 tl_10949 => (__add__ 1 ((list_len_10946) tl_10949))
    end

#[program]
def string_of_listU_90 :=
  fun string_of_list_10950 (__10951) ->
    match __10951 with
    | nilUU_24  => "nil"
    | consUU_25 hd_10952 tl_10953 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_10952) " :: ")
        ((string_of_list_10950) tl_10953))
    end

#[program]
def string_of_listL_89 :=
  fun string_of_list_10954 (__10955) ->
    match __10955 with
    | nilUL_22  => "nil"
    | consUL_23 hd_10956 tl_10957 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_10956) " :: ")
        ((string_of_list_10954) tl_10957))
    end

#[program]
def main :=
  let test_10958 := ((mklistL_85) 33) in
  let sorted_10959 := ((msortL_83) test_10958) in
  print ((string_of_listL_89) sorted_10959)

-----------------------------------------

def idU_40 := fun id_11205 (A_11206) -> (m_11207) -> m_11207

def idL_39 := fun id_11208 (A_11209) -> (m_11210) -> m_11210

def rwlUU_44 :=
  fun rwl_11211 (A_11212) -> (m_11213) -> (n_11214) -> (B_11215) ->
  (__11216) -> (__11217) -> __11217

def rwlUL_43 :=
  fun rwl_11218 (A_11219) -> (m_11220) -> (n_11221) -> (B_11222) ->
  (__11223) -> (__11224) -> __11224

def rwlLU_42 :=
  fun rwl_11225 (A_11226) -> (m_11227) -> (n_11228) -> (B_11229) ->
  (__11230) -> (__11231) -> __11231

def rwlLL_41 :=
  fun rwl_11232 (A_11233) -> (m_11234) -> (n_11235) -> (B_11236) ->
  (__11237) -> (__11238) -> __11238

def rwrUU_48 :=
  fun rwr_11239 (A_11240) -> (m_11241) -> (n_11242) -> (B_11243) ->
  (__11244) -> (__11245) -> __11245

def rwrUL_47 :=
  fun rwr_11246 (A_11247) -> (m_11248) -> (n_11249) -> (B_11250) ->
  (__11251) -> (__11252) -> __11252

def rwrLU_46 :=
  fun rwr_11253 (A_11254) -> (m_11255) -> (n_11256) -> (B_11257) ->
  (__11258) -> (__11259) -> __11259

def rwrLL_45 :=
  fun rwr_11260 (A_11261) -> (m_11262) -> (n_11263) -> (B_11264) ->
  (__11265) -> (__11266) -> __11266

def sing_elimUU_62 :=
  fun sing_elim_11267 (A_11268) -> (x_11269) -> (__11270) -> __11270

def sing_elimUL_61 :=
  fun sing_elim_11271 (A_11272) -> (x_11273) -> (__11274) -> __11274

def sing_elimLU_60 :=
  fun sing_elim_11275 (A_11276) -> (x_11277) -> (__11278) -> !!

def sing_elimLL_59 :=
  fun sing_elim_11279 (A_11280) -> (x_11281) -> (__11282) -> __11282

def not_10 :=
  fun not_11283 (__11284) ->
    match __11284 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_11285 (__11286) -> (__11287) ->
    match __11286 with
    | true_4 =>
      match __11287 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_11288 (__11289) -> (__11290) ->
    match __11289 with
    | true_4 => true_4
    | false_5 =>
      match __11290 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_11291 (__11292) -> (__11293) -o
    match __11292 with
    | true_4 =>
      match __11293 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __11293 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_11294 (__11295) -> (__11296) ->
    match __11295 with
    | zero_6  => true_4
    | succ_7 n_11297 =>
      match __11296 with
      | zero_6  => false_5 | succ_7 n_11298 => ((lte_11294) n_11297 n_11298)
      end
    end

def lt_15 :=
  fun lt_11299 (x_11300) -> (y_11301) -> ((lte_14) (succ_7 x_11300) y_11301)

def pred_16 :=
  fun pred_11302 (__11303) ->
    match __11303 with
    | zero_6  => (zero_6 ) | succ_7 n_11304 => n_11304
    end

def add_17 :=
  fun add_11305 (__11306) -> (__11307) ->
    match __11306 with
    | zero_6  => __11307
    | succ_7 n_11308 => (succ_7 ((add_11305) n_11308 __11307))
    end

def sub_18 :=
  fun sub_11309 (__11310) -> (__11311) ->
    match __11311 with
    | zero_6  => __11310
    | succ_7 n_11312 => ((sub_11309) ((pred_16) __11310) n_11312)
    end

def mul_19 :=
  fun mul_11313 (__11314) -> (__11315) ->
    match __11314 with
    | zero_6  => (zero_6 )
    | succ_7 n_11316 => ((add_17) __11315 ((mul_11313) n_11316 __11315))
    end

def div_20 :=
  fun div_11317 (x_11318) -> (y_11319) ->
    match ((lt_15) x_11318 y_11319) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_11320 :=
        fun loop_11321 (x_11322) -> (y_11323) ->
          match ((sub_18) x_11322 ((pred_16) y_11323)) with
          | zero_6  => (zero_6 )
          | succ_7 n_11324 => (succ_7 ((loop_11321) n_11324 y_11323))
          end
      in ((loop_11320) x_11318 y_11319)
    end

def rem_21 :=
  fun rem_11325 (x_11326) -> (y_11327) ->
    ((sub_18) x_11326 ((mul_19) ((div_20) x_11326 y_11327) y_11327))

def free_listUU_70 :=
  fun free_list_11328 (A_11329) -> (f_11330) -> (__11331) ->
    match __11331 with
    | nilUU_24  => tt_3
    | consUU_25 hd_11332 tl_11333 =>
      let __11334 := ((f_11330) hd_11332) in
      ((free_list_11328) NULL f_11330 tl_11333)
    end

def free_listUL_69 :=
  fun free_list_11335 (A_11336) -> (f_11337) -> (__11338) ->
    match __11338 with
    | nilUL_22  => tt_3
    | consUL_23 hd_11339 tl_11340 =>
      let __11341 := ((f_11337) hd_11339) in
      ((free_list_11335) NULL f_11337 tl_11340)
    end

def free_listLL_67 :=
  fun free_list_11342 (A_11343) -> (f_11344) -> (__11345) ->
    match __11345 with
    | nilLL_18  => tt_3
    | consLL_19 hd_11346 tl_11347 =>
      let __11348 := ((f_11344) hd_11346) in
      ((free_list_11342) NULL f_11344 tl_11347)
    end

def pow_25 :=
  fun pow_11349 (x_11350) -> (y_11351) ->
    let loop_11352 :=
      fun loop_11353 (acc_11354) -> (y_11355) ->
        match (__lte__ y_11355 0) with
        | true_4 => acc_11354
        | false_5 =>
          ((loop_11353) (__mul__ x_11350 acc_11354) (__sub__ y_11355 1))
        end
    in ((loop_11352) 1 y_11351)

def powm_26 :=
  fun powm_11356 (x_11357) -> (y_11358) -> (m_11359) ->
    let loop_11360 :=
      fun loop_11361 (acc_11362) -> (y_11363) ->
        match (__lte__ y_11363 0) with
        | true_4 => acc_11362
        | false_5 =>
          ((loop_11361)
            (__mod__ (__mul__ x_11357 acc_11362) m_11359) (__sub__ y_11363 1))
        end
    in ((loop_11360) 1 y_11358)

def ord_27 := fun ord_11364 (c_11365) -> (__ord__ c_11365)

def chr_28 := fun chr_11366 (i_11367) -> (__chr__ i_11367)

def str_29 := fun str_11368 (c_11369) -> (__push__ "" c_11369)

def strlen_30 := fun strlen_11370 (s_11371) -> (__size__ s_11371)

def string_of_int_31 :=
  fun string_of_int_11372 (i_11373) ->
    let aux_11374 :=
      fun aux_11375 (i_11376) ->
        match (__lte__ 10 i_11376) with
        | true_4 =>
          let r_11377 := (__mod__ i_11376 10) in
          let i_11378 := (__div__ i_11376 10) in
          (__push__ ((aux_11375) i_11378)
            ((chr_28) (__add__ r_11377 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_11376 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_11373) with
    | true_4 => ((aux_11374) i_11373)
    | false_5 => (__cat__ "~" ((aux_11374) (__neg__ i_11373)))
    end

def splitU_80 :=
  fun split_11379 (__11380) ->
    match __11380 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_11381 tl_11382 =>
      match tl_11382 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_11381 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_11383 tl_11384 =>
        match ((split_11379) tl_11384) with
        | ex1UU_33 m_11385 n_11386 =>
          (ex1UU_33
            (consUU_25 hd_11381 m_11385) (consUU_25 hd_11383 n_11386))
        end
      end
    end

def splitL_79 :=
  fun split_11387 (__11388) ->
    match __11388 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_11389 tl_11390 =>
      match tl_11390 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_11389 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_11391 tl_11392 =>
        match ((split_11387) tl_11392) with
        | ex1LL_30 m_11393 n_11394 =>
          (ex1LL_30
            (consUL_23 hd_11389 m_11393) (consUL_23 hd_11391 n_11394))
        end
      end
    end

def mergeU_82 :=
  fun merge_11395 (__11396) -> (__11397) -o
    match __11396 with
    | nilUU_24  => __11397
    | consUU_25 hd_11398 tl_11399 =>
      match __11397 with
      | nilUU_24  => (consUU_25 hd_11398 tl_11399)
      | consUU_25 hd_11400 tl_11401 =>
        match (__lte__ hd_11398 hd_11400) with
        | true_4 =>
          (consUU_25
            hd_11398 ((merge_11395) tl_11399 (consUU_25 hd_11400 tl_11401)))
        | false_5 =>
          (consUU_25
            hd_11400 ((merge_11395) (consUU_25 hd_11398 tl_11399) tl_11401))
        end
      end
    end

def mergeL_81 :=
  fun merge_11402 (__11403) -> (__11404) -o
    match __11403 with
    | nilUL_22  => __11404
    | consUL_23 hd_11405 tl_11406 =>
      match __11404 with
      | nilUL_22  => (consUL_23 hd_11405 tl_11406)
      | consUL_23 hd_11407 tl_11408 =>
        match (__lte__ hd_11405 hd_11407) with
        | true_4 =>
          (consUL_23
            hd_11405 ((merge_11402) tl_11406 (consUL_23 hd_11407 tl_11408)))
        | false_5 =>
          (consUL_23
            hd_11407 ((merge_11402) (consUL_23 hd_11405 tl_11406) tl_11408))
        end
      end
    end

def msortU_84 :=
  fun msort_11409 (__11410) ->
    match __11410 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_11411 tl_11412 =>
      match tl_11412 with
      | nilUU_24  => (consUU_25 hd_11411 (nilUU_24 ))
      | consUU_25 hd_11413 tl_11414 =>
        match ((splitU_80)
                (consUU_25 hd_11411 (consUU_25 hd_11413 tl_11414))) with
        | ex1UU_33 m_11415 n_11416 =>
          ((mergeU_82) ((msort_11409) m_11415) ((msort_11409) n_11416))
        end
      end
    end

def msortL_83 :=
  fun msort_11417 (__11418) ->
    match __11418 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_11419 tl_11420 =>
      match tl_11420 with
      | nilUL_22  => (consUL_23 hd_11419 (nilUL_22 ))
      | consUL_23 hd_11421 tl_11422 =>
        match ((splitL_79)
                (consUL_23 hd_11419 (consUL_23 hd_11421 tl_11422))) with
        | ex1LL_30 m_11423 n_11424 =>
          ((mergeL_81) ((msort_11417) m_11423) ((msort_11417) n_11424))
        end
      end
    end

def mklistU_86 :=
  fun mklist_11425 (n_11426) ->
    match (__lte__ n_11426 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_11426 ((mklist_11425) (__sub__ n_11426 1)))
    end

def mklistL_85 :=
  fun mklist_11427 (n_11428) ->
    match (__lte__ n_11428 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_11428 ((mklist_11427) (__sub__ n_11428 1)))
    end

def list_lenU_88 :=
  fun list_len_11429 (__11430) ->
    match __11430 with
    | nilUU_24  => 0
    | consUU_25 hd_11431 tl_11432 => (__add__ 1 ((list_len_11429) tl_11432))
    end

def list_lenL_87 :=
  fun list_len_11433 (__11434) ->
    match __11434 with
    | nilUL_22  => 0
    | consUL_23 hd_11435 tl_11436 => (__add__ 1 ((list_len_11433) tl_11436))
    end

def string_of_listU_90 :=
  fun string_of_list_11437 (__11438) ->
    match __11438 with
    | nilUU_24  => "nil"
    | consUU_25 hd_11439 tl_11440 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_11439) " :: ")
        ((string_of_list_11437) tl_11440))
    end

def string_of_listL_89 :=
  fun string_of_list_11441 (__11442) ->
    match __11442 with
    | nilUL_22  => "nil"
    | consUL_23 hd_11443 tl_11444 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_11443) " :: ")
        ((string_of_list_11441) tl_11444))
    end

def main :=
  let test_11445 := ((mklistL_85) 33) in
  let sorted_11446 := ((msortL_83) test_11445) in
  lazy(print ((string_of_listL_89) sorted_11446))

-----------------------------------------

def idU_40 := lam (A_11689) -> (m_11690) -> m_11690

def idL_39 := lam (A_11691) -> (m_11692) -> m_11692

def rwlUU_44 :=
  lam (A_11693) -> (m_11694) -> (n_11695) -> (B_11696) -> (__11697) ->
  (__11698) -> __11698

def rwlUL_43 :=
  lam (A_11699) -> (m_11700) -> (n_11701) -> (B_11702) -> (__11703) ->
  (__11704) -> __11704

def rwlLU_42 :=
  lam (A_11705) -> (m_11706) -> (n_11707) -> (B_11708) -> (__11709) ->
  (__11710) -> __11710

def rwlLL_41 :=
  lam (A_11711) -> (m_11712) -> (n_11713) -> (B_11714) -> (__11715) ->
  (__11716) -> __11716

def rwrUU_48 :=
  lam (A_11717) -> (m_11718) -> (n_11719) -> (B_11720) -> (__11721) ->
  (__11722) -> __11722

def rwrUL_47 :=
  lam (A_11723) -> (m_11724) -> (n_11725) -> (B_11726) -> (__11727) ->
  (__11728) -> __11728

def rwrLU_46 :=
  lam (A_11729) -> (m_11730) -> (n_11731) -> (B_11732) -> (__11733) ->
  (__11734) -> __11734

def rwrLL_45 :=
  lam (A_11735) -> (m_11736) -> (n_11737) -> (B_11738) -> (__11739) ->
  (__11740) -> __11740

def sing_elimUU_62 := lam (A_11741) -> (x_11742) -> (__11743) -> __11743

def sing_elimUL_61 := lam (A_11744) -> (x_11745) -> (__11746) -> __11746

def sing_elimLU_60 := lam (A_11747) -> (x_11748) -> (__11749) -> !!

def sing_elimLL_59 := lam (A_11750) -> (x_11751) -> (__11752) -> __11752

def not_10 :=
  lam (__11753) ->
    match __11753 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__11754) -> (__11755) ->
    match __11754 with
    | true_4 =>
      match __11755 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__11756) -> (__11757) ->
    match __11756 with
    | true_4 => true_4
    | false_5 =>
      match __11757 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__11758) -> (__11759) -o
    match __11758 with
    | true_4 =>
      match __11759 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __11759 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_11760 (__11761) -> (__11762) ->
    match __11761 with
    | zero_6  => true_4
    | succ_7 n_11763 =>
      match __11762 with
      | zero_6  => false_5 | succ_7 n_11764 => ((lte_11760) n_11763 n_11764)
      end
    end

def lt_15 :=
  lam (x_11765) -> (y_11766) -> ((lte_14) (succ_7 x_11765) y_11766)

def pred_16 :=
  lam (__11767) ->
    match __11767 with
    | zero_6  => (zero_6 ) | succ_7 n_11768 => n_11768
    end

def add_17 :=
  fun add_11769 (__11770) -> (__11771) ->
    match __11770 with
    | zero_6  => __11771
    | succ_7 n_11772 => (succ_7 ((add_11769) n_11772 __11771))
    end

def sub_18 :=
  fun sub_11773 (__11774) -> (__11775) ->
    match __11775 with
    | zero_6  => __11774
    | succ_7 n_11776 => ((sub_11773) ((pred_16) __11774) n_11776)
    end

def mul_19 :=
  fun mul_11777 (__11778) -> (__11779) ->
    match __11778 with
    | zero_6  => (zero_6 )
    | succ_7 n_11780 => ((add_17) __11779 ((mul_11777) n_11780 __11779))
    end

def div_20 :=
  lam (x_11781) -> (y_11782) ->
    match ((lt_15) x_11781 y_11782) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_11783 :=
        fun loop_11784 (x_11785) -> (y_11786) ->
          match ((sub_18) x_11785 ((pred_16) y_11786)) with
          | zero_6  => (zero_6 )
          | succ_7 n_11787 => (succ_7 ((loop_11784) n_11787 y_11786))
          end
      in ((loop_11783) x_11781 y_11782)
    end

def rem_21 :=
  lam (x_11788) -> (y_11789) ->
    ((sub_18) x_11788 ((mul_19) ((div_20) x_11788 y_11789) y_11789))

def free_listUU_70 :=
  fun free_list_11790 (A_11791) -> (f_11792) -> (__11793) ->
    match __11793 with
    | nilUU_24  => tt_3
    | consUU_25 hd_11794 tl_11795 =>
      let __11796 := ((f_11792) hd_11794) in
      ((free_list_11790) NULL f_11792 tl_11795)
    end

def free_listUL_69 :=
  fun free_list_11797 (A_11798) -> (f_11799) -> (__11800) ->
    match __11800 with
    | nilUL_22  => tt_3
    | consUL_23 hd_11801 tl_11802 =>
      let __11803 := ((f_11799) hd_11801) in
      ((free_list_11797) NULL f_11799 tl_11802)
    end

def free_listLL_67 :=
  fun free_list_11804 (A_11805) -> (f_11806) -> (__11807) ->
    match __11807 with
    | nilLL_18  => tt_3
    | consLL_19 hd_11808 tl_11809 =>
      let __11810 := ((f_11806) hd_11808) in
      ((free_list_11804) NULL f_11806 tl_11809)
    end

def pow_25 :=
  lam (x_11811) -> (y_11812) ->
    let loop_11813 :=
      fun loop_11814 (acc_11815) -> (y_11816) ->
        match (__lte__ y_11816 0) with
        | true_4 => acc_11815
        | false_5 =>
          ((loop_11814) (__mul__ x_11811 acc_11815) (__sub__ y_11816 1))
        end
    in ((loop_11813) 1 y_11812)

def powm_26 :=
  lam (x_11817) -> (y_11818) -> (m_11819) ->
    let loop_11820 :=
      fun loop_11821 (acc_11822) -> (y_11823) ->
        match (__lte__ y_11823 0) with
        | true_4 => acc_11822
        | false_5 =>
          ((loop_11821)
            (__mod__ (__mul__ x_11817 acc_11822) m_11819) (__sub__ y_11823 1))
        end
    in ((loop_11820) 1 y_11818)

def ord_27 := lam (c_11824) -> (__ord__ c_11824)

def chr_28 := lam (i_11825) -> (__chr__ i_11825)

def str_29 := lam (c_11826) -> (__push__ "" c_11826)

def strlen_30 := lam (s_11827) -> (__size__ s_11827)

def string_of_int_31 :=
  lam (i_11828) ->
    let aux_11829 :=
      fun aux_11830 (i_11831) ->
        match (__lte__ 10 i_11831) with
        | true_4 =>
          let r_11832 := (__mod__ i_11831 10) in
          let i_11833 := (__div__ i_11831 10) in
          (__push__ ((aux_11830) i_11833)
            ((chr_28) (__add__ r_11832 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_11831 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_11828) with
    | true_4 => ((aux_11829) i_11828)
    | false_5 => (__cat__ "~" ((aux_11829) (__neg__ i_11828)))
    end

def splitU_80 :=
  fun split_11834 (__11835) ->
    match __11835 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_11836 tl_11837 =>
      match tl_11837 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_11836 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_11838 tl_11839 =>
        match ((split_11834) tl_11839) with
        | ex1UU_33 m_11840 n_11841 =>
          (ex1UU_33
            (consUU_25 hd_11836 m_11840) (consUU_25 hd_11838 n_11841))
        end
      end
    end

def splitL_79 :=
  fun split_11842 (__11843) ->
    match __11843 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_11844 tl_11845 =>
      match tl_11845 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_11844 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_11846 tl_11847 =>
        match ((split_11842) tl_11847) with
        | ex1LL_30 m_11848 n_11849 =>
          (ex1LL_30
            (consUL_23 hd_11844 m_11848) (consUL_23 hd_11846 n_11849))
        end
      end
    end

def mergeU_82 :=
  fun merge_11850 (__11851) -> (__11852) -o
    match __11851 with
    | nilUU_24  => __11852
    | consUU_25 hd_11853 tl_11854 =>
      match __11852 with
      | nilUU_24  => (consUU_25 hd_11853 tl_11854)
      | consUU_25 hd_11855 tl_11856 =>
        match (__lte__ hd_11853 hd_11855) with
        | true_4 =>
          (consUU_25
            hd_11853 ((merge_11850) tl_11854 (consUU_25 hd_11855 tl_11856)))
        | false_5 =>
          (consUU_25
            hd_11855 ((merge_11850) (consUU_25 hd_11853 tl_11854) tl_11856))
        end
      end
    end

def mergeL_81 :=
  fun merge_11857 (__11858) -> (__11859) -o
    match __11858 with
    | nilUL_22  => __11859
    | consUL_23 hd_11860 tl_11861 =>
      match __11859 with
      | nilUL_22  => (consUL_23 hd_11860 tl_11861)
      | consUL_23 hd_11862 tl_11863 =>
        match (__lte__ hd_11860 hd_11862) with
        | true_4 =>
          (consUL_23
            hd_11860 ((merge_11857) tl_11861 (consUL_23 hd_11862 tl_11863)))
        | false_5 =>
          (consUL_23
            hd_11862 ((merge_11857) (consUL_23 hd_11860 tl_11861) tl_11863))
        end
      end
    end

def msortU_84 :=
  fun msort_11864 (__11865) ->
    match __11865 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_11866 tl_11867 =>
      match tl_11867 with
      | nilUU_24  => (consUU_25 hd_11866 (nilUU_24 ))
      | consUU_25 hd_11868 tl_11869 =>
        match ((splitU_80)
                (consUU_25 hd_11866 (consUU_25 hd_11868 tl_11869))) with
        | ex1UU_33 m_11870 n_11871 =>
          ((mergeU_82) ((msort_11864) m_11870) ((msort_11864) n_11871))
        end
      end
    end

def msortL_83 :=
  fun msort_11872 (__11873) ->
    match __11873 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_11874 tl_11875 =>
      match tl_11875 with
      | nilUL_22  => (consUL_23 hd_11874 (nilUL_22 ))
      | consUL_23 hd_11876 tl_11877 =>
        match ((splitL_79)
                (consUL_23 hd_11874 (consUL_23 hd_11876 tl_11877))) with
        | ex1LL_30 m_11878 n_11879 =>
          ((mergeL_81) ((msort_11872) m_11878) ((msort_11872) n_11879))
        end
      end
    end

def mklistU_86 :=
  fun mklist_11880 (n_11881) ->
    match (__lte__ n_11881 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_11881 ((mklist_11880) (__sub__ n_11881 1)))
    end

def mklistL_85 :=
  fun mklist_11882 (n_11883) ->
    match (__lte__ n_11883 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_11883 ((mklist_11882) (__sub__ n_11883 1)))
    end

def list_lenU_88 :=
  fun list_len_11884 (__11885) ->
    match __11885 with
    | nilUU_24  => 0
    | consUU_25 hd_11886 tl_11887 => (__add__ 1 ((list_len_11884) tl_11887))
    end

def list_lenL_87 :=
  fun list_len_11888 (__11889) ->
    match __11889 with
    | nilUL_22  => 0
    | consUL_23 hd_11890 tl_11891 => (__add__ 1 ((list_len_11888) tl_11891))
    end

def string_of_listU_90 :=
  fun string_of_list_11892 (__11893) ->
    match __11893 with
    | nilUU_24  => "nil"
    | consUU_25 hd_11894 tl_11895 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_11894) " :: ")
        ((string_of_list_11892) tl_11895))
    end

def string_of_listL_89 :=
  fun string_of_list_11896 (__11897) ->
    match __11897 with
    | nilUL_22  => "nil"
    | consUL_23 hd_11898 tl_11899 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_11898) " :: ")
        ((string_of_list_11896) tl_11899))
    end

def main :=
  let test_11900 := ((mklistL_85) 33) in
  let sorted_11901 := ((msortL_83) test_11900) in
  lazy(print ((string_of_listL_89) sorted_11901))

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := mkconstr(consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := mkconstr(nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := mkconstr(consUL_23, [hd_292, m_303]);
              x_306 := mkconstr(consUL_23, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := mkconstr(consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := mkconstr(nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := mkconstr(nilUL_22, []);
          x_372 := mkconstr(consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_23, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn mklistU_384(n_385%U) {
  x_387 := lte(n_385, 0);
  match(x_387){
    true_4() => {
      x_388 := mkconstr(nilUU_24, []);
      x_386 := x_388;
    }
    false_5() => {
      x_390 := sub(n_385, 1);
      x_389 := mklistU_384(x_390);
      x_391 := mkconstr(consUU_25, [n_385, x_389]);
      x_386 := x_391;
    }
  }
  return x_386;
}

fn mklistL_392(n_393%U) {
  x_395 := lte(n_393, 0);
  match(x_395){
    true_4() => {
      x_396 := mkconstr(nilUL_22, []);
      x_394 := x_396;
    }
    false_5() => {
      x_398 := sub(n_393, 1);
      x_397 := mklistL_392(x_398);
      x_399 := mkconstr(consUL_23, [n_393, x_397]);
      x_394 := x_399;
    }
  }
  return x_394;
}

fn list_lenU_400(__401%U) {
  match[U](__401){
    nilUU_24() => {
      x_402 := 0;
    }
    consUU_25(hd_403, tl_404) => {
      x_406 := list_lenU_400(tl_404);
      x_405 := add(1, x_406);
      x_402 := x_405;
    }
  }
  return x_402;
}

fn list_lenL_407(__408%U) {
  match[L](__408){
    nilUL_22() => {
      x_409 := 0;
    }
    consUL_23(hd_410, tl_411) => {
      x_413 := list_lenL_407(tl_411);
      x_412 := add(1, x_413);
      x_409 := x_412;
    }
  }
  return x_409;
}

fn string_of_listU_414(__415%U) {
  match[U](__415){
    nilUU_24() => {
      x_417 := str("nil");
      x_416 := x_417;
    }
    consUU_25(hd_418, tl_419) => {
      x_422 := string_of_int_236(hd_418);
      x_423 := str(" :: ");
      x_421 := cat(x_422, x_423);
      x_424 := string_of_listU_414(tl_419);
      x_420 := cat(x_421, x_424);
      x_416 := x_420;
    }
  }
  return x_416;
}

fn string_of_listL_425(__426%U) {
  match[L](__426){
    nilUL_22() => {
      x_428 := str("nil");
      x_427 := x_428;
    }
    consUL_23(hd_429, tl_430) => {
      x_433 := string_of_int_236(hd_429);
      x_434 := str(" :: ");
      x_432 := cat(x_433, x_434);
      x_435 := string_of_listL_425(tl_430);
      x_431 := cat(x_432, x_435);
      x_427 := x_431;
    }
  }
  return x_427;
}

main := {
  x_437 := mklistL_392(33);
  test_436 := x_437;
  x_439 := msortL_364(test_436);
  sorted_438 := x_439;
  x_440 :=
    lazy {
      x_442 := string_of_listL_425(sorted_438);
      x_441 := print(x_442);
      return x_441;
    };
  return x_440;
};

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := reconstr(__287, nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := reconstr(tl_293, nilUL_22, []);
          x_296 := reconstr(__287, consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_23, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_23, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
      free(__327);
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := reconstr(__327, consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := reconstr(__365, nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := reconstr(tl_369, nilUL_22, []);
          x_372 := reconstr(__365, consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_23, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn mklistU_384(n_385%U) {
  x_387 := lte(n_385, 0);
  match(x_387){
    true_4() => {
      x_388 := mkconstr(nilUU_24, []);
      x_386 := x_388;
    }
    false_5() => {
      x_390 := sub(n_385, 1);
      x_389 := mklistU_384(x_390);
      x_391 := mkconstr(consUU_25, [n_385, x_389]);
      x_386 := x_391;
    }
  }
  return x_386;
}

fn mklistL_392(n_393%U) {
  x_395 := lte(n_393, 0);
  match(x_395){
    true_4() => {
      x_396 := mkconstr(nilUL_22, []);
      x_394 := x_396;
    }
    false_5() => {
      x_398 := sub(n_393, 1);
      x_397 := mklistL_392(x_398);
      x_399 := mkconstr(consUL_23, [n_393, x_397]);
      x_394 := x_399;
    }
  }
  return x_394;
}

fn list_lenU_400(__401%U) {
  match[U](__401){
    nilUU_24() => {
      x_402 := 0;
    }
    consUU_25(hd_403, tl_404) => {
      x_406 := list_lenU_400(tl_404);
      x_405 := add(1, x_406);
      x_402 := x_405;
    }
  }
  return x_402;
}

fn list_lenL_407(__408%U) {
  match[L](__408){
    nilUL_22() => {
      x_409 := 0;
      free(__408);
    }
    consUL_23(hd_410, tl_411) => {
      x_413 := list_lenL_407(tl_411);
      x_412 := add(1, x_413);
      x_409 := x_412;
      free(__408);
    }
  }
  return x_409;
}

fn string_of_listU_414(__415%U) {
  match[U](__415){
    nilUU_24() => {
      x_417 := str("nil");
      x_416 := x_417;
    }
    consUU_25(hd_418, tl_419) => {
      x_422 := string_of_int_236(hd_418);
      x_423 := str(" :: ");
      x_421 := cat(x_422, x_423);
      x_424 := string_of_listU_414(tl_419);
      x_420 := cat(x_421, x_424);
      x_416 := x_420;
    }
  }
  return x_416;
}

fn string_of_listL_425(__426%U) {
  match[L](__426){
    nilUL_22() => {
      x_428 := str("nil");
      x_427 := x_428;
      free(__426);
    }
    consUL_23(hd_429, tl_430) => {
      x_433 := string_of_int_236(hd_429);
      x_434 := str(" :: ");
      x_432 := cat(x_433, x_434);
      x_435 := string_of_listL_425(tl_430);
      x_431 := cat(x_432, x_435);
      x_427 := x_431;
      free(__426);
    }
  }
  return x_427;
}

main := {
  x_437 := mklistL_392(33);
  test_436 := x_437;
  x_439 := msortL_364(test_436);
  sorted_438 := x_439;
  x_440 :=
    lazy {
      x_442 := string_of_listL_425(sorted_438);
      x_441 := print(x_442);
      return x_441;
    };
  return x_440;
};

-----------------------------------------

fn fn0_idU_443(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_444(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_445 := fn0_idU_443(A_2, m_3);
  return x_445;
}

fn fn0_idL_446(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_447(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_448 := fn0_idL_446(A_5, m_6);
  return x_448;
}

fn fn0_rwlUU_449(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_450(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_451 := fn0_rwlUU_449(A_8, m_9, n_10, B_11, __12, __13);
  return x_451;
}

fn fn0_rwlUL_452(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_453(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_454 := fn0_rwlUL_452(A_15, m_16, n_17, B_18, __19, __20);
  return x_454;
}

fn fn0_rwlLU_455(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_456(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_457 := fn0_rwlLU_455(A_22, m_23, n_24, B_25, __26, __27);
  return x_457;
}

fn fn0_rwlLL_458(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_459(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_460 := fn0_rwlLL_458(A_29, m_30, n_31, B_32, __33, __34);
  return x_460;
}

fn fn0_rwrUU_461(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_462(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_463 := fn0_rwrUU_461(A_36, m_37, n_38, B_39, __40, __41);
  return x_463;
}

fn fn0_rwrUL_464(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_465(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_466 := fn0_rwrUL_464(A_43, m_44, n_45, B_46, __47, __48);
  return x_466;
}

fn fn0_rwrLU_467(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_468(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_469 := fn0_rwrLU_467(A_50, m_51, n_52, B_53, __54, __55);
  return x_469;
}

fn fn0_rwrLL_470(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_471(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_472 := fn0_rwrLL_470(A_57, m_58, n_59, B_60, __61, __62);
  return x_472;
}

fn fn0_sing_elimUU_473(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_474(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_475 := fn0_sing_elimUU_473(A_64, x_65, __66);
  return x_475;
}

fn fn0_sing_elimUL_476(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_477(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_478 := fn0_sing_elimUL_476(A_68, x_69, __70);
  return x_478;
}

fn fn0_sing_elimLU_479(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_480(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_481 := fn0_sing_elimLU_479(A_72, x_73, __74);
  return x_481;
}

fn fn0_sing_elimLL_482(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_483(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_484 := fn0_sing_elimLL_482(A_76, x_77, __78);
  return x_484;
}

fn fn0_not_485(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_486(env) {
  __80 := env[1];
  x_487 := fn0_not_485(__80);
  return x_487;
}

fn fn0_and_488(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_489(env) {
  __83 := env[1];
  __84 := env[2];
  x_490 := fn0_and_488(__83, __84);
  return x_490;
}

fn fn0_or_491(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_492(env) {
  __88 := env[1];
  __89 := env[2];
  x_493 := fn0_or_491(__88, __89);
  return x_493;
}

fn fn0_xor_494(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_495(env) {
  __93 := env[1];
  __94 := env[2];
  x_496 := fn0_xor_494(__93, __94);
  return x_496;
}

fn fn0_lte_497(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_497(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_498(env) {
  __99 := env[1];
  __100 := env[2];
  x_499 := fn0_lte_497(__99, __100);
  return x_499;
}

fn fn0_lt_500(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_497(x_110, y_108);
  return x_109;
}

fn fn1_lt_501(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_502 := fn0_lt_500(x_107, y_108);
  return x_502;
}

fn fn0_pred_503(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_504(env) {
  __112 := env[1];
  x_505 := fn0_pred_503(__112);
  return x_505;
}

fn fn0_add_506(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_506(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_507(env) {
  __117 := env[1];
  __118 := env[2];
  x_508 := fn0_add_506(__117, __118);
  return x_508;
}

fn fn0_sub_509(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_503(__124);
      x_128 := fn0_sub_509(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_510(env) {
  __124 := env[1];
  __125 := env[2];
  x_511 := fn0_sub_509(__124, __125);
  return x_511;
}

fn fn0_mul_512(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_512(n_135, __132);
      x_136 := fn0_add_506(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_513(env) {
  __131 := env[1];
  __132 := env[2];
  x_514 := fn0_mul_512(__131, __132);
  return x_514;
}

fn fn0_div_515(x_139, y_140) {
  x_142 := fn0_lt_500(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_517, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_521, loop_144, x_139);
      appc(x_522, x_521, y_140);
      move1(x_156, x_522);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_516(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_524 := fn0_div_515(x_139, y_140);
  return x_524;
}

fn fn0_rem_525(x_158, y_159) {
  x_162 := fn0_div_515(x_158, y_159);
  x_161 := fn0_mul_512(x_162, y_159);
  x_160 := fn0_sub_509(x_158, x_161);
  return x_160;
}

fn fn1_rem_526(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_527 := fn0_rem_525(x_158, y_159);
  return x_527;
}

fn fn0_free_listUU_528(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_530, f_165, hd_168);
      move1(x_171, x_530);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_528(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_529(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_532 := fn0_free_listUU_528(A_164, f_165, __166);
  return x_532;
}

fn fn0_free_listUL_533(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_535, f_175, hd_178);
      move1(x_181, x_535);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_533(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_534(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_537 := fn0_free_listUL_533(A_174, f_175, __176);
  return x_537;
}

fn fn0_free_listLL_538(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_540, f_185, hd_188);
      move1(x_191, x_540);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_538(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_539(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_542 := fn0_free_listLL_538(A_184, f_185, __186);
  return x_542;
}

fn fn0_pow_543(x_194, y_195) {
  mkclo1(x_197, fn1_loop_545, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_549, loop_196, 1);
  appc(x_550, x_549, y_195);
  move1(x_206, x_550);
  return x_206;
}

fn fn1_pow_544(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_552 := fn0_pow_543(x_194, y_195);
  return x_552;
}

fn fn0_powm_553(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_555, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_559, loop_211, 1);
  appc(x_560, x_559, y_209);
  move1(x_222, x_560);
  return x_222;
}

fn fn1_powm_554(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_562 := fn0_powm_553(x_208, y_209, m_210);
  return x_562;
}

fn fn0_ord_563(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_564(env) {
  c_224 := env[1];
  x_565 := fn0_ord_563(c_224);
  return x_565;
}

fn fn0_chr_566(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_567(env) {
  i_227 := env[1];
  x_568 := fn0_chr_566(i_227);
  return x_568;
}

fn fn0_str_569(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_570(env) {
  c_230 := env[1];
  x_571 := fn0_str_569(c_230);
  return x_571;
}

fn fn0_strlen_572(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_573(env) {
  s_234 := env[1];
  x_574 := fn0_strlen_572(s_234);
  return x_574;
}

fn fn0_string_of_int_575(i_237) {
  mkclo1(x_239, fn1_aux_577, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lt(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_580, aux_238, i_237);
      move1(x_259, x_580);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_582, aux_238, x_263);
      move1(x_262, x_582);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_576(env) {
  i_237 := env[1];
  x_584 := fn0_string_of_int_575(i_237);
  return x_584;
}

fn fn0_splitU_585(__265) {
  switch(ctagof(__265)){
    nilUU_24 => {
      mkbox(x_267, nilUU_24, 0);
      mkbox(x_268, nilUU_24, 0);
      mkbox(x_269, ex1UU_33, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_25 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_24 => {
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, consUU_25, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_24, 0);
          mkbox(x_276, ex1UU_33, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_25 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_585(tl_278);
          switch(ctagof(x_280)){
            ex1UU_33 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_25);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_25, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_33, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_586(env) {
  __265 := env[1];
  x_587 := fn0_splitU_585(__265);
  return x_587;
}

fn fn0_splitL_588(__287) {
  switch(ctagof(__287)){
    nilUL_22 => {
      rebox(x_289, __287, nilUL_22);
      mkbox(x_290, nilUL_22, 0);
      mkbox(x_291, ex1LL_30, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_23 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_22 => {
          rebox(x_295, tl_293, nilUL_22);
          rebox(x_296, __287, consUL_23);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_22, 0);
          mkbox(x_298, ex1LL_30, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_23 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_588(tl_300);
          switch(ctagof(x_302)){
            ex1LL_30 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_23);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_23);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_30);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_589(env) {
  __287 := env[1];
  x_590 := fn0_splitL_588(__287);
  return x_590;
}

fn fn0_mergeU_591(__309, __310) {
  switch(ctagof(__309)){
    nilUU_24 => {
      move1(x_311, __310);
      break;
    }
    consUU_25 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_24 => {
          mkbox(x_315, consUU_25, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_25 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_25, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_591(tl_313, x_321);
              mkbox(x_322, consUU_25, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_25, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_591(x_324, tl_317);
              mkbox(x_325, consUU_25, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_592(env) {
  __309 := env[1];
  __310 := env[2];
  x_593 := fn0_mergeU_591(__309, __310);
  return x_593;
}

fn fn0_mergeL_594(__327, __328) {
  switch(ctagof(__327)){
    nilUL_22 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_23 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_22 => {
          rebox(x_333, __327, consUL_23);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_23 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_23);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_594(tl_331, x_339);
              rebox(x_340, __327, consUL_23);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_23);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_594(x_342, tl_335);
              rebox(x_343, __327, consUL_23);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_595(env) {
  __327 := env[1];
  __328 := env[2];
  x_596 := fn0_mergeL_594(__327, __328);
  return x_596;
}

fn fn0_msortU_597(__345) {
  switch(ctagof(__345)){
    nilUU_24 => {
      mkbox(x_347, nilUU_24, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_25 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_24 => {
          mkbox(x_351, nilUU_24, 0);
          mkbox(x_352, consUU_25, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_25 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_25, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_25, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_585(x_358);
          switch(ctagof(x_356)){
            ex1UU_33 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_597(m_359);
              x_363 := fn0_msortU_597(n_360);
              x_361 := fn0_mergeU_591(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_598(env) {
  __345 := env[1];
  x_599 := fn0_msortU_597(__345);
  return x_599;
}

fn fn0_msortL_600(__365) {
  switch(ctagof(__365)){
    nilUL_22 => {
      rebox(x_367, __365, nilUL_22);
      move1(x_366, x_367);
      break;
    }
    consUL_23 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_22 => {
          rebox(x_371, tl_369, nilUL_22);
          rebox(x_372, __365, consUL_23);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_23 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_23);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_23);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_588(x_378);
          switch(ctagof(x_376)){
            ex1LL_30 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_600(m_379);
              x_383 := fn0_msortL_600(n_380);
              x_381 := fn0_mergeL_594(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_601(env) {
  __365 := env[1];
  x_602 := fn0_msortL_600(__365);
  return x_602;
}

fn fn0_mklistU_603(n_385) {
  lte(x_387, n_385, 0);
  switch(x_387){
    true_4 => {
      mkbox(x_388, nilUU_24, 0);
      move1(x_386, x_388);
      break;
    }
    false_5 => {
      sub(x_390, n_385, 1);
      x_389 := fn0_mklistU_603(x_390);
      mkbox(x_391, consUU_25, 2);
      setbox(x_391, n_385, 0);
      setbox(x_391, x_389, 1);
      move1(x_386, x_391);
      break;
    }
  }
  return x_386;
}

fn fn1_mklistU_604(env) {
  n_385 := env[1];
  x_605 := fn0_mklistU_603(n_385);
  return x_605;
}

fn fn0_mklistL_606(n_393) {
  lte(x_395, n_393, 0);
  switch(x_395){
    true_4 => {
      mkbox(x_396, nilUL_22, 0);
      move1(x_394, x_396);
      break;
    }
    false_5 => {
      sub(x_398, n_393, 1);
      x_397 := fn0_mklistL_606(x_398);
      mkbox(x_399, consUL_23, 2);
      setbox(x_399, n_393, 0);
      setbox(x_399, x_397, 1);
      move1(x_394, x_399);
      break;
    }
  }
  return x_394;
}

fn fn1_mklistL_607(env) {
  n_393 := env[1];
  x_608 := fn0_mklistL_606(n_393);
  return x_608;
}

fn fn0_list_lenU_609(__401) {
  switch(ctagof(__401)){
    nilUU_24 => {
      move1(x_402, 0);
      break;
    }
    consUU_25 => {
      getbox(hd_403, __401, 0);
      getbox(tl_404, __401, 1);
      x_406 := fn0_list_lenU_609(tl_404);
      add(x_405, 1, x_406);
      move1(x_402, x_405);
      break;
    }
  }
  return x_402;
}

fn fn1_list_lenU_610(env) {
  __401 := env[1];
  x_611 := fn0_list_lenU_609(__401);
  return x_611;
}

fn fn0_list_lenL_612(__408) {
  switch(ctagof(__408)){
    nilUL_22 => {
      move1(x_409, 0);
      free(__408);
      break;
    }
    consUL_23 => {
      getbox(hd_410, __408, 0);
      getbox(tl_411, __408, 1);
      x_413 := fn0_list_lenL_612(tl_411);
      add(x_412, 1, x_413);
      move1(x_409, x_412);
      free(__408);
      break;
    }
  }
  return x_409;
}

fn fn1_list_lenL_613(env) {
  __408 := env[1];
  x_614 := fn0_list_lenL_612(__408);
  return x_614;
}

fn fn0_string_of_listU_615(__415) {
  switch(ctagof(__415)){
    nilUU_24 => {
      str(x_417, "nil")
      move1(x_416, x_417);
      break;
    }
    consUU_25 => {
      getbox(hd_418, __415, 0);
      getbox(tl_419, __415, 1);
      x_422 := fn0_string_of_int_575(hd_418);
      str(x_423, " :: ")
      cat(x_421, x_422, x_423);
      x_424 := fn0_string_of_listU_615(tl_419);
      cat(x_420, x_421, x_424);
      move1(x_416, x_420);
      break;
    }
  }
  return x_416;
}

fn fn1_string_of_listU_616(env) {
  __415 := env[1];
  x_617 := fn0_string_of_listU_615(__415);
  return x_617;
}

fn fn0_string_of_listL_618(__426) {
  switch(ctagof(__426)){
    nilUL_22 => {
      str(x_428, "nil")
      move1(x_427, x_428);
      free(__426);
      break;
    }
    consUL_23 => {
      getbox(hd_429, __426, 0);
      getbox(tl_430, __426, 1);
      x_433 := fn0_string_of_int_575(hd_429);
      str(x_434, " :: ")
      cat(x_432, x_433, x_434);
      x_435 := fn0_string_of_listL_618(tl_430);
      cat(x_431, x_432, x_435);
      move1(x_427, x_431);
      free(__426);
      break;
    }
  }
  return x_427;
}

fn fn1_string_of_listL_619(env) {
  __426 := env[1];
  x_620 := fn0_string_of_listL_618(__426);
  return x_620;
}

fn lazy__622(env) {
  string_of_listL_425 := env[0];
  sorted_438 := env[1];
  x_442 := fn0_string_of_listL_618(sorted_438);
  print(x_441, x_442);
  return x_441;
}

fn fn1_aux_577(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_578, aux_240, i_246);
      move1(x_249, x_578);
      x_252 := fn0_ord_563(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_566(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_563(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_566(x_255);
      x_253 := fn0_str_569(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_555(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_556, loop_213, x_219);
      appc(x_557, x_556, x_221);
      move1(x_218, x_557);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_545(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_546, loop_198, x_204);
      appc(x_547, x_546, x_205);
      move1(x_203, x_547);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_517(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_503(y_148);
  x_150 := fn0_sub_509(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_518, loop_146, n_153);
      appc(x_519, x_518, y_148);
      move1(x_154, x_519);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_444, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_447, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_450, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_453, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_456, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_459, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_462, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_465, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_468, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_471, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_474, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_477, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_480, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_483, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_486, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_489, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_492, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_495, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_498, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_501, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_504, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_507, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_510, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_513, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_516, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_526, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_529, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_534, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_539, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_544, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_554, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_564, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_567, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_570, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_573, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_576, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_586, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_589, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_592, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_595, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_598, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_601, fvc:=0, argc:=1);
  mkclo0(mklistU_384, fn1_mklistU_604, fvc:=0, argc:=1);
  mkclo0(mklistL_392, fn1_mklistL_607, fvc:=0, argc:=1);
  mkclo0(list_lenU_400, fn1_list_lenU_610, fvc:=0, argc:=1);
  mkclo0(list_lenL_407, fn1_list_lenL_613, fvc:=0, argc:=1);
  mkclo0(string_of_listU_414, fn1_string_of_listU_616, fvc:=0, argc:=1);
  mkclo0(string_of_listL_425, fn1_string_of_listL_619, fvc:=0, argc:=1);
  x_437 := fn0_mklistL_606(33);
  move1(test_436, x_437);
  x_439 := fn0_msortL_600(test_436);
  move1(sorted_438, x_439);
  lazy(x_440, lazy__622, 2);
  setlazy(x_440, string_of_listL_425, 0);
  setlazy(x_440, sorted_438, 1);
  force(x_621, x_440);
  return x_621;
}

-----------------------------------------

compilation success

-----------------------------------------

