[Notation {name = "|>"; body = (App [(Hole 2); (Hole 1)])};
  Notation {name = "@@"; body = (App [(Hole 1); (Hole 2)])};
  Notation {name = "="; body = (App [(Id ("eq", I)); (Hole 1); (Hole 2)])};
  Notation {name = "`"; body = (App [(Id ("sing", I)); (Hole 1)])};
  Notation {name = "&&"; body = (App [(Id ("and", I)); (Hole 1); (Hole 2)])};
  Notation {name = "||"; body = (App [(Id ("or", I)); (Hole 1); (Hole 2)])};
  Notation {name = "+"; body = (App [(Id ("add", I)); (Hole 1); (Hole 2)])};
  Notation {name = "-"; body = (App [(Id ("sub", I)); (Hole 1); (Hole 2)])};
  Notation {name = "*"; body = (App [(Id ("mul", I)); (Hole 1); (Hole 2)])};
  Notation {name = "/"; body = (App [(Id ("div", I)); (Hole 1); (Hole 2)])};
  Notation {name = "%"; body = (App [(Id ("rem", I)); (Hole 1); (Hole 2)])};
  Notation {name = "^"; body = (App [(Id ("pow", I)); (Hole 1); (Hole 2)])};
  Notation {name = "<"; body = (App [(Id ("lt", I)); (Hole 1); (Hole 2)])};
  Notation {name = ">"; body = (App [(Id ("gt", I)); (Hole 1); (Hole 2)])};
  Notation {name = "<="; body = (App [(Id ("lte", I)); (Hole 1); (Hole 2)])};
  Notation {name = ">="; body = (App [(Id ("gte", I)); (Hole 1); (Hole 2)])};
  Notation {name = "\195\151";
    body = (App [(Id ("prod1", I)); (Hole 1); (Hole 2)])};
  Notation {name = "::"; body = (App [(Id ("cons", I)); (Hole 1); (Hole 2)])};
  Notation {name = ";";
    body = (MLet ((Hole 1), (Binder ((PId "_"), (Hole 2)))))};
  Notation {name = "\226\159\168{},\226\159\169";
    body = (App [(Id ("ex0", I)); (Hole 1); (Hole 2)])};
  Notation {name = "\226\159\168,\226\159\169";
    body = (App [(Id ("ex1", I)); (Hole 1); (Hole 2)])};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id ("A", I)),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id ("A", I)),
                          (Binder ("_", (TBase (Type U)))))),
                       [(DConstr ("refl",
                           (TBase (BOpr ("=", (Id ("m", I)), (Id ("m", I))))),
                           []))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Definition {name = "rwl"; relv = R;
    body =
    (Binder (["s"; "r"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("A", I)),
                    (Binder ("m",
                       (Pi (N, U, (Id ("A", I)),
                          (Binder ("n",
                             (Pi (N, U,
                                (Pi (R, U, (Id ("A", I)),
                                   (Binder ("_", (Type (SId "r")))))),
                                (Binder ("B",
                                   (Pi (N, U,
                                      (BOpr ("=", (Id ("m", I)),
                                         (Id ("n", I)))),
                                      (Binder ("_",
                                         (Pi (R, U,
                                            (App
                                               [(Id ("B", I)); (Id ("m", I))]),
                                            (Binder ("_",
                                               (App
                                                  [(Id ("B", I));
                                                    (Id ("n", I))])
                                               ))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "rwl"),
              [([(PId "A"); (PId "m"); (PId "n"); (PId "B"); (PId "refl");
                  (PId "x")],
                (Some (Id ("x", I))))]
              )),
           [I; I; I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("A", I)),
                 (Binder ("m",
                    (Pi (N, U, (Id ("A", I)),
                       (Binder ("n",
                          (Pi (N, U,
                             (Pi (R, U, (Id ("A", I)),
                                (Binder ("_", (Type (SId "r")))))),
                             (Binder ("B",
                                (Pi (N, U,
                                   (BOpr ("=", (Id ("m", I)), (Id ("n", I)))),
                                   (Binder ("_",
                                      (Pi (R, U,
                                         (App [(Id ("B", I)); (Id ("m", I))]),
                                         (Binder ("_",
                                            (App
                                               [(Id ("B", I)); (Id ("n", I))])
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; I; E]};
  Definition {name = "rwr"; relv = R;
    body =
    (Binder (["s"; "r"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("A", I)),
                    (Binder ("m",
                       (Pi (N, U, (Id ("A", I)),
                          (Binder ("n",
                             (Pi (N, U,
                                (Pi (R, U, (Id ("A", I)),
                                   (Binder ("_", (Type (SId "r")))))),
                                (Binder ("B",
                                   (Pi (N, U,
                                      (BOpr ("=", (Id ("m", I)),
                                         (Id ("n", I)))),
                                      (Binder ("_",
                                         (Pi (R, U,
                                            (App
                                               [(Id ("B", I)); (Id ("n", I))]),
                                            (Binder ("_",
                                               (App
                                                  [(Id ("B", I));
                                                    (Id ("m", I))])
                                               ))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "rwr"),
              [([(PId "A"); (PId "m"); (PId "n"); (PId "B"); (PId "refl");
                  (PId "x")],
                (Some (Id ("x", I))))]
              )),
           [I; I; I; E])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("A", I)),
                 (Binder ("m",
                    (Pi (N, U, (Id ("A", I)),
                       (Binder ("n",
                          (Pi (N, U,
                             (Pi (R, U, (Id ("A", I)),
                                (Binder ("_", (Type (SId "r")))))),
                             (Binder ("B",
                                (Pi (N, U,
                                   (BOpr ("=", (Id ("m", I)), (Id ("n", I)))),
                                   (Binder ("_",
                                      (Pi (R, U,
                                         (App [(Id ("B", I)); (Id ("n", I))]),
                                         (Binder ("_",
                                            (App
                                               [(Id ("B", I)); (Id ("m", I))])
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; I; E]};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("A", I)),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DConstr ("just",
                     (TBind (R, (Id ("A", I)),
                        (Binder ("m", (TBase (UOpr ("`", (Id ("m", I))))))))),
                     [E]))
                   ]))
             ))
          ))
       ));
    view = [I]};
  Inductive {name = "unit"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)), [(DConstr ("tt", (TBase (Id ("unit", I))), []))]))
       ));
    view = []};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("true", (TBase (Id ("bool", I))), []));
             (DConstr ("false", (TBase (Id ("bool", I))), []))]))
       ));
    view = []};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DConstr ("zero", (TBase (Id ("nat", I))), []));
             (DConstr ("succ",
                (TBind (R, (Id ("nat", I)),
                   (Binder ("n", (TBase (Id ("nat", I))))))),
                [E]))
             ]))
       ));
    view = []};
  Inductive {name = "list"; relv = R;
    body =
    (Binder (["s"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type (SId "t"))),
                 [(DConstr ("nil",
                     (TBase (App [(Id ("list", I)); (Id ("A", I))])), 
                     []));
                   (DConstr ("cons",
                      (TBind (R, (Id ("A", I)),
                         (Binder ("hd",
                            (TBind (R,
                               (App
                                  [(Inst ("list", [(SId "_"); (SId "t")], I));
                                    (Id ("A", I))]),
                               (Binder ("tl",
                                  (TBase
                                     (App [(Id ("list", I)); (Id ("A", I))]))
                                  ))
                               ))
                            ))
                         )),
                      [E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Inductive {name = "exists0"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type L)),
                       [(DConstr ("ex0",
                           (TBind (N, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("exists0", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Inductive {name = "exists1"; relv = R;
    body =
    (Binder (["s"; "r"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind (
                (Pi (R, U, (Id ("A", I)), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type L)),
                       [(DConstr ("ex1",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBind (R,
                                    (App [(Id ("B", I)); (Id ("m", I))]),
                                    (Binder ("n",
                                       (TBase
                                          (App
                                             [(Id ("exists1", E));
                                               (Id ("A", I)); (Id ("B", I))]))
                                       ))
                                    ))
                                 ))
                              )),
                           [E; E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [I; E]};
  Definition {name = "prod0"; relv = N;
    body =
    (Binder (["s"; "r"],
       ((Fun (
           (Pi (R, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (Type (SId "r")), (Binder ("B", IMeta))))))
              )),
           (Binder ((Some "prod0"),
              [([(PId "A"); (PId "B")],
                (Some (App
                         [(Id ("exists0", E)); (Id ("A", I));
                           (Fun ((Pi (R, U, IMeta, (Binder ("_", IMeta)))),
                              (Binder (None,
                                 [([(PId "_")], (Some (Id ("B", I))))])),
                              []))
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Type (SId "s")),
           (Binder ("A", (Pi (R, U, (Type (SId "r")), (Binder ("B", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "prod1"; relv = N;
    body =
    (Binder (["s"; "r"],
       ((Fun (
           (Pi (R, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (R, U, (Type (SId "r")), (Binder ("B", IMeta))))))
              )),
           (Binder ((Some "prod1"),
              [([(PId "A"); (PId "B")],
                (Some (App
                         [(Id ("exists1", E)); (Id ("A", I));
                           (Fun ((Pi (R, U, IMeta, (Binder ("_", IMeta)))),
                              (Binder (None,
                                 [([(PId "_")], (Some (Id ("B", I))))])),
                              []))
                           ])))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Type (SId "s")),
           (Binder ("A", (Pi (R, U, (Type (SId "r")), (Binder ("B", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "not"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("bool", I)), (Binder ("_", (Id ("bool", I)))))),
           (Binder ((Some "not"),
              [([(PId "true")], (Some (Id ("false", I))));
                ([(PId "false")], (Some (Id ("true", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("bool", I)), (Binder ("_", (Id ("bool", I)))))))
       ));
    view = []};
  Definition {name = "and"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("bool", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("bool", I)),
                    (Binder ("_", (Id ("bool", I))))))
                 ))
              )),
           (Binder ((Some "and"),
              [([(PId "true"); (PId "true")], (Some (Id ("true", I))));
                ([(PId "_"); (PId "_")], (Some (Id ("false", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("bool", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("bool", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "or"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("bool", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("bool", I)),
                    (Binder ("_", (Id ("bool", I))))))
                 ))
              )),
           (Binder ((Some "or"),
              [([(PId "false"); (PId "false")], (Some (Id ("false", I))));
                ([(PId "_"); (PId "_")], (Some (Id ("true", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("bool", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("bool", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "xor"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("bool", I)),
              (Binder ("_",
                 (Pi (R, L, (Id ("bool", I)),
                    (Binder ("_", (Id ("bool", I))))))
                 ))
              )),
           (Binder ((Some "xor"),
              [([(PId "true"); (PId "true")], (Some (Id ("false", I))));
                ([(PId "false"); (PId "false")], (Some (Id ("false", I))));
                ([(PId "_"); (PId "_")], (Some (Id ("true", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("bool", I)),
           (Binder ("_",
              (Pi (R, L, (Id ("bool", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "lte"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("bool", I))))
                    ))
                 ))
              )),
           (Binder ((Some "lte"),
              [([(PId "zero"); (PId "_")], (Some (Id ("true", I))));
                ([(PId "_"); (PId "zero")], (Some (Id ("false", I))));
                ([(PConstr ("succ", [(PId "x")]));
                   (PConstr ("succ", [(PId "y")]))],
                 (Some (BOpr ("<=", (Id ("x", I)), (Id ("y", I))))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("bool", I))))))
              ))
           )))
       ));
    view = []};
  Definition {name = "lt"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", (Id ("bool", I))))
                    ))
                 ))
              )),
           (Binder ((Some "lt"),
              [([(PId "x"); (PId "y")],
                (Some (BOpr ("<=", (App [(Id ("succ", I)); (Id ("x", I))]),
                         (Id ("y", I))))))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x",
              (Pi (R, U, (Id ("nat", I)), (Binder ("y", (Id ("bool", I))))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "pred"; relv = R;
    body =
    (Binder ([],
       ((Fun ((Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I)))))),
           (Binder ((Some "pred"),
              [([(PId "zero")], (Some (Id ("zero", I))));
                ([(PConstr ("succ", [(PId "x")]))], (Some (Id ("x", I))))]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I)))))))
       ));
    view = []};
  Definition {name = "add"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "add"),
              [([(PId "zero"); (PId "y")], (Some (Id ("y", I))));
                ([(PConstr ("succ", [(PId "x")])); (PId "y")],
                 (Some (App
                          [(Id ("succ", I));
                            (BOpr ("+", (Id ("x", I)), (Id ("y", I))))])))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "sub"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "sub"),
              [([(PId "x"); (PId "zero")], (Some (Id ("x", I))));
                ([(PId "x"); (PConstr ("succ", [(PId "y")]))],
                 (Some (BOpr ("-", (App [(Id ("pred", I)); (Id ("x", I))]),
                          (Id ("y", I))))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "mul"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "mul"),
              [([(PId "zero"); (PId "_")], (Some (Id ("zero", I))));
                ([(PConstr ("succ", [(PId "x")])); (PId "y")],
                 (Some (BOpr ("+", (Id ("y", I)),
                          (BOpr ("*", (Id ("x", I)), (Id ("y", I))))))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "div"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))))
              )),
           (Binder ((Some "div"),
              [([(PId "x"); (PId "y")],
                (Some (Match (
                         [(R,
                           (App
                              [(Id ("lt", I)); (Id ("x", I)); (Id ("y", I))]),
                           None)],
                         None,
                         [([(PId "true")], (Some (Id ("zero", I))));
                           ([(PId "false")],
                            (Some (Let (R,
                                     (Fun (
                                        (Pi (R, U, (Id ("nat", I)),
                                           (Binder ("x",
                                              (Pi (R, U, (Id ("nat", I)),
                                                 (Binder ("y", IMeta))))
                                              ))
                                           )),
                                        (Binder ((Some "loop"),
                                           [([(PId "x"); (PId "y")],
                                             (Some (Match (
                                                      [(R,
                                                        (BOpr ("-",
                                                           (Id ("x", I)),
                                                           (App
                                                              [(Id ("pred", I
                                                                  ));
                                                                (Id ("y", I))
                                                                ])
                                                           )),
                                                        None)],
                                                      None,
                                                      [([(PId "zero")],
                                                        (Some (Id ("zero", I
                                                                 ))));
                                                        ([(PConstr ("succ",
                                                             [(PId "x")]))
                                                           ],
                                                         (Some (App
                                                                  [(Id (
                                                                    "succ", I
                                                                    ));
                                                                    (
                                                                    App
                                                                    [(Id (
                                                                    "loop", I
                                                                    ));
                                                                    (Id ("x",
                                                                    I));
                                                                    (Id ("y",
                                                                    I))])])))
                                                        ]
                                                      ))))
                                             ]
                                           )),
                                        [])),
                                     (Binder ((PId "loop"),
                                        (App
                                           [(Id ("loop", I)); (Id ("x", I));
                                             (Id ("y", I))])
                                        ))
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x", (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "one"; relv = R;
    body = (Binder ([], ((App [(Id ("succ", I)); (Id ("zero", I))]), IMeta)));
    view = []};
  Definition {name = "two"; relv = R;
    body = (Binder ([], ((App [(Id ("succ", I)); (Id ("one", I))]), IMeta)));
    view = []};
  Definition {name = "three"; relv = R;
    body = (Binder ([], ((App [(Id ("succ", I)); (Id ("two", I))]), IMeta)));
    view = []};
  Definition {name = "four"; relv = R;
    body =
    (Binder ([], ((App [(Id ("succ", I)); (Id ("three", I))]), IMeta)));
    view = []};
  Definition {name = "five"; relv = R;
    body = (Binder ([], ((App [(Id ("succ", I)); (Id ("four", I))]), IMeta)));
    view = []};
  Definition {name = "six"; relv = R;
    body = (Binder ([], ((App [(Id ("succ", I)); (Id ("five", I))]), IMeta)));
    view = []};
  Definition {name = "seven"; relv = R;
    body = (Binder ([], ((App [(Id ("succ", I)); (Id ("six", I))]), IMeta)));
    view = []};
  Definition {name = "eight"; relv = R;
    body =
    (Binder ([], ((App [(Id ("succ", I)); (Id ("seven", I))]), IMeta)));
    view = []};
  Definition {name = "nine"; relv = R;
    body =
    (Binder ([], ((App [(Id ("succ", I)); (Id ("eight", I))]), IMeta)));
    view = []};
  Definition {name = "ten"; relv = R;
    body = (Binder ([], ((App [(Id ("succ", I)); (Id ("nine", I))]), IMeta)));
    view = []};
  Definition {name = "test"; relv = N;
    body =
    (Binder ([],
       ((Id ("refl", I)),
        (BOpr ("=", (BOpr ("*", (Id ("one", I)), (Id ("three", I)))),
           (Id ("six", I)))))
       ));
    view = []};
  Definition {name = "rem"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("x",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))))
              )),
           (Binder ((Some "rem"),
              [([(PId "x"); (PId "y")],
                (Some (BOpr ("-", (Id ("x", I)),
                         (BOpr ("*",
                            (BOpr ("/", (Id ("x", I)), (Id ("y", I)))),
                            (Id ("y", I))))
                         ))))
                ]
              )),
           [E; E])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("x", (Pi (R, U, (Id ("nat", I)), (Binder ("y", IMeta))))
              ))
           )))
       ));
    view = [E; E]};
  Definition {name = "pow"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("nat", I)),
              (Binder ("_",
                 (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))
                    ))
                 ))
              )),
           (Binder ((Some "pow"),
              [([(PId "_"); (PId "zero")],
                (Some (App [(Id ("succ", I)); (Id ("zero", I))])));
                ([(PId "x"); (PConstr ("succ", [(PId "y")]))],
                 (Some (BOpr ("*", (Id ("x", I)),
                          (BOpr ("^", (Id ("x", I)), (Id ("y", I))))))))
                ]
              )),
           [])),
        (Pi (R, U, (Id ("nat", I)),
           (Binder ("_",
              (Pi (R, U, (Id ("nat", I)), (Binder ("_", (Id ("nat", I))))))))
           )))
       ));
    view = []};
  Definition {name = "loc"; relv = N;
    body = (Binder ([], ((Id ("nat", I)), (Type U)))); view = []};
  Inductive {name = "at"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id ("loc", I)),
                (Binder ("l",
                   (PBase
                      ((TBase (Type L)),
                       [(DConstr ("at_intro",
                           (TBind (R, (Id ("A", I)),
                              (Binder ("m",
                                 (TBase
                                    (App
                                       [(Id ("at", I)); (Id ("A", I));
                                         (Id ("l", I))]))
                                 ))
                              )),
                           [E]))
                         ]))
                   ))
                ))
             ))
          ))
       ));
    view = [E; E]};
  Notation {name = "@"; body = (App [(Id ("at", I)); (Hole 1); (Hole 2)])};
  Extern {name = "alloc"; relv = R;
    body =
    (Binder ([],
       (None,
        (Pi (R, U, (Id ("unit", I)),
           (Binder ("_",
              (IO
                 (App
                    [(Id ("exists1", I));
                      (Fun ((Pi (R, U, IMeta, (Binder ("l", IMeta)))),
                         (Binder (None,
                            [([(PId "l")],
                              (Some (BOpr ("@", (Id ("unit", I)),
                                       (Id ("l", I))))))
                              ]
                            )),
                         []))
                      ]))
              ))
           )))
       ));
    view = [E]};
  Extern {name = "getU"; relv = R;
    body =
    (Binder ([],
       ((Some (Fun (
                 (Pi (N, U, (Type U),
                    (Binder ("A",
                       (Pi (R, U, (Id ("loc", I)),
                          (Binder ("l",
                             (Pi (R, U,
                                (BOpr ("@", (Id ("A", I)), (Id ("l", I)))),
                                (Binder ("pf",
                                   (App
                                      [(Id ("prod1", I)); (Id ("A", I));
                                        (BOpr ("@", (Id ("A", I)),
                                           (Id ("l", I))))
                                        ])
                                   ))
                                ))
                             ))
                          ))
                       ))
                    )),
                 (Binder ((Some "getU"),
                    [([(PId "A"); (PId "l"); (PId "pf")],
                      (Some (Match ([(R, (Id ("pf", I)), None)], None,
                               [([(PConstr ("at_intro", [(PId "v")]))],
                                 (Some (BOpr ("\226\159\168,\226\159\169",
                                          (Id ("v", I)), (Id ("pf", I))))))
                                 ]
                               ))))
                      ]
                    )),
                 [I; E; E]))),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (R, U, (Id ("loc", I)),
                 (Binder ("l",
                    (Pi (R, U, (BOpr ("@", (Id ("A", I)), (Id ("l", I)))),
                       (Binder ("pf",
                          (App
                             [(Id ("prod1", I)); (Id ("A", I));
                               (BOpr ("@", (Id ("A", I)), (Id ("l", I))))])
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; E; E]};
  Extern {name = "getL"; relv = R;
    body =
    (Binder ([],
       ((Some (Fun (
                 (Pi (N, U, (Type L),
                    (Binder ("A",
                       (Pi (R, U, (Id ("loc", I)),
                          (Binder ("l",
                             (Pi (R, U,
                                (BOpr ("@", (Id ("A", I)), (Id ("l", I)))),
                                (Binder ("pf",
                                   (App
                                      [(Id ("prod1", I)); (Id ("A", I));
                                        (BOpr ("@", (Id ("unit", I)),
                                           (Id ("l", I))))
                                        ])
                                   ))
                                ))
                             ))
                          ))
                       ))
                    )),
                 (Binder ((Some "getL"),
                    [([(PId "A"); (PId "l"); (PId "pf")],
                      (Some (Match ([(R, (Id ("pf", I)), None)], None,
                               [([(PConstr ("at_intro", [(PId "v")]))],
                                 (Some (BOpr ("\226\159\168,\226\159\169",
                                          (Id ("v", I)),
                                          (App
                                             [(Id ("at_intro", I));
                                               (Id ("tt", I))])
                                          ))))
                                 ]
                               ))))
                      ]
                    )),
                 [I; E; E]))),
        (Pi (N, U, (Type L),
           (Binder ("A",
              (Pi (R, U, (Id ("loc", I)),
                 (Binder ("l",
                    (Pi (R, U, (BOpr ("@", (Id ("A", I)), (Id ("l", I)))),
                       (Binder ("pf",
                          (App
                             [(Id ("prod1", I)); (Id ("A", I));
                               (BOpr ("@", (Id ("unit", I)), (Id ("l", I))))])
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; E; E]};
  Extern {name = "set"; relv = R;
    body =
    (Binder (["s"],
       ((Some (Fun (
                 (Pi (N, U, (Type U),
                    (Binder ("A",
                       (Pi (N, U, (Type (SId "s")),
                          (Binder ("B",
                             (Pi (R, U, (Id ("loc", I)),
                                (Binder ("l",
                                   (Pi (R, U, (Id ("B", I)),
                                      (Binder ("m",
                                         (Pi (R, U,
                                            (BOpr ("@", (Id ("A", I)),
                                               (Id ("l", I)))),
                                            (Binder ("pf",
                                               (BOpr ("@", (Id ("B", I)),
                                                  (Id ("l", I))))
                                               ))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    )),
                 (Binder ((Some "set"),
                    [([(PId "A"); (PId "B"); (PId "l"); (PId "m"); (PId "pf")
                        ],
                      (Some (Match ([(R, (Id ("pf", I)), None)], None,
                               [([(PConstr ("at_intro", [(PId "_")]))],
                                 (Some (App
                                          [(Id ("at_intro", I));
                                            (Id ("m", I))])))
                                 ]
                               ))))
                      ]
                    )),
                 [I; I; E; E; E]))),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (N, U, (Type (SId "s")),
                 (Binder ("B",
                    (Pi (R, U, (Id ("loc", I)),
                       (Binder ("l",
                          (Pi (R, U, (Id ("B", I)),
                             (Binder ("m",
                                (Pi (R, U,
                                   (BOpr ("@", (Id ("A", I)), (Id ("l", I)))),
                                   (Binder ("pf",
                                      (BOpr ("@", (Id ("B", I)),
                                         (Id ("l", I))))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; E; E; E]};
  Extern {name = "free"; relv = R;
    body =
    (Binder ([],
       ((Some (Fun (
                 (Pi (N, U, (Type U),
                    (Binder ("A",
                       (Pi (R, U, (Id ("loc", I)),
                          (Binder ("l",
                             (Pi (R, U,
                                (BOpr ("@", (Id ("A", I)), (Id ("l", I)))),
                                (Binder ("pf", (Id ("unit", I))))))
                             ))
                          ))
                       ))
                    )),
                 (Binder ((Some "free"),
                    [([(PId "A"); (PId "l"); (PId "pf")],
                      (Some (Match ([(R, (Id ("pf", I)), None)], None,
                               [([(PConstr ("at_intro", [(PId "_")]))],
                                 (Some (Id ("tt", I))))]
                               ))))
                      ]
                    )),
                 [I; E; E]))),
        (Pi (N, U, (Type U),
           (Binder ("A",
              (Pi (R, U, (Id ("loc", I)),
                 (Binder ("l",
                    (Pi (R, U, (BOpr ("@", (Id ("A", I)), (Id ("l", I)))),
                       (Binder ("pf", (Id ("unit", I))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; E; E]};
  Definition {name = "set_get_law"; relv = N;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (R, U, (Type U),
              (Binder ("A",
                 (Pi (R, U, (Id ("loc", I)),
                    (Binder ("l",
                       (Pi (R, U, (BOpr ("@", (Id ("A", I)), (Id ("l", I)))),
                          (Binder ("pf",
                             (Pi (R, U, (Id ("A", I)),
                                (Binder ("v0",
                                   (Let (R,
                                      (App
                                         [(Id ("set", I)); (Id ("l", I));
                                           (Id ("v0", I)); (Id ("pf", I))]),
                                      (Binder ((PId "pf"),
                                         (Let (R,
                                            (App
                                               [(Id ("getU", I));
                                                 (Id ("l", I));
                                                 (Id ("pf", I))]),
                                            (Binder (
                                               (PBOpr (
                                                  "\226\159\168,\226\159\169",
                                                  (PId "v1"), (PId "pf"))),
                                               (BOpr ("=", (Id ("v0", I)),
                                                  (Id ("v1", I))))
                                               ))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "set_get_law"),
              [([(PId "A"); (PId "l"); (PId "pf"); (PId "v0")],
                (Some (Match ([(R, (Id ("pf", I)), (Some ("pf0", IMeta)))],
                         (Some (Let (R,
                                  (App
                                     [(Id ("set", I)); (Id ("l", I));
                                       (Id ("v0", I)); (Id ("pf0", I))]),
                                  (Binder ((PId "pf0"),
                                     (Let (R,
                                        (App
                                           [(Id ("getU", I)); (Id ("l", I));
                                             (Id ("pf0", I))]),
                                        (Binder (
                                           (PBOpr (
                                              "\226\159\168,\226\159\169",
                                              (PId "v1"), (PId "pf0"))),
                                           (BOpr ("=", (Id ("v0", I)),
                                              (Id ("v1", I))))
                                           ))
                                        ))
                                     ))
                                  ))),
                         [([(PConstr ("at_intro", [(PId "v")]))],
                           (Some (Id ("refl", I))))]
                         ))))
                ]
              )),
           [I; E; E; E])),
        (Pi (R, U, (Type U),
           (Binder ("A",
              (Pi (R, U, (Id ("loc", I)),
                 (Binder ("l",
                    (Pi (R, U, (BOpr ("@", (Id ("A", I)), (Id ("l", I)))),
                       (Binder ("pf",
                          (Pi (R, U, (Id ("A", I)),
                             (Binder ("v0",
                                (Let (R,
                                   (App
                                      [(Id ("set", I)); (Id ("l", I));
                                        (Id ("v0", I)); (Id ("pf", I))]),
                                   (Binder ((PId "pf"),
                                      (Let (R,
                                         (App
                                            [(Id ("getU", I)); (Id ("l", I));
                                              (Id ("pf", I))]),
                                         (Binder (
                                            (PBOpr (
                                               "\226\159\168,\226\159\169",
                                               (PId "v1"), (PId "pf"))),
                                            (BOpr ("=", (Id ("v0", I)),
                                               (Id ("v1", I))))
                                            ))
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; E; E; E]};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((MLet ((App [(Id ("alloc", I)); (Id ("tt", I))]),
           (Binder (
              (PBOpr ("\226\159\168,\226\159\169", (PId "l"), (PId "pf"))),
              (Let (R,
                 (App
                    [(Id ("set", I)); (Id ("l", I)); (Id ("zero", I));
                      (Id ("pf", I))]),
                 (Binder ((PId "pf"),
                    (Let (R,
                       (App [(Id ("free", I)); (Id ("l", I)); (Id ("pf", I))]),
                       (Binder ((PId "_"), (Return (Id ("tt", I)))))))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

-----------------------------------------

#[logical]
inductive eq_1‹s_329› (A_330 : Type‹s_329›) (m_331 : A_330):
  A_330 -> U
where
| refl_1 : (eq_1‹??_1› ?_1[0;0] m_331 m_331)

#[program]
def rwl_1‹s_333,r_334› :
  ∀ {A_335 : Type‹s_333›} ->
    ∀ {m_336 : A_335} ->
      ∀ {n_337 : A_335} ->
        ∀ {B_338 : A_335 -> Type‹r_334›} ->
          {(eq_1‹??_3› ?_3[0;0] m_336 n_337)} ->
            ((B_338) m_336) -> ((B_338) n_337)
:=
  function rwl_342 :
    ∀ {A_343 : Type‹s_333›} ->
      ∀ {m_344 : A_343} ->
        ∀ {n_345 : A_343} ->
          ∀ {B_346 : A_343 -> Type‹r_334›} ->
            {(eq_1‹??_2› ?_2[0;0] m_344 n_345)} ->
              ((B_346) m_344) -> ((B_346) n_345)
  | A_350 m_351 n_352 B_353 refl_1 x_354 => x_354

#[program]
def rwr_2‹s_355,r_356› :
  ∀ {A_357 : Type‹s_355›} ->
    ∀ {m_358 : A_357} ->
      ∀ {n_359 : A_357} ->
        ∀ {B_360 : A_357 -> Type‹r_356›} ->
          {(eq_1‹??_5› ?_5[0;0] m_358 n_359)} ->
            ((B_360) n_359) -> ((B_360) m_358)
:=
  function rwr_364 :
    ∀ {A_365 : Type‹s_355›} ->
      ∀ {m_366 : A_365} ->
        ∀ {n_367 : A_365} ->
          ∀ {B_368 : A_365 -> Type‹r_356›} ->
            {(eq_1‹??_4› ?_4[0;0] m_366 n_367)} ->
              ((B_368) n_367) -> ((B_368) m_366)
  | A_372 m_373 n_374 B_375 refl_1 x_376 => x_376

#[program]
inductive sing_2‹s_377› (A_378 : Type‹s_377›):
  A_378 -> Type‹s_377›
where
| just_2 (m_380 : A_378) : (sing_2‹??_6› ?_6[0;0] m_380)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_381 : nat_5) : nat_5

#[program]
inductive list_6‹s_382,t_383› (A_384 : Type‹s_382›): Type‹t_383›
where
| nil_8 : (list_6‹??_7,??_8› A_384)
| cons_9
    (hd_385 : A_384) (tl_386 : (list_6‹??_9,t_383› A_384))
    : (list_6‹??_10,??_11› A_384)

#[program]
inductive exists0_7‹s_387,r_388› (A_389 : Type‹s_387›) (B_390 : 
A_389 -> Type‹r_388›): L where
| ex0_10
    {m_392 : A_389} (n_393 : ((B_390) m_392))
    : (exists0_7‹??_12,??_13› A_389 B_390)

#[program]
inductive exists1_8‹s_394,r_395› (A_396 : Type‹s_394›) (B_397 : 
A_396 -> Type‹r_395›): L where
| ex1_11
    (m_399 : A_396) (n_400 : ((B_397) m_399))
    : (exists1_8‹??_14,??_15› A_396 B_397)

#[logical]
def prod0_3‹s_401,r_402› :
  Type‹s_401› -> Type‹r_402› -> ?_10[0;0]
:=
  function prod0_405 : Type‹s_401› -> Type‹r_402› -> ?_7[0;0]
  | A_408 B_409 =>
    (exists0_7‹??_16,??_17›
      A_408 function _410 : ?_8[0;0] -> ?_9[0;0]
            | _412 => B_409)

#[logical]
def prod1_4‹s_413,r_414› :
  Type‹s_413› -> Type‹r_414› -> ?_14[0;0]
:=
  function prod1_417 : Type‹s_413› -> Type‹r_414› -> ?_11[0;0]
  | A_420 B_421 =>
    (exists1_8‹??_18,??_19›
      A_420 function _422 : ?_12[0;0] -> ?_13[0;0]
            | _424 => B_421)

#[program]
def not_5‹› : bool_4 -> bool_4 :=
  function not_426 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_6‹› : bool_4 -> bool_4 -> bool_4 :=
  function and_430 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _433 _434 => false_5

#[program]
def or_7‹› : bool_4 -> bool_4 -> bool_4 :=
  function or_437 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _440 _441 => true_4

#[program]
def xor_8‹› : bool_4 -> bool_4 -o bool_4 :=
  function xor_444 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _447 _448 => true_4

#[program]
def lte_9‹› : nat_5 -> nat_5 -> bool_4 :=
  function lte_451 : nat_5 -> nat_5 -> bool_4
  | zero_6 _454 => true_4
  | _455 zero_6 => false_5
  | (succ_7 x_456) (succ_7 y_457) => ((lte_451) x_456 y_457)

#[program]
def lt_10‹› : nat_5 -> nat_5 -> bool_4 :=
  function lt_460 : nat_5 -> nat_5 -> bool_4
  | x_463 y_464 => ((lte_9) (succ_7‹› x_463) y_464)

#[program]
def pred_11‹› : nat_5 -> nat_5 :=
  function pred_466 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_468) => x_468

#[program]
def add_12‹› : nat_5 -> nat_5 -> nat_5 :=
  function add_471 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_474 => y_474
  | (succ_7 x_475) y_476 => (succ_7‹› ((add_471) x_475 y_476))

#[program]
def sub_13‹› : nat_5 -> nat_5 -> nat_5 :=
  function sub_479 : nat_5 -> nat_5 -> nat_5
  | x_482 zero_6 => x_482
  | x_483 (succ_7 y_484) => ((sub_479) ((pred_11) x_483) y_484)

#[program]
def mul_14‹› : nat_5 -> nat_5 -> nat_5 :=
  function mul_487 : nat_5 -> nat_5 -> nat_5
  | zero_6 _490 => zero_6
  | (succ_7 x_491) y_492 => ((add_12) y_492 ((mul_487) x_491 y_492))

#[program]
def div_15‹› : nat_5 -> nat_5 -> ?_21[0;0] :=
  function div_495 : nat_5 -> nat_5 -> ?_15[0;0]
  | x_498 y_499 =>
    match ((lt_10) x_498 y_499) in ?_16[0;0] -o ?_17[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_501 :=
        function loop_502 : nat_5 -> nat_5 -> ?_18[0;0]
        | x_505 y_506 =>
          match ((sub_13) x_505 ((pred_11) y_506)) in ?_19[0;0] -o ?_20[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_508) => (succ_7‹› ((loop_502) x_508 y_506))
      in ((loop_501) x_498 y_499)

#[program]
def one_16‹› : ?_22[0;0] := (succ_7‹› zero_6)

#[program]
def two_17‹› : ?_23[0;0] := (succ_7‹› one_16)

#[program]
def three_18‹› : ?_24[0;0] := (succ_7‹› two_17)

#[program]
def four_19‹› : ?_25[0;0] := (succ_7‹› three_18)

#[program]
def five_20‹› : ?_26[0;0] := (succ_7‹› four_19)

#[program]
def six_21‹› : ?_27[0;0] := (succ_7‹› five_20)

#[program]
def seven_22‹› : ?_28[0;0] := (succ_7‹› six_21)

#[program]
def eight_23‹› : ?_29[0;0] := (succ_7‹› seven_22)

#[program]
def nine_24‹› : ?_30[0;0] := (succ_7‹› eight_23)

#[program]
def ten_25‹› : ?_31[0;0] := (succ_7‹› nine_24)

#[logical]
def test_26‹› :
  (eq_1‹??_21› ?_34[0;0] ((mul_14) one_16 three_18) six_21)
:= (refl_1‹??_20› ?_32[0;0] ?_33[0;0])

#[program]
def rem_27‹› : nat_5 -> nat_5 -> ?_36[0;0] :=
  function rem_511 : nat_5 -> nat_5 -> ?_35[0;0]
  | x_514 y_515 => ((sub_13) x_514 ((mul_14) ((div_15) x_514 y_515) y_515))

#[program]
def pow_28‹› : nat_5 -> nat_5 -> nat_5 :=
  function pow_518 : nat_5 -> nat_5 -> nat_5
  | _521 zero_6 => (succ_7‹› zero_6)
  | x_522 (succ_7 y_523) => ((mul_14) x_522 ((pow_518) x_522 y_523))

#[logical]
def loc_29‹› : U := nat_5

#[logical]
inductive at_9‹s_524› (A_525 : Type‹s_524›) (l_526 : loc_29): 
L where
| at_intro_12 (m_527 : A_525) : (at_9‹??_22› A_525 l_526)

#[program]
extern alloc_30‹› :
  unit_3 ->
    IO (exists1_8‹??_24,??_25›
         ?_39[0;0]
         function _529 : ?_37[0;0] -> ?_38[0;0]
         | l_531 => (at_9‹??_23› unit_3 l_531))

#[program]
extern getU_31‹› :
  ∀ {A_532 : U} ->
    ∀ (l_533 : loc_29) ->
      (at_9‹??_32› A_532 l_533) ->
        ((prod1_4‹??_34,??_35›) A_532 (at_9‹??_33› A_532 l_533))
:=
  function getU_535 :
    ∀ {A_536 : U} ->
      ∀ (l_537 : loc_29) ->
        (at_9‹??_26› A_536 l_537) ->
          ((prod1_4‹??_28,??_29›) A_536 (at_9‹??_27› A_536 l_537))
  | A_539 l_540 pf_541 =>
    match pf_541 in ?_40[0;0] -o ?_41[0;0] with
    | (at_intro_12 v_543) =>
      (ex1_11‹??_30,??_31› ?_42[0;0] ?_43[0;0] v_543 pf_541)

#[program]
extern getL_32‹› :
  ∀ {A_544 : L} ->
    ∀ (l_545 : loc_29) ->
      (at_9‹??_43› A_544 l_545) ->
        ((prod1_4‹??_45,??_46›) A_544 (at_9‹??_44› unit_3 l_545))
:=
  function getL_547 :
    ∀ {A_548 : L} ->
      ∀ (l_549 : loc_29) ->
        (at_9‹??_36› A_548 l_549) ->
          ((prod1_4‹??_38,??_39›) A_548 (at_9‹??_37› unit_3 l_549))
  | A_551 l_552 pf_553 =>
    match pf_553 in ?_44[0;0] -o ?_45[0;0] with
    | (at_intro_12 v_555) =>
      (ex1_11‹??_41,??_42›
        ?_48[0;0] ?_49[0;0] v_555
        (at_intro_12‹??_40› ?_46[0;0] ?_47[0;0] tt_3))

#[program]
extern set_33‹s_556› :
  ∀ {A_557 : U} ->
    ∀ {B_558 : Type‹s_556›} ->
      ∀ (l_559 : loc_29) ->
        B_558 ->
          (at_9‹??_50› A_557 l_559) -> (at_9‹??_51› B_558 l_559)
:=
  function set_562 :
    ∀ {A_563 : U} ->
      ∀ {B_564 : Type‹s_556›} ->
        ∀ (l_565 : loc_29) ->
          B_564 ->
            (at_9‹??_47› A_563 l_565) -> (at_9‹??_48› B_564 l_565)
  | A_568 B_569 l_570 m_571 pf_572 =>
    match pf_572 in ?_50[0;0] -o ?_51[0;0] with
    | (at_intro_12 _574) =>
      (at_intro_12‹??_49› ?_52[0;0] ?_53[0;0] m_571)

#[program]
extern free_34‹› :
  ∀ {A_575 : U} ->
    ∀ (l_576 : loc_29) -> (at_9‹??_53› A_575 l_576) -> unit_3
:=
  function free_578 :
    ∀ {A_579 : U} ->
      ∀ (l_580 : loc_29) -> (at_9‹??_52› A_579 l_580) -> unit_3
  | A_582 l_583 pf_584 =>
    match pf_584 in ?_54[0;0] -o ?_55[0;0] with
    | (at_intro_12 _586) => tt_3

#[logical]
def set_get_law_35‹s_587› :
  ∀ (A_588 : U) ->
    ∀ (l_589 : loc_29) ->
      ∀ (pf_590 : (at_9‹??_60› A_588 l_589)) ->
        ∀ (v0_591 : A_588) ->
          let pf_592 :=
            ((set_33‹??_61›) ?_72[0;0] ?_71[0;0] l_589 v0_591 pf_590)
          in
          match ((getU_31) ?_73[0;0] l_589 pf_592) in ?_76[0;0] -o ?_75[0;0]
          with
          | (ex1_11 v1_594 pf_595) =>
            (eq_1‹??_62› ?_74[0;0] v0_591 v1_594)
:=
  function set_get_law_596 :
    ∀ (A_597 : U) ->
      ∀ (l_598 : loc_29) ->
        ∀ (pf_599 : (at_9‹??_54› A_597 l_598)) ->
          ∀ (v0_600 : A_597) ->
            let pf_601 :=
              ((set_33‹??_55›) ?_57[0;0] ?_56[0;0] l_598 v0_600 pf_599)
            in
            match ((getU_31) ?_58[0;0] l_598 pf_601) in
              ?_61[0;0] -o ?_60[0;0]
            with
            | (ex1_11 v1_603 pf_604) =>
              (eq_1‹??_56› ?_59[0;0] v0_600 v1_603)
  | A_605 l_606 pf_607 v0_608 =>
    match pf_607 in
      ∀ (pf0_609 : ?_62[0;0]) -o
        let pf0_610 :=
          ((set_33‹??_57›) ?_64[0;0] ?_63[0;0] l_606 v0_608 pf0_609)
        in
        match ((getU_31) ?_65[0;0] l_606 pf0_610) in ?_68[0;0] -o ?_67[0;0]
        with
        | (ex1_11 v1_612 pf0_613) =>
          (eq_1‹??_58› ?_66[0;0] v0_608 v1_612)
    with
    | (at_intro_12 v_614) => (refl_1‹??_59› ?_69[0;0] ?_70[0;0])

#[program]
def main_36‹› : IO unit_3 :=
  let* _615 := ((alloc_30) tt_3) in
  match _615 in ?_81[0;0] -o ?_80[0;0] with
  | (ex1_11 l_617 pf_618) =>
    let pf_619 :=
      ((set_33‹??_63›) ?_78[0;0] ?_77[0;0] l_617 zero_6 pf_618)
    in let __620 := ((free_34) ?_79[0;0] l_617 pf_619) in return tt_3

-----------------------------------------

