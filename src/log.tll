[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((MLet ((ReadLn (Id ("tt", I))),
           (Binder ((PId "s"),
              (MLet ((Print (Id ("s", I))),
                 (Binder ((PId "_"), (Return (Id ("tt", I)))))))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_388› : ∀ (A_389 : Type‹s_388›) -> A_389 -> ?_2[0;0] :=
  fun id_391 : ∀ (A_392 : Type‹s_388›) -> A_392 -> ?_1[0;0]
  | A_394 m_395 => m_395

#[logical]
inductive eq_1‹s_396› (A_397 : Type‹s_396›) (m_398 : A_397):
  A_397 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_398 m_398)

#[program]
def rwl_2‹s_400,r_401› :
  ∀ {A_402 : Type‹s_400›} ->
    ∀ {m_403 : A_402} ->
      ∀ {n_404 : A_402} ->
        ∀ {B_405 : A_402 -> Type‹r_401›} ->
          {(eq_1‹??_3› ?_5[0;0] m_403 n_404)} ->
            ((B_405) m_403) -> ((B_405) n_404)
:=
  fun rwl_409 :
    ∀ {A_410 : Type‹s_400›} ->
      ∀ {m_411 : A_410} ->
        ∀ {n_412 : A_410} ->
          ∀ {B_413 : A_410 -> Type‹r_401›} ->
            {(eq_1‹??_2› ?_4[0;0] m_411 n_412)} ->
              ((B_413) m_411) -> ((B_413) n_412)
  | A_417 m_418 n_419 B_420 refl_1 x_421 => x_421

#[program]
def rwr_3‹s_422,r_423› :
  ∀ {A_424 : Type‹s_422›} ->
    ∀ {m_425 : A_424} ->
      ∀ {n_426 : A_424} ->
        ∀ {B_427 : A_424 -> Type‹r_423›} ->
          {(eq_1‹??_5› ?_7[0;0] m_425 n_426)} ->
            ((B_427) n_426) -> ((B_427) m_425)
:=
  fun rwr_431 :
    ∀ {A_432 : Type‹s_422›} ->
      ∀ {m_433 : A_432} ->
        ∀ {n_434 : A_432} ->
          ∀ {B_435 : A_432 -> Type‹r_423›} ->
            {(eq_1‹??_4› ?_6[0;0] m_433 n_434)} ->
              ((B_435) n_434) -> ((B_435) m_433)
  | A_439 m_440 n_441 B_442 refl_1 x_443 => x_443

#[logical]
def congr_4‹s_444,r_445,t_446› :
  ∀ (A_447 : Type‹s_444›) ->
    ∀ (B_448 : Type‹r_445›) ->
      ∀ (m_449 : A_447) ->
        ∀ (n_450 : A_447) ->
          ∀ (f_451 : forall‹t_446›(__452 : A_447), B_448) ->
            (eq_1‹??_9› ?_12[0;0] m_449 n_450) ->
              (eq_1‹??_10› ?_13[0;0] ((f_451) m_449) ((f_451) n_450))
:=
  fun congr_454 :
    ∀ (A_455 : Type‹s_444›) ->
      ∀ (B_456 : Type‹r_445›) ->
        ∀ (m_457 : A_455) ->
          ∀ (n_458 : A_455) ->
            ∀ (f_459 : forall‹t_446›(__460 : A_455), B_456) ->
              (eq_1‹??_6› ?_8[0;0] m_457 n_458) ->
                (eq_1‹??_7› ?_9[0;0] ((f_459) m_457) ((f_459) n_458))
  | A_462 B_463 m_464 n_465 f_466 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_467 : U} ->
    ∀ {m_468 : A_467} ->
      ∀ (x_469 : (eq_1‹??_15› ?_20[0;0] m_468 m_468)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_469 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_470 :
    ∀ {A_471 : U} ->
      ∀ {m_472 : A_471} ->
        ∀ (x_473 : (eq_1‹??_11› ?_14[0;0] m_472 m_472)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_473 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_474 m_475 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_476,t_477› (A_478 : Type‹s_476›):
  A_478 -> Type‹t_477›
where
| just_2 (m_480 : A_478) : (sing_2‹??_18,??_19› ?_24[0;0] m_480)

#[logical]
def ssing_6‹s_481› :
  ∀ (A_482 : Type‹s_481›) -> A_482 -> Type‹s_481›
:=
  fun ssing_484 : ∀ (A_485 : Type‹s_481›) -> A_485 -> Type‹s_481›
  | A_487 m_488 => (sing_2‹s_481,s_481› A_487 m_488)

#[program]
def sing_elim_7‹s_489,t_490› :
  ∀ {A_491 : Type‹s_489›} ->
    ∀ {x_492 : A_491} -> (sing_2‹s_489,t_490› ?_26[0;0] x_492) -> A_491
:=
  fun sing_elim_494 :
    ∀ {A_495 : Type‹s_489›} ->
      ∀ {x_496 : A_495} ->
        (sing_2‹s_489,t_490› ?_25[0;0] x_496) -> A_495
  | A_498 x_499 (just_2 x_500) => x_500

#[logical]
def sing_uniq_8‹s_501,t_502› :
  ∀ (A_503 : Type‹s_501›) ->
    ∀ (x0_504 : A_503) ->
      ∀ (x_505 : (sing_2‹s_501,t_502› ?_33[0;0] x0_504)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_504
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_505))
:=
  fun sing_uniq_506 :
    ∀ (A_507 : Type‹s_501›) ->
      ∀ (x0_508 : A_507) ->
        ∀ (x_509 : (sing_2‹s_501,t_502› ?_27[0;0] x0_508)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_508
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_509))
  | A_510 x0_511 (just_2 _512) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_513 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_513 tt_3)
:=
  fun unit_eta_514 :
    ∀ (x_515 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_515 tt_3)
  | x_516 =>
    match x_516 in
      ∀ (x0_517 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_517 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_519 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_523 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _526 _527 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_530 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _533 _534 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_537 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _540 _541 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_542 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_545 : nat_5 -> nat_5 -> bool_4
  | zero_6 _548 => true_4
  | _549 zero_6 => false_5
  | (succ_7 x_550) (succ_7 y_551) => ((lte_545) x_550 y_551)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_554 : nat_5 -> nat_5 -> bool_4
  | x_557 y_558 => ((lte_14) (succ_7‹› x_557) y_558)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_560 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_562) => x_562

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_565 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_568 => y_568
  | (succ_7 x_569) y_570 => (succ_7‹› ((add_565) x_569 y_570))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_573 : nat_5 -> nat_5 -> nat_5
  | x_576 zero_6 => x_576
  | x_577 (succ_7 y_578) => ((sub_573) ((pred_16) x_577) y_578)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_581 : nat_5 -> nat_5 -> nat_5
  | zero_6 _584 => zero_6
  | (succ_7 x_585) y_586 => ((add_17) y_586 ((mul_581) x_585 y_586))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_589 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_592 y_593 =>
    match ((lt_15) x_592 y_593) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_595 :=
        fun loop_596 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_599 y_600 =>
          match ((sub_18) x_599 ((pred_16) y_600)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_602) => (succ_7‹› ((loop_596) x_602 y_600))
      in ((loop_595) x_592 y_593)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_605 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_608 y_609 => ((sub_18) x_608 ((mul_19) ((div_20) x_608 y_609) y_609))

#[program]
inductive list_6‹s_610,t_611› (A_612 : Type‹s_610›): Type‹t_611›
where
| nil_8 : (list_6‹??_31,??_32› A_612)
| cons_9
    (hd_613 : A_612) (tl_614 : (list_6‹??_33,t_611› A_612))
    : (list_6‹??_34,??_35› A_612)

#[program]
def free_list_22‹s_615,t_616› :
  ∀ {A_617 : Type‹s_615›} ->
    A_617 -> unit_3 -> (list_6‹??_37,t_616› A_617) -> unit_3
:=
  fun free_list_621 :
    ∀ {A_622 : Type‹s_615›} ->
      A_622 -> unit_3 -> (list_6‹??_36,t_616› A_622) -> unit_3
  | A_626 f_627 nil_8 => tt_3
  | A_628 f_629 (cons_9 x_630 xs_631) =>
    let __632 := ((f_629) x_630) in ((free_list_621) ?_52[0;0] f_629 xs_631)

#[program]
inductive exists0_7‹s_633,r_634› (A_635 : Type‹s_633›) (B_636 : 
A_635 -> Type‹r_634›): L where
| ex0_10
    {m_638 : A_635} (n_639 : ((B_636) m_638))
    : (exists0_7‹??_38,??_39› A_635 B_636)

#[program]
inductive exists1_8‹s_640,r_641› (A_642 : Type‹s_640›) (B_643 : 
A_642 -> Type‹r_641›): L where
| ex1_11
    (m_645 : A_642) (n_646 : ((B_643) m_645))
    : (exists1_8‹??_40,??_41› A_642 B_643)

#[logical]
def prod0_23‹s_647,r_648› :
  Type‹s_647› -> Type‹r_648› -> ?_56[0;0]
:=
  fun prod0_651 : Type‹s_647› -> Type‹r_648› -> ?_53[0;0]
  | A_654 B_655 =>
    (exists0_7‹??_42,??_43›
      A_654 fun _656 : ?_54[0;0] -> ?_55[0;0]
            | _658 => B_655)

#[logical]
def prod1_24‹s_659,r_660› :
  Type‹s_659› -> Type‹r_660› -> ?_60[0;0]
:=
  fun prod1_663 : Type‹s_659› -> Type‹r_660› -> ?_57[0;0]
  | A_666 B_667 =>
    (exists1_8‹??_44,??_45›
      A_666 fun _668 : ?_58[0;0] -> ?_59[0;0]
            | _670 => B_667)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_673 : int -> int -> int
  | x_676 y_677 =>
    let loop_678 :=
      fun loop_679 : int -> int -> int
      | acc_682 y_683 =>
        match (__lte__ y_683 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_682
        | false_5 => ((loop_679) (__mul__ x_676 acc_682) (__sub__ y_683 1))
    in ((loop_678) 1 y_677)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_688 : int -> int -> int -> int
  | x_692 y_693 m_694 =>
    let loop_695 :=
      fun loop_696 : int -> int -> int
      | acc_699 y_700 =>
        match (__lte__ y_700 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_699
        | false_5 =>
          ((loop_696)
            (__mod__ (__mul__ x_692 acc_699) m_694) (__sub__ y_700 1))
    in ((loop_695) 1 y_693)

#[program]
def ord_27‹› : char -> int :=
  fun ord_703 : char -> int
  | c_705 => (__ord__ c_705)

#[program]
def chr_28‹› : int -> char :=
  fun chr_707 : int -> char
  | i_709 => (__chr__ i_709)

#[program]
def str_29‹› : char -> string :=
  fun str_711 : char -> string
  | c_713 => (__push__ "" c_713)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_715 : string -> int
  | s_717 => (__size__ s_717)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_719 : int -> string
  | i_721 =>
    let aux_722 :=
      fun aux_723 : int -> string
      | i_725 =>
        match (__lte__ 10 i_725) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_727 := (__mod__ i_725 10) in
          let i_728 := (__div__ i_725 10) in
          (__push__ ((aux_723) i_728)
            ((chr_28) (__add__ r_727 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_725 ((ord_27) 0))))
    in
    match (__lt__ 0 i_721) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_722) i_721)
    | false_5 => (__cat__ "~" ((aux_722) (__neg__ i_721)))

#[program]
def split_32‹t_730› :
  (list_6‹??_71,t_730› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_730› int) (list_6‹??_73,t_730› int))
:=
  fun split_732 :
    (list_6‹??_46,t_730› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_730› int) (list_6‹??_48,t_730› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_734 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_734 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_735 (cons_9 y_736 zs_737)) =>
    match ((split_732) zs_737) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_739 ys_740) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_735 xs_739)
        (cons_9‹??_67,??_68› ?_79[0;0] y_736 ys_740))

#[program]
def main_33‹› : IO unit_3 :=
  let* s_741 := readln tt_3 in let* __742 := print s_741 in return tt_3

-----------------------------------------

#[program]
def id_1‹s_5102› : ∀ (A_5103 : Type‹s_5102›) -> A_5103 -> A_5103 :=
  fun id_5105 : ∀ (A_5106 : Type‹s_5102›) -> A_5106 -> A_5106
  | A_5108 m_5109 => m_5109

#[logical]
inductive eq_1‹s_5110› (A_5111 : Type‹s_5110›) (m_5112 : A_5111):
  A_5111 -> U
where
| refl_1 : (eq_1‹s_5110› A_5111 m_5112 m_5112)

#[program]
def rwl_2‹s_5114,r_5115› :
  ∀ {A_5116 : Type‹s_5114›} ->
    ∀ {m_5117 : A_5116} ->
      ∀ {n_5118 : A_5116} ->
        ∀ {B_5119 : A_5116 -> Type‹r_5115›} ->
          {(eq_1‹s_5114› A_5116 m_5117 n_5118)} ->
            ((B_5119) m_5117) -> ((B_5119) n_5118)
:=
  fun rwl_5123 :
    ∀ {A_5124 : Type‹s_5114›} ->
      ∀ {m_5125 : A_5124} ->
        ∀ {n_5126 : A_5124} ->
          ∀ {B_5127 : A_5124 -> Type‹r_5115›} ->
            {(eq_1‹s_5114› A_5124 m_5125 n_5126)} ->
              ((B_5127) m_5125) -> ((B_5127) n_5126)
  | A_5131 m_5132 n_5133 B_5134 refl_1 __5135 => __5135

#[program]
def rwr_3‹s_5136,r_5137› :
  ∀ {A_5138 : Type‹s_5136›} ->
    ∀ {m_5139 : A_5138} ->
      ∀ {n_5140 : A_5138} ->
        ∀ {B_5141 : A_5138 -> Type‹r_5137›} ->
          {(eq_1‹s_5136› A_5138 m_5139 n_5140)} ->
            ((B_5141) n_5140) -> ((B_5141) m_5139)
:=
  fun rwr_5145 :
    ∀ {A_5146 : Type‹s_5136›} ->
      ∀ {m_5147 : A_5146} ->
        ∀ {n_5148 : A_5146} ->
          ∀ {B_5149 : A_5146 -> Type‹r_5137›} ->
            {(eq_1‹s_5136› A_5146 m_5147 n_5148)} ->
              ((B_5149) n_5148) -> ((B_5149) m_5147)
  | A_5153 m_5154 n_5155 B_5156 refl_1 __5157 => __5157

#[logical]
def congr_4‹s_5158,r_5159,t_5160› :
  ∀ (A_5161 : Type‹s_5158›) ->
    ∀ (B_5162 : Type‹r_5159›) ->
      ∀ (m_5163 : A_5161) ->
        ∀ (n_5164 : A_5161) ->
          ∀ (f_5165 : forall‹t_5160›(__5166 : A_5161), B_5162) ->
            (eq_1‹s_5158› A_5161 m_5163 n_5164) ->
              (eq_1‹r_5159› B_5162 ((f_5165) m_5163) ((f_5165) n_5164))
:=
  fun congr_5168 :
    ∀ (A_5169 : Type‹s_5158›) ->
      ∀ (B_5170 : Type‹r_5159›) ->
        ∀ (m_5171 : A_5169) ->
          ∀ (n_5172 : A_5169) ->
            ∀ (f_5173 : forall‹t_5160›(__5174 : A_5169), B_5170) ->
              (eq_1‹s_5158› A_5169 m_5171 n_5172) ->
                (eq_1‹r_5159› B_5170 ((f_5173) m_5171) ((f_5173) n_5172))
  | A_5176 B_5177 m_5178 n_5179 f_5180 refl_1 =>
    (refl_1‹r_5159› B_5177 ((f_5180) n_5179))

#[logical]
def axiom_K_5‹› :
  ∀ {A_5181 : U} ->
    ∀ {m_5182 : A_5181} ->
      ∀ (x_5183 : (eq_1‹U› A_5181 m_5182 m_5182)) ->
        (eq_1‹U›
          (eq_1‹U› A_5181 m_5182 m_5182) x_5183
          (refl_1‹U› A_5181 m_5182))
:=
  fun axiom_K_5184 :
    ∀ {A_5185 : U} ->
      ∀ {m_5186 : A_5185} ->
        ∀ (x_5187 : (eq_1‹U› A_5185 m_5186 m_5186)) ->
          (eq_1‹U›
            (eq_1‹U› A_5185 m_5186 m_5186) x_5187
            (refl_1‹U› A_5185 m_5186))
  | A_5188 m_5189 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_5188 m_5189 m_5189) (refl_1‹U› A_5188 m_5189))

#[program]
inductive sing_2‹s_5190,t_5191› (A_5192 : Type‹s_5190›):
  A_5192 -> Type‹t_5191›
where
| just_2 (m_5194 : A_5192) : (sing_2‹s_5190,t_5191› A_5192 m_5194)

#[logical]
def ssing_6‹s_5195› :
  ∀ (A_5196 : Type‹s_5195›) -> A_5196 -> Type‹s_5195›
:=
  fun ssing_5198 :
    ∀ (A_5199 : Type‹s_5195›) -> A_5199 -> Type‹s_5195›
  | A_5201 m_5202 => (sing_2‹s_5195,s_5195› A_5201 m_5202)

#[program]
def sing_elim_7‹s_5203,t_5204› :
  ∀ {A_5205 : Type‹s_5203›} ->
    ∀ {x_5206 : A_5205} ->
      (sing_2‹s_5203,t_5204› A_5205 x_5206) -> A_5205
:=
  fun sing_elim_5208 :
    ∀ {A_5209 : Type‹s_5203›} ->
      ∀ {x_5210 : A_5209} ->
        (sing_2‹s_5203,t_5204› A_5209 x_5210) -> A_5209
  | A_5212 x_5213 (just_2 m_5214) => m_5214

#[logical]
def sing_uniq_8‹s_5215,t_5216› :
  ∀ (A_5217 : Type‹s_5215›) ->
    ∀ (x0_5218 : A_5217) ->
      ∀ (x_5219 : (sing_2‹s_5215,t_5216› A_5217 x0_5218)) ->
        (eq_1‹s_5215›
          A_5217 x0_5218
          ((sing_elim_7‹s_5215,t_5216›) A_5217 x0_5218 x_5219))
:=
  fun sing_uniq_5220 :
    ∀ (A_5221 : Type‹s_5215›) ->
      ∀ (x0_5222 : A_5221) ->
        ∀ (x_5223 : (sing_2‹s_5215,t_5216› A_5221 x0_5222)) ->
          (eq_1‹s_5215›
            A_5221 x0_5222
            ((sing_elim_7‹s_5215,t_5216›) A_5221 x0_5222 x_5223))
  | A_5224 x0_5225 (just_2 m_5226) => (refl_1‹s_5215› A_5224 m_5226)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_5227 : unit_3) -> (eq_1‹U› unit_3 x_5227 tt_3)
:=
  fun unit_eta_5228 :
    ∀ (x_5229 : unit_3) -> (eq_1‹U› unit_3 x_5229 tt_3)
  | x_5230 =>
    match x_5230 in
      ∀ (x0_5231 : unit_3) -o (eq_1‹U› unit_3 x0_5231 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_5233 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_5237 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __5240 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_5243 : bool_4 -> bool_4 -> bool_4
  | true_4 __5246 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_5249 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_5252 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_5255 : nat_5 -> nat_5 -> bool_4
  | zero_6 __5258 => true_4
  | (succ_7 n_5259) zero_6 => false_5
  | (succ_7 n_5260) (succ_7 n_5261) => ((lte_5255) n_5260 n_5261)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_5264 : nat_5 -> nat_5 -> bool_4
  | x_5267 y_5268 => ((lte_14) (succ_7‹› x_5267) y_5268)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_5270 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_5272) => n_5272

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_5275 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5278 => __5278
  | (succ_7 n_5279) __5280 => (succ_7‹› ((add_5275) n_5279 __5280))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_5283 : nat_5 -> nat_5 -> nat_5
  | __5286 zero_6 => __5286
  | __5287 (succ_7 n_5288) => ((sub_5283) ((pred_16) __5287) n_5288)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_5291 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5294 => zero_6
  | (succ_7 n_5295) __5296 => ((add_17) __5296 ((mul_5291) n_5295 __5296))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_5299 : nat_5 -> nat_5 -> nat_5
  | x_5302 y_5303 =>
    match ((lt_15) x_5302 y_5303) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_5305 :=
        fun loop_5306 : nat_5 -> nat_5 -> nat_5
        | x_5309 y_5310 =>
          match ((sub_18) x_5309 ((pred_16) y_5310)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_5312) => (succ_7‹› ((loop_5306) n_5312 y_5310))
      in ((loop_5305) x_5302 y_5303)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_5315 : nat_5 -> nat_5 -> nat_5
  | x_5318 y_5319 =>
    ((sub_18) x_5318 ((mul_19) ((div_20) x_5318 y_5319) y_5319))

#[program]
inductive list_6‹s_5320,t_5321› (A_5322 : Type‹s_5320›):
  Type‹t_5321›
where
| nil_8 : (list_6‹s_5320,t_5321› A_5322)
| cons_9
    (hd_5323 : A_5322) (tl_5324 : (list_6‹s_5320,t_5321› A_5322))
    : (list_6‹s_5320,t_5321› A_5322)

#[program]
def free_list_22‹s_5325,t_5326› :
  ∀ {A_5327 : Type‹s_5325›} ->
    A_5327 -> unit_3 -> (list_6‹s_5325,t_5326› A_5327) -> unit_3
:=
  fun free_list_5331 :
    ∀ {A_5332 : Type‹s_5325›} ->
      A_5332 -> unit_3 -> (list_6‹s_5325,t_5326› A_5332) -> unit_3
  | A_5336 f_5337 nil_8 => tt_3
  | A_5338 f_5339 (cons_9 hd_5340 tl_5341) =>
    let __5342 := ((f_5339) hd_5340) in
    ((free_list_5331) A_5338 f_5339 tl_5341)

#[program]
inductive exists0_7‹s_5343,r_5344› (A_5345 : Type‹s_5343›) (B_5346 : 
A_5345 -> Type‹r_5344›): L where
| ex0_10
    {m_5348 : A_5345} (n_5349 : ((B_5346) m_5348))
    : (exists0_7‹s_5343,r_5344› A_5345 B_5346)

#[program]
inductive exists1_8‹s_5350,r_5351› (A_5352 : Type‹s_5350›) (B_5353 : 
A_5352 -> Type‹r_5351›): L where
| ex1_11
    (m_5355 : A_5352) (n_5356 : ((B_5353) m_5355))
    : (exists1_8‹s_5350,r_5351› A_5352 B_5353)

#[logical]
def prod0_23‹s_5357,r_5358› : Type‹s_5357› -> Type‹r_5358› -> L
:=
  fun prod0_5361 : Type‹s_5357› -> Type‹r_5358› -> L
  | A_5364 B_5365 =>
    (exists0_7‹s_5357,r_5358›
      A_5364 fun _5366 : A_5364 -> Type‹r_5358›
             | __5368 => B_5365)

#[logical]
def prod1_24‹s_5369,r_5370› : Type‹s_5369› -> Type‹r_5370› -> L
:=
  fun prod1_5373 : Type‹s_5369› -> Type‹r_5370› -> L
  | A_5376 B_5377 =>
    (exists1_8‹s_5369,r_5370›
      A_5376 fun _5378 : A_5376 -> Type‹r_5370›
             | __5380 => B_5377)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_5383 : int -> int -> int
  | x_5386 y_5387 =>
    let loop_5388 :=
      fun loop_5389 : int -> int -> int
      | acc_5392 y_5393 =>
        match (__lte__ y_5393 0) in bool_4 -o int with
        | true_4 => acc_5392
        | false_5 =>
          ((loop_5389) (__mul__ x_5386 acc_5392) (__sub__ y_5393 1))
    in ((loop_5388) 1 y_5387)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_5398 : int -> int -> int -> int
  | x_5402 y_5403 m_5404 =>
    let loop_5405 :=
      fun loop_5406 : int -> int -> int
      | acc_5409 y_5410 =>
        match (__lte__ y_5410 0) in bool_4 -o int with
        | true_4 => acc_5409
        | false_5 =>
          ((loop_5406)
            (__mod__ (__mul__ x_5402 acc_5409) m_5404) (__sub__ y_5410 1))
    in ((loop_5405) 1 y_5403)

#[program]
def ord_27‹› : char -> int :=
  fun ord_5413 : char -> int
  | c_5415 => (__ord__ c_5415)

#[program]
def chr_28‹› : int -> char :=
  fun chr_5417 : int -> char
  | i_5419 => (__chr__ i_5419)

#[program]
def str_29‹› : char -> string :=
  fun str_5421 : char -> string
  | c_5423 => (__push__ "" c_5423)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_5425 : string -> int
  | s_5427 => (__size__ s_5427)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_5429 : int -> string
  | i_5431 =>
    let aux_5432 :=
      fun aux_5433 : int -> string
      | i_5435 =>
        match (__lte__ 10 i_5435) in bool_4 -o string with
        | true_4 =>
          let r_5437 := (__mod__ i_5435 10) in
          let i_5438 := (__div__ i_5435 10) in
          (__push__ ((aux_5433) i_5438)
            ((chr_28) (__add__ r_5437 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_5435 ((ord_27) 0))))
    in
    match (__lt__ 0 i_5431) in bool_4 -o string with
    | true_4 => ((aux_5432) i_5431)
    | false_5 => (__cat__ "~" ((aux_5432) (__neg__ i_5431)))

#[program]
def split_32‹t_5440› :
  (list_6‹U,t_5440› int) ->
    ((prod1_24‹t_5440,t_5440›)
      (list_6‹U,t_5440› int) (list_6‹U,t_5440› int))
:=
  fun split_5442 :
    (list_6‹U,t_5440› int) ->
      ((prod1_24‹t_5440,t_5440›)
        (list_6‹U,t_5440› int) (list_6‹U,t_5440› int))
  | nil_8 =>
    (ex1_11‹t_5440,t_5440›
      (list_6‹U,t_5440› int)
      fun _5444 : (list_6‹U,t_5440› int) -> Type‹t_5440›
      | __5446 => (list_6‹U,t_5440› int) (nil_8‹U,t_5440› int)
      (nil_8‹U,t_5440› int))
  | (cons_9 hd_5447 nil_8) =>
    (ex1_11‹t_5440,t_5440›
      (list_6‹U,t_5440› int)
      fun _5448 : (list_6‹U,t_5440› int) -> Type‹t_5440›
      | __5450 => (list_6‹U,t_5440› int)
      (cons_9‹U,t_5440› int hd_5447 (nil_8‹U,t_5440› int))
      (nil_8‹U,t_5440› int))
  | (cons_9 hd_5451 (cons_9 hd_5452 tl_5453)) =>
    match ((split_5442) tl_5453) in
      ((prod1_24‹t_5440,t_5440›)
        (list_6‹U,t_5440› int) (list_6‹U,t_5440› int)) -o
        ((prod1_24‹t_5440,t_5440›)
          (list_6‹U,t_5440› int) (list_6‹U,t_5440› int))
    with
    | (ex1_11 m_5455 n_5456) =>
      (ex1_11‹t_5440,t_5440›
        (list_6‹U,t_5440› int)
        fun _5457 : (list_6‹U,t_5440› int) -> Type‹t_5440›
        | __5459 => (list_6‹U,t_5440› int)
        (cons_9‹U,t_5440› int hd_5451 m_5455)
        (cons_9‹U,t_5440› int hd_5452 n_5456))

#[program]
def main_33‹› : IO unit_3 :=
  let* s_5460 := readln tt_3 in let* __5461 := print s_5460 in return tt_3

-----------------------------------------

#[program]
def idU_35 := fun id_9018 (A_9019) -> (m_9020) ->
                m_9020

#[program]
def idL_34 := fun id_9021 (A_9022) -> (m_9023) ->
                m_9023

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_39 :=
  fun rwl_9024 {A_9025} -> {m_9026} -> {n_9027} -> {B_9028} -> {__9029} ->
  (__9030) ->
    match {NULL} with
    | reflU_13  => __9030
    end

#[program]
def rwlUL_38 :=
  fun rwl_9031 {A_9032} -> {m_9033} -> {n_9034} -> {B_9035} -> {__9036} ->
  (__9037) ->
    match {NULL} with
    | reflU_13  => __9037
    end

#[program]
def rwlLU_37 :=
  fun rwl_9038 {A_9039} -> {m_9040} -> {n_9041} -> {B_9042} -> {__9043} ->
  (__9044) ->
    match {NULL} with
    | reflL_12  => __9044
    end

#[program]
def rwlLL_36 :=
  fun rwl_9045 {A_9046} -> {m_9047} -> {n_9048} -> {B_9049} -> {__9050} ->
  (__9051) ->
    match {NULL} with
    | reflL_12  => __9051
    end

#[program]
def rwrUU_43 :=
  fun rwr_9052 {A_9053} -> {m_9054} -> {n_9055} -> {B_9056} -> {__9057} ->
  (__9058) ->
    match {NULL} with
    | reflU_13  => __9058
    end

#[program]
def rwrUL_42 :=
  fun rwr_9059 {A_9060} -> {m_9061} -> {n_9062} -> {B_9063} -> {__9064} ->
  (__9065) ->
    match {NULL} with
    | reflU_13  => __9065
    end

#[program]
def rwrLU_41 :=
  fun rwr_9066 {A_9067} -> {m_9068} -> {n_9069} -> {B_9070} -> {__9071} ->
  (__9072) ->
    match {NULL} with
    | reflL_12  => __9072
    end

#[program]
def rwrLL_40 :=
  fun rwr_9073 {A_9074} -> {m_9075} -> {n_9076} -> {B_9077} -> {__9078} ->
  (__9079) ->
    match {NULL} with
    | reflL_12  => __9079
    end

#[logical]
def congrUUU_51 := NULL

#[logical]
def congrUUL_50 := NULL

#[logical]
def congrULU_49 := NULL

#[logical]
def congrULL_48 := NULL

#[logical]
def congrLUU_47 := NULL

#[logical]
def congrLUL_46 := NULL

#[logical]
def congrLLU_45 := NULL

#[logical]
def congrLLL_44 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_53 := NULL

#[logical]
def ssingL_52 := NULL

#[program]
def sing_elimUU_57 :=
  fun sing_elim_9080 {A_9081} -> {x_9082} -> (__9083) ->
    match __9083 with
    | justUU_17 m_9084 => m_9084
    end

#[program]
def sing_elimUL_56 :=
  fun sing_elim_9085 {A_9086} -> {x_9087} -> (__9088) ->
    match __9088 with
    | justUL_16 m_9089 => m_9089
    end

#[program]
def sing_elimLU_55 :=
  fun sing_elim_9090 {A_9091} -> {x_9092} -> (__9093) ->
    match __9093 with
    
    end

#[program]
def sing_elimLL_54 :=
  fun sing_elim_9094 {A_9095} -> {x_9096} -> (__9097) ->
    match __9097 with
    | justLL_14 m_9098 => m_9098
    end

#[logical]
def sing_uniqUU_61 := NULL

#[logical]
def sing_uniqUL_60 := NULL

#[logical]
def sing_uniqLU_59 := NULL

#[logical]
def sing_uniqLL_58 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_9099 (__9100) ->
    match __9100 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_9101 (__9102) -> (__9103) ->
    match __9102 with
    | true_4  =>
      match __9103 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_9104 (__9105) -> (__9106) ->
    match __9105 with
    | true_4  => true_4
    | false_5  =>
      match __9106 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_9107 (__9108) -> (__9109) -o
    match __9108 with
    | true_4  =>
      match __9109 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __9109 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_9110 (__9111) -> (__9112) ->
    match __9111 with
    | zero_6  => true_4
    | succ_7 n_9113 =>
      match __9112 with
      | zero_6  => false_5 | succ_7 n_9114 => ((lte_9110) n_9113 n_9114)
      end
    end

#[program]
def lt_15 :=
  fun lt_9115 (x_9116) -> (y_9117) ->
    ((lte_14) (succ_7 x_9116) y_9117)

#[program]
def pred_16 :=
  fun pred_9118 (__9119) ->
    match __9119 with
    | zero_6  => zero_6 | succ_7 n_9120 => n_9120
    end

#[program]
def add_17 :=
  fun add_9121 (__9122) -> (__9123) ->
    match __9122 with
    | zero_6  => __9123
    | succ_7 n_9124 => (succ_7 ((add_9121) n_9124 __9123))
    end

#[program]
def sub_18 :=
  fun sub_9125 (__9126) -> (__9127) ->
    match __9127 with
    | zero_6  => __9126
    | succ_7 n_9128 => ((sub_9125) ((pred_16) __9126) n_9128)
    end

#[program]
def mul_19 :=
  fun mul_9129 (__9130) -> (__9131) ->
    match __9130 with
    | zero_6  => zero_6
    | succ_7 n_9132 => ((add_17) __9131 ((mul_9129) n_9132 __9131))
    end

#[program]
def div_20 :=
  fun div_9133 (x_9134) -> (y_9135) ->
    match ((lt_15) x_9134 y_9135) with
    | true_4  => zero_6
    | false_5  =>
      let loop_9136 :=
        fun loop_9137 (x_9138) -> (y_9139) ->
          match ((sub_18) x_9138 ((pred_16) y_9139)) with
          | zero_6  => zero_6
          | succ_7 n_9140 => (succ_7 ((loop_9137) n_9140 y_9139))
          end
      in ((loop_9136) x_9134 y_9135)
    end

#[program]
def rem_21 :=
  fun rem_9141 (x_9142) -> (y_9143) ->
    ((sub_18) x_9142 ((mul_19) ((div_20) x_9142 y_9143) y_9143))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_65 :=
  fun free_list_9144 {A_9145} -> (f_9146) -> (__9147) ->
    match __9147 with
    | nilUU_24  => tt_3
    | consUU_25 hd_9148 tl_9149 =>
      let __9150 := ((f_9146) hd_9148) in
      ((free_list_9144) NULL f_9146 tl_9149)
    end

#[program]
def free_listUL_64 :=
  fun free_list_9151 {A_9152} -> (f_9153) -> (__9154) ->
    match __9154 with
    | nilUL_22  => tt_3
    | consUL_23 hd_9155 tl_9156 =>
      let __9157 := ((f_9153) hd_9155) in
      ((free_list_9151) NULL f_9153 tl_9156)
    end

#[program]
def free_listLL_62 :=
  fun free_list_9158 {A_9159} -> (f_9160) -> (__9161) ->
    match __9161 with
    | nilLL_18  => tt_3
    | consLL_19 hd_9162 tl_9163 =>
      let __9164 := ((f_9160) hd_9162) in
      ((free_list_9158) NULL f_9160 tl_9163)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_69 := NULL

#[logical]
def prod0UL_68 := NULL

#[logical]
def prod0LU_67 := NULL

#[logical]
def prod0LL_66 := NULL

#[logical]
def prod1UU_73 := NULL

#[logical]
def prod1UL_72 := NULL

#[logical]
def prod1LU_71 := NULL

#[logical]
def prod1LL_70 := NULL

#[program]
def pow_25 :=
  fun pow_9165 (x_9166) -> (y_9167) ->
    let loop_9168 :=
      fun loop_9169 (acc_9170) -> (y_9171) ->
        match (__lte__ y_9171 0) with
        | true_4  => acc_9170
        | false_5  =>
          ((loop_9169) (__mul__ x_9166 acc_9170) (__sub__ y_9171 1))
        end
    in ((loop_9168) 1 y_9167)

#[program]
def powm_26 :=
  fun powm_9172 (x_9173) -> (y_9174) -> (m_9175) ->
    let loop_9176 :=
      fun loop_9177 (acc_9178) -> (y_9179) ->
        match (__lte__ y_9179 0) with
        | true_4  => acc_9178
        | false_5  =>
          ((loop_9177)
            (__mod__ (__mul__ x_9173 acc_9178) m_9175) (__sub__ y_9179 1))
        end
    in ((loop_9176) 1 y_9174)

#[program]
def ord_27 := fun ord_9180 (c_9181) ->
                (__ord__ c_9181)

#[program]
def chr_28 := fun chr_9182 (i_9183) ->
                (__chr__ i_9183)

#[program]
def str_29 := fun str_9184 (c_9185) ->
                (__push__ "" c_9185)

#[program]
def strlen_30 := fun strlen_9186 (s_9187) ->
                   (__size__ s_9187)

#[program]
def string_of_int_31 :=
  fun string_of_int_9188 (i_9189) ->
    let aux_9190 :=
      fun aux_9191 (i_9192) ->
        match (__lte__ 10 i_9192) with
        | true_4  =>
          let r_9193 := (__mod__ i_9192 10) in
          let i_9194 := (__div__ i_9192 10) in
          (__push__ ((aux_9191) i_9194)
            ((chr_28) (__add__ r_9193 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_9192 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_9189) with
    | true_4  => ((aux_9190) i_9189)
    | false_5  => (__cat__ "~" ((aux_9190) (__neg__ i_9189)))
    end

#[program]
def splitU_75 :=
  fun split_9195 (__9196) ->
    match __9196 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_9197 tl_9198 =>
      match tl_9198 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9197 nilUU_24) nilUU_24)
      | consUU_25 hd_9199 tl_9200 =>
        match ((split_9195) tl_9200) with
        | ex1UU_33 m_9201 n_9202 =>
          (ex1UU_33 (consUU_25 hd_9197 m_9201) (consUU_25 hd_9199 n_9202))
        end
      end
    end

#[program]
def splitL_74 :=
  fun split_9203 (__9204) ->
    match __9204 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_9205 tl_9206 =>
      match tl_9206 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9205 nilUL_22) nilUL_22)
      | consUL_23 hd_9207 tl_9208 =>
        match ((split_9203) tl_9208) with
        | ex1LL_30 m_9209 n_9210 =>
          (ex1LL_30 (consUL_23 hd_9205 m_9209) (consUL_23 hd_9207 n_9210))
        end
      end
    end

#[program]
def main :=
  let* s_9211 := readln tt_3 in let* __9212 := print s_9211 in return tt_3

-----------------------------------------

#[program]
def idU_35 := fun id_9408 (A_9409) -> (m_9410) ->
                m_9410

#[program]
def idL_34 := fun id_9411 (A_9412) -> (m_9413) ->
                m_9413

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_39 :=
  fun rwl_9414 {A_9415} -> {m_9416} -> {n_9417} -> {B_9418} -> {__9419} ->
  (__9420) ->
    __9420

#[program]
def rwlUL_38 :=
  fun rwl_9421 {A_9422} -> {m_9423} -> {n_9424} -> {B_9425} -> {__9426} ->
  (__9427) ->
    __9427

#[program]
def rwlLU_37 :=
  fun rwl_9428 {A_9429} -> {m_9430} -> {n_9431} -> {B_9432} -> {__9433} ->
  (__9434) ->
    __9434

#[program]
def rwlLL_36 :=
  fun rwl_9435 {A_9436} -> {m_9437} -> {n_9438} -> {B_9439} -> {__9440} ->
  (__9441) ->
    __9441

#[program]
def rwrUU_43 :=
  fun rwr_9442 {A_9443} -> {m_9444} -> {n_9445} -> {B_9446} -> {__9447} ->
  (__9448) ->
    __9448

#[program]
def rwrUL_42 :=
  fun rwr_9449 {A_9450} -> {m_9451} -> {n_9452} -> {B_9453} -> {__9454} ->
  (__9455) ->
    __9455

#[program]
def rwrLU_41 :=
  fun rwr_9456 {A_9457} -> {m_9458} -> {n_9459} -> {B_9460} -> {__9461} ->
  (__9462) ->
    __9462

#[program]
def rwrLL_40 :=
  fun rwr_9463 {A_9464} -> {m_9465} -> {n_9466} -> {B_9467} -> {__9468} ->
  (__9469) ->
    __9469

#[logical]
def congrUUU_51 := NULL

#[logical]
def congrUUL_50 := NULL

#[logical]
def congrULU_49 := NULL

#[logical]
def congrULL_48 := NULL

#[logical]
def congrLUU_47 := NULL

#[logical]
def congrLUL_46 := NULL

#[logical]
def congrLLU_45 := NULL

#[logical]
def congrLLL_44 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_53 := NULL

#[logical]
def ssingL_52 := NULL

#[program]
def sing_elimUU_57 :=
  fun sing_elim_9470 {A_9471} -> {x_9472} -> (__9473) ->
    match __9473 with
    | justUU_17 m_9474 => m_9474
    end

#[program]
def sing_elimUL_56 :=
  fun sing_elim_9475 {A_9476} -> {x_9477} -> (__9478) ->
    match __9478 with
    | justUL_16 m_9479 => m_9479
    end

#[program]
def sing_elimLU_55 :=
  fun sing_elim_9480 {A_9481} -> {x_9482} -> (__9483) ->
    !!

#[program]
def sing_elimLL_54 :=
  fun sing_elim_9484 {A_9485} -> {x_9486} -> (__9487) ->
    match __9487 with
    | justLL_14 m_9488 => m_9488
    end

#[logical]
def sing_uniqUU_61 := NULL

#[logical]
def sing_uniqUL_60 := NULL

#[logical]
def sing_uniqLU_59 := NULL

#[logical]
def sing_uniqLL_58 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_9489 (__9490) ->
    match __9490 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_9491 (__9492) -> (__9493) ->
    match __9492 with
    | true_4  =>
      match __9493 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_9494 (__9495) -> (__9496) ->
    match __9495 with
    | true_4  => true_4
    | false_5  =>
      match __9496 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_9497 (__9498) -> (__9499) -o
    match __9498 with
    | true_4  =>
      match __9499 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __9499 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_9500 (__9501) -> (__9502) ->
    match __9501 with
    | zero_6  => true_4
    | succ_7 n_9503 =>
      match __9502 with
      | zero_6  => false_5 | succ_7 n_9504 => ((lte_9500) n_9503 n_9504)
      end
    end

#[program]
def lt_15 :=
  fun lt_9505 (x_9506) -> (y_9507) ->
    ((lte_14) (succ_7 x_9506) y_9507)

#[program]
def pred_16 :=
  fun pred_9508 (__9509) ->
    match __9509 with
    | zero_6  => zero_6 | succ_7 n_9510 => n_9510
    end

#[program]
def add_17 :=
  fun add_9511 (__9512) -> (__9513) ->
    match __9512 with
    | zero_6  => __9513
    | succ_7 n_9514 => (succ_7 ((add_9511) n_9514 __9513))
    end

#[program]
def sub_18 :=
  fun sub_9515 (__9516) -> (__9517) ->
    match __9517 with
    | zero_6  => __9516
    | succ_7 n_9518 => ((sub_9515) ((pred_16) __9516) n_9518)
    end

#[program]
def mul_19 :=
  fun mul_9519 (__9520) -> (__9521) ->
    match __9520 with
    | zero_6  => zero_6
    | succ_7 n_9522 => ((add_17) __9521 ((mul_9519) n_9522 __9521))
    end

#[program]
def div_20 :=
  fun div_9523 (x_9524) -> (y_9525) ->
    match ((lt_15) x_9524 y_9525) with
    | true_4  => zero_6
    | false_5  =>
      let loop_9526 :=
        fun loop_9527 (x_9528) -> (y_9529) ->
          match ((sub_18) x_9528 ((pred_16) y_9529)) with
          | zero_6  => zero_6
          | succ_7 n_9530 => (succ_7 ((loop_9527) n_9530 y_9529))
          end
      in ((loop_9526) x_9524 y_9525)
    end

#[program]
def rem_21 :=
  fun rem_9531 (x_9532) -> (y_9533) ->
    ((sub_18) x_9532 ((mul_19) ((div_20) x_9532 y_9533) y_9533))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_65 :=
  fun free_list_9534 {A_9535} -> (f_9536) -> (__9537) ->
    match __9537 with
    | nilUU_24  => tt_3
    | consUU_25 hd_9538 tl_9539 =>
      let __9540 := ((f_9536) hd_9538) in
      ((free_list_9534) NULL f_9536 tl_9539)
    end

#[program]
def free_listUL_64 :=
  fun free_list_9541 {A_9542} -> (f_9543) -> (__9544) ->
    match __9544 with
    | nilUL_22  => tt_3
    | consUL_23 hd_9545 tl_9546 =>
      let __9547 := ((f_9543) hd_9545) in
      ((free_list_9541) NULL f_9543 tl_9546)
    end

#[program]
def free_listLL_62 :=
  fun free_list_9548 {A_9549} -> (f_9550) -> (__9551) ->
    match __9551 with
    | nilLL_18  => tt_3
    | consLL_19 hd_9552 tl_9553 =>
      let __9554 := ((f_9550) hd_9552) in
      ((free_list_9548) NULL f_9550 tl_9553)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_69 := NULL

#[logical]
def prod0UL_68 := NULL

#[logical]
def prod0LU_67 := NULL

#[logical]
def prod0LL_66 := NULL

#[logical]
def prod1UU_73 := NULL

#[logical]
def prod1UL_72 := NULL

#[logical]
def prod1LU_71 := NULL

#[logical]
def prod1LL_70 := NULL

#[program]
def pow_25 :=
  fun pow_9555 (x_9556) -> (y_9557) ->
    let loop_9558 :=
      fun loop_9559 (acc_9560) -> (y_9561) ->
        match (__lte__ y_9561 0) with
        | true_4  => acc_9560
        | false_5  =>
          ((loop_9559) (__mul__ x_9556 acc_9560) (__sub__ y_9561 1))
        end
    in ((loop_9558) 1 y_9557)

#[program]
def powm_26 :=
  fun powm_9562 (x_9563) -> (y_9564) -> (m_9565) ->
    let loop_9566 :=
      fun loop_9567 (acc_9568) -> (y_9569) ->
        match (__lte__ y_9569 0) with
        | true_4  => acc_9568
        | false_5  =>
          ((loop_9567)
            (__mod__ (__mul__ x_9563 acc_9568) m_9565) (__sub__ y_9569 1))
        end
    in ((loop_9566) 1 y_9564)

#[program]
def ord_27 := fun ord_9570 (c_9571) ->
                (__ord__ c_9571)

#[program]
def chr_28 := fun chr_9572 (i_9573) ->
                (__chr__ i_9573)

#[program]
def str_29 := fun str_9574 (c_9575) ->
                (__push__ "" c_9575)

#[program]
def strlen_30 := fun strlen_9576 (s_9577) ->
                   (__size__ s_9577)

#[program]
def string_of_int_31 :=
  fun string_of_int_9578 (i_9579) ->
    let aux_9580 :=
      fun aux_9581 (i_9582) ->
        match (__lte__ 10 i_9582) with
        | true_4  =>
          let r_9583 := (__mod__ i_9582 10) in
          let i_9584 := (__div__ i_9582 10) in
          (__push__ ((aux_9581) i_9584)
            ((chr_28) (__add__ r_9583 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_9582 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_9579) with
    | true_4  => ((aux_9580) i_9579)
    | false_5  => (__cat__ "~" ((aux_9580) (__neg__ i_9579)))
    end

#[program]
def splitU_75 :=
  fun split_9585 (__9586) ->
    match __9586 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_9587 tl_9588 =>
      match tl_9588 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9587 nilUU_24) nilUU_24)
      | consUU_25 hd_9589 tl_9590 =>
        match ((split_9585) tl_9590) with
        | ex1UU_33 m_9591 n_9592 =>
          (ex1UU_33 (consUU_25 hd_9587 m_9591) (consUU_25 hd_9589 n_9592))
        end
      end
    end

#[program]
def splitL_74 :=
  fun split_9593 (__9594) ->
    match __9594 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_9595 tl_9596 =>
      match tl_9596 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9595 nilUL_22) nilUL_22)
      | consUL_23 hd_9597 tl_9598 =>
        match ((split_9593) tl_9598) with
        | ex1LL_30 m_9599 n_9600 =>
          (ex1LL_30 (consUL_23 hd_9595 m_9599) (consUL_23 hd_9597 n_9600))
        end
      end
    end

#[program]
def main :=
  let* s_9601 := readln tt_3 in let* __9602 := print s_9601 in return tt_3

-----------------------------------------

def idU_35 := fun id_9798 (A_9799) -> (m_9800) -> m_9800

def idL_34 := fun id_9801 (A_9802) -> (m_9803) -> m_9803

def rwlUU_39 :=
  fun rwl_9804 (A_9805) -> (m_9806) -> (n_9807) -> (B_9808) -> (__9809) ->
  (__9810) -> __9810

def rwlUL_38 :=
  fun rwl_9811 (A_9812) -> (m_9813) -> (n_9814) -> (B_9815) -> (__9816) ->
  (__9817) -> __9817

def rwlLU_37 :=
  fun rwl_9818 (A_9819) -> (m_9820) -> (n_9821) -> (B_9822) -> (__9823) ->
  (__9824) -> __9824

def rwlLL_36 :=
  fun rwl_9825 (A_9826) -> (m_9827) -> (n_9828) -> (B_9829) -> (__9830) ->
  (__9831) -> __9831

def rwrUU_43 :=
  fun rwr_9832 (A_9833) -> (m_9834) -> (n_9835) -> (B_9836) -> (__9837) ->
  (__9838) -> __9838

def rwrUL_42 :=
  fun rwr_9839 (A_9840) -> (m_9841) -> (n_9842) -> (B_9843) -> (__9844) ->
  (__9845) -> __9845

def rwrLU_41 :=
  fun rwr_9846 (A_9847) -> (m_9848) -> (n_9849) -> (B_9850) -> (__9851) ->
  (__9852) -> __9852

def rwrLL_40 :=
  fun rwr_9853 (A_9854) -> (m_9855) -> (n_9856) -> (B_9857) -> (__9858) ->
  (__9859) -> __9859

def sing_elimUU_57 :=
  fun sing_elim_9860 (A_9861) -> (x_9862) -> (__9863) -> __9863

def sing_elimUL_56 :=
  fun sing_elim_9864 (A_9865) -> (x_9866) -> (__9867) -> __9867

def sing_elimLU_55 :=
  fun sing_elim_9868 (A_9869) -> (x_9870) -> (__9871) -> !!

def sing_elimLL_54 :=
  fun sing_elim_9872 (A_9873) -> (x_9874) -> (__9875) -> __9875

def not_10 :=
  fun not_9876 (__9877) ->
    match __9877 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_9878 (__9879) -> (__9880) ->
    match __9879 with
    | true_4 => match __9880 with
                | true_4 => true_4 | false_5 => false_5
                end
    | false_5 => false_5
    end

def or_12 :=
  fun or_9881 (__9882) -> (__9883) ->
    match __9882 with
    | true_4 => true_4
    | false_5 =>
      match __9883 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_9884 (__9885) -> (__9886) -o
    match __9885 with
    | true_4 => match __9886 with
                | true_4 => false_5 | false_5 => true_4
                end
    | false_5 =>
      match __9886 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_9887 (__9888) -> (__9889) ->
    match __9888 with
    | zero_6  => true_4
    | succ_7 n_9890 =>
      match __9889 with
      | zero_6  => false_5 | succ_7 n_9891 => ((lte_9887) n_9890 n_9891)
      end
    end

def lt_15 :=
  fun lt_9892 (x_9893) -> (y_9894) -> ((lte_14) (succ_7 x_9893) y_9894)

def pred_16 :=
  fun pred_9895 (__9896) ->
    match __9896 with
    | zero_6  => (zero_6 ) | succ_7 n_9897 => n_9897
    end

def add_17 :=
  fun add_9898 (__9899) -> (__9900) ->
    match __9899 with
    | zero_6  => __9900
    | succ_7 n_9901 => (succ_7 ((add_9898) n_9901 __9900))
    end

def sub_18 :=
  fun sub_9902 (__9903) -> (__9904) ->
    match __9904 with
    | zero_6  => __9903
    | succ_7 n_9905 => ((sub_9902) ((pred_16) __9903) n_9905)
    end

def mul_19 :=
  fun mul_9906 (__9907) -> (__9908) ->
    match __9907 with
    | zero_6  => (zero_6 )
    | succ_7 n_9909 => ((add_17) __9908 ((mul_9906) n_9909 __9908))
    end

def div_20 :=
  fun div_9910 (x_9911) -> (y_9912) ->
    match ((lt_15) x_9911 y_9912) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_9913 :=
        fun loop_9914 (x_9915) -> (y_9916) ->
          match ((sub_18) x_9915 ((pred_16) y_9916)) with
          | zero_6  => (zero_6 )
          | succ_7 n_9917 => (succ_7 ((loop_9914) n_9917 y_9916))
          end
      in ((loop_9913) x_9911 y_9912)
    end

def rem_21 :=
  fun rem_9918 (x_9919) -> (y_9920) ->
    ((sub_18) x_9919 ((mul_19) ((div_20) x_9919 y_9920) y_9920))

def free_listUU_65 :=
  fun free_list_9921 (A_9922) -> (f_9923) -> (__9924) ->
    match __9924 with
    | nilUU_24  => tt_3
    | consUU_25 hd_9925 tl_9926 =>
      let __9927 := ((f_9923) hd_9925) in
      ((free_list_9921) NULL f_9923 tl_9926)
    end

def free_listUL_64 :=
  fun free_list_9928 (A_9929) -> (f_9930) -> (__9931) ->
    match __9931 with
    | nilUL_22  => tt_3
    | consUL_23 hd_9932 tl_9933 =>
      let __9934 := ((f_9930) hd_9932) in
      ((free_list_9928) NULL f_9930 tl_9933)
    end

def free_listLL_62 :=
  fun free_list_9935 (A_9936) -> (f_9937) -> (__9938) ->
    match __9938 with
    | nilLL_18  => tt_3
    | consLL_19 hd_9939 tl_9940 =>
      let __9941 := ((f_9937) hd_9939) in
      ((free_list_9935) NULL f_9937 tl_9940)
    end

def pow_25 :=
  fun pow_9942 (x_9943) -> (y_9944) ->
    let loop_9945 :=
      fun loop_9946 (acc_9947) -> (y_9948) ->
        match (__lte__ y_9948 0) with
        | true_4 => acc_9947
        | false_5 =>
          ((loop_9946) (__mul__ x_9943 acc_9947) (__sub__ y_9948 1))
        end
    in ((loop_9945) 1 y_9944)

def powm_26 :=
  fun powm_9949 (x_9950) -> (y_9951) -> (m_9952) ->
    let loop_9953 :=
      fun loop_9954 (acc_9955) -> (y_9956) ->
        match (__lte__ y_9956 0) with
        | true_4 => acc_9955
        | false_5 =>
          ((loop_9954)
            (__mod__ (__mul__ x_9950 acc_9955) m_9952) (__sub__ y_9956 1))
        end
    in ((loop_9953) 1 y_9951)

def ord_27 := fun ord_9957 (c_9958) -> (__ord__ c_9958)

def chr_28 := fun chr_9959 (i_9960) -> (__chr__ i_9960)

def str_29 := fun str_9961 (c_9962) -> (__push__ "" c_9962)

def strlen_30 := fun strlen_9963 (s_9964) -> (__size__ s_9964)

def string_of_int_31 :=
  fun string_of_int_9965 (i_9966) ->
    let aux_9967 :=
      fun aux_9968 (i_9969) ->
        match (__lte__ 10 i_9969) with
        | true_4 =>
          let r_9970 := (__mod__ i_9969 10) in
          let i_9971 := (__div__ i_9969 10) in
          (__push__ ((aux_9968) i_9971)
            ((chr_28) (__add__ r_9970 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_9969 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_9966) with
    | true_4 => ((aux_9967) i_9966)
    | false_5 => (__cat__ "~" ((aux_9967) (__neg__ i_9966)))
    end

def splitU_75 :=
  fun split_9972 (__9973) ->
    match __9973 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_9974 tl_9975 =>
      match tl_9975 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9974 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_9976 tl_9977 =>
        match ((split_9972) tl_9977) with
        | ex1UU_33 m_9978 n_9979 =>
          (ex1UU_33 (consUU_25 hd_9974 m_9978) (consUU_25 hd_9976 n_9979))
        end
      end
    end

def splitL_74 :=
  fun split_9980 (__9981) ->
    match __9981 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_9982 tl_9983 =>
      match tl_9983 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9982 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_9984 tl_9985 =>
        match ((split_9980) tl_9985) with
        | ex1LL_30 m_9986 n_9987 =>
          (ex1LL_30 (consUL_23 hd_9982 m_9986) (consUL_23 hd_9984 n_9987))
        end
      end
    end

def main :=
  lazy(let s_9988 := force(lazy(readln tt_3)) in
       let __9989 := force(lazy(print s_9988)) in force(lazy(tt_3)))

-----------------------------------------

def idU_35 := lam (A_10182) -> (m_10183) -> m_10183

def idL_34 := lam (A_10184) -> (m_10185) -> m_10185

def rwlUU_39 :=
  lam (A_10186) -> (m_10187) -> (n_10188) -> (B_10189) -> (__10190) ->
  (__10191) -> __10191

def rwlUL_38 :=
  lam (A_10192) -> (m_10193) -> (n_10194) -> (B_10195) -> (__10196) ->
  (__10197) -> __10197

def rwlLU_37 :=
  lam (A_10198) -> (m_10199) -> (n_10200) -> (B_10201) -> (__10202) ->
  (__10203) -> __10203

def rwlLL_36 :=
  lam (A_10204) -> (m_10205) -> (n_10206) -> (B_10207) -> (__10208) ->
  (__10209) -> __10209

def rwrUU_43 :=
  lam (A_10210) -> (m_10211) -> (n_10212) -> (B_10213) -> (__10214) ->
  (__10215) -> __10215

def rwrUL_42 :=
  lam (A_10216) -> (m_10217) -> (n_10218) -> (B_10219) -> (__10220) ->
  (__10221) -> __10221

def rwrLU_41 :=
  lam (A_10222) -> (m_10223) -> (n_10224) -> (B_10225) -> (__10226) ->
  (__10227) -> __10227

def rwrLL_40 :=
  lam (A_10228) -> (m_10229) -> (n_10230) -> (B_10231) -> (__10232) ->
  (__10233) -> __10233

def sing_elimUU_57 := lam (A_10234) -> (x_10235) -> (__10236) -> __10236

def sing_elimUL_56 := lam (A_10237) -> (x_10238) -> (__10239) -> __10239

def sing_elimLU_55 := lam (A_10240) -> (x_10241) -> (__10242) -> !!

def sing_elimLL_54 := lam (A_10243) -> (x_10244) -> (__10245) -> __10245

def not_10 :=
  lam (__10246) ->
    match __10246 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__10247) -> (__10248) ->
    match __10247 with
    | true_4 =>
      match __10248 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__10249) -> (__10250) ->
    match __10249 with
    | true_4 => true_4
    | false_5 =>
      match __10250 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__10251) -> (__10252) -o
    match __10251 with
    | true_4 =>
      match __10252 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __10252 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_10253 (__10254) -> (__10255) ->
    match __10254 with
    | zero_6  => true_4
    | succ_7 n_10256 =>
      match __10255 with
      | zero_6  => false_5 | succ_7 n_10257 => ((lte_10253) n_10256 n_10257)
      end
    end

def lt_15 :=
  lam (x_10258) -> (y_10259) -> ((lte_14) (succ_7 x_10258) y_10259)

def pred_16 :=
  lam (__10260) ->
    match __10260 with
    | zero_6  => (zero_6 ) | succ_7 n_10261 => n_10261
    end

def add_17 :=
  fun add_10262 (__10263) -> (__10264) ->
    match __10263 with
    | zero_6  => __10264
    | succ_7 n_10265 => (succ_7 ((add_10262) n_10265 __10264))
    end

def sub_18 :=
  fun sub_10266 (__10267) -> (__10268) ->
    match __10268 with
    | zero_6  => __10267
    | succ_7 n_10269 => ((sub_10266) ((pred_16) __10267) n_10269)
    end

def mul_19 :=
  fun mul_10270 (__10271) -> (__10272) ->
    match __10271 with
    | zero_6  => (zero_6 )
    | succ_7 n_10273 => ((add_17) __10272 ((mul_10270) n_10273 __10272))
    end

def div_20 :=
  lam (x_10274) -> (y_10275) ->
    match ((lt_15) x_10274 y_10275) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_10276 :=
        fun loop_10277 (x_10278) -> (y_10279) ->
          match ((sub_18) x_10278 ((pred_16) y_10279)) with
          | zero_6  => (zero_6 )
          | succ_7 n_10280 => (succ_7 ((loop_10277) n_10280 y_10279))
          end
      in ((loop_10276) x_10274 y_10275)
    end

def rem_21 :=
  lam (x_10281) -> (y_10282) ->
    ((sub_18) x_10281 ((mul_19) ((div_20) x_10281 y_10282) y_10282))

def free_listUU_65 :=
  fun free_list_10283 (A_10284) -> (f_10285) -> (__10286) ->
    match __10286 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10287 tl_10288 =>
      let __10289 := ((f_10285) hd_10287) in
      ((free_list_10283) NULL f_10285 tl_10288)
    end

def free_listUL_64 :=
  fun free_list_10290 (A_10291) -> (f_10292) -> (__10293) ->
    match __10293 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10294 tl_10295 =>
      let __10296 := ((f_10292) hd_10294) in
      ((free_list_10290) NULL f_10292 tl_10295)
    end

def free_listLL_62 :=
  fun free_list_10297 (A_10298) -> (f_10299) -> (__10300) ->
    match __10300 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10301 tl_10302 =>
      let __10303 := ((f_10299) hd_10301) in
      ((free_list_10297) NULL f_10299 tl_10302)
    end

def pow_25 :=
  lam (x_10304) -> (y_10305) ->
    let loop_10306 :=
      fun loop_10307 (acc_10308) -> (y_10309) ->
        match (__lte__ y_10309 0) with
        | true_4 => acc_10308
        | false_5 =>
          ((loop_10307) (__mul__ x_10304 acc_10308) (__sub__ y_10309 1))
        end
    in ((loop_10306) 1 y_10305)

def powm_26 :=
  lam (x_10310) -> (y_10311) -> (m_10312) ->
    let loop_10313 :=
      fun loop_10314 (acc_10315) -> (y_10316) ->
        match (__lte__ y_10316 0) with
        | true_4 => acc_10315
        | false_5 =>
          ((loop_10314)
            (__mod__ (__mul__ x_10310 acc_10315) m_10312) (__sub__ y_10316 1))
        end
    in ((loop_10313) 1 y_10311)

def ord_27 := lam (c_10317) -> (__ord__ c_10317)

def chr_28 := lam (i_10318) -> (__chr__ i_10318)

def str_29 := lam (c_10319) -> (__push__ "" c_10319)

def strlen_30 := lam (s_10320) -> (__size__ s_10320)

def string_of_int_31 :=
  lam (i_10321) ->
    let aux_10322 :=
      fun aux_10323 (i_10324) ->
        match (__lte__ 10 i_10324) with
        | true_4 =>
          let r_10325 := (__mod__ i_10324 10) in
          let i_10326 := (__div__ i_10324 10) in
          (__push__ ((aux_10323) i_10326)
            ((chr_28) (__add__ r_10325 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_10324 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10321) with
    | true_4 => ((aux_10322) i_10321)
    | false_5 => (__cat__ "~" ((aux_10322) (__neg__ i_10321)))
    end

def splitU_75 :=
  fun split_10327 (__10328) ->
    match __10328 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_10329 tl_10330 =>
      match tl_10330 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10329 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_10331 tl_10332 =>
        match ((split_10327) tl_10332) with
        | ex1UU_33 m_10333 n_10334 =>
          (ex1UU_33
            (consUU_25 hd_10329 m_10333) (consUU_25 hd_10331 n_10334))
        end
      end
    end

def splitL_74 :=
  fun split_10335 (__10336) ->
    match __10336 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_10337 tl_10338 =>
      match tl_10338 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10337 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_10339 tl_10340 =>
        match ((split_10335) tl_10340) with
        | ex1LL_30 m_10341 n_10342 =>
          (ex1LL_30
            (consUL_23 hd_10337 m_10341) (consUL_23 hd_10339 n_10342))
        end
      end
    end

def main :=
  lazy(let s_10343 := readln tt_3 in let __10344 := print s_10343 in tt_3)

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mul(i_241, 10);
          r_244 := x_245;
          x_247 := mul(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := mkconstr(consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := mkconstr(nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := mkconstr(consUL_23, [hd_292, m_303]);
              x_306 := mkconstr(consUL_23, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

main := {
  x_308 :=
    lazy {
      x_310 := readln(tt_3);
      s_309 := x_310;
      x_312 := print(s_309);
      __311 := x_312;
      return tt_3;
    };
  return x_308;
};

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mul(i_241, 10);
          r_244 := x_245;
          x_247 := mul(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lt(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := reconstr(__287, nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := reconstr(tl_293, nilUL_22, []);
          x_296 := reconstr(__287, consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_23, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_23, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

main := {
  x_308 :=
    lazy {
      x_310 := readln(tt_3);
      s_309 := x_310;
      x_312 := print(s_309);
      __311 := x_312;
      return tt_3;
    };
  return x_308;
};

-----------------------------------------

fn fn0_idU_313(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_314(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_315 := fn0_idU_313(A_2, m_3);
  return x_315;
}

fn fn0_idL_316(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_317(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_318 := fn0_idL_316(A_5, m_6);
  return x_318;
}

fn fn0_rwlUU_319(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_320(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_321 := fn0_rwlUU_319(A_8, m_9, n_10, B_11, __12, __13);
  return x_321;
}

fn fn0_rwlUL_322(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_323(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_324 := fn0_rwlUL_322(A_15, m_16, n_17, B_18, __19, __20);
  return x_324;
}

fn fn0_rwlLU_325(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_326(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_327 := fn0_rwlLU_325(A_22, m_23, n_24, B_25, __26, __27);
  return x_327;
}

fn fn0_rwlLL_328(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_329(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_330 := fn0_rwlLL_328(A_29, m_30, n_31, B_32, __33, __34);
  return x_330;
}

fn fn0_rwrUU_331(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_332(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_333 := fn0_rwrUU_331(A_36, m_37, n_38, B_39, __40, __41);
  return x_333;
}

fn fn0_rwrUL_334(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_335(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_336 := fn0_rwrUL_334(A_43, m_44, n_45, B_46, __47, __48);
  return x_336;
}

fn fn0_rwrLU_337(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_338(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_339 := fn0_rwrLU_337(A_50, m_51, n_52, B_53, __54, __55);
  return x_339;
}

fn fn0_rwrLL_340(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_341(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_342 := fn0_rwrLL_340(A_57, m_58, n_59, B_60, __61, __62);
  return x_342;
}

fn fn0_sing_elimUU_343(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_344(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_345 := fn0_sing_elimUU_343(A_64, x_65, __66);
  return x_345;
}

fn fn0_sing_elimUL_346(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_347(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_348 := fn0_sing_elimUL_346(A_68, x_69, __70);
  return x_348;
}

fn fn0_sing_elimLU_349(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_350(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_351 := fn0_sing_elimLU_349(A_72, x_73, __74);
  return x_351;
}

fn fn0_sing_elimLL_352(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_353(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_354 := fn0_sing_elimLL_352(A_76, x_77, __78);
  return x_354;
}

fn fn0_not_355(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_356(env) {
  __80 := env[1];
  x_357 := fn0_not_355(__80);
  return x_357;
}

fn fn0_and_358(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_359(env) {
  __83 := env[1];
  __84 := env[2];
  x_360 := fn0_and_358(__83, __84);
  return x_360;
}

fn fn0_or_361(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_362(env) {
  __88 := env[1];
  __89 := env[2];
  x_363 := fn0_or_361(__88, __89);
  return x_363;
}

fn fn0_xor_364(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_365(env) {
  __93 := env[1];
  __94 := env[2];
  x_366 := fn0_xor_364(__93, __94);
  return x_366;
}

fn fn0_lte_367(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_367(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_368(env) {
  __99 := env[1];
  __100 := env[2];
  x_369 := fn0_lte_367(__99, __100);
  return x_369;
}

fn fn0_lt_370(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_367(x_110, y_108);
  return x_109;
}

fn fn1_lt_371(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_372 := fn0_lt_370(x_107, y_108);
  return x_372;
}

fn fn0_pred_373(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_374(env) {
  __112 := env[1];
  x_375 := fn0_pred_373(__112);
  return x_375;
}

fn fn0_add_376(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_376(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_377(env) {
  __117 := env[1];
  __118 := env[2];
  x_378 := fn0_add_376(__117, __118);
  return x_378;
}

fn fn0_sub_379(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_373(__124);
      x_128 := fn0_sub_379(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_380(env) {
  __124 := env[1];
  __125 := env[2];
  x_381 := fn0_sub_379(__124, __125);
  return x_381;
}

fn fn0_mul_382(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_382(n_135, __132);
      x_136 := fn0_add_376(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_383(env) {
  __131 := env[1];
  __132 := env[2];
  x_384 := fn0_mul_382(__131, __132);
  return x_384;
}

fn fn0_div_385(x_139, y_140) {
  x_142 := fn0_lt_370(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_387, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_391, loop_144, x_139);
      appc(x_392, x_391, y_140);
      move1(x_156, x_392);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_386(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_394 := fn0_div_385(x_139, y_140);
  return x_394;
}

fn fn0_rem_395(x_158, y_159) {
  x_162 := fn0_div_385(x_158, y_159);
  x_161 := fn0_mul_382(x_162, y_159);
  x_160 := fn0_sub_379(x_158, x_161);
  return x_160;
}

fn fn1_rem_396(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_397 := fn0_rem_395(x_158, y_159);
  return x_397;
}

fn fn0_free_listUU_398(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_400, f_165, hd_168);
      move1(x_171, x_400);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_398(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_399(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_402 := fn0_free_listUU_398(A_164, f_165, __166);
  return x_402;
}

fn fn0_free_listUL_403(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_405, f_175, hd_178);
      move1(x_181, x_405);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_403(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_404(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_407 := fn0_free_listUL_403(A_174, f_175, __176);
  return x_407;
}

fn fn0_free_listLL_408(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_410, f_185, hd_188);
      move1(x_191, x_410);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_408(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_409(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_412 := fn0_free_listLL_408(A_184, f_185, __186);
  return x_412;
}

fn fn0_pow_413(x_194, y_195) {
  mkclo1(x_197, fn1_loop_415, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_419, loop_196, 1);
  appc(x_420, x_419, y_195);
  move1(x_206, x_420);
  return x_206;
}

fn fn1_pow_414(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_422 := fn0_pow_413(x_194, y_195);
  return x_422;
}

fn fn0_powm_423(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_425, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_429, loop_211, 1);
  appc(x_430, x_429, y_209);
  move1(x_222, x_430);
  return x_222;
}

fn fn1_powm_424(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_432 := fn0_powm_423(x_208, y_209, m_210);
  return x_432;
}

fn fn0_ord_433(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_434(env) {
  c_224 := env[1];
  x_435 := fn0_ord_433(c_224);
  return x_435;
}

fn fn0_chr_436(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_437(env) {
  i_227 := env[1];
  x_438 := fn0_chr_436(i_227);
  return x_438;
}

fn fn0_str_439(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_440(env) {
  c_230 := env[1];
  x_441 := fn0_str_439(c_230);
  return x_441;
}

fn fn0_strlen_442(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_443(env) {
  s_234 := env[1];
  x_444 := fn0_strlen_442(s_234);
  return x_444;
}

fn fn0_string_of_int_445(i_237) {
  mkclo1(x_239, fn1_aux_447, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_450, aux_238, i_237);
      move1(x_259, x_450);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_452, aux_238, x_263);
      move1(x_262, x_452);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_446(env) {
  i_237 := env[1];
  x_454 := fn0_string_of_int_445(i_237);
  return x_454;
}

fn fn0_splitU_455(__265) {
  switch(ctagof(__265)){
    nilUU_24 => {
      mkbox(x_267, nilUU_24, 0);
      mkbox(x_268, nilUU_24, 0);
      mkbox(x_269, ex1UU_33, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_25 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_24 => {
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, consUU_25, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_24, 0);
          mkbox(x_276, ex1UU_33, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_25 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_455(tl_278);
          switch(ctagof(x_280)){
            ex1UU_33 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_25);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_25, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_33, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_456(env) {
  __265 := env[1];
  x_457 := fn0_splitU_455(__265);
  return x_457;
}

fn fn0_splitL_458(__287) {
  switch(ctagof(__287)){
    nilUL_22 => {
      rebox(x_289, __287, nilUL_22);
      mkbox(x_290, nilUL_22, 0);
      mkbox(x_291, ex1LL_30, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_23 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_22 => {
          rebox(x_295, tl_293, nilUL_22);
          rebox(x_296, __287, consUL_23);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_22, 0);
          mkbox(x_298, ex1LL_30, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_23 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_458(tl_300);
          switch(ctagof(x_302)){
            ex1LL_30 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_23);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_23);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_30);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_459(env) {
  __287 := env[1];
  x_460 := fn0_splitL_458(__287);
  return x_460;
}

fn lazy__462(env) {
  readln(x_310, tt_3);
  move1(s_309, x_310);
  print(x_312, s_309);
  move1(__311, x_312);
  return tt_3;
}

fn fn1_aux_447(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mul(x_245, i_241, 10);
      move1(r_244, x_245);
      mul(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_448, aux_240, i_246);
      move1(x_249, x_448);
      x_252 := fn0_ord_433(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_436(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_433(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_436(x_255);
      x_253 := fn0_str_439(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_425(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mul(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_426, loop_213, x_219);
      appc(x_427, x_426, x_221);
      move1(x_218, x_427);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_415(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_416, loop_198, x_204);
      appc(x_417, x_416, x_205);
      move1(x_203, x_417);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_387(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_373(y_148);
  x_150 := fn0_sub_379(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_388, loop_146, n_153);
      appc(x_389, x_388, y_148);
      move1(x_154, x_389);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_314, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_317, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_320, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_323, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_326, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_329, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_332, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_335, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_338, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_341, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_344, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_347, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_350, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_353, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_356, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_359, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_362, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_365, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_368, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_371, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_374, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_377, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_380, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_383, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_386, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_396, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_399, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_404, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_409, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_414, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_424, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_434, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_437, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_440, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_443, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_446, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_456, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_459, fvc:=0, argc:=1);
  lazy(x_308, lazy__462, 0);
  force(x_461, x_308);
  return x_461;
}

-----------------------------------------

compilation success

-----------------------------------------

