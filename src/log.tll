[Definition {name = "split"; relv = R;
   body =
   (Binder ([],
      ((Fun (
          (Pi (R, U, (App [(Inst ("list", [(SId "_"); L], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); L], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); L], I)); Int_t])))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); L], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); L], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); L], I)); Int_t])))
             ))
          )))
      ));
   view = []}
  ]

-----------------------------------------

#[logical]
inductive eq_1‹s_325› (A_326 : Type‹s_325›) (m_327 : A_326):
  A_326 -> U
where
| refl_1 : (eq_1‹??_1› ?_1[0;0] m_327 m_327)

#[program]
def rwl_1‹s_329,r_330› :
  ∀ {A_331 : Type‹s_329›} ->
    ∀ {m_332 : A_331} ->
      ∀ {n_333 : A_331} ->
        ∀ {B_334 : A_331 -> Type‹r_330›} ->
          {(eq_1‹??_3› ?_3[0;0] m_332 n_333)} ->
            ((B_334) m_332) -> ((B_334) n_333)
:=
  fun rwl_338 :
    ∀ {A_339 : Type‹s_329›} ->
      ∀ {m_340 : A_339} ->
        ∀ {n_341 : A_339} ->
          ∀ {B_342 : A_339 -> Type‹r_330›} ->
            {(eq_1‹??_2› ?_2[0;0] m_340 n_341)} ->
              ((B_342) m_340) -> ((B_342) n_341)
  | A_346 m_347 n_348 B_349 refl_1 x_350 => x_350

#[program]
def rwr_2‹s_351,r_352› :
  ∀ {A_353 : Type‹s_351›} ->
    ∀ {m_354 : A_353} ->
      ∀ {n_355 : A_353} ->
        ∀ {B_356 : A_353 -> Type‹r_352›} ->
          {(eq_1‹??_5› ?_5[0;0] m_354 n_355)} ->
            ((B_356) n_355) -> ((B_356) m_354)
:=
  fun rwr_360 :
    ∀ {A_361 : Type‹s_351›} ->
      ∀ {m_362 : A_361} ->
        ∀ {n_363 : A_361} ->
          ∀ {B_364 : A_361 -> Type‹r_352›} ->
            {(eq_1‹??_4› ?_4[0;0] m_362 n_363)} ->
              ((B_364) n_363) -> ((B_364) m_362)
  | A_368 m_369 n_370 B_371 refl_1 x_372 => x_372

#[logical]
def congr_3‹s_373,r_374,t_375› :
  ∀ (A_376 : Type‹s_373›) ->
    ∀ (B_377 : Type‹r_374›) ->
      ∀ (m_378 : A_376) ->
        ∀ (n_379 : A_376) ->
          ∀ (f_380 : forall‹t_375›(__381 : A_376), B_377) ->
            (eq_1‹??_9› ?_10[0;0] m_378 n_379) ->
              (eq_1‹??_10› ?_11[0;0] ((f_380) m_378) ((f_380) n_379))
:=
  fun congr_383 :
    ∀ (A_384 : Type‹s_373›) ->
      ∀ (B_385 : Type‹r_374›) ->
        ∀ (m_386 : A_384) ->
          ∀ (n_387 : A_384) ->
            ∀ (f_388 : forall‹t_375›(__389 : A_384), B_385) ->
              (eq_1‹??_6› ?_6[0;0] m_386 n_387) ->
                (eq_1‹??_7› ?_7[0;0] ((f_388) m_386) ((f_388) n_387))
  | A_391 B_392 m_393 n_394 f_395 refl_1 =>
    (refl_1‹??_8› ?_8[0;0] ?_9[0;0])

#[logical]
def axiom_K_4‹› :
  ∀ {A_396 : U} ->
    ∀ {m_397 : A_396} ->
      ∀ (x_398 : (eq_1‹??_15› ?_18[0;0] m_397 m_397)) ->
        (eq_1‹??_17›
          ?_21[0;0] x_398 (refl_1‹??_16› ?_19[0;0] ?_20[0;0]))
:=
  fun axiom_K_399 :
    ∀ {A_400 : U} ->
      ∀ {m_401 : A_400} ->
        ∀ (x_402 : (eq_1‹??_11› ?_12[0;0] m_401 m_401)) ->
          (eq_1‹??_13›
            ?_15[0;0] x_402 (refl_1‹??_12› ?_13[0;0] ?_14[0;0]))
  | A_403 m_404 refl_1 => (refl_1‹??_14› ?_16[0;0] ?_17[0;0])

#[program]
inductive sing_2‹s_405,t_406› (A_407 : Type‹s_405›):
  A_407 -> Type‹t_406›
where
| just_2 (m_409 : A_407) : (sing_2‹??_18,??_19› ?_22[0;0] m_409)

#[logical]
def ssing_5‹s_410› :
  ∀ (A_411 : Type‹s_410›) -> A_411 -> Type‹s_410›
:=
  fun ssing_413 : ∀ (A_414 : Type‹s_410›) -> A_414 -> Type‹s_410›
  | A_416 m_417 => (sing_2‹s_410,s_410› A_416 m_417)

#[program]
def sing_elim_6‹s_418,t_419› :
  ∀ {A_420 : Type‹s_418›} ->
    ∀ {x_421 : A_420} -> (sing_2‹s_418,t_419› ?_24[0;0] x_421) -> A_420
:=
  fun sing_elim_423 :
    ∀ {A_424 : Type‹s_418›} ->
      ∀ {x_425 : A_424} ->
        (sing_2‹s_418,t_419› ?_23[0;0] x_425) -> A_424
  | A_427 x_428 (just_2 x_429) => x_429

#[logical]
def sing_uniq_7‹s_430,t_431› :
  ∀ (A_432 : Type‹s_430›) ->
    ∀ (x0_433 : A_432) ->
      ∀ (x_434 : (sing_2‹s_430,t_431› ?_31[0;0] x0_433)) ->
        (eq_1‹??_26›
          ?_34[0;0] x0_433
          ((sing_elim_6‹??_24,??_25›) ?_33[0;0] ?_32[0;0] x_434))
:=
  fun sing_uniq_435 :
    ∀ (A_436 : Type‹s_430›) ->
      ∀ (x0_437 : A_436) ->
        ∀ (x_438 : (sing_2‹s_430,t_431› ?_25[0;0] x0_437)) ->
          (eq_1‹??_22›
            ?_28[0;0] x0_437
            ((sing_elim_6‹??_20,??_21›) ?_27[0;0] ?_26[0;0] x_438))
  | A_439 x0_440 (just_2 _441) => (refl_1‹??_23› ?_29[0;0] ?_30[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_8‹› :
  ∀ (x_442 : unit_3) -> (eq_1‹??_30› ?_40[0;0] x_442 tt_3)
:=
  fun unit_eta_443 :
    ∀ (x_444 : unit_3) -> (eq_1‹??_27› ?_35[0;0] x_444 tt_3)
  | x_445 =>
    match x_445 in
      ∀ (x0_446 : ?_36[0;0]) -o (eq_1‹??_28› ?_37[0;0] x0_446 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_38[0;0] ?_39[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_9‹› : bool_4 -> bool_4 :=
  fun not_448 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_10‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_452 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _455 _456 => false_5

#[program]
def or_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_459 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _462 _463 => true_4

#[program]
def xor_12‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_466 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _469 _470 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_471 : nat_5) : nat_5

#[program]
def lte_13‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_474 : nat_5 -> nat_5 -> bool_4
  | zero_6 _477 => true_4
  | _478 zero_6 => false_5
  | (succ_7 x_479) (succ_7 y_480) => ((lte_474) x_479 y_480)

#[program]
def lt_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_483 : nat_5 -> nat_5 -> bool_4
  | x_486 y_487 => ((lte_13) (succ_7‹› x_486) y_487)

#[program]
def pred_15‹› : nat_5 -> nat_5 :=
  fun pred_489 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_491) => x_491

#[program]
def add_16‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_494 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_497 => y_497
  | (succ_7 x_498) y_499 => (succ_7‹› ((add_494) x_498 y_499))

#[program]
def sub_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_502 : nat_5 -> nat_5 -> nat_5
  | x_505 zero_6 => x_505
  | x_506 (succ_7 y_507) => ((sub_502) ((pred_15) x_506) y_507)

#[program]
def mul_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_510 : nat_5 -> nat_5 -> nat_5
  | zero_6 _513 => zero_6
  | (succ_7 x_514) y_515 => ((add_16) y_515 ((mul_510) x_514 y_515))

#[program]
def div_19‹› : nat_5 -> nat_5 -> ?_47[0;0] :=
  fun div_518 : nat_5 -> nat_5 -> ?_41[0;0]
  | x_521 y_522 =>
    match ((lt_14) x_521 y_522) in ?_42[0;0] -o ?_43[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_524 :=
        fun loop_525 : nat_5 -> nat_5 -> ?_44[0;0]
        | x_528 y_529 =>
          match ((sub_17) x_528 ((pred_15) y_529)) in ?_45[0;0] -o ?_46[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_531) => (succ_7‹› ((loop_525) x_531 y_529))
      in ((loop_524) x_521 y_522)

#[program]
def rem_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun rem_534 : nat_5 -> nat_5 -> ?_48[0;0]
  | x_537 y_538 => ((sub_17) x_537 ((mul_18) ((div_19) x_537 y_538) y_538))

#[program]
inductive list_6‹s_539,t_540› (A_541 : Type‹s_539›): Type‹t_540›
where
| nil_8 : (list_6‹??_31,??_32› A_541)
| cons_9
    (hd_542 : A_541) (tl_543 : (list_6‹??_33,t_540› A_541))
    : (list_6‹??_34,??_35› A_541)

#[program]
inductive exists0_7‹s_544,r_545› (A_546 : Type‹s_544›) (B_547 : 
A_546 -> Type‹r_545›): L where
| ex0_10
    {m_549 : A_546} (n_550 : ((B_547) m_549))
    : (exists0_7‹??_36,??_37› A_546 B_547)

#[program]
inductive exists1_8‹s_551,r_552› (A_553 : Type‹s_551›) (B_554 : 
A_553 -> Type‹r_552›): L where
| ex1_11
    (m_556 : A_553) (n_557 : ((B_554) m_556))
    : (exists1_8‹??_38,??_39› A_553 B_554)

#[logical]
def prod0_21‹s_558,r_559› :
  Type‹s_558› -> Type‹r_559› -> ?_53[0;0]
:=
  fun prod0_562 : Type‹s_558› -> Type‹r_559› -> ?_50[0;0]
  | A_565 B_566 =>
    (exists0_7‹??_40,??_41›
      A_565 fun _567 : ?_51[0;0] -> ?_52[0;0]
            | _569 => B_566)

#[logical]
def prod1_22‹s_570,r_571› :
  Type‹s_570› -> Type‹r_571› -> ?_57[0;0]
:=
  fun prod1_574 : Type‹s_570› -> Type‹r_571› -> ?_54[0;0]
  | A_577 B_578 =>
    (exists1_8‹??_42,??_43›
      A_577 fun _579 : ?_55[0;0] -> ?_56[0;0]
            | _581 => B_578)

#[program]
def pow_23‹› : int -> int -> int :=
  fun pow_584 : int -> int -> int
  | x_587 y_588 =>
    let loop_589 :=
      fun loop_590 : int -> int -> int
      | acc_593 y_594 =>
        match (__lte__ y_594 0) in ?_58[0;0] -o ?_59[0;0] with
        | true_4 => acc_593
        | false_5 => ((loop_590) (__mul__ x_587 acc_593) (__sub__ y_594 1))
    in ((loop_589) 1 y_588)

#[program]
def powm_24‹› : int -> int -> int -> int :=
  fun powm_599 : int -> int -> int -> int
  | x_603 y_604 m_605 =>
    let loop_606 :=
      fun loop_607 : int -> int -> int
      | acc_610 y_611 =>
        match (__lte__ y_611 0) in ?_60[0;0] -o ?_61[0;0] with
        | true_4 => acc_610
        | false_5 =>
          ((loop_607)
            (__mod__ (__mul__ x_603 acc_610) m_605) (__sub__ y_611 1))
    in ((loop_606) 1 y_604)

#[program]
def split_25‹› :
  (list_6‹??_69,L› int) ->
    ((prod1_22‹??_72,??_73›)
      (list_6‹??_70,L› int) (list_6‹??_71,L› int))
:=
  fun split_614 :
    (list_6‹??_44,L› int) ->
      ((prod1_22‹??_47,??_48›)
        (list_6‹??_45,L› int) (list_6‹??_46,L› int))
  | nil_8 =>
    (ex1_11‹??_53,??_54›
      ?_64[0;0] ?_65[0;0] (nil_8‹??_49,??_50› ?_62[0;0])
      (nil_8‹??_51,??_52› ?_63[0;0]))
  | (cons_9 x_616 nil_8) =>
    (ex1_11‹??_61,??_62›
      ?_69[0;0] ?_70[0;0]
      (cons_9‹??_57,??_58›
        ?_67[0;0] x_616 (nil_8‹??_55,??_56› ?_66[0;0]))
      (nil_8‹??_59,??_60› ?_68[0;0]))
  | (cons_9 x_617 (cons_9 y_618 zs_619)) =>
    match ((split_614) zs_619) in ?_76[0;0] -o ?_75[0;0] with
    | (ex1_11 xs_621 ys_622) =>
      (ex1_11‹??_67,??_68›
        ?_73[0;0] ?_74[0;0] (cons_9‹??_63,??_64› ?_71[0;0] x_617 xs_621)
        (cons_9‹??_65,??_66› ?_72[0;0] y_618 ys_622))

-----------------------------------------

#[logical]
inductive eq_1‹s_4438› (A_4439 : Type‹s_4438›) (m_4440 : A_4439):
  A_4439 -> U
where
| refl_1 : (eq_1‹s_4438› A_4439 m_4440 m_4440)

#[program]
def rwl_1‹s_4442,r_4443› :
  ∀ {A_4444 : Type‹s_4442›} ->
    ∀ {m_4445 : A_4444} ->
      ∀ {n_4446 : A_4444} ->
        ∀ {B_4447 : A_4444 -> Type‹r_4443›} ->
          {(eq_1‹s_4442› A_4444 m_4445 n_4446)} ->
            ((B_4447) m_4445) -> ((B_4447) n_4446)
:=
  fun rwl_4451 :
    ∀ {A_4452 : Type‹s_4442›} ->
      ∀ {m_4453 : A_4452} ->
        ∀ {n_4454 : A_4452} ->
          ∀ {B_4455 : A_4452 -> Type‹r_4443›} ->
            {(eq_1‹s_4442› A_4452 m_4453 n_4454)} ->
              ((B_4455) m_4453) -> ((B_4455) n_4454)
  | A_4459 m_4460 n_4461 B_4462 refl_1 __4463 => __4463

#[program]
def rwr_2‹s_4464,r_4465› :
  ∀ {A_4466 : Type‹s_4464›} ->
    ∀ {m_4467 : A_4466} ->
      ∀ {n_4468 : A_4466} ->
        ∀ {B_4469 : A_4466 -> Type‹r_4465›} ->
          {(eq_1‹s_4464› A_4466 m_4467 n_4468)} ->
            ((B_4469) n_4468) -> ((B_4469) m_4467)
:=
  fun rwr_4473 :
    ∀ {A_4474 : Type‹s_4464›} ->
      ∀ {m_4475 : A_4474} ->
        ∀ {n_4476 : A_4474} ->
          ∀ {B_4477 : A_4474 -> Type‹r_4465›} ->
            {(eq_1‹s_4464› A_4474 m_4475 n_4476)} ->
              ((B_4477) n_4476) -> ((B_4477) m_4475)
  | A_4481 m_4482 n_4483 B_4484 refl_1 __4485 => __4485

#[logical]
def congr_3‹s_4486,r_4487,t_4488› :
  ∀ (A_4489 : Type‹s_4486›) ->
    ∀ (B_4490 : Type‹r_4487›) ->
      ∀ (m_4491 : A_4489) ->
        ∀ (n_4492 : A_4489) ->
          ∀ (f_4493 : forall‹t_4488›(__4494 : A_4489), B_4490) ->
            (eq_1‹s_4486› A_4489 m_4491 n_4492) ->
              (eq_1‹r_4487› B_4490 ((f_4493) m_4491) ((f_4493) n_4492))
:=
  fun congr_4496 :
    ∀ (A_4497 : Type‹s_4486›) ->
      ∀ (B_4498 : Type‹r_4487›) ->
        ∀ (m_4499 : A_4497) ->
          ∀ (n_4500 : A_4497) ->
            ∀ (f_4501 : forall‹t_4488›(__4502 : A_4497), B_4498) ->
              (eq_1‹s_4486› A_4497 m_4499 n_4500) ->
                (eq_1‹r_4487› B_4498 ((f_4501) m_4499) ((f_4501) n_4500))
  | A_4504 B_4505 m_4506 n_4507 f_4508 refl_1 =>
    (refl_1‹r_4487› B_4505 ((f_4508) n_4507))

#[logical]
def axiom_K_4‹› :
  ∀ {A_4509 : U} ->
    ∀ {m_4510 : A_4509} ->
      ∀ (x_4511 : (eq_1‹U› A_4509 m_4510 m_4510)) ->
        (eq_1‹U›
          (eq_1‹U› A_4509 m_4510 m_4510) x_4511
          (refl_1‹U› A_4509 m_4510))
:=
  fun axiom_K_4512 :
    ∀ {A_4513 : U} ->
      ∀ {m_4514 : A_4513} ->
        ∀ (x_4515 : (eq_1‹U› A_4513 m_4514 m_4514)) ->
          (eq_1‹U›
            (eq_1‹U› A_4513 m_4514 m_4514) x_4515
            (refl_1‹U› A_4513 m_4514))
  | A_4516 m_4517 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_4516 m_4517 m_4517) (refl_1‹U› A_4516 m_4517))

#[program]
inductive sing_2‹s_4518,t_4519› (A_4520 : Type‹s_4518›):
  A_4520 -> Type‹t_4519›
where
| just_2 (m_4522 : A_4520) : (sing_2‹s_4518,t_4519› A_4520 m_4522)

#[logical]
def ssing_5‹s_4523› :
  ∀ (A_4524 : Type‹s_4523›) -> A_4524 -> Type‹s_4523›
:=
  fun ssing_4526 :
    ∀ (A_4527 : Type‹s_4523›) -> A_4527 -> Type‹s_4523›
  | A_4529 m_4530 => (sing_2‹s_4523,s_4523› A_4529 m_4530)

#[program]
def sing_elim_6‹s_4531,t_4532› :
  ∀ {A_4533 : Type‹s_4531›} ->
    ∀ {x_4534 : A_4533} ->
      (sing_2‹s_4531,t_4532› A_4533 x_4534) -> A_4533
:=
  fun sing_elim_4536 :
    ∀ {A_4537 : Type‹s_4531›} ->
      ∀ {x_4538 : A_4537} ->
        (sing_2‹s_4531,t_4532› A_4537 x_4538) -> A_4537
  | A_4540 x_4541 (just_2 m_4542) => m_4542

#[logical]
def sing_uniq_7‹s_4543,t_4544› :
  ∀ (A_4545 : Type‹s_4543›) ->
    ∀ (x0_4546 : A_4545) ->
      ∀ (x_4547 : (sing_2‹s_4543,t_4544› A_4545 x0_4546)) ->
        (eq_1‹s_4543›
          A_4545 x0_4546
          ((sing_elim_6‹s_4543,t_4544›) A_4545 x0_4546 x_4547))
:=
  fun sing_uniq_4548 :
    ∀ (A_4549 : Type‹s_4543›) ->
      ∀ (x0_4550 : A_4549) ->
        ∀ (x_4551 : (sing_2‹s_4543,t_4544› A_4549 x0_4550)) ->
          (eq_1‹s_4543›
            A_4549 x0_4550
            ((sing_elim_6‹s_4543,t_4544›) A_4549 x0_4550 x_4551))
  | A_4552 x0_4553 (just_2 m_4554) => (refl_1‹s_4543› A_4552 m_4554)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_8‹› :
  ∀ (x_4555 : unit_3) -> (eq_1‹U› unit_3 x_4555 tt_3)
:=
  fun unit_eta_4556 :
    ∀ (x_4557 : unit_3) -> (eq_1‹U› unit_3 x_4557 tt_3)
  | x_4558 =>
    match x_4558 in
      ∀ (x0_4559 : unit_3) -o (eq_1‹U› unit_3 x0_4559 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_9‹› : bool_4 -> bool_4 :=
  fun not_4561 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_10‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_4565 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __4568 => false_5

#[program]
def or_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_4571 : bool_4 -> bool_4 -> bool_4
  | true_4 __4574 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_12‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_4577 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_4580 : nat_5) : nat_5

#[program]
def lte_13‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_4583 : nat_5 -> nat_5 -> bool_4
  | zero_6 __4586 => true_4
  | (succ_7 n_4587) zero_6 => false_5
  | (succ_7 n_4588) (succ_7 n_4589) => ((lte_4583) n_4588 n_4589)

#[program]
def lt_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_4592 : nat_5 -> nat_5 -> bool_4
  | x_4595 y_4596 => ((lte_13) (succ_7‹› x_4595) y_4596)

#[program]
def pred_15‹› : nat_5 -> nat_5 :=
  fun pred_4598 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_4600) => n_4600

#[program]
def add_16‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_4603 : nat_5 -> nat_5 -> nat_5
  | zero_6 __4606 => __4606
  | (succ_7 n_4607) __4608 => (succ_7‹› ((add_4603) n_4607 __4608))

#[program]
def sub_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_4611 : nat_5 -> nat_5 -> nat_5
  | __4614 zero_6 => __4614
  | __4615 (succ_7 n_4616) => ((sub_4611) ((pred_15) __4615) n_4616)

#[program]
def mul_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_4619 : nat_5 -> nat_5 -> nat_5
  | zero_6 __4622 => zero_6
  | (succ_7 n_4623) __4624 => ((add_16) __4624 ((mul_4619) n_4623 __4624))

#[program]
def div_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_4627 : nat_5 -> nat_5 -> nat_5
  | x_4630 y_4631 =>
    match ((lt_14) x_4630 y_4631) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_4633 :=
        fun loop_4634 : nat_5 -> nat_5 -> nat_5
        | x_4637 y_4638 =>
          match ((sub_17) x_4637 ((pred_15) y_4638)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_4640) => (succ_7‹› ((loop_4634) n_4640 y_4638))
      in ((loop_4633) x_4630 y_4631)

#[program]
def rem_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_4643 : nat_5 -> nat_5 -> nat_5
  | x_4646 y_4647 =>
    ((sub_17) x_4646 ((mul_18) ((div_19) x_4646 y_4647) y_4647))

#[program]
inductive list_6‹s_4648,t_4649› (A_4650 : Type‹s_4648›):
  Type‹t_4649›
where
| nil_8 : (list_6‹s_4648,t_4649› A_4650)
| cons_9
    (hd_4651 : A_4650) (tl_4652 : (list_6‹s_4648,t_4649› A_4650))
    : (list_6‹s_4648,t_4649› A_4650)

#[program]
inductive exists0_7‹s_4653,r_4654› (A_4655 : Type‹s_4653›) (B_4656 : 
A_4655 -> Type‹r_4654›): L where
| ex0_10
    {m_4658 : A_4655} (n_4659 : ((B_4656) m_4658))
    : (exists0_7‹s_4653,r_4654› A_4655 B_4656)

#[program]
inductive exists1_8‹s_4660,r_4661› (A_4662 : Type‹s_4660›) (B_4663 : 
A_4662 -> Type‹r_4661›): L where
| ex1_11
    (m_4665 : A_4662) (n_4666 : ((B_4663) m_4665))
    : (exists1_8‹s_4660,r_4661› A_4662 B_4663)

#[logical]
def prod0_21‹s_4667,r_4668› : Type‹s_4667› -> Type‹r_4668› -> L
:=
  fun prod0_4671 : Type‹s_4667› -> Type‹r_4668› -> L
  | A_4674 B_4675 =>
    (exists0_7‹s_4667,r_4668›
      A_4674 fun _4676 : A_4674 -> Type‹r_4668›
             | __4678 => B_4675)

#[logical]
def prod1_22‹s_4679,r_4680› : Type‹s_4679› -> Type‹r_4680› -> L
:=
  fun prod1_4683 : Type‹s_4679› -> Type‹r_4680› -> L
  | A_4686 B_4687 =>
    (exists1_8‹s_4679,r_4680›
      A_4686 fun _4688 : A_4686 -> Type‹r_4680›
             | __4690 => B_4687)

#[program]
def pow_23‹› : int -> int -> int :=
  fun pow_4693 : int -> int -> int
  | x_4696 y_4697 =>
    let loop_4698 :=
      fun loop_4699 : int -> int -> int
      | acc_4702 y_4703 =>
        match (__lte__ y_4703 0) in bool_4 -o int with
        | true_4 => acc_4702
        | false_5 =>
          ((loop_4699) (__mul__ x_4696 acc_4702) (__sub__ y_4703 1))
    in ((loop_4698) 1 y_4697)

#[program]
def powm_24‹› : int -> int -> int -> int :=
  fun powm_4708 : int -> int -> int -> int
  | x_4712 y_4713 m_4714 =>
    let loop_4715 :=
      fun loop_4716 : int -> int -> int
      | acc_4719 y_4720 =>
        match (__lte__ y_4720 0) in bool_4 -o int with
        | true_4 => acc_4719
        | false_5 =>
          ((loop_4716)
            (__mod__ (__mul__ x_4712 acc_4719) m_4714) (__sub__ y_4720 1))
    in ((loop_4715) 1 y_4713)

#[program]
def split_25‹› :
  (list_6‹U,L› int) ->
    ((prod1_22‹L,L›) (list_6‹U,L› int) (list_6‹U,L› int))
:=
  fun split_4723 :
    (list_6‹U,L› int) ->
      ((prod1_22‹L,L›) (list_6‹U,L› int) (list_6‹U,L› int))
  | nil_8 =>
    (ex1_11‹L,L›
      (list_6‹U,L› int)
      fun _4725 : (list_6‹U,L› int) -> L
      | __4727 => (list_6‹U,L› int) (nil_8‹U,L› int)
      (nil_8‹U,L› int))
  | (cons_9 hd_4728 nil_8) =>
    (ex1_11‹L,L›
      (list_6‹U,L› int)
      fun _4729 : (list_6‹U,L› int) -> L
      | __4731 => (list_6‹U,L› int)
      (cons_9‹U,L› int hd_4728 (nil_8‹U,L› int)) (nil_8‹U,L› int))
  | (cons_9 hd_4732 (cons_9 hd_4733 tl_4734)) =>
    match ((split_4723) tl_4734) in
      ((prod1_22‹L,L›) (list_6‹U,L› int) (list_6‹U,L› int)) -o
        ((prod1_22‹L,L›) (list_6‹U,L› int) (list_6‹U,L› int))
    with
    | (ex1_11 m_4736 n_4737) =>
      (ex1_11‹L,L›
        (list_6‹U,L› int)
        fun _4738 : (list_6‹U,L› int) -> L
        | __4740 => (list_6‹U,L› int)
        (cons_9‹U,L› int hd_4732 m_4736)
        (cons_9‹U,L› int hd_4733 n_4737))

-----------------------------------------

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_29 :=
  fun rwl_7744 {A_7745} -> {m_7746} -> {n_7747} -> {B_7748} -> {__7749} ->
  (__7750) ->
    match {NULL} with
    | reflU_13  => __7750
    end

#[program]
def rwlUL_28 :=
  fun rwl_7751 {A_7752} -> {m_7753} -> {n_7754} -> {B_7755} -> {__7756} ->
  (__7757) ->
    match {NULL} with
    | reflU_13  => __7757
    end

#[program]
def rwlLU_27 :=
  fun rwl_7758 {A_7759} -> {m_7760} -> {n_7761} -> {B_7762} -> {__7763} ->
  (__7764) ->
    match {NULL} with
    | reflL_12  => __7764
    end

#[program]
def rwlLL_26 :=
  fun rwl_7765 {A_7766} -> {m_7767} -> {n_7768} -> {B_7769} -> {__7770} ->
  (__7771) ->
    match {NULL} with
    | reflL_12  => __7771
    end

#[program]
def rwrUU_33 :=
  fun rwr_7772 {A_7773} -> {m_7774} -> {n_7775} -> {B_7776} -> {__7777} ->
  (__7778) ->
    match {NULL} with
    | reflU_13  => __7778
    end

#[program]
def rwrUL_32 :=
  fun rwr_7779 {A_7780} -> {m_7781} -> {n_7782} -> {B_7783} -> {__7784} ->
  (__7785) ->
    match {NULL} with
    | reflU_13  => __7785
    end

#[program]
def rwrLU_31 :=
  fun rwr_7786 {A_7787} -> {m_7788} -> {n_7789} -> {B_7790} -> {__7791} ->
  (__7792) ->
    match {NULL} with
    | reflL_12  => __7792
    end

#[program]
def rwrLL_30 :=
  fun rwr_7793 {A_7794} -> {m_7795} -> {n_7796} -> {B_7797} -> {__7798} ->
  (__7799) ->
    match {NULL} with
    | reflL_12  => __7799
    end

#[logical]
def congrUUU_41 := NULL

#[logical]
def congrUUL_40 := NULL

#[logical]
def congrULU_39 := NULL

#[logical]
def congrULL_38 := NULL

#[logical]
def congrLUU_37 := NULL

#[logical]
def congrLUL_36 := NULL

#[logical]
def congrLLU_35 := NULL

#[logical]
def congrLLL_34 := NULL

#[logical]
def axiom_K_4 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_43 := NULL

#[logical]
def ssingL_42 := NULL

#[program]
def sing_elimUU_47 :=
  fun sing_elim_7800 {A_7801} -> {x_7802} -> (__7803) ->
    match __7803 with
    | justUU_17 m_7804 => m_7804
    end

#[program]
def sing_elimUL_46 :=
  fun sing_elim_7805 {A_7806} -> {x_7807} -> (__7808) ->
    match __7808 with
    | justUL_16 m_7809 => m_7809
    end

#[program]
def sing_elimLU_45 :=
  fun sing_elim_7810 {A_7811} -> {x_7812} -> (__7813) ->
    match __7813 with
    
    end

#[program]
def sing_elimLL_44 :=
  fun sing_elim_7814 {A_7815} -> {x_7816} -> (__7817) ->
    match __7817 with
    | justLL_14 m_7818 => m_7818
    end

#[logical]
def sing_uniqUU_51 := NULL

#[logical]
def sing_uniqUL_50 := NULL

#[logical]
def sing_uniqLU_49 := NULL

#[logical]
def sing_uniqLL_48 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_8 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_9 :=
  fun not_7819 (__7820) ->
    match __7820 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_10 :=
  fun and_7821 (__7822) -> (__7823) ->
    match __7822 with
    | true_4  =>
      match __7823 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_11 :=
  fun or_7824 (__7825) -> (__7826) ->
    match __7825 with
    | true_4  => true_4
    | false_5  =>
      match __7826 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_12 :=
  fun xor_7827 (__7828) -> (__7829) -o
    match __7828 with
    | true_4  =>
      match __7829 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __7829 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_13 :=
  fun lte_7830 (__7831) -> (__7832) ->
    match __7831 with
    | zero_6  => true_4
    | succ_7 n_7833 =>
      match __7832 with
      | zero_6  => false_5 | succ_7 n_7834 => ((lte_7830) n_7833 n_7834)
      end
    end

#[program]
def lt_14 :=
  fun lt_7835 (x_7836) -> (y_7837) ->
    ((lte_13) (succ_7 x_7836) y_7837)

#[program]
def pred_15 :=
  fun pred_7838 (__7839) ->
    match __7839 with
    | zero_6  => zero_6 | succ_7 n_7840 => n_7840
    end

#[program]
def add_16 :=
  fun add_7841 (__7842) -> (__7843) ->
    match __7842 with
    | zero_6  => __7843
    | succ_7 n_7844 => (succ_7 ((add_7841) n_7844 __7843))
    end

#[program]
def sub_17 :=
  fun sub_7845 (__7846) -> (__7847) ->
    match __7847 with
    | zero_6  => __7846
    | succ_7 n_7848 => ((sub_7845) ((pred_15) __7846) n_7848)
    end

#[program]
def mul_18 :=
  fun mul_7849 (__7850) -> (__7851) ->
    match __7850 with
    | zero_6  => zero_6
    | succ_7 n_7852 => ((add_16) __7851 ((mul_7849) n_7852 __7851))
    end

#[program]
def div_19 :=
  fun div_7853 (x_7854) -> (y_7855) ->
    match ((lt_14) x_7854 y_7855) with
    | true_4  => zero_6
    | false_5  =>
      let loop_7856 :=
        fun loop_7857 (x_7858) -> (y_7859) ->
          match ((sub_17) x_7858 ((pred_15) y_7859)) with
          | zero_6  => zero_6
          | succ_7 n_7860 => (succ_7 ((loop_7857) n_7860 y_7859))
          end
      in ((loop_7856) x_7854 y_7855)
    end

#[program]
def rem_20 :=
  fun rem_7861 (x_7862) -> (y_7863) ->
    ((sub_17) x_7862 ((mul_18) ((div_19) x_7862 y_7863) y_7863))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_55 := NULL

#[logical]
def prod0UL_54 := NULL

#[logical]
def prod0LU_53 := NULL

#[logical]
def prod0LL_52 := NULL

#[logical]
def prod1UU_59 := NULL

#[logical]
def prod1UL_58 := NULL

#[logical]
def prod1LU_57 := NULL

#[logical]
def prod1LL_56 := NULL

#[program]
def pow_23 :=
  fun pow_7864 (x_7865) -> (y_7866) ->
    let loop_7867 :=
      fun loop_7868 (acc_7869) -> (y_7870) ->
        match (__lte__ y_7870 0) with
        | true_4  => acc_7869
        | false_5  =>
          ((loop_7868) (__mul__ x_7865 acc_7869) (__sub__ y_7870 1))
        end
    in ((loop_7867) 1 y_7866)

#[program]
def powm_24 :=
  fun powm_7871 (x_7872) -> (y_7873) -> (m_7874) ->
    let loop_7875 :=
      fun loop_7876 (acc_7877) -> (y_7878) ->
        match (__lte__ y_7878 0) with
        | true_4  => acc_7877
        | false_5  =>
          ((loop_7876)
            (__mod__ (__mul__ x_7872 acc_7877) m_7874) (__sub__ y_7878 1))
        end
    in ((loop_7875) 1 y_7873)

#[program]
def split_25 :=
  fun split_7879 (__7880) ->
    match __7880 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_7881 tl_7882 =>
      match tl_7882 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_7881 nilUL_22) nilUL_22)
      | consUL_23 hd_7883 tl_7884 =>
        match ((split_7879) tl_7884) with
        | ex1LL_30 m_7885 n_7886 =>
          (ex1LL_30 (consUL_23 hd_7881 m_7885) (consUL_23 hd_7883 n_7886))
        end
      end
    end

-----------------------------------------

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_29 :=
  fun rwl_8030 {A_8031} -> {m_8032} -> {n_8033} -> {B_8034} -> {__8035} ->
  (__8036) ->
    __8036

#[program]
def rwlUL_28 :=
  fun rwl_8037 {A_8038} -> {m_8039} -> {n_8040} -> {B_8041} -> {__8042} ->
  (__8043) ->
    __8043

#[program]
def rwlLU_27 :=
  fun rwl_8044 {A_8045} -> {m_8046} -> {n_8047} -> {B_8048} -> {__8049} ->
  (__8050) ->
    __8050

#[program]
def rwlLL_26 :=
  fun rwl_8051 {A_8052} -> {m_8053} -> {n_8054} -> {B_8055} -> {__8056} ->
  (__8057) ->
    __8057

#[program]
def rwrUU_33 :=
  fun rwr_8058 {A_8059} -> {m_8060} -> {n_8061} -> {B_8062} -> {__8063} ->
  (__8064) ->
    __8064

#[program]
def rwrUL_32 :=
  fun rwr_8065 {A_8066} -> {m_8067} -> {n_8068} -> {B_8069} -> {__8070} ->
  (__8071) ->
    __8071

#[program]
def rwrLU_31 :=
  fun rwr_8072 {A_8073} -> {m_8074} -> {n_8075} -> {B_8076} -> {__8077} ->
  (__8078) ->
    __8078

#[program]
def rwrLL_30 :=
  fun rwr_8079 {A_8080} -> {m_8081} -> {n_8082} -> {B_8083} -> {__8084} ->
  (__8085) ->
    __8085

#[logical]
def congrUUU_41 := NULL

#[logical]
def congrUUL_40 := NULL

#[logical]
def congrULU_39 := NULL

#[logical]
def congrULL_38 := NULL

#[logical]
def congrLUU_37 := NULL

#[logical]
def congrLUL_36 := NULL

#[logical]
def congrLLU_35 := NULL

#[logical]
def congrLLL_34 := NULL

#[logical]
def axiom_K_4 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_43 := NULL

#[logical]
def ssingL_42 := NULL

#[program]
def sing_elimUU_47 :=
  fun sing_elim_8086 {A_8087} -> {x_8088} -> (__8089) ->
    match __8089 with
    | justUU_17 m_8090 => m_8090
    end

#[program]
def sing_elimUL_46 :=
  fun sing_elim_8091 {A_8092} -> {x_8093} -> (__8094) ->
    match __8094 with
    | justUL_16 m_8095 => m_8095
    end

#[program]
def sing_elimLU_45 :=
  fun sing_elim_8096 {A_8097} -> {x_8098} -> (__8099) ->
    !!

#[program]
def sing_elimLL_44 :=
  fun sing_elim_8100 {A_8101} -> {x_8102} -> (__8103) ->
    match __8103 with
    | justLL_14 m_8104 => m_8104
    end

#[logical]
def sing_uniqUU_51 := NULL

#[logical]
def sing_uniqUL_50 := NULL

#[logical]
def sing_uniqLU_49 := NULL

#[logical]
def sing_uniqLL_48 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_8 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_9 :=
  fun not_8105 (__8106) ->
    match __8106 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_10 :=
  fun and_8107 (__8108) -> (__8109) ->
    match __8108 with
    | true_4  =>
      match __8109 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_11 :=
  fun or_8110 (__8111) -> (__8112) ->
    match __8111 with
    | true_4  => true_4
    | false_5  =>
      match __8112 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_12 :=
  fun xor_8113 (__8114) -> (__8115) -o
    match __8114 with
    | true_4  =>
      match __8115 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __8115 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_13 :=
  fun lte_8116 (__8117) -> (__8118) ->
    match __8117 with
    | zero_6  => true_4
    | succ_7 n_8119 =>
      match __8118 with
      | zero_6  => false_5 | succ_7 n_8120 => ((lte_8116) n_8119 n_8120)
      end
    end

#[program]
def lt_14 :=
  fun lt_8121 (x_8122) -> (y_8123) ->
    ((lte_13) (succ_7 x_8122) y_8123)

#[program]
def pred_15 :=
  fun pred_8124 (__8125) ->
    match __8125 with
    | zero_6  => zero_6 | succ_7 n_8126 => n_8126
    end

#[program]
def add_16 :=
  fun add_8127 (__8128) -> (__8129) ->
    match __8128 with
    | zero_6  => __8129
    | succ_7 n_8130 => (succ_7 ((add_8127) n_8130 __8129))
    end

#[program]
def sub_17 :=
  fun sub_8131 (__8132) -> (__8133) ->
    match __8133 with
    | zero_6  => __8132
    | succ_7 n_8134 => ((sub_8131) ((pred_15) __8132) n_8134)
    end

#[program]
def mul_18 :=
  fun mul_8135 (__8136) -> (__8137) ->
    match __8136 with
    | zero_6  => zero_6
    | succ_7 n_8138 => ((add_16) __8137 ((mul_8135) n_8138 __8137))
    end

#[program]
def div_19 :=
  fun div_8139 (x_8140) -> (y_8141) ->
    match ((lt_14) x_8140 y_8141) with
    | true_4  => zero_6
    | false_5  =>
      let loop_8142 :=
        fun loop_8143 (x_8144) -> (y_8145) ->
          match ((sub_17) x_8144 ((pred_15) y_8145)) with
          | zero_6  => zero_6
          | succ_7 n_8146 => (succ_7 ((loop_8143) n_8146 y_8145))
          end
      in ((loop_8142) x_8140 y_8141)
    end

#[program]
def rem_20 :=
  fun rem_8147 (x_8148) -> (y_8149) ->
    ((sub_17) x_8148 ((mul_18) ((div_19) x_8148 y_8149) y_8149))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_55 := NULL

#[logical]
def prod0UL_54 := NULL

#[logical]
def prod0LU_53 := NULL

#[logical]
def prod0LL_52 := NULL

#[logical]
def prod1UU_59 := NULL

#[logical]
def prod1UL_58 := NULL

#[logical]
def prod1LU_57 := NULL

#[logical]
def prod1LL_56 := NULL

#[program]
def pow_23 :=
  fun pow_8150 (x_8151) -> (y_8152) ->
    let loop_8153 :=
      fun loop_8154 (acc_8155) -> (y_8156) ->
        match (__lte__ y_8156 0) with
        | true_4  => acc_8155
        | false_5  =>
          ((loop_8154) (__mul__ x_8151 acc_8155) (__sub__ y_8156 1))
        end
    in ((loop_8153) 1 y_8152)

#[program]
def powm_24 :=
  fun powm_8157 (x_8158) -> (y_8159) -> (m_8160) ->
    let loop_8161 :=
      fun loop_8162 (acc_8163) -> (y_8164) ->
        match (__lte__ y_8164 0) with
        | true_4  => acc_8163
        | false_5  =>
          ((loop_8162)
            (__mod__ (__mul__ x_8158 acc_8163) m_8160) (__sub__ y_8164 1))
        end
    in ((loop_8161) 1 y_8159)

#[program]
def split_25 :=
  fun split_8165 (__8166) ->
    match __8166 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_8167 tl_8168 =>
      match tl_8168 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_8167 nilUL_22) nilUL_22)
      | consUL_23 hd_8169 tl_8170 =>
        match ((split_8165) tl_8170) with
        | ex1LL_30 m_8171 n_8172 =>
          (ex1LL_30 (consUL_23 hd_8167 m_8171) (consUL_23 hd_8169 n_8172))
        end
      end
    end

-----------------------------------------

def rwlUU_29 :=
  fun rwl_8316 (A_8317) -> (m_8318) -> (n_8319) -> (B_8320) -> (__8321) ->
  (__8322) -> __8322

def rwlUL_28 :=
  fun rwl_8323 (A_8324) -> (m_8325) -> (n_8326) -> (B_8327) -> (__8328) ->
  (__8329) -> __8329

def rwlLU_27 :=
  fun rwl_8330 (A_8331) -> (m_8332) -> (n_8333) -> (B_8334) -> (__8335) ->
  (__8336) -> __8336

def rwlLL_26 :=
  fun rwl_8337 (A_8338) -> (m_8339) -> (n_8340) -> (B_8341) -> (__8342) ->
  (__8343) -> __8343

def rwrUU_33 :=
  fun rwr_8344 (A_8345) -> (m_8346) -> (n_8347) -> (B_8348) -> (__8349) ->
  (__8350) -> __8350

def rwrUL_32 :=
  fun rwr_8351 (A_8352) -> (m_8353) -> (n_8354) -> (B_8355) -> (__8356) ->
  (__8357) -> __8357

def rwrLU_31 :=
  fun rwr_8358 (A_8359) -> (m_8360) -> (n_8361) -> (B_8362) -> (__8363) ->
  (__8364) -> __8364

def rwrLL_30 :=
  fun rwr_8365 (A_8366) -> (m_8367) -> (n_8368) -> (B_8369) -> (__8370) ->
  (__8371) -> __8371

def sing_elimUU_47 :=
  fun sing_elim_8372 (A_8373) -> (x_8374) -> (__8375) -> __8375

def sing_elimUL_46 :=
  fun sing_elim_8376 (A_8377) -> (x_8378) -> (__8379) -> __8379

def sing_elimLU_45 :=
  fun sing_elim_8380 (A_8381) -> (x_8382) -> (__8383) -> !!

def sing_elimLL_44 :=
  fun sing_elim_8384 (A_8385) -> (x_8386) -> (__8387) -> __8387

def not_9 :=
  fun not_8388 (__8389) ->
    match __8389 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_10 :=
  fun and_8390 (__8391) -> (__8392) ->
    match __8391 with
    | true_4 => match __8392 with
                | true_4 => true_4 | false_5 => false_5
                end
    | false_5 => false_5
    end

def or_11 :=
  fun or_8393 (__8394) -> (__8395) ->
    match __8394 with
    | true_4 => true_4
    | false_5 =>
      match __8395 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_12 :=
  fun xor_8396 (__8397) -> (__8398) -o
    match __8397 with
    | true_4 => match __8398 with
                | true_4 => false_5 | false_5 => true_4
                end
    | false_5 =>
      match __8398 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_13 :=
  fun lte_8399 (__8400) -> (__8401) ->
    match __8400 with
    | zero_6  => true_4
    | succ_7 n_8402 =>
      match __8401 with
      | zero_6  => false_5 | succ_7 n_8403 => ((lte_8399) n_8402 n_8403)
      end
    end

def lt_14 :=
  fun lt_8404 (x_8405) -> (y_8406) -> ((lte_13) (succ_7 x_8405) y_8406)

def pred_15 :=
  fun pred_8407 (__8408) ->
    match __8408 with
    | zero_6  => (zero_6 ) | succ_7 n_8409 => n_8409
    end

def add_16 :=
  fun add_8410 (__8411) -> (__8412) ->
    match __8411 with
    | zero_6  => __8412
    | succ_7 n_8413 => (succ_7 ((add_8410) n_8413 __8412))
    end

def sub_17 :=
  fun sub_8414 (__8415) -> (__8416) ->
    match __8416 with
    | zero_6  => __8415
    | succ_7 n_8417 => ((sub_8414) ((pred_15) __8415) n_8417)
    end

def mul_18 :=
  fun mul_8418 (__8419) -> (__8420) ->
    match __8419 with
    | zero_6  => (zero_6 )
    | succ_7 n_8421 => ((add_16) __8420 ((mul_8418) n_8421 __8420))
    end

def div_19 :=
  fun div_8422 (x_8423) -> (y_8424) ->
    match ((lt_14) x_8423 y_8424) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_8425 :=
        fun loop_8426 (x_8427) -> (y_8428) ->
          match ((sub_17) x_8427 ((pred_15) y_8428)) with
          | zero_6  => (zero_6 )
          | succ_7 n_8429 => (succ_7 ((loop_8426) n_8429 y_8428))
          end
      in ((loop_8425) x_8423 y_8424)
    end

def rem_20 :=
  fun rem_8430 (x_8431) -> (y_8432) ->
    ((sub_17) x_8431 ((mul_18) ((div_19) x_8431 y_8432) y_8432))

def pow_23 :=
  fun pow_8433 (x_8434) -> (y_8435) ->
    let loop_8436 :=
      fun loop_8437 (acc_8438) -> (y_8439) ->
        match (__lte__ y_8439 0) with
        | true_4 => acc_8438
        | false_5 =>
          ((loop_8437) (__mul__ x_8434 acc_8438) (__sub__ y_8439 1))
        end
    in ((loop_8436) 1 y_8435)

def powm_24 :=
  fun powm_8440 (x_8441) -> (y_8442) -> (m_8443) ->
    let loop_8444 :=
      fun loop_8445 (acc_8446) -> (y_8447) ->
        match (__lte__ y_8447 0) with
        | true_4 => acc_8446
        | false_5 =>
          ((loop_8445)
            (__mod__ (__mul__ x_8441 acc_8446) m_8443) (__sub__ y_8447 1))
        end
    in ((loop_8444) 1 y_8442)

def split_25 :=
  fun split_8448 (__8449) ->
    match __8449 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_8450 tl_8451 =>
      match tl_8451 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_8450 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_8452 tl_8453 =>
        match ((split_8448) tl_8453) with
        | ex1LL_30 m_8454 n_8455 =>
          (ex1LL_30 (consUL_23 hd_8450 m_8454) (consUL_23 hd_8452 n_8455))
        end
      end
    end

-----------------------------------------

def rwlUU_29 :=
  lam (A_8596) -> (m_8597) -> (n_8598) -> (B_8599) -> (__8600) -> (__8601) ->
    __8601

def rwlUL_28 :=
  lam (A_8602) -> (m_8603) -> (n_8604) -> (B_8605) -> (__8606) -> (__8607) ->
    __8607

def rwlLU_27 :=
  lam (A_8608) -> (m_8609) -> (n_8610) -> (B_8611) -> (__8612) -> (__8613) ->
    __8613

def rwlLL_26 :=
  lam (A_8614) -> (m_8615) -> (n_8616) -> (B_8617) -> (__8618) -> (__8619) ->
    __8619

def rwrUU_33 :=
  lam (A_8620) -> (m_8621) -> (n_8622) -> (B_8623) -> (__8624) -> (__8625) ->
    __8625

def rwrUL_32 :=
  lam (A_8626) -> (m_8627) -> (n_8628) -> (B_8629) -> (__8630) -> (__8631) ->
    __8631

def rwrLU_31 :=
  lam (A_8632) -> (m_8633) -> (n_8634) -> (B_8635) -> (__8636) -> (__8637) ->
    __8637

def rwrLL_30 :=
  lam (A_8638) -> (m_8639) -> (n_8640) -> (B_8641) -> (__8642) -> (__8643) ->
    __8643

def sing_elimUU_47 := lam (A_8644) -> (x_8645) -> (__8646) -> __8646

def sing_elimUL_46 := lam (A_8647) -> (x_8648) -> (__8649) -> __8649

def sing_elimLU_45 := lam (A_8650) -> (x_8651) -> (__8652) -> !!

def sing_elimLL_44 := lam (A_8653) -> (x_8654) -> (__8655) -> __8655

def not_9 :=
  lam (__8656) ->
    match __8656 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_10 :=
  lam (__8657) -> (__8658) ->
    match __8657 with
    | true_4 => match __8658 with
                | true_4 => true_4 | false_5 => false_5
                end
    | false_5 => false_5
    end

def or_11 :=
  lam (__8659) -> (__8660) ->
    match __8659 with
    | true_4 => true_4
    | false_5 =>
      match __8660 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_12 :=
  lam (__8661) -> (__8662) -o
    match __8661 with
    | true_4 => match __8662 with
                | true_4 => false_5 | false_5 => true_4
                end
    | false_5 =>
      match __8662 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_13 :=
  fun lte_8663 (__8664) -> (__8665) ->
    match __8664 with
    | zero_6  => true_4
    | succ_7 n_8666 =>
      match __8665 with
      | zero_6  => false_5 | succ_7 n_8667 => ((lte_8663) n_8666 n_8667)
      end
    end

def lt_14 := lam (x_8668) -> (y_8669) -> ((lte_13) (succ_7 x_8668) y_8669)

def pred_15 :=
  lam (__8670) ->
    match __8670 with
    | zero_6  => (zero_6 ) | succ_7 n_8671 => n_8671
    end

def add_16 :=
  fun add_8672 (__8673) -> (__8674) ->
    match __8673 with
    | zero_6  => __8674
    | succ_7 n_8675 => (succ_7 ((add_8672) n_8675 __8674))
    end

def sub_17 :=
  fun sub_8676 (__8677) -> (__8678) ->
    match __8678 with
    | zero_6  => __8677
    | succ_7 n_8679 => ((sub_8676) ((pred_15) __8677) n_8679)
    end

def mul_18 :=
  fun mul_8680 (__8681) -> (__8682) ->
    match __8681 with
    | zero_6  => (zero_6 )
    | succ_7 n_8683 => ((add_16) __8682 ((mul_8680) n_8683 __8682))
    end

def div_19 :=
  lam (x_8684) -> (y_8685) ->
    match ((lt_14) x_8684 y_8685) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_8686 :=
        fun loop_8687 (x_8688) -> (y_8689) ->
          match ((sub_17) x_8688 ((pred_15) y_8689)) with
          | zero_6  => (zero_6 )
          | succ_7 n_8690 => (succ_7 ((loop_8687) n_8690 y_8689))
          end
      in ((loop_8686) x_8684 y_8685)
    end

def rem_20 :=
  lam (x_8691) -> (y_8692) ->
    ((sub_17) x_8691 ((mul_18) ((div_19) x_8691 y_8692) y_8692))

def pow_23 :=
  lam (x_8693) -> (y_8694) ->
    let loop_8695 :=
      fun loop_8696 (acc_8697) -> (y_8698) ->
        match (__lte__ y_8698 0) with
        | true_4 => acc_8697
        | false_5 =>
          ((loop_8696) (__mul__ x_8693 acc_8697) (__sub__ y_8698 1))
        end
    in ((loop_8695) 1 y_8694)

def powm_24 :=
  lam (x_8699) -> (y_8700) -> (m_8701) ->
    let loop_8702 :=
      fun loop_8703 (acc_8704) -> (y_8705) ->
        match (__lte__ y_8705 0) with
        | true_4 => acc_8704
        | false_5 =>
          ((loop_8703)
            (__mod__ (__mul__ x_8699 acc_8704) m_8701) (__sub__ y_8705 1))
        end
    in ((loop_8702) 1 y_8700)

def split_25 :=
  fun split_8706 (__8707) ->
    match __8707 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_8708 tl_8709 =>
      match tl_8709 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_8708 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_8710 tl_8711 =>
        match ((split_8706) tl_8711) with
        | ex1LL_30 m_8712 n_8713 =>
          (ex1LL_30 (consUL_23 hd_8708 m_8712) (consUL_23 hd_8710 n_8713))
        end
      end
    end

-----------------------------------------

fn rwlUU_1(A_2%U, m_3%U, n_4%U, B_5%U, __6%U, __7%U) {
  
  return __7;
}

fn rwlUL_8(A_9%U, m_10%U, n_11%U, B_12%U, __13%U, __14%U) {
  
  return __14;
}

fn rwlLU_15(A_16%U, m_17%U, n_18%U, B_19%U, __20%U, __21%U) {
  
  return __21;
}

fn rwlLL_22(A_23%U, m_24%U, n_25%U, B_26%U, __27%U, __28%U) {
  
  return __28;
}

fn rwrUU_29(A_30%U, m_31%U, n_32%U, B_33%U, __34%U, __35%U) {
  
  return __35;
}

fn rwrUL_36(A_37%U, m_38%U, n_39%U, B_40%U, __41%U, __42%U) {
  
  return __42;
}

fn rwrLU_43(A_44%U, m_45%U, n_46%U, B_47%U, __48%U, __49%U) {
  
  return __49;
}

fn rwrLL_50(A_51%U, m_52%U, n_53%U, B_54%U, __55%U, __56%U) {
  
  return __56;
}

fn sing_elimUU_57(A_58%U, x_59%U, __60%U) {
  
  return __60;
}

fn sing_elimUL_61(A_62%U, x_63%U, __64%U) {
  
  return __64;
}

fn sing_elimLU_65(A_66%U, x_67%U, __68%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_69(A_70%U, x_71%U, __72%U) {
  
  return __72;
}

fn not_73(__74%U) {
  match(__74){
    true_4() => {
      x_75 := false_5;
    }
    false_5() => {
      x_75 := true_4;
    }
  }
  return x_75;
}

fn and_76(__77%U, __78%U) {
  match(__77){
    true_4() => {
      match(__78){
        true_4() => {
          x_80 := true_4;
        }
        false_5() => {
          x_80 := false_5;
        }
      }
      x_79 := x_80;
    }
    false_5() => {
      x_79 := false_5;
    }
  }
  return x_79;
}

fn or_81(__82%U, __83%U) {
  match(__82){
    true_4() => {
      x_84 := true_4;
    }
    false_5() => {
      match(__83){
        true_4() => {
          x_85 := true_4;
        }
        false_5() => {
          x_85 := false_5;
        }
      }
      x_84 := x_85;
    }
  }
  return x_84;
}

fn xor_86(__87%U, __88%L) {
  match(__87){
    true_4() => {
      match(__88){
        true_4() => {
          x_90 := false_5;
        }
        false_5() => {
          x_90 := true_4;
        }
      }
      x_89 := x_90;
    }
    false_5() => {
      match(__88){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_89 := x_91;
    }
  }
  return x_89;
}

fn lte_92(__93%U, __94%U) {
  match[U](__93){
    zero_6() => {
      x_95 := true_4;
    }
    succ_7(n_96) => {
      match[U](__94){
        zero_6() => {
          x_97 := false_5;
        }
        succ_7(n_98) => {
          x_99 := lte_92(n_96, n_98);
          x_97 := x_99;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lt_100(x_101%U, y_102%U) {
  x_104 := mkconstr(succ_7, [x_101]);
  x_103 := lte_92(x_104, y_102);
  return x_103;
}

fn pred_105(__106%U) {
  match[U](__106){
    zero_6() => {
      x_108 := mkconstr(zero_6, []);
      x_107 := x_108;
    }
    succ_7(n_109) => {
      x_107 := n_109;
    }
  }
  return x_107;
}

fn add_110(__111%U, __112%U) {
  match[U](__111){
    zero_6() => {
      x_113 := __112;
    }
    succ_7(n_114) => {
      x_115 := add_110(n_114, __112);
      x_116 := mkconstr(succ_7, [x_115]);
      x_113 := x_116;
    }
  }
  return x_113;
}

fn sub_117(__118%U, __119%U) {
  match[U](__119){
    zero_6() => {
      x_120 := __118;
    }
    succ_7(n_121) => {
      x_123 := pred_105(__118);
      x_122 := sub_117(x_123, n_121);
      x_120 := x_122;
    }
  }
  return x_120;
}

fn mul_124(__125%U, __126%U) {
  match[U](__125){
    zero_6() => {
      x_128 := mkconstr(zero_6, []);
      x_127 := x_128;
    }
    succ_7(n_129) => {
      x_131 := mul_124(n_129, __126);
      x_130 := add_110(__126, x_131);
      x_127 := x_130;
    }
  }
  return x_127;
}

fn div_132(x_133%U, y_134%U) {
  x_136 := lt_100(x_133, y_134);
  match(x_136){
    true_4() => {
      x_137 := mkconstr(zero_6, []);
      x_135 := x_137;
    }
    false_5() => {
      x_139 :=
        fn loop_140(x_141%U, y_142%U) {
          x_145 := pred_105(y_142);
          x_144 := sub_117(x_141, x_145);
          match[U](x_144){
            zero_6() => {
              x_146 := mkconstr(zero_6, []);
              x_143 := x_146;
            }
            succ_7(n_147) => {
              x_148 := loop_140(n_147, y_142);
              x_149 := mkconstr(succ_7, [x_148]);
              x_143 := x_149;
            }
          }
          return x_143;
        };
      loop_138 := x_139;
      x_150 := loop_138(x_133, y_134);
      x_135 := x_150;
    }
  }
  return x_135;
}

fn rem_151(x_152%U, y_153%U) {
  x_156 := div_132(x_152, y_153);
  x_155 := mul_124(x_156, y_153);
  x_154 := sub_117(x_152, x_155);
  return x_154;
}

fn pow_157(x_158%U, y_159%U) {
  x_161 :=
    fn loop_162(acc_163%U, y_164%U) {
      x_166 := lte(y_164, y_164);
      match(x_166){
        true_4() => {
          x_165 := acc_163;
        }
        false_5() => {
          x_168 := mul(x_158, x_158);
          x_169 := sub(y_164, y_164);
          x_167 := loop_162(x_168, x_169);
          x_165 := x_167;
        }
      }
      return x_165;
    };
  loop_160 := x_161;
  x_170 := loop_160(1, y_159);
  return x_170;
}

fn powm_171(x_172%U, y_173%U, m_174%U) {
  x_176 :=
    fn loop_177(acc_178%U, y_179%U) {
      x_181 := lte(y_179, y_179);
      match(x_181){
        true_4() => {
          x_180 := acc_178;
        }
        false_5() => {
          x_184 := mul(x_172, x_172);
          x_185 := mul(x_172, x_172);
          x_183 := mul(x_184, x_185);
          x_186 := sub(y_179, y_179);
          x_182 := loop_177(x_183, x_186);
          x_180 := x_182;
        }
      }
      return x_180;
    };
  loop_175 := x_176;
  x_187 := loop_175(1, y_173);
  return x_187;
}

fn split_188(__189%U) {
  match[L](__189){
    nilUL_22() => {
      x_191 := mkconstr(nilUL_22, []);
      x_192 := mkconstr(nilUL_22, []);
      x_193 := mkconstr(ex1LL_30, [x_191, x_192]);
      x_190 := x_193;
    }
    consUL_23(hd_194, tl_195) => {
      match[L](tl_195){
        nilUL_22() => {
          x_197 := mkconstr(nilUL_22, []);
          x_198 := mkconstr(consUL_23, [hd_194, x_197]);
          x_199 := mkconstr(nilUL_22, []);
          x_200 := mkconstr(ex1LL_30, [x_198, x_199]);
          x_196 := x_200;
        }
        consUL_23(hd_201, tl_202) => {
          x_204 := split_188(tl_202);
          match[L](x_204){
            ex1LL_30(m_205, n_206) => {
              x_207 := mkconstr(consUL_23, [hd_194, m_205]);
              x_208 := mkconstr(consUL_23, [hd_201, n_206]);
              x_209 := mkconstr(ex1LL_30, [x_207, x_208]);
              x_203 := x_209;
            }
          }
          x_196 := x_203;
        }
      }
      x_190 := x_196;
    }
  }
  return x_190;
}

-----------------------------------------

fn rwlUU_1(A_2%U, m_3%U, n_4%U, B_5%U, __6%U, __7%U) {
  
  return __7;
}

fn rwlUL_8(A_9%U, m_10%U, n_11%U, B_12%U, __13%U, __14%U) {
  
  return __14;
}

fn rwlLU_15(A_16%U, m_17%U, n_18%U, B_19%U, __20%U, __21%U) {
  
  return __21;
}

fn rwlLL_22(A_23%U, m_24%U, n_25%U, B_26%U, __27%U, __28%U) {
  
  return __28;
}

fn rwrUU_29(A_30%U, m_31%U, n_32%U, B_33%U, __34%U, __35%U) {
  
  return __35;
}

fn rwrUL_36(A_37%U, m_38%U, n_39%U, B_40%U, __41%U, __42%U) {
  
  return __42;
}

fn rwrLU_43(A_44%U, m_45%U, n_46%U, B_47%U, __48%U, __49%U) {
  
  return __49;
}

fn rwrLL_50(A_51%U, m_52%U, n_53%U, B_54%U, __55%U, __56%U) {
  
  return __56;
}

fn sing_elimUU_57(A_58%U, x_59%U, __60%U) {
  
  return __60;
}

fn sing_elimUL_61(A_62%U, x_63%U, __64%U) {
  
  return __64;
}

fn sing_elimLU_65(A_66%U, x_67%U, __68%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_69(A_70%U, x_71%U, __72%U) {
  
  return __72;
}

fn not_73(__74%U) {
  match(__74){
    true_4() => {
      x_75 := false_5;
    }
    false_5() => {
      x_75 := true_4;
    }
  }
  return x_75;
}

fn and_76(__77%U, __78%U) {
  match(__77){
    true_4() => {
      match(__78){
        true_4() => {
          x_80 := true_4;
        }
        false_5() => {
          x_80 := false_5;
        }
      }
      x_79 := x_80;
    }
    false_5() => {
      x_79 := false_5;
    }
  }
  return x_79;
}

fn or_81(__82%U, __83%U) {
  match(__82){
    true_4() => {
      x_84 := true_4;
    }
    false_5() => {
      match(__83){
        true_4() => {
          x_85 := true_4;
        }
        false_5() => {
          x_85 := false_5;
        }
      }
      x_84 := x_85;
    }
  }
  return x_84;
}

fn xor_86(__87%U, __88%L) {
  match(__87){
    true_4() => {
      match(__88){
        true_4() => {
          x_90 := false_5;
        }
        false_5() => {
          x_90 := true_4;
        }
      }
      x_89 := x_90;
    }
    false_5() => {
      match(__88){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_89 := x_91;
    }
  }
  return x_89;
}

fn lte_92(__93%U, __94%U) {
  match[U](__93){
    zero_6() => {
      x_95 := true_4;
    }
    succ_7(n_96) => {
      match[U](__94){
        zero_6() => {
          x_97 := false_5;
        }
        succ_7(n_98) => {
          x_99 := lte_92(n_96, n_98);
          x_97 := x_99;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lt_100(x_101%U, y_102%U) {
  x_104 := mkconstr(succ_7, [x_101]);
  x_103 := lte_92(x_104, y_102);
  return x_103;
}

fn pred_105(__106%U) {
  match[U](__106){
    zero_6() => {
      x_108 := mkconstr(zero_6, []);
      x_107 := x_108;
    }
    succ_7(n_109) => {
      x_107 := n_109;
    }
  }
  return x_107;
}

fn add_110(__111%U, __112%U) {
  match[U](__111){
    zero_6() => {
      x_113 := __112;
    }
    succ_7(n_114) => {
      x_115 := add_110(n_114, __112);
      x_116 := mkconstr(succ_7, [x_115]);
      x_113 := x_116;
    }
  }
  return x_113;
}

fn sub_117(__118%U, __119%U) {
  match[U](__119){
    zero_6() => {
      x_120 := __118;
    }
    succ_7(n_121) => {
      x_123 := pred_105(__118);
      x_122 := sub_117(x_123, n_121);
      x_120 := x_122;
    }
  }
  return x_120;
}

fn mul_124(__125%U, __126%U) {
  match[U](__125){
    zero_6() => {
      x_128 := mkconstr(zero_6, []);
      x_127 := x_128;
    }
    succ_7(n_129) => {
      x_131 := mul_124(n_129, __126);
      x_130 := add_110(__126, x_131);
      x_127 := x_130;
    }
  }
  return x_127;
}

fn div_132(x_133%U, y_134%U) {
  x_136 := lt_100(x_133, y_134);
  match(x_136){
    true_4() => {
      x_137 := mkconstr(zero_6, []);
      x_135 := x_137;
    }
    false_5() => {
      x_139 :=
        fn loop_140(x_141%U, y_142%U) {
          x_145 := pred_105(y_142);
          x_144 := sub_117(x_141, x_145);
          match[U](x_144){
            zero_6() => {
              x_146 := mkconstr(zero_6, []);
              x_143 := x_146;
            }
            succ_7(n_147) => {
              x_148 := loop_140(n_147, y_142);
              x_149 := mkconstr(succ_7, [x_148]);
              x_143 := x_149;
            }
          }
          return x_143;
        };
      loop_138 := x_139;
      x_150 := loop_138(x_133, y_134);
      x_135 := x_150;
    }
  }
  return x_135;
}

fn rem_151(x_152%U, y_153%U) {
  x_156 := div_132(x_152, y_153);
  x_155 := mul_124(x_156, y_153);
  x_154 := sub_117(x_152, x_155);
  return x_154;
}

fn pow_157(x_158%U, y_159%U) {
  x_161 :=
    fn loop_162(acc_163%U, y_164%U) {
      x_166 := lte(y_164, y_164);
      match(x_166){
        true_4() => {
          x_165 := acc_163;
        }
        false_5() => {
          x_168 := mul(x_158, x_158);
          x_169 := sub(y_164, y_164);
          x_167 := loop_162(x_168, x_169);
          x_165 := x_167;
        }
      }
      return x_165;
    };
  loop_160 := x_161;
  x_170 := loop_160(1, y_159);
  return x_170;
}

fn powm_171(x_172%U, y_173%U, m_174%U) {
  x_176 :=
    fn loop_177(acc_178%U, y_179%U) {
      x_181 := lte(y_179, y_179);
      match(x_181){
        true_4() => {
          x_180 := acc_178;
        }
        false_5() => {
          x_184 := mul(x_172, x_172);
          x_185 := mul(x_172, x_172);
          x_183 := mul(x_184, x_185);
          x_186 := sub(y_179, y_179);
          x_182 := loop_177(x_183, x_186);
          x_180 := x_182;
        }
      }
      return x_180;
    };
  loop_175 := x_176;
  x_187 := loop_175(1, y_173);
  return x_187;
}

fn split_188(__189%U) {
  match[L](__189){
    nilUL_22() => {
      x_191 := reconstr(__189, nilUL_22, );
      x_192 := mkconstr(nilUL_22, []);
      x_193 := mkconstr(ex1LL_30, [x_191, x_192]);
      x_190 := x_193;
    }
    consUL_23(hd_194, tl_195) => {
      match[L](tl_195){
        nilUL_22() => {
          x_197 := reconstr(tl_195, nilUL_22, );
          x_198 := reconstr(__189, consUL_23, hd_194, x_197);
          x_199 := mkconstr(nilUL_22, []);
          x_200 := mkconstr(ex1LL_30, [x_198, x_199]);
          x_196 := x_200;
        }
        consUL_23(hd_201, tl_202) => {
          x_204 := split_188(tl_202);
          match[L](x_204){
            ex1LL_30(m_205, n_206) => {
              x_207 := reconstr(x_204, consUL_23, hd_194, m_205);
              x_208 := reconstr(tl_195, consUL_23, hd_201, n_206);
              x_209 := reconstr(__189, ex1LL_30, x_207, x_208);
              x_203 := x_209;
            }
          }
          x_196 := x_203;
        }
      }
      x_190 := x_196;
    }
  }
  return x_190;
}

-----------------------------------------

