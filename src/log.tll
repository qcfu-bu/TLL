[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []}
  ]

-----------------------------------------

#[logical]
inductive eq_1‹s_342› (A_343 : Type‹s_342›) (m_344 : A_343):
  A_343 -> U
where
| refl_1 : (eq_1‹??_1› ?_1[0;0] m_344 m_344)

#[program]
def rwl_1‹s_346,r_347› :
  ∀ {A_348 : Type‹s_346›} ->
    ∀ {m_349 : A_348} ->
      ∀ {n_350 : A_348} ->
        ∀ {B_351 : A_348 -> Type‹r_347›} ->
          {(eq_1‹??_3› ?_3[0;0] m_349 n_350)} ->
            ((B_351) m_349) -> ((B_351) n_350)
:=
  fun rwl_355 :
    ∀ {A_356 : Type‹s_346›} ->
      ∀ {m_357 : A_356} ->
        ∀ {n_358 : A_356} ->
          ∀ {B_359 : A_356 -> Type‹r_347›} ->
            {(eq_1‹??_2› ?_2[0;0] m_357 n_358)} ->
              ((B_359) m_357) -> ((B_359) n_358)
  | A_363 m_364 n_365 B_366 refl_1 x_367 => x_367

#[program]
def rwr_2‹s_368,r_369› :
  ∀ {A_370 : Type‹s_368›} ->
    ∀ {m_371 : A_370} ->
      ∀ {n_372 : A_370} ->
        ∀ {B_373 : A_370 -> Type‹r_369›} ->
          {(eq_1‹??_5› ?_5[0;0] m_371 n_372)} ->
            ((B_373) n_372) -> ((B_373) m_371)
:=
  fun rwr_377 :
    ∀ {A_378 : Type‹s_368›} ->
      ∀ {m_379 : A_378} ->
        ∀ {n_380 : A_378} ->
          ∀ {B_381 : A_378 -> Type‹r_369›} ->
            {(eq_1‹??_4› ?_4[0;0] m_379 n_380)} ->
              ((B_381) n_380) -> ((B_381) m_379)
  | A_385 m_386 n_387 B_388 refl_1 x_389 => x_389

#[logical]
def congr_3‹s_390,r_391,t_392› :
  ∀ (A_393 : Type‹s_390›) ->
    ∀ (B_394 : Type‹r_391›) ->
      ∀ (m_395 : A_393) ->
        ∀ (n_396 : A_393) ->
          ∀ (f_397 : forall‹t_392›(__398 : A_393), B_394) ->
            (eq_1‹??_9› ?_10[0;0] m_395 n_396) ->
              (eq_1‹??_10› ?_11[0;0] ((f_397) m_395) ((f_397) n_396))
:=
  fun congr_400 :
    ∀ (A_401 : Type‹s_390›) ->
      ∀ (B_402 : Type‹r_391›) ->
        ∀ (m_403 : A_401) ->
          ∀ (n_404 : A_401) ->
            ∀ (f_405 : forall‹t_392›(__406 : A_401), B_402) ->
              (eq_1‹??_6› ?_6[0;0] m_403 n_404) ->
                (eq_1‹??_7› ?_7[0;0] ((f_405) m_403) ((f_405) n_404))
  | A_408 B_409 m_410 n_411 f_412 refl_1 =>
    (refl_1‹??_8› ?_8[0;0] ?_9[0;0])

#[logical]
def axiom_K_4‹› :
  ∀ {A_413 : U} ->
    ∀ {m_414 : A_413} ->
      ∀ (x_415 : (eq_1‹??_15› ?_18[0;0] m_414 m_414)) ->
        (eq_1‹??_17›
          ?_21[0;0] x_415 (refl_1‹??_16› ?_19[0;0] ?_20[0;0]))
:=
  fun axiom_K_416 :
    ∀ {A_417 : U} ->
      ∀ {m_418 : A_417} ->
        ∀ (x_419 : (eq_1‹??_11› ?_12[0;0] m_418 m_418)) ->
          (eq_1‹??_13›
            ?_15[0;0] x_419 (refl_1‹??_12› ?_13[0;0] ?_14[0;0]))
  | A_420 m_421 refl_1 => (refl_1‹??_14› ?_16[0;0] ?_17[0;0])

#[program]
inductive sing_2‹s_422,t_423› (A_424 : Type‹s_422›):
  A_424 -> Type‹t_423›
where
| just_2 (m_426 : A_424) : (sing_2‹??_18,??_19› ?_22[0;0] m_426)

#[program]
def sing_elim_5‹s_427,t_428› :
  ∀ {A_429 : Type‹s_427›} ->
    ∀ {x_430 : A_429} -> (sing_2‹s_427,t_428› ?_24[0;0] x_430) -> A_429
:=
  fun sing_elim_432 :
    ∀ {A_433 : Type‹s_427›} ->
      ∀ {x_434 : A_433} ->
        (sing_2‹s_427,t_428› ?_23[0;0] x_434) -> A_433
  | A_436 x_437 (just_2 x_438) => x_438

#[logical]
def sing_uniq_6‹s_439,t_440› :
  ∀ (A_441 : Type‹s_439›) ->
    ∀ (x0_442 : A_441) ->
      ∀ (x_443 : (sing_2‹s_439,t_440› ?_31[0;0] x0_442)) ->
        (eq_1‹??_26›
          ?_34[0;0] x0_442
          ((sing_elim_5‹??_24,??_25›) ?_33[0;0] ?_32[0;0] x_443))
:=
  fun sing_uniq_444 :
    ∀ (A_445 : Type‹s_439›) ->
      ∀ (x0_446 : A_445) ->
        ∀ (x_447 : (sing_2‹s_439,t_440› ?_25[0;0] x0_446)) ->
          (eq_1‹??_22›
            ?_28[0;0] x0_446
            ((sing_elim_5‹??_20,??_21›) ?_27[0;0] ?_26[0;0] x_447))
  | A_448 x0_449 (just_2 _450) => (refl_1‹??_23› ?_29[0;0] ?_30[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_7‹› :
  ∀ (x_451 : unit_3) -> (eq_1‹??_30› ?_40[0;0] x_451 tt_3)
:=
  fun unit_eta_452 :
    ∀ (x_453 : unit_3) -> (eq_1‹??_27› ?_35[0;0] x_453 tt_3)
  | x_454 =>
    match x_454 in
      ∀ (x0_455 : ?_36[0;0]) -o (eq_1‹??_28› ?_37[0;0] x0_455 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_38[0;0] ?_39[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_8‹› : bool_4 -> bool_4 :=
  fun not_457 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_9‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_461 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _464 _465 => false_5

#[program]
def or_10‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_468 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _471 _472 => true_4

#[program]
def xor_11‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_475 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _478 _479 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_480 : nat_5) : nat_5

#[program]
def lte_12‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_483 : nat_5 -> nat_5 -> bool_4
  | zero_6 _486 => true_4
  | _487 zero_6 => false_5
  | (succ_7 x_488) (succ_7 y_489) => ((lte_483) x_488 y_489)

#[program]
def lt_13‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_492 : nat_5 -> nat_5 -> bool_4
  | x_495 y_496 => ((lte_12) (succ_7‹› x_495) y_496)

#[program]
def pred_14‹› : nat_5 -> nat_5 :=
  fun pred_498 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_500) => x_500

#[program]
def add_15‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_503 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_506 => y_506
  | (succ_7 x_507) y_508 => (succ_7‹› ((add_503) x_507 y_508))

#[program]
def sub_16‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_511 : nat_5 -> nat_5 -> nat_5
  | x_514 zero_6 => x_514
  | x_515 (succ_7 y_516) => ((sub_511) ((pred_14) x_515) y_516)

#[program]
def mul_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_519 : nat_5 -> nat_5 -> nat_5
  | zero_6 _522 => zero_6
  | (succ_7 x_523) y_524 => ((add_15) y_524 ((mul_519) x_523 y_524))

#[program]
def div_18‹› : nat_5 -> nat_5 -> ?_47[0;0] :=
  fun div_527 : nat_5 -> nat_5 -> ?_41[0;0]
  | x_530 y_531 =>
    match ((lt_13) x_530 y_531) in ?_42[0;0] -o ?_43[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_533 :=
        fun loop_534 : nat_5 -> nat_5 -> ?_44[0;0]
        | x_537 y_538 =>
          match ((sub_16) x_537 ((pred_14) y_538)) in ?_45[0;0] -o ?_46[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_540) => (succ_7‹› ((loop_534) x_540 y_538))
      in ((loop_533) x_530 y_531)

#[program]
def rem_19‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun rem_543 : nat_5 -> nat_5 -> ?_48[0;0]
  | x_546 y_547 => ((sub_16) x_546 ((mul_17) ((div_18) x_546 y_547) y_547))

#[program]
inductive list_6‹s_548,t_549› (A_550 : Type‹s_548›): Type‹t_549›
where
| nil_8 : (list_6‹??_31,??_32› A_550)
| cons_9
    (hd_551 : A_550) (tl_552 : (list_6‹??_33,t_549› A_550))
    : (list_6‹??_34,??_35› A_550)

#[program]
inductive exists0_7‹s_553,r_554› (A_555 : Type‹s_553›) (B_556 : 
A_555 -> Type‹r_554›): L where
| ex0_10
    {m_558 : A_555} (n_559 : ((B_556) m_558))
    : (exists0_7‹??_36,??_37› A_555 B_556)

#[program]
inductive exists1_8‹s_560,r_561› (A_562 : Type‹s_560›) (B_563 : 
A_562 -> Type‹r_561›): L where
| ex1_11
    (m_565 : A_562) (n_566 : ((B_563) m_565))
    : (exists1_8‹??_38,??_39› A_562 B_563)

#[logical]
def prod0_20‹s_567,r_568› :
  Type‹s_567› -> Type‹r_568› -> ?_53[0;0]
:=
  fun prod0_571 : Type‹s_567› -> Type‹r_568› -> ?_50[0;0]
  | A_574 B_575 =>
    (exists0_7‹??_40,??_41›
      A_574 fun _576 : ?_51[0;0] -> ?_52[0;0]
            | _578 => B_575)

#[logical]
def prod1_21‹s_579,r_580› :
  Type‹s_579› -> Type‹r_580› -> ?_57[0;0]
:=
  fun prod1_583 : Type‹s_579› -> Type‹r_580› -> ?_54[0;0]
  | A_586 B_587 =>
    (exists1_8‹??_42,??_43›
      A_586 fun _588 : ?_55[0;0] -> ?_56[0;0]
            | _590 => B_587)

#[program]
def pow_22‹› : int -> int -> int :=
  fun pow_593 : int -> int -> int
  | x_596 y_597 =>
    let loop_598 :=
      fun loop_599 : int -> int -> int
      | acc_602 y_603 =>
        match (__lte__ y_603 0) in ?_58[0;0] -o ?_59[0;0] with
        | true_4 => acc_602
        | false_5 => ((loop_599) (__mul__ x_596 acc_602) (__sub__ y_603 1))
    in ((loop_598) 1 y_597)

#[program]
def powm_23‹› : int -> int -> int -> int :=
  fun powm_608 : int -> int -> int -> int
  | x_612 y_613 m_614 =>
    let loop_615 :=
      fun loop_616 : int -> int -> int
      | acc_619 y_620 =>
        match (__lte__ y_620 0) in ?_60[0;0] -o ?_61[0;0] with
        | true_4 => acc_619
        | false_5 =>
          ((loop_616)
            (__mod__ (__mul__ x_612 acc_619) m_614) (__sub__ y_620 1))
    in ((loop_615) 1 y_613)

#[program]
def split_24‹t_622› :
  (list_6‹??_69,t_622› int) ->
    ((prod1_21‹??_72,??_73›)
      (list_6‹??_70,t_622› int) (list_6‹??_71,t_622› int))
:=
  fun split_624 :
    (list_6‹??_44,t_622› int) ->
      ((prod1_21‹??_47,??_48›)
        (list_6‹??_45,t_622› int) (list_6‹??_46,t_622› int))
  | nil_8 =>
    (ex1_11‹??_53,??_54›
      ?_64[0;0] ?_65[0;0] (nil_8‹??_49,??_50› ?_62[0;0])
      (nil_8‹??_51,??_52› ?_63[0;0]))
  | (cons_9 x_626 nil_8) =>
    (ex1_11‹??_61,??_62›
      ?_69[0;0] ?_70[0;0]
      (cons_9‹??_57,??_58›
        ?_67[0;0] x_626 (nil_8‹??_55,??_56› ?_66[0;0]))
      (nil_8‹??_59,??_60› ?_68[0;0]))
  | (cons_9 x_627 (cons_9 y_628 zs_629)) =>
    match ((split_624) zs_629) in ?_76[0;0] -o ?_75[0;0] with
    | (ex1_11 xs_631 ys_632) =>
      (ex1_11‹??_67,??_68›
        ?_73[0;0] ?_74[0;0] (cons_9‹??_63,??_64› ?_71[0;0] x_627 xs_631)
        (cons_9‹??_65,??_66› ?_72[0;0] y_628 ys_632))

#[program]
def merge_25‹t_633› :
  (list_6‹??_85,t_633› int) ->
    (list_6‹??_86,t_633› int) -o (list_6‹??_87,t_633› int)
:=
  fun merge_636 :
    (list_6‹??_74,t_633› int) ->
      (list_6‹??_75,t_633› int) -o (list_6‹??_76,t_633› int)
  | nil_8 ys_639 => ys_639
  | xs_640 nil_8 => xs_640
  | (cons_9 x_641 xs_642) (cons_9 y_643 ys_644) =>
    match (__lte__ x_641 y_643) in ?_77[0;0] -o ?_78[0;0] with
    | true_4 =>
      (cons_9‹??_79,??_80›
        ?_80[0;0] x_641
        ((merge_636) xs_642 (cons_9‹??_77,??_78› ?_79[0;0] y_643 ys_644)))
    | false_5 =>
      (cons_9‹??_83,??_84›
        ?_82[0;0] y_643
        ((merge_636) (cons_9‹??_81,??_82› ?_81[0;0] x_641 xs_642) ys_644))

#[program]
def msort_26‹t_646› :
  (list_6‹??_98,t_646› int) -> (list_6‹??_99,t_646› int)
:=
  fun msort_648 :
    (list_6‹??_88,t_646› int) -> (list_6‹??_89,t_646› int)
  | nil_8 => (nil_8‹??_90,??_91› ?_83[0;0])
  | (cons_9 z_650 nil_8) =>
    (cons_9‹??_94,??_95›
      ?_85[0;0] z_650 (nil_8‹??_92,??_93› ?_84[0;0]))
  | zs_651 =>
    match ((split_24‹??_96›) zs_651) in ?_87[0;0] -o ?_86[0;0] with
    | (ex1_11 xs_653 ys_654) =>
      ((merge_25‹??_97›) ((msort_648) xs_653) ((msort_648) ys_654))

-----------------------------------------

#[logical]
inductive eq_1‹s_5094› (A_5095 : Type‹s_5094›) (m_5096 : A_5095):
  A_5095 -> U
where
| refl_1 : (eq_1‹s_5094› A_5095 m_5096 m_5096)

#[program]
def rwl_1‹s_5098,r_5099› :
  ∀ {A_5100 : Type‹s_5098›} ->
    ∀ {m_5101 : A_5100} ->
      ∀ {n_5102 : A_5100} ->
        ∀ {B_5103 : A_5100 -> Type‹r_5099›} ->
          {(eq_1‹s_5098› A_5100 m_5101 n_5102)} ->
            ((B_5103) m_5101) -> ((B_5103) n_5102)
:=
  fun rwl_5107 :
    ∀ {A_5108 : Type‹s_5098›} ->
      ∀ {m_5109 : A_5108} ->
        ∀ {n_5110 : A_5108} ->
          ∀ {B_5111 : A_5108 -> Type‹r_5099›} ->
            {(eq_1‹s_5098› A_5108 m_5109 n_5110)} ->
              ((B_5111) m_5109) -> ((B_5111) n_5110)
  | A_5115 m_5116 n_5117 B_5118 refl_1 __5119 => __5119

#[program]
def rwr_2‹s_5120,r_5121› :
  ∀ {A_5122 : Type‹s_5120›} ->
    ∀ {m_5123 : A_5122} ->
      ∀ {n_5124 : A_5122} ->
        ∀ {B_5125 : A_5122 -> Type‹r_5121›} ->
          {(eq_1‹s_5120› A_5122 m_5123 n_5124)} ->
            ((B_5125) n_5124) -> ((B_5125) m_5123)
:=
  fun rwr_5129 :
    ∀ {A_5130 : Type‹s_5120›} ->
      ∀ {m_5131 : A_5130} ->
        ∀ {n_5132 : A_5130} ->
          ∀ {B_5133 : A_5130 -> Type‹r_5121›} ->
            {(eq_1‹s_5120› A_5130 m_5131 n_5132)} ->
              ((B_5133) n_5132) -> ((B_5133) m_5131)
  | A_5137 m_5138 n_5139 B_5140 refl_1 __5141 => __5141

#[logical]
def congr_3‹s_5142,r_5143,t_5144› :
  ∀ (A_5145 : Type‹s_5142›) ->
    ∀ (B_5146 : Type‹r_5143›) ->
      ∀ (m_5147 : A_5145) ->
        ∀ (n_5148 : A_5145) ->
          ∀ (f_5149 : forall‹t_5144›(__5150 : A_5145), B_5146) ->
            (eq_1‹s_5142› A_5145 m_5147 n_5148) ->
              (eq_1‹r_5143› B_5146 ((f_5149) m_5147) ((f_5149) n_5148))
:=
  fun congr_5152 :
    ∀ (A_5153 : Type‹s_5142›) ->
      ∀ (B_5154 : Type‹r_5143›) ->
        ∀ (m_5155 : A_5153) ->
          ∀ (n_5156 : A_5153) ->
            ∀ (f_5157 : forall‹t_5144›(__5158 : A_5153), B_5154) ->
              (eq_1‹s_5142› A_5153 m_5155 n_5156) ->
                (eq_1‹r_5143› B_5154 ((f_5157) m_5155) ((f_5157) n_5156))
  | A_5160 B_5161 m_5162 n_5163 f_5164 refl_1 =>
    (refl_1‹r_5143› B_5161 ((f_5164) n_5163))

#[logical]
def axiom_K_4‹› :
  ∀ {A_5165 : U} ->
    ∀ {m_5166 : A_5165} ->
      ∀ (x_5167 : (eq_1‹U› A_5165 m_5166 m_5166)) ->
        (eq_1‹U›
          (eq_1‹U› A_5165 m_5166 m_5166) x_5167
          (refl_1‹U› A_5165 m_5166))
:=
  fun axiom_K_5168 :
    ∀ {A_5169 : U} ->
      ∀ {m_5170 : A_5169} ->
        ∀ (x_5171 : (eq_1‹U› A_5169 m_5170 m_5170)) ->
          (eq_1‹U›
            (eq_1‹U› A_5169 m_5170 m_5170) x_5171
            (refl_1‹U› A_5169 m_5170))
  | A_5172 m_5173 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_5172 m_5173 m_5173) (refl_1‹U› A_5172 m_5173))

#[program]
inductive sing_2‹s_5174,t_5175› (A_5176 : Type‹s_5174›):
  A_5176 -> Type‹t_5175›
where
| just_2 (m_5178 : A_5176) : (sing_2‹s_5174,t_5175› A_5176 m_5178)

#[program]
def sing_elim_5‹s_5179,t_5180› :
  ∀ {A_5181 : Type‹s_5179›} ->
    ∀ {x_5182 : A_5181} ->
      (sing_2‹s_5179,t_5180› A_5181 x_5182) -> A_5181
:=
  fun sing_elim_5184 :
    ∀ {A_5185 : Type‹s_5179›} ->
      ∀ {x_5186 : A_5185} ->
        (sing_2‹s_5179,t_5180› A_5185 x_5186) -> A_5185
  | A_5188 x_5189 (just_2 m_5190) => m_5190

#[logical]
def sing_uniq_6‹s_5191,t_5192› :
  ∀ (A_5193 : Type‹s_5191›) ->
    ∀ (x0_5194 : A_5193) ->
      ∀ (x_5195 : (sing_2‹s_5191,t_5192› A_5193 x0_5194)) ->
        (eq_1‹s_5191›
          A_5193 x0_5194
          ((sing_elim_5‹s_5191,t_5192›) A_5193 x0_5194 x_5195))
:=
  fun sing_uniq_5196 :
    ∀ (A_5197 : Type‹s_5191›) ->
      ∀ (x0_5198 : A_5197) ->
        ∀ (x_5199 : (sing_2‹s_5191,t_5192› A_5197 x0_5198)) ->
          (eq_1‹s_5191›
            A_5197 x0_5198
            ((sing_elim_5‹s_5191,t_5192›) A_5197 x0_5198 x_5199))
  | A_5200 x0_5201 (just_2 m_5202) => (refl_1‹s_5191› A_5200 m_5202)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_7‹› :
  ∀ (x_5203 : unit_3) -> (eq_1‹U› unit_3 x_5203 tt_3)
:=
  fun unit_eta_5204 :
    ∀ (x_5205 : unit_3) -> (eq_1‹U› unit_3 x_5205 tt_3)
  | x_5206 =>
    match x_5206 in
      ∀ (x0_5207 : unit_3) -o (eq_1‹U› unit_3 x0_5207 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_8‹› : bool_4 -> bool_4 :=
  fun not_5209 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_9‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_5213 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __5216 => false_5

#[program]
def or_10‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_5219 : bool_4 -> bool_4 -> bool_4
  | true_4 __5222 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_11‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_5225 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_5228 : nat_5) : nat_5

#[program]
def lte_12‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_5231 : nat_5 -> nat_5 -> bool_4
  | zero_6 __5234 => true_4
  | (succ_7 n_5235) zero_6 => false_5
  | (succ_7 n_5236) (succ_7 n_5237) => ((lte_5231) n_5236 n_5237)

#[program]
def lt_13‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_5240 : nat_5 -> nat_5 -> bool_4
  | x_5243 y_5244 => ((lte_12) (succ_7‹› x_5243) y_5244)

#[program]
def pred_14‹› : nat_5 -> nat_5 :=
  fun pred_5246 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_5248) => n_5248

#[program]
def add_15‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_5251 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5254 => __5254
  | (succ_7 n_5255) __5256 => (succ_7‹› ((add_5251) n_5255 __5256))

#[program]
def sub_16‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_5259 : nat_5 -> nat_5 -> nat_5
  | __5262 zero_6 => __5262
  | __5263 (succ_7 n_5264) => ((sub_5259) ((pred_14) __5263) n_5264)

#[program]
def mul_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_5267 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5270 => zero_6
  | (succ_7 n_5271) __5272 => ((add_15) __5272 ((mul_5267) n_5271 __5272))

#[program]
def div_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_5275 : nat_5 -> nat_5 -> nat_5
  | x_5278 y_5279 =>
    match ((lt_13) x_5278 y_5279) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_5281 :=
        fun loop_5282 : nat_5 -> nat_5 -> nat_5
        | x_5285 y_5286 =>
          match ((sub_16) x_5285 ((pred_14) y_5286)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_5288) => (succ_7‹› ((loop_5282) n_5288 y_5286))
      in ((loop_5281) x_5278 y_5279)

#[program]
def rem_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_5291 : nat_5 -> nat_5 -> nat_5
  | x_5294 y_5295 =>
    ((sub_16) x_5294 ((mul_17) ((div_18) x_5294 y_5295) y_5295))

#[program]
inductive list_6‹s_5296,t_5297› (A_5298 : Type‹s_5296›):
  Type‹t_5297›
where
| nil_8 : (list_6‹s_5296,t_5297› A_5298)
| cons_9
    (hd_5299 : A_5298) (tl_5300 : (list_6‹s_5296,t_5297› A_5298))
    : (list_6‹s_5296,t_5297› A_5298)

#[program]
inductive exists0_7‹s_5301,r_5302› (A_5303 : Type‹s_5301›) (B_5304 : 
A_5303 -> Type‹r_5302›): L where
| ex0_10
    {m_5306 : A_5303} (n_5307 : ((B_5304) m_5306))
    : (exists0_7‹s_5301,r_5302› A_5303 B_5304)

#[program]
inductive exists1_8‹s_5308,r_5309› (A_5310 : Type‹s_5308›) (B_5311 : 
A_5310 -> Type‹r_5309›): L where
| ex1_11
    (m_5313 : A_5310) (n_5314 : ((B_5311) m_5313))
    : (exists1_8‹s_5308,r_5309› A_5310 B_5311)

#[logical]
def prod0_20‹s_5315,r_5316› : Type‹s_5315› -> Type‹r_5316› -> L
:=
  fun prod0_5319 : Type‹s_5315› -> Type‹r_5316› -> L
  | A_5322 B_5323 =>
    (exists0_7‹s_5315,r_5316›
      A_5322 fun _5324 : A_5322 -> Type‹r_5316›
             | __5326 => B_5323)

#[logical]
def prod1_21‹s_5327,r_5328› : Type‹s_5327› -> Type‹r_5328› -> L
:=
  fun prod1_5331 : Type‹s_5327› -> Type‹r_5328› -> L
  | A_5334 B_5335 =>
    (exists1_8‹s_5327,r_5328›
      A_5334 fun _5336 : A_5334 -> Type‹r_5328›
             | __5338 => B_5335)

#[program]
def pow_22‹› : int -> int -> int :=
  fun pow_5341 : int -> int -> int
  | x_5344 y_5345 =>
    let loop_5346 :=
      fun loop_5347 : int -> int -> int
      | acc_5350 y_5351 =>
        match (__lte__ y_5351 0) in bool_4 -o int with
        | true_4 => acc_5350
        | false_5 =>
          ((loop_5347) (__mul__ x_5344 acc_5350) (__sub__ y_5351 1))
    in ((loop_5346) 1 y_5345)

#[program]
def powm_23‹› : int -> int -> int -> int :=
  fun powm_5356 : int -> int -> int -> int
  | x_5360 y_5361 m_5362 =>
    let loop_5363 :=
      fun loop_5364 : int -> int -> int
      | acc_5367 y_5368 =>
        match (__lte__ y_5368 0) in bool_4 -o int with
        | true_4 => acc_5367
        | false_5 =>
          ((loop_5364)
            (__mod__ (__mul__ x_5360 acc_5367) m_5362) (__sub__ y_5368 1))
    in ((loop_5363) 1 y_5361)

#[program]
def split_24‹t_5370› :
  (list_6‹U,t_5370› int) ->
    ((prod1_21‹t_5370,t_5370›)
      (list_6‹U,t_5370› int) (list_6‹U,t_5370› int))
:=
  fun split_5372 :
    (list_6‹U,t_5370› int) ->
      ((prod1_21‹t_5370,t_5370›)
        (list_6‹U,t_5370› int) (list_6‹U,t_5370› int))
  | nil_8 =>
    (ex1_11‹t_5370,t_5370›
      (list_6‹U,t_5370› int)
      fun _5374 : (list_6‹U,t_5370› int) -> Type‹t_5370›
      | __5376 => (list_6‹U,t_5370› int) (nil_8‹U,t_5370› int)
      (nil_8‹U,t_5370› int))
  | (cons_9 hd_5377 nil_8) =>
    (ex1_11‹t_5370,t_5370›
      (list_6‹U,t_5370› int)
      fun _5378 : (list_6‹U,t_5370› int) -> Type‹t_5370›
      | __5380 => (list_6‹U,t_5370› int)
      (cons_9‹U,t_5370› int hd_5377 (nil_8‹U,t_5370› int))
      (nil_8‹U,t_5370› int))
  | (cons_9 hd_5381 (cons_9 hd_5382 tl_5383)) =>
    match ((split_5372) tl_5383) in
      ((prod1_21‹t_5370,t_5370›)
        (list_6‹U,t_5370› int) (list_6‹U,t_5370› int)) -o
        ((prod1_21‹t_5370,t_5370›)
          (list_6‹U,t_5370› int) (list_6‹U,t_5370› int))
    with
    | (ex1_11 m_5385 n_5386) =>
      (ex1_11‹t_5370,t_5370›
        (list_6‹U,t_5370› int)
        fun _5387 : (list_6‹U,t_5370› int) -> Type‹t_5370›
        | __5389 => (list_6‹U,t_5370› int)
        (cons_9‹U,t_5370› int hd_5381 m_5385)
        (cons_9‹U,t_5370› int hd_5382 n_5386))

#[program]
def merge_25‹t_5390› :
  (list_6‹U,t_5390› int) ->
    (list_6‹U,t_5390› int) -o (list_6‹U,t_5390› int)
:=
  fun merge_5393 :
    (list_6‹U,t_5390› int) ->
      (list_6‹U,t_5390› int) -o (list_6‹U,t_5390› int)
  | nil_8 __5396 => __5396
  | (cons_9 hd_5397 tl_5398) nil_8 =>
    (cons_9‹U,t_5390› int hd_5397 tl_5398)
  | (cons_9 hd_5399 tl_5400) (cons_9 hd_5401 tl_5402) =>
    match (__lte__ hd_5399 hd_5401) in bool_4 -o (list_6‹U,t_5390› int)
    with
    | true_4 =>
      (cons_9‹U,t_5390›
        int hd_5399
        ((merge_5393) tl_5400 (cons_9‹U,t_5390› int hd_5401 tl_5402)))
    | false_5 =>
      (cons_9‹U,t_5390›
        int hd_5401
        ((merge_5393) (cons_9‹U,t_5390› int hd_5399 tl_5400) tl_5402))

#[program]
def msort_26‹t_5404› :
  (list_6‹U,t_5404› int) -> (list_6‹U,t_5404› int)
:=
  fun msort_5406 : (list_6‹U,t_5404› int) -> (list_6‹U,t_5404› int)
  | nil_8 => (nil_8‹U,t_5404› int)
  | (cons_9 hd_5408 nil_8) =>
    (cons_9‹U,t_5404› int hd_5408 (nil_8‹U,t_5404› int))
  | (cons_9 hd_5409 (cons_9 hd_5410 tl_5411)) =>
    match ((split_24‹t_5404›)
            (cons_9‹U,t_5404›
              int hd_5409 (cons_9‹U,t_5404› int hd_5410 tl_5411))) in
      ((prod1_21‹t_5404,t_5404›)
        (list_6‹U,t_5404› int) (list_6‹U,t_5404› int)) -o
        (list_6‹U,t_5404› int)
    with
    | (ex1_11 m_5413 n_5414) =>
      ((merge_25‹t_5404›) ((msort_5406) m_5413) ((msort_5406) n_5414))

-----------------------------------------

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_30 :=
  fun rwl_8809 {A_8810} -> {m_8811} -> {n_8812} -> {B_8813} -> {__8814} ->
  (__8815) ->
    match {NULL} with
    | reflU_13  => __8815
    end

#[program]
def rwlUL_29 :=
  fun rwl_8816 {A_8817} -> {m_8818} -> {n_8819} -> {B_8820} -> {__8821} ->
  (__8822) ->
    match {NULL} with
    | reflU_13  => __8822
    end

#[program]
def rwlLU_28 :=
  fun rwl_8823 {A_8824} -> {m_8825} -> {n_8826} -> {B_8827} -> {__8828} ->
  (__8829) ->
    match {NULL} with
    | reflL_12  => __8829
    end

#[program]
def rwlLL_27 :=
  fun rwl_8830 {A_8831} -> {m_8832} -> {n_8833} -> {B_8834} -> {__8835} ->
  (__8836) ->
    match {NULL} with
    | reflL_12  => __8836
    end

#[program]
def rwrUU_34 :=
  fun rwr_8837 {A_8838} -> {m_8839} -> {n_8840} -> {B_8841} -> {__8842} ->
  (__8843) ->
    match {NULL} with
    | reflU_13  => __8843
    end

#[program]
def rwrUL_33 :=
  fun rwr_8844 {A_8845} -> {m_8846} -> {n_8847} -> {B_8848} -> {__8849} ->
  (__8850) ->
    match {NULL} with
    | reflU_13  => __8850
    end

#[program]
def rwrLU_32 :=
  fun rwr_8851 {A_8852} -> {m_8853} -> {n_8854} -> {B_8855} -> {__8856} ->
  (__8857) ->
    match {NULL} with
    | reflL_12  => __8857
    end

#[program]
def rwrLL_31 :=
  fun rwr_8858 {A_8859} -> {m_8860} -> {n_8861} -> {B_8862} -> {__8863} ->
  (__8864) ->
    match {NULL} with
    | reflL_12  => __8864
    end

#[logical]
def congrUUU_42 := NULL

#[logical]
def congrUUL_41 := NULL

#[logical]
def congrULU_40 := NULL

#[logical]
def congrULL_39 := NULL

#[logical]
def congrLUU_38 := NULL

#[logical]
def congrLUL_37 := NULL

#[logical]
def congrLLU_36 := NULL

#[logical]
def congrLLL_35 := NULL

#[logical]
def axiom_K_4 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[program]
def sing_elimUU_46 :=
  fun sing_elim_8865 {A_8866} -> {x_8867} -> (__8868) ->
    match __8868 with
    | justUU_17 m_8869 => m_8869
    end

#[program]
def sing_elimUL_45 :=
  fun sing_elim_8870 {A_8871} -> {x_8872} -> (__8873) ->
    match __8873 with
    | justUL_16 m_8874 => m_8874
    end

#[program]
def sing_elimLU_44 :=
  fun sing_elim_8875 {A_8876} -> {x_8877} -> (__8878) ->
    match __8878 with
    
    end

#[program]
def sing_elimLL_43 :=
  fun sing_elim_8879 {A_8880} -> {x_8881} -> (__8882) ->
    match __8882 with
    | justLL_14 m_8883 => m_8883
    end

#[logical]
def sing_uniqUU_50 := NULL

#[logical]
def sing_uniqUL_49 := NULL

#[logical]
def sing_uniqLU_48 := NULL

#[logical]
def sing_uniqLL_47 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_7 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_8 :=
  fun not_8884 (__8885) ->
    match __8885 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_9 :=
  fun and_8886 (__8887) -> (__8888) ->
    match __8887 with
    | true_4  =>
      match __8888 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_10 :=
  fun or_8889 (__8890) -> (__8891) ->
    match __8890 with
    | true_4  => true_4
    | false_5  =>
      match __8891 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_11 :=
  fun xor_8892 (__8893) -> (__8894) -o
    match __8893 with
    | true_4  =>
      match __8894 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __8894 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_12 :=
  fun lte_8895 (__8896) -> (__8897) ->
    match __8896 with
    | zero_6  => true_4
    | succ_7 n_8898 =>
      match __8897 with
      | zero_6  => false_5 | succ_7 n_8899 => ((lte_8895) n_8898 n_8899)
      end
    end

#[program]
def lt_13 :=
  fun lt_8900 (x_8901) -> (y_8902) ->
    ((lte_12) (succ_7 x_8901) y_8902)

#[program]
def pred_14 :=
  fun pred_8903 (__8904) ->
    match __8904 with
    | zero_6  => zero_6 | succ_7 n_8905 => n_8905
    end

#[program]
def add_15 :=
  fun add_8906 (__8907) -> (__8908) ->
    match __8907 with
    | zero_6  => __8908
    | succ_7 n_8909 => (succ_7 ((add_8906) n_8909 __8908))
    end

#[program]
def sub_16 :=
  fun sub_8910 (__8911) -> (__8912) ->
    match __8912 with
    | zero_6  => __8911
    | succ_7 n_8913 => ((sub_8910) ((pred_14) __8911) n_8913)
    end

#[program]
def mul_17 :=
  fun mul_8914 (__8915) -> (__8916) ->
    match __8915 with
    | zero_6  => zero_6
    | succ_7 n_8917 => ((add_15) __8916 ((mul_8914) n_8917 __8916))
    end

#[program]
def div_18 :=
  fun div_8918 (x_8919) -> (y_8920) ->
    match ((lt_13) x_8919 y_8920) with
    | true_4  => zero_6
    | false_5  =>
      let loop_8921 :=
        fun loop_8922 (x_8923) -> (y_8924) ->
          match ((sub_16) x_8923 ((pred_14) y_8924)) with
          | zero_6  => zero_6
          | succ_7 n_8925 => (succ_7 ((loop_8922) n_8925 y_8924))
          end
      in ((loop_8921) x_8919 y_8920)
    end

#[program]
def rem_19 :=
  fun rem_8926 (x_8927) -> (y_8928) ->
    ((sub_16) x_8927 ((mul_17) ((div_18) x_8927 y_8928) y_8928))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_54 := NULL

#[logical]
def prod0UL_53 := NULL

#[logical]
def prod0LU_52 := NULL

#[logical]
def prod0LL_51 := NULL

#[logical]
def prod1UU_58 := NULL

#[logical]
def prod1UL_57 := NULL

#[logical]
def prod1LU_56 := NULL

#[logical]
def prod1LL_55 := NULL

#[program]
def pow_22 :=
  fun pow_8929 (x_8930) -> (y_8931) ->
    let loop_8932 :=
      fun loop_8933 (acc_8934) -> (y_8935) ->
        match (__lte__ y_8935 0) with
        | true_4  => acc_8934
        | false_5  =>
          ((loop_8933) (__mul__ x_8930 acc_8934) (__sub__ y_8935 1))
        end
    in ((loop_8932) 1 y_8931)

#[program]
def powm_23 :=
  fun powm_8936 (x_8937) -> (y_8938) -> (m_8939) ->
    let loop_8940 :=
      fun loop_8941 (acc_8942) -> (y_8943) ->
        match (__lte__ y_8943 0) with
        | true_4  => acc_8942
        | false_5  =>
          ((loop_8941)
            (__mod__ (__mul__ x_8937 acc_8942) m_8939) (__sub__ y_8943 1))
        end
    in ((loop_8940) 1 y_8938)

#[program]
def splitU_60 :=
  fun split_8944 (__8945) ->
    match __8945 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_8946 tl_8947 =>
      match tl_8947 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_8946 nilUU_24) nilUU_24)
      | consUU_25 hd_8948 tl_8949 =>
        match ((split_8944) tl_8949) with
        | ex1UU_33 m_8950 n_8951 =>
          (ex1UU_33 (consUU_25 hd_8946 m_8950) (consUU_25 hd_8948 n_8951))
        end
      end
    end

#[program]
def splitL_59 :=
  fun split_8952 (__8953) ->
    match __8953 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_8954 tl_8955 =>
      match tl_8955 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_8954 nilUL_22) nilUL_22)
      | consUL_23 hd_8956 tl_8957 =>
        match ((split_8952) tl_8957) with
        | ex1LL_30 m_8958 n_8959 =>
          (ex1LL_30 (consUL_23 hd_8954 m_8958) (consUL_23 hd_8956 n_8959))
        end
      end
    end

#[program]
def mergeU_62 :=
  fun merge_8960 (__8961) -> (__8962) -o
    match __8961 with
    | nilUU_24  => __8962
    | consUU_25 hd_8963 tl_8964 =>
      match __8962 with
      | nilUU_24  => (consUU_25 hd_8963 tl_8964)
      | consUU_25 hd_8965 tl_8966 =>
        match (__lte__ hd_8963 hd_8965) with
        | true_4  =>
          (consUU_25
            hd_8963 ((merge_8960) tl_8964 (consUU_25 hd_8965 tl_8966)))
        | false_5  =>
          (consUU_25
            hd_8965 ((merge_8960) (consUU_25 hd_8963 tl_8964) tl_8966))
        end
      end
    end

#[program]
def mergeL_61 :=
  fun merge_8967 (__8968) -> (__8969) -o
    match __8968 with
    | nilUL_22  => __8969
    | consUL_23 hd_8970 tl_8971 =>
      match __8969 with
      | nilUL_22  => (consUL_23 hd_8970 tl_8971)
      | consUL_23 hd_8972 tl_8973 =>
        match (__lte__ hd_8970 hd_8972) with
        | true_4  =>
          (consUL_23
            hd_8970 ((merge_8967) tl_8971 (consUL_23 hd_8972 tl_8973)))
        | false_5  =>
          (consUL_23
            hd_8972 ((merge_8967) (consUL_23 hd_8970 tl_8971) tl_8973))
        end
      end
    end

#[program]
def msortU_64 :=
  fun msort_8974 (__8975) ->
    match __8975 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_8976 tl_8977 =>
      match tl_8977 with
      | nilUU_24  => (consUU_25 hd_8976 nilUU_24)
      | consUU_25 hd_8978 tl_8979 =>
        match ((splitU_60) (consUU_25 hd_8976 (consUU_25 hd_8978 tl_8979))) with
        | ex1UU_33 m_8980 n_8981 =>
          ((mergeU_62) ((msort_8974) m_8980) ((msort_8974) n_8981))
        end
      end
    end

#[program]
def msortL_63 :=
  fun msort_8982 (__8983) ->
    match __8983 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_8984 tl_8985 =>
      match tl_8985 with
      | nilUL_22  => (consUL_23 hd_8984 nilUL_22)
      | consUL_23 hd_8986 tl_8987 =>
        match ((splitL_59) (consUL_23 hd_8984 (consUL_23 hd_8986 tl_8987))) with
        | ex1LL_30 m_8988 n_8989 =>
          ((mergeL_61) ((msort_8982) m_8988) ((msort_8982) n_8989))
        end
      end
    end

-----------------------------------------

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_30 :=
  fun rwl_9171 {A_9172} -> {m_9173} -> {n_9174} -> {B_9175} -> {__9176} ->
  (__9177) ->
    __9177

#[program]
def rwlUL_29 :=
  fun rwl_9178 {A_9179} -> {m_9180} -> {n_9181} -> {B_9182} -> {__9183} ->
  (__9184) ->
    __9184

#[program]
def rwlLU_28 :=
  fun rwl_9185 {A_9186} -> {m_9187} -> {n_9188} -> {B_9189} -> {__9190} ->
  (__9191) ->
    __9191

#[program]
def rwlLL_27 :=
  fun rwl_9192 {A_9193} -> {m_9194} -> {n_9195} -> {B_9196} -> {__9197} ->
  (__9198) ->
    __9198

#[program]
def rwrUU_34 :=
  fun rwr_9199 {A_9200} -> {m_9201} -> {n_9202} -> {B_9203} -> {__9204} ->
  (__9205) ->
    __9205

#[program]
def rwrUL_33 :=
  fun rwr_9206 {A_9207} -> {m_9208} -> {n_9209} -> {B_9210} -> {__9211} ->
  (__9212) ->
    __9212

#[program]
def rwrLU_32 :=
  fun rwr_9213 {A_9214} -> {m_9215} -> {n_9216} -> {B_9217} -> {__9218} ->
  (__9219) ->
    __9219

#[program]
def rwrLL_31 :=
  fun rwr_9220 {A_9221} -> {m_9222} -> {n_9223} -> {B_9224} -> {__9225} ->
  (__9226) ->
    __9226

#[logical]
def congrUUU_42 := NULL

#[logical]
def congrUUL_41 := NULL

#[logical]
def congrULU_40 := NULL

#[logical]
def congrULL_39 := NULL

#[logical]
def congrLUU_38 := NULL

#[logical]
def congrLUL_37 := NULL

#[logical]
def congrLLU_36 := NULL

#[logical]
def congrLLL_35 := NULL

#[logical]
def axiom_K_4 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[program]
def sing_elimUU_46 :=
  fun sing_elim_9227 {A_9228} -> {x_9229} -> (__9230) ->
    match __9230 with
    | justUU_17 m_9231 => m_9231
    end

#[program]
def sing_elimUL_45 :=
  fun sing_elim_9232 {A_9233} -> {x_9234} -> (__9235) ->
    match __9235 with
    | justUL_16 m_9236 => m_9236
    end

#[program]
def sing_elimLU_44 :=
  fun sing_elim_9237 {A_9238} -> {x_9239} -> (__9240) ->
    !!

#[program]
def sing_elimLL_43 :=
  fun sing_elim_9241 {A_9242} -> {x_9243} -> (__9244) ->
    match __9244 with
    | justLL_14 m_9245 => m_9245
    end

#[logical]
def sing_uniqUU_50 := NULL

#[logical]
def sing_uniqUL_49 := NULL

#[logical]
def sing_uniqLU_48 := NULL

#[logical]
def sing_uniqLL_47 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_7 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_8 :=
  fun not_9246 (__9247) ->
    match __9247 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_9 :=
  fun and_9248 (__9249) -> (__9250) ->
    match __9249 with
    | true_4  =>
      match __9250 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_10 :=
  fun or_9251 (__9252) -> (__9253) ->
    match __9252 with
    | true_4  => true_4
    | false_5  =>
      match __9253 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_11 :=
  fun xor_9254 (__9255) -> (__9256) -o
    match __9255 with
    | true_4  =>
      match __9256 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __9256 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_12 :=
  fun lte_9257 (__9258) -> (__9259) ->
    match __9258 with
    | zero_6  => true_4
    | succ_7 n_9260 =>
      match __9259 with
      | zero_6  => false_5 | succ_7 n_9261 => ((lte_9257) n_9260 n_9261)
      end
    end

#[program]
def lt_13 :=
  fun lt_9262 (x_9263) -> (y_9264) ->
    ((lte_12) (succ_7 x_9263) y_9264)

#[program]
def pred_14 :=
  fun pred_9265 (__9266) ->
    match __9266 with
    | zero_6  => zero_6 | succ_7 n_9267 => n_9267
    end

#[program]
def add_15 :=
  fun add_9268 (__9269) -> (__9270) ->
    match __9269 with
    | zero_6  => __9270
    | succ_7 n_9271 => (succ_7 ((add_9268) n_9271 __9270))
    end

#[program]
def sub_16 :=
  fun sub_9272 (__9273) -> (__9274) ->
    match __9274 with
    | zero_6  => __9273
    | succ_7 n_9275 => ((sub_9272) ((pred_14) __9273) n_9275)
    end

#[program]
def mul_17 :=
  fun mul_9276 (__9277) -> (__9278) ->
    match __9277 with
    | zero_6  => zero_6
    | succ_7 n_9279 => ((add_15) __9278 ((mul_9276) n_9279 __9278))
    end

#[program]
def div_18 :=
  fun div_9280 (x_9281) -> (y_9282) ->
    match ((lt_13) x_9281 y_9282) with
    | true_4  => zero_6
    | false_5  =>
      let loop_9283 :=
        fun loop_9284 (x_9285) -> (y_9286) ->
          match ((sub_16) x_9285 ((pred_14) y_9286)) with
          | zero_6  => zero_6
          | succ_7 n_9287 => (succ_7 ((loop_9284) n_9287 y_9286))
          end
      in ((loop_9283) x_9281 y_9282)
    end

#[program]
def rem_19 :=
  fun rem_9288 (x_9289) -> (y_9290) ->
    ((sub_16) x_9289 ((mul_17) ((div_18) x_9289 y_9290) y_9290))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_54 := NULL

#[logical]
def prod0UL_53 := NULL

#[logical]
def prod0LU_52 := NULL

#[logical]
def prod0LL_51 := NULL

#[logical]
def prod1UU_58 := NULL

#[logical]
def prod1UL_57 := NULL

#[logical]
def prod1LU_56 := NULL

#[logical]
def prod1LL_55 := NULL

#[program]
def pow_22 :=
  fun pow_9291 (x_9292) -> (y_9293) ->
    let loop_9294 :=
      fun loop_9295 (acc_9296) -> (y_9297) ->
        match (__lte__ y_9297 0) with
        | true_4  => acc_9296
        | false_5  =>
          ((loop_9295) (__mul__ x_9292 acc_9296) (__sub__ y_9297 1))
        end
    in ((loop_9294) 1 y_9293)

#[program]
def powm_23 :=
  fun powm_9298 (x_9299) -> (y_9300) -> (m_9301) ->
    let loop_9302 :=
      fun loop_9303 (acc_9304) -> (y_9305) ->
        match (__lte__ y_9305 0) with
        | true_4  => acc_9304
        | false_5  =>
          ((loop_9303)
            (__mod__ (__mul__ x_9299 acc_9304) m_9301) (__sub__ y_9305 1))
        end
    in ((loop_9302) 1 y_9300)

#[program]
def splitU_60 :=
  fun split_9306 (__9307) ->
    match __9307 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_9308 tl_9309 =>
      match tl_9309 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9308 nilUU_24) nilUU_24)
      | consUU_25 hd_9310 tl_9311 =>
        match ((split_9306) tl_9311) with
        | ex1UU_33 m_9312 n_9313 =>
          (ex1UU_33 (consUU_25 hd_9308 m_9312) (consUU_25 hd_9310 n_9313))
        end
      end
    end

#[program]
def splitL_59 :=
  fun split_9314 (__9315) ->
    match __9315 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_9316 tl_9317 =>
      match tl_9317 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9316 nilUL_22) nilUL_22)
      | consUL_23 hd_9318 tl_9319 =>
        match ((split_9314) tl_9319) with
        | ex1LL_30 m_9320 n_9321 =>
          (ex1LL_30 (consUL_23 hd_9316 m_9320) (consUL_23 hd_9318 n_9321))
        end
      end
    end

#[program]
def mergeU_62 :=
  fun merge_9322 (__9323) -> (__9324) -o
    match __9323 with
    | nilUU_24  => __9324
    | consUU_25 hd_9325 tl_9326 =>
      match __9324 with
      | nilUU_24  => (consUU_25 hd_9325 tl_9326)
      | consUU_25 hd_9327 tl_9328 =>
        match (__lte__ hd_9325 hd_9327) with
        | true_4  =>
          (consUU_25
            hd_9325 ((merge_9322) tl_9326 (consUU_25 hd_9327 tl_9328)))
        | false_5  =>
          (consUU_25
            hd_9327 ((merge_9322) (consUU_25 hd_9325 tl_9326) tl_9328))
        end
      end
    end

#[program]
def mergeL_61 :=
  fun merge_9329 (__9330) -> (__9331) -o
    match __9330 with
    | nilUL_22  => __9331
    | consUL_23 hd_9332 tl_9333 =>
      match __9331 with
      | nilUL_22  => (consUL_23 hd_9332 tl_9333)
      | consUL_23 hd_9334 tl_9335 =>
        match (__lte__ hd_9332 hd_9334) with
        | true_4  =>
          (consUL_23
            hd_9332 ((merge_9329) tl_9333 (consUL_23 hd_9334 tl_9335)))
        | false_5  =>
          (consUL_23
            hd_9334 ((merge_9329) (consUL_23 hd_9332 tl_9333) tl_9335))
        end
      end
    end

#[program]
def msortU_64 :=
  fun msort_9336 (__9337) ->
    match __9337 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_9338 tl_9339 =>
      match tl_9339 with
      | nilUU_24  => (consUU_25 hd_9338 nilUU_24)
      | consUU_25 hd_9340 tl_9341 =>
        match ((splitU_60) (consUU_25 hd_9338 (consUU_25 hd_9340 tl_9341))) with
        | ex1UU_33 m_9342 n_9343 =>
          ((mergeU_62) ((msort_9336) m_9342) ((msort_9336) n_9343))
        end
      end
    end

#[program]
def msortL_63 :=
  fun msort_9344 (__9345) ->
    match __9345 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_9346 tl_9347 =>
      match tl_9347 with
      | nilUL_22  => (consUL_23 hd_9346 nilUL_22)
      | consUL_23 hd_9348 tl_9349 =>
        match ((splitL_59) (consUL_23 hd_9346 (consUL_23 hd_9348 tl_9349))) with
        | ex1LL_30 m_9350 n_9351 =>
          ((mergeL_61) ((msort_9344) m_9350) ((msort_9344) n_9351))
        end
      end
    end

-----------------------------------------

def rwlUU_30 :=
  fun rwl_9533 (A_9534) -> (m_9535) -> (n_9536) -> (B_9537) -> (__9538) ->
  (__9539) -> __9539

def rwlUL_29 :=
  fun rwl_9540 (A_9541) -> (m_9542) -> (n_9543) -> (B_9544) -> (__9545) ->
  (__9546) -> __9546

def rwlLU_28 :=
  fun rwl_9547 (A_9548) -> (m_9549) -> (n_9550) -> (B_9551) -> (__9552) ->
  (__9553) -> __9553

def rwlLL_27 :=
  fun rwl_9554 (A_9555) -> (m_9556) -> (n_9557) -> (B_9558) -> (__9559) ->
  (__9560) -> __9560

def rwrUU_34 :=
  fun rwr_9561 (A_9562) -> (m_9563) -> (n_9564) -> (B_9565) -> (__9566) ->
  (__9567) -> __9567

def rwrUL_33 :=
  fun rwr_9568 (A_9569) -> (m_9570) -> (n_9571) -> (B_9572) -> (__9573) ->
  (__9574) -> __9574

def rwrLU_32 :=
  fun rwr_9575 (A_9576) -> (m_9577) -> (n_9578) -> (B_9579) -> (__9580) ->
  (__9581) -> __9581

def rwrLL_31 :=
  fun rwr_9582 (A_9583) -> (m_9584) -> (n_9585) -> (B_9586) -> (__9587) ->
  (__9588) -> __9588

def sing_elimUU_46 :=
  fun sing_elim_9589 (A_9590) -> (x_9591) -> (__9592) -> __9592

def sing_elimUL_45 :=
  fun sing_elim_9593 (A_9594) -> (x_9595) -> (__9596) -> __9596

def sing_elimLU_44 :=
  fun sing_elim_9597 (A_9598) -> (x_9599) -> (__9600) -> !!

def sing_elimLL_43 :=
  fun sing_elim_9601 (A_9602) -> (x_9603) -> (__9604) -> __9604

def not_8 :=
  fun not_9605 (__9606) ->
    match __9606 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_9 :=
  fun and_9607 (__9608) -> (__9609) ->
    match __9608 with
    | true_4 => match __9609 with
                | true_4 => true_4 | false_5 => false_5
                end
    | false_5 => false_5
    end

def or_10 :=
  fun or_9610 (__9611) -> (__9612) ->
    match __9611 with
    | true_4 => true_4
    | false_5 =>
      match __9612 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_11 :=
  fun xor_9613 (__9614) -> (__9615) -o
    match __9614 with
    | true_4 => match __9615 with
                | true_4 => false_5 | false_5 => true_4
                end
    | false_5 =>
      match __9615 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_12 :=
  fun lte_9616 (__9617) -> (__9618) ->
    match __9617 with
    | zero_6  => true_4
    | succ_7 n_9619 =>
      match __9618 with
      | zero_6  => false_5 | succ_7 n_9620 => ((lte_9616) n_9619 n_9620)
      end
    end

def lt_13 :=
  fun lt_9621 (x_9622) -> (y_9623) -> ((lte_12) (succ_7 x_9622) y_9623)

def pred_14 :=
  fun pred_9624 (__9625) ->
    match __9625 with
    | zero_6  => (zero_6 ) | succ_7 n_9626 => n_9626
    end

def add_15 :=
  fun add_9627 (__9628) -> (__9629) ->
    match __9628 with
    | zero_6  => __9629
    | succ_7 n_9630 => (succ_7 ((add_9627) n_9630 __9629))
    end

def sub_16 :=
  fun sub_9631 (__9632) -> (__9633) ->
    match __9633 with
    | zero_6  => __9632
    | succ_7 n_9634 => ((sub_9631) ((pred_14) __9632) n_9634)
    end

def mul_17 :=
  fun mul_9635 (__9636) -> (__9637) ->
    match __9636 with
    | zero_6  => (zero_6 )
    | succ_7 n_9638 => ((add_15) __9637 ((mul_9635) n_9638 __9637))
    end

def div_18 :=
  fun div_9639 (x_9640) -> (y_9641) ->
    match ((lt_13) x_9640 y_9641) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_9642 :=
        fun loop_9643 (x_9644) -> (y_9645) ->
          match ((sub_16) x_9644 ((pred_14) y_9645)) with
          | zero_6  => (zero_6 )
          | succ_7 n_9646 => (succ_7 ((loop_9643) n_9646 y_9645))
          end
      in ((loop_9642) x_9640 y_9641)
    end

def rem_19 :=
  fun rem_9647 (x_9648) -> (y_9649) ->
    ((sub_16) x_9648 ((mul_17) ((div_18) x_9648 y_9649) y_9649))

def pow_22 :=
  fun pow_9650 (x_9651) -> (y_9652) ->
    let loop_9653 :=
      fun loop_9654 (acc_9655) -> (y_9656) ->
        match (__lte__ y_9656 0) with
        | true_4 => acc_9655
        | false_5 =>
          ((loop_9654) (__mul__ x_9651 acc_9655) (__sub__ y_9656 1))
        end
    in ((loop_9653) 1 y_9652)

def powm_23 :=
  fun powm_9657 (x_9658) -> (y_9659) -> (m_9660) ->
    let loop_9661 :=
      fun loop_9662 (acc_9663) -> (y_9664) ->
        match (__lte__ y_9664 0) with
        | true_4 => acc_9663
        | false_5 =>
          ((loop_9662)
            (__mod__ (__mul__ x_9658 acc_9663) m_9660) (__sub__ y_9664 1))
        end
    in ((loop_9661) 1 y_9659)

def splitU_60 :=
  fun split_9665 (__9666) ->
    match __9666 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_9667 tl_9668 =>
      match tl_9668 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_9667 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_9669 tl_9670 =>
        match ((split_9665) tl_9670) with
        | ex1UU_33 m_9671 n_9672 =>
          (ex1UU_33 (consUU_25 hd_9667 m_9671) (consUU_25 hd_9669 n_9672))
        end
      end
    end

def splitL_59 :=
  fun split_9673 (__9674) ->
    match __9674 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_9675 tl_9676 =>
      match tl_9676 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_9675 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_9677 tl_9678 =>
        match ((split_9673) tl_9678) with
        | ex1LL_30 m_9679 n_9680 =>
          (ex1LL_30 (consUL_23 hd_9675 m_9679) (consUL_23 hd_9677 n_9680))
        end
      end
    end

def mergeU_62 :=
  fun merge_9681 (__9682) -> (__9683) -o
    match __9682 with
    | nilUU_24  => __9683
    | consUU_25 hd_9684 tl_9685 =>
      match __9683 with
      | nilUU_24  => (consUU_25 hd_9684 tl_9685)
      | consUU_25 hd_9686 tl_9687 =>
        match (__lte__ hd_9684 hd_9686) with
        | true_4 =>
          (consUU_25
            hd_9684 ((merge_9681) tl_9685 (consUU_25 hd_9686 tl_9687)))
        | false_5 =>
          (consUU_25
            hd_9686 ((merge_9681) (consUU_25 hd_9684 tl_9685) tl_9687))
        end
      end
    end

def mergeL_61 :=
  fun merge_9688 (__9689) -> (__9690) -o
    match __9689 with
    | nilUL_22  => __9690
    | consUL_23 hd_9691 tl_9692 =>
      match __9690 with
      | nilUL_22  => (consUL_23 hd_9691 tl_9692)
      | consUL_23 hd_9693 tl_9694 =>
        match (__lte__ hd_9691 hd_9693) with
        | true_4 =>
          (consUL_23
            hd_9691 ((merge_9688) tl_9692 (consUL_23 hd_9693 tl_9694)))
        | false_5 =>
          (consUL_23
            hd_9693 ((merge_9688) (consUL_23 hd_9691 tl_9692) tl_9694))
        end
      end
    end

def msortU_64 :=
  fun msort_9695 (__9696) ->
    match __9696 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_9697 tl_9698 =>
      match tl_9698 with
      | nilUU_24  => (consUU_25 hd_9697 (nilUU_24 ))
      | consUU_25 hd_9699 tl_9700 =>
        match ((splitU_60) (consUU_25 hd_9697 (consUU_25 hd_9699 tl_9700))) with
        | ex1UU_33 m_9701 n_9702 =>
          ((mergeU_62) ((msort_9695) m_9701) ((msort_9695) n_9702))
        end
      end
    end

def msortL_63 :=
  fun msort_9703 (__9704) ->
    match __9704 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_9705 tl_9706 =>
      match tl_9706 with
      | nilUL_22  => (consUL_23 hd_9705 (nilUL_22 ))
      | consUL_23 hd_9707 tl_9708 =>
        match ((splitL_59) (consUL_23 hd_9705 (consUL_23 hd_9707 tl_9708))) with
        | ex1LL_30 m_9709 n_9710 =>
          ((mergeL_61) ((msort_9703) m_9709) ((msort_9703) n_9710))
        end
      end
    end

-----------------------------------------

def rwlUU_30 :=
  lam (A_9889) -> (m_9890) -> (n_9891) -> (B_9892) -> (__9893) -> (__9894) ->
    __9894

def rwlUL_29 :=
  lam (A_9895) -> (m_9896) -> (n_9897) -> (B_9898) -> (__9899) -> (__9900) ->
    __9900

def rwlLU_28 :=
  lam (A_9901) -> (m_9902) -> (n_9903) -> (B_9904) -> (__9905) -> (__9906) ->
    __9906

def rwlLL_27 :=
  lam (A_9907) -> (m_9908) -> (n_9909) -> (B_9910) -> (__9911) -> (__9912) ->
    __9912

def rwrUU_34 :=
  lam (A_9913) -> (m_9914) -> (n_9915) -> (B_9916) -> (__9917) -> (__9918) ->
    __9918

def rwrUL_33 :=
  lam (A_9919) -> (m_9920) -> (n_9921) -> (B_9922) -> (__9923) -> (__9924) ->
    __9924

def rwrLU_32 :=
  lam (A_9925) -> (m_9926) -> (n_9927) -> (B_9928) -> (__9929) -> (__9930) ->
    __9930

def rwrLL_31 :=
  lam (A_9931) -> (m_9932) -> (n_9933) -> (B_9934) -> (__9935) -> (__9936) ->
    __9936

def sing_elimUU_46 := lam (A_9937) -> (x_9938) -> (__9939) -> __9939

def sing_elimUL_45 := lam (A_9940) -> (x_9941) -> (__9942) -> __9942

def sing_elimLU_44 := lam (A_9943) -> (x_9944) -> (__9945) -> !!

def sing_elimLL_43 := lam (A_9946) -> (x_9947) -> (__9948) -> __9948

def not_8 :=
  lam (__9949) ->
    match __9949 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_9 :=
  lam (__9950) -> (__9951) ->
    match __9950 with
    | true_4 => match __9951 with
                | true_4 => true_4 | false_5 => false_5
                end
    | false_5 => false_5
    end

def or_10 :=
  lam (__9952) -> (__9953) ->
    match __9952 with
    | true_4 => true_4
    | false_5 =>
      match __9953 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_11 :=
  lam (__9954) -> (__9955) -o
    match __9954 with
    | true_4 => match __9955 with
                | true_4 => false_5 | false_5 => true_4
                end
    | false_5 =>
      match __9955 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_12 :=
  fun lte_9956 (__9957) -> (__9958) ->
    match __9957 with
    | zero_6  => true_4
    | succ_7 n_9959 =>
      match __9958 with
      | zero_6  => false_5 | succ_7 n_9960 => ((lte_9956) n_9959 n_9960)
      end
    end

def lt_13 := lam (x_9961) -> (y_9962) -> ((lte_12) (succ_7 x_9961) y_9962)

def pred_14 :=
  lam (__9963) ->
    match __9963 with
    | zero_6  => (zero_6 ) | succ_7 n_9964 => n_9964
    end

def add_15 :=
  fun add_9965 (__9966) -> (__9967) ->
    match __9966 with
    | zero_6  => __9967
    | succ_7 n_9968 => (succ_7 ((add_9965) n_9968 __9967))
    end

def sub_16 :=
  fun sub_9969 (__9970) -> (__9971) ->
    match __9971 with
    | zero_6  => __9970
    | succ_7 n_9972 => ((sub_9969) ((pred_14) __9970) n_9972)
    end

def mul_17 :=
  fun mul_9973 (__9974) -> (__9975) ->
    match __9974 with
    | zero_6  => (zero_6 )
    | succ_7 n_9976 => ((add_15) __9975 ((mul_9973) n_9976 __9975))
    end

def div_18 :=
  lam (x_9977) -> (y_9978) ->
    match ((lt_13) x_9977 y_9978) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_9979 :=
        fun loop_9980 (x_9981) -> (y_9982) ->
          match ((sub_16) x_9981 ((pred_14) y_9982)) with
          | zero_6  => (zero_6 )
          | succ_7 n_9983 => (succ_7 ((loop_9980) n_9983 y_9982))
          end
      in ((loop_9979) x_9977 y_9978)
    end

def rem_19 :=
  lam (x_9984) -> (y_9985) ->
    ((sub_16) x_9984 ((mul_17) ((div_18) x_9984 y_9985) y_9985))

def pow_22 :=
  lam (x_9986) -> (y_9987) ->
    let loop_9988 :=
      fun loop_9989 (acc_9990) -> (y_9991) ->
        match (__lte__ y_9991 0) with
        | true_4 => acc_9990
        | false_5 =>
          ((loop_9989) (__mul__ x_9986 acc_9990) (__sub__ y_9991 1))
        end
    in ((loop_9988) 1 y_9987)

def powm_23 :=
  lam (x_9992) -> (y_9993) -> (m_9994) ->
    let loop_9995 :=
      fun loop_9996 (acc_9997) -> (y_9998) ->
        match (__lte__ y_9998 0) with
        | true_4 => acc_9997
        | false_5 =>
          ((loop_9996)
            (__mod__ (__mul__ x_9992 acc_9997) m_9994) (__sub__ y_9998 1))
        end
    in ((loop_9995) 1 y_9993)

def splitU_60 :=
  fun split_9999 (__10000) ->
    match __10000 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_10001 tl_10002 =>
      match tl_10002 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10001 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_10003 tl_10004 =>
        match ((split_9999) tl_10004) with
        | ex1UU_33 m_10005 n_10006 =>
          (ex1UU_33
            (consUU_25 hd_10001 m_10005) (consUU_25 hd_10003 n_10006))
        end
      end
    end

def splitL_59 :=
  fun split_10007 (__10008) ->
    match __10008 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_10009 tl_10010 =>
      match tl_10010 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10009 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_10011 tl_10012 =>
        match ((split_10007) tl_10012) with
        | ex1LL_30 m_10013 n_10014 =>
          (ex1LL_30
            (consUL_23 hd_10009 m_10013) (consUL_23 hd_10011 n_10014))
        end
      end
    end

def mergeU_62 :=
  fun merge_10015 (__10016) -> (__10017) -o
    match __10016 with
    | nilUU_24  => __10017
    | consUU_25 hd_10018 tl_10019 =>
      match __10017 with
      | nilUU_24  => (consUU_25 hd_10018 tl_10019)
      | consUU_25 hd_10020 tl_10021 =>
        match (__lte__ hd_10018 hd_10020) with
        | true_4 =>
          (consUU_25
            hd_10018 ((merge_10015) tl_10019 (consUU_25 hd_10020 tl_10021)))
        | false_5 =>
          (consUU_25
            hd_10020 ((merge_10015) (consUU_25 hd_10018 tl_10019) tl_10021))
        end
      end
    end

def mergeL_61 :=
  fun merge_10022 (__10023) -> (__10024) -o
    match __10023 with
    | nilUL_22  => __10024
    | consUL_23 hd_10025 tl_10026 =>
      match __10024 with
      | nilUL_22  => (consUL_23 hd_10025 tl_10026)
      | consUL_23 hd_10027 tl_10028 =>
        match (__lte__ hd_10025 hd_10027) with
        | true_4 =>
          (consUL_23
            hd_10025 ((merge_10022) tl_10026 (consUL_23 hd_10027 tl_10028)))
        | false_5 =>
          (consUL_23
            hd_10027 ((merge_10022) (consUL_23 hd_10025 tl_10026) tl_10028))
        end
      end
    end

def msortU_64 :=
  fun msort_10029 (__10030) ->
    match __10030 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_10031 tl_10032 =>
      match tl_10032 with
      | nilUU_24  => (consUU_25 hd_10031 (nilUU_24 ))
      | consUU_25 hd_10033 tl_10034 =>
        match ((splitU_60)
                (consUU_25 hd_10031 (consUU_25 hd_10033 tl_10034))) with
        | ex1UU_33 m_10035 n_10036 =>
          ((mergeU_62) ((msort_10029) m_10035) ((msort_10029) n_10036))
        end
      end
    end

def msortL_63 :=
  fun msort_10037 (__10038) ->
    match __10038 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_10039 tl_10040 =>
      match tl_10040 with
      | nilUL_22  => (consUL_23 hd_10039 (nilUL_22 ))
      | consUL_23 hd_10041 tl_10042 =>
        match ((splitL_59)
                (consUL_23 hd_10039 (consUL_23 hd_10041 tl_10042))) with
        | ex1LL_30 m_10043 n_10044 =>
          ((mergeL_61) ((msort_10037) m_10043) ((msort_10037) n_10044))
        end
      end
    end

-----------------------------------------

fn rwlUU_1(A_2%U, m_3%U, n_4%U, B_5%U, __6%U, __7%U) {
  
  return __7;
}

fn rwlUL_8(A_9%U, m_10%U, n_11%U, B_12%U, __13%U, __14%U) {
  
  return __14;
}

fn rwlLU_15(A_16%U, m_17%U, n_18%U, B_19%U, __20%U, __21%U) {
  
  return __21;
}

fn rwlLL_22(A_23%U, m_24%U, n_25%U, B_26%U, __27%U, __28%U) {
  
  return __28;
}

fn rwrUU_29(A_30%U, m_31%U, n_32%U, B_33%U, __34%U, __35%U) {
  
  return __35;
}

fn rwrUL_36(A_37%U, m_38%U, n_39%U, B_40%U, __41%U, __42%U) {
  
  return __42;
}

fn rwrLU_43(A_44%U, m_45%U, n_46%U, B_47%U, __48%U, __49%U) {
  
  return __49;
}

fn rwrLL_50(A_51%U, m_52%U, n_53%U, B_54%U, __55%U, __56%U) {
  
  return __56;
}

fn sing_elimUU_57(A_58%U, x_59%U, __60%U) {
  
  return __60;
}

fn sing_elimUL_61(A_62%U, x_63%U, __64%U) {
  
  return __64;
}

fn sing_elimLU_65(A_66%U, x_67%U, __68%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_69(A_70%U, x_71%U, __72%U) {
  
  return __72;
}

fn not_73(__74%U) {
  match(__74){
    true_4() => {
      val x_75 := false_5;
    }
    false_5() => {
      val x_75 := true_4;
    }
  }
  return x_75;
}

fn and_76(__77%U, __78%U) {
  match(__77){
    true_4() => {
      match(__78){
        true_4() => {
          val x_80 := true_4;
        }
        false_5() => {
          val x_80 := false_5;
        }
      }
      val x_79 := x_80;
    }
    false_5() => {
      val x_79 := false_5;
    }
  }
  return x_79;
}

fn or_81(__82%U, __83%U) {
  match(__82){
    true_4() => {
      val x_84 := true_4;
    }
    false_5() => {
      match(__83){
        true_4() => {
          val x_85 := true_4;
        }
        false_5() => {
          val x_85 := false_5;
        }
      }
      val x_84 := x_85;
    }
  }
  return x_84;
}

fn xor_86(__87%U, __88%L) {
  match(__87){
    true_4() => {
      match(__88){
        true_4() => {
          val x_90 := false_5;
        }
        false_5() => {
          val x_90 := true_4;
        }
      }
      val x_89 := x_90;
    }
    false_5() => {
      match(__88){
        true_4() => {
          val x_91 := true_4;
        }
        false_5() => {
          val x_91 := false_5;
        }
      }
      val x_89 := x_91;
    }
  }
  return x_89;
}

fn lte_92(__93%U, __94%U) {
  match[U](__93){
    zero_6() => {
      val x_95 := true_4;
    }
    succ_7(n_96) => {
      match[U](__94){
        zero_6() => {
          val x_97 := false_5;
        }
        succ_7(n_98) => {
          val x_99 := lte_92(n_96, n_98);
          val x_97 := x_99;
        }
      }
      val x_95 := x_97;
    }
  }
  return x_95;
}

fn lt_100(x_101%U, y_102%U) {
  val x_104 := mkconstr(succ_7, [x_101]);
  val x_103 := lte_92(x_104, y_102);
  return x_103;
}

fn pred_105(__106%U) {
  match[U](__106){
    zero_6() => {
      val x_108 := mkconstr(zero_6, []);
      val x_107 := x_108;
    }
    succ_7(n_109) => {
      val x_107 := n_109;
    }
  }
  return x_107;
}

fn add_110(__111%U, __112%U) {
  match[U](__111){
    zero_6() => {
      val x_113 := __112;
    }
    succ_7(n_114) => {
      val x_115 := add_110(n_114, __112);
      val x_116 := mkconstr(succ_7, [x_115]);
      val x_113 := x_116;
    }
  }
  return x_113;
}

fn sub_117(__118%U, __119%U) {
  match[U](__119){
    zero_6() => {
      val x_120 := __118;
    }
    succ_7(n_121) => {
      val x_123 := pred_105(__118);
      val x_122 := sub_117(x_123, n_121);
      val x_120 := x_122;
    }
  }
  return x_120;
}

fn mul_124(__125%U, __126%U) {
  match[U](__125){
    zero_6() => {
      val x_128 := mkconstr(zero_6, []);
      val x_127 := x_128;
    }
    succ_7(n_129) => {
      val x_131 := mul_124(n_129, __126);
      val x_130 := add_110(__126, x_131);
      val x_127 := x_130;
    }
  }
  return x_127;
}

fn div_132(x_133%U, y_134%U) {
  val x_136 := lt_100(x_133, y_134);
  match(x_136){
    true_4() => {
      val x_137 := mkconstr(zero_6, []);
      val x_135 := x_137;
    }
    false_5() => {
      val x_139 :=
        fn loop_140(x_141%U, y_142%U) {
          val x_145 := pred_105(y_142);
          val x_144 := sub_117(x_141, x_145);
          match[U](x_144){
            zero_6() => {
              val x_146 := mkconstr(zero_6, []);
              val x_143 := x_146;
            }
            succ_7(n_147) => {
              val x_148 := loop_140(n_147, y_142);
              val x_149 := mkconstr(succ_7, [x_148]);
              val x_143 := x_149;
            }
          }
          return x_143;
        };
      val loop_138 := x_139;
      val x_150 := loop_138(x_133, y_134);
      val x_135 := x_150;
    }
  }
  return x_135;
}

fn rem_151(x_152%U, y_153%U) {
  val x_156 := div_132(x_152, y_153);
  val x_155 := mul_124(x_156, y_153);
  val x_154 := sub_117(x_152, x_155);
  return x_154;
}

fn pow_157(x_158%U, y_159%U) {
  val x_161 :=
    fn loop_162(acc_163%U, y_164%U) {
      val x_166 := lte(y_164, y_164);
      match(x_166){
        true_4() => {
          val x_165 := acc_163;
        }
        false_5() => {
          val x_168 := mul(x_158, x_158);
          val x_169 := sub(y_164, y_164);
          val x_167 := loop_162(x_168, x_169);
          val x_165 := x_167;
        }
      }
      return x_165;
    };
  val loop_160 := x_161;
  val x_170 := loop_160(1, y_159);
  return x_170;
}

fn powm_171(x_172%U, y_173%U, m_174%U) {
  val x_176 :=
    fn loop_177(acc_178%U, y_179%U) {
      val x_181 := lte(y_179, y_179);
      match(x_181){
        true_4() => {
          val x_180 := acc_178;
        }
        false_5() => {
          val x_184 := mul(x_172, x_172);
          val x_185 := mul(x_172, x_172);
          val x_183 := mul(x_184, x_185);
          val x_186 := sub(y_179, y_179);
          val x_182 := loop_177(x_183, x_186);
          val x_180 := x_182;
        }
      }
      return x_180;
    };
  val loop_175 := x_176;
  val x_187 := loop_175(1, y_173);
  return x_187;
}

fn splitU_188(__189%U) {
  match[U](__189){
    nilUU_24() => {
      val x_191 := mkconstr(nilUU_24, []);
      val x_192 := mkconstr(nilUU_24, []);
      val x_193 := mkconstr(ex1UU_33, [x_191, x_192]);
      val x_190 := x_193;
    }
    consUU_25(hd_194, tl_195) => {
      match[U](tl_195){
        nilUU_24() => {
          val x_197 := mkconstr(nilUU_24, []);
          val x_198 := mkconstr(consUU_25, [hd_194, x_197]);
          val x_199 := mkconstr(nilUU_24, []);
          val x_200 := mkconstr(ex1UU_33, [x_198, x_199]);
          val x_196 := x_200;
        }
        consUU_25(hd_201, tl_202) => {
          val x_204 := splitU_188(tl_202);
          match[L](x_204){
            ex1UU_33(m_205, n_206) => {
              val x_207 := mkconstr(consUU_25, [hd_194, m_205]);
              val x_208 := mkconstr(consUU_25, [hd_201, n_206]);
              val x_209 := mkconstr(ex1UU_33, [x_207, x_208]);
              val x_203 := x_209;
            }
          }
          val x_196 := x_203;
        }
      }
      val x_190 := x_196;
    }
  }
  return x_190;
}

fn splitL_210(__211%U) {
  match[L](__211){
    nilUL_22() => {
      val x_213 := mkconstr(nilUL_22, []);
      val x_214 := mkconstr(nilUL_22, []);
      val x_215 := mkconstr(ex1LL_30, [x_213, x_214]);
      val x_212 := x_215;
    }
    consUL_23(hd_216, tl_217) => {
      match[L](tl_217){
        nilUL_22() => {
          val x_219 := mkconstr(nilUL_22, []);
          val x_220 := mkconstr(consUL_23, [hd_216, x_219]);
          val x_221 := mkconstr(nilUL_22, []);
          val x_222 := mkconstr(ex1LL_30, [x_220, x_221]);
          val x_218 := x_222;
        }
        consUL_23(hd_223, tl_224) => {
          val x_226 := splitL_210(tl_224);
          match[L](x_226){
            ex1LL_30(m_227, n_228) => {
              val x_229 := mkconstr(consUL_23, [hd_216, m_227]);
              val x_230 := mkconstr(consUL_23, [hd_223, n_228]);
              val x_231 := mkconstr(ex1LL_30, [x_229, x_230]);
              val x_225 := x_231;
            }
          }
          val x_218 := x_225;
        }
      }
      val x_212 := x_218;
    }
  }
  return x_212;
}

fn mergeU_232(__233%U, __234%L) {
  match[U](__233){
    nilUU_24() => {
      val x_235 := __234;
    }
    consUU_25(hd_236, tl_237) => {
      match[U](__234){
        nilUU_24() => {
          val x_239 := mkconstr(consUU_25, [hd_236, tl_237]);
          val x_238 := x_239;
        }
        consUU_25(hd_240, tl_241) => {
          val x_243 := lte(hd_236, hd_236);
          match(x_243){
            true_4() => {
              val x_245 := mkconstr(consUU_25, [hd_240, tl_241]);
              val x_244 := mergeU_232(tl_237, x_245);
              val x_246 := mkconstr(consUU_25, [hd_236, x_244]);
              val x_242 := x_246;
            }
            false_5() => {
              val x_248 := mkconstr(consUU_25, [hd_236, tl_237]);
              val x_247 := mergeU_232(x_248, tl_241);
              val x_249 := mkconstr(consUU_25, [hd_240, x_247]);
              val x_242 := x_249;
            }
          }
          val x_238 := x_242;
        }
      }
      val x_235 := x_238;
    }
  }
  return x_235;
}

fn mergeL_250(__251%U, __252%L) {
  match[L](__251){
    nilUL_22() => {
      val x_253 := __252;
    }
    consUL_23(hd_254, tl_255) => {
      match[L](__252){
        nilUL_22() => {
          val x_257 := mkconstr(consUL_23, [hd_254, tl_255]);
          val x_256 := x_257;
        }
        consUL_23(hd_258, tl_259) => {
          val x_261 := lte(hd_254, hd_254);
          match(x_261){
            true_4() => {
              val x_263 := mkconstr(consUL_23, [hd_258, tl_259]);
              val x_262 := mergeL_250(tl_255, x_263);
              val x_264 := mkconstr(consUL_23, [hd_254, x_262]);
              val x_260 := x_264;
            }
            false_5() => {
              val x_266 := mkconstr(consUL_23, [hd_254, tl_255]);
              val x_265 := mergeL_250(x_266, tl_259);
              val x_267 := mkconstr(consUL_23, [hd_258, x_265]);
              val x_260 := x_267;
            }
          }
          val x_256 := x_260;
        }
      }
      val x_253 := x_256;
    }
  }
  return x_253;
}

fn msortU_268(__269%U) {
  match[U](__269){
    nilUU_24() => {
      val x_271 := mkconstr(nilUU_24, []);
      val x_270 := x_271;
    }
    consUU_25(hd_272, tl_273) => {
      match[U](tl_273){
        nilUU_24() => {
          val x_275 := mkconstr(nilUU_24, []);
          val x_276 := mkconstr(consUU_25, [hd_272, x_275]);
          val x_274 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          val x_281 := mkconstr(consUU_25, [hd_277, tl_278]);
          val x_282 := mkconstr(consUU_25, [hd_272, x_281]);
          val x_280 := splitU_188(x_282);
          match[L](x_280){
            ex1UU_33(m_283, n_284) => {
              val x_286 := msortU_268(m_283);
              val x_287 := msortU_268(n_284);
              val x_285 := mergeU_232(x_286, x_287);
              val x_279 := x_285;
            }
          }
          val x_274 := x_279;
        }
      }
      val x_270 := x_274;
    }
  }
  return x_270;
}

fn msortL_288(__289%U) {
  match[L](__289){
    nilUL_22() => {
      val x_291 := mkconstr(nilUL_22, []);
      val x_290 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          val x_295 := mkconstr(nilUL_22, []);
          val x_296 := mkconstr(consUL_23, [hd_292, x_295]);
          val x_294 := x_296;
        }
        consUL_23(hd_297, tl_298) => {
          val x_301 := mkconstr(consUL_23, [hd_297, tl_298]);
          val x_302 := mkconstr(consUL_23, [hd_292, x_301]);
          val x_300 := splitL_210(x_302);
          match[L](x_300){
            ex1LL_30(m_303, n_304) => {
              val x_306 := msortL_288(m_303);
              val x_307 := msortL_288(n_304);
              val x_305 := mergeL_250(x_306, x_307);
              val x_299 := x_305;
            }
          }
          val x_294 := x_299;
        }
      }
      val x_290 := x_294;
    }
  }
  return x_290;
}

-----------------------------------------

