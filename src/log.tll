[Definition {name = "DH"; relv = N;
   body =
   (Binder ([],
      ((Fun (
          (Pi (R, U, Int_t,
             (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", Proto)))))))),
          (Binder ((Some "DH"),
             [([(PId "p"); (PId "g")],
               (Some (Act (N, true, Int_t,
                        (Binder ("a",
                           (Act (R, true, Int_t,
                              (Binder ("A",
                                 (Act (N, true,
                                    (BOpr ("=", (Id ("A", I)),
                                       (App
                                          [(Id ("powm", I)); (Id ("g", I));
                                            (Id ("a", I)); (Id ("p", I))])
                                       )),
                                    (Binder ("_",
                                       (Act (N, false, Int_t,
                                          (Binder ("b",
                                             (Act (R, false, Int_t,
                                                (Binder ("B",
                                                   (Act (N, false,
                                                      (BOpr ("=",
                                                         (Id ("B", I)),
                                                         (App
                                                            [(Id ("powm", I));
                                                              (Id ("g", I));
                                                              (Id ("b", I));
                                                              (Id ("p", I))])
                                                         )),
                                                      (Binder ("_", End))))
                                                   ))
                                                ))
                                             ))
                                          ))
                                       ))
                                    ))
                                 ))
                              ))
                           ))
                        ))))
               ]
             )),
          [E; E])),
       (Pi (R, U, Int_t,
          (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", Proto)))))))))
      ));
   view = [E; E]};
  Definition {name = "DH_ch"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", IMeta)))))))),
           (Binder ((Some "DH_ch"),
              [([(PId "p"); (PId "g")],
                (Some (Ch (true,
                         (App [(Id ("DH", I)); (Id ("p", I)); (Id ("g", I))])
                         ))))
                ]
              )),
           [E; E])),
        (Pi (R, U, Int_t,
           (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", IMeta)))))))))
       ));
    view = [E; E]};
  Definition {name = "DH_hc"; relv = N;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", IMeta)))))))),
           (Binder ((Some "DH_hc"),
              [([(PId "p"); (PId "g")],
                (Some (Ch (false,
                         (App [(Id ("DH", I)); (Id ("p", I)); (Id ("g", I))])
                         ))))
                ]
              )),
           [E; E])),
        (Pi (R, U, Int_t,
           (Binder ("p", (Pi (R, U, Int_t, (Binder ("g", IMeta)))))))))
       ));
    view = [E; E]};
  Definition {name = "alice"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("a",
                 (Pi (R, U, Int_t,
                    (Binder ("p",
                       (Pi (R, U, Int_t,
                          (Binder ("g",
                             (Pi (R, U,
                                (App
                                   [(Id ("DH_ch", I)); (Id ("p", I));
                                     (Id ("g", I))]),
                                (Binder ("c", (IO (Id ("unit", I)))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "alice"),
              [([(PId "a"); (PId "p"); (PId "g"); (PId "c")],
                (Some (MLet ((App [(Send (Id ("c", I))); (Id ("a", I))]),
                         (Binder ((PId "c"),
                            (MLet (
                               (App
                                  [(Send (Id ("c", I)));
                                    (App
                                       [(Id ("powm", I)); (Id ("g", I));
                                         (Id ("a", I)); (Id ("p", I))])
                                    ]),
                               (Binder ((PId "c"),
                                  (MLet (
                                     (App
                                        [(Send (Id ("c", I)));
                                          (Id ("refl", I))]),
                                     (Binder ((PId "c"),
                                        (MLet ((Recv (Id ("c", I))),
                                           (Binder (
                                              (PBOpr (
                                                 "\226\159\168{},\226\159\169",
                                                 (PId "b"), (PId "c"))),
                                              (MLet ((Recv (Id ("c", I))),
                                                 (Binder (
                                                    (PBOpr (
                                                       "\226\159\168,\226\159\169",
                                                       (PId "B"), (PId "c"))),
                                                    (MLet (
                                                       (Recv (Id ("c", I))),
                                                       (Binder (
                                                          (PBOpr (
                                                             "\226\159\168{},\226\159\169",
                                                             (PId "pf"),
                                                             (PId "c"))),
                                                          (BOpr (";",
                                                             (Print
                                                                (BOpr ("++",
                                                                   (App
                                                                    [(Id (
                                                                    "string_of_int",
                                                                    I));
                                                                    (Id ("B",
                                                                    I))]),
                                                                   (String
                                                                    "\n")
                                                                   ))),
                                                             (Close
                                                                (Id ("c", I)))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; E; E; E])),
        (Pi (R, U, Int_t,
           (Binder ("a",
              (Pi (R, U, Int_t,
                 (Binder ("p",
                    (Pi (R, U, Int_t,
                       (Binder ("g",
                          (Pi (R, U,
                             (App
                                [(Id ("DH_ch", I)); (Id ("p", I));
                                  (Id ("g", I))]),
                             (Binder ("c", (IO (Id ("unit", I)))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E; E; E]};
  Definition {name = "bob"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("b",
                 (Pi (R, U, Int_t,
                    (Binder ("p",
                       (Pi (R, U, Int_t,
                          (Binder ("g",
                             (Pi (R, U,
                                (App
                                   [(Id ("DH_hc", I)); (Id ("p", I));
                                     (Id ("g", I))]),
                                (Binder ("c", (IO (Id ("unit", I)))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "bob"),
              [([(PId "b"); (PId "p"); (PId "g"); (PId "c")],
                (Some (MLet ((Recv (Id ("c", I))),
                         (Binder (
                            (PBOpr ("\226\159\168{},\226\159\169", (PId "a"),
                               (PId "c"))),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "A"), (PId "c"))),
                                  (MLet ((Recv (Id ("c", I))),
                                     (Binder (
                                        (PBOpr (
                                           "\226\159\168{},\226\159\169",
                                           (PId "pf"), (PId "c"))),
                                        (MLet (
                                           (App
                                              [(Send (Id ("c", I)));
                                                (Id ("b", I))]),
                                           (Binder ((PId "c"),
                                              (MLet (
                                                 (App
                                                    [(Send (Id ("c", I)));
                                                      (App
                                                         [(Id ("powm", I));
                                                           (Id ("g", I));
                                                           (Id ("b", I));
                                                           (Id ("p", I))])
                                                      ]),
                                                 (Binder ((PId "c"),
                                                    (MLet (
                                                       (App
                                                          [(Send
                                                              (Id ("c", I)));
                                                            (Id ("refl", I))]),
                                                       (Binder ((PId "c"),
                                                          (BOpr (";",
                                                             (Print
                                                                (BOpr ("++",
                                                                   (App
                                                                    [(Id (
                                                                    "string_of_int",
                                                                    I));
                                                                    (Id ("A",
                                                                    I))]),
                                                                   (String
                                                                    "\n")
                                                                   ))),
                                                             (Close
                                                                (Id ("c", I)))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E; E; E; E])),
        (Pi (R, U, Int_t,
           (Binder ("b",
              (Pi (R, U, Int_t,
                 (Binder ("p",
                    (Pi (R, U, Int_t,
                       (Binder ("g",
                          (Pi (R, U,
                             (App
                                [(Id ("DH_hc", I)); (Id ("p", I));
                                  (Id ("g", I))]),
                             (Binder ("c", (IO (Id ("unit", I)))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [E; E; E; E]};
  Definition {name = "key_exchange"; relv = R;
    body =
    (Binder ([],
       ((Fun (
           (Pi (R, U, (Id ("unit", I)), (Binder ("_", (IO (Id ("unit", I)))))
              )),
           (Binder ((Some "key_exchange"),
              [([(PId "_")],
                (Some (Let (R, (Int 23),
                         (Binder ((PId "p"),
                            (Let (R, (Int 5),
                               (Binder ((PId "g"),
                                  (MLet (
                                     (Fork
                                        (Fun (
                                           (Pi (R, L,
                                              (App
                                                 [(Id ("DH_ch", I));
                                                   (Id ("p", I));
                                                   (Id ("g", I))]),
                                              (Binder ("",
                                                 (IO (Id ("unit", I)))))
                                              )),
                                           (Binder (None,
                                              [([(PId "c")],
                                                (Some (App
                                                         [(Id ("alice", I));
                                                           (Int 4);
                                                           (Id ("p", I));
                                                           (Id ("g", I));
                                                           (Id ("c", I))])))
                                                ]
                                              )),
                                           []))),
                                     (Binder ((PId "c"),
                                        (MLet (
                                           (Fork
                                              (Fun (
                                                 (Pi (R, L,
                                                    (Ch (true,
                                                       (Act (R, false,
                                                          (App
                                                             [(Id ("DH_hc", I
                                                                 ));
                                                               (Id ("p", I));
                                                               (Id ("g", I))]),
                                                          (Binder ("_", End))
                                                          ))
                                                       )),
                                                    (Binder ("",
                                                       (IO (Id ("unit", I)))
                                                       ))
                                                    )),
                                                 (Binder (None,
                                                    [([(PId "c0")],
                                                      (Some (MLet (
                                                               (Recv
                                                                  (Id ("c0",
                                                                    I))),
                                                               (Binder (
                                                                  (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "c"),
                                                                    (PId "c0")
                                                                    )),
                                                                  (BOpr (";",
                                                                    (Close
                                                                    (Id (
                                                                    "c0", I))),
                                                                    (App
                                                                    [(Id (
                                                                    "bob", I
                                                                    ));
                                                                    (Int 3);
                                                                    (Id ("p",
                                                                    I));
                                                                    (Id ("g",
                                                                    I));
                                                                    (Id ("c",
                                                                    I))])))
                                                                  ))
                                                               ))))
                                                      ]
                                                    )),
                                                 []))),
                                           (Binder ((PId "c0"),
                                              (MLet (
                                                 (App
                                                    [(Send (Id ("c0", I)));
                                                      (Id ("c", I))]),
                                                 (Binder ((PId "c0"),
                                                    (Close (Id ("c0", I)))))
                                                 ))
                                              ))
                                           ))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (Id ("unit", I)), (Binder ("_", (IO (Id ("unit", I))))))))
       ));
    view = [E]};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((App [(Id ("key_exchange", I)); (Id ("tt", I))]),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

parse success

-----------------------------------------

#[program]
def id_1‹s_498› : ∀ (A_499 : Type‹s_498›) -> A_499 -> ?_2[0;0] :=
  fun id_501 : ∀ (A_502 : Type‹s_498›) -> A_502 -> ?_1[0;0]
  | A_504, m_505 => m_505

#[logical]
inductive eq_1‹s_506› (A_507 : Type‹s_506›) (m_508 : A_507):
  A_507 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_508 m_508)

#[program]
def rwl_2‹s_510,r_511› :
  ∀ {A_512 : Type‹s_510›} ->
    ∀ {m_513 : A_512} ->
      ∀ {n_514 : A_512} ->
        ∀ {B_515 : A_512 -> Type‹r_511›} ->
          {(eq_1‹??_3› ?_5[0;0] m_513 n_514)} ->
            ((B_515) m_513) -> ((B_515) n_514)
:=
  fun rwl_519 :
    ∀ {A_520 : Type‹s_510›} ->
      ∀ {m_521 : A_520} ->
        ∀ {n_522 : A_520} ->
          ∀ {B_523 : A_520 -> Type‹r_511›} ->
            {(eq_1‹??_2› ?_4[0;0] m_521 n_522)} ->
              ((B_523) m_521) -> ((B_523) n_522)
  | A_527, m_528, n_529, B_530, refl_1, x_531 => x_531

#[program]
def rwr_3‹s_532,r_533› :
  ∀ {A_534 : Type‹s_532›} ->
    ∀ {m_535 : A_534} ->
      ∀ {n_536 : A_534} ->
        ∀ {B_537 : A_534 -> Type‹r_533›} ->
          {(eq_1‹??_5› ?_7[0;0] m_535 n_536)} ->
            ((B_537) n_536) -> ((B_537) m_535)
:=
  fun rwr_541 :
    ∀ {A_542 : Type‹s_532›} ->
      ∀ {m_543 : A_542} ->
        ∀ {n_544 : A_542} ->
          ∀ {B_545 : A_542 -> Type‹r_533›} ->
            {(eq_1‹??_4› ?_6[0;0] m_543 n_544)} ->
              ((B_545) n_544) -> ((B_545) m_543)
  | A_549, m_550, n_551, B_552, refl_1, x_553 => x_553

#[logical]
def congr_4‹s_554,r_555,t_556› :
  ∀ (A_557 : Type‹s_554›) ->
    ∀ (B_558 : Type‹r_555›) ->
      ∀ (m_559 : A_557) ->
        ∀ (n_560 : A_557) ->
          ∀ (f_561 : forall‹t_556›(__562 : A_557), B_558) ->
            (eq_1‹??_9› ?_12[0;0] m_559 n_560) ->
              (eq_1‹??_10› ?_13[0;0] ((f_561) m_559) ((f_561) n_560))
:=
  fun congr_564 :
    ∀ (A_565 : Type‹s_554›) ->
      ∀ (B_566 : Type‹r_555›) ->
        ∀ (m_567 : A_565) ->
          ∀ (n_568 : A_565) ->
            ∀ (f_569 : forall‹t_556›(__570 : A_565), B_566) ->
              (eq_1‹??_6› ?_8[0;0] m_567 n_568) ->
                (eq_1‹??_7› ?_9[0;0] ((f_569) m_567) ((f_569) n_568))
  | A_572, B_573, m_574, n_575, f_576, refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_577 : U} ->
    ∀ {m_578 : A_577} ->
      ∀ (x_579 : (eq_1‹??_15› ?_20[0;0] m_578 m_578)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_579 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_580 :
    ∀ {A_581 : U} ->
      ∀ {m_582 : A_581} ->
        ∀ (x_583 : (eq_1‹??_11› ?_14[0;0] m_582 m_582)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_583 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_584, m_585, refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_586,t_587› (A_588 : Type‹s_586›):
  A_588 -> Type‹t_587›
where
| just_2 (m_590 : A_588) : (sing_2‹??_18,??_19› ?_24[0;0] m_590)

#[logical]
def ssing_6‹s_591› :
  ∀ (A_592 : Type‹s_591›) -> A_592 -> Type‹s_591›
:=
  fun ssing_594 : ∀ (A_595 : Type‹s_591›) -> A_595 -> Type‹s_591›
  | A_597, m_598 => (sing_2‹s_591,s_591› A_597 m_598)

#[program]
def sing_elim_7‹s_599,t_600› :
  ∀ {A_601 : Type‹s_599›} ->
    ∀ {x_602 : A_601} -> (sing_2‹s_599,t_600› ?_26[0;0] x_602) -> A_601
:=
  fun sing_elim_604 :
    ∀ {A_605 : Type‹s_599›} ->
      ∀ {x_606 : A_605} ->
        (sing_2‹s_599,t_600› ?_25[0;0] x_606) -> A_605
  | A_608, x_609, (just_2 x_610) => x_610

#[logical]
def sing_uniq_8‹s_611,t_612› :
  ∀ (A_613 : Type‹s_611›) ->
    ∀ (x0_614 : A_613) ->
      ∀ (x_615 : (sing_2‹s_611,t_612› ?_33[0;0] x0_614)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_614
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_615))
:=
  fun sing_uniq_616 :
    ∀ (A_617 : Type‹s_611›) ->
      ∀ (x0_618 : A_617) ->
        ∀ (x_619 : (sing_2‹s_611,t_612› ?_27[0;0] x0_618)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_618
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_619))
  | A_620, x0_621, (just_2 _622) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_623 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_623 tt_3)
:=
  fun unit_eta_624 :
    ∀ (x_625 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_625 tt_3)
  | x_626 =>
    match x_626 in
      ∀ (x0_627 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_627 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_629 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_633 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | _636, _637 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_640 : bool_4 -> bool_4 -> bool_4
  | false_5, false_5 => false_5
  | _643, _644 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_647 : bool_4 -> bool_4 -o bool_4
  | true_4, true_4 => false_5
  | false_5, false_5 => false_5
  | _650, _651 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_652 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_655 : nat_5 -> nat_5 -> bool_4
  | zero_6, _658 => true_4
  | _659, zero_6 => false_5
  | (succ_7 x_660), (succ_7 y_661) => ((lte_655) x_660 y_661)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_664 : nat_5 -> nat_5 -> bool_4
  | x_667, y_668 => ((lte_14) (succ_7‹› x_667) y_668)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_670 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_672) => x_672

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_675 : nat_5 -> nat_5 -> nat_5
  | zero_6, y_678 => y_678
  | (succ_7 x_679), y_680 => (succ_7‹› ((add_675) x_679 y_680))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_683 : nat_5 -> nat_5 -> nat_5
  | x_686, zero_6 => x_686
  | x_687, (succ_7 y_688) => ((sub_683) ((pred_16) x_687) y_688)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_691 : nat_5 -> nat_5 -> nat_5
  | zero_6, _694 => zero_6
  | (succ_7 x_695), y_696 => ((add_17) y_696 ((mul_691) x_695 y_696))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_699 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_702, y_703 =>
    match ((lt_15) x_702 y_703) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_705 :=
        fun loop_706 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_709, y_710 =>
          match ((sub_18) x_709 ((pred_16) y_710)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_712) => (succ_7‹› ((loop_706) x_712 y_710))
      in ((loop_705) x_702 y_703)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_715 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_718, y_719 => ((sub_18) x_718 ((mul_19) ((div_20) x_718 y_719) y_719))

#[program]
inductive list_6‹s_720,t_721› (A_722 : Type‹s_720›): Type‹t_721›
where
| nil_8 : (list_6‹??_31,??_32› A_722)
| cons_9
    (hd_723 : A_722) (tl_724 : (list_6‹??_33,t_721› A_722))
    : (list_6‹??_34,??_35› A_722)

#[program]
def free_list_22‹s_725,t_726› :
  ∀ {A_727 : Type‹s_725›} ->
    A_727 -> unit_3 -> (list_6‹??_37,t_726› A_727) -> unit_3
:=
  fun free_list_731 :
    ∀ {A_732 : Type‹s_725›} ->
      A_732 -> unit_3 -> (list_6‹??_36,t_726› A_732) -> unit_3
  | A_736, f_737, nil_8 => tt_3
  | A_738, f_739, (cons_9 x_740 xs_741) =>
    let __742 := ((f_739) x_740) in ((free_list_731) ?_52[0;0] f_739 xs_741)

#[program]
inductive exists0_7‹s_743,r_744› (A_745 : Type‹s_743›) (B_746 : 
A_745 -> Type‹r_744›): L where
| ex0_10
    {m_748 : A_745} (n_749 : ((B_746) m_748))
    : (exists0_7‹??_38,??_39› A_745 B_746)

#[program]
inductive exists1_8‹s_750,r_751› (A_752 : Type‹s_750›) (B_753 : 
A_752 -> Type‹r_751›): L where
| ex1_11
    (m_755 : A_752) (n_756 : ((B_753) m_755))
    : (exists1_8‹??_40,??_41› A_752 B_753)

#[logical]
def prod0_23‹s_757,r_758› :
  Type‹s_757› -> Type‹r_758› -> ?_56[0;0]
:=
  fun prod0_761 : Type‹s_757› -> Type‹r_758› -> ?_53[0;0]
  | A_764, B_765 =>
    (exists0_7‹??_42,??_43›
      A_764 fun _766 : ?_54[0;0] -> ?_55[0;0]
            | _768 => B_765)

#[logical]
def prod1_24‹s_769,r_770› :
  Type‹s_769› -> Type‹r_770› -> ?_60[0;0]
:=
  fun prod1_773 : Type‹s_769› -> Type‹r_770› -> ?_57[0;0]
  | A_776, B_777 =>
    (exists1_8‹??_44,??_45›
      A_776 fun _778 : ?_58[0;0] -> ?_59[0;0]
            | _780 => B_777)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_783 : int -> int -> int
  | x_786, y_787 =>
    let loop_788 :=
      fun loop_789 : int -> int -> int
      | acc_792, y_793 =>
        match (__lte__ y_793 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_792
        | false_5 => ((loop_789) (__mul__ x_786 acc_792) (__sub__ y_793 1))
    in ((loop_788) 1 y_787)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_798 : int -> int -> int -> int
  | x_802, y_803, m_804 =>
    let loop_805 :=
      fun loop_806 : int -> int -> int
      | acc_809, y_810 =>
        match (__lte__ y_810 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_809
        | false_5 =>
          ((loop_806)
            (__mod__ (__mul__ x_802 acc_809) m_804) (__sub__ y_810 1))
    in ((loop_805) 1 y_803)

#[program]
def ord_27‹› : char -> int :=
  fun ord_813 : char -> int
  | c_815 => (__ord__ c_815)

#[program]
def chr_28‹› : int -> char :=
  fun chr_817 : int -> char
  | i_819 => (__chr__ i_819)

#[program]
def str_29‹› : char -> string :=
  fun str_821 : char -> string
  | c_823 => (__push__ "" c_823)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_825 : string -> int
  | s_827 => (__size__ s_827)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_829 : int -> string
  | i_831 =>
    let aux_832 :=
      fun aux_833 : int -> string
      | i_835 =>
        match (__lte__ 10 i_835) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_837 := (__mod__ i_835 10) in
          let i_838 := (__div__ i_835 10) in
          (__push__ ((aux_833) i_838)
            ((chr_28) (__add__ r_837 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_835 ((ord_27) 0))))
    in
    match (__lte__ 0 i_831) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_832) i_831)
    | false_5 => (__cat__ "~" ((aux_832) (__neg__ i_831)))

#[logical]
def DH_32‹› : int -> int -> proto :=
  fun DH_842 : int -> int -> proto
  | p_845, g_846 =>
    ⇑{a_847 : int} ⇒
      ⇑(A_848 : int) ⇒
        ⇑{__849 :
          (eq_1‹??_46› ?_69[0;0] A_848 ((powm_26) g_846 a_847 p_845))} ⇒
          ⇓{b_850 : int} ⇒
            ⇓(B_851 : int) ⇒
              ⇓{__852 :
                (eq_1‹??_47›
                  ?_70[0;0] B_851 ((powm_26) g_846 b_850 p_845))} ⇒
                •

#[logical]
def DH_ch_33‹› : int -> int -> ?_72[0;0] :=
  fun DH_ch_855 : int -> int -> ?_71[0;0]
  | p_858, g_859 => ch⟨((DH_32) p_858 g_859)⟩

#[logical]
def DH_hc_34‹› : int -> int -> ?_74[0;0] :=
  fun DH_hc_862 : int -> int -> ?_73[0;0]
  | p_865, g_866 => hc⟨((DH_32) p_865 g_866)⟩

#[program]
def alice_35‹› :
  int ->
    ∀ (p_868 : int) ->
      ∀ (g_869 : int) -> ((DH_ch_33) p_868 g_869) -> IO unit_3
:=
  fun alice_871 :
    int ->
      ∀ (p_873 : int) ->
        ∀ (g_874 : int) -> ((DH_ch_33) p_873 g_874) -> IO unit_3
  | a_876, p_877, g_878, c_879 =>
    let* c_880 := ((send c_879) a_876) in
    let* c_881 := ((send c_880) ((powm_26) g_878 a_876 p_877)) in
    let* c_882 := ((send c_881) (refl_1‹??_48› ?_75[0;0] ?_76[0;0])) in
    let* _883 := recv c_882 in
    match _883 in ?_82[0;0] -o ?_81[0;0] with
    | (ex0_10 b_885 c_886) =>
      let* _887 := recv c_886 in
      match _887 in ?_80[0;0] -o ?_79[0;0] with
      | (ex1_11 B_889 c_890) =>
        let* _891 := recv c_890 in
        match _891 in ?_78[0;0] -o ?_77[0;0] with
        | (ex0_10 pf_893 c_894) =>
          let* __895 := print (__cat__ ((string_of_int_31) B_889) "\n") in
          close c_894

#[program]
def bob_36‹› :
  int ->
    ∀ (p_897 : int) ->
      ∀ (g_898 : int) -> ((DH_hc_34) p_897 g_898) -> IO unit_3
:=
  fun bob_900 :
    int ->
      ∀ (p_902 : int) ->
        ∀ (g_903 : int) -> ((DH_hc_34) p_902 g_903) -> IO unit_3
  | b_905, p_906, g_907, c_908 =>
    let* _909 := recv c_908 in
    match _909 in ?_90[0;0] -o ?_89[0;0] with
    | (ex0_10 a_911 c_912) =>
      let* _913 := recv c_912 in
      match _913 in ?_88[0;0] -o ?_87[0;0] with
      | (ex1_11 A_915 c_916) =>
        let* _917 := recv c_916 in
        match _917 in ?_86[0;0] -o ?_85[0;0] with
        | (ex0_10 pf_919 c_920) =>
          let* c_921 := ((send c_920) b_905) in
          let* c_922 := ((send c_921) ((powm_26) g_907 b_905 p_906)) in
          let* c_923 :=
            ((send c_922) (refl_1‹??_49› ?_83[0;0] ?_84[0;0]))
          in
          let* __924 := print (__cat__ ((string_of_int_31) A_915) "\n") in
          close c_923

#[program]
def key_exchange_37‹› : unit_3 -> IO unit_3 :=
  fun key_exchange_926 : unit_3 -> IO unit_3
  | _928 =>
    let p_929 := 23 in
    let g_930 := 5 in
    let* c_931 :=
      fork
        fun _932 : ((DH_ch_33) p_929 g_930) -o IO unit_3
        | c_934 => ((alice_35) 4 p_929 g_930 c_934)
    in
    let* c0_935 :=
      fork
        fun _936 :
          ch⟨⇓(__938 : ((DH_hc_34) p_929 g_930)) ⇒ •⟩ -o IO unit_3
        | c0_939 =>
          let* _940 := recv c0_939 in
          match _940 in ?_92[0;0] -o ?_91[0;0] with
          | (ex1_11 c_942 c0_943) =>
            let* __944 := close c0_943 in ((bob_36) 3 p_929 g_930 c_942)
    in let* c0_945 := ((send c0_935) c_931) in close c0_945

#[program]
def main_38‹› : IO unit_3 := ((key_exchange_37) tt_3)

trans01 success

-----------------------------------------

#[program]
def id_1‹s_8627› : ∀ (A_8628 : Type‹s_8627›) -> A_8628 -> A_8628 :=
  fun id_8630 : ∀ (A_8631 : Type‹s_8627›) -> A_8631 -> A_8631
  | A_8633, m_8634 => m_8634

#[logical]
inductive eq_1‹s_8635› (A_8636 : Type‹s_8635›) (m_8637 : A_8636):
  A_8636 -> U
where
| refl_1 : (eq_1‹s_8635› A_8636 m_8637 m_8637)

#[program]
def rwl_2‹s_8639,r_8640› :
  ∀ {A_8641 : Type‹s_8639›} ->
    ∀ {m_8642 : A_8641} ->
      ∀ {n_8643 : A_8641} ->
        ∀ {B_8644 : A_8641 -> Type‹r_8640›} ->
          {(eq_1‹s_8639› A_8641 m_8642 n_8643)} ->
            ((B_8644) m_8642) -> ((B_8644) n_8643)
:=
  fun rwl_8648 :
    ∀ {A_8649 : Type‹s_8639›} ->
      ∀ {m_8650 : A_8649} ->
        ∀ {n_8651 : A_8649} ->
          ∀ {B_8652 : A_8649 -> Type‹r_8640›} ->
            {(eq_1‹s_8639› A_8649 m_8650 n_8651)} ->
              ((B_8652) m_8650) -> ((B_8652) n_8651)
  | A_8656, m_8657, n_8658, B_8659, refl_1, __8660 => __8660

#[program]
def rwr_3‹s_8661,r_8662› :
  ∀ {A_8663 : Type‹s_8661›} ->
    ∀ {m_8664 : A_8663} ->
      ∀ {n_8665 : A_8663} ->
        ∀ {B_8666 : A_8663 -> Type‹r_8662›} ->
          {(eq_1‹s_8661› A_8663 m_8664 n_8665)} ->
            ((B_8666) n_8665) -> ((B_8666) m_8664)
:=
  fun rwr_8670 :
    ∀ {A_8671 : Type‹s_8661›} ->
      ∀ {m_8672 : A_8671} ->
        ∀ {n_8673 : A_8671} ->
          ∀ {B_8674 : A_8671 -> Type‹r_8662›} ->
            {(eq_1‹s_8661› A_8671 m_8672 n_8673)} ->
              ((B_8674) n_8673) -> ((B_8674) m_8672)
  | A_8678, m_8679, n_8680, B_8681, refl_1, __8682 => __8682

#[logical]
def congr_4‹s_8683,r_8684,t_8685› :
  ∀ (A_8686 : Type‹s_8683›) ->
    ∀ (B_8687 : Type‹r_8684›) ->
      ∀ (m_8688 : A_8686) ->
        ∀ (n_8689 : A_8686) ->
          ∀ (f_8690 : forall‹t_8685›(__8691 : A_8686), B_8687) ->
            (eq_1‹s_8683› A_8686 m_8688 n_8689) ->
              (eq_1‹r_8684› B_8687 ((f_8690) m_8688) ((f_8690) n_8689))
:=
  fun congr_8693 :
    ∀ (A_8694 : Type‹s_8683›) ->
      ∀ (B_8695 : Type‹r_8684›) ->
        ∀ (m_8696 : A_8694) ->
          ∀ (n_8697 : A_8694) ->
            ∀ (f_8698 : forall‹t_8685›(__8699 : A_8694), B_8695) ->
              (eq_1‹s_8683› A_8694 m_8696 n_8697) ->
                (eq_1‹r_8684› B_8695 ((f_8698) m_8696) ((f_8698) n_8697))
  | A_8701, B_8702, m_8703, n_8704, f_8705, refl_1 =>
    (refl_1‹r_8684› B_8702 ((f_8705) n_8704))

#[logical]
def axiom_K_5‹› :
  ∀ {A_8706 : U} ->
    ∀ {m_8707 : A_8706} ->
      ∀ (x_8708 : (eq_1‹U› A_8706 m_8707 m_8707)) ->
        (eq_1‹U›
          (eq_1‹U› A_8706 m_8707 m_8707) x_8708
          (refl_1‹U› A_8706 m_8707))
:=
  fun axiom_K_8709 :
    ∀ {A_8710 : U} ->
      ∀ {m_8711 : A_8710} ->
        ∀ (x_8712 : (eq_1‹U› A_8710 m_8711 m_8711)) ->
          (eq_1‹U›
            (eq_1‹U› A_8710 m_8711 m_8711) x_8712
            (refl_1‹U› A_8710 m_8711))
  | A_8713, m_8714, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_8713 m_8714 m_8714) (refl_1‹U› A_8713 m_8714))

#[program]
inductive sing_2‹s_8715,t_8716› (A_8717 : Type‹s_8715›):
  A_8717 -> Type‹t_8716›
where
| just_2 (m_8719 : A_8717) : (sing_2‹s_8715,t_8716› A_8717 m_8719)

#[logical]
def ssing_6‹s_8720› :
  ∀ (A_8721 : Type‹s_8720›) -> A_8721 -> Type‹s_8720›
:=
  fun ssing_8723 :
    ∀ (A_8724 : Type‹s_8720›) -> A_8724 -> Type‹s_8720›
  | A_8726, m_8727 => (sing_2‹s_8720,s_8720› A_8726 m_8727)

#[program]
def sing_elim_7‹s_8728,t_8729› :
  ∀ {A_8730 : Type‹s_8728›} ->
    ∀ {x_8731 : A_8730} ->
      (sing_2‹s_8728,t_8729› A_8730 x_8731) -> A_8730
:=
  fun sing_elim_8733 :
    ∀ {A_8734 : Type‹s_8728›} ->
      ∀ {x_8735 : A_8734} ->
        (sing_2‹s_8728,t_8729› A_8734 x_8735) -> A_8734
  | A_8737, x_8738, (just_2 m_8739) => m_8739

#[logical]
def sing_uniq_8‹s_8740,t_8741› :
  ∀ (A_8742 : Type‹s_8740›) ->
    ∀ (x0_8743 : A_8742) ->
      ∀ (x_8744 : (sing_2‹s_8740,t_8741› A_8742 x0_8743)) ->
        (eq_1‹s_8740›
          A_8742 x0_8743
          ((sing_elim_7‹s_8740,t_8741›) A_8742 x0_8743 x_8744))
:=
  fun sing_uniq_8745 :
    ∀ (A_8746 : Type‹s_8740›) ->
      ∀ (x0_8747 : A_8746) ->
        ∀ (x_8748 : (sing_2‹s_8740,t_8741› A_8746 x0_8747)) ->
          (eq_1‹s_8740›
            A_8746 x0_8747
            ((sing_elim_7‹s_8740,t_8741›) A_8746 x0_8747 x_8748))
  | A_8749, x0_8750, (just_2 m_8751) => (refl_1‹s_8740› A_8749 m_8751)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_8752 : unit_3) -> (eq_1‹U› unit_3 x_8752 tt_3)
:=
  fun unit_eta_8753 :
    ∀ (x_8754 : unit_3) -> (eq_1‹U› unit_3 x_8754 tt_3)
  | x_8755 =>
    match x_8755 in
      ∀ (x0_8756 : unit_3) -o (eq_1‹U› unit_3 x0_8756 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_8758 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_8762 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __8765 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_8768 : bool_4 -> bool_4 -> bool_4
  | true_4, __8771 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_8774 : bool_4 -> bool_4 -o bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_8777 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_8780 : nat_5 -> nat_5 -> bool_4
  | zero_6, __8783 => true_4
  | (succ_7 n_8784), zero_6 => false_5
  | (succ_7 n_8785), (succ_7 n_8786) => ((lte_8780) n_8785 n_8786)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_8789 : nat_5 -> nat_5 -> bool_4
  | x_8792, y_8793 => ((lte_14) (succ_7‹› x_8792) y_8793)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_8795 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_8797) => n_8797

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_8800 : nat_5 -> nat_5 -> nat_5
  | zero_6, __8803 => __8803
  | (succ_7 n_8804), __8805 => (succ_7‹› ((add_8800) n_8804 __8805))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_8808 : nat_5 -> nat_5 -> nat_5
  | __8811, zero_6 => __8811
  | __8812, (succ_7 n_8813) => ((sub_8808) ((pred_16) __8812) n_8813)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_8816 : nat_5 -> nat_5 -> nat_5
  | zero_6, __8819 => zero_6
  | (succ_7 n_8820), __8821 => ((add_17) __8821 ((mul_8816) n_8820 __8821))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_8824 : nat_5 -> nat_5 -> nat_5
  | x_8827, y_8828 =>
    match ((lt_15) x_8827 y_8828) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_8830 :=
        fun loop_8831 : nat_5 -> nat_5 -> nat_5
        | x_8834, y_8835 =>
          match ((sub_18) x_8834 ((pred_16) y_8835)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_8837) => (succ_7‹› ((loop_8831) n_8837 y_8835))
      in ((loop_8830) x_8827 y_8828)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_8840 : nat_5 -> nat_5 -> nat_5
  | x_8843, y_8844 =>
    ((sub_18) x_8843 ((mul_19) ((div_20) x_8843 y_8844) y_8844))

#[program]
inductive list_6‹s_8845,t_8846› (A_8847 : Type‹s_8845›):
  Type‹t_8846›
where
| nil_8 : (list_6‹s_8845,t_8846› A_8847)
| cons_9
    (hd_8848 : A_8847) (tl_8849 : (list_6‹s_8845,t_8846› A_8847))
    : (list_6‹s_8845,t_8846› A_8847)

#[program]
def free_list_22‹s_8850,t_8851› :
  ∀ {A_8852 : Type‹s_8850›} ->
    A_8852 -> unit_3 -> (list_6‹s_8850,t_8851› A_8852) -> unit_3
:=
  fun free_list_8856 :
    ∀ {A_8857 : Type‹s_8850›} ->
      A_8857 -> unit_3 -> (list_6‹s_8850,t_8851› A_8857) -> unit_3
  | A_8861, f_8862, nil_8 => tt_3
  | A_8863, f_8864, (cons_9 hd_8865 tl_8866) =>
    let __8867 := ((f_8864) hd_8865) in
    ((free_list_8856) A_8863 f_8864 tl_8866)

#[program]
inductive exists0_7‹s_8868,r_8869› (A_8870 : Type‹s_8868›) (B_8871 : 
A_8870 -> Type‹r_8869›): L where
| ex0_10
    {m_8873 : A_8870} (n_8874 : ((B_8871) m_8873))
    : (exists0_7‹s_8868,r_8869› A_8870 B_8871)

#[program]
inductive exists1_8‹s_8875,r_8876› (A_8877 : Type‹s_8875›) (B_8878 : 
A_8877 -> Type‹r_8876›): L where
| ex1_11
    (m_8880 : A_8877) (n_8881 : ((B_8878) m_8880))
    : (exists1_8‹s_8875,r_8876› A_8877 B_8878)

#[logical]
def prod0_23‹s_8882,r_8883› : Type‹s_8882› -> Type‹r_8883› -> L
:=
  fun prod0_8886 : Type‹s_8882› -> Type‹r_8883› -> L
  | A_8889, B_8890 =>
    (exists0_7‹s_8882,r_8883›
      A_8889 fun _8891 : A_8889 -> Type‹r_8883›
             | __8893 => B_8890)

#[logical]
def prod1_24‹s_8894,r_8895› : Type‹s_8894› -> Type‹r_8895› -> L
:=
  fun prod1_8898 : Type‹s_8894› -> Type‹r_8895› -> L
  | A_8901, B_8902 =>
    (exists1_8‹s_8894,r_8895›
      A_8901 fun _8903 : A_8901 -> Type‹r_8895›
             | __8905 => B_8902)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_8908 : int -> int -> int
  | x_8911, y_8912 =>
    let loop_8913 :=
      fun loop_8914 : int -> int -> int
      | acc_8917, y_8918 =>
        match (__lte__ y_8918 0) in bool_4 -o int with
        | true_4 => acc_8917
        | false_5 =>
          ((loop_8914) (__mul__ x_8911 acc_8917) (__sub__ y_8918 1))
    in ((loop_8913) 1 y_8912)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_8923 : int -> int -> int -> int
  | x_8927, y_8928, m_8929 =>
    let loop_8930 :=
      fun loop_8931 : int -> int -> int
      | acc_8934, y_8935 =>
        match (__lte__ y_8935 0) in bool_4 -o int with
        | true_4 => acc_8934
        | false_5 =>
          ((loop_8931)
            (__mod__ (__mul__ x_8927 acc_8934) m_8929) (__sub__ y_8935 1))
    in ((loop_8930) 1 y_8928)

#[program]
def ord_27‹› : char -> int :=
  fun ord_8938 : char -> int
  | c_8940 => (__ord__ c_8940)

#[program]
def chr_28‹› : int -> char :=
  fun chr_8942 : int -> char
  | i_8944 => (__chr__ i_8944)

#[program]
def str_29‹› : char -> string :=
  fun str_8946 : char -> string
  | c_8948 => (__push__ "" c_8948)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_8950 : string -> int
  | s_8952 => (__size__ s_8952)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_8954 : int -> string
  | i_8956 =>
    let aux_8957 :=
      fun aux_8958 : int -> string
      | i_8960 =>
        match (__lte__ 10 i_8960) in bool_4 -o string with
        | true_4 =>
          let r_8962 := (__mod__ i_8960 10) in
          let i_8963 := (__div__ i_8960 10) in
          (__push__ ((aux_8958) i_8963)
            ((chr_28) (__add__ r_8962 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_8960 ((ord_27) 0))))
    in
    match (__lte__ 0 i_8956) in bool_4 -o string with
    | true_4 => ((aux_8957) i_8956)
    | false_5 => (__cat__ "~" ((aux_8957) (__neg__ i_8956)))

#[logical]
def DH_32‹› : int -> int -> proto :=
  fun DH_8967 : int -> int -> proto
  | p_8970, g_8971 =>
    ⇑{a_8972 : int} ⇒
      ⇑(A_8973 : int) ⇒
        ⇑{__8974 :
          (eq_1‹U› int A_8973 ((powm_26) g_8971 a_8972 p_8970))} ⇒
          ⇓{b_8975 : int} ⇒
            ⇓(B_8976 : int) ⇒
              ⇓{__8977 :
                (eq_1‹U› int B_8976 ((powm_26) g_8971 b_8975 p_8970))} ⇒
                •

#[logical]
def DH_ch_33‹› : int -> int -> L :=
  fun DH_ch_8980 : int -> int -> L
  | p_8983, g_8984 => ch⟨((DH_32) p_8983 g_8984)⟩

#[logical]
def DH_hc_34‹› : int -> int -> L :=
  fun DH_hc_8987 : int -> int -> L
  | p_8990, g_8991 => hc⟨((DH_32) p_8990 g_8991)⟩

#[program]
def alice_35‹› :
  int ->
    ∀ (p_8993 : int) ->
      ∀ (g_8994 : int) -> ((DH_ch_33) p_8993 g_8994) -> IO unit_3
:=
  fun alice_8996 :
    int ->
      ∀ (p_8998 : int) ->
        ∀ (g_8999 : int) -> ((DH_ch_33) p_8998 g_8999) -> IO unit_3
  | a_9001, p_9002, g_9003, c_9004 =>
    let* c_9005 := ((send c_9004) a_9001) in
    let* c_9006 := ((send c_9005) ((powm_26) g_9003 a_9001 p_9002)) in
    let* c_9007 :=
      ((send c_9006) (refl_1‹U› int ((powm_26) g_9003 a_9001 p_9002)))
    in
    let* _9008 := recv c_9007 in
    match _9008 in
      (exists0_7‹U,L›
        int
        fun _9010 : int -> L
        | b_9012 =>
          ch⟨⇓(B_9013 : int) ⇒
                 ⇓{__9014 :
                   (eq_1‹U› int B_9013 ((powm_26) g_9003 b_9012 p_9002))} ⇒
                   •⟩) -o
        IO unit_3
    with
    | (ex0_10 m_9015 n_9016) =>
      let* _9017 := recv n_9016 in
      match _9017 in
        (exists1_8‹U,L›
          int
          fun _9019 : int -> L
          | B_9021 =>
            ch⟨⇓{__9022 :
                   (eq_1‹U› int B_9021 ((powm_26) g_9003 m_9015 p_9002))} ⇒
                   •⟩) -o
          IO unit_3
      with
      | (ex1_11 m_9023 n_9024) =>
        let* _9025 := recv n_9024 in
        match _9025 in
          (exists0_7‹U,L›
            (eq_1‹U› int m_9023 ((powm_26) g_9003 m_9015 p_9002))
            fun _9027 :
              (eq_1‹U› int m_9023 ((powm_26) g_9003 m_9015 p_9002)) -> L
            | __9029 => ch⟨•⟩) -o IO unit_3
        with
        | (ex0_10 m_9030 n_9031) =>
          let* __9032 := print (__cat__ ((string_of_int_31) m_9023) "\n") in
          close n_9031

#[program]
def bob_36‹› :
  int ->
    ∀ (p_9034 : int) ->
      ∀ (g_9035 : int) -> ((DH_hc_34) p_9034 g_9035) -> IO unit_3
:=
  fun bob_9037 :
    int ->
      ∀ (p_9039 : int) ->
        ∀ (g_9040 : int) -> ((DH_hc_34) p_9039 g_9040) -> IO unit_3
  | b_9042, p_9043, g_9044, c_9045 =>
    let* _9046 := recv c_9045 in
    match _9046 in
      (exists0_7‹U,L›
        int
        fun _9048 : int -> L
        | a_9050 =>
          hc⟨⇑(A_9051 : int) ⇒
                 ⇑{__9052 :
                   (eq_1‹U› int A_9051 ((powm_26) g_9044 a_9050 p_9043))} ⇒
                   ⇓{b_9053 : int} ⇒
                     ⇓(B_9054 : int) ⇒
                       ⇓{__9055 :
                         (eq_1‹U›
                           int B_9054 ((powm_26) g_9044 b_9053 p_9043))} ⇒
                         •⟩) -o
        IO unit_3
    with
    | (ex0_10 m_9056 n_9057) =>
      let* _9058 := recv n_9057 in
      match _9058 in
        (exists1_8‹U,L›
          int
          fun _9060 : int -> L
          | A_9062 =>
            hc⟨⇑{__9063 :
                   (eq_1‹U› int A_9062 ((powm_26) g_9044 m_9056 p_9043))} ⇒
                   ⇓{b_9064 : int} ⇒
                     ⇓(B_9065 : int) ⇒
                       ⇓{__9066 :
                         (eq_1‹U›
                           int B_9065 ((powm_26) g_9044 b_9064 p_9043))} ⇒
                         •⟩) -o
          IO unit_3
      with
      | (ex1_11 m_9067 n_9068) =>
        let* _9069 := recv n_9068 in
        match _9069 in
          (exists0_7‹U,L›
            (eq_1‹U› int m_9067 ((powm_26) g_9044 m_9056 p_9043))
            fun _9071 :
              (eq_1‹U› int m_9067 ((powm_26) g_9044 m_9056 p_9043)) -> L
            | __9073 =>
              hc⟨⇓{b_9074 : int} ⇒
                     ⇓(B_9075 : int) ⇒
                       ⇓{__9076 :
                         (eq_1‹U›
                           int B_9075 ((powm_26) g_9044 b_9074 p_9043))} ⇒
                         •⟩) -o
            IO unit_3
        with
        | (ex0_10 m_9077 n_9078) =>
          let* c_9079 := ((send n_9078) b_9042) in
          let* c_9080 := ((send c_9079) ((powm_26) g_9044 b_9042 p_9043)) in
          let* c_9081 :=
            ((send c_9080)
              (refl_1‹U› int ((powm_26) g_9044 b_9042 p_9043)))
          in
          let* __9082 := print (__cat__ ((string_of_int_31) m_9067) "\n") in
          close c_9081

#[program]
def key_exchange_37‹› : unit_3 -> IO unit_3 :=
  fun key_exchange_9084 : unit_3 -> IO unit_3
  | __9086 =>
    let p_9087 := 23 in
    let g_9088 := 5 in
    let* c_9089 :=
      fork
        fun _9090 : ((DH_ch_33) p_9087 g_9088) -o IO unit_3
        | _9092 => ((alice_35) 4 p_9087 g_9088 _9092)
    in
    let* c0_9093 :=
      fork
        fun _9094 :
          ch⟨⇓(__9096 : ((DH_hc_34) p_9087 g_9088)) ⇒ •⟩ -o
            IO unit_3
        | _9097 =>
          let* _9098 := recv _9097 in
          match _9098 in
            (exists1_8‹L,L›
              ((DH_hc_34) p_9087 g_9088)
              fun _9100 : ((DH_hc_34) p_9087 g_9088) -> L
              | __9102 => ch⟨•⟩) -o IO unit_3
          with
          | (ex1_11 m_9103 n_9104) =>
            let* __9105 := close n_9104 in ((bob_36) 3 p_9087 g_9088 m_9103)
    in let* c0_9106 := ((send c0_9093) c_9089) in close c0_9106

#[program]
def main_38‹› : IO unit_3 := ((key_exchange_37) tt_3)

trans1e success

-----------------------------------------

#[program]
def idU_40 := fun id_16890 (A_16891) -> (m_16892) ->
                m_16892

#[program]
def idL_39 := fun id_16893 (A_16894) -> (m_16895) ->
                m_16895

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_44 :=
  fun rwl_16896 {A_16897} -> {m_16898} -> {n_16899} -> {B_16900} ->
  {__16901} -> (__16902) ->
    match {NULL} with
    | reflU_13  => __16902
    end

#[program]
def rwlUL_43 :=
  fun rwl_16903 {A_16904} -> {m_16905} -> {n_16906} -> {B_16907} ->
  {__16908} -> (__16909) ->
    match {NULL} with
    | reflU_13  => __16909
    end

#[program]
def rwlLU_42 :=
  fun rwl_16910 {A_16911} -> {m_16912} -> {n_16913} -> {B_16914} ->
  {__16915} -> (__16916) ->
    match {NULL} with
    | reflL_12  => __16916
    end

#[program]
def rwlLL_41 :=
  fun rwl_16917 {A_16918} -> {m_16919} -> {n_16920} -> {B_16921} ->
  {__16922} -> (__16923) ->
    match {NULL} with
    | reflL_12  => __16923
    end

#[program]
def rwrUU_48 :=
  fun rwr_16924 {A_16925} -> {m_16926} -> {n_16927} -> {B_16928} ->
  {__16929} -> (__16930) ->
    match {NULL} with
    | reflU_13  => __16930
    end

#[program]
def rwrUL_47 :=
  fun rwr_16931 {A_16932} -> {m_16933} -> {n_16934} -> {B_16935} ->
  {__16936} -> (__16937) ->
    match {NULL} with
    | reflU_13  => __16937
    end

#[program]
def rwrLU_46 :=
  fun rwr_16938 {A_16939} -> {m_16940} -> {n_16941} -> {B_16942} ->
  {__16943} -> (__16944) ->
    match {NULL} with
    | reflL_12  => __16944
    end

#[program]
def rwrLL_45 :=
  fun rwr_16945 {A_16946} -> {m_16947} -> {n_16948} -> {B_16949} ->
  {__16950} -> (__16951) ->
    match {NULL} with
    | reflL_12  => __16951
    end

#[logical]
def congrUUU_56 := NULL

#[logical]
def congrUUL_55 := NULL

#[logical]
def congrULU_54 := NULL

#[logical]
def congrULL_53 := NULL

#[logical]
def congrLUU_52 := NULL

#[logical]
def congrLUL_51 := NULL

#[logical]
def congrLLU_50 := NULL

#[logical]
def congrLLL_49 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_58 := NULL

#[logical]
def ssingL_57 := NULL

#[program]
def sing_elimUU_62 :=
  fun sing_elim_16952 {A_16953} -> {x_16954} -> (__16955) ->
    match __16955 with
    | justUU_17 m_16956 => m_16956
    end

#[program]
def sing_elimUL_61 :=
  fun sing_elim_16957 {A_16958} -> {x_16959} -> (__16960) ->
    match __16960 with
    | justUL_16 m_16961 => m_16961
    end

#[program]
def sing_elimLU_60 :=
  fun sing_elim_16962 {A_16963} -> {x_16964} -> (__16965) ->
    match __16965 with
    
    end

#[program]
def sing_elimLL_59 :=
  fun sing_elim_16966 {A_16967} -> {x_16968} -> (__16969) ->
    match __16969 with
    | justLL_14 m_16970 => m_16970
    end

#[logical]
def sing_uniqUU_66 := NULL

#[logical]
def sing_uniqUL_65 := NULL

#[logical]
def sing_uniqLU_64 := NULL

#[logical]
def sing_uniqLL_63 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_16971 (__16972) ->
    match __16972 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_16973 (__16974) -> (__16975) ->
    match __16974 with
    | true_4  =>
      match __16975 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_16976 (__16977) -> (__16978) ->
    match __16977 with
    | true_4  => true_4
    | false_5  =>
      match __16978 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_16979 (__16980) -> (__16981) -o
    match __16980 with
    | true_4  =>
      match __16981 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __16981 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_16982 (__16983) -> (__16984) ->
    match __16983 with
    | zero_6  => true_4
    | succ_7 n_16985 =>
      match __16984 with
      | zero_6  => false_5 | succ_7 n_16986 => ((lte_16982) n_16985 n_16986)
      end
    end

#[program]
def lt_15 :=
  fun lt_16987 (x_16988) -> (y_16989) ->
    ((lte_14) (succ_7 x_16988) y_16989)

#[program]
def pred_16 :=
  fun pred_16990 (__16991) ->
    match __16991 with
    | zero_6  => zero_6 | succ_7 n_16992 => n_16992
    end

#[program]
def add_17 :=
  fun add_16993 (__16994) -> (__16995) ->
    match __16994 with
    | zero_6  => __16995
    | succ_7 n_16996 => (succ_7 ((add_16993) n_16996 __16995))
    end

#[program]
def sub_18 :=
  fun sub_16997 (__16998) -> (__16999) ->
    match __16999 with
    | zero_6  => __16998
    | succ_7 n_17000 => ((sub_16997) ((pred_16) __16998) n_17000)
    end

#[program]
def mul_19 :=
  fun mul_17001 (__17002) -> (__17003) ->
    match __17002 with
    | zero_6  => zero_6
    | succ_7 n_17004 => ((add_17) __17003 ((mul_17001) n_17004 __17003))
    end

#[program]
def div_20 :=
  fun div_17005 (x_17006) -> (y_17007) ->
    match ((lt_15) x_17006 y_17007) with
    | true_4  => zero_6
    | false_5  =>
      let loop_17008 :=
        fun loop_17009 (x_17010) -> (y_17011) ->
          match ((sub_18) x_17010 ((pred_16) y_17011)) with
          | zero_6  => zero_6
          | succ_7 n_17012 => (succ_7 ((loop_17009) n_17012 y_17011))
          end
      in ((loop_17008) x_17006 y_17007)
    end

#[program]
def rem_21 :=
  fun rem_17013 (x_17014) -> (y_17015) ->
    ((sub_18) x_17014 ((mul_19) ((div_20) x_17014 y_17015) y_17015))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_70 :=
  fun free_list_17016 {A_17017} -> (f_17018) -> (__17019) ->
    match __17019 with
    | nilUU_24  => tt_3
    | consUU_25 hd_17020 tl_17021 =>
      let __17022 := ((f_17018) hd_17020) in
      ((free_list_17016) NULL f_17018 tl_17021)
    end

#[program]
def free_listUL_69 :=
  fun free_list_17023 {A_17024} -> (f_17025) -> (__17026) ->
    match __17026 with
    | nilUL_22  => tt_3
    | consUL_23 hd_17027 tl_17028 =>
      let __17029 := ((f_17025) hd_17027) in
      ((free_list_17023) NULL f_17025 tl_17028)
    end

#[program]
def free_listLL_67 :=
  fun free_list_17030 {A_17031} -> (f_17032) -> (__17033) ->
    match __17033 with
    | nilLL_18  => tt_3
    | consLL_19 hd_17034 tl_17035 =>
      let __17036 := ((f_17032) hd_17034) in
      ((free_list_17030) NULL f_17032 tl_17035)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_74 := NULL

#[logical]
def prod0UL_73 := NULL

#[logical]
def prod0LU_72 := NULL

#[logical]
def prod0LL_71 := NULL

#[logical]
def prod1UU_78 := NULL

#[logical]
def prod1UL_77 := NULL

#[logical]
def prod1LU_76 := NULL

#[logical]
def prod1LL_75 := NULL

#[program]
def pow_25 :=
  fun pow_17037 (x_17038) -> (y_17039) ->
    let loop_17040 :=
      fun loop_17041 (acc_17042) -> (y_17043) ->
        match (__lte__ y_17043 0) with
        | true_4  => acc_17042
        | false_5  =>
          ((loop_17041) (__mul__ x_17038 acc_17042) (__sub__ y_17043 1))
        end
    in ((loop_17040) 1 y_17039)

#[program]
def powm_26 :=
  fun powm_17044 (x_17045) -> (y_17046) -> (m_17047) ->
    let loop_17048 :=
      fun loop_17049 (acc_17050) -> (y_17051) ->
        match (__lte__ y_17051 0) with
        | true_4  => acc_17050
        | false_5  =>
          ((loop_17049)
            (__mod__ (__mul__ x_17045 acc_17050) m_17047) (__sub__ y_17051 1))
        end
    in ((loop_17048) 1 y_17046)

#[program]
def ord_27 := fun ord_17052 (c_17053) ->
                (__ord__ c_17053)

#[program]
def chr_28 := fun chr_17054 (i_17055) ->
                (__chr__ i_17055)

#[program]
def str_29 := fun str_17056 (c_17057) ->
                (__push__ "" c_17057)

#[program]
def strlen_30 := fun strlen_17058 (s_17059) ->
                   (__size__ s_17059)

#[program]
def string_of_int_31 :=
  fun string_of_int_17060 (i_17061) ->
    let aux_17062 :=
      fun aux_17063 (i_17064) ->
        match (__lte__ 10 i_17064) with
        | true_4  =>
          let r_17065 := (__mod__ i_17064 10) in
          let i_17066 := (__div__ i_17064 10) in
          (__push__ ((aux_17063) i_17066)
            ((chr_28) (__add__ r_17065 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_17064 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_17061) with
    | true_4  => ((aux_17062) i_17061)
    | false_5  => (__cat__ "~" ((aux_17062) (__neg__ i_17061)))
    end

#[logical]
def DH_32 := NULL

#[logical]
def DH_ch_33 := NULL

#[logical]
def DH_hc_34 := NULL

#[program]
def alice_35 :=
  fun alice_17067 (a_17068) -> (p_17069) -> (g_17070) -> (c_17071) ->
    let* c_17072 := ((send[N,U] c_17071) NULL) in
    let* c_17073 := ((send[R,U] c_17072) ((powm_26) g_17070 a_17068 p_17069))
    in
    let* c_17074 := ((send[N,U] c_17073) NULL) in
    let* _17075 := recv[N,U] c_17074 in
    match _17075 with
    | ex0UL_28 m_17076 n_17077 =>
      let* _17078 := recv[R,U] n_17077 in
      match _17078 with
      | ex1UL_32 m_17079 n_17080 =>
        let* _17081 := recv[N,U] n_17080 in
        match _17081 with
        | ex0UL_28 m_17082 n_17083 =>
          let* __17084 := print (__cat__ ((string_of_int_31) m_17079) "\n")
          in close[true] n_17083
        end
      end
    end

#[program]
def bob_36 :=
  fun bob_17085 (b_17086) -> (p_17087) -> (g_17088) -> (c_17089) ->
    let* _17090 := recv[N,U] c_17089 in
    match _17090 with
    | ex0UL_28 m_17091 n_17092 =>
      let* _17093 := recv[R,U] n_17092 in
      match _17093 with
      | ex1UL_32 m_17094 n_17095 =>
        let* _17096 := recv[N,U] n_17095 in
        match _17096 with
        | ex0UL_28 m_17097 n_17098 =>
          let* c_17099 := ((send[N,U] n_17098) NULL) in
          let* c_17100 :=
            ((send[R,U] c_17099) ((powm_26) g_17088 b_17086 p_17087))
          in
          let* c_17101 := ((send[N,U] c_17100) NULL) in
          let* __17102 := print (__cat__ ((string_of_int_31) m_17094) "\n")
          in close[false] c_17101
        end
      end
    end

#[program]
def key_exchange_37 :=
  fun key_exchange_17103 (__17104) ->
    let p_17105 := 23 in
    let g_17106 := 5 in
    let* c_17107 :=
      fork fun _17108 (_17109) -o
             ((alice_35) 4 p_17105 g_17106 _17109)
    in
    let* c0_17110 :=
      fork
        fun _17111 (_17112) -o
          let* _17113 := recv[R,L] _17112 in
          match _17113 with
          | ex1LL_30 m_17114 n_17115 =>
            let* __17116 := close[true] n_17115 in
            ((bob_36) 3 p_17105 g_17106 m_17114)
          end
    in
    let* c0_17117 := ((send[R,L] c0_17110) c_17107) in close[false] c0_17117

#[program]
def main := ((key_exchange_37) tt_3)

trans12 success

-----------------------------------------

#[program]
def idU_40 := fun id_17346 (A_17347) -> (m_17348) ->
                m_17348

#[program]
def idL_39 := fun id_17349 (A_17350) -> (m_17351) ->
                m_17351

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_44 :=
  fun rwl_17352 {A_17353} -> {m_17354} -> {n_17355} -> {B_17356} ->
  {__17357} -> (__17358) ->
    __17358

#[program]
def rwlUL_43 :=
  fun rwl_17359 {A_17360} -> {m_17361} -> {n_17362} -> {B_17363} ->
  {__17364} -> (__17365) ->
    __17365

#[program]
def rwlLU_42 :=
  fun rwl_17366 {A_17367} -> {m_17368} -> {n_17369} -> {B_17370} ->
  {__17371} -> (__17372) ->
    __17372

#[program]
def rwlLL_41 :=
  fun rwl_17373 {A_17374} -> {m_17375} -> {n_17376} -> {B_17377} ->
  {__17378} -> (__17379) ->
    __17379

#[program]
def rwrUU_48 :=
  fun rwr_17380 {A_17381} -> {m_17382} -> {n_17383} -> {B_17384} ->
  {__17385} -> (__17386) ->
    __17386

#[program]
def rwrUL_47 :=
  fun rwr_17387 {A_17388} -> {m_17389} -> {n_17390} -> {B_17391} ->
  {__17392} -> (__17393) ->
    __17393

#[program]
def rwrLU_46 :=
  fun rwr_17394 {A_17395} -> {m_17396} -> {n_17397} -> {B_17398} ->
  {__17399} -> (__17400) ->
    __17400

#[program]
def rwrLL_45 :=
  fun rwr_17401 {A_17402} -> {m_17403} -> {n_17404} -> {B_17405} ->
  {__17406} -> (__17407) ->
    __17407

#[logical]
def congrUUU_56 := NULL

#[logical]
def congrUUL_55 := NULL

#[logical]
def congrULU_54 := NULL

#[logical]
def congrULL_53 := NULL

#[logical]
def congrLUU_52 := NULL

#[logical]
def congrLUL_51 := NULL

#[logical]
def congrLLU_50 := NULL

#[logical]
def congrLLL_49 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_58 := NULL

#[logical]
def ssingL_57 := NULL

#[program]
def sing_elimUU_62 :=
  fun sing_elim_17408 {A_17409} -> {x_17410} -> (__17411) ->
    match __17411 with
    | justUU_17 m_17412 => m_17412
    end

#[program]
def sing_elimUL_61 :=
  fun sing_elim_17413 {A_17414} -> {x_17415} -> (__17416) ->
    match __17416 with
    | justUL_16 m_17417 => m_17417
    end

#[program]
def sing_elimLU_60 :=
  fun sing_elim_17418 {A_17419} -> {x_17420} -> (__17421) ->
    !!

#[program]
def sing_elimLL_59 :=
  fun sing_elim_17422 {A_17423} -> {x_17424} -> (__17425) ->
    match __17425 with
    | justLL_14 m_17426 => m_17426
    end

#[logical]
def sing_uniqUU_66 := NULL

#[logical]
def sing_uniqUL_65 := NULL

#[logical]
def sing_uniqLU_64 := NULL

#[logical]
def sing_uniqLL_63 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_17427 (__17428) ->
    match __17428 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_17429 (__17430) -> (__17431) ->
    match __17430 with
    | true_4  =>
      match __17431 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_17432 (__17433) -> (__17434) ->
    match __17433 with
    | true_4  => true_4
    | false_5  =>
      match __17434 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_17435 (__17436) -> (__17437) -o
    match __17436 with
    | true_4  =>
      match __17437 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __17437 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_17438 (__17439) -> (__17440) ->
    match __17439 with
    | zero_6  => true_4
    | succ_7 n_17441 =>
      match __17440 with
      | zero_6  => false_5 | succ_7 n_17442 => ((lte_17438) n_17441 n_17442)
      end
    end

#[program]
def lt_15 :=
  fun lt_17443 (x_17444) -> (y_17445) ->
    ((lte_14) (succ_7 x_17444) y_17445)

#[program]
def pred_16 :=
  fun pred_17446 (__17447) ->
    match __17447 with
    | zero_6  => zero_6 | succ_7 n_17448 => n_17448
    end

#[program]
def add_17 :=
  fun add_17449 (__17450) -> (__17451) ->
    match __17450 with
    | zero_6  => __17451
    | succ_7 n_17452 => (succ_7 ((add_17449) n_17452 __17451))
    end

#[program]
def sub_18 :=
  fun sub_17453 (__17454) -> (__17455) ->
    match __17455 with
    | zero_6  => __17454
    | succ_7 n_17456 => ((sub_17453) ((pred_16) __17454) n_17456)
    end

#[program]
def mul_19 :=
  fun mul_17457 (__17458) -> (__17459) ->
    match __17458 with
    | zero_6  => zero_6
    | succ_7 n_17460 => ((add_17) __17459 ((mul_17457) n_17460 __17459))
    end

#[program]
def div_20 :=
  fun div_17461 (x_17462) -> (y_17463) ->
    match ((lt_15) x_17462 y_17463) with
    | true_4  => zero_6
    | false_5  =>
      let loop_17464 :=
        fun loop_17465 (x_17466) -> (y_17467) ->
          match ((sub_18) x_17466 ((pred_16) y_17467)) with
          | zero_6  => zero_6
          | succ_7 n_17468 => (succ_7 ((loop_17465) n_17468 y_17467))
          end
      in ((loop_17464) x_17462 y_17463)
    end

#[program]
def rem_21 :=
  fun rem_17469 (x_17470) -> (y_17471) ->
    ((sub_18) x_17470 ((mul_19) ((div_20) x_17470 y_17471) y_17471))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_70 :=
  fun free_list_17472 {A_17473} -> (f_17474) -> (__17475) ->
    match __17475 with
    | nilUU_24  => tt_3
    | consUU_25 hd_17476 tl_17477 =>
      let __17478 := ((f_17474) hd_17476) in
      ((free_list_17472) NULL f_17474 tl_17477)
    end

#[program]
def free_listUL_69 :=
  fun free_list_17479 {A_17480} -> (f_17481) -> (__17482) ->
    match __17482 with
    | nilUL_22  => tt_3
    | consUL_23 hd_17483 tl_17484 =>
      let __17485 := ((f_17481) hd_17483) in
      ((free_list_17479) NULL f_17481 tl_17484)
    end

#[program]
def free_listLL_67 :=
  fun free_list_17486 {A_17487} -> (f_17488) -> (__17489) ->
    match __17489 with
    | nilLL_18  => tt_3
    | consLL_19 hd_17490 tl_17491 =>
      let __17492 := ((f_17488) hd_17490) in
      ((free_list_17486) NULL f_17488 tl_17491)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_74 := NULL

#[logical]
def prod0UL_73 := NULL

#[logical]
def prod0LU_72 := NULL

#[logical]
def prod0LL_71 := NULL

#[logical]
def prod1UU_78 := NULL

#[logical]
def prod1UL_77 := NULL

#[logical]
def prod1LU_76 := NULL

#[logical]
def prod1LL_75 := NULL

#[program]
def pow_25 :=
  fun pow_17493 (x_17494) -> (y_17495) ->
    let loop_17496 :=
      fun loop_17497 (acc_17498) -> (y_17499) ->
        match (__lte__ y_17499 0) with
        | true_4  => acc_17498
        | false_5  =>
          ((loop_17497) (__mul__ x_17494 acc_17498) (__sub__ y_17499 1))
        end
    in ((loop_17496) 1 y_17495)

#[program]
def powm_26 :=
  fun powm_17500 (x_17501) -> (y_17502) -> (m_17503) ->
    let loop_17504 :=
      fun loop_17505 (acc_17506) -> (y_17507) ->
        match (__lte__ y_17507 0) with
        | true_4  => acc_17506
        | false_5  =>
          ((loop_17505)
            (__mod__ (__mul__ x_17501 acc_17506) m_17503) (__sub__ y_17507 1))
        end
    in ((loop_17504) 1 y_17502)

#[program]
def ord_27 := fun ord_17508 (c_17509) ->
                (__ord__ c_17509)

#[program]
def chr_28 := fun chr_17510 (i_17511) ->
                (__chr__ i_17511)

#[program]
def str_29 := fun str_17512 (c_17513) ->
                (__push__ "" c_17513)

#[program]
def strlen_30 := fun strlen_17514 (s_17515) ->
                   (__size__ s_17515)

#[program]
def string_of_int_31 :=
  fun string_of_int_17516 (i_17517) ->
    let aux_17518 :=
      fun aux_17519 (i_17520) ->
        match (__lte__ 10 i_17520) with
        | true_4  =>
          let r_17521 := (__mod__ i_17520 10) in
          let i_17522 := (__div__ i_17520 10) in
          (__push__ ((aux_17519) i_17522)
            ((chr_28) (__add__ r_17521 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_17520 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_17517) with
    | true_4  => ((aux_17518) i_17517)
    | false_5  => (__cat__ "~" ((aux_17518) (__neg__ i_17517)))
    end

#[logical]
def DH_32 := NULL

#[logical]
def DH_ch_33 := NULL

#[logical]
def DH_hc_34 := NULL

#[program]
def alice_35 :=
  fun alice_17523 (a_17524) -> (p_17525) -> (g_17526) -> (c_17527) ->
    let* c_17528 := ((send[N,U] c_17527) NULL) in
    let* c_17529 := ((send[R,U] c_17528) ((powm_26) g_17526 a_17524 p_17525))
    in
    let* c_17530 := ((send[N,U] c_17529) NULL) in
    let* _17531 := recv[N,U] c_17530 in
    match _17531 with
    | ex0UL_28 m_17532 n_17533 =>
      let* _17534 := recv[R,U] n_17533 in
      match _17534 with
      | ex1UL_32 m_17535 n_17536 =>
        let* _17537 := recv[N,U] n_17536 in
        match _17537 with
        | ex0UL_28 m_17538 n_17539 =>
          let* __17540 := print (__cat__ ((string_of_int_31) m_17535) "\n")
          in close[true] n_17539
        end
      end
    end

#[program]
def bob_36 :=
  fun bob_17541 (b_17542) -> (p_17543) -> (g_17544) -> (c_17545) ->
    let* _17546 := recv[N,U] c_17545 in
    match _17546 with
    | ex0UL_28 m_17547 n_17548 =>
      let* _17549 := recv[R,U] n_17548 in
      match _17549 with
      | ex1UL_32 m_17550 n_17551 =>
        let* _17552 := recv[N,U] n_17551 in
        match _17552 with
        | ex0UL_28 m_17553 n_17554 =>
          let* c_17555 := ((send[N,U] n_17554) NULL) in
          let* c_17556 :=
            ((send[R,U] c_17555) ((powm_26) g_17544 b_17542 p_17543))
          in
          let* c_17557 := ((send[N,U] c_17556) NULL) in
          let* __17558 := print (__cat__ ((string_of_int_31) m_17550) "\n")
          in close[false] c_17557
        end
      end
    end

#[program]
def key_exchange_37 :=
  fun key_exchange_17559 (__17560) ->
    let p_17561 := 23 in
    let g_17562 := 5 in
    let* c_17563 :=
      fork fun _17564 (_17565) -o
             ((alice_35) 4 p_17561 g_17562 _17565)
    in
    let* c0_17566 :=
      fork
        fun _17567 (_17568) -o
          let* _17569 := recv[R,L] _17568 in
          match _17569 with
          | ex1LL_30 m_17570 n_17571 =>
            let* __17572 := close[true] n_17571 in
            ((bob_36) 3 p_17561 g_17562 m_17570)
          end
    in
    let* c0_17573 := ((send[R,L] c0_17566) c_17563) in close[false] c0_17573

#[program]
def main := ((key_exchange_37) tt_3)

trans2e success

-----------------------------------------

def idU_40 := fun id_17828 (A_17829) -> (m_17830) -> m_17830

def idL_39 := fun id_17831 (A_17832) -> (m_17833) -> m_17833

def rwlUU_44 :=
  fun rwl_17834 (A_17835) -> (m_17836) -> (n_17837) -> (B_17838) ->
  (__17839) -> (__17840) -> __17840

def rwlUL_43 :=
  fun rwl_17841 (A_17842) -> (m_17843) -> (n_17844) -> (B_17845) ->
  (__17846) -> (__17847) -> __17847

def rwlLU_42 :=
  fun rwl_17848 (A_17849) -> (m_17850) -> (n_17851) -> (B_17852) ->
  (__17853) -> (__17854) -> __17854

def rwlLL_41 :=
  fun rwl_17855 (A_17856) -> (m_17857) -> (n_17858) -> (B_17859) ->
  (__17860) -> (__17861) -> __17861

def rwrUU_48 :=
  fun rwr_17862 (A_17863) -> (m_17864) -> (n_17865) -> (B_17866) ->
  (__17867) -> (__17868) -> __17868

def rwrUL_47 :=
  fun rwr_17869 (A_17870) -> (m_17871) -> (n_17872) -> (B_17873) ->
  (__17874) -> (__17875) -> __17875

def rwrLU_46 :=
  fun rwr_17876 (A_17877) -> (m_17878) -> (n_17879) -> (B_17880) ->
  (__17881) -> (__17882) -> __17882

def rwrLL_45 :=
  fun rwr_17883 (A_17884) -> (m_17885) -> (n_17886) -> (B_17887) ->
  (__17888) -> (__17889) -> __17889

def sing_elimUU_62 :=
  fun sing_elim_17890 (A_17891) -> (x_17892) -> (__17893) -> __17893

def sing_elimUL_61 :=
  fun sing_elim_17894 (A_17895) -> (x_17896) -> (__17897) -> __17897

def sing_elimLU_60 :=
  fun sing_elim_17898 (A_17899) -> (x_17900) -> (__17901) -> !!

def sing_elimLL_59 :=
  fun sing_elim_17902 (A_17903) -> (x_17904) -> (__17905) -> __17905

def not_10 :=
  fun not_17906 (__17907) ->
    match __17907 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_17908 (__17909) -> (__17910) ->
    match __17909 with
    | true_4 =>
      match __17910 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_17911 (__17912) -> (__17913) ->
    match __17912 with
    | true_4 => true_4
    | false_5 =>
      match __17913 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_17914 (__17915) -> (__17916) -o
    match __17915 with
    | true_4 =>
      match __17916 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __17916 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_17917 (__17918) -> (__17919) ->
    match __17918 with
    | zero_6  => true_4
    | succ_7 n_17920 =>
      match __17919 with
      | zero_6  => false_5 | succ_7 n_17921 => ((lte_17917) n_17920 n_17921)
      end
    end

def lt_15 :=
  fun lt_17922 (x_17923) -> (y_17924) -> ((lte_14) (succ_7 x_17923) y_17924)

def pred_16 :=
  fun pred_17925 (__17926) ->
    match __17926 with
    | zero_6  => (zero_6 ) | succ_7 n_17927 => n_17927
    end

def add_17 :=
  fun add_17928 (__17929) -> (__17930) ->
    match __17929 with
    | zero_6  => __17930
    | succ_7 n_17931 => (succ_7 ((add_17928) n_17931 __17930))
    end

def sub_18 :=
  fun sub_17932 (__17933) -> (__17934) ->
    match __17934 with
    | zero_6  => __17933
    | succ_7 n_17935 => ((sub_17932) ((pred_16) __17933) n_17935)
    end

def mul_19 :=
  fun mul_17936 (__17937) -> (__17938) ->
    match __17937 with
    | zero_6  => (zero_6 )
    | succ_7 n_17939 => ((add_17) __17938 ((mul_17936) n_17939 __17938))
    end

def div_20 :=
  fun div_17940 (x_17941) -> (y_17942) ->
    match ((lt_15) x_17941 y_17942) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_17943 :=
        fun loop_17944 (x_17945) -> (y_17946) ->
          match ((sub_18) x_17945 ((pred_16) y_17946)) with
          | zero_6  => (zero_6 )
          | succ_7 n_17947 => (succ_7 ((loop_17944) n_17947 y_17946))
          end
      in ((loop_17943) x_17941 y_17942)
    end

def rem_21 :=
  fun rem_17948 (x_17949) -> (y_17950) ->
    ((sub_18) x_17949 ((mul_19) ((div_20) x_17949 y_17950) y_17950))

def free_listUU_70 :=
  fun free_list_17951 (A_17952) -> (f_17953) -> (__17954) ->
    match __17954 with
    | nilUU_24  => tt_3
    | consUU_25 hd_17955 tl_17956 =>
      let __17957 := ((f_17953) hd_17955) in
      ((free_list_17951) NULL f_17953 tl_17956)
    end

def free_listUL_69 :=
  fun free_list_17958 (A_17959) -> (f_17960) -> (__17961) ->
    match __17961 with
    | nilUL_22  => tt_3
    | consUL_23 hd_17962 tl_17963 =>
      let __17964 := ((f_17960) hd_17962) in
      ((free_list_17958) NULL f_17960 tl_17963)
    end

def free_listLL_67 :=
  fun free_list_17965 (A_17966) -> (f_17967) -> (__17968) ->
    match __17968 with
    | nilLL_18  => tt_3
    | consLL_19 hd_17969 tl_17970 =>
      let __17971 := ((f_17967) hd_17969) in
      ((free_list_17965) NULL f_17967 tl_17970)
    end

def pow_25 :=
  fun pow_17972 (x_17973) -> (y_17974) ->
    let loop_17975 :=
      fun loop_17976 (acc_17977) -> (y_17978) ->
        match (__lte__ y_17978 0) with
        | true_4 => acc_17977
        | false_5 =>
          ((loop_17976) (__mul__ x_17973 acc_17977) (__sub__ y_17978 1))
        end
    in ((loop_17975) 1 y_17974)

def powm_26 :=
  fun powm_17979 (x_17980) -> (y_17981) -> (m_17982) ->
    let loop_17983 :=
      fun loop_17984 (acc_17985) -> (y_17986) ->
        match (__lte__ y_17986 0) with
        | true_4 => acc_17985
        | false_5 =>
          ((loop_17984)
            (__mod__ (__mul__ x_17980 acc_17985) m_17982) (__sub__ y_17986 1))
        end
    in ((loop_17983) 1 y_17981)

def ord_27 := fun ord_17987 (c_17988) -> (__ord__ c_17988)

def chr_28 := fun chr_17989 (i_17990) -> (__chr__ i_17990)

def str_29 := fun str_17991 (c_17992) -> (__push__ "" c_17992)

def strlen_30 := fun strlen_17993 (s_17994) -> (__size__ s_17994)

def string_of_int_31 :=
  fun string_of_int_17995 (i_17996) ->
    let aux_17997 :=
      fun aux_17998 (i_17999) ->
        match (__lte__ 10 i_17999) with
        | true_4 =>
          let r_18000 := (__mod__ i_17999 10) in
          let i_18001 := (__div__ i_17999 10) in
          (__push__ ((aux_17998) i_18001)
            ((chr_28) (__add__ r_18000 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_17999 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_17996) with
    | true_4 => ((aux_17997) i_17996)
    | false_5 => (__cat__ "~" ((aux_17997) (__neg__ i_17996)))
    end

def alice_35 :=
  fun alice_18002 (a_18003) -> (p_18004) -> (g_18005) -> (c_18006) ->
    lazy(let c_18007 := force(((lam (x_18008) -> lazy(c_18006)) NULL)) in
         let c_18009 :=
           force(((lam (x_18010) -> lazy(send(c_18007, x_18010)))
                   ((powm_26) g_18005 a_18003 p_18004)))
         in
         let c_18011 := force(((lam (x_18012) -> lazy(c_18009)) NULL)) in
         let _18013 := force(lazy(c_18011)) in
         force(lazy(let _18014 := force(lazy(recv[U](_18013))) in
                    force(match _18014 with
                          | ex1UL_32 m_18015 n_18016 =>
                            lazy(let _18017 := force(lazy(n_18016)) in
                                 force(lazy(let __18018 :=
                                              force(lazy(print
                                                           (__cat__
                                                             ((string_of_int_31)
                                                               m_18015)
                                                             "\n")))
                                            in
                                            force(lazy(close[true] _18017)))))
                          end))))

def bob_36 :=
  fun bob_18019 (b_18020) -> (p_18021) -> (g_18022) -> (c_18023) ->
    lazy(let _18024 := force(lazy(c_18023)) in
         force(lazy(let _18025 := force(lazy(recv[U](_18024))) in
                    force(match _18025 with
                          | ex1UL_32 m_18026 n_18027 =>
                            lazy(let _18028 := force(lazy(n_18027)) in
                                 force(lazy(let c_18029 :=
                                              force(((lam (x_18030) ->
                                                        lazy(_18028))
                                                      NULL))
                                            in
                                            let c_18031 :=
                                              force(((lam (x_18032) ->
                                                        lazy(send(c_18029, x_18032)))
                                                      ((powm_26)
                                                        g_18022 b_18020
                                                          p_18021)))
                                            in
                                            let c_18033 :=
                                              force(((lam (x_18034) ->
                                                        lazy(c_18031))
                                                      NULL))
                                            in
                                            let __18035 :=
                                              force(lazy(print
                                                           (__cat__
                                                             ((string_of_int_31)
                                                               m_18026)
                                                             "\n")))
                                            in
                                            force(lazy(close[false] c_18033)))))
                          end))))

def key_exchange_37 :=
  fun key_exchange_18036 (__18037) ->
    let p_18038 := 23 in
    let g_18039 := 5 in
    lazy(let c_18040 :=
           force(lazy(fork
                        fun _18041 (_18042) -o
                          ((alice_35) 4 p_18038 g_18039 _18042)))
         in
         let c0_18043 :=
           force(lazy(fork
                        fun _18044 (_18045) -o
                          lazy(let _18046 := force(lazy(recv[L](_18045))) in
                               force(match _18046 with
                                     | ex1LL_30 m_18047 n_18048 =>
                                       lazy(let __18049 :=
                                              force(lazy(close[true] n_18048))
                                            in
                                            force(((bob_36)
                                                    3 p_18038 g_18039 m_18047)))
                                     end))))
         in
         let c0_18050 :=
           force(((lam (x_18051) -> lazy(send(c0_18043, x_18051))) c_18040))
         in force(lazy(close[false] c0_18050)))

def main := ((key_exchange_37) tt_3)

trans23 success

-----------------------------------------

def idU_40 := lam (A_18317) -> (m_18318) -> m_18318

def idL_39 := lam (A_18319) -> (m_18320) -> m_18320

def rwlUU_44 :=
  lam (A_18321) -> (m_18322) -> (n_18323) -> (B_18324) -> (__18325) ->
  (__18326) -> __18326

def rwlUL_43 :=
  lam (A_18327) -> (m_18328) -> (n_18329) -> (B_18330) -> (__18331) ->
  (__18332) -> __18332

def rwlLU_42 :=
  lam (A_18333) -> (m_18334) -> (n_18335) -> (B_18336) -> (__18337) ->
  (__18338) -> __18338

def rwlLL_41 :=
  lam (A_18339) -> (m_18340) -> (n_18341) -> (B_18342) -> (__18343) ->
  (__18344) -> __18344

def rwrUU_48 :=
  lam (A_18345) -> (m_18346) -> (n_18347) -> (B_18348) -> (__18349) ->
  (__18350) -> __18350

def rwrUL_47 :=
  lam (A_18351) -> (m_18352) -> (n_18353) -> (B_18354) -> (__18355) ->
  (__18356) -> __18356

def rwrLU_46 :=
  lam (A_18357) -> (m_18358) -> (n_18359) -> (B_18360) -> (__18361) ->
  (__18362) -> __18362

def rwrLL_45 :=
  lam (A_18363) -> (m_18364) -> (n_18365) -> (B_18366) -> (__18367) ->
  (__18368) -> __18368

def sing_elimUU_62 := lam (A_18369) -> (x_18370) -> (__18371) -> __18371

def sing_elimUL_61 := lam (A_18372) -> (x_18373) -> (__18374) -> __18374

def sing_elimLU_60 := lam (A_18375) -> (x_18376) -> (__18377) -> !!

def sing_elimLL_59 := lam (A_18378) -> (x_18379) -> (__18380) -> __18380

def not_10 :=
  lam (__18381) ->
    match __18381 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__18382) -> (__18383) ->
    match __18382 with
    | true_4 =>
      match __18383 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__18384) -> (__18385) ->
    match __18384 with
    | true_4 => true_4
    | false_5 =>
      match __18385 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__18386) -> (__18387) -o
    match __18386 with
    | true_4 =>
      match __18387 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __18387 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_18388 (__18389) -> (__18390) ->
    match __18389 with
    | zero_6  => true_4
    | succ_7 n_18391 =>
      match __18390 with
      | zero_6  => false_5 | succ_7 n_18392 => ((lte_18388) n_18391 n_18392)
      end
    end

def lt_15 :=
  lam (x_18393) -> (y_18394) -> ((lte_14) (succ_7 x_18393) y_18394)

def pred_16 :=
  lam (__18395) ->
    match __18395 with
    | zero_6  => (zero_6 ) | succ_7 n_18396 => n_18396
    end

def add_17 :=
  fun add_18397 (__18398) -> (__18399) ->
    match __18398 with
    | zero_6  => __18399
    | succ_7 n_18400 => (succ_7 ((add_18397) n_18400 __18399))
    end

def sub_18 :=
  fun sub_18401 (__18402) -> (__18403) ->
    match __18403 with
    | zero_6  => __18402
    | succ_7 n_18404 => ((sub_18401) ((pred_16) __18402) n_18404)
    end

def mul_19 :=
  fun mul_18405 (__18406) -> (__18407) ->
    match __18406 with
    | zero_6  => (zero_6 )
    | succ_7 n_18408 => ((add_17) __18407 ((mul_18405) n_18408 __18407))
    end

def div_20 :=
  lam (x_18409) -> (y_18410) ->
    match ((lt_15) x_18409 y_18410) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_18411 :=
        fun loop_18412 (x_18413) -> (y_18414) ->
          match ((sub_18) x_18413 ((pred_16) y_18414)) with
          | zero_6  => (zero_6 )
          | succ_7 n_18415 => (succ_7 ((loop_18412) n_18415 y_18414))
          end
      in ((loop_18411) x_18409 y_18410)
    end

def rem_21 :=
  lam (x_18416) -> (y_18417) ->
    ((sub_18) x_18416 ((mul_19) ((div_20) x_18416 y_18417) y_18417))

def free_listUU_70 :=
  fun free_list_18418 (A_18419) -> (f_18420) -> (__18421) ->
    match __18421 with
    | nilUU_24  => tt_3
    | consUU_25 hd_18422 tl_18423 =>
      let __18424 := ((f_18420) hd_18422) in
      ((free_list_18418) NULL f_18420 tl_18423)
    end

def free_listUL_69 :=
  fun free_list_18425 (A_18426) -> (f_18427) -> (__18428) ->
    match __18428 with
    | nilUL_22  => tt_3
    | consUL_23 hd_18429 tl_18430 =>
      let __18431 := ((f_18427) hd_18429) in
      ((free_list_18425) NULL f_18427 tl_18430)
    end

def free_listLL_67 :=
  fun free_list_18432 (A_18433) -> (f_18434) -> (__18435) ->
    match __18435 with
    | nilLL_18  => tt_3
    | consLL_19 hd_18436 tl_18437 =>
      let __18438 := ((f_18434) hd_18436) in
      ((free_list_18432) NULL f_18434 tl_18437)
    end

def pow_25 :=
  lam (x_18439) -> (y_18440) ->
    let loop_18441 :=
      fun loop_18442 (acc_18443) -> (y_18444) ->
        match (__lte__ y_18444 0) with
        | true_4 => acc_18443
        | false_5 =>
          ((loop_18442) (__mul__ x_18439 acc_18443) (__sub__ y_18444 1))
        end
    in ((loop_18441) 1 y_18440)

def powm_26 :=
  lam (x_18445) -> (y_18446) -> (m_18447) ->
    let loop_18448 :=
      fun loop_18449 (acc_18450) -> (y_18451) ->
        match (__lte__ y_18451 0) with
        | true_4 => acc_18450
        | false_5 =>
          ((loop_18449)
            (__mod__ (__mul__ x_18445 acc_18450) m_18447) (__sub__ y_18451 1))
        end
    in ((loop_18448) 1 y_18446)

def ord_27 := lam (c_18452) -> (__ord__ c_18452)

def chr_28 := lam (i_18453) -> (__chr__ i_18453)

def str_29 := lam (c_18454) -> (__push__ "" c_18454)

def strlen_30 := lam (s_18455) -> (__size__ s_18455)

def string_of_int_31 :=
  lam (i_18456) ->
    let aux_18457 :=
      fun aux_18458 (i_18459) ->
        match (__lte__ 10 i_18459) with
        | true_4 =>
          let r_18460 := (__mod__ i_18459 10) in
          let i_18461 := (__div__ i_18459 10) in
          (__push__ ((aux_18458) i_18461)
            ((chr_28) (__add__ r_18460 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_18459 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_18456) with
    | true_4 => ((aux_18457) i_18456)
    | false_5 => (__cat__ "~" ((aux_18457) (__neg__ i_18456)))
    end

def alice_35 :=
  lam (a_18462) -> (p_18463) -> (g_18464) -> (c_18465) ->
    lazy(let c_18466 := send(c_18465, ((powm_26) g_18464 a_18462 p_18463)) in
         let _18467 := recv[U](c_18466) in
         match _18467 with
         | ex1UL_32 m_18468 n_18469 =>
           let __18470 := print (__cat__ ((string_of_int_31) m_18468) "\n")
           in close[true] n_18469
         end)

def bob_36 :=
  lam (b_18471) -> (p_18472) -> (g_18473) -> (c_18474) ->
    lazy(let _18475 := recv[U](c_18474) in
         match _18475 with
         | ex1UL_32 m_18476 n_18477 =>
           let c_18478 := send(n_18477, ((powm_26) g_18473 b_18471 p_18472))
           in
           let __18479 := print (__cat__ ((string_of_int_31) m_18476) "\n")
           in close[false] c_18478
         end)

def key_exchange_37 :=
  lam (__18480) ->
    let p_18481 := 23 in
    let g_18482 := 5 in
    lazy(let c_18483 :=
           fork lam (_18484) -o ((alice_35) 4 p_18481 g_18482 _18484)
         in
         let c0_18485 :=
           fork
             lam (_18486) -o
               lazy(let _18487 := recv[L](_18486) in
                    match _18487 with
                    | ex1LL_30 m_18488 n_18489 =>
                      let __18490 := close[true] n_18489 in
                      force(((bob_36) 3 p_18481 g_18482 m_18488))
                    end)
         in let c0_18491 := send(c0_18485, c_18483) in close[false] c0_18491)

def main := ((key_exchange_37) tt_3)

trans3e success

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn alice_264(a_265%U, p_266%U, g_267%U, c_268%U) {
  x_269 :=
    lazy {
      x_272 := powm_207(g_267, a_265, p_266);
      x_271 := send(c_268, x_272);
      c_270 := x_271;
      x_274 := recv[U](c_270);
      _273 := x_274;
      match[L](_273){
        ex1UL_32(m_276, n_277) => {
          x_281 := string_of_int_236(m_276);
          x_282 := str("\n");
          x_280 := cat(x_281, x_282);
          x_279 := print(x_280);
          __278 := x_279;
          x_283 := close[true](n_277);
          x_275 := x_283;
        }
      }
      return x_275;
    };
  return x_269;
}

fn bob_284(b_285%U, p_286%U, g_287%U, c_288%U) {
  x_289 :=
    lazy {
      x_291 := recv[U](c_288);
      _290 := x_291;
      match[L](_290){
        ex1UL_32(m_293, n_294) => {
          x_297 := powm_207(g_287, b_285, p_286);
          x_296 := send(n_294, x_297);
          c_295 := x_296;
          x_301 := string_of_int_236(m_293);
          x_302 := str("\n");
          x_300 := cat(x_301, x_302);
          x_299 := print(x_300);
          __298 := x_299;
          x_303 := close[false](c_295);
          x_292 := x_303;
        }
      }
      return x_292;
    };
  return x_289;
}

fn key_exchange_304(__305%U) {
  p_306 := 23;
  g_307 := 5;
  x_308 :=
    lazy {
      x_311 :=
        fn lam_312(_313%L) {
          x_314 := alice_264(4, p_306, g_307, _313);
          return x_314;
        };
      x_310 := fork(x_311);
      c_309 := x_310;
      x_317 :=
        fn lam_318(_319%L) {
          x_320 :=
            lazy {
              x_322 := recv[L](_319);
              _321 := x_322;
              match[L](_321){
                ex1LL_30(m_324, n_325) => {
                  x_327 := close[true](n_325);
                  __326 := x_327;
                  x_329 := bob_284(3, p_306, g_307, m_324);
                  x_328 := force(x_329);
                  x_323 := x_328;
                }
              }
              return x_323;
            };
          return x_320;
        };
      x_316 := fork(x_317);
      c0_315 := x_316;
      x_331 := send(c0_315, c_309);
      c0_330 := x_331;
      x_332 := close[false](c0_330);
      return x_332;
    };
  return x_308;
}

main := {
  x_333 := key_exchange_304(tt_3);
  return x_333;
};

trans34 success

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn alice_264(a_265%U, p_266%U, g_267%U, c_268%U) {
  x_269 :=
    lazy {
      x_272 := powm_207(g_267, a_265, p_266);
      x_271 := send(c_268, x_272);
      c_270 := x_271;
      x_274 := recv[U](c_270);
      _273 := x_274;
      match[L](_273){
        ex1UL_32(m_276, n_277) => {
          x_281 := string_of_int_236(m_276);
          x_282 := str("\n");
          x_280 := cat(x_281, x_282);
          x_279 := print(x_280);
          __278 := x_279;
          x_283 := close[true](n_277);
          x_275 := x_283;
          free(_273);
        }
      }
      return x_275;
    };
  return x_269;
}

fn bob_284(b_285%U, p_286%U, g_287%U, c_288%U) {
  x_289 :=
    lazy {
      x_291 := recv[U](c_288);
      _290 := x_291;
      match[L](_290){
        ex1UL_32(m_293, n_294) => {
          x_297 := powm_207(g_287, b_285, p_286);
          x_296 := send(n_294, x_297);
          c_295 := x_296;
          x_301 := string_of_int_236(m_293);
          x_302 := str("\n");
          x_300 := cat(x_301, x_302);
          x_299 := print(x_300);
          __298 := x_299;
          x_303 := close[false](c_295);
          x_292 := x_303;
          free(_290);
        }
      }
      return x_292;
    };
  return x_289;
}

fn key_exchange_304(__305%U) {
  p_306 := 23;
  g_307 := 5;
  x_308 :=
    lazy {
      x_311 :=
        fn lam_312(_313%L) {
          x_314 := alice_264(4, p_306, g_307, _313);
          return x_314;
        };
      x_310 := fork(x_311);
      c_309 := x_310;
      x_317 :=
        fn lam_318(_319%L) {
          x_320 :=
            lazy {
              x_322 := recv[L](_319);
              _321 := x_322;
              match[L](_321){
                ex1LL_30(m_324, n_325) => {
                  x_327 := close[true](n_325);
                  __326 := x_327;
                  x_329 := bob_284(3, p_306, g_307, m_324);
                  x_328 := force(x_329);
                  x_323 := x_328;
                  free(_321);
                }
              }
              return x_323;
            };
          return x_320;
        };
      x_316 := fork(x_317);
      c0_315 := x_316;
      x_331 := send(c0_315, c_309);
      c0_330 := x_331;
      x_332 := close[false](c0_330);
      return x_332;
    };
  return x_308;
}

main := {
  x_333 := key_exchange_304(tt_3);
  return x_333;
};

trans4e success

-----------------------------------------

fn fn0_idU_334(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_335(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_336 := fn0_idU_334(A_2, m_3);
  return x_336;
}

fn fn0_idL_337(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_338(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_339 := fn0_idL_337(A_5, m_6);
  return x_339;
}

fn fn0_rwlUU_340(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_341(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_342 := fn0_rwlUU_340(A_8, m_9, n_10, B_11, __12, __13);
  return x_342;
}

fn fn0_rwlUL_343(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_344(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_345 := fn0_rwlUL_343(A_15, m_16, n_17, B_18, __19, __20);
  return x_345;
}

fn fn0_rwlLU_346(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_347(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_348 := fn0_rwlLU_346(A_22, m_23, n_24, B_25, __26, __27);
  return x_348;
}

fn fn0_rwlLL_349(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_350(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_351 := fn0_rwlLL_349(A_29, m_30, n_31, B_32, __33, __34);
  return x_351;
}

fn fn0_rwrUU_352(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_353(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_354 := fn0_rwrUU_352(A_36, m_37, n_38, B_39, __40, __41);
  return x_354;
}

fn fn0_rwrUL_355(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_356(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_357 := fn0_rwrUL_355(A_43, m_44, n_45, B_46, __47, __48);
  return x_357;
}

fn fn0_rwrLU_358(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_359(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_360 := fn0_rwrLU_358(A_50, m_51, n_52, B_53, __54, __55);
  return x_360;
}

fn fn0_rwrLL_361(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_362(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_363 := fn0_rwrLL_361(A_57, m_58, n_59, B_60, __61, __62);
  return x_363;
}

fn fn0_sing_elimUU_364(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_365(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_366 := fn0_sing_elimUU_364(A_64, x_65, __66);
  return x_366;
}

fn fn0_sing_elimUL_367(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_368(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_369 := fn0_sing_elimUL_367(A_68, x_69, __70);
  return x_369;
}

fn fn0_sing_elimLU_370(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_371(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_372 := fn0_sing_elimLU_370(A_72, x_73, __74);
  return x_372;
}

fn fn0_sing_elimLL_373(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_374(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_375 := fn0_sing_elimLL_373(A_76, x_77, __78);
  return x_375;
}

fn fn0_not_376(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_377(env) {
  __80 := env[1];
  x_378 := fn0_not_376(__80);
  return x_378;
}

fn fn0_and_379(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_380(env) {
  __83 := env[1];
  __84 := env[2];
  x_381 := fn0_and_379(__83, __84);
  return x_381;
}

fn fn0_or_382(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_383(env) {
  __88 := env[1];
  __89 := env[2];
  x_384 := fn0_or_382(__88, __89);
  return x_384;
}

fn fn0_xor_385(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_386(env) {
  __93 := env[1];
  __94 := env[2];
  x_387 := fn0_xor_385(__93, __94);
  return x_387;
}

fn fn0_lte_388(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_388(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_389(env) {
  __99 := env[1];
  __100 := env[2];
  x_390 := fn0_lte_388(__99, __100);
  return x_390;
}

fn fn0_lt_391(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_388(x_110, y_108);
  return x_109;
}

fn fn1_lt_392(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_393 := fn0_lt_391(x_107, y_108);
  return x_393;
}

fn fn0_pred_394(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_395(env) {
  __112 := env[1];
  x_396 := fn0_pred_394(__112);
  return x_396;
}

fn fn0_add_397(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_397(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_398(env) {
  __117 := env[1];
  __118 := env[2];
  x_399 := fn0_add_397(__117, __118);
  return x_399;
}

fn fn0_sub_400(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_394(__124);
      x_128 := fn0_sub_400(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_401(env) {
  __124 := env[1];
  __125 := env[2];
  x_402 := fn0_sub_400(__124, __125);
  return x_402;
}

fn fn0_mul_403(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_403(n_135, __132);
      x_136 := fn0_add_397(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_404(env) {
  __131 := env[1];
  __132 := env[2];
  x_405 := fn0_mul_403(__131, __132);
  return x_405;
}

fn fn0_div_406(x_139, y_140) {
  x_142 := fn0_lt_391(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_408, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_412, loop_144, x_139);
      appc(x_413, x_412, y_140);
      move1(x_156, x_413);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_407(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_415 := fn0_div_406(x_139, y_140);
  return x_415;
}

fn fn0_rem_416(x_158, y_159) {
  x_162 := fn0_div_406(x_158, y_159);
  x_161 := fn0_mul_403(x_162, y_159);
  x_160 := fn0_sub_400(x_158, x_161);
  return x_160;
}

fn fn1_rem_417(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_418 := fn0_rem_416(x_158, y_159);
  return x_418;
}

fn fn0_free_listUU_419(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_421, f_165, hd_168);
      move1(x_171, x_421);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_419(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_420(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_423 := fn0_free_listUU_419(A_164, f_165, __166);
  return x_423;
}

fn fn0_free_listUL_424(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_426, f_175, hd_178);
      move1(x_181, x_426);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_424(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_425(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_428 := fn0_free_listUL_424(A_174, f_175, __176);
  return x_428;
}

fn fn0_free_listLL_429(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_431, f_185, hd_188);
      move1(x_191, x_431);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_429(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_430(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_433 := fn0_free_listLL_429(A_184, f_185, __186);
  return x_433;
}

fn fn0_pow_434(x_194, y_195) {
  mkclo1(x_197, fn1_loop_436, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_440, loop_196, 1);
  appc(x_441, x_440, y_195);
  move1(x_206, x_441);
  return x_206;
}

fn fn1_pow_435(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_443 := fn0_pow_434(x_194, y_195);
  return x_443;
}

fn fn0_powm_444(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_446, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_450, loop_211, 1);
  appc(x_451, x_450, y_209);
  move1(x_222, x_451);
  return x_222;
}

fn fn1_powm_445(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_453 := fn0_powm_444(x_208, y_209, m_210);
  return x_453;
}

fn fn0_ord_454(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_455(env) {
  c_224 := env[1];
  x_456 := fn0_ord_454(c_224);
  return x_456;
}

fn fn0_chr_457(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_458(env) {
  i_227 := env[1];
  x_459 := fn0_chr_457(i_227);
  return x_459;
}

fn fn0_str_460(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_461(env) {
  c_230 := env[1];
  x_462 := fn0_str_460(c_230);
  return x_462;
}

fn fn0_strlen_463(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_464(env) {
  s_234 := env[1];
  x_465 := fn0_strlen_463(s_234);
  return x_465;
}

fn fn0_string_of_int_466(i_237) {
  mkclo1(x_239, fn1_aux_468, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_471, aux_238, i_237);
      move1(x_259, x_471);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_473, aux_238, x_263);
      move1(x_262, x_473);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_467(env) {
  i_237 := env[1];
  x_475 := fn0_string_of_int_466(i_237);
  return x_475;
}

fn fn0_alice_476(a_265, p_266, g_267, c_268) {
  lazy(x_269, lazy__478, 6);
  setlazy(x_269, powm_207, 0);
  setlazy(x_269, string_of_int_236, 1);
  setlazy(x_269, a_265, 2);
  setlazy(x_269, p_266, 3);
  setlazy(x_269, g_267, 4);
  setlazy(x_269, c_268, 5);
  return x_269;
}

fn fn1_alice_477(env) {
  a_265 := env[1];
  p_266 := env[2];
  g_267 := env[3];
  c_268 := env[4];
  x_479 := fn0_alice_476(a_265, p_266, g_267, c_268);
  return x_479;
}

fn fn0_bob_480(b_285, p_286, g_287, c_288) {
  lazy(x_289, lazy__482, 6);
  setlazy(x_289, powm_207, 0);
  setlazy(x_289, string_of_int_236, 1);
  setlazy(x_289, b_285, 2);
  setlazy(x_289, p_286, 3);
  setlazy(x_289, g_287, 4);
  setlazy(x_289, c_288, 5);
  return x_289;
}

fn fn1_bob_481(env) {
  b_285 := env[1];
  p_286 := env[2];
  g_287 := env[3];
  c_288 := env[4];
  x_483 := fn0_bob_480(b_285, p_286, g_287, c_288);
  return x_483;
}

fn fn0_key_exchange_484(__305) {
  move1(p_306, 23);
  move1(g_307, 5);
  lazy(x_308, lazy__486, 4);
  setlazy(x_308, alice_264, 0);
  setlazy(x_308, bob_284, 1);
  setlazy(x_308, p_306, 2);
  setlazy(x_308, g_307, 3);
  return x_308;
}

fn fn1_key_exchange_485(env) {
  __305 := env[1];
  x_490 := fn0_key_exchange_484(__305);
  return x_490;
}

fn lazy__486(env) {
  alice_264 := env[0];
  bob_284 := env[1];
  p_306 := env[2];
  g_307 := env[3];
  mkclo1(x_311, fn1_lam_487, fvc:=3, argc:=1);
  setclo(x_311, alice_264, 1);
  setclo(x_311, p_306, 2);
  setclo(x_311, g_307, 3);
  fork(x_310, x_311);
  move1(c_309, x_310);
  mkclo1(x_317, fn1_lam_488, fvc:=3, argc:=1);
  setclo(x_317, bob_284, 1);
  setclo(x_317, p_306, 2);
  setclo(x_317, g_307, 3);
  fork(x_316, x_317);
  move1(c0_315, x_316);
  send(x_331, c0_315, c_309);
  move1(c0_330, x_331);
  close1(x_332, c0_330);
  return x_332;
}

fn fn1_lam_487(env) {
  lam_312 := env[0];
  alice_264 := env[1];
  p_306 := env[2];
  g_307 := env[3];
  _313 := env[4];
  x_314 := fn0_alice_476(4, p_306, g_307, _313);
  return x_314;
}

fn fn1_lam_488(env) {
  lam_318 := env[0];
  bob_284 := env[1];
  p_306 := env[2];
  g_307 := env[3];
  _319 := env[4];
  lazy(x_320, lazy__489, 4);
  setlazy(x_320, bob_284, 0);
  setlazy(x_320, p_306, 1);
  setlazy(x_320, g_307, 2);
  setlazy(x_320, _319, 3);
  return x_320;
}

fn lazy__489(env) {
  bob_284 := env[0];
  p_306 := env[1];
  g_307 := env[2];
  _319 := env[3];
  recv1(x_322, _319);
  move1(_321, x_322);
  switch(ctagof(_321)){
    ex1LL_30 => {
      getbox(m_324, _321, 0);
      getbox(n_325, _321, 1);
      close0(x_327, n_325);
      move1(__326, x_327);
      x_329 := fn0_bob_480(3, p_306, g_307, m_324);
      force(x_328, x_329);
      free(x_329);
      move1(x_323, x_328);
      free(_321);
      break;
    }
  }
  return x_323;
}

fn lazy__482(env) {
  powm_207 := env[0];
  string_of_int_236 := env[1];
  b_285 := env[2];
  p_286 := env[3];
  g_287 := env[4];
  c_288 := env[5];
  recv0(x_291, c_288);
  move1(_290, x_291);
  switch(ctagof(_290)){
    ex1UL_32 => {
      getbox(m_293, _290, 0);
      getbox(n_294, _290, 1);
      x_297 := fn0_powm_444(g_287, b_285, p_286);
      send(x_296, n_294, x_297);
      move1(c_295, x_296);
      x_301 := fn0_string_of_int_466(m_293);
      str(x_302, "\n")
      cat(x_300, x_301, x_302);
      print(x_299, x_300);
      move1(__298, x_299);
      close1(x_303, c_295);
      move1(x_292, x_303);
      free(_290);
      break;
    }
  }
  return x_292;
}

fn lazy__478(env) {
  powm_207 := env[0];
  string_of_int_236 := env[1];
  a_265 := env[2];
  p_266 := env[3];
  g_267 := env[4];
  c_268 := env[5];
  x_272 := fn0_powm_444(g_267, a_265, p_266);
  send(x_271, c_268, x_272);
  move1(c_270, x_271);
  recv0(x_274, c_270);
  move1(_273, x_274);
  switch(ctagof(_273)){
    ex1UL_32 => {
      getbox(m_276, _273, 0);
      getbox(n_277, _273, 1);
      x_281 := fn0_string_of_int_466(m_276);
      str(x_282, "\n")
      cat(x_280, x_281, x_282);
      print(x_279, x_280);
      move1(__278, x_279);
      close0(x_283, n_277);
      move1(x_275, x_283);
      free(_273);
      break;
    }
  }
  return x_275;
}

fn fn1_aux_468(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_469, aux_240, i_246);
      move1(x_249, x_469);
      x_252 := fn0_ord_454(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_457(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_454(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_457(x_255);
      x_253 := fn0_str_460(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_446(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_447, loop_213, x_219);
      appc(x_448, x_447, x_221);
      move1(x_218, x_448);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_436(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_437, loop_198, x_204);
      appc(x_438, x_437, x_205);
      move1(x_203, x_438);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_408(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_394(y_148);
  x_150 := fn0_sub_400(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_409, loop_146, n_153);
      appc(x_410, x_409, y_148);
      move1(x_154, x_410);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_335, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_338, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_341, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_344, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_347, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_350, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_353, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_356, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_359, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_362, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_365, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_368, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_371, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_374, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_377, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_380, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_383, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_386, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_389, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_392, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_395, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_398, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_401, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_404, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_407, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_417, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_420, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_425, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_430, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_435, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_445, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_455, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_458, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_461, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_464, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_467, fvc:=0, argc:=1);
  mkclo0(alice_264, fn1_alice_477, fvc:=0, argc:=4);
  mkclo0(bob_284, fn1_bob_481, fvc:=0, argc:=4);
  mkclo0(key_exchange_304, fn1_key_exchange_485, fvc:=0, argc:=1);
  x_333 := fn0_key_exchange_484(tt_3);
  force(x_491, x_333);
  return x_491;
}

trans45 success

-----------------------------------------

compilation success

-----------------------------------------

