[Notation {name = "+"; body = (App [(Id ("add", I)); (Hole 1); (Hole 2)])};
  Inductive {name = "vec"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id ("nat", I)), (Binder ("_", (TBase (Type L))))
                    )),
                 [(DConstr ("vnil",
                     (TBase
                        (App
                           [(Id ("vec", I)); (Id ("A", I)); (Id ("zero", I))])),
                     []));
                   (DConstr ("vcons",
                      (TBind (N, (Id ("nat", I)),
                         (Binder ("n",
                            (TBind (R, (Id ("A", I)),
                               (Binder ("hd",
                                  (TBind (R,
                                     (App
                                        [(Id ("vec", I)); (Id ("A", I));
                                          (Id ("n", I))]),
                                     (Binder ("tl",
                                        (TBase
                                           (App
                                              [(Id ("vec", I));
                                                (Id ("A", I));
                                                (App
                                                   [(Id ("succ", I));
                                                     (Id ("n", I))])
                                                ]))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         )),
                      [I; E; E]))
                   ]))
             ))
          ))
       ));
    view = [E]};
  Definition {name = "vappend"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("m",
                       (Pi (N, U, (Id ("nat", I)),
                          (Binder ("n",
                             (Pi (R, U,
                                (App
                                   [(Id ("vec", I)); (Id ("A", I));
                                     (Id ("m", I))]),
                                (Binder ("_",
                                   (Pi (R, L,
                                      (App
                                         [(Id ("vec", I)); (Id ("A", I));
                                           (Id ("n", I))]),
                                      (Binder ("_",
                                         (App
                                            [(Id ("vec", I)); (Id ("A", I));
                                              (BOpr ("+", (Id ("m", I)),
                                                 (Id ("n", I))))
                                              ])
                                         ))
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "vappend"),
              [([(PId "A"); (PId "m"); (PId "n"); (PId "vnil"); (PId "ys")],
                (Some (Id ("ys", I))));
                ([(PId "A"); (PId "m"); (PId "n");
                   (PConstr ("vcons", [(PId "_"); (PId "x"); (PId "xs")]));
                   (PId "ys")],
                 (Some (App
                          [(Id ("vcons", I)); (Id ("x", I));
                            (App
                               [(Id ("vappend", I)); (Id ("xs", I));
                                 (Id ("ys", I))])
                            ])))
                ]
              )),
           [I; I; I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("m",
                    (Pi (N, U, (Id ("nat", I)),
                       (Binder ("n",
                          (Pi (R, U,
                             (App
                                [(Id ("vec", I)); (Id ("A", I));
                                  (Id ("m", I))]),
                             (Binder ("_",
                                (Pi (R, L,
                                   (App
                                      [(Id ("vec", I)); (Id ("A", I));
                                        (Id ("n", I))]),
                                   (Binder ("_",
                                      (App
                                         [(Id ("vec", I)); (Id ("A", I));
                                           (BOpr ("+", (Id ("m", I)),
                                              (Id ("n", I))))
                                           ])
                                      ))
                                   ))
                                ))
                             ))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I; I]};
  Definition {name = "vlen"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id ("nat", I)),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Inst ("vec", [(SId "s")], I)); (Id ("A", I));
                               (Id ("n", I))]),
                          (Binder ("xs",
                             (BOpr ("\195\151",
                                (App
                                   [(Id ("exists", I));
                                     (Fun (
                                        (Pi (R, U, (Id ("nat", I)),
                                           (Binder ("n0", IMeta)))),
                                        (Binder (None,
                                           [([(PId "n0")],
                                             (Some (BOpr ("=",
                                                      (Id ("n0", I)),
                                                      (Id ("n", I))))))
                                             ]
                                           )),
                                        []))
                                     ]),
                                (UOpr ("`", (Id ("xs", I))))))
                             ))
                          ))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "vlen"),
              [([(PId "A"); (PId "n"); (PId "vnil")],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("\226\159\168,{}\226\159\169",
                            (Id ("zero", I)), (Id ("refl", I)))),
                         (App [(Id ("just", I)); (Id ("vnil", I))])))));
                ([(PId "A"); (PId "n");
                   (PConstr ("vcons", [(PId "_"); (PId "x"); (PId "xs")]))],
                 (Some (Let (R, (App [(Id ("vlen", I)); (Id ("xs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169",
                                (PBOpr ("\226\159\168,{}\226\159\169",
                                   (PId "n0"), (PId "pf"))),
                                (PConstr ("just", [(PId "xs")])))),
                             (BOpr ("\226\159\168,\226\159\169",
                                (BOpr ("\226\159\168,{}\226\159\169",
                                   (App [(Id ("succ", I)); (Id ("n0", I))]),
                                   (App
                                      [(Id ("congr", I));
                                        (Fun (
                                           (Pi (R, U, IMeta,
                                              (Binder ("x", IMeta)))),
                                           (Binder (None,
                                              [([(PId "x")],
                                                (Some (App
                                                         [(Id ("succ", I));
                                                           (Id ("x", I))])))
                                                ]
                                              )),
                                           []));
                                        (Id ("pf", I))])
                                   )),
                                (App
                                   [(Id ("just", I));
                                     (App
                                        [(Id ("vcons", I)); (Id ("x", I));
                                          (Id ("xs", I))])
                                     ])
                                ))
                             ))
                          ))))
                ]
              )),
           [I; I])),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id ("nat", I)),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Inst ("vec", [(SId "s")], I)); (Id ("A", I));
                            (Id ("n", I))]),
                       (Binder ("xs",
                          (BOpr ("\195\151",
                             (App
                                [(Id ("exists", I));
                                  (Fun (
                                     (Pi (R, U, (Id ("nat", I)),
                                        (Binder ("n0", IMeta)))),
                                     (Binder (None,
                                        [([(PId "n0")],
                                          (Some (BOpr ("=", (Id ("n0", I)),
                                                   (Id ("n", I))))))
                                          ]
                                        )),
                                     []))
                                  ]),
                             (UOpr ("`", (Id ("xs", I))))))
                          ))
                       ))
                    ))
                 ))
              ))
           )))
       ));
    view = [I; I]}
  ]

[parse success]

-----------------------------------------

#[program]
inductive vec_10‹s_447› (A_448 : Type‹s_447›): nat_5 -> L where
| vnil_13 : (vec_10‹??_52› A_448 zero_6)
| vcons_14
    {n_450 : nat_5} (hd_451 : A_448)
    (tl_452 : (vec_10‹??_53› A_448 n_450))
    : (vec_10‹??_54› A_448 (succ_7‹› n_450))

#[program]
def vappend_33‹s_453› :
  ∀ {A_454 : Type‹s_453›} ->
    ∀ {m_455 : nat_5} ->
      ∀ {n_456 : nat_5} ->
        (vec_10‹??_59› A_454 m_455) ->
          (vec_10‹??_60› A_454 n_456) -o
            (vec_10‹??_61› A_454 ((add_18) m_455 n_456))
:=
  fun vappend_459 :
    ∀ {A_460 : Type‹s_453›} ->
      ∀ {m_461 : nat_5} ->
        ∀ {n_462 : nat_5} ->
          (vec_10‹??_55› A_460 m_461) ->
            (vec_10‹??_56› A_460 n_462) -o
              (vec_10‹??_57› A_460 ((add_18) m_461 n_462))
  | A_465, m_466, n_467, vnil_13, ys_468 => ys_468
  | A_469, m_470, n_471, (vcons_14 _472 x_473 xs_474), ys_475 =>
    (vcons_14‹??_58›
      ?_71[0;0] ?_70[0;0] x_473
      ((vappend_459) ?_69[0;0] ?_68[0;0] ?_67[0;0] xs_474 ys_475))

#[program]
def vlen_34‹s_476› :
  ∀ {A_477 : Type‹s_476›} ->
    ∀ {n_478 : nat_5} ->
      ∀ (xs_479 : (vec_10‹s_476› A_477 n_478)) ->
        ((prod1_25‹??_90,??_91›)
          (exists_7‹??_87,??_88›
            ?_103[0;0]
            fun _480 : nat_5 -> ?_101[0;0]
            | n0_482 => (eq_1‹??_86› ?_102[0;0] n0_482 n_478))
          ((ssing_6‹??_89›) ?_104[0;0] xs_479))
:=
  fun vlen_483 :
    ∀ {A_484 : Type‹s_476›} ->
      ∀ {n_485 : nat_5} ->
        ∀ (xs_486 : (vec_10‹s_476› A_484 n_485)) ->
          ((prod1_25‹??_66,??_67›)
            (exists_7‹??_63,??_64›
              ?_74[0;0]
              fun _487 : nat_5 -> ?_72[0;0]
              | n0_489 => (eq_1‹??_62› ?_73[0;0] n0_489 n_485))
            ((ssing_6‹??_65›) ?_75[0;0] xs_486))
  | A_490, n_491, vnil_13 =>
    (ex1_12‹??_74,??_75›
      ?_82[0;0] ?_83[0;0]
      (ex_10‹??_69,??_70›
        ?_78[0;0] ?_79[0;0] zero_6 (refl_1‹??_68› ?_76[0;0] ?_77[0;0]))
      (just_2‹??_72,??_73› ?_81[0;0] (vnil_13‹??_71› ?_80[0;0])))
  | A_492, n_493, (vcons_14 _494 x_495 xs_496) =>
    (match ((vlen_483) ?_85[0;0] ?_84[0;0] xs_496) in ?_100[0;0] -o ?_99[0;0]
     with
    | (ex1_12 (ex_10 n0_498 pf_499) (just_2 xs_500)) =>
      (ex1_12‹??_84,??_85›
        ?_97[0;0] ?_98[0;0]
        (ex_10‹??_79,??_80›
          ?_92[0;0] ?_93[0;0] (succ_7‹› n0_498)
          ((congr_4‹??_76,??_77,??_78›)
            ?_91[0;0] ?_90[0;0] ?_89[0;0] ?_88[0;0]
            fun _501 : ?_86[0;0] -> ?_87[0;0]
            | x_503 => (succ_7‹› x_503) pf_499))
        (just_2‹??_82,??_83›
          ?_96[0;0] (vcons_14‹??_81› ?_95[0;0] ?_94[0;0] x_495 xs_500))))

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_8113› : ∀ (A_8114 : Type‹s_8113›) -> A_8114 -> A_8114 :=
  fun id_8116 : ∀ (A_8117 : Type‹s_8113›) -> A_8117 -> A_8117
  | A_8119, m_8120 => m_8120

#[logical]
inductive eq_1‹s_8121› (A_8122 : Type‹s_8121›) (m_8123 : A_8122):
  A_8122 -> U
where
| refl_1 : (eq_1‹s_8121› A_8122 m_8123 m_8123)

#[program]
def rwl_2‹s_8125,r_8126› :
  ∀ {A_8127 : Type‹s_8125›} ->
    ∀ {m_8128 : A_8127} ->
      ∀ {n_8129 : A_8127} ->
        ∀ {B_8130 : A_8127 -> Type‹r_8126›} ->
          {(eq_1‹s_8125› A_8127 m_8128 n_8129)} ->
            ((B_8130) m_8128) -> ((B_8130) n_8129)
:=
  fun rwl_8134 :
    ∀ {A_8135 : Type‹s_8125›} ->
      ∀ {m_8136 : A_8135} ->
        ∀ {n_8137 : A_8135} ->
          ∀ {B_8138 : A_8135 -> Type‹r_8126›} ->
            {(eq_1‹s_8125› A_8135 m_8136 n_8137)} ->
              ((B_8138) m_8136) -> ((B_8138) n_8137)
  | A_8142, m_8143, n_8144, B_8145, refl_1, __8146 => __8146

#[program]
def rwr_3‹s_8147,r_8148› :
  ∀ {A_8149 : Type‹s_8147›} ->
    ∀ {m_8150 : A_8149} ->
      ∀ {n_8151 : A_8149} ->
        ∀ {B_8152 : A_8149 -> Type‹r_8148›} ->
          {(eq_1‹s_8147› A_8149 m_8150 n_8151)} ->
            ((B_8152) n_8151) -> ((B_8152) m_8150)
:=
  fun rwr_8156 :
    ∀ {A_8157 : Type‹s_8147›} ->
      ∀ {m_8158 : A_8157} ->
        ∀ {n_8159 : A_8157} ->
          ∀ {B_8160 : A_8157 -> Type‹r_8148›} ->
            {(eq_1‹s_8147› A_8157 m_8158 n_8159)} ->
              ((B_8160) n_8159) -> ((B_8160) m_8158)
  | A_8164, m_8165, n_8166, B_8167, refl_1, __8168 => __8168

#[logical]
def congr_4‹s_8169,r_8170,t_8171› :
  ∀ (A_8172 : Type‹s_8169›) ->
    ∀ (B_8173 : Type‹r_8170›) ->
      ∀ (m_8174 : A_8172) ->
        ∀ (n_8175 : A_8172) ->
          ∀ (f_8176 : forall‹t_8171›(__8177 : A_8172), B_8173) ->
            (eq_1‹s_8169› A_8172 m_8174 n_8175) ->
              (eq_1‹r_8170› B_8173 ((f_8176) m_8174) ((f_8176) n_8175))
:=
  fun congr_8179 :
    ∀ (A_8180 : Type‹s_8169›) ->
      ∀ (B_8181 : Type‹r_8170›) ->
        ∀ (m_8182 : A_8180) ->
          ∀ (n_8183 : A_8180) ->
            ∀ (f_8184 : forall‹t_8171›(__8185 : A_8180), B_8181) ->
              (eq_1‹s_8169› A_8180 m_8182 n_8183) ->
                (eq_1‹r_8170› B_8181 ((f_8184) m_8182) ((f_8184) n_8183))
  | A_8187, B_8188, m_8189, n_8190, f_8191, refl_1 =>
    (refl_1‹r_8170› B_8188 ((f_8191) n_8190))

#[logical]
def axiom_K_5‹› :
  ∀ {A_8192 : U} ->
    ∀ {m_8193 : A_8192} ->
      ∀ (x_8194 : (eq_1‹U› A_8192 m_8193 m_8193)) ->
        (eq_1‹U›
          (eq_1‹U› A_8192 m_8193 m_8193) x_8194
          (refl_1‹U› A_8192 m_8193))
:=
  fun axiom_K_8195 :
    ∀ {A_8196 : U} ->
      ∀ {m_8197 : A_8196} ->
        ∀ (x_8198 : (eq_1‹U› A_8196 m_8197 m_8197)) ->
          (eq_1‹U›
            (eq_1‹U› A_8196 m_8197 m_8197) x_8198
            (refl_1‹U› A_8196 m_8197))
  | A_8199, m_8200, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_8199 m_8200 m_8200) (refl_1‹U› A_8199 m_8200))

#[program]
inductive sing_2‹s_8201,t_8202› (A_8203 : Type‹s_8201›):
  A_8203 -> Type‹t_8202›
where
| just_2 (m_8205 : A_8203) : (sing_2‹s_8201,t_8202› A_8203 m_8205)

#[logical]
def ssing_6‹s_8206› :
  ∀ (A_8207 : Type‹s_8206›) -> A_8207 -> Type‹s_8206›
:=
  fun ssing_8209 :
    ∀ (A_8210 : Type‹s_8206›) -> A_8210 -> Type‹s_8206›
  | A_8212, m_8213 => (sing_2‹s_8206,s_8206› A_8212 m_8213)

#[program]
def sing_elim_7‹s_8214,t_8215› :
  ∀ {A_8216 : Type‹s_8214›} ->
    ∀ {x_8217 : A_8216} ->
      (sing_2‹s_8214,t_8215› A_8216 x_8217) -> A_8216
:=
  fun sing_elim_8219 :
    ∀ {A_8220 : Type‹s_8214›} ->
      ∀ {x_8221 : A_8220} ->
        (sing_2‹s_8214,t_8215› A_8220 x_8221) -> A_8220
  | A_8223, x_8224, (just_2 m_8225) => m_8225

#[logical]
def sing_uniq_8‹s_8226,t_8227› :
  ∀ (A_8228 : Type‹s_8226›) ->
    ∀ (x0_8229 : A_8228) ->
      ∀ (x_8230 : (sing_2‹s_8226,t_8227› A_8228 x0_8229)) ->
        (eq_1‹s_8226›
          A_8228 x0_8229
          ((sing_elim_7‹s_8226,t_8227›) A_8228 x0_8229 x_8230))
:=
  fun sing_uniq_8231 :
    ∀ (A_8232 : Type‹s_8226›) ->
      ∀ (x0_8233 : A_8232) ->
        ∀ (x_8234 : (sing_2‹s_8226,t_8227› A_8232 x0_8233)) ->
          (eq_1‹s_8226›
            A_8232 x0_8233
            ((sing_elim_7‹s_8226,t_8227›) A_8232 x0_8233 x_8234))
  | A_8235, x0_8236, (just_2 m_8237) => (refl_1‹s_8226› A_8235 m_8237)

#[program]
inductive base_3‹s_8238› : Type‹s_8238› where
| tt_3 : base_3‹s_8238›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_8239 : unit_9) -> (eq_1‹U› base_3‹U› x_8239 tt_3‹U›)
:=
  fun unit_eta_8240 :
    ∀ (x_8241 : unit_9) -> (eq_1‹U› base_3‹U› x_8241 tt_3‹U›)
  | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  fun not_8243 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_8247 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __8250 => false_5

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_8253 : bool_4 -> bool_4 -> bool_4
  | true_4, __8256 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  fun xor_8259 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_8262 : nat_5) : nat_5

#[program]
def lte_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_8265 : nat_5 -> nat_5 -> bool_4
  | zero_6, __8268 => true_4
  | (succ_7 n_8269), zero_6 => false_5
  | (succ_7 n_8270), (succ_7 n_8271) => ((lte_8265) n_8270 n_8271)

#[program]
def lt_16‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_8274 : nat_5 -> nat_5 -> bool_4
  | x_8277, y_8278 => ((lte_15) (succ_7‹› x_8277) y_8278)

#[program]
def pred_17‹› : nat_5 -> nat_5 :=
  fun pred_8280 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_8282) => n_8282

#[program]
def add_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_8285 : nat_5 -> nat_5 -> nat_5
  | zero_6, __8288 => __8288
  | (succ_7 n_8289), __8290 => (succ_7‹› ((add_8285) n_8289 __8290))

#[program]
def sub_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_8293 : nat_5 -> nat_5 -> nat_5
  | __8296, zero_6 => __8296
  | __8297, (succ_7 n_8298) => ((sub_8293) ((pred_17) __8297) n_8298)

#[program]
def mul_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_8301 : nat_5 -> nat_5 -> nat_5
  | zero_6, __8304 => zero_6
  | (succ_7 n_8305), __8306 => ((add_18) __8306 ((mul_8301) n_8305 __8306))

#[program]
def div_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_8309 : nat_5 -> nat_5 -> nat_5
  | x_8312, y_8313 =>
    (match ((lt_16) x_8312 y_8313) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_8315 :=
        fun loop_8316 : nat_5 -> nat_5 -> nat_5
        | x_8319, y_8320 =>
          (match ((sub_19) x_8319 ((pred_17) y_8320)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_8322) => (succ_7‹› ((loop_8316) n_8322 y_8320)))
      in ((loop_8315) x_8312 y_8313))

#[program]
def rem_22‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_8325 : nat_5 -> nat_5 -> nat_5
  | x_8328, y_8329 =>
    ((sub_19) x_8328 ((mul_20) ((div_21) x_8328 y_8329) y_8329))

#[program]
inductive list_6‹s_8330,t_8331› (A_8332 : Type‹s_8330›):
  Type‹t_8331›
where
| nil_8 : (list_6‹s_8330,t_8331› A_8332)
| cons_9
    (hd_8333 : A_8332) (tl_8334 : (list_6‹s_8330,t_8331› A_8332))
    : (list_6‹s_8330,t_8331› A_8332)

#[program]
def free_list_23‹s_8335,t_8336› :
  ∀ {A_8337 : Type‹s_8335›} ->
    A_8337 -> unit_9 -> (list_6‹s_8335,t_8336› A_8337) -> unit_9
:=
  fun free_list_8341 :
    ∀ {A_8342 : Type‹s_8335›} ->
      A_8342 -> unit_9 -> (list_6‹s_8335,t_8336› A_8342) -> unit_9
  | A_8346, f_8347, nil_8 => tt_3‹U›
  | A_8348, f_8349, (cons_9 hd_8350 tl_8351) =>
    let __8352 := ((f_8349) hd_8350) in
    ((free_list_8341) A_8348 f_8349 tl_8351)

#[program]
inductive exists_7‹s_8353,r_8354› (A_8355 : Type‹s_8353›) (B_8356 : 
A_8355 -> Type‹r_8354›): L where
| ex_10
    (m_8358 : A_8355) {n_8359 : ((B_8356) m_8358)}
    : (exists_7‹s_8353,r_8354› A_8355 B_8356)

#[program]
inductive exists0_8‹s_8360,r_8361› (A_8362 : Type‹s_8360›) (B_8363 : 
A_8362 -> Type‹r_8361›): L where
| ex0_11
    {m_8365 : A_8362} (n_8366 : ((B_8363) m_8365))
    : (exists0_8‹s_8360,r_8361› A_8362 B_8363)

#[program]
inductive exists1_9‹s_8367,r_8368› (A_8369 : Type‹s_8367›) (B_8370 : 
A_8369 -> Type‹r_8368›): L where
| ex1_12
    (m_8372 : A_8369) (n_8373 : ((B_8370) m_8372))
    : (exists1_9‹s_8367,r_8368› A_8369 B_8370)

#[logical]
def prod0_24‹s_8374,r_8375› : Type‹s_8374› -> Type‹r_8375› -> L
:=
  fun prod0_8378 : Type‹s_8374› -> Type‹r_8375› -> L
  | A_8381, B_8382 =>
    (exists0_8‹s_8374,r_8375›
      A_8381 fun _8383 : A_8381 -> Type‹r_8375›
             | __8385 => B_8382)

#[logical]
def prod1_25‹s_8386,r_8387› : Type‹s_8386› -> Type‹r_8387› -> L
:=
  fun prod1_8390 : Type‹s_8386› -> Type‹r_8387› -> L
  | A_8393, B_8394 =>
    (exists1_9‹s_8386,r_8387›
      A_8393 fun _8395 : A_8393 -> Type‹r_8387›
             | __8397 => B_8394)

#[program]
def pow_26‹› : int -> int -> int :=
  fun pow_8400 : int -> int -> int
  | x_8403, y_8404 =>
    let loop_8405 :=
      fun loop_8406 : int -> int -> int
      | acc_8409, y_8410 =>
        (match (__lte__ y_8410 0) in bool_4 -o int with
        | true_4 => acc_8409
        | false_5 =>
          ((loop_8406) (__mul__ x_8403 acc_8409) (__sub__ y_8410 1)))
    in ((loop_8405) 1 y_8404)

#[program]
def powm_27‹› : int -> int -> int -> int :=
  fun powm_8415 : int -> int -> int -> int
  | x_8419, y_8420, m_8421 =>
    let loop_8422 :=
      fun loop_8423 : int -> int -> int
      | acc_8426, y_8427 =>
        (match (__lte__ y_8427 0) in bool_4 -o int with
        | true_4 => acc_8426
        | false_5 =>
          ((loop_8423)
            (__mod__ (__mul__ x_8419 acc_8426) m_8421) (__sub__ y_8427 1)))
    in ((loop_8422) 1 y_8420)

#[program]
def ord_28‹› : char -> int :=
  fun ord_8430 : char -> int
  | c_8432 => (__ord__ c_8432)

#[program]
def chr_29‹› : int -> char :=
  fun chr_8434 : int -> char
  | i_8436 => (__chr__ i_8436)

#[program]
def str_30‹› : char -> string :=
  fun str_8438 : char -> string
  | c_8440 => (__push__ "" c_8440)

#[program]
def strlen_31‹› : string -> int :=
  fun strlen_8442 : string -> int
  | s_8444 => (__size__ s_8444)

#[program]
def string_of_int_32‹› : int -> string :=
  fun string_of_int_8446 : int -> string
  | i_8448 =>
    let aux_8449 :=
      fun aux_8450 : int -> string
      | i_8452 =>
        (match (__lte__ 10 i_8452) in bool_4 -o string with
        | true_4 =>
          let r_8454 := (__mod__ i_8452 10) in
          let i_8455 := (__div__ i_8452 10) in
          (__push__ ((aux_8450) i_8455)
            ((chr_29) (__add__ r_8454 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_8452 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_8448) in bool_4 -o string with
    | true_4 => ((aux_8449) i_8448)
    | false_5 => (__cat__ "~" ((aux_8449) (__neg__ i_8448))))

#[program]
inductive vec_10‹s_8457› (A_8458 : Type‹s_8457›): nat_5 -> L where
| vnil_13 : (vec_10‹s_8457› A_8458 zero_6)
| vcons_14
    {n_8460 : nat_5} (hd_8461 : A_8458)
    (tl_8462 : (vec_10‹s_8457› A_8458 n_8460))
    : (vec_10‹s_8457› A_8458 (succ_7‹› n_8460))

#[program]
def vappend_33‹s_8463› :
  ∀ {A_8464 : Type‹s_8463›} ->
    ∀ {m_8465 : nat_5} ->
      ∀ {n_8466 : nat_5} ->
        (vec_10‹s_8463› A_8464 m_8465) ->
          (vec_10‹s_8463› A_8464 n_8466) -o
            (vec_10‹s_8463› A_8464 ((add_18) m_8465 n_8466))
:=
  fun vappend_8469 :
    ∀ {A_8470 : Type‹s_8463›} ->
      ∀ {m_8471 : nat_5} ->
        ∀ {n_8472 : nat_5} ->
          (vec_10‹s_8463› A_8470 m_8471) ->
            (vec_10‹s_8463› A_8470 n_8472) -o
              (vec_10‹s_8463› A_8470 ((add_18) m_8471 n_8472))
  | A_8475, m_8476, n_8477, vnil_13, __8478 => __8478
  | A_8479, m_8480, n_8481, (vcons_14 n_8482 hd_8483 tl_8484), __8485 =>
    (vcons_14‹s_8463›
      A_8479
      ((fun add_8486 : nat_5 -> nat_5 -> nat_5
        | zero_6, __8489 => __8489
        | (succ_7 n_8490), __8491 =>
          (succ_7‹› ((add_8486) n_8490 __8491)))
        n_8482 n_8481)
      hd_8483 ((vappend_8469) A_8479 n_8482 n_8481 tl_8484 __8485))

#[program]
def vlen_34‹s_8492› :
  ∀ {A_8493 : Type‹s_8492›} ->
    ∀ {n_8494 : nat_5} ->
      ∀ (xs_8495 : (vec_10‹s_8492› A_8493 n_8494)) ->
        ((prod1_25‹L,L›)
          (exists_7‹U,U›
            nat_5
            fun _8496 : nat_5 -> U
            | __8498 => (eq_1‹U› nat_5 __8498 n_8494))
          ((ssing_6‹L›) (vec_10‹s_8492› A_8493 n_8494) xs_8495))
:=
  fun vlen_8499 :
    ∀ {A_8500 : Type‹s_8492›} ->
      ∀ {n_8501 : nat_5} ->
        ∀ (xs_8502 : (vec_10‹s_8492› A_8500 n_8501)) ->
          ((prod1_25‹L,L›)
            (exists_7‹U,U›
              nat_5
              fun _8503 : nat_5 -> U
              | __8505 => (eq_1‹U› nat_5 __8505 n_8501))
            ((ssing_6‹L›) (vec_10‹s_8492› A_8500 n_8501) xs_8502))
  | A_8506, n_8507, vnil_13 =>
    (ex1_12‹L,L›
      (exists_7‹U,U›
        nat_5
        fun _8508 : nat_5 -> U
        | __8510 => (eq_1‹U› nat_5 __8510 zero_6))
      fun _8511 :
        (exists_7‹U,U›
          nat_5
          fun _8513 : nat_5 -> U
          | __8515 => (eq_1‹U› nat_5 __8515 zero_6)) -> L
      | __8516 =>
        ((ssing_6‹L›)
          (vec_10‹s_8492› A_8506 zero_6) (vnil_13‹s_8492› A_8506))
      (ex_10‹U,U›
        nat_5
        fun _8517 : nat_5 -> U
        | __8519 => (eq_1‹U› nat_5 __8519 zero_6) zero_6
        (refl_1‹U› nat_5 zero_6))
      (just_2‹L,L›
        (vec_10‹s_8492› A_8506 zero_6) (vnil_13‹s_8492› A_8506)))
  | A_8520, n_8521, (vcons_14 n_8522 hd_8523 tl_8524) =>
    (match ((vlen_8499) A_8520 n_8522 tl_8524) in
       ((prod1_25‹L,L›)
         (exists_7‹U,U›
           nat_5
           fun _8526 : nat_5 -> U
           | __8528 => (eq_1‹U› nat_5 __8528 n_8522))
         ((ssing_6‹L›) (vec_10‹s_8492› A_8520 n_8522) tl_8524)) -o
         ((prod1_25‹L,L›)
           (exists_7‹U,U›
             nat_5
             fun _8529 : nat_5 -> U
             | __8531 => (eq_1‹U› nat_5 __8531 (succ_7‹› n_8522)))
           ((ssing_6‹L›)
             (vec_10‹s_8492› A_8520 (succ_7‹› n_8522))
             (vcons_14‹s_8492› A_8520 n_8522 hd_8523 tl_8524)))
     with
    | (ex1_12 (ex_10 m_8532 n_8533) (just_2 m_8534)) =>
      (ex1_12‹L,L›
        (exists_7‹U,U›
          nat_5
          fun _8535 : nat_5 -> U
          | __8537 => (eq_1‹U› nat_5 __8537 (succ_7‹› n_8522)))
        fun _8538 :
          (exists_7‹U,U›
            nat_5
            fun _8540 : nat_5 -> U
            | __8542 => (eq_1‹U› nat_5 __8542 (succ_7‹› n_8522))) ->
            L
        | __8543 =>
          ((ssing_6‹L›)
            (vec_10‹s_8492› A_8520 (succ_7‹› n_8522))
            (vcons_14‹s_8492› A_8520 n_8522 hd_8523 tl_8524))
        (ex_10‹U,U›
          nat_5
          fun _8544 : nat_5 -> U
          | __8546 => (eq_1‹U› nat_5 __8546 (succ_7‹› n_8522))
          (succ_7‹› m_8532)
          ((congr_4‹U,U,U›)
            nat_5 nat_5 m_8532 n_8522
            fun _8547 : nat_5 -> nat_5
            | __8549 => (succ_7‹› __8549) n_8533))
        (just_2‹L,L›
          (vec_10‹s_8492› A_8520 (succ_7‹› n_8522))
          (vcons_14‹s_8492› A_8520 n_8522 hd_8523 m_8534))))

[trans1e success]

-----------------------------------------

#[program]
def idU_36 := fun id_14859 (A_14860) -> (m_14861) ->
                m_14861

#[program]
def idL_35 := fun id_14862 (A_14863) -> (m_14864) ->
                m_14864

#[logical]
inductive eqU_12 where
| reflU_16 of layout[]

#[logical]
inductive eqL_11 where
| reflL_15 of layout[]

#[program]
def rwlUU_40 :=
  fun rwl_14865 {A_14866} -> {m_14867} -> {n_14868} -> {B_14869} ->
  {__14870} -> (__14871) ->
    (match {NULL} with
    | reflU_16  => __14871)

#[program]
def rwlUL_39 :=
  fun rwl_14872 {A_14873} -> {m_14874} -> {n_14875} -> {B_14876} ->
  {__14877} -> (__14878) ->
    (match {NULL} with
    | reflU_16  => __14878)

#[program]
def rwlLU_38 :=
  fun rwl_14879 {A_14880} -> {m_14881} -> {n_14882} -> {B_14883} ->
  {__14884} -> (__14885) ->
    (match {NULL} with
    | reflL_15  => __14885)

#[program]
def rwlLL_37 :=
  fun rwl_14886 {A_14887} -> {m_14888} -> {n_14889} -> {B_14890} ->
  {__14891} -> (__14892) ->
    (match {NULL} with
    | reflL_15  => __14892)

#[program]
def rwrUU_44 :=
  fun rwr_14893 {A_14894} -> {m_14895} -> {n_14896} -> {B_14897} ->
  {__14898} -> (__14899) ->
    (match {NULL} with
    | reflU_16  => __14899)

#[program]
def rwrUL_43 :=
  fun rwr_14900 {A_14901} -> {m_14902} -> {n_14903} -> {B_14904} ->
  {__14905} -> (__14906) ->
    (match {NULL} with
    | reflU_16  => __14906)

#[program]
def rwrLU_42 :=
  fun rwr_14907 {A_14908} -> {m_14909} -> {n_14910} -> {B_14911} ->
  {__14912} -> (__14913) ->
    (match {NULL} with
    | reflL_15  => __14913)

#[program]
def rwrLL_41 :=
  fun rwr_14914 {A_14915} -> {m_14916} -> {n_14917} -> {B_14918} ->
  {__14919} -> (__14920) ->
    (match {NULL} with
    | reflL_15  => __14920)

#[logical]
def congrUUU_52 := NULL

#[logical]
def congrUUL_51 := NULL

#[logical]
def congrULU_50 := NULL

#[logical]
def congrULL_49 := NULL

#[logical]
def congrLUU_48 := NULL

#[logical]
def congrLUL_47 := NULL

#[logical]
def congrLLU_46 := NULL

#[logical]
def congrLLL_45 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_16 where
| justUU_20 of layout[R]

#[program]
inductive singUL_15 where
| justUL_19 of layout[R]

#[program]
inductive singLU_14 where


#[program]
inductive singLL_13 where
| justLL_17 of layout[R]

#[logical]
def ssingU_54 := NULL

#[logical]
def ssingL_53 := NULL

#[program]
def sing_elimUU_58 :=
  fun sing_elim_14921 {A_14922} -> {x_14923} -> (__14924) ->
    (match __14924 with
    | justUU_20 m_14925 => m_14925)

#[program]
def sing_elimUL_57 :=
  fun sing_elim_14926 {A_14927} -> {x_14928} -> (__14929) ->
    (match __14929 with
    | justUL_19 m_14930 => m_14930)

#[program]
def sing_elimLU_56 :=
  fun sing_elim_14931 {A_14932} -> {x_14933} -> (__14934) ->
    (match __14934 with
    )

#[program]
def sing_elimLL_55 :=
  fun sing_elim_14935 {A_14936} -> {x_14937} -> (__14938) ->
    (match __14938 with
    | justLL_17 m_14939 => m_14939)

#[logical]
def sing_uniqUU_62 := NULL

#[logical]
def sing_uniqUL_61 := NULL

#[logical]
def sing_uniqLU_60 := NULL

#[logical]
def sing_uniqLL_59 := NULL

#[program]
inductive baseU_18 where
| ttU_22 of layout[]

#[program]
inductive baseL_17 where
| ttL_21 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_14940 (__14941) ->
    (match __14941 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_14942 (__14943) -> (__14944) ->
    (match __14943 with
    | true_4  =>
      (match __14944 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_14945 (__14946) -> (__14947) ->
    (match __14946 with
    | true_4  => true_4
    | false_5  =>
      (match __14947 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_14948 (__14949) -> (__14950) ->
    (match __14949 with
    | true_4  =>
      (match __14950 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __14950 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_14951 (__14952) -> (__14953) ->
    (match __14952 with
    | zero_6  => true_4
    | succ_7 n_14954 =>
      (match __14953 with
      | zero_6  => false_5 | succ_7 n_14955 => ((lte_14951) n_14954 n_14955)))

#[program]
def lt_16 :=
  fun lt_14956 (x_14957) -> (y_14958) ->
    ((lte_15) (succ_7 x_14957) y_14958)

#[program]
def pred_17 :=
  fun pred_14959 (__14960) ->
    (match __14960 with
    | zero_6  => zero_6 | succ_7 n_14961 => n_14961)

#[program]
def add_18 :=
  fun add_14962 (__14963) -> (__14964) ->
    (match __14963 with
    | zero_6  => __14964
    | succ_7 n_14965 => (succ_7 ((add_14962) n_14965 __14964)))

#[program]
def sub_19 :=
  fun sub_14966 (__14967) -> (__14968) ->
    (match __14968 with
    | zero_6  => __14967
    | succ_7 n_14969 => ((sub_14966) ((pred_17) __14967) n_14969))

#[program]
def mul_20 :=
  fun mul_14970 (__14971) -> (__14972) ->
    (match __14971 with
    | zero_6  => zero_6
    | succ_7 n_14973 => ((add_18) __14972 ((mul_14970) n_14973 __14972)))

#[program]
def div_21 :=
  fun div_14974 (x_14975) -> (y_14976) ->
    (match ((lt_16) x_14975 y_14976) with
    | true_4  => zero_6
    | false_5  =>
      let loop_14977 :=
        fun loop_14978 (x_14979) -> (y_14980) ->
          (match ((sub_19) x_14979 ((pred_17) y_14980)) with
          | zero_6  => zero_6
          | succ_7 n_14981 => (succ_7 ((loop_14978) n_14981 y_14980)))
      in ((loop_14977) x_14975 y_14976))

#[program]
def rem_22 :=
  fun rem_14982 (x_14983) -> (y_14984) ->
    ((sub_19) x_14983 ((mul_20) ((div_21) x_14983 y_14984) y_14984))

#[program]
inductive listUU_22 where
| nilUU_29 of layout[]
| consUU_30 of layout[R, R]

#[program]
inductive listUL_21 where
| nilUL_27 of layout[]
| consUL_28 of layout[R, R]

#[program]
inductive listLU_20 where
| nilLU_25 of layout[]

#[program]
inductive listLL_19 where
| nilLL_23 of layout[]
| consLL_24 of layout[R, R]

#[program]
def free_listUU_66 :=
  fun free_list_14985 {A_14986} -> (f_14987) -> (__14988) ->
    (match __14988 with
    | nilUU_29  => ttU_22
    | consUU_30 hd_14989 tl_14990 =>
      let __14991 := ((f_14987) hd_14989) in
      ((free_list_14985) NULL f_14987 tl_14990))

#[program]
def free_listUL_65 :=
  fun free_list_14992 {A_14993} -> (f_14994) -> (__14995) ->
    (match __14995 with
    | nilUL_27  => ttU_22
    | consUL_28 hd_14996 tl_14997 =>
      let __14998 := ((f_14994) hd_14996) in
      ((free_list_14992) NULL f_14994 tl_14997))

#[program]
def free_listLL_63 :=
  fun free_list_14999 {A_15000} -> (f_15001) -> (__15002) ->
    (match __15002 with
    | nilLL_23  => ttU_22
    | consLL_24 hd_15003 tl_15004 =>
      let __15005 := ((f_15001) hd_15003) in
      ((free_list_14999) NULL f_15001 tl_15004))

#[program]
inductive existsUU_26 where
| exUU_34 of layout[R, N]

#[program]
inductive existsUL_25 where
| exUL_33 of layout[R, N]

#[program]
inductive existsLU_24 where
| exLU_32 of layout[R, N]

#[program]
inductive existsLL_23 where
| exLL_31 of layout[R, N]

#[program]
inductive exists0UU_30 where
| ex0UU_38 of layout[N, R]

#[program]
inductive exists0UL_29 where
| ex0UL_37 of layout[N, R]

#[program]
inductive exists0LU_28 where
| ex0LU_36 of layout[N, R]

#[program]
inductive exists0LL_27 where
| ex0LL_35 of layout[N, R]

#[program]
inductive exists1UU_34 where
| ex1UU_42 of layout[R, R]

#[program]
inductive exists1UL_33 where
| ex1UL_41 of layout[R, R]

#[program]
inductive exists1LU_32 where
| ex1LU_40 of layout[R, R]

#[program]
inductive exists1LL_31 where
| ex1LL_39 of layout[R, R]

#[logical]
def prod0UU_70 := NULL

#[logical]
def prod0UL_69 := NULL

#[logical]
def prod0LU_68 := NULL

#[logical]
def prod0LL_67 := NULL

#[logical]
def prod1UU_74 := NULL

#[logical]
def prod1UL_73 := NULL

#[logical]
def prod1LU_72 := NULL

#[logical]
def prod1LL_71 := NULL

#[program]
def pow_26 :=
  fun pow_15006 (x_15007) -> (y_15008) ->
    let loop_15009 :=
      fun loop_15010 (acc_15011) -> (y_15012) ->
        (match (__lte__ y_15012 0) with
        | true_4  => acc_15011
        | false_5  =>
          ((loop_15010) (__mul__ x_15007 acc_15011) (__sub__ y_15012 1)))
    in ((loop_15009) 1 y_15008)

#[program]
def powm_27 :=
  fun powm_15013 (x_15014) -> (y_15015) -> (m_15016) ->
    let loop_15017 :=
      fun loop_15018 (acc_15019) -> (y_15020) ->
        (match (__lte__ y_15020 0) with
        | true_4  => acc_15019
        | false_5  =>
          ((loop_15018)
            (__mod__ (__mul__ x_15014 acc_15019) m_15016) (__sub__ y_15020 1)))
    in ((loop_15017) 1 y_15015)

#[program]
def ord_28 := fun ord_15021 (c_15022) ->
                (__ord__ c_15022)

#[program]
def chr_29 := fun chr_15023 (i_15024) ->
                (__chr__ i_15024)

#[program]
def str_30 := fun str_15025 (c_15026) ->
                (__push__ "" c_15026)

#[program]
def strlen_31 := fun strlen_15027 (s_15028) ->
                   (__size__ s_15028)

#[program]
def string_of_int_32 :=
  fun string_of_int_15029 (i_15030) ->
    let aux_15031 :=
      fun aux_15032 (i_15033) ->
        (match (__lte__ 10 i_15033) with
        | true_4  =>
          let r_15034 := (__mod__ i_15033 10) in
          let i_15035 := (__div__ i_15033 10) in
          (__push__ ((aux_15032) i_15035)
            ((chr_29) (__add__ r_15034 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_15033 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_15030) with
    | true_4  => ((aux_15031) i_15030)
    | false_5  => (__cat__ "~" ((aux_15031) (__neg__ i_15030))))

#[program]
inductive vecU_36 where
| vnilU_45 of layout[]
| vconsU_46 of layout[N, R, R]

#[program]
inductive vecL_35 where
| vnilL_43 of layout[]
| vconsL_44 of layout[N, R, R]

#[program]
def vappendU_76 :=
  fun vappend_15036 {A_15037} -> {m_15038} -> {n_15039} -> (__15040) ->
  (__15041) -o
    (match __15040 with
    | vnilU_45  => __15041
    | vconsU_46 n_15042 hd_15043 tl_15044 =>
      (vconsU_46
        NULL hd_15043 ((vappend_15036) NULL NULL NULL tl_15044 __15041)))

#[program]
def vappendL_75 :=
  fun vappend_15045 {A_15046} -> {m_15047} -> {n_15048} -> (__15049) ->
  (__15050) -o
    (match __15049 with
    | vnilL_43  => __15050
    | vconsL_44 n_15051 hd_15052 tl_15053 =>
      (vconsL_44
        NULL hd_15052 ((vappend_15045) NULL NULL NULL tl_15053 __15050)))

#[program]
def vlenU_78 :=
  fun vlen_15054 {A_15055} -> {n_15056} -> (xs_15057) ->
    (match xs_15057 with
    | vnilU_45  => (ex1LL_39 (exUU_34 zero_6 NULL) (justLL_17 vnilU_45))
    | vconsU_46 n_15058 hd_15059 tl_15060 =>
      (match ((vlen_15054) NULL NULL tl_15060) with
      | ex1LL_39 m_15061 n_15062 =>
        (match m_15061 with
        | exUU_34 m_15063 n_15064 =>
          (match n_15062 with
          | justLL_17 m_15065 =>
            (ex1LL_39
              (exUU_34 (succ_7 m_15063) NULL)
              (justLL_17 (vconsU_46 NULL hd_15059 m_15065)))))))

#[program]
def vlenL_77 :=
  fun vlen_15066 {A_15067} -> {n_15068} -> (xs_15069) ->
    (match xs_15069 with
    | vnilL_43  => (ex1LL_39 (exUU_34 zero_6 NULL) (justLL_17 vnilL_43))
    | vconsL_44 n_15070 hd_15071 tl_15072 =>
      (match ((vlen_15066) NULL NULL tl_15072) with
      | ex1LL_39 m_15073 n_15074 =>
        (match m_15073 with
        | exUU_34 m_15075 n_15076 =>
          (match n_15074 with
          | justLL_17 m_15077 =>
            (ex1LL_39
              (exUU_34 (succ_7 m_15075) NULL)
              (justLL_17 (vconsL_44 NULL hd_15071 m_15077)))))))

[trans12 success]

-----------------------------------------

#[program]
def idU_36 := fun id_15297 (A_15298) -> (m_15299) ->
                m_15299

#[program]
def idL_35 := fun id_15300 (A_15301) -> (m_15302) ->
                m_15302

#[logical]
inductive eqU_12 where
| reflU_16 of layout[]

#[logical]
inductive eqL_11 where
| reflL_15 of layout[]

#[program]
def rwlUU_40 :=
  fun rwl_15303 {A_15304} -> {m_15305} -> {n_15306} -> {B_15307} ->
  {__15308} -> (__15309) ->
    __15309

#[program]
def rwlUL_39 :=
  fun rwl_15310 {A_15311} -> {m_15312} -> {n_15313} -> {B_15314} ->
  {__15315} -> (__15316) ->
    __15316

#[program]
def rwlLU_38 :=
  fun rwl_15317 {A_15318} -> {m_15319} -> {n_15320} -> {B_15321} ->
  {__15322} -> (__15323) ->
    __15323

#[program]
def rwlLL_37 :=
  fun rwl_15324 {A_15325} -> {m_15326} -> {n_15327} -> {B_15328} ->
  {__15329} -> (__15330) ->
    __15330

#[program]
def rwrUU_44 :=
  fun rwr_15331 {A_15332} -> {m_15333} -> {n_15334} -> {B_15335} ->
  {__15336} -> (__15337) ->
    __15337

#[program]
def rwrUL_43 :=
  fun rwr_15338 {A_15339} -> {m_15340} -> {n_15341} -> {B_15342} ->
  {__15343} -> (__15344) ->
    __15344

#[program]
def rwrLU_42 :=
  fun rwr_15345 {A_15346} -> {m_15347} -> {n_15348} -> {B_15349} ->
  {__15350} -> (__15351) ->
    __15351

#[program]
def rwrLL_41 :=
  fun rwr_15352 {A_15353} -> {m_15354} -> {n_15355} -> {B_15356} ->
  {__15357} -> (__15358) ->
    __15358

#[logical]
def congrUUU_52 := NULL

#[logical]
def congrUUL_51 := NULL

#[logical]
def congrULU_50 := NULL

#[logical]
def congrULL_49 := NULL

#[logical]
def congrLUU_48 := NULL

#[logical]
def congrLUL_47 := NULL

#[logical]
def congrLLU_46 := NULL

#[logical]
def congrLLL_45 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_16 where
| justUU_20 of layout[R]

#[program]
inductive singUL_15 where
| justUL_19 of layout[R]

#[program]
inductive singLU_14 where


#[program]
inductive singLL_13 where
| justLL_17 of layout[R]

#[logical]
def ssingU_54 := NULL

#[logical]
def ssingL_53 := NULL

#[program]
def sing_elimUU_58 :=
  fun sing_elim_15359 {A_15360} -> {x_15361} -> (__15362) ->
    (match __15362 with
    | justUU_20 m_15363 => m_15363)

#[program]
def sing_elimUL_57 :=
  fun sing_elim_15364 {A_15365} -> {x_15366} -> (__15367) ->
    (match __15367 with
    | justUL_19 m_15368 => m_15368)

#[program]
def sing_elimLU_56 :=
  fun sing_elim_15369 {A_15370} -> {x_15371} -> (__15372) ->
    !!

#[program]
def sing_elimLL_55 :=
  fun sing_elim_15373 {A_15374} -> {x_15375} -> (__15376) ->
    (match __15376 with
    | justLL_17 m_15377 => m_15377)

#[logical]
def sing_uniqUU_62 := NULL

#[logical]
def sing_uniqUL_61 := NULL

#[logical]
def sing_uniqLU_60 := NULL

#[logical]
def sing_uniqLL_59 := NULL

#[program]
inductive baseU_18 where
| ttU_22 of layout[]

#[program]
inductive baseL_17 where
| ttL_21 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_15378 (__15379) ->
    (match __15379 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_15380 (__15381) -> (__15382) ->
    (match __15381 with
    | true_4  =>
      (match __15382 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_15383 (__15384) -> (__15385) ->
    (match __15384 with
    | true_4  => true_4
    | false_5  =>
      (match __15385 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_15386 (__15387) -> (__15388) ->
    (match __15387 with
    | true_4  =>
      (match __15388 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __15388 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_15389 (__15390) -> (__15391) ->
    (match __15390 with
    | zero_6  => true_4
    | succ_7 n_15392 =>
      (match __15391 with
      | zero_6  => false_5 | succ_7 n_15393 => ((lte_15389) n_15392 n_15393)))

#[program]
def lt_16 :=
  fun lt_15394 (x_15395) -> (y_15396) ->
    ((lte_15) (succ_7 x_15395) y_15396)

#[program]
def pred_17 :=
  fun pred_15397 (__15398) ->
    (match __15398 with
    | zero_6  => zero_6 | succ_7 n_15399 => n_15399)

#[program]
def add_18 :=
  fun add_15400 (__15401) -> (__15402) ->
    (match __15401 with
    | zero_6  => __15402
    | succ_7 n_15403 => (succ_7 ((add_15400) n_15403 __15402)))

#[program]
def sub_19 :=
  fun sub_15404 (__15405) -> (__15406) ->
    (match __15406 with
    | zero_6  => __15405
    | succ_7 n_15407 => ((sub_15404) ((pred_17) __15405) n_15407))

#[program]
def mul_20 :=
  fun mul_15408 (__15409) -> (__15410) ->
    (match __15409 with
    | zero_6  => zero_6
    | succ_7 n_15411 => ((add_18) __15410 ((mul_15408) n_15411 __15410)))

#[program]
def div_21 :=
  fun div_15412 (x_15413) -> (y_15414) ->
    (match ((lt_16) x_15413 y_15414) with
    | true_4  => zero_6
    | false_5  =>
      let loop_15415 :=
        fun loop_15416 (x_15417) -> (y_15418) ->
          (match ((sub_19) x_15417 ((pred_17) y_15418)) with
          | zero_6  => zero_6
          | succ_7 n_15419 => (succ_7 ((loop_15416) n_15419 y_15418)))
      in ((loop_15415) x_15413 y_15414))

#[program]
def rem_22 :=
  fun rem_15420 (x_15421) -> (y_15422) ->
    ((sub_19) x_15421 ((mul_20) ((div_21) x_15421 y_15422) y_15422))

#[program]
inductive listUU_22 where
| nilUU_29 of layout[]
| consUU_30 of layout[R, R]

#[program]
inductive listUL_21 where
| nilUL_27 of layout[]
| consUL_28 of layout[R, R]

#[program]
inductive listLU_20 where
| nilLU_25 of layout[]

#[program]
inductive listLL_19 where
| nilLL_23 of layout[]
| consLL_24 of layout[R, R]

#[program]
def free_listUU_66 :=
  fun free_list_15423 {A_15424} -> (f_15425) -> (__15426) ->
    (match __15426 with
    | nilUU_29  => ttU_22
    | consUU_30 hd_15427 tl_15428 =>
      let __15429 := ((f_15425) hd_15427) in
      ((free_list_15423) NULL f_15425 tl_15428))

#[program]
def free_listUL_65 :=
  fun free_list_15430 {A_15431} -> (f_15432) -> (__15433) ->
    (match __15433 with
    | nilUL_27  => ttU_22
    | consUL_28 hd_15434 tl_15435 =>
      let __15436 := ((f_15432) hd_15434) in
      ((free_list_15430) NULL f_15432 tl_15435))

#[program]
def free_listLL_63 :=
  fun free_list_15437 {A_15438} -> (f_15439) -> (__15440) ->
    (match __15440 with
    | nilLL_23  => ttU_22
    | consLL_24 hd_15441 tl_15442 =>
      let __15443 := ((f_15439) hd_15441) in
      ((free_list_15437) NULL f_15439 tl_15442))

#[program]
inductive existsUU_26 where
| exUU_34 of layout[R, N]

#[program]
inductive existsUL_25 where
| exUL_33 of layout[R, N]

#[program]
inductive existsLU_24 where
| exLU_32 of layout[R, N]

#[program]
inductive existsLL_23 where
| exLL_31 of layout[R, N]

#[program]
inductive exists0UU_30 where
| ex0UU_38 of layout[N, R]

#[program]
inductive exists0UL_29 where
| ex0UL_37 of layout[N, R]

#[program]
inductive exists0LU_28 where
| ex0LU_36 of layout[N, R]

#[program]
inductive exists0LL_27 where
| ex0LL_35 of layout[N, R]

#[program]
inductive exists1UU_34 where
| ex1UU_42 of layout[R, R]

#[program]
inductive exists1UL_33 where
| ex1UL_41 of layout[R, R]

#[program]
inductive exists1LU_32 where
| ex1LU_40 of layout[R, R]

#[program]
inductive exists1LL_31 where
| ex1LL_39 of layout[R, R]

#[logical]
def prod0UU_70 := NULL

#[logical]
def prod0UL_69 := NULL

#[logical]
def prod0LU_68 := NULL

#[logical]
def prod0LL_67 := NULL

#[logical]
def prod1UU_74 := NULL

#[logical]
def prod1UL_73 := NULL

#[logical]
def prod1LU_72 := NULL

#[logical]
def prod1LL_71 := NULL

#[program]
def pow_26 :=
  fun pow_15444 (x_15445) -> (y_15446) ->
    let loop_15447 :=
      fun loop_15448 (acc_15449) -> (y_15450) ->
        (match (__lte__ y_15450 0) with
        | true_4  => acc_15449
        | false_5  =>
          ((loop_15448) (__mul__ x_15445 acc_15449) (__sub__ y_15450 1)))
    in ((loop_15447) 1 y_15446)

#[program]
def powm_27 :=
  fun powm_15451 (x_15452) -> (y_15453) -> (m_15454) ->
    let loop_15455 :=
      fun loop_15456 (acc_15457) -> (y_15458) ->
        (match (__lte__ y_15458 0) with
        | true_4  => acc_15457
        | false_5  =>
          ((loop_15456)
            (__mod__ (__mul__ x_15452 acc_15457) m_15454) (__sub__ y_15458 1)))
    in ((loop_15455) 1 y_15453)

#[program]
def ord_28 := fun ord_15459 (c_15460) ->
                (__ord__ c_15460)

#[program]
def chr_29 := fun chr_15461 (i_15462) ->
                (__chr__ i_15462)

#[program]
def str_30 := fun str_15463 (c_15464) ->
                (__push__ "" c_15464)

#[program]
def strlen_31 := fun strlen_15465 (s_15466) ->
                   (__size__ s_15466)

#[program]
def string_of_int_32 :=
  fun string_of_int_15467 (i_15468) ->
    let aux_15469 :=
      fun aux_15470 (i_15471) ->
        (match (__lte__ 10 i_15471) with
        | true_4  =>
          let r_15472 := (__mod__ i_15471 10) in
          let i_15473 := (__div__ i_15471 10) in
          (__push__ ((aux_15470) i_15473)
            ((chr_29) (__add__ r_15472 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_15471 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_15468) with
    | true_4  => ((aux_15469) i_15468)
    | false_5  => (__cat__ "~" ((aux_15469) (__neg__ i_15468))))

#[program]
inductive vecU_36 where
| vnilU_45 of layout[]
| vconsU_46 of layout[N, R, R]

#[program]
inductive vecL_35 where
| vnilL_43 of layout[]
| vconsL_44 of layout[N, R, R]

#[program]
def vappendU_76 :=
  fun vappend_15474 {A_15475} -> {m_15476} -> {n_15477} -> (__15478) ->
  (__15479) -o
    (match __15478 with
    | vnilU_45  => __15479
    | vconsU_46 n_15480 hd_15481 tl_15482 =>
      (vconsU_46
        NULL hd_15481 ((vappend_15474) NULL NULL NULL tl_15482 __15479)))

#[program]
def vappendL_75 :=
  fun vappend_15483 {A_15484} -> {m_15485} -> {n_15486} -> (__15487) ->
  (__15488) -o
    (match __15487 with
    | vnilL_43  => __15488
    | vconsL_44 n_15489 hd_15490 tl_15491 =>
      (vconsL_44
        NULL hd_15490 ((vappend_15483) NULL NULL NULL tl_15491 __15488)))

#[program]
def vlenU_78 :=
  fun vlen_15492 {A_15493} -> {n_15494} -> (xs_15495) ->
    (match xs_15495 with
    | vnilU_45  => (ex1LL_39 (exUU_34 zero_6 NULL) (justLL_17 vnilU_45))
    | vconsU_46 n_15496 hd_15497 tl_15498 =>
      (match ((vlen_15492) NULL NULL tl_15498) with
      | ex1LL_39 m_15499 n_15500 =>
        (match m_15499 with
        | exUU_34 m_15501 n_15502 =>
          (match n_15500 with
          | justLL_17 m_15503 =>
            (ex1LL_39
              (exUU_34 (succ_7 m_15501) NULL)
              (justLL_17 (vconsU_46 NULL hd_15497 m_15503)))))))

#[program]
def vlenL_77 :=
  fun vlen_15504 {A_15505} -> {n_15506} -> (xs_15507) ->
    (match xs_15507 with
    | vnilL_43  => (ex1LL_39 (exUU_34 zero_6 NULL) (justLL_17 vnilL_43))
    | vconsL_44 n_15508 hd_15509 tl_15510 =>
      (match ((vlen_15504) NULL NULL tl_15510) with
      | ex1LL_39 m_15511 n_15512 =>
        (match m_15511 with
        | exUU_34 m_15513 n_15514 =>
          (match n_15512 with
          | justLL_17 m_15515 =>
            (ex1LL_39
              (exUU_34 (succ_7 m_15513) NULL)
              (justLL_17 (vconsL_44 NULL hd_15509 m_15515)))))))

[trans2e success]

-----------------------------------------

def idU_36 := fun id_15735 (A_15736) -> (m_15737) -> m_15737

def idL_35 := fun id_15738 (A_15739) -> (m_15740) -> m_15740

def rwlUU_40 :=
  fun rwl_15741 (A_15742) -> (m_15743) -> (n_15744) -> (B_15745) ->
  (__15746) -> (__15747) -> __15747

def rwlUL_39 :=
  fun rwl_15748 (A_15749) -> (m_15750) -> (n_15751) -> (B_15752) ->
  (__15753) -> (__15754) -> __15754

def rwlLU_38 :=
  fun rwl_15755 (A_15756) -> (m_15757) -> (n_15758) -> (B_15759) ->
  (__15760) -> (__15761) -> __15761

def rwlLL_37 :=
  fun rwl_15762 (A_15763) -> (m_15764) -> (n_15765) -> (B_15766) ->
  (__15767) -> (__15768) -> __15768

def rwrUU_44 :=
  fun rwr_15769 (A_15770) -> (m_15771) -> (n_15772) -> (B_15773) ->
  (__15774) -> (__15775) -> __15775

def rwrUL_43 :=
  fun rwr_15776 (A_15777) -> (m_15778) -> (n_15779) -> (B_15780) ->
  (__15781) -> (__15782) -> __15782

def rwrLU_42 :=
  fun rwr_15783 (A_15784) -> (m_15785) -> (n_15786) -> (B_15787) ->
  (__15788) -> (__15789) -> __15789

def rwrLL_41 :=
  fun rwr_15790 (A_15791) -> (m_15792) -> (n_15793) -> (B_15794) ->
  (__15795) -> (__15796) -> __15796

def sing_elimUU_58 :=
  fun sing_elim_15797 (A_15798) -> (x_15799) -> (__15800) -> __15800

def sing_elimUL_57 :=
  fun sing_elim_15801 (A_15802) -> (x_15803) -> (__15804) -> __15804

def sing_elimLU_56 :=
  fun sing_elim_15805 (A_15806) -> (x_15807) -> (__15808) -> !!

def sing_elimLL_55 :=
  fun sing_elim_15809 (A_15810) -> (x_15811) -> (__15812) -> __15812

def not_11 :=
  fun not_15813 (__15814) ->
    (match __15814 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  fun and_15815 (__15816) -> (__15817) ->
    (match __15816 with
    | true_4 =>
      (match __15817 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  fun or_15818 (__15819) -> (__15820) ->
    (match __15819 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __15820 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  fun xor_15821 (__15822) -> (__15823) ->
    (match __15822 with
    | true_4 =>
      (match __15823 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __15823 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def lte_15 :=
  fun lte_15824 (__15825) -> (__15826) ->
    (match __15825 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __15825 with
      | succ_7 n_15827 =>
        (match __15826 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __15826 with
          | succ_7 n_15828 => ((lte_15824) n_15827 n_15828)))))

def lt_16 :=
  fun lt_15829 (x_15830) -> (y_15831) -> ((lte_15) (succ_7 x_15830) y_15831)

def pred_17 :=
  fun pred_15832 (__15833) ->
    (match __15833 with
    | zero_6 => constr0(zero_6)
    | _ => (match __15833 with
           | succ_7 n_15834 => n_15834))

def add_18 :=
  fun add_15835 (__15836) -> (__15837) ->
    (match __15836 with
    | zero_6 => __15837
    | _ =>
      (match __15836 with
      | succ_7 n_15838 => (succ_7 ((add_15835) n_15838 __15837))))

def sub_19 :=
  fun sub_15839 (__15840) -> (__15841) ->
    (match __15841 with
    | zero_6 => __15840
    | _ =>
      (match __15841 with
      | succ_7 n_15842 => ((sub_15839) ((pred_17) __15840) n_15842)))

def mul_20 :=
  fun mul_15843 (__15844) -> (__15845) ->
    (match __15844 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __15844 with
      | succ_7 n_15846 => ((add_18) __15845 ((mul_15843) n_15846 __15845))))

def div_21 :=
  fun div_15847 (x_15848) -> (y_15849) ->
    (match ((lt_16) x_15848 y_15849) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_15850 :=
        fun loop_15851 (x_15852) -> (y_15853) ->
          (match ((sub_19) x_15852 ((pred_17) y_15853)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_19) x_15852 ((pred_17) y_15853)) with
            | succ_7 n_15854 => (succ_7 ((loop_15851) n_15854 y_15853))))
      in ((loop_15850) x_15848 y_15849))

def rem_22 :=
  fun rem_15855 (x_15856) -> (y_15857) ->
    ((sub_19) x_15856 ((mul_20) ((div_21) x_15856 y_15857) y_15857))

def free_listUU_66 :=
  fun free_list_15858 (A_15859) -> (f_15860) -> (__15861) ->
    (match __15861 with
    | nilUU_29 => constr0(ttU_22)
    | _ =>
      (match __15861 with
      | consUU_30 hd_15862 tl_15863 =>
        let __15864 := ((f_15860) hd_15862) in
        ((free_list_15858) NULL f_15860 tl_15863)))

def free_listUL_65 :=
  fun free_list_15865 (A_15866) -> (f_15867) -> (__15868) ->
    (match __15868 with
    | nilUL_27 => constr0(ttU_22)
    | _ =>
      (match __15868 with
      | consUL_28 hd_15869 tl_15870 =>
        let __15871 := ((f_15867) hd_15869) in
        ((free_list_15865) NULL f_15867 tl_15870)))

def free_listLL_63 :=
  fun free_list_15872 (A_15873) -> (f_15874) -> (__15875) ->
    (match __15875 with
    | nilLL_23 => constr0(ttU_22)
    | _ =>
      (match __15875 with
      | consLL_24 hd_15876 tl_15877 =>
        let __15878 := ((f_15874) hd_15876) in
        ((free_list_15872) NULL f_15874 tl_15877)))

def pow_26 :=
  fun pow_15879 (x_15880) -> (y_15881) ->
    let loop_15882 :=
      fun loop_15883 (acc_15884) -> (y_15885) ->
        (match (__lte__ y_15885 0) with
        | true_4 => acc_15884
        | false_5 =>
          ((loop_15883) (__mul__ x_15880 acc_15884) (__sub__ y_15885 1)))
    in ((loop_15882) 1 y_15881)

def powm_27 :=
  fun powm_15886 (x_15887) -> (y_15888) -> (m_15889) ->
    let loop_15890 :=
      fun loop_15891 (acc_15892) -> (y_15893) ->
        (match (__lte__ y_15893 0) with
        | true_4 => acc_15892
        | false_5 =>
          ((loop_15891)
            (__mod__ (__mul__ x_15887 acc_15892) m_15889) (__sub__ y_15893 1)))
    in ((loop_15890) 1 y_15888)

def ord_28 := fun ord_15894 (c_15895) -> (__ord__ c_15895)

def chr_29 := fun chr_15896 (i_15897) -> (__chr__ i_15897)

def str_30 := fun str_15898 (c_15899) -> (__push__ "" c_15899)

def strlen_31 := fun strlen_15900 (s_15901) -> (__size__ s_15901)

def string_of_int_32 :=
  fun string_of_int_15902 (i_15903) ->
    let aux_15904 :=
      fun aux_15905 (i_15906) ->
        (match (__lte__ 10 i_15906) with
        | true_4 =>
          let r_15907 := (__mod__ i_15906 10) in
          let i_15908 := (__div__ i_15906 10) in
          (__push__ ((aux_15905) i_15908)
            ((chr_29) (__add__ r_15907 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_15906 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_15903) with
    | true_4 => ((aux_15904) i_15903)
    | false_5 => (__cat__ "~" ((aux_15904) (__neg__ i_15903))))

def vappendU_76 :=
  fun vappend_15909 (A_15910) -> (m_15911) -> (n_15912) -> (__15913) ->
  (__15914) -o
    (match __15913 with
    | vnilU_45 => __15914
    | _ =>
      (match __15913 with
      | vconsU_46 hd_15915 tl_15916 =>
        (vconsU_46
          hd_15915 ((vappend_15909) NULL NULL NULL tl_15916 __15914))))

def vappendL_75 :=
  fun vappend_15917 (A_15918) -> (m_15919) -> (n_15920) -> (__15921) ->
  (__15922) -o
    (match __15921 with
    | vnilL_43 => __15922
    | _ =>
      (match __15921 with
      | vconsL_44 hd_15923 tl_15924 =>
        (vconsL_44
          hd_15923 ((vappend_15917) NULL NULL NULL tl_15924 __15922))))

def vlenU_78 :=
  fun vlen_15925 (A_15926) -> (n_15927) -> (xs_15928) ->
    (match xs_15928 with
    | vnilU_45 => (ex1LL_39 constr0(zero_6) constr0(vnilU_45))
    | _ =>
      (match xs_15928 with
      | vconsU_46 hd_15929 tl_15930 =>
        (match ((vlen_15925) NULL NULL tl_15930) with
        | ex1LL_39 m_15931 n_15932 =>
          (ex1LL_39 (succ_7 m_15931) (vconsU_46 hd_15929 n_15932)))))

def vlenL_77 :=
  fun vlen_15933 (A_15934) -> (n_15935) -> (xs_15936) ->
    (match xs_15936 with
    | vnilL_43 => (ex1LL_39 constr0(zero_6) constr0(vnilL_43))
    | _ =>
      (match xs_15936 with
      | vconsL_44 hd_15937 tl_15938 =>
        (match ((vlen_15933) NULL NULL tl_15938) with
        | ex1LL_39 m_15939 n_15940 =>
          (ex1LL_39 (succ_7 m_15939) (vconsL_44 hd_15937 n_15940)))))

[trans23 success]

-----------------------------------------

def idU_36 := lam (A_16147) -> (m_16148) -> m_16148

def idL_35 := lam (A_16149) -> (m_16150) -> m_16150

def rwlUU_40 :=
  lam (A_16151) -> (m_16152) -> (n_16153) -> (B_16154) -> (__16155) ->
  (__16156) -> __16156

def rwlUL_39 :=
  lam (A_16157) -> (m_16158) -> (n_16159) -> (B_16160) -> (__16161) ->
  (__16162) -> __16162

def rwlLU_38 :=
  lam (A_16163) -> (m_16164) -> (n_16165) -> (B_16166) -> (__16167) ->
  (__16168) -> __16168

def rwlLL_37 :=
  lam (A_16169) -> (m_16170) -> (n_16171) -> (B_16172) -> (__16173) ->
  (__16174) -> __16174

def rwrUU_44 :=
  lam (A_16175) -> (m_16176) -> (n_16177) -> (B_16178) -> (__16179) ->
  (__16180) -> __16180

def rwrUL_43 :=
  lam (A_16181) -> (m_16182) -> (n_16183) -> (B_16184) -> (__16185) ->
  (__16186) -> __16186

def rwrLU_42 :=
  lam (A_16187) -> (m_16188) -> (n_16189) -> (B_16190) -> (__16191) ->
  (__16192) -> __16192

def rwrLL_41 :=
  lam (A_16193) -> (m_16194) -> (n_16195) -> (B_16196) -> (__16197) ->
  (__16198) -> __16198

def sing_elimUU_58 := lam (A_16199) -> (x_16200) -> (__16201) -> __16201

def sing_elimUL_57 := lam (A_16202) -> (x_16203) -> (__16204) -> __16204

def sing_elimLU_56 := lam (A_16205) -> (x_16206) -> (__16207) -> !!

def sing_elimLL_55 := lam (A_16208) -> (x_16209) -> (__16210) -> __16210

def not_11 :=
  lam (__16211) ->
    (match __16211 with
    | true_4 => constr0(false_5) | false_5 => constr0(true_4))

def and_12 :=
  lam (__16212) -> (__16213) ->
    (match __16212 with
    | true_4 =>
      (match __16213 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5))
    | false_5 => constr0(false_5))

def or_13 :=
  lam (__16214) -> (__16215) ->
    (match __16214 with
    | true_4 => constr0(true_4)
    | false_5 =>
      (match __16215 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def xor_14 :=
  lam (__16216) -> (__16217) ->
    (match __16216 with
    | true_4 =>
      (match __16217 with
      | true_4 => constr0(false_5) | false_5 => constr0(true_4))
    | false_5 =>
      (match __16217 with
      | true_4 => constr0(true_4) | false_5 => constr0(false_5)))

def lte_15 :=
  fun lte_16218 (__16219) -> (__16220) ->
    (match __16219 with
    | zero_6 => constr0(true_4)
    | _ =>
      (match __16219 with
      | succ_7 n_16221 =>
        (match __16220 with
        | zero_6 => constr0(false_5)
        | _ =>
          (match __16220 with
          | succ_7 n_16222 => ((lte_16218) n_16221 n_16222)))))

def lt_16 :=
  lam (x_16223) -> (y_16224) -> ((lte_15) (succ_7 x_16223) y_16224)

def pred_17 :=
  lam (__16225) ->
    (match __16225 with
    | zero_6 => constr0(zero_6)
    | _ => (match __16225 with
           | succ_7 n_16226 => n_16226))

def add_18 :=
  fun add_16227 (__16228) -> (__16229) ->
    (match __16228 with
    | zero_6 => __16229
    | _ =>
      (match __16228 with
      | succ_7 n_16230 => (succ_7 ((add_16227) n_16230 __16229))))

def sub_19 :=
  fun sub_16231 (__16232) -> (__16233) ->
    (match __16233 with
    | zero_6 => __16232
    | _ =>
      (match __16233 with
      | succ_7 n_16234 => ((sub_16231) ((pred_17) __16232) n_16234)))

def mul_20 :=
  fun mul_16235 (__16236) -> (__16237) ->
    (match __16236 with
    | zero_6 => constr0(zero_6)
    | _ =>
      (match __16236 with
      | succ_7 n_16238 => ((add_18) __16237 ((mul_16235) n_16238 __16237))))

def div_21 :=
  lam (x_16239) -> (y_16240) ->
    (match ((lt_16) x_16239 y_16240) with
    | true_4 => constr0(zero_6)
    | false_5 =>
      let loop_16241 :=
        fun loop_16242 (x_16243) -> (y_16244) ->
          (match ((sub_19) x_16243 ((pred_17) y_16244)) with
          | zero_6 => constr0(zero_6)
          | _ =>
            (match ((sub_19) x_16243 ((pred_17) y_16244)) with
            | succ_7 n_16245 => (succ_7 ((loop_16242) n_16245 y_16244))))
      in ((loop_16241) x_16239 y_16240))

def rem_22 :=
  lam (x_16246) -> (y_16247) ->
    ((sub_19) x_16246 ((mul_20) ((div_21) x_16246 y_16247) y_16247))

def free_listUU_66 :=
  fun free_list_16248 (A_16249) -> (f_16250) -> (__16251) ->
    (match __16251 with
    | nilUU_29 => constr0(ttU_22)
    | _ =>
      (match __16251 with
      | consUU_30 hd_16252 tl_16253 =>
        let __16254 := ((f_16250) hd_16252) in
        ((free_list_16248) NULL f_16250 tl_16253)))

def free_listUL_65 :=
  fun free_list_16255 (A_16256) -> (f_16257) -> (__16258) ->
    (match __16258 with
    | nilUL_27 => constr0(ttU_22)
    | _ =>
      (match __16258 with
      | consUL_28 hd_16259 tl_16260 =>
        let __16261 := ((f_16257) hd_16259) in
        ((free_list_16255) NULL f_16257 tl_16260)))

def free_listLL_63 :=
  fun free_list_16262 (A_16263) -> (f_16264) -> (__16265) ->
    (match __16265 with
    | nilLL_23 => constr0(ttU_22)
    | _ =>
      (match __16265 with
      | consLL_24 hd_16266 tl_16267 =>
        let __16268 := ((f_16264) hd_16266) in
        ((free_list_16262) NULL f_16264 tl_16267)))

def pow_26 :=
  lam (x_16269) -> (y_16270) ->
    let loop_16271 :=
      fun loop_16272 (acc_16273) -> (y_16274) ->
        (match (__lte__ y_16274 0) with
        | true_4 => acc_16273
        | false_5 =>
          ((loop_16272) (__mul__ x_16269 acc_16273) (__sub__ y_16274 1)))
    in ((loop_16271) 1 y_16270)

def powm_27 :=
  lam (x_16275) -> (y_16276) -> (m_16277) ->
    let loop_16278 :=
      fun loop_16279 (acc_16280) -> (y_16281) ->
        (match (__lte__ y_16281 0) with
        | true_4 => acc_16280
        | false_5 =>
          ((loop_16279)
            (__mod__ (__mul__ x_16275 acc_16280) m_16277) (__sub__ y_16281 1)))
    in ((loop_16278) 1 y_16276)

def ord_28 := lam (c_16282) -> (__ord__ c_16282)

def chr_29 := lam (i_16283) -> (__chr__ i_16283)

def str_30 := lam (c_16284) -> (__push__ "" c_16284)

def strlen_31 := lam (s_16285) -> (__size__ s_16285)

def string_of_int_32 :=
  lam (i_16286) ->
    let aux_16287 :=
      fun aux_16288 (i_16289) ->
        (match (__lte__ 10 i_16289) with
        | true_4 =>
          let r_16290 := (__mod__ i_16289 10) in
          let i_16291 := (__div__ i_16289 10) in
          (__push__ ((aux_16288) i_16291)
            ((chr_29) (__add__ r_16290 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_16289 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_16286) with
    | true_4 => ((aux_16287) i_16286)
    | false_5 => (__cat__ "~" ((aux_16287) (__neg__ i_16286))))

def vappendU_76 :=
  fun vappend_16292 (A_16293) -> (m_16294) -> (n_16295) -> (__16296) ->
  (__16297) -o
    (match __16296 with
    | vnilU_45 => __16297
    | _ =>
      (match __16296 with
      | vconsU_46 hd_16298 tl_16299 =>
        (vconsU_46
          hd_16298 ((vappend_16292) NULL NULL NULL tl_16299 __16297))))

def vappendL_75 :=
  fun vappend_16300 (A_16301) -> (m_16302) -> (n_16303) -> (__16304) ->
  (__16305) -o
    (match __16304 with
    | vnilL_43 => __16305
    | _ =>
      (match __16304 with
      | vconsL_44 hd_16306 tl_16307 =>
        (vconsL_44
          hd_16306 ((vappend_16300) NULL NULL NULL tl_16307 __16305))))

def vlenU_78 :=
  fun vlen_16308 (A_16309) -> (n_16310) -> (xs_16311) ->
    (match xs_16311 with
    | vnilU_45 => (ex1LL_39 constr0(zero_6) constr0(vnilU_45))
    | _ =>
      (match xs_16311 with
      | vconsU_46 hd_16312 tl_16313 =>
        (match ((vlen_16308) NULL NULL tl_16313) with
        | ex1LL_39 m_16314 n_16315 =>
          (ex1LL_39 (succ_7 m_16314) (vconsU_46 hd_16312 n_16315)))))

def vlenL_77 :=
  fun vlen_16316 (A_16317) -> (n_16318) -> (xs_16319) ->
    (match xs_16319 with
    | vnilL_43 => (ex1LL_39 constr0(zero_6) constr0(vnilL_43))
    | _ =>
      (match xs_16319 with
      | vconsL_44 hd_16320 tl_16321 =>
        (match ((vlen_16316) NULL NULL tl_16321) with
        | ex1LL_39 m_16322 n_16323 =>
          (ex1LL_39 (succ_7 m_16322) (vconsL_44 hd_16320 n_16323)))))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match(__99){
    zero_6 => {
      x_101 := true_4;
    }
    _ => {
      match[U](__99){
        succ_7(n_103) => {
          match(__100){
            zero_6 => {
              x_104 := false_5;
            }
            _ => {
              match[U](__100){
                succ_7(n_106) => {
                  x_107 := lte_98(n_103, n_106);
                  x_105 := x_107;
                }
              }
              x_104 := x_105;
            }
          }
          x_102 := x_104;
        }
      }
      x_101 := x_102;
    }
  }
  return x_101;
}

fn lt_108(x_109%U, y_110%U) {
  x_112 := mkconstr(succ_7, [x_109]);
  x_111 := lte_98(x_112, y_110);
  return x_111;
}

fn pred_113(__114%U) {
  match(__114){
    zero_6 => {
      x_115 := zero_6;
    }
    _ => {
      match[U](__114){ succ_7(n_117) => {
                         x_116 := n_117;
                       } }
      x_115 := x_116;
    }
  }
  return x_115;
}

fn add_118(__119%U, __120%U) {
  match(__119){
    zero_6 => {
      x_121 := __120;
    }
    _ => {
      match[U](__119){
        succ_7(n_123) => {
          x_124 := add_118(n_123, __120);
          x_125 := mkconstr(succ_7, [x_124]);
          x_122 := x_125;
        }
      }
      x_121 := x_122;
    }
  }
  return x_121;
}

fn sub_126(__127%U, __128%U) {
  match(__128){
    zero_6 => {
      x_129 := __127;
    }
    _ => {
      match[U](__128){
        succ_7(n_131) => {
          x_133 := pred_113(__127);
          x_132 := sub_126(x_133, n_131);
          x_130 := x_132;
        }
      }
      x_129 := x_130;
    }
  }
  return x_129;
}

fn mul_134(__135%U, __136%U) {
  match(__135){
    zero_6 => {
      x_137 := zero_6;
    }
    _ => {
      match[U](__135){
        succ_7(n_139) => {
          x_141 := mul_134(n_139, __136);
          x_140 := add_118(__136, x_141);
          x_138 := x_140;
        }
      }
      x_137 := x_138;
    }
  }
  return x_137;
}

fn div_142(x_143%U, y_144%U) {
  x_146 := lt_108(x_143, y_144);
  match(x_146){
    true_4 => {
      x_145 := zero_6;
    }
    false_5 => {
      x_148 :=
        fn loop_149(x_150%U, y_151%U) {
          x_154 := pred_113(y_151);
          x_153 := sub_126(x_150, x_154);
          match(x_153){
            zero_6 => {
              x_152 := zero_6;
            }
            _ => {
              x_157 := pred_113(y_151);
              x_156 := sub_126(x_150, x_157);
              match[U](x_156){
                succ_7(n_158) => {
                  x_159 := loop_149(n_158, y_151);
                  x_160 := mkconstr(succ_7, [x_159]);
                  x_155 := x_160;
                }
              }
              x_152 := x_155;
            }
          }
          return x_152;
        };
      loop_147 := x_148;
      x_161 := loop_147(x_143, y_144);
      x_145 := x_161;
    }
  }
  return x_145;
}

fn rem_162(x_163%U, y_164%U) {
  x_167 := div_142(x_163, y_164);
  x_166 := mul_134(x_167, y_164);
  x_165 := sub_126(x_163, x_166);
  return x_165;
}

fn free_listUU_168(A_169%U, f_170%U, __171%U) {
  match(__171){
    nilUU_29 => {
      x_172 := ttU_22;
    }
    _ => {
      match[U](__171){
        consUU_30(hd_174, tl_175) => {
          x_177 := f_170(hd_174);
          __176 := x_177;
          x_178 := free_listUU_168(NULL, f_170, tl_175);
          x_173 := x_178;
        }
      }
      x_172 := x_173;
    }
  }
  return x_172;
}

fn free_listUL_179(A_180%U, f_181%U, __182%U) {
  match(__182){
    nilUL_27 => {
      x_183 := ttU_22;
    }
    _ => {
      match[L](__182){
        consUL_28(hd_185, tl_186) => {
          x_188 := f_181(hd_185);
          __187 := x_188;
          x_189 := free_listUL_179(NULL, f_181, tl_186);
          x_184 := x_189;
        }
      }
      x_183 := x_184;
    }
  }
  return x_183;
}

fn free_listLL_190(A_191%U, f_192%U, __193%U) {
  match(__193){
    nilLL_23 => {
      x_194 := ttU_22;
    }
    _ => {
      match[L](__193){
        consLL_24(hd_196, tl_197) => {
          x_199 := f_192(hd_196);
          __198 := x_199;
          x_200 := free_listLL_190(NULL, f_192, tl_197);
          x_195 := x_200;
        }
      }
      x_194 := x_195;
    }
  }
  return x_194;
}

fn pow_201(x_202%U, y_203%U) {
  x_205 :=
    fn loop_206(acc_207%U, y_208%U) {
      x_210 := lte(y_208, 0);
      match(x_210){
        true_4 => {
          x_209 := acc_207;
        }
        false_5 => {
          x_212 := mul(x_202, acc_207);
          x_213 := sub(y_208, 1);
          x_211 := loop_206(x_212, x_213);
          x_209 := x_211;
        }
      }
      return x_209;
    };
  loop_204 := x_205;
  x_214 := loop_204(1, y_203);
  return x_214;
}

fn powm_215(x_216%U, y_217%U, m_218%U) {
  x_220 :=
    fn loop_221(acc_222%U, y_223%U) {
      x_225 := lte(y_223, 0);
      match(x_225){
        true_4 => {
          x_224 := acc_222;
        }
        false_5 => {
          x_228 := mul(x_216, acc_222);
          x_227 := mod(x_228, m_218);
          x_229 := sub(y_223, 1);
          x_226 := loop_221(x_227, x_229);
          x_224 := x_226;
        }
      }
      return x_224;
    };
  loop_219 := x_220;
  x_230 := loop_219(1, y_217);
  return x_230;
}

fn ord_231(c_232%U) {
  x_233 := ord(c_232);
  return x_233;
}

fn chr_234(i_235%U) {
  x_236 := chr(i_235);
  return x_236;
}

fn str_237(c_238%U) {
  x_240 := str("");
  x_239 := push(x_240, c_238);
  return x_239;
}

fn strlen_241(s_242%U) {
  x_243 := size(s_242);
  return x_243;
}

fn string_of_int_244(i_245%U) {
  x_247 :=
    fn aux_248(i_249%U) {
      x_251 := lte(10, i_249);
      match(x_251){
        true_4 => {
          x_253 := mod(i_249, 10);
          r_252 := x_253;
          x_255 := div(i_249, 10);
          i_254 := x_255;
          x_257 := aux_248(i_254);
          x_260 := ord_231(0);
          x_259 := add(r_252, x_260);
          x_258 := chr_234(x_259);
          x_256 := push(x_257, x_258);
          x_250 := x_256;
        }
        false_5 => {
          x_264 := ord_231(0);
          x_263 := add(i_249, x_264);
          x_262 := chr_234(x_263);
          x_261 := str_237(x_262);
          x_250 := x_261;
        }
      }
      return x_250;
    };
  aux_246 := x_247;
  x_266 := lte(0, i_245);
  match(x_266){
    true_4 => {
      x_267 := aux_246(i_245);
      x_265 := x_267;
    }
    false_5 => {
      x_269 := str("~");
      x_271 := neg(i_245);
      x_270 := aux_246(x_271);
      x_268 := cat(x_269, x_270);
      x_265 := x_268;
    }
  }
  return x_265;
}

fn vappendU_272(A_273%U, m_274%U, n_275%U, __276%U, __277%L) {
  match(__276){
    vnilU_45 => {
      x_278 := __277;
    }
    _ => {
      match[L](__276){
        vconsU_46(hd_280, tl_281) => {
          x_282 := vappendU_272(NULL, NULL, NULL, tl_281, __277);
          x_283 := mkconstr(vconsU_46, [hd_280, x_282]);
          x_279 := x_283;
        }
      }
      x_278 := x_279;
    }
  }
  return x_278;
}

fn vappendL_284(A_285%U, m_286%U, n_287%U, __288%U, __289%L) {
  match(__288){
    vnilL_43 => {
      x_290 := __289;
    }
    _ => {
      match[L](__288){
        vconsL_44(hd_292, tl_293) => {
          x_294 := vappendL_284(NULL, NULL, NULL, tl_293, __289);
          x_295 := mkconstr(vconsL_44, [hd_292, x_294]);
          x_291 := x_295;
        }
      }
      x_290 := x_291;
    }
  }
  return x_290;
}

fn vlenU_296(A_297%U, n_298%U, xs_299%U) {
  match(xs_299){
    vnilU_45 => {
      x_301 := mkconstr(ex1LL_39, [zero_6, vnilU_45]);
      x_300 := x_301;
    }
    _ => {
      match[L](xs_299){
        vconsU_46(hd_303, tl_304) => {
          x_306 := vlenU_296(NULL, NULL, tl_304);
          match[L](x_306){
            ex1LL_39(m_307, n_308) => {
              x_309 := mkconstr(succ_7, [m_307]);
              x_310 := mkconstr(vconsU_46, [hd_303, n_308]);
              x_311 := mkconstr(ex1LL_39, [x_309, x_310]);
              x_305 := x_311;
            }
          }
          x_302 := x_305;
        }
      }
      x_300 := x_302;
    }
  }
  return x_300;
}

fn vlenL_312(A_313%U, n_314%U, xs_315%U) {
  match(xs_315){
    vnilL_43 => {
      x_317 := mkconstr(ex1LL_39, [zero_6, vnilL_43]);
      x_316 := x_317;
    }
    _ => {
      match[L](xs_315){
        vconsL_44(hd_319, tl_320) => {
          x_322 := vlenL_312(NULL, NULL, tl_320);
          match[L](x_322){
            ex1LL_39(m_323, n_324) => {
              x_325 := mkconstr(succ_7, [m_323]);
              x_326 := mkconstr(vconsL_44, [hd_319, n_324]);
              x_327 := mkconstr(ex1LL_39, [x_325, x_326]);
              x_321 := x_327;
            }
          }
          x_318 := x_321;
        }
      }
      x_316 := x_318;
    }
  }
  return x_316;
}

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){ true_4 => {
                 x_81 := false_5;
               }
               false_5 => {
                 x_81 := true_4;
               }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4 => {
      match(__84){
        true_4 => {
          x_86 := true_4;
        }
        false_5 => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5 => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4 => {
      x_90 := true_4;
    }
    false_5 => {
      match(__89){
        true_4 => {
          x_91 := true_4;
        }
        false_5 => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4 => {
      match(__94){
        true_4 => {
          x_96 := false_5;
        }
        false_5 => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5 => {
      match(__94){
        true_4 => {
          x_97 := true_4;
        }
        false_5 => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match(__99){
    zero_6 => {
      x_101 := true_4;
    }
    _ => {
      match[U](__99){
        succ_7(n_103) => {
          match(__100){
            zero_6 => {
              x_104 := false_5;
            }
            _ => {
              match[U](__100){
                succ_7(n_106) => {
                  x_107 := lte_98(n_103, n_106);
                  x_105 := x_107;
                }
              }
              x_104 := x_105;
            }
          }
          x_102 := x_104;
        }
      }
      x_101 := x_102;
    }
  }
  return x_101;
}

fn lt_108(x_109%U, y_110%U) {
  x_112 := mkconstr(succ_7, [x_109]);
  x_111 := lte_98(x_112, y_110);
  return x_111;
}

fn pred_113(__114%U) {
  match(__114){
    zero_6 => {
      x_115 := zero_6;
    }
    _ => {
      match[U](__114){ succ_7(n_117) => {
                         x_116 := n_117;
                       } }
      x_115 := x_116;
    }
  }
  return x_115;
}

fn add_118(__119%U, __120%U) {
  match(__119){
    zero_6 => {
      x_121 := __120;
    }
    _ => {
      match[U](__119){
        succ_7(n_123) => {
          x_124 := add_118(n_123, __120);
          x_125 := mkconstr(succ_7, [x_124]);
          x_122 := x_125;
        }
      }
      x_121 := x_122;
    }
  }
  return x_121;
}

fn sub_126(__127%U, __128%U) {
  match(__128){
    zero_6 => {
      x_129 := __127;
    }
    _ => {
      match[U](__128){
        succ_7(n_131) => {
          x_133 := pred_113(__127);
          x_132 := sub_126(x_133, n_131);
          x_130 := x_132;
        }
      }
      x_129 := x_130;
    }
  }
  return x_129;
}

fn mul_134(__135%U, __136%U) {
  match(__135){
    zero_6 => {
      x_137 := zero_6;
    }
    _ => {
      match[U](__135){
        succ_7(n_139) => {
          x_141 := mul_134(n_139, __136);
          x_140 := add_118(__136, x_141);
          x_138 := x_140;
        }
      }
      x_137 := x_138;
    }
  }
  return x_137;
}

fn div_142(x_143%U, y_144%U) {
  x_146 := lt_108(x_143, y_144);
  match(x_146){
    true_4 => {
      x_145 := zero_6;
    }
    false_5 => {
      x_148 :=
        fn loop_149(x_150%U, y_151%U) {
          x_154 := pred_113(y_151);
          x_153 := sub_126(x_150, x_154);
          match(x_153){
            zero_6 => {
              x_152 := zero_6;
            }
            _ => {
              x_157 := pred_113(y_151);
              x_156 := sub_126(x_150, x_157);
              match[U](x_156){
                succ_7(n_158) => {
                  x_159 := loop_149(n_158, y_151);
                  x_160 := mkconstr(succ_7, [x_159]);
                  x_155 := x_160;
                }
              }
              x_152 := x_155;
            }
          }
          return x_152;
        };
      loop_147 := x_148;
      x_161 := loop_147(x_143, y_144);
      x_145 := x_161;
    }
  }
  return x_145;
}

fn rem_162(x_163%U, y_164%U) {
  x_167 := div_142(x_163, y_164);
  x_166 := mul_134(x_167, y_164);
  x_165 := sub_126(x_163, x_166);
  return x_165;
}

fn free_listUU_168(A_169%U, f_170%U, __171%U) {
  match(__171){
    nilUU_29 => {
      x_172 := ttU_22;
    }
    _ => {
      match[U](__171){
        consUU_30(hd_174, tl_175) => {
          x_177 := f_170(hd_174);
          __176 := x_177;
          x_178 := free_listUU_168(NULL, f_170, tl_175);
          x_173 := x_178;
        }
      }
      x_172 := x_173;
    }
  }
  return x_172;
}

fn free_listUL_179(A_180%U, f_181%U, __182%U) {
  match(__182){
    nilUL_27 => {
      x_183 := ttU_22;
    }
    _ => {
      match[L](__182){
        consUL_28(hd_185, tl_186) => {
          x_188 := f_181(hd_185);
          __187 := x_188;
          x_189 := free_listUL_179(NULL, f_181, tl_186);
          x_184 := x_189;
          free(__182);
        }
      }
      x_183 := x_184;
    }
  }
  return x_183;
}

fn free_listLL_190(A_191%U, f_192%U, __193%U) {
  match(__193){
    nilLL_23 => {
      x_194 := ttU_22;
    }
    _ => {
      match[L](__193){
        consLL_24(hd_196, tl_197) => {
          x_199 := f_192(hd_196);
          __198 := x_199;
          x_200 := free_listLL_190(NULL, f_192, tl_197);
          x_195 := x_200;
          free(__193);
        }
      }
      x_194 := x_195;
    }
  }
  return x_194;
}

fn pow_201(x_202%U, y_203%U) {
  x_205 :=
    fn loop_206(acc_207%U, y_208%U) {
      x_210 := lte(y_208, 0);
      match(x_210){
        true_4 => {
          x_209 := acc_207;
        }
        false_5 => {
          x_212 := mul(x_202, acc_207);
          x_213 := sub(y_208, 1);
          x_211 := loop_206(x_212, x_213);
          x_209 := x_211;
        }
      }
      return x_209;
    };
  loop_204 := x_205;
  x_214 := loop_204(1, y_203);
  return x_214;
}

fn powm_215(x_216%U, y_217%U, m_218%U) {
  x_220 :=
    fn loop_221(acc_222%U, y_223%U) {
      x_225 := lte(y_223, 0);
      match(x_225){
        true_4 => {
          x_224 := acc_222;
        }
        false_5 => {
          x_228 := mul(x_216, acc_222);
          x_227 := mod(x_228, m_218);
          x_229 := sub(y_223, 1);
          x_226 := loop_221(x_227, x_229);
          x_224 := x_226;
        }
      }
      return x_224;
    };
  loop_219 := x_220;
  x_230 := loop_219(1, y_217);
  return x_230;
}

fn ord_231(c_232%U) {
  x_233 := ord(c_232);
  return x_233;
}

fn chr_234(i_235%U) {
  x_236 := chr(i_235);
  return x_236;
}

fn str_237(c_238%U) {
  x_240 := str("");
  x_239 := push(x_240, c_238);
  return x_239;
}

fn strlen_241(s_242%U) {
  x_243 := size(s_242);
  return x_243;
}

fn string_of_int_244(i_245%U) {
  x_247 :=
    fn aux_248(i_249%U) {
      x_251 := lte(10, i_249);
      match(x_251){
        true_4 => {
          x_253 := mod(i_249, 10);
          r_252 := x_253;
          x_255 := div(i_249, 10);
          i_254 := x_255;
          x_257 := aux_248(i_254);
          x_260 := ord_231(0);
          x_259 := add(r_252, x_260);
          x_258 := chr_234(x_259);
          x_256 := push(x_257, x_258);
          x_250 := x_256;
        }
        false_5 => {
          x_264 := ord_231(0);
          x_263 := add(i_249, x_264);
          x_262 := chr_234(x_263);
          x_261 := str_237(x_262);
          x_250 := x_261;
        }
      }
      return x_250;
    };
  aux_246 := x_247;
  x_266 := lte(0, i_245);
  match(x_266){
    true_4 => {
      x_267 := aux_246(i_245);
      x_265 := x_267;
    }
    false_5 => {
      x_269 := str("~");
      x_271 := neg(i_245);
      x_270 := aux_246(x_271);
      x_268 := cat(x_269, x_270);
      x_265 := x_268;
    }
  }
  return x_265;
}

fn vappendU_272(A_273%U, m_274%U, n_275%U, __276%U, __277%L) {
  match(__276){
    vnilU_45 => {
      x_278 := __277;
    }
    _ => {
      match[L](__276){
        vconsU_46(hd_280, tl_281) => {
          x_282 := vappendU_272(NULL, NULL, NULL, tl_281, __277);
          x_283 := reconstr(__276, vconsU_46, [hd_280, x_282]);
          x_279 := x_283;
        }
      }
      x_278 := x_279;
    }
  }
  return x_278;
}

fn vappendL_284(A_285%U, m_286%U, n_287%U, __288%U, __289%L) {
  match(__288){
    vnilL_43 => {
      x_290 := __289;
    }
    _ => {
      match[L](__288){
        vconsL_44(hd_292, tl_293) => {
          x_294 := vappendL_284(NULL, NULL, NULL, tl_293, __289);
          x_295 := reconstr(__288, vconsL_44, [hd_292, x_294]);
          x_291 := x_295;
        }
      }
      x_290 := x_291;
    }
  }
  return x_290;
}

fn vlenU_296(A_297%U, n_298%U, xs_299%U) {
  match(xs_299){
    vnilU_45 => {
      x_301 := mkconstr(ex1LL_39, [zero_6, vnilU_45]);
      x_300 := x_301;
    }
    _ => {
      match[L](xs_299){
        vconsU_46(hd_303, tl_304) => {
          x_306 := vlenU_296(NULL, NULL, tl_304);
          match[L](x_306){
            ex1LL_39(m_307, n_308) => {
              x_309 := mkconstr(succ_7, [m_307]);
              x_310 := reconstr(x_306, vconsU_46, [hd_303, n_308]);
              x_311 := reconstr(xs_299, ex1LL_39, [x_309, x_310]);
              x_305 := x_311;
            }
          }
          x_302 := x_305;
        }
      }
      x_300 := x_302;
    }
  }
  return x_300;
}

fn vlenL_312(A_313%U, n_314%U, xs_315%U) {
  match(xs_315){
    vnilL_43 => {
      x_317 := mkconstr(ex1LL_39, [zero_6, vnilL_43]);
      x_316 := x_317;
    }
    _ => {
      match[L](xs_315){
        vconsL_44(hd_319, tl_320) => {
          x_322 := vlenL_312(NULL, NULL, tl_320);
          match[L](x_322){
            ex1LL_39(m_323, n_324) => {
              x_325 := mkconstr(succ_7, [m_323]);
              x_326 := reconstr(x_322, vconsL_44, [hd_319, n_324]);
              x_327 := reconstr(xs_315, ex1LL_39, [x_325, x_326]);
              x_321 := x_327;
            }
          }
          x_318 := x_321;
        }
      }
      x_316 := x_318;
    }
  }
  return x_316;
}

[trans4e success]

-----------------------------------------

fn fn0_idU_328(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_329(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_330 := fn0_idU_328(A_2, m_3);
  return x_330;
}

fn fn0_idL_331(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_332(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_333 := fn0_idL_331(A_5, m_6);
  return x_333;
}

fn fn0_rwlUU_334(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_335(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_336 := fn0_rwlUU_334(A_8, m_9, n_10, B_11, __12, __13);
  return x_336;
}

fn fn0_rwlUL_337(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_338(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_339 := fn0_rwlUL_337(A_15, m_16, n_17, B_18, __19, __20);
  return x_339;
}

fn fn0_rwlLU_340(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_341(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_342 := fn0_rwlLU_340(A_22, m_23, n_24, B_25, __26, __27);
  return x_342;
}

fn fn0_rwlLL_343(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_344(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_345 := fn0_rwlLL_343(A_29, m_30, n_31, B_32, __33, __34);
  return x_345;
}

fn fn0_rwrUU_346(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_347(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_348 := fn0_rwrUU_346(A_36, m_37, n_38, B_39, __40, __41);
  return x_348;
}

fn fn0_rwrUL_349(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_350(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_351 := fn0_rwrUL_349(A_43, m_44, n_45, B_46, __47, __48);
  return x_351;
}

fn fn0_rwrLU_352(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_353(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_354 := fn0_rwrLU_352(A_50, m_51, n_52, B_53, __54, __55);
  return x_354;
}

fn fn0_rwrLL_355(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_356(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_357 := fn0_rwrLL_355(A_57, m_58, n_59, B_60, __61, __62);
  return x_357;
}

fn fn0_sing_elimUU_358(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_359(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_360 := fn0_sing_elimUU_358(A_64, x_65, __66);
  return x_360;
}

fn fn0_sing_elimUL_361(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_362(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_363 := fn0_sing_elimUL_361(A_68, x_69, __70);
  return x_363;
}

fn fn0_sing_elimLU_364(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_365(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_366 := fn0_sing_elimLU_364(A_72, x_73, __74);
  return x_366;
}

fn fn0_sing_elimLL_367(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_368(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_369 := fn0_sing_elimLL_367(A_76, x_77, __78);
  return x_369;
}

fn fn0_not_370(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_371(env) {
  __80 := env[1];
  x_372 := fn0_not_370(__80);
  return x_372;
}

fn fn0_and_373(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_374(env) {
  __83 := env[1];
  __84 := env[2];
  x_375 := fn0_and_373(__83, __84);
  return x_375;
}

fn fn0_or_376(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_377(env) {
  __88 := env[1];
  __89 := env[2];
  x_378 := fn0_or_376(__88, __89);
  return x_378;
}

fn fn0_xor_379(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_380(env) {
  __93 := env[1];
  __94 := env[2];
  x_381 := fn0_xor_379(__93, __94);
  return x_381;
}

fn fn0_lte_382(__99, __100) {
  switch(__99){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    _ => {
      getbox(n_103, __99, 0);
      switch(__100){
        zero_6 => {
          move1(x_104, false_5);
          break;
        }
        _ => {
          getbox(n_106, __100, 0);
          x_107 := fn0_lte_382(n_103, n_106);
          move1(x_105, x_107);
          move1(x_104, x_105);
          break;
        }
      }
      move1(x_102, x_104);
      move1(x_101, x_102);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_383(env) {
  __99 := env[1];
  __100 := env[2];
  x_384 := fn0_lte_382(__99, __100);
  return x_384;
}

fn fn0_lt_385(x_109, y_110) {
  mkbox(x_112, succ_7, 1);
  setbox(x_112, x_109, 0);
  x_111 := fn0_lte_382(x_112, y_110);
  return x_111;
}

fn fn1_lt_386(env) {
  x_109 := env[1];
  y_110 := env[2];
  x_387 := fn0_lt_385(x_109, y_110);
  return x_387;
}

fn fn0_pred_388(__114) {
  switch(__114){
    zero_6 => {
      move1(x_115, zero_6);
      break;
    }
    _ => {
      getbox(n_117, __114, 0);
      move1(x_116, n_117);
      move1(x_115, x_116);
      break;
    }
  }
  return x_115;
}

fn fn1_pred_389(env) {
  __114 := env[1];
  x_390 := fn0_pred_388(__114);
  return x_390;
}

fn fn0_add_391(__119, __120) {
  switch(__119){
    zero_6 => {
      move1(x_121, __120);
      break;
    }
    _ => {
      getbox(n_123, __119, 0);
      x_124 := fn0_add_391(n_123, __120);
      mkbox(x_125, succ_7, 1);
      setbox(x_125, x_124, 0);
      move1(x_122, x_125);
      move1(x_121, x_122);
      break;
    }
  }
  return x_121;
}

fn fn1_add_392(env) {
  __119 := env[1];
  __120 := env[2];
  x_393 := fn0_add_391(__119, __120);
  return x_393;
}

fn fn0_sub_394(__127, __128) {
  switch(__128){
    zero_6 => {
      move1(x_129, __127);
      break;
    }
    _ => {
      getbox(n_131, __128, 0);
      x_133 := fn0_pred_388(__127);
      x_132 := fn0_sub_394(x_133, n_131);
      move1(x_130, x_132);
      move1(x_129, x_130);
      break;
    }
  }
  return x_129;
}

fn fn1_sub_395(env) {
  __127 := env[1];
  __128 := env[2];
  x_396 := fn0_sub_394(__127, __128);
  return x_396;
}

fn fn0_mul_397(__135, __136) {
  switch(__135){
    zero_6 => {
      move1(x_137, zero_6);
      break;
    }
    _ => {
      getbox(n_139, __135, 0);
      x_141 := fn0_mul_397(n_139, __136);
      x_140 := fn0_add_391(__136, x_141);
      move1(x_138, x_140);
      move1(x_137, x_138);
      break;
    }
  }
  return x_137;
}

fn fn1_mul_398(env) {
  __135 := env[1];
  __136 := env[2];
  x_399 := fn0_mul_397(__135, __136);
  return x_399;
}

fn fn0_div_400(x_143, y_144) {
  x_146 := fn0_lt_385(x_143, y_144);
  switch(x_146){
    true_4 => {
      move1(x_145, zero_6);
      break;
    }
    false_5 => {
      mkclo1(x_148, fn1_loop_402, fvc:=2, argc:=2);
      setclo(x_148, pred_113, 1);
      setclo(x_148, sub_126, 2);
      move1(loop_147, x_148);
      appc(x_406, loop_147, x_143);
      appc(x_407, x_406, y_144);
      move1(x_161, x_407);
      move1(x_145, x_161);
      break;
    }
  }
  return x_145;
}

fn fn1_div_401(env) {
  x_143 := env[1];
  y_144 := env[2];
  x_409 := fn0_div_400(x_143, y_144);
  return x_409;
}

fn fn0_rem_410(x_163, y_164) {
  x_167 := fn0_div_400(x_163, y_164);
  x_166 := fn0_mul_397(x_167, y_164);
  x_165 := fn0_sub_394(x_163, x_166);
  return x_165;
}

fn fn1_rem_411(env) {
  x_163 := env[1];
  y_164 := env[2];
  x_412 := fn0_rem_410(x_163, y_164);
  return x_412;
}

fn fn0_free_listUU_413(A_169, f_170, __171) {
  switch(__171){
    nilUU_29 => {
      move1(x_172, ttU_22);
      break;
    }
    _ => {
      getbox(hd_174, __171, 0);
      getbox(tl_175, __171, 1);
      appc(x_415, f_170, hd_174);
      move1(x_177, x_415);
      move1(__176, x_177);
      x_178 := fn0_free_listUU_413(NULL, f_170, tl_175);
      move1(x_173, x_178);
      move1(x_172, x_173);
      break;
    }
  }
  return x_172;
}

fn fn1_free_listUU_414(env) {
  A_169 := env[1];
  f_170 := env[2];
  __171 := env[3];
  x_417 := fn0_free_listUU_413(A_169, f_170, __171);
  return x_417;
}

fn fn0_free_listUL_418(A_180, f_181, __182) {
  switch(__182){
    nilUL_27 => {
      move1(x_183, ttU_22);
      break;
    }
    _ => {
      getbox(hd_185, __182, 0);
      getbox(tl_186, __182, 1);
      appc(x_420, f_181, hd_185);
      move1(x_188, x_420);
      move1(__187, x_188);
      x_189 := fn0_free_listUL_418(NULL, f_181, tl_186);
      move1(x_184, x_189);
      free(__182);
      move1(x_183, x_184);
      break;
    }
  }
  return x_183;
}

fn fn1_free_listUL_419(env) {
  A_180 := env[1];
  f_181 := env[2];
  __182 := env[3];
  x_422 := fn0_free_listUL_418(A_180, f_181, __182);
  return x_422;
}

fn fn0_free_listLL_423(A_191, f_192, __193) {
  switch(__193){
    nilLL_23 => {
      move1(x_194, ttU_22);
      break;
    }
    _ => {
      getbox(hd_196, __193, 0);
      getbox(tl_197, __193, 1);
      appc(x_425, f_192, hd_196);
      move1(x_199, x_425);
      move1(__198, x_199);
      x_200 := fn0_free_listLL_423(NULL, f_192, tl_197);
      move1(x_195, x_200);
      free(__193);
      move1(x_194, x_195);
      break;
    }
  }
  return x_194;
}

fn fn1_free_listLL_424(env) {
  A_191 := env[1];
  f_192 := env[2];
  __193 := env[3];
  x_427 := fn0_free_listLL_423(A_191, f_192, __193);
  return x_427;
}

fn fn0_pow_428(x_202, y_203) {
  mkclo1(x_205, fn1_loop_430, fvc:=1, argc:=2);
  setclo(x_205, x_202, 1);
  move1(loop_204, x_205);
  appc(x_434, loop_204, 1);
  appc(x_435, x_434, y_203);
  move1(x_214, x_435);
  return x_214;
}

fn fn1_pow_429(env) {
  x_202 := env[1];
  y_203 := env[2];
  x_437 := fn0_pow_428(x_202, y_203);
  return x_437;
}

fn fn0_powm_438(x_216, y_217, m_218) {
  mkclo1(x_220, fn1_loop_440, fvc:=2, argc:=2);
  setclo(x_220, x_216, 1);
  setclo(x_220, m_218, 2);
  move1(loop_219, x_220);
  appc(x_444, loop_219, 1);
  appc(x_445, x_444, y_217);
  move1(x_230, x_445);
  return x_230;
}

fn fn1_powm_439(env) {
  x_216 := env[1];
  y_217 := env[2];
  m_218 := env[3];
  x_447 := fn0_powm_438(x_216, y_217, m_218);
  return x_447;
}

fn fn0_ord_448(c_232) {
  ord(x_233, c_232);
  return x_233;
}

fn fn1_ord_449(env) {
  c_232 := env[1];
  x_450 := fn0_ord_448(c_232);
  return x_450;
}

fn fn0_chr_451(i_235) {
  chr(x_236, i_235);
  return x_236;
}

fn fn1_chr_452(env) {
  i_235 := env[1];
  x_453 := fn0_chr_451(i_235);
  return x_453;
}

fn fn0_str_454(c_238) {
  str(x_240, "")
  push(x_239, x_240, c_238);
  return x_239;
}

fn fn1_str_455(env) {
  c_238 := env[1];
  x_456 := fn0_str_454(c_238);
  return x_456;
}

fn fn0_strlen_457(s_242) {
  size(x_243, s_242);
  return x_243;
}

fn fn1_strlen_458(env) {
  s_242 := env[1];
  x_459 := fn0_strlen_457(s_242);
  return x_459;
}

fn fn0_string_of_int_460(i_245) {
  mkclo1(x_247, fn1_aux_462, fvc:=3, argc:=1);
  setclo(x_247, ord_231, 1);
  setclo(x_247, chr_234, 2);
  setclo(x_247, str_237, 3);
  move1(aux_246, x_247);
  lte(x_266, 0, i_245);
  switch(x_266){
    true_4 => {
      appc(x_465, aux_246, i_245);
      move1(x_267, x_465);
      move1(x_265, x_267);
      break;
    }
    false_5 => {
      str(x_269, "~")
      neg(x_271, i_245);
      appc(x_467, aux_246, x_271);
      move1(x_270, x_467);
      cat(x_268, x_269, x_270);
      move1(x_265, x_268);
      break;
    }
  }
  return x_265;
}

fn fn1_string_of_int_461(env) {
  i_245 := env[1];
  x_469 := fn0_string_of_int_460(i_245);
  return x_469;
}

fn fn0_vappendU_470(A_273, m_274, n_275, __276, __277) {
  switch(__276){
    vnilU_45 => {
      move1(x_278, __277);
      break;
    }
    _ => {
      getbox(hd_280, __276, 0);
      getbox(tl_281, __276, 1);
      x_282 := fn0_vappendU_470(NULL, NULL, NULL, tl_281, __277);
      rebox(x_283, __276, vconsU_46);
      setbox(x_283, hd_280, 0);
      setbox(x_283, x_282, 1);
      move1(x_279, x_283);
      move1(x_278, x_279);
      break;
    }
  }
  return x_278;
}

fn fn1_vappendU_471(env) {
  A_273 := env[1];
  m_274 := env[2];
  n_275 := env[3];
  __276 := env[4];
  __277 := env[5];
  x_472 := fn0_vappendU_470(A_273, m_274, n_275, __276, __277);
  return x_472;
}

fn fn0_vappendL_473(A_285, m_286, n_287, __288, __289) {
  switch(__288){
    vnilL_43 => {
      move1(x_290, __289);
      break;
    }
    _ => {
      getbox(hd_292, __288, 0);
      getbox(tl_293, __288, 1);
      x_294 := fn0_vappendL_473(NULL, NULL, NULL, tl_293, __289);
      rebox(x_295, __288, vconsL_44);
      setbox(x_295, hd_292, 0);
      setbox(x_295, x_294, 1);
      move1(x_291, x_295);
      move1(x_290, x_291);
      break;
    }
  }
  return x_290;
}

fn fn1_vappendL_474(env) {
  A_285 := env[1];
  m_286 := env[2];
  n_287 := env[3];
  __288 := env[4];
  __289 := env[5];
  x_475 := fn0_vappendL_473(A_285, m_286, n_287, __288, __289);
  return x_475;
}

fn fn0_vlenU_476(A_297, n_298, xs_299) {
  switch(xs_299){
    vnilU_45 => {
      mkbox(x_301, ex1LL_39, 2);
      setbox(x_301, zero_6, 0);
      setbox(x_301, vnilU_45, 1);
      move1(x_300, x_301);
      break;
    }
    _ => {
      getbox(hd_303, xs_299, 0);
      getbox(tl_304, xs_299, 1);
      x_306 := fn0_vlenU_476(NULL, NULL, tl_304);
      getbox(m_307, x_306, 0);
      getbox(n_308, x_306, 1);
      mkbox(x_309, succ_7, 1);
      setbox(x_309, m_307, 0);
      rebox(x_310, x_306, vconsU_46);
      setbox(x_310, hd_303, 0);
      setbox(x_310, n_308, 1);
      rebox(x_311, xs_299, ex1LL_39);
      setbox(x_311, x_309, 0);
      setbox(x_311, x_310, 1);
      move1(x_305, x_311);
      move1(x_302, x_305);
      move1(x_300, x_302);
      break;
    }
  }
  return x_300;
}

fn fn1_vlenU_477(env) {
  A_297 := env[1];
  n_298 := env[2];
  xs_299 := env[3];
  x_478 := fn0_vlenU_476(A_297, n_298, xs_299);
  return x_478;
}

fn fn0_vlenL_479(A_313, n_314, xs_315) {
  switch(xs_315){
    vnilL_43 => {
      mkbox(x_317, ex1LL_39, 2);
      setbox(x_317, zero_6, 0);
      setbox(x_317, vnilL_43, 1);
      move1(x_316, x_317);
      break;
    }
    _ => {
      getbox(hd_319, xs_315, 0);
      getbox(tl_320, xs_315, 1);
      x_322 := fn0_vlenL_479(NULL, NULL, tl_320);
      getbox(m_323, x_322, 0);
      getbox(n_324, x_322, 1);
      mkbox(x_325, succ_7, 1);
      setbox(x_325, m_323, 0);
      rebox(x_326, x_322, vconsL_44);
      setbox(x_326, hd_319, 0);
      setbox(x_326, n_324, 1);
      rebox(x_327, xs_315, ex1LL_39);
      setbox(x_327, x_325, 0);
      setbox(x_327, x_326, 1);
      move1(x_321, x_327);
      move1(x_318, x_321);
      move1(x_316, x_318);
      break;
    }
  }
  return x_316;
}

fn fn1_vlenL_480(env) {
  A_313 := env[1];
  n_314 := env[2];
  xs_315 := env[3];
  x_481 := fn0_vlenL_479(A_313, n_314, xs_315);
  return x_481;
}

fn fn1_aux_462(env) {
  aux_248 := env[0];
  ord_231 := env[1];
  chr_234 := env[2];
  str_237 := env[3];
  i_249 := env[4];
  lte(x_251, 10, i_249);
  switch(x_251){
    true_4 => {
      mod(x_253, i_249, 10);
      move1(r_252, x_253);
      div(x_255, i_249, 10);
      move1(i_254, x_255);
      appc(x_463, aux_248, i_254);
      move1(x_257, x_463);
      x_260 := fn0_ord_448(0);
      add(x_259, r_252, x_260);
      x_258 := fn0_chr_451(x_259);
      push(x_256, x_257, x_258);
      move1(x_250, x_256);
      break;
    }
    false_5 => {
      x_264 := fn0_ord_448(0);
      add(x_263, i_249, x_264);
      x_262 := fn0_chr_451(x_263);
      x_261 := fn0_str_454(x_262);
      move1(x_250, x_261);
      break;
    }
  }
  return x_250;
}

fn fn1_loop_440(env) {
  loop_221 := env[0];
  x_216 := env[1];
  m_218 := env[2];
  acc_222 := env[3];
  y_223 := env[4];
  lte(x_225, y_223, 0);
  switch(x_225){
    true_4 => {
      move1(x_224, acc_222);
      break;
    }
    false_5 => {
      mul(x_228, x_216, acc_222);
      mod(x_227, x_228, m_218);
      sub(x_229, y_223, 1);
      appc(x_441, loop_221, x_227);
      appc(x_442, x_441, x_229);
      move1(x_226, x_442);
      move1(x_224, x_226);
      break;
    }
  }
  return x_224;
}

fn fn1_loop_430(env) {
  loop_206 := env[0];
  x_202 := env[1];
  acc_207 := env[2];
  y_208 := env[3];
  lte(x_210, y_208, 0);
  switch(x_210){
    true_4 => {
      move1(x_209, acc_207);
      break;
    }
    false_5 => {
      mul(x_212, x_202, acc_207);
      sub(x_213, y_208, 1);
      appc(x_431, loop_206, x_212);
      appc(x_432, x_431, x_213);
      move1(x_211, x_432);
      move1(x_209, x_211);
      break;
    }
  }
  return x_209;
}

fn fn1_loop_402(env) {
  loop_149 := env[0];
  pred_113 := env[1];
  sub_126 := env[2];
  x_150 := env[3];
  y_151 := env[4];
  x_154 := fn0_pred_388(y_151);
  x_153 := fn0_sub_394(x_150, x_154);
  switch(x_153){
    zero_6 => {
      move1(x_152, zero_6);
      break;
    }
    _ => {
      x_157 := fn0_pred_388(y_151);
      x_156 := fn0_sub_394(x_150, x_157);
      getbox(n_158, x_156, 0);
      appc(x_403, loop_149, n_158);
      appc(x_404, x_403, y_151);
      move1(x_159, x_404);
      mkbox(x_160, succ_7, 1);
      setbox(x_160, x_159, 0);
      move1(x_155, x_160);
      move1(x_152, x_155);
      break;
    }
  }
  return x_152;
}

main {
  mkclo0(idU_1, fn1_idU_329, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_332, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_335, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_338, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_341, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_344, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_347, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_350, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_353, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_356, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_359, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_362, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_365, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_368, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_371, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_374, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_377, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_380, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_383, fvc:=0, argc:=2);
  mkclo0(lt_108, fn1_lt_386, fvc:=0, argc:=2);
  mkclo0(pred_113, fn1_pred_389, fvc:=0, argc:=1);
  mkclo0(add_118, fn1_add_392, fvc:=0, argc:=2);
  mkclo0(sub_126, fn1_sub_395, fvc:=0, argc:=2);
  mkclo0(mul_134, fn1_mul_398, fvc:=0, argc:=2);
  mkclo0(div_142, fn1_div_401, fvc:=0, argc:=2);
  mkclo0(rem_162, fn1_rem_411, fvc:=0, argc:=2);
  mkclo0(free_listUU_168, fn1_free_listUU_414, fvc:=0, argc:=3);
  mkclo0(free_listUL_179, fn1_free_listUL_419, fvc:=0, argc:=3);
  mkclo0(free_listLL_190, fn1_free_listLL_424, fvc:=0, argc:=3);
  mkclo0(pow_201, fn1_pow_429, fvc:=0, argc:=2);
  mkclo0(powm_215, fn1_powm_439, fvc:=0, argc:=3);
  mkclo0(ord_231, fn1_ord_449, fvc:=0, argc:=1);
  mkclo0(chr_234, fn1_chr_452, fvc:=0, argc:=1);
  mkclo0(str_237, fn1_str_455, fvc:=0, argc:=1);
  mkclo0(strlen_241, fn1_strlen_458, fvc:=0, argc:=1);
  mkclo0(string_of_int_244, fn1_string_of_int_461, fvc:=0, argc:=1);
  mkclo0(vappendU_272, fn1_vappendU_471, fvc:=0, argc:=5);
  mkclo0(vappendL_284, fn1_vappendL_474, fvc:=0, argc:=5);
  mkclo0(vlenU_296, fn1_vlenU_477, fvc:=0, argc:=3);
  mkclo0(vlenL_312, fn1_vlenL_480, fvc:=0, argc:=3);
  return NULL;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

