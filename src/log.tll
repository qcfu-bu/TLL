[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "cmsort_ch"; relv = N;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "cmsort_ch"),
              [([(PId "xs")],
                (Some (Ch (true,
                         (Act (R, true,
                            (UOpr ("`",
                               (App [(Id ("msort", I)); (Id ("xs", I))]))),
                            (Binder ("_", End))))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "cmsort_worker"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("_",
                 (Pi (R, U,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("zs",
                       (Pi (R, L,
                          (App
                             [(Inst ("cmsort_ch", [(SId "t")], I));
                               (Id ("zs", I))]),
                          (Binder ("_", (IO (Id ("unit", I)))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cmsort_worker"),
              [([(PId "_"); (PId "nil"); (PId "c")],
                (Some (MLet (
                         (App
                            [(Send (Id ("c", I)));
                              (App [(Id ("just", I)); (Id ("nil", I))])]),
                         (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "_"); (PBOpr ("::", (PId "z"), (PId "nil")));
                   (PId "c")],
                 (Some (MLet (
                          (App
                             [(Send (Id ("c", I)));
                               (App
                                  [(Id ("just", I));
                                    (BOpr ("::", (Id ("z", I)),
                                       (Id ("nil", I))))
                                    ])
                               ]),
                          (Binder ((PId "c"), (Close (Id ("c", I)))))))));
                ([(PId "i"); (PId "zs"); (PId "c")],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("i", I)), (Int 0))), None)],
                          None,
                          [([(PId "true")],
                            (Some (MLet (
                                     (App
                                        [(Send (Id ("c", I)));
                                          (App
                                             [(Id ("just", I));
                                               (App
                                                  [(Id ("msort", I));
                                                    (Id ("zs", I))])
                                               ])
                                          ]),
                                     (Binder ((PId "c"),
                                        (Close (Id ("c", I)))))
                                     ))));
                            ([(PId "false")],
                             (Some (Match (
                                      [(R,
                                        (App
                                           [(Id ("split", I)); (Id ("zs", I))
                                             ]),
                                        (Some ("h1", IMeta)));
                                        (N, (Id ("refl", I)),
                                         (Some ("_",
                                                (BOpr ("=",
                                                   (Let (R, (Id ("h1", I)),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      )),
                                                   (Let (R,
                                                      (App
                                                         [(Id ("split", I));
                                                           (Id ("zs", I))]),
                                                      (Binder (
                                                         (PBOpr (
                                                            "\226\159\168,\226\159\169",
                                                            (PId "xs"),
                                                            (PId "ys"))),
                                                         (App
                                                            [(Id ("merge", I
                                                                ));
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("xs",
                                                                    I))
                                                                   ]);
                                                              (App
                                                                 [(Id (
                                                                    "msort",
                                                                    I));
                                                                   (Id ("ys",
                                                                    I))
                                                                   ])
                                                              ])
                                                         ))
                                                      ))
                                                   )))))
                                        ],
                                      None,
                                      [([(PBOpr ("\226\159\168,\226\159\169",
                                            (PId "xs0"), (PId "ys0")));
                                          (PId "pf")],
                                        (Some (MLet (
                                                 (Fork
                                                    (Fun (
                                                       (Pi (R, L, IMeta,
                                                          (Binder ("",
                                                             (IO
                                                                (Id ("unit",
                                                                   I)))
                                                             ))
                                                          )),
                                                       (Binder (None,
                                                          [([(PId "c1")],
                                                            (Some (App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ));
                                                                    (Id (
                                                                    "c1", I))
                                                                    ])))
                                                            ]
                                                          )),
                                                       []))),
                                                 (Binder ((PId "r1"),
                                                    (MLet (
                                                       (Fork
                                                          (Fun (
                                                             (Pi (R, L,
                                                                IMeta,
                                                                (Binder ("",
                                                                   (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    )))
                                                                   ))
                                                                )),
                                                             (Binder (None,
                                                                [([(PId "c2")
                                                                    ],
                                                                  (Some (
                                                                  App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id ("i",
                                                                    I)),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ));
                                                                    (Id (
                                                                    "c2", I))
                                                                    ])))
                                                                  ]
                                                                )),
                                                             []))),
                                                       (Binder ((PId "r2"),
                                                          (MLet (
                                                             (Recv
                                                                (Id ("r1", I
                                                                   ))),
                                                             (Binder (
                                                                (PBOpr (
                                                                   "\226\159\168,\226\159\169",
                                                                   (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "xs1")])),
                                                                   (PId "c1")
                                                                   )),
                                                                (MLet (
                                                                   (Recv
                                                                    (Id (
                                                                    "r2", I))),
                                                                   (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "ys1")])),
                                                                    (PId "c2")
                                                                    )),
                                                                    (Let (R,
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (Id (
                                                                    "xs1", I
                                                                    ));
                                                                    (Id (
                                                                    "ys1", I
                                                                    ))])]),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (Let (R,
                                                                    (App
                                                                    [(Id (
                                                                    "rwl", I
                                                                    ));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U, IMeta,
                                                                    (Binder (
                                                                    "x",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "x")],
                                                                    (Some (
                                                                    UOpr (
                                                                    "`",
                                                                    (Id ("x",
                                                                    I))))))]
                                                                    )), 
                                                                    []));
                                                                    (Id (
                                                                    "pf", I));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c1", I))),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c2", I))),
                                                                    (Close
                                                                    (Id ("c",
                                                                    I)))))))
                                                                    ))))))))
                                                                    ))))))
                                                                   ))
                                                                ))
                                                             ))
                                                          ))
                                                       ))
                                                    ))
                                                 ))))
                                        ]
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, Int_t,
           (Binder ("_",
              (Pi (R, U,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("zs",
                    (Pi (R, L,
                       (App
                          [(Inst ("cmsort_ch", [(SId "t")], I));
                            (Id ("zs", I))]),
                       (Binder ("_", (IO (Id ("unit", I)))))))
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "cmsort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("zs",
                 (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))
                 ))
              )),
           (Binder ((Some "cmsort"),
              [([(PId "zs")],
                (Some (MLet (
                         (Fork
                            (Fun (
                               (Pi (R, L, IMeta,
                                  (Binder ("", (IO (Id ("unit", I))))))),
                               (Binder (None,
                                  [([(PId "c")],
                                    (Some (App
                                             [(Id ("cmsort_worker", I));
                                               (Int 4); (Id ("zs", I));
                                               (Id ("c", I))])))
                                    ]
                                  )),
                               []))),
                         (Binder ((PId "c"),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "msg"), (PId "c"))),
                                  (BOpr (";", (Close (Id ("c", I))),
                                     (Return (Id ("msg", I)))))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("zs",
              (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))))
           )))
       ));
    view = [E]};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "print_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", (IO (Id ("unit", I))))))),
           (Binder ((Some "print_list"),
              [([(PId "nil")], (Some (Print (String "nil"))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr (";",
                          (Print
                             (App [(Id ("string_of_int", I)); (Id ("x", I))])),
                          (BOpr (";", (Print (String " :: ")),
                             (App [(Id ("print_list", I)); (Id ("xs", I))])))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", (IO (Id ("unit", I))))))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 2000000)]),
           (Binder ((PId "test"),
              (MLet ((App [(Id ("cmsort", I)); (Id ("test", I))]),
                 (Binder ((PConstr ("just", [(PId "sorted")])),
                    (Let (R,
                       (App [(Id ("list_len", I)); (Id ("sorted", I))]),
                       (Binder ((PId "len"),
                          (Print
                             (App
                                [(Id ("string_of_int", I)); (Id ("len", I))]))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

[parse success]

-----------------------------------------

#[program]
def split_33‹t_543› :
  (list_6‹??_77,t_543› int) ->
    ((prod1_25‹??_80,??_81›)
      (list_6‹??_78,t_543› int) (list_6‹??_79,t_543› int))
:=
  fun split_545 :
    (list_6‹??_52,t_543› int) ->
      ((prod1_25‹??_55,??_56›)
        (list_6‹??_53,t_543› int) (list_6‹??_54,t_543› int))
  | nil_8 =>
    (ex1_12‹??_61,??_62›
      ?_69[0;0] ?_70[0;0] (nil_8‹??_57,??_58› ?_67[0;0])
      (nil_8‹??_59,??_60› ?_68[0;0]))
  | (cons_9 x_547 nil_8) =>
    (ex1_12‹??_69,??_70›
      ?_74[0;0] ?_75[0;0]
      (cons_9‹??_65,??_66›
        ?_72[0;0] x_547 (nil_8‹??_63,??_64› ?_71[0;0]))
      (nil_8‹??_67,??_68› ?_73[0;0]))
  | (cons_9 x_548 (cons_9 y_549 zs_550)) =>
    (match ((split_545) zs_550) in ?_81[0;0] -o ?_80[0;0] with
    | (ex1_12 xs_552 ys_553) =>
      (ex1_12‹??_75,??_76›
        ?_78[0;0] ?_79[0;0] (cons_9‹??_71,??_72› ?_76[0;0] x_548 xs_552)
        (cons_9‹??_73,??_74› ?_77[0;0] y_549 ys_553)))

#[program]
def merge_34‹t_554› :
  (list_6‹??_93,t_554› int) ->
    (list_6‹??_94,t_554› int) -o (list_6‹??_95,t_554› int)
:=
  fun merge_557 :
    (list_6‹??_82,t_554› int) ->
      (list_6‹??_83,t_554› int) -o (list_6‹??_84,t_554› int)
  | nil_8, ys_560 => ys_560
  | xs_561, nil_8 => xs_561
  | (cons_9 x_562 xs_563), (cons_9 y_564 ys_565) =>
    (match (__lte__ x_562 y_564) in ?_82[0;0] -o ?_83[0;0] with
    | true_4 =>
      (cons_9‹??_87,??_88›
        ?_85[0;0] x_562
        ((merge_557) xs_563 (cons_9‹??_85,??_86› ?_84[0;0] y_564 ys_565)))
    | false_5 =>
      (cons_9‹??_91,??_92›
        ?_87[0;0] y_564
        ((merge_557) (cons_9‹??_89,??_90› ?_86[0;0] x_562 xs_563) ys_565)))

#[program]
def msort_35‹t_567› :
  (list_6‹??_106,t_567› int) -> (list_6‹??_107,t_567› int)
:=
  fun msort_569 :
    (list_6‹??_96,t_567› int) -> (list_6‹??_97,t_567› int)
  | nil_8 => (nil_8‹??_98,??_99› ?_88[0;0])
  | (cons_9 z_571 nil_8) =>
    (cons_9‹??_102,??_103›
      ?_90[0;0] z_571 (nil_8‹??_100,??_101› ?_89[0;0]))
  | zs_572 =>
    (match ((split_33‹??_104›) zs_572) in ?_92[0;0] -o ?_91[0;0] with
    | (ex1_12 xs_574 ys_575) =>
      ((merge_34‹??_105›) ((msort_569) xs_574) ((msort_569) ys_575)))

#[logical]
def cmsort_ch_36‹t_576› : (list_6‹??_111,t_576› int) -> L :=
  fun cmsort_ch_578 : (list_6‹??_108,t_576› int) -> L
  | xs_580 =>
    ch⟨⇑(__581 :
           ((ssing_6‹??_110›) ?_93[0;0] ((msort_35‹??_109›) xs_580))) ⇒
           •⟩

#[program]
def cmsort_worker_37‹t_582› :
  int ->
    ∀ (zs_584 : (list_6‹??_142,t_582› int)) ->
      ((cmsort_ch_36‹t_582›) zs_584) -o IO unit_9
:=
  fun cmsort_worker_586 :
    int ->
      ∀ (zs_588 : (list_6‹??_112,t_582› int)) ->
        ((cmsort_ch_36‹t_582›) zs_588) -o IO unit_9
  | _590, nil_8, c_591 =>
    let* c_592 :=
      ((send c_591)
        (just_2‹??_115,??_116›
          ?_95[0;0] (nil_8‹??_113,??_114› ?_94[0;0])))
    in close c_592
  | _593, (cons_9 z_594 nil_8), c_595 =>
    let* c_596 :=
      ((send c_595)
        (just_2‹??_121,??_122›
          ?_98[0;0]
          (cons_9‹??_119,??_120›
            ?_97[0;0] z_594 (nil_8‹??_117,??_118› ?_96[0;0]))))
    in close c_596
  | i_597, zs_598, c_599 =>
    (match (__lte__ i_597 0) in ?_99[0;0] -o ?_100[0;0] with
    | true_4 =>
      let* c_601 :=
        ((send c_599)
          (just_2‹??_124,??_125›
            ?_101[0;0] ((msort_35‹??_123›) zs_598)))
      in close c_601
    | false_5 =>
      (match ((split_33‹??_126›) zs_598),
       (refl_1‹??_127› ?_102[0;0] ?_103[0;0]) in
         ∀ (h1_602 : ?_104[0;0]) -o
           {(eq_1‹??_135›
              ?_109[0;0]
              (match h1_602 in ?_106[0;0] -o ?_105[0;0] with
              | (ex1_12 xs_605 ys_606) =>
                ((merge_34‹??_130›)
                  ((msort_35‹??_128›) xs_605)
                  ((msort_35‹??_129›) ys_606)))
              (match ((split_33‹??_131›) zs_598) in
                 ?_108[0;0] -o ?_107[0;0]
               with
              | (ex1_12 xs_608 ys_609) =>
                ((merge_34‹??_134›)
                  ((msort_35‹??_132›) xs_608)
                  ((msort_35‹??_133›) ys_609))))} -o
             ?_110[0;0]
       with
      | (ex1_12 xs0_610 ys0_611), pf_612 =>
        let* r1_613 :=
          fork
            fun _614 : ?_111[0;0] -o IO unit_9
            | c1_616 =>
              ((cmsort_worker_586) (__sub__ i_597 1) xs0_610 c1_616)
        in
        let* r2_617 :=
          fork
            fun _618 : ?_112[0;0] -o IO unit_9
            | c2_620 =>
              ((cmsort_worker_586) (__sub__ i_597 1) ys0_611 c2_620)
        in
        let* _621 := recv r1_613 in
        (match _621 in ?_123[0;0] -o ?_122[0;0] with
        | (ex1_12 (just_2 xs1_623) c1_624) =>
          let* _625 := recv r2_617 in
          (match _625 in ?_121[0;0] -o ?_120[0;0] with
          | (ex1_12 (just_2 ys1_627) c2_628) =>
            let zs1_629 :=
              (just_2‹??_137,??_138›
                ?_113[0;0] ((merge_34‹??_136›) xs1_623 ys1_627))
            in
            let zs1_630 :=
              ((rwl_2‹??_140,??_141›)
                ?_119[0;0] ?_118[0;0] ?_117[0;0]
                fun _631 : ?_114[0;0] -> ?_115[0;0]
                | x_633 => ((ssing_6‹??_139›) ?_116[0;0] x_633) pf_612
                zs1_629)
            in
            let* c_634 := ((send c_599) zs1_630) in
            let* __635 := close c1_624 in
            let* __636 := close c2_628 in close c_634))))

#[program]
def cmsort_38‹t_637› :
  ∀ (zs_638 : (list_6‹??_147,t_637› int)) ->
    IO ((ssing_6‹??_149›) ?_128[0;0] ((msort_35‹??_148›) zs_638))
:=
  fun cmsort_639 :
    ∀ (zs_640 : (list_6‹??_143,t_637› int)) ->
      IO ((ssing_6‹??_145›) ?_124[0;0] ((msort_35‹??_144›) zs_640))
  | zs_641 =>
    let* c_642 :=
      fork
        fun _643 : ?_125[0;0] -o IO unit_9
        | c_645 => ((cmsort_worker_37‹??_146›) 4 zs_641 c_645)
    in
    let* _646 := recv c_642 in
    (match _646 in ?_127[0;0] -o ?_126[0;0] with
    | (ex1_12 msg_648 c_649) => let* __650 := close c_649 in return msg_648)

#[program]
def mklist_39‹t_651› : int -> (list_6‹??_155,t_651› int) :=
  fun mklist_653 : int -> (list_6‹??_150,t_651› int)
  | n_655 =>
    (match (__lte__ n_655 0) in ?_129[0;0] -o ?_130[0;0] with
    | true_4 => (nil_8‹??_151,??_152› ?_131[0;0])
    | false_5 =>
      (cons_9‹??_153,??_154›
        ?_132[0;0] n_655 ((mklist_653) (__sub__ n_655 1))))

#[program]
def list_len_40‹t_657› : (list_6‹??_157,t_657› int) -> int :=
  fun list_len_659 : (list_6‹??_156,t_657› int) -> int
  | nil_8 => 0
  | (cons_9 _661 xs_662) => (__add__ 1 ((list_len_659) xs_662))

#[program]
def print_list_41‹t_663› : (list_6‹??_159,t_663› int) -> IO unit_9 :=
  fun print_list_665 : (list_6‹??_158,t_663› int) -> IO unit_9
  | nil_8 => print "nil"
  | (cons_9 x_667 xs_668) =>
    let* __669 := print ((string_of_int_32) x_667) in
    let* __670 := print " :: " in ((print_list_665) xs_668)

#[program]
def main_42‹› : IO unit_9 :=
  let test_671 := ((mklist_39‹L›) 2000000) in
  let* _672 := ((cmsort_38‹??_160›) test_671) in
  (match _672 in ?_134[0;0] -o ?_133[0;0] with
  | (just_2 sorted_674) =>
    let len_675 := ((list_len_40‹??_161›) sorted_674) in
    print ((string_of_int_32) len_675))

[trans01 success]

-----------------------------------------

#[program]
def id_1‹s_11323› :
  ∀ (A_11324 : Type‹s_11323›) -> A_11324 -> A_11324
:=
  fun id_11326 : ∀ (A_11327 : Type‹s_11323›) -> A_11327 -> A_11327
  | A_11329, m_11330 => m_11330

#[logical]
inductive eq_1‹s_11331› (A_11332 : Type‹s_11331›) (m_11333 : A_11332):
  A_11332 -> U
where
| refl_1 : (eq_1‹s_11331› A_11332 m_11333 m_11333)

#[program]
def rwl_2‹s_11335,r_11336› :
  ∀ {A_11337 : Type‹s_11335›} ->
    ∀ {m_11338 : A_11337} ->
      ∀ {n_11339 : A_11337} ->
        ∀ {B_11340 : A_11337 -> Type‹r_11336›} ->
          {(eq_1‹s_11335› A_11337 m_11338 n_11339)} ->
            ((B_11340) m_11338) -> ((B_11340) n_11339)
:=
  fun rwl_11344 :
    ∀ {A_11345 : Type‹s_11335›} ->
      ∀ {m_11346 : A_11345} ->
        ∀ {n_11347 : A_11345} ->
          ∀ {B_11348 : A_11345 -> Type‹r_11336›} ->
            {(eq_1‹s_11335› A_11345 m_11346 n_11347)} ->
              ((B_11348) m_11346) -> ((B_11348) n_11347)
  | A_11352, m_11353, n_11354, B_11355, refl_1, __11356 => __11356

#[program]
def rwr_3‹s_11357,r_11358› :
  ∀ {A_11359 : Type‹s_11357›} ->
    ∀ {m_11360 : A_11359} ->
      ∀ {n_11361 : A_11359} ->
        ∀ {B_11362 : A_11359 -> Type‹r_11358›} ->
          {(eq_1‹s_11357› A_11359 m_11360 n_11361)} ->
            ((B_11362) n_11361) -> ((B_11362) m_11360)
:=
  fun rwr_11366 :
    ∀ {A_11367 : Type‹s_11357›} ->
      ∀ {m_11368 : A_11367} ->
        ∀ {n_11369 : A_11367} ->
          ∀ {B_11370 : A_11367 -> Type‹r_11358›} ->
            {(eq_1‹s_11357› A_11367 m_11368 n_11369)} ->
              ((B_11370) n_11369) -> ((B_11370) m_11368)
  | A_11374, m_11375, n_11376, B_11377, refl_1, __11378 => __11378

#[logical]
def congr_4‹s_11379,r_11380,t_11381› :
  ∀ (A_11382 : Type‹s_11379›) ->
    ∀ (B_11383 : Type‹r_11380›) ->
      ∀ (m_11384 : A_11382) ->
        ∀ (n_11385 : A_11382) ->
          ∀ (f_11386 : forall‹t_11381›(__11387 : A_11382), B_11383) ->
            (eq_1‹s_11379› A_11382 m_11384 n_11385) ->
              (eq_1‹r_11380›
                B_11383 ((f_11386) m_11384) ((f_11386) n_11385))
:=
  fun congr_11389 :
    ∀ (A_11390 : Type‹s_11379›) ->
      ∀ (B_11391 : Type‹r_11380›) ->
        ∀ (m_11392 : A_11390) ->
          ∀ (n_11393 : A_11390) ->
            ∀ (f_11394 :
              forall‹t_11381›(__11395 : A_11390), B_11391) ->
              (eq_1‹s_11379› A_11390 m_11392 n_11393) ->
                (eq_1‹r_11380›
                  B_11391 ((f_11394) m_11392) ((f_11394) n_11393))
  | A_11397, B_11398, m_11399, n_11400, f_11401, refl_1 =>
    (refl_1‹r_11380› B_11398 ((f_11401) n_11400))

#[logical]
def axiom_K_5‹› :
  ∀ {A_11402 : U} ->
    ∀ {m_11403 : A_11402} ->
      ∀ (x_11404 : (eq_1‹U› A_11402 m_11403 m_11403)) ->
        (eq_1‹U›
          (eq_1‹U› A_11402 m_11403 m_11403) x_11404
          (refl_1‹U› A_11402 m_11403))
:=
  fun axiom_K_11405 :
    ∀ {A_11406 : U} ->
      ∀ {m_11407 : A_11406} ->
        ∀ (x_11408 : (eq_1‹U› A_11406 m_11407 m_11407)) ->
          (eq_1‹U›
            (eq_1‹U› A_11406 m_11407 m_11407) x_11408
            (refl_1‹U› A_11406 m_11407))
  | A_11409, m_11410, refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_11409 m_11410 m_11410) (refl_1‹U› A_11409 m_11410))

#[program]
inductive sing_2‹s_11411,t_11412› (A_11413 : Type‹s_11411›):
  A_11413 -> Type‹t_11412›
where
| just_2 (m_11415 : A_11413) : (sing_2‹s_11411,t_11412› A_11413 m_11415)

#[logical]
def ssing_6‹s_11416› :
  ∀ (A_11417 : Type‹s_11416›) -> A_11417 -> Type‹s_11416›
:=
  fun ssing_11419 :
    ∀ (A_11420 : Type‹s_11416›) -> A_11420 -> Type‹s_11416›
  | A_11422, m_11423 => (sing_2‹s_11416,s_11416› A_11422 m_11423)

#[program]
def sing_elim_7‹s_11424,t_11425› :
  ∀ {A_11426 : Type‹s_11424›} ->
    ∀ {x_11427 : A_11426} ->
      (sing_2‹s_11424,t_11425› A_11426 x_11427) -> A_11426
:=
  fun sing_elim_11429 :
    ∀ {A_11430 : Type‹s_11424›} ->
      ∀ {x_11431 : A_11430} ->
        (sing_2‹s_11424,t_11425› A_11430 x_11431) -> A_11430
  | A_11433, x_11434, (just_2 m_11435) => m_11435

#[logical]
def sing_uniq_8‹s_11436,t_11437› :
  ∀ (A_11438 : Type‹s_11436›) ->
    ∀ (x0_11439 : A_11438) ->
      ∀ (x_11440 : (sing_2‹s_11436,t_11437› A_11438 x0_11439)) ->
        (eq_1‹s_11436›
          A_11438 x0_11439
          ((sing_elim_7‹s_11436,t_11437›) A_11438 x0_11439 x_11440))
:=
  fun sing_uniq_11441 :
    ∀ (A_11442 : Type‹s_11436›) ->
      ∀ (x0_11443 : A_11442) ->
        ∀ (x_11444 : (sing_2‹s_11436,t_11437› A_11442 x0_11443)) ->
          (eq_1‹s_11436›
            A_11442 x0_11443
            ((sing_elim_7‹s_11436,t_11437›) A_11442 x0_11443 x_11444))
  | A_11445, x0_11446, (just_2 m_11447) =>
    (refl_1‹s_11436› A_11445 m_11447)

#[program]
inductive base_3‹s_11448› : Type‹s_11448› where
| tt_3 : base_3‹s_11448›

#[logical]
def unit_9‹› : U := base_3‹U›

#[logical]
def unit_eta_10‹› :
  ∀ (x_11449 : unit_9) -> (eq_1‹U› base_3‹U› x_11449 tt_3‹U›)
:=
  fun unit_eta_11450 :
    ∀ (x_11451 : unit_9) -> (eq_1‹U› base_3‹U› x_11451 tt_3‹U›)
  | tt_3 => (refl_1‹U› base_3‹U› tt_3‹U›)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_11‹› : bool_4 -> bool_4 :=
  fun not_11453 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_11457 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => true_4
  | true_4, false_5 => false_5
  | false_5, __11460 => false_5

#[program]
def or_13‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_11463 : bool_4 -> bool_4 -> bool_4
  | true_4, __11466 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
def xor_14‹› : bool_4 -> bool_4 -> bool_4 :=
  fun xor_11469 : bool_4 -> bool_4 -> bool_4
  | true_4, true_4 => false_5
  | true_4, false_5 => true_4
  | false_5, true_4 => true_4
  | false_5, false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_11472 : nat_5) : nat_5

#[program]
def lte_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_11475 : nat_5 -> nat_5 -> bool_4
  | zero_6, __11478 => true_4
  | (succ_7 n_11479), zero_6 => false_5
  | (succ_7 n_11480), (succ_7 n_11481) => ((lte_11475) n_11480 n_11481)

#[program]
def lt_16‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_11484 : nat_5 -> nat_5 -> bool_4
  | x_11487, y_11488 => ((lte_15) (succ_7‹› x_11487) y_11488)

#[program]
def pred_17‹› : nat_5 -> nat_5 :=
  fun pred_11490 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_11492) => n_11492

#[program]
def add_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_11495 : nat_5 -> nat_5 -> nat_5
  | zero_6, __11498 => __11498
  | (succ_7 n_11499), __11500 => (succ_7‹› ((add_11495) n_11499 __11500))

#[program]
def sub_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_11503 : nat_5 -> nat_5 -> nat_5
  | __11506, zero_6 => __11506
  | __11507, (succ_7 n_11508) => ((sub_11503) ((pred_17) __11507) n_11508)

#[program]
def mul_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_11511 : nat_5 -> nat_5 -> nat_5
  | zero_6, __11514 => zero_6
  | (succ_7 n_11515), __11516 =>
    ((add_18) __11516 ((mul_11511) n_11515 __11516))

#[program]
def div_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_11519 : nat_5 -> nat_5 -> nat_5
  | x_11522, y_11523 =>
    (match ((lt_16) x_11522 y_11523) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_11525 :=
        fun loop_11526 : nat_5 -> nat_5 -> nat_5
        | x_11529, y_11530 =>
          (match ((sub_19) x_11529 ((pred_17) y_11530)) in nat_5 -o nat_5
           with
          | zero_6 => zero_6
          | (succ_7 n_11532) => (succ_7‹› ((loop_11526) n_11532 y_11530)))
      in ((loop_11525) x_11522 y_11523))

#[program]
def rem_22‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_11535 : nat_5 -> nat_5 -> nat_5
  | x_11538, y_11539 =>
    ((sub_19) x_11538 ((mul_20) ((div_21) x_11538 y_11539) y_11539))

#[program]
inductive list_6‹s_11540,t_11541› (A_11542 : Type‹s_11540›):
  Type‹t_11541›
where
| nil_8 : (list_6‹s_11540,t_11541› A_11542)
| cons_9
    (hd_11543 : A_11542) (tl_11544 : (list_6‹s_11540,t_11541› A_11542))
    : (list_6‹s_11540,t_11541› A_11542)

#[program]
def free_list_23‹s_11545,t_11546› :
  ∀ {A_11547 : Type‹s_11545›} ->
    A_11547 -> unit_9 -> (list_6‹s_11545,t_11546› A_11547) -> unit_9
:=
  fun free_list_11551 :
    ∀ {A_11552 : Type‹s_11545›} ->
      A_11552 -> unit_9 -> (list_6‹s_11545,t_11546› A_11552) -> unit_9
  | A_11556, f_11557, nil_8 => tt_3‹U›
  | A_11558, f_11559, (cons_9 hd_11560 tl_11561) =>
    let __11562 := ((f_11559) hd_11560) in
    ((free_list_11551) A_11558 f_11559 tl_11561)

#[program]
inductive exists_7‹s_11563,r_11564› (A_11565 : Type‹s_11563›) (B_11566 : 
A_11565 -> Type‹r_11564›): L where
| ex_10
    (m_11568 : A_11565) {n_11569 : ((B_11566) m_11568)}
    : (exists_7‹s_11563,r_11564› A_11565 B_11566)

#[program]
inductive exists0_8‹s_11570,r_11571› (A_11572 : Type‹s_11570›) (B_11573 : 
A_11572 -> Type‹r_11571›): L where
| ex0_11
    {m_11575 : A_11572} (n_11576 : ((B_11573) m_11575))
    : (exists0_8‹s_11570,r_11571› A_11572 B_11573)

#[program]
inductive exists1_9‹s_11577,r_11578› (A_11579 : Type‹s_11577›) (B_11580 : 
A_11579 -> Type‹r_11578›): L where
| ex1_12
    (m_11582 : A_11579) (n_11583 : ((B_11580) m_11582))
    : (exists1_9‹s_11577,r_11578› A_11579 B_11580)

#[logical]
def prod0_24‹s_11584,r_11585› :
  Type‹s_11584› -> Type‹r_11585› -> L
:=
  fun prod0_11588 : Type‹s_11584› -> Type‹r_11585› -> L
  | A_11591, B_11592 =>
    (exists0_8‹s_11584,r_11585›
      A_11591 fun _11593 : A_11591 -> Type‹r_11585›
              | __11595 => B_11592)

#[logical]
def prod1_25‹s_11596,r_11597› :
  Type‹s_11596› -> Type‹r_11597› -> L
:=
  fun prod1_11600 : Type‹s_11596› -> Type‹r_11597› -> L
  | A_11603, B_11604 =>
    (exists1_9‹s_11596,r_11597›
      A_11603 fun _11605 : A_11603 -> Type‹r_11597›
              | __11607 => B_11604)

#[program]
def pow_26‹› : int -> int -> int :=
  fun pow_11610 : int -> int -> int
  | x_11613, y_11614 =>
    let loop_11615 :=
      fun loop_11616 : int -> int -> int
      | acc_11619, y_11620 =>
        (match (__lte__ y_11620 0) in bool_4 -o int with
        | true_4 => acc_11619
        | false_5 =>
          ((loop_11616) (__mul__ x_11613 acc_11619) (__sub__ y_11620 1)))
    in ((loop_11615) 1 y_11614)

#[program]
def powm_27‹› : int -> int -> int -> int :=
  fun powm_11625 : int -> int -> int -> int
  | x_11629, y_11630, m_11631 =>
    let loop_11632 :=
      fun loop_11633 : int -> int -> int
      | acc_11636, y_11637 =>
        (match (__lte__ y_11637 0) in bool_4 -o int with
        | true_4 => acc_11636
        | false_5 =>
          ((loop_11633)
            (__mod__ (__mul__ x_11629 acc_11636) m_11631) (__sub__ y_11637 1)))
    in ((loop_11632) 1 y_11630)

#[program]
def ord_28‹› : char -> int :=
  fun ord_11640 : char -> int
  | c_11642 => (__ord__ c_11642)

#[program]
def chr_29‹› : int -> char :=
  fun chr_11644 : int -> char
  | i_11646 => (__chr__ i_11646)

#[program]
def str_30‹› : char -> string :=
  fun str_11648 : char -> string
  | c_11650 => (__push__ "" c_11650)

#[program]
def strlen_31‹› : string -> int :=
  fun strlen_11652 : string -> int
  | s_11654 => (__size__ s_11654)

#[program]
def string_of_int_32‹› : int -> string :=
  fun string_of_int_11656 : int -> string
  | i_11658 =>
    let aux_11659 :=
      fun aux_11660 : int -> string
      | i_11662 =>
        (match (__lte__ 10 i_11662) in bool_4 -o string with
        | true_4 =>
          let r_11664 := (__mod__ i_11662 10) in
          let i_11665 := (__div__ i_11662 10) in
          (__push__ ((aux_11660) i_11665)
            ((chr_29) (__add__ r_11664 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_11662 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_11658) in bool_4 -o string with
    | true_4 => ((aux_11659) i_11658)
    | false_5 => (__cat__ "~" ((aux_11659) (__neg__ i_11658))))

#[program]
def split_33‹t_11667› :
  (list_6‹U,t_11667› int) ->
    ((prod1_25‹t_11667,t_11667›)
      (list_6‹U,t_11667› int) (list_6‹U,t_11667› int))
:=
  fun split_11669 :
    (list_6‹U,t_11667› int) ->
      ((prod1_25‹t_11667,t_11667›)
        (list_6‹U,t_11667› int) (list_6‹U,t_11667› int))
  | nil_8 =>
    (ex1_12‹t_11667,t_11667›
      (list_6‹U,t_11667› int)
      fun _11671 : (list_6‹U,t_11667› int) -> Type‹t_11667›
      | __11673 => (list_6‹U,t_11667› int) (nil_8‹U,t_11667› int)
      (nil_8‹U,t_11667› int))
  | (cons_9 hd_11674 nil_8) =>
    (ex1_12‹t_11667,t_11667›
      (list_6‹U,t_11667› int)
      fun _11675 : (list_6‹U,t_11667› int) -> Type‹t_11667›
      | __11677 => (list_6‹U,t_11667› int)
      (cons_9‹U,t_11667› int hd_11674 (nil_8‹U,t_11667› int))
      (nil_8‹U,t_11667› int))
  | (cons_9 hd_11678 (cons_9 hd_11679 tl_11680)) =>
    (match ((split_11669) tl_11680) in
       ((prod1_25‹t_11667,t_11667›)
         (list_6‹U,t_11667› int) (list_6‹U,t_11667› int)) -o
         ((prod1_25‹t_11667,t_11667›)
           (list_6‹U,t_11667› int) (list_6‹U,t_11667› int))
     with
    | (ex1_12 m_11682 n_11683) =>
      (ex1_12‹t_11667,t_11667›
        (list_6‹U,t_11667› int)
        fun _11684 : (list_6‹U,t_11667› int) -> Type‹t_11667›
        | __11686 => (list_6‹U,t_11667› int)
        (cons_9‹U,t_11667› int hd_11678 m_11682)
        (cons_9‹U,t_11667› int hd_11679 n_11683)))

#[program]
def merge_34‹t_11687› :
  (list_6‹U,t_11687› int) ->
    (list_6‹U,t_11687› int) -o (list_6‹U,t_11687› int)
:=
  fun merge_11690 :
    (list_6‹U,t_11687› int) ->
      (list_6‹U,t_11687› int) -o (list_6‹U,t_11687› int)
  | nil_8, __11693 => __11693
  | (cons_9 hd_11694 tl_11695), nil_8 =>
    (cons_9‹U,t_11687› int hd_11694 tl_11695)
  | (cons_9 hd_11696 tl_11697), (cons_9 hd_11698 tl_11699) =>
    (match (__lte__ hd_11696 hd_11698) in
       bool_4 -o (list_6‹U,t_11687› int)
     with
    | true_4 =>
      (cons_9‹U,t_11687›
        int hd_11696
        ((merge_11690)
          tl_11697 (cons_9‹U,t_11687› int hd_11698 tl_11699)))
    | false_5 =>
      (cons_9‹U,t_11687›
        int hd_11698
        ((merge_11690)
          (cons_9‹U,t_11687› int hd_11696 tl_11697) tl_11699)))

#[program]
def msort_35‹t_11701› :
  (list_6‹U,t_11701› int) -> (list_6‹U,t_11701› int)
:=
  fun msort_11703 :
    (list_6‹U,t_11701› int) -> (list_6‹U,t_11701› int)
  | nil_8 => (nil_8‹U,t_11701› int)
  | (cons_9 hd_11705 nil_8) =>
    (cons_9‹U,t_11701› int hd_11705 (nil_8‹U,t_11701› int))
  | (cons_9 hd_11706 (cons_9 hd_11707 tl_11708)) =>
    (match ((split_33‹t_11701›)
             (cons_9‹U,t_11701›
               int hd_11706 (cons_9‹U,t_11701› int hd_11707 tl_11708))) in
       ((prod1_25‹t_11701,t_11701›)
         (list_6‹U,t_11701› int) (list_6‹U,t_11701› int)) -o
         (list_6‹U,t_11701› int)
     with
    | (ex1_12 m_11710 n_11711) =>
      ((merge_34‹t_11701›)
        ((msort_11703) m_11710) ((msort_11703) n_11711)))

#[logical]
def cmsort_ch_36‹t_11712› : (list_6‹U,t_11712› int) -> L :=
  fun cmsort_ch_11714 : (list_6‹U,t_11712› int) -> L
  | xs_11716 =>
    ch⟨⇑(__11717 :
           ((ssing_6‹t_11712›)
             (list_6‹U,t_11712› int) ((msort_35‹t_11712›) xs_11716))) ⇒
           •⟩

#[program]
def cmsort_worker_37‹t_11718› :
  int ->
    ∀ (zs_11720 : (list_6‹U,t_11718› int)) ->
      ((cmsort_ch_36‹t_11718›) zs_11720) -o IO unit_9
:=
  fun cmsort_worker_11722 :
    int ->
      ∀ (zs_11724 : (list_6‹U,t_11718› int)) ->
        ((cmsort_ch_36‹t_11718›) zs_11724) -o IO unit_9
  | __11726, nil_8, __11727 =>
    let* c_11728 :=
      ((send __11727)
        (just_2‹t_11718,t_11718›
          (list_6‹U,t_11718› int) (nil_8‹U,t_11718› int)))
    in close c_11728
  | __11729, (cons_9 hd_11730 nil_8), __11731 =>
    let* c_11732 :=
      ((send __11731)
        (just_2‹t_11718,t_11718›
          (list_6‹U,t_11718› int)
          (cons_9‹U,t_11718› int hd_11730 (nil_8‹U,t_11718› int))))
    in close c_11732
  | __11733, (cons_9 hd_11734 (cons_9 hd_11735 tl_11736)), __11737 =>
    (match (__lte__ __11733 0) in bool_4 -o IO unit_9 with
    | true_4 =>
      let* c_11739 :=
        ((send __11737)
          (just_2‹t_11718,t_11718›
            (list_6‹U,t_11718› int)
            ((msort_35‹t_11718›)
              (cons_9‹U,t_11718›
                int hd_11734 (cons_9‹U,t_11718› int hd_11735 tl_11736)))))
      in close c_11739
    | false_5 =>
      (match ((split_33‹t_11718›)
               (cons_9‹U,t_11718›
                 int hd_11734 (cons_9‹U,t_11718› int hd_11735 tl_11736))),
       (refl_1‹t_11718›
         (list_6‹U,t_11718› int)
         (match ((split_33‹t_11718›)
                  (cons_9‹U,t_11718›
                    int hd_11734
                    (cons_9‹U,t_11718› int hd_11735 tl_11736))) in
            ((prod1_25‹t_11718,t_11718›)
              (list_6‹U,t_11718› int) (list_6‹U,t_11718› int)) -o
              (list_6‹U,t_11718› int)
          with
         | (ex1_12 m_11741 n_11742) =>
           ((merge_34‹t_11718›)
             ((msort_35‹t_11718›) m_11741)
             ((msort_35‹t_11718›) n_11742)))) in
         ∀ (h1_11743 :
           ((prod1_25‹t_11718,t_11718›)
             (list_6‹U,t_11718› int) (list_6‹U,t_11718› int))) -o
           {(eq_1‹t_11718›
              (list_6‹U,t_11718› int)
              (match h1_11743 in
                 ((prod1_25‹t_11718,t_11718›)
                   (list_6‹U,t_11718› int) (list_6‹U,t_11718› int)) -o
                   (list_6‹U,t_11718› int)
               with
              | (ex1_12 m_11746 n_11747) =>
                ((merge_34‹t_11718›)
                  ((msort_35‹t_11718›) m_11746)
                  ((msort_35‹t_11718›) n_11747)))
              (match ((split_33‹t_11718›)
                       (cons_9‹U,t_11718›
                         int hd_11734
                         (cons_9‹U,t_11718› int hd_11735 tl_11736))) in
                 ((prod1_25‹t_11718,t_11718›)
                   (list_6‹U,t_11718› int) (list_6‹U,t_11718› int)) -o
                   (list_6‹U,t_11718› int)
               with
              | (ex1_12 m_11749 n_11750) =>
                ((merge_34‹t_11718›)
                  ((msort_35‹t_11718›) m_11749)
                  ((msort_35‹t_11718›) n_11750))))} -o
             IO unit_9
       with
      | (ex1_12 m_11751 n_11752), __11753 =>
        let* r1_11754 :=
          fork
            fun _11755 : ((cmsort_ch_36‹t_11718›) m_11751) -o IO unit_9
            | _11757 =>
              ((cmsort_worker_11722) (__sub__ __11733 1) m_11751 _11757)
        in
        let* r2_11758 :=
          fork
            fun _11759 : ((cmsort_ch_36‹t_11718›) n_11752) -o IO unit_9
            | _11761 =>
              ((cmsort_worker_11722) (__sub__ __11733 1) n_11752 _11761)
        in
        let* _11762 := recv r1_11754 in
        (match _11762 in
           (exists1_9‹t_11718,L›
             ((ssing_6‹t_11718›)
               (list_6‹U,t_11718› int) ((msort_35‹t_11718›) m_11751))
             fun _11764 :
               ((ssing_6‹t_11718›)
                 (list_6‹U,t_11718› int)
                 ((msort_35‹t_11718›) m_11751)) -> L
             | __11766 => hc⟨•⟩) -o IO base_3‹U›
         with
        | (ex1_12 (just_2 m_11767) n_11768) =>
          let* _11769 := recv r2_11758 in
          (match _11769 in
             (exists1_9‹t_11718,L›
               ((ssing_6‹t_11718›)
                 (list_6‹U,t_11718› int)
                 ((msort_35‹t_11718›) n_11752))
               fun _11771 :
                 ((ssing_6‹t_11718›)
                   (list_6‹U,t_11718› int)
                   ((msort_35‹t_11718›) n_11752)) -> L
               | __11773 => hc⟨•⟩) -o IO base_3‹U›
           with
          | (ex1_12 (just_2 m_11774) n_11775) =>
            let zs1_11776 :=
              (just_2‹t_11718,t_11718›
                (list_6‹U,t_11718› int)
                ((merge_34‹t_11718›) m_11767 m_11774))
            in
            let zs1_11777 :=
              ((rwl_2‹t_11718,t_11718›)
                (list_6‹U,t_11718› int)
                ((merge_34‹t_11718›)
                  ((msort_35‹t_11718›) m_11751)
                  ((msort_35‹t_11718›) n_11752))
                (match ((split_33‹t_11718›)
                         (cons_9‹U,t_11718›
                           int hd_11734
                           (cons_9‹U,t_11718› int hd_11735 tl_11736))) in
                   ((prod1_25‹t_11718,t_11718›)
                     (list_6‹U,t_11718› int) (list_6‹U,t_11718› int)) -o
                     (list_6‹U,t_11718› int)
                 with
                | (ex1_12 m_11779 n_11780) =>
                  ((merge_34‹t_11718›)
                    ((msort_35‹t_11718›) m_11779)
                    ((msort_35‹t_11718›) n_11780)))
                fun _11781 : (list_6‹U,t_11718› int) -> Type‹t_11718›
                | __11783 =>
                  ((ssing_6‹t_11718›)
                    (list_6‹U,t_11718› int) __11783)
                __11753 zs1_11776)
            in
            let* c_11784 := ((send __11737) zs1_11777) in
            let* __11785 := close n_11768 in
            let* __11786 := close n_11775 in close c_11784))))

#[program]
def cmsort_38‹t_11787› :
  ∀ (zs_11788 : (list_6‹U,t_11787› int)) ->
    IO ((ssing_6‹t_11787›)
         (list_6‹U,t_11787› int) ((msort_35‹t_11787›) zs_11788))
:=
  fun cmsort_11789 :
    ∀ (zs_11790 : (list_6‹U,t_11787› int)) ->
      IO ((ssing_6‹t_11787›)
           (list_6‹U,t_11787› int) ((msort_35‹t_11787›) zs_11790))
  | zs_11791 =>
    let* c_11792 :=
      fork
        fun _11793 : ((cmsort_ch_36‹t_11787›) zs_11791) -o IO unit_9
        | _11795 => ((cmsort_worker_37‹t_11787›) 4 zs_11791 _11795)
    in
    let* _11796 := recv c_11792 in
    (match _11796 in
       (exists1_9‹t_11787,L›
         ((ssing_6‹t_11787›)
           (list_6‹U,t_11787› int) ((msort_35‹t_11787›) zs_11791))
         fun _11798 :
           ((ssing_6‹t_11787›)
             (list_6‹U,t_11787› int) ((msort_35‹t_11787›) zs_11791)) ->
             L
         | __11800 => hc⟨•⟩) -o
         IO ((ssing_6‹t_11787›)
              (list_6‹U,t_11787› int) ((msort_35‹t_11787›) zs_11791))
     with
    | (ex1_12 m_11801 n_11802) =>
      let* __11803 := close n_11802 in return m_11801)

#[program]
def mklist_39‹t_11804› : int -> (list_6‹U,t_11804› int) :=
  fun mklist_11806 : int -> (list_6‹U,t_11804› int)
  | n_11808 =>
    (match (__lte__ n_11808 0) in bool_4 -o (list_6‹U,t_11804› int) with
    | true_4 => (nil_8‹U,t_11804› int)
    | false_5 =>
      (cons_9‹U,t_11804›
        int n_11808 ((mklist_11806) (__sub__ n_11808 1))))

#[program]
def list_len_40‹t_11810› : (list_6‹U,t_11810› int) -> int :=
  fun list_len_11812 : (list_6‹U,t_11810› int) -> int
  | nil_8 => 0
  | (cons_9 hd_11814 tl_11815) => (__add__ 1 ((list_len_11812) tl_11815))

#[program]
def print_list_41‹t_11816› : (list_6‹U,t_11816› int) -> IO unit_9 :=
  fun print_list_11818 : (list_6‹U,t_11816› int) -> IO unit_9
  | nil_8 => print "nil"
  | (cons_9 hd_11820 tl_11821) =>
    let* __11822 := print ((string_of_int_32) hd_11820) in
    let* __11823 := print " :: " in ((print_list_11818) tl_11821)

#[program]
def main_42‹› : IO unit_9 :=
  let test_11824 := ((mklist_39‹L›) 2000000) in
  let* _11825 := ((cmsort_38‹L›) test_11824) in
  (match _11825 in
     ((ssing_6‹L›) (list_6‹U,L› int) ((msort_35‹L›) test_11824)) -o
       IO base_3‹U›
   with
  | (just_2 m_11827) =>
    let len_11828 := ((list_len_40‹L›) m_11827) in
    print ((string_of_int_32) len_11828))

[trans1e success]

-----------------------------------------

#[program]
def idU_44 := fun id_21260 (A_21261) -> (m_21262) ->
                m_21262

#[program]
def idL_43 := fun id_21263 (A_21264) -> (m_21265) ->
                m_21265

#[logical]
inductive eqU_11 where
| reflU_14 of layout[]

#[logical]
inductive eqL_10 where
| reflL_13 of layout[]

#[program]
def rwlUU_48 :=
  fun rwl_21266 {A_21267} -> {m_21268} -> {n_21269} -> {B_21270} ->
  {__21271} -> (__21272) ->
    (match {NULL} with
    | reflU_14  => __21272)

#[program]
def rwlUL_47 :=
  fun rwl_21273 {A_21274} -> {m_21275} -> {n_21276} -> {B_21277} ->
  {__21278} -> (__21279) ->
    (match {NULL} with
    | reflU_14  => __21279)

#[program]
def rwlLU_46 :=
  fun rwl_21280 {A_21281} -> {m_21282} -> {n_21283} -> {B_21284} ->
  {__21285} -> (__21286) ->
    (match {NULL} with
    | reflL_13  => __21286)

#[program]
def rwlLL_45 :=
  fun rwl_21287 {A_21288} -> {m_21289} -> {n_21290} -> {B_21291} ->
  {__21292} -> (__21293) ->
    (match {NULL} with
    | reflL_13  => __21293)

#[program]
def rwrUU_52 :=
  fun rwr_21294 {A_21295} -> {m_21296} -> {n_21297} -> {B_21298} ->
  {__21299} -> (__21300) ->
    (match {NULL} with
    | reflU_14  => __21300)

#[program]
def rwrUL_51 :=
  fun rwr_21301 {A_21302} -> {m_21303} -> {n_21304} -> {B_21305} ->
  {__21306} -> (__21307) ->
    (match {NULL} with
    | reflU_14  => __21307)

#[program]
def rwrLU_50 :=
  fun rwr_21308 {A_21309} -> {m_21310} -> {n_21311} -> {B_21312} ->
  {__21313} -> (__21314) ->
    (match {NULL} with
    | reflL_13  => __21314)

#[program]
def rwrLL_49 :=
  fun rwr_21315 {A_21316} -> {m_21317} -> {n_21318} -> {B_21319} ->
  {__21320} -> (__21321) ->
    (match {NULL} with
    | reflL_13  => __21321)

#[logical]
def congrUUU_60 := NULL

#[logical]
def congrUUL_59 := NULL

#[logical]
def congrULU_58 := NULL

#[logical]
def congrULL_57 := NULL

#[logical]
def congrLUU_56 := NULL

#[logical]
def congrLUL_55 := NULL

#[logical]
def congrLLU_54 := NULL

#[logical]
def congrLLL_53 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_15 where
| justUU_18 of layout[R]

#[program]
inductive singUL_14 where
| justUL_17 of layout[R]

#[program]
inductive singLU_13 where


#[program]
inductive singLL_12 where
| justLL_15 of layout[R]

#[logical]
def ssingU_62 := NULL

#[logical]
def ssingL_61 := NULL

#[program]
def sing_elimUU_66 :=
  fun sing_elim_21322 {A_21323} -> {x_21324} -> (__21325) ->
    (match __21325 with
    | justUU_18 m_21326 => m_21326)

#[program]
def sing_elimUL_65 :=
  fun sing_elim_21327 {A_21328} -> {x_21329} -> (__21330) ->
    (match __21330 with
    | justUL_17 m_21331 => m_21331)

#[program]
def sing_elimLU_64 :=
  fun sing_elim_21332 {A_21333} -> {x_21334} -> (__21335) ->
    (match __21335 with
    )

#[program]
def sing_elimLL_63 :=
  fun sing_elim_21336 {A_21337} -> {x_21338} -> (__21339) ->
    (match __21339 with
    | justLL_15 m_21340 => m_21340)

#[logical]
def sing_uniqUU_70 := NULL

#[logical]
def sing_uniqUL_69 := NULL

#[logical]
def sing_uniqLU_68 := NULL

#[logical]
def sing_uniqLL_67 := NULL

#[program]
inductive baseU_17 where
| ttU_20 of layout[]

#[program]
inductive baseL_16 where
| ttL_19 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_21341 (__21342) ->
    (match __21342 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_21343 (__21344) -> (__21345) ->
    (match __21344 with
    | true_4  =>
      (match __21345 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_21346 (__21347) -> (__21348) ->
    (match __21347 with
    | true_4  => true_4
    | false_5  =>
      (match __21348 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_21349 (__21350) -> (__21351) ->
    (match __21350 with
    | true_4  =>
      (match __21351 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __21351 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_21352 (__21353) -> (__21354) ->
    (match __21353 with
    | zero_6  => true_4
    | succ_7 n_21355 =>
      (match __21354 with
      | zero_6  => false_5 | succ_7 n_21356 => ((lte_21352) n_21355 n_21356)))

#[program]
def lt_16 :=
  fun lt_21357 (x_21358) -> (y_21359) ->
    ((lte_15) (succ_7 x_21358) y_21359)

#[program]
def pred_17 :=
  fun pred_21360 (__21361) ->
    (match __21361 with
    | zero_6  => zero_6 | succ_7 n_21362 => n_21362)

#[program]
def add_18 :=
  fun add_21363 (__21364) -> (__21365) ->
    (match __21364 with
    | zero_6  => __21365
    | succ_7 n_21366 => (succ_7 ((add_21363) n_21366 __21365)))

#[program]
def sub_19 :=
  fun sub_21367 (__21368) -> (__21369) ->
    (match __21369 with
    | zero_6  => __21368
    | succ_7 n_21370 => ((sub_21367) ((pred_17) __21368) n_21370))

#[program]
def mul_20 :=
  fun mul_21371 (__21372) -> (__21373) ->
    (match __21372 with
    | zero_6  => zero_6
    | succ_7 n_21374 => ((add_18) __21373 ((mul_21371) n_21374 __21373)))

#[program]
def div_21 :=
  fun div_21375 (x_21376) -> (y_21377) ->
    (match ((lt_16) x_21376 y_21377) with
    | true_4  => zero_6
    | false_5  =>
      let loop_21378 :=
        fun loop_21379 (x_21380) -> (y_21381) ->
          (match ((sub_19) x_21380 ((pred_17) y_21381)) with
          | zero_6  => zero_6
          | succ_7 n_21382 => (succ_7 ((loop_21379) n_21382 y_21381)))
      in ((loop_21378) x_21376 y_21377))

#[program]
def rem_22 :=
  fun rem_21383 (x_21384) -> (y_21385) ->
    ((sub_19) x_21384 ((mul_20) ((div_21) x_21384 y_21385) y_21385))

#[program]
inductive listUU_21 where
| nilUU_27 of layout[]
| consUU_28 of layout[R, R]

#[program]
inductive listUL_20 where
| nilUL_25 of layout[]
| consUL_26 of layout[R, R]

#[program]
inductive listLU_19 where
| nilLU_23 of layout[]

#[program]
inductive listLL_18 where
| nilLL_21 of layout[]
| consLL_22 of layout[R, R]

#[program]
def free_listUU_74 :=
  fun free_list_21386 {A_21387} -> (f_21388) -> (__21389) ->
    (match __21389 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_21390 tl_21391 =>
      let __21392 := ((f_21388) hd_21390) in
      ((free_list_21386) NULL f_21388 tl_21391))

#[program]
def free_listUL_73 :=
  fun free_list_21393 {A_21394} -> (f_21395) -> (__21396) ->
    (match __21396 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_21397 tl_21398 =>
      let __21399 := ((f_21395) hd_21397) in
      ((free_list_21393) NULL f_21395 tl_21398))

#[program]
def free_listLL_71 :=
  fun free_list_21400 {A_21401} -> (f_21402) -> (__21403) ->
    (match __21403 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_21404 tl_21405 =>
      let __21406 := ((f_21402) hd_21404) in
      ((free_list_21400) NULL f_21402 tl_21405))

#[program]
inductive existsUU_25 where
| exUU_32 of layout[R, N]

#[program]
inductive existsUL_24 where
| exUL_31 of layout[R, N]

#[program]
inductive existsLU_23 where
| exLU_30 of layout[R, N]

#[program]
inductive existsLL_22 where
| exLL_29 of layout[R, N]

#[program]
inductive exists0UU_29 where
| ex0UU_36 of layout[N, R]

#[program]
inductive exists0UL_28 where
| ex0UL_35 of layout[N, R]

#[program]
inductive exists0LU_27 where
| ex0LU_34 of layout[N, R]

#[program]
inductive exists0LL_26 where
| ex0LL_33 of layout[N, R]

#[program]
inductive exists1UU_33 where
| ex1UU_40 of layout[R, R]

#[program]
inductive exists1UL_32 where
| ex1UL_39 of layout[R, R]

#[program]
inductive exists1LU_31 where
| ex1LU_38 of layout[R, R]

#[program]
inductive exists1LL_30 where
| ex1LL_37 of layout[R, R]

#[logical]
def prod0UU_78 := NULL

#[logical]
def prod0UL_77 := NULL

#[logical]
def prod0LU_76 := NULL

#[logical]
def prod0LL_75 := NULL

#[logical]
def prod1UU_82 := NULL

#[logical]
def prod1UL_81 := NULL

#[logical]
def prod1LU_80 := NULL

#[logical]
def prod1LL_79 := NULL

#[program]
def pow_26 :=
  fun pow_21407 (x_21408) -> (y_21409) ->
    let loop_21410 :=
      fun loop_21411 (acc_21412) -> (y_21413) ->
        (match (__lte__ y_21413 0) with
        | true_4  => acc_21412
        | false_5  =>
          ((loop_21411) (__mul__ x_21408 acc_21412) (__sub__ y_21413 1)))
    in ((loop_21410) 1 y_21409)

#[program]
def powm_27 :=
  fun powm_21414 (x_21415) -> (y_21416) -> (m_21417) ->
    let loop_21418 :=
      fun loop_21419 (acc_21420) -> (y_21421) ->
        (match (__lte__ y_21421 0) with
        | true_4  => acc_21420
        | false_5  =>
          ((loop_21419)
            (__mod__ (__mul__ x_21415 acc_21420) m_21417) (__sub__ y_21421 1)))
    in ((loop_21418) 1 y_21416)

#[program]
def ord_28 := fun ord_21422 (c_21423) ->
                (__ord__ c_21423)

#[program]
def chr_29 := fun chr_21424 (i_21425) ->
                (__chr__ i_21425)

#[program]
def str_30 := fun str_21426 (c_21427) ->
                (__push__ "" c_21427)

#[program]
def strlen_31 := fun strlen_21428 (s_21429) ->
                   (__size__ s_21429)

#[program]
def string_of_int_32 :=
  fun string_of_int_21430 (i_21431) ->
    let aux_21432 :=
      fun aux_21433 (i_21434) ->
        (match (__lte__ 10 i_21434) with
        | true_4  =>
          let r_21435 := (__mod__ i_21434 10) in
          let i_21436 := (__div__ i_21434 10) in
          (__push__ ((aux_21433) i_21436)
            ((chr_29) (__add__ r_21435 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_21434 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_21431) with
    | true_4  => ((aux_21432) i_21431)
    | false_5  => (__cat__ "~" ((aux_21432) (__neg__ i_21431))))

#[program]
def splitU_84 :=
  fun split_21437 (__21438) ->
    (match __21438 with
    | nilUU_27  => (ex1UU_40 nilUU_27 nilUU_27)
    | consUU_28 hd_21439 tl_21440 =>
      (match tl_21440 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_21439 nilUU_27) nilUU_27)
      | consUU_28 hd_21441 tl_21442 =>
        (match ((split_21437) tl_21442) with
        | ex1UU_40 m_21443 n_21444 =>
          (ex1UU_40
            (consUU_28 hd_21439 m_21443) (consUU_28 hd_21441 n_21444)))))

#[program]
def splitL_83 :=
  fun split_21445 (__21446) ->
    (match __21446 with
    | nilUL_25  => (ex1LL_37 nilUL_25 nilUL_25)
    | consUL_26 hd_21447 tl_21448 =>
      (match tl_21448 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_21447 nilUL_25) nilUL_25)
      | consUL_26 hd_21449 tl_21450 =>
        (match ((split_21445) tl_21450) with
        | ex1LL_37 m_21451 n_21452 =>
          (ex1LL_37
            (consUL_26 hd_21447 m_21451) (consUL_26 hd_21449 n_21452)))))

#[program]
def mergeU_86 :=
  fun merge_21453 (__21454) -> (__21455) -o
    (match __21454 with
    | nilUU_27  => __21455
    | consUU_28 hd_21456 tl_21457 =>
      (match __21455 with
      | nilUU_27  => (consUU_28 hd_21456 tl_21457)
      | consUU_28 hd_21458 tl_21459 =>
        (match (__lte__ hd_21456 hd_21458) with
        | true_4  =>
          (consUU_28
            hd_21456 ((merge_21453) tl_21457 (consUU_28 hd_21458 tl_21459)))
        | false_5  =>
          (consUU_28
            hd_21458 ((merge_21453) (consUU_28 hd_21456 tl_21457) tl_21459)))))

#[program]
def mergeL_85 :=
  fun merge_21460 (__21461) -> (__21462) -o
    (match __21461 with
    | nilUL_25  => __21462
    | consUL_26 hd_21463 tl_21464 =>
      (match __21462 with
      | nilUL_25  => (consUL_26 hd_21463 tl_21464)
      | consUL_26 hd_21465 tl_21466 =>
        (match (__lte__ hd_21463 hd_21465) with
        | true_4  =>
          (consUL_26
            hd_21463 ((merge_21460) tl_21464 (consUL_26 hd_21465 tl_21466)))
        | false_5  =>
          (consUL_26
            hd_21465 ((merge_21460) (consUL_26 hd_21463 tl_21464) tl_21466)))))

#[program]
def msortU_88 :=
  fun msort_21467 (__21468) ->
    (match __21468 with
    | nilUU_27  => nilUU_27
    | consUU_28 hd_21469 tl_21470 =>
      (match tl_21470 with
      | nilUU_27  => (consUU_28 hd_21469 nilUU_27)
      | consUU_28 hd_21471 tl_21472 =>
        (match ((splitU_84)
                 (consUU_28 hd_21469 (consUU_28 hd_21471 tl_21472))) with
        | ex1UU_40 m_21473 n_21474 =>
          ((mergeU_86) ((msort_21467) m_21473) ((msort_21467) n_21474)))))

#[program]
def msortL_87 :=
  fun msort_21475 (__21476) ->
    (match __21476 with
    | nilUL_25  => nilUL_25
    | consUL_26 hd_21477 tl_21478 =>
      (match tl_21478 with
      | nilUL_25  => (consUL_26 hd_21477 nilUL_25)
      | consUL_26 hd_21479 tl_21480 =>
        (match ((splitL_83)
                 (consUL_26 hd_21477 (consUL_26 hd_21479 tl_21480))) with
        | ex1LL_37 m_21481 n_21482 =>
          ((mergeL_85) ((msort_21475) m_21481) ((msort_21475) n_21482)))))

#[logical]
def cmsort_chU_90 := NULL

#[logical]
def cmsort_chL_89 := NULL

#[program]
def cmsort_workerU_92 :=
  fun cmsort_worker_21483 (__21484) -> (zs_21485) -> (__21486) -o
    (match zs_21485 with
    | nilUU_27  =>
      let* c_21487 := ((send[R,U] __21486) (justUU_18 nilUU_27)) in
      close[true] c_21487
    | consUU_28 hd_21488 tl_21489 =>
      (match tl_21489 with
      | nilUU_27  =>
        let* c_21490 :=
          ((send[R,U] __21486) (justUU_18 (consUU_28 hd_21488 nilUU_27)))
        in close[true] c_21490
      | consUU_28 hd_21491 tl_21492 =>
        (match (__lte__ __21484 0) with
        | true_4  =>
          let* c_21493 :=
            ((send[R,U] __21486)
              (justUU_18
                ((msortU_88)
                  (consUU_28 hd_21488 (consUU_28 hd_21491 tl_21492)))))
          in close[true] c_21493
        | false_5  =>
          (match ((splitU_84)
                   (consUU_28 hd_21488 (consUU_28 hd_21491 tl_21492))) with
          | ex1UU_40 m_21494 n_21495 =>
            let* r1_21496 :=
              fork
                fun _21497 (_21498) -o
                  ((cmsort_worker_21483) (__sub__ __21484 1) m_21494 _21498)
            in
            let* r2_21499 :=
              fork
                fun _21500 (_21501) -o
                  ((cmsort_worker_21483) (__sub__ __21484 1) n_21495 _21501)
            in
            let* _21502 := recv[R,U] r1_21496 in
            (match _21502 with
            | ex1UL_39 m_21503 n_21504 =>
              (match m_21503 with
              | justUU_18 m_21505 =>
                let* _21506 := recv[R,U] r2_21499 in
                (match _21506 with
                | ex1UL_39 m_21507 n_21508 =>
                  (match m_21507 with
                  | justUU_18 m_21509 =>
                    let zs1_21510 :=
                      (justUU_18 ((mergeU_86) m_21505 m_21509))
                    in
                    let zs1_21511 :=
                      ((rwlUU_48) NULL NULL NULL NULL NULL zs1_21510)
                    in
                    let* c_21512 := ((send[R,U] __21486) zs1_21511) in
                    let* __21513 := close[false] n_21504 in
                    let* __21514 := close[false] n_21508 in
                    close[true] c_21512))))))))

#[program]
def cmsort_workerL_91 :=
  fun cmsort_worker_21515 (__21516) -> (zs_21517) -> (__21518) -o
    (match zs_21517 with
    | nilUL_25  =>
      let* c_21519 := ((send[R,L] __21518) (justLL_15 nilUL_25)) in
      close[true] c_21519
    | consUL_26 hd_21520 tl_21521 =>
      (match tl_21521 with
      | nilUL_25  =>
        let* c_21522 :=
          ((send[R,L] __21518) (justLL_15 (consUL_26 hd_21520 nilUL_25)))
        in close[true] c_21522
      | consUL_26 hd_21523 tl_21524 =>
        (match (__lte__ __21516 0) with
        | true_4  =>
          let* c_21525 :=
            ((send[R,L] __21518)
              (justLL_15
                ((msortL_87)
                  (consUL_26 hd_21520 (consUL_26 hd_21523 tl_21524)))))
          in close[true] c_21525
        | false_5  =>
          (match ((splitL_83)
                   (consUL_26 hd_21520 (consUL_26 hd_21523 tl_21524))) with
          | ex1LL_37 m_21526 n_21527 =>
            let* r1_21528 :=
              fork
                fun _21529 (_21530) -o
                  ((cmsort_worker_21515) (__sub__ __21516 1) m_21526 _21530)
            in
            let* r2_21531 :=
              fork
                fun _21532 (_21533) -o
                  ((cmsort_worker_21515) (__sub__ __21516 1) n_21527 _21533)
            in
            let* _21534 := recv[R,L] r1_21528 in
            (match _21534 with
            | ex1LL_37 m_21535 n_21536 =>
              (match m_21535 with
              | justLL_15 m_21537 =>
                let* _21538 := recv[R,L] r2_21531 in
                (match _21538 with
                | ex1LL_37 m_21539 n_21540 =>
                  (match m_21539 with
                  | justLL_15 m_21541 =>
                    let zs1_21542 :=
                      (justLL_15 ((mergeL_85) m_21537 m_21541))
                    in
                    let zs1_21543 :=
                      ((rwlLL_45) NULL NULL NULL NULL NULL zs1_21542)
                    in
                    let* c_21544 := ((send[R,L] __21518) zs1_21543) in
                    let* __21545 := close[false] n_21536 in
                    let* __21546 := close[false] n_21540 in
                    close[true] c_21544))))))))

#[program]
def cmsortU_94 :=
  fun cmsort_21547 (zs_21548) ->
    let* c_21549 :=
      fork fun _21550 (_21551) -o
             ((cmsort_workerU_92) 4 zs_21548 _21551)
    in
    let* _21552 := recv[R,U] c_21549 in
    (match _21552 with
    | ex1UL_39 m_21553 n_21554 =>
      let* __21555 := close[false] n_21554 in return m_21553)

#[program]
def cmsortL_93 :=
  fun cmsort_21556 (zs_21557) ->
    let* c_21558 :=
      fork fun _21559 (_21560) -o
             ((cmsort_workerL_91) 4 zs_21557 _21560)
    in
    let* _21561 := recv[R,L] c_21558 in
    (match _21561 with
    | ex1LL_37 m_21562 n_21563 =>
      let* __21564 := close[false] n_21563 in return m_21562)

#[program]
def mklistU_96 :=
  fun mklist_21565 (n_21566) ->
    (match (__lte__ n_21566 0) with
    | true_4  => nilUU_27
    | false_5  => (consUU_28 n_21566 ((mklist_21565) (__sub__ n_21566 1))))

#[program]
def mklistL_95 :=
  fun mklist_21567 (n_21568) ->
    (match (__lte__ n_21568 0) with
    | true_4  => nilUL_25
    | false_5  => (consUL_26 n_21568 ((mklist_21567) (__sub__ n_21568 1))))

#[program]
def list_lenU_98 :=
  fun list_len_21569 (__21570) ->
    (match __21570 with
    | nilUU_27  => 0
    | consUU_28 hd_21571 tl_21572 => (__add__ 1 ((list_len_21569) tl_21572)))

#[program]
def list_lenL_97 :=
  fun list_len_21573 (__21574) ->
    (match __21574 with
    | nilUL_25  => 0
    | consUL_26 hd_21575 tl_21576 => (__add__ 1 ((list_len_21573) tl_21576)))

#[program]
def print_listU_100 :=
  fun print_list_21577 (__21578) ->
    (match __21578 with
    | nilUU_27  => print "nil"
    | consUU_28 hd_21579 tl_21580 =>
      let* __21581 := print ((string_of_int_32) hd_21579) in
      let* __21582 := print " :: " in ((print_list_21577) tl_21580))

#[program]
def print_listL_99 :=
  fun print_list_21583 (__21584) ->
    (match __21584 with
    | nilUL_25  => print "nil"
    | consUL_26 hd_21585 tl_21586 =>
      let* __21587 := print ((string_of_int_32) hd_21585) in
      let* __21588 := print " :: " in ((print_list_21583) tl_21586))

#[program]
def main :=
  let test_21589 := ((mklistL_95) 2000000) in
  let* _21590 := ((cmsortL_93) test_21589) in
  (match _21590 with
  | justLL_15 m_21591 =>
    let len_21592 := ((list_lenL_97) m_21591) in
    print ((string_of_int_32) len_21592))

[trans12 success]

-----------------------------------------

#[program]
def idU_44 := fun id_21926 (A_21927) -> (m_21928) ->
                m_21928

#[program]
def idL_43 := fun id_21929 (A_21930) -> (m_21931) ->
                m_21931

#[logical]
inductive eqU_11 where
| reflU_14 of layout[]

#[logical]
inductive eqL_10 where
| reflL_13 of layout[]

#[program]
def rwlUU_48 :=
  fun rwl_21932 {A_21933} -> {m_21934} -> {n_21935} -> {B_21936} ->
  {__21937} -> (__21938) ->
    __21938

#[program]
def rwlUL_47 :=
  fun rwl_21939 {A_21940} -> {m_21941} -> {n_21942} -> {B_21943} ->
  {__21944} -> (__21945) ->
    __21945

#[program]
def rwlLU_46 :=
  fun rwl_21946 {A_21947} -> {m_21948} -> {n_21949} -> {B_21950} ->
  {__21951} -> (__21952) ->
    __21952

#[program]
def rwlLL_45 :=
  fun rwl_21953 {A_21954} -> {m_21955} -> {n_21956} -> {B_21957} ->
  {__21958} -> (__21959) ->
    __21959

#[program]
def rwrUU_52 :=
  fun rwr_21960 {A_21961} -> {m_21962} -> {n_21963} -> {B_21964} ->
  {__21965} -> (__21966) ->
    __21966

#[program]
def rwrUL_51 :=
  fun rwr_21967 {A_21968} -> {m_21969} -> {n_21970} -> {B_21971} ->
  {__21972} -> (__21973) ->
    __21973

#[program]
def rwrLU_50 :=
  fun rwr_21974 {A_21975} -> {m_21976} -> {n_21977} -> {B_21978} ->
  {__21979} -> (__21980) ->
    __21980

#[program]
def rwrLL_49 :=
  fun rwr_21981 {A_21982} -> {m_21983} -> {n_21984} -> {B_21985} ->
  {__21986} -> (__21987) ->
    __21987

#[logical]
def congrUUU_60 := NULL

#[logical]
def congrUUL_59 := NULL

#[logical]
def congrULU_58 := NULL

#[logical]
def congrULL_57 := NULL

#[logical]
def congrLUU_56 := NULL

#[logical]
def congrLUL_55 := NULL

#[logical]
def congrLLU_54 := NULL

#[logical]
def congrLLL_53 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_15 where
| justUU_18 of layout[R]

#[program]
inductive singUL_14 where
| justUL_17 of layout[R]

#[program]
inductive singLU_13 where


#[program]
inductive singLL_12 where
| justLL_15 of layout[R]

#[logical]
def ssingU_62 := NULL

#[logical]
def ssingL_61 := NULL

#[program]
def sing_elimUU_66 :=
  fun sing_elim_21988 {A_21989} -> {x_21990} -> (__21991) ->
    (match __21991 with
    | justUU_18 m_21992 => m_21992)

#[program]
def sing_elimUL_65 :=
  fun sing_elim_21993 {A_21994} -> {x_21995} -> (__21996) ->
    (match __21996 with
    | justUL_17 m_21997 => m_21997)

#[program]
def sing_elimLU_64 :=
  fun sing_elim_21998 {A_21999} -> {x_22000} -> (__22001) ->
    !!

#[program]
def sing_elimLL_63 :=
  fun sing_elim_22002 {A_22003} -> {x_22004} -> (__22005) ->
    (match __22005 with
    | justLL_15 m_22006 => m_22006)

#[logical]
def sing_uniqUU_70 := NULL

#[logical]
def sing_uniqUL_69 := NULL

#[logical]
def sing_uniqLU_68 := NULL

#[logical]
def sing_uniqLL_67 := NULL

#[program]
inductive baseU_17 where
| ttU_20 of layout[]

#[program]
inductive baseL_16 where
| ttL_19 of layout[]

#[logical]
def unit_9 := NULL

#[logical]
def unit_eta_10 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_11 :=
  fun not_22007 (__22008) ->
    (match __22008 with
    | true_4  => false_5 | false_5  => true_4)

#[program]
def and_12 :=
  fun and_22009 (__22010) -> (__22011) ->
    (match __22010 with
    | true_4  =>
      (match __22011 with
      | true_4  => true_4 | false_5  => false_5)
    | false_5  => false_5)

#[program]
def or_13 :=
  fun or_22012 (__22013) -> (__22014) ->
    (match __22013 with
    | true_4  => true_4
    | false_5  =>
      (match __22014 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
def xor_14 :=
  fun xor_22015 (__22016) -> (__22017) ->
    (match __22016 with
    | true_4  =>
      (match __22017 with
      | true_4  => false_5 | false_5  => true_4)
    | false_5  =>
      (match __22017 with
      | true_4  => true_4 | false_5  => false_5))

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_15 :=
  fun lte_22018 (__22019) -> (__22020) ->
    (match __22019 with
    | zero_6  => true_4
    | succ_7 n_22021 =>
      (match __22020 with
      | zero_6  => false_5 | succ_7 n_22022 => ((lte_22018) n_22021 n_22022)))

#[program]
def lt_16 :=
  fun lt_22023 (x_22024) -> (y_22025) ->
    ((lte_15) (succ_7 x_22024) y_22025)

#[program]
def pred_17 :=
  fun pred_22026 (__22027) ->
    (match __22027 with
    | zero_6  => zero_6 | succ_7 n_22028 => n_22028)

#[program]
def add_18 :=
  fun add_22029 (__22030) -> (__22031) ->
    (match __22030 with
    | zero_6  => __22031
    | succ_7 n_22032 => (succ_7 ((add_22029) n_22032 __22031)))

#[program]
def sub_19 :=
  fun sub_22033 (__22034) -> (__22035) ->
    (match __22035 with
    | zero_6  => __22034
    | succ_7 n_22036 => ((sub_22033) ((pred_17) __22034) n_22036))

#[program]
def mul_20 :=
  fun mul_22037 (__22038) -> (__22039) ->
    (match __22038 with
    | zero_6  => zero_6
    | succ_7 n_22040 => ((add_18) __22039 ((mul_22037) n_22040 __22039)))

#[program]
def div_21 :=
  fun div_22041 (x_22042) -> (y_22043) ->
    (match ((lt_16) x_22042 y_22043) with
    | true_4  => zero_6
    | false_5  =>
      let loop_22044 :=
        fun loop_22045 (x_22046) -> (y_22047) ->
          (match ((sub_19) x_22046 ((pred_17) y_22047)) with
          | zero_6  => zero_6
          | succ_7 n_22048 => (succ_7 ((loop_22045) n_22048 y_22047)))
      in ((loop_22044) x_22042 y_22043))

#[program]
def rem_22 :=
  fun rem_22049 (x_22050) -> (y_22051) ->
    ((sub_19) x_22050 ((mul_20) ((div_21) x_22050 y_22051) y_22051))

#[program]
inductive listUU_21 where
| nilUU_27 of layout[]
| consUU_28 of layout[R, R]

#[program]
inductive listUL_20 where
| nilUL_25 of layout[]
| consUL_26 of layout[R, R]

#[program]
inductive listLU_19 where
| nilLU_23 of layout[]

#[program]
inductive listLL_18 where
| nilLL_21 of layout[]
| consLL_22 of layout[R, R]

#[program]
def free_listUU_74 :=
  fun free_list_22052 {A_22053} -> (f_22054) -> (__22055) ->
    (match __22055 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_22056 tl_22057 =>
      let __22058 := ((f_22054) hd_22056) in
      ((free_list_22052) NULL f_22054 tl_22057))

#[program]
def free_listUL_73 :=
  fun free_list_22059 {A_22060} -> (f_22061) -> (__22062) ->
    (match __22062 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_22063 tl_22064 =>
      let __22065 := ((f_22061) hd_22063) in
      ((free_list_22059) NULL f_22061 tl_22064))

#[program]
def free_listLL_71 :=
  fun free_list_22066 {A_22067} -> (f_22068) -> (__22069) ->
    (match __22069 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_22070 tl_22071 =>
      let __22072 := ((f_22068) hd_22070) in
      ((free_list_22066) NULL f_22068 tl_22071))

#[program]
inductive existsUU_25 where
| exUU_32 of layout[R, N]

#[program]
inductive existsUL_24 where
| exUL_31 of layout[R, N]

#[program]
inductive existsLU_23 where
| exLU_30 of layout[R, N]

#[program]
inductive existsLL_22 where
| exLL_29 of layout[R, N]

#[program]
inductive exists0UU_29 where
| ex0UU_36 of layout[N, R]

#[program]
inductive exists0UL_28 where
| ex0UL_35 of layout[N, R]

#[program]
inductive exists0LU_27 where
| ex0LU_34 of layout[N, R]

#[program]
inductive exists0LL_26 where
| ex0LL_33 of layout[N, R]

#[program]
inductive exists1UU_33 where
| ex1UU_40 of layout[R, R]

#[program]
inductive exists1UL_32 where
| ex1UL_39 of layout[R, R]

#[program]
inductive exists1LU_31 where
| ex1LU_38 of layout[R, R]

#[program]
inductive exists1LL_30 where
| ex1LL_37 of layout[R, R]

#[logical]
def prod0UU_78 := NULL

#[logical]
def prod0UL_77 := NULL

#[logical]
def prod0LU_76 := NULL

#[logical]
def prod0LL_75 := NULL

#[logical]
def prod1UU_82 := NULL

#[logical]
def prod1UL_81 := NULL

#[logical]
def prod1LU_80 := NULL

#[logical]
def prod1LL_79 := NULL

#[program]
def pow_26 :=
  fun pow_22073 (x_22074) -> (y_22075) ->
    let loop_22076 :=
      fun loop_22077 (acc_22078) -> (y_22079) ->
        (match (__lte__ y_22079 0) with
        | true_4  => acc_22078
        | false_5  =>
          ((loop_22077) (__mul__ x_22074 acc_22078) (__sub__ y_22079 1)))
    in ((loop_22076) 1 y_22075)

#[program]
def powm_27 :=
  fun powm_22080 (x_22081) -> (y_22082) -> (m_22083) ->
    let loop_22084 :=
      fun loop_22085 (acc_22086) -> (y_22087) ->
        (match (__lte__ y_22087 0) with
        | true_4  => acc_22086
        | false_5  =>
          ((loop_22085)
            (__mod__ (__mul__ x_22081 acc_22086) m_22083) (__sub__ y_22087 1)))
    in ((loop_22084) 1 y_22082)

#[program]
def ord_28 := fun ord_22088 (c_22089) ->
                (__ord__ c_22089)

#[program]
def chr_29 := fun chr_22090 (i_22091) ->
                (__chr__ i_22091)

#[program]
def str_30 := fun str_22092 (c_22093) ->
                (__push__ "" c_22093)

#[program]
def strlen_31 := fun strlen_22094 (s_22095) ->
                   (__size__ s_22095)

#[program]
def string_of_int_32 :=
  fun string_of_int_22096 (i_22097) ->
    let aux_22098 :=
      fun aux_22099 (i_22100) ->
        (match (__lte__ 10 i_22100) with
        | true_4  =>
          let r_22101 := (__mod__ i_22100 10) in
          let i_22102 := (__div__ i_22100 10) in
          (__push__ ((aux_22099) i_22102)
            ((chr_29) (__add__ r_22101 ((ord_28) 0))))
        | false_5  => ((str_30) ((chr_29) (__add__ i_22100 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_22097) with
    | true_4  => ((aux_22098) i_22097)
    | false_5  => (__cat__ "~" ((aux_22098) (__neg__ i_22097))))

#[program]
def splitU_84 :=
  fun split_22103 (__22104) ->
    (match __22104 with
    | nilUU_27  => (ex1UU_40 nilUU_27 nilUU_27)
    | consUU_28 hd_22105 tl_22106 =>
      (match tl_22106 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_22105 nilUU_27) nilUU_27)
      | consUU_28 hd_22107 tl_22108 =>
        (match ((split_22103) tl_22108) with
        | ex1UU_40 m_22109 n_22110 =>
          (ex1UU_40
            (consUU_28 hd_22105 m_22109) (consUU_28 hd_22107 n_22110)))))

#[program]
def splitL_83 :=
  fun split_22111 (__22112) ->
    (match __22112 with
    | nilUL_25  => (ex1LL_37 nilUL_25 nilUL_25)
    | consUL_26 hd_22113 tl_22114 =>
      (match tl_22114 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_22113 nilUL_25) nilUL_25)
      | consUL_26 hd_22115 tl_22116 =>
        (match ((split_22111) tl_22116) with
        | ex1LL_37 m_22117 n_22118 =>
          (ex1LL_37
            (consUL_26 hd_22113 m_22117) (consUL_26 hd_22115 n_22118)))))

#[program]
def mergeU_86 :=
  fun merge_22119 (__22120) -> (__22121) -o
    (match __22120 with
    | nilUU_27  => __22121
    | consUU_28 hd_22122 tl_22123 =>
      (match __22121 with
      | nilUU_27  => (consUU_28 hd_22122 tl_22123)
      | consUU_28 hd_22124 tl_22125 =>
        (match (__lte__ hd_22122 hd_22124) with
        | true_4  =>
          (consUU_28
            hd_22122 ((merge_22119) tl_22123 (consUU_28 hd_22124 tl_22125)))
        | false_5  =>
          (consUU_28
            hd_22124 ((merge_22119) (consUU_28 hd_22122 tl_22123) tl_22125)))))

#[program]
def mergeL_85 :=
  fun merge_22126 (__22127) -> (__22128) -o
    (match __22127 with
    | nilUL_25  => __22128
    | consUL_26 hd_22129 tl_22130 =>
      (match __22128 with
      | nilUL_25  => (consUL_26 hd_22129 tl_22130)
      | consUL_26 hd_22131 tl_22132 =>
        (match (__lte__ hd_22129 hd_22131) with
        | true_4  =>
          (consUL_26
            hd_22129 ((merge_22126) tl_22130 (consUL_26 hd_22131 tl_22132)))
        | false_5  =>
          (consUL_26
            hd_22131 ((merge_22126) (consUL_26 hd_22129 tl_22130) tl_22132)))))

#[program]
def msortU_88 :=
  fun msort_22133 (__22134) ->
    (match __22134 with
    | nilUU_27  => nilUU_27
    | consUU_28 hd_22135 tl_22136 =>
      (match tl_22136 with
      | nilUU_27  => (consUU_28 hd_22135 nilUU_27)
      | consUU_28 hd_22137 tl_22138 =>
        (match ((splitU_84)
                 (consUU_28 hd_22135 (consUU_28 hd_22137 tl_22138))) with
        | ex1UU_40 m_22139 n_22140 =>
          ((mergeU_86) ((msort_22133) m_22139) ((msort_22133) n_22140)))))

#[program]
def msortL_87 :=
  fun msort_22141 (__22142) ->
    (match __22142 with
    | nilUL_25  => nilUL_25
    | consUL_26 hd_22143 tl_22144 =>
      (match tl_22144 with
      | nilUL_25  => (consUL_26 hd_22143 nilUL_25)
      | consUL_26 hd_22145 tl_22146 =>
        (match ((splitL_83)
                 (consUL_26 hd_22143 (consUL_26 hd_22145 tl_22146))) with
        | ex1LL_37 m_22147 n_22148 =>
          ((mergeL_85) ((msort_22141) m_22147) ((msort_22141) n_22148)))))

#[logical]
def cmsort_chU_90 := NULL

#[logical]
def cmsort_chL_89 := NULL

#[program]
def cmsort_workerU_92 :=
  fun cmsort_worker_22149 (__22150) -> (zs_22151) -> (__22152) -o
    (match zs_22151 with
    | nilUU_27  =>
      let* c_22153 := ((send[R,U] __22152) (justUU_18 nilUU_27)) in
      close[true] c_22153
    | consUU_28 hd_22154 tl_22155 =>
      (match tl_22155 with
      | nilUU_27  =>
        let* c_22156 :=
          ((send[R,U] __22152) (justUU_18 (consUU_28 hd_22154 nilUU_27)))
        in close[true] c_22156
      | consUU_28 hd_22157 tl_22158 =>
        (match (__lte__ __22150 0) with
        | true_4  =>
          let* c_22159 :=
            ((send[R,U] __22152)
              (justUU_18
                ((msortU_88)
                  (consUU_28 hd_22154 (consUU_28 hd_22157 tl_22158)))))
          in close[true] c_22159
        | false_5  =>
          (match ((splitU_84)
                   (consUU_28 hd_22154 (consUU_28 hd_22157 tl_22158))) with
          | ex1UU_40 m_22160 n_22161 =>
            let* r1_22162 :=
              fork
                fun _22163 (_22164) -o
                  ((cmsort_worker_22149) (__sub__ __22150 1) m_22160 _22164)
            in
            let* r2_22165 :=
              fork
                fun _22166 (_22167) -o
                  ((cmsort_worker_22149) (__sub__ __22150 1) n_22161 _22167)
            in
            let* _22168 := recv[R,U] r1_22162 in
            (match _22168 with
            | ex1UL_39 m_22169 n_22170 =>
              (match m_22169 with
              | justUU_18 m_22171 =>
                let* _22172 := recv[R,U] r2_22165 in
                (match _22172 with
                | ex1UL_39 m_22173 n_22174 =>
                  (match m_22173 with
                  | justUU_18 m_22175 =>
                    let zs1_22176 :=
                      (justUU_18 ((mergeU_86) m_22171 m_22175))
                    in
                    let zs1_22177 :=
                      ((rwlUU_48) NULL NULL NULL NULL NULL zs1_22176)
                    in
                    let* c_22178 := ((send[R,U] __22152) zs1_22177) in
                    let* __22179 := close[false] n_22170 in
                    let* __22180 := close[false] n_22174 in
                    close[true] c_22178))))))))

#[program]
def cmsort_workerL_91 :=
  fun cmsort_worker_22181 (__22182) -> (zs_22183) -> (__22184) -o
    (match zs_22183 with
    | nilUL_25  =>
      let* c_22185 := ((send[R,L] __22184) (justLL_15 nilUL_25)) in
      close[true] c_22185
    | consUL_26 hd_22186 tl_22187 =>
      (match tl_22187 with
      | nilUL_25  =>
        let* c_22188 :=
          ((send[R,L] __22184) (justLL_15 (consUL_26 hd_22186 nilUL_25)))
        in close[true] c_22188
      | consUL_26 hd_22189 tl_22190 =>
        (match (__lte__ __22182 0) with
        | true_4  =>
          let* c_22191 :=
            ((send[R,L] __22184)
              (justLL_15
                ((msortL_87)
                  (consUL_26 hd_22186 (consUL_26 hd_22189 tl_22190)))))
          in close[true] c_22191
        | false_5  =>
          (match ((splitL_83)
                   (consUL_26 hd_22186 (consUL_26 hd_22189 tl_22190))) with
          | ex1LL_37 m_22192 n_22193 =>
            let* r1_22194 :=
              fork
                fun _22195 (_22196) -o
                  ((cmsort_worker_22181) (__sub__ __22182 1) m_22192 _22196)
            in
            let* r2_22197 :=
              fork
                fun _22198 (_22199) -o
                  ((cmsort_worker_22181) (__sub__ __22182 1) n_22193 _22199)
            in
            let* _22200 := recv[R,L] r1_22194 in
            (match _22200 with
            | ex1LL_37 m_22201 n_22202 =>
              (match m_22201 with
              | justLL_15 m_22203 =>
                let* _22204 := recv[R,L] r2_22197 in
                (match _22204 with
                | ex1LL_37 m_22205 n_22206 =>
                  (match m_22205 with
                  | justLL_15 m_22207 =>
                    let zs1_22208 :=
                      (justLL_15 ((mergeL_85) m_22203 m_22207))
                    in
                    let zs1_22209 :=
                      ((rwlLL_45) NULL NULL NULL NULL NULL zs1_22208)
                    in
                    let* c_22210 := ((send[R,L] __22184) zs1_22209) in
                    let* __22211 := close[false] n_22202 in
                    let* __22212 := close[false] n_22206 in
                    close[true] c_22210))))))))

#[program]
def cmsortU_94 :=
  fun cmsort_22213 (zs_22214) ->
    let* c_22215 :=
      fork fun _22216 (_22217) -o
             ((cmsort_workerU_92) 4 zs_22214 _22217)
    in
    let* _22218 := recv[R,U] c_22215 in
    (match _22218 with
    | ex1UL_39 m_22219 n_22220 =>
      let* __22221 := close[false] n_22220 in return m_22219)

#[program]
def cmsortL_93 :=
  fun cmsort_22222 (zs_22223) ->
    let* c_22224 :=
      fork fun _22225 (_22226) -o
             ((cmsort_workerL_91) 4 zs_22223 _22226)
    in
    let* _22227 := recv[R,L] c_22224 in
    (match _22227 with
    | ex1LL_37 m_22228 n_22229 =>
      let* __22230 := close[false] n_22229 in return m_22228)

#[program]
def mklistU_96 :=
  fun mklist_22231 (n_22232) ->
    (match (__lte__ n_22232 0) with
    | true_4  => nilUU_27
    | false_5  => (consUU_28 n_22232 ((mklist_22231) (__sub__ n_22232 1))))

#[program]
def mklistL_95 :=
  fun mklist_22233 (n_22234) ->
    (match (__lte__ n_22234 0) with
    | true_4  => nilUL_25
    | false_5  => (consUL_26 n_22234 ((mklist_22233) (__sub__ n_22234 1))))

#[program]
def list_lenU_98 :=
  fun list_len_22235 (__22236) ->
    (match __22236 with
    | nilUU_27  => 0
    | consUU_28 hd_22237 tl_22238 => (__add__ 1 ((list_len_22235) tl_22238)))

#[program]
def list_lenL_97 :=
  fun list_len_22239 (__22240) ->
    (match __22240 with
    | nilUL_25  => 0
    | consUL_26 hd_22241 tl_22242 => (__add__ 1 ((list_len_22239) tl_22242)))

#[program]
def print_listU_100 :=
  fun print_list_22243 (__22244) ->
    (match __22244 with
    | nilUU_27  => print "nil"
    | consUU_28 hd_22245 tl_22246 =>
      let* __22247 := print ((string_of_int_32) hd_22245) in
      let* __22248 := print " :: " in ((print_list_22243) tl_22246))

#[program]
def print_listL_99 :=
  fun print_list_22249 (__22250) ->
    (match __22250 with
    | nilUL_25  => print "nil"
    | consUL_26 hd_22251 tl_22252 =>
      let* __22253 := print ((string_of_int_32) hd_22251) in
      let* __22254 := print " :: " in ((print_list_22249) tl_22252))

#[program]
def main :=
  let test_22255 := ((mklistL_95) 2000000) in
  let* _22256 := ((cmsortL_93) test_22255) in
  (match _22256 with
  | justLL_15 m_22257 =>
    let len_22258 := ((list_lenL_97) m_22257) in
    print ((string_of_int_32) len_22258))

[trans2e success]

-----------------------------------------

def idU_44 := fun id_22630 (A_22631) -> (m_22632) -> m_22632

def idL_43 := fun id_22633 (A_22634) -> (m_22635) -> m_22635

def rwlUU_48 :=
  fun rwl_22636 (A_22637) -> (m_22638) -> (n_22639) -> (B_22640) ->
  (__22641) -> (__22642) -> __22642

def rwlUL_47 :=
  fun rwl_22643 (A_22644) -> (m_22645) -> (n_22646) -> (B_22647) ->
  (__22648) -> (__22649) -> __22649

def rwlLU_46 :=
  fun rwl_22650 (A_22651) -> (m_22652) -> (n_22653) -> (B_22654) ->
  (__22655) -> (__22656) -> __22656

def rwlLL_45 :=
  fun rwl_22657 (A_22658) -> (m_22659) -> (n_22660) -> (B_22661) ->
  (__22662) -> (__22663) -> __22663

def rwrUU_52 :=
  fun rwr_22664 (A_22665) -> (m_22666) -> (n_22667) -> (B_22668) ->
  (__22669) -> (__22670) -> __22670

def rwrUL_51 :=
  fun rwr_22671 (A_22672) -> (m_22673) -> (n_22674) -> (B_22675) ->
  (__22676) -> (__22677) -> __22677

def rwrLU_50 :=
  fun rwr_22678 (A_22679) -> (m_22680) -> (n_22681) -> (B_22682) ->
  (__22683) -> (__22684) -> __22684

def rwrLL_49 :=
  fun rwr_22685 (A_22686) -> (m_22687) -> (n_22688) -> (B_22689) ->
  (__22690) -> (__22691) -> __22691

def sing_elimUU_66 :=
  fun sing_elim_22692 (A_22693) -> (x_22694) -> (__22695) -> __22695

def sing_elimUL_65 :=
  fun sing_elim_22696 (A_22697) -> (x_22698) -> (__22699) -> __22699

def sing_elimLU_64 :=
  fun sing_elim_22700 (A_22701) -> (x_22702) -> (__22703) -> !!

def sing_elimLL_63 :=
  fun sing_elim_22704 (A_22705) -> (x_22706) -> (__22707) -> __22707

def not_11 :=
  fun not_22708 (__22709) ->
    (match __22709 with
    | true_4 => false_5 | false_5 => true_4)

def and_12 :=
  fun and_22710 (__22711) -> (__22712) ->
    (match __22711 with
    | true_4 => (match __22712 with
                | true_4 => true_4 | false_5 => false_5)
    | false_5 => false_5)

def or_13 :=
  fun or_22713 (__22714) -> (__22715) ->
    (match __22714 with
    | true_4 => true_4
    | false_5 => (match __22715 with
                 | true_4 => true_4 | false_5 => false_5))

def xor_14 :=
  fun xor_22716 (__22717) -> (__22718) ->
    (match __22717 with
    | true_4 => (match __22718 with
                | true_4 => false_5 | false_5 => true_4)
    | false_5 => (match __22718 with
                 | true_4 => true_4 | false_5 => false_5))

def lte_15 :=
  fun lte_22719 (__22720) -> (__22721) ->
    (match __22720 with
    | zero_6  => true_4
    | succ_7 n_22722 =>
      (match __22721 with
      | zero_6  => false_5 | succ_7 n_22723 => ((lte_22719) n_22722 n_22723)))

def lt_16 :=
  fun lt_22724 (x_22725) -> (y_22726) -> ((lte_15) (succ_7 x_22725) y_22726)

def pred_17 :=
  fun pred_22727 (__22728) ->
    (match __22728 with
    | zero_6  => (zero_6 ) | succ_7 n_22729 => n_22729)

def add_18 :=
  fun add_22730 (__22731) -> (__22732) ->
    (match __22731 with
    | zero_6  => __22732
    | succ_7 n_22733 => (succ_7 ((add_22730) n_22733 __22732)))

def sub_19 :=
  fun sub_22734 (__22735) -> (__22736) ->
    (match __22736 with
    | zero_6  => __22735
    | succ_7 n_22737 => ((sub_22734) ((pred_17) __22735) n_22737))

def mul_20 :=
  fun mul_22738 (__22739) -> (__22740) ->
    (match __22739 with
    | zero_6  => (zero_6 )
    | succ_7 n_22741 => ((add_18) __22740 ((mul_22738) n_22741 __22740)))

def div_21 :=
  fun div_22742 (x_22743) -> (y_22744) ->
    (match ((lt_16) x_22743 y_22744) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_22745 :=
        fun loop_22746 (x_22747) -> (y_22748) ->
          (match ((sub_19) x_22747 ((pred_17) y_22748)) with
          | zero_6  => (zero_6 )
          | succ_7 n_22749 => (succ_7 ((loop_22746) n_22749 y_22748)))
      in ((loop_22745) x_22743 y_22744))

def rem_22 :=
  fun rem_22750 (x_22751) -> (y_22752) ->
    ((sub_19) x_22751 ((mul_20) ((div_21) x_22751 y_22752) y_22752))

def free_listUU_74 :=
  fun free_list_22753 (A_22754) -> (f_22755) -> (__22756) ->
    (match __22756 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_22757 tl_22758 =>
      let __22759 := ((f_22755) hd_22757) in
      ((free_list_22753) NULL f_22755 tl_22758))

def free_listUL_73 :=
  fun free_list_22760 (A_22761) -> (f_22762) -> (__22763) ->
    (match __22763 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_22764 tl_22765 =>
      let __22766 := ((f_22762) hd_22764) in
      ((free_list_22760) NULL f_22762 tl_22765))

def free_listLL_71 :=
  fun free_list_22767 (A_22768) -> (f_22769) -> (__22770) ->
    (match __22770 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_22771 tl_22772 =>
      let __22773 := ((f_22769) hd_22771) in
      ((free_list_22767) NULL f_22769 tl_22772))

def pow_26 :=
  fun pow_22774 (x_22775) -> (y_22776) ->
    let loop_22777 :=
      fun loop_22778 (acc_22779) -> (y_22780) ->
        (match (__lte__ y_22780 0) with
        | true_4 => acc_22779
        | false_5 =>
          ((loop_22778) (__mul__ x_22775 acc_22779) (__sub__ y_22780 1)))
    in ((loop_22777) 1 y_22776)

def powm_27 :=
  fun powm_22781 (x_22782) -> (y_22783) -> (m_22784) ->
    let loop_22785 :=
      fun loop_22786 (acc_22787) -> (y_22788) ->
        (match (__lte__ y_22788 0) with
        | true_4 => acc_22787
        | false_5 =>
          ((loop_22786)
            (__mod__ (__mul__ x_22782 acc_22787) m_22784) (__sub__ y_22788 1)))
    in ((loop_22785) 1 y_22783)

def ord_28 := fun ord_22789 (c_22790) -> (__ord__ c_22790)

def chr_29 := fun chr_22791 (i_22792) -> (__chr__ i_22792)

def str_30 := fun str_22793 (c_22794) -> (__push__ "" c_22794)

def strlen_31 := fun strlen_22795 (s_22796) -> (__size__ s_22796)

def string_of_int_32 :=
  fun string_of_int_22797 (i_22798) ->
    let aux_22799 :=
      fun aux_22800 (i_22801) ->
        (match (__lte__ 10 i_22801) with
        | true_4 =>
          let r_22802 := (__mod__ i_22801 10) in
          let i_22803 := (__div__ i_22801 10) in
          (__push__ ((aux_22800) i_22803)
            ((chr_29) (__add__ r_22802 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_22801 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_22798) with
    | true_4 => ((aux_22799) i_22798)
    | false_5 => (__cat__ "~" ((aux_22799) (__neg__ i_22798))))

def splitU_84 :=
  fun split_22804 (__22805) ->
    (match __22805 with
    | nilUU_27  => (ex1UU_40 (nilUU_27 ) (nilUU_27 ))
    | consUU_28 hd_22806 tl_22807 =>
      (match tl_22807 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_22806 (nilUU_27 )) (nilUU_27 ))
      | consUU_28 hd_22808 tl_22809 =>
        (match ((split_22804) tl_22809) with
        | ex1UU_40 m_22810 n_22811 =>
          (ex1UU_40
            (consUU_28 hd_22806 m_22810) (consUU_28 hd_22808 n_22811)))))

def splitL_83 :=
  fun split_22812 (__22813) ->
    (match __22813 with
    | nilUL_25  => (ex1LL_37 (nilUL_25 ) (nilUL_25 ))
    | consUL_26 hd_22814 tl_22815 =>
      (match tl_22815 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_22814 (nilUL_25 )) (nilUL_25 ))
      | consUL_26 hd_22816 tl_22817 =>
        (match ((split_22812) tl_22817) with
        | ex1LL_37 m_22818 n_22819 =>
          (ex1LL_37
            (consUL_26 hd_22814 m_22818) (consUL_26 hd_22816 n_22819)))))

def mergeU_86 :=
  fun merge_22820 (__22821) -> (__22822) -o
    (match __22821 with
    | nilUU_27  => __22822
    | consUU_28 hd_22823 tl_22824 =>
      (match __22822 with
      | nilUU_27  => (consUU_28 hd_22823 tl_22824)
      | consUU_28 hd_22825 tl_22826 =>
        (match (__lte__ hd_22823 hd_22825) with
        | true_4 =>
          (consUU_28
            hd_22823 ((merge_22820) tl_22824 (consUU_28 hd_22825 tl_22826)))
        | false_5 =>
          (consUU_28
            hd_22825 ((merge_22820) (consUU_28 hd_22823 tl_22824) tl_22826)))))

def mergeL_85 :=
  fun merge_22827 (__22828) -> (__22829) -o
    (match __22828 with
    | nilUL_25  => __22829
    | consUL_26 hd_22830 tl_22831 =>
      (match __22829 with
      | nilUL_25  => (consUL_26 hd_22830 tl_22831)
      | consUL_26 hd_22832 tl_22833 =>
        (match (__lte__ hd_22830 hd_22832) with
        | true_4 =>
          (consUL_26
            hd_22830 ((merge_22827) tl_22831 (consUL_26 hd_22832 tl_22833)))
        | false_5 =>
          (consUL_26
            hd_22832 ((merge_22827) (consUL_26 hd_22830 tl_22831) tl_22833)))))

def msortU_88 :=
  fun msort_22834 (__22835) ->
    (match __22835 with
    | nilUU_27  => (nilUU_27 )
    | consUU_28 hd_22836 tl_22837 =>
      (match tl_22837 with
      | nilUU_27  => (consUU_28 hd_22836 (nilUU_27 ))
      | consUU_28 hd_22838 tl_22839 =>
        (match ((splitU_84)
                 (consUU_28 hd_22836 (consUU_28 hd_22838 tl_22839))) with
        | ex1UU_40 m_22840 n_22841 =>
          ((mergeU_86) ((msort_22834) m_22840) ((msort_22834) n_22841)))))

def msortL_87 :=
  fun msort_22842 (__22843) ->
    (match __22843 with
    | nilUL_25  => (nilUL_25 )
    | consUL_26 hd_22844 tl_22845 =>
      (match tl_22845 with
      | nilUL_25  => (consUL_26 hd_22844 (nilUL_25 ))
      | consUL_26 hd_22846 tl_22847 =>
        (match ((splitL_83)
                 (consUL_26 hd_22844 (consUL_26 hd_22846 tl_22847))) with
        | ex1LL_37 m_22848 n_22849 =>
          ((mergeL_85) ((msort_22842) m_22848) ((msort_22842) n_22849)))))

def cmsort_workerU_92 :=
  fun cmsort_worker_22850 (__22851) -> (zs_22852) -> (__22853) -o
    (match zs_22852 with
    | nilUU_27  =>
      lazy(let c_22854 :=
             force(((lam (x_22855) -> lazy(send(__22853, x_22855)))
                     (nilUU_27 )))
           in force(lazy(close[true] c_22854)))
    | consUU_28 hd_22856 tl_22857 =>
      (match tl_22857 with
      | nilUU_27  =>
        lazy(let c_22858 :=
               force(((lam (x_22859) -> lazy(send(__22853, x_22859)))
                       (consUU_28 hd_22856 (nilUU_27 ))))
             in force(lazy(close[true] c_22858)))
      | consUU_28 hd_22860 tl_22861 =>
        (match (__lte__ __22851 0) with
        | true_4 =>
          lazy(let c_22862 :=
                 force(((lam (x_22863) -> lazy(send(__22853, x_22863)))
                         ((msortU_88)
                           (consUU_28 hd_22856 (consUU_28 hd_22860 tl_22861)))))
               in force(lazy(close[true] c_22862)))
        | false_5 =>
          (match ((splitU_84)
                   (consUU_28 hd_22856 (consUU_28 hd_22860 tl_22861))) with
          | ex1UU_40 m_22864 n_22865 =>
            lazy(let r1_22866 :=
                   force(lazy(fork
                                fun _22867 (_22868) -o
                                  ((cmsort_worker_22850)
                                    (__sub__ __22851 1) m_22864 _22868)))
                 in
                 let r2_22869 :=
                   force(lazy(fork
                                fun _22870 (_22871) -o
                                  ((cmsort_worker_22850)
                                    (__sub__ __22851 1) n_22865 _22871)))
                 in
                 let _22872 := force(lazy(recv[U](r1_22866))) in
                 force((match _22872 with
                       | ex1UL_39 m_22873 n_22874 =>
                         lazy(let _22875 := force(lazy(recv[U](r2_22869))) in
                              force((match _22875 with
                                    | ex1UL_39 m_22876 n_22877 =>
                                      let zs1_22878 :=
                                        ((mergeU_86) m_22873 m_22876)
                                      in
                                      let zs1_22879 :=
                                        ((rwlUU_48)
                                          NULL NULL NULL NULL NULL zs1_22878)
                                      in
                                      lazy(let c_22880 :=
                                             force(((lam (x_22881) ->
                                                       lazy(send(__22853, x_22881)))
                                                     zs1_22879))
                                           in
                                           let __22882 :=
                                             force(lazy(close[false] n_22874))
                                           in
                                           let __22883 :=
                                             force(lazy(close[false] n_22877))
                                           in
                                           force(lazy(close[true] c_22880)))))))))))))

def cmsort_workerL_91 :=
  fun cmsort_worker_22884 (__22885) -> (zs_22886) -> (__22887) -o
    (match zs_22886 with
    | nilUL_25  =>
      lazy(let c_22888 :=
             force(((lam (x_22889) -> lazy(send(__22887, x_22889)))
                     (nilUL_25 )))
           in force(lazy(close[true] c_22888)))
    | consUL_26 hd_22890 tl_22891 =>
      (match tl_22891 with
      | nilUL_25  =>
        lazy(let c_22892 :=
               force(((lam (x_22893) -> lazy(send(__22887, x_22893)))
                       (consUL_26 hd_22890 (nilUL_25 ))))
             in force(lazy(close[true] c_22892)))
      | consUL_26 hd_22894 tl_22895 =>
        (match (__lte__ __22885 0) with
        | true_4 =>
          lazy(let c_22896 :=
                 force(((lam (x_22897) -> lazy(send(__22887, x_22897)))
                         ((msortL_87)
                           (consUL_26 hd_22890 (consUL_26 hd_22894 tl_22895)))))
               in force(lazy(close[true] c_22896)))
        | false_5 =>
          (match ((splitL_83)
                   (consUL_26 hd_22890 (consUL_26 hd_22894 tl_22895))) with
          | ex1LL_37 m_22898 n_22899 =>
            lazy(let r1_22900 :=
                   force(lazy(fork
                                fun _22901 (_22902) -o
                                  ((cmsort_worker_22884)
                                    (__sub__ __22885 1) m_22898 _22902)))
                 in
                 let r2_22903 :=
                   force(lazy(fork
                                fun _22904 (_22905) -o
                                  ((cmsort_worker_22884)
                                    (__sub__ __22885 1) n_22899 _22905)))
                 in
                 let _22906 := force(lazy(recv[L](r1_22900))) in
                 force((match _22906 with
                       | ex1LL_37 m_22907 n_22908 =>
                         lazy(let _22909 := force(lazy(recv[L](r2_22903))) in
                              force((match _22909 with
                                    | ex1LL_37 m_22910 n_22911 =>
                                      let zs1_22912 :=
                                        ((mergeL_85) m_22907 m_22910)
                                      in
                                      let zs1_22913 :=
                                        ((rwlLL_45)
                                          NULL NULL NULL NULL NULL zs1_22912)
                                      in
                                      lazy(let c_22914 :=
                                             force(((lam (x_22915) ->
                                                       lazy(send(__22887, x_22915)))
                                                     zs1_22913))
                                           in
                                           let __22916 :=
                                             force(lazy(close[false] n_22908))
                                           in
                                           let __22917 :=
                                             force(lazy(close[false] n_22911))
                                           in
                                           force(lazy(close[true] c_22914)))))))))))))

def cmsortU_94 :=
  fun cmsort_22918 (zs_22919) ->
    lazy(let c_22920 :=
           force(lazy(fork
                        fun _22921 (_22922) -o
                          ((cmsort_workerU_92) 4 zs_22919 _22922)))
         in
         let _22923 := force(lazy(recv[U](c_22920))) in
         force((match _22923 with
               | ex1UL_39 m_22924 n_22925 =>
                 lazy(let __22926 := force(lazy(close[false] n_22925)) in
                      force(lazy(m_22924))))))

def cmsortL_93 :=
  fun cmsort_22927 (zs_22928) ->
    lazy(let c_22929 :=
           force(lazy(fork
                        fun _22930 (_22931) -o
                          ((cmsort_workerL_91) 4 zs_22928 _22931)))
         in
         let _22932 := force(lazy(recv[L](c_22929))) in
         force((match _22932 with
               | ex1LL_37 m_22933 n_22934 =>
                 lazy(let __22935 := force(lazy(close[false] n_22934)) in
                      force(lazy(m_22933))))))

def mklistU_96 :=
  fun mklist_22936 (n_22937) ->
    (match (__lte__ n_22937 0) with
    | true_4 => (nilUU_27 )
    | false_5 => (consUU_28 n_22937 ((mklist_22936) (__sub__ n_22937 1))))

def mklistL_95 :=
  fun mklist_22938 (n_22939) ->
    (match (__lte__ n_22939 0) with
    | true_4 => (nilUL_25 )
    | false_5 => (consUL_26 n_22939 ((mklist_22938) (__sub__ n_22939 1))))

def list_lenU_98 :=
  fun list_len_22940 (__22941) ->
    (match __22941 with
    | nilUU_27  => 0
    | consUU_28 hd_22942 tl_22943 => (__add__ 1 ((list_len_22940) tl_22943)))

def list_lenL_97 :=
  fun list_len_22944 (__22945) ->
    (match __22945 with
    | nilUL_25  => 0
    | consUL_26 hd_22946 tl_22947 => (__add__ 1 ((list_len_22944) tl_22947)))

def print_listU_100 :=
  fun print_list_22948 (__22949) ->
    (match __22949 with
    | nilUU_27  => lazy(print "nil")
    | consUU_28 hd_22950 tl_22951 =>
      lazy(let __22952 := force(lazy(print ((string_of_int_32) hd_22950))) in
           let __22953 := force(lazy(print " :: ")) in
           force(((print_list_22948) tl_22951))))

def print_listL_99 :=
  fun print_list_22954 (__22955) ->
    (match __22955 with
    | nilUL_25  => lazy(print "nil")
    | consUL_26 hd_22956 tl_22957 =>
      lazy(let __22958 := force(lazy(print ((string_of_int_32) hd_22956))) in
           let __22959 := force(lazy(print " :: ")) in
           force(((print_list_22954) tl_22957))))

def main :=
  let test_22960 := ((mklistL_95) 2000000) in
  lazy(let _22961 := force(((cmsortL_93) test_22960)) in
       force(let len_22962 := ((list_lenL_97) _22961) in
             lazy(print ((string_of_int_32) len_22962))))

[trans23 success]

-----------------------------------------

def idU_44 := lam (A_23387) -> (m_23388) -> m_23388

def idL_43 := lam (A_23389) -> (m_23390) -> m_23390

def rwlUU_48 :=
  lam (A_23391) -> (m_23392) -> (n_23393) -> (B_23394) -> (__23395) ->
  (__23396) -> __23396

def rwlUL_47 :=
  lam (A_23397) -> (m_23398) -> (n_23399) -> (B_23400) -> (__23401) ->
  (__23402) -> __23402

def rwlLU_46 :=
  lam (A_23403) -> (m_23404) -> (n_23405) -> (B_23406) -> (__23407) ->
  (__23408) -> __23408

def rwlLL_45 :=
  lam (A_23409) -> (m_23410) -> (n_23411) -> (B_23412) -> (__23413) ->
  (__23414) -> __23414

def rwrUU_52 :=
  lam (A_23415) -> (m_23416) -> (n_23417) -> (B_23418) -> (__23419) ->
  (__23420) -> __23420

def rwrUL_51 :=
  lam (A_23421) -> (m_23422) -> (n_23423) -> (B_23424) -> (__23425) ->
  (__23426) -> __23426

def rwrLU_50 :=
  lam (A_23427) -> (m_23428) -> (n_23429) -> (B_23430) -> (__23431) ->
  (__23432) -> __23432

def rwrLL_49 :=
  lam (A_23433) -> (m_23434) -> (n_23435) -> (B_23436) -> (__23437) ->
  (__23438) -> __23438

def sing_elimUU_66 := lam (A_23439) -> (x_23440) -> (__23441) -> __23441

def sing_elimUL_65 := lam (A_23442) -> (x_23443) -> (__23444) -> __23444

def sing_elimLU_64 := lam (A_23445) -> (x_23446) -> (__23447) -> !!

def sing_elimLL_63 := lam (A_23448) -> (x_23449) -> (__23450) -> __23450

def not_11 :=
  lam (__23451) ->
    (match __23451 with
    | true_4 => false_5 | false_5 => true_4)

def and_12 :=
  lam (__23452) -> (__23453) ->
    (match __23452 with
    | true_4 => (match __23453 with
                | true_4 => true_4 | false_5 => false_5)
    | false_5 => false_5)

def or_13 :=
  lam (__23454) -> (__23455) ->
    (match __23454 with
    | true_4 => true_4
    | false_5 => (match __23455 with
                 | true_4 => true_4 | false_5 => false_5))

def xor_14 :=
  lam (__23456) -> (__23457) ->
    (match __23456 with
    | true_4 => (match __23457 with
                | true_4 => false_5 | false_5 => true_4)
    | false_5 => (match __23457 with
                 | true_4 => true_4 | false_5 => false_5))

def lte_15 :=
  fun lte_23458 (__23459) -> (__23460) ->
    (match __23459 with
    | zero_6  => true_4
    | succ_7 n_23461 =>
      (match __23460 with
      | zero_6  => false_5 | succ_7 n_23462 => ((lte_23458) n_23461 n_23462)))

def lt_16 :=
  lam (x_23463) -> (y_23464) -> ((lte_15) (succ_7 x_23463) y_23464)

def pred_17 :=
  lam (__23465) ->
    (match __23465 with
    | zero_6  => (zero_6 ) | succ_7 n_23466 => n_23466)

def add_18 :=
  fun add_23467 (__23468) -> (__23469) ->
    (match __23468 with
    | zero_6  => __23469
    | succ_7 n_23470 => (succ_7 ((add_23467) n_23470 __23469)))

def sub_19 :=
  fun sub_23471 (__23472) -> (__23473) ->
    (match __23473 with
    | zero_6  => __23472
    | succ_7 n_23474 => ((sub_23471) ((pred_17) __23472) n_23474))

def mul_20 :=
  fun mul_23475 (__23476) -> (__23477) ->
    (match __23476 with
    | zero_6  => (zero_6 )
    | succ_7 n_23478 => ((add_18) __23477 ((mul_23475) n_23478 __23477)))

def div_21 :=
  lam (x_23479) -> (y_23480) ->
    (match ((lt_16) x_23479 y_23480) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_23481 :=
        fun loop_23482 (x_23483) -> (y_23484) ->
          (match ((sub_19) x_23483 ((pred_17) y_23484)) with
          | zero_6  => (zero_6 )
          | succ_7 n_23485 => (succ_7 ((loop_23482) n_23485 y_23484)))
      in ((loop_23481) x_23479 y_23480))

def rem_22 :=
  lam (x_23486) -> (y_23487) ->
    ((sub_19) x_23486 ((mul_20) ((div_21) x_23486 y_23487) y_23487))

def free_listUU_74 :=
  fun free_list_23488 (A_23489) -> (f_23490) -> (__23491) ->
    (match __23491 with
    | nilUU_27  => ttU_20
    | consUU_28 hd_23492 tl_23493 =>
      let __23494 := ((f_23490) hd_23492) in
      ((free_list_23488) NULL f_23490 tl_23493))

def free_listUL_73 :=
  fun free_list_23495 (A_23496) -> (f_23497) -> (__23498) ->
    (match __23498 with
    | nilUL_25  => ttU_20
    | consUL_26 hd_23499 tl_23500 =>
      let __23501 := ((f_23497) hd_23499) in
      ((free_list_23495) NULL f_23497 tl_23500))

def free_listLL_71 :=
  fun free_list_23502 (A_23503) -> (f_23504) -> (__23505) ->
    (match __23505 with
    | nilLL_21  => ttU_20
    | consLL_22 hd_23506 tl_23507 =>
      let __23508 := ((f_23504) hd_23506) in
      ((free_list_23502) NULL f_23504 tl_23507))

def pow_26 :=
  lam (x_23509) -> (y_23510) ->
    let loop_23511 :=
      fun loop_23512 (acc_23513) -> (y_23514) ->
        (match (__lte__ y_23514 0) with
        | true_4 => acc_23513
        | false_5 =>
          ((loop_23512) (__mul__ x_23509 acc_23513) (__sub__ y_23514 1)))
    in ((loop_23511) 1 y_23510)

def powm_27 :=
  lam (x_23515) -> (y_23516) -> (m_23517) ->
    let loop_23518 :=
      fun loop_23519 (acc_23520) -> (y_23521) ->
        (match (__lte__ y_23521 0) with
        | true_4 => acc_23520
        | false_5 =>
          ((loop_23519)
            (__mod__ (__mul__ x_23515 acc_23520) m_23517) (__sub__ y_23521 1)))
    in ((loop_23518) 1 y_23516)

def ord_28 := lam (c_23522) -> (__ord__ c_23522)

def chr_29 := lam (i_23523) -> (__chr__ i_23523)

def str_30 := lam (c_23524) -> (__push__ "" c_23524)

def strlen_31 := lam (s_23525) -> (__size__ s_23525)

def string_of_int_32 :=
  lam (i_23526) ->
    let aux_23527 :=
      fun aux_23528 (i_23529) ->
        (match (__lte__ 10 i_23529) with
        | true_4 =>
          let r_23530 := (__mod__ i_23529 10) in
          let i_23531 := (__div__ i_23529 10) in
          (__push__ ((aux_23528) i_23531)
            ((chr_29) (__add__ r_23530 ((ord_28) 0))))
        | false_5 => ((str_30) ((chr_29) (__add__ i_23529 ((ord_28) 0)))))
    in
    (match (__lte__ 0 i_23526) with
    | true_4 => ((aux_23527) i_23526)
    | false_5 => (__cat__ "~" ((aux_23527) (__neg__ i_23526))))

def splitU_84 :=
  fun split_23532 (__23533) ->
    (match __23533 with
    | nilUU_27  => (ex1UU_40 (nilUU_27 ) (nilUU_27 ))
    | consUU_28 hd_23534 tl_23535 =>
      (match tl_23535 with
      | nilUU_27  => (ex1UU_40 (consUU_28 hd_23534 (nilUU_27 )) (nilUU_27 ))
      | consUU_28 hd_23536 tl_23537 =>
        (match ((split_23532) tl_23537) with
        | ex1UU_40 m_23538 n_23539 =>
          (ex1UU_40
            (consUU_28 hd_23534 m_23538) (consUU_28 hd_23536 n_23539)))))

def splitL_83 :=
  fun split_23540 (__23541) ->
    (match __23541 with
    | nilUL_25  => (ex1LL_37 (nilUL_25 ) (nilUL_25 ))
    | consUL_26 hd_23542 tl_23543 =>
      (match tl_23543 with
      | nilUL_25  => (ex1LL_37 (consUL_26 hd_23542 (nilUL_25 )) (nilUL_25 ))
      | consUL_26 hd_23544 tl_23545 =>
        (match ((split_23540) tl_23545) with
        | ex1LL_37 m_23546 n_23547 =>
          (ex1LL_37
            (consUL_26 hd_23542 m_23546) (consUL_26 hd_23544 n_23547)))))

def mergeU_86 :=
  fun merge_23548 (__23549) -> (__23550) -o
    (match __23549 with
    | nilUU_27  => __23550
    | consUU_28 hd_23551 tl_23552 =>
      (match __23550 with
      | nilUU_27  => (consUU_28 hd_23551 tl_23552)
      | consUU_28 hd_23553 tl_23554 =>
        (match (__lte__ hd_23551 hd_23553) with
        | true_4 =>
          (consUU_28
            hd_23551 ((merge_23548) tl_23552 (consUU_28 hd_23553 tl_23554)))
        | false_5 =>
          (consUU_28
            hd_23553 ((merge_23548) (consUU_28 hd_23551 tl_23552) tl_23554)))))

def mergeL_85 :=
  fun merge_23555 (__23556) -> (__23557) -o
    (match __23556 with
    | nilUL_25  => __23557
    | consUL_26 hd_23558 tl_23559 =>
      (match __23557 with
      | nilUL_25  => (consUL_26 hd_23558 tl_23559)
      | consUL_26 hd_23560 tl_23561 =>
        (match (__lte__ hd_23558 hd_23560) with
        | true_4 =>
          (consUL_26
            hd_23558 ((merge_23555) tl_23559 (consUL_26 hd_23560 tl_23561)))
        | false_5 =>
          (consUL_26
            hd_23560 ((merge_23555) (consUL_26 hd_23558 tl_23559) tl_23561)))))

def msortU_88 :=
  fun msort_23562 (__23563) ->
    (match __23563 with
    | nilUU_27  => (nilUU_27 )
    | consUU_28 hd_23564 tl_23565 =>
      (match tl_23565 with
      | nilUU_27  => (consUU_28 hd_23564 (nilUU_27 ))
      | consUU_28 hd_23566 tl_23567 =>
        (match ((splitU_84)
                 (consUU_28 hd_23564 (consUU_28 hd_23566 tl_23567))) with
        | ex1UU_40 m_23568 n_23569 =>
          ((mergeU_86) ((msort_23562) m_23568) ((msort_23562) n_23569)))))

def msortL_87 :=
  fun msort_23570 (__23571) ->
    (match __23571 with
    | nilUL_25  => (nilUL_25 )
    | consUL_26 hd_23572 tl_23573 =>
      (match tl_23573 with
      | nilUL_25  => (consUL_26 hd_23572 (nilUL_25 ))
      | consUL_26 hd_23574 tl_23575 =>
        (match ((splitL_83)
                 (consUL_26 hd_23572 (consUL_26 hd_23574 tl_23575))) with
        | ex1LL_37 m_23576 n_23577 =>
          ((mergeL_85) ((msort_23570) m_23576) ((msort_23570) n_23577)))))

def cmsort_workerU_92 :=
  fun cmsort_worker_23578 (__23579) -> (zs_23580) -> (__23581) -o
    (match zs_23580 with
    | nilUU_27  =>
      lazy(let c_23582 := send(__23581, (nilUU_27 )) in close[true] c_23582)
    | consUU_28 hd_23583 tl_23584 =>
      (match tl_23584 with
      | nilUU_27  =>
        lazy(let c_23585 := send(__23581, (consUU_28 hd_23583 (nilUU_27 )))
             in close[true] c_23585)
      | consUU_28 hd_23586 tl_23587 =>
        (match (__lte__ __23579 0) with
        | true_4 =>
          lazy(let c_23588 :=
                 send(__23581, ((msortU_88)
                                 (consUU_28
                                   hd_23583 (consUU_28 hd_23586 tl_23587))))
               in close[true] c_23588)
        | false_5 =>
          (match ((splitU_84)
                   (consUU_28 hd_23583 (consUU_28 hd_23586 tl_23587))) with
          | ex1UU_40 m_23589 n_23590 =>
            lazy(let r1_23591 :=
                   fork
                     lam (_23592) -o
                       ((cmsort_worker_23578)
                         (__sub__ __23579 1) m_23589 _23592)
                 in
                 let r2_23593 :=
                   fork
                     lam (_23594) -o
                       ((cmsort_worker_23578)
                         (__sub__ __23579 1) n_23590 _23594)
                 in
                 let _23595 := recv[U](r1_23591) in
                 (match _23595 with
                 | ex1UL_39 m_23596 n_23597 =>
                   let _23598 := recv[U](r2_23593) in
                   (match _23598 with
                   | ex1UL_39 m_23599 n_23600 =>
                     let zs1_23601 := ((mergeU_86) m_23596 m_23599) in
                     let zs1_23602 :=
                       ((rwlUU_48) NULL NULL NULL NULL NULL zs1_23601)
                     in
                     let c_23603 := send(__23581, zs1_23602) in
                     let __23604 := close[false] n_23597 in
                     let __23605 := close[false] n_23600 in
                     close[true] c_23603)))))))

def cmsort_workerL_91 :=
  fun cmsort_worker_23606 (__23607) -> (zs_23608) -> (__23609) -o
    (match zs_23608 with
    | nilUL_25  =>
      lazy(let c_23610 := send(__23609, (nilUL_25 )) in close[true] c_23610)
    | consUL_26 hd_23611 tl_23612 =>
      (match tl_23612 with
      | nilUL_25  =>
        lazy(let c_23613 := send(__23609, (consUL_26 hd_23611 (nilUL_25 )))
             in close[true] c_23613)
      | consUL_26 hd_23614 tl_23615 =>
        (match (__lte__ __23607 0) with
        | true_4 =>
          lazy(let c_23616 :=
                 send(__23609, ((msortL_87)
                                 (consUL_26
                                   hd_23611 (consUL_26 hd_23614 tl_23615))))
               in close[true] c_23616)
        | false_5 =>
          (match ((splitL_83)
                   (consUL_26 hd_23611 (consUL_26 hd_23614 tl_23615))) with
          | ex1LL_37 m_23617 n_23618 =>
            lazy(let r1_23619 :=
                   fork
                     lam (_23620) -o
                       ((cmsort_worker_23606)
                         (__sub__ __23607 1) m_23617 _23620)
                 in
                 let r2_23621 :=
                   fork
                     lam (_23622) -o
                       ((cmsort_worker_23606)
                         (__sub__ __23607 1) n_23618 _23622)
                 in
                 let _23623 := recv[L](r1_23619) in
                 (match _23623 with
                 | ex1LL_37 m_23624 n_23625 =>
                   let _23626 := recv[L](r2_23621) in
                   (match _23626 with
                   | ex1LL_37 m_23627 n_23628 =>
                     let zs1_23629 := ((mergeL_85) m_23624 m_23627) in
                     let zs1_23630 :=
                       ((rwlLL_45) NULL NULL NULL NULL NULL zs1_23629)
                     in
                     let c_23631 := send(__23609, zs1_23630) in
                     let __23632 := close[false] n_23625 in
                     let __23633 := close[false] n_23628 in
                     close[true] c_23631)))))))

def cmsortU_94 :=
  lam (zs_23634) ->
    lazy(let c_23635 :=
           fork lam (_23636) -o ((cmsort_workerU_92) 4 zs_23634 _23636)
         in
         let _23637 := recv[U](c_23635) in
         (match _23637 with
         | ex1UL_39 m_23638 n_23639 =>
           let __23640 := close[false] n_23639 in m_23638))

def cmsortL_93 :=
  lam (zs_23641) ->
    lazy(let c_23642 :=
           fork lam (_23643) -o ((cmsort_workerL_91) 4 zs_23641 _23643)
         in
         let _23644 := recv[L](c_23642) in
         (match _23644 with
         | ex1LL_37 m_23645 n_23646 =>
           let __23647 := close[false] n_23646 in m_23645))

def mklistU_96 :=
  fun mklist_23648 (n_23649) ->
    (match (__lte__ n_23649 0) with
    | true_4 => (nilUU_27 )
    | false_5 => (consUU_28 n_23649 ((mklist_23648) (__sub__ n_23649 1))))

def mklistL_95 :=
  fun mklist_23650 (n_23651) ->
    (match (__lte__ n_23651 0) with
    | true_4 => (nilUL_25 )
    | false_5 => (consUL_26 n_23651 ((mklist_23650) (__sub__ n_23651 1))))

def list_lenU_98 :=
  fun list_len_23652 (__23653) ->
    (match __23653 with
    | nilUU_27  => 0
    | consUU_28 hd_23654 tl_23655 => (__add__ 1 ((list_len_23652) tl_23655)))

def list_lenL_97 :=
  fun list_len_23656 (__23657) ->
    (match __23657 with
    | nilUL_25  => 0
    | consUL_26 hd_23658 tl_23659 => (__add__ 1 ((list_len_23656) tl_23659)))

def print_listU_100 :=
  fun print_list_23660 (__23661) ->
    (match __23661 with
    | nilUU_27  => lazy(print "nil")
    | consUU_28 hd_23662 tl_23663 =>
      lazy(let __23664 := print ((string_of_int_32) hd_23662) in
           let __23665 := print " :: " in
           force(((print_list_23660) tl_23663))))

def print_listL_99 :=
  fun print_list_23666 (__23667) ->
    (match __23667 with
    | nilUL_25  => lazy(print "nil")
    | consUL_26 hd_23668 tl_23669 =>
      lazy(let __23670 := print ((string_of_int_32) hd_23668) in
           let __23671 := print " :: " in
           force(((print_list_23666) tl_23669))))

def main :=
  let test_23672 := ((mklistL_95) 2000000) in
  lazy(let _23673 := force(((cmsortL_93) test_23672)) in
       let len_23674 := ((list_lenL_97) _23673) in
       print ((string_of_int_32) len_23674))

[trans3e success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_27() => {
      x_167 := ttU_20;
    }
    consUU_28(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_25() => {
      x_177 := ttU_20;
    }
    consUL_26(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_21() => {
      x_187 := ttU_20;
    }
    consLL_22(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_27() => {
      x_267 := mkconstr(nilUU_27, []);
      x_268 := mkconstr(nilUU_27, []);
      x_269 := mkconstr(ex1UU_40, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_28(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_27() => {
          x_273 := mkconstr(nilUU_27, []);
          x_274 := mkconstr(consUU_28, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_27, []);
          x_276 := mkconstr(ex1UU_40, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_28(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_40(m_281, n_282) => {
              x_283 := mkconstr(consUU_28, [hd_270, m_281]);
              x_284 := mkconstr(consUU_28, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_40, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_25() => {
      x_289 := mkconstr(nilUL_25, []);
      x_290 := mkconstr(nilUL_25, []);
      x_291 := mkconstr(ex1LL_37, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_26(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_25() => {
          x_295 := mkconstr(nilUL_25, []);
          x_296 := mkconstr(consUL_26, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_25, []);
          x_298 := mkconstr(ex1LL_37, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_26(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_37(m_303, n_304) => {
              x_305 := mkconstr(consUL_26, [hd_292, m_303]);
              x_306 := mkconstr(consUL_26, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_37, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_27() => {
      x_311 := __310;
    }
    consUU_28(hd_312, tl_313) => {
      match[U](__310){
        nilUU_27() => {
          x_315 := mkconstr(consUU_28, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_28(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_28, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_28, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_28, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_28, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_25() => {
      x_329 := __328;
    }
    consUL_26(hd_330, tl_331) => {
      match[L](__328){
        nilUL_25() => {
          x_333 := mkconstr(consUL_26, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_26(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_26, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_26, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_26, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_26, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_27() => {
      x_347 := mkconstr(nilUU_27, []);
      x_346 := x_347;
    }
    consUU_28(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_27() => {
          x_351 := mkconstr(nilUU_27, []);
          x_352 := mkconstr(consUU_28, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_28(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_28, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_28, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_40(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_25() => {
      x_367 := mkconstr(nilUL_25, []);
      x_366 := x_367;
    }
    consUL_26(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_25() => {
          x_371 := mkconstr(nilUL_25, []);
          x_372 := mkconstr(consUL_26, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_26(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_26, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_26, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_37(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_27() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_27, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_28(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_27() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_27, []);
              x_401 := mkconstr(consUU_28, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_28(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_28, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_28, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_28, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_28, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_40(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_39(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_39(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                            }
                          }
                          x_437 := x_442;
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_25() => {
      x_461 :=
        lazy {
          x_464 := mkconstr(nilUL_25, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_26(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_25() => {
          x_469 :=
            lazy {
              x_472 := mkconstr(nilUL_25, []);
              x_473 := mkconstr(consUL_26, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_26(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := mkconstr(consUL_26, [hd_475, tl_476]);
                  x_484 := mkconstr(consUL_26, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := mkconstr(consUL_26, [hd_475, tl_476]);
              x_489 := mkconstr(consUL_26, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_37(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_37(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_37(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                            }
                          }
                          x_509 := x_514;
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_39(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_37(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_27, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_28, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_25, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_26, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_27() => {
      x_578 := 0;
    }
    consUU_28(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_25() => {
      x_585 := 0;
    }
    consUL_26(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_27() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_28(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_25() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
    }
    consUL_26(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

[trans34 success]

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%U) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_27() => {
      x_167 := ttU_20;
    }
    consUU_28(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_25() => {
      x_177 := ttU_20;
      free(__176);
    }
    consUL_26(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_21() => {
      x_187 := ttU_20;
      free(__186);
    }
    consLL_22(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_27() => {
      x_267 := mkconstr(nilUU_27, []);
      x_268 := mkconstr(nilUU_27, []);
      x_269 := mkconstr(ex1UU_40, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_28(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_27() => {
          x_273 := mkconstr(nilUU_27, []);
          x_274 := mkconstr(consUU_28, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_27, []);
          x_276 := mkconstr(ex1UU_40, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_28(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_40(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_28, [hd_270, m_281]);
              x_284 := mkconstr(consUU_28, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_40, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_25() => {
      x_289 := reconstr(__287, nilUL_25, []);
      x_290 := mkconstr(nilUL_25, []);
      x_291 := mkconstr(ex1LL_37, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_26(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_25() => {
          x_295 := reconstr(tl_293, nilUL_25, []);
          x_296 := reconstr(__287, consUL_26, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_25, []);
          x_298 := mkconstr(ex1LL_37, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_26(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_37(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_26, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_26, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_37, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_27() => {
      x_311 := __310;
    }
    consUU_28(hd_312, tl_313) => {
      match[U](__310){
        nilUU_27() => {
          x_315 := mkconstr(consUU_28, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_28(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_28, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_28, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_28, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_28, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_25() => {
      x_329 := __328;
      free(__327);
    }
    consUL_26(hd_330, tl_331) => {
      match[L](__328){
        nilUL_25() => {
          x_333 := reconstr(__327, consUL_26, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_26(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_26, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_26, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_26, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_26, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_27() => {
      x_347 := mkconstr(nilUU_27, []);
      x_346 := x_347;
    }
    consUU_28(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_27() => {
          x_351 := mkconstr(nilUU_27, []);
          x_352 := mkconstr(consUU_28, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_28(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_28, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_28, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_40(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_25() => {
      x_367 := reconstr(__365, nilUL_25, []);
      x_366 := x_367;
    }
    consUL_26(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_25() => {
          x_371 := reconstr(tl_369, nilUL_25, []);
          x_372 := reconstr(__365, consUL_26, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_26(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_26, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_26, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_37(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(__385%U, zs_386%U, __387%L) {
  match[U](zs_386){
    nilUU_27() => {
      x_389 :=
        lazy {
          x_392 := mkconstr(nilUU_27, []);
          x_391 := send(__387, x_392);
          c_390 := x_391;
          x_393 := close[true](c_390);
          return x_393;
        };
      x_388 := x_389;
    }
    consUU_28(hd_394, tl_395) => {
      match[U](tl_395){
        nilUU_27() => {
          x_397 :=
            lazy {
              x_400 := mkconstr(nilUU_27, []);
              x_401 := mkconstr(consUU_28, [hd_394, x_400]);
              x_399 := send(__387, x_401);
              c_398 := x_399;
              x_402 := close[true](c_398);
              return x_402;
            };
          x_396 := x_397;
        }
        consUU_28(hd_403, tl_404) => {
          x_406 := lte(__385, 0);
          match(x_406){
            true_4() => {
              x_407 :=
                lazy {
                  x_411 := mkconstr(consUU_28, [hd_403, tl_404]);
                  x_412 := mkconstr(consUU_28, [hd_394, x_411]);
                  x_410 := msortU_344(x_412);
                  x_409 := send(__387, x_410);
                  c_408 := x_409;
                  x_413 := close[true](c_408);
                  return x_413;
                };
              x_405 := x_407;
            }
            false_5() => {
              x_416 := mkconstr(consUU_28, [hd_403, tl_404]);
              x_417 := mkconstr(consUU_28, [hd_394, x_416]);
              x_415 := splitU_264(x_417);
              match[L](x_415){
                ex1UU_40(m_418, n_419) => {
                  x_420 :=
                    lazy {
                      x_423 :=
                        fn lam_424(_425%L) {
                          x_427 := sub(__385, 1);
                          x_426 := cmsort_workerU_384(x_427, m_418, _425);
                          return x_426;
                        };
                      x_422 := fork(x_423);
                      r1_421 := x_422;
                      x_430 :=
                        fn lam_431(_432%L) {
                          x_434 := sub(__385, 1);
                          x_433 := cmsort_workerU_384(x_434, n_419, _432);
                          return x_433;
                        };
                      x_429 := fork(x_430);
                      r2_428 := x_429;
                      x_436 := recv[U](r1_421);
                      _435 := x_436;
                      match[L](_435){
                        ex1UL_39(m_438, n_439) => {
                          x_441 := recv[U](r2_428);
                          _440 := x_441;
                          match[L](_440){
                            ex1UL_39(m_443, n_444) => {
                              x_446 := mergeU_308(m_438, m_443);
                              zs1_445 := x_446;
                              x_448 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_445);
                              zs1_447 := x_448;
                              x_450 := send(__387, zs1_447);
                              c_449 := x_450;
                              x_452 := close[false](n_439);
                              __451 := x_452;
                              x_454 := close[false](n_444);
                              __453 := x_454;
                              x_455 := close[true](c_449);
                              x_442 := x_455;
                              free(_440);
                            }
                          }
                          x_437 := x_442;
                          free(_435);
                        }
                      }
                      return x_437;
                    };
                  x_414 := x_420;
                  free(x_415);
                }
              }
              x_405 := x_414;
            }
          }
          x_396 := x_405;
        }
      }
      x_388 := x_396;
    }
  }
  return x_388;
}

fn cmsort_workerL_456(__457%U, zs_458%U, __459%L) {
  match[L](zs_458){
    nilUL_25() => {
      x_461 :=
        lazy {
          x_464 := reconstr(zs_458, nilUL_25, []);
          x_463 := send(__459, x_464);
          c_462 := x_463;
          x_465 := close[true](c_462);
          return x_465;
        };
      x_460 := x_461;
    }
    consUL_26(hd_466, tl_467) => {
      match[L](tl_467){
        nilUL_25() => {
          x_469 :=
            lazy {
              x_472 := reconstr(tl_467, nilUL_25, []);
              x_473 := reconstr(zs_458, consUL_26, [hd_466, x_472]);
              x_471 := send(__459, x_473);
              c_470 := x_471;
              x_474 := close[true](c_470);
              return x_474;
            };
          x_468 := x_469;
        }
        consUL_26(hd_475, tl_476) => {
          x_478 := lte(__457, 0);
          match(x_478){
            true_4() => {
              x_479 :=
                lazy {
                  x_483 := reconstr(tl_467, consUL_26, [hd_475, tl_476]);
                  x_484 := reconstr(zs_458, consUL_26, [hd_466, x_483]);
                  x_482 := msortL_364(x_484);
                  x_481 := send(__459, x_482);
                  c_480 := x_481;
                  x_485 := close[true](c_480);
                  return x_485;
                };
              x_477 := x_479;
            }
            false_5() => {
              x_488 := reconstr(tl_467, consUL_26, [hd_475, tl_476]);
              x_489 := reconstr(zs_458, consUL_26, [hd_466, x_488]);
              x_487 := splitL_286(x_489);
              match[L](x_487){
                ex1LL_37(m_490, n_491) => {
                  x_492 :=
                    lazy {
                      x_495 :=
                        fn lam_496(_497%L) {
                          x_499 := sub(__457, 1);
                          x_498 := cmsort_workerL_456(x_499, m_490, _497);
                          return x_498;
                        };
                      x_494 := fork(x_495);
                      r1_493 := x_494;
                      x_502 :=
                        fn lam_503(_504%L) {
                          x_506 := sub(__457, 1);
                          x_505 := cmsort_workerL_456(x_506, n_491, _504);
                          return x_505;
                        };
                      x_501 := fork(x_502);
                      r2_500 := x_501;
                      x_508 := recv[L](r1_493);
                      _507 := x_508;
                      match[L](_507){
                        ex1LL_37(m_510, n_511) => {
                          x_513 := recv[L](r2_500);
                          _512 := x_513;
                          match[L](_512){
                            ex1LL_37(m_515, n_516) => {
                              x_518 := mergeL_326(m_510, m_515);
                              zs1_517 := x_518;
                              x_520 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_517);
                              zs1_519 := x_520;
                              x_522 := send(__459, zs1_519);
                              c_521 := x_522;
                              x_524 := close[false](n_511);
                              __523 := x_524;
                              x_526 := close[false](n_516);
                              __525 := x_526;
                              x_527 := close[true](c_521);
                              x_514 := x_527;
                              free(_512);
                            }
                          }
                          x_509 := x_514;
                          free(_507);
                        }
                      }
                      return x_509;
                    };
                  x_486 := x_492;
                  free(x_487);
                }
              }
              x_477 := x_486;
            }
          }
          x_468 := x_477;
        }
      }
      x_460 := x_468;
    }
  }
  return x_460;
}

fn cmsortU_528(zs_529%U) {
  x_530 :=
    lazy {
      x_533 :=
        fn lam_534(_535%L) {
          x_536 := cmsort_workerU_384(4, zs_529, _535);
          return x_536;
        };
      x_532 := fork(x_533);
      c_531 := x_532;
      x_538 := recv[U](c_531);
      _537 := x_538;
      match[L](_537){
        ex1UL_39(m_540, n_541) => {
          x_543 := close[false](n_541);
          __542 := x_543;
          x_539 := m_540;
          free(_537);
        }
      }
      return x_539;
    };
  return x_530;
}

fn cmsortL_544(zs_545%U) {
  x_546 :=
    lazy {
      x_549 :=
        fn lam_550(_551%L) {
          x_552 := cmsort_workerL_456(4, zs_545, _551);
          return x_552;
        };
      x_548 := fork(x_549);
      c_547 := x_548;
      x_554 := recv[L](c_547);
      _553 := x_554;
      match[L](_553){
        ex1LL_37(m_556, n_557) => {
          x_559 := close[false](n_557);
          __558 := x_559;
          x_555 := m_556;
          free(_553);
        }
      }
      return x_555;
    };
  return x_546;
}

fn mklistU_560(n_561%U) {
  x_563 := lte(n_561, 0);
  match(x_563){
    true_4() => {
      x_564 := mkconstr(nilUU_27, []);
      x_562 := x_564;
    }
    false_5() => {
      x_566 := sub(n_561, 1);
      x_565 := mklistU_560(x_566);
      x_567 := mkconstr(consUU_28, [n_561, x_565]);
      x_562 := x_567;
    }
  }
  return x_562;
}

fn mklistL_568(n_569%U) {
  x_571 := lte(n_569, 0);
  match(x_571){
    true_4() => {
      x_572 := mkconstr(nilUL_25, []);
      x_570 := x_572;
    }
    false_5() => {
      x_574 := sub(n_569, 1);
      x_573 := mklistL_568(x_574);
      x_575 := mkconstr(consUL_26, [n_569, x_573]);
      x_570 := x_575;
    }
  }
  return x_570;
}

fn list_lenU_576(__577%U) {
  match[U](__577){
    nilUU_27() => {
      x_578 := 0;
    }
    consUU_28(hd_579, tl_580) => {
      x_582 := list_lenU_576(tl_580);
      x_581 := add(1, x_582);
      x_578 := x_581;
    }
  }
  return x_578;
}

fn list_lenL_583(__584%U) {
  match[L](__584){
    nilUL_25() => {
      x_585 := 0;
      free(__584);
    }
    consUL_26(hd_586, tl_587) => {
      x_589 := list_lenL_583(tl_587);
      x_588 := add(1, x_589);
      x_585 := x_588;
      free(__584);
    }
  }
  return x_585;
}

fn print_listU_590(__591%U) {
  match[U](__591){
    nilUU_27() => {
      x_593 :=
        lazy { x_595 := str("nil");
               x_594 := print(x_595);
               return x_594; };
      x_592 := x_593;
    }
    consUU_28(hd_596, tl_597) => {
      x_598 :=
        lazy {
          x_601 := string_of_int_236(hd_596);
          x_600 := print(x_601);
          __599 := x_600;
          x_604 := str(" :: ");
          x_603 := print(x_604);
          __602 := x_603;
          x_606 := print_listU_590(tl_597);
          x_605 := force(x_606);
          return x_605;
        };
      x_592 := x_598;
    }
  }
  return x_592;
}

fn print_listL_607(__608%U) {
  match[L](__608){
    nilUL_25() => {
      x_610 :=
        lazy { x_612 := str("nil");
               x_611 := print(x_612);
               return x_611; };
      x_609 := x_610;
      free(__608);
    }
    consUL_26(hd_613, tl_614) => {
      x_615 :=
        lazy {
          x_618 := string_of_int_236(hd_613);
          x_617 := print(x_618);
          __616 := x_617;
          x_621 := str(" :: ");
          x_620 := print(x_621);
          __619 := x_620;
          x_623 := print_listL_607(tl_614);
          x_622 := force(x_623);
          return x_622;
        };
      x_609 := x_615;
      free(__608);
    }
  }
  return x_609;
}

main := {
  x_625 := mklistL_568(2000000);
  test_624 := x_625;
  x_626 :=
    lazy {
      x_629 := cmsortL_544(test_624);
      x_628 := force(x_629);
      _627 := x_628;
      x_631 := list_lenL_583(_627);
      len_630 := x_631;
      x_633 := string_of_int_236(len_630);
      x_632 := print(x_633);
      return x_632;
    };
  return x_626;
};

[trans4e success]

-----------------------------------------

fn fn0_idU_634(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_635(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_636 := fn0_idU_634(A_2, m_3);
  return x_636;
}

fn fn0_idL_637(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_638(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_639 := fn0_idL_637(A_5, m_6);
  return x_639;
}

fn fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_641(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_642 := fn0_rwlUU_640(A_8, m_9, n_10, B_11, __12, __13);
  return x_642;
}

fn fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_644(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_645 := fn0_rwlUL_643(A_15, m_16, n_17, B_18, __19, __20);
  return x_645;
}

fn fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_647(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_648 := fn0_rwlLU_646(A_22, m_23, n_24, B_25, __26, __27);
  return x_648;
}

fn fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_650(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_651 := fn0_rwlLL_649(A_29, m_30, n_31, B_32, __33, __34);
  return x_651;
}

fn fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_653(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_654 := fn0_rwrUU_652(A_36, m_37, n_38, B_39, __40, __41);
  return x_654;
}

fn fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_656(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_657 := fn0_rwrUL_655(A_43, m_44, n_45, B_46, __47, __48);
  return x_657;
}

fn fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_659(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_660 := fn0_rwrLU_658(A_50, m_51, n_52, B_53, __54, __55);
  return x_660;
}

fn fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_662(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_663 := fn0_rwrLL_661(A_57, m_58, n_59, B_60, __61, __62);
  return x_663;
}

fn fn0_sing_elimUU_664(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_665(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_666 := fn0_sing_elimUU_664(A_64, x_65, __66);
  return x_666;
}

fn fn0_sing_elimUL_667(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_668(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_669 := fn0_sing_elimUL_667(A_68, x_69, __70);
  return x_669;
}

fn fn0_sing_elimLU_670(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_671(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_672 := fn0_sing_elimLU_670(A_72, x_73, __74);
  return x_672;
}

fn fn0_sing_elimLL_673(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_674(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_675 := fn0_sing_elimLL_673(A_76, x_77, __78);
  return x_675;
}

fn fn0_not_676(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_677(env) {
  __80 := env[1];
  x_678 := fn0_not_676(__80);
  return x_678;
}

fn fn0_and_679(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_680(env) {
  __83 := env[1];
  __84 := env[2];
  x_681 := fn0_and_679(__83, __84);
  return x_681;
}

fn fn0_or_682(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_683(env) {
  __88 := env[1];
  __89 := env[2];
  x_684 := fn0_or_682(__88, __89);
  return x_684;
}

fn fn0_xor_685(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_686(env) {
  __93 := env[1];
  __94 := env[2];
  x_687 := fn0_xor_685(__93, __94);
  return x_687;
}

fn fn0_lte_688(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_688(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_689(env) {
  __99 := env[1];
  __100 := env[2];
  x_690 := fn0_lte_688(__99, __100);
  return x_690;
}

fn fn0_lt_691(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_688(x_110, y_108);
  return x_109;
}

fn fn1_lt_692(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_693 := fn0_lt_691(x_107, y_108);
  return x_693;
}

fn fn0_pred_694(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_695(env) {
  __112 := env[1];
  x_696 := fn0_pred_694(__112);
  return x_696;
}

fn fn0_add_697(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_697(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_698(env) {
  __117 := env[1];
  __118 := env[2];
  x_699 := fn0_add_697(__117, __118);
  return x_699;
}

fn fn0_sub_700(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_694(__124);
      x_128 := fn0_sub_700(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_701(env) {
  __124 := env[1];
  __125 := env[2];
  x_702 := fn0_sub_700(__124, __125);
  return x_702;
}

fn fn0_mul_703(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_703(n_135, __132);
      x_136 := fn0_add_697(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_704(env) {
  __131 := env[1];
  __132 := env[2];
  x_705 := fn0_mul_703(__131, __132);
  return x_705;
}

fn fn0_div_706(x_139, y_140) {
  x_142 := fn0_lt_691(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_708, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_712, loop_144, x_139);
      appc(x_713, x_712, y_140);
      move1(x_156, x_713);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_707(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_715 := fn0_div_706(x_139, y_140);
  return x_715;
}

fn fn0_rem_716(x_158, y_159) {
  x_162 := fn0_div_706(x_158, y_159);
  x_161 := fn0_mul_703(x_162, y_159);
  x_160 := fn0_sub_700(x_158, x_161);
  return x_160;
}

fn fn1_rem_717(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_718 := fn0_rem_716(x_158, y_159);
  return x_718;
}

fn fn0_free_listUU_719(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_27 => {
      move1(x_167, ttU_20);
      break;
    }
    consUU_28 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_721, f_165, hd_168);
      move1(x_171, x_721);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_719(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_720(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_723 := fn0_free_listUU_719(A_164, f_165, __166);
  return x_723;
}

fn fn0_free_listUL_724(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_25 => {
      move1(x_177, ttU_20);
      free(__176);
      break;
    }
    consUL_26 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_726, f_175, hd_178);
      move1(x_181, x_726);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_724(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_725(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_728 := fn0_free_listUL_724(A_174, f_175, __176);
  return x_728;
}

fn fn0_free_listLL_729(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_21 => {
      move1(x_187, ttU_20);
      free(__186);
      break;
    }
    consLL_22 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_731, f_185, hd_188);
      move1(x_191, x_731);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_729(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_730(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_733 := fn0_free_listLL_729(A_184, f_185, __186);
  return x_733;
}

fn fn0_pow_734(x_194, y_195) {
  mkclo1(x_197, fn1_loop_736, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_740, loop_196, 1);
  appc(x_741, x_740, y_195);
  move1(x_206, x_741);
  return x_206;
}

fn fn1_pow_735(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_743 := fn0_pow_734(x_194, y_195);
  return x_743;
}

fn fn0_powm_744(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_746, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_750, loop_211, 1);
  appc(x_751, x_750, y_209);
  move1(x_222, x_751);
  return x_222;
}

fn fn1_powm_745(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_753 := fn0_powm_744(x_208, y_209, m_210);
  return x_753;
}

fn fn0_ord_754(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_755(env) {
  c_224 := env[1];
  x_756 := fn0_ord_754(c_224);
  return x_756;
}

fn fn0_chr_757(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_758(env) {
  i_227 := env[1];
  x_759 := fn0_chr_757(i_227);
  return x_759;
}

fn fn0_str_760(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_761(env) {
  c_230 := env[1];
  x_762 := fn0_str_760(c_230);
  return x_762;
}

fn fn0_strlen_763(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_764(env) {
  s_234 := env[1];
  x_765 := fn0_strlen_763(s_234);
  return x_765;
}

fn fn0_string_of_int_766(i_237) {
  mkclo1(x_239, fn1_aux_768, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_771, aux_238, i_237);
      move1(x_259, x_771);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_773, aux_238, x_263);
      move1(x_262, x_773);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_767(env) {
  i_237 := env[1];
  x_775 := fn0_string_of_int_766(i_237);
  return x_775;
}

fn fn0_splitU_776(__265) {
  switch(ctagof(__265)){
    nilUU_27 => {
      mkbox(x_267, nilUU_27, 0);
      mkbox(x_268, nilUU_27, 0);
      mkbox(x_269, ex1UU_40, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_28 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_27 => {
          mkbox(x_273, nilUU_27, 0);
          mkbox(x_274, consUU_28, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_27, 0);
          mkbox(x_276, ex1UU_40, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_28 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_776(tl_278);
          switch(ctagof(x_280)){
            ex1UU_40 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_28);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_28, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_40, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_777(env) {
  __265 := env[1];
  x_778 := fn0_splitU_776(__265);
  return x_778;
}

fn fn0_splitL_779(__287) {
  switch(ctagof(__287)){
    nilUL_25 => {
      rebox(x_289, __287, nilUL_25);
      mkbox(x_290, nilUL_25, 0);
      mkbox(x_291, ex1LL_37, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_26 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_25 => {
          rebox(x_295, tl_293, nilUL_25);
          rebox(x_296, __287, consUL_26);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_25, 0);
          mkbox(x_298, ex1LL_37, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_26 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_779(tl_300);
          switch(ctagof(x_302)){
            ex1LL_37 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_26);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_26);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_37);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_780(env) {
  __287 := env[1];
  x_781 := fn0_splitL_779(__287);
  return x_781;
}

fn fn0_mergeU_782(__309, __310) {
  switch(ctagof(__309)){
    nilUU_27 => {
      move1(x_311, __310);
      break;
    }
    consUU_28 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_27 => {
          mkbox(x_315, consUU_28, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_28 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_28, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_782(tl_313, x_321);
              mkbox(x_322, consUU_28, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_28, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_782(x_324, tl_317);
              mkbox(x_325, consUU_28, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_783(env) {
  __309 := env[1];
  __310 := env[2];
  x_784 := fn0_mergeU_782(__309, __310);
  return x_784;
}

fn fn0_mergeL_785(__327, __328) {
  switch(ctagof(__327)){
    nilUL_25 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_26 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_25 => {
          rebox(x_333, __327, consUL_26);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_26 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_26);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_785(tl_331, x_339);
              rebox(x_340, __327, consUL_26);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_26);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_785(x_342, tl_335);
              rebox(x_343, __327, consUL_26);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_786(env) {
  __327 := env[1];
  __328 := env[2];
  x_787 := fn0_mergeL_785(__327, __328);
  return x_787;
}

fn fn0_msortU_788(__345) {
  switch(ctagof(__345)){
    nilUU_27 => {
      mkbox(x_347, nilUU_27, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_28 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_27 => {
          mkbox(x_351, nilUU_27, 0);
          mkbox(x_352, consUU_28, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_28 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_28, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_28, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_776(x_358);
          switch(ctagof(x_356)){
            ex1UU_40 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_788(m_359);
              x_363 := fn0_msortU_788(n_360);
              x_361 := fn0_mergeU_782(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_789(env) {
  __345 := env[1];
  x_790 := fn0_msortU_788(__345);
  return x_790;
}

fn fn0_msortL_791(__365) {
  switch(ctagof(__365)){
    nilUL_25 => {
      rebox(x_367, __365, nilUL_25);
      move1(x_366, x_367);
      break;
    }
    consUL_26 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_25 => {
          rebox(x_371, tl_369, nilUL_25);
          rebox(x_372, __365, consUL_26);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_26 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_26);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_26);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_779(x_378);
          switch(ctagof(x_376)){
            ex1LL_37 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_791(m_379);
              x_383 := fn0_msortL_791(n_380);
              x_381 := fn0_mergeL_785(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_792(env) {
  __365 := env[1];
  x_793 := fn0_msortL_791(__365);
  return x_793;
}

fn fn0_cmsort_workerU_794(__385, zs_386, __387) {
  switch(ctagof(zs_386)){
    nilUU_27 => {
      lazy(x_389, lazy__796, 1);
      setlazy(x_389, __387, 0);
      move1(x_388, x_389);
      break;
    }
    consUU_28 => {
      getbox(hd_394, zs_386, 0);
      getbox(tl_395, zs_386, 1);
      switch(ctagof(tl_395)){
        nilUU_27 => {
          lazy(x_397, lazy__797, 2);
          setlazy(x_397, __387, 0);
          setlazy(x_397, hd_394, 1);
          move1(x_396, x_397);
          break;
        }
        consUU_28 => {
          getbox(hd_403, tl_395, 0);
          getbox(tl_404, tl_395, 1);
          lte(x_406, __385, 0);
          switch(x_406){
            true_4 => {
              lazy(x_407, lazy__798, 5);
              setlazy(x_407, msortU_344, 0);
              setlazy(x_407, __387, 1);
              setlazy(x_407, hd_394, 2);
              setlazy(x_407, hd_403, 3);
              setlazy(x_407, tl_404, 4);
              move1(x_405, x_407);
              break;
            }
            false_5 => {
              mkbox(x_416, consUU_28, 2);
              setbox(x_416, hd_403, 0);
              setbox(x_416, tl_404, 1);
              mkbox(x_417, consUU_28, 2);
              setbox(x_417, hd_394, 0);
              setbox(x_417, x_416, 1);
              x_415 := fn0_splitU_776(x_417);
              switch(ctagof(x_415)){
                ex1UU_40 => {
                  getbox(m_418, x_415, 0);
                  getbox(n_419, x_415, 1);
                  lazy(x_420, lazy__799, 7);
                  setlazy(x_420, rwlUU_7, 0);
                  setlazy(x_420, mergeU_308, 1);
                  setlazy(x_420, cmsort_workerU_384, 2);
                  setlazy(x_420, __385, 3);
                  setlazy(x_420, __387, 4);
                  setlazy(x_420, m_418, 5);
                  setlazy(x_420, n_419, 6);
                  move1(x_414, x_420);
                  free(x_415);
                  break;
                }
              }
              move1(x_405, x_414);
              break;
            }
          }
          move1(x_396, x_405);
          break;
        }
      }
      move1(x_388, x_396);
      break;
    }
  }
  return x_388;
}

fn fn1_cmsort_workerU_795(env) {
  __385 := env[1];
  zs_386 := env[2];
  __387 := env[3];
  x_802 := fn0_cmsort_workerU_794(__385, zs_386, __387);
  return x_802;
}

fn fn0_cmsort_workerL_803(__457, zs_458, __459) {
  switch(ctagof(zs_458)){
    nilUL_25 => {
      lazy(x_461, lazy__805, 2);
      setlazy(x_461, zs_458, 0);
      setlazy(x_461, __459, 1);
      move1(x_460, x_461);
      break;
    }
    consUL_26 => {
      getbox(hd_466, zs_458, 0);
      getbox(tl_467, zs_458, 1);
      switch(ctagof(tl_467)){
        nilUL_25 => {
          lazy(x_469, lazy__806, 4);
          setlazy(x_469, zs_458, 0);
          setlazy(x_469, __459, 1);
          setlazy(x_469, hd_466, 2);
          setlazy(x_469, tl_467, 3);
          move1(x_468, x_469);
          break;
        }
        consUL_26 => {
          getbox(hd_475, tl_467, 0);
          getbox(tl_476, tl_467, 1);
          lte(x_478, __457, 0);
          switch(x_478){
            true_4 => {
              lazy(x_479, lazy__807, 7);
              setlazy(x_479, msortL_364, 0);
              setlazy(x_479, zs_458, 1);
              setlazy(x_479, __459, 2);
              setlazy(x_479, hd_466, 3);
              setlazy(x_479, tl_467, 4);
              setlazy(x_479, hd_475, 5);
              setlazy(x_479, tl_476, 6);
              move1(x_477, x_479);
              break;
            }
            false_5 => {
              rebox(x_488, tl_467, consUL_26);
              setbox(x_488, hd_475, 0);
              setbox(x_488, tl_476, 1);
              rebox(x_489, zs_458, consUL_26);
              setbox(x_489, hd_466, 0);
              setbox(x_489, x_488, 1);
              x_487 := fn0_splitL_779(x_489);
              switch(ctagof(x_487)){
                ex1LL_37 => {
                  getbox(m_490, x_487, 0);
                  getbox(n_491, x_487, 1);
                  lazy(x_492, lazy__808, 7);
                  setlazy(x_492, rwlLL_28, 0);
                  setlazy(x_492, mergeL_326, 1);
                  setlazy(x_492, cmsort_workerL_456, 2);
                  setlazy(x_492, __457, 3);
                  setlazy(x_492, __459, 4);
                  setlazy(x_492, m_490, 5);
                  setlazy(x_492, n_491, 6);
                  move1(x_486, x_492);
                  free(x_487);
                  break;
                }
              }
              move1(x_477, x_486);
              break;
            }
          }
          move1(x_468, x_477);
          break;
        }
      }
      move1(x_460, x_468);
      break;
    }
  }
  return x_460;
}

fn fn1_cmsort_workerL_804(env) {
  __457 := env[1];
  zs_458 := env[2];
  __459 := env[3];
  x_811 := fn0_cmsort_workerL_803(__457, zs_458, __459);
  return x_811;
}

fn fn0_cmsortU_812(zs_529) {
  lazy(x_530, lazy__814, 2);
  setlazy(x_530, cmsort_workerU_384, 0);
  setlazy(x_530, zs_529, 1);
  return x_530;
}

fn fn1_cmsortU_813(env) {
  zs_529 := env[1];
  x_816 := fn0_cmsortU_812(zs_529);
  return x_816;
}

fn fn0_cmsortL_817(zs_545) {
  lazy(x_546, lazy__819, 2);
  setlazy(x_546, cmsort_workerL_456, 0);
  setlazy(x_546, zs_545, 1);
  return x_546;
}

fn fn1_cmsortL_818(env) {
  zs_545 := env[1];
  x_821 := fn0_cmsortL_817(zs_545);
  return x_821;
}

fn fn0_mklistU_822(n_561) {
  lte(x_563, n_561, 0);
  switch(x_563){
    true_4 => {
      mkbox(x_564, nilUU_27, 0);
      move1(x_562, x_564);
      break;
    }
    false_5 => {
      sub(x_566, n_561, 1);
      x_565 := fn0_mklistU_822(x_566);
      mkbox(x_567, consUU_28, 2);
      setbox(x_567, n_561, 0);
      setbox(x_567, x_565, 1);
      move1(x_562, x_567);
      break;
    }
  }
  return x_562;
}

fn fn1_mklistU_823(env) {
  n_561 := env[1];
  x_824 := fn0_mklistU_822(n_561);
  return x_824;
}

fn fn0_mklistL_825(n_569) {
  lte(x_571, n_569, 0);
  switch(x_571){
    true_4 => {
      mkbox(x_572, nilUL_25, 0);
      move1(x_570, x_572);
      break;
    }
    false_5 => {
      sub(x_574, n_569, 1);
      x_573 := fn0_mklistL_825(x_574);
      mkbox(x_575, consUL_26, 2);
      setbox(x_575, n_569, 0);
      setbox(x_575, x_573, 1);
      move1(x_570, x_575);
      break;
    }
  }
  return x_570;
}

fn fn1_mklistL_826(env) {
  n_569 := env[1];
  x_827 := fn0_mklistL_825(n_569);
  return x_827;
}

fn fn0_list_lenU_828(__577) {
  switch(ctagof(__577)){
    nilUU_27 => {
      move1(x_578, 0);
      break;
    }
    consUU_28 => {
      getbox(tl_580, __577, 1);
      x_582 := fn0_list_lenU_828(tl_580);
      add(x_581, 1, x_582);
      move1(x_578, x_581);
      break;
    }
  }
  return x_578;
}

fn fn1_list_lenU_829(env) {
  __577 := env[1];
  x_830 := fn0_list_lenU_828(__577);
  return x_830;
}

fn fn0_list_lenL_831(__584) {
  switch(ctagof(__584)){
    nilUL_25 => {
      move1(x_585, 0);
      free(__584);
      break;
    }
    consUL_26 => {
      getbox(tl_587, __584, 1);
      x_589 := fn0_list_lenL_831(tl_587);
      add(x_588, 1, x_589);
      move1(x_585, x_588);
      free(__584);
      break;
    }
  }
  return x_585;
}

fn fn1_list_lenL_832(env) {
  __584 := env[1];
  x_833 := fn0_list_lenL_831(__584);
  return x_833;
}

fn fn0_print_listU_834(__591) {
  switch(ctagof(__591)){
    nilUU_27 => {
      lazy(x_593, lazy__836, 0);
      move1(x_592, x_593);
      break;
    }
    consUU_28 => {
      getbox(hd_596, __591, 0);
      getbox(tl_597, __591, 1);
      lazy(x_598, lazy__837, 4);
      setlazy(x_598, string_of_int_236, 0);
      setlazy(x_598, print_listU_590, 1);
      setlazy(x_598, hd_596, 2);
      setlazy(x_598, tl_597, 3);
      move1(x_592, x_598);
      break;
    }
  }
  return x_592;
}

fn fn1_print_listU_835(env) {
  __591 := env[1];
  x_838 := fn0_print_listU_834(__591);
  return x_838;
}

fn fn0_print_listL_839(__608) {
  switch(ctagof(__608)){
    nilUL_25 => {
      lazy(x_610, lazy__841, 0);
      move1(x_609, x_610);
      free(__608);
      break;
    }
    consUL_26 => {
      getbox(hd_613, __608, 0);
      getbox(tl_614, __608, 1);
      lazy(x_615, lazy__842, 4);
      setlazy(x_615, string_of_int_236, 0);
      setlazy(x_615, print_listL_607, 1);
      setlazy(x_615, hd_613, 2);
      setlazy(x_615, tl_614, 3);
      move1(x_609, x_615);
      free(__608);
      break;
    }
  }
  return x_609;
}

fn fn1_print_listL_840(env) {
  __608 := env[1];
  x_843 := fn0_print_listL_839(__608);
  return x_843;
}

fn lazy__845(env) {
  string_of_int_236 := env[0];
  cmsortL_544 := env[1];
  list_lenL_583 := env[2];
  test_624 := env[3];
  x_629 := fn0_cmsortL_817(test_624);
  force(x_628, x_629);
  free(x_629);
  move1(_627, x_628);
  x_631 := fn0_list_lenL_831(_627);
  move1(len_630, x_631);
  x_633 := fn0_string_of_int_766(len_630);
  print(x_632, x_633);
  return x_632;
}

fn lazy__842(env) {
  string_of_int_236 := env[0];
  print_listL_607 := env[1];
  hd_613 := env[2];
  tl_614 := env[3];
  x_618 := fn0_string_of_int_766(hd_613);
  print(x_617, x_618);
  move1(__616, x_617);
  str(x_621, " :: ")
  print(x_620, x_621);
  move1(__619, x_620);
  x_623 := fn0_print_listL_839(tl_614);
  force(x_622, x_623);
  free(x_623);
  return x_622;
}

fn lazy__841(env) {
  str(x_612, "nil")
  print(x_611, x_612);
  return x_611;
}

fn lazy__837(env) {
  string_of_int_236 := env[0];
  print_listU_590 := env[1];
  hd_596 := env[2];
  tl_597 := env[3];
  x_601 := fn0_string_of_int_766(hd_596);
  print(x_600, x_601);
  move1(__599, x_600);
  str(x_604, " :: ")
  print(x_603, x_604);
  move1(__602, x_603);
  x_606 := fn0_print_listU_834(tl_597);
  force(x_605, x_606);
  free(x_606);
  return x_605;
}

fn lazy__836(env) {
  str(x_595, "nil")
  print(x_594, x_595);
  return x_594;
}

fn lazy__819(env) {
  cmsort_workerL_456 := env[0];
  zs_545 := env[1];
  mkclo1(x_549, fn1_lam_820, fvc:=2, argc:=1);
  setclo(x_549, cmsort_workerL_456, 1);
  setclo(x_549, zs_545, 2);
  fork(x_548, x_549);
  move1(c_547, x_548);
  recv1(x_554, c_547);
  move1(_553, x_554);
  switch(ctagof(_553)){
    ex1LL_37 => {
      getbox(m_556, _553, 0);
      getbox(n_557, _553, 1);
      close1(x_559, n_557);
      move1(__558, x_559);
      move1(x_555, m_556);
      free(_553);
      break;
    }
  }
  return x_555;
}

fn fn1_lam_820(env) {
  lam_550 := env[0];
  cmsort_workerL_456 := env[1];
  zs_545 := env[2];
  _551 := env[3];
  x_552 := fn0_cmsort_workerL_803(4, zs_545, _551);
  return x_552;
}

fn lazy__814(env) {
  cmsort_workerU_384 := env[0];
  zs_529 := env[1];
  mkclo1(x_533, fn1_lam_815, fvc:=2, argc:=1);
  setclo(x_533, cmsort_workerU_384, 1);
  setclo(x_533, zs_529, 2);
  fork(x_532, x_533);
  move1(c_531, x_532);
  recv0(x_538, c_531);
  move1(_537, x_538);
  switch(ctagof(_537)){
    ex1UL_39 => {
      getbox(m_540, _537, 0);
      getbox(n_541, _537, 1);
      close1(x_543, n_541);
      move1(__542, x_543);
      move1(x_539, m_540);
      free(_537);
      break;
    }
  }
  return x_539;
}

fn fn1_lam_815(env) {
  lam_534 := env[0];
  cmsort_workerU_384 := env[1];
  zs_529 := env[2];
  _535 := env[3];
  x_536 := fn0_cmsort_workerU_794(4, zs_529, _535);
  return x_536;
}

fn lazy__808(env) {
  rwlLL_28 := env[0];
  mergeL_326 := env[1];
  cmsort_workerL_456 := env[2];
  __457 := env[3];
  __459 := env[4];
  m_490 := env[5];
  n_491 := env[6];
  mkclo1(x_495, fn1_lam_809, fvc:=3, argc:=1);
  setclo(x_495, cmsort_workerL_456, 1);
  setclo(x_495, __457, 2);
  setclo(x_495, m_490, 3);
  fork(x_494, x_495);
  move1(r1_493, x_494);
  mkclo1(x_502, fn1_lam_810, fvc:=3, argc:=1);
  setclo(x_502, cmsort_workerL_456, 1);
  setclo(x_502, __457, 2);
  setclo(x_502, n_491, 3);
  fork(x_501, x_502);
  move1(r2_500, x_501);
  recv1(x_508, r1_493);
  move1(_507, x_508);
  switch(ctagof(_507)){
    ex1LL_37 => {
      getbox(m_510, _507, 0);
      getbox(n_511, _507, 1);
      recv1(x_513, r2_500);
      move1(_512, x_513);
      switch(ctagof(_512)){
        ex1LL_37 => {
          getbox(m_515, _512, 0);
          getbox(n_516, _512, 1);
          x_518 := fn0_mergeL_785(m_510, m_515);
          move1(zs1_517, x_518);
          x_520 := fn0_rwlLL_649(NULL, NULL, NULL, NULL, NULL, zs1_517);
          move1(zs1_519, x_520);
          send(x_522, __459, zs1_519);
          move1(c_521, x_522);
          close1(x_524, n_511);
          move1(__523, x_524);
          close1(x_526, n_516);
          move1(__525, x_526);
          close0(x_527, c_521);
          move1(x_514, x_527);
          free(_512);
          break;
        }
      }
      move1(x_509, x_514);
      free(_507);
      break;
    }
  }
  return x_509;
}

fn fn1_lam_809(env) {
  lam_496 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  m_490 := env[3];
  _497 := env[4];
  sub(x_499, __457, 1);
  x_498 := fn0_cmsort_workerL_803(x_499, m_490, _497);
  return x_498;
}

fn fn1_lam_810(env) {
  lam_503 := env[0];
  cmsort_workerL_456 := env[1];
  __457 := env[2];
  n_491 := env[3];
  _504 := env[4];
  sub(x_506, __457, 1);
  x_505 := fn0_cmsort_workerL_803(x_506, n_491, _504);
  return x_505;
}

fn lazy__807(env) {
  msortL_364 := env[0];
  zs_458 := env[1];
  __459 := env[2];
  hd_466 := env[3];
  tl_467 := env[4];
  hd_475 := env[5];
  tl_476 := env[6];
  rebox(x_483, tl_467, consUL_26);
  setbox(x_483, hd_475, 0);
  setbox(x_483, tl_476, 1);
  rebox(x_484, zs_458, consUL_26);
  setbox(x_484, hd_466, 0);
  setbox(x_484, x_483, 1);
  x_482 := fn0_msortL_791(x_484);
  send(x_481, __459, x_482);
  move1(c_480, x_481);
  close0(x_485, c_480);
  return x_485;
}

fn lazy__806(env) {
  zs_458 := env[0];
  __459 := env[1];
  hd_466 := env[2];
  tl_467 := env[3];
  rebox(x_472, tl_467, nilUL_25);
  rebox(x_473, zs_458, consUL_26);
  setbox(x_473, hd_466, 0);
  setbox(x_473, x_472, 1);
  send(x_471, __459, x_473);
  move1(c_470, x_471);
  close0(x_474, c_470);
  return x_474;
}

fn lazy__805(env) {
  zs_458 := env[0];
  __459 := env[1];
  rebox(x_464, zs_458, nilUL_25);
  send(x_463, __459, x_464);
  move1(c_462, x_463);
  close0(x_465, c_462);
  return x_465;
}

fn lazy__799(env) {
  rwlUU_7 := env[0];
  mergeU_308 := env[1];
  cmsort_workerU_384 := env[2];
  __385 := env[3];
  __387 := env[4];
  m_418 := env[5];
  n_419 := env[6];
  mkclo1(x_423, fn1_lam_800, fvc:=3, argc:=1);
  setclo(x_423, cmsort_workerU_384, 1);
  setclo(x_423, __385, 2);
  setclo(x_423, m_418, 3);
  fork(x_422, x_423);
  move1(r1_421, x_422);
  mkclo1(x_430, fn1_lam_801, fvc:=3, argc:=1);
  setclo(x_430, cmsort_workerU_384, 1);
  setclo(x_430, __385, 2);
  setclo(x_430, n_419, 3);
  fork(x_429, x_430);
  move1(r2_428, x_429);
  recv0(x_436, r1_421);
  move1(_435, x_436);
  switch(ctagof(_435)){
    ex1UL_39 => {
      getbox(m_438, _435, 0);
      getbox(n_439, _435, 1);
      recv0(x_441, r2_428);
      move1(_440, x_441);
      switch(ctagof(_440)){
        ex1UL_39 => {
          getbox(m_443, _440, 0);
          getbox(n_444, _440, 1);
          x_446 := fn0_mergeU_782(m_438, m_443);
          move1(zs1_445, x_446);
          x_448 := fn0_rwlUU_640(NULL, NULL, NULL, NULL, NULL, zs1_445);
          move1(zs1_447, x_448);
          send(x_450, __387, zs1_447);
          move1(c_449, x_450);
          close1(x_452, n_439);
          move1(__451, x_452);
          close1(x_454, n_444);
          move1(__453, x_454);
          close0(x_455, c_449);
          move1(x_442, x_455);
          free(_440);
          break;
        }
      }
      move1(x_437, x_442);
      free(_435);
      break;
    }
  }
  return x_437;
}

fn fn1_lam_800(env) {
  lam_424 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  m_418 := env[3];
  _425 := env[4];
  sub(x_427, __385, 1);
  x_426 := fn0_cmsort_workerU_794(x_427, m_418, _425);
  return x_426;
}

fn fn1_lam_801(env) {
  lam_431 := env[0];
  cmsort_workerU_384 := env[1];
  __385 := env[2];
  n_419 := env[3];
  _432 := env[4];
  sub(x_434, __385, 1);
  x_433 := fn0_cmsort_workerU_794(x_434, n_419, _432);
  return x_433;
}

fn lazy__798(env) {
  msortU_344 := env[0];
  __387 := env[1];
  hd_394 := env[2];
  hd_403 := env[3];
  tl_404 := env[4];
  mkbox(x_411, consUU_28, 2);
  setbox(x_411, hd_403, 0);
  setbox(x_411, tl_404, 1);
  mkbox(x_412, consUU_28, 2);
  setbox(x_412, hd_394, 0);
  setbox(x_412, x_411, 1);
  x_410 := fn0_msortU_788(x_412);
  send(x_409, __387, x_410);
  move1(c_408, x_409);
  close0(x_413, c_408);
  return x_413;
}

fn lazy__797(env) {
  __387 := env[0];
  hd_394 := env[1];
  mkbox(x_400, nilUU_27, 0);
  mkbox(x_401, consUU_28, 2);
  setbox(x_401, hd_394, 0);
  setbox(x_401, x_400, 1);
  send(x_399, __387, x_401);
  move1(c_398, x_399);
  close0(x_402, c_398);
  return x_402;
}

fn lazy__796(env) {
  __387 := env[0];
  mkbox(x_392, nilUU_27, 0);
  send(x_391, __387, x_392);
  move1(c_390, x_391);
  close0(x_393, c_390);
  return x_393;
}

fn fn1_aux_768(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_769, aux_240, i_246);
      move1(x_249, x_769);
      x_252 := fn0_ord_754(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_757(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_754(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_757(x_255);
      x_253 := fn0_str_760(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_746(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_747, loop_213, x_219);
      appc(x_748, x_747, x_221);
      move1(x_218, x_748);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_736(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_737, loop_198, x_204);
      appc(x_738, x_737, x_205);
      move1(x_203, x_738);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_708(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_694(y_148);
  x_150 := fn0_sub_700(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_709, loop_146, n_153);
      appc(x_710, x_709, y_148);
      move1(x_154, x_710);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_635, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_638, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_641, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_644, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_647, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_650, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_653, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_656, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_659, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_662, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_665, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_668, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_671, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_674, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_677, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_680, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_683, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_686, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_689, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_692, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_695, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_698, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_701, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_704, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_707, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_717, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_720, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_725, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_730, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_735, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_745, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_755, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_758, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_761, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_764, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_767, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_777, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_780, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_783, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_786, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_789, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_792, fvc:=0, argc:=1);
  mkclo0(cmsort_workerU_384, fn1_cmsort_workerU_795, fvc:=0, argc:=3);
  mkclo0(cmsort_workerL_456, fn1_cmsort_workerL_804, fvc:=0, argc:=3);
  mkclo0(cmsortU_528, fn1_cmsortU_813, fvc:=0, argc:=1);
  mkclo0(cmsortL_544, fn1_cmsortL_818, fvc:=0, argc:=1);
  mkclo0(mklistU_560, fn1_mklistU_823, fvc:=0, argc:=1);
  mkclo0(mklistL_568, fn1_mklistL_826, fvc:=0, argc:=1);
  mkclo0(list_lenU_576, fn1_list_lenU_829, fvc:=0, argc:=1);
  mkclo0(list_lenL_583, fn1_list_lenL_832, fvc:=0, argc:=1);
  mkclo0(print_listU_590, fn1_print_listU_835, fvc:=0, argc:=1);
  mkclo0(print_listL_607, fn1_print_listL_840, fvc:=0, argc:=1);
  x_625 := fn0_mklistL_825(2000000);
  move1(test_624, x_625);
  lazy(x_626, lazy__845, 4);
  setlazy(x_626, string_of_int_236, 0);
  setlazy(x_626, cmsortL_544, 1);
  setlazy(x_626, list_lenL_583, 2);
  setlazy(x_626, test_624, 3);
  force(x_844, x_626);
  return x_844;
}

[trans45 success]

-----------------------------------------

compilation success

-----------------------------------------

