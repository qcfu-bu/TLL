[Inductive {name = "unit"; relv = R;
   body =
   (Binder ([],
      (PBase ((TBase (Type U)), [(DMul ("tt", (TBase (Id "unit"))))]))))};
  Inductive {name = "bool"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DMul ("true", (TBase (Id "bool"))));
             (DMul ("false", (TBase (Id "bool"))))]))
       ))};
  Inductive {name = "nat"; relv = R;
    body =
    (Binder ([],
       (PBase
          ((TBase (Type U)),
           [(DMul ("zero", (TBase (Id "nat"))));
             (DMul ("succ",
                (TBind (R, (Id "nat"), (Binder ("pred", (TBase (Id "nat"))))
                   ))
                ))
             ]))
       ))};
  Inductive {name = "eq"; relv = N;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Id "A"),
                (Binder ("m",
                   (PBase
                      ((TBind (R, (Id "A"), (Binder ("_", (TBase (Type U))))
                          )),
                       [(DMul ("refl",
                           (TBase
                              (App [(Id "eq"); (Id "_"); (Id "m"); (Id "m")]))
                           ))
                         ]))
                   ))
                ))
             ))
          ))
       ))};
  Inductive {name = "exists"; relv = R;
    body =
    (Binder (["s"; "r"; "t"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBind ((Pi (R, U, (Id "A"), (Binder ("_", (Type (SId "r")))))),
                (Binder ("B",
                   (PBase
                      ((TBase (Type (SId "t"))),
                       [(DMul ("ex",
                           (TBind (R, (Id "A"),
                              (Binder ("m",
                                 (TBind (N, (App [(Id "B"); (Id "m")]),
                                    (Binder ("pf",
                                       (TBase
                                          (App
                                             [(Id "exists"); (Id "A");
                                               (Id "B")]))
                                       ))
                                    ))
                                 ))
                              ))
                           ))
                         ]))
                   ))
                ))
             ))
          ))
       ))};
  Inductive {name = "sing"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id "A"),
                    (Binder ("_", (TBase (Type (SId "s"))))))),
                 [(DMul ("just",
                     (TBind (R, (Id "A"),
                        (Binder ("m",
                           (TBase (App [(Id "sing"); (Id "_"); (Id "m")]))))
                        ))
                     ))
                   ]))
             ))
          ))
       ))};
  Inductive {name = "list"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBase (Type U)),
                 [(DMul ("nil", (TBase (App [(Id "list"); (Id "A")]))));
                   (DMul ("cons",
                      (TBind (R, (Id "A"),
                         (Binder ("hd",
                            (TBind (R, (App [(Id "list"); (Id "A")]),
                               (Binder ("tl",
                                  (TBase (App [(Id "list"); (Id "A")]))))
                               ))
                            ))
                         ))
                      ))
                   ]))
             ))
          ))
       ))};
  Inductive {name = "vec"; relv = R;
    body =
    (Binder (["s"],
       (PBind ((Type (SId "s")),
          (Binder ("A",
             (PBase
                ((TBind (R, (Id "nat"), (Binder ("_", (TBase (Type U)))))),
                 [(DMul ("vnil",
                     (TBase (App [(Id "vec"); (Id "A"); (Id "zero")]))));
                   (DMul ("vcons",
                      (TBind (N, (Id "nat"),
                         (Binder ("n",
                            (TBind (R, (Id "A"),
                               (Binder ("hd",
                                  (TBind (R,
                                     (App
                                        [(Inst ("vec", [(SId "s")]));
                                          (Id "A"); (Id "n")]),
                                     (Binder ("tl",
                                        (TBase
                                           (App
                                              [(Id "vec"); (Id "A");
                                                (App [(Id "succ"); (Id "n")])
                                                ]))
                                        ))
                                     ))
                                  ))
                               ))
                            ))
                         ))
                      ))
                   ]))
             ))
          ))
       ))};
  Definition {name = "hd_vec"; relv = R;
    body =
    (Binder (["s"],
       ((Fun (
           (Pi (N, U, (Type (SId "s")),
              (Binder ("A",
                 (Pi (N, U, (Id "nat"),
                    (Binder ("n",
                       (Pi (R, U,
                          (App
                             [(Inst ("vec", [(SId "s")])); (Id "A");
                               (App [(Id "succ"); (Id "n")])]),
                          (Binder ("_", (Id "A")))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "hd_vec"),
              [([(PId "A"); (PId "n"); (PId "vnil")], None);
                ([(PId "A"); (PId "n");
                   (PMul ("vcons", [(PId "_"); (PId "hd"); (PId "_")]))],
                 (Some (Id "hd")))
                ]
              ))
           )),
        (Pi (N, U, (Type (SId "s")),
           (Binder ("A",
              (Pi (N, U, (Id "nat"),
                 (Binder ("n",
                    (Pi (R, U,
                       (App
                          [(Inst ("vec", [(SId "s")])); (Id "A");
                            (App [(Id "succ"); (Id "n")])]),
                       (Binder ("_", (Id "A")))))
                    ))
                 ))
              ))
           )))
       ))}
  ]

-----------------------------------------

#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_61 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_62› (A_63 : Type‹s_62›) (m_64 : A_63): A_63 -> U
where
| refl_6 : (eq_4‹??_1› ?_1 m_64 m_64)

#[program]
inductive exists_5‹s_66,r_67,t_68› (A_69 : Type‹s_66›) (B_70 : 
A_69 -> Type‹r_67›): Type‹t_68› where
| ex_7
    (m_72 : A_69) {pf_73 : ((B_70) m_72)}
    : (exists_5‹??_2,??_3,??_4› A_69 B_70)

#[program]
inductive sing_6‹s_74› (A_75 : Type‹s_74›): A_75 -> Type‹s_74›
where
| just_8 (m_77 : A_75) : (sing_6‹??_5› ?_2 m_77)

#[program]
inductive list_7‹s_78› (A_79 : Type‹s_78›): U where
| nil_9 : (list_7‹??_6› A_79)
| cons_10
    (hd_80 : A_79) (tl_81 : (list_7‹??_7› A_79))
    : (list_7‹??_8› A_79)

#[program]
inductive vec_8‹s_82› (A_83 : Type‹s_82›): nat_3 -> U where
| vnil_11 : (vec_8‹??_9› A_83 zero_4)
| vcons_12
    {n_85 : nat_3} (hd_86 : A_83) (tl_87 : (vec_8‹s_82› A_83 n_85))
    : (vec_8‹??_10› A_83 (succ_5‹› n_85))

#[program]
def hd_vec_1‹s_88› :
  ∀ {A_89 : Type‹s_88›} ->
    ∀ {n_90 : nat_3} -> (vec_8‹s_88› A_89 (succ_5‹› n_90)) -> A_89
:=
  function hd_vec_92 :
    ∀ {A_93 : Type‹s_88›} ->
      ∀ {n_94 : nat_3} ->
        (vec_8‹s_88› A_93 (succ_5‹› n_94)) -> A_93
  | A_96 n_97 vnil_11 =>
  | A_98 n_99 (vcons_12 _100 hd_101 _102) => hd_101

-----------------------------------------

inductive-------------------------
infer_tm(unit_1)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(bool_2)
infer_tm(bool_2)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(nat_3)
infer_tm(nat_3)
infer_tm(nat_3)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    
  |}
  imeta_meta {|
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_105›)
infer_tm(A_106)
infer_tm(A_106)
infer_tm(Type‹s_109›)
infer_tm(A_110)
assert_equal1( A_110, ?_1)
assert_equal1( m_111, m_111)
infer_tm((eq_4‹??_1› ?_1 m_111 m_111))
check_tm(?_1, Type‹??_1›)
check_tm(m_111, ?_1)
infer_tm(m_111)
assert_equal1( ?_1, A_110)
check_tm(m_111, ?_1)
infer_tm(m_111)
assert_equal1( ?_1, A_110)
simpl_tm ~expand:false( ?_1, A_110)
simpl_tm ~expand:false( A_110, A_110)
simpl_tm ~expand:false( A_110, A_110)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_112
    
  |}
  imeta_meta {|
    ?_1 <= A_115
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_109›)
check_tm(A_110, Type‹s_109›)
infer_tm(A_110)
assert_equal1( Type‹s_109›, Type‹s_109›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_127›)
infer_tm(A_130 -> Type‹r_128›)
infer_tm(A_130)
infer_tm(Type‹r_128›)
infer_tm(Type‹s_134›)
infer_tm(A_137 -> Type‹r_135›)
infer_tm(A_137)
infer_tm(Type‹r_135›)
infer_tm(A_137)
infer_tm(((B_138) m_141))
infer_tm(B_138)
check_tm(m_141, A_137)
infer_tm(m_141)
assert_equal1( A_137, A_137)
assert_equal1( A_137, A_137)
assert_equal1( B_138, B_138)
infer_tm((exists_5‹??_2,??_3,??_4› A_137 B_138))
check_tm(A_137, Type‹??_2›)
infer_tm(A_137)
assert_equal1( Type‹??_2›, Type‹s_134›)
check_tm(B_138, A_137 -> Type‹??_3›)
infer_tm(B_138)
assert_equal1( A_137 -> Type‹??_3›, A_137 -> Type‹r_135›)
simpl_tm ~expand:false( A_137 -> Type‹??_3›, A_137 -> Type‹r_135›)
simpl_tm ~expand:false( A_137, A_137)
simpl_tm ~expand:false( Type‹??_3›, Type‹r_135›)
simpl_tm ~expand:false( Type‹??_2›, Type‹s_134›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_156
    ??_2 <= s_159
    ??_3 <= r_161
    ??_4 <= t_163
    
  |}
  imeta_meta {|
    ?_1 <= A_168
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_200›)
infer_tm(A_201)
infer_tm(Type‹s_203›)
infer_tm(A_204)
assert_equal1( A_204, ?_2)
infer_tm((sing_6‹??_5› ?_2 m_205))
check_tm(?_2, Type‹??_5›)
check_tm(m_205, ?_2)
infer_tm(m_205)
assert_equal1( ?_2, A_204)
simpl_tm ~expand:false( ?_2, A_204)
simpl_tm ~expand:false( A_204, A_204)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_206
    ??_2 <= s_209
    ??_3 <= r_211
    ??_4 <= t_213
    ??_5 <= s_216
    
  |}
  imeta_meta {|
    ?_1 <= A_219
    ?_2 <= A_222
    
  |}
  eqns {|
    
  |}
end_dump
infer_tm(Type‹s_203›)
check_tm(A_204, Type‹s_203›)
infer_tm(A_204)
assert_equal1( Type‹s_203›, Type‹s_203›)
----------------------------------

inductive-------------------------
infer_tm(Type‹s_235›)
infer_tm(Type‹s_237›)
assert_equal1( A_238, A_238)
infer_tm((list_7‹??_6› A_238))
check_tm(A_238, Type‹??_6›)
infer_tm(A_238)
assert_equal1( Type‹??_6›, Type‹s_237›)
simpl_tm ~expand:false( Type‹??_6›, Type‹s_237›)
infer_tm(Type‹s_239›)
infer_tm(A_240)
infer_tm((list_7‹??_7› A_240))
check_tm(A_240, Type‹??_7›)
infer_tm(A_240)
assert_equal1( Type‹??_7›, Type‹s_239›)
simpl_tm ~expand:false( Type‹??_7›, Type‹s_239›)
assert_equal1( A_240, A_240)
infer_tm((list_7‹??_8› A_240))
check_tm(A_240, Type‹??_8›)
infer_tm(A_240)
assert_equal1( Type‹??_8›, Type‹s_239›)
simpl_tm ~expand:false( Type‹??_8›, Type‹s_239›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_243
    ??_2 <= s_246
    ??_3 <= r_248
    ??_4 <= t_250
    ??_5 <= s_253
    ??_6 <= s_254
    ??_7 <= s_255
    ??_8 <= s_256
    
  |}
  imeta_meta {|
    ?_1 <= A_259
    ?_2 <= A_262
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

inductive-------------------------
infer_tm(Type‹s_278›)
infer_tm(nat_3)
infer_tm(Type‹s_281›)
assert_equal1( A_282, A_282)
infer_tm((vec_8‹??_9› A_282 zero_4))
check_tm(A_282, Type‹??_9›)
infer_tm(A_282)
assert_equal1( Type‹??_9›, Type‹s_281›)
check_tm(zero_4, nat_3)
infer_tm(zero_4)
assert_equal1( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_9›, Type‹s_281›)
infer_tm(Type‹s_283›)
infer_tm(nat_3)
infer_tm(A_284)
infer_tm((vec_8‹s_283› A_284 n_285))
check_tm(A_284, Type‹s_283›)
infer_tm(A_284)
assert_equal1( Type‹s_283›, Type‹s_283›)
check_tm(n_285, nat_3)
infer_tm(n_285)
assert_equal1( nat_3, nat_3)
assert_equal1( A_284, A_284)
infer_tm((vec_8‹??_10› A_284 (succ_5‹› n_285)))
check_tm(A_284, Type‹??_10›)
infer_tm(A_284)
assert_equal1( Type‹??_10›, Type‹s_283›)
check_tm((succ_5‹› n_285), nat_3)
infer_tm((succ_5‹› n_285))
check_tm(n_285, nat_3)
infer_tm(n_285)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
simpl_tm ~expand:false( Type‹??_10›, Type‹s_283›)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_288
    ??_2 <= s_291
    ??_3 <= r_293
    ??_4 <= t_295
    ??_5 <= s_298
    ??_6 <= s_299
    ??_7 <= s_300
    ??_8 <= s_301
    ??_9 <= s_302
    ??_10 <= s_303
    
  |}
  imeta_meta {|
    ?_1 <= A_306
    ?_2 <= A_309
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

definition-------------------------
infer_tm(∀ {A_332 : Type‹s_331›} ->
           ∀ {n_333 : nat_3} ->
             (vec_8‹s_331› A_332 (succ_5‹› n_333)) -> A_332)
infer_tm(Type‹s_331›)
infer_tm(∀ {n_336 : nat_3} ->
           (vec_8‹s_331› A_335 (succ_5‹› n_336)) -> A_335)
infer_tm(nat_3)
infer_tm((vec_8‹s_331› A_335 (succ_5‹› n_338)) -> A_335)
infer_tm((vec_8‹s_331› A_335 (succ_5‹› n_338)))
check_tm(A_335, Type‹s_331›)
infer_tm(A_335)
assert_equal1( Type‹s_331›, Type‹s_331›)
check_tm((succ_5‹› n_338), nat_3)
infer_tm((succ_5‹› n_338))
check_tm(n_338, nat_3)
infer_tm(n_338)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
infer_tm(A_335)
check_tm(function hd_vec_341 :
           ∀ {A_342 : Type‹s_331›} ->
             ∀ {n_343 : nat_3} ->
               (vec_8‹s_331› A_342 (succ_5‹› n_343)) -> A_342
         | A_345 n_346 vnil_11 =>
         | A_347 n_348 (vcons_12 _349 hd_350 _351) => hd_350, ∀ {A_352 :
                                                                Type‹s_331›} ->
                                                                ∀ {n_353 :
                                                                  nat_3} ->
                                                                  (vec_8‹s_331›
                                                                    A_352
                                                                    (succ_5‹›
                                                                    n_353)) ->
                                                                    A_352)
infer_tm(function hd_vec_355 :
           ∀ {A_356 : Type‹s_331›} ->
             ∀ {n_357 : nat_3} ->
               (vec_8‹s_331› A_356 (succ_5‹› n_357)) -> A_356
         | A_359 n_360 vnil_11 =>
         | A_361 n_362 (vcons_12 _363 hd_364 _365) => hd_364)
infer_tm(∀ {A_367 : Type‹s_331›} ->
           ∀ {n_368 : nat_3} ->
             (vec_8‹s_331› A_367 (succ_5‹› n_368)) -> A_367)
infer_tm(Type‹s_331›)
infer_tm(∀ {n_371 : nat_3} ->
           (vec_8‹s_331› A_370 (succ_5‹› n_371)) -> A_370)
infer_tm(nat_3)
infer_tm((vec_8‹s_331› A_370 (succ_5‹› n_373)) -> A_370)
infer_tm((vec_8‹s_331› A_370 (succ_5‹› n_373)))
check_tm(A_370, Type‹s_331›)
infer_tm(A_370)
assert_equal1( Type‹s_331›, Type‹s_331›)
check_tm((succ_5‹› n_373), nat_3)
infer_tm((succ_5‹› n_373))
check_tm(n_373, nat_3)
infer_tm(n_373)
assert_equal1( nat_3, nat_3)
assert_equal1( nat_3, nat_3)
infer_tm(A_370)
check_cls {|
  prblm {| ;
    () ::: [A_376, n_377, vnil_11] =>? !!
    {|  ::: [A_378, n_379, (vcons_12 _380 hd_381 _382)] =>? #hd_381 |}
  |}
|}
case_intro
case_intro
case_intro
case_splitting
splitting_on(vnil_11)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹s_331› #A_389 (succ_5‹› #n_390)),
      (vec_8‹s_331› #A_389 zero_4));
    (eq_pat?( #A_389, A_376 : Type‹s_331›)
     eq_pat?( #n_390, n_377 : nat_3)) ::: [] =>? !!
  |}
|}
unify_pprbm(
  eq_term?( (vec_8‹s_331› #A_389 (succ_5‹› #n_390)),
    (vec_8‹s_331› #A_389 zero_4))
)
simpl_pprbm ~expand:false( (vec_8‹s_331› #A_389 (succ_5‹› #n_390)),
  (vec_8‹s_331› #A_389 zero_4))
simpl_pprbm ~expand:false( #A_389, #A_389)
simpl_pprbm ~expand:false( (succ_5‹› #n_390), zero_4)
simpl_pprbm ~expand:true( (succ_5‹› #n_390), zero_4)
splitting_on(vcons_12)
case_coverage{|
  prblm {|
    eq_term?( (vec_8‹s_331› #A_389 (succ_5‹› #n_390)),
      (vec_8‹s_331› #A_389 (succ_5‹› #n_398)));
    {| eq_pat?( #A_389, A_378 : Type‹s_331›)
       eq_pat?( #n_390, n_379 : nat_3)
       eq_pat?( #n_398, _380 : nat_3)
       eq_pat?( #hd_399, hd_381 : #A_389)
       eq_pat?( #tl_400, _382 : (vec_8‹s_331› #A_389 #n_398)) ::: [] =>?
         #hd_381
    |}
  |}
|}
unify_pprbm(
  eq_term?( (vec_8‹s_331› #A_389 (succ_5‹› #n_390)),
    (vec_8‹s_331› #A_389 (succ_5‹› #n_398)))
  eq_pat?( #A_389, A_378 : Type‹s_331›)
  eq_pat?( #n_390, n_379 : nat_3)
  eq_pat?( #n_398, _380 : nat_3)
  eq_pat?( #hd_399, hd_381 : #A_389)
  eq_pat?( #tl_400, _382 : (vec_8‹s_331› #A_389 #n_398))
)
simpl_pprbm ~expand:false( (vec_8‹s_331› #A_389 (succ_5‹› #n_390)),
  (vec_8‹s_331› #A_389 (succ_5‹› #n_398)))
simpl_pprbm ~expand:false( #A_389, #A_389)
simpl_pprbm ~expand:false( (succ_5‹› #n_390), (succ_5‹› #n_398))
simpl_pprbm ~expand:false( #n_390, #n_398)
simpl_pprbm ~expand:false( #A_389, #A_378)
simpl_pprbm ~expand:false( #n_390, #n_379)
simpl_pprbm ~expand:false( #n_398, #_380)
simpl_pprbm ~expand:false( #hd_399, #hd_381)
simpl_pprbm ~expand:false( #tl_400, #_382)
simpl_pprbm ~expand:false( #n_398, #n_390)
simpl_pprbm ~expand:false( #A_389, #A_378)
simpl_pprbm ~expand:false( #n_398, #n_379)
simpl_pprbm ~expand:false( #n_398, #_380)
simpl_pprbm ~expand:false( #hd_399, #hd_381)
simpl_pprbm ~expand:false( #tl_400, #_382)
case_coverage_ok(hd_399, A_389)
check_tm(hd_399, A_389)
infer_tm(hd_399)
assert_equal1( A_389, A_389)
assert_equal1(
  ∀ {A_413 : Type‹s_331›} ->
    ∀ {n_414 : nat_3} ->
      (vec_8‹s_331› A_413 (succ_5‹› n_414)) -> A_413,
  ∀ {A_416 : Type‹s_331›} ->
    ∀ {n_417 : nat_3} ->
      (vec_8‹s_331› A_416 (succ_5‹› n_417)) -> A_416)
begin_dump
  mctx {|
    
  |}
  smeta_meta {|
    ??_1 <= s_422
    ??_2 <= s_425
    ??_3 <= r_427
    ??_4 <= t_429
    ??_5 <= s_432
    ??_6 <= s_433
    ??_7 <= s_434
    ??_8 <= s_435
    ??_9 <= s_436
    ??_10 <= s_437
    
  |}
  imeta_meta {|
    ?_1 <= A_440
    ?_2 <= A_443
    
  |}
  eqns {|
    
  |}
end_dump
----------------------------------

smeta_meta {|
  ??_1 <= s_471
  ??_2 <= s_474
  ??_3 <= r_476
  ??_4 <= t_478
  ??_5 <= s_481
  ??_6 <= s_482
  ??_7 <= s_483
  ??_8 <= s_484
  ??_9 <= s_485
  ??_10 <= s_486
  
|}
imeta_meta {|
  ?_1 <= A_489
  ?_2 <= A_492
  
|}
#[program]
inductive unit_1‹› : U where
| tt_1 : unit_1

#[program]
inductive bool_2‹› : U where
| true_2 : bool_2
| false_3 : bool_2

#[program]
inductive nat_3‹› : U where
| zero_4 : nat_3
| succ_5 (pred_611 : nat_3) : nat_3

#[logical]
inductive eq_4‹s_612› (A_613 : Type‹s_612›) (m_614 : A_613):
  A_613 -> U
where
| refl_6 : (eq_4‹s_612› A_613 m_614 m_614)

#[program]
inductive exists_5‹s_616,r_617,t_618› (A_619 : Type‹s_616›) (B_620 : 
A_619 -> Type‹r_617›): Type‹t_618› where
| ex_7
    (m_622 : A_619) {pf_623 : ((B_620) m_622)}
    : (exists_5‹s_616,r_617,t_618› A_619 B_620)

#[program]
inductive sing_6‹s_624› (A_625 : Type‹s_624›):
  A_625 -> Type‹s_624›
where
| just_8 (m_627 : A_625) : (sing_6‹s_624› A_625 m_627)

#[program]
inductive list_7‹s_628› (A_629 : Type‹s_628›): U where
| nil_9 : (list_7‹s_628› A_629)
| cons_10
    (hd_630 : A_629) (tl_631 : (list_7‹s_628› A_629))
    : (list_7‹s_628› A_629)

#[program]
inductive vec_8‹s_632› (A_633 : Type‹s_632›): nat_3 -> U where
| vnil_11 : (vec_8‹s_632› A_633 zero_4)
| vcons_12
    {n_635 : nat_3} (hd_636 : A_633)
    (tl_637 : (vec_8‹s_632› A_633 n_635))
    : (vec_8‹s_632› A_633 (succ_5‹› n_635))

#[program]
def hd_vec_1‹s_638› :
  ∀ {A_639 : Type‹s_638›} ->
    ∀ {n_640 : nat_3} ->
      (vec_8‹s_638› A_639 (succ_5‹› n_640)) -> A_639
:=
  function hd_vec_642 :
    ∀ {A_643 : Type‹s_638›} ->
      ∀ {n_644 : nat_3} ->
        (vec_8‹s_638› A_643 (succ_5‹› n_644)) -> A_643
  | A_646 n_647 vnil_11 =>
  | A_648 n_649 (vcons_12 _650 hd_651 _652) => hd_651

-----------------------------------------

