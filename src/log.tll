[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_408› : ∀ (A_409 : Type‹s_408›) -> A_409 -> ?_2[0;0] :=
  fun id_411 : ∀ (A_412 : Type‹s_408›) -> A_412 -> ?_1[0;0]
  | A_414 m_415 => m_415

#[logical]
inductive eq_1‹s_416› (A_417 : Type‹s_416›) (m_418 : A_417):
  A_417 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_418 m_418)

#[program]
def rwl_2‹s_420,r_421› :
  ∀ {A_422 : Type‹s_420›} ->
    ∀ {m_423 : A_422} ->
      ∀ {n_424 : A_422} ->
        ∀ {B_425 : A_422 -> Type‹r_421›} ->
          {(eq_1‹??_3› ?_5[0;0] m_423 n_424)} ->
            ((B_425) m_423) -> ((B_425) n_424)
:=
  fun rwl_429 :
    ∀ {A_430 : Type‹s_420›} ->
      ∀ {m_431 : A_430} ->
        ∀ {n_432 : A_430} ->
          ∀ {B_433 : A_430 -> Type‹r_421›} ->
            {(eq_1‹??_2› ?_4[0;0] m_431 n_432)} ->
              ((B_433) m_431) -> ((B_433) n_432)
  | A_437 m_438 n_439 B_440 refl_1 x_441 => x_441

#[program]
def rwr_3‹s_442,r_443› :
  ∀ {A_444 : Type‹s_442›} ->
    ∀ {m_445 : A_444} ->
      ∀ {n_446 : A_444} ->
        ∀ {B_447 : A_444 -> Type‹r_443›} ->
          {(eq_1‹??_5› ?_7[0;0] m_445 n_446)} ->
            ((B_447) n_446) -> ((B_447) m_445)
:=
  fun rwr_451 :
    ∀ {A_452 : Type‹s_442›} ->
      ∀ {m_453 : A_452} ->
        ∀ {n_454 : A_452} ->
          ∀ {B_455 : A_452 -> Type‹r_443›} ->
            {(eq_1‹??_4› ?_6[0;0] m_453 n_454)} ->
              ((B_455) n_454) -> ((B_455) m_453)
  | A_459 m_460 n_461 B_462 refl_1 x_463 => x_463

#[logical]
def congr_4‹s_464,r_465,t_466› :
  ∀ (A_467 : Type‹s_464›) ->
    ∀ (B_468 : Type‹r_465›) ->
      ∀ (m_469 : A_467) ->
        ∀ (n_470 : A_467) ->
          ∀ (f_471 : forall‹t_466›(__472 : A_467), B_468) ->
            (eq_1‹??_9› ?_12[0;0] m_469 n_470) ->
              (eq_1‹??_10› ?_13[0;0] ((f_471) m_469) ((f_471) n_470))
:=
  fun congr_474 :
    ∀ (A_475 : Type‹s_464›) ->
      ∀ (B_476 : Type‹r_465›) ->
        ∀ (m_477 : A_475) ->
          ∀ (n_478 : A_475) ->
            ∀ (f_479 : forall‹t_466›(__480 : A_475), B_476) ->
              (eq_1‹??_6› ?_8[0;0] m_477 n_478) ->
                (eq_1‹??_7› ?_9[0;0] ((f_479) m_477) ((f_479) n_478))
  | A_482 B_483 m_484 n_485 f_486 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_487 : U} ->
    ∀ {m_488 : A_487} ->
      ∀ (x_489 : (eq_1‹??_15› ?_20[0;0] m_488 m_488)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_489 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_490 :
    ∀ {A_491 : U} ->
      ∀ {m_492 : A_491} ->
        ∀ (x_493 : (eq_1‹??_11› ?_14[0;0] m_492 m_492)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_493 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_494 m_495 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_496,t_497› (A_498 : Type‹s_496›):
  A_498 -> Type‹t_497›
where
| just_2 (m_500 : A_498) : (sing_2‹??_18,??_19› ?_24[0;0] m_500)

#[logical]
def ssing_6‹s_501› :
  ∀ (A_502 : Type‹s_501›) -> A_502 -> Type‹s_501›
:=
  fun ssing_504 : ∀ (A_505 : Type‹s_501›) -> A_505 -> Type‹s_501›
  | A_507 m_508 => (sing_2‹s_501,s_501› A_507 m_508)

#[program]
def sing_elim_7‹s_509,t_510› :
  ∀ {A_511 : Type‹s_509›} ->
    ∀ {x_512 : A_511} -> (sing_2‹s_509,t_510› ?_26[0;0] x_512) -> A_511
:=
  fun sing_elim_514 :
    ∀ {A_515 : Type‹s_509›} ->
      ∀ {x_516 : A_515} ->
        (sing_2‹s_509,t_510› ?_25[0;0] x_516) -> A_515
  | A_518 x_519 (just_2 x_520) => x_520

#[logical]
def sing_uniq_8‹s_521,t_522› :
  ∀ (A_523 : Type‹s_521›) ->
    ∀ (x0_524 : A_523) ->
      ∀ (x_525 : (sing_2‹s_521,t_522› ?_33[0;0] x0_524)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_524
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_525))
:=
  fun sing_uniq_526 :
    ∀ (A_527 : Type‹s_521›) ->
      ∀ (x0_528 : A_527) ->
        ∀ (x_529 : (sing_2‹s_521,t_522› ?_27[0;0] x0_528)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_528
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_529))
  | A_530 x0_531 (just_2 _532) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_533 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_533 tt_3)
:=
  fun unit_eta_534 :
    ∀ (x_535 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_535 tt_3)
  | x_536 =>
    match x_536 in
      ∀ (x0_537 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_537 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_539 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_543 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _546 _547 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_550 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _553 _554 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_557 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _560 _561 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_562 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_565 : nat_5 -> nat_5 -> bool_4
  | zero_6 _568 => true_4
  | _569 zero_6 => false_5
  | (succ_7 x_570) (succ_7 y_571) => ((lte_565) x_570 y_571)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_574 : nat_5 -> nat_5 -> bool_4
  | x_577 y_578 => ((lte_14) (succ_7‹› x_577) y_578)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_580 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_582) => x_582

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_585 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_588 => y_588
  | (succ_7 x_589) y_590 => (succ_7‹› ((add_585) x_589 y_590))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_593 : nat_5 -> nat_5 -> nat_5
  | x_596 zero_6 => x_596
  | x_597 (succ_7 y_598) => ((sub_593) ((pred_16) x_597) y_598)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_601 : nat_5 -> nat_5 -> nat_5
  | zero_6 _604 => zero_6
  | (succ_7 x_605) y_606 => ((add_17) y_606 ((mul_601) x_605 y_606))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_609 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_612 y_613 =>
    match ((lt_15) x_612 y_613) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_615 :=
        fun loop_616 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_619 y_620 =>
          match ((sub_18) x_619 ((pred_16) y_620)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_622) => (succ_7‹› ((loop_616) x_622 y_620))
      in ((loop_615) x_612 y_613)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_625 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_628 y_629 => ((sub_18) x_628 ((mul_19) ((div_20) x_628 y_629) y_629))

#[program]
inductive list_6‹s_630,t_631› (A_632 : Type‹s_630›): Type‹t_631›
where
| nil_8 : (list_6‹??_31,??_32› A_632)
| cons_9
    (hd_633 : A_632) (tl_634 : (list_6‹??_33,t_631› A_632))
    : (list_6‹??_34,??_35› A_632)

#[program]
def free_list_22‹s_635,t_636› :
  ∀ {A_637 : Type‹s_635›} ->
    A_637 -> unit_3 -> (list_6‹??_37,t_636› A_637) -> unit_3
:=
  fun free_list_641 :
    ∀ {A_642 : Type‹s_635›} ->
      A_642 -> unit_3 -> (list_6‹??_36,t_636› A_642) -> unit_3
  | A_646 f_647 nil_8 => tt_3
  | A_648 f_649 (cons_9 x_650 xs_651) =>
    let __652 := ((f_649) x_650) in ((free_list_641) ?_52[0;0] f_649 xs_651)

#[program]
inductive exists0_7‹s_653,r_654› (A_655 : Type‹s_653›) (B_656 : 
A_655 -> Type‹r_654›): L where
| ex0_10
    {m_658 : A_655} (n_659 : ((B_656) m_658))
    : (exists0_7‹??_38,??_39› A_655 B_656)

#[program]
inductive exists1_8‹s_660,r_661› (A_662 : Type‹s_660›) (B_663 : 
A_662 -> Type‹r_661›): L where
| ex1_11
    (m_665 : A_662) (n_666 : ((B_663) m_665))
    : (exists1_8‹??_40,??_41› A_662 B_663)

#[logical]
def prod0_23‹s_667,r_668› :
  Type‹s_667› -> Type‹r_668› -> ?_56[0;0]
:=
  fun prod0_671 : Type‹s_667› -> Type‹r_668› -> ?_53[0;0]
  | A_674 B_675 =>
    (exists0_7‹??_42,??_43›
      A_674 fun _676 : ?_54[0;0] -> ?_55[0;0]
            | _678 => B_675)

#[logical]
def prod1_24‹s_679,r_680› :
  Type‹s_679› -> Type‹r_680› -> ?_60[0;0]
:=
  fun prod1_683 : Type‹s_679› -> Type‹r_680› -> ?_57[0;0]
  | A_686 B_687 =>
    (exists1_8‹??_44,??_45›
      A_686 fun _688 : ?_58[0;0] -> ?_59[0;0]
            | _690 => B_687)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_693 : int -> int -> int
  | x_696 y_697 =>
    let loop_698 :=
      fun loop_699 : int -> int -> int
      | acc_702 y_703 =>
        match (__lte__ y_703 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_702
        | false_5 => ((loop_699) (__mul__ x_696 acc_702) (__sub__ y_703 1))
    in ((loop_698) 1 y_697)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_708 : int -> int -> int -> int
  | x_712 y_713 m_714 =>
    let loop_715 :=
      fun loop_716 : int -> int -> int
      | acc_719 y_720 =>
        match (__lte__ y_720 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_719
        | false_5 =>
          ((loop_716)
            (__mod__ (__mul__ x_712 acc_719) m_714) (__sub__ y_720 1))
    in ((loop_715) 1 y_713)

#[program]
def ord_27‹› : char -> int :=
  fun ord_723 : char -> int
  | c_725 => (__ord__ c_725)

#[program]
def chr_28‹› : int -> char :=
  fun chr_727 : int -> char
  | i_729 => (__chr__ i_729)

#[program]
def str_29‹› : char -> string :=
  fun str_731 : char -> string
  | c_733 => (__push__ "" c_733)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_735 : string -> int
  | s_737 => (__size__ s_737)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_739 : int -> string
  | i_741 =>
    let aux_742 :=
      fun aux_743 : int -> string
      | i_745 =>
        match (__lte__ 10 i_745) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_747 := (__mod__ i_745 10) in
          let i_748 := (__div__ i_745 10) in
          (__push__ ((aux_743) i_748)
            ((chr_28) (__add__ r_747 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_745 ((ord_27) 0))))
    in
    match (__lt__ 0 i_741) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_742) i_741)
    | false_5 => (__cat__ "~" ((aux_742) (__neg__ i_741)))

#[logical]
def test_32‹› :
  (eq_1‹??_47› ?_71[0;0] ((string_of_int_31) (__neg__ 10)) "~10")
:= (refl_1‹??_46› ?_69[0;0] ?_70[0;0])

#[program]
def split_33‹t_750› :
  (list_6‹??_73,t_750› int) ->
    ((prod1_24‹??_76,??_77›)
      (list_6‹??_74,t_750› int) (list_6‹??_75,t_750› int))
:=
  fun split_752 :
    (list_6‹??_48,t_750› int) ->
      ((prod1_24‹??_51,??_52›)
        (list_6‹??_49,t_750› int) (list_6‹??_50,t_750› int))
  | nil_8 =>
    (ex1_11‹??_57,??_58›
      ?_74[0;0] ?_75[0;0] (nil_8‹??_53,??_54› ?_72[0;0])
      (nil_8‹??_55,??_56› ?_73[0;0]))
  | (cons_9 x_754 nil_8) =>
    (ex1_11‹??_65,??_66›
      ?_79[0;0] ?_80[0;0]
      (cons_9‹??_61,??_62›
        ?_77[0;0] x_754 (nil_8‹??_59,??_60› ?_76[0;0]))
      (nil_8‹??_63,??_64› ?_78[0;0]))
  | (cons_9 x_755 (cons_9 y_756 zs_757)) =>
    match ((split_752) zs_757) in ?_86[0;0] -o ?_85[0;0] with
    | (ex1_11 xs_759 ys_760) =>
      (ex1_11‹??_71,??_72›
        ?_83[0;0] ?_84[0;0] (cons_9‹??_67,??_68› ?_81[0;0] x_755 xs_759)
        (cons_9‹??_69,??_70› ?_82[0;0] y_756 ys_760))

#[program]
def merge_34‹t_761› :
  (list_6‹??_89,t_761› int) ->
    (list_6‹??_90,t_761› int) -o (list_6‹??_91,t_761› int)
:=
  fun merge_764 :
    (list_6‹??_78,t_761› int) ->
      (list_6‹??_79,t_761› int) -o (list_6‹??_80,t_761› int)
  | nil_8 ys_767 => ys_767
  | xs_768 nil_8 => xs_768
  | (cons_9 x_769 xs_770) (cons_9 y_771 ys_772) =>
    match (__lte__ x_769 y_771) in ?_87[0;0] -o ?_88[0;0] with
    | true_4 =>
      (cons_9‹??_83,??_84›
        ?_90[0;0] x_769
        ((merge_764) xs_770 (cons_9‹??_81,??_82› ?_89[0;0] y_771 ys_772)))
    | false_5 =>
      (cons_9‹??_87,??_88›
        ?_92[0;0] y_771
        ((merge_764) (cons_9‹??_85,??_86› ?_91[0;0] x_769 xs_770) ys_772))

#[program]
def msort_35‹t_774› :
  (list_6‹??_102,t_774› int) -> (list_6‹??_103,t_774› int)
:=
  fun msort_776 :
    (list_6‹??_92,t_774› int) -> (list_6‹??_93,t_774› int)
  | nil_8 => (nil_8‹??_94,??_95› ?_93[0;0])
  | (cons_9 z_778 nil_8) =>
    (cons_9‹??_98,??_99›
      ?_95[0;0] z_778 (nil_8‹??_96,??_97› ?_94[0;0]))
  | zs_779 =>
    match ((split_33‹??_100›) zs_779) in ?_97[0;0] -o ?_96[0;0] with
    | (ex1_11 xs_781 ys_782) =>
      ((merge_34‹??_101›) ((msort_776) xs_781) ((msort_776) ys_782))

-----------------------------------------

#[program]
def id_1‹s_5695› : ∀ (A_5696 : Type‹s_5695›) -> A_5696 -> A_5696 :=
  fun id_5698 : ∀ (A_5699 : Type‹s_5695›) -> A_5699 -> A_5699
  | A_5701 m_5702 => m_5702

#[logical]
inductive eq_1‹s_5703› (A_5704 : Type‹s_5703›) (m_5705 : A_5704):
  A_5704 -> U
where
| refl_1 : (eq_1‹s_5703› A_5704 m_5705 m_5705)

#[program]
def rwl_2‹s_5707,r_5708› :
  ∀ {A_5709 : Type‹s_5707›} ->
    ∀ {m_5710 : A_5709} ->
      ∀ {n_5711 : A_5709} ->
        ∀ {B_5712 : A_5709 -> Type‹r_5708›} ->
          {(eq_1‹s_5707› A_5709 m_5710 n_5711)} ->
            ((B_5712) m_5710) -> ((B_5712) n_5711)
:=
  fun rwl_5716 :
    ∀ {A_5717 : Type‹s_5707›} ->
      ∀ {m_5718 : A_5717} ->
        ∀ {n_5719 : A_5717} ->
          ∀ {B_5720 : A_5717 -> Type‹r_5708›} ->
            {(eq_1‹s_5707› A_5717 m_5718 n_5719)} ->
              ((B_5720) m_5718) -> ((B_5720) n_5719)
  | A_5724 m_5725 n_5726 B_5727 refl_1 __5728 => __5728

#[program]
def rwr_3‹s_5729,r_5730› :
  ∀ {A_5731 : Type‹s_5729›} ->
    ∀ {m_5732 : A_5731} ->
      ∀ {n_5733 : A_5731} ->
        ∀ {B_5734 : A_5731 -> Type‹r_5730›} ->
          {(eq_1‹s_5729› A_5731 m_5732 n_5733)} ->
            ((B_5734) n_5733) -> ((B_5734) m_5732)
:=
  fun rwr_5738 :
    ∀ {A_5739 : Type‹s_5729›} ->
      ∀ {m_5740 : A_5739} ->
        ∀ {n_5741 : A_5739} ->
          ∀ {B_5742 : A_5739 -> Type‹r_5730›} ->
            {(eq_1‹s_5729› A_5739 m_5740 n_5741)} ->
              ((B_5742) n_5741) -> ((B_5742) m_5740)
  | A_5746 m_5747 n_5748 B_5749 refl_1 __5750 => __5750

#[logical]
def congr_4‹s_5751,r_5752,t_5753› :
  ∀ (A_5754 : Type‹s_5751›) ->
    ∀ (B_5755 : Type‹r_5752›) ->
      ∀ (m_5756 : A_5754) ->
        ∀ (n_5757 : A_5754) ->
          ∀ (f_5758 : forall‹t_5753›(__5759 : A_5754), B_5755) ->
            (eq_1‹s_5751› A_5754 m_5756 n_5757) ->
              (eq_1‹r_5752› B_5755 ((f_5758) m_5756) ((f_5758) n_5757))
:=
  fun congr_5761 :
    ∀ (A_5762 : Type‹s_5751›) ->
      ∀ (B_5763 : Type‹r_5752›) ->
        ∀ (m_5764 : A_5762) ->
          ∀ (n_5765 : A_5762) ->
            ∀ (f_5766 : forall‹t_5753›(__5767 : A_5762), B_5763) ->
              (eq_1‹s_5751› A_5762 m_5764 n_5765) ->
                (eq_1‹r_5752› B_5763 ((f_5766) m_5764) ((f_5766) n_5765))
  | A_5769 B_5770 m_5771 n_5772 f_5773 refl_1 =>
    (refl_1‹r_5752› B_5770 ((f_5773) n_5772))

#[logical]
def axiom_K_5‹› :
  ∀ {A_5774 : U} ->
    ∀ {m_5775 : A_5774} ->
      ∀ (x_5776 : (eq_1‹U› A_5774 m_5775 m_5775)) ->
        (eq_1‹U›
          (eq_1‹U› A_5774 m_5775 m_5775) x_5776
          (refl_1‹U› A_5774 m_5775))
:=
  fun axiom_K_5777 :
    ∀ {A_5778 : U} ->
      ∀ {m_5779 : A_5778} ->
        ∀ (x_5780 : (eq_1‹U› A_5778 m_5779 m_5779)) ->
          (eq_1‹U›
            (eq_1‹U› A_5778 m_5779 m_5779) x_5780
            (refl_1‹U› A_5778 m_5779))
  | A_5781 m_5782 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_5781 m_5782 m_5782) (refl_1‹U› A_5781 m_5782))

#[program]
inductive sing_2‹s_5783,t_5784› (A_5785 : Type‹s_5783›):
  A_5785 -> Type‹t_5784›
where
| just_2 (m_5787 : A_5785) : (sing_2‹s_5783,t_5784› A_5785 m_5787)

#[logical]
def ssing_6‹s_5788› :
  ∀ (A_5789 : Type‹s_5788›) -> A_5789 -> Type‹s_5788›
:=
  fun ssing_5791 :
    ∀ (A_5792 : Type‹s_5788›) -> A_5792 -> Type‹s_5788›
  | A_5794 m_5795 => (sing_2‹s_5788,s_5788› A_5794 m_5795)

#[program]
def sing_elim_7‹s_5796,t_5797› :
  ∀ {A_5798 : Type‹s_5796›} ->
    ∀ {x_5799 : A_5798} ->
      (sing_2‹s_5796,t_5797› A_5798 x_5799) -> A_5798
:=
  fun sing_elim_5801 :
    ∀ {A_5802 : Type‹s_5796›} ->
      ∀ {x_5803 : A_5802} ->
        (sing_2‹s_5796,t_5797› A_5802 x_5803) -> A_5802
  | A_5805 x_5806 (just_2 m_5807) => m_5807

#[logical]
def sing_uniq_8‹s_5808,t_5809› :
  ∀ (A_5810 : Type‹s_5808›) ->
    ∀ (x0_5811 : A_5810) ->
      ∀ (x_5812 : (sing_2‹s_5808,t_5809› A_5810 x0_5811)) ->
        (eq_1‹s_5808›
          A_5810 x0_5811
          ((sing_elim_7‹s_5808,t_5809›) A_5810 x0_5811 x_5812))
:=
  fun sing_uniq_5813 :
    ∀ (A_5814 : Type‹s_5808›) ->
      ∀ (x0_5815 : A_5814) ->
        ∀ (x_5816 : (sing_2‹s_5808,t_5809› A_5814 x0_5815)) ->
          (eq_1‹s_5808›
            A_5814 x0_5815
            ((sing_elim_7‹s_5808,t_5809›) A_5814 x0_5815 x_5816))
  | A_5817 x0_5818 (just_2 m_5819) => (refl_1‹s_5808› A_5817 m_5819)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_5820 : unit_3) -> (eq_1‹U› unit_3 x_5820 tt_3)
:=
  fun unit_eta_5821 :
    ∀ (x_5822 : unit_3) -> (eq_1‹U› unit_3 x_5822 tt_3)
  | x_5823 =>
    match x_5823 in
      ∀ (x0_5824 : unit_3) -o (eq_1‹U› unit_3 x0_5824 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_5826 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_5830 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __5833 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_5836 : bool_4 -> bool_4 -> bool_4
  | true_4 __5839 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_5842 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_5845 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_5848 : nat_5 -> nat_5 -> bool_4
  | zero_6 __5851 => true_4
  | (succ_7 n_5852) zero_6 => false_5
  | (succ_7 n_5853) (succ_7 n_5854) => ((lte_5848) n_5853 n_5854)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_5857 : nat_5 -> nat_5 -> bool_4
  | x_5860 y_5861 => ((lte_14) (succ_7‹› x_5860) y_5861)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_5863 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_5865) => n_5865

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_5868 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5871 => __5871
  | (succ_7 n_5872) __5873 => (succ_7‹› ((add_5868) n_5872 __5873))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_5876 : nat_5 -> nat_5 -> nat_5
  | __5879 zero_6 => __5879
  | __5880 (succ_7 n_5881) => ((sub_5876) ((pred_16) __5880) n_5881)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_5884 : nat_5 -> nat_5 -> nat_5
  | zero_6 __5887 => zero_6
  | (succ_7 n_5888) __5889 => ((add_17) __5889 ((mul_5884) n_5888 __5889))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_5892 : nat_5 -> nat_5 -> nat_5
  | x_5895 y_5896 =>
    match ((lt_15) x_5895 y_5896) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_5898 :=
        fun loop_5899 : nat_5 -> nat_5 -> nat_5
        | x_5902 y_5903 =>
          match ((sub_18) x_5902 ((pred_16) y_5903)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_5905) => (succ_7‹› ((loop_5899) n_5905 y_5903))
      in ((loop_5898) x_5895 y_5896)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_5908 : nat_5 -> nat_5 -> nat_5
  | x_5911 y_5912 =>
    ((sub_18) x_5911 ((mul_19) ((div_20) x_5911 y_5912) y_5912))

#[program]
inductive list_6‹s_5913,t_5914› (A_5915 : Type‹s_5913›):
  Type‹t_5914›
where
| nil_8 : (list_6‹s_5913,t_5914› A_5915)
| cons_9
    (hd_5916 : A_5915) (tl_5917 : (list_6‹s_5913,t_5914› A_5915))
    : (list_6‹s_5913,t_5914› A_5915)

#[program]
def free_list_22‹s_5918,t_5919› :
  ∀ {A_5920 : Type‹s_5918›} ->
    A_5920 -> unit_3 -> (list_6‹s_5918,t_5919› A_5920) -> unit_3
:=
  fun free_list_5924 :
    ∀ {A_5925 : Type‹s_5918›} ->
      A_5925 -> unit_3 -> (list_6‹s_5918,t_5919› A_5925) -> unit_3
  | A_5929 f_5930 nil_8 => tt_3
  | A_5931 f_5932 (cons_9 hd_5933 tl_5934) =>
    let __5935 := ((f_5932) hd_5933) in
    ((free_list_5924) A_5931 f_5932 tl_5934)

#[program]
inductive exists0_7‹s_5936,r_5937› (A_5938 : Type‹s_5936›) (B_5939 : 
A_5938 -> Type‹r_5937›): L where
| ex0_10
    {m_5941 : A_5938} (n_5942 : ((B_5939) m_5941))
    : (exists0_7‹s_5936,r_5937› A_5938 B_5939)

#[program]
inductive exists1_8‹s_5943,r_5944› (A_5945 : Type‹s_5943›) (B_5946 : 
A_5945 -> Type‹r_5944›): L where
| ex1_11
    (m_5948 : A_5945) (n_5949 : ((B_5946) m_5948))
    : (exists1_8‹s_5943,r_5944› A_5945 B_5946)

#[logical]
def prod0_23‹s_5950,r_5951› : Type‹s_5950› -> Type‹r_5951› -> L
:=
  fun prod0_5954 : Type‹s_5950› -> Type‹r_5951› -> L
  | A_5957 B_5958 =>
    (exists0_7‹s_5950,r_5951›
      A_5957 fun _5959 : A_5957 -> Type‹r_5951›
             | __5961 => B_5958)

#[logical]
def prod1_24‹s_5962,r_5963› : Type‹s_5962› -> Type‹r_5963› -> L
:=
  fun prod1_5966 : Type‹s_5962› -> Type‹r_5963› -> L
  | A_5969 B_5970 =>
    (exists1_8‹s_5962,r_5963›
      A_5969 fun _5971 : A_5969 -> Type‹r_5963›
             | __5973 => B_5970)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_5976 : int -> int -> int
  | x_5979 y_5980 =>
    let loop_5981 :=
      fun loop_5982 : int -> int -> int
      | acc_5985 y_5986 =>
        match (__lte__ y_5986 0) in bool_4 -o int with
        | true_4 => acc_5985
        | false_5 =>
          ((loop_5982) (__mul__ x_5979 acc_5985) (__sub__ y_5986 1))
    in ((loop_5981) 1 y_5980)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_5991 : int -> int -> int -> int
  | x_5995 y_5996 m_5997 =>
    let loop_5998 :=
      fun loop_5999 : int -> int -> int
      | acc_6002 y_6003 =>
        match (__lte__ y_6003 0) in bool_4 -o int with
        | true_4 => acc_6002
        | false_5 =>
          ((loop_5999)
            (__mod__ (__mul__ x_5995 acc_6002) m_5997) (__sub__ y_6003 1))
    in ((loop_5998) 1 y_5996)

#[program]
def ord_27‹› : char -> int :=
  fun ord_6006 : char -> int
  | c_6008 => (__ord__ c_6008)

#[program]
def chr_28‹› : int -> char :=
  fun chr_6010 : int -> char
  | i_6012 => (__chr__ i_6012)

#[program]
def str_29‹› : char -> string :=
  fun str_6014 : char -> string
  | c_6016 => (__push__ "" c_6016)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_6018 : string -> int
  | s_6020 => (__size__ s_6020)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_6022 : int -> string
  | i_6024 =>
    let aux_6025 :=
      fun aux_6026 : int -> string
      | i_6028 =>
        match (__lte__ 10 i_6028) in bool_4 -o string with
        | true_4 =>
          let r_6030 := (__mod__ i_6028 10) in
          let i_6031 := (__div__ i_6028 10) in
          (__push__ ((aux_6026) i_6031)
            ((chr_28) (__add__ r_6030 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_6028 ((ord_27) 0))))
    in
    match (__lt__ 0 i_6024) in bool_4 -o string with
    | true_4 => ((aux_6025) i_6024)
    | false_5 => (__cat__ "~" ((aux_6025) (__neg__ i_6024)))

#[logical]
def test_32‹› :
  (eq_1‹U› string ((string_of_int_31) (__neg__ 10)) "~10")
:= (refl_1‹U› string ((string_of_int_31) -10))

#[program]
def split_33‹t_6033› :
  (list_6‹U,t_6033› int) ->
    ((prod1_24‹t_6033,t_6033›)
      (list_6‹U,t_6033› int) (list_6‹U,t_6033› int))
:=
  fun split_6035 :
    (list_6‹U,t_6033› int) ->
      ((prod1_24‹t_6033,t_6033›)
        (list_6‹U,t_6033› int) (list_6‹U,t_6033› int))
  | nil_8 =>
    (ex1_11‹t_6033,t_6033›
      (list_6‹U,t_6033› int)
      fun _6037 : (list_6‹U,t_6033› int) -> Type‹t_6033›
      | __6039 => (list_6‹U,t_6033› int) (nil_8‹U,t_6033› int)
      (nil_8‹U,t_6033› int))
  | (cons_9 hd_6040 nil_8) =>
    (ex1_11‹t_6033,t_6033›
      (list_6‹U,t_6033› int)
      fun _6041 : (list_6‹U,t_6033› int) -> Type‹t_6033›
      | __6043 => (list_6‹U,t_6033› int)
      (cons_9‹U,t_6033› int hd_6040 (nil_8‹U,t_6033› int))
      (nil_8‹U,t_6033› int))
  | (cons_9 hd_6044 (cons_9 hd_6045 tl_6046)) =>
    match ((split_6035) tl_6046) in
      ((prod1_24‹t_6033,t_6033›)
        (list_6‹U,t_6033› int) (list_6‹U,t_6033› int)) -o
        ((prod1_24‹t_6033,t_6033›)
          (list_6‹U,t_6033› int) (list_6‹U,t_6033› int))
    with
    | (ex1_11 m_6048 n_6049) =>
      (ex1_11‹t_6033,t_6033›
        (list_6‹U,t_6033› int)
        fun _6050 : (list_6‹U,t_6033› int) -> Type‹t_6033›
        | __6052 => (list_6‹U,t_6033› int)
        (cons_9‹U,t_6033› int hd_6044 m_6048)
        (cons_9‹U,t_6033› int hd_6045 n_6049))

#[program]
def merge_34‹t_6053› :
  (list_6‹U,t_6053› int) ->
    (list_6‹U,t_6053› int) -o (list_6‹U,t_6053› int)
:=
  fun merge_6056 :
    (list_6‹U,t_6053› int) ->
      (list_6‹U,t_6053› int) -o (list_6‹U,t_6053› int)
  | nil_8 __6059 => __6059
  | (cons_9 hd_6060 tl_6061) nil_8 =>
    (cons_9‹U,t_6053› int hd_6060 tl_6061)
  | (cons_9 hd_6062 tl_6063) (cons_9 hd_6064 tl_6065) =>
    match (__lte__ hd_6062 hd_6064) in bool_4 -o (list_6‹U,t_6053› int)
    with
    | true_4 =>
      (cons_9‹U,t_6053›
        int hd_6062
        ((merge_6056) tl_6063 (cons_9‹U,t_6053› int hd_6064 tl_6065)))
    | false_5 =>
      (cons_9‹U,t_6053›
        int hd_6064
        ((merge_6056) (cons_9‹U,t_6053› int hd_6062 tl_6063) tl_6065))

#[program]
def msort_35‹t_6067› :
  (list_6‹U,t_6067› int) -> (list_6‹U,t_6067› int)
:=
  fun msort_6069 : (list_6‹U,t_6067› int) -> (list_6‹U,t_6067› int)
  | nil_8 => (nil_8‹U,t_6067› int)
  | (cons_9 hd_6071 nil_8) =>
    (cons_9‹U,t_6067› int hd_6071 (nil_8‹U,t_6067› int))
  | (cons_9 hd_6072 (cons_9 hd_6073 tl_6074)) =>
    match ((split_33‹t_6067›)
            (cons_9‹U,t_6067›
              int hd_6072 (cons_9‹U,t_6067› int hd_6073 tl_6074))) in
      ((prod1_24‹t_6067,t_6067›)
        (list_6‹U,t_6067› int) (list_6‹U,t_6067› int)) -o
        (list_6‹U,t_6067› int)
    with
    | (ex1_11 m_6076 n_6077) =>
      ((merge_34‹t_6067›) ((msort_6069) m_6076) ((msort_6069) n_6077))

-----------------------------------------

#[program]
def idU_37 := fun id_9920 (A_9921) -> (m_9922) ->
                m_9922

#[program]
def idL_36 := fun id_9923 (A_9924) -> (m_9925) ->
                m_9925

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_41 :=
  fun rwl_9926 {A_9927} -> {m_9928} -> {n_9929} -> {B_9930} -> {__9931} ->
  (__9932) ->
    match {NULL} with
    | reflU_13  => __9932
    end

#[program]
def rwlUL_40 :=
  fun rwl_9933 {A_9934} -> {m_9935} -> {n_9936} -> {B_9937} -> {__9938} ->
  (__9939) ->
    match {NULL} with
    | reflU_13  => __9939
    end

#[program]
def rwlLU_39 :=
  fun rwl_9940 {A_9941} -> {m_9942} -> {n_9943} -> {B_9944} -> {__9945} ->
  (__9946) ->
    match {NULL} with
    | reflL_12  => __9946
    end

#[program]
def rwlLL_38 :=
  fun rwl_9947 {A_9948} -> {m_9949} -> {n_9950} -> {B_9951} -> {__9952} ->
  (__9953) ->
    match {NULL} with
    | reflL_12  => __9953
    end

#[program]
def rwrUU_45 :=
  fun rwr_9954 {A_9955} -> {m_9956} -> {n_9957} -> {B_9958} -> {__9959} ->
  (__9960) ->
    match {NULL} with
    | reflU_13  => __9960
    end

#[program]
def rwrUL_44 :=
  fun rwr_9961 {A_9962} -> {m_9963} -> {n_9964} -> {B_9965} -> {__9966} ->
  (__9967) ->
    match {NULL} with
    | reflU_13  => __9967
    end

#[program]
def rwrLU_43 :=
  fun rwr_9968 {A_9969} -> {m_9970} -> {n_9971} -> {B_9972} -> {__9973} ->
  (__9974) ->
    match {NULL} with
    | reflL_12  => __9974
    end

#[program]
def rwrLL_42 :=
  fun rwr_9975 {A_9976} -> {m_9977} -> {n_9978} -> {B_9979} -> {__9980} ->
  (__9981) ->
    match {NULL} with
    | reflL_12  => __9981
    end

#[logical]
def congrUUU_53 := NULL

#[logical]
def congrUUL_52 := NULL

#[logical]
def congrULU_51 := NULL

#[logical]
def congrULL_50 := NULL

#[logical]
def congrLUU_49 := NULL

#[logical]
def congrLUL_48 := NULL

#[logical]
def congrLLU_47 := NULL

#[logical]
def congrLLL_46 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_55 := NULL

#[logical]
def ssingL_54 := NULL

#[program]
def sing_elimUU_59 :=
  fun sing_elim_9982 {A_9983} -> {x_9984} -> (__9985) ->
    match __9985 with
    | justUU_17 m_9986 => m_9986
    end

#[program]
def sing_elimUL_58 :=
  fun sing_elim_9987 {A_9988} -> {x_9989} -> (__9990) ->
    match __9990 with
    | justUL_16 m_9991 => m_9991
    end

#[program]
def sing_elimLU_57 :=
  fun sing_elim_9992 {A_9993} -> {x_9994} -> (__9995) ->
    match __9995 with
    
    end

#[program]
def sing_elimLL_56 :=
  fun sing_elim_9996 {A_9997} -> {x_9998} -> (__9999) ->
    match __9999 with
    | justLL_14 m_10000 => m_10000
    end

#[logical]
def sing_uniqUU_63 := NULL

#[logical]
def sing_uniqUL_62 := NULL

#[logical]
def sing_uniqLU_61 := NULL

#[logical]
def sing_uniqLL_60 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_10001 (__10002) ->
    match __10002 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_10003 (__10004) -> (__10005) ->
    match __10004 with
    | true_4  =>
      match __10005 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_10006 (__10007) -> (__10008) ->
    match __10007 with
    | true_4  => true_4
    | false_5  =>
      match __10008 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_10009 (__10010) -> (__10011) -o
    match __10010 with
    | true_4  =>
      match __10011 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __10011 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_10012 (__10013) -> (__10014) ->
    match __10013 with
    | zero_6  => true_4
    | succ_7 n_10015 =>
      match __10014 with
      | zero_6  => false_5 | succ_7 n_10016 => ((lte_10012) n_10015 n_10016)
      end
    end

#[program]
def lt_15 :=
  fun lt_10017 (x_10018) -> (y_10019) ->
    ((lte_14) (succ_7 x_10018) y_10019)

#[program]
def pred_16 :=
  fun pred_10020 (__10021) ->
    match __10021 with
    | zero_6  => zero_6 | succ_7 n_10022 => n_10022
    end

#[program]
def add_17 :=
  fun add_10023 (__10024) -> (__10025) ->
    match __10024 with
    | zero_6  => __10025
    | succ_7 n_10026 => (succ_7 ((add_10023) n_10026 __10025))
    end

#[program]
def sub_18 :=
  fun sub_10027 (__10028) -> (__10029) ->
    match __10029 with
    | zero_6  => __10028
    | succ_7 n_10030 => ((sub_10027) ((pred_16) __10028) n_10030)
    end

#[program]
def mul_19 :=
  fun mul_10031 (__10032) -> (__10033) ->
    match __10032 with
    | zero_6  => zero_6
    | succ_7 n_10034 => ((add_17) __10033 ((mul_10031) n_10034 __10033))
    end

#[program]
def div_20 :=
  fun div_10035 (x_10036) -> (y_10037) ->
    match ((lt_15) x_10036 y_10037) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10038 :=
        fun loop_10039 (x_10040) -> (y_10041) ->
          match ((sub_18) x_10040 ((pred_16) y_10041)) with
          | zero_6  => zero_6
          | succ_7 n_10042 => (succ_7 ((loop_10039) n_10042 y_10041))
          end
      in ((loop_10038) x_10036 y_10037)
    end

#[program]
def rem_21 :=
  fun rem_10043 (x_10044) -> (y_10045) ->
    ((sub_18) x_10044 ((mul_19) ((div_20) x_10044 y_10045) y_10045))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_67 :=
  fun free_list_10046 {A_10047} -> (f_10048) -> (__10049) ->
    match __10049 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10050 tl_10051 =>
      let __10052 := ((f_10048) hd_10050) in
      ((free_list_10046) NULL f_10048 tl_10051)
    end

#[program]
def free_listUL_66 :=
  fun free_list_10053 {A_10054} -> (f_10055) -> (__10056) ->
    match __10056 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10057 tl_10058 =>
      let __10059 := ((f_10055) hd_10057) in
      ((free_list_10053) NULL f_10055 tl_10058)
    end

#[program]
def free_listLL_64 :=
  fun free_list_10060 {A_10061} -> (f_10062) -> (__10063) ->
    match __10063 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10064 tl_10065 =>
      let __10066 := ((f_10062) hd_10064) in
      ((free_list_10060) NULL f_10062 tl_10065)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_71 := NULL

#[logical]
def prod0UL_70 := NULL

#[logical]
def prod0LU_69 := NULL

#[logical]
def prod0LL_68 := NULL

#[logical]
def prod1UU_75 := NULL

#[logical]
def prod1UL_74 := NULL

#[logical]
def prod1LU_73 := NULL

#[logical]
def prod1LL_72 := NULL

#[program]
def pow_25 :=
  fun pow_10067 (x_10068) -> (y_10069) ->
    let loop_10070 :=
      fun loop_10071 (acc_10072) -> (y_10073) ->
        match (__lte__ y_10073 0) with
        | true_4  => acc_10072
        | false_5  =>
          ((loop_10071) (__mul__ x_10068 acc_10072) (__sub__ y_10073 1))
        end
    in ((loop_10070) 1 y_10069)

#[program]
def powm_26 :=
  fun powm_10074 (x_10075) -> (y_10076) -> (m_10077) ->
    let loop_10078 :=
      fun loop_10079 (acc_10080) -> (y_10081) ->
        match (__lte__ y_10081 0) with
        | true_4  => acc_10080
        | false_5  =>
          ((loop_10079)
            (__mod__ (__mul__ x_10075 acc_10080) m_10077) (__sub__ y_10081 1))
        end
    in ((loop_10078) 1 y_10076)

#[program]
def ord_27 := fun ord_10082 (c_10083) ->
                (__ord__ c_10083)

#[program]
def chr_28 := fun chr_10084 (i_10085) ->
                (__chr__ i_10085)

#[program]
def str_29 := fun str_10086 (c_10087) ->
                (__push__ "" c_10087)

#[program]
def strlen_30 := fun strlen_10088 (s_10089) ->
                   (__size__ s_10089)

#[program]
def string_of_int_31 :=
  fun string_of_int_10090 (i_10091) ->
    let aux_10092 :=
      fun aux_10093 (i_10094) ->
        match (__lte__ 10 i_10094) with
        | true_4  =>
          let r_10095 := (__mod__ i_10094 10) in
          let i_10096 := (__div__ i_10094 10) in
          (__push__ ((aux_10093) i_10096)
            ((chr_28) (__add__ r_10095 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_10094 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10091) with
    | true_4  => ((aux_10092) i_10091)
    | false_5  => (__cat__ "~" ((aux_10092) (__neg__ i_10091)))
    end

#[logical]
def test_32 := NULL

#[program]
def splitU_77 :=
  fun split_10097 (__10098) ->
    match __10098 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_10099 tl_10100 =>
      match tl_10100 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10099 nilUU_24) nilUU_24)
      | consUU_25 hd_10101 tl_10102 =>
        match ((split_10097) tl_10102) with
        | ex1UU_33 m_10103 n_10104 =>
          (ex1UU_33
            (consUU_25 hd_10099 m_10103) (consUU_25 hd_10101 n_10104))
        end
      end
    end

#[program]
def splitL_76 :=
  fun split_10105 (__10106) ->
    match __10106 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_10107 tl_10108 =>
      match tl_10108 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10107 nilUL_22) nilUL_22)
      | consUL_23 hd_10109 tl_10110 =>
        match ((split_10105) tl_10110) with
        | ex1LL_30 m_10111 n_10112 =>
          (ex1LL_30
            (consUL_23 hd_10107 m_10111) (consUL_23 hd_10109 n_10112))
        end
      end
    end

#[program]
def mergeU_79 :=
  fun merge_10113 (__10114) -> (__10115) -o
    match __10114 with
    | nilUU_24  => __10115
    | consUU_25 hd_10116 tl_10117 =>
      match __10115 with
      | nilUU_24  => (consUU_25 hd_10116 tl_10117)
      | consUU_25 hd_10118 tl_10119 =>
        match (__lte__ hd_10116 hd_10118) with
        | true_4  =>
          (consUU_25
            hd_10116 ((merge_10113) tl_10117 (consUU_25 hd_10118 tl_10119)))
        | false_5  =>
          (consUU_25
            hd_10118 ((merge_10113) (consUU_25 hd_10116 tl_10117) tl_10119))
        end
      end
    end

#[program]
def mergeL_78 :=
  fun merge_10120 (__10121) -> (__10122) -o
    match __10121 with
    | nilUL_22  => __10122
    | consUL_23 hd_10123 tl_10124 =>
      match __10122 with
      | nilUL_22  => (consUL_23 hd_10123 tl_10124)
      | consUL_23 hd_10125 tl_10126 =>
        match (__lte__ hd_10123 hd_10125) with
        | true_4  =>
          (consUL_23
            hd_10123 ((merge_10120) tl_10124 (consUL_23 hd_10125 tl_10126)))
        | false_5  =>
          (consUL_23
            hd_10125 ((merge_10120) (consUL_23 hd_10123 tl_10124) tl_10126))
        end
      end
    end

#[program]
def msortU_81 :=
  fun msort_10127 (__10128) ->
    match __10128 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_10129 tl_10130 =>
      match tl_10130 with
      | nilUU_24  => (consUU_25 hd_10129 nilUU_24)
      | consUU_25 hd_10131 tl_10132 =>
        match ((splitU_77)
                (consUU_25 hd_10129 (consUU_25 hd_10131 tl_10132))) with
        | ex1UU_33 m_10133 n_10134 =>
          ((mergeU_79) ((msort_10127) m_10133) ((msort_10127) n_10134))
        end
      end
    end

#[program]
def msortL_80 :=
  fun msort_10135 (__10136) ->
    match __10136 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_10137 tl_10138 =>
      match tl_10138 with
      | nilUL_22  => (consUL_23 hd_10137 nilUL_22)
      | consUL_23 hd_10139 tl_10140 =>
        match ((splitL_76)
                (consUL_23 hd_10137 (consUL_23 hd_10139 tl_10140))) with
        | ex1LL_30 m_10141 n_10142 =>
          ((mergeL_78) ((msort_10135) m_10141) ((msort_10135) n_10142))
        end
      end
    end

-----------------------------------------

#[program]
def idU_37 := fun id_10366 (A_10367) -> (m_10368) ->
                m_10368

#[program]
def idL_36 := fun id_10369 (A_10370) -> (m_10371) ->
                m_10371

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_41 :=
  fun rwl_10372 {A_10373} -> {m_10374} -> {n_10375} -> {B_10376} ->
  {__10377} -> (__10378) ->
    __10378

#[program]
def rwlUL_40 :=
  fun rwl_10379 {A_10380} -> {m_10381} -> {n_10382} -> {B_10383} ->
  {__10384} -> (__10385) ->
    __10385

#[program]
def rwlLU_39 :=
  fun rwl_10386 {A_10387} -> {m_10388} -> {n_10389} -> {B_10390} ->
  {__10391} -> (__10392) ->
    __10392

#[program]
def rwlLL_38 :=
  fun rwl_10393 {A_10394} -> {m_10395} -> {n_10396} -> {B_10397} ->
  {__10398} -> (__10399) ->
    __10399

#[program]
def rwrUU_45 :=
  fun rwr_10400 {A_10401} -> {m_10402} -> {n_10403} -> {B_10404} ->
  {__10405} -> (__10406) ->
    __10406

#[program]
def rwrUL_44 :=
  fun rwr_10407 {A_10408} -> {m_10409} -> {n_10410} -> {B_10411} ->
  {__10412} -> (__10413) ->
    __10413

#[program]
def rwrLU_43 :=
  fun rwr_10414 {A_10415} -> {m_10416} -> {n_10417} -> {B_10418} ->
  {__10419} -> (__10420) ->
    __10420

#[program]
def rwrLL_42 :=
  fun rwr_10421 {A_10422} -> {m_10423} -> {n_10424} -> {B_10425} ->
  {__10426} -> (__10427) ->
    __10427

#[logical]
def congrUUU_53 := NULL

#[logical]
def congrUUL_52 := NULL

#[logical]
def congrULU_51 := NULL

#[logical]
def congrULL_50 := NULL

#[logical]
def congrLUU_49 := NULL

#[logical]
def congrLUL_48 := NULL

#[logical]
def congrLLU_47 := NULL

#[logical]
def congrLLL_46 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_55 := NULL

#[logical]
def ssingL_54 := NULL

#[program]
def sing_elimUU_59 :=
  fun sing_elim_10428 {A_10429} -> {x_10430} -> (__10431) ->
    match __10431 with
    | justUU_17 m_10432 => m_10432
    end

#[program]
def sing_elimUL_58 :=
  fun sing_elim_10433 {A_10434} -> {x_10435} -> (__10436) ->
    match __10436 with
    | justUL_16 m_10437 => m_10437
    end

#[program]
def sing_elimLU_57 :=
  fun sing_elim_10438 {A_10439} -> {x_10440} -> (__10441) ->
    !!

#[program]
def sing_elimLL_56 :=
  fun sing_elim_10442 {A_10443} -> {x_10444} -> (__10445) ->
    match __10445 with
    | justLL_14 m_10446 => m_10446
    end

#[logical]
def sing_uniqUU_63 := NULL

#[logical]
def sing_uniqUL_62 := NULL

#[logical]
def sing_uniqLU_61 := NULL

#[logical]
def sing_uniqLL_60 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_10447 (__10448) ->
    match __10448 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_10449 (__10450) -> (__10451) ->
    match __10450 with
    | true_4  =>
      match __10451 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_10452 (__10453) -> (__10454) ->
    match __10453 with
    | true_4  => true_4
    | false_5  =>
      match __10454 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_10455 (__10456) -> (__10457) -o
    match __10456 with
    | true_4  =>
      match __10457 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __10457 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_10458 (__10459) -> (__10460) ->
    match __10459 with
    | zero_6  => true_4
    | succ_7 n_10461 =>
      match __10460 with
      | zero_6  => false_5 | succ_7 n_10462 => ((lte_10458) n_10461 n_10462)
      end
    end

#[program]
def lt_15 :=
  fun lt_10463 (x_10464) -> (y_10465) ->
    ((lte_14) (succ_7 x_10464) y_10465)

#[program]
def pred_16 :=
  fun pred_10466 (__10467) ->
    match __10467 with
    | zero_6  => zero_6 | succ_7 n_10468 => n_10468
    end

#[program]
def add_17 :=
  fun add_10469 (__10470) -> (__10471) ->
    match __10470 with
    | zero_6  => __10471
    | succ_7 n_10472 => (succ_7 ((add_10469) n_10472 __10471))
    end

#[program]
def sub_18 :=
  fun sub_10473 (__10474) -> (__10475) ->
    match __10475 with
    | zero_6  => __10474
    | succ_7 n_10476 => ((sub_10473) ((pred_16) __10474) n_10476)
    end

#[program]
def mul_19 :=
  fun mul_10477 (__10478) -> (__10479) ->
    match __10478 with
    | zero_6  => zero_6
    | succ_7 n_10480 => ((add_17) __10479 ((mul_10477) n_10480 __10479))
    end

#[program]
def div_20 :=
  fun div_10481 (x_10482) -> (y_10483) ->
    match ((lt_15) x_10482 y_10483) with
    | true_4  => zero_6
    | false_5  =>
      let loop_10484 :=
        fun loop_10485 (x_10486) -> (y_10487) ->
          match ((sub_18) x_10486 ((pred_16) y_10487)) with
          | zero_6  => zero_6
          | succ_7 n_10488 => (succ_7 ((loop_10485) n_10488 y_10487))
          end
      in ((loop_10484) x_10482 y_10483)
    end

#[program]
def rem_21 :=
  fun rem_10489 (x_10490) -> (y_10491) ->
    ((sub_18) x_10490 ((mul_19) ((div_20) x_10490 y_10491) y_10491))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_67 :=
  fun free_list_10492 {A_10493} -> (f_10494) -> (__10495) ->
    match __10495 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10496 tl_10497 =>
      let __10498 := ((f_10494) hd_10496) in
      ((free_list_10492) NULL f_10494 tl_10497)
    end

#[program]
def free_listUL_66 :=
  fun free_list_10499 {A_10500} -> (f_10501) -> (__10502) ->
    match __10502 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10503 tl_10504 =>
      let __10505 := ((f_10501) hd_10503) in
      ((free_list_10499) NULL f_10501 tl_10504)
    end

#[program]
def free_listLL_64 :=
  fun free_list_10506 {A_10507} -> (f_10508) -> (__10509) ->
    match __10509 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10510 tl_10511 =>
      let __10512 := ((f_10508) hd_10510) in
      ((free_list_10506) NULL f_10508 tl_10511)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_71 := NULL

#[logical]
def prod0UL_70 := NULL

#[logical]
def prod0LU_69 := NULL

#[logical]
def prod0LL_68 := NULL

#[logical]
def prod1UU_75 := NULL

#[logical]
def prod1UL_74 := NULL

#[logical]
def prod1LU_73 := NULL

#[logical]
def prod1LL_72 := NULL

#[program]
def pow_25 :=
  fun pow_10513 (x_10514) -> (y_10515) ->
    let loop_10516 :=
      fun loop_10517 (acc_10518) -> (y_10519) ->
        match (__lte__ y_10519 0) with
        | true_4  => acc_10518
        | false_5  =>
          ((loop_10517) (__mul__ x_10514 acc_10518) (__sub__ y_10519 1))
        end
    in ((loop_10516) 1 y_10515)

#[program]
def powm_26 :=
  fun powm_10520 (x_10521) -> (y_10522) -> (m_10523) ->
    let loop_10524 :=
      fun loop_10525 (acc_10526) -> (y_10527) ->
        match (__lte__ y_10527 0) with
        | true_4  => acc_10526
        | false_5  =>
          ((loop_10525)
            (__mod__ (__mul__ x_10521 acc_10526) m_10523) (__sub__ y_10527 1))
        end
    in ((loop_10524) 1 y_10522)

#[program]
def ord_27 := fun ord_10528 (c_10529) ->
                (__ord__ c_10529)

#[program]
def chr_28 := fun chr_10530 (i_10531) ->
                (__chr__ i_10531)

#[program]
def str_29 := fun str_10532 (c_10533) ->
                (__push__ "" c_10533)

#[program]
def strlen_30 := fun strlen_10534 (s_10535) ->
                   (__size__ s_10535)

#[program]
def string_of_int_31 :=
  fun string_of_int_10536 (i_10537) ->
    let aux_10538 :=
      fun aux_10539 (i_10540) ->
        match (__lte__ 10 i_10540) with
        | true_4  =>
          let r_10541 := (__mod__ i_10540 10) in
          let i_10542 := (__div__ i_10540 10) in
          (__push__ ((aux_10539) i_10542)
            ((chr_28) (__add__ r_10541 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_10540 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10537) with
    | true_4  => ((aux_10538) i_10537)
    | false_5  => (__cat__ "~" ((aux_10538) (__neg__ i_10537)))
    end

#[logical]
def test_32 := NULL

#[program]
def splitU_77 :=
  fun split_10543 (__10544) ->
    match __10544 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_10545 tl_10546 =>
      match tl_10546 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10545 nilUU_24) nilUU_24)
      | consUU_25 hd_10547 tl_10548 =>
        match ((split_10543) tl_10548) with
        | ex1UU_33 m_10549 n_10550 =>
          (ex1UU_33
            (consUU_25 hd_10545 m_10549) (consUU_25 hd_10547 n_10550))
        end
      end
    end

#[program]
def splitL_76 :=
  fun split_10551 (__10552) ->
    match __10552 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_10553 tl_10554 =>
      match tl_10554 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10553 nilUL_22) nilUL_22)
      | consUL_23 hd_10555 tl_10556 =>
        match ((split_10551) tl_10556) with
        | ex1LL_30 m_10557 n_10558 =>
          (ex1LL_30
            (consUL_23 hd_10553 m_10557) (consUL_23 hd_10555 n_10558))
        end
      end
    end

#[program]
def mergeU_79 :=
  fun merge_10559 (__10560) -> (__10561) -o
    match __10560 with
    | nilUU_24  => __10561
    | consUU_25 hd_10562 tl_10563 =>
      match __10561 with
      | nilUU_24  => (consUU_25 hd_10562 tl_10563)
      | consUU_25 hd_10564 tl_10565 =>
        match (__lte__ hd_10562 hd_10564) with
        | true_4  =>
          (consUU_25
            hd_10562 ((merge_10559) tl_10563 (consUU_25 hd_10564 tl_10565)))
        | false_5  =>
          (consUU_25
            hd_10564 ((merge_10559) (consUU_25 hd_10562 tl_10563) tl_10565))
        end
      end
    end

#[program]
def mergeL_78 :=
  fun merge_10566 (__10567) -> (__10568) -o
    match __10567 with
    | nilUL_22  => __10568
    | consUL_23 hd_10569 tl_10570 =>
      match __10568 with
      | nilUL_22  => (consUL_23 hd_10569 tl_10570)
      | consUL_23 hd_10571 tl_10572 =>
        match (__lte__ hd_10569 hd_10571) with
        | true_4  =>
          (consUL_23
            hd_10569 ((merge_10566) tl_10570 (consUL_23 hd_10571 tl_10572)))
        | false_5  =>
          (consUL_23
            hd_10571 ((merge_10566) (consUL_23 hd_10569 tl_10570) tl_10572))
        end
      end
    end

#[program]
def msortU_81 :=
  fun msort_10573 (__10574) ->
    match __10574 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_10575 tl_10576 =>
      match tl_10576 with
      | nilUU_24  => (consUU_25 hd_10575 nilUU_24)
      | consUU_25 hd_10577 tl_10578 =>
        match ((splitU_77)
                (consUU_25 hd_10575 (consUU_25 hd_10577 tl_10578))) with
        | ex1UU_33 m_10579 n_10580 =>
          ((mergeU_79) ((msort_10573) m_10579) ((msort_10573) n_10580))
        end
      end
    end

#[program]
def msortL_80 :=
  fun msort_10581 (__10582) ->
    match __10582 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_10583 tl_10584 =>
      match tl_10584 with
      | nilUL_22  => (consUL_23 hd_10583 nilUL_22)
      | consUL_23 hd_10585 tl_10586 =>
        match ((splitL_76)
                (consUL_23 hd_10583 (consUL_23 hd_10585 tl_10586))) with
        | ex1LL_30 m_10587 n_10588 =>
          ((mergeL_78) ((msort_10581) m_10587) ((msort_10581) n_10588))
        end
      end
    end

-----------------------------------------

def idU_37 := fun id_10812 (A_10813) -> (m_10814) -> m_10814

def idL_36 := fun id_10815 (A_10816) -> (m_10817) -> m_10817

def rwlUU_41 :=
  fun rwl_10818 (A_10819) -> (m_10820) -> (n_10821) -> (B_10822) ->
  (__10823) -> (__10824) -> __10824

def rwlUL_40 :=
  fun rwl_10825 (A_10826) -> (m_10827) -> (n_10828) -> (B_10829) ->
  (__10830) -> (__10831) -> __10831

def rwlLU_39 :=
  fun rwl_10832 (A_10833) -> (m_10834) -> (n_10835) -> (B_10836) ->
  (__10837) -> (__10838) -> __10838

def rwlLL_38 :=
  fun rwl_10839 (A_10840) -> (m_10841) -> (n_10842) -> (B_10843) ->
  (__10844) -> (__10845) -> __10845

def rwrUU_45 :=
  fun rwr_10846 (A_10847) -> (m_10848) -> (n_10849) -> (B_10850) ->
  (__10851) -> (__10852) -> __10852

def rwrUL_44 :=
  fun rwr_10853 (A_10854) -> (m_10855) -> (n_10856) -> (B_10857) ->
  (__10858) -> (__10859) -> __10859

def rwrLU_43 :=
  fun rwr_10860 (A_10861) -> (m_10862) -> (n_10863) -> (B_10864) ->
  (__10865) -> (__10866) -> __10866

def rwrLL_42 :=
  fun rwr_10867 (A_10868) -> (m_10869) -> (n_10870) -> (B_10871) ->
  (__10872) -> (__10873) -> __10873

def sing_elimUU_59 :=
  fun sing_elim_10874 (A_10875) -> (x_10876) -> (__10877) -> __10877

def sing_elimUL_58 :=
  fun sing_elim_10878 (A_10879) -> (x_10880) -> (__10881) -> __10881

def sing_elimLU_57 :=
  fun sing_elim_10882 (A_10883) -> (x_10884) -> (__10885) -> !!

def sing_elimLL_56 :=
  fun sing_elim_10886 (A_10887) -> (x_10888) -> (__10889) -> __10889

def not_10 :=
  fun not_10890 (__10891) ->
    match __10891 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_10892 (__10893) -> (__10894) ->
    match __10893 with
    | true_4 =>
      match __10894 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_10895 (__10896) -> (__10897) ->
    match __10896 with
    | true_4 => true_4
    | false_5 =>
      match __10897 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_10898 (__10899) -> (__10900) -o
    match __10899 with
    | true_4 =>
      match __10900 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __10900 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_10901 (__10902) -> (__10903) ->
    match __10902 with
    | zero_6  => true_4
    | succ_7 n_10904 =>
      match __10903 with
      | zero_6  => false_5 | succ_7 n_10905 => ((lte_10901) n_10904 n_10905)
      end
    end

def lt_15 :=
  fun lt_10906 (x_10907) -> (y_10908) -> ((lte_14) (succ_7 x_10907) y_10908)

def pred_16 :=
  fun pred_10909 (__10910) ->
    match __10910 with
    | zero_6  => (zero_6 ) | succ_7 n_10911 => n_10911
    end

def add_17 :=
  fun add_10912 (__10913) -> (__10914) ->
    match __10913 with
    | zero_6  => __10914
    | succ_7 n_10915 => (succ_7 ((add_10912) n_10915 __10914))
    end

def sub_18 :=
  fun sub_10916 (__10917) -> (__10918) ->
    match __10918 with
    | zero_6  => __10917
    | succ_7 n_10919 => ((sub_10916) ((pred_16) __10917) n_10919)
    end

def mul_19 :=
  fun mul_10920 (__10921) -> (__10922) ->
    match __10921 with
    | zero_6  => (zero_6 )
    | succ_7 n_10923 => ((add_17) __10922 ((mul_10920) n_10923 __10922))
    end

def div_20 :=
  fun div_10924 (x_10925) -> (y_10926) ->
    match ((lt_15) x_10925 y_10926) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_10927 :=
        fun loop_10928 (x_10929) -> (y_10930) ->
          match ((sub_18) x_10929 ((pred_16) y_10930)) with
          | zero_6  => (zero_6 )
          | succ_7 n_10931 => (succ_7 ((loop_10928) n_10931 y_10930))
          end
      in ((loop_10927) x_10925 y_10926)
    end

def rem_21 :=
  fun rem_10932 (x_10933) -> (y_10934) ->
    ((sub_18) x_10933 ((mul_19) ((div_20) x_10933 y_10934) y_10934))

def free_listUU_67 :=
  fun free_list_10935 (A_10936) -> (f_10937) -> (__10938) ->
    match __10938 with
    | nilUU_24  => tt_3
    | consUU_25 hd_10939 tl_10940 =>
      let __10941 := ((f_10937) hd_10939) in
      ((free_list_10935) NULL f_10937 tl_10940)
    end

def free_listUL_66 :=
  fun free_list_10942 (A_10943) -> (f_10944) -> (__10945) ->
    match __10945 with
    | nilUL_22  => tt_3
    | consUL_23 hd_10946 tl_10947 =>
      let __10948 := ((f_10944) hd_10946) in
      ((free_list_10942) NULL f_10944 tl_10947)
    end

def free_listLL_64 :=
  fun free_list_10949 (A_10950) -> (f_10951) -> (__10952) ->
    match __10952 with
    | nilLL_18  => tt_3
    | consLL_19 hd_10953 tl_10954 =>
      let __10955 := ((f_10951) hd_10953) in
      ((free_list_10949) NULL f_10951 tl_10954)
    end

def pow_25 :=
  fun pow_10956 (x_10957) -> (y_10958) ->
    let loop_10959 :=
      fun loop_10960 (acc_10961) -> (y_10962) ->
        match (__lte__ y_10962 0) with
        | true_4 => acc_10961
        | false_5 =>
          ((loop_10960) (__mul__ x_10957 acc_10961) (__sub__ y_10962 1))
        end
    in ((loop_10959) 1 y_10958)

def powm_26 :=
  fun powm_10963 (x_10964) -> (y_10965) -> (m_10966) ->
    let loop_10967 :=
      fun loop_10968 (acc_10969) -> (y_10970) ->
        match (__lte__ y_10970 0) with
        | true_4 => acc_10969
        | false_5 =>
          ((loop_10968)
            (__mod__ (__mul__ x_10964 acc_10969) m_10966) (__sub__ y_10970 1))
        end
    in ((loop_10967) 1 y_10965)

def ord_27 := fun ord_10971 (c_10972) -> (__ord__ c_10972)

def chr_28 := fun chr_10973 (i_10974) -> (__chr__ i_10974)

def str_29 := fun str_10975 (c_10976) -> (__push__ "" c_10976)

def strlen_30 := fun strlen_10977 (s_10978) -> (__size__ s_10978)

def string_of_int_31 :=
  fun string_of_int_10979 (i_10980) ->
    let aux_10981 :=
      fun aux_10982 (i_10983) ->
        match (__lte__ 10 i_10983) with
        | true_4 =>
          let r_10984 := (__mod__ i_10983 10) in
          let i_10985 := (__div__ i_10983 10) in
          (__push__ ((aux_10982) i_10985)
            ((chr_28) (__add__ r_10984 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_10983 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_10980) with
    | true_4 => ((aux_10981) i_10980)
    | false_5 => (__cat__ "~" ((aux_10981) (__neg__ i_10980)))
    end

def splitU_77 :=
  fun split_10986 (__10987) ->
    match __10987 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_10988 tl_10989 =>
      match tl_10989 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_10988 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_10990 tl_10991 =>
        match ((split_10986) tl_10991) with
        | ex1UU_33 m_10992 n_10993 =>
          (ex1UU_33
            (consUU_25 hd_10988 m_10992) (consUU_25 hd_10990 n_10993))
        end
      end
    end

def splitL_76 :=
  fun split_10994 (__10995) ->
    match __10995 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_10996 tl_10997 =>
      match tl_10997 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_10996 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_10998 tl_10999 =>
        match ((split_10994) tl_10999) with
        | ex1LL_30 m_11000 n_11001 =>
          (ex1LL_30
            (consUL_23 hd_10996 m_11000) (consUL_23 hd_10998 n_11001))
        end
      end
    end

def mergeU_79 :=
  fun merge_11002 (__11003) -> (__11004) -o
    match __11003 with
    | nilUU_24  => __11004
    | consUU_25 hd_11005 tl_11006 =>
      match __11004 with
      | nilUU_24  => (consUU_25 hd_11005 tl_11006)
      | consUU_25 hd_11007 tl_11008 =>
        match (__lte__ hd_11005 hd_11007) with
        | true_4 =>
          (consUU_25
            hd_11005 ((merge_11002) tl_11006 (consUU_25 hd_11007 tl_11008)))
        | false_5 =>
          (consUU_25
            hd_11007 ((merge_11002) (consUU_25 hd_11005 tl_11006) tl_11008))
        end
      end
    end

def mergeL_78 :=
  fun merge_11009 (__11010) -> (__11011) -o
    match __11010 with
    | nilUL_22  => __11011
    | consUL_23 hd_11012 tl_11013 =>
      match __11011 with
      | nilUL_22  => (consUL_23 hd_11012 tl_11013)
      | consUL_23 hd_11014 tl_11015 =>
        match (__lte__ hd_11012 hd_11014) with
        | true_4 =>
          (consUL_23
            hd_11012 ((merge_11009) tl_11013 (consUL_23 hd_11014 tl_11015)))
        | false_5 =>
          (consUL_23
            hd_11014 ((merge_11009) (consUL_23 hd_11012 tl_11013) tl_11015))
        end
      end
    end

def msortU_81 :=
  fun msort_11016 (__11017) ->
    match __11017 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_11018 tl_11019 =>
      match tl_11019 with
      | nilUU_24  => (consUU_25 hd_11018 (nilUU_24 ))
      | consUU_25 hd_11020 tl_11021 =>
        match ((splitU_77)
                (consUU_25 hd_11018 (consUU_25 hd_11020 tl_11021))) with
        | ex1UU_33 m_11022 n_11023 =>
          ((mergeU_79) ((msort_11016) m_11022) ((msort_11016) n_11023))
        end
      end
    end

def msortL_80 :=
  fun msort_11024 (__11025) ->
    match __11025 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_11026 tl_11027 =>
      match tl_11027 with
      | nilUL_22  => (consUL_23 hd_11026 (nilUL_22 ))
      | consUL_23 hd_11028 tl_11029 =>
        match ((splitL_76)
                (consUL_23 hd_11026 (consUL_23 hd_11028 tl_11029))) with
        | ex1LL_30 m_11030 n_11031 =>
          ((mergeL_78) ((msort_11024) m_11030) ((msort_11024) n_11031))
        end
      end
    end

-----------------------------------------

def idU_37 := lam (A_11252) -> (m_11253) -> m_11253

def idL_36 := lam (A_11254) -> (m_11255) -> m_11255

def rwlUU_41 :=
  lam (A_11256) -> (m_11257) -> (n_11258) -> (B_11259) -> (__11260) ->
  (__11261) -> __11261

def rwlUL_40 :=
  lam (A_11262) -> (m_11263) -> (n_11264) -> (B_11265) -> (__11266) ->
  (__11267) -> __11267

def rwlLU_39 :=
  lam (A_11268) -> (m_11269) -> (n_11270) -> (B_11271) -> (__11272) ->
  (__11273) -> __11273

def rwlLL_38 :=
  lam (A_11274) -> (m_11275) -> (n_11276) -> (B_11277) -> (__11278) ->
  (__11279) -> __11279

def rwrUU_45 :=
  lam (A_11280) -> (m_11281) -> (n_11282) -> (B_11283) -> (__11284) ->
  (__11285) -> __11285

def rwrUL_44 :=
  lam (A_11286) -> (m_11287) -> (n_11288) -> (B_11289) -> (__11290) ->
  (__11291) -> __11291

def rwrLU_43 :=
  lam (A_11292) -> (m_11293) -> (n_11294) -> (B_11295) -> (__11296) ->
  (__11297) -> __11297

def rwrLL_42 :=
  lam (A_11298) -> (m_11299) -> (n_11300) -> (B_11301) -> (__11302) ->
  (__11303) -> __11303

def sing_elimUU_59 := lam (A_11304) -> (x_11305) -> (__11306) -> __11306

def sing_elimUL_58 := lam (A_11307) -> (x_11308) -> (__11309) -> __11309

def sing_elimLU_57 := lam (A_11310) -> (x_11311) -> (__11312) -> !!

def sing_elimLL_56 := lam (A_11313) -> (x_11314) -> (__11315) -> __11315

def not_10 :=
  lam (__11316) ->
    match __11316 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__11317) -> (__11318) ->
    match __11317 with
    | true_4 =>
      match __11318 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__11319) -> (__11320) ->
    match __11319 with
    | true_4 => true_4
    | false_5 =>
      match __11320 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__11321) -> (__11322) -o
    match __11321 with
    | true_4 =>
      match __11322 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __11322 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_11323 (__11324) -> (__11325) ->
    match __11324 with
    | zero_6  => true_4
    | succ_7 n_11326 =>
      match __11325 with
      | zero_6  => false_5 | succ_7 n_11327 => ((lte_11323) n_11326 n_11327)
      end
    end

def lt_15 :=
  lam (x_11328) -> (y_11329) -> ((lte_14) (succ_7 x_11328) y_11329)

def pred_16 :=
  lam (__11330) ->
    match __11330 with
    | zero_6  => (zero_6 ) | succ_7 n_11331 => n_11331
    end

def add_17 :=
  fun add_11332 (__11333) -> (__11334) ->
    match __11333 with
    | zero_6  => __11334
    | succ_7 n_11335 => (succ_7 ((add_11332) n_11335 __11334))
    end

def sub_18 :=
  fun sub_11336 (__11337) -> (__11338) ->
    match __11338 with
    | zero_6  => __11337
    | succ_7 n_11339 => ((sub_11336) ((pred_16) __11337) n_11339)
    end

def mul_19 :=
  fun mul_11340 (__11341) -> (__11342) ->
    match __11341 with
    | zero_6  => (zero_6 )
    | succ_7 n_11343 => ((add_17) __11342 ((mul_11340) n_11343 __11342))
    end

def div_20 :=
  lam (x_11344) -> (y_11345) ->
    match ((lt_15) x_11344 y_11345) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_11346 :=
        fun loop_11347 (x_11348) -> (y_11349) ->
          match ((sub_18) x_11348 ((pred_16) y_11349)) with
          | zero_6  => (zero_6 )
          | succ_7 n_11350 => (succ_7 ((loop_11347) n_11350 y_11349))
          end
      in ((loop_11346) x_11344 y_11345)
    end

def rem_21 :=
  lam (x_11351) -> (y_11352) ->
    ((sub_18) x_11351 ((mul_19) ((div_20) x_11351 y_11352) y_11352))

def free_listUU_67 :=
  fun free_list_11353 (A_11354) -> (f_11355) -> (__11356) ->
    match __11356 with
    | nilUU_24  => tt_3
    | consUU_25 hd_11357 tl_11358 =>
      let __11359 := ((f_11355) hd_11357) in
      ((free_list_11353) NULL f_11355 tl_11358)
    end

def free_listUL_66 :=
  fun free_list_11360 (A_11361) -> (f_11362) -> (__11363) ->
    match __11363 with
    | nilUL_22  => tt_3
    | consUL_23 hd_11364 tl_11365 =>
      let __11366 := ((f_11362) hd_11364) in
      ((free_list_11360) NULL f_11362 tl_11365)
    end

def free_listLL_64 :=
  fun free_list_11367 (A_11368) -> (f_11369) -> (__11370) ->
    match __11370 with
    | nilLL_18  => tt_3
    | consLL_19 hd_11371 tl_11372 =>
      let __11373 := ((f_11369) hd_11371) in
      ((free_list_11367) NULL f_11369 tl_11372)
    end

def pow_25 :=
  lam (x_11374) -> (y_11375) ->
    let loop_11376 :=
      fun loop_11377 (acc_11378) -> (y_11379) ->
        match (__lte__ y_11379 0) with
        | true_4 => acc_11378
        | false_5 =>
          ((loop_11377) (__mul__ x_11374 acc_11378) (__sub__ y_11379 1))
        end
    in ((loop_11376) 1 y_11375)

def powm_26 :=
  lam (x_11380) -> (y_11381) -> (m_11382) ->
    let loop_11383 :=
      fun loop_11384 (acc_11385) -> (y_11386) ->
        match (__lte__ y_11386 0) with
        | true_4 => acc_11385
        | false_5 =>
          ((loop_11384)
            (__mod__ (__mul__ x_11380 acc_11385) m_11382) (__sub__ y_11386 1))
        end
    in ((loop_11383) 1 y_11381)

def ord_27 := lam (c_11387) -> (__ord__ c_11387)

def chr_28 := lam (i_11388) -> (__chr__ i_11388)

def str_29 := lam (c_11389) -> (__push__ "" c_11389)

def strlen_30 := lam (s_11390) -> (__size__ s_11390)

def string_of_int_31 :=
  lam (i_11391) ->
    let aux_11392 :=
      fun aux_11393 (i_11394) ->
        match (__lte__ 10 i_11394) with
        | true_4 =>
          let r_11395 := (__mod__ i_11394 10) in
          let i_11396 := (__div__ i_11394 10) in
          (__push__ ((aux_11393) i_11396)
            ((chr_28) (__add__ r_11395 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_11394 ((ord_27) 0))))
        end
    in
    match (__lt__ 0 i_11391) with
    | true_4 => ((aux_11392) i_11391)
    | false_5 => (__cat__ "~" ((aux_11392) (__neg__ i_11391)))
    end

def splitU_77 :=
  fun split_11397 (__11398) ->
    match __11398 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_11399 tl_11400 =>
      match tl_11400 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_11399 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_11401 tl_11402 =>
        match ((split_11397) tl_11402) with
        | ex1UU_33 m_11403 n_11404 =>
          (ex1UU_33
            (consUU_25 hd_11399 m_11403) (consUU_25 hd_11401 n_11404))
        end
      end
    end

def splitL_76 :=
  fun split_11405 (__11406) ->
    match __11406 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_11407 tl_11408 =>
      match tl_11408 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_11407 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_11409 tl_11410 =>
        match ((split_11405) tl_11410) with
        | ex1LL_30 m_11411 n_11412 =>
          (ex1LL_30
            (consUL_23 hd_11407 m_11411) (consUL_23 hd_11409 n_11412))
        end
      end
    end

def mergeU_79 :=
  fun merge_11413 (__11414) -> (__11415) -o
    match __11414 with
    | nilUU_24  => __11415
    | consUU_25 hd_11416 tl_11417 =>
      match __11415 with
      | nilUU_24  => (consUU_25 hd_11416 tl_11417)
      | consUU_25 hd_11418 tl_11419 =>
        match (__lte__ hd_11416 hd_11418) with
        | true_4 =>
          (consUU_25
            hd_11416 ((merge_11413) tl_11417 (consUU_25 hd_11418 tl_11419)))
        | false_5 =>
          (consUU_25
            hd_11418 ((merge_11413) (consUU_25 hd_11416 tl_11417) tl_11419))
        end
      end
    end

def mergeL_78 :=
  fun merge_11420 (__11421) -> (__11422) -o
    match __11421 with
    | nilUL_22  => __11422
    | consUL_23 hd_11423 tl_11424 =>
      match __11422 with
      | nilUL_22  => (consUL_23 hd_11423 tl_11424)
      | consUL_23 hd_11425 tl_11426 =>
        match (__lte__ hd_11423 hd_11425) with
        | true_4 =>
          (consUL_23
            hd_11423 ((merge_11420) tl_11424 (consUL_23 hd_11425 tl_11426)))
        | false_5 =>
          (consUL_23
            hd_11425 ((merge_11420) (consUL_23 hd_11423 tl_11424) tl_11426))
        end
      end
    end

def msortU_81 :=
  fun msort_11427 (__11428) ->
    match __11428 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_11429 tl_11430 =>
      match tl_11430 with
      | nilUU_24  => (consUU_25 hd_11429 (nilUU_24 ))
      | consUU_25 hd_11431 tl_11432 =>
        match ((splitU_77)
                (consUU_25 hd_11429 (consUU_25 hd_11431 tl_11432))) with
        | ex1UU_33 m_11433 n_11434 =>
          ((mergeU_79) ((msort_11427) m_11433) ((msort_11427) n_11434))
        end
      end
    end

def msortL_80 :=
  fun msort_11435 (__11436) ->
    match __11436 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_11437 tl_11438 =>
      match tl_11438 with
      | nilUL_22  => (consUL_23 hd_11437 (nilUL_22 ))
      | consUL_23 hd_11439 tl_11440 =>
        match ((splitL_76)
                (consUL_23 hd_11437 (consUL_23 hd_11439 tl_11440))) with
        | ex1LL_30 m_11441 n_11442 =>
          ((mergeL_78) ((msort_11435) m_11441) ((msort_11435) n_11442))
        end
      end
    end

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_231 := push("", c_230);
  return x_231;
}

fn strlen_232(s_233%U) {
  x_234 := size(s_233);
  return x_234;
}

fn string_of_int_235(i_236%U) {
  x_238 :=
    fn aux_239(i_240%U) {
      x_242 := lte(10, i_240);
      match(x_242){
        true_4() => {
          x_244 := mul(i_240, 10);
          r_243 := x_244;
          x_246 := mul(i_240, 10);
          i_245 := x_246;
          x_248 := aux_239(i_245);
          x_251 := ord_223(0);
          x_250 := add(r_243, x_251);
          x_249 := chr_226(x_250);
          x_247 := push(x_248, x_249);
          x_241 := x_247;
        }
        false_5() => {
          x_255 := ord_223(0);
          x_254 := add(i_240, x_255);
          x_253 := chr_226(x_254);
          x_252 := str_229(x_253);
          x_241 := x_252;
        }
      }
      return x_241;
    };
  aux_237 := x_238;
  x_257 := lt(0, i_236);
  match(x_257){
    true_4() => {
      x_258 := aux_237(i_236);
      x_256 := x_258;
    }
    false_5() => {
      x_261 := neg(i_236);
      x_260 := aux_237(x_261);
      x_259 := cat("~", x_260);
      x_256 := x_259;
    }
  }
  return x_256;
}

fn splitU_262(__263%U) {
  match[U](__263){
    nilUU_24() => {
      x_265 := mkconstr(nilUU_24, []);
      x_266 := mkconstr(nilUU_24, []);
      x_267 := mkconstr(ex1UU_33, [x_265, x_266]);
      x_264 := x_267;
    }
    consUU_25(hd_268, tl_269) => {
      match[U](tl_269){
        nilUU_24() => {
          x_271 := mkconstr(nilUU_24, []);
          x_272 := mkconstr(consUU_25, [hd_268, x_271]);
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(ex1UU_33, [x_272, x_273]);
          x_270 := x_274;
        }
        consUU_25(hd_275, tl_276) => {
          x_278 := splitU_262(tl_276);
          match[L](x_278){
            ex1UU_33(m_279, n_280) => {
              x_281 := mkconstr(consUU_25, [hd_268, m_279]);
              x_282 := mkconstr(consUU_25, [hd_275, n_280]);
              x_283 := mkconstr(ex1UU_33, [x_281, x_282]);
              x_277 := x_283;
            }
          }
          x_270 := x_277;
        }
      }
      x_264 := x_270;
    }
  }
  return x_264;
}

fn splitL_284(__285%U) {
  match[L](__285){
    nilUL_22() => {
      x_287 := mkconstr(nilUL_22, []);
      x_288 := mkconstr(nilUL_22, []);
      x_289 := mkconstr(ex1LL_30, [x_287, x_288]);
      x_286 := x_289;
    }
    consUL_23(hd_290, tl_291) => {
      match[L](tl_291){
        nilUL_22() => {
          x_293 := mkconstr(nilUL_22, []);
          x_294 := mkconstr(consUL_23, [hd_290, x_293]);
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(ex1LL_30, [x_294, x_295]);
          x_292 := x_296;
        }
        consUL_23(hd_297, tl_298) => {
          x_300 := splitL_284(tl_298);
          match[L](x_300){
            ex1LL_30(m_301, n_302) => {
              x_303 := mkconstr(consUL_23, [hd_290, m_301]);
              x_304 := mkconstr(consUL_23, [hd_297, n_302]);
              x_305 := mkconstr(ex1LL_30, [x_303, x_304]);
              x_299 := x_305;
            }
          }
          x_292 := x_299;
        }
      }
      x_286 := x_292;
    }
  }
  return x_286;
}

fn mergeU_306(__307%U, __308%L) {
  match[U](__307){
    nilUU_24() => {
      x_309 := __308;
    }
    consUU_25(hd_310, tl_311) => {
      match[U](__308){
        nilUU_24() => {
          x_313 := mkconstr(consUU_25, [hd_310, tl_311]);
          x_312 := x_313;
        }
        consUU_25(hd_314, tl_315) => {
          x_317 := lte(hd_310, hd_314);
          match(x_317){
            true_4() => {
              x_319 := mkconstr(consUU_25, [hd_314, tl_315]);
              x_318 := mergeU_306(tl_311, x_319);
              x_320 := mkconstr(consUU_25, [hd_310, x_318]);
              x_316 := x_320;
            }
            false_5() => {
              x_322 := mkconstr(consUU_25, [hd_310, tl_311]);
              x_321 := mergeU_306(x_322, tl_315);
              x_323 := mkconstr(consUU_25, [hd_314, x_321]);
              x_316 := x_323;
            }
          }
          x_312 := x_316;
        }
      }
      x_309 := x_312;
    }
  }
  return x_309;
}

fn mergeL_324(__325%U, __326%L) {
  match[L](__325){
    nilUL_22() => {
      x_327 := __326;
    }
    consUL_23(hd_328, tl_329) => {
      match[L](__326){
        nilUL_22() => {
          x_331 := mkconstr(consUL_23, [hd_328, tl_329]);
          x_330 := x_331;
        }
        consUL_23(hd_332, tl_333) => {
          x_335 := lte(hd_328, hd_332);
          match(x_335){
            true_4() => {
              x_337 := mkconstr(consUL_23, [hd_332, tl_333]);
              x_336 := mergeL_324(tl_329, x_337);
              x_338 := mkconstr(consUL_23, [hd_328, x_336]);
              x_334 := x_338;
            }
            false_5() => {
              x_340 := mkconstr(consUL_23, [hd_328, tl_329]);
              x_339 := mergeL_324(x_340, tl_333);
              x_341 := mkconstr(consUL_23, [hd_332, x_339]);
              x_334 := x_341;
            }
          }
          x_330 := x_334;
        }
      }
      x_327 := x_330;
    }
  }
  return x_327;
}

fn msortU_342(__343%U) {
  match[U](__343){
    nilUU_24() => {
      x_345 := mkconstr(nilUU_24, []);
      x_344 := x_345;
    }
    consUU_25(hd_346, tl_347) => {
      match[U](tl_347){
        nilUU_24() => {
          x_349 := mkconstr(nilUU_24, []);
          x_350 := mkconstr(consUU_25, [hd_346, x_349]);
          x_348 := x_350;
        }
        consUU_25(hd_351, tl_352) => {
          x_355 := mkconstr(consUU_25, [hd_351, tl_352]);
          x_356 := mkconstr(consUU_25, [hd_346, x_355]);
          x_354 := splitU_262(x_356);
          match[L](x_354){
            ex1UU_33(m_357, n_358) => {
              x_360 := msortU_342(m_357);
              x_361 := msortU_342(n_358);
              x_359 := mergeU_306(x_360, x_361);
              x_353 := x_359;
            }
          }
          x_348 := x_353;
        }
      }
      x_344 := x_348;
    }
  }
  return x_344;
}

fn msortL_362(__363%U) {
  match[L](__363){
    nilUL_22() => {
      x_365 := mkconstr(nilUL_22, []);
      x_364 := x_365;
    }
    consUL_23(hd_366, tl_367) => {
      match[L](tl_367){
        nilUL_22() => {
          x_369 := mkconstr(nilUL_22, []);
          x_370 := mkconstr(consUL_23, [hd_366, x_369]);
          x_368 := x_370;
        }
        consUL_23(hd_371, tl_372) => {
          x_375 := mkconstr(consUL_23, [hd_371, tl_372]);
          x_376 := mkconstr(consUL_23, [hd_366, x_375]);
          x_374 := splitL_284(x_376);
          match[L](x_374){
            ex1LL_30(m_377, n_378) => {
              x_380 := msortL_362(m_377);
              x_381 := msortL_362(n_378);
              x_379 := mergeL_324(x_380, x_381);
              x_373 := x_379;
            }
          }
          x_368 := x_373;
        }
      }
      x_364 := x_368;
    }
  }
  return x_364;
}

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mul(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_231 := push("", c_230);
  return x_231;
}

fn strlen_232(s_233%U) {
  x_234 := size(s_233);
  return x_234;
}

fn string_of_int_235(i_236%U) {
  x_238 :=
    fn aux_239(i_240%U) {
      x_242 := lte(10, i_240);
      match(x_242){
        true_4() => {
          x_244 := mul(i_240, 10);
          r_243 := x_244;
          x_246 := mul(i_240, 10);
          i_245 := x_246;
          x_248 := aux_239(i_245);
          x_251 := ord_223(0);
          x_250 := add(r_243, x_251);
          x_249 := chr_226(x_250);
          x_247 := push(x_248, x_249);
          x_241 := x_247;
        }
        false_5() => {
          x_255 := ord_223(0);
          x_254 := add(i_240, x_255);
          x_253 := chr_226(x_254);
          x_252 := str_229(x_253);
          x_241 := x_252;
        }
      }
      return x_241;
    };
  aux_237 := x_238;
  x_257 := lt(0, i_236);
  match(x_257){
    true_4() => {
      x_258 := aux_237(i_236);
      x_256 := x_258;
    }
    false_5() => {
      x_261 := neg(i_236);
      x_260 := aux_237(x_261);
      x_259 := cat("~", x_260);
      x_256 := x_259;
    }
  }
  return x_256;
}

fn splitU_262(__263%U) {
  match[U](__263){
    nilUU_24() => {
      x_265 := mkconstr(nilUU_24, []);
      x_266 := mkconstr(nilUU_24, []);
      x_267 := mkconstr(ex1UU_33, [x_265, x_266]);
      x_264 := x_267;
    }
    consUU_25(hd_268, tl_269) => {
      match[U](tl_269){
        nilUU_24() => {
          x_271 := mkconstr(nilUU_24, []);
          x_272 := mkconstr(consUU_25, [hd_268, x_271]);
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(ex1UU_33, [x_272, x_273]);
          x_270 := x_274;
        }
        consUU_25(hd_275, tl_276) => {
          x_278 := splitU_262(tl_276);
          match[L](x_278){
            ex1UU_33(m_279, n_280) => {
              x_281 := reconstr(x_278, consUU_25, hd_268, m_279);
              x_282 := mkconstr(consUU_25, [hd_275, n_280]);
              x_283 := mkconstr(ex1UU_33, [x_281, x_282]);
              x_277 := x_283;
            }
          }
          x_270 := x_277;
        }
      }
      x_264 := x_270;
    }
  }
  return x_264;
}

fn splitL_284(__285%U) {
  match[L](__285){
    nilUL_22() => {
      x_287 := reconstr(__285, nilUL_22, );
      x_288 := mkconstr(nilUL_22, []);
      x_289 := mkconstr(ex1LL_30, [x_287, x_288]);
      x_286 := x_289;
    }
    consUL_23(hd_290, tl_291) => {
      match[L](tl_291){
        nilUL_22() => {
          x_293 := reconstr(tl_291, nilUL_22, );
          x_294 := reconstr(__285, consUL_23, hd_290, x_293);
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(ex1LL_30, [x_294, x_295]);
          x_292 := x_296;
        }
        consUL_23(hd_297, tl_298) => {
          x_300 := splitL_284(tl_298);
          match[L](x_300){
            ex1LL_30(m_301, n_302) => {
              x_303 := reconstr(x_300, consUL_23, hd_290, m_301);
              x_304 := reconstr(tl_291, consUL_23, hd_297, n_302);
              x_305 := reconstr(__285, ex1LL_30, x_303, x_304);
              x_299 := x_305;
            }
          }
          x_292 := x_299;
        }
      }
      x_286 := x_292;
    }
  }
  return x_286;
}

fn mergeU_306(__307%U, __308%L) {
  match[U](__307){
    nilUU_24() => {
      x_309 := __308;
    }
    consUU_25(hd_310, tl_311) => {
      match[U](__308){
        nilUU_24() => {
          x_313 := mkconstr(consUU_25, [hd_310, tl_311]);
          x_312 := x_313;
        }
        consUU_25(hd_314, tl_315) => {
          x_317 := lte(hd_310, hd_314);
          match(x_317){
            true_4() => {
              x_319 := mkconstr(consUU_25, [hd_314, tl_315]);
              x_318 := mergeU_306(tl_311, x_319);
              x_320 := mkconstr(consUU_25, [hd_310, x_318]);
              x_316 := x_320;
            }
            false_5() => {
              x_322 := mkconstr(consUU_25, [hd_310, tl_311]);
              x_321 := mergeU_306(x_322, tl_315);
              x_323 := mkconstr(consUU_25, [hd_314, x_321]);
              x_316 := x_323;
            }
          }
          x_312 := x_316;
        }
      }
      x_309 := x_312;
    }
  }
  return x_309;
}

fn mergeL_324(__325%U, __326%L) {
  match[L](__325){
    nilUL_22() => {
      x_327 := __326;
      free(__325);
    }
    consUL_23(hd_328, tl_329) => {
      match[L](__326){
        nilUL_22() => {
          x_331 := reconstr(__325, consUL_23, hd_328, tl_329);
          x_330 := x_331;
          free(__326);
        }
        consUL_23(hd_332, tl_333) => {
          x_335 := lte(hd_328, hd_332);
          match(x_335){
            true_4() => {
              x_337 := reconstr(__326, consUL_23, hd_332, tl_333);
              x_336 := mergeL_324(tl_329, x_337);
              x_338 := reconstr(__325, consUL_23, hd_328, x_336);
              x_334 := x_338;
            }
            false_5() => {
              x_340 := reconstr(__326, consUL_23, hd_328, tl_329);
              x_339 := mergeL_324(x_340, tl_333);
              x_341 := reconstr(__325, consUL_23, hd_332, x_339);
              x_334 := x_341;
            }
          }
          x_330 := x_334;
        }
      }
      x_327 := x_330;
    }
  }
  return x_327;
}

fn msortU_342(__343%U) {
  match[U](__343){
    nilUU_24() => {
      x_345 := mkconstr(nilUU_24, []);
      x_344 := x_345;
    }
    consUU_25(hd_346, tl_347) => {
      match[U](tl_347){
        nilUU_24() => {
          x_349 := mkconstr(nilUU_24, []);
          x_350 := mkconstr(consUU_25, [hd_346, x_349]);
          x_348 := x_350;
        }
        consUU_25(hd_351, tl_352) => {
          x_355 := mkconstr(consUU_25, [hd_351, tl_352]);
          x_356 := mkconstr(consUU_25, [hd_346, x_355]);
          x_354 := splitU_262(x_356);
          match[L](x_354){
            ex1UU_33(m_357, n_358) => {
              x_360 := msortU_342(m_357);
              x_361 := msortU_342(n_358);
              x_359 := mergeU_306(x_360, x_361);
              x_353 := x_359;
              free(x_354);
            }
          }
          x_348 := x_353;
        }
      }
      x_344 := x_348;
    }
  }
  return x_344;
}

fn msortL_362(__363%U) {
  match[L](__363){
    nilUL_22() => {
      x_365 := reconstr(__363, nilUL_22, );
      x_364 := x_365;
    }
    consUL_23(hd_366, tl_367) => {
      match[L](tl_367){
        nilUL_22() => {
          x_369 := reconstr(tl_367, nilUL_22, );
          x_370 := reconstr(__363, consUL_23, hd_366, x_369);
          x_368 := x_370;
        }
        consUL_23(hd_371, tl_372) => {
          x_375 := reconstr(tl_367, consUL_23, hd_371, tl_372);
          x_376 := reconstr(__363, consUL_23, hd_366, x_375);
          x_374 := splitL_284(x_376);
          match[L](x_374){
            ex1LL_30(m_377, n_378) => {
              x_380 := msortL_362(m_377);
              x_381 := msortL_362(n_378);
              x_379 := mergeL_324(x_380, x_381);
              x_373 := x_379;
              free(x_374);
            }
          }
          x_368 := x_373;
        }
      }
      x_364 := x_368;
    }
  }
  return x_364;
}

-----------------------------------------

