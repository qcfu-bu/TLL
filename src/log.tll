[Definition {name = "split"; relv = R;
   body =
   (Binder (["t"],
      ((Fun (
          (Pi (R, U,
             (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
             (Binder ("_",
                (BOpr ("\195\151",
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                   (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                   ))
                ))
             )),
          (Binder ((Some "split"),
             [([(PId "nil")],
               (Some (BOpr ("\226\159\168,\226\159\169", (Id ("nil", I)),
                        (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"), (PId "nil")))],
                (Some (BOpr ("\226\159\168,\226\159\169",
                         (BOpr ("::", (Id ("x", I)), (Id ("nil", I)))),
                         (Id ("nil", I))))));
               ([(PBOpr ("::", (PId "x"),
                    (PBOpr ("::", (PId "y"), (PId "zs")))))
                  ],
                (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                         (Binder (
                            (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                               (PId "ys"))),
                            (BOpr ("\226\159\168,\226\159\169",
                               (BOpr ("::", (Id ("x", I)), (Id ("xs", I)))),
                               (BOpr ("::", (Id ("y", I)), (Id ("ys", I))))))
                            ))
                         ))))
               ]
             )),
          [])),
       (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
          (Binder ("_",
             (BOpr ("\195\151",
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
             ))
          )))
      ));
   view = []};
  Definition {name = "merge"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (Pi (R, L,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("_",
                       (App
                          [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "merge"),
              [([(PId "nil"); (PId "ys")], (Some (Id ("ys", I))));
                ([(PId "xs"); (PId "nil")], (Some (Id ("xs", I))));
                ([(PBOpr ("::", (PId "x"), (PId "xs")));
                   (PBOpr ("::", (PId "y"), (PId "ys")))],
                 (Some (Match (
                          [(R, (BOpr ("<=", (Id ("x", I)), (Id ("y", I)))),
                            None)],
                          None,
                          [([(PId "true")],
                            (Some (BOpr ("::", (Id ("x", I)),
                                     (App
                                        [(Id ("merge", I)); (Id ("xs", I));
                                          (BOpr ("::", (Id ("y", I)),
                                             (Id ("ys", I))))
                                          ])
                                     ))));
                            ([(PId "false")],
                             (Some (BOpr ("::", (Id ("y", I)),
                                      (App
                                         [(Id ("merge", I));
                                           (BOpr ("::", (Id ("x", I)),
                                              (Id ("xs", I))));
                                           (Id ("ys", I))])
                                      ))))
                            ]
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (Pi (R, L,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("_",
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])
                    ))
                 ))
              ))
           )))
       ));
    view = []};
  Definition {name = "msort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "msort"),
              [([(PId "nil")], (Some (Id ("nil", I))));
                ([(PBOpr ("::", (PId "z"), (PId "nil")))],
                 (Some (BOpr ("::", (Id ("z", I)), (Id ("nil", I))))));
                ([(PId "zs")],
                 (Some (Let (R, (App [(Id ("split", I)); (Id ("zs", I))]),
                          (Binder (
                             (PBOpr ("\226\159\168,\226\159\169", (PId "xs"),
                                (PId "ys"))),
                             (App
                                [(Id ("merge", I));
                                  (App [(Id ("msort", I)); (Id ("xs", I))]);
                                  (App [(Id ("msort", I)); (Id ("ys", I))])])
                             ))
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = []};
  Definition {name = "cmsort_ch"; relv = N;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("xs", (Type L))))),
           (Binder ((Some "cmsort_ch"),
              [([(PId "xs")],
                (Some (Ch (true,
                         (Act (R, true,
                            (UOpr ("`",
                               (App [(Id ("msort", I)); (Id ("xs", I))]))),
                            (Binder ("_", End))))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("xs", (Type L))))))
       ));
    view = [E]};
  Definition {name = "cmsort_worker"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("spwn",
                 (Pi (R, U,
                    (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                    (Binder ("zs",
                       (Pi (R, L,
                          (App
                             [(Inst ("cmsort_ch", [(SId "t")], I));
                               (Id ("zs", I))]),
                          (Binder ("_", (IO (Id ("unit", I)))))))
                       ))
                    ))
                 ))
              )),
           (Binder ((Some "cmsort_worker"),
              [([(PId "spwn")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("spwn", I)), (Int 0))), None)
                           ],
                         None,
                         [([(PId "true")],
                           (Some (Fun (
                                    (Pi (R, U,
                                       (App
                                          [(Inst ("list",
                                              [(SId "_"); (SId "t")], I));
                                            Int_t]),
                                       (Binder ("zs",
                                          (Pi (R, L,
                                             (App
                                                [(Inst ("cmsort_ch",
                                                    [(SId "t")], I));
                                                  (Id ("zs", I))]),
                                             (Binder ("_",
                                                (IO (Id ("unit", I)))))
                                             ))
                                          ))
                                       )),
                                    (Binder (None,
                                       [([(PId "zs"); (PId "c")],
                                         (Some (MLet (
                                                  (App
                                                     [(Send (Id ("c", I)));
                                                       (App
                                                          [(Id ("just", I));
                                                            (App
                                                               [(Id ("msort",
                                                                   I));
                                                                 (Id ("zs", I
                                                                    ))
                                                                 ])
                                                            ])
                                                       ]),
                                                  (Binder ((PId "c"),
                                                     (Close (Id ("c", I)))))
                                                  ))))
                                         ]
                                       )),
                                    []))));
                           ([(PId "false")],
                            (Some (Fun (
                                     (Pi (R, U,
                                        (App
                                           [(Inst ("list",
                                               [(SId "_"); (SId "t")], I));
                                             Int_t]),
                                        (Binder ("zs",
                                           (Pi (R, L,
                                              (App
                                                 [(Inst ("cmsort_ch",
                                                     [(SId "t")], I));
                                                   (Id ("zs", I))]),
                                              (Binder ("_",
                                                 (IO (Id ("unit", I)))))
                                              ))
                                           ))
                                        )),
                                     (Binder (None,
                                        [([(PId "nil"); (PId "c")],
                                          (Some (MLet (
                                                   (App
                                                      [(Send (Id ("c", I)));
                                                        (App
                                                           [(Id ("just", I));
                                                             (Id ("nil", I))])
                                                        ]),
                                                   (Binder ((PId "c"),
                                                      (Close (Id ("c", I)))))
                                                   ))));
                                          ([(PBOpr ("::", (PId "z"),
                                               (PId "nil")));
                                             (PId "c")],
                                           (Some (MLet (
                                                    (App
                                                       [(Send (Id ("c", I)));
                                                         (App
                                                            [(Id ("just", I));
                                                              (BOpr ("::",
                                                                 (Id ("z", I
                                                                    )),
                                                                 (Id ("nil",
                                                                    I))
                                                                 ))
                                                              ])
                                                         ]),
                                                    (Binder ((PId "c"),
                                                       (Close (Id ("c", I)))
                                                       ))
                                                    ))));
                                          ([(PId "zs"); (PId "c")],
                                           (Some (Match (
                                                    [(R,
                                                      (App
                                                         [(Id ("split", I));
                                                           (Id ("zs", I))]),
                                                      (Some ("h1", IMeta)));
                                                      (N, (Id ("refl", I)),
                                                       (Some ("_",
                                                              (BOpr ("=",
                                                                 (Let (R,
                                                                    (
                                                                    Id ("h1",
                                                                    I)),
                                                                    (
                                                                    Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "xs"),
                                                                    (PId "ys")
                                                                    )),
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs", I))
                                                                    ]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys", I))
                                                                    ])]))))),
                                                                 (Let (R,
                                                                    (
                                                                    App
                                                                    [(Id (
                                                                    "split",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]),
                                                                    (
                                                                    Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId "xs"),
                                                                    (PId "ys")
                                                                    )),
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs", I))
                                                                    ]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys", I))
                                                                    ])])))))
                                                                 )))))
                                                      ],
                                                    None,
                                                    [([(PBOpr (
                                                          "\226\159\168,\226\159\169",
                                                          (PId "xs0"),
                                                          (PId "ys0")));
                                                        (PId "pf")],
                                                      (Some (MLet (
                                                               (Fork
                                                                  (Fun (
                                                                    (Pi (R,
                                                                    L, IMeta,
                                                                    (Binder (
                                                                    "",
                                                                    (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    ))))))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "c1")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id (
                                                                    "spwn", I
                                                                    )),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ));
                                                                    (Id (
                                                                    "c1", I))
                                                                    ])))])),
                                                                    []))),
                                                               (Binder (
                                                                  (PId "r1"),
                                                                  (MLet (
                                                                    (Fork
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    L, IMeta,
                                                                    (Binder (
                                                                    "",
                                                                    (IO
                                                                    (Id (
                                                                    "unit", I
                                                                    ))))))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "c2")],
                                                                    (Some (
                                                                    App
                                                                    [(Id (
                                                                    "cmsort_worker",
                                                                    I));
                                                                    (BOpr (
                                                                    "-",
                                                                    (Id (
                                                                    "spwn", I
                                                                    )),
                                                                    (Int 1)));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ));
                                                                    (Id (
                                                                    "c2", I))
                                                                    ])))])),
                                                                    []))),
                                                                    (Binder (
                                                                    (PId "r2"),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r1", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId
                                                                    "xs1"),
                                                                    (PId "c1")
                                                                    )),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c1", I))),
                                                                    (MLet (
                                                                    (Recv
                                                                    (Id (
                                                                    "r2", I))),
                                                                    (Binder (
                                                                    (PBOpr (
                                                                    "\226\159\168,\226\159\169",
                                                                    (PId
                                                                    "ys1"),
                                                                    (PId "c2")
                                                                    )),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id (
                                                                    "c2", I))),
                                                                    (Match (
                                                                    [(R,
                                                                    (Id (
                                                                    "xs1", I
                                                                    )), None);
                                                                    (R,
                                                                    (Id (
                                                                    "ys1", I
                                                                    )), None)
                                                                    ], None,
                                                                    [([(PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "xs1")]));
                                                                    (PConstr (
                                                                    "just",
                                                                    [(PId
                                                                    "ys1")]))
                                                                    ],
                                                                    (Some (
                                                                    Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "just", I
                                                                    ));
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (Id (
                                                                    "xs1", I
                                                                    ));
                                                                    (Id (
                                                                    "ys1", I
                                                                    ))])]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "merge",
                                                                    I));
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "xs0", I
                                                                    ))]);
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "ys0", I
                                                                    ))])])))
                                                                    )),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (Let (R,
                                                                    (Ann (
                                                                    (App
                                                                    [(Id (
                                                                    "rwl", I
                                                                    ));
                                                                    (Fun (
                                                                    (Pi (R,
                                                                    U, IMeta,
                                                                    (Binder (
                                                                    "x",
                                                                    IMeta)))),
                                                                    (Binder (
                                                                    None,
                                                                    [([(PId
                                                                    "x")],
                                                                    (Some (
                                                                    UOpr (
                                                                    "`",
                                                                    (Id ("x",
                                                                    I))))))]
                                                                    )), 
                                                                    []));
                                                                    (Id (
                                                                    "pf", I));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (UOpr (
                                                                    "`",
                                                                    (App
                                                                    [(Id (
                                                                    "msort",
                                                                    I));
                                                                    (Id (
                                                                    "zs", I))
                                                                    ]))))),
                                                                    (Binder (
                                                                    (PId
                                                                    "zs1"),
                                                                    (MLet (
                                                                    (App
                                                                    [(Send
                                                                    (Id ("c",
                                                                    I)));
                                                                    (Id (
                                                                    "zs1", I
                                                                    ))]),
                                                                    (Binder (
                                                                    (PId "c"),
                                                                    (BOpr (
                                                                    ";",
                                                                    (Close
                                                                    (Id ("c",
                                                                    I))),
                                                                    (Return
                                                                    (Id (
                                                                    "tt", I)))
                                                                    ))))))))
                                                                    ))))))))]
                                                                    ))))))))
                                                                    ))))))))
                                                                    ))
                                                                  ))
                                                               ))))
                                                      ]
                                                    ))))
                                          ]
                                        )),
                                     []))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("spwn",
              (Pi (R, U,
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
                 (Binder ("zs",
                    (Pi (R, L,
                       (App
                          [(Inst ("cmsort_ch", [(SId "t")], I));
                            (Id ("zs", I))]),
                       (Binder ("_", (IO (Id ("unit", I)))))))
                    ))
                 ))
              ))
           )))
       ));
    view = [E]};
  Definition {name = "cmsort"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("zs",
                 (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))
                 ))
              )),
           (Binder ((Some "cmsort"),
              [([(PId "zs")],
                (Some (MLet (
                         (Fork
                            (Fun (
                               (Pi (R, L, IMeta,
                                  (Binder ("", (IO (Id ("unit", I))))))),
                               (Binder (None,
                                  [([(PId "c")],
                                    (Some (App
                                             [(Id ("cmsort_worker", I));
                                               (Int 4); (Id ("zs", I));
                                               (Id ("c", I))])))
                                    ]
                                  )),
                               []))),
                         (Binder ((PId "c"),
                            (MLet ((Recv (Id ("c", I))),
                               (Binder (
                                  (PBOpr ("\226\159\168,\226\159\169",
                                     (PId "msg"), (PId "c"))),
                                  (BOpr (";", (Close (Id ("c", I))),
                                     (Return (Id ("msg", I)))))
                                  ))
                               ))
                            ))
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("zs",
              (IO (UOpr ("`", (App [(Id ("msort", I)); (Id ("zs", I))]))))))
           )))
       ));
    view = [E]};
  Definition {name = "mklist"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U, Int_t,
              (Binder ("n",
                 (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
              )),
           (Binder ((Some "mklist"),
              [([(PId "n")],
                (Some (Match (
                         [(R, (BOpr ("<=", (Id ("n", I)), (Int 0))), None)],
                         None,
                         [([(PId "true")], (Some (Id ("nil", I))));
                           ([(PId "false")],
                            (Some (BOpr ("::", (Id ("n", I)),
                                     (App
                                        [(Id ("mklist", I));
                                          (BOpr ("-", (Id ("n", I)), (
                                             Int 1)))
                                          ])
                                     ))))
                           ]
                         ))))
                ]
              )),
           [E])),
        (Pi (R, U, Int_t,
           (Binder ("n",
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t])))
           )))
       ));
    view = [E]};
  Definition {name = "list_len"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", Int_t)))),
           (Binder ((Some "list_len"),
              [([(PId "nil")], (Some (Int 0)));
                ([(PBOpr ("::", (PId "_"), (PId "xs")))],
                 (Some (BOpr ("+", (Int 1),
                          (App [(Id ("list_len", I)); (Id ("xs", I))])))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", Int_t)))))
       ));
    view = []};
  Definition {name = "string_of_list"; relv = R;
    body =
    (Binder (["t"],
       ((Fun (
           (Pi (R, U,
              (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
              (Binder ("_", String_t)))),
           (Binder ((Some "string_of_list"),
              [([(PId "nil")], (Some (String "nil")));
                ([(PBOpr ("::", (PId "x"), (PId "xs")))],
                 (Some (BOpr ("++",
                          (BOpr ("++",
                             (App [(Id ("string_of_int", I)); (Id ("x", I))]),
                             (String " :: "))),
                          (App [(Id ("string_of_list", I)); (Id ("xs", I))])
                          ))))
                ]
              )),
           [])),
        (Pi (R, U, (App [(Inst ("list", [(SId "_"); (SId "t")], I)); Int_t]),
           (Binder ("_", String_t)))))
       ));
    view = []};
  Definition {name = "main"; relv = R;
    body =
    (Binder ([],
       ((Let (R, (App [(Inst ("mklist", [L], I)); (Int 1000)]),
           (Binder ((PId "test"),
              (MLet ((App [(Id ("cmsort", I)); (Id ("test", I))]),
                 (Binder ((PConstr ("just", [(PId "sorted")])),
                    (Let (R,
                       (App [(Id ("list_len", I)); (Id ("sorted", I))]),
                       (Binder ((PId "len"),
                          (Print
                             (App
                                [(Id ("string_of_int", I)); (Id ("len", I))]))
                          ))
                       ))
                    ))
                 ))
              ))
           )),
        (IO (Id ("unit", I))))
       ));
    view = []}
  ]

-----------------------------------------

#[program]
def id_1‹s_539› : ∀ (A_540 : Type‹s_539›) -> A_540 -> ?_2[0;0] :=
  fun id_542 : ∀ (A_543 : Type‹s_539›) -> A_543 -> ?_1[0;0]
  | A_545 m_546 => m_546

#[logical]
inductive eq_1‹s_547› (A_548 : Type‹s_547›) (m_549 : A_548):
  A_548 -> U
where
| refl_1 : (eq_1‹??_1› ?_3[0;0] m_549 m_549)

#[program]
def rwl_2‹s_551,r_552› :
  ∀ {A_553 : Type‹s_551›} ->
    ∀ {m_554 : A_553} ->
      ∀ {n_555 : A_553} ->
        ∀ {B_556 : A_553 -> Type‹r_552›} ->
          {(eq_1‹??_3› ?_5[0;0] m_554 n_555)} ->
            ((B_556) m_554) -> ((B_556) n_555)
:=
  fun rwl_560 :
    ∀ {A_561 : Type‹s_551›} ->
      ∀ {m_562 : A_561} ->
        ∀ {n_563 : A_561} ->
          ∀ {B_564 : A_561 -> Type‹r_552›} ->
            {(eq_1‹??_2› ?_4[0;0] m_562 n_563)} ->
              ((B_564) m_562) -> ((B_564) n_563)
  | A_568 m_569 n_570 B_571 refl_1 x_572 => x_572

#[program]
def rwr_3‹s_573,r_574› :
  ∀ {A_575 : Type‹s_573›} ->
    ∀ {m_576 : A_575} ->
      ∀ {n_577 : A_575} ->
        ∀ {B_578 : A_575 -> Type‹r_574›} ->
          {(eq_1‹??_5› ?_7[0;0] m_576 n_577)} ->
            ((B_578) n_577) -> ((B_578) m_576)
:=
  fun rwr_582 :
    ∀ {A_583 : Type‹s_573›} ->
      ∀ {m_584 : A_583} ->
        ∀ {n_585 : A_583} ->
          ∀ {B_586 : A_583 -> Type‹r_574›} ->
            {(eq_1‹??_4› ?_6[0;0] m_584 n_585)} ->
              ((B_586) n_585) -> ((B_586) m_584)
  | A_590 m_591 n_592 B_593 refl_1 x_594 => x_594

#[logical]
def congr_4‹s_595,r_596,t_597› :
  ∀ (A_598 : Type‹s_595›) ->
    ∀ (B_599 : Type‹r_596›) ->
      ∀ (m_600 : A_598) ->
        ∀ (n_601 : A_598) ->
          ∀ (f_602 : forall‹t_597›(__603 : A_598), B_599) ->
            (eq_1‹??_9› ?_12[0;0] m_600 n_601) ->
              (eq_1‹??_10› ?_13[0;0] ((f_602) m_600) ((f_602) n_601))
:=
  fun congr_605 :
    ∀ (A_606 : Type‹s_595›) ->
      ∀ (B_607 : Type‹r_596›) ->
        ∀ (m_608 : A_606) ->
          ∀ (n_609 : A_606) ->
            ∀ (f_610 : forall‹t_597›(__611 : A_606), B_607) ->
              (eq_1‹??_6› ?_8[0;0] m_608 n_609) ->
                (eq_1‹??_7› ?_9[0;0] ((f_610) m_608) ((f_610) n_609))
  | A_613 B_614 m_615 n_616 f_617 refl_1 =>
    (refl_1‹??_8› ?_10[0;0] ?_11[0;0])

#[logical]
def axiom_K_5‹› :
  ∀ {A_618 : U} ->
    ∀ {m_619 : A_618} ->
      ∀ (x_620 : (eq_1‹??_15› ?_20[0;0] m_619 m_619)) ->
        (eq_1‹??_17›
          ?_23[0;0] x_620 (refl_1‹??_16› ?_21[0;0] ?_22[0;0]))
:=
  fun axiom_K_621 :
    ∀ {A_622 : U} ->
      ∀ {m_623 : A_622} ->
        ∀ (x_624 : (eq_1‹??_11› ?_14[0;0] m_623 m_623)) ->
          (eq_1‹??_13›
            ?_17[0;0] x_624 (refl_1‹??_12› ?_15[0;0] ?_16[0;0]))
  | A_625 m_626 refl_1 => (refl_1‹??_14› ?_18[0;0] ?_19[0;0])

#[program]
inductive sing_2‹s_627,t_628› (A_629 : Type‹s_627›):
  A_629 -> Type‹t_628›
where
| just_2 (m_631 : A_629) : (sing_2‹??_18,??_19› ?_24[0;0] m_631)

#[logical]
def ssing_6‹s_632› :
  ∀ (A_633 : Type‹s_632›) -> A_633 -> Type‹s_632›
:=
  fun ssing_635 : ∀ (A_636 : Type‹s_632›) -> A_636 -> Type‹s_632›
  | A_638 m_639 => (sing_2‹s_632,s_632› A_638 m_639)

#[program]
def sing_elim_7‹s_640,t_641› :
  ∀ {A_642 : Type‹s_640›} ->
    ∀ {x_643 : A_642} -> (sing_2‹s_640,t_641› ?_26[0;0] x_643) -> A_642
:=
  fun sing_elim_645 :
    ∀ {A_646 : Type‹s_640›} ->
      ∀ {x_647 : A_646} ->
        (sing_2‹s_640,t_641› ?_25[0;0] x_647) -> A_646
  | A_649 x_650 (just_2 x_651) => x_651

#[logical]
def sing_uniq_8‹s_652,t_653› :
  ∀ (A_654 : Type‹s_652›) ->
    ∀ (x0_655 : A_654) ->
      ∀ (x_656 : (sing_2‹s_652,t_653› ?_33[0;0] x0_655)) ->
        (eq_1‹??_26›
          ?_36[0;0] x0_655
          ((sing_elim_7‹??_24,??_25›) ?_35[0;0] ?_34[0;0] x_656))
:=
  fun sing_uniq_657 :
    ∀ (A_658 : Type‹s_652›) ->
      ∀ (x0_659 : A_658) ->
        ∀ (x_660 : (sing_2‹s_652,t_653› ?_27[0;0] x0_659)) ->
          (eq_1‹??_22›
            ?_30[0;0] x0_659
            ((sing_elim_7‹??_20,??_21›) ?_29[0;0] ?_28[0;0] x_660))
  | A_661 x0_662 (just_2 _663) => (refl_1‹??_23› ?_31[0;0] ?_32[0;0])

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_664 : unit_3) -> (eq_1‹??_30› ?_42[0;0] x_664 tt_3)
:=
  fun unit_eta_665 :
    ∀ (x_666 : unit_3) -> (eq_1‹??_27› ?_37[0;0] x_666 tt_3)
  | x_667 =>
    match x_667 in
      ∀ (x0_668 : ?_38[0;0]) -o (eq_1‹??_28› ?_39[0;0] x0_668 tt_3)
    with
    | tt_3 => (refl_1‹??_29› ?_40[0;0] ?_41[0;0])

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_670 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_674 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | _677 _678 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_681 : bool_4 -> bool_4 -> bool_4
  | false_5 false_5 => false_5
  | _684 _685 => true_4

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_688 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | false_5 false_5 => false_5
  | _691 _692 => true_4

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_693 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_696 : nat_5 -> nat_5 -> bool_4
  | zero_6 _699 => true_4
  | _700 zero_6 => false_5
  | (succ_7 x_701) (succ_7 y_702) => ((lte_696) x_701 y_702)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_705 : nat_5 -> nat_5 -> bool_4
  | x_708 y_709 => ((lte_14) (succ_7‹› x_708) y_709)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_711 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 x_713) => x_713

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_716 : nat_5 -> nat_5 -> nat_5
  | zero_6 y_719 => y_719
  | (succ_7 x_720) y_721 => (succ_7‹› ((add_716) x_720 y_721))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_724 : nat_5 -> nat_5 -> nat_5
  | x_727 zero_6 => x_727
  | x_728 (succ_7 y_729) => ((sub_724) ((pred_16) x_728) y_729)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_732 : nat_5 -> nat_5 -> nat_5
  | zero_6 _735 => zero_6
  | (succ_7 x_736) y_737 => ((add_17) y_737 ((mul_732) x_736 y_737))

#[program]
def div_20‹› : nat_5 -> nat_5 -> ?_49[0;0] :=
  fun div_740 : nat_5 -> nat_5 -> ?_43[0;0]
  | x_743 y_744 =>
    match ((lt_15) x_743 y_744) in ?_44[0;0] -o ?_45[0;0] with
    | true_4 => zero_6
    | false_5 =>
      let loop_746 :=
        fun loop_747 : nat_5 -> nat_5 -> ?_46[0;0]
        | x_750 y_751 =>
          match ((sub_18) x_750 ((pred_16) y_751)) in ?_47[0;0] -o ?_48[0;0]
          with
          | zero_6 => zero_6
          | (succ_7 x_753) => (succ_7‹› ((loop_747) x_753 y_751))
      in ((loop_746) x_743 y_744)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> ?_51[0;0] :=
  fun rem_756 : nat_5 -> nat_5 -> ?_50[0;0]
  | x_759 y_760 => ((sub_18) x_759 ((mul_19) ((div_20) x_759 y_760) y_760))

#[program]
inductive list_6‹s_761,t_762› (A_763 : Type‹s_761›): Type‹t_762›
where
| nil_8 : (list_6‹??_31,??_32› A_763)
| cons_9
    (hd_764 : A_763) (tl_765 : (list_6‹??_33,t_762› A_763))
    : (list_6‹??_34,??_35› A_763)

#[program]
def free_list_22‹s_766,t_767› :
  ∀ {A_768 : Type‹s_766›} ->
    A_768 -> unit_3 -> (list_6‹??_37,t_767› A_768) -> unit_3
:=
  fun free_list_772 :
    ∀ {A_773 : Type‹s_766›} ->
      A_773 -> unit_3 -> (list_6‹??_36,t_767› A_773) -> unit_3
  | A_777 f_778 nil_8 => tt_3
  | A_779 f_780 (cons_9 x_781 xs_782) =>
    let __783 := ((f_780) x_781) in ((free_list_772) ?_52[0;0] f_780 xs_782)

#[program]
inductive exists0_7‹s_784,r_785› (A_786 : Type‹s_784›) (B_787 : 
A_786 -> Type‹r_785›): L where
| ex0_10
    {m_789 : A_786} (n_790 : ((B_787) m_789))
    : (exists0_7‹??_38,??_39› A_786 B_787)

#[program]
inductive exists1_8‹s_791,r_792› (A_793 : Type‹s_791›) (B_794 : 
A_793 -> Type‹r_792›): L where
| ex1_11
    (m_796 : A_793) (n_797 : ((B_794) m_796))
    : (exists1_8‹??_40,??_41› A_793 B_794)

#[logical]
def prod0_23‹s_798,r_799› :
  Type‹s_798› -> Type‹r_799› -> ?_56[0;0]
:=
  fun prod0_802 : Type‹s_798› -> Type‹r_799› -> ?_53[0;0]
  | A_805 B_806 =>
    (exists0_7‹??_42,??_43›
      A_805 fun _807 : ?_54[0;0] -> ?_55[0;0]
            | _809 => B_806)

#[logical]
def prod1_24‹s_810,r_811› :
  Type‹s_810› -> Type‹r_811› -> ?_60[0;0]
:=
  fun prod1_814 : Type‹s_810› -> Type‹r_811› -> ?_57[0;0]
  | A_817 B_818 =>
    (exists1_8‹??_44,??_45›
      A_817 fun _819 : ?_58[0;0] -> ?_59[0;0]
            | _821 => B_818)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_824 : int -> int -> int
  | x_827 y_828 =>
    let loop_829 :=
      fun loop_830 : int -> int -> int
      | acc_833 y_834 =>
        match (__lte__ y_834 0) in ?_61[0;0] -o ?_62[0;0] with
        | true_4 => acc_833
        | false_5 => ((loop_830) (__mul__ x_827 acc_833) (__sub__ y_834 1))
    in ((loop_829) 1 y_828)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_839 : int -> int -> int -> int
  | x_843 y_844 m_845 =>
    let loop_846 :=
      fun loop_847 : int -> int -> int
      | acc_850 y_851 =>
        match (__lte__ y_851 0) in ?_63[0;0] -o ?_64[0;0] with
        | true_4 => acc_850
        | false_5 =>
          ((loop_847)
            (__mod__ (__mul__ x_843 acc_850) m_845) (__sub__ y_851 1))
    in ((loop_846) 1 y_844)

#[program]
def ord_27‹› : char -> int :=
  fun ord_854 : char -> int
  | c_856 => (__ord__ c_856)

#[program]
def chr_28‹› : int -> char :=
  fun chr_858 : int -> char
  | i_860 => (__chr__ i_860)

#[program]
def str_29‹› : char -> string :=
  fun str_862 : char -> string
  | c_864 => (__push__ "" c_864)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_866 : string -> int
  | s_868 => (__size__ s_868)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_870 : int -> string
  | i_872 =>
    let aux_873 :=
      fun aux_874 : int -> string
      | i_876 =>
        match (__lte__ 10 i_876) in ?_65[0;0] -o ?_66[0;0] with
        | true_4 =>
          let r_878 := (__mod__ i_876 10) in
          let i_879 := (__div__ i_876 10) in
          (__push__ ((aux_874) i_879)
            ((chr_28) (__add__ r_878 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_876 ((ord_27) 0))))
    in
    match (__lte__ 0 i_872) in ?_67[0;0] -o ?_68[0;0] with
    | true_4 => ((aux_873) i_872)
    | false_5 => (__cat__ "~" ((aux_873) (__neg__ i_872)))

#[program]
def split_32‹t_881› :
  (list_6‹??_71,t_881› int) ->
    ((prod1_24‹??_74,??_75›)
      (list_6‹??_72,t_881› int) (list_6‹??_73,t_881› int))
:=
  fun split_883 :
    (list_6‹??_46,t_881› int) ->
      ((prod1_24‹??_49,??_50›)
        (list_6‹??_47,t_881› int) (list_6‹??_48,t_881› int))
  | nil_8 =>
    (ex1_11‹??_55,??_56›
      ?_71[0;0] ?_72[0;0] (nil_8‹??_51,??_52› ?_69[0;0])
      (nil_8‹??_53,??_54› ?_70[0;0]))
  | (cons_9 x_885 nil_8) =>
    (ex1_11‹??_63,??_64›
      ?_76[0;0] ?_77[0;0]
      (cons_9‹??_59,??_60›
        ?_74[0;0] x_885 (nil_8‹??_57,??_58› ?_73[0;0]))
      (nil_8‹??_61,??_62› ?_75[0;0]))
  | (cons_9 x_886 (cons_9 y_887 zs_888)) =>
    match ((split_883) zs_888) in ?_83[0;0] -o ?_82[0;0] with
    | (ex1_11 xs_890 ys_891) =>
      (ex1_11‹??_69,??_70›
        ?_80[0;0] ?_81[0;0] (cons_9‹??_65,??_66› ?_78[0;0] x_886 xs_890)
        (cons_9‹??_67,??_68› ?_79[0;0] y_887 ys_891))

#[program]
def merge_33‹t_892› :
  (list_6‹??_87,t_892› int) ->
    (list_6‹??_88,t_892› int) -o (list_6‹??_89,t_892› int)
:=
  fun merge_895 :
    (list_6‹??_76,t_892› int) ->
      (list_6‹??_77,t_892› int) -o (list_6‹??_78,t_892› int)
  | nil_8 ys_898 => ys_898
  | xs_899 nil_8 => xs_899
  | (cons_9 x_900 xs_901) (cons_9 y_902 ys_903) =>
    match (__lte__ x_900 y_902) in ?_84[0;0] -o ?_85[0;0] with
    | true_4 =>
      (cons_9‹??_81,??_82›
        ?_87[0;0] x_900
        ((merge_895) xs_901 (cons_9‹??_79,??_80› ?_86[0;0] y_902 ys_903)))
    | false_5 =>
      (cons_9‹??_85,??_86›
        ?_89[0;0] y_902
        ((merge_895) (cons_9‹??_83,??_84› ?_88[0;0] x_900 xs_901) ys_903))

#[program]
def msort_34‹t_905› :
  (list_6‹??_100,t_905› int) -> (list_6‹??_101,t_905› int)
:=
  fun msort_907 :
    (list_6‹??_90,t_905› int) -> (list_6‹??_91,t_905› int)
  | nil_8 => (nil_8‹??_92,??_93› ?_90[0;0])
  | (cons_9 z_909 nil_8) =>
    (cons_9‹??_96,??_97›
      ?_92[0;0] z_909 (nil_8‹??_94,??_95› ?_91[0;0]))
  | zs_910 =>
    match ((split_32‹??_98›) zs_910) in ?_94[0;0] -o ?_93[0;0] with
    | (ex1_11 xs_912 ys_913) =>
      ((merge_33‹??_99›) ((msort_907) xs_912) ((msort_907) ys_913))

#[logical]
def cmsort_ch_35‹t_914› : (list_6‹??_105,t_914› int) -> L :=
  fun cmsort_ch_916 : (list_6‹??_102,t_914› int) -> L
  | xs_918 =>
    ch⟨⇑(__919 :
           ((ssing_6‹??_104›) ?_95[0;0] ((msort_34‹??_103›) xs_918))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_920› :
  int ->
    ∀ (zs_922 : (list_6‹??_144,t_920› int)) ->
      ((cmsort_ch_35‹t_920›) zs_922) -o IO unit_3
:=
  fun cmsort_worker_924 :
    int ->
      ∀ (zs_926 : (list_6‹??_106,t_920› int)) ->
        ((cmsort_ch_35‹t_920›) zs_926) -o IO unit_3
  | spwn_928 =>
    match (__lte__ spwn_928 0) in ?_96[0;0] -o ?_97[0;0] with
    | true_4 =>
      fun _930 :
        ∀ (zs_931 : (list_6‹??_107,t_920› int)) ->
          ((cmsort_ch_35‹t_920›) zs_931) -o IO unit_3
      | zs_933 c_934 =>
        let* c_935 :=
          ((send c_934)
            (just_2‹??_109,??_110›
              ?_98[0;0] ((msort_34‹??_108›) zs_933)))
        in close c_935
    | false_5 =>
      fun _936 :
        ∀ (zs_937 : (list_6‹??_111,t_920› int)) ->
          ((cmsort_ch_35‹t_920›) zs_937) -o IO unit_3
      | nil_8 c_939 =>
        let* c_940 :=
          ((send c_939)
            (just_2‹??_114,??_115›
              ?_100[0;0] (nil_8‹??_112,??_113› ?_99[0;0])))
        in close c_940
      | (cons_9 z_941 nil_8) c_942 =>
        let* c_943 :=
          ((send c_942)
            (just_2‹??_120,??_121›
              ?_103[0;0]
              (cons_9‹??_118,??_119›
                ?_102[0;0] z_941 (nil_8‹??_116,??_117› ?_101[0;0]))))
        in close c_943
      | zs_944 c_945 =>
        match ((split_32‹??_122›) zs_944),
        (refl_1‹??_123› ?_104[0;0] ?_105[0;0]) in
          ∀ (h1_946 : ?_106[0;0]) -o
            {(eq_1‹??_131›
               ?_111[0;0]
               match h1_946 in ?_108[0;0] -o ?_107[0;0] with
               | (ex1_11 xs_949 ys_950) =>
                 ((merge_33‹??_126›)
                   ((msort_34‹??_124›) xs_949)
                   ((msort_34‹??_125›) ys_950))
               match ((split_32‹??_127›) zs_944) in
                 ?_110[0;0] -o ?_109[0;0]
               with
               | (ex1_11 xs_952 ys_953) =>
                 ((merge_33‹??_130›)
                   ((msort_34‹??_128›) xs_952)
                   ((msort_34‹??_129›) ys_953)))} -o
              ?_112[0;0]
        with
        | (ex1_11 xs0_954 ys0_955), pf_956 =>
          let* r1_957 :=
            fork
              fun _958 : ?_113[0;0] -o IO unit_3
              | c1_960 =>
                ((cmsort_worker_924) (__sub__ spwn_928 1) xs0_954 c1_960)
          in
          let* r2_961 :=
            fork
              fun _962 : ?_114[0;0] -o IO unit_3
              | c2_964 =>
                ((cmsort_worker_924) (__sub__ spwn_928 1) ys0_955 c2_964)
          in
          let* _965 := recv r1_957 in
          match _965 in ?_130[0;0] -o ?_129[0;0] with
          | (ex1_11 xs1_967 c1_968) =>
            let* __969 := close c1_968 in
            let* _970 := recv r2_961 in
            match _970 in ?_128[0;0] -o ?_127[0;0] with
            | (ex1_11 ys1_972 c2_973) =>
              let* __974 := close c2_973 in
              match xs1_967, ys1_972 in
                ?_115[0;0] -o ?_116[0;0] -o ?_117[0;0]
              with
              | (just_2 xs1_977), (just_2 ys1_978) =>
                let zs1_979 :=
                  ((just_2‹??_133,??_134›
                     ?_118[0;0] ((merge_33‹??_132›) xs1_977 ys1_978))
                    : ((ssing_6‹??_138›)
                        ?_119[0;0]
                        ((merge_33‹??_137›)
                          ((msort_34‹??_135›) xs0_954)
                          ((msort_34‹??_136›) ys0_955))))
                in
                let zs1_980 :=
                  (((rwl_2‹??_140,??_141›)
                     ?_125[0;0] ?_124[0;0] ?_123[0;0]
                     fun _981 : ?_120[0;0] -> ?_121[0;0]
                     | x_983 => ((ssing_6‹??_139›) ?_122[0;0] x_983)
                     pf_956 zs1_979)
                    : ((ssing_6‹??_143›)
                        ?_126[0;0] ((msort_34‹??_142›) zs_944)))
                in
                let* c_984 := ((send c_945) zs1_980) in
                let* __985 := close c_984 in return tt_3

#[program]
def cmsort_37‹t_986› :
  ∀ (zs_987 : (list_6‹??_149,t_986› int)) ->
    IO ((ssing_6‹??_151›) ?_135[0;0] ((msort_34‹??_150›) zs_987))
:=
  fun cmsort_988 :
    ∀ (zs_989 : (list_6‹??_145,t_986› int)) ->
      IO ((ssing_6‹??_147›) ?_131[0;0] ((msort_34‹??_146›) zs_989))
  | zs_990 =>
    let* c_991 :=
      fork
        fun _992 : ?_132[0;0] -o IO unit_3
        | c_994 => ((cmsort_worker_36‹??_148›) 4 zs_990 c_994)
    in
    let* _995 := recv c_991 in
    match _995 in ?_134[0;0] -o ?_133[0;0] with
    | (ex1_11 msg_997 c_998) => let* __999 := close c_998 in return msg_997

#[program]
def mklist_38‹t_1000› : int -> (list_6‹??_157,t_1000› int) :=
  fun mklist_1002 : int -> (list_6‹??_152,t_1000› int)
  | n_1004 =>
    match (__lte__ n_1004 0) in ?_136[0;0] -o ?_137[0;0] with
    | true_4 => (nil_8‹??_153,??_154› ?_138[0;0])
    | false_5 =>
      (cons_9‹??_155,??_156›
        ?_139[0;0] n_1004 ((mklist_1002) (__sub__ n_1004 1)))

#[program]
def list_len_39‹t_1006› : (list_6‹??_159,t_1006› int) -> int :=
  fun list_len_1008 : (list_6‹??_158,t_1006› int) -> int
  | nil_8 => 0
  | (cons_9 _1010 xs_1011) => (__add__ 1 ((list_len_1008) xs_1011))

#[program]
def string_of_list_40‹t_1012› : (list_6‹??_161,t_1012› int) -> string
:=
  fun string_of_list_1014 : (list_6‹??_160,t_1012› int) -> string
  | nil_8 => "nil"
  | (cons_9 x_1016 xs_1017) =>
    (__cat__ (__cat__ ((string_of_int_31) x_1016) " :: ")
      ((string_of_list_1014) xs_1017))

#[program]
def main_41‹› : IO unit_3 :=
  let test_1018 := ((mklist_38‹L›) 1000) in
  let* _1019 := ((cmsort_37‹??_162›) test_1018) in
  match _1019 in ?_141[0;0] -o ?_140[0;0] with
  | (just_2 sorted_1021) =>
    let len_1022 := ((list_len_39‹??_163›) sorted_1021) in
    print ((string_of_int_31) len_1022)

-----------------------------------------

#[program]
def id_1‹s_30001› :
  ∀ (A_30002 : Type‹s_30001›) -> A_30002 -> A_30002
:=
  fun id_30004 : ∀ (A_30005 : Type‹s_30001›) -> A_30005 -> A_30005
  | A_30007 m_30008 => m_30008

#[logical]
inductive eq_1‹s_30009› (A_30010 : Type‹s_30009›) (m_30011 : A_30010):
  A_30010 -> U
where
| refl_1 : (eq_1‹s_30009› A_30010 m_30011 m_30011)

#[program]
def rwl_2‹s_30013,r_30014› :
  ∀ {A_30015 : Type‹s_30013›} ->
    ∀ {m_30016 : A_30015} ->
      ∀ {n_30017 : A_30015} ->
        ∀ {B_30018 : A_30015 -> Type‹r_30014›} ->
          {(eq_1‹s_30013› A_30015 m_30016 n_30017)} ->
            ((B_30018) m_30016) -> ((B_30018) n_30017)
:=
  fun rwl_30022 :
    ∀ {A_30023 : Type‹s_30013›} ->
      ∀ {m_30024 : A_30023} ->
        ∀ {n_30025 : A_30023} ->
          ∀ {B_30026 : A_30023 -> Type‹r_30014›} ->
            {(eq_1‹s_30013› A_30023 m_30024 n_30025)} ->
              ((B_30026) m_30024) -> ((B_30026) n_30025)
  | A_30030 m_30031 n_30032 B_30033 refl_1 __30034 => __30034

#[program]
def rwr_3‹s_30035,r_30036› :
  ∀ {A_30037 : Type‹s_30035›} ->
    ∀ {m_30038 : A_30037} ->
      ∀ {n_30039 : A_30037} ->
        ∀ {B_30040 : A_30037 -> Type‹r_30036›} ->
          {(eq_1‹s_30035› A_30037 m_30038 n_30039)} ->
            ((B_30040) n_30039) -> ((B_30040) m_30038)
:=
  fun rwr_30044 :
    ∀ {A_30045 : Type‹s_30035›} ->
      ∀ {m_30046 : A_30045} ->
        ∀ {n_30047 : A_30045} ->
          ∀ {B_30048 : A_30045 -> Type‹r_30036›} ->
            {(eq_1‹s_30035› A_30045 m_30046 n_30047)} ->
              ((B_30048) n_30047) -> ((B_30048) m_30046)
  | A_30052 m_30053 n_30054 B_30055 refl_1 __30056 => __30056

#[logical]
def congr_4‹s_30057,r_30058,t_30059› :
  ∀ (A_30060 : Type‹s_30057›) ->
    ∀ (B_30061 : Type‹r_30058›) ->
      ∀ (m_30062 : A_30060) ->
        ∀ (n_30063 : A_30060) ->
          ∀ (f_30064 : forall‹t_30059›(__30065 : A_30060), B_30061) ->
            (eq_1‹s_30057› A_30060 m_30062 n_30063) ->
              (eq_1‹r_30058›
                B_30061 ((f_30064) m_30062) ((f_30064) n_30063))
:=
  fun congr_30067 :
    ∀ (A_30068 : Type‹s_30057›) ->
      ∀ (B_30069 : Type‹r_30058›) ->
        ∀ (m_30070 : A_30068) ->
          ∀ (n_30071 : A_30068) ->
            ∀ (f_30072 :
              forall‹t_30059›(__30073 : A_30068), B_30069) ->
              (eq_1‹s_30057› A_30068 m_30070 n_30071) ->
                (eq_1‹r_30058›
                  B_30069 ((f_30072) m_30070) ((f_30072) n_30071))
  | A_30075 B_30076 m_30077 n_30078 f_30079 refl_1 =>
    (refl_1‹r_30058› B_30076 ((f_30079) n_30078))

#[logical]
def axiom_K_5‹› :
  ∀ {A_30080 : U} ->
    ∀ {m_30081 : A_30080} ->
      ∀ (x_30082 : (eq_1‹U› A_30080 m_30081 m_30081)) ->
        (eq_1‹U›
          (eq_1‹U› A_30080 m_30081 m_30081) x_30082
          (refl_1‹U› A_30080 m_30081))
:=
  fun axiom_K_30083 :
    ∀ {A_30084 : U} ->
      ∀ {m_30085 : A_30084} ->
        ∀ (x_30086 : (eq_1‹U› A_30084 m_30085 m_30085)) ->
          (eq_1‹U›
            (eq_1‹U› A_30084 m_30085 m_30085) x_30086
            (refl_1‹U› A_30084 m_30085))
  | A_30087 m_30088 refl_1 =>
    (refl_1‹U›
      (eq_1‹U› A_30087 m_30088 m_30088) (refl_1‹U› A_30087 m_30088))

#[program]
inductive sing_2‹s_30089,t_30090› (A_30091 : Type‹s_30089›):
  A_30091 -> Type‹t_30090›
where
| just_2 (m_30093 : A_30091) : (sing_2‹s_30089,t_30090› A_30091 m_30093)

#[logical]
def ssing_6‹s_30094› :
  ∀ (A_30095 : Type‹s_30094›) -> A_30095 -> Type‹s_30094›
:=
  fun ssing_30097 :
    ∀ (A_30098 : Type‹s_30094›) -> A_30098 -> Type‹s_30094›
  | A_30100 m_30101 => (sing_2‹s_30094,s_30094› A_30100 m_30101)

#[program]
def sing_elim_7‹s_30102,t_30103› :
  ∀ {A_30104 : Type‹s_30102›} ->
    ∀ {x_30105 : A_30104} ->
      (sing_2‹s_30102,t_30103› A_30104 x_30105) -> A_30104
:=
  fun sing_elim_30107 :
    ∀ {A_30108 : Type‹s_30102›} ->
      ∀ {x_30109 : A_30108} ->
        (sing_2‹s_30102,t_30103› A_30108 x_30109) -> A_30108
  | A_30111 x_30112 (just_2 m_30113) => m_30113

#[logical]
def sing_uniq_8‹s_30114,t_30115› :
  ∀ (A_30116 : Type‹s_30114›) ->
    ∀ (x0_30117 : A_30116) ->
      ∀ (x_30118 : (sing_2‹s_30114,t_30115› A_30116 x0_30117)) ->
        (eq_1‹s_30114›
          A_30116 x0_30117
          ((sing_elim_7‹s_30114,t_30115›) A_30116 x0_30117 x_30118))
:=
  fun sing_uniq_30119 :
    ∀ (A_30120 : Type‹s_30114›) ->
      ∀ (x0_30121 : A_30120) ->
        ∀ (x_30122 : (sing_2‹s_30114,t_30115› A_30120 x0_30121)) ->
          (eq_1‹s_30114›
            A_30120 x0_30121
            ((sing_elim_7‹s_30114,t_30115›) A_30120 x0_30121 x_30122))
  | A_30123 x0_30124 (just_2 m_30125) =>
    (refl_1‹s_30114› A_30123 m_30125)

#[program]
inductive unit_3‹› : U where
| tt_3 : unit_3

#[logical]
def unit_eta_9‹› :
  ∀ (x_30126 : unit_3) -> (eq_1‹U› unit_3 x_30126 tt_3)
:=
  fun unit_eta_30127 :
    ∀ (x_30128 : unit_3) -> (eq_1‹U› unit_3 x_30128 tt_3)
  | x_30129 =>
    match x_30129 in
      ∀ (x0_30130 : unit_3) -o (eq_1‹U› unit_3 x0_30130 tt_3)
    with
    | tt_3 => (refl_1‹U› unit_3 tt_3)

#[program]
inductive bool_4‹› : U where
| true_4 : bool_4
| false_5 : bool_4

#[program]
def not_10‹› : bool_4 -> bool_4 :=
  fun not_30132 : bool_4 -> bool_4
  | true_4 => false_5
  | false_5 => true_4

#[program]
def and_11‹› : bool_4 -> bool_4 -> bool_4 :=
  fun and_30136 : bool_4 -> bool_4 -> bool_4
  | true_4 true_4 => true_4
  | true_4 false_5 => false_5
  | false_5 __30139 => false_5

#[program]
def or_12‹› : bool_4 -> bool_4 -> bool_4 :=
  fun or_30142 : bool_4 -> bool_4 -> bool_4
  | true_4 __30145 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
def xor_13‹› : bool_4 -> bool_4 -o bool_4 :=
  fun xor_30148 : bool_4 -> bool_4 -o bool_4
  | true_4 true_4 => false_5
  | true_4 false_5 => true_4
  | false_5 true_4 => true_4
  | false_5 false_5 => false_5

#[program]
inductive nat_5‹› : U where
| zero_6 : nat_5
| succ_7 (n_30151 : nat_5) : nat_5

#[program]
def lte_14‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lte_30154 : nat_5 -> nat_5 -> bool_4
  | zero_6 __30157 => true_4
  | (succ_7 n_30158) zero_6 => false_5
  | (succ_7 n_30159) (succ_7 n_30160) => ((lte_30154) n_30159 n_30160)

#[program]
def lt_15‹› : nat_5 -> nat_5 -> bool_4 :=
  fun lt_30163 : nat_5 -> nat_5 -> bool_4
  | x_30166 y_30167 => ((lte_14) (succ_7‹› x_30166) y_30167)

#[program]
def pred_16‹› : nat_5 -> nat_5 :=
  fun pred_30169 : nat_5 -> nat_5
  | zero_6 => zero_6
  | (succ_7 n_30171) => n_30171

#[program]
def add_17‹› : nat_5 -> nat_5 -> nat_5 :=
  fun add_30174 : nat_5 -> nat_5 -> nat_5
  | zero_6 __30177 => __30177
  | (succ_7 n_30178) __30179 => (succ_7‹› ((add_30174) n_30178 __30179))

#[program]
def sub_18‹› : nat_5 -> nat_5 -> nat_5 :=
  fun sub_30182 : nat_5 -> nat_5 -> nat_5
  | __30185 zero_6 => __30185
  | __30186 (succ_7 n_30187) => ((sub_30182) ((pred_16) __30186) n_30187)

#[program]
def mul_19‹› : nat_5 -> nat_5 -> nat_5 :=
  fun mul_30190 : nat_5 -> nat_5 -> nat_5
  | zero_6 __30193 => zero_6
  | (succ_7 n_30194) __30195 =>
    ((add_17) __30195 ((mul_30190) n_30194 __30195))

#[program]
def div_20‹› : nat_5 -> nat_5 -> nat_5 :=
  fun div_30198 : nat_5 -> nat_5 -> nat_5
  | x_30201 y_30202 =>
    match ((lt_15) x_30201 y_30202) in bool_4 -o nat_5 with
    | true_4 => zero_6
    | false_5 =>
      let loop_30204 :=
        fun loop_30205 : nat_5 -> nat_5 -> nat_5
        | x_30208 y_30209 =>
          match ((sub_18) x_30208 ((pred_16) y_30209)) in nat_5 -o nat_5 with
          | zero_6 => zero_6
          | (succ_7 n_30211) => (succ_7‹› ((loop_30205) n_30211 y_30209))
      in ((loop_30204) x_30201 y_30202)

#[program]
def rem_21‹› : nat_5 -> nat_5 -> nat_5 :=
  fun rem_30214 : nat_5 -> nat_5 -> nat_5
  | x_30217 y_30218 =>
    ((sub_18) x_30217 ((mul_19) ((div_20) x_30217 y_30218) y_30218))

#[program]
inductive list_6‹s_30219,t_30220› (A_30221 : Type‹s_30219›):
  Type‹t_30220›
where
| nil_8 : (list_6‹s_30219,t_30220› A_30221)
| cons_9
    (hd_30222 : A_30221) (tl_30223 : (list_6‹s_30219,t_30220› A_30221))
    : (list_6‹s_30219,t_30220› A_30221)

#[program]
def free_list_22‹s_30224,t_30225› :
  ∀ {A_30226 : Type‹s_30224›} ->
    A_30226 -> unit_3 -> (list_6‹s_30224,t_30225› A_30226) -> unit_3
:=
  fun free_list_30230 :
    ∀ {A_30231 : Type‹s_30224›} ->
      A_30231 -> unit_3 -> (list_6‹s_30224,t_30225› A_30231) -> unit_3
  | A_30235 f_30236 nil_8 => tt_3
  | A_30237 f_30238 (cons_9 hd_30239 tl_30240) =>
    let __30241 := ((f_30238) hd_30239) in
    ((free_list_30230) A_30237 f_30238 tl_30240)

#[program]
inductive exists0_7‹s_30242,r_30243› (A_30244 : Type‹s_30242›) (B_30245 : 
A_30244 -> Type‹r_30243›): L where
| ex0_10
    {m_30247 : A_30244} (n_30248 : ((B_30245) m_30247))
    : (exists0_7‹s_30242,r_30243› A_30244 B_30245)

#[program]
inductive exists1_8‹s_30249,r_30250› (A_30251 : Type‹s_30249›) (B_30252 : 
A_30251 -> Type‹r_30250›): L where
| ex1_11
    (m_30254 : A_30251) (n_30255 : ((B_30252) m_30254))
    : (exists1_8‹s_30249,r_30250› A_30251 B_30252)

#[logical]
def prod0_23‹s_30256,r_30257› :
  Type‹s_30256› -> Type‹r_30257› -> L
:=
  fun prod0_30260 : Type‹s_30256› -> Type‹r_30257› -> L
  | A_30263 B_30264 =>
    (exists0_7‹s_30256,r_30257›
      A_30263 fun _30265 : A_30263 -> Type‹r_30257›
              | __30267 => B_30264)

#[logical]
def prod1_24‹s_30268,r_30269› :
  Type‹s_30268› -> Type‹r_30269› -> L
:=
  fun prod1_30272 : Type‹s_30268› -> Type‹r_30269› -> L
  | A_30275 B_30276 =>
    (exists1_8‹s_30268,r_30269›
      A_30275 fun _30277 : A_30275 -> Type‹r_30269›
              | __30279 => B_30276)

#[program]
def pow_25‹› : int -> int -> int :=
  fun pow_30282 : int -> int -> int
  | x_30285 y_30286 =>
    let loop_30287 :=
      fun loop_30288 : int -> int -> int
      | acc_30291 y_30292 =>
        match (__lte__ y_30292 0) in bool_4 -o int with
        | true_4 => acc_30291
        | false_5 =>
          ((loop_30288) (__mul__ x_30285 acc_30291) (__sub__ y_30292 1))
    in ((loop_30287) 1 y_30286)

#[program]
def powm_26‹› : int -> int -> int -> int :=
  fun powm_30297 : int -> int -> int -> int
  | x_30301 y_30302 m_30303 =>
    let loop_30304 :=
      fun loop_30305 : int -> int -> int
      | acc_30308 y_30309 =>
        match (__lte__ y_30309 0) in bool_4 -o int with
        | true_4 => acc_30308
        | false_5 =>
          ((loop_30305)
            (__mod__ (__mul__ x_30301 acc_30308) m_30303) (__sub__ y_30309 1))
    in ((loop_30304) 1 y_30302)

#[program]
def ord_27‹› : char -> int :=
  fun ord_30312 : char -> int
  | c_30314 => (__ord__ c_30314)

#[program]
def chr_28‹› : int -> char :=
  fun chr_30316 : int -> char
  | i_30318 => (__chr__ i_30318)

#[program]
def str_29‹› : char -> string :=
  fun str_30320 : char -> string
  | c_30322 => (__push__ "" c_30322)

#[program]
def strlen_30‹› : string -> int :=
  fun strlen_30324 : string -> int
  | s_30326 => (__size__ s_30326)

#[program]
def string_of_int_31‹› : int -> string :=
  fun string_of_int_30328 : int -> string
  | i_30330 =>
    let aux_30331 :=
      fun aux_30332 : int -> string
      | i_30334 =>
        match (__lte__ 10 i_30334) in bool_4 -o string with
        | true_4 =>
          let r_30336 := (__mod__ i_30334 10) in
          let i_30337 := (__div__ i_30334 10) in
          (__push__ ((aux_30332) i_30337)
            ((chr_28) (__add__ r_30336 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_30334 ((ord_27) 0))))
    in
    match (__lte__ 0 i_30330) in bool_4 -o string with
    | true_4 => ((aux_30331) i_30330)
    | false_5 => (__cat__ "~" ((aux_30331) (__neg__ i_30330)))

#[program]
def split_32‹t_30339› :
  (list_6‹U,t_30339› int) ->
    ((prod1_24‹t_30339,t_30339›)
      (list_6‹U,t_30339› int) (list_6‹U,t_30339› int))
:=
  fun split_30341 :
    (list_6‹U,t_30339› int) ->
      ((prod1_24‹t_30339,t_30339›)
        (list_6‹U,t_30339› int) (list_6‹U,t_30339› int))
  | nil_8 =>
    (ex1_11‹t_30339,t_30339›
      (list_6‹U,t_30339› int)
      fun _30343 : (list_6‹U,t_30339› int) -> Type‹t_30339›
      | __30345 => (list_6‹U,t_30339› int) (nil_8‹U,t_30339› int)
      (nil_8‹U,t_30339› int))
  | (cons_9 hd_30346 nil_8) =>
    (ex1_11‹t_30339,t_30339›
      (list_6‹U,t_30339› int)
      fun _30347 : (list_6‹U,t_30339› int) -> Type‹t_30339›
      | __30349 => (list_6‹U,t_30339› int)
      (cons_9‹U,t_30339› int hd_30346 (nil_8‹U,t_30339› int))
      (nil_8‹U,t_30339› int))
  | (cons_9 hd_30350 (cons_9 hd_30351 tl_30352)) =>
    match ((split_30341) tl_30352) in
      ((prod1_24‹t_30339,t_30339›)
        (list_6‹U,t_30339› int) (list_6‹U,t_30339› int)) -o
        ((prod1_24‹t_30339,t_30339›)
          (list_6‹U,t_30339› int) (list_6‹U,t_30339› int))
    with
    | (ex1_11 m_30354 n_30355) =>
      (ex1_11‹t_30339,t_30339›
        (list_6‹U,t_30339› int)
        fun _30356 : (list_6‹U,t_30339› int) -> Type‹t_30339›
        | __30358 => (list_6‹U,t_30339› int)
        (cons_9‹U,t_30339› int hd_30350 m_30354)
        (cons_9‹U,t_30339› int hd_30351 n_30355))

#[program]
def merge_33‹t_30359› :
  (list_6‹U,t_30359› int) ->
    (list_6‹U,t_30359› int) -o (list_6‹U,t_30359› int)
:=
  fun merge_30362 :
    (list_6‹U,t_30359› int) ->
      (list_6‹U,t_30359› int) -o (list_6‹U,t_30359› int)
  | nil_8 __30365 => __30365
  | (cons_9 hd_30366 tl_30367) nil_8 =>
    (cons_9‹U,t_30359› int hd_30366 tl_30367)
  | (cons_9 hd_30368 tl_30369) (cons_9 hd_30370 tl_30371) =>
    match (__lte__ hd_30368 hd_30370) in
      bool_4 -o (list_6‹U,t_30359› int)
    with
    | true_4 =>
      (cons_9‹U,t_30359›
        int hd_30368
        ((merge_30362)
          tl_30369 (cons_9‹U,t_30359› int hd_30370 tl_30371)))
    | false_5 =>
      (cons_9‹U,t_30359›
        int hd_30370
        ((merge_30362)
          (cons_9‹U,t_30359› int hd_30368 tl_30369) tl_30371))

#[program]
def msort_34‹t_30373› :
  (list_6‹U,t_30373› int) -> (list_6‹U,t_30373› int)
:=
  fun msort_30375 :
    (list_6‹U,t_30373› int) -> (list_6‹U,t_30373› int)
  | nil_8 => (nil_8‹U,t_30373› int)
  | (cons_9 hd_30377 nil_8) =>
    (cons_9‹U,t_30373› int hd_30377 (nil_8‹U,t_30373› int))
  | (cons_9 hd_30378 (cons_9 hd_30379 tl_30380)) =>
    match ((split_32‹t_30373›)
            (cons_9‹U,t_30373›
              int hd_30378 (cons_9‹U,t_30373› int hd_30379 tl_30380))) in
      ((prod1_24‹t_30373,t_30373›)
        (list_6‹U,t_30373› int) (list_6‹U,t_30373› int)) -o
        (list_6‹U,t_30373› int)
    with
    | (ex1_11 m_30382 n_30383) =>
      ((merge_33‹t_30373›)
        ((msort_30375) m_30382) ((msort_30375) n_30383))

#[logical]
def cmsort_ch_35‹t_30384› : (list_6‹U,t_30384› int) -> L :=
  fun cmsort_ch_30386 : (list_6‹U,t_30384› int) -> L
  | xs_30388 =>
    ch⟨⇑(__30389 :
           ((ssing_6‹t_30384›)
             (list_6‹U,t_30384› int) ((msort_34‹t_30384›) xs_30388))) ⇒
           •⟩

#[program]
def cmsort_worker_36‹t_30390› :
  int ->
    ∀ (zs_30392 : (list_6‹U,t_30390› int)) ->
      ((cmsort_ch_35‹t_30390›) zs_30392) -o IO unit_3
:=
  fun cmsort_worker_30394 :
    int ->
      ∀ (zs_30396 : (list_6‹U,t_30390› int)) ->
        ((cmsort_ch_35‹t_30390›) zs_30396) -o IO unit_3
  | spwn_30398 =>
    match (__lte__ spwn_30398 0) in
      bool_4 -o
        ∀ (zs_30400 : (list_6‹U,t_30390› int)) ->
          ((cmsort_ch_35‹t_30390›) zs_30400) -o IO unit_3
    with
    | true_4 =>
      fun _30402 :
        ∀ (zs_30403 : (list_6‹U,t_30390› int)) ->
          ((cmsort_ch_35‹t_30390›) zs_30403) -o IO unit_3
      | zs_30405 __30406 =>
        let* c_30407 :=
          ((send __30406)
            (just_2‹t_30390,t_30390›
              (list_6‹U,t_30390› int) ((msort_34‹t_30390›) zs_30405)))
        in close c_30407
    | false_5 =>
      fun _30408 :
        ∀ (zs_30409 : (list_6‹U,t_30390› int)) ->
          ((cmsort_ch_35‹t_30390›) zs_30409) -o IO unit_3
      | nil_8 __30411 =>
        let* c_30412 :=
          ((send __30411)
            (just_2‹t_30390,t_30390›
              (list_6‹U,t_30390› int) (nil_8‹U,t_30390› int)))
        in close c_30412
      | (cons_9 hd_30413 nil_8) __30414 =>
        let* c_30415 :=
          ((send __30414)
            (just_2‹t_30390,t_30390›
              (list_6‹U,t_30390› int)
              (cons_9‹U,t_30390› int hd_30413 (nil_8‹U,t_30390› int))))
        in close c_30415
      | (cons_9 hd_30416 (cons_9 hd_30417 tl_30418)) __30419 =>
        match ((split_32‹t_30390›)
                (cons_9‹U,t_30390›
                  int hd_30416 (cons_9‹U,t_30390› int hd_30417 tl_30418))),
        (refl_1‹t_30390›
          (list_6‹U,t_30390› int)
          match ((split_32‹t_30390›)
                  (cons_9‹U,t_30390›
                    int hd_30416
                    (cons_9‹U,t_30390› int hd_30417 tl_30418))) in
            ((prod1_24‹t_30390,t_30390›)
              (list_6‹U,t_30390› int) (list_6‹U,t_30390› int)) -o
              (list_6‹U,t_30390› int)
          with
          | (ex1_11 m_30421 n_30422) =>
            ((merge_33‹t_30390›)
              ((msort_34‹t_30390›) m_30421)
              ((msort_34‹t_30390›) n_30422))) in
          ∀ (h1_30423 :
            ((prod1_24‹t_30390,t_30390›)
              (list_6‹U,t_30390› int) (list_6‹U,t_30390› int))) -o
            {(eq_1‹t_30390›
               (list_6‹U,t_30390› int)
               match h1_30423 in
                 ((prod1_24‹t_30390,t_30390›)
                   (list_6‹U,t_30390› int) (list_6‹U,t_30390› int)) -o
                   (list_6‹U,t_30390› int)
               with
               | (ex1_11 m_30426 n_30427) =>
                 ((merge_33‹t_30390›)
                   ((msort_34‹t_30390›) m_30426)
                   ((msort_34‹t_30390›) n_30427))
               match ((split_32‹t_30390›)
                       (cons_9‹U,t_30390›
                         int hd_30416
                         (cons_9‹U,t_30390› int hd_30417 tl_30418))) in
                 ((prod1_24‹t_30390,t_30390›)
                   (list_6‹U,t_30390› int) (list_6‹U,t_30390› int)) -o
                   (list_6‹U,t_30390› int)
               with
               | (ex1_11 m_30429 n_30430) =>
                 ((merge_33‹t_30390›)
                   ((msort_34‹t_30390›) m_30429)
                   ((msort_34‹t_30390›) n_30430)))} -o
              IO unit_3
        with
        | (ex1_11 m_30431 n_30432), __30433 =>
          let* r1_30434 :=
            fork
              fun _30435 : ((cmsort_ch_35‹t_30390›) m_30431) -o IO unit_3
              | _30437 =>
                ((cmsort_worker_30394) (__sub__ spwn_30398 1) m_30431 _30437)
          in
          let* r2_30438 :=
            fork
              fun _30439 : ((cmsort_ch_35‹t_30390›) n_30432) -o IO unit_3
              | _30441 =>
                ((cmsort_worker_30394) (__sub__ spwn_30398 1) n_30432 _30441)
          in
          let* _30442 := recv r1_30434 in
          match _30442 in
            (exists1_8‹t_30390,L›
              ((ssing_6‹t_30390›)
                (list_6‹U,t_30390› int) ((msort_34‹t_30390›) m_30431))
              fun _30444 :
                ((ssing_6‹t_30390›)
                  (list_6‹U,t_30390› int)
                  ((msort_34‹t_30390›) m_30431)) -> L
              | __30446 => hc⟨•⟩) -o IO unit_3
          with
          | (ex1_11 m_30447 n_30448) =>
            let* __30449 := close n_30448 in
            let* _30450 := recv r2_30438 in
            match _30450 in
              (exists1_8‹t_30390,L›
                ((ssing_6‹t_30390›)
                  (list_6‹U,t_30390› int)
                  ((msort_34‹t_30390›) n_30432))
                fun _30452 :
                  ((ssing_6‹t_30390›)
                    (list_6‹U,t_30390› int)
                    ((msort_34‹t_30390›) n_30432)) -> L
                | __30454 => hc⟨•⟩) -o IO unit_3
            with
            | (ex1_11 m_30455 n_30456) =>
              let* __30457 := close n_30456 in
              match m_30447, m_30455 in
                ((ssing_6‹t_30390›)
                  (list_6‹U,t_30390› int)
                  ((msort_34‹t_30390›) m_30431)) -o
                  ((ssing_6‹t_30390›)
                    (list_6‹U,t_30390› int)
                    ((msort_34‹t_30390›) n_30432)) -o IO unit_3
              with
              | (just_2 m_30460), (just_2 m_30461) =>
                let zs1_30462 :=
                  ((just_2‹t_30390,t_30390›
                     (list_6‹U,t_30390› int)
                     ((merge_33‹t_30390›) m_30460 m_30461))
                    : ((ssing_6‹t_30390›)
                        (list_6‹U,t_30390› int)
                        ((merge_33‹t_30390›)
                          ((msort_34‹t_30390›) m_30431)
                          ((msort_34‹t_30390›) n_30432))))
                in
                let zs1_30463 :=
                  (((rwl_2‹t_30390,t_30390›)
                     (list_6‹U,t_30390› int)
                     ((merge_33‹t_30390›)
                       ((msort_34‹t_30390›) m_30431)
                       ((msort_34‹t_30390›) n_30432))
                     match ((split_32‹t_30390›)
                             (cons_9‹U,t_30390›
                               int hd_30416
                               (cons_9‹U,t_30390› int hd_30417 tl_30418))) in
                       ((prod1_24‹t_30390,t_30390›)
                         (list_6‹U,t_30390› int)
                         (list_6‹U,t_30390› int)) -o
                         (list_6‹U,t_30390› int)
                     with
                     | (ex1_11 m_30465 n_30466) =>
                       ((merge_33‹t_30390›)
                         ((msort_34‹t_30390›) m_30465)
                         ((msort_34‹t_30390›) n_30466))
                     fun _30467 :
                       (list_6‹U,t_30390› int) -> Type‹t_30390›
                     | __30469 =>
                       ((ssing_6‹t_30390›)
                         (list_6‹U,t_30390› int) __30469)
                     __30433 zs1_30462)
                    : ((ssing_6‹t_30390›)
                        (list_6‹U,t_30390› int)
                        ((msort_34‹t_30390›)
                          (cons_9‹U,t_30390›
                            int hd_30416
                            (cons_9‹U,t_30390› int hd_30417 tl_30418)))))
                in
                let* c_30470 := ((send __30419) zs1_30463) in
                let* __30471 := close c_30470 in return tt_3

#[program]
def cmsort_37‹t_30472› :
  ∀ (zs_30473 : (list_6‹U,t_30472› int)) ->
    IO ((ssing_6‹t_30472›)
         (list_6‹U,t_30472› int) ((msort_34‹t_30472›) zs_30473))
:=
  fun cmsort_30474 :
    ∀ (zs_30475 : (list_6‹U,t_30472› int)) ->
      IO ((ssing_6‹t_30472›)
           (list_6‹U,t_30472› int) ((msort_34‹t_30472›) zs_30475))
  | zs_30476 =>
    let* c_30477 :=
      fork
        fun _30478 : ((cmsort_ch_35‹t_30472›) zs_30476) -o IO unit_3
        | _30480 => ((cmsort_worker_36‹t_30472›) 4 zs_30476 _30480)
    in
    let* _30481 := recv c_30477 in
    match _30481 in
      (exists1_8‹t_30472,L›
        ((ssing_6‹t_30472›)
          (list_6‹U,t_30472› int) ((msort_34‹t_30472›) zs_30476))
        fun _30483 :
          ((ssing_6‹t_30472›)
            (list_6‹U,t_30472› int) ((msort_34‹t_30472›) zs_30476)) ->
            L
        | __30485 => hc⟨•⟩) -o
        IO ((ssing_6‹t_30472›)
             (list_6‹U,t_30472› int) ((msort_34‹t_30472›) zs_30476))
    with
    | (ex1_11 m_30486 n_30487) =>
      let* __30488 := close n_30487 in return m_30486

#[program]
def mklist_38‹t_30489› : int -> (list_6‹U,t_30489› int) :=
  fun mklist_30491 : int -> (list_6‹U,t_30489› int)
  | n_30493 =>
    match (__lte__ n_30493 0) in bool_4 -o (list_6‹U,t_30489› int) with
    | true_4 => (nil_8‹U,t_30489› int)
    | false_5 =>
      (cons_9‹U,t_30489›
        int n_30493 ((mklist_30491) (__sub__ n_30493 1)))

#[program]
def list_len_39‹t_30495› : (list_6‹U,t_30495› int) -> int :=
  fun list_len_30497 : (list_6‹U,t_30495› int) -> int
  | nil_8 => 0
  | (cons_9 hd_30499 tl_30500) => (__add__ 1 ((list_len_30497) tl_30500))

#[program]
def string_of_list_40‹t_30501› : (list_6‹U,t_30501› int) -> string :=
  fun string_of_list_30503 : (list_6‹U,t_30501› int) -> string
  | nil_8 => "nil"
  | (cons_9 hd_30505 tl_30506) =>
    (__cat__ (__cat__ ((string_of_int_31) hd_30505) " :: ")
      ((string_of_list_30503) tl_30506))

#[program]
def main_41‹› : IO unit_3 :=
  let test_30507 := ((mklist_38‹L›) 1000) in
  let* _30508 := ((cmsort_37‹L›) test_30507) in
  match _30508 in
    ((ssing_6‹L›) (list_6‹U,L› int) ((msort_34‹L›) test_30507)) -o
      IO unit_3
  with
  | (just_2 m_30510) =>
    let len_30511 := ((list_len_39‹L›) m_30510) in
    print ((string_of_int_31) len_30511)

-----------------------------------------

#[program]
def idU_43 := fun id_52626 (A_52627) -> (m_52628) ->
                m_52628

#[program]
def idL_42 := fun id_52629 (A_52630) -> (m_52631) ->
                m_52631

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_52632 {A_52633} -> {m_52634} -> {n_52635} -> {B_52636} ->
  {__52637} -> (__52638) ->
    match {NULL} with
    | reflU_13  => __52638
    end

#[program]
def rwlUL_46 :=
  fun rwl_52639 {A_52640} -> {m_52641} -> {n_52642} -> {B_52643} ->
  {__52644} -> (__52645) ->
    match {NULL} with
    | reflU_13  => __52645
    end

#[program]
def rwlLU_45 :=
  fun rwl_52646 {A_52647} -> {m_52648} -> {n_52649} -> {B_52650} ->
  {__52651} -> (__52652) ->
    match {NULL} with
    | reflL_12  => __52652
    end

#[program]
def rwlLL_44 :=
  fun rwl_52653 {A_52654} -> {m_52655} -> {n_52656} -> {B_52657} ->
  {__52658} -> (__52659) ->
    match {NULL} with
    | reflL_12  => __52659
    end

#[program]
def rwrUU_51 :=
  fun rwr_52660 {A_52661} -> {m_52662} -> {n_52663} -> {B_52664} ->
  {__52665} -> (__52666) ->
    match {NULL} with
    | reflU_13  => __52666
    end

#[program]
def rwrUL_50 :=
  fun rwr_52667 {A_52668} -> {m_52669} -> {n_52670} -> {B_52671} ->
  {__52672} -> (__52673) ->
    match {NULL} with
    | reflU_13  => __52673
    end

#[program]
def rwrLU_49 :=
  fun rwr_52674 {A_52675} -> {m_52676} -> {n_52677} -> {B_52678} ->
  {__52679} -> (__52680) ->
    match {NULL} with
    | reflL_12  => __52680
    end

#[program]
def rwrLL_48 :=
  fun rwr_52681 {A_52682} -> {m_52683} -> {n_52684} -> {B_52685} ->
  {__52686} -> (__52687) ->
    match {NULL} with
    | reflL_12  => __52687
    end

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_52688 {A_52689} -> {x_52690} -> (__52691) ->
    match __52691 with
    | justUU_17 m_52692 => m_52692
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_52693 {A_52694} -> {x_52695} -> (__52696) ->
    match __52696 with
    | justUL_16 m_52697 => m_52697
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_52698 {A_52699} -> {x_52700} -> (__52701) ->
    match __52701 with
    
    end

#[program]
def sing_elimLL_62 :=
  fun sing_elim_52702 {A_52703} -> {x_52704} -> (__52705) ->
    match __52705 with
    | justLL_14 m_52706 => m_52706
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_52707 (__52708) ->
    match __52708 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_52709 (__52710) -> (__52711) ->
    match __52710 with
    | true_4  =>
      match __52711 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_52712 (__52713) -> (__52714) ->
    match __52713 with
    | true_4  => true_4
    | false_5  =>
      match __52714 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_52715 (__52716) -> (__52717) -o
    match __52716 with
    | true_4  =>
      match __52717 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __52717 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_52718 (__52719) -> (__52720) ->
    match __52719 with
    | zero_6  => true_4
    | succ_7 n_52721 =>
      match __52720 with
      | zero_6  => false_5 | succ_7 n_52722 => ((lte_52718) n_52721 n_52722)
      end
    end

#[program]
def lt_15 :=
  fun lt_52723 (x_52724) -> (y_52725) ->
    ((lte_14) (succ_7 x_52724) y_52725)

#[program]
def pred_16 :=
  fun pred_52726 (__52727) ->
    match __52727 with
    | zero_6  => zero_6 | succ_7 n_52728 => n_52728
    end

#[program]
def add_17 :=
  fun add_52729 (__52730) -> (__52731) ->
    match __52730 with
    | zero_6  => __52731
    | succ_7 n_52732 => (succ_7 ((add_52729) n_52732 __52731))
    end

#[program]
def sub_18 :=
  fun sub_52733 (__52734) -> (__52735) ->
    match __52735 with
    | zero_6  => __52734
    | succ_7 n_52736 => ((sub_52733) ((pred_16) __52734) n_52736)
    end

#[program]
def mul_19 :=
  fun mul_52737 (__52738) -> (__52739) ->
    match __52738 with
    | zero_6  => zero_6
    | succ_7 n_52740 => ((add_17) __52739 ((mul_52737) n_52740 __52739))
    end

#[program]
def div_20 :=
  fun div_52741 (x_52742) -> (y_52743) ->
    match ((lt_15) x_52742 y_52743) with
    | true_4  => zero_6
    | false_5  =>
      let loop_52744 :=
        fun loop_52745 (x_52746) -> (y_52747) ->
          match ((sub_18) x_52746 ((pred_16) y_52747)) with
          | zero_6  => zero_6
          | succ_7 n_52748 => (succ_7 ((loop_52745) n_52748 y_52747))
          end
      in ((loop_52744) x_52742 y_52743)
    end

#[program]
def rem_21 :=
  fun rem_52749 (x_52750) -> (y_52751) ->
    ((sub_18) x_52750 ((mul_19) ((div_20) x_52750 y_52751) y_52751))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_52752 {A_52753} -> (f_52754) -> (__52755) ->
    match __52755 with
    | nilUU_24  => tt_3
    | consUU_25 hd_52756 tl_52757 =>
      let __52758 := ((f_52754) hd_52756) in
      ((free_list_52752) NULL f_52754 tl_52757)
    end

#[program]
def free_listUL_72 :=
  fun free_list_52759 {A_52760} -> (f_52761) -> (__52762) ->
    match __52762 with
    | nilUL_22  => tt_3
    | consUL_23 hd_52763 tl_52764 =>
      let __52765 := ((f_52761) hd_52763) in
      ((free_list_52759) NULL f_52761 tl_52764)
    end

#[program]
def free_listLL_70 :=
  fun free_list_52766 {A_52767} -> (f_52768) -> (__52769) ->
    match __52769 with
    | nilLL_18  => tt_3
    | consLL_19 hd_52770 tl_52771 =>
      let __52772 := ((f_52768) hd_52770) in
      ((free_list_52766) NULL f_52768 tl_52771)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_52773 (x_52774) -> (y_52775) ->
    let loop_52776 :=
      fun loop_52777 (acc_52778) -> (y_52779) ->
        match (__lte__ y_52779 0) with
        | true_4  => acc_52778
        | false_5  =>
          ((loop_52777) (__mul__ x_52774 acc_52778) (__sub__ y_52779 1))
        end
    in ((loop_52776) 1 y_52775)

#[program]
def powm_26 :=
  fun powm_52780 (x_52781) -> (y_52782) -> (m_52783) ->
    let loop_52784 :=
      fun loop_52785 (acc_52786) -> (y_52787) ->
        match (__lte__ y_52787 0) with
        | true_4  => acc_52786
        | false_5  =>
          ((loop_52785)
            (__mod__ (__mul__ x_52781 acc_52786) m_52783) (__sub__ y_52787 1))
        end
    in ((loop_52784) 1 y_52782)

#[program]
def ord_27 := fun ord_52788 (c_52789) ->
                (__ord__ c_52789)

#[program]
def chr_28 := fun chr_52790 (i_52791) ->
                (__chr__ i_52791)

#[program]
def str_29 := fun str_52792 (c_52793) ->
                (__push__ "" c_52793)

#[program]
def strlen_30 := fun strlen_52794 (s_52795) ->
                   (__size__ s_52795)

#[program]
def string_of_int_31 :=
  fun string_of_int_52796 (i_52797) ->
    let aux_52798 :=
      fun aux_52799 (i_52800) ->
        match (__lte__ 10 i_52800) with
        | true_4  =>
          let r_52801 := (__mod__ i_52800 10) in
          let i_52802 := (__div__ i_52800 10) in
          (__push__ ((aux_52799) i_52802)
            ((chr_28) (__add__ r_52801 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_52800 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_52797) with
    | true_4  => ((aux_52798) i_52797)
    | false_5  => (__cat__ "~" ((aux_52798) (__neg__ i_52797)))
    end

#[program]
def splitU_83 :=
  fun split_52803 (__52804) ->
    match __52804 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_52805 tl_52806 =>
      match tl_52806 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_52805 nilUU_24) nilUU_24)
      | consUU_25 hd_52807 tl_52808 =>
        match ((split_52803) tl_52808) with
        | ex1UU_33 m_52809 n_52810 =>
          (ex1UU_33
            (consUU_25 hd_52805 m_52809) (consUU_25 hd_52807 n_52810))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_52811 (__52812) ->
    match __52812 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_52813 tl_52814 =>
      match tl_52814 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_52813 nilUL_22) nilUL_22)
      | consUL_23 hd_52815 tl_52816 =>
        match ((split_52811) tl_52816) with
        | ex1LL_30 m_52817 n_52818 =>
          (ex1LL_30
            (consUL_23 hd_52813 m_52817) (consUL_23 hd_52815 n_52818))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_52819 (__52820) -> (__52821) -o
    match __52820 with
    | nilUU_24  => __52821
    | consUU_25 hd_52822 tl_52823 =>
      match __52821 with
      | nilUU_24  => (consUU_25 hd_52822 tl_52823)
      | consUU_25 hd_52824 tl_52825 =>
        match (__lte__ hd_52822 hd_52824) with
        | true_4  =>
          (consUU_25
            hd_52822 ((merge_52819) tl_52823 (consUU_25 hd_52824 tl_52825)))
        | false_5  =>
          (consUU_25
            hd_52824 ((merge_52819) (consUU_25 hd_52822 tl_52823) tl_52825))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_52826 (__52827) -> (__52828) -o
    match __52827 with
    | nilUL_22  => __52828
    | consUL_23 hd_52829 tl_52830 =>
      match __52828 with
      | nilUL_22  => (consUL_23 hd_52829 tl_52830)
      | consUL_23 hd_52831 tl_52832 =>
        match (__lte__ hd_52829 hd_52831) with
        | true_4  =>
          (consUL_23
            hd_52829 ((merge_52826) tl_52830 (consUL_23 hd_52831 tl_52832)))
        | false_5  =>
          (consUL_23
            hd_52831 ((merge_52826) (consUL_23 hd_52829 tl_52830) tl_52832))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_52833 (__52834) ->
    match __52834 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_52835 tl_52836 =>
      match tl_52836 with
      | nilUU_24  => (consUU_25 hd_52835 nilUU_24)
      | consUU_25 hd_52837 tl_52838 =>
        match ((splitU_83)
                (consUU_25 hd_52835 (consUU_25 hd_52837 tl_52838))) with
        | ex1UU_33 m_52839 n_52840 =>
          ((mergeU_85) ((msort_52833) m_52839) ((msort_52833) n_52840))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_52841 (__52842) ->
    match __52842 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_52843 tl_52844 =>
      match tl_52844 with
      | nilUL_22  => (consUL_23 hd_52843 nilUL_22)
      | consUL_23 hd_52845 tl_52846 =>
        match ((splitL_82)
                (consUL_23 hd_52843 (consUL_23 hd_52845 tl_52846))) with
        | ex1LL_30 m_52847 n_52848 =>
          ((mergeL_84) ((msort_52841) m_52847) ((msort_52841) n_52848))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_52849 (spwn_52850) ->
    match (__lte__ spwn_52850 0) with
    | true_4  =>
      fun _52851 (zs_52852) -> (__52853) -o
        let* c_52854 :=
          ((send[R,U] __52853) (justUU_17 ((msortU_87) zs_52852)))
        in close[true] c_52854
    | false_5  =>
      fun _52855 (zs_52856) -> (__52857) -o
        match zs_52856 with
        | nilUU_24  =>
          let* c_52858 := ((send[R,U] __52857) (justUU_17 nilUU_24)) in
          close[true] c_52858
        | consUU_25 hd_52859 tl_52860 =>
          match tl_52860 with
          | nilUU_24  =>
            let* c_52861 :=
              ((send[R,U] __52857) (justUU_17 (consUU_25 hd_52859 nilUU_24)))
            in close[true] c_52861
          | consUU_25 hd_52862 tl_52863 =>
            match ((splitU_83)
                    (consUU_25 hd_52859 (consUU_25 hd_52862 tl_52863))) with
            | ex1UU_33 m_52864 n_52865 =>
              let* r1_52866 :=
                fork
                  fun _52867 (_52868) -o
                    ((cmsort_worker_52849)
                      (__sub__ spwn_52850 1) m_52864 _52868)
              in
              let* r2_52869 :=
                fork
                  fun _52870 (_52871) -o
                    ((cmsort_worker_52849)
                      (__sub__ spwn_52850 1) n_52865 _52871)
              in
              let* _52872 := recv[R,U] r1_52866 in
              match _52872 with
              | ex1UL_32 m_52873 n_52874 =>
                let* __52875 := close[false] n_52874 in
                let* _52876 := recv[R,U] r2_52869 in
                match _52876 with
                | ex1UL_32 m_52877 n_52878 =>
                  let* __52879 := close[false] n_52878 in
                  match m_52873 with
                  | justUU_17 m_52880 =>
                    match m_52877 with
                    | justUU_17 m_52881 =>
                      let zs1_52882 :=
                        (justUU_17 ((mergeU_85) m_52880 m_52881))
                      in
                      let zs1_52883 :=
                        ((rwlUU_47) NULL NULL NULL NULL NULL zs1_52882)
                      in
                      let* c_52884 := ((send[R,U] __52857) zs1_52883) in
                      let* __52885 := close[true] c_52884 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_52886 (spwn_52887) ->
    match (__lte__ spwn_52887 0) with
    | true_4  =>
      fun _52888 (zs_52889) -> (__52890) -o
        let* c_52891 :=
          ((send[R,L] __52890) (justLL_14 ((msortL_86) zs_52889)))
        in close[true] c_52891
    | false_5  =>
      fun _52892 (zs_52893) -> (__52894) -o
        match zs_52893 with
        | nilUL_22  =>
          let* c_52895 := ((send[R,L] __52894) (justLL_14 nilUL_22)) in
          close[true] c_52895
        | consUL_23 hd_52896 tl_52897 =>
          match tl_52897 with
          | nilUL_22  =>
            let* c_52898 :=
              ((send[R,L] __52894) (justLL_14 (consUL_23 hd_52896 nilUL_22)))
            in close[true] c_52898
          | consUL_23 hd_52899 tl_52900 =>
            match ((splitL_82)
                    (consUL_23 hd_52896 (consUL_23 hd_52899 tl_52900))) with
            | ex1LL_30 m_52901 n_52902 =>
              let* r1_52903 :=
                fork
                  fun _52904 (_52905) -o
                    ((cmsort_worker_52886)
                      (__sub__ spwn_52887 1) m_52901 _52905)
              in
              let* r2_52906 :=
                fork
                  fun _52907 (_52908) -o
                    ((cmsort_worker_52886)
                      (__sub__ spwn_52887 1) n_52902 _52908)
              in
              let* _52909 := recv[R,L] r1_52903 in
              match _52909 with
              | ex1LL_30 m_52910 n_52911 =>
                let* __52912 := close[false] n_52911 in
                let* _52913 := recv[R,L] r2_52906 in
                match _52913 with
                | ex1LL_30 m_52914 n_52915 =>
                  let* __52916 := close[false] n_52915 in
                  match m_52910 with
                  | justLL_14 m_52917 =>
                    match m_52914 with
                    | justLL_14 m_52918 =>
                      let zs1_52919 :=
                        (justLL_14 ((mergeL_84) m_52917 m_52918))
                      in
                      let zs1_52920 :=
                        ((rwlLL_44) NULL NULL NULL NULL NULL zs1_52919)
                      in
                      let* c_52921 := ((send[R,L] __52894) zs1_52920) in
                      let* __52922 := close[true] c_52921 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_52923 (zs_52924) ->
    let* c_52925 :=
      fork fun _52926 (_52927) -o
             ((cmsort_workerU_91) 4 zs_52924 _52927)
    in
    let* _52928 := recv[R,U] c_52925 in
    match _52928 with
    | ex1UL_32 m_52929 n_52930 =>
      let* __52931 := close[false] n_52930 in return m_52929
    end

#[program]
def cmsortL_92 :=
  fun cmsort_52932 (zs_52933) ->
    let* c_52934 :=
      fork fun _52935 (_52936) -o
             ((cmsort_workerL_90) 4 zs_52933 _52936)
    in
    let* _52937 := recv[R,L] c_52934 in
    match _52937 with
    | ex1LL_30 m_52938 n_52939 =>
      let* __52940 := close[false] n_52939 in return m_52938
    end

#[program]
def mklistU_95 :=
  fun mklist_52941 (n_52942) ->
    match (__lte__ n_52942 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_52942 ((mklist_52941) (__sub__ n_52942 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_52943 (n_52944) ->
    match (__lte__ n_52944 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_52944 ((mklist_52943) (__sub__ n_52944 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_52945 (__52946) ->
    match __52946 with
    | nilUU_24  => 0
    | consUU_25 hd_52947 tl_52948 => (__add__ 1 ((list_len_52945) tl_52948))
    end

#[program]
def list_lenL_96 :=
  fun list_len_52949 (__52950) ->
    match __52950 with
    | nilUL_22  => 0
    | consUL_23 hd_52951 tl_52952 => (__add__ 1 ((list_len_52949) tl_52952))
    end

#[program]
def string_of_listU_99 :=
  fun string_of_list_52953 (__52954) ->
    match __52954 with
    | nilUU_24  => "nil"
    | consUU_25 hd_52955 tl_52956 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_52955) " :: ")
        ((string_of_list_52953) tl_52956))
    end

#[program]
def string_of_listL_98 :=
  fun string_of_list_52957 (__52958) ->
    match __52958 with
    | nilUL_22  => "nil"
    | consUL_23 hd_52959 tl_52960 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_52959) " :: ")
        ((string_of_list_52957) tl_52960))
    end

#[program]
def main :=
  let test_52961 := ((mklistL_94) 1000) in
  let* _52962 := ((cmsortL_92) test_52961) in
  match _52962 with
  | justLL_14 m_52963 =>
    let len_52964 := ((list_lenL_96) m_52963) in
    print ((string_of_int_31) len_52964)
  end

-----------------------------------------

#[program]
def idU_43 := fun id_53304 (A_53305) -> (m_53306) ->
                m_53306

#[program]
def idL_42 := fun id_53307 (A_53308) -> (m_53309) ->
                m_53309

#[logical]
inductive eqU_10 where
| reflU_13 of layout[]

#[logical]
inductive eqL_9 where
| reflL_12 of layout[]

#[program]
def rwlUU_47 :=
  fun rwl_53310 {A_53311} -> {m_53312} -> {n_53313} -> {B_53314} ->
  {__53315} -> (__53316) ->
    __53316

#[program]
def rwlUL_46 :=
  fun rwl_53317 {A_53318} -> {m_53319} -> {n_53320} -> {B_53321} ->
  {__53322} -> (__53323) ->
    __53323

#[program]
def rwlLU_45 :=
  fun rwl_53324 {A_53325} -> {m_53326} -> {n_53327} -> {B_53328} ->
  {__53329} -> (__53330) ->
    __53330

#[program]
def rwlLL_44 :=
  fun rwl_53331 {A_53332} -> {m_53333} -> {n_53334} -> {B_53335} ->
  {__53336} -> (__53337) ->
    __53337

#[program]
def rwrUU_51 :=
  fun rwr_53338 {A_53339} -> {m_53340} -> {n_53341} -> {B_53342} ->
  {__53343} -> (__53344) ->
    __53344

#[program]
def rwrUL_50 :=
  fun rwr_53345 {A_53346} -> {m_53347} -> {n_53348} -> {B_53349} ->
  {__53350} -> (__53351) ->
    __53351

#[program]
def rwrLU_49 :=
  fun rwr_53352 {A_53353} -> {m_53354} -> {n_53355} -> {B_53356} ->
  {__53357} -> (__53358) ->
    __53358

#[program]
def rwrLL_48 :=
  fun rwr_53359 {A_53360} -> {m_53361} -> {n_53362} -> {B_53363} ->
  {__53364} -> (__53365) ->
    __53365

#[logical]
def congrUUU_59 := NULL

#[logical]
def congrUUL_58 := NULL

#[logical]
def congrULU_57 := NULL

#[logical]
def congrULL_56 := NULL

#[logical]
def congrLUU_55 := NULL

#[logical]
def congrLUL_54 := NULL

#[logical]
def congrLLU_53 := NULL

#[logical]
def congrLLL_52 := NULL

#[logical]
def axiom_K_5 := NULL

#[program]
inductive singUU_14 where
| justUU_17 of layout[R]

#[program]
inductive singUL_13 where
| justUL_16 of layout[R]

#[program]
inductive singLU_12 where


#[program]
inductive singLL_11 where
| justLL_14 of layout[R]

#[logical]
def ssingU_61 := NULL

#[logical]
def ssingL_60 := NULL

#[program]
def sing_elimUU_65 :=
  fun sing_elim_53366 {A_53367} -> {x_53368} -> (__53369) ->
    match __53369 with
    | justUU_17 m_53370 => m_53370
    end

#[program]
def sing_elimUL_64 :=
  fun sing_elim_53371 {A_53372} -> {x_53373} -> (__53374) ->
    match __53374 with
    | justUL_16 m_53375 => m_53375
    end

#[program]
def sing_elimLU_63 :=
  fun sing_elim_53376 {A_53377} -> {x_53378} -> (__53379) ->
    !!

#[program]
def sing_elimLL_62 :=
  fun sing_elim_53380 {A_53381} -> {x_53382} -> (__53383) ->
    match __53383 with
    | justLL_14 m_53384 => m_53384
    end

#[logical]
def sing_uniqUU_69 := NULL

#[logical]
def sing_uniqUL_68 := NULL

#[logical]
def sing_uniqLU_67 := NULL

#[logical]
def sing_uniqLL_66 := NULL

#[program]
inductive unit_3 where
| tt_3 of layout[]

#[logical]
def unit_eta_9 := NULL

#[program]
inductive bool_4 where
| true_4 of layout[]
| false_5 of layout[]

#[program]
def not_10 :=
  fun not_53385 (__53386) ->
    match __53386 with
    | true_4  => false_5 | false_5  => true_4
    end

#[program]
def and_11 :=
  fun and_53387 (__53388) -> (__53389) ->
    match __53388 with
    | true_4  =>
      match __53389 with
      | true_4  => true_4 | false_5  => false_5
      end
    | false_5  => false_5
    end

#[program]
def or_12 :=
  fun or_53390 (__53391) -> (__53392) ->
    match __53391 with
    | true_4  => true_4
    | false_5  =>
      match __53392 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
def xor_13 :=
  fun xor_53393 (__53394) -> (__53395) -o
    match __53394 with
    | true_4  =>
      match __53395 with
      | true_4  => false_5 | false_5  => true_4
      end
    | false_5  =>
      match __53395 with
      | true_4  => true_4 | false_5  => false_5
      end
    end

#[program]
inductive nat_5 where
| zero_6 of layout[]
| succ_7 of layout[R]

#[program]
def lte_14 :=
  fun lte_53396 (__53397) -> (__53398) ->
    match __53397 with
    | zero_6  => true_4
    | succ_7 n_53399 =>
      match __53398 with
      | zero_6  => false_5 | succ_7 n_53400 => ((lte_53396) n_53399 n_53400)
      end
    end

#[program]
def lt_15 :=
  fun lt_53401 (x_53402) -> (y_53403) ->
    ((lte_14) (succ_7 x_53402) y_53403)

#[program]
def pred_16 :=
  fun pred_53404 (__53405) ->
    match __53405 with
    | zero_6  => zero_6 | succ_7 n_53406 => n_53406
    end

#[program]
def add_17 :=
  fun add_53407 (__53408) -> (__53409) ->
    match __53408 with
    | zero_6  => __53409
    | succ_7 n_53410 => (succ_7 ((add_53407) n_53410 __53409))
    end

#[program]
def sub_18 :=
  fun sub_53411 (__53412) -> (__53413) ->
    match __53413 with
    | zero_6  => __53412
    | succ_7 n_53414 => ((sub_53411) ((pred_16) __53412) n_53414)
    end

#[program]
def mul_19 :=
  fun mul_53415 (__53416) -> (__53417) ->
    match __53416 with
    | zero_6  => zero_6
    | succ_7 n_53418 => ((add_17) __53417 ((mul_53415) n_53418 __53417))
    end

#[program]
def div_20 :=
  fun div_53419 (x_53420) -> (y_53421) ->
    match ((lt_15) x_53420 y_53421) with
    | true_4  => zero_6
    | false_5  =>
      let loop_53422 :=
        fun loop_53423 (x_53424) -> (y_53425) ->
          match ((sub_18) x_53424 ((pred_16) y_53425)) with
          | zero_6  => zero_6
          | succ_7 n_53426 => (succ_7 ((loop_53423) n_53426 y_53425))
          end
      in ((loop_53422) x_53420 y_53421)
    end

#[program]
def rem_21 :=
  fun rem_53427 (x_53428) -> (y_53429) ->
    ((sub_18) x_53428 ((mul_19) ((div_20) x_53428 y_53429) y_53429))

#[program]
inductive listUU_18 where
| nilUU_24 of layout[]
| consUU_25 of layout[R, R]

#[program]
inductive listUL_17 where
| nilUL_22 of layout[]
| consUL_23 of layout[R, R]

#[program]
inductive listLU_16 where
| nilLU_20 of layout[]

#[program]
inductive listLL_15 where
| nilLL_18 of layout[]
| consLL_19 of layout[R, R]

#[program]
def free_listUU_73 :=
  fun free_list_53430 {A_53431} -> (f_53432) -> (__53433) ->
    match __53433 with
    | nilUU_24  => tt_3
    | consUU_25 hd_53434 tl_53435 =>
      let __53436 := ((f_53432) hd_53434) in
      ((free_list_53430) NULL f_53432 tl_53435)
    end

#[program]
def free_listUL_72 :=
  fun free_list_53437 {A_53438} -> (f_53439) -> (__53440) ->
    match __53440 with
    | nilUL_22  => tt_3
    | consUL_23 hd_53441 tl_53442 =>
      let __53443 := ((f_53439) hd_53441) in
      ((free_list_53437) NULL f_53439 tl_53442)
    end

#[program]
def free_listLL_70 :=
  fun free_list_53444 {A_53445} -> (f_53446) -> (__53447) ->
    match __53447 with
    | nilLL_18  => tt_3
    | consLL_19 hd_53448 tl_53449 =>
      let __53450 := ((f_53446) hd_53448) in
      ((free_list_53444) NULL f_53446 tl_53449)
    end

#[program]
inductive exists0UU_22 where
| ex0UU_29 of layout[N, R]

#[program]
inductive exists0UL_21 where
| ex0UL_28 of layout[N, R]

#[program]
inductive exists0LU_20 where
| ex0LU_27 of layout[N, R]

#[program]
inductive exists0LL_19 where
| ex0LL_26 of layout[N, R]

#[program]
inductive exists1UU_26 where
| ex1UU_33 of layout[R, R]

#[program]
inductive exists1UL_25 where
| ex1UL_32 of layout[R, R]

#[program]
inductive exists1LU_24 where
| ex1LU_31 of layout[R, R]

#[program]
inductive exists1LL_23 where
| ex1LL_30 of layout[R, R]

#[logical]
def prod0UU_77 := NULL

#[logical]
def prod0UL_76 := NULL

#[logical]
def prod0LU_75 := NULL

#[logical]
def prod0LL_74 := NULL

#[logical]
def prod1UU_81 := NULL

#[logical]
def prod1UL_80 := NULL

#[logical]
def prod1LU_79 := NULL

#[logical]
def prod1LL_78 := NULL

#[program]
def pow_25 :=
  fun pow_53451 (x_53452) -> (y_53453) ->
    let loop_53454 :=
      fun loop_53455 (acc_53456) -> (y_53457) ->
        match (__lte__ y_53457 0) with
        | true_4  => acc_53456
        | false_5  =>
          ((loop_53455) (__mul__ x_53452 acc_53456) (__sub__ y_53457 1))
        end
    in ((loop_53454) 1 y_53453)

#[program]
def powm_26 :=
  fun powm_53458 (x_53459) -> (y_53460) -> (m_53461) ->
    let loop_53462 :=
      fun loop_53463 (acc_53464) -> (y_53465) ->
        match (__lte__ y_53465 0) with
        | true_4  => acc_53464
        | false_5  =>
          ((loop_53463)
            (__mod__ (__mul__ x_53459 acc_53464) m_53461) (__sub__ y_53465 1))
        end
    in ((loop_53462) 1 y_53460)

#[program]
def ord_27 := fun ord_53466 (c_53467) ->
                (__ord__ c_53467)

#[program]
def chr_28 := fun chr_53468 (i_53469) ->
                (__chr__ i_53469)

#[program]
def str_29 := fun str_53470 (c_53471) ->
                (__push__ "" c_53471)

#[program]
def strlen_30 := fun strlen_53472 (s_53473) ->
                   (__size__ s_53473)

#[program]
def string_of_int_31 :=
  fun string_of_int_53474 (i_53475) ->
    let aux_53476 :=
      fun aux_53477 (i_53478) ->
        match (__lte__ 10 i_53478) with
        | true_4  =>
          let r_53479 := (__mod__ i_53478 10) in
          let i_53480 := (__div__ i_53478 10) in
          (__push__ ((aux_53477) i_53480)
            ((chr_28) (__add__ r_53479 ((ord_27) 0))))
        | false_5  => ((str_29) ((chr_28) (__add__ i_53478 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_53475) with
    | true_4  => ((aux_53476) i_53475)
    | false_5  => (__cat__ "~" ((aux_53476) (__neg__ i_53475)))
    end

#[program]
def splitU_83 :=
  fun split_53481 (__53482) ->
    match __53482 with
    | nilUU_24  => (ex1UU_33 nilUU_24 nilUU_24)
    | consUU_25 hd_53483 tl_53484 =>
      match tl_53484 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_53483 nilUU_24) nilUU_24)
      | consUU_25 hd_53485 tl_53486 =>
        match ((split_53481) tl_53486) with
        | ex1UU_33 m_53487 n_53488 =>
          (ex1UU_33
            (consUU_25 hd_53483 m_53487) (consUU_25 hd_53485 n_53488))
        end
      end
    end

#[program]
def splitL_82 :=
  fun split_53489 (__53490) ->
    match __53490 with
    | nilUL_22  => (ex1LL_30 nilUL_22 nilUL_22)
    | consUL_23 hd_53491 tl_53492 =>
      match tl_53492 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_53491 nilUL_22) nilUL_22)
      | consUL_23 hd_53493 tl_53494 =>
        match ((split_53489) tl_53494) with
        | ex1LL_30 m_53495 n_53496 =>
          (ex1LL_30
            (consUL_23 hd_53491 m_53495) (consUL_23 hd_53493 n_53496))
        end
      end
    end

#[program]
def mergeU_85 :=
  fun merge_53497 (__53498) -> (__53499) -o
    match __53498 with
    | nilUU_24  => __53499
    | consUU_25 hd_53500 tl_53501 =>
      match __53499 with
      | nilUU_24  => (consUU_25 hd_53500 tl_53501)
      | consUU_25 hd_53502 tl_53503 =>
        match (__lte__ hd_53500 hd_53502) with
        | true_4  =>
          (consUU_25
            hd_53500 ((merge_53497) tl_53501 (consUU_25 hd_53502 tl_53503)))
        | false_5  =>
          (consUU_25
            hd_53502 ((merge_53497) (consUU_25 hd_53500 tl_53501) tl_53503))
        end
      end
    end

#[program]
def mergeL_84 :=
  fun merge_53504 (__53505) -> (__53506) -o
    match __53505 with
    | nilUL_22  => __53506
    | consUL_23 hd_53507 tl_53508 =>
      match __53506 with
      | nilUL_22  => (consUL_23 hd_53507 tl_53508)
      | consUL_23 hd_53509 tl_53510 =>
        match (__lte__ hd_53507 hd_53509) with
        | true_4  =>
          (consUL_23
            hd_53507 ((merge_53504) tl_53508 (consUL_23 hd_53509 tl_53510)))
        | false_5  =>
          (consUL_23
            hd_53509 ((merge_53504) (consUL_23 hd_53507 tl_53508) tl_53510))
        end
      end
    end

#[program]
def msortU_87 :=
  fun msort_53511 (__53512) ->
    match __53512 with
    | nilUU_24  => nilUU_24
    | consUU_25 hd_53513 tl_53514 =>
      match tl_53514 with
      | nilUU_24  => (consUU_25 hd_53513 nilUU_24)
      | consUU_25 hd_53515 tl_53516 =>
        match ((splitU_83)
                (consUU_25 hd_53513 (consUU_25 hd_53515 tl_53516))) with
        | ex1UU_33 m_53517 n_53518 =>
          ((mergeU_85) ((msort_53511) m_53517) ((msort_53511) n_53518))
        end
      end
    end

#[program]
def msortL_86 :=
  fun msort_53519 (__53520) ->
    match __53520 with
    | nilUL_22  => nilUL_22
    | consUL_23 hd_53521 tl_53522 =>
      match tl_53522 with
      | nilUL_22  => (consUL_23 hd_53521 nilUL_22)
      | consUL_23 hd_53523 tl_53524 =>
        match ((splitL_82)
                (consUL_23 hd_53521 (consUL_23 hd_53523 tl_53524))) with
        | ex1LL_30 m_53525 n_53526 =>
          ((mergeL_84) ((msort_53519) m_53525) ((msort_53519) n_53526))
        end
      end
    end

#[logical]
def cmsort_chU_89 := NULL

#[logical]
def cmsort_chL_88 := NULL

#[program]
def cmsort_workerU_91 :=
  fun cmsort_worker_53527 (spwn_53528) ->
    match (__lte__ spwn_53528 0) with
    | true_4  =>
      fun _53529 (zs_53530) -> (__53531) -o
        let* c_53532 :=
          ((send[R,U] __53531) (justUU_17 ((msortU_87) zs_53530)))
        in close[true] c_53532
    | false_5  =>
      fun _53533 (zs_53534) -> (__53535) -o
        match zs_53534 with
        | nilUU_24  =>
          let* c_53536 := ((send[R,U] __53535) (justUU_17 nilUU_24)) in
          close[true] c_53536
        | consUU_25 hd_53537 tl_53538 =>
          match tl_53538 with
          | nilUU_24  =>
            let* c_53539 :=
              ((send[R,U] __53535) (justUU_17 (consUU_25 hd_53537 nilUU_24)))
            in close[true] c_53539
          | consUU_25 hd_53540 tl_53541 =>
            match ((splitU_83)
                    (consUU_25 hd_53537 (consUU_25 hd_53540 tl_53541))) with
            | ex1UU_33 m_53542 n_53543 =>
              let* r1_53544 :=
                fork
                  fun _53545 (_53546) -o
                    ((cmsort_worker_53527)
                      (__sub__ spwn_53528 1) m_53542 _53546)
              in
              let* r2_53547 :=
                fork
                  fun _53548 (_53549) -o
                    ((cmsort_worker_53527)
                      (__sub__ spwn_53528 1) n_53543 _53549)
              in
              let* _53550 := recv[R,U] r1_53544 in
              match _53550 with
              | ex1UL_32 m_53551 n_53552 =>
                let* __53553 := close[false] n_53552 in
                let* _53554 := recv[R,U] r2_53547 in
                match _53554 with
                | ex1UL_32 m_53555 n_53556 =>
                  let* __53557 := close[false] n_53556 in
                  match m_53551 with
                  | justUU_17 m_53558 =>
                    match m_53555 with
                    | justUU_17 m_53559 =>
                      let zs1_53560 :=
                        (justUU_17 ((mergeU_85) m_53558 m_53559))
                      in
                      let zs1_53561 :=
                        ((rwlUU_47) NULL NULL NULL NULL NULL zs1_53560)
                      in
                      let* c_53562 := ((send[R,U] __53535) zs1_53561) in
                      let* __53563 := close[true] c_53562 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsort_workerL_90 :=
  fun cmsort_worker_53564 (spwn_53565) ->
    match (__lte__ spwn_53565 0) with
    | true_4  =>
      fun _53566 (zs_53567) -> (__53568) -o
        let* c_53569 :=
          ((send[R,L] __53568) (justLL_14 ((msortL_86) zs_53567)))
        in close[true] c_53569
    | false_5  =>
      fun _53570 (zs_53571) -> (__53572) -o
        match zs_53571 with
        | nilUL_22  =>
          let* c_53573 := ((send[R,L] __53572) (justLL_14 nilUL_22)) in
          close[true] c_53573
        | consUL_23 hd_53574 tl_53575 =>
          match tl_53575 with
          | nilUL_22  =>
            let* c_53576 :=
              ((send[R,L] __53572) (justLL_14 (consUL_23 hd_53574 nilUL_22)))
            in close[true] c_53576
          | consUL_23 hd_53577 tl_53578 =>
            match ((splitL_82)
                    (consUL_23 hd_53574 (consUL_23 hd_53577 tl_53578))) with
            | ex1LL_30 m_53579 n_53580 =>
              let* r1_53581 :=
                fork
                  fun _53582 (_53583) -o
                    ((cmsort_worker_53564)
                      (__sub__ spwn_53565 1) m_53579 _53583)
              in
              let* r2_53584 :=
                fork
                  fun _53585 (_53586) -o
                    ((cmsort_worker_53564)
                      (__sub__ spwn_53565 1) n_53580 _53586)
              in
              let* _53587 := recv[R,L] r1_53581 in
              match _53587 with
              | ex1LL_30 m_53588 n_53589 =>
                let* __53590 := close[false] n_53589 in
                let* _53591 := recv[R,L] r2_53584 in
                match _53591 with
                | ex1LL_30 m_53592 n_53593 =>
                  let* __53594 := close[false] n_53593 in
                  match m_53588 with
                  | justLL_14 m_53595 =>
                    match m_53592 with
                    | justLL_14 m_53596 =>
                      let zs1_53597 :=
                        (justLL_14 ((mergeL_84) m_53595 m_53596))
                      in
                      let zs1_53598 :=
                        ((rwlLL_44) NULL NULL NULL NULL NULL zs1_53597)
                      in
                      let* c_53599 := ((send[R,L] __53572) zs1_53598) in
                      let* __53600 := close[true] c_53599 in return tt_3
                    end
                  end
                end
              end
            end
          end
        end
    end

#[program]
def cmsortU_93 :=
  fun cmsort_53601 (zs_53602) ->
    let* c_53603 :=
      fork fun _53604 (_53605) -o
             ((cmsort_workerU_91) 4 zs_53602 _53605)
    in
    let* _53606 := recv[R,U] c_53603 in
    match _53606 with
    | ex1UL_32 m_53607 n_53608 =>
      let* __53609 := close[false] n_53608 in return m_53607
    end

#[program]
def cmsortL_92 :=
  fun cmsort_53610 (zs_53611) ->
    let* c_53612 :=
      fork fun _53613 (_53614) -o
             ((cmsort_workerL_90) 4 zs_53611 _53614)
    in
    let* _53615 := recv[R,L] c_53612 in
    match _53615 with
    | ex1LL_30 m_53616 n_53617 =>
      let* __53618 := close[false] n_53617 in return m_53616
    end

#[program]
def mklistU_95 :=
  fun mklist_53619 (n_53620) ->
    match (__lte__ n_53620 0) with
    | true_4  => nilUU_24
    | false_5  => (consUU_25 n_53620 ((mklist_53619) (__sub__ n_53620 1)))
    end

#[program]
def mklistL_94 :=
  fun mklist_53621 (n_53622) ->
    match (__lte__ n_53622 0) with
    | true_4  => nilUL_22
    | false_5  => (consUL_23 n_53622 ((mklist_53621) (__sub__ n_53622 1)))
    end

#[program]
def list_lenU_97 :=
  fun list_len_53623 (__53624) ->
    match __53624 with
    | nilUU_24  => 0
    | consUU_25 hd_53625 tl_53626 => (__add__ 1 ((list_len_53623) tl_53626))
    end

#[program]
def list_lenL_96 :=
  fun list_len_53627 (__53628) ->
    match __53628 with
    | nilUL_22  => 0
    | consUL_23 hd_53629 tl_53630 => (__add__ 1 ((list_len_53627) tl_53630))
    end

#[program]
def string_of_listU_99 :=
  fun string_of_list_53631 (__53632) ->
    match __53632 with
    | nilUU_24  => "nil"
    | consUU_25 hd_53633 tl_53634 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_53633) " :: ")
        ((string_of_list_53631) tl_53634))
    end

#[program]
def string_of_listL_98 :=
  fun string_of_list_53635 (__53636) ->
    match __53636 with
    | nilUL_22  => "nil"
    | consUL_23 hd_53637 tl_53638 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_53637) " :: ")
        ((string_of_list_53635) tl_53638))
    end

#[program]
def main :=
  let test_53639 := ((mklistL_94) 1000) in
  let* _53640 := ((cmsortL_92) test_53639) in
  match _53640 with
  | justLL_14 m_53641 =>
    let len_53642 := ((list_lenL_96) m_53641) in
    print ((string_of_int_31) len_53642)
  end

-----------------------------------------

def idU_43 := fun id_54002 (A_54003) -> (m_54004) -> m_54004

def idL_42 := fun id_54005 (A_54006) -> (m_54007) -> m_54007

def rwlUU_47 :=
  fun rwl_54008 (A_54009) -> (m_54010) -> (n_54011) -> (B_54012) ->
  (__54013) -> (__54014) -> __54014

def rwlUL_46 :=
  fun rwl_54015 (A_54016) -> (m_54017) -> (n_54018) -> (B_54019) ->
  (__54020) -> (__54021) -> __54021

def rwlLU_45 :=
  fun rwl_54022 (A_54023) -> (m_54024) -> (n_54025) -> (B_54026) ->
  (__54027) -> (__54028) -> __54028

def rwlLL_44 :=
  fun rwl_54029 (A_54030) -> (m_54031) -> (n_54032) -> (B_54033) ->
  (__54034) -> (__54035) -> __54035

def rwrUU_51 :=
  fun rwr_54036 (A_54037) -> (m_54038) -> (n_54039) -> (B_54040) ->
  (__54041) -> (__54042) -> __54042

def rwrUL_50 :=
  fun rwr_54043 (A_54044) -> (m_54045) -> (n_54046) -> (B_54047) ->
  (__54048) -> (__54049) -> __54049

def rwrLU_49 :=
  fun rwr_54050 (A_54051) -> (m_54052) -> (n_54053) -> (B_54054) ->
  (__54055) -> (__54056) -> __54056

def rwrLL_48 :=
  fun rwr_54057 (A_54058) -> (m_54059) -> (n_54060) -> (B_54061) ->
  (__54062) -> (__54063) -> __54063

def sing_elimUU_65 :=
  fun sing_elim_54064 (A_54065) -> (x_54066) -> (__54067) -> __54067

def sing_elimUL_64 :=
  fun sing_elim_54068 (A_54069) -> (x_54070) -> (__54071) -> __54071

def sing_elimLU_63 :=
  fun sing_elim_54072 (A_54073) -> (x_54074) -> (__54075) -> !!

def sing_elimLL_62 :=
  fun sing_elim_54076 (A_54077) -> (x_54078) -> (__54079) -> __54079

def not_10 :=
  fun not_54080 (__54081) ->
    match __54081 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  fun and_54082 (__54083) -> (__54084) ->
    match __54083 with
    | true_4 =>
      match __54084 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  fun or_54085 (__54086) -> (__54087) ->
    match __54086 with
    | true_4 => true_4
    | false_5 =>
      match __54087 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  fun xor_54088 (__54089) -> (__54090) -o
    match __54089 with
    | true_4 =>
      match __54090 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __54090 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_54091 (__54092) -> (__54093) ->
    match __54092 with
    | zero_6  => true_4
    | succ_7 n_54094 =>
      match __54093 with
      | zero_6  => false_5 | succ_7 n_54095 => ((lte_54091) n_54094 n_54095)
      end
    end

def lt_15 :=
  fun lt_54096 (x_54097) -> (y_54098) -> ((lte_14) (succ_7 x_54097) y_54098)

def pred_16 :=
  fun pred_54099 (__54100) ->
    match __54100 with
    | zero_6  => (zero_6 ) | succ_7 n_54101 => n_54101
    end

def add_17 :=
  fun add_54102 (__54103) -> (__54104) ->
    match __54103 with
    | zero_6  => __54104
    | succ_7 n_54105 => (succ_7 ((add_54102) n_54105 __54104))
    end

def sub_18 :=
  fun sub_54106 (__54107) -> (__54108) ->
    match __54108 with
    | zero_6  => __54107
    | succ_7 n_54109 => ((sub_54106) ((pred_16) __54107) n_54109)
    end

def mul_19 :=
  fun mul_54110 (__54111) -> (__54112) ->
    match __54111 with
    | zero_6  => (zero_6 )
    | succ_7 n_54113 => ((add_17) __54112 ((mul_54110) n_54113 __54112))
    end

def div_20 :=
  fun div_54114 (x_54115) -> (y_54116) ->
    match ((lt_15) x_54115 y_54116) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_54117 :=
        fun loop_54118 (x_54119) -> (y_54120) ->
          match ((sub_18) x_54119 ((pred_16) y_54120)) with
          | zero_6  => (zero_6 )
          | succ_7 n_54121 => (succ_7 ((loop_54118) n_54121 y_54120))
          end
      in ((loop_54117) x_54115 y_54116)
    end

def rem_21 :=
  fun rem_54122 (x_54123) -> (y_54124) ->
    ((sub_18) x_54123 ((mul_19) ((div_20) x_54123 y_54124) y_54124))

def free_listUU_73 :=
  fun free_list_54125 (A_54126) -> (f_54127) -> (__54128) ->
    match __54128 with
    | nilUU_24  => tt_3
    | consUU_25 hd_54129 tl_54130 =>
      let __54131 := ((f_54127) hd_54129) in
      ((free_list_54125) NULL f_54127 tl_54130)
    end

def free_listUL_72 :=
  fun free_list_54132 (A_54133) -> (f_54134) -> (__54135) ->
    match __54135 with
    | nilUL_22  => tt_3
    | consUL_23 hd_54136 tl_54137 =>
      let __54138 := ((f_54134) hd_54136) in
      ((free_list_54132) NULL f_54134 tl_54137)
    end

def free_listLL_70 :=
  fun free_list_54139 (A_54140) -> (f_54141) -> (__54142) ->
    match __54142 with
    | nilLL_18  => tt_3
    | consLL_19 hd_54143 tl_54144 =>
      let __54145 := ((f_54141) hd_54143) in
      ((free_list_54139) NULL f_54141 tl_54144)
    end

def pow_25 :=
  fun pow_54146 (x_54147) -> (y_54148) ->
    let loop_54149 :=
      fun loop_54150 (acc_54151) -> (y_54152) ->
        match (__lte__ y_54152 0) with
        | true_4 => acc_54151
        | false_5 =>
          ((loop_54150) (__mul__ x_54147 acc_54151) (__sub__ y_54152 1))
        end
    in ((loop_54149) 1 y_54148)

def powm_26 :=
  fun powm_54153 (x_54154) -> (y_54155) -> (m_54156) ->
    let loop_54157 :=
      fun loop_54158 (acc_54159) -> (y_54160) ->
        match (__lte__ y_54160 0) with
        | true_4 => acc_54159
        | false_5 =>
          ((loop_54158)
            (__mod__ (__mul__ x_54154 acc_54159) m_54156) (__sub__ y_54160 1))
        end
    in ((loop_54157) 1 y_54155)

def ord_27 := fun ord_54161 (c_54162) -> (__ord__ c_54162)

def chr_28 := fun chr_54163 (i_54164) -> (__chr__ i_54164)

def str_29 := fun str_54165 (c_54166) -> (__push__ "" c_54166)

def strlen_30 := fun strlen_54167 (s_54168) -> (__size__ s_54168)

def string_of_int_31 :=
  fun string_of_int_54169 (i_54170) ->
    let aux_54171 :=
      fun aux_54172 (i_54173) ->
        match (__lte__ 10 i_54173) with
        | true_4 =>
          let r_54174 := (__mod__ i_54173 10) in
          let i_54175 := (__div__ i_54173 10) in
          (__push__ ((aux_54172) i_54175)
            ((chr_28) (__add__ r_54174 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_54173 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_54170) with
    | true_4 => ((aux_54171) i_54170)
    | false_5 => (__cat__ "~" ((aux_54171) (__neg__ i_54170)))
    end

def splitU_83 :=
  fun split_54176 (__54177) ->
    match __54177 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_54178 tl_54179 =>
      match tl_54179 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_54178 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_54180 tl_54181 =>
        match ((split_54176) tl_54181) with
        | ex1UU_33 m_54182 n_54183 =>
          (ex1UU_33
            (consUU_25 hd_54178 m_54182) (consUU_25 hd_54180 n_54183))
        end
      end
    end

def splitL_82 :=
  fun split_54184 (__54185) ->
    match __54185 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_54186 tl_54187 =>
      match tl_54187 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_54186 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_54188 tl_54189 =>
        match ((split_54184) tl_54189) with
        | ex1LL_30 m_54190 n_54191 =>
          (ex1LL_30
            (consUL_23 hd_54186 m_54190) (consUL_23 hd_54188 n_54191))
        end
      end
    end

def mergeU_85 :=
  fun merge_54192 (__54193) -> (__54194) -o
    match __54193 with
    | nilUU_24  => __54194
    | consUU_25 hd_54195 tl_54196 =>
      match __54194 with
      | nilUU_24  => (consUU_25 hd_54195 tl_54196)
      | consUU_25 hd_54197 tl_54198 =>
        match (__lte__ hd_54195 hd_54197) with
        | true_4 =>
          (consUU_25
            hd_54195 ((merge_54192) tl_54196 (consUU_25 hd_54197 tl_54198)))
        | false_5 =>
          (consUU_25
            hd_54197 ((merge_54192) (consUU_25 hd_54195 tl_54196) tl_54198))
        end
      end
    end

def mergeL_84 :=
  fun merge_54199 (__54200) -> (__54201) -o
    match __54200 with
    | nilUL_22  => __54201
    | consUL_23 hd_54202 tl_54203 =>
      match __54201 with
      | nilUL_22  => (consUL_23 hd_54202 tl_54203)
      | consUL_23 hd_54204 tl_54205 =>
        match (__lte__ hd_54202 hd_54204) with
        | true_4 =>
          (consUL_23
            hd_54202 ((merge_54199) tl_54203 (consUL_23 hd_54204 tl_54205)))
        | false_5 =>
          (consUL_23
            hd_54204 ((merge_54199) (consUL_23 hd_54202 tl_54203) tl_54205))
        end
      end
    end

def msortU_87 :=
  fun msort_54206 (__54207) ->
    match __54207 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_54208 tl_54209 =>
      match tl_54209 with
      | nilUU_24  => (consUU_25 hd_54208 (nilUU_24 ))
      | consUU_25 hd_54210 tl_54211 =>
        match ((splitU_83)
                (consUU_25 hd_54208 (consUU_25 hd_54210 tl_54211))) with
        | ex1UU_33 m_54212 n_54213 =>
          ((mergeU_85) ((msort_54206) m_54212) ((msort_54206) n_54213))
        end
      end
    end

def msortL_86 :=
  fun msort_54214 (__54215) ->
    match __54215 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_54216 tl_54217 =>
      match tl_54217 with
      | nilUL_22  => (consUL_23 hd_54216 (nilUL_22 ))
      | consUL_23 hd_54218 tl_54219 =>
        match ((splitL_82)
                (consUL_23 hd_54216 (consUL_23 hd_54218 tl_54219))) with
        | ex1LL_30 m_54220 n_54221 =>
          ((mergeL_84) ((msort_54214) m_54220) ((msort_54214) n_54221))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_54222 (spwn_54223) ->
    match (__lte__ spwn_54223 0) with
    | true_4 =>
      fun _54224 (zs_54225) -> (__54226) -o
        lazy(let c_54227 :=
               force(((lam (x_54228) -> lazy(send(__54226, x_54228)))
                       ((msortU_87) zs_54225)))
             in force(lazy(close[true] c_54227)))
      | false_5 =>
        fun _54229 (zs_54230) -> (__54231) -o
          match zs_54230 with
          | nilUU_24  =>
            lazy(let c_54232 :=
                   force(((lam (x_54233) -> lazy(send(__54231, x_54233)))
                           (nilUU_24 )))
                 in force(lazy(close[true] c_54232)))
          | consUU_25 hd_54234 tl_54235 =>
            match tl_54235 with
            | nilUU_24  =>
              lazy(let c_54236 :=
                     force(((lam (x_54237) -> lazy(send(__54231, x_54237)))
                             (consUU_25 hd_54234 (nilUU_24 ))))
                   in force(lazy(close[true] c_54236)))
            | consUU_25 hd_54238 tl_54239 =>
              match ((splitU_83)
                      (consUU_25 hd_54234 (consUU_25 hd_54238 tl_54239))) with
              | ex1UU_33 m_54240 n_54241 =>
                lazy(let r1_54242 :=
                       force(lazy(fork
                                    fun _54243 (_54244) -o
                                      ((cmsort_worker_54222)
                                        (__sub__ spwn_54223 1) m_54240 _54244)))
                     in
                     let r2_54245 :=
                       force(lazy(fork
                                    fun _54246 (_54247) -o
                                      ((cmsort_worker_54222)
                                        (__sub__ spwn_54223 1) n_54241 _54247)))
                     in
                     let _54248 := force(lazy(recv[U](r1_54242))) in
                     force(match _54248 with
                           | ex1UL_32 m_54249 n_54250 =>
                             lazy(let __54251 :=
                                    force(lazy(close[false] n_54250))
                                  in
                                  let _54252 :=
                                    force(lazy(recv[U](r2_54245)))
                                  in
                                  force(match _54252 with
                                        | ex1UL_32 m_54253 n_54254 =>
                                          lazy(let __54255 :=
                                                 force(lazy(close[false]
                                                              n_54254))
                                               in
                                               force(let zs1_54256 :=
                                                       ((mergeU_85)
                                                         m_54249 m_54253)
                                                     in
                                                     let zs1_54257 :=
                                                       ((rwlUU_47)
                                                         NULL NULL NULL NULL
                                                           NULL zs1_54256)
                                                     in
                                                     lazy(let c_54258 :=
                                                            force(((lam (x_54259) ->
                                                                    lazy(
                                                                    send(__54231, x_54259)))
                                                                    zs1_54257))
                                                          in
                                                          let __54260 :=
                                                            force(lazy(
                                                                  close[true]
                                                                    c_54258))
                                                          in
                                                          force(lazy(tt_3)))))
                                        end))
                           end))
                end
              end
            end
        end

def cmsort_workerL_90 :=
  fun cmsort_worker_54261 (spwn_54262) ->
    match (__lte__ spwn_54262 0) with
    | true_4 =>
      fun _54263 (zs_54264) -> (__54265) -o
        lazy(let c_54266 :=
               force(((lam (x_54267) -> lazy(send(__54265, x_54267)))
                       ((msortL_86) zs_54264)))
             in force(lazy(close[true] c_54266)))
      | false_5 =>
        fun _54268 (zs_54269) -> (__54270) -o
          match zs_54269 with
          | nilUL_22  =>
            lazy(let c_54271 :=
                   force(((lam (x_54272) -> lazy(send(__54270, x_54272)))
                           (nilUL_22 )))
                 in force(lazy(close[true] c_54271)))
          | consUL_23 hd_54273 tl_54274 =>
            match tl_54274 with
            | nilUL_22  =>
              lazy(let c_54275 :=
                     force(((lam (x_54276) -> lazy(send(__54270, x_54276)))
                             (consUL_23 hd_54273 (nilUL_22 ))))
                   in force(lazy(close[true] c_54275)))
            | consUL_23 hd_54277 tl_54278 =>
              match ((splitL_82)
                      (consUL_23 hd_54273 (consUL_23 hd_54277 tl_54278))) with
              | ex1LL_30 m_54279 n_54280 =>
                lazy(let r1_54281 :=
                       force(lazy(fork
                                    fun _54282 (_54283) -o
                                      ((cmsort_worker_54261)
                                        (__sub__ spwn_54262 1) m_54279 _54283)))
                     in
                     let r2_54284 :=
                       force(lazy(fork
                                    fun _54285 (_54286) -o
                                      ((cmsort_worker_54261)
                                        (__sub__ spwn_54262 1) n_54280 _54286)))
                     in
                     let _54287 := force(lazy(recv[L](r1_54281))) in
                     force(match _54287 with
                           | ex1LL_30 m_54288 n_54289 =>
                             lazy(let __54290 :=
                                    force(lazy(close[false] n_54289))
                                  in
                                  let _54291 :=
                                    force(lazy(recv[L](r2_54284)))
                                  in
                                  force(match _54291 with
                                        | ex1LL_30 m_54292 n_54293 =>
                                          lazy(let __54294 :=
                                                 force(lazy(close[false]
                                                              n_54293))
                                               in
                                               force(let zs1_54295 :=
                                                       ((mergeL_84)
                                                         m_54288 m_54292)
                                                     in
                                                     let zs1_54296 :=
                                                       ((rwlLL_44)
                                                         NULL NULL NULL NULL
                                                           NULL zs1_54295)
                                                     in
                                                     lazy(let c_54297 :=
                                                            force(((lam (x_54298) ->
                                                                    lazy(
                                                                    send(__54270, x_54298)))
                                                                    zs1_54296))
                                                          in
                                                          let __54299 :=
                                                            force(lazy(
                                                                  close[true]
                                                                    c_54297))
                                                          in
                                                          force(lazy(tt_3)))))
                                        end))
                           end))
                end
              end
            end
        end

def cmsortU_93 :=
  fun cmsort_54300 (zs_54301) ->
    lazy(let c_54302 :=
           force(lazy(fork
                        fun _54303 (_54304) -o
                          ((cmsort_workerU_91) 4 zs_54301 _54304)))
         in
         let _54305 := force(lazy(recv[U](c_54302))) in
         force(match _54305 with
               | ex1UL_32 m_54306 n_54307 =>
                 lazy(let __54308 := force(lazy(close[false] n_54307)) in
                      force(lazy(m_54306)))
               end))

def cmsortL_92 :=
  fun cmsort_54309 (zs_54310) ->
    lazy(let c_54311 :=
           force(lazy(fork
                        fun _54312 (_54313) -o
                          ((cmsort_workerL_90) 4 zs_54310 _54313)))
         in
         let _54314 := force(lazy(recv[L](c_54311))) in
         force(match _54314 with
               | ex1LL_30 m_54315 n_54316 =>
                 lazy(let __54317 := force(lazy(close[false] n_54316)) in
                      force(lazy(m_54315)))
               end))

def mklistU_95 :=
  fun mklist_54318 (n_54319) ->
    match (__lte__ n_54319 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_54319 ((mklist_54318) (__sub__ n_54319 1)))
    end

def mklistL_94 :=
  fun mklist_54320 (n_54321) ->
    match (__lte__ n_54321 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_54321 ((mklist_54320) (__sub__ n_54321 1)))
    end

def list_lenU_97 :=
  fun list_len_54322 (__54323) ->
    match __54323 with
    | nilUU_24  => 0
    | consUU_25 hd_54324 tl_54325 => (__add__ 1 ((list_len_54322) tl_54325))
    end

def list_lenL_96 :=
  fun list_len_54326 (__54327) ->
    match __54327 with
    | nilUL_22  => 0
    | consUL_23 hd_54328 tl_54329 => (__add__ 1 ((list_len_54326) tl_54329))
    end

def string_of_listU_99 :=
  fun string_of_list_54330 (__54331) ->
    match __54331 with
    | nilUU_24  => "nil"
    | consUU_25 hd_54332 tl_54333 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_54332) " :: ")
        ((string_of_list_54330) tl_54333))
    end

def string_of_listL_98 :=
  fun string_of_list_54334 (__54335) ->
    match __54335 with
    | nilUL_22  => "nil"
    | consUL_23 hd_54336 tl_54337 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_54336) " :: ")
        ((string_of_list_54334) tl_54337))
    end

def main :=
  let test_54338 := ((mklistL_94) 1000) in
  lazy(let _54339 := force(((cmsortL_92) test_54338)) in
       force(let len_54340 := ((list_lenL_96) _54339) in
             lazy(print ((string_of_int_31) len_54340))))

-----------------------------------------

def idU_43 := lam (A_54767) -> (m_54768) -> m_54768

def idL_42 := lam (A_54769) -> (m_54770) -> m_54770

def rwlUU_47 :=
  lam (A_54771) -> (m_54772) -> (n_54773) -> (B_54774) -> (__54775) ->
  (__54776) -> __54776

def rwlUL_46 :=
  lam (A_54777) -> (m_54778) -> (n_54779) -> (B_54780) -> (__54781) ->
  (__54782) -> __54782

def rwlLU_45 :=
  lam (A_54783) -> (m_54784) -> (n_54785) -> (B_54786) -> (__54787) ->
  (__54788) -> __54788

def rwlLL_44 :=
  lam (A_54789) -> (m_54790) -> (n_54791) -> (B_54792) -> (__54793) ->
  (__54794) -> __54794

def rwrUU_51 :=
  lam (A_54795) -> (m_54796) -> (n_54797) -> (B_54798) -> (__54799) ->
  (__54800) -> __54800

def rwrUL_50 :=
  lam (A_54801) -> (m_54802) -> (n_54803) -> (B_54804) -> (__54805) ->
  (__54806) -> __54806

def rwrLU_49 :=
  lam (A_54807) -> (m_54808) -> (n_54809) -> (B_54810) -> (__54811) ->
  (__54812) -> __54812

def rwrLL_48 :=
  lam (A_54813) -> (m_54814) -> (n_54815) -> (B_54816) -> (__54817) ->
  (__54818) -> __54818

def sing_elimUU_65 := lam (A_54819) -> (x_54820) -> (__54821) -> __54821

def sing_elimUL_64 := lam (A_54822) -> (x_54823) -> (__54824) -> __54824

def sing_elimLU_63 := lam (A_54825) -> (x_54826) -> (__54827) -> !!

def sing_elimLL_62 := lam (A_54828) -> (x_54829) -> (__54830) -> __54830

def not_10 :=
  lam (__54831) ->
    match __54831 with
    | true_4 => false_5 | false_5 => true_4
    end

def and_11 :=
  lam (__54832) -> (__54833) ->
    match __54832 with
    | true_4 =>
      match __54833 with
      | true_4 => true_4 | false_5 => false_5
      end
    | false_5 => false_5
    end

def or_12 :=
  lam (__54834) -> (__54835) ->
    match __54834 with
    | true_4 => true_4
    | false_5 =>
      match __54835 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def xor_13 :=
  lam (__54836) -> (__54837) -o
    match __54836 with
    | true_4 =>
      match __54837 with
      | true_4 => false_5 | false_5 => true_4
      end
    | false_5 =>
      match __54837 with
      | true_4 => true_4 | false_5 => false_5
      end
    end

def lte_14 :=
  fun lte_54838 (__54839) -> (__54840) ->
    match __54839 with
    | zero_6  => true_4
    | succ_7 n_54841 =>
      match __54840 with
      | zero_6  => false_5 | succ_7 n_54842 => ((lte_54838) n_54841 n_54842)
      end
    end

def lt_15 :=
  lam (x_54843) -> (y_54844) -> ((lte_14) (succ_7 x_54843) y_54844)

def pred_16 :=
  lam (__54845) ->
    match __54845 with
    | zero_6  => (zero_6 ) | succ_7 n_54846 => n_54846
    end

def add_17 :=
  fun add_54847 (__54848) -> (__54849) ->
    match __54848 with
    | zero_6  => __54849
    | succ_7 n_54850 => (succ_7 ((add_54847) n_54850 __54849))
    end

def sub_18 :=
  fun sub_54851 (__54852) -> (__54853) ->
    match __54853 with
    | zero_6  => __54852
    | succ_7 n_54854 => ((sub_54851) ((pred_16) __54852) n_54854)
    end

def mul_19 :=
  fun mul_54855 (__54856) -> (__54857) ->
    match __54856 with
    | zero_6  => (zero_6 )
    | succ_7 n_54858 => ((add_17) __54857 ((mul_54855) n_54858 __54857))
    end

def div_20 :=
  lam (x_54859) -> (y_54860) ->
    match ((lt_15) x_54859 y_54860) with
    | true_4 => (zero_6 )
    | false_5 =>
      let loop_54861 :=
        fun loop_54862 (x_54863) -> (y_54864) ->
          match ((sub_18) x_54863 ((pred_16) y_54864)) with
          | zero_6  => (zero_6 )
          | succ_7 n_54865 => (succ_7 ((loop_54862) n_54865 y_54864))
          end
      in ((loop_54861) x_54859 y_54860)
    end

def rem_21 :=
  lam (x_54866) -> (y_54867) ->
    ((sub_18) x_54866 ((mul_19) ((div_20) x_54866 y_54867) y_54867))

def free_listUU_73 :=
  fun free_list_54868 (A_54869) -> (f_54870) -> (__54871) ->
    match __54871 with
    | nilUU_24  => tt_3
    | consUU_25 hd_54872 tl_54873 =>
      let __54874 := ((f_54870) hd_54872) in
      ((free_list_54868) NULL f_54870 tl_54873)
    end

def free_listUL_72 :=
  fun free_list_54875 (A_54876) -> (f_54877) -> (__54878) ->
    match __54878 with
    | nilUL_22  => tt_3
    | consUL_23 hd_54879 tl_54880 =>
      let __54881 := ((f_54877) hd_54879) in
      ((free_list_54875) NULL f_54877 tl_54880)
    end

def free_listLL_70 :=
  fun free_list_54882 (A_54883) -> (f_54884) -> (__54885) ->
    match __54885 with
    | nilLL_18  => tt_3
    | consLL_19 hd_54886 tl_54887 =>
      let __54888 := ((f_54884) hd_54886) in
      ((free_list_54882) NULL f_54884 tl_54887)
    end

def pow_25 :=
  lam (x_54889) -> (y_54890) ->
    let loop_54891 :=
      fun loop_54892 (acc_54893) -> (y_54894) ->
        match (__lte__ y_54894 0) with
        | true_4 => acc_54893
        | false_5 =>
          ((loop_54892) (__mul__ x_54889 acc_54893) (__sub__ y_54894 1))
        end
    in ((loop_54891) 1 y_54890)

def powm_26 :=
  lam (x_54895) -> (y_54896) -> (m_54897) ->
    let loop_54898 :=
      fun loop_54899 (acc_54900) -> (y_54901) ->
        match (__lte__ y_54901 0) with
        | true_4 => acc_54900
        | false_5 =>
          ((loop_54899)
            (__mod__ (__mul__ x_54895 acc_54900) m_54897) (__sub__ y_54901 1))
        end
    in ((loop_54898) 1 y_54896)

def ord_27 := lam (c_54902) -> (__ord__ c_54902)

def chr_28 := lam (i_54903) -> (__chr__ i_54903)

def str_29 := lam (c_54904) -> (__push__ "" c_54904)

def strlen_30 := lam (s_54905) -> (__size__ s_54905)

def string_of_int_31 :=
  lam (i_54906) ->
    let aux_54907 :=
      fun aux_54908 (i_54909) ->
        match (__lte__ 10 i_54909) with
        | true_4 =>
          let r_54910 := (__mod__ i_54909 10) in
          let i_54911 := (__div__ i_54909 10) in
          (__push__ ((aux_54908) i_54911)
            ((chr_28) (__add__ r_54910 ((ord_27) 0))))
        | false_5 => ((str_29) ((chr_28) (__add__ i_54909 ((ord_27) 0))))
        end
    in
    match (__lte__ 0 i_54906) with
    | true_4 => ((aux_54907) i_54906)
    | false_5 => (__cat__ "~" ((aux_54907) (__neg__ i_54906)))
    end

def splitU_83 :=
  fun split_54912 (__54913) ->
    match __54913 with
    | nilUU_24  => (ex1UU_33 (nilUU_24 ) (nilUU_24 ))
    | consUU_25 hd_54914 tl_54915 =>
      match tl_54915 with
      | nilUU_24  => (ex1UU_33 (consUU_25 hd_54914 (nilUU_24 )) (nilUU_24 ))
      | consUU_25 hd_54916 tl_54917 =>
        match ((split_54912) tl_54917) with
        | ex1UU_33 m_54918 n_54919 =>
          (ex1UU_33
            (consUU_25 hd_54914 m_54918) (consUU_25 hd_54916 n_54919))
        end
      end
    end

def splitL_82 :=
  fun split_54920 (__54921) ->
    match __54921 with
    | nilUL_22  => (ex1LL_30 (nilUL_22 ) (nilUL_22 ))
    | consUL_23 hd_54922 tl_54923 =>
      match tl_54923 with
      | nilUL_22  => (ex1LL_30 (consUL_23 hd_54922 (nilUL_22 )) (nilUL_22 ))
      | consUL_23 hd_54924 tl_54925 =>
        match ((split_54920) tl_54925) with
        | ex1LL_30 m_54926 n_54927 =>
          (ex1LL_30
            (consUL_23 hd_54922 m_54926) (consUL_23 hd_54924 n_54927))
        end
      end
    end

def mergeU_85 :=
  fun merge_54928 (__54929) -> (__54930) -o
    match __54929 with
    | nilUU_24  => __54930
    | consUU_25 hd_54931 tl_54932 =>
      match __54930 with
      | nilUU_24  => (consUU_25 hd_54931 tl_54932)
      | consUU_25 hd_54933 tl_54934 =>
        match (__lte__ hd_54931 hd_54933) with
        | true_4 =>
          (consUU_25
            hd_54931 ((merge_54928) tl_54932 (consUU_25 hd_54933 tl_54934)))
        | false_5 =>
          (consUU_25
            hd_54933 ((merge_54928) (consUU_25 hd_54931 tl_54932) tl_54934))
        end
      end
    end

def mergeL_84 :=
  fun merge_54935 (__54936) -> (__54937) -o
    match __54936 with
    | nilUL_22  => __54937
    | consUL_23 hd_54938 tl_54939 =>
      match __54937 with
      | nilUL_22  => (consUL_23 hd_54938 tl_54939)
      | consUL_23 hd_54940 tl_54941 =>
        match (__lte__ hd_54938 hd_54940) with
        | true_4 =>
          (consUL_23
            hd_54938 ((merge_54935) tl_54939 (consUL_23 hd_54940 tl_54941)))
        | false_5 =>
          (consUL_23
            hd_54940 ((merge_54935) (consUL_23 hd_54938 tl_54939) tl_54941))
        end
      end
    end

def msortU_87 :=
  fun msort_54942 (__54943) ->
    match __54943 with
    | nilUU_24  => (nilUU_24 )
    | consUU_25 hd_54944 tl_54945 =>
      match tl_54945 with
      | nilUU_24  => (consUU_25 hd_54944 (nilUU_24 ))
      | consUU_25 hd_54946 tl_54947 =>
        match ((splitU_83)
                (consUU_25 hd_54944 (consUU_25 hd_54946 tl_54947))) with
        | ex1UU_33 m_54948 n_54949 =>
          ((mergeU_85) ((msort_54942) m_54948) ((msort_54942) n_54949))
        end
      end
    end

def msortL_86 :=
  fun msort_54950 (__54951) ->
    match __54951 with
    | nilUL_22  => (nilUL_22 )
    | consUL_23 hd_54952 tl_54953 =>
      match tl_54953 with
      | nilUL_22  => (consUL_23 hd_54952 (nilUL_22 ))
      | consUL_23 hd_54954 tl_54955 =>
        match ((splitL_82)
                (consUL_23 hd_54952 (consUL_23 hd_54954 tl_54955))) with
        | ex1LL_30 m_54956 n_54957 =>
          ((mergeL_84) ((msort_54950) m_54956) ((msort_54950) n_54957))
        end
      end
    end

def cmsort_workerU_91 :=
  fun cmsort_worker_54958 (spwn_54959) ->
    match (__lte__ spwn_54959 0) with
    | true_4 =>
      lam (zs_54960) -> (__54961) -o
        lazy(let c_54962 := send(__54961, ((msortU_87) zs_54960)) in
             close[true] c_54962)
    | false_5 =>
      lam (zs_54963) -> (__54964) -o
        match zs_54963 with
        | nilUU_24  =>
          lazy(let c_54965 := send(__54964, (nilUU_24 )) in
               close[true] c_54965)
        | consUU_25 hd_54966 tl_54967 =>
          match tl_54967 with
          | nilUU_24  =>
            lazy(let c_54968 :=
                   send(__54964, (consUU_25 hd_54966 (nilUU_24 )))
                 in close[true] c_54968)
          | consUU_25 hd_54969 tl_54970 =>
            match ((splitU_83)
                    (consUU_25 hd_54966 (consUU_25 hd_54969 tl_54970))) with
            | ex1UU_33 m_54971 n_54972 =>
              lazy(let r1_54973 :=
                     fork
                       lam (_54974) -o
                         ((cmsort_worker_54958)
                           (__sub__ spwn_54959 1) m_54971 _54974)
                   in
                   let r2_54975 :=
                     fork
                       lam (_54976) -o
                         ((cmsort_worker_54958)
                           (__sub__ spwn_54959 1) n_54972 _54976)
                   in
                   let _54977 := recv[U](r1_54973) in
                   match _54977 with
                   | ex1UL_32 m_54978 n_54979 =>
                     let __54980 := close[false] n_54979 in
                     let _54981 := recv[U](r2_54975) in
                     match _54981 with
                     | ex1UL_32 m_54982 n_54983 =>
                       let __54984 := close[false] n_54983 in
                       let zs1_54985 := ((mergeU_85) m_54978 m_54982) in
                       let zs1_54986 :=
                         ((rwlUU_47) NULL NULL NULL NULL NULL zs1_54985)
                       in
                       let c_54987 := send(__54964, zs1_54986) in
                       let __54988 := close[true] c_54987 in tt_3
                     end
                   end)
            end
          end
        end
    end

def cmsort_workerL_90 :=
  fun cmsort_worker_54989 (spwn_54990) ->
    match (__lte__ spwn_54990 0) with
    | true_4 =>
      lam (zs_54991) -> (__54992) -o
        lazy(let c_54993 := send(__54992, ((msortL_86) zs_54991)) in
             close[true] c_54993)
    | false_5 =>
      lam (zs_54994) -> (__54995) -o
        match zs_54994 with
        | nilUL_22  =>
          lazy(let c_54996 := send(__54995, (nilUL_22 )) in
               close[true] c_54996)
        | consUL_23 hd_54997 tl_54998 =>
          match tl_54998 with
          | nilUL_22  =>
            lazy(let c_54999 :=
                   send(__54995, (consUL_23 hd_54997 (nilUL_22 )))
                 in close[true] c_54999)
          | consUL_23 hd_55000 tl_55001 =>
            match ((splitL_82)
                    (consUL_23 hd_54997 (consUL_23 hd_55000 tl_55001))) with
            | ex1LL_30 m_55002 n_55003 =>
              lazy(let r1_55004 :=
                     fork
                       lam (_55005) -o
                         ((cmsort_worker_54989)
                           (__sub__ spwn_54990 1) m_55002 _55005)
                   in
                   let r2_55006 :=
                     fork
                       lam (_55007) -o
                         ((cmsort_worker_54989)
                           (__sub__ spwn_54990 1) n_55003 _55007)
                   in
                   let _55008 := recv[L](r1_55004) in
                   match _55008 with
                   | ex1LL_30 m_55009 n_55010 =>
                     let __55011 := close[false] n_55010 in
                     let _55012 := recv[L](r2_55006) in
                     match _55012 with
                     | ex1LL_30 m_55013 n_55014 =>
                       let __55015 := close[false] n_55014 in
                       let zs1_55016 := ((mergeL_84) m_55009 m_55013) in
                       let zs1_55017 :=
                         ((rwlLL_44) NULL NULL NULL NULL NULL zs1_55016)
                       in
                       let c_55018 := send(__54995, zs1_55017) in
                       let __55019 := close[true] c_55018 in tt_3
                     end
                   end)
            end
          end
        end
    end

def cmsortU_93 :=
  lam (zs_55020) ->
    lazy(let c_55021 :=
           fork lam (_55022) -o ((cmsort_workerU_91) 4 zs_55020 _55022)
         in
         let _55023 := recv[U](c_55021) in
         match _55023 with
         | ex1UL_32 m_55024 n_55025 =>
           let __55026 := close[false] n_55025 in m_55024
         end)

def cmsortL_92 :=
  lam (zs_55027) ->
    lazy(let c_55028 :=
           fork lam (_55029) -o ((cmsort_workerL_90) 4 zs_55027 _55029)
         in
         let _55030 := recv[L](c_55028) in
         match _55030 with
         | ex1LL_30 m_55031 n_55032 =>
           let __55033 := close[false] n_55032 in m_55031
         end)

def mklistU_95 :=
  fun mklist_55034 (n_55035) ->
    match (__lte__ n_55035 0) with
    | true_4 => (nilUU_24 )
    | false_5 => (consUU_25 n_55035 ((mklist_55034) (__sub__ n_55035 1)))
    end

def mklistL_94 :=
  fun mklist_55036 (n_55037) ->
    match (__lte__ n_55037 0) with
    | true_4 => (nilUL_22 )
    | false_5 => (consUL_23 n_55037 ((mklist_55036) (__sub__ n_55037 1)))
    end

def list_lenU_97 :=
  fun list_len_55038 (__55039) ->
    match __55039 with
    | nilUU_24  => 0
    | consUU_25 hd_55040 tl_55041 => (__add__ 1 ((list_len_55038) tl_55041))
    end

def list_lenL_96 :=
  fun list_len_55042 (__55043) ->
    match __55043 with
    | nilUL_22  => 0
    | consUL_23 hd_55044 tl_55045 => (__add__ 1 ((list_len_55042) tl_55045))
    end

def string_of_listU_99 :=
  fun string_of_list_55046 (__55047) ->
    match __55047 with
    | nilUU_24  => "nil"
    | consUU_25 hd_55048 tl_55049 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_55048) " :: ")
        ((string_of_list_55046) tl_55049))
    end

def string_of_listL_98 :=
  fun string_of_list_55050 (__55051) ->
    match __55051 with
    | nilUL_22  => "nil"
    | consUL_23 hd_55052 tl_55053 =>
      (__cat__ (__cat__ ((string_of_int_31) hd_55052) " :: ")
        ((string_of_list_55050) tl_55053))
    end

def main :=
  let test_55054 := ((mklistL_94) 1000) in
  lazy(let _55055 := force(((cmsortL_92) test_55054)) in
       let len_55056 := ((list_lenL_96) _55055) in
       print ((string_of_int_31) len_55056))

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := mkconstr(consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := mkconstr(nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := mkconstr(nilUL_22, []);
          x_296 := mkconstr(consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := mkconstr(consUL_23, [hd_292, m_303]);
              x_306 := mkconstr(consUL_23, [hd_299, n_304]);
              x_307 := mkconstr(ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := mkconstr(consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := mkconstr(consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := mkconstr(consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := mkconstr(consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := mkconstr(consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := mkconstr(nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := mkconstr(nilUL_22, []);
          x_372 := mkconstr(consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := mkconstr(consUL_23, [hd_373, tl_374]);
          x_378 := mkconstr(consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(spwn_385%U) {
  x_387 := lte(spwn_385, 0);
  match(x_387){
    true_4() => {
      x_388 :=
        fn lam_389(zs_390%U, __391%L) {
          x_392 :=
            lazy {
              x_395 := msortU_344(zs_390);
              x_394 := send(__391, x_395);
              c_393 := x_394;
              x_396 := close[true](c_393);
              return x_396;
            };
          return x_392;
        };
      x_386 := x_388;
    }
    false_5() => {
      x_397 :=
        fn lam_398(zs_399%U, __400%L) {
          match[U](zs_399){
            nilUU_24() => {
              x_402 :=
                lazy {
                  x_405 := mkconstr(nilUU_24, []);
                  x_404 := send(__400, x_405);
                  c_403 := x_404;
                  x_406 := close[true](c_403);
                  return x_406;
                };
              x_401 := x_402;
            }
            consUU_25(hd_407, tl_408) => {
              match[U](tl_408){
                nilUU_24() => {
                  x_410 :=
                    lazy {
                      x_413 := mkconstr(nilUU_24, []);
                      x_414 := mkconstr(consUU_25, [hd_407, x_413]);
                      x_412 := send(__400, x_414);
                      c_411 := x_412;
                      x_415 := close[true](c_411);
                      return x_415;
                    };
                  x_409 := x_410;
                }
                consUU_25(hd_416, tl_417) => {
                  x_420 := mkconstr(consUU_25, [hd_416, tl_417]);
                  x_421 := mkconstr(consUU_25, [hd_407, x_420]);
                  x_419 := splitU_264(x_421);
                  match[L](x_419){
                    ex1UU_33(m_422, n_423) => {
                      x_424 :=
                        lazy {
                          x_427 :=
                            fn lam_428(_429%L) {
                              x_431 := sub(spwn_385, 1);
                              x_430 := cmsort_workerU_384(x_431, m_422, _429);
                              return x_430;
                            };
                          x_426 := fork(x_427);
                          r1_425 := x_426;
                          x_434 :=
                            fn lam_435(_436%L) {
                              x_438 := sub(spwn_385, 1);
                              x_437 := cmsort_workerU_384(x_438, n_423, _436);
                              return x_437;
                            };
                          x_433 := fork(x_434);
                          r2_432 := x_433;
                          x_440 := recv[U](r1_425);
                          _439 := x_440;
                          match[L](_439){
                            ex1UL_32(m_442, n_443) => {
                              x_445 := close[false](n_443);
                              __444 := x_445;
                              x_447 := recv[U](r2_432);
                              _446 := x_447;
                              match[L](_446){
                                ex1UL_32(m_449, n_450) => {
                                  x_452 := close[false](n_450);
                                  __451 := x_452;
                                  x_454 := mergeU_308(m_442, m_449);
                                  zs1_453 := x_454;
                                  x_456 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_453);
                                  zs1_455 := x_456;
                                  x_458 := send(__400, zs1_455);
                                  c_457 := x_458;
                                  x_460 := close[true](c_457);
                                  __459 := x_460;
                                  x_448 := tt_3;
                                }
                              }
                              x_441 := x_448;
                            }
                          }
                          return x_441;
                        };
                      x_418 := x_424;
                    }
                  }
                  x_409 := x_418;
                }
              }
              x_401 := x_409;
            }
          }
          return x_401;
        };
      x_386 := x_397;
    }
  }
  return x_386;
}

fn cmsort_workerL_461(spwn_462%U) {
  x_464 := lte(spwn_462, 0);
  match(x_464){
    true_4() => {
      x_465 :=
        fn lam_466(zs_467%U, __468%L) {
          x_469 :=
            lazy {
              x_472 := msortL_364(zs_467);
              x_471 := send(__468, x_472);
              c_470 := x_471;
              x_473 := close[true](c_470);
              return x_473;
            };
          return x_469;
        };
      x_463 := x_465;
    }
    false_5() => {
      x_474 :=
        fn lam_475(zs_476%U, __477%L) {
          match[L](zs_476){
            nilUL_22() => {
              x_479 :=
                lazy {
                  x_482 := mkconstr(nilUL_22, []);
                  x_481 := send(__477, x_482);
                  c_480 := x_481;
                  x_483 := close[true](c_480);
                  return x_483;
                };
              x_478 := x_479;
            }
            consUL_23(hd_484, tl_485) => {
              match[L](tl_485){
                nilUL_22() => {
                  x_487 :=
                    lazy {
                      x_490 := mkconstr(nilUL_22, []);
                      x_491 := mkconstr(consUL_23, [hd_484, x_490]);
                      x_489 := send(__477, x_491);
                      c_488 := x_489;
                      x_492 := close[true](c_488);
                      return x_492;
                    };
                  x_486 := x_487;
                }
                consUL_23(hd_493, tl_494) => {
                  x_497 := mkconstr(consUL_23, [hd_493, tl_494]);
                  x_498 := mkconstr(consUL_23, [hd_484, x_497]);
                  x_496 := splitL_286(x_498);
                  match[L](x_496){
                    ex1LL_30(m_499, n_500) => {
                      x_501 :=
                        lazy {
                          x_504 :=
                            fn lam_505(_506%L) {
                              x_508 := sub(spwn_462, 1);
                              x_507 := cmsort_workerL_461(x_508, m_499, _506);
                              return x_507;
                            };
                          x_503 := fork(x_504);
                          r1_502 := x_503;
                          x_511 :=
                            fn lam_512(_513%L) {
                              x_515 := sub(spwn_462, 1);
                              x_514 := cmsort_workerL_461(x_515, n_500, _513);
                              return x_514;
                            };
                          x_510 := fork(x_511);
                          r2_509 := x_510;
                          x_517 := recv[L](r1_502);
                          _516 := x_517;
                          match[L](_516){
                            ex1LL_30(m_519, n_520) => {
                              x_522 := close[false](n_520);
                              __521 := x_522;
                              x_524 := recv[L](r2_509);
                              _523 := x_524;
                              match[L](_523){
                                ex1LL_30(m_526, n_527) => {
                                  x_529 := close[false](n_527);
                                  __528 := x_529;
                                  x_531 := mergeL_326(m_519, m_526);
                                  zs1_530 := x_531;
                                  x_533 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_530);
                                  zs1_532 := x_533;
                                  x_535 := send(__477, zs1_532);
                                  c_534 := x_535;
                                  x_537 := close[true](c_534);
                                  __536 := x_537;
                                  x_525 := tt_3;
                                }
                              }
                              x_518 := x_525;
                            }
                          }
                          return x_518;
                        };
                      x_495 := x_501;
                    }
                  }
                  x_486 := x_495;
                }
              }
              x_478 := x_486;
            }
          }
          return x_478;
        };
      x_463 := x_474;
    }
  }
  return x_463;
}

fn cmsortU_538(zs_539%U) {
  x_540 :=
    lazy {
      x_543 :=
        fn lam_544(_545%L) {
          x_546 := cmsort_workerU_384(4, zs_539, _545);
          return x_546;
        };
      x_542 := fork(x_543);
      c_541 := x_542;
      x_548 := recv[U](c_541);
      _547 := x_548;
      match[L](_547){
        ex1UL_32(m_550, n_551) => {
          x_553 := close[false](n_551);
          __552 := x_553;
          x_549 := m_550;
        }
      }
      return x_549;
    };
  return x_540;
}

fn cmsortL_554(zs_555%U) {
  x_556 :=
    lazy {
      x_559 :=
        fn lam_560(_561%L) {
          x_562 := cmsort_workerL_461(4, zs_555, _561);
          return x_562;
        };
      x_558 := fork(x_559);
      c_557 := x_558;
      x_564 := recv[L](c_557);
      _563 := x_564;
      match[L](_563){
        ex1LL_30(m_566, n_567) => {
          x_569 := close[false](n_567);
          __568 := x_569;
          x_565 := m_566;
        }
      }
      return x_565;
    };
  return x_556;
}

fn mklistU_570(n_571%U) {
  x_573 := lte(n_571, 0);
  match(x_573){
    true_4() => {
      x_574 := mkconstr(nilUU_24, []);
      x_572 := x_574;
    }
    false_5() => {
      x_576 := sub(n_571, 1);
      x_575 := mklistU_570(x_576);
      x_577 := mkconstr(consUU_25, [n_571, x_575]);
      x_572 := x_577;
    }
  }
  return x_572;
}

fn mklistL_578(n_579%U) {
  x_581 := lte(n_579, 0);
  match(x_581){
    true_4() => {
      x_582 := mkconstr(nilUL_22, []);
      x_580 := x_582;
    }
    false_5() => {
      x_584 := sub(n_579, 1);
      x_583 := mklistL_578(x_584);
      x_585 := mkconstr(consUL_23, [n_579, x_583]);
      x_580 := x_585;
    }
  }
  return x_580;
}

fn list_lenU_586(__587%U) {
  match[U](__587){
    nilUU_24() => {
      x_588 := 0;
    }
    consUU_25(hd_589, tl_590) => {
      x_592 := list_lenU_586(tl_590);
      x_591 := add(1, x_592);
      x_588 := x_591;
    }
  }
  return x_588;
}

fn list_lenL_593(__594%U) {
  match[L](__594){
    nilUL_22() => {
      x_595 := 0;
    }
    consUL_23(hd_596, tl_597) => {
      x_599 := list_lenL_593(tl_597);
      x_598 := add(1, x_599);
      x_595 := x_598;
    }
  }
  return x_595;
}

fn string_of_listU_600(__601%U) {
  match[U](__601){
    nilUU_24() => {
      x_603 := str("nil");
      x_602 := x_603;
    }
    consUU_25(hd_604, tl_605) => {
      x_608 := string_of_int_236(hd_604);
      x_609 := str(" :: ");
      x_607 := cat(x_608, x_609);
      x_610 := string_of_listU_600(tl_605);
      x_606 := cat(x_607, x_610);
      x_602 := x_606;
    }
  }
  return x_602;
}

fn string_of_listL_611(__612%U) {
  match[L](__612){
    nilUL_22() => {
      x_614 := str("nil");
      x_613 := x_614;
    }
    consUL_23(hd_615, tl_616) => {
      x_619 := string_of_int_236(hd_615);
      x_620 := str(" :: ");
      x_618 := cat(x_619, x_620);
      x_621 := string_of_listL_611(tl_616);
      x_617 := cat(x_618, x_621);
      x_613 := x_617;
    }
  }
  return x_613;
}

main := {
  x_623 := mklistL_578(1000);
  test_622 := x_623;
  x_624 :=
    lazy {
      x_627 := cmsortL_554(test_622);
      x_626 := force(x_627);
      _625 := x_626;
      x_629 := list_lenL_593(_625);
      len_628 := x_629;
      x_631 := string_of_int_236(len_628);
      x_630 := print(x_631);
      return x_630;
    };
  return x_624;
};

-----------------------------------------

fn idU_1(A_2%U, m_3%U) {
  
  return m_3;
}

fn idL_4(A_5%U, m_6%U) {
  
  return m_6;
}

fn rwlUU_7(A_8%U, m_9%U, n_10%U, B_11%U, __12%U, __13%U) {
  
  return __13;
}

fn rwlUL_14(A_15%U, m_16%U, n_17%U, B_18%U, __19%U, __20%U) {
  
  return __20;
}

fn rwlLU_21(A_22%U, m_23%U, n_24%U, B_25%U, __26%U, __27%U) {
  
  return __27;
}

fn rwlLL_28(A_29%U, m_30%U, n_31%U, B_32%U, __33%U, __34%U) {
  
  return __34;
}

fn rwrUU_35(A_36%U, m_37%U, n_38%U, B_39%U, __40%U, __41%U) {
  
  return __41;
}

fn rwrUL_42(A_43%U, m_44%U, n_45%U, B_46%U, __47%U, __48%U) {
  
  return __48;
}

fn rwrLU_49(A_50%U, m_51%U, n_52%U, B_53%U, __54%U, __55%U) {
  
  return __55;
}

fn rwrLL_56(A_57%U, m_58%U, n_59%U, B_60%U, __61%U, __62%U) {
  
  return __62;
}

fn sing_elimUU_63(A_64%U, x_65%U, __66%U) {
  
  return __66;
}

fn sing_elimUL_67(A_68%U, x_69%U, __70%U) {
  
  return __70;
}

fn sing_elimLU_71(A_72%U, x_73%U, __74%U) {
  absurd;
  return NULL;
}

fn sing_elimLL_75(A_76%U, x_77%U, __78%U) {
  
  return __78;
}

fn not_79(__80%U) {
  match(__80){
    true_4() => {
      x_81 := false_5;
    }
    false_5() => {
      x_81 := true_4;
    }
  }
  return x_81;
}

fn and_82(__83%U, __84%U) {
  match(__83){
    true_4() => {
      match(__84){
        true_4() => {
          x_86 := true_4;
        }
        false_5() => {
          x_86 := false_5;
        }
      }
      x_85 := x_86;
    }
    false_5() => {
      x_85 := false_5;
    }
  }
  return x_85;
}

fn or_87(__88%U, __89%U) {
  match(__88){
    true_4() => {
      x_90 := true_4;
    }
    false_5() => {
      match(__89){
        true_4() => {
          x_91 := true_4;
        }
        false_5() => {
          x_91 := false_5;
        }
      }
      x_90 := x_91;
    }
  }
  return x_90;
}

fn xor_92(__93%U, __94%L) {
  match(__93){
    true_4() => {
      match(__94){
        true_4() => {
          x_96 := false_5;
        }
        false_5() => {
          x_96 := true_4;
        }
      }
      x_95 := x_96;
    }
    false_5() => {
      match(__94){
        true_4() => {
          x_97 := true_4;
        }
        false_5() => {
          x_97 := false_5;
        }
      }
      x_95 := x_97;
    }
  }
  return x_95;
}

fn lte_98(__99%U, __100%U) {
  match[U](__99){
    zero_6() => {
      x_101 := true_4;
    }
    succ_7(n_102) => {
      match[U](__100){
        zero_6() => {
          x_103 := false_5;
        }
        succ_7(n_104) => {
          x_105 := lte_98(n_102, n_104);
          x_103 := x_105;
        }
      }
      x_101 := x_103;
    }
  }
  return x_101;
}

fn lt_106(x_107%U, y_108%U) {
  x_110 := mkconstr(succ_7, [x_107]);
  x_109 := lte_98(x_110, y_108);
  return x_109;
}

fn pred_111(__112%U) {
  match[U](__112){
    zero_6() => {
      x_114 := mkconstr(zero_6, []);
      x_113 := x_114;
    }
    succ_7(n_115) => {
      x_113 := n_115;
    }
  }
  return x_113;
}

fn add_116(__117%U, __118%U) {
  match[U](__117){
    zero_6() => {
      x_119 := __118;
    }
    succ_7(n_120) => {
      x_121 := add_116(n_120, __118);
      x_122 := mkconstr(succ_7, [x_121]);
      x_119 := x_122;
    }
  }
  return x_119;
}

fn sub_123(__124%U, __125%U) {
  match[U](__125){
    zero_6() => {
      x_126 := __124;
    }
    succ_7(n_127) => {
      x_129 := pred_111(__124);
      x_128 := sub_123(x_129, n_127);
      x_126 := x_128;
    }
  }
  return x_126;
}

fn mul_130(__131%U, __132%U) {
  match[U](__131){
    zero_6() => {
      x_134 := mkconstr(zero_6, []);
      x_133 := x_134;
    }
    succ_7(n_135) => {
      x_137 := mul_130(n_135, __132);
      x_136 := add_116(__132, x_137);
      x_133 := x_136;
    }
  }
  return x_133;
}

fn div_138(x_139%U, y_140%U) {
  x_142 := lt_106(x_139, y_140);
  match(x_142){
    true_4() => {
      x_143 := mkconstr(zero_6, []);
      x_141 := x_143;
    }
    false_5() => {
      x_145 :=
        fn loop_146(x_147%U, y_148%U) {
          x_151 := pred_111(y_148);
          x_150 := sub_123(x_147, x_151);
          match[U](x_150){
            zero_6() => {
              x_152 := mkconstr(zero_6, []);
              x_149 := x_152;
            }
            succ_7(n_153) => {
              x_154 := loop_146(n_153, y_148);
              x_155 := mkconstr(succ_7, [x_154]);
              x_149 := x_155;
            }
          }
          return x_149;
        };
      loop_144 := x_145;
      x_156 := loop_144(x_139, y_140);
      x_141 := x_156;
    }
  }
  return x_141;
}

fn rem_157(x_158%U, y_159%U) {
  x_162 := div_138(x_158, y_159);
  x_161 := mul_130(x_162, y_159);
  x_160 := sub_123(x_158, x_161);
  return x_160;
}

fn free_listUU_163(A_164%U, f_165%U, __166%U) {
  match[U](__166){
    nilUU_24() => {
      x_167 := tt_3;
    }
    consUU_25(hd_168, tl_169) => {
      x_171 := f_165(hd_168);
      __170 := x_171;
      x_172 := free_listUU_163(NULL, f_165, tl_169);
      x_167 := x_172;
    }
  }
  return x_167;
}

fn free_listUL_173(A_174%U, f_175%U, __176%U) {
  match[L](__176){
    nilUL_22() => {
      x_177 := tt_3;
      free(__176);
    }
    consUL_23(hd_178, tl_179) => {
      x_181 := f_175(hd_178);
      __180 := x_181;
      x_182 := free_listUL_173(NULL, f_175, tl_179);
      x_177 := x_182;
      free(__176);
    }
  }
  return x_177;
}

fn free_listLL_183(A_184%U, f_185%U, __186%U) {
  match[L](__186){
    nilLL_18() => {
      x_187 := tt_3;
      free(__186);
    }
    consLL_19(hd_188, tl_189) => {
      x_191 := f_185(hd_188);
      __190 := x_191;
      x_192 := free_listLL_183(NULL, f_185, tl_189);
      x_187 := x_192;
      free(__186);
    }
  }
  return x_187;
}

fn pow_193(x_194%U, y_195%U) {
  x_197 :=
    fn loop_198(acc_199%U, y_200%U) {
      x_202 := lte(y_200, 0);
      match(x_202){
        true_4() => {
          x_201 := acc_199;
        }
        false_5() => {
          x_204 := mul(x_194, acc_199);
          x_205 := sub(y_200, 1);
          x_203 := loop_198(x_204, x_205);
          x_201 := x_203;
        }
      }
      return x_201;
    };
  loop_196 := x_197;
  x_206 := loop_196(1, y_195);
  return x_206;
}

fn powm_207(x_208%U, y_209%U, m_210%U) {
  x_212 :=
    fn loop_213(acc_214%U, y_215%U) {
      x_217 := lte(y_215, 0);
      match(x_217){
        true_4() => {
          x_216 := acc_214;
        }
        false_5() => {
          x_220 := mul(x_208, acc_214);
          x_219 := mod(x_220, m_210);
          x_221 := sub(y_215, 1);
          x_218 := loop_213(x_219, x_221);
          x_216 := x_218;
        }
      }
      return x_216;
    };
  loop_211 := x_212;
  x_222 := loop_211(1, y_209);
  return x_222;
}

fn ord_223(c_224%U) {
  x_225 := ord(c_224);
  return x_225;
}

fn chr_226(i_227%U) {
  x_228 := chr(i_227);
  return x_228;
}

fn str_229(c_230%U) {
  x_232 := str("");
  x_231 := push(x_232, c_230);
  return x_231;
}

fn strlen_233(s_234%U) {
  x_235 := size(s_234);
  return x_235;
}

fn string_of_int_236(i_237%U) {
  x_239 :=
    fn aux_240(i_241%U) {
      x_243 := lte(10, i_241);
      match(x_243){
        true_4() => {
          x_245 := mod(i_241, 10);
          r_244 := x_245;
          x_247 := div(i_241, 10);
          i_246 := x_247;
          x_249 := aux_240(i_246);
          x_252 := ord_223(0);
          x_251 := add(r_244, x_252);
          x_250 := chr_226(x_251);
          x_248 := push(x_249, x_250);
          x_242 := x_248;
        }
        false_5() => {
          x_256 := ord_223(0);
          x_255 := add(i_241, x_256);
          x_254 := chr_226(x_255);
          x_253 := str_229(x_254);
          x_242 := x_253;
        }
      }
      return x_242;
    };
  aux_238 := x_239;
  x_258 := lte(0, i_237);
  match(x_258){
    true_4() => {
      x_259 := aux_238(i_237);
      x_257 := x_259;
    }
    false_5() => {
      x_261 := str("~");
      x_263 := neg(i_237);
      x_262 := aux_238(x_263);
      x_260 := cat(x_261, x_262);
      x_257 := x_260;
    }
  }
  return x_257;
}

fn splitU_264(__265%U) {
  match[U](__265){
    nilUU_24() => {
      x_267 := mkconstr(nilUU_24, []);
      x_268 := mkconstr(nilUU_24, []);
      x_269 := mkconstr(ex1UU_33, [x_267, x_268]);
      x_266 := x_269;
    }
    consUU_25(hd_270, tl_271) => {
      match[U](tl_271){
        nilUU_24() => {
          x_273 := mkconstr(nilUU_24, []);
          x_274 := mkconstr(consUU_25, [hd_270, x_273]);
          x_275 := mkconstr(nilUU_24, []);
          x_276 := mkconstr(ex1UU_33, [x_274, x_275]);
          x_272 := x_276;
        }
        consUU_25(hd_277, tl_278) => {
          x_280 := splitU_264(tl_278);
          match[L](x_280){
            ex1UU_33(m_281, n_282) => {
              x_283 := reconstr(x_280, consUU_25, [hd_270, m_281]);
              x_284 := mkconstr(consUU_25, [hd_277, n_282]);
              x_285 := mkconstr(ex1UU_33, [x_283, x_284]);
              x_279 := x_285;
            }
          }
          x_272 := x_279;
        }
      }
      x_266 := x_272;
    }
  }
  return x_266;
}

fn splitL_286(__287%U) {
  match[L](__287){
    nilUL_22() => {
      x_289 := reconstr(__287, nilUL_22, []);
      x_290 := mkconstr(nilUL_22, []);
      x_291 := mkconstr(ex1LL_30, [x_289, x_290]);
      x_288 := x_291;
    }
    consUL_23(hd_292, tl_293) => {
      match[L](tl_293){
        nilUL_22() => {
          x_295 := reconstr(tl_293, nilUL_22, []);
          x_296 := reconstr(__287, consUL_23, [hd_292, x_295]);
          x_297 := mkconstr(nilUL_22, []);
          x_298 := mkconstr(ex1LL_30, [x_296, x_297]);
          x_294 := x_298;
        }
        consUL_23(hd_299, tl_300) => {
          x_302 := splitL_286(tl_300);
          match[L](x_302){
            ex1LL_30(m_303, n_304) => {
              x_305 := reconstr(x_302, consUL_23, [hd_292, m_303]);
              x_306 := reconstr(tl_293, consUL_23, [hd_299, n_304]);
              x_307 := reconstr(__287, ex1LL_30, [x_305, x_306]);
              x_301 := x_307;
            }
          }
          x_294 := x_301;
        }
      }
      x_288 := x_294;
    }
  }
  return x_288;
}

fn mergeU_308(__309%U, __310%L) {
  match[U](__309){
    nilUU_24() => {
      x_311 := __310;
    }
    consUU_25(hd_312, tl_313) => {
      match[U](__310){
        nilUU_24() => {
          x_315 := mkconstr(consUU_25, [hd_312, tl_313]);
          x_314 := x_315;
        }
        consUU_25(hd_316, tl_317) => {
          x_319 := lte(hd_312, hd_316);
          match(x_319){
            true_4() => {
              x_321 := mkconstr(consUU_25, [hd_316, tl_317]);
              x_320 := mergeU_308(tl_313, x_321);
              x_322 := mkconstr(consUU_25, [hd_312, x_320]);
              x_318 := x_322;
            }
            false_5() => {
              x_324 := mkconstr(consUU_25, [hd_312, tl_313]);
              x_323 := mergeU_308(x_324, tl_317);
              x_325 := mkconstr(consUU_25, [hd_316, x_323]);
              x_318 := x_325;
            }
          }
          x_314 := x_318;
        }
      }
      x_311 := x_314;
    }
  }
  return x_311;
}

fn mergeL_326(__327%U, __328%L) {
  match[L](__327){
    nilUL_22() => {
      x_329 := __328;
      free(__327);
    }
    consUL_23(hd_330, tl_331) => {
      match[L](__328){
        nilUL_22() => {
          x_333 := reconstr(__327, consUL_23, [hd_330, tl_331]);
          x_332 := x_333;
          free(__328);
        }
        consUL_23(hd_334, tl_335) => {
          x_337 := lte(hd_330, hd_334);
          match(x_337){
            true_4() => {
              x_339 := reconstr(__328, consUL_23, [hd_334, tl_335]);
              x_338 := mergeL_326(tl_331, x_339);
              x_340 := reconstr(__327, consUL_23, [hd_330, x_338]);
              x_336 := x_340;
            }
            false_5() => {
              x_342 := reconstr(__328, consUL_23, [hd_330, tl_331]);
              x_341 := mergeL_326(x_342, tl_335);
              x_343 := reconstr(__327, consUL_23, [hd_334, x_341]);
              x_336 := x_343;
            }
          }
          x_332 := x_336;
        }
      }
      x_329 := x_332;
    }
  }
  return x_329;
}

fn msortU_344(__345%U) {
  match[U](__345){
    nilUU_24() => {
      x_347 := mkconstr(nilUU_24, []);
      x_346 := x_347;
    }
    consUU_25(hd_348, tl_349) => {
      match[U](tl_349){
        nilUU_24() => {
          x_351 := mkconstr(nilUU_24, []);
          x_352 := mkconstr(consUU_25, [hd_348, x_351]);
          x_350 := x_352;
        }
        consUU_25(hd_353, tl_354) => {
          x_357 := mkconstr(consUU_25, [hd_353, tl_354]);
          x_358 := mkconstr(consUU_25, [hd_348, x_357]);
          x_356 := splitU_264(x_358);
          match[L](x_356){
            ex1UU_33(m_359, n_360) => {
              x_362 := msortU_344(m_359);
              x_363 := msortU_344(n_360);
              x_361 := mergeU_308(x_362, x_363);
              x_355 := x_361;
              free(x_356);
            }
          }
          x_350 := x_355;
        }
      }
      x_346 := x_350;
    }
  }
  return x_346;
}

fn msortL_364(__365%U) {
  match[L](__365){
    nilUL_22() => {
      x_367 := reconstr(__365, nilUL_22, []);
      x_366 := x_367;
    }
    consUL_23(hd_368, tl_369) => {
      match[L](tl_369){
        nilUL_22() => {
          x_371 := reconstr(tl_369, nilUL_22, []);
          x_372 := reconstr(__365, consUL_23, [hd_368, x_371]);
          x_370 := x_372;
        }
        consUL_23(hd_373, tl_374) => {
          x_377 := reconstr(tl_369, consUL_23, [hd_373, tl_374]);
          x_378 := reconstr(__365, consUL_23, [hd_368, x_377]);
          x_376 := splitL_286(x_378);
          match[L](x_376){
            ex1LL_30(m_379, n_380) => {
              x_382 := msortL_364(m_379);
              x_383 := msortL_364(n_380);
              x_381 := mergeL_326(x_382, x_383);
              x_375 := x_381;
              free(x_376);
            }
          }
          x_370 := x_375;
        }
      }
      x_366 := x_370;
    }
  }
  return x_366;
}

fn cmsort_workerU_384(spwn_385%U) {
  x_387 := lte(spwn_385, 0);
  match(x_387){
    true_4() => {
      x_388 :=
        fn lam_389(zs_390%U, __391%L) {
          x_392 :=
            lazy {
              x_395 := msortU_344(zs_390);
              x_394 := send(__391, x_395);
              c_393 := x_394;
              x_396 := close[true](c_393);
              return x_396;
            };
          return x_392;
        };
      x_386 := x_388;
    }
    false_5() => {
      x_397 :=
        fn lam_398(zs_399%U, __400%L) {
          match[U](zs_399){
            nilUU_24() => {
              x_402 :=
                lazy {
                  x_405 := mkconstr(nilUU_24, []);
                  x_404 := send(__400, x_405);
                  c_403 := x_404;
                  x_406 := close[true](c_403);
                  return x_406;
                };
              x_401 := x_402;
            }
            consUU_25(hd_407, tl_408) => {
              match[U](tl_408){
                nilUU_24() => {
                  x_410 :=
                    lazy {
                      x_413 := mkconstr(nilUU_24, []);
                      x_414 := mkconstr(consUU_25, [hd_407, x_413]);
                      x_412 := send(__400, x_414);
                      c_411 := x_412;
                      x_415 := close[true](c_411);
                      return x_415;
                    };
                  x_409 := x_410;
                }
                consUU_25(hd_416, tl_417) => {
                  x_420 := mkconstr(consUU_25, [hd_416, tl_417]);
                  x_421 := mkconstr(consUU_25, [hd_407, x_420]);
                  x_419 := splitU_264(x_421);
                  match[L](x_419){
                    ex1UU_33(m_422, n_423) => {
                      x_424 :=
                        lazy {
                          x_427 :=
                            fn lam_428(_429%L) {
                              x_431 := sub(spwn_385, 1);
                              x_430 := cmsort_workerU_384(x_431, m_422, _429);
                              return x_430;
                            };
                          x_426 := fork(x_427);
                          r1_425 := x_426;
                          x_434 :=
                            fn lam_435(_436%L) {
                              x_438 := sub(spwn_385, 1);
                              x_437 := cmsort_workerU_384(x_438, n_423, _436);
                              return x_437;
                            };
                          x_433 := fork(x_434);
                          r2_432 := x_433;
                          x_440 := recv[U](r1_425);
                          _439 := x_440;
                          match[L](_439){
                            ex1UL_32(m_442, n_443) => {
                              x_445 := close[false](n_443);
                              __444 := x_445;
                              x_447 := recv[U](r2_432);
                              _446 := x_447;
                              match[L](_446){
                                ex1UL_32(m_449, n_450) => {
                                  x_452 := close[false](n_450);
                                  __451 := x_452;
                                  x_454 := mergeU_308(m_442, m_449);
                                  zs1_453 := x_454;
                                  x_456 := rwlUU_7(NULL, NULL, NULL, NULL, NULL, zs1_453);
                                  zs1_455 := x_456;
                                  x_458 := send(__400, zs1_455);
                                  c_457 := x_458;
                                  x_460 := close[true](c_457);
                                  __459 := x_460;
                                  x_448 := tt_3;
                                  free(_446);
                                }
                              }
                              x_441 := x_448;
                              free(_439);
                            }
                          }
                          return x_441;
                        };
                      x_418 := x_424;
                      free(x_419);
                    }
                  }
                  x_409 := x_418;
                }
              }
              x_401 := x_409;
            }
          }
          return x_401;
        };
      x_386 := x_397;
    }
  }
  return x_386;
}

fn cmsort_workerL_461(spwn_462%U) {
  x_464 := lte(spwn_462, 0);
  match(x_464){
    true_4() => {
      x_465 :=
        fn lam_466(zs_467%U, __468%L) {
          x_469 :=
            lazy {
              x_472 := msortL_364(zs_467);
              x_471 := send(__468, x_472);
              c_470 := x_471;
              x_473 := close[true](c_470);
              return x_473;
            };
          return x_469;
        };
      x_463 := x_465;
    }
    false_5() => {
      x_474 :=
        fn lam_475(zs_476%U, __477%L) {
          match[L](zs_476){
            nilUL_22() => {
              x_479 :=
                lazy {
                  x_482 := reconstr(zs_476, nilUL_22, []);
                  x_481 := send(__477, x_482);
                  c_480 := x_481;
                  x_483 := close[true](c_480);
                  return x_483;
                };
              x_478 := x_479;
            }
            consUL_23(hd_484, tl_485) => {
              match[L](tl_485){
                nilUL_22() => {
                  x_487 :=
                    lazy {
                      x_490 := reconstr(tl_485, nilUL_22, []);
                      x_491 := reconstr(zs_476, consUL_23, [hd_484, x_490]);
                      x_489 := send(__477, x_491);
                      c_488 := x_489;
                      x_492 := close[true](c_488);
                      return x_492;
                    };
                  x_486 := x_487;
                }
                consUL_23(hd_493, tl_494) => {
                  x_497 := reconstr(tl_485, consUL_23, [hd_493, tl_494]);
                  x_498 := reconstr(zs_476, consUL_23, [hd_484, x_497]);
                  x_496 := splitL_286(x_498);
                  match[L](x_496){
                    ex1LL_30(m_499, n_500) => {
                      x_501 :=
                        lazy {
                          x_504 :=
                            fn lam_505(_506%L) {
                              x_508 := sub(spwn_462, 1);
                              x_507 := cmsort_workerL_461(x_508, m_499, _506);
                              return x_507;
                            };
                          x_503 := fork(x_504);
                          r1_502 := x_503;
                          x_511 :=
                            fn lam_512(_513%L) {
                              x_515 := sub(spwn_462, 1);
                              x_514 := cmsort_workerL_461(x_515, n_500, _513);
                              return x_514;
                            };
                          x_510 := fork(x_511);
                          r2_509 := x_510;
                          x_517 := recv[L](r1_502);
                          _516 := x_517;
                          match[L](_516){
                            ex1LL_30(m_519, n_520) => {
                              x_522 := close[false](n_520);
                              __521 := x_522;
                              x_524 := recv[L](r2_509);
                              _523 := x_524;
                              match[L](_523){
                                ex1LL_30(m_526, n_527) => {
                                  x_529 := close[false](n_527);
                                  __528 := x_529;
                                  x_531 := mergeL_326(m_519, m_526);
                                  zs1_530 := x_531;
                                  x_533 := rwlLL_28(NULL, NULL, NULL, NULL, NULL, zs1_530);
                                  zs1_532 := x_533;
                                  x_535 := send(__477, zs1_532);
                                  c_534 := x_535;
                                  x_537 := close[true](c_534);
                                  __536 := x_537;
                                  x_525 := tt_3;
                                  free(_523);
                                }
                              }
                              x_518 := x_525;
                              free(_516);
                            }
                          }
                          return x_518;
                        };
                      x_495 := x_501;
                      free(x_496);
                    }
                  }
                  x_486 := x_495;
                }
              }
              x_478 := x_486;
            }
          }
          return x_478;
        };
      x_463 := x_474;
    }
  }
  return x_463;
}

fn cmsortU_538(zs_539%U) {
  x_540 :=
    lazy {
      x_543 :=
        fn lam_544(_545%L) {
          x_546 := cmsort_workerU_384(4, zs_539, _545);
          return x_546;
        };
      x_542 := fork(x_543);
      c_541 := x_542;
      x_548 := recv[U](c_541);
      _547 := x_548;
      match[L](_547){
        ex1UL_32(m_550, n_551) => {
          x_553 := close[false](n_551);
          __552 := x_553;
          x_549 := m_550;
          free(_547);
        }
      }
      return x_549;
    };
  return x_540;
}

fn cmsortL_554(zs_555%U) {
  x_556 :=
    lazy {
      x_559 :=
        fn lam_560(_561%L) {
          x_562 := cmsort_workerL_461(4, zs_555, _561);
          return x_562;
        };
      x_558 := fork(x_559);
      c_557 := x_558;
      x_564 := recv[L](c_557);
      _563 := x_564;
      match[L](_563){
        ex1LL_30(m_566, n_567) => {
          x_569 := close[false](n_567);
          __568 := x_569;
          x_565 := m_566;
          free(_563);
        }
      }
      return x_565;
    };
  return x_556;
}

fn mklistU_570(n_571%U) {
  x_573 := lte(n_571, 0);
  match(x_573){
    true_4() => {
      x_574 := mkconstr(nilUU_24, []);
      x_572 := x_574;
    }
    false_5() => {
      x_576 := sub(n_571, 1);
      x_575 := mklistU_570(x_576);
      x_577 := mkconstr(consUU_25, [n_571, x_575]);
      x_572 := x_577;
    }
  }
  return x_572;
}

fn mklistL_578(n_579%U) {
  x_581 := lte(n_579, 0);
  match(x_581){
    true_4() => {
      x_582 := mkconstr(nilUL_22, []);
      x_580 := x_582;
    }
    false_5() => {
      x_584 := sub(n_579, 1);
      x_583 := mklistL_578(x_584);
      x_585 := mkconstr(consUL_23, [n_579, x_583]);
      x_580 := x_585;
    }
  }
  return x_580;
}

fn list_lenU_586(__587%U) {
  match[U](__587){
    nilUU_24() => {
      x_588 := 0;
    }
    consUU_25(hd_589, tl_590) => {
      x_592 := list_lenU_586(tl_590);
      x_591 := add(1, x_592);
      x_588 := x_591;
    }
  }
  return x_588;
}

fn list_lenL_593(__594%U) {
  match[L](__594){
    nilUL_22() => {
      x_595 := 0;
      free(__594);
    }
    consUL_23(hd_596, tl_597) => {
      x_599 := list_lenL_593(tl_597);
      x_598 := add(1, x_599);
      x_595 := x_598;
      free(__594);
    }
  }
  return x_595;
}

fn string_of_listU_600(__601%U) {
  match[U](__601){
    nilUU_24() => {
      x_603 := str("nil");
      x_602 := x_603;
    }
    consUU_25(hd_604, tl_605) => {
      x_608 := string_of_int_236(hd_604);
      x_609 := str(" :: ");
      x_607 := cat(x_608, x_609);
      x_610 := string_of_listU_600(tl_605);
      x_606 := cat(x_607, x_610);
      x_602 := x_606;
    }
  }
  return x_602;
}

fn string_of_listL_611(__612%U) {
  match[L](__612){
    nilUL_22() => {
      x_614 := str("nil");
      x_613 := x_614;
      free(__612);
    }
    consUL_23(hd_615, tl_616) => {
      x_619 := string_of_int_236(hd_615);
      x_620 := str(" :: ");
      x_618 := cat(x_619, x_620);
      x_621 := string_of_listL_611(tl_616);
      x_617 := cat(x_618, x_621);
      x_613 := x_617;
      free(__612);
    }
  }
  return x_613;
}

main := {
  x_623 := mklistL_578(1000);
  test_622 := x_623;
  x_624 :=
    lazy {
      x_627 := cmsortL_554(test_622);
      x_626 := force(x_627);
      _625 := x_626;
      x_629 := list_lenL_593(_625);
      len_628 := x_629;
      x_631 := string_of_int_236(len_628);
      x_630 := print(x_631);
      return x_630;
    };
  return x_624;
};

-----------------------------------------

fn fn0_idU_632(A_2, m_3) {
  
  return m_3;
}

fn fn1_idU_633(env) {
  A_2 := env[1];
  m_3 := env[2];
  x_634 := fn0_idU_632(A_2, m_3);
  return x_634;
}

fn fn0_idL_635(A_5, m_6) {
  
  return m_6;
}

fn fn1_idL_636(env) {
  A_5 := env[1];
  m_6 := env[2];
  x_637 := fn0_idL_635(A_5, m_6);
  return x_637;
}

fn fn0_rwlUU_638(A_8, m_9, n_10, B_11, __12, __13) {
  
  return __13;
}

fn fn1_rwlUU_639(env) {
  A_8 := env[1];
  m_9 := env[2];
  n_10 := env[3];
  B_11 := env[4];
  __12 := env[5];
  __13 := env[6];
  x_640 := fn0_rwlUU_638(A_8, m_9, n_10, B_11, __12, __13);
  return x_640;
}

fn fn0_rwlUL_641(A_15, m_16, n_17, B_18, __19, __20) {
  
  return __20;
}

fn fn1_rwlUL_642(env) {
  A_15 := env[1];
  m_16 := env[2];
  n_17 := env[3];
  B_18 := env[4];
  __19 := env[5];
  __20 := env[6];
  x_643 := fn0_rwlUL_641(A_15, m_16, n_17, B_18, __19, __20);
  return x_643;
}

fn fn0_rwlLU_644(A_22, m_23, n_24, B_25, __26, __27) {
  
  return __27;
}

fn fn1_rwlLU_645(env) {
  A_22 := env[1];
  m_23 := env[2];
  n_24 := env[3];
  B_25 := env[4];
  __26 := env[5];
  __27 := env[6];
  x_646 := fn0_rwlLU_644(A_22, m_23, n_24, B_25, __26, __27);
  return x_646;
}

fn fn0_rwlLL_647(A_29, m_30, n_31, B_32, __33, __34) {
  
  return __34;
}

fn fn1_rwlLL_648(env) {
  A_29 := env[1];
  m_30 := env[2];
  n_31 := env[3];
  B_32 := env[4];
  __33 := env[5];
  __34 := env[6];
  x_649 := fn0_rwlLL_647(A_29, m_30, n_31, B_32, __33, __34);
  return x_649;
}

fn fn0_rwrUU_650(A_36, m_37, n_38, B_39, __40, __41) {
  
  return __41;
}

fn fn1_rwrUU_651(env) {
  A_36 := env[1];
  m_37 := env[2];
  n_38 := env[3];
  B_39 := env[4];
  __40 := env[5];
  __41 := env[6];
  x_652 := fn0_rwrUU_650(A_36, m_37, n_38, B_39, __40, __41);
  return x_652;
}

fn fn0_rwrUL_653(A_43, m_44, n_45, B_46, __47, __48) {
  
  return __48;
}

fn fn1_rwrUL_654(env) {
  A_43 := env[1];
  m_44 := env[2];
  n_45 := env[3];
  B_46 := env[4];
  __47 := env[5];
  __48 := env[6];
  x_655 := fn0_rwrUL_653(A_43, m_44, n_45, B_46, __47, __48);
  return x_655;
}

fn fn0_rwrLU_656(A_50, m_51, n_52, B_53, __54, __55) {
  
  return __55;
}

fn fn1_rwrLU_657(env) {
  A_50 := env[1];
  m_51 := env[2];
  n_52 := env[3];
  B_53 := env[4];
  __54 := env[5];
  __55 := env[6];
  x_658 := fn0_rwrLU_656(A_50, m_51, n_52, B_53, __54, __55);
  return x_658;
}

fn fn0_rwrLL_659(A_57, m_58, n_59, B_60, __61, __62) {
  
  return __62;
}

fn fn1_rwrLL_660(env) {
  A_57 := env[1];
  m_58 := env[2];
  n_59 := env[3];
  B_60 := env[4];
  __61 := env[5];
  __62 := env[6];
  x_661 := fn0_rwrLL_659(A_57, m_58, n_59, B_60, __61, __62);
  return x_661;
}

fn fn0_sing_elimUU_662(A_64, x_65, __66) {
  
  return __66;
}

fn fn1_sing_elimUU_663(env) {
  A_64 := env[1];
  x_65 := env[2];
  __66 := env[3];
  x_664 := fn0_sing_elimUU_662(A_64, x_65, __66);
  return x_664;
}

fn fn0_sing_elimUL_665(A_68, x_69, __70) {
  
  return __70;
}

fn fn1_sing_elimUL_666(env) {
  A_68 := env[1];
  x_69 := env[2];
  __70 := env[3];
  x_667 := fn0_sing_elimUL_665(A_68, x_69, __70);
  return x_667;
}

fn fn0_sing_elimLU_668(A_72, x_73, __74) {
  absurd;
  return NULL;
}

fn fn1_sing_elimLU_669(env) {
  A_72 := env[1];
  x_73 := env[2];
  __74 := env[3];
  x_670 := fn0_sing_elimLU_668(A_72, x_73, __74);
  return x_670;
}

fn fn0_sing_elimLL_671(A_76, x_77, __78) {
  
  return __78;
}

fn fn1_sing_elimLL_672(env) {
  A_76 := env[1];
  x_77 := env[2];
  __78 := env[3];
  x_673 := fn0_sing_elimLL_671(A_76, x_77, __78);
  return x_673;
}

fn fn0_not_674(__80) {
  switch(__80){
    true_4 => {
      move1(x_81, false_5);
      break;
    }
    false_5 => {
      move1(x_81, true_4);
      break;
    }
  }
  return x_81;
}

fn fn1_not_675(env) {
  __80 := env[1];
  x_676 := fn0_not_674(__80);
  return x_676;
}

fn fn0_and_677(__83, __84) {
  switch(__83){
    true_4 => {
      switch(__84){
        true_4 => {
          move1(x_86, true_4);
          break;
        }
        false_5 => {
          move1(x_86, false_5);
          break;
        }
      }
      move1(x_85, x_86);
      break;
    }
    false_5 => {
      move1(x_85, false_5);
      break;
    }
  }
  return x_85;
}

fn fn1_and_678(env) {
  __83 := env[1];
  __84 := env[2];
  x_679 := fn0_and_677(__83, __84);
  return x_679;
}

fn fn0_or_680(__88, __89) {
  switch(__88){
    true_4 => {
      move1(x_90, true_4);
      break;
    }
    false_5 => {
      switch(__89){
        true_4 => {
          move1(x_91, true_4);
          break;
        }
        false_5 => {
          move1(x_91, false_5);
          break;
        }
      }
      move1(x_90, x_91);
      break;
    }
  }
  return x_90;
}

fn fn1_or_681(env) {
  __88 := env[1];
  __89 := env[2];
  x_682 := fn0_or_680(__88, __89);
  return x_682;
}

fn fn0_xor_683(__93, __94) {
  switch(__93){
    true_4 => {
      switch(__94){
        true_4 => {
          move1(x_96, false_5);
          break;
        }
        false_5 => {
          move1(x_96, true_4);
          break;
        }
      }
      move1(x_95, x_96);
      break;
    }
    false_5 => {
      switch(__94){
        true_4 => {
          move1(x_97, true_4);
          break;
        }
        false_5 => {
          move1(x_97, false_5);
          break;
        }
      }
      move1(x_95, x_97);
      break;
    }
  }
  return x_95;
}

fn fn1_xor_684(env) {
  __93 := env[1];
  __94 := env[2];
  x_685 := fn0_xor_683(__93, __94);
  return x_685;
}

fn fn0_lte_686(__99, __100) {
  switch(ctagof(__99)){
    zero_6 => {
      move1(x_101, true_4);
      break;
    }
    succ_7 => {
      getbox(n_102, __99, 0);
      switch(ctagof(__100)){
        zero_6 => {
          move1(x_103, false_5);
          break;
        }
        succ_7 => {
          getbox(n_104, __100, 0);
          x_105 := fn0_lte_686(n_102, n_104);
          move1(x_103, x_105);
          break;
        }
      }
      move1(x_101, x_103);
      break;
    }
  }
  return x_101;
}

fn fn1_lte_687(env) {
  __99 := env[1];
  __100 := env[2];
  x_688 := fn0_lte_686(__99, __100);
  return x_688;
}

fn fn0_lt_689(x_107, y_108) {
  mkbox(x_110, succ_7, 1);
  setbox(x_110, x_107, 0);
  x_109 := fn0_lte_686(x_110, y_108);
  return x_109;
}

fn fn1_lt_690(env) {
  x_107 := env[1];
  y_108 := env[2];
  x_691 := fn0_lt_689(x_107, y_108);
  return x_691;
}

fn fn0_pred_692(__112) {
  switch(ctagof(__112)){
    zero_6 => {
      mkbox(x_114, zero_6, 0);
      move1(x_113, x_114);
      break;
    }
    succ_7 => {
      getbox(n_115, __112, 0);
      move1(x_113, n_115);
      break;
    }
  }
  return x_113;
}

fn fn1_pred_693(env) {
  __112 := env[1];
  x_694 := fn0_pred_692(__112);
  return x_694;
}

fn fn0_add_695(__117, __118) {
  switch(ctagof(__117)){
    zero_6 => {
      move1(x_119, __118);
      break;
    }
    succ_7 => {
      getbox(n_120, __117, 0);
      x_121 := fn0_add_695(n_120, __118);
      mkbox(x_122, succ_7, 1);
      setbox(x_122, x_121, 0);
      move1(x_119, x_122);
      break;
    }
  }
  return x_119;
}

fn fn1_add_696(env) {
  __117 := env[1];
  __118 := env[2];
  x_697 := fn0_add_695(__117, __118);
  return x_697;
}

fn fn0_sub_698(__124, __125) {
  switch(ctagof(__125)){
    zero_6 => {
      move1(x_126, __124);
      break;
    }
    succ_7 => {
      getbox(n_127, __125, 0);
      x_129 := fn0_pred_692(__124);
      x_128 := fn0_sub_698(x_129, n_127);
      move1(x_126, x_128);
      break;
    }
  }
  return x_126;
}

fn fn1_sub_699(env) {
  __124 := env[1];
  __125 := env[2];
  x_700 := fn0_sub_698(__124, __125);
  return x_700;
}

fn fn0_mul_701(__131, __132) {
  switch(ctagof(__131)){
    zero_6 => {
      mkbox(x_134, zero_6, 0);
      move1(x_133, x_134);
      break;
    }
    succ_7 => {
      getbox(n_135, __131, 0);
      x_137 := fn0_mul_701(n_135, __132);
      x_136 := fn0_add_695(__132, x_137);
      move1(x_133, x_136);
      break;
    }
  }
  return x_133;
}

fn fn1_mul_702(env) {
  __131 := env[1];
  __132 := env[2];
  x_703 := fn0_mul_701(__131, __132);
  return x_703;
}

fn fn0_div_704(x_139, y_140) {
  x_142 := fn0_lt_689(x_139, y_140);
  switch(x_142){
    true_4 => {
      mkbox(x_143, zero_6, 0);
      move1(x_141, x_143);
      break;
    }
    false_5 => {
      mkclo1(x_145, fn1_loop_706, fvc:=2, argc:=2);
      setclo(x_145, pred_111, 1);
      setclo(x_145, sub_123, 2);
      move1(loop_144, x_145);
      appc(x_710, loop_144, x_139);
      appc(x_711, x_710, y_140);
      move1(x_156, x_711);
      move1(x_141, x_156);
      break;
    }
  }
  return x_141;
}

fn fn1_div_705(env) {
  x_139 := env[1];
  y_140 := env[2];
  x_713 := fn0_div_704(x_139, y_140);
  return x_713;
}

fn fn0_rem_714(x_158, y_159) {
  x_162 := fn0_div_704(x_158, y_159);
  x_161 := fn0_mul_701(x_162, y_159);
  x_160 := fn0_sub_698(x_158, x_161);
  return x_160;
}

fn fn1_rem_715(env) {
  x_158 := env[1];
  y_159 := env[2];
  x_716 := fn0_rem_714(x_158, y_159);
  return x_716;
}

fn fn0_free_listUU_717(A_164, f_165, __166) {
  switch(ctagof(__166)){
    nilUU_24 => {
      move1(x_167, tt_3);
      break;
    }
    consUU_25 => {
      getbox(hd_168, __166, 0);
      getbox(tl_169, __166, 1);
      appc(x_719, f_165, hd_168);
      move1(x_171, x_719);
      move1(__170, x_171);
      x_172 := fn0_free_listUU_717(NULL, f_165, tl_169);
      move1(x_167, x_172);
      break;
    }
  }
  return x_167;
}

fn fn1_free_listUU_718(env) {
  A_164 := env[1];
  f_165 := env[2];
  __166 := env[3];
  x_721 := fn0_free_listUU_717(A_164, f_165, __166);
  return x_721;
}

fn fn0_free_listUL_722(A_174, f_175, __176) {
  switch(ctagof(__176)){
    nilUL_22 => {
      move1(x_177, tt_3);
      free(__176);
      break;
    }
    consUL_23 => {
      getbox(hd_178, __176, 0);
      getbox(tl_179, __176, 1);
      appc(x_724, f_175, hd_178);
      move1(x_181, x_724);
      move1(__180, x_181);
      x_182 := fn0_free_listUL_722(NULL, f_175, tl_179);
      move1(x_177, x_182);
      free(__176);
      break;
    }
  }
  return x_177;
}

fn fn1_free_listUL_723(env) {
  A_174 := env[1];
  f_175 := env[2];
  __176 := env[3];
  x_726 := fn0_free_listUL_722(A_174, f_175, __176);
  return x_726;
}

fn fn0_free_listLL_727(A_184, f_185, __186) {
  switch(ctagof(__186)){
    nilLL_18 => {
      move1(x_187, tt_3);
      free(__186);
      break;
    }
    consLL_19 => {
      getbox(hd_188, __186, 0);
      getbox(tl_189, __186, 1);
      appc(x_729, f_185, hd_188);
      move1(x_191, x_729);
      move1(__190, x_191);
      x_192 := fn0_free_listLL_727(NULL, f_185, tl_189);
      move1(x_187, x_192);
      free(__186);
      break;
    }
  }
  return x_187;
}

fn fn1_free_listLL_728(env) {
  A_184 := env[1];
  f_185 := env[2];
  __186 := env[3];
  x_731 := fn0_free_listLL_727(A_184, f_185, __186);
  return x_731;
}

fn fn0_pow_732(x_194, y_195) {
  mkclo1(x_197, fn1_loop_734, fvc:=1, argc:=2);
  setclo(x_197, x_194, 1);
  move1(loop_196, x_197);
  appc(x_738, loop_196, 1);
  appc(x_739, x_738, y_195);
  move1(x_206, x_739);
  return x_206;
}

fn fn1_pow_733(env) {
  x_194 := env[1];
  y_195 := env[2];
  x_741 := fn0_pow_732(x_194, y_195);
  return x_741;
}

fn fn0_powm_742(x_208, y_209, m_210) {
  mkclo1(x_212, fn1_loop_744, fvc:=2, argc:=2);
  setclo(x_212, x_208, 1);
  setclo(x_212, m_210, 2);
  move1(loop_211, x_212);
  appc(x_748, loop_211, 1);
  appc(x_749, x_748, y_209);
  move1(x_222, x_749);
  return x_222;
}

fn fn1_powm_743(env) {
  x_208 := env[1];
  y_209 := env[2];
  m_210 := env[3];
  x_751 := fn0_powm_742(x_208, y_209, m_210);
  return x_751;
}

fn fn0_ord_752(c_224) {
  ord(x_225, c_224);
  return x_225;
}

fn fn1_ord_753(env) {
  c_224 := env[1];
  x_754 := fn0_ord_752(c_224);
  return x_754;
}

fn fn0_chr_755(i_227) {
  chr(x_228, i_227);
  return x_228;
}

fn fn1_chr_756(env) {
  i_227 := env[1];
  x_757 := fn0_chr_755(i_227);
  return x_757;
}

fn fn0_str_758(c_230) {
  str(x_232, "")
  push(x_231, x_232, c_230);
  return x_231;
}

fn fn1_str_759(env) {
  c_230 := env[1];
  x_760 := fn0_str_758(c_230);
  return x_760;
}

fn fn0_strlen_761(s_234) {
  size(x_235, s_234);
  return x_235;
}

fn fn1_strlen_762(env) {
  s_234 := env[1];
  x_763 := fn0_strlen_761(s_234);
  return x_763;
}

fn fn0_string_of_int_764(i_237) {
  mkclo1(x_239, fn1_aux_766, fvc:=3, argc:=1);
  setclo(x_239, ord_223, 1);
  setclo(x_239, chr_226, 2);
  setclo(x_239, str_229, 3);
  move1(aux_238, x_239);
  lte(x_258, 0, i_237);
  switch(x_258){
    true_4 => {
      appc(x_769, aux_238, i_237);
      move1(x_259, x_769);
      move1(x_257, x_259);
      break;
    }
    false_5 => {
      str(x_261, "~")
      neg(x_263, i_237);
      appc(x_771, aux_238, x_263);
      move1(x_262, x_771);
      cat(x_260, x_261, x_262);
      move1(x_257, x_260);
      break;
    }
  }
  return x_257;
}

fn fn1_string_of_int_765(env) {
  i_237 := env[1];
  x_773 := fn0_string_of_int_764(i_237);
  return x_773;
}

fn fn0_splitU_774(__265) {
  switch(ctagof(__265)){
    nilUU_24 => {
      mkbox(x_267, nilUU_24, 0);
      mkbox(x_268, nilUU_24, 0);
      mkbox(x_269, ex1UU_33, 2);
      setbox(x_269, x_267, 0);
      setbox(x_269, x_268, 1);
      move1(x_266, x_269);
      break;
    }
    consUU_25 => {
      getbox(hd_270, __265, 0);
      getbox(tl_271, __265, 1);
      switch(ctagof(tl_271)){
        nilUU_24 => {
          mkbox(x_273, nilUU_24, 0);
          mkbox(x_274, consUU_25, 2);
          setbox(x_274, hd_270, 0);
          setbox(x_274, x_273, 1);
          mkbox(x_275, nilUU_24, 0);
          mkbox(x_276, ex1UU_33, 2);
          setbox(x_276, x_274, 0);
          setbox(x_276, x_275, 1);
          move1(x_272, x_276);
          break;
        }
        consUU_25 => {
          getbox(hd_277, tl_271, 0);
          getbox(tl_278, tl_271, 1);
          x_280 := fn0_splitU_774(tl_278);
          switch(ctagof(x_280)){
            ex1UU_33 => {
              getbox(m_281, x_280, 0);
              getbox(n_282, x_280, 1);
              rebox(x_283, x_280, consUU_25);
              setbox(x_283, hd_270, 0);
              setbox(x_283, m_281, 1);
              mkbox(x_284, consUU_25, 2);
              setbox(x_284, hd_277, 0);
              setbox(x_284, n_282, 1);
              mkbox(x_285, ex1UU_33, 2);
              setbox(x_285, x_283, 0);
              setbox(x_285, x_284, 1);
              move1(x_279, x_285);
              break;
            }
          }
          move1(x_272, x_279);
          break;
        }
      }
      move1(x_266, x_272);
      break;
    }
  }
  return x_266;
}

fn fn1_splitU_775(env) {
  __265 := env[1];
  x_776 := fn0_splitU_774(__265);
  return x_776;
}

fn fn0_splitL_777(__287) {
  switch(ctagof(__287)){
    nilUL_22 => {
      rebox(x_289, __287, nilUL_22);
      mkbox(x_290, nilUL_22, 0);
      mkbox(x_291, ex1LL_30, 2);
      setbox(x_291, x_289, 0);
      setbox(x_291, x_290, 1);
      move1(x_288, x_291);
      break;
    }
    consUL_23 => {
      getbox(hd_292, __287, 0);
      getbox(tl_293, __287, 1);
      switch(ctagof(tl_293)){
        nilUL_22 => {
          rebox(x_295, tl_293, nilUL_22);
          rebox(x_296, __287, consUL_23);
          setbox(x_296, hd_292, 0);
          setbox(x_296, x_295, 1);
          mkbox(x_297, nilUL_22, 0);
          mkbox(x_298, ex1LL_30, 2);
          setbox(x_298, x_296, 0);
          setbox(x_298, x_297, 1);
          move1(x_294, x_298);
          break;
        }
        consUL_23 => {
          getbox(hd_299, tl_293, 0);
          getbox(tl_300, tl_293, 1);
          x_302 := fn0_splitL_777(tl_300);
          switch(ctagof(x_302)){
            ex1LL_30 => {
              getbox(m_303, x_302, 0);
              getbox(n_304, x_302, 1);
              rebox(x_305, x_302, consUL_23);
              setbox(x_305, hd_292, 0);
              setbox(x_305, m_303, 1);
              rebox(x_306, tl_293, consUL_23);
              setbox(x_306, hd_299, 0);
              setbox(x_306, n_304, 1);
              rebox(x_307, __287, ex1LL_30);
              setbox(x_307, x_305, 0);
              setbox(x_307, x_306, 1);
              move1(x_301, x_307);
              break;
            }
          }
          move1(x_294, x_301);
          break;
        }
      }
      move1(x_288, x_294);
      break;
    }
  }
  return x_288;
}

fn fn1_splitL_778(env) {
  __287 := env[1];
  x_779 := fn0_splitL_777(__287);
  return x_779;
}

fn fn0_mergeU_780(__309, __310) {
  switch(ctagof(__309)){
    nilUU_24 => {
      move1(x_311, __310);
      break;
    }
    consUU_25 => {
      getbox(hd_312, __309, 0);
      getbox(tl_313, __309, 1);
      switch(ctagof(__310)){
        nilUU_24 => {
          mkbox(x_315, consUU_25, 2);
          setbox(x_315, hd_312, 0);
          setbox(x_315, tl_313, 1);
          move1(x_314, x_315);
          break;
        }
        consUU_25 => {
          getbox(hd_316, __310, 0);
          getbox(tl_317, __310, 1);
          lte(x_319, hd_312, hd_316);
          switch(x_319){
            true_4 => {
              mkbox(x_321, consUU_25, 2);
              setbox(x_321, hd_316, 0);
              setbox(x_321, tl_317, 1);
              x_320 := fn0_mergeU_780(tl_313, x_321);
              mkbox(x_322, consUU_25, 2);
              setbox(x_322, hd_312, 0);
              setbox(x_322, x_320, 1);
              move1(x_318, x_322);
              break;
            }
            false_5 => {
              mkbox(x_324, consUU_25, 2);
              setbox(x_324, hd_312, 0);
              setbox(x_324, tl_313, 1);
              x_323 := fn0_mergeU_780(x_324, tl_317);
              mkbox(x_325, consUU_25, 2);
              setbox(x_325, hd_316, 0);
              setbox(x_325, x_323, 1);
              move1(x_318, x_325);
              break;
            }
          }
          move1(x_314, x_318);
          break;
        }
      }
      move1(x_311, x_314);
      break;
    }
  }
  return x_311;
}

fn fn1_mergeU_781(env) {
  __309 := env[1];
  __310 := env[2];
  x_782 := fn0_mergeU_780(__309, __310);
  return x_782;
}

fn fn0_mergeL_783(__327, __328) {
  switch(ctagof(__327)){
    nilUL_22 => {
      move1(x_329, __328);
      free(__327);
      break;
    }
    consUL_23 => {
      getbox(hd_330, __327, 0);
      getbox(tl_331, __327, 1);
      switch(ctagof(__328)){
        nilUL_22 => {
          rebox(x_333, __327, consUL_23);
          setbox(x_333, hd_330, 0);
          setbox(x_333, tl_331, 1);
          move1(x_332, x_333);
          free(__328);
          break;
        }
        consUL_23 => {
          getbox(hd_334, __328, 0);
          getbox(tl_335, __328, 1);
          lte(x_337, hd_330, hd_334);
          switch(x_337){
            true_4 => {
              rebox(x_339, __328, consUL_23);
              setbox(x_339, hd_334, 0);
              setbox(x_339, tl_335, 1);
              x_338 := fn0_mergeL_783(tl_331, x_339);
              rebox(x_340, __327, consUL_23);
              setbox(x_340, hd_330, 0);
              setbox(x_340, x_338, 1);
              move1(x_336, x_340);
              break;
            }
            false_5 => {
              rebox(x_342, __328, consUL_23);
              setbox(x_342, hd_330, 0);
              setbox(x_342, tl_331, 1);
              x_341 := fn0_mergeL_783(x_342, tl_335);
              rebox(x_343, __327, consUL_23);
              setbox(x_343, hd_334, 0);
              setbox(x_343, x_341, 1);
              move1(x_336, x_343);
              break;
            }
          }
          move1(x_332, x_336);
          break;
        }
      }
      move1(x_329, x_332);
      break;
    }
  }
  return x_329;
}

fn fn1_mergeL_784(env) {
  __327 := env[1];
  __328 := env[2];
  x_785 := fn0_mergeL_783(__327, __328);
  return x_785;
}

fn fn0_msortU_786(__345) {
  switch(ctagof(__345)){
    nilUU_24 => {
      mkbox(x_347, nilUU_24, 0);
      move1(x_346, x_347);
      break;
    }
    consUU_25 => {
      getbox(hd_348, __345, 0);
      getbox(tl_349, __345, 1);
      switch(ctagof(tl_349)){
        nilUU_24 => {
          mkbox(x_351, nilUU_24, 0);
          mkbox(x_352, consUU_25, 2);
          setbox(x_352, hd_348, 0);
          setbox(x_352, x_351, 1);
          move1(x_350, x_352);
          break;
        }
        consUU_25 => {
          getbox(hd_353, tl_349, 0);
          getbox(tl_354, tl_349, 1);
          mkbox(x_357, consUU_25, 2);
          setbox(x_357, hd_353, 0);
          setbox(x_357, tl_354, 1);
          mkbox(x_358, consUU_25, 2);
          setbox(x_358, hd_348, 0);
          setbox(x_358, x_357, 1);
          x_356 := fn0_splitU_774(x_358);
          switch(ctagof(x_356)){
            ex1UU_33 => {
              getbox(m_359, x_356, 0);
              getbox(n_360, x_356, 1);
              x_362 := fn0_msortU_786(m_359);
              x_363 := fn0_msortU_786(n_360);
              x_361 := fn0_mergeU_780(x_362, x_363);
              move1(x_355, x_361);
              free(x_356);
              break;
            }
          }
          move1(x_350, x_355);
          break;
        }
      }
      move1(x_346, x_350);
      break;
    }
  }
  return x_346;
}

fn fn1_msortU_787(env) {
  __345 := env[1];
  x_788 := fn0_msortU_786(__345);
  return x_788;
}

fn fn0_msortL_789(__365) {
  switch(ctagof(__365)){
    nilUL_22 => {
      rebox(x_367, __365, nilUL_22);
      move1(x_366, x_367);
      break;
    }
    consUL_23 => {
      getbox(hd_368, __365, 0);
      getbox(tl_369, __365, 1);
      switch(ctagof(tl_369)){
        nilUL_22 => {
          rebox(x_371, tl_369, nilUL_22);
          rebox(x_372, __365, consUL_23);
          setbox(x_372, hd_368, 0);
          setbox(x_372, x_371, 1);
          move1(x_370, x_372);
          break;
        }
        consUL_23 => {
          getbox(hd_373, tl_369, 0);
          getbox(tl_374, tl_369, 1);
          rebox(x_377, tl_369, consUL_23);
          setbox(x_377, hd_373, 0);
          setbox(x_377, tl_374, 1);
          rebox(x_378, __365, consUL_23);
          setbox(x_378, hd_368, 0);
          setbox(x_378, x_377, 1);
          x_376 := fn0_splitL_777(x_378);
          switch(ctagof(x_376)){
            ex1LL_30 => {
              getbox(m_379, x_376, 0);
              getbox(n_380, x_376, 1);
              x_382 := fn0_msortL_789(m_379);
              x_383 := fn0_msortL_789(n_380);
              x_381 := fn0_mergeL_783(x_382, x_383);
              move1(x_375, x_381);
              free(x_376);
              break;
            }
          }
          move1(x_370, x_375);
          break;
        }
      }
      move1(x_366, x_370);
      break;
    }
  }
  return x_366;
}

fn fn1_msortL_790(env) {
  __365 := env[1];
  x_791 := fn0_msortL_789(__365);
  return x_791;
}

fn fn0_cmsort_workerU_792(spwn_385) {
  lte(x_387, spwn_385, 0);
  switch(x_387){
    true_4 => {
      mkclo1(x_388, fn1_lam_794, fvc:=1, argc:=2);
      setclo(x_388, msortU_344, 1);
      move1(x_386, x_388);
      break;
    }
    false_5 => {
      mkclo1(x_397, fn1_lam_796, fvc:=5, argc:=2);
      setclo(x_397, rwlUU_7, 1);
      setclo(x_397, splitU_264, 2);
      setclo(x_397, mergeU_308, 3);
      setclo(x_397, cmsort_workerU_384, 4);
      setclo(x_397, spwn_385, 5);
      move1(x_386, x_397);
      break;
    }
  }
  return x_386;
}

fn fn1_cmsort_workerU_793(env) {
  spwn_385 := env[1];
  x_810 := fn0_cmsort_workerU_792(spwn_385);
  return x_810;
}

fn fn0_cmsort_workerL_811(spwn_462) {
  lte(x_464, spwn_462, 0);
  switch(x_464){
    true_4 => {
      mkclo1(x_465, fn1_lam_813, fvc:=1, argc:=2);
      setclo(x_465, msortL_364, 1);
      move1(x_463, x_465);
      break;
    }
    false_5 => {
      mkclo1(x_474, fn1_lam_815, fvc:=5, argc:=2);
      setclo(x_474, rwlLL_28, 1);
      setclo(x_474, splitL_286, 2);
      setclo(x_474, mergeL_326, 3);
      setclo(x_474, cmsort_workerL_461, 4);
      setclo(x_474, spwn_462, 5);
      move1(x_463, x_474);
      break;
    }
  }
  return x_463;
}

fn fn1_cmsort_workerL_812(env) {
  spwn_462 := env[1];
  x_829 := fn0_cmsort_workerL_811(spwn_462);
  return x_829;
}

fn fn0_cmsortU_830(zs_539) {
  lazy(x_540, lazy__832, 2);
  setlazy(x_540, cmsort_workerU_384, 0);
  setlazy(x_540, zs_539, 1);
  return x_540;
}

fn fn1_cmsortU_831(env) {
  zs_539 := env[1];
  x_838 := fn0_cmsortU_830(zs_539);
  return x_838;
}

fn fn0_cmsortL_839(zs_555) {
  lazy(x_556, lazy__841, 2);
  setlazy(x_556, cmsort_workerL_461, 0);
  setlazy(x_556, zs_555, 1);
  return x_556;
}

fn fn1_cmsortL_840(env) {
  zs_555 := env[1];
  x_847 := fn0_cmsortL_839(zs_555);
  return x_847;
}

fn fn0_mklistU_848(n_571) {
  lte(x_573, n_571, 0);
  switch(x_573){
    true_4 => {
      mkbox(x_574, nilUU_24, 0);
      move1(x_572, x_574);
      break;
    }
    false_5 => {
      sub(x_576, n_571, 1);
      x_575 := fn0_mklistU_848(x_576);
      mkbox(x_577, consUU_25, 2);
      setbox(x_577, n_571, 0);
      setbox(x_577, x_575, 1);
      move1(x_572, x_577);
      break;
    }
  }
  return x_572;
}

fn fn1_mklistU_849(env) {
  n_571 := env[1];
  x_850 := fn0_mklistU_848(n_571);
  return x_850;
}

fn fn0_mklistL_851(n_579) {
  lte(x_581, n_579, 0);
  switch(x_581){
    true_4 => {
      mkbox(x_582, nilUL_22, 0);
      move1(x_580, x_582);
      break;
    }
    false_5 => {
      sub(x_584, n_579, 1);
      x_583 := fn0_mklistL_851(x_584);
      mkbox(x_585, consUL_23, 2);
      setbox(x_585, n_579, 0);
      setbox(x_585, x_583, 1);
      move1(x_580, x_585);
      break;
    }
  }
  return x_580;
}

fn fn1_mklistL_852(env) {
  n_579 := env[1];
  x_853 := fn0_mklistL_851(n_579);
  return x_853;
}

fn fn0_list_lenU_854(__587) {
  switch(ctagof(__587)){
    nilUU_24 => {
      move1(x_588, 0);
      break;
    }
    consUU_25 => {
      getbox(hd_589, __587, 0);
      getbox(tl_590, __587, 1);
      x_592 := fn0_list_lenU_854(tl_590);
      add(x_591, 1, x_592);
      move1(x_588, x_591);
      break;
    }
  }
  return x_588;
}

fn fn1_list_lenU_855(env) {
  __587 := env[1];
  x_856 := fn0_list_lenU_854(__587);
  return x_856;
}

fn fn0_list_lenL_857(__594) {
  switch(ctagof(__594)){
    nilUL_22 => {
      move1(x_595, 0);
      free(__594);
      break;
    }
    consUL_23 => {
      getbox(hd_596, __594, 0);
      getbox(tl_597, __594, 1);
      x_599 := fn0_list_lenL_857(tl_597);
      add(x_598, 1, x_599);
      move1(x_595, x_598);
      free(__594);
      break;
    }
  }
  return x_595;
}

fn fn1_list_lenL_858(env) {
  __594 := env[1];
  x_859 := fn0_list_lenL_857(__594);
  return x_859;
}

fn fn0_string_of_listU_860(__601) {
  switch(ctagof(__601)){
    nilUU_24 => {
      str(x_603, "nil")
      move1(x_602, x_603);
      break;
    }
    consUU_25 => {
      getbox(hd_604, __601, 0);
      getbox(tl_605, __601, 1);
      x_608 := fn0_string_of_int_764(hd_604);
      str(x_609, " :: ")
      cat(x_607, x_608, x_609);
      x_610 := fn0_string_of_listU_860(tl_605);
      cat(x_606, x_607, x_610);
      move1(x_602, x_606);
      break;
    }
  }
  return x_602;
}

fn fn1_string_of_listU_861(env) {
  __601 := env[1];
  x_862 := fn0_string_of_listU_860(__601);
  return x_862;
}

fn fn0_string_of_listL_863(__612) {
  switch(ctagof(__612)){
    nilUL_22 => {
      str(x_614, "nil")
      move1(x_613, x_614);
      free(__612);
      break;
    }
    consUL_23 => {
      getbox(hd_615, __612, 0);
      getbox(tl_616, __612, 1);
      x_619 := fn0_string_of_int_764(hd_615);
      str(x_620, " :: ")
      cat(x_618, x_619, x_620);
      x_621 := fn0_string_of_listL_863(tl_616);
      cat(x_617, x_618, x_621);
      move1(x_613, x_617);
      free(__612);
      break;
    }
  }
  return x_613;
}

fn fn1_string_of_listL_864(env) {
  __612 := env[1];
  x_865 := fn0_string_of_listL_863(__612);
  return x_865;
}

fn lazy__867(env) {
  string_of_int_236 := env[0];
  cmsortL_554 := env[1];
  list_lenL_593 := env[2];
  test_622 := env[3];
  x_627 := fn0_cmsortL_839(test_622);
  force(x_626, x_627);
  free(x_627);
  move1(_625, x_626);
  x_629 := fn0_list_lenL_857(_625);
  move1(len_628, x_629);
  x_631 := fn0_string_of_int_764(len_628);
  print(x_630, x_631);
  return x_630;
}

fn lazy__841(env) {
  cmsort_workerL_461 := env[0];
  zs_555 := env[1];
  mkclo1(x_559, fn1_lam_842, fvc:=2, argc:=1);
  setclo(x_559, cmsort_workerL_461, 1);
  setclo(x_559, zs_555, 2);
  fork(x_558, x_559);
  move1(c_557, x_558);
  recv1(x_564, c_557);
  move1(_563, x_564);
  switch(ctagof(_563)){
    ex1LL_30 => {
      getbox(m_566, _563, 0);
      getbox(n_567, _563, 1);
      close1(x_569, n_567);
      move1(__568, x_569);
      move1(x_565, m_566);
      free(_563);
      break;
    }
  }
  return x_565;
}

fn fn1_lam_842(env) {
  lam_560 := env[0];
  cmsort_workerL_461 := env[1];
  zs_555 := env[2];
  _561 := env[3];
  appc(x_843, cmsort_workerL_461, 4);
  appc(x_844, x_843, zs_555);
  appc(x_845, x_844, _561);
  free(x_844);
  move1(x_562, x_845);
  return x_562;
}

fn lazy__832(env) {
  cmsort_workerU_384 := env[0];
  zs_539 := env[1];
  mkclo1(x_543, fn1_lam_833, fvc:=2, argc:=1);
  setclo(x_543, cmsort_workerU_384, 1);
  setclo(x_543, zs_539, 2);
  fork(x_542, x_543);
  move1(c_541, x_542);
  recv0(x_548, c_541);
  move1(_547, x_548);
  switch(ctagof(_547)){
    ex1UL_32 => {
      getbox(m_550, _547, 0);
      getbox(n_551, _547, 1);
      close1(x_553, n_551);
      move1(__552, x_553);
      move1(x_549, m_550);
      free(_547);
      break;
    }
  }
  return x_549;
}

fn fn1_lam_833(env) {
  lam_544 := env[0];
  cmsort_workerU_384 := env[1];
  zs_539 := env[2];
  _545 := env[3];
  appc(x_834, cmsort_workerU_384, 4);
  appc(x_835, x_834, zs_539);
  appc(x_836, x_835, _545);
  free(x_835);
  move1(x_546, x_836);
  return x_546;
}

fn fn1_lam_815(env) {
  lam_475 := env[0];
  rwlLL_28 := env[1];
  splitL_286 := env[2];
  mergeL_326 := env[3];
  cmsort_workerL_461 := env[4];
  spwn_462 := env[5];
  zs_476 := env[6];
  __477 := env[7];
  switch(ctagof(zs_476)){
    nilUL_22 => {
      lazy(x_479, lazy__816, 2);
      setlazy(x_479, zs_476, 0);
      setlazy(x_479, __477, 1);
      move1(x_478, x_479);
      break;
    }
    consUL_23 => {
      getbox(hd_484, zs_476, 0);
      getbox(tl_485, zs_476, 1);
      switch(ctagof(tl_485)){
        nilUL_22 => {
          lazy(x_487, lazy__817, 4);
          setlazy(x_487, zs_476, 0);
          setlazy(x_487, __477, 1);
          setlazy(x_487, hd_484, 2);
          setlazy(x_487, tl_485, 3);
          move1(x_486, x_487);
          break;
        }
        consUL_23 => {
          getbox(hd_493, tl_485, 0);
          getbox(tl_494, tl_485, 1);
          rebox(x_497, tl_485, consUL_23);
          setbox(x_497, hd_493, 0);
          setbox(x_497, tl_494, 1);
          rebox(x_498, zs_476, consUL_23);
          setbox(x_498, hd_484, 0);
          setbox(x_498, x_497, 1);
          x_496 := fn0_splitL_777(x_498);
          switch(ctagof(x_496)){
            ex1LL_30 => {
              getbox(m_499, x_496, 0);
              getbox(n_500, x_496, 1);
              lazy(x_501, lazy__818, 7);
              setlazy(x_501, rwlLL_28, 0);
              setlazy(x_501, mergeL_326, 1);
              setlazy(x_501, cmsort_workerL_461, 2);
              setlazy(x_501, spwn_462, 3);
              setlazy(x_501, __477, 4);
              setlazy(x_501, m_499, 5);
              setlazy(x_501, n_500, 6);
              move1(x_495, x_501);
              free(x_496);
              break;
            }
          }
          move1(x_486, x_495);
          break;
        }
      }
      move1(x_478, x_486);
      break;
    }
  }
  return x_478;
}

fn lazy__818(env) {
  rwlLL_28 := env[0];
  mergeL_326 := env[1];
  cmsort_workerL_461 := env[2];
  spwn_462 := env[3];
  __477 := env[4];
  m_499 := env[5];
  n_500 := env[6];
  mkclo1(x_504, fn1_lam_819, fvc:=3, argc:=1);
  setclo(x_504, cmsort_workerL_461, 1);
  setclo(x_504, spwn_462, 2);
  setclo(x_504, m_499, 3);
  fork(x_503, x_504);
  move1(r1_502, x_503);
  mkclo1(x_511, fn1_lam_824, fvc:=3, argc:=1);
  setclo(x_511, cmsort_workerL_461, 1);
  setclo(x_511, spwn_462, 2);
  setclo(x_511, n_500, 3);
  fork(x_510, x_511);
  move1(r2_509, x_510);
  recv1(x_517, r1_502);
  move1(_516, x_517);
  switch(ctagof(_516)){
    ex1LL_30 => {
      getbox(m_519, _516, 0);
      getbox(n_520, _516, 1);
      close1(x_522, n_520);
      move1(__521, x_522);
      recv1(x_524, r2_509);
      move1(_523, x_524);
      switch(ctagof(_523)){
        ex1LL_30 => {
          getbox(m_526, _523, 0);
          getbox(n_527, _523, 1);
          close1(x_529, n_527);
          move1(__528, x_529);
          x_531 := fn0_mergeL_783(m_519, m_526);
          move1(zs1_530, x_531);
          x_533 := fn0_rwlLL_647(NULL, NULL, NULL, NULL, NULL, zs1_530);
          move1(zs1_532, x_533);
          send(x_535, __477, zs1_532);
          move1(c_534, x_535);
          close0(x_537, c_534);
          move1(__536, x_537);
          move1(x_525, tt_3);
          free(_523);
          break;
        }
      }
      move1(x_518, x_525);
      free(_516);
      break;
    }
  }
  return x_518;
}

fn fn1_lam_819(env) {
  lam_505 := env[0];
  cmsort_workerL_461 := env[1];
  spwn_462 := env[2];
  m_499 := env[3];
  _506 := env[4];
  sub(x_508, spwn_462, 1);
  appc(x_820, cmsort_workerL_461, x_508);
  appc(x_821, x_820, m_499);
  appc(x_822, x_821, _506);
  free(x_821);
  move1(x_507, x_822);
  return x_507;
}

fn fn1_lam_824(env) {
  lam_512 := env[0];
  cmsort_workerL_461 := env[1];
  spwn_462 := env[2];
  n_500 := env[3];
  _513 := env[4];
  sub(x_515, spwn_462, 1);
  appc(x_825, cmsort_workerL_461, x_515);
  appc(x_826, x_825, n_500);
  appc(x_827, x_826, _513);
  free(x_826);
  move1(x_514, x_827);
  return x_514;
}

fn lazy__817(env) {
  zs_476 := env[0];
  __477 := env[1];
  hd_484 := env[2];
  tl_485 := env[3];
  rebox(x_490, tl_485, nilUL_22);
  rebox(x_491, zs_476, consUL_23);
  setbox(x_491, hd_484, 0);
  setbox(x_491, x_490, 1);
  send(x_489, __477, x_491);
  move1(c_488, x_489);
  close0(x_492, c_488);
  return x_492;
}

fn lazy__816(env) {
  zs_476 := env[0];
  __477 := env[1];
  rebox(x_482, zs_476, nilUL_22);
  send(x_481, __477, x_482);
  move1(c_480, x_481);
  close0(x_483, c_480);
  return x_483;
}

fn fn1_lam_813(env) {
  lam_466 := env[0];
  msortL_364 := env[1];
  zs_467 := env[2];
  __468 := env[3];
  lazy(x_469, lazy__814, 3);
  setlazy(x_469, msortL_364, 0);
  setlazy(x_469, zs_467, 1);
  setlazy(x_469, __468, 2);
  return x_469;
}

fn lazy__814(env) {
  msortL_364 := env[0];
  zs_467 := env[1];
  __468 := env[2];
  x_472 := fn0_msortL_789(zs_467);
  send(x_471, __468, x_472);
  move1(c_470, x_471);
  close0(x_473, c_470);
  return x_473;
}

fn fn1_lam_796(env) {
  lam_398 := env[0];
  rwlUU_7 := env[1];
  splitU_264 := env[2];
  mergeU_308 := env[3];
  cmsort_workerU_384 := env[4];
  spwn_385 := env[5];
  zs_399 := env[6];
  __400 := env[7];
  switch(ctagof(zs_399)){
    nilUU_24 => {
      lazy(x_402, lazy__797, 1);
      setlazy(x_402, __400, 0);
      move1(x_401, x_402);
      break;
    }
    consUU_25 => {
      getbox(hd_407, zs_399, 0);
      getbox(tl_408, zs_399, 1);
      switch(ctagof(tl_408)){
        nilUU_24 => {
          lazy(x_410, lazy__798, 2);
          setlazy(x_410, __400, 0);
          setlazy(x_410, hd_407, 1);
          move1(x_409, x_410);
          break;
        }
        consUU_25 => {
          getbox(hd_416, tl_408, 0);
          getbox(tl_417, tl_408, 1);
          mkbox(x_420, consUU_25, 2);
          setbox(x_420, hd_416, 0);
          setbox(x_420, tl_417, 1);
          mkbox(x_421, consUU_25, 2);
          setbox(x_421, hd_407, 0);
          setbox(x_421, x_420, 1);
          x_419 := fn0_splitU_774(x_421);
          switch(ctagof(x_419)){
            ex1UU_33 => {
              getbox(m_422, x_419, 0);
              getbox(n_423, x_419, 1);
              lazy(x_424, lazy__799, 7);
              setlazy(x_424, rwlUU_7, 0);
              setlazy(x_424, mergeU_308, 1);
              setlazy(x_424, cmsort_workerU_384, 2);
              setlazy(x_424, spwn_385, 3);
              setlazy(x_424, __400, 4);
              setlazy(x_424, m_422, 5);
              setlazy(x_424, n_423, 6);
              move1(x_418, x_424);
              free(x_419);
              break;
            }
          }
          move1(x_409, x_418);
          break;
        }
      }
      move1(x_401, x_409);
      break;
    }
  }
  return x_401;
}

fn lazy__799(env) {
  rwlUU_7 := env[0];
  mergeU_308 := env[1];
  cmsort_workerU_384 := env[2];
  spwn_385 := env[3];
  __400 := env[4];
  m_422 := env[5];
  n_423 := env[6];
  mkclo1(x_427, fn1_lam_800, fvc:=3, argc:=1);
  setclo(x_427, cmsort_workerU_384, 1);
  setclo(x_427, spwn_385, 2);
  setclo(x_427, m_422, 3);
  fork(x_426, x_427);
  move1(r1_425, x_426);
  mkclo1(x_434, fn1_lam_805, fvc:=3, argc:=1);
  setclo(x_434, cmsort_workerU_384, 1);
  setclo(x_434, spwn_385, 2);
  setclo(x_434, n_423, 3);
  fork(x_433, x_434);
  move1(r2_432, x_433);
  recv0(x_440, r1_425);
  move1(_439, x_440);
  switch(ctagof(_439)){
    ex1UL_32 => {
      getbox(m_442, _439, 0);
      getbox(n_443, _439, 1);
      close1(x_445, n_443);
      move1(__444, x_445);
      recv0(x_447, r2_432);
      move1(_446, x_447);
      switch(ctagof(_446)){
        ex1UL_32 => {
          getbox(m_449, _446, 0);
          getbox(n_450, _446, 1);
          close1(x_452, n_450);
          move1(__451, x_452);
          x_454 := fn0_mergeU_780(m_442, m_449);
          move1(zs1_453, x_454);
          x_456 := fn0_rwlUU_638(NULL, NULL, NULL, NULL, NULL, zs1_453);
          move1(zs1_455, x_456);
          send(x_458, __400, zs1_455);
          move1(c_457, x_458);
          close0(x_460, c_457);
          move1(__459, x_460);
          move1(x_448, tt_3);
          free(_446);
          break;
        }
      }
      move1(x_441, x_448);
      free(_439);
      break;
    }
  }
  return x_441;
}

fn fn1_lam_800(env) {
  lam_428 := env[0];
  cmsort_workerU_384 := env[1];
  spwn_385 := env[2];
  m_422 := env[3];
  _429 := env[4];
  sub(x_431, spwn_385, 1);
  appc(x_801, cmsort_workerU_384, x_431);
  appc(x_802, x_801, m_422);
  appc(x_803, x_802, _429);
  free(x_802);
  move1(x_430, x_803);
  return x_430;
}

fn fn1_lam_805(env) {
  lam_435 := env[0];
  cmsort_workerU_384 := env[1];
  spwn_385 := env[2];
  n_423 := env[3];
  _436 := env[4];
  sub(x_438, spwn_385, 1);
  appc(x_806, cmsort_workerU_384, x_438);
  appc(x_807, x_806, n_423);
  appc(x_808, x_807, _436);
  free(x_807);
  move1(x_437, x_808);
  return x_437;
}

fn lazy__798(env) {
  __400 := env[0];
  hd_407 := env[1];
  mkbox(x_413, nilUU_24, 0);
  mkbox(x_414, consUU_25, 2);
  setbox(x_414, hd_407, 0);
  setbox(x_414, x_413, 1);
  send(x_412, __400, x_414);
  move1(c_411, x_412);
  close0(x_415, c_411);
  return x_415;
}

fn lazy__797(env) {
  __400 := env[0];
  mkbox(x_405, nilUU_24, 0);
  send(x_404, __400, x_405);
  move1(c_403, x_404);
  close0(x_406, c_403);
  return x_406;
}

fn fn1_lam_794(env) {
  lam_389 := env[0];
  msortU_344 := env[1];
  zs_390 := env[2];
  __391 := env[3];
  lazy(x_392, lazy__795, 3);
  setlazy(x_392, msortU_344, 0);
  setlazy(x_392, zs_390, 1);
  setlazy(x_392, __391, 2);
  return x_392;
}

fn lazy__795(env) {
  msortU_344 := env[0];
  zs_390 := env[1];
  __391 := env[2];
  x_395 := fn0_msortU_786(zs_390);
  send(x_394, __391, x_395);
  move1(c_393, x_394);
  close0(x_396, c_393);
  return x_396;
}

fn fn1_aux_766(env) {
  aux_240 := env[0];
  ord_223 := env[1];
  chr_226 := env[2];
  str_229 := env[3];
  i_241 := env[4];
  lte(x_243, 10, i_241);
  switch(x_243){
    true_4 => {
      mod(x_245, i_241, 10);
      move1(r_244, x_245);
      div(x_247, i_241, 10);
      move1(i_246, x_247);
      appc(x_767, aux_240, i_246);
      move1(x_249, x_767);
      x_252 := fn0_ord_752(0);
      add(x_251, r_244, x_252);
      x_250 := fn0_chr_755(x_251);
      push(x_248, x_249, x_250);
      move1(x_242, x_248);
      break;
    }
    false_5 => {
      x_256 := fn0_ord_752(0);
      add(x_255, i_241, x_256);
      x_254 := fn0_chr_755(x_255);
      x_253 := fn0_str_758(x_254);
      move1(x_242, x_253);
      break;
    }
  }
  return x_242;
}

fn fn1_loop_744(env) {
  loop_213 := env[0];
  x_208 := env[1];
  m_210 := env[2];
  acc_214 := env[3];
  y_215 := env[4];
  lte(x_217, y_215, 0);
  switch(x_217){
    true_4 => {
      move1(x_216, acc_214);
      break;
    }
    false_5 => {
      mul(x_220, x_208, acc_214);
      mod(x_219, x_220, m_210);
      sub(x_221, y_215, 1);
      appc(x_745, loop_213, x_219);
      appc(x_746, x_745, x_221);
      move1(x_218, x_746);
      move1(x_216, x_218);
      break;
    }
  }
  return x_216;
}

fn fn1_loop_734(env) {
  loop_198 := env[0];
  x_194 := env[1];
  acc_199 := env[2];
  y_200 := env[3];
  lte(x_202, y_200, 0);
  switch(x_202){
    true_4 => {
      move1(x_201, acc_199);
      break;
    }
    false_5 => {
      mul(x_204, x_194, acc_199);
      sub(x_205, y_200, 1);
      appc(x_735, loop_198, x_204);
      appc(x_736, x_735, x_205);
      move1(x_203, x_736);
      move1(x_201, x_203);
      break;
    }
  }
  return x_201;
}

fn fn1_loop_706(env) {
  loop_146 := env[0];
  pred_111 := env[1];
  sub_123 := env[2];
  x_147 := env[3];
  y_148 := env[4];
  x_151 := fn0_pred_692(y_148);
  x_150 := fn0_sub_698(x_147, x_151);
  switch(ctagof(x_150)){
    zero_6 => {
      mkbox(x_152, zero_6, 0);
      move1(x_149, x_152);
      break;
    }
    succ_7 => {
      getbox(n_153, x_150, 0);
      appc(x_707, loop_146, n_153);
      appc(x_708, x_707, y_148);
      move1(x_154, x_708);
      mkbox(x_155, succ_7, 1);
      setbox(x_155, x_154, 0);
      move1(x_149, x_155);
      break;
    }
  }
  return x_149;
}

main {
  mkclo0(idU_1, fn1_idU_633, fvc:=0, argc:=2);
  mkclo0(idL_4, fn1_idL_636, fvc:=0, argc:=2);
  mkclo0(rwlUU_7, fn1_rwlUU_639, fvc:=0, argc:=6);
  mkclo0(rwlUL_14, fn1_rwlUL_642, fvc:=0, argc:=6);
  mkclo0(rwlLU_21, fn1_rwlLU_645, fvc:=0, argc:=6);
  mkclo0(rwlLL_28, fn1_rwlLL_648, fvc:=0, argc:=6);
  mkclo0(rwrUU_35, fn1_rwrUU_651, fvc:=0, argc:=6);
  mkclo0(rwrUL_42, fn1_rwrUL_654, fvc:=0, argc:=6);
  mkclo0(rwrLU_49, fn1_rwrLU_657, fvc:=0, argc:=6);
  mkclo0(rwrLL_56, fn1_rwrLL_660, fvc:=0, argc:=6);
  mkclo0(sing_elimUU_63, fn1_sing_elimUU_663, fvc:=0, argc:=3);
  mkclo0(sing_elimUL_67, fn1_sing_elimUL_666, fvc:=0, argc:=3);
  mkclo0(sing_elimLU_71, fn1_sing_elimLU_669, fvc:=0, argc:=3);
  mkclo0(sing_elimLL_75, fn1_sing_elimLL_672, fvc:=0, argc:=3);
  mkclo0(not_79, fn1_not_675, fvc:=0, argc:=1);
  mkclo0(and_82, fn1_and_678, fvc:=0, argc:=2);
  mkclo0(or_87, fn1_or_681, fvc:=0, argc:=2);
  mkclo0(xor_92, fn1_xor_684, fvc:=0, argc:=2);
  mkclo0(lte_98, fn1_lte_687, fvc:=0, argc:=2);
  mkclo0(lt_106, fn1_lt_690, fvc:=0, argc:=2);
  mkclo0(pred_111, fn1_pred_693, fvc:=0, argc:=1);
  mkclo0(add_116, fn1_add_696, fvc:=0, argc:=2);
  mkclo0(sub_123, fn1_sub_699, fvc:=0, argc:=2);
  mkclo0(mul_130, fn1_mul_702, fvc:=0, argc:=2);
  mkclo0(div_138, fn1_div_705, fvc:=0, argc:=2);
  mkclo0(rem_157, fn1_rem_715, fvc:=0, argc:=2);
  mkclo0(free_listUU_163, fn1_free_listUU_718, fvc:=0, argc:=3);
  mkclo0(free_listUL_173, fn1_free_listUL_723, fvc:=0, argc:=3);
  mkclo0(free_listLL_183, fn1_free_listLL_728, fvc:=0, argc:=3);
  mkclo0(pow_193, fn1_pow_733, fvc:=0, argc:=2);
  mkclo0(powm_207, fn1_powm_743, fvc:=0, argc:=3);
  mkclo0(ord_223, fn1_ord_753, fvc:=0, argc:=1);
  mkclo0(chr_226, fn1_chr_756, fvc:=0, argc:=1);
  mkclo0(str_229, fn1_str_759, fvc:=0, argc:=1);
  mkclo0(strlen_233, fn1_strlen_762, fvc:=0, argc:=1);
  mkclo0(string_of_int_236, fn1_string_of_int_765, fvc:=0, argc:=1);
  mkclo0(splitU_264, fn1_splitU_775, fvc:=0, argc:=1);
  mkclo0(splitL_286, fn1_splitL_778, fvc:=0, argc:=1);
  mkclo0(mergeU_308, fn1_mergeU_781, fvc:=0, argc:=2);
  mkclo0(mergeL_326, fn1_mergeL_784, fvc:=0, argc:=2);
  mkclo0(msortU_344, fn1_msortU_787, fvc:=0, argc:=1);
  mkclo0(msortL_364, fn1_msortL_790, fvc:=0, argc:=1);
  mkclo0(cmsort_workerU_384, fn1_cmsort_workerU_793, fvc:=0, argc:=1);
  mkclo0(cmsort_workerL_461, fn1_cmsort_workerL_812, fvc:=0, argc:=1);
  mkclo0(cmsortU_538, fn1_cmsortU_831, fvc:=0, argc:=1);
  mkclo0(cmsortL_554, fn1_cmsortL_840, fvc:=0, argc:=1);
  mkclo0(mklistU_570, fn1_mklistU_849, fvc:=0, argc:=1);
  mkclo0(mklistL_578, fn1_mklistL_852, fvc:=0, argc:=1);
  mkclo0(list_lenU_586, fn1_list_lenU_855, fvc:=0, argc:=1);
  mkclo0(list_lenL_593, fn1_list_lenL_858, fvc:=0, argc:=1);
  mkclo0(string_of_listU_600, fn1_string_of_listU_861, fvc:=0, argc:=1);
  mkclo0(string_of_listL_611, fn1_string_of_listL_864, fvc:=0, argc:=1);
  x_623 := fn0_mklistL_851(1000);
  move1(test_622, x_623);
  lazy(x_624, lazy__867, 4);
  setlazy(x_624, string_of_int_236, 0);
  setlazy(x_624, cmsortL_554, 1);
  setlazy(x_624, list_lenL_593, 2);
  setlazy(x_624, test_622, 3);
  force(x_866, x_624);
  return x_866;
}

-----------------------------------------

compilation success

-----------------------------------------

