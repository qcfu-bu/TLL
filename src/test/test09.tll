notation ( |> ) := (%2 %1)
notation ( @@ ) := (%1 %2)
notation ( = ) := eq %1 %2
notation ( ` ) := sing %1
notation ( && ) := and
notation ( || ) := or
notation ( + ) := add %1 %2
notation ( - ) := sub %1 %2
notation ( * ) := mul %1 %2
notation ( / ) := div %1 %2
notation ( % ) := rem %1 %2
notation ( ^ ) := pow %1 %2
notation ( < ) := lt %1 %2
notation ( > ) := gt %1 %2
notation ( <= ) := lte %1 %2
notation ( >= ) := gte %1 %2
notation ( ** ) := prod1 %1 %2
notation ( :: ) := cons %1 %2
notation ( ⟨ , ⟩ ) := pair %1 %2




#[logical]
inductive eq<s> ?(A : Type‹s›) (m : A) : A -> U where
  | refl : m = m

inductive boxed<s> (A : Type<s>) : L where
  | box (m : A) : boxed A

inductive sing<s,t> ?(A : Type<s>) : A -> Type<t> where
  | just (m : A) : `m

inductive unit<s> : Type<s> where
  | tt : unit

inductive bool : U where
  | true  : bool
  | false : bool

inductive choice : L where
  | next : choice
  | free : choice

inductive prod<s,r,t> (A : Type<s>) (B : Type<r>) : Type<t> where
  | pair (m : A) (n : B) : prod A B

inductive nat : U where
  | zero : nat
  | succ (_ : nat) : nat




-- simple theory of singleton elimination
def sing_elim<s,t> ?{A : Type<s>} ?{x : A} : sing<s,t>x -> A
  | (just x) => x

#[logical]
def sing_uniq<s,t> ?(A : Type<s>) ?(x0 : A) : forall (x : sing<s,t>x0) -> x0 = sing_elim x
  | (just _) => refl




-- linear streams
inductive stream_node<s> (A : Type<s>) : L where
  | stream_cons
    (hd : A)
    (tl : forall (x : choice) -o
            match x with
            | next => stream_node A
            | free => unit) : stream_node A

#[logical]
def stream<s>(A : Type<s>) :=
  forall (x : choice) -o
    match x with
    | next => stream_node A
    | free => unit

def free_stream<s> ?{A : Type<s>} (st : stream A) : unit<U> :=
  match st free with tt => tt

def uncons_stream<s> ?{A : Type<s>} (st : stream A) : prod<_,_,L> A (stream A) :=
  let stream_cons hd tl := st next in
  ⟨hd, tl⟩

def nat_make (n : nat) : stream nat
  | next => stream_cons n (nat_make (succ n))
  | free => tt




-- dependent additive pair
inductive apair<s,r,t> ?(A : Type<s>) (B : A -> Type<r>) : Type<t> where
  | apair_intro
    ?{x : A}
    (select : forall<t> (b : bool),
                match b with
                | true  => sing<_,L>x
                | false => boxed (B x)) : apair B

notation ( ( , ) ) :=
  apair_intro
    (function  
     | true  => just %1
     | false => box %2)

def proj1<s,r,t> ?{A : Type<s>} ?{B : A -> Type<r>} : @apair<s,r,t> A B -> A
  | (apair_intro _ select) => sing_elim (select true)

def proj2<s,r,t> ?{A : Type<s>} ?{B : A -> Type<r>} : forall (x : @apair<s,r,t> A B) -> B (proj1 x)
  | (apair_intro x select) => 
    match {x}                       as x0 -- x is matched to introduce flex variable x0
        , {select true}             as a0 : `x
        , {sing_uniq (select true)} as _  : x0 = sing_elim a0
        , select false              as _  : boxed (B x0)
      in B (sing_elim a0)
    with
    | _, _, refl, box b => b




-- examples

def my_apair0 : apair<_,_,U> (fn (n : nat) => match n with zero => stream nat | succ _ => unit<L>) :=
  -- different type modalities are allowed in components as long
  -- as resource usage are equal
  (zero, nat_make zero)

def my_apair1 : apair<_,_,L> (fn (n : nat) => match n with zero => stream nat | succ _ => unit<L>) :=
  let nat_stream := nat_make zero in
  -- additive pair allows usage of nat_stream in both components
  ( let ⟨hd, tl⟩ := uncons_stream nat_stream in
    let _ := free_stream tl in hd
  , nat_stream )

-- def _ : nat := proj1 my_apair1

def _ : unit := free_stream (proj2 my_apair1)
