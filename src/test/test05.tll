inductive vec‹s› (A : Type‹s›) : nat -> Type‹s› where
| vnil : vec A zero
| vcons ?{n : nat} (hd : A) (tl : vec‹s› A n) : vec A (succ n)

def hd_vec1 ?{A : U} ?{n : nat} : vec A (succ n) -> A
  | vcons _ hd _ => hd

def hd_vec2 ?{A : U} ?{n : nat} (xs : vec A (succ n)) :=
  match {_} as n0, xs as _ : vec A (succ n0) with
  | _, vnil =>
  | _, vcons _ hd _ => hd

def hd_vec3 ?{A : U} ?{n : nat} (xs : vec A (succ n)) :=
  match xs with
  | vnil =>
  | vcons _ hd _ => hd

def vlength ?{A : U} ?{n : nat} : vec A n -> exists (fn x => eq x n)
  | vnil => ex zero refl
  | vcons _ _ tl =>
    match vlength tl with
    | ex n pf => ⟨succ n, {congr (fn x => succ x) pf}⟩

def xs := vcons zero vnil
def x := hd_vec1 xs
def y := hd_vec2 xs
def z := hd_vec3 xs