inductive unit : U where
| tt : unit

inductive nat : U where
| zero : nat
| succ (pred : nat) : nat

#[logical]
inductive eq<s> ?(A : Type‹s›) (m : A) : A -> U where
| refl : eq m m

inductive exists<s,r,t> ?(A : Type‹s›) (B : A -> Type<r>) : Type<t> where
| ex (m : A) {pf : B m} : exists B

inductive sing<s> ?(A : Type<s>) : A -> Type<s> where
| just (m : A) : sing m

inductive prod<s,r,t> (A : Type<s>) (B : Type<r>) : Type<t> where
| pair (m : A) (n : B) : prod A B

def sing_double<s> {A : Type<s>} {m : A} : sing m -o sing (just m) -o prod<_,_,L>A A
  | (just x) (just (just y)) =>
    let {pf} : eq x y := refl in
    pair x y
