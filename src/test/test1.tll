inductive unit : U where
| tt : unit

inductive nat : U where
| zero : nat
| succ (n : nat) : nat

inductive sing‹s› (A : Type‹s›) : A -> Type‹s› where
| just (m : A) : sing‹s› A m

#[logical]
inductive eq‹s› (A : Type‹s›) (m : A) : A -> U where
| eq_refl : eq _ m m

def test : sing nat (succ zero) -> unit
  | (just x) =>
    let pf : eq _ x (succ zero) := eq_refl in
    tt

-- def id {A : U} : A -> A
--   | x => x

-- def print‹s› {A : Type‹s›} (x : A) : IO unit := #magic

-- def _ : IO unit := print _ tt

-- def _ : IO unit := print _ (pair‹_,_,L› tt tt)
