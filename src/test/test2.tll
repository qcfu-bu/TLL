inductive unit : U where
| tt : unit

inductive nat : U where
| zero : nat
| succ (pred : nat) : nat

#[logical]
inductive eq‹s› (A : Type‹s›) (m : A) : A -> U where
| refl : eq _ m m

inductive exists‹s,r,t› (A : Type‹s›) (B : A -> Type‹r›) : Type‹t› where
| ex (m : A) {pf : B m} : exists A B

inductive sing‹s› (A : Type‹s›) : A -> Type‹s› where
| just (m : A) : sing _ m

def sing_eq‹s› {A : Type‹s›} {m : A} : sing _ m -> exists‹_,_,L› _ (fn x => eq _ x m)
  | (just m) => ex m refl
