#[logical]
def length‹s,t› ?(A : Type‹s›) : list‹_,t›A -> nat
  | nil     => zero
  | _ :: tl => succ (length tl)

#[logical]
inductive at‹s,t› ?(A : Type‹s›) (x : A) : nat -> list‹_,t› A -> U where
  | at_zero (xs0 : list A) : at x zero (x :: xs0)
  | at_succ ?(n : nat) (x0 : A) ?(xs0 : list A) (h : at x n xs0) : at x (succ n) (x0 :: xs0)

def get_at ?{A : U}
: ∀ (n : nat) (xs : list‹_,U›A) -> {lt n (length xs) = true} -> exists (fn x => at x n xs)
  | _     , nil    , !! =>
  | zero  , x :: xs, _  => ⟨x, {at_zero xs}⟩
  | succ n, x :: xs, e  => 
    let ⟨x0, {pf}⟩ := get_at n xs e in
    ⟨x0, {at_succ _ pf}⟩