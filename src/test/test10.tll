notation ( |> ) := (%2 %1)
notation ( @@ ) := (%1 %2)
notation ( = ) := eq %1 %2
notation ( ` ) := sing %1
notation ( && ) := and
notation ( || ) := or
notation ( + ) := add %1 %2
notation ( - ) := sub %1 %2
notation ( * ) := mul %1 %2
notation ( / ) := div %1 %2
notation ( % ) := rem %1 %2
notation ( ^ ) := pow %1 %2
notation ( < ) := lt %1 %2
notation ( > ) := gt %1 %2
notation ( <= ) := lte %1 %2
notation ( >= ) := gte %1 %2
notation ( × ) := prod1 %1 %2
notation ( :: ) := cons %1 %2
notation ( ; ) := let* _ := %1 in %2
notation ( ⟨{ }, ⟩ ) := ex0 %1 %2
notation ( ⟨ , ⟩ ) := ex1 %1 %2


#[logical]
inductive eq‹s› ?(A : Type‹s›) (m : A) : A -> U where
  | refl : m = m

inductive unit : U where
  | tt : unit

inductive bool : U where
  | true  : bool
  | false : bool

inductive nat : U where
  | zero : nat
  | succ (n : nat) : nat

inductive exists0‹s,r› ?(A : Type‹s›) (B : A -> Type‹r›) : L where
  | ex0 {m : A} (n : B m) : @exists0 A B

inductive exists1‹s,r› ?(A : Type‹s›) (B : A -> Type‹r›) : L where
  | ex1 (m : A) (n : B m) : @exists1 A B

def not : bool -> bool
  | true  => false
  | false => true

def and : bool -> bool -> bool
  | true true => true
  | _    _    => false

def or : bool -> bool -> bool
  | false false => false
  | _     _     => true

def xor : bool -> bool -o bool
  | true  true  => false
  | false false => false
  | _     _     => true

def lte : nat -> nat -> bool
  | zero     _        => true
  | _        zero     => false
  | (succ x) (succ y) => x <= y

def lt (x : nat) (y : nat) : bool := (succ x) <= y

def pred : nat -> nat
  | zero     => zero
  | (succ x) => x

def add : nat -> nat -> nat
  | zero     y => y 
  | (succ x) y => succ (x + y)

def sub : nat -> nat -> nat
  | x zero     => x
  | x (succ y) => (pred x) - y

def mul : nat -> nat -> nat
  | zero     _ => zero
  | (succ x) y => y + (x * y)

def div (x : nat) (y : nat) :=
  match lt x y with
  | true  => zero
  | false => succ ((x - y) / y)

def rem (x : nat) (y : nat) :=
  x - ((x / y) * y)

def pow : nat -> nat -> nat
  | _ zero     => succ zero
  | x (succ y) => x * x ^ y

#[logical] extern proto : U
#[logical] extern act0‹s› (b : bool) ?(A : Type‹s›) (B : A -> proto) : proto
#[logical] extern act1‹s› (b : bool) ?(A : Type‹s›) (B : A -> proto) : proto
#[logical] extern endp : proto
#[logical] extern ch : bool -> proto -> L

extern close ?{b : bool} : ch b endp -> IO unit 
extern send0‹s› ?{b1 b2 : bool} ?{A : Type‹s›} ?{B : A -> proto} : {xor b1 b2 = false} -> (ch b1 (act0 b2 B)) -> ∀ {x : A} -o IO (ch b1 (B x))
extern send1‹s› ?{b1 b2 : bool} ?{A : Type‹s›} ?{B : A -> proto} : {xor b1 b2 = false} -> (ch b1 (act1 b2 B)) -> ∀ (x : A) -o IO (ch b1 (B x))
extern recv0‹s› ?{b1 b2 : bool} ?{A : Type‹s›} ?{B : A -> proto} : {xor b1 b2 = true} -> (ch b1 (act0 b2 B)) -> IO (exists0 fn (x : A) => ch b1 (B x))
extern recv1‹s› ?{b1 b2 : bool} ?{A : Type‹s›} ?{B : A -> proto} : {xor b1 b2 = true} -> (ch b1 (act1 b2 B)) -> IO (exists1 fn (x : A) => ch b1 (B x))
extern fork ?{b : bool} ?{P : proto} : (ch b P -o IO unit) -> IO (ch (not b) P)

#[logical]
def DH (p g : nat) : proto :=
  act0 true  fn (a : nat) => act1 true  fn (A : nat) => act0 true  fn (_ : A = (g ^ a % p)) =>
  act0 false fn (b : nat) => act1 false fn (B : nat) => act0 false fn (_ : B = (g ^ b % p)) =>
  endp

#[logical] def DH_ch (p g : nat) := ch true  (DH p g)
#[logical] def DH_hc (p g : nat) := ch false (DH p g)

def alice (a : nat) (p g : nat) (c : DH_ch p g) : IO unit :=
  let* c := send0 refl c a in 
  let* c := send1 refl c (g ^ a % p) in
  let* c := send0 refl c refl in
  let* ⟨{b}, c⟩ := recv0 refl c in
  let* ⟨B, c⟩ := recv1 refl c in
  let* ⟨{pf}, c⟩ := recv0 refl c in
  close c

def bob (b : nat) (p g : nat) (c : DH_hc p g) : IO unit :=
  let* ⟨{a}, c⟩ := recv0 refl c in
  let* ⟨A, c⟩ := recv1 refl c in
  let* ⟨{pf}, c⟩ := recv0 refl c in
  let* c := send0 refl c b in
  let* c := send1 refl c (g ^ b % p) in
  let* c := send0 refl c refl in
  close c
