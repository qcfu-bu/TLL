-- define locations
#[logical]def loc : U := nat

-- the capability A@l states that a value of type A is stored at location l
#[logical]
inductive at‹s› (A : Type‹s›) (l : loc) : L where
| at_intro (m : A) : at A l

notation ( @ ) := (at %1 %2)




-- at_intro cannot be used relevantly, so the only way to obtain relevant capabilities
-- is to call alloc which is completely abstract.
-- alloc is monadic because a fresh location is generated from thin air.
extern alloc (_ : unit) : IO (exists1 fn l => unit @ l)  




-- The following declarations are "semi-external". They have relevant names with
-- irrlevant bodies. During compilation, external code is emitted instead of the
-- irrlevant body. We must ensure that the semantics of the external code is
-- consistent with the semantics of the irrelevant body.

-- non-linear get can retrieve values without removal 
extern getU ?{A : U} (l : loc) (pf : A @ l) : prod1 A (A @ l) :=
  let at_intro v := pf in ⟨v, pf⟩

-- linear get must retrieve values with removal 
extern getL ?{A : L} (l : loc) (pf : A @ l) : prod1 A (unit @ l) :=
  let at_intro v := pf in ⟨v, at_intro tt⟩

-- set can override previous stored value
extern set‹s› ?{A : U} ?{B : Type‹s›} (l : loc) (m : B) (pf : A @ l) : B @ l :=
  let at_intro _ := pf in at_intro m

-- free deallocates references with non-linear values inside
-- to free references with linear values, the linear values must first be removed 
extern free ?{A : U} (l : loc) (pf : A @ l) : unit :=
  let at_intro _ := pf in tt




-- State laws can be proven by simple induction on capabilities.
#[logical]
def set_get_law‹s› ?(A : U) (l : loc) (pf : A @ l) (v0 : A) : 
  let pf := set l v0 pf in
  let ⟨v1, pf⟩ := getU l pf in
  v0 = v1
:=
  match pf as pf0 in
    let pf0 := set l v0 pf0 in
    let ⟨v1, pf0⟩ := getU l pf0 in
    v0 = v1
  with 
  | at_intro v => refl




-- Capabilities are linear, references enjoy unique ownership.
def main : IO unit :=
  let* ⟨l, pf⟩ := alloc tt in
  let pf := set l zero pf in
  let _ := free l pf in
  return tt
