-- begin of stdlib

notation ( |> ) := (%2 %1)
notation ( @@ ) := (%1 %2)
notation ( = ) := eq %1 %2
notation ( ` ) := sing %1
notation ( && ) := and %1 %2
notation ( || ) := or %1 %2
notation ( + ) := add %1 %2
notation ( - ) := sub %1 %2
notation ( * ) := mul %1 %2
notation ( / ) := div %1 %2
notation ( % ) := rem %1 %2
notation ( ^ ) := pow %1 %2
notation ( < ) := lt %1 %2
notation ( > ) := gt %1 %2
notation ( <= ) := lte %1 %2
notation ( >= ) := gte %1 %2
notation ( × ) := prod1 %1 %2
notation ( :: ) := cons %1 %2
notation ( ; ) := let* _ := %1 in %2
notation ( ⟨{ }, ⟩ ) := ex0 %1 %2
notation ( ⟨ , ⟩ ) := ex1 %1 %2

#[logical]
inductive eq‹s› ?(A : Type‹s›) (m : A) : A -> U where
  | refl : m = m

def rwl‹s,r› ?{A : Type‹s›} ?{m n : A} {B : A -> Type‹r›} : {m = n} -> B m -> B n
  | refl x => x

def rwr‹s,r› ?{A : Type‹s›} ?{m n : A} {B : A -> Type‹r›} : {m = n} -> B n -> B m
  | refl x => x

inductive sing‹s› ?(A : Type‹s›) : A -> Type‹s› where
  | just (m : A) : `m

inductive unit : U where
  | tt : unit

inductive bool : U where
  | true  : bool
  | false : bool

inductive nat : U where
  | zero : nat
  | succ (n : nat) : nat

inductive list‹s,t› (A : Type‹s›) : Type‹t› where
  | nil : list A
  | cons (hd : A) (tl : list‹_,t› A) : list A

inductive exists0‹s,r› ?(A : Type‹s›) (B : A -> Type‹r›) : L where
  | ex0 {m : A} (n : B m) : @exists0 A B

inductive exists1‹s,r› ?(A : Type‹s›) (B : A -> Type‹r›) : L where
  | ex1 (m : A) (n : B m) : @exists1 A B

#[logical]def prod0‹s,r› (A : Type‹s›) (B : Type‹r›) := @exists0 A (fn _ => B)
#[logical]def prod1‹s,r› (A : Type‹s›) (B : Type‹r›) := @exists1 A (fn _ => B)

def not : bool -> bool
  | true  => false
  | false => true

def and : bool -> bool -> bool
  | true true => true
  | _    _    => false

def or : bool -> bool -> bool
  | false false => false
  | _     _     => true

def xor : bool -> bool -o bool
  | true  true  => false
  | false false => false
  | _     _     => true

def lte : nat -> nat -> bool
  | zero     _        => true
  | _        zero     => false
  | (succ x) (succ y) => x <= y

def lt (x : nat) (y : nat) : bool := (succ x) <= y

def pred : nat -> nat
  | zero     => zero
  | (succ x) => x

def add : nat -> nat -> nat
  | zero     y => y 
  | (succ x) y => succ (x + y)

def sub : nat -> nat -> nat
  | x zero     => x
  | x (succ y) => (pred x) - y

-- FIXME: OPERATOR PRECENDENCE IS PARSED WRONG!
def mul : nat -> nat -> nat
  | zero     _ => zero
  | (succ x) y => y + (x * y)

def div (x : nat) (y : nat) :=
  match lt x y with
  | true  => zero
  | false =>
    let function loop (x y : nat) :=
      match x - (pred y) with
      | zero => zero
      | succ x => succ (loop x y)
    in
    loop x y

def one := succ zero
def two := succ one
def three := succ two
def four := succ three
def five := succ four
def six := succ five
def seven := succ six
def eight := succ seven
def nine := succ eight
def ten := succ nine
#[logical]
def test : (two * (two + one)) = six := refl

def rem (x : nat) (y : nat) :=
  x - ((x / y) * y)

def pow : nat -> nat -> nat
  | _ zero     => succ zero
  | x (succ y) => x * x ^ y

-- end of stdlib




-- define locations
#[logical]def loc : U := nat

-- the capability A@l states that a value of type A is stored at location l
#[logical]
inductive at‹s› (A : Type‹s›) (l : loc) : L where
| at_intro (m : A) : at A l

notation ( @ ) := (at %1 %2)




-- at_intro cannot be used relevantly, so the only way to obtain relevant capabilities
-- is to call alloc which is completely abstract.
-- alloc is monadic because a fresh location is generated from thin air.
extern alloc (_ : unit) : IO (exists1 fn l => unit @ l)  




-- The following declarations are "semi-external". They have relevant names with
-- irrlevant bodies. During compilation, external code is emitted instead of the
-- irrlevant body. We must ensure that the semantics of the external code is
-- consistent with the semantics of the irrelevant body.

-- non-linear get can retrieve values without removal 
extern getU ?{A : U} (l : loc) (pf : A @ l) : prod1 A (A @ l) :=
  match pf with
  | at_intro v => ⟨v, pf⟩

-- linear get must retrieve values with removal 
extern getL ?{A : L} (l : loc) (pf : A @ l) : prod1 A (unit @ l) :=
  match pf with
  | at_intro v => ⟨v, at_intro tt⟩

-- set can override previous stored value
extern set‹s› ?{A : U} ?{B : Type‹s›} (l : loc) (m : B) (pf : A @ l) : B @ l :=
  match pf with
  | at_intro _ => at_intro m

-- free deallocates references with non-linear values inside
-- to free references with linear values, the linear values must first be removed 
extern free ?{A : U} (l : loc) (pf : A @ l) : unit :=
  match pf with
  | at_intro _ => tt




-- State laws can be proven by simple induction on capabilities.
#[logical]
def set_get_law‹s› ?(A : U) (l : loc) (pf : A @ l) (v0 : A) : 
  let pf := set l v0 pf in
  let ⟨v1, pf⟩ := getU l pf in
  v0 = v1
:=
  match pf as pf0
     in
        let pf0 := set l v0 pf0 in
        let ⟨v1, pf0⟩ := getU l pf0 in
        v0 = v1
  with 
  | at_intro v => refl




-- Capabilities are linear, references enjoy unique ownership.
def main : IO unit :=
  let* ⟨l, pf⟩ := alloc tt in
  let pf := set l zero pf in
  let _ := free l pf in
  return tt
