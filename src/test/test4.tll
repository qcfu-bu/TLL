inductive unit : U where
| tt : unit

inductive bool : U where
| true  : bool
| false : bool

inductive nat : U where
| zero : nat
| succ (pred : nat) : nat

#[logical]
inductive eq‹s› (A : Type‹s›) (m : A) : A -> U where
| refl : eq _ m m

inductive exists‹s,r,t› (A : Type‹s›) (B : A -> Type‹r›) : Type‹t› where
| ex (m : A) {pf : B m} : exists A B

inductive sing‹s› (A : Type‹s›) : A -> Type‹s› where
| just (m : A) : sing _ m

inductive list‹s› (A : Type‹s›) : U where
| nil : list A
| cons (hd : A) (tl : list A) : list A
