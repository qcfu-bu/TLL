#[logical]def llist‹s› (A : Type‹s›) := list‹_,L› A

inductive opr : U where
  | Free : opr
  | Enqueue (n : int) : opr
  | Dequeue : opr

#[logical]
def queue_p (xs : llist int) : proto :=
  ⇓(o : opr) ->
    match o with
    | Free      => •
    | Enqueue x => queue_p (rcons xs x)
    | Dequeue   =>
      match xs with
      | x :: xs => ⇑(`x) -> ⇑(hc⟨queue_p xs⟩) -> •
      | nil     => queue_p xs

#[logical]def queue_ch (xs : llist int) : L := ch⟨queue_p xs⟩
#[logical]def queue_hc (xs : llist int) : L := hc⟨queue_p xs⟩
#[logical]def queue (xs : llist int) : L := IO (queue_hc xs)

def node_worker ?{xs : llist int} (x : int) : queue_hc xs .-> queue_ch (x :: xs) .-> IO unit
  | c_next, c =>
    let* ⟨o, c⟩ := recv c in
    match o as o0
        , c as _ :
          ch⟨match o0 with
             | Free => •
             | Enqueue n => queue_p (rcons (x :: xs) n)
             | Dequeue   => ⇑(`x) -> ⇑(hc⟨queue_p xs⟩) → •⟩
    with
    | Free, c => 
      let* c_next := send c_next Free in
      close c_next; close c
    | Enqueue n, c =>
      let* c_next := send c_next (Enqueue n) in
      node_worker x c_next c
    | Dequeue, c =>
      let* c := send c (just x) in
      let* c := send c c_next in
      close c

def empty_worker (c : queue_ch nil) : IO unit :=
  let* ⟨o, c⟩ := recv c in
  match o as o0
      , c as _ :
        ch⟨match o0 with
           | Free => •
           | Enqueue n => queue_p (n :: nil)
           | Dequeue   => queue_p nil⟩
  with
  | Free, c => close c
  | Enqueue n, c =>
    let* c0 := fork (c0 : queue_hc nil) => node_worker n c0 c in
    empty_worker c0
  | Dequeue, c => empty_worker c

def q_empty (_ : unit) : queue nil :=
  fork (c : queue_ch nil) => empty_worker c

def q_free ?{xs : llist int} (q : queue xs) : IO unit :=
  let* q := q in
  let* q := send q Free in
  close q

def q_enqueue ?{xs : llist int} (n : int) (q : queue xs) : queue (rcons xs n) :=
  let* q := q in
  let* q := send q (Enqueue n) in
  return q

def q_dequeue ?{x : int} ?{xs : llist int} (q : queue (x :: xs)) : IO (`x ⊗ queue xs) :=
  let* q := q in
  let* q := send q Dequeue in
  let* ⟨n, q⟩ := recv q in
  let* ⟨q0, q⟩ := recv q in
  close q; return ⟨n, return q0⟩

def myqueue := q_empty tt
def myqueue := q_enqueue 0 myqueue
def myqueue := q_enqueue 1 myqueue
def myqueue := q_enqueue 2 myqueue
def myqueue := q_enqueue 3 myqueue
def myqueue := q_enqueue 4 myqueue
def myqueue := q_enqueue 5 myqueue
def myqueue := q_enqueue 6 myqueue

def main : IO unit :=
  let* ⟨just x, myqueue⟩ := q_dequeue myqueue in
  let* ⟨just y, myqueue⟩ := q_dequeue myqueue in
  let* ⟨just z, myqueue⟩ := q_dequeue myqueue in
  let* tt := q_free myqueue in
  print ("x := " ++ string_of_int x ++ "\n" ++
         "y := " ++ string_of_int y ++ "\n" ++
         "z := " ++ string_of_int z ++ "\n")
