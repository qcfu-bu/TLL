inductive tree : U where
  | Leaf : tree
  | Node (_ : int) (l r : tree) : tree

inductive opr : U where
  | Free : opr
  | Height : opr
  | Size : opr
  | Lookup (k : int) : opr

def height : tree -> int
  | Leaf => 0
  | Node _ l r =>
    let x := height l in
    let y := height r in
    if x < y then y + 1 else x + 1

def size : tree -> int
  | Leaf => 0
  | Node _ l r =>
    1 + size l + size r

def lookup (n : int) : tree -> bool
  | Leaf => false
  | Node x l r =>
    if x == n then true
    else lookup n l || lookup n r

#[logical]
def tree_p (t : tree) : proto :=
  ⇓(o : opr) ->
    match o with
    | Free     => •
    | Height   => ⇑(_ : `height t) -> tree_p t
    | Size     => ⇑(_ : `size t) -> tree_p t
    | Lookup k => ⇑(_ : `lookup k t) → tree_p t

#[logical]def ctree_ch (t : tree) : L := ch⟨tree_p t⟩
#[logical]def ctree_hc (t : tree) : L := hc⟨tree_p t⟩
#[logical]def ctree (t : tree) : L := IO (ctree_hc t)

def leaf_worker (c : ctree_ch Leaf) : IO unit := 
  let* ⟨o, c⟩ := recv c in
  match o as o0
      , c as _ :
        ch⟨match o0 with
           | Free     => •
           | Height   => ⇑(_ : `0) -> tree_p Leaf
           | Size     => ⇑(_ : `0) -> tree_p Leaf
           | Lookup _ => ⇑(_ : `false) → tree_p Leaf⟩
  with
  | Free    , c => close c
  | Height  , c => let* c := send c (just 0) in leaf_worker c
  | Size    , c => let* c := send c (just 0) in leaf_worker c
  | Lookup _, c => let* c := send c (just false) in leaf_worker c

def node_worker (x : int) ?{l r : tree} : ctree_hc l .-> ctree_hc r .-> ctree_ch (Node x l r) .-> IO unit
  | l_ch, r_ch, c =>
    let* ⟨o, c⟩ := recv c in
    match o as o0
        , c as _ :
          ch⟨match o0 with
             | Free     => •
             | Height   => ⇑(_ : `height (Node x l r)) -> tree_p (Node x l r)
             | Size     => ⇑(_ : `size (Node x l r)) -> tree_p (Node x l r)
             | Lookup k => ⇑(_ : `lookup k (Node x l r)) → tree_p (Node x l r)⟩
    with
    | Free, c =>
      let* l_ch := send l_ch Free in
      let* r_ch := send r_ch Free in
      close l_ch; close r_ch; close c
    | Height, c =>
      let* l_ch := send l_ch Height in
      let* r_ch := send r_ch Height in
      let* ⟨just l_h, l_ch⟩ := recv l_ch in
      let* ⟨just r_h, r_ch⟩ := recv r_ch in
      (match l_h < r_h as b0
           , c     as _ :
             ch⟨⇑(_ : `(if b0 then r_h + 1 else l_h + 1)) -> tree_p (Node x l r)⟩
       with
       | true , c =>
         let* c := send c (just (r_h + 1)) in
         node_worker x l_ch r_ch c
       | false, c =>
         let* c := send c (just (l_h + 1)) in
         node_worker x l_ch r_ch c)
    | Size, c =>
      let* l_ch := send l_ch Size in
      let* r_ch := send r_ch Size in
      let* ⟨just l_sz, l_ch⟩ := recv l_ch in
      let* ⟨just r_sz, r_ch⟩ := recv r_ch in
      let* c := send c (just (1 + l_sz + r_sz)) in
      node_worker x l_ch r_ch c
    | Lookup k, c =>
      (match x == k as b0
           , c      as _ :
             ch⟨⇑(_ : `(if b0 then true else lookup k l || lookup k r)) → tree_p (Node x l r)⟩
       with
       | true , c =>
         let* c := send c (just true) in
         node_worker x l_ch r_ch c
       | false, c =>
         let* l_ch := send l_ch (Lookup k) in
         let* r_ch := send r_ch (Lookup k) in
         let* ⟨just l_b, l_ch⟩ := recv l_ch in
         let* ⟨just r_b, r_ch⟩ := recv r_ch in
         let* c := send c (just (l_b || r_b)) in
         node_worker x l_ch r_ch c)
        
def cleaf (_ : unit) : ctree Leaf := 
  fork (c : ctree_ch Leaf) => leaf_worker c

def cnode (x : int) ?{l r : tree} : ctree l .-> ctree r .-> ctree (Node x l r)
  | l0, r0 =>
    let* l_ch := l0 in
    let* r_ch := r0 in
    fork (c : ctree_ch (Node x l r)) => node_worker x l_ch r_ch c

def cfree ?{t : tree} (ct : ctree t) : IO unit :=
  let* c := ct in
  let* c := send c Free in
  close c

def cheight ?{t : tree} (ct : ctree t) : IO ((`height t) ⊗ ctree t) :=
  let* c := ct in
  let* c := send c Height in
  let* ⟨x, ct⟩ := recv c in
  return ⟨x, return ct⟩

def csize ?{t : tree} (ct : ctree t) : IO ((`size t) ⊗ ctree t) :=
  let* c := ct in
  let* c := send c Size in
  let* ⟨x, ct⟩ := recv c in
  return ⟨x, return ct⟩

def clookup (k : int) ?{t : tree} (ct : ctree t) : IO ((`lookup k t) ⊗ ctree t) :=
  let* c := ct in
  let* c := send c (Lookup k) in
  let* ⟨x, ct⟩ := recv c in
  return ⟨x, return ct⟩

def mytree1 (x : int) : _ := cnode x (cleaf tt) (cleaf tt)
def mytree2 (x : int) : _ := cnode x (mytree1 1) (mytree1 2)
def mytree3 (x : int) : _ := cnode x (mytree2 3) (mytree2 4)
def mytree4 (x : int) : _ := cnode x (mytree3 8) (mytree3 7)
def mytree5 (x : int) : _ := cnode x (mytree4 9) (mytree4 10)
def mytree6 (x : int) : _ := cnode x (mytree5 11) (mytree5 12)

def main : IO unit :=
  let ct := mytree6 100 in
  let* ⟨just h, ct⟩  := cheight ct   in
  let* ⟨just sz, ct⟩ := csize ct     in
  let* ⟨just b, ct⟩  := clookup 1 ct in
  let* tt := cfree ct in
  print ("height := " ++ string_of_int h  ++ "\n" ++
         "size   := " ++ string_of_int sz ++ "\n" ++
         "lookup := " ++ string_of_bool b ++ "\n")
 
