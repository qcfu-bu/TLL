program split‹t› (zs : ((list‹_, t›)
(nat))) : (∃ (_ : ((list‹_, t›) (nat))) ⊗ ((list‹_, t›)
(nat))) = match zs as _ in _ with nil  ⇒ ⟨nil, nil⟩ | cons x
zs ⇒ match zs as _ in _ with nil  ⇒ ⟨((cons) (x)
(nil)), nil⟩ | cons y zs ⇒ let ⟨xs, ys⟩ = ((split)
(zs)) in ⟨((cons) (x) (xs)), ((cons) (y)
(ys))⟩

program merge‹t› (xs : ((list‹_, t›)
(nat))) : (∀ (_ : ((list‹_, t›) (nat))) ⊸ ((list‹_, t›)
(nat))) = (ln (ys : _) ⇒ match xs as _ in _ with nil  ⇒ ys | cons x
xs0 ⇒ match ys as _ in _ with nil  ⇒ ((cons) (x) (xs0)) | cons y
ys0 ⇒ match ((lten) (x) (y)) as _ in _ with true ⇒ ((cons) (x)
(((merge) (xs0) (((cons) (y) (ys0)))))) | false ⇒ ((cons) (y)
(((merge) (((cons) (x) (xs0))) (ys0)))))

program msort‹t› (zs : ((list‹_, t›) (nat))) : ((list‹_, t›)
(nat)) = match zs as _ in _ with nil  ⇒ nil | cons x
zs ⇒ match zs as _ in _ with nil  ⇒ ((cons) (x) (nil)) | cons y
zs ⇒ let ⟨xs, ys⟩ = ((split)
(((cons) (x) (((cons) (y) (zs)))))) in ((merge) (((msort) (xs)))
(((msort) (ys))))

logical cmsort_ch‹t› : L = ch‹!(_ : ((list‹_, t›)
(nat))) → end›

program cmsort_worker‹t› (n : nat) (zs : ((list‹_, t›)
(nat))) : (∀ (_ : cmsort_ch‹t›) ⊸ IO unit) = (ln (c : _) ⇒ let c ⇐ (
(send c)
(((msort) (zs)))) in close c)

program cmsort‹t› (zs0 : ((list‹_, t›) (nat))) : IO ((list‹_, t›)
(nat)) = let c ⇐ fork (c : cmsort_ch) in ((cmsort_worker) (O.+0) (zs0)
(c)) in let ⟨zs1, c⟩ ⇐ recv c in let _ ⇐ close c in return zs1

program mkList‹t› (n : nat) : ((list‹_, t›)
(nat)) = match n as _ in _ with O ⇒ nil | S n0 ⇒ ((cons) (n)
(((mkList) (n0))))

program main‹› : IO unit = let test = ((mkList‹U›)
(O.+10000)) in let sorted ⇐ ((cmsort)
(test)) in return ()

parsing success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v195 : bool) (b2_v196 : bool) ⇒
    match b1_v195 as __v197 in ??1 with
    | true ⇒ b2_v196 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v200 : bool) (b2_v201 : bool) ⇒
    match b1_v200 as __v202 in ??2 with
    | true ⇒ true | false ⇒ b2_v201
    end

program notb_i3 : bool → bool =
  fn (b_v204 : bool) ⇒
    match b_v204 as __v205 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v208 : nat) (y_v209 : nat) ⇒
    match x_v208 as __v210 in ??4 with
    | O ⇒ true
    | S x_v211 ⇒
      match y_v209 as __v212 in ??5 with
      | O ⇒ false | S y_v213 ⇒ (lten_i4 x_v211 y_v213)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v216 : nat) (y_v217 : nat) ⇒
    match x_v216 as __v218 in ??6 with
    | O ⇒
      match y_v217 as __v219 in ??8 with
      | O ⇒ true | S __v220 ⇒ false
      end
    | S x_v221 ⇒
      match y_v217 as __v222 in ??7 with
      | O ⇒ true | S y_v223 ⇒ (gten_i5 x_v221 y_v223)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v226 : nat) (y_v227 : nat) ⇒
    match x_v226 as __v228 in ??9 with
    | O ⇒
      match y_v227 as __v229 in ??11 with
      | O ⇒ false | S y_v230 ⇒ true
      end
    | S x_v231 ⇒
      match y_v227 as __v232 in ??10 with
      | O ⇒ false | S y_v233 ⇒ (ltn_i6 x_v231 y_v233)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v236 : nat) (y_v237 : nat) ⇒
    match x_v236 as __v238 in ??12 with
    | O ⇒ false
    | S x_v239 ⇒
      match y_v237 as __v240 in ??13 with
      | O ⇒ true | S y_v241 ⇒ (gtn_i7 x_v239 y_v241)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v244 : nat) (y_v245 : nat) ⇒
    match x_v244 as __v246 in ??14 with
    | O ⇒
      match y_v245 as __v247 in ??16 with
      | O ⇒ true | S __v248 ⇒ false
      end
    | S x_v249 ⇒
      match y_v245 as __v250 in ??15 with
      | O ⇒ false | S y_v251 ⇒ (eqn_i8 x_v249 y_v251)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v253 : nat) ⇒
    match x_v253 as __v254 in ??17 with
    | O ⇒ 0 | S x_v255 ⇒ x_v255
    end

program addn_i10 : nat → nat → nat =
  fn (x_v258 : nat) (y_v259 : nat) ⇒
    match x_v258 as __v260 in ??18 with
    | O ⇒ y_v259 | S x_v261 ⇒ (addn_i10 x_v261 y_v259).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v264 : nat) (y_v265 : nat) ⇒
    match y_v265 as __v266 in ??19 with
    | O ⇒ x_v264 | S y_v267 ⇒ (subn_i11 (pred_i9 x_v264) y_v267)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v270 : nat) (y_v271 : nat) ⇒
    match x_v270 as __v272 in ??20 with
    | O ⇒ 0 | S x_v273 ⇒ (addn_i10 y_v271 (muln_i12 x_v273 y_v271))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v276 : nat) (y_v277 : nat) ⇒
    match (ltn_i6 x_v276 y_v277) as __v278 in ??21 with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v276 y_v277) y_v277).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v281 : nat) (y_v282 : nat) ⇒
    (subn_i11 x_v281 (muln_i12 (divn_i13 x_v281 y_v282) y_v282))

inductive char_d1 : U =
| Char_c1 of (n_v283 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v284 : char_d1) (s_v285 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v288 : string_d2) (s2_v289 : string_d2) ⇒
    match s1_v288 as __v290 in ??22 with
    | EmptyString_c2  ⇒ s2_v289
    | String_c3 c_v291 s1_v292 ⇒
      (String_c3‹› c_v291 (cats_i15 s1_v292 s2_v289))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v294 : string_d2) ⇒
    match s_v294 as __v295 in ??23 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v296 s_v297 ⇒ (strlen_i16 s_v297).+1
    end

inductive list_d3 ‹s_s298, t_s299›
  (A_v300 : Type‹s_s298›) : Type‹t_s299›
=
| nil_c4 of
    ‹s_s301, t_s302› (A_v303 : Type‹s_s301›)
    : (list_d3‹s_s301, t_s302› A_v303)
| cons_c5 of
    ‹s_s304, t_s305› (A_v306 : Type‹s_s304›) (hd_v307 : A_v306)
    (tl_v308 : (list_d3‹s_s304, t_s305› A_v306))
    : (list_d3‹s_s304, t_s305› A_v306)

program len_i17 ‹s_s309, t_s310› :
  ∀ {A_v311 : Type‹s_s309›} →
    (list_d3‹??24, t_s310› A_v311) →
      nat ⊗ (list_d3‹??25, t_s310› A_v311)
=
  fn {A_v314 : Type‹s_s309›}
     (xs_v315 : (list_d3‹??24, t_s310› A_v314)) ⇒
    match xs_v315 as __v316 in ??26 with
    | nil_c4  ⇒ ⟨0, nil_c4‹??36, ??35›⟩
    | cons_c5 x_v317 xs_v318 ⇒
      match (len_i17‹??29, ??28› ??27 xs_v318) as __v319 in ??30 with
      | ⟨n_v320, xs_v321⟩ ⇒
        ⟨n_v320.+1, (cons_c5‹??33, ??32› x_v317 xs_v321)⟩
      end
    end

program append_i18 ‹s_s322, t_s323› :
  ∀ {A_v324 : Type‹s_s322›} →
    (list_d3‹??37, t_s323› A_v324) →
      (list_d3‹??38, t_s323› A_v324) ⊸ (list_d3‹??40, ??39› A_v324)
=
  fn {A_v327 : Type‹s_s322›}
     (xs_v328 : (list_d3‹??37, t_s323› A_v327)) ⇒
    ln (ys_v329 : ??41) ⇒
      match xs_v328 as __v330 in ??42 with
      | nil_c4  ⇒ ys_v329
      | cons_c5 x_v331 xs_v332 ⇒
        (cons_c5‹??48, ??47›
          x_v331 (append_i18‹??45, ??44› ??43 xs_v332 ys_v329))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v334 : unit) ⇒
    ⇑(b_v335 : bool) ⇒
      match b_v335 as __v336 in ??49 with
      | true ⇒ ⇓(__v337 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v339 : unit) ⇒
    ⇑(b_v340 : bool) ⇒
      match b_v340 as __v341 in ??50 with
      | true ⇒ ⇑(__v342 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v344 : unit) ⇒
    ⇑(b_v345 : bool) ⇒
      match b_v345 as __v346 in ??51 with
      | true ⇒ ⇑(__v347 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v349 : unit) ⇒
    let ch_v350 ⇐ open stdin in
    let ch_v351 ⇐ (send ch_v350 true) in
    let __v352 ⇐ recv ch_v351 in
    match __v352 as __v353 in ??52 with
    | ⟨s_v354, ch_v355⟩ ⇒
      let ch_v356 ⇐ (send ch_v355 false) in
      let __v357 ⇐ close ch_v356 in return s_v354
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v359 : string_d2) ⇒
    let ch_v360 ⇐ open stdout in
    let ch_v361 ⇐ (send ch_v360 true) in
    let ch_v362 ⇐ (send ch_v361 s_v359) in
    let ch_v363 ⇐ (send ch_v362 false) in close ch_v363

program prerr_i27 : string_d2 → IO unit =
  fn (s_v365 : string_d2) ⇒
    let ch_v366 ⇐ open stderr in
    let ch_v367 ⇐ (send ch_v366 true) in
    let ch_v368 ⇐ (send ch_v367 s_v365) in
    let ch_v369 ⇐ (send ch_v368 false) in close ch_v369

program split_i28 ‹t_s370› :
  (list_d3‹??53, t_s370› nat) →
    (list_d3‹??54, t_s370› nat) ⊗ (list_d3‹??55, t_s370› nat)
=
  fn (zs_v373 : (list_d3‹??53, t_s370› nat)) ⇒
    match zs_v373 as __v374 in ??56 with
    | nil_c4  ⇒ ⟨nil_c4‹??77, ??76›, nil_c4‹??80, ??79›⟩
    | cons_c5 x_v375 zs_v376 ⇒
      match zs_v376 as __v377 in ??57 with
      | nil_c4  ⇒
        ⟨(cons_c5‹??71, ??70› x_v375 nil_c4‹??68, ??67›), nil_c4‹??74,
        ??73›⟩
      | cons_c5 y_v378 zs_v379 ⇒
        let __v380 = (split_i28‹??58› zs_v379) in
        match __v380 as __v381 in ??65 with
        | ⟨xs_v382, ys_v383⟩ ⇒
          ⟨(cons_c5‹??61, ??60› x_v375 xs_v382), (cons_c5‹??64,
                                                       ??63›
                                                         y_v378 ys_v383)⟩
        end
      end
    end

program merge_i29 ‹t_s384› :
  (list_d3‹??81, t_s384› nat) →
    (list_d3‹??82, t_s384› nat) ⊸ (list_d3‹??83, t_s384› nat)
=
  fn (xs_v387 : (list_d3‹??81, t_s384› nat)) ⇒
    ln (ys_v388 : ??84) ⇒
      match xs_v387 as __v389 in ??85 with
      | nil_c4  ⇒ ys_v388
      | cons_c5 x_v390 xs0_v391 ⇒
        match ys_v388 as __v392 in ??86 with
        | nil_c4  ⇒ (cons_c5‹??104, ??103› x_v390 xs0_v391)
        | cons_c5 y_v393 ys0_v394 ⇒
          match (lten_i4 x_v390 y_v393) as __v395 in ??87 with
          | true ⇒
            (cons_c5‹??101, ??100›
              x_v390
              (merge_i29‹??98›
                xs0_v391 (cons_c5‹??97, ??96› y_v393 ys0_v394)))
          | false ⇒
            (cons_c5‹??94, ??93›
              y_v393
              (merge_i29‹??91›
                (cons_c5‹??90, ??89› x_v390 xs0_v391) ys0_v394))
          end
        end
      end

program msort_i30 ‹t_s396› :
  (list_d3‹??105, t_s396› nat) → (list_d3‹??106, t_s396› nat)
=
  fn (zs_v398 : (list_d3‹??105, t_s396› nat)) ⇒
    match zs_v398 as __v399 in ??107 with
    | nil_c4  ⇒ nil_c4‹??128, ??127›
    | cons_c5 x_v400 zs_v401 ⇒
      match zs_v401 as __v402 in ??108 with
      | nil_c4  ⇒
        (cons_c5‹??125, ??124› x_v400 nil_c4‹??122, ??121›)
      | cons_c5 y_v403 zs_v404 ⇒
        let __v405 =
          (split_i28‹??115›
            (cons_c5‹??114, ??113›
              x_v400 (cons_c5‹??111, ??110› y_v403 zs_v404)))
        in
        match __v405 as __v406 in ??119 with
        | ⟨xs_v407, ys_v408⟩ ⇒
          (merge_i29‹??118›
            (msort_i30‹??117› xs_v407) (msort_i30‹??116› ys_v408))
        end
      end
    end

logical cmsort_ch_i31 ‹t_s409› : L =
  ch⟨⇑(__v410 : (list_d3‹??129, t_s409› nat)) ⇒ end⟩

program cmsort_worker_i32 ‹t_s411› :
  nat →
    (list_d3‹??130, t_s411› nat) →
      cmsort_ch_i31‹t_s411› ⊸ IO unit
=
  fn (n_v415 : nat) (zs_v416 : (list_d3‹??130, t_s411› nat)) ⇒
    ln (c_v417 : ??131) ⇒
      let c_v418 ⇐ (send c_v417 (msort_i30‹??132› zs_v416)) in
      close c_v418

program cmsort_i33 ‹t_s419› :
  (list_d3‹??133, t_s419› nat) → IO (list_d3‹??134, t_s419› nat)
=
  fn (zs0_v421 : (list_d3‹??133, t_s419› nat)) ⇒
    let c_v422 ⇐
      fork (c_v423 : cmsort_ch_i31‹??135›) in
        (cmsort_worker_i32‹??136› 0 zs0_v421 c_v423)
    in
    let __v424 ⇐ recv c_v422 in
    match __v424 as __v425 in ??137 with
    | ⟨zs1_v426, c_v427⟩ ⇒
      let __v428 ⇐ close c_v427 in return zs1_v426
    end

program mkList_i34 ‹t_s429› : nat → (list_d3‹??138, t_s429› nat) =
  fn (n_v431 : nat) ⇒
    match n_v431 as __v432 in ??139 with
    | O ⇒ nil_c4‹??146, ??145›
    | S n0_v433 ⇒
      (cons_c5‹??143, ??142› n_v431 (mkList_i34‹??140› n0_v433))
    end

program main_i35 : IO unit =
  let test_v434 = (mkList_i34‹U› 10000) in
  let sorted_v435 ⇐ (cmsort_i33‹??147› test_v434) in return ()

trans01 success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v8955 : bool) (b2_v8956 : bool) ⇒
    match b1_v8955 as __v8957 in bool with
    | true ⇒ b2_v8956 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v8960 : bool) (b2_v8961 : bool) ⇒
    match b1_v8960 as __v8962 in bool with
    | true ⇒ true | false ⇒ b2_v8961
    end

program notb_i3 : bool → bool =
  fn (b_v8964 : bool) ⇒
    match b_v8964 as __v8965 in bool with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v8968 : nat) (y_v8969 : nat) ⇒
    match x_v8968 as __v8970 in bool with
    | O ⇒ true
    | S x_v8971 ⇒
      match y_v8969 as __v8972 in bool with
      | O ⇒ false | S y_v8973 ⇒ (lten_i4 x_v8971 y_v8973)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v8976 : nat) (y_v8977 : nat) ⇒
    match x_v8976 as __v8978 in bool with
    | O ⇒
      match y_v8977 as __v8979 in bool with
      | O ⇒ true | S __v8980 ⇒ false
      end
    | S x_v8981 ⇒
      match y_v8977 as __v8982 in bool with
      | O ⇒ true | S y_v8983 ⇒ (gten_i5 x_v8981 y_v8983)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v8986 : nat) (y_v8987 : nat) ⇒
    match x_v8986 as __v8988 in bool with
    | O ⇒
      match y_v8987 as __v8989 in bool with
      | O ⇒ false | S y_v8990 ⇒ true
      end
    | S x_v8991 ⇒
      match y_v8987 as __v8992 in bool with
      | O ⇒ false | S y_v8993 ⇒ (ltn_i6 x_v8991 y_v8993)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v8996 : nat) (y_v8997 : nat) ⇒
    match x_v8996 as __v8998 in bool with
    | O ⇒ false
    | S x_v8999 ⇒
      match y_v8997 as __v9000 in bool with
      | O ⇒ true | S y_v9001 ⇒ (gtn_i7 x_v8999 y_v9001)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v9004 : nat) (y_v9005 : nat) ⇒
    match x_v9004 as __v9006 in bool with
    | O ⇒
      match y_v9005 as __v9007 in bool with
      | O ⇒ true | S __v9008 ⇒ false
      end
    | S x_v9009 ⇒
      match y_v9005 as __v9010 in bool with
      | O ⇒ false | S y_v9011 ⇒ (eqn_i8 x_v9009 y_v9011)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v9013 : nat) ⇒
    match x_v9013 as __v9014 in nat with
    | O ⇒ 0 | S x_v9015 ⇒ x_v9015
    end

program addn_i10 : nat → nat → nat =
  fn (x_v9018 : nat) (y_v9019 : nat) ⇒
    match x_v9018 as __v9020 in nat with
    | O ⇒ y_v9019 | S x_v9021 ⇒ (addn_i10 x_v9021 y_v9019).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v9024 : nat) (y_v9025 : nat) ⇒
    match y_v9025 as __v9026 in nat with
    | O ⇒ x_v9024 | S y_v9027 ⇒ (subn_i11 (pred_i9 x_v9024) y_v9027)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v9030 : nat) (y_v9031 : nat) ⇒
    match x_v9030 as __v9032 in nat with
    | O ⇒ 0 | S x_v9033 ⇒ (addn_i10 y_v9031 (muln_i12 x_v9033 y_v9031))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v9036 : nat) (y_v9037 : nat) ⇒
    match (ltn_i6 x_v9036 y_v9037) as __v9038 in nat with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v9036 y_v9037) y_v9037).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v9041 : nat) (y_v9042 : nat) ⇒
    (subn_i11 x_v9041 (muln_i12 (divn_i13 x_v9041 y_v9042) y_v9042))

inductive char_d1 : U =
| Char_c1 of (n_v9043 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v9044 : char_d1) (s_v9045 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v9048 : string_d2) (s2_v9049 : string_d2) ⇒
    match s1_v9048 as __v9050 in string_d2 with
    | EmptyString_c2  ⇒ s2_v9049
    | String_c3 c_v9051 s1_v9052 ⇒
      (String_c3‹› c_v9051 (cats_i15 s1_v9052 s2_v9049))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v9054 : string_d2) ⇒
    match s_v9054 as __v9055 in nat with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v9056 s_v9057 ⇒ (strlen_i16 s_v9057).+1
    end

inductive list_d3 ‹s_s9058, t_s9059›
  (A_v9060 : Type‹s_s9058›) : Type‹t_s9059›
=
| nil_c4 of
    ‹s_s9061, t_s9062› (A_v9063 : Type‹s_s9061›)
    : (list_d3‹s_s9061, t_s9062› A_v9063)
| cons_c5 of
    ‹s_s9064, t_s9065› (A_v9066 : Type‹s_s9064›) (hd_v9067 : A_v9066)
    (tl_v9068 : (list_d3‹s_s9064, t_s9065› A_v9066))
    : (list_d3‹s_s9064, t_s9065› A_v9066)

program len_i17 ‹s_s9069, t_s9070› :
  ∀ {A_v9071 : Type‹s_s9069›} →
    (list_d3‹s_s9069, t_s9070› A_v9071) →
      nat ⊗ (list_d3‹s_s9069, t_s9070› A_v9071)
=
  fn {A_v9074 : Type‹s_s9069›}
     (xs_v9075 : (list_d3‹s_s9069, t_s9070› A_v9074)) ⇒
    match xs_v9075 as __v9076 in
      nat ⊗ (list_d3‹s_s9069, t_s9070› A_v9074) with
    | nil_c4  ⇒ ⟨0, nil_c4‹s_s9069, t_s9070›⟩
    | cons_c5 x_v9078 xs_v9079 ⇒
      match (len_i17‹s_s9069, t_s9070› A_v9074 xs_v9079) as __v9080 in
        nat ⊗ (list_d3‹s_s9069, t_s9070› A_v9074) with
      | ⟨n_v9082, xs_v9083⟩ ⇒
        ⟨n_v9082.+1, (cons_c5‹s_s9069, t_s9070› x_v9078 xs_v9083)⟩
      end
    end

program append_i18 ‹s_s9084, t_s9085› :
  ∀ {A_v9086 : Type‹s_s9084›} →
    (list_d3‹s_s9084, t_s9085› A_v9086) →
      (list_d3‹s_s9084, t_s9085› A_v9086) ⊸
        (list_d3‹s_s9084, t_s9085› A_v9086)
=
  fn {A_v9089 : Type‹s_s9084›}
     (xs_v9090 : (list_d3‹s_s9084, t_s9085› A_v9089)) ⇒
    ln (ys_v9091 : (list_d3‹s_s9084, t_s9085› A_v9089)) ⇒
      match xs_v9090 as __v9092 in
        (list_d3‹s_s9084, t_s9085› A_v9089) with
      | nil_c4  ⇒ ys_v9091
      | cons_c5 x_v9093 xs_v9094 ⇒
        (cons_c5‹s_s9084, t_s9085›
          x_v9093
          (append_i18‹s_s9084, t_s9085› A_v9089 xs_v9094 ys_v9091))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v9096 : unit) ⇒
    ⇑(b_v9097 : bool) ⇒
      match b_v9097 as __v9098 in proto with
      | true ⇒ ⇓(__v9099 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v9101 : unit) ⇒
    ⇑(b_v9102 : bool) ⇒
      match b_v9102 as __v9103 in proto with
      | true ⇒ ⇑(__v9104 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v9106 : unit) ⇒
    ⇑(b_v9107 : bool) ⇒
      match b_v9107 as __v9108 in proto with
      | true ⇒ ⇑(__v9109 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v9111 : unit) ⇒
    let ch_v9112 ⇐ open stdin in
    let ch_v9113 ⇐ (send ch_v9112 true) in
    let __v9114 ⇐ recv ch_v9113 in
    match __v9114 as __v9115 in IO string_d2 with
    | ⟨s_v9116, ch_v9117⟩ ⇒
      let ch_v9118 ⇐ (send ch_v9117 false) in
      let __v9119 ⇐ close ch_v9118 in return s_v9116
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v9121 : string_d2) ⇒
    let ch_v9122 ⇐ open stdout in
    let ch_v9123 ⇐ (send ch_v9122 true) in
    let ch_v9124 ⇐ (send ch_v9123 s_v9121) in
    let ch_v9125 ⇐ (send ch_v9124 false) in close ch_v9125

program prerr_i27 : string_d2 → IO unit =
  fn (s_v9127 : string_d2) ⇒
    let ch_v9128 ⇐ open stderr in
    let ch_v9129 ⇐ (send ch_v9128 true) in
    let ch_v9130 ⇐ (send ch_v9129 s_v9127) in
    let ch_v9131 ⇐ (send ch_v9130 false) in close ch_v9131

program split_i28 ‹t_s9132› :
  (list_d3‹U, t_s9132› nat) →
    (list_d3‹U, t_s9132› nat) ⊗ (list_d3‹U, t_s9132› nat)
=
  fn (zs_v9135 : (list_d3‹U, t_s9132› nat)) ⇒
    match zs_v9135 as __v9136 in
      (list_d3‹U, t_s9132› nat) ⊗ (list_d3‹U, t_s9132› nat) with
    | nil_c4  ⇒ ⟨nil_c4‹U, t_s9132›, nil_c4‹U, t_s9132›⟩
    | cons_c5 x_v9138 zs_v9139 ⇒
      match zs_v9139 as __v9140 in
        (list_d3‹U, t_s9132› nat) ⊗ (list_d3‹U, t_s9132› nat) with
      | nil_c4  ⇒
        ⟨(cons_c5‹U, t_s9132› x_v9138 nil_c4‹U, t_s9132›), nil_c4‹U,
        t_s9132›⟩
      | cons_c5 y_v9142 zs_v9143 ⇒
        let __v9144 = (split_i28‹t_s9132› zs_v9143) in
        match __v9144 as __v9145 in
          (list_d3‹U, t_s9132› nat) ⊗ (list_d3‹U, t_s9132› nat) with
        | ⟨xs_v9147, ys_v9148⟩ ⇒
          ⟨(cons_c5‹U, t_s9132› x_v9138 xs_v9147), (cons_c5‹U,
                                                         t_s9132›
                                                           y_v9142 ys_v9148)⟩
        end
      end
    end

program merge_i29 ‹t_s9149› :
  (list_d3‹U, t_s9149› nat) →
    (list_d3‹U, t_s9149› nat) ⊸ (list_d3‹U, t_s9149› nat)
=
  fn (xs_v9152 : (list_d3‹U, t_s9149› nat)) ⇒
    ln (ys_v9153 : (list_d3‹U, t_s9149› nat)) ⇒
      match xs_v9152 as __v9154 in (list_d3‹U, t_s9149› nat) with
      | nil_c4  ⇒ ys_v9153
      | cons_c5 x_v9155 xs0_v9156 ⇒
        match ys_v9153 as __v9157 in (list_d3‹U, t_s9149› nat) with
        | nil_c4  ⇒ (cons_c5‹U, t_s9149› x_v9155 xs0_v9156)
        | cons_c5 y_v9158 ys0_v9159 ⇒
          match (lten_i4 x_v9155 y_v9158) as __v9160 in
            (list_d3‹U, t_s9149› nat) with
          | true ⇒
            (cons_c5‹U, t_s9149›
              x_v9155
              (merge_i29‹t_s9149›
                xs0_v9156 (cons_c5‹U, t_s9149› y_v9158 ys0_v9159)))
          | false ⇒
            (cons_c5‹U, t_s9149›
              y_v9158
              (merge_i29‹t_s9149›
                (cons_c5‹U, t_s9149› x_v9155 xs0_v9156) ys0_v9159))
          end
        end
      end

program msort_i30 ‹t_s9161› :
  (list_d3‹U, t_s9161› nat) → (list_d3‹U, t_s9161› nat)
=
  fn (zs_v9163 : (list_d3‹U, t_s9161› nat)) ⇒
    match zs_v9163 as __v9164 in (list_d3‹U, t_s9161› nat) with
    | nil_c4  ⇒ nil_c4‹U, t_s9161›
    | cons_c5 x_v9165 zs_v9166 ⇒
      match zs_v9166 as __v9167 in (list_d3‹U, t_s9161› nat) with
      | nil_c4  ⇒ (cons_c5‹U, t_s9161› x_v9165 nil_c4‹U, t_s9161›)
      | cons_c5 y_v9168 zs_v9169 ⇒
        let __v9170 =
          (split_i28‹t_s9161›
            (cons_c5‹U, t_s9161›
              x_v9165 (cons_c5‹U, t_s9161› y_v9168 zs_v9169)))
        in
        match __v9170 as __v9171 in (list_d3‹U, t_s9161› nat) with
        | ⟨xs_v9172, ys_v9173⟩ ⇒
          (merge_i29‹t_s9161›
            (msort_i30‹t_s9161› xs_v9172)
            (msort_i30‹t_s9161› ys_v9173))
        end
      end
    end

logical cmsort_ch_i31 ‹t_s9174› : L =
  ch⟨⇑(__v9175 : (list_d3‹U, t_s9174› nat)) ⇒ end⟩

program cmsort_worker_i32 ‹t_s9176› :
  nat →
    (list_d3‹U, t_s9176› nat) → cmsort_ch_i31‹t_s9176› ⊸ IO unit
=
  fn (n_v9180 : nat) (zs_v9181 : (list_d3‹U, t_s9176› nat)) ⇒
    ln (c_v9182 : cmsort_ch_i31‹t_s9176›) ⇒
      let c_v9183 ⇐ (send c_v9182 (msort_i30‹t_s9176› zs_v9181)) in
      close c_v9183

program cmsort_i33 ‹t_s9184› :
  (list_d3‹U, t_s9184› nat) → IO (list_d3‹U, t_s9184› nat)
=
  fn (zs0_v9186 : (list_d3‹U, t_s9184› nat)) ⇒
    let c_v9187 ⇐
      fork (c_v9188 : cmsort_ch_i31‹t_s9184›) in
        (cmsort_worker_i32‹t_s9184› 0 zs0_v9186 c_v9188)
    in
    let __v9189 ⇐ recv c_v9187 in
    match __v9189 as __v9190 in IO (list_d3‹U, t_s9184› nat) with
    | ⟨zs1_v9191, c_v9192⟩ ⇒
      let __v9193 ⇐ close c_v9192 in return zs1_v9191
    end

program mkList_i34 ‹t_s9194› : nat → (list_d3‹U, t_s9194› nat) =
  fn (n_v9196 : nat) ⇒
    match n_v9196 as __v9197 in (list_d3‹U, t_s9194› nat) with
    | O ⇒ nil_c4‹U, t_s9194›
    | S n0_v9198 ⇒
      (cons_c5‹U, t_s9194› n_v9196 (mkList_i34‹t_s9194› n0_v9198))
    end

program main_i35 : IO unit =
  let test_v9199 = (mkList_i34‹U› 10000) in
  let sorted_v9200 ⇐ (cmsort_i33‹U› test_v9199) in return ()

trans1e success--------------------------

def andb_i1 =
  fn b1_v9589 b2_v9590 ⇒
    match b1_v9589 with
    | true ⇒ b2_v9590 | false ⇒ false
    end

def orb_i2 =
  fn b1_v9591 b2_v9592 ⇒
    match b1_v9591 with
    | true ⇒ true | false ⇒ b2_v9592
    end

def notb_i3 =
  fn b_v9593 ⇒ match b_v9593 with
                 | true ⇒ false | false ⇒ true
                 end

def lten_i4 =
  fn x_v9594 y_v9595 ⇒
    match x_v9594 with
    | O ⇒ true
    | S x_v9596 ⇒
      match y_v9595 with
      | O ⇒ false | S y_v9597 ⇒ ((lten_i4 x_v9596) y_v9597)
      end
    end

def gten_i5 =
  fn x_v9598 y_v9599 ⇒
    match x_v9598 with
    | O ⇒ match y_v9599 with
            | O ⇒ true | S __v9600 ⇒ false
            end
    | S x_v9601 ⇒
      match y_v9599 with
      | O ⇒ true | S y_v9602 ⇒ ((gten_i5 x_v9601) y_v9602)
      end
    end

def ltn_i6 =
  fn x_v9603 y_v9604 ⇒
    match x_v9603 with
    | O ⇒ match y_v9604 with
            | O ⇒ false | S y_v9605 ⇒ true
            end
    | S x_v9606 ⇒
      match y_v9604 with
      | O ⇒ false | S y_v9607 ⇒ ((ltn_i6 x_v9606) y_v9607)
      end
    end

def gtn_i7 =
  fn x_v9608 y_v9609 ⇒
    match x_v9608 with
    | O ⇒ false
    | S x_v9610 ⇒
      match y_v9609 with
      | O ⇒ true | S y_v9611 ⇒ ((gtn_i7 x_v9610) y_v9611)
      end
    end

def eqn_i8 =
  fn x_v9612 y_v9613 ⇒
    match x_v9612 with
    | O ⇒ match y_v9613 with
            | O ⇒ true | S __v9614 ⇒ false
            end
    | S x_v9615 ⇒
      match y_v9613 with
      | O ⇒ false | S y_v9616 ⇒ ((eqn_i8 x_v9615) y_v9616)
      end
    end

def pred_i9 =
  fn x_v9617 ⇒ match x_v9617 with
                 | O ⇒ 0 | S x_v9618 ⇒ x_v9618
                 end

def addn_i10 =
  fn x_v9619 y_v9620 ⇒
    match x_v9619 with
    | O ⇒ y_v9620 | S x_v9621 ⇒ ((addn_i10 x_v9621) y_v9620).+1
    end

def subn_i11 =
  fn x_v9622 y_v9623 ⇒
    match y_v9623 with
    | O ⇒ x_v9622 | S y_v9624 ⇒ ((subn_i11 (pred_i9 x_v9622)) y_v9624)
    end

def muln_i12 =
  fn x_v9625 y_v9626 ⇒
    match x_v9625 with
    | O ⇒ 0
    | S x_v9627 ⇒ ((addn_i10 y_v9626) ((muln_i12 x_v9627) y_v9626))
    end

def divn_i13 =
  fn x_v9628 y_v9629 ⇒
    match ((ltn_i6 x_v9628) y_v9629) with
    | true ⇒ 0
    | false ⇒ ((divn_i13 ((subn_i11 x_v9628) y_v9629)) y_v9629).+1
    end

def modn_i14 =
  fn x_v9630 y_v9631 ⇒
    ((subn_i11 x_v9630) ((muln_i12 ((divn_i13 x_v9630) y_v9631)) y_v9631))

data char_d1 =
| Char_c1 of size(1)

data string_d2 =
| EmptyString_c2 of size(0) | String_c3 of size(2)

def cats_i15 =
  fn s1_v9632 s2_v9633 ⇒
    match s1_v9632 with
    | EmptyString_c2  ⇒ s2_v9633
    | String_c3 c_v9634 s1_v9635 ⇒
      (String_c3 c_v9634 ((cats_i15 s1_v9635) s2_v9633))
    end

def strlen_i16 =
  fn s_v9636 ⇒
    match s_v9636 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v9637 s_v9638 ⇒ (strlen_i16 s_v9638).+1
    end

data listUU_d7 =
| nilUU_c12 of size(0) | consUU_c13 of size(2)

data listUL_d6 =
| nilUL_c10 of size(0) | consUL_c11 of size(2)

data listLU_d5 =
| nilLU_c8 of size(0)

data listLL_d4 =
| nilLL_c6 of size(0) | consLL_c7 of size(2)

def lenUU_i39 =
  fn A_v9639 xs_v9640 ⇒
    match xs_v9640 with
    | nilUU_c12  ⇒ (0, nilUU_c12)
    | consUU_c13 x_v9641 xs_v9642 ⇒
      match ((lenUU_i39 NULL) xs_v9642) with
      | (n_v9643, xs_v9644) ⇒ (n_v9643.+1, (consUU_c13 x_v9641 xs_v9644))
      end
    end

def lenUL_i38 =
  fn A_v9645 xs_v9646 ⇒
    match xs_v9646 with
    | nilUL_c10  ⇒ (0, nilUL_c10)
    | consUL_c11 x_v9647 xs_v9648 ⇒
      match ((lenUL_i38 NULL) xs_v9648) with
      | (n_v9649, xs_v9650) ⇒ (n_v9649.+1, (consUL_c11 x_v9647 xs_v9650))
      end
    end

def lenLL_i36 =
  fn A_v9651 xs_v9652 ⇒
    match xs_v9652 with
    | nilLL_c6  ⇒ (0, nilLL_c6)
    | consLL_c7 x_v9653 xs_v9654 ⇒
      match ((lenLL_i36 NULL) xs_v9654) with
      | (n_v9655, xs_v9656) ⇒ (n_v9655.+1, (consLL_c7 x_v9653 xs_v9656))
      end
    end

def appendUU_i43 =
  fn A_v9657 xs_v9658 ⇒
    ln ys_v9659 ⇒
      match xs_v9658 with
      | nilUU_c12  ⇒ ys_v9659
      | consUU_c13 x_v9660 xs_v9661 ⇒
        (consUU_c13 x_v9660 (((appendUU_i43 NULL) xs_v9661) ys_v9659))
      end

def appendUL_i42 =
  fn A_v9662 xs_v9663 ⇒
    ln ys_v9664 ⇒
      match xs_v9663 with
      | nilUL_c10  ⇒ ys_v9664
      | consUL_c11 x_v9665 xs_v9666 ⇒
        (consUL_c11 x_v9665 (((appendUL_i42 NULL) xs_v9666) ys_v9664))
      end

def appendLL_i40 =
  fn A_v9667 xs_v9668 ⇒
    ln ys_v9669 ⇒
      match xs_v9668 with
      | nilLL_c6  ⇒ ys_v9669
      | consLL_c7 x_v9670 xs_v9671 ⇒
        (consLL_c7 x_v9670 (((appendLL_i40 NULL) xs_v9671) ys_v9669))
      end

def readline_i25 =
  fn __v9672 ⇒
    let ch_v9673 ⇐ open stdin in
    let ch_v9674 ⇐ (send ch_v9673 true) in
    let __v9675 ⇐ recv ch_v9674 in
    match __v9675 with
    | (s_v9676, ch_v9677) ⇒
      let ch_v9678 ⇐ (send ch_v9677 false) in
      let __v9679 ⇐ close⇑ ch_v9678 in return s_v9676
    end

def print_i26 =
  fn s_v9680 ⇒
    let ch_v9681 ⇐ open stdout in
    let ch_v9682 ⇐ (send ch_v9681 true) in
    let ch_v9683 ⇐ (send ch_v9682 s_v9680) in
    let ch_v9684 ⇐ (send ch_v9683 false) in close⇑ ch_v9684

def prerr_i27 =
  fn s_v9685 ⇒
    let ch_v9686 ⇐ open stderr in
    let ch_v9687 ⇐ (send ch_v9686 true) in
    let ch_v9688 ⇐ (send ch_v9687 s_v9685) in
    let ch_v9689 ⇐ (send ch_v9688 false) in close⇑ ch_v9689

def splitU_i45 =
  fn zs_v9690 ⇒
    match zs_v9690 with
    | nilUU_c12  ⇒ (nilUU_c12, nilUU_c12)
    | consUU_c13 x_v9691 zs_v9692 ⇒
      match zs_v9692 with
      | nilUU_c12  ⇒ ((consUU_c13 x_v9691 nilUU_c12), nilUU_c12)
      | consUU_c13 y_v9693 zs_v9694 ⇒
        let __v9695 = (splitU_i45 zs_v9694) in
        match __v9695 with
        | (xs_v9696, ys_v9697) ⇒
          ((consUU_c13 x_v9691 xs_v9696), (consUU_c13 y_v9693 ys_v9697))
        end
      end
    end

def splitL_i44 =
  fn zs_v9698 ⇒
    match zs_v9698 with
    | nilUL_c10  ⇒ (nilUL_c10, nilUL_c10)
    | consUL_c11 x_v9699 zs_v9700 ⇒
      match zs_v9700 with
      | nilUL_c10  ⇒ ((consUL_c11 x_v9699 nilUL_c10), nilUL_c10)
      | consUL_c11 y_v9701 zs_v9702 ⇒
        let __v9703 = (splitL_i44 zs_v9702) in
        match __v9703 with
        | (xs_v9704, ys_v9705) ⇒
          ((consUL_c11 x_v9699 xs_v9704), (consUL_c11 y_v9701 ys_v9705))
        end
      end
    end

def mergeU_i47 =
  fn xs_v9706 ⇒
    ln ys_v9707 ⇒
      match xs_v9706 with
      | nilUU_c12  ⇒ ys_v9707
      | consUU_c13 x_v9708 xs0_v9709 ⇒
        match ys_v9707 with
        | nilUU_c12  ⇒ (consUU_c13 x_v9708 xs0_v9709)
        | consUU_c13 y_v9710 ys0_v9711 ⇒
          match ((lten_i4 x_v9708) y_v9710) with
          | true ⇒
            (consUU_c13
              x_v9708 ((mergeU_i47 xs0_v9709) (consUU_c13 y_v9710 ys0_v9711)))
          | false ⇒
            (consUU_c13
              y_v9710 ((mergeU_i47 (consUU_c13 x_v9708 xs0_v9709)) ys0_v9711))
          end
        end
      end

def mergeL_i46 =
  fn xs_v9712 ⇒
    ln ys_v9713 ⇒
      match xs_v9712 with
      | nilUL_c10  ⇒ ys_v9713
      | consUL_c11 x_v9714 xs0_v9715 ⇒
        match ys_v9713 with
        | nilUL_c10  ⇒ (consUL_c11 x_v9714 xs0_v9715)
        | consUL_c11 y_v9716 ys0_v9717 ⇒
          match ((lten_i4 x_v9714) y_v9716) with
          | true ⇒
            (consUL_c11
              x_v9714 ((mergeL_i46 xs0_v9715) (consUL_c11 y_v9716 ys0_v9717)))
          | false ⇒
            (consUL_c11
              y_v9716 ((mergeL_i46 (consUL_c11 x_v9714 xs0_v9715)) ys0_v9717))
          end
        end
      end

def msortU_i49 =
  fn zs_v9718 ⇒
    match zs_v9718 with
    | nilUU_c12  ⇒ nilUU_c12
    | consUU_c13 x_v9719 zs_v9720 ⇒
      match zs_v9720 with
      | nilUU_c12  ⇒ (consUU_c13 x_v9719 nilUU_c12)
      | consUU_c13 y_v9721 zs_v9722 ⇒
        let __v9723 =
          (splitU_i45 (consUU_c13 x_v9719 (consUU_c13 y_v9721 zs_v9722)))
        in
        match __v9723 with
        | (xs_v9724, ys_v9725) ⇒
          ((mergeU_i47 (msortU_i49 xs_v9724)) (msortU_i49 ys_v9725))
        end
      end
    end

def msortL_i48 =
  fn zs_v9726 ⇒
    match zs_v9726 with
    | nilUL_c10  ⇒ nilUL_c10
    | consUL_c11 x_v9727 zs_v9728 ⇒
      match zs_v9728 with
      | nilUL_c10  ⇒ (consUL_c11 x_v9727 nilUL_c10)
      | consUL_c11 y_v9729 zs_v9730 ⇒
        let __v9731 =
          (splitL_i44 (consUL_c11 x_v9727 (consUL_c11 y_v9729 zs_v9730)))
        in
        match __v9731 with
        | (xs_v9732, ys_v9733) ⇒
          ((mergeL_i46 (msortL_i48 xs_v9732)) (msortL_i48 ys_v9733))
        end
      end
    end

def cmsort_workerU_i53 =
  fn n_v9734 zs_v9735 ⇒
    ln c_v9736 ⇒
      let c_v9737 ⇐ (send c_v9736 (msortU_i49 zs_v9735)) in
      close⇑ c_v9737

def cmsort_workerL_i52 =
  fn n_v9738 zs_v9739 ⇒
    ln c_v9740 ⇒
      let c_v9741 ⇐ (send c_v9740 (msortL_i48 zs_v9739)) in
      close⇑ c_v9741

def cmsortU_i55 =
  fn zs0_v9742 ⇒
    let c_v9743 ⇐
      fork c_v9744 in (((cmsort_workerU_i53 0) zs0_v9742) c_v9744)
    in
    let __v9745 ⇐ recv c_v9743 in
    match __v9745 with
    | (zs1_v9746, c_v9747) ⇒
      let __v9748 ⇐ close⇓ c_v9747 in return zs1_v9746
    end

def cmsortL_i54 =
  fn zs0_v9749 ⇒
    let c_v9750 ⇐
      fork c_v9751 in (((cmsort_workerL_i52 0) zs0_v9749) c_v9751)
    in
    let __v9752 ⇐ recv c_v9750 in
    match __v9752 with
    | (zs1_v9753, c_v9754) ⇒
      let __v9755 ⇐ close⇓ c_v9754 in return zs1_v9753
    end

def mkListU_i57 =
  fn n_v9756 ⇒
    match n_v9756 with
    | O ⇒ nilUU_c12
    | S n0_v9757 ⇒ (consUU_c13 n_v9756 (mkListU_i57 n0_v9757))
    end

def mkListL_i56 =
  fn n_v9758 ⇒
    match n_v9758 with
    | O ⇒ nilUL_c10
    | S n0_v9759 ⇒ (consUL_c11 n_v9758 (mkListL_i56 n0_v9759))
    end

main =
  let test_v9760 = (mkListU_i57 10000) in
  let sorted_v9761 ⇐ (cmsortU_i55 test_v9760) in return ()

trans12 success--------------------------

fun andb_i1(b1_v10004, b2_v10005) = if b1_v10004 then
                                      b2_v10005
                                    else
                                      0

val andbclo_i58 = fn b1_v10006 b2_v10007 ⇒ andb_i1(b1_v10006, b2_v10007)

fun orb_i2(b1_v10008, b2_v10009) = if b1_v10008 then
                                     1
                                   else
                                     b2_v10009

val orbclo_i59 = fn b1_v10010 b2_v10011 ⇒ orb_i2(b1_v10010, b2_v10011)

fun notb_i3(b_v10012) = if b_v10012 then
                          0
                        else
                          1

val notbclo_i60 = fn b_v10013 ⇒ notb_i3(b_v10013)

fun lten_i4(x_v10014, y_v10015) =
  let __v10016 = x_v10014 in
  if __v10016 then
    let x_v10017 = __v10016.-1 in
    let __v10018 = y_v10015 in
    if __v10018 then
      let y_v10019 = __v10018.-1 in lten_i4(x_v10017, y_v10019)
    else
      0
  else
    1

val ltenclo_i61 = fn x_v10020 y_v10021 ⇒ lten_i4(x_v10020, y_v10021)

fun gten_i5(x_v10022, y_v10023) =
  let __v10024 = x_v10022 in
  if __v10024 then
    let x_v10025 = __v10024.-1 in
    let __v10026 = y_v10023 in
    if __v10026 then
      let y_v10027 = __v10026.-1 in gten_i5(x_v10025, y_v10027)
    else
      1
  else
    let __v10028 = y_v10023 in
    if __v10028 then
      let __v10029 = __v10028.-1 in 0
    else
      1

val gtenclo_i62 = fn x_v10030 y_v10031 ⇒ gten_i5(x_v10030, y_v10031)

fun ltn_i6(x_v10032, y_v10033) =
  let __v10034 = x_v10032 in
  if __v10034 then
    let x_v10035 = __v10034.-1 in
    let __v10036 = y_v10033 in
    if __v10036 then
      let y_v10037 = __v10036.-1 in ltn_i6(x_v10035, y_v10037)
    else
      0
  else
    let __v10038 = y_v10033 in
    if __v10038 then
      let y_v10039 = __v10038.-1 in 1
    else
      0

val ltnclo_i63 = fn x_v10040 y_v10041 ⇒ ltn_i6(x_v10040, y_v10041)

fun gtn_i7(x_v10042, y_v10043) =
  let __v10044 = x_v10042 in
  if __v10044 then
    let x_v10045 = __v10044.-1 in
    let __v10046 = y_v10043 in
    if __v10046 then
      let y_v10047 = __v10046.-1 in gtn_i7(x_v10045, y_v10047)
    else
      1
  else
    0

val gtnclo_i64 = fn x_v10048 y_v10049 ⇒ gtn_i7(x_v10048, y_v10049)

fun eqn_i8(x_v10050, y_v10051) =
  let __v10052 = x_v10050 in
  if __v10052 then
    let x_v10053 = __v10052.-1 in
    let __v10054 = y_v10051 in
    if __v10054 then
      let y_v10055 = __v10054.-1 in eqn_i8(x_v10053, y_v10055)
    else
      0
  else
    let __v10056 = y_v10051 in
    if __v10056 then
      let __v10057 = __v10056.-1 in 0
    else
      1

val eqnclo_i65 = fn x_v10058 y_v10059 ⇒ eqn_i8(x_v10058, y_v10059)

fun pred_i9(x_v10060) =
  let __v10061 = x_v10060 in
  if __v10061 then
    let x_v10062 = __v10061.-1 in x_v10062
  else
    0

val predclo_i66 = fn x_v10063 ⇒ pred_i9(x_v10063)

fun addn_i10(x_v10064, y_v10065) =
  let __v10066 = x_v10064 in
  if __v10066 then
    let x_v10067 = __v10066.-1 in addn_i10(x_v10067, y_v10065).+1
  else
    y_v10065

val addnclo_i67 = fn x_v10068 y_v10069 ⇒ addn_i10(x_v10068, y_v10069)

fun subn_i11(x_v10070, y_v10071) =
  let __v10072 = y_v10071 in
  if __v10072 then
    let y_v10073 = __v10072.-1 in subn_i11(pred_i9(x_v10070), y_v10073)
  else
    x_v10070

val subnclo_i68 = fn x_v10074 y_v10075 ⇒ subn_i11(x_v10074, y_v10075)

fun muln_i12(x_v10076, y_v10077) =
  let __v10078 = x_v10076 in
  if __v10078 then
    let x_v10079 = __v10078.-1 in
    addn_i10(y_v10077, muln_i12(x_v10079, y_v10077))
  else
    0

val mulnclo_i69 = fn x_v10080 y_v10081 ⇒ muln_i12(x_v10080, y_v10081)

fun divn_i13(x_v10082, y_v10083) =
  if ltn_i6(x_v10082, y_v10083) then
    0
  else
    divn_i13(subn_i11(x_v10082, y_v10083), y_v10083).+1

val divnclo_i70 = fn x_v10084 y_v10085 ⇒ divn_i13(x_v10084, y_v10085)

fun modn_i14(x_v10086, y_v10087) =
  subn_i11(x_v10086, muln_i12(divn_i13(x_v10086, y_v10087), y_v10087))

val modnclo_i71 = fn x_v10088 y_v10089 ⇒ modn_i14(x_v10088, y_v10089)

fun cats_i15(s1_v10090, s2_v10091) =
  match s1_v10090 with
  | EmptyString_c2  ⇒ s2_v10091
  | String_c3 c_v10092 s1_v10093 ⇒
    (String_c3 c_v10092 cats_i15(s1_v10093, s2_v10091))
  end

val catsclo_i72 = fn s1_v10094 s2_v10095 ⇒ cats_i15(s1_v10094, s2_v10095)

fun strlen_i16(s_v10096) =
  match s_v10096 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v10097 s_v10098 ⇒ strlen_i16(s_v10098).+1
  end

val strlenclo_i73 = fn s_v10099 ⇒ strlen_i16(s_v10099)

fun lenUU_i39(A_v10100, xs_v10101) =
  match xs_v10101 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v10102 xs_v10103 ⇒
    match lenUU_i39(NULL, xs_v10103) with
    | (n_v10104, xs_v10105) ⇒
      (n_v10104.+1, (consUU_c13 x_v10102 xs_v10105))
    end
  end

val lenUUclo_i74 = fn A_v10106 xs_v10107 ⇒ lenUU_i39(A_v10106, xs_v10107)

fun lenUL_i38(A_v10108, xs_v10109) =
  match xs_v10109 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v10110 xs_v10111 ⇒
    match lenUL_i38(NULL, xs_v10111) with
    | (n_v10112, xs_v10113) ⇒
      (n_v10112.+1, (consUL_c11 x_v10110 xs_v10113))
    end
  end

val lenULclo_i75 = fn A_v10114 xs_v10115 ⇒ lenUL_i38(A_v10114, xs_v10115)

fun lenLL_i36(A_v10116, xs_v10117) =
  match xs_v10117 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v10118 xs_v10119 ⇒
    match lenLL_i36(NULL, xs_v10119) with
    | (n_v10120, xs_v10121) ⇒ (n_v10120.+1, (consLL_c7 x_v10118 xs_v10121))
    end
  end

val lenLLclo_i76 = fn A_v10122 xs_v10123 ⇒ lenLL_i36(A_v10122, xs_v10123)

fun appendUU_i43(A_v10124, xs_v10125, ys_v10126) =
  match xs_v10125 with
  | nilUU_c12  ⇒ ys_v10126
  | consUU_c13 x_v10127 xs_v10128 ⇒
    (consUU_c13 x_v10127 appendUU_i43(NULL, xs_v10128, ys_v10126))
  end

val appendUUclo_i77 =
  fn A_v10129 xs_v10130 ⇒
    ln ys_v10131 ⇒ appendUU_i43(A_v10129, xs_v10130, ys_v10131)

fun appendUL_i42(A_v10132, xs_v10133, ys_v10134) =
  match xs_v10133 with
  | nilUL_c10  ⇒ ys_v10134
  | consUL_c11 x_v10135 xs_v10136 ⇒
    (consUL_c11 x_v10135 appendUL_i42(NULL, xs_v10136, ys_v10134))
  end

val appendULclo_i78 =
  fn A_v10137 xs_v10138 ⇒
    ln ys_v10139 ⇒ appendUL_i42(A_v10137, xs_v10138, ys_v10139)

fun appendLL_i40(A_v10140, xs_v10141, ys_v10142) =
  match xs_v10141 with
  | nilLL_c6  ⇒ ys_v10142
  | consLL_c7 x_v10143 xs_v10144 ⇒
    (consLL_c7 x_v10143 appendLL_i40(NULL, xs_v10144, ys_v10142))
  end

val appendLLclo_i79 =
  fn A_v10145 xs_v10146 ⇒
    ln ys_v10147 ⇒ appendLL_i40(A_v10145, xs_v10146, ys_v10147)

fun readline_i25(__v10148) =
  ln __v10149 ⇒
    let ch_v10150 = (ln __v10151 ⇒ open stdin) NULL in
    let ch_v10152 =
      ((fn x_v10153 ⇒ ln __v10154 ⇒ send(ch_v10150, x_v10153)) 1) NULL
    in
    let __v10155 = (ln __v10156 ⇒ recv(ch_v10152)) NULL in
    (match __v10155 with
     | (s_v10157, ch_v10158) ⇒
       ln __v10159 ⇒
         let ch_v10160 =
           ((fn x_v10161 ⇒ ln __v10162 ⇒ send(ch_v10158, x_v10161)) 0)
             NULL
         in
         let __v10163 =
           (ln __v10164 ⇒ let __v10165 = ch_v10160 in NULL) NULL
         in (ln __v10166 ⇒ s_v10157) NULL
     end) NULL

val readlineclo_i80 = fn __v10167 ⇒ readline_i25(__v10167)

fun print_i26(s_v10168) =
  ln __v10169 ⇒
    let ch_v10170 = (ln __v10171 ⇒ open stdout) NULL in
    let ch_v10172 =
      ((fn x_v10173 ⇒ ln __v10174 ⇒ send(ch_v10170, x_v10173)) 1) NULL
    in
    let ch_v10175 =
      ((fn x_v10176 ⇒ ln __v10177 ⇒ send(ch_v10172, x_v10176)) s_v10168)
        NULL
    in
    let ch_v10178 =
      ((fn x_v10179 ⇒ ln __v10180 ⇒ send(ch_v10175, x_v10179)) 0) NULL
    in (ln __v10181 ⇒ let __v10182 = ch_v10178 in NULL) NULL

val printclo_i81 = fn s_v10183 ⇒ print_i26(s_v10183)

fun prerr_i27(s_v10184) =
  ln __v10185 ⇒
    let ch_v10186 = (ln __v10187 ⇒ open stderr) NULL in
    let ch_v10188 =
      ((fn x_v10189 ⇒ ln __v10190 ⇒ send(ch_v10186, x_v10189)) 1) NULL
    in
    let ch_v10191 =
      ((fn x_v10192 ⇒ ln __v10193 ⇒ send(ch_v10188, x_v10192)) s_v10184)
        NULL
    in
    let ch_v10194 =
      ((fn x_v10195 ⇒ ln __v10196 ⇒ send(ch_v10191, x_v10195)) 0) NULL
    in (ln __v10197 ⇒ let __v10198 = ch_v10194 in NULL) NULL

val prerrclo_i82 = fn s_v10199 ⇒ prerr_i27(s_v10199)

fun splitU_i45(zs_v10200) =
  match zs_v10200 with
  | nilUU_c12  ⇒ (nilUU_c12, nilUU_c12)
  | consUU_c13 x_v10201 zs_v10202 ⇒
    match zs_v10202 with
    | nilUU_c12  ⇒ ((consUU_c13 x_v10201 nilUU_c12), nilUU_c12)
    | consUU_c13 y_v10203 zs_v10204 ⇒
      let __v10205 = splitU_i45(zs_v10204) in
      match __v10205 with
      | (xs_v10206, ys_v10207) ⇒
        ((consUU_c13 x_v10201 xs_v10206), (consUU_c13 y_v10203 ys_v10207))
      end
    end
  end

val splitUclo_i83 = fn zs_v10208 ⇒ splitU_i45(zs_v10208)

fun splitL_i44(zs_v10209) =
  match zs_v10209 with
  | nilUL_c10  ⇒ (nilUL_c10, nilUL_c10)
  | consUL_c11 x_v10210 zs_v10211 ⇒
    match zs_v10211 with
    | nilUL_c10  ⇒ ((consUL_c11 x_v10210 nilUL_c10), nilUL_c10)
    | consUL_c11 y_v10212 zs_v10213 ⇒
      let __v10214 = splitL_i44(zs_v10213) in
      match __v10214 with
      | (xs_v10215, ys_v10216) ⇒
        ((consUL_c11 x_v10210 xs_v10215), (consUL_c11 y_v10212 ys_v10216))
      end
    end
  end

val splitLclo_i84 = fn zs_v10217 ⇒ splitL_i44(zs_v10217)

fun mergeU_i47(xs_v10218, ys_v10219) =
  match xs_v10218 with
  | nilUU_c12  ⇒ ys_v10219
  | consUU_c13 x_v10220 xs0_v10221 ⇒
    match ys_v10219 with
    | nilUU_c12  ⇒ (consUU_c13 x_v10220 xs0_v10221)
    | consUU_c13 y_v10222 ys0_v10223 ⇒
      if lten_i4(x_v10220, y_v10222) then
        (consUU_c13
          x_v10220 mergeU_i47(xs0_v10221, (consUU_c13 y_v10222 ys0_v10223)))
      else
        (consUU_c13
          y_v10222 mergeU_i47((consUU_c13 x_v10220 xs0_v10221), ys0_v10223))
    end
  end

val mergeUclo_i85 =
  fn xs_v10224 ⇒ ln ys_v10225 ⇒ mergeU_i47(xs_v10224, ys_v10225)

fun mergeL_i46(xs_v10226, ys_v10227) =
  match xs_v10226 with
  | nilUL_c10  ⇒ ys_v10227
  | consUL_c11 x_v10228 xs0_v10229 ⇒
    match ys_v10227 with
    | nilUL_c10  ⇒ (consUL_c11 x_v10228 xs0_v10229)
    | consUL_c11 y_v10230 ys0_v10231 ⇒
      if lten_i4(x_v10228, y_v10230) then
        (consUL_c11
          x_v10228 mergeL_i46(xs0_v10229, (consUL_c11 y_v10230 ys0_v10231)))
      else
        (consUL_c11
          y_v10230 mergeL_i46((consUL_c11 x_v10228 xs0_v10229), ys0_v10231))
    end
  end

val mergeLclo_i86 =
  fn xs_v10232 ⇒ ln ys_v10233 ⇒ mergeL_i46(xs_v10232, ys_v10233)

fun msortU_i49(zs_v10234) =
  match zs_v10234 with
  | nilUU_c12  ⇒ nilUU_c12
  | consUU_c13 x_v10235 zs_v10236 ⇒
    match zs_v10236 with
    | nilUU_c12  ⇒ (consUU_c13 x_v10235 nilUU_c12)
    | consUU_c13 y_v10237 zs_v10238 ⇒
      let __v10239 =
        splitU_i45((consUU_c13 x_v10235 (consUU_c13 y_v10237 zs_v10238)))
      in
      match __v10239 with
      | (xs_v10240, ys_v10241) ⇒
        mergeU_i47(msortU_i49(xs_v10240), msortU_i49(ys_v10241))
      end
    end
  end

val msortUclo_i87 = fn zs_v10242 ⇒ msortU_i49(zs_v10242)

fun msortL_i48(zs_v10243) =
  match zs_v10243 with
  | nilUL_c10  ⇒ nilUL_c10
  | consUL_c11 x_v10244 zs_v10245 ⇒
    match zs_v10245 with
    | nilUL_c10  ⇒ (consUL_c11 x_v10244 nilUL_c10)
    | consUL_c11 y_v10246 zs_v10247 ⇒
      let __v10248 =
        splitL_i44((consUL_c11 x_v10244 (consUL_c11 y_v10246 zs_v10247)))
      in
      match __v10248 with
      | (xs_v10249, ys_v10250) ⇒
        mergeL_i46(msortL_i48(xs_v10249), msortL_i48(ys_v10250))
      end
    end
  end

val msortLclo_i88 = fn zs_v10251 ⇒ msortL_i48(zs_v10251)

fun cmsort_workerU_i53(n_v10252, zs_v10253, c_v10254) =
  ln __v10255 ⇒
    let c_v10256 =
      ((fn x_v10257 ⇒ ln __v10258 ⇒ send(c_v10254, x_v10257))
         msortU_i49(zs_v10253))
        NULL
    in (ln __v10259 ⇒ let __v10260 = c_v10256 in NULL) NULL

val cmsort_workerUclo_i89 =
  fn n_v10261 zs_v10262 ⇒
    ln c_v10263 ⇒ cmsort_workerU_i53(n_v10261, zs_v10262, c_v10263)

fun cmsort_workerL_i52(n_v10264, zs_v10265, c_v10266) =
  ln __v10267 ⇒
    let c_v10268 =
      ((ln x_v10269 __v10270 ⇒ send(c_v10266, x_v10269))
         msortL_i48(zs_v10265))
        NULL
    in (ln __v10271 ⇒ let __v10272 = c_v10268 in NULL) NULL

val cmsort_workerLclo_i90 =
  fn n_v10273 zs_v10274 ⇒
    ln c_v10275 ⇒ cmsort_workerL_i52(n_v10273, zs_v10274, c_v10275)

fun cmsortU_i55(zs0_v10276) =
  ln __v10277 ⇒
    let c_v10278 =
      (ln __v10279 ⇒
         fork c_v10280 in (cmsort_workerU_i53(0, zs0_v10276, c_v10280)) NULL)
        NULL
    in
    let __v10281 = (ln __v10282 ⇒ recv(c_v10278)) NULL in
    (match __v10281 with
     | (zs1_v10283, c_v10284) ⇒
       ln __v10285 ⇒
         let __v10286 = (ln __v10287 ⇒ close(c_v10284)) NULL in
         (ln __v10288 ⇒ zs1_v10283) NULL
     end) NULL

val cmsortUclo_i91 = fn zs0_v10289 ⇒ cmsortU_i55(zs0_v10289)

fun cmsortL_i54(zs0_v10290) =
  ln __v10291 ⇒
    let c_v10292 =
      (ln __v10293 ⇒
         fork c_v10294 in (cmsort_workerL_i52(0, zs0_v10290, c_v10294)) NULL)
        NULL
    in
    let __v10295 = (ln __v10296 ⇒ recv(c_v10292)) NULL in
    (match __v10295 with
     | (zs1_v10297, c_v10298) ⇒
       ln __v10299 ⇒
         let __v10300 = (ln __v10301 ⇒ close(c_v10298)) NULL in
         (ln __v10302 ⇒ zs1_v10297) NULL
     end) NULL

val cmsortLclo_i92 = fn zs0_v10303 ⇒ cmsortL_i54(zs0_v10303)

fun mkListU_i57(n_v10304) =
  let __v10305 = n_v10304 in
  if __v10305 then
    let n0_v10306 = __v10305.-1 in
    (consUU_c13 n_v10304 mkListU_i57(n0_v10306))
  else
    nilUU_c12

val mkListUclo_i93 = fn n_v10307 ⇒ mkListU_i57(n_v10307)

fun mkListL_i56(n_v10308) =
  let __v10309 = n_v10308 in
  if __v10309 then
    let n0_v10310 = __v10309.-1 in
    (consUL_c11 n_v10308 mkListL_i56(n0_v10310))
  else
    nilUL_c10

val mkListLclo_i94 = fn n_v10311 ⇒ mkListL_i56(n_v10311)

main =
  (let test_v10312 = mkListU_i57(10000) in
   ln __v10313 ⇒
     let sorted_v10314 = (cmsortU_i55(test_v10312)) NULL in
     (ln __v10315 ⇒ NULL) NULL)
    NULL

trans23 success--------------------------

fun andb_i1(b1_v10695, b2_v10696) = if b1_v10695 then
                                      b2_v10696
                                    else
                                      0

val andbclo_i58 = fn b1_v10697 b2_v10698 ⇒ andb_i1(b1_v10697, b2_v10698)

fun orb_i2(b1_v10699, b2_v10700) = if b1_v10699 then
                                     1
                                   else
                                     b2_v10700

val orbclo_i59 = fn b1_v10701 b2_v10702 ⇒ orb_i2(b1_v10701, b2_v10702)

fun notb_i3(b_v10703) = if b_v10703 then
                          0
                        else
                          1

val notbclo_i60 = fn b_v10704 ⇒ notb_i3(b_v10704)

fun lten_i4(x_v10705, y_v10706) =
  if x_v10705 then
    if y_v10706 then
      lten_i4(x_v10705.-1, y_v10706.-1)
    else
      0
  else
    1

val ltenclo_i61 = fn x_v10707 y_v10708 ⇒ lten_i4(x_v10707, y_v10708)

fun gten_i5(x_v10709, y_v10710) =
  if x_v10709 then
    if y_v10710 then
      gten_i5(x_v10709.-1, y_v10710.-1)
    else
      1
  else
    if y_v10710 then
      0
    else
      1

val gtenclo_i62 = fn x_v10711 y_v10712 ⇒ gten_i5(x_v10711, y_v10712)

fun ltn_i6(x_v10713, y_v10714) =
  if x_v10713 then
    if y_v10714 then
      ltn_i6(x_v10713.-1, y_v10714.-1)
    else
      0
  else
    if y_v10714 then
      1
    else
      0

val ltnclo_i63 = fn x_v10715 y_v10716 ⇒ ltn_i6(x_v10715, y_v10716)

fun gtn_i7(x_v10717, y_v10718) =
  if x_v10717 then
    if y_v10718 then
      gtn_i7(x_v10717.-1, y_v10718.-1)
    else
      1
  else
    0

val gtnclo_i64 = fn x_v10719 y_v10720 ⇒ gtn_i7(x_v10719, y_v10720)

fun eqn_i8(x_v10721, y_v10722) =
  if x_v10721 then
    if y_v10722 then
      eqn_i8(x_v10721.-1, y_v10722.-1)
    else
      0
  else
    if y_v10722 then
      0
    else
      1

val eqnclo_i65 = fn x_v10723 y_v10724 ⇒ eqn_i8(x_v10723, y_v10724)

fun pred_i9(x_v10725) = if x_v10725 then
                          x_v10725.-1
                        else
                          0

val predclo_i66 = fn x_v10726 ⇒ pred_i9(x_v10726)

fun addn_i10(x_v10727, y_v10728) =
  if x_v10727 then
    addn_i10(x_v10727.-1, y_v10728).+1
  else
    y_v10728

val addnclo_i67 = fn x_v10729 y_v10730 ⇒ addn_i10(x_v10729, y_v10730)

fun subn_i11(x_v10731, y_v10732) =
  if y_v10732 then
    subn_i11(pred_i9(x_v10731), y_v10732.-1)
  else
    x_v10731

val subnclo_i68 = fn x_v10733 y_v10734 ⇒ subn_i11(x_v10733, y_v10734)

fun muln_i12(x_v10735, y_v10736) =
  if x_v10735 then
    addn_i10(y_v10736, muln_i12(x_v10735.-1, y_v10736))
  else
    0

val mulnclo_i69 = fn x_v10737 y_v10738 ⇒ muln_i12(x_v10737, y_v10738)

fun divn_i13(x_v10739, y_v10740) =
  if ltn_i6(x_v10739, y_v10740) then
    0
  else
    divn_i13(subn_i11(x_v10739, y_v10740), y_v10740).+1

val divnclo_i70 = fn x_v10741 y_v10742 ⇒ divn_i13(x_v10741, y_v10742)

fun modn_i14(x_v10743, y_v10744) =
  subn_i11(x_v10743, muln_i12(divn_i13(x_v10743, y_v10744), y_v10744))

val modnclo_i71 = fn x_v10745 y_v10746 ⇒ modn_i14(x_v10745, y_v10746)

fun cats_i15(s1_v10747, s2_v10748) =
  match s1_v10747 with
  | EmptyString_c2  ⇒ s2_v10748
  | String_c3 c_v10749 s1_v10750 ⇒
    (String_c3 c_v10749 cats_i15(s1_v10750, s2_v10748))
  end

val catsclo_i72 = fn s1_v10751 s2_v10752 ⇒ cats_i15(s1_v10751, s2_v10752)

fun strlen_i16(s_v10753) =
  match s_v10753 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v10754 s_v10755 ⇒ strlen_i16(s_v10755).+1
  end

val strlenclo_i73 = fn s_v10756 ⇒ strlen_i16(s_v10756)

fun lenUU_i39(A_v10757, xs_v10758) =
  match xs_v10758 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v10759 xs_v10760 ⇒
    match lenUU_i39(NULL, xs_v10760) with
    | (n_v10761, xs_v10762) ⇒
      (n_v10761.+1, (consUU_c13 x_v10759 xs_v10762))
    end
  end

val lenUUclo_i74 = fn A_v10763 xs_v10764 ⇒ lenUU_i39(A_v10763, xs_v10764)

fun lenUL_i38(A_v10765, xs_v10766) =
  match xs_v10766 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v10767 xs_v10768 ⇒
    match lenUL_i38(NULL, xs_v10768) with
    | (n_v10769, xs_v10770) ⇒
      (n_v10769.+1, (consUL_c11 x_v10767 xs_v10770))
    end
  end

val lenULclo_i75 = fn A_v10771 xs_v10772 ⇒ lenUL_i38(A_v10771, xs_v10772)

fun lenLL_i36(A_v10773, xs_v10774) =
  match xs_v10774 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v10775 xs_v10776 ⇒
    match lenLL_i36(NULL, xs_v10776) with
    | (n_v10777, xs_v10778) ⇒ (n_v10777.+1, (consLL_c7 x_v10775 xs_v10778))
    end
  end

val lenLLclo_i76 = fn A_v10779 xs_v10780 ⇒ lenLL_i36(A_v10779, xs_v10780)

fun appendUU_i43(A_v10781, xs_v10782, ys_v10783) =
  match xs_v10782 with
  | nilUU_c12  ⇒ ys_v10783
  | consUU_c13 x_v10784 xs_v10785 ⇒
    (consUU_c13 x_v10784 appendUU_i43(NULL, xs_v10785, ys_v10783))
  end

val appendUUclo_i77 =
  fn A_v10786 xs_v10787 ⇒
    ln ys_v10788 ⇒ appendUU_i43(A_v10786, xs_v10787, ys_v10788)

fun appendUL_i42(A_v10789, xs_v10790, ys_v10791) =
  match xs_v10790 with
  | nilUL_c10  ⇒ ys_v10791
  | consUL_c11 x_v10792 xs_v10793 ⇒
    (consUL_c11 x_v10792 appendUL_i42(NULL, xs_v10793, ys_v10791))
  end

val appendULclo_i78 =
  fn A_v10794 xs_v10795 ⇒
    ln ys_v10796 ⇒ appendUL_i42(A_v10794, xs_v10795, ys_v10796)

fun appendLL_i40(A_v10797, xs_v10798, ys_v10799) =
  match xs_v10798 with
  | nilLL_c6  ⇒ ys_v10799
  | consLL_c7 x_v10800 xs_v10801 ⇒
    (consLL_c7 x_v10800 appendLL_i40(NULL, xs_v10801, ys_v10799))
  end

val appendLLclo_i79 =
  fn A_v10802 xs_v10803 ⇒
    ln ys_v10804 ⇒ appendLL_i40(A_v10802, xs_v10803, ys_v10804)

fun readline_i25(__v10805) =
  ln __v10806 ⇒
    let ch_v10807 = open stdin in
    let ch_v10808 = send(ch_v10807, 1) in
    let __v10809 = recv(ch_v10808) in
    match __v10809 with
    | (s_v10810, ch_v10811) ⇒
      let ch_v10812 = send(ch_v10811, 0) in s_v10810
    end

val readlineclo_i80 = fn __v10813 ⇒ readline_i25(__v10813)

fun print_i26(s_v10814) =
  ln __v10815 ⇒
    let ch_v10816 = open stdout in
    let ch_v10817 = send(ch_v10816, 1) in
    let ch_v10818 = send(ch_v10817, s_v10814) in
    let ch_v10819 = send(ch_v10818, 0) in NULL

val printclo_i81 = fn s_v10820 ⇒ print_i26(s_v10820)

fun prerr_i27(s_v10821) =
  ln __v10822 ⇒
    let ch_v10823 = open stderr in
    let ch_v10824 = send(ch_v10823, 1) in
    let ch_v10825 = send(ch_v10824, s_v10821) in
    let ch_v10826 = send(ch_v10825, 0) in NULL

val prerrclo_i82 = fn s_v10827 ⇒ prerr_i27(s_v10827)

fun splitU_i45(zs_v10828) =
  match zs_v10828 with
  | nilUU_c12  ⇒ (nilUU_c12, nilUU_c12)
  | consUU_c13 x_v10829 zs_v10830 ⇒
    match zs_v10830 with
    | nilUU_c12  ⇒ ((consUU_c13 x_v10829 nilUU_c12), nilUU_c12)
    | consUU_c13 y_v10831 zs_v10832 ⇒
      let __v10833 = splitU_i45(zs_v10832) in
      match __v10833 with
      | (xs_v10834, ys_v10835) ⇒
        ((consUU_c13 x_v10829 xs_v10834), (consUU_c13 y_v10831 ys_v10835))
      end
    end
  end

val splitUclo_i83 = fn zs_v10836 ⇒ splitU_i45(zs_v10836)

fun splitL_i44(zs_v10837) =
  match zs_v10837 with
  | nilUL_c10  ⇒ (nilUL_c10, nilUL_c10)
  | consUL_c11 x_v10838 zs_v10839 ⇒
    match zs_v10839 with
    | nilUL_c10  ⇒ ((consUL_c11 x_v10838 nilUL_c10), nilUL_c10)
    | consUL_c11 y_v10840 zs_v10841 ⇒
      let __v10842 = splitL_i44(zs_v10841) in
      match __v10842 with
      | (xs_v10843, ys_v10844) ⇒
        ((consUL_c11 x_v10838 xs_v10843), (consUL_c11 y_v10840 ys_v10844))
      end
    end
  end

val splitLclo_i84 = fn zs_v10845 ⇒ splitL_i44(zs_v10845)

fun mergeU_i47(xs_v10846, ys_v10847) =
  match xs_v10846 with
  | nilUU_c12  ⇒ ys_v10847
  | consUU_c13 x_v10848 xs0_v10849 ⇒
    match ys_v10847 with
    | nilUU_c12  ⇒ (consUU_c13 x_v10848 xs0_v10849)
    | consUU_c13 y_v10850 ys0_v10851 ⇒
      if lten_i4(x_v10848, y_v10850) then
        (consUU_c13
          x_v10848 mergeU_i47(xs0_v10849, (consUU_c13 y_v10850 ys0_v10851)))
      else
        (consUU_c13
          y_v10850 mergeU_i47((consUU_c13 x_v10848 xs0_v10849), ys0_v10851))
    end
  end

val mergeUclo_i85 =
  fn xs_v10852 ⇒ ln ys_v10853 ⇒ mergeU_i47(xs_v10852, ys_v10853)

fun mergeL_i46(xs_v10854, ys_v10855) =
  match xs_v10854 with
  | nilUL_c10  ⇒ ys_v10855
  | consUL_c11 x_v10856 xs0_v10857 ⇒
    match ys_v10855 with
    | nilUL_c10  ⇒ (consUL_c11 x_v10856 xs0_v10857)
    | consUL_c11 y_v10858 ys0_v10859 ⇒
      if lten_i4(x_v10856, y_v10858) then
        (consUL_c11
          x_v10856 mergeL_i46(xs0_v10857, (consUL_c11 y_v10858 ys0_v10859)))
      else
        (consUL_c11
          y_v10858 mergeL_i46((consUL_c11 x_v10856 xs0_v10857), ys0_v10859))
    end
  end

val mergeLclo_i86 =
  fn xs_v10860 ⇒ ln ys_v10861 ⇒ mergeL_i46(xs_v10860, ys_v10861)

fun msortU_i49(zs_v10862) =
  match zs_v10862 with
  | nilUU_c12  ⇒ nilUU_c12
  | consUU_c13 x_v10863 zs_v10864 ⇒
    match zs_v10864 with
    | nilUU_c12  ⇒ (consUU_c13 x_v10863 nilUU_c12)
    | consUU_c13 y_v10865 zs_v10866 ⇒
      let __v10867 =
        splitU_i45((consUU_c13 x_v10863 (consUU_c13 y_v10865 zs_v10866)))
      in
      match __v10867 with
      | (xs_v10868, ys_v10869) ⇒
        mergeU_i47(msortU_i49(xs_v10868), msortU_i49(ys_v10869))
      end
    end
  end

val msortUclo_i87 = fn zs_v10870 ⇒ msortU_i49(zs_v10870)

fun msortL_i48(zs_v10871) =
  match zs_v10871 with
  | nilUL_c10  ⇒ nilUL_c10
  | consUL_c11 x_v10872 zs_v10873 ⇒
    match zs_v10873 with
    | nilUL_c10  ⇒ (consUL_c11 x_v10872 nilUL_c10)
    | consUL_c11 y_v10874 zs_v10875 ⇒
      let __v10876 =
        splitL_i44((consUL_c11 x_v10872 (consUL_c11 y_v10874 zs_v10875)))
      in
      match __v10876 with
      | (xs_v10877, ys_v10878) ⇒
        mergeL_i46(msortL_i48(xs_v10877), msortL_i48(ys_v10878))
      end
    end
  end

val msortLclo_i88 = fn zs_v10879 ⇒ msortL_i48(zs_v10879)

fun cmsort_workerU_i53(n_v10880, zs_v10881, c_v10882) =
  ln __v10883 ⇒
    let c_v10884 =
      ((fn x_v10885 ⇒ ln __v10886 ⇒ send(c_v10882, x_v10885))
         msortU_i49(zs_v10881))
        NULL
    in NULL

val cmsort_workerUclo_i89 =
  fn n_v10887 zs_v10888 ⇒
    ln c_v10889 ⇒ cmsort_workerU_i53(n_v10887, zs_v10888, c_v10889)

fun cmsort_workerL_i52(n_v10890, zs_v10891, c_v10892) =
  ln __v10893 ⇒
    let c_v10894 =
      ((ln x_v10895 __v10896 ⇒ send(c_v10892, x_v10895))
         msortL_i48(zs_v10891))
        NULL
    in NULL

val cmsort_workerLclo_i90 =
  fn n_v10897 zs_v10898 ⇒
    ln c_v10899 ⇒ cmsort_workerL_i52(n_v10897, zs_v10898, c_v10899)

fun cmsortU_i55(zs0_v10900) =
  ln __v10901 ⇒
    let c_v10902 =
      fork c_v10903 in (cmsort_workerU_i53(0, zs0_v10900, c_v10903)) NULL
    in
    let __v10904 = recv(c_v10902) in
    match __v10904 with
    | (zs1_v10905, c_v10906) ⇒ let __v10907 = close(c_v10906) in zs1_v10905
    end

val cmsortUclo_i91 = fn zs0_v10908 ⇒ cmsortU_i55(zs0_v10908)

fun cmsortL_i54(zs0_v10909) =
  ln __v10910 ⇒
    let c_v10911 =
      fork c_v10912 in (cmsort_workerL_i52(0, zs0_v10909, c_v10912)) NULL
    in
    let __v10913 = recv(c_v10911) in
    match __v10913 with
    | (zs1_v10914, c_v10915) ⇒ let __v10916 = close(c_v10915) in zs1_v10914
    end

val cmsortLclo_i92 = fn zs0_v10917 ⇒ cmsortL_i54(zs0_v10917)

fun mkListU_i57(n_v10918) =
  if n_v10918 then
    (consUU_c13 n_v10918 mkListU_i57(n_v10918.-1))
  else
    nilUU_c12

val mkListUclo_i93 = fn n_v10919 ⇒ mkListU_i57(n_v10919)

fun mkListL_i56(n_v10920) =
  if n_v10920 then
    (consUL_c11 n_v10920 mkListL_i56(n_v10920.-1))
  else
    nilUL_c10

val mkListLclo_i94 = fn n_v10921 ⇒ mkListL_i56(n_v10921)

main =
  let test_v10922 = mkListU_i57(10000) in
  let sorted_v10923 = (cmsortU_i55(test_v10922)) NULL in NULL

trans3e success--------------------------

trans34 success--------------------------

