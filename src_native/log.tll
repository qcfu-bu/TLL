logical eq_sym‹s› (A : Type‹s›) (x : A) (y : A) : (∀ (_ : x ≡ y) → y ≡ x) = (fn (e : _) ⇒ rew [y, _ ⇒ y ≡ x] e in refl)

logical f_equal‹s,
t› (A : Type‹s›) (B : Type‹t›) (f : (∀ (_ : A) → B)) (x : A) (y : A) : (∀ (_ : x ≡ y) → (
(f) (x)) ≡ ((f) (y))) = (fn (e : _) ⇒ rew [y, p ⇒ ((f) (x)) ≡ (
(f)
(y))] e in refl)

logical bool_absurd‹› (e : true ≡ false) : absurd = rew [x, _ ⇒ match x as _ in _ with true ⇒ unit | false ⇒ absurd] e in ()

logical nat_absurd‹› (n : nat) (e : n.+1 ≡ O) : absurd = rew [x, _ ⇒ match x as _ in _ with O ⇒ absurd | S _ ⇒ unit] e in ()

logical nat_inv‹› (n1 : nat) (n2 : nat) (e : n1.+1 ≡ n2.+1) : n1 ≡ n2 = (
(f_equal) (_) (_) (pred) (_) (_)
(e))

logical eqn_reflect‹› (m : nat) (n : nat) : (∀ (_ : ((eqn) (m)
(n)) ≡ true) → m ≡ n) = match m as m0 in (∀ (_ : ((eqn) (m0)
(n)) ≡ true) → m0 ≡ n) with O ⇒ match n as n0 in (∀ (_ : ((eqn)
(O.+0)
(n0)) ≡ true) → O.+0 ≡ n0) with O ⇒ (fn (_ : _) ⇒ refl) | S n ⇒ (fn (e : _) ⇒ (
(absurd_elim) (_)
(((bool_absurd) (((eq_sym) (_) (_) (_) (e))))))) | S m ⇒ match n as n0 in (∀ (_ : (
(eqn) (m.+1)
(n0)) ≡ true) → m.+1 ≡ n0) with O ⇒ (fn (e : _) ⇒ ((absurd_elim)
(_)
(((bool_absurd) (((eq_sym) (_) (_) (_) (e))))))) | S n ⇒ (fn (e : _) ⇒ (
(f_equal) (_) (_) ((fn (x : _) ⇒ x.+1)) (_) (_)
(((eqn_reflect) (m) (n) (e)))))

inductive word‹› : U = Word of ‹› (s : string) {pf : ((strlen)
(s)) ≡ O.+5} → ((word‹›))

program contains‹› (c : char) (s : string) : bool = match s as _ in _ with EmptyString  ⇒ false | String c0
s ⇒ match ((eqc) (c)
(c0)) as _ in _ with true ⇒ true | false ⇒ ((contains) (c)
(s))

program string_diff‹› (ans : string) (s1 : string) (s2 : string) : string = match s1 as _ in _ with EmptyString  ⇒ EmptyString | String c1
s1 ⇒ match s2 as _ in _ with EmptyString  ⇒ EmptyString | String c2
s2 ⇒ match ((eqc) (c1) (c2)) as _ in _ with true ⇒ ((cats)
(((String) (((Char) (O.+89))) (EmptyString)))
(((string_diff) (ans) (s1) (s2)))) | false ⇒ match ((contains) (c2)
(ans)) as _ in _ with true ⇒ ((cats)
(((String) (((Char) (O.+73))) (EmptyString)))
(((string_diff) (ans) (s1) (s2)))) | false ⇒ ((cats)
(((String) (((Char) (O.+78))) (EmptyString)))
(((string_diff) (ans) (s1) (s2))))

logical string_diff_len‹› (n : nat) (ans : string) (s1 : string) (s2 : string) : (∀ (_ : n ≡ (
(strlen) (s1))) → (∀ (_ : n ≡ ((strlen) (s2))) → n ≡ ((strlen)
(((string_diff) (ans) (s1) (s2)))))) = match s1 as s0 in (∀ (_ : n ≡ (
(strlen) (s0))) → (∀ (_ : n ≡ ((strlen) (s2))) → n ≡ ((strlen)
(((string_diff) (ans) (s0) (s2)))))) with EmptyString  ⇒ match s2 as s0 in (∀ (_ : n ≡ O.+0) → (∀ (_ : n ≡ (
(strlen)
(s0))) → n ≡ O.+0)) with EmptyString  ⇒ (fn (e1 : _) ⇒ (fn (_ : _) ⇒ e1)) | String c2
s2 ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e2 in e1 in (
(absurd_elim) (_) (((nat_absurd) (_) (e3)))))) | String c1
s1 ⇒ match s2 as s0 in (∀ (_ : n ≡ ((strlen)
(((String) (c1) (s1))))) → (∀ (_ : n ≡ ((strlen)
(s0))) → n ≡ ((strlen)
(((string_diff) (ans) (((String) (c1) (s1))) (s0)))))) with EmptyString  ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e1 in e2 in (
(absurd_elim) (_) (((nat_absurd) (_) (e3)))))) | String c2
s2 ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ ((match n as n0 in (∀ (_ : n ≡ n0) → n0 ≡ (
                                           (strlen)
                                           (((string_diff) (ans)
                                            (((String) (c1) (s1)))
                                            (((String) (c2) (s2))))))) with O ⇒ (fn (e0 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e1 in e0 in (
                                           (absurd_elim) (_)
                                           (((nat_absurd) (_) (e3))))) | S n0 ⇒ (fn (e0 : _) ⇒ let e3 = rew [n1, _ ⇒ n1 ≡ (
                                           (strlen)
                                           (s1)).+1] e0 in e1 in let e4 = rew [n1, _ ⇒ n1 ≡ (
                                           (strlen)
                                           (s2)).+1] e0 in e2 in let e5 = (
                                           (nat_inv) (_) (_)
                                           (e3)) in let e6 = ((nat_inv) 
                                           (_) (_) (e4)) in match ((eqc) 
                                           (c1)
                                           (c2)) as b0 in n0.+1 ≡ (
                                           (strlen)
                                           (match b0 as _ in _ with true ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+89)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))) | false ⇒ match (
                                            (contains) (c2)
                                            (ans)) as _ in _ with true ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+73)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))) | false ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+78)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))))) with true ⇒ rew [n1, _ ⇒ n0.+1 ≡ n1.+1] (
                                           (string_diff_len) (_) (_) 
                                           (_) (_) (e5)
                                           (e6)) in refl | false ⇒ match (
                                           (contains) (c2)
                                           (ans)) as b0 in n0.+1 ≡ (
                                           (strlen)
                                           (match b0 as _ in _ with true ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+73)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))) | false ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+78)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))))) with true ⇒ rew [n1, _ ⇒ n0.+1 ≡ n1.+1] (
                                           (string_diff_len) (_) (_) 
                                           (_) (_) (e5)
                                           (e6)) in refl | false ⇒ rew [n1, _ ⇒ n0.+1 ≡ n1.+1] (
                                           (string_diff_len) (_) (_) 
                                           (_) (_) (e5) (e6)) in refl))
(refl))))

program wordle_diff‹› (ans : word) (guess : word) : word = match ans as _ in _ with Word ans
pf1 ⇒ match guess as _ in _ with Word guess pf2 ⇒ let {pf1} = ((eq_sym)
(_) (_) (_) (pf1)) in let {pf2} = ((eq_sym) (_) (_) (_)
(pf2)) in let {pf} = ((string_diff_len) (_) (_) (_) (_) (pf1)
(pf2)) in ((Word) (((string_diff) (ans) (ans) (guess)))
(((eq_sym) (_) (_) (_) (pf))))

program eqw‹› (w1 : word) (w2 : word) : bool = match w1 as _ in _ with Word s1
_ ⇒ match w2 as _ in _ with Word s2 _ ⇒ ((eqs) (s1)
(s2))

logical wordle_loop‹› (ans : word) (repeat : nat) : proto = match repeat as _ in _ with O ⇒ !(w : word) → !{_ : w ≡ ans} → end | S repeat ⇒ ?(guess : word) → !(b : bool) → !{_ : b ≡ (
(eqw) (ans)
(guess))} → match b as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
(wordle_diff) (ans) (guess))} → ((wordle_loop) (ans)
(repeat))

logical wordle‹› : proto = !{ans : word} → !(repeat : nat) → (
(wordle_loop) (ans)
(repeat))

logical loop_ch‹› (ans : word) (repeat : nat) : L = ch‹((wordle_loop)
(ans)
(repeat))›

logical loop_hc‹› (ans : word) (repeat : nat) : L = hc‹((wordle_loop)
(ans)
(repeat))›

logical wordle_ch‹› : L = ch‹wordle›

logical wordle_hc‹› : L = hc‹wordle›

program read_word‹› (_ : unit) : IO word = let s ⇐ ((readline)
(())) in ((match ((eqn) (((strlen) (s))) (O.+5)) as b0 in (∀ {_ : (
           (eqn) (((strlen) (s)))
           (O.+5)) ≡ b0} → IO word) with true ⇒ (fn {e : _} ⇒ return (
           (Word) (s)
           (((eqn_reflect) (_) (_) (e))))) | false ⇒ (fn {_ : _} ⇒ let _ ⇐ (
           (print)
           (((String) (((Char) (O.+112)))
            (((String) (((Char) (O.+108)))
             (((String) (((Char) (O.+101)))
              (((String) (((Char) (O.+97)))
               (((String) (((Char) (O.+115)))
                (((String) (((Char) (O.+101)))
                 (((String) (((Char) (O.+32)))
                  (((String) (((Char) (O.+105)))
                   (((String) (((Char) (O.+110)))
                    (((String) (((Char) (O.+112)))
                     (((String) (((Char) (O.+117)))
                      (((String) (((Char) (O.+116)))
                       (((String) (((Char) (O.+32)))
                        (((String) (((Char) (O.+97)))
                         (((String) (((Char) (O.+32)))
                          (((String) (((Char) (O.+119)))
                           (((String) (((Char) (O.+111)))
                            (((String) (((Char) (O.+114)))
                             (((String) (((Char) (O.+100)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+119)))
                                (((String) (((Char) (O.+105)))
                                 (((String) (((Char) (O.+116)))
                                  (((String) (((Char) (O.+104)))
                                   (((String) (((Char) (O.+32)))
                                    (((String) (((Char) (O.+108)))
                                     (((String) (((Char) (O.+101)))
                                      (((String) (((Char) (O.+110)))
                                       (((String) (((Char) (O.+103)))
                                        (((String) (((Char) (O.+116)))
                                         (((String) (((Char) (O.+104)))
                                          (((String) (((Char) (O.+32)))
                                           (((String) (((Char) (O.+111)))
                                            (((String) (((Char) (O.+102)))
                                             (((String) (((Char) (O.+32)))
                                              (((String) (((Char) (O.+53)))
                                               (((String) (((Char) (O.+10)))
                                                (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) in (
           (read_word) (()))))
(refl))

program player_loop‹› {ans : word} (repeat : nat) (c : ((loop_hc) 
(ans)
(repeat))) : IO unit = ((match repeat as repeat0 in (∀ (_ : ((loop_hc)
                         (ans)
                         (repeat0))) → IO unit) with O ⇒ (fn (c : _) ⇒ let ⟨ans, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in match ans as _ in _ with Word s
                         _ ⇒ let _ ⇐ ((print)
                         (((cats)
                          (((cats)
                           (((String) (((Char) (O.+89)))
                            (((String) (((Char) (O.+111)))
                             (((String) (((Char) (O.+117)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+76)))
                                (((String) (((Char) (O.+111)))
                                 (((String) (((Char) (O.+115)))
                                  (((String) (((Char) (O.+101)))
                                   (((String) (((Char) (O.+33)))
                                    (((String) (((Char) (O.+32)))
                                     (((String) (((Char) (O.+84)))
                                      (((String) (((Char) (O.+104)))
                                       (((String) (((Char) (O.+101)))
                                        (((String) (((Char) (O.+32)))
                                         (((String) (((Char) (O.+97)))
                                          (((String) (((Char) (O.+110)))
                                           (((String) (((Char) (O.+115)))
                                            (((String) (((Char) (O.+119)))
                                             (((String) (((Char) (O.+101)))
                                              (((String) (((Char) (O.+114)))
                                               (((String) (((Char) (O.+32)))
                                                (((String)
                                                 (((Char) (O.+105)))
                                                 (((String)
                                                  (((Char) (O.+115)))
                                                  (((String)
                                                   (((Char) (O.+32)))
                                                   (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))
                           (s)))
                          (((String) (((Char) (O.+46)))
                           (((String) (((Char) (O.+10))) (EmptyString)))))))) in close c) | S repeat ⇒ (fn (c : _) ⇒ let guess ⇐ (
                         (read_word) (())) in let c ⇐ ((send c)
                         (guess)) in let ⟨b, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in (
                         (match b as b0 in (∀ (_ : hc‹match b0 as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
                          (wordle_diff) (ans) (guess))} → ((wordle_loop)
                          (ans)
                          (repeat))›) ⊸ IO unit) with true ⇒ (ln (c : _) ⇒ let _ ⇐ (
                          (print)
                          (((String) (((Char) (O.+89)))
                           (((String) (((Char) (O.+111)))
                            (((String) (((Char) (O.+117)))
                             (((String) (((Char) (O.+32)))
                              (((String) (((Char) (O.+87)))
                               (((String) (((Char) (O.+105)))
                                (((String) (((Char) (O.+110)))
                                 (((String) (((Char) (O.+33)))
                                  (((String) (((Char) (O.+10)))
                                   (EmptyString)))))))))))))))))))) in close c) | false ⇒ (ln (c : _) ⇒ let ⟨diff, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in match diff as _ in _ with Word s
                          _ ⇒ let _ ⇐ ((print)
                          (((cats)
                           (((cats)
                            (((cats)
                             (((cats)
                              (((String) (((Char) (O.+73)))
                               (((String) (((Char) (O.+110)))
                                (((String) (((Char) (O.+99)))
                                 (((String) (((Char) (O.+111)))
                                  (((String) (((Char) (O.+114)))
                                   (((String) (((Char) (O.+114)))
                                    (((String) (((Char) (O.+101)))
                                     (((String) (((Char) (O.+99)))
                                      (((String) (((Char) (O.+116)))
                                       (((String) (((Char) (O.+44)))
                                        (((String) (((Char) (O.+32)))
                                         (((String) (((Char) (O.+104)))
                                          (((String) (((Char) (O.+105)))
                                           (((String) (((Char) (O.+110)))
                                            (((String) (((Char) (O.+116)))
                                             (((String) (((Char) (O.+58)))
                                              (((String) (((Char) (O.+32)))
                                               (EmptyString)))))))))))))))))))))))))))))))))))
                              (s)))
                             (((String) (((Char) (O.+46)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+89)))
                                (((String) (((Char) (O.+111)))
                                 (((String) (((Char) (O.+117)))
                                  (((String) (((Char) (O.+32)))
                                   (((String) (((Char) (O.+104)))
                                    (((String) (((Char) (O.+97)))
                                     (((String) (((Char) (O.+118)))
                                      (((String) (((Char) (O.+101)))
                                       (((String) (((Char) (O.+32)))
                                        (EmptyString)))))))))))))))))))))))))
                            (((string_of_nat) (repeat)))))
                           (((String) (((Char) (O.+32)))
                            (((String) (((Char) (O.+109)))
                             (((String) (((Char) (O.+111)))
                              (((String) (((Char) (O.+114)))
                               (((String) (((Char) (O.+101)))
                                (((String) (((Char) (O.+32)))
                                 (((String) (((Char) (O.+116)))
                                  (((String) (((Char) (O.+114)))
                                   (((String) (((Char) (O.+105)))
                                    (((String) (((Char) (O.+101)))
                                     (((String) (((Char) (O.+115)))
                                      (((String) (((Char) (O.+46)))
                                       (((String) (((Char) (O.+10)))
                                        (EmptyString)))))))))))))))))))))))))))))) in (
                          (player_loop) (ans) (repeat) (c))))
                         (c))))
(c))

program player‹› (c : wordle_hc) : IO unit = let ⟨{ans}, c⟩ ⇐ recv c in let ⟨repeat, c⟩ ⇐ recv c in let _ ⇐ (
(print)
(((String) (((Char) (O.+87)))
 (((String) (((Char) (O.+111)))
  (((String) (((Char) (O.+114)))
   (((String) (((Char) (O.+100)))
    (((String) (((Char) (O.+108)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+32)))
       (((String) (((Char) (O.+71)))
        (((String) (((Char) (O.+97)))
         (((String) (((Char) (O.+109)))
          (((String) (((Char) (O.+101)))
           (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))))))))) in let _ ⇐ (
(print)
(((String) (((Char) (O.+80)))
 (((String) (((Char) (O.+108)))
  (((String) (((Char) (O.+101)))
   (((String) (((Char) (O.+97)))
    (((String) (((Char) (O.+115)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+32)))
       (((String) (((Char) (O.+103)))
        (((String) (((Char) (O.+117)))
         (((String) (((Char) (O.+101)))
          (((String) (((Char) (O.+115)))
           (((String) (((Char) (O.+115)))
            (((String) (((Char) (O.+32)))
             (((String) (((Char) (O.+97)))
              (((String) (((Char) (O.+32)))
               (((String) (((Char) (O.+119)))
                (((String) (((Char) (O.+111)))
                 (((String) (((Char) (O.+114)))
                  (((String) (((Char) (O.+100)))
                   (((String) (((Char) (O.+32)))
                    (((String) (((Char) (O.+111)))
                     (((String) (((Char) (O.+102)))
                      (((String) (((Char) (O.+32)))
                       (((String) (((Char) (O.+108)))
                        (((String) (((Char) (O.+101)))
                         (((String) (((Char) (O.+110)))
                          (((String) (((Char) (O.+103)))
                           (((String) (((Char) (O.+116)))
                            (((String) (((Char) (O.+104)))
                             (((String) (((Char) (O.+32)))
                              (((String) (((Char) (O.+53)))
                               (((String) (((Char) (O.+46)))
                                (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) in let _ ⇐ (
(print)
(((cats)
 (((cats)
  (((String) (((Char) (O.+89)))
   (((String) (((Char) (O.+111)))
    (((String) (((Char) (O.+117)))
     (((String) (((Char) (O.+32)))
      (((String) (((Char) (O.+104)))
       (((String) (((Char) (O.+97)))
        (((String) (((Char) (O.+118)))
         (((String) (((Char) (O.+101)))
          (((String) (((Char) (O.+32))) (EmptyString)))))))))))))))))))
  (((string_of_nat) (repeat)))))
 (((String) (((Char) (O.+32)))
  (((String) (((Char) (O.+116)))
   (((String) (((Char) (O.+114)))
    (((String) (((Char) (O.+105)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+115)))
       (((String) (((Char) (O.+46)))
        (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))) in (
(player_loop) (ans) (repeat)
(c))

inductive subset‹s, r,
t› (A : Type‹s›) (P : (∀ (_ : A) → Type‹r›)) : Type‹t› = SPair of ‹s,
r,
t› {A : Type‹s›} {P : (∀ (_ : A) → Type‹r›)} (m : A) {pf : (
(P) (m))} → ((subset‹s, r, t›) (A)
(P))

inductive at‹› (A : U) (x : A) (n : nat) (xs : ((list‹_, U›)
(A))) : U = at_O of ‹› {A : U} {x : A} {n : nat} {xs : ((list‹_, U›)
(A))} (xs0 : ((list) (A))) {pf1 : n ≡ O.+0} {pf2 : xs ≡ ((cons) (x)
(xs0))} → ((at‹›) (A) (x) (n)
(xs)) | at_S of ‹› {A : U} {x : A} {n : nat} {xs : ((list‹_, U›)
(A))} (n0 : nat) (x0 : A) (xs0 : ((list) (A))) (h : ((at) (A) (x) (n0)
(xs0))) {pf1 : n ≡ n0.+1} {pf2 : xs ≡ ((cons) (x0)
(xs0))} → ((at‹›) (A) (x) (n)
(xs))

logical ltn_inv‹› (m : nat) (n : nat) : (∀ (_ : ((ltn) (m.+1)
(n.+1)) ≡ true) → ((ltn) (m)
(n)) ≡ true) = (fn (h : _) ⇒ h)

program get_at‹› {A : U} (n : nat) (xs : ((list) (A))) : (∀ {_ : (
(ltn) (n) (((llen) (_) (xs)))) ≡ true} → ((subset‹_, _, U›) (_)
((fn (x : _) ⇒ ((at) (_) (x) (n) (xs)))))) = match xs as xs0 in (∀ {_ : (
(ltn) (n) (((llen) (_) (xs0)))) ≡ true} → ((subset) (_)
((fn (x : _) ⇒ ((at) (_) (x) (n) (xs0)))))) with nil  ⇒ (fn {e : _} ⇒ rew [b, _ ⇒ match b as _ in _ with true ⇒ (
(subset) (_)
((fn (x : _) ⇒ ((at) (_) (x) (n) (nil))))) | false ⇒ unit] e in ()) | cons x
xs ⇒ match n as n0 in (∀ {_ : ((ltn) (n0)
(((llen) (_) (xs)).+1)) ≡ true} → ((subset) (_)
((fn (x0 : _) ⇒ ((at) (_) (x0) (n0) (((cons) (x) (xs)))))))) with O ⇒ (fn {e : _} ⇒ (
(SPair) (x)
(((at_O) (xs) (refl) (refl))))) | S n ⇒ (fn {e : _} ⇒ match ((get_at) 
(_) (n) (xs) (((ltn_inv) (_) (_) (e)))) as _ in _ with SPair x0
pf ⇒ ((SPair) (x0)
(((at_S) (_) (_) (_) (pf) (refl) (refl)))))

program rand_word‹› (_ : unit) : IO word = let words = (((cons)
(((Word)
 (((String) (((Char) (O.+114)))
  (((String) (((Char) (O.+111)))
   (((String) (((Char) (O.+117)))
    (((String) (((Char) (O.+116)))
     (((String) (((Char) (O.+101))) (EmptyString)))))))))))
 (refl)))
(((cons)
 (((Word)
  (((String) (((Char) (O.+99)))
   (((String) (((Char) (O.+114)))
    (((String) (((Char) (O.+97)))
     (((String) (((Char) (O.+115)))
      (((String) (((Char) (O.+104))) (EmptyString)))))))))))
  (refl)))
 (((cons)
  (((Word)
   (((String) (((Char) (O.+99)))
    (((String) (((Char) (O.+108)))
     (((String) (((Char) (O.+111)))
      (((String) (((Char) (O.+119)))
       (((String) (((Char) (O.+110))) (EmptyString)))))))))))
   (refl)))
  (((cons)
   (((Word)
    (((String) (((Char) (O.+115)))
     (((String) (((Char) (O.+104)))
      (((String) (((Char) (O.+97)))
       (((String) (((Char) (O.+107)))
        (((String) (((Char) (O.+121))) (EmptyString)))))))))))
    (refl)))
   (((cons)
    (((Word)
     (((String) (((Char) (O.+118)))
      (((String) (((Char) (O.+101)))
       (((String) (((Char) (O.+103)))
        (((String) (((Char) (O.+97)))
         (((String) (((Char) (O.+110))) (EmptyString)))))))))))
     (refl)))
    (((cons)
     (((Word)
      (((String) (((Char) (O.+112)))
       (((String) (((Char) (O.+111)))
        (((String) (((Char) (O.+119)))
         (((String) (((Char) (O.+101)))
          (((String) (((Char) (O.+114))) (EmptyString)))))))))))
      (refl)))
     (((cons)
      (((Word)
       (((String) (((Char) (O.+116)))
        (((String) (((Char) (O.+114)))
         (((String) (((Char) (O.+117)))
          (((String) (((Char) (O.+115)))
           (((String) (((Char) (O.+116))) (EmptyString)))))))))))
       (refl)))
      (((cons)
       (((Word)
        (((String) (((Char) (O.+101)))
         (((String) (((Char) (O.+110)))
          (((String) (((Char) (O.+106)))
           (((String) (((Char) (O.+111)))
            (((String) (((Char) (O.+121))) (EmptyString)))))))))))
        (refl)))
       (((cons)
        (((Word)
         (((String) (((Char) (O.+98)))
          (((String) (((Char) (O.+114)))
           (((String) (((Char) (O.+97)))
            (((String) (((Char) (O.+105)))
             (((String) (((Char) (O.+110))) (EmptyString)))))))))))
         (refl)))
        (((cons)
         (((Word)
          (((String) (((Char) (O.+97)))
           (((String) (((Char) (O.+100)))
            (((String) (((Char) (O.+111)))
             (((String) (((Char) (O.+112)))
              (((String) (((Char) (O.+116))) (EmptyString)))))))))))
          (refl)))
         (((cons)
          (((Word)
           (((String) (((Char) (O.+116)))
            (((String) (((Char) (O.+111)))
             (((String) (((Char) (O.+119)))
              (((String) (((Char) (O.+101)))
               (((String) (((Char) (O.+114))) (EmptyString)))))))))))
           (refl)))
          (((cons)
           (((Word)
            (((String) (((Char) (O.+115)))
             (((String) (((Char) (O.+104)))
              (((String) (((Char) (O.+97)))
               (((String) (((Char) (O.+100)))
                (((String) (((Char) (O.+101))) (EmptyString)))))))))))
            (refl)))
           (((cons)
            (((Word)
             (((String) (((Char) (O.+100)))
              (((String) (((Char) (O.+101)))
               (((String) (((Char) (O.+108)))
                (((String) (((Char) (O.+97)))
                 (((String) (((Char) (O.+121))) (EmptyString)))))))))))
             (refl)))
            (((cons)
             (((Word)
              (((String) (((Char) (O.+116)))
               (((String) (((Char) (O.+119)))
                (((String) (((Char) (O.+105)))
                 (((String) (((Char) (O.+115)))
                  (((String) (((Char) (O.+116))) (EmptyString)))))))))))
              (refl)))
             (((cons)
              (((Word)
               (((String) (((Char) (O.+97)))
                (((String) (((Char) (O.+108)))
                 (((String) (((Char) (O.+101)))
                  (((String) (((Char) (O.+114)))
                   (((String) (((Char) (O.+116))) (EmptyString)))))))))))
               (refl)))
              (((cons)
               (((Word)
                (((String) (((Char) (O.+99)))
                 (((String) (((Char) (O.+104)))
                  (((String) (((Char) (O.+111)))
                   (((String) (((Char) (O.+107)))
                    (((String) (((Char) (O.+101))) (EmptyString)))))))))))
                (refl)))
               (((cons)
                (((Word)
                 (((String) (((Char) (O.+115)))
                  (((String) (((Char) (O.+112)))
                   (((String) (((Char) (O.+108)))
                    (((String) (((Char) (O.+105)))
                     (((String) (((Char) (O.+116))) (EmptyString)))))))))))
                 (refl)))
                (((cons)
                 (((Word)
                  (((String) (((Char) (O.+114)))
                   (((String) (((Char) (O.+104)))
                    (((String) (((Char) (O.+121)))
                     (((String) (((Char) (O.+109)))
                      (((String) (((Char) (O.+101))) (EmptyString)))))))))))
                  (refl)))
                 (((cons)
                  (((Word)
                   (((String) (((Char) (O.+109)))
                    (((String) (((Char) (O.+117)))
                     (((String) (((Char) (O.+100)))
                      (((String) (((Char) (O.+100)))
                       (((String) (((Char) (O.+121))) (EmptyString)))))))))))
                   (refl)))
                  (((cons)
                   (((Word)
                    (((String) (((Char) (O.+112)))
                     (((String) (((Char) (O.+108)))
                      (((String) (((Char) (O.+97)))
                       (((String) (((Char) (O.+110)))
                        (((String) (((Char) (O.+116))) (EmptyString)))))))))))
                    (refl)))
                   (nil)))))))))))))))))))))))))))))))))))))))) : ((list‹_,
                                                                    U›)
(_))) in let r ⇐ rand O.+0 O.+19 in match r as _ in _ with Between n _
pf ⇒ match ((get_at) (_) (n) (words) (pf)) as _ in _ with SPair w
_ ⇒ return w

program server_loop‹› (ans : word) (repeat : nat) (c : ((loop_ch) 
(ans)
(repeat))) : IO unit = ((match repeat as repeat0 in (∀ (_ : ((loop_ch)
                         (ans)
                         (repeat0))) → IO unit) with O ⇒ (fn (c : _) ⇒ let c ⇐ (
                         (send c) (ans)) in let c ⇐ ((send c)
                         (refl)) in close c) | S repeat ⇒ (fn (c : _) ⇒ let ⟨guess, c⟩ ⇐ recv c in let b = (
                         (eqw) (ans) (guess)) in let c ⇐ ((send c)
                         (b)) in let c ⇐ ((send c)
                         (refl)) in ((match b as b0 in (∀ (_ : ch‹match b0 as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
                                      (wordle_diff) (ans)
                                      (guess))} → ((wordle_loop) (ans)
                                      (repeat))›) ⊸ IO unit) with true ⇒ (ln (c : _) ⇒ close c) | false ⇒ (ln (c : _) ⇒ let c ⇐ (
                                      (send c)
                                      (((wordle_diff) (ans) (guess)))) in let c ⇐ (
                                      (send c) (refl)) in ((server_loop)
                                      (ans) (repeat) (c))))
                         (c))))
(c))

program server‹› (c : wordle_ch) : IO unit = let repeat = O.+6 in let ans ⇐ (
(rand_word) (())) in let c ⇐ ((send c) (ans)) in let c ⇐ ((send c)
(repeat)) in ((server_loop) (ans) (repeat)
(c))

program main‹› : IO unit = let c ⇐ fork (c : wordle_ch) in ((server)
(c)) in let c0 ⇐ fork (c0 : ch‹?(_ : wordle_hc) → !(_ : unit) → end›) in let ⟨c, c0⟩ ⇐ recv c0 in let _ ⇐ (
(player) (c)) in let c0 ⇐ ((send c0)
(())) in close c0 in let c0 ⇐ ((send c0)
(c)) in let ⟨_, c0⟩ ⇐ recv c0 in close c0

parsing success--------------------------

inductive absurd_d1 : U =


logical absurd_elim_i1 ‹s_s591› :
  ∀ (A_v592 : Type‹s_s591›) → absurd_d1 → A_v592
=
  fn (A_v594 : Type‹s_s591›) (p_v595 : absurd_d1) ⇒
    match p_v595 as __v596 in ??1 with
    
    end

inductive order_d2 : U =
| LT_c1 of : order_d2 | GT_c2 of : order_d2 | EQ_c3 of : order_d2

program andb_i2 : bool → bool → bool =
  fn (b1_v599 : bool) (b2_v600 : bool) ⇒
    match b1_v599 as __v601 in ??2 with
    | true ⇒ b2_v600 | false ⇒ false
    end

program orb_i3 : bool → bool → bool =
  fn (b1_v604 : bool) (b2_v605 : bool) ⇒
    match b1_v604 as __v606 in ??3 with
    | true ⇒ true | false ⇒ b2_v605
    end

program notb_i4 : bool → bool =
  fn (b_v608 : bool) ⇒
    match b_v608 as __v609 in ??4 with
    | true ⇒ false | false ⇒ true
    end

program compareb_i5 : bool → bool → order_d2 =
  fn (b1_v612 : bool) (b2_v613 : bool) ⇒
    match b1_v612 as __v614 in ??5 with
    | true ⇒
      match b2_v613 as __v615 in ??7 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v613 as __v616 in ??6 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i6 : nat → nat → bool =
  fn (x_v619 : nat) (y_v620 : nat) ⇒
    match x_v619 as __v621 in ??8 with
    | O ⇒ true
    | S x_v622 ⇒
      match y_v620 as __v623 in ??9 with
      | O ⇒ false | S y_v624 ⇒ (lten_i6 x_v622 y_v624)
      end
    end

program ltn_i7 : nat → nat → bool =
  fn (x_v627 : nat) (y_v628 : nat) ⇒ (lten_i6 x_v627.+1 y_v628)

program gten_i8 : nat → nat → bool =
  fn (x_v631 : nat) (y_v632 : nat) ⇒ (lten_i6 y_v632 x_v631)

program gtn_i9 : nat → nat → bool =
  fn (x_v635 : nat) (y_v636 : nat) ⇒ (ltn_i7 y_v636 x_v635)

program eqn_i10 : nat → nat → bool =
  fn (x_v639 : nat) (y_v640 : nat) ⇒
    match x_v639 as __v641 in ??10 with
    | O ⇒
      match y_v640 as __v642 in ??12 with
      | O ⇒ true | S __v643 ⇒ false
      end
    | S x_v644 ⇒
      match y_v640 as __v645 in ??11 with
      | O ⇒ false | S y_v646 ⇒ (eqn_i10 x_v644 y_v646)
      end
    end

program comparen_i11 : nat → nat → order_d2 =
  fn (n1_v649 : nat) (n2_v650 : nat) ⇒
    match n1_v649 as __v651 in ??13 with
    | O ⇒
      match n2_v650 as __v652 in ??15 with
      | O ⇒ EQ_c3‹› | S __v653 ⇒ LT_c1‹›
      end
    | S n1_v654 ⇒
      match n2_v650 as __v655 in ??14 with
      | O ⇒ GT_c2‹› | S n2_v656 ⇒ (comparen_i11 n1_v654 n2_v656)
      end
    end

program pred_i12 : nat → nat =
  fn (x_v658 : nat) ⇒
    match x_v658 as __v659 in ??16 with
    | O ⇒ 0 | S x_v660 ⇒ x_v660
    end

program addn_i13 : nat → nat → nat =
  fn (x_v663 : nat) (y_v664 : nat) ⇒
    match x_v663 as __v665 in ??17 with
    | O ⇒ y_v664 | S x_v666 ⇒ (addn_i13 x_v666 y_v664).+1
    end

program subn_i14 : nat → nat → nat =
  fn (x_v669 : nat) (y_v670 : nat) ⇒
    match y_v670 as __v671 in ??18 with
    | O ⇒ x_v669 | S y_v672 ⇒ (subn_i14 (pred_i12 x_v669) y_v672)
    end

program muln_i15 : nat → nat → nat =
  fn (x_v675 : nat) (y_v676 : nat) ⇒
    match x_v675 as __v677 in ??19 with
    | O ⇒ 0 | S x_v678 ⇒ (addn_i13 y_v676 (muln_i15 x_v678 y_v676))
    end

program divn_i16 : nat → nat → nat =
  fn (x_v681 : nat) (y_v682 : nat) ⇒
    match (ltn_i7 x_v681 y_v682) as __v683 in ??20 with
    | true ⇒ 0 | false ⇒ (divn_i16 (subn_i14 x_v681 y_v682) y_v682).+1
    end

program modn_i17 : nat → nat → nat =
  fn (x_v686 : nat) (y_v687 : nat) ⇒
    (subn_i14 x_v686 (muln_i15 (divn_i16 x_v686 y_v687) y_v687))

inductive between_d3 (lower_v688 : nat) (upper_v689 : nat) : L =
| Between_c4 of
    (lower_v690 : nat) (upper_v691 : nat) (n_v692 : nat)
    {pf1_v693 : (lten_i6 lower_v690 n_v692) ≡ true}
    {pf2_v694 : (lten_i6 n_v692 upper_v691) ≡ true}
    : (between_d3 lower_v690 upper_v691)

inductive char_d4 : U =
| Char_c5 of (n_v695 : nat) : char_d4

program eqc_i18 : char_d4 → char_d4 → bool =
  fn (c1_v698 : char_d4) (c2_v699 : char_d4) ⇒
    match c1_v698 as __v700 in ??23 with
    | Char_c5 n1_v701 ⇒
      match c2_v699 as __v702 in ??24 with
      | Char_c5 n2_v703 ⇒ (eqn_i10 n1_v701 n2_v703)
      end
    end

program comparec_i19 : char_d4 → char_d4 → order_d2 =
  fn (c1_v706 : char_d4) (c2_v707 : char_d4) ⇒
    match c1_v706 as __v708 in ??25 with
    | Char_c5 n1_v709 ⇒
      match c2_v707 as __v710 in ??26 with
      | Char_c5 n2_v711 ⇒ (comparen_i11 n1_v709 n2_v711)
      end
    end

inductive string_d5 : U =
| EmptyString_c6 of : string_d5
| String_c7 of (c_v712 : char_d4) (s_v713 : string_d5) : string_d5

program cats_i20 : string_d5 → string_d5 → string_d5 =
  fn (s1_v716 : string_d5) (s2_v717 : string_d5) ⇒
    match s1_v716 as __v718 in ??27 with
    | EmptyString_c6  ⇒ s2_v717
    | String_c7 c_v719 s1_v720 ⇒
      (String_c7‹› c_v719 (cats_i20 s1_v720 s2_v717))
    end

program strlen_i21 : string_d5 → nat =
  fn (s_v722 : string_d5) ⇒
    match s_v722 as __v723 in ??28 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v724 s_v725 ⇒ (strlen_i21 s_v725).+1
    end

program eqs_i22 : string_d5 → string_d5 → bool =
  fn (s1_v728 : string_d5) (s2_v729 : string_d5) ⇒
    match s1_v728 as __v730 in ??29 with
    | EmptyString_c6  ⇒
      match s2_v729 as __v731 in ??31 with
      | EmptyString_c6  ⇒ true | String_c7 __v732 __v733 ⇒ false
      end
    | String_c7 c1_v734 s1_v735 ⇒
      match s2_v729 as __v736 in ??30 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v737 s2_v738 ⇒
        (andb_i2 (eqc_i18 c1_v734 c2_v737) (eqs_i22 s1_v735 s2_v738))
      end
    end

program compares_i23 : string_d5 → string_d5 → order_d2 =
  fn (s1_v741 : string_d5) (s2_v742 : string_d5) ⇒
    match s1_v741 as __v743 in ??32 with
    | EmptyString_c6  ⇒
      match s2_v742 as __v744 in ??35 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v745 __v746 ⇒ LT_c1‹›
      end
    | String_c7 c1_v747 s1_v748 ⇒
      match s2_v742 as __v749 in ??33 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v750 s2_v751 ⇒
        match (comparec_i19 c1_v747 c2_v750) as __v752 in ??34 with
        | EQ_c3  ⇒ (compares_i23 s1_v748 s2_v751) | LT_c1  ⇒ LT_c1‹›
        | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d6 ‹s_s753, t_s754›
  (A_v755 : Type‹s_s753›) : Type‹t_s754›
=
| None_c8 of
    ‹s_s756, t_s757› (A_v758 : Type‹s_s756›)
    : (option_d6‹s_s756, t_s757› A_v758)
| Some_c9 of
    ‹s_s759, t_s760› (A_v761 : Type‹s_s759›) (x_v762 : A_v761)
    : (option_d6‹s_s759, t_s760› A_v761)

program and_then_i24 ‹s_s763, r_s764, t_s765› :
  ∀ {A_v766 : Type‹s_s763›} →
    ∀ {B_v767 : Type‹r_s764›} →
      (option_d6‹??36, t_s765› A_v766) →
        A_v766 → (option_d6‹??37, t_s765› B_v767) ⊸
          (option_d6‹??38, t_s765› B_v767)
=
  fn {A_v771 : Type‹s_s763›} {B_v772 : Type‹r_s764›}
     (opt_v773 : (option_d6‹??36, t_s765› A_v771)) ⇒
    ln (f_v774 : ??39) ⇒
      match opt_v773 as __v775 in ??40 with
      | None_c8  ⇒ None_c8‹??43, ??42›
      | Some_c9 x_v776 ⇒ (f_v774 x_v776)
      end

inductive list_d7 ‹s_s777, t_s778›
  (A_v779 : Type‹s_s777›) : Type‹t_s778›
=
| nil_c10 of
    ‹s_s780, t_s781› (A_v782 : Type‹s_s780›)
    : (list_d7‹s_s780, t_s781› A_v782)
| cons_c11 of
    ‹s_s783, t_s784› (A_v785 : Type‹s_s783›) (hd_v786 : A_v785)
    (tl_v787 : (list_d7‹s_s783, t_s784› A_v785))
    : (list_d7‹s_s783, t_s784› A_v785)

logical llen_i25 ‹s_s788, t_s789› :
  ∀ (A_v790 : Type‹s_s788›) →
    (list_d7‹s_s788, t_s789› A_v790) → nat
=
  fn (A_v792 : Type‹s_s788›)
     (xs_v793 : (list_d7‹s_s788, t_s789› A_v792)) ⇒
    match xs_v793 as __v794 in ??44 with
    | nil_c10  ⇒ 0
    | cons_c11 x_v795 xs_v796 ⇒ (llen_i25‹??47, ??46› ??45 xs_v796).+1
    end

program len_i26 ‹s_s797, t_s798› :
  ∀ {A_v799 : Type‹s_s797›} →
    (list_d7‹??48, t_s798› A_v799) →
      nat ⊗ (list_d7‹??49, t_s798› A_v799)
=
  fn {A_v802 : Type‹s_s797›}
     (xs_v803 : (list_d7‹??48, t_s798› A_v802)) ⇒
    match xs_v803 as __v804 in ??50 with
    | nil_c10  ⇒ ⟨0, nil_c10‹??60, ??59›⟩
    | cons_c11 x_v805 xs_v806 ⇒
      match (len_i26‹??53, ??52› ??51 xs_v806) as __v807 in ??54 with
      | ⟨n_v808, xs_v809⟩ ⇒
        ⟨n_v808.+1, (cons_c11‹??57, ??56› x_v805 xs_v809)⟩
      end
    end

program append_i27 ‹s_s810, t_s811› :
  ∀ {A_v812 : Type‹s_s810›} →
    (list_d7‹??61, t_s811› A_v812) →
      (list_d7‹??62, t_s811› A_v812) ⊸ (list_d7‹??64, ??63› A_v812)
=
  fn {A_v815 : Type‹s_s810›}
     (xs_v816 : (list_d7‹??61, t_s811› A_v815)) ⇒
    ln (ys_v817 : ??65) ⇒
      match xs_v816 as __v818 in ??66 with
      | nil_c10  ⇒ ys_v817
      | cons_c11 x_v819 xs_v820 ⇒
        (cons_c11‹??72, ??71›
          x_v819 (append_i27‹??69, ??68› ??67 xs_v820 ys_v817))
      end

logical stdin_rec_i28 : unit → proto =
  fn (__v822 : unit) ⇒
    ⇑(b_v823 : bool) ⇒
      match b_v823 as __v824 in ??73 with
      | true ⇒ ⇓(__v825 : string_d5) ⇒ (stdin_rec_i28 ())
      | false ⇒ end
      end

logical stdout_rec_i29 : unit → proto =
  fn (__v827 : unit) ⇒
    ⇑(b_v828 : bool) ⇒
      match b_v828 as __v829 in ??74 with
      | true ⇒ ⇑(__v830 : string_d5) ⇒ (stdout_rec_i29 ())
      | false ⇒ end
      end

logical stderr_rec_i30 : unit → proto =
  fn (__v832 : unit) ⇒
    ⇑(b_v833 : bool) ⇒
      match b_v833 as __v834 in ??75 with
      | true ⇒ ⇑(__v835 : string_d5) ⇒ (stderr_rec_i30 ())
      | false ⇒ end
      end

logical stdin_t_i31 : proto = (stdin_rec_i28 ())

logical stdout_t_i32 : proto = (stdout_rec_i29 ())

logical stderr_t_i33 : proto = (stderr_rec_i30 ())

program readline_i34 : unit → IO string_d5 =
  fn (__v837 : unit) ⇒
    let ch_v838 ⇐ open stdin in
    let ch_v839 ⇐ (send ch_v838 true) in
    let __v840 ⇐ recv ch_v839 in
    match __v840 as __v841 in ??76 with
    | ⟨s_v842, ch_v843⟩ ⇒
      let ch_v844 ⇐ (send ch_v843 false) in
      let __v845 ⇐ close ch_v844 in return s_v842
    end

program print_i35 : string_d5 → IO unit =
  fn (s_v847 : string_d5) ⇒
    let ch_v848 ⇐ open stdout in
    let ch_v849 ⇐ (send ch_v848 true) in
    let ch_v850 ⇐ (send ch_v849 s_v847) in
    let ch_v851 ⇐ (send ch_v850 false) in close ch_v851

program prerr_i36 : string_d5 → IO unit =
  fn (s_v853 : string_d5) ⇒
    let ch_v854 ⇐ open stderr in
    let ch_v855 ⇐ (send ch_v854 true) in
    let ch_v856 ⇐ (send ch_v855 s_v853) in
    let ch_v857 ⇐ (send ch_v856 false) in close ch_v857

program digits_i37 : (list_d7‹??77, U› ??78) =
  (cons_c11‹??111, ??110›
    "0"
    (cons_c11‹??108, ??107›
      "1"
      (cons_c11‹??105, ??104›
        "2"
        (cons_c11‹??102, ??101›
          "3"
          (cons_c11‹??99, ??98›
            "4"
            (cons_c11‹??96, ??95›
              "5"
              (cons_c11‹??93, ??92›
                "6"
                (cons_c11‹??90, ??89›
                  "7"
                  (cons_c11‹??87, ??86›
                    "8"
                    (cons_c11‹??84, ??83› "9" nil_c10‹??81, ??80›))))))))))

program get_at_i38 :
  ∀ {A_v858 : U} →
    nat → (list_d7‹??112, U› A_v858) → A_v858 → A_v858
=
  fn {A_v862 : U} (n_v863 : nat) (xs_v864 : (list_d7‹??112, U› A_v862))
     (a_v865 : A_v862) ⇒
    match n_v863 as __v866 in ??113 with
    | O ⇒
      match xs_v864 as __v867 in ??116 with
      | nil_c10  ⇒ a_v865 | cons_c11 x_v868 __v869 ⇒ x_v868
      end
    | S n_v870 ⇒
      match xs_v864 as __v871 in ??114 with
      | nil_c10  ⇒ a_v865
      | cons_c11 __v872 xs_v873 ⇒ (get_at_i38 ??115 n_v870 xs_v873 a_v865)
      end
    end

program string_of_digit_i39 : nat → string_d5 =
  fn (n_v875 : nat) ⇒
    (get_at_i38 ??117 n_v875 digits_i37 EmptyString_c6‹›)

program string_of_nat_i40 : nat → string_d5 =
  fn (n_v877 : nat) ⇒
    let s_v878 = (string_of_digit_i39 (modn_i17 n_v877 10)) in
    let n_v879 = (divn_i16 n_v877 10) in
    match (ltn_i7 0 n_v879) as __v880 in ??118 with
    | true ⇒ (cats_i20 (string_of_nat_i40 n_v879) s_v878)
    | false ⇒ s_v878
    end

program digit_of_char_i41 : char_d4 → (option_d6‹??119, L› nat) =
  fn (c_v882 : char_d4) ⇒
    match (eqc_i18 c_v882 '0') as __v883 in ??120 with
    | true ⇒ (Some_c9‹??162, ??161› 0)
    | false ⇒
      match (eqc_i18 c_v882 '1') as __v884 in ??121 with
      | true ⇒ (Some_c9‹??159, ??158› 1)
      | false ⇒
        match (eqc_i18 c_v882 '2') as __v885 in ??122 with
        | true ⇒ (Some_c9‹??156, ??155› 2)
        | false ⇒
          match (eqc_i18 c_v882 '3') as __v886 in ??123 with
          | true ⇒ (Some_c9‹??153, ??152› 3)
          | false ⇒
            match (eqc_i18 c_v882 '4') as __v887 in ??124 with
            | true ⇒ (Some_c9‹??150, ??149› 4)
            | false ⇒
              match (eqc_i18 c_v882 '5') as __v888 in ??125 with
              | true ⇒ (Some_c9‹??147, ??146› 5)
              | false ⇒
                match (eqc_i18 c_v882 '6') as __v889 in ??126 with
                | true ⇒ (Some_c9‹??144, ??143› 6)
                | false ⇒
                  match (eqc_i18 c_v882 '7') as __v890 in ??127 with
                  | true ⇒ (Some_c9‹??141, ??140› 7)
                  | false ⇒
                    match (eqc_i18 c_v882 '8') as __v891 in ??128 with
                    | true ⇒ (Some_c9‹??138, ??137› 8)
                    | false ⇒
                      match (eqc_i18 c_v882 '9') as __v892 in ??129 with
                      | true ⇒ (Some_c9‹??135, ??134› 9)
                      | false ⇒ None_c8‹??132, ??131›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i42 :
  string_d5 → nat → (option_d6‹??163, L› nat)
=
  fn (s_v895 : string_d5) (acc_v896 : nat) ⇒
    match s_v895 as __v897 in ??164 with
    | EmptyString_c6  ⇒ (Some_c9‹??171, ??170› acc_v896)
    | String_c7 c_v898 s_v899 ⇒
      match (digit_of_char_i41 c_v898) as __v900 in ??165 with
      | None_c8  ⇒ None_c8‹??168, ??167›
      | Some_c9 n_v901 ⇒
        (nat_of_string_loop_i42
          s_v899 (addn_i13 (muln_i15 acc_v896 10) n_v901))
      end
    end

program nat_of_string_i43 : string_d5 → (option_d6‹??172, L› nat) =
  fn (s_v903 : string_d5) ⇒ (nat_of_string_loop_i42 s_v903 0)

logical eq_sym_i44 ‹s_s904› :
  ∀ (A_v905 : Type‹s_s904›) →
    ∀ (x_v906 : A_v905) →
      ∀ (y_v907 : A_v905) →
        ∀ (__v908 : x_v906 ≡ y_v907) → y_v907 ≡ x_v906
=
  fn (A_v909 : Type‹s_s904›) (x_v910 : A_v909) (y_v911 : A_v909)
     (e_v912 : ??175) ⇒
    rew [y_v913, __v914 ⇒ y_v913 ≡ x_v910] e_v912 in refl ??176

logical f_equal_i45 ‹s_s915, t_s916› :
  ∀ (A_v917 : Type‹s_s915›) →
    ∀ (B_v918 : Type‹t_s916›) →
      ∀ (f_v919 : A_v917 → B_v918) →
        ∀ (x_v921 : A_v917) →
          ∀ (y_v922 : A_v917) →
            ∀ (__v923 : x_v921 ≡ y_v922) →
              (f_v919 x_v921) ≡ (f_v919 y_v922)
=
  fn (A_v924 : Type‹s_s915›) (B_v925 : Type‹t_s916›)
     (f_v926 : A_v924 → B_v925) (x_v927 : A_v924) (y_v928 : A_v924)
     (e_v929 : ??180) ⇒
    rew [y_v931, p_v932 ⇒ (f_v926 x_v927) ≡ (f_v926 y_v931)] e_v929 in
    refl ??181

logical bool_absurd_i46 : true ≡ false → absurd_d1 =
  fn (e_v934 : true ≡ false) ⇒
    rew [x_v935, __v936 ⇒
      match x_v935 as __v937 in ??184 with
      | true ⇒ unit | false ⇒ absurd_d1
      end] e_v934 in
    ()

logical nat_absurd_i47 : ∀ (n_v938 : nat) → n_v938.+1 ≡ 0 → absurd_d1
=
  fn (n_v940 : nat) (e_v941 : n_v940.+1 ≡ 0) ⇒
    rew [x_v942, __v943 ⇒
      match x_v942 as __v944 in ??186 with
      | O ⇒ absurd_d1 | S __v945 ⇒ unit
      end] e_v941 in
    ()

logical nat_inv_i48 :
  ∀ (n1_v946 : nat) →
    ∀ (n2_v947 : nat) →
      ∀ (e_v948 : n1_v946.+1 ≡ n2_v947.+1) → n1_v946 ≡ n2_v947
=
  fn (n1_v949 : nat) (n2_v950 : nat) (e_v951 : n1_v949.+1 ≡ n2_v950.+1) ⇒
    (f_equal_i45‹??194, ??193› ??192 ??191 pred_i12 ??190 ??189 e_v951)

logical eqn_reflect_i49 :
  ∀ (m_v952 : nat) →
    ∀ (n_v953 : nat) →
      ∀ (__v954 : (eqn_i10 m_v952 n_v953) ≡ true) → m_v952 ≡ n_v953
=
  fn (m_v955 : nat) (n_v956 : nat) ⇒
    match m_v955 as m0_v957 in
      ∀ (__v958 : (eqn_i10 m0_v957 n_v956) ≡ true) → m0_v957 ≡ n_v956 with
    | O ⇒
      match n_v956 as n0_v959 in
        ∀ (__v960 : (eqn_i10 0 n0_v959) ≡ true) → 0 ≡ n0_v959 with
      | O ⇒ fn (__v961 : ??225) ⇒ refl ??226
      | S n_v962 ⇒
        fn (e_v963 : ??218) ⇒
          (absurd_elim_i1‹??224›
            ??223
            (bool_absurd_i46
              (eq_sym_i44‹??222› ??221 ??220 ??219 e_v963)))
      end
    | S m_v964 ⇒
      match n_v956 as n0_v965 in
        ∀ (__v966 : (eqn_i10 m_v964.+1 n0_v965) ≡ true) →
          m_v964.+1 ≡ n0_v965 with
      | O ⇒
        fn (e_v967 : ??209) ⇒
          (absurd_elim_i1‹??215›
            ??214
            (bool_absurd_i46
              (eq_sym_i44‹??213› ??212 ??211 ??210 e_v967)))
      | S n_v968 ⇒
        fn (e_v969 : ??201) ⇒
          (f_equal_i45‹??208, ??207›
            ??206 ??205 fn (x_v970 : ??204) ⇒ x_v970.+1 ??203 ??202
            (eqn_reflect_i49 m_v964 n_v968 e_v969))
      end
    end

inductive word_d8 : U =
| Word_c12 of
    (s_v971 : string_d5) {pf_v972 : (strlen_i21 s_v971) ≡ 5} : word_d8

program contains_i50 : char_d4 → string_d5 → bool =
  fn (c_v975 : char_d4) (s_v976 : string_d5) ⇒
    match s_v976 as __v977 in ??228 with
    | EmptyString_c6  ⇒ false
    | String_c7 c0_v978 s_v979 ⇒
      match (eqc_i18 c_v975 c0_v978) as __v980 in ??229 with
      | true ⇒ true | false ⇒ (contains_i50 c_v975 s_v979)
      end
    end

program string_diff_i51 : string_d5 → string_d5 → string_d5 → string_d5
=
  fn (ans_v984 : string_d5) (s1_v985 : string_d5) (s2_v986 : string_d5) ⇒
    match s1_v985 as __v987 in ??230 with
    | EmptyString_c6  ⇒ EmptyString_c6‹›
    | String_c7 c1_v988 s1_v989 ⇒
      match s2_v986 as __v990 in ??231 with
      | EmptyString_c6  ⇒ EmptyString_c6‹›
      | String_c7 c2_v991 s2_v992 ⇒
        match (eqc_i18 c1_v988 c2_v991) as __v993 in ??232 with
        | true ⇒ (cats_i20 "Y" (string_diff_i51 ans_v984 s1_v989 s2_v992))
        | false ⇒
          match (contains_i50 c2_v991 ans_v984) as __v994 in ??233 with
          | true ⇒
            (cats_i20 "I" (string_diff_i51 ans_v984 s1_v989 s2_v992))
          | false ⇒
            (cats_i20 "N" (string_diff_i51 ans_v984 s1_v989 s2_v992))
          end
        end
      end
    end

logical string_diff_len_i52 :
  ∀ (n_v995 : nat) →
    ∀ (ans_v996 : string_d5) →
      ∀ (s1_v997 : string_d5) →
        ∀ (s2_v998 : string_d5) →
          ∀ (__v999 : n_v995 ≡ (strlen_i21 s1_v997)) →
            ∀ (__v1000 : n_v995 ≡ (strlen_i21 s2_v998)) →
              n_v995 ≡
                (strlen_i21 (string_diff_i51 ans_v996 s1_v997 s2_v998))
=
  fn (n_v1001 : nat) (ans_v1002 : string_d5) (s1_v1003 : string_d5)
     (s2_v1004 : string_d5) ⇒
    match s1_v1003 as s0_v1005 in
      ∀ (__v1006 : n_v1001 ≡ (strlen_i21 s0_v1005)) →
        ∀ (__v1007 : n_v1001 ≡ (strlen_i21 s2_v1004)) →
          n_v1001 ≡
            (strlen_i21 (string_diff_i51 ans_v1002 s0_v1005 s2_v1004)) with
    | EmptyString_c6  ⇒
      match s2_v1004 as s0_v1008 in
        ∀ (__v1009 : n_v1001 ≡ 0) →
          ∀ (__v1010 : n_v1001 ≡ (strlen_i21 s0_v1008)) → n_v1001 ≡ 0 with
      | EmptyString_c6  ⇒
        fn (e1_v1011 : ??298) (__v1012 : ??299) ⇒ e1_v1011
      | String_c7 c2_v1013 s2_v1014 ⇒
        fn (e1_v1015 : ??292) (e2_v1016 : ??293) ⇒
          let e3_v1017 =
            rew [n_v1018, __v1019 ⇒ n_v1018 ≡ 0] e2_v1016 in e1_v1015
          in
          (absurd_elim_i1‹??297› ??296 (nat_absurd_i47 ??295 e3_v1017))
      end
    | String_c7 c1_v1020 s1_v1021 ⇒
      match s2_v1004 as s0_v1022 in
        ∀ (__v1023 :
          n_v1001 ≡ (strlen_i21 (String_c7‹› c1_v1020 s1_v1021))) →
          ∀ (__v1024 : n_v1001 ≡ (strlen_i21 s0_v1022)) →
            n_v1001 ≡
              (strlen_i21
                (string_diff_i51
                  ans_v1002 (String_c7‹› c1_v1020 s1_v1021) s0_v1022)) with
      | EmptyString_c6  ⇒
        fn (e1_v1025 : ??283) (e2_v1026 : ??284) ⇒
          let e3_v1027 =
            rew [n_v1028, __v1029 ⇒ n_v1028 ≡ 0] e1_v1025 in e2_v1026
          in
          (absurd_elim_i1‹??288› ??287 (nat_absurd_i47 ??286 e3_v1027))
      | String_c7 c2_v1030 s2_v1031 ⇒
        fn (e1_v1032 : ??243) (e2_v1033 : ??244) ⇒
          (match n_v1001 as n0_v1034 in
             ∀ (__v1035 : n_v1001 ≡ n0_v1034) →
               n0_v1034 ≡
                 (strlen_i21
                   (string_diff_i51
                     ans_v1002 (String_c7‹› c1_v1020 s1_v1021)
                     (String_c7‹› c2_v1030 s2_v1031))) with
           | O ⇒
             fn (e0_v1036 : ??277) ⇒
               let e3_v1037 =
                 rew [n_v1038, __v1039 ⇒ n_v1038 ≡ 0] e1_v1032 in
                 e0_v1036
               in
               (absurd_elim_i1‹??281›
                 ??280 (nat_absurd_i47 ??279 e3_v1037))
           | S n0_v1040 ⇒
             fn (e0_v1041 : ??247) ⇒
               let e3_v1042 =
                 rew [n1_v1043, __v1044 ⇒
                   n1_v1043 ≡ (strlen_i21 s1_v1021).+1] e0_v1041 in
                 e1_v1032
               in
               let e4_v1045 =
                 rew [n1_v1046, __v1047 ⇒
                   n1_v1046 ≡ (strlen_i21 s2_v1031).+1] e0_v1041 in
                 e2_v1033
               in
               let e5_v1048 = (nat_inv_i48 ??251 ??250 e3_v1042) in
               let e6_v1049 = (nat_inv_i48 ??253 ??252 e4_v1045) in
               match (eqc_i18 c1_v1020 c2_v1030) as b0_v1050 in
                 n0_v1040.+1 ≡
                   (strlen_i21
                     match b0_v1050 as __v1051 in ??254 with
                     | true ⇒
                       (cats_i20
                         "Y" (string_diff_i51 ans_v1002 s1_v1021 s2_v1031))
                     | false ⇒
                       match (contains_i50 c2_v1030 ans_v1002) as __v1052 in
                         ??255 with
                       | true ⇒
                         (cats_i20
                           "I" (string_diff_i51 ans_v1002 s1_v1021 s2_v1031))
                       | false ⇒
                         (cats_i20
                           "N" (string_diff_i51 ans_v1002 s1_v1021 s2_v1031))
                       end
                     end) with
               | true ⇒
                 rew [n1_v1053, __v1054 ⇒ n0_v1040.+1 ≡ n1_v1053.+1]
                   (string_diff_len_i52
                     ??274 ??273 ??272 ??271 e5_v1048 e6_v1049) in
                 refl ??275
               | false ⇒
                 match (contains_i50 c2_v1030 ans_v1002) as b0_v1055 in
                   n0_v1040.+1 ≡
                     (strlen_i21
                       match b0_v1055 as __v1056 in ??257 with
                       | true ⇒
                         (cats_i20
                           "I" (string_diff_i51 ans_v1002 s1_v1021 s2_v1031))
                       | false ⇒
                         (cats_i20
                           "N" (string_diff_i51 ans_v1002 s1_v1021 s2_v1031))
                       end) with
                 | true ⇒
                   rew [n1_v1057, __v1058 ⇒ n0_v1040.+1 ≡ n1_v1057.+1]
                     (string_diff_len_i52
                       ??268 ??267 ??266 ??265 e5_v1048 e6_v1049) in
                   refl ??269
                 | false ⇒
                   rew [n1_v1059, __v1060 ⇒ n0_v1040.+1 ≡ n1_v1059.+1]
                     (string_diff_len_i52
                       ??262 ??261 ??260 ??259 e5_v1048 e6_v1049) in
                   refl ??263
                 end
               end
           end refl ??282)
      end
    end

program wordle_diff_i53 : word_d8 → word_d8 → word_d8 =
  fn (ans_v1063 : word_d8) (guess_v1064 : word_d8) ⇒
    match ans_v1063 as __v1065 in ??300 with
    | Word_c12 ans_v1066 pf1_v1067 ⇒
      match guess_v1064 as __v1068 in ??301 with
      | Word_c12 guess_v1069 pf2_v1070 ⇒
        let {pf1_v1071} = (eq_sym_i44‹??305› ??304 ??303 ??302 pf1_v1067)
        in
        let {pf2_v1072} = (eq_sym_i44‹??309› ??308 ??307 ??306 pf2_v1070)
        in
        let {pf_v1073} =
          (string_diff_len_i52 ??313 ??312 ??311 ??310 pf1_v1071 pf2_v1072)
        in
        (Word_c12‹›
          (string_diff_i51 ans_v1066 ans_v1066 guess_v1069)
          (eq_sym_i44‹??317› ??316 ??315 ??314 pf_v1073))
      end
    end

program eqw_i54 : word_d8 → word_d8 → bool =
  fn (w1_v1076 : word_d8) (w2_v1077 : word_d8) ⇒
    match w1_v1076 as __v1078 in ??318 with
    | Word_c12 s1_v1079 __v1080 ⇒
      match w2_v1077 as __v1081 in ??319 with
      | Word_c12 s2_v1082 __v1083 ⇒ (eqs_i22 s1_v1079 s2_v1082)
      end
    end

logical wordle_loop_i55 : word_d8 → nat → proto =
  fn (ans_v1086 : word_d8) (repeat_v1087 : nat) ⇒
    match repeat_v1087 as __v1088 in ??320 with
    | O ⇒
      ⇑(w_v1089 : word_d8) ⇒ ⇑{__v1090 : w_v1089 ≡ ans_v1086} ⇒ end
    | S repeat_v1091 ⇒
      ⇓(guess_v1092 : word_d8) ⇒
        ⇑(b_v1093 : bool) ⇒
          ⇑{__v1094 : b_v1093 ≡ (eqw_i54 ans_v1086 guess_v1092)} ⇒
            match b_v1093 as __v1095 in ??322 with
            | true ⇒ end
            | false ⇒
              ⇑(w_v1096 : word_d8) ⇒
                ⇑{__v1097 :
                  w_v1096 ≡ (wordle_diff_i53 ans_v1086 guess_v1092)} ⇒
                  (wordle_loop_i55 ans_v1086 repeat_v1091)
            end
    end

logical wordle_i56 : proto =
  ⇑{ans_v1098 : word_d8} ⇒
    ⇑(repeat_v1099 : nat) ⇒ (wordle_loop_i55 ans_v1098 repeat_v1099)

logical loop_ch_i57 : word_d8 → nat → L =
  fn (ans_v1102 : word_d8) (repeat_v1103 : nat) ⇒
    ch⟨(wordle_loop_i55 ans_v1102 repeat_v1103)⟩

logical loop_hc_i58 : word_d8 → nat → L =
  fn (ans_v1106 : word_d8) (repeat_v1107 : nat) ⇒
    hc⟨(wordle_loop_i55 ans_v1106 repeat_v1107)⟩

logical wordle_ch_i59 : L = ch⟨wordle_i56⟩

logical wordle_hc_i60 : L = hc⟨wordle_i56⟩

program read_word_i61 : unit → IO word_d8 =
  fn (__v1109 : unit) ⇒
    let s_v1110 ⇐ (readline_i34 ()) in
    (match (eqn_i10 (strlen_i21 s_v1110) 5) as b0_v1111 in
       {(eqn_i10 (strlen_i21 s_v1110) 5) ≡ b0_v1111} → IO word_d8 with
     | true ⇒
       fn {e_v1113 : ??327} ⇒
         return (Word_c12‹›
                  s_v1110 (eqn_reflect_i49 ??329 ??328 e_v1113))
     | false ⇒
       fn {__v1114 : ??326} ⇒
         let __v1115 ⇐ (print_i35 "please input a word with length of 5\n")
         in (read_word_i61 ())
     end refl ??330)

program player_loop_i62 :
  ∀ {ans_v1116 : word_d8} →
    ∀ (repeat_v1117 : nat) →
      (loop_hc_i58 ans_v1116 repeat_v1117) → IO unit
=
  fn {ans_v1119 : word_d8} (repeat_v1120 : nat)
     (c_v1121 : (loop_hc_i58 ans_v1119 repeat_v1120)) ⇒
    (match repeat_v1120 as repeat0_v1122 in
       (loop_hc_i58 ans_v1119 repeat0_v1122) → IO unit with
     | O ⇒
       fn (c_v1124 : ??341) ⇒
         let __v1125 ⇐ recv c_v1124 in
         match __v1125 as __v1126 in ??344 with
         | ⟨ans_v1127, c_v1128⟩ ⇒
           let __v1129 ⇐ recv c_v1128 in
           match __v1129 as __v1130 in ??343 with
           | ⟨{pf_v1131}, c_v1132⟩ ⇒
             match ans_v1127 as __v1133 in ??342 with
             | Word_c12 s_v1134 __v1135 ⇒
               let __v1136 ⇐
                 (print_i35
                   (cats_i20
                     (cats_i20 "You Lose! The answer is " s_v1134) ".\n"))
               in close c_v1132
             end
           end
         end
     | S repeat_v1137 ⇒
       fn (c_v1138 : ??331) ⇒
         let guess_v1139 ⇐ (read_word_i61 ()) in
         let c_v1140 ⇐ (send c_v1138 guess_v1139) in
         let __v1141 ⇐ recv c_v1140 in
         match __v1141 as __v1142 in ??340 with
         | ⟨b_v1143, c_v1144⟩ ⇒
           let __v1145 ⇐ recv c_v1144 in
           match __v1145 as __v1146 in ??339 with
           | ⟨{pf_v1147}, c_v1148⟩ ⇒
             (match b_v1143 as b0_v1149 in
                hc⟨match b0_v1149 as __v1151 in ??332 with
                     | true ⇒ end
                     | false ⇒
                       ⇑(w_v1152 : word_d8) ⇒
                         ⇑{__v1153 :
                           w_v1152 ≡
                             (wordle_diff_i53 ans_v1119 guess_v1139)} ⇒
                           (wordle_loop_i55 ans_v1119 repeat_v1137)
                     end⟩ ⊸
                  IO unit with
              | true ⇒
                ln (c_v1154 : ??338) ⇒
                  let __v1155 ⇐ (print_i35 "You Win!\n") in close c_v1154
              | false ⇒
                ln (c_v1156 : ??334) ⇒
                  let __v1157 ⇐ recv c_v1156 in
                  match __v1157 as __v1158 in ??337 with
                  | ⟨diff_v1159, c_v1160⟩ ⇒
                    let __v1161 ⇐ recv c_v1160 in
                    match __v1161 as __v1162 in ??336 with
                    | ⟨{pf_v1163}, c_v1164⟩ ⇒
                      match diff_v1159 as __v1165 in ??335 with
                      | Word_c12 s_v1166 __v1167 ⇒
                        let __v1168 ⇐
                          (print_i35
                            (cats_i20
                              (cats_i20
                                (cats_i20
                                  (cats_i20 "Incorrect, hint: " s_v1166)
                                  ". You have ")
                                (string_of_nat_i40 repeat_v1137))
                              " more tries.\n"))
                        in (player_loop_i62 ans_v1119 repeat_v1137 c_v1164)
                      end
                    end
                  end
              end c_v1148)
           end
         end
     end c_v1121)

program player_i63 : wordle_hc_i60 → IO unit =
  fn (c_v1170 : wordle_hc_i60) ⇒
    let __v1171 ⇐ recv c_v1170 in
    match __v1171 as __v1172 in ??346 with
    | ⟨{ans_v1173}, c_v1174⟩ ⇒
      let __v1175 ⇐ recv c_v1174 in
      match __v1175 as __v1176 in ??345 with
      | ⟨repeat_v1177, c_v1178⟩ ⇒
        let __v1179 ⇐ (print_i35 "Wordle Game\n") in
        let __v1180 ⇐ (print_i35 "Please guess a word of length 5.\n") in
        let __v1181 ⇐
          (print_i35
            (cats_i20
              (cats_i20 "You have " (string_of_nat_i40 repeat_v1177))
              " tries.\n"))
        in (player_loop_i62 ans_v1173 repeat_v1177 c_v1178)
      end
    end

inductive subset_d9 ‹s_s1182, r_s1183, t_s1184›
  (A_v1185 : Type‹s_s1182›) (P_v1186 : A_v1185 → Type‹r_s1183›) : Type‹t_s1184›
=
| SPair_c13 of
    ‹s_s1188, r_s1189, t_s1190› (A_v1191 : Type‹s_s1188›)
    (P_v1192 : A_v1191 → Type‹r_s1189›) (m_v1194 : A_v1191)
    {pf_v1195 : (P_v1192 m_v1194)}
    : (subset_d9‹s_s1188, r_s1189, t_s1190› A_v1191 P_v1192)

inductive at_d10
  (A_v1196 : U) (x_v1197 : A_v1196) (n_v1198 : nat) (xs_v1199 : (list_d7‹??347,
                                                                U› 
                                                                A_v1196)) : U
=
| at_O_c14 of
    (A_v1200 : U) (x_v1201 : A_v1200) (n_v1202 : nat)
    (xs_v1203 : (list_d7‹??348, U› A_v1200))
    (xs0_v1204 : (list_d7‹??350, ??349› A_v1200))
    {pf1_v1205 : n_v1202 ≡ 0}
    {pf2_v1206 : xs_v1203 ≡ (cons_c11‹??354, ??353› x_v1201 xs0_v1204)}
    : (at_d10 A_v1200 x_v1201 n_v1202 xs_v1203)
| at_S_c15 of
    (A_v1207 : U) (x_v1208 : A_v1207) (n_v1209 : nat)
    (xs_v1210 : (list_d7‹??356, U› A_v1207)) (n0_v1211 : nat)
    (x0_v1212 : A_v1207) (xs0_v1213 : (list_d7‹??358, ??357› A_v1207))
    (h_v1214 : (at_d10 A_v1207 x_v1208 n0_v1211 xs0_v1213))
    {pf1_v1215 : n_v1209 ≡ n0_v1211.+1}
    {pf2_v1216 : xs_v1210 ≡ (cons_c11‹??362, ??361› x0_v1212 xs0_v1213)}
    : (at_d10 A_v1207 x_v1208 n_v1209 xs_v1210)

logical ltn_inv_i64 :
  ∀ (m_v1217 : nat) →
    ∀ (n_v1218 : nat) →
      ∀ (__v1219 : (ltn_i7 m_v1217.+1 n_v1218.+1) ≡ true) →
        (ltn_i7 m_v1217 n_v1218) ≡ true
= fn (m_v1220 : nat) (n_v1221 : nat) (h_v1222 : ??366) ⇒ h_v1222

program get_at_i65 :
  ∀ {A_v1223 : U} →
    ∀ (n_v1224 : nat) →
      ∀ (xs_v1225 : (list_d7‹??368, ??367› A_v1223)) →
        ∀ {__v1226 :
          (ltn_i7 n_v1224 (llen_i25‹??371, ??370› ??369 xs_v1225)) ≡
            true} →
          (subset_d9‹??373, ??374, U›
            ??377
            fn (x_v1227 : ??375) ⇒ (at_d10 ??376 x_v1227 n_v1224 xs_v1225))
=
  fn {A_v1228 : U} (n_v1229 : nat)
     (xs_v1230 : (list_d7‹??368, ??367› A_v1228)) ⇒
    match xs_v1230 as xs0_v1231 in
      ∀ {__v1232 :
        (ltn_i7 n_v1229 (llen_i25‹??380, ??379› ??378 xs0_v1231)) ≡
          true} →
        (subset_d9‹??387, ??386, ??385›
          ??384
          fn (x_v1233 : ??382) ⇒ (at_d10 ??383 x_v1233 n_v1229 xs0_v1231)) with
    | nil_c10  ⇒
      fn {e_v1234 : ??432} ⇒
        rew [b_v1235, __v1236 ⇒
          match b_v1235 as __v1237 in ??433 with
          | true ⇒
            (subset_d9‹??442, ??441, ??440›
              ??439
              fn (x_v1238 : ??434) ⇒
                (at_d10 ??438 x_v1238 n_v1229 nil_c10‹??437, ??436›))
          | false ⇒ unit
          end] e_v1234 in
        ()
    | cons_c11 x_v1239 xs_v1240 ⇒
      match n_v1229 as n0_v1241 in
        ∀ {__v1242 :
          (ltn_i7 n0_v1241 (llen_i25‹??390, ??389› ??388 xs_v1240).+1) ≡
            true} →
          (subset_d9‹??400, ??399, ??398›
            ??397
            fn (x0_v1243 : ??392) ⇒
              (at_d10
                ??396 x0_v1243 n0_v1241
                (cons_c11‹??395, ??394› x_v1239 xs_v1240))) with
      | O ⇒
        fn {e_v1244 : ??420} ⇒
          (SPair_c13‹??431, ??430, ??429›
            x_v1239 (at_O_c14‹› xs_v1240 refl ??422 refl ??421))
      | S n_v1245 ⇒
        fn {e_v1246 : ??401} ⇒
          match (get_at_i65
                  ??404 n_v1245 xs_v1240 (ltn_inv_i64 ??403 ??402 e_v1246)) as __v1247 in
            ??405 with
          | SPair_c13 x0_v1248 pf_v1249 ⇒
            (SPair_c13‹??419, ??418, ??417›
              x0_v1248
              (at_S_c15‹›
                ??410 ??409 ??408 pf_v1249 refl ??407 refl ??406))
          end
      end
    end

program rand_word_i66 : unit → IO word_d8 =
  fn (__v1251 : unit) ⇒
    let words_v1252 =
      ((cons_c11‹??525, ??524›
         (Word_c12‹› "route" refl ??522)
         (cons_c11‹??521, ??520›
           (Word_c12‹› "crash" refl ??518)
           (cons_c11‹??517, ??516›
             (Word_c12‹› "clown" refl ??514)
             (cons_c11‹??513, ??512›
               (Word_c12‹› "shaky" refl ??510)
               (cons_c11‹??509, ??508›
                 (Word_c12‹› "vegan" refl ??506)
                 (cons_c11‹??505, ??504›
                   (Word_c12‹› "power" refl ??502)
                   (cons_c11‹??501, ??500›
                     (Word_c12‹› "trust" refl ??498)
                     (cons_c11‹??497, ??496›
                       (Word_c12‹› "enjoy" refl ??494)
                       (cons_c11‹??493, ??492›
                         (Word_c12‹› "brain" refl ??490)
                         (cons_c11‹??489, ??488›
                           (Word_c12‹› "adopt" refl ??486)
                           (cons_c11‹??485, ??484›
                             (Word_c12‹› "tower" refl ??482)
                             (cons_c11‹??481, ??480›
                               (Word_c12‹› "shade" refl ??478)
                               (cons_c11‹??477, ??476›
                                 (Word_c12‹› "delay" refl ??474)
                                 (cons_c11‹??473, ??472›
                                   (Word_c12‹› "twist" refl ??470)
                                   (cons_c11‹??469, ??468›
                                     (Word_c12‹› "alert" refl ??466)
                                     (cons_c11‹??465, ??464›
                                       (Word_c12‹› "choke" refl ??462)
                                       (cons_c11‹??461, ??460›
                                         (Word_c12‹› "split" refl ??458)
                                         (cons_c11‹??457, ??456›
                                           (Word_c12‹›
                                             "rhyme" refl ??454)
                                           (cons_c11‹??453, ??452›
                                             (Word_c12‹›
                                               "muddy" refl ??450)
                                             (cons_c11‹??449, ??448›
                                               (Word_c12‹›
                                                 "plant" refl ??446)
                                               nil_c10‹??445, ??444›))))))))))))))))))))
        : (list_d7‹??526, U› ??527))
    in
    let r_v1253 ⇐ rand 0 19 in
    match r_v1253 as __v1254 in ??528 with
    | Between_c4 n_v1255 __v1256 pf_v1257 ⇒
      match (get_at_i65 ??529 n_v1255 words_v1252 pf_v1257) as __v1258 in
        ??530 with
      | SPair_c13 w_v1259 __v1260 ⇒ return w_v1259
      end
    end

program server_loop_i67 :
  ∀ (ans_v1261 : word_d8) →
    ∀ (repeat_v1262 : nat) →
      (loop_ch_i57 ans_v1261 repeat_v1262) → IO unit
=
  fn (ans_v1264 : word_d8) (repeat_v1265 : nat)
     (c_v1266 : (loop_ch_i57 ans_v1264 repeat_v1265)) ⇒
    (match repeat_v1265 as repeat0_v1267 in
       (loop_ch_i57 ans_v1264 repeat0_v1267) → IO unit with
     | O ⇒
       fn (c_v1269 : ??539) ⇒
         let c_v1270 ⇐ (send c_v1269 ans_v1264) in
         let c_v1271 ⇐ (send c_v1270 refl ??540) in close c_v1271
     | S repeat_v1272 ⇒
       fn (c_v1273 : ??531) ⇒
         let __v1274 ⇐ recv c_v1273 in
         match __v1274 as __v1275 in ??538 with
         | ⟨guess_v1276, c_v1277⟩ ⇒
           let b_v1278 = (eqw_i54 ans_v1264 guess_v1276) in
           let c_v1279 ⇐ (send c_v1277 b_v1278) in
           let c_v1280 ⇐ (send c_v1279 refl ??532) in
           (match b_v1278 as b0_v1281 in
              ch⟨match b0_v1281 as __v1283 in ??533 with
                   | true ⇒ end
                   | false ⇒
                     ⇑(w_v1284 : word_d8) ⇒
                       ⇑{__v1285 :
                         w_v1284 ≡ (wordle_diff_i53 ans_v1264 guess_v1276)} ⇒
                         (wordle_loop_i55 ans_v1264 repeat_v1272)
                   end⟩ ⊸
                IO unit with
            | true ⇒ ln (c_v1286 : ??537) ⇒ close c_v1286
            | false ⇒
              ln (c_v1287 : ??535) ⇒
                let c_v1288 ⇐
                  (send c_v1287 (wordle_diff_i53 ans_v1264 guess_v1276))
                in
                let c_v1289 ⇐ (send c_v1288 refl ??536) in
                (server_loop_i67 ans_v1264 repeat_v1272 c_v1289)
            end c_v1280)
         end
     end c_v1266)

program server_i68 : wordle_ch_i59 → IO unit =
  fn (c_v1291 : wordle_ch_i59) ⇒
    let repeat_v1292 = 6 in
    let ans_v1293 ⇐ (rand_word_i66 ()) in
    let c_v1294 ⇐ (send c_v1291 ans_v1293) in
    let c_v1295 ⇐ (send c_v1294 repeat_v1292) in
    (server_loop_i67 ans_v1293 repeat_v1292 c_v1295)

program main_i69 : IO unit =
  let c_v1296 ⇐ fork (c_v1297 : wordle_ch_i59) in (server_i68 c_v1297) in
  let c0_v1298 ⇐
    fork (c0_v1299 :
      ch⟨⇓(__v1300 : wordle_hc_i60) ⇒ ⇑(__v1301 : unit) ⇒ end⟩)
    in
      let __v1302 ⇐ recv c0_v1299 in
      match __v1302 as __v1303 in ??541 with
      | ⟨c_v1304, c0_v1305⟩ ⇒
        let __v1306 ⇐ (player_i63 c_v1304) in
        let c0_v1307 ⇐ (send c0_v1305 ()) in close c0_v1307
      end
  in
  let c0_v1308 ⇐ (send c0_v1298 c_v1296) in
  let __v1309 ⇐ recv c0_v1308 in
  match __v1309 as __v1310 in ??542 with
  | ⟨__v1311, c0_v1312⟩ ⇒ close c0_v1312
  end

trans01 success--------------------------

inductive absurd_d1 : U =


logical absurd_elim_i1 ‹s_s501880› :
  ∀ (A_v501881 : Type‹s_s501880›) → absurd_d1 → A_v501881
=
  fn (A_v501883 : Type‹s_s501880›) (p_v501884 : absurd_d1) ⇒
    match p_v501884 as __v501885 in A_v501883 with
    
    end

inductive order_d2 : U =
| LT_c1 of : order_d2 | GT_c2 of : order_d2 | EQ_c3 of : order_d2

program andb_i2 : bool → bool → bool =
  fn (b1_v501888 : bool) (b2_v501889 : bool) ⇒
    match b1_v501888 as __v501890 in bool with
    | true ⇒ b2_v501889 | false ⇒ false
    end

program orb_i3 : bool → bool → bool =
  fn (b1_v501893 : bool) (b2_v501894 : bool) ⇒
    match b1_v501893 as __v501895 in bool with
    | true ⇒ true | false ⇒ b2_v501894
    end

program notb_i4 : bool → bool =
  fn (b_v501897 : bool) ⇒
    match b_v501897 as __v501898 in bool with
    | true ⇒ false | false ⇒ true
    end

program compareb_i5 : bool → bool → order_d2 =
  fn (b1_v501901 : bool) (b2_v501902 : bool) ⇒
    match b1_v501901 as __v501903 in order_d2 with
    | true ⇒
      match b2_v501902 as __v501904 in order_d2 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v501902 as __v501905 in order_d2 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i6 : nat → nat → bool =
  fn (x_v501908 : nat) (y_v501909 : nat) ⇒
    match x_v501908 as __v501910 in bool with
    | O ⇒ true
    | S x_v501911 ⇒
      match y_v501909 as __v501912 in bool with
      | O ⇒ false | S y_v501913 ⇒ (lten_i6 x_v501911 y_v501913)
      end
    end

program ltn_i7 : nat → nat → bool =
  fn (x_v501916 : nat) (y_v501917 : nat) ⇒ (lten_i6 x_v501916.+1 y_v501917)

program gten_i8 : nat → nat → bool =
  fn (x_v501920 : nat) (y_v501921 : nat) ⇒ (lten_i6 y_v501921 x_v501920)

program gtn_i9 : nat → nat → bool =
  fn (x_v501924 : nat) (y_v501925 : nat) ⇒ (ltn_i7 y_v501925 x_v501924)

program eqn_i10 : nat → nat → bool =
  fn (x_v501928 : nat) (y_v501929 : nat) ⇒
    match x_v501928 as __v501930 in bool with
    | O ⇒
      match y_v501929 as __v501931 in bool with
      | O ⇒ true | S __v501932 ⇒ false
      end
    | S x_v501933 ⇒
      match y_v501929 as __v501934 in bool with
      | O ⇒ false | S y_v501935 ⇒ (eqn_i10 x_v501933 y_v501935)
      end
    end

program comparen_i11 : nat → nat → order_d2 =
  fn (n1_v501938 : nat) (n2_v501939 : nat) ⇒
    match n1_v501938 as __v501940 in order_d2 with
    | O ⇒
      match n2_v501939 as __v501941 in order_d2 with
      | O ⇒ EQ_c3‹› | S __v501942 ⇒ LT_c1‹›
      end
    | S n1_v501943 ⇒
      match n2_v501939 as __v501944 in order_d2 with
      | O ⇒ GT_c2‹›
      | S n2_v501945 ⇒ (comparen_i11 n1_v501943 n2_v501945)
      end
    end

program pred_i12 : nat → nat =
  fn (x_v501947 : nat) ⇒
    match x_v501947 as __v501948 in nat with
    | O ⇒ 0 | S x_v501949 ⇒ x_v501949
    end

program addn_i13 : nat → nat → nat =
  fn (x_v501952 : nat) (y_v501953 : nat) ⇒
    match x_v501952 as __v501954 in nat with
    | O ⇒ y_v501953 | S x_v501955 ⇒ (addn_i13 x_v501955 y_v501953).+1
    end

program subn_i14 : nat → nat → nat =
  fn (x_v501958 : nat) (y_v501959 : nat) ⇒
    match y_v501959 as __v501960 in nat with
    | O ⇒ x_v501958
    | S y_v501961 ⇒ (subn_i14 (pred_i12 x_v501958) y_v501961)
    end

program muln_i15 : nat → nat → nat =
  fn (x_v501964 : nat) (y_v501965 : nat) ⇒
    match x_v501964 as __v501966 in nat with
    | O ⇒ 0
    | S x_v501967 ⇒ (addn_i13 y_v501965 (muln_i15 x_v501967 y_v501965))
    end

program divn_i16 : nat → nat → nat =
  fn (x_v501970 : nat) (y_v501971 : nat) ⇒
    match (ltn_i7 x_v501970 y_v501971) as __v501972 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i16 (subn_i14 x_v501970 y_v501971) y_v501971).+1
    end

program modn_i17 : nat → nat → nat =
  fn (x_v501975 : nat) (y_v501976 : nat) ⇒
    (subn_i14 x_v501975 (muln_i15 (divn_i16 x_v501975 y_v501976) y_v501976))

inductive between_d3 (lower_v501977 : nat) (upper_v501978 : nat) : L =
| Between_c4 of
    (lower_v501979 : nat) (upper_v501980 : nat) (n_v501981 : nat)
    {pf1_v501982 : (lten_i6 lower_v501979 n_v501981) ≡ true}
    {pf2_v501983 : (lten_i6 n_v501981 upper_v501980) ≡ true}
    : (between_d3 lower_v501979 upper_v501980)

inductive char_d4 : U =
| Char_c5 of (n_v501984 : nat) : char_d4

program eqc_i18 : char_d4 → char_d4 → bool =
  fn (c1_v501987 : char_d4) (c2_v501988 : char_d4) ⇒
    match c1_v501987 as __v501989 in bool with
    | Char_c5 n1_v501990 ⇒
      match c2_v501988 as __v501991 in bool with
      | Char_c5 n2_v501992 ⇒ (eqn_i10 n1_v501990 n2_v501992)
      end
    end

program comparec_i19 : char_d4 → char_d4 → order_d2 =
  fn (c1_v501995 : char_d4) (c2_v501996 : char_d4) ⇒
    match c1_v501995 as __v501997 in order_d2 with
    | Char_c5 n1_v501998 ⇒
      match c2_v501996 as __v501999 in order_d2 with
      | Char_c5 n2_v502000 ⇒ (comparen_i11 n1_v501998 n2_v502000)
      end
    end

inductive string_d5 : U =
| EmptyString_c6 of : string_d5
| String_c7 of (c_v502001 : char_d4) (s_v502002 : string_d5) : string_d5

program cats_i20 : string_d5 → string_d5 → string_d5 =
  fn (s1_v502005 : string_d5) (s2_v502006 : string_d5) ⇒
    match s1_v502005 as __v502007 in string_d5 with
    | EmptyString_c6  ⇒ s2_v502006
    | String_c7 c_v502008 s1_v502009 ⇒
      (String_c7‹› c_v502008 (cats_i20 s1_v502009 s2_v502006))
    end

program strlen_i21 : string_d5 → nat =
  fn (s_v502011 : string_d5) ⇒
    match s_v502011 as __v502012 in nat with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v502013 s_v502014 ⇒ (strlen_i21 s_v502014).+1
    end

program eqs_i22 : string_d5 → string_d5 → bool =
  fn (s1_v502017 : string_d5) (s2_v502018 : string_d5) ⇒
    match s1_v502017 as __v502019 in bool with
    | EmptyString_c6  ⇒
      match s2_v502018 as __v502020 in bool with
      | EmptyString_c6  ⇒ true | String_c7 __v502021 __v502022 ⇒ false
      end
    | String_c7 c1_v502023 s1_v502024 ⇒
      match s2_v502018 as __v502025 in bool with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v502026 s2_v502027 ⇒
        (andb_i2
          (eqc_i18 c1_v502023 c2_v502026) (eqs_i22 s1_v502024 s2_v502027))
      end
    end

program compares_i23 : string_d5 → string_d5 → order_d2 =
  fn (s1_v502030 : string_d5) (s2_v502031 : string_d5) ⇒
    match s1_v502030 as __v502032 in order_d2 with
    | EmptyString_c6  ⇒
      match s2_v502031 as __v502033 in order_d2 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v502034 __v502035 ⇒ LT_c1‹›
      end
    | String_c7 c1_v502036 s1_v502037 ⇒
      match s2_v502031 as __v502038 in order_d2 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v502039 s2_v502040 ⇒
        match (comparec_i19 c1_v502036 c2_v502039) as __v502041 in
          order_d2 with
        | EQ_c3  ⇒ (compares_i23 s1_v502037 s2_v502040)
        | LT_c1  ⇒ LT_c1‹› | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d6 ‹s_s502042, t_s502043›
  (A_v502044 : Type‹s_s502042›) : Type‹t_s502043›
=
| None_c8 of
    ‹s_s502045, t_s502046› (A_v502047 : Type‹s_s502045›)
    : (option_d6‹s_s502045, t_s502046› A_v502047)
| Some_c9 of
    ‹s_s502048, t_s502049› (A_v502050 : Type‹s_s502048›)
    (x_v502051 : A_v502050) : (option_d6‹s_s502048, t_s502049› A_v502050)

program and_then_i24 ‹s_s502052, r_s502053, t_s502054› :
  ∀ {A_v502055 : Type‹s_s502052›} →
    ∀ {B_v502056 : Type‹r_s502053›} →
      (option_d6‹s_s502052, t_s502054› A_v502055) →
        A_v502055 → (option_d6‹r_s502053, t_s502054› B_v502056) ⊸
          (option_d6‹r_s502053, t_s502054› B_v502056)
=
  fn {A_v502060 : Type‹s_s502052›} {B_v502061 : Type‹r_s502053›}
     (opt_v502062 : (option_d6‹s_s502052, t_s502054› A_v502060)) ⇒
    ln (f_v502063 : A_v502060 →
                      (option_d6‹r_s502053, t_s502054› B_v502061)) ⇒
      match opt_v502062 as __v502065 in
        (option_d6‹r_s502053, t_s502054› B_v502061) with
      | None_c8  ⇒ None_c8‹r_s502053, t_s502054›
      | Some_c9 x_v502066 ⇒ (f_v502063 x_v502066)
      end

inductive list_d7 ‹s_s502067, t_s502068›
  (A_v502069 : Type‹s_s502067›) : Type‹t_s502068›
=
| nil_c10 of
    ‹s_s502070, t_s502071› (A_v502072 : Type‹s_s502070›)
    : (list_d7‹s_s502070, t_s502071› A_v502072)
| cons_c11 of
    ‹s_s502073, t_s502074› (A_v502075 : Type‹s_s502073›)
    (hd_v502076 : A_v502075)
    (tl_v502077 : (list_d7‹s_s502073, t_s502074› A_v502075))
    : (list_d7‹s_s502073, t_s502074› A_v502075)

logical llen_i25 ‹s_s502078, t_s502079› :
  ∀ (A_v502080 : Type‹s_s502078›) →
    (list_d7‹s_s502078, t_s502079› A_v502080) → nat
=
  fn (A_v502082 : Type‹s_s502078›)
     (xs_v502083 : (list_d7‹s_s502078, t_s502079› A_v502082)) ⇒
    match xs_v502083 as __v502084 in nat with
    | nil_c10  ⇒ 0
    | cons_c11 x_v502085 xs_v502086 ⇒
      (llen_i25‹s_s502078, t_s502079› A_v502082 xs_v502086).+1
    end

program len_i26 ‹s_s502087, t_s502088› :
  ∀ {A_v502089 : Type‹s_s502087›} →
    (list_d7‹s_s502087, t_s502088› A_v502089) →
      nat ⊗ (list_d7‹s_s502087, t_s502088› A_v502089)
=
  fn {A_v502092 : Type‹s_s502087›}
     (xs_v502093 : (list_d7‹s_s502087, t_s502088› A_v502092)) ⇒
    match xs_v502093 as __v502094 in
      nat ⊗ (list_d7‹s_s502087, t_s502088› A_v502092) with
    | nil_c10  ⇒ ⟨0, nil_c10‹s_s502087, t_s502088›⟩
    | cons_c11 x_v502096 xs_v502097 ⇒
      match (len_i26‹s_s502087, t_s502088› A_v502092 xs_v502097) as __v502098 in
        nat ⊗ (list_d7‹s_s502087, t_s502088› A_v502092) with
      | ⟨n_v502100, xs_v502101⟩ ⇒
        ⟨n_v502100.+1, (cons_c11‹s_s502087, t_s502088›
                           x_v502096 xs_v502101)⟩
      end
    end

program append_i27 ‹s_s502102, t_s502103› :
  ∀ {A_v502104 : Type‹s_s502102›} →
    (list_d7‹s_s502102, t_s502103› A_v502104) →
      (list_d7‹s_s502102, t_s502103› A_v502104) ⊸
        (list_d7‹s_s502102, t_s502103› A_v502104)
=
  fn {A_v502107 : Type‹s_s502102›}
     (xs_v502108 : (list_d7‹s_s502102, t_s502103› A_v502107)) ⇒
    ln (ys_v502109 : (list_d7‹s_s502102, t_s502103› A_v502107)) ⇒
      match xs_v502108 as __v502110 in
        (list_d7‹s_s502102, t_s502103› A_v502107) with
      | nil_c10  ⇒ ys_v502109
      | cons_c11 x_v502111 xs_v502112 ⇒
        (cons_c11‹s_s502102, t_s502103›
          x_v502111
          (append_i27‹s_s502102, t_s502103›
            A_v502107 xs_v502112 ys_v502109))
      end

logical stdin_rec_i28 : unit → proto =
  fn (__v502114 : unit) ⇒
    ⇑(b_v502115 : bool) ⇒
      match b_v502115 as __v502116 in proto with
      | true ⇒ ⇓(__v502117 : string_d5) ⇒ (stdin_rec_i28 ())
      | false ⇒ end
      end

logical stdout_rec_i29 : unit → proto =
  fn (__v502119 : unit) ⇒
    ⇑(b_v502120 : bool) ⇒
      match b_v502120 as __v502121 in proto with
      | true ⇒ ⇑(__v502122 : string_d5) ⇒ (stdout_rec_i29 ())
      | false ⇒ end
      end

logical stderr_rec_i30 : unit → proto =
  fn (__v502124 : unit) ⇒
    ⇑(b_v502125 : bool) ⇒
      match b_v502125 as __v502126 in proto with
      | true ⇒ ⇑(__v502127 : string_d5) ⇒ (stderr_rec_i30 ())
      | false ⇒ end
      end

logical stdin_t_i31 : proto = (stdin_rec_i28 ())

logical stdout_t_i32 : proto = (stdout_rec_i29 ())

logical stderr_t_i33 : proto = (stderr_rec_i30 ())

program readline_i34 : unit → IO string_d5 =
  fn (__v502129 : unit) ⇒
    let ch_v502130 ⇐ open stdin in
    let ch_v502131 ⇐ (send ch_v502130 true) in
    let __v502132 ⇐ recv ch_v502131 in
    match __v502132 as __v502133 in IO string_d5 with
    | ⟨s_v502134, ch_v502135⟩ ⇒
      let ch_v502136 ⇐ (send ch_v502135 false) in
      let __v502137 ⇐ close ch_v502136 in return s_v502134
    end

program print_i35 : string_d5 → IO unit =
  fn (s_v502139 : string_d5) ⇒
    let ch_v502140 ⇐ open stdout in
    let ch_v502141 ⇐ (send ch_v502140 true) in
    let ch_v502142 ⇐ (send ch_v502141 s_v502139) in
    let ch_v502143 ⇐ (send ch_v502142 false) in close ch_v502143

program prerr_i36 : string_d5 → IO unit =
  fn (s_v502145 : string_d5) ⇒
    let ch_v502146 ⇐ open stderr in
    let ch_v502147 ⇐ (send ch_v502146 true) in
    let ch_v502148 ⇐ (send ch_v502147 s_v502145) in
    let ch_v502149 ⇐ (send ch_v502148 false) in close ch_v502149

program digits_i37 : (list_d7‹U, U› string_d5) =
  (cons_c11‹U, U›
    "0"
    (cons_c11‹U, U›
      "1"
      (cons_c11‹U, U›
        "2"
        (cons_c11‹U, U›
          "3"
          (cons_c11‹U, U›
            "4"
            (cons_c11‹U, U›
              "5"
              (cons_c11‹U, U›
                "6"
                (cons_c11‹U, U›
                  "7"
                  (cons_c11‹U, U›
                    "8" (cons_c11‹U, U› "9" nil_c10‹U, U›))))))))))

program get_at_i38 :
  ∀ {A_v502150 : U} →
    nat → (list_d7‹U, U› A_v502150) → A_v502150 → A_v502150
=
  fn {A_v502154 : U} (n_v502155 : nat)
     (xs_v502156 : (list_d7‹U, U› A_v502154)) (a_v502157 : A_v502154) ⇒
    match n_v502155 as __v502158 in A_v502154 with
    | O ⇒
      match xs_v502156 as __v502159 in A_v502154 with
      | nil_c10  ⇒ a_v502157 | cons_c11 x_v502160 __v502161 ⇒ x_v502160
      end
    | S n_v502162 ⇒
      match xs_v502156 as __v502163 in A_v502154 with
      | nil_c10  ⇒ a_v502157
      | cons_c11 __v502164 xs_v502165 ⇒
        (get_at_i38 A_v502154 n_v502162 xs_v502165 a_v502157)
      end
    end

program string_of_digit_i39 : nat → string_d5 =
  fn (n_v502167 : nat) ⇒
    (get_at_i38 string_d5 n_v502167 digits_i37 EmptyString_c6‹›)

program string_of_nat_i40 : nat → string_d5 =
  fn (n_v502169 : nat) ⇒
    let s_v502170 = (string_of_digit_i39 (modn_i17 n_v502169 10)) in
    let n_v502171 = (divn_i16 n_v502169 10) in
    match (ltn_i7 0 n_v502171) as __v502172 in string_d5 with
    | true ⇒ (cats_i20 (string_of_nat_i40 n_v502171) s_v502170)
    | false ⇒ s_v502170
    end

program digit_of_char_i41 : char_d4 → (option_d6‹U, L› nat) =
  fn (c_v502174 : char_d4) ⇒
    match (eqc_i18 c_v502174 '0') as __v502175 in
      (option_d6‹U, L› nat) with
    | true ⇒ (Some_c9‹U, L› 0)
    | false ⇒
      match (eqc_i18 c_v502174 '1') as __v502176 in
        (option_d6‹U, L› nat) with
      | true ⇒ (Some_c9‹U, L› 1)
      | false ⇒
        match (eqc_i18 c_v502174 '2') as __v502177 in
          (option_d6‹U, L› nat) with
        | true ⇒ (Some_c9‹U, L› 2)
        | false ⇒
          match (eqc_i18 c_v502174 '3') as __v502178 in
            (option_d6‹U, L› nat) with
          | true ⇒ (Some_c9‹U, L› 3)
          | false ⇒
            match (eqc_i18 c_v502174 '4') as __v502179 in
              (option_d6‹U, L› nat) with
            | true ⇒ (Some_c9‹U, L› 4)
            | false ⇒
              match (eqc_i18 c_v502174 '5') as __v502180 in
                (option_d6‹U, L› nat) with
              | true ⇒ (Some_c9‹U, L› 5)
              | false ⇒
                match (eqc_i18 c_v502174 '6') as __v502181 in
                  (option_d6‹U, L› nat) with
                | true ⇒ (Some_c9‹U, L› 6)
                | false ⇒
                  match (eqc_i18 c_v502174 '7') as __v502182 in
                    (option_d6‹U, L› nat) with
                  | true ⇒ (Some_c9‹U, L› 7)
                  | false ⇒
                    match (eqc_i18 c_v502174 '8') as __v502183 in
                      (option_d6‹U, L› nat) with
                    | true ⇒ (Some_c9‹U, L› 8)
                    | false ⇒
                      match (eqc_i18 c_v502174 '9') as __v502184 in
                        (option_d6‹U, L› nat) with
                      | true ⇒ (Some_c9‹U, L› 9)
                      | false ⇒ None_c8‹U, L›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i42 :
  string_d5 → nat → (option_d6‹U, L› nat)
=
  fn (s_v502187 : string_d5) (acc_v502188 : nat) ⇒
    match s_v502187 as __v502189 in (option_d6‹U, L› nat) with
    | EmptyString_c6  ⇒ (Some_c9‹U, L› acc_v502188)
    | String_c7 c_v502190 s_v502191 ⇒
      match (digit_of_char_i41 c_v502190) as __v502192 in
        (option_d6‹U, L› nat) with
      | None_c8  ⇒ None_c8‹U, L›
      | Some_c9 n_v502193 ⇒
        (nat_of_string_loop_i42
          s_v502191 (addn_i13 (muln_i15 acc_v502188 10) n_v502193))
      end
    end

program nat_of_string_i43 : string_d5 → (option_d6‹U, L› nat) =
  fn (s_v502195 : string_d5) ⇒ (nat_of_string_loop_i42 s_v502195 0)

logical eq_sym_i44 ‹s_s502196› :
  ∀ (A_v502197 : Type‹s_s502196›) →
    ∀ (x_v502198 : A_v502197) →
      ∀ (y_v502199 : A_v502197) →
        x_v502198 ≡ y_v502199 → y_v502199 ≡ x_v502198
=
  fn (A_v502201 : Type‹s_s502196›) (x_v502202 : A_v502201)
     (y_v502203 : A_v502201) (e_v502204 : x_v502202 ≡ y_v502203) ⇒
    rew [y_v502205, __v502206 ⇒ y_v502205 ≡ x_v502202] e_v502204 in
    refl x_v502202

logical f_equal_i45 ‹s_s502207, t_s502208› :
  ∀ (A_v502209 : Type‹s_s502207›) →
    ∀ (B_v502210 : Type‹t_s502208›) →
      ∀ (f_v502211 : A_v502209 → B_v502210) →
        ∀ (x_v502213 : A_v502209) →
          ∀ (y_v502214 : A_v502209) →
            x_v502213 ≡ y_v502214 →
              (f_v502211 x_v502213) ≡ (f_v502211 y_v502214)
=
  fn (A_v502216 : Type‹s_s502207›) (B_v502217 : Type‹t_s502208›)
     (f_v502218 : A_v502216 → B_v502217) (x_v502219 : A_v502216)
     (y_v502220 : A_v502216) (e_v502221 : x_v502219 ≡ y_v502220) ⇒
    rew [y_v502223, p_v502224 ⇒
      (f_v502218 x_v502219) ≡ (f_v502218 y_v502223)] e_v502221 in
    refl (f_v502218 x_v502219)

logical bool_absurd_i46 : true ≡ false → absurd_d1 =
  fn (e_v502226 : true ≡ false) ⇒
    rew [x_v502227, __v502228 ⇒
      match x_v502227 as __v502229 in U with
      | true ⇒ unit | false ⇒ absurd_d1
      end] e_v502226 in
    ()

logical nat_absurd_i47 :
  ∀ (n_v502230 : nat) → n_v502230.+1 ≡ 0 → absurd_d1
=
  fn (n_v502232 : nat) (e_v502233 : n_v502232.+1 ≡ 0) ⇒
    rew [x_v502234, __v502235 ⇒
      match x_v502234 as __v502236 in U with
      | O ⇒ absurd_d1 | S __v502237 ⇒ unit
      end] e_v502233 in
    ()

logical nat_inv_i48 :
  ∀ (n1_v502238 : nat) →
    ∀ (n2_v502239 : nat) →
      n1_v502238.+1 ≡ n2_v502239.+1 → n1_v502238 ≡ n2_v502239
=
  fn (n1_v502241 : nat) (n2_v502242 : nat)
     (e_v502243 : n1_v502241.+1 ≡ n2_v502242.+1) ⇒
    (f_equal_i45‹U, U›
      nat nat pred_i12 n1_v502241.+1 n2_v502242.+1 e_v502243)

logical eqn_reflect_i49 :
  ∀ (m_v502244 : nat) →
    ∀ (n_v502245 : nat) →
      (eqn_i10 m_v502244 n_v502245) ≡ true → m_v502244 ≡ n_v502245
=
  fn (m_v502247 : nat) (n_v502248 : nat) ⇒
    match m_v502247 as m0_v502249 in
      (eqn_i10 m0_v502249 n_v502248) ≡ true → m0_v502249 ≡ n_v502248 with
    | O ⇒
      match n_v502248 as n0_v502251 in
        (eqn_i10 0 n0_v502251) ≡ true → 0 ≡ n0_v502251 with
      | O ⇒ fn (__v502253 : (eqn_i10 0 0) ≡ true) ⇒ refl 0
      | S n_v502254 ⇒
        fn (e_v502255 : (eqn_i10 0 n_v502254.+1) ≡ true) ⇒
          (absurd_elim_i1‹U›
            0 ≡ n_v502254.+1
            (bool_absurd_i46
              (eq_sym_i44‹U›
                bool (eqn_i10 0 n_v502254.+1) true e_v502255)))
      end
    | S m_v502256 ⇒
      match n_v502248 as n0_v502257 in
        (eqn_i10 m_v502256.+1 n0_v502257) ≡ true →
          m_v502256.+1 ≡ n0_v502257 with
      | O ⇒
        fn (e_v502259 : (eqn_i10 m_v502256.+1 0) ≡ true) ⇒
          (absurd_elim_i1‹U›
            m_v502256.+1 ≡ 0
            (bool_absurd_i46
              (eq_sym_i44‹U›
                bool (eqn_i10 m_v502256.+1 0) true e_v502259)))
      | S n_v502260 ⇒
        fn (e_v502261 : (eqn_i10 m_v502256.+1 n_v502260.+1) ≡ true) ⇒
          (f_equal_i45‹U, U›
            nat nat fn (x_v502262 : nat) ⇒ x_v502262.+1 m_v502256 n_v502260
            (eqn_reflect_i49 m_v502256 n_v502260 e_v502261))
      end
    end

inductive word_d8 : U =
| Word_c12 of
    (s_v502263 : string_d5) {pf_v502264 : (strlen_i21 s_v502263) ≡ 5}
    : word_d8

program contains_i50 : char_d4 → string_d5 → bool =
  fn (c_v502267 : char_d4) (s_v502268 : string_d5) ⇒
    match s_v502268 as __v502269 in bool with
    | EmptyString_c6  ⇒ false
    | String_c7 c0_v502270 s_v502271 ⇒
      match (eqc_i18 c_v502267 c0_v502270) as __v502272 in bool with
      | true ⇒ true | false ⇒ (contains_i50 c_v502267 s_v502271)
      end
    end

program string_diff_i51 : string_d5 → string_d5 → string_d5 → string_d5
=
  fn (ans_v502276 : string_d5) (s1_v502277 : string_d5)
     (s2_v502278 : string_d5) ⇒
    match s1_v502277 as __v502279 in string_d5 with
    | EmptyString_c6  ⇒ EmptyString_c6‹›
    | String_c7 c1_v502280 s1_v502281 ⇒
      match s2_v502278 as __v502282 in string_d5 with
      | EmptyString_c6  ⇒ EmptyString_c6‹›
      | String_c7 c2_v502283 s2_v502284 ⇒
        match (eqc_i18 c1_v502280 c2_v502283) as __v502285 in string_d5 with
        | true ⇒
          (cats_i20 "Y" (string_diff_i51 ans_v502276 s1_v502281 s2_v502284))
        | false ⇒
          match (contains_i50 c2_v502283 ans_v502276) as __v502286 in
            string_d5 with
          | true ⇒
            (cats_i20
              "I" (string_diff_i51 ans_v502276 s1_v502281 s2_v502284))
          | false ⇒
            (cats_i20
              "N" (string_diff_i51 ans_v502276 s1_v502281 s2_v502284))
          end
        end
      end
    end

logical string_diff_len_i52 :
  ∀ (n_v502287 : nat) →
    ∀ (ans_v502288 : string_d5) →
      ∀ (s1_v502289 : string_d5) →
        ∀ (s2_v502290 : string_d5) →
          n_v502287 ≡ (strlen_i21 s1_v502289) →
            n_v502287 ≡ (strlen_i21 s2_v502290) →
              n_v502287 ≡
                (strlen_i21
                  (string_diff_i51 ans_v502288 s1_v502289 s2_v502290))
=
  fn (n_v502293 : nat) (ans_v502294 : string_d5) (s1_v502295 : string_d5)
     (s2_v502296 : string_d5) ⇒
    match s1_v502295 as s0_v502297 in
      n_v502293 ≡ (strlen_i21 s0_v502297) →
        n_v502293 ≡ (strlen_i21 s2_v502296) →
          n_v502293 ≡
            (strlen_i21 (string_diff_i51 ans_v502294 s0_v502297 s2_v502296)) with
    | EmptyString_c6  ⇒
      match s2_v502296 as s0_v502300 in
        n_v502293 ≡ 0 →
          n_v502293 ≡ (strlen_i21 s0_v502300) → n_v502293 ≡ 0 with
      | EmptyString_c6  ⇒
        fn (e1_v502303 : n_v502293 ≡ 0)
           (__v502304 : n_v502293 ≡ (strlen_i21 EmptyString_c6‹›)) ⇒
          e1_v502303
      | String_c7 c2_v502305 s2_v502306 ⇒
        fn (e1_v502307 : n_v502293 ≡ 0)
           (e2_v502308 : n_v502293 ≡
                           (strlen_i21
                             (String_c7‹› c2_v502305 s2_v502306))) ⇒
          let e3_v502309 =
            rew [n_v502310, __v502311 ⇒ n_v502310 ≡ 0] e2_v502308 in
            e1_v502307
          in
          (absurd_elim_i1‹U›
            n_v502293 ≡ 0
            (nat_absurd_i47
              match s2_v502306 as __v502312 in nat with
              | EmptyString_c6  ⇒ 0
              | String_c7 __v502313 s_v502314 ⇒ (strlen_i21 s_v502314).+1
              end e3_v502309))
      end
    | String_c7 c1_v502315 s1_v502316 ⇒
      match s2_v502296 as s0_v502317 in
        n_v502293 ≡ (strlen_i21 (String_c7‹› c1_v502315 s1_v502316)) →
          n_v502293 ≡ (strlen_i21 s0_v502317) →
            n_v502293 ≡
              (strlen_i21
                (string_diff_i51
                  ans_v502294 (String_c7‹› c1_v502315 s1_v502316)
                  s0_v502317)) with
      | EmptyString_c6  ⇒
        fn (e1_v502320 : n_v502293 ≡
                           (strlen_i21
                             (String_c7‹› c1_v502315 s1_v502316)))
           (e2_v502321 : n_v502293 ≡ (strlen_i21 EmptyString_c6‹›)) ⇒
          let e3_v502322 =
            rew [n_v502323, __v502324 ⇒ n_v502323 ≡ 0] e1_v502320 in
            e2_v502321
          in
          (absurd_elim_i1‹U›
            n_v502293 ≡
              (strlen_i21
                (string_diff_i51
                  ans_v502294 (String_c7‹› c1_v502315 s1_v502316)
                  EmptyString_c6‹›))
            (nat_absurd_i47
              match s1_v502316 as __v502325 in nat with
              | EmptyString_c6  ⇒ 0
              | String_c7 __v502326 s_v502327 ⇒ (strlen_i21 s_v502327).+1
              end e3_v502322))
      | String_c7 c2_v502328 s2_v502329 ⇒
        fn (e1_v502330 : n_v502293 ≡
                           (strlen_i21
                             (String_c7‹› c1_v502315 s1_v502316)))
           (e2_v502331 : n_v502293 ≡
                           (strlen_i21
                             (String_c7‹› c2_v502328 s2_v502329))) ⇒
          (match n_v502293 as n0_v502332 in
             n_v502293 ≡ n0_v502332 →
               n0_v502332 ≡
                 (strlen_i21
                   (string_diff_i51
                     ans_v502294 (String_c7‹› c1_v502315 s1_v502316)
                     (String_c7‹› c2_v502328 s2_v502329))) with
           | O ⇒
             fn (e0_v502334 : n_v502293 ≡ 0) ⇒
               let e3_v502335 =
                 rew [n_v502336, __v502337 ⇒ n_v502336 ≡ 0] e1_v502330 in
                 e0_v502334
               in
               (absurd_elim_i1‹U›
                 0 ≡
                   (strlen_i21
                     (string_diff_i51
                       ans_v502294 (String_c7‹› c1_v502315 s1_v502316)
                       (String_c7‹› c2_v502328 s2_v502329)))
                 (nat_absurd_i47
                   match s1_v502316 as __v502338 in nat with
                   | EmptyString_c6  ⇒ 0
                   | String_c7 __v502339 s_v502340 ⇒
                     (strlen_i21 s_v502340).+1
                   end e3_v502335))
           | S n0_v502341 ⇒
             fn (e0_v502342 : n_v502293 ≡ n0_v502341.+1) ⇒
               let e3_v502343 =
                 rew [n1_v502344, __v502345 ⇒
                   n1_v502344 ≡ (strlen_i21 s1_v502316).+1] e0_v502342 in
                 e1_v502330
               in
               let e4_v502346 =
                 rew [n1_v502347, __v502348 ⇒
                   n1_v502347 ≡ (strlen_i21 s2_v502329).+1] e0_v502342 in
                 e2_v502331
               in
               let e5_v502349 =
                 (nat_inv_i48 n0_v502341 (strlen_i21 s1_v502316) e3_v502343)
               in
               let e6_v502350 =
                 (nat_inv_i48 n0_v502341 (strlen_i21 s2_v502329) e4_v502346)
               in
               match (eqc_i18 c1_v502315 c2_v502328) as b0_v502351 in
                 n0_v502341.+1 ≡
                   (strlen_i21
                     match b0_v502351 as __v502352 in string_d5 with
                     | true ⇒
                       (cats_i20
                         "Y"
                         (string_diff_i51 ans_v502294 s1_v502316 s2_v502329))
                     | false ⇒
                       match (contains_i50 c2_v502328 ans_v502294) as __v502353 in
                         string_d5 with
                       | true ⇒
                         (cats_i20
                           "I"
                           (string_diff_i51
                             ans_v502294 s1_v502316 s2_v502329))
                       | false ⇒
                         (cats_i20
                           "N"
                           (string_diff_i51
                             ans_v502294 s1_v502316 s2_v502329))
                       end
                     end) with
               | true ⇒
                 rew [n1_v502354, __v502355 ⇒
                   n0_v502341.+1 ≡ n1_v502354.+1]
                   (string_diff_len_i52
                     n0_v502341 ans_v502294 s1_v502316 s2_v502329 e5_v502349
                     e6_v502350) in
                 refl n0_v502341.+1
               | false ⇒
                 match (contains_i50 c2_v502328 ans_v502294) as b0_v502356 in
                   n0_v502341.+1 ≡
                     (strlen_i21
                       match b0_v502356 as __v502357 in string_d5 with
                       | true ⇒
                         (cats_i20
                           "I"
                           (string_diff_i51
                             ans_v502294 s1_v502316 s2_v502329))
                       | false ⇒
                         (cats_i20
                           "N"
                           (string_diff_i51
                             ans_v502294 s1_v502316 s2_v502329))
                       end) with
                 | true ⇒
                   rew [n1_v502358, __v502359 ⇒
                     n0_v502341.+1 ≡ n1_v502358.+1]
                     (string_diff_len_i52
                       n0_v502341 ans_v502294 s1_v502316 s2_v502329
                       e5_v502349 e6_v502350) in
                   refl n0_v502341.+1
                 | false ⇒
                   rew [n1_v502360, __v502361 ⇒
                     n0_v502341.+1 ≡ n1_v502360.+1]
                     (string_diff_len_i52
                       n0_v502341 ans_v502294 s1_v502316 s2_v502329
                       e5_v502349 e6_v502350) in
                   refl n0_v502341.+1
                 end
               end
           end refl n_v502293)
      end
    end

program wordle_diff_i53 : word_d8 → word_d8 → word_d8 =
  fn (ans_v502364 : word_d8) (guess_v502365 : word_d8) ⇒
    match ans_v502364 as __v502366 in word_d8 with
    | Word_c12 ans_v502367 pf1_v502368 ⇒
      match guess_v502365 as __v502369 in word_d8 with
      | Word_c12 guess_v502370 pf2_v502371 ⇒
        let {pf1_v502372} =
          (eq_sym_i44‹U› nat (strlen_i21 ans_v502367) 5 pf1_v502368)
        in
        let {pf2_v502373} =
          (eq_sym_i44‹U› nat (strlen_i21 guess_v502370) 5 pf2_v502371)
        in
        let {pf_v502374} =
          (string_diff_len_i52
            5 ans_v502367 ans_v502367 guess_v502370 pf1_v502372 pf2_v502373)
        in
        (Word_c12‹›
          (string_diff_i51 ans_v502367 ans_v502367 guess_v502370)
          (eq_sym_i44‹U›
            nat 5
            (strlen_i21
              (string_diff_i51 ans_v502367 ans_v502367 guess_v502370))
            pf_v502374))
      end
    end

program eqw_i54 : word_d8 → word_d8 → bool =
  fn (w1_v502377 : word_d8) (w2_v502378 : word_d8) ⇒
    match w1_v502377 as __v502379 in bool with
    | Word_c12 s1_v502380 __v502381 ⇒
      match w2_v502378 as __v502382 in bool with
      | Word_c12 s2_v502383 __v502384 ⇒ (eqs_i22 s1_v502380 s2_v502383)
      end
    end

logical wordle_loop_i55 : word_d8 → nat → proto =
  fn (ans_v502387 : word_d8) (repeat_v502388 : nat) ⇒
    match repeat_v502388 as __v502389 in proto with
    | O ⇒
      ⇑(w_v502390 : word_d8) ⇒
        ⇑{__v502391 : w_v502390 ≡ ans_v502387} ⇒ end
    | S repeat_v502392 ⇒
      ⇓(guess_v502393 : word_d8) ⇒
        ⇑(b_v502394 : bool) ⇒
          ⇑{__v502395 :
            b_v502394 ≡ (eqw_i54 ans_v502387 guess_v502393)} ⇒
            match b_v502394 as __v502396 in proto with
            | true ⇒ end
            | false ⇒
              ⇑(w_v502397 : word_d8) ⇒
                ⇑{__v502398 :
                  w_v502397 ≡ (wordle_diff_i53 ans_v502387 guess_v502393)} ⇒
                  (wordle_loop_i55 ans_v502387 repeat_v502392)
            end
    end

logical wordle_i56 : proto =
  ⇑{ans_v502399 : word_d8} ⇒
    ⇑(repeat_v502400 : nat) ⇒
      (wordle_loop_i55 ans_v502399 repeat_v502400)

logical loop_ch_i57 : word_d8 → nat → L =
  fn (ans_v502403 : word_d8) (repeat_v502404 : nat) ⇒
    ch⟨(wordle_loop_i55 ans_v502403 repeat_v502404)⟩

logical loop_hc_i58 : word_d8 → nat → L =
  fn (ans_v502407 : word_d8) (repeat_v502408 : nat) ⇒
    hc⟨(wordle_loop_i55 ans_v502407 repeat_v502408)⟩

logical wordle_ch_i59 : L = ch⟨wordle_i56⟩

logical wordle_hc_i60 : L = hc⟨wordle_i56⟩

program read_word_i61 : unit → IO word_d8 =
  fn (__v502410 : unit) ⇒
    let s_v502411 ⇐ (readline_i34 ()) in
    (match (eqn_i10 (strlen_i21 s_v502411) 5) as b0_v502412 in
       {(eqn_i10 (strlen_i21 s_v502411) 5) ≡ b0_v502412} → IO word_d8 with
     | true ⇒
       fn {e_v502414 : (eqn_i10 (strlen_i21 s_v502411) 5) ≡ true} ⇒
         return (Word_c12‹›
                  s_v502411
                  (eqn_reflect_i49 (strlen_i21 s_v502411) 5 e_v502414))
     | false ⇒
       fn {__v502415 : (eqn_i10 (strlen_i21 s_v502411) 5) ≡ false} ⇒
         let __v502416 ⇐
           (print_i35 "please input a word with length of 5\n")
         in (read_word_i61 ())
     end refl (eqn_i10 (strlen_i21 s_v502411) 5))

program player_loop_i62 :
  ∀ {ans_v502417 : word_d8} →
    ∀ (repeat_v502418 : nat) →
      (loop_hc_i58 ans_v502417 repeat_v502418) → IO unit
=
  fn {ans_v502420 : word_d8} (repeat_v502421 : nat)
     (c_v502422 : (loop_hc_i58 ans_v502420 repeat_v502421)) ⇒
    (match repeat_v502421 as repeat0_v502423 in
       (loop_hc_i58 ans_v502420 repeat0_v502423) → IO unit with
     | O ⇒
       fn (c_v502425 : (loop_hc_i58 ans_v502420 0)) ⇒
         let __v502426 ⇐ recv c_v502425 in
         match __v502426 as __v502427 in IO unit with
         | ⟨ans_v502428, c_v502429⟩ ⇒
           let __v502430 ⇐ recv c_v502429 in
           match __v502430 as __v502431 in IO unit with
           | ⟨{pf_v502432}, c_v502433⟩ ⇒
             match ans_v502428 as __v502434 in IO unit with
             | Word_c12 s_v502435 __v502436 ⇒
               let __v502437 ⇐
                 (print_i35
                   (cats_i20
                     (cats_i20 "You Lose! The answer is " s_v502435) ".\n"))
               in close c_v502433
             end
           end
         end
     | S repeat_v502438 ⇒
       fn (c_v502439 : (loop_hc_i58 ans_v502420 repeat_v502438.+1)) ⇒
         let guess_v502440 ⇐ (read_word_i61 ()) in
         let c_v502441 ⇐ (send c_v502439 guess_v502440) in
         let __v502442 ⇐ recv c_v502441 in
         match __v502442 as __v502443 in IO unit with
         | ⟨b_v502444, c_v502445⟩ ⇒
           let __v502446 ⇐ recv c_v502445 in
           match __v502446 as __v502447 in IO unit with
           | ⟨{pf_v502448}, c_v502449⟩ ⇒
             (match b_v502444 as b0_v502450 in
                hc⟨match b0_v502450 as __v502452 in proto with
                     | true ⇒ end
                     | false ⇒
                       ⇑(w_v502453 : word_d8) ⇒
                         ⇑{__v502454 :
                           w_v502453 ≡
                             (wordle_diff_i53 ans_v502420 guess_v502440)} ⇒
                           (wordle_loop_i55 ans_v502420 repeat_v502438)
                     end⟩ ⊸
                  IO unit with
              | true ⇒
                ln (c_v502455 : hc⟨end⟩) ⇒
                  let __v502456 ⇐ (print_i35 "You Win!\n") in
                  close c_v502455
              | false ⇒
                ln (c_v502457 : hc⟨⇑(w_v502458 : word_d8) ⇒
                                       ⇑{__v502459 :
                                         w_v502458 ≡
                                           (wordle_diff_i53
                                             ans_v502420 guess_v502440)} ⇒
                                         (wordle_loop_i55
                                           ans_v502420 repeat_v502438)⟩) ⇒
                  let __v502460 ⇐ recv c_v502457 in
                  match __v502460 as __v502461 in IO unit with
                  | ⟨diff_v502462, c_v502463⟩ ⇒
                    let __v502464 ⇐ recv c_v502463 in
                    match __v502464 as __v502465 in IO unit with
                    | ⟨{pf_v502466}, c_v502467⟩ ⇒
                      match diff_v502462 as __v502468 in IO unit with
                      | Word_c12 s_v502469 __v502470 ⇒
                        let __v502471 ⇐
                          (print_i35
                            (cats_i20
                              (cats_i20
                                (cats_i20
                                  (cats_i20 "Incorrect, hint: " s_v502469)
                                  ". You have ")
                                (string_of_nat_i40 repeat_v502438))
                              " more tries.\n"))
                        in
                        (player_loop_i62
                          ans_v502420 repeat_v502438 c_v502467)
                      end
                    end
                  end
              end c_v502449)
           end
         end
     end c_v502422)

program player_i63 : wordle_hc_i60 → IO unit =
  fn (c_v502473 : wordle_hc_i60) ⇒
    let __v502474 ⇐ recv c_v502473 in
    match __v502474 as __v502475 in IO unit with
    | ⟨{ans_v502476}, c_v502477⟩ ⇒
      let __v502478 ⇐ recv c_v502477 in
      match __v502478 as __v502479 in IO unit with
      | ⟨repeat_v502480, c_v502481⟩ ⇒
        let __v502482 ⇐ (print_i35 "Wordle Game\n") in
        let __v502483 ⇐ (print_i35 "Please guess a word of length 5.\n") in
        let __v502484 ⇐
          (print_i35
            (cats_i20
              (cats_i20 "You have " (string_of_nat_i40 repeat_v502480))
              " tries.\n"))
        in (player_loop_i62 ans_v502476 repeat_v502480 c_v502481)
      end
    end

inductive subset_d9 ‹s_s502485, r_s502486, t_s502487›
  (A_v502488 : Type‹s_s502485›) (P_v502489 : A_v502488 →
                                                   Type‹r_s502486›) : Type‹t_s502487›
=
| SPair_c13 of
    ‹s_s502491, r_s502492, t_s502493› (A_v502494 : Type‹s_s502491›)
    (P_v502495 : A_v502494 → Type‹r_s502492›) (m_v502497 : A_v502494)
    {pf_v502498 : (P_v502495 m_v502497)}
    : (subset_d9‹s_s502491, r_s502492, t_s502493› A_v502494 P_v502495)

inductive at_d10
  (A_v502499 : U) (x_v502500 : A_v502499) (n_v502501 : nat) (xs_v502502 : 
(list_d7‹U, U› A_v502499)) : U =
| at_O_c14 of
    (A_v502503 : U) (x_v502504 : A_v502503) (n_v502505 : nat)
    (xs_v502506 : (list_d7‹U, U› A_v502503))
    (xs0_v502507 : (list_d7‹U, U› A_v502503))
    {pf1_v502508 : n_v502505 ≡ 0}
    {pf2_v502509 : xs_v502506 ≡ (cons_c11‹U, U› x_v502504 xs0_v502507)}
    : (at_d10 A_v502503 x_v502504 n_v502505 xs_v502506)
| at_S_c15 of
    (A_v502510 : U) (x_v502511 : A_v502510) (n_v502512 : nat)
    (xs_v502513 : (list_d7‹U, U› A_v502510)) (n0_v502514 : nat)
    (x0_v502515 : A_v502510) (xs0_v502516 : (list_d7‹U, U› A_v502510))
    (h_v502517 : (at_d10 A_v502510 x_v502511 n0_v502514 xs0_v502516))
    {pf1_v502518 : n_v502512 ≡ n0_v502514.+1}
    {pf2_v502519 : xs_v502513 ≡ (cons_c11‹U, U› x0_v502515 xs0_v502516)}
    : (at_d10 A_v502510 x_v502511 n_v502512 xs_v502513)

logical ltn_inv_i64 :
  ∀ (m_v502520 : nat) →
    ∀ (n_v502521 : nat) →
      (ltn_i7 m_v502520.+1 n_v502521.+1) ≡ true →
        (ltn_i7 m_v502520 n_v502521) ≡ true
=
  fn (m_v502523 : nat) (n_v502524 : nat)
     (h_v502525 : (ltn_i7 m_v502523.+1 n_v502524.+1) ≡ true) ⇒
    h_v502525

program get_at_i65 :
  ∀ {A_v502526 : U} →
    ∀ (n_v502527 : nat) →
      ∀ (xs_v502528 : (list_d7‹U, U› A_v502526)) →
        {(ltn_i7 n_v502527 (llen_i25‹U, U› A_v502526 xs_v502528)) ≡
           true} →
          (subset_d9‹U, U, U›
            A_v502526
            fn (x_v502530 : A_v502526) ⇒
              (at_d10 A_v502526 x_v502530 n_v502527 xs_v502528))
=
  fn {A_v502531 : U} (n_v502532 : nat)
     (xs_v502533 : (list_d7‹U, U› A_v502531)) ⇒
    match xs_v502533 as xs0_v502534 in
      {(ltn_i7 n_v502532 (llen_i25‹U, U› A_v502531 xs0_v502534)) ≡ true} →
        (subset_d9‹U, U, U›
          A_v502531
          fn (x_v502536 : A_v502531) ⇒
            (at_d10 A_v502531 x_v502536 n_v502532 xs0_v502534)) with
    | nil_c10  ⇒
      fn {e_v502537 : (ltn_i7
                        n_v502532
                        (llen_i25‹U, U› A_v502531 nil_c10‹U, U›)) ≡
                        true} ⇒
        rew [b_v502538, __v502539 ⇒
          match b_v502538 as __v502540 in U with
          | true ⇒
            (subset_d9‹U, U, U›
              A_v502531
              fn (x_v502541 : A_v502531) ⇒
                (at_d10 A_v502531 x_v502541 n_v502532 nil_c10‹U, U›))
          | false ⇒ unit
          end] e_v502537 in
        ()
    | cons_c11 x_v502542 xs_v502543 ⇒
      match n_v502532 as n0_v502544 in
        {(ltn_i7 n0_v502544 (llen_i25‹U, U› A_v502531 xs_v502543).+1) ≡
           true} →
          (subset_d9‹U, U, U›
            A_v502531
            fn (x0_v502546 : A_v502531) ⇒
              (at_d10
                A_v502531 x0_v502546 n0_v502544
                (cons_c11‹U, U› x_v502542 xs_v502543))) with
      | O ⇒
        fn {e_v502547 : (ltn_i7
                          0 (llen_i25‹U, U› A_v502531 xs_v502543).+1) ≡
                          true} ⇒
          (SPair_c13‹U, U, U›
            x_v502542
            (at_O_c14‹›
              xs_v502543 refl 0
              refl (cons_c11‹U, U› x_v502542 xs_v502543)))
      | S n_v502548 ⇒
        fn {e_v502549 : (ltn_i7
                          n_v502548.+1
                          (llen_i25‹U, U› A_v502531 xs_v502543).+1) ≡
                          true} ⇒
          match (get_at_i65
                  A_v502531 n_v502548 xs_v502543
                  (ltn_inv_i64
                    n_v502548 (llen_i25‹U, U› A_v502531 xs_v502543)
                    e_v502549)) as __v502550 in
            (subset_d9‹U, U, U›
              A_v502531
              fn (x0_v502551 : A_v502531) ⇒
                (at_d10
                  A_v502531 x0_v502551 n_v502548.+1
                  (cons_c11‹U, U› x_v502542 xs_v502543))) with
          | SPair_c13 x0_v502552 pf_v502553 ⇒
            (SPair_c13‹U, U, U›
              x0_v502552
              (at_S_c15‹›
                n_v502548 x_v502542 xs_v502543 pf_v502553 refl n_v502548.+1
                refl (cons_c11‹U, U› x_v502542 xs_v502543)))
          end
      end
    end

program rand_word_i66 : unit → IO word_d8 =
  fn (__v502555 : unit) ⇒
    let words_v502556 =
      ((cons_c11‹U, U›
         (Word_c12‹› "route" refl 5)
         (cons_c11‹U, U›
           (Word_c12‹› "crash" refl 5)
           (cons_c11‹U, U›
             (Word_c12‹› "clown" refl 5)
             (cons_c11‹U, U›
               (Word_c12‹› "shaky" refl 5)
               (cons_c11‹U, U›
                 (Word_c12‹› "vegan" refl 5)
                 (cons_c11‹U, U›
                   (Word_c12‹› "power" refl 5)
                   (cons_c11‹U, U›
                     (Word_c12‹› "trust" refl 5)
                     (cons_c11‹U, U›
                       (Word_c12‹› "enjoy" refl 5)
                       (cons_c11‹U, U›
                         (Word_c12‹› "brain" refl 5)
                         (cons_c11‹U, U›
                           (Word_c12‹› "adopt" refl 5)
                           (cons_c11‹U, U›
                             (Word_c12‹› "tower" refl 5)
                             (cons_c11‹U, U›
                               (Word_c12‹› "shade" refl 5)
                               (cons_c11‹U, U›
                                 (Word_c12‹› "delay" refl 5)
                                 (cons_c11‹U, U›
                                   (Word_c12‹› "twist" refl 5)
                                   (cons_c11‹U, U›
                                     (Word_c12‹› "alert" refl 5)
                                     (cons_c11‹U, U›
                                       (Word_c12‹› "choke" refl 5)
                                       (cons_c11‹U, U›
                                         (Word_c12‹› "split" refl 5)
                                         (cons_c11‹U, U›
                                           (Word_c12‹› "rhyme" refl 5)
                                           (cons_c11‹U, U›
                                             (Word_c12‹› "muddy" refl 5)
                                             (cons_c11‹U, U›
                                               (Word_c12‹›
                                                 "plant" refl 5)
                                               nil_c10‹U, U›))))))))))))))))))))
        : (list_d7‹U, U› word_d8))
    in
    let r_v502557 ⇐ rand 0 19 in
    match r_v502557 as __v502558 in IO (word_d8 : U) with
    | Between_c4 n_v502559 __v502560 pf_v502561 ⇒
      match (get_at_i65 word_d8 n_v502559 words_v502556 pf_v502561) as __v502562 in
        IO (word_d8 : U) with
      | SPair_c13 w_v502563 __v502564 ⇒ return w_v502563
      end
    end

program server_loop_i67 :
  ∀ (ans_v502565 : word_d8) →
    ∀ (repeat_v502566 : nat) →
      (loop_ch_i57 ans_v502565 repeat_v502566) → IO unit
=
  fn (ans_v502568 : word_d8) (repeat_v502569 : nat)
     (c_v502570 : (loop_ch_i57 ans_v502568 repeat_v502569)) ⇒
    (match repeat_v502569 as repeat0_v502571 in
       (loop_ch_i57 ans_v502568 repeat0_v502571) → IO unit with
     | O ⇒
       fn (c_v502573 : (loop_ch_i57 ans_v502568 0)) ⇒
         let c_v502574 ⇐ (send c_v502573 ans_v502568) in
         let c_v502575 ⇐ (send c_v502574 refl ans_v502568) in
         close c_v502575
     | S repeat_v502576 ⇒
       fn (c_v502577 : (loop_ch_i57 ans_v502568 repeat_v502576.+1)) ⇒
         let __v502578 ⇐ recv c_v502577 in
         match __v502578 as __v502579 in IO unit with
         | ⟨guess_v502580, c_v502581⟩ ⇒
           let b_v502582 = (eqw_i54 ans_v502568 guess_v502580) in
           let c_v502583 ⇐ (send c_v502581 b_v502582) in
           let c_v502584 ⇐
             (send c_v502583 refl (eqw_i54 ans_v502568 guess_v502580))
           in
           (match b_v502582 as b0_v502585 in
              ch⟨match b0_v502585 as __v502587 in proto with
                   | true ⇒ end
                   | false ⇒
                     ⇑(w_v502588 : word_d8) ⇒
                       ⇑{__v502589 :
                         w_v502588 ≡
                           (wordle_diff_i53 ans_v502568 guess_v502580)} ⇒
                         (wordle_loop_i55 ans_v502568 repeat_v502576)
                   end⟩ ⊸
                IO unit with
            | true ⇒ ln (c_v502590 : ch⟨end⟩) ⇒ close c_v502590
            | false ⇒
              ln (c_v502591 : ch⟨⇑(w_v502592 : word_d8) ⇒
                                     ⇑{__v502593 :
                                       w_v502592 ≡
                                         (wordle_diff_i53
                                           ans_v502568 guess_v502580)} ⇒
                                       (wordle_loop_i55
                                         ans_v502568 repeat_v502576)⟩) ⇒
                let c_v502594 ⇐
                  (send c_v502591
                    (wordle_diff_i53 ans_v502568 guess_v502580))
                in
                let c_v502595 ⇐
                  (send c_v502594
                    refl (wordle_diff_i53 ans_v502568 guess_v502580))
                in (server_loop_i67 ans_v502568 repeat_v502576 c_v502595)
            end c_v502584)
         end
     end c_v502570)

program server_i68 : wordle_ch_i59 → IO unit =
  fn (c_v502597 : wordle_ch_i59) ⇒
    let repeat_v502598 = 6 in
    let ans_v502599 ⇐ (rand_word_i66 ()) in
    let c_v502600 ⇐ (send c_v502597 ans_v502599) in
    let c_v502601 ⇐ (send c_v502600 repeat_v502598) in
    (server_loop_i67 ans_v502599 repeat_v502598 c_v502601)

program main_i69 : IO unit =
  let c_v502602 ⇐
    fork (c_v502603 : wordle_ch_i59) in (server_i68 c_v502603)
  in
  let c0_v502604 ⇐
    fork (c0_v502605 :
      ch⟨⇓(__v502606 : wordle_hc_i60) ⇒ ⇑(__v502607 : unit) ⇒ end⟩)
    in
      let __v502608 ⇐ recv c0_v502605 in
      match __v502608 as __v502609 in IO unit with
      | ⟨c_v502610, c0_v502611⟩ ⇒
        let __v502612 ⇐ (player_i63 c_v502610) in
        let c0_v502613 ⇐ (send c0_v502611 ()) in close c0_v502613
      end
  in
  let c0_v502614 ⇐ (send c0_v502604 c_v502602) in
  let __v502615 ⇐ recv c0_v502614 in
  match __v502615 as __v502616 in IO unit with
  | ⟨__v502617, c0_v502618⟩ ⇒ close c0_v502618
  end

trans1e success--------------------------

data order_d2 =
| LT_c1 of size(0) | GT_c2 of size(0) | EQ_c3 of size(0)

def andb_i2 =
  fn b1_v503868 b2_v503869 ⇒
    match b1_v503868 with
    | true ⇒ b2_v503869 | false ⇒ false
    end

def orb_i3 =
  fn b1_v503870 b2_v503871 ⇒
    match b1_v503870 with
    | true ⇒ true | false ⇒ b2_v503871
    end

def notb_i4 =
  fn b_v503872 ⇒ match b_v503872 with
                   | true ⇒ false | false ⇒ true
                   end

def compareb_i5 =
  fn b1_v503873 b2_v503874 ⇒
    match b1_v503873 with
    | true ⇒ match b2_v503874 with
               | true ⇒ EQ_c3 | false ⇒ GT_c2
               end
    | false ⇒ match b2_v503874 with
                | true ⇒ LT_c1 | false ⇒ EQ_c3
                end
    end

def lten_i6 =
  fn x_v503875 y_v503876 ⇒
    match x_v503875 with
    | O ⇒ true
    | S x_v503877 ⇒
      match y_v503876 with
      | O ⇒ false | S y_v503878 ⇒ ((lten_i6 x_v503877) y_v503878)
      end
    end

def ltn_i7 = fn x_v503879 y_v503880 ⇒ ((lten_i6 x_v503879.+1) y_v503880)

def gten_i8 = fn x_v503881 y_v503882 ⇒ ((lten_i6 y_v503882) x_v503881)

def gtn_i9 = fn x_v503883 y_v503884 ⇒ ((ltn_i7 y_v503884) x_v503883)

def eqn_i10 =
  fn x_v503885 y_v503886 ⇒
    match x_v503885 with
    | O ⇒ match y_v503886 with
            | O ⇒ true | S __v503887 ⇒ false
            end
    | S x_v503888 ⇒
      match y_v503886 with
      | O ⇒ false | S y_v503889 ⇒ ((eqn_i10 x_v503888) y_v503889)
      end
    end

def comparen_i11 =
  fn n1_v503890 n2_v503891 ⇒
    match n1_v503890 with
    | O ⇒ match n2_v503891 with
            | O ⇒ EQ_c3 | S __v503892 ⇒ LT_c1
            end
    | S n1_v503893 ⇒
      match n2_v503891 with
      | O ⇒ GT_c2 | S n2_v503894 ⇒ ((comparen_i11 n1_v503893) n2_v503894)
      end
    end

def pred_i12 =
  fn x_v503895 ⇒
    match x_v503895 with
    | O ⇒ 0 | S x_v503896 ⇒ x_v503896
    end

def addn_i13 =
  fn x_v503897 y_v503898 ⇒
    match x_v503897 with
    | O ⇒ y_v503898 | S x_v503899 ⇒ ((addn_i13 x_v503899) y_v503898).+1
    end

def subn_i14 =
  fn x_v503900 y_v503901 ⇒
    match y_v503901 with
    | O ⇒ x_v503900
    | S y_v503902 ⇒ ((subn_i14 (pred_i12 x_v503900)) y_v503902)
    end

def muln_i15 =
  fn x_v503903 y_v503904 ⇒
    match x_v503903 with
    | O ⇒ 0
    | S x_v503905 ⇒ ((addn_i13 y_v503904) ((muln_i15 x_v503905) y_v503904))
    end

def divn_i16 =
  fn x_v503906 y_v503907 ⇒
    match ((ltn_i7 x_v503906) y_v503907) with
    | true ⇒ 0
    | false ⇒ ((divn_i16 ((subn_i14 x_v503906) y_v503907)) y_v503907).+1
    end

def modn_i17 =
  fn x_v503908 y_v503909 ⇒
    ((subn_i14 x_v503908)
      ((muln_i15 ((divn_i16 x_v503908) y_v503909)) y_v503909))

data between_d3 =
| Between_c4 of size(3)

data char_d4 =
| Char_c5 of size(1)

def eqc_i18 =
  fn c1_v503910 c2_v503911 ⇒
    match c1_v503910 with
    | Char_c5 n1_v503912 ⇒
      match c2_v503911 with
      | Char_c5 n2_v503913 ⇒ ((eqn_i10 n1_v503912) n2_v503913)
      end
    end

def comparec_i19 =
  fn c1_v503914 c2_v503915 ⇒
    match c1_v503914 with
    | Char_c5 n1_v503916 ⇒
      match c2_v503915 with
      | Char_c5 n2_v503917 ⇒ ((comparen_i11 n1_v503916) n2_v503917)
      end
    end

data string_d5 =
| EmptyString_c6 of size(0) | String_c7 of size(2)

def cats_i20 =
  fn s1_v503918 s2_v503919 ⇒
    match s1_v503918 with
    | EmptyString_c6  ⇒ s2_v503919
    | String_c7 c_v503920 s1_v503921 ⇒
      (String_c7 c_v503920 ((cats_i20 s1_v503921) s2_v503919))
    end

def strlen_i21 =
  fn s_v503922 ⇒
    match s_v503922 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v503923 s_v503924 ⇒ (strlen_i21 s_v503924).+1
    end

def eqs_i22 =
  fn s1_v503925 s2_v503926 ⇒
    match s1_v503925 with
    | EmptyString_c6  ⇒
      match s2_v503926 with
      | EmptyString_c6  ⇒ true | String_c7 __v503927 __v503928 ⇒ false
      end
    | String_c7 c1_v503929 s1_v503930 ⇒
      match s2_v503926 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v503931 s2_v503932 ⇒
        ((andb_i2 ((eqc_i18 c1_v503929) c2_v503931))
          ((eqs_i22 s1_v503930) s2_v503932))
      end
    end

def compares_i23 =
  fn s1_v503933 s2_v503934 ⇒
    match s1_v503933 with
    | EmptyString_c6  ⇒
      match s2_v503934 with
      | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v503935 __v503936 ⇒ LT_c1
      end
    | String_c7 c1_v503937 s1_v503938 ⇒
      match s2_v503934 with
      | EmptyString_c6  ⇒ GT_c2
      | String_c7 c2_v503939 s2_v503940 ⇒
        match ((comparec_i19 c1_v503937) c2_v503939) with
        | EQ_c3  ⇒ ((compares_i23 s1_v503938) s2_v503940)
        | LT_c1  ⇒ LT_c1 | GT_c2  ⇒ GT_c2
        end
      end
    end

data optionUU_d14 =
| NoneUU_c22 of size(0) | SomeUU_c23 of size(1)

data optionUL_d13 =
| NoneUL_c20 of size(0) | SomeUL_c21 of size(1)

data optionLU_d12 =
| NoneLU_c18 of size(0)

data optionLL_d11 =
| NoneLL_c16 of size(0) | SomeLL_c17 of size(1)

def and_thenUUU_i79 =
  fn A_v503941 B_v503942 opt_v503943 ⇒
    ln f_v503944 ⇒
      match opt_v503943 with
      | NoneUU_c22  ⇒ NoneUU_c22
      | SomeUU_c23 x_v503945 ⇒ (f_v503944 x_v503945)
      end

def and_thenUUL_i78 =
  fn A_v503946 B_v503947 opt_v503948 ⇒
    ln f_v503949 ⇒
      match opt_v503948 with
      | NoneUL_c20  ⇒ NoneUL_c20
      | SomeUL_c21 x_v503950 ⇒ (f_v503949 x_v503950)
      end

def and_thenULU_i77 =
  fn A_v503951 B_v503952 opt_v503953 ⇒
    ln f_v503954 ⇒
      match opt_v503953 with
      | NoneUU_c22  ⇒ NoneLU_c18
      | SomeUU_c23 x_v503955 ⇒ (f_v503954 x_v503955)
      end

def and_thenULL_i76 =
  fn A_v503956 B_v503957 opt_v503958 ⇒
    ln f_v503959 ⇒
      match opt_v503958 with
      | NoneUL_c20  ⇒ NoneLL_c16
      | SomeUL_c21 x_v503960 ⇒ (f_v503959 x_v503960)
      end

def and_thenLUL_i74 =
  fn A_v503961 B_v503962 opt_v503963 ⇒
    ln f_v503964 ⇒
      match opt_v503963 with
      | NoneLL_c16  ⇒ NoneUL_c20
      | SomeLL_c17 x_v503965 ⇒ (f_v503964 x_v503965)
      end

def and_thenLLL_i72 =
  fn A_v503966 B_v503967 opt_v503968 ⇒
    ln f_v503969 ⇒
      match opt_v503968 with
      | NoneLL_c16  ⇒ NoneLL_c16
      | SomeLL_c17 x_v503970 ⇒ (f_v503969 x_v503970)
      end

data listUU_d18 =
| nilUU_c30 of size(0) | consUU_c31 of size(2)

data listUL_d17 =
| nilUL_c28 of size(0) | consUL_c29 of size(2)

data listLU_d16 =
| nilLU_c26 of size(0)

data listLL_d15 =
| nilLL_c24 of size(0) | consLL_c25 of size(2)

def lenUU_i87 =
  fn A_v503971 xs_v503972 ⇒
    match xs_v503972 with
    | nilUU_c30  ⇒ (0, nilUU_c30)
    | consUU_c31 x_v503973 xs_v503974 ⇒
      match ((lenUU_i87 NULL) xs_v503974) with
      | (n_v503975, xs_v503976) ⇒
        (n_v503975.+1, (consUU_c31 x_v503973 xs_v503976))
      end
    end

def lenUL_i86 =
  fn A_v503977 xs_v503978 ⇒
    match xs_v503978 with
    | nilUL_c28  ⇒ (0, nilUL_c28)
    | consUL_c29 x_v503979 xs_v503980 ⇒
      match ((lenUL_i86 NULL) xs_v503980) with
      | (n_v503981, xs_v503982) ⇒
        (n_v503981.+1, (consUL_c29 x_v503979 xs_v503982))
      end
    end

def lenLL_i84 =
  fn A_v503983 xs_v503984 ⇒
    match xs_v503984 with
    | nilLL_c24  ⇒ (0, nilLL_c24)
    | consLL_c25 x_v503985 xs_v503986 ⇒
      match ((lenLL_i84 NULL) xs_v503986) with
      | (n_v503987, xs_v503988) ⇒
        (n_v503987.+1, (consLL_c25 x_v503985 xs_v503988))
      end
    end

def appendUU_i91 =
  fn A_v503989 xs_v503990 ⇒
    ln ys_v503991 ⇒
      match xs_v503990 with
      | nilUU_c30  ⇒ ys_v503991
      | consUU_c31 x_v503992 xs_v503993 ⇒
        (consUU_c31 x_v503992 (((appendUU_i91 NULL) xs_v503993) ys_v503991))
      end

def appendUL_i90 =
  fn A_v503994 xs_v503995 ⇒
    ln ys_v503996 ⇒
      match xs_v503995 with
      | nilUL_c28  ⇒ ys_v503996
      | consUL_c29 x_v503997 xs_v503998 ⇒
        (consUL_c29 x_v503997 (((appendUL_i90 NULL) xs_v503998) ys_v503996))
      end

def appendLL_i88 =
  fn A_v503999 xs_v504000 ⇒
    ln ys_v504001 ⇒
      match xs_v504000 with
      | nilLL_c24  ⇒ ys_v504001
      | consLL_c25 x_v504002 xs_v504003 ⇒
        (consLL_c25 x_v504002 (((appendLL_i88 NULL) xs_v504003) ys_v504001))
      end

def readline_i34 =
  fn __v504004 ⇒
    let ch_v504005 ⇐ open stdin in
    let ch_v504006 ⇐ (send ch_v504005 true) in
    let __v504007 ⇐ recv ch_v504006 in
    match __v504007 with
    | (s_v504008, ch_v504009) ⇒
      let ch_v504010 ⇐ (send ch_v504009 false) in
      let __v504011 ⇐ close⇑ ch_v504010 in return s_v504008
    end

def print_i35 =
  fn s_v504012 ⇒
    let ch_v504013 ⇐ open stdout in
    let ch_v504014 ⇐ (send ch_v504013 true) in
    let ch_v504015 ⇐ (send ch_v504014 s_v504012) in
    let ch_v504016 ⇐ (send ch_v504015 false) in close⇑ ch_v504016

def prerr_i36 =
  fn s_v504017 ⇒
    let ch_v504018 ⇐ open stderr in
    let ch_v504019 ⇐ (send ch_v504018 true) in
    let ch_v504020 ⇐ (send ch_v504019 s_v504017) in
    let ch_v504021 ⇐ (send ch_v504020 false) in close⇑ ch_v504021

def digits_i37 =
  (consUU_c31
    "0"
    (consUU_c31
      "1"
      (consUU_c31
        "2"
        (consUU_c31
          "3"
          (consUU_c31
            "4"
            (consUU_c31
              "5"
              (consUU_c31
                "6"
                (consUU_c31 "7" (consUU_c31 "8" (consUU_c31 "9" nilUU_c30))))))))))

def get_at_i38 =
  fn A_v504022 n_v504023 xs_v504024 a_v504025 ⇒
    match n_v504023 with
    | O ⇒
      match xs_v504024 with
      | nilUU_c30  ⇒ a_v504025
      | consUU_c31 x_v504026 __v504027 ⇒ x_v504026
      end
    | S n_v504028 ⇒
      match xs_v504024 with
      | nilUU_c30  ⇒ a_v504025
      | consUU_c31 __v504029 xs_v504030 ⇒
        ((((get_at_i38 NULL) n_v504028) xs_v504030) a_v504025)
      end
    end

def string_of_digit_i39 =
  fn n_v504031 ⇒
    ((((get_at_i38 NULL) n_v504031) digits_i37) EmptyString_c6)

def string_of_nat_i40 =
  fn n_v504032 ⇒
    let s_v504033 = (string_of_digit_i39 ((modn_i17 n_v504032) 10)) in
    let n_v504034 = ((divn_i16 n_v504032) 10) in
    match ((ltn_i7 0) n_v504034) with
    | true ⇒ ((cats_i20 (string_of_nat_i40 n_v504034)) s_v504033)
    | false ⇒ s_v504033
    end

def digit_of_char_i41 =
  fn c_v504035 ⇒
    match ((eqc_i18 c_v504035) '0') with
    | true ⇒ (SomeUL_c21 0)
    | false ⇒
      match ((eqc_i18 c_v504035) '1') with
      | true ⇒ (SomeUL_c21 1)
      | false ⇒
        match ((eqc_i18 c_v504035) '2') with
        | true ⇒ (SomeUL_c21 2)
        | false ⇒
          match ((eqc_i18 c_v504035) '3') with
          | true ⇒ (SomeUL_c21 3)
          | false ⇒
            match ((eqc_i18 c_v504035) '4') with
            | true ⇒ (SomeUL_c21 4)
            | false ⇒
              match ((eqc_i18 c_v504035) '5') with
              | true ⇒ (SomeUL_c21 5)
              | false ⇒
                match ((eqc_i18 c_v504035) '6') with
                | true ⇒ (SomeUL_c21 6)
                | false ⇒
                  match ((eqc_i18 c_v504035) '7') with
                  | true ⇒ (SomeUL_c21 7)
                  | false ⇒
                    match ((eqc_i18 c_v504035) '8') with
                    | true ⇒ (SomeUL_c21 8)
                    | false ⇒
                      match ((eqc_i18 c_v504035) '9') with
                      | true ⇒ (SomeUL_c21 9) | false ⇒ NoneUL_c20
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

def nat_of_string_loop_i42 =
  fn s_v504036 acc_v504037 ⇒
    match s_v504036 with
    | EmptyString_c6  ⇒ (SomeUL_c21 acc_v504037)
    | String_c7 c_v504038 s_v504039 ⇒
      match (digit_of_char_i41 c_v504038) with
      | NoneUL_c20  ⇒ NoneUL_c20
      | SomeUL_c21 n_v504040 ⇒
        ((nat_of_string_loop_i42 s_v504039)
          ((addn_i13 ((muln_i15 acc_v504037) 10)) n_v504040))
      end
    end

def nat_of_string_i43 =
  fn s_v504041 ⇒ ((nat_of_string_loop_i42 s_v504041) 0)

data word_d8 =
| Word_c12 of size(2)

def contains_i50 =
  fn c_v504042 s_v504043 ⇒
    match s_v504043 with
    | EmptyString_c6  ⇒ false
    | String_c7 c0_v504044 s_v504045 ⇒
      match ((eqc_i18 c_v504042) c0_v504044) with
      | true ⇒ true | false ⇒ ((contains_i50 c_v504042) s_v504045)
      end
    end

def string_diff_i51 =
  fn ans_v504046 s1_v504047 s2_v504048 ⇒
    match s1_v504047 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c1_v504049 s1_v504050 ⇒
      match s2_v504048 with
      | EmptyString_c6  ⇒ EmptyString_c6
      | String_c7 c2_v504051 s2_v504052 ⇒
        match ((eqc_i18 c1_v504049) c2_v504051) with
        | true ⇒
          ((cats_i20 "Y")
            (((string_diff_i51 ans_v504046) s1_v504050) s2_v504052))
        | false ⇒
          match ((contains_i50 c2_v504051) ans_v504046) with
          | true ⇒
            ((cats_i20 "I")
              (((string_diff_i51 ans_v504046) s1_v504050) s2_v504052))
          | false ⇒
            ((cats_i20 "N")
              (((string_diff_i51 ans_v504046) s1_v504050) s2_v504052))
          end
        end
      end
    end

def wordle_diff_i53 =
  fn ans_v504053 guess_v504054 ⇒
    match ans_v504053 with
    | Word_c12 ans_v504055 pf1_v504056 ⇒
      match guess_v504054 with
      | Word_c12 guess_v504057 pf2_v504058 ⇒
        let pf1_v504059 = NULL in
        let pf2_v504060 = NULL in
        let pf_v504061 = NULL in
        (Word_c12
          (((string_diff_i51 ans_v504055) ans_v504055) guess_v504057) NULL)
      end
    end

def eqw_i54 =
  fn w1_v504062 w2_v504063 ⇒
    match w1_v504062 with
    | Word_c12 s1_v504064 __v504065 ⇒
      match w2_v504063 with
      | Word_c12 s2_v504066 __v504067 ⇒ ((eqs_i22 s1_v504064) s2_v504066)
      end
    end

def read_word_i61 =
  fn __v504068 ⇒
    let s_v504069 ⇐ (readline_i34 ()) in
    (match ((eqn_i10 (strlen_i21 s_v504069)) 5) with
     | true ⇒ fn e_v504070 ⇒ return (Word_c12 s_v504069 NULL)
     | false ⇒
       fn __v504071 ⇒
         let __v504072 ⇐
           (print_i35 "please input a word with length of 5\n")
         in (read_word_i61 ())
     end NULL)

def player_loop_i62 =
  fn ans_v504073 repeat_v504074 c_v504075 ⇒
    (match repeat_v504074 with
     | O ⇒
       fn c_v504076 ⇒
         let __v504077 ⇐ recv c_v504076 in
         match __v504077 with
         | (ans_v504078, c_v504079) ⇒
           let __v504080 ⇐ {recv} c_v504079 in
           match __v504080 with
           | (pf_v504081, c_v504082) ⇒
             match ans_v504078 with
             | Word_c12 s_v504083 __v504084 ⇒
               let __v504085 ⇐
                 (print_i35
                   ((cats_i20
                      ((cats_i20 "You Lose! The answer is ") s_v504083))
                     ".\n"))
               in close⇓ c_v504082
             end
           end
         end
     | S repeat_v504086 ⇒
       fn c_v504087 ⇒
         let guess_v504088 ⇐ (read_word_i61 ()) in
         let c_v504089 ⇐ (send c_v504087 guess_v504088) in
         let __v504090 ⇐ recv c_v504089 in
         match __v504090 with
         | (b_v504091, c_v504092) ⇒
           let __v504093 ⇐ {recv} c_v504092 in
           match __v504093 with
           | (pf_v504094, c_v504095) ⇒
             (match b_v504091 with
              | true ⇒
                ln c_v504096 ⇒
                  let __v504097 ⇐ (print_i35 "You Win!\n") in
                  close⇓ c_v504096
              | false ⇒
                ln c_v504098 ⇒
                  let __v504099 ⇐ recv c_v504098 in
                  match __v504099 with
                  | (diff_v504100, c_v504101) ⇒
                    let __v504102 ⇐ {recv} c_v504101 in
                    match __v504102 with
                    | (pf_v504103, c_v504104) ⇒
                      match diff_v504100 with
                      | Word_c12 s_v504105 __v504106 ⇒
                        let __v504107 ⇐
                          (print_i35
                            ((cats_i20
                               ((cats_i20
                                  ((cats_i20
                                     ((cats_i20 "Incorrect, hint: ")
                                       s_v504105))
                                    ". You have "))
                                 (string_of_nat_i40 repeat_v504086)))
                              " more tries.\n"))
                        in
                        (((player_loop_i62 NULL) repeat_v504086) c_v504104)
                      end
                    end
                  end
              end c_v504095)
           end
         end
     end c_v504075)

def player_i63 =
  fn c_v504108 ⇒
    let __v504109 ⇐ {recv} c_v504108 in
    match __v504109 with
    | (ans_v504110, c_v504111) ⇒
      let __v504112 ⇐ recv c_v504111 in
      match __v504112 with
      | (repeat_v504113, c_v504114) ⇒
        let __v504115 ⇐ (print_i35 "Wordle Game\n") in
        let __v504116 ⇐ (print_i35 "Please guess a word of length 5.\n") in
        let __v504117 ⇐
          (print_i35
            ((cats_i20
               ((cats_i20 "You have ") (string_of_nat_i40 repeat_v504113)))
              " tries.\n"))
        in (((player_loop_i62 NULL) repeat_v504113) c_v504114)
      end
    end

data subsetUUU_d26 =
| SPairUUU_c39 of size(2)

data subsetUUL_d25 =
| SPairUUL_c38 of size(2)

data subsetULU_d24 =
| SPairULU_c37 of size(2)

data subsetULL_d23 =
| SPairULL_c36 of size(2)

data subsetLUL_d21 =
| SPairLUL_c34 of size(2)

data subsetLLL_d19 =
| SPairLLL_c32 of size(2)

data at_d10 =
| at_O_c14 of size(3) | at_S_c15 of size(6)

def get_at_i65 =
  fn A_v504118 n_v504119 xs_v504120 ⇒
    match xs_v504120 with
    | nilUU_c30  ⇒ fn e_v504121 ⇒ ()
    | consUU_c31 x_v504122 xs_v504123 ⇒
      match n_v504119 with
      | O ⇒ fn e_v504124 ⇒ (SPairUUU_c39 x_v504122 NULL)
      | S n_v504125 ⇒
        fn e_v504126 ⇒
          match ((((get_at_i65 NULL) n_v504125) xs_v504123) NULL) with
          | SPairUUU_c39 x0_v504127 pf_v504128 ⇒
            (SPairUUU_c39 x0_v504127 NULL)
          end
      end
    end

def rand_word_i66 =
  fn __v504129 ⇒
    let words_v504130 =
      (consUU_c31
        (Word_c12 "route" NULL)
        (consUU_c31
          (Word_c12 "crash" NULL)
          (consUU_c31
            (Word_c12 "clown" NULL)
            (consUU_c31
              (Word_c12 "shaky" NULL)
              (consUU_c31
                (Word_c12 "vegan" NULL)
                (consUU_c31
                  (Word_c12 "power" NULL)
                  (consUU_c31
                    (Word_c12 "trust" NULL)
                    (consUU_c31
                      (Word_c12 "enjoy" NULL)
                      (consUU_c31
                        (Word_c12 "brain" NULL)
                        (consUU_c31
                          (Word_c12 "adopt" NULL)
                          (consUU_c31
                            (Word_c12 "tower" NULL)
                            (consUU_c31
                              (Word_c12 "shade" NULL)
                              (consUU_c31
                                (Word_c12 "delay" NULL)
                                (consUU_c31
                                  (Word_c12 "twist" NULL)
                                  (consUU_c31
                                    (Word_c12 "alert" NULL)
                                    (consUU_c31
                                      (Word_c12 "choke" NULL)
                                      (consUU_c31
                                        (Word_c12 "split" NULL)
                                        (consUU_c31
                                          (Word_c12 "rhyme" NULL)
                                          (consUU_c31
                                            (Word_c12 "muddy" NULL)
                                            (consUU_c31
                                              (Word_c12 "plant" NULL)
                                              nilUU_c30))))))))))))))))))))
    in
    let r_v504131 ⇐ rand 0 19 in
    match r_v504131 with
    | Between_c4 n_v504132 __v504133 pf_v504134 ⇒
      match ((((get_at_i65 NULL) n_v504132) words_v504130) NULL) with
      | SPairUUU_c39 w_v504135 __v504136 ⇒ return w_v504135
      end
    end

def server_loop_i67 =
  fn ans_v504137 repeat_v504138 c_v504139 ⇒
    (match repeat_v504138 with
     | O ⇒
       fn c_v504140 ⇒
         let c_v504141 ⇐ (send c_v504140 ans_v504137) in
         let c_v504142 ⇐ ({send} c_v504141 NULL) in close⇑ c_v504142
     | S repeat_v504143 ⇒
       fn c_v504144 ⇒
         let __v504145 ⇐ recv c_v504144 in
         match __v504145 with
         | (guess_v504146, c_v504147) ⇒
           let b_v504148 = ((eqw_i54 ans_v504137) guess_v504146) in
           let c_v504149 ⇐ (send c_v504147 b_v504148) in
           let c_v504150 ⇐ ({send} c_v504149 NULL) in
           (match b_v504148 with
            | true ⇒ ln c_v504151 ⇒ close⇑ c_v504151
            | false ⇒
              ln c_v504152 ⇒
                let c_v504153 ⇐
                  (send c_v504152
                    ((wordle_diff_i53 ans_v504137) guess_v504146))
                in
                let c_v504154 ⇐ ({send} c_v504153 NULL) in
                (((server_loop_i67 ans_v504137) repeat_v504143) c_v504154)
            end c_v504150)
         end
     end c_v504139)

def server_i68 =
  fn c_v504155 ⇒
    let repeat_v504156 = 6 in
    let ans_v504157 ⇐ (rand_word_i66 ()) in
    let c_v504158 ⇐ ({send} c_v504155 NULL) in
    let c_v504159 ⇐ (send c_v504158 repeat_v504156) in
    (((server_loop_i67 ans_v504157) repeat_v504156) c_v504159)

main =
  let c_v504160 ⇐ fork c_v504161 in (server_i68 c_v504161) in
  let c0_v504162 ⇐
    fork c0_v504163 in
      let __v504164 ⇐ recv c0_v504163 in
      match __v504164 with
      | (c_v504165, c0_v504166) ⇒
        let __v504167 ⇐ (player_i63 c_v504165) in
        let c0_v504168 ⇐ (send c0_v504166 ()) in close⇑ c0_v504168
      end
  in
  let c0_v504169 ⇐ (send c0_v504162 c_v504160) in
  let __v504170 ⇐ recv c0_v504169 in
  match __v504170 with
  | (__v504171, c0_v504172) ⇒ close⇓ c0_v504172
  end

trans12 success--------------------------

fun andb_i2(b1_v504589, b2_v504590) = if b1_v504589 then
                                        b2_v504590
                                      else
                                        0

val andbclo_i98 =
  fn b1_v504591 b2_v504592 ⇒ andb_i2(b1_v504591, b2_v504592)

fun orb_i3(b1_v504593, b2_v504594) = if b1_v504593 then
                                       1
                                     else
                                       b2_v504594

val orbclo_i99 = fn b1_v504595 b2_v504596 ⇒ orb_i3(b1_v504595, b2_v504596)

fun notb_i4(b_v504597) = if b_v504597 then
                           0
                         else
                           1

val notbclo_i100 = fn b_v504598 ⇒ notb_i4(b_v504598)

fun compareb_i5(b1_v504599, b2_v504600) =
  if b1_v504599 then
    if b2_v504600 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v504600 then
      LT_c1
    else
      EQ_c3

val comparebclo_i101 =
  fn b1_v504601 b2_v504602 ⇒ compareb_i5(b1_v504601, b2_v504602)

fun lten_i6(x_v504603, y_v504604) =
  let __v504605 = x_v504603 in
  if __v504605 then
    let x_v504606 = __v504605.-1 in
    let __v504607 = y_v504604 in
    if __v504607 then
      let y_v504608 = __v504607.-1 in lten_i6(x_v504606, y_v504608)
    else
      0
  else
    1

val ltenclo_i102 = fn x_v504609 y_v504610 ⇒ lten_i6(x_v504609, y_v504610)

fun ltn_i7(x_v504611, y_v504612) = lten_i6(x_v504611.+1, y_v504612)

val ltnclo_i103 = fn x_v504613 y_v504614 ⇒ ltn_i7(x_v504613, y_v504614)

fun gten_i8(x_v504615, y_v504616) = lten_i6(y_v504616, x_v504615)

val gtenclo_i104 = fn x_v504617 y_v504618 ⇒ gten_i8(x_v504617, y_v504618)

fun gtn_i9(x_v504619, y_v504620) = ltn_i7(y_v504620, x_v504619)

val gtnclo_i105 = fn x_v504621 y_v504622 ⇒ gtn_i9(x_v504621, y_v504622)

fun eqn_i10(x_v504623, y_v504624) =
  let __v504625 = x_v504623 in
  if __v504625 then
    let x_v504626 = __v504625.-1 in
    let __v504627 = y_v504624 in
    if __v504627 then
      let y_v504628 = __v504627.-1 in eqn_i10(x_v504626, y_v504628)
    else
      0
  else
    let __v504629 = y_v504624 in
    if __v504629 then
      let __v504630 = __v504629.-1 in 0
    else
      1

val eqnclo_i106 = fn x_v504631 y_v504632 ⇒ eqn_i10(x_v504631, y_v504632)

fun comparen_i11(n1_v504633, n2_v504634) =
  let __v504635 = n1_v504633 in
  if __v504635 then
    let n1_v504636 = __v504635.-1 in
    let __v504637 = n2_v504634 in
    if __v504637 then
      let n2_v504638 = __v504637.-1 in comparen_i11(n1_v504636, n2_v504638)
    else
      GT_c2
  else
    let __v504639 = n2_v504634 in
    if __v504639 then
      let __v504640 = __v504639.-1 in LT_c1
    else
      EQ_c3

val comparenclo_i107 =
  fn n1_v504641 n2_v504642 ⇒ comparen_i11(n1_v504641, n2_v504642)

fun pred_i12(x_v504643) =
  let __v504644 = x_v504643 in
  if __v504644 then
    let x_v504645 = __v504644.-1 in x_v504645
  else
    0

val predclo_i108 = fn x_v504646 ⇒ pred_i12(x_v504646)

fun addn_i13(x_v504647, y_v504648) =
  let __v504649 = x_v504647 in
  if __v504649 then
    let x_v504650 = __v504649.-1 in addn_i13(x_v504650, y_v504648).+1
  else
    y_v504648

val addnclo_i109 = fn x_v504651 y_v504652 ⇒ addn_i13(x_v504651, y_v504652)

fun subn_i14(x_v504653, y_v504654) =
  let __v504655 = y_v504654 in
  if __v504655 then
    let y_v504656 = __v504655.-1 in subn_i14(pred_i12(x_v504653), y_v504656)
  else
    x_v504653

val subnclo_i110 = fn x_v504657 y_v504658 ⇒ subn_i14(x_v504657, y_v504658)

fun muln_i15(x_v504659, y_v504660) =
  let __v504661 = x_v504659 in
  if __v504661 then
    let x_v504662 = __v504661.-1 in
    addn_i13(y_v504660, muln_i15(x_v504662, y_v504660))
  else
    0

val mulnclo_i111 = fn x_v504663 y_v504664 ⇒ muln_i15(x_v504663, y_v504664)

fun divn_i16(x_v504665, y_v504666) =
  if ltn_i7(x_v504665, y_v504666) then
    0
  else
    divn_i16(subn_i14(x_v504665, y_v504666), y_v504666).+1

val divnclo_i112 = fn x_v504667 y_v504668 ⇒ divn_i16(x_v504667, y_v504668)

fun modn_i17(x_v504669, y_v504670) =
  subn_i14(x_v504669, muln_i15(divn_i16(x_v504669, y_v504670), y_v504670))

val modnclo_i113 = fn x_v504671 y_v504672 ⇒ modn_i17(x_v504671, y_v504672)

fun eqc_i18(c1_v504673, c2_v504674) =
  match c1_v504673 with
  | Char_c5 n1_v504675 ⇒
    match c2_v504674 with
    | Char_c5 n2_v504676 ⇒ eqn_i10(n1_v504675, n2_v504676)
    end
  end

val eqcclo_i114 =
  fn c1_v504677 c2_v504678 ⇒ eqc_i18(c1_v504677, c2_v504678)

fun comparec_i19(c1_v504679, c2_v504680) =
  match c1_v504679 with
  | Char_c5 n1_v504681 ⇒
    match c2_v504680 with
    | Char_c5 n2_v504682 ⇒ comparen_i11(n1_v504681, n2_v504682)
    end
  end

val comparecclo_i115 =
  fn c1_v504683 c2_v504684 ⇒ comparec_i19(c1_v504683, c2_v504684)

fun cats_i20(s1_v504685, s2_v504686) =
  match s1_v504685 with
  | EmptyString_c6  ⇒ s2_v504686
  | String_c7 c_v504687 s1_v504688 ⇒
    (String_c7 c_v504687 cats_i20(s1_v504688, s2_v504686))
  end

val catsclo_i116 =
  fn s1_v504689 s2_v504690 ⇒ cats_i20(s1_v504689, s2_v504690)

fun strlen_i21(s_v504691) =
  match s_v504691 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v504692 s_v504693 ⇒ strlen_i21(s_v504693).+1
  end

val strlenclo_i117 = fn s_v504694 ⇒ strlen_i21(s_v504694)

fun eqs_i22(s1_v504695, s2_v504696) =
  match s1_v504695 with
  | EmptyString_c6  ⇒
    match s2_v504696 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v504697 __v504698 ⇒ 0
    end
  | String_c7 c1_v504699 s1_v504700 ⇒
    match s2_v504696 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v504701 s2_v504702 ⇒
      andb_i2(eqc_i18(c1_v504699, c2_v504701),
              eqs_i22(s1_v504700, s2_v504702))
    end
  end

val eqsclo_i118 =
  fn s1_v504703 s2_v504704 ⇒ eqs_i22(s1_v504703, s2_v504704)

fun compares_i23(s1_v504705, s2_v504706) =
  match s1_v504705 with
  | EmptyString_c6  ⇒
    match s2_v504706 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v504707 __v504708 ⇒ LT_c1
    end
  | String_c7 c1_v504709 s1_v504710 ⇒
    match s2_v504706 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v504711 s2_v504712 ⇒
      match comparec_i19(c1_v504709, c2_v504711) with
      | EQ_c3  ⇒ compares_i23(s1_v504710, s2_v504712) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i119 =
  fn s1_v504713 s2_v504714 ⇒ compares_i23(s1_v504713, s2_v504714)

fun and_thenUUU_i79(A_v504715, B_v504716, opt_v504717, f_v504718) =
  match opt_v504717 with
  | NoneUU_c22  ⇒ NoneUU_c22
  | SomeUU_c23 x_v504719 ⇒ (f_v504718) x_v504719
  end

val and_thenUUUclo_i120 =
  fn A_v504720 B_v504721 opt_v504722 ⇒
    ln f_v504723 ⇒
      and_thenUUU_i79(A_v504720, B_v504721, opt_v504722, f_v504723)

fun and_thenUUL_i78(A_v504724, B_v504725, opt_v504726, f_v504727) =
  match opt_v504726 with
  | NoneUL_c20  ⇒ NoneUL_c20
  | SomeUL_c21 x_v504728 ⇒ (f_v504727) x_v504728
  end

val and_thenUULclo_i121 =
  fn A_v504729 B_v504730 opt_v504731 ⇒
    ln f_v504732 ⇒
      and_thenUUL_i78(A_v504729, B_v504730, opt_v504731, f_v504732)

fun and_thenULU_i77(A_v504733, B_v504734, opt_v504735, f_v504736) =
  match opt_v504735 with
  | NoneUU_c22  ⇒ NoneLU_c18
  | SomeUU_c23 x_v504737 ⇒ (f_v504736) x_v504737
  end

val and_thenULUclo_i122 =
  fn A_v504738 B_v504739 opt_v504740 ⇒
    ln f_v504741 ⇒
      and_thenULU_i77(A_v504738, B_v504739, opt_v504740, f_v504741)

fun and_thenULL_i76(A_v504742, B_v504743, opt_v504744, f_v504745) =
  match opt_v504744 with
  | NoneUL_c20  ⇒ NoneLL_c16
  | SomeUL_c21 x_v504746 ⇒ (f_v504745) x_v504746
  end

val and_thenULLclo_i123 =
  fn A_v504747 B_v504748 opt_v504749 ⇒
    ln f_v504750 ⇒
      and_thenULL_i76(A_v504747, B_v504748, opt_v504749, f_v504750)

fun and_thenLUL_i74(A_v504751, B_v504752, opt_v504753, f_v504754) =
  match opt_v504753 with
  | NoneLL_c16  ⇒ NoneUL_c20
  | SomeLL_c17 x_v504755 ⇒ (f_v504754) x_v504755
  end

val and_thenLULclo_i124 =
  fn A_v504756 B_v504757 opt_v504758 ⇒
    ln f_v504759 ⇒
      and_thenLUL_i74(A_v504756, B_v504757, opt_v504758, f_v504759)

fun and_thenLLL_i72(A_v504760, B_v504761, opt_v504762, f_v504763) =
  match opt_v504762 with
  | NoneLL_c16  ⇒ NoneLL_c16
  | SomeLL_c17 x_v504764 ⇒ (f_v504763) x_v504764
  end

val and_thenLLLclo_i125 =
  fn A_v504765 B_v504766 opt_v504767 ⇒
    ln f_v504768 ⇒
      and_thenLLL_i72(A_v504765, B_v504766, opt_v504767, f_v504768)

fun lenUU_i87(A_v504769, xs_v504770) =
  match xs_v504770 with
  | nilUU_c30  ⇒ (0, nilUU_c30)
  | consUU_c31 x_v504771 xs_v504772 ⇒
    match lenUU_i87(NULL, xs_v504772) with
    | (n_v504773, xs_v504774) ⇒
      (n_v504773.+1, (consUU_c31 x_v504771 xs_v504774))
    end
  end

val lenUUclo_i126 =
  fn A_v504775 xs_v504776 ⇒ lenUU_i87(A_v504775, xs_v504776)

fun lenUL_i86(A_v504777, xs_v504778) =
  match xs_v504778 with
  | nilUL_c28  ⇒ (0, nilUL_c28)
  | consUL_c29 x_v504779 xs_v504780 ⇒
    match lenUL_i86(NULL, xs_v504780) with
    | (n_v504781, xs_v504782) ⇒
      (n_v504781.+1, (consUL_c29 x_v504779 xs_v504782))
    end
  end

val lenULclo_i127 =
  fn A_v504783 xs_v504784 ⇒ lenUL_i86(A_v504783, xs_v504784)

fun lenLL_i84(A_v504785, xs_v504786) =
  match xs_v504786 with
  | nilLL_c24  ⇒ (0, nilLL_c24)
  | consLL_c25 x_v504787 xs_v504788 ⇒
    match lenLL_i84(NULL, xs_v504788) with
    | (n_v504789, xs_v504790) ⇒
      (n_v504789.+1, (consLL_c25 x_v504787 xs_v504790))
    end
  end

val lenLLclo_i128 =
  fn A_v504791 xs_v504792 ⇒ lenLL_i84(A_v504791, xs_v504792)

fun appendUU_i91(A_v504793, xs_v504794, ys_v504795) =
  match xs_v504794 with
  | nilUU_c30  ⇒ ys_v504795
  | consUU_c31 x_v504796 xs_v504797 ⇒
    (consUU_c31 x_v504796 appendUU_i91(NULL, xs_v504797, ys_v504795))
  end

val appendUUclo_i129 =
  fn A_v504798 xs_v504799 ⇒
    ln ys_v504800 ⇒ appendUU_i91(A_v504798, xs_v504799, ys_v504800)

fun appendUL_i90(A_v504801, xs_v504802, ys_v504803) =
  match xs_v504802 with
  | nilUL_c28  ⇒ ys_v504803
  | consUL_c29 x_v504804 xs_v504805 ⇒
    (consUL_c29 x_v504804 appendUL_i90(NULL, xs_v504805, ys_v504803))
  end

val appendULclo_i130 =
  fn A_v504806 xs_v504807 ⇒
    ln ys_v504808 ⇒ appendUL_i90(A_v504806, xs_v504807, ys_v504808)

fun appendLL_i88(A_v504809, xs_v504810, ys_v504811) =
  match xs_v504810 with
  | nilLL_c24  ⇒ ys_v504811
  | consLL_c25 x_v504812 xs_v504813 ⇒
    (consLL_c25 x_v504812 appendLL_i88(NULL, xs_v504813, ys_v504811))
  end

val appendLLclo_i131 =
  fn A_v504814 xs_v504815 ⇒
    ln ys_v504816 ⇒ appendLL_i88(A_v504814, xs_v504815, ys_v504816)

fun readline_i34(__v504817) =
  ln __v504818 ⇒
    let ch_v504819 = (ln __v504820 ⇒ open stdin) NULL in
    let ch_v504821 =
      ((fn x_v504822 ⇒ ln __v504823 ⇒ send(ch_v504819, x_v504822)) 1)
        NULL
    in
    let __v504824 = (ln __v504825 ⇒ recv(ch_v504821)) NULL in
    (match __v504824 with
     | (s_v504826, ch_v504827) ⇒
       ln __v504828 ⇒
         let ch_v504829 =
           ((fn x_v504830 ⇒ ln __v504831 ⇒ send(ch_v504827, x_v504830)) 0)
             NULL
         in
         let __v504832 =
           (ln __v504833 ⇒ let __v504834 = ch_v504829 in NULL) NULL
         in (ln __v504835 ⇒ s_v504826) NULL
     end) NULL

val readlineclo_i132 = fn __v504836 ⇒ readline_i34(__v504836)

fun print_i35(s_v504837) =
  ln __v504838 ⇒
    let ch_v504839 = (ln __v504840 ⇒ open stdout) NULL in
    let ch_v504841 =
      ((fn x_v504842 ⇒ ln __v504843 ⇒ send(ch_v504839, x_v504842)) 1)
        NULL
    in
    let ch_v504844 =
      ((fn x_v504845 ⇒ ln __v504846 ⇒ send(ch_v504841, x_v504845))
         s_v504837)
        NULL
    in
    let ch_v504847 =
      ((fn x_v504848 ⇒ ln __v504849 ⇒ send(ch_v504844, x_v504848)) 0)
        NULL
    in (ln __v504850 ⇒ let __v504851 = ch_v504847 in NULL) NULL

val printclo_i133 = fn s_v504852 ⇒ print_i35(s_v504852)

fun prerr_i36(s_v504853) =
  ln __v504854 ⇒
    let ch_v504855 = (ln __v504856 ⇒ open stderr) NULL in
    let ch_v504857 =
      ((fn x_v504858 ⇒ ln __v504859 ⇒ send(ch_v504855, x_v504858)) 1)
        NULL
    in
    let ch_v504860 =
      ((fn x_v504861 ⇒ ln __v504862 ⇒ send(ch_v504857, x_v504861))
         s_v504853)
        NULL
    in
    let ch_v504863 =
      ((fn x_v504864 ⇒ ln __v504865 ⇒ send(ch_v504860, x_v504864)) 0)
        NULL
    in (ln __v504866 ⇒ let __v504867 = ch_v504863 in NULL) NULL

val prerrclo_i134 = fn s_v504868 ⇒ prerr_i36(s_v504868)

val digits_i37 =
  (consUU_c31
    "0"
    (consUU_c31
      "1"
      (consUU_c31
        "2"
        (consUU_c31
          "3"
          (consUU_c31
            "4"
            (consUU_c31
              "5"
              (consUU_c31
                "6"
                (consUU_c31 "7" (consUU_c31 "8" (consUU_c31 "9" nilUU_c30))))))))))

fun get_at_i38(A_v504869, n_v504870, xs_v504871, a_v504872) =
  let __v504873 = n_v504870 in
  if __v504873 then
    let n_v504874 = __v504873.-1 in
    match xs_v504871 with
    | nilUU_c30  ⇒ a_v504872
    | consUU_c31 __v504875 xs_v504876 ⇒
      get_at_i38(NULL, n_v504874, xs_v504876, a_v504872)
    end
  else
    match xs_v504871 with
    | nilUU_c30  ⇒ a_v504872 | consUU_c31 x_v504877 __v504878 ⇒ x_v504877
    end

val get_atclo_i135 =
  fn A_v504879 n_v504880 xs_v504881 a_v504882 ⇒
    get_at_i38(A_v504879, n_v504880, xs_v504881, a_v504882)

fun string_of_digit_i39(n_v504883) =
  get_at_i38(NULL, n_v504883, digits_i37, EmptyString_c6)

val string_of_digitclo_i136 = fn n_v504884 ⇒ string_of_digit_i39(n_v504884)

fun string_of_nat_i40(n_v504885) =
  let s_v504886 = string_of_digit_i39(modn_i17(n_v504885, 10)) in
  let n_v504887 = divn_i16(n_v504885, 10) in
  if ltn_i7(0, n_v504887) then
    cats_i20(string_of_nat_i40(n_v504887), s_v504886)
  else
    s_v504886

val string_of_natclo_i137 = fn n_v504888 ⇒ string_of_nat_i40(n_v504888)

fun digit_of_char_i41(c_v504889) =
  if eqc_i18(c_v504889, '0') then
    (SomeUL_c21 0)
  else
    if eqc_i18(c_v504889, '1') then
      (SomeUL_c21 1)
    else
      if eqc_i18(c_v504889, '2') then
        (SomeUL_c21 2)
      else
        if eqc_i18(c_v504889, '3') then
          (SomeUL_c21 3)
        else
          if eqc_i18(c_v504889, '4') then
            (SomeUL_c21 4)
          else
            if eqc_i18(c_v504889, '5') then
              (SomeUL_c21 5)
            else
              if eqc_i18(c_v504889, '6') then
                (SomeUL_c21 6)
              else
                if eqc_i18(c_v504889, '7') then
                  (SomeUL_c21 7)
                else
                  if eqc_i18(c_v504889, '8') then
                    (SomeUL_c21 8)
                  else
                    if eqc_i18(c_v504889, '9') then
                      (SomeUL_c21 9)
                    else
                      NoneUL_c20

val digit_of_charclo_i138 = fn c_v504890 ⇒ digit_of_char_i41(c_v504890)

fun nat_of_string_loop_i42(s_v504891, acc_v504892) =
  match s_v504891 with
  | EmptyString_c6  ⇒ (SomeUL_c21 acc_v504892)
  | String_c7 c_v504893 s_v504894 ⇒
    match digit_of_char_i41(c_v504893) with
    | NoneUL_c20  ⇒ NoneUL_c20
    | SomeUL_c21 n_v504895 ⇒
      nat_of_string_loop_i42(s_v504894,
                             addn_i13(muln_i15(acc_v504892, 10), n_v504895))
    end
  end

val nat_of_string_loopclo_i139 =
  fn s_v504896 acc_v504897 ⇒ nat_of_string_loop_i42(s_v504896, acc_v504897)

fun nat_of_string_i43(s_v504898) = nat_of_string_loop_i42(s_v504898, 0)

val nat_of_stringclo_i140 = fn s_v504899 ⇒ nat_of_string_i43(s_v504899)

fun contains_i50(c_v504900, s_v504901) =
  match s_v504901 with
  | EmptyString_c6  ⇒ 0
  | String_c7 c0_v504902 s_v504903 ⇒
    if eqc_i18(c_v504900, c0_v504902) then
      1
    else
      contains_i50(c_v504900, s_v504903)
  end

val containsclo_i141 =
  fn c_v504904 s_v504905 ⇒ contains_i50(c_v504904, s_v504905)

fun string_diff_i51(ans_v504906, s1_v504907, s2_v504908) =
  match s1_v504907 with
  | EmptyString_c6  ⇒ EmptyString_c6
  | String_c7 c1_v504909 s1_v504910 ⇒
    match s2_v504908 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c2_v504911 s2_v504912 ⇒
      if eqc_i18(c1_v504909, c2_v504911) then
        cats_i20("Y", string_diff_i51(ans_v504906, s1_v504910, s2_v504912))
      else
        if contains_i50(c2_v504911, ans_v504906) then
          cats_i20("I", string_diff_i51(ans_v504906, s1_v504910, s2_v504912))
        else
          cats_i20("N", string_diff_i51(ans_v504906, s1_v504910, s2_v504912))
    end
  end

val string_diffclo_i142 =
  fn ans_v504913 s1_v504914 s2_v504915 ⇒
    string_diff_i51(ans_v504913, s1_v504914, s2_v504915)

fun wordle_diff_i53(ans_v504916, guess_v504917) =
  match ans_v504916 with
  | Word_c12 ans_v504918 pf1_v504919 ⇒
    match guess_v504917 with
    | Word_c12 guess_v504920 pf2_v504921 ⇒
      let pf1_v504922 = NULL in
      let pf2_v504923 = NULL in
      let pf_v504924 = NULL in
      (Word_c12
        string_diff_i51(ans_v504918, ans_v504918, guess_v504920) NULL)
    end
  end

val wordle_diffclo_i143 =
  fn ans_v504925 guess_v504926 ⇒
    wordle_diff_i53(ans_v504925, guess_v504926)

fun eqw_i54(w1_v504927, w2_v504928) =
  match w1_v504927 with
  | Word_c12 s1_v504929 __v504930 ⇒
    match w2_v504928 with
    | Word_c12 s2_v504931 __v504932 ⇒ eqs_i22(s1_v504929, s2_v504931)
    end
  end

val eqwclo_i144 =
  fn w1_v504933 w2_v504934 ⇒ eqw_i54(w1_v504933, w2_v504934)

fun read_word_i61(__v504935) =
  ln __v504936 ⇒
    let s_v504937 = (readline_i34(NULL)) NULL in
    ((if eqn_i10(strlen_i21(s_v504937), 5) then
        fn e_v504938 ⇒ ln __v504939 ⇒ (Word_c12 s_v504937 NULL)
      else
        fn __v504940 ⇒
          ln __v504941 ⇒
            let __v504942 =
              (print_i35("please input a word with length of 5\n")) NULL
            in (read_word_i61(NULL)) NULL)
       NULL)
      NULL

val read_wordclo_i145 = fn __v504943 ⇒ read_word_i61(__v504943)

fun player_loop_i62(ans_v504944, repeat_v504945, c_v504946) =
  (let __v504947 = repeat_v504945 in
   if __v504947 then
     let repeat_v504948 = __v504947.-1 in
     fn c_v504949 ⇒
       ln __v504950 ⇒
         let guess_v504951 = (read_word_i61(NULL)) NULL in
         let c_v504952 =
           ((fn x_v504953 ⇒ ln __v504954 ⇒ send(c_v504949, x_v504953))
              guess_v504951)
             NULL
         in
         let __v504955 = (ln __v504956 ⇒ recv(c_v504952)) NULL in
         (match __v504955 with
          | (b_v504957, c_v504958) ⇒
            ln __v504959 ⇒
              let __v504960 = (ln __v504961 ⇒ (NULL, c_v504958)) NULL in
              (match __v504960 with
               | (pf_v504962, c_v504963) ⇒
                 (if b_v504957 then
                    ln c_v504964 __v504965 ⇒
                      let __v504966 = (print_i35("You Win!\n")) NULL in
                      (ln __v504967 ⇒ close(c_v504964)) NULL
                  else
                    ln c_v504968 __v504969 ⇒
                      let __v504970 = (ln __v504971 ⇒ recv(c_v504968)) NULL
                      in
                      (match __v504970 with
                       | (diff_v504972, c_v504973) ⇒
                         ln __v504974 ⇒
                           let __v504975 =
                             (ln __v504976 ⇒ (NULL, c_v504973)) NULL
                           in
                           (match __v504975 with
                            | (pf_v504977, c_v504978) ⇒
                              match diff_v504972 with
                              | Word_c12 s_v504979 __v504980 ⇒
                                ln __v504981 ⇒
                                  let __v504982 =
                                    (print_i35(cats_i20(cats_i20(cats_i20(
                                                                 cats_i20(
                                                                 "Incorrect, hint: ",
                                                                 s_v504979),
                                                                 ". You have "),
                                                                 string_of_nat_i40(
                                                                 repeat_v504948)),
                                                        " more tries.\n")))
                                      NULL
                                  in
                                  (player_loop_i62(NULL, repeat_v504948,
                                                   c_v504978))
                                    NULL
                              end
                            end) NULL
                       end) NULL)
                   c_v504963
               end) NULL
          end) NULL
   else
     fn c_v504983 ⇒
       ln __v504984 ⇒
         let __v504985 = (ln __v504986 ⇒ recv(c_v504983)) NULL in
         (match __v504985 with
          | (ans_v504987, c_v504988) ⇒
            ln __v504989 ⇒
              let __v504990 = (ln __v504991 ⇒ (NULL, c_v504988)) NULL in
              (match __v504990 with
               | (pf_v504992, c_v504993) ⇒
                 match ans_v504987 with
                 | Word_c12 s_v504994 __v504995 ⇒
                   ln __v504996 ⇒
                     let __v504997 =
                       (print_i35(cats_i20(cats_i20("You Lose! The answer is ",
                                                    s_v504994),
                                           ".\n")))
                         NULL
                     in (ln __v504998 ⇒ close(c_v504993)) NULL
                 end
               end) NULL
          end) NULL)
    c_v504946

val player_loopclo_i146 =
  fn ans_v504999 repeat_v505000 c_v505001 ⇒
    player_loop_i62(ans_v504999, repeat_v505000, c_v505001)

fun player_i63(c_v505002) =
  ln __v505003 ⇒
    let __v505004 = (ln __v505005 ⇒ (NULL, c_v505002)) NULL in
    (match __v505004 with
     | (ans_v505006, c_v505007) ⇒
       ln __v505008 ⇒
         let __v505009 = (ln __v505010 ⇒ recv(c_v505007)) NULL in
         (match __v505009 with
          | (repeat_v505011, c_v505012) ⇒
            ln __v505013 ⇒
              let __v505014 = (print_i35("Wordle Game\n")) NULL in
              let __v505015 =
                (print_i35("Please guess a word of length 5.\n")) NULL
              in
              let __v505016 =
                (print_i35(cats_i20(cats_i20("You have ",
                                             string_of_nat_i40(repeat_v505011)),
                                    " tries.\n")))
                  NULL
              in (player_loop_i62(NULL, repeat_v505011, c_v505012)) NULL
          end) NULL
     end) NULL

val playerclo_i147 = fn c_v505017 ⇒ player_i63(c_v505017)

fun get_at_i65(A_v505018, n_v505019, xs_v505020) =
  match xs_v505020 with
  | nilUU_c30  ⇒ fn e_v505021 ⇒ NULL
  | consUU_c31 x_v505022 xs_v505023 ⇒
    let __v505024 = n_v505019 in
    if __v505024 then
      let n_v505025 = __v505024.-1 in
      fn e_v505026 ⇒
        match ((((get_atclo_i148) NULL) n_v505025) xs_v505023) NULL with
        | SPairUUU_c39 x0_v505027 pf_v505028 ⇒
          (SPairUUU_c39 x0_v505027 NULL)
        end
    else
      fn e_v505029 ⇒ (SPairUUU_c39 x_v505022 NULL)
  end

val get_atclo_i148 =
  fn A_v505030 n_v505031 xs_v505032 ⇒
    get_at_i65(A_v505030, n_v505031, xs_v505032)

fun rand_word_i66(__v505033) =
  let words_v505034 =
    (consUU_c31
      (Word_c12 "route" NULL)
      (consUU_c31
        (Word_c12 "crash" NULL)
        (consUU_c31
          (Word_c12 "clown" NULL)
          (consUU_c31
            (Word_c12 "shaky" NULL)
            (consUU_c31
              (Word_c12 "vegan" NULL)
              (consUU_c31
                (Word_c12 "power" NULL)
                (consUU_c31
                  (Word_c12 "trust" NULL)
                  (consUU_c31
                    (Word_c12 "enjoy" NULL)
                    (consUU_c31
                      (Word_c12 "brain" NULL)
                      (consUU_c31
                        (Word_c12 "adopt" NULL)
                        (consUU_c31
                          (Word_c12 "tower" NULL)
                          (consUU_c31
                            (Word_c12 "shade" NULL)
                            (consUU_c31
                              (Word_c12 "delay" NULL)
                              (consUU_c31
                                (Word_c12 "twist" NULL)
                                (consUU_c31
                                  (Word_c12 "alert" NULL)
                                  (consUU_c31
                                    (Word_c12 "choke" NULL)
                                    (consUU_c31
                                      (Word_c12 "split" NULL)
                                      (consUU_c31
                                        (Word_c12 "rhyme" NULL)
                                        (consUU_c31
                                          (Word_c12 "muddy" NULL)
                                          (consUU_c31
                                            (Word_c12 "plant" NULL) nilUU_c30))))))))))))))))))))
  in
  ln __v505035 ⇒
    let r_v505036 = (ln __v505037 ⇒ rand(0, 19)) NULL in
    (match r_v505036 with
     | Between_c4 n_v505038 __v505039 pf_v505040 ⇒
       match ((((get_atclo_i148) NULL) n_v505038) words_v505034) NULL with
       | SPairUUU_c39 w_v505041 __v505042 ⇒ ln __v505043 ⇒ w_v505041
       end
     end) NULL

val rand_wordclo_i149 = fn __v505044 ⇒ rand_word_i66(__v505044)

fun server_loop_i67(ans_v505045, repeat_v505046, c_v505047) =
  (let __v505048 = repeat_v505046 in
   if __v505048 then
     let repeat_v505049 = __v505048.-1 in
     fn c_v505050 ⇒
       ln __v505051 ⇒
         let __v505052 = (ln __v505053 ⇒ recv(c_v505050)) NULL in
         (match __v505052 with
          | (guess_v505054, c_v505055) ⇒
            let b_v505056 = eqw_i54(ans_v505045, guess_v505054) in
            ln __v505057 ⇒
              let c_v505058 =
                ((fn x_v505059 ⇒
                    ln __v505060 ⇒ send(c_v505055, x_v505059))
                   b_v505056)
                  NULL
              in
              let c_v505061 =
                ((fn x_v505062 ⇒ ln __v505063 ⇒ c_v505058) NULL) NULL
              in
              ((if b_v505056 then
                  ln c_v505064 __v505065 ⇒
                    let __v505066 = c_v505064 in NULL
                else
                  ln c_v505067 __v505068 ⇒
                    let c_v505069 =
                      ((fn x_v505070 ⇒
                          ln __v505071 ⇒ send(c_v505067, x_v505070))
                         wordle_diff_i53(ans_v505045, guess_v505054))
                        NULL
                    in
                    let c_v505072 =
                      ((fn x_v505073 ⇒ ln __v505074 ⇒ c_v505069) NULL)
                        NULL
                    in
                    (server_loop_i67(ans_v505045, repeat_v505049, c_v505072))
                      NULL)
                 c_v505061)
                NULL
          end) NULL
   else
     fn c_v505075 ⇒
       ln __v505076 ⇒
         let c_v505077 =
           ((fn x_v505078 ⇒ ln __v505079 ⇒ send(c_v505075, x_v505078))
              ans_v505045)
             NULL
         in
         let c_v505080 =
           ((fn x_v505081 ⇒ ln __v505082 ⇒ c_v505077) NULL) NULL
         in (ln __v505083 ⇒ let __v505084 = c_v505080 in NULL) NULL)
    c_v505047

val server_loopclo_i150 =
  fn ans_v505085 repeat_v505086 c_v505087 ⇒
    server_loop_i67(ans_v505085, repeat_v505086, c_v505087)

fun server_i68(c_v505088) =
  let repeat_v505089 = 6 in
  ln __v505090 ⇒
    let ans_v505091 = (rand_word_i66(NULL)) NULL in
    let c_v505092 = ((fn x_v505093 ⇒ ln __v505094 ⇒ c_v505088) NULL) NULL
    in
    let c_v505095 =
      ((fn x_v505096 ⇒ ln __v505097 ⇒ send(c_v505092, x_v505096))
         repeat_v505089)
        NULL
    in (server_loop_i67(ans_v505091, repeat_v505089, c_v505095)) NULL

val serverclo_i151 = fn c_v505098 ⇒ server_i68(c_v505098)

main =
  (ln __v505099 ⇒
     let c_v505100 =
       (ln __v505101 ⇒ fork c_v505102 in (server_i68(c_v505102)) NULL) NULL
     in
     let c0_v505103 =
       (ln __v505104 ⇒
          fork c0_v505105 in
            (ln __v505106 ⇒
               let __v505107 = (ln __v505108 ⇒ recv(c0_v505105)) NULL in
               (match __v505107 with
                | (c_v505109, c0_v505110) ⇒
                  ln __v505111 ⇒
                    let __v505112 = (player_i63(c_v505109)) NULL in
                    let c0_v505113 =
                      ((fn x_v505114 ⇒
                          ln __v505115 ⇒ send(c0_v505110, x_v505114))
                         NULL)
                        NULL
                    in
                    (ln __v505116 ⇒ let __v505117 = c0_v505113 in NULL)
                      NULL
                end) NULL)
              NULL)
         NULL
     in
     let c0_v505118 =
       ((ln x_v505119 __v505120 ⇒ send(c0_v505103, x_v505119)) c_v505100)
         NULL
     in
     let __v505121 = (ln __v505122 ⇒ recv(c0_v505118)) NULL in
     (match __v505121 with
      | (__v505123, c0_v505124) ⇒ ln __v505125 ⇒ close(c0_v505124)
      end) NULL)
    NULL

trans23 success--------------------------

fun andb_i2(b1_v506300, b2_v506301) = if b1_v506300 then
                                        b2_v506301
                                      else
                                        0

val andbclo_i98 =
  fn b1_v506302 b2_v506303 ⇒ andb_i2(b1_v506302, b2_v506303)

fun orb_i3(b1_v506304, b2_v506305) = if b1_v506304 then
                                       1
                                     else
                                       b2_v506305

val orbclo_i99 = fn b1_v506306 b2_v506307 ⇒ orb_i3(b1_v506306, b2_v506307)

fun notb_i4(b_v506308) = if b_v506308 then
                           0
                         else
                           1

val notbclo_i100 = fn b_v506309 ⇒ notb_i4(b_v506309)

fun compareb_i5(b1_v506310, b2_v506311) =
  if b1_v506310 then
    if b2_v506311 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v506311 then
      LT_c1
    else
      EQ_c3

val comparebclo_i101 =
  fn b1_v506312 b2_v506313 ⇒ compareb_i5(b1_v506312, b2_v506313)

fun lten_i6(x_v506314, y_v506315) =
  if x_v506314 then
    if y_v506315 then
      lten_i6(x_v506314.-1, y_v506315.-1)
    else
      0
  else
    1

val ltenclo_i102 = fn x_v506316 y_v506317 ⇒ lten_i6(x_v506316, y_v506317)

fun ltn_i7(x_v506318, y_v506319) = lten_i6(x_v506318.+1, y_v506319)

val ltnclo_i103 = fn x_v506320 y_v506321 ⇒ ltn_i7(x_v506320, y_v506321)

fun gten_i8(x_v506322, y_v506323) = lten_i6(y_v506323, x_v506322)

val gtenclo_i104 = fn x_v506324 y_v506325 ⇒ gten_i8(x_v506324, y_v506325)

fun gtn_i9(x_v506326, y_v506327) = ltn_i7(y_v506327, x_v506326)

val gtnclo_i105 = fn x_v506328 y_v506329 ⇒ gtn_i9(x_v506328, y_v506329)

fun eqn_i10(x_v506330, y_v506331) =
  if x_v506330 then
    if y_v506331 then
      eqn_i10(x_v506330.-1, y_v506331.-1)
    else
      0
  else
    if y_v506331 then
      0
    else
      1

val eqnclo_i106 = fn x_v506332 y_v506333 ⇒ eqn_i10(x_v506332, y_v506333)

fun comparen_i11(n1_v506334, n2_v506335) =
  if n1_v506334 then
    if n2_v506335 then
      comparen_i11(n1_v506334.-1, n2_v506335.-1)
    else
      GT_c2
  else
    if n2_v506335 then
      LT_c1
    else
      EQ_c3

val comparenclo_i107 =
  fn n1_v506336 n2_v506337 ⇒ comparen_i11(n1_v506336, n2_v506337)

fun pred_i12(x_v506338) = if x_v506338 then
                            x_v506338.-1
                          else
                            0

val predclo_i108 = fn x_v506339 ⇒ pred_i12(x_v506339)

fun addn_i13(x_v506340, y_v506341) =
  if x_v506340 then
    addn_i13(x_v506340.-1, y_v506341).+1
  else
    y_v506341

val addnclo_i109 = fn x_v506342 y_v506343 ⇒ addn_i13(x_v506342, y_v506343)

fun subn_i14(x_v506344, y_v506345) =
  if y_v506345 then
    subn_i14(pred_i12(x_v506344), y_v506345.-1)
  else
    x_v506344

val subnclo_i110 = fn x_v506346 y_v506347 ⇒ subn_i14(x_v506346, y_v506347)

fun muln_i15(x_v506348, y_v506349) =
  if x_v506348 then
    addn_i13(y_v506349, muln_i15(x_v506348.-1, y_v506349))
  else
    0

val mulnclo_i111 = fn x_v506350 y_v506351 ⇒ muln_i15(x_v506350, y_v506351)

fun divn_i16(x_v506352, y_v506353) =
  if ltn_i7(x_v506352, y_v506353) then
    0
  else
    divn_i16(subn_i14(x_v506352, y_v506353), y_v506353).+1

val divnclo_i112 = fn x_v506354 y_v506355 ⇒ divn_i16(x_v506354, y_v506355)

fun modn_i17(x_v506356, y_v506357) =
  subn_i14(x_v506356, muln_i15(divn_i16(x_v506356, y_v506357), y_v506357))

val modnclo_i113 = fn x_v506358 y_v506359 ⇒ modn_i17(x_v506358, y_v506359)

fun eqc_i18(c1_v506360, c2_v506361) =
  match c1_v506360 with
  | Char_c5 n1_v506362 ⇒
    match c2_v506361 with
    | Char_c5 n2_v506363 ⇒ eqn_i10(n1_v506362, n2_v506363)
    end
  end

val eqcclo_i114 =
  fn c1_v506364 c2_v506365 ⇒ eqc_i18(c1_v506364, c2_v506365)

fun comparec_i19(c1_v506366, c2_v506367) =
  match c1_v506366 with
  | Char_c5 n1_v506368 ⇒
    match c2_v506367 with
    | Char_c5 n2_v506369 ⇒ comparen_i11(n1_v506368, n2_v506369)
    end
  end

val comparecclo_i115 =
  fn c1_v506370 c2_v506371 ⇒ comparec_i19(c1_v506370, c2_v506371)

fun cats_i20(s1_v506372, s2_v506373) =
  match s1_v506372 with
  | EmptyString_c6  ⇒ s2_v506373
  | String_c7 c_v506374 s1_v506375 ⇒
    (String_c7 c_v506374 cats_i20(s1_v506375, s2_v506373))
  end

val catsclo_i116 =
  fn s1_v506376 s2_v506377 ⇒ cats_i20(s1_v506376, s2_v506377)

fun strlen_i21(s_v506378) =
  match s_v506378 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v506379 s_v506380 ⇒ strlen_i21(s_v506380).+1
  end

val strlenclo_i117 = fn s_v506381 ⇒ strlen_i21(s_v506381)

fun eqs_i22(s1_v506382, s2_v506383) =
  match s1_v506382 with
  | EmptyString_c6  ⇒
    match s2_v506383 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v506384 __v506385 ⇒ 0
    end
  | String_c7 c1_v506386 s1_v506387 ⇒
    match s2_v506383 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v506388 s2_v506389 ⇒
      andb_i2(eqc_i18(c1_v506386, c2_v506388),
              eqs_i22(s1_v506387, s2_v506389))
    end
  end

val eqsclo_i118 =
  fn s1_v506390 s2_v506391 ⇒ eqs_i22(s1_v506390, s2_v506391)

fun compares_i23(s1_v506392, s2_v506393) =
  match s1_v506392 with
  | EmptyString_c6  ⇒
    match s2_v506393 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v506394 __v506395 ⇒ LT_c1
    end
  | String_c7 c1_v506396 s1_v506397 ⇒
    match s2_v506393 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v506398 s2_v506399 ⇒
      match comparec_i19(c1_v506396, c2_v506398) with
      | EQ_c3  ⇒ compares_i23(s1_v506397, s2_v506399) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i119 =
  fn s1_v506400 s2_v506401 ⇒ compares_i23(s1_v506400, s2_v506401)

fun and_thenUUU_i79(A_v506402, B_v506403, opt_v506404, f_v506405) =
  match opt_v506404 with
  | NoneUU_c22  ⇒ NoneUU_c22
  | SomeUU_c23 x_v506406 ⇒ (f_v506405) x_v506406
  end

val and_thenUUUclo_i120 =
  fn A_v506407 B_v506408 opt_v506409 ⇒
    ln f_v506410 ⇒
      and_thenUUU_i79(A_v506407, B_v506408, opt_v506409, f_v506410)

fun and_thenUUL_i78(A_v506411, B_v506412, opt_v506413, f_v506414) =
  match opt_v506413 with
  | NoneUL_c20  ⇒ NoneUL_c20
  | SomeUL_c21 x_v506415 ⇒ (f_v506414) x_v506415
  end

val and_thenUULclo_i121 =
  fn A_v506416 B_v506417 opt_v506418 ⇒
    ln f_v506419 ⇒
      and_thenUUL_i78(A_v506416, B_v506417, opt_v506418, f_v506419)

fun and_thenULU_i77(A_v506420, B_v506421, opt_v506422, f_v506423) =
  match opt_v506422 with
  | NoneUU_c22  ⇒ NoneLU_c18
  | SomeUU_c23 x_v506424 ⇒ (f_v506423) x_v506424
  end

val and_thenULUclo_i122 =
  fn A_v506425 B_v506426 opt_v506427 ⇒
    ln f_v506428 ⇒
      and_thenULU_i77(A_v506425, B_v506426, opt_v506427, f_v506428)

fun and_thenULL_i76(A_v506429, B_v506430, opt_v506431, f_v506432) =
  match opt_v506431 with
  | NoneUL_c20  ⇒ NoneLL_c16
  | SomeUL_c21 x_v506433 ⇒ (f_v506432) x_v506433
  end

val and_thenULLclo_i123 =
  fn A_v506434 B_v506435 opt_v506436 ⇒
    ln f_v506437 ⇒
      and_thenULL_i76(A_v506434, B_v506435, opt_v506436, f_v506437)

fun and_thenLUL_i74(A_v506438, B_v506439, opt_v506440, f_v506441) =
  match opt_v506440 with
  | NoneLL_c16  ⇒ NoneUL_c20
  | SomeLL_c17 x_v506442 ⇒ (f_v506441) x_v506442
  end

val and_thenLULclo_i124 =
  fn A_v506443 B_v506444 opt_v506445 ⇒
    ln f_v506446 ⇒
      and_thenLUL_i74(A_v506443, B_v506444, opt_v506445, f_v506446)

fun and_thenLLL_i72(A_v506447, B_v506448, opt_v506449, f_v506450) =
  match opt_v506449 with
  | NoneLL_c16  ⇒ NoneLL_c16
  | SomeLL_c17 x_v506451 ⇒ (f_v506450) x_v506451
  end

val and_thenLLLclo_i125 =
  fn A_v506452 B_v506453 opt_v506454 ⇒
    ln f_v506455 ⇒
      and_thenLLL_i72(A_v506452, B_v506453, opt_v506454, f_v506455)

fun lenUU_i87(A_v506456, xs_v506457) =
  match xs_v506457 with
  | nilUU_c30  ⇒ (0, nilUU_c30)
  | consUU_c31 x_v506458 xs_v506459 ⇒
    match lenUU_i87(NULL, xs_v506459) with
    | (n_v506460, xs_v506461) ⇒
      (n_v506460.+1, (consUU_c31 x_v506458 xs_v506461))
    end
  end

val lenUUclo_i126 =
  fn A_v506462 xs_v506463 ⇒ lenUU_i87(A_v506462, xs_v506463)

fun lenUL_i86(A_v506464, xs_v506465) =
  match xs_v506465 with
  | nilUL_c28  ⇒ (0, nilUL_c28)
  | consUL_c29 x_v506466 xs_v506467 ⇒
    match lenUL_i86(NULL, xs_v506467) with
    | (n_v506468, xs_v506469) ⇒
      (n_v506468.+1, (consUL_c29 x_v506466 xs_v506469))
    end
  end

val lenULclo_i127 =
  fn A_v506470 xs_v506471 ⇒ lenUL_i86(A_v506470, xs_v506471)

fun lenLL_i84(A_v506472, xs_v506473) =
  match xs_v506473 with
  | nilLL_c24  ⇒ (0, nilLL_c24)
  | consLL_c25 x_v506474 xs_v506475 ⇒
    match lenLL_i84(NULL, xs_v506475) with
    | (n_v506476, xs_v506477) ⇒
      (n_v506476.+1, (consLL_c25 x_v506474 xs_v506477))
    end
  end

val lenLLclo_i128 =
  fn A_v506478 xs_v506479 ⇒ lenLL_i84(A_v506478, xs_v506479)

fun appendUU_i91(A_v506480, xs_v506481, ys_v506482) =
  match xs_v506481 with
  | nilUU_c30  ⇒ ys_v506482
  | consUU_c31 x_v506483 xs_v506484 ⇒
    (consUU_c31 x_v506483 appendUU_i91(NULL, xs_v506484, ys_v506482))
  end

val appendUUclo_i129 =
  fn A_v506485 xs_v506486 ⇒
    ln ys_v506487 ⇒ appendUU_i91(A_v506485, xs_v506486, ys_v506487)

fun appendUL_i90(A_v506488, xs_v506489, ys_v506490) =
  match xs_v506489 with
  | nilUL_c28  ⇒ ys_v506490
  | consUL_c29 x_v506491 xs_v506492 ⇒
    (consUL_c29 x_v506491 appendUL_i90(NULL, xs_v506492, ys_v506490))
  end

val appendULclo_i130 =
  fn A_v506493 xs_v506494 ⇒
    ln ys_v506495 ⇒ appendUL_i90(A_v506493, xs_v506494, ys_v506495)

fun appendLL_i88(A_v506496, xs_v506497, ys_v506498) =
  match xs_v506497 with
  | nilLL_c24  ⇒ ys_v506498
  | consLL_c25 x_v506499 xs_v506500 ⇒
    (consLL_c25 x_v506499 appendLL_i88(NULL, xs_v506500, ys_v506498))
  end

val appendLLclo_i131 =
  fn A_v506501 xs_v506502 ⇒
    ln ys_v506503 ⇒ appendLL_i88(A_v506501, xs_v506502, ys_v506503)

fun readline_i34(__v506504) =
  ln __v506505 ⇒
    let ch_v506506 = open stdin in
    let ch_v506507 = send(ch_v506506, 1) in
    let __v506508 = recv(ch_v506507) in
    match __v506508 with
    | (s_v506509, ch_v506510) ⇒
      let ch_v506511 = send(ch_v506510, 0) in s_v506509
    end

val readlineclo_i132 = fn __v506512 ⇒ readline_i34(__v506512)

fun print_i35(s_v506513) =
  ln __v506514 ⇒
    let ch_v506515 = open stdout in
    let ch_v506516 = send(ch_v506515, 1) in
    let ch_v506517 = send(ch_v506516, s_v506513) in
    let ch_v506518 = send(ch_v506517, 0) in NULL

val printclo_i133 = fn s_v506519 ⇒ print_i35(s_v506519)

fun prerr_i36(s_v506520) =
  ln __v506521 ⇒
    let ch_v506522 = open stderr in
    let ch_v506523 = send(ch_v506522, 1) in
    let ch_v506524 = send(ch_v506523, s_v506520) in
    let ch_v506525 = send(ch_v506524, 0) in NULL

val prerrclo_i134 = fn s_v506526 ⇒ prerr_i36(s_v506526)

val digits_i37 =
  (consUU_c31
    "0"
    (consUU_c31
      "1"
      (consUU_c31
        "2"
        (consUU_c31
          "3"
          (consUU_c31
            "4"
            (consUU_c31
              "5"
              (consUU_c31
                "6"
                (consUU_c31 "7" (consUU_c31 "8" (consUU_c31 "9" nilUU_c30))))))))))

fun get_at_i38(A_v506527, n_v506528, xs_v506529, a_v506530) =
  if n_v506528 then
    match xs_v506529 with
    | nilUU_c30  ⇒ a_v506530
    | consUU_c31 __v506531 xs_v506532 ⇒
      get_at_i38(NULL, n_v506528.-1, xs_v506532, a_v506530)
    end
  else
    match xs_v506529 with
    | nilUU_c30  ⇒ a_v506530 | consUU_c31 x_v506533 __v506534 ⇒ x_v506533
    end

val get_atclo_i135 =
  fn A_v506535 n_v506536 xs_v506537 a_v506538 ⇒
    get_at_i38(A_v506535, n_v506536, xs_v506537, a_v506538)

fun string_of_digit_i39(n_v506539) =
  get_at_i38(NULL, n_v506539, digits_i37, EmptyString_c6)

val string_of_digitclo_i136 = fn n_v506540 ⇒ string_of_digit_i39(n_v506540)

fun string_of_nat_i40(n_v506541) =
  let s_v506542 = string_of_digit_i39(modn_i17(n_v506541, 10)) in
  let n_v506543 = divn_i16(n_v506541, 10) in
  if ltn_i7(0, n_v506543) then
    cats_i20(string_of_nat_i40(n_v506543), s_v506542)
  else
    s_v506542

val string_of_natclo_i137 = fn n_v506544 ⇒ string_of_nat_i40(n_v506544)

fun digit_of_char_i41(c_v506545) =
  if eqc_i18(c_v506545, '0') then
    (SomeUL_c21 0)
  else
    if eqc_i18(c_v506545, '1') then
      (SomeUL_c21 1)
    else
      if eqc_i18(c_v506545, '2') then
        (SomeUL_c21 2)
      else
        if eqc_i18(c_v506545, '3') then
          (SomeUL_c21 3)
        else
          if eqc_i18(c_v506545, '4') then
            (SomeUL_c21 4)
          else
            if eqc_i18(c_v506545, '5') then
              (SomeUL_c21 5)
            else
              if eqc_i18(c_v506545, '6') then
                (SomeUL_c21 6)
              else
                if eqc_i18(c_v506545, '7') then
                  (SomeUL_c21 7)
                else
                  if eqc_i18(c_v506545, '8') then
                    (SomeUL_c21 8)
                  else
                    if eqc_i18(c_v506545, '9') then
                      (SomeUL_c21 9)
                    else
                      NoneUL_c20

val digit_of_charclo_i138 = fn c_v506546 ⇒ digit_of_char_i41(c_v506546)

fun nat_of_string_loop_i42(s_v506547, acc_v506548) =
  match s_v506547 with
  | EmptyString_c6  ⇒ (SomeUL_c21 acc_v506548)
  | String_c7 c_v506549 s_v506550 ⇒
    match digit_of_char_i41(c_v506549) with
    | NoneUL_c20  ⇒ NoneUL_c20
    | SomeUL_c21 n_v506551 ⇒
      nat_of_string_loop_i42(s_v506550,
                             addn_i13(muln_i15(acc_v506548, 10), n_v506551))
    end
  end

val nat_of_string_loopclo_i139 =
  fn s_v506552 acc_v506553 ⇒ nat_of_string_loop_i42(s_v506552, acc_v506553)

fun nat_of_string_i43(s_v506554) = nat_of_string_loop_i42(s_v506554, 0)

val nat_of_stringclo_i140 = fn s_v506555 ⇒ nat_of_string_i43(s_v506555)

fun contains_i50(c_v506556, s_v506557) =
  match s_v506557 with
  | EmptyString_c6  ⇒ 0
  | String_c7 c0_v506558 s_v506559 ⇒
    if eqc_i18(c_v506556, c0_v506558) then
      1
    else
      contains_i50(c_v506556, s_v506559)
  end

val containsclo_i141 =
  fn c_v506560 s_v506561 ⇒ contains_i50(c_v506560, s_v506561)

fun string_diff_i51(ans_v506562, s1_v506563, s2_v506564) =
  match s1_v506563 with
  | EmptyString_c6  ⇒ EmptyString_c6
  | String_c7 c1_v506565 s1_v506566 ⇒
    match s2_v506564 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c2_v506567 s2_v506568 ⇒
      if eqc_i18(c1_v506565, c2_v506567) then
        cats_i20("Y", string_diff_i51(ans_v506562, s1_v506566, s2_v506568))
      else
        if contains_i50(c2_v506567, ans_v506562) then
          cats_i20("I", string_diff_i51(ans_v506562, s1_v506566, s2_v506568))
        else
          cats_i20("N", string_diff_i51(ans_v506562, s1_v506566, s2_v506568))
    end
  end

val string_diffclo_i142 =
  fn ans_v506569 s1_v506570 s2_v506571 ⇒
    string_diff_i51(ans_v506569, s1_v506570, s2_v506571)

fun wordle_diff_i53(ans_v506572, guess_v506573) =
  match ans_v506572 with
  | Word_c12 ans_v506574 pf1_v506575 ⇒
    match guess_v506573 with
    | Word_c12 guess_v506576 pf2_v506577 ⇒
      (Word_c12
        string_diff_i51(ans_v506574, ans_v506574, guess_v506576) NULL)
    end
  end

val wordle_diffclo_i143 =
  fn ans_v506578 guess_v506579 ⇒
    wordle_diff_i53(ans_v506578, guess_v506579)

fun eqw_i54(w1_v506580, w2_v506581) =
  match w1_v506580 with
  | Word_c12 s1_v506582 __v506583 ⇒
    match w2_v506581 with
    | Word_c12 s2_v506584 __v506585 ⇒ eqs_i22(s1_v506582, s2_v506584)
    end
  end

val eqwclo_i144 =
  fn w1_v506586 w2_v506587 ⇒ eqw_i54(w1_v506586, w2_v506587)

fun read_word_i61(__v506588) =
  ln __v506589 ⇒
    let s_v506590 = (readline_i34(NULL)) NULL in
    ((if eqn_i10(strlen_i21(s_v506590), 5) then
        fn e_v506591 ⇒ ln __v506592 ⇒ (Word_c12 s_v506590 NULL)
      else
        fn __v506593 ⇒
          ln __v506594 ⇒
            let __v506595 =
              (print_i35("please input a word with length of 5\n")) NULL
            in (read_word_i61(NULL)) NULL)
       NULL)
      NULL

val read_wordclo_i145 = fn __v506596 ⇒ read_word_i61(__v506596)

fun player_loop_i62(ans_v506597, repeat_v506598, c_v506599) =
  (if repeat_v506598 then
     fn c_v506600 ⇒
       ln __v506601 ⇒
         let guess_v506602 = (read_word_i61(NULL)) NULL in
         let c_v506603 = send(c_v506600, guess_v506602) in
         let __v506604 = recv(c_v506603) in
         match __v506604 with
         | (b_v506605, c_v506606) ⇒
           match (NULL, c_v506606) with
           | (pf_v506607, c_v506608) ⇒
             ((if b_v506605 then
                 ln c_v506609 __v506610 ⇒
                   let __v506611 = (print_i35("You Win!\n")) NULL in
                   close(c_v506609)
               else
                 ln c_v506612 __v506613 ⇒
                   let __v506614 = recv(c_v506612) in
                   match __v506614 with
                   | (diff_v506615, c_v506616) ⇒
                     match (NULL, c_v506616) with
                     | (pf_v506617, c_v506618) ⇒
                       match diff_v506615 with
                       | Word_c12 s_v506619 __v506620 ⇒
                         let __v506621 =
                           (print_i35(cats_i20(cats_i20(cats_i20(cats_i20(
                                                                 "Incorrect, hint: ",
                                                                 s_v506619),
                                                                 ". You have "),
                                                        string_of_nat_i40(
                                                        repeat_v506598.-1)),
                                               " more tries.\n")))
                             NULL
                         in
                         (player_loop_i62(NULL, repeat_v506598.-1, c_v506618))
                           NULL
                       end
                     end
                   end)
                c_v506608)
               NULL
           end
         end
   else
     fn c_v506622 ⇒
       ln __v506623 ⇒
         let __v506624 = recv(c_v506622) in
         match __v506624 with
         | (ans_v506625, c_v506626) ⇒
           match (NULL, c_v506626) with
           | (pf_v506627, c_v506628) ⇒
             match ans_v506625 with
             | Word_c12 s_v506629 __v506630 ⇒
               let __v506631 =
                 (print_i35(cats_i20(cats_i20("You Lose! The answer is ",
                                              s_v506629),
                                     ".\n")))
                   NULL
               in close(c_v506628)
             end
           end
         end)
    c_v506599

val player_loopclo_i146 =
  fn ans_v506632 repeat_v506633 c_v506634 ⇒
    player_loop_i62(ans_v506632, repeat_v506633, c_v506634)

fun player_i63(c_v506635) =
  ln __v506636 ⇒
    match (NULL, c_v506635) with
    | (ans_v506637, c_v506638) ⇒
      let __v506639 = recv(c_v506638) in
      match __v506639 with
      | (repeat_v506640, c_v506641) ⇒
        let __v506642 = (print_i35("Wordle Game\n")) NULL in
        let __v506643 =
          (print_i35("Please guess a word of length 5.\n")) NULL
        in
        let __v506644 =
          (print_i35(cats_i20(cats_i20("You have ",
                                       string_of_nat_i40(repeat_v506640)),
                              " tries.\n")))
            NULL
        in (player_loop_i62(NULL, repeat_v506640, c_v506641)) NULL
      end
    end

val playerclo_i147 = fn c_v506645 ⇒ player_i63(c_v506645)

fun get_at_i65(A_v506646, n_v506647, xs_v506648) =
  match xs_v506648 with
  | nilUU_c30  ⇒ fn e_v506649 ⇒ NULL
  | consUU_c31 x_v506650 xs_v506651 ⇒
    if n_v506647 then
      fn e_v506652 ⇒
        match ((((get_atclo_i148) NULL) n_v506647.-1) xs_v506651) NULL with
        | SPairUUU_c39 x0_v506653 pf_v506654 ⇒
          (SPairUUU_c39 x0_v506653 NULL)
        end
    else
      fn e_v506655 ⇒ (SPairUUU_c39 x_v506650 NULL)
  end

val get_atclo_i148 =
  fn A_v506656 n_v506657 xs_v506658 ⇒
    get_at_i65(A_v506656, n_v506657, xs_v506658)

fun rand_word_i66(__v506659) =
  ln __v506660 ⇒
    let r_v506661 = rand(0, 19) in
    match r_v506661 with
    | Between_c4 n_v506662 __v506663 pf_v506664 ⇒
      match ((((get_atclo_i148) NULL) n_v506662)
               (consUU_c31
                 (Word_c12 "route" NULL)
                 (consUU_c31
                   (Word_c12 "crash" NULL)
                   (consUU_c31
                     (Word_c12 "clown" NULL)
                     (consUU_c31
                       (Word_c12 "shaky" NULL)
                       (consUU_c31
                         (Word_c12 "vegan" NULL)
                         (consUU_c31
                           (Word_c12 "power" NULL)
                           (consUU_c31
                             (Word_c12 "trust" NULL)
                             (consUU_c31
                               (Word_c12 "enjoy" NULL)
                               (consUU_c31
                                 (Word_c12 "brain" NULL)
                                 (consUU_c31
                                   (Word_c12 "adopt" NULL)
                                   (consUU_c31
                                     (Word_c12 "tower" NULL)
                                     (consUU_c31
                                       (Word_c12 "shade" NULL)
                                       (consUU_c31
                                         (Word_c12 "delay" NULL)
                                         (consUU_c31
                                           (Word_c12 "twist" NULL)
                                           (consUU_c31
                                             (Word_c12 "alert" NULL)
                                             (consUU_c31
                                               (Word_c12 "choke" NULL)
                                               (consUU_c31
                                                 (Word_c12 "split" NULL)
                                                 (consUU_c31
                                                   (Word_c12 "rhyme" NULL)
                                                   (consUU_c31
                                                     (Word_c12 "muddy" NULL)
                                                     (consUU_c31
                                                       (Word_c12
                                                         "plant" NULL)
                                                       nilUU_c30)))))))))))))))))))))
              NULL with
      | SPairUUU_c39 w_v506665 __v506666 ⇒ w_v506665
      end
    end

val rand_wordclo_i149 = fn __v506667 ⇒ rand_word_i66(__v506667)

fun server_loop_i67(ans_v506668, repeat_v506669, c_v506670) =
  (if repeat_v506669 then
     fn c_v506671 ⇒
       ln __v506672 ⇒
         let __v506673 = recv(c_v506671) in
         match __v506673 with
         | (guess_v506674, c_v506675) ⇒
           let b_v506676 = eqw_i54(ans_v506668, guess_v506674) in
           let c_v506677 = send(c_v506675, b_v506676) in
           ((if b_v506676 then
               ln c_v506678 __v506679 ⇒ NULL
             else
               ln c_v506680 __v506681 ⇒
                 let c_v506682 =
                   let x_v506683 =
                     wordle_diff_i53(ans_v506668, guess_v506674)
                   in send(c_v506680, x_v506683)
                 in
                 (server_loop_i67(ans_v506668, repeat_v506669.-1, c_v506682))
                   NULL)
              c_v506677)
             NULL
         end
   else
     fn c_v506684 ⇒
       ln __v506685 ⇒ let c_v506686 = send(c_v506684, ans_v506668) in NULL)
    c_v506670

val server_loopclo_i150 =
  fn ans_v506687 repeat_v506688 c_v506689 ⇒
    server_loop_i67(ans_v506687, repeat_v506688, c_v506689)

fun server_i68(c_v506690) =
  ln __v506691 ⇒
    let ans_v506692 = (rand_word_i66(NULL)) NULL in
    let c_v506693 = send(c_v506690, 6) in
    (server_loop_i67(ans_v506692, 6, c_v506693)) NULL

val serverclo_i151 = fn c_v506694 ⇒ server_i68(c_v506694)

main =
  let c_v506695 = fork c_v506696 in (server_i68(c_v506696)) NULL in
  let c0_v506697 =
    fork c0_v506698 in
      let __v506699 = recv(c0_v506698) in
      match __v506699 with
      | (c_v506700, c0_v506701) ⇒
        let __v506702 = (player_i63(c_v506700)) NULL in
        let c0_v506703 = send(c0_v506701, NULL) in NULL
      end
  in
  let c0_v506704 = send(c0_v506697, c_v506695) in
  let __v506705 = recv(c0_v506704) in
  match __v506705 with
  | (__v506706, c0_v506707) ⇒ close(c0_v506707)
  end

trans3e success--------------------------

trans34 success--------------------------

