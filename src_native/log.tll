logical eq_sym‹s› (A : Type‹s›) (x : A) (y : A) : (∀ (_ : x ≡ y) → y ≡ x) = (fn (e : _) ⇒ rew [y, _ ⇒ y ≡ x] e in refl)

logical f_equal‹s,
t› (A : Type‹s›) (B : Type‹t›) (f : (∀ (_ : A) → B)) (x : A) (y : A) : (∀ (_ : x ≡ y) → (
(f) (x)) ≡ ((f) (y))) = (fn (e : _) ⇒ rew [y, p ⇒ ((f) (x)) ≡ (
(f)
(y))] e in refl)

logical bool_absurd‹› (e : true ≡ false) : absurd = rew [x, _ ⇒ match x as _ in _ with true ⇒ unit | false ⇒ absurd] e in ()

logical nat_absurd‹› (n : nat) (e : n.+1 ≡ O) : absurd = rew [x, _ ⇒ match x as _ in _ with O ⇒ absurd | S _ ⇒ unit] e in ()

logical nat_inv‹› (n1 : nat) (n2 : nat) (e : n1.+1 ≡ n2.+1) : n1 ≡ n2 = (
(f_equal) (_) (_) (pred) (_) (_)
(e))

logical eqn_reflect‹› (m : nat) (n : nat) : (∀ (_ : ((eqn) (m)
(n)) ≡ true) → m ≡ n) = match m as m0 in (∀ (_ : ((eqn) (m0)
(n)) ≡ true) → m0 ≡ n) with O ⇒ match n as n0 in (∀ (_ : ((eqn)
(O.+0)
(n0)) ≡ true) → O.+0 ≡ n0) with O ⇒ (fn (_ : _) ⇒ refl) | S n ⇒ (fn (e : _) ⇒ (
(absurd_elim) (_)
(((bool_absurd) (((eq_sym) (_) (_) (_) (e))))))) | S m ⇒ match n as n0 in (∀ (_ : (
(eqn) (m.+1)
(n0)) ≡ true) → m.+1 ≡ n0) with O ⇒ (fn (e : _) ⇒ ((absurd_elim)
(_)
(((bool_absurd) (((eq_sym) (_) (_) (_) (e))))))) | S n ⇒ (fn (e : _) ⇒ (
(f_equal) (_) (_) ((fn (x : _) ⇒ x.+1)) (_) (_)
(((eqn_reflect) (m) (n) (e)))))

inductive word‹› : U = Word of ‹› (s : string) {pf : ((strlen)
(s)) ≡ O.+5} → ((word‹›))

program string_diff‹› (s1 : string) (s2 : string) : string = match s1 as _ in _ with EmptyString  ⇒ EmptyString | String c1
s1 ⇒ match s2 as _ in _ with EmptyString  ⇒ EmptyString | String c2
s2 ⇒ match ((eqc) (c1) (c2)) as _ in _ with true ⇒ ((cats)
(((String) (((Char) (O.+89))) (EmptyString)))
(((string_diff) (s1) (s2)))) | false ⇒ ((cats)
(((String) (((Char) (O.+78))) (EmptyString)))
(((string_diff) (s1) (s2))))

logical string_diff_len‹› (n : nat) (s1 : string) (s2 : string) : (∀ (_ : n ≡ (
(strlen) (s1))) → (∀ (_ : n ≡ ((strlen) (s2))) → n ≡ ((strlen)
(((string_diff) (s1) (s2)))))) = match s1 as s0 in (∀ (_ : n ≡ ((strlen)
(s0))) → (∀ (_ : n ≡ ((strlen) (s2))) → n ≡ ((strlen)
(((string_diff) (s0) (s2)))))) with EmptyString  ⇒ match s2 as s0 in (∀ (_ : n ≡ O.+0) → (∀ (_ : n ≡ (
(strlen)
(s0))) → n ≡ O.+0)) with EmptyString  ⇒ (fn (e1 : _) ⇒ (fn (_ : _) ⇒ e1)) | String c2
s2 ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e2 in e1 in (
(absurd_elim) (_) (((nat_absurd) (_) (e3)))))) | String c1
s1 ⇒ match s2 as s0 in (∀ (_ : n ≡ ((strlen)
(((String) (c1) (s1))))) → (∀ (_ : n ≡ ((strlen)
(s0))) → n ≡ ((strlen)
(((string_diff) (((String) (c1) (s1))) (s0)))))) with EmptyString  ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e1 in e2 in (
(absurd_elim) (_) (((nat_absurd) (_) (e3)))))) | String c2
s2 ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ ((match n as n0 in (∀ (_ : n ≡ n0) → n0 ≡ (
                                           (strlen)
                                           (((string_diff)
                                            (((String) (c1) (s1)))
                                            (((String) (c2) (s2))))))) with O ⇒ (fn (e0 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e1 in e0 in (
                                           (absurd_elim) (_)
                                           (((nat_absurd) (_) (e3))))) | S n0 ⇒ (fn (e0 : _) ⇒ let e3 = rew [n1, _ ⇒ n1 ≡ (
                                           (strlen)
                                           (s1)).+1] e0 in e1 in let e4 = rew [n1, _ ⇒ n1 ≡ (
                                           (strlen)
                                           (s2)).+1] e0 in e2 in let e5 = (
                                           (nat_inv) (_) (_)
                                           (e3)) in let e6 = ((nat_inv) 
                                           (_) (_) (e4)) in match ((eqc) 
                                           (c1)
                                           (c2)) as b0 in n0.+1 ≡ (
                                           (strlen)
                                           (match b0 as _ in _ with true ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+89)))
                                             (EmptyString)))
                                            (((string_diff) (s1) (s2)))) | false ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+78)))
                                             (EmptyString)))
                                            (((string_diff) (s1) (s2)))))) with true ⇒ rew [n1, _ ⇒ n0.+1 ≡ n1.+1] (
                                           (string_diff_len) (_) (_) 
                                           (_) (e5)
                                           (e6)) in refl | false ⇒ rew [n1, _ ⇒ n0.+1 ≡ n1.+1] (
                                           (string_diff_len) (_) (_) 
                                           (_) (e5) (e6)) in refl))
(refl))))

program word_diff‹› (w1 : word) (w2 : word) : word = match w1 as _ in _ with Word s1
pf1 ⇒ match w2 as _ in _ with Word s2 pf2 ⇒ let {pf1} = ((eq_sym) 
(_) (_) (_) (pf1)) in let {pf2} = ((eq_sym) (_) (_) (_)
(pf2)) in let {pf} = ((string_diff_len) (_) (_) (_) (pf1) (pf2)) in (
(Word) (((string_diff) (s1) (s2)))
(((eq_sym) (_) (_) (_) (pf))))

program eqw‹› (w1 : word) (w2 : word) : bool = match w1 as _ in _ with Word s1
_ ⇒ match w2 as _ in _ with Word s2 _ ⇒ ((eqs) (s1)
(s2))

logical wordle_loop‹› (ans : word) (repeat : nat) : proto = match repeat as _ in _ with O ⇒ !(w : word) → !{_ : w ≡ ans} → end | S repeat ⇒ ?(guess : word) → !(b : bool) → !{_ : b ≡ (
(eqw) (ans)
(guess))} → match b as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
(word_diff) (ans) (guess))} → ((wordle_loop) (ans)
(repeat))

logical wordle‹› : proto = !{ans : word} → !(repeat : nat) → (
(wordle_loop) (ans)
(repeat))

logical loop_ch‹› (ans : word) (repeat : nat) : L = ch‹((wordle_loop)
(ans)
(repeat))›

logical loop_hc‹› (ans : word) (repeat : nat) : L = hc‹((wordle_loop)
(ans)
(repeat))›

logical wordle_ch‹› : L = ch‹wordle›

logical wordle_hc‹› : L = hc‹wordle›

program read_word‹› (_ : unit) : IO word = let s ⇐ ((readline)
(())) in ((match ((eqn) (((strlen) (s))) (O.+5)) as b0 in (∀ {_ : (
           (eqn) (((strlen) (s)))
           (O.+5)) ≡ b0} → IO word) with true ⇒ (fn {e : _} ⇒ return (
           (Word) (s)
           (((eqn_reflect) (_) (_) (e))))) | false ⇒ (fn {_ : _} ⇒ let _ ⇐ (
           (print)
           (((String) (((Char) (O.+112)))
            (((String) (((Char) (O.+108)))
             (((String) (((Char) (O.+101)))
              (((String) (((Char) (O.+97)))
               (((String) (((Char) (O.+115)))
                (((String) (((Char) (O.+101)))
                 (((String) (((Char) (O.+32)))
                  (((String) (((Char) (O.+105)))
                   (((String) (((Char) (O.+110)))
                    (((String) (((Char) (O.+112)))
                     (((String) (((Char) (O.+117)))
                      (((String) (((Char) (O.+116)))
                       (((String) (((Char) (O.+32)))
                        (((String) (((Char) (O.+97)))
                         (((String) (((Char) (O.+32)))
                          (((String) (((Char) (O.+119)))
                           (((String) (((Char) (O.+111)))
                            (((String) (((Char) (O.+114)))
                             (((String) (((Char) (O.+100)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+119)))
                                (((String) (((Char) (O.+105)))
                                 (((String) (((Char) (O.+116)))
                                  (((String) (((Char) (O.+104)))
                                   (((String) (((Char) (O.+32)))
                                    (((String) (((Char) (O.+108)))
                                     (((String) (((Char) (O.+101)))
                                      (((String) (((Char) (O.+110)))
                                       (((String) (((Char) (O.+103)))
                                        (((String) (((Char) (O.+116)))
                                         (((String) (((Char) (O.+104)))
                                          (((String) (((Char) (O.+32)))
                                           (((String) (((Char) (O.+111)))
                                            (((String) (((Char) (O.+102)))
                                             (((String) (((Char) (O.+32)))
                                              (((String) (((Char) (O.+53)))
                                               (((String) (((Char) (O.+10)))
                                                (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) in (
           (read_word) (()))))
(refl))

program player_loop‹› {ans : word} (repeat : nat) (c : ((loop_hc) 
(ans)
(repeat))) : IO unit = ((match repeat as repeat0 in (∀ (_ : ((loop_hc)
                         (ans)
                         (repeat0))) → IO unit) with O ⇒ (fn (c : _) ⇒ let ⟨ans, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in match ans as _ in _ with Word s
                         _ ⇒ let _ ⇐ ((print)
                         (((cats)
                          (((cats)
                           (((String) (((Char) (O.+89)))
                            (((String) (((Char) (O.+111)))
                             (((String) (((Char) (O.+117)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+76)))
                                (((String) (((Char) (O.+111)))
                                 (((String) (((Char) (O.+115)))
                                  (((String) (((Char) (O.+101)))
                                   (((String) (((Char) (O.+33)))
                                    (((String) (((Char) (O.+32)))
                                     (((String) (((Char) (O.+84)))
                                      (((String) (((Char) (O.+104)))
                                       (((String) (((Char) (O.+101)))
                                        (((String) (((Char) (O.+32)))
                                         (((String) (((Char) (O.+97)))
                                          (((String) (((Char) (O.+110)))
                                           (((String) (((Char) (O.+115)))
                                            (((String) (((Char) (O.+119)))
                                             (((String) (((Char) (O.+101)))
                                              (((String) (((Char) (O.+114)))
                                               (((String) (((Char) (O.+32)))
                                                (((String)
                                                 (((Char) (O.+105)))
                                                 (((String)
                                                  (((Char) (O.+115)))
                                                  (((String)
                                                   (((Char) (O.+32)))
                                                   (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))
                           (s)))
                          (((String) (((Char) (O.+46)))
                           (((String) (((Char) (O.+10))) (EmptyString)))))))) in close c) | S repeat ⇒ (fn (c : _) ⇒ let guess ⇐ (
                         (read_word) (())) in let c ⇐ ((send c)
                         (guess)) in let ⟨b, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in (
                         (match b as b0 in (∀ (_ : hc‹match b0 as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
                          (word_diff) (ans) (guess))} → ((wordle_loop)
                          (ans)
                          (repeat))›) ⊸ IO unit) with true ⇒ (ln (c : _) ⇒ let _ ⇐ (
                          (print)
                          (((String) (((Char) (O.+89)))
                           (((String) (((Char) (O.+111)))
                            (((String) (((Char) (O.+117)))
                             (((String) (((Char) (O.+32)))
                              (((String) (((Char) (O.+87)))
                               (((String) (((Char) (O.+105)))
                                (((String) (((Char) (O.+110)))
                                 (((String) (((Char) (O.+33)))
                                  (((String) (((Char) (O.+10)))
                                   (EmptyString)))))))))))))))))))) in close c) | false ⇒ (ln (c : _) ⇒ let ⟨diff, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in match diff as _ in _ with Word s
                          _ ⇒ let _ ⇐ ((print)
                          (((cats)
                           (((cats)
                            (((cats)
                             (((cats)
                              (((String) (((Char) (O.+73)))
                               (((String) (((Char) (O.+110)))
                                (((String) (((Char) (O.+99)))
                                 (((String) (((Char) (O.+111)))
                                  (((String) (((Char) (O.+114)))
                                   (((String) (((Char) (O.+114)))
                                    (((String) (((Char) (O.+101)))
                                     (((String) (((Char) (O.+99)))
                                      (((String) (((Char) (O.+116)))
                                       (((String) (((Char) (O.+44)))
                                        (((String) (((Char) (O.+32)))
                                         (((String) (((Char) (O.+104)))
                                          (((String) (((Char) (O.+105)))
                                           (((String) (((Char) (O.+110)))
                                            (((String) (((Char) (O.+116)))
                                             (((String) (((Char) (O.+58)))
                                              (((String) (((Char) (O.+32)))
                                               (EmptyString)))))))))))))))))))))))))))))))))))
                              (s)))
                             (((String) (((Char) (O.+46)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+89)))
                                (((String) (((Char) (O.+111)))
                                 (((String) (((Char) (O.+117)))
                                  (((String) (((Char) (O.+32)))
                                   (((String) (((Char) (O.+104)))
                                    (((String) (((Char) (O.+97)))
                                     (((String) (((Char) (O.+118)))
                                      (((String) (((Char) (O.+101)))
                                       (((String) (((Char) (O.+32)))
                                        (EmptyString)))))))))))))))))))))))))
                            (((string_of_nat) (repeat)))))
                           (((String) (((Char) (O.+32)))
                            (((String) (((Char) (O.+109)))
                             (((String) (((Char) (O.+111)))
                              (((String) (((Char) (O.+114)))
                               (((String) (((Char) (O.+101)))
                                (((String) (((Char) (O.+32)))
                                 (((String) (((Char) (O.+116)))
                                  (((String) (((Char) (O.+114)))
                                   (((String) (((Char) (O.+105)))
                                    (((String) (((Char) (O.+101)))
                                     (((String) (((Char) (O.+115)))
                                      (((String) (((Char) (O.+46)))
                                       (((String) (((Char) (O.+10)))
                                        (EmptyString)))))))))))))))))))))))))))))) in (
                          (player_loop) (ans) (repeat) (c))))
                         (c))))
(c))

program player‹› (c : wordle_hc) : IO unit = let ⟨{ans}, c⟩ ⇐ recv c in let ⟨repeat, c⟩ ⇐ recv c in let _ ⇐ (
(print)
(((String) (((Char) (O.+87)))
 (((String) (((Char) (O.+111)))
  (((String) (((Char) (O.+114)))
   (((String) (((Char) (O.+100)))
    (((String) (((Char) (O.+108)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+32)))
       (((String) (((Char) (O.+71)))
        (((String) (((Char) (O.+97)))
         (((String) (((Char) (O.+109)))
          (((String) (((Char) (O.+101)))
           (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))))))))) in let _ ⇐ (
(print)
(((String) (((Char) (O.+80)))
 (((String) (((Char) (O.+108)))
  (((String) (((Char) (O.+101)))
   (((String) (((Char) (O.+97)))
    (((String) (((Char) (O.+115)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+32)))
       (((String) (((Char) (O.+103)))
        (((String) (((Char) (O.+117)))
         (((String) (((Char) (O.+101)))
          (((String) (((Char) (O.+115)))
           (((String) (((Char) (O.+115)))
            (((String) (((Char) (O.+32)))
             (((String) (((Char) (O.+97)))
              (((String) (((Char) (O.+32)))
               (((String) (((Char) (O.+119)))
                (((String) (((Char) (O.+111)))
                 (((String) (((Char) (O.+114)))
                  (((String) (((Char) (O.+100)))
                   (((String) (((Char) (O.+32)))
                    (((String) (((Char) (O.+111)))
                     (((String) (((Char) (O.+102)))
                      (((String) (((Char) (O.+32)))
                       (((String) (((Char) (O.+108)))
                        (((String) (((Char) (O.+101)))
                         (((String) (((Char) (O.+110)))
                          (((String) (((Char) (O.+103)))
                           (((String) (((Char) (O.+116)))
                            (((String) (((Char) (O.+104)))
                             (((String) (((Char) (O.+32)))
                              (((String) (((Char) (O.+53)))
                               (((String) (((Char) (O.+46)))
                                (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) in let _ ⇐ (
(print)
(((cats)
 (((cats)
  (((String) (((Char) (O.+89)))
   (((String) (((Char) (O.+111)))
    (((String) (((Char) (O.+117)))
     (((String) (((Char) (O.+32)))
      (((String) (((Char) (O.+104)))
       (((String) (((Char) (O.+97)))
        (((String) (((Char) (O.+118)))
         (((String) (((Char) (O.+101)))
          (((String) (((Char) (O.+32))) (EmptyString)))))))))))))))))))
  (((string_of_nat) (repeat)))))
 (((String) (((Char) (O.+32)))
  (((String) (((Char) (O.+116)))
   (((String) (((Char) (O.+114)))
    (((String) (((Char) (O.+105)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+115)))
       (((String) (((Char) (O.+46)))
        (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))) in (
(player_loop) (ans) (repeat)
(c))

program server_loop‹› (ans : word) (repeat : nat) (c : ((loop_ch) 
(ans)
(repeat))) : IO unit = ((match repeat as repeat0 in (∀ (_ : ((loop_ch)
                         (ans)
                         (repeat0))) → IO unit) with O ⇒ (fn (c : _) ⇒ let c ⇐ (
                         (send c) (ans)) in let c ⇐ ((send c)
                         (refl)) in close c) | S repeat ⇒ (fn (c : _) ⇒ let ⟨guess, c⟩ ⇐ recv c in let b = (
                         (eqw) (ans) (guess)) in let c ⇐ ((send c)
                         (b)) in let c ⇐ ((send c)
                         (refl)) in ((match b as b0 in (∀ (_ : ch‹match b0 as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
                                      (word_diff) (ans)
                                      (guess))} → ((wordle_loop) (ans)
                                      (repeat))›) ⊸ IO unit) with true ⇒ (ln (c : _) ⇒ close c) | false ⇒ (ln (c : _) ⇒ let c ⇐ (
                                      (send c)
                                      (((word_diff) (ans) (guess)))) in let c ⇐ (
                                      (send c) (refl)) in ((server_loop)
                                      (ans) (repeat) (c))))
                         (c))))
(c))

program server‹› (c : wordle_ch) : IO unit = let repeat = O.+5 in let ans = (
(Word)
(((String) (((Char) (O.+119)))
 (((String) (((Char) (O.+111)))
  (((String) (((Char) (O.+114)))
   (((String) (((Char) (O.+108)))
    (((String) (((Char) (O.+100))) (EmptyString)))))))))))
(refl)) in let c ⇐ ((send c) (ans)) in let c ⇐ ((send c)
(repeat)) in ((server_loop) (ans) (repeat)
(c))

program main‹› : IO unit = let c ⇐ fork (c : wordle_ch) in ((server)
(c)) in let c0 ⇐ fork (c0 : ch‹?(_ : wordle_hc) → !(_ : unit) → end›) in let ⟨c, c0⟩ ⇐ recv c0 in let _ ⇐ (
(player) (c)) in let c0 ⇐ ((send c0)
(())) in close c0 in let c0 ⇐ ((send c0)
(c)) in let ⟨_, c0⟩ ⇐ recv c0 in close c0

parsing success--------------------------

inductive absurd_d1 : U =


logical absurd_elim_i1 ‹s_s513› :
  ∀ (A_v514 : Type‹s_s513›) → absurd_d1 → A_v514
=
  fn (A_v516 : Type‹s_s513›) (p_v517 : absurd_d1) ⇒
    match p_v517 as __v518 in ??1 with
    
    end

inductive order_d2 : U =
| LT_c1 of : order_d2 | GT_c2 of : order_d2 | EQ_c3 of : order_d2

program andb_i2 : bool → bool → bool =
  fn (b1_v521 : bool) (b2_v522 : bool) ⇒
    match b1_v521 as __v523 in ??2 with
    | true ⇒ b2_v522 | false ⇒ false
    end

program orb_i3 : bool → bool → bool =
  fn (b1_v526 : bool) (b2_v527 : bool) ⇒
    match b1_v526 as __v528 in ??3 with
    | true ⇒ true | false ⇒ b2_v527
    end

program notb_i4 : bool → bool =
  fn (b_v530 : bool) ⇒
    match b_v530 as __v531 in ??4 with
    | true ⇒ false | false ⇒ true
    end

program compareb_i5 : bool → bool → order_d2 =
  fn (b1_v534 : bool) (b2_v535 : bool) ⇒
    match b1_v534 as __v536 in ??5 with
    | true ⇒
      match b2_v535 as __v537 in ??7 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v535 as __v538 in ??6 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i6 : nat → nat → bool =
  fn (x_v541 : nat) (y_v542 : nat) ⇒
    match x_v541 as __v543 in ??8 with
    | O ⇒ true
    | S x_v544 ⇒
      match y_v542 as __v545 in ??9 with
      | O ⇒ false | S y_v546 ⇒ (lten_i6 x_v544 y_v546)
      end
    end

program gten_i7 : nat → nat → bool =
  fn (x_v549 : nat) (y_v550 : nat) ⇒
    match x_v549 as __v551 in ??10 with
    | O ⇒
      match y_v550 as __v552 in ??12 with
      | O ⇒ true | S __v553 ⇒ false
      end
    | S x_v554 ⇒
      match y_v550 as __v555 in ??11 with
      | O ⇒ true | S y_v556 ⇒ (gten_i7 x_v554 y_v556)
      end
    end

program ltn_i8 : nat → nat → bool =
  fn (x_v559 : nat) (y_v560 : nat) ⇒
    match x_v559 as __v561 in ??13 with
    | O ⇒
      match y_v560 as __v562 in ??15 with
      | O ⇒ false | S y_v563 ⇒ true
      end
    | S x_v564 ⇒
      match y_v560 as __v565 in ??14 with
      | O ⇒ false | S y_v566 ⇒ (ltn_i8 x_v564 y_v566)
      end
    end

program gtn_i9 : nat → nat → bool =
  fn (x_v569 : nat) (y_v570 : nat) ⇒
    match x_v569 as __v571 in ??16 with
    | O ⇒ false
    | S x_v572 ⇒
      match y_v570 as __v573 in ??17 with
      | O ⇒ true | S y_v574 ⇒ (gtn_i9 x_v572 y_v574)
      end
    end

program eqn_i10 : nat → nat → bool =
  fn (x_v577 : nat) (y_v578 : nat) ⇒
    match x_v577 as __v579 in ??18 with
    | O ⇒
      match y_v578 as __v580 in ??20 with
      | O ⇒ true | S __v581 ⇒ false
      end
    | S x_v582 ⇒
      match y_v578 as __v583 in ??19 with
      | O ⇒ false | S y_v584 ⇒ (eqn_i10 x_v582 y_v584)
      end
    end

program comparen_i11 : nat → nat → order_d2 =
  fn (n1_v587 : nat) (n2_v588 : nat) ⇒
    match n1_v587 as __v589 in ??21 with
    | O ⇒
      match n2_v588 as __v590 in ??23 with
      | O ⇒ EQ_c3‹› | S __v591 ⇒ LT_c1‹›
      end
    | S n1_v592 ⇒
      match n2_v588 as __v593 in ??22 with
      | O ⇒ GT_c2‹› | S n2_v594 ⇒ (comparen_i11 n1_v592 n2_v594)
      end
    end

program pred_i12 : nat → nat =
  fn (x_v596 : nat) ⇒
    match x_v596 as __v597 in ??24 with
    | O ⇒ 0 | S x_v598 ⇒ x_v598
    end

program addn_i13 : nat → nat → nat =
  fn (x_v601 : nat) (y_v602 : nat) ⇒
    match x_v601 as __v603 in ??25 with
    | O ⇒ y_v602 | S x_v604 ⇒ (addn_i13 x_v604 y_v602).+1
    end

program subn_i14 : nat → nat → nat =
  fn (x_v607 : nat) (y_v608 : nat) ⇒
    match y_v608 as __v609 in ??26 with
    | O ⇒ x_v607 | S y_v610 ⇒ (subn_i14 (pred_i12 x_v607) y_v610)
    end

program muln_i15 : nat → nat → nat =
  fn (x_v613 : nat) (y_v614 : nat) ⇒
    match x_v613 as __v615 in ??27 with
    | O ⇒ 0 | S x_v616 ⇒ (addn_i13 y_v614 (muln_i15 x_v616 y_v614))
    end

program divn_i16 : nat → nat → nat =
  fn (x_v619 : nat) (y_v620 : nat) ⇒
    match (ltn_i8 x_v619 y_v620) as __v621 in ??28 with
    | true ⇒ 0 | false ⇒ (divn_i16 (subn_i14 x_v619 y_v620) y_v620).+1
    end

program modn_i17 : nat → nat → nat =
  fn (x_v624 : nat) (y_v625 : nat) ⇒
    (subn_i14 x_v624 (muln_i15 (divn_i16 x_v624 y_v625) y_v625))

inductive between_d3 (lower_v626 : nat) (upper_v627 : nat) : L =
| Between_c4 of
    (lower_v628 : nat) (upper_v629 : nat) (n_v630 : nat)
    {pf1_v631 : (lten_i6 lower_v628 n_v630) ≡ true}
    {pf2_v632 : (lten_i6 n_v630 upper_v629) ≡ true}
    : (between_d3 lower_v628 upper_v629)

inductive char_d4 : U =
| Char_c5 of (n_v633 : nat) : char_d4

program eqc_i18 : char_d4 → char_d4 → bool =
  fn (c1_v636 : char_d4) (c2_v637 : char_d4) ⇒
    match c1_v636 as __v638 in ??31 with
    | Char_c5 n1_v639 ⇒
      match c2_v637 as __v640 in ??32 with
      | Char_c5 n2_v641 ⇒ (eqn_i10 n1_v639 n2_v641)
      end
    end

program comparec_i19 : char_d4 → char_d4 → order_d2 =
  fn (c1_v644 : char_d4) (c2_v645 : char_d4) ⇒
    match c1_v644 as __v646 in ??33 with
    | Char_c5 n1_v647 ⇒
      match c2_v645 as __v648 in ??34 with
      | Char_c5 n2_v649 ⇒ (comparen_i11 n1_v647 n2_v649)
      end
    end

inductive string_d5 : U =
| EmptyString_c6 of : string_d5
| String_c7 of (c_v650 : char_d4) (s_v651 : string_d5) : string_d5

program cats_i20 : string_d5 → string_d5 → string_d5 =
  fn (s1_v654 : string_d5) (s2_v655 : string_d5) ⇒
    match s1_v654 as __v656 in ??35 with
    | EmptyString_c6  ⇒ s2_v655
    | String_c7 c_v657 s1_v658 ⇒
      (String_c7‹› c_v657 (cats_i20 s1_v658 s2_v655))
    end

program strlen_i21 : string_d5 → nat =
  fn (s_v660 : string_d5) ⇒
    match s_v660 as __v661 in ??36 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v662 s_v663 ⇒ (strlen_i21 s_v663).+1
    end

program eqs_i22 : string_d5 → string_d5 → bool =
  fn (s1_v666 : string_d5) (s2_v667 : string_d5) ⇒
    match s1_v666 as __v668 in ??37 with
    | EmptyString_c6  ⇒
      match s2_v667 as __v669 in ??39 with
      | EmptyString_c6  ⇒ true | String_c7 __v670 __v671 ⇒ false
      end
    | String_c7 c1_v672 s1_v673 ⇒
      match s2_v667 as __v674 in ??38 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v675 s2_v676 ⇒
        (andb_i2 (eqc_i18 c1_v672 c2_v675) (eqs_i22 s1_v673 s2_v676))
      end
    end

program compares_i23 : string_d5 → string_d5 → order_d2 =
  fn (s1_v679 : string_d5) (s2_v680 : string_d5) ⇒
    match s1_v679 as __v681 in ??40 with
    | EmptyString_c6  ⇒
      match s2_v680 as __v682 in ??43 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v683 __v684 ⇒ LT_c1‹›
      end
    | String_c7 c1_v685 s1_v686 ⇒
      match s2_v680 as __v687 in ??41 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v688 s2_v689 ⇒
        match (comparec_i19 c1_v685 c2_v688) as __v690 in ??42 with
        | EQ_c3  ⇒ (compares_i23 s1_v686 s2_v689) | LT_c1  ⇒ LT_c1‹›
        | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d6 ‹s_s691, t_s692›
  (A_v693 : Type‹s_s691›) : Type‹t_s692›
=
| None_c8 of
    ‹s_s694, t_s695› (A_v696 : Type‹s_s694›)
    : (option_d6‹s_s694, t_s695› A_v696)
| Some_c9 of
    ‹s_s697, t_s698› (A_v699 : Type‹s_s697›) (x_v700 : A_v699)
    : (option_d6‹s_s697, t_s698› A_v699)

program and_then_i24 ‹s_s701, r_s702, t_s703› :
  ∀ {A_v704 : Type‹s_s701›} →
    ∀ {B_v705 : Type‹r_s702›} →
      (option_d6‹??44, t_s703› A_v704) →
        A_v704 → (option_d6‹??45, t_s703› B_v705) ⊸
          (option_d6‹??46, t_s703› B_v705)
=
  fn {A_v709 : Type‹s_s701›} {B_v710 : Type‹r_s702›}
     (opt_v711 : (option_d6‹??44, t_s703› A_v709)) ⇒
    ln (f_v712 : ??47) ⇒
      match opt_v711 as __v713 in ??48 with
      | None_c8  ⇒ None_c8‹??51, ??50›
      | Some_c9 x_v714 ⇒ (f_v712 x_v714)
      end

inductive list_d7 ‹s_s715, t_s716›
  (A_v717 : Type‹s_s715›) : Type‹t_s716›
=
| nil_c10 of
    ‹s_s718, t_s719› (A_v720 : Type‹s_s718›)
    : (list_d7‹s_s718, t_s719› A_v720)
| cons_c11 of
    ‹s_s721, t_s722› (A_v723 : Type‹s_s721›) (hd_v724 : A_v723)
    (tl_v725 : (list_d7‹s_s721, t_s722› A_v723))
    : (list_d7‹s_s721, t_s722› A_v723)

program len_i25 ‹s_s726, t_s727› :
  ∀ {A_v728 : Type‹s_s726›} →
    (list_d7‹??52, t_s727› A_v728) →
      nat ⊗ (list_d7‹??53, t_s727› A_v728)
=
  fn {A_v731 : Type‹s_s726›}
     (xs_v732 : (list_d7‹??52, t_s727› A_v731)) ⇒
    match xs_v732 as __v733 in ??54 with
    | nil_c10  ⇒ ⟨0, nil_c10‹??64, ??63›⟩
    | cons_c11 x_v734 xs_v735 ⇒
      match (len_i25‹??57, ??56› ??55 xs_v735) as __v736 in ??58 with
      | ⟨n_v737, xs_v738⟩ ⇒
        ⟨n_v737.+1, (cons_c11‹??61, ??60› x_v734 xs_v738)⟩
      end
    end

program append_i26 ‹s_s739, t_s740› :
  ∀ {A_v741 : Type‹s_s739›} →
    (list_d7‹??65, t_s740› A_v741) →
      (list_d7‹??66, t_s740› A_v741) ⊸ (list_d7‹??68, ??67› A_v741)
=
  fn {A_v744 : Type‹s_s739›}
     (xs_v745 : (list_d7‹??65, t_s740› A_v744)) ⇒
    ln (ys_v746 : ??69) ⇒
      match xs_v745 as __v747 in ??70 with
      | nil_c10  ⇒ ys_v746
      | cons_c11 x_v748 xs_v749 ⇒
        (cons_c11‹??76, ??75›
          x_v748 (append_i26‹??73, ??72› ??71 xs_v749 ys_v746))
      end

logical stdin_rec_i27 : unit → proto =
  fn (__v751 : unit) ⇒
    ⇑(b_v752 : bool) ⇒
      match b_v752 as __v753 in ??77 with
      | true ⇒ ⇓(__v754 : string_d5) ⇒ (stdin_rec_i27 ())
      | false ⇒ end
      end

logical stdout_rec_i28 : unit → proto =
  fn (__v756 : unit) ⇒
    ⇑(b_v757 : bool) ⇒
      match b_v757 as __v758 in ??78 with
      | true ⇒ ⇑(__v759 : string_d5) ⇒ (stdout_rec_i28 ())
      | false ⇒ end
      end

logical stderr_rec_i29 : unit → proto =
  fn (__v761 : unit) ⇒
    ⇑(b_v762 : bool) ⇒
      match b_v762 as __v763 in ??79 with
      | true ⇒ ⇑(__v764 : string_d5) ⇒ (stderr_rec_i29 ())
      | false ⇒ end
      end

logical stdin_t_i30 : proto = (stdin_rec_i27 ())

logical stdout_t_i31 : proto = (stdout_rec_i28 ())

logical stderr_t_i32 : proto = (stderr_rec_i29 ())

program readline_i33 : unit → IO string_d5 =
  fn (__v766 : unit) ⇒
    let ch_v767 ⇐ open stdin in
    let ch_v768 ⇐ (send ch_v767 true) in
    let __v769 ⇐ recv ch_v768 in
    match __v769 as __v770 in ??80 with
    | ⟨s_v771, ch_v772⟩ ⇒
      let ch_v773 ⇐ (send ch_v772 false) in
      let __v774 ⇐ close ch_v773 in return s_v771
    end

program print_i34 : string_d5 → IO unit =
  fn (s_v776 : string_d5) ⇒
    let ch_v777 ⇐ open stdout in
    let ch_v778 ⇐ (send ch_v777 true) in
    let ch_v779 ⇐ (send ch_v778 s_v776) in
    let ch_v780 ⇐ (send ch_v779 false) in close ch_v780

program prerr_i35 : string_d5 → IO unit =
  fn (s_v782 : string_d5) ⇒
    let ch_v783 ⇐ open stderr in
    let ch_v784 ⇐ (send ch_v783 true) in
    let ch_v785 ⇐ (send ch_v784 s_v782) in
    let ch_v786 ⇐ (send ch_v785 false) in close ch_v786

program digits_i36 : (list_d7‹??81, U› ??82) =
  (cons_c11‹??115, ??114›
    "0"
    (cons_c11‹??112, ??111›
      "1"
      (cons_c11‹??109, ??108›
        "2"
        (cons_c11‹??106, ??105›
          "3"
          (cons_c11‹??103, ??102›
            "4"
            (cons_c11‹??100, ??99›
              "5"
              (cons_c11‹??97, ??96›
                "6"
                (cons_c11‹??94, ??93›
                  "7"
                  (cons_c11‹??91, ??90›
                    "8"
                    (cons_c11‹??88, ??87› "9" nil_c10‹??85, ??84›))))))))))

program get_at_i37 :
  ∀ {A_v787 : U} →
    nat → (list_d7‹??116, U› A_v787) → A_v787 → A_v787
=
  fn {A_v791 : U} (n_v792 : nat) (xs_v793 : (list_d7‹??116, U› A_v791))
     (a_v794 : A_v791) ⇒
    match n_v792 as __v795 in ??117 with
    | O ⇒
      match xs_v793 as __v796 in ??120 with
      | nil_c10  ⇒ a_v794 | cons_c11 x_v797 __v798 ⇒ x_v797
      end
    | S n_v799 ⇒
      match xs_v793 as __v800 in ??118 with
      | nil_c10  ⇒ a_v794
      | cons_c11 __v801 xs_v802 ⇒ (get_at_i37 ??119 n_v799 xs_v802 a_v794)
      end
    end

program string_of_digit_i38 : nat → string_d5 =
  fn (n_v804 : nat) ⇒
    (get_at_i37 ??121 n_v804 digits_i36 EmptyString_c6‹›)

program string_of_nat_i39 : nat → string_d5 =
  fn (n_v806 : nat) ⇒
    let s_v807 = (string_of_digit_i38 (modn_i17 n_v806 10)) in
    let n_v808 = (divn_i16 n_v806 10) in
    match (ltn_i8 0 n_v808) as __v809 in ??122 with
    | true ⇒ (cats_i20 (string_of_nat_i39 n_v808) s_v807)
    | false ⇒ s_v807
    end

program digit_of_char_i40 : char_d4 → (option_d6‹??123, L› nat) =
  fn (c_v811 : char_d4) ⇒
    match (eqc_i18 c_v811 '0') as __v812 in ??124 with
    | true ⇒ (Some_c9‹??166, ??165› 0)
    | false ⇒
      match (eqc_i18 c_v811 '1') as __v813 in ??125 with
      | true ⇒ (Some_c9‹??163, ??162› 1)
      | false ⇒
        match (eqc_i18 c_v811 '2') as __v814 in ??126 with
        | true ⇒ (Some_c9‹??160, ??159› 2)
        | false ⇒
          match (eqc_i18 c_v811 '3') as __v815 in ??127 with
          | true ⇒ (Some_c9‹??157, ??156› 3)
          | false ⇒
            match (eqc_i18 c_v811 '4') as __v816 in ??128 with
            | true ⇒ (Some_c9‹??154, ??153› 4)
            | false ⇒
              match (eqc_i18 c_v811 '5') as __v817 in ??129 with
              | true ⇒ (Some_c9‹??151, ??150› 5)
              | false ⇒
                match (eqc_i18 c_v811 '6') as __v818 in ??130 with
                | true ⇒ (Some_c9‹??148, ??147› 6)
                | false ⇒
                  match (eqc_i18 c_v811 '7') as __v819 in ??131 with
                  | true ⇒ (Some_c9‹??145, ??144› 7)
                  | false ⇒
                    match (eqc_i18 c_v811 '8') as __v820 in ??132 with
                    | true ⇒ (Some_c9‹??142, ??141› 8)
                    | false ⇒
                      match (eqc_i18 c_v811 '9') as __v821 in ??133 with
                      | true ⇒ (Some_c9‹??139, ??138› 9)
                      | false ⇒ None_c8‹??136, ??135›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i41 :
  string_d5 → nat → (option_d6‹??167, L› nat)
=
  fn (s_v824 : string_d5) (acc_v825 : nat) ⇒
    match s_v824 as __v826 in ??168 with
    | EmptyString_c6  ⇒ (Some_c9‹??175, ??174› acc_v825)
    | String_c7 c_v827 s_v828 ⇒
      match (digit_of_char_i40 c_v827) as __v829 in ??169 with
      | None_c8  ⇒ None_c8‹??172, ??171›
      | Some_c9 n_v830 ⇒
        (nat_of_string_loop_i41
          s_v828 (addn_i13 (muln_i15 acc_v825 10) n_v830))
      end
    end

program nat_of_string_i42 : string_d5 → (option_d6‹??176, L› nat) =
  fn (s_v832 : string_d5) ⇒ (nat_of_string_loop_i41 s_v832 0)

logical eq_sym_i43 ‹s_s833› :
  ∀ (A_v834 : Type‹s_s833›) →
    ∀ (x_v835 : A_v834) →
      ∀ (y_v836 : A_v834) →
        ∀ (__v837 : x_v835 ≡ y_v836) → y_v836 ≡ x_v835
=
  fn (A_v838 : Type‹s_s833›) (x_v839 : A_v838) (y_v840 : A_v838)
     (e_v841 : ??179) ⇒
    rew [y_v842, __v843 ⇒ y_v842 ≡ x_v839] e_v841 in refl ??180

logical f_equal_i44 ‹s_s844, t_s845› :
  ∀ (A_v846 : Type‹s_s844›) →
    ∀ (B_v847 : Type‹t_s845›) →
      ∀ (f_v848 : A_v846 → B_v847) →
        ∀ (x_v850 : A_v846) →
          ∀ (y_v851 : A_v846) →
            ∀ (__v852 : x_v850 ≡ y_v851) →
              (f_v848 x_v850) ≡ (f_v848 y_v851)
=
  fn (A_v853 : Type‹s_s844›) (B_v854 : Type‹t_s845›)
     (f_v855 : A_v853 → B_v854) (x_v856 : A_v853) (y_v857 : A_v853)
     (e_v858 : ??184) ⇒
    rew [y_v860, p_v861 ⇒ (f_v855 x_v856) ≡ (f_v855 y_v860)] e_v858 in
    refl ??185

logical bool_absurd_i45 : true ≡ false → absurd_d1 =
  fn (e_v863 : true ≡ false) ⇒
    rew [x_v864, __v865 ⇒
      match x_v864 as __v866 in ??188 with
      | true ⇒ unit | false ⇒ absurd_d1
      end] e_v863 in
    ()

logical nat_absurd_i46 : ∀ (n_v867 : nat) → n_v867.+1 ≡ 0 → absurd_d1
=
  fn (n_v869 : nat) (e_v870 : n_v869.+1 ≡ 0) ⇒
    rew [x_v871, __v872 ⇒
      match x_v871 as __v873 in ??190 with
      | O ⇒ absurd_d1 | S __v874 ⇒ unit
      end] e_v870 in
    ()

logical nat_inv_i47 :
  ∀ (n1_v875 : nat) →
    ∀ (n2_v876 : nat) →
      ∀ (e_v877 : n1_v875.+1 ≡ n2_v876.+1) → n1_v875 ≡ n2_v876
=
  fn (n1_v878 : nat) (n2_v879 : nat) (e_v880 : n1_v878.+1 ≡ n2_v879.+1) ⇒
    (f_equal_i44‹??198, ??197› ??196 ??195 pred_i12 ??194 ??193 e_v880)

logical eqn_reflect_i48 :
  ∀ (m_v881 : nat) →
    ∀ (n_v882 : nat) →
      ∀ (__v883 : (eqn_i10 m_v881 n_v882) ≡ true) → m_v881 ≡ n_v882
=
  fn (m_v884 : nat) (n_v885 : nat) ⇒
    match m_v884 as m0_v886 in
      ∀ (__v887 : (eqn_i10 m0_v886 n_v885) ≡ true) → m0_v886 ≡ n_v885 with
    | O ⇒
      match n_v885 as n0_v888 in
        ∀ (__v889 : (eqn_i10 0 n0_v888) ≡ true) → 0 ≡ n0_v888 with
      | O ⇒ fn (__v890 : ??229) ⇒ refl ??230
      | S n_v891 ⇒
        fn (e_v892 : ??222) ⇒
          (absurd_elim_i1‹??228›
            ??227
            (bool_absurd_i45
              (eq_sym_i43‹??226› ??225 ??224 ??223 e_v892)))
      end
    | S m_v893 ⇒
      match n_v885 as n0_v894 in
        ∀ (__v895 : (eqn_i10 m_v893.+1 n0_v894) ≡ true) →
          m_v893.+1 ≡ n0_v894 with
      | O ⇒
        fn (e_v896 : ??213) ⇒
          (absurd_elim_i1‹??219›
            ??218
            (bool_absurd_i45
              (eq_sym_i43‹??217› ??216 ??215 ??214 e_v896)))
      | S n_v897 ⇒
        fn (e_v898 : ??205) ⇒
          (f_equal_i44‹??212, ??211›
            ??210 ??209 fn (x_v899 : ??208) ⇒ x_v899.+1 ??207 ??206
            (eqn_reflect_i48 m_v893 n_v897 e_v898))
      end
    end

inductive word_d8 : U =
| Word_c12 of
    (s_v900 : string_d5) {pf_v901 : (strlen_i21 s_v900) ≡ 5} : word_d8

program string_diff_i49 : string_d5 → string_d5 → string_d5 =
  fn (s1_v904 : string_d5) (s2_v905 : string_d5) ⇒
    match s1_v904 as __v906 in ??232 with
    | EmptyString_c6  ⇒ EmptyString_c6‹›
    | String_c7 c1_v907 s1_v908 ⇒
      match s2_v905 as __v909 in ??233 with
      | EmptyString_c6  ⇒ EmptyString_c6‹›
      | String_c7 c2_v910 s2_v911 ⇒
        match (eqc_i18 c1_v907 c2_v910) as __v912 in ??234 with
        | true ⇒ (cats_i20 "Y" (string_diff_i49 s1_v908 s2_v911))
        | false ⇒ (cats_i20 "N" (string_diff_i49 s1_v908 s2_v911))
        end
      end
    end

logical string_diff_len_i50 :
  ∀ (n_v913 : nat) →
    ∀ (s1_v914 : string_d5) →
      ∀ (s2_v915 : string_d5) →
        ∀ (__v916 : n_v913 ≡ (strlen_i21 s1_v914)) →
          ∀ (__v917 : n_v913 ≡ (strlen_i21 s2_v915)) →
            n_v913 ≡ (strlen_i21 (string_diff_i49 s1_v914 s2_v915))
=
  fn (n_v918 : nat) (s1_v919 : string_d5) (s2_v920 : string_d5) ⇒
    match s1_v919 as s0_v921 in
      ∀ (__v922 : n_v918 ≡ (strlen_i21 s0_v921)) →
        ∀ (__v923 : n_v918 ≡ (strlen_i21 s2_v920)) →
          n_v918 ≡ (strlen_i21 (string_diff_i49 s0_v921 s2_v920)) with
    | EmptyString_c6  ⇒
      match s2_v920 as s0_v924 in
        ∀ (__v925 : n_v918 ≡ 0) →
          ∀ (__v926 : n_v918 ≡ (strlen_i21 s0_v924)) → n_v918 ≡ 0 with
      | EmptyString_c6  ⇒ fn (e1_v927 : ??288) (__v928 : ??289) ⇒ e1_v927
      | String_c7 c2_v929 s2_v930 ⇒
        fn (e1_v931 : ??282) (e2_v932 : ??283) ⇒
          let e3_v933 =
            rew [n_v934, __v935 ⇒ n_v934 ≡ 0] e2_v932 in e1_v931
          in (absurd_elim_i1‹??287› ??286 (nat_absurd_i46 ??285 e3_v933))
      end
    | String_c7 c1_v936 s1_v937 ⇒
      match s2_v920 as s0_v938 in
        ∀ (__v939 :
          n_v918 ≡ (strlen_i21 (String_c7‹› c1_v936 s1_v937))) →
          ∀ (__v940 : n_v918 ≡ (strlen_i21 s0_v938)) →
            n_v918 ≡
              (strlen_i21
                (string_diff_i49 (String_c7‹› c1_v936 s1_v937) s0_v938)) with
      | EmptyString_c6  ⇒
        fn (e1_v941 : ??273) (e2_v942 : ??274) ⇒
          let e3_v943 =
            rew [n_v944, __v945 ⇒ n_v944 ≡ 0] e1_v941 in e2_v942
          in (absurd_elim_i1‹??278› ??277 (nat_absurd_i46 ??276 e3_v943))
      | String_c7 c2_v946 s2_v947 ⇒
        fn (e1_v948 : ??244) (e2_v949 : ??245) ⇒
          (match n_v918 as n0_v950 in
             ∀ (__v951 : n_v918 ≡ n0_v950) →
               n0_v950 ≡
                 (strlen_i21
                   (string_diff_i49
                     (String_c7‹› c1_v936 s1_v937)
                     (String_c7‹› c2_v946 s2_v947))) with
           | O ⇒
             fn (e0_v952 : ??267) ⇒
               let e3_v953 =
                 rew [n_v954, __v955 ⇒ n_v954 ≡ 0] e1_v948 in e0_v952
               in
               (absurd_elim_i1‹??271›
                 ??270 (nat_absurd_i46 ??269 e3_v953))
           | S n0_v956 ⇒
             fn (e0_v957 : ??248) ⇒
               let e3_v958 =
                 rew [n1_v959, __v960 ⇒
                   n1_v959 ≡ (strlen_i21 s1_v937).+1] e0_v957 in
                 e1_v948
               in
               let e4_v961 =
                 rew [n1_v962, __v963 ⇒
                   n1_v962 ≡ (strlen_i21 s2_v947).+1] e0_v957 in
                 e2_v949
               in
               let e5_v964 = (nat_inv_i47 ??252 ??251 e3_v958) in
               let e6_v965 = (nat_inv_i47 ??254 ??253 e4_v961) in
               match (eqc_i18 c1_v936 c2_v946) as b0_v966 in
                 n0_v956.+1 ≡
                   (strlen_i21
                     match b0_v966 as __v967 in ??255 with
                     | true ⇒
                       (cats_i20 "Y" (string_diff_i49 s1_v937 s2_v947))
                     | false ⇒
                       (cats_i20 "N" (string_diff_i49 s1_v937 s2_v947))
                     end) with
               | true ⇒
                 rew [n1_v968, __v969 ⇒ n0_v956.+1 ≡ n1_v968.+1]
                   (string_diff_len_i50 ??264 ??263 ??262 e5_v964 e6_v965) in
                 refl ??265
               | false ⇒
                 rew [n1_v970, __v971 ⇒ n0_v956.+1 ≡ n1_v970.+1]
                   (string_diff_len_i50 ??259 ??258 ??257 e5_v964 e6_v965) in
                 refl ??260
               end
           end refl ??272)
      end
    end

program word_diff_i51 : word_d8 → word_d8 → word_d8 =
  fn (w1_v974 : word_d8) (w2_v975 : word_d8) ⇒
    match w1_v974 as __v976 in ??290 with
    | Word_c12 s1_v977 pf1_v978 ⇒
      match w2_v975 as __v979 in ??291 with
      | Word_c12 s2_v980 pf2_v981 ⇒
        let {pf1_v982} = (eq_sym_i43‹??295› ??294 ??293 ??292 pf1_v978)
        in
        let {pf2_v983} = (eq_sym_i43‹??299› ??298 ??297 ??296 pf2_v981)
        in
        let {pf_v984} =
          (string_diff_len_i50 ??302 ??301 ??300 pf1_v982 pf2_v983)
        in
        (Word_c12‹›
          (string_diff_i49 s1_v977 s2_v980)
          (eq_sym_i43‹??306› ??305 ??304 ??303 pf_v984))
      end
    end

program eqw_i52 : word_d8 → word_d8 → bool =
  fn (w1_v987 : word_d8) (w2_v988 : word_d8) ⇒
    match w1_v987 as __v989 in ??307 with
    | Word_c12 s1_v990 __v991 ⇒
      match w2_v988 as __v992 in ??308 with
      | Word_c12 s2_v993 __v994 ⇒ (eqs_i22 s1_v990 s2_v993)
      end
    end

logical wordle_loop_i53 : word_d8 → nat → proto =
  fn (ans_v997 : word_d8) (repeat_v998 : nat) ⇒
    match repeat_v998 as __v999 in ??309 with
    | O ⇒
      ⇑(w_v1000 : word_d8) ⇒ ⇑{__v1001 : w_v1000 ≡ ans_v997} ⇒ end
    | S repeat_v1002 ⇒
      ⇓(guess_v1003 : word_d8) ⇒
        ⇑(b_v1004 : bool) ⇒
          ⇑{__v1005 : b_v1004 ≡ (eqw_i52 ans_v997 guess_v1003)} ⇒
            match b_v1004 as __v1006 in ??311 with
            | true ⇒ end
            | false ⇒
              ⇑(w_v1007 : word_d8) ⇒
                ⇑{__v1008 :
                  w_v1007 ≡ (word_diff_i51 ans_v997 guess_v1003)} ⇒
                  (wordle_loop_i53 ans_v997 repeat_v1002)
            end
    end

logical wordle_i54 : proto =
  ⇑{ans_v1009 : word_d8} ⇒
    ⇑(repeat_v1010 : nat) ⇒ (wordle_loop_i53 ans_v1009 repeat_v1010)

logical loop_ch_i55 : word_d8 → nat → L =
  fn (ans_v1013 : word_d8) (repeat_v1014 : nat) ⇒
    ch⟨(wordle_loop_i53 ans_v1013 repeat_v1014)⟩

logical loop_hc_i56 : word_d8 → nat → L =
  fn (ans_v1017 : word_d8) (repeat_v1018 : nat) ⇒
    hc⟨(wordle_loop_i53 ans_v1017 repeat_v1018)⟩

logical wordle_ch_i57 : L = ch⟨wordle_i54⟩

logical wordle_hc_i58 : L = hc⟨wordle_i54⟩

program read_word_i59 : unit → IO word_d8 =
  fn (__v1020 : unit) ⇒
    let s_v1021 ⇐ (readline_i33 ()) in
    (match (eqn_i10 (strlen_i21 s_v1021) 5) as b0_v1022 in
       {(eqn_i10 (strlen_i21 s_v1021) 5) ≡ b0_v1022} → IO word_d8 with
     | true ⇒
       fn {e_v1024 : ??316} ⇒
         return (Word_c12‹›
                  s_v1021 (eqn_reflect_i48 ??318 ??317 e_v1024))
     | false ⇒
       fn {__v1025 : ??315} ⇒
         let __v1026 ⇐ (print_i34 "please input a word with length of 5\n")
         in (read_word_i59 ())
     end refl ??319)

program player_loop_i60 :
  ∀ {ans_v1027 : word_d8} →
    ∀ (repeat_v1028 : nat) →
      (loop_hc_i56 ans_v1027 repeat_v1028) → IO unit
=
  fn {ans_v1030 : word_d8} (repeat_v1031 : nat)
     (c_v1032 : (loop_hc_i56 ans_v1030 repeat_v1031)) ⇒
    (match repeat_v1031 as repeat0_v1033 in
       (loop_hc_i56 ans_v1030 repeat0_v1033) → IO unit with
     | O ⇒
       fn (c_v1035 : ??330) ⇒
         let __v1036 ⇐ recv c_v1035 in
         match __v1036 as __v1037 in ??333 with
         | ⟨ans_v1038, c_v1039⟩ ⇒
           let __v1040 ⇐ recv c_v1039 in
           match __v1040 as __v1041 in ??332 with
           | ⟨{pf_v1042}, c_v1043⟩ ⇒
             match ans_v1038 as __v1044 in ??331 with
             | Word_c12 s_v1045 __v1046 ⇒
               let __v1047 ⇐
                 (print_i34
                   (cats_i20
                     (cats_i20 "You Lose! The answer is " s_v1045) ".\n"))
               in close c_v1043
             end
           end
         end
     | S repeat_v1048 ⇒
       fn (c_v1049 : ??320) ⇒
         let guess_v1050 ⇐ (read_word_i59 ()) in
         let c_v1051 ⇐ (send c_v1049 guess_v1050) in
         let __v1052 ⇐ recv c_v1051 in
         match __v1052 as __v1053 in ??329 with
         | ⟨b_v1054, c_v1055⟩ ⇒
           let __v1056 ⇐ recv c_v1055 in
           match __v1056 as __v1057 in ??328 with
           | ⟨{pf_v1058}, c_v1059⟩ ⇒
             (match b_v1054 as b0_v1060 in
                hc⟨match b0_v1060 as __v1062 in ??321 with
                     | true ⇒ end
                     | false ⇒
                       ⇑(w_v1063 : word_d8) ⇒
                         ⇑{__v1064 :
                           w_v1063 ≡ (word_diff_i51 ans_v1030 guess_v1050)} ⇒
                           (wordle_loop_i53 ans_v1030 repeat_v1048)
                     end⟩ ⊸
                  IO unit with
              | true ⇒
                ln (c_v1065 : ??327) ⇒
                  let __v1066 ⇐ (print_i34 "You Win!\n") in close c_v1065
              | false ⇒
                ln (c_v1067 : ??323) ⇒
                  let __v1068 ⇐ recv c_v1067 in
                  match __v1068 as __v1069 in ??326 with
                  | ⟨diff_v1070, c_v1071⟩ ⇒
                    let __v1072 ⇐ recv c_v1071 in
                    match __v1072 as __v1073 in ??325 with
                    | ⟨{pf_v1074}, c_v1075⟩ ⇒
                      match diff_v1070 as __v1076 in ??324 with
                      | Word_c12 s_v1077 __v1078 ⇒
                        let __v1079 ⇐
                          (print_i34
                            (cats_i20
                              (cats_i20
                                (cats_i20
                                  (cats_i20 "Incorrect, hint: " s_v1077)
                                  ". You have ")
                                (string_of_nat_i39 repeat_v1048))
                              " more tries.\n"))
                        in (player_loop_i60 ans_v1030 repeat_v1048 c_v1075)
                      end
                    end
                  end
              end c_v1059)
           end
         end
     end c_v1032)

program player_i61 : wordle_hc_i58 → IO unit =
  fn (c_v1081 : wordle_hc_i58) ⇒
    let __v1082 ⇐ recv c_v1081 in
    match __v1082 as __v1083 in ??335 with
    | ⟨{ans_v1084}, c_v1085⟩ ⇒
      let __v1086 ⇐ recv c_v1085 in
      match __v1086 as __v1087 in ??334 with
      | ⟨repeat_v1088, c_v1089⟩ ⇒
        let __v1090 ⇐ (print_i34 "Wordle Game\n") in
        let __v1091 ⇐ (print_i34 "Please guess a word of length 5.\n") in
        let __v1092 ⇐
          (print_i34
            (cats_i20
              (cats_i20 "You have " (string_of_nat_i39 repeat_v1088))
              " tries.\n"))
        in (player_loop_i60 ans_v1084 repeat_v1088 c_v1089)
      end
    end

program server_loop_i62 :
  ∀ (ans_v1093 : word_d8) →
    ∀ (repeat_v1094 : nat) →
      (loop_ch_i55 ans_v1093 repeat_v1094) → IO unit
=
  fn (ans_v1096 : word_d8) (repeat_v1097 : nat)
     (c_v1098 : (loop_ch_i55 ans_v1096 repeat_v1097)) ⇒
    (match repeat_v1097 as repeat0_v1099 in
       (loop_ch_i55 ans_v1096 repeat0_v1099) → IO unit with
     | O ⇒
       fn (c_v1101 : ??344) ⇒
         let c_v1102 ⇐ (send c_v1101 ans_v1096) in
         let c_v1103 ⇐ (send c_v1102 refl ??345) in close c_v1103
     | S repeat_v1104 ⇒
       fn (c_v1105 : ??336) ⇒
         let __v1106 ⇐ recv c_v1105 in
         match __v1106 as __v1107 in ??343 with
         | ⟨guess_v1108, c_v1109⟩ ⇒
           let b_v1110 = (eqw_i52 ans_v1096 guess_v1108) in
           let c_v1111 ⇐ (send c_v1109 b_v1110) in
           let c_v1112 ⇐ (send c_v1111 refl ??337) in
           (match b_v1110 as b0_v1113 in
              ch⟨match b0_v1113 as __v1115 in ??338 with
                   | true ⇒ end
                   | false ⇒
                     ⇑(w_v1116 : word_d8) ⇒
                       ⇑{__v1117 :
                         w_v1116 ≡ (word_diff_i51 ans_v1096 guess_v1108)} ⇒
                         (wordle_loop_i53 ans_v1096 repeat_v1104)
                   end⟩ ⊸
                IO unit with
            | true ⇒ ln (c_v1118 : ??342) ⇒ close c_v1118
            | false ⇒
              ln (c_v1119 : ??340) ⇒
                let c_v1120 ⇐
                  (send c_v1119 (word_diff_i51 ans_v1096 guess_v1108))
                in
                let c_v1121 ⇐ (send c_v1120 refl ??341) in
                (server_loop_i62 ans_v1096 repeat_v1104 c_v1121)
            end c_v1112)
         end
     end c_v1098)

program server_i63 : wordle_ch_i57 → IO unit =
  fn (c_v1123 : wordle_ch_i57) ⇒
    let repeat_v1124 = 5 in
    let ans_v1125 = (Word_c12‹› "world" refl ??346) in
    let c_v1126 ⇐ (send c_v1123 ans_v1125) in
    let c_v1127 ⇐ (send c_v1126 repeat_v1124) in
    (server_loop_i62 ans_v1125 repeat_v1124 c_v1127)

program main_i64 : IO unit =
  let c_v1128 ⇐ fork (c_v1129 : wordle_ch_i57) in (server_i63 c_v1129) in
  let c0_v1130 ⇐
    fork (c0_v1131 :
      ch⟨⇓(__v1132 : wordle_hc_i58) ⇒ ⇑(__v1133 : unit) ⇒ end⟩)
    in
      let __v1134 ⇐ recv c0_v1131 in
      match __v1134 as __v1135 in ??347 with
      | ⟨c_v1136, c0_v1137⟩ ⇒
        let __v1138 ⇐ (player_i61 c_v1136) in
        let c0_v1139 ⇐ (send c0_v1137 ()) in close c0_v1139
      end
  in
  let c0_v1140 ⇐ (send c0_v1130 c_v1128) in
  let __v1141 ⇐ recv c0_v1140 in
  match __v1141 as __v1142 in ??348 with
  | ⟨__v1143, c0_v1144⟩ ⇒ close c0_v1144
  end

trans01 success--------------------------

inductive absurd_d1 : U =


logical absurd_elim_i1 ‹s_s137086› :
  ∀ (A_v137087 : Type‹s_s137086›) → absurd_d1 → A_v137087
=
  fn (A_v137089 : Type‹s_s137086›) (p_v137090 : absurd_d1) ⇒
    match p_v137090 as __v137091 in A_v137089 with
    
    end

inductive order_d2 : U =
| LT_c1 of : order_d2 | GT_c2 of : order_d2 | EQ_c3 of : order_d2

program andb_i2 : bool → bool → bool =
  fn (b1_v137094 : bool) (b2_v137095 : bool) ⇒
    match b1_v137094 as __v137096 in bool with
    | true ⇒ b2_v137095 | false ⇒ false
    end

program orb_i3 : bool → bool → bool =
  fn (b1_v137099 : bool) (b2_v137100 : bool) ⇒
    match b1_v137099 as __v137101 in bool with
    | true ⇒ true | false ⇒ b2_v137100
    end

program notb_i4 : bool → bool =
  fn (b_v137103 : bool) ⇒
    match b_v137103 as __v137104 in bool with
    | true ⇒ false | false ⇒ true
    end

program compareb_i5 : bool → bool → order_d2 =
  fn (b1_v137107 : bool) (b2_v137108 : bool) ⇒
    match b1_v137107 as __v137109 in order_d2 with
    | true ⇒
      match b2_v137108 as __v137110 in order_d2 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v137108 as __v137111 in order_d2 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i6 : nat → nat → bool =
  fn (x_v137114 : nat) (y_v137115 : nat) ⇒
    match x_v137114 as __v137116 in bool with
    | O ⇒ true
    | S x_v137117 ⇒
      match y_v137115 as __v137118 in bool with
      | O ⇒ false | S y_v137119 ⇒ (lten_i6 x_v137117 y_v137119)
      end
    end

program gten_i7 : nat → nat → bool =
  fn (x_v137122 : nat) (y_v137123 : nat) ⇒
    match x_v137122 as __v137124 in bool with
    | O ⇒
      match y_v137123 as __v137125 in bool with
      | O ⇒ true | S __v137126 ⇒ false
      end
    | S x_v137127 ⇒
      match y_v137123 as __v137128 in bool with
      | O ⇒ true | S y_v137129 ⇒ (gten_i7 x_v137127 y_v137129)
      end
    end

program ltn_i8 : nat → nat → bool =
  fn (x_v137132 : nat) (y_v137133 : nat) ⇒
    match x_v137132 as __v137134 in bool with
    | O ⇒
      match y_v137133 as __v137135 in bool with
      | O ⇒ false | S y_v137136 ⇒ true
      end
    | S x_v137137 ⇒
      match y_v137133 as __v137138 in bool with
      | O ⇒ false | S y_v137139 ⇒ (ltn_i8 x_v137137 y_v137139)
      end
    end

program gtn_i9 : nat → nat → bool =
  fn (x_v137142 : nat) (y_v137143 : nat) ⇒
    match x_v137142 as __v137144 in bool with
    | O ⇒ false
    | S x_v137145 ⇒
      match y_v137143 as __v137146 in bool with
      | O ⇒ true | S y_v137147 ⇒ (gtn_i9 x_v137145 y_v137147)
      end
    end

program eqn_i10 : nat → nat → bool =
  fn (x_v137150 : nat) (y_v137151 : nat) ⇒
    match x_v137150 as __v137152 in bool with
    | O ⇒
      match y_v137151 as __v137153 in bool with
      | O ⇒ true | S __v137154 ⇒ false
      end
    | S x_v137155 ⇒
      match y_v137151 as __v137156 in bool with
      | O ⇒ false | S y_v137157 ⇒ (eqn_i10 x_v137155 y_v137157)
      end
    end

program comparen_i11 : nat → nat → order_d2 =
  fn (n1_v137160 : nat) (n2_v137161 : nat) ⇒
    match n1_v137160 as __v137162 in order_d2 with
    | O ⇒
      match n2_v137161 as __v137163 in order_d2 with
      | O ⇒ EQ_c3‹› | S __v137164 ⇒ LT_c1‹›
      end
    | S n1_v137165 ⇒
      match n2_v137161 as __v137166 in order_d2 with
      | O ⇒ GT_c2‹›
      | S n2_v137167 ⇒ (comparen_i11 n1_v137165 n2_v137167)
      end
    end

program pred_i12 : nat → nat =
  fn (x_v137169 : nat) ⇒
    match x_v137169 as __v137170 in nat with
    | O ⇒ 0 | S x_v137171 ⇒ x_v137171
    end

program addn_i13 : nat → nat → nat =
  fn (x_v137174 : nat) (y_v137175 : nat) ⇒
    match x_v137174 as __v137176 in nat with
    | O ⇒ y_v137175 | S x_v137177 ⇒ (addn_i13 x_v137177 y_v137175).+1
    end

program subn_i14 : nat → nat → nat =
  fn (x_v137180 : nat) (y_v137181 : nat) ⇒
    match y_v137181 as __v137182 in nat with
    | O ⇒ x_v137180
    | S y_v137183 ⇒ (subn_i14 (pred_i12 x_v137180) y_v137183)
    end

program muln_i15 : nat → nat → nat =
  fn (x_v137186 : nat) (y_v137187 : nat) ⇒
    match x_v137186 as __v137188 in nat with
    | O ⇒ 0
    | S x_v137189 ⇒ (addn_i13 y_v137187 (muln_i15 x_v137189 y_v137187))
    end

program divn_i16 : nat → nat → nat =
  fn (x_v137192 : nat) (y_v137193 : nat) ⇒
    match (ltn_i8 x_v137192 y_v137193) as __v137194 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i16 (subn_i14 x_v137192 y_v137193) y_v137193).+1
    end

program modn_i17 : nat → nat → nat =
  fn (x_v137197 : nat) (y_v137198 : nat) ⇒
    (subn_i14 x_v137197 (muln_i15 (divn_i16 x_v137197 y_v137198) y_v137198))

inductive between_d3 (lower_v137199 : nat) (upper_v137200 : nat) : L =
| Between_c4 of
    (lower_v137201 : nat) (upper_v137202 : nat) (n_v137203 : nat)
    {pf1_v137204 : (lten_i6 lower_v137201 n_v137203) ≡ true}
    {pf2_v137205 : (lten_i6 n_v137203 upper_v137202) ≡ true}
    : (between_d3 lower_v137201 upper_v137202)

inductive char_d4 : U =
| Char_c5 of (n_v137206 : nat) : char_d4

program eqc_i18 : char_d4 → char_d4 → bool =
  fn (c1_v137209 : char_d4) (c2_v137210 : char_d4) ⇒
    match c1_v137209 as __v137211 in bool with
    | Char_c5 n1_v137212 ⇒
      match c2_v137210 as __v137213 in bool with
      | Char_c5 n2_v137214 ⇒ (eqn_i10 n1_v137212 n2_v137214)
      end
    end

program comparec_i19 : char_d4 → char_d4 → order_d2 =
  fn (c1_v137217 : char_d4) (c2_v137218 : char_d4) ⇒
    match c1_v137217 as __v137219 in order_d2 with
    | Char_c5 n1_v137220 ⇒
      match c2_v137218 as __v137221 in order_d2 with
      | Char_c5 n2_v137222 ⇒ (comparen_i11 n1_v137220 n2_v137222)
      end
    end

inductive string_d5 : U =
| EmptyString_c6 of : string_d5
| String_c7 of (c_v137223 : char_d4) (s_v137224 : string_d5) : string_d5

program cats_i20 : string_d5 → string_d5 → string_d5 =
  fn (s1_v137227 : string_d5) (s2_v137228 : string_d5) ⇒
    match s1_v137227 as __v137229 in string_d5 with
    | EmptyString_c6  ⇒ s2_v137228
    | String_c7 c_v137230 s1_v137231 ⇒
      (String_c7‹› c_v137230 (cats_i20 s1_v137231 s2_v137228))
    end

program strlen_i21 : string_d5 → nat =
  fn (s_v137233 : string_d5) ⇒
    match s_v137233 as __v137234 in nat with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v137235 s_v137236 ⇒ (strlen_i21 s_v137236).+1
    end

program eqs_i22 : string_d5 → string_d5 → bool =
  fn (s1_v137239 : string_d5) (s2_v137240 : string_d5) ⇒
    match s1_v137239 as __v137241 in bool with
    | EmptyString_c6  ⇒
      match s2_v137240 as __v137242 in bool with
      | EmptyString_c6  ⇒ true | String_c7 __v137243 __v137244 ⇒ false
      end
    | String_c7 c1_v137245 s1_v137246 ⇒
      match s2_v137240 as __v137247 in bool with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v137248 s2_v137249 ⇒
        (andb_i2
          (eqc_i18 c1_v137245 c2_v137248) (eqs_i22 s1_v137246 s2_v137249))
      end
    end

program compares_i23 : string_d5 → string_d5 → order_d2 =
  fn (s1_v137252 : string_d5) (s2_v137253 : string_d5) ⇒
    match s1_v137252 as __v137254 in order_d2 with
    | EmptyString_c6  ⇒
      match s2_v137253 as __v137255 in order_d2 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v137256 __v137257 ⇒ LT_c1‹›
      end
    | String_c7 c1_v137258 s1_v137259 ⇒
      match s2_v137253 as __v137260 in order_d2 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v137261 s2_v137262 ⇒
        match (comparec_i19 c1_v137258 c2_v137261) as __v137263 in
          order_d2 with
        | EQ_c3  ⇒ (compares_i23 s1_v137259 s2_v137262)
        | LT_c1  ⇒ LT_c1‹› | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d6 ‹s_s137264, t_s137265›
  (A_v137266 : Type‹s_s137264›) : Type‹t_s137265›
=
| None_c8 of
    ‹s_s137267, t_s137268› (A_v137269 : Type‹s_s137267›)
    : (option_d6‹s_s137267, t_s137268› A_v137269)
| Some_c9 of
    ‹s_s137270, t_s137271› (A_v137272 : Type‹s_s137270›)
    (x_v137273 : A_v137272) : (option_d6‹s_s137270, t_s137271› A_v137272)

program and_then_i24 ‹s_s137274, r_s137275, t_s137276› :
  ∀ {A_v137277 : Type‹s_s137274›} →
    ∀ {B_v137278 : Type‹r_s137275›} →
      (option_d6‹s_s137274, t_s137276› A_v137277) →
        A_v137277 → (option_d6‹r_s137275, t_s137276› B_v137278) ⊸
          (option_d6‹r_s137275, t_s137276› B_v137278)
=
  fn {A_v137282 : Type‹s_s137274›} {B_v137283 : Type‹r_s137275›}
     (opt_v137284 : (option_d6‹s_s137274, t_s137276› A_v137282)) ⇒
    ln (f_v137285 : A_v137282 →
                      (option_d6‹r_s137275, t_s137276› B_v137283)) ⇒
      match opt_v137284 as __v137287 in
        (option_d6‹r_s137275, t_s137276› B_v137283) with
      | None_c8  ⇒ None_c8‹r_s137275, t_s137276›
      | Some_c9 x_v137288 ⇒ (f_v137285 x_v137288)
      end

inductive list_d7 ‹s_s137289, t_s137290›
  (A_v137291 : Type‹s_s137289›) : Type‹t_s137290›
=
| nil_c10 of
    ‹s_s137292, t_s137293› (A_v137294 : Type‹s_s137292›)
    : (list_d7‹s_s137292, t_s137293› A_v137294)
| cons_c11 of
    ‹s_s137295, t_s137296› (A_v137297 : Type‹s_s137295›)
    (hd_v137298 : A_v137297)
    (tl_v137299 : (list_d7‹s_s137295, t_s137296› A_v137297))
    : (list_d7‹s_s137295, t_s137296› A_v137297)

program len_i25 ‹s_s137300, t_s137301› :
  ∀ {A_v137302 : Type‹s_s137300›} →
    (list_d7‹s_s137300, t_s137301› A_v137302) →
      nat ⊗ (list_d7‹s_s137300, t_s137301› A_v137302)
=
  fn {A_v137305 : Type‹s_s137300›}
     (xs_v137306 : (list_d7‹s_s137300, t_s137301› A_v137305)) ⇒
    match xs_v137306 as __v137307 in
      nat ⊗ (list_d7‹s_s137300, t_s137301› A_v137305) with
    | nil_c10  ⇒ ⟨0, nil_c10‹s_s137300, t_s137301›⟩
    | cons_c11 x_v137309 xs_v137310 ⇒
      match (len_i25‹s_s137300, t_s137301› A_v137305 xs_v137310) as __v137311 in
        nat ⊗ (list_d7‹s_s137300, t_s137301› A_v137305) with
      | ⟨n_v137313, xs_v137314⟩ ⇒
        ⟨n_v137313.+1, (cons_c11‹s_s137300, t_s137301›
                           x_v137309 xs_v137314)⟩
      end
    end

program append_i26 ‹s_s137315, t_s137316› :
  ∀ {A_v137317 : Type‹s_s137315›} →
    (list_d7‹s_s137315, t_s137316› A_v137317) →
      (list_d7‹s_s137315, t_s137316› A_v137317) ⊸
        (list_d7‹s_s137315, t_s137316› A_v137317)
=
  fn {A_v137320 : Type‹s_s137315›}
     (xs_v137321 : (list_d7‹s_s137315, t_s137316› A_v137320)) ⇒
    ln (ys_v137322 : (list_d7‹s_s137315, t_s137316› A_v137320)) ⇒
      match xs_v137321 as __v137323 in
        (list_d7‹s_s137315, t_s137316› A_v137320) with
      | nil_c10  ⇒ ys_v137322
      | cons_c11 x_v137324 xs_v137325 ⇒
        (cons_c11‹s_s137315, t_s137316›
          x_v137324
          (append_i26‹s_s137315, t_s137316›
            A_v137320 xs_v137325 ys_v137322))
      end

logical stdin_rec_i27 : unit → proto =
  fn (__v137327 : unit) ⇒
    ⇑(b_v137328 : bool) ⇒
      match b_v137328 as __v137329 in proto with
      | true ⇒ ⇓(__v137330 : string_d5) ⇒ (stdin_rec_i27 ())
      | false ⇒ end
      end

logical stdout_rec_i28 : unit → proto =
  fn (__v137332 : unit) ⇒
    ⇑(b_v137333 : bool) ⇒
      match b_v137333 as __v137334 in proto with
      | true ⇒ ⇑(__v137335 : string_d5) ⇒ (stdout_rec_i28 ())
      | false ⇒ end
      end

logical stderr_rec_i29 : unit → proto =
  fn (__v137337 : unit) ⇒
    ⇑(b_v137338 : bool) ⇒
      match b_v137338 as __v137339 in proto with
      | true ⇒ ⇑(__v137340 : string_d5) ⇒ (stderr_rec_i29 ())
      | false ⇒ end
      end

logical stdin_t_i30 : proto = (stdin_rec_i27 ())

logical stdout_t_i31 : proto = (stdout_rec_i28 ())

logical stderr_t_i32 : proto = (stderr_rec_i29 ())

program readline_i33 : unit → IO string_d5 =
  fn (__v137342 : unit) ⇒
    let ch_v137343 ⇐ open stdin in
    let ch_v137344 ⇐ (send ch_v137343 true) in
    let __v137345 ⇐ recv ch_v137344 in
    match __v137345 as __v137346 in IO string_d5 with
    | ⟨s_v137347, ch_v137348⟩ ⇒
      let ch_v137349 ⇐ (send ch_v137348 false) in
      let __v137350 ⇐ close ch_v137349 in return s_v137347
    end

program print_i34 : string_d5 → IO unit =
  fn (s_v137352 : string_d5) ⇒
    let ch_v137353 ⇐ open stdout in
    let ch_v137354 ⇐ (send ch_v137353 true) in
    let ch_v137355 ⇐ (send ch_v137354 s_v137352) in
    let ch_v137356 ⇐ (send ch_v137355 false) in close ch_v137356

program prerr_i35 : string_d5 → IO unit =
  fn (s_v137358 : string_d5) ⇒
    let ch_v137359 ⇐ open stderr in
    let ch_v137360 ⇐ (send ch_v137359 true) in
    let ch_v137361 ⇐ (send ch_v137360 s_v137358) in
    let ch_v137362 ⇐ (send ch_v137361 false) in close ch_v137362

program digits_i36 : (list_d7‹U, U› string_d5) =
  (cons_c11‹U, U›
    "0"
    (cons_c11‹U, U›
      "1"
      (cons_c11‹U, U›
        "2"
        (cons_c11‹U, U›
          "3"
          (cons_c11‹U, U›
            "4"
            (cons_c11‹U, U›
              "5"
              (cons_c11‹U, U›
                "6"
                (cons_c11‹U, U›
                  "7"
                  (cons_c11‹U, U›
                    "8" (cons_c11‹U, U› "9" nil_c10‹U, U›))))))))))

program get_at_i37 :
  ∀ {A_v137363 : U} →
    nat → (list_d7‹U, U› A_v137363) → A_v137363 → A_v137363
=
  fn {A_v137367 : U} (n_v137368 : nat)
     (xs_v137369 : (list_d7‹U, U› A_v137367)) (a_v137370 : A_v137367) ⇒
    match n_v137368 as __v137371 in A_v137367 with
    | O ⇒
      match xs_v137369 as __v137372 in A_v137367 with
      | nil_c10  ⇒ a_v137370 | cons_c11 x_v137373 __v137374 ⇒ x_v137373
      end
    | S n_v137375 ⇒
      match xs_v137369 as __v137376 in A_v137367 with
      | nil_c10  ⇒ a_v137370
      | cons_c11 __v137377 xs_v137378 ⇒
        (get_at_i37 A_v137367 n_v137375 xs_v137378 a_v137370)
      end
    end

program string_of_digit_i38 : nat → string_d5 =
  fn (n_v137380 : nat) ⇒
    (get_at_i37 string_d5 n_v137380 digits_i36 EmptyString_c6‹›)

program string_of_nat_i39 : nat → string_d5 =
  fn (n_v137382 : nat) ⇒
    let s_v137383 = (string_of_digit_i38 (modn_i17 n_v137382 10)) in
    let n_v137384 = (divn_i16 n_v137382 10) in
    match (ltn_i8 0 n_v137384) as __v137385 in string_d5 with
    | true ⇒ (cats_i20 (string_of_nat_i39 n_v137384) s_v137383)
    | false ⇒ s_v137383
    end

program digit_of_char_i40 : char_d4 → (option_d6‹U, L› nat) =
  fn (c_v137387 : char_d4) ⇒
    match (eqc_i18 c_v137387 '0') as __v137388 in
      (option_d6‹U, L› nat) with
    | true ⇒ (Some_c9‹U, L› 0)
    | false ⇒
      match (eqc_i18 c_v137387 '1') as __v137389 in
        (option_d6‹U, L› nat) with
      | true ⇒ (Some_c9‹U, L› 1)
      | false ⇒
        match (eqc_i18 c_v137387 '2') as __v137390 in
          (option_d6‹U, L› nat) with
        | true ⇒ (Some_c9‹U, L› 2)
        | false ⇒
          match (eqc_i18 c_v137387 '3') as __v137391 in
            (option_d6‹U, L› nat) with
          | true ⇒ (Some_c9‹U, L› 3)
          | false ⇒
            match (eqc_i18 c_v137387 '4') as __v137392 in
              (option_d6‹U, L› nat) with
            | true ⇒ (Some_c9‹U, L› 4)
            | false ⇒
              match (eqc_i18 c_v137387 '5') as __v137393 in
                (option_d6‹U, L› nat) with
              | true ⇒ (Some_c9‹U, L› 5)
              | false ⇒
                match (eqc_i18 c_v137387 '6') as __v137394 in
                  (option_d6‹U, L› nat) with
                | true ⇒ (Some_c9‹U, L› 6)
                | false ⇒
                  match (eqc_i18 c_v137387 '7') as __v137395 in
                    (option_d6‹U, L› nat) with
                  | true ⇒ (Some_c9‹U, L› 7)
                  | false ⇒
                    match (eqc_i18 c_v137387 '8') as __v137396 in
                      (option_d6‹U, L› nat) with
                    | true ⇒ (Some_c9‹U, L› 8)
                    | false ⇒
                      match (eqc_i18 c_v137387 '9') as __v137397 in
                        (option_d6‹U, L› nat) with
                      | true ⇒ (Some_c9‹U, L› 9)
                      | false ⇒ None_c8‹U, L›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i41 :
  string_d5 → nat → (option_d6‹U, L› nat)
=
  fn (s_v137400 : string_d5) (acc_v137401 : nat) ⇒
    match s_v137400 as __v137402 in (option_d6‹U, L› nat) with
    | EmptyString_c6  ⇒ (Some_c9‹U, L› acc_v137401)
    | String_c7 c_v137403 s_v137404 ⇒
      match (digit_of_char_i40 c_v137403) as __v137405 in
        (option_d6‹U, L› nat) with
      | None_c8  ⇒ None_c8‹U, L›
      | Some_c9 n_v137406 ⇒
        (nat_of_string_loop_i41
          s_v137404 (addn_i13 (muln_i15 acc_v137401 10) n_v137406))
      end
    end

program nat_of_string_i42 : string_d5 → (option_d6‹U, L› nat) =
  fn (s_v137408 : string_d5) ⇒ (nat_of_string_loop_i41 s_v137408 0)

logical eq_sym_i43 ‹s_s137409› :
  ∀ (A_v137410 : Type‹s_s137409›) →
    ∀ (x_v137411 : A_v137410) →
      ∀ (y_v137412 : A_v137410) →
        x_v137411 ≡ y_v137412 → y_v137412 ≡ x_v137411
=
  fn (A_v137414 : Type‹s_s137409›) (x_v137415 : A_v137414)
     (y_v137416 : A_v137414) (e_v137417 : x_v137415 ≡ y_v137416) ⇒
    rew [y_v137418, __v137419 ⇒ y_v137418 ≡ x_v137415] e_v137417 in
    refl x_v137415

logical f_equal_i44 ‹s_s137420, t_s137421› :
  ∀ (A_v137422 : Type‹s_s137420›) →
    ∀ (B_v137423 : Type‹t_s137421›) →
      ∀ (f_v137424 : A_v137422 → B_v137423) →
        ∀ (x_v137426 : A_v137422) →
          ∀ (y_v137427 : A_v137422) →
            x_v137426 ≡ y_v137427 →
              (f_v137424 x_v137426) ≡ (f_v137424 y_v137427)
=
  fn (A_v137429 : Type‹s_s137420›) (B_v137430 : Type‹t_s137421›)
     (f_v137431 : A_v137429 → B_v137430) (x_v137432 : A_v137429)
     (y_v137433 : A_v137429) (e_v137434 : x_v137432 ≡ y_v137433) ⇒
    rew [y_v137436, p_v137437 ⇒
      (f_v137431 x_v137432) ≡ (f_v137431 y_v137436)] e_v137434 in
    refl (f_v137431 x_v137432)

logical bool_absurd_i45 : true ≡ false → absurd_d1 =
  fn (e_v137439 : true ≡ false) ⇒
    rew [x_v137440, __v137441 ⇒
      match x_v137440 as __v137442 in U with
      | true ⇒ unit | false ⇒ absurd_d1
      end] e_v137439 in
    ()

logical nat_absurd_i46 :
  ∀ (n_v137443 : nat) → n_v137443.+1 ≡ 0 → absurd_d1
=
  fn (n_v137445 : nat) (e_v137446 : n_v137445.+1 ≡ 0) ⇒
    rew [x_v137447, __v137448 ⇒
      match x_v137447 as __v137449 in U with
      | O ⇒ absurd_d1 | S __v137450 ⇒ unit
      end] e_v137446 in
    ()

logical nat_inv_i47 :
  ∀ (n1_v137451 : nat) →
    ∀ (n2_v137452 : nat) →
      n1_v137451.+1 ≡ n2_v137452.+1 → n1_v137451 ≡ n2_v137452
=
  fn (n1_v137454 : nat) (n2_v137455 : nat)
     (e_v137456 : n1_v137454.+1 ≡ n2_v137455.+1) ⇒
    (f_equal_i44‹U, U›
      nat nat pred_i12 n1_v137454.+1 n2_v137455.+1 e_v137456)

logical eqn_reflect_i48 :
  ∀ (m_v137457 : nat) →
    ∀ (n_v137458 : nat) →
      (eqn_i10 m_v137457 n_v137458) ≡ true → m_v137457 ≡ n_v137458
=
  fn (m_v137460 : nat) (n_v137461 : nat) ⇒
    match m_v137460 as m0_v137462 in
      (eqn_i10 m0_v137462 n_v137461) ≡ true → m0_v137462 ≡ n_v137461 with
    | O ⇒
      match n_v137461 as n0_v137464 in
        (eqn_i10 0 n0_v137464) ≡ true → 0 ≡ n0_v137464 with
      | O ⇒ fn (__v137466 : (eqn_i10 0 0) ≡ true) ⇒ refl 0
      | S n_v137467 ⇒
        fn (e_v137468 : (eqn_i10 0 n_v137467.+1) ≡ true) ⇒
          (absurd_elim_i1‹U›
            0 ≡ n_v137467.+1
            (bool_absurd_i45
              (eq_sym_i43‹U›
                bool (eqn_i10 0 n_v137467.+1) true e_v137468)))
      end
    | S m_v137469 ⇒
      match n_v137461 as n0_v137470 in
        (eqn_i10 m_v137469.+1 n0_v137470) ≡ true →
          m_v137469.+1 ≡ n0_v137470 with
      | O ⇒
        fn (e_v137472 : (eqn_i10 m_v137469.+1 0) ≡ true) ⇒
          (absurd_elim_i1‹U›
            m_v137469.+1 ≡ 0
            (bool_absurd_i45
              (eq_sym_i43‹U›
                bool (eqn_i10 m_v137469.+1 0) true e_v137472)))
      | S n_v137473 ⇒
        fn (e_v137474 : (eqn_i10 m_v137469.+1 n_v137473.+1) ≡ true) ⇒
          (f_equal_i44‹U, U›
            nat nat fn (x_v137475 : nat) ⇒ x_v137475.+1 m_v137469 n_v137473
            (eqn_reflect_i48 m_v137469 n_v137473 e_v137474))
      end
    end

inductive word_d8 : U =
| Word_c12 of
    (s_v137476 : string_d5) {pf_v137477 : (strlen_i21 s_v137476) ≡ 5}
    : word_d8

program string_diff_i49 : string_d5 → string_d5 → string_d5 =
  fn (s1_v137480 : string_d5) (s2_v137481 : string_d5) ⇒
    match s1_v137480 as __v137482 in string_d5 with
    | EmptyString_c6  ⇒ EmptyString_c6‹›
    | String_c7 c1_v137483 s1_v137484 ⇒
      match s2_v137481 as __v137485 in string_d5 with
      | EmptyString_c6  ⇒ EmptyString_c6‹›
      | String_c7 c2_v137486 s2_v137487 ⇒
        match (eqc_i18 c1_v137483 c2_v137486) as __v137488 in string_d5 with
        | true ⇒ (cats_i20 "Y" (string_diff_i49 s1_v137484 s2_v137487))
        | false ⇒ (cats_i20 "N" (string_diff_i49 s1_v137484 s2_v137487))
        end
      end
    end

logical string_diff_len_i50 :
  ∀ (n_v137489 : nat) →
    ∀ (s1_v137490 : string_d5) →
      ∀ (s2_v137491 : string_d5) →
        n_v137489 ≡ (strlen_i21 s1_v137490) →
          n_v137489 ≡ (strlen_i21 s2_v137491) →
            n_v137489 ≡
              (strlen_i21 (string_diff_i49 s1_v137490 s2_v137491))
=
  fn (n_v137494 : nat) (s1_v137495 : string_d5) (s2_v137496 : string_d5) ⇒
    match s1_v137495 as s0_v137497 in
      n_v137494 ≡ (strlen_i21 s0_v137497) →
        n_v137494 ≡ (strlen_i21 s2_v137496) →
          n_v137494 ≡ (strlen_i21 (string_diff_i49 s0_v137497 s2_v137496)) with
    | EmptyString_c6  ⇒
      match s2_v137496 as s0_v137500 in
        n_v137494 ≡ 0 →
          n_v137494 ≡ (strlen_i21 s0_v137500) → n_v137494 ≡ 0 with
      | EmptyString_c6  ⇒
        fn (e1_v137503 : n_v137494 ≡ 0)
           (__v137504 : n_v137494 ≡ (strlen_i21 EmptyString_c6‹›)) ⇒
          e1_v137503
      | String_c7 c2_v137505 s2_v137506 ⇒
        fn (e1_v137507 : n_v137494 ≡ 0)
           (e2_v137508 : n_v137494 ≡
                           (strlen_i21
                             (String_c7‹› c2_v137505 s2_v137506))) ⇒
          let e3_v137509 =
            rew [n_v137510, __v137511 ⇒ n_v137510 ≡ 0] e2_v137508 in
            e1_v137507
          in
          (absurd_elim_i1‹U›
            n_v137494 ≡ 0
            (nat_absurd_i46
              match s2_v137506 as __v137512 in nat with
              | EmptyString_c6  ⇒ 0
              | String_c7 __v137513 s_v137514 ⇒ (strlen_i21 s_v137514).+1
              end e3_v137509))
      end
    | String_c7 c1_v137515 s1_v137516 ⇒
      match s2_v137496 as s0_v137517 in
        n_v137494 ≡ (strlen_i21 (String_c7‹› c1_v137515 s1_v137516)) →
          n_v137494 ≡ (strlen_i21 s0_v137517) →
            n_v137494 ≡
              (strlen_i21
                (string_diff_i49
                  (String_c7‹› c1_v137515 s1_v137516) s0_v137517)) with
      | EmptyString_c6  ⇒
        fn (e1_v137520 : n_v137494 ≡
                           (strlen_i21
                             (String_c7‹› c1_v137515 s1_v137516)))
           (e2_v137521 : n_v137494 ≡ (strlen_i21 EmptyString_c6‹›)) ⇒
          let e3_v137522 =
            rew [n_v137523, __v137524 ⇒ n_v137523 ≡ 0] e1_v137520 in
            e2_v137521
          in
          (absurd_elim_i1‹U›
            n_v137494 ≡
              (strlen_i21
                (string_diff_i49
                  (String_c7‹› c1_v137515 s1_v137516)
                  EmptyString_c6‹›))
            (nat_absurd_i46
              match s1_v137516 as __v137525 in nat with
              | EmptyString_c6  ⇒ 0
              | String_c7 __v137526 s_v137527 ⇒ (strlen_i21 s_v137527).+1
              end e3_v137522))
      | String_c7 c2_v137528 s2_v137529 ⇒
        fn (e1_v137530 : n_v137494 ≡
                           (strlen_i21
                             (String_c7‹› c1_v137515 s1_v137516)))
           (e2_v137531 : n_v137494 ≡
                           (strlen_i21
                             (String_c7‹› c2_v137528 s2_v137529))) ⇒
          (match n_v137494 as n0_v137532 in
             n_v137494 ≡ n0_v137532 →
               n0_v137532 ≡
                 (strlen_i21
                   (string_diff_i49
                     (String_c7‹› c1_v137515 s1_v137516)
                     (String_c7‹› c2_v137528 s2_v137529))) with
           | O ⇒
             fn (e0_v137534 : n_v137494 ≡ 0) ⇒
               let e3_v137535 =
                 rew [n_v137536, __v137537 ⇒ n_v137536 ≡ 0] e1_v137530 in
                 e0_v137534
               in
               (absurd_elim_i1‹U›
                 0 ≡
                   (strlen_i21
                     (string_diff_i49
                       (String_c7‹› c1_v137515 s1_v137516)
                       (String_c7‹› c2_v137528 s2_v137529)))
                 (nat_absurd_i46
                   match s1_v137516 as __v137538 in nat with
                   | EmptyString_c6  ⇒ 0
                   | String_c7 __v137539 s_v137540 ⇒
                     (strlen_i21 s_v137540).+1
                   end e3_v137535))
           | S n0_v137541 ⇒
             fn (e0_v137542 : n_v137494 ≡ n0_v137541.+1) ⇒
               let e3_v137543 =
                 rew [n1_v137544, __v137545 ⇒
                   n1_v137544 ≡ (strlen_i21 s1_v137516).+1] e0_v137542 in
                 e1_v137530
               in
               let e4_v137546 =
                 rew [n1_v137547, __v137548 ⇒
                   n1_v137547 ≡ (strlen_i21 s2_v137529).+1] e0_v137542 in
                 e2_v137531
               in
               let e5_v137549 =
                 (nat_inv_i47 n0_v137541 (strlen_i21 s1_v137516) e3_v137543)
               in
               let e6_v137550 =
                 (nat_inv_i47 n0_v137541 (strlen_i21 s2_v137529) e4_v137546)
               in
               match (eqc_i18 c1_v137515 c2_v137528) as b0_v137551 in
                 n0_v137541.+1 ≡
                   (strlen_i21
                     match b0_v137551 as __v137552 in string_d5 with
                     | true ⇒
                       (cats_i20 "Y" (string_diff_i49 s1_v137516 s2_v137529))
                     | false ⇒
                       (cats_i20 "N" (string_diff_i49 s1_v137516 s2_v137529))
                     end) with
               | true ⇒
                 rew [n1_v137553, __v137554 ⇒
                   n0_v137541.+1 ≡ n1_v137553.+1]
                   (string_diff_len_i50
                     n0_v137541 s1_v137516 s2_v137529 e5_v137549 e6_v137550) in
                 refl n0_v137541.+1
               | false ⇒
                 rew [n1_v137555, __v137556 ⇒
                   n0_v137541.+1 ≡ n1_v137555.+1]
                   (string_diff_len_i50
                     n0_v137541 s1_v137516 s2_v137529 e5_v137549 e6_v137550) in
                 refl n0_v137541.+1
               end
           end refl n_v137494)
      end
    end

program word_diff_i51 : word_d8 → word_d8 → word_d8 =
  fn (w1_v137559 : word_d8) (w2_v137560 : word_d8) ⇒
    match w1_v137559 as __v137561 in word_d8 with
    | Word_c12 s1_v137562 pf1_v137563 ⇒
      match w2_v137560 as __v137564 in word_d8 with
      | Word_c12 s2_v137565 pf2_v137566 ⇒
        let {pf1_v137567} =
          (eq_sym_i43‹U› nat (strlen_i21 s1_v137562) 5 pf1_v137563)
        in
        let {pf2_v137568} =
          (eq_sym_i43‹U› nat (strlen_i21 s2_v137565) 5 pf2_v137566)
        in
        let {pf_v137569} =
          (string_diff_len_i50
            5 s1_v137562 s2_v137565 pf1_v137567 pf2_v137568)
        in
        (Word_c12‹›
          (string_diff_i49 s1_v137562 s2_v137565)
          (eq_sym_i43‹U›
            nat 5 (strlen_i21 (string_diff_i49 s1_v137562 s2_v137565))
            pf_v137569))
      end
    end

program eqw_i52 : word_d8 → word_d8 → bool =
  fn (w1_v137572 : word_d8) (w2_v137573 : word_d8) ⇒
    match w1_v137572 as __v137574 in bool with
    | Word_c12 s1_v137575 __v137576 ⇒
      match w2_v137573 as __v137577 in bool with
      | Word_c12 s2_v137578 __v137579 ⇒ (eqs_i22 s1_v137575 s2_v137578)
      end
    end

logical wordle_loop_i53 : word_d8 → nat → proto =
  fn (ans_v137582 : word_d8) (repeat_v137583 : nat) ⇒
    match repeat_v137583 as __v137584 in proto with
    | O ⇒
      ⇑(w_v137585 : word_d8) ⇒
        ⇑{__v137586 : w_v137585 ≡ ans_v137582} ⇒ end
    | S repeat_v137587 ⇒
      ⇓(guess_v137588 : word_d8) ⇒
        ⇑(b_v137589 : bool) ⇒
          ⇑{__v137590 :
            b_v137589 ≡ (eqw_i52 ans_v137582 guess_v137588)} ⇒
            match b_v137589 as __v137591 in proto with
            | true ⇒ end
            | false ⇒
              ⇑(w_v137592 : word_d8) ⇒
                ⇑{__v137593 :
                  w_v137592 ≡ (word_diff_i51 ans_v137582 guess_v137588)} ⇒
                  (wordle_loop_i53 ans_v137582 repeat_v137587)
            end
    end

logical wordle_i54 : proto =
  ⇑{ans_v137594 : word_d8} ⇒
    ⇑(repeat_v137595 : nat) ⇒
      (wordle_loop_i53 ans_v137594 repeat_v137595)

logical loop_ch_i55 : word_d8 → nat → L =
  fn (ans_v137598 : word_d8) (repeat_v137599 : nat) ⇒
    ch⟨(wordle_loop_i53 ans_v137598 repeat_v137599)⟩

logical loop_hc_i56 : word_d8 → nat → L =
  fn (ans_v137602 : word_d8) (repeat_v137603 : nat) ⇒
    hc⟨(wordle_loop_i53 ans_v137602 repeat_v137603)⟩

logical wordle_ch_i57 : L = ch⟨wordle_i54⟩

logical wordle_hc_i58 : L = hc⟨wordle_i54⟩

program read_word_i59 : unit → IO word_d8 =
  fn (__v137605 : unit) ⇒
    let s_v137606 ⇐ (readline_i33 ()) in
    (match (eqn_i10 (strlen_i21 s_v137606) 5) as b0_v137607 in
       {(eqn_i10 (strlen_i21 s_v137606) 5) ≡ b0_v137607} → IO word_d8 with
     | true ⇒
       fn {e_v137609 : (eqn_i10 (strlen_i21 s_v137606) 5) ≡ true} ⇒
         return (Word_c12‹›
                  s_v137606
                  (eqn_reflect_i48 (strlen_i21 s_v137606) 5 e_v137609))
     | false ⇒
       fn {__v137610 : (eqn_i10 (strlen_i21 s_v137606) 5) ≡ false} ⇒
         let __v137611 ⇐
           (print_i34 "please input a word with length of 5\n")
         in (read_word_i59 ())
     end refl (eqn_i10 (strlen_i21 s_v137606) 5))

program player_loop_i60 :
  ∀ {ans_v137612 : word_d8} →
    ∀ (repeat_v137613 : nat) →
      (loop_hc_i56 ans_v137612 repeat_v137613) → IO unit
=
  fn {ans_v137615 : word_d8} (repeat_v137616 : nat)
     (c_v137617 : (loop_hc_i56 ans_v137615 repeat_v137616)) ⇒
    (match repeat_v137616 as repeat0_v137618 in
       (loop_hc_i56 ans_v137615 repeat0_v137618) → IO unit with
     | O ⇒
       fn (c_v137620 : (loop_hc_i56 ans_v137615 0)) ⇒
         let __v137621 ⇐ recv c_v137620 in
         match __v137621 as __v137622 in IO unit with
         | ⟨ans_v137623, c_v137624⟩ ⇒
           let __v137625 ⇐ recv c_v137624 in
           match __v137625 as __v137626 in IO unit with
           | ⟨{pf_v137627}, c_v137628⟩ ⇒
             match ans_v137623 as __v137629 in IO unit with
             | Word_c12 s_v137630 __v137631 ⇒
               let __v137632 ⇐
                 (print_i34
                   (cats_i20
                     (cats_i20 "You Lose! The answer is " s_v137630) ".\n"))
               in close c_v137628
             end
           end
         end
     | S repeat_v137633 ⇒
       fn (c_v137634 : (loop_hc_i56 ans_v137615 repeat_v137633.+1)) ⇒
         let guess_v137635 ⇐ (read_word_i59 ()) in
         let c_v137636 ⇐ (send c_v137634 guess_v137635) in
         let __v137637 ⇐ recv c_v137636 in
         match __v137637 as __v137638 in IO unit with
         | ⟨b_v137639, c_v137640⟩ ⇒
           let __v137641 ⇐ recv c_v137640 in
           match __v137641 as __v137642 in IO unit with
           | ⟨{pf_v137643}, c_v137644⟩ ⇒
             (match b_v137639 as b0_v137645 in
                hc⟨match b0_v137645 as __v137647 in proto with
                     | true ⇒ end
                     | false ⇒
                       ⇑(w_v137648 : word_d8) ⇒
                         ⇑{__v137649 :
                           w_v137648 ≡
                             (word_diff_i51 ans_v137615 guess_v137635)} ⇒
                           (wordle_loop_i53 ans_v137615 repeat_v137633)
                     end⟩ ⊸
                  IO unit with
              | true ⇒
                ln (c_v137650 : hc⟨end⟩) ⇒
                  let __v137651 ⇐ (print_i34 "You Win!\n") in
                  close c_v137650
              | false ⇒
                ln (c_v137652 : hc⟨⇑(w_v137653 : word_d8) ⇒
                                       ⇑{__v137654 :
                                         w_v137653 ≡
                                           (word_diff_i51
                                             ans_v137615 guess_v137635)} ⇒
                                         (wordle_loop_i53
                                           ans_v137615 repeat_v137633)⟩) ⇒
                  let __v137655 ⇐ recv c_v137652 in
                  match __v137655 as __v137656 in IO unit with
                  | ⟨diff_v137657, c_v137658⟩ ⇒
                    let __v137659 ⇐ recv c_v137658 in
                    match __v137659 as __v137660 in IO unit with
                    | ⟨{pf_v137661}, c_v137662⟩ ⇒
                      match diff_v137657 as __v137663 in IO unit with
                      | Word_c12 s_v137664 __v137665 ⇒
                        let __v137666 ⇐
                          (print_i34
                            (cats_i20
                              (cats_i20
                                (cats_i20
                                  (cats_i20 "Incorrect, hint: " s_v137664)
                                  ". You have ")
                                (string_of_nat_i39 repeat_v137633))
                              " more tries.\n"))
                        in
                        (player_loop_i60
                          ans_v137615 repeat_v137633 c_v137662)
                      end
                    end
                  end
              end c_v137644)
           end
         end
     end c_v137617)

program player_i61 : wordle_hc_i58 → IO unit =
  fn (c_v137668 : wordle_hc_i58) ⇒
    let __v137669 ⇐ recv c_v137668 in
    match __v137669 as __v137670 in IO unit with
    | ⟨{ans_v137671}, c_v137672⟩ ⇒
      let __v137673 ⇐ recv c_v137672 in
      match __v137673 as __v137674 in IO unit with
      | ⟨repeat_v137675, c_v137676⟩ ⇒
        let __v137677 ⇐ (print_i34 "Wordle Game\n") in
        let __v137678 ⇐ (print_i34 "Please guess a word of length 5.\n") in
        let __v137679 ⇐
          (print_i34
            (cats_i20
              (cats_i20 "You have " (string_of_nat_i39 repeat_v137675))
              " tries.\n"))
        in (player_loop_i60 ans_v137671 repeat_v137675 c_v137676)
      end
    end

program server_loop_i62 :
  ∀ (ans_v137680 : word_d8) →
    ∀ (repeat_v137681 : nat) →
      (loop_ch_i55 ans_v137680 repeat_v137681) → IO unit
=
  fn (ans_v137683 : word_d8) (repeat_v137684 : nat)
     (c_v137685 : (loop_ch_i55 ans_v137683 repeat_v137684)) ⇒
    (match repeat_v137684 as repeat0_v137686 in
       (loop_ch_i55 ans_v137683 repeat0_v137686) → IO unit with
     | O ⇒
       fn (c_v137688 : (loop_ch_i55 ans_v137683 0)) ⇒
         let c_v137689 ⇐ (send c_v137688 ans_v137683) in
         let c_v137690 ⇐ (send c_v137689 refl ans_v137683) in
         close c_v137690
     | S repeat_v137691 ⇒
       fn (c_v137692 : (loop_ch_i55 ans_v137683 repeat_v137691.+1)) ⇒
         let __v137693 ⇐ recv c_v137692 in
         match __v137693 as __v137694 in IO unit with
         | ⟨guess_v137695, c_v137696⟩ ⇒
           let b_v137697 = (eqw_i52 ans_v137683 guess_v137695) in
           let c_v137698 ⇐ (send c_v137696 b_v137697) in
           let c_v137699 ⇐
             (send c_v137698 refl (eqw_i52 ans_v137683 guess_v137695))
           in
           (match b_v137697 as b0_v137700 in
              ch⟨match b0_v137700 as __v137702 in proto with
                   | true ⇒ end
                   | false ⇒
                     ⇑(w_v137703 : word_d8) ⇒
                       ⇑{__v137704 :
                         w_v137703 ≡
                           (word_diff_i51 ans_v137683 guess_v137695)} ⇒
                         (wordle_loop_i53 ans_v137683 repeat_v137691)
                   end⟩ ⊸
                IO unit with
            | true ⇒ ln (c_v137705 : ch⟨end⟩) ⇒ close c_v137705
            | false ⇒
              ln (c_v137706 : ch⟨⇑(w_v137707 : word_d8) ⇒
                                     ⇑{__v137708 :
                                       w_v137707 ≡
                                         (word_diff_i51
                                           ans_v137683 guess_v137695)} ⇒
                                       (wordle_loop_i53
                                         ans_v137683 repeat_v137691)⟩) ⇒
                let c_v137709 ⇐
                  (send c_v137706 (word_diff_i51 ans_v137683 guess_v137695))
                in
                let c_v137710 ⇐
                  (send c_v137709
                    refl (word_diff_i51 ans_v137683 guess_v137695))
                in (server_loop_i62 ans_v137683 repeat_v137691 c_v137710)
            end c_v137699)
         end
     end c_v137685)

program server_i63 : wordle_ch_i57 → IO unit =
  fn (c_v137712 : wordle_ch_i57) ⇒
    let repeat_v137713 = 5 in
    let ans_v137714 = (Word_c12‹› "world" refl 5) in
    let c_v137715 ⇐ (send c_v137712 ans_v137714) in
    let c_v137716 ⇐ (send c_v137715 repeat_v137713) in
    (server_loop_i62 ans_v137714 repeat_v137713 c_v137716)

program main_i64 : IO unit =
  let c_v137717 ⇐
    fork (c_v137718 : wordle_ch_i57) in (server_i63 c_v137718)
  in
  let c0_v137719 ⇐
    fork (c0_v137720 :
      ch⟨⇓(__v137721 : wordle_hc_i58) ⇒ ⇑(__v137722 : unit) ⇒ end⟩)
    in
      let __v137723 ⇐ recv c0_v137720 in
      match __v137723 as __v137724 in IO unit with
      | ⟨c_v137725, c0_v137726⟩ ⇒
        let __v137727 ⇐ (player_i61 c_v137725) in
        let c0_v137728 ⇐ (send c0_v137726 ()) in close c0_v137728
      end
  in
  let c0_v137729 ⇐ (send c0_v137719 c_v137717) in
  let __v137730 ⇐ recv c0_v137729 in
  match __v137730 as __v137731 in IO unit with
  | ⟨__v137732, c0_v137733⟩ ⇒ close c0_v137733
  end

trans1e success--------------------------

data order_d2 =
| LT_c1 of size(0) | GT_c2 of size(0) | EQ_c3 of size(0)

def andb_i2 =
  fn b1_v138772 b2_v138773 ⇒
    match b1_v138772 with
    | true ⇒ b2_v138773 | false ⇒ false
    end

def orb_i3 =
  fn b1_v138774 b2_v138775 ⇒
    match b1_v138774 with
    | true ⇒ true | false ⇒ b2_v138775
    end

def notb_i4 =
  fn b_v138776 ⇒ match b_v138776 with
                   | true ⇒ false | false ⇒ true
                   end

def compareb_i5 =
  fn b1_v138777 b2_v138778 ⇒
    match b1_v138777 with
    | true ⇒ match b2_v138778 with
               | true ⇒ EQ_c3 | false ⇒ GT_c2
               end
    | false ⇒ match b2_v138778 with
                | true ⇒ LT_c1 | false ⇒ EQ_c3
                end
    end

def lten_i6 =
  fn x_v138779 y_v138780 ⇒
    match x_v138779 with
    | O ⇒ true
    | S x_v138781 ⇒
      match y_v138780 with
      | O ⇒ false | S y_v138782 ⇒ ((lten_i6 x_v138781) y_v138782)
      end
    end

def gten_i7 =
  fn x_v138783 y_v138784 ⇒
    match x_v138783 with
    | O ⇒ match y_v138784 with
            | O ⇒ true | S __v138785 ⇒ false
            end
    | S x_v138786 ⇒
      match y_v138784 with
      | O ⇒ true | S y_v138787 ⇒ ((gten_i7 x_v138786) y_v138787)
      end
    end

def ltn_i8 =
  fn x_v138788 y_v138789 ⇒
    match x_v138788 with
    | O ⇒ match y_v138789 with
            | O ⇒ false | S y_v138790 ⇒ true
            end
    | S x_v138791 ⇒
      match y_v138789 with
      | O ⇒ false | S y_v138792 ⇒ ((ltn_i8 x_v138791) y_v138792)
      end
    end

def gtn_i9 =
  fn x_v138793 y_v138794 ⇒
    match x_v138793 with
    | O ⇒ false
    | S x_v138795 ⇒
      match y_v138794 with
      | O ⇒ true | S y_v138796 ⇒ ((gtn_i9 x_v138795) y_v138796)
      end
    end

def eqn_i10 =
  fn x_v138797 y_v138798 ⇒
    match x_v138797 with
    | O ⇒ match y_v138798 with
            | O ⇒ true | S __v138799 ⇒ false
            end
    | S x_v138800 ⇒
      match y_v138798 with
      | O ⇒ false | S y_v138801 ⇒ ((eqn_i10 x_v138800) y_v138801)
      end
    end

def comparen_i11 =
  fn n1_v138802 n2_v138803 ⇒
    match n1_v138802 with
    | O ⇒ match n2_v138803 with
            | O ⇒ EQ_c3 | S __v138804 ⇒ LT_c1
            end
    | S n1_v138805 ⇒
      match n2_v138803 with
      | O ⇒ GT_c2 | S n2_v138806 ⇒ ((comparen_i11 n1_v138805) n2_v138806)
      end
    end

def pred_i12 =
  fn x_v138807 ⇒
    match x_v138807 with
    | O ⇒ 0 | S x_v138808 ⇒ x_v138808
    end

def addn_i13 =
  fn x_v138809 y_v138810 ⇒
    match x_v138809 with
    | O ⇒ y_v138810 | S x_v138811 ⇒ ((addn_i13 x_v138811) y_v138810).+1
    end

def subn_i14 =
  fn x_v138812 y_v138813 ⇒
    match y_v138813 with
    | O ⇒ x_v138812
    | S y_v138814 ⇒ ((subn_i14 (pred_i12 x_v138812)) y_v138814)
    end

def muln_i15 =
  fn x_v138815 y_v138816 ⇒
    match x_v138815 with
    | O ⇒ 0
    | S x_v138817 ⇒ ((addn_i13 y_v138816) ((muln_i15 x_v138817) y_v138816))
    end

def divn_i16 =
  fn x_v138818 y_v138819 ⇒
    match ((ltn_i8 x_v138818) y_v138819) with
    | true ⇒ 0
    | false ⇒ ((divn_i16 ((subn_i14 x_v138818) y_v138819)) y_v138819).+1
    end

def modn_i17 =
  fn x_v138820 y_v138821 ⇒
    ((subn_i14 x_v138820)
      ((muln_i15 ((divn_i16 x_v138820) y_v138821)) y_v138821))

data between_d3 =
| Between_c4 of size(3)

data char_d4 =
| Char_c5 of size(1)

def eqc_i18 =
  fn c1_v138822 c2_v138823 ⇒
    match c1_v138822 with
    | Char_c5 n1_v138824 ⇒
      match c2_v138823 with
      | Char_c5 n2_v138825 ⇒ ((eqn_i10 n1_v138824) n2_v138825)
      end
    end

def comparec_i19 =
  fn c1_v138826 c2_v138827 ⇒
    match c1_v138826 with
    | Char_c5 n1_v138828 ⇒
      match c2_v138827 with
      | Char_c5 n2_v138829 ⇒ ((comparen_i11 n1_v138828) n2_v138829)
      end
    end

data string_d5 =
| EmptyString_c6 of size(0) | String_c7 of size(2)

def cats_i20 =
  fn s1_v138830 s2_v138831 ⇒
    match s1_v138830 with
    | EmptyString_c6  ⇒ s2_v138831
    | String_c7 c_v138832 s1_v138833 ⇒
      (String_c7 c_v138832 ((cats_i20 s1_v138833) s2_v138831))
    end

def strlen_i21 =
  fn s_v138834 ⇒
    match s_v138834 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v138835 s_v138836 ⇒ (strlen_i21 s_v138836).+1
    end

def eqs_i22 =
  fn s1_v138837 s2_v138838 ⇒
    match s1_v138837 with
    | EmptyString_c6  ⇒
      match s2_v138838 with
      | EmptyString_c6  ⇒ true | String_c7 __v138839 __v138840 ⇒ false
      end
    | String_c7 c1_v138841 s1_v138842 ⇒
      match s2_v138838 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v138843 s2_v138844 ⇒
        ((andb_i2 ((eqc_i18 c1_v138841) c2_v138843))
          ((eqs_i22 s1_v138842) s2_v138844))
      end
    end

def compares_i23 =
  fn s1_v138845 s2_v138846 ⇒
    match s1_v138845 with
    | EmptyString_c6  ⇒
      match s2_v138846 with
      | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v138847 __v138848 ⇒ LT_c1
      end
    | String_c7 c1_v138849 s1_v138850 ⇒
      match s2_v138846 with
      | EmptyString_c6  ⇒ GT_c2
      | String_c7 c2_v138851 s2_v138852 ⇒
        match ((comparec_i19 c1_v138849) c2_v138851) with
        | EQ_c3  ⇒ ((compares_i23 s1_v138850) s2_v138852)
        | LT_c1  ⇒ LT_c1 | GT_c2  ⇒ GT_c2
        end
      end
    end

data optionUU_d12 =
| NoneUU_c19 of size(0) | SomeUU_c20 of size(1)

data optionUL_d11 =
| NoneUL_c17 of size(0) | SomeUL_c18 of size(1)

data optionLU_d10 =
| NoneLU_c15 of size(0)

data optionLL_d9 =
| NoneLL_c13 of size(0) | SomeLL_c14 of size(1)

def and_thenUUU_i74 =
  fn A_v138853 B_v138854 opt_v138855 ⇒
    ln f_v138856 ⇒
      match opt_v138855 with
      | NoneUU_c19  ⇒ NoneUU_c19
      | SomeUU_c20 x_v138857 ⇒ (f_v138856 x_v138857)
      end

def and_thenUUL_i73 =
  fn A_v138858 B_v138859 opt_v138860 ⇒
    ln f_v138861 ⇒
      match opt_v138860 with
      | NoneUL_c17  ⇒ NoneUL_c17
      | SomeUL_c18 x_v138862 ⇒ (f_v138861 x_v138862)
      end

def and_thenULU_i72 =
  fn A_v138863 B_v138864 opt_v138865 ⇒
    ln f_v138866 ⇒
      match opt_v138865 with
      | NoneUU_c19  ⇒ NoneLU_c15
      | SomeUU_c20 x_v138867 ⇒ (f_v138866 x_v138867)
      end

def and_thenULL_i71 =
  fn A_v138868 B_v138869 opt_v138870 ⇒
    ln f_v138871 ⇒
      match opt_v138870 with
      | NoneUL_c17  ⇒ NoneLL_c13
      | SomeUL_c18 x_v138872 ⇒ (f_v138871 x_v138872)
      end

def and_thenLUL_i69 =
  fn A_v138873 B_v138874 opt_v138875 ⇒
    ln f_v138876 ⇒
      match opt_v138875 with
      | NoneLL_c13  ⇒ NoneUL_c17
      | SomeLL_c14 x_v138877 ⇒ (f_v138876 x_v138877)
      end

def and_thenLLL_i67 =
  fn A_v138878 B_v138879 opt_v138880 ⇒
    ln f_v138881 ⇒
      match opt_v138880 with
      | NoneLL_c13  ⇒ NoneLL_c13
      | SomeLL_c14 x_v138882 ⇒ (f_v138881 x_v138882)
      end

data listUU_d16 =
| nilUU_c27 of size(0) | consUU_c28 of size(2)

data listUL_d15 =
| nilUL_c25 of size(0) | consUL_c26 of size(2)

data listLU_d14 =
| nilLU_c23 of size(0)

data listLL_d13 =
| nilLL_c21 of size(0) | consLL_c22 of size(2)

def lenUU_i78 =
  fn A_v138883 xs_v138884 ⇒
    match xs_v138884 with
    | nilUU_c27  ⇒ (0, nilUU_c27)
    | consUU_c28 x_v138885 xs_v138886 ⇒
      match ((lenUU_i78 NULL) xs_v138886) with
      | (n_v138887, xs_v138888) ⇒
        (n_v138887.+1, (consUU_c28 x_v138885 xs_v138888))
      end
    end

def lenUL_i77 =
  fn A_v138889 xs_v138890 ⇒
    match xs_v138890 with
    | nilUL_c25  ⇒ (0, nilUL_c25)
    | consUL_c26 x_v138891 xs_v138892 ⇒
      match ((lenUL_i77 NULL) xs_v138892) with
      | (n_v138893, xs_v138894) ⇒
        (n_v138893.+1, (consUL_c26 x_v138891 xs_v138894))
      end
    end

def lenLL_i75 =
  fn A_v138895 xs_v138896 ⇒
    match xs_v138896 with
    | nilLL_c21  ⇒ (0, nilLL_c21)
    | consLL_c22 x_v138897 xs_v138898 ⇒
      match ((lenLL_i75 NULL) xs_v138898) with
      | (n_v138899, xs_v138900) ⇒
        (n_v138899.+1, (consLL_c22 x_v138897 xs_v138900))
      end
    end

def appendUU_i82 =
  fn A_v138901 xs_v138902 ⇒
    ln ys_v138903 ⇒
      match xs_v138902 with
      | nilUU_c27  ⇒ ys_v138903
      | consUU_c28 x_v138904 xs_v138905 ⇒
        (consUU_c28 x_v138904 (((appendUU_i82 NULL) xs_v138905) ys_v138903))
      end

def appendUL_i81 =
  fn A_v138906 xs_v138907 ⇒
    ln ys_v138908 ⇒
      match xs_v138907 with
      | nilUL_c25  ⇒ ys_v138908
      | consUL_c26 x_v138909 xs_v138910 ⇒
        (consUL_c26 x_v138909 (((appendUL_i81 NULL) xs_v138910) ys_v138908))
      end

def appendLL_i79 =
  fn A_v138911 xs_v138912 ⇒
    ln ys_v138913 ⇒
      match xs_v138912 with
      | nilLL_c21  ⇒ ys_v138913
      | consLL_c22 x_v138914 xs_v138915 ⇒
        (consLL_c22 x_v138914 (((appendLL_i79 NULL) xs_v138915) ys_v138913))
      end

def readline_i33 =
  fn __v138916 ⇒
    let ch_v138917 ⇐ open stdin in
    let ch_v138918 ⇐ (send ch_v138917 true) in
    let __v138919 ⇐ recv ch_v138918 in
    match __v138919 with
    | (s_v138920, ch_v138921) ⇒
      let ch_v138922 ⇐ (send ch_v138921 false) in
      let __v138923 ⇐ close⇑ ch_v138922 in return s_v138920
    end

def print_i34 =
  fn s_v138924 ⇒
    let ch_v138925 ⇐ open stdout in
    let ch_v138926 ⇐ (send ch_v138925 true) in
    let ch_v138927 ⇐ (send ch_v138926 s_v138924) in
    let ch_v138928 ⇐ (send ch_v138927 false) in close⇑ ch_v138928

def prerr_i35 =
  fn s_v138929 ⇒
    let ch_v138930 ⇐ open stderr in
    let ch_v138931 ⇐ (send ch_v138930 true) in
    let ch_v138932 ⇐ (send ch_v138931 s_v138929) in
    let ch_v138933 ⇐ (send ch_v138932 false) in close⇑ ch_v138933

def digits_i36 =
  (consUU_c28
    "0"
    (consUU_c28
      "1"
      (consUU_c28
        "2"
        (consUU_c28
          "3"
          (consUU_c28
            "4"
            (consUU_c28
              "5"
              (consUU_c28
                "6"
                (consUU_c28 "7" (consUU_c28 "8" (consUU_c28 "9" nilUU_c27))))))))))

def get_at_i37 =
  fn A_v138934 n_v138935 xs_v138936 a_v138937 ⇒
    match n_v138935 with
    | O ⇒
      match xs_v138936 with
      | nilUU_c27  ⇒ a_v138937
      | consUU_c28 x_v138938 __v138939 ⇒ x_v138938
      end
    | S n_v138940 ⇒
      match xs_v138936 with
      | nilUU_c27  ⇒ a_v138937
      | consUU_c28 __v138941 xs_v138942 ⇒
        ((((get_at_i37 NULL) n_v138940) xs_v138942) a_v138937)
      end
    end

def string_of_digit_i38 =
  fn n_v138943 ⇒
    ((((get_at_i37 NULL) n_v138943) digits_i36) EmptyString_c6)

def string_of_nat_i39 =
  fn n_v138944 ⇒
    let s_v138945 = (string_of_digit_i38 ((modn_i17 n_v138944) 10)) in
    let n_v138946 = ((divn_i16 n_v138944) 10) in
    match ((ltn_i8 0) n_v138946) with
    | true ⇒ ((cats_i20 (string_of_nat_i39 n_v138946)) s_v138945)
    | false ⇒ s_v138945
    end

def digit_of_char_i40 =
  fn c_v138947 ⇒
    match ((eqc_i18 c_v138947) '0') with
    | true ⇒ (SomeUL_c18 0)
    | false ⇒
      match ((eqc_i18 c_v138947) '1') with
      | true ⇒ (SomeUL_c18 1)
      | false ⇒
        match ((eqc_i18 c_v138947) '2') with
        | true ⇒ (SomeUL_c18 2)
        | false ⇒
          match ((eqc_i18 c_v138947) '3') with
          | true ⇒ (SomeUL_c18 3)
          | false ⇒
            match ((eqc_i18 c_v138947) '4') with
            | true ⇒ (SomeUL_c18 4)
            | false ⇒
              match ((eqc_i18 c_v138947) '5') with
              | true ⇒ (SomeUL_c18 5)
              | false ⇒
                match ((eqc_i18 c_v138947) '6') with
                | true ⇒ (SomeUL_c18 6)
                | false ⇒
                  match ((eqc_i18 c_v138947) '7') with
                  | true ⇒ (SomeUL_c18 7)
                  | false ⇒
                    match ((eqc_i18 c_v138947) '8') with
                    | true ⇒ (SomeUL_c18 8)
                    | false ⇒
                      match ((eqc_i18 c_v138947) '9') with
                      | true ⇒ (SomeUL_c18 9) | false ⇒ NoneUL_c17
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

def nat_of_string_loop_i41 =
  fn s_v138948 acc_v138949 ⇒
    match s_v138948 with
    | EmptyString_c6  ⇒ (SomeUL_c18 acc_v138949)
    | String_c7 c_v138950 s_v138951 ⇒
      match (digit_of_char_i40 c_v138950) with
      | NoneUL_c17  ⇒ NoneUL_c17
      | SomeUL_c18 n_v138952 ⇒
        ((nat_of_string_loop_i41 s_v138951)
          ((addn_i13 ((muln_i15 acc_v138949) 10)) n_v138952))
      end
    end

def nat_of_string_i42 =
  fn s_v138953 ⇒ ((nat_of_string_loop_i41 s_v138953) 0)

data word_d8 =
| Word_c12 of size(2)

def string_diff_i49 =
  fn s1_v138954 s2_v138955 ⇒
    match s1_v138954 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c1_v138956 s1_v138957 ⇒
      match s2_v138955 with
      | EmptyString_c6  ⇒ EmptyString_c6
      | String_c7 c2_v138958 s2_v138959 ⇒
        match ((eqc_i18 c1_v138956) c2_v138958) with
        | true ⇒ ((cats_i20 "Y") ((string_diff_i49 s1_v138957) s2_v138959))
        | false ⇒
          ((cats_i20 "N") ((string_diff_i49 s1_v138957) s2_v138959))
        end
      end
    end

def word_diff_i51 =
  fn w1_v138960 w2_v138961 ⇒
    match w1_v138960 with
    | Word_c12 s1_v138962 pf1_v138963 ⇒
      match w2_v138961 with
      | Word_c12 s2_v138964 pf2_v138965 ⇒
        let pf1_v138966 = NULL in
        let pf2_v138967 = NULL in
        let pf_v138968 = NULL in
        (Word_c12 ((string_diff_i49 s1_v138962) s2_v138964) NULL)
      end
    end

def eqw_i52 =
  fn w1_v138969 w2_v138970 ⇒
    match w1_v138969 with
    | Word_c12 s1_v138971 __v138972 ⇒
      match w2_v138970 with
      | Word_c12 s2_v138973 __v138974 ⇒ ((eqs_i22 s1_v138971) s2_v138973)
      end
    end

def read_word_i59 =
  fn __v138975 ⇒
    let s_v138976 ⇐ (readline_i33 ()) in
    (match ((eqn_i10 (strlen_i21 s_v138976)) 5) with
     | true ⇒ fn e_v138977 ⇒ return (Word_c12 s_v138976 NULL)
     | false ⇒
       fn __v138978 ⇒
         let __v138979 ⇐
           (print_i34 "please input a word with length of 5\n")
         in (read_word_i59 ())
     end NULL)

def player_loop_i60 =
  fn ans_v138980 repeat_v138981 c_v138982 ⇒
    (match repeat_v138981 with
     | O ⇒
       fn c_v138983 ⇒
         let __v138984 ⇐ recv c_v138983 in
         match __v138984 with
         | (ans_v138985, c_v138986) ⇒
           let __v138987 ⇐ {recv} c_v138986 in
           match __v138987 with
           | (pf_v138988, c_v138989) ⇒
             match ans_v138985 with
             | Word_c12 s_v138990 __v138991 ⇒
               let __v138992 ⇐
                 (print_i34
                   ((cats_i20
                      ((cats_i20 "You Lose! The answer is ") s_v138990))
                     ".\n"))
               in close⇓ c_v138989
             end
           end
         end
     | S repeat_v138993 ⇒
       fn c_v138994 ⇒
         let guess_v138995 ⇐ (read_word_i59 ()) in
         let c_v138996 ⇐ (send c_v138994 guess_v138995) in
         let __v138997 ⇐ recv c_v138996 in
         match __v138997 with
         | (b_v138998, c_v138999) ⇒
           let __v139000 ⇐ {recv} c_v138999 in
           match __v139000 with
           | (pf_v139001, c_v139002) ⇒
             (match b_v138998 with
              | true ⇒
                ln c_v139003 ⇒
                  let __v139004 ⇐ (print_i34 "You Win!\n") in
                  close⇓ c_v139003
              | false ⇒
                ln c_v139005 ⇒
                  let __v139006 ⇐ recv c_v139005 in
                  match __v139006 with
                  | (diff_v139007, c_v139008) ⇒
                    let __v139009 ⇐ {recv} c_v139008 in
                    match __v139009 with
                    | (pf_v139010, c_v139011) ⇒
                      match diff_v139007 with
                      | Word_c12 s_v139012 __v139013 ⇒
                        let __v139014 ⇐
                          (print_i34
                            ((cats_i20
                               ((cats_i20
                                  ((cats_i20
                                     ((cats_i20 "Incorrect, hint: ")
                                       s_v139012))
                                    ". You have "))
                                 (string_of_nat_i39 repeat_v138993)))
                              " more tries.\n"))
                        in
                        (((player_loop_i60 NULL) repeat_v138993) c_v139011)
                      end
                    end
                  end
              end c_v139002)
           end
         end
     end c_v138982)

def player_i61 =
  fn c_v139015 ⇒
    let __v139016 ⇐ {recv} c_v139015 in
    match __v139016 with
    | (ans_v139017, c_v139018) ⇒
      let __v139019 ⇐ recv c_v139018 in
      match __v139019 with
      | (repeat_v139020, c_v139021) ⇒
        let __v139022 ⇐ (print_i34 "Wordle Game\n") in
        let __v139023 ⇐ (print_i34 "Please guess a word of length 5.\n") in
        let __v139024 ⇐
          (print_i34
            ((cats_i20
               ((cats_i20 "You have ") (string_of_nat_i39 repeat_v139020)))
              " tries.\n"))
        in (((player_loop_i60 NULL) repeat_v139020) c_v139021)
      end
    end

def server_loop_i62 =
  fn ans_v139025 repeat_v139026 c_v139027 ⇒
    (match repeat_v139026 with
     | O ⇒
       fn c_v139028 ⇒
         let c_v139029 ⇐ (send c_v139028 ans_v139025) in
         let c_v139030 ⇐ ({send} c_v139029 NULL) in close⇑ c_v139030
     | S repeat_v139031 ⇒
       fn c_v139032 ⇒
         let __v139033 ⇐ recv c_v139032 in
         match __v139033 with
         | (guess_v139034, c_v139035) ⇒
           let b_v139036 = ((eqw_i52 ans_v139025) guess_v139034) in
           let c_v139037 ⇐ (send c_v139035 b_v139036) in
           let c_v139038 ⇐ ({send} c_v139037 NULL) in
           (match b_v139036 with
            | true ⇒ ln c_v139039 ⇒ close⇑ c_v139039
            | false ⇒
              ln c_v139040 ⇒
                let c_v139041 ⇐
                  (send c_v139040
                    ((word_diff_i51 ans_v139025) guess_v139034))
                in
                let c_v139042 ⇐ ({send} c_v139041 NULL) in
                (((server_loop_i62 ans_v139025) repeat_v139031) c_v139042)
            end c_v139038)
         end
     end c_v139027)

def server_i63 =
  fn c_v139043 ⇒
    let repeat_v139044 = 5 in
    let ans_v139045 = (Word_c12 "world" NULL) in
    let c_v139046 ⇐ ({send} c_v139043 NULL) in
    let c_v139047 ⇐ (send c_v139046 repeat_v139044) in
    (((server_loop_i62 ans_v139045) repeat_v139044) c_v139047)

main =
  let c_v139048 ⇐ fork c_v139049 in (server_i63 c_v139049) in
  let c0_v139050 ⇐
    fork c0_v139051 in
      let __v139052 ⇐ recv c0_v139051 in
      match __v139052 with
      | (c_v139053, c0_v139054) ⇒
        let __v139055 ⇐ (player_i61 c_v139053) in
        let c0_v139056 ⇐ (send c0_v139054 ()) in close⇑ c0_v139056
      end
  in
  let c0_v139057 ⇐ (send c0_v139050 c_v139048) in
  let __v139058 ⇐ recv c0_v139057 in
  match __v139058 with
  | (__v139059, c0_v139060) ⇒ close⇓ c0_v139060
  end

trans12 success--------------------------

fun andb_i2(b1_v139465, b2_v139466) = if b1_v139465 then
                                        b2_v139466
                                      else
                                        0

val andbclo_i89 =
  fn b1_v139467 b2_v139468 ⇒ andb_i2(b1_v139467, b2_v139468)

fun orb_i3(b1_v139469, b2_v139470) = if b1_v139469 then
                                       1
                                     else
                                       b2_v139470

val orbclo_i90 = fn b1_v139471 b2_v139472 ⇒ orb_i3(b1_v139471, b2_v139472)

fun notb_i4(b_v139473) = if b_v139473 then
                           0
                         else
                           1

val notbclo_i91 = fn b_v139474 ⇒ notb_i4(b_v139474)

fun compareb_i5(b1_v139475, b2_v139476) =
  if b1_v139475 then
    if b2_v139476 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v139476 then
      LT_c1
    else
      EQ_c3

val comparebclo_i92 =
  fn b1_v139477 b2_v139478 ⇒ compareb_i5(b1_v139477, b2_v139478)

fun lten_i6(x_v139479, y_v139480) =
  let __v139481 = x_v139479 in
  if __v139481 then
    let x_v139482 = __v139481.-1 in
    let __v139483 = y_v139480 in
    if __v139483 then
      let y_v139484 = __v139483.-1 in lten_i6(x_v139482, y_v139484)
    else
      0
  else
    1

val ltenclo_i93 = fn x_v139485 y_v139486 ⇒ lten_i6(x_v139485, y_v139486)

fun gten_i7(x_v139487, y_v139488) =
  let __v139489 = x_v139487 in
  if __v139489 then
    let x_v139490 = __v139489.-1 in
    let __v139491 = y_v139488 in
    if __v139491 then
      let y_v139492 = __v139491.-1 in gten_i7(x_v139490, y_v139492)
    else
      1
  else
    let __v139493 = y_v139488 in
    if __v139493 then
      let __v139494 = __v139493.-1 in 0
    else
      1

val gtenclo_i94 = fn x_v139495 y_v139496 ⇒ gten_i7(x_v139495, y_v139496)

fun ltn_i8(x_v139497, y_v139498) =
  let __v139499 = x_v139497 in
  if __v139499 then
    let x_v139500 = __v139499.-1 in
    let __v139501 = y_v139498 in
    if __v139501 then
      let y_v139502 = __v139501.-1 in ltn_i8(x_v139500, y_v139502)
    else
      0
  else
    let __v139503 = y_v139498 in
    if __v139503 then
      let y_v139504 = __v139503.-1 in 1
    else
      0

val ltnclo_i95 = fn x_v139505 y_v139506 ⇒ ltn_i8(x_v139505, y_v139506)

fun gtn_i9(x_v139507, y_v139508) =
  let __v139509 = x_v139507 in
  if __v139509 then
    let x_v139510 = __v139509.-1 in
    let __v139511 = y_v139508 in
    if __v139511 then
      let y_v139512 = __v139511.-1 in gtn_i9(x_v139510, y_v139512)
    else
      1
  else
    0

val gtnclo_i96 = fn x_v139513 y_v139514 ⇒ gtn_i9(x_v139513, y_v139514)

fun eqn_i10(x_v139515, y_v139516) =
  let __v139517 = x_v139515 in
  if __v139517 then
    let x_v139518 = __v139517.-1 in
    let __v139519 = y_v139516 in
    if __v139519 then
      let y_v139520 = __v139519.-1 in eqn_i10(x_v139518, y_v139520)
    else
      0
  else
    let __v139521 = y_v139516 in
    if __v139521 then
      let __v139522 = __v139521.-1 in 0
    else
      1

val eqnclo_i97 = fn x_v139523 y_v139524 ⇒ eqn_i10(x_v139523, y_v139524)

fun comparen_i11(n1_v139525, n2_v139526) =
  let __v139527 = n1_v139525 in
  if __v139527 then
    let n1_v139528 = __v139527.-1 in
    let __v139529 = n2_v139526 in
    if __v139529 then
      let n2_v139530 = __v139529.-1 in comparen_i11(n1_v139528, n2_v139530)
    else
      GT_c2
  else
    let __v139531 = n2_v139526 in
    if __v139531 then
      let __v139532 = __v139531.-1 in LT_c1
    else
      EQ_c3

val comparenclo_i98 =
  fn n1_v139533 n2_v139534 ⇒ comparen_i11(n1_v139533, n2_v139534)

fun pred_i12(x_v139535) =
  let __v139536 = x_v139535 in
  if __v139536 then
    let x_v139537 = __v139536.-1 in x_v139537
  else
    0

val predclo_i99 = fn x_v139538 ⇒ pred_i12(x_v139538)

fun addn_i13(x_v139539, y_v139540) =
  let __v139541 = x_v139539 in
  if __v139541 then
    let x_v139542 = __v139541.-1 in addn_i13(x_v139542, y_v139540).+1
  else
    y_v139540

val addnclo_i100 = fn x_v139543 y_v139544 ⇒ addn_i13(x_v139543, y_v139544)

fun subn_i14(x_v139545, y_v139546) =
  let __v139547 = y_v139546 in
  if __v139547 then
    let y_v139548 = __v139547.-1 in subn_i14(pred_i12(x_v139545), y_v139548)
  else
    x_v139545

val subnclo_i101 = fn x_v139549 y_v139550 ⇒ subn_i14(x_v139549, y_v139550)

fun muln_i15(x_v139551, y_v139552) =
  let __v139553 = x_v139551 in
  if __v139553 then
    let x_v139554 = __v139553.-1 in
    addn_i13(y_v139552, muln_i15(x_v139554, y_v139552))
  else
    0

val mulnclo_i102 = fn x_v139555 y_v139556 ⇒ muln_i15(x_v139555, y_v139556)

fun divn_i16(x_v139557, y_v139558) =
  if ltn_i8(x_v139557, y_v139558) then
    0
  else
    divn_i16(subn_i14(x_v139557, y_v139558), y_v139558).+1

val divnclo_i103 = fn x_v139559 y_v139560 ⇒ divn_i16(x_v139559, y_v139560)

fun modn_i17(x_v139561, y_v139562) =
  subn_i14(x_v139561, muln_i15(divn_i16(x_v139561, y_v139562), y_v139562))

val modnclo_i104 = fn x_v139563 y_v139564 ⇒ modn_i17(x_v139563, y_v139564)

fun eqc_i18(c1_v139565, c2_v139566) =
  match c1_v139565 with
  | Char_c5 n1_v139567 ⇒
    match c2_v139566 with
    | Char_c5 n2_v139568 ⇒ eqn_i10(n1_v139567, n2_v139568)
    end
  end

val eqcclo_i105 =
  fn c1_v139569 c2_v139570 ⇒ eqc_i18(c1_v139569, c2_v139570)

fun comparec_i19(c1_v139571, c2_v139572) =
  match c1_v139571 with
  | Char_c5 n1_v139573 ⇒
    match c2_v139572 with
    | Char_c5 n2_v139574 ⇒ comparen_i11(n1_v139573, n2_v139574)
    end
  end

val comparecclo_i106 =
  fn c1_v139575 c2_v139576 ⇒ comparec_i19(c1_v139575, c2_v139576)

fun cats_i20(s1_v139577, s2_v139578) =
  match s1_v139577 with
  | EmptyString_c6  ⇒ s2_v139578
  | String_c7 c_v139579 s1_v139580 ⇒
    (String_c7 c_v139579 cats_i20(s1_v139580, s2_v139578))
  end

val catsclo_i107 =
  fn s1_v139581 s2_v139582 ⇒ cats_i20(s1_v139581, s2_v139582)

fun strlen_i21(s_v139583) =
  match s_v139583 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v139584 s_v139585 ⇒ strlen_i21(s_v139585).+1
  end

val strlenclo_i108 = fn s_v139586 ⇒ strlen_i21(s_v139586)

fun eqs_i22(s1_v139587, s2_v139588) =
  match s1_v139587 with
  | EmptyString_c6  ⇒
    match s2_v139588 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v139589 __v139590 ⇒ 0
    end
  | String_c7 c1_v139591 s1_v139592 ⇒
    match s2_v139588 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v139593 s2_v139594 ⇒
      andb_i2(eqc_i18(c1_v139591, c2_v139593),
              eqs_i22(s1_v139592, s2_v139594))
    end
  end

val eqsclo_i109 =
  fn s1_v139595 s2_v139596 ⇒ eqs_i22(s1_v139595, s2_v139596)

fun compares_i23(s1_v139597, s2_v139598) =
  match s1_v139597 with
  | EmptyString_c6  ⇒
    match s2_v139598 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v139599 __v139600 ⇒ LT_c1
    end
  | String_c7 c1_v139601 s1_v139602 ⇒
    match s2_v139598 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v139603 s2_v139604 ⇒
      match comparec_i19(c1_v139601, c2_v139603) with
      | EQ_c3  ⇒ compares_i23(s1_v139602, s2_v139604) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i110 =
  fn s1_v139605 s2_v139606 ⇒ compares_i23(s1_v139605, s2_v139606)

fun and_thenUUU_i74(A_v139607, B_v139608, opt_v139609, f_v139610) =
  match opt_v139609 with
  | NoneUU_c19  ⇒ NoneUU_c19
  | SomeUU_c20 x_v139611 ⇒ (f_v139610) x_v139611
  end

val and_thenUUUclo_i111 =
  fn A_v139612 B_v139613 opt_v139614 ⇒
    ln f_v139615 ⇒
      and_thenUUU_i74(A_v139612, B_v139613, opt_v139614, f_v139615)

fun and_thenUUL_i73(A_v139616, B_v139617, opt_v139618, f_v139619) =
  match opt_v139618 with
  | NoneUL_c17  ⇒ NoneUL_c17
  | SomeUL_c18 x_v139620 ⇒ (f_v139619) x_v139620
  end

val and_thenUULclo_i112 =
  fn A_v139621 B_v139622 opt_v139623 ⇒
    ln f_v139624 ⇒
      and_thenUUL_i73(A_v139621, B_v139622, opt_v139623, f_v139624)

fun and_thenULU_i72(A_v139625, B_v139626, opt_v139627, f_v139628) =
  match opt_v139627 with
  | NoneUU_c19  ⇒ NoneLU_c15
  | SomeUU_c20 x_v139629 ⇒ (f_v139628) x_v139629
  end

val and_thenULUclo_i113 =
  fn A_v139630 B_v139631 opt_v139632 ⇒
    ln f_v139633 ⇒
      and_thenULU_i72(A_v139630, B_v139631, opt_v139632, f_v139633)

fun and_thenULL_i71(A_v139634, B_v139635, opt_v139636, f_v139637) =
  match opt_v139636 with
  | NoneUL_c17  ⇒ NoneLL_c13
  | SomeUL_c18 x_v139638 ⇒ (f_v139637) x_v139638
  end

val and_thenULLclo_i114 =
  fn A_v139639 B_v139640 opt_v139641 ⇒
    ln f_v139642 ⇒
      and_thenULL_i71(A_v139639, B_v139640, opt_v139641, f_v139642)

fun and_thenLUL_i69(A_v139643, B_v139644, opt_v139645, f_v139646) =
  match opt_v139645 with
  | NoneLL_c13  ⇒ NoneUL_c17
  | SomeLL_c14 x_v139647 ⇒ (f_v139646) x_v139647
  end

val and_thenLULclo_i115 =
  fn A_v139648 B_v139649 opt_v139650 ⇒
    ln f_v139651 ⇒
      and_thenLUL_i69(A_v139648, B_v139649, opt_v139650, f_v139651)

fun and_thenLLL_i67(A_v139652, B_v139653, opt_v139654, f_v139655) =
  match opt_v139654 with
  | NoneLL_c13  ⇒ NoneLL_c13
  | SomeLL_c14 x_v139656 ⇒ (f_v139655) x_v139656
  end

val and_thenLLLclo_i116 =
  fn A_v139657 B_v139658 opt_v139659 ⇒
    ln f_v139660 ⇒
      and_thenLLL_i67(A_v139657, B_v139658, opt_v139659, f_v139660)

fun lenUU_i78(A_v139661, xs_v139662) =
  match xs_v139662 with
  | nilUU_c27  ⇒ (0, nilUU_c27)
  | consUU_c28 x_v139663 xs_v139664 ⇒
    match lenUU_i78(NULL, xs_v139664) with
    | (n_v139665, xs_v139666) ⇒
      (n_v139665.+1, (consUU_c28 x_v139663 xs_v139666))
    end
  end

val lenUUclo_i117 =
  fn A_v139667 xs_v139668 ⇒ lenUU_i78(A_v139667, xs_v139668)

fun lenUL_i77(A_v139669, xs_v139670) =
  match xs_v139670 with
  | nilUL_c25  ⇒ (0, nilUL_c25)
  | consUL_c26 x_v139671 xs_v139672 ⇒
    match lenUL_i77(NULL, xs_v139672) with
    | (n_v139673, xs_v139674) ⇒
      (n_v139673.+1, (consUL_c26 x_v139671 xs_v139674))
    end
  end

val lenULclo_i118 =
  fn A_v139675 xs_v139676 ⇒ lenUL_i77(A_v139675, xs_v139676)

fun lenLL_i75(A_v139677, xs_v139678) =
  match xs_v139678 with
  | nilLL_c21  ⇒ (0, nilLL_c21)
  | consLL_c22 x_v139679 xs_v139680 ⇒
    match lenLL_i75(NULL, xs_v139680) with
    | (n_v139681, xs_v139682) ⇒
      (n_v139681.+1, (consLL_c22 x_v139679 xs_v139682))
    end
  end

val lenLLclo_i119 =
  fn A_v139683 xs_v139684 ⇒ lenLL_i75(A_v139683, xs_v139684)

fun appendUU_i82(A_v139685, xs_v139686, ys_v139687) =
  match xs_v139686 with
  | nilUU_c27  ⇒ ys_v139687
  | consUU_c28 x_v139688 xs_v139689 ⇒
    (consUU_c28 x_v139688 appendUU_i82(NULL, xs_v139689, ys_v139687))
  end

val appendUUclo_i120 =
  fn A_v139690 xs_v139691 ⇒
    ln ys_v139692 ⇒ appendUU_i82(A_v139690, xs_v139691, ys_v139692)

fun appendUL_i81(A_v139693, xs_v139694, ys_v139695) =
  match xs_v139694 with
  | nilUL_c25  ⇒ ys_v139695
  | consUL_c26 x_v139696 xs_v139697 ⇒
    (consUL_c26 x_v139696 appendUL_i81(NULL, xs_v139697, ys_v139695))
  end

val appendULclo_i121 =
  fn A_v139698 xs_v139699 ⇒
    ln ys_v139700 ⇒ appendUL_i81(A_v139698, xs_v139699, ys_v139700)

fun appendLL_i79(A_v139701, xs_v139702, ys_v139703) =
  match xs_v139702 with
  | nilLL_c21  ⇒ ys_v139703
  | consLL_c22 x_v139704 xs_v139705 ⇒
    (consLL_c22 x_v139704 appendLL_i79(NULL, xs_v139705, ys_v139703))
  end

val appendLLclo_i122 =
  fn A_v139706 xs_v139707 ⇒
    ln ys_v139708 ⇒ appendLL_i79(A_v139706, xs_v139707, ys_v139708)

fun readline_i33(__v139709) =
  ln __v139710 ⇒
    let ch_v139711 = (ln __v139712 ⇒ open stdin) NULL in
    let ch_v139713 =
      ((fn x_v139714 ⇒ ln __v139715 ⇒ send(ch_v139711, x_v139714)) 1)
        NULL
    in
    let __v139716 = (ln __v139717 ⇒ recv(ch_v139713)) NULL in
    (match __v139716 with
     | (s_v139718, ch_v139719) ⇒
       ln __v139720 ⇒
         let ch_v139721 =
           ((fn x_v139722 ⇒ ln __v139723 ⇒ send(ch_v139719, x_v139722)) 0)
             NULL
         in
         let __v139724 =
           (ln __v139725 ⇒ let __v139726 = ch_v139721 in NULL) NULL
         in (ln __v139727 ⇒ s_v139718) NULL
     end) NULL

val readlineclo_i123 = fn __v139728 ⇒ readline_i33(__v139728)

fun print_i34(s_v139729) =
  ln __v139730 ⇒
    let ch_v139731 = (ln __v139732 ⇒ open stdout) NULL in
    let ch_v139733 =
      ((fn x_v139734 ⇒ ln __v139735 ⇒ send(ch_v139731, x_v139734)) 1)
        NULL
    in
    let ch_v139736 =
      ((fn x_v139737 ⇒ ln __v139738 ⇒ send(ch_v139733, x_v139737))
         s_v139729)
        NULL
    in
    let ch_v139739 =
      ((fn x_v139740 ⇒ ln __v139741 ⇒ send(ch_v139736, x_v139740)) 0)
        NULL
    in (ln __v139742 ⇒ let __v139743 = ch_v139739 in NULL) NULL

val printclo_i124 = fn s_v139744 ⇒ print_i34(s_v139744)

fun prerr_i35(s_v139745) =
  ln __v139746 ⇒
    let ch_v139747 = (ln __v139748 ⇒ open stderr) NULL in
    let ch_v139749 =
      ((fn x_v139750 ⇒ ln __v139751 ⇒ send(ch_v139747, x_v139750)) 1)
        NULL
    in
    let ch_v139752 =
      ((fn x_v139753 ⇒ ln __v139754 ⇒ send(ch_v139749, x_v139753))
         s_v139745)
        NULL
    in
    let ch_v139755 =
      ((fn x_v139756 ⇒ ln __v139757 ⇒ send(ch_v139752, x_v139756)) 0)
        NULL
    in (ln __v139758 ⇒ let __v139759 = ch_v139755 in NULL) NULL

val prerrclo_i125 = fn s_v139760 ⇒ prerr_i35(s_v139760)

val digits_i36 =
  (consUU_c28
    "0"
    (consUU_c28
      "1"
      (consUU_c28
        "2"
        (consUU_c28
          "3"
          (consUU_c28
            "4"
            (consUU_c28
              "5"
              (consUU_c28
                "6"
                (consUU_c28 "7" (consUU_c28 "8" (consUU_c28 "9" nilUU_c27))))))))))

fun get_at_i37(A_v139761, n_v139762, xs_v139763, a_v139764) =
  let __v139765 = n_v139762 in
  if __v139765 then
    let n_v139766 = __v139765.-1 in
    match xs_v139763 with
    | nilUU_c27  ⇒ a_v139764
    | consUU_c28 __v139767 xs_v139768 ⇒
      get_at_i37(NULL, n_v139766, xs_v139768, a_v139764)
    end
  else
    match xs_v139763 with
    | nilUU_c27  ⇒ a_v139764 | consUU_c28 x_v139769 __v139770 ⇒ x_v139769
    end

val get_atclo_i126 =
  fn A_v139771 n_v139772 xs_v139773 a_v139774 ⇒
    get_at_i37(A_v139771, n_v139772, xs_v139773, a_v139774)

fun string_of_digit_i38(n_v139775) =
  get_at_i37(NULL, n_v139775, digits_i36, EmptyString_c6)

val string_of_digitclo_i127 = fn n_v139776 ⇒ string_of_digit_i38(n_v139776)

fun string_of_nat_i39(n_v139777) =
  let s_v139778 = string_of_digit_i38(modn_i17(n_v139777, 10)) in
  let n_v139779 = divn_i16(n_v139777, 10) in
  if ltn_i8(0, n_v139779) then
    cats_i20(string_of_nat_i39(n_v139779), s_v139778)
  else
    s_v139778

val string_of_natclo_i128 = fn n_v139780 ⇒ string_of_nat_i39(n_v139780)

fun digit_of_char_i40(c_v139781) =
  if eqc_i18(c_v139781, '0') then
    (SomeUL_c18 0)
  else
    if eqc_i18(c_v139781, '1') then
      (SomeUL_c18 1)
    else
      if eqc_i18(c_v139781, '2') then
        (SomeUL_c18 2)
      else
        if eqc_i18(c_v139781, '3') then
          (SomeUL_c18 3)
        else
          if eqc_i18(c_v139781, '4') then
            (SomeUL_c18 4)
          else
            if eqc_i18(c_v139781, '5') then
              (SomeUL_c18 5)
            else
              if eqc_i18(c_v139781, '6') then
                (SomeUL_c18 6)
              else
                if eqc_i18(c_v139781, '7') then
                  (SomeUL_c18 7)
                else
                  if eqc_i18(c_v139781, '8') then
                    (SomeUL_c18 8)
                  else
                    if eqc_i18(c_v139781, '9') then
                      (SomeUL_c18 9)
                    else
                      NoneUL_c17

val digit_of_charclo_i129 = fn c_v139782 ⇒ digit_of_char_i40(c_v139782)

fun nat_of_string_loop_i41(s_v139783, acc_v139784) =
  match s_v139783 with
  | EmptyString_c6  ⇒ (SomeUL_c18 acc_v139784)
  | String_c7 c_v139785 s_v139786 ⇒
    match digit_of_char_i40(c_v139785) with
    | NoneUL_c17  ⇒ NoneUL_c17
    | SomeUL_c18 n_v139787 ⇒
      nat_of_string_loop_i41(s_v139786,
                             addn_i13(muln_i15(acc_v139784, 10), n_v139787))
    end
  end

val nat_of_string_loopclo_i130 =
  fn s_v139788 acc_v139789 ⇒ nat_of_string_loop_i41(s_v139788, acc_v139789)

fun nat_of_string_i42(s_v139790) = nat_of_string_loop_i41(s_v139790, 0)

val nat_of_stringclo_i131 = fn s_v139791 ⇒ nat_of_string_i42(s_v139791)

fun string_diff_i49(s1_v139792, s2_v139793) =
  match s1_v139792 with
  | EmptyString_c6  ⇒ EmptyString_c6
  | String_c7 c1_v139794 s1_v139795 ⇒
    match s2_v139793 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c2_v139796 s2_v139797 ⇒
      if eqc_i18(c1_v139794, c2_v139796) then
        cats_i20("Y", string_diff_i49(s1_v139795, s2_v139797))
      else
        cats_i20("N", string_diff_i49(s1_v139795, s2_v139797))
    end
  end

val string_diffclo_i132 =
  fn s1_v139798 s2_v139799 ⇒ string_diff_i49(s1_v139798, s2_v139799)

fun word_diff_i51(w1_v139800, w2_v139801) =
  match w1_v139800 with
  | Word_c12 s1_v139802 pf1_v139803 ⇒
    match w2_v139801 with
    | Word_c12 s2_v139804 pf2_v139805 ⇒
      let pf1_v139806 = NULL in
      let pf2_v139807 = NULL in
      let pf_v139808 = NULL in
      (Word_c12 string_diff_i49(s1_v139802, s2_v139804) NULL)
    end
  end

val word_diffclo_i133 =
  fn w1_v139809 w2_v139810 ⇒ word_diff_i51(w1_v139809, w2_v139810)

fun eqw_i52(w1_v139811, w2_v139812) =
  match w1_v139811 with
  | Word_c12 s1_v139813 __v139814 ⇒
    match w2_v139812 with
    | Word_c12 s2_v139815 __v139816 ⇒ eqs_i22(s1_v139813, s2_v139815)
    end
  end

val eqwclo_i134 =
  fn w1_v139817 w2_v139818 ⇒ eqw_i52(w1_v139817, w2_v139818)

fun read_word_i59(__v139819) =
  ln __v139820 ⇒
    let s_v139821 = (readline_i33(NULL)) NULL in
    ((if eqn_i10(strlen_i21(s_v139821), 5) then
        fn e_v139822 ⇒ ln __v139823 ⇒ (Word_c12 s_v139821 NULL)
      else
        fn __v139824 ⇒
          ln __v139825 ⇒
            let __v139826 =
              (print_i34("please input a word with length of 5\n")) NULL
            in (read_word_i59(NULL)) NULL)
       NULL)
      NULL

val read_wordclo_i135 = fn __v139827 ⇒ read_word_i59(__v139827)

fun player_loop_i60(ans_v139828, repeat_v139829, c_v139830) =
  (let __v139831 = repeat_v139829 in
   if __v139831 then
     let repeat_v139832 = __v139831.-1 in
     fn c_v139833 ⇒
       ln __v139834 ⇒
         let guess_v139835 = (read_word_i59(NULL)) NULL in
         let c_v139836 =
           ((fn x_v139837 ⇒ ln __v139838 ⇒ send(c_v139833, x_v139837))
              guess_v139835)
             NULL
         in
         let __v139839 = (ln __v139840 ⇒ recv(c_v139836)) NULL in
         (match __v139839 with
          | (b_v139841, c_v139842) ⇒
            ln __v139843 ⇒
              let __v139844 = (ln __v139845 ⇒ (NULL, c_v139842)) NULL in
              (match __v139844 with
               | (pf_v139846, c_v139847) ⇒
                 (if b_v139841 then
                    ln c_v139848 __v139849 ⇒
                      let __v139850 = (print_i34("You Win!\n")) NULL in
                      (ln __v139851 ⇒ close(c_v139848)) NULL
                  else
                    ln c_v139852 __v139853 ⇒
                      let __v139854 = (ln __v139855 ⇒ recv(c_v139852)) NULL
                      in
                      (match __v139854 with
                       | (diff_v139856, c_v139857) ⇒
                         ln __v139858 ⇒
                           let __v139859 =
                             (ln __v139860 ⇒ (NULL, c_v139857)) NULL
                           in
                           (match __v139859 with
                            | (pf_v139861, c_v139862) ⇒
                              match diff_v139856 with
                              | Word_c12 s_v139863 __v139864 ⇒
                                ln __v139865 ⇒
                                  let __v139866 =
                                    (print_i34(cats_i20(cats_i20(cats_i20(
                                                                 cats_i20(
                                                                 "Incorrect, hint: ",
                                                                 s_v139863),
                                                                 ". You have "),
                                                                 string_of_nat_i39(
                                                                 repeat_v139832)),
                                                        " more tries.\n")))
                                      NULL
                                  in
                                  (player_loop_i60(NULL, repeat_v139832,
                                                   c_v139862))
                                    NULL
                              end
                            end) NULL
                       end) NULL)
                   c_v139847
               end) NULL
          end) NULL
   else
     fn c_v139867 ⇒
       ln __v139868 ⇒
         let __v139869 = (ln __v139870 ⇒ recv(c_v139867)) NULL in
         (match __v139869 with
          | (ans_v139871, c_v139872) ⇒
            ln __v139873 ⇒
              let __v139874 = (ln __v139875 ⇒ (NULL, c_v139872)) NULL in
              (match __v139874 with
               | (pf_v139876, c_v139877) ⇒
                 match ans_v139871 with
                 | Word_c12 s_v139878 __v139879 ⇒
                   ln __v139880 ⇒
                     let __v139881 =
                       (print_i34(cats_i20(cats_i20("You Lose! The answer is ",
                                                    s_v139878),
                                           ".\n")))
                         NULL
                     in (ln __v139882 ⇒ close(c_v139877)) NULL
                 end
               end) NULL
          end) NULL)
    c_v139830

val player_loopclo_i136 =
  fn ans_v139883 repeat_v139884 c_v139885 ⇒
    player_loop_i60(ans_v139883, repeat_v139884, c_v139885)

fun player_i61(c_v139886) =
  ln __v139887 ⇒
    let __v139888 = (ln __v139889 ⇒ (NULL, c_v139886)) NULL in
    (match __v139888 with
     | (ans_v139890, c_v139891) ⇒
       ln __v139892 ⇒
         let __v139893 = (ln __v139894 ⇒ recv(c_v139891)) NULL in
         (match __v139893 with
          | (repeat_v139895, c_v139896) ⇒
            ln __v139897 ⇒
              let __v139898 = (print_i34("Wordle Game\n")) NULL in
              let __v139899 =
                (print_i34("Please guess a word of length 5.\n")) NULL
              in
              let __v139900 =
                (print_i34(cats_i20(cats_i20("You have ",
                                             string_of_nat_i39(repeat_v139895)),
                                    " tries.\n")))
                  NULL
              in (player_loop_i60(NULL, repeat_v139895, c_v139896)) NULL
          end) NULL
     end) NULL

val playerclo_i137 = fn c_v139901 ⇒ player_i61(c_v139901)

fun server_loop_i62(ans_v139902, repeat_v139903, c_v139904) =
  (let __v139905 = repeat_v139903 in
   if __v139905 then
     let repeat_v139906 = __v139905.-1 in
     fn c_v139907 ⇒
       ln __v139908 ⇒
         let __v139909 = (ln __v139910 ⇒ recv(c_v139907)) NULL in
         (match __v139909 with
          | (guess_v139911, c_v139912) ⇒
            let b_v139913 = eqw_i52(ans_v139902, guess_v139911) in
            ln __v139914 ⇒
              let c_v139915 =
                ((fn x_v139916 ⇒
                    ln __v139917 ⇒ send(c_v139912, x_v139916))
                   b_v139913)
                  NULL
              in
              let c_v139918 =
                ((fn x_v139919 ⇒ ln __v139920 ⇒ c_v139915) NULL) NULL
              in
              ((if b_v139913 then
                  ln c_v139921 __v139922 ⇒
                    let __v139923 = c_v139921 in NULL
                else
                  ln c_v139924 __v139925 ⇒
                    let c_v139926 =
                      ((fn x_v139927 ⇒
                          ln __v139928 ⇒ send(c_v139924, x_v139927))
                         word_diff_i51(ans_v139902, guess_v139911))
                        NULL
                    in
                    let c_v139929 =
                      ((fn x_v139930 ⇒ ln __v139931 ⇒ c_v139926) NULL)
                        NULL
                    in
                    (server_loop_i62(ans_v139902, repeat_v139906, c_v139929))
                      NULL)
                 c_v139918)
                NULL
          end) NULL
   else
     fn c_v139932 ⇒
       ln __v139933 ⇒
         let c_v139934 =
           ((fn x_v139935 ⇒ ln __v139936 ⇒ send(c_v139932, x_v139935))
              ans_v139902)
             NULL
         in
         let c_v139937 =
           ((fn x_v139938 ⇒ ln __v139939 ⇒ c_v139934) NULL) NULL
         in (ln __v139940 ⇒ let __v139941 = c_v139937 in NULL) NULL)
    c_v139904

val server_loopclo_i138 =
  fn ans_v139942 repeat_v139943 c_v139944 ⇒
    server_loop_i62(ans_v139942, repeat_v139943, c_v139944)

fun server_i63(c_v139945) =
  let repeat_v139946 = 5 in
  let ans_v139947 = (Word_c12 "world" NULL) in
  ln __v139948 ⇒
    let c_v139949 = ((fn x_v139950 ⇒ ln __v139951 ⇒ c_v139945) NULL) NULL
    in
    let c_v139952 =
      ((fn x_v139953 ⇒ ln __v139954 ⇒ send(c_v139949, x_v139953))
         repeat_v139946)
        NULL
    in (server_loop_i62(ans_v139947, repeat_v139946, c_v139952)) NULL

val serverclo_i139 = fn c_v139955 ⇒ server_i63(c_v139955)

main =
  (ln __v139956 ⇒
     let c_v139957 =
       (ln __v139958 ⇒ fork c_v139959 in (server_i63(c_v139959)) NULL) NULL
     in
     let c0_v139960 =
       (ln __v139961 ⇒
          fork c0_v139962 in
            (ln __v139963 ⇒
               let __v139964 = (ln __v139965 ⇒ recv(c0_v139962)) NULL in
               (match __v139964 with
                | (c_v139966, c0_v139967) ⇒
                  ln __v139968 ⇒
                    let __v139969 = (player_i61(c_v139966)) NULL in
                    let c0_v139970 =
                      ((fn x_v139971 ⇒
                          ln __v139972 ⇒ send(c0_v139967, x_v139971))
                         NULL)
                        NULL
                    in
                    (ln __v139973 ⇒ let __v139974 = c0_v139970 in NULL)
                      NULL
                end) NULL)
              NULL)
         NULL
     in
     let c0_v139975 =
       ((ln x_v139976 __v139977 ⇒ send(c0_v139960, x_v139976)) c_v139957)
         NULL
     in
     let __v139978 = (ln __v139979 ⇒ recv(c0_v139975)) NULL in
     (match __v139978 with
      | (__v139980, c0_v139981) ⇒ ln __v139982 ⇒ close(c0_v139981)
      end) NULL)
    NULL

trans23 success--------------------------

fun andb_i2(b1_v141115, b2_v141116) = if b1_v141115 then
                                        b2_v141116
                                      else
                                        0

val andbclo_i89 =
  fn b1_v141117 b2_v141118 ⇒ andb_i2(b1_v141117, b2_v141118)

fun orb_i3(b1_v141119, b2_v141120) = if b1_v141119 then
                                       1
                                     else
                                       b2_v141120

val orbclo_i90 = fn b1_v141121 b2_v141122 ⇒ orb_i3(b1_v141121, b2_v141122)

fun notb_i4(b_v141123) = if b_v141123 then
                           0
                         else
                           1

val notbclo_i91 = fn b_v141124 ⇒ notb_i4(b_v141124)

fun compareb_i5(b1_v141125, b2_v141126) =
  if b1_v141125 then
    if b2_v141126 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v141126 then
      LT_c1
    else
      EQ_c3

val comparebclo_i92 =
  fn b1_v141127 b2_v141128 ⇒ compareb_i5(b1_v141127, b2_v141128)

fun lten_i6(x_v141129, y_v141130) =
  if x_v141129 then
    if y_v141130 then
      lten_i6(x_v141129.-1, y_v141130.-1)
    else
      0
  else
    1

val ltenclo_i93 = fn x_v141131 y_v141132 ⇒ lten_i6(x_v141131, y_v141132)

fun gten_i7(x_v141133, y_v141134) =
  if x_v141133 then
    if y_v141134 then
      gten_i7(x_v141133.-1, y_v141134.-1)
    else
      1
  else
    if y_v141134 then
      0
    else
      1

val gtenclo_i94 = fn x_v141135 y_v141136 ⇒ gten_i7(x_v141135, y_v141136)

fun ltn_i8(x_v141137, y_v141138) =
  if x_v141137 then
    if y_v141138 then
      ltn_i8(x_v141137.-1, y_v141138.-1)
    else
      0
  else
    if y_v141138 then
      1
    else
      0

val ltnclo_i95 = fn x_v141139 y_v141140 ⇒ ltn_i8(x_v141139, y_v141140)

fun gtn_i9(x_v141141, y_v141142) =
  if x_v141141 then
    if y_v141142 then
      gtn_i9(x_v141141.-1, y_v141142.-1)
    else
      1
  else
    0

val gtnclo_i96 = fn x_v141143 y_v141144 ⇒ gtn_i9(x_v141143, y_v141144)

fun eqn_i10(x_v141145, y_v141146) =
  if x_v141145 then
    if y_v141146 then
      eqn_i10(x_v141145.-1, y_v141146.-1)
    else
      0
  else
    if y_v141146 then
      0
    else
      1

val eqnclo_i97 = fn x_v141147 y_v141148 ⇒ eqn_i10(x_v141147, y_v141148)

fun comparen_i11(n1_v141149, n2_v141150) =
  if n1_v141149 then
    if n2_v141150 then
      comparen_i11(n1_v141149.-1, n2_v141150.-1)
    else
      GT_c2
  else
    if n2_v141150 then
      LT_c1
    else
      EQ_c3

val comparenclo_i98 =
  fn n1_v141151 n2_v141152 ⇒ comparen_i11(n1_v141151, n2_v141152)

fun pred_i12(x_v141153) = if x_v141153 then
                            x_v141153.-1
                          else
                            0

val predclo_i99 = fn x_v141154 ⇒ pred_i12(x_v141154)

fun addn_i13(x_v141155, y_v141156) =
  if x_v141155 then
    addn_i13(x_v141155.-1, y_v141156).+1
  else
    y_v141156

val addnclo_i100 = fn x_v141157 y_v141158 ⇒ addn_i13(x_v141157, y_v141158)

fun subn_i14(x_v141159, y_v141160) =
  if y_v141160 then
    subn_i14(pred_i12(x_v141159), y_v141160.-1)
  else
    x_v141159

val subnclo_i101 = fn x_v141161 y_v141162 ⇒ subn_i14(x_v141161, y_v141162)

fun muln_i15(x_v141163, y_v141164) =
  if x_v141163 then
    addn_i13(y_v141164, muln_i15(x_v141163.-1, y_v141164))
  else
    0

val mulnclo_i102 = fn x_v141165 y_v141166 ⇒ muln_i15(x_v141165, y_v141166)

fun divn_i16(x_v141167, y_v141168) =
  if ltn_i8(x_v141167, y_v141168) then
    0
  else
    divn_i16(subn_i14(x_v141167, y_v141168), y_v141168).+1

val divnclo_i103 = fn x_v141169 y_v141170 ⇒ divn_i16(x_v141169, y_v141170)

fun modn_i17(x_v141171, y_v141172) =
  subn_i14(x_v141171, muln_i15(divn_i16(x_v141171, y_v141172), y_v141172))

val modnclo_i104 = fn x_v141173 y_v141174 ⇒ modn_i17(x_v141173, y_v141174)

fun eqc_i18(c1_v141175, c2_v141176) =
  match c1_v141175 with
  | Char_c5 n1_v141177 ⇒
    match c2_v141176 with
    | Char_c5 n2_v141178 ⇒ eqn_i10(n1_v141177, n2_v141178)
    end
  end

val eqcclo_i105 =
  fn c1_v141179 c2_v141180 ⇒ eqc_i18(c1_v141179, c2_v141180)

fun comparec_i19(c1_v141181, c2_v141182) =
  match c1_v141181 with
  | Char_c5 n1_v141183 ⇒
    match c2_v141182 with
    | Char_c5 n2_v141184 ⇒ comparen_i11(n1_v141183, n2_v141184)
    end
  end

val comparecclo_i106 =
  fn c1_v141185 c2_v141186 ⇒ comparec_i19(c1_v141185, c2_v141186)

fun cats_i20(s1_v141187, s2_v141188) =
  match s1_v141187 with
  | EmptyString_c6  ⇒ s2_v141188
  | String_c7 c_v141189 s1_v141190 ⇒
    (String_c7 c_v141189 cats_i20(s1_v141190, s2_v141188))
  end

val catsclo_i107 =
  fn s1_v141191 s2_v141192 ⇒ cats_i20(s1_v141191, s2_v141192)

fun strlen_i21(s_v141193) =
  match s_v141193 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v141194 s_v141195 ⇒ strlen_i21(s_v141195).+1
  end

val strlenclo_i108 = fn s_v141196 ⇒ strlen_i21(s_v141196)

fun eqs_i22(s1_v141197, s2_v141198) =
  match s1_v141197 with
  | EmptyString_c6  ⇒
    match s2_v141198 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v141199 __v141200 ⇒ 0
    end
  | String_c7 c1_v141201 s1_v141202 ⇒
    match s2_v141198 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v141203 s2_v141204 ⇒
      andb_i2(eqc_i18(c1_v141201, c2_v141203),
              eqs_i22(s1_v141202, s2_v141204))
    end
  end

val eqsclo_i109 =
  fn s1_v141205 s2_v141206 ⇒ eqs_i22(s1_v141205, s2_v141206)

fun compares_i23(s1_v141207, s2_v141208) =
  match s1_v141207 with
  | EmptyString_c6  ⇒
    match s2_v141208 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v141209 __v141210 ⇒ LT_c1
    end
  | String_c7 c1_v141211 s1_v141212 ⇒
    match s2_v141208 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v141213 s2_v141214 ⇒
      match comparec_i19(c1_v141211, c2_v141213) with
      | EQ_c3  ⇒ compares_i23(s1_v141212, s2_v141214) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i110 =
  fn s1_v141215 s2_v141216 ⇒ compares_i23(s1_v141215, s2_v141216)

fun and_thenUUU_i74(A_v141217, B_v141218, opt_v141219, f_v141220) =
  match opt_v141219 with
  | NoneUU_c19  ⇒ NoneUU_c19
  | SomeUU_c20 x_v141221 ⇒ (f_v141220) x_v141221
  end

val and_thenUUUclo_i111 =
  fn A_v141222 B_v141223 opt_v141224 ⇒
    ln f_v141225 ⇒
      and_thenUUU_i74(A_v141222, B_v141223, opt_v141224, f_v141225)

fun and_thenUUL_i73(A_v141226, B_v141227, opt_v141228, f_v141229) =
  match opt_v141228 with
  | NoneUL_c17  ⇒ NoneUL_c17
  | SomeUL_c18 x_v141230 ⇒ (f_v141229) x_v141230
  end

val and_thenUULclo_i112 =
  fn A_v141231 B_v141232 opt_v141233 ⇒
    ln f_v141234 ⇒
      and_thenUUL_i73(A_v141231, B_v141232, opt_v141233, f_v141234)

fun and_thenULU_i72(A_v141235, B_v141236, opt_v141237, f_v141238) =
  match opt_v141237 with
  | NoneUU_c19  ⇒ NoneLU_c15
  | SomeUU_c20 x_v141239 ⇒ (f_v141238) x_v141239
  end

val and_thenULUclo_i113 =
  fn A_v141240 B_v141241 opt_v141242 ⇒
    ln f_v141243 ⇒
      and_thenULU_i72(A_v141240, B_v141241, opt_v141242, f_v141243)

fun and_thenULL_i71(A_v141244, B_v141245, opt_v141246, f_v141247) =
  match opt_v141246 with
  | NoneUL_c17  ⇒ NoneLL_c13
  | SomeUL_c18 x_v141248 ⇒ (f_v141247) x_v141248
  end

val and_thenULLclo_i114 =
  fn A_v141249 B_v141250 opt_v141251 ⇒
    ln f_v141252 ⇒
      and_thenULL_i71(A_v141249, B_v141250, opt_v141251, f_v141252)

fun and_thenLUL_i69(A_v141253, B_v141254, opt_v141255, f_v141256) =
  match opt_v141255 with
  | NoneLL_c13  ⇒ NoneUL_c17
  | SomeLL_c14 x_v141257 ⇒ (f_v141256) x_v141257
  end

val and_thenLULclo_i115 =
  fn A_v141258 B_v141259 opt_v141260 ⇒
    ln f_v141261 ⇒
      and_thenLUL_i69(A_v141258, B_v141259, opt_v141260, f_v141261)

fun and_thenLLL_i67(A_v141262, B_v141263, opt_v141264, f_v141265) =
  match opt_v141264 with
  | NoneLL_c13  ⇒ NoneLL_c13
  | SomeLL_c14 x_v141266 ⇒ (f_v141265) x_v141266
  end

val and_thenLLLclo_i116 =
  fn A_v141267 B_v141268 opt_v141269 ⇒
    ln f_v141270 ⇒
      and_thenLLL_i67(A_v141267, B_v141268, opt_v141269, f_v141270)

fun lenUU_i78(A_v141271, xs_v141272) =
  match xs_v141272 with
  | nilUU_c27  ⇒ (0, nilUU_c27)
  | consUU_c28 x_v141273 xs_v141274 ⇒
    match lenUU_i78(NULL, xs_v141274) with
    | (n_v141275, xs_v141276) ⇒
      (n_v141275.+1, (consUU_c28 x_v141273 xs_v141276))
    end
  end

val lenUUclo_i117 =
  fn A_v141277 xs_v141278 ⇒ lenUU_i78(A_v141277, xs_v141278)

fun lenUL_i77(A_v141279, xs_v141280) =
  match xs_v141280 with
  | nilUL_c25  ⇒ (0, nilUL_c25)
  | consUL_c26 x_v141281 xs_v141282 ⇒
    match lenUL_i77(NULL, xs_v141282) with
    | (n_v141283, xs_v141284) ⇒
      (n_v141283.+1, (consUL_c26 x_v141281 xs_v141284))
    end
  end

val lenULclo_i118 =
  fn A_v141285 xs_v141286 ⇒ lenUL_i77(A_v141285, xs_v141286)

fun lenLL_i75(A_v141287, xs_v141288) =
  match xs_v141288 with
  | nilLL_c21  ⇒ (0, nilLL_c21)
  | consLL_c22 x_v141289 xs_v141290 ⇒
    match lenLL_i75(NULL, xs_v141290) with
    | (n_v141291, xs_v141292) ⇒
      (n_v141291.+1, (consLL_c22 x_v141289 xs_v141292))
    end
  end

val lenLLclo_i119 =
  fn A_v141293 xs_v141294 ⇒ lenLL_i75(A_v141293, xs_v141294)

fun appendUU_i82(A_v141295, xs_v141296, ys_v141297) =
  match xs_v141296 with
  | nilUU_c27  ⇒ ys_v141297
  | consUU_c28 x_v141298 xs_v141299 ⇒
    (consUU_c28 x_v141298 appendUU_i82(NULL, xs_v141299, ys_v141297))
  end

val appendUUclo_i120 =
  fn A_v141300 xs_v141301 ⇒
    ln ys_v141302 ⇒ appendUU_i82(A_v141300, xs_v141301, ys_v141302)

fun appendUL_i81(A_v141303, xs_v141304, ys_v141305) =
  match xs_v141304 with
  | nilUL_c25  ⇒ ys_v141305
  | consUL_c26 x_v141306 xs_v141307 ⇒
    (consUL_c26 x_v141306 appendUL_i81(NULL, xs_v141307, ys_v141305))
  end

val appendULclo_i121 =
  fn A_v141308 xs_v141309 ⇒
    ln ys_v141310 ⇒ appendUL_i81(A_v141308, xs_v141309, ys_v141310)

fun appendLL_i79(A_v141311, xs_v141312, ys_v141313) =
  match xs_v141312 with
  | nilLL_c21  ⇒ ys_v141313
  | consLL_c22 x_v141314 xs_v141315 ⇒
    (consLL_c22 x_v141314 appendLL_i79(NULL, xs_v141315, ys_v141313))
  end

val appendLLclo_i122 =
  fn A_v141316 xs_v141317 ⇒
    ln ys_v141318 ⇒ appendLL_i79(A_v141316, xs_v141317, ys_v141318)

fun readline_i33(__v141319) =
  ln __v141320 ⇒
    let ch_v141321 = open stdin in
    let ch_v141322 = send(ch_v141321, 1) in
    let __v141323 = recv(ch_v141322) in
    match __v141323 with
    | (s_v141324, ch_v141325) ⇒
      let ch_v141326 = send(ch_v141325, 0) in s_v141324
    end

val readlineclo_i123 = fn __v141327 ⇒ readline_i33(__v141327)

fun print_i34(s_v141328) =
  ln __v141329 ⇒
    let ch_v141330 = open stdout in
    let ch_v141331 = send(ch_v141330, 1) in
    let ch_v141332 = send(ch_v141331, s_v141328) in
    let ch_v141333 = send(ch_v141332, 0) in NULL

val printclo_i124 = fn s_v141334 ⇒ print_i34(s_v141334)

fun prerr_i35(s_v141335) =
  ln __v141336 ⇒
    let ch_v141337 = open stderr in
    let ch_v141338 = send(ch_v141337, 1) in
    let ch_v141339 = send(ch_v141338, s_v141335) in
    let ch_v141340 = send(ch_v141339, 0) in NULL

val prerrclo_i125 = fn s_v141341 ⇒ prerr_i35(s_v141341)

val digits_i36 =
  (consUU_c28
    "0"
    (consUU_c28
      "1"
      (consUU_c28
        "2"
        (consUU_c28
          "3"
          (consUU_c28
            "4"
            (consUU_c28
              "5"
              (consUU_c28
                "6"
                (consUU_c28 "7" (consUU_c28 "8" (consUU_c28 "9" nilUU_c27))))))))))

fun get_at_i37(A_v141342, n_v141343, xs_v141344, a_v141345) =
  if n_v141343 then
    match xs_v141344 with
    | nilUU_c27  ⇒ a_v141345
    | consUU_c28 __v141346 xs_v141347 ⇒
      get_at_i37(NULL, n_v141343.-1, xs_v141347, a_v141345)
    end
  else
    match xs_v141344 with
    | nilUU_c27  ⇒ a_v141345 | consUU_c28 x_v141348 __v141349 ⇒ x_v141348
    end

val get_atclo_i126 =
  fn A_v141350 n_v141351 xs_v141352 a_v141353 ⇒
    get_at_i37(A_v141350, n_v141351, xs_v141352, a_v141353)

fun string_of_digit_i38(n_v141354) =
  get_at_i37(NULL, n_v141354, digits_i36, EmptyString_c6)

val string_of_digitclo_i127 = fn n_v141355 ⇒ string_of_digit_i38(n_v141355)

fun string_of_nat_i39(n_v141356) =
  let s_v141357 = string_of_digit_i38(modn_i17(n_v141356, 10)) in
  let n_v141358 = divn_i16(n_v141356, 10) in
  if ltn_i8(0, n_v141358) then
    cats_i20(string_of_nat_i39(n_v141358), s_v141357)
  else
    s_v141357

val string_of_natclo_i128 = fn n_v141359 ⇒ string_of_nat_i39(n_v141359)

fun digit_of_char_i40(c_v141360) =
  if eqc_i18(c_v141360, '0') then
    (SomeUL_c18 0)
  else
    if eqc_i18(c_v141360, '1') then
      (SomeUL_c18 1)
    else
      if eqc_i18(c_v141360, '2') then
        (SomeUL_c18 2)
      else
        if eqc_i18(c_v141360, '3') then
          (SomeUL_c18 3)
        else
          if eqc_i18(c_v141360, '4') then
            (SomeUL_c18 4)
          else
            if eqc_i18(c_v141360, '5') then
              (SomeUL_c18 5)
            else
              if eqc_i18(c_v141360, '6') then
                (SomeUL_c18 6)
              else
                if eqc_i18(c_v141360, '7') then
                  (SomeUL_c18 7)
                else
                  if eqc_i18(c_v141360, '8') then
                    (SomeUL_c18 8)
                  else
                    if eqc_i18(c_v141360, '9') then
                      (SomeUL_c18 9)
                    else
                      NoneUL_c17

val digit_of_charclo_i129 = fn c_v141361 ⇒ digit_of_char_i40(c_v141361)

fun nat_of_string_loop_i41(s_v141362, acc_v141363) =
  match s_v141362 with
  | EmptyString_c6  ⇒ (SomeUL_c18 acc_v141363)
  | String_c7 c_v141364 s_v141365 ⇒
    match digit_of_char_i40(c_v141364) with
    | NoneUL_c17  ⇒ NoneUL_c17
    | SomeUL_c18 n_v141366 ⇒
      nat_of_string_loop_i41(s_v141365,
                             addn_i13(muln_i15(acc_v141363, 10), n_v141366))
    end
  end

val nat_of_string_loopclo_i130 =
  fn s_v141367 acc_v141368 ⇒ nat_of_string_loop_i41(s_v141367, acc_v141368)

fun nat_of_string_i42(s_v141369) = nat_of_string_loop_i41(s_v141369, 0)

val nat_of_stringclo_i131 = fn s_v141370 ⇒ nat_of_string_i42(s_v141370)

fun string_diff_i49(s1_v141371, s2_v141372) =
  match s1_v141371 with
  | EmptyString_c6  ⇒ EmptyString_c6
  | String_c7 c1_v141373 s1_v141374 ⇒
    match s2_v141372 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c2_v141375 s2_v141376 ⇒
      if eqc_i18(c1_v141373, c2_v141375) then
        cats_i20("Y", string_diff_i49(s1_v141374, s2_v141376))
      else
        cats_i20("N", string_diff_i49(s1_v141374, s2_v141376))
    end
  end

val string_diffclo_i132 =
  fn s1_v141377 s2_v141378 ⇒ string_diff_i49(s1_v141377, s2_v141378)

fun word_diff_i51(w1_v141379, w2_v141380) =
  match w1_v141379 with
  | Word_c12 s1_v141381 pf1_v141382 ⇒
    match w2_v141380 with
    | Word_c12 s2_v141383 pf2_v141384 ⇒
      (Word_c12 string_diff_i49(s1_v141381, s2_v141383) NULL)
    end
  end

val word_diffclo_i133 =
  fn w1_v141385 w2_v141386 ⇒ word_diff_i51(w1_v141385, w2_v141386)

fun eqw_i52(w1_v141387, w2_v141388) =
  match w1_v141387 with
  | Word_c12 s1_v141389 __v141390 ⇒
    match w2_v141388 with
    | Word_c12 s2_v141391 __v141392 ⇒ eqs_i22(s1_v141389, s2_v141391)
    end
  end

val eqwclo_i134 =
  fn w1_v141393 w2_v141394 ⇒ eqw_i52(w1_v141393, w2_v141394)

fun read_word_i59(__v141395) =
  ln __v141396 ⇒
    let s_v141397 = (readline_i33(NULL)) NULL in
    ((if eqn_i10(strlen_i21(s_v141397), 5) then
        fn e_v141398 ⇒ ln __v141399 ⇒ (Word_c12 s_v141397 NULL)
      else
        fn __v141400 ⇒
          ln __v141401 ⇒
            let __v141402 =
              (print_i34("please input a word with length of 5\n")) NULL
            in (read_word_i59(NULL)) NULL)
       NULL)
      NULL

val read_wordclo_i135 = fn __v141403 ⇒ read_word_i59(__v141403)

fun player_loop_i60(ans_v141404, repeat_v141405, c_v141406) =
  (if repeat_v141405 then
     fn c_v141407 ⇒
       ln __v141408 ⇒
         let guess_v141409 = (read_word_i59(NULL)) NULL in
         let c_v141410 = send(c_v141407, guess_v141409) in
         let __v141411 = recv(c_v141410) in
         match __v141411 with
         | (b_v141412, c_v141413) ⇒
           match (NULL, c_v141413) with
           | (pf_v141414, c_v141415) ⇒
             ((if b_v141412 then
                 ln c_v141416 __v141417 ⇒
                   let __v141418 = (print_i34("You Win!\n")) NULL in
                   close(c_v141416)
               else
                 ln c_v141419 __v141420 ⇒
                   let __v141421 = recv(c_v141419) in
                   match __v141421 with
                   | (diff_v141422, c_v141423) ⇒
                     match (NULL, c_v141423) with
                     | (pf_v141424, c_v141425) ⇒
                       match diff_v141422 with
                       | Word_c12 s_v141426 __v141427 ⇒
                         let __v141428 =
                           (print_i34(cats_i20(cats_i20(cats_i20(cats_i20(
                                                                 "Incorrect, hint: ",
                                                                 s_v141426),
                                                                 ". You have "),
                                                        string_of_nat_i39(
                                                        repeat_v141405.-1)),
                                               " more tries.\n")))
                             NULL
                         in
                         (player_loop_i60(NULL, repeat_v141405.-1, c_v141425))
                           NULL
                       end
                     end
                   end)
                c_v141415)
               NULL
           end
         end
   else
     fn c_v141429 ⇒
       ln __v141430 ⇒
         let __v141431 = recv(c_v141429) in
         match __v141431 with
         | (ans_v141432, c_v141433) ⇒
           match (NULL, c_v141433) with
           | (pf_v141434, c_v141435) ⇒
             match ans_v141432 with
             | Word_c12 s_v141436 __v141437 ⇒
               let __v141438 =
                 (print_i34(cats_i20(cats_i20("You Lose! The answer is ",
                                              s_v141436),
                                     ".\n")))
                   NULL
               in close(c_v141435)
             end
           end
         end)
    c_v141406

val player_loopclo_i136 =
  fn ans_v141439 repeat_v141440 c_v141441 ⇒
    player_loop_i60(ans_v141439, repeat_v141440, c_v141441)

fun player_i61(c_v141442) =
  ln __v141443 ⇒
    match (NULL, c_v141442) with
    | (ans_v141444, c_v141445) ⇒
      let __v141446 = recv(c_v141445) in
      match __v141446 with
      | (repeat_v141447, c_v141448) ⇒
        let __v141449 = (print_i34("Wordle Game\n")) NULL in
        let __v141450 =
          (print_i34("Please guess a word of length 5.\n")) NULL
        in
        let __v141451 =
          (print_i34(cats_i20(cats_i20("You have ",
                                       string_of_nat_i39(repeat_v141447)),
                              " tries.\n")))
            NULL
        in (player_loop_i60(NULL, repeat_v141447, c_v141448)) NULL
      end
    end

val playerclo_i137 = fn c_v141452 ⇒ player_i61(c_v141452)

fun server_loop_i62(ans_v141453, repeat_v141454, c_v141455) =
  (if repeat_v141454 then
     fn c_v141456 ⇒
       ln __v141457 ⇒
         let __v141458 = recv(c_v141456) in
         match __v141458 with
         | (guess_v141459, c_v141460) ⇒
           let b_v141461 = eqw_i52(ans_v141453, guess_v141459) in
           let c_v141462 = send(c_v141460, b_v141461) in
           ((if b_v141461 then
               ln c_v141463 __v141464 ⇒ NULL
             else
               ln c_v141465 __v141466 ⇒
                 let c_v141467 =
                   let x_v141468 = word_diff_i51(ans_v141453, guess_v141459)
                   in send(c_v141465, x_v141468)
                 in
                 (server_loop_i62(ans_v141453, repeat_v141454.-1, c_v141467))
                   NULL)
              c_v141462)
             NULL
         end
   else
     fn c_v141469 ⇒
       ln __v141470 ⇒ let c_v141471 = send(c_v141469, ans_v141453) in NULL)
    c_v141455

val server_loopclo_i138 =
  fn ans_v141472 repeat_v141473 c_v141474 ⇒
    server_loop_i62(ans_v141472, repeat_v141473, c_v141474)

fun server_i63(c_v141475) =
  ln __v141476 ⇒
    let c_v141477 = send(c_v141475, 5) in
    (server_loop_i62((Word_c12 "world" NULL), 5, c_v141477)) NULL

val serverclo_i139 = fn c_v141478 ⇒ server_i63(c_v141478)

main =
  let c_v141479 = fork c_v141480 in (server_i63(c_v141480)) NULL in
  let c0_v141481 =
    fork c0_v141482 in
      let __v141483 = recv(c0_v141482) in
      match __v141483 with
      | (c_v141484, c0_v141485) ⇒
        let __v141486 = (player_i61(c_v141484)) NULL in
        let c0_v141487 = send(c0_v141485, NULL) in NULL
      end
  in
  let c0_v141488 = send(c0_v141481, c_v141479) in
  let __v141489 = recv(c0_v141488) in
  match __v141489 with
  | (__v141490, c0_v141491) ⇒ close(c0_v141491)
  end

trans3e success--------------------------

trans34 success--------------------------

