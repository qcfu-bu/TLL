logical inductive uniq‹s› (A : Type‹s›) (m : A) : U = Uniq of ‹s› {A : Type‹s›} {m : A} (x : A) (_ : m ≡ x) → (
(uniq‹s›) (A)
(m))

program ex‹› {x : ((uniq) (_)
(O.+0))} : string = match {x} as _ in _ with Uniq _ _ ⇒ ((cats)
(((String) (((Char) (O.+104)))
 (((String) (((Char) (O.+101)))
  (((String) (((Char) (O.+108)))
   (((String) (((Char) (O.+108)))
    (((String) (((Char) (O.+111))) (EmptyString)))))))))))
(((String) (((Char) (O.+119)))
 (((String) (((Char) (O.+111)))
  (((String) (((Char) (O.+114)))
   (((String) (((Char) (O.+108)))
    (((String) (((Char) (O.+100))) (EmptyString))))))))))))

program ex_bad1‹› {x : ((uniq) (_)
(O.+0))} : string = match {x} as _ in _ with Uniq n _ ⇒ ((cats)
(((cats)
 (((String) (((Char) (O.+104)))
  (((String) (((Char) (O.+101)))
   (((String) (((Char) (O.+108)))
    (((String) (((Char) (O.+108)))
     (((String) (((Char) (O.+111))) (EmptyString)))))))))))
 (((String) (((Char) (O.+119)))
  (((String) (((Char) (O.+111)))
   (((String) (((Char) (O.+114)))
    (((String) (((Char) (O.+108)))
     (((String) (((Char) (O.+100))) (EmptyString)))))))))))))
(((string_of_nat) (n))))

logical inductive or‹s,
t› (A : Type‹s›) (B : Type‹t›) : U = InjL of ‹s,
t› {A : Type‹s›} {B : Type‹t›} (x : A) → ((or‹s, t›) 
(A) (B)) | InjR of ‹s,
t› {A : Type‹s›} {B : Type‹t›} (y : B) → ((or‹s, t›) 
(A)
(B))

program ex_bad2‹› : string = match {(((InjL) (())) : ((or) (unit‹s›)
(⊥)))} as _ in _ with InjL _ ⇒ ((String) (((Char) (O.+104)))
(((String) (((Char) (O.+101)))
 (((String) (((Char) (O.+108)))
  (((String) (((Char) (O.+108)))
   (((String) (((Char) (O.+111))) (EmptyString)))))))))) | InjR _ ⇒ (
(String) (((Char) (O.+119)))
(((String) (((Char) (O.+111)))
 (((String) (((Char) (O.+114)))
  (((String) (((Char) (O.+108)))
   (((String) (((Char) (O.+100))) (EmptyString))))))))))

program ex_bad3‹› (x : ((or) (unit‹s›)
(⊥))) : string = match x as _ in _ with InjL _ ⇒ ((String)
(((Char) (O.+104)))
(((String) (((Char) (O.+101)))
 (((String) (((Char) (O.+108)))
  (((String) (((Char) (O.+108)))
   (((String) (((Char) (O.+111))) (EmptyString)))))))))) | InjR _ ⇒ (
(String) (((Char) (O.+119)))
(((String) (((Char) (O.+111)))
 (((String) (((Char) (O.+114)))
  (((String) (((Char) (O.+108)))
   (((String) (((Char) (O.+100))) (EmptyString))))))))))

program main‹› : IO unit‹s› = let s = ((ex)
(((Uniq) (O.+0) (refl)))) in ((print)
(s))

parsing success--------------------------

inductive order_d1 : U =
| LT_c1 of : order_d1 | GT_c2 of : order_d1 | EQ_c3 of : order_d1

program andb_i1 : bool → bool → bool =
  fn (b1_v280 : bool) (b2_v281 : bool) ⇒
    match b1_v280 as __v282 in ??1 with
    | true ⇒ b2_v281 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v285 : bool) (b2_v286 : bool) ⇒
    match b1_v285 as __v287 in ??2 with
    | true ⇒ true | false ⇒ b2_v286
    end

program notb_i3 : bool → bool =
  fn (b_v289 : bool) ⇒
    match b_v289 as __v290 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program compareb_i4 : bool → bool → order_d1 =
  fn (b1_v293 : bool) (b2_v294 : bool) ⇒
    match b1_v293 as __v295 in ??4 with
    | true ⇒
      match b2_v294 as __v296 in ??6 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v294 as __v297 in ??5 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i5 : nat → nat → bool =
  fn (x_v300 : nat) (y_v301 : nat) ⇒
    match x_v300 as __v302 in ??7 with
    | O ⇒ true
    | S x_v303 ⇒
      match y_v301 as __v304 in ??8 with
      | O ⇒ false | S y_v305 ⇒ (lten_i5 x_v303 y_v305)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v308 : nat) (y_v309 : nat) ⇒ (lten_i5 x_v308.+1 y_v309)

program gten_i7 : nat → nat → bool =
  fn (x_v312 : nat) (y_v313 : nat) ⇒ (lten_i5 y_v313 x_v312)

program gtn_i8 : nat → nat → bool =
  fn (x_v316 : nat) (y_v317 : nat) ⇒ (ltn_i6 y_v317 x_v316)

program eqn_i9 : nat → nat → bool =
  fn (x_v320 : nat) (y_v321 : nat) ⇒
    match x_v320 as __v322 in ??9 with
    | O ⇒
      match y_v321 as __v323 in ??11 with
      | O ⇒ true | S __v324 ⇒ false
      end
    | S x_v325 ⇒
      match y_v321 as __v326 in ??10 with
      | O ⇒ false | S y_v327 ⇒ (eqn_i9 x_v325 y_v327)
      end
    end

program comparen_i10 : nat → nat → order_d1 =
  fn (n1_v330 : nat) (n2_v331 : nat) ⇒
    match n1_v330 as __v332 in ??12 with
    | O ⇒
      match n2_v331 as __v333 in ??14 with
      | O ⇒ EQ_c3‹› | S __v334 ⇒ LT_c1‹›
      end
    | S n1_v335 ⇒
      match n2_v331 as __v336 in ??13 with
      | O ⇒ GT_c2‹› | S n2_v337 ⇒ (comparen_i10 n1_v335 n2_v337)
      end
    end

program pred_i11 : nat → nat =
  fn (x_v339 : nat) ⇒
    match x_v339 as __v340 in ??15 with
    | O ⇒ 0 | S x_v341 ⇒ x_v341
    end

program addn_i12 : nat → nat → nat =
  fn (x_v344 : nat) (y_v345 : nat) ⇒
    match x_v344 as __v346 in ??16 with
    | O ⇒ y_v345 | S x_v347 ⇒ (addn_i12 x_v347 y_v345).+1
    end

program subn_i13 : nat → nat → nat =
  fn (x_v350 : nat) (y_v351 : nat) ⇒
    match y_v351 as __v352 in ??17 with
    | O ⇒ x_v350 | S y_v353 ⇒ (subn_i13 (pred_i11 x_v350) y_v353)
    end

program muln_i14 : nat → nat → nat =
  fn (x_v356 : nat) (y_v357 : nat) ⇒
    match x_v356 as __v358 in ??18 with
    | O ⇒ 0 | S x_v359 ⇒ (addn_i12 y_v357 (muln_i14 x_v359 y_v357))
    end

program divn_i15 : nat → nat → nat =
  fn (x_v362 : nat) (y_v363 : nat) ⇒
    match (ltn_i6 x_v362 y_v363) as __v364 in ??19 with
    | true ⇒ 0 | false ⇒ (divn_i15 (subn_i13 x_v362 y_v363) y_v363).+1
    end

program modn_i16 : nat → nat → nat =
  fn (x_v367 : nat) (y_v368 : nat) ⇒
    (subn_i13 x_v367 (muln_i14 (divn_i15 x_v367 y_v368) y_v368))

inductive between_d2 (lower_v369 : nat) (upper_v370 : nat) : L =
| Between_c4 of
    (lower_v371 : nat) (upper_v372 : nat) (n_v373 : nat)
    {pf1_v374 : (lten_i5 lower_v371 n_v373) ≡ true}
    {pf2_v375 : (lten_i5 n_v373 upper_v372) ≡ true}
    : (between_d2 lower_v371 upper_v372)

inductive char_d3 : U =
| Char_c5 of (n_v376 : nat) : char_d3

program eqc_i17 : char_d3 → char_d3 → bool =
  fn (c1_v379 : char_d3) (c2_v380 : char_d3) ⇒
    match c1_v379 as __v381 in ??22 with
    | Char_c5 n1_v382 ⇒
      match c2_v380 as __v383 in ??23 with
      | Char_c5 n2_v384 ⇒ (eqn_i9 n1_v382 n2_v384)
      end
    end

program comparec_i18 : char_d3 → char_d3 → order_d1 =
  fn (c1_v387 : char_d3) (c2_v388 : char_d3) ⇒
    match c1_v387 as __v389 in ??24 with
    | Char_c5 n1_v390 ⇒
      match c2_v388 as __v391 in ??25 with
      | Char_c5 n2_v392 ⇒ (comparen_i10 n1_v390 n2_v392)
      end
    end

inductive string_d4 : U =
| EmptyString_c6 of : string_d4
| String_c7 of (c_v393 : char_d3) (s_v394 : string_d4) : string_d4

program cats_i19 : string_d4 → string_d4 → string_d4 =
  fn (s1_v397 : string_d4) (s2_v398 : string_d4) ⇒
    match s1_v397 as __v399 in ??26 with
    | EmptyString_c6  ⇒ s2_v398
    | String_c7 c_v400 s1_v401 ⇒
      (String_c7‹› c_v400 (cats_i19 s1_v401 s2_v398))
    end

program strlen_i20 : string_d4 → nat =
  fn (s_v403 : string_d4) ⇒
    match s_v403 as __v404 in ??27 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v405 s_v406 ⇒ (strlen_i20 s_v406).+1
    end

program eqs_i21 : string_d4 → string_d4 → bool =
  fn (s1_v409 : string_d4) (s2_v410 : string_d4) ⇒
    match s1_v409 as __v411 in ??28 with
    | EmptyString_c6  ⇒
      match s2_v410 as __v412 in ??30 with
      | EmptyString_c6  ⇒ true | String_c7 __v413 __v414 ⇒ false
      end
    | String_c7 c1_v415 s1_v416 ⇒
      match s2_v410 as __v417 in ??29 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v418 s2_v419 ⇒
        (andb_i1 (eqc_i17 c1_v415 c2_v418) (eqs_i21 s1_v416 s2_v419))
      end
    end

program compares_i22 : string_d4 → string_d4 → order_d1 =
  fn (s1_v422 : string_d4) (s2_v423 : string_d4) ⇒
    match s1_v422 as __v424 in ??31 with
    | EmptyString_c6  ⇒
      match s2_v423 as __v425 in ??34 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v426 __v427 ⇒ LT_c1‹›
      end
    | String_c7 c1_v428 s1_v429 ⇒
      match s2_v423 as __v430 in ??32 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v431 s2_v432 ⇒
        match (comparec_i18 c1_v428 c2_v431) as __v433 in ??33 with
        | EQ_c3  ⇒ (compares_i22 s1_v429 s2_v432) | LT_c1  ⇒ LT_c1‹›
        | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d5 ‹s_s434, t_s435›
  (A_v436 : Type‹s_s434›) : Type‹t_s435›
=
| None_c8 of
    ‹s_s437, t_s438› (A_v439 : Type‹s_s437›)
    : (option_d5‹s_s437, t_s438› A_v439)
| Some_c9 of
    ‹s_s440, t_s441› (A_v442 : Type‹s_s440›) (x_v443 : A_v442)
    : (option_d5‹s_s440, t_s441› A_v442)

program and_then_i23 ‹s_s444, r_s445, t_s446› :
  ∀ {A_v447 : Type‹s_s444›} →
    ∀ {B_v448 : Type‹r_s445›} →
      (option_d5‹??35, t_s446› A_v447) →
        A_v447 → (option_d5‹??36, t_s446› B_v448) ⊸
          (option_d5‹??37, t_s446› B_v448)
=
  fn {A_v452 : Type‹s_s444›} {B_v453 : Type‹r_s445›}
     (opt_v454 : (option_d5‹??35, t_s446› A_v452)) ⇒
    ln (f_v455 : ??38) ⇒
      match opt_v454 as __v456 in ??39 with
      | None_c8  ⇒ None_c8‹??42, ??41›
      | Some_c9 x_v457 ⇒ (f_v455 x_v457)
      end

inductive list_d6 ‹s_s458, t_s459›
  (A_v460 : Type‹s_s458›) : Type‹t_s459›
=
| nil_c10 of
    ‹s_s461, t_s462› (A_v463 : Type‹s_s461›)
    : (list_d6‹s_s461, t_s462› A_v463)
| cons_c11 of
    ‹s_s464, t_s465› (A_v466 : Type‹s_s464›) (hd_v467 : A_v466)
    (tl_v468 : (list_d6‹s_s464, t_s465› A_v466))
    : (list_d6‹s_s464, t_s465› A_v466)

logical llen_i24 ‹s_s469, t_s470› :
  ∀ (A_v471 : Type‹s_s469›) →
    (list_d6‹s_s469, t_s470› A_v471) → nat
=
  fn (A_v473 : Type‹s_s469›)
     (xs_v474 : (list_d6‹s_s469, t_s470› A_v473)) ⇒
    match xs_v474 as __v475 in ??43 with
    | nil_c10  ⇒ 0
    | cons_c11 x_v476 xs_v477 ⇒ (llen_i24‹??46, ??45› ??44 xs_v477).+1
    end

program len_i25 ‹s_s478, t_s479› :
  ∀ {A_v480 : Type‹s_s478›} →
    (list_d6‹??47, t_s479› A_v480) →
      nat ⊗ (list_d6‹??48, t_s479› A_v480)
=
  fn {A_v483 : Type‹s_s478›}
     (xs_v484 : (list_d6‹??47, t_s479› A_v483)) ⇒
    match xs_v484 as __v485 in ??49 with
    | nil_c10  ⇒ ⟨0, nil_c10‹??59, ??58›⟩
    | cons_c11 x_v486 xs_v487 ⇒
      match (len_i25‹??52, ??51› ??50 xs_v487) as __v488 in ??53 with
      | ⟨n_v489, xs_v490⟩ ⇒
        ⟨n_v489.+1, (cons_c11‹??56, ??55› x_v486 xs_v490)⟩
      end
    end

program append_i26 ‹s_s491, t_s492› :
  ∀ {A_v493 : Type‹s_s491›} →
    (list_d6‹??60, t_s492› A_v493) →
      (list_d6‹??61, t_s492› A_v493) ⊸ (list_d6‹??63, ??62› A_v493)
=
  fn {A_v496 : Type‹s_s491›}
     (xs_v497 : (list_d6‹??60, t_s492› A_v496)) ⇒
    ln (ys_v498 : ??64) ⇒
      match xs_v497 as __v499 in ??65 with
      | nil_c10  ⇒ ys_v498
      | cons_c11 x_v500 xs_v501 ⇒
        (cons_c11‹??71, ??70›
          x_v500 (append_i26‹??68, ??67› ??66 xs_v501 ys_v498))
      end

logical stdin_rec_i27 : unit‹U› → proto =
  fn (__v503 : unit‹U›) ⇒
    ⇑(b_v504 : bool) ⇒
      match b_v504 as __v505 in ??72 with
      | true ⇒ ⇓(__v506 : string_d4) ⇒ (stdin_rec_i27 ())
      | false ⇒ end
      end

logical stdout_rec_i28 : unit‹U› → proto =
  fn (__v508 : unit‹U›) ⇒
    ⇑(b_v509 : bool) ⇒
      match b_v509 as __v510 in ??73 with
      | true ⇒ ⇑(__v511 : string_d4) ⇒ (stdout_rec_i28 ())
      | false ⇒ end
      end

logical stderr_rec_i29 : unit‹U› → proto =
  fn (__v513 : unit‹U›) ⇒
    ⇑(b_v514 : bool) ⇒
      match b_v514 as __v515 in ??74 with
      | true ⇒ ⇑(__v516 : string_d4) ⇒ (stderr_rec_i29 ())
      | false ⇒ end
      end

logical stdin_t_i30 : proto = (stdin_rec_i27 ())

logical stdout_t_i31 : proto = (stdout_rec_i28 ())

logical stderr_t_i32 : proto = (stderr_rec_i29 ())

program readline_i33 : unit‹U› → IO string_d4 =
  fn (__v518 : unit‹U›) ⇒
    let ch_v519 ⇐ open stdin in
    let ch_v520 ⇐ (send ch_v519 true) in
    let __v521 ⇐ recv ch_v520 in
    match __v521 as __v522 in ??75 with
    | ⟨s_v523, ch_v524⟩ ⇒
      let ch_v525 ⇐ (send ch_v524 false) in
      let __v526 ⇐ close ch_v525 in return s_v523
    end

program print_i34 : string_d4 → IO unit‹U› =
  fn (s_v528 : string_d4) ⇒
    let ch_v529 ⇐ open stdout in
    let ch_v530 ⇐ (send ch_v529 true) in
    let ch_v531 ⇐ (send ch_v530 s_v528) in
    let ch_v532 ⇐ (send ch_v531 false) in close ch_v532

program prerr_i35 : string_d4 → IO unit‹U› =
  fn (s_v534 : string_d4) ⇒
    let ch_v535 ⇐ open stderr in
    let ch_v536 ⇐ (send ch_v535 true) in
    let ch_v537 ⇐ (send ch_v536 s_v534) in
    let ch_v538 ⇐ (send ch_v537 false) in close ch_v538

program digits_i36 : (list_d6‹??76, U› ??77) =
  (cons_c11‹??110, ??109›
    "0"
    (cons_c11‹??107, ??106›
      "1"
      (cons_c11‹??104, ??103›
        "2"
        (cons_c11‹??101, ??100›
          "3"
          (cons_c11‹??98, ??97›
            "4"
            (cons_c11‹??95, ??94›
              "5"
              (cons_c11‹??92, ??91›
                "6"
                (cons_c11‹??89, ??88›
                  "7"
                  (cons_c11‹??86, ??85›
                    "8"
                    (cons_c11‹??83, ??82› "9" nil_c10‹??80, ??79›))))))))))

program get_at_i37 :
  ∀ {A_v539 : U} →
    nat → (list_d6‹??111, U› A_v539) → A_v539 → A_v539
=
  fn {A_v543 : U} (n_v544 : nat) (xs_v545 : (list_d6‹??111, U› A_v543))
     (a_v546 : A_v543) ⇒
    match n_v544 as __v547 in ??112 with
    | O ⇒
      match xs_v545 as __v548 in ??115 with
      | nil_c10  ⇒ a_v546 | cons_c11 x_v549 __v550 ⇒ x_v549
      end
    | S n_v551 ⇒
      match xs_v545 as __v552 in ??113 with
      | nil_c10  ⇒ a_v546
      | cons_c11 __v553 xs_v554 ⇒ (get_at_i37 ??114 n_v551 xs_v554 a_v546)
      end
    end

program string_of_digit_i38 : nat → string_d4 =
  fn (n_v556 : nat) ⇒
    (get_at_i37 ??116 n_v556 digits_i36 EmptyString_c6‹›)

program string_of_nat_i39 : nat → string_d4 =
  fn (n_v558 : nat) ⇒
    let s_v559 = (string_of_digit_i38 (modn_i16 n_v558 10)) in
    let n_v560 = (divn_i15 n_v558 10) in
    match (ltn_i6 0 n_v560) as __v561 in ??117 with
    | true ⇒ (cats_i19 (string_of_nat_i39 n_v560) s_v559)
    | false ⇒ s_v559
    end

program digit_of_char_i40 : char_d3 → (option_d5‹??118, L› nat) =
  fn (c_v563 : char_d3) ⇒
    match (eqc_i17 c_v563 '0') as __v564 in ??119 with
    | true ⇒ (Some_c9‹??161, ??160› 0)
    | false ⇒
      match (eqc_i17 c_v563 '1') as __v565 in ??120 with
      | true ⇒ (Some_c9‹??158, ??157› 1)
      | false ⇒
        match (eqc_i17 c_v563 '2') as __v566 in ??121 with
        | true ⇒ (Some_c9‹??155, ??154› 2)
        | false ⇒
          match (eqc_i17 c_v563 '3') as __v567 in ??122 with
          | true ⇒ (Some_c9‹??152, ??151› 3)
          | false ⇒
            match (eqc_i17 c_v563 '4') as __v568 in ??123 with
            | true ⇒ (Some_c9‹??149, ??148› 4)
            | false ⇒
              match (eqc_i17 c_v563 '5') as __v569 in ??124 with
              | true ⇒ (Some_c9‹??146, ??145› 5)
              | false ⇒
                match (eqc_i17 c_v563 '6') as __v570 in ??125 with
                | true ⇒ (Some_c9‹??143, ??142› 6)
                | false ⇒
                  match (eqc_i17 c_v563 '7') as __v571 in ??126 with
                  | true ⇒ (Some_c9‹??140, ??139› 7)
                  | false ⇒
                    match (eqc_i17 c_v563 '8') as __v572 in ??127 with
                    | true ⇒ (Some_c9‹??137, ??136› 8)
                    | false ⇒
                      match (eqc_i17 c_v563 '9') as __v573 in ??128 with
                      | true ⇒ (Some_c9‹??134, ??133› 9)
                      | false ⇒ None_c8‹??131, ??130›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i41 :
  string_d4 → nat → (option_d5‹??162, L› nat)
=
  fn (s_v576 : string_d4) (acc_v577 : nat) ⇒
    match s_v576 as __v578 in ??163 with
    | EmptyString_c6  ⇒ (Some_c9‹??170, ??169› acc_v577)
    | String_c7 c_v579 s_v580 ⇒
      match (digit_of_char_i40 c_v579) as __v581 in ??164 with
      | None_c8  ⇒ None_c8‹??167, ??166›
      | Some_c9 n_v582 ⇒
        (nat_of_string_loop_i41
          s_v580 (addn_i12 (muln_i14 acc_v577 10) n_v582))
      end
    end

program nat_of_string_i42 : string_d4 → (option_d5‹??171, L› nat) =
  fn (s_v584 : string_d4) ⇒ (nat_of_string_loop_i41 s_v584 0)

logical inductive uniq_d7 ‹s_s585›
  (A_v586 : Type‹s_s585›) (m_v587 : A_v586) : U
=
| Uniq_c12 of
    ‹s_s588› (A_v589 : Type‹s_s588›) (m_v590 : A_v589)
    (x_v591 : A_v589) (__v592 : m_v590 ≡ x_v591)
    : (uniq_d7‹s_s588› A_v589 m_v590)

program ex_i43 : {(uniq_d7‹??174› ??173 0)} → string_d4 =
  fn {x_v594 : (uniq_d7‹??174› ??173 0)} ⇒
    match {x_v594} as __v595 in ??175 with
    | Uniq_c12 __v596 __v597 ⇒ (cats_i19 "hello" "world")
    end

program ex_bad1_i44 : {(uniq_d7‹??177› ??176 0)} → string_d4 =
  fn {x_v599 : (uniq_d7‹??177› ??176 0)} ⇒
    match {x_v599} as __v600 in ??178 with
    | Uniq_c12 n_v601 __v602 ⇒
      (cats_i19 (cats_i19 "hello" "world") (string_of_nat_i39 n_v601))
    end

logical inductive or_d8 ‹s_s603, t_s604›
  (A_v605 : Type‹s_s603›) (B_v606 : Type‹t_s604›) : U
=
| InjL_c13 of
    ‹s_s607, t_s608› (A_v609 : Type‹s_s607›)
    (B_v610 : Type‹t_s608›) (x_v611 : A_v609)
    : (or_d8‹s_s607, t_s608› A_v609 B_v610)
| InjR_c14 of
    ‹s_s612, t_s613› (A_v614 : Type‹s_s612›)
    (B_v615 : Type‹t_s613›) (y_v616 : B_v615)
    : (or_d8‹s_s612, t_s613› A_v614 B_v615)

program ex_bad2_i45 : string_d4 =
  match {((InjL_c13‹??182, ??181› ())
           : (or_d8‹??184, ??183› unit‹U› ⊥))} as __v617 in
    ??185 with
  | InjL_c13 __v618 ⇒ "hello" | InjR_c14 __v619 ⇒ "world"
  end

program ex_bad3_i46 : (or_d8‹??187, ??186› unit‹U› ⊥) → string_d4
=
  fn (x_v621 : (or_d8‹??187, ??186› unit‹U› ⊥)) ⇒
    match x_v621 as __v622 in ??188 with
    | InjL_c13 __v623 ⇒ "hello" | InjR_c14 __v624 ⇒ "world"
    end

program main_i47 : IO unit‹U› =
  let s_v625 = (ex_i43 (Uniq_c12‹??192› 0 refl ??189)) in
  (print_i34 s_v625)

trans01 success--------------------------

inductive order_d1 : U =
| LT_c1 of : order_d1 | GT_c2 of : order_d1 | EQ_c3 of : order_d1

program andb_i1 : bool → bool → bool =
  fn (b1_v12558 : bool) (b2_v12559 : bool) ⇒
    match b1_v12558 as __v12560 in bool with
    | true ⇒ b2_v12559 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v12563 : bool) (b2_v12564 : bool) ⇒
    match b1_v12563 as __v12565 in bool with
    | true ⇒ true | false ⇒ b2_v12564
    end

program notb_i3 : bool → bool =
  fn (b_v12567 : bool) ⇒
    match b_v12567 as __v12568 in bool with
    | true ⇒ false | false ⇒ true
    end

program compareb_i4 : bool → bool → order_d1 =
  fn (b1_v12571 : bool) (b2_v12572 : bool) ⇒
    match b1_v12571 as __v12573 in order_d1 with
    | true ⇒
      match b2_v12572 as __v12574 in order_d1 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v12572 as __v12575 in order_d1 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i5 : nat → nat → bool =
  fn (x_v12578 : nat) (y_v12579 : nat) ⇒
    match x_v12578 as __v12580 in bool with
    | O ⇒ true
    | S x_v12581 ⇒
      match y_v12579 as __v12582 in bool with
      | O ⇒ false | S y_v12583 ⇒ (lten_i5 x_v12581 y_v12583)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v12586 : nat) (y_v12587 : nat) ⇒ (lten_i5 x_v12586.+1 y_v12587)

program gten_i7 : nat → nat → bool =
  fn (x_v12590 : nat) (y_v12591 : nat) ⇒ (lten_i5 y_v12591 x_v12590)

program gtn_i8 : nat → nat → bool =
  fn (x_v12594 : nat) (y_v12595 : nat) ⇒ (ltn_i6 y_v12595 x_v12594)

program eqn_i9 : nat → nat → bool =
  fn (x_v12598 : nat) (y_v12599 : nat) ⇒
    match x_v12598 as __v12600 in bool with
    | O ⇒
      match y_v12599 as __v12601 in bool with
      | O ⇒ true | S __v12602 ⇒ false
      end
    | S x_v12603 ⇒
      match y_v12599 as __v12604 in bool with
      | O ⇒ false | S y_v12605 ⇒ (eqn_i9 x_v12603 y_v12605)
      end
    end

program comparen_i10 : nat → nat → order_d1 =
  fn (n1_v12608 : nat) (n2_v12609 : nat) ⇒
    match n1_v12608 as __v12610 in order_d1 with
    | O ⇒
      match n2_v12609 as __v12611 in order_d1 with
      | O ⇒ EQ_c3‹› | S __v12612 ⇒ LT_c1‹›
      end
    | S n1_v12613 ⇒
      match n2_v12609 as __v12614 in order_d1 with
      | O ⇒ GT_c2‹›
      | S n2_v12615 ⇒ (comparen_i10 n1_v12613 n2_v12615)
      end
    end

program pred_i11 : nat → nat =
  fn (x_v12617 : nat) ⇒
    match x_v12617 as __v12618 in nat with
    | O ⇒ 0 | S x_v12619 ⇒ x_v12619
    end

program addn_i12 : nat → nat → nat =
  fn (x_v12622 : nat) (y_v12623 : nat) ⇒
    match x_v12622 as __v12624 in nat with
    | O ⇒ y_v12623 | S x_v12625 ⇒ (addn_i12 x_v12625 y_v12623).+1
    end

program subn_i13 : nat → nat → nat =
  fn (x_v12628 : nat) (y_v12629 : nat) ⇒
    match y_v12629 as __v12630 in nat with
    | O ⇒ x_v12628 | S y_v12631 ⇒ (subn_i13 (pred_i11 x_v12628) y_v12631)
    end

program muln_i14 : nat → nat → nat =
  fn (x_v12634 : nat) (y_v12635 : nat) ⇒
    match x_v12634 as __v12636 in nat with
    | O ⇒ 0
    | S x_v12637 ⇒ (addn_i12 y_v12635 (muln_i14 x_v12637 y_v12635))
    end

program divn_i15 : nat → nat → nat =
  fn (x_v12640 : nat) (y_v12641 : nat) ⇒
    match (ltn_i6 x_v12640 y_v12641) as __v12642 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i15 (subn_i13 x_v12640 y_v12641) y_v12641).+1
    end

program modn_i16 : nat → nat → nat =
  fn (x_v12645 : nat) (y_v12646 : nat) ⇒
    (subn_i13 x_v12645 (muln_i14 (divn_i15 x_v12645 y_v12646) y_v12646))

inductive between_d2 (lower_v12647 : nat) (upper_v12648 : nat) : L =
| Between_c4 of
    (lower_v12649 : nat) (upper_v12650 : nat) (n_v12651 : nat)
    {pf1_v12652 : (lten_i5 lower_v12649 n_v12651) ≡ true}
    {pf2_v12653 : (lten_i5 n_v12651 upper_v12650) ≡ true}
    : (between_d2 lower_v12649 upper_v12650)

inductive char_d3 : U =
| Char_c5 of (n_v12654 : nat) : char_d3

program eqc_i17 : char_d3 → char_d3 → bool =
  fn (c1_v12657 : char_d3) (c2_v12658 : char_d3) ⇒
    match c1_v12657 as __v12659 in bool with
    | Char_c5 n1_v12660 ⇒
      match c2_v12658 as __v12661 in bool with
      | Char_c5 n2_v12662 ⇒ (eqn_i9 n1_v12660 n2_v12662)
      end
    end

program comparec_i18 : char_d3 → char_d3 → order_d1 =
  fn (c1_v12665 : char_d3) (c2_v12666 : char_d3) ⇒
    match c1_v12665 as __v12667 in order_d1 with
    | Char_c5 n1_v12668 ⇒
      match c2_v12666 as __v12669 in order_d1 with
      | Char_c5 n2_v12670 ⇒ (comparen_i10 n1_v12668 n2_v12670)
      end
    end

inductive string_d4 : U =
| EmptyString_c6 of : string_d4
| String_c7 of (c_v12671 : char_d3) (s_v12672 : string_d4) : string_d4

program cats_i19 : string_d4 → string_d4 → string_d4 =
  fn (s1_v12675 : string_d4) (s2_v12676 : string_d4) ⇒
    match s1_v12675 as __v12677 in string_d4 with
    | EmptyString_c6  ⇒ s2_v12676
    | String_c7 c_v12678 s1_v12679 ⇒
      (String_c7‹› c_v12678 (cats_i19 s1_v12679 s2_v12676))
    end

program strlen_i20 : string_d4 → nat =
  fn (s_v12681 : string_d4) ⇒
    match s_v12681 as __v12682 in nat with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v12683 s_v12684 ⇒ (strlen_i20 s_v12684).+1
    end

program eqs_i21 : string_d4 → string_d4 → bool =
  fn (s1_v12687 : string_d4) (s2_v12688 : string_d4) ⇒
    match s1_v12687 as __v12689 in bool with
    | EmptyString_c6  ⇒
      match s2_v12688 as __v12690 in bool with
      | EmptyString_c6  ⇒ true | String_c7 __v12691 __v12692 ⇒ false
      end
    | String_c7 c1_v12693 s1_v12694 ⇒
      match s2_v12688 as __v12695 in bool with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v12696 s2_v12697 ⇒
        (andb_i1 (eqc_i17 c1_v12693 c2_v12696) (eqs_i21 s1_v12694 s2_v12697))
      end
    end

program compares_i22 : string_d4 → string_d4 → order_d1 =
  fn (s1_v12700 : string_d4) (s2_v12701 : string_d4) ⇒
    match s1_v12700 as __v12702 in order_d1 with
    | EmptyString_c6  ⇒
      match s2_v12701 as __v12703 in order_d1 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v12704 __v12705 ⇒ LT_c1‹›
      end
    | String_c7 c1_v12706 s1_v12707 ⇒
      match s2_v12701 as __v12708 in order_d1 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v12709 s2_v12710 ⇒
        match (comparec_i18 c1_v12706 c2_v12709) as __v12711 in order_d1 with
        | EQ_c3  ⇒ (compares_i22 s1_v12707 s2_v12710)
        | LT_c1  ⇒ LT_c1‹› | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d5 ‹s_s12712, t_s12713›
  (A_v12714 : Type‹s_s12712›) : Type‹t_s12713›
=
| None_c8 of
    ‹s_s12715, t_s12716› (A_v12717 : Type‹s_s12715›)
    : (option_d5‹s_s12715, t_s12716› A_v12717)
| Some_c9 of
    ‹s_s12718, t_s12719› (A_v12720 : Type‹s_s12718›)
    (x_v12721 : A_v12720) : (option_d5‹s_s12718, t_s12719› A_v12720)

program and_then_i23 ‹s_s12722, r_s12723, t_s12724› :
  ∀ {A_v12725 : Type‹s_s12722›} →
    ∀ {B_v12726 : Type‹r_s12723›} →
      (option_d5‹s_s12722, t_s12724› A_v12725) →
        A_v12725 → (option_d5‹r_s12723, t_s12724› B_v12726) ⊸
          (option_d5‹r_s12723, t_s12724› B_v12726)
=
  fn {A_v12730 : Type‹s_s12722›} {B_v12731 : Type‹r_s12723›}
     (opt_v12732 : (option_d5‹s_s12722, t_s12724› A_v12730)) ⇒
    ln (f_v12733 : A_v12730 → (option_d5‹r_s12723, t_s12724› B_v12731)) ⇒
      match opt_v12732 as __v12735 in
        (option_d5‹r_s12723, t_s12724› B_v12731) with
      | None_c8  ⇒ None_c8‹r_s12723, t_s12724›
      | Some_c9 x_v12736 ⇒ (f_v12733 x_v12736)
      end

inductive list_d6 ‹s_s12737, t_s12738›
  (A_v12739 : Type‹s_s12737›) : Type‹t_s12738›
=
| nil_c10 of
    ‹s_s12740, t_s12741› (A_v12742 : Type‹s_s12740›)
    : (list_d6‹s_s12740, t_s12741› A_v12742)
| cons_c11 of
    ‹s_s12743, t_s12744› (A_v12745 : Type‹s_s12743›)
    (hd_v12746 : A_v12745)
    (tl_v12747 : (list_d6‹s_s12743, t_s12744› A_v12745))
    : (list_d6‹s_s12743, t_s12744› A_v12745)

logical llen_i24 ‹s_s12748, t_s12749› :
  ∀ (A_v12750 : Type‹s_s12748›) →
    (list_d6‹s_s12748, t_s12749› A_v12750) → nat
=
  fn (A_v12752 : Type‹s_s12748›)
     (xs_v12753 : (list_d6‹s_s12748, t_s12749› A_v12752)) ⇒
    match xs_v12753 as __v12754 in nat with
    | nil_c10  ⇒ 0
    | cons_c11 x_v12755 xs_v12756 ⇒
      (llen_i24‹s_s12748, t_s12749› A_v12752 xs_v12756).+1
    end

program len_i25 ‹s_s12757, t_s12758› :
  ∀ {A_v12759 : Type‹s_s12757›} →
    (list_d6‹s_s12757, t_s12758› A_v12759) →
      nat ⊗ (list_d6‹s_s12757, t_s12758› A_v12759)
=
  fn {A_v12762 : Type‹s_s12757›}
     (xs_v12763 : (list_d6‹s_s12757, t_s12758› A_v12762)) ⇒
    match xs_v12763 as __v12764 in
      nat ⊗ (list_d6‹s_s12757, t_s12758› A_v12762) with
    | nil_c10  ⇒ ⟨0, nil_c10‹s_s12757, t_s12758›⟩
    | cons_c11 x_v12766 xs_v12767 ⇒
      match (len_i25‹s_s12757, t_s12758› A_v12762 xs_v12767) as __v12768 in
        nat ⊗ (list_d6‹s_s12757, t_s12758› A_v12762) with
      | ⟨n_v12770, xs_v12771⟩ ⇒
        ⟨n_v12770.+1, (cons_c11‹s_s12757, t_s12758› x_v12766 xs_v12771)⟩
      end
    end

program append_i26 ‹s_s12772, t_s12773› :
  ∀ {A_v12774 : Type‹s_s12772›} →
    (list_d6‹s_s12772, t_s12773› A_v12774) →
      (list_d6‹s_s12772, t_s12773› A_v12774) ⊸
        (list_d6‹s_s12772, t_s12773› A_v12774)
=
  fn {A_v12777 : Type‹s_s12772›}
     (xs_v12778 : (list_d6‹s_s12772, t_s12773› A_v12777)) ⇒
    ln (ys_v12779 : (list_d6‹s_s12772, t_s12773› A_v12777)) ⇒
      match xs_v12778 as __v12780 in
        (list_d6‹s_s12772, t_s12773› A_v12777) with
      | nil_c10  ⇒ ys_v12779
      | cons_c11 x_v12781 xs_v12782 ⇒
        (cons_c11‹s_s12772, t_s12773›
          x_v12781
          (append_i26‹s_s12772, t_s12773› A_v12777 xs_v12782 ys_v12779))
      end

logical stdin_rec_i27 : unit‹U› → proto =
  fn (__v12784 : unit‹U›) ⇒
    ⇑(b_v12785 : bool) ⇒
      match b_v12785 as __v12786 in proto with
      | true ⇒ ⇓(__v12787 : string_d4) ⇒ (stdin_rec_i27 ())
      | false ⇒ end
      end

logical stdout_rec_i28 : unit‹U› → proto =
  fn (__v12789 : unit‹U›) ⇒
    ⇑(b_v12790 : bool) ⇒
      match b_v12790 as __v12791 in proto with
      | true ⇒ ⇑(__v12792 : string_d4) ⇒ (stdout_rec_i28 ())
      | false ⇒ end
      end

logical stderr_rec_i29 : unit‹U› → proto =
  fn (__v12794 : unit‹U›) ⇒
    ⇑(b_v12795 : bool) ⇒
      match b_v12795 as __v12796 in proto with
      | true ⇒ ⇑(__v12797 : string_d4) ⇒ (stderr_rec_i29 ())
      | false ⇒ end
      end

logical stdin_t_i30 : proto = (stdin_rec_i27 ())

logical stdout_t_i31 : proto = (stdout_rec_i28 ())

logical stderr_t_i32 : proto = (stderr_rec_i29 ())

program readline_i33 : unit‹U› → IO string_d4 =
  fn (__v12799 : unit‹U›) ⇒
    let ch_v12800 ⇐ open stdin in
    let ch_v12801 ⇐ (send ch_v12800 true) in
    let __v12802 ⇐ recv ch_v12801 in
    match __v12802 as __v12803 in IO string_d4 with
    | ⟨s_v12804, ch_v12805⟩ ⇒
      let ch_v12806 ⇐ (send ch_v12805 false) in
      let __v12807 ⇐ close ch_v12806 in return s_v12804
    end

program print_i34 : string_d4 → IO unit‹U› =
  fn (s_v12809 : string_d4) ⇒
    let ch_v12810 ⇐ open stdout in
    let ch_v12811 ⇐ (send ch_v12810 true) in
    let ch_v12812 ⇐ (send ch_v12811 s_v12809) in
    let ch_v12813 ⇐ (send ch_v12812 false) in close ch_v12813

program prerr_i35 : string_d4 → IO unit‹U› =
  fn (s_v12815 : string_d4) ⇒
    let ch_v12816 ⇐ open stderr in
    let ch_v12817 ⇐ (send ch_v12816 true) in
    let ch_v12818 ⇐ (send ch_v12817 s_v12815) in
    let ch_v12819 ⇐ (send ch_v12818 false) in close ch_v12819

program digits_i36 : (list_d6‹U, U› string_d4) =
  (cons_c11‹U, U›
    "0"
    (cons_c11‹U, U›
      "1"
      (cons_c11‹U, U›
        "2"
        (cons_c11‹U, U›
          "3"
          (cons_c11‹U, U›
            "4"
            (cons_c11‹U, U›
              "5"
              (cons_c11‹U, U›
                "6"
                (cons_c11‹U, U›
                  "7"
                  (cons_c11‹U, U›
                    "8" (cons_c11‹U, U› "9" nil_c10‹U, U›))))))))))

program get_at_i37 :
  ∀ {A_v12820 : U} →
    nat → (list_d6‹U, U› A_v12820) → A_v12820 → A_v12820
=
  fn {A_v12824 : U} (n_v12825 : nat)
     (xs_v12826 : (list_d6‹U, U› A_v12824)) (a_v12827 : A_v12824) ⇒
    match n_v12825 as __v12828 in A_v12824 with
    | O ⇒
      match xs_v12826 as __v12829 in A_v12824 with
      | nil_c10  ⇒ a_v12827 | cons_c11 x_v12830 __v12831 ⇒ x_v12830
      end
    | S n_v12832 ⇒
      match xs_v12826 as __v12833 in A_v12824 with
      | nil_c10  ⇒ a_v12827
      | cons_c11 __v12834 xs_v12835 ⇒
        (get_at_i37 A_v12824 n_v12832 xs_v12835 a_v12827)
      end
    end

program string_of_digit_i38 : nat → string_d4 =
  fn (n_v12837 : nat) ⇒
    (get_at_i37 string_d4 n_v12837 digits_i36 EmptyString_c6‹›)

program string_of_nat_i39 : nat → string_d4 =
  fn (n_v12839 : nat) ⇒
    let s_v12840 = (string_of_digit_i38 (modn_i16 n_v12839 10)) in
    let n_v12841 = (divn_i15 n_v12839 10) in
    match (ltn_i6 0 n_v12841) as __v12842 in string_d4 with
    | true ⇒ (cats_i19 (string_of_nat_i39 n_v12841) s_v12840)
    | false ⇒ s_v12840
    end

program digit_of_char_i40 : char_d3 → (option_d5‹U, L› nat) =
  fn (c_v12844 : char_d3) ⇒
    match (eqc_i17 c_v12844 '0') as __v12845 in
      (option_d5‹U, L› nat) with
    | true ⇒ (Some_c9‹U, L› 0)
    | false ⇒
      match (eqc_i17 c_v12844 '1') as __v12846 in
        (option_d5‹U, L› nat) with
      | true ⇒ (Some_c9‹U, L› 1)
      | false ⇒
        match (eqc_i17 c_v12844 '2') as __v12847 in
          (option_d5‹U, L› nat) with
        | true ⇒ (Some_c9‹U, L› 2)
        | false ⇒
          match (eqc_i17 c_v12844 '3') as __v12848 in
            (option_d5‹U, L› nat) with
          | true ⇒ (Some_c9‹U, L› 3)
          | false ⇒
            match (eqc_i17 c_v12844 '4') as __v12849 in
              (option_d5‹U, L› nat) with
            | true ⇒ (Some_c9‹U, L› 4)
            | false ⇒
              match (eqc_i17 c_v12844 '5') as __v12850 in
                (option_d5‹U, L› nat) with
              | true ⇒ (Some_c9‹U, L› 5)
              | false ⇒
                match (eqc_i17 c_v12844 '6') as __v12851 in
                  (option_d5‹U, L› nat) with
                | true ⇒ (Some_c9‹U, L› 6)
                | false ⇒
                  match (eqc_i17 c_v12844 '7') as __v12852 in
                    (option_d5‹U, L› nat) with
                  | true ⇒ (Some_c9‹U, L› 7)
                  | false ⇒
                    match (eqc_i17 c_v12844 '8') as __v12853 in
                      (option_d5‹U, L› nat) with
                    | true ⇒ (Some_c9‹U, L› 8)
                    | false ⇒
                      match (eqc_i17 c_v12844 '9') as __v12854 in
                        (option_d5‹U, L› nat) with
                      | true ⇒ (Some_c9‹U, L› 9)
                      | false ⇒ None_c8‹U, L›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i41 :
  string_d4 → nat → (option_d5‹U, L› nat)
=
  fn (s_v12857 : string_d4) (acc_v12858 : nat) ⇒
    match s_v12857 as __v12859 in (option_d5‹U, L› nat) with
    | EmptyString_c6  ⇒ (Some_c9‹U, L› acc_v12858)
    | String_c7 c_v12860 s_v12861 ⇒
      match (digit_of_char_i40 c_v12860) as __v12862 in
        (option_d5‹U, L› nat) with
      | None_c8  ⇒ None_c8‹U, L›
      | Some_c9 n_v12863 ⇒
        (nat_of_string_loop_i41
          s_v12861 (addn_i12 (muln_i14 acc_v12858 10) n_v12863))
      end
    end

program nat_of_string_i42 : string_d4 → (option_d5‹U, L› nat) =
  fn (s_v12865 : string_d4) ⇒ (nat_of_string_loop_i41 s_v12865 0)

logical inductive uniq_d7 ‹s_s12866›
  (A_v12867 : Type‹s_s12866›) (m_v12868 : A_v12867) : U
=
| Uniq_c12 of
    ‹s_s12869› (A_v12870 : Type‹s_s12869›) (m_v12871 : A_v12870)
    (x_v12872 : A_v12870) (__v12873 : m_v12871 ≡ x_v12872)
    : (uniq_d7‹s_s12869› A_v12870 m_v12871)

program ex_i43 : {(uniq_d7‹U› nat 0)} → string_d4 =
  fn {x_v12875 : (uniq_d7‹U› nat 0)} ⇒
    match {x_v12875} as __v12876 in string_d4 with
    | Uniq_c12 __v12877 __v12878 ⇒ (cats_i19 "hello" "world")
    end

program ex_bad1_i44 : {(uniq_d7‹U› nat 0)} → string_d4 =
  fn {x_v12880 : (uniq_d7‹U› nat 0)} ⇒
    match {x_v12880} as __v12881 in string_d4 with
    | Uniq_c12 n_v12882 __v12883 ⇒
      (cats_i19 (cats_i19 "hello" "world") (string_of_nat_i39 n_v12882))
    end

logical inductive or_d8 ‹s_s12884, t_s12885›
  (A_v12886 : Type‹s_s12884›) (B_v12887 : Type‹t_s12885›) : U
=
| InjL_c13 of
    ‹s_s12888, t_s12889› (A_v12890 : Type‹s_s12888›)
    (B_v12891 : Type‹t_s12889›) (x_v12892 : A_v12890)
    : (or_d8‹s_s12888, t_s12889› A_v12890 B_v12891)
| InjR_c14 of
    ‹s_s12893, t_s12894› (A_v12895 : Type‹s_s12893›)
    (B_v12896 : Type‹t_s12894›) (y_v12897 : B_v12896)
    : (or_d8‹s_s12893, t_s12894› A_v12895 B_v12896)

program ex_bad2_i45 : string_d4 =
  match {((InjL_c13‹U, U› ()) : (or_d8‹U, U› unit‹U› ⊥))} as __v12898 in
    string_d4 with
  | InjL_c13 __v12899 ⇒ "hello" | InjR_c14 __v12900 ⇒ "world"
  end

program ex_bad3_i46 : (or_d8‹U, U› unit‹U› ⊥) → string_d4 =
  fn (x_v12902 : (or_d8‹U, U› unit‹U› ⊥)) ⇒
    match x_v12902 as __v12903 in string_d4 with
    | InjL_c13 __v12904 ⇒ "hello" | InjR_c14 __v12905 ⇒ "world"
    end

program main_i47 : IO unit‹U› =
  let s_v12906 = (ex_i43 (Uniq_c12‹U› 0 refl 0)) in (print_i34 s_v12906)

trans1e success--------------------------

data order_d1 =
| LT_c1 of size(0) | GT_c2 of size(0) | EQ_c3 of size(0)

def andb_i1 =
  fn b1_v13425 b2_v13426 ⇒
    match b1_v13425 with
    | true ⇒ b2_v13426 | false ⇒ false
    end

def orb_i2 =
  fn b1_v13427 b2_v13428 ⇒
    match b1_v13427 with
    | true ⇒ true | false ⇒ b2_v13428
    end

def notb_i3 =
  fn b_v13429 ⇒ match b_v13429 with
                  | true ⇒ false | false ⇒ true
                  end

def compareb_i4 =
  fn b1_v13430 b2_v13431 ⇒
    match b1_v13430 with
    | true ⇒ match b2_v13431 with
               | true ⇒ EQ_c3 | false ⇒ GT_c2
               end
    | false ⇒ match b2_v13431 with
                | true ⇒ LT_c1 | false ⇒ EQ_c3
                end
    end

def lten_i5 =
  fn x_v13432 y_v13433 ⇒
    match x_v13432 with
    | O ⇒ true
    | S x_v13434 ⇒
      match y_v13433 with
      | O ⇒ false | S y_v13435 ⇒ ((lten_i5 x_v13434) y_v13435)
      end
    end

def ltn_i6 = fn x_v13436 y_v13437 ⇒ ((lten_i5 x_v13436.+1) y_v13437)

def gten_i7 = fn x_v13438 y_v13439 ⇒ ((lten_i5 y_v13439) x_v13438)

def gtn_i8 = fn x_v13440 y_v13441 ⇒ ((ltn_i6 y_v13441) x_v13440)

def eqn_i9 =
  fn x_v13442 y_v13443 ⇒
    match x_v13442 with
    | O ⇒ match y_v13443 with
            | O ⇒ true | S __v13444 ⇒ false
            end
    | S x_v13445 ⇒
      match y_v13443 with
      | O ⇒ false | S y_v13446 ⇒ ((eqn_i9 x_v13445) y_v13446)
      end
    end

def comparen_i10 =
  fn n1_v13447 n2_v13448 ⇒
    match n1_v13447 with
    | O ⇒ match n2_v13448 with
            | O ⇒ EQ_c3 | S __v13449 ⇒ LT_c1
            end
    | S n1_v13450 ⇒
      match n2_v13448 with
      | O ⇒ GT_c2 | S n2_v13451 ⇒ ((comparen_i10 n1_v13450) n2_v13451)
      end
    end

def pred_i11 =
  fn x_v13452 ⇒ match x_v13452 with
                  | O ⇒ 0 | S x_v13453 ⇒ x_v13453
                  end

def addn_i12 =
  fn x_v13454 y_v13455 ⇒
    match x_v13454 with
    | O ⇒ y_v13455 | S x_v13456 ⇒ ((addn_i12 x_v13456) y_v13455).+1
    end

def subn_i13 =
  fn x_v13457 y_v13458 ⇒
    match y_v13458 with
    | O ⇒ x_v13457
    | S y_v13459 ⇒ ((subn_i13 (pred_i11 x_v13457)) y_v13459)
    end

def muln_i14 =
  fn x_v13460 y_v13461 ⇒
    match x_v13460 with
    | O ⇒ 0
    | S x_v13462 ⇒ ((addn_i12 y_v13461) ((muln_i14 x_v13462) y_v13461))
    end

def divn_i15 =
  fn x_v13463 y_v13464 ⇒
    match ((ltn_i6 x_v13463) y_v13464) with
    | true ⇒ 0
    | false ⇒ ((divn_i15 ((subn_i13 x_v13463) y_v13464)) y_v13464).+1
    end

def modn_i16 =
  fn x_v13465 y_v13466 ⇒
    ((subn_i13 x_v13465)
      ((muln_i14 ((divn_i15 x_v13465) y_v13466)) y_v13466))

data between_d2 =
| Between_c4 of size(3)

data char_d3 =
| Char_c5 of size(1)

def eqc_i17 =
  fn c1_v13467 c2_v13468 ⇒
    match c1_v13467 with
    | Char_c5 n1_v13469 ⇒
      match c2_v13468 with
      | Char_c5 n2_v13470 ⇒ ((eqn_i9 n1_v13469) n2_v13470)
      end
    end

def comparec_i18 =
  fn c1_v13471 c2_v13472 ⇒
    match c1_v13471 with
    | Char_c5 n1_v13473 ⇒
      match c2_v13472 with
      | Char_c5 n2_v13474 ⇒ ((comparen_i10 n1_v13473) n2_v13474)
      end
    end

data string_d4 =
| EmptyString_c6 of size(0) | String_c7 of size(2)

def cats_i19 =
  fn s1_v13475 s2_v13476 ⇒
    match s1_v13475 with
    | EmptyString_c6  ⇒ s2_v13476
    | String_c7 c_v13477 s1_v13478 ⇒
      (String_c7 c_v13477 ((cats_i19 s1_v13478) s2_v13476))
    end

def strlen_i20 =
  fn s_v13479 ⇒
    match s_v13479 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v13480 s_v13481 ⇒ (strlen_i20 s_v13481).+1
    end

def eqs_i21 =
  fn s1_v13482 s2_v13483 ⇒
    match s1_v13482 with
    | EmptyString_c6  ⇒
      match s2_v13483 with
      | EmptyString_c6  ⇒ true | String_c7 __v13484 __v13485 ⇒ false
      end
    | String_c7 c1_v13486 s1_v13487 ⇒
      match s2_v13483 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v13488 s2_v13489 ⇒
        ((andb_i1 ((eqc_i17 c1_v13486) c2_v13488))
          ((eqs_i21 s1_v13487) s2_v13489))
      end
    end

def compares_i22 =
  fn s1_v13490 s2_v13491 ⇒
    match s1_v13490 with
    | EmptyString_c6  ⇒
      match s2_v13491 with
      | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v13492 __v13493 ⇒ LT_c1
      end
    | String_c7 c1_v13494 s1_v13495 ⇒
      match s2_v13491 with
      | EmptyString_c6  ⇒ GT_c2
      | String_c7 c2_v13496 s2_v13497 ⇒
        match ((comparec_i18 c1_v13494) c2_v13496) with
        | EQ_c3  ⇒ ((compares_i22 s1_v13495) s2_v13497) | LT_c1  ⇒ LT_c1
        | GT_c2  ⇒ GT_c2
        end
      end
    end

data optionUU_d12 =
| NoneUU_c21 of size(0) | SomeUU_c22 of size(1)

data optionUL_d11 =
| NoneUL_c19 of size(0) | SomeUL_c20 of size(1)

data optionLU_d10 =
| NoneLU_c17 of size(0)

data optionLL_d9 =
| NoneLL_c15 of size(0) | SomeLL_c16 of size(1)

def and_thenUUU_i55 =
  fn A_v13498 B_v13499 opt_v13500 ⇒
    ln f_v13501 ⇒
      match opt_v13500 with
      | NoneUU_c21  ⇒ NoneUU_c21
      | SomeUU_c22 x_v13502 ⇒ (f_v13501 x_v13502)
      end

def and_thenUUL_i54 =
  fn A_v13503 B_v13504 opt_v13505 ⇒
    ln f_v13506 ⇒
      match opt_v13505 with
      | NoneUL_c19  ⇒ NoneUL_c19
      | SomeUL_c20 x_v13507 ⇒ (f_v13506 x_v13507)
      end

def and_thenULU_i53 =
  fn A_v13508 B_v13509 opt_v13510 ⇒
    ln f_v13511 ⇒
      match opt_v13510 with
      | NoneUU_c21  ⇒ NoneLU_c17
      | SomeUU_c22 x_v13512 ⇒ (f_v13511 x_v13512)
      end

def and_thenULL_i52 =
  fn A_v13513 B_v13514 opt_v13515 ⇒
    ln f_v13516 ⇒
      match opt_v13515 with
      | NoneUL_c19  ⇒ NoneLL_c15
      | SomeUL_c20 x_v13517 ⇒ (f_v13516 x_v13517)
      end

def and_thenLUL_i50 =
  fn A_v13518 B_v13519 opt_v13520 ⇒
    ln f_v13521 ⇒
      match opt_v13520 with
      | NoneLL_c15  ⇒ NoneUL_c19
      | SomeLL_c16 x_v13522 ⇒ (f_v13521 x_v13522)
      end

def and_thenLLL_i48 =
  fn A_v13523 B_v13524 opt_v13525 ⇒
    ln f_v13526 ⇒
      match opt_v13525 with
      | NoneLL_c15  ⇒ NoneLL_c15
      | SomeLL_c16 x_v13527 ⇒ (f_v13526 x_v13527)
      end

data listUU_d16 =
| nilUU_c29 of size(0) | consUU_c30 of size(2)

data listUL_d15 =
| nilUL_c27 of size(0) | consUL_c28 of size(2)

data listLU_d14 =
| nilLU_c25 of size(0)

data listLL_d13 =
| nilLL_c23 of size(0) | consLL_c24 of size(2)

def lenUU_i63 =
  fn A_v13528 xs_v13529 ⇒
    match xs_v13529 with
    | nilUU_c29  ⇒ (0, nilUU_c29)
    | consUU_c30 x_v13530 xs_v13531 ⇒
      match ((lenUU_i63 NULL) xs_v13531) with
      | (n_v13532, xs_v13533) ⇒
        (n_v13532.+1, (consUU_c30 x_v13530 xs_v13533))
      end
    end

def lenUL_i62 =
  fn A_v13534 xs_v13535 ⇒
    match xs_v13535 with
    | nilUL_c27  ⇒ (0, nilUL_c27)
    | consUL_c28 x_v13536 xs_v13537 ⇒
      match ((lenUL_i62 NULL) xs_v13537) with
      | (n_v13538, xs_v13539) ⇒
        (n_v13538.+1, (consUL_c28 x_v13536 xs_v13539))
      end
    end

def lenLL_i60 =
  fn A_v13540 xs_v13541 ⇒
    match xs_v13541 with
    | nilLL_c23  ⇒ (0, nilLL_c23)
    | consLL_c24 x_v13542 xs_v13543 ⇒
      match ((lenLL_i60 NULL) xs_v13543) with
      | (n_v13544, xs_v13545) ⇒
        (n_v13544.+1, (consLL_c24 x_v13542 xs_v13545))
      end
    end

def appendUU_i67 =
  fn A_v13546 xs_v13547 ⇒
    ln ys_v13548 ⇒
      match xs_v13547 with
      | nilUU_c29  ⇒ ys_v13548
      | consUU_c30 x_v13549 xs_v13550 ⇒
        (consUU_c30 x_v13549 (((appendUU_i67 NULL) xs_v13550) ys_v13548))
      end

def appendUL_i66 =
  fn A_v13551 xs_v13552 ⇒
    ln ys_v13553 ⇒
      match xs_v13552 with
      | nilUL_c27  ⇒ ys_v13553
      | consUL_c28 x_v13554 xs_v13555 ⇒
        (consUL_c28 x_v13554 (((appendUL_i66 NULL) xs_v13555) ys_v13553))
      end

def appendLL_i64 =
  fn A_v13556 xs_v13557 ⇒
    ln ys_v13558 ⇒
      match xs_v13557 with
      | nilLL_c23  ⇒ ys_v13558
      | consLL_c24 x_v13559 xs_v13560 ⇒
        (consLL_c24 x_v13559 (((appendLL_i64 NULL) xs_v13560) ys_v13558))
      end

def readline_i33 =
  fn __v13561 ⇒
    let ch_v13562 ⇐ open stdin in
    let ch_v13563 ⇐ (send ch_v13562 true) in
    let __v13564 ⇐ recv ch_v13563 in
    match __v13564 with
    | (s_v13565, ch_v13566) ⇒
      let ch_v13567 ⇐ (send ch_v13566 false) in
      let __v13568 ⇐ close⇑ ch_v13567 in return s_v13565
    end

def print_i34 =
  fn s_v13569 ⇒
    let ch_v13570 ⇐ open stdout in
    let ch_v13571 ⇐ (send ch_v13570 true) in
    let ch_v13572 ⇐ (send ch_v13571 s_v13569) in
    let ch_v13573 ⇐ (send ch_v13572 false) in close⇑ ch_v13573

def prerr_i35 =
  fn s_v13574 ⇒
    let ch_v13575 ⇐ open stderr in
    let ch_v13576 ⇐ (send ch_v13575 true) in
    let ch_v13577 ⇐ (send ch_v13576 s_v13574) in
    let ch_v13578 ⇐ (send ch_v13577 false) in close⇑ ch_v13578

def digits_i36 =
  (consUU_c30
    "0"
    (consUU_c30
      "1"
      (consUU_c30
        "2"
        (consUU_c30
          "3"
          (consUU_c30
            "4"
            (consUU_c30
              "5"
              (consUU_c30
                "6"
                (consUU_c30 "7" (consUU_c30 "8" (consUU_c30 "9" nilUU_c29))))))))))

def get_at_i37 =
  fn A_v13579 n_v13580 xs_v13581 a_v13582 ⇒
    match n_v13580 with
    | O ⇒
      match xs_v13581 with
      | nilUU_c29  ⇒ a_v13582 | consUU_c30 x_v13583 __v13584 ⇒ x_v13583
      end
    | S n_v13585 ⇒
      match xs_v13581 with
      | nilUU_c29  ⇒ a_v13582
      | consUU_c30 __v13586 xs_v13587 ⇒
        ((((get_at_i37 NULL) n_v13585) xs_v13587) a_v13582)
      end
    end

def string_of_digit_i38 =
  fn n_v13588 ⇒ ((((get_at_i37 NULL) n_v13588) digits_i36) EmptyString_c6)

def string_of_nat_i39 =
  fn n_v13589 ⇒
    let s_v13590 = (string_of_digit_i38 ((modn_i16 n_v13589) 10)) in
    let n_v13591 = ((divn_i15 n_v13589) 10) in
    match ((ltn_i6 0) n_v13591) with
    | true ⇒ ((cats_i19 (string_of_nat_i39 n_v13591)) s_v13590)
    | false ⇒ s_v13590
    end

def digit_of_char_i40 =
  fn c_v13592 ⇒
    match ((eqc_i17 c_v13592) '0') with
    | true ⇒ (SomeUL_c20 0)
    | false ⇒
      match ((eqc_i17 c_v13592) '1') with
      | true ⇒ (SomeUL_c20 1)
      | false ⇒
        match ((eqc_i17 c_v13592) '2') with
        | true ⇒ (SomeUL_c20 2)
        | false ⇒
          match ((eqc_i17 c_v13592) '3') with
          | true ⇒ (SomeUL_c20 3)
          | false ⇒
            match ((eqc_i17 c_v13592) '4') with
            | true ⇒ (SomeUL_c20 4)
            | false ⇒
              match ((eqc_i17 c_v13592) '5') with
              | true ⇒ (SomeUL_c20 5)
              | false ⇒
                match ((eqc_i17 c_v13592) '6') with
                | true ⇒ (SomeUL_c20 6)
                | false ⇒
                  match ((eqc_i17 c_v13592) '7') with
                  | true ⇒ (SomeUL_c20 7)
                  | false ⇒
                    match ((eqc_i17 c_v13592) '8') with
                    | true ⇒ (SomeUL_c20 8)
                    | false ⇒
                      match ((eqc_i17 c_v13592) '9') with
                      | true ⇒ (SomeUL_c20 9) | false ⇒ NoneUL_c19
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

def nat_of_string_loop_i41 =
  fn s_v13593 acc_v13594 ⇒
    match s_v13593 with
    | EmptyString_c6  ⇒ (SomeUL_c20 acc_v13594)
    | String_c7 c_v13595 s_v13596 ⇒
      match (digit_of_char_i40 c_v13595) with
      | NoneUL_c19  ⇒ NoneUL_c19
      | SomeUL_c20 n_v13597 ⇒
        ((nat_of_string_loop_i41 s_v13596)
          ((addn_i12 ((muln_i14 acc_v13594) 10)) n_v13597))
      end
    end

def nat_of_string_i42 = fn s_v13598 ⇒ ((nat_of_string_loop_i41 s_v13598) 0)

data uniqU_d18 =
| UniqU_c32 of size(2)

data uniqL_d17 =
| UniqL_c31 of size(2)

def ex_i43 =
  fn x_v13599 ⇒
    match NULL with
    | UniqU_c32 __v13600 __v13601 ⇒ ((cats_i19 "hello") "world")
    end

data orUU_d22 =
| InjLUU_c39 of size(1) | InjRUU_c40 of size(1)

data orUL_d21 =
| InjLUL_c37 of size(1) | InjRUL_c38 of size(1)

data orLU_d20 =
| InjLLU_c35 of size(1) | InjRLU_c36 of size(1)

data orLL_d19 =
| InjLLL_c33 of size(1) | InjRLL_c34 of size(1)

def ex_bad3_i46 =
  fn x_v13602 ⇒
    match x_v13602 with
    | InjLUU_c39 __v13603 ⇒ "hello" | InjRUU_c40 __v13604 ⇒ "world"
    end

main = let s_v13605 = (ex_i43 NULL) in (print_i34 s_v13605)

trans12 success--------------------------

fun andb_i1(b1_v13828, b2_v13829) = if b1_v13828 then
                                      b2_v13829
                                    else
                                      0

val andbclo_i68 = fn b1_v13830 b2_v13831 ⇒ andb_i1(b1_v13830, b2_v13831)

fun orb_i2(b1_v13832, b2_v13833) = if b1_v13832 then
                                     1
                                   else
                                     b2_v13833

val orbclo_i69 = fn b1_v13834 b2_v13835 ⇒ orb_i2(b1_v13834, b2_v13835)

fun notb_i3(b_v13836) = if b_v13836 then
                          0
                        else
                          1

val notbclo_i70 = fn b_v13837 ⇒ notb_i3(b_v13837)

fun compareb_i4(b1_v13838, b2_v13839) =
  if b1_v13838 then
    if b2_v13839 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v13839 then
      LT_c1
    else
      EQ_c3

val comparebclo_i71 =
  fn b1_v13840 b2_v13841 ⇒ compareb_i4(b1_v13840, b2_v13841)

fun lten_i5(x_v13842, y_v13843) =
  let __v13844 = x_v13842 in
  if __v13844 then
    let x_v13845 = __v13844.-1 in
    let __v13846 = y_v13843 in
    if __v13846 then
      let y_v13847 = __v13846.-1 in lten_i5(x_v13845, y_v13847)
    else
      0
  else
    1

val ltenclo_i72 = fn x_v13848 y_v13849 ⇒ lten_i5(x_v13848, y_v13849)

fun ltn_i6(x_v13850, y_v13851) = lten_i5(x_v13850.+1, y_v13851)

val ltnclo_i73 = fn x_v13852 y_v13853 ⇒ ltn_i6(x_v13852, y_v13853)

fun gten_i7(x_v13854, y_v13855) = lten_i5(y_v13855, x_v13854)

val gtenclo_i74 = fn x_v13856 y_v13857 ⇒ gten_i7(x_v13856, y_v13857)

fun gtn_i8(x_v13858, y_v13859) = ltn_i6(y_v13859, x_v13858)

val gtnclo_i75 = fn x_v13860 y_v13861 ⇒ gtn_i8(x_v13860, y_v13861)

fun eqn_i9(x_v13862, y_v13863) =
  let __v13864 = x_v13862 in
  if __v13864 then
    let x_v13865 = __v13864.-1 in
    let __v13866 = y_v13863 in
    if __v13866 then
      let y_v13867 = __v13866.-1 in eqn_i9(x_v13865, y_v13867)
    else
      0
  else
    let __v13868 = y_v13863 in
    if __v13868 then
      let __v13869 = __v13868.-1 in 0
    else
      1

val eqnclo_i76 = fn x_v13870 y_v13871 ⇒ eqn_i9(x_v13870, y_v13871)

fun comparen_i10(n1_v13872, n2_v13873) =
  let __v13874 = n1_v13872 in
  if __v13874 then
    let n1_v13875 = __v13874.-1 in
    let __v13876 = n2_v13873 in
    if __v13876 then
      let n2_v13877 = __v13876.-1 in comparen_i10(n1_v13875, n2_v13877)
    else
      GT_c2
  else
    let __v13878 = n2_v13873 in
    if __v13878 then
      let __v13879 = __v13878.-1 in LT_c1
    else
      EQ_c3

val comparenclo_i77 =
  fn n1_v13880 n2_v13881 ⇒ comparen_i10(n1_v13880, n2_v13881)

fun pred_i11(x_v13882) =
  let __v13883 = x_v13882 in
  if __v13883 then
    let x_v13884 = __v13883.-1 in x_v13884
  else
    0

val predclo_i78 = fn x_v13885 ⇒ pred_i11(x_v13885)

fun addn_i12(x_v13886, y_v13887) =
  let __v13888 = x_v13886 in
  if __v13888 then
    let x_v13889 = __v13888.-1 in addn_i12(x_v13889, y_v13887).+1
  else
    y_v13887

val addnclo_i79 = fn x_v13890 y_v13891 ⇒ addn_i12(x_v13890, y_v13891)

fun subn_i13(x_v13892, y_v13893) =
  let __v13894 = y_v13893 in
  if __v13894 then
    let y_v13895 = __v13894.-1 in subn_i13(pred_i11(x_v13892), y_v13895)
  else
    x_v13892

val subnclo_i80 = fn x_v13896 y_v13897 ⇒ subn_i13(x_v13896, y_v13897)

fun muln_i14(x_v13898, y_v13899) =
  let __v13900 = x_v13898 in
  if __v13900 then
    let x_v13901 = __v13900.-1 in
    addn_i12(y_v13899, muln_i14(x_v13901, y_v13899))
  else
    0

val mulnclo_i81 = fn x_v13902 y_v13903 ⇒ muln_i14(x_v13902, y_v13903)

fun divn_i15(x_v13904, y_v13905) =
  if ltn_i6(x_v13904, y_v13905) then
    0
  else
    divn_i15(subn_i13(x_v13904, y_v13905), y_v13905).+1

val divnclo_i82 = fn x_v13906 y_v13907 ⇒ divn_i15(x_v13906, y_v13907)

fun modn_i16(x_v13908, y_v13909) =
  subn_i13(x_v13908, muln_i14(divn_i15(x_v13908, y_v13909), y_v13909))

val modnclo_i83 = fn x_v13910 y_v13911 ⇒ modn_i16(x_v13910, y_v13911)

fun eqc_i17(c1_v13912, c2_v13913) =
  match c1_v13912 with
  | Char_c5 n1_v13914 ⇒
    match c2_v13913 with
    | Char_c5 n2_v13915 ⇒ eqn_i9(n1_v13914, n2_v13915)
    end
  end

val eqcclo_i84 = fn c1_v13916 c2_v13917 ⇒ eqc_i17(c1_v13916, c2_v13917)

fun comparec_i18(c1_v13918, c2_v13919) =
  match c1_v13918 with
  | Char_c5 n1_v13920 ⇒
    match c2_v13919 with
    | Char_c5 n2_v13921 ⇒ comparen_i10(n1_v13920, n2_v13921)
    end
  end

val comparecclo_i85 =
  fn c1_v13922 c2_v13923 ⇒ comparec_i18(c1_v13922, c2_v13923)

fun cats_i19(s1_v13924, s2_v13925) =
  match s1_v13924 with
  | EmptyString_c6  ⇒ s2_v13925
  | String_c7 c_v13926 s1_v13927 ⇒
    (String_c7 c_v13926 cats_i19(s1_v13927, s2_v13925))
  end

val catsclo_i86 = fn s1_v13928 s2_v13929 ⇒ cats_i19(s1_v13928, s2_v13929)

fun strlen_i20(s_v13930) =
  match s_v13930 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v13931 s_v13932 ⇒ strlen_i20(s_v13932).+1
  end

val strlenclo_i87 = fn s_v13933 ⇒ strlen_i20(s_v13933)

fun eqs_i21(s1_v13934, s2_v13935) =
  match s1_v13934 with
  | EmptyString_c6  ⇒
    match s2_v13935 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v13936 __v13937 ⇒ 0
    end
  | String_c7 c1_v13938 s1_v13939 ⇒
    match s2_v13935 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v13940 s2_v13941 ⇒
      andb_i1(eqc_i17(c1_v13938, c2_v13940), eqs_i21(s1_v13939, s2_v13941))
    end
  end

val eqsclo_i88 = fn s1_v13942 s2_v13943 ⇒ eqs_i21(s1_v13942, s2_v13943)

fun compares_i22(s1_v13944, s2_v13945) =
  match s1_v13944 with
  | EmptyString_c6  ⇒
    match s2_v13945 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v13946 __v13947 ⇒ LT_c1
    end
  | String_c7 c1_v13948 s1_v13949 ⇒
    match s2_v13945 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v13950 s2_v13951 ⇒
      match comparec_i18(c1_v13948, c2_v13950) with
      | EQ_c3  ⇒ compares_i22(s1_v13949, s2_v13951) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i89 =
  fn s1_v13952 s2_v13953 ⇒ compares_i22(s1_v13952, s2_v13953)

fun and_thenUUU_i55(A_v13954, B_v13955, opt_v13956, f_v13957) =
  match opt_v13956 with
  | NoneUU_c21  ⇒ NoneUU_c21 | SomeUU_c22 x_v13958 ⇒ (f_v13957) x_v13958
  end

val and_thenUUUclo_i90 =
  fn A_v13959 B_v13960 opt_v13961 ⇒
    ln f_v13962 ⇒ and_thenUUU_i55(A_v13959, B_v13960, opt_v13961, f_v13962)

fun and_thenUUL_i54(A_v13963, B_v13964, opt_v13965, f_v13966) =
  match opt_v13965 with
  | NoneUL_c19  ⇒ NoneUL_c19 | SomeUL_c20 x_v13967 ⇒ (f_v13966) x_v13967
  end

val and_thenUULclo_i91 =
  fn A_v13968 B_v13969 opt_v13970 ⇒
    ln f_v13971 ⇒ and_thenUUL_i54(A_v13968, B_v13969, opt_v13970, f_v13971)

fun and_thenULU_i53(A_v13972, B_v13973, opt_v13974, f_v13975) =
  match opt_v13974 with
  | NoneUU_c21  ⇒ NoneLU_c17 | SomeUU_c22 x_v13976 ⇒ (f_v13975) x_v13976
  end

val and_thenULUclo_i92 =
  fn A_v13977 B_v13978 opt_v13979 ⇒
    ln f_v13980 ⇒ and_thenULU_i53(A_v13977, B_v13978, opt_v13979, f_v13980)

fun and_thenULL_i52(A_v13981, B_v13982, opt_v13983, f_v13984) =
  match opt_v13983 with
  | NoneUL_c19  ⇒ NoneLL_c15 | SomeUL_c20 x_v13985 ⇒ (f_v13984) x_v13985
  end

val and_thenULLclo_i93 =
  fn A_v13986 B_v13987 opt_v13988 ⇒
    ln f_v13989 ⇒ and_thenULL_i52(A_v13986, B_v13987, opt_v13988, f_v13989)

fun and_thenLUL_i50(A_v13990, B_v13991, opt_v13992, f_v13993) =
  match opt_v13992 with
  | NoneLL_c15  ⇒ NoneUL_c19 | SomeLL_c16 x_v13994 ⇒ (f_v13993) x_v13994
  end

val and_thenLULclo_i94 =
  fn A_v13995 B_v13996 opt_v13997 ⇒
    ln f_v13998 ⇒ and_thenLUL_i50(A_v13995, B_v13996, opt_v13997, f_v13998)

fun and_thenLLL_i48(A_v13999, B_v14000, opt_v14001, f_v14002) =
  match opt_v14001 with
  | NoneLL_c15  ⇒ NoneLL_c15 | SomeLL_c16 x_v14003 ⇒ (f_v14002) x_v14003
  end

val and_thenLLLclo_i95 =
  fn A_v14004 B_v14005 opt_v14006 ⇒
    ln f_v14007 ⇒ and_thenLLL_i48(A_v14004, B_v14005, opt_v14006, f_v14007)

fun lenUU_i63(A_v14008, xs_v14009) =
  match xs_v14009 with
  | nilUU_c29  ⇒ (0, nilUU_c29)
  | consUU_c30 x_v14010 xs_v14011 ⇒
    match lenUU_i63(NULL, xs_v14011) with
    | (n_v14012, xs_v14013) ⇒
      (n_v14012.+1, (consUU_c30 x_v14010 xs_v14013))
    end
  end

val lenUUclo_i96 = fn A_v14014 xs_v14015 ⇒ lenUU_i63(A_v14014, xs_v14015)

fun lenUL_i62(A_v14016, xs_v14017) =
  match xs_v14017 with
  | nilUL_c27  ⇒ (0, nilUL_c27)
  | consUL_c28 x_v14018 xs_v14019 ⇒
    match lenUL_i62(NULL, xs_v14019) with
    | (n_v14020, xs_v14021) ⇒
      (n_v14020.+1, (consUL_c28 x_v14018 xs_v14021))
    end
  end

val lenULclo_i97 = fn A_v14022 xs_v14023 ⇒ lenUL_i62(A_v14022, xs_v14023)

fun lenLL_i60(A_v14024, xs_v14025) =
  match xs_v14025 with
  | nilLL_c23  ⇒ (0, nilLL_c23)
  | consLL_c24 x_v14026 xs_v14027 ⇒
    match lenLL_i60(NULL, xs_v14027) with
    | (n_v14028, xs_v14029) ⇒
      (n_v14028.+1, (consLL_c24 x_v14026 xs_v14029))
    end
  end

val lenLLclo_i98 = fn A_v14030 xs_v14031 ⇒ lenLL_i60(A_v14030, xs_v14031)

fun appendUU_i67(A_v14032, xs_v14033, ys_v14034) =
  match xs_v14033 with
  | nilUU_c29  ⇒ ys_v14034
  | consUU_c30 x_v14035 xs_v14036 ⇒
    (consUU_c30 x_v14035 appendUU_i67(NULL, xs_v14036, ys_v14034))
  end

val appendUUclo_i99 =
  fn A_v14037 xs_v14038 ⇒
    ln ys_v14039 ⇒ appendUU_i67(A_v14037, xs_v14038, ys_v14039)

fun appendUL_i66(A_v14040, xs_v14041, ys_v14042) =
  match xs_v14041 with
  | nilUL_c27  ⇒ ys_v14042
  | consUL_c28 x_v14043 xs_v14044 ⇒
    (consUL_c28 x_v14043 appendUL_i66(NULL, xs_v14044, ys_v14042))
  end

val appendULclo_i100 =
  fn A_v14045 xs_v14046 ⇒
    ln ys_v14047 ⇒ appendUL_i66(A_v14045, xs_v14046, ys_v14047)

fun appendLL_i64(A_v14048, xs_v14049, ys_v14050) =
  match xs_v14049 with
  | nilLL_c23  ⇒ ys_v14050
  | consLL_c24 x_v14051 xs_v14052 ⇒
    (consLL_c24 x_v14051 appendLL_i64(NULL, xs_v14052, ys_v14050))
  end

val appendLLclo_i101 =
  fn A_v14053 xs_v14054 ⇒
    ln ys_v14055 ⇒ appendLL_i64(A_v14053, xs_v14054, ys_v14055)

fun readline_i33(__v14056) =
  ln __v14057 ⇒
    let ch_v14058 = (ln __v14059 ⇒ open stdin) NULL in
    let ch_v14060 =
      ((fn x_v14061 ⇒ ln __v14062 ⇒ send(ch_v14058, x_v14061)) 1) NULL
    in
    let __v14063 = (ln __v14064 ⇒ recv(ch_v14060)) NULL in
    (match __v14063 with
     | (s_v14065, ch_v14066) ⇒
       ln __v14067 ⇒
         let ch_v14068 =
           ((fn x_v14069 ⇒ ln __v14070 ⇒ send(ch_v14066, x_v14069)) 0)
             NULL
         in
         let __v14071 =
           (ln __v14072 ⇒ let __v14073 = ch_v14068 in NULL) NULL
         in (ln __v14074 ⇒ s_v14065) NULL
     end) NULL

val readlineclo_i102 = fn __v14075 ⇒ readline_i33(__v14075)

fun print_i34(s_v14076) =
  ln __v14077 ⇒
    let ch_v14078 = (ln __v14079 ⇒ open stdout) NULL in
    let ch_v14080 =
      ((fn x_v14081 ⇒ ln __v14082 ⇒ send(ch_v14078, x_v14081)) 1) NULL
    in
    let ch_v14083 =
      ((fn x_v14084 ⇒ ln __v14085 ⇒ send(ch_v14080, x_v14084)) s_v14076)
        NULL
    in
    let ch_v14086 =
      ((fn x_v14087 ⇒ ln __v14088 ⇒ send(ch_v14083, x_v14087)) 0) NULL
    in (ln __v14089 ⇒ let __v14090 = ch_v14086 in NULL) NULL

val printclo_i103 = fn s_v14091 ⇒ print_i34(s_v14091)

fun prerr_i35(s_v14092) =
  ln __v14093 ⇒
    let ch_v14094 = (ln __v14095 ⇒ open stderr) NULL in
    let ch_v14096 =
      ((fn x_v14097 ⇒ ln __v14098 ⇒ send(ch_v14094, x_v14097)) 1) NULL
    in
    let ch_v14099 =
      ((fn x_v14100 ⇒ ln __v14101 ⇒ send(ch_v14096, x_v14100)) s_v14092)
        NULL
    in
    let ch_v14102 =
      ((fn x_v14103 ⇒ ln __v14104 ⇒ send(ch_v14099, x_v14103)) 0) NULL
    in (ln __v14105 ⇒ let __v14106 = ch_v14102 in NULL) NULL

val prerrclo_i104 = fn s_v14107 ⇒ prerr_i35(s_v14107)

val digits_i36 =
  (consUU_c30
    "0"
    (consUU_c30
      "1"
      (consUU_c30
        "2"
        (consUU_c30
          "3"
          (consUU_c30
            "4"
            (consUU_c30
              "5"
              (consUU_c30
                "6"
                (consUU_c30 "7" (consUU_c30 "8" (consUU_c30 "9" nilUU_c29))))))))))

fun get_at_i37(A_v14108, n_v14109, xs_v14110, a_v14111) =
  let __v14112 = n_v14109 in
  if __v14112 then
    let n_v14113 = __v14112.-1 in
    match xs_v14110 with
    | nilUU_c29  ⇒ a_v14111
    | consUU_c30 __v14114 xs_v14115 ⇒
      get_at_i37(NULL, n_v14113, xs_v14115, a_v14111)
    end
  else
    match xs_v14110 with
    | nilUU_c29  ⇒ a_v14111 | consUU_c30 x_v14116 __v14117 ⇒ x_v14116
    end

val get_atclo_i105 =
  fn A_v14118 n_v14119 xs_v14120 a_v14121 ⇒
    get_at_i37(A_v14118, n_v14119, xs_v14120, a_v14121)

fun string_of_digit_i38(n_v14122) =
  get_at_i37(NULL, n_v14122, digits_i36, EmptyString_c6)

val string_of_digitclo_i106 = fn n_v14123 ⇒ string_of_digit_i38(n_v14123)

fun string_of_nat_i39(n_v14124) =
  let s_v14125 = string_of_digit_i38(modn_i16(n_v14124, 10)) in
  let n_v14126 = divn_i15(n_v14124, 10) in
  if ltn_i6(0, n_v14126) then
    cats_i19(string_of_nat_i39(n_v14126), s_v14125)
  else
    s_v14125

val string_of_natclo_i107 = fn n_v14127 ⇒ string_of_nat_i39(n_v14127)

fun digit_of_char_i40(c_v14128) =
  if eqc_i17(c_v14128, '0') then
    (SomeUL_c20 0)
  else
    if eqc_i17(c_v14128, '1') then
      (SomeUL_c20 1)
    else
      if eqc_i17(c_v14128, '2') then
        (SomeUL_c20 2)
      else
        if eqc_i17(c_v14128, '3') then
          (SomeUL_c20 3)
        else
          if eqc_i17(c_v14128, '4') then
            (SomeUL_c20 4)
          else
            if eqc_i17(c_v14128, '5') then
              (SomeUL_c20 5)
            else
              if eqc_i17(c_v14128, '6') then
                (SomeUL_c20 6)
              else
                if eqc_i17(c_v14128, '7') then
                  (SomeUL_c20 7)
                else
                  if eqc_i17(c_v14128, '8') then
                    (SomeUL_c20 8)
                  else
                    if eqc_i17(c_v14128, '9') then
                      (SomeUL_c20 9)
                    else
                      NoneUL_c19

val digit_of_charclo_i108 = fn c_v14129 ⇒ digit_of_char_i40(c_v14129)

fun nat_of_string_loop_i41(s_v14130, acc_v14131) =
  match s_v14130 with
  | EmptyString_c6  ⇒ (SomeUL_c20 acc_v14131)
  | String_c7 c_v14132 s_v14133 ⇒
    match digit_of_char_i40(c_v14132) with
    | NoneUL_c19  ⇒ NoneUL_c19
    | SomeUL_c20 n_v14134 ⇒
      nat_of_string_loop_i41(s_v14133,
                             addn_i12(muln_i14(acc_v14131, 10), n_v14134))
    end
  end

val nat_of_string_loopclo_i109 =
  fn s_v14135 acc_v14136 ⇒ nat_of_string_loop_i41(s_v14135, acc_v14136)

fun nat_of_string_i42(s_v14137) = nat_of_string_loop_i41(s_v14137, 0)

val nat_of_stringclo_i110 = fn s_v14138 ⇒ nat_of_string_i42(s_v14138)

fun ex_i43(x_v14139) =
  let __v14140 = NULL in let __v14141 = NULL in cats_i19("hello", "world")

val exclo_i111 = fn x_v14142 ⇒ ex_i43(x_v14142)

fun ex_bad3_i46(x_v14143) =
  match x_v14143 with
  | InjLUU_c39 __v14144 ⇒ "hello" | InjRUU_c40 __v14145 ⇒ "world"
  end

val ex_bad3clo_i112 = fn x_v14146 ⇒ ex_bad3_i46(x_v14146)

main = (let s_v14147 = ex_i43(NULL) in print_i34(s_v14147)) NULL

trans23 success--------------------------

fun andb_i1(b1_v14499, b2_v14500) = if b1_v14499 then
                                      b2_v14500
                                    else
                                      0

val andbclo_i68 = fn b1_v14501 b2_v14502 ⇒ andb_i1(b1_v14501, b2_v14502)

fun orb_i2(b1_v14503, b2_v14504) = if b1_v14503 then
                                     1
                                   else
                                     b2_v14504

val orbclo_i69 = fn b1_v14505 b2_v14506 ⇒ orb_i2(b1_v14505, b2_v14506)

fun notb_i3(b_v14507) = if b_v14507 then
                          0
                        else
                          1

val notbclo_i70 = fn b_v14508 ⇒ notb_i3(b_v14508)

fun compareb_i4(b1_v14509, b2_v14510) =
  if b1_v14509 then
    if b2_v14510 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v14510 then
      LT_c1
    else
      EQ_c3

val comparebclo_i71 =
  fn b1_v14511 b2_v14512 ⇒ compareb_i4(b1_v14511, b2_v14512)

fun lten_i5(x_v14513, y_v14514) =
  if x_v14513 then
    if y_v14514 then
      lten_i5(x_v14513.-1, y_v14514.-1)
    else
      0
  else
    1

val ltenclo_i72 = fn x_v14515 y_v14516 ⇒ lten_i5(x_v14515, y_v14516)

fun ltn_i6(x_v14517, y_v14518) = lten_i5(x_v14517.+1, y_v14518)

val ltnclo_i73 = fn x_v14519 y_v14520 ⇒ ltn_i6(x_v14519, y_v14520)

fun gten_i7(x_v14521, y_v14522) = lten_i5(y_v14522, x_v14521)

val gtenclo_i74 = fn x_v14523 y_v14524 ⇒ gten_i7(x_v14523, y_v14524)

fun gtn_i8(x_v14525, y_v14526) = ltn_i6(y_v14526, x_v14525)

val gtnclo_i75 = fn x_v14527 y_v14528 ⇒ gtn_i8(x_v14527, y_v14528)

fun eqn_i9(x_v14529, y_v14530) =
  if x_v14529 then
    if y_v14530 then
      eqn_i9(x_v14529.-1, y_v14530.-1)
    else
      0
  else
    if y_v14530 then
      0
    else
      1

val eqnclo_i76 = fn x_v14531 y_v14532 ⇒ eqn_i9(x_v14531, y_v14532)

fun comparen_i10(n1_v14533, n2_v14534) =
  if n1_v14533 then
    if n2_v14534 then
      comparen_i10(n1_v14533.-1, n2_v14534.-1)
    else
      GT_c2
  else
    if n2_v14534 then
      LT_c1
    else
      EQ_c3

val comparenclo_i77 =
  fn n1_v14535 n2_v14536 ⇒ comparen_i10(n1_v14535, n2_v14536)

fun pred_i11(x_v14537) = if x_v14537 then
                           x_v14537.-1
                         else
                           0

val predclo_i78 = fn x_v14538 ⇒ pred_i11(x_v14538)

fun addn_i12(x_v14539, y_v14540) =
  if x_v14539 then
    addn_i12(x_v14539.-1, y_v14540).+1
  else
    y_v14540

val addnclo_i79 = fn x_v14541 y_v14542 ⇒ addn_i12(x_v14541, y_v14542)

fun subn_i13(x_v14543, y_v14544) =
  if y_v14544 then
    subn_i13(pred_i11(x_v14543), y_v14544.-1)
  else
    x_v14543

val subnclo_i80 = fn x_v14545 y_v14546 ⇒ subn_i13(x_v14545, y_v14546)

fun muln_i14(x_v14547, y_v14548) =
  if x_v14547 then
    addn_i12(y_v14548, muln_i14(x_v14547.-1, y_v14548))
  else
    0

val mulnclo_i81 = fn x_v14549 y_v14550 ⇒ muln_i14(x_v14549, y_v14550)

fun divn_i15(x_v14551, y_v14552) =
  if ltn_i6(x_v14551, y_v14552) then
    0
  else
    divn_i15(subn_i13(x_v14551, y_v14552), y_v14552).+1

val divnclo_i82 = fn x_v14553 y_v14554 ⇒ divn_i15(x_v14553, y_v14554)

fun modn_i16(x_v14555, y_v14556) =
  subn_i13(x_v14555, muln_i14(divn_i15(x_v14555, y_v14556), y_v14556))

val modnclo_i83 = fn x_v14557 y_v14558 ⇒ modn_i16(x_v14557, y_v14558)

fun eqc_i17(c1_v14559, c2_v14560) =
  match c1_v14559 with
  | Char_c5 n1_v14561 ⇒
    match c2_v14560 with
    | Char_c5 n2_v14562 ⇒ eqn_i9(n1_v14561, n2_v14562)
    end
  end

val eqcclo_i84 = fn c1_v14563 c2_v14564 ⇒ eqc_i17(c1_v14563, c2_v14564)

fun comparec_i18(c1_v14565, c2_v14566) =
  match c1_v14565 with
  | Char_c5 n1_v14567 ⇒
    match c2_v14566 with
    | Char_c5 n2_v14568 ⇒ comparen_i10(n1_v14567, n2_v14568)
    end
  end

val comparecclo_i85 =
  fn c1_v14569 c2_v14570 ⇒ comparec_i18(c1_v14569, c2_v14570)

fun cats_i19(s1_v14571, s2_v14572) =
  match s1_v14571 with
  | EmptyString_c6  ⇒ s2_v14572
  | String_c7 c_v14573 s1_v14574 ⇒
    (String_c7 c_v14573 cats_i19(s1_v14574, s2_v14572))
  end

val catsclo_i86 = fn s1_v14575 s2_v14576 ⇒ cats_i19(s1_v14575, s2_v14576)

fun strlen_i20(s_v14577) =
  match s_v14577 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v14578 s_v14579 ⇒ strlen_i20(s_v14579).+1
  end

val strlenclo_i87 = fn s_v14580 ⇒ strlen_i20(s_v14580)

fun eqs_i21(s1_v14581, s2_v14582) =
  match s1_v14581 with
  | EmptyString_c6  ⇒
    match s2_v14582 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v14583 __v14584 ⇒ 0
    end
  | String_c7 c1_v14585 s1_v14586 ⇒
    match s2_v14582 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v14587 s2_v14588 ⇒
      andb_i1(eqc_i17(c1_v14585, c2_v14587), eqs_i21(s1_v14586, s2_v14588))
    end
  end

val eqsclo_i88 = fn s1_v14589 s2_v14590 ⇒ eqs_i21(s1_v14589, s2_v14590)

fun compares_i22(s1_v14591, s2_v14592) =
  match s1_v14591 with
  | EmptyString_c6  ⇒
    match s2_v14592 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v14593 __v14594 ⇒ LT_c1
    end
  | String_c7 c1_v14595 s1_v14596 ⇒
    match s2_v14592 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v14597 s2_v14598 ⇒
      match comparec_i18(c1_v14595, c2_v14597) with
      | EQ_c3  ⇒ compares_i22(s1_v14596, s2_v14598) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i89 =
  fn s1_v14599 s2_v14600 ⇒ compares_i22(s1_v14599, s2_v14600)

fun and_thenUUU_i55(A_v14601, B_v14602, opt_v14603, f_v14604) =
  match opt_v14603 with
  | NoneUU_c21  ⇒ NoneUU_c21 | SomeUU_c22 x_v14605 ⇒ (f_v14604) x_v14605
  end

val and_thenUUUclo_i90 =
  fn A_v14606 B_v14607 opt_v14608 ⇒
    ln f_v14609 ⇒ and_thenUUU_i55(A_v14606, B_v14607, opt_v14608, f_v14609)

fun and_thenUUL_i54(A_v14610, B_v14611, opt_v14612, f_v14613) =
  match opt_v14612 with
  | NoneUL_c19  ⇒ NoneUL_c19 | SomeUL_c20 x_v14614 ⇒ (f_v14613) x_v14614
  end

val and_thenUULclo_i91 =
  fn A_v14615 B_v14616 opt_v14617 ⇒
    ln f_v14618 ⇒ and_thenUUL_i54(A_v14615, B_v14616, opt_v14617, f_v14618)

fun and_thenULU_i53(A_v14619, B_v14620, opt_v14621, f_v14622) =
  match opt_v14621 with
  | NoneUU_c21  ⇒ NoneLU_c17 | SomeUU_c22 x_v14623 ⇒ (f_v14622) x_v14623
  end

val and_thenULUclo_i92 =
  fn A_v14624 B_v14625 opt_v14626 ⇒
    ln f_v14627 ⇒ and_thenULU_i53(A_v14624, B_v14625, opt_v14626, f_v14627)

fun and_thenULL_i52(A_v14628, B_v14629, opt_v14630, f_v14631) =
  match opt_v14630 with
  | NoneUL_c19  ⇒ NoneLL_c15 | SomeUL_c20 x_v14632 ⇒ (f_v14631) x_v14632
  end

val and_thenULLclo_i93 =
  fn A_v14633 B_v14634 opt_v14635 ⇒
    ln f_v14636 ⇒ and_thenULL_i52(A_v14633, B_v14634, opt_v14635, f_v14636)

fun and_thenLUL_i50(A_v14637, B_v14638, opt_v14639, f_v14640) =
  match opt_v14639 with
  | NoneLL_c15  ⇒ NoneUL_c19 | SomeLL_c16 x_v14641 ⇒ (f_v14640) x_v14641
  end

val and_thenLULclo_i94 =
  fn A_v14642 B_v14643 opt_v14644 ⇒
    ln f_v14645 ⇒ and_thenLUL_i50(A_v14642, B_v14643, opt_v14644, f_v14645)

fun and_thenLLL_i48(A_v14646, B_v14647, opt_v14648, f_v14649) =
  match opt_v14648 with
  | NoneLL_c15  ⇒ NoneLL_c15 | SomeLL_c16 x_v14650 ⇒ (f_v14649) x_v14650
  end

val and_thenLLLclo_i95 =
  fn A_v14651 B_v14652 opt_v14653 ⇒
    ln f_v14654 ⇒ and_thenLLL_i48(A_v14651, B_v14652, opt_v14653, f_v14654)

fun lenUU_i63(A_v14655, xs_v14656) =
  match xs_v14656 with
  | nilUU_c29  ⇒ (0, nilUU_c29)
  | consUU_c30 x_v14657 xs_v14658 ⇒
    match lenUU_i63(NULL, xs_v14658) with
    | (n_v14659, xs_v14660) ⇒
      (n_v14659.+1, (consUU_c30 x_v14657 xs_v14660))
    end
  end

val lenUUclo_i96 = fn A_v14661 xs_v14662 ⇒ lenUU_i63(A_v14661, xs_v14662)

fun lenUL_i62(A_v14663, xs_v14664) =
  match xs_v14664 with
  | nilUL_c27  ⇒ (0, nilUL_c27)
  | consUL_c28 x_v14665 xs_v14666 ⇒
    match lenUL_i62(NULL, xs_v14666) with
    | (n_v14667, xs_v14668) ⇒
      (n_v14667.+1, (consUL_c28 x_v14665 xs_v14668))
    end
  end

val lenULclo_i97 = fn A_v14669 xs_v14670 ⇒ lenUL_i62(A_v14669, xs_v14670)

fun lenLL_i60(A_v14671, xs_v14672) =
  match xs_v14672 with
  | nilLL_c23  ⇒ (0, nilLL_c23)
  | consLL_c24 x_v14673 xs_v14674 ⇒
    match lenLL_i60(NULL, xs_v14674) with
    | (n_v14675, xs_v14676) ⇒
      (n_v14675.+1, (consLL_c24 x_v14673 xs_v14676))
    end
  end

val lenLLclo_i98 = fn A_v14677 xs_v14678 ⇒ lenLL_i60(A_v14677, xs_v14678)

fun appendUU_i67(A_v14679, xs_v14680, ys_v14681) =
  match xs_v14680 with
  | nilUU_c29  ⇒ ys_v14681
  | consUU_c30 x_v14682 xs_v14683 ⇒
    (consUU_c30 x_v14682 appendUU_i67(NULL, xs_v14683, ys_v14681))
  end

val appendUUclo_i99 =
  fn A_v14684 xs_v14685 ⇒
    ln ys_v14686 ⇒ appendUU_i67(A_v14684, xs_v14685, ys_v14686)

fun appendUL_i66(A_v14687, xs_v14688, ys_v14689) =
  match xs_v14688 with
  | nilUL_c27  ⇒ ys_v14689
  | consUL_c28 x_v14690 xs_v14691 ⇒
    (consUL_c28 x_v14690 appendUL_i66(NULL, xs_v14691, ys_v14689))
  end

val appendULclo_i100 =
  fn A_v14692 xs_v14693 ⇒
    ln ys_v14694 ⇒ appendUL_i66(A_v14692, xs_v14693, ys_v14694)

fun appendLL_i64(A_v14695, xs_v14696, ys_v14697) =
  match xs_v14696 with
  | nilLL_c23  ⇒ ys_v14697
  | consLL_c24 x_v14698 xs_v14699 ⇒
    (consLL_c24 x_v14698 appendLL_i64(NULL, xs_v14699, ys_v14697))
  end

val appendLLclo_i101 =
  fn A_v14700 xs_v14701 ⇒
    ln ys_v14702 ⇒ appendLL_i64(A_v14700, xs_v14701, ys_v14702)

fun readline_i33(__v14703) =
  ln __v14704 ⇒
    let ch_v14705 = open stdin in
    let ch_v14706 = send(ch_v14705, 1) in
    let __v14707 = recv(ch_v14706) in
    match __v14707 with
    | (s_v14708, ch_v14709) ⇒
      let ch_v14710 = send(ch_v14709, 0) in s_v14708
    end

val readlineclo_i102 = fn __v14711 ⇒ readline_i33(__v14711)

fun print_i34(s_v14712) =
  ln __v14713 ⇒
    let ch_v14714 = open stdout in
    let ch_v14715 = send(ch_v14714, 1) in
    let ch_v14716 = send(ch_v14715, s_v14712) in
    let ch_v14717 = send(ch_v14716, 0) in NULL

val printclo_i103 = fn s_v14718 ⇒ print_i34(s_v14718)

fun prerr_i35(s_v14719) =
  ln __v14720 ⇒
    let ch_v14721 = open stderr in
    let ch_v14722 = send(ch_v14721, 1) in
    let ch_v14723 = send(ch_v14722, s_v14719) in
    let ch_v14724 = send(ch_v14723, 0) in NULL

val prerrclo_i104 = fn s_v14725 ⇒ prerr_i35(s_v14725)

val digits_i36 =
  (consUU_c30
    "0"
    (consUU_c30
      "1"
      (consUU_c30
        "2"
        (consUU_c30
          "3"
          (consUU_c30
            "4"
            (consUU_c30
              "5"
              (consUU_c30
                "6"
                (consUU_c30 "7" (consUU_c30 "8" (consUU_c30 "9" nilUU_c29))))))))))

fun get_at_i37(A_v14726, n_v14727, xs_v14728, a_v14729) =
  if n_v14727 then
    match xs_v14728 with
    | nilUU_c29  ⇒ a_v14729
    | consUU_c30 __v14730 xs_v14731 ⇒
      get_at_i37(NULL, n_v14727.-1, xs_v14731, a_v14729)
    end
  else
    match xs_v14728 with
    | nilUU_c29  ⇒ a_v14729 | consUU_c30 x_v14732 __v14733 ⇒ x_v14732
    end

val get_atclo_i105 =
  fn A_v14734 n_v14735 xs_v14736 a_v14737 ⇒
    get_at_i37(A_v14734, n_v14735, xs_v14736, a_v14737)

fun string_of_digit_i38(n_v14738) =
  get_at_i37(NULL, n_v14738, digits_i36, EmptyString_c6)

val string_of_digitclo_i106 = fn n_v14739 ⇒ string_of_digit_i38(n_v14739)

fun string_of_nat_i39(n_v14740) =
  let s_v14741 = string_of_digit_i38(modn_i16(n_v14740, 10)) in
  let n_v14742 = divn_i15(n_v14740, 10) in
  if ltn_i6(0, n_v14742) then
    cats_i19(string_of_nat_i39(n_v14742), s_v14741)
  else
    s_v14741

val string_of_natclo_i107 = fn n_v14743 ⇒ string_of_nat_i39(n_v14743)

fun digit_of_char_i40(c_v14744) =
  if eqc_i17(c_v14744, '0') then
    (SomeUL_c20 0)
  else
    if eqc_i17(c_v14744, '1') then
      (SomeUL_c20 1)
    else
      if eqc_i17(c_v14744, '2') then
        (SomeUL_c20 2)
      else
        if eqc_i17(c_v14744, '3') then
          (SomeUL_c20 3)
        else
          if eqc_i17(c_v14744, '4') then
            (SomeUL_c20 4)
          else
            if eqc_i17(c_v14744, '5') then
              (SomeUL_c20 5)
            else
              if eqc_i17(c_v14744, '6') then
                (SomeUL_c20 6)
              else
                if eqc_i17(c_v14744, '7') then
                  (SomeUL_c20 7)
                else
                  if eqc_i17(c_v14744, '8') then
                    (SomeUL_c20 8)
                  else
                    if eqc_i17(c_v14744, '9') then
                      (SomeUL_c20 9)
                    else
                      NoneUL_c19

val digit_of_charclo_i108 = fn c_v14745 ⇒ digit_of_char_i40(c_v14745)

fun nat_of_string_loop_i41(s_v14746, acc_v14747) =
  match s_v14746 with
  | EmptyString_c6  ⇒ (SomeUL_c20 acc_v14747)
  | String_c7 c_v14748 s_v14749 ⇒
    match digit_of_char_i40(c_v14748) with
    | NoneUL_c19  ⇒ NoneUL_c19
    | SomeUL_c20 n_v14750 ⇒
      nat_of_string_loop_i41(s_v14749,
                             addn_i12(muln_i14(acc_v14747, 10), n_v14750))
    end
  end

val nat_of_string_loopclo_i109 =
  fn s_v14751 acc_v14752 ⇒ nat_of_string_loop_i41(s_v14751, acc_v14752)

fun nat_of_string_i42(s_v14753) = nat_of_string_loop_i41(s_v14753, 0)

val nat_of_stringclo_i110 = fn s_v14754 ⇒ nat_of_string_i42(s_v14754)

fun ex_i43(x_v14755) = cats_i19("hello", "world")

val exclo_i111 = fn x_v14756 ⇒ ex_i43(x_v14756)

fun ex_bad3_i46(x_v14757) =
  match x_v14757 with
  | InjLUU_c39 __v14758 ⇒ "hello" | InjRUU_c40 __v14759 ⇒ "world"
  end

val ex_bad3clo_i112 = fn x_v14760 ⇒ ex_bad3_i46(x_v14760)

main = let s_v14761 = ex_i43(NULL) in (print_i34(s_v14761)) NULL

trans3e success--------------------------

trans34 success--------------------------

