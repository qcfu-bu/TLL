inductive List‹s, t› (A : Type‹s›) : Type‹t› = Nil of ‹s,
t› {A : Type‹s›} → ((List‹s, t›) (A)) | Cons of ‹s,
t› {A : Type‹s›} (hd : A) (tl : ((List‹s, t›)
(A))) → ((List‹s, t›)
(A))

logical len‹s, t› {A : Type‹s›} (xs : ((List‹s, t›)
(A))) : nat = match xs as _ in _ with Nil  ⇒ O.+0 | Cons hd tl ⇒ (
(addn) (O.+1)
(((len) (_) (tl))))

program append‹s, t› {A : Type‹s›} (xs : ((List‹_, t›)
(A))) : (∀ (_ : ((List) (A))) ⊸ ((List)
(A))) = (ln (ys : _) ⇒ match xs as _ in _ with Nil  ⇒ ys | Cons x
xs ⇒ ((Cons) (x)
(((append) (_) (xs) (ys)))))

logical append_len‹s, t› (A : Type‹s›) (xs : ((List‹_, t›)
(A))) (ys : ((List‹_, t›) (A))) : ((len) (_)
(((append) (_) (xs) (ys)))) ≡ ((addn) (((len) (_) (xs)))
(((len) (_) (ys)))) = match xs as xs0 in ((len) (_)
(((append) (_) (xs0) (ys)))) ≡ ((addn) (((len) (_) (xs0)))
(((len) (_) (ys)))) with Nil  ⇒ refl | Cons x xs0 ⇒ rew [n, _ ⇒ (
(len) (_) (((append) (_) (xs0) (ys)))).+1 ≡ n.+1] ((append_len) (_) 
(xs0)
(ys)) in refl

logical list‹s› {A : Type‹s›} : U = ((List‹_, U›)
(A))

program ls0‹› : ((list) (_)) = ((Cons) (O.+0)
(Nil))

program ls1‹› : ((list) (_)) = ((Cons) (O.+0)
(Nil))

program ls2‹› : _ = ((append) (_) (ls0)
(ls1))

program id‹s› {A : Type‹s›} (x : A) : A = x

program main‹› : IO unit = let s ⇐ ((readline) (())) in ((id) (_)
(((print) (((id) (_) (s))))))

parsing success--------------------------

inductive absurd_d1 : U =


logical absurd_elim_i1 ‹s_s296› :
  ∀ (A_v297 : Type‹s_s296›) → absurd_d1 → A_v297
=
  fn (A_v299 : Type‹s_s296›) (p_v300 : absurd_d1) ⇒
    match p_v300 as __v301 in ??1 with
    
    end

inductive order_d2 : U =
| LT_c1 of : order_d2 | GT_c2 of : order_d2 | EQ_c3 of : order_d2

program andb_i2 : bool → bool → bool =
  fn (b1_v304 : bool) (b2_v305 : bool) ⇒
    match b1_v304 as __v306 in ??2 with
    | true ⇒ b2_v305 | false ⇒ false
    end

program orb_i3 : bool → bool → bool =
  fn (b1_v309 : bool) (b2_v310 : bool) ⇒
    match b1_v309 as __v311 in ??3 with
    | true ⇒ true | false ⇒ b2_v310
    end

program notb_i4 : bool → bool =
  fn (b_v313 : bool) ⇒
    match b_v313 as __v314 in ??4 with
    | true ⇒ false | false ⇒ true
    end

program compareb_i5 : bool → bool → order_d2 =
  fn (b1_v317 : bool) (b2_v318 : bool) ⇒
    match b1_v317 as __v319 in ??5 with
    | true ⇒
      match b2_v318 as __v320 in ??7 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v318 as __v321 in ??6 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i6 : nat → nat → bool =
  fn (x_v324 : nat) (y_v325 : nat) ⇒
    match x_v324 as __v326 in ??8 with
    | O ⇒ true
    | S x_v327 ⇒
      match y_v325 as __v328 in ??9 with
      | O ⇒ false | S y_v329 ⇒ (lten_i6 x_v327 y_v329)
      end
    end

program gten_i7 : nat → nat → bool =
  fn (x_v332 : nat) (y_v333 : nat) ⇒
    match x_v332 as __v334 in ??10 with
    | O ⇒
      match y_v333 as __v335 in ??12 with
      | O ⇒ true | S __v336 ⇒ false
      end
    | S x_v337 ⇒
      match y_v333 as __v338 in ??11 with
      | O ⇒ true | S y_v339 ⇒ (gten_i7 x_v337 y_v339)
      end
    end

program ltn_i8 : nat → nat → bool =
  fn (x_v342 : nat) (y_v343 : nat) ⇒
    match x_v342 as __v344 in ??13 with
    | O ⇒
      match y_v343 as __v345 in ??15 with
      | O ⇒ false | S y_v346 ⇒ true
      end
    | S x_v347 ⇒
      match y_v343 as __v348 in ??14 with
      | O ⇒ false | S y_v349 ⇒ (ltn_i8 x_v347 y_v349)
      end
    end

program gtn_i9 : nat → nat → bool =
  fn (x_v352 : nat) (y_v353 : nat) ⇒
    match x_v352 as __v354 in ??16 with
    | O ⇒ false
    | S x_v355 ⇒
      match y_v353 as __v356 in ??17 with
      | O ⇒ true | S y_v357 ⇒ (gtn_i9 x_v355 y_v357)
      end
    end

program eqn_i10 : nat → nat → bool =
  fn (x_v360 : nat) (y_v361 : nat) ⇒
    match x_v360 as __v362 in ??18 with
    | O ⇒
      match y_v361 as __v363 in ??20 with
      | O ⇒ true | S __v364 ⇒ false
      end
    | S x_v365 ⇒
      match y_v361 as __v366 in ??19 with
      | O ⇒ false | S y_v367 ⇒ (eqn_i10 x_v365 y_v367)
      end
    end

program comparen_i11 : nat → nat → order_d2 =
  fn (n1_v370 : nat) (n2_v371 : nat) ⇒
    match n1_v370 as __v372 in ??21 with
    | O ⇒
      match n2_v371 as __v373 in ??23 with
      | O ⇒ EQ_c3‹› | S __v374 ⇒ LT_c1‹›
      end
    | S n1_v375 ⇒
      match n2_v371 as __v376 in ??22 with
      | O ⇒ GT_c2‹› | S n2_v377 ⇒ (comparen_i11 n1_v375 n2_v377)
      end
    end

program pred_i12 : nat → nat =
  fn (x_v379 : nat) ⇒
    match x_v379 as __v380 in ??24 with
    | O ⇒ 0 | S x_v381 ⇒ x_v381
    end

program addn_i13 : nat → nat → nat =
  fn (x_v384 : nat) (y_v385 : nat) ⇒
    match x_v384 as __v386 in ??25 with
    | O ⇒ y_v385 | S x_v387 ⇒ (addn_i13 x_v387 y_v385).+1
    end

program subn_i14 : nat → nat → nat =
  fn (x_v390 : nat) (y_v391 : nat) ⇒
    match y_v391 as __v392 in ??26 with
    | O ⇒ x_v390 | S y_v393 ⇒ (subn_i14 (pred_i12 x_v390) y_v393)
    end

program muln_i15 : nat → nat → nat =
  fn (x_v396 : nat) (y_v397 : nat) ⇒
    match x_v396 as __v398 in ??27 with
    | O ⇒ 0 | S x_v399 ⇒ (addn_i13 y_v397 (muln_i15 x_v399 y_v397))
    end

program divn_i16 : nat → nat → nat =
  fn (x_v402 : nat) (y_v403 : nat) ⇒
    match (ltn_i8 x_v402 y_v403) as __v404 in ??28 with
    | true ⇒ 0 | false ⇒ (divn_i16 (subn_i14 x_v402 y_v403) y_v403).+1
    end

program modn_i17 : nat → nat → nat =
  fn (x_v407 : nat) (y_v408 : nat) ⇒
    (subn_i14 x_v407 (muln_i15 (divn_i16 x_v407 y_v408) y_v408))

inductive between_d3 (lower_v409 : nat) (upper_v410 : nat) : L =
| Between_c4 of
    (lower_v411 : nat) (upper_v412 : nat) (n_v413 : nat)
    {pf1_v414 : (lten_i6 lower_v411 n_v413) ≡ true}
    {pf2_v415 : (lten_i6 n_v413 upper_v412) ≡ true}
    : (between_d3 lower_v411 upper_v412)

inductive char_d4 : U =
| Char_c5 of (n_v416 : nat) : char_d4

program eqc_i18 : char_d4 → char_d4 → bool =
  fn (c1_v419 : char_d4) (c2_v420 : char_d4) ⇒
    match c1_v419 as __v421 in ??31 with
    | Char_c5 n1_v422 ⇒
      match c2_v420 as __v423 in ??32 with
      | Char_c5 n2_v424 ⇒ (eqn_i10 n1_v422 n2_v424)
      end
    end

program comparec_i19 : char_d4 → char_d4 → order_d2 =
  fn (c1_v427 : char_d4) (c2_v428 : char_d4) ⇒
    match c1_v427 as __v429 in ??33 with
    | Char_c5 n1_v430 ⇒
      match c2_v428 as __v431 in ??34 with
      | Char_c5 n2_v432 ⇒ (comparen_i11 n1_v430 n2_v432)
      end
    end

inductive string_d5 : U =
| EmptyString_c6 of : string_d5
| String_c7 of (c_v433 : char_d4) (s_v434 : string_d5) : string_d5

program cats_i20 : string_d5 → string_d5 → string_d5 =
  fn (s1_v437 : string_d5) (s2_v438 : string_d5) ⇒
    match s1_v437 as __v439 in ??35 with
    | EmptyString_c6  ⇒ s2_v438
    | String_c7 c_v440 s1_v441 ⇒
      (String_c7‹› c_v440 (cats_i20 s1_v441 s2_v438))
    end

program strlen_i21 : string_d5 → nat =
  fn (s_v443 : string_d5) ⇒
    match s_v443 as __v444 in ??36 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v445 s_v446 ⇒ (strlen_i21 s_v446).+1
    end

program eqs_i22 : string_d5 → string_d5 → bool =
  fn (s1_v449 : string_d5) (s2_v450 : string_d5) ⇒
    match s1_v449 as __v451 in ??37 with
    | EmptyString_c6  ⇒
      match s2_v450 as __v452 in ??39 with
      | EmptyString_c6  ⇒ true | String_c7 __v453 __v454 ⇒ false
      end
    | String_c7 c1_v455 s1_v456 ⇒
      match s2_v450 as __v457 in ??38 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v458 s2_v459 ⇒
        (andb_i2 (eqc_i18 c1_v455 c2_v458) (eqs_i22 s1_v456 s2_v459))
      end
    end

program compares_i23 : string_d5 → string_d5 → order_d2 =
  fn (s1_v462 : string_d5) (s2_v463 : string_d5) ⇒
    match s1_v462 as __v464 in ??40 with
    | EmptyString_c6  ⇒
      match s2_v463 as __v465 in ??43 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v466 __v467 ⇒ LT_c1‹›
      end
    | String_c7 c1_v468 s1_v469 ⇒
      match s2_v463 as __v470 in ??41 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v471 s2_v472 ⇒
        match (comparec_i19 c1_v468 c2_v471) as __v473 in ??42 with
        | EQ_c3  ⇒ (compares_i23 s1_v469 s2_v472) | LT_c1  ⇒ LT_c1‹›
        | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d6 ‹s_s474, t_s475›
  (A_v476 : Type‹s_s474›) : Type‹t_s475›
=
| None_c8 of
    ‹s_s477, t_s478› (A_v479 : Type‹s_s477›)
    : (option_d6‹s_s477, t_s478› A_v479)
| Some_c9 of
    ‹s_s480, t_s481› (A_v482 : Type‹s_s480›) (x_v483 : A_v482)
    : (option_d6‹s_s480, t_s481› A_v482)

program and_then_i24 ‹s_s484, r_s485, t_s486› :
  ∀ {A_v487 : Type‹s_s484›} →
    ∀ {B_v488 : Type‹r_s485›} →
      (option_d6‹??44, t_s486› A_v487) →
        A_v487 → (option_d6‹??45, t_s486› B_v488) ⊸
          (option_d6‹??46, t_s486› B_v488)
=
  fn {A_v492 : Type‹s_s484›} {B_v493 : Type‹r_s485›}
     (opt_v494 : (option_d6‹??44, t_s486› A_v492)) ⇒
    ln (f_v495 : ??47) ⇒
      match opt_v494 as __v496 in ??48 with
      | None_c8  ⇒ None_c8‹??51, ??50›
      | Some_c9 x_v497 ⇒ (f_v495 x_v497)
      end

inductive list_d7 ‹s_s498, t_s499›
  (A_v500 : Type‹s_s498›) : Type‹t_s499›
=
| nil_c10 of
    ‹s_s501, t_s502› (A_v503 : Type‹s_s501›)
    : (list_d7‹s_s501, t_s502› A_v503)
| cons_c11 of
    ‹s_s504, t_s505› (A_v506 : Type‹s_s504›) (hd_v507 : A_v506)
    (tl_v508 : (list_d7‹s_s504, t_s505› A_v506))
    : (list_d7‹s_s504, t_s505› A_v506)

program len_i25 ‹s_s509, t_s510› :
  ∀ {A_v511 : Type‹s_s509›} →
    (list_d7‹??52, t_s510› A_v511) →
      nat ⊗ (list_d7‹??53, t_s510› A_v511)
=
  fn {A_v514 : Type‹s_s509›}
     (xs_v515 : (list_d7‹??52, t_s510› A_v514)) ⇒
    match xs_v515 as __v516 in ??54 with
    | nil_c10  ⇒ ⟨0, nil_c10‹??64, ??63›⟩
    | cons_c11 x_v517 xs_v518 ⇒
      match (len_i25‹??57, ??56› ??55 xs_v518) as __v519 in ??58 with
      | ⟨n_v520, xs_v521⟩ ⇒
        ⟨n_v520.+1, (cons_c11‹??61, ??60› x_v517 xs_v521)⟩
      end
    end

program append_i26 ‹s_s522, t_s523› :
  ∀ {A_v524 : Type‹s_s522›} →
    (list_d7‹??65, t_s523› A_v524) →
      (list_d7‹??66, t_s523› A_v524) ⊸ (list_d7‹??68, ??67› A_v524)
=
  fn {A_v527 : Type‹s_s522›}
     (xs_v528 : (list_d7‹??65, t_s523› A_v527)) ⇒
    ln (ys_v529 : ??69) ⇒
      match xs_v528 as __v530 in ??70 with
      | nil_c10  ⇒ ys_v529
      | cons_c11 x_v531 xs_v532 ⇒
        (cons_c11‹??76, ??75›
          x_v531 (append_i26‹??73, ??72› ??71 xs_v532 ys_v529))
      end

logical stdin_rec_i27 : unit → proto =
  fn (__v534 : unit) ⇒
    ⇑(b_v535 : bool) ⇒
      match b_v535 as __v536 in ??77 with
      | true ⇒ ⇓(__v537 : string_d5) ⇒ (stdin_rec_i27 ())
      | false ⇒ end
      end

logical stdout_rec_i28 : unit → proto =
  fn (__v539 : unit) ⇒
    ⇑(b_v540 : bool) ⇒
      match b_v540 as __v541 in ??78 with
      | true ⇒ ⇑(__v542 : string_d5) ⇒ (stdout_rec_i28 ())
      | false ⇒ end
      end

logical stderr_rec_i29 : unit → proto =
  fn (__v544 : unit) ⇒
    ⇑(b_v545 : bool) ⇒
      match b_v545 as __v546 in ??79 with
      | true ⇒ ⇑(__v547 : string_d5) ⇒ (stderr_rec_i29 ())
      | false ⇒ end
      end

logical stdin_t_i30 : proto = (stdin_rec_i27 ())

logical stdout_t_i31 : proto = (stdout_rec_i28 ())

logical stderr_t_i32 : proto = (stderr_rec_i29 ())

program readline_i33 : unit → IO string_d5 =
  fn (__v549 : unit) ⇒
    let ch_v550 ⇐ open stdin in
    let ch_v551 ⇐ (send ch_v550 true) in
    let __v552 ⇐ recv ch_v551 in
    match __v552 as __v553 in ??80 with
    | ⟨s_v554, ch_v555⟩ ⇒
      let ch_v556 ⇐ (send ch_v555 false) in
      let __v557 ⇐ close ch_v556 in return s_v554
    end

program print_i34 : string_d5 → IO unit =
  fn (s_v559 : string_d5) ⇒
    let ch_v560 ⇐ open stdout in
    let ch_v561 ⇐ (send ch_v560 true) in
    let ch_v562 ⇐ (send ch_v561 s_v559) in
    let ch_v563 ⇐ (send ch_v562 false) in close ch_v563

program prerr_i35 : string_d5 → IO unit =
  fn (s_v565 : string_d5) ⇒
    let ch_v566 ⇐ open stderr in
    let ch_v567 ⇐ (send ch_v566 true) in
    let ch_v568 ⇐ (send ch_v567 s_v565) in
    let ch_v569 ⇐ (send ch_v568 false) in close ch_v569

program digits_i36 : (list_d7‹??81, U› ??82) =
  (cons_c11‹??115, ??114›
    "0"
    (cons_c11‹??112, ??111›
      "1"
      (cons_c11‹??109, ??108›
        "2"
        (cons_c11‹??106, ??105›
          "3"
          (cons_c11‹??103, ??102›
            "4"
            (cons_c11‹??100, ??99›
              "5"
              (cons_c11‹??97, ??96›
                "6"
                (cons_c11‹??94, ??93›
                  "7"
                  (cons_c11‹??91, ??90›
                    "8"
                    (cons_c11‹??88, ??87› "9" nil_c10‹??85, ??84›))))))))))

program get_at_i37 :
  ∀ {A_v570 : U} →
    nat → (list_d7‹??116, U› A_v570) → A_v570 → A_v570
=
  fn {A_v574 : U} (n_v575 : nat) (xs_v576 : (list_d7‹??116, U› A_v574))
     (a_v577 : A_v574) ⇒
    match n_v575 as __v578 in ??117 with
    | O ⇒
      match xs_v576 as __v579 in ??120 with
      | nil_c10  ⇒ a_v577 | cons_c11 x_v580 __v581 ⇒ x_v580
      end
    | S n_v582 ⇒
      match xs_v576 as __v583 in ??118 with
      | nil_c10  ⇒ a_v577
      | cons_c11 __v584 xs_v585 ⇒ (get_at_i37 ??119 n_v582 xs_v585 a_v577)
      end
    end

program string_of_digit_i38 : nat → string_d5 =
  fn (n_v587 : nat) ⇒
    (get_at_i37 ??121 n_v587 digits_i36 EmptyString_c6‹›)

program string_of_nat_i39 : nat → string_d5 =
  fn (n_v589 : nat) ⇒
    let s_v590 = (string_of_digit_i38 (modn_i17 n_v589 10)) in
    let n_v591 = (divn_i16 n_v589 10) in
    match (ltn_i8 0 n_v591) as __v592 in ??122 with
    | true ⇒ (cats_i20 (string_of_nat_i39 n_v591) s_v590)
    | false ⇒ s_v590
    end

program digit_of_char_i40 : char_d4 → (option_d6‹??123, L› nat) =
  fn (c_v594 : char_d4) ⇒
    match (eqc_i18 c_v594 '0') as __v595 in ??124 with
    | true ⇒ (Some_c9‹??166, ??165› 0)
    | false ⇒
      match (eqc_i18 c_v594 '1') as __v596 in ??125 with
      | true ⇒ (Some_c9‹??163, ??162› 1)
      | false ⇒
        match (eqc_i18 c_v594 '2') as __v597 in ??126 with
        | true ⇒ (Some_c9‹??160, ??159› 2)
        | false ⇒
          match (eqc_i18 c_v594 '3') as __v598 in ??127 with
          | true ⇒ (Some_c9‹??157, ??156› 3)
          | false ⇒
            match (eqc_i18 c_v594 '4') as __v599 in ??128 with
            | true ⇒ (Some_c9‹??154, ??153› 4)
            | false ⇒
              match (eqc_i18 c_v594 '5') as __v600 in ??129 with
              | true ⇒ (Some_c9‹??151, ??150› 5)
              | false ⇒
                match (eqc_i18 c_v594 '6') as __v601 in ??130 with
                | true ⇒ (Some_c9‹??148, ??147› 6)
                | false ⇒
                  match (eqc_i18 c_v594 '7') as __v602 in ??131 with
                  | true ⇒ (Some_c9‹??145, ??144› 7)
                  | false ⇒
                    match (eqc_i18 c_v594 '8') as __v603 in ??132 with
                    | true ⇒ (Some_c9‹??142, ??141› 8)
                    | false ⇒
                      match (eqc_i18 c_v594 '9') as __v604 in ??133 with
                      | true ⇒ (Some_c9‹??139, ??138› 9)
                      | false ⇒ None_c8‹??136, ??135›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i41 :
  string_d5 → nat → (option_d6‹??167, L› nat)
=
  fn (s_v607 : string_d5) (acc_v608 : nat) ⇒
    match s_v607 as __v609 in ??168 with
    | EmptyString_c6  ⇒ (Some_c9‹??175, ??174› acc_v608)
    | String_c7 c_v610 s_v611 ⇒
      match (digit_of_char_i40 c_v610) as __v612 in ??169 with
      | None_c8  ⇒ None_c8‹??172, ??171›
      | Some_c9 n_v613 ⇒
        (nat_of_string_loop_i41
          s_v611 (addn_i13 (muln_i15 acc_v608 10) n_v613))
      end
    end

program nat_of_string_i42 : string_d5 → (option_d6‹??176, L› nat) =
  fn (s_v615 : string_d5) ⇒ (nat_of_string_loop_i41 s_v615 0)

inductive List_d8 ‹s_s616, t_s617›
  (A_v618 : Type‹s_s616›) : Type‹t_s617›
=
| Nil_c12 of
    ‹s_s619, t_s620› (A_v621 : Type‹s_s619›)
    : (List_d8‹s_s619, t_s620› A_v621)
| Cons_c13 of
    ‹s_s622, t_s623› (A_v624 : Type‹s_s622›) (hd_v625 : A_v624)
    (tl_v626 : (List_d8‹s_s622, t_s623› A_v624))
    : (List_d8‹s_s622, t_s623› A_v624)

logical len_i43 ‹s_s627, t_s628› :
  ∀ {A_v629 : Type‹s_s627›} →
    (List_d8‹s_s627, t_s628› A_v629) → nat
=
  fn {A_v631 : Type‹s_s627›}
     (xs_v632 : (List_d8‹s_s627, t_s628› A_v631)) ⇒
    match xs_v632 as __v633 in ??177 with
    | Nil_c12  ⇒ 0
    | Cons_c13 hd_v634 tl_v635 ⇒
      (addn_i13 1 (len_i43‹??180, ??179› ??178 tl_v635))
    end

program append_i44 ‹s_s636, t_s637› :
  ∀ {A_v638 : Type‹s_s636›} →
    (List_d8‹??181, t_s637› A_v638) →
      (List_d8‹??183, ??182› A_v638) ⊸
        (List_d8‹??185, ??184› A_v638)
=
  fn {A_v641 : Type‹s_s636›}
     (xs_v642 : (List_d8‹??181, t_s637› A_v641)) ⇒
    ln (ys_v643 : ??186) ⇒
      match xs_v642 as __v644 in ??187 with
      | Nil_c12  ⇒ ys_v643
      | Cons_c13 x_v645 xs_v646 ⇒
        (Cons_c13‹??193, ??192›
          x_v645 (append_i44‹??190, ??189› ??188 xs_v646 ys_v643))
      end

logical append_len_i45 ‹s_s647, t_s648› :
  ∀ (A_v649 : Type‹s_s647›) →
    ∀ (xs_v650 : (List_d8‹??194, t_s648› A_v649)) →
      ∀ (ys_v651 : (List_d8‹??195, t_s648› A_v649)) →
        (len_i43‹??201, ??200›
          ??199 (append_i44‹??198, ??197› ??196 xs_v650 ys_v651)) ≡
          (addn_i13
            (len_i43‹??207, ??206› ??205 xs_v650)
            (len_i43‹??204, ??203› ??202 ys_v651))
=
  fn (A_v652 : Type‹s_s647›)
     (xs_v653 : (List_d8‹??194, t_s648› A_v652))
     (ys_v654 : (List_d8‹??195, t_s648› A_v652)) ⇒
    match xs_v653 as xs0_v655 in
      (len_i43‹??214, ??213›
        ??212 (append_i44‹??211, ??210› ??209 xs0_v655 ys_v654)) ≡
        (addn_i13
          (len_i43‹??220, ??219› ??218 xs0_v655)
          (len_i43‹??217, ??216› ??215 ys_v654)) with
    | Nil_c12  ⇒ refl ??233
    | Cons_c13 x_v656 xs0_v657 ⇒
      rew [n_v658, __v659 ⇒
        (len_i43‹??231, ??230›
          ??229 (append_i44‹??228, ??227› ??226 xs0_v657 ys_v654)).+1 ≡
          n_v658.+1]
        (append_len_i45‹??224, ??223› ??222 xs0_v657 ys_v654) in
      refl ??225
    end

logical list_i46 ‹s_s660› : {Type‹s_s660›} → U =
  fn {A_v662 : Type‹s_s660›} ⇒ (List_d8‹??234, U› A_v662)

program ls0_i47 : (list_i46‹??236› ??235) =
  (Cons_c13‹??242, ??241› 0 Nil_c12‹??239, ??238›)

program ls1_i48 : (list_i46‹??244› ??243) =
  (Cons_c13‹??250, ??249› 0 Nil_c12‹??247, ??246›)

program ls2_i49 : ??251 =
  (append_i44‹??254, ??253› ??252 ls0_i47 ls1_i48)

program id_i50 ‹s_s663› :
  ∀ {A_v664 : Type‹s_s663›} → A_v664 → A_v664
= fn {A_v666 : Type‹s_s663›} (x_v667 : A_v666) ⇒ x_v667

program main_i51 : IO unit =
  let s_v668 ⇐ (readline_i33 ()) in
  (id_i50‹??258› ??257 (print_i34 (id_i50‹??256› ??255 s_v668)))

trans01 success--------------------------

inductive absurd_d1 : U =


logical absurd_elim_i1 ‹s_s19288› :
  ∀ (A_v19289 : Type‹s_s19288›) → absurd_d1 → A_v19289
=
  fn (A_v19291 : Type‹s_s19288›) (p_v19292 : absurd_d1) ⇒
    match p_v19292 as __v19293 in A_v19291 with
    
    end

inductive order_d2 : U =
| LT_c1 of : order_d2 | GT_c2 of : order_d2 | EQ_c3 of : order_d2

program andb_i2 : bool → bool → bool =
  fn (b1_v19296 : bool) (b2_v19297 : bool) ⇒
    match b1_v19296 as __v19298 in bool with
    | true ⇒ b2_v19297 | false ⇒ false
    end

program orb_i3 : bool → bool → bool =
  fn (b1_v19301 : bool) (b2_v19302 : bool) ⇒
    match b1_v19301 as __v19303 in bool with
    | true ⇒ true | false ⇒ b2_v19302
    end

program notb_i4 : bool → bool =
  fn (b_v19305 : bool) ⇒
    match b_v19305 as __v19306 in bool with
    | true ⇒ false | false ⇒ true
    end

program compareb_i5 : bool → bool → order_d2 =
  fn (b1_v19309 : bool) (b2_v19310 : bool) ⇒
    match b1_v19309 as __v19311 in order_d2 with
    | true ⇒
      match b2_v19310 as __v19312 in order_d2 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v19310 as __v19313 in order_d2 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i6 : nat → nat → bool =
  fn (x_v19316 : nat) (y_v19317 : nat) ⇒
    match x_v19316 as __v19318 in bool with
    | O ⇒ true
    | S x_v19319 ⇒
      match y_v19317 as __v19320 in bool with
      | O ⇒ false | S y_v19321 ⇒ (lten_i6 x_v19319 y_v19321)
      end
    end

program gten_i7 : nat → nat → bool =
  fn (x_v19324 : nat) (y_v19325 : nat) ⇒
    match x_v19324 as __v19326 in bool with
    | O ⇒
      match y_v19325 as __v19327 in bool with
      | O ⇒ true | S __v19328 ⇒ false
      end
    | S x_v19329 ⇒
      match y_v19325 as __v19330 in bool with
      | O ⇒ true | S y_v19331 ⇒ (gten_i7 x_v19329 y_v19331)
      end
    end

program ltn_i8 : nat → nat → bool =
  fn (x_v19334 : nat) (y_v19335 : nat) ⇒
    match x_v19334 as __v19336 in bool with
    | O ⇒
      match y_v19335 as __v19337 in bool with
      | O ⇒ false | S y_v19338 ⇒ true
      end
    | S x_v19339 ⇒
      match y_v19335 as __v19340 in bool with
      | O ⇒ false | S y_v19341 ⇒ (ltn_i8 x_v19339 y_v19341)
      end
    end

program gtn_i9 : nat → nat → bool =
  fn (x_v19344 : nat) (y_v19345 : nat) ⇒
    match x_v19344 as __v19346 in bool with
    | O ⇒ false
    | S x_v19347 ⇒
      match y_v19345 as __v19348 in bool with
      | O ⇒ true | S y_v19349 ⇒ (gtn_i9 x_v19347 y_v19349)
      end
    end

program eqn_i10 : nat → nat → bool =
  fn (x_v19352 : nat) (y_v19353 : nat) ⇒
    match x_v19352 as __v19354 in bool with
    | O ⇒
      match y_v19353 as __v19355 in bool with
      | O ⇒ true | S __v19356 ⇒ false
      end
    | S x_v19357 ⇒
      match y_v19353 as __v19358 in bool with
      | O ⇒ false | S y_v19359 ⇒ (eqn_i10 x_v19357 y_v19359)
      end
    end

program comparen_i11 : nat → nat → order_d2 =
  fn (n1_v19362 : nat) (n2_v19363 : nat) ⇒
    match n1_v19362 as __v19364 in order_d2 with
    | O ⇒
      match n2_v19363 as __v19365 in order_d2 with
      | O ⇒ EQ_c3‹› | S __v19366 ⇒ LT_c1‹›
      end
    | S n1_v19367 ⇒
      match n2_v19363 as __v19368 in order_d2 with
      | O ⇒ GT_c2‹›
      | S n2_v19369 ⇒ (comparen_i11 n1_v19367 n2_v19369)
      end
    end

program pred_i12 : nat → nat =
  fn (x_v19371 : nat) ⇒
    match x_v19371 as __v19372 in nat with
    | O ⇒ 0 | S x_v19373 ⇒ x_v19373
    end

program addn_i13 : nat → nat → nat =
  fn (x_v19376 : nat) (y_v19377 : nat) ⇒
    match x_v19376 as __v19378 in nat with
    | O ⇒ y_v19377 | S x_v19379 ⇒ (addn_i13 x_v19379 y_v19377).+1
    end

program subn_i14 : nat → nat → nat =
  fn (x_v19382 : nat) (y_v19383 : nat) ⇒
    match y_v19383 as __v19384 in nat with
    | O ⇒ x_v19382 | S y_v19385 ⇒ (subn_i14 (pred_i12 x_v19382) y_v19385)
    end

program muln_i15 : nat → nat → nat =
  fn (x_v19388 : nat) (y_v19389 : nat) ⇒
    match x_v19388 as __v19390 in nat with
    | O ⇒ 0
    | S x_v19391 ⇒ (addn_i13 y_v19389 (muln_i15 x_v19391 y_v19389))
    end

program divn_i16 : nat → nat → nat =
  fn (x_v19394 : nat) (y_v19395 : nat) ⇒
    match (ltn_i8 x_v19394 y_v19395) as __v19396 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i16 (subn_i14 x_v19394 y_v19395) y_v19395).+1
    end

program modn_i17 : nat → nat → nat =
  fn (x_v19399 : nat) (y_v19400 : nat) ⇒
    (subn_i14 x_v19399 (muln_i15 (divn_i16 x_v19399 y_v19400) y_v19400))

inductive between_d3 (lower_v19401 : nat) (upper_v19402 : nat) : L =
| Between_c4 of
    (lower_v19403 : nat) (upper_v19404 : nat) (n_v19405 : nat)
    {pf1_v19406 : (lten_i6 lower_v19403 n_v19405) ≡ true}
    {pf2_v19407 : (lten_i6 n_v19405 upper_v19404) ≡ true}
    : (between_d3 lower_v19403 upper_v19404)

inductive char_d4 : U =
| Char_c5 of (n_v19408 : nat) : char_d4

program eqc_i18 : char_d4 → char_d4 → bool =
  fn (c1_v19411 : char_d4) (c2_v19412 : char_d4) ⇒
    match c1_v19411 as __v19413 in bool with
    | Char_c5 n1_v19414 ⇒
      match c2_v19412 as __v19415 in bool with
      | Char_c5 n2_v19416 ⇒ (eqn_i10 n1_v19414 n2_v19416)
      end
    end

program comparec_i19 : char_d4 → char_d4 → order_d2 =
  fn (c1_v19419 : char_d4) (c2_v19420 : char_d4) ⇒
    match c1_v19419 as __v19421 in order_d2 with
    | Char_c5 n1_v19422 ⇒
      match c2_v19420 as __v19423 in order_d2 with
      | Char_c5 n2_v19424 ⇒ (comparen_i11 n1_v19422 n2_v19424)
      end
    end

inductive string_d5 : U =
| EmptyString_c6 of : string_d5
| String_c7 of (c_v19425 : char_d4) (s_v19426 : string_d5) : string_d5

program cats_i20 : string_d5 → string_d5 → string_d5 =
  fn (s1_v19429 : string_d5) (s2_v19430 : string_d5) ⇒
    match s1_v19429 as __v19431 in string_d5 with
    | EmptyString_c6  ⇒ s2_v19430
    | String_c7 c_v19432 s1_v19433 ⇒
      (String_c7‹› c_v19432 (cats_i20 s1_v19433 s2_v19430))
    end

program strlen_i21 : string_d5 → nat =
  fn (s_v19435 : string_d5) ⇒
    match s_v19435 as __v19436 in nat with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v19437 s_v19438 ⇒ (strlen_i21 s_v19438).+1
    end

program eqs_i22 : string_d5 → string_d5 → bool =
  fn (s1_v19441 : string_d5) (s2_v19442 : string_d5) ⇒
    match s1_v19441 as __v19443 in bool with
    | EmptyString_c6  ⇒
      match s2_v19442 as __v19444 in bool with
      | EmptyString_c6  ⇒ true | String_c7 __v19445 __v19446 ⇒ false
      end
    | String_c7 c1_v19447 s1_v19448 ⇒
      match s2_v19442 as __v19449 in bool with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v19450 s2_v19451 ⇒
        (andb_i2 (eqc_i18 c1_v19447 c2_v19450) (eqs_i22 s1_v19448 s2_v19451))
      end
    end

program compares_i23 : string_d5 → string_d5 → order_d2 =
  fn (s1_v19454 : string_d5) (s2_v19455 : string_d5) ⇒
    match s1_v19454 as __v19456 in order_d2 with
    | EmptyString_c6  ⇒
      match s2_v19455 as __v19457 in order_d2 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v19458 __v19459 ⇒ LT_c1‹›
      end
    | String_c7 c1_v19460 s1_v19461 ⇒
      match s2_v19455 as __v19462 in order_d2 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v19463 s2_v19464 ⇒
        match (comparec_i19 c1_v19460 c2_v19463) as __v19465 in order_d2 with
        | EQ_c3  ⇒ (compares_i23 s1_v19461 s2_v19464)
        | LT_c1  ⇒ LT_c1‹› | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d6 ‹s_s19466, t_s19467›
  (A_v19468 : Type‹s_s19466›) : Type‹t_s19467›
=
| None_c8 of
    ‹s_s19469, t_s19470› (A_v19471 : Type‹s_s19469›)
    : (option_d6‹s_s19469, t_s19470› A_v19471)
| Some_c9 of
    ‹s_s19472, t_s19473› (A_v19474 : Type‹s_s19472›)
    (x_v19475 : A_v19474) : (option_d6‹s_s19472, t_s19473› A_v19474)

program and_then_i24 ‹s_s19476, r_s19477, t_s19478› :
  ∀ {A_v19479 : Type‹s_s19476›} →
    ∀ {B_v19480 : Type‹r_s19477›} →
      (option_d6‹s_s19476, t_s19478› A_v19479) →
        A_v19479 → (option_d6‹r_s19477, t_s19478› B_v19480) ⊸
          (option_d6‹r_s19477, t_s19478› B_v19480)
=
  fn {A_v19484 : Type‹s_s19476›} {B_v19485 : Type‹r_s19477›}
     (opt_v19486 : (option_d6‹s_s19476, t_s19478› A_v19484)) ⇒
    ln (f_v19487 : A_v19484 → (option_d6‹r_s19477, t_s19478› B_v19485)) ⇒
      match opt_v19486 as __v19489 in
        (option_d6‹r_s19477, t_s19478› B_v19485) with
      | None_c8  ⇒ None_c8‹r_s19477, t_s19478›
      | Some_c9 x_v19490 ⇒ (f_v19487 x_v19490)
      end

inductive list_d7 ‹s_s19491, t_s19492›
  (A_v19493 : Type‹s_s19491›) : Type‹t_s19492›
=
| nil_c10 of
    ‹s_s19494, t_s19495› (A_v19496 : Type‹s_s19494›)
    : (list_d7‹s_s19494, t_s19495› A_v19496)
| cons_c11 of
    ‹s_s19497, t_s19498› (A_v19499 : Type‹s_s19497›)
    (hd_v19500 : A_v19499)
    (tl_v19501 : (list_d7‹s_s19497, t_s19498› A_v19499))
    : (list_d7‹s_s19497, t_s19498› A_v19499)

program len_i25 ‹s_s19502, t_s19503› :
  ∀ {A_v19504 : Type‹s_s19502›} →
    (list_d7‹s_s19502, t_s19503› A_v19504) →
      nat ⊗ (list_d7‹s_s19502, t_s19503› A_v19504)
=
  fn {A_v19507 : Type‹s_s19502›}
     (xs_v19508 : (list_d7‹s_s19502, t_s19503› A_v19507)) ⇒
    match xs_v19508 as __v19509 in
      nat ⊗ (list_d7‹s_s19502, t_s19503› A_v19507) with
    | nil_c10  ⇒ ⟨0, nil_c10‹s_s19502, t_s19503›⟩
    | cons_c11 x_v19511 xs_v19512 ⇒
      match (len_i25‹s_s19502, t_s19503› A_v19507 xs_v19512) as __v19513 in
        nat ⊗ (list_d7‹s_s19502, t_s19503› A_v19507) with
      | ⟨n_v19515, xs_v19516⟩ ⇒
        ⟨n_v19515.+1, (cons_c11‹s_s19502, t_s19503› x_v19511 xs_v19516)⟩
      end
    end

program append_i26 ‹s_s19517, t_s19518› :
  ∀ {A_v19519 : Type‹s_s19517›} →
    (list_d7‹s_s19517, t_s19518› A_v19519) →
      (list_d7‹s_s19517, t_s19518› A_v19519) ⊸
        (list_d7‹s_s19517, t_s19518› A_v19519)
=
  fn {A_v19522 : Type‹s_s19517›}
     (xs_v19523 : (list_d7‹s_s19517, t_s19518› A_v19522)) ⇒
    ln (ys_v19524 : (list_d7‹s_s19517, t_s19518› A_v19522)) ⇒
      match xs_v19523 as __v19525 in
        (list_d7‹s_s19517, t_s19518› A_v19522) with
      | nil_c10  ⇒ ys_v19524
      | cons_c11 x_v19526 xs_v19527 ⇒
        (cons_c11‹s_s19517, t_s19518›
          x_v19526
          (append_i26‹s_s19517, t_s19518› A_v19522 xs_v19527 ys_v19524))
      end

logical stdin_rec_i27 : unit → proto =
  fn (__v19529 : unit) ⇒
    ⇑(b_v19530 : bool) ⇒
      match b_v19530 as __v19531 in proto with
      | true ⇒ ⇓(__v19532 : string_d5) ⇒ (stdin_rec_i27 ())
      | false ⇒ end
      end

logical stdout_rec_i28 : unit → proto =
  fn (__v19534 : unit) ⇒
    ⇑(b_v19535 : bool) ⇒
      match b_v19535 as __v19536 in proto with
      | true ⇒ ⇑(__v19537 : string_d5) ⇒ (stdout_rec_i28 ())
      | false ⇒ end
      end

logical stderr_rec_i29 : unit → proto =
  fn (__v19539 : unit) ⇒
    ⇑(b_v19540 : bool) ⇒
      match b_v19540 as __v19541 in proto with
      | true ⇒ ⇑(__v19542 : string_d5) ⇒ (stderr_rec_i29 ())
      | false ⇒ end
      end

logical stdin_t_i30 : proto = (stdin_rec_i27 ())

logical stdout_t_i31 : proto = (stdout_rec_i28 ())

logical stderr_t_i32 : proto = (stderr_rec_i29 ())

program readline_i33 : unit → IO string_d5 =
  fn (__v19544 : unit) ⇒
    let ch_v19545 ⇐ open stdin in
    let ch_v19546 ⇐ (send ch_v19545 true) in
    let __v19547 ⇐ recv ch_v19546 in
    match __v19547 as __v19548 in IO string_d5 with
    | ⟨s_v19549, ch_v19550⟩ ⇒
      let ch_v19551 ⇐ (send ch_v19550 false) in
      let __v19552 ⇐ close ch_v19551 in return s_v19549
    end

program print_i34 : string_d5 → IO unit =
  fn (s_v19554 : string_d5) ⇒
    let ch_v19555 ⇐ open stdout in
    let ch_v19556 ⇐ (send ch_v19555 true) in
    let ch_v19557 ⇐ (send ch_v19556 s_v19554) in
    let ch_v19558 ⇐ (send ch_v19557 false) in close ch_v19558

program prerr_i35 : string_d5 → IO unit =
  fn (s_v19560 : string_d5) ⇒
    let ch_v19561 ⇐ open stderr in
    let ch_v19562 ⇐ (send ch_v19561 true) in
    let ch_v19563 ⇐ (send ch_v19562 s_v19560) in
    let ch_v19564 ⇐ (send ch_v19563 false) in close ch_v19564

program digits_i36 : (list_d7‹U, U› string_d5) =
  (cons_c11‹U, U›
    "0"
    (cons_c11‹U, U›
      "1"
      (cons_c11‹U, U›
        "2"
        (cons_c11‹U, U›
          "3"
          (cons_c11‹U, U›
            "4"
            (cons_c11‹U, U›
              "5"
              (cons_c11‹U, U›
                "6"
                (cons_c11‹U, U›
                  "7"
                  (cons_c11‹U, U›
                    "8" (cons_c11‹U, U› "9" nil_c10‹U, U›))))))))))

program get_at_i37 :
  ∀ {A_v19565 : U} →
    nat → (list_d7‹U, U› A_v19565) → A_v19565 → A_v19565
=
  fn {A_v19569 : U} (n_v19570 : nat)
     (xs_v19571 : (list_d7‹U, U› A_v19569)) (a_v19572 : A_v19569) ⇒
    match n_v19570 as __v19573 in A_v19569 with
    | O ⇒
      match xs_v19571 as __v19574 in A_v19569 with
      | nil_c10  ⇒ a_v19572 | cons_c11 x_v19575 __v19576 ⇒ x_v19575
      end
    | S n_v19577 ⇒
      match xs_v19571 as __v19578 in A_v19569 with
      | nil_c10  ⇒ a_v19572
      | cons_c11 __v19579 xs_v19580 ⇒
        (get_at_i37 A_v19569 n_v19577 xs_v19580 a_v19572)
      end
    end

program string_of_digit_i38 : nat → string_d5 =
  fn (n_v19582 : nat) ⇒
    (get_at_i37 string_d5 n_v19582 digits_i36 EmptyString_c6‹›)

program string_of_nat_i39 : nat → string_d5 =
  fn (n_v19584 : nat) ⇒
    let s_v19585 = (string_of_digit_i38 (modn_i17 n_v19584 10)) in
    let n_v19586 = (divn_i16 n_v19584 10) in
    match (ltn_i8 0 n_v19586) as __v19587 in string_d5 with
    | true ⇒ (cats_i20 (string_of_nat_i39 n_v19586) s_v19585)
    | false ⇒ s_v19585
    end

program digit_of_char_i40 : char_d4 → (option_d6‹U, L› nat) =
  fn (c_v19589 : char_d4) ⇒
    match (eqc_i18 c_v19589 '0') as __v19590 in
      (option_d6‹U, L› nat) with
    | true ⇒ (Some_c9‹U, L› 0)
    | false ⇒
      match (eqc_i18 c_v19589 '1') as __v19591 in
        (option_d6‹U, L› nat) with
      | true ⇒ (Some_c9‹U, L› 1)
      | false ⇒
        match (eqc_i18 c_v19589 '2') as __v19592 in
          (option_d6‹U, L› nat) with
        | true ⇒ (Some_c9‹U, L› 2)
        | false ⇒
          match (eqc_i18 c_v19589 '3') as __v19593 in
            (option_d6‹U, L› nat) with
          | true ⇒ (Some_c9‹U, L› 3)
          | false ⇒
            match (eqc_i18 c_v19589 '4') as __v19594 in
              (option_d6‹U, L› nat) with
            | true ⇒ (Some_c9‹U, L› 4)
            | false ⇒
              match (eqc_i18 c_v19589 '5') as __v19595 in
                (option_d6‹U, L› nat) with
              | true ⇒ (Some_c9‹U, L› 5)
              | false ⇒
                match (eqc_i18 c_v19589 '6') as __v19596 in
                  (option_d6‹U, L› nat) with
                | true ⇒ (Some_c9‹U, L› 6)
                | false ⇒
                  match (eqc_i18 c_v19589 '7') as __v19597 in
                    (option_d6‹U, L› nat) with
                  | true ⇒ (Some_c9‹U, L› 7)
                  | false ⇒
                    match (eqc_i18 c_v19589 '8') as __v19598 in
                      (option_d6‹U, L› nat) with
                    | true ⇒ (Some_c9‹U, L› 8)
                    | false ⇒
                      match (eqc_i18 c_v19589 '9') as __v19599 in
                        (option_d6‹U, L› nat) with
                      | true ⇒ (Some_c9‹U, L› 9)
                      | false ⇒ None_c8‹U, L›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i41 :
  string_d5 → nat → (option_d6‹U, L› nat)
=
  fn (s_v19602 : string_d5) (acc_v19603 : nat) ⇒
    match s_v19602 as __v19604 in (option_d6‹U, L› nat) with
    | EmptyString_c6  ⇒ (Some_c9‹U, L› acc_v19603)
    | String_c7 c_v19605 s_v19606 ⇒
      match (digit_of_char_i40 c_v19605) as __v19607 in
        (option_d6‹U, L› nat) with
      | None_c8  ⇒ None_c8‹U, L›
      | Some_c9 n_v19608 ⇒
        (nat_of_string_loop_i41
          s_v19606 (addn_i13 (muln_i15 acc_v19603 10) n_v19608))
      end
    end

program nat_of_string_i42 : string_d5 → (option_d6‹U, L› nat) =
  fn (s_v19610 : string_d5) ⇒ (nat_of_string_loop_i41 s_v19610 0)

inductive List_d8 ‹s_s19611, t_s19612›
  (A_v19613 : Type‹s_s19611›) : Type‹t_s19612›
=
| Nil_c12 of
    ‹s_s19614, t_s19615› (A_v19616 : Type‹s_s19614›)
    : (List_d8‹s_s19614, t_s19615› A_v19616)
| Cons_c13 of
    ‹s_s19617, t_s19618› (A_v19619 : Type‹s_s19617›)
    (hd_v19620 : A_v19619)
    (tl_v19621 : (List_d8‹s_s19617, t_s19618› A_v19619))
    : (List_d8‹s_s19617, t_s19618› A_v19619)

logical len_i43 ‹s_s19622, t_s19623› :
  ∀ {A_v19624 : Type‹s_s19622›} →
    (List_d8‹s_s19622, t_s19623› A_v19624) → nat
=
  fn {A_v19626 : Type‹s_s19622›}
     (xs_v19627 : (List_d8‹s_s19622, t_s19623› A_v19626)) ⇒
    match xs_v19627 as __v19628 in nat with
    | Nil_c12  ⇒ 0
    | Cons_c13 hd_v19629 tl_v19630 ⇒
      (addn_i13 1 (len_i43‹s_s19622, t_s19623› A_v19626 tl_v19630))
    end

program append_i44 ‹s_s19631, t_s19632› :
  ∀ {A_v19633 : Type‹s_s19631›} →
    (List_d8‹s_s19631, t_s19632› A_v19633) →
      (List_d8‹s_s19631, t_s19632› A_v19633) ⊸
        (List_d8‹s_s19631, t_s19632› A_v19633)
=
  fn {A_v19636 : Type‹s_s19631›}
     (xs_v19637 : (List_d8‹s_s19631, t_s19632› A_v19636)) ⇒
    ln (ys_v19638 : (List_d8‹s_s19631, t_s19632› A_v19636)) ⇒
      match xs_v19637 as __v19639 in
        (List_d8‹s_s19631, t_s19632› A_v19636) with
      | Nil_c12  ⇒ ys_v19638
      | Cons_c13 x_v19640 xs_v19641 ⇒
        (Cons_c13‹s_s19631, t_s19632›
          x_v19640
          (append_i44‹s_s19631, t_s19632› A_v19636 xs_v19641 ys_v19638))
      end

logical append_len_i45 ‹s_s19642, t_s19643› :
  ∀ (A_v19644 : Type‹s_s19642›) →
    ∀ (xs_v19645 : (List_d8‹s_s19642, t_s19643› A_v19644)) →
      ∀ (ys_v19646 : (List_d8‹s_s19642, t_s19643› A_v19644)) →
        (len_i43‹s_s19642, t_s19643›
          A_v19644
          (append_i44‹s_s19642, t_s19643› A_v19644 xs_v19645 ys_v19646)) ≡
          (addn_i13
            (len_i43‹s_s19642, t_s19643› A_v19644 xs_v19645)
            (len_i43‹s_s19642, t_s19643› A_v19644 ys_v19646))
=
  fn (A_v19647 : Type‹s_s19642›)
     (xs_v19648 : (List_d8‹s_s19642, t_s19643› A_v19647))
     (ys_v19649 : (List_d8‹s_s19642, t_s19643› A_v19647)) ⇒
    match xs_v19648 as xs0_v19650 in
      (len_i43‹s_s19642, t_s19643›
        A_v19647
        (append_i44‹s_s19642, t_s19643› A_v19647 xs0_v19650 ys_v19649)) ≡
        (addn_i13
          (len_i43‹s_s19642, t_s19643› A_v19647 xs0_v19650)
          (len_i43‹s_s19642, t_s19643› A_v19647 ys_v19649)) with
    | Nil_c12  ⇒
      refl (addn_i13
             (len_i43‹s_s19642, t_s19643›
               A_v19647 Nil_c12‹s_s19642, t_s19643›)
             (len_i43‹s_s19642, t_s19643› A_v19647 ys_v19649))
    | Cons_c13 x_v19651 xs0_v19652 ⇒
      rew [n_v19653, __v19654 ⇒
        (len_i43‹s_s19642, t_s19643›
          A_v19647
          (append_i44‹s_s19642, t_s19643› A_v19647 xs0_v19652 ys_v19649)).+1 ≡
          n_v19653.+1]
        (append_len_i45‹s_s19642, t_s19643›
          A_v19647 xs0_v19652 ys_v19649) in
      refl (len_i43‹s_s19642, t_s19643›
             A_v19647
             (append_i44‹s_s19642, t_s19643›
               A_v19647 xs0_v19652 ys_v19649)).+1
    end

logical list_i46 ‹s_s19655› : {Type‹s_s19655›} → U =
  fn {A_v19657 : Type‹s_s19655›} ⇒ (List_d8‹s_s19655, U› A_v19657)

program ls0_i47 : (list_i46‹U› nat) =
  (Cons_c13‹U, U› 0 Nil_c12‹U, U›)

program ls1_i48 : (list_i46‹U› nat) =
  (Cons_c13‹U, U› 0 Nil_c12‹U, U›)

program ls2_i49 : (List_d8‹U, U› nat) =
  (append_i44‹U, U› nat ls0_i47 ls1_i48)

program id_i50 ‹s_s19658› :
  ∀ {A_v19659 : Type‹s_s19658›} → A_v19659 → A_v19659
= fn {A_v19661 : Type‹s_s19658›} (x_v19662 : A_v19661) ⇒ x_v19662

program main_i51 : IO unit =
  let s_v19663 ⇐ (readline_i33 ()) in
  (id_i50‹L› IO unit (print_i34 (id_i50‹U› string_d5 s_v19663)))

trans1e success--------------------------

data order_d2 =
| LT_c1 of size(0) | GT_c2 of size(0) | EQ_c3 of size(0)

def andb_i2 =
  fn b1_v20285 b2_v20286 ⇒
    match b1_v20285 with
    | true ⇒ b2_v20286 | false ⇒ false
    end

def orb_i3 =
  fn b1_v20287 b2_v20288 ⇒
    match b1_v20287 with
    | true ⇒ true | false ⇒ b2_v20288
    end

def notb_i4 =
  fn b_v20289 ⇒ match b_v20289 with
                  | true ⇒ false | false ⇒ true
                  end

def compareb_i5 =
  fn b1_v20290 b2_v20291 ⇒
    match b1_v20290 with
    | true ⇒ match b2_v20291 with
               | true ⇒ EQ_c3 | false ⇒ GT_c2
               end
    | false ⇒ match b2_v20291 with
                | true ⇒ LT_c1 | false ⇒ EQ_c3
                end
    end

def lten_i6 =
  fn x_v20292 y_v20293 ⇒
    match x_v20292 with
    | O ⇒ true
    | S x_v20294 ⇒
      match y_v20293 with
      | O ⇒ false | S y_v20295 ⇒ ((lten_i6 x_v20294) y_v20295)
      end
    end

def gten_i7 =
  fn x_v20296 y_v20297 ⇒
    match x_v20296 with
    | O ⇒ match y_v20297 with
            | O ⇒ true | S __v20298 ⇒ false
            end
    | S x_v20299 ⇒
      match y_v20297 with
      | O ⇒ true | S y_v20300 ⇒ ((gten_i7 x_v20299) y_v20300)
      end
    end

def ltn_i8 =
  fn x_v20301 y_v20302 ⇒
    match x_v20301 with
    | O ⇒ match y_v20302 with
            | O ⇒ false | S y_v20303 ⇒ true
            end
    | S x_v20304 ⇒
      match y_v20302 with
      | O ⇒ false | S y_v20305 ⇒ ((ltn_i8 x_v20304) y_v20305)
      end
    end

def gtn_i9 =
  fn x_v20306 y_v20307 ⇒
    match x_v20306 with
    | O ⇒ false
    | S x_v20308 ⇒
      match y_v20307 with
      | O ⇒ true | S y_v20309 ⇒ ((gtn_i9 x_v20308) y_v20309)
      end
    end

def eqn_i10 =
  fn x_v20310 y_v20311 ⇒
    match x_v20310 with
    | O ⇒ match y_v20311 with
            | O ⇒ true | S __v20312 ⇒ false
            end
    | S x_v20313 ⇒
      match y_v20311 with
      | O ⇒ false | S y_v20314 ⇒ ((eqn_i10 x_v20313) y_v20314)
      end
    end

def comparen_i11 =
  fn n1_v20315 n2_v20316 ⇒
    match n1_v20315 with
    | O ⇒ match n2_v20316 with
            | O ⇒ EQ_c3 | S __v20317 ⇒ LT_c1
            end
    | S n1_v20318 ⇒
      match n2_v20316 with
      | O ⇒ GT_c2 | S n2_v20319 ⇒ ((comparen_i11 n1_v20318) n2_v20319)
      end
    end

def pred_i12 =
  fn x_v20320 ⇒ match x_v20320 with
                  | O ⇒ 0 | S x_v20321 ⇒ x_v20321
                  end

def addn_i13 =
  fn x_v20322 y_v20323 ⇒
    match x_v20322 with
    | O ⇒ y_v20323 | S x_v20324 ⇒ ((addn_i13 x_v20324) y_v20323).+1
    end

def subn_i14 =
  fn x_v20325 y_v20326 ⇒
    match y_v20326 with
    | O ⇒ x_v20325
    | S y_v20327 ⇒ ((subn_i14 (pred_i12 x_v20325)) y_v20327)
    end

def muln_i15 =
  fn x_v20328 y_v20329 ⇒
    match x_v20328 with
    | O ⇒ 0
    | S x_v20330 ⇒ ((addn_i13 y_v20329) ((muln_i15 x_v20330) y_v20329))
    end

def divn_i16 =
  fn x_v20331 y_v20332 ⇒
    match ((ltn_i8 x_v20331) y_v20332) with
    | true ⇒ 0
    | false ⇒ ((divn_i16 ((subn_i14 x_v20331) y_v20332)) y_v20332).+1
    end

def modn_i17 =
  fn x_v20333 y_v20334 ⇒
    ((subn_i14 x_v20333)
      ((muln_i15 ((divn_i16 x_v20333) y_v20334)) y_v20334))

data between_d3 =
| Between_c4 of size(3)

data char_d4 =
| Char_c5 of size(1)

def eqc_i18 =
  fn c1_v20335 c2_v20336 ⇒
    match c1_v20335 with
    | Char_c5 n1_v20337 ⇒
      match c2_v20336 with
      | Char_c5 n2_v20338 ⇒ ((eqn_i10 n1_v20337) n2_v20338)
      end
    end

def comparec_i19 =
  fn c1_v20339 c2_v20340 ⇒
    match c1_v20339 with
    | Char_c5 n1_v20341 ⇒
      match c2_v20340 with
      | Char_c5 n2_v20342 ⇒ ((comparen_i11 n1_v20341) n2_v20342)
      end
    end

data string_d5 =
| EmptyString_c6 of size(0) | String_c7 of size(2)

def cats_i20 =
  fn s1_v20343 s2_v20344 ⇒
    match s1_v20343 with
    | EmptyString_c6  ⇒ s2_v20344
    | String_c7 c_v20345 s1_v20346 ⇒
      (String_c7 c_v20345 ((cats_i20 s1_v20346) s2_v20344))
    end

def strlen_i21 =
  fn s_v20347 ⇒
    match s_v20347 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v20348 s_v20349 ⇒ (strlen_i21 s_v20349).+1
    end

def eqs_i22 =
  fn s1_v20350 s2_v20351 ⇒
    match s1_v20350 with
    | EmptyString_c6  ⇒
      match s2_v20351 with
      | EmptyString_c6  ⇒ true | String_c7 __v20352 __v20353 ⇒ false
      end
    | String_c7 c1_v20354 s1_v20355 ⇒
      match s2_v20351 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v20356 s2_v20357 ⇒
        ((andb_i2 ((eqc_i18 c1_v20354) c2_v20356))
          ((eqs_i22 s1_v20355) s2_v20357))
      end
    end

def compares_i23 =
  fn s1_v20358 s2_v20359 ⇒
    match s1_v20358 with
    | EmptyString_c6  ⇒
      match s2_v20359 with
      | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v20360 __v20361 ⇒ LT_c1
      end
    | String_c7 c1_v20362 s1_v20363 ⇒
      match s2_v20359 with
      | EmptyString_c6  ⇒ GT_c2
      | String_c7 c2_v20364 s2_v20365 ⇒
        match ((comparec_i19 c1_v20362) c2_v20364) with
        | EQ_c3  ⇒ ((compares_i23 s1_v20363) s2_v20365) | LT_c1  ⇒ LT_c1
        | GT_c2  ⇒ GT_c2
        end
      end
    end

data optionUU_d12 =
| NoneUU_c20 of size(0) | SomeUU_c21 of size(1)

data optionUL_d11 =
| NoneUL_c18 of size(0) | SomeUL_c19 of size(1)

data optionLU_d10 =
| NoneLU_c16 of size(0)

data optionLL_d9 =
| NoneLL_c14 of size(0) | SomeLL_c15 of size(1)

def and_thenUUU_i61 =
  fn A_v20366 B_v20367 opt_v20368 ⇒
    ln f_v20369 ⇒
      match opt_v20368 with
      | NoneUU_c20  ⇒ NoneUU_c20
      | SomeUU_c21 x_v20370 ⇒ (f_v20369 x_v20370)
      end

def and_thenUUL_i60 =
  fn A_v20371 B_v20372 opt_v20373 ⇒
    ln f_v20374 ⇒
      match opt_v20373 with
      | NoneUL_c18  ⇒ NoneUL_c18
      | SomeUL_c19 x_v20375 ⇒ (f_v20374 x_v20375)
      end

def and_thenULU_i59 =
  fn A_v20376 B_v20377 opt_v20378 ⇒
    ln f_v20379 ⇒
      match opt_v20378 with
      | NoneUU_c20  ⇒ NoneLU_c16
      | SomeUU_c21 x_v20380 ⇒ (f_v20379 x_v20380)
      end

def and_thenULL_i58 =
  fn A_v20381 B_v20382 opt_v20383 ⇒
    ln f_v20384 ⇒
      match opt_v20383 with
      | NoneUL_c18  ⇒ NoneLL_c14
      | SomeUL_c19 x_v20385 ⇒ (f_v20384 x_v20385)
      end

def and_thenLUL_i56 =
  fn A_v20386 B_v20387 opt_v20388 ⇒
    ln f_v20389 ⇒
      match opt_v20388 with
      | NoneLL_c14  ⇒ NoneUL_c18
      | SomeLL_c15 x_v20390 ⇒ (f_v20389 x_v20390)
      end

def and_thenLLL_i54 =
  fn A_v20391 B_v20392 opt_v20393 ⇒
    ln f_v20394 ⇒
      match opt_v20393 with
      | NoneLL_c14  ⇒ NoneLL_c14
      | SomeLL_c15 x_v20395 ⇒ (f_v20394 x_v20395)
      end

data listUU_d16 =
| nilUU_c28 of size(0) | consUU_c29 of size(2)

data listUL_d15 =
| nilUL_c26 of size(0) | consUL_c27 of size(2)

data listLU_d14 =
| nilLU_c24 of size(0)

data listLL_d13 =
| nilLL_c22 of size(0) | consLL_c23 of size(2)

def lenUU_i65 =
  fn A_v20396 xs_v20397 ⇒
    match xs_v20397 with
    | nilUU_c28  ⇒ (0, nilUU_c28)
    | consUU_c29 x_v20398 xs_v20399 ⇒
      match ((lenUU_i65 NULL) xs_v20399) with
      | (n_v20400, xs_v20401) ⇒
        (n_v20400.+1, (consUU_c29 x_v20398 xs_v20401))
      end
    end

def lenUL_i64 =
  fn A_v20402 xs_v20403 ⇒
    match xs_v20403 with
    | nilUL_c26  ⇒ (0, nilUL_c26)
    | consUL_c27 x_v20404 xs_v20405 ⇒
      match ((lenUL_i64 NULL) xs_v20405) with
      | (n_v20406, xs_v20407) ⇒
        (n_v20406.+1, (consUL_c27 x_v20404 xs_v20407))
      end
    end

def lenLL_i62 =
  fn A_v20408 xs_v20409 ⇒
    match xs_v20409 with
    | nilLL_c22  ⇒ (0, nilLL_c22)
    | consLL_c23 x_v20410 xs_v20411 ⇒
      match ((lenLL_i62 NULL) xs_v20411) with
      | (n_v20412, xs_v20413) ⇒
        (n_v20412.+1, (consLL_c23 x_v20410 xs_v20413))
      end
    end

def appendUU_i69 =
  fn A_v20414 xs_v20415 ⇒
    ln ys_v20416 ⇒
      match xs_v20415 with
      | nilUU_c28  ⇒ ys_v20416
      | consUU_c29 x_v20417 xs_v20418 ⇒
        (consUU_c29 x_v20417 (((appendUU_i69 NULL) xs_v20418) ys_v20416))
      end

def appendUL_i68 =
  fn A_v20419 xs_v20420 ⇒
    ln ys_v20421 ⇒
      match xs_v20420 with
      | nilUL_c26  ⇒ ys_v20421
      | consUL_c27 x_v20422 xs_v20423 ⇒
        (consUL_c27 x_v20422 (((appendUL_i68 NULL) xs_v20423) ys_v20421))
      end

def appendLL_i66 =
  fn A_v20424 xs_v20425 ⇒
    ln ys_v20426 ⇒
      match xs_v20425 with
      | nilLL_c22  ⇒ ys_v20426
      | consLL_c23 x_v20427 xs_v20428 ⇒
        (consLL_c23 x_v20427 (((appendLL_i66 NULL) xs_v20428) ys_v20426))
      end

def readline_i33 =
  fn __v20429 ⇒
    let ch_v20430 ⇐ open stdin in
    let ch_v20431 ⇐ (send ch_v20430 true) in
    let __v20432 ⇐ recv ch_v20431 in
    match __v20432 with
    | (s_v20433, ch_v20434) ⇒
      let ch_v20435 ⇐ (send ch_v20434 false) in
      let __v20436 ⇐ close⇑ ch_v20435 in return s_v20433
    end

def print_i34 =
  fn s_v20437 ⇒
    let ch_v20438 ⇐ open stdout in
    let ch_v20439 ⇐ (send ch_v20438 true) in
    let ch_v20440 ⇐ (send ch_v20439 s_v20437) in
    let ch_v20441 ⇐ (send ch_v20440 false) in close⇑ ch_v20441

def prerr_i35 =
  fn s_v20442 ⇒
    let ch_v20443 ⇐ open stderr in
    let ch_v20444 ⇐ (send ch_v20443 true) in
    let ch_v20445 ⇐ (send ch_v20444 s_v20442) in
    let ch_v20446 ⇐ (send ch_v20445 false) in close⇑ ch_v20446

def digits_i36 =
  (consUU_c29
    "0"
    (consUU_c29
      "1"
      (consUU_c29
        "2"
        (consUU_c29
          "3"
          (consUU_c29
            "4"
            (consUU_c29
              "5"
              (consUU_c29
                "6"
                (consUU_c29 "7" (consUU_c29 "8" (consUU_c29 "9" nilUU_c28))))))))))

def get_at_i37 =
  fn A_v20447 n_v20448 xs_v20449 a_v20450 ⇒
    match n_v20448 with
    | O ⇒
      match xs_v20449 with
      | nilUU_c28  ⇒ a_v20450 | consUU_c29 x_v20451 __v20452 ⇒ x_v20451
      end
    | S n_v20453 ⇒
      match xs_v20449 with
      | nilUU_c28  ⇒ a_v20450
      | consUU_c29 __v20454 xs_v20455 ⇒
        ((((get_at_i37 NULL) n_v20453) xs_v20455) a_v20450)
      end
    end

def string_of_digit_i38 =
  fn n_v20456 ⇒ ((((get_at_i37 NULL) n_v20456) digits_i36) EmptyString_c6)

def string_of_nat_i39 =
  fn n_v20457 ⇒
    let s_v20458 = (string_of_digit_i38 ((modn_i17 n_v20457) 10)) in
    let n_v20459 = ((divn_i16 n_v20457) 10) in
    match ((ltn_i8 0) n_v20459) with
    | true ⇒ ((cats_i20 (string_of_nat_i39 n_v20459)) s_v20458)
    | false ⇒ s_v20458
    end

def digit_of_char_i40 =
  fn c_v20460 ⇒
    match ((eqc_i18 c_v20460) '0') with
    | true ⇒ (SomeUL_c19 0)
    | false ⇒
      match ((eqc_i18 c_v20460) '1') with
      | true ⇒ (SomeUL_c19 1)
      | false ⇒
        match ((eqc_i18 c_v20460) '2') with
        | true ⇒ (SomeUL_c19 2)
        | false ⇒
          match ((eqc_i18 c_v20460) '3') with
          | true ⇒ (SomeUL_c19 3)
          | false ⇒
            match ((eqc_i18 c_v20460) '4') with
            | true ⇒ (SomeUL_c19 4)
            | false ⇒
              match ((eqc_i18 c_v20460) '5') with
              | true ⇒ (SomeUL_c19 5)
              | false ⇒
                match ((eqc_i18 c_v20460) '6') with
                | true ⇒ (SomeUL_c19 6)
                | false ⇒
                  match ((eqc_i18 c_v20460) '7') with
                  | true ⇒ (SomeUL_c19 7)
                  | false ⇒
                    match ((eqc_i18 c_v20460) '8') with
                    | true ⇒ (SomeUL_c19 8)
                    | false ⇒
                      match ((eqc_i18 c_v20460) '9') with
                      | true ⇒ (SomeUL_c19 9) | false ⇒ NoneUL_c18
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

def nat_of_string_loop_i41 =
  fn s_v20461 acc_v20462 ⇒
    match s_v20461 with
    | EmptyString_c6  ⇒ (SomeUL_c19 acc_v20462)
    | String_c7 c_v20463 s_v20464 ⇒
      match (digit_of_char_i40 c_v20463) with
      | NoneUL_c18  ⇒ NoneUL_c18
      | SomeUL_c19 n_v20465 ⇒
        ((nat_of_string_loop_i41 s_v20464)
          ((addn_i13 ((muln_i15 acc_v20462) 10)) n_v20465))
      end
    end

def nat_of_string_i42 = fn s_v20466 ⇒ ((nat_of_string_loop_i41 s_v20466) 0)

data ListUU_d20 =
| NilUU_c36 of size(0) | ConsUU_c37 of size(2)

data ListUL_d19 =
| NilUL_c34 of size(0) | ConsUL_c35 of size(2)

data ListLU_d18 =
| NilLU_c32 of size(0)

data ListLL_d17 =
| NilLL_c30 of size(0) | ConsLL_c31 of size(2)

def appendUU_i77 =
  fn A_v20467 xs_v20468 ⇒
    ln ys_v20469 ⇒
      match xs_v20468 with
      | NilUU_c36  ⇒ ys_v20469
      | ConsUU_c37 x_v20470 xs_v20471 ⇒
        (ConsUU_c37 x_v20470 (((appendUU_i77 NULL) xs_v20471) ys_v20469))
      end

def appendUL_i76 =
  fn A_v20472 xs_v20473 ⇒
    ln ys_v20474 ⇒
      match xs_v20473 with
      | NilUL_c34  ⇒ ys_v20474
      | ConsUL_c35 x_v20475 xs_v20476 ⇒
        (ConsUL_c35 x_v20475 (((appendUL_i76 NULL) xs_v20476) ys_v20474))
      end

def appendLL_i74 =
  fn A_v20477 xs_v20478 ⇒
    ln ys_v20479 ⇒
      match xs_v20478 with
      | NilLL_c30  ⇒ ys_v20479
      | ConsLL_c31 x_v20480 xs_v20481 ⇒
        (ConsLL_c31 x_v20480 (((appendLL_i74 NULL) xs_v20481) ys_v20479))
      end

def ls0_i47 = (ConsUU_c37 0 NilUU_c36)

def ls1_i48 = (ConsUU_c37 0 NilUU_c36)

def ls2_i49 = (((appendUU_i77 NULL) ls0_i47) ls1_i48)

def idU_i85 = fn A_v20482 x_v20483 ⇒ x_v20483

def idL_i84 = fn A_v20484 x_v20485 ⇒ x_v20485

main =
  let s_v20486 ⇐ (readline_i33 ()) in
  ((idL_i84 NULL) (print_i34 ((idU_i85 NULL) s_v20486)))

trans12 success--------------------------

fun andb_i2(b1_v20739, b2_v20740) = if b1_v20739 then
                                      b2_v20740
                                    else
                                      0

val andbclo_i86 = fn b1_v20741 b2_v20742 ⇒ andb_i2(b1_v20741, b2_v20742)

fun orb_i3(b1_v20743, b2_v20744) = if b1_v20743 then
                                     1
                                   else
                                     b2_v20744

val orbclo_i87 = fn b1_v20745 b2_v20746 ⇒ orb_i3(b1_v20745, b2_v20746)

fun notb_i4(b_v20747) = if b_v20747 then
                          0
                        else
                          1

val notbclo_i88 = fn b_v20748 ⇒ notb_i4(b_v20748)

fun compareb_i5(b1_v20749, b2_v20750) =
  if b1_v20749 then
    if b2_v20750 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v20750 then
      LT_c1
    else
      EQ_c3

val comparebclo_i89 =
  fn b1_v20751 b2_v20752 ⇒ compareb_i5(b1_v20751, b2_v20752)

fun lten_i6(x_v20753, y_v20754) =
  let __v20755 = x_v20753 in
  if __v20755 then
    let x_v20756 = __v20755.-1 in
    let __v20757 = y_v20754 in
    if __v20757 then
      let y_v20758 = __v20757.-1 in lten_i6(x_v20756, y_v20758)
    else
      0
  else
    1

val ltenclo_i90 = fn x_v20759 y_v20760 ⇒ lten_i6(x_v20759, y_v20760)

fun gten_i7(x_v20761, y_v20762) =
  let __v20763 = x_v20761 in
  if __v20763 then
    let x_v20764 = __v20763.-1 in
    let __v20765 = y_v20762 in
    if __v20765 then
      let y_v20766 = __v20765.-1 in gten_i7(x_v20764, y_v20766)
    else
      1
  else
    let __v20767 = y_v20762 in
    if __v20767 then
      let __v20768 = __v20767.-1 in 0
    else
      1

val gtenclo_i91 = fn x_v20769 y_v20770 ⇒ gten_i7(x_v20769, y_v20770)

fun ltn_i8(x_v20771, y_v20772) =
  let __v20773 = x_v20771 in
  if __v20773 then
    let x_v20774 = __v20773.-1 in
    let __v20775 = y_v20772 in
    if __v20775 then
      let y_v20776 = __v20775.-1 in ltn_i8(x_v20774, y_v20776)
    else
      0
  else
    let __v20777 = y_v20772 in
    if __v20777 then
      let y_v20778 = __v20777.-1 in 1
    else
      0

val ltnclo_i92 = fn x_v20779 y_v20780 ⇒ ltn_i8(x_v20779, y_v20780)

fun gtn_i9(x_v20781, y_v20782) =
  let __v20783 = x_v20781 in
  if __v20783 then
    let x_v20784 = __v20783.-1 in
    let __v20785 = y_v20782 in
    if __v20785 then
      let y_v20786 = __v20785.-1 in gtn_i9(x_v20784, y_v20786)
    else
      1
  else
    0

val gtnclo_i93 = fn x_v20787 y_v20788 ⇒ gtn_i9(x_v20787, y_v20788)

fun eqn_i10(x_v20789, y_v20790) =
  let __v20791 = x_v20789 in
  if __v20791 then
    let x_v20792 = __v20791.-1 in
    let __v20793 = y_v20790 in
    if __v20793 then
      let y_v20794 = __v20793.-1 in eqn_i10(x_v20792, y_v20794)
    else
      0
  else
    let __v20795 = y_v20790 in
    if __v20795 then
      let __v20796 = __v20795.-1 in 0
    else
      1

val eqnclo_i94 = fn x_v20797 y_v20798 ⇒ eqn_i10(x_v20797, y_v20798)

fun comparen_i11(n1_v20799, n2_v20800) =
  let __v20801 = n1_v20799 in
  if __v20801 then
    let n1_v20802 = __v20801.-1 in
    let __v20803 = n2_v20800 in
    if __v20803 then
      let n2_v20804 = __v20803.-1 in comparen_i11(n1_v20802, n2_v20804)
    else
      GT_c2
  else
    let __v20805 = n2_v20800 in
    if __v20805 then
      let __v20806 = __v20805.-1 in LT_c1
    else
      EQ_c3

val comparenclo_i95 =
  fn n1_v20807 n2_v20808 ⇒ comparen_i11(n1_v20807, n2_v20808)

fun pred_i12(x_v20809) =
  let __v20810 = x_v20809 in
  if __v20810 then
    let x_v20811 = __v20810.-1 in x_v20811
  else
    0

val predclo_i96 = fn x_v20812 ⇒ pred_i12(x_v20812)

fun addn_i13(x_v20813, y_v20814) =
  let __v20815 = x_v20813 in
  if __v20815 then
    let x_v20816 = __v20815.-1 in addn_i13(x_v20816, y_v20814).+1
  else
    y_v20814

val addnclo_i97 = fn x_v20817 y_v20818 ⇒ addn_i13(x_v20817, y_v20818)

fun subn_i14(x_v20819, y_v20820) =
  let __v20821 = y_v20820 in
  if __v20821 then
    let y_v20822 = __v20821.-1 in subn_i14(pred_i12(x_v20819), y_v20822)
  else
    x_v20819

val subnclo_i98 = fn x_v20823 y_v20824 ⇒ subn_i14(x_v20823, y_v20824)

fun muln_i15(x_v20825, y_v20826) =
  let __v20827 = x_v20825 in
  if __v20827 then
    let x_v20828 = __v20827.-1 in
    addn_i13(y_v20826, muln_i15(x_v20828, y_v20826))
  else
    0

val mulnclo_i99 = fn x_v20829 y_v20830 ⇒ muln_i15(x_v20829, y_v20830)

fun divn_i16(x_v20831, y_v20832) =
  if ltn_i8(x_v20831, y_v20832) then
    0
  else
    divn_i16(subn_i14(x_v20831, y_v20832), y_v20832).+1

val divnclo_i100 = fn x_v20833 y_v20834 ⇒ divn_i16(x_v20833, y_v20834)

fun modn_i17(x_v20835, y_v20836) =
  subn_i14(x_v20835, muln_i15(divn_i16(x_v20835, y_v20836), y_v20836))

val modnclo_i101 = fn x_v20837 y_v20838 ⇒ modn_i17(x_v20837, y_v20838)

fun eqc_i18(c1_v20839, c2_v20840) =
  match c1_v20839 with
  | Char_c5 n1_v20841 ⇒
    match c2_v20840 with
    | Char_c5 n2_v20842 ⇒ eqn_i10(n1_v20841, n2_v20842)
    end
  end

val eqcclo_i102 = fn c1_v20843 c2_v20844 ⇒ eqc_i18(c1_v20843, c2_v20844)

fun comparec_i19(c1_v20845, c2_v20846) =
  match c1_v20845 with
  | Char_c5 n1_v20847 ⇒
    match c2_v20846 with
    | Char_c5 n2_v20848 ⇒ comparen_i11(n1_v20847, n2_v20848)
    end
  end

val comparecclo_i103 =
  fn c1_v20849 c2_v20850 ⇒ comparec_i19(c1_v20849, c2_v20850)

fun cats_i20(s1_v20851, s2_v20852) =
  match s1_v20851 with
  | EmptyString_c6  ⇒ s2_v20852
  | String_c7 c_v20853 s1_v20854 ⇒
    (String_c7 c_v20853 cats_i20(s1_v20854, s2_v20852))
  end

val catsclo_i104 = fn s1_v20855 s2_v20856 ⇒ cats_i20(s1_v20855, s2_v20856)

fun strlen_i21(s_v20857) =
  match s_v20857 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v20858 s_v20859 ⇒ strlen_i21(s_v20859).+1
  end

val strlenclo_i105 = fn s_v20860 ⇒ strlen_i21(s_v20860)

fun eqs_i22(s1_v20861, s2_v20862) =
  match s1_v20861 with
  | EmptyString_c6  ⇒
    match s2_v20862 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v20863 __v20864 ⇒ 0
    end
  | String_c7 c1_v20865 s1_v20866 ⇒
    match s2_v20862 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v20867 s2_v20868 ⇒
      andb_i2(eqc_i18(c1_v20865, c2_v20867), eqs_i22(s1_v20866, s2_v20868))
    end
  end

val eqsclo_i106 = fn s1_v20869 s2_v20870 ⇒ eqs_i22(s1_v20869, s2_v20870)

fun compares_i23(s1_v20871, s2_v20872) =
  match s1_v20871 with
  | EmptyString_c6  ⇒
    match s2_v20872 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v20873 __v20874 ⇒ LT_c1
    end
  | String_c7 c1_v20875 s1_v20876 ⇒
    match s2_v20872 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v20877 s2_v20878 ⇒
      match comparec_i19(c1_v20875, c2_v20877) with
      | EQ_c3  ⇒ compares_i23(s1_v20876, s2_v20878) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i107 =
  fn s1_v20879 s2_v20880 ⇒ compares_i23(s1_v20879, s2_v20880)

fun and_thenUUU_i61(A_v20881, B_v20882, opt_v20883, f_v20884) =
  match opt_v20883 with
  | NoneUU_c20  ⇒ NoneUU_c20 | SomeUU_c21 x_v20885 ⇒ (f_v20884) x_v20885
  end

val and_thenUUUclo_i108 =
  fn A_v20886 B_v20887 opt_v20888 ⇒
    ln f_v20889 ⇒ and_thenUUU_i61(A_v20886, B_v20887, opt_v20888, f_v20889)

fun and_thenUUL_i60(A_v20890, B_v20891, opt_v20892, f_v20893) =
  match opt_v20892 with
  | NoneUL_c18  ⇒ NoneUL_c18 | SomeUL_c19 x_v20894 ⇒ (f_v20893) x_v20894
  end

val and_thenUULclo_i109 =
  fn A_v20895 B_v20896 opt_v20897 ⇒
    ln f_v20898 ⇒ and_thenUUL_i60(A_v20895, B_v20896, opt_v20897, f_v20898)

fun and_thenULU_i59(A_v20899, B_v20900, opt_v20901, f_v20902) =
  match opt_v20901 with
  | NoneUU_c20  ⇒ NoneLU_c16 | SomeUU_c21 x_v20903 ⇒ (f_v20902) x_v20903
  end

val and_thenULUclo_i110 =
  fn A_v20904 B_v20905 opt_v20906 ⇒
    ln f_v20907 ⇒ and_thenULU_i59(A_v20904, B_v20905, opt_v20906, f_v20907)

fun and_thenULL_i58(A_v20908, B_v20909, opt_v20910, f_v20911) =
  match opt_v20910 with
  | NoneUL_c18  ⇒ NoneLL_c14 | SomeUL_c19 x_v20912 ⇒ (f_v20911) x_v20912
  end

val and_thenULLclo_i111 =
  fn A_v20913 B_v20914 opt_v20915 ⇒
    ln f_v20916 ⇒ and_thenULL_i58(A_v20913, B_v20914, opt_v20915, f_v20916)

fun and_thenLUL_i56(A_v20917, B_v20918, opt_v20919, f_v20920) =
  match opt_v20919 with
  | NoneLL_c14  ⇒ NoneUL_c18 | SomeLL_c15 x_v20921 ⇒ (f_v20920) x_v20921
  end

val and_thenLULclo_i112 =
  fn A_v20922 B_v20923 opt_v20924 ⇒
    ln f_v20925 ⇒ and_thenLUL_i56(A_v20922, B_v20923, opt_v20924, f_v20925)

fun and_thenLLL_i54(A_v20926, B_v20927, opt_v20928, f_v20929) =
  match opt_v20928 with
  | NoneLL_c14  ⇒ NoneLL_c14 | SomeLL_c15 x_v20930 ⇒ (f_v20929) x_v20930
  end

val and_thenLLLclo_i113 =
  fn A_v20931 B_v20932 opt_v20933 ⇒
    ln f_v20934 ⇒ and_thenLLL_i54(A_v20931, B_v20932, opt_v20933, f_v20934)

fun lenUU_i65(A_v20935, xs_v20936) =
  match xs_v20936 with
  | nilUU_c28  ⇒ (0, nilUU_c28)
  | consUU_c29 x_v20937 xs_v20938 ⇒
    match lenUU_i65(NULL, xs_v20938) with
    | (n_v20939, xs_v20940) ⇒
      (n_v20939.+1, (consUU_c29 x_v20937 xs_v20940))
    end
  end

val lenUUclo_i114 = fn A_v20941 xs_v20942 ⇒ lenUU_i65(A_v20941, xs_v20942)

fun lenUL_i64(A_v20943, xs_v20944) =
  match xs_v20944 with
  | nilUL_c26  ⇒ (0, nilUL_c26)
  | consUL_c27 x_v20945 xs_v20946 ⇒
    match lenUL_i64(NULL, xs_v20946) with
    | (n_v20947, xs_v20948) ⇒
      (n_v20947.+1, (consUL_c27 x_v20945 xs_v20948))
    end
  end

val lenULclo_i115 = fn A_v20949 xs_v20950 ⇒ lenUL_i64(A_v20949, xs_v20950)

fun lenLL_i62(A_v20951, xs_v20952) =
  match xs_v20952 with
  | nilLL_c22  ⇒ (0, nilLL_c22)
  | consLL_c23 x_v20953 xs_v20954 ⇒
    match lenLL_i62(NULL, xs_v20954) with
    | (n_v20955, xs_v20956) ⇒
      (n_v20955.+1, (consLL_c23 x_v20953 xs_v20956))
    end
  end

val lenLLclo_i116 = fn A_v20957 xs_v20958 ⇒ lenLL_i62(A_v20957, xs_v20958)

fun appendUU_i69(A_v20959, xs_v20960, ys_v20961) =
  match xs_v20960 with
  | nilUU_c28  ⇒ ys_v20961
  | consUU_c29 x_v20962 xs_v20963 ⇒
    (consUU_c29 x_v20962 appendUU_i69(NULL, xs_v20963, ys_v20961))
  end

val appendUUclo_i117 =
  fn A_v20964 xs_v20965 ⇒
    ln ys_v20966 ⇒ appendUU_i69(A_v20964, xs_v20965, ys_v20966)

fun appendUL_i68(A_v20967, xs_v20968, ys_v20969) =
  match xs_v20968 with
  | nilUL_c26  ⇒ ys_v20969
  | consUL_c27 x_v20970 xs_v20971 ⇒
    (consUL_c27 x_v20970 appendUL_i68(NULL, xs_v20971, ys_v20969))
  end

val appendULclo_i118 =
  fn A_v20972 xs_v20973 ⇒
    ln ys_v20974 ⇒ appendUL_i68(A_v20972, xs_v20973, ys_v20974)

fun appendLL_i66(A_v20975, xs_v20976, ys_v20977) =
  match xs_v20976 with
  | nilLL_c22  ⇒ ys_v20977
  | consLL_c23 x_v20978 xs_v20979 ⇒
    (consLL_c23 x_v20978 appendLL_i66(NULL, xs_v20979, ys_v20977))
  end

val appendLLclo_i119 =
  fn A_v20980 xs_v20981 ⇒
    ln ys_v20982 ⇒ appendLL_i66(A_v20980, xs_v20981, ys_v20982)

fun readline_i33(__v20983) =
  ln __v20984 ⇒
    let ch_v20985 = (ln __v20986 ⇒ open stdin) NULL in
    let ch_v20987 =
      ((fn x_v20988 ⇒ ln __v20989 ⇒ send(ch_v20985, x_v20988)) 1) NULL
    in
    let __v20990 = (ln __v20991 ⇒ recv(ch_v20987)) NULL in
    (match __v20990 with
     | (s_v20992, ch_v20993) ⇒
       ln __v20994 ⇒
         let ch_v20995 =
           ((fn x_v20996 ⇒ ln __v20997 ⇒ send(ch_v20993, x_v20996)) 0)
             NULL
         in
         let __v20998 =
           (ln __v20999 ⇒ let __v21000 = ch_v20995 in NULL) NULL
         in (ln __v21001 ⇒ s_v20992) NULL
     end) NULL

val readlineclo_i120 = fn __v21002 ⇒ readline_i33(__v21002)

fun print_i34(s_v21003) =
  ln __v21004 ⇒
    let ch_v21005 = (ln __v21006 ⇒ open stdout) NULL in
    let ch_v21007 =
      ((fn x_v21008 ⇒ ln __v21009 ⇒ send(ch_v21005, x_v21008)) 1) NULL
    in
    let ch_v21010 =
      ((fn x_v21011 ⇒ ln __v21012 ⇒ send(ch_v21007, x_v21011)) s_v21003)
        NULL
    in
    let ch_v21013 =
      ((fn x_v21014 ⇒ ln __v21015 ⇒ send(ch_v21010, x_v21014)) 0) NULL
    in (ln __v21016 ⇒ let __v21017 = ch_v21013 in NULL) NULL

val printclo_i121 = fn s_v21018 ⇒ print_i34(s_v21018)

fun prerr_i35(s_v21019) =
  ln __v21020 ⇒
    let ch_v21021 = (ln __v21022 ⇒ open stderr) NULL in
    let ch_v21023 =
      ((fn x_v21024 ⇒ ln __v21025 ⇒ send(ch_v21021, x_v21024)) 1) NULL
    in
    let ch_v21026 =
      ((fn x_v21027 ⇒ ln __v21028 ⇒ send(ch_v21023, x_v21027)) s_v21019)
        NULL
    in
    let ch_v21029 =
      ((fn x_v21030 ⇒ ln __v21031 ⇒ send(ch_v21026, x_v21030)) 0) NULL
    in (ln __v21032 ⇒ let __v21033 = ch_v21029 in NULL) NULL

val prerrclo_i122 = fn s_v21034 ⇒ prerr_i35(s_v21034)

val digits_i36 =
  (consUU_c29
    "0"
    (consUU_c29
      "1"
      (consUU_c29
        "2"
        (consUU_c29
          "3"
          (consUU_c29
            "4"
            (consUU_c29
              "5"
              (consUU_c29
                "6"
                (consUU_c29 "7" (consUU_c29 "8" (consUU_c29 "9" nilUU_c28))))))))))

fun get_at_i37(A_v21035, n_v21036, xs_v21037, a_v21038) =
  let __v21039 = n_v21036 in
  if __v21039 then
    let n_v21040 = __v21039.-1 in
    match xs_v21037 with
    | nilUU_c28  ⇒ a_v21038
    | consUU_c29 __v21041 xs_v21042 ⇒
      get_at_i37(NULL, n_v21040, xs_v21042, a_v21038)
    end
  else
    match xs_v21037 with
    | nilUU_c28  ⇒ a_v21038 | consUU_c29 x_v21043 __v21044 ⇒ x_v21043
    end

val get_atclo_i123 =
  fn A_v21045 n_v21046 xs_v21047 a_v21048 ⇒
    get_at_i37(A_v21045, n_v21046, xs_v21047, a_v21048)

fun string_of_digit_i38(n_v21049) =
  get_at_i37(NULL, n_v21049, digits_i36, EmptyString_c6)

val string_of_digitclo_i124 = fn n_v21050 ⇒ string_of_digit_i38(n_v21050)

fun string_of_nat_i39(n_v21051) =
  let s_v21052 = string_of_digit_i38(modn_i17(n_v21051, 10)) in
  let n_v21053 = divn_i16(n_v21051, 10) in
  if ltn_i8(0, n_v21053) then
    cats_i20(string_of_nat_i39(n_v21053), s_v21052)
  else
    s_v21052

val string_of_natclo_i125 = fn n_v21054 ⇒ string_of_nat_i39(n_v21054)

fun digit_of_char_i40(c_v21055) =
  if eqc_i18(c_v21055, '0') then
    (SomeUL_c19 0)
  else
    if eqc_i18(c_v21055, '1') then
      (SomeUL_c19 1)
    else
      if eqc_i18(c_v21055, '2') then
        (SomeUL_c19 2)
      else
        if eqc_i18(c_v21055, '3') then
          (SomeUL_c19 3)
        else
          if eqc_i18(c_v21055, '4') then
            (SomeUL_c19 4)
          else
            if eqc_i18(c_v21055, '5') then
              (SomeUL_c19 5)
            else
              if eqc_i18(c_v21055, '6') then
                (SomeUL_c19 6)
              else
                if eqc_i18(c_v21055, '7') then
                  (SomeUL_c19 7)
                else
                  if eqc_i18(c_v21055, '8') then
                    (SomeUL_c19 8)
                  else
                    if eqc_i18(c_v21055, '9') then
                      (SomeUL_c19 9)
                    else
                      NoneUL_c18

val digit_of_charclo_i126 = fn c_v21056 ⇒ digit_of_char_i40(c_v21056)

fun nat_of_string_loop_i41(s_v21057, acc_v21058) =
  match s_v21057 with
  | EmptyString_c6  ⇒ (SomeUL_c19 acc_v21058)
  | String_c7 c_v21059 s_v21060 ⇒
    match digit_of_char_i40(c_v21059) with
    | NoneUL_c18  ⇒ NoneUL_c18
    | SomeUL_c19 n_v21061 ⇒
      nat_of_string_loop_i41(s_v21060,
                             addn_i13(muln_i15(acc_v21058, 10), n_v21061))
    end
  end

val nat_of_string_loopclo_i127 =
  fn s_v21062 acc_v21063 ⇒ nat_of_string_loop_i41(s_v21062, acc_v21063)

fun nat_of_string_i42(s_v21064) = nat_of_string_loop_i41(s_v21064, 0)

val nat_of_stringclo_i128 = fn s_v21065 ⇒ nat_of_string_i42(s_v21065)

fun appendUU_i77(A_v21066, xs_v21067, ys_v21068) =
  match xs_v21067 with
  | NilUU_c36  ⇒ ys_v21068
  | ConsUU_c37 x_v21069 xs_v21070 ⇒
    (ConsUU_c37 x_v21069 appendUU_i77(NULL, xs_v21070, ys_v21068))
  end

val appendUUclo_i129 =
  fn A_v21071 xs_v21072 ⇒
    ln ys_v21073 ⇒ appendUU_i77(A_v21071, xs_v21072, ys_v21073)

fun appendUL_i76(A_v21074, xs_v21075, ys_v21076) =
  match xs_v21075 with
  | NilUL_c34  ⇒ ys_v21076
  | ConsUL_c35 x_v21077 xs_v21078 ⇒
    (ConsUL_c35 x_v21077 appendUL_i76(NULL, xs_v21078, ys_v21076))
  end

val appendULclo_i130 =
  fn A_v21079 xs_v21080 ⇒
    ln ys_v21081 ⇒ appendUL_i76(A_v21079, xs_v21080, ys_v21081)

fun appendLL_i74(A_v21082, xs_v21083, ys_v21084) =
  match xs_v21083 with
  | NilLL_c30  ⇒ ys_v21084
  | ConsLL_c31 x_v21085 xs_v21086 ⇒
    (ConsLL_c31 x_v21085 appendLL_i74(NULL, xs_v21086, ys_v21084))
  end

val appendLLclo_i131 =
  fn A_v21087 xs_v21088 ⇒
    ln ys_v21089 ⇒ appendLL_i74(A_v21087, xs_v21088, ys_v21089)

val ls0_i47 = (ConsUU_c37 0 NilUU_c36)

val ls1_i48 = (ConsUU_c37 0 NilUU_c36)

val ls2_i49 = appendUU_i77(NULL, ls0_i47, ls1_i48)

fun idU_i85(A_v21090, x_v21091) = x_v21091

val idUclo_i132 = fn A_v21092 x_v21093 ⇒ idU_i85(A_v21092, x_v21093)

fun idL_i84(A_v21094, x_v21095) = x_v21095

val idLclo_i133 = fn A_v21096 x_v21097 ⇒ idL_i84(A_v21096, x_v21097)

main =
  (ln __v21098 ⇒
     let s_v21099 = (readline_i33(NULL)) NULL in
     (idL_i84(NULL, print_i34(idU_i85(NULL, s_v21099)))) NULL)
    NULL

trans23 success--------------------------

fun andb_i2(b1_v21491, b2_v21492) = if b1_v21491 then
                                      b2_v21492
                                    else
                                      0

val andbclo_i86 = fn b1_v21493 b2_v21494 ⇒ andb_i2(b1_v21493, b2_v21494)

fun orb_i3(b1_v21495, b2_v21496) = if b1_v21495 then
                                     1
                                   else
                                     b2_v21496

val orbclo_i87 = fn b1_v21497 b2_v21498 ⇒ orb_i3(b1_v21497, b2_v21498)

fun notb_i4(b_v21499) = if b_v21499 then
                          0
                        else
                          1

val notbclo_i88 = fn b_v21500 ⇒ notb_i4(b_v21500)

fun compareb_i5(b1_v21501, b2_v21502) =
  if b1_v21501 then
    if b2_v21502 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v21502 then
      LT_c1
    else
      EQ_c3

val comparebclo_i89 =
  fn b1_v21503 b2_v21504 ⇒ compareb_i5(b1_v21503, b2_v21504)

fun lten_i6(x_v21505, y_v21506) =
  if x_v21505 then
    if y_v21506 then
      lten_i6(x_v21505.-1, y_v21506.-1)
    else
      0
  else
    1

val ltenclo_i90 = fn x_v21507 y_v21508 ⇒ lten_i6(x_v21507, y_v21508)

fun gten_i7(x_v21509, y_v21510) =
  if x_v21509 then
    if y_v21510 then
      gten_i7(x_v21509.-1, y_v21510.-1)
    else
      1
  else
    if y_v21510 then
      0
    else
      1

val gtenclo_i91 = fn x_v21511 y_v21512 ⇒ gten_i7(x_v21511, y_v21512)

fun ltn_i8(x_v21513, y_v21514) =
  if x_v21513 then
    if y_v21514 then
      ltn_i8(x_v21513.-1, y_v21514.-1)
    else
      0
  else
    if y_v21514 then
      1
    else
      0

val ltnclo_i92 = fn x_v21515 y_v21516 ⇒ ltn_i8(x_v21515, y_v21516)

fun gtn_i9(x_v21517, y_v21518) =
  if x_v21517 then
    if y_v21518 then
      gtn_i9(x_v21517.-1, y_v21518.-1)
    else
      1
  else
    0

val gtnclo_i93 = fn x_v21519 y_v21520 ⇒ gtn_i9(x_v21519, y_v21520)

fun eqn_i10(x_v21521, y_v21522) =
  if x_v21521 then
    if y_v21522 then
      eqn_i10(x_v21521.-1, y_v21522.-1)
    else
      0
  else
    if y_v21522 then
      0
    else
      1

val eqnclo_i94 = fn x_v21523 y_v21524 ⇒ eqn_i10(x_v21523, y_v21524)

fun comparen_i11(n1_v21525, n2_v21526) =
  if n1_v21525 then
    if n2_v21526 then
      comparen_i11(n1_v21525.-1, n2_v21526.-1)
    else
      GT_c2
  else
    if n2_v21526 then
      LT_c1
    else
      EQ_c3

val comparenclo_i95 =
  fn n1_v21527 n2_v21528 ⇒ comparen_i11(n1_v21527, n2_v21528)

fun pred_i12(x_v21529) = if x_v21529 then
                           x_v21529.-1
                         else
                           0

val predclo_i96 = fn x_v21530 ⇒ pred_i12(x_v21530)

fun addn_i13(x_v21531, y_v21532) =
  if x_v21531 then
    addn_i13(x_v21531.-1, y_v21532).+1
  else
    y_v21532

val addnclo_i97 = fn x_v21533 y_v21534 ⇒ addn_i13(x_v21533, y_v21534)

fun subn_i14(x_v21535, y_v21536) =
  if y_v21536 then
    subn_i14(pred_i12(x_v21535), y_v21536.-1)
  else
    x_v21535

val subnclo_i98 = fn x_v21537 y_v21538 ⇒ subn_i14(x_v21537, y_v21538)

fun muln_i15(x_v21539, y_v21540) =
  if x_v21539 then
    addn_i13(y_v21540, muln_i15(x_v21539.-1, y_v21540))
  else
    0

val mulnclo_i99 = fn x_v21541 y_v21542 ⇒ muln_i15(x_v21541, y_v21542)

fun divn_i16(x_v21543, y_v21544) =
  if ltn_i8(x_v21543, y_v21544) then
    0
  else
    divn_i16(subn_i14(x_v21543, y_v21544), y_v21544).+1

val divnclo_i100 = fn x_v21545 y_v21546 ⇒ divn_i16(x_v21545, y_v21546)

fun modn_i17(x_v21547, y_v21548) =
  subn_i14(x_v21547, muln_i15(divn_i16(x_v21547, y_v21548), y_v21548))

val modnclo_i101 = fn x_v21549 y_v21550 ⇒ modn_i17(x_v21549, y_v21550)

fun eqc_i18(c1_v21551, c2_v21552) =
  match c1_v21551 with
  | Char_c5 n1_v21553 ⇒
    match c2_v21552 with
    | Char_c5 n2_v21554 ⇒ eqn_i10(n1_v21553, n2_v21554)
    end
  end

val eqcclo_i102 = fn c1_v21555 c2_v21556 ⇒ eqc_i18(c1_v21555, c2_v21556)

fun comparec_i19(c1_v21557, c2_v21558) =
  match c1_v21557 with
  | Char_c5 n1_v21559 ⇒
    match c2_v21558 with
    | Char_c5 n2_v21560 ⇒ comparen_i11(n1_v21559, n2_v21560)
    end
  end

val comparecclo_i103 =
  fn c1_v21561 c2_v21562 ⇒ comparec_i19(c1_v21561, c2_v21562)

fun cats_i20(s1_v21563, s2_v21564) =
  match s1_v21563 with
  | EmptyString_c6  ⇒ s2_v21564
  | String_c7 c_v21565 s1_v21566 ⇒
    (String_c7 c_v21565 cats_i20(s1_v21566, s2_v21564))
  end

val catsclo_i104 = fn s1_v21567 s2_v21568 ⇒ cats_i20(s1_v21567, s2_v21568)

fun strlen_i21(s_v21569) =
  match s_v21569 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v21570 s_v21571 ⇒ strlen_i21(s_v21571).+1
  end

val strlenclo_i105 = fn s_v21572 ⇒ strlen_i21(s_v21572)

fun eqs_i22(s1_v21573, s2_v21574) =
  match s1_v21573 with
  | EmptyString_c6  ⇒
    match s2_v21574 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v21575 __v21576 ⇒ 0
    end
  | String_c7 c1_v21577 s1_v21578 ⇒
    match s2_v21574 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v21579 s2_v21580 ⇒
      andb_i2(eqc_i18(c1_v21577, c2_v21579), eqs_i22(s1_v21578, s2_v21580))
    end
  end

val eqsclo_i106 = fn s1_v21581 s2_v21582 ⇒ eqs_i22(s1_v21581, s2_v21582)

fun compares_i23(s1_v21583, s2_v21584) =
  match s1_v21583 with
  | EmptyString_c6  ⇒
    match s2_v21584 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v21585 __v21586 ⇒ LT_c1
    end
  | String_c7 c1_v21587 s1_v21588 ⇒
    match s2_v21584 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v21589 s2_v21590 ⇒
      match comparec_i19(c1_v21587, c2_v21589) with
      | EQ_c3  ⇒ compares_i23(s1_v21588, s2_v21590) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i107 =
  fn s1_v21591 s2_v21592 ⇒ compares_i23(s1_v21591, s2_v21592)

fun and_thenUUU_i61(A_v21593, B_v21594, opt_v21595, f_v21596) =
  match opt_v21595 with
  | NoneUU_c20  ⇒ NoneUU_c20 | SomeUU_c21 x_v21597 ⇒ (f_v21596) x_v21597
  end

val and_thenUUUclo_i108 =
  fn A_v21598 B_v21599 opt_v21600 ⇒
    ln f_v21601 ⇒ and_thenUUU_i61(A_v21598, B_v21599, opt_v21600, f_v21601)

fun and_thenUUL_i60(A_v21602, B_v21603, opt_v21604, f_v21605) =
  match opt_v21604 with
  | NoneUL_c18  ⇒ NoneUL_c18 | SomeUL_c19 x_v21606 ⇒ (f_v21605) x_v21606
  end

val and_thenUULclo_i109 =
  fn A_v21607 B_v21608 opt_v21609 ⇒
    ln f_v21610 ⇒ and_thenUUL_i60(A_v21607, B_v21608, opt_v21609, f_v21610)

fun and_thenULU_i59(A_v21611, B_v21612, opt_v21613, f_v21614) =
  match opt_v21613 with
  | NoneUU_c20  ⇒ NoneLU_c16 | SomeUU_c21 x_v21615 ⇒ (f_v21614) x_v21615
  end

val and_thenULUclo_i110 =
  fn A_v21616 B_v21617 opt_v21618 ⇒
    ln f_v21619 ⇒ and_thenULU_i59(A_v21616, B_v21617, opt_v21618, f_v21619)

fun and_thenULL_i58(A_v21620, B_v21621, opt_v21622, f_v21623) =
  match opt_v21622 with
  | NoneUL_c18  ⇒ NoneLL_c14 | SomeUL_c19 x_v21624 ⇒ (f_v21623) x_v21624
  end

val and_thenULLclo_i111 =
  fn A_v21625 B_v21626 opt_v21627 ⇒
    ln f_v21628 ⇒ and_thenULL_i58(A_v21625, B_v21626, opt_v21627, f_v21628)

fun and_thenLUL_i56(A_v21629, B_v21630, opt_v21631, f_v21632) =
  match opt_v21631 with
  | NoneLL_c14  ⇒ NoneUL_c18 | SomeLL_c15 x_v21633 ⇒ (f_v21632) x_v21633
  end

val and_thenLULclo_i112 =
  fn A_v21634 B_v21635 opt_v21636 ⇒
    ln f_v21637 ⇒ and_thenLUL_i56(A_v21634, B_v21635, opt_v21636, f_v21637)

fun and_thenLLL_i54(A_v21638, B_v21639, opt_v21640, f_v21641) =
  match opt_v21640 with
  | NoneLL_c14  ⇒ NoneLL_c14 | SomeLL_c15 x_v21642 ⇒ (f_v21641) x_v21642
  end

val and_thenLLLclo_i113 =
  fn A_v21643 B_v21644 opt_v21645 ⇒
    ln f_v21646 ⇒ and_thenLLL_i54(A_v21643, B_v21644, opt_v21645, f_v21646)

fun lenUU_i65(A_v21647, xs_v21648) =
  match xs_v21648 with
  | nilUU_c28  ⇒ (0, nilUU_c28)
  | consUU_c29 x_v21649 xs_v21650 ⇒
    match lenUU_i65(NULL, xs_v21650) with
    | (n_v21651, xs_v21652) ⇒
      (n_v21651.+1, (consUU_c29 x_v21649 xs_v21652))
    end
  end

val lenUUclo_i114 = fn A_v21653 xs_v21654 ⇒ lenUU_i65(A_v21653, xs_v21654)

fun lenUL_i64(A_v21655, xs_v21656) =
  match xs_v21656 with
  | nilUL_c26  ⇒ (0, nilUL_c26)
  | consUL_c27 x_v21657 xs_v21658 ⇒
    match lenUL_i64(NULL, xs_v21658) with
    | (n_v21659, xs_v21660) ⇒
      (n_v21659.+1, (consUL_c27 x_v21657 xs_v21660))
    end
  end

val lenULclo_i115 = fn A_v21661 xs_v21662 ⇒ lenUL_i64(A_v21661, xs_v21662)

fun lenLL_i62(A_v21663, xs_v21664) =
  match xs_v21664 with
  | nilLL_c22  ⇒ (0, nilLL_c22)
  | consLL_c23 x_v21665 xs_v21666 ⇒
    match lenLL_i62(NULL, xs_v21666) with
    | (n_v21667, xs_v21668) ⇒
      (n_v21667.+1, (consLL_c23 x_v21665 xs_v21668))
    end
  end

val lenLLclo_i116 = fn A_v21669 xs_v21670 ⇒ lenLL_i62(A_v21669, xs_v21670)

fun appendUU_i69(A_v21671, xs_v21672, ys_v21673) =
  match xs_v21672 with
  | nilUU_c28  ⇒ ys_v21673
  | consUU_c29 x_v21674 xs_v21675 ⇒
    (consUU_c29 x_v21674 appendUU_i69(NULL, xs_v21675, ys_v21673))
  end

val appendUUclo_i117 =
  fn A_v21676 xs_v21677 ⇒
    ln ys_v21678 ⇒ appendUU_i69(A_v21676, xs_v21677, ys_v21678)

fun appendUL_i68(A_v21679, xs_v21680, ys_v21681) =
  match xs_v21680 with
  | nilUL_c26  ⇒ ys_v21681
  | consUL_c27 x_v21682 xs_v21683 ⇒
    (consUL_c27 x_v21682 appendUL_i68(NULL, xs_v21683, ys_v21681))
  end

val appendULclo_i118 =
  fn A_v21684 xs_v21685 ⇒
    ln ys_v21686 ⇒ appendUL_i68(A_v21684, xs_v21685, ys_v21686)

fun appendLL_i66(A_v21687, xs_v21688, ys_v21689) =
  match xs_v21688 with
  | nilLL_c22  ⇒ ys_v21689
  | consLL_c23 x_v21690 xs_v21691 ⇒
    (consLL_c23 x_v21690 appendLL_i66(NULL, xs_v21691, ys_v21689))
  end

val appendLLclo_i119 =
  fn A_v21692 xs_v21693 ⇒
    ln ys_v21694 ⇒ appendLL_i66(A_v21692, xs_v21693, ys_v21694)

fun readline_i33(__v21695) =
  ln __v21696 ⇒
    let ch_v21697 = open stdin in
    let ch_v21698 = send(ch_v21697, 1) in
    let __v21699 = recv(ch_v21698) in
    match __v21699 with
    | (s_v21700, ch_v21701) ⇒
      let ch_v21702 = send(ch_v21701, 0) in s_v21700
    end

val readlineclo_i120 = fn __v21703 ⇒ readline_i33(__v21703)

fun print_i34(s_v21704) =
  ln __v21705 ⇒
    let ch_v21706 = open stdout in
    let ch_v21707 = send(ch_v21706, 1) in
    let ch_v21708 = send(ch_v21707, s_v21704) in
    let ch_v21709 = send(ch_v21708, 0) in NULL

val printclo_i121 = fn s_v21710 ⇒ print_i34(s_v21710)

fun prerr_i35(s_v21711) =
  ln __v21712 ⇒
    let ch_v21713 = open stderr in
    let ch_v21714 = send(ch_v21713, 1) in
    let ch_v21715 = send(ch_v21714, s_v21711) in
    let ch_v21716 = send(ch_v21715, 0) in NULL

val prerrclo_i122 = fn s_v21717 ⇒ prerr_i35(s_v21717)

val digits_i36 =
  (consUU_c29
    "0"
    (consUU_c29
      "1"
      (consUU_c29
        "2"
        (consUU_c29
          "3"
          (consUU_c29
            "4"
            (consUU_c29
              "5"
              (consUU_c29
                "6"
                (consUU_c29 "7" (consUU_c29 "8" (consUU_c29 "9" nilUU_c28))))))))))

fun get_at_i37(A_v21718, n_v21719, xs_v21720, a_v21721) =
  if n_v21719 then
    match xs_v21720 with
    | nilUU_c28  ⇒ a_v21721
    | consUU_c29 __v21722 xs_v21723 ⇒
      get_at_i37(NULL, n_v21719.-1, xs_v21723, a_v21721)
    end
  else
    match xs_v21720 with
    | nilUU_c28  ⇒ a_v21721 | consUU_c29 x_v21724 __v21725 ⇒ x_v21724
    end

val get_atclo_i123 =
  fn A_v21726 n_v21727 xs_v21728 a_v21729 ⇒
    get_at_i37(A_v21726, n_v21727, xs_v21728, a_v21729)

fun string_of_digit_i38(n_v21730) =
  get_at_i37(NULL, n_v21730, digits_i36, EmptyString_c6)

val string_of_digitclo_i124 = fn n_v21731 ⇒ string_of_digit_i38(n_v21731)

fun string_of_nat_i39(n_v21732) =
  let s_v21733 = string_of_digit_i38(modn_i17(n_v21732, 10)) in
  let n_v21734 = divn_i16(n_v21732, 10) in
  if ltn_i8(0, n_v21734) then
    cats_i20(string_of_nat_i39(n_v21734), s_v21733)
  else
    s_v21733

val string_of_natclo_i125 = fn n_v21735 ⇒ string_of_nat_i39(n_v21735)

fun digit_of_char_i40(c_v21736) =
  if eqc_i18(c_v21736, '0') then
    (SomeUL_c19 0)
  else
    if eqc_i18(c_v21736, '1') then
      (SomeUL_c19 1)
    else
      if eqc_i18(c_v21736, '2') then
        (SomeUL_c19 2)
      else
        if eqc_i18(c_v21736, '3') then
          (SomeUL_c19 3)
        else
          if eqc_i18(c_v21736, '4') then
            (SomeUL_c19 4)
          else
            if eqc_i18(c_v21736, '5') then
              (SomeUL_c19 5)
            else
              if eqc_i18(c_v21736, '6') then
                (SomeUL_c19 6)
              else
                if eqc_i18(c_v21736, '7') then
                  (SomeUL_c19 7)
                else
                  if eqc_i18(c_v21736, '8') then
                    (SomeUL_c19 8)
                  else
                    if eqc_i18(c_v21736, '9') then
                      (SomeUL_c19 9)
                    else
                      NoneUL_c18

val digit_of_charclo_i126 = fn c_v21737 ⇒ digit_of_char_i40(c_v21737)

fun nat_of_string_loop_i41(s_v21738, acc_v21739) =
  match s_v21738 with
  | EmptyString_c6  ⇒ (SomeUL_c19 acc_v21739)
  | String_c7 c_v21740 s_v21741 ⇒
    match digit_of_char_i40(c_v21740) with
    | NoneUL_c18  ⇒ NoneUL_c18
    | SomeUL_c19 n_v21742 ⇒
      nat_of_string_loop_i41(s_v21741,
                             addn_i13(muln_i15(acc_v21739, 10), n_v21742))
    end
  end

val nat_of_string_loopclo_i127 =
  fn s_v21743 acc_v21744 ⇒ nat_of_string_loop_i41(s_v21743, acc_v21744)

fun nat_of_string_i42(s_v21745) = nat_of_string_loop_i41(s_v21745, 0)

val nat_of_stringclo_i128 = fn s_v21746 ⇒ nat_of_string_i42(s_v21746)

fun appendUU_i77(A_v21747, xs_v21748, ys_v21749) =
  match xs_v21748 with
  | NilUU_c36  ⇒ ys_v21749
  | ConsUU_c37 x_v21750 xs_v21751 ⇒
    (ConsUU_c37 x_v21750 appendUU_i77(NULL, xs_v21751, ys_v21749))
  end

val appendUUclo_i129 =
  fn A_v21752 xs_v21753 ⇒
    ln ys_v21754 ⇒ appendUU_i77(A_v21752, xs_v21753, ys_v21754)

fun appendUL_i76(A_v21755, xs_v21756, ys_v21757) =
  match xs_v21756 with
  | NilUL_c34  ⇒ ys_v21757
  | ConsUL_c35 x_v21758 xs_v21759 ⇒
    (ConsUL_c35 x_v21758 appendUL_i76(NULL, xs_v21759, ys_v21757))
  end

val appendULclo_i130 =
  fn A_v21760 xs_v21761 ⇒
    ln ys_v21762 ⇒ appendUL_i76(A_v21760, xs_v21761, ys_v21762)

fun appendLL_i74(A_v21763, xs_v21764, ys_v21765) =
  match xs_v21764 with
  | NilLL_c30  ⇒ ys_v21765
  | ConsLL_c31 x_v21766 xs_v21767 ⇒
    (ConsLL_c31 x_v21766 appendLL_i74(NULL, xs_v21767, ys_v21765))
  end

val appendLLclo_i131 =
  fn A_v21768 xs_v21769 ⇒
    ln ys_v21770 ⇒ appendLL_i74(A_v21768, xs_v21769, ys_v21770)

val ls0_i47 = (ConsUU_c37 0 NilUU_c36)

val ls1_i48 = (ConsUU_c37 0 NilUU_c36)

val ls2_i49 = appendUU_i77(NULL, ls0_i47, ls1_i48)

fun idU_i85(A_v21771, x_v21772) = x_v21772

val idUclo_i132 = fn A_v21773 x_v21774 ⇒ idU_i85(A_v21773, x_v21774)

fun idL_i84(A_v21775, x_v21776) = x_v21776

val idLclo_i133 = fn A_v21777 x_v21778 ⇒ idL_i84(A_v21777, x_v21778)

main =
  let s_v21779 = (readline_i33(NULL)) NULL in
  (idL_i84(NULL, print_i34(idU_i85(NULL, s_v21779)))) NULL

trans3e success--------------------------

trans34 success--------------------------

