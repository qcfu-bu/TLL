logical eq_sym‹s› (A : Type‹s›) (x : A) (y : A) : (∀ (_ : x ≡ y) → y ≡ x) = (fn (e : _) ⇒ rew [y, _ ⇒ y ≡ x] e in refl)

logical f_equal‹s,
t› (A : Type‹s›) (B : Type‹t›) (f : (∀ (_ : A) → B)) (x : A) (y : A) : (∀ (_ : x ≡ y) → (
(f) (x)) ≡ ((f) (y))) = (fn (e : _) ⇒ rew [y, p ⇒ ((f) (x)) ≡ (
(f)
(y))] e in refl)

logical bool_absurd‹› (e : true ≡ false) : absurd = rew [x, _ ⇒ match x as _ in _ with true ⇒ unit | false ⇒ absurd] e in ()

logical nat_absurd‹› (n : nat) (e : n.+1 ≡ O) : absurd = rew [x, _ ⇒ match x as _ in _ with O ⇒ absurd | S _ ⇒ unit] e in ()

logical nat_inv‹› (n1 : nat) (n2 : nat) (e : n1.+1 ≡ n2.+1) : n1 ≡ n2 = (
(f_equal) (_) (_) (pred) (_) (_)
(e))

logical eqn_reflect‹› (m : nat) (n : nat) : (∀ (_ : ((eqn) (m)
(n)) ≡ true) → m ≡ n) = match m as m0 in (∀ (_ : ((eqn) (m0)
(n)) ≡ true) → m0 ≡ n) with O ⇒ match n as n0 in (∀ (_ : ((eqn)
(O.+0)
(n0)) ≡ true) → O.+0 ≡ n0) with O ⇒ (fn (_ : _) ⇒ refl) | S n ⇒ (fn (e : _) ⇒ (
(absurd_elim) (_)
(((bool_absurd) (((eq_sym) (_) (_) (_) (e))))))) | S m ⇒ match n as n0 in (∀ (_ : (
(eqn) (m.+1)
(n0)) ≡ true) → m.+1 ≡ n0) with O ⇒ (fn (e : _) ⇒ ((absurd_elim)
(_)
(((bool_absurd) (((eq_sym) (_) (_) (_) (e))))))) | S n ⇒ (fn (e : _) ⇒ (
(f_equal) (_) (_) ((fn (x : _) ⇒ x.+1)) (_) (_)
(((eqn_reflect) (m) (n) (e)))))

inductive word‹› : U = Word of ‹› (s : string) {pf : ((strlen)
(s)) ≡ O.+5} → ((word‹›))

program contains‹› (c : char) (s : string) : bool = match s as _ in _ with EmptyString  ⇒ false | String c0
s ⇒ match ((eqc) (c)
(c0)) as _ in _ with true ⇒ true | false ⇒ ((contains) (c)
(s))

program string_diff‹› (ans : string) (s1 : string) (s2 : string) : string = match s1 as _ in _ with EmptyString  ⇒ EmptyString | String c1
s1 ⇒ match s2 as _ in _ with EmptyString  ⇒ EmptyString | String c2
s2 ⇒ match ((eqc) (c1) (c2)) as _ in _ with true ⇒ ((cats)
(((String) (((Char) (O.+89))) (EmptyString)))
(((string_diff) (ans) (s1) (s2)))) | false ⇒ match ((contains) (c2)
(ans)) as _ in _ with true ⇒ ((cats)
(((String) (((Char) (O.+73))) (EmptyString)))
(((string_diff) (ans) (s1) (s2)))) | false ⇒ ((cats)
(((String) (((Char) (O.+78))) (EmptyString)))
(((string_diff) (ans) (s1) (s2))))

logical string_diff_len‹› (n : nat) (ans : string) (s1 : string) (s2 : string) : (∀ (_ : n ≡ (
(strlen) (s1))) → (∀ (_ : n ≡ ((strlen) (s2))) → n ≡ ((strlen)
(((string_diff) (ans) (s1) (s2)))))) = match s1 as s0 in (∀ (_ : n ≡ (
(strlen) (s0))) → (∀ (_ : n ≡ ((strlen) (s2))) → n ≡ ((strlen)
(((string_diff) (ans) (s0) (s2)))))) with EmptyString  ⇒ match s2 as s0 in (∀ (_ : n ≡ O.+0) → (∀ (_ : n ≡ (
(strlen)
(s0))) → n ≡ O.+0)) with EmptyString  ⇒ (fn (e1 : _) ⇒ (fn (_ : _) ⇒ e1)) | String c2
s2 ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e2 in e1 in (
(absurd_elim) (_) (((nat_absurd) (_) (e3)))))) | String c1
s1 ⇒ match s2 as s0 in (∀ (_ : n ≡ ((strlen)
(((String) (c1) (s1))))) → (∀ (_ : n ≡ ((strlen)
(s0))) → n ≡ ((strlen)
(((string_diff) (ans) (((String) (c1) (s1))) (s0)))))) with EmptyString  ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e1 in e2 in (
(absurd_elim) (_) (((nat_absurd) (_) (e3)))))) | String c2
s2 ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ ((match n as n0 in (∀ (_ : n ≡ n0) → n0 ≡ (
                                           (strlen)
                                           (((string_diff) (ans)
                                            (((String) (c1) (s1)))
                                            (((String) (c2) (s2))))))) with O ⇒ (fn (e0 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e1 in e0 in (
                                           (absurd_elim) (_)
                                           (((nat_absurd) (_) (e3))))) | S n0 ⇒ (fn (e0 : _) ⇒ let e3 = rew [n1, _ ⇒ n1 ≡ (
                                           (strlen)
                                           (s1)).+1] e0 in e1 in let e4 = rew [n1, _ ⇒ n1 ≡ (
                                           (strlen)
                                           (s2)).+1] e0 in e2 in let e5 = (
                                           (nat_inv) (_) (_)
                                           (e3)) in let e6 = ((nat_inv) 
                                           (_) (_) (e4)) in match ((eqc) 
                                           (c1)
                                           (c2)) as b0 in n0.+1 ≡ (
                                           (strlen)
                                           (match b0 as _ in _ with true ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+89)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))) | false ⇒ match (
                                            (contains) (c2)
                                            (ans)) as _ in _ with true ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+73)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))) | false ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+78)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))))) with true ⇒ rew [n1, _ ⇒ n0.+1 ≡ n1.+1] (
                                           (string_diff_len) (_) (_) 
                                           (_) (_) (e5)
                                           (e6)) in refl | false ⇒ match (
                                           (contains) (c2)
                                           (ans)) as b0 in n0.+1 ≡ (
                                           (strlen)
                                           (match b0 as _ in _ with true ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+73)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))) | false ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+78)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))))) with true ⇒ rew [n1, _ ⇒ n0.+1 ≡ n1.+1] (
                                           (string_diff_len) (_) (_) 
                                           (_) (_) (e5)
                                           (e6)) in refl | false ⇒ rew [n1, _ ⇒ n0.+1 ≡ n1.+1] (
                                           (string_diff_len) (_) (_) 
                                           (_) (_) (e5) (e6)) in refl))
(refl))))

program wordle_diff‹› (ans : word) (guess : word) : word = match ans as _ in _ with Word ans
pf1 ⇒ match guess as _ in _ with Word guess pf2 ⇒ let {pf1} = ((eq_sym)
(_) (_) (_) (pf1)) in let {pf2} = ((eq_sym) (_) (_) (_)
(pf2)) in let {pf} = ((string_diff_len) (_) (_) (_) (_) (pf1)
(pf2)) in ((Word) (((string_diff) (ans) (ans) (guess)))
(((eq_sym) (_) (_) (_) (pf))))

program eqw‹› (w1 : word) (w2 : word) : bool = match w1 as _ in _ with Word s1
_ ⇒ match w2 as _ in _ with Word s2 _ ⇒ ((eqs) (s1)
(s2))

logical wordle_loop‹› (ans : word) (repeat : nat) : proto = match repeat as _ in _ with O ⇒ !(w : word) → !{_ : w ≡ ans} → end | S repeat ⇒ ?(guess : word) → !(b : bool) → !{_ : b ≡ (
(eqw) (ans)
(guess))} → match b as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
(wordle_diff) (ans) (guess))} → ((wordle_loop) (ans)
(repeat))

logical wordle‹› : proto = !{ans : word} → !(repeat : nat) → (
(wordle_loop) (ans)
(repeat))

logical loop_ch‹› (ans : word) (repeat : nat) : L = ch‹((wordle_loop)
(ans)
(repeat))›

logical loop_hc‹› (ans : word) (repeat : nat) : L = hc‹((wordle_loop)
(ans)
(repeat))›

logical wordle_ch‹› : L = ch‹wordle›

logical wordle_hc‹› : L = hc‹wordle›

program read_word‹› (_ : unit) : IO word = let s ⇐ ((readline)
(())) in ((match ((eqn) (((strlen) (s))) (O.+5)) as b0 in (∀ {_ : (
           (eqn) (((strlen) (s)))
           (O.+5)) ≡ b0} → IO word) with true ⇒ (fn {e : _} ⇒ return (
           (Word) (s)
           (((eqn_reflect) (_) (_) (e))))) | false ⇒ (fn {_ : _} ⇒ let _ ⇐ (
           (print)
           (((String) (((Char) (O.+112)))
            (((String) (((Char) (O.+108)))
             (((String) (((Char) (O.+101)))
              (((String) (((Char) (O.+97)))
               (((String) (((Char) (O.+115)))
                (((String) (((Char) (O.+101)))
                 (((String) (((Char) (O.+32)))
                  (((String) (((Char) (O.+105)))
                   (((String) (((Char) (O.+110)))
                    (((String) (((Char) (O.+112)))
                     (((String) (((Char) (O.+117)))
                      (((String) (((Char) (O.+116)))
                       (((String) (((Char) (O.+32)))
                        (((String) (((Char) (O.+97)))
                         (((String) (((Char) (O.+32)))
                          (((String) (((Char) (O.+119)))
                           (((String) (((Char) (O.+111)))
                            (((String) (((Char) (O.+114)))
                             (((String) (((Char) (O.+100)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+119)))
                                (((String) (((Char) (O.+105)))
                                 (((String) (((Char) (O.+116)))
                                  (((String) (((Char) (O.+104)))
                                   (((String) (((Char) (O.+32)))
                                    (((String) (((Char) (O.+108)))
                                     (((String) (((Char) (O.+101)))
                                      (((String) (((Char) (O.+110)))
                                       (((String) (((Char) (O.+103)))
                                        (((String) (((Char) (O.+116)))
                                         (((String) (((Char) (O.+104)))
                                          (((String) (((Char) (O.+32)))
                                           (((String) (((Char) (O.+111)))
                                            (((String) (((Char) (O.+102)))
                                             (((String) (((Char) (O.+32)))
                                              (((String) (((Char) (O.+53)))
                                               (((String) (((Char) (O.+10)))
                                                (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) in (
           (read_word) (()))))
(refl))

program player_loop‹› {ans : word} (repeat : nat) (c : ((loop_hc) 
(ans)
(repeat))) : IO unit = ((match repeat as repeat0 in (∀ (_ : ((loop_hc)
                         (ans)
                         (repeat0))) → IO unit) with O ⇒ (fn (c : _) ⇒ let ⟨ans, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in match ans as _ in _ with Word s
                         _ ⇒ let _ ⇐ ((print)
                         (((cats)
                          (((cats)
                           (((String) (((Char) (O.+89)))
                            (((String) (((Char) (O.+111)))
                             (((String) (((Char) (O.+117)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+76)))
                                (((String) (((Char) (O.+111)))
                                 (((String) (((Char) (O.+115)))
                                  (((String) (((Char) (O.+101)))
                                   (((String) (((Char) (O.+33)))
                                    (((String) (((Char) (O.+32)))
                                     (((String) (((Char) (O.+84)))
                                      (((String) (((Char) (O.+104)))
                                       (((String) (((Char) (O.+101)))
                                        (((String) (((Char) (O.+32)))
                                         (((String) (((Char) (O.+97)))
                                          (((String) (((Char) (O.+110)))
                                           (((String) (((Char) (O.+115)))
                                            (((String) (((Char) (O.+119)))
                                             (((String) (((Char) (O.+101)))
                                              (((String) (((Char) (O.+114)))
                                               (((String) (((Char) (O.+32)))
                                                (((String)
                                                 (((Char) (O.+105)))
                                                 (((String)
                                                  (((Char) (O.+115)))
                                                  (((String)
                                                   (((Char) (O.+32)))
                                                   (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))
                           (s)))
                          (((String) (((Char) (O.+46)))
                           (((String) (((Char) (O.+10))) (EmptyString)))))))) in close c) | S repeat ⇒ (fn (c : _) ⇒ let guess ⇐ (
                         (read_word) (())) in let c ⇐ ((send c)
                         (guess)) in let ⟨b, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in (
                         (match b as b0 in (∀ (_ : hc‹match b0 as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
                          (wordle_diff) (ans) (guess))} → ((wordle_loop)
                          (ans)
                          (repeat))›) ⊸ IO unit) with true ⇒ (ln (c : _) ⇒ let _ ⇐ (
                          (print)
                          (((String) (((Char) (O.+89)))
                           (((String) (((Char) (O.+111)))
                            (((String) (((Char) (O.+117)))
                             (((String) (((Char) (O.+32)))
                              (((String) (((Char) (O.+87)))
                               (((String) (((Char) (O.+105)))
                                (((String) (((Char) (O.+110)))
                                 (((String) (((Char) (O.+33)))
                                  (((String) (((Char) (O.+10)))
                                   (EmptyString)))))))))))))))))))) in close c) | false ⇒ (ln (c : _) ⇒ let ⟨diff, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in match diff as _ in _ with Word s
                          _ ⇒ let _ ⇐ ((print)
                          (((cats)
                           (((cats)
                            (((cats)
                             (((cats)
                              (((String) (((Char) (O.+73)))
                               (((String) (((Char) (O.+110)))
                                (((String) (((Char) (O.+99)))
                                 (((String) (((Char) (O.+111)))
                                  (((String) (((Char) (O.+114)))
                                   (((String) (((Char) (O.+114)))
                                    (((String) (((Char) (O.+101)))
                                     (((String) (((Char) (O.+99)))
                                      (((String) (((Char) (O.+116)))
                                       (((String) (((Char) (O.+44)))
                                        (((String) (((Char) (O.+32)))
                                         (((String) (((Char) (O.+104)))
                                          (((String) (((Char) (O.+105)))
                                           (((String) (((Char) (O.+110)))
                                            (((String) (((Char) (O.+116)))
                                             (((String) (((Char) (O.+58)))
                                              (((String) (((Char) (O.+32)))
                                               (EmptyString)))))))))))))))))))))))))))))))))))
                              (s)))
                             (((String) (((Char) (O.+46)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+89)))
                                (((String) (((Char) (O.+111)))
                                 (((String) (((Char) (O.+117)))
                                  (((String) (((Char) (O.+32)))
                                   (((String) (((Char) (O.+104)))
                                    (((String) (((Char) (O.+97)))
                                     (((String) (((Char) (O.+118)))
                                      (((String) (((Char) (O.+101)))
                                       (((String) (((Char) (O.+32)))
                                        (EmptyString)))))))))))))))))))))))))
                            (((string_of_nat) (repeat)))))
                           (((String) (((Char) (O.+32)))
                            (((String) (((Char) (O.+109)))
                             (((String) (((Char) (O.+111)))
                              (((String) (((Char) (O.+114)))
                               (((String) (((Char) (O.+101)))
                                (((String) (((Char) (O.+32)))
                                 (((String) (((Char) (O.+116)))
                                  (((String) (((Char) (O.+114)))
                                   (((String) (((Char) (O.+105)))
                                    (((String) (((Char) (O.+101)))
                                     (((String) (((Char) (O.+115)))
                                      (((String) (((Char) (O.+46)))
                                       (((String) (((Char) (O.+10)))
                                        (EmptyString)))))))))))))))))))))))))))))) in (
                          (player_loop) (ans) (repeat) (c))))
                         (c))))
(c))

program player‹› (c : wordle_hc) : IO unit = let ⟨{ans}, c⟩ ⇐ recv c in let ⟨repeat, c⟩ ⇐ recv c in let _ ⇐ (
(print)
(((String) (((Char) (O.+87)))
 (((String) (((Char) (O.+111)))
  (((String) (((Char) (O.+114)))
   (((String) (((Char) (O.+100)))
    (((String) (((Char) (O.+108)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+32)))
       (((String) (((Char) (O.+71)))
        (((String) (((Char) (O.+97)))
         (((String) (((Char) (O.+109)))
          (((String) (((Char) (O.+101)))
           (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))))))))) in let _ ⇐ (
(print)
(((String) (((Char) (O.+80)))
 (((String) (((Char) (O.+108)))
  (((String) (((Char) (O.+101)))
   (((String) (((Char) (O.+97)))
    (((String) (((Char) (O.+115)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+32)))
       (((String) (((Char) (O.+103)))
        (((String) (((Char) (O.+117)))
         (((String) (((Char) (O.+101)))
          (((String) (((Char) (O.+115)))
           (((String) (((Char) (O.+115)))
            (((String) (((Char) (O.+32)))
             (((String) (((Char) (O.+97)))
              (((String) (((Char) (O.+32)))
               (((String) (((Char) (O.+119)))
                (((String) (((Char) (O.+111)))
                 (((String) (((Char) (O.+114)))
                  (((String) (((Char) (O.+100)))
                   (((String) (((Char) (O.+32)))
                    (((String) (((Char) (O.+111)))
                     (((String) (((Char) (O.+102)))
                      (((String) (((Char) (O.+32)))
                       (((String) (((Char) (O.+108)))
                        (((String) (((Char) (O.+101)))
                         (((String) (((Char) (O.+110)))
                          (((String) (((Char) (O.+103)))
                           (((String) (((Char) (O.+116)))
                            (((String) (((Char) (O.+104)))
                             (((String) (((Char) (O.+32)))
                              (((String) (((Char) (O.+53)))
                               (((String) (((Char) (O.+46)))
                                (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) in let _ ⇐ (
(print)
(((cats)
 (((cats)
  (((String) (((Char) (O.+89)))
   (((String) (((Char) (O.+111)))
    (((String) (((Char) (O.+117)))
     (((String) (((Char) (O.+32)))
      (((String) (((Char) (O.+104)))
       (((String) (((Char) (O.+97)))
        (((String) (((Char) (O.+118)))
         (((String) (((Char) (O.+101)))
          (((String) (((Char) (O.+32))) (EmptyString)))))))))))))))))))
  (((string_of_nat) (repeat)))))
 (((String) (((Char) (O.+32)))
  (((String) (((Char) (O.+116)))
   (((String) (((Char) (O.+114)))
    (((String) (((Char) (O.+105)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+115)))
       (((String) (((Char) (O.+46)))
        (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))) in (
(player_loop) (ans) (repeat)
(c))

program server_loop‹› (ans : word) (repeat : nat) (c : ((loop_ch) 
(ans)
(repeat))) : IO unit = ((match repeat as repeat0 in (∀ (_ : ((loop_ch)
                         (ans)
                         (repeat0))) → IO unit) with O ⇒ (fn (c : _) ⇒ let c ⇐ (
                         (send c) (ans)) in let c ⇐ ((send c)
                         (refl)) in close c) | S repeat ⇒ (fn (c : _) ⇒ let ⟨guess, c⟩ ⇐ recv c in let b = (
                         (eqw) (ans) (guess)) in let c ⇐ ((send c)
                         (b)) in let c ⇐ ((send c)
                         (refl)) in ((match b as b0 in (∀ (_ : ch‹match b0 as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
                                      (wordle_diff) (ans)
                                      (guess))} → ((wordle_loop) (ans)
                                      (repeat))›) ⊸ IO unit) with true ⇒ (ln (c : _) ⇒ close c) | false ⇒ (ln (c : _) ⇒ let c ⇐ (
                                      (send c)
                                      (((wordle_diff) (ans) (guess)))) in let c ⇐ (
                                      (send c) (refl)) in ((server_loop)
                                      (ans) (repeat) (c))))
                         (c))))
(c))

program server‹› (c : wordle_ch) : IO unit = let repeat = O.+6 in let ans = (
(Word)
(((String) (((Char) (O.+119)))
 (((String) (((Char) (O.+111)))
  (((String) (((Char) (O.+114)))
   (((String) (((Char) (O.+108)))
    (((String) (((Char) (O.+100))) (EmptyString)))))))))))
(refl)) in let c ⇐ ((send c) (ans)) in let c ⇐ ((send c)
(repeat)) in ((server_loop) (ans) (repeat)
(c))

program main‹› : IO unit = let c ⇐ fork (c : wordle_ch) in ((server)
(c)) in let c0 ⇐ fork (c0 : ch‹?(_ : wordle_hc) → !(_ : unit) → end›) in let ⟨c, c0⟩ ⇐ recv c0 in let _ ⇐ (
(player) (c)) in let c0 ⇐ ((send c0)
(())) in close c0 in let c0 ⇐ ((send c0)
(c)) in let ⟨_, c0⟩ ⇐ recv c0 in close c0

parsing success--------------------------

inductive absurd_d1 : U =


logical absurd_elim_i1 ‹s_s527› :
  ∀ (A_v528 : Type‹s_s527›) → absurd_d1 → A_v528
=
  fn (A_v530 : Type‹s_s527›) (p_v531 : absurd_d1) ⇒
    match p_v531 as __v532 in ??1 with
    
    end

inductive order_d2 : U =
| LT_c1 of : order_d2 | GT_c2 of : order_d2 | EQ_c3 of : order_d2

program andb_i2 : bool → bool → bool =
  fn (b1_v535 : bool) (b2_v536 : bool) ⇒
    match b1_v535 as __v537 in ??2 with
    | true ⇒ b2_v536 | false ⇒ false
    end

program orb_i3 : bool → bool → bool =
  fn (b1_v540 : bool) (b2_v541 : bool) ⇒
    match b1_v540 as __v542 in ??3 with
    | true ⇒ true | false ⇒ b2_v541
    end

program notb_i4 : bool → bool =
  fn (b_v544 : bool) ⇒
    match b_v544 as __v545 in ??4 with
    | true ⇒ false | false ⇒ true
    end

program compareb_i5 : bool → bool → order_d2 =
  fn (b1_v548 : bool) (b2_v549 : bool) ⇒
    match b1_v548 as __v550 in ??5 with
    | true ⇒
      match b2_v549 as __v551 in ??7 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v549 as __v552 in ??6 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i6 : nat → nat → bool =
  fn (x_v555 : nat) (y_v556 : nat) ⇒
    match x_v555 as __v557 in ??8 with
    | O ⇒ true
    | S x_v558 ⇒
      match y_v556 as __v559 in ??9 with
      | O ⇒ false | S y_v560 ⇒ (lten_i6 x_v558 y_v560)
      end
    end

program gten_i7 : nat → nat → bool =
  fn (x_v563 : nat) (y_v564 : nat) ⇒
    match x_v563 as __v565 in ??10 with
    | O ⇒
      match y_v564 as __v566 in ??12 with
      | O ⇒ true | S __v567 ⇒ false
      end
    | S x_v568 ⇒
      match y_v564 as __v569 in ??11 with
      | O ⇒ true | S y_v570 ⇒ (gten_i7 x_v568 y_v570)
      end
    end

program ltn_i8 : nat → nat → bool =
  fn (x_v573 : nat) (y_v574 : nat) ⇒
    match x_v573 as __v575 in ??13 with
    | O ⇒
      match y_v574 as __v576 in ??15 with
      | O ⇒ false | S y_v577 ⇒ true
      end
    | S x_v578 ⇒
      match y_v574 as __v579 in ??14 with
      | O ⇒ false | S y_v580 ⇒ (ltn_i8 x_v578 y_v580)
      end
    end

program gtn_i9 : nat → nat → bool =
  fn (x_v583 : nat) (y_v584 : nat) ⇒
    match x_v583 as __v585 in ??16 with
    | O ⇒ false
    | S x_v586 ⇒
      match y_v584 as __v587 in ??17 with
      | O ⇒ true | S y_v588 ⇒ (gtn_i9 x_v586 y_v588)
      end
    end

program eqn_i10 : nat → nat → bool =
  fn (x_v591 : nat) (y_v592 : nat) ⇒
    match x_v591 as __v593 in ??18 with
    | O ⇒
      match y_v592 as __v594 in ??20 with
      | O ⇒ true | S __v595 ⇒ false
      end
    | S x_v596 ⇒
      match y_v592 as __v597 in ??19 with
      | O ⇒ false | S y_v598 ⇒ (eqn_i10 x_v596 y_v598)
      end
    end

program comparen_i11 : nat → nat → order_d2 =
  fn (n1_v601 : nat) (n2_v602 : nat) ⇒
    match n1_v601 as __v603 in ??21 with
    | O ⇒
      match n2_v602 as __v604 in ??23 with
      | O ⇒ EQ_c3‹› | S __v605 ⇒ LT_c1‹›
      end
    | S n1_v606 ⇒
      match n2_v602 as __v607 in ??22 with
      | O ⇒ GT_c2‹› | S n2_v608 ⇒ (comparen_i11 n1_v606 n2_v608)
      end
    end

program pred_i12 : nat → nat =
  fn (x_v610 : nat) ⇒
    match x_v610 as __v611 in ??24 with
    | O ⇒ 0 | S x_v612 ⇒ x_v612
    end

program addn_i13 : nat → nat → nat =
  fn (x_v615 : nat) (y_v616 : nat) ⇒
    match x_v615 as __v617 in ??25 with
    | O ⇒ y_v616 | S x_v618 ⇒ (addn_i13 x_v618 y_v616).+1
    end

program subn_i14 : nat → nat → nat =
  fn (x_v621 : nat) (y_v622 : nat) ⇒
    match y_v622 as __v623 in ??26 with
    | O ⇒ x_v621 | S y_v624 ⇒ (subn_i14 (pred_i12 x_v621) y_v624)
    end

program muln_i15 : nat → nat → nat =
  fn (x_v627 : nat) (y_v628 : nat) ⇒
    match x_v627 as __v629 in ??27 with
    | O ⇒ 0 | S x_v630 ⇒ (addn_i13 y_v628 (muln_i15 x_v630 y_v628))
    end

program divn_i16 : nat → nat → nat =
  fn (x_v633 : nat) (y_v634 : nat) ⇒
    match (ltn_i8 x_v633 y_v634) as __v635 in ??28 with
    | true ⇒ 0 | false ⇒ (divn_i16 (subn_i14 x_v633 y_v634) y_v634).+1
    end

program modn_i17 : nat → nat → nat =
  fn (x_v638 : nat) (y_v639 : nat) ⇒
    (subn_i14 x_v638 (muln_i15 (divn_i16 x_v638 y_v639) y_v639))

inductive between_d3 (lower_v640 : nat) (upper_v641 : nat) : L =
| Between_c4 of
    (lower_v642 : nat) (upper_v643 : nat) (n_v644 : nat)
    {pf1_v645 : (lten_i6 lower_v642 n_v644) ≡ true}
    {pf2_v646 : (lten_i6 n_v644 upper_v643) ≡ true}
    : (between_d3 lower_v642 upper_v643)

inductive char_d4 : U =
| Char_c5 of (n_v647 : nat) : char_d4

program eqc_i18 : char_d4 → char_d4 → bool =
  fn (c1_v650 : char_d4) (c2_v651 : char_d4) ⇒
    match c1_v650 as __v652 in ??31 with
    | Char_c5 n1_v653 ⇒
      match c2_v651 as __v654 in ??32 with
      | Char_c5 n2_v655 ⇒ (eqn_i10 n1_v653 n2_v655)
      end
    end

program comparec_i19 : char_d4 → char_d4 → order_d2 =
  fn (c1_v658 : char_d4) (c2_v659 : char_d4) ⇒
    match c1_v658 as __v660 in ??33 with
    | Char_c5 n1_v661 ⇒
      match c2_v659 as __v662 in ??34 with
      | Char_c5 n2_v663 ⇒ (comparen_i11 n1_v661 n2_v663)
      end
    end

inductive string_d5 : U =
| EmptyString_c6 of : string_d5
| String_c7 of (c_v664 : char_d4) (s_v665 : string_d5) : string_d5

program cats_i20 : string_d5 → string_d5 → string_d5 =
  fn (s1_v668 : string_d5) (s2_v669 : string_d5) ⇒
    match s1_v668 as __v670 in ??35 with
    | EmptyString_c6  ⇒ s2_v669
    | String_c7 c_v671 s1_v672 ⇒
      (String_c7‹› c_v671 (cats_i20 s1_v672 s2_v669))
    end

program strlen_i21 : string_d5 → nat =
  fn (s_v674 : string_d5) ⇒
    match s_v674 as __v675 in ??36 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v676 s_v677 ⇒ (strlen_i21 s_v677).+1
    end

program eqs_i22 : string_d5 → string_d5 → bool =
  fn (s1_v680 : string_d5) (s2_v681 : string_d5) ⇒
    match s1_v680 as __v682 in ??37 with
    | EmptyString_c6  ⇒
      match s2_v681 as __v683 in ??39 with
      | EmptyString_c6  ⇒ true | String_c7 __v684 __v685 ⇒ false
      end
    | String_c7 c1_v686 s1_v687 ⇒
      match s2_v681 as __v688 in ??38 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v689 s2_v690 ⇒
        (andb_i2 (eqc_i18 c1_v686 c2_v689) (eqs_i22 s1_v687 s2_v690))
      end
    end

program compares_i23 : string_d5 → string_d5 → order_d2 =
  fn (s1_v693 : string_d5) (s2_v694 : string_d5) ⇒
    match s1_v693 as __v695 in ??40 with
    | EmptyString_c6  ⇒
      match s2_v694 as __v696 in ??43 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v697 __v698 ⇒ LT_c1‹›
      end
    | String_c7 c1_v699 s1_v700 ⇒
      match s2_v694 as __v701 in ??41 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v702 s2_v703 ⇒
        match (comparec_i19 c1_v699 c2_v702) as __v704 in ??42 with
        | EQ_c3  ⇒ (compares_i23 s1_v700 s2_v703) | LT_c1  ⇒ LT_c1‹›
        | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d6 ‹s_s705, t_s706›
  (A_v707 : Type‹s_s705›) : Type‹t_s706›
=
| None_c8 of
    ‹s_s708, t_s709› (A_v710 : Type‹s_s708›)
    : (option_d6‹s_s708, t_s709› A_v710)
| Some_c9 of
    ‹s_s711, t_s712› (A_v713 : Type‹s_s711›) (x_v714 : A_v713)
    : (option_d6‹s_s711, t_s712› A_v713)

program and_then_i24 ‹s_s715, r_s716, t_s717› :
  ∀ {A_v718 : Type‹s_s715›} →
    ∀ {B_v719 : Type‹r_s716›} →
      (option_d6‹??44, t_s717› A_v718) →
        A_v718 → (option_d6‹??45, t_s717› B_v719) ⊸
          (option_d6‹??46, t_s717› B_v719)
=
  fn {A_v723 : Type‹s_s715›} {B_v724 : Type‹r_s716›}
     (opt_v725 : (option_d6‹??44, t_s717› A_v723)) ⇒
    ln (f_v726 : ??47) ⇒
      match opt_v725 as __v727 in ??48 with
      | None_c8  ⇒ None_c8‹??51, ??50›
      | Some_c9 x_v728 ⇒ (f_v726 x_v728)
      end

inductive list_d7 ‹s_s729, t_s730›
  (A_v731 : Type‹s_s729›) : Type‹t_s730›
=
| nil_c10 of
    ‹s_s732, t_s733› (A_v734 : Type‹s_s732›)
    : (list_d7‹s_s732, t_s733› A_v734)
| cons_c11 of
    ‹s_s735, t_s736› (A_v737 : Type‹s_s735›) (hd_v738 : A_v737)
    (tl_v739 : (list_d7‹s_s735, t_s736› A_v737))
    : (list_d7‹s_s735, t_s736› A_v737)

program len_i25 ‹s_s740, t_s741› :
  ∀ {A_v742 : Type‹s_s740›} →
    (list_d7‹??52, t_s741› A_v742) →
      nat ⊗ (list_d7‹??53, t_s741› A_v742)
=
  fn {A_v745 : Type‹s_s740›}
     (xs_v746 : (list_d7‹??52, t_s741› A_v745)) ⇒
    match xs_v746 as __v747 in ??54 with
    | nil_c10  ⇒ ⟨0, nil_c10‹??64, ??63›⟩
    | cons_c11 x_v748 xs_v749 ⇒
      match (len_i25‹??57, ??56› ??55 xs_v749) as __v750 in ??58 with
      | ⟨n_v751, xs_v752⟩ ⇒
        ⟨n_v751.+1, (cons_c11‹??61, ??60› x_v748 xs_v752)⟩
      end
    end

program append_i26 ‹s_s753, t_s754› :
  ∀ {A_v755 : Type‹s_s753›} →
    (list_d7‹??65, t_s754› A_v755) →
      (list_d7‹??66, t_s754› A_v755) ⊸ (list_d7‹??68, ??67› A_v755)
=
  fn {A_v758 : Type‹s_s753›}
     (xs_v759 : (list_d7‹??65, t_s754› A_v758)) ⇒
    ln (ys_v760 : ??69) ⇒
      match xs_v759 as __v761 in ??70 with
      | nil_c10  ⇒ ys_v760
      | cons_c11 x_v762 xs_v763 ⇒
        (cons_c11‹??76, ??75›
          x_v762 (append_i26‹??73, ??72› ??71 xs_v763 ys_v760))
      end

logical stdin_rec_i27 : unit → proto =
  fn (__v765 : unit) ⇒
    ⇑(b_v766 : bool) ⇒
      match b_v766 as __v767 in ??77 with
      | true ⇒ ⇓(__v768 : string_d5) ⇒ (stdin_rec_i27 ())
      | false ⇒ end
      end

logical stdout_rec_i28 : unit → proto =
  fn (__v770 : unit) ⇒
    ⇑(b_v771 : bool) ⇒
      match b_v771 as __v772 in ??78 with
      | true ⇒ ⇑(__v773 : string_d5) ⇒ (stdout_rec_i28 ())
      | false ⇒ end
      end

logical stderr_rec_i29 : unit → proto =
  fn (__v775 : unit) ⇒
    ⇑(b_v776 : bool) ⇒
      match b_v776 as __v777 in ??79 with
      | true ⇒ ⇑(__v778 : string_d5) ⇒ (stderr_rec_i29 ())
      | false ⇒ end
      end

logical stdin_t_i30 : proto = (stdin_rec_i27 ())

logical stdout_t_i31 : proto = (stdout_rec_i28 ())

logical stderr_t_i32 : proto = (stderr_rec_i29 ())

program readline_i33 : unit → IO string_d5 =
  fn (__v780 : unit) ⇒
    let ch_v781 ⇐ open stdin in
    let ch_v782 ⇐ (send ch_v781 true) in
    let __v783 ⇐ recv ch_v782 in
    match __v783 as __v784 in ??80 with
    | ⟨s_v785, ch_v786⟩ ⇒
      let ch_v787 ⇐ (send ch_v786 false) in
      let __v788 ⇐ close ch_v787 in return s_v785
    end

program print_i34 : string_d5 → IO unit =
  fn (s_v790 : string_d5) ⇒
    let ch_v791 ⇐ open stdout in
    let ch_v792 ⇐ (send ch_v791 true) in
    let ch_v793 ⇐ (send ch_v792 s_v790) in
    let ch_v794 ⇐ (send ch_v793 false) in close ch_v794

program prerr_i35 : string_d5 → IO unit =
  fn (s_v796 : string_d5) ⇒
    let ch_v797 ⇐ open stderr in
    let ch_v798 ⇐ (send ch_v797 true) in
    let ch_v799 ⇐ (send ch_v798 s_v796) in
    let ch_v800 ⇐ (send ch_v799 false) in close ch_v800

program digits_i36 : (list_d7‹??81, U› ??82) =
  (cons_c11‹??115, ??114›
    "0"
    (cons_c11‹??112, ??111›
      "1"
      (cons_c11‹??109, ??108›
        "2"
        (cons_c11‹??106, ??105›
          "3"
          (cons_c11‹??103, ??102›
            "4"
            (cons_c11‹??100, ??99›
              "5"
              (cons_c11‹??97, ??96›
                "6"
                (cons_c11‹??94, ??93›
                  "7"
                  (cons_c11‹??91, ??90›
                    "8"
                    (cons_c11‹??88, ??87› "9" nil_c10‹??85, ??84›))))))))))

program get_at_i37 :
  ∀ {A_v801 : U} →
    nat → (list_d7‹??116, U› A_v801) → A_v801 → A_v801
=
  fn {A_v805 : U} (n_v806 : nat) (xs_v807 : (list_d7‹??116, U› A_v805))
     (a_v808 : A_v805) ⇒
    match n_v806 as __v809 in ??117 with
    | O ⇒
      match xs_v807 as __v810 in ??120 with
      | nil_c10  ⇒ a_v808 | cons_c11 x_v811 __v812 ⇒ x_v811
      end
    | S n_v813 ⇒
      match xs_v807 as __v814 in ??118 with
      | nil_c10  ⇒ a_v808
      | cons_c11 __v815 xs_v816 ⇒ (get_at_i37 ??119 n_v813 xs_v816 a_v808)
      end
    end

program string_of_digit_i38 : nat → string_d5 =
  fn (n_v818 : nat) ⇒
    (get_at_i37 ??121 n_v818 digits_i36 EmptyString_c6‹›)

program string_of_nat_i39 : nat → string_d5 =
  fn (n_v820 : nat) ⇒
    let s_v821 = (string_of_digit_i38 (modn_i17 n_v820 10)) in
    let n_v822 = (divn_i16 n_v820 10) in
    match (ltn_i8 0 n_v822) as __v823 in ??122 with
    | true ⇒ (cats_i20 (string_of_nat_i39 n_v822) s_v821)
    | false ⇒ s_v821
    end

program digit_of_char_i40 : char_d4 → (option_d6‹??123, L› nat) =
  fn (c_v825 : char_d4) ⇒
    match (eqc_i18 c_v825 '0') as __v826 in ??124 with
    | true ⇒ (Some_c9‹??166, ??165› 0)
    | false ⇒
      match (eqc_i18 c_v825 '1') as __v827 in ??125 with
      | true ⇒ (Some_c9‹??163, ??162› 1)
      | false ⇒
        match (eqc_i18 c_v825 '2') as __v828 in ??126 with
        | true ⇒ (Some_c9‹??160, ??159› 2)
        | false ⇒
          match (eqc_i18 c_v825 '3') as __v829 in ??127 with
          | true ⇒ (Some_c9‹??157, ??156› 3)
          | false ⇒
            match (eqc_i18 c_v825 '4') as __v830 in ??128 with
            | true ⇒ (Some_c9‹??154, ??153› 4)
            | false ⇒
              match (eqc_i18 c_v825 '5') as __v831 in ??129 with
              | true ⇒ (Some_c9‹??151, ??150› 5)
              | false ⇒
                match (eqc_i18 c_v825 '6') as __v832 in ??130 with
                | true ⇒ (Some_c9‹??148, ??147› 6)
                | false ⇒
                  match (eqc_i18 c_v825 '7') as __v833 in ??131 with
                  | true ⇒ (Some_c9‹??145, ??144› 7)
                  | false ⇒
                    match (eqc_i18 c_v825 '8') as __v834 in ??132 with
                    | true ⇒ (Some_c9‹??142, ??141› 8)
                    | false ⇒
                      match (eqc_i18 c_v825 '9') as __v835 in ??133 with
                      | true ⇒ (Some_c9‹??139, ??138› 9)
                      | false ⇒ None_c8‹??136, ??135›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i41 :
  string_d5 → nat → (option_d6‹??167, L› nat)
=
  fn (s_v838 : string_d5) (acc_v839 : nat) ⇒
    match s_v838 as __v840 in ??168 with
    | EmptyString_c6  ⇒ (Some_c9‹??175, ??174› acc_v839)
    | String_c7 c_v841 s_v842 ⇒
      match (digit_of_char_i40 c_v841) as __v843 in ??169 with
      | None_c8  ⇒ None_c8‹??172, ??171›
      | Some_c9 n_v844 ⇒
        (nat_of_string_loop_i41
          s_v842 (addn_i13 (muln_i15 acc_v839 10) n_v844))
      end
    end

program nat_of_string_i42 : string_d5 → (option_d6‹??176, L› nat) =
  fn (s_v846 : string_d5) ⇒ (nat_of_string_loop_i41 s_v846 0)

logical eq_sym_i43 ‹s_s847› :
  ∀ (A_v848 : Type‹s_s847›) →
    ∀ (x_v849 : A_v848) →
      ∀ (y_v850 : A_v848) →
        ∀ (__v851 : x_v849 ≡ y_v850) → y_v850 ≡ x_v849
=
  fn (A_v852 : Type‹s_s847›) (x_v853 : A_v852) (y_v854 : A_v852)
     (e_v855 : ??179) ⇒
    rew [y_v856, __v857 ⇒ y_v856 ≡ x_v853] e_v855 in refl ??180

logical f_equal_i44 ‹s_s858, t_s859› :
  ∀ (A_v860 : Type‹s_s858›) →
    ∀ (B_v861 : Type‹t_s859›) →
      ∀ (f_v862 : A_v860 → B_v861) →
        ∀ (x_v864 : A_v860) →
          ∀ (y_v865 : A_v860) →
            ∀ (__v866 : x_v864 ≡ y_v865) →
              (f_v862 x_v864) ≡ (f_v862 y_v865)
=
  fn (A_v867 : Type‹s_s858›) (B_v868 : Type‹t_s859›)
     (f_v869 : A_v867 → B_v868) (x_v870 : A_v867) (y_v871 : A_v867)
     (e_v872 : ??184) ⇒
    rew [y_v874, p_v875 ⇒ (f_v869 x_v870) ≡ (f_v869 y_v874)] e_v872 in
    refl ??185

logical bool_absurd_i45 : true ≡ false → absurd_d1 =
  fn (e_v877 : true ≡ false) ⇒
    rew [x_v878, __v879 ⇒
      match x_v878 as __v880 in ??188 with
      | true ⇒ unit | false ⇒ absurd_d1
      end] e_v877 in
    ()

logical nat_absurd_i46 : ∀ (n_v881 : nat) → n_v881.+1 ≡ 0 → absurd_d1
=
  fn (n_v883 : nat) (e_v884 : n_v883.+1 ≡ 0) ⇒
    rew [x_v885, __v886 ⇒
      match x_v885 as __v887 in ??190 with
      | O ⇒ absurd_d1 | S __v888 ⇒ unit
      end] e_v884 in
    ()

logical nat_inv_i47 :
  ∀ (n1_v889 : nat) →
    ∀ (n2_v890 : nat) →
      ∀ (e_v891 : n1_v889.+1 ≡ n2_v890.+1) → n1_v889 ≡ n2_v890
=
  fn (n1_v892 : nat) (n2_v893 : nat) (e_v894 : n1_v892.+1 ≡ n2_v893.+1) ⇒
    (f_equal_i44‹??198, ??197› ??196 ??195 pred_i12 ??194 ??193 e_v894)

logical eqn_reflect_i48 :
  ∀ (m_v895 : nat) →
    ∀ (n_v896 : nat) →
      ∀ (__v897 : (eqn_i10 m_v895 n_v896) ≡ true) → m_v895 ≡ n_v896
=
  fn (m_v898 : nat) (n_v899 : nat) ⇒
    match m_v898 as m0_v900 in
      ∀ (__v901 : (eqn_i10 m0_v900 n_v899) ≡ true) → m0_v900 ≡ n_v899 with
    | O ⇒
      match n_v899 as n0_v902 in
        ∀ (__v903 : (eqn_i10 0 n0_v902) ≡ true) → 0 ≡ n0_v902 with
      | O ⇒ fn (__v904 : ??229) ⇒ refl ??230
      | S n_v905 ⇒
        fn (e_v906 : ??222) ⇒
          (absurd_elim_i1‹??228›
            ??227
            (bool_absurd_i45
              (eq_sym_i43‹??226› ??225 ??224 ??223 e_v906)))
      end
    | S m_v907 ⇒
      match n_v899 as n0_v908 in
        ∀ (__v909 : (eqn_i10 m_v907.+1 n0_v908) ≡ true) →
          m_v907.+1 ≡ n0_v908 with
      | O ⇒
        fn (e_v910 : ??213) ⇒
          (absurd_elim_i1‹??219›
            ??218
            (bool_absurd_i45
              (eq_sym_i43‹??217› ??216 ??215 ??214 e_v910)))
      | S n_v911 ⇒
        fn (e_v912 : ??205) ⇒
          (f_equal_i44‹??212, ??211›
            ??210 ??209 fn (x_v913 : ??208) ⇒ x_v913.+1 ??207 ??206
            (eqn_reflect_i48 m_v907 n_v911 e_v912))
      end
    end

inductive word_d8 : U =
| Word_c12 of
    (s_v914 : string_d5) {pf_v915 : (strlen_i21 s_v914) ≡ 5} : word_d8

program contains_i49 : char_d4 → string_d5 → bool =
  fn (c_v918 : char_d4) (s_v919 : string_d5) ⇒
    match s_v919 as __v920 in ??232 with
    | EmptyString_c6  ⇒ false
    | String_c7 c0_v921 s_v922 ⇒
      match (eqc_i18 c_v918 c0_v921) as __v923 in ??233 with
      | true ⇒ true | false ⇒ (contains_i49 c_v918 s_v922)
      end
    end

program string_diff_i50 : string_d5 → string_d5 → string_d5 → string_d5
=
  fn (ans_v927 : string_d5) (s1_v928 : string_d5) (s2_v929 : string_d5) ⇒
    match s1_v928 as __v930 in ??234 with
    | EmptyString_c6  ⇒ EmptyString_c6‹›
    | String_c7 c1_v931 s1_v932 ⇒
      match s2_v929 as __v933 in ??235 with
      | EmptyString_c6  ⇒ EmptyString_c6‹›
      | String_c7 c2_v934 s2_v935 ⇒
        match (eqc_i18 c1_v931 c2_v934) as __v936 in ??236 with
        | true ⇒ (cats_i20 "Y" (string_diff_i50 ans_v927 s1_v932 s2_v935))
        | false ⇒
          match (contains_i49 c2_v934 ans_v927) as __v937 in ??237 with
          | true ⇒
            (cats_i20 "I" (string_diff_i50 ans_v927 s1_v932 s2_v935))
          | false ⇒
            (cats_i20 "N" (string_diff_i50 ans_v927 s1_v932 s2_v935))
          end
        end
      end
    end

logical string_diff_len_i51 :
  ∀ (n_v938 : nat) →
    ∀ (ans_v939 : string_d5) →
      ∀ (s1_v940 : string_d5) →
        ∀ (s2_v941 : string_d5) →
          ∀ (__v942 : n_v938 ≡ (strlen_i21 s1_v940)) →
            ∀ (__v943 : n_v938 ≡ (strlen_i21 s2_v941)) →
              n_v938 ≡
                (strlen_i21 (string_diff_i50 ans_v939 s1_v940 s2_v941))
=
  fn (n_v944 : nat) (ans_v945 : string_d5) (s1_v946 : string_d5)
     (s2_v947 : string_d5) ⇒
    match s1_v946 as s0_v948 in
      ∀ (__v949 : n_v944 ≡ (strlen_i21 s0_v948)) →
        ∀ (__v950 : n_v944 ≡ (strlen_i21 s2_v947)) →
          n_v944 ≡ (strlen_i21 (string_diff_i50 ans_v945 s0_v948 s2_v947)) with
    | EmptyString_c6  ⇒
      match s2_v947 as s0_v951 in
        ∀ (__v952 : n_v944 ≡ 0) →
          ∀ (__v953 : n_v944 ≡ (strlen_i21 s0_v951)) → n_v944 ≡ 0 with
      | EmptyString_c6  ⇒ fn (e1_v954 : ??302) (__v955 : ??303) ⇒ e1_v954
      | String_c7 c2_v956 s2_v957 ⇒
        fn (e1_v958 : ??296) (e2_v959 : ??297) ⇒
          let e3_v960 =
            rew [n_v961, __v962 ⇒ n_v961 ≡ 0] e2_v959 in e1_v958
          in (absurd_elim_i1‹??301› ??300 (nat_absurd_i46 ??299 e3_v960))
      end
    | String_c7 c1_v963 s1_v964 ⇒
      match s2_v947 as s0_v965 in
        ∀ (__v966 :
          n_v944 ≡ (strlen_i21 (String_c7‹› c1_v963 s1_v964))) →
          ∀ (__v967 : n_v944 ≡ (strlen_i21 s0_v965)) →
            n_v944 ≡
              (strlen_i21
                (string_diff_i50
                  ans_v945 (String_c7‹› c1_v963 s1_v964) s0_v965)) with
      | EmptyString_c6  ⇒
        fn (e1_v968 : ??287) (e2_v969 : ??288) ⇒
          let e3_v970 =
            rew [n_v971, __v972 ⇒ n_v971 ≡ 0] e1_v968 in e2_v969
          in (absurd_elim_i1‹??292› ??291 (nat_absurd_i46 ??290 e3_v970))
      | String_c7 c2_v973 s2_v974 ⇒
        fn (e1_v975 : ??247) (e2_v976 : ??248) ⇒
          (match n_v944 as n0_v977 in
             ∀ (__v978 : n_v944 ≡ n0_v977) →
               n0_v977 ≡
                 (strlen_i21
                   (string_diff_i50
                     ans_v945 (String_c7‹› c1_v963 s1_v964)
                     (String_c7‹› c2_v973 s2_v974))) with
           | O ⇒
             fn (e0_v979 : ??281) ⇒
               let e3_v980 =
                 rew [n_v981, __v982 ⇒ n_v981 ≡ 0] e1_v975 in e0_v979
               in
               (absurd_elim_i1‹??285›
                 ??284 (nat_absurd_i46 ??283 e3_v980))
           | S n0_v983 ⇒
             fn (e0_v984 : ??251) ⇒
               let e3_v985 =
                 rew [n1_v986, __v987 ⇒
                   n1_v986 ≡ (strlen_i21 s1_v964).+1] e0_v984 in
                 e1_v975
               in
               let e4_v988 =
                 rew [n1_v989, __v990 ⇒
                   n1_v989 ≡ (strlen_i21 s2_v974).+1] e0_v984 in
                 e2_v976
               in
               let e5_v991 = (nat_inv_i47 ??255 ??254 e3_v985) in
               let e6_v992 = (nat_inv_i47 ??257 ??256 e4_v988) in
               match (eqc_i18 c1_v963 c2_v973) as b0_v993 in
                 n0_v983.+1 ≡
                   (strlen_i21
                     match b0_v993 as __v994 in ??258 with
                     | true ⇒
                       (cats_i20
                         "Y" (string_diff_i50 ans_v945 s1_v964 s2_v974))
                     | false ⇒
                       match (contains_i49 c2_v973 ans_v945) as __v995 in
                         ??259 with
                       | true ⇒
                         (cats_i20
                           "I" (string_diff_i50 ans_v945 s1_v964 s2_v974))
                       | false ⇒
                         (cats_i20
                           "N" (string_diff_i50 ans_v945 s1_v964 s2_v974))
                       end
                     end) with
               | true ⇒
                 rew [n1_v996, __v997 ⇒ n0_v983.+1 ≡ n1_v996.+1]
                   (string_diff_len_i51
                     ??278 ??277 ??276 ??275 e5_v991 e6_v992) in
                 refl ??279
               | false ⇒
                 match (contains_i49 c2_v973 ans_v945) as b0_v998 in
                   n0_v983.+1 ≡
                     (strlen_i21
                       match b0_v998 as __v999 in ??261 with
                       | true ⇒
                         (cats_i20
                           "I" (string_diff_i50 ans_v945 s1_v964 s2_v974))
                       | false ⇒
                         (cats_i20
                           "N" (string_diff_i50 ans_v945 s1_v964 s2_v974))
                       end) with
                 | true ⇒
                   rew [n1_v1000, __v1001 ⇒ n0_v983.+1 ≡ n1_v1000.+1]
                     (string_diff_len_i51
                       ??272 ??271 ??270 ??269 e5_v991 e6_v992) in
                   refl ??273
                 | false ⇒
                   rew [n1_v1002, __v1003 ⇒ n0_v983.+1 ≡ n1_v1002.+1]
                     (string_diff_len_i51
                       ??266 ??265 ??264 ??263 e5_v991 e6_v992) in
                   refl ??267
                 end
               end
           end refl ??286)
      end
    end

program wordle_diff_i52 : word_d8 → word_d8 → word_d8 =
  fn (ans_v1006 : word_d8) (guess_v1007 : word_d8) ⇒
    match ans_v1006 as __v1008 in ??304 with
    | Word_c12 ans_v1009 pf1_v1010 ⇒
      match guess_v1007 as __v1011 in ??305 with
      | Word_c12 guess_v1012 pf2_v1013 ⇒
        let {pf1_v1014} = (eq_sym_i43‹??309› ??308 ??307 ??306 pf1_v1010)
        in
        let {pf2_v1015} = (eq_sym_i43‹??313› ??312 ??311 ??310 pf2_v1013)
        in
        let {pf_v1016} =
          (string_diff_len_i51 ??317 ??316 ??315 ??314 pf1_v1014 pf2_v1015)
        in
        (Word_c12‹›
          (string_diff_i50 ans_v1009 ans_v1009 guess_v1012)
          (eq_sym_i43‹??321› ??320 ??319 ??318 pf_v1016))
      end
    end

program eqw_i53 : word_d8 → word_d8 → bool =
  fn (w1_v1019 : word_d8) (w2_v1020 : word_d8) ⇒
    match w1_v1019 as __v1021 in ??322 with
    | Word_c12 s1_v1022 __v1023 ⇒
      match w2_v1020 as __v1024 in ??323 with
      | Word_c12 s2_v1025 __v1026 ⇒ (eqs_i22 s1_v1022 s2_v1025)
      end
    end

logical wordle_loop_i54 : word_d8 → nat → proto =
  fn (ans_v1029 : word_d8) (repeat_v1030 : nat) ⇒
    match repeat_v1030 as __v1031 in ??324 with
    | O ⇒
      ⇑(w_v1032 : word_d8) ⇒ ⇑{__v1033 : w_v1032 ≡ ans_v1029} ⇒ end
    | S repeat_v1034 ⇒
      ⇓(guess_v1035 : word_d8) ⇒
        ⇑(b_v1036 : bool) ⇒
          ⇑{__v1037 : b_v1036 ≡ (eqw_i53 ans_v1029 guess_v1035)} ⇒
            match b_v1036 as __v1038 in ??326 with
            | true ⇒ end
            | false ⇒
              ⇑(w_v1039 : word_d8) ⇒
                ⇑{__v1040 :
                  w_v1039 ≡ (wordle_diff_i52 ans_v1029 guess_v1035)} ⇒
                  (wordle_loop_i54 ans_v1029 repeat_v1034)
            end
    end

logical wordle_i55 : proto =
  ⇑{ans_v1041 : word_d8} ⇒
    ⇑(repeat_v1042 : nat) ⇒ (wordle_loop_i54 ans_v1041 repeat_v1042)

logical loop_ch_i56 : word_d8 → nat → L =
  fn (ans_v1045 : word_d8) (repeat_v1046 : nat) ⇒
    ch⟨(wordle_loop_i54 ans_v1045 repeat_v1046)⟩

logical loop_hc_i57 : word_d8 → nat → L =
  fn (ans_v1049 : word_d8) (repeat_v1050 : nat) ⇒
    hc⟨(wordle_loop_i54 ans_v1049 repeat_v1050)⟩

logical wordle_ch_i58 : L = ch⟨wordle_i55⟩

logical wordle_hc_i59 : L = hc⟨wordle_i55⟩

program read_word_i60 : unit → IO word_d8 =
  fn (__v1052 : unit) ⇒
    let s_v1053 ⇐ (readline_i33 ()) in
    (match (eqn_i10 (strlen_i21 s_v1053) 5) as b0_v1054 in
       {(eqn_i10 (strlen_i21 s_v1053) 5) ≡ b0_v1054} → IO word_d8 with
     | true ⇒
       fn {e_v1056 : ??331} ⇒
         return (Word_c12‹›
                  s_v1053 (eqn_reflect_i48 ??333 ??332 e_v1056))
     | false ⇒
       fn {__v1057 : ??330} ⇒
         let __v1058 ⇐ (print_i34 "please input a word with length of 5\n")
         in (read_word_i60 ())
     end refl ??334)

program player_loop_i61 :
  ∀ {ans_v1059 : word_d8} →
    ∀ (repeat_v1060 : nat) →
      (loop_hc_i57 ans_v1059 repeat_v1060) → IO unit
=
  fn {ans_v1062 : word_d8} (repeat_v1063 : nat)
     (c_v1064 : (loop_hc_i57 ans_v1062 repeat_v1063)) ⇒
    (match repeat_v1063 as repeat0_v1065 in
       (loop_hc_i57 ans_v1062 repeat0_v1065) → IO unit with
     | O ⇒
       fn (c_v1067 : ??345) ⇒
         let __v1068 ⇐ recv c_v1067 in
         match __v1068 as __v1069 in ??348 with
         | ⟨ans_v1070, c_v1071⟩ ⇒
           let __v1072 ⇐ recv c_v1071 in
           match __v1072 as __v1073 in ??347 with
           | ⟨{pf_v1074}, c_v1075⟩ ⇒
             match ans_v1070 as __v1076 in ??346 with
             | Word_c12 s_v1077 __v1078 ⇒
               let __v1079 ⇐
                 (print_i34
                   (cats_i20
                     (cats_i20 "You Lose! The answer is " s_v1077) ".\n"))
               in close c_v1075
             end
           end
         end
     | S repeat_v1080 ⇒
       fn (c_v1081 : ??335) ⇒
         let guess_v1082 ⇐ (read_word_i60 ()) in
         let c_v1083 ⇐ (send c_v1081 guess_v1082) in
         let __v1084 ⇐ recv c_v1083 in
         match __v1084 as __v1085 in ??344 with
         | ⟨b_v1086, c_v1087⟩ ⇒
           let __v1088 ⇐ recv c_v1087 in
           match __v1088 as __v1089 in ??343 with
           | ⟨{pf_v1090}, c_v1091⟩ ⇒
             (match b_v1086 as b0_v1092 in
                hc⟨match b0_v1092 as __v1094 in ??336 with
                     | true ⇒ end
                     | false ⇒
                       ⇑(w_v1095 : word_d8) ⇒
                         ⇑{__v1096 :
                           w_v1095 ≡
                             (wordle_diff_i52 ans_v1062 guess_v1082)} ⇒
                           (wordle_loop_i54 ans_v1062 repeat_v1080)
                     end⟩ ⊸
                  IO unit with
              | true ⇒
                ln (c_v1097 : ??342) ⇒
                  let __v1098 ⇐ (print_i34 "You Win!\n") in close c_v1097
              | false ⇒
                ln (c_v1099 : ??338) ⇒
                  let __v1100 ⇐ recv c_v1099 in
                  match __v1100 as __v1101 in ??341 with
                  | ⟨diff_v1102, c_v1103⟩ ⇒
                    let __v1104 ⇐ recv c_v1103 in
                    match __v1104 as __v1105 in ??340 with
                    | ⟨{pf_v1106}, c_v1107⟩ ⇒
                      match diff_v1102 as __v1108 in ??339 with
                      | Word_c12 s_v1109 __v1110 ⇒
                        let __v1111 ⇐
                          (print_i34
                            (cats_i20
                              (cats_i20
                                (cats_i20
                                  (cats_i20 "Incorrect, hint: " s_v1109)
                                  ". You have ")
                                (string_of_nat_i39 repeat_v1080))
                              " more tries.\n"))
                        in (player_loop_i61 ans_v1062 repeat_v1080 c_v1107)
                      end
                    end
                  end
              end c_v1091)
           end
         end
     end c_v1064)

program player_i62 : wordle_hc_i59 → IO unit =
  fn (c_v1113 : wordle_hc_i59) ⇒
    let __v1114 ⇐ recv c_v1113 in
    match __v1114 as __v1115 in ??350 with
    | ⟨{ans_v1116}, c_v1117⟩ ⇒
      let __v1118 ⇐ recv c_v1117 in
      match __v1118 as __v1119 in ??349 with
      | ⟨repeat_v1120, c_v1121⟩ ⇒
        let __v1122 ⇐ (print_i34 "Wordle Game\n") in
        let __v1123 ⇐ (print_i34 "Please guess a word of length 5.\n") in
        let __v1124 ⇐
          (print_i34
            (cats_i20
              (cats_i20 "You have " (string_of_nat_i39 repeat_v1120))
              " tries.\n"))
        in (player_loop_i61 ans_v1116 repeat_v1120 c_v1121)
      end
    end

program server_loop_i63 :
  ∀ (ans_v1125 : word_d8) →
    ∀ (repeat_v1126 : nat) →
      (loop_ch_i56 ans_v1125 repeat_v1126) → IO unit
=
  fn (ans_v1128 : word_d8) (repeat_v1129 : nat)
     (c_v1130 : (loop_ch_i56 ans_v1128 repeat_v1129)) ⇒
    (match repeat_v1129 as repeat0_v1131 in
       (loop_ch_i56 ans_v1128 repeat0_v1131) → IO unit with
     | O ⇒
       fn (c_v1133 : ??359) ⇒
         let c_v1134 ⇐ (send c_v1133 ans_v1128) in
         let c_v1135 ⇐ (send c_v1134 refl ??360) in close c_v1135
     | S repeat_v1136 ⇒
       fn (c_v1137 : ??351) ⇒
         let __v1138 ⇐ recv c_v1137 in
         match __v1138 as __v1139 in ??358 with
         | ⟨guess_v1140, c_v1141⟩ ⇒
           let b_v1142 = (eqw_i53 ans_v1128 guess_v1140) in
           let c_v1143 ⇐ (send c_v1141 b_v1142) in
           let c_v1144 ⇐ (send c_v1143 refl ??352) in
           (match b_v1142 as b0_v1145 in
              ch⟨match b0_v1145 as __v1147 in ??353 with
                   | true ⇒ end
                   | false ⇒
                     ⇑(w_v1148 : word_d8) ⇒
                       ⇑{__v1149 :
                         w_v1148 ≡ (wordle_diff_i52 ans_v1128 guess_v1140)} ⇒
                         (wordle_loop_i54 ans_v1128 repeat_v1136)
                   end⟩ ⊸
                IO unit with
            | true ⇒ ln (c_v1150 : ??357) ⇒ close c_v1150
            | false ⇒
              ln (c_v1151 : ??355) ⇒
                let c_v1152 ⇐
                  (send c_v1151 (wordle_diff_i52 ans_v1128 guess_v1140))
                in
                let c_v1153 ⇐ (send c_v1152 refl ??356) in
                (server_loop_i63 ans_v1128 repeat_v1136 c_v1153)
            end c_v1144)
         end
     end c_v1130)

program server_i64 : wordle_ch_i58 → IO unit =
  fn (c_v1155 : wordle_ch_i58) ⇒
    let repeat_v1156 = 6 in
    let ans_v1157 = (Word_c12‹› "world" refl ??361) in
    let c_v1158 ⇐ (send c_v1155 ans_v1157) in
    let c_v1159 ⇐ (send c_v1158 repeat_v1156) in
    (server_loop_i63 ans_v1157 repeat_v1156 c_v1159)

program main_i65 : IO unit =
  let c_v1160 ⇐ fork (c_v1161 : wordle_ch_i58) in (server_i64 c_v1161) in
  let c0_v1162 ⇐
    fork (c0_v1163 :
      ch⟨⇓(__v1164 : wordle_hc_i59) ⇒ ⇑(__v1165 : unit) ⇒ end⟩)
    in
      let __v1166 ⇐ recv c0_v1163 in
      match __v1166 as __v1167 in ??362 with
      | ⟨c_v1168, c0_v1169⟩ ⇒
        let __v1170 ⇐ (player_i62 c_v1168) in
        let c0_v1171 ⇐ (send c0_v1169 ()) in close c0_v1171
      end
  in
  let c0_v1172 ⇐ (send c0_v1162 c_v1160) in
  let __v1173 ⇐ recv c0_v1172 in
  match __v1173 as __v1174 in ??363 with
  | ⟨__v1175, c0_v1176⟩ ⇒ close c0_v1176
  end

trans01 success--------------------------

inductive absurd_d1 : U =


logical absurd_elim_i1 ‹s_s153108› :
  ∀ (A_v153109 : Type‹s_s153108›) → absurd_d1 → A_v153109
=
  fn (A_v153111 : Type‹s_s153108›) (p_v153112 : absurd_d1) ⇒
    match p_v153112 as __v153113 in A_v153111 with
    
    end

inductive order_d2 : U =
| LT_c1 of : order_d2 | GT_c2 of : order_d2 | EQ_c3 of : order_d2

program andb_i2 : bool → bool → bool =
  fn (b1_v153116 : bool) (b2_v153117 : bool) ⇒
    match b1_v153116 as __v153118 in bool with
    | true ⇒ b2_v153117 | false ⇒ false
    end

program orb_i3 : bool → bool → bool =
  fn (b1_v153121 : bool) (b2_v153122 : bool) ⇒
    match b1_v153121 as __v153123 in bool with
    | true ⇒ true | false ⇒ b2_v153122
    end

program notb_i4 : bool → bool =
  fn (b_v153125 : bool) ⇒
    match b_v153125 as __v153126 in bool with
    | true ⇒ false | false ⇒ true
    end

program compareb_i5 : bool → bool → order_d2 =
  fn (b1_v153129 : bool) (b2_v153130 : bool) ⇒
    match b1_v153129 as __v153131 in order_d2 with
    | true ⇒
      match b2_v153130 as __v153132 in order_d2 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v153130 as __v153133 in order_d2 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i6 : nat → nat → bool =
  fn (x_v153136 : nat) (y_v153137 : nat) ⇒
    match x_v153136 as __v153138 in bool with
    | O ⇒ true
    | S x_v153139 ⇒
      match y_v153137 as __v153140 in bool with
      | O ⇒ false | S y_v153141 ⇒ (lten_i6 x_v153139 y_v153141)
      end
    end

program gten_i7 : nat → nat → bool =
  fn (x_v153144 : nat) (y_v153145 : nat) ⇒
    match x_v153144 as __v153146 in bool with
    | O ⇒
      match y_v153145 as __v153147 in bool with
      | O ⇒ true | S __v153148 ⇒ false
      end
    | S x_v153149 ⇒
      match y_v153145 as __v153150 in bool with
      | O ⇒ true | S y_v153151 ⇒ (gten_i7 x_v153149 y_v153151)
      end
    end

program ltn_i8 : nat → nat → bool =
  fn (x_v153154 : nat) (y_v153155 : nat) ⇒
    match x_v153154 as __v153156 in bool with
    | O ⇒
      match y_v153155 as __v153157 in bool with
      | O ⇒ false | S y_v153158 ⇒ true
      end
    | S x_v153159 ⇒
      match y_v153155 as __v153160 in bool with
      | O ⇒ false | S y_v153161 ⇒ (ltn_i8 x_v153159 y_v153161)
      end
    end

program gtn_i9 : nat → nat → bool =
  fn (x_v153164 : nat) (y_v153165 : nat) ⇒
    match x_v153164 as __v153166 in bool with
    | O ⇒ false
    | S x_v153167 ⇒
      match y_v153165 as __v153168 in bool with
      | O ⇒ true | S y_v153169 ⇒ (gtn_i9 x_v153167 y_v153169)
      end
    end

program eqn_i10 : nat → nat → bool =
  fn (x_v153172 : nat) (y_v153173 : nat) ⇒
    match x_v153172 as __v153174 in bool with
    | O ⇒
      match y_v153173 as __v153175 in bool with
      | O ⇒ true | S __v153176 ⇒ false
      end
    | S x_v153177 ⇒
      match y_v153173 as __v153178 in bool with
      | O ⇒ false | S y_v153179 ⇒ (eqn_i10 x_v153177 y_v153179)
      end
    end

program comparen_i11 : nat → nat → order_d2 =
  fn (n1_v153182 : nat) (n2_v153183 : nat) ⇒
    match n1_v153182 as __v153184 in order_d2 with
    | O ⇒
      match n2_v153183 as __v153185 in order_d2 with
      | O ⇒ EQ_c3‹› | S __v153186 ⇒ LT_c1‹›
      end
    | S n1_v153187 ⇒
      match n2_v153183 as __v153188 in order_d2 with
      | O ⇒ GT_c2‹›
      | S n2_v153189 ⇒ (comparen_i11 n1_v153187 n2_v153189)
      end
    end

program pred_i12 : nat → nat =
  fn (x_v153191 : nat) ⇒
    match x_v153191 as __v153192 in nat with
    | O ⇒ 0 | S x_v153193 ⇒ x_v153193
    end

program addn_i13 : nat → nat → nat =
  fn (x_v153196 : nat) (y_v153197 : nat) ⇒
    match x_v153196 as __v153198 in nat with
    | O ⇒ y_v153197 | S x_v153199 ⇒ (addn_i13 x_v153199 y_v153197).+1
    end

program subn_i14 : nat → nat → nat =
  fn (x_v153202 : nat) (y_v153203 : nat) ⇒
    match y_v153203 as __v153204 in nat with
    | O ⇒ x_v153202
    | S y_v153205 ⇒ (subn_i14 (pred_i12 x_v153202) y_v153205)
    end

program muln_i15 : nat → nat → nat =
  fn (x_v153208 : nat) (y_v153209 : nat) ⇒
    match x_v153208 as __v153210 in nat with
    | O ⇒ 0
    | S x_v153211 ⇒ (addn_i13 y_v153209 (muln_i15 x_v153211 y_v153209))
    end

program divn_i16 : nat → nat → nat =
  fn (x_v153214 : nat) (y_v153215 : nat) ⇒
    match (ltn_i8 x_v153214 y_v153215) as __v153216 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i16 (subn_i14 x_v153214 y_v153215) y_v153215).+1
    end

program modn_i17 : nat → nat → nat =
  fn (x_v153219 : nat) (y_v153220 : nat) ⇒
    (subn_i14 x_v153219 (muln_i15 (divn_i16 x_v153219 y_v153220) y_v153220))

inductive between_d3 (lower_v153221 : nat) (upper_v153222 : nat) : L =
| Between_c4 of
    (lower_v153223 : nat) (upper_v153224 : nat) (n_v153225 : nat)
    {pf1_v153226 : (lten_i6 lower_v153223 n_v153225) ≡ true}
    {pf2_v153227 : (lten_i6 n_v153225 upper_v153224) ≡ true}
    : (between_d3 lower_v153223 upper_v153224)

inductive char_d4 : U =
| Char_c5 of (n_v153228 : nat) : char_d4

program eqc_i18 : char_d4 → char_d4 → bool =
  fn (c1_v153231 : char_d4) (c2_v153232 : char_d4) ⇒
    match c1_v153231 as __v153233 in bool with
    | Char_c5 n1_v153234 ⇒
      match c2_v153232 as __v153235 in bool with
      | Char_c5 n2_v153236 ⇒ (eqn_i10 n1_v153234 n2_v153236)
      end
    end

program comparec_i19 : char_d4 → char_d4 → order_d2 =
  fn (c1_v153239 : char_d4) (c2_v153240 : char_d4) ⇒
    match c1_v153239 as __v153241 in order_d2 with
    | Char_c5 n1_v153242 ⇒
      match c2_v153240 as __v153243 in order_d2 with
      | Char_c5 n2_v153244 ⇒ (comparen_i11 n1_v153242 n2_v153244)
      end
    end

inductive string_d5 : U =
| EmptyString_c6 of : string_d5
| String_c7 of (c_v153245 : char_d4) (s_v153246 : string_d5) : string_d5

program cats_i20 : string_d5 → string_d5 → string_d5 =
  fn (s1_v153249 : string_d5) (s2_v153250 : string_d5) ⇒
    match s1_v153249 as __v153251 in string_d5 with
    | EmptyString_c6  ⇒ s2_v153250
    | String_c7 c_v153252 s1_v153253 ⇒
      (String_c7‹› c_v153252 (cats_i20 s1_v153253 s2_v153250))
    end

program strlen_i21 : string_d5 → nat =
  fn (s_v153255 : string_d5) ⇒
    match s_v153255 as __v153256 in nat with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v153257 s_v153258 ⇒ (strlen_i21 s_v153258).+1
    end

program eqs_i22 : string_d5 → string_d5 → bool =
  fn (s1_v153261 : string_d5) (s2_v153262 : string_d5) ⇒
    match s1_v153261 as __v153263 in bool with
    | EmptyString_c6  ⇒
      match s2_v153262 as __v153264 in bool with
      | EmptyString_c6  ⇒ true | String_c7 __v153265 __v153266 ⇒ false
      end
    | String_c7 c1_v153267 s1_v153268 ⇒
      match s2_v153262 as __v153269 in bool with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v153270 s2_v153271 ⇒
        (andb_i2
          (eqc_i18 c1_v153267 c2_v153270) (eqs_i22 s1_v153268 s2_v153271))
      end
    end

program compares_i23 : string_d5 → string_d5 → order_d2 =
  fn (s1_v153274 : string_d5) (s2_v153275 : string_d5) ⇒
    match s1_v153274 as __v153276 in order_d2 with
    | EmptyString_c6  ⇒
      match s2_v153275 as __v153277 in order_d2 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v153278 __v153279 ⇒ LT_c1‹›
      end
    | String_c7 c1_v153280 s1_v153281 ⇒
      match s2_v153275 as __v153282 in order_d2 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v153283 s2_v153284 ⇒
        match (comparec_i19 c1_v153280 c2_v153283) as __v153285 in
          order_d2 with
        | EQ_c3  ⇒ (compares_i23 s1_v153281 s2_v153284)
        | LT_c1  ⇒ LT_c1‹› | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d6 ‹s_s153286, t_s153287›
  (A_v153288 : Type‹s_s153286›) : Type‹t_s153287›
=
| None_c8 of
    ‹s_s153289, t_s153290› (A_v153291 : Type‹s_s153289›)
    : (option_d6‹s_s153289, t_s153290› A_v153291)
| Some_c9 of
    ‹s_s153292, t_s153293› (A_v153294 : Type‹s_s153292›)
    (x_v153295 : A_v153294) : (option_d6‹s_s153292, t_s153293› A_v153294)

program and_then_i24 ‹s_s153296, r_s153297, t_s153298› :
  ∀ {A_v153299 : Type‹s_s153296›} →
    ∀ {B_v153300 : Type‹r_s153297›} →
      (option_d6‹s_s153296, t_s153298› A_v153299) →
        A_v153299 → (option_d6‹r_s153297, t_s153298› B_v153300) ⊸
          (option_d6‹r_s153297, t_s153298› B_v153300)
=
  fn {A_v153304 : Type‹s_s153296›} {B_v153305 : Type‹r_s153297›}
     (opt_v153306 : (option_d6‹s_s153296, t_s153298› A_v153304)) ⇒
    ln (f_v153307 : A_v153304 →
                      (option_d6‹r_s153297, t_s153298› B_v153305)) ⇒
      match opt_v153306 as __v153309 in
        (option_d6‹r_s153297, t_s153298› B_v153305) with
      | None_c8  ⇒ None_c8‹r_s153297, t_s153298›
      | Some_c9 x_v153310 ⇒ (f_v153307 x_v153310)
      end

inductive list_d7 ‹s_s153311, t_s153312›
  (A_v153313 : Type‹s_s153311›) : Type‹t_s153312›
=
| nil_c10 of
    ‹s_s153314, t_s153315› (A_v153316 : Type‹s_s153314›)
    : (list_d7‹s_s153314, t_s153315› A_v153316)
| cons_c11 of
    ‹s_s153317, t_s153318› (A_v153319 : Type‹s_s153317›)
    (hd_v153320 : A_v153319)
    (tl_v153321 : (list_d7‹s_s153317, t_s153318› A_v153319))
    : (list_d7‹s_s153317, t_s153318› A_v153319)

program len_i25 ‹s_s153322, t_s153323› :
  ∀ {A_v153324 : Type‹s_s153322›} →
    (list_d7‹s_s153322, t_s153323› A_v153324) →
      nat ⊗ (list_d7‹s_s153322, t_s153323› A_v153324)
=
  fn {A_v153327 : Type‹s_s153322›}
     (xs_v153328 : (list_d7‹s_s153322, t_s153323› A_v153327)) ⇒
    match xs_v153328 as __v153329 in
      nat ⊗ (list_d7‹s_s153322, t_s153323› A_v153327) with
    | nil_c10  ⇒ ⟨0, nil_c10‹s_s153322, t_s153323›⟩
    | cons_c11 x_v153331 xs_v153332 ⇒
      match (len_i25‹s_s153322, t_s153323› A_v153327 xs_v153332) as __v153333 in
        nat ⊗ (list_d7‹s_s153322, t_s153323› A_v153327) with
      | ⟨n_v153335, xs_v153336⟩ ⇒
        ⟨n_v153335.+1, (cons_c11‹s_s153322, t_s153323›
                           x_v153331 xs_v153336)⟩
      end
    end

program append_i26 ‹s_s153337, t_s153338› :
  ∀ {A_v153339 : Type‹s_s153337›} →
    (list_d7‹s_s153337, t_s153338› A_v153339) →
      (list_d7‹s_s153337, t_s153338› A_v153339) ⊸
        (list_d7‹s_s153337, t_s153338› A_v153339)
=
  fn {A_v153342 : Type‹s_s153337›}
     (xs_v153343 : (list_d7‹s_s153337, t_s153338› A_v153342)) ⇒
    ln (ys_v153344 : (list_d7‹s_s153337, t_s153338› A_v153342)) ⇒
      match xs_v153343 as __v153345 in
        (list_d7‹s_s153337, t_s153338› A_v153342) with
      | nil_c10  ⇒ ys_v153344
      | cons_c11 x_v153346 xs_v153347 ⇒
        (cons_c11‹s_s153337, t_s153338›
          x_v153346
          (append_i26‹s_s153337, t_s153338›
            A_v153342 xs_v153347 ys_v153344))
      end

logical stdin_rec_i27 : unit → proto =
  fn (__v153349 : unit) ⇒
    ⇑(b_v153350 : bool) ⇒
      match b_v153350 as __v153351 in proto with
      | true ⇒ ⇓(__v153352 : string_d5) ⇒ (stdin_rec_i27 ())
      | false ⇒ end
      end

logical stdout_rec_i28 : unit → proto =
  fn (__v153354 : unit) ⇒
    ⇑(b_v153355 : bool) ⇒
      match b_v153355 as __v153356 in proto with
      | true ⇒ ⇑(__v153357 : string_d5) ⇒ (stdout_rec_i28 ())
      | false ⇒ end
      end

logical stderr_rec_i29 : unit → proto =
  fn (__v153359 : unit) ⇒
    ⇑(b_v153360 : bool) ⇒
      match b_v153360 as __v153361 in proto with
      | true ⇒ ⇑(__v153362 : string_d5) ⇒ (stderr_rec_i29 ())
      | false ⇒ end
      end

logical stdin_t_i30 : proto = (stdin_rec_i27 ())

logical stdout_t_i31 : proto = (stdout_rec_i28 ())

logical stderr_t_i32 : proto = (stderr_rec_i29 ())

program readline_i33 : unit → IO string_d5 =
  fn (__v153364 : unit) ⇒
    let ch_v153365 ⇐ open stdin in
    let ch_v153366 ⇐ (send ch_v153365 true) in
    let __v153367 ⇐ recv ch_v153366 in
    match __v153367 as __v153368 in IO string_d5 with
    | ⟨s_v153369, ch_v153370⟩ ⇒
      let ch_v153371 ⇐ (send ch_v153370 false) in
      let __v153372 ⇐ close ch_v153371 in return s_v153369
    end

program print_i34 : string_d5 → IO unit =
  fn (s_v153374 : string_d5) ⇒
    let ch_v153375 ⇐ open stdout in
    let ch_v153376 ⇐ (send ch_v153375 true) in
    let ch_v153377 ⇐ (send ch_v153376 s_v153374) in
    let ch_v153378 ⇐ (send ch_v153377 false) in close ch_v153378

program prerr_i35 : string_d5 → IO unit =
  fn (s_v153380 : string_d5) ⇒
    let ch_v153381 ⇐ open stderr in
    let ch_v153382 ⇐ (send ch_v153381 true) in
    let ch_v153383 ⇐ (send ch_v153382 s_v153380) in
    let ch_v153384 ⇐ (send ch_v153383 false) in close ch_v153384

program digits_i36 : (list_d7‹U, U› string_d5) =
  (cons_c11‹U, U›
    "0"
    (cons_c11‹U, U›
      "1"
      (cons_c11‹U, U›
        "2"
        (cons_c11‹U, U›
          "3"
          (cons_c11‹U, U›
            "4"
            (cons_c11‹U, U›
              "5"
              (cons_c11‹U, U›
                "6"
                (cons_c11‹U, U›
                  "7"
                  (cons_c11‹U, U›
                    "8" (cons_c11‹U, U› "9" nil_c10‹U, U›))))))))))

program get_at_i37 :
  ∀ {A_v153385 : U} →
    nat → (list_d7‹U, U› A_v153385) → A_v153385 → A_v153385
=
  fn {A_v153389 : U} (n_v153390 : nat)
     (xs_v153391 : (list_d7‹U, U› A_v153389)) (a_v153392 : A_v153389) ⇒
    match n_v153390 as __v153393 in A_v153389 with
    | O ⇒
      match xs_v153391 as __v153394 in A_v153389 with
      | nil_c10  ⇒ a_v153392 | cons_c11 x_v153395 __v153396 ⇒ x_v153395
      end
    | S n_v153397 ⇒
      match xs_v153391 as __v153398 in A_v153389 with
      | nil_c10  ⇒ a_v153392
      | cons_c11 __v153399 xs_v153400 ⇒
        (get_at_i37 A_v153389 n_v153397 xs_v153400 a_v153392)
      end
    end

program string_of_digit_i38 : nat → string_d5 =
  fn (n_v153402 : nat) ⇒
    (get_at_i37 string_d5 n_v153402 digits_i36 EmptyString_c6‹›)

program string_of_nat_i39 : nat → string_d5 =
  fn (n_v153404 : nat) ⇒
    let s_v153405 = (string_of_digit_i38 (modn_i17 n_v153404 10)) in
    let n_v153406 = (divn_i16 n_v153404 10) in
    match (ltn_i8 0 n_v153406) as __v153407 in string_d5 with
    | true ⇒ (cats_i20 (string_of_nat_i39 n_v153406) s_v153405)
    | false ⇒ s_v153405
    end

program digit_of_char_i40 : char_d4 → (option_d6‹U, L› nat) =
  fn (c_v153409 : char_d4) ⇒
    match (eqc_i18 c_v153409 '0') as __v153410 in
      (option_d6‹U, L› nat) with
    | true ⇒ (Some_c9‹U, L› 0)
    | false ⇒
      match (eqc_i18 c_v153409 '1') as __v153411 in
        (option_d6‹U, L› nat) with
      | true ⇒ (Some_c9‹U, L› 1)
      | false ⇒
        match (eqc_i18 c_v153409 '2') as __v153412 in
          (option_d6‹U, L› nat) with
        | true ⇒ (Some_c9‹U, L› 2)
        | false ⇒
          match (eqc_i18 c_v153409 '3') as __v153413 in
            (option_d6‹U, L› nat) with
          | true ⇒ (Some_c9‹U, L› 3)
          | false ⇒
            match (eqc_i18 c_v153409 '4') as __v153414 in
              (option_d6‹U, L› nat) with
            | true ⇒ (Some_c9‹U, L› 4)
            | false ⇒
              match (eqc_i18 c_v153409 '5') as __v153415 in
                (option_d6‹U, L› nat) with
              | true ⇒ (Some_c9‹U, L› 5)
              | false ⇒
                match (eqc_i18 c_v153409 '6') as __v153416 in
                  (option_d6‹U, L› nat) with
                | true ⇒ (Some_c9‹U, L› 6)
                | false ⇒
                  match (eqc_i18 c_v153409 '7') as __v153417 in
                    (option_d6‹U, L› nat) with
                  | true ⇒ (Some_c9‹U, L› 7)
                  | false ⇒
                    match (eqc_i18 c_v153409 '8') as __v153418 in
                      (option_d6‹U, L› nat) with
                    | true ⇒ (Some_c9‹U, L› 8)
                    | false ⇒
                      match (eqc_i18 c_v153409 '9') as __v153419 in
                        (option_d6‹U, L› nat) with
                      | true ⇒ (Some_c9‹U, L› 9)
                      | false ⇒ None_c8‹U, L›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i41 :
  string_d5 → nat → (option_d6‹U, L› nat)
=
  fn (s_v153422 : string_d5) (acc_v153423 : nat) ⇒
    match s_v153422 as __v153424 in (option_d6‹U, L› nat) with
    | EmptyString_c6  ⇒ (Some_c9‹U, L› acc_v153423)
    | String_c7 c_v153425 s_v153426 ⇒
      match (digit_of_char_i40 c_v153425) as __v153427 in
        (option_d6‹U, L› nat) with
      | None_c8  ⇒ None_c8‹U, L›
      | Some_c9 n_v153428 ⇒
        (nat_of_string_loop_i41
          s_v153426 (addn_i13 (muln_i15 acc_v153423 10) n_v153428))
      end
    end

program nat_of_string_i42 : string_d5 → (option_d6‹U, L› nat) =
  fn (s_v153430 : string_d5) ⇒ (nat_of_string_loop_i41 s_v153430 0)

logical eq_sym_i43 ‹s_s153431› :
  ∀ (A_v153432 : Type‹s_s153431›) →
    ∀ (x_v153433 : A_v153432) →
      ∀ (y_v153434 : A_v153432) →
        x_v153433 ≡ y_v153434 → y_v153434 ≡ x_v153433
=
  fn (A_v153436 : Type‹s_s153431›) (x_v153437 : A_v153436)
     (y_v153438 : A_v153436) (e_v153439 : x_v153437 ≡ y_v153438) ⇒
    rew [y_v153440, __v153441 ⇒ y_v153440 ≡ x_v153437] e_v153439 in
    refl x_v153437

logical f_equal_i44 ‹s_s153442, t_s153443› :
  ∀ (A_v153444 : Type‹s_s153442›) →
    ∀ (B_v153445 : Type‹t_s153443›) →
      ∀ (f_v153446 : A_v153444 → B_v153445) →
        ∀ (x_v153448 : A_v153444) →
          ∀ (y_v153449 : A_v153444) →
            x_v153448 ≡ y_v153449 →
              (f_v153446 x_v153448) ≡ (f_v153446 y_v153449)
=
  fn (A_v153451 : Type‹s_s153442›) (B_v153452 : Type‹t_s153443›)
     (f_v153453 : A_v153451 → B_v153452) (x_v153454 : A_v153451)
     (y_v153455 : A_v153451) (e_v153456 : x_v153454 ≡ y_v153455) ⇒
    rew [y_v153458, p_v153459 ⇒
      (f_v153453 x_v153454) ≡ (f_v153453 y_v153458)] e_v153456 in
    refl (f_v153453 x_v153454)

logical bool_absurd_i45 : true ≡ false → absurd_d1 =
  fn (e_v153461 : true ≡ false) ⇒
    rew [x_v153462, __v153463 ⇒
      match x_v153462 as __v153464 in U with
      | true ⇒ unit | false ⇒ absurd_d1
      end] e_v153461 in
    ()

logical nat_absurd_i46 :
  ∀ (n_v153465 : nat) → n_v153465.+1 ≡ 0 → absurd_d1
=
  fn (n_v153467 : nat) (e_v153468 : n_v153467.+1 ≡ 0) ⇒
    rew [x_v153469, __v153470 ⇒
      match x_v153469 as __v153471 in U with
      | O ⇒ absurd_d1 | S __v153472 ⇒ unit
      end] e_v153468 in
    ()

logical nat_inv_i47 :
  ∀ (n1_v153473 : nat) →
    ∀ (n2_v153474 : nat) →
      n1_v153473.+1 ≡ n2_v153474.+1 → n1_v153473 ≡ n2_v153474
=
  fn (n1_v153476 : nat) (n2_v153477 : nat)
     (e_v153478 : n1_v153476.+1 ≡ n2_v153477.+1) ⇒
    (f_equal_i44‹U, U›
      nat nat pred_i12 n1_v153476.+1 n2_v153477.+1 e_v153478)

logical eqn_reflect_i48 :
  ∀ (m_v153479 : nat) →
    ∀ (n_v153480 : nat) →
      (eqn_i10 m_v153479 n_v153480) ≡ true → m_v153479 ≡ n_v153480
=
  fn (m_v153482 : nat) (n_v153483 : nat) ⇒
    match m_v153482 as m0_v153484 in
      (eqn_i10 m0_v153484 n_v153483) ≡ true → m0_v153484 ≡ n_v153483 with
    | O ⇒
      match n_v153483 as n0_v153486 in
        (eqn_i10 0 n0_v153486) ≡ true → 0 ≡ n0_v153486 with
      | O ⇒ fn (__v153488 : (eqn_i10 0 0) ≡ true) ⇒ refl 0
      | S n_v153489 ⇒
        fn (e_v153490 : (eqn_i10 0 n_v153489.+1) ≡ true) ⇒
          (absurd_elim_i1‹U›
            0 ≡ n_v153489.+1
            (bool_absurd_i45
              (eq_sym_i43‹U›
                bool (eqn_i10 0 n_v153489.+1) true e_v153490)))
      end
    | S m_v153491 ⇒
      match n_v153483 as n0_v153492 in
        (eqn_i10 m_v153491.+1 n0_v153492) ≡ true →
          m_v153491.+1 ≡ n0_v153492 with
      | O ⇒
        fn (e_v153494 : (eqn_i10 m_v153491.+1 0) ≡ true) ⇒
          (absurd_elim_i1‹U›
            m_v153491.+1 ≡ 0
            (bool_absurd_i45
              (eq_sym_i43‹U›
                bool (eqn_i10 m_v153491.+1 0) true e_v153494)))
      | S n_v153495 ⇒
        fn (e_v153496 : (eqn_i10 m_v153491.+1 n_v153495.+1) ≡ true) ⇒
          (f_equal_i44‹U, U›
            nat nat fn (x_v153497 : nat) ⇒ x_v153497.+1 m_v153491 n_v153495
            (eqn_reflect_i48 m_v153491 n_v153495 e_v153496))
      end
    end

inductive word_d8 : U =
| Word_c12 of
    (s_v153498 : string_d5) {pf_v153499 : (strlen_i21 s_v153498) ≡ 5}
    : word_d8

program contains_i49 : char_d4 → string_d5 → bool =
  fn (c_v153502 : char_d4) (s_v153503 : string_d5) ⇒
    match s_v153503 as __v153504 in bool with
    | EmptyString_c6  ⇒ false
    | String_c7 c0_v153505 s_v153506 ⇒
      match (eqc_i18 c_v153502 c0_v153505) as __v153507 in bool with
      | true ⇒ true | false ⇒ (contains_i49 c_v153502 s_v153506)
      end
    end

program string_diff_i50 : string_d5 → string_d5 → string_d5 → string_d5
=
  fn (ans_v153511 : string_d5) (s1_v153512 : string_d5)
     (s2_v153513 : string_d5) ⇒
    match s1_v153512 as __v153514 in string_d5 with
    | EmptyString_c6  ⇒ EmptyString_c6‹›
    | String_c7 c1_v153515 s1_v153516 ⇒
      match s2_v153513 as __v153517 in string_d5 with
      | EmptyString_c6  ⇒ EmptyString_c6‹›
      | String_c7 c2_v153518 s2_v153519 ⇒
        match (eqc_i18 c1_v153515 c2_v153518) as __v153520 in string_d5 with
        | true ⇒
          (cats_i20 "Y" (string_diff_i50 ans_v153511 s1_v153516 s2_v153519))
        | false ⇒
          match (contains_i49 c2_v153518 ans_v153511) as __v153521 in
            string_d5 with
          | true ⇒
            (cats_i20
              "I" (string_diff_i50 ans_v153511 s1_v153516 s2_v153519))
          | false ⇒
            (cats_i20
              "N" (string_diff_i50 ans_v153511 s1_v153516 s2_v153519))
          end
        end
      end
    end

logical string_diff_len_i51 :
  ∀ (n_v153522 : nat) →
    ∀ (ans_v153523 : string_d5) →
      ∀ (s1_v153524 : string_d5) →
        ∀ (s2_v153525 : string_d5) →
          n_v153522 ≡ (strlen_i21 s1_v153524) →
            n_v153522 ≡ (strlen_i21 s2_v153525) →
              n_v153522 ≡
                (strlen_i21
                  (string_diff_i50 ans_v153523 s1_v153524 s2_v153525))
=
  fn (n_v153528 : nat) (ans_v153529 : string_d5) (s1_v153530 : string_d5)
     (s2_v153531 : string_d5) ⇒
    match s1_v153530 as s0_v153532 in
      n_v153528 ≡ (strlen_i21 s0_v153532) →
        n_v153528 ≡ (strlen_i21 s2_v153531) →
          n_v153528 ≡
            (strlen_i21 (string_diff_i50 ans_v153529 s0_v153532 s2_v153531)) with
    | EmptyString_c6  ⇒
      match s2_v153531 as s0_v153535 in
        n_v153528 ≡ 0 →
          n_v153528 ≡ (strlen_i21 s0_v153535) → n_v153528 ≡ 0 with
      | EmptyString_c6  ⇒
        fn (e1_v153538 : n_v153528 ≡ 0)
           (__v153539 : n_v153528 ≡ (strlen_i21 EmptyString_c6‹›)) ⇒
          e1_v153538
      | String_c7 c2_v153540 s2_v153541 ⇒
        fn (e1_v153542 : n_v153528 ≡ 0)
           (e2_v153543 : n_v153528 ≡
                           (strlen_i21
                             (String_c7‹› c2_v153540 s2_v153541))) ⇒
          let e3_v153544 =
            rew [n_v153545, __v153546 ⇒ n_v153545 ≡ 0] e2_v153543 in
            e1_v153542
          in
          (absurd_elim_i1‹U›
            n_v153528 ≡ 0
            (nat_absurd_i46
              match s2_v153541 as __v153547 in nat with
              | EmptyString_c6  ⇒ 0
              | String_c7 __v153548 s_v153549 ⇒ (strlen_i21 s_v153549).+1
              end e3_v153544))
      end
    | String_c7 c1_v153550 s1_v153551 ⇒
      match s2_v153531 as s0_v153552 in
        n_v153528 ≡ (strlen_i21 (String_c7‹› c1_v153550 s1_v153551)) →
          n_v153528 ≡ (strlen_i21 s0_v153552) →
            n_v153528 ≡
              (strlen_i21
                (string_diff_i50
                  ans_v153529 (String_c7‹› c1_v153550 s1_v153551)
                  s0_v153552)) with
      | EmptyString_c6  ⇒
        fn (e1_v153555 : n_v153528 ≡
                           (strlen_i21
                             (String_c7‹› c1_v153550 s1_v153551)))
           (e2_v153556 : n_v153528 ≡ (strlen_i21 EmptyString_c6‹›)) ⇒
          let e3_v153557 =
            rew [n_v153558, __v153559 ⇒ n_v153558 ≡ 0] e1_v153555 in
            e2_v153556
          in
          (absurd_elim_i1‹U›
            n_v153528 ≡
              (strlen_i21
                (string_diff_i50
                  ans_v153529 (String_c7‹› c1_v153550 s1_v153551)
                  EmptyString_c6‹›))
            (nat_absurd_i46
              match s1_v153551 as __v153560 in nat with
              | EmptyString_c6  ⇒ 0
              | String_c7 __v153561 s_v153562 ⇒ (strlen_i21 s_v153562).+1
              end e3_v153557))
      | String_c7 c2_v153563 s2_v153564 ⇒
        fn (e1_v153565 : n_v153528 ≡
                           (strlen_i21
                             (String_c7‹› c1_v153550 s1_v153551)))
           (e2_v153566 : n_v153528 ≡
                           (strlen_i21
                             (String_c7‹› c2_v153563 s2_v153564))) ⇒
          (match n_v153528 as n0_v153567 in
             n_v153528 ≡ n0_v153567 →
               n0_v153567 ≡
                 (strlen_i21
                   (string_diff_i50
                     ans_v153529 (String_c7‹› c1_v153550 s1_v153551)
                     (String_c7‹› c2_v153563 s2_v153564))) with
           | O ⇒
             fn (e0_v153569 : n_v153528 ≡ 0) ⇒
               let e3_v153570 =
                 rew [n_v153571, __v153572 ⇒ n_v153571 ≡ 0] e1_v153565 in
                 e0_v153569
               in
               (absurd_elim_i1‹U›
                 0 ≡
                   (strlen_i21
                     (string_diff_i50
                       ans_v153529 (String_c7‹› c1_v153550 s1_v153551)
                       (String_c7‹› c2_v153563 s2_v153564)))
                 (nat_absurd_i46
                   match s1_v153551 as __v153573 in nat with
                   | EmptyString_c6  ⇒ 0
                   | String_c7 __v153574 s_v153575 ⇒
                     (strlen_i21 s_v153575).+1
                   end e3_v153570))
           | S n0_v153576 ⇒
             fn (e0_v153577 : n_v153528 ≡ n0_v153576.+1) ⇒
               let e3_v153578 =
                 rew [n1_v153579, __v153580 ⇒
                   n1_v153579 ≡ (strlen_i21 s1_v153551).+1] e0_v153577 in
                 e1_v153565
               in
               let e4_v153581 =
                 rew [n1_v153582, __v153583 ⇒
                   n1_v153582 ≡ (strlen_i21 s2_v153564).+1] e0_v153577 in
                 e2_v153566
               in
               let e5_v153584 =
                 (nat_inv_i47 n0_v153576 (strlen_i21 s1_v153551) e3_v153578)
               in
               let e6_v153585 =
                 (nat_inv_i47 n0_v153576 (strlen_i21 s2_v153564) e4_v153581)
               in
               match (eqc_i18 c1_v153550 c2_v153563) as b0_v153586 in
                 n0_v153576.+1 ≡
                   (strlen_i21
                     match b0_v153586 as __v153587 in string_d5 with
                     | true ⇒
                       (cats_i20
                         "Y"
                         (string_diff_i50 ans_v153529 s1_v153551 s2_v153564))
                     | false ⇒
                       match (contains_i49 c2_v153563 ans_v153529) as __v153588 in
                         string_d5 with
                       | true ⇒
                         (cats_i20
                           "I"
                           (string_diff_i50
                             ans_v153529 s1_v153551 s2_v153564))
                       | false ⇒
                         (cats_i20
                           "N"
                           (string_diff_i50
                             ans_v153529 s1_v153551 s2_v153564))
                       end
                     end) with
               | true ⇒
                 rew [n1_v153589, __v153590 ⇒
                   n0_v153576.+1 ≡ n1_v153589.+1]
                   (string_diff_len_i51
                     n0_v153576 ans_v153529 s1_v153551 s2_v153564 e5_v153584
                     e6_v153585) in
                 refl n0_v153576.+1
               | false ⇒
                 match (contains_i49 c2_v153563 ans_v153529) as b0_v153591 in
                   n0_v153576.+1 ≡
                     (strlen_i21
                       match b0_v153591 as __v153592 in string_d5 with
                       | true ⇒
                         (cats_i20
                           "I"
                           (string_diff_i50
                             ans_v153529 s1_v153551 s2_v153564))
                       | false ⇒
                         (cats_i20
                           "N"
                           (string_diff_i50
                             ans_v153529 s1_v153551 s2_v153564))
                       end) with
                 | true ⇒
                   rew [n1_v153593, __v153594 ⇒
                     n0_v153576.+1 ≡ n1_v153593.+1]
                     (string_diff_len_i51
                       n0_v153576 ans_v153529 s1_v153551 s2_v153564
                       e5_v153584 e6_v153585) in
                   refl n0_v153576.+1
                 | false ⇒
                   rew [n1_v153595, __v153596 ⇒
                     n0_v153576.+1 ≡ n1_v153595.+1]
                     (string_diff_len_i51
                       n0_v153576 ans_v153529 s1_v153551 s2_v153564
                       e5_v153584 e6_v153585) in
                   refl n0_v153576.+1
                 end
               end
           end refl n_v153528)
      end
    end

program wordle_diff_i52 : word_d8 → word_d8 → word_d8 =
  fn (ans_v153599 : word_d8) (guess_v153600 : word_d8) ⇒
    match ans_v153599 as __v153601 in word_d8 with
    | Word_c12 ans_v153602 pf1_v153603 ⇒
      match guess_v153600 as __v153604 in word_d8 with
      | Word_c12 guess_v153605 pf2_v153606 ⇒
        let {pf1_v153607} =
          (eq_sym_i43‹U› nat (strlen_i21 ans_v153602) 5 pf1_v153603)
        in
        let {pf2_v153608} =
          (eq_sym_i43‹U› nat (strlen_i21 guess_v153605) 5 pf2_v153606)
        in
        let {pf_v153609} =
          (string_diff_len_i51
            5 ans_v153602 ans_v153602 guess_v153605 pf1_v153607 pf2_v153608)
        in
        (Word_c12‹›
          (string_diff_i50 ans_v153602 ans_v153602 guess_v153605)
          (eq_sym_i43‹U›
            nat 5
            (strlen_i21
              (string_diff_i50 ans_v153602 ans_v153602 guess_v153605))
            pf_v153609))
      end
    end

program eqw_i53 : word_d8 → word_d8 → bool =
  fn (w1_v153612 : word_d8) (w2_v153613 : word_d8) ⇒
    match w1_v153612 as __v153614 in bool with
    | Word_c12 s1_v153615 __v153616 ⇒
      match w2_v153613 as __v153617 in bool with
      | Word_c12 s2_v153618 __v153619 ⇒ (eqs_i22 s1_v153615 s2_v153618)
      end
    end

logical wordle_loop_i54 : word_d8 → nat → proto =
  fn (ans_v153622 : word_d8) (repeat_v153623 : nat) ⇒
    match repeat_v153623 as __v153624 in proto with
    | O ⇒
      ⇑(w_v153625 : word_d8) ⇒
        ⇑{__v153626 : w_v153625 ≡ ans_v153622} ⇒ end
    | S repeat_v153627 ⇒
      ⇓(guess_v153628 : word_d8) ⇒
        ⇑(b_v153629 : bool) ⇒
          ⇑{__v153630 :
            b_v153629 ≡ (eqw_i53 ans_v153622 guess_v153628)} ⇒
            match b_v153629 as __v153631 in proto with
            | true ⇒ end
            | false ⇒
              ⇑(w_v153632 : word_d8) ⇒
                ⇑{__v153633 :
                  w_v153632 ≡ (wordle_diff_i52 ans_v153622 guess_v153628)} ⇒
                  (wordle_loop_i54 ans_v153622 repeat_v153627)
            end
    end

logical wordle_i55 : proto =
  ⇑{ans_v153634 : word_d8} ⇒
    ⇑(repeat_v153635 : nat) ⇒
      (wordle_loop_i54 ans_v153634 repeat_v153635)

logical loop_ch_i56 : word_d8 → nat → L =
  fn (ans_v153638 : word_d8) (repeat_v153639 : nat) ⇒
    ch⟨(wordle_loop_i54 ans_v153638 repeat_v153639)⟩

logical loop_hc_i57 : word_d8 → nat → L =
  fn (ans_v153642 : word_d8) (repeat_v153643 : nat) ⇒
    hc⟨(wordle_loop_i54 ans_v153642 repeat_v153643)⟩

logical wordle_ch_i58 : L = ch⟨wordle_i55⟩

logical wordle_hc_i59 : L = hc⟨wordle_i55⟩

program read_word_i60 : unit → IO word_d8 =
  fn (__v153645 : unit) ⇒
    let s_v153646 ⇐ (readline_i33 ()) in
    (match (eqn_i10 (strlen_i21 s_v153646) 5) as b0_v153647 in
       {(eqn_i10 (strlen_i21 s_v153646) 5) ≡ b0_v153647} → IO word_d8 with
     | true ⇒
       fn {e_v153649 : (eqn_i10 (strlen_i21 s_v153646) 5) ≡ true} ⇒
         return (Word_c12‹›
                  s_v153646
                  (eqn_reflect_i48 (strlen_i21 s_v153646) 5 e_v153649))
     | false ⇒
       fn {__v153650 : (eqn_i10 (strlen_i21 s_v153646) 5) ≡ false} ⇒
         let __v153651 ⇐
           (print_i34 "please input a word with length of 5\n")
         in (read_word_i60 ())
     end refl (eqn_i10 (strlen_i21 s_v153646) 5))

program player_loop_i61 :
  ∀ {ans_v153652 : word_d8} →
    ∀ (repeat_v153653 : nat) →
      (loop_hc_i57 ans_v153652 repeat_v153653) → IO unit
=
  fn {ans_v153655 : word_d8} (repeat_v153656 : nat)
     (c_v153657 : (loop_hc_i57 ans_v153655 repeat_v153656)) ⇒
    (match repeat_v153656 as repeat0_v153658 in
       (loop_hc_i57 ans_v153655 repeat0_v153658) → IO unit with
     | O ⇒
       fn (c_v153660 : (loop_hc_i57 ans_v153655 0)) ⇒
         let __v153661 ⇐ recv c_v153660 in
         match __v153661 as __v153662 in IO unit with
         | ⟨ans_v153663, c_v153664⟩ ⇒
           let __v153665 ⇐ recv c_v153664 in
           match __v153665 as __v153666 in IO unit with
           | ⟨{pf_v153667}, c_v153668⟩ ⇒
             match ans_v153663 as __v153669 in IO unit with
             | Word_c12 s_v153670 __v153671 ⇒
               let __v153672 ⇐
                 (print_i34
                   (cats_i20
                     (cats_i20 "You Lose! The answer is " s_v153670) ".\n"))
               in close c_v153668
             end
           end
         end
     | S repeat_v153673 ⇒
       fn (c_v153674 : (loop_hc_i57 ans_v153655 repeat_v153673.+1)) ⇒
         let guess_v153675 ⇐ (read_word_i60 ()) in
         let c_v153676 ⇐ (send c_v153674 guess_v153675) in
         let __v153677 ⇐ recv c_v153676 in
         match __v153677 as __v153678 in IO unit with
         | ⟨b_v153679, c_v153680⟩ ⇒
           let __v153681 ⇐ recv c_v153680 in
           match __v153681 as __v153682 in IO unit with
           | ⟨{pf_v153683}, c_v153684⟩ ⇒
             (match b_v153679 as b0_v153685 in
                hc⟨match b0_v153685 as __v153687 in proto with
                     | true ⇒ end
                     | false ⇒
                       ⇑(w_v153688 : word_d8) ⇒
                         ⇑{__v153689 :
                           w_v153688 ≡
                             (wordle_diff_i52 ans_v153655 guess_v153675)} ⇒
                           (wordle_loop_i54 ans_v153655 repeat_v153673)
                     end⟩ ⊸
                  IO unit with
              | true ⇒
                ln (c_v153690 : hc⟨end⟩) ⇒
                  let __v153691 ⇐ (print_i34 "You Win!\n") in
                  close c_v153690
              | false ⇒
                ln (c_v153692 : hc⟨⇑(w_v153693 : word_d8) ⇒
                                       ⇑{__v153694 :
                                         w_v153693 ≡
                                           (wordle_diff_i52
                                             ans_v153655 guess_v153675)} ⇒
                                         (wordle_loop_i54
                                           ans_v153655 repeat_v153673)⟩) ⇒
                  let __v153695 ⇐ recv c_v153692 in
                  match __v153695 as __v153696 in IO unit with
                  | ⟨diff_v153697, c_v153698⟩ ⇒
                    let __v153699 ⇐ recv c_v153698 in
                    match __v153699 as __v153700 in IO unit with
                    | ⟨{pf_v153701}, c_v153702⟩ ⇒
                      match diff_v153697 as __v153703 in IO unit with
                      | Word_c12 s_v153704 __v153705 ⇒
                        let __v153706 ⇐
                          (print_i34
                            (cats_i20
                              (cats_i20
                                (cats_i20
                                  (cats_i20 "Incorrect, hint: " s_v153704)
                                  ". You have ")
                                (string_of_nat_i39 repeat_v153673))
                              " more tries.\n"))
                        in
                        (player_loop_i61
                          ans_v153655 repeat_v153673 c_v153702)
                      end
                    end
                  end
              end c_v153684)
           end
         end
     end c_v153657)

program player_i62 : wordle_hc_i59 → IO unit =
  fn (c_v153708 : wordle_hc_i59) ⇒
    let __v153709 ⇐ recv c_v153708 in
    match __v153709 as __v153710 in IO unit with
    | ⟨{ans_v153711}, c_v153712⟩ ⇒
      let __v153713 ⇐ recv c_v153712 in
      match __v153713 as __v153714 in IO unit with
      | ⟨repeat_v153715, c_v153716⟩ ⇒
        let __v153717 ⇐ (print_i34 "Wordle Game\n") in
        let __v153718 ⇐ (print_i34 "Please guess a word of length 5.\n") in
        let __v153719 ⇐
          (print_i34
            (cats_i20
              (cats_i20 "You have " (string_of_nat_i39 repeat_v153715))
              " tries.\n"))
        in (player_loop_i61 ans_v153711 repeat_v153715 c_v153716)
      end
    end

program server_loop_i63 :
  ∀ (ans_v153720 : word_d8) →
    ∀ (repeat_v153721 : nat) →
      (loop_ch_i56 ans_v153720 repeat_v153721) → IO unit
=
  fn (ans_v153723 : word_d8) (repeat_v153724 : nat)
     (c_v153725 : (loop_ch_i56 ans_v153723 repeat_v153724)) ⇒
    (match repeat_v153724 as repeat0_v153726 in
       (loop_ch_i56 ans_v153723 repeat0_v153726) → IO unit with
     | O ⇒
       fn (c_v153728 : (loop_ch_i56 ans_v153723 0)) ⇒
         let c_v153729 ⇐ (send c_v153728 ans_v153723) in
         let c_v153730 ⇐ (send c_v153729 refl ans_v153723) in
         close c_v153730
     | S repeat_v153731 ⇒
       fn (c_v153732 : (loop_ch_i56 ans_v153723 repeat_v153731.+1)) ⇒
         let __v153733 ⇐ recv c_v153732 in
         match __v153733 as __v153734 in IO unit with
         | ⟨guess_v153735, c_v153736⟩ ⇒
           let b_v153737 = (eqw_i53 ans_v153723 guess_v153735) in
           let c_v153738 ⇐ (send c_v153736 b_v153737) in
           let c_v153739 ⇐
             (send c_v153738 refl (eqw_i53 ans_v153723 guess_v153735))
           in
           (match b_v153737 as b0_v153740 in
              ch⟨match b0_v153740 as __v153742 in proto with
                   | true ⇒ end
                   | false ⇒
                     ⇑(w_v153743 : word_d8) ⇒
                       ⇑{__v153744 :
                         w_v153743 ≡
                           (wordle_diff_i52 ans_v153723 guess_v153735)} ⇒
                         (wordle_loop_i54 ans_v153723 repeat_v153731)
                   end⟩ ⊸
                IO unit with
            | true ⇒ ln (c_v153745 : ch⟨end⟩) ⇒ close c_v153745
            | false ⇒
              ln (c_v153746 : ch⟨⇑(w_v153747 : word_d8) ⇒
                                     ⇑{__v153748 :
                                       w_v153747 ≡
                                         (wordle_diff_i52
                                           ans_v153723 guess_v153735)} ⇒
                                       (wordle_loop_i54
                                         ans_v153723 repeat_v153731)⟩) ⇒
                let c_v153749 ⇐
                  (send c_v153746
                    (wordle_diff_i52 ans_v153723 guess_v153735))
                in
                let c_v153750 ⇐
                  (send c_v153749
                    refl (wordle_diff_i52 ans_v153723 guess_v153735))
                in (server_loop_i63 ans_v153723 repeat_v153731 c_v153750)
            end c_v153739)
         end
     end c_v153725)

program server_i64 : wordle_ch_i58 → IO unit =
  fn (c_v153752 : wordle_ch_i58) ⇒
    let repeat_v153753 = 6 in
    let ans_v153754 = (Word_c12‹› "world" refl 5) in
    let c_v153755 ⇐ (send c_v153752 ans_v153754) in
    let c_v153756 ⇐ (send c_v153755 repeat_v153753) in
    (server_loop_i63 ans_v153754 repeat_v153753 c_v153756)

program main_i65 : IO unit =
  let c_v153757 ⇐
    fork (c_v153758 : wordle_ch_i58) in (server_i64 c_v153758)
  in
  let c0_v153759 ⇐
    fork (c0_v153760 :
      ch⟨⇓(__v153761 : wordle_hc_i59) ⇒ ⇑(__v153762 : unit) ⇒ end⟩)
    in
      let __v153763 ⇐ recv c0_v153760 in
      match __v153763 as __v153764 in IO unit with
      | ⟨c_v153765, c0_v153766⟩ ⇒
        let __v153767 ⇐ (player_i62 c_v153765) in
        let c0_v153768 ⇐ (send c0_v153766 ()) in close c0_v153768
      end
  in
  let c0_v153769 ⇐ (send c0_v153759 c_v153757) in
  let __v153770 ⇐ recv c0_v153769 in
  match __v153770 as __v153771 in IO unit with
  | ⟨__v153772, c0_v153773⟩ ⇒ close c0_v153773
  end

trans1e success--------------------------

data order_d2 =
| LT_c1 of size(0) | GT_c2 of size(0) | EQ_c3 of size(0)

def andb_i2 =
  fn b1_v154832 b2_v154833 ⇒
    match b1_v154832 with
    | true ⇒ b2_v154833 | false ⇒ false
    end

def orb_i3 =
  fn b1_v154834 b2_v154835 ⇒
    match b1_v154834 with
    | true ⇒ true | false ⇒ b2_v154835
    end

def notb_i4 =
  fn b_v154836 ⇒ match b_v154836 with
                   | true ⇒ false | false ⇒ true
                   end

def compareb_i5 =
  fn b1_v154837 b2_v154838 ⇒
    match b1_v154837 with
    | true ⇒ match b2_v154838 with
               | true ⇒ EQ_c3 | false ⇒ GT_c2
               end
    | false ⇒ match b2_v154838 with
                | true ⇒ LT_c1 | false ⇒ EQ_c3
                end
    end

def lten_i6 =
  fn x_v154839 y_v154840 ⇒
    match x_v154839 with
    | O ⇒ true
    | S x_v154841 ⇒
      match y_v154840 with
      | O ⇒ false | S y_v154842 ⇒ ((lten_i6 x_v154841) y_v154842)
      end
    end

def gten_i7 =
  fn x_v154843 y_v154844 ⇒
    match x_v154843 with
    | O ⇒ match y_v154844 with
            | O ⇒ true | S __v154845 ⇒ false
            end
    | S x_v154846 ⇒
      match y_v154844 with
      | O ⇒ true | S y_v154847 ⇒ ((gten_i7 x_v154846) y_v154847)
      end
    end

def ltn_i8 =
  fn x_v154848 y_v154849 ⇒
    match x_v154848 with
    | O ⇒ match y_v154849 with
            | O ⇒ false | S y_v154850 ⇒ true
            end
    | S x_v154851 ⇒
      match y_v154849 with
      | O ⇒ false | S y_v154852 ⇒ ((ltn_i8 x_v154851) y_v154852)
      end
    end

def gtn_i9 =
  fn x_v154853 y_v154854 ⇒
    match x_v154853 with
    | O ⇒ false
    | S x_v154855 ⇒
      match y_v154854 with
      | O ⇒ true | S y_v154856 ⇒ ((gtn_i9 x_v154855) y_v154856)
      end
    end

def eqn_i10 =
  fn x_v154857 y_v154858 ⇒
    match x_v154857 with
    | O ⇒ match y_v154858 with
            | O ⇒ true | S __v154859 ⇒ false
            end
    | S x_v154860 ⇒
      match y_v154858 with
      | O ⇒ false | S y_v154861 ⇒ ((eqn_i10 x_v154860) y_v154861)
      end
    end

def comparen_i11 =
  fn n1_v154862 n2_v154863 ⇒
    match n1_v154862 with
    | O ⇒ match n2_v154863 with
            | O ⇒ EQ_c3 | S __v154864 ⇒ LT_c1
            end
    | S n1_v154865 ⇒
      match n2_v154863 with
      | O ⇒ GT_c2 | S n2_v154866 ⇒ ((comparen_i11 n1_v154865) n2_v154866)
      end
    end

def pred_i12 =
  fn x_v154867 ⇒
    match x_v154867 with
    | O ⇒ 0 | S x_v154868 ⇒ x_v154868
    end

def addn_i13 =
  fn x_v154869 y_v154870 ⇒
    match x_v154869 with
    | O ⇒ y_v154870 | S x_v154871 ⇒ ((addn_i13 x_v154871) y_v154870).+1
    end

def subn_i14 =
  fn x_v154872 y_v154873 ⇒
    match y_v154873 with
    | O ⇒ x_v154872
    | S y_v154874 ⇒ ((subn_i14 (pred_i12 x_v154872)) y_v154874)
    end

def muln_i15 =
  fn x_v154875 y_v154876 ⇒
    match x_v154875 with
    | O ⇒ 0
    | S x_v154877 ⇒ ((addn_i13 y_v154876) ((muln_i15 x_v154877) y_v154876))
    end

def divn_i16 =
  fn x_v154878 y_v154879 ⇒
    match ((ltn_i8 x_v154878) y_v154879) with
    | true ⇒ 0
    | false ⇒ ((divn_i16 ((subn_i14 x_v154878) y_v154879)) y_v154879).+1
    end

def modn_i17 =
  fn x_v154880 y_v154881 ⇒
    ((subn_i14 x_v154880)
      ((muln_i15 ((divn_i16 x_v154880) y_v154881)) y_v154881))

data between_d3 =
| Between_c4 of size(3)

data char_d4 =
| Char_c5 of size(1)

def eqc_i18 =
  fn c1_v154882 c2_v154883 ⇒
    match c1_v154882 with
    | Char_c5 n1_v154884 ⇒
      match c2_v154883 with
      | Char_c5 n2_v154885 ⇒ ((eqn_i10 n1_v154884) n2_v154885)
      end
    end

def comparec_i19 =
  fn c1_v154886 c2_v154887 ⇒
    match c1_v154886 with
    | Char_c5 n1_v154888 ⇒
      match c2_v154887 with
      | Char_c5 n2_v154889 ⇒ ((comparen_i11 n1_v154888) n2_v154889)
      end
    end

data string_d5 =
| EmptyString_c6 of size(0) | String_c7 of size(2)

def cats_i20 =
  fn s1_v154890 s2_v154891 ⇒
    match s1_v154890 with
    | EmptyString_c6  ⇒ s2_v154891
    | String_c7 c_v154892 s1_v154893 ⇒
      (String_c7 c_v154892 ((cats_i20 s1_v154893) s2_v154891))
    end

def strlen_i21 =
  fn s_v154894 ⇒
    match s_v154894 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v154895 s_v154896 ⇒ (strlen_i21 s_v154896).+1
    end

def eqs_i22 =
  fn s1_v154897 s2_v154898 ⇒
    match s1_v154897 with
    | EmptyString_c6  ⇒
      match s2_v154898 with
      | EmptyString_c6  ⇒ true | String_c7 __v154899 __v154900 ⇒ false
      end
    | String_c7 c1_v154901 s1_v154902 ⇒
      match s2_v154898 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v154903 s2_v154904 ⇒
        ((andb_i2 ((eqc_i18 c1_v154901) c2_v154903))
          ((eqs_i22 s1_v154902) s2_v154904))
      end
    end

def compares_i23 =
  fn s1_v154905 s2_v154906 ⇒
    match s1_v154905 with
    | EmptyString_c6  ⇒
      match s2_v154906 with
      | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v154907 __v154908 ⇒ LT_c1
      end
    | String_c7 c1_v154909 s1_v154910 ⇒
      match s2_v154906 with
      | EmptyString_c6  ⇒ GT_c2
      | String_c7 c2_v154911 s2_v154912 ⇒
        match ((comparec_i19 c1_v154909) c2_v154911) with
        | EQ_c3  ⇒ ((compares_i23 s1_v154910) s2_v154912)
        | LT_c1  ⇒ LT_c1 | GT_c2  ⇒ GT_c2
        end
      end
    end

data optionUU_d12 =
| NoneUU_c19 of size(0) | SomeUU_c20 of size(1)

data optionUL_d11 =
| NoneUL_c17 of size(0) | SomeUL_c18 of size(1)

data optionLU_d10 =
| NoneLU_c15 of size(0)

data optionLL_d9 =
| NoneLL_c13 of size(0) | SomeLL_c14 of size(1)

def and_thenUUU_i75 =
  fn A_v154913 B_v154914 opt_v154915 ⇒
    ln f_v154916 ⇒
      match opt_v154915 with
      | NoneUU_c19  ⇒ NoneUU_c19
      | SomeUU_c20 x_v154917 ⇒ (f_v154916 x_v154917)
      end

def and_thenUUL_i74 =
  fn A_v154918 B_v154919 opt_v154920 ⇒
    ln f_v154921 ⇒
      match opt_v154920 with
      | NoneUL_c17  ⇒ NoneUL_c17
      | SomeUL_c18 x_v154922 ⇒ (f_v154921 x_v154922)
      end

def and_thenULU_i73 =
  fn A_v154923 B_v154924 opt_v154925 ⇒
    ln f_v154926 ⇒
      match opt_v154925 with
      | NoneUU_c19  ⇒ NoneLU_c15
      | SomeUU_c20 x_v154927 ⇒ (f_v154926 x_v154927)
      end

def and_thenULL_i72 =
  fn A_v154928 B_v154929 opt_v154930 ⇒
    ln f_v154931 ⇒
      match opt_v154930 with
      | NoneUL_c17  ⇒ NoneLL_c13
      | SomeUL_c18 x_v154932 ⇒ (f_v154931 x_v154932)
      end

def and_thenLUL_i70 =
  fn A_v154933 B_v154934 opt_v154935 ⇒
    ln f_v154936 ⇒
      match opt_v154935 with
      | NoneLL_c13  ⇒ NoneUL_c17
      | SomeLL_c14 x_v154937 ⇒ (f_v154936 x_v154937)
      end

def and_thenLLL_i68 =
  fn A_v154938 B_v154939 opt_v154940 ⇒
    ln f_v154941 ⇒
      match opt_v154940 with
      | NoneLL_c13  ⇒ NoneLL_c13
      | SomeLL_c14 x_v154942 ⇒ (f_v154941 x_v154942)
      end

data listUU_d16 =
| nilUU_c27 of size(0) | consUU_c28 of size(2)

data listUL_d15 =
| nilUL_c25 of size(0) | consUL_c26 of size(2)

data listLU_d14 =
| nilLU_c23 of size(0)

data listLL_d13 =
| nilLL_c21 of size(0) | consLL_c22 of size(2)

def lenUU_i79 =
  fn A_v154943 xs_v154944 ⇒
    match xs_v154944 with
    | nilUU_c27  ⇒ (0, nilUU_c27)
    | consUU_c28 x_v154945 xs_v154946 ⇒
      match ((lenUU_i79 NULL) xs_v154946) with
      | (n_v154947, xs_v154948) ⇒
        (n_v154947.+1, (consUU_c28 x_v154945 xs_v154948))
      end
    end

def lenUL_i78 =
  fn A_v154949 xs_v154950 ⇒
    match xs_v154950 with
    | nilUL_c25  ⇒ (0, nilUL_c25)
    | consUL_c26 x_v154951 xs_v154952 ⇒
      match ((lenUL_i78 NULL) xs_v154952) with
      | (n_v154953, xs_v154954) ⇒
        (n_v154953.+1, (consUL_c26 x_v154951 xs_v154954))
      end
    end

def lenLL_i76 =
  fn A_v154955 xs_v154956 ⇒
    match xs_v154956 with
    | nilLL_c21  ⇒ (0, nilLL_c21)
    | consLL_c22 x_v154957 xs_v154958 ⇒
      match ((lenLL_i76 NULL) xs_v154958) with
      | (n_v154959, xs_v154960) ⇒
        (n_v154959.+1, (consLL_c22 x_v154957 xs_v154960))
      end
    end

def appendUU_i83 =
  fn A_v154961 xs_v154962 ⇒
    ln ys_v154963 ⇒
      match xs_v154962 with
      | nilUU_c27  ⇒ ys_v154963
      | consUU_c28 x_v154964 xs_v154965 ⇒
        (consUU_c28 x_v154964 (((appendUU_i83 NULL) xs_v154965) ys_v154963))
      end

def appendUL_i82 =
  fn A_v154966 xs_v154967 ⇒
    ln ys_v154968 ⇒
      match xs_v154967 with
      | nilUL_c25  ⇒ ys_v154968
      | consUL_c26 x_v154969 xs_v154970 ⇒
        (consUL_c26 x_v154969 (((appendUL_i82 NULL) xs_v154970) ys_v154968))
      end

def appendLL_i80 =
  fn A_v154971 xs_v154972 ⇒
    ln ys_v154973 ⇒
      match xs_v154972 with
      | nilLL_c21  ⇒ ys_v154973
      | consLL_c22 x_v154974 xs_v154975 ⇒
        (consLL_c22 x_v154974 (((appendLL_i80 NULL) xs_v154975) ys_v154973))
      end

def readline_i33 =
  fn __v154976 ⇒
    let ch_v154977 ⇐ open stdin in
    let ch_v154978 ⇐ (send ch_v154977 true) in
    let __v154979 ⇐ recv ch_v154978 in
    match __v154979 with
    | (s_v154980, ch_v154981) ⇒
      let ch_v154982 ⇐ (send ch_v154981 false) in
      let __v154983 ⇐ close⇑ ch_v154982 in return s_v154980
    end

def print_i34 =
  fn s_v154984 ⇒
    let ch_v154985 ⇐ open stdout in
    let ch_v154986 ⇐ (send ch_v154985 true) in
    let ch_v154987 ⇐ (send ch_v154986 s_v154984) in
    let ch_v154988 ⇐ (send ch_v154987 false) in close⇑ ch_v154988

def prerr_i35 =
  fn s_v154989 ⇒
    let ch_v154990 ⇐ open stderr in
    let ch_v154991 ⇐ (send ch_v154990 true) in
    let ch_v154992 ⇐ (send ch_v154991 s_v154989) in
    let ch_v154993 ⇐ (send ch_v154992 false) in close⇑ ch_v154993

def digits_i36 =
  (consUU_c28
    "0"
    (consUU_c28
      "1"
      (consUU_c28
        "2"
        (consUU_c28
          "3"
          (consUU_c28
            "4"
            (consUU_c28
              "5"
              (consUU_c28
                "6"
                (consUU_c28 "7" (consUU_c28 "8" (consUU_c28 "9" nilUU_c27))))))))))

def get_at_i37 =
  fn A_v154994 n_v154995 xs_v154996 a_v154997 ⇒
    match n_v154995 with
    | O ⇒
      match xs_v154996 with
      | nilUU_c27  ⇒ a_v154997
      | consUU_c28 x_v154998 __v154999 ⇒ x_v154998
      end
    | S n_v155000 ⇒
      match xs_v154996 with
      | nilUU_c27  ⇒ a_v154997
      | consUU_c28 __v155001 xs_v155002 ⇒
        ((((get_at_i37 NULL) n_v155000) xs_v155002) a_v154997)
      end
    end

def string_of_digit_i38 =
  fn n_v155003 ⇒
    ((((get_at_i37 NULL) n_v155003) digits_i36) EmptyString_c6)

def string_of_nat_i39 =
  fn n_v155004 ⇒
    let s_v155005 = (string_of_digit_i38 ((modn_i17 n_v155004) 10)) in
    let n_v155006 = ((divn_i16 n_v155004) 10) in
    match ((ltn_i8 0) n_v155006) with
    | true ⇒ ((cats_i20 (string_of_nat_i39 n_v155006)) s_v155005)
    | false ⇒ s_v155005
    end

def digit_of_char_i40 =
  fn c_v155007 ⇒
    match ((eqc_i18 c_v155007) '0') with
    | true ⇒ (SomeUL_c18 0)
    | false ⇒
      match ((eqc_i18 c_v155007) '1') with
      | true ⇒ (SomeUL_c18 1)
      | false ⇒
        match ((eqc_i18 c_v155007) '2') with
        | true ⇒ (SomeUL_c18 2)
        | false ⇒
          match ((eqc_i18 c_v155007) '3') with
          | true ⇒ (SomeUL_c18 3)
          | false ⇒
            match ((eqc_i18 c_v155007) '4') with
            | true ⇒ (SomeUL_c18 4)
            | false ⇒
              match ((eqc_i18 c_v155007) '5') with
              | true ⇒ (SomeUL_c18 5)
              | false ⇒
                match ((eqc_i18 c_v155007) '6') with
                | true ⇒ (SomeUL_c18 6)
                | false ⇒
                  match ((eqc_i18 c_v155007) '7') with
                  | true ⇒ (SomeUL_c18 7)
                  | false ⇒
                    match ((eqc_i18 c_v155007) '8') with
                    | true ⇒ (SomeUL_c18 8)
                    | false ⇒
                      match ((eqc_i18 c_v155007) '9') with
                      | true ⇒ (SomeUL_c18 9) | false ⇒ NoneUL_c17
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

def nat_of_string_loop_i41 =
  fn s_v155008 acc_v155009 ⇒
    match s_v155008 with
    | EmptyString_c6  ⇒ (SomeUL_c18 acc_v155009)
    | String_c7 c_v155010 s_v155011 ⇒
      match (digit_of_char_i40 c_v155010) with
      | NoneUL_c17  ⇒ NoneUL_c17
      | SomeUL_c18 n_v155012 ⇒
        ((nat_of_string_loop_i41 s_v155011)
          ((addn_i13 ((muln_i15 acc_v155009) 10)) n_v155012))
      end
    end

def nat_of_string_i42 =
  fn s_v155013 ⇒ ((nat_of_string_loop_i41 s_v155013) 0)

data word_d8 =
| Word_c12 of size(2)

def contains_i49 =
  fn c_v155014 s_v155015 ⇒
    match s_v155015 with
    | EmptyString_c6  ⇒ false
    | String_c7 c0_v155016 s_v155017 ⇒
      match ((eqc_i18 c_v155014) c0_v155016) with
      | true ⇒ true | false ⇒ ((contains_i49 c_v155014) s_v155017)
      end
    end

def string_diff_i50 =
  fn ans_v155018 s1_v155019 s2_v155020 ⇒
    match s1_v155019 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c1_v155021 s1_v155022 ⇒
      match s2_v155020 with
      | EmptyString_c6  ⇒ EmptyString_c6
      | String_c7 c2_v155023 s2_v155024 ⇒
        match ((eqc_i18 c1_v155021) c2_v155023) with
        | true ⇒
          ((cats_i20 "Y")
            (((string_diff_i50 ans_v155018) s1_v155022) s2_v155024))
        | false ⇒
          match ((contains_i49 c2_v155023) ans_v155018) with
          | true ⇒
            ((cats_i20 "I")
              (((string_diff_i50 ans_v155018) s1_v155022) s2_v155024))
          | false ⇒
            ((cats_i20 "N")
              (((string_diff_i50 ans_v155018) s1_v155022) s2_v155024))
          end
        end
      end
    end

def wordle_diff_i52 =
  fn ans_v155025 guess_v155026 ⇒
    match ans_v155025 with
    | Word_c12 ans_v155027 pf1_v155028 ⇒
      match guess_v155026 with
      | Word_c12 guess_v155029 pf2_v155030 ⇒
        let pf1_v155031 = NULL in
        let pf2_v155032 = NULL in
        let pf_v155033 = NULL in
        (Word_c12
          (((string_diff_i50 ans_v155027) ans_v155027) guess_v155029) NULL)
      end
    end

def eqw_i53 =
  fn w1_v155034 w2_v155035 ⇒
    match w1_v155034 with
    | Word_c12 s1_v155036 __v155037 ⇒
      match w2_v155035 with
      | Word_c12 s2_v155038 __v155039 ⇒ ((eqs_i22 s1_v155036) s2_v155038)
      end
    end

def read_word_i60 =
  fn __v155040 ⇒
    let s_v155041 ⇐ (readline_i33 ()) in
    (match ((eqn_i10 (strlen_i21 s_v155041)) 5) with
     | true ⇒ fn e_v155042 ⇒ return (Word_c12 s_v155041 NULL)
     | false ⇒
       fn __v155043 ⇒
         let __v155044 ⇐
           (print_i34 "please input a word with length of 5\n")
         in (read_word_i60 ())
     end NULL)

def player_loop_i61 =
  fn ans_v155045 repeat_v155046 c_v155047 ⇒
    (match repeat_v155046 with
     | O ⇒
       fn c_v155048 ⇒
         let __v155049 ⇐ recv c_v155048 in
         match __v155049 with
         | (ans_v155050, c_v155051) ⇒
           let __v155052 ⇐ {recv} c_v155051 in
           match __v155052 with
           | (pf_v155053, c_v155054) ⇒
             match ans_v155050 with
             | Word_c12 s_v155055 __v155056 ⇒
               let __v155057 ⇐
                 (print_i34
                   ((cats_i20
                      ((cats_i20 "You Lose! The answer is ") s_v155055))
                     ".\n"))
               in close⇓ c_v155054
             end
           end
         end
     | S repeat_v155058 ⇒
       fn c_v155059 ⇒
         let guess_v155060 ⇐ (read_word_i60 ()) in
         let c_v155061 ⇐ (send c_v155059 guess_v155060) in
         let __v155062 ⇐ recv c_v155061 in
         match __v155062 with
         | (b_v155063, c_v155064) ⇒
           let __v155065 ⇐ {recv} c_v155064 in
           match __v155065 with
           | (pf_v155066, c_v155067) ⇒
             (match b_v155063 with
              | true ⇒
                ln c_v155068 ⇒
                  let __v155069 ⇐ (print_i34 "You Win!\n") in
                  close⇓ c_v155068
              | false ⇒
                ln c_v155070 ⇒
                  let __v155071 ⇐ recv c_v155070 in
                  match __v155071 with
                  | (diff_v155072, c_v155073) ⇒
                    let __v155074 ⇐ {recv} c_v155073 in
                    match __v155074 with
                    | (pf_v155075, c_v155076) ⇒
                      match diff_v155072 with
                      | Word_c12 s_v155077 __v155078 ⇒
                        let __v155079 ⇐
                          (print_i34
                            ((cats_i20
                               ((cats_i20
                                  ((cats_i20
                                     ((cats_i20 "Incorrect, hint: ")
                                       s_v155077))
                                    ". You have "))
                                 (string_of_nat_i39 repeat_v155058)))
                              " more tries.\n"))
                        in
                        (((player_loop_i61 NULL) repeat_v155058) c_v155076)
                      end
                    end
                  end
              end c_v155067)
           end
         end
     end c_v155047)

def player_i62 =
  fn c_v155080 ⇒
    let __v155081 ⇐ {recv} c_v155080 in
    match __v155081 with
    | (ans_v155082, c_v155083) ⇒
      let __v155084 ⇐ recv c_v155083 in
      match __v155084 with
      | (repeat_v155085, c_v155086) ⇒
        let __v155087 ⇐ (print_i34 "Wordle Game\n") in
        let __v155088 ⇐ (print_i34 "Please guess a word of length 5.\n") in
        let __v155089 ⇐
          (print_i34
            ((cats_i20
               ((cats_i20 "You have ") (string_of_nat_i39 repeat_v155085)))
              " tries.\n"))
        in (((player_loop_i61 NULL) repeat_v155085) c_v155086)
      end
    end

def server_loop_i63 =
  fn ans_v155090 repeat_v155091 c_v155092 ⇒
    (match repeat_v155091 with
     | O ⇒
       fn c_v155093 ⇒
         let c_v155094 ⇐ (send c_v155093 ans_v155090) in
         let c_v155095 ⇐ ({send} c_v155094 NULL) in close⇑ c_v155095
     | S repeat_v155096 ⇒
       fn c_v155097 ⇒
         let __v155098 ⇐ recv c_v155097 in
         match __v155098 with
         | (guess_v155099, c_v155100) ⇒
           let b_v155101 = ((eqw_i53 ans_v155090) guess_v155099) in
           let c_v155102 ⇐ (send c_v155100 b_v155101) in
           let c_v155103 ⇐ ({send} c_v155102 NULL) in
           (match b_v155101 with
            | true ⇒ ln c_v155104 ⇒ close⇑ c_v155104
            | false ⇒
              ln c_v155105 ⇒
                let c_v155106 ⇐
                  (send c_v155105
                    ((wordle_diff_i52 ans_v155090) guess_v155099))
                in
                let c_v155107 ⇐ ({send} c_v155106 NULL) in
                (((server_loop_i63 ans_v155090) repeat_v155096) c_v155107)
            end c_v155103)
         end
     end c_v155092)

def server_i64 =
  fn c_v155108 ⇒
    let repeat_v155109 = 6 in
    let ans_v155110 = (Word_c12 "world" NULL) in
    let c_v155111 ⇐ ({send} c_v155108 NULL) in
    let c_v155112 ⇐ (send c_v155111 repeat_v155109) in
    (((server_loop_i63 ans_v155110) repeat_v155109) c_v155112)

main =
  let c_v155113 ⇐ fork c_v155114 in (server_i64 c_v155114) in
  let c0_v155115 ⇐
    fork c0_v155116 in
      let __v155117 ⇐ recv c0_v155116 in
      match __v155117 with
      | (c_v155118, c0_v155119) ⇒
        let __v155120 ⇐ (player_i62 c_v155118) in
        let c0_v155121 ⇐ (send c0_v155119 ()) in close⇑ c0_v155121
      end
  in
  let c0_v155122 ⇐ (send c0_v155115 c_v155113) in
  let __v155123 ⇐ recv c0_v155122 in
  match __v155123 with
  | (__v155124, c0_v155125) ⇒ close⇓ c0_v155125
  end

trans12 success--------------------------

fun andb_i2(b1_v155535, b2_v155536) = if b1_v155535 then
                                        b2_v155536
                                      else
                                        0

val andbclo_i90 =
  fn b1_v155537 b2_v155538 ⇒ andb_i2(b1_v155537, b2_v155538)

fun orb_i3(b1_v155539, b2_v155540) = if b1_v155539 then
                                       1
                                     else
                                       b2_v155540

val orbclo_i91 = fn b1_v155541 b2_v155542 ⇒ orb_i3(b1_v155541, b2_v155542)

fun notb_i4(b_v155543) = if b_v155543 then
                           0
                         else
                           1

val notbclo_i92 = fn b_v155544 ⇒ notb_i4(b_v155544)

fun compareb_i5(b1_v155545, b2_v155546) =
  if b1_v155545 then
    if b2_v155546 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v155546 then
      LT_c1
    else
      EQ_c3

val comparebclo_i93 =
  fn b1_v155547 b2_v155548 ⇒ compareb_i5(b1_v155547, b2_v155548)

fun lten_i6(x_v155549, y_v155550) =
  let __v155551 = x_v155549 in
  if __v155551 then
    let x_v155552 = __v155551.-1 in
    let __v155553 = y_v155550 in
    if __v155553 then
      let y_v155554 = __v155553.-1 in lten_i6(x_v155552, y_v155554)
    else
      0
  else
    1

val ltenclo_i94 = fn x_v155555 y_v155556 ⇒ lten_i6(x_v155555, y_v155556)

fun gten_i7(x_v155557, y_v155558) =
  let __v155559 = x_v155557 in
  if __v155559 then
    let x_v155560 = __v155559.-1 in
    let __v155561 = y_v155558 in
    if __v155561 then
      let y_v155562 = __v155561.-1 in gten_i7(x_v155560, y_v155562)
    else
      1
  else
    let __v155563 = y_v155558 in
    if __v155563 then
      let __v155564 = __v155563.-1 in 0
    else
      1

val gtenclo_i95 = fn x_v155565 y_v155566 ⇒ gten_i7(x_v155565, y_v155566)

fun ltn_i8(x_v155567, y_v155568) =
  let __v155569 = x_v155567 in
  if __v155569 then
    let x_v155570 = __v155569.-1 in
    let __v155571 = y_v155568 in
    if __v155571 then
      let y_v155572 = __v155571.-1 in ltn_i8(x_v155570, y_v155572)
    else
      0
  else
    let __v155573 = y_v155568 in
    if __v155573 then
      let y_v155574 = __v155573.-1 in 1
    else
      0

val ltnclo_i96 = fn x_v155575 y_v155576 ⇒ ltn_i8(x_v155575, y_v155576)

fun gtn_i9(x_v155577, y_v155578) =
  let __v155579 = x_v155577 in
  if __v155579 then
    let x_v155580 = __v155579.-1 in
    let __v155581 = y_v155578 in
    if __v155581 then
      let y_v155582 = __v155581.-1 in gtn_i9(x_v155580, y_v155582)
    else
      1
  else
    0

val gtnclo_i97 = fn x_v155583 y_v155584 ⇒ gtn_i9(x_v155583, y_v155584)

fun eqn_i10(x_v155585, y_v155586) =
  let __v155587 = x_v155585 in
  if __v155587 then
    let x_v155588 = __v155587.-1 in
    let __v155589 = y_v155586 in
    if __v155589 then
      let y_v155590 = __v155589.-1 in eqn_i10(x_v155588, y_v155590)
    else
      0
  else
    let __v155591 = y_v155586 in
    if __v155591 then
      let __v155592 = __v155591.-1 in 0
    else
      1

val eqnclo_i98 = fn x_v155593 y_v155594 ⇒ eqn_i10(x_v155593, y_v155594)

fun comparen_i11(n1_v155595, n2_v155596) =
  let __v155597 = n1_v155595 in
  if __v155597 then
    let n1_v155598 = __v155597.-1 in
    let __v155599 = n2_v155596 in
    if __v155599 then
      let n2_v155600 = __v155599.-1 in comparen_i11(n1_v155598, n2_v155600)
    else
      GT_c2
  else
    let __v155601 = n2_v155596 in
    if __v155601 then
      let __v155602 = __v155601.-1 in LT_c1
    else
      EQ_c3

val comparenclo_i99 =
  fn n1_v155603 n2_v155604 ⇒ comparen_i11(n1_v155603, n2_v155604)

fun pred_i12(x_v155605) =
  let __v155606 = x_v155605 in
  if __v155606 then
    let x_v155607 = __v155606.-1 in x_v155607
  else
    0

val predclo_i100 = fn x_v155608 ⇒ pred_i12(x_v155608)

fun addn_i13(x_v155609, y_v155610) =
  let __v155611 = x_v155609 in
  if __v155611 then
    let x_v155612 = __v155611.-1 in addn_i13(x_v155612, y_v155610).+1
  else
    y_v155610

val addnclo_i101 = fn x_v155613 y_v155614 ⇒ addn_i13(x_v155613, y_v155614)

fun subn_i14(x_v155615, y_v155616) =
  let __v155617 = y_v155616 in
  if __v155617 then
    let y_v155618 = __v155617.-1 in subn_i14(pred_i12(x_v155615), y_v155618)
  else
    x_v155615

val subnclo_i102 = fn x_v155619 y_v155620 ⇒ subn_i14(x_v155619, y_v155620)

fun muln_i15(x_v155621, y_v155622) =
  let __v155623 = x_v155621 in
  if __v155623 then
    let x_v155624 = __v155623.-1 in
    addn_i13(y_v155622, muln_i15(x_v155624, y_v155622))
  else
    0

val mulnclo_i103 = fn x_v155625 y_v155626 ⇒ muln_i15(x_v155625, y_v155626)

fun divn_i16(x_v155627, y_v155628) =
  if ltn_i8(x_v155627, y_v155628) then
    0
  else
    divn_i16(subn_i14(x_v155627, y_v155628), y_v155628).+1

val divnclo_i104 = fn x_v155629 y_v155630 ⇒ divn_i16(x_v155629, y_v155630)

fun modn_i17(x_v155631, y_v155632) =
  subn_i14(x_v155631, muln_i15(divn_i16(x_v155631, y_v155632), y_v155632))

val modnclo_i105 = fn x_v155633 y_v155634 ⇒ modn_i17(x_v155633, y_v155634)

fun eqc_i18(c1_v155635, c2_v155636) =
  match c1_v155635 with
  | Char_c5 n1_v155637 ⇒
    match c2_v155636 with
    | Char_c5 n2_v155638 ⇒ eqn_i10(n1_v155637, n2_v155638)
    end
  end

val eqcclo_i106 =
  fn c1_v155639 c2_v155640 ⇒ eqc_i18(c1_v155639, c2_v155640)

fun comparec_i19(c1_v155641, c2_v155642) =
  match c1_v155641 with
  | Char_c5 n1_v155643 ⇒
    match c2_v155642 with
    | Char_c5 n2_v155644 ⇒ comparen_i11(n1_v155643, n2_v155644)
    end
  end

val comparecclo_i107 =
  fn c1_v155645 c2_v155646 ⇒ comparec_i19(c1_v155645, c2_v155646)

fun cats_i20(s1_v155647, s2_v155648) =
  match s1_v155647 with
  | EmptyString_c6  ⇒ s2_v155648
  | String_c7 c_v155649 s1_v155650 ⇒
    (String_c7 c_v155649 cats_i20(s1_v155650, s2_v155648))
  end

val catsclo_i108 =
  fn s1_v155651 s2_v155652 ⇒ cats_i20(s1_v155651, s2_v155652)

fun strlen_i21(s_v155653) =
  match s_v155653 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v155654 s_v155655 ⇒ strlen_i21(s_v155655).+1
  end

val strlenclo_i109 = fn s_v155656 ⇒ strlen_i21(s_v155656)

fun eqs_i22(s1_v155657, s2_v155658) =
  match s1_v155657 with
  | EmptyString_c6  ⇒
    match s2_v155658 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v155659 __v155660 ⇒ 0
    end
  | String_c7 c1_v155661 s1_v155662 ⇒
    match s2_v155658 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v155663 s2_v155664 ⇒
      andb_i2(eqc_i18(c1_v155661, c2_v155663),
              eqs_i22(s1_v155662, s2_v155664))
    end
  end

val eqsclo_i110 =
  fn s1_v155665 s2_v155666 ⇒ eqs_i22(s1_v155665, s2_v155666)

fun compares_i23(s1_v155667, s2_v155668) =
  match s1_v155667 with
  | EmptyString_c6  ⇒
    match s2_v155668 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v155669 __v155670 ⇒ LT_c1
    end
  | String_c7 c1_v155671 s1_v155672 ⇒
    match s2_v155668 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v155673 s2_v155674 ⇒
      match comparec_i19(c1_v155671, c2_v155673) with
      | EQ_c3  ⇒ compares_i23(s1_v155672, s2_v155674) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i111 =
  fn s1_v155675 s2_v155676 ⇒ compares_i23(s1_v155675, s2_v155676)

fun and_thenUUU_i75(A_v155677, B_v155678, opt_v155679, f_v155680) =
  match opt_v155679 with
  | NoneUU_c19  ⇒ NoneUU_c19
  | SomeUU_c20 x_v155681 ⇒ (f_v155680) x_v155681
  end

val and_thenUUUclo_i112 =
  fn A_v155682 B_v155683 opt_v155684 ⇒
    ln f_v155685 ⇒
      and_thenUUU_i75(A_v155682, B_v155683, opt_v155684, f_v155685)

fun and_thenUUL_i74(A_v155686, B_v155687, opt_v155688, f_v155689) =
  match opt_v155688 with
  | NoneUL_c17  ⇒ NoneUL_c17
  | SomeUL_c18 x_v155690 ⇒ (f_v155689) x_v155690
  end

val and_thenUULclo_i113 =
  fn A_v155691 B_v155692 opt_v155693 ⇒
    ln f_v155694 ⇒
      and_thenUUL_i74(A_v155691, B_v155692, opt_v155693, f_v155694)

fun and_thenULU_i73(A_v155695, B_v155696, opt_v155697, f_v155698) =
  match opt_v155697 with
  | NoneUU_c19  ⇒ NoneLU_c15
  | SomeUU_c20 x_v155699 ⇒ (f_v155698) x_v155699
  end

val and_thenULUclo_i114 =
  fn A_v155700 B_v155701 opt_v155702 ⇒
    ln f_v155703 ⇒
      and_thenULU_i73(A_v155700, B_v155701, opt_v155702, f_v155703)

fun and_thenULL_i72(A_v155704, B_v155705, opt_v155706, f_v155707) =
  match opt_v155706 with
  | NoneUL_c17  ⇒ NoneLL_c13
  | SomeUL_c18 x_v155708 ⇒ (f_v155707) x_v155708
  end

val and_thenULLclo_i115 =
  fn A_v155709 B_v155710 opt_v155711 ⇒
    ln f_v155712 ⇒
      and_thenULL_i72(A_v155709, B_v155710, opt_v155711, f_v155712)

fun and_thenLUL_i70(A_v155713, B_v155714, opt_v155715, f_v155716) =
  match opt_v155715 with
  | NoneLL_c13  ⇒ NoneUL_c17
  | SomeLL_c14 x_v155717 ⇒ (f_v155716) x_v155717
  end

val and_thenLULclo_i116 =
  fn A_v155718 B_v155719 opt_v155720 ⇒
    ln f_v155721 ⇒
      and_thenLUL_i70(A_v155718, B_v155719, opt_v155720, f_v155721)

fun and_thenLLL_i68(A_v155722, B_v155723, opt_v155724, f_v155725) =
  match opt_v155724 with
  | NoneLL_c13  ⇒ NoneLL_c13
  | SomeLL_c14 x_v155726 ⇒ (f_v155725) x_v155726
  end

val and_thenLLLclo_i117 =
  fn A_v155727 B_v155728 opt_v155729 ⇒
    ln f_v155730 ⇒
      and_thenLLL_i68(A_v155727, B_v155728, opt_v155729, f_v155730)

fun lenUU_i79(A_v155731, xs_v155732) =
  match xs_v155732 with
  | nilUU_c27  ⇒ (0, nilUU_c27)
  | consUU_c28 x_v155733 xs_v155734 ⇒
    match lenUU_i79(NULL, xs_v155734) with
    | (n_v155735, xs_v155736) ⇒
      (n_v155735.+1, (consUU_c28 x_v155733 xs_v155736))
    end
  end

val lenUUclo_i118 =
  fn A_v155737 xs_v155738 ⇒ lenUU_i79(A_v155737, xs_v155738)

fun lenUL_i78(A_v155739, xs_v155740) =
  match xs_v155740 with
  | nilUL_c25  ⇒ (0, nilUL_c25)
  | consUL_c26 x_v155741 xs_v155742 ⇒
    match lenUL_i78(NULL, xs_v155742) with
    | (n_v155743, xs_v155744) ⇒
      (n_v155743.+1, (consUL_c26 x_v155741 xs_v155744))
    end
  end

val lenULclo_i119 =
  fn A_v155745 xs_v155746 ⇒ lenUL_i78(A_v155745, xs_v155746)

fun lenLL_i76(A_v155747, xs_v155748) =
  match xs_v155748 with
  | nilLL_c21  ⇒ (0, nilLL_c21)
  | consLL_c22 x_v155749 xs_v155750 ⇒
    match lenLL_i76(NULL, xs_v155750) with
    | (n_v155751, xs_v155752) ⇒
      (n_v155751.+1, (consLL_c22 x_v155749 xs_v155752))
    end
  end

val lenLLclo_i120 =
  fn A_v155753 xs_v155754 ⇒ lenLL_i76(A_v155753, xs_v155754)

fun appendUU_i83(A_v155755, xs_v155756, ys_v155757) =
  match xs_v155756 with
  | nilUU_c27  ⇒ ys_v155757
  | consUU_c28 x_v155758 xs_v155759 ⇒
    (consUU_c28 x_v155758 appendUU_i83(NULL, xs_v155759, ys_v155757))
  end

val appendUUclo_i121 =
  fn A_v155760 xs_v155761 ⇒
    ln ys_v155762 ⇒ appendUU_i83(A_v155760, xs_v155761, ys_v155762)

fun appendUL_i82(A_v155763, xs_v155764, ys_v155765) =
  match xs_v155764 with
  | nilUL_c25  ⇒ ys_v155765
  | consUL_c26 x_v155766 xs_v155767 ⇒
    (consUL_c26 x_v155766 appendUL_i82(NULL, xs_v155767, ys_v155765))
  end

val appendULclo_i122 =
  fn A_v155768 xs_v155769 ⇒
    ln ys_v155770 ⇒ appendUL_i82(A_v155768, xs_v155769, ys_v155770)

fun appendLL_i80(A_v155771, xs_v155772, ys_v155773) =
  match xs_v155772 with
  | nilLL_c21  ⇒ ys_v155773
  | consLL_c22 x_v155774 xs_v155775 ⇒
    (consLL_c22 x_v155774 appendLL_i80(NULL, xs_v155775, ys_v155773))
  end

val appendLLclo_i123 =
  fn A_v155776 xs_v155777 ⇒
    ln ys_v155778 ⇒ appendLL_i80(A_v155776, xs_v155777, ys_v155778)

fun readline_i33(__v155779) =
  ln __v155780 ⇒
    let ch_v155781 = (ln __v155782 ⇒ open stdin) NULL in
    let ch_v155783 =
      ((fn x_v155784 ⇒ ln __v155785 ⇒ send(ch_v155781, x_v155784)) 1)
        NULL
    in
    let __v155786 = (ln __v155787 ⇒ recv(ch_v155783)) NULL in
    (match __v155786 with
     | (s_v155788, ch_v155789) ⇒
       ln __v155790 ⇒
         let ch_v155791 =
           ((fn x_v155792 ⇒ ln __v155793 ⇒ send(ch_v155789, x_v155792)) 0)
             NULL
         in
         let __v155794 =
           (ln __v155795 ⇒ let __v155796 = ch_v155791 in NULL) NULL
         in (ln __v155797 ⇒ s_v155788) NULL
     end) NULL

val readlineclo_i124 = fn __v155798 ⇒ readline_i33(__v155798)

fun print_i34(s_v155799) =
  ln __v155800 ⇒
    let ch_v155801 = (ln __v155802 ⇒ open stdout) NULL in
    let ch_v155803 =
      ((fn x_v155804 ⇒ ln __v155805 ⇒ send(ch_v155801, x_v155804)) 1)
        NULL
    in
    let ch_v155806 =
      ((fn x_v155807 ⇒ ln __v155808 ⇒ send(ch_v155803, x_v155807))
         s_v155799)
        NULL
    in
    let ch_v155809 =
      ((fn x_v155810 ⇒ ln __v155811 ⇒ send(ch_v155806, x_v155810)) 0)
        NULL
    in (ln __v155812 ⇒ let __v155813 = ch_v155809 in NULL) NULL

val printclo_i125 = fn s_v155814 ⇒ print_i34(s_v155814)

fun prerr_i35(s_v155815) =
  ln __v155816 ⇒
    let ch_v155817 = (ln __v155818 ⇒ open stderr) NULL in
    let ch_v155819 =
      ((fn x_v155820 ⇒ ln __v155821 ⇒ send(ch_v155817, x_v155820)) 1)
        NULL
    in
    let ch_v155822 =
      ((fn x_v155823 ⇒ ln __v155824 ⇒ send(ch_v155819, x_v155823))
         s_v155815)
        NULL
    in
    let ch_v155825 =
      ((fn x_v155826 ⇒ ln __v155827 ⇒ send(ch_v155822, x_v155826)) 0)
        NULL
    in (ln __v155828 ⇒ let __v155829 = ch_v155825 in NULL) NULL

val prerrclo_i126 = fn s_v155830 ⇒ prerr_i35(s_v155830)

val digits_i36 =
  (consUU_c28
    "0"
    (consUU_c28
      "1"
      (consUU_c28
        "2"
        (consUU_c28
          "3"
          (consUU_c28
            "4"
            (consUU_c28
              "5"
              (consUU_c28
                "6"
                (consUU_c28 "7" (consUU_c28 "8" (consUU_c28 "9" nilUU_c27))))))))))

fun get_at_i37(A_v155831, n_v155832, xs_v155833, a_v155834) =
  let __v155835 = n_v155832 in
  if __v155835 then
    let n_v155836 = __v155835.-1 in
    match xs_v155833 with
    | nilUU_c27  ⇒ a_v155834
    | consUU_c28 __v155837 xs_v155838 ⇒
      get_at_i37(NULL, n_v155836, xs_v155838, a_v155834)
    end
  else
    match xs_v155833 with
    | nilUU_c27  ⇒ a_v155834 | consUU_c28 x_v155839 __v155840 ⇒ x_v155839
    end

val get_atclo_i127 =
  fn A_v155841 n_v155842 xs_v155843 a_v155844 ⇒
    get_at_i37(A_v155841, n_v155842, xs_v155843, a_v155844)

fun string_of_digit_i38(n_v155845) =
  get_at_i37(NULL, n_v155845, digits_i36, EmptyString_c6)

val string_of_digitclo_i128 = fn n_v155846 ⇒ string_of_digit_i38(n_v155846)

fun string_of_nat_i39(n_v155847) =
  let s_v155848 = string_of_digit_i38(modn_i17(n_v155847, 10)) in
  let n_v155849 = divn_i16(n_v155847, 10) in
  if ltn_i8(0, n_v155849) then
    cats_i20(string_of_nat_i39(n_v155849), s_v155848)
  else
    s_v155848

val string_of_natclo_i129 = fn n_v155850 ⇒ string_of_nat_i39(n_v155850)

fun digit_of_char_i40(c_v155851) =
  if eqc_i18(c_v155851, '0') then
    (SomeUL_c18 0)
  else
    if eqc_i18(c_v155851, '1') then
      (SomeUL_c18 1)
    else
      if eqc_i18(c_v155851, '2') then
        (SomeUL_c18 2)
      else
        if eqc_i18(c_v155851, '3') then
          (SomeUL_c18 3)
        else
          if eqc_i18(c_v155851, '4') then
            (SomeUL_c18 4)
          else
            if eqc_i18(c_v155851, '5') then
              (SomeUL_c18 5)
            else
              if eqc_i18(c_v155851, '6') then
                (SomeUL_c18 6)
              else
                if eqc_i18(c_v155851, '7') then
                  (SomeUL_c18 7)
                else
                  if eqc_i18(c_v155851, '8') then
                    (SomeUL_c18 8)
                  else
                    if eqc_i18(c_v155851, '9') then
                      (SomeUL_c18 9)
                    else
                      NoneUL_c17

val digit_of_charclo_i130 = fn c_v155852 ⇒ digit_of_char_i40(c_v155852)

fun nat_of_string_loop_i41(s_v155853, acc_v155854) =
  match s_v155853 with
  | EmptyString_c6  ⇒ (SomeUL_c18 acc_v155854)
  | String_c7 c_v155855 s_v155856 ⇒
    match digit_of_char_i40(c_v155855) with
    | NoneUL_c17  ⇒ NoneUL_c17
    | SomeUL_c18 n_v155857 ⇒
      nat_of_string_loop_i41(s_v155856,
                             addn_i13(muln_i15(acc_v155854, 10), n_v155857))
    end
  end

val nat_of_string_loopclo_i131 =
  fn s_v155858 acc_v155859 ⇒ nat_of_string_loop_i41(s_v155858, acc_v155859)

fun nat_of_string_i42(s_v155860) = nat_of_string_loop_i41(s_v155860, 0)

val nat_of_stringclo_i132 = fn s_v155861 ⇒ nat_of_string_i42(s_v155861)

fun contains_i49(c_v155862, s_v155863) =
  match s_v155863 with
  | EmptyString_c6  ⇒ 0
  | String_c7 c0_v155864 s_v155865 ⇒
    if eqc_i18(c_v155862, c0_v155864) then
      1
    else
      contains_i49(c_v155862, s_v155865)
  end

val containsclo_i133 =
  fn c_v155866 s_v155867 ⇒ contains_i49(c_v155866, s_v155867)

fun string_diff_i50(ans_v155868, s1_v155869, s2_v155870) =
  match s1_v155869 with
  | EmptyString_c6  ⇒ EmptyString_c6
  | String_c7 c1_v155871 s1_v155872 ⇒
    match s2_v155870 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c2_v155873 s2_v155874 ⇒
      if eqc_i18(c1_v155871, c2_v155873) then
        cats_i20("Y", string_diff_i50(ans_v155868, s1_v155872, s2_v155874))
      else
        if contains_i49(c2_v155873, ans_v155868) then
          cats_i20("I", string_diff_i50(ans_v155868, s1_v155872, s2_v155874))
        else
          cats_i20("N", string_diff_i50(ans_v155868, s1_v155872, s2_v155874))
    end
  end

val string_diffclo_i134 =
  fn ans_v155875 s1_v155876 s2_v155877 ⇒
    string_diff_i50(ans_v155875, s1_v155876, s2_v155877)

fun wordle_diff_i52(ans_v155878, guess_v155879) =
  match ans_v155878 with
  | Word_c12 ans_v155880 pf1_v155881 ⇒
    match guess_v155879 with
    | Word_c12 guess_v155882 pf2_v155883 ⇒
      let pf1_v155884 = NULL in
      let pf2_v155885 = NULL in
      let pf_v155886 = NULL in
      (Word_c12
        string_diff_i50(ans_v155880, ans_v155880, guess_v155882) NULL)
    end
  end

val wordle_diffclo_i135 =
  fn ans_v155887 guess_v155888 ⇒
    wordle_diff_i52(ans_v155887, guess_v155888)

fun eqw_i53(w1_v155889, w2_v155890) =
  match w1_v155889 with
  | Word_c12 s1_v155891 __v155892 ⇒
    match w2_v155890 with
    | Word_c12 s2_v155893 __v155894 ⇒ eqs_i22(s1_v155891, s2_v155893)
    end
  end

val eqwclo_i136 =
  fn w1_v155895 w2_v155896 ⇒ eqw_i53(w1_v155895, w2_v155896)

fun read_word_i60(__v155897) =
  ln __v155898 ⇒
    let s_v155899 = (readline_i33(NULL)) NULL in
    ((if eqn_i10(strlen_i21(s_v155899), 5) then
        fn e_v155900 ⇒ ln __v155901 ⇒ (Word_c12 s_v155899 NULL)
      else
        fn __v155902 ⇒
          ln __v155903 ⇒
            let __v155904 =
              (print_i34("please input a word with length of 5\n")) NULL
            in (read_word_i60(NULL)) NULL)
       NULL)
      NULL

val read_wordclo_i137 = fn __v155905 ⇒ read_word_i60(__v155905)

fun player_loop_i61(ans_v155906, repeat_v155907, c_v155908) =
  (let __v155909 = repeat_v155907 in
   if __v155909 then
     let repeat_v155910 = __v155909.-1 in
     fn c_v155911 ⇒
       ln __v155912 ⇒
         let guess_v155913 = (read_word_i60(NULL)) NULL in
         let c_v155914 =
           ((fn x_v155915 ⇒ ln __v155916 ⇒ send(c_v155911, x_v155915))
              guess_v155913)
             NULL
         in
         let __v155917 = (ln __v155918 ⇒ recv(c_v155914)) NULL in
         (match __v155917 with
          | (b_v155919, c_v155920) ⇒
            ln __v155921 ⇒
              let __v155922 = (ln __v155923 ⇒ (NULL, c_v155920)) NULL in
              (match __v155922 with
               | (pf_v155924, c_v155925) ⇒
                 (if b_v155919 then
                    ln c_v155926 __v155927 ⇒
                      let __v155928 = (print_i34("You Win!\n")) NULL in
                      (ln __v155929 ⇒ close(c_v155926)) NULL
                  else
                    ln c_v155930 __v155931 ⇒
                      let __v155932 = (ln __v155933 ⇒ recv(c_v155930)) NULL
                      in
                      (match __v155932 with
                       | (diff_v155934, c_v155935) ⇒
                         ln __v155936 ⇒
                           let __v155937 =
                             (ln __v155938 ⇒ (NULL, c_v155935)) NULL
                           in
                           (match __v155937 with
                            | (pf_v155939, c_v155940) ⇒
                              match diff_v155934 with
                              | Word_c12 s_v155941 __v155942 ⇒
                                ln __v155943 ⇒
                                  let __v155944 =
                                    (print_i34(cats_i20(cats_i20(cats_i20(
                                                                 cats_i20(
                                                                 "Incorrect, hint: ",
                                                                 s_v155941),
                                                                 ". You have "),
                                                                 string_of_nat_i39(
                                                                 repeat_v155910)),
                                                        " more tries.\n")))
                                      NULL
                                  in
                                  (player_loop_i61(NULL, repeat_v155910,
                                                   c_v155940))
                                    NULL
                              end
                            end) NULL
                       end) NULL)
                   c_v155925
               end) NULL
          end) NULL
   else
     fn c_v155945 ⇒
       ln __v155946 ⇒
         let __v155947 = (ln __v155948 ⇒ recv(c_v155945)) NULL in
         (match __v155947 with
          | (ans_v155949, c_v155950) ⇒
            ln __v155951 ⇒
              let __v155952 = (ln __v155953 ⇒ (NULL, c_v155950)) NULL in
              (match __v155952 with
               | (pf_v155954, c_v155955) ⇒
                 match ans_v155949 with
                 | Word_c12 s_v155956 __v155957 ⇒
                   ln __v155958 ⇒
                     let __v155959 =
                       (print_i34(cats_i20(cats_i20("You Lose! The answer is ",
                                                    s_v155956),
                                           ".\n")))
                         NULL
                     in (ln __v155960 ⇒ close(c_v155955)) NULL
                 end
               end) NULL
          end) NULL)
    c_v155908

val player_loopclo_i138 =
  fn ans_v155961 repeat_v155962 c_v155963 ⇒
    player_loop_i61(ans_v155961, repeat_v155962, c_v155963)

fun player_i62(c_v155964) =
  ln __v155965 ⇒
    let __v155966 = (ln __v155967 ⇒ (NULL, c_v155964)) NULL in
    (match __v155966 with
     | (ans_v155968, c_v155969) ⇒
       ln __v155970 ⇒
         let __v155971 = (ln __v155972 ⇒ recv(c_v155969)) NULL in
         (match __v155971 with
          | (repeat_v155973, c_v155974) ⇒
            ln __v155975 ⇒
              let __v155976 = (print_i34("Wordle Game\n")) NULL in
              let __v155977 =
                (print_i34("Please guess a word of length 5.\n")) NULL
              in
              let __v155978 =
                (print_i34(cats_i20(cats_i20("You have ",
                                             string_of_nat_i39(repeat_v155973)),
                                    " tries.\n")))
                  NULL
              in (player_loop_i61(NULL, repeat_v155973, c_v155974)) NULL
          end) NULL
     end) NULL

val playerclo_i139 = fn c_v155979 ⇒ player_i62(c_v155979)

fun server_loop_i63(ans_v155980, repeat_v155981, c_v155982) =
  (let __v155983 = repeat_v155981 in
   if __v155983 then
     let repeat_v155984 = __v155983.-1 in
     fn c_v155985 ⇒
       ln __v155986 ⇒
         let __v155987 = (ln __v155988 ⇒ recv(c_v155985)) NULL in
         (match __v155987 with
          | (guess_v155989, c_v155990) ⇒
            let b_v155991 = eqw_i53(ans_v155980, guess_v155989) in
            ln __v155992 ⇒
              let c_v155993 =
                ((fn x_v155994 ⇒
                    ln __v155995 ⇒ send(c_v155990, x_v155994))
                   b_v155991)
                  NULL
              in
              let c_v155996 =
                ((fn x_v155997 ⇒ ln __v155998 ⇒ c_v155993) NULL) NULL
              in
              ((if b_v155991 then
                  ln c_v155999 __v156000 ⇒
                    let __v156001 = c_v155999 in NULL
                else
                  ln c_v156002 __v156003 ⇒
                    let c_v156004 =
                      ((fn x_v156005 ⇒
                          ln __v156006 ⇒ send(c_v156002, x_v156005))
                         wordle_diff_i52(ans_v155980, guess_v155989))
                        NULL
                    in
                    let c_v156007 =
                      ((fn x_v156008 ⇒ ln __v156009 ⇒ c_v156004) NULL)
                        NULL
                    in
                    (server_loop_i63(ans_v155980, repeat_v155984, c_v156007))
                      NULL)
                 c_v155996)
                NULL
          end) NULL
   else
     fn c_v156010 ⇒
       ln __v156011 ⇒
         let c_v156012 =
           ((fn x_v156013 ⇒ ln __v156014 ⇒ send(c_v156010, x_v156013))
              ans_v155980)
             NULL
         in
         let c_v156015 =
           ((fn x_v156016 ⇒ ln __v156017 ⇒ c_v156012) NULL) NULL
         in (ln __v156018 ⇒ let __v156019 = c_v156015 in NULL) NULL)
    c_v155982

val server_loopclo_i140 =
  fn ans_v156020 repeat_v156021 c_v156022 ⇒
    server_loop_i63(ans_v156020, repeat_v156021, c_v156022)

fun server_i64(c_v156023) =
  let repeat_v156024 = 6 in
  let ans_v156025 = (Word_c12 "world" NULL) in
  ln __v156026 ⇒
    let c_v156027 = ((fn x_v156028 ⇒ ln __v156029 ⇒ c_v156023) NULL) NULL
    in
    let c_v156030 =
      ((fn x_v156031 ⇒ ln __v156032 ⇒ send(c_v156027, x_v156031))
         repeat_v156024)
        NULL
    in (server_loop_i63(ans_v156025, repeat_v156024, c_v156030)) NULL

val serverclo_i141 = fn c_v156033 ⇒ server_i64(c_v156033)

main =
  (ln __v156034 ⇒
     let c_v156035 =
       (ln __v156036 ⇒ fork c_v156037 in (server_i64(c_v156037)) NULL) NULL
     in
     let c0_v156038 =
       (ln __v156039 ⇒
          fork c0_v156040 in
            (ln __v156041 ⇒
               let __v156042 = (ln __v156043 ⇒ recv(c0_v156040)) NULL in
               (match __v156042 with
                | (c_v156044, c0_v156045) ⇒
                  ln __v156046 ⇒
                    let __v156047 = (player_i62(c_v156044)) NULL in
                    let c0_v156048 =
                      ((fn x_v156049 ⇒
                          ln __v156050 ⇒ send(c0_v156045, x_v156049))
                         NULL)
                        NULL
                    in
                    (ln __v156051 ⇒ let __v156052 = c0_v156048 in NULL)
                      NULL
                end) NULL)
              NULL)
         NULL
     in
     let c0_v156053 =
       ((ln x_v156054 __v156055 ⇒ send(c0_v156038, x_v156054)) c_v156035)
         NULL
     in
     let __v156056 = (ln __v156057 ⇒ recv(c0_v156053)) NULL in
     (match __v156056 with
      | (__v156058, c0_v156059) ⇒ ln __v156060 ⇒ close(c0_v156059)
      end) NULL)
    NULL

trans23 success--------------------------

fun andb_i2(b1_v157201, b2_v157202) = if b1_v157201 then
                                        b2_v157202
                                      else
                                        0

val andbclo_i90 =
  fn b1_v157203 b2_v157204 ⇒ andb_i2(b1_v157203, b2_v157204)

fun orb_i3(b1_v157205, b2_v157206) = if b1_v157205 then
                                       1
                                     else
                                       b2_v157206

val orbclo_i91 = fn b1_v157207 b2_v157208 ⇒ orb_i3(b1_v157207, b2_v157208)

fun notb_i4(b_v157209) = if b_v157209 then
                           0
                         else
                           1

val notbclo_i92 = fn b_v157210 ⇒ notb_i4(b_v157210)

fun compareb_i5(b1_v157211, b2_v157212) =
  if b1_v157211 then
    if b2_v157212 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v157212 then
      LT_c1
    else
      EQ_c3

val comparebclo_i93 =
  fn b1_v157213 b2_v157214 ⇒ compareb_i5(b1_v157213, b2_v157214)

fun lten_i6(x_v157215, y_v157216) =
  if x_v157215 then
    if y_v157216 then
      lten_i6(x_v157215.-1, y_v157216.-1)
    else
      0
  else
    1

val ltenclo_i94 = fn x_v157217 y_v157218 ⇒ lten_i6(x_v157217, y_v157218)

fun gten_i7(x_v157219, y_v157220) =
  if x_v157219 then
    if y_v157220 then
      gten_i7(x_v157219.-1, y_v157220.-1)
    else
      1
  else
    if y_v157220 then
      0
    else
      1

val gtenclo_i95 = fn x_v157221 y_v157222 ⇒ gten_i7(x_v157221, y_v157222)

fun ltn_i8(x_v157223, y_v157224) =
  if x_v157223 then
    if y_v157224 then
      ltn_i8(x_v157223.-1, y_v157224.-1)
    else
      0
  else
    if y_v157224 then
      1
    else
      0

val ltnclo_i96 = fn x_v157225 y_v157226 ⇒ ltn_i8(x_v157225, y_v157226)

fun gtn_i9(x_v157227, y_v157228) =
  if x_v157227 then
    if y_v157228 then
      gtn_i9(x_v157227.-1, y_v157228.-1)
    else
      1
  else
    0

val gtnclo_i97 = fn x_v157229 y_v157230 ⇒ gtn_i9(x_v157229, y_v157230)

fun eqn_i10(x_v157231, y_v157232) =
  if x_v157231 then
    if y_v157232 then
      eqn_i10(x_v157231.-1, y_v157232.-1)
    else
      0
  else
    if y_v157232 then
      0
    else
      1

val eqnclo_i98 = fn x_v157233 y_v157234 ⇒ eqn_i10(x_v157233, y_v157234)

fun comparen_i11(n1_v157235, n2_v157236) =
  if n1_v157235 then
    if n2_v157236 then
      comparen_i11(n1_v157235.-1, n2_v157236.-1)
    else
      GT_c2
  else
    if n2_v157236 then
      LT_c1
    else
      EQ_c3

val comparenclo_i99 =
  fn n1_v157237 n2_v157238 ⇒ comparen_i11(n1_v157237, n2_v157238)

fun pred_i12(x_v157239) = if x_v157239 then
                            x_v157239.-1
                          else
                            0

val predclo_i100 = fn x_v157240 ⇒ pred_i12(x_v157240)

fun addn_i13(x_v157241, y_v157242) =
  if x_v157241 then
    addn_i13(x_v157241.-1, y_v157242).+1
  else
    y_v157242

val addnclo_i101 = fn x_v157243 y_v157244 ⇒ addn_i13(x_v157243, y_v157244)

fun subn_i14(x_v157245, y_v157246) =
  if y_v157246 then
    subn_i14(pred_i12(x_v157245), y_v157246.-1)
  else
    x_v157245

val subnclo_i102 = fn x_v157247 y_v157248 ⇒ subn_i14(x_v157247, y_v157248)

fun muln_i15(x_v157249, y_v157250) =
  if x_v157249 then
    addn_i13(y_v157250, muln_i15(x_v157249.-1, y_v157250))
  else
    0

val mulnclo_i103 = fn x_v157251 y_v157252 ⇒ muln_i15(x_v157251, y_v157252)

fun divn_i16(x_v157253, y_v157254) =
  if ltn_i8(x_v157253, y_v157254) then
    0
  else
    divn_i16(subn_i14(x_v157253, y_v157254), y_v157254).+1

val divnclo_i104 = fn x_v157255 y_v157256 ⇒ divn_i16(x_v157255, y_v157256)

fun modn_i17(x_v157257, y_v157258) =
  subn_i14(x_v157257, muln_i15(divn_i16(x_v157257, y_v157258), y_v157258))

val modnclo_i105 = fn x_v157259 y_v157260 ⇒ modn_i17(x_v157259, y_v157260)

fun eqc_i18(c1_v157261, c2_v157262) =
  match c1_v157261 with
  | Char_c5 n1_v157263 ⇒
    match c2_v157262 with
    | Char_c5 n2_v157264 ⇒ eqn_i10(n1_v157263, n2_v157264)
    end
  end

val eqcclo_i106 =
  fn c1_v157265 c2_v157266 ⇒ eqc_i18(c1_v157265, c2_v157266)

fun comparec_i19(c1_v157267, c2_v157268) =
  match c1_v157267 with
  | Char_c5 n1_v157269 ⇒
    match c2_v157268 with
    | Char_c5 n2_v157270 ⇒ comparen_i11(n1_v157269, n2_v157270)
    end
  end

val comparecclo_i107 =
  fn c1_v157271 c2_v157272 ⇒ comparec_i19(c1_v157271, c2_v157272)

fun cats_i20(s1_v157273, s2_v157274) =
  match s1_v157273 with
  | EmptyString_c6  ⇒ s2_v157274
  | String_c7 c_v157275 s1_v157276 ⇒
    (String_c7 c_v157275 cats_i20(s1_v157276, s2_v157274))
  end

val catsclo_i108 =
  fn s1_v157277 s2_v157278 ⇒ cats_i20(s1_v157277, s2_v157278)

fun strlen_i21(s_v157279) =
  match s_v157279 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v157280 s_v157281 ⇒ strlen_i21(s_v157281).+1
  end

val strlenclo_i109 = fn s_v157282 ⇒ strlen_i21(s_v157282)

fun eqs_i22(s1_v157283, s2_v157284) =
  match s1_v157283 with
  | EmptyString_c6  ⇒
    match s2_v157284 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v157285 __v157286 ⇒ 0
    end
  | String_c7 c1_v157287 s1_v157288 ⇒
    match s2_v157284 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v157289 s2_v157290 ⇒
      andb_i2(eqc_i18(c1_v157287, c2_v157289),
              eqs_i22(s1_v157288, s2_v157290))
    end
  end

val eqsclo_i110 =
  fn s1_v157291 s2_v157292 ⇒ eqs_i22(s1_v157291, s2_v157292)

fun compares_i23(s1_v157293, s2_v157294) =
  match s1_v157293 with
  | EmptyString_c6  ⇒
    match s2_v157294 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v157295 __v157296 ⇒ LT_c1
    end
  | String_c7 c1_v157297 s1_v157298 ⇒
    match s2_v157294 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v157299 s2_v157300 ⇒
      match comparec_i19(c1_v157297, c2_v157299) with
      | EQ_c3  ⇒ compares_i23(s1_v157298, s2_v157300) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i111 =
  fn s1_v157301 s2_v157302 ⇒ compares_i23(s1_v157301, s2_v157302)

fun and_thenUUU_i75(A_v157303, B_v157304, opt_v157305, f_v157306) =
  match opt_v157305 with
  | NoneUU_c19  ⇒ NoneUU_c19
  | SomeUU_c20 x_v157307 ⇒ (f_v157306) x_v157307
  end

val and_thenUUUclo_i112 =
  fn A_v157308 B_v157309 opt_v157310 ⇒
    ln f_v157311 ⇒
      and_thenUUU_i75(A_v157308, B_v157309, opt_v157310, f_v157311)

fun and_thenUUL_i74(A_v157312, B_v157313, opt_v157314, f_v157315) =
  match opt_v157314 with
  | NoneUL_c17  ⇒ NoneUL_c17
  | SomeUL_c18 x_v157316 ⇒ (f_v157315) x_v157316
  end

val and_thenUULclo_i113 =
  fn A_v157317 B_v157318 opt_v157319 ⇒
    ln f_v157320 ⇒
      and_thenUUL_i74(A_v157317, B_v157318, opt_v157319, f_v157320)

fun and_thenULU_i73(A_v157321, B_v157322, opt_v157323, f_v157324) =
  match opt_v157323 with
  | NoneUU_c19  ⇒ NoneLU_c15
  | SomeUU_c20 x_v157325 ⇒ (f_v157324) x_v157325
  end

val and_thenULUclo_i114 =
  fn A_v157326 B_v157327 opt_v157328 ⇒
    ln f_v157329 ⇒
      and_thenULU_i73(A_v157326, B_v157327, opt_v157328, f_v157329)

fun and_thenULL_i72(A_v157330, B_v157331, opt_v157332, f_v157333) =
  match opt_v157332 with
  | NoneUL_c17  ⇒ NoneLL_c13
  | SomeUL_c18 x_v157334 ⇒ (f_v157333) x_v157334
  end

val and_thenULLclo_i115 =
  fn A_v157335 B_v157336 opt_v157337 ⇒
    ln f_v157338 ⇒
      and_thenULL_i72(A_v157335, B_v157336, opt_v157337, f_v157338)

fun and_thenLUL_i70(A_v157339, B_v157340, opt_v157341, f_v157342) =
  match opt_v157341 with
  | NoneLL_c13  ⇒ NoneUL_c17
  | SomeLL_c14 x_v157343 ⇒ (f_v157342) x_v157343
  end

val and_thenLULclo_i116 =
  fn A_v157344 B_v157345 opt_v157346 ⇒
    ln f_v157347 ⇒
      and_thenLUL_i70(A_v157344, B_v157345, opt_v157346, f_v157347)

fun and_thenLLL_i68(A_v157348, B_v157349, opt_v157350, f_v157351) =
  match opt_v157350 with
  | NoneLL_c13  ⇒ NoneLL_c13
  | SomeLL_c14 x_v157352 ⇒ (f_v157351) x_v157352
  end

val and_thenLLLclo_i117 =
  fn A_v157353 B_v157354 opt_v157355 ⇒
    ln f_v157356 ⇒
      and_thenLLL_i68(A_v157353, B_v157354, opt_v157355, f_v157356)

fun lenUU_i79(A_v157357, xs_v157358) =
  match xs_v157358 with
  | nilUU_c27  ⇒ (0, nilUU_c27)
  | consUU_c28 x_v157359 xs_v157360 ⇒
    match lenUU_i79(NULL, xs_v157360) with
    | (n_v157361, xs_v157362) ⇒
      (n_v157361.+1, (consUU_c28 x_v157359 xs_v157362))
    end
  end

val lenUUclo_i118 =
  fn A_v157363 xs_v157364 ⇒ lenUU_i79(A_v157363, xs_v157364)

fun lenUL_i78(A_v157365, xs_v157366) =
  match xs_v157366 with
  | nilUL_c25  ⇒ (0, nilUL_c25)
  | consUL_c26 x_v157367 xs_v157368 ⇒
    match lenUL_i78(NULL, xs_v157368) with
    | (n_v157369, xs_v157370) ⇒
      (n_v157369.+1, (consUL_c26 x_v157367 xs_v157370))
    end
  end

val lenULclo_i119 =
  fn A_v157371 xs_v157372 ⇒ lenUL_i78(A_v157371, xs_v157372)

fun lenLL_i76(A_v157373, xs_v157374) =
  match xs_v157374 with
  | nilLL_c21  ⇒ (0, nilLL_c21)
  | consLL_c22 x_v157375 xs_v157376 ⇒
    match lenLL_i76(NULL, xs_v157376) with
    | (n_v157377, xs_v157378) ⇒
      (n_v157377.+1, (consLL_c22 x_v157375 xs_v157378))
    end
  end

val lenLLclo_i120 =
  fn A_v157379 xs_v157380 ⇒ lenLL_i76(A_v157379, xs_v157380)

fun appendUU_i83(A_v157381, xs_v157382, ys_v157383) =
  match xs_v157382 with
  | nilUU_c27  ⇒ ys_v157383
  | consUU_c28 x_v157384 xs_v157385 ⇒
    (consUU_c28 x_v157384 appendUU_i83(NULL, xs_v157385, ys_v157383))
  end

val appendUUclo_i121 =
  fn A_v157386 xs_v157387 ⇒
    ln ys_v157388 ⇒ appendUU_i83(A_v157386, xs_v157387, ys_v157388)

fun appendUL_i82(A_v157389, xs_v157390, ys_v157391) =
  match xs_v157390 with
  | nilUL_c25  ⇒ ys_v157391
  | consUL_c26 x_v157392 xs_v157393 ⇒
    (consUL_c26 x_v157392 appendUL_i82(NULL, xs_v157393, ys_v157391))
  end

val appendULclo_i122 =
  fn A_v157394 xs_v157395 ⇒
    ln ys_v157396 ⇒ appendUL_i82(A_v157394, xs_v157395, ys_v157396)

fun appendLL_i80(A_v157397, xs_v157398, ys_v157399) =
  match xs_v157398 with
  | nilLL_c21  ⇒ ys_v157399
  | consLL_c22 x_v157400 xs_v157401 ⇒
    (consLL_c22 x_v157400 appendLL_i80(NULL, xs_v157401, ys_v157399))
  end

val appendLLclo_i123 =
  fn A_v157402 xs_v157403 ⇒
    ln ys_v157404 ⇒ appendLL_i80(A_v157402, xs_v157403, ys_v157404)

fun readline_i33(__v157405) =
  ln __v157406 ⇒
    let ch_v157407 = open stdin in
    let ch_v157408 = send(ch_v157407, 1) in
    let __v157409 = recv(ch_v157408) in
    match __v157409 with
    | (s_v157410, ch_v157411) ⇒
      let ch_v157412 = send(ch_v157411, 0) in s_v157410
    end

val readlineclo_i124 = fn __v157413 ⇒ readline_i33(__v157413)

fun print_i34(s_v157414) =
  ln __v157415 ⇒
    let ch_v157416 = open stdout in
    let ch_v157417 = send(ch_v157416, 1) in
    let ch_v157418 = send(ch_v157417, s_v157414) in
    let ch_v157419 = send(ch_v157418, 0) in NULL

val printclo_i125 = fn s_v157420 ⇒ print_i34(s_v157420)

fun prerr_i35(s_v157421) =
  ln __v157422 ⇒
    let ch_v157423 = open stderr in
    let ch_v157424 = send(ch_v157423, 1) in
    let ch_v157425 = send(ch_v157424, s_v157421) in
    let ch_v157426 = send(ch_v157425, 0) in NULL

val prerrclo_i126 = fn s_v157427 ⇒ prerr_i35(s_v157427)

val digits_i36 =
  (consUU_c28
    "0"
    (consUU_c28
      "1"
      (consUU_c28
        "2"
        (consUU_c28
          "3"
          (consUU_c28
            "4"
            (consUU_c28
              "5"
              (consUU_c28
                "6"
                (consUU_c28 "7" (consUU_c28 "8" (consUU_c28 "9" nilUU_c27))))))))))

fun get_at_i37(A_v157428, n_v157429, xs_v157430, a_v157431) =
  if n_v157429 then
    match xs_v157430 with
    | nilUU_c27  ⇒ a_v157431
    | consUU_c28 __v157432 xs_v157433 ⇒
      get_at_i37(NULL, n_v157429.-1, xs_v157433, a_v157431)
    end
  else
    match xs_v157430 with
    | nilUU_c27  ⇒ a_v157431 | consUU_c28 x_v157434 __v157435 ⇒ x_v157434
    end

val get_atclo_i127 =
  fn A_v157436 n_v157437 xs_v157438 a_v157439 ⇒
    get_at_i37(A_v157436, n_v157437, xs_v157438, a_v157439)

fun string_of_digit_i38(n_v157440) =
  get_at_i37(NULL, n_v157440, digits_i36, EmptyString_c6)

val string_of_digitclo_i128 = fn n_v157441 ⇒ string_of_digit_i38(n_v157441)

fun string_of_nat_i39(n_v157442) =
  let s_v157443 = string_of_digit_i38(modn_i17(n_v157442, 10)) in
  let n_v157444 = divn_i16(n_v157442, 10) in
  if ltn_i8(0, n_v157444) then
    cats_i20(string_of_nat_i39(n_v157444), s_v157443)
  else
    s_v157443

val string_of_natclo_i129 = fn n_v157445 ⇒ string_of_nat_i39(n_v157445)

fun digit_of_char_i40(c_v157446) =
  if eqc_i18(c_v157446, '0') then
    (SomeUL_c18 0)
  else
    if eqc_i18(c_v157446, '1') then
      (SomeUL_c18 1)
    else
      if eqc_i18(c_v157446, '2') then
        (SomeUL_c18 2)
      else
        if eqc_i18(c_v157446, '3') then
          (SomeUL_c18 3)
        else
          if eqc_i18(c_v157446, '4') then
            (SomeUL_c18 4)
          else
            if eqc_i18(c_v157446, '5') then
              (SomeUL_c18 5)
            else
              if eqc_i18(c_v157446, '6') then
                (SomeUL_c18 6)
              else
                if eqc_i18(c_v157446, '7') then
                  (SomeUL_c18 7)
                else
                  if eqc_i18(c_v157446, '8') then
                    (SomeUL_c18 8)
                  else
                    if eqc_i18(c_v157446, '9') then
                      (SomeUL_c18 9)
                    else
                      NoneUL_c17

val digit_of_charclo_i130 = fn c_v157447 ⇒ digit_of_char_i40(c_v157447)

fun nat_of_string_loop_i41(s_v157448, acc_v157449) =
  match s_v157448 with
  | EmptyString_c6  ⇒ (SomeUL_c18 acc_v157449)
  | String_c7 c_v157450 s_v157451 ⇒
    match digit_of_char_i40(c_v157450) with
    | NoneUL_c17  ⇒ NoneUL_c17
    | SomeUL_c18 n_v157452 ⇒
      nat_of_string_loop_i41(s_v157451,
                             addn_i13(muln_i15(acc_v157449, 10), n_v157452))
    end
  end

val nat_of_string_loopclo_i131 =
  fn s_v157453 acc_v157454 ⇒ nat_of_string_loop_i41(s_v157453, acc_v157454)

fun nat_of_string_i42(s_v157455) = nat_of_string_loop_i41(s_v157455, 0)

val nat_of_stringclo_i132 = fn s_v157456 ⇒ nat_of_string_i42(s_v157456)

fun contains_i49(c_v157457, s_v157458) =
  match s_v157458 with
  | EmptyString_c6  ⇒ 0
  | String_c7 c0_v157459 s_v157460 ⇒
    if eqc_i18(c_v157457, c0_v157459) then
      1
    else
      contains_i49(c_v157457, s_v157460)
  end

val containsclo_i133 =
  fn c_v157461 s_v157462 ⇒ contains_i49(c_v157461, s_v157462)

fun string_diff_i50(ans_v157463, s1_v157464, s2_v157465) =
  match s1_v157464 with
  | EmptyString_c6  ⇒ EmptyString_c6
  | String_c7 c1_v157466 s1_v157467 ⇒
    match s2_v157465 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c2_v157468 s2_v157469 ⇒
      if eqc_i18(c1_v157466, c2_v157468) then
        cats_i20("Y", string_diff_i50(ans_v157463, s1_v157467, s2_v157469))
      else
        if contains_i49(c2_v157468, ans_v157463) then
          cats_i20("I", string_diff_i50(ans_v157463, s1_v157467, s2_v157469))
        else
          cats_i20("N", string_diff_i50(ans_v157463, s1_v157467, s2_v157469))
    end
  end

val string_diffclo_i134 =
  fn ans_v157470 s1_v157471 s2_v157472 ⇒
    string_diff_i50(ans_v157470, s1_v157471, s2_v157472)

fun wordle_diff_i52(ans_v157473, guess_v157474) =
  match ans_v157473 with
  | Word_c12 ans_v157475 pf1_v157476 ⇒
    match guess_v157474 with
    | Word_c12 guess_v157477 pf2_v157478 ⇒
      (Word_c12
        string_diff_i50(ans_v157475, ans_v157475, guess_v157477) NULL)
    end
  end

val wordle_diffclo_i135 =
  fn ans_v157479 guess_v157480 ⇒
    wordle_diff_i52(ans_v157479, guess_v157480)

fun eqw_i53(w1_v157481, w2_v157482) =
  match w1_v157481 with
  | Word_c12 s1_v157483 __v157484 ⇒
    match w2_v157482 with
    | Word_c12 s2_v157485 __v157486 ⇒ eqs_i22(s1_v157483, s2_v157485)
    end
  end

val eqwclo_i136 =
  fn w1_v157487 w2_v157488 ⇒ eqw_i53(w1_v157487, w2_v157488)

fun read_word_i60(__v157489) =
  ln __v157490 ⇒
    let s_v157491 = (readline_i33(NULL)) NULL in
    ((if eqn_i10(strlen_i21(s_v157491), 5) then
        fn e_v157492 ⇒ ln __v157493 ⇒ (Word_c12 s_v157491 NULL)
      else
        fn __v157494 ⇒
          ln __v157495 ⇒
            let __v157496 =
              (print_i34("please input a word with length of 5\n")) NULL
            in (read_word_i60(NULL)) NULL)
       NULL)
      NULL

val read_wordclo_i137 = fn __v157497 ⇒ read_word_i60(__v157497)

fun player_loop_i61(ans_v157498, repeat_v157499, c_v157500) =
  (if repeat_v157499 then
     fn c_v157501 ⇒
       ln __v157502 ⇒
         let guess_v157503 = (read_word_i60(NULL)) NULL in
         let c_v157504 = send(c_v157501, guess_v157503) in
         let __v157505 = recv(c_v157504) in
         match __v157505 with
         | (b_v157506, c_v157507) ⇒
           match (NULL, c_v157507) with
           | (pf_v157508, c_v157509) ⇒
             ((if b_v157506 then
                 ln c_v157510 __v157511 ⇒
                   let __v157512 = (print_i34("You Win!\n")) NULL in
                   close(c_v157510)
               else
                 ln c_v157513 __v157514 ⇒
                   let __v157515 = recv(c_v157513) in
                   match __v157515 with
                   | (diff_v157516, c_v157517) ⇒
                     match (NULL, c_v157517) with
                     | (pf_v157518, c_v157519) ⇒
                       match diff_v157516 with
                       | Word_c12 s_v157520 __v157521 ⇒
                         let __v157522 =
                           (print_i34(cats_i20(cats_i20(cats_i20(cats_i20(
                                                                 "Incorrect, hint: ",
                                                                 s_v157520),
                                                                 ". You have "),
                                                        string_of_nat_i39(
                                                        repeat_v157499.-1)),
                                               " more tries.\n")))
                             NULL
                         in
                         (player_loop_i61(NULL, repeat_v157499.-1, c_v157519))
                           NULL
                       end
                     end
                   end)
                c_v157509)
               NULL
           end
         end
   else
     fn c_v157523 ⇒
       ln __v157524 ⇒
         let __v157525 = recv(c_v157523) in
         match __v157525 with
         | (ans_v157526, c_v157527) ⇒
           match (NULL, c_v157527) with
           | (pf_v157528, c_v157529) ⇒
             match ans_v157526 with
             | Word_c12 s_v157530 __v157531 ⇒
               let __v157532 =
                 (print_i34(cats_i20(cats_i20("You Lose! The answer is ",
                                              s_v157530),
                                     ".\n")))
                   NULL
               in close(c_v157529)
             end
           end
         end)
    c_v157500

val player_loopclo_i138 =
  fn ans_v157533 repeat_v157534 c_v157535 ⇒
    player_loop_i61(ans_v157533, repeat_v157534, c_v157535)

fun player_i62(c_v157536) =
  ln __v157537 ⇒
    match (NULL, c_v157536) with
    | (ans_v157538, c_v157539) ⇒
      let __v157540 = recv(c_v157539) in
      match __v157540 with
      | (repeat_v157541, c_v157542) ⇒
        let __v157543 = (print_i34("Wordle Game\n")) NULL in
        let __v157544 =
          (print_i34("Please guess a word of length 5.\n")) NULL
        in
        let __v157545 =
          (print_i34(cats_i20(cats_i20("You have ",
                                       string_of_nat_i39(repeat_v157541)),
                              " tries.\n")))
            NULL
        in (player_loop_i61(NULL, repeat_v157541, c_v157542)) NULL
      end
    end

val playerclo_i139 = fn c_v157546 ⇒ player_i62(c_v157546)

fun server_loop_i63(ans_v157547, repeat_v157548, c_v157549) =
  (if repeat_v157548 then
     fn c_v157550 ⇒
       ln __v157551 ⇒
         let __v157552 = recv(c_v157550) in
         match __v157552 with
         | (guess_v157553, c_v157554) ⇒
           let b_v157555 = eqw_i53(ans_v157547, guess_v157553) in
           let c_v157556 = send(c_v157554, b_v157555) in
           ((if b_v157555 then
               ln c_v157557 __v157558 ⇒ NULL
             else
               ln c_v157559 __v157560 ⇒
                 let c_v157561 =
                   let x_v157562 =
                     wordle_diff_i52(ans_v157547, guess_v157553)
                   in send(c_v157559, x_v157562)
                 in
                 (server_loop_i63(ans_v157547, repeat_v157548.-1, c_v157561))
                   NULL)
              c_v157556)
             NULL
         end
   else
     fn c_v157563 ⇒
       ln __v157564 ⇒ let c_v157565 = send(c_v157563, ans_v157547) in NULL)
    c_v157549

val server_loopclo_i140 =
  fn ans_v157566 repeat_v157567 c_v157568 ⇒
    server_loop_i63(ans_v157566, repeat_v157567, c_v157568)

fun server_i64(c_v157569) =
  ln __v157570 ⇒
    let c_v157571 = send(c_v157569, 6) in
    (server_loop_i63((Word_c12 "world" NULL), 6, c_v157571)) NULL

val serverclo_i141 = fn c_v157572 ⇒ server_i64(c_v157572)

main =
  let c_v157573 = fork c_v157574 in (server_i64(c_v157574)) NULL in
  let c0_v157575 =
    fork c0_v157576 in
      let __v157577 = recv(c0_v157576) in
      match __v157577 with
      | (c_v157578, c0_v157579) ⇒
        let __v157580 = (player_i62(c_v157578)) NULL in
        let c0_v157581 = send(c0_v157579, NULL) in NULL
      end
  in
  let c0_v157582 = send(c0_v157575, c_v157573) in
  let __v157583 = recv(c0_v157582) in
  match __v157583 with
  | (__v157584, c0_v157585) ⇒ close(c0_v157585)
  end

trans3e success--------------------------

trans34 success--------------------------

