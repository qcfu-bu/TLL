program digits‹› : ((list‹_, U›) (_)) = ((cons)
(((String) (((Char) (O.+48))) (EmptyString)))
(((cons) (((String) (((Char) (O.+49))) (EmptyString)))
 (((cons) (((String) (((Char) (O.+50))) (EmptyString)))
  (((cons) (((String) (((Char) (O.+51))) (EmptyString)))
   (((cons) (((String) (((Char) (O.+52))) (EmptyString)))
    (((cons) (((String) (((Char) (O.+53))) (EmptyString)))
     (((cons) (((String) (((Char) (O.+54))) (EmptyString)))
      (((cons) (((String) (((Char) (O.+55))) (EmptyString)))
       (((cons) (((String) (((Char) (O.+56))) (EmptyString)))
        (((cons) (((String) (((Char) (O.+57))) (EmptyString))) (nil))))))))))))))))))))

program get_at‹› {A : U} (n : nat) (xs : ((list‹_, U›)
(A))) (a : A) : A = match n as _ in _ with O ⇒ match xs as _ in _ with nil  ⇒ a | cons x
_ ⇒ x | S n ⇒ match xs as _ in _ with nil  ⇒ a | cons _
xs ⇒ ((get_at) (_) (n) (xs)
(a))

program string_of_digit‹› (n : nat) : string = ((get_at) (_) (n) 
(digits)
(EmptyString))

program string_of_nat‹› (n : nat) : string = let s = ((string_of_digit)
(((modn) (n) (O.+10)))) in let n = ((divn) (n) (O.+10)) in match ((ltn)
(O.+0) (n)) as _ in _ with true ⇒ ((cats) (((string_of_nat) (n)))
(s)) | false ⇒ s

program mccarthy‹› (n : nat) : nat = match ((lten) (n)
(O.+100)) as _ in _ with true ⇒ ((mccarthy)
(((mccarthy) (((addn) (n) (O.+11)))))) | false ⇒ ((subn) (n)
(O.+10))

program main‹› : IO unit = let s = ((string_of_nat)
(((mccarthy) (O.+23)))) in ((print)
(((cats) (s) (((String) (((Char) (O.+10))) (EmptyString))))))

parsing success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v159 : bool) (b2_v160 : bool) ⇒
    match b1_v159 as __v161 in ??1 with
    | true ⇒ b2_v160 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v164 : bool) (b2_v165 : bool) ⇒
    match b1_v164 as __v166 in ??2 with
    | true ⇒ true | false ⇒ b2_v165
    end

program notb_i3 : bool → bool =
  fn (b_v168 : bool) ⇒
    match b_v168 as __v169 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v172 : nat) (y_v173 : nat) ⇒
    match x_v172 as __v174 in ??4 with
    | O ⇒ true
    | S x_v175 ⇒
      match y_v173 as __v176 in ??5 with
      | O ⇒ false | S y_v177 ⇒ (lten_i4 x_v175 y_v177)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v180 : nat) (y_v181 : nat) ⇒
    match x_v180 as __v182 in ??6 with
    | O ⇒
      match y_v181 as __v183 in ??8 with
      | O ⇒ true | S __v184 ⇒ false
      end
    | S x_v185 ⇒
      match y_v181 as __v186 in ??7 with
      | O ⇒ true | S y_v187 ⇒ (gten_i5 x_v185 y_v187)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v190 : nat) (y_v191 : nat) ⇒
    match x_v190 as __v192 in ??9 with
    | O ⇒
      match y_v191 as __v193 in ??11 with
      | O ⇒ false | S y_v194 ⇒ true
      end
    | S x_v195 ⇒
      match y_v191 as __v196 in ??10 with
      | O ⇒ false | S y_v197 ⇒ (ltn_i6 x_v195 y_v197)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v200 : nat) (y_v201 : nat) ⇒
    match x_v200 as __v202 in ??12 with
    | O ⇒ false
    | S x_v203 ⇒
      match y_v201 as __v204 in ??13 with
      | O ⇒ true | S y_v205 ⇒ (gtn_i7 x_v203 y_v205)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v208 : nat) (y_v209 : nat) ⇒
    match x_v208 as __v210 in ??14 with
    | O ⇒
      match y_v209 as __v211 in ??16 with
      | O ⇒ true | S __v212 ⇒ false
      end
    | S x_v213 ⇒
      match y_v209 as __v214 in ??15 with
      | O ⇒ false | S y_v215 ⇒ (eqn_i8 x_v213 y_v215)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v217 : nat) ⇒
    match x_v217 as __v218 in ??17 with
    | O ⇒ 0 | S x_v219 ⇒ x_v219
    end

program addn_i10 : nat → nat → nat =
  fn (x_v222 : nat) (y_v223 : nat) ⇒
    match x_v222 as __v224 in ??18 with
    | O ⇒ y_v223 | S x_v225 ⇒ (addn_i10 x_v225 y_v223).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v228 : nat) (y_v229 : nat) ⇒
    match y_v229 as __v230 in ??19 with
    | O ⇒ x_v228 | S y_v231 ⇒ (subn_i11 (pred_i9 x_v228) y_v231)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v234 : nat) (y_v235 : nat) ⇒
    match x_v234 as __v236 in ??20 with
    | O ⇒ 0 | S x_v237 ⇒ (addn_i10 y_v235 (muln_i12 x_v237 y_v235))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v240 : nat) (y_v241 : nat) ⇒
    match (ltn_i6 x_v240 y_v241) as __v242 in ??21 with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v240 y_v241) y_v241).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v245 : nat) (y_v246 : nat) ⇒
    (subn_i11 x_v245 (muln_i12 (divn_i13 x_v245 y_v246) y_v246))

inductive char_d1 : U =
| Char_c1 of (n_v247 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v248 : char_d1) (s_v249 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v252 : string_d2) (s2_v253 : string_d2) ⇒
    match s1_v252 as __v254 in ??22 with
    | EmptyString_c2  ⇒ s2_v253
    | String_c3 c_v255 s1_v256 ⇒
      (String_c3‹› c_v255 (cats_i15 s1_v256 s2_v253))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v258 : string_d2) ⇒
    match s_v258 as __v259 in ??23 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v260 s_v261 ⇒ (strlen_i16 s_v261).+1
    end

inductive list_d3 ‹s_s262, t_s263›
  (A_v264 : Type‹s_s262›) : Type‹t_s263›
=
| nil_c4 of
    ‹s_s265, t_s266› (A_v267 : Type‹s_s265›)
    : (list_d3‹s_s265, t_s266› A_v267)
| cons_c5 of
    ‹s_s268, t_s269› (A_v270 : Type‹s_s268›) (hd_v271 : A_v270)
    (tl_v272 : (list_d3‹s_s268, t_s269› A_v270))
    : (list_d3‹s_s268, t_s269› A_v270)

program len_i17 ‹s_s273, t_s274› :
  ∀ {A_v275 : Type‹s_s273›} →
    (list_d3‹??24, t_s274› A_v275) →
      nat ⊗ (list_d3‹??25, t_s274› A_v275)
=
  fn {A_v278 : Type‹s_s273›}
     (xs_v279 : (list_d3‹??24, t_s274› A_v278)) ⇒
    match xs_v279 as __v280 in ??26 with
    | nil_c4  ⇒ ⟨0, nil_c4‹??36, ??35›⟩
    | cons_c5 x_v281 xs_v282 ⇒
      match (len_i17‹??29, ??28› ??27 xs_v282) as __v283 in ??30 with
      | ⟨n_v284, xs_v285⟩ ⇒
        ⟨n_v284.+1, (cons_c5‹??33, ??32› x_v281 xs_v285)⟩
      end
    end

program append_i18 ‹s_s286, t_s287› :
  ∀ {A_v288 : Type‹s_s286›} →
    (list_d3‹??37, t_s287› A_v288) →
      (list_d3‹??38, t_s287› A_v288) ⊸ (list_d3‹??40, ??39› A_v288)
=
  fn {A_v291 : Type‹s_s286›}
     (xs_v292 : (list_d3‹??37, t_s287› A_v291)) ⇒
    ln (ys_v293 : ??41) ⇒
      match xs_v292 as __v294 in ??42 with
      | nil_c4  ⇒ ys_v293
      | cons_c5 x_v295 xs_v296 ⇒
        (cons_c5‹??48, ??47›
          x_v295 (append_i18‹??45, ??44› ??43 xs_v296 ys_v293))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v298 : unit) ⇒
    ⇑(b_v299 : bool) ⇒
      match b_v299 as __v300 in ??49 with
      | true ⇒ ⇓(__v301 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v303 : unit) ⇒
    ⇑(b_v304 : bool) ⇒
      match b_v304 as __v305 in ??50 with
      | true ⇒ ⇑(__v306 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v308 : unit) ⇒
    ⇑(b_v309 : bool) ⇒
      match b_v309 as __v310 in ??51 with
      | true ⇒ ⇑(__v311 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v313 : unit) ⇒
    let ch_v314 ⇐ open stdin in
    let ch_v315 ⇐ (send ch_v314 true) in
    let __v316 ⇐ recv ch_v315 in
    match __v316 as __v317 in ??52 with
    | ⟨s_v318, ch_v319⟩ ⇒
      let ch_v320 ⇐ (send ch_v319 false) in
      let __v321 ⇐ close ch_v320 in return s_v318
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v323 : string_d2) ⇒
    let ch_v324 ⇐ open stdout in
    let ch_v325 ⇐ (send ch_v324 true) in
    let ch_v326 ⇐ (send ch_v325 s_v323) in
    let ch_v327 ⇐ (send ch_v326 false) in close ch_v327

program prerr_i27 : string_d2 → IO unit =
  fn (s_v329 : string_d2) ⇒
    let ch_v330 ⇐ open stderr in
    let ch_v331 ⇐ (send ch_v330 true) in
    let ch_v332 ⇐ (send ch_v331 s_v329) in
    let ch_v333 ⇐ (send ch_v332 false) in close ch_v333

program digits_i28 : (list_d3‹??53, U› ??54) =
  (cons_c5‹??87, ??86›
    "0"
    (cons_c5‹??84, ??83›
      "1"
      (cons_c5‹??81, ??80›
        "2"
        (cons_c5‹??78, ??77›
          "3"
          (cons_c5‹??75, ??74›
            "4"
            (cons_c5‹??72, ??71›
              "5"
              (cons_c5‹??69, ??68›
                "6"
                (cons_c5‹??66, ??65›
                  "7"
                  (cons_c5‹??63, ??62›
                    "8" (cons_c5‹??60, ??59› "9" nil_c4‹??57, ??56›))))))))))

program get_at_i29 :
  ∀ {A_v334 : U} →
    nat → (list_d3‹??88, U› A_v334) → A_v334 → A_v334
=
  fn {A_v338 : U} (n_v339 : nat) (xs_v340 : (list_d3‹??88, U› A_v338))
     (a_v341 : A_v338) ⇒
    match n_v339 as __v342 in ??89 with
    | O ⇒
      match xs_v340 as __v343 in ??92 with
      | nil_c4  ⇒ a_v341 | cons_c5 x_v344 __v345 ⇒ x_v344
      end
    | S n_v346 ⇒
      match xs_v340 as __v347 in ??90 with
      | nil_c4  ⇒ a_v341
      | cons_c5 __v348 xs_v349 ⇒ (get_at_i29 ??91 n_v346 xs_v349 a_v341)
      end
    end

program string_of_digit_i30 : nat → string_d2 =
  fn (n_v351 : nat) ⇒
    (get_at_i29 ??93 n_v351 digits_i28 EmptyString_c2‹›)

program string_of_nat_i31 : nat → string_d2 =
  fn (n_v353 : nat) ⇒
    let s_v354 = (string_of_digit_i30 (modn_i14 n_v353 10)) in
    let n_v355 = (divn_i13 n_v353 10) in
    match (ltn_i6 0 n_v355) as __v356 in ??94 with
    | true ⇒ (cats_i15 (string_of_nat_i31 n_v355) s_v354)
    | false ⇒ s_v354
    end

program mccarthy_i32 : nat → nat =
  fn (n_v358 : nat) ⇒
    match (lten_i4 n_v358 100) as __v359 in ??95 with
    | true ⇒ (mccarthy_i32 (mccarthy_i32 (addn_i10 n_v358 11)))
    | false ⇒ (subn_i11 n_v358 10)
    end

program main_i33 : IO unit =
  let s_v360 = (string_of_nat_i31 (mccarthy_i32 23)) in
  (print_i26 (cats_i15 s_v360 "\n"))

trans01 success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v4221 : bool) (b2_v4222 : bool) ⇒
    match b1_v4221 as __v4223 in bool with
    | true ⇒ b2_v4222 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v4226 : bool) (b2_v4227 : bool) ⇒
    match b1_v4226 as __v4228 in bool with
    | true ⇒ true | false ⇒ b2_v4227
    end

program notb_i3 : bool → bool =
  fn (b_v4230 : bool) ⇒
    match b_v4230 as __v4231 in bool with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v4234 : nat) (y_v4235 : nat) ⇒
    match x_v4234 as __v4236 in bool with
    | O ⇒ true
    | S x_v4237 ⇒
      match y_v4235 as __v4238 in bool with
      | O ⇒ false | S y_v4239 ⇒ (lten_i4 x_v4237 y_v4239)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v4242 : nat) (y_v4243 : nat) ⇒
    match x_v4242 as __v4244 in bool with
    | O ⇒
      match y_v4243 as __v4245 in bool with
      | O ⇒ true | S __v4246 ⇒ false
      end
    | S x_v4247 ⇒
      match y_v4243 as __v4248 in bool with
      | O ⇒ true | S y_v4249 ⇒ (gten_i5 x_v4247 y_v4249)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v4252 : nat) (y_v4253 : nat) ⇒
    match x_v4252 as __v4254 in bool with
    | O ⇒
      match y_v4253 as __v4255 in bool with
      | O ⇒ false | S y_v4256 ⇒ true
      end
    | S x_v4257 ⇒
      match y_v4253 as __v4258 in bool with
      | O ⇒ false | S y_v4259 ⇒ (ltn_i6 x_v4257 y_v4259)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v4262 : nat) (y_v4263 : nat) ⇒
    match x_v4262 as __v4264 in bool with
    | O ⇒ false
    | S x_v4265 ⇒
      match y_v4263 as __v4266 in bool with
      | O ⇒ true | S y_v4267 ⇒ (gtn_i7 x_v4265 y_v4267)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v4270 : nat) (y_v4271 : nat) ⇒
    match x_v4270 as __v4272 in bool with
    | O ⇒
      match y_v4271 as __v4273 in bool with
      | O ⇒ true | S __v4274 ⇒ false
      end
    | S x_v4275 ⇒
      match y_v4271 as __v4276 in bool with
      | O ⇒ false | S y_v4277 ⇒ (eqn_i8 x_v4275 y_v4277)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v4279 : nat) ⇒
    match x_v4279 as __v4280 in nat with
    | O ⇒ 0 | S x_v4281 ⇒ x_v4281
    end

program addn_i10 : nat → nat → nat =
  fn (x_v4284 : nat) (y_v4285 : nat) ⇒
    match x_v4284 as __v4286 in nat with
    | O ⇒ y_v4285 | S x_v4287 ⇒ (addn_i10 x_v4287 y_v4285).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v4290 : nat) (y_v4291 : nat) ⇒
    match y_v4291 as __v4292 in nat with
    | O ⇒ x_v4290 | S y_v4293 ⇒ (subn_i11 (pred_i9 x_v4290) y_v4293)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v4296 : nat) (y_v4297 : nat) ⇒
    match x_v4296 as __v4298 in nat with
    | O ⇒ 0 | S x_v4299 ⇒ (addn_i10 y_v4297 (muln_i12 x_v4299 y_v4297))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v4302 : nat) (y_v4303 : nat) ⇒
    match (ltn_i6 x_v4302 y_v4303) as __v4304 in nat with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v4302 y_v4303) y_v4303).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v4307 : nat) (y_v4308 : nat) ⇒
    (subn_i11 x_v4307 (muln_i12 (divn_i13 x_v4307 y_v4308) y_v4308))

inductive char_d1 : U =
| Char_c1 of (n_v4309 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v4310 : char_d1) (s_v4311 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v4314 : string_d2) (s2_v4315 : string_d2) ⇒
    match s1_v4314 as __v4316 in string_d2 with
    | EmptyString_c2  ⇒ s2_v4315
    | String_c3 c_v4317 s1_v4318 ⇒
      (String_c3‹› c_v4317 (cats_i15 s1_v4318 s2_v4315))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v4320 : string_d2) ⇒
    match s_v4320 as __v4321 in nat with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v4322 s_v4323 ⇒ (strlen_i16 s_v4323).+1
    end

inductive list_d3 ‹s_s4324, t_s4325›
  (A_v4326 : Type‹s_s4324›) : Type‹t_s4325›
=
| nil_c4 of
    ‹s_s4327, t_s4328› (A_v4329 : Type‹s_s4327›)
    : (list_d3‹s_s4327, t_s4328› A_v4329)
| cons_c5 of
    ‹s_s4330, t_s4331› (A_v4332 : Type‹s_s4330›) (hd_v4333 : A_v4332)
    (tl_v4334 : (list_d3‹s_s4330, t_s4331› A_v4332))
    : (list_d3‹s_s4330, t_s4331› A_v4332)

program len_i17 ‹s_s4335, t_s4336› :
  ∀ {A_v4337 : Type‹s_s4335›} →
    (list_d3‹s_s4335, t_s4336› A_v4337) →
      nat ⊗ (list_d3‹s_s4335, t_s4336› A_v4337)
=
  fn {A_v4340 : Type‹s_s4335›}
     (xs_v4341 : (list_d3‹s_s4335, t_s4336› A_v4340)) ⇒
    match xs_v4341 as __v4342 in
      nat ⊗ (list_d3‹s_s4335, t_s4336› A_v4340) with
    | nil_c4  ⇒ ⟨0, nil_c4‹s_s4335, t_s4336›⟩
    | cons_c5 x_v4344 xs_v4345 ⇒
      match (len_i17‹s_s4335, t_s4336› A_v4340 xs_v4345) as __v4346 in
        nat ⊗ (list_d3‹s_s4335, t_s4336› A_v4340) with
      | ⟨n_v4348, xs_v4349⟩ ⇒
        ⟨n_v4348.+1, (cons_c5‹s_s4335, t_s4336› x_v4344 xs_v4349)⟩
      end
    end

program append_i18 ‹s_s4350, t_s4351› :
  ∀ {A_v4352 : Type‹s_s4350›} →
    (list_d3‹s_s4350, t_s4351› A_v4352) →
      (list_d3‹s_s4350, t_s4351› A_v4352) ⊸
        (list_d3‹s_s4350, t_s4351› A_v4352)
=
  fn {A_v4355 : Type‹s_s4350›}
     (xs_v4356 : (list_d3‹s_s4350, t_s4351› A_v4355)) ⇒
    ln (ys_v4357 : (list_d3‹s_s4350, t_s4351› A_v4355)) ⇒
      match xs_v4356 as __v4358 in
        (list_d3‹s_s4350, t_s4351› A_v4355) with
      | nil_c4  ⇒ ys_v4357
      | cons_c5 x_v4359 xs_v4360 ⇒
        (cons_c5‹s_s4350, t_s4351›
          x_v4359
          (append_i18‹s_s4350, t_s4351› A_v4355 xs_v4360 ys_v4357))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v4362 : unit) ⇒
    ⇑(b_v4363 : bool) ⇒
      match b_v4363 as __v4364 in proto with
      | true ⇒ ⇓(__v4365 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v4367 : unit) ⇒
    ⇑(b_v4368 : bool) ⇒
      match b_v4368 as __v4369 in proto with
      | true ⇒ ⇑(__v4370 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v4372 : unit) ⇒
    ⇑(b_v4373 : bool) ⇒
      match b_v4373 as __v4374 in proto with
      | true ⇒ ⇑(__v4375 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v4377 : unit) ⇒
    let ch_v4378 ⇐ open stdin in
    let ch_v4379 ⇐ (send ch_v4378 true) in
    let __v4380 ⇐ recv ch_v4379 in
    match __v4380 as __v4381 in IO string_d2 with
    | ⟨s_v4382, ch_v4383⟩ ⇒
      let ch_v4384 ⇐ (send ch_v4383 false) in
      let __v4385 ⇐ close ch_v4384 in return s_v4382
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v4387 : string_d2) ⇒
    let ch_v4388 ⇐ open stdout in
    let ch_v4389 ⇐ (send ch_v4388 true) in
    let ch_v4390 ⇐ (send ch_v4389 s_v4387) in
    let ch_v4391 ⇐ (send ch_v4390 false) in close ch_v4391

program prerr_i27 : string_d2 → IO unit =
  fn (s_v4393 : string_d2) ⇒
    let ch_v4394 ⇐ open stderr in
    let ch_v4395 ⇐ (send ch_v4394 true) in
    let ch_v4396 ⇐ (send ch_v4395 s_v4393) in
    let ch_v4397 ⇐ (send ch_v4396 false) in close ch_v4397

program digits_i28 : (list_d3‹U, U› string_d2) =
  (cons_c5‹U, U›
    "0"
    (cons_c5‹U, U›
      "1"
      (cons_c5‹U, U›
        "2"
        (cons_c5‹U, U›
          "3"
          (cons_c5‹U, U›
            "4"
            (cons_c5‹U, U›
              "5"
              (cons_c5‹U, U›
                "6"
                (cons_c5‹U, U›
                  "7"
                  (cons_c5‹U, U›
                    "8" (cons_c5‹U, U› "9" nil_c4‹U, U›))))))))))

program get_at_i29 :
  ∀ {A_v4398 : U} →
    nat → (list_d3‹U, U› A_v4398) → A_v4398 → A_v4398
=
  fn {A_v4402 : U} (n_v4403 : nat) (xs_v4404 : (list_d3‹U, U› A_v4402))
     (a_v4405 : A_v4402) ⇒
    match n_v4403 as __v4406 in A_v4402 with
    | O ⇒
      match xs_v4404 as __v4407 in A_v4402 with
      | nil_c4  ⇒ a_v4405 | cons_c5 x_v4408 __v4409 ⇒ x_v4408
      end
    | S n_v4410 ⇒
      match xs_v4404 as __v4411 in A_v4402 with
      | nil_c4  ⇒ a_v4405
      | cons_c5 __v4412 xs_v4413 ⇒
        (get_at_i29 A_v4402 n_v4410 xs_v4413 a_v4405)
      end
    end

program string_of_digit_i30 : nat → string_d2 =
  fn (n_v4415 : nat) ⇒
    (get_at_i29 string_d2 n_v4415 digits_i28 EmptyString_c2‹›)

program string_of_nat_i31 : nat → string_d2 =
  fn (n_v4417 : nat) ⇒
    let s_v4418 = (string_of_digit_i30 (modn_i14 n_v4417 10)) in
    let n_v4419 = (divn_i13 n_v4417 10) in
    match (ltn_i6 0 n_v4419) as __v4420 in string_d2 with
    | true ⇒ (cats_i15 (string_of_nat_i31 n_v4419) s_v4418)
    | false ⇒ s_v4418
    end

program mccarthy_i32 : nat → nat =
  fn (n_v4422 : nat) ⇒
    match (lten_i4 n_v4422 100) as __v4423 in nat with
    | true ⇒ (mccarthy_i32 (mccarthy_i32 (addn_i10 n_v4422 11)))
    | false ⇒ (subn_i11 n_v4422 10)
    end

program main_i33 : IO unit =
  let s_v4424 = (string_of_nat_i31 (mccarthy_i32 23)) in
  (print_i26 (cats_i15 s_v4424 "\n"))

trans1e success--------------------------

def andb_i1 =
  fn b1_v4694 b2_v4695 ⇒
    match b1_v4694 with
    | true ⇒ b2_v4695 | false ⇒ false
    end

def orb_i2 =
  fn b1_v4696 b2_v4697 ⇒
    match b1_v4696 with
    | true ⇒ true | false ⇒ b2_v4697
    end

def notb_i3 =
  fn b_v4698 ⇒ match b_v4698 with
                 | true ⇒ false | false ⇒ true
                 end

def lten_i4 =
  fn x_v4699 y_v4700 ⇒
    match x_v4699 with
    | O ⇒ true
    | S x_v4701 ⇒
      match y_v4700 with
      | O ⇒ false | S y_v4702 ⇒ ((lten_i4 x_v4701) y_v4702)
      end
    end

def gten_i5 =
  fn x_v4703 y_v4704 ⇒
    match x_v4703 with
    | O ⇒ match y_v4704 with
            | O ⇒ true | S __v4705 ⇒ false
            end
    | S x_v4706 ⇒
      match y_v4704 with
      | O ⇒ true | S y_v4707 ⇒ ((gten_i5 x_v4706) y_v4707)
      end
    end

def ltn_i6 =
  fn x_v4708 y_v4709 ⇒
    match x_v4708 with
    | O ⇒ match y_v4709 with
            | O ⇒ false | S y_v4710 ⇒ true
            end
    | S x_v4711 ⇒
      match y_v4709 with
      | O ⇒ false | S y_v4712 ⇒ ((ltn_i6 x_v4711) y_v4712)
      end
    end

def gtn_i7 =
  fn x_v4713 y_v4714 ⇒
    match x_v4713 with
    | O ⇒ false
    | S x_v4715 ⇒
      match y_v4714 with
      | O ⇒ true | S y_v4716 ⇒ ((gtn_i7 x_v4715) y_v4716)
      end
    end

def eqn_i8 =
  fn x_v4717 y_v4718 ⇒
    match x_v4717 with
    | O ⇒ match y_v4718 with
            | O ⇒ true | S __v4719 ⇒ false
            end
    | S x_v4720 ⇒
      match y_v4718 with
      | O ⇒ false | S y_v4721 ⇒ ((eqn_i8 x_v4720) y_v4721)
      end
    end

def pred_i9 =
  fn x_v4722 ⇒ match x_v4722 with
                 | O ⇒ 0 | S x_v4723 ⇒ x_v4723
                 end

def addn_i10 =
  fn x_v4724 y_v4725 ⇒
    match x_v4724 with
    | O ⇒ y_v4725 | S x_v4726 ⇒ ((addn_i10 x_v4726) y_v4725).+1
    end

def subn_i11 =
  fn x_v4727 y_v4728 ⇒
    match y_v4728 with
    | O ⇒ x_v4727 | S y_v4729 ⇒ ((subn_i11 (pred_i9 x_v4727)) y_v4729)
    end

def muln_i12 =
  fn x_v4730 y_v4731 ⇒
    match x_v4730 with
    | O ⇒ 0
    | S x_v4732 ⇒ ((addn_i10 y_v4731) ((muln_i12 x_v4732) y_v4731))
    end

def divn_i13 =
  fn x_v4733 y_v4734 ⇒
    match ((ltn_i6 x_v4733) y_v4734) with
    | true ⇒ 0
    | false ⇒ ((divn_i13 ((subn_i11 x_v4733) y_v4734)) y_v4734).+1
    end

def modn_i14 =
  fn x_v4735 y_v4736 ⇒
    ((subn_i11 x_v4735) ((muln_i12 ((divn_i13 x_v4735) y_v4736)) y_v4736))

data char_d1 =
| Char_c1 of size(1)

data string_d2 =
| EmptyString_c2 of size(0) | String_c3 of size(2)

def cats_i15 =
  fn s1_v4737 s2_v4738 ⇒
    match s1_v4737 with
    | EmptyString_c2  ⇒ s2_v4738
    | String_c3 c_v4739 s1_v4740 ⇒
      (String_c3 c_v4739 ((cats_i15 s1_v4740) s2_v4738))
    end

def strlen_i16 =
  fn s_v4741 ⇒
    match s_v4741 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v4742 s_v4743 ⇒ (strlen_i16 s_v4743).+1
    end

data listUU_d7 =
| nilUU_c12 of size(0) | consUU_c13 of size(2)

data listUL_d6 =
| nilUL_c10 of size(0) | consUL_c11 of size(2)

data listLU_d5 =
| nilLU_c8 of size(0)

data listLL_d4 =
| nilLL_c6 of size(0) | consLL_c7 of size(2)

def lenUU_i37 =
  fn A_v4744 xs_v4745 ⇒
    match xs_v4745 with
    | nilUU_c12  ⇒ (0, nilUU_c12)
    | consUU_c13 x_v4746 xs_v4747 ⇒
      match ((lenUU_i37 NULL) xs_v4747) with
      | (n_v4748, xs_v4749) ⇒ (n_v4748.+1, (consUU_c13 x_v4746 xs_v4749))
      end
    end

def lenUL_i36 =
  fn A_v4750 xs_v4751 ⇒
    match xs_v4751 with
    | nilUL_c10  ⇒ (0, nilUL_c10)
    | consUL_c11 x_v4752 xs_v4753 ⇒
      match ((lenUL_i36 NULL) xs_v4753) with
      | (n_v4754, xs_v4755) ⇒ (n_v4754.+1, (consUL_c11 x_v4752 xs_v4755))
      end
    end

def lenLL_i34 =
  fn A_v4756 xs_v4757 ⇒
    match xs_v4757 with
    | nilLL_c6  ⇒ (0, nilLL_c6)
    | consLL_c7 x_v4758 xs_v4759 ⇒
      match ((lenLL_i34 NULL) xs_v4759) with
      | (n_v4760, xs_v4761) ⇒ (n_v4760.+1, (consLL_c7 x_v4758 xs_v4761))
      end
    end

def appendUU_i41 =
  fn A_v4762 xs_v4763 ⇒
    ln ys_v4764 ⇒
      match xs_v4763 with
      | nilUU_c12  ⇒ ys_v4764
      | consUU_c13 x_v4765 xs_v4766 ⇒
        (consUU_c13 x_v4765 (((appendUU_i41 NULL) xs_v4766) ys_v4764))
      end

def appendUL_i40 =
  fn A_v4767 xs_v4768 ⇒
    ln ys_v4769 ⇒
      match xs_v4768 with
      | nilUL_c10  ⇒ ys_v4769
      | consUL_c11 x_v4770 xs_v4771 ⇒
        (consUL_c11 x_v4770 (((appendUL_i40 NULL) xs_v4771) ys_v4769))
      end

def appendLL_i38 =
  fn A_v4772 xs_v4773 ⇒
    ln ys_v4774 ⇒
      match xs_v4773 with
      | nilLL_c6  ⇒ ys_v4774
      | consLL_c7 x_v4775 xs_v4776 ⇒
        (consLL_c7 x_v4775 (((appendLL_i38 NULL) xs_v4776) ys_v4774))
      end

def readline_i25 =
  fn __v4777 ⇒
    let ch_v4778 ⇐ open stdin in
    let ch_v4779 ⇐ (send ch_v4778 true) in
    let __v4780 ⇐ recv ch_v4779 in
    match __v4780 with
    | (s_v4781, ch_v4782) ⇒
      let ch_v4783 ⇐ (send ch_v4782 false) in
      let __v4784 ⇐ close⇑ ch_v4783 in return s_v4781
    end

def print_i26 =
  fn s_v4785 ⇒
    let ch_v4786 ⇐ open stdout in
    let ch_v4787 ⇐ (send ch_v4786 true) in
    let ch_v4788 ⇐ (send ch_v4787 s_v4785) in
    let ch_v4789 ⇐ (send ch_v4788 false) in close⇑ ch_v4789

def prerr_i27 =
  fn s_v4790 ⇒
    let ch_v4791 ⇐ open stderr in
    let ch_v4792 ⇐ (send ch_v4791 true) in
    let ch_v4793 ⇐ (send ch_v4792 s_v4790) in
    let ch_v4794 ⇐ (send ch_v4793 false) in close⇑ ch_v4794

def digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

def get_at_i29 =
  fn A_v4795 n_v4796 xs_v4797 a_v4798 ⇒
    match n_v4796 with
    | O ⇒
      match xs_v4797 with
      | nilUU_c12  ⇒ a_v4798 | consUU_c13 x_v4799 __v4800 ⇒ x_v4799
      end
    | S n_v4801 ⇒
      match xs_v4797 with
      | nilUU_c12  ⇒ a_v4798
      | consUU_c13 __v4802 xs_v4803 ⇒
        ((((get_at_i29 NULL) n_v4801) xs_v4803) a_v4798)
      end
    end

def string_of_digit_i30 =
  fn n_v4804 ⇒ ((((get_at_i29 NULL) n_v4804) digits_i28) EmptyString_c2)

def string_of_nat_i31 =
  fn n_v4805 ⇒
    let s_v4806 = (string_of_digit_i30 ((modn_i14 n_v4805) 10)) in
    let n_v4807 = ((divn_i13 n_v4805) 10) in
    match ((ltn_i6 0) n_v4807) with
    | true ⇒ ((cats_i15 (string_of_nat_i31 n_v4807)) s_v4806)
    | false ⇒ s_v4806
    end

def mccarthy_i32 =
  fn n_v4808 ⇒
    match ((lten_i4 n_v4808) 100) with
    | true ⇒ (mccarthy_i32 (mccarthy_i32 ((addn_i10 n_v4808) 11)))
    | false ⇒ ((subn_i11 n_v4808) 10)
    end

main =
  let s_v4809 = (string_of_nat_i31 (mccarthy_i32 23)) in
  (print_i26 ((cats_i15 s_v4809) "\n"))

trans12 success--------------------------

fun andb_i1(b1_v4972, b2_v4973) = if b1_v4972 then
                                    b2_v4973
                                  else
                                    0

val andbclo_i42 = fn b1_v4974 b2_v4975 ⇒ andb_i1(b1_v4974, b2_v4975)

fun orb_i2(b1_v4976, b2_v4977) = if b1_v4976 then
                                   1
                                 else
                                   b2_v4977

val orbclo_i43 = fn b1_v4978 b2_v4979 ⇒ orb_i2(b1_v4978, b2_v4979)

fun notb_i3(b_v4980) = if b_v4980 then
                         0
                       else
                         1

val notbclo_i44 = fn b_v4981 ⇒ notb_i3(b_v4981)

fun lten_i4(x_v4982, y_v4983) =
  let __v4984 = x_v4982 in
  if __v4984 then
    let x_v4985 = __v4984.-1 in
    let __v4986 = y_v4983 in
    if __v4986 then
      let y_v4987 = __v4986.-1 in lten_i4(x_v4985, y_v4987)
    else
      0
  else
    1

val ltenclo_i45 = fn x_v4988 y_v4989 ⇒ lten_i4(x_v4988, y_v4989)

fun gten_i5(x_v4990, y_v4991) =
  let __v4992 = x_v4990 in
  if __v4992 then
    let x_v4993 = __v4992.-1 in
    let __v4994 = y_v4991 in
    if __v4994 then
      let y_v4995 = __v4994.-1 in gten_i5(x_v4993, y_v4995)
    else
      1
  else
    let __v4996 = y_v4991 in
    if __v4996 then
      let __v4997 = __v4996.-1 in 0
    else
      1

val gtenclo_i46 = fn x_v4998 y_v4999 ⇒ gten_i5(x_v4998, y_v4999)

fun ltn_i6(x_v5000, y_v5001) =
  let __v5002 = x_v5000 in
  if __v5002 then
    let x_v5003 = __v5002.-1 in
    let __v5004 = y_v5001 in
    if __v5004 then
      let y_v5005 = __v5004.-1 in ltn_i6(x_v5003, y_v5005)
    else
      0
  else
    let __v5006 = y_v5001 in
    if __v5006 then
      let y_v5007 = __v5006.-1 in 1
    else
      0

val ltnclo_i47 = fn x_v5008 y_v5009 ⇒ ltn_i6(x_v5008, y_v5009)

fun gtn_i7(x_v5010, y_v5011) =
  let __v5012 = x_v5010 in
  if __v5012 then
    let x_v5013 = __v5012.-1 in
    let __v5014 = y_v5011 in
    if __v5014 then
      let y_v5015 = __v5014.-1 in gtn_i7(x_v5013, y_v5015)
    else
      1
  else
    0

val gtnclo_i48 = fn x_v5016 y_v5017 ⇒ gtn_i7(x_v5016, y_v5017)

fun eqn_i8(x_v5018, y_v5019) =
  let __v5020 = x_v5018 in
  if __v5020 then
    let x_v5021 = __v5020.-1 in
    let __v5022 = y_v5019 in
    if __v5022 then
      let y_v5023 = __v5022.-1 in eqn_i8(x_v5021, y_v5023)
    else
      0
  else
    let __v5024 = y_v5019 in
    if __v5024 then
      let __v5025 = __v5024.-1 in 0
    else
      1

val eqnclo_i49 = fn x_v5026 y_v5027 ⇒ eqn_i8(x_v5026, y_v5027)

fun pred_i9(x_v5028) =
  let __v5029 = x_v5028 in
  if __v5029 then
    let x_v5030 = __v5029.-1 in x_v5030
  else
    0

val predclo_i50 = fn x_v5031 ⇒ pred_i9(x_v5031)

fun addn_i10(x_v5032, y_v5033) =
  let __v5034 = x_v5032 in
  if __v5034 then
    let x_v5035 = __v5034.-1 in addn_i10(x_v5035, y_v5033).+1
  else
    y_v5033

val addnclo_i51 = fn x_v5036 y_v5037 ⇒ addn_i10(x_v5036, y_v5037)

fun subn_i11(x_v5038, y_v5039) =
  let __v5040 = y_v5039 in
  if __v5040 then
    let y_v5041 = __v5040.-1 in subn_i11(pred_i9(x_v5038), y_v5041)
  else
    x_v5038

val subnclo_i52 = fn x_v5042 y_v5043 ⇒ subn_i11(x_v5042, y_v5043)

fun muln_i12(x_v5044, y_v5045) =
  let __v5046 = x_v5044 in
  if __v5046 then
    let x_v5047 = __v5046.-1 in addn_i10(y_v5045, muln_i12(x_v5047, y_v5045))
  else
    0

val mulnclo_i53 = fn x_v5048 y_v5049 ⇒ muln_i12(x_v5048, y_v5049)

fun divn_i13(x_v5050, y_v5051) =
  if ltn_i6(x_v5050, y_v5051) then
    0
  else
    divn_i13(subn_i11(x_v5050, y_v5051), y_v5051).+1

val divnclo_i54 = fn x_v5052 y_v5053 ⇒ divn_i13(x_v5052, y_v5053)

fun modn_i14(x_v5054, y_v5055) =
  subn_i11(x_v5054, muln_i12(divn_i13(x_v5054, y_v5055), y_v5055))

val modnclo_i55 = fn x_v5056 y_v5057 ⇒ modn_i14(x_v5056, y_v5057)

fun cats_i15(s1_v5058, s2_v5059) =
  match s1_v5058 with
  | EmptyString_c2  ⇒ s2_v5059
  | String_c3 c_v5060 s1_v5061 ⇒
    (String_c3 c_v5060 cats_i15(s1_v5061, s2_v5059))
  end

val catsclo_i56 = fn s1_v5062 s2_v5063 ⇒ cats_i15(s1_v5062, s2_v5063)

fun strlen_i16(s_v5064) =
  match s_v5064 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v5065 s_v5066 ⇒ strlen_i16(s_v5066).+1
  end

val strlenclo_i57 = fn s_v5067 ⇒ strlen_i16(s_v5067)

fun lenUU_i37(A_v5068, xs_v5069) =
  match xs_v5069 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v5070 xs_v5071 ⇒
    match lenUU_i37(NULL, xs_v5071) with
    | (n_v5072, xs_v5073) ⇒ (n_v5072.+1, (consUU_c13 x_v5070 xs_v5073))
    end
  end

val lenUUclo_i58 = fn A_v5074 xs_v5075 ⇒ lenUU_i37(A_v5074, xs_v5075)

fun lenUL_i36(A_v5076, xs_v5077) =
  match xs_v5077 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v5078 xs_v5079 ⇒
    match lenUL_i36(NULL, xs_v5079) with
    | (n_v5080, xs_v5081) ⇒ (n_v5080.+1, (consUL_c11 x_v5078 xs_v5081))
    end
  end

val lenULclo_i59 = fn A_v5082 xs_v5083 ⇒ lenUL_i36(A_v5082, xs_v5083)

fun lenLL_i34(A_v5084, xs_v5085) =
  match xs_v5085 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v5086 xs_v5087 ⇒
    match lenLL_i34(NULL, xs_v5087) with
    | (n_v5088, xs_v5089) ⇒ (n_v5088.+1, (consLL_c7 x_v5086 xs_v5089))
    end
  end

val lenLLclo_i60 = fn A_v5090 xs_v5091 ⇒ lenLL_i34(A_v5090, xs_v5091)

fun appendUU_i41(A_v5092, xs_v5093, ys_v5094) =
  match xs_v5093 with
  | nilUU_c12  ⇒ ys_v5094
  | consUU_c13 x_v5095 xs_v5096 ⇒
    (consUU_c13 x_v5095 appendUU_i41(NULL, xs_v5096, ys_v5094))
  end

val appendUUclo_i61 =
  fn A_v5097 xs_v5098 ⇒
    ln ys_v5099 ⇒ appendUU_i41(A_v5097, xs_v5098, ys_v5099)

fun appendUL_i40(A_v5100, xs_v5101, ys_v5102) =
  match xs_v5101 with
  | nilUL_c10  ⇒ ys_v5102
  | consUL_c11 x_v5103 xs_v5104 ⇒
    (consUL_c11 x_v5103 appendUL_i40(NULL, xs_v5104, ys_v5102))
  end

val appendULclo_i62 =
  fn A_v5105 xs_v5106 ⇒
    ln ys_v5107 ⇒ appendUL_i40(A_v5105, xs_v5106, ys_v5107)

fun appendLL_i38(A_v5108, xs_v5109, ys_v5110) =
  match xs_v5109 with
  | nilLL_c6  ⇒ ys_v5110
  | consLL_c7 x_v5111 xs_v5112 ⇒
    (consLL_c7 x_v5111 appendLL_i38(NULL, xs_v5112, ys_v5110))
  end

val appendLLclo_i63 =
  fn A_v5113 xs_v5114 ⇒
    ln ys_v5115 ⇒ appendLL_i38(A_v5113, xs_v5114, ys_v5115)

fun readline_i25(__v5116) =
  ln __v5117 ⇒
    let ch_v5118 = (ln __v5119 ⇒ open stdin) NULL in
    let ch_v5120 =
      ((fn x_v5121 ⇒ ln __v5122 ⇒ send(ch_v5118, x_v5121)) 1) NULL
    in
    let __v5123 = (ln __v5124 ⇒ recv(ch_v5120)) NULL in
    (match __v5123 with
     | (s_v5125, ch_v5126) ⇒
       ln __v5127 ⇒
         let ch_v5128 =
           ((fn x_v5129 ⇒ ln __v5130 ⇒ send(ch_v5126, x_v5129)) 0) NULL
         in
         let __v5131 = (ln __v5132 ⇒ let __v5133 = ch_v5128 in NULL) NULL
         in (ln __v5134 ⇒ s_v5125) NULL
     end) NULL

val readlineclo_i64 = fn __v5135 ⇒ readline_i25(__v5135)

fun print_i26(s_v5136) =
  ln __v5137 ⇒
    let ch_v5138 = (ln __v5139 ⇒ open stdout) NULL in
    let ch_v5140 =
      ((fn x_v5141 ⇒ ln __v5142 ⇒ send(ch_v5138, x_v5141)) 1) NULL
    in
    let ch_v5143 =
      ((fn x_v5144 ⇒ ln __v5145 ⇒ send(ch_v5140, x_v5144)) s_v5136) NULL
    in
    let ch_v5146 =
      ((fn x_v5147 ⇒ ln __v5148 ⇒ send(ch_v5143, x_v5147)) 0) NULL
    in (ln __v5149 ⇒ let __v5150 = ch_v5146 in NULL) NULL

val printclo_i65 = fn s_v5151 ⇒ print_i26(s_v5151)

fun prerr_i27(s_v5152) =
  ln __v5153 ⇒
    let ch_v5154 = (ln __v5155 ⇒ open stderr) NULL in
    let ch_v5156 =
      ((fn x_v5157 ⇒ ln __v5158 ⇒ send(ch_v5154, x_v5157)) 1) NULL
    in
    let ch_v5159 =
      ((fn x_v5160 ⇒ ln __v5161 ⇒ send(ch_v5156, x_v5160)) s_v5152) NULL
    in
    let ch_v5162 =
      ((fn x_v5163 ⇒ ln __v5164 ⇒ send(ch_v5159, x_v5163)) 0) NULL
    in (ln __v5165 ⇒ let __v5166 = ch_v5162 in NULL) NULL

val prerrclo_i66 = fn s_v5167 ⇒ prerr_i27(s_v5167)

val digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i29(A_v5168, n_v5169, xs_v5170, a_v5171) =
  let __v5172 = n_v5169 in
  if __v5172 then
    let n_v5173 = __v5172.-1 in
    match xs_v5170 with
    | nilUU_c12  ⇒ a_v5171
    | consUU_c13 __v5174 xs_v5175 ⇒
      get_at_i29(NULL, n_v5173, xs_v5175, a_v5171)
    end
  else
    match xs_v5170 with
    | nilUU_c12  ⇒ a_v5171 | consUU_c13 x_v5176 __v5177 ⇒ x_v5176
    end

val get_atclo_i67 =
  fn A_v5178 n_v5179 xs_v5180 a_v5181 ⇒
    get_at_i29(A_v5178, n_v5179, xs_v5180, a_v5181)

fun string_of_digit_i30(n_v5182) =
  get_at_i29(NULL, n_v5182, digits_i28, EmptyString_c2)

val string_of_digitclo_i68 = fn n_v5183 ⇒ string_of_digit_i30(n_v5183)

fun string_of_nat_i31(n_v5184) =
  let s_v5185 = string_of_digit_i30(modn_i14(n_v5184, 10)) in
  let n_v5186 = divn_i13(n_v5184, 10) in
  if ltn_i6(0, n_v5186) then
    cats_i15(string_of_nat_i31(n_v5186), s_v5185)
  else
    s_v5185

val string_of_natclo_i69 = fn n_v5187 ⇒ string_of_nat_i31(n_v5187)

fun mccarthy_i32(n_v5188) =
  if lten_i4(n_v5188, 100) then
    mccarthy_i32(mccarthy_i32(addn_i10(n_v5188, 11)))
  else
    subn_i11(n_v5188, 10)

val mccarthyclo_i70 = fn n_v5189 ⇒ mccarthy_i32(n_v5189)

main =
  (let s_v5190 = string_of_nat_i31(mccarthy_i32(23)) in
   print_i26(cats_i15(s_v5190, "\n"))) NULL

trans23 success--------------------------

fun andb_i1(b1_v5441, b2_v5442) = if b1_v5441 then
                                    b2_v5442
                                  else
                                    0

val andbclo_i42 = fn b1_v5443 b2_v5444 ⇒ andb_i1(b1_v5443, b2_v5444)

fun orb_i2(b1_v5445, b2_v5446) = if b1_v5445 then
                                   1
                                 else
                                   b2_v5446

val orbclo_i43 = fn b1_v5447 b2_v5448 ⇒ orb_i2(b1_v5447, b2_v5448)

fun notb_i3(b_v5449) = if b_v5449 then
                         0
                       else
                         1

val notbclo_i44 = fn b_v5450 ⇒ notb_i3(b_v5450)

fun lten_i4(x_v5451, y_v5452) =
  if x_v5451 then
    if y_v5452 then
      lten_i4(x_v5451.-1, y_v5452.-1)
    else
      0
  else
    1

val ltenclo_i45 = fn x_v5453 y_v5454 ⇒ lten_i4(x_v5453, y_v5454)

fun gten_i5(x_v5455, y_v5456) =
  if x_v5455 then
    if y_v5456 then
      gten_i5(x_v5455.-1, y_v5456.-1)
    else
      1
  else
    if y_v5456 then
      0
    else
      1

val gtenclo_i46 = fn x_v5457 y_v5458 ⇒ gten_i5(x_v5457, y_v5458)

fun ltn_i6(x_v5459, y_v5460) =
  if x_v5459 then
    if y_v5460 then
      ltn_i6(x_v5459.-1, y_v5460.-1)
    else
      0
  else
    if y_v5460 then
      1
    else
      0

val ltnclo_i47 = fn x_v5461 y_v5462 ⇒ ltn_i6(x_v5461, y_v5462)

fun gtn_i7(x_v5463, y_v5464) =
  if x_v5463 then
    if y_v5464 then
      gtn_i7(x_v5463.-1, y_v5464.-1)
    else
      1
  else
    0

val gtnclo_i48 = fn x_v5465 y_v5466 ⇒ gtn_i7(x_v5465, y_v5466)

fun eqn_i8(x_v5467, y_v5468) =
  if x_v5467 then
    if y_v5468 then
      eqn_i8(x_v5467.-1, y_v5468.-1)
    else
      0
  else
    if y_v5468 then
      0
    else
      1

val eqnclo_i49 = fn x_v5469 y_v5470 ⇒ eqn_i8(x_v5469, y_v5470)

fun pred_i9(x_v5471) = if x_v5471 then
                         x_v5471.-1
                       else
                         0

val predclo_i50 = fn x_v5472 ⇒ pred_i9(x_v5472)

fun addn_i10(x_v5473, y_v5474) =
  if x_v5473 then
    addn_i10(x_v5473.-1, y_v5474).+1
  else
    y_v5474

val addnclo_i51 = fn x_v5475 y_v5476 ⇒ addn_i10(x_v5475, y_v5476)

fun subn_i11(x_v5477, y_v5478) =
  if y_v5478 then
    subn_i11(pred_i9(x_v5477), y_v5478.-1)
  else
    x_v5477

val subnclo_i52 = fn x_v5479 y_v5480 ⇒ subn_i11(x_v5479, y_v5480)

fun muln_i12(x_v5481, y_v5482) =
  if x_v5481 then
    addn_i10(y_v5482, muln_i12(x_v5481.-1, y_v5482))
  else
    0

val mulnclo_i53 = fn x_v5483 y_v5484 ⇒ muln_i12(x_v5483, y_v5484)

fun divn_i13(x_v5485, y_v5486) =
  if ltn_i6(x_v5485, y_v5486) then
    0
  else
    divn_i13(subn_i11(x_v5485, y_v5486), y_v5486).+1

val divnclo_i54 = fn x_v5487 y_v5488 ⇒ divn_i13(x_v5487, y_v5488)

fun modn_i14(x_v5489, y_v5490) =
  subn_i11(x_v5489, muln_i12(divn_i13(x_v5489, y_v5490), y_v5490))

val modnclo_i55 = fn x_v5491 y_v5492 ⇒ modn_i14(x_v5491, y_v5492)

fun cats_i15(s1_v5493, s2_v5494) =
  match s1_v5493 with
  | EmptyString_c2  ⇒ s2_v5494
  | String_c3 c_v5495 s1_v5496 ⇒
    (String_c3 c_v5495 cats_i15(s1_v5496, s2_v5494))
  end

val catsclo_i56 = fn s1_v5497 s2_v5498 ⇒ cats_i15(s1_v5497, s2_v5498)

fun strlen_i16(s_v5499) =
  match s_v5499 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v5500 s_v5501 ⇒ strlen_i16(s_v5501).+1
  end

val strlenclo_i57 = fn s_v5502 ⇒ strlen_i16(s_v5502)

fun lenUU_i37(A_v5503, xs_v5504) =
  match xs_v5504 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v5505 xs_v5506 ⇒
    match lenUU_i37(NULL, xs_v5506) with
    | (n_v5507, xs_v5508) ⇒ (n_v5507.+1, (consUU_c13 x_v5505 xs_v5508))
    end
  end

val lenUUclo_i58 = fn A_v5509 xs_v5510 ⇒ lenUU_i37(A_v5509, xs_v5510)

fun lenUL_i36(A_v5511, xs_v5512) =
  match xs_v5512 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v5513 xs_v5514 ⇒
    match lenUL_i36(NULL, xs_v5514) with
    | (n_v5515, xs_v5516) ⇒ (n_v5515.+1, (consUL_c11 x_v5513 xs_v5516))
    end
  end

val lenULclo_i59 = fn A_v5517 xs_v5518 ⇒ lenUL_i36(A_v5517, xs_v5518)

fun lenLL_i34(A_v5519, xs_v5520) =
  match xs_v5520 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v5521 xs_v5522 ⇒
    match lenLL_i34(NULL, xs_v5522) with
    | (n_v5523, xs_v5524) ⇒ (n_v5523.+1, (consLL_c7 x_v5521 xs_v5524))
    end
  end

val lenLLclo_i60 = fn A_v5525 xs_v5526 ⇒ lenLL_i34(A_v5525, xs_v5526)

fun appendUU_i41(A_v5527, xs_v5528, ys_v5529) =
  match xs_v5528 with
  | nilUU_c12  ⇒ ys_v5529
  | consUU_c13 x_v5530 xs_v5531 ⇒
    (consUU_c13 x_v5530 appendUU_i41(NULL, xs_v5531, ys_v5529))
  end

val appendUUclo_i61 =
  fn A_v5532 xs_v5533 ⇒
    ln ys_v5534 ⇒ appendUU_i41(A_v5532, xs_v5533, ys_v5534)

fun appendUL_i40(A_v5535, xs_v5536, ys_v5537) =
  match xs_v5536 with
  | nilUL_c10  ⇒ ys_v5537
  | consUL_c11 x_v5538 xs_v5539 ⇒
    (consUL_c11 x_v5538 appendUL_i40(NULL, xs_v5539, ys_v5537))
  end

val appendULclo_i62 =
  fn A_v5540 xs_v5541 ⇒
    ln ys_v5542 ⇒ appendUL_i40(A_v5540, xs_v5541, ys_v5542)

fun appendLL_i38(A_v5543, xs_v5544, ys_v5545) =
  match xs_v5544 with
  | nilLL_c6  ⇒ ys_v5545
  | consLL_c7 x_v5546 xs_v5547 ⇒
    (consLL_c7 x_v5546 appendLL_i38(NULL, xs_v5547, ys_v5545))
  end

val appendLLclo_i63 =
  fn A_v5548 xs_v5549 ⇒
    ln ys_v5550 ⇒ appendLL_i38(A_v5548, xs_v5549, ys_v5550)

fun readline_i25(__v5551) =
  ln __v5552 ⇒
    let ch_v5553 = open stdin in
    let ch_v5554 = send(ch_v5553, 1) in
    let __v5555 = recv(ch_v5554) in
    match __v5555 with
    | (s_v5556, ch_v5557) ⇒ let ch_v5558 = send(ch_v5557, 0) in s_v5556
    end

val readlineclo_i64 = fn __v5559 ⇒ readline_i25(__v5559)

fun print_i26(s_v5560) =
  ln __v5561 ⇒
    let ch_v5562 = open stdout in
    let ch_v5563 = send(ch_v5562, 1) in
    let ch_v5564 = send(ch_v5563, s_v5560) in
    let ch_v5565 = send(ch_v5564, 0) in NULL

val printclo_i65 = fn s_v5566 ⇒ print_i26(s_v5566)

fun prerr_i27(s_v5567) =
  ln __v5568 ⇒
    let ch_v5569 = open stderr in
    let ch_v5570 = send(ch_v5569, 1) in
    let ch_v5571 = send(ch_v5570, s_v5567) in
    let ch_v5572 = send(ch_v5571, 0) in NULL

val prerrclo_i66 = fn s_v5573 ⇒ prerr_i27(s_v5573)

val digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i29(A_v5574, n_v5575, xs_v5576, a_v5577) =
  if n_v5575 then
    match xs_v5576 with
    | nilUU_c12  ⇒ a_v5577
    | consUU_c13 __v5578 xs_v5579 ⇒
      get_at_i29(NULL, n_v5575.-1, xs_v5579, a_v5577)
    end
  else
    match xs_v5576 with
    | nilUU_c12  ⇒ a_v5577 | consUU_c13 x_v5580 __v5581 ⇒ x_v5580
    end

val get_atclo_i67 =
  fn A_v5582 n_v5583 xs_v5584 a_v5585 ⇒
    get_at_i29(A_v5582, n_v5583, xs_v5584, a_v5585)

fun string_of_digit_i30(n_v5586) =
  get_at_i29(NULL, n_v5586, digits_i28, EmptyString_c2)

val string_of_digitclo_i68 = fn n_v5587 ⇒ string_of_digit_i30(n_v5587)

fun string_of_nat_i31(n_v5588) =
  let s_v5589 = string_of_digit_i30(modn_i14(n_v5588, 10)) in
  let n_v5590 = divn_i13(n_v5588, 10) in
  if ltn_i6(0, n_v5590) then
    cats_i15(string_of_nat_i31(n_v5590), s_v5589)
  else
    s_v5589

val string_of_natclo_i69 = fn n_v5591 ⇒ string_of_nat_i31(n_v5591)

fun mccarthy_i32(n_v5592) =
  if lten_i4(n_v5592, 100) then
    mccarthy_i32(mccarthy_i32(addn_i10(n_v5592, 11)))
  else
    subn_i11(n_v5592, 10)

val mccarthyclo_i70 = fn n_v5593 ⇒ mccarthy_i32(n_v5593)

main =
  let s_v5594 = string_of_nat_i31(mccarthy_i32(23)) in
  (print_i26(cats_i15(s_v5594, "\n"))) NULL

trans3e success--------------------------

trans34 success--------------------------

