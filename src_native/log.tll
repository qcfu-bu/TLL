program digits‹› : ((list‹_, U›) (_)) = ((cons)
(((String) (((Char) (O.+48))) (EmptyString)))
(((cons) (((String) (((Char) (O.+49))) (EmptyString)))
 (((cons) (((String) (((Char) (O.+50))) (EmptyString)))
  (((cons) (((String) (((Char) (O.+51))) (EmptyString)))
   (((cons) (((String) (((Char) (O.+52))) (EmptyString)))
    (((cons) (((String) (((Char) (O.+53))) (EmptyString)))
     (((cons) (((String) (((Char) (O.+54))) (EmptyString)))
      (((cons) (((String) (((Char) (O.+55))) (EmptyString)))
       (((cons) (((String) (((Char) (O.+56))) (EmptyString)))
        (((cons) (((String) (((Char) (O.+57))) (EmptyString))) (nil))))))))))))))))))))

program get_at‹› {A : U} (n : nat) (xs : ((list‹_, U›)
(A))) (a : A) : A = match n as _ in _ with O ⇒ match xs as _ in _ with nil  ⇒ a | cons x
_ ⇒ x | S n ⇒ match xs as _ in _ with nil  ⇒ a | cons _
xs ⇒ ((get_at) (_) (n) (xs)
(a))

program string_of_digit‹› (n : nat) : string = ((get_at) (_) (n) 
(digits)
(EmptyString))

program string_of_nat‹› (n : nat) : string = let s = ((string_of_digit)
(((modn) (n) (O.+10)))) in let n = ((divn) (n) (O.+10)) in match ((ltn)
(O.+0) (n)) as _ in _ with true ⇒ ((cats) (((string_of_nat) (n)))
(s)) | false ⇒ s

program pow‹› (n : nat) (m : nat) : nat = match m as _ in _ with O ⇒ O.+1 | S m ⇒ (
(muln) (n)
(((pow) (n) (m))))

logical DH‹› (p : nat) (g : nat) : proto = !{a : nat} → !(x : nat) → !{_ : x ≡ (
(modn) (((pow) (g) (a)))
(p))} → ?{b : nat} → ?(y : nat) → ?{_ : y ≡ ((modn) (((pow) (g) (b)))
(p))} → end

logical DH_ch‹› (p : nat) (g : nat) : L = ch‹((DH) (p)
(g))›

logical DH_hc‹› (p : nat) (g : nat) : L = hc‹((DH) (p)
(g))›

program alice‹› (a : nat) (p : nat) (g : nat) (ch : ((DH_ch) (p)
(g))) : IO unit = let ch ⇐ ((send ch) (a)) in let ch ⇐ ((send ch)
(((modn) (((pow) (g) (a))) (p)))) in let ch ⇐ ((send ch)
(refl)) in let ⟨{b}, ch⟩ ⇐ recv ch in let ⟨B, ch⟩ ⇐ recv ch in let ⟨{pf}, ch⟩ ⇐ recv ch in let s = (
(modn) (((pow) (B) (a))) (p)) in let _ ⇐ close ch in ((print)
(((cats) (((string_of_nat) (s)))
 (((String) (((Char) (O.+10))) (EmptyString))))))

program bob‹› (b : nat) (p : nat) (g : nat) (ch : ((DH_hc) (p)
(g))) : IO unit = let ⟨{a}, ch⟩ ⇐ recv ch in let ⟨A, ch⟩ ⇐ recv ch in let ⟨{pf}, ch⟩ ⇐ recv ch in let ch ⇐ (
(send ch) (b)) in let ch ⇐ ((send ch)
(((modn) (((pow) (g) (b))) (p)))) in let ch ⇐ ((send ch)
(refl)) in let s = ((modn) (((pow) (A) (b)))
(p)) in let _ ⇐ close ch in ((print)
(((cats) (((string_of_nat) (s)))
 (((String) (((Char) (O.+10))) (EmptyString))))))

program key_exchange‹› (_ : unit) : IO unit = let p = O.+23 in let g = O.+5 in let c ⇐ fork (c : (
(DH_ch) (p) (g))) in ((alice) (O.+4) (p) (g)
(c)) in let c0 ⇐ fork (c0 : ch‹?(_ : ((DH_hc) (p)
(g))) → end›) in let ⟨c, c0⟩ ⇐ recv c0 in let _ ⇐ close c0 in (
(bob) (O.+3) (p) (g) (c)) in let c0 ⇐ ((send c0)
(c)) in close c0

program main‹› : IO unit = let _ ⇐ ((key_exchange)
(())) in sleep O.+1

parsing success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v222 : bool) (b2_v223 : bool) ⇒
    match b1_v222 as __v224 in ??1 with
    | true ⇒ b2_v223 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v227 : bool) (b2_v228 : bool) ⇒
    match b1_v227 as __v229 in ??2 with
    | true ⇒ true | false ⇒ b2_v228
    end

program notb_i3 : bool → bool =
  fn (b_v231 : bool) ⇒
    match b_v231 as __v232 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v235 : nat) (y_v236 : nat) ⇒
    match x_v235 as __v237 in ??4 with
    | O ⇒ true
    | S x_v238 ⇒
      match y_v236 as __v239 in ??5 with
      | O ⇒ false | S y_v240 ⇒ (lten_i4 x_v238 y_v240)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v243 : nat) (y_v244 : nat) ⇒
    match x_v243 as __v245 in ??6 with
    | O ⇒
      match y_v244 as __v246 in ??8 with
      | O ⇒ true | S __v247 ⇒ false
      end
    | S x_v248 ⇒
      match y_v244 as __v249 in ??7 with
      | O ⇒ true | S y_v250 ⇒ (gten_i5 x_v248 y_v250)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v253 : nat) (y_v254 : nat) ⇒
    match x_v253 as __v255 in ??9 with
    | O ⇒
      match y_v254 as __v256 in ??11 with
      | O ⇒ false | S y_v257 ⇒ true
      end
    | S x_v258 ⇒
      match y_v254 as __v259 in ??10 with
      | O ⇒ false | S y_v260 ⇒ (ltn_i6 x_v258 y_v260)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v263 : nat) (y_v264 : nat) ⇒
    match x_v263 as __v265 in ??12 with
    | O ⇒ false
    | S x_v266 ⇒
      match y_v264 as __v267 in ??13 with
      | O ⇒ true | S y_v268 ⇒ (gtn_i7 x_v266 y_v268)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v271 : nat) (y_v272 : nat) ⇒
    match x_v271 as __v273 in ??14 with
    | O ⇒
      match y_v272 as __v274 in ??16 with
      | O ⇒ true | S __v275 ⇒ false
      end
    | S x_v276 ⇒
      match y_v272 as __v277 in ??15 with
      | O ⇒ false | S y_v278 ⇒ (eqn_i8 x_v276 y_v278)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v280 : nat) ⇒
    match x_v280 as __v281 in ??17 with
    | O ⇒ 0 | S x_v282 ⇒ x_v282
    end

program addn_i10 : nat → nat → nat =
  fn (x_v285 : nat) (y_v286 : nat) ⇒
    match x_v285 as __v287 in ??18 with
    | O ⇒ y_v286 | S x_v288 ⇒ (addn_i10 x_v288 y_v286).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v291 : nat) (y_v292 : nat) ⇒
    match y_v292 as __v293 in ??19 with
    | O ⇒ x_v291 | S y_v294 ⇒ (subn_i11 (pred_i9 x_v291) y_v294)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v297 : nat) (y_v298 : nat) ⇒
    match x_v297 as __v299 in ??20 with
    | O ⇒ 0 | S x_v300 ⇒ (addn_i10 y_v298 (muln_i12 x_v300 y_v298))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v303 : nat) (y_v304 : nat) ⇒
    match (ltn_i6 x_v303 y_v304) as __v305 in ??21 with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v303 y_v304) y_v304).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v308 : nat) (y_v309 : nat) ⇒
    (subn_i11 x_v308 (muln_i12 (divn_i13 x_v308 y_v309) y_v309))

inductive char_d1 : U =
| Char_c1 of (n_v310 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v311 : char_d1) (s_v312 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v315 : string_d2) (s2_v316 : string_d2) ⇒
    match s1_v315 as __v317 in ??22 with
    | EmptyString_c2  ⇒ s2_v316
    | String_c3 c_v318 s1_v319 ⇒
      (String_c3‹› c_v318 (cats_i15 s1_v319 s2_v316))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v321 : string_d2) ⇒
    match s_v321 as __v322 in ??23 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v323 s_v324 ⇒ (strlen_i16 s_v324).+1
    end

inductive list_d3 ‹s_s325, t_s326›
  (A_v327 : Type‹s_s325›) : Type‹t_s326›
=
| nil_c4 of
    ‹s_s328, t_s329› (A_v330 : Type‹s_s328›)
    : (list_d3‹s_s328, t_s329› A_v330)
| cons_c5 of
    ‹s_s331, t_s332› (A_v333 : Type‹s_s331›) (hd_v334 : A_v333)
    (tl_v335 : (list_d3‹s_s331, t_s332› A_v333))
    : (list_d3‹s_s331, t_s332› A_v333)

program len_i17 ‹s_s336, t_s337› :
  ∀ {A_v338 : Type‹s_s336›} →
    (list_d3‹??24, t_s337› A_v338) →
      nat ⊗ (list_d3‹??25, t_s337› A_v338)
=
  fn {A_v341 : Type‹s_s336›}
     (xs_v342 : (list_d3‹??24, t_s337› A_v341)) ⇒
    match xs_v342 as __v343 in ??26 with
    | nil_c4  ⇒ ⟨0, nil_c4‹??36, ??35›⟩
    | cons_c5 x_v344 xs_v345 ⇒
      match (len_i17‹??29, ??28› ??27 xs_v345) as __v346 in ??30 with
      | ⟨n_v347, xs_v348⟩ ⇒
        ⟨n_v347.+1, (cons_c5‹??33, ??32› x_v344 xs_v348)⟩
      end
    end

program append_i18 ‹s_s349, t_s350› :
  ∀ {A_v351 : Type‹s_s349›} →
    (list_d3‹??37, t_s350› A_v351) →
      (list_d3‹??38, t_s350› A_v351) ⊸ (list_d3‹??40, ??39› A_v351)
=
  fn {A_v354 : Type‹s_s349›}
     (xs_v355 : (list_d3‹??37, t_s350› A_v354)) ⇒
    ln (ys_v356 : ??41) ⇒
      match xs_v355 as __v357 in ??42 with
      | nil_c4  ⇒ ys_v356
      | cons_c5 x_v358 xs_v359 ⇒
        (cons_c5‹??48, ??47›
          x_v358 (append_i18‹??45, ??44› ??43 xs_v359 ys_v356))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v361 : unit) ⇒
    ⇑(b_v362 : bool) ⇒
      match b_v362 as __v363 in ??49 with
      | true ⇒ ⇓(__v364 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v366 : unit) ⇒
    ⇑(b_v367 : bool) ⇒
      match b_v367 as __v368 in ??50 with
      | true ⇒ ⇑(__v369 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v371 : unit) ⇒
    ⇑(b_v372 : bool) ⇒
      match b_v372 as __v373 in ??51 with
      | true ⇒ ⇑(__v374 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v376 : unit) ⇒
    let ch_v377 ⇐ open stdin in
    let ch_v378 ⇐ (send ch_v377 true) in
    let __v379 ⇐ recv ch_v378 in
    match __v379 as __v380 in ??52 with
    | ⟨s_v381, ch_v382⟩ ⇒
      let ch_v383 ⇐ (send ch_v382 false) in
      let __v384 ⇐ close ch_v383 in return s_v381
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v386 : string_d2) ⇒
    let ch_v387 ⇐ open stdout in
    let ch_v388 ⇐ (send ch_v387 true) in
    let ch_v389 ⇐ (send ch_v388 s_v386) in
    let ch_v390 ⇐ (send ch_v389 false) in close ch_v390

program prerr_i27 : string_d2 → IO unit =
  fn (s_v392 : string_d2) ⇒
    let ch_v393 ⇐ open stderr in
    let ch_v394 ⇐ (send ch_v393 true) in
    let ch_v395 ⇐ (send ch_v394 s_v392) in
    let ch_v396 ⇐ (send ch_v395 false) in close ch_v396

program digits_i28 : (list_d3‹??53, U› ??54) =
  (cons_c5‹??87, ??86›
    "0"
    (cons_c5‹??84, ??83›
      "1"
      (cons_c5‹??81, ??80›
        "2"
        (cons_c5‹??78, ??77›
          "3"
          (cons_c5‹??75, ??74›
            "4"
            (cons_c5‹??72, ??71›
              "5"
              (cons_c5‹??69, ??68›
                "6"
                (cons_c5‹??66, ??65›
                  "7"
                  (cons_c5‹??63, ??62›
                    "8" (cons_c5‹??60, ??59› "9" nil_c4‹??57, ??56›))))))))))

program get_at_i29 :
  ∀ {A_v397 : U} →
    nat → (list_d3‹??88, U› A_v397) → A_v397 → A_v397
=
  fn {A_v401 : U} (n_v402 : nat) (xs_v403 : (list_d3‹??88, U› A_v401))
     (a_v404 : A_v401) ⇒
    match n_v402 as __v405 in ??89 with
    | O ⇒
      match xs_v403 as __v406 in ??92 with
      | nil_c4  ⇒ a_v404 | cons_c5 x_v407 __v408 ⇒ x_v407
      end
    | S n_v409 ⇒
      match xs_v403 as __v410 in ??90 with
      | nil_c4  ⇒ a_v404
      | cons_c5 __v411 xs_v412 ⇒ (get_at_i29 ??91 n_v409 xs_v412 a_v404)
      end
    end

program string_of_digit_i30 : nat → string_d2 =
  fn (n_v414 : nat) ⇒
    (get_at_i29 ??93 n_v414 digits_i28 EmptyString_c2‹›)

program string_of_nat_i31 : nat → string_d2 =
  fn (n_v416 : nat) ⇒
    let s_v417 = (string_of_digit_i30 (modn_i14 n_v416 10)) in
    let n_v418 = (divn_i13 n_v416 10) in
    match (ltn_i6 0 n_v418) as __v419 in ??94 with
    | true ⇒ (cats_i15 (string_of_nat_i31 n_v418) s_v417)
    | false ⇒ s_v417
    end

program pow_i32 : nat → nat → nat =
  fn (n_v422 : nat) (m_v423 : nat) ⇒
    match m_v423 as __v424 in ??95 with
    | O ⇒ 1 | S m_v425 ⇒ (muln_i12 n_v422 (pow_i32 n_v422 m_v425))
    end

logical DH_i33 : nat → nat → proto =
  fn (p_v428 : nat) (g_v429 : nat) ⇒
    ⇑{a_v430 : nat} ⇒
      ⇑(x_v431 : nat) ⇒
        ⇑{__v432 :
          x_v431 ≡ (modn_i14 (pow_i32 g_v429 a_v430) p_v428)} ⇒
          ⇓{b_v433 : nat} ⇒
            ⇓(y_v434 : nat) ⇒
              ⇓{__v435 :
                y_v434 ≡ (modn_i14 (pow_i32 g_v429 b_v433) p_v428)} ⇒ end

logical DH_ch_i34 : nat → nat → L =
  fn (p_v438 : nat) (g_v439 : nat) ⇒ ch⟨(DH_i33 p_v438 g_v439)⟩

logical DH_hc_i35 : nat → nat → L =
  fn (p_v442 : nat) (g_v443 : nat) ⇒ hc⟨(DH_i33 p_v442 g_v443)⟩

program alice_i36 :
  nat →
    ∀ (p_v445 : nat) →
      ∀ (g_v446 : nat) → (DH_ch_i34 p_v445 g_v446) → IO unit
=
  fn (a_v448 : nat) (p_v449 : nat) (g_v450 : nat)
     (ch_v451 : (DH_ch_i34 p_v449 g_v450)) ⇒
    let ch_v452 ⇐ (send ch_v451 a_v448) in
    let ch_v453 ⇐ (send ch_v452 (modn_i14 (pow_i32 g_v450 a_v448) p_v449))
    in
    let ch_v454 ⇐ (send ch_v453 refl ??98) in
    let __v455 ⇐ recv ch_v454 in
    match __v455 as __v456 in ??101 with
    | ⟨{b_v457}, ch_v458⟩ ⇒
      let __v459 ⇐ recv ch_v458 in
      match __v459 as __v460 in ??100 with
      | ⟨B_v461, ch_v462⟩ ⇒
        let __v463 ⇐ recv ch_v462 in
        match __v463 as __v464 in ??99 with
        | ⟨{pf_v465}, ch_v466⟩ ⇒
          let s_v467 = (modn_i14 (pow_i32 B_v461 a_v448) p_v449) in
          let __v468 ⇐ close ch_v466 in
          (print_i26 (cats_i15 (string_of_nat_i31 s_v467) "\n"))
        end
      end
    end

program bob_i37 :
  nat →
    ∀ (p_v470 : nat) →
      ∀ (g_v471 : nat) → (DH_hc_i35 p_v470 g_v471) → IO unit
=
  fn (b_v473 : nat) (p_v474 : nat) (g_v475 : nat)
     (ch_v476 : (DH_hc_i35 p_v474 g_v475)) ⇒
    let __v477 ⇐ recv ch_v476 in
    match __v477 as __v478 in ??105 with
    | ⟨{a_v479}, ch_v480⟩ ⇒
      let __v481 ⇐ recv ch_v480 in
      match __v481 as __v482 in ??104 with
      | ⟨A_v483, ch_v484⟩ ⇒
        let __v485 ⇐ recv ch_v484 in
        match __v485 as __v486 in ??103 with
        | ⟨{pf_v487}, ch_v488⟩ ⇒
          let ch_v489 ⇐ (send ch_v488 b_v473) in
          let ch_v490 ⇐
            (send ch_v489 (modn_i14 (pow_i32 g_v475 b_v473) p_v474))
          in
          let ch_v491 ⇐ (send ch_v490 refl ??102) in
          let s_v492 = (modn_i14 (pow_i32 A_v483 b_v473) p_v474) in
          let __v493 ⇐ close ch_v491 in
          (print_i26 (cats_i15 (string_of_nat_i31 s_v492) "\n"))
        end
      end
    end

program key_exchange_i38 : unit → IO unit =
  fn (__v495 : unit) ⇒
    let p_v496 = 23 in
    let g_v497 = 5 in
    let c_v498 ⇐
      fork (c_v499 : (DH_ch_i34 p_v496 g_v497)) in
        (alice_i36 4 p_v496 g_v497 c_v499)
    in
    let c0_v500 ⇐
      fork (c0_v501 :
        ch⟨⇓(__v502 : (DH_hc_i35 p_v496 g_v497)) ⇒ end⟩)
      in
        let __v503 ⇐ recv c0_v501 in
        match __v503 as __v504 in ??106 with
        | ⟨c_v505, c0_v506⟩ ⇒
          let __v507 ⇐ close c0_v506 in (bob_i37 3 p_v496 g_v497 c_v505)
        end
    in let c0_v508 ⇐ (send c0_v500 c_v498) in close c0_v508

program main_i39 : IO unit = let __v509 ⇐ (key_exchange_i38 ()) in sleep 1

trans01 success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v8319 : bool) (b2_v8320 : bool) ⇒
    match b1_v8319 as __v8321 in bool with
    | true ⇒ b2_v8320 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v8324 : bool) (b2_v8325 : bool) ⇒
    match b1_v8324 as __v8326 in bool with
    | true ⇒ true | false ⇒ b2_v8325
    end

program notb_i3 : bool → bool =
  fn (b_v8328 : bool) ⇒
    match b_v8328 as __v8329 in bool with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v8332 : nat) (y_v8333 : nat) ⇒
    match x_v8332 as __v8334 in bool with
    | O ⇒ true
    | S x_v8335 ⇒
      match y_v8333 as __v8336 in bool with
      | O ⇒ false | S y_v8337 ⇒ (lten_i4 x_v8335 y_v8337)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v8340 : nat) (y_v8341 : nat) ⇒
    match x_v8340 as __v8342 in bool with
    | O ⇒
      match y_v8341 as __v8343 in bool with
      | O ⇒ true | S __v8344 ⇒ false
      end
    | S x_v8345 ⇒
      match y_v8341 as __v8346 in bool with
      | O ⇒ true | S y_v8347 ⇒ (gten_i5 x_v8345 y_v8347)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v8350 : nat) (y_v8351 : nat) ⇒
    match x_v8350 as __v8352 in bool with
    | O ⇒
      match y_v8351 as __v8353 in bool with
      | O ⇒ false | S y_v8354 ⇒ true
      end
    | S x_v8355 ⇒
      match y_v8351 as __v8356 in bool with
      | O ⇒ false | S y_v8357 ⇒ (ltn_i6 x_v8355 y_v8357)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v8360 : nat) (y_v8361 : nat) ⇒
    match x_v8360 as __v8362 in bool with
    | O ⇒ false
    | S x_v8363 ⇒
      match y_v8361 as __v8364 in bool with
      | O ⇒ true | S y_v8365 ⇒ (gtn_i7 x_v8363 y_v8365)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v8368 : nat) (y_v8369 : nat) ⇒
    match x_v8368 as __v8370 in bool with
    | O ⇒
      match y_v8369 as __v8371 in bool with
      | O ⇒ true | S __v8372 ⇒ false
      end
    | S x_v8373 ⇒
      match y_v8369 as __v8374 in bool with
      | O ⇒ false | S y_v8375 ⇒ (eqn_i8 x_v8373 y_v8375)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v8377 : nat) ⇒
    match x_v8377 as __v8378 in nat with
    | O ⇒ 0 | S x_v8379 ⇒ x_v8379
    end

program addn_i10 : nat → nat → nat =
  fn (x_v8382 : nat) (y_v8383 : nat) ⇒
    match x_v8382 as __v8384 in nat with
    | O ⇒ y_v8383 | S x_v8385 ⇒ (addn_i10 x_v8385 y_v8383).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v8388 : nat) (y_v8389 : nat) ⇒
    match y_v8389 as __v8390 in nat with
    | O ⇒ x_v8388 | S y_v8391 ⇒ (subn_i11 (pred_i9 x_v8388) y_v8391)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v8394 : nat) (y_v8395 : nat) ⇒
    match x_v8394 as __v8396 in nat with
    | O ⇒ 0 | S x_v8397 ⇒ (addn_i10 y_v8395 (muln_i12 x_v8397 y_v8395))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v8400 : nat) (y_v8401 : nat) ⇒
    match (ltn_i6 x_v8400 y_v8401) as __v8402 in nat with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v8400 y_v8401) y_v8401).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v8405 : nat) (y_v8406 : nat) ⇒
    (subn_i11 x_v8405 (muln_i12 (divn_i13 x_v8405 y_v8406) y_v8406))

inductive char_d1 : U =
| Char_c1 of (n_v8407 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v8408 : char_d1) (s_v8409 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v8412 : string_d2) (s2_v8413 : string_d2) ⇒
    match s1_v8412 as __v8414 in string_d2 with
    | EmptyString_c2  ⇒ s2_v8413
    | String_c3 c_v8415 s1_v8416 ⇒
      (String_c3‹› c_v8415 (cats_i15 s1_v8416 s2_v8413))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v8418 : string_d2) ⇒
    match s_v8418 as __v8419 in nat with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v8420 s_v8421 ⇒ (strlen_i16 s_v8421).+1
    end

inductive list_d3 ‹s_s8422, t_s8423›
  (A_v8424 : Type‹s_s8422›) : Type‹t_s8423›
=
| nil_c4 of
    ‹s_s8425, t_s8426› (A_v8427 : Type‹s_s8425›)
    : (list_d3‹s_s8425, t_s8426› A_v8427)
| cons_c5 of
    ‹s_s8428, t_s8429› (A_v8430 : Type‹s_s8428›) (hd_v8431 : A_v8430)
    (tl_v8432 : (list_d3‹s_s8428, t_s8429› A_v8430))
    : (list_d3‹s_s8428, t_s8429› A_v8430)

program len_i17 ‹s_s8433, t_s8434› :
  ∀ {A_v8435 : Type‹s_s8433›} →
    (list_d3‹s_s8433, t_s8434› A_v8435) →
      nat ⊗ (list_d3‹s_s8433, t_s8434› A_v8435)
=
  fn {A_v8438 : Type‹s_s8433›}
     (xs_v8439 : (list_d3‹s_s8433, t_s8434› A_v8438)) ⇒
    match xs_v8439 as __v8440 in
      nat ⊗ (list_d3‹s_s8433, t_s8434› A_v8438) with
    | nil_c4  ⇒ ⟨0, nil_c4‹s_s8433, t_s8434›⟩
    | cons_c5 x_v8442 xs_v8443 ⇒
      match (len_i17‹s_s8433, t_s8434› A_v8438 xs_v8443) as __v8444 in
        nat ⊗ (list_d3‹s_s8433, t_s8434› A_v8438) with
      | ⟨n_v8446, xs_v8447⟩ ⇒
        ⟨n_v8446.+1, (cons_c5‹s_s8433, t_s8434› x_v8442 xs_v8447)⟩
      end
    end

program append_i18 ‹s_s8448, t_s8449› :
  ∀ {A_v8450 : Type‹s_s8448›} →
    (list_d3‹s_s8448, t_s8449› A_v8450) →
      (list_d3‹s_s8448, t_s8449› A_v8450) ⊸
        (list_d3‹s_s8448, t_s8449› A_v8450)
=
  fn {A_v8453 : Type‹s_s8448›}
     (xs_v8454 : (list_d3‹s_s8448, t_s8449› A_v8453)) ⇒
    ln (ys_v8455 : (list_d3‹s_s8448, t_s8449› A_v8453)) ⇒
      match xs_v8454 as __v8456 in
        (list_d3‹s_s8448, t_s8449› A_v8453) with
      | nil_c4  ⇒ ys_v8455
      | cons_c5 x_v8457 xs_v8458 ⇒
        (cons_c5‹s_s8448, t_s8449›
          x_v8457
          (append_i18‹s_s8448, t_s8449› A_v8453 xs_v8458 ys_v8455))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v8460 : unit) ⇒
    ⇑(b_v8461 : bool) ⇒
      match b_v8461 as __v8462 in proto with
      | true ⇒ ⇓(__v8463 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v8465 : unit) ⇒
    ⇑(b_v8466 : bool) ⇒
      match b_v8466 as __v8467 in proto with
      | true ⇒ ⇑(__v8468 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v8470 : unit) ⇒
    ⇑(b_v8471 : bool) ⇒
      match b_v8471 as __v8472 in proto with
      | true ⇒ ⇑(__v8473 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v8475 : unit) ⇒
    let ch_v8476 ⇐ open stdin in
    let ch_v8477 ⇐ (send ch_v8476 true) in
    let __v8478 ⇐ recv ch_v8477 in
    match __v8478 as __v8479 in IO string_d2 with
    | ⟨s_v8480, ch_v8481⟩ ⇒
      let ch_v8482 ⇐ (send ch_v8481 false) in
      let __v8483 ⇐ close ch_v8482 in return s_v8480
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v8485 : string_d2) ⇒
    let ch_v8486 ⇐ open stdout in
    let ch_v8487 ⇐ (send ch_v8486 true) in
    let ch_v8488 ⇐ (send ch_v8487 s_v8485) in
    let ch_v8489 ⇐ (send ch_v8488 false) in close ch_v8489

program prerr_i27 : string_d2 → IO unit =
  fn (s_v8491 : string_d2) ⇒
    let ch_v8492 ⇐ open stderr in
    let ch_v8493 ⇐ (send ch_v8492 true) in
    let ch_v8494 ⇐ (send ch_v8493 s_v8491) in
    let ch_v8495 ⇐ (send ch_v8494 false) in close ch_v8495

program digits_i28 : (list_d3‹U, U› string_d2) =
  (cons_c5‹U, U›
    "0"
    (cons_c5‹U, U›
      "1"
      (cons_c5‹U, U›
        "2"
        (cons_c5‹U, U›
          "3"
          (cons_c5‹U, U›
            "4"
            (cons_c5‹U, U›
              "5"
              (cons_c5‹U, U›
                "6"
                (cons_c5‹U, U›
                  "7"
                  (cons_c5‹U, U›
                    "8" (cons_c5‹U, U› "9" nil_c4‹U, U›))))))))))

program get_at_i29 :
  ∀ {A_v8496 : U} →
    nat → (list_d3‹U, U› A_v8496) → A_v8496 → A_v8496
=
  fn {A_v8500 : U} (n_v8501 : nat) (xs_v8502 : (list_d3‹U, U› A_v8500))
     (a_v8503 : A_v8500) ⇒
    match n_v8501 as __v8504 in A_v8500 with
    | O ⇒
      match xs_v8502 as __v8505 in A_v8500 with
      | nil_c4  ⇒ a_v8503 | cons_c5 x_v8506 __v8507 ⇒ x_v8506
      end
    | S n_v8508 ⇒
      match xs_v8502 as __v8509 in A_v8500 with
      | nil_c4  ⇒ a_v8503
      | cons_c5 __v8510 xs_v8511 ⇒
        (get_at_i29 A_v8500 n_v8508 xs_v8511 a_v8503)
      end
    end

program string_of_digit_i30 : nat → string_d2 =
  fn (n_v8513 : nat) ⇒
    (get_at_i29 string_d2 n_v8513 digits_i28 EmptyString_c2‹›)

program string_of_nat_i31 : nat → string_d2 =
  fn (n_v8515 : nat) ⇒
    let s_v8516 = (string_of_digit_i30 (modn_i14 n_v8515 10)) in
    let n_v8517 = (divn_i13 n_v8515 10) in
    match (ltn_i6 0 n_v8517) as __v8518 in string_d2 with
    | true ⇒ (cats_i15 (string_of_nat_i31 n_v8517) s_v8516)
    | false ⇒ s_v8516
    end

program pow_i32 : nat → nat → nat =
  fn (n_v8521 : nat) (m_v8522 : nat) ⇒
    match m_v8522 as __v8523 in nat with
    | O ⇒ 1 | S m_v8524 ⇒ (muln_i12 n_v8521 (pow_i32 n_v8521 m_v8524))
    end

logical DH_i33 : nat → nat → proto =
  fn (p_v8527 : nat) (g_v8528 : nat) ⇒
    ⇑{a_v8529 : nat} ⇒
      ⇑(x_v8530 : nat) ⇒
        ⇑{__v8531 :
          x_v8530 ≡ (modn_i14 (pow_i32 g_v8528 a_v8529) p_v8527)} ⇒
          ⇓{b_v8532 : nat} ⇒
            ⇓(y_v8533 : nat) ⇒
              ⇓{__v8534 :
                y_v8533 ≡ (modn_i14 (pow_i32 g_v8528 b_v8532) p_v8527)} ⇒
                end

logical DH_ch_i34 : nat → nat → L =
  fn (p_v8537 : nat) (g_v8538 : nat) ⇒ ch⟨(DH_i33 p_v8537 g_v8538)⟩

logical DH_hc_i35 : nat → nat → L =
  fn (p_v8541 : nat) (g_v8542 : nat) ⇒ hc⟨(DH_i33 p_v8541 g_v8542)⟩

program alice_i36 :
  nat →
    ∀ (p_v8544 : nat) →
      ∀ (g_v8545 : nat) → (DH_ch_i34 p_v8544 g_v8545) → IO unit
=
  fn (a_v8547 : nat) (p_v8548 : nat) (g_v8549 : nat)
     (ch_v8550 : (DH_ch_i34 p_v8548 g_v8549)) ⇒
    let ch_v8551 ⇐ (send ch_v8550 a_v8547) in
    let ch_v8552 ⇐
      (send ch_v8551 (modn_i14 (pow_i32 g_v8549 a_v8547) p_v8548))
    in
    let ch_v8553 ⇐
      (send ch_v8552 refl (modn_i14 (pow_i32 g_v8549 a_v8547) p_v8548))
    in
    let __v8554 ⇐ recv ch_v8553 in
    match __v8554 as __v8555 in IO unit with
    | ⟨{b_v8556}, ch_v8557⟩ ⇒
      let __v8558 ⇐ recv ch_v8557 in
      match __v8558 as __v8559 in IO unit with
      | ⟨B_v8560, ch_v8561⟩ ⇒
        let __v8562 ⇐ recv ch_v8561 in
        match __v8562 as __v8563 in IO unit with
        | ⟨{pf_v8564}, ch_v8565⟩ ⇒
          let s_v8566 = (modn_i14 (pow_i32 B_v8560 a_v8547) p_v8548) in
          let __v8567 ⇐ close ch_v8565 in
          (print_i26 (cats_i15 (string_of_nat_i31 s_v8566) "\n"))
        end
      end
    end

program bob_i37 :
  nat →
    ∀ (p_v8569 : nat) →
      ∀ (g_v8570 : nat) → (DH_hc_i35 p_v8569 g_v8570) → IO unit
=
  fn (b_v8572 : nat) (p_v8573 : nat) (g_v8574 : nat)
     (ch_v8575 : (DH_hc_i35 p_v8573 g_v8574)) ⇒
    let __v8576 ⇐ recv ch_v8575 in
    match __v8576 as __v8577 in IO unit with
    | ⟨{a_v8578}, ch_v8579⟩ ⇒
      let __v8580 ⇐ recv ch_v8579 in
      match __v8580 as __v8581 in IO unit with
      | ⟨A_v8582, ch_v8583⟩ ⇒
        let __v8584 ⇐ recv ch_v8583 in
        match __v8584 as __v8585 in IO unit with
        | ⟨{pf_v8586}, ch_v8587⟩ ⇒
          let ch_v8588 ⇐ (send ch_v8587 b_v8572) in
          let ch_v8589 ⇐
            (send ch_v8588 (modn_i14 (pow_i32 g_v8574 b_v8572) p_v8573))
          in
          let ch_v8590 ⇐
            (send ch_v8589 refl (modn_i14 (pow_i32 g_v8574 b_v8572) p_v8573))
          in
          let s_v8591 = (modn_i14 (pow_i32 A_v8582 b_v8572) p_v8573) in
          let __v8592 ⇐ close ch_v8590 in
          (print_i26 (cats_i15 (string_of_nat_i31 s_v8591) "\n"))
        end
      end
    end

program key_exchange_i38 : unit → IO unit =
  fn (__v8594 : unit) ⇒
    let p_v8595 = 23 in
    let g_v8596 = 5 in
    let c_v8597 ⇐
      fork (c_v8598 : (DH_ch_i34 p_v8595 g_v8596)) in
        (alice_i36 4 p_v8595 g_v8596 c_v8598)
    in
    let c0_v8599 ⇐
      fork (c0_v8600 :
        ch⟨⇓(__v8601 : (DH_hc_i35 p_v8595 g_v8596)) ⇒ end⟩)
      in
        let __v8602 ⇐ recv c0_v8600 in
        match __v8602 as __v8603 in IO unit with
        | ⟨c_v8604, c0_v8605⟩ ⇒
          let __v8606 ⇐ close c0_v8605 in
          (bob_i37 3 p_v8595 g_v8596 c_v8604)
        end
    in let c0_v8607 ⇐ (send c0_v8599 c_v8597) in close c0_v8607

program main_i39 : IO unit = let __v8608 ⇐ (key_exchange_i38 ()) in sleep 1

trans1e success--------------------------

def andb_i1 =
  fn b1_v9087 b2_v9088 ⇒
    match b1_v9087 with
    | true ⇒ b2_v9088 | false ⇒ false
    end

def orb_i2 =
  fn b1_v9089 b2_v9090 ⇒
    match b1_v9089 with
    | true ⇒ true | false ⇒ b2_v9090
    end

def notb_i3 =
  fn b_v9091 ⇒ match b_v9091 with
                 | true ⇒ false | false ⇒ true
                 end

def lten_i4 =
  fn x_v9092 y_v9093 ⇒
    match x_v9092 with
    | O ⇒ true
    | S x_v9094 ⇒
      match y_v9093 with
      | O ⇒ false | S y_v9095 ⇒ ((lten_i4 x_v9094) y_v9095)
      end
    end

def gten_i5 =
  fn x_v9096 y_v9097 ⇒
    match x_v9096 with
    | O ⇒ match y_v9097 with
            | O ⇒ true | S __v9098 ⇒ false
            end
    | S x_v9099 ⇒
      match y_v9097 with
      | O ⇒ true | S y_v9100 ⇒ ((gten_i5 x_v9099) y_v9100)
      end
    end

def ltn_i6 =
  fn x_v9101 y_v9102 ⇒
    match x_v9101 with
    | O ⇒ match y_v9102 with
            | O ⇒ false | S y_v9103 ⇒ true
            end
    | S x_v9104 ⇒
      match y_v9102 with
      | O ⇒ false | S y_v9105 ⇒ ((ltn_i6 x_v9104) y_v9105)
      end
    end

def gtn_i7 =
  fn x_v9106 y_v9107 ⇒
    match x_v9106 with
    | O ⇒ false
    | S x_v9108 ⇒
      match y_v9107 with
      | O ⇒ true | S y_v9109 ⇒ ((gtn_i7 x_v9108) y_v9109)
      end
    end

def eqn_i8 =
  fn x_v9110 y_v9111 ⇒
    match x_v9110 with
    | O ⇒ match y_v9111 with
            | O ⇒ true | S __v9112 ⇒ false
            end
    | S x_v9113 ⇒
      match y_v9111 with
      | O ⇒ false | S y_v9114 ⇒ ((eqn_i8 x_v9113) y_v9114)
      end
    end

def pred_i9 =
  fn x_v9115 ⇒ match x_v9115 with
                 | O ⇒ 0 | S x_v9116 ⇒ x_v9116
                 end

def addn_i10 =
  fn x_v9117 y_v9118 ⇒
    match x_v9117 with
    | O ⇒ y_v9118 | S x_v9119 ⇒ ((addn_i10 x_v9119) y_v9118).+1
    end

def subn_i11 =
  fn x_v9120 y_v9121 ⇒
    match y_v9121 with
    | O ⇒ x_v9120 | S y_v9122 ⇒ ((subn_i11 (pred_i9 x_v9120)) y_v9122)
    end

def muln_i12 =
  fn x_v9123 y_v9124 ⇒
    match x_v9123 with
    | O ⇒ 0
    | S x_v9125 ⇒ ((addn_i10 y_v9124) ((muln_i12 x_v9125) y_v9124))
    end

def divn_i13 =
  fn x_v9126 y_v9127 ⇒
    match ((ltn_i6 x_v9126) y_v9127) with
    | true ⇒ 0
    | false ⇒ ((divn_i13 ((subn_i11 x_v9126) y_v9127)) y_v9127).+1
    end

def modn_i14 =
  fn x_v9128 y_v9129 ⇒
    ((subn_i11 x_v9128) ((muln_i12 ((divn_i13 x_v9128) y_v9129)) y_v9129))

data char_d1 =
| Char_c1 of size(1)

data string_d2 =
| EmptyString_c2 of size(0) | String_c3 of size(2)

def cats_i15 =
  fn s1_v9130 s2_v9131 ⇒
    match s1_v9130 with
    | EmptyString_c2  ⇒ s2_v9131
    | String_c3 c_v9132 s1_v9133 ⇒
      (String_c3 c_v9132 ((cats_i15 s1_v9133) s2_v9131))
    end

def strlen_i16 =
  fn s_v9134 ⇒
    match s_v9134 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v9135 s_v9136 ⇒ (strlen_i16 s_v9136).+1
    end

data listUU_d7 =
| nilUU_c12 of size(0) | consUU_c13 of size(2)

data listUL_d6 =
| nilUL_c10 of size(0) | consUL_c11 of size(2)

data listLU_d5 =
| nilLU_c8 of size(0)

data listLL_d4 =
| nilLL_c6 of size(0) | consLL_c7 of size(2)

def lenUU_i43 =
  fn A_v9137 xs_v9138 ⇒
    match xs_v9138 with
    | nilUU_c12  ⇒ (0, nilUU_c12)
    | consUU_c13 x_v9139 xs_v9140 ⇒
      match ((lenUU_i43 NULL) xs_v9140) with
      | (n_v9141, xs_v9142) ⇒ (n_v9141.+1, (consUU_c13 x_v9139 xs_v9142))
      end
    end

def lenUL_i42 =
  fn A_v9143 xs_v9144 ⇒
    match xs_v9144 with
    | nilUL_c10  ⇒ (0, nilUL_c10)
    | consUL_c11 x_v9145 xs_v9146 ⇒
      match ((lenUL_i42 NULL) xs_v9146) with
      | (n_v9147, xs_v9148) ⇒ (n_v9147.+1, (consUL_c11 x_v9145 xs_v9148))
      end
    end

def lenLL_i40 =
  fn A_v9149 xs_v9150 ⇒
    match xs_v9150 with
    | nilLL_c6  ⇒ (0, nilLL_c6)
    | consLL_c7 x_v9151 xs_v9152 ⇒
      match ((lenLL_i40 NULL) xs_v9152) with
      | (n_v9153, xs_v9154) ⇒ (n_v9153.+1, (consLL_c7 x_v9151 xs_v9154))
      end
    end

def appendUU_i47 =
  fn A_v9155 xs_v9156 ⇒
    ln ys_v9157 ⇒
      match xs_v9156 with
      | nilUU_c12  ⇒ ys_v9157
      | consUU_c13 x_v9158 xs_v9159 ⇒
        (consUU_c13 x_v9158 (((appendUU_i47 NULL) xs_v9159) ys_v9157))
      end

def appendUL_i46 =
  fn A_v9160 xs_v9161 ⇒
    ln ys_v9162 ⇒
      match xs_v9161 with
      | nilUL_c10  ⇒ ys_v9162
      | consUL_c11 x_v9163 xs_v9164 ⇒
        (consUL_c11 x_v9163 (((appendUL_i46 NULL) xs_v9164) ys_v9162))
      end

def appendLL_i44 =
  fn A_v9165 xs_v9166 ⇒
    ln ys_v9167 ⇒
      match xs_v9166 with
      | nilLL_c6  ⇒ ys_v9167
      | consLL_c7 x_v9168 xs_v9169 ⇒
        (consLL_c7 x_v9168 (((appendLL_i44 NULL) xs_v9169) ys_v9167))
      end

def readline_i25 =
  fn __v9170 ⇒
    let ch_v9171 ⇐ open stdin in
    let ch_v9172 ⇐ (send ch_v9171 true) in
    let __v9173 ⇐ recv ch_v9172 in
    match __v9173 with
    | (s_v9174, ch_v9175) ⇒
      let ch_v9176 ⇐ (send ch_v9175 false) in
      let __v9177 ⇐ close⇑ ch_v9176 in return s_v9174
    end

def print_i26 =
  fn s_v9178 ⇒
    let ch_v9179 ⇐ open stdout in
    let ch_v9180 ⇐ (send ch_v9179 true) in
    let ch_v9181 ⇐ (send ch_v9180 s_v9178) in
    let ch_v9182 ⇐ (send ch_v9181 false) in close⇑ ch_v9182

def prerr_i27 =
  fn s_v9183 ⇒
    let ch_v9184 ⇐ open stderr in
    let ch_v9185 ⇐ (send ch_v9184 true) in
    let ch_v9186 ⇐ (send ch_v9185 s_v9183) in
    let ch_v9187 ⇐ (send ch_v9186 false) in close⇑ ch_v9187

def digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

def get_at_i29 =
  fn A_v9188 n_v9189 xs_v9190 a_v9191 ⇒
    match n_v9189 with
    | O ⇒
      match xs_v9190 with
      | nilUU_c12  ⇒ a_v9191 | consUU_c13 x_v9192 __v9193 ⇒ x_v9192
      end
    | S n_v9194 ⇒
      match xs_v9190 with
      | nilUU_c12  ⇒ a_v9191
      | consUU_c13 __v9195 xs_v9196 ⇒
        ((((get_at_i29 NULL) n_v9194) xs_v9196) a_v9191)
      end
    end

def string_of_digit_i30 =
  fn n_v9197 ⇒ ((((get_at_i29 NULL) n_v9197) digits_i28) EmptyString_c2)

def string_of_nat_i31 =
  fn n_v9198 ⇒
    let s_v9199 = (string_of_digit_i30 ((modn_i14 n_v9198) 10)) in
    let n_v9200 = ((divn_i13 n_v9198) 10) in
    match ((ltn_i6 0) n_v9200) with
    | true ⇒ ((cats_i15 (string_of_nat_i31 n_v9200)) s_v9199)
    | false ⇒ s_v9199
    end

def pow_i32 =
  fn n_v9201 m_v9202 ⇒
    match m_v9202 with
    | O ⇒ 1
    | S m_v9203 ⇒ ((muln_i12 n_v9201) ((pow_i32 n_v9201) m_v9203))
    end

def alice_i36 =
  fn a_v9204 p_v9205 g_v9206 ch_v9207 ⇒
    let ch_v9208 ⇐ ({send} ch_v9207 NULL) in
    let ch_v9209 ⇐
      (send ch_v9208 ((modn_i14 ((pow_i32 g_v9206) a_v9204)) p_v9205))
    in
    let ch_v9210 ⇐ ({send} ch_v9209 NULL) in
    let __v9211 ⇐ {recv} ch_v9210 in
    match __v9211 with
    | (b_v9212, ch_v9213) ⇒
      let __v9214 ⇐ recv ch_v9213 in
      match __v9214 with
      | (B_v9215, ch_v9216) ⇒
        let __v9217 ⇐ {recv} ch_v9216 in
        match __v9217 with
        | (pf_v9218, ch_v9219) ⇒
          let s_v9220 = ((modn_i14 ((pow_i32 B_v9215) a_v9204)) p_v9205) in
          let __v9221 ⇐ close⇑ ch_v9219 in
          (print_i26 ((cats_i15 (string_of_nat_i31 s_v9220)) "\n"))
        end
      end
    end

def bob_i37 =
  fn b_v9222 p_v9223 g_v9224 ch_v9225 ⇒
    let __v9226 ⇐ {recv} ch_v9225 in
    match __v9226 with
    | (a_v9227, ch_v9228) ⇒
      let __v9229 ⇐ recv ch_v9228 in
      match __v9229 with
      | (A_v9230, ch_v9231) ⇒
        let __v9232 ⇐ {recv} ch_v9231 in
        match __v9232 with
        | (pf_v9233, ch_v9234) ⇒
          let ch_v9235 ⇐ ({send} ch_v9234 NULL) in
          let ch_v9236 ⇐
            (send ch_v9235 ((modn_i14 ((pow_i32 g_v9224) b_v9222)) p_v9223))
          in
          let ch_v9237 ⇐ ({send} ch_v9236 NULL) in
          let s_v9238 = ((modn_i14 ((pow_i32 A_v9230) b_v9222)) p_v9223) in
          let __v9239 ⇐ close⇓ ch_v9237 in
          (print_i26 ((cats_i15 (string_of_nat_i31 s_v9238)) "\n"))
        end
      end
    end

def key_exchange_i38 =
  fn __v9240 ⇒
    let p_v9241 = 23 in
    let g_v9242 = 5 in
    let c_v9243 ⇐
      fork c_v9244 in ((((alice_i36 4) p_v9241) g_v9242) c_v9244)
    in
    let c0_v9245 ⇐
      fork c0_v9246 in
        let __v9247 ⇐ recv c0_v9246 in
        match __v9247 with
        | (c_v9248, c0_v9249) ⇒
          let __v9250 ⇐ close⇑ c0_v9249 in
          ((((bob_i37 3) p_v9241) g_v9242) c_v9248)
        end
    in let c0_v9251 ⇐ (send c0_v9245 c_v9243) in close⇓ c0_v9251

main = let __v9252 ⇐ (key_exchange_i38 ()) in sleep 1

trans12 success--------------------------

fun andb_i1(b1_v9507, b2_v9508) = if b1_v9507 then
                                    b2_v9508
                                  else
                                    0

val andbclo_i48 = fn b1_v9509 b2_v9510 ⇒ andb_i1(b1_v9509, b2_v9510)

fun orb_i2(b1_v9511, b2_v9512) = if b1_v9511 then
                                   1
                                 else
                                   b2_v9512

val orbclo_i49 = fn b1_v9513 b2_v9514 ⇒ orb_i2(b1_v9513, b2_v9514)

fun notb_i3(b_v9515) = if b_v9515 then
                         0
                       else
                         1

val notbclo_i50 = fn b_v9516 ⇒ notb_i3(b_v9516)

fun lten_i4(x_v9517, y_v9518) =
  let __v9519 = x_v9517 in
  if __v9519 then
    let x_v9520 = __v9519.-1 in
    let __v9521 = y_v9518 in
    if __v9521 then
      let y_v9522 = __v9521.-1 in lten_i4(x_v9520, y_v9522)
    else
      0
  else
    1

val ltenclo_i51 = fn x_v9523 y_v9524 ⇒ lten_i4(x_v9523, y_v9524)

fun gten_i5(x_v9525, y_v9526) =
  let __v9527 = x_v9525 in
  if __v9527 then
    let x_v9528 = __v9527.-1 in
    let __v9529 = y_v9526 in
    if __v9529 then
      let y_v9530 = __v9529.-1 in gten_i5(x_v9528, y_v9530)
    else
      1
  else
    let __v9531 = y_v9526 in
    if __v9531 then
      let __v9532 = __v9531.-1 in 0
    else
      1

val gtenclo_i52 = fn x_v9533 y_v9534 ⇒ gten_i5(x_v9533, y_v9534)

fun ltn_i6(x_v9535, y_v9536) =
  let __v9537 = x_v9535 in
  if __v9537 then
    let x_v9538 = __v9537.-1 in
    let __v9539 = y_v9536 in
    if __v9539 then
      let y_v9540 = __v9539.-1 in ltn_i6(x_v9538, y_v9540)
    else
      0
  else
    let __v9541 = y_v9536 in
    if __v9541 then
      let y_v9542 = __v9541.-1 in 1
    else
      0

val ltnclo_i53 = fn x_v9543 y_v9544 ⇒ ltn_i6(x_v9543, y_v9544)

fun gtn_i7(x_v9545, y_v9546) =
  let __v9547 = x_v9545 in
  if __v9547 then
    let x_v9548 = __v9547.-1 in
    let __v9549 = y_v9546 in
    if __v9549 then
      let y_v9550 = __v9549.-1 in gtn_i7(x_v9548, y_v9550)
    else
      1
  else
    0

val gtnclo_i54 = fn x_v9551 y_v9552 ⇒ gtn_i7(x_v9551, y_v9552)

fun eqn_i8(x_v9553, y_v9554) =
  let __v9555 = x_v9553 in
  if __v9555 then
    let x_v9556 = __v9555.-1 in
    let __v9557 = y_v9554 in
    if __v9557 then
      let y_v9558 = __v9557.-1 in eqn_i8(x_v9556, y_v9558)
    else
      0
  else
    let __v9559 = y_v9554 in
    if __v9559 then
      let __v9560 = __v9559.-1 in 0
    else
      1

val eqnclo_i55 = fn x_v9561 y_v9562 ⇒ eqn_i8(x_v9561, y_v9562)

fun pred_i9(x_v9563) =
  let __v9564 = x_v9563 in
  if __v9564 then
    let x_v9565 = __v9564.-1 in x_v9565
  else
    0

val predclo_i56 = fn x_v9566 ⇒ pred_i9(x_v9566)

fun addn_i10(x_v9567, y_v9568) =
  let __v9569 = x_v9567 in
  if __v9569 then
    let x_v9570 = __v9569.-1 in addn_i10(x_v9570, y_v9568).+1
  else
    y_v9568

val addnclo_i57 = fn x_v9571 y_v9572 ⇒ addn_i10(x_v9571, y_v9572)

fun subn_i11(x_v9573, y_v9574) =
  let __v9575 = y_v9574 in
  if __v9575 then
    let y_v9576 = __v9575.-1 in subn_i11(pred_i9(x_v9573), y_v9576)
  else
    x_v9573

val subnclo_i58 = fn x_v9577 y_v9578 ⇒ subn_i11(x_v9577, y_v9578)

fun muln_i12(x_v9579, y_v9580) =
  let __v9581 = x_v9579 in
  if __v9581 then
    let x_v9582 = __v9581.-1 in addn_i10(y_v9580, muln_i12(x_v9582, y_v9580))
  else
    0

val mulnclo_i59 = fn x_v9583 y_v9584 ⇒ muln_i12(x_v9583, y_v9584)

fun divn_i13(x_v9585, y_v9586) =
  if ltn_i6(x_v9585, y_v9586) then
    0
  else
    divn_i13(subn_i11(x_v9585, y_v9586), y_v9586).+1

val divnclo_i60 = fn x_v9587 y_v9588 ⇒ divn_i13(x_v9587, y_v9588)

fun modn_i14(x_v9589, y_v9590) =
  subn_i11(x_v9589, muln_i12(divn_i13(x_v9589, y_v9590), y_v9590))

val modnclo_i61 = fn x_v9591 y_v9592 ⇒ modn_i14(x_v9591, y_v9592)

fun cats_i15(s1_v9593, s2_v9594) =
  match s1_v9593 with
  | EmptyString_c2  ⇒ s2_v9594
  | String_c3 c_v9595 s1_v9596 ⇒
    (String_c3 c_v9595 cats_i15(s1_v9596, s2_v9594))
  end

val catsclo_i62 = fn s1_v9597 s2_v9598 ⇒ cats_i15(s1_v9597, s2_v9598)

fun strlen_i16(s_v9599) =
  match s_v9599 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v9600 s_v9601 ⇒ strlen_i16(s_v9601).+1
  end

val strlenclo_i63 = fn s_v9602 ⇒ strlen_i16(s_v9602)

fun lenUU_i43(A_v9603, xs_v9604) =
  match xs_v9604 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v9605 xs_v9606 ⇒
    match lenUU_i43(NULL, xs_v9606) with
    | (n_v9607, xs_v9608) ⇒ (n_v9607.+1, (consUU_c13 x_v9605 xs_v9608))
    end
  end

val lenUUclo_i64 = fn A_v9609 xs_v9610 ⇒ lenUU_i43(A_v9609, xs_v9610)

fun lenUL_i42(A_v9611, xs_v9612) =
  match xs_v9612 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v9613 xs_v9614 ⇒
    match lenUL_i42(NULL, xs_v9614) with
    | (n_v9615, xs_v9616) ⇒ (n_v9615.+1, (consUL_c11 x_v9613 xs_v9616))
    end
  end

val lenULclo_i65 = fn A_v9617 xs_v9618 ⇒ lenUL_i42(A_v9617, xs_v9618)

fun lenLL_i40(A_v9619, xs_v9620) =
  match xs_v9620 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v9621 xs_v9622 ⇒
    match lenLL_i40(NULL, xs_v9622) with
    | (n_v9623, xs_v9624) ⇒ (n_v9623.+1, (consLL_c7 x_v9621 xs_v9624))
    end
  end

val lenLLclo_i66 = fn A_v9625 xs_v9626 ⇒ lenLL_i40(A_v9625, xs_v9626)

fun appendUU_i47(A_v9627, xs_v9628, ys_v9629) =
  match xs_v9628 with
  | nilUU_c12  ⇒ ys_v9629
  | consUU_c13 x_v9630 xs_v9631 ⇒
    (consUU_c13 x_v9630 appendUU_i47(NULL, xs_v9631, ys_v9629))
  end

val appendUUclo_i67 =
  fn A_v9632 xs_v9633 ⇒
    ln ys_v9634 ⇒ appendUU_i47(A_v9632, xs_v9633, ys_v9634)

fun appendUL_i46(A_v9635, xs_v9636, ys_v9637) =
  match xs_v9636 with
  | nilUL_c10  ⇒ ys_v9637
  | consUL_c11 x_v9638 xs_v9639 ⇒
    (consUL_c11 x_v9638 appendUL_i46(NULL, xs_v9639, ys_v9637))
  end

val appendULclo_i68 =
  fn A_v9640 xs_v9641 ⇒
    ln ys_v9642 ⇒ appendUL_i46(A_v9640, xs_v9641, ys_v9642)

fun appendLL_i44(A_v9643, xs_v9644, ys_v9645) =
  match xs_v9644 with
  | nilLL_c6  ⇒ ys_v9645
  | consLL_c7 x_v9646 xs_v9647 ⇒
    (consLL_c7 x_v9646 appendLL_i44(NULL, xs_v9647, ys_v9645))
  end

val appendLLclo_i69 =
  fn A_v9648 xs_v9649 ⇒
    ln ys_v9650 ⇒ appendLL_i44(A_v9648, xs_v9649, ys_v9650)

fun readline_i25(__v9651) =
  ln __v9652 ⇒
    let ch_v9653 = (ln __v9654 ⇒ open stdin) NULL in
    let ch_v9655 =
      ((fn x_v9656 ⇒ ln __v9657 ⇒ send(ch_v9653, x_v9656)) 1) NULL
    in
    let __v9658 = (ln __v9659 ⇒ recv(ch_v9655)) NULL in
    (match __v9658 with
     | (s_v9660, ch_v9661) ⇒
       ln __v9662 ⇒
         let ch_v9663 =
           ((fn x_v9664 ⇒ ln __v9665 ⇒ send(ch_v9661, x_v9664)) 0) NULL
         in
         let __v9666 = (ln __v9667 ⇒ let __v9668 = ch_v9663 in NULL) NULL
         in (ln __v9669 ⇒ s_v9660) NULL
     end) NULL

val readlineclo_i70 = fn __v9670 ⇒ readline_i25(__v9670)

fun print_i26(s_v9671) =
  ln __v9672 ⇒
    let ch_v9673 = (ln __v9674 ⇒ open stdout) NULL in
    let ch_v9675 =
      ((fn x_v9676 ⇒ ln __v9677 ⇒ send(ch_v9673, x_v9676)) 1) NULL
    in
    let ch_v9678 =
      ((fn x_v9679 ⇒ ln __v9680 ⇒ send(ch_v9675, x_v9679)) s_v9671) NULL
    in
    let ch_v9681 =
      ((fn x_v9682 ⇒ ln __v9683 ⇒ send(ch_v9678, x_v9682)) 0) NULL
    in (ln __v9684 ⇒ let __v9685 = ch_v9681 in NULL) NULL

val printclo_i71 = fn s_v9686 ⇒ print_i26(s_v9686)

fun prerr_i27(s_v9687) =
  ln __v9688 ⇒
    let ch_v9689 = (ln __v9690 ⇒ open stderr) NULL in
    let ch_v9691 =
      ((fn x_v9692 ⇒ ln __v9693 ⇒ send(ch_v9689, x_v9692)) 1) NULL
    in
    let ch_v9694 =
      ((fn x_v9695 ⇒ ln __v9696 ⇒ send(ch_v9691, x_v9695)) s_v9687) NULL
    in
    let ch_v9697 =
      ((fn x_v9698 ⇒ ln __v9699 ⇒ send(ch_v9694, x_v9698)) 0) NULL
    in (ln __v9700 ⇒ let __v9701 = ch_v9697 in NULL) NULL

val prerrclo_i72 = fn s_v9702 ⇒ prerr_i27(s_v9702)

val digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i29(A_v9703, n_v9704, xs_v9705, a_v9706) =
  let __v9707 = n_v9704 in
  if __v9707 then
    let n_v9708 = __v9707.-1 in
    match xs_v9705 with
    | nilUU_c12  ⇒ a_v9706
    | consUU_c13 __v9709 xs_v9710 ⇒
      get_at_i29(NULL, n_v9708, xs_v9710, a_v9706)
    end
  else
    match xs_v9705 with
    | nilUU_c12  ⇒ a_v9706 | consUU_c13 x_v9711 __v9712 ⇒ x_v9711
    end

val get_atclo_i73 =
  fn A_v9713 n_v9714 xs_v9715 a_v9716 ⇒
    get_at_i29(A_v9713, n_v9714, xs_v9715, a_v9716)

fun string_of_digit_i30(n_v9717) =
  get_at_i29(NULL, n_v9717, digits_i28, EmptyString_c2)

val string_of_digitclo_i74 = fn n_v9718 ⇒ string_of_digit_i30(n_v9718)

fun string_of_nat_i31(n_v9719) =
  let s_v9720 = string_of_digit_i30(modn_i14(n_v9719, 10)) in
  let n_v9721 = divn_i13(n_v9719, 10) in
  if ltn_i6(0, n_v9721) then
    cats_i15(string_of_nat_i31(n_v9721), s_v9720)
  else
    s_v9720

val string_of_natclo_i75 = fn n_v9722 ⇒ string_of_nat_i31(n_v9722)

fun pow_i32(n_v9723, m_v9724) =
  let __v9725 = m_v9724 in
  if __v9725 then
    let m_v9726 = __v9725.-1 in muln_i12(n_v9723, pow_i32(n_v9723, m_v9726))
  else
    1

val powclo_i76 = fn n_v9727 m_v9728 ⇒ pow_i32(n_v9727, m_v9728)

fun alice_i36(a_v9729, p_v9730, g_v9731, ch_v9732) =
  ln __v9733 ⇒
    let ch_v9734 = ((fn x_v9735 ⇒ ln __v9736 ⇒ ch_v9732) NULL) NULL in
    let ch_v9737 =
      ((fn x_v9738 ⇒ ln __v9739 ⇒ send(ch_v9734, x_v9738))
         modn_i14(pow_i32(g_v9731, a_v9729), p_v9730))
        NULL
    in
    let ch_v9740 = ((fn x_v9741 ⇒ ln __v9742 ⇒ ch_v9737) NULL) NULL in
    let __v9743 = (ln __v9744 ⇒ (NULL, ch_v9740)) NULL in
    (match __v9743 with
     | (b_v9745, ch_v9746) ⇒
       ln __v9747 ⇒
         let __v9748 = (ln __v9749 ⇒ recv(ch_v9746)) NULL in
         (match __v9748 with
          | (B_v9750, ch_v9751) ⇒
            ln __v9752 ⇒
              let __v9753 = (ln __v9754 ⇒ (NULL, ch_v9751)) NULL in
              (match __v9753 with
               | (pf_v9755, ch_v9756) ⇒
                 let s_v9757 = modn_i14(pow_i32(B_v9750, a_v9729), p_v9730)
                 in
                 ln __v9758 ⇒
                   let __v9759 =
                     (ln __v9760 ⇒ let __v9761 = ch_v9756 in NULL) NULL
                   in
                   (print_i26(cats_i15(string_of_nat_i31(s_v9757), "\n")))
                     NULL
               end) NULL
          end) NULL
     end) NULL

val aliceclo_i77 =
  fn a_v9762 p_v9763 g_v9764 ch_v9765 ⇒
    alice_i36(a_v9762, p_v9763, g_v9764, ch_v9765)

fun bob_i37(b_v9766, p_v9767, g_v9768, ch_v9769) =
  ln __v9770 ⇒
    let __v9771 = (ln __v9772 ⇒ (NULL, ch_v9769)) NULL in
    (match __v9771 with
     | (a_v9773, ch_v9774) ⇒
       ln __v9775 ⇒
         let __v9776 = (ln __v9777 ⇒ recv(ch_v9774)) NULL in
         (match __v9776 with
          | (A_v9778, ch_v9779) ⇒
            ln __v9780 ⇒
              let __v9781 = (ln __v9782 ⇒ (NULL, ch_v9779)) NULL in
              (match __v9781 with
               | (pf_v9783, ch_v9784) ⇒
                 ln __v9785 ⇒
                   let ch_v9786 =
                     ((fn x_v9787 ⇒ ln __v9788 ⇒ ch_v9784) NULL) NULL
                   in
                   let ch_v9789 =
                     ((fn x_v9790 ⇒ ln __v9791 ⇒ send(ch_v9786, x_v9790))
                        modn_i14(pow_i32(g_v9768, b_v9766), p_v9767))
                       NULL
                   in
                   let ch_v9792 =
                     ((fn x_v9793 ⇒ ln __v9794 ⇒ ch_v9789) NULL) NULL
                   in
                   (let s_v9795 =
                      modn_i14(pow_i32(A_v9778, b_v9766), p_v9767)
                    in
                    ln __v9796 ⇒
                      let __v9797 = (ln __v9798 ⇒ close(ch_v9792)) NULL in
                      (print_i26(cats_i15(string_of_nat_i31(s_v9795), "\n")))
                        NULL)
                     NULL
               end) NULL
          end) NULL
     end) NULL

val bobclo_i78 =
  fn b_v9799 p_v9800 g_v9801 ch_v9802 ⇒
    bob_i37(b_v9799, p_v9800, g_v9801, ch_v9802)

fun key_exchange_i38(__v9803) =
  let p_v9804 = 23 in
  let g_v9805 = 5 in
  ln __v9806 ⇒
    let c_v9807 =
      (ln __v9808 ⇒
         fork c_v9809 in (alice_i36(4, p_v9804, g_v9805, c_v9809)) NULL)
        NULL
    in
    let c0_v9810 =
      (ln __v9811 ⇒
         fork c0_v9812 in
           (ln __v9813 ⇒
              let __v9814 = (ln __v9815 ⇒ recv(c0_v9812)) NULL in
              (match __v9814 with
               | (c_v9816, c0_v9817) ⇒
                 ln __v9818 ⇒
                   let __v9819 =
                     (ln __v9820 ⇒ let __v9821 = c0_v9817 in NULL) NULL
                   in (bob_i37(3, p_v9804, g_v9805, c_v9816)) NULL
               end) NULL)
             NULL)
        NULL
    in
    let c0_v9822 =
      ((ln x_v9823 __v9824 ⇒ send(c0_v9810, x_v9823)) c_v9807) NULL
    in (ln __v9825 ⇒ close(c0_v9822)) NULL

val key_exchangeclo_i79 = fn __v9826 ⇒ key_exchange_i38(__v9826)

main =
  (ln __v9827 ⇒
     let __v9828 = (key_exchange_i38(NULL)) NULL in
     (ln __v9829 ⇒ sleep(1)) NULL)
    NULL

trans23 success--------------------------

fun andb_i1(b1_v10402, b2_v10403) = if b1_v10402 then
                                      b2_v10403
                                    else
                                      0

val andbclo_i48 = fn b1_v10404 b2_v10405 ⇒ andb_i1(b1_v10404, b2_v10405)

fun orb_i2(b1_v10406, b2_v10407) = if b1_v10406 then
                                     1
                                   else
                                     b2_v10407

val orbclo_i49 = fn b1_v10408 b2_v10409 ⇒ orb_i2(b1_v10408, b2_v10409)

fun notb_i3(b_v10410) = if b_v10410 then
                          0
                        else
                          1

val notbclo_i50 = fn b_v10411 ⇒ notb_i3(b_v10411)

fun lten_i4(x_v10412, y_v10413) =
  if x_v10412 then
    if y_v10413 then
      lten_i4(x_v10412.-1, y_v10413.-1)
    else
      0
  else
    1

val ltenclo_i51 = fn x_v10414 y_v10415 ⇒ lten_i4(x_v10414, y_v10415)

fun gten_i5(x_v10416, y_v10417) =
  if x_v10416 then
    if y_v10417 then
      gten_i5(x_v10416.-1, y_v10417.-1)
    else
      1
  else
    if y_v10417 then
      0
    else
      1

val gtenclo_i52 = fn x_v10418 y_v10419 ⇒ gten_i5(x_v10418, y_v10419)

fun ltn_i6(x_v10420, y_v10421) =
  if x_v10420 then
    if y_v10421 then
      ltn_i6(x_v10420.-1, y_v10421.-1)
    else
      0
  else
    if y_v10421 then
      1
    else
      0

val ltnclo_i53 = fn x_v10422 y_v10423 ⇒ ltn_i6(x_v10422, y_v10423)

fun gtn_i7(x_v10424, y_v10425) =
  if x_v10424 then
    if y_v10425 then
      gtn_i7(x_v10424.-1, y_v10425.-1)
    else
      1
  else
    0

val gtnclo_i54 = fn x_v10426 y_v10427 ⇒ gtn_i7(x_v10426, y_v10427)

fun eqn_i8(x_v10428, y_v10429) =
  if x_v10428 then
    if y_v10429 then
      eqn_i8(x_v10428.-1, y_v10429.-1)
    else
      0
  else
    if y_v10429 then
      0
    else
      1

val eqnclo_i55 = fn x_v10430 y_v10431 ⇒ eqn_i8(x_v10430, y_v10431)

fun pred_i9(x_v10432) = if x_v10432 then
                          x_v10432.-1
                        else
                          0

val predclo_i56 = fn x_v10433 ⇒ pred_i9(x_v10433)

fun addn_i10(x_v10434, y_v10435) =
  if x_v10434 then
    addn_i10(x_v10434.-1, y_v10435).+1
  else
    y_v10435

val addnclo_i57 = fn x_v10436 y_v10437 ⇒ addn_i10(x_v10436, y_v10437)

fun subn_i11(x_v10438, y_v10439) =
  if y_v10439 then
    subn_i11(pred_i9(x_v10438), y_v10439.-1)
  else
    x_v10438

val subnclo_i58 = fn x_v10440 y_v10441 ⇒ subn_i11(x_v10440, y_v10441)

fun muln_i12(x_v10442, y_v10443) =
  if x_v10442 then
    addn_i10(y_v10443, muln_i12(x_v10442.-1, y_v10443))
  else
    0

val mulnclo_i59 = fn x_v10444 y_v10445 ⇒ muln_i12(x_v10444, y_v10445)

fun divn_i13(x_v10446, y_v10447) =
  if ltn_i6(x_v10446, y_v10447) then
    0
  else
    divn_i13(subn_i11(x_v10446, y_v10447), y_v10447).+1

val divnclo_i60 = fn x_v10448 y_v10449 ⇒ divn_i13(x_v10448, y_v10449)

fun modn_i14(x_v10450, y_v10451) =
  subn_i11(x_v10450, muln_i12(divn_i13(x_v10450, y_v10451), y_v10451))

val modnclo_i61 = fn x_v10452 y_v10453 ⇒ modn_i14(x_v10452, y_v10453)

fun cats_i15(s1_v10454, s2_v10455) =
  match s1_v10454 with
  | EmptyString_c2  ⇒ s2_v10455
  | String_c3 c_v10456 s1_v10457 ⇒
    (String_c3 c_v10456 cats_i15(s1_v10457, s2_v10455))
  end

val catsclo_i62 = fn s1_v10458 s2_v10459 ⇒ cats_i15(s1_v10458, s2_v10459)

fun strlen_i16(s_v10460) =
  match s_v10460 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v10461 s_v10462 ⇒ strlen_i16(s_v10462).+1
  end

val strlenclo_i63 = fn s_v10463 ⇒ strlen_i16(s_v10463)

fun lenUU_i43(A_v10464, xs_v10465) =
  match xs_v10465 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v10466 xs_v10467 ⇒
    match lenUU_i43(NULL, xs_v10467) with
    | (n_v10468, xs_v10469) ⇒
      (n_v10468.+1, (consUU_c13 x_v10466 xs_v10469))
    end
  end

val lenUUclo_i64 = fn A_v10470 xs_v10471 ⇒ lenUU_i43(A_v10470, xs_v10471)

fun lenUL_i42(A_v10472, xs_v10473) =
  match xs_v10473 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v10474 xs_v10475 ⇒
    match lenUL_i42(NULL, xs_v10475) with
    | (n_v10476, xs_v10477) ⇒
      (n_v10476.+1, (consUL_c11 x_v10474 xs_v10477))
    end
  end

val lenULclo_i65 = fn A_v10478 xs_v10479 ⇒ lenUL_i42(A_v10478, xs_v10479)

fun lenLL_i40(A_v10480, xs_v10481) =
  match xs_v10481 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v10482 xs_v10483 ⇒
    match lenLL_i40(NULL, xs_v10483) with
    | (n_v10484, xs_v10485) ⇒ (n_v10484.+1, (consLL_c7 x_v10482 xs_v10485))
    end
  end

val lenLLclo_i66 = fn A_v10486 xs_v10487 ⇒ lenLL_i40(A_v10486, xs_v10487)

fun appendUU_i47(A_v10488, xs_v10489, ys_v10490) =
  match xs_v10489 with
  | nilUU_c12  ⇒ ys_v10490
  | consUU_c13 x_v10491 xs_v10492 ⇒
    (consUU_c13 x_v10491 appendUU_i47(NULL, xs_v10492, ys_v10490))
  end

val appendUUclo_i67 =
  fn A_v10493 xs_v10494 ⇒
    ln ys_v10495 ⇒ appendUU_i47(A_v10493, xs_v10494, ys_v10495)

fun appendUL_i46(A_v10496, xs_v10497, ys_v10498) =
  match xs_v10497 with
  | nilUL_c10  ⇒ ys_v10498
  | consUL_c11 x_v10499 xs_v10500 ⇒
    (consUL_c11 x_v10499 appendUL_i46(NULL, xs_v10500, ys_v10498))
  end

val appendULclo_i68 =
  fn A_v10501 xs_v10502 ⇒
    ln ys_v10503 ⇒ appendUL_i46(A_v10501, xs_v10502, ys_v10503)

fun appendLL_i44(A_v10504, xs_v10505, ys_v10506) =
  match xs_v10505 with
  | nilLL_c6  ⇒ ys_v10506
  | consLL_c7 x_v10507 xs_v10508 ⇒
    (consLL_c7 x_v10507 appendLL_i44(NULL, xs_v10508, ys_v10506))
  end

val appendLLclo_i69 =
  fn A_v10509 xs_v10510 ⇒
    ln ys_v10511 ⇒ appendLL_i44(A_v10509, xs_v10510, ys_v10511)

fun readline_i25(__v10512) =
  ln __v10513 ⇒
    let ch_v10514 = open stdin in
    let ch_v10515 = send(ch_v10514, 1) in
    let __v10516 = recv(ch_v10515) in
    match __v10516 with
    | (s_v10517, ch_v10518) ⇒
      let ch_v10519 = send(ch_v10518, 0) in s_v10517
    end

val readlineclo_i70 = fn __v10520 ⇒ readline_i25(__v10520)

fun print_i26(s_v10521) =
  ln __v10522 ⇒
    let ch_v10523 = open stdout in
    let ch_v10524 = send(ch_v10523, 1) in
    let ch_v10525 = send(ch_v10524, s_v10521) in
    let ch_v10526 = send(ch_v10525, 0) in NULL

val printclo_i71 = fn s_v10527 ⇒ print_i26(s_v10527)

fun prerr_i27(s_v10528) =
  ln __v10529 ⇒
    let ch_v10530 = open stderr in
    let ch_v10531 = send(ch_v10530, 1) in
    let ch_v10532 = send(ch_v10531, s_v10528) in
    let ch_v10533 = send(ch_v10532, 0) in NULL

val prerrclo_i72 = fn s_v10534 ⇒ prerr_i27(s_v10534)

val digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i29(A_v10535, n_v10536, xs_v10537, a_v10538) =
  if n_v10536 then
    match xs_v10537 with
    | nilUU_c12  ⇒ a_v10538
    | consUU_c13 __v10539 xs_v10540 ⇒
      get_at_i29(NULL, n_v10536.-1, xs_v10540, a_v10538)
    end
  else
    match xs_v10537 with
    | nilUU_c12  ⇒ a_v10538 | consUU_c13 x_v10541 __v10542 ⇒ x_v10541
    end

val get_atclo_i73 =
  fn A_v10543 n_v10544 xs_v10545 a_v10546 ⇒
    get_at_i29(A_v10543, n_v10544, xs_v10545, a_v10546)

fun string_of_digit_i30(n_v10547) =
  get_at_i29(NULL, n_v10547, digits_i28, EmptyString_c2)

val string_of_digitclo_i74 = fn n_v10548 ⇒ string_of_digit_i30(n_v10548)

fun string_of_nat_i31(n_v10549) =
  if ltn_i6(0, divn_i13(n_v10549, 10)) then
    cats_i15(string_of_nat_i31(divn_i13(n_v10549, 10)),
             string_of_digit_i30(modn_i14(n_v10549, 10)))
  else
    string_of_digit_i30(modn_i14(n_v10549, 10))

val string_of_natclo_i75 = fn n_v10550 ⇒ string_of_nat_i31(n_v10550)

fun pow_i32(n_v10551, m_v10552) =
  if m_v10552 then
    muln_i12(n_v10551, pow_i32(n_v10551, m_v10552.-1))
  else
    1

val powclo_i76 = fn n_v10553 m_v10554 ⇒ pow_i32(n_v10553, m_v10554)

fun alice_i36(a_v10555, p_v10556, g_v10557, ch_v10558) =
  ln __v10559 ⇒
    let ch_v10560 =
      send(ch_v10558, modn_i14(pow_i32(g_v10557, a_v10555), p_v10556))
    in
    match (NULL, ch_v10560) with
    | (b_v10561, ch_v10562) ⇒
      let __v10563 = recv(ch_v10562) in
      match __v10563 with
      | (B_v10564, ch_v10565) ⇒
        match (NULL, ch_v10565) with
        | (pf_v10566, ch_v10567) ⇒
          (print_i26(cats_i15(string_of_nat_i31(modn_i14(pow_i32(B_v10564,
                                                                 a_v10555),
                                                         p_v10556)),
                              "\n")))
            NULL
        end
      end
    end

val aliceclo_i77 =
  fn a_v10568 p_v10569 g_v10570 ch_v10571 ⇒
    alice_i36(a_v10568, p_v10569, g_v10570, ch_v10571)

fun bob_i37(b_v10572, p_v10573, g_v10574, ch_v10575) =
  ln __v10576 ⇒
    match (NULL, ch_v10575) with
    | (a_v10577, ch_v10578) ⇒
      let __v10579 = recv(ch_v10578) in
      match __v10579 with
      | (A_v10580, ch_v10581) ⇒
        match (NULL, ch_v10581) with
        | (pf_v10582, ch_v10583) ⇒
          let ch_v10584 =
            send(ch_v10583, modn_i14(pow_i32(g_v10574, b_v10572), p_v10573))
          in
          let __v10585 = close(ch_v10584) in
          (print_i26(cats_i15(string_of_nat_i31(modn_i14(pow_i32(A_v10580,
                                                                 b_v10572),
                                                         p_v10573)),
                              "\n")))
            NULL
        end
      end
    end

val bobclo_i78 =
  fn b_v10586 p_v10587 g_v10588 ch_v10589 ⇒
    bob_i37(b_v10586, p_v10587, g_v10588, ch_v10589)

fun key_exchange_i38(__v10590) =
  ln __v10591 ⇒
    let c_v10592 = fork c_v10593 in (alice_i36(4, 23, 5, c_v10593)) NULL in
    let c0_v10594 =
      fork c0_v10595 in
        let __v10596 = recv(c0_v10595) in
        match __v10596 with
        | (c_v10597, c0_v10598) ⇒ (bob_i37(3, 23, 5, c_v10597)) NULL
        end
    in let c0_v10599 = send(c0_v10594, c_v10592) in close(c0_v10599)

val key_exchangeclo_i79 = fn __v10600 ⇒ key_exchange_i38(__v10600)

main = let __v10601 = (key_exchange_i38(NULL)) NULL in sleep(1)

trans3e success--------------------------

trans34 success--------------------------

