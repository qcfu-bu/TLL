program id‹› (n : nat) (acc : nat) : nat = match n as _ in _ with O ⇒ acc | S n0 ⇒ (
(id) (n0)
(acc.+1))

program idM‹› (n : nat) (acc : nat) : IO nat = match n as _ in _ with O ⇒ return acc | S n0 ⇒ (
(idM) (n0)
(acc.+1))

program digits‹› : ((list‹_, U›) (_)) = ((cons)
(((String) (((Char) (O.+48))) (EmptyString)))
(((cons) (((String) (((Char) (O.+49))) (EmptyString)))
 (((cons) (((String) (((Char) (O.+50))) (EmptyString)))
  (((cons) (((String) (((Char) (O.+51))) (EmptyString)))
   (((cons) (((String) (((Char) (O.+52))) (EmptyString)))
    (((cons) (((String) (((Char) (O.+53))) (EmptyString)))
     (((cons) (((String) (((Char) (O.+54))) (EmptyString)))
      (((cons) (((String) (((Char) (O.+55))) (EmptyString)))
       (((cons) (((String) (((Char) (O.+56))) (EmptyString)))
        (((cons) (((String) (((Char) (O.+57))) (EmptyString))) (nil))))))))))))))))))))

program get_at‹› {A : U} (n : nat) (xs : ((list‹_, U›)
(A))) (a : A) : A = match n as _ in _ with O ⇒ match xs as _ in _ with nil  ⇒ a | cons x
_ ⇒ x | S n ⇒ match xs as _ in _ with nil  ⇒ a | cons _
xs ⇒ ((get_at) (_) (n) (xs)
(a))

program string_of_digit‹› (n : nat) : string = ((get_at) (_) (n) 
(digits)
(EmptyString))

program string_of_nat‹› (n : nat) : string = let s = ((string_of_digit)
(((modn) (n) (O.+10)))) in let n = ((divn) (n) (O.+10)) in match ((ltn)
(O.+0) (n)) as _ in _ with true ⇒ ((cats) (((string_of_nat) (n)))
(s)) | false ⇒ s

program main‹› : IO unit = let x ⇐ ((idM) (O.+8000000)
(O.+0)) in return ()

parsing success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v165 : bool) (b2_v166 : bool) ⇒
    match b1_v165 as __v167 in ??1 with
    | true ⇒ b2_v166 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v170 : bool) (b2_v171 : bool) ⇒
    match b1_v170 as __v172 in ??2 with
    | true ⇒ true | false ⇒ b2_v171
    end

program notb_i3 : bool → bool =
  fn (b_v174 : bool) ⇒
    match b_v174 as __v175 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v178 : nat) (y_v179 : nat) ⇒
    match x_v178 as __v180 in ??4 with
    | O ⇒ true
    | S x_v181 ⇒
      match y_v179 as __v182 in ??5 with
      | O ⇒ false | S y_v183 ⇒ (lten_i4 x_v181 y_v183)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v186 : nat) (y_v187 : nat) ⇒
    match x_v186 as __v188 in ??6 with
    | O ⇒
      match y_v187 as __v189 in ??8 with
      | O ⇒ true | S __v190 ⇒ false
      end
    | S x_v191 ⇒
      match y_v187 as __v192 in ??7 with
      | O ⇒ true | S y_v193 ⇒ (gten_i5 x_v191 y_v193)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v196 : nat) (y_v197 : nat) ⇒
    match x_v196 as __v198 in ??9 with
    | O ⇒
      match y_v197 as __v199 in ??11 with
      | O ⇒ false | S y_v200 ⇒ true
      end
    | S x_v201 ⇒
      match y_v197 as __v202 in ??10 with
      | O ⇒ false | S y_v203 ⇒ (ltn_i6 x_v201 y_v203)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v206 : nat) (y_v207 : nat) ⇒
    match x_v206 as __v208 in ??12 with
    | O ⇒ false
    | S x_v209 ⇒
      match y_v207 as __v210 in ??13 with
      | O ⇒ true | S y_v211 ⇒ (gtn_i7 x_v209 y_v211)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v214 : nat) (y_v215 : nat) ⇒
    match x_v214 as __v216 in ??14 with
    | O ⇒
      match y_v215 as __v217 in ??16 with
      | O ⇒ true | S __v218 ⇒ false
      end
    | S x_v219 ⇒
      match y_v215 as __v220 in ??15 with
      | O ⇒ false | S y_v221 ⇒ (eqn_i8 x_v219 y_v221)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v223 : nat) ⇒
    match x_v223 as __v224 in ??17 with
    | O ⇒ 0 | S x_v225 ⇒ x_v225
    end

program addn_i10 : nat → nat → nat =
  fn (x_v228 : nat) (y_v229 : nat) ⇒
    match x_v228 as __v230 in ??18 with
    | O ⇒ y_v229 | S x_v231 ⇒ (addn_i10 x_v231 y_v229).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v234 : nat) (y_v235 : nat) ⇒
    match y_v235 as __v236 in ??19 with
    | O ⇒ x_v234 | S y_v237 ⇒ (subn_i11 (pred_i9 x_v234) y_v237)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v240 : nat) (y_v241 : nat) ⇒
    match x_v240 as __v242 in ??20 with
    | O ⇒ 0 | S x_v243 ⇒ (addn_i10 y_v241 (muln_i12 x_v243 y_v241))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v246 : nat) (y_v247 : nat) ⇒
    match (ltn_i6 x_v246 y_v247) as __v248 in ??21 with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v246 y_v247) y_v247).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v251 : nat) (y_v252 : nat) ⇒
    (subn_i11 x_v251 (muln_i12 (divn_i13 x_v251 y_v252) y_v252))

inductive char_d1 : U =
| Char_c1 of (n_v253 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v254 : char_d1) (s_v255 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v258 : string_d2) (s2_v259 : string_d2) ⇒
    match s1_v258 as __v260 in ??22 with
    | EmptyString_c2  ⇒ s2_v259
    | String_c3 c_v261 s1_v262 ⇒
      (String_c3‹› c_v261 (cats_i15 s1_v262 s2_v259))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v264 : string_d2) ⇒
    match s_v264 as __v265 in ??23 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v266 s_v267 ⇒ (strlen_i16 s_v267).+1
    end

inductive list_d3 ‹s_s268, t_s269›
  (A_v270 : Type‹s_s268›) : Type‹t_s269›
=
| nil_c4 of
    ‹s_s271, t_s272› (A_v273 : Type‹s_s271›)
    : (list_d3‹s_s271, t_s272› A_v273)
| cons_c5 of
    ‹s_s274, t_s275› (A_v276 : Type‹s_s274›) (hd_v277 : A_v276)
    (tl_v278 : (list_d3‹s_s274, t_s275› A_v276))
    : (list_d3‹s_s274, t_s275› A_v276)

program len_i17 ‹s_s279, t_s280› :
  ∀ {A_v281 : Type‹s_s279›} →
    (list_d3‹??24, t_s280› A_v281) →
      nat ⊗ (list_d3‹??25, t_s280› A_v281)
=
  fn {A_v284 : Type‹s_s279›}
     (xs_v285 : (list_d3‹??24, t_s280› A_v284)) ⇒
    match xs_v285 as __v286 in ??26 with
    | nil_c4  ⇒ ⟨0, nil_c4‹??36, ??35›⟩
    | cons_c5 x_v287 xs_v288 ⇒
      match (len_i17‹??29, ??28› ??27 xs_v288) as __v289 in ??30 with
      | ⟨n_v290, xs_v291⟩ ⇒
        ⟨n_v290.+1, (cons_c5‹??33, ??32› x_v287 xs_v291)⟩
      end
    end

program append_i18 ‹s_s292, t_s293› :
  ∀ {A_v294 : Type‹s_s292›} →
    (list_d3‹??37, t_s293› A_v294) →
      (list_d3‹??38, t_s293› A_v294) ⊸ (list_d3‹??40, ??39› A_v294)
=
  fn {A_v297 : Type‹s_s292›}
     (xs_v298 : (list_d3‹??37, t_s293› A_v297)) ⇒
    ln (ys_v299 : ??41) ⇒
      match xs_v298 as __v300 in ??42 with
      | nil_c4  ⇒ ys_v299
      | cons_c5 x_v301 xs_v302 ⇒
        (cons_c5‹??48, ??47›
          x_v301 (append_i18‹??45, ??44› ??43 xs_v302 ys_v299))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v304 : unit) ⇒
    ⇑(b_v305 : bool) ⇒
      match b_v305 as __v306 in ??49 with
      | true ⇒ ⇓(__v307 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v309 : unit) ⇒
    ⇑(b_v310 : bool) ⇒
      match b_v310 as __v311 in ??50 with
      | true ⇒ ⇑(__v312 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v314 : unit) ⇒
    ⇑(b_v315 : bool) ⇒
      match b_v315 as __v316 in ??51 with
      | true ⇒ ⇑(__v317 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v319 : unit) ⇒
    let ch_v320 ⇐ open stdin in
    let ch_v321 ⇐ (send ch_v320 true) in
    let __v322 ⇐ recv ch_v321 in
    match __v322 as __v323 in ??52 with
    | ⟨s_v324, ch_v325⟩ ⇒
      let ch_v326 ⇐ (send ch_v325 false) in
      let __v327 ⇐ close ch_v326 in return s_v324
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v329 : string_d2) ⇒
    let ch_v330 ⇐ open stdout in
    let ch_v331 ⇐ (send ch_v330 true) in
    let ch_v332 ⇐ (send ch_v331 s_v329) in
    let ch_v333 ⇐ (send ch_v332 false) in close ch_v333

program prerr_i27 : string_d2 → IO unit =
  fn (s_v335 : string_d2) ⇒
    let ch_v336 ⇐ open stderr in
    let ch_v337 ⇐ (send ch_v336 true) in
    let ch_v338 ⇐ (send ch_v337 s_v335) in
    let ch_v339 ⇐ (send ch_v338 false) in close ch_v339

program id_i28 : nat → nat → nat =
  fn (n_v342 : nat) (acc_v343 : nat) ⇒
    match n_v342 as __v344 in ??53 with
    | O ⇒ acc_v343 | S n0_v345 ⇒ (id_i28 n0_v345 acc_v343.+1)
    end

program idM_i29 : nat → nat → IO nat =
  fn (n_v348 : nat) (acc_v349 : nat) ⇒
    match n_v348 as __v350 in ??54 with
    | O ⇒ return acc_v349 | S n0_v351 ⇒ (idM_i29 n0_v351 acc_v349.+1)
    end

program digits_i30 : (list_d3‹??55, U› ??56) =
  (cons_c5‹??89, ??88›
    "0"
    (cons_c5‹??86, ??85›
      "1"
      (cons_c5‹??83, ??82›
        "2"
        (cons_c5‹??80, ??79›
          "3"
          (cons_c5‹??77, ??76›
            "4"
            (cons_c5‹??74, ??73›
              "5"
              (cons_c5‹??71, ??70›
                "6"
                (cons_c5‹??68, ??67›
                  "7"
                  (cons_c5‹??65, ??64›
                    "8" (cons_c5‹??62, ??61› "9" nil_c4‹??59, ??58›))))))))))

program get_at_i31 :
  ∀ {A_v352 : U} →
    nat → (list_d3‹??90, U› A_v352) → A_v352 → A_v352
=
  fn {A_v356 : U} (n_v357 : nat) (xs_v358 : (list_d3‹??90, U› A_v356))
     (a_v359 : A_v356) ⇒
    match n_v357 as __v360 in ??91 with
    | O ⇒
      match xs_v358 as __v361 in ??94 with
      | nil_c4  ⇒ a_v359 | cons_c5 x_v362 __v363 ⇒ x_v362
      end
    | S n_v364 ⇒
      match xs_v358 as __v365 in ??92 with
      | nil_c4  ⇒ a_v359
      | cons_c5 __v366 xs_v367 ⇒ (get_at_i31 ??93 n_v364 xs_v367 a_v359)
      end
    end

program string_of_digit_i32 : nat → string_d2 =
  fn (n_v369 : nat) ⇒
    (get_at_i31 ??95 n_v369 digits_i30 EmptyString_c2‹›)

program string_of_nat_i33 : nat → string_d2 =
  fn (n_v371 : nat) ⇒
    let s_v372 = (string_of_digit_i32 (modn_i14 n_v371 10)) in
    let n_v373 = (divn_i13 n_v371 10) in
    match (ltn_i6 0 n_v373) as __v374 in ??96 with
    | true ⇒ (cats_i15 (string_of_nat_i33 n_v373) s_v372)
    | false ⇒ s_v372
    end

program main_i34 : IO unit = let x_v375 ⇐ (idM_i29 8000000 0) in return ()

trans01 success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v4210 : bool) (b2_v4211 : bool) ⇒
    match b1_v4210 as __v4212 in bool with
    | true ⇒ b2_v4211 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v4215 : bool) (b2_v4216 : bool) ⇒
    match b1_v4215 as __v4217 in bool with
    | true ⇒ true | false ⇒ b2_v4216
    end

program notb_i3 : bool → bool =
  fn (b_v4219 : bool) ⇒
    match b_v4219 as __v4220 in bool with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v4223 : nat) (y_v4224 : nat) ⇒
    match x_v4223 as __v4225 in bool with
    | O ⇒ true
    | S x_v4226 ⇒
      match y_v4224 as __v4227 in bool with
      | O ⇒ false | S y_v4228 ⇒ (lten_i4 x_v4226 y_v4228)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v4231 : nat) (y_v4232 : nat) ⇒
    match x_v4231 as __v4233 in bool with
    | O ⇒
      match y_v4232 as __v4234 in bool with
      | O ⇒ true | S __v4235 ⇒ false
      end
    | S x_v4236 ⇒
      match y_v4232 as __v4237 in bool with
      | O ⇒ true | S y_v4238 ⇒ (gten_i5 x_v4236 y_v4238)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v4241 : nat) (y_v4242 : nat) ⇒
    match x_v4241 as __v4243 in bool with
    | O ⇒
      match y_v4242 as __v4244 in bool with
      | O ⇒ false | S y_v4245 ⇒ true
      end
    | S x_v4246 ⇒
      match y_v4242 as __v4247 in bool with
      | O ⇒ false | S y_v4248 ⇒ (ltn_i6 x_v4246 y_v4248)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v4251 : nat) (y_v4252 : nat) ⇒
    match x_v4251 as __v4253 in bool with
    | O ⇒ false
    | S x_v4254 ⇒
      match y_v4252 as __v4255 in bool with
      | O ⇒ true | S y_v4256 ⇒ (gtn_i7 x_v4254 y_v4256)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v4259 : nat) (y_v4260 : nat) ⇒
    match x_v4259 as __v4261 in bool with
    | O ⇒
      match y_v4260 as __v4262 in bool with
      | O ⇒ true | S __v4263 ⇒ false
      end
    | S x_v4264 ⇒
      match y_v4260 as __v4265 in bool with
      | O ⇒ false | S y_v4266 ⇒ (eqn_i8 x_v4264 y_v4266)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v4268 : nat) ⇒
    match x_v4268 as __v4269 in nat with
    | O ⇒ 0 | S x_v4270 ⇒ x_v4270
    end

program addn_i10 : nat → nat → nat =
  fn (x_v4273 : nat) (y_v4274 : nat) ⇒
    match x_v4273 as __v4275 in nat with
    | O ⇒ y_v4274 | S x_v4276 ⇒ (addn_i10 x_v4276 y_v4274).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v4279 : nat) (y_v4280 : nat) ⇒
    match y_v4280 as __v4281 in nat with
    | O ⇒ x_v4279 | S y_v4282 ⇒ (subn_i11 (pred_i9 x_v4279) y_v4282)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v4285 : nat) (y_v4286 : nat) ⇒
    match x_v4285 as __v4287 in nat with
    | O ⇒ 0 | S x_v4288 ⇒ (addn_i10 y_v4286 (muln_i12 x_v4288 y_v4286))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v4291 : nat) (y_v4292 : nat) ⇒
    match (ltn_i6 x_v4291 y_v4292) as __v4293 in nat with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v4291 y_v4292) y_v4292).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v4296 : nat) (y_v4297 : nat) ⇒
    (subn_i11 x_v4296 (muln_i12 (divn_i13 x_v4296 y_v4297) y_v4297))

inductive char_d1 : U =
| Char_c1 of (n_v4298 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v4299 : char_d1) (s_v4300 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v4303 : string_d2) (s2_v4304 : string_d2) ⇒
    match s1_v4303 as __v4305 in string_d2 with
    | EmptyString_c2  ⇒ s2_v4304
    | String_c3 c_v4306 s1_v4307 ⇒
      (String_c3‹› c_v4306 (cats_i15 s1_v4307 s2_v4304))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v4309 : string_d2) ⇒
    match s_v4309 as __v4310 in nat with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v4311 s_v4312 ⇒ (strlen_i16 s_v4312).+1
    end

inductive list_d3 ‹s_s4313, t_s4314›
  (A_v4315 : Type‹s_s4313›) : Type‹t_s4314›
=
| nil_c4 of
    ‹s_s4316, t_s4317› (A_v4318 : Type‹s_s4316›)
    : (list_d3‹s_s4316, t_s4317› A_v4318)
| cons_c5 of
    ‹s_s4319, t_s4320› (A_v4321 : Type‹s_s4319›) (hd_v4322 : A_v4321)
    (tl_v4323 : (list_d3‹s_s4319, t_s4320› A_v4321))
    : (list_d3‹s_s4319, t_s4320› A_v4321)

program len_i17 ‹s_s4324, t_s4325› :
  ∀ {A_v4326 : Type‹s_s4324›} →
    (list_d3‹s_s4324, t_s4325› A_v4326) →
      nat ⊗ (list_d3‹s_s4324, t_s4325› A_v4326)
=
  fn {A_v4329 : Type‹s_s4324›}
     (xs_v4330 : (list_d3‹s_s4324, t_s4325› A_v4329)) ⇒
    match xs_v4330 as __v4331 in
      nat ⊗ (list_d3‹s_s4324, t_s4325› A_v4329) with
    | nil_c4  ⇒ ⟨0, nil_c4‹s_s4324, t_s4325›⟩
    | cons_c5 x_v4333 xs_v4334 ⇒
      match (len_i17‹s_s4324, t_s4325› A_v4329 xs_v4334) as __v4335 in
        nat ⊗ (list_d3‹s_s4324, t_s4325› A_v4329) with
      | ⟨n_v4337, xs_v4338⟩ ⇒
        ⟨n_v4337.+1, (cons_c5‹s_s4324, t_s4325› x_v4333 xs_v4338)⟩
      end
    end

program append_i18 ‹s_s4339, t_s4340› :
  ∀ {A_v4341 : Type‹s_s4339›} →
    (list_d3‹s_s4339, t_s4340› A_v4341) →
      (list_d3‹s_s4339, t_s4340› A_v4341) ⊸
        (list_d3‹s_s4339, t_s4340› A_v4341)
=
  fn {A_v4344 : Type‹s_s4339›}
     (xs_v4345 : (list_d3‹s_s4339, t_s4340› A_v4344)) ⇒
    ln (ys_v4346 : (list_d3‹s_s4339, t_s4340› A_v4344)) ⇒
      match xs_v4345 as __v4347 in
        (list_d3‹s_s4339, t_s4340› A_v4344) with
      | nil_c4  ⇒ ys_v4346
      | cons_c5 x_v4348 xs_v4349 ⇒
        (cons_c5‹s_s4339, t_s4340›
          x_v4348
          (append_i18‹s_s4339, t_s4340› A_v4344 xs_v4349 ys_v4346))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v4351 : unit) ⇒
    ⇑(b_v4352 : bool) ⇒
      match b_v4352 as __v4353 in proto with
      | true ⇒ ⇓(__v4354 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v4356 : unit) ⇒
    ⇑(b_v4357 : bool) ⇒
      match b_v4357 as __v4358 in proto with
      | true ⇒ ⇑(__v4359 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v4361 : unit) ⇒
    ⇑(b_v4362 : bool) ⇒
      match b_v4362 as __v4363 in proto with
      | true ⇒ ⇑(__v4364 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v4366 : unit) ⇒
    let ch_v4367 ⇐ open stdin in
    let ch_v4368 ⇐ (send ch_v4367 true) in
    let __v4369 ⇐ recv ch_v4368 in
    match __v4369 as __v4370 in IO string_d2 with
    | ⟨s_v4371, ch_v4372⟩ ⇒
      let ch_v4373 ⇐ (send ch_v4372 false) in
      let __v4374 ⇐ close ch_v4373 in return s_v4371
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v4376 : string_d2) ⇒
    let ch_v4377 ⇐ open stdout in
    let ch_v4378 ⇐ (send ch_v4377 true) in
    let ch_v4379 ⇐ (send ch_v4378 s_v4376) in
    let ch_v4380 ⇐ (send ch_v4379 false) in close ch_v4380

program prerr_i27 : string_d2 → IO unit =
  fn (s_v4382 : string_d2) ⇒
    let ch_v4383 ⇐ open stderr in
    let ch_v4384 ⇐ (send ch_v4383 true) in
    let ch_v4385 ⇐ (send ch_v4384 s_v4382) in
    let ch_v4386 ⇐ (send ch_v4385 false) in close ch_v4386

program id_i28 : nat → nat → nat =
  fn (n_v4389 : nat) (acc_v4390 : nat) ⇒
    match n_v4389 as __v4391 in nat with
    | O ⇒ acc_v4390 | S n0_v4392 ⇒ (id_i28 n0_v4392 acc_v4390.+1)
    end

program idM_i29 : nat → nat → IO nat =
  fn (n_v4395 : nat) (acc_v4396 : nat) ⇒
    match n_v4395 as __v4397 in IO nat with
    | O ⇒ return acc_v4396 | S n0_v4398 ⇒ (idM_i29 n0_v4398 acc_v4396.+1)
    end

program digits_i30 : (list_d3‹U, U› string_d2) =
  (cons_c5‹U, U›
    "0"
    (cons_c5‹U, U›
      "1"
      (cons_c5‹U, U›
        "2"
        (cons_c5‹U, U›
          "3"
          (cons_c5‹U, U›
            "4"
            (cons_c5‹U, U›
              "5"
              (cons_c5‹U, U›
                "6"
                (cons_c5‹U, U›
                  "7"
                  (cons_c5‹U, U›
                    "8" (cons_c5‹U, U› "9" nil_c4‹U, U›))))))))))

program get_at_i31 :
  ∀ {A_v4399 : U} →
    nat → (list_d3‹U, U› A_v4399) → A_v4399 → A_v4399
=
  fn {A_v4403 : U} (n_v4404 : nat) (xs_v4405 : (list_d3‹U, U› A_v4403))
     (a_v4406 : A_v4403) ⇒
    match n_v4404 as __v4407 in A_v4403 with
    | O ⇒
      match xs_v4405 as __v4408 in A_v4403 with
      | nil_c4  ⇒ a_v4406 | cons_c5 x_v4409 __v4410 ⇒ x_v4409
      end
    | S n_v4411 ⇒
      match xs_v4405 as __v4412 in A_v4403 with
      | nil_c4  ⇒ a_v4406
      | cons_c5 __v4413 xs_v4414 ⇒
        (get_at_i31 A_v4403 n_v4411 xs_v4414 a_v4406)
      end
    end

program string_of_digit_i32 : nat → string_d2 =
  fn (n_v4416 : nat) ⇒
    (get_at_i31 string_d2 n_v4416 digits_i30 EmptyString_c2‹›)

program string_of_nat_i33 : nat → string_d2 =
  fn (n_v4418 : nat) ⇒
    let s_v4419 = (string_of_digit_i32 (modn_i14 n_v4418 10)) in
    let n_v4420 = (divn_i13 n_v4418 10) in
    match (ltn_i6 0 n_v4420) as __v4421 in string_d2 with
    | true ⇒ (cats_i15 (string_of_nat_i33 n_v4420) s_v4419)
    | false ⇒ s_v4419
    end

program main_i34 : IO unit = let x_v4422 ⇐ (idM_i29 8000000 0) in return ()

trans1e success--------------------------

def andb_i1 =
  fn b1_v4700 b2_v4701 ⇒
    match b1_v4700 with
    | true ⇒ b2_v4701 | false ⇒ false
    end

def orb_i2 =
  fn b1_v4702 b2_v4703 ⇒
    match b1_v4702 with
    | true ⇒ true | false ⇒ b2_v4703
    end

def notb_i3 =
  fn b_v4704 ⇒ match b_v4704 with
                 | true ⇒ false | false ⇒ true
                 end

def lten_i4 =
  fn x_v4705 y_v4706 ⇒
    match x_v4705 with
    | O ⇒ true
    | S x_v4707 ⇒
      match y_v4706 with
      | O ⇒ false | S y_v4708 ⇒ ((lten_i4 x_v4707) y_v4708)
      end
    end

def gten_i5 =
  fn x_v4709 y_v4710 ⇒
    match x_v4709 with
    | O ⇒ match y_v4710 with
            | O ⇒ true | S __v4711 ⇒ false
            end
    | S x_v4712 ⇒
      match y_v4710 with
      | O ⇒ true | S y_v4713 ⇒ ((gten_i5 x_v4712) y_v4713)
      end
    end

def ltn_i6 =
  fn x_v4714 y_v4715 ⇒
    match x_v4714 with
    | O ⇒ match y_v4715 with
            | O ⇒ false | S y_v4716 ⇒ true
            end
    | S x_v4717 ⇒
      match y_v4715 with
      | O ⇒ false | S y_v4718 ⇒ ((ltn_i6 x_v4717) y_v4718)
      end
    end

def gtn_i7 =
  fn x_v4719 y_v4720 ⇒
    match x_v4719 with
    | O ⇒ false
    | S x_v4721 ⇒
      match y_v4720 with
      | O ⇒ true | S y_v4722 ⇒ ((gtn_i7 x_v4721) y_v4722)
      end
    end

def eqn_i8 =
  fn x_v4723 y_v4724 ⇒
    match x_v4723 with
    | O ⇒ match y_v4724 with
            | O ⇒ true | S __v4725 ⇒ false
            end
    | S x_v4726 ⇒
      match y_v4724 with
      | O ⇒ false | S y_v4727 ⇒ ((eqn_i8 x_v4726) y_v4727)
      end
    end

def pred_i9 =
  fn x_v4728 ⇒ match x_v4728 with
                 | O ⇒ 0 | S x_v4729 ⇒ x_v4729
                 end

def addn_i10 =
  fn x_v4730 y_v4731 ⇒
    match x_v4730 with
    | O ⇒ y_v4731 | S x_v4732 ⇒ ((addn_i10 x_v4732) y_v4731).+1
    end

def subn_i11 =
  fn x_v4733 y_v4734 ⇒
    match y_v4734 with
    | O ⇒ x_v4733 | S y_v4735 ⇒ ((subn_i11 (pred_i9 x_v4733)) y_v4735)
    end

def muln_i12 =
  fn x_v4736 y_v4737 ⇒
    match x_v4736 with
    | O ⇒ 0
    | S x_v4738 ⇒ ((addn_i10 y_v4737) ((muln_i12 x_v4738) y_v4737))
    end

def divn_i13 =
  fn x_v4739 y_v4740 ⇒
    match ((ltn_i6 x_v4739) y_v4740) with
    | true ⇒ 0
    | false ⇒ ((divn_i13 ((subn_i11 x_v4739) y_v4740)) y_v4740).+1
    end

def modn_i14 =
  fn x_v4741 y_v4742 ⇒
    ((subn_i11 x_v4741) ((muln_i12 ((divn_i13 x_v4741) y_v4742)) y_v4742))

data char_d1 =
| Char_c1 of size(1)

data string_d2 =
| EmptyString_c2 of size(0) | String_c3 of size(2)

def cats_i15 =
  fn s1_v4743 s2_v4744 ⇒
    match s1_v4743 with
    | EmptyString_c2  ⇒ s2_v4744
    | String_c3 c_v4745 s1_v4746 ⇒
      (String_c3 c_v4745 ((cats_i15 s1_v4746) s2_v4744))
    end

def strlen_i16 =
  fn s_v4747 ⇒
    match s_v4747 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v4748 s_v4749 ⇒ (strlen_i16 s_v4749).+1
    end

data listUU_d7 =
| nilUU_c12 of size(0) | consUU_c13 of size(2)

data listUL_d6 =
| nilUL_c10 of size(0) | consUL_c11 of size(2)

data listLU_d5 =
| nilLU_c8 of size(0)

data listLL_d4 =
| nilLL_c6 of size(0) | consLL_c7 of size(2)

def lenUU_i38 =
  fn A_v4750 xs_v4751 ⇒
    match xs_v4751 with
    | nilUU_c12  ⇒ (0, nilUU_c12)
    | consUU_c13 x_v4752 xs_v4753 ⇒
      match ((lenUU_i38 NULL) xs_v4753) with
      | (n_v4754, xs_v4755) ⇒ (n_v4754.+1, (consUU_c13 x_v4752 xs_v4755))
      end
    end

def lenUL_i37 =
  fn A_v4756 xs_v4757 ⇒
    match xs_v4757 with
    | nilUL_c10  ⇒ (0, nilUL_c10)
    | consUL_c11 x_v4758 xs_v4759 ⇒
      match ((lenUL_i37 NULL) xs_v4759) with
      | (n_v4760, xs_v4761) ⇒ (n_v4760.+1, (consUL_c11 x_v4758 xs_v4761))
      end
    end

def lenLL_i35 =
  fn A_v4762 xs_v4763 ⇒
    match xs_v4763 with
    | nilLL_c6  ⇒ (0, nilLL_c6)
    | consLL_c7 x_v4764 xs_v4765 ⇒
      match ((lenLL_i35 NULL) xs_v4765) with
      | (n_v4766, xs_v4767) ⇒ (n_v4766.+1, (consLL_c7 x_v4764 xs_v4767))
      end
    end

def appendUU_i42 =
  fn A_v4768 xs_v4769 ⇒
    ln ys_v4770 ⇒
      match xs_v4769 with
      | nilUU_c12  ⇒ ys_v4770
      | consUU_c13 x_v4771 xs_v4772 ⇒
        (consUU_c13 x_v4771 (((appendUU_i42 NULL) xs_v4772) ys_v4770))
      end

def appendUL_i41 =
  fn A_v4773 xs_v4774 ⇒
    ln ys_v4775 ⇒
      match xs_v4774 with
      | nilUL_c10  ⇒ ys_v4775
      | consUL_c11 x_v4776 xs_v4777 ⇒
        (consUL_c11 x_v4776 (((appendUL_i41 NULL) xs_v4777) ys_v4775))
      end

def appendLL_i39 =
  fn A_v4778 xs_v4779 ⇒
    ln ys_v4780 ⇒
      match xs_v4779 with
      | nilLL_c6  ⇒ ys_v4780
      | consLL_c7 x_v4781 xs_v4782 ⇒
        (consLL_c7 x_v4781 (((appendLL_i39 NULL) xs_v4782) ys_v4780))
      end

def readline_i25 =
  fn __v4783 ⇒
    let ch_v4784 ⇐ open stdin in
    let ch_v4785 ⇐ (send ch_v4784 true) in
    let __v4786 ⇐ recv ch_v4785 in
    match __v4786 with
    | (s_v4787, ch_v4788) ⇒
      let ch_v4789 ⇐ (send ch_v4788 false) in
      let __v4790 ⇐ close⇑ ch_v4789 in return s_v4787
    end

def print_i26 =
  fn s_v4791 ⇒
    let ch_v4792 ⇐ open stdout in
    let ch_v4793 ⇐ (send ch_v4792 true) in
    let ch_v4794 ⇐ (send ch_v4793 s_v4791) in
    let ch_v4795 ⇐ (send ch_v4794 false) in close⇑ ch_v4795

def prerr_i27 =
  fn s_v4796 ⇒
    let ch_v4797 ⇐ open stderr in
    let ch_v4798 ⇐ (send ch_v4797 true) in
    let ch_v4799 ⇐ (send ch_v4798 s_v4796) in
    let ch_v4800 ⇐ (send ch_v4799 false) in close⇑ ch_v4800

def id_i28 =
  fn n_v4801 acc_v4802 ⇒
    match n_v4801 with
    | O ⇒ acc_v4802 | S n0_v4803 ⇒ ((id_i28 n0_v4803) acc_v4802.+1)
    end

def idM_i29 =
  fn n_v4804 acc_v4805 ⇒
    match n_v4804 with
    | O ⇒ return acc_v4805
    | S n0_v4806 ⇒ ((idM_i29 n0_v4806) acc_v4805.+1)
    end

def digits_i30 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

def get_at_i31 =
  fn A_v4807 n_v4808 xs_v4809 a_v4810 ⇒
    match n_v4808 with
    | O ⇒
      match xs_v4809 with
      | nilUU_c12  ⇒ a_v4810 | consUU_c13 x_v4811 __v4812 ⇒ x_v4811
      end
    | S n_v4813 ⇒
      match xs_v4809 with
      | nilUU_c12  ⇒ a_v4810
      | consUU_c13 __v4814 xs_v4815 ⇒
        ((((get_at_i31 NULL) n_v4813) xs_v4815) a_v4810)
      end
    end

def string_of_digit_i32 =
  fn n_v4816 ⇒ ((((get_at_i31 NULL) n_v4816) digits_i30) EmptyString_c2)

def string_of_nat_i33 =
  fn n_v4817 ⇒
    let s_v4818 = (string_of_digit_i32 ((modn_i14 n_v4817) 10)) in
    let n_v4819 = ((divn_i13 n_v4817) 10) in
    match ((ltn_i6 0) n_v4819) with
    | true ⇒ ((cats_i15 (string_of_nat_i33 n_v4819)) s_v4818)
    | false ⇒ s_v4818
    end

main = let x_v4820 ⇐ ((idM_i29 8000000) 0) in return ()

trans12 success--------------------------

fun andb_i1(b1_v4993, b2_v4994) = if b1_v4993 then
                                    b2_v4994
                                  else
                                    0

val andbclo_i43 = fn b1_v4995 b2_v4996 ⇒ andb_i1(b1_v4995, b2_v4996)

fun orb_i2(b1_v4997, b2_v4998) = if b1_v4997 then
                                   1
                                 else
                                   b2_v4998

val orbclo_i44 = fn b1_v4999 b2_v5000 ⇒ orb_i2(b1_v4999, b2_v5000)

fun notb_i3(b_v5001) = if b_v5001 then
                         0
                       else
                         1

val notbclo_i45 = fn b_v5002 ⇒ notb_i3(b_v5002)

fun lten_i4(x_v5003, y_v5004) =
  let __v5005 = x_v5003 in
  if __v5005 then
    let x_v5006 = __v5005.-1 in
    let __v5007 = y_v5004 in
    if __v5007 then
      let y_v5008 = __v5007.-1 in lten_i4(x_v5006, y_v5008)
    else
      0
  else
    1

val ltenclo_i46 = fn x_v5009 y_v5010 ⇒ lten_i4(x_v5009, y_v5010)

fun gten_i5(x_v5011, y_v5012) =
  let __v5013 = x_v5011 in
  if __v5013 then
    let x_v5014 = __v5013.-1 in
    let __v5015 = y_v5012 in
    if __v5015 then
      let y_v5016 = __v5015.-1 in gten_i5(x_v5014, y_v5016)
    else
      1
  else
    let __v5017 = y_v5012 in
    if __v5017 then
      let __v5018 = __v5017.-1 in 0
    else
      1

val gtenclo_i47 = fn x_v5019 y_v5020 ⇒ gten_i5(x_v5019, y_v5020)

fun ltn_i6(x_v5021, y_v5022) =
  let __v5023 = x_v5021 in
  if __v5023 then
    let x_v5024 = __v5023.-1 in
    let __v5025 = y_v5022 in
    if __v5025 then
      let y_v5026 = __v5025.-1 in ltn_i6(x_v5024, y_v5026)
    else
      0
  else
    let __v5027 = y_v5022 in
    if __v5027 then
      let y_v5028 = __v5027.-1 in 1
    else
      0

val ltnclo_i48 = fn x_v5029 y_v5030 ⇒ ltn_i6(x_v5029, y_v5030)

fun gtn_i7(x_v5031, y_v5032) =
  let __v5033 = x_v5031 in
  if __v5033 then
    let x_v5034 = __v5033.-1 in
    let __v5035 = y_v5032 in
    if __v5035 then
      let y_v5036 = __v5035.-1 in gtn_i7(x_v5034, y_v5036)
    else
      1
  else
    0

val gtnclo_i49 = fn x_v5037 y_v5038 ⇒ gtn_i7(x_v5037, y_v5038)

fun eqn_i8(x_v5039, y_v5040) =
  let __v5041 = x_v5039 in
  if __v5041 then
    let x_v5042 = __v5041.-1 in
    let __v5043 = y_v5040 in
    if __v5043 then
      let y_v5044 = __v5043.-1 in eqn_i8(x_v5042, y_v5044)
    else
      0
  else
    let __v5045 = y_v5040 in
    if __v5045 then
      let __v5046 = __v5045.-1 in 0
    else
      1

val eqnclo_i50 = fn x_v5047 y_v5048 ⇒ eqn_i8(x_v5047, y_v5048)

fun pred_i9(x_v5049) =
  let __v5050 = x_v5049 in
  if __v5050 then
    let x_v5051 = __v5050.-1 in x_v5051
  else
    0

val predclo_i51 = fn x_v5052 ⇒ pred_i9(x_v5052)

fun addn_i10(x_v5053, y_v5054) =
  let __v5055 = x_v5053 in
  if __v5055 then
    let x_v5056 = __v5055.-1 in addn_i10(x_v5056, y_v5054).+1
  else
    y_v5054

val addnclo_i52 = fn x_v5057 y_v5058 ⇒ addn_i10(x_v5057, y_v5058)

fun subn_i11(x_v5059, y_v5060) =
  let __v5061 = y_v5060 in
  if __v5061 then
    let y_v5062 = __v5061.-1 in subn_i11(pred_i9(x_v5059), y_v5062)
  else
    x_v5059

val subnclo_i53 = fn x_v5063 y_v5064 ⇒ subn_i11(x_v5063, y_v5064)

fun muln_i12(x_v5065, y_v5066) =
  let __v5067 = x_v5065 in
  if __v5067 then
    let x_v5068 = __v5067.-1 in addn_i10(y_v5066, muln_i12(x_v5068, y_v5066))
  else
    0

val mulnclo_i54 = fn x_v5069 y_v5070 ⇒ muln_i12(x_v5069, y_v5070)

fun divn_i13(x_v5071, y_v5072) =
  if ltn_i6(x_v5071, y_v5072) then
    0
  else
    divn_i13(subn_i11(x_v5071, y_v5072), y_v5072).+1

val divnclo_i55 = fn x_v5073 y_v5074 ⇒ divn_i13(x_v5073, y_v5074)

fun modn_i14(x_v5075, y_v5076) =
  subn_i11(x_v5075, muln_i12(divn_i13(x_v5075, y_v5076), y_v5076))

val modnclo_i56 = fn x_v5077 y_v5078 ⇒ modn_i14(x_v5077, y_v5078)

fun cats_i15(s1_v5079, s2_v5080) =
  match s1_v5079 with
  | EmptyString_c2  ⇒ s2_v5080
  | String_c3 c_v5081 s1_v5082 ⇒
    (String_c3 c_v5081 cats_i15(s1_v5082, s2_v5080))
  end

val catsclo_i57 = fn s1_v5083 s2_v5084 ⇒ cats_i15(s1_v5083, s2_v5084)

fun strlen_i16(s_v5085) =
  match s_v5085 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v5086 s_v5087 ⇒ strlen_i16(s_v5087).+1
  end

val strlenclo_i58 = fn s_v5088 ⇒ strlen_i16(s_v5088)

fun lenUU_i38(A_v5089, xs_v5090) =
  match xs_v5090 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v5091 xs_v5092 ⇒
    match lenUU_i38(NULL, xs_v5092) with
    | (n_v5093, xs_v5094) ⇒ (n_v5093.+1, (consUU_c13 x_v5091 xs_v5094))
    end
  end

val lenUUclo_i59 = fn A_v5095 xs_v5096 ⇒ lenUU_i38(A_v5095, xs_v5096)

fun lenUL_i37(A_v5097, xs_v5098) =
  match xs_v5098 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v5099 xs_v5100 ⇒
    match lenUL_i37(NULL, xs_v5100) with
    | (n_v5101, xs_v5102) ⇒ (n_v5101.+1, (consUL_c11 x_v5099 xs_v5102))
    end
  end

val lenULclo_i60 = fn A_v5103 xs_v5104 ⇒ lenUL_i37(A_v5103, xs_v5104)

fun lenLL_i35(A_v5105, xs_v5106) =
  match xs_v5106 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v5107 xs_v5108 ⇒
    match lenLL_i35(NULL, xs_v5108) with
    | (n_v5109, xs_v5110) ⇒ (n_v5109.+1, (consLL_c7 x_v5107 xs_v5110))
    end
  end

val lenLLclo_i61 = fn A_v5111 xs_v5112 ⇒ lenLL_i35(A_v5111, xs_v5112)

fun appendUU_i42(A_v5113, xs_v5114, ys_v5115) =
  match xs_v5114 with
  | nilUU_c12  ⇒ ys_v5115
  | consUU_c13 x_v5116 xs_v5117 ⇒
    (consUU_c13 x_v5116 appendUU_i42(NULL, xs_v5117, ys_v5115))
  end

val appendUUclo_i62 =
  fn A_v5118 xs_v5119 ⇒
    ln ys_v5120 ⇒ appendUU_i42(A_v5118, xs_v5119, ys_v5120)

fun appendUL_i41(A_v5121, xs_v5122, ys_v5123) =
  match xs_v5122 with
  | nilUL_c10  ⇒ ys_v5123
  | consUL_c11 x_v5124 xs_v5125 ⇒
    (consUL_c11 x_v5124 appendUL_i41(NULL, xs_v5125, ys_v5123))
  end

val appendULclo_i63 =
  fn A_v5126 xs_v5127 ⇒
    ln ys_v5128 ⇒ appendUL_i41(A_v5126, xs_v5127, ys_v5128)

fun appendLL_i39(A_v5129, xs_v5130, ys_v5131) =
  match xs_v5130 with
  | nilLL_c6  ⇒ ys_v5131
  | consLL_c7 x_v5132 xs_v5133 ⇒
    (consLL_c7 x_v5132 appendLL_i39(NULL, xs_v5133, ys_v5131))
  end

val appendLLclo_i64 =
  fn A_v5134 xs_v5135 ⇒
    ln ys_v5136 ⇒ appendLL_i39(A_v5134, xs_v5135, ys_v5136)

fun readline_i25(__v5137) =
  ln __v5138 ⇒
    let ch_v5139 = (ln __v5140 ⇒ open stdin) NULL in
    let ch_v5141 =
      ((fn x_v5142 ⇒ ln __v5143 ⇒ send(ch_v5139, x_v5142)) 1) NULL
    in
    let __v5144 = (ln __v5145 ⇒ recv(ch_v5141)) NULL in
    (match __v5144 with
     | (s_v5146, ch_v5147) ⇒
       ln __v5148 ⇒
         let ch_v5149 =
           ((fn x_v5150 ⇒ ln __v5151 ⇒ send(ch_v5147, x_v5150)) 0) NULL
         in
         let __v5152 = (ln __v5153 ⇒ let __v5154 = ch_v5149 in NULL) NULL
         in (ln __v5155 ⇒ s_v5146) NULL
     end) NULL

val readlineclo_i65 = fn __v5156 ⇒ readline_i25(__v5156)

fun print_i26(s_v5157) =
  ln __v5158 ⇒
    let ch_v5159 = (ln __v5160 ⇒ open stdout) NULL in
    let ch_v5161 =
      ((fn x_v5162 ⇒ ln __v5163 ⇒ send(ch_v5159, x_v5162)) 1) NULL
    in
    let ch_v5164 =
      ((fn x_v5165 ⇒ ln __v5166 ⇒ send(ch_v5161, x_v5165)) s_v5157) NULL
    in
    let ch_v5167 =
      ((fn x_v5168 ⇒ ln __v5169 ⇒ send(ch_v5164, x_v5168)) 0) NULL
    in (ln __v5170 ⇒ let __v5171 = ch_v5167 in NULL) NULL

val printclo_i66 = fn s_v5172 ⇒ print_i26(s_v5172)

fun prerr_i27(s_v5173) =
  ln __v5174 ⇒
    let ch_v5175 = (ln __v5176 ⇒ open stderr) NULL in
    let ch_v5177 =
      ((fn x_v5178 ⇒ ln __v5179 ⇒ send(ch_v5175, x_v5178)) 1) NULL
    in
    let ch_v5180 =
      ((fn x_v5181 ⇒ ln __v5182 ⇒ send(ch_v5177, x_v5181)) s_v5173) NULL
    in
    let ch_v5183 =
      ((fn x_v5184 ⇒ ln __v5185 ⇒ send(ch_v5180, x_v5184)) 0) NULL
    in (ln __v5186 ⇒ let __v5187 = ch_v5183 in NULL) NULL

val prerrclo_i67 = fn s_v5188 ⇒ prerr_i27(s_v5188)

fun id_i28(n_v5189, acc_v5190) =
  let __v5191 = n_v5189 in
  if __v5191 then
    let n0_v5192 = __v5191.-1 in id_i28(n0_v5192, acc_v5190.+1)
  else
    acc_v5190

val idclo_i68 = fn n_v5193 acc_v5194 ⇒ id_i28(n_v5193, acc_v5194)

fun idM_i29(n_v5195, acc_v5196) =
  let __v5197 = n_v5195 in
  if __v5197 then
    let n0_v5198 = __v5197.-1 in idM_i29(n0_v5198, acc_v5196.+1)
  else
    ln __v5199 ⇒ acc_v5196

val idMclo_i69 = fn n_v5200 acc_v5201 ⇒ idM_i29(n_v5200, acc_v5201)

val digits_i30 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i31(A_v5202, n_v5203, xs_v5204, a_v5205) =
  let __v5206 = n_v5203 in
  if __v5206 then
    let n_v5207 = __v5206.-1 in
    match xs_v5204 with
    | nilUU_c12  ⇒ a_v5205
    | consUU_c13 __v5208 xs_v5209 ⇒
      get_at_i31(NULL, n_v5207, xs_v5209, a_v5205)
    end
  else
    match xs_v5204 with
    | nilUU_c12  ⇒ a_v5205 | consUU_c13 x_v5210 __v5211 ⇒ x_v5210
    end

val get_atclo_i70 =
  fn A_v5212 n_v5213 xs_v5214 a_v5215 ⇒
    get_at_i31(A_v5212, n_v5213, xs_v5214, a_v5215)

fun string_of_digit_i32(n_v5216) =
  get_at_i31(NULL, n_v5216, digits_i30, EmptyString_c2)

val string_of_digitclo_i71 = fn n_v5217 ⇒ string_of_digit_i32(n_v5217)

fun string_of_nat_i33(n_v5218) =
  let s_v5219 = string_of_digit_i32(modn_i14(n_v5218, 10)) in
  let n_v5220 = divn_i13(n_v5218, 10) in
  if ltn_i6(0, n_v5220) then
    cats_i15(string_of_nat_i33(n_v5220), s_v5219)
  else
    s_v5219

val string_of_natclo_i72 = fn n_v5221 ⇒ string_of_nat_i33(n_v5221)

main =
  (ln __v5222 ⇒
     let x_v5223 = (idM_i29(8000000, 0)) NULL in (ln __v5224 ⇒ NULL) NULL)
    NULL

trans23 success--------------------------

fun andb_i1(b1_v5488, b2_v5489) = if b1_v5488 then
                                    b2_v5489
                                  else
                                    0

val andbclo_i43 = fn b1_v5490 b2_v5491 ⇒ andb_i1(b1_v5490, b2_v5491)

fun orb_i2(b1_v5492, b2_v5493) = if b1_v5492 then
                                   1
                                 else
                                   b2_v5493

val orbclo_i44 = fn b1_v5494 b2_v5495 ⇒ orb_i2(b1_v5494, b2_v5495)

fun notb_i3(b_v5496) = if b_v5496 then
                         0
                       else
                         1

val notbclo_i45 = fn b_v5497 ⇒ notb_i3(b_v5497)

fun lten_i4(x_v5498, y_v5499) =
  if x_v5498 then
    if y_v5499 then
      lten_i4(x_v5498.-1, y_v5499.-1)
    else
      0
  else
    1

val ltenclo_i46 = fn x_v5500 y_v5501 ⇒ lten_i4(x_v5500, y_v5501)

fun gten_i5(x_v5502, y_v5503) =
  if x_v5502 then
    if y_v5503 then
      gten_i5(x_v5502.-1, y_v5503.-1)
    else
      1
  else
    if y_v5503 then
      0
    else
      1

val gtenclo_i47 = fn x_v5504 y_v5505 ⇒ gten_i5(x_v5504, y_v5505)

fun ltn_i6(x_v5506, y_v5507) =
  if x_v5506 then
    if y_v5507 then
      ltn_i6(x_v5506.-1, y_v5507.-1)
    else
      0
  else
    if y_v5507 then
      1
    else
      0

val ltnclo_i48 = fn x_v5508 y_v5509 ⇒ ltn_i6(x_v5508, y_v5509)

fun gtn_i7(x_v5510, y_v5511) =
  if x_v5510 then
    if y_v5511 then
      gtn_i7(x_v5510.-1, y_v5511.-1)
    else
      1
  else
    0

val gtnclo_i49 = fn x_v5512 y_v5513 ⇒ gtn_i7(x_v5512, y_v5513)

fun eqn_i8(x_v5514, y_v5515) =
  if x_v5514 then
    if y_v5515 then
      eqn_i8(x_v5514.-1, y_v5515.-1)
    else
      0
  else
    if y_v5515 then
      0
    else
      1

val eqnclo_i50 = fn x_v5516 y_v5517 ⇒ eqn_i8(x_v5516, y_v5517)

fun pred_i9(x_v5518) = if x_v5518 then
                         x_v5518.-1
                       else
                         0

val predclo_i51 = fn x_v5519 ⇒ pred_i9(x_v5519)

fun addn_i10(x_v5520, y_v5521) =
  if x_v5520 then
    addn_i10(x_v5520.-1, y_v5521).+1
  else
    y_v5521

val addnclo_i52 = fn x_v5522 y_v5523 ⇒ addn_i10(x_v5522, y_v5523)

fun subn_i11(x_v5524, y_v5525) =
  if y_v5525 then
    subn_i11(pred_i9(x_v5524), y_v5525.-1)
  else
    x_v5524

val subnclo_i53 = fn x_v5526 y_v5527 ⇒ subn_i11(x_v5526, y_v5527)

fun muln_i12(x_v5528, y_v5529) =
  if x_v5528 then
    addn_i10(y_v5529, muln_i12(x_v5528.-1, y_v5529))
  else
    0

val mulnclo_i54 = fn x_v5530 y_v5531 ⇒ muln_i12(x_v5530, y_v5531)

fun divn_i13(x_v5532, y_v5533) =
  if ltn_i6(x_v5532, y_v5533) then
    0
  else
    divn_i13(subn_i11(x_v5532, y_v5533), y_v5533).+1

val divnclo_i55 = fn x_v5534 y_v5535 ⇒ divn_i13(x_v5534, y_v5535)

fun modn_i14(x_v5536, y_v5537) =
  subn_i11(x_v5536, muln_i12(divn_i13(x_v5536, y_v5537), y_v5537))

val modnclo_i56 = fn x_v5538 y_v5539 ⇒ modn_i14(x_v5538, y_v5539)

fun cats_i15(s1_v5540, s2_v5541) =
  match s1_v5540 with
  | EmptyString_c2  ⇒ s2_v5541
  | String_c3 c_v5542 s1_v5543 ⇒
    (String_c3 c_v5542 cats_i15(s1_v5543, s2_v5541))
  end

val catsclo_i57 = fn s1_v5544 s2_v5545 ⇒ cats_i15(s1_v5544, s2_v5545)

fun strlen_i16(s_v5546) =
  match s_v5546 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v5547 s_v5548 ⇒ strlen_i16(s_v5548).+1
  end

val strlenclo_i58 = fn s_v5549 ⇒ strlen_i16(s_v5549)

fun lenUU_i38(A_v5550, xs_v5551) =
  match xs_v5551 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v5552 xs_v5553 ⇒
    match lenUU_i38(NULL, xs_v5553) with
    | (n_v5554, xs_v5555) ⇒ (n_v5554.+1, (consUU_c13 x_v5552 xs_v5555))
    end
  end

val lenUUclo_i59 = fn A_v5556 xs_v5557 ⇒ lenUU_i38(A_v5556, xs_v5557)

fun lenUL_i37(A_v5558, xs_v5559) =
  match xs_v5559 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v5560 xs_v5561 ⇒
    match lenUL_i37(NULL, xs_v5561) with
    | (n_v5562, xs_v5563) ⇒ (n_v5562.+1, (consUL_c11 x_v5560 xs_v5563))
    end
  end

val lenULclo_i60 = fn A_v5564 xs_v5565 ⇒ lenUL_i37(A_v5564, xs_v5565)

fun lenLL_i35(A_v5566, xs_v5567) =
  match xs_v5567 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v5568 xs_v5569 ⇒
    match lenLL_i35(NULL, xs_v5569) with
    | (n_v5570, xs_v5571) ⇒ (n_v5570.+1, (consLL_c7 x_v5568 xs_v5571))
    end
  end

val lenLLclo_i61 = fn A_v5572 xs_v5573 ⇒ lenLL_i35(A_v5572, xs_v5573)

fun appendUU_i42(A_v5574, xs_v5575, ys_v5576) =
  match xs_v5575 with
  | nilUU_c12  ⇒ ys_v5576
  | consUU_c13 x_v5577 xs_v5578 ⇒
    (consUU_c13 x_v5577 appendUU_i42(NULL, xs_v5578, ys_v5576))
  end

val appendUUclo_i62 =
  fn A_v5579 xs_v5580 ⇒
    ln ys_v5581 ⇒ appendUU_i42(A_v5579, xs_v5580, ys_v5581)

fun appendUL_i41(A_v5582, xs_v5583, ys_v5584) =
  match xs_v5583 with
  | nilUL_c10  ⇒ ys_v5584
  | consUL_c11 x_v5585 xs_v5586 ⇒
    (consUL_c11 x_v5585 appendUL_i41(NULL, xs_v5586, ys_v5584))
  end

val appendULclo_i63 =
  fn A_v5587 xs_v5588 ⇒
    ln ys_v5589 ⇒ appendUL_i41(A_v5587, xs_v5588, ys_v5589)

fun appendLL_i39(A_v5590, xs_v5591, ys_v5592) =
  match xs_v5591 with
  | nilLL_c6  ⇒ ys_v5592
  | consLL_c7 x_v5593 xs_v5594 ⇒
    (consLL_c7 x_v5593 appendLL_i39(NULL, xs_v5594, ys_v5592))
  end

val appendLLclo_i64 =
  fn A_v5595 xs_v5596 ⇒
    ln ys_v5597 ⇒ appendLL_i39(A_v5595, xs_v5596, ys_v5597)

fun readline_i25(__v5598) =
  ln __v5599 ⇒
    let ch_v5600 = open stdin in
    let ch_v5601 = send(ch_v5600, 1) in
    let __v5602 = recv(ch_v5601) in
    match __v5602 with
    | (s_v5603, ch_v5604) ⇒ let ch_v5605 = send(ch_v5604, 0) in s_v5603
    end

val readlineclo_i65 = fn __v5606 ⇒ readline_i25(__v5606)

fun print_i26(s_v5607) =
  ln __v5608 ⇒
    let ch_v5609 = open stdout in
    let ch_v5610 = send(ch_v5609, 1) in
    let ch_v5611 = send(ch_v5610, s_v5607) in
    let ch_v5612 = send(ch_v5611, 0) in NULL

val printclo_i66 = fn s_v5613 ⇒ print_i26(s_v5613)

fun prerr_i27(s_v5614) =
  ln __v5615 ⇒
    let ch_v5616 = open stderr in
    let ch_v5617 = send(ch_v5616, 1) in
    let ch_v5618 = send(ch_v5617, s_v5614) in
    let ch_v5619 = send(ch_v5618, 0) in NULL

val prerrclo_i67 = fn s_v5620 ⇒ prerr_i27(s_v5620)

fun id_i28(n_v5621, acc_v5622) =
  if n_v5621 then
    id_i28(n_v5621.-1, acc_v5622.+1)
  else
    acc_v5622

val idclo_i68 = fn n_v5623 acc_v5624 ⇒ id_i28(n_v5623, acc_v5624)

fun idM_i29(n_v5625, acc_v5626) =
  if n_v5625 then
    idM_i29(n_v5625.-1, acc_v5626.+1)
  else
    ln __v5627 ⇒ acc_v5626

val idMclo_i69 = fn n_v5628 acc_v5629 ⇒ idM_i29(n_v5628, acc_v5629)

val digits_i30 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i31(A_v5630, n_v5631, xs_v5632, a_v5633) =
  if n_v5631 then
    match xs_v5632 with
    | nilUU_c12  ⇒ a_v5633
    | consUU_c13 __v5634 xs_v5635 ⇒
      get_at_i31(NULL, n_v5631.-1, xs_v5635, a_v5633)
    end
  else
    match xs_v5632 with
    | nilUU_c12  ⇒ a_v5633 | consUU_c13 x_v5636 __v5637 ⇒ x_v5636
    end

val get_atclo_i70 =
  fn A_v5638 n_v5639 xs_v5640 a_v5641 ⇒
    get_at_i31(A_v5638, n_v5639, xs_v5640, a_v5641)

fun string_of_digit_i32(n_v5642) =
  get_at_i31(NULL, n_v5642, digits_i30, EmptyString_c2)

val string_of_digitclo_i71 = fn n_v5643 ⇒ string_of_digit_i32(n_v5643)

fun string_of_nat_i33(n_v5644) =
  let s_v5645 = string_of_digit_i32(modn_i14(n_v5644, 10)) in
  let n_v5646 = divn_i13(n_v5644, 10) in
  if ltn_i6(0, n_v5646) then
    cats_i15(string_of_nat_i33(n_v5646), s_v5645)
  else
    s_v5645

val string_of_natclo_i72 = fn n_v5647 ⇒ string_of_nat_i33(n_v5647)

main = let x_v5648 = (idM_i29(8000000, 0)) NULL in NULL

trans3e success--------------------------

trans34 success--------------------------

