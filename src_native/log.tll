program split‹t› (zs : ((list‹_, t›)
(nat))) : (∃ (_ : ((list‹_, t›) (nat))) ⊗ ((list‹_, t›)
(nat))) = match zs as _ in _ with nil  ⇒ ⟨nil, nil⟩ | cons x
zs ⇒ match zs as _ in _ with nil  ⇒ ⟨((cons) (x)
(nil)), nil⟩ | cons y zs ⇒ let ⟨xs, ys⟩ = ((split)
(zs)) in ⟨((cons) (x) (xs)), ((cons) (y)
(ys))⟩

program merge‹t› (xs : ((list‹_, t›)
(nat))) : (∀ (_ : ((list‹_, t›) (nat))) ⊸ ((list‹_, t›)
(nat))) = (ln (ys : _) ⇒ match xs as _ in _ with nil  ⇒ ys | cons x
xs0 ⇒ match ys as _ in _ with nil  ⇒ ((cons) (x) (xs0)) | cons y
ys0 ⇒ match ((lten) (x) (y)) as _ in _ with true ⇒ ((cons) (x)
(((merge) (xs0) (((cons) (y) (ys0)))))) | false ⇒ ((cons) (y)
(((merge) (((cons) (x) (xs0))) (ys0)))))

program msort‹t› (zs : ((list‹_, t›) (nat))) : ((list‹_, t›)
(nat)) = match zs as _ in _ with nil  ⇒ nil | cons x
zs ⇒ match zs as _ in _ with nil  ⇒ ((cons) (x) (nil)) | cons y
zs ⇒ let ⟨xs, ys⟩ = ((split)
(((cons) (x) (((cons) (y) (zs)))))) in ((merge) (((msort) (xs)))
(((msort) (ys))))

logical cmsort_ch‹t› : L = ch‹!(_ : ((list‹_, t›)
(nat))) → end›

program cmsort_worker‹t› (n : nat) (zs : ((list‹_, t›)
(nat))) : (∀ (_ : cmsort_ch‹t›) ⊸ IO unit) = (ln (c : _) ⇒ match n as _ in _ with O ⇒ let c ⇐ (
(send c)
(((msort) (zs)))) in close c | S n ⇒ match zs as _ in _ with nil  ⇒ let c ⇐ (
(send c) (nil)) in close c | cons z0
zs0 ⇒ match zs0 as _ in _ with nil  ⇒ let c ⇐ ((send c)
(nil)) in close c | cons z1 zs1 ⇒ let ⟨xs0, ys0⟩ = ((split)
(((cons) (z0) (((cons) (z1) (zs1)))))) in let r ⇐ fork (r : cmsort_ch) in (
(cmsort_worker) (n) (xs0) (r)) in let ys1 = ((msort)
(ys0)) in let ⟨xs1, r⟩ ⇐ recv r in let zs = ((merge) (xs1)
(ys1)) in let c ⇐ ((send c)
(zs)) in let _ ⇐ close r in close c)

program cmsort‹t› (zs0 : ((list‹_, t›) (nat))) : IO ((list‹_, t›)
(nat)) = let c ⇐ fork (c : cmsort_ch) in ((cmsort_worker) (O.+4) (zs0)
(c)) in let ⟨zs1, c⟩ ⇐ recv c in let _ ⇐ close c in return zs1

program mkList‹t› (n : nat) : ((list‹_, t›)
(nat)) = match n as _ in _ with O ⇒ nil | S n0 ⇒ ((cons) (n)
(((mkList) (n0))))

program main‹› : IO unit = let test = ((mkList‹U›)
(O.+6000)) in let sorted ⇐ ((cmsort)
(test)) in return ()

parsing success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v217 : bool) (b2_v218 : bool) ⇒
    match b1_v217 as __v219 in ??1 with
    | true ⇒ b2_v218 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v222 : bool) (b2_v223 : bool) ⇒
    match b1_v222 as __v224 in ??2 with
    | true ⇒ true | false ⇒ b2_v223
    end

program notb_i3 : bool → bool =
  fn (b_v226 : bool) ⇒
    match b_v226 as __v227 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v230 : nat) (y_v231 : nat) ⇒
    match x_v230 as __v232 in ??4 with
    | O ⇒ true
    | S x_v233 ⇒
      match y_v231 as __v234 in ??5 with
      | O ⇒ false | S y_v235 ⇒ (lten_i4 x_v233 y_v235)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v238 : nat) (y_v239 : nat) ⇒
    match x_v238 as __v240 in ??6 with
    | O ⇒
      match y_v239 as __v241 in ??8 with
      | O ⇒ true | S __v242 ⇒ false
      end
    | S x_v243 ⇒
      match y_v239 as __v244 in ??7 with
      | O ⇒ true | S y_v245 ⇒ (gten_i5 x_v243 y_v245)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v248 : nat) (y_v249 : nat) ⇒
    match x_v248 as __v250 in ??9 with
    | O ⇒
      match y_v249 as __v251 in ??11 with
      | O ⇒ false | S y_v252 ⇒ true
      end
    | S x_v253 ⇒
      match y_v249 as __v254 in ??10 with
      | O ⇒ false | S y_v255 ⇒ (ltn_i6 x_v253 y_v255)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v258 : nat) (y_v259 : nat) ⇒
    match x_v258 as __v260 in ??12 with
    | O ⇒ false
    | S x_v261 ⇒
      match y_v259 as __v262 in ??13 with
      | O ⇒ true | S y_v263 ⇒ (gtn_i7 x_v261 y_v263)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v266 : nat) (y_v267 : nat) ⇒
    match x_v266 as __v268 in ??14 with
    | O ⇒
      match y_v267 as __v269 in ??16 with
      | O ⇒ true | S __v270 ⇒ false
      end
    | S x_v271 ⇒
      match y_v267 as __v272 in ??15 with
      | O ⇒ false | S y_v273 ⇒ (eqn_i8 x_v271 y_v273)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v275 : nat) ⇒
    match x_v275 as __v276 in ??17 with
    | O ⇒ 0 | S x_v277 ⇒ x_v277
    end

program addn_i10 : nat → nat → nat =
  fn (x_v280 : nat) (y_v281 : nat) ⇒
    match x_v280 as __v282 in ??18 with
    | O ⇒ y_v281 | S x_v283 ⇒ (addn_i10 x_v283 y_v281).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v286 : nat) (y_v287 : nat) ⇒
    match y_v287 as __v288 in ??19 with
    | O ⇒ x_v286 | S y_v289 ⇒ (subn_i11 (pred_i9 x_v286) y_v289)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v292 : nat) (y_v293 : nat) ⇒
    match x_v292 as __v294 in ??20 with
    | O ⇒ 0 | S x_v295 ⇒ (addn_i10 y_v293 (muln_i12 x_v295 y_v293))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v298 : nat) (y_v299 : nat) ⇒
    match (ltn_i6 x_v298 y_v299) as __v300 in ??21 with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v298 y_v299) y_v299).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v303 : nat) (y_v304 : nat) ⇒
    (subn_i11 x_v303 (muln_i12 (divn_i13 x_v303 y_v304) y_v304))

inductive char_d1 : U =
| Char_c1 of (n_v305 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v306 : char_d1) (s_v307 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v310 : string_d2) (s2_v311 : string_d2) ⇒
    match s1_v310 as __v312 in ??22 with
    | EmptyString_c2  ⇒ s2_v311
    | String_c3 c_v313 s1_v314 ⇒
      (String_c3‹› c_v313 (cats_i15 s1_v314 s2_v311))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v316 : string_d2) ⇒
    match s_v316 as __v317 in ??23 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v318 s_v319 ⇒ (strlen_i16 s_v319).+1
    end

inductive list_d3 ‹s_s320, t_s321›
  (A_v322 : Type‹s_s320›) : Type‹t_s321›
=
| nil_c4 of
    ‹s_s323, t_s324› (A_v325 : Type‹s_s323›)
    : (list_d3‹s_s323, t_s324› A_v325)
| cons_c5 of
    ‹s_s326, t_s327› (A_v328 : Type‹s_s326›) (hd_v329 : A_v328)
    (tl_v330 : (list_d3‹s_s326, t_s327› A_v328))
    : (list_d3‹s_s326, t_s327› A_v328)

program len_i17 ‹s_s331, t_s332› :
  ∀ {A_v333 : Type‹s_s331›} →
    (list_d3‹??24, t_s332› A_v333) →
      nat ⊗ (list_d3‹??25, t_s332› A_v333)
=
  fn {A_v336 : Type‹s_s331›}
     (xs_v337 : (list_d3‹??24, t_s332› A_v336)) ⇒
    match xs_v337 as __v338 in ??26 with
    | nil_c4  ⇒ ⟨0, nil_c4‹??36, ??35›⟩
    | cons_c5 x_v339 xs_v340 ⇒
      match (len_i17‹??29, ??28› ??27 xs_v340) as __v341 in ??30 with
      | ⟨n_v342, xs_v343⟩ ⇒
        ⟨n_v342.+1, (cons_c5‹??33, ??32› x_v339 xs_v343)⟩
      end
    end

program append_i18 ‹s_s344, t_s345› :
  ∀ {A_v346 : Type‹s_s344›} →
    (list_d3‹??37, t_s345› A_v346) →
      (list_d3‹??38, t_s345› A_v346) ⊸ (list_d3‹??40, ??39› A_v346)
=
  fn {A_v349 : Type‹s_s344›}
     (xs_v350 : (list_d3‹??37, t_s345› A_v349)) ⇒
    ln (ys_v351 : ??41) ⇒
      match xs_v350 as __v352 in ??42 with
      | nil_c4  ⇒ ys_v351
      | cons_c5 x_v353 xs_v354 ⇒
        (cons_c5‹??48, ??47›
          x_v353 (append_i18‹??45, ??44› ??43 xs_v354 ys_v351))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v356 : unit) ⇒
    ⇑(b_v357 : bool) ⇒
      match b_v357 as __v358 in ??49 with
      | true ⇒ ⇓(__v359 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v361 : unit) ⇒
    ⇑(b_v362 : bool) ⇒
      match b_v362 as __v363 in ??50 with
      | true ⇒ ⇑(__v364 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v366 : unit) ⇒
    ⇑(b_v367 : bool) ⇒
      match b_v367 as __v368 in ??51 with
      | true ⇒ ⇑(__v369 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v371 : unit) ⇒
    let ch_v372 ⇐ open stdin in
    let ch_v373 ⇐ (send ch_v372 true) in
    let __v374 ⇐ recv ch_v373 in
    match __v374 as __v375 in ??52 with
    | ⟨s_v376, ch_v377⟩ ⇒
      let ch_v378 ⇐ (send ch_v377 false) in
      let __v379 ⇐ close ch_v378 in return s_v376
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v381 : string_d2) ⇒
    let ch_v382 ⇐ open stdout in
    let ch_v383 ⇐ (send ch_v382 true) in
    let ch_v384 ⇐ (send ch_v383 s_v381) in
    let ch_v385 ⇐ (send ch_v384 false) in close ch_v385

program prerr_i27 : string_d2 → IO unit =
  fn (s_v387 : string_d2) ⇒
    let ch_v388 ⇐ open stderr in
    let ch_v389 ⇐ (send ch_v388 true) in
    let ch_v390 ⇐ (send ch_v389 s_v387) in
    let ch_v391 ⇐ (send ch_v390 false) in close ch_v391

program split_i28 ‹t_s392› :
  (list_d3‹??53, t_s392› nat) →
    (list_d3‹??54, t_s392› nat) ⊗ (list_d3‹??55, t_s392› nat)
=
  fn (zs_v395 : (list_d3‹??53, t_s392› nat)) ⇒
    match zs_v395 as __v396 in ??56 with
    | nil_c4  ⇒ ⟨nil_c4‹??77, ??76›, nil_c4‹??80, ??79›⟩
    | cons_c5 x_v397 zs_v398 ⇒
      match zs_v398 as __v399 in ??57 with
      | nil_c4  ⇒
        ⟨(cons_c5‹??71, ??70› x_v397 nil_c4‹??68, ??67›), nil_c4‹??74,
        ??73›⟩
      | cons_c5 y_v400 zs_v401 ⇒
        let __v402 = (split_i28‹??58› zs_v401) in
        match __v402 as __v403 in ??65 with
        | ⟨xs_v404, ys_v405⟩ ⇒
          ⟨(cons_c5‹??61, ??60› x_v397 xs_v404), (cons_c5‹??64,
                                                       ??63›
                                                         y_v400 ys_v405)⟩
        end
      end
    end

program merge_i29 ‹t_s406› :
  (list_d3‹??81, t_s406› nat) →
    (list_d3‹??82, t_s406› nat) ⊸ (list_d3‹??83, t_s406› nat)
=
  fn (xs_v409 : (list_d3‹??81, t_s406› nat)) ⇒
    ln (ys_v410 : ??84) ⇒
      match xs_v409 as __v411 in ??85 with
      | nil_c4  ⇒ ys_v410
      | cons_c5 x_v412 xs0_v413 ⇒
        match ys_v410 as __v414 in ??86 with
        | nil_c4  ⇒ (cons_c5‹??104, ??103› x_v412 xs0_v413)
        | cons_c5 y_v415 ys0_v416 ⇒
          match (lten_i4 x_v412 y_v415) as __v417 in ??87 with
          | true ⇒
            (cons_c5‹??101, ??100›
              x_v412
              (merge_i29‹??98›
                xs0_v413 (cons_c5‹??97, ??96› y_v415 ys0_v416)))
          | false ⇒
            (cons_c5‹??94, ??93›
              y_v415
              (merge_i29‹??91›
                (cons_c5‹??90, ??89› x_v412 xs0_v413) ys0_v416))
          end
        end
      end

program msort_i30 ‹t_s418› :
  (list_d3‹??105, t_s418› nat) → (list_d3‹??106, t_s418› nat)
=
  fn (zs_v420 : (list_d3‹??105, t_s418› nat)) ⇒
    match zs_v420 as __v421 in ??107 with
    | nil_c4  ⇒ nil_c4‹??128, ??127›
    | cons_c5 x_v422 zs_v423 ⇒
      match zs_v423 as __v424 in ??108 with
      | nil_c4  ⇒
        (cons_c5‹??125, ??124› x_v422 nil_c4‹??122, ??121›)
      | cons_c5 y_v425 zs_v426 ⇒
        let __v427 =
          (split_i28‹??115›
            (cons_c5‹??114, ??113›
              x_v422 (cons_c5‹??111, ??110› y_v425 zs_v426)))
        in
        match __v427 as __v428 in ??119 with
        | ⟨xs_v429, ys_v430⟩ ⇒
          (merge_i29‹??118›
            (msort_i30‹??117› xs_v429) (msort_i30‹??116› ys_v430))
        end
      end
    end

logical cmsort_ch_i31 ‹t_s431› : L =
  ch⟨⇑(__v432 : (list_d3‹??129, t_s431› nat)) ⇒ end⟩

program cmsort_worker_i32 ‹t_s433› :
  nat →
    (list_d3‹??130, t_s433› nat) →
      cmsort_ch_i31‹t_s433› ⊸ IO unit
=
  fn (n_v437 : nat) (zs_v438 : (list_d3‹??130, t_s433› nat)) ⇒
    ln (c_v439 : ??131) ⇒
      match n_v437 as __v440 in ??132 with
      | O ⇒
        let c_v441 ⇐ (send c_v439 (msort_i30‹??154› zs_v438)) in
        close c_v441
      | S n_v442 ⇒
        match zs_v438 as __v443 in ??133 with
        | nil_c4  ⇒
          let c_v444 ⇐ (send c_v439 nil_c4‹??153, ??152›) in
          close c_v444
        | cons_c5 z0_v445 zs0_v446 ⇒
          match zs0_v446 as __v447 in ??134 with
          | nil_c4  ⇒
            let c_v448 ⇐ (send c_v439 nil_c4‹??150, ??149›) in
            close c_v448
          | cons_c5 z1_v449 zs1_v450 ⇒
            let __v451 =
              (split_i28‹??141›
                (cons_c5‹??140, ??139›
                  z0_v445 (cons_c5‹??137, ??136› z1_v449 zs1_v450)))
            in
            match __v451 as __v452 in ??147 with
            | ⟨xs0_v453, ys0_v454⟩ ⇒
              let r_v455 ⇐
                fork (r_v456 : cmsort_ch_i31‹??142›) in
                  (cmsort_worker_i32‹??143› n_v442 xs0_v453 r_v456)
              in
              let ys1_v457 = (msort_i30‹??144› ys0_v454) in
              let __v458 ⇐ recv r_v455 in
              match __v458 as __v459 in ??146 with
              | ⟨xs1_v460, r_v461⟩ ⇒
                let zs_v462 = (merge_i29‹??145› xs1_v460 ys1_v457) in
                let c_v463 ⇐ (send c_v439 zs_v462) in
                let __v464 ⇐ close r_v461 in close c_v463
              end
            end
          end
        end
      end

program cmsort_i33 ‹t_s465› :
  (list_d3‹??155, t_s465› nat) → IO (list_d3‹??156, t_s465› nat)
=
  fn (zs0_v467 : (list_d3‹??155, t_s465› nat)) ⇒
    let c_v468 ⇐
      fork (c_v469 : cmsort_ch_i31‹??157›) in
        (cmsort_worker_i32‹??158› 4 zs0_v467 c_v469)
    in
    let __v470 ⇐ recv c_v468 in
    match __v470 as __v471 in ??159 with
    | ⟨zs1_v472, c_v473⟩ ⇒
      let __v474 ⇐ close c_v473 in return zs1_v472
    end

program mkList_i34 ‹t_s475› : nat → (list_d3‹??160, t_s475› nat) =
  fn (n_v477 : nat) ⇒
    match n_v477 as __v478 in ??161 with
    | O ⇒ nil_c4‹??168, ??167›
    | S n0_v479 ⇒
      (cons_c5‹??165, ??164› n_v477 (mkList_i34‹??162› n0_v479))
    end

program main_i35 : IO unit =
  let test_v480 = (mkList_i34‹U› 6000) in
  let sorted_v481 ⇐ (cmsort_i33‹??169› test_v480) in return ()

trans01 success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v11440 : bool) (b2_v11441 : bool) ⇒
    match b1_v11440 as __v11442 in bool with
    | true ⇒ b2_v11441 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v11445 : bool) (b2_v11446 : bool) ⇒
    match b1_v11445 as __v11447 in bool with
    | true ⇒ true | false ⇒ b2_v11446
    end

program notb_i3 : bool → bool =
  fn (b_v11449 : bool) ⇒
    match b_v11449 as __v11450 in bool with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v11453 : nat) (y_v11454 : nat) ⇒
    match x_v11453 as __v11455 in bool with
    | O ⇒ true
    | S x_v11456 ⇒
      match y_v11454 as __v11457 in bool with
      | O ⇒ false | S y_v11458 ⇒ (lten_i4 x_v11456 y_v11458)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v11461 : nat) (y_v11462 : nat) ⇒
    match x_v11461 as __v11463 in bool with
    | O ⇒
      match y_v11462 as __v11464 in bool with
      | O ⇒ true | S __v11465 ⇒ false
      end
    | S x_v11466 ⇒
      match y_v11462 as __v11467 in bool with
      | O ⇒ true | S y_v11468 ⇒ (gten_i5 x_v11466 y_v11468)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v11471 : nat) (y_v11472 : nat) ⇒
    match x_v11471 as __v11473 in bool with
    | O ⇒
      match y_v11472 as __v11474 in bool with
      | O ⇒ false | S y_v11475 ⇒ true
      end
    | S x_v11476 ⇒
      match y_v11472 as __v11477 in bool with
      | O ⇒ false | S y_v11478 ⇒ (ltn_i6 x_v11476 y_v11478)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v11481 : nat) (y_v11482 : nat) ⇒
    match x_v11481 as __v11483 in bool with
    | O ⇒ false
    | S x_v11484 ⇒
      match y_v11482 as __v11485 in bool with
      | O ⇒ true | S y_v11486 ⇒ (gtn_i7 x_v11484 y_v11486)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v11489 : nat) (y_v11490 : nat) ⇒
    match x_v11489 as __v11491 in bool with
    | O ⇒
      match y_v11490 as __v11492 in bool with
      | O ⇒ true | S __v11493 ⇒ false
      end
    | S x_v11494 ⇒
      match y_v11490 as __v11495 in bool with
      | O ⇒ false | S y_v11496 ⇒ (eqn_i8 x_v11494 y_v11496)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v11498 : nat) ⇒
    match x_v11498 as __v11499 in nat with
    | O ⇒ 0 | S x_v11500 ⇒ x_v11500
    end

program addn_i10 : nat → nat → nat =
  fn (x_v11503 : nat) (y_v11504 : nat) ⇒
    match x_v11503 as __v11505 in nat with
    | O ⇒ y_v11504 | S x_v11506 ⇒ (addn_i10 x_v11506 y_v11504).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v11509 : nat) (y_v11510 : nat) ⇒
    match y_v11510 as __v11511 in nat with
    | O ⇒ x_v11509 | S y_v11512 ⇒ (subn_i11 (pred_i9 x_v11509) y_v11512)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v11515 : nat) (y_v11516 : nat) ⇒
    match x_v11515 as __v11517 in nat with
    | O ⇒ 0
    | S x_v11518 ⇒ (addn_i10 y_v11516 (muln_i12 x_v11518 y_v11516))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v11521 : nat) (y_v11522 : nat) ⇒
    match (ltn_i6 x_v11521 y_v11522) as __v11523 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i13 (subn_i11 x_v11521 y_v11522) y_v11522).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v11526 : nat) (y_v11527 : nat) ⇒
    (subn_i11 x_v11526 (muln_i12 (divn_i13 x_v11526 y_v11527) y_v11527))

inductive char_d1 : U =
| Char_c1 of (n_v11528 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v11529 : char_d1) (s_v11530 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v11533 : string_d2) (s2_v11534 : string_d2) ⇒
    match s1_v11533 as __v11535 in string_d2 with
    | EmptyString_c2  ⇒ s2_v11534
    | String_c3 c_v11536 s1_v11537 ⇒
      (String_c3‹› c_v11536 (cats_i15 s1_v11537 s2_v11534))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v11539 : string_d2) ⇒
    match s_v11539 as __v11540 in nat with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v11541 s_v11542 ⇒ (strlen_i16 s_v11542).+1
    end

inductive list_d3 ‹s_s11543, t_s11544›
  (A_v11545 : Type‹s_s11543›) : Type‹t_s11544›
=
| nil_c4 of
    ‹s_s11546, t_s11547› (A_v11548 : Type‹s_s11546›)
    : (list_d3‹s_s11546, t_s11547› A_v11548)
| cons_c5 of
    ‹s_s11549, t_s11550› (A_v11551 : Type‹s_s11549›)
    (hd_v11552 : A_v11551)
    (tl_v11553 : (list_d3‹s_s11549, t_s11550› A_v11551))
    : (list_d3‹s_s11549, t_s11550› A_v11551)

program len_i17 ‹s_s11554, t_s11555› :
  ∀ {A_v11556 : Type‹s_s11554›} →
    (list_d3‹s_s11554, t_s11555› A_v11556) →
      nat ⊗ (list_d3‹s_s11554, t_s11555› A_v11556)
=
  fn {A_v11559 : Type‹s_s11554›}
     (xs_v11560 : (list_d3‹s_s11554, t_s11555› A_v11559)) ⇒
    match xs_v11560 as __v11561 in
      nat ⊗ (list_d3‹s_s11554, t_s11555› A_v11559) with
    | nil_c4  ⇒ ⟨0, nil_c4‹s_s11554, t_s11555›⟩
    | cons_c5 x_v11563 xs_v11564 ⇒
      match (len_i17‹s_s11554, t_s11555› A_v11559 xs_v11564) as __v11565 in
        nat ⊗ (list_d3‹s_s11554, t_s11555› A_v11559) with
      | ⟨n_v11567, xs_v11568⟩ ⇒
        ⟨n_v11567.+1, (cons_c5‹s_s11554, t_s11555› x_v11563 xs_v11568)⟩
      end
    end

program append_i18 ‹s_s11569, t_s11570› :
  ∀ {A_v11571 : Type‹s_s11569›} →
    (list_d3‹s_s11569, t_s11570› A_v11571) →
      (list_d3‹s_s11569, t_s11570› A_v11571) ⊸
        (list_d3‹s_s11569, t_s11570› A_v11571)
=
  fn {A_v11574 : Type‹s_s11569›}
     (xs_v11575 : (list_d3‹s_s11569, t_s11570› A_v11574)) ⇒
    ln (ys_v11576 : (list_d3‹s_s11569, t_s11570› A_v11574)) ⇒
      match xs_v11575 as __v11577 in
        (list_d3‹s_s11569, t_s11570› A_v11574) with
      | nil_c4  ⇒ ys_v11576
      | cons_c5 x_v11578 xs_v11579 ⇒
        (cons_c5‹s_s11569, t_s11570›
          x_v11578
          (append_i18‹s_s11569, t_s11570› A_v11574 xs_v11579 ys_v11576))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v11581 : unit) ⇒
    ⇑(b_v11582 : bool) ⇒
      match b_v11582 as __v11583 in proto with
      | true ⇒ ⇓(__v11584 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v11586 : unit) ⇒
    ⇑(b_v11587 : bool) ⇒
      match b_v11587 as __v11588 in proto with
      | true ⇒ ⇑(__v11589 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v11591 : unit) ⇒
    ⇑(b_v11592 : bool) ⇒
      match b_v11592 as __v11593 in proto with
      | true ⇒ ⇑(__v11594 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v11596 : unit) ⇒
    let ch_v11597 ⇐ open stdin in
    let ch_v11598 ⇐ (send ch_v11597 true) in
    let __v11599 ⇐ recv ch_v11598 in
    match __v11599 as __v11600 in IO string_d2 with
    | ⟨s_v11601, ch_v11602⟩ ⇒
      let ch_v11603 ⇐ (send ch_v11602 false) in
      let __v11604 ⇐ close ch_v11603 in return s_v11601
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v11606 : string_d2) ⇒
    let ch_v11607 ⇐ open stdout in
    let ch_v11608 ⇐ (send ch_v11607 true) in
    let ch_v11609 ⇐ (send ch_v11608 s_v11606) in
    let ch_v11610 ⇐ (send ch_v11609 false) in close ch_v11610

program prerr_i27 : string_d2 → IO unit =
  fn (s_v11612 : string_d2) ⇒
    let ch_v11613 ⇐ open stderr in
    let ch_v11614 ⇐ (send ch_v11613 true) in
    let ch_v11615 ⇐ (send ch_v11614 s_v11612) in
    let ch_v11616 ⇐ (send ch_v11615 false) in close ch_v11616

program split_i28 ‹t_s11617› :
  (list_d3‹U, t_s11617› nat) →
    (list_d3‹U, t_s11617› nat) ⊗ (list_d3‹U, t_s11617› nat)
=
  fn (zs_v11620 : (list_d3‹U, t_s11617› nat)) ⇒
    match zs_v11620 as __v11621 in
      (list_d3‹U, t_s11617› nat) ⊗ (list_d3‹U, t_s11617› nat) with
    | nil_c4  ⇒ ⟨nil_c4‹U, t_s11617›, nil_c4‹U, t_s11617›⟩
    | cons_c5 x_v11623 zs_v11624 ⇒
      match zs_v11624 as __v11625 in
        (list_d3‹U, t_s11617› nat) ⊗ (list_d3‹U, t_s11617› nat) with
      | nil_c4  ⇒
        ⟨(cons_c5‹U, t_s11617› x_v11623 nil_c4‹U, t_s11617›), nil_c4‹U,
        t_s11617›⟩
      | cons_c5 y_v11627 zs_v11628 ⇒
        let __v11629 = (split_i28‹t_s11617› zs_v11628) in
        match __v11629 as __v11630 in
          (list_d3‹U, t_s11617› nat) ⊗ (list_d3‹U, t_s11617› nat) with
        | ⟨xs_v11632, ys_v11633⟩ ⇒
          ⟨(cons_c5‹U, t_s11617› x_v11623 xs_v11632), (cons_c5‹U,
                                                            t_s11617›
                                                              y_v11627
                                                              ys_v11633)⟩
        end
      end
    end

program merge_i29 ‹t_s11634› :
  (list_d3‹U, t_s11634› nat) →
    (list_d3‹U, t_s11634› nat) ⊸ (list_d3‹U, t_s11634› nat)
=
  fn (xs_v11637 : (list_d3‹U, t_s11634› nat)) ⇒
    ln (ys_v11638 : (list_d3‹U, t_s11634› nat)) ⇒
      match xs_v11637 as __v11639 in (list_d3‹U, t_s11634› nat) with
      | nil_c4  ⇒ ys_v11638
      | cons_c5 x_v11640 xs0_v11641 ⇒
        match ys_v11638 as __v11642 in (list_d3‹U, t_s11634› nat) with
        | nil_c4  ⇒ (cons_c5‹U, t_s11634› x_v11640 xs0_v11641)
        | cons_c5 y_v11643 ys0_v11644 ⇒
          match (lten_i4 x_v11640 y_v11643) as __v11645 in
            (list_d3‹U, t_s11634› nat) with
          | true ⇒
            (cons_c5‹U, t_s11634›
              x_v11640
              (merge_i29‹t_s11634›
                xs0_v11641 (cons_c5‹U, t_s11634› y_v11643 ys0_v11644)))
          | false ⇒
            (cons_c5‹U, t_s11634›
              y_v11643
              (merge_i29‹t_s11634›
                (cons_c5‹U, t_s11634› x_v11640 xs0_v11641) ys0_v11644))
          end
        end
      end

program msort_i30 ‹t_s11646› :
  (list_d3‹U, t_s11646› nat) → (list_d3‹U, t_s11646› nat)
=
  fn (zs_v11648 : (list_d3‹U, t_s11646› nat)) ⇒
    match zs_v11648 as __v11649 in (list_d3‹U, t_s11646› nat) with
    | nil_c4  ⇒ nil_c4‹U, t_s11646›
    | cons_c5 x_v11650 zs_v11651 ⇒
      match zs_v11651 as __v11652 in (list_d3‹U, t_s11646› nat) with
      | nil_c4  ⇒
        (cons_c5‹U, t_s11646› x_v11650 nil_c4‹U, t_s11646›)
      | cons_c5 y_v11653 zs_v11654 ⇒
        let __v11655 =
          (split_i28‹t_s11646›
            (cons_c5‹U, t_s11646›
              x_v11650 (cons_c5‹U, t_s11646› y_v11653 zs_v11654)))
        in
        match __v11655 as __v11656 in (list_d3‹U, t_s11646› nat) with
        | ⟨xs_v11657, ys_v11658⟩ ⇒
          (merge_i29‹t_s11646›
            (msort_i30‹t_s11646› xs_v11657)
            (msort_i30‹t_s11646› ys_v11658))
        end
      end
    end

logical cmsort_ch_i31 ‹t_s11659› : L =
  ch⟨⇑(__v11660 : (list_d3‹U, t_s11659› nat)) ⇒ end⟩

program cmsort_worker_i32 ‹t_s11661› :
  nat →
    (list_d3‹U, t_s11661› nat) →
      cmsort_ch_i31‹t_s11661› ⊸ IO unit
=
  fn (n_v11665 : nat) (zs_v11666 : (list_d3‹U, t_s11661› nat)) ⇒
    ln (c_v11667 : cmsort_ch_i31‹t_s11661›) ⇒
      match n_v11665 as __v11668 in IO unit with
      | O ⇒
        let c_v11669 ⇐ (send c_v11667 (msort_i30‹t_s11661› zs_v11666))
        in close c_v11669
      | S n_v11670 ⇒
        match zs_v11666 as __v11671 in IO unit with
        | nil_c4  ⇒
          let c_v11672 ⇐ (send c_v11667 nil_c4‹U, t_s11661›) in
          close c_v11672
        | cons_c5 z0_v11673 zs0_v11674 ⇒
          match zs0_v11674 as __v11675 in IO unit with
          | nil_c4  ⇒
            let c_v11676 ⇐ (send c_v11667 nil_c4‹U, t_s11661›) in
            close c_v11676
          | cons_c5 z1_v11677 zs1_v11678 ⇒
            let __v11679 =
              (split_i28‹t_s11661›
                (cons_c5‹U, t_s11661›
                  z0_v11673 (cons_c5‹U, t_s11661› z1_v11677 zs1_v11678)))
            in
            match __v11679 as __v11680 in IO unit with
            | ⟨xs0_v11681, ys0_v11682⟩ ⇒
              let r_v11683 ⇐
                fork (r_v11684 : cmsort_ch_i31‹t_s11661›) in
                  (cmsort_worker_i32‹t_s11661›
                    n_v11670 xs0_v11681 r_v11684)
              in
              let ys1_v11685 = (msort_i30‹t_s11661› ys0_v11682) in
              let __v11686 ⇐ recv r_v11683 in
              match __v11686 as __v11687 in IO unit with
              | ⟨xs1_v11688, r_v11689⟩ ⇒
                let zs_v11690 =
                  (merge_i29‹t_s11661› xs1_v11688 ys1_v11685)
                in
                let c_v11691 ⇐ (send c_v11667 zs_v11690) in
                let __v11692 ⇐ close r_v11689 in close c_v11691
              end
            end
          end
        end
      end

program cmsort_i33 ‹t_s11693› :
  (list_d3‹U, t_s11693› nat) → IO (list_d3‹U, t_s11693› nat)
=
  fn (zs0_v11695 : (list_d3‹U, t_s11693› nat)) ⇒
    let c_v11696 ⇐
      fork (c_v11697 : cmsort_ch_i31‹t_s11693›) in
        (cmsort_worker_i32‹t_s11693› 4 zs0_v11695 c_v11697)
    in
    let __v11698 ⇐ recv c_v11696 in
    match __v11698 as __v11699 in IO (list_d3‹U, t_s11693› nat) with
    | ⟨zs1_v11700, c_v11701⟩ ⇒
      let __v11702 ⇐ close c_v11701 in return zs1_v11700
    end

program mkList_i34 ‹t_s11703› : nat → (list_d3‹U, t_s11703› nat) =
  fn (n_v11705 : nat) ⇒
    match n_v11705 as __v11706 in (list_d3‹U, t_s11703› nat) with
    | O ⇒ nil_c4‹U, t_s11703›
    | S n0_v11707 ⇒
      (cons_c5‹U, t_s11703›
        n_v11705 (mkList_i34‹t_s11703› n0_v11707))
    end

program main_i35 : IO unit =
  let test_v11708 = (mkList_i34‹U› 6000) in
  let sorted_v11709 ⇐ (cmsort_i33‹U› test_v11708) in return ()

trans1e success--------------------------

def andb_i1 =
  fn b1_v12154 b2_v12155 ⇒
    match b1_v12154 with
    | true ⇒ b2_v12155 | false ⇒ false
    end

def orb_i2 =
  fn b1_v12156 b2_v12157 ⇒
    match b1_v12156 with
    | true ⇒ true | false ⇒ b2_v12157
    end

def notb_i3 =
  fn b_v12158 ⇒ match b_v12158 with
                  | true ⇒ false | false ⇒ true
                  end

def lten_i4 =
  fn x_v12159 y_v12160 ⇒
    match x_v12159 with
    | O ⇒ true
    | S x_v12161 ⇒
      match y_v12160 with
      | O ⇒ false | S y_v12162 ⇒ ((lten_i4 x_v12161) y_v12162)
      end
    end

def gten_i5 =
  fn x_v12163 y_v12164 ⇒
    match x_v12163 with
    | O ⇒ match y_v12164 with
            | O ⇒ true | S __v12165 ⇒ false
            end
    | S x_v12166 ⇒
      match y_v12164 with
      | O ⇒ true | S y_v12167 ⇒ ((gten_i5 x_v12166) y_v12167)
      end
    end

def ltn_i6 =
  fn x_v12168 y_v12169 ⇒
    match x_v12168 with
    | O ⇒ match y_v12169 with
            | O ⇒ false | S y_v12170 ⇒ true
            end
    | S x_v12171 ⇒
      match y_v12169 with
      | O ⇒ false | S y_v12172 ⇒ ((ltn_i6 x_v12171) y_v12172)
      end
    end

def gtn_i7 =
  fn x_v12173 y_v12174 ⇒
    match x_v12173 with
    | O ⇒ false
    | S x_v12175 ⇒
      match y_v12174 with
      | O ⇒ true | S y_v12176 ⇒ ((gtn_i7 x_v12175) y_v12176)
      end
    end

def eqn_i8 =
  fn x_v12177 y_v12178 ⇒
    match x_v12177 with
    | O ⇒ match y_v12178 with
            | O ⇒ true | S __v12179 ⇒ false
            end
    | S x_v12180 ⇒
      match y_v12178 with
      | O ⇒ false | S y_v12181 ⇒ ((eqn_i8 x_v12180) y_v12181)
      end
    end

def pred_i9 =
  fn x_v12182 ⇒ match x_v12182 with
                  | O ⇒ 0 | S x_v12183 ⇒ x_v12183
                  end

def addn_i10 =
  fn x_v12184 y_v12185 ⇒
    match x_v12184 with
    | O ⇒ y_v12185 | S x_v12186 ⇒ ((addn_i10 x_v12186) y_v12185).+1
    end

def subn_i11 =
  fn x_v12187 y_v12188 ⇒
    match y_v12188 with
    | O ⇒ x_v12187
    | S y_v12189 ⇒ ((subn_i11 (pred_i9 x_v12187)) y_v12189)
    end

def muln_i12 =
  fn x_v12190 y_v12191 ⇒
    match x_v12190 with
    | O ⇒ 0
    | S x_v12192 ⇒ ((addn_i10 y_v12191) ((muln_i12 x_v12192) y_v12191))
    end

def divn_i13 =
  fn x_v12193 y_v12194 ⇒
    match ((ltn_i6 x_v12193) y_v12194) with
    | true ⇒ 0
    | false ⇒ ((divn_i13 ((subn_i11 x_v12193) y_v12194)) y_v12194).+1
    end

def modn_i14 =
  fn x_v12195 y_v12196 ⇒
    ((subn_i11 x_v12195)
      ((muln_i12 ((divn_i13 x_v12195) y_v12196)) y_v12196))

data char_d1 =
| Char_c1 of size(1)

data string_d2 =
| EmptyString_c2 of size(0) | String_c3 of size(2)

def cats_i15 =
  fn s1_v12197 s2_v12198 ⇒
    match s1_v12197 with
    | EmptyString_c2  ⇒ s2_v12198
    | String_c3 c_v12199 s1_v12200 ⇒
      (String_c3 c_v12199 ((cats_i15 s1_v12200) s2_v12198))
    end

def strlen_i16 =
  fn s_v12201 ⇒
    match s_v12201 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v12202 s_v12203 ⇒ (strlen_i16 s_v12203).+1
    end

data listUU_d7 =
| nilUU_c12 of size(0) | consUU_c13 of size(2)

data listUL_d6 =
| nilUL_c10 of size(0) | consUL_c11 of size(2)

data listLU_d5 =
| nilLU_c8 of size(0)

data listLL_d4 =
| nilLL_c6 of size(0) | consLL_c7 of size(2)

def lenUU_i39 =
  fn A_v12204 xs_v12205 ⇒
    match xs_v12205 with
    | nilUU_c12  ⇒ (0, nilUU_c12)
    | consUU_c13 x_v12206 xs_v12207 ⇒
      match ((lenUU_i39 NULL) xs_v12207) with
      | (n_v12208, xs_v12209) ⇒
        (n_v12208.+1, (consUU_c13 x_v12206 xs_v12209))
      end
    end

def lenUL_i38 =
  fn A_v12210 xs_v12211 ⇒
    match xs_v12211 with
    | nilUL_c10  ⇒ (0, nilUL_c10)
    | consUL_c11 x_v12212 xs_v12213 ⇒
      match ((lenUL_i38 NULL) xs_v12213) with
      | (n_v12214, xs_v12215) ⇒
        (n_v12214.+1, (consUL_c11 x_v12212 xs_v12215))
      end
    end

def lenLL_i36 =
  fn A_v12216 xs_v12217 ⇒
    match xs_v12217 with
    | nilLL_c6  ⇒ (0, nilLL_c6)
    | consLL_c7 x_v12218 xs_v12219 ⇒
      match ((lenLL_i36 NULL) xs_v12219) with
      | (n_v12220, xs_v12221) ⇒
        (n_v12220.+1, (consLL_c7 x_v12218 xs_v12221))
      end
    end

def appendUU_i43 =
  fn A_v12222 xs_v12223 ⇒
    ln ys_v12224 ⇒
      match xs_v12223 with
      | nilUU_c12  ⇒ ys_v12224
      | consUU_c13 x_v12225 xs_v12226 ⇒
        (consUU_c13 x_v12225 (((appendUU_i43 NULL) xs_v12226) ys_v12224))
      end

def appendUL_i42 =
  fn A_v12227 xs_v12228 ⇒
    ln ys_v12229 ⇒
      match xs_v12228 with
      | nilUL_c10  ⇒ ys_v12229
      | consUL_c11 x_v12230 xs_v12231 ⇒
        (consUL_c11 x_v12230 (((appendUL_i42 NULL) xs_v12231) ys_v12229))
      end

def appendLL_i40 =
  fn A_v12232 xs_v12233 ⇒
    ln ys_v12234 ⇒
      match xs_v12233 with
      | nilLL_c6  ⇒ ys_v12234
      | consLL_c7 x_v12235 xs_v12236 ⇒
        (consLL_c7 x_v12235 (((appendLL_i40 NULL) xs_v12236) ys_v12234))
      end

def readline_i25 =
  fn __v12237 ⇒
    let ch_v12238 ⇐ open stdin in
    let ch_v12239 ⇐ (send ch_v12238 true) in
    let __v12240 ⇐ recv ch_v12239 in
    match __v12240 with
    | (s_v12241, ch_v12242) ⇒
      let ch_v12243 ⇐ (send ch_v12242 false) in
      let __v12244 ⇐ close⇑ ch_v12243 in return s_v12241
    end

def print_i26 =
  fn s_v12245 ⇒
    let ch_v12246 ⇐ open stdout in
    let ch_v12247 ⇐ (send ch_v12246 true) in
    let ch_v12248 ⇐ (send ch_v12247 s_v12245) in
    let ch_v12249 ⇐ (send ch_v12248 false) in close⇑ ch_v12249

def prerr_i27 =
  fn s_v12250 ⇒
    let ch_v12251 ⇐ open stderr in
    let ch_v12252 ⇐ (send ch_v12251 true) in
    let ch_v12253 ⇐ (send ch_v12252 s_v12250) in
    let ch_v12254 ⇐ (send ch_v12253 false) in close⇑ ch_v12254

def splitU_i45 =
  fn zs_v12255 ⇒
    match zs_v12255 with
    | nilUU_c12  ⇒ (nilUU_c12, nilUU_c12)
    | consUU_c13 x_v12256 zs_v12257 ⇒
      match zs_v12257 with
      | nilUU_c12  ⇒ ((consUU_c13 x_v12256 nilUU_c12), nilUU_c12)
      | consUU_c13 y_v12258 zs_v12259 ⇒
        let __v12260 = (splitU_i45 zs_v12259) in
        match __v12260 with
        | (xs_v12261, ys_v12262) ⇒
          ((consUU_c13 x_v12256 xs_v12261), (consUU_c13 y_v12258 ys_v12262))
        end
      end
    end

def splitL_i44 =
  fn zs_v12263 ⇒
    match zs_v12263 with
    | nilUL_c10  ⇒ (nilUL_c10, nilUL_c10)
    | consUL_c11 x_v12264 zs_v12265 ⇒
      match zs_v12265 with
      | nilUL_c10  ⇒ ((consUL_c11 x_v12264 nilUL_c10), nilUL_c10)
      | consUL_c11 y_v12266 zs_v12267 ⇒
        let __v12268 = (splitL_i44 zs_v12267) in
        match __v12268 with
        | (xs_v12269, ys_v12270) ⇒
          ((consUL_c11 x_v12264 xs_v12269), (consUL_c11 y_v12266 ys_v12270))
        end
      end
    end

def mergeU_i47 =
  fn xs_v12271 ⇒
    ln ys_v12272 ⇒
      match xs_v12271 with
      | nilUU_c12  ⇒ ys_v12272
      | consUU_c13 x_v12273 xs0_v12274 ⇒
        match ys_v12272 with
        | nilUU_c12  ⇒ (consUU_c13 x_v12273 xs0_v12274)
        | consUU_c13 y_v12275 ys0_v12276 ⇒
          match ((lten_i4 x_v12273) y_v12275) with
          | true ⇒
            (consUU_c13
              x_v12273
              ((mergeU_i47 xs0_v12274) (consUU_c13 y_v12275 ys0_v12276)))
          | false ⇒
            (consUU_c13
              y_v12275
              ((mergeU_i47 (consUU_c13 x_v12273 xs0_v12274)) ys0_v12276))
          end
        end
      end

def mergeL_i46 =
  fn xs_v12277 ⇒
    ln ys_v12278 ⇒
      match xs_v12277 with
      | nilUL_c10  ⇒ ys_v12278
      | consUL_c11 x_v12279 xs0_v12280 ⇒
        match ys_v12278 with
        | nilUL_c10  ⇒ (consUL_c11 x_v12279 xs0_v12280)
        | consUL_c11 y_v12281 ys0_v12282 ⇒
          match ((lten_i4 x_v12279) y_v12281) with
          | true ⇒
            (consUL_c11
              x_v12279
              ((mergeL_i46 xs0_v12280) (consUL_c11 y_v12281 ys0_v12282)))
          | false ⇒
            (consUL_c11
              y_v12281
              ((mergeL_i46 (consUL_c11 x_v12279 xs0_v12280)) ys0_v12282))
          end
        end
      end

def msortU_i49 =
  fn zs_v12283 ⇒
    match zs_v12283 with
    | nilUU_c12  ⇒ nilUU_c12
    | consUU_c13 x_v12284 zs_v12285 ⇒
      match zs_v12285 with
      | nilUU_c12  ⇒ (consUU_c13 x_v12284 nilUU_c12)
      | consUU_c13 y_v12286 zs_v12287 ⇒
        let __v12288 =
          (splitU_i45 (consUU_c13 x_v12284 (consUU_c13 y_v12286 zs_v12287)))
        in
        match __v12288 with
        | (xs_v12289, ys_v12290) ⇒
          ((mergeU_i47 (msortU_i49 xs_v12289)) (msortU_i49 ys_v12290))
        end
      end
    end

def msortL_i48 =
  fn zs_v12291 ⇒
    match zs_v12291 with
    | nilUL_c10  ⇒ nilUL_c10
    | consUL_c11 x_v12292 zs_v12293 ⇒
      match zs_v12293 with
      | nilUL_c10  ⇒ (consUL_c11 x_v12292 nilUL_c10)
      | consUL_c11 y_v12294 zs_v12295 ⇒
        let __v12296 =
          (splitL_i44 (consUL_c11 x_v12292 (consUL_c11 y_v12294 zs_v12295)))
        in
        match __v12296 with
        | (xs_v12297, ys_v12298) ⇒
          ((mergeL_i46 (msortL_i48 xs_v12297)) (msortL_i48 ys_v12298))
        end
      end
    end

def cmsort_workerU_i53 =
  fn n_v12299 zs_v12300 ⇒
    ln c_v12301 ⇒
      match n_v12299 with
      | O ⇒
        let c_v12302 ⇐ (send c_v12301 (msortU_i49 zs_v12300)) in
        close⇑ c_v12302
      | S n_v12303 ⇒
        match zs_v12300 with
        | nilUU_c12  ⇒
          let c_v12304 ⇐ (send c_v12301 nilUU_c12) in close⇑ c_v12304
        | consUU_c13 z0_v12305 zs0_v12306 ⇒
          match zs0_v12306 with
          | nilUU_c12  ⇒
            let c_v12307 ⇐ (send c_v12301 nilUU_c12) in close⇑ c_v12307
          | consUU_c13 z1_v12308 zs1_v12309 ⇒
            let __v12310 =
              (splitU_i45
                (consUU_c13 z0_v12305 (consUU_c13 z1_v12308 zs1_v12309)))
            in
            match __v12310 with
            | (xs0_v12311, ys0_v12312) ⇒
              let r_v12313 ⇐
                fork r_v12314 in
                  (((cmsort_workerU_i53 n_v12303) xs0_v12311) r_v12314)
              in
              let ys1_v12315 = (msortU_i49 ys0_v12312) in
              let __v12316 ⇐ recv r_v12313 in
              match __v12316 with
              | (xs1_v12317, r_v12318) ⇒
                let zs_v12319 = ((mergeU_i47 xs1_v12317) ys1_v12315) in
                let c_v12320 ⇐ (send c_v12301 zs_v12319) in
                let __v12321 ⇐ close⇓ r_v12318 in close⇑ c_v12320
              end
            end
          end
        end
      end

def cmsort_workerL_i52 =
  fn n_v12322 zs_v12323 ⇒
    ln c_v12324 ⇒
      match n_v12322 with
      | O ⇒
        let c_v12325 ⇐ (send c_v12324 (msortL_i48 zs_v12323)) in
        close⇑ c_v12325
      | S n_v12326 ⇒
        match zs_v12323 with
        | nilUL_c10  ⇒
          let c_v12327 ⇐ (send c_v12324 nilUL_c10) in close⇑ c_v12327
        | consUL_c11 z0_v12328 zs0_v12329 ⇒
          match zs0_v12329 with
          | nilUL_c10  ⇒
            let c_v12330 ⇐ (send c_v12324 nilUL_c10) in close⇑ c_v12330
          | consUL_c11 z1_v12331 zs1_v12332 ⇒
            let __v12333 =
              (splitL_i44
                (consUL_c11 z0_v12328 (consUL_c11 z1_v12331 zs1_v12332)))
            in
            match __v12333 with
            | (xs0_v12334, ys0_v12335) ⇒
              let r_v12336 ⇐
                fork r_v12337 in
                  (((cmsort_workerL_i52 n_v12326) xs0_v12334) r_v12337)
              in
              let ys1_v12338 = (msortL_i48 ys0_v12335) in
              let __v12339 ⇐ recv r_v12336 in
              match __v12339 with
              | (xs1_v12340, r_v12341) ⇒
                let zs_v12342 = ((mergeL_i46 xs1_v12340) ys1_v12338) in
                let c_v12343 ⇐ (send c_v12324 zs_v12342) in
                let __v12344 ⇐ close⇓ r_v12341 in close⇑ c_v12343
              end
            end
          end
        end
      end

def cmsortU_i55 =
  fn zs0_v12345 ⇒
    let c_v12346 ⇐
      fork c_v12347 in (((cmsort_workerU_i53 4) zs0_v12345) c_v12347)
    in
    let __v12348 ⇐ recv c_v12346 in
    match __v12348 with
    | (zs1_v12349, c_v12350) ⇒
      let __v12351 ⇐ close⇓ c_v12350 in return zs1_v12349
    end

def cmsortL_i54 =
  fn zs0_v12352 ⇒
    let c_v12353 ⇐
      fork c_v12354 in (((cmsort_workerL_i52 4) zs0_v12352) c_v12354)
    in
    let __v12355 ⇐ recv c_v12353 in
    match __v12355 with
    | (zs1_v12356, c_v12357) ⇒
      let __v12358 ⇐ close⇓ c_v12357 in return zs1_v12356
    end

def mkListU_i57 =
  fn n_v12359 ⇒
    match n_v12359 with
    | O ⇒ nilUU_c12
    | S n0_v12360 ⇒ (consUU_c13 n_v12359 (mkListU_i57 n0_v12360))
    end

def mkListL_i56 =
  fn n_v12361 ⇒
    match n_v12361 with
    | O ⇒ nilUL_c10
    | S n0_v12362 ⇒ (consUL_c11 n_v12361 (mkListL_i56 n0_v12362))
    end

main =
  let test_v12363 = (mkListU_i57 6000) in
  let sorted_v12364 ⇐ (cmsortU_i55 test_v12363) in return ()

trans12 success--------------------------

fun andb_i1(b1_v12681, b2_v12682) = if b1_v12681 then
                                      b2_v12682
                                    else
                                      0

val andbclo_i58 = fn b1_v12683 b2_v12684 ⇒ andb_i1(b1_v12683, b2_v12684)

fun orb_i2(b1_v12685, b2_v12686) = if b1_v12685 then
                                     1
                                   else
                                     b2_v12686

val orbclo_i59 = fn b1_v12687 b2_v12688 ⇒ orb_i2(b1_v12687, b2_v12688)

fun notb_i3(b_v12689) = if b_v12689 then
                          0
                        else
                          1

val notbclo_i60 = fn b_v12690 ⇒ notb_i3(b_v12690)

fun lten_i4(x_v12691, y_v12692) =
  let __v12693 = x_v12691 in
  if __v12693 then
    let x_v12694 = __v12693.-1 in
    let __v12695 = y_v12692 in
    if __v12695 then
      let y_v12696 = __v12695.-1 in lten_i4(x_v12694, y_v12696)
    else
      0
  else
    1

val ltenclo_i61 = fn x_v12697 y_v12698 ⇒ lten_i4(x_v12697, y_v12698)

fun gten_i5(x_v12699, y_v12700) =
  let __v12701 = x_v12699 in
  if __v12701 then
    let x_v12702 = __v12701.-1 in
    let __v12703 = y_v12700 in
    if __v12703 then
      let y_v12704 = __v12703.-1 in gten_i5(x_v12702, y_v12704)
    else
      1
  else
    let __v12705 = y_v12700 in
    if __v12705 then
      let __v12706 = __v12705.-1 in 0
    else
      1

val gtenclo_i62 = fn x_v12707 y_v12708 ⇒ gten_i5(x_v12707, y_v12708)

fun ltn_i6(x_v12709, y_v12710) =
  let __v12711 = x_v12709 in
  if __v12711 then
    let x_v12712 = __v12711.-1 in
    let __v12713 = y_v12710 in
    if __v12713 then
      let y_v12714 = __v12713.-1 in ltn_i6(x_v12712, y_v12714)
    else
      0
  else
    let __v12715 = y_v12710 in
    if __v12715 then
      let y_v12716 = __v12715.-1 in 1
    else
      0

val ltnclo_i63 = fn x_v12717 y_v12718 ⇒ ltn_i6(x_v12717, y_v12718)

fun gtn_i7(x_v12719, y_v12720) =
  let __v12721 = x_v12719 in
  if __v12721 then
    let x_v12722 = __v12721.-1 in
    let __v12723 = y_v12720 in
    if __v12723 then
      let y_v12724 = __v12723.-1 in gtn_i7(x_v12722, y_v12724)
    else
      1
  else
    0

val gtnclo_i64 = fn x_v12725 y_v12726 ⇒ gtn_i7(x_v12725, y_v12726)

fun eqn_i8(x_v12727, y_v12728) =
  let __v12729 = x_v12727 in
  if __v12729 then
    let x_v12730 = __v12729.-1 in
    let __v12731 = y_v12728 in
    if __v12731 then
      let y_v12732 = __v12731.-1 in eqn_i8(x_v12730, y_v12732)
    else
      0
  else
    let __v12733 = y_v12728 in
    if __v12733 then
      let __v12734 = __v12733.-1 in 0
    else
      1

val eqnclo_i65 = fn x_v12735 y_v12736 ⇒ eqn_i8(x_v12735, y_v12736)

fun pred_i9(x_v12737) =
  let __v12738 = x_v12737 in
  if __v12738 then
    let x_v12739 = __v12738.-1 in x_v12739
  else
    0

val predclo_i66 = fn x_v12740 ⇒ pred_i9(x_v12740)

fun addn_i10(x_v12741, y_v12742) =
  let __v12743 = x_v12741 in
  if __v12743 then
    let x_v12744 = __v12743.-1 in addn_i10(x_v12744, y_v12742).+1
  else
    y_v12742

val addnclo_i67 = fn x_v12745 y_v12746 ⇒ addn_i10(x_v12745, y_v12746)

fun subn_i11(x_v12747, y_v12748) =
  let __v12749 = y_v12748 in
  if __v12749 then
    let y_v12750 = __v12749.-1 in subn_i11(pred_i9(x_v12747), y_v12750)
  else
    x_v12747

val subnclo_i68 = fn x_v12751 y_v12752 ⇒ subn_i11(x_v12751, y_v12752)

fun muln_i12(x_v12753, y_v12754) =
  let __v12755 = x_v12753 in
  if __v12755 then
    let x_v12756 = __v12755.-1 in
    addn_i10(y_v12754, muln_i12(x_v12756, y_v12754))
  else
    0

val mulnclo_i69 = fn x_v12757 y_v12758 ⇒ muln_i12(x_v12757, y_v12758)

fun divn_i13(x_v12759, y_v12760) =
  if ltn_i6(x_v12759, y_v12760) then
    0
  else
    divn_i13(subn_i11(x_v12759, y_v12760), y_v12760).+1

val divnclo_i70 = fn x_v12761 y_v12762 ⇒ divn_i13(x_v12761, y_v12762)

fun modn_i14(x_v12763, y_v12764) =
  subn_i11(x_v12763, muln_i12(divn_i13(x_v12763, y_v12764), y_v12764))

val modnclo_i71 = fn x_v12765 y_v12766 ⇒ modn_i14(x_v12765, y_v12766)

fun cats_i15(s1_v12767, s2_v12768) =
  match s1_v12767 with
  | EmptyString_c2  ⇒ s2_v12768
  | String_c3 c_v12769 s1_v12770 ⇒
    (String_c3 c_v12769 cats_i15(s1_v12770, s2_v12768))
  end

val catsclo_i72 = fn s1_v12771 s2_v12772 ⇒ cats_i15(s1_v12771, s2_v12772)

fun strlen_i16(s_v12773) =
  match s_v12773 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v12774 s_v12775 ⇒ strlen_i16(s_v12775).+1
  end

val strlenclo_i73 = fn s_v12776 ⇒ strlen_i16(s_v12776)

fun lenUU_i39(A_v12777, xs_v12778) =
  match xs_v12778 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v12779 xs_v12780 ⇒
    match lenUU_i39(NULL, xs_v12780) with
    | (n_v12781, xs_v12782) ⇒
      (n_v12781.+1, (consUU_c13 x_v12779 xs_v12782))
    end
  end

val lenUUclo_i74 = fn A_v12783 xs_v12784 ⇒ lenUU_i39(A_v12783, xs_v12784)

fun lenUL_i38(A_v12785, xs_v12786) =
  match xs_v12786 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v12787 xs_v12788 ⇒
    match lenUL_i38(NULL, xs_v12788) with
    | (n_v12789, xs_v12790) ⇒
      (n_v12789.+1, (consUL_c11 x_v12787 xs_v12790))
    end
  end

val lenULclo_i75 = fn A_v12791 xs_v12792 ⇒ lenUL_i38(A_v12791, xs_v12792)

fun lenLL_i36(A_v12793, xs_v12794) =
  match xs_v12794 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v12795 xs_v12796 ⇒
    match lenLL_i36(NULL, xs_v12796) with
    | (n_v12797, xs_v12798) ⇒ (n_v12797.+1, (consLL_c7 x_v12795 xs_v12798))
    end
  end

val lenLLclo_i76 = fn A_v12799 xs_v12800 ⇒ lenLL_i36(A_v12799, xs_v12800)

fun appendUU_i43(A_v12801, xs_v12802, ys_v12803) =
  match xs_v12802 with
  | nilUU_c12  ⇒ ys_v12803
  | consUU_c13 x_v12804 xs_v12805 ⇒
    (consUU_c13 x_v12804 appendUU_i43(NULL, xs_v12805, ys_v12803))
  end

val appendUUclo_i77 =
  fn A_v12806 xs_v12807 ⇒
    ln ys_v12808 ⇒ appendUU_i43(A_v12806, xs_v12807, ys_v12808)

fun appendUL_i42(A_v12809, xs_v12810, ys_v12811) =
  match xs_v12810 with
  | nilUL_c10  ⇒ ys_v12811
  | consUL_c11 x_v12812 xs_v12813 ⇒
    (consUL_c11 x_v12812 appendUL_i42(NULL, xs_v12813, ys_v12811))
  end

val appendULclo_i78 =
  fn A_v12814 xs_v12815 ⇒
    ln ys_v12816 ⇒ appendUL_i42(A_v12814, xs_v12815, ys_v12816)

fun appendLL_i40(A_v12817, xs_v12818, ys_v12819) =
  match xs_v12818 with
  | nilLL_c6  ⇒ ys_v12819
  | consLL_c7 x_v12820 xs_v12821 ⇒
    (consLL_c7 x_v12820 appendLL_i40(NULL, xs_v12821, ys_v12819))
  end

val appendLLclo_i79 =
  fn A_v12822 xs_v12823 ⇒
    ln ys_v12824 ⇒ appendLL_i40(A_v12822, xs_v12823, ys_v12824)

fun readline_i25(__v12825) =
  ln __v12826 ⇒
    let ch_v12827 = (ln __v12828 ⇒ open stdin) NULL in
    let ch_v12829 =
      ((fn x_v12830 ⇒ ln __v12831 ⇒ send(ch_v12827, x_v12830)) 1) NULL
    in
    let __v12832 = (ln __v12833 ⇒ recv(ch_v12829)) NULL in
    (match __v12832 with
     | (s_v12834, ch_v12835) ⇒
       ln __v12836 ⇒
         let ch_v12837 =
           ((fn x_v12838 ⇒ ln __v12839 ⇒ send(ch_v12835, x_v12838)) 0)
             NULL
         in
         let __v12840 =
           (ln __v12841 ⇒ let __v12842 = ch_v12837 in NULL) NULL
         in (ln __v12843 ⇒ s_v12834) NULL
     end) NULL

val readlineclo_i80 = fn __v12844 ⇒ readline_i25(__v12844)

fun print_i26(s_v12845) =
  ln __v12846 ⇒
    let ch_v12847 = (ln __v12848 ⇒ open stdout) NULL in
    let ch_v12849 =
      ((fn x_v12850 ⇒ ln __v12851 ⇒ send(ch_v12847, x_v12850)) 1) NULL
    in
    let ch_v12852 =
      ((fn x_v12853 ⇒ ln __v12854 ⇒ send(ch_v12849, x_v12853)) s_v12845)
        NULL
    in
    let ch_v12855 =
      ((fn x_v12856 ⇒ ln __v12857 ⇒ send(ch_v12852, x_v12856)) 0) NULL
    in (ln __v12858 ⇒ let __v12859 = ch_v12855 in NULL) NULL

val printclo_i81 = fn s_v12860 ⇒ print_i26(s_v12860)

fun prerr_i27(s_v12861) =
  ln __v12862 ⇒
    let ch_v12863 = (ln __v12864 ⇒ open stderr) NULL in
    let ch_v12865 =
      ((fn x_v12866 ⇒ ln __v12867 ⇒ send(ch_v12863, x_v12866)) 1) NULL
    in
    let ch_v12868 =
      ((fn x_v12869 ⇒ ln __v12870 ⇒ send(ch_v12865, x_v12869)) s_v12861)
        NULL
    in
    let ch_v12871 =
      ((fn x_v12872 ⇒ ln __v12873 ⇒ send(ch_v12868, x_v12872)) 0) NULL
    in (ln __v12874 ⇒ let __v12875 = ch_v12871 in NULL) NULL

val prerrclo_i82 = fn s_v12876 ⇒ prerr_i27(s_v12876)

fun splitU_i45(zs_v12877) =
  match zs_v12877 with
  | nilUU_c12  ⇒ (nilUU_c12, nilUU_c12)
  | consUU_c13 x_v12878 zs_v12879 ⇒
    match zs_v12879 with
    | nilUU_c12  ⇒ ((consUU_c13 x_v12878 nilUU_c12), nilUU_c12)
    | consUU_c13 y_v12880 zs_v12881 ⇒
      let __v12882 = splitU_i45(zs_v12881) in
      match __v12882 with
      | (xs_v12883, ys_v12884) ⇒
        ((consUU_c13 x_v12878 xs_v12883), (consUU_c13 y_v12880 ys_v12884))
      end
    end
  end

val splitUclo_i83 = fn zs_v12885 ⇒ splitU_i45(zs_v12885)

fun splitL_i44(zs_v12886) =
  match zs_v12886 with
  | nilUL_c10  ⇒ (nilUL_c10, nilUL_c10)
  | consUL_c11 x_v12887 zs_v12888 ⇒
    match zs_v12888 with
    | nilUL_c10  ⇒ ((consUL_c11 x_v12887 nilUL_c10), nilUL_c10)
    | consUL_c11 y_v12889 zs_v12890 ⇒
      let __v12891 = splitL_i44(zs_v12890) in
      match __v12891 with
      | (xs_v12892, ys_v12893) ⇒
        ((consUL_c11 x_v12887 xs_v12892), (consUL_c11 y_v12889 ys_v12893))
      end
    end
  end

val splitLclo_i84 = fn zs_v12894 ⇒ splitL_i44(zs_v12894)

fun mergeU_i47(xs_v12895, ys_v12896) =
  match xs_v12895 with
  | nilUU_c12  ⇒ ys_v12896
  | consUU_c13 x_v12897 xs0_v12898 ⇒
    match ys_v12896 with
    | nilUU_c12  ⇒ (consUU_c13 x_v12897 xs0_v12898)
    | consUU_c13 y_v12899 ys0_v12900 ⇒
      if lten_i4(x_v12897, y_v12899) then
        (consUU_c13
          x_v12897 mergeU_i47(xs0_v12898, (consUU_c13 y_v12899 ys0_v12900)))
      else
        (consUU_c13
          y_v12899 mergeU_i47((consUU_c13 x_v12897 xs0_v12898), ys0_v12900))
    end
  end

val mergeUclo_i85 =
  fn xs_v12901 ⇒ ln ys_v12902 ⇒ mergeU_i47(xs_v12901, ys_v12902)

fun mergeL_i46(xs_v12903, ys_v12904) =
  match xs_v12903 with
  | nilUL_c10  ⇒ ys_v12904
  | consUL_c11 x_v12905 xs0_v12906 ⇒
    match ys_v12904 with
    | nilUL_c10  ⇒ (consUL_c11 x_v12905 xs0_v12906)
    | consUL_c11 y_v12907 ys0_v12908 ⇒
      if lten_i4(x_v12905, y_v12907) then
        (consUL_c11
          x_v12905 mergeL_i46(xs0_v12906, (consUL_c11 y_v12907 ys0_v12908)))
      else
        (consUL_c11
          y_v12907 mergeL_i46((consUL_c11 x_v12905 xs0_v12906), ys0_v12908))
    end
  end

val mergeLclo_i86 =
  fn xs_v12909 ⇒ ln ys_v12910 ⇒ mergeL_i46(xs_v12909, ys_v12910)

fun msortU_i49(zs_v12911) =
  match zs_v12911 with
  | nilUU_c12  ⇒ nilUU_c12
  | consUU_c13 x_v12912 zs_v12913 ⇒
    match zs_v12913 with
    | nilUU_c12  ⇒ (consUU_c13 x_v12912 nilUU_c12)
    | consUU_c13 y_v12914 zs_v12915 ⇒
      let __v12916 =
        splitU_i45((consUU_c13 x_v12912 (consUU_c13 y_v12914 zs_v12915)))
      in
      match __v12916 with
      | (xs_v12917, ys_v12918) ⇒
        mergeU_i47(msortU_i49(xs_v12917), msortU_i49(ys_v12918))
      end
    end
  end

val msortUclo_i87 = fn zs_v12919 ⇒ msortU_i49(zs_v12919)

fun msortL_i48(zs_v12920) =
  match zs_v12920 with
  | nilUL_c10  ⇒ nilUL_c10
  | consUL_c11 x_v12921 zs_v12922 ⇒
    match zs_v12922 with
    | nilUL_c10  ⇒ (consUL_c11 x_v12921 nilUL_c10)
    | consUL_c11 y_v12923 zs_v12924 ⇒
      let __v12925 =
        splitL_i44((consUL_c11 x_v12921 (consUL_c11 y_v12923 zs_v12924)))
      in
      match __v12925 with
      | (xs_v12926, ys_v12927) ⇒
        mergeL_i46(msortL_i48(xs_v12926), msortL_i48(ys_v12927))
      end
    end
  end

val msortLclo_i88 = fn zs_v12928 ⇒ msortL_i48(zs_v12928)

fun cmsort_workerU_i53(n_v12929, zs_v12930, c_v12931) =
  let __v12932 = n_v12929 in
  if __v12932 then
    let n_v12933 = __v12932.-1 in
    match zs_v12930 with
    | nilUU_c12  ⇒
      ln __v12934 ⇒
        let c_v12935 =
          ((fn x_v12936 ⇒ ln __v12937 ⇒ send(c_v12931, x_v12936))
             nilUU_c12)
            NULL
        in (ln __v12938 ⇒ let __v12939 = c_v12935 in NULL) NULL
    | consUU_c13 z0_v12940 zs0_v12941 ⇒
      match zs0_v12941 with
      | nilUU_c12  ⇒
        ln __v12942 ⇒
          let c_v12943 =
            ((fn x_v12944 ⇒ ln __v12945 ⇒ send(c_v12931, x_v12944))
               nilUU_c12)
              NULL
          in (ln __v12946 ⇒ let __v12947 = c_v12943 in NULL) NULL
      | consUU_c13 z1_v12948 zs1_v12949 ⇒
        let __v12950 =
          splitU_i45((consUU_c13 z0_v12940 (consUU_c13 z1_v12948 zs1_v12949)))
        in
        match __v12950 with
        | (xs0_v12951, ys0_v12952) ⇒
          ln __v12953 ⇒
            let r_v12954 =
              (ln __v12955 ⇒
                 fork r_v12956 in
                   (cmsort_workerU_i53(n_v12933, xs0_v12951, r_v12956)) NULL)
                NULL
            in
            (let ys1_v12957 = msortU_i49(ys0_v12952) in
             ln __v12958 ⇒
               let __v12959 = (ln __v12960 ⇒ recv(r_v12954)) NULL in
               (match __v12959 with
                | (xs1_v12961, r_v12962) ⇒
                  let zs_v12963 = mergeU_i47(xs1_v12961, ys1_v12957) in
                  ln __v12964 ⇒
                    let c_v12965 =
                      ((fn x_v12966 ⇒
                          ln __v12967 ⇒ send(c_v12931, x_v12966))
                         zs_v12963)
                        NULL
                    in
                    let __v12968 = (ln __v12969 ⇒ close(r_v12962)) NULL in
                    (ln __v12970 ⇒ let __v12971 = c_v12965 in NULL) NULL
                end) NULL)
              NULL
        end
      end
    end
  else
    ln __v12972 ⇒
      let c_v12973 =
        ((fn x_v12974 ⇒ ln __v12975 ⇒ send(c_v12931, x_v12974))
           msortU_i49(zs_v12930))
          NULL
      in (ln __v12976 ⇒ let __v12977 = c_v12973 in NULL) NULL

val cmsort_workerUclo_i89 =
  fn n_v12978 zs_v12979 ⇒
    ln c_v12980 ⇒ cmsort_workerU_i53(n_v12978, zs_v12979, c_v12980)

fun cmsort_workerL_i52(n_v12981, zs_v12982, c_v12983) =
  let __v12984 = n_v12981 in
  if __v12984 then
    let n_v12985 = __v12984.-1 in
    match zs_v12982 with
    | nilUL_c10  ⇒
      ln __v12986 ⇒
        let c_v12987 =
          ((ln x_v12988 __v12989 ⇒ send(c_v12983, x_v12988)) nilUL_c10)
            NULL
        in (ln __v12990 ⇒ let __v12991 = c_v12987 in NULL) NULL
    | consUL_c11 z0_v12992 zs0_v12993 ⇒
      match zs0_v12993 with
      | nilUL_c10  ⇒
        ln __v12994 ⇒
          let c_v12995 =
            ((ln x_v12996 __v12997 ⇒ send(c_v12983, x_v12996)) nilUL_c10)
              NULL
          in (ln __v12998 ⇒ let __v12999 = c_v12995 in NULL) NULL
      | consUL_c11 z1_v13000 zs1_v13001 ⇒
        let __v13002 =
          splitL_i44((consUL_c11 z0_v12992 (consUL_c11 z1_v13000 zs1_v13001)))
        in
        match __v13002 with
        | (xs0_v13003, ys0_v13004) ⇒
          ln __v13005 ⇒
            let r_v13006 =
              (ln __v13007 ⇒
                 fork r_v13008 in
                   (cmsort_workerL_i52(n_v12985, xs0_v13003, r_v13008)) NULL)
                NULL
            in
            (let ys1_v13009 = msortL_i48(ys0_v13004) in
             ln __v13010 ⇒
               let __v13011 = (ln __v13012 ⇒ recv(r_v13006)) NULL in
               (match __v13011 with
                | (xs1_v13013, r_v13014) ⇒
                  let zs_v13015 = mergeL_i46(xs1_v13013, ys1_v13009) in
                  ln __v13016 ⇒
                    let c_v13017 =
                      ((ln x_v13018 __v13019 ⇒ send(c_v12983, x_v13018))
                         zs_v13015)
                        NULL
                    in
                    let __v13020 = (ln __v13021 ⇒ close(r_v13014)) NULL in
                    (ln __v13022 ⇒ let __v13023 = c_v13017 in NULL) NULL
                end) NULL)
              NULL
        end
      end
    end
  else
    ln __v13024 ⇒
      let c_v13025 =
        ((ln x_v13026 __v13027 ⇒ send(c_v12983, x_v13026))
           msortL_i48(zs_v12982))
          NULL
      in (ln __v13028 ⇒ let __v13029 = c_v13025 in NULL) NULL

val cmsort_workerLclo_i90 =
  fn n_v13030 zs_v13031 ⇒
    ln c_v13032 ⇒ cmsort_workerL_i52(n_v13030, zs_v13031, c_v13032)

fun cmsortU_i55(zs0_v13033) =
  ln __v13034 ⇒
    let c_v13035 =
      (ln __v13036 ⇒
         fork c_v13037 in (cmsort_workerU_i53(4, zs0_v13033, c_v13037)) NULL)
        NULL
    in
    let __v13038 = (ln __v13039 ⇒ recv(c_v13035)) NULL in
    (match __v13038 with
     | (zs1_v13040, c_v13041) ⇒
       ln __v13042 ⇒
         let __v13043 = (ln __v13044 ⇒ close(c_v13041)) NULL in
         (ln __v13045 ⇒ zs1_v13040) NULL
     end) NULL

val cmsortUclo_i91 = fn zs0_v13046 ⇒ cmsortU_i55(zs0_v13046)

fun cmsortL_i54(zs0_v13047) =
  ln __v13048 ⇒
    let c_v13049 =
      (ln __v13050 ⇒
         fork c_v13051 in (cmsort_workerL_i52(4, zs0_v13047, c_v13051)) NULL)
        NULL
    in
    let __v13052 = (ln __v13053 ⇒ recv(c_v13049)) NULL in
    (match __v13052 with
     | (zs1_v13054, c_v13055) ⇒
       ln __v13056 ⇒
         let __v13057 = (ln __v13058 ⇒ close(c_v13055)) NULL in
         (ln __v13059 ⇒ zs1_v13054) NULL
     end) NULL

val cmsortLclo_i92 = fn zs0_v13060 ⇒ cmsortL_i54(zs0_v13060)

fun mkListU_i57(n_v13061) =
  let __v13062 = n_v13061 in
  if __v13062 then
    let n0_v13063 = __v13062.-1 in
    (consUU_c13 n_v13061 mkListU_i57(n0_v13063))
  else
    nilUU_c12

val mkListUclo_i93 = fn n_v13064 ⇒ mkListU_i57(n_v13064)

fun mkListL_i56(n_v13065) =
  let __v13066 = n_v13065 in
  if __v13066 then
    let n0_v13067 = __v13066.-1 in
    (consUL_c11 n_v13065 mkListL_i56(n0_v13067))
  else
    nilUL_c10

val mkListLclo_i94 = fn n_v13068 ⇒ mkListL_i56(n_v13068)

main =
  (let test_v13069 = mkListU_i57(6000) in
   ln __v13070 ⇒
     let sorted_v13071 = (cmsortU_i55(test_v13069)) NULL in
     (ln __v13072 ⇒ NULL) NULL)
    NULL

trans23 success--------------------------

fun andb_i1(b1_v13786, b2_v13787) = if b1_v13786 then
                                      b2_v13787
                                    else
                                      0

val andbclo_i58 = fn b1_v13788 b2_v13789 ⇒ andb_i1(b1_v13788, b2_v13789)

fun orb_i2(b1_v13790, b2_v13791) = if b1_v13790 then
                                     1
                                   else
                                     b2_v13791

val orbclo_i59 = fn b1_v13792 b2_v13793 ⇒ orb_i2(b1_v13792, b2_v13793)

fun notb_i3(b_v13794) = if b_v13794 then
                          0
                        else
                          1

val notbclo_i60 = fn b_v13795 ⇒ notb_i3(b_v13795)

fun lten_i4(x_v13796, y_v13797) =
  if x_v13796 then
    if y_v13797 then
      lten_i4(x_v13796.-1, y_v13797.-1)
    else
      0
  else
    1

val ltenclo_i61 = fn x_v13798 y_v13799 ⇒ lten_i4(x_v13798, y_v13799)

fun gten_i5(x_v13800, y_v13801) =
  if x_v13800 then
    if y_v13801 then
      gten_i5(x_v13800.-1, y_v13801.-1)
    else
      1
  else
    if y_v13801 then
      0
    else
      1

val gtenclo_i62 = fn x_v13802 y_v13803 ⇒ gten_i5(x_v13802, y_v13803)

fun ltn_i6(x_v13804, y_v13805) =
  if x_v13804 then
    if y_v13805 then
      ltn_i6(x_v13804.-1, y_v13805.-1)
    else
      0
  else
    if y_v13805 then
      1
    else
      0

val ltnclo_i63 = fn x_v13806 y_v13807 ⇒ ltn_i6(x_v13806, y_v13807)

fun gtn_i7(x_v13808, y_v13809) =
  if x_v13808 then
    if y_v13809 then
      gtn_i7(x_v13808.-1, y_v13809.-1)
    else
      1
  else
    0

val gtnclo_i64 = fn x_v13810 y_v13811 ⇒ gtn_i7(x_v13810, y_v13811)

fun eqn_i8(x_v13812, y_v13813) =
  if x_v13812 then
    if y_v13813 then
      eqn_i8(x_v13812.-1, y_v13813.-1)
    else
      0
  else
    if y_v13813 then
      0
    else
      1

val eqnclo_i65 = fn x_v13814 y_v13815 ⇒ eqn_i8(x_v13814, y_v13815)

fun pred_i9(x_v13816) = if x_v13816 then
                          x_v13816.-1
                        else
                          0

val predclo_i66 = fn x_v13817 ⇒ pred_i9(x_v13817)

fun addn_i10(x_v13818, y_v13819) =
  if x_v13818 then
    addn_i10(x_v13818.-1, y_v13819).+1
  else
    y_v13819

val addnclo_i67 = fn x_v13820 y_v13821 ⇒ addn_i10(x_v13820, y_v13821)

fun subn_i11(x_v13822, y_v13823) =
  if y_v13823 then
    subn_i11(pred_i9(x_v13822), y_v13823.-1)
  else
    x_v13822

val subnclo_i68 = fn x_v13824 y_v13825 ⇒ subn_i11(x_v13824, y_v13825)

fun muln_i12(x_v13826, y_v13827) =
  if x_v13826 then
    addn_i10(y_v13827, muln_i12(x_v13826.-1, y_v13827))
  else
    0

val mulnclo_i69 = fn x_v13828 y_v13829 ⇒ muln_i12(x_v13828, y_v13829)

fun divn_i13(x_v13830, y_v13831) =
  if ltn_i6(x_v13830, y_v13831) then
    0
  else
    divn_i13(subn_i11(x_v13830, y_v13831), y_v13831).+1

val divnclo_i70 = fn x_v13832 y_v13833 ⇒ divn_i13(x_v13832, y_v13833)

fun modn_i14(x_v13834, y_v13835) =
  subn_i11(x_v13834, muln_i12(divn_i13(x_v13834, y_v13835), y_v13835))

val modnclo_i71 = fn x_v13836 y_v13837 ⇒ modn_i14(x_v13836, y_v13837)

fun cats_i15(s1_v13838, s2_v13839) =
  match s1_v13838 with
  | EmptyString_c2  ⇒ s2_v13839
  | String_c3 c_v13840 s1_v13841 ⇒
    (String_c3 c_v13840 cats_i15(s1_v13841, s2_v13839))
  end

val catsclo_i72 = fn s1_v13842 s2_v13843 ⇒ cats_i15(s1_v13842, s2_v13843)

fun strlen_i16(s_v13844) =
  match s_v13844 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v13845 s_v13846 ⇒ strlen_i16(s_v13846).+1
  end

val strlenclo_i73 = fn s_v13847 ⇒ strlen_i16(s_v13847)

fun lenUU_i39(A_v13848, xs_v13849) =
  match xs_v13849 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v13850 xs_v13851 ⇒
    match lenUU_i39(NULL, xs_v13851) with
    | (n_v13852, xs_v13853) ⇒
      (n_v13852.+1, (consUU_c13 x_v13850 xs_v13853))
    end
  end

val lenUUclo_i74 = fn A_v13854 xs_v13855 ⇒ lenUU_i39(A_v13854, xs_v13855)

fun lenUL_i38(A_v13856, xs_v13857) =
  match xs_v13857 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v13858 xs_v13859 ⇒
    match lenUL_i38(NULL, xs_v13859) with
    | (n_v13860, xs_v13861) ⇒
      (n_v13860.+1, (consUL_c11 x_v13858 xs_v13861))
    end
  end

val lenULclo_i75 = fn A_v13862 xs_v13863 ⇒ lenUL_i38(A_v13862, xs_v13863)

fun lenLL_i36(A_v13864, xs_v13865) =
  match xs_v13865 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v13866 xs_v13867 ⇒
    match lenLL_i36(NULL, xs_v13867) with
    | (n_v13868, xs_v13869) ⇒ (n_v13868.+1, (consLL_c7 x_v13866 xs_v13869))
    end
  end

val lenLLclo_i76 = fn A_v13870 xs_v13871 ⇒ lenLL_i36(A_v13870, xs_v13871)

fun appendUU_i43(A_v13872, xs_v13873, ys_v13874) =
  match xs_v13873 with
  | nilUU_c12  ⇒ ys_v13874
  | consUU_c13 x_v13875 xs_v13876 ⇒
    (consUU_c13 x_v13875 appendUU_i43(NULL, xs_v13876, ys_v13874))
  end

val appendUUclo_i77 =
  fn A_v13877 xs_v13878 ⇒
    ln ys_v13879 ⇒ appendUU_i43(A_v13877, xs_v13878, ys_v13879)

fun appendUL_i42(A_v13880, xs_v13881, ys_v13882) =
  match xs_v13881 with
  | nilUL_c10  ⇒ ys_v13882
  | consUL_c11 x_v13883 xs_v13884 ⇒
    (consUL_c11 x_v13883 appendUL_i42(NULL, xs_v13884, ys_v13882))
  end

val appendULclo_i78 =
  fn A_v13885 xs_v13886 ⇒
    ln ys_v13887 ⇒ appendUL_i42(A_v13885, xs_v13886, ys_v13887)

fun appendLL_i40(A_v13888, xs_v13889, ys_v13890) =
  match xs_v13889 with
  | nilLL_c6  ⇒ ys_v13890
  | consLL_c7 x_v13891 xs_v13892 ⇒
    (consLL_c7 x_v13891 appendLL_i40(NULL, xs_v13892, ys_v13890))
  end

val appendLLclo_i79 =
  fn A_v13893 xs_v13894 ⇒
    ln ys_v13895 ⇒ appendLL_i40(A_v13893, xs_v13894, ys_v13895)

fun readline_i25(__v13896) =
  ln __v13897 ⇒
    let ch_v13898 = open stdin in
    let ch_v13899 = send(ch_v13898, 1) in
    let __v13900 = recv(ch_v13899) in
    match __v13900 with
    | (s_v13901, ch_v13902) ⇒
      let ch_v13903 = send(ch_v13902, 0) in s_v13901
    end

val readlineclo_i80 = fn __v13904 ⇒ readline_i25(__v13904)

fun print_i26(s_v13905) =
  ln __v13906 ⇒
    let ch_v13907 = open stdout in
    let ch_v13908 = send(ch_v13907, 1) in
    let ch_v13909 = send(ch_v13908, s_v13905) in
    let ch_v13910 = send(ch_v13909, 0) in NULL

val printclo_i81 = fn s_v13911 ⇒ print_i26(s_v13911)

fun prerr_i27(s_v13912) =
  ln __v13913 ⇒
    let ch_v13914 = open stderr in
    let ch_v13915 = send(ch_v13914, 1) in
    let ch_v13916 = send(ch_v13915, s_v13912) in
    let ch_v13917 = send(ch_v13916, 0) in NULL

val prerrclo_i82 = fn s_v13918 ⇒ prerr_i27(s_v13918)

fun splitU_i45(zs_v13919) =
  match zs_v13919 with
  | nilUU_c12  ⇒ (nilUU_c12, nilUU_c12)
  | consUU_c13 x_v13920 zs_v13921 ⇒
    match zs_v13921 with
    | nilUU_c12  ⇒ ((consUU_c13 x_v13920 nilUU_c12), nilUU_c12)
    | consUU_c13 y_v13922 zs_v13923 ⇒
      let __v13924 = splitU_i45(zs_v13923) in
      match __v13924 with
      | (xs_v13925, ys_v13926) ⇒
        ((consUU_c13 x_v13920 xs_v13925), (consUU_c13 y_v13922 ys_v13926))
      end
    end
  end

val splitUclo_i83 = fn zs_v13927 ⇒ splitU_i45(zs_v13927)

fun splitL_i44(zs_v13928) =
  match zs_v13928 with
  | nilUL_c10  ⇒ (nilUL_c10, nilUL_c10)
  | consUL_c11 x_v13929 zs_v13930 ⇒
    match zs_v13930 with
    | nilUL_c10  ⇒ ((consUL_c11 x_v13929 nilUL_c10), nilUL_c10)
    | consUL_c11 y_v13931 zs_v13932 ⇒
      let __v13933 = splitL_i44(zs_v13932) in
      match __v13933 with
      | (xs_v13934, ys_v13935) ⇒
        ((consUL_c11 x_v13929 xs_v13934), (consUL_c11 y_v13931 ys_v13935))
      end
    end
  end

val splitLclo_i84 = fn zs_v13936 ⇒ splitL_i44(zs_v13936)

fun mergeU_i47(xs_v13937, ys_v13938) =
  match xs_v13937 with
  | nilUU_c12  ⇒ ys_v13938
  | consUU_c13 x_v13939 xs0_v13940 ⇒
    match ys_v13938 with
    | nilUU_c12  ⇒ (consUU_c13 x_v13939 xs0_v13940)
    | consUU_c13 y_v13941 ys0_v13942 ⇒
      if lten_i4(x_v13939, y_v13941) then
        (consUU_c13
          x_v13939 mergeU_i47(xs0_v13940, (consUU_c13 y_v13941 ys0_v13942)))
      else
        (consUU_c13
          y_v13941 mergeU_i47((consUU_c13 x_v13939 xs0_v13940), ys0_v13942))
    end
  end

val mergeUclo_i85 =
  fn xs_v13943 ⇒ ln ys_v13944 ⇒ mergeU_i47(xs_v13943, ys_v13944)

fun mergeL_i46(xs_v13945, ys_v13946) =
  match xs_v13945 with
  | nilUL_c10  ⇒ ys_v13946
  | consUL_c11 x_v13947 xs0_v13948 ⇒
    match ys_v13946 with
    | nilUL_c10  ⇒ (consUL_c11 x_v13947 xs0_v13948)
    | consUL_c11 y_v13949 ys0_v13950 ⇒
      if lten_i4(x_v13947, y_v13949) then
        (consUL_c11
          x_v13947 mergeL_i46(xs0_v13948, (consUL_c11 y_v13949 ys0_v13950)))
      else
        (consUL_c11
          y_v13949 mergeL_i46((consUL_c11 x_v13947 xs0_v13948), ys0_v13950))
    end
  end

val mergeLclo_i86 =
  fn xs_v13951 ⇒ ln ys_v13952 ⇒ mergeL_i46(xs_v13951, ys_v13952)

fun msortU_i49(zs_v13953) =
  match zs_v13953 with
  | nilUU_c12  ⇒ nilUU_c12
  | consUU_c13 x_v13954 zs_v13955 ⇒
    match zs_v13955 with
    | nilUU_c12  ⇒ (consUU_c13 x_v13954 nilUU_c12)
    | consUU_c13 y_v13956 zs_v13957 ⇒
      let __v13958 =
        splitU_i45((consUU_c13 x_v13954 (consUU_c13 y_v13956 zs_v13957)))
      in
      match __v13958 with
      | (xs_v13959, ys_v13960) ⇒
        mergeU_i47(msortU_i49(xs_v13959), msortU_i49(ys_v13960))
      end
    end
  end

val msortUclo_i87 = fn zs_v13961 ⇒ msortU_i49(zs_v13961)

fun msortL_i48(zs_v13962) =
  match zs_v13962 with
  | nilUL_c10  ⇒ nilUL_c10
  | consUL_c11 x_v13963 zs_v13964 ⇒
    match zs_v13964 with
    | nilUL_c10  ⇒ (consUL_c11 x_v13963 nilUL_c10)
    | consUL_c11 y_v13965 zs_v13966 ⇒
      let __v13967 =
        splitL_i44((consUL_c11 x_v13963 (consUL_c11 y_v13965 zs_v13966)))
      in
      match __v13967 with
      | (xs_v13968, ys_v13969) ⇒
        mergeL_i46(msortL_i48(xs_v13968), msortL_i48(ys_v13969))
      end
    end
  end

val msortLclo_i88 = fn zs_v13970 ⇒ msortL_i48(zs_v13970)

fun cmsort_workerU_i53(n_v13971, zs_v13972, c_v13973) =
  if n_v13971 then
    match zs_v13972 with
    | nilUU_c12  ⇒
      ln __v13974 ⇒ let c_v13975 = send(c_v13973, nilUU_c12) in NULL
    | consUU_c13 z0_v13976 zs0_v13977 ⇒
      match zs0_v13977 with
      | nilUU_c12  ⇒
        ln __v13978 ⇒ let c_v13979 = send(c_v13973, nilUU_c12) in NULL
      | consUU_c13 z1_v13980 zs1_v13981 ⇒
        let __v13982 =
          splitU_i45((consUU_c13 z0_v13976 (consUU_c13 z1_v13980 zs1_v13981)))
        in
        match __v13982 with
        | (xs0_v13983, ys0_v13984) ⇒
          ln __v13985 ⇒
            let r_v13986 =
              fork r_v13987 in
                (cmsort_workerU_i53(n_v13971.-1, xs0_v13983, r_v13987)) NULL
            in
            let ys1_v13988 = msortU_i49(ys0_v13984) in
            let __v13989 = recv(r_v13986) in
            match __v13989 with
            | (xs1_v13990, r_v13991) ⇒
              let zs_v13992 = mergeU_i47(xs1_v13990, ys1_v13988) in
              let c_v13993 = send(c_v13973, zs_v13992) in
              let __v13994 = close(r_v13991) in NULL
            end
        end
      end
    end
  else
    ln __v13995 ⇒
      let c_v13996 =
        ((fn x_v13997 ⇒ ln __v13998 ⇒ send(c_v13973, x_v13997))
           msortU_i49(zs_v13972))
          NULL
      in NULL

val cmsort_workerUclo_i89 =
  fn n_v13999 zs_v14000 ⇒
    ln c_v14001 ⇒ cmsort_workerU_i53(n_v13999, zs_v14000, c_v14001)

fun cmsort_workerL_i52(n_v14002, zs_v14003, c_v14004) =
  if n_v14002 then
    match zs_v14003 with
    | nilUL_c10  ⇒
      ln __v14005 ⇒ let c_v14006 = send(c_v14004, nilUL_c10) in NULL
    | consUL_c11 z0_v14007 zs0_v14008 ⇒
      match zs0_v14008 with
      | nilUL_c10  ⇒
        ln __v14009 ⇒ let c_v14010 = send(c_v14004, nilUL_c10) in NULL
      | consUL_c11 z1_v14011 zs1_v14012 ⇒
        let __v14013 =
          splitL_i44((consUL_c11 z0_v14007 (consUL_c11 z1_v14011 zs1_v14012)))
        in
        match __v14013 with
        | (xs0_v14014, ys0_v14015) ⇒
          ln __v14016 ⇒
            let r_v14017 =
              fork r_v14018 in
                (cmsort_workerL_i52(n_v14002.-1, xs0_v14014, r_v14018)) NULL
            in
            let ys1_v14019 = msortL_i48(ys0_v14015) in
            let __v14020 = recv(r_v14017) in
            match __v14020 with
            | (xs1_v14021, r_v14022) ⇒
              let zs_v14023 = mergeL_i46(xs1_v14021, ys1_v14019) in
              let c_v14024 = send(c_v14004, zs_v14023) in
              let __v14025 = close(r_v14022) in NULL
            end
        end
      end
    end
  else
    ln __v14026 ⇒
      let c_v14027 =
        ((ln x_v14028 __v14029 ⇒ send(c_v14004, x_v14028))
           msortL_i48(zs_v14003))
          NULL
      in NULL

val cmsort_workerLclo_i90 =
  fn n_v14030 zs_v14031 ⇒
    ln c_v14032 ⇒ cmsort_workerL_i52(n_v14030, zs_v14031, c_v14032)

fun cmsortU_i55(zs0_v14033) =
  ln __v14034 ⇒
    let c_v14035 =
      fork c_v14036 in (cmsort_workerU_i53(4, zs0_v14033, c_v14036)) NULL
    in
    let __v14037 = recv(c_v14035) in
    match __v14037 with
    | (zs1_v14038, c_v14039) ⇒ let __v14040 = close(c_v14039) in zs1_v14038
    end

val cmsortUclo_i91 = fn zs0_v14041 ⇒ cmsortU_i55(zs0_v14041)

fun cmsortL_i54(zs0_v14042) =
  ln __v14043 ⇒
    let c_v14044 =
      fork c_v14045 in (cmsort_workerL_i52(4, zs0_v14042, c_v14045)) NULL
    in
    let __v14046 = recv(c_v14044) in
    match __v14046 with
    | (zs1_v14047, c_v14048) ⇒ let __v14049 = close(c_v14048) in zs1_v14047
    end

val cmsortLclo_i92 = fn zs0_v14050 ⇒ cmsortL_i54(zs0_v14050)

fun mkListU_i57(n_v14051) =
  if n_v14051 then
    (consUU_c13 n_v14051 mkListU_i57(n_v14051.-1))
  else
    nilUU_c12

val mkListUclo_i93 = fn n_v14052 ⇒ mkListU_i57(n_v14052)

fun mkListL_i56(n_v14053) =
  if n_v14053 then
    (consUL_c11 n_v14053 mkListL_i56(n_v14053.-1))
  else
    nilUL_c10

val mkListLclo_i94 = fn n_v14054 ⇒ mkListL_i56(n_v14054)

main =
  let test_v14055 = mkListU_i57(6000) in
  let sorted_v14056 = (cmsortU_i55(test_v14055)) NULL in NULL

trans3e success--------------------------

trans34 success--------------------------

