logical eq_sym‹s› (A : Type‹s›) (x : A) (y : A) : (∀ (_ : x ≡ y) → y ≡ x) = (fn (e : _) ⇒ rew [y, _ ⇒ y ≡ x] e in refl)

logical f_equal‹s,
t› (A : Type‹s›) (B : Type‹t›) (f : (∀ (_ : A) → B)) (x : A) (y : A) : (∀ (_ : x ≡ y) → (
(f) (x)) ≡ ((f) (y))) = (fn (e : _) ⇒ rew [y, p ⇒ ((f) (x)) ≡ (
(f)
(y))] e in refl)

logical bool_absurd‹› (e : true ≡ false) : absurd = rew [x, _ ⇒ match x as _ in _ with true ⇒ unit | false ⇒ absurd] e in ()

logical nat_absurd‹› (n : nat) (e : n.+1 ≡ O) : absurd = rew [x, _ ⇒ match x as _ in _ with O ⇒ absurd | S _ ⇒ unit] e in ()

logical nat_inv‹› (n1 : nat) (n2 : nat) (e : n1.+1 ≡ n2.+1) : n1 ≡ n2 = (
(f_equal) (_) (_) (pred) (_) (_)
(e))

logical eqn_reflect‹› (m : nat) (n : nat) : (∀ (_ : ((eqn) (m)
(n)) ≡ true) → m ≡ n) = match m as m0 in (∀ (_ : ((eqn) (m0)
(n)) ≡ true) → m0 ≡ n) with O ⇒ match n as n0 in (∀ (_ : ((eqn)
(O.+0)
(n0)) ≡ true) → O.+0 ≡ n0) with O ⇒ (fn (_ : _) ⇒ refl) | S n ⇒ (fn (e : _) ⇒ (
(absurd_elim) (_)
(((bool_absurd) (((eq_sym) (_) (_) (_) (e))))))) | S m ⇒ match n as n0 in (∀ (_ : (
(eqn) (m.+1)
(n0)) ≡ true) → m.+1 ≡ n0) with O ⇒ (fn (e : _) ⇒ ((absurd_elim)
(_)
(((bool_absurd) (((eq_sym) (_) (_) (_) (e))))))) | S n ⇒ (fn (e : _) ⇒ (
(f_equal) (_) (_) ((fn (x : _) ⇒ x.+1)) (_) (_)
(((eqn_reflect) (m) (n) (e)))))

inductive word‹› : U = Word of ‹› (s : string) {pf : ((strlen)
(s)) ≡ O.+5} → ((word‹›))

program contains‹› (c : char) (s : string) : bool = match s as _ in _ with EmptyString  ⇒ false | String c0
s ⇒ match ((eqc) (c)
(c0)) as _ in _ with true ⇒ true | false ⇒ ((contains) (c)
(s))

program string_diff‹› (ans : string) (s1 : string) (s2 : string) : string = match s1 as _ in _ with EmptyString  ⇒ EmptyString | String c1
s1 ⇒ match s2 as _ in _ with EmptyString  ⇒ EmptyString | String c2
s2 ⇒ match ((eqc) (c1) (c2)) as _ in _ with true ⇒ ((cats)
(((String) (((Char) (O.+89))) (EmptyString)))
(((string_diff) (ans) (s1) (s2)))) | false ⇒ match ((contains) (c2)
(ans)) as _ in _ with true ⇒ ((cats)
(((String) (((Char) (O.+73))) (EmptyString)))
(((string_diff) (ans) (s1) (s2)))) | false ⇒ ((cats)
(((String) (((Char) (O.+78))) (EmptyString)))
(((string_diff) (ans) (s1) (s2))))

logical string_diff_len‹› (n : nat) (ans : string) (s1 : string) (s2 : string) : (∀ (_ : n ≡ (
(strlen) (s1))) → (∀ (_ : n ≡ ((strlen) (s2))) → n ≡ ((strlen)
(((string_diff) (ans) (s1) (s2)))))) = match s1 as s0 in (∀ (_ : n ≡ (
(strlen) (s0))) → (∀ (_ : n ≡ ((strlen) (s2))) → n ≡ ((strlen)
(((string_diff) (ans) (s0) (s2)))))) with EmptyString  ⇒ match s2 as s0 in (∀ (_ : n ≡ O.+0) → (∀ (_ : n ≡ (
(strlen)
(s0))) → n ≡ O.+0)) with EmptyString  ⇒ (fn (e1 : _) ⇒ (fn (_ : _) ⇒ e1)) | String c2
s2 ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e2 in e1 in (
(absurd_elim) (_) (((nat_absurd) (_) (e3)))))) | String c1
s1 ⇒ match s2 as s0 in (∀ (_ : n ≡ ((strlen)
(((String) (c1) (s1))))) → (∀ (_ : n ≡ ((strlen)
(s0))) → n ≡ ((strlen)
(((string_diff) (ans) (((String) (c1) (s1))) (s0)))))) with EmptyString  ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e1 in e2 in (
(absurd_elim) (_) (((nat_absurd) (_) (e3)))))) | String c2
s2 ⇒ (fn (e1 : _) ⇒ (fn (e2 : _) ⇒ ((match n as n0 in (∀ (_ : n ≡ n0) → n0 ≡ (
                                           (strlen)
                                           (((string_diff) (ans)
                                            (((String) (c1) (s1)))
                                            (((String) (c2) (s2))))))) with O ⇒ (fn (e0 : _) ⇒ let e3 = rew [n, _ ⇒ n ≡ O.+0] e1 in e0 in (
                                           (absurd_elim) (_)
                                           (((nat_absurd) (_) (e3))))) | S n0 ⇒ (fn (e0 : _) ⇒ let e3 = rew [n1, _ ⇒ n1 ≡ (
                                           (strlen)
                                           (s1)).+1] e0 in e1 in let e4 = rew [n1, _ ⇒ n1 ≡ (
                                           (strlen)
                                           (s2)).+1] e0 in e2 in let e5 = (
                                           (nat_inv) (_) (_)
                                           (e3)) in let e6 = ((nat_inv) 
                                           (_) (_) (e4)) in match ((eqc) 
                                           (c1)
                                           (c2)) as b0 in n0.+1 ≡ (
                                           (strlen)
                                           (match b0 as _ in _ with true ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+89)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))) | false ⇒ match (
                                            (contains) (c2)
                                            (ans)) as _ in _ with true ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+73)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))) | false ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+78)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))))) with true ⇒ rew [n1, _ ⇒ n0.+1 ≡ n1.+1] (
                                           (string_diff_len) (_) (_) 
                                           (_) (_) (e5)
                                           (e6)) in refl | false ⇒ match (
                                           (contains) (c2)
                                           (ans)) as b0 in n0.+1 ≡ (
                                           (strlen)
                                           (match b0 as _ in _ with true ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+73)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))) | false ⇒ (
                                            (cats)
                                            (((String) (((Char) (O.+78)))
                                             (EmptyString)))
                                            (((string_diff) (ans) (s1) (s2)))))) with true ⇒ rew [n1, _ ⇒ n0.+1 ≡ n1.+1] (
                                           (string_diff_len) (_) (_) 
                                           (_) (_) (e5)
                                           (e6)) in refl | false ⇒ rew [n1, _ ⇒ n0.+1 ≡ n1.+1] (
                                           (string_diff_len) (_) (_) 
                                           (_) (_) (e5) (e6)) in refl))
(refl))))

program wordle_diff‹› (ans : word) (guess : word) : word = match ans as _ in _ with Word ans
pf1 ⇒ match guess as _ in _ with Word guess pf2 ⇒ let {pf1} = ((eq_sym)
(_) (_) (_) (pf1)) in let {pf2} = ((eq_sym) (_) (_) (_)
(pf2)) in let {pf} = ((string_diff_len) (_) (_) (_) (_) (pf1)
(pf2)) in ((Word) (((string_diff) (ans) (ans) (guess)))
(((eq_sym) (_) (_) (_) (pf))))

program eqw‹› (w1 : word) (w2 : word) : bool = match w1 as _ in _ with Word s1
_ ⇒ match w2 as _ in _ with Word s2 _ ⇒ ((eqs) (s1)
(s2))

logical wordle_loop‹› (ans : word) (repeat : nat) : proto = match repeat as _ in _ with O ⇒ !(w : word) → !{_ : w ≡ ans} → end | S repeat ⇒ ?(guess : word) → !(b : bool) → !{_ : b ≡ (
(eqw) (ans)
(guess))} → match b as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
(wordle_diff) (ans) (guess))} → ((wordle_loop) (ans)
(repeat))

logical wordle‹› : proto = !{ans : word} → !(repeat : nat) → (
(wordle_loop) (ans)
(repeat))

logical loop_ch‹› (ans : word) (repeat : nat) : L = ch‹((wordle_loop)
(ans)
(repeat))›

logical loop_hc‹› (ans : word) (repeat : nat) : L = hc‹((wordle_loop)
(ans)
(repeat))›

logical wordle_ch‹› : L = ch‹wordle›

logical wordle_hc‹› : L = hc‹wordle›

program read_word‹› (_ : unit) : IO word = let s ⇐ ((readline)
(())) in ((match ((eqn) (((strlen) (s))) (O.+5)) as b0 in (∀ {_ : (
           (eqn) (((strlen) (s)))
           (O.+5)) ≡ b0} → IO word) with true ⇒ (fn {e : _} ⇒ return (
           (Word) (s)
           (((eqn_reflect) (_) (_) (e))))) | false ⇒ (fn {_ : _} ⇒ let _ ⇐ (
           (print)
           (((String) (((Char) (O.+112)))
            (((String) (((Char) (O.+108)))
             (((String) (((Char) (O.+101)))
              (((String) (((Char) (O.+97)))
               (((String) (((Char) (O.+115)))
                (((String) (((Char) (O.+101)))
                 (((String) (((Char) (O.+32)))
                  (((String) (((Char) (O.+105)))
                   (((String) (((Char) (O.+110)))
                    (((String) (((Char) (O.+112)))
                     (((String) (((Char) (O.+117)))
                      (((String) (((Char) (O.+116)))
                       (((String) (((Char) (O.+32)))
                        (((String) (((Char) (O.+97)))
                         (((String) (((Char) (O.+32)))
                          (((String) (((Char) (O.+119)))
                           (((String) (((Char) (O.+111)))
                            (((String) (((Char) (O.+114)))
                             (((String) (((Char) (O.+100)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+119)))
                                (((String) (((Char) (O.+105)))
                                 (((String) (((Char) (O.+116)))
                                  (((String) (((Char) (O.+104)))
                                   (((String) (((Char) (O.+32)))
                                    (((String) (((Char) (O.+108)))
                                     (((String) (((Char) (O.+101)))
                                      (((String) (((Char) (O.+110)))
                                       (((String) (((Char) (O.+103)))
                                        (((String) (((Char) (O.+116)))
                                         (((String) (((Char) (O.+104)))
                                          (((String) (((Char) (O.+32)))
                                           (((String) (((Char) (O.+111)))
                                            (((String) (((Char) (O.+102)))
                                             (((String) (((Char) (O.+32)))
                                              (((String) (((Char) (O.+53)))
                                               (((String) (((Char) (O.+10)))
                                                (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) in (
           (read_word) (()))))
(refl))

program player_loop‹› {ans : word} (repeat : nat) (c : ((loop_hc) 
(ans)
(repeat))) : IO unit = ((match repeat as repeat0 in (∀ (_ : ((loop_hc)
                         (ans)
                         (repeat0))) → IO unit) with O ⇒ (fn (c : _) ⇒ let ⟨ans, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in match ans as _ in _ with Word s
                         _ ⇒ let _ ⇐ ((print)
                         (((cats)
                          (((cats)
                           (((String) (((Char) (O.+89)))
                            (((String) (((Char) (O.+111)))
                             (((String) (((Char) (O.+117)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+76)))
                                (((String) (((Char) (O.+111)))
                                 (((String) (((Char) (O.+115)))
                                  (((String) (((Char) (O.+101)))
                                   (((String) (((Char) (O.+33)))
                                    (((String) (((Char) (O.+32)))
                                     (((String) (((Char) (O.+84)))
                                      (((String) (((Char) (O.+104)))
                                       (((String) (((Char) (O.+101)))
                                        (((String) (((Char) (O.+32)))
                                         (((String) (((Char) (O.+97)))
                                          (((String) (((Char) (O.+110)))
                                           (((String) (((Char) (O.+115)))
                                            (((String) (((Char) (O.+119)))
                                             (((String) (((Char) (O.+101)))
                                              (((String) (((Char) (O.+114)))
                                               (((String) (((Char) (O.+32)))
                                                (((String)
                                                 (((Char) (O.+105)))
                                                 (((String)
                                                  (((Char) (O.+115)))
                                                  (((String)
                                                   (((Char) (O.+32)))
                                                   (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))
                           (s)))
                          (((String) (((Char) (O.+46)))
                           (((String) (((Char) (O.+10))) (EmptyString)))))))) in close c) | S repeat ⇒ (fn (c : _) ⇒ let guess ⇐ (
                         (read_word) (())) in let c ⇐ ((send c)
                         (guess)) in let ⟨b, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in (
                         (match b as b0 in (∀ (_ : hc‹match b0 as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
                          (wordle_diff) (ans) (guess))} → ((wordle_loop)
                          (ans)
                          (repeat))›) ⊸ IO unit) with true ⇒ (ln (c : _) ⇒ let _ ⇐ (
                          (print)
                          (((String) (((Char) (O.+89)))
                           (((String) (((Char) (O.+111)))
                            (((String) (((Char) (O.+117)))
                             (((String) (((Char) (O.+32)))
                              (((String) (((Char) (O.+87)))
                               (((String) (((Char) (O.+105)))
                                (((String) (((Char) (O.+110)))
                                 (((String) (((Char) (O.+33)))
                                  (((String) (((Char) (O.+10)))
                                   (EmptyString)))))))))))))))))))) in close c) | false ⇒ (ln (c : _) ⇒ let ⟨diff, c⟩ ⇐ recv c in let ⟨{pf}, c⟩ ⇐ recv c in match diff as _ in _ with Word s
                          _ ⇒ let _ ⇐ ((print)
                          (((cats)
                           (((cats)
                            (((cats)
                             (((cats)
                              (((String) (((Char) (O.+73)))
                               (((String) (((Char) (O.+110)))
                                (((String) (((Char) (O.+99)))
                                 (((String) (((Char) (O.+111)))
                                  (((String) (((Char) (O.+114)))
                                   (((String) (((Char) (O.+114)))
                                    (((String) (((Char) (O.+101)))
                                     (((String) (((Char) (O.+99)))
                                      (((String) (((Char) (O.+116)))
                                       (((String) (((Char) (O.+44)))
                                        (((String) (((Char) (O.+32)))
                                         (((String) (((Char) (O.+104)))
                                          (((String) (((Char) (O.+105)))
                                           (((String) (((Char) (O.+110)))
                                            (((String) (((Char) (O.+116)))
                                             (((String) (((Char) (O.+58)))
                                              (((String) (((Char) (O.+32)))
                                               (EmptyString)))))))))))))))))))))))))))))))))))
                              (s)))
                             (((String) (((Char) (O.+46)))
                              (((String) (((Char) (O.+32)))
                               (((String) (((Char) (O.+89)))
                                (((String) (((Char) (O.+111)))
                                 (((String) (((Char) (O.+117)))
                                  (((String) (((Char) (O.+32)))
                                   (((String) (((Char) (O.+104)))
                                    (((String) (((Char) (O.+97)))
                                     (((String) (((Char) (O.+118)))
                                      (((String) (((Char) (O.+101)))
                                       (((String) (((Char) (O.+32)))
                                        (EmptyString)))))))))))))))))))))))))
                            (((string_of_nat) (repeat)))))
                           (((String) (((Char) (O.+32)))
                            (((String) (((Char) (O.+109)))
                             (((String) (((Char) (O.+111)))
                              (((String) (((Char) (O.+114)))
                               (((String) (((Char) (O.+101)))
                                (((String) (((Char) (O.+32)))
                                 (((String) (((Char) (O.+116)))
                                  (((String) (((Char) (O.+114)))
                                   (((String) (((Char) (O.+105)))
                                    (((String) (((Char) (O.+101)))
                                     (((String) (((Char) (O.+115)))
                                      (((String) (((Char) (O.+46)))
                                       (((String) (((Char) (O.+10)))
                                        (EmptyString)))))))))))))))))))))))))))))) in (
                          (player_loop) (ans) (repeat) (c))))
                         (c))))
(c))

program player‹› (c : wordle_hc) : IO unit = let ⟨{ans}, c⟩ ⇐ recv c in let ⟨repeat, c⟩ ⇐ recv c in let _ ⇐ (
(print)
(((String) (((Char) (O.+87)))
 (((String) (((Char) (O.+111)))
  (((String) (((Char) (O.+114)))
   (((String) (((Char) (O.+100)))
    (((String) (((Char) (O.+108)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+32)))
       (((String) (((Char) (O.+71)))
        (((String) (((Char) (O.+97)))
         (((String) (((Char) (O.+109)))
          (((String) (((Char) (O.+101)))
           (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))))))))) in let _ ⇐ (
(print)
(((String) (((Char) (O.+80)))
 (((String) (((Char) (O.+108)))
  (((String) (((Char) (O.+101)))
   (((String) (((Char) (O.+97)))
    (((String) (((Char) (O.+115)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+32)))
       (((String) (((Char) (O.+103)))
        (((String) (((Char) (O.+117)))
         (((String) (((Char) (O.+101)))
          (((String) (((Char) (O.+115)))
           (((String) (((Char) (O.+115)))
            (((String) (((Char) (O.+32)))
             (((String) (((Char) (O.+97)))
              (((String) (((Char) (O.+32)))
               (((String) (((Char) (O.+119)))
                (((String) (((Char) (O.+111)))
                 (((String) (((Char) (O.+114)))
                  (((String) (((Char) (O.+100)))
                   (((String) (((Char) (O.+32)))
                    (((String) (((Char) (O.+111)))
                     (((String) (((Char) (O.+102)))
                      (((String) (((Char) (O.+32)))
                       (((String) (((Char) (O.+108)))
                        (((String) (((Char) (O.+101)))
                         (((String) (((Char) (O.+110)))
                          (((String) (((Char) (O.+103)))
                           (((String) (((Char) (O.+116)))
                            (((String) (((Char) (O.+104)))
                             (((String) (((Char) (O.+32)))
                              (((String) (((Char) (O.+53)))
                               (((String) (((Char) (O.+46)))
                                (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) in let _ ⇐ (
(print)
(((cats)
 (((cats)
  (((String) (((Char) (O.+89)))
   (((String) (((Char) (O.+111)))
    (((String) (((Char) (O.+117)))
     (((String) (((Char) (O.+32)))
      (((String) (((Char) (O.+104)))
       (((String) (((Char) (O.+97)))
        (((String) (((Char) (O.+118)))
         (((String) (((Char) (O.+101)))
          (((String) (((Char) (O.+32))) (EmptyString)))))))))))))))))))
  (((string_of_nat) (repeat)))))
 (((String) (((Char) (O.+32)))
  (((String) (((Char) (O.+116)))
   (((String) (((Char) (O.+114)))
    (((String) (((Char) (O.+105)))
     (((String) (((Char) (O.+101)))
      (((String) (((Char) (O.+115)))
       (((String) (((Char) (O.+46)))
        (((String) (((Char) (O.+10))) (EmptyString)))))))))))))))))))) in (
(player_loop) (ans) (repeat)
(c))

inductive subset‹s, r,
t› (A : Type‹s›) (P : (∀ (_ : A) → Type‹r›)) : Type‹t› = SPair of ‹s,
r,
t› {A : Type‹s›} {P : (∀ (_ : A) → Type‹r›)} (m : A) {pf : (
(P) (m))} → ((subset‹s, r, t›) (A)
(P))

inductive at‹› (A : U) (x : A) (n : nat) (xs : ((list‹_, U›)
(A))) : U = at_O of ‹› {A : U} {x : A} {n : nat} {xs : ((list‹_, U›)
(A))} (xs0 : ((list) (A))) {pf1 : n ≡ O.+0} {pf2 : xs ≡ ((cons) (x)
(xs0))} → ((at‹›) (A) (x) (n)
(xs)) | at_S of ‹› {A : U} {x : A} {n : nat} {xs : ((list‹_, U›)
(A))} (n0 : nat) (x0 : A) (xs0 : ((list) (A))) (h : ((at) (A) (x) (n0)
(xs0))) {pf1 : n ≡ n0.+1} {pf2 : xs ≡ ((cons) (x0)
(xs0))} → ((at‹›) (A) (x) (n)
(xs))

logical ltn_inv‹› (m : nat) (n : nat) : (∀ (_ : ((ltn) (m.+1)
(n.+1)) ≡ true) → ((ltn) (m)
(n)) ≡ true) = (fn (h : _) ⇒ h)

program get_at‹› {A : U} (n : nat) (xs : ((list) (A))) : (∀ {_ : (
(ltn) (n) (((llen) (_) (xs)))) ≡ true} → ((subset‹_, _, U›) (_)
((fn (x : _) ⇒ ((at) (_) (x) (n) (xs)))))) = match xs as xs0 in (∀ {_ : (
(ltn) (n) (((llen) (_) (xs0)))) ≡ true} → ((subset) (_)
((fn (x : _) ⇒ ((at) (_) (x) (n) (xs0)))))) with nil  ⇒ (fn {e : _} ⇒ rew [b, _ ⇒ match b as _ in _ with true ⇒ (
(subset) (_)
((fn (x : _) ⇒ ((at) (_) (x) (n) (nil))))) | false ⇒ unit] e in ()) | cons x
xs ⇒ match n as n0 in (∀ {_ : ((ltn) (n0)
(((llen) (_) (xs)).+1)) ≡ true} → ((subset) (_)
((fn (x0 : _) ⇒ ((at) (_) (x0) (n0) (((cons) (x) (xs)))))))) with O ⇒ (fn {e : _} ⇒ (
(SPair) (x)
(((at_O) (xs) (refl) (refl))))) | S n ⇒ (fn {e : _} ⇒ match ((get_at) 
(_) (n) (xs) (((ltn_inv) (_) (_) (e)))) as _ in _ with SPair x0
pf ⇒ ((SPair) (x0)
(((at_S) (_) (_) (_) (pf) (refl) (refl)))))

program rand_word‹› (_ : unit) : IO word = let words = (((cons)
(((Word)
 (((String) (((Char) (O.+114)))
  (((String) (((Char) (O.+111)))
   (((String) (((Char) (O.+117)))
    (((String) (((Char) (O.+116)))
     (((String) (((Char) (O.+101))) (EmptyString)))))))))))
 (refl)))
(((cons)
 (((Word)
  (((String) (((Char) (O.+99)))
   (((String) (((Char) (O.+114)))
    (((String) (((Char) (O.+97)))
     (((String) (((Char) (O.+115)))
      (((String) (((Char) (O.+104))) (EmptyString)))))))))))
  (refl)))
 (((cons)
  (((Word)
   (((String) (((Char) (O.+99)))
    (((String) (((Char) (O.+108)))
     (((String) (((Char) (O.+111)))
      (((String) (((Char) (O.+119)))
       (((String) (((Char) (O.+110))) (EmptyString)))))))))))
   (refl)))
  (((cons)
   (((Word)
    (((String) (((Char) (O.+115)))
     (((String) (((Char) (O.+104)))
      (((String) (((Char) (O.+97)))
       (((String) (((Char) (O.+107)))
        (((String) (((Char) (O.+121))) (EmptyString)))))))))))
    (refl)))
   (((cons)
    (((Word)
     (((String) (((Char) (O.+118)))
      (((String) (((Char) (O.+101)))
       (((String) (((Char) (O.+103)))
        (((String) (((Char) (O.+97)))
         (((String) (((Char) (O.+110))) (EmptyString)))))))))))
     (refl)))
    (((cons)
     (((Word)
      (((String) (((Char) (O.+112)))
       (((String) (((Char) (O.+111)))
        (((String) (((Char) (O.+119)))
         (((String) (((Char) (O.+101)))
          (((String) (((Char) (O.+114))) (EmptyString)))))))))))
      (refl)))
     (((cons)
      (((Word)
       (((String) (((Char) (O.+116)))
        (((String) (((Char) (O.+114)))
         (((String) (((Char) (O.+117)))
          (((String) (((Char) (O.+115)))
           (((String) (((Char) (O.+116))) (EmptyString)))))))))))
       (refl)))
      (((cons)
       (((Word)
        (((String) (((Char) (O.+101)))
         (((String) (((Char) (O.+110)))
          (((String) (((Char) (O.+106)))
           (((String) (((Char) (O.+111)))
            (((String) (((Char) (O.+121))) (EmptyString)))))))))))
        (refl)))
       (((cons)
        (((Word)
         (((String) (((Char) (O.+98)))
          (((String) (((Char) (O.+114)))
           (((String) (((Char) (O.+97)))
            (((String) (((Char) (O.+105)))
             (((String) (((Char) (O.+110))) (EmptyString)))))))))))
         (refl)))
        (((cons)
         (((Word)
          (((String) (((Char) (O.+97)))
           (((String) (((Char) (O.+100)))
            (((String) (((Char) (O.+111)))
             (((String) (((Char) (O.+112)))
              (((String) (((Char) (O.+116))) (EmptyString)))))))))))
          (refl)))
         (((cons)
          (((Word)
           (((String) (((Char) (O.+116)))
            (((String) (((Char) (O.+111)))
             (((String) (((Char) (O.+119)))
              (((String) (((Char) (O.+101)))
               (((String) (((Char) (O.+114))) (EmptyString)))))))))))
           (refl)))
          (((cons)
           (((Word)
            (((String) (((Char) (O.+115)))
             (((String) (((Char) (O.+104)))
              (((String) (((Char) (O.+97)))
               (((String) (((Char) (O.+100)))
                (((String) (((Char) (O.+101))) (EmptyString)))))))))))
            (refl)))
           (((cons)
            (((Word)
             (((String) (((Char) (O.+100)))
              (((String) (((Char) (O.+101)))
               (((String) (((Char) (O.+108)))
                (((String) (((Char) (O.+97)))
                 (((String) (((Char) (O.+121))) (EmptyString)))))))))))
             (refl)))
            (((cons)
             (((Word)
              (((String) (((Char) (O.+116)))
               (((String) (((Char) (O.+119)))
                (((String) (((Char) (O.+105)))
                 (((String) (((Char) (O.+115)))
                  (((String) (((Char) (O.+116))) (EmptyString)))))))))))
              (refl)))
             (((cons)
              (((Word)
               (((String) (((Char) (O.+97)))
                (((String) (((Char) (O.+108)))
                 (((String) (((Char) (O.+101)))
                  (((String) (((Char) (O.+114)))
                   (((String) (((Char) (O.+116))) (EmptyString)))))))))))
               (refl)))
              (((cons)
               (((Word)
                (((String) (((Char) (O.+99)))
                 (((String) (((Char) (O.+104)))
                  (((String) (((Char) (O.+111)))
                   (((String) (((Char) (O.+107)))
                    (((String) (((Char) (O.+101))) (EmptyString)))))))))))
                (refl)))
               (((cons)
                (((Word)
                 (((String) (((Char) (O.+115)))
                  (((String) (((Char) (O.+112)))
                   (((String) (((Char) (O.+108)))
                    (((String) (((Char) (O.+105)))
                     (((String) (((Char) (O.+116))) (EmptyString)))))))))))
                 (refl)))
                (((cons)
                 (((Word)
                  (((String) (((Char) (O.+114)))
                   (((String) (((Char) (O.+104)))
                    (((String) (((Char) (O.+121)))
                     (((String) (((Char) (O.+109)))
                      (((String) (((Char) (O.+101))) (EmptyString)))))))))))
                  (refl)))
                 (((cons)
                  (((Word)
                   (((String) (((Char) (O.+109)))
                    (((String) (((Char) (O.+117)))
                     (((String) (((Char) (O.+100)))
                      (((String) (((Char) (O.+100)))
                       (((String) (((Char) (O.+121))) (EmptyString)))))))))))
                   (refl)))
                  (((cons)
                   (((Word)
                    (((String) (((Char) (O.+112)))
                     (((String) (((Char) (O.+108)))
                      (((String) (((Char) (O.+97)))
                       (((String) (((Char) (O.+110)))
                        (((String) (((Char) (O.+116))) (EmptyString)))))))))))
                    (refl)))
                   (nil)))))))))))))))))))))))))))))))))))))))) : ((list‹_,
                                                                    U›)
(_))) in let r ⇐ rand O.+0 O.+19 in match r as _ in _ with Between n _
pf ⇒ match ((get_at) (_) (n) (words) (pf)) as _ in _ with SPair w
_ ⇒ return w

program server_loop‹› (ans : word) (repeat : nat) (c : ((loop_ch) 
(ans)
(repeat))) : IO unit = ((match repeat as repeat0 in (∀ (_ : ((loop_ch)
                         (ans)
                         (repeat0))) → IO unit) with O ⇒ (fn (c : _) ⇒ let c ⇐ (
                         (send c) (ans)) in let c ⇐ ((send c)
                         (refl)) in close c) | S repeat ⇒ (fn (c : _) ⇒ let ⟨guess, c⟩ ⇐ recv c in let b = (
                         (eqw) (ans) (guess)) in let c ⇐ ((send c)
                         (b)) in let c ⇐ ((send c)
                         (refl)) in ((match b as b0 in (∀ (_ : ch‹match b0 as _ in _ with true ⇒ end | false ⇒ !(w : word) → !{_ : w ≡ (
                                      (wordle_diff) (ans)
                                      (guess))} → ((wordle_loop) (ans)
                                      (repeat))›) ⊸ IO unit) with true ⇒ (ln (c : _) ⇒ close c) | false ⇒ (ln (c : _) ⇒ let c ⇐ (
                                      (send c)
                                      (((wordle_diff) (ans) (guess)))) in let c ⇐ (
                                      (send c) (refl)) in ((server_loop)
                                      (ans) (repeat) (c))))
                         (c))))
(c))

program server‹› (c : wordle_ch) : IO unit = let repeat = O.+6 in let ans ⇐ (
(rand_word) (())) in let c ⇐ ((send c) (ans)) in let c ⇐ ((send c)
(repeat)) in ((server_loop) (ans) (repeat)
(c))

program main‹› : IO unit = let c ⇐ fork (c : wordle_ch) in ((server)
(c)) in let c0 ⇐ fork (c0 : ch‹?(_ : wordle_hc) → !(_ : unit) → end›) in let ⟨c, c0⟩ ⇐ recv c0 in let _ ⇐ (
(player) (c)) in let c0 ⇐ ((send c0)
(())) in close c0 in let c0 ⇐ ((send c0)
(c)) in let ⟨_, c0⟩ ⇐ recv c0 in close c0

parsing success--------------------------

inductive absurd_d1 : U =


logical absurd_elim_i1 ‹s_s591› :
  ∀ (A_v592 : Type‹s_s591›) → absurd_d1 → A_v592
=
  fn (A_v594 : Type‹s_s591›) (p_v595 : absurd_d1) ⇒
    match p_v595 as __v596 in ??1 with
    
    end

inductive order_d2 : U =
| LT_c1 of : order_d2 | GT_c2 of : order_d2 | EQ_c3 of : order_d2

program andb_i2 : bool → bool → bool =
  fn (b1_v599 : bool) (b2_v600 : bool) ⇒
    match b1_v599 as __v601 in ??2 with
    | true ⇒ b2_v600 | false ⇒ false
    end

program orb_i3 : bool → bool → bool =
  fn (b1_v604 : bool) (b2_v605 : bool) ⇒
    match b1_v604 as __v606 in ??3 with
    | true ⇒ true | false ⇒ b2_v605
    end

program notb_i4 : bool → bool =
  fn (b_v608 : bool) ⇒
    match b_v608 as __v609 in ??4 with
    | true ⇒ false | false ⇒ true
    end

program compareb_i5 : bool → bool → order_d2 =
  fn (b1_v612 : bool) (b2_v613 : bool) ⇒
    match b1_v612 as __v614 in ??5 with
    | true ⇒
      match b2_v613 as __v615 in ??7 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v613 as __v616 in ??6 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i6 : nat → nat → bool =
  fn (x_v619 : nat) (y_v620 : nat) ⇒
    match x_v619 as __v621 in ??8 with
    | O ⇒ true
    | S x_v622 ⇒
      match y_v620 as __v623 in ??9 with
      | O ⇒ false | S y_v624 ⇒ (lten_i6 x_v622 y_v624)
      end
    end

program ltn_i7 : nat → nat → bool =
  fn (x_v627 : nat) (y_v628 : nat) ⇒ (lten_i6 x_v627.+1 y_v628)

program gten_i8 : nat → nat → bool =
  fn (x_v631 : nat) (y_v632 : nat) ⇒ (lten_i6 y_v632 x_v631)

program gtn_i9 : nat → nat → bool =
  fn (x_v635 : nat) (y_v636 : nat) ⇒ (ltn_i7 y_v636 x_v635)

program eqn_i10 : nat → nat → bool =
  fn (x_v639 : nat) (y_v640 : nat) ⇒
    match x_v639 as __v641 in ??10 with
    | O ⇒
      match y_v640 as __v642 in ??12 with
      | O ⇒ true | S __v643 ⇒ false
      end
    | S x_v644 ⇒
      match y_v640 as __v645 in ??11 with
      | O ⇒ false | S y_v646 ⇒ (eqn_i10 x_v644 y_v646)
      end
    end

program comparen_i11 : nat → nat → order_d2 =
  fn (n1_v649 : nat) (n2_v650 : nat) ⇒
    match n1_v649 as __v651 in ??13 with
    | O ⇒
      match n2_v650 as __v652 in ??15 with
      | O ⇒ EQ_c3‹› | S __v653 ⇒ LT_c1‹›
      end
    | S n1_v654 ⇒
      match n2_v650 as __v655 in ??14 with
      | O ⇒ GT_c2‹› | S n2_v656 ⇒ (comparen_i11 n1_v654 n2_v656)
      end
    end

program pred_i12 : nat → nat =
  fn (x_v658 : nat) ⇒
    match x_v658 as __v659 in ??16 with
    | O ⇒ 0 | S x_v660 ⇒ x_v660
    end

program addn_i13 : nat → nat → nat =
  fn (x_v663 : nat) (y_v664 : nat) ⇒
    match x_v663 as __v665 in ??17 with
    | O ⇒ y_v664 | S x_v666 ⇒ (addn_i13 x_v666 y_v664).+1
    end

program subn_i14 : nat → nat → nat =
  fn (x_v669 : nat) (y_v670 : nat) ⇒
    match y_v670 as __v671 in ??18 with
    | O ⇒ x_v669 | S y_v672 ⇒ (subn_i14 (pred_i12 x_v669) y_v672)
    end

program muln_i15 : nat → nat → nat =
  fn (x_v675 : nat) (y_v676 : nat) ⇒
    match x_v675 as __v677 in ??19 with
    | O ⇒ 0 | S x_v678 ⇒ (addn_i13 y_v676 (muln_i15 x_v678 y_v676))
    end

program divn_i16 : nat → nat → nat =
  fn (x_v681 : nat) (y_v682 : nat) ⇒
    match (ltn_i7 x_v681 y_v682) as __v683 in ??20 with
    | true ⇒ 0 | false ⇒ (divn_i16 (subn_i14 x_v681 y_v682) y_v682).+1
    end

program modn_i17 : nat → nat → nat =
  fn (x_v686 : nat) (y_v687 : nat) ⇒
    (subn_i14 x_v686 (muln_i15 (divn_i16 x_v686 y_v687) y_v687))

inductive between_d3 (lower_v688 : nat) (upper_v689 : nat) : L =
| Between_c4 of
    (lower_v690 : nat) (upper_v691 : nat) (n_v692 : nat)
    {pf1_v693 : (lten_i6 lower_v690 n_v692) ≡ true}
    {pf2_v694 : (lten_i6 n_v692 upper_v691) ≡ true}
    : (between_d3 lower_v690 upper_v691)

inductive char_d4 : U =
| Char_c5 of (n_v695 : nat) : char_d4

program eqc_i18 : char_d4 → char_d4 → bool =
  fn (c1_v698 : char_d4) (c2_v699 : char_d4) ⇒
    match c1_v698 as __v700 in ??23 with
    | Char_c5 n1_v701 ⇒
      match c2_v699 as __v702 in ??24 with
      | Char_c5 n2_v703 ⇒ (eqn_i10 n1_v701 n2_v703)
      end
    end

program comparec_i19 : char_d4 → char_d4 → order_d2 =
  fn (c1_v706 : char_d4) (c2_v707 : char_d4) ⇒
    match c1_v706 as __v708 in ??25 with
    | Char_c5 n1_v709 ⇒
      match c2_v707 as __v710 in ??26 with
      | Char_c5 n2_v711 ⇒ (comparen_i11 n1_v709 n2_v711)
      end
    end

inductive string_d5 : U =
| EmptyString_c6 of : string_d5
| String_c7 of (c_v712 : char_d4) (s_v713 : string_d5) : string_d5

program cats_i20 : string_d5 → string_d5 → string_d5 =
  fn (s1_v716 : string_d5) (s2_v717 : string_d5) ⇒
    match s1_v716 as __v718 in ??27 with
    | EmptyString_c6  ⇒ s2_v717
    | String_c7 c_v719 s1_v720 ⇒
      (String_c7‹› c_v719 (cats_i20 s1_v720 s2_v717))
    end

program strlen_i21 : string_d5 → nat =
  fn (s_v722 : string_d5) ⇒
    match s_v722 as __v723 in ??28 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v724 s_v725 ⇒ (strlen_i21 s_v725).+1
    end

program eqs_i22 : string_d5 → string_d5 → bool =
  fn (s1_v728 : string_d5) (s2_v729 : string_d5) ⇒
    match s1_v728 as __v730 in ??29 with
    | EmptyString_c6  ⇒
      match s2_v729 as __v731 in ??31 with
      | EmptyString_c6  ⇒ true | String_c7 __v732 __v733 ⇒ false
      end
    | String_c7 c1_v734 s1_v735 ⇒
      match s2_v729 as __v736 in ??30 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v737 s2_v738 ⇒
        (andb_i2 (eqc_i18 c1_v734 c2_v737) (eqs_i22 s1_v735 s2_v738))
      end
    end

program compares_i23 : string_d5 → string_d5 → order_d2 =
  fn (s1_v741 : string_d5) (s2_v742 : string_d5) ⇒
    match s1_v741 as __v743 in ??32 with
    | EmptyString_c6  ⇒
      match s2_v742 as __v744 in ??35 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v745 __v746 ⇒ LT_c1‹›
      end
    | String_c7 c1_v747 s1_v748 ⇒
      match s2_v742 as __v749 in ??33 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v750 s2_v751 ⇒
        match (comparec_i19 c1_v747 c2_v750) as __v752 in ??34 with
        | EQ_c3  ⇒ (compares_i23 s1_v748 s2_v751) | LT_c1  ⇒ LT_c1‹›
        | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d6 ‹s_s753, t_s754›
  (A_v755 : Type‹s_s753›) : Type‹t_s754›
=
| None_c8 of
    ‹s_s756, t_s757› (A_v758 : Type‹s_s756›)
    : (option_d6‹s_s756, t_s757› A_v758)
| Some_c9 of
    ‹s_s759, t_s760› (A_v761 : Type‹s_s759›) (x_v762 : A_v761)
    : (option_d6‹s_s759, t_s760› A_v761)

program and_then_i24 ‹s_s763, r_s764, t_s765› :
  ∀ {A_v766 : Type‹s_s763›} →
    ∀ {B_v767 : Type‹r_s764›} →
      (option_d6‹??36, t_s765› A_v766) →
        A_v766 → (option_d6‹??37, t_s765› B_v767) ⊸
          (option_d6‹??38, t_s765› B_v767)
=
  fn {A_v771 : Type‹s_s763›} {B_v772 : Type‹r_s764›}
     (opt_v773 : (option_d6‹??36, t_s765› A_v771)) ⇒
    ln (f_v774 : ??39) ⇒
      match opt_v773 as __v775 in ??40 with
      | None_c8  ⇒ None_c8‹??43, ??42›
      | Some_c9 x_v776 ⇒ (f_v774 x_v776)
      end

inductive list_d7 ‹s_s777, t_s778›
  (A_v779 : Type‹s_s777›) : Type‹t_s778›
=
| nil_c10 of
    ‹s_s780, t_s781› (A_v782 : Type‹s_s780›)
    : (list_d7‹s_s780, t_s781› A_v782)
| cons_c11 of
    ‹s_s783, t_s784› (A_v785 : Type‹s_s783›) (hd_v786 : A_v785)
    (tl_v787 : (list_d7‹s_s783, t_s784› A_v785))
    : (list_d7‹s_s783, t_s784› A_v785)

logical llen_i25 ‹s_s788, t_s789› :
  ∀ (A_v790 : Type‹s_s788›) →
    (list_d7‹s_s788, t_s789› A_v790) → nat
=
  fn (A_v792 : Type‹s_s788›)
     (xs_v793 : (list_d7‹s_s788, t_s789› A_v792)) ⇒
    match xs_v793 as __v794 in ??44 with
    | nil_c10  ⇒ 0
    | cons_c11 x_v795 xs_v796 ⇒ (llen_i25‹??47, ??46› ??45 xs_v796).+1
    end

program len_i26 ‹s_s797, t_s798› :
  ∀ {A_v799 : Type‹s_s797›} →
    (list_d7‹??48, t_s798› A_v799) →
      nat ⊗ (list_d7‹??49, t_s798› A_v799)
=
  fn {A_v802 : Type‹s_s797›}
     (xs_v803 : (list_d7‹??48, t_s798› A_v802)) ⇒
    match xs_v803 as __v804 in ??50 with
    | nil_c10  ⇒ ⟨0, nil_c10‹??60, ??59›⟩
    | cons_c11 x_v805 xs_v806 ⇒
      match (len_i26‹??53, ??52› ??51 xs_v806) as __v807 in ??54 with
      | ⟨n_v808, xs_v809⟩ ⇒
        ⟨n_v808.+1, (cons_c11‹??57, ??56› x_v805 xs_v809)⟩
      end
    end

program append_i27 ‹s_s810, t_s811› :
  ∀ {A_v812 : Type‹s_s810›} →
    (list_d7‹??61, t_s811› A_v812) →
      (list_d7‹??62, t_s811› A_v812) ⊸ (list_d7‹??64, ??63› A_v812)
=
  fn {A_v815 : Type‹s_s810›}
     (xs_v816 : (list_d7‹??61, t_s811› A_v815)) ⇒
    ln (ys_v817 : ??65) ⇒
      match xs_v816 as __v818 in ??66 with
      | nil_c10  ⇒ ys_v817
      | cons_c11 x_v819 xs_v820 ⇒
        (cons_c11‹??72, ??71›
          x_v819 (append_i27‹??69, ??68› ??67 xs_v820 ys_v817))
      end

logical stdin_rec_i28 : unit → proto =
  fn (__v822 : unit) ⇒
    ⇑(b_v823 : bool) ⇒
      match b_v823 as __v824 in ??73 with
      | true ⇒ ⇓(__v825 : string_d5) ⇒ (stdin_rec_i28 ())
      | false ⇒ end
      end

logical stdout_rec_i29 : unit → proto =
  fn (__v827 : unit) ⇒
    ⇑(b_v828 : bool) ⇒
      match b_v828 as __v829 in ??74 with
      | true ⇒ ⇑(__v830 : string_d5) ⇒ (stdout_rec_i29 ())
      | false ⇒ end
      end

logical stderr_rec_i30 : unit → proto =
  fn (__v832 : unit) ⇒
    ⇑(b_v833 : bool) ⇒
      match b_v833 as __v834 in ??75 with
      | true ⇒ ⇑(__v835 : string_d5) ⇒ (stderr_rec_i30 ())
      | false ⇒ end
      end

logical stdin_t_i31 : proto = (stdin_rec_i28 ())

logical stdout_t_i32 : proto = (stdout_rec_i29 ())

logical stderr_t_i33 : proto = (stderr_rec_i30 ())

program readline_i34 : unit → IO string_d5 =
  fn (__v837 : unit) ⇒
    let ch_v838 ⇐ open stdin in
    let ch_v839 ⇐ (send ch_v838 true) in
    let __v840 ⇐ recv ch_v839 in
    match __v840 as __v841 in ??76 with
    | ⟨s_v842, ch_v843⟩ ⇒
      let ch_v844 ⇐ (send ch_v843 false) in
      let __v845 ⇐ close ch_v844 in return s_v842
    end

program print_i35 : string_d5 → IO unit =
  fn (s_v847 : string_d5) ⇒
    let ch_v848 ⇐ open stdout in
    let ch_v849 ⇐ (send ch_v848 true) in
    let ch_v850 ⇐ (send ch_v849 s_v847) in
    let ch_v851 ⇐ (send ch_v850 false) in close ch_v851

program prerr_i36 : string_d5 → IO unit =
  fn (s_v853 : string_d5) ⇒
    let ch_v854 ⇐ open stderr in
    let ch_v855 ⇐ (send ch_v854 true) in
    let ch_v856 ⇐ (send ch_v855 s_v853) in
    let ch_v857 ⇐ (send ch_v856 false) in close ch_v857

program digits_i37 : (list_d7‹??77, U› ??78) =
  (cons_c11‹??111, ??110›
    "0"
    (cons_c11‹??108, ??107›
      "1"
      (cons_c11‹??105, ??104›
        "2"
        (cons_c11‹??102, ??101›
          "3"
          (cons_c11‹??99, ??98›
            "4"
            (cons_c11‹??96, ??95›
              "5"
              (cons_c11‹??93, ??92›
                "6"
                (cons_c11‹??90, ??89›
                  "7"
                  (cons_c11‹??87, ??86›
                    "8"
                    (cons_c11‹??84, ??83› "9" nil_c10‹??81, ??80›))))))))))

program get_at_i38 :
  ∀ {A_v858 : U} →
    nat → (list_d7‹??112, U› A_v858) → A_v858 → A_v858
=
  fn {A_v862 : U} (n_v863 : nat) (xs_v864 : (list_d7‹??112, U› A_v862))
     (a_v865 : A_v862) ⇒
    match n_v863 as __v866 in ??113 with
    | O ⇒
      match xs_v864 as __v867 in ??116 with
      | nil_c10  ⇒ a_v865 | cons_c11 x_v868 __v869 ⇒ x_v868
      end
    | S n_v870 ⇒
      match xs_v864 as __v871 in ??114 with
      | nil_c10  ⇒ a_v865
      | cons_c11 __v872 xs_v873 ⇒ (get_at_i38 ??115 n_v870 xs_v873 a_v865)
      end
    end

program string_of_digit_i39 : nat → string_d5 =
  fn (n_v875 : nat) ⇒
    (get_at_i38 ??117 n_v875 digits_i37 EmptyString_c6‹›)

program string_of_nat_i40 : nat → string_d5 =
  fn (n_v877 : nat) ⇒
    let s_v878 = (string_of_digit_i39 (modn_i17 n_v877 10)) in
    let n_v879 = (divn_i16 n_v877 10) in
    match (ltn_i7 0 n_v879) as __v880 in ??118 with
    | true ⇒ (cats_i20 (string_of_nat_i40 n_v879) s_v878)
    | false ⇒ s_v878
    end

program digit_of_char_i41 : char_d4 → (option_d6‹??119, L› nat) =
  fn (c_v882 : char_d4) ⇒
    match (eqc_i18 c_v882 '0') as __v883 in ??120 with
    | true ⇒ (Some_c9‹??162, ??161› 0)
    | false ⇒
      match (eqc_i18 c_v882 '1') as __v884 in ??121 with
      | true ⇒ (Some_c9‹??159, ??158› 1)
      | false ⇒
        match (eqc_i18 c_v882 '2') as __v885 in ??122 with
        | true ⇒ (Some_c9‹??156, ??155› 2)
        | false ⇒
          match (eqc_i18 c_v882 '3') as __v886 in ??123 with
          | true ⇒ (Some_c9‹??153, ??152› 3)
          | false ⇒
            match (eqc_i18 c_v882 '4') as __v887 in ??124 with
            | true ⇒ (Some_c9‹??150, ??149› 4)
            | false ⇒
              match (eqc_i18 c_v882 '5') as __v888 in ??125 with
              | true ⇒ (Some_c9‹??147, ??146› 5)
              | false ⇒
                match (eqc_i18 c_v882 '6') as __v889 in ??126 with
                | true ⇒ (Some_c9‹??144, ??143› 6)
                | false ⇒
                  match (eqc_i18 c_v882 '7') as __v890 in ??127 with
                  | true ⇒ (Some_c9‹??141, ??140› 7)
                  | false ⇒
                    match (eqc_i18 c_v882 '8') as __v891 in ??128 with
                    | true ⇒ (Some_c9‹??138, ??137› 8)
                    | false ⇒
                      match (eqc_i18 c_v882 '9') as __v892 in ??129 with
                      | true ⇒ (Some_c9‹??135, ??134› 9)
                      | false ⇒ None_c8‹??132, ??131›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i42 :
  string_d5 → nat → (option_d6‹??163, L› nat)
=
  fn (s_v895 : string_d5) (acc_v896 : nat) ⇒
    match s_v895 as __v897 in ??164 with
    | EmptyString_c6  ⇒ (Some_c9‹??171, ??170› acc_v896)
    | String_c7 c_v898 s_v899 ⇒
      match (digit_of_char_i41 c_v898) as __v900 in ??165 with
      | None_c8  ⇒ None_c8‹??168, ??167›
      | Some_c9 n_v901 ⇒
        (nat_of_string_loop_i42
          s_v899 (addn_i13 (muln_i15 acc_v896 10) n_v901))
      end
    end

program nat_of_string_i43 : string_d5 → (option_d6‹??172, L› nat) =
  fn (s_v903 : string_d5) ⇒ (nat_of_string_loop_i42 s_v903 0)

logical eq_sym_i44 ‹s_s904› :
  ∀ (A_v905 : Type‹s_s904›) →
    ∀ (x_v906 : A_v905) →
      ∀ (y_v907 : A_v905) →
        ∀ (__v908 : x_v906 ≡ y_v907) → y_v907 ≡ x_v906
=
  fn (A_v909 : Type‹s_s904›) (x_v910 : A_v909) (y_v911 : A_v909)
     (e_v912 : ??175) ⇒
    rew [y_v913, __v914 ⇒ y_v913 ≡ x_v910] e_v912 in refl ??176

logical f_equal_i45 ‹s_s915, t_s916› :
  ∀ (A_v917 : Type‹s_s915›) →
    ∀ (B_v918 : Type‹t_s916›) →
      ∀ (f_v919 : A_v917 → B_v918) →
        ∀ (x_v921 : A_v917) →
          ∀ (y_v922 : A_v917) →
            ∀ (__v923 : x_v921 ≡ y_v922) →
              (f_v919 x_v921) ≡ (f_v919 y_v922)
=
  fn (A_v924 : Type‹s_s915›) (B_v925 : Type‹t_s916›)
     (f_v926 : A_v924 → B_v925) (x_v927 : A_v924) (y_v928 : A_v924)
     (e_v929 : ??180) ⇒
    rew [y_v931, p_v932 ⇒ (f_v926 x_v927) ≡ (f_v926 y_v931)] e_v929 in
    refl ??181

logical bool_absurd_i46 : true ≡ false → absurd_d1 =
  fn (e_v934 : true ≡ false) ⇒
    rew [x_v935, __v936 ⇒
      match x_v935 as __v937 in ??184 with
      | true ⇒ unit | false ⇒ absurd_d1
      end] e_v934 in
    ()

logical nat_absurd_i47 : ∀ (n_v938 : nat) → n_v938.+1 ≡ 0 → absurd_d1
=
  fn (n_v940 : nat) (e_v941 : n_v940.+1 ≡ 0) ⇒
    rew [x_v942, __v943 ⇒
      match x_v942 as __v944 in ??186 with
      | O ⇒ absurd_d1 | S __v945 ⇒ unit
      end] e_v941 in
    ()

logical nat_inv_i48 :
  ∀ (n1_v946 : nat) →
    ∀ (n2_v947 : nat) →
      ∀ (e_v948 : n1_v946.+1 ≡ n2_v947.+1) → n1_v946 ≡ n2_v947
=
  fn (n1_v949 : nat) (n2_v950 : nat) (e_v951 : n1_v949.+1 ≡ n2_v950.+1) ⇒
    (f_equal_i45‹??194, ??193› ??192 ??191 pred_i12 ??190 ??189 e_v951)

logical eqn_reflect_i49 :
  ∀ (m_v952 : nat) →
    ∀ (n_v953 : nat) →
      ∀ (__v954 : (eqn_i10 m_v952 n_v953) ≡ true) → m_v952 ≡ n_v953
=
  fn (m_v955 : nat) (n_v956 : nat) ⇒
    match m_v955 as m0_v957 in
      ∀ (__v958 : (eqn_i10 m0_v957 n_v956) ≡ true) → m0_v957 ≡ n_v956 with
    | O ⇒
      match n_v956 as n0_v959 in
        ∀ (__v960 : (eqn_i10 0 n0_v959) ≡ true) → 0 ≡ n0_v959 with
      | O ⇒ fn (__v961 : ??225) ⇒ refl ??226
      | S n_v962 ⇒
        fn (e_v963 : ??218) ⇒
          (absurd_elim_i1‹??224›
            ??223
            (bool_absurd_i46
              (eq_sym_i44‹??222› ??221 ??220 ??219 e_v963)))
      end
    | S m_v964 ⇒
      match n_v956 as n0_v965 in
        ∀ (__v966 : (eqn_i10 m_v964.+1 n0_v965) ≡ true) →
          m_v964.+1 ≡ n0_v965 with
      | O ⇒
        fn (e_v967 : ??209) ⇒
          (absurd_elim_i1‹??215›
            ??214
            (bool_absurd_i46
              (eq_sym_i44‹??213› ??212 ??211 ??210 e_v967)))
      | S n_v968 ⇒
        fn (e_v969 : ??201) ⇒
          (f_equal_i45‹??208, ??207›
            ??206 ??205 fn (x_v970 : ??204) ⇒ x_v970.+1 ??203 ??202
            (eqn_reflect_i49 m_v964 n_v968 e_v969))
      end
    end

inductive word_d8 : U =
| Word_c12 of
    (s_v971 : string_d5) {pf_v972 : (strlen_i21 s_v971) ≡ 5} : word_d8

program contains_i50 : char_d4 → string_d5 → bool =
  fn (c_v975 : char_d4) (s_v976 : string_d5) ⇒
    match s_v976 as __v977 in ??228 with
    | EmptyString_c6  ⇒ false
    | String_c7 c0_v978 s_v979 ⇒
      match (eqc_i18 c_v975 c0_v978) as __v980 in ??229 with
      | true ⇒ true | false ⇒ (contains_i50 c_v975 s_v979)
      end
    end

program string_diff_i51 : string_d5 → string_d5 → string_d5 → string_d5
=
  fn (ans_v984 : string_d5) (s1_v985 : string_d5) (s2_v986 : string_d5) ⇒
    match s1_v985 as __v987 in ??230 with
    | EmptyString_c6  ⇒ EmptyString_c6‹›
    | String_c7 c1_v988 s1_v989 ⇒
      match s2_v986 as __v990 in ??231 with
      | EmptyString_c6  ⇒ EmptyString_c6‹›
      | String_c7 c2_v991 s2_v992 ⇒
        match (eqc_i18 c1_v988 c2_v991) as __v993 in ??232 with
        | true ⇒ (cats_i20 "Y" (string_diff_i51 ans_v984 s1_v989 s2_v992))
        | false ⇒
          match (contains_i50 c2_v991 ans_v984) as __v994 in ??233 with
          | true ⇒
            (cats_i20 "I" (string_diff_i51 ans_v984 s1_v989 s2_v992))
          | false ⇒
            (cats_i20 "N" (string_diff_i51 ans_v984 s1_v989 s2_v992))
          end
        end
      end
    end

logical string_diff_len_i52 :
  ∀ (n_v995 : nat) →
    ∀ (ans_v996 : string_d5) →
      ∀ (s1_v997 : string_d5) →
        ∀ (s2_v998 : string_d5) →
          ∀ (__v999 : n_v995 ≡ (strlen_i21 s1_v997)) →
            ∀ (__v1000 : n_v995 ≡ (strlen_i21 s2_v998)) →
              n_v995 ≡
                (strlen_i21 (string_diff_i51 ans_v996 s1_v997 s2_v998))
=
  fn (n_v1001 : nat) (ans_v1002 : string_d5) (s1_v1003 : string_d5)
     (s2_v1004 : string_d5) ⇒
    match s1_v1003 as s0_v1005 in
      ∀ (__v1006 : n_v1001 ≡ (strlen_i21 s0_v1005)) →
        ∀ (__v1007 : n_v1001 ≡ (strlen_i21 s2_v1004)) →
          n_v1001 ≡
            (strlen_i21 (string_diff_i51 ans_v1002 s0_v1005 s2_v1004)) with
    | EmptyString_c6  ⇒
      match s2_v1004 as s0_v1008 in
        ∀ (__v1009 : n_v1001 ≡ 0) →
          ∀ (__v1010 : n_v1001 ≡ (strlen_i21 s0_v1008)) → n_v1001 ≡ 0 with
      | EmptyString_c6  ⇒
        fn (e1_v1011 : ??298) (__v1012 : ??299) ⇒ e1_v1011
      | String_c7 c2_v1013 s2_v1014 ⇒
        fn (e1_v1015 : ??292) (e2_v1016 : ??293) ⇒
          let e3_v1017 =
            rew [n_v1018, __v1019 ⇒ n_v1018 ≡ 0] e2_v1016 in e1_v1015
          in
          (absurd_elim_i1‹??297› ??296 (nat_absurd_i47 ??295 e3_v1017))
      end
    | String_c7 c1_v1020 s1_v1021 ⇒
      match s2_v1004 as s0_v1022 in
        ∀ (__v1023 :
          n_v1001 ≡ (strlen_i21 (String_c7‹› c1_v1020 s1_v1021))) →
          ∀ (__v1024 : n_v1001 ≡ (strlen_i21 s0_v1022)) →
            n_v1001 ≡
              (strlen_i21
                (string_diff_i51
                  ans_v1002 (String_c7‹› c1_v1020 s1_v1021) s0_v1022)) with
      | EmptyString_c6  ⇒
        fn (e1_v1025 : ??283) (e2_v1026 : ??284) ⇒
          let e3_v1027 =
            rew [n_v1028, __v1029 ⇒ n_v1028 ≡ 0] e1_v1025 in e2_v1026
          in
          (absurd_elim_i1‹??288› ??287 (nat_absurd_i47 ??286 e3_v1027))
      | String_c7 c2_v1030 s2_v1031 ⇒
        fn (e1_v1032 : ??243) (e2_v1033 : ??244) ⇒
          (match n_v1001 as n0_v1034 in
             ∀ (__v1035 : n_v1001 ≡ n0_v1034) →
               n0_v1034 ≡
                 (strlen_i21
                   (string_diff_i51
                     ans_v1002 (String_c7‹› c1_v1020 s1_v1021)
                     (String_c7‹› c2_v1030 s2_v1031))) with
           | O ⇒
             fn (e0_v1036 : ??277) ⇒
               let e3_v1037 =
                 rew [n_v1038, __v1039 ⇒ n_v1038 ≡ 0] e1_v1032 in
                 e0_v1036
               in
               (absurd_elim_i1‹??281›
                 ??280 (nat_absurd_i47 ??279 e3_v1037))
           | S n0_v1040 ⇒
             fn (e0_v1041 : ??247) ⇒
               let e3_v1042 =
                 rew [n1_v1043, __v1044 ⇒
                   n1_v1043 ≡ (strlen_i21 s1_v1021).+1] e0_v1041 in
                 e1_v1032
               in
               let e4_v1045 =
                 rew [n1_v1046, __v1047 ⇒
                   n1_v1046 ≡ (strlen_i21 s2_v1031).+1] e0_v1041 in
                 e2_v1033
               in
               let e5_v1048 = (nat_inv_i48 ??251 ??250 e3_v1042) in
               let e6_v1049 = (nat_inv_i48 ??253 ??252 e4_v1045) in
               match (eqc_i18 c1_v1020 c2_v1030) as b0_v1050 in
                 n0_v1040.+1 ≡
                   (strlen_i21
                     match b0_v1050 as __v1051 in ??254 with
                     | true ⇒
                       (cats_i20
                         "Y" (string_diff_i51 ans_v1002 s1_v1021 s2_v1031))
                     | false ⇒
                       match (contains_i50 c2_v1030 ans_v1002) as __v1052 in
                         ??255 with
                       | true ⇒
                         (cats_i20
                           "I" (string_diff_i51 ans_v1002 s1_v1021 s2_v1031))
                       | false ⇒
                         (cats_i20
                           "N" (string_diff_i51 ans_v1002 s1_v1021 s2_v1031))
                       end
                     end) with
               | true ⇒
                 rew [n1_v1053, __v1054 ⇒ n0_v1040.+1 ≡ n1_v1053.+1]
                   (string_diff_len_i52
                     ??274 ??273 ??272 ??271 e5_v1048 e6_v1049) in
                 refl ??275
               | false ⇒
                 match (contains_i50 c2_v1030 ans_v1002) as b0_v1055 in
                   n0_v1040.+1 ≡
                     (strlen_i21
                       match b0_v1055 as __v1056 in ??257 with
                       | true ⇒
                         (cats_i20
                           "I" (string_diff_i51 ans_v1002 s1_v1021 s2_v1031))
                       | false ⇒
                         (cats_i20
                           "N" (string_diff_i51 ans_v1002 s1_v1021 s2_v1031))
                       end) with
                 | true ⇒
                   rew [n1_v1057, __v1058 ⇒ n0_v1040.+1 ≡ n1_v1057.+1]
                     (string_diff_len_i52
                       ??268 ??267 ??266 ??265 e5_v1048 e6_v1049) in
                   refl ??269
                 | false ⇒
                   rew [n1_v1059, __v1060 ⇒ n0_v1040.+1 ≡ n1_v1059.+1]
                     (string_diff_len_i52
                       ??262 ??261 ??260 ??259 e5_v1048 e6_v1049) in
                   refl ??263
                 end
               end
           end refl ??282)
      end
    end

program wordle_diff_i53 : word_d8 → word_d8 → word_d8 =
  fn (ans_v1063 : word_d8) (guess_v1064 : word_d8) ⇒
    match ans_v1063 as __v1065 in ??300 with
    | Word_c12 ans_v1066 pf1_v1067 ⇒
      match guess_v1064 as __v1068 in ??301 with
      | Word_c12 guess_v1069 pf2_v1070 ⇒
        let {pf1_v1071} = (eq_sym_i44‹??305› ??304 ??303 ??302 pf1_v1067)
        in
        let {pf2_v1072} = (eq_sym_i44‹??309› ??308 ??307 ??306 pf2_v1070)
        in
        let {pf_v1073} =
          (string_diff_len_i52 ??313 ??312 ??311 ??310 pf1_v1071 pf2_v1072)
        in
        (Word_c12‹›
          (string_diff_i51 ans_v1066 ans_v1066 guess_v1069)
          (eq_sym_i44‹??317› ??316 ??315 ??314 pf_v1073))
      end
    end

program eqw_i54 : word_d8 → word_d8 → bool =
  fn (w1_v1076 : word_d8) (w2_v1077 : word_d8) ⇒
    match w1_v1076 as __v1078 in ??318 with
    | Word_c12 s1_v1079 __v1080 ⇒
      match w2_v1077 as __v1081 in ??319 with
      | Word_c12 s2_v1082 __v1083 ⇒ (eqs_i22 s1_v1079 s2_v1082)
      end
    end

logical wordle_loop_i55 : word_d8 → nat → proto =
  fn (ans_v1086 : word_d8) (repeat_v1087 : nat) ⇒
    match repeat_v1087 as __v1088 in ??320 with
    | O ⇒
      ⇑(w_v1089 : word_d8) ⇒ ⇑{__v1090 : w_v1089 ≡ ans_v1086} ⇒ end
    | S repeat_v1091 ⇒
      ⇓(guess_v1092 : word_d8) ⇒
        ⇑(b_v1093 : bool) ⇒
          ⇑{__v1094 : b_v1093 ≡ (eqw_i54 ans_v1086 guess_v1092)} ⇒
            match b_v1093 as __v1095 in ??322 with
            | true ⇒ end
            | false ⇒
              ⇑(w_v1096 : word_d8) ⇒
                ⇑{__v1097 :
                  w_v1096 ≡ (wordle_diff_i53 ans_v1086 guess_v1092)} ⇒
                  (wordle_loop_i55 ans_v1086 repeat_v1091)
            end
    end

logical wordle_i56 : proto =
  ⇑{ans_v1098 : word_d8} ⇒
    ⇑(repeat_v1099 : nat) ⇒ (wordle_loop_i55 ans_v1098 repeat_v1099)

logical loop_ch_i57 : word_d8 → nat → L =
  fn (ans_v1102 : word_d8) (repeat_v1103 : nat) ⇒
    ch⟨(wordle_loop_i55 ans_v1102 repeat_v1103)⟩

logical loop_hc_i58 : word_d8 → nat → L =
  fn (ans_v1106 : word_d8) (repeat_v1107 : nat) ⇒
    hc⟨(wordle_loop_i55 ans_v1106 repeat_v1107)⟩

logical wordle_ch_i59 : L = ch⟨wordle_i56⟩

logical wordle_hc_i60 : L = hc⟨wordle_i56⟩

program read_word_i61 : unit → IO word_d8 =
  fn (__v1109 : unit) ⇒
    let s_v1110 ⇐ (readline_i34 ()) in
    (match (eqn_i10 (strlen_i21 s_v1110) 5) as b0_v1111 in
       {(eqn_i10 (strlen_i21 s_v1110) 5) ≡ b0_v1111} → IO word_d8 with
     | true ⇒
       fn {e_v1113 : ??327} ⇒
         return (Word_c12‹›
                  s_v1110 (eqn_reflect_i49 ??329 ??328 e_v1113))
     | false ⇒
       fn {__v1114 : ??326} ⇒
         let __v1115 ⇐ (print_i35 "please input a word with length of 5\n")
         in (read_word_i61 ())
     end refl ??330)

program player_loop_i62 :
  ∀ {ans_v1116 : word_d8} →
    ∀ (repeat_v1117 : nat) →
      (loop_hc_i58 ans_v1116 repeat_v1117) → IO unit
=
  fn {ans_v1119 : word_d8} (repeat_v1120 : nat)
     (c_v1121 : (loop_hc_i58 ans_v1119 repeat_v1120)) ⇒
    (match repeat_v1120 as repeat0_v1122 in
       (loop_hc_i58 ans_v1119 repeat0_v1122) → IO unit with
     | O ⇒
       fn (c_v1124 : ??341) ⇒
         let __v1125 ⇐ recv c_v1124 in
         match __v1125 as __v1126 in ??344 with
         | ⟨ans_v1127, c_v1128⟩ ⇒
           let __v1129 ⇐ recv c_v1128 in
           match __v1129 as __v1130 in ??343 with
           | ⟨{pf_v1131}, c_v1132⟩ ⇒
             match ans_v1127 as __v1133 in ??342 with
             | Word_c12 s_v1134 __v1135 ⇒
               let __v1136 ⇐
                 (print_i35
                   (cats_i20
                     (cats_i20 "You Lose! The answer is " s_v1134) ".\n"))
               in close c_v1132
             end
           end
         end
     | S repeat_v1137 ⇒
       fn (c_v1138 : ??331) ⇒
         let guess_v1139 ⇐ (read_word_i61 ()) in
         let c_v1140 ⇐ (send c_v1138 guess_v1139) in
         let __v1141 ⇐ recv c_v1140 in
         match __v1141 as __v1142 in ??340 with
         | ⟨b_v1143, c_v1144⟩ ⇒
           let __v1145 ⇐ recv c_v1144 in
           match __v1145 as __v1146 in ??339 with
           | ⟨{pf_v1147}, c_v1148⟩ ⇒
             (match b_v1143 as b0_v1149 in
                hc⟨match b0_v1149 as __v1151 in ??332 with
                     | true ⇒ end
                     | false ⇒
                       ⇑(w_v1152 : word_d8) ⇒
                         ⇑{__v1153 :
                           w_v1152 ≡
                             (wordle_diff_i53 ans_v1119 guess_v1139)} ⇒
                           (wordle_loop_i55 ans_v1119 repeat_v1137)
                     end⟩ ⊸
                  IO unit with
              | true ⇒
                ln (c_v1154 : ??338) ⇒
                  let __v1155 ⇐ (print_i35 "You Win!\n") in close c_v1154
              | false ⇒
                ln (c_v1156 : ??334) ⇒
                  let __v1157 ⇐ recv c_v1156 in
                  match __v1157 as __v1158 in ??337 with
                  | ⟨diff_v1159, c_v1160⟩ ⇒
                    let __v1161 ⇐ recv c_v1160 in
                    match __v1161 as __v1162 in ??336 with
                    | ⟨{pf_v1163}, c_v1164⟩ ⇒
                      match diff_v1159 as __v1165 in ??335 with
                      | Word_c12 s_v1166 __v1167 ⇒
                        let __v1168 ⇐
                          (print_i35
                            (cats_i20
                              (cats_i20
                                (cats_i20
                                  (cats_i20 "Incorrect, hint: " s_v1166)
                                  ". You have ")
                                (string_of_nat_i40 repeat_v1137))
                              " more tries.\n"))
                        in (player_loop_i62 ans_v1119 repeat_v1137 c_v1164)
                      end
                    end
                  end
              end c_v1148)
           end
         end
     end c_v1121)

program player_i63 : wordle_hc_i60 → IO unit =
  fn (c_v1170 : wordle_hc_i60) ⇒
    let __v1171 ⇐ recv c_v1170 in
    match __v1171 as __v1172 in ??346 with
    | ⟨{ans_v1173}, c_v1174⟩ ⇒
      let __v1175 ⇐ recv c_v1174 in
      match __v1175 as __v1176 in ??345 with
      | ⟨repeat_v1177, c_v1178⟩ ⇒
        let __v1179 ⇐ (print_i35 "Wordle Game\n") in
        let __v1180 ⇐ (print_i35 "Please guess a word of length 5.\n") in
        let __v1181 ⇐
          (print_i35
            (cats_i20
              (cats_i20 "You have " (string_of_nat_i40 repeat_v1177))
              " tries.\n"))
        in (player_loop_i62 ans_v1173 repeat_v1177 c_v1178)
      end
    end

inductive subset_d9 ‹s_s1182, r_s1183, t_s1184›
  (A_v1185 : Type‹s_s1182›) (P_v1186 : A_v1185 → Type‹r_s1183›) : Type‹t_s1184›
=
| SPair_c13 of
    ‹s_s1188, r_s1189, t_s1190› (A_v1191 : Type‹s_s1188›)
    (P_v1192 : A_v1191 → Type‹r_s1189›) (m_v1194 : A_v1191)
    {pf_v1195 : (P_v1192 m_v1194)}
    : (subset_d9‹s_s1188, r_s1189, t_s1190› A_v1191 P_v1192)

inductive at_d10
  (A_v1196 : U) (x_v1197 : A_v1196) (n_v1198 : nat) (xs_v1199 : (list_d7‹??347,
                                                                U› 
                                                                A_v1196)) : U
=
| at_O_c14 of
    (A_v1200 : U) (x_v1201 : A_v1200) (n_v1202 : nat)
    (xs_v1203 : (list_d7‹??348, U› A_v1200))
    (xs0_v1204 : (list_d7‹??350, ??349› A_v1200))
    {pf1_v1205 : n_v1202 ≡ 0}
    {pf2_v1206 : xs_v1203 ≡ (cons_c11‹??354, ??353› x_v1201 xs0_v1204)}
    : (at_d10 A_v1200 x_v1201 n_v1202 xs_v1203)
| at_S_c15 of
    (A_v1207 : U) (x_v1208 : A_v1207) (n_v1209 : nat)
    (xs_v1210 : (list_d7‹??356, U› A_v1207)) (n0_v1211 : nat)
    (x0_v1212 : A_v1207) (xs0_v1213 : (list_d7‹??358, ??357› A_v1207))
    (h_v1214 : (at_d10 A_v1207 x_v1208 n0_v1211 xs0_v1213))
    {pf1_v1215 : n_v1209 ≡ n0_v1211.+1}
    {pf2_v1216 : xs_v1210 ≡ (cons_c11‹??362, ??361› x0_v1212 xs0_v1213)}
    : (at_d10 A_v1207 x_v1208 n_v1209 xs_v1210)

logical ltn_inv_i64 :
  ∀ (m_v1217 : nat) →
    ∀ (n_v1218 : nat) →
      ∀ (__v1219 : (ltn_i7 m_v1217.+1 n_v1218.+1) ≡ true) →
        (ltn_i7 m_v1217 n_v1218) ≡ true
= fn (m_v1220 : nat) (n_v1221 : nat) (h_v1222 : ??366) ⇒ h_v1222

program get_at_i65 :
  ∀ {A_v1223 : U} →
    ∀ (n_v1224 : nat) →
      ∀ (xs_v1225 : (list_d7‹??368, ??367› A_v1223)) →
        ∀ {__v1226 :
          (ltn_i7 n_v1224 (llen_i25‹??371, ??370› ??369 xs_v1225)) ≡
            true} →
          (subset_d9‹??373, ??374, U›
            ??377
            fn (x_v1227 : ??375) ⇒ (at_d10 ??376 x_v1227 n_v1224 xs_v1225))
=
  fn {A_v1228 : U} (n_v1229 : nat)
     (xs_v1230 : (list_d7‹??368, ??367› A_v1228)) ⇒
    match xs_v1230 as xs0_v1231 in
      ∀ {__v1232 :
        (ltn_i7 n_v1229 (llen_i25‹??380, ??379› ??378 xs0_v1231)) ≡
          true} →
        (subset_d9‹??387, ??386, ??385›
          ??384
          fn (x_v1233 : ??382) ⇒ (at_d10 ??383 x_v1233 n_v1229 xs0_v1231)) with
    | nil_c10  ⇒
      fn {e_v1234 : ??432} ⇒
        rew [b_v1235, __v1236 ⇒
          match b_v1235 as __v1237 in ??433 with
          | true ⇒
            (subset_d9‹??442, ??441, ??440›
              ??439
              fn (x_v1238 : ??434) ⇒
                (at_d10 ??438 x_v1238 n_v1229 nil_c10‹??437, ??436›))
          | false ⇒ unit
          end] e_v1234 in
        ()
    | cons_c11 x_v1239 xs_v1240 ⇒
      match n_v1229 as n0_v1241 in
        ∀ {__v1242 :
          (ltn_i7 n0_v1241 (llen_i25‹??390, ??389› ??388 xs_v1240).+1) ≡
            true} →
          (subset_d9‹??400, ??399, ??398›
            ??397
            fn (x0_v1243 : ??392) ⇒
              (at_d10
                ??396 x0_v1243 n0_v1241
                (cons_c11‹??395, ??394› x_v1239 xs_v1240))) with
      | O ⇒
        fn {e_v1244 : ??420} ⇒
          (SPair_c13‹??431, ??430, ??429›
            x_v1239 (at_O_c14‹› xs_v1240 refl ??422 refl ??421))
      | S n_v1245 ⇒
        fn {e_v1246 : ??401} ⇒
          match (get_at_i65
                  ??404 n_v1245 xs_v1240 (ltn_inv_i64 ??403 ??402 e_v1246)) as __v1247 in
            ??405 with
          | SPair_c13 x0_v1248 pf_v1249 ⇒
            (SPair_c13‹??419, ??418, ??417›
              x0_v1248
              (at_S_c15‹›
                ??410 ??409 ??408 pf_v1249 refl ??407 refl ??406))
          end
      end
    end

program rand_word_i66 : unit → IO word_d8 =
  fn (__v1251 : unit) ⇒
    let words_v1252 =
      ((cons_c11‹??525, ??524›
         (Word_c12‹› "route" refl ??522)
         (cons_c11‹??521, ??520›
           (Word_c12‹› "crash" refl ??518)
           (cons_c11‹??517, ??516›
             (Word_c12‹› "clown" refl ??514)
             (cons_c11‹??513, ??512›
               (Word_c12‹› "shaky" refl ??510)
               (cons_c11‹??509, ??508›
                 (Word_c12‹› "vegan" refl ??506)
                 (cons_c11‹??505, ??504›
                   (Word_c12‹› "power" refl ??502)
                   (cons_c11‹??501, ??500›
                     (Word_c12‹› "trust" refl ??498)
                     (cons_c11‹??497, ??496›
                       (Word_c12‹› "enjoy" refl ??494)
                       (cons_c11‹??493, ??492›
                         (Word_c12‹› "brain" refl ??490)
                         (cons_c11‹??489, ??488›
                           (Word_c12‹› "adopt" refl ??486)
                           (cons_c11‹??485, ??484›
                             (Word_c12‹› "tower" refl ??482)
                             (cons_c11‹??481, ??480›
                               (Word_c12‹› "shade" refl ??478)
                               (cons_c11‹??477, ??476›
                                 (Word_c12‹› "delay" refl ??474)
                                 (cons_c11‹??473, ??472›
                                   (Word_c12‹› "twist" refl ??470)
                                   (cons_c11‹??469, ??468›
                                     (Word_c12‹› "alert" refl ??466)
                                     (cons_c11‹??465, ??464›
                                       (Word_c12‹› "choke" refl ??462)
                                       (cons_c11‹??461, ??460›
                                         (Word_c12‹› "split" refl ??458)
                                         (cons_c11‹??457, ??456›
                                           (Word_c12‹›
                                             "rhyme" refl ??454)
                                           (cons_c11‹??453, ??452›
                                             (Word_c12‹›
                                               "muddy" refl ??450)
                                             (cons_c11‹??449, ??448›
                                               (Word_c12‹›
                                                 "plant" refl ??446)
                                               nil_c10‹??445, ??444›))))))))))))))))))))
        : (list_d7‹??526, U› ??527))
    in
    let r_v1253 ⇐ rand 0 19 in
    match r_v1253 as __v1254 in ??528 with
    | Between_c4 n_v1255 __v1256 pf_v1257 ⇒
      match (get_at_i65 ??529 n_v1255 words_v1252 pf_v1257) as __v1258 in
        ??530 with
      | SPair_c13 w_v1259 __v1260 ⇒ return w_v1259
      end
    end

program server_loop_i67 :
  ∀ (ans_v1261 : word_d8) →
    ∀ (repeat_v1262 : nat) →
      (loop_ch_i57 ans_v1261 repeat_v1262) → IO unit
=
  fn (ans_v1264 : word_d8) (repeat_v1265 : nat)
     (c_v1266 : (loop_ch_i57 ans_v1264 repeat_v1265)) ⇒
    (match repeat_v1265 as repeat0_v1267 in
       (loop_ch_i57 ans_v1264 repeat0_v1267) → IO unit with
     | O ⇒
       fn (c_v1269 : ??539) ⇒
         let c_v1270 ⇐ (send c_v1269 ans_v1264) in
         let c_v1271 ⇐ (send c_v1270 refl ??540) in close c_v1271
     | S repeat_v1272 ⇒
       fn (c_v1273 : ??531) ⇒
         let __v1274 ⇐ recv c_v1273 in
         match __v1274 as __v1275 in ??538 with
         | ⟨guess_v1276, c_v1277⟩ ⇒
           let b_v1278 = (eqw_i54 ans_v1264 guess_v1276) in
           let c_v1279 ⇐ (send c_v1277 b_v1278) in
           let c_v1280 ⇐ (send c_v1279 refl ??532) in
           (match b_v1278 as b0_v1281 in
              ch⟨match b0_v1281 as __v1283 in ??533 with
                   | true ⇒ end
                   | false ⇒
                     ⇑(w_v1284 : word_d8) ⇒
                       ⇑{__v1285 :
                         w_v1284 ≡ (wordle_diff_i53 ans_v1264 guess_v1276)} ⇒
                         (wordle_loop_i55 ans_v1264 repeat_v1272)
                   end⟩ ⊸
                IO unit with
            | true ⇒ ln (c_v1286 : ??537) ⇒ close c_v1286
            | false ⇒
              ln (c_v1287 : ??535) ⇒
                let c_v1288 ⇐
                  (send c_v1287 (wordle_diff_i53 ans_v1264 guess_v1276))
                in
                let c_v1289 ⇐ (send c_v1288 refl ??536) in
                (server_loop_i67 ans_v1264 repeat_v1272 c_v1289)
            end c_v1280)
         end
     end c_v1266)

program server_i68 : wordle_ch_i59 → IO unit =
  fn (c_v1291 : wordle_ch_i59) ⇒
    let repeat_v1292 = 6 in
    let ans_v1293 ⇐ (rand_word_i66 ()) in
    let c_v1294 ⇐ (send c_v1291 ans_v1293) in
    let c_v1295 ⇐ (send c_v1294 repeat_v1292) in
    (server_loop_i67 ans_v1293 repeat_v1292 c_v1295)

program main_i69 : IO unit =
  let c_v1296 ⇐ fork (c_v1297 : wordle_ch_i59) in (server_i68 c_v1297) in
  let c0_v1298 ⇐
    fork (c0_v1299 :
      ch⟨⇓(__v1300 : wordle_hc_i60) ⇒ ⇑(__v1301 : unit) ⇒ end⟩)
    in
      let __v1302 ⇐ recv c0_v1299 in
      match __v1302 as __v1303 in ??541 with
      | ⟨c_v1304, c0_v1305⟩ ⇒
        let __v1306 ⇐ (player_i63 c_v1304) in
        let c0_v1307 ⇐ (send c0_v1305 ()) in close c0_v1307
      end
  in
  let c0_v1308 ⇐ (send c0_v1298 c_v1296) in
  let __v1309 ⇐ recv c0_v1308 in
  match __v1309 as __v1310 in ??542 with
  | ⟨__v1311, c0_v1312⟩ ⇒ close c0_v1312
  end

trans01 success--------------------------

inductive absurd_d1 : U =


logical absurd_elim_i1 ‹s_s501798› :
  ∀ (A_v501799 : Type‹s_s501798›) → absurd_d1 → A_v501799
=
  fn (A_v501801 : Type‹s_s501798›) (p_v501802 : absurd_d1) ⇒
    match p_v501802 as __v501803 in A_v501801 with
    
    end

inductive order_d2 : U =
| LT_c1 of : order_d2 | GT_c2 of : order_d2 | EQ_c3 of : order_d2

program andb_i2 : bool → bool → bool =
  fn (b1_v501806 : bool) (b2_v501807 : bool) ⇒
    match b1_v501806 as __v501808 in bool with
    | true ⇒ b2_v501807 | false ⇒ false
    end

program orb_i3 : bool → bool → bool =
  fn (b1_v501811 : bool) (b2_v501812 : bool) ⇒
    match b1_v501811 as __v501813 in bool with
    | true ⇒ true | false ⇒ b2_v501812
    end

program notb_i4 : bool → bool =
  fn (b_v501815 : bool) ⇒
    match b_v501815 as __v501816 in bool with
    | true ⇒ false | false ⇒ true
    end

program compareb_i5 : bool → bool → order_d2 =
  fn (b1_v501819 : bool) (b2_v501820 : bool) ⇒
    match b1_v501819 as __v501821 in order_d2 with
    | true ⇒
      match b2_v501820 as __v501822 in order_d2 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v501820 as __v501823 in order_d2 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i6 : nat → nat → bool =
  fn (x_v501826 : nat) (y_v501827 : nat) ⇒
    match x_v501826 as __v501828 in bool with
    | O ⇒ true
    | S x_v501829 ⇒
      match y_v501827 as __v501830 in bool with
      | O ⇒ false | S y_v501831 ⇒ (lten_i6 x_v501829 y_v501831)
      end
    end

program ltn_i7 : nat → nat → bool =
  fn (x_v501834 : nat) (y_v501835 : nat) ⇒ (lten_i6 x_v501834.+1 y_v501835)

program gten_i8 : nat → nat → bool =
  fn (x_v501838 : nat) (y_v501839 : nat) ⇒ (lten_i6 y_v501839 x_v501838)

program gtn_i9 : nat → nat → bool =
  fn (x_v501842 : nat) (y_v501843 : nat) ⇒ (ltn_i7 y_v501843 x_v501842)

program eqn_i10 : nat → nat → bool =
  fn (x_v501846 : nat) (y_v501847 : nat) ⇒
    match x_v501846 as __v501848 in bool with
    | O ⇒
      match y_v501847 as __v501849 in bool with
      | O ⇒ true | S __v501850 ⇒ false
      end
    | S x_v501851 ⇒
      match y_v501847 as __v501852 in bool with
      | O ⇒ false | S y_v501853 ⇒ (eqn_i10 x_v501851 y_v501853)
      end
    end

program comparen_i11 : nat → nat → order_d2 =
  fn (n1_v501856 : nat) (n2_v501857 : nat) ⇒
    match n1_v501856 as __v501858 in order_d2 with
    | O ⇒
      match n2_v501857 as __v501859 in order_d2 with
      | O ⇒ EQ_c3‹› | S __v501860 ⇒ LT_c1‹›
      end
    | S n1_v501861 ⇒
      match n2_v501857 as __v501862 in order_d2 with
      | O ⇒ GT_c2‹›
      | S n2_v501863 ⇒ (comparen_i11 n1_v501861 n2_v501863)
      end
    end

program pred_i12 : nat → nat =
  fn (x_v501865 : nat) ⇒
    match x_v501865 as __v501866 in nat with
    | O ⇒ 0 | S x_v501867 ⇒ x_v501867
    end

program addn_i13 : nat → nat → nat =
  fn (x_v501870 : nat) (y_v501871 : nat) ⇒
    match x_v501870 as __v501872 in nat with
    | O ⇒ y_v501871 | S x_v501873 ⇒ (addn_i13 x_v501873 y_v501871).+1
    end

program subn_i14 : nat → nat → nat =
  fn (x_v501876 : nat) (y_v501877 : nat) ⇒
    match y_v501877 as __v501878 in nat with
    | O ⇒ x_v501876
    | S y_v501879 ⇒ (subn_i14 (pred_i12 x_v501876) y_v501879)
    end

program muln_i15 : nat → nat → nat =
  fn (x_v501882 : nat) (y_v501883 : nat) ⇒
    match x_v501882 as __v501884 in nat with
    | O ⇒ 0
    | S x_v501885 ⇒ (addn_i13 y_v501883 (muln_i15 x_v501885 y_v501883))
    end

program divn_i16 : nat → nat → nat =
  fn (x_v501888 : nat) (y_v501889 : nat) ⇒
    match (ltn_i7 x_v501888 y_v501889) as __v501890 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i16 (subn_i14 x_v501888 y_v501889) y_v501889).+1
    end

program modn_i17 : nat → nat → nat =
  fn (x_v501893 : nat) (y_v501894 : nat) ⇒
    (subn_i14 x_v501893 (muln_i15 (divn_i16 x_v501893 y_v501894) y_v501894))

inductive between_d3 (lower_v501895 : nat) (upper_v501896 : nat) : L =
| Between_c4 of
    (lower_v501897 : nat) (upper_v501898 : nat) (n_v501899 : nat)
    {pf1_v501900 : (lten_i6 lower_v501897 n_v501899) ≡ true}
    {pf2_v501901 : (lten_i6 n_v501899 upper_v501898) ≡ true}
    : (between_d3 lower_v501897 upper_v501898)

inductive char_d4 : U =
| Char_c5 of (n_v501902 : nat) : char_d4

program eqc_i18 : char_d4 → char_d4 → bool =
  fn (c1_v501905 : char_d4) (c2_v501906 : char_d4) ⇒
    match c1_v501905 as __v501907 in bool with
    | Char_c5 n1_v501908 ⇒
      match c2_v501906 as __v501909 in bool with
      | Char_c5 n2_v501910 ⇒ (eqn_i10 n1_v501908 n2_v501910)
      end
    end

program comparec_i19 : char_d4 → char_d4 → order_d2 =
  fn (c1_v501913 : char_d4) (c2_v501914 : char_d4) ⇒
    match c1_v501913 as __v501915 in order_d2 with
    | Char_c5 n1_v501916 ⇒
      match c2_v501914 as __v501917 in order_d2 with
      | Char_c5 n2_v501918 ⇒ (comparen_i11 n1_v501916 n2_v501918)
      end
    end

inductive string_d5 : U =
| EmptyString_c6 of : string_d5
| String_c7 of (c_v501919 : char_d4) (s_v501920 : string_d5) : string_d5

program cats_i20 : string_d5 → string_d5 → string_d5 =
  fn (s1_v501923 : string_d5) (s2_v501924 : string_d5) ⇒
    match s1_v501923 as __v501925 in string_d5 with
    | EmptyString_c6  ⇒ s2_v501924
    | String_c7 c_v501926 s1_v501927 ⇒
      (String_c7‹› c_v501926 (cats_i20 s1_v501927 s2_v501924))
    end

program strlen_i21 : string_d5 → nat =
  fn (s_v501929 : string_d5) ⇒
    match s_v501929 as __v501930 in nat with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v501931 s_v501932 ⇒ (strlen_i21 s_v501932).+1
    end

program eqs_i22 : string_d5 → string_d5 → bool =
  fn (s1_v501935 : string_d5) (s2_v501936 : string_d5) ⇒
    match s1_v501935 as __v501937 in bool with
    | EmptyString_c6  ⇒
      match s2_v501936 as __v501938 in bool with
      | EmptyString_c6  ⇒ true | String_c7 __v501939 __v501940 ⇒ false
      end
    | String_c7 c1_v501941 s1_v501942 ⇒
      match s2_v501936 as __v501943 in bool with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v501944 s2_v501945 ⇒
        (andb_i2
          (eqc_i18 c1_v501941 c2_v501944) (eqs_i22 s1_v501942 s2_v501945))
      end
    end

program compares_i23 : string_d5 → string_d5 → order_d2 =
  fn (s1_v501948 : string_d5) (s2_v501949 : string_d5) ⇒
    match s1_v501948 as __v501950 in order_d2 with
    | EmptyString_c6  ⇒
      match s2_v501949 as __v501951 in order_d2 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v501952 __v501953 ⇒ LT_c1‹›
      end
    | String_c7 c1_v501954 s1_v501955 ⇒
      match s2_v501949 as __v501956 in order_d2 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v501957 s2_v501958 ⇒
        match (comparec_i19 c1_v501954 c2_v501957) as __v501959 in
          order_d2 with
        | EQ_c3  ⇒ (compares_i23 s1_v501955 s2_v501958)
        | LT_c1  ⇒ LT_c1‹› | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d6 ‹s_s501960, t_s501961›
  (A_v501962 : Type‹s_s501960›) : Type‹t_s501961›
=
| None_c8 of
    ‹s_s501963, t_s501964› (A_v501965 : Type‹s_s501963›)
    : (option_d6‹s_s501963, t_s501964› A_v501965)
| Some_c9 of
    ‹s_s501966, t_s501967› (A_v501968 : Type‹s_s501966›)
    (x_v501969 : A_v501968) : (option_d6‹s_s501966, t_s501967› A_v501968)

program and_then_i24 ‹s_s501970, r_s501971, t_s501972› :
  ∀ {A_v501973 : Type‹s_s501970›} →
    ∀ {B_v501974 : Type‹r_s501971›} →
      (option_d6‹s_s501970, t_s501972› A_v501973) →
        A_v501973 → (option_d6‹r_s501971, t_s501972› B_v501974) ⊸
          (option_d6‹r_s501971, t_s501972› B_v501974)
=
  fn {A_v501978 : Type‹s_s501970›} {B_v501979 : Type‹r_s501971›}
     (opt_v501980 : (option_d6‹s_s501970, t_s501972› A_v501978)) ⇒
    ln (f_v501981 : A_v501978 →
                      (option_d6‹r_s501971, t_s501972› B_v501979)) ⇒
      match opt_v501980 as __v501983 in
        (option_d6‹r_s501971, t_s501972› B_v501979) with
      | None_c8  ⇒ None_c8‹r_s501971, t_s501972›
      | Some_c9 x_v501984 ⇒ (f_v501981 x_v501984)
      end

inductive list_d7 ‹s_s501985, t_s501986›
  (A_v501987 : Type‹s_s501985›) : Type‹t_s501986›
=
| nil_c10 of
    ‹s_s501988, t_s501989› (A_v501990 : Type‹s_s501988›)
    : (list_d7‹s_s501988, t_s501989› A_v501990)
| cons_c11 of
    ‹s_s501991, t_s501992› (A_v501993 : Type‹s_s501991›)
    (hd_v501994 : A_v501993)
    (tl_v501995 : (list_d7‹s_s501991, t_s501992› A_v501993))
    : (list_d7‹s_s501991, t_s501992› A_v501993)

logical llen_i25 ‹s_s501996, t_s501997› :
  ∀ (A_v501998 : Type‹s_s501996›) →
    (list_d7‹s_s501996, t_s501997› A_v501998) → nat
=
  fn (A_v502000 : Type‹s_s501996›)
     (xs_v502001 : (list_d7‹s_s501996, t_s501997› A_v502000)) ⇒
    match xs_v502001 as __v502002 in nat with
    | nil_c10  ⇒ 0
    | cons_c11 x_v502003 xs_v502004 ⇒
      (llen_i25‹s_s501996, t_s501997› A_v502000 xs_v502004).+1
    end

program len_i26 ‹s_s502005, t_s502006› :
  ∀ {A_v502007 : Type‹s_s502005›} →
    (list_d7‹s_s502005, t_s502006› A_v502007) →
      nat ⊗ (list_d7‹s_s502005, t_s502006› A_v502007)
=
  fn {A_v502010 : Type‹s_s502005›}
     (xs_v502011 : (list_d7‹s_s502005, t_s502006› A_v502010)) ⇒
    match xs_v502011 as __v502012 in
      nat ⊗ (list_d7‹s_s502005, t_s502006› A_v502010) with
    | nil_c10  ⇒ ⟨0, nil_c10‹s_s502005, t_s502006›⟩
    | cons_c11 x_v502014 xs_v502015 ⇒
      match (len_i26‹s_s502005, t_s502006› A_v502010 xs_v502015) as __v502016 in
        nat ⊗ (list_d7‹s_s502005, t_s502006› A_v502010) with
      | ⟨n_v502018, xs_v502019⟩ ⇒
        ⟨n_v502018.+1, (cons_c11‹s_s502005, t_s502006›
                           x_v502014 xs_v502019)⟩
      end
    end

program append_i27 ‹s_s502020, t_s502021› :
  ∀ {A_v502022 : Type‹s_s502020›} →
    (list_d7‹s_s502020, t_s502021› A_v502022) →
      (list_d7‹s_s502020, t_s502021› A_v502022) ⊸
        (list_d7‹s_s502020, t_s502021› A_v502022)
=
  fn {A_v502025 : Type‹s_s502020›}
     (xs_v502026 : (list_d7‹s_s502020, t_s502021› A_v502025)) ⇒
    ln (ys_v502027 : (list_d7‹s_s502020, t_s502021› A_v502025)) ⇒
      match xs_v502026 as __v502028 in
        (list_d7‹s_s502020, t_s502021› A_v502025) with
      | nil_c10  ⇒ ys_v502027
      | cons_c11 x_v502029 xs_v502030 ⇒
        (cons_c11‹s_s502020, t_s502021›
          x_v502029
          (append_i27‹s_s502020, t_s502021›
            A_v502025 xs_v502030 ys_v502027))
      end

logical stdin_rec_i28 : unit → proto =
  fn (__v502032 : unit) ⇒
    ⇑(b_v502033 : bool) ⇒
      match b_v502033 as __v502034 in proto with
      | true ⇒ ⇓(__v502035 : string_d5) ⇒ (stdin_rec_i28 ())
      | false ⇒ end
      end

logical stdout_rec_i29 : unit → proto =
  fn (__v502037 : unit) ⇒
    ⇑(b_v502038 : bool) ⇒
      match b_v502038 as __v502039 in proto with
      | true ⇒ ⇑(__v502040 : string_d5) ⇒ (stdout_rec_i29 ())
      | false ⇒ end
      end

logical stderr_rec_i30 : unit → proto =
  fn (__v502042 : unit) ⇒
    ⇑(b_v502043 : bool) ⇒
      match b_v502043 as __v502044 in proto with
      | true ⇒ ⇑(__v502045 : string_d5) ⇒ (stderr_rec_i30 ())
      | false ⇒ end
      end

logical stdin_t_i31 : proto = (stdin_rec_i28 ())

logical stdout_t_i32 : proto = (stdout_rec_i29 ())

logical stderr_t_i33 : proto = (stderr_rec_i30 ())

program readline_i34 : unit → IO string_d5 =
  fn (__v502047 : unit) ⇒
    let ch_v502048 ⇐ open stdin in
    let ch_v502049 ⇐ (send ch_v502048 true) in
    let __v502050 ⇐ recv ch_v502049 in
    match __v502050 as __v502051 in IO string_d5 with
    | ⟨s_v502052, ch_v502053⟩ ⇒
      let ch_v502054 ⇐ (send ch_v502053 false) in
      let __v502055 ⇐ close ch_v502054 in return s_v502052
    end

program print_i35 : string_d5 → IO unit =
  fn (s_v502057 : string_d5) ⇒
    let ch_v502058 ⇐ open stdout in
    let ch_v502059 ⇐ (send ch_v502058 true) in
    let ch_v502060 ⇐ (send ch_v502059 s_v502057) in
    let ch_v502061 ⇐ (send ch_v502060 false) in close ch_v502061

program prerr_i36 : string_d5 → IO unit =
  fn (s_v502063 : string_d5) ⇒
    let ch_v502064 ⇐ open stderr in
    let ch_v502065 ⇐ (send ch_v502064 true) in
    let ch_v502066 ⇐ (send ch_v502065 s_v502063) in
    let ch_v502067 ⇐ (send ch_v502066 false) in close ch_v502067

program digits_i37 : (list_d7‹U, U› string_d5) =
  (cons_c11‹U, U›
    "0"
    (cons_c11‹U, U›
      "1"
      (cons_c11‹U, U›
        "2"
        (cons_c11‹U, U›
          "3"
          (cons_c11‹U, U›
            "4"
            (cons_c11‹U, U›
              "5"
              (cons_c11‹U, U›
                "6"
                (cons_c11‹U, U›
                  "7"
                  (cons_c11‹U, U›
                    "8" (cons_c11‹U, U› "9" nil_c10‹U, U›))))))))))

program get_at_i38 :
  ∀ {A_v502068 : U} →
    nat → (list_d7‹U, U› A_v502068) → A_v502068 → A_v502068
=
  fn {A_v502072 : U} (n_v502073 : nat)
     (xs_v502074 : (list_d7‹U, U› A_v502072)) (a_v502075 : A_v502072) ⇒
    match n_v502073 as __v502076 in A_v502072 with
    | O ⇒
      match xs_v502074 as __v502077 in A_v502072 with
      | nil_c10  ⇒ a_v502075 | cons_c11 x_v502078 __v502079 ⇒ x_v502078
      end
    | S n_v502080 ⇒
      match xs_v502074 as __v502081 in A_v502072 with
      | nil_c10  ⇒ a_v502075
      | cons_c11 __v502082 xs_v502083 ⇒
        (get_at_i38 A_v502072 n_v502080 xs_v502083 a_v502075)
      end
    end

program string_of_digit_i39 : nat → string_d5 =
  fn (n_v502085 : nat) ⇒
    (get_at_i38 string_d5 n_v502085 digits_i37 EmptyString_c6‹›)

program string_of_nat_i40 : nat → string_d5 =
  fn (n_v502087 : nat) ⇒
    let s_v502088 = (string_of_digit_i39 (modn_i17 n_v502087 10)) in
    let n_v502089 = (divn_i16 n_v502087 10) in
    match (ltn_i7 0 n_v502089) as __v502090 in string_d5 with
    | true ⇒ (cats_i20 (string_of_nat_i40 n_v502089) s_v502088)
    | false ⇒ s_v502088
    end

program digit_of_char_i41 : char_d4 → (option_d6‹U, L› nat) =
  fn (c_v502092 : char_d4) ⇒
    match (eqc_i18 c_v502092 '0') as __v502093 in
      (option_d6‹U, L› nat) with
    | true ⇒ (Some_c9‹U, L› 0)
    | false ⇒
      match (eqc_i18 c_v502092 '1') as __v502094 in
        (option_d6‹U, L› nat) with
      | true ⇒ (Some_c9‹U, L› 1)
      | false ⇒
        match (eqc_i18 c_v502092 '2') as __v502095 in
          (option_d6‹U, L› nat) with
        | true ⇒ (Some_c9‹U, L› 2)
        | false ⇒
          match (eqc_i18 c_v502092 '3') as __v502096 in
            (option_d6‹U, L› nat) with
          | true ⇒ (Some_c9‹U, L› 3)
          | false ⇒
            match (eqc_i18 c_v502092 '4') as __v502097 in
              (option_d6‹U, L› nat) with
            | true ⇒ (Some_c9‹U, L› 4)
            | false ⇒
              match (eqc_i18 c_v502092 '5') as __v502098 in
                (option_d6‹U, L› nat) with
              | true ⇒ (Some_c9‹U, L› 5)
              | false ⇒
                match (eqc_i18 c_v502092 '6') as __v502099 in
                  (option_d6‹U, L› nat) with
                | true ⇒ (Some_c9‹U, L› 6)
                | false ⇒
                  match (eqc_i18 c_v502092 '7') as __v502100 in
                    (option_d6‹U, L› nat) with
                  | true ⇒ (Some_c9‹U, L› 7)
                  | false ⇒
                    match (eqc_i18 c_v502092 '8') as __v502101 in
                      (option_d6‹U, L› nat) with
                    | true ⇒ (Some_c9‹U, L› 8)
                    | false ⇒
                      match (eqc_i18 c_v502092 '9') as __v502102 in
                        (option_d6‹U, L› nat) with
                      | true ⇒ (Some_c9‹U, L› 9)
                      | false ⇒ None_c8‹U, L›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i42 :
  string_d5 → nat → (option_d6‹U, L› nat)
=
  fn (s_v502105 : string_d5) (acc_v502106 : nat) ⇒
    match s_v502105 as __v502107 in (option_d6‹U, L› nat) with
    | EmptyString_c6  ⇒ (Some_c9‹U, L› acc_v502106)
    | String_c7 c_v502108 s_v502109 ⇒
      match (digit_of_char_i41 c_v502108) as __v502110 in
        (option_d6‹U, L› nat) with
      | None_c8  ⇒ None_c8‹U, L›
      | Some_c9 n_v502111 ⇒
        (nat_of_string_loop_i42
          s_v502109 (addn_i13 (muln_i15 acc_v502106 10) n_v502111))
      end
    end

program nat_of_string_i43 : string_d5 → (option_d6‹U, L› nat) =
  fn (s_v502113 : string_d5) ⇒ (nat_of_string_loop_i42 s_v502113 0)

logical eq_sym_i44 ‹s_s502114› :
  ∀ (A_v502115 : Type‹s_s502114›) →
    ∀ (x_v502116 : A_v502115) →
      ∀ (y_v502117 : A_v502115) →
        x_v502116 ≡ y_v502117 → y_v502117 ≡ x_v502116
=
  fn (A_v502119 : Type‹s_s502114›) (x_v502120 : A_v502119)
     (y_v502121 : A_v502119) (e_v502122 : x_v502120 ≡ y_v502121) ⇒
    rew [y_v502123, __v502124 ⇒ y_v502123 ≡ x_v502120] e_v502122 in
    refl x_v502120

logical f_equal_i45 ‹s_s502125, t_s502126› :
  ∀ (A_v502127 : Type‹s_s502125›) →
    ∀ (B_v502128 : Type‹t_s502126›) →
      ∀ (f_v502129 : A_v502127 → B_v502128) →
        ∀ (x_v502131 : A_v502127) →
          ∀ (y_v502132 : A_v502127) →
            x_v502131 ≡ y_v502132 →
              (f_v502129 x_v502131) ≡ (f_v502129 y_v502132)
=
  fn (A_v502134 : Type‹s_s502125›) (B_v502135 : Type‹t_s502126›)
     (f_v502136 : A_v502134 → B_v502135) (x_v502137 : A_v502134)
     (y_v502138 : A_v502134) (e_v502139 : x_v502137 ≡ y_v502138) ⇒
    rew [y_v502141, p_v502142 ⇒
      (f_v502136 x_v502137) ≡ (f_v502136 y_v502141)] e_v502139 in
    refl (f_v502136 x_v502137)

logical bool_absurd_i46 : true ≡ false → absurd_d1 =
  fn (e_v502144 : true ≡ false) ⇒
    rew [x_v502145, __v502146 ⇒
      match x_v502145 as __v502147 in U with
      | true ⇒ unit | false ⇒ absurd_d1
      end] e_v502144 in
    ()

logical nat_absurd_i47 :
  ∀ (n_v502148 : nat) → n_v502148.+1 ≡ 0 → absurd_d1
=
  fn (n_v502150 : nat) (e_v502151 : n_v502150.+1 ≡ 0) ⇒
    rew [x_v502152, __v502153 ⇒
      match x_v502152 as __v502154 in U with
      | O ⇒ absurd_d1 | S __v502155 ⇒ unit
      end] e_v502151 in
    ()

logical nat_inv_i48 :
  ∀ (n1_v502156 : nat) →
    ∀ (n2_v502157 : nat) →
      n1_v502156.+1 ≡ n2_v502157.+1 → n1_v502156 ≡ n2_v502157
=
  fn (n1_v502159 : nat) (n2_v502160 : nat)
     (e_v502161 : n1_v502159.+1 ≡ n2_v502160.+1) ⇒
    (f_equal_i45‹U, U›
      nat nat pred_i12 n1_v502159.+1 n2_v502160.+1 e_v502161)

logical eqn_reflect_i49 :
  ∀ (m_v502162 : nat) →
    ∀ (n_v502163 : nat) →
      (eqn_i10 m_v502162 n_v502163) ≡ true → m_v502162 ≡ n_v502163
=
  fn (m_v502165 : nat) (n_v502166 : nat) ⇒
    match m_v502165 as m0_v502167 in
      (eqn_i10 m0_v502167 n_v502166) ≡ true → m0_v502167 ≡ n_v502166 with
    | O ⇒
      match n_v502166 as n0_v502169 in
        (eqn_i10 0 n0_v502169) ≡ true → 0 ≡ n0_v502169 with
      | O ⇒ fn (__v502171 : (eqn_i10 0 0) ≡ true) ⇒ refl 0
      | S n_v502172 ⇒
        fn (e_v502173 : (eqn_i10 0 n_v502172.+1) ≡ true) ⇒
          (absurd_elim_i1‹U›
            0 ≡ n_v502172.+1
            (bool_absurd_i46
              (eq_sym_i44‹U›
                bool (eqn_i10 0 n_v502172.+1) true e_v502173)))
      end
    | S m_v502174 ⇒
      match n_v502166 as n0_v502175 in
        (eqn_i10 m_v502174.+1 n0_v502175) ≡ true →
          m_v502174.+1 ≡ n0_v502175 with
      | O ⇒
        fn (e_v502177 : (eqn_i10 m_v502174.+1 0) ≡ true) ⇒
          (absurd_elim_i1‹U›
            m_v502174.+1 ≡ 0
            (bool_absurd_i46
              (eq_sym_i44‹U›
                bool (eqn_i10 m_v502174.+1 0) true e_v502177)))
      | S n_v502178 ⇒
        fn (e_v502179 : (eqn_i10 m_v502174.+1 n_v502178.+1) ≡ true) ⇒
          (f_equal_i45‹U, U›
            nat nat fn (x_v502180 : nat) ⇒ x_v502180.+1 m_v502174 n_v502178
            (eqn_reflect_i49 m_v502174 n_v502178 e_v502179))
      end
    end

inductive word_d8 : U =
| Word_c12 of
    (s_v502181 : string_d5) {pf_v502182 : (strlen_i21 s_v502181) ≡ 5}
    : word_d8

program contains_i50 : char_d4 → string_d5 → bool =
  fn (c_v502185 : char_d4) (s_v502186 : string_d5) ⇒
    match s_v502186 as __v502187 in bool with
    | EmptyString_c6  ⇒ false
    | String_c7 c0_v502188 s_v502189 ⇒
      match (eqc_i18 c_v502185 c0_v502188) as __v502190 in bool with
      | true ⇒ true | false ⇒ (contains_i50 c_v502185 s_v502189)
      end
    end

program string_diff_i51 : string_d5 → string_d5 → string_d5 → string_d5
=
  fn (ans_v502194 : string_d5) (s1_v502195 : string_d5)
     (s2_v502196 : string_d5) ⇒
    match s1_v502195 as __v502197 in string_d5 with
    | EmptyString_c6  ⇒ EmptyString_c6‹›
    | String_c7 c1_v502198 s1_v502199 ⇒
      match s2_v502196 as __v502200 in string_d5 with
      | EmptyString_c6  ⇒ EmptyString_c6‹›
      | String_c7 c2_v502201 s2_v502202 ⇒
        match (eqc_i18 c1_v502198 c2_v502201) as __v502203 in string_d5 with
        | true ⇒
          (cats_i20 "Y" (string_diff_i51 ans_v502194 s1_v502199 s2_v502202))
        | false ⇒
          match (contains_i50 c2_v502201 ans_v502194) as __v502204 in
            string_d5 with
          | true ⇒
            (cats_i20
              "I" (string_diff_i51 ans_v502194 s1_v502199 s2_v502202))
          | false ⇒
            (cats_i20
              "N" (string_diff_i51 ans_v502194 s1_v502199 s2_v502202))
          end
        end
      end
    end

logical string_diff_len_i52 :
  ∀ (n_v502205 : nat) →
    ∀ (ans_v502206 : string_d5) →
      ∀ (s1_v502207 : string_d5) →
        ∀ (s2_v502208 : string_d5) →
          n_v502205 ≡ (strlen_i21 s1_v502207) →
            n_v502205 ≡ (strlen_i21 s2_v502208) →
              n_v502205 ≡
                (strlen_i21
                  (string_diff_i51 ans_v502206 s1_v502207 s2_v502208))
=
  fn (n_v502211 : nat) (ans_v502212 : string_d5) (s1_v502213 : string_d5)
     (s2_v502214 : string_d5) ⇒
    match s1_v502213 as s0_v502215 in
      n_v502211 ≡ (strlen_i21 s0_v502215) →
        n_v502211 ≡ (strlen_i21 s2_v502214) →
          n_v502211 ≡
            (strlen_i21 (string_diff_i51 ans_v502212 s0_v502215 s2_v502214)) with
    | EmptyString_c6  ⇒
      match s2_v502214 as s0_v502218 in
        n_v502211 ≡ 0 →
          n_v502211 ≡ (strlen_i21 s0_v502218) → n_v502211 ≡ 0 with
      | EmptyString_c6  ⇒
        fn (e1_v502221 : n_v502211 ≡ 0)
           (__v502222 : n_v502211 ≡ (strlen_i21 EmptyString_c6‹›)) ⇒
          e1_v502221
      | String_c7 c2_v502223 s2_v502224 ⇒
        fn (e1_v502225 : n_v502211 ≡ 0)
           (e2_v502226 : n_v502211 ≡
                           (strlen_i21
                             (String_c7‹› c2_v502223 s2_v502224))) ⇒
          let e3_v502227 =
            rew [n_v502228, __v502229 ⇒ n_v502228 ≡ 0] e2_v502226 in
            e1_v502225
          in
          (absurd_elim_i1‹U›
            n_v502211 ≡ 0
            (nat_absurd_i47
              match s2_v502224 as __v502230 in nat with
              | EmptyString_c6  ⇒ 0
              | String_c7 __v502231 s_v502232 ⇒ (strlen_i21 s_v502232).+1
              end e3_v502227))
      end
    | String_c7 c1_v502233 s1_v502234 ⇒
      match s2_v502214 as s0_v502235 in
        n_v502211 ≡ (strlen_i21 (String_c7‹› c1_v502233 s1_v502234)) →
          n_v502211 ≡ (strlen_i21 s0_v502235) →
            n_v502211 ≡
              (strlen_i21
                (string_diff_i51
                  ans_v502212 (String_c7‹› c1_v502233 s1_v502234)
                  s0_v502235)) with
      | EmptyString_c6  ⇒
        fn (e1_v502238 : n_v502211 ≡
                           (strlen_i21
                             (String_c7‹› c1_v502233 s1_v502234)))
           (e2_v502239 : n_v502211 ≡ (strlen_i21 EmptyString_c6‹›)) ⇒
          let e3_v502240 =
            rew [n_v502241, __v502242 ⇒ n_v502241 ≡ 0] e1_v502238 in
            e2_v502239
          in
          (absurd_elim_i1‹U›
            n_v502211 ≡
              (strlen_i21
                (string_diff_i51
                  ans_v502212 (String_c7‹› c1_v502233 s1_v502234)
                  EmptyString_c6‹›))
            (nat_absurd_i47
              match s1_v502234 as __v502243 in nat with
              | EmptyString_c6  ⇒ 0
              | String_c7 __v502244 s_v502245 ⇒ (strlen_i21 s_v502245).+1
              end e3_v502240))
      | String_c7 c2_v502246 s2_v502247 ⇒
        fn (e1_v502248 : n_v502211 ≡
                           (strlen_i21
                             (String_c7‹› c1_v502233 s1_v502234)))
           (e2_v502249 : n_v502211 ≡
                           (strlen_i21
                             (String_c7‹› c2_v502246 s2_v502247))) ⇒
          (match n_v502211 as n0_v502250 in
             n_v502211 ≡ n0_v502250 →
               n0_v502250 ≡
                 (strlen_i21
                   (string_diff_i51
                     ans_v502212 (String_c7‹› c1_v502233 s1_v502234)
                     (String_c7‹› c2_v502246 s2_v502247))) with
           | O ⇒
             fn (e0_v502252 : n_v502211 ≡ 0) ⇒
               let e3_v502253 =
                 rew [n_v502254, __v502255 ⇒ n_v502254 ≡ 0] e1_v502248 in
                 e0_v502252
               in
               (absurd_elim_i1‹U›
                 0 ≡
                   (strlen_i21
                     (string_diff_i51
                       ans_v502212 (String_c7‹› c1_v502233 s1_v502234)
                       (String_c7‹› c2_v502246 s2_v502247)))
                 (nat_absurd_i47
                   match s1_v502234 as __v502256 in nat with
                   | EmptyString_c6  ⇒ 0
                   | String_c7 __v502257 s_v502258 ⇒
                     (strlen_i21 s_v502258).+1
                   end e3_v502253))
           | S n0_v502259 ⇒
             fn (e0_v502260 : n_v502211 ≡ n0_v502259.+1) ⇒
               let e3_v502261 =
                 rew [n1_v502262, __v502263 ⇒
                   n1_v502262 ≡ (strlen_i21 s1_v502234).+1] e0_v502260 in
                 e1_v502248
               in
               let e4_v502264 =
                 rew [n1_v502265, __v502266 ⇒
                   n1_v502265 ≡ (strlen_i21 s2_v502247).+1] e0_v502260 in
                 e2_v502249
               in
               let e5_v502267 =
                 (nat_inv_i48 n0_v502259 (strlen_i21 s1_v502234) e3_v502261)
               in
               let e6_v502268 =
                 (nat_inv_i48 n0_v502259 (strlen_i21 s2_v502247) e4_v502264)
               in
               match (eqc_i18 c1_v502233 c2_v502246) as b0_v502269 in
                 n0_v502259.+1 ≡
                   (strlen_i21
                     match b0_v502269 as __v502270 in string_d5 with
                     | true ⇒
                       (cats_i20
                         "Y"
                         (string_diff_i51 ans_v502212 s1_v502234 s2_v502247))
                     | false ⇒
                       match (contains_i50 c2_v502246 ans_v502212) as __v502271 in
                         string_d5 with
                       | true ⇒
                         (cats_i20
                           "I"
                           (string_diff_i51
                             ans_v502212 s1_v502234 s2_v502247))
                       | false ⇒
                         (cats_i20
                           "N"
                           (string_diff_i51
                             ans_v502212 s1_v502234 s2_v502247))
                       end
                     end) with
               | true ⇒
                 rew [n1_v502272, __v502273 ⇒
                   n0_v502259.+1 ≡ n1_v502272.+1]
                   (string_diff_len_i52
                     n0_v502259 ans_v502212 s1_v502234 s2_v502247 e5_v502267
                     e6_v502268) in
                 refl n0_v502259.+1
               | false ⇒
                 match (contains_i50 c2_v502246 ans_v502212) as b0_v502274 in
                   n0_v502259.+1 ≡
                     (strlen_i21
                       match b0_v502274 as __v502275 in string_d5 with
                       | true ⇒
                         (cats_i20
                           "I"
                           (string_diff_i51
                             ans_v502212 s1_v502234 s2_v502247))
                       | false ⇒
                         (cats_i20
                           "N"
                           (string_diff_i51
                             ans_v502212 s1_v502234 s2_v502247))
                       end) with
                 | true ⇒
                   rew [n1_v502276, __v502277 ⇒
                     n0_v502259.+1 ≡ n1_v502276.+1]
                     (string_diff_len_i52
                       n0_v502259 ans_v502212 s1_v502234 s2_v502247
                       e5_v502267 e6_v502268) in
                   refl n0_v502259.+1
                 | false ⇒
                   rew [n1_v502278, __v502279 ⇒
                     n0_v502259.+1 ≡ n1_v502278.+1]
                     (string_diff_len_i52
                       n0_v502259 ans_v502212 s1_v502234 s2_v502247
                       e5_v502267 e6_v502268) in
                   refl n0_v502259.+1
                 end
               end
           end refl n_v502211)
      end
    end

program wordle_diff_i53 : word_d8 → word_d8 → word_d8 =
  fn (ans_v502282 : word_d8) (guess_v502283 : word_d8) ⇒
    match ans_v502282 as __v502284 in word_d8 with
    | Word_c12 ans_v502285 pf1_v502286 ⇒
      match guess_v502283 as __v502287 in word_d8 with
      | Word_c12 guess_v502288 pf2_v502289 ⇒
        let {pf1_v502290} =
          (eq_sym_i44‹U› nat (strlen_i21 ans_v502285) 5 pf1_v502286)
        in
        let {pf2_v502291} =
          (eq_sym_i44‹U› nat (strlen_i21 guess_v502288) 5 pf2_v502289)
        in
        let {pf_v502292} =
          (string_diff_len_i52
            5 ans_v502285 ans_v502285 guess_v502288 pf1_v502290 pf2_v502291)
        in
        (Word_c12‹›
          (string_diff_i51 ans_v502285 ans_v502285 guess_v502288)
          (eq_sym_i44‹U›
            nat 5
            (strlen_i21
              (string_diff_i51 ans_v502285 ans_v502285 guess_v502288))
            pf_v502292))
      end
    end

program eqw_i54 : word_d8 → word_d8 → bool =
  fn (w1_v502295 : word_d8) (w2_v502296 : word_d8) ⇒
    match w1_v502295 as __v502297 in bool with
    | Word_c12 s1_v502298 __v502299 ⇒
      match w2_v502296 as __v502300 in bool with
      | Word_c12 s2_v502301 __v502302 ⇒ (eqs_i22 s1_v502298 s2_v502301)
      end
    end

logical wordle_loop_i55 : word_d8 → nat → proto =
  fn (ans_v502305 : word_d8) (repeat_v502306 : nat) ⇒
    match repeat_v502306 as __v502307 in proto with
    | O ⇒
      ⇑(w_v502308 : word_d8) ⇒
        ⇑{__v502309 : w_v502308 ≡ ans_v502305} ⇒ end
    | S repeat_v502310 ⇒
      ⇓(guess_v502311 : word_d8) ⇒
        ⇑(b_v502312 : bool) ⇒
          ⇑{__v502313 :
            b_v502312 ≡ (eqw_i54 ans_v502305 guess_v502311)} ⇒
            match b_v502312 as __v502314 in proto with
            | true ⇒ end
            | false ⇒
              ⇑(w_v502315 : word_d8) ⇒
                ⇑{__v502316 :
                  w_v502315 ≡ (wordle_diff_i53 ans_v502305 guess_v502311)} ⇒
                  (wordle_loop_i55 ans_v502305 repeat_v502310)
            end
    end

logical wordle_i56 : proto =
  ⇑{ans_v502317 : word_d8} ⇒
    ⇑(repeat_v502318 : nat) ⇒
      (wordle_loop_i55 ans_v502317 repeat_v502318)

logical loop_ch_i57 : word_d8 → nat → L =
  fn (ans_v502321 : word_d8) (repeat_v502322 : nat) ⇒
    ch⟨(wordle_loop_i55 ans_v502321 repeat_v502322)⟩

logical loop_hc_i58 : word_d8 → nat → L =
  fn (ans_v502325 : word_d8) (repeat_v502326 : nat) ⇒
    hc⟨(wordle_loop_i55 ans_v502325 repeat_v502326)⟩

logical wordle_ch_i59 : L = ch⟨wordle_i56⟩

logical wordle_hc_i60 : L = hc⟨wordle_i56⟩

program read_word_i61 : unit → IO word_d8 =
  fn (__v502328 : unit) ⇒
    let s_v502329 ⇐ (readline_i34 ()) in
    (match (eqn_i10 (strlen_i21 s_v502329) 5) as b0_v502330 in
       {(eqn_i10 (strlen_i21 s_v502329) 5) ≡ b0_v502330} → IO word_d8 with
     | true ⇒
       fn {e_v502332 : (eqn_i10 (strlen_i21 s_v502329) 5) ≡ true} ⇒
         return (Word_c12‹›
                  s_v502329
                  (eqn_reflect_i49 (strlen_i21 s_v502329) 5 e_v502332))
     | false ⇒
       fn {__v502333 : (eqn_i10 (strlen_i21 s_v502329) 5) ≡ false} ⇒
         let __v502334 ⇐
           (print_i35 "please input a word with length of 5\n")
         in (read_word_i61 ())
     end refl (eqn_i10 (strlen_i21 s_v502329) 5))

program player_loop_i62 :
  ∀ {ans_v502335 : word_d8} →
    ∀ (repeat_v502336 : nat) →
      (loop_hc_i58 ans_v502335 repeat_v502336) → IO unit
=
  fn {ans_v502338 : word_d8} (repeat_v502339 : nat)
     (c_v502340 : (loop_hc_i58 ans_v502338 repeat_v502339)) ⇒
    (match repeat_v502339 as repeat0_v502341 in
       (loop_hc_i58 ans_v502338 repeat0_v502341) → IO unit with
     | O ⇒
       fn (c_v502343 : (loop_hc_i58 ans_v502338 0)) ⇒
         let __v502344 ⇐ recv c_v502343 in
         match __v502344 as __v502345 in IO unit with
         | ⟨ans_v502346, c_v502347⟩ ⇒
           let __v502348 ⇐ recv c_v502347 in
           match __v502348 as __v502349 in IO unit with
           | ⟨{pf_v502350}, c_v502351⟩ ⇒
             match ans_v502346 as __v502352 in IO unit with
             | Word_c12 s_v502353 __v502354 ⇒
               let __v502355 ⇐
                 (print_i35
                   (cats_i20
                     (cats_i20 "You Lose! The answer is " s_v502353) ".\n"))
               in close c_v502351
             end
           end
         end
     | S repeat_v502356 ⇒
       fn (c_v502357 : (loop_hc_i58 ans_v502338 repeat_v502356.+1)) ⇒
         let guess_v502358 ⇐ (read_word_i61 ()) in
         let c_v502359 ⇐ (send c_v502357 guess_v502358) in
         let __v502360 ⇐ recv c_v502359 in
         match __v502360 as __v502361 in IO unit with
         | ⟨b_v502362, c_v502363⟩ ⇒
           let __v502364 ⇐ recv c_v502363 in
           match __v502364 as __v502365 in IO unit with
           | ⟨{pf_v502366}, c_v502367⟩ ⇒
             (match b_v502362 as b0_v502368 in
                hc⟨match b0_v502368 as __v502370 in proto with
                     | true ⇒ end
                     | false ⇒
                       ⇑(w_v502371 : word_d8) ⇒
                         ⇑{__v502372 :
                           w_v502371 ≡
                             (wordle_diff_i53 ans_v502338 guess_v502358)} ⇒
                           (wordle_loop_i55 ans_v502338 repeat_v502356)
                     end⟩ ⊸
                  IO unit with
              | true ⇒
                ln (c_v502373 : hc⟨end⟩) ⇒
                  let __v502374 ⇐ (print_i35 "You Win!\n") in
                  close c_v502373
              | false ⇒
                ln (c_v502375 : hc⟨⇑(w_v502376 : word_d8) ⇒
                                       ⇑{__v502377 :
                                         w_v502376 ≡
                                           (wordle_diff_i53
                                             ans_v502338 guess_v502358)} ⇒
                                         (wordle_loop_i55
                                           ans_v502338 repeat_v502356)⟩) ⇒
                  let __v502378 ⇐ recv c_v502375 in
                  match __v502378 as __v502379 in IO unit with
                  | ⟨diff_v502380, c_v502381⟩ ⇒
                    let __v502382 ⇐ recv c_v502381 in
                    match __v502382 as __v502383 in IO unit with
                    | ⟨{pf_v502384}, c_v502385⟩ ⇒
                      match diff_v502380 as __v502386 in IO unit with
                      | Word_c12 s_v502387 __v502388 ⇒
                        let __v502389 ⇐
                          (print_i35
                            (cats_i20
                              (cats_i20
                                (cats_i20
                                  (cats_i20 "Incorrect, hint: " s_v502387)
                                  ". You have ")
                                (string_of_nat_i40 repeat_v502356))
                              " more tries.\n"))
                        in
                        (player_loop_i62
                          ans_v502338 repeat_v502356 c_v502385)
                      end
                    end
                  end
              end c_v502367)
           end
         end
     end c_v502340)

program player_i63 : wordle_hc_i60 → IO unit =
  fn (c_v502391 : wordle_hc_i60) ⇒
    let __v502392 ⇐ recv c_v502391 in
    match __v502392 as __v502393 in IO unit with
    | ⟨{ans_v502394}, c_v502395⟩ ⇒
      let __v502396 ⇐ recv c_v502395 in
      match __v502396 as __v502397 in IO unit with
      | ⟨repeat_v502398, c_v502399⟩ ⇒
        let __v502400 ⇐ (print_i35 "Wordle Game\n") in
        let __v502401 ⇐ (print_i35 "Please guess a word of length 5.\n") in
        let __v502402 ⇐
          (print_i35
            (cats_i20
              (cats_i20 "You have " (string_of_nat_i40 repeat_v502398))
              " tries.\n"))
        in (player_loop_i62 ans_v502394 repeat_v502398 c_v502399)
      end
    end

inductive subset_d9 ‹s_s502403, r_s502404, t_s502405›
  (A_v502406 : Type‹s_s502403›) (P_v502407 : A_v502406 →
                                                   Type‹r_s502404›) : Type‹t_s502405›
=
| SPair_c13 of
    ‹s_s502409, r_s502410, t_s502411› (A_v502412 : Type‹s_s502409›)
    (P_v502413 : A_v502412 → Type‹r_s502410›) (m_v502415 : A_v502412)
    {pf_v502416 : (P_v502413 m_v502415)}
    : (subset_d9‹s_s502409, r_s502410, t_s502411› A_v502412 P_v502413)

inductive at_d10
  (A_v502417 : U) (x_v502418 : A_v502417) (n_v502419 : nat) (xs_v502420 : 
(list_d7‹U, U› A_v502417)) : U =
| at_O_c14 of
    (A_v502421 : U) (x_v502422 : A_v502421) (n_v502423 : nat)
    (xs_v502424 : (list_d7‹U, U› A_v502421))
    (xs0_v502425 : (list_d7‹U, U› A_v502421))
    {pf1_v502426 : n_v502423 ≡ 0}
    {pf2_v502427 : xs_v502424 ≡ (cons_c11‹U, U› x_v502422 xs0_v502425)}
    : (at_d10 A_v502421 x_v502422 n_v502423 xs_v502424)
| at_S_c15 of
    (A_v502428 : U) (x_v502429 : A_v502428) (n_v502430 : nat)
    (xs_v502431 : (list_d7‹U, U› A_v502428)) (n0_v502432 : nat)
    (x0_v502433 : A_v502428) (xs0_v502434 : (list_d7‹U, U› A_v502428))
    (h_v502435 : (at_d10 A_v502428 x_v502429 n0_v502432 xs0_v502434))
    {pf1_v502436 : n_v502430 ≡ n0_v502432.+1}
    {pf2_v502437 : xs_v502431 ≡ (cons_c11‹U, U› x0_v502433 xs0_v502434)}
    : (at_d10 A_v502428 x_v502429 n_v502430 xs_v502431)

logical ltn_inv_i64 :
  ∀ (m_v502438 : nat) →
    ∀ (n_v502439 : nat) →
      (ltn_i7 m_v502438.+1 n_v502439.+1) ≡ true →
        (ltn_i7 m_v502438 n_v502439) ≡ true
=
  fn (m_v502441 : nat) (n_v502442 : nat)
     (h_v502443 : (ltn_i7 m_v502441.+1 n_v502442.+1) ≡ true) ⇒
    h_v502443

program get_at_i65 :
  ∀ {A_v502444 : U} →
    ∀ (n_v502445 : nat) →
      ∀ (xs_v502446 : (list_d7‹U, U› A_v502444)) →
        {(ltn_i7 n_v502445 (llen_i25‹U, U› A_v502444 xs_v502446)) ≡
           true} →
          (subset_d9‹U, U, U›
            A_v502444
            fn (x_v502448 : A_v502444) ⇒
              (at_d10 A_v502444 x_v502448 n_v502445 xs_v502446))
=
  fn {A_v502449 : U} (n_v502450 : nat)
     (xs_v502451 : (list_d7‹U, U› A_v502449)) ⇒
    match xs_v502451 as xs0_v502452 in
      {(ltn_i7 n_v502450 (llen_i25‹U, U› A_v502449 xs0_v502452)) ≡ true} →
        (subset_d9‹U, U, U›
          A_v502449
          fn (x_v502454 : A_v502449) ⇒
            (at_d10 A_v502449 x_v502454 n_v502450 xs0_v502452)) with
    | nil_c10  ⇒
      fn {e_v502455 : (ltn_i7
                        n_v502450
                        (llen_i25‹U, U› A_v502449 nil_c10‹U, U›)) ≡
                        true} ⇒
        rew [b_v502456, __v502457 ⇒
          match b_v502456 as __v502458 in U with
          | true ⇒
            (subset_d9‹U, U, U›
              A_v502449
              fn (x_v502459 : A_v502449) ⇒
                (at_d10 A_v502449 x_v502459 n_v502450 nil_c10‹U, U›))
          | false ⇒ unit
          end] e_v502455 in
        ()
    | cons_c11 x_v502460 xs_v502461 ⇒
      match n_v502450 as n0_v502462 in
        {(ltn_i7 n0_v502462 (llen_i25‹U, U› A_v502449 xs_v502461).+1) ≡
           true} →
          (subset_d9‹U, U, U›
            A_v502449
            fn (x0_v502464 : A_v502449) ⇒
              (at_d10
                A_v502449 x0_v502464 n0_v502462
                (cons_c11‹U, U› x_v502460 xs_v502461))) with
      | O ⇒
        fn {e_v502465 : (ltn_i7
                          0 (llen_i25‹U, U› A_v502449 xs_v502461).+1) ≡
                          true} ⇒
          (SPair_c13‹U, U, U›
            x_v502460
            (at_O_c14‹›
              xs_v502461 refl 0
              refl (cons_c11‹U, U› x_v502460 xs_v502461)))
      | S n_v502466 ⇒
        fn {e_v502467 : (ltn_i7
                          n_v502466.+1
                          (llen_i25‹U, U› A_v502449 xs_v502461).+1) ≡
                          true} ⇒
          match (get_at_i65
                  A_v502449 n_v502466 xs_v502461
                  (ltn_inv_i64
                    n_v502466 (llen_i25‹U, U› A_v502449 xs_v502461)
                    e_v502467)) as __v502468 in
            (subset_d9‹U, U, U›
              A_v502449
              fn (x0_v502469 : A_v502449) ⇒
                (at_d10
                  A_v502449 x0_v502469 n_v502466.+1
                  (cons_c11‹U, U› x_v502460 xs_v502461))) with
          | SPair_c13 x0_v502470 pf_v502471 ⇒
            (SPair_c13‹U, U, U›
              x0_v502470
              (at_S_c15‹›
                n_v502466 x_v502460 xs_v502461 pf_v502471 refl n_v502466.+1
                refl (cons_c11‹U, U› x_v502460 xs_v502461)))
          end
      end
    end

program rand_word_i66 : unit → IO word_d8 =
  fn (__v502473 : unit) ⇒
    let words_v502474 =
      ((cons_c11‹U, U›
         (Word_c12‹› "route" refl (strlen_i21 "route"))
         (cons_c11‹U, U›
           (Word_c12‹› "crash" refl (strlen_i21 "crash"))
           (cons_c11‹U, U›
             (Word_c12‹› "clown" refl (strlen_i21 "clown"))
             (cons_c11‹U, U›
               (Word_c12‹› "shaky" refl (strlen_i21 "shaky"))
               (cons_c11‹U, U›
                 (Word_c12‹› "vegan" refl (strlen_i21 "vegan"))
                 (cons_c11‹U, U›
                   (Word_c12‹› "power" refl (strlen_i21 "power"))
                   (cons_c11‹U, U›
                     (Word_c12‹› "trust" refl (strlen_i21 "trust"))
                     (cons_c11‹U, U›
                       (Word_c12‹› "enjoy" refl (strlen_i21 "enjoy"))
                       (cons_c11‹U, U›
                         (Word_c12‹› "brain" refl (strlen_i21 "brain"))
                         (cons_c11‹U, U›
                           (Word_c12‹› "adopt" refl (strlen_i21 "adopt"))
                           (cons_c11‹U, U›
                             (Word_c12‹›
                               "tower" refl (strlen_i21 "tower"))
                             (cons_c11‹U, U›
                               (Word_c12‹›
                                 "shade" refl (strlen_i21 "shade"))
                               (cons_c11‹U, U›
                                 (Word_c12‹›
                                   "delay" refl (strlen_i21 "delay"))
                                 (cons_c11‹U, U›
                                   (Word_c12‹›
                                     "twist" refl (strlen_i21 "twist"))
                                   (cons_c11‹U, U›
                                     (Word_c12‹›
                                       "alert" refl (strlen_i21 "alert"))
                                     (cons_c11‹U, U›
                                       (Word_c12‹›
                                         "choke" refl (strlen_i21 "choke"))
                                       (cons_c11‹U, U›
                                         (Word_c12‹›
                                           "split" refl (strlen_i21 "split"))
                                         (cons_c11‹U, U›
                                           (Word_c12‹›
                                             "rhyme"
                                             refl (strlen_i21 "rhyme"))
                                           (cons_c11‹U, U›
                                             (Word_c12‹›
                                               "muddy"
                                               refl (strlen_i21 "muddy"))
                                             (cons_c11‹U, U›
                                               (Word_c12‹›
                                                 "plant"
                                                 refl (strlen_i21 "plant"))
                                               nil_c10‹U, U›))))))))))))))))))))
        : (list_d7‹U, U› word_d8))
    in
    let r_v502475 ⇐ rand 0 19 in
    match r_v502475 as __v502476 in IO (word_d8 : U) with
    | Between_c4 n_v502477 __v502478 pf_v502479 ⇒
      match (get_at_i65 word_d8 n_v502477 words_v502474 pf_v502479) as __v502480 in
        IO (word_d8 : U) with
      | SPair_c13 w_v502481 __v502482 ⇒ return w_v502481
      end
    end

program server_loop_i67 :
  ∀ (ans_v502483 : word_d8) →
    ∀ (repeat_v502484 : nat) →
      (loop_ch_i57 ans_v502483 repeat_v502484) → IO unit
=
  fn (ans_v502486 : word_d8) (repeat_v502487 : nat)
     (c_v502488 : (loop_ch_i57 ans_v502486 repeat_v502487)) ⇒
    (match repeat_v502487 as repeat0_v502489 in
       (loop_ch_i57 ans_v502486 repeat0_v502489) → IO unit with
     | O ⇒
       fn (c_v502491 : (loop_ch_i57 ans_v502486 0)) ⇒
         let c_v502492 ⇐ (send c_v502491 ans_v502486) in
         let c_v502493 ⇐ (send c_v502492 refl ans_v502486) in
         close c_v502493
     | S repeat_v502494 ⇒
       fn (c_v502495 : (loop_ch_i57 ans_v502486 repeat_v502494.+1)) ⇒
         let __v502496 ⇐ recv c_v502495 in
         match __v502496 as __v502497 in IO unit with
         | ⟨guess_v502498, c_v502499⟩ ⇒
           let b_v502500 = (eqw_i54 ans_v502486 guess_v502498) in
           let c_v502501 ⇐ (send c_v502499 b_v502500) in
           let c_v502502 ⇐
             (send c_v502501 refl (eqw_i54 ans_v502486 guess_v502498))
           in
           (match b_v502500 as b0_v502503 in
              ch⟨match b0_v502503 as __v502505 in proto with
                   | true ⇒ end
                   | false ⇒
                     ⇑(w_v502506 : word_d8) ⇒
                       ⇑{__v502507 :
                         w_v502506 ≡
                           (wordle_diff_i53 ans_v502486 guess_v502498)} ⇒
                         (wordle_loop_i55 ans_v502486 repeat_v502494)
                   end⟩ ⊸
                IO unit with
            | true ⇒ ln (c_v502508 : ch⟨end⟩) ⇒ close c_v502508
            | false ⇒
              ln (c_v502509 : ch⟨⇑(w_v502510 : word_d8) ⇒
                                     ⇑{__v502511 :
                                       w_v502510 ≡
                                         (wordle_diff_i53
                                           ans_v502486 guess_v502498)} ⇒
                                       (wordle_loop_i55
                                         ans_v502486 repeat_v502494)⟩) ⇒
                let c_v502512 ⇐
                  (send c_v502509
                    (wordle_diff_i53 ans_v502486 guess_v502498))
                in
                let c_v502513 ⇐
                  (send c_v502512
                    refl (wordle_diff_i53 ans_v502486 guess_v502498))
                in (server_loop_i67 ans_v502486 repeat_v502494 c_v502513)
            end c_v502502)
         end
     end c_v502488)

program server_i68 : wordle_ch_i59 → IO unit =
  fn (c_v502515 : wordle_ch_i59) ⇒
    let repeat_v502516 = 6 in
    let ans_v502517 ⇐ (rand_word_i66 ()) in
    let c_v502518 ⇐ (send c_v502515 ans_v502517) in
    let c_v502519 ⇐ (send c_v502518 repeat_v502516) in
    (server_loop_i67 ans_v502517 repeat_v502516 c_v502519)

program main_i69 : IO unit =
  let c_v502520 ⇐
    fork (c_v502521 : wordle_ch_i59) in (server_i68 c_v502521)
  in
  let c0_v502522 ⇐
    fork (c0_v502523 :
      ch⟨⇓(__v502524 : wordle_hc_i60) ⇒ ⇑(__v502525 : unit) ⇒ end⟩)
    in
      let __v502526 ⇐ recv c0_v502523 in
      match __v502526 as __v502527 in IO unit with
      | ⟨c_v502528, c0_v502529⟩ ⇒
        let __v502530 ⇐ (player_i63 c_v502528) in
        let c0_v502531 ⇐ (send c0_v502529 ()) in close c0_v502531
      end
  in
  let c0_v502532 ⇐ (send c0_v502522 c_v502520) in
  let __v502533 ⇐ recv c0_v502532 in
  match __v502533 as __v502534 in IO unit with
  | ⟨__v502535, c0_v502536⟩ ⇒ close c0_v502536
  end

trans1e success--------------------------

data order_d2 =
| LT_c1 of size(0) | GT_c2 of size(0) | EQ_c3 of size(0)

def andb_i2 =
  fn b1_v503786 b2_v503787 ⇒
    match b1_v503786 with
    | true ⇒ b2_v503787 | false ⇒ false
    end

def orb_i3 =
  fn b1_v503788 b2_v503789 ⇒
    match b1_v503788 with
    | true ⇒ true | false ⇒ b2_v503789
    end

def notb_i4 =
  fn b_v503790 ⇒ match b_v503790 with
                   | true ⇒ false | false ⇒ true
                   end

def compareb_i5 =
  fn b1_v503791 b2_v503792 ⇒
    match b1_v503791 with
    | true ⇒ match b2_v503792 with
               | true ⇒ EQ_c3 | false ⇒ GT_c2
               end
    | false ⇒ match b2_v503792 with
                | true ⇒ LT_c1 | false ⇒ EQ_c3
                end
    end

def lten_i6 =
  fn x_v503793 y_v503794 ⇒
    match x_v503793 with
    | O ⇒ true
    | S x_v503795 ⇒
      match y_v503794 with
      | O ⇒ false | S y_v503796 ⇒ ((lten_i6 x_v503795) y_v503796)
      end
    end

def ltn_i7 = fn x_v503797 y_v503798 ⇒ ((lten_i6 x_v503797.+1) y_v503798)

def gten_i8 = fn x_v503799 y_v503800 ⇒ ((lten_i6 y_v503800) x_v503799)

def gtn_i9 = fn x_v503801 y_v503802 ⇒ ((ltn_i7 y_v503802) x_v503801)

def eqn_i10 =
  fn x_v503803 y_v503804 ⇒
    match x_v503803 with
    | O ⇒ match y_v503804 with
            | O ⇒ true | S __v503805 ⇒ false
            end
    | S x_v503806 ⇒
      match y_v503804 with
      | O ⇒ false | S y_v503807 ⇒ ((eqn_i10 x_v503806) y_v503807)
      end
    end

def comparen_i11 =
  fn n1_v503808 n2_v503809 ⇒
    match n1_v503808 with
    | O ⇒ match n2_v503809 with
            | O ⇒ EQ_c3 | S __v503810 ⇒ LT_c1
            end
    | S n1_v503811 ⇒
      match n2_v503809 with
      | O ⇒ GT_c2 | S n2_v503812 ⇒ ((comparen_i11 n1_v503811) n2_v503812)
      end
    end

def pred_i12 =
  fn x_v503813 ⇒
    match x_v503813 with
    | O ⇒ 0 | S x_v503814 ⇒ x_v503814
    end

def addn_i13 =
  fn x_v503815 y_v503816 ⇒
    match x_v503815 with
    | O ⇒ y_v503816 | S x_v503817 ⇒ ((addn_i13 x_v503817) y_v503816).+1
    end

def subn_i14 =
  fn x_v503818 y_v503819 ⇒
    match y_v503819 with
    | O ⇒ x_v503818
    | S y_v503820 ⇒ ((subn_i14 (pred_i12 x_v503818)) y_v503820)
    end

def muln_i15 =
  fn x_v503821 y_v503822 ⇒
    match x_v503821 with
    | O ⇒ 0
    | S x_v503823 ⇒ ((addn_i13 y_v503822) ((muln_i15 x_v503823) y_v503822))
    end

def divn_i16 =
  fn x_v503824 y_v503825 ⇒
    match ((ltn_i7 x_v503824) y_v503825) with
    | true ⇒ 0
    | false ⇒ ((divn_i16 ((subn_i14 x_v503824) y_v503825)) y_v503825).+1
    end

def modn_i17 =
  fn x_v503826 y_v503827 ⇒
    ((subn_i14 x_v503826)
      ((muln_i15 ((divn_i16 x_v503826) y_v503827)) y_v503827))

data between_d3 =
| Between_c4 of size(3)

data char_d4 =
| Char_c5 of size(1)

def eqc_i18 =
  fn c1_v503828 c2_v503829 ⇒
    match c1_v503828 with
    | Char_c5 n1_v503830 ⇒
      match c2_v503829 with
      | Char_c5 n2_v503831 ⇒ ((eqn_i10 n1_v503830) n2_v503831)
      end
    end

def comparec_i19 =
  fn c1_v503832 c2_v503833 ⇒
    match c1_v503832 with
    | Char_c5 n1_v503834 ⇒
      match c2_v503833 with
      | Char_c5 n2_v503835 ⇒ ((comparen_i11 n1_v503834) n2_v503835)
      end
    end

data string_d5 =
| EmptyString_c6 of size(0) | String_c7 of size(2)

def cats_i20 =
  fn s1_v503836 s2_v503837 ⇒
    match s1_v503836 with
    | EmptyString_c6  ⇒ s2_v503837
    | String_c7 c_v503838 s1_v503839 ⇒
      (String_c7 c_v503838 ((cats_i20 s1_v503839) s2_v503837))
    end

def strlen_i21 =
  fn s_v503840 ⇒
    match s_v503840 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v503841 s_v503842 ⇒ (strlen_i21 s_v503842).+1
    end

def eqs_i22 =
  fn s1_v503843 s2_v503844 ⇒
    match s1_v503843 with
    | EmptyString_c6  ⇒
      match s2_v503844 with
      | EmptyString_c6  ⇒ true | String_c7 __v503845 __v503846 ⇒ false
      end
    | String_c7 c1_v503847 s1_v503848 ⇒
      match s2_v503844 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v503849 s2_v503850 ⇒
        ((andb_i2 ((eqc_i18 c1_v503847) c2_v503849))
          ((eqs_i22 s1_v503848) s2_v503850))
      end
    end

def compares_i23 =
  fn s1_v503851 s2_v503852 ⇒
    match s1_v503851 with
    | EmptyString_c6  ⇒
      match s2_v503852 with
      | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v503853 __v503854 ⇒ LT_c1
      end
    | String_c7 c1_v503855 s1_v503856 ⇒
      match s2_v503852 with
      | EmptyString_c6  ⇒ GT_c2
      | String_c7 c2_v503857 s2_v503858 ⇒
        match ((comparec_i19 c1_v503855) c2_v503857) with
        | EQ_c3  ⇒ ((compares_i23 s1_v503856) s2_v503858)
        | LT_c1  ⇒ LT_c1 | GT_c2  ⇒ GT_c2
        end
      end
    end

data optionUU_d14 =
| NoneUU_c22 of size(0) | SomeUU_c23 of size(1)

data optionUL_d13 =
| NoneUL_c20 of size(0) | SomeUL_c21 of size(1)

data optionLU_d12 =
| NoneLU_c18 of size(0)

data optionLL_d11 =
| NoneLL_c16 of size(0) | SomeLL_c17 of size(1)

def and_thenUUU_i79 =
  fn A_v503859 B_v503860 opt_v503861 ⇒
    ln f_v503862 ⇒
      match opt_v503861 with
      | NoneUU_c22  ⇒ NoneUU_c22
      | SomeUU_c23 x_v503863 ⇒ (f_v503862 x_v503863)
      end

def and_thenUUL_i78 =
  fn A_v503864 B_v503865 opt_v503866 ⇒
    ln f_v503867 ⇒
      match opt_v503866 with
      | NoneUL_c20  ⇒ NoneUL_c20
      | SomeUL_c21 x_v503868 ⇒ (f_v503867 x_v503868)
      end

def and_thenULU_i77 =
  fn A_v503869 B_v503870 opt_v503871 ⇒
    ln f_v503872 ⇒
      match opt_v503871 with
      | NoneUU_c22  ⇒ NoneLU_c18
      | SomeUU_c23 x_v503873 ⇒ (f_v503872 x_v503873)
      end

def and_thenULL_i76 =
  fn A_v503874 B_v503875 opt_v503876 ⇒
    ln f_v503877 ⇒
      match opt_v503876 with
      | NoneUL_c20  ⇒ NoneLL_c16
      | SomeUL_c21 x_v503878 ⇒ (f_v503877 x_v503878)
      end

def and_thenLUL_i74 =
  fn A_v503879 B_v503880 opt_v503881 ⇒
    ln f_v503882 ⇒
      match opt_v503881 with
      | NoneLL_c16  ⇒ NoneUL_c20
      | SomeLL_c17 x_v503883 ⇒ (f_v503882 x_v503883)
      end

def and_thenLLL_i72 =
  fn A_v503884 B_v503885 opt_v503886 ⇒
    ln f_v503887 ⇒
      match opt_v503886 with
      | NoneLL_c16  ⇒ NoneLL_c16
      | SomeLL_c17 x_v503888 ⇒ (f_v503887 x_v503888)
      end

data listUU_d18 =
| nilUU_c30 of size(0) | consUU_c31 of size(2)

data listUL_d17 =
| nilUL_c28 of size(0) | consUL_c29 of size(2)

data listLU_d16 =
| nilLU_c26 of size(0)

data listLL_d15 =
| nilLL_c24 of size(0) | consLL_c25 of size(2)

def lenUU_i87 =
  fn A_v503889 xs_v503890 ⇒
    match xs_v503890 with
    | nilUU_c30  ⇒ (0, nilUU_c30)
    | consUU_c31 x_v503891 xs_v503892 ⇒
      match ((lenUU_i87 NULL) xs_v503892) with
      | (n_v503893, xs_v503894) ⇒
        (n_v503893.+1, (consUU_c31 x_v503891 xs_v503894))
      end
    end

def lenUL_i86 =
  fn A_v503895 xs_v503896 ⇒
    match xs_v503896 with
    | nilUL_c28  ⇒ (0, nilUL_c28)
    | consUL_c29 x_v503897 xs_v503898 ⇒
      match ((lenUL_i86 NULL) xs_v503898) with
      | (n_v503899, xs_v503900) ⇒
        (n_v503899.+1, (consUL_c29 x_v503897 xs_v503900))
      end
    end

def lenLL_i84 =
  fn A_v503901 xs_v503902 ⇒
    match xs_v503902 with
    | nilLL_c24  ⇒ (0, nilLL_c24)
    | consLL_c25 x_v503903 xs_v503904 ⇒
      match ((lenLL_i84 NULL) xs_v503904) with
      | (n_v503905, xs_v503906) ⇒
        (n_v503905.+1, (consLL_c25 x_v503903 xs_v503906))
      end
    end

def appendUU_i91 =
  fn A_v503907 xs_v503908 ⇒
    ln ys_v503909 ⇒
      match xs_v503908 with
      | nilUU_c30  ⇒ ys_v503909
      | consUU_c31 x_v503910 xs_v503911 ⇒
        (consUU_c31 x_v503910 (((appendUU_i91 NULL) xs_v503911) ys_v503909))
      end

def appendUL_i90 =
  fn A_v503912 xs_v503913 ⇒
    ln ys_v503914 ⇒
      match xs_v503913 with
      | nilUL_c28  ⇒ ys_v503914
      | consUL_c29 x_v503915 xs_v503916 ⇒
        (consUL_c29 x_v503915 (((appendUL_i90 NULL) xs_v503916) ys_v503914))
      end

def appendLL_i88 =
  fn A_v503917 xs_v503918 ⇒
    ln ys_v503919 ⇒
      match xs_v503918 with
      | nilLL_c24  ⇒ ys_v503919
      | consLL_c25 x_v503920 xs_v503921 ⇒
        (consLL_c25 x_v503920 (((appendLL_i88 NULL) xs_v503921) ys_v503919))
      end

def readline_i34 =
  fn __v503922 ⇒
    let ch_v503923 ⇐ open stdin in
    let ch_v503924 ⇐ (send ch_v503923 true) in
    let __v503925 ⇐ recv ch_v503924 in
    match __v503925 with
    | (s_v503926, ch_v503927) ⇒
      let ch_v503928 ⇐ (send ch_v503927 false) in
      let __v503929 ⇐ close⇑ ch_v503928 in return s_v503926
    end

def print_i35 =
  fn s_v503930 ⇒
    let ch_v503931 ⇐ open stdout in
    let ch_v503932 ⇐ (send ch_v503931 true) in
    let ch_v503933 ⇐ (send ch_v503932 s_v503930) in
    let ch_v503934 ⇐ (send ch_v503933 false) in close⇑ ch_v503934

def prerr_i36 =
  fn s_v503935 ⇒
    let ch_v503936 ⇐ open stderr in
    let ch_v503937 ⇐ (send ch_v503936 true) in
    let ch_v503938 ⇐ (send ch_v503937 s_v503935) in
    let ch_v503939 ⇐ (send ch_v503938 false) in close⇑ ch_v503939

def digits_i37 =
  (consUU_c31
    "0"
    (consUU_c31
      "1"
      (consUU_c31
        "2"
        (consUU_c31
          "3"
          (consUU_c31
            "4"
            (consUU_c31
              "5"
              (consUU_c31
                "6"
                (consUU_c31 "7" (consUU_c31 "8" (consUU_c31 "9" nilUU_c30))))))))))

def get_at_i38 =
  fn A_v503940 n_v503941 xs_v503942 a_v503943 ⇒
    match n_v503941 with
    | O ⇒
      match xs_v503942 with
      | nilUU_c30  ⇒ a_v503943
      | consUU_c31 x_v503944 __v503945 ⇒ x_v503944
      end
    | S n_v503946 ⇒
      match xs_v503942 with
      | nilUU_c30  ⇒ a_v503943
      | consUU_c31 __v503947 xs_v503948 ⇒
        ((((get_at_i38 NULL) n_v503946) xs_v503948) a_v503943)
      end
    end

def string_of_digit_i39 =
  fn n_v503949 ⇒
    ((((get_at_i38 NULL) n_v503949) digits_i37) EmptyString_c6)

def string_of_nat_i40 =
  fn n_v503950 ⇒
    let s_v503951 = (string_of_digit_i39 ((modn_i17 n_v503950) 10)) in
    let n_v503952 = ((divn_i16 n_v503950) 10) in
    match ((ltn_i7 0) n_v503952) with
    | true ⇒ ((cats_i20 (string_of_nat_i40 n_v503952)) s_v503951)
    | false ⇒ s_v503951
    end

def digit_of_char_i41 =
  fn c_v503953 ⇒
    match ((eqc_i18 c_v503953) '0') with
    | true ⇒ (SomeUL_c21 0)
    | false ⇒
      match ((eqc_i18 c_v503953) '1') with
      | true ⇒ (SomeUL_c21 1)
      | false ⇒
        match ((eqc_i18 c_v503953) '2') with
        | true ⇒ (SomeUL_c21 2)
        | false ⇒
          match ((eqc_i18 c_v503953) '3') with
          | true ⇒ (SomeUL_c21 3)
          | false ⇒
            match ((eqc_i18 c_v503953) '4') with
            | true ⇒ (SomeUL_c21 4)
            | false ⇒
              match ((eqc_i18 c_v503953) '5') with
              | true ⇒ (SomeUL_c21 5)
              | false ⇒
                match ((eqc_i18 c_v503953) '6') with
                | true ⇒ (SomeUL_c21 6)
                | false ⇒
                  match ((eqc_i18 c_v503953) '7') with
                  | true ⇒ (SomeUL_c21 7)
                  | false ⇒
                    match ((eqc_i18 c_v503953) '8') with
                    | true ⇒ (SomeUL_c21 8)
                    | false ⇒
                      match ((eqc_i18 c_v503953) '9') with
                      | true ⇒ (SomeUL_c21 9) | false ⇒ NoneUL_c20
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

def nat_of_string_loop_i42 =
  fn s_v503954 acc_v503955 ⇒
    match s_v503954 with
    | EmptyString_c6  ⇒ (SomeUL_c21 acc_v503955)
    | String_c7 c_v503956 s_v503957 ⇒
      match (digit_of_char_i41 c_v503956) with
      | NoneUL_c20  ⇒ NoneUL_c20
      | SomeUL_c21 n_v503958 ⇒
        ((nat_of_string_loop_i42 s_v503957)
          ((addn_i13 ((muln_i15 acc_v503955) 10)) n_v503958))
      end
    end

def nat_of_string_i43 =
  fn s_v503959 ⇒ ((nat_of_string_loop_i42 s_v503959) 0)

data word_d8 =
| Word_c12 of size(2)

def contains_i50 =
  fn c_v503960 s_v503961 ⇒
    match s_v503961 with
    | EmptyString_c6  ⇒ false
    | String_c7 c0_v503962 s_v503963 ⇒
      match ((eqc_i18 c_v503960) c0_v503962) with
      | true ⇒ true | false ⇒ ((contains_i50 c_v503960) s_v503963)
      end
    end

def string_diff_i51 =
  fn ans_v503964 s1_v503965 s2_v503966 ⇒
    match s1_v503965 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c1_v503967 s1_v503968 ⇒
      match s2_v503966 with
      | EmptyString_c6  ⇒ EmptyString_c6
      | String_c7 c2_v503969 s2_v503970 ⇒
        match ((eqc_i18 c1_v503967) c2_v503969) with
        | true ⇒
          ((cats_i20 "Y")
            (((string_diff_i51 ans_v503964) s1_v503968) s2_v503970))
        | false ⇒
          match ((contains_i50 c2_v503969) ans_v503964) with
          | true ⇒
            ((cats_i20 "I")
              (((string_diff_i51 ans_v503964) s1_v503968) s2_v503970))
          | false ⇒
            ((cats_i20 "N")
              (((string_diff_i51 ans_v503964) s1_v503968) s2_v503970))
          end
        end
      end
    end

def wordle_diff_i53 =
  fn ans_v503971 guess_v503972 ⇒
    match ans_v503971 with
    | Word_c12 ans_v503973 pf1_v503974 ⇒
      match guess_v503972 with
      | Word_c12 guess_v503975 pf2_v503976 ⇒
        let pf1_v503977 = NULL in
        let pf2_v503978 = NULL in
        let pf_v503979 = NULL in
        (Word_c12
          (((string_diff_i51 ans_v503973) ans_v503973) guess_v503975) NULL)
      end
    end

def eqw_i54 =
  fn w1_v503980 w2_v503981 ⇒
    match w1_v503980 with
    | Word_c12 s1_v503982 __v503983 ⇒
      match w2_v503981 with
      | Word_c12 s2_v503984 __v503985 ⇒ ((eqs_i22 s1_v503982) s2_v503984)
      end
    end

def read_word_i61 =
  fn __v503986 ⇒
    let s_v503987 ⇐ (readline_i34 ()) in
    (match ((eqn_i10 (strlen_i21 s_v503987)) 5) with
     | true ⇒ fn e_v503988 ⇒ return (Word_c12 s_v503987 NULL)
     | false ⇒
       fn __v503989 ⇒
         let __v503990 ⇐
           (print_i35 "please input a word with length of 5\n")
         in (read_word_i61 ())
     end NULL)

def player_loop_i62 =
  fn ans_v503991 repeat_v503992 c_v503993 ⇒
    (match repeat_v503992 with
     | O ⇒
       fn c_v503994 ⇒
         let __v503995 ⇐ recv c_v503994 in
         match __v503995 with
         | (ans_v503996, c_v503997) ⇒
           let __v503998 ⇐ {recv} c_v503997 in
           match __v503998 with
           | (pf_v503999, c_v504000) ⇒
             match ans_v503996 with
             | Word_c12 s_v504001 __v504002 ⇒
               let __v504003 ⇐
                 (print_i35
                   ((cats_i20
                      ((cats_i20 "You Lose! The answer is ") s_v504001))
                     ".\n"))
               in close⇓ c_v504000
             end
           end
         end
     | S repeat_v504004 ⇒
       fn c_v504005 ⇒
         let guess_v504006 ⇐ (read_word_i61 ()) in
         let c_v504007 ⇐ (send c_v504005 guess_v504006) in
         let __v504008 ⇐ recv c_v504007 in
         match __v504008 with
         | (b_v504009, c_v504010) ⇒
           let __v504011 ⇐ {recv} c_v504010 in
           match __v504011 with
           | (pf_v504012, c_v504013) ⇒
             (match b_v504009 with
              | true ⇒
                ln c_v504014 ⇒
                  let __v504015 ⇐ (print_i35 "You Win!\n") in
                  close⇓ c_v504014
              | false ⇒
                ln c_v504016 ⇒
                  let __v504017 ⇐ recv c_v504016 in
                  match __v504017 with
                  | (diff_v504018, c_v504019) ⇒
                    let __v504020 ⇐ {recv} c_v504019 in
                    match __v504020 with
                    | (pf_v504021, c_v504022) ⇒
                      match diff_v504018 with
                      | Word_c12 s_v504023 __v504024 ⇒
                        let __v504025 ⇐
                          (print_i35
                            ((cats_i20
                               ((cats_i20
                                  ((cats_i20
                                     ((cats_i20 "Incorrect, hint: ")
                                       s_v504023))
                                    ". You have "))
                                 (string_of_nat_i40 repeat_v504004)))
                              " more tries.\n"))
                        in
                        (((player_loop_i62 NULL) repeat_v504004) c_v504022)
                      end
                    end
                  end
              end c_v504013)
           end
         end
     end c_v503993)

def player_i63 =
  fn c_v504026 ⇒
    let __v504027 ⇐ {recv} c_v504026 in
    match __v504027 with
    | (ans_v504028, c_v504029) ⇒
      let __v504030 ⇐ recv c_v504029 in
      match __v504030 with
      | (repeat_v504031, c_v504032) ⇒
        let __v504033 ⇐ (print_i35 "Wordle Game\n") in
        let __v504034 ⇐ (print_i35 "Please guess a word of length 5.\n") in
        let __v504035 ⇐
          (print_i35
            ((cats_i20
               ((cats_i20 "You have ") (string_of_nat_i40 repeat_v504031)))
              " tries.\n"))
        in (((player_loop_i62 NULL) repeat_v504031) c_v504032)
      end
    end

data subsetUUU_d26 =
| SPairUUU_c39 of size(2)

data subsetUUL_d25 =
| SPairUUL_c38 of size(2)

data subsetULU_d24 =
| SPairULU_c37 of size(2)

data subsetULL_d23 =
| SPairULL_c36 of size(2)

data subsetLUL_d21 =
| SPairLUL_c34 of size(2)

data subsetLLL_d19 =
| SPairLLL_c32 of size(2)

data at_d10 =
| at_O_c14 of size(3) | at_S_c15 of size(6)

def get_at_i65 =
  fn A_v504036 n_v504037 xs_v504038 ⇒
    match xs_v504038 with
    | nilUU_c30  ⇒ fn e_v504039 ⇒ ()
    | consUU_c31 x_v504040 xs_v504041 ⇒
      match n_v504037 with
      | O ⇒ fn e_v504042 ⇒ (SPairUUU_c39 x_v504040 NULL)
      | S n_v504043 ⇒
        fn e_v504044 ⇒
          match ((((get_at_i65 NULL) n_v504043) xs_v504041) NULL) with
          | SPairUUU_c39 x0_v504045 pf_v504046 ⇒
            (SPairUUU_c39 x0_v504045 NULL)
          end
      end
    end

def rand_word_i66 =
  fn __v504047 ⇒
    let words_v504048 =
      (consUU_c31
        (Word_c12 "route" NULL)
        (consUU_c31
          (Word_c12 "crash" NULL)
          (consUU_c31
            (Word_c12 "clown" NULL)
            (consUU_c31
              (Word_c12 "shaky" NULL)
              (consUU_c31
                (Word_c12 "vegan" NULL)
                (consUU_c31
                  (Word_c12 "power" NULL)
                  (consUU_c31
                    (Word_c12 "trust" NULL)
                    (consUU_c31
                      (Word_c12 "enjoy" NULL)
                      (consUU_c31
                        (Word_c12 "brain" NULL)
                        (consUU_c31
                          (Word_c12 "adopt" NULL)
                          (consUU_c31
                            (Word_c12 "tower" NULL)
                            (consUU_c31
                              (Word_c12 "shade" NULL)
                              (consUU_c31
                                (Word_c12 "delay" NULL)
                                (consUU_c31
                                  (Word_c12 "twist" NULL)
                                  (consUU_c31
                                    (Word_c12 "alert" NULL)
                                    (consUU_c31
                                      (Word_c12 "choke" NULL)
                                      (consUU_c31
                                        (Word_c12 "split" NULL)
                                        (consUU_c31
                                          (Word_c12 "rhyme" NULL)
                                          (consUU_c31
                                            (Word_c12 "muddy" NULL)
                                            (consUU_c31
                                              (Word_c12 "plant" NULL)
                                              nilUU_c30))))))))))))))))))))
    in
    let r_v504049 ⇐ rand 0 19 in
    match r_v504049 with
    | Between_c4 n_v504050 __v504051 pf_v504052 ⇒
      match ((((get_at_i65 NULL) n_v504050) words_v504048) NULL) with
      | SPairUUU_c39 w_v504053 __v504054 ⇒ return w_v504053
      end
    end

def server_loop_i67 =
  fn ans_v504055 repeat_v504056 c_v504057 ⇒
    (match repeat_v504056 with
     | O ⇒
       fn c_v504058 ⇒
         let c_v504059 ⇐ (send c_v504058 ans_v504055) in
         let c_v504060 ⇐ ({send} c_v504059 NULL) in close⇑ c_v504060
     | S repeat_v504061 ⇒
       fn c_v504062 ⇒
         let __v504063 ⇐ recv c_v504062 in
         match __v504063 with
         | (guess_v504064, c_v504065) ⇒
           let b_v504066 = ((eqw_i54 ans_v504055) guess_v504064) in
           let c_v504067 ⇐ (send c_v504065 b_v504066) in
           let c_v504068 ⇐ ({send} c_v504067 NULL) in
           (match b_v504066 with
            | true ⇒ ln c_v504069 ⇒ close⇑ c_v504069
            | false ⇒
              ln c_v504070 ⇒
                let c_v504071 ⇐
                  (send c_v504070
                    ((wordle_diff_i53 ans_v504055) guess_v504064))
                in
                let c_v504072 ⇐ ({send} c_v504071 NULL) in
                (((server_loop_i67 ans_v504055) repeat_v504061) c_v504072)
            end c_v504068)
         end
     end c_v504057)

def server_i68 =
  fn c_v504073 ⇒
    let repeat_v504074 = 6 in
    let ans_v504075 ⇐ (rand_word_i66 ()) in
    let c_v504076 ⇐ ({send} c_v504073 NULL) in
    let c_v504077 ⇐ (send c_v504076 repeat_v504074) in
    (((server_loop_i67 ans_v504075) repeat_v504074) c_v504077)

main =
  let c_v504078 ⇐ fork c_v504079 in (server_i68 c_v504079) in
  let c0_v504080 ⇐
    fork c0_v504081 in
      let __v504082 ⇐ recv c0_v504081 in
      match __v504082 with
      | (c_v504083, c0_v504084) ⇒
        let __v504085 ⇐ (player_i63 c_v504083) in
        let c0_v504086 ⇐ (send c0_v504084 ()) in close⇑ c0_v504086
      end
  in
  let c0_v504087 ⇐ (send c0_v504080 c_v504078) in
  let __v504088 ⇐ recv c0_v504087 in
  match __v504088 with
  | (__v504089, c0_v504090) ⇒ close⇓ c0_v504090
  end

trans12 success--------------------------

fun andb_i2(b1_v504507, b2_v504508) = if b1_v504507 then
                                        b2_v504508
                                      else
                                        0

val andbclo_i98 =
  fn b1_v504509 b2_v504510 ⇒ andb_i2(b1_v504509, b2_v504510)

fun orb_i3(b1_v504511, b2_v504512) = if b1_v504511 then
                                       1
                                     else
                                       b2_v504512

val orbclo_i99 = fn b1_v504513 b2_v504514 ⇒ orb_i3(b1_v504513, b2_v504514)

fun notb_i4(b_v504515) = if b_v504515 then
                           0
                         else
                           1

val notbclo_i100 = fn b_v504516 ⇒ notb_i4(b_v504516)

fun compareb_i5(b1_v504517, b2_v504518) =
  if b1_v504517 then
    if b2_v504518 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v504518 then
      LT_c1
    else
      EQ_c3

val comparebclo_i101 =
  fn b1_v504519 b2_v504520 ⇒ compareb_i5(b1_v504519, b2_v504520)

fun lten_i6(x_v504521, y_v504522) =
  let __v504523 = x_v504521 in
  if __v504523 then
    let x_v504524 = __v504523.-1 in
    let __v504525 = y_v504522 in
    if __v504525 then
      let y_v504526 = __v504525.-1 in lten_i6(x_v504524, y_v504526)
    else
      0
  else
    1

val ltenclo_i102 = fn x_v504527 y_v504528 ⇒ lten_i6(x_v504527, y_v504528)

fun ltn_i7(x_v504529, y_v504530) = lten_i6(x_v504529.+1, y_v504530)

val ltnclo_i103 = fn x_v504531 y_v504532 ⇒ ltn_i7(x_v504531, y_v504532)

fun gten_i8(x_v504533, y_v504534) = lten_i6(y_v504534, x_v504533)

val gtenclo_i104 = fn x_v504535 y_v504536 ⇒ gten_i8(x_v504535, y_v504536)

fun gtn_i9(x_v504537, y_v504538) = ltn_i7(y_v504538, x_v504537)

val gtnclo_i105 = fn x_v504539 y_v504540 ⇒ gtn_i9(x_v504539, y_v504540)

fun eqn_i10(x_v504541, y_v504542) =
  let __v504543 = x_v504541 in
  if __v504543 then
    let x_v504544 = __v504543.-1 in
    let __v504545 = y_v504542 in
    if __v504545 then
      let y_v504546 = __v504545.-1 in eqn_i10(x_v504544, y_v504546)
    else
      0
  else
    let __v504547 = y_v504542 in
    if __v504547 then
      let __v504548 = __v504547.-1 in 0
    else
      1

val eqnclo_i106 = fn x_v504549 y_v504550 ⇒ eqn_i10(x_v504549, y_v504550)

fun comparen_i11(n1_v504551, n2_v504552) =
  let __v504553 = n1_v504551 in
  if __v504553 then
    let n1_v504554 = __v504553.-1 in
    let __v504555 = n2_v504552 in
    if __v504555 then
      let n2_v504556 = __v504555.-1 in comparen_i11(n1_v504554, n2_v504556)
    else
      GT_c2
  else
    let __v504557 = n2_v504552 in
    if __v504557 then
      let __v504558 = __v504557.-1 in LT_c1
    else
      EQ_c3

val comparenclo_i107 =
  fn n1_v504559 n2_v504560 ⇒ comparen_i11(n1_v504559, n2_v504560)

fun pred_i12(x_v504561) =
  let __v504562 = x_v504561 in
  if __v504562 then
    let x_v504563 = __v504562.-1 in x_v504563
  else
    0

val predclo_i108 = fn x_v504564 ⇒ pred_i12(x_v504564)

fun addn_i13(x_v504565, y_v504566) =
  let __v504567 = x_v504565 in
  if __v504567 then
    let x_v504568 = __v504567.-1 in addn_i13(x_v504568, y_v504566).+1
  else
    y_v504566

val addnclo_i109 = fn x_v504569 y_v504570 ⇒ addn_i13(x_v504569, y_v504570)

fun subn_i14(x_v504571, y_v504572) =
  let __v504573 = y_v504572 in
  if __v504573 then
    let y_v504574 = __v504573.-1 in subn_i14(pred_i12(x_v504571), y_v504574)
  else
    x_v504571

val subnclo_i110 = fn x_v504575 y_v504576 ⇒ subn_i14(x_v504575, y_v504576)

fun muln_i15(x_v504577, y_v504578) =
  let __v504579 = x_v504577 in
  if __v504579 then
    let x_v504580 = __v504579.-1 in
    addn_i13(y_v504578, muln_i15(x_v504580, y_v504578))
  else
    0

val mulnclo_i111 = fn x_v504581 y_v504582 ⇒ muln_i15(x_v504581, y_v504582)

fun divn_i16(x_v504583, y_v504584) =
  if ltn_i7(x_v504583, y_v504584) then
    0
  else
    divn_i16(subn_i14(x_v504583, y_v504584), y_v504584).+1

val divnclo_i112 = fn x_v504585 y_v504586 ⇒ divn_i16(x_v504585, y_v504586)

fun modn_i17(x_v504587, y_v504588) =
  subn_i14(x_v504587, muln_i15(divn_i16(x_v504587, y_v504588), y_v504588))

val modnclo_i113 = fn x_v504589 y_v504590 ⇒ modn_i17(x_v504589, y_v504590)

fun eqc_i18(c1_v504591, c2_v504592) =
  match c1_v504591 with
  | Char_c5 n1_v504593 ⇒
    match c2_v504592 with
    | Char_c5 n2_v504594 ⇒ eqn_i10(n1_v504593, n2_v504594)
    end
  end

val eqcclo_i114 =
  fn c1_v504595 c2_v504596 ⇒ eqc_i18(c1_v504595, c2_v504596)

fun comparec_i19(c1_v504597, c2_v504598) =
  match c1_v504597 with
  | Char_c5 n1_v504599 ⇒
    match c2_v504598 with
    | Char_c5 n2_v504600 ⇒ comparen_i11(n1_v504599, n2_v504600)
    end
  end

val comparecclo_i115 =
  fn c1_v504601 c2_v504602 ⇒ comparec_i19(c1_v504601, c2_v504602)

fun cats_i20(s1_v504603, s2_v504604) =
  match s1_v504603 with
  | EmptyString_c6  ⇒ s2_v504604
  | String_c7 c_v504605 s1_v504606 ⇒
    (String_c7 c_v504605 cats_i20(s1_v504606, s2_v504604))
  end

val catsclo_i116 =
  fn s1_v504607 s2_v504608 ⇒ cats_i20(s1_v504607, s2_v504608)

fun strlen_i21(s_v504609) =
  match s_v504609 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v504610 s_v504611 ⇒ strlen_i21(s_v504611).+1
  end

val strlenclo_i117 = fn s_v504612 ⇒ strlen_i21(s_v504612)

fun eqs_i22(s1_v504613, s2_v504614) =
  match s1_v504613 with
  | EmptyString_c6  ⇒
    match s2_v504614 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v504615 __v504616 ⇒ 0
    end
  | String_c7 c1_v504617 s1_v504618 ⇒
    match s2_v504614 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v504619 s2_v504620 ⇒
      andb_i2(eqc_i18(c1_v504617, c2_v504619),
              eqs_i22(s1_v504618, s2_v504620))
    end
  end

val eqsclo_i118 =
  fn s1_v504621 s2_v504622 ⇒ eqs_i22(s1_v504621, s2_v504622)

fun compares_i23(s1_v504623, s2_v504624) =
  match s1_v504623 with
  | EmptyString_c6  ⇒
    match s2_v504624 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v504625 __v504626 ⇒ LT_c1
    end
  | String_c7 c1_v504627 s1_v504628 ⇒
    match s2_v504624 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v504629 s2_v504630 ⇒
      match comparec_i19(c1_v504627, c2_v504629) with
      | EQ_c3  ⇒ compares_i23(s1_v504628, s2_v504630) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i119 =
  fn s1_v504631 s2_v504632 ⇒ compares_i23(s1_v504631, s2_v504632)

fun and_thenUUU_i79(A_v504633, B_v504634, opt_v504635, f_v504636) =
  match opt_v504635 with
  | NoneUU_c22  ⇒ NoneUU_c22
  | SomeUU_c23 x_v504637 ⇒ (f_v504636) x_v504637
  end

val and_thenUUUclo_i120 =
  fn A_v504638 B_v504639 opt_v504640 ⇒
    ln f_v504641 ⇒
      and_thenUUU_i79(A_v504638, B_v504639, opt_v504640, f_v504641)

fun and_thenUUL_i78(A_v504642, B_v504643, opt_v504644, f_v504645) =
  match opt_v504644 with
  | NoneUL_c20  ⇒ NoneUL_c20
  | SomeUL_c21 x_v504646 ⇒ (f_v504645) x_v504646
  end

val and_thenUULclo_i121 =
  fn A_v504647 B_v504648 opt_v504649 ⇒
    ln f_v504650 ⇒
      and_thenUUL_i78(A_v504647, B_v504648, opt_v504649, f_v504650)

fun and_thenULU_i77(A_v504651, B_v504652, opt_v504653, f_v504654) =
  match opt_v504653 with
  | NoneUU_c22  ⇒ NoneLU_c18
  | SomeUU_c23 x_v504655 ⇒ (f_v504654) x_v504655
  end

val and_thenULUclo_i122 =
  fn A_v504656 B_v504657 opt_v504658 ⇒
    ln f_v504659 ⇒
      and_thenULU_i77(A_v504656, B_v504657, opt_v504658, f_v504659)

fun and_thenULL_i76(A_v504660, B_v504661, opt_v504662, f_v504663) =
  match opt_v504662 with
  | NoneUL_c20  ⇒ NoneLL_c16
  | SomeUL_c21 x_v504664 ⇒ (f_v504663) x_v504664
  end

val and_thenULLclo_i123 =
  fn A_v504665 B_v504666 opt_v504667 ⇒
    ln f_v504668 ⇒
      and_thenULL_i76(A_v504665, B_v504666, opt_v504667, f_v504668)

fun and_thenLUL_i74(A_v504669, B_v504670, opt_v504671, f_v504672) =
  match opt_v504671 with
  | NoneLL_c16  ⇒ NoneUL_c20
  | SomeLL_c17 x_v504673 ⇒ (f_v504672) x_v504673
  end

val and_thenLULclo_i124 =
  fn A_v504674 B_v504675 opt_v504676 ⇒
    ln f_v504677 ⇒
      and_thenLUL_i74(A_v504674, B_v504675, opt_v504676, f_v504677)

fun and_thenLLL_i72(A_v504678, B_v504679, opt_v504680, f_v504681) =
  match opt_v504680 with
  | NoneLL_c16  ⇒ NoneLL_c16
  | SomeLL_c17 x_v504682 ⇒ (f_v504681) x_v504682
  end

val and_thenLLLclo_i125 =
  fn A_v504683 B_v504684 opt_v504685 ⇒
    ln f_v504686 ⇒
      and_thenLLL_i72(A_v504683, B_v504684, opt_v504685, f_v504686)

fun lenUU_i87(A_v504687, xs_v504688) =
  match xs_v504688 with
  | nilUU_c30  ⇒ (0, nilUU_c30)
  | consUU_c31 x_v504689 xs_v504690 ⇒
    match lenUU_i87(NULL, xs_v504690) with
    | (n_v504691, xs_v504692) ⇒
      (n_v504691.+1, (consUU_c31 x_v504689 xs_v504692))
    end
  end

val lenUUclo_i126 =
  fn A_v504693 xs_v504694 ⇒ lenUU_i87(A_v504693, xs_v504694)

fun lenUL_i86(A_v504695, xs_v504696) =
  match xs_v504696 with
  | nilUL_c28  ⇒ (0, nilUL_c28)
  | consUL_c29 x_v504697 xs_v504698 ⇒
    match lenUL_i86(NULL, xs_v504698) with
    | (n_v504699, xs_v504700) ⇒
      (n_v504699.+1, (consUL_c29 x_v504697 xs_v504700))
    end
  end

val lenULclo_i127 =
  fn A_v504701 xs_v504702 ⇒ lenUL_i86(A_v504701, xs_v504702)

fun lenLL_i84(A_v504703, xs_v504704) =
  match xs_v504704 with
  | nilLL_c24  ⇒ (0, nilLL_c24)
  | consLL_c25 x_v504705 xs_v504706 ⇒
    match lenLL_i84(NULL, xs_v504706) with
    | (n_v504707, xs_v504708) ⇒
      (n_v504707.+1, (consLL_c25 x_v504705 xs_v504708))
    end
  end

val lenLLclo_i128 =
  fn A_v504709 xs_v504710 ⇒ lenLL_i84(A_v504709, xs_v504710)

fun appendUU_i91(A_v504711, xs_v504712, ys_v504713) =
  match xs_v504712 with
  | nilUU_c30  ⇒ ys_v504713
  | consUU_c31 x_v504714 xs_v504715 ⇒
    (consUU_c31 x_v504714 appendUU_i91(NULL, xs_v504715, ys_v504713))
  end

val appendUUclo_i129 =
  fn A_v504716 xs_v504717 ⇒
    ln ys_v504718 ⇒ appendUU_i91(A_v504716, xs_v504717, ys_v504718)

fun appendUL_i90(A_v504719, xs_v504720, ys_v504721) =
  match xs_v504720 with
  | nilUL_c28  ⇒ ys_v504721
  | consUL_c29 x_v504722 xs_v504723 ⇒
    (consUL_c29 x_v504722 appendUL_i90(NULL, xs_v504723, ys_v504721))
  end

val appendULclo_i130 =
  fn A_v504724 xs_v504725 ⇒
    ln ys_v504726 ⇒ appendUL_i90(A_v504724, xs_v504725, ys_v504726)

fun appendLL_i88(A_v504727, xs_v504728, ys_v504729) =
  match xs_v504728 with
  | nilLL_c24  ⇒ ys_v504729
  | consLL_c25 x_v504730 xs_v504731 ⇒
    (consLL_c25 x_v504730 appendLL_i88(NULL, xs_v504731, ys_v504729))
  end

val appendLLclo_i131 =
  fn A_v504732 xs_v504733 ⇒
    ln ys_v504734 ⇒ appendLL_i88(A_v504732, xs_v504733, ys_v504734)

fun readline_i34(__v504735) =
  ln __v504736 ⇒
    let ch_v504737 = (ln __v504738 ⇒ open stdin) NULL in
    let ch_v504739 =
      ((fn x_v504740 ⇒ ln __v504741 ⇒ send(ch_v504737, x_v504740)) 1)
        NULL
    in
    let __v504742 = (ln __v504743 ⇒ recv(ch_v504739)) NULL in
    (match __v504742 with
     | (s_v504744, ch_v504745) ⇒
       ln __v504746 ⇒
         let ch_v504747 =
           ((fn x_v504748 ⇒ ln __v504749 ⇒ send(ch_v504745, x_v504748)) 0)
             NULL
         in
         let __v504750 =
           (ln __v504751 ⇒ let __v504752 = ch_v504747 in NULL) NULL
         in (ln __v504753 ⇒ s_v504744) NULL
     end) NULL

val readlineclo_i132 = fn __v504754 ⇒ readline_i34(__v504754)

fun print_i35(s_v504755) =
  ln __v504756 ⇒
    let ch_v504757 = (ln __v504758 ⇒ open stdout) NULL in
    let ch_v504759 =
      ((fn x_v504760 ⇒ ln __v504761 ⇒ send(ch_v504757, x_v504760)) 1)
        NULL
    in
    let ch_v504762 =
      ((fn x_v504763 ⇒ ln __v504764 ⇒ send(ch_v504759, x_v504763))
         s_v504755)
        NULL
    in
    let ch_v504765 =
      ((fn x_v504766 ⇒ ln __v504767 ⇒ send(ch_v504762, x_v504766)) 0)
        NULL
    in (ln __v504768 ⇒ let __v504769 = ch_v504765 in NULL) NULL

val printclo_i133 = fn s_v504770 ⇒ print_i35(s_v504770)

fun prerr_i36(s_v504771) =
  ln __v504772 ⇒
    let ch_v504773 = (ln __v504774 ⇒ open stderr) NULL in
    let ch_v504775 =
      ((fn x_v504776 ⇒ ln __v504777 ⇒ send(ch_v504773, x_v504776)) 1)
        NULL
    in
    let ch_v504778 =
      ((fn x_v504779 ⇒ ln __v504780 ⇒ send(ch_v504775, x_v504779))
         s_v504771)
        NULL
    in
    let ch_v504781 =
      ((fn x_v504782 ⇒ ln __v504783 ⇒ send(ch_v504778, x_v504782)) 0)
        NULL
    in (ln __v504784 ⇒ let __v504785 = ch_v504781 in NULL) NULL

val prerrclo_i134 = fn s_v504786 ⇒ prerr_i36(s_v504786)

val digits_i37 =
  (consUU_c31
    "0"
    (consUU_c31
      "1"
      (consUU_c31
        "2"
        (consUU_c31
          "3"
          (consUU_c31
            "4"
            (consUU_c31
              "5"
              (consUU_c31
                "6"
                (consUU_c31 "7" (consUU_c31 "8" (consUU_c31 "9" nilUU_c30))))))))))

fun get_at_i38(A_v504787, n_v504788, xs_v504789, a_v504790) =
  let __v504791 = n_v504788 in
  if __v504791 then
    let n_v504792 = __v504791.-1 in
    match xs_v504789 with
    | nilUU_c30  ⇒ a_v504790
    | consUU_c31 __v504793 xs_v504794 ⇒
      get_at_i38(NULL, n_v504792, xs_v504794, a_v504790)
    end
  else
    match xs_v504789 with
    | nilUU_c30  ⇒ a_v504790 | consUU_c31 x_v504795 __v504796 ⇒ x_v504795
    end

val get_atclo_i135 =
  fn A_v504797 n_v504798 xs_v504799 a_v504800 ⇒
    get_at_i38(A_v504797, n_v504798, xs_v504799, a_v504800)

fun string_of_digit_i39(n_v504801) =
  get_at_i38(NULL, n_v504801, digits_i37, EmptyString_c6)

val string_of_digitclo_i136 = fn n_v504802 ⇒ string_of_digit_i39(n_v504802)

fun string_of_nat_i40(n_v504803) =
  let s_v504804 = string_of_digit_i39(modn_i17(n_v504803, 10)) in
  let n_v504805 = divn_i16(n_v504803, 10) in
  if ltn_i7(0, n_v504805) then
    cats_i20(string_of_nat_i40(n_v504805), s_v504804)
  else
    s_v504804

val string_of_natclo_i137 = fn n_v504806 ⇒ string_of_nat_i40(n_v504806)

fun digit_of_char_i41(c_v504807) =
  if eqc_i18(c_v504807, '0') then
    (SomeUL_c21 0)
  else
    if eqc_i18(c_v504807, '1') then
      (SomeUL_c21 1)
    else
      if eqc_i18(c_v504807, '2') then
        (SomeUL_c21 2)
      else
        if eqc_i18(c_v504807, '3') then
          (SomeUL_c21 3)
        else
          if eqc_i18(c_v504807, '4') then
            (SomeUL_c21 4)
          else
            if eqc_i18(c_v504807, '5') then
              (SomeUL_c21 5)
            else
              if eqc_i18(c_v504807, '6') then
                (SomeUL_c21 6)
              else
                if eqc_i18(c_v504807, '7') then
                  (SomeUL_c21 7)
                else
                  if eqc_i18(c_v504807, '8') then
                    (SomeUL_c21 8)
                  else
                    if eqc_i18(c_v504807, '9') then
                      (SomeUL_c21 9)
                    else
                      NoneUL_c20

val digit_of_charclo_i138 = fn c_v504808 ⇒ digit_of_char_i41(c_v504808)

fun nat_of_string_loop_i42(s_v504809, acc_v504810) =
  match s_v504809 with
  | EmptyString_c6  ⇒ (SomeUL_c21 acc_v504810)
  | String_c7 c_v504811 s_v504812 ⇒
    match digit_of_char_i41(c_v504811) with
    | NoneUL_c20  ⇒ NoneUL_c20
    | SomeUL_c21 n_v504813 ⇒
      nat_of_string_loop_i42(s_v504812,
                             addn_i13(muln_i15(acc_v504810, 10), n_v504813))
    end
  end

val nat_of_string_loopclo_i139 =
  fn s_v504814 acc_v504815 ⇒ nat_of_string_loop_i42(s_v504814, acc_v504815)

fun nat_of_string_i43(s_v504816) = nat_of_string_loop_i42(s_v504816, 0)

val nat_of_stringclo_i140 = fn s_v504817 ⇒ nat_of_string_i43(s_v504817)

fun contains_i50(c_v504818, s_v504819) =
  match s_v504819 with
  | EmptyString_c6  ⇒ 0
  | String_c7 c0_v504820 s_v504821 ⇒
    if eqc_i18(c_v504818, c0_v504820) then
      1
    else
      contains_i50(c_v504818, s_v504821)
  end

val containsclo_i141 =
  fn c_v504822 s_v504823 ⇒ contains_i50(c_v504822, s_v504823)

fun string_diff_i51(ans_v504824, s1_v504825, s2_v504826) =
  match s1_v504825 with
  | EmptyString_c6  ⇒ EmptyString_c6
  | String_c7 c1_v504827 s1_v504828 ⇒
    match s2_v504826 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c2_v504829 s2_v504830 ⇒
      if eqc_i18(c1_v504827, c2_v504829) then
        cats_i20("Y", string_diff_i51(ans_v504824, s1_v504828, s2_v504830))
      else
        if contains_i50(c2_v504829, ans_v504824) then
          cats_i20("I", string_diff_i51(ans_v504824, s1_v504828, s2_v504830))
        else
          cats_i20("N", string_diff_i51(ans_v504824, s1_v504828, s2_v504830))
    end
  end

val string_diffclo_i142 =
  fn ans_v504831 s1_v504832 s2_v504833 ⇒
    string_diff_i51(ans_v504831, s1_v504832, s2_v504833)

fun wordle_diff_i53(ans_v504834, guess_v504835) =
  match ans_v504834 with
  | Word_c12 ans_v504836 pf1_v504837 ⇒
    match guess_v504835 with
    | Word_c12 guess_v504838 pf2_v504839 ⇒
      let pf1_v504840 = NULL in
      let pf2_v504841 = NULL in
      let pf_v504842 = NULL in
      (Word_c12
        string_diff_i51(ans_v504836, ans_v504836, guess_v504838) NULL)
    end
  end

val wordle_diffclo_i143 =
  fn ans_v504843 guess_v504844 ⇒
    wordle_diff_i53(ans_v504843, guess_v504844)

fun eqw_i54(w1_v504845, w2_v504846) =
  match w1_v504845 with
  | Word_c12 s1_v504847 __v504848 ⇒
    match w2_v504846 with
    | Word_c12 s2_v504849 __v504850 ⇒ eqs_i22(s1_v504847, s2_v504849)
    end
  end

val eqwclo_i144 =
  fn w1_v504851 w2_v504852 ⇒ eqw_i54(w1_v504851, w2_v504852)

fun read_word_i61(__v504853) =
  ln __v504854 ⇒
    let s_v504855 = (readline_i34(NULL)) NULL in
    ((if eqn_i10(strlen_i21(s_v504855), 5) then
        fn e_v504856 ⇒ ln __v504857 ⇒ (Word_c12 s_v504855 NULL)
      else
        fn __v504858 ⇒
          ln __v504859 ⇒
            let __v504860 =
              (print_i35("please input a word with length of 5\n")) NULL
            in (read_word_i61(NULL)) NULL)
       NULL)
      NULL

val read_wordclo_i145 = fn __v504861 ⇒ read_word_i61(__v504861)

fun player_loop_i62(ans_v504862, repeat_v504863, c_v504864) =
  (let __v504865 = repeat_v504863 in
   if __v504865 then
     let repeat_v504866 = __v504865.-1 in
     fn c_v504867 ⇒
       ln __v504868 ⇒
         let guess_v504869 = (read_word_i61(NULL)) NULL in
         let c_v504870 =
           ((fn x_v504871 ⇒ ln __v504872 ⇒ send(c_v504867, x_v504871))
              guess_v504869)
             NULL
         in
         let __v504873 = (ln __v504874 ⇒ recv(c_v504870)) NULL in
         (match __v504873 with
          | (b_v504875, c_v504876) ⇒
            ln __v504877 ⇒
              let __v504878 = (ln __v504879 ⇒ (NULL, c_v504876)) NULL in
              (match __v504878 with
               | (pf_v504880, c_v504881) ⇒
                 (if b_v504875 then
                    ln c_v504882 __v504883 ⇒
                      let __v504884 = (print_i35("You Win!\n")) NULL in
                      (ln __v504885 ⇒ close(c_v504882)) NULL
                  else
                    ln c_v504886 __v504887 ⇒
                      let __v504888 = (ln __v504889 ⇒ recv(c_v504886)) NULL
                      in
                      (match __v504888 with
                       | (diff_v504890, c_v504891) ⇒
                         ln __v504892 ⇒
                           let __v504893 =
                             (ln __v504894 ⇒ (NULL, c_v504891)) NULL
                           in
                           (match __v504893 with
                            | (pf_v504895, c_v504896) ⇒
                              match diff_v504890 with
                              | Word_c12 s_v504897 __v504898 ⇒
                                ln __v504899 ⇒
                                  let __v504900 =
                                    (print_i35(cats_i20(cats_i20(cats_i20(
                                                                 cats_i20(
                                                                 "Incorrect, hint: ",
                                                                 s_v504897),
                                                                 ". You have "),
                                                                 string_of_nat_i40(
                                                                 repeat_v504866)),
                                                        " more tries.\n")))
                                      NULL
                                  in
                                  (player_loop_i62(NULL, repeat_v504866,
                                                   c_v504896))
                                    NULL
                              end
                            end) NULL
                       end) NULL)
                   c_v504881
               end) NULL
          end) NULL
   else
     fn c_v504901 ⇒
       ln __v504902 ⇒
         let __v504903 = (ln __v504904 ⇒ recv(c_v504901)) NULL in
         (match __v504903 with
          | (ans_v504905, c_v504906) ⇒
            ln __v504907 ⇒
              let __v504908 = (ln __v504909 ⇒ (NULL, c_v504906)) NULL in
              (match __v504908 with
               | (pf_v504910, c_v504911) ⇒
                 match ans_v504905 with
                 | Word_c12 s_v504912 __v504913 ⇒
                   ln __v504914 ⇒
                     let __v504915 =
                       (print_i35(cats_i20(cats_i20("You Lose! The answer is ",
                                                    s_v504912),
                                           ".\n")))
                         NULL
                     in (ln __v504916 ⇒ close(c_v504911)) NULL
                 end
               end) NULL
          end) NULL)
    c_v504864

val player_loopclo_i146 =
  fn ans_v504917 repeat_v504918 c_v504919 ⇒
    player_loop_i62(ans_v504917, repeat_v504918, c_v504919)

fun player_i63(c_v504920) =
  ln __v504921 ⇒
    let __v504922 = (ln __v504923 ⇒ (NULL, c_v504920)) NULL in
    (match __v504922 with
     | (ans_v504924, c_v504925) ⇒
       ln __v504926 ⇒
         let __v504927 = (ln __v504928 ⇒ recv(c_v504925)) NULL in
         (match __v504927 with
          | (repeat_v504929, c_v504930) ⇒
            ln __v504931 ⇒
              let __v504932 = (print_i35("Wordle Game\n")) NULL in
              let __v504933 =
                (print_i35("Please guess a word of length 5.\n")) NULL
              in
              let __v504934 =
                (print_i35(cats_i20(cats_i20("You have ",
                                             string_of_nat_i40(repeat_v504929)),
                                    " tries.\n")))
                  NULL
              in (player_loop_i62(NULL, repeat_v504929, c_v504930)) NULL
          end) NULL
     end) NULL

val playerclo_i147 = fn c_v504935 ⇒ player_i63(c_v504935)

fun get_at_i65(A_v504936, n_v504937, xs_v504938) =
  match xs_v504938 with
  | nilUU_c30  ⇒ fn e_v504939 ⇒ NULL
  | consUU_c31 x_v504940 xs_v504941 ⇒
    let __v504942 = n_v504937 in
    if __v504942 then
      let n_v504943 = __v504942.-1 in
      fn e_v504944 ⇒
        match ((((get_atclo_i148) NULL) n_v504943) xs_v504941) NULL with
        | SPairUUU_c39 x0_v504945 pf_v504946 ⇒
          (SPairUUU_c39 x0_v504945 NULL)
        end
    else
      fn e_v504947 ⇒ (SPairUUU_c39 x_v504940 NULL)
  end

val get_atclo_i148 =
  fn A_v504948 n_v504949 xs_v504950 ⇒
    get_at_i65(A_v504948, n_v504949, xs_v504950)

fun rand_word_i66(__v504951) =
  let words_v504952 =
    (consUU_c31
      (Word_c12 "route" NULL)
      (consUU_c31
        (Word_c12 "crash" NULL)
        (consUU_c31
          (Word_c12 "clown" NULL)
          (consUU_c31
            (Word_c12 "shaky" NULL)
            (consUU_c31
              (Word_c12 "vegan" NULL)
              (consUU_c31
                (Word_c12 "power" NULL)
                (consUU_c31
                  (Word_c12 "trust" NULL)
                  (consUU_c31
                    (Word_c12 "enjoy" NULL)
                    (consUU_c31
                      (Word_c12 "brain" NULL)
                      (consUU_c31
                        (Word_c12 "adopt" NULL)
                        (consUU_c31
                          (Word_c12 "tower" NULL)
                          (consUU_c31
                            (Word_c12 "shade" NULL)
                            (consUU_c31
                              (Word_c12 "delay" NULL)
                              (consUU_c31
                                (Word_c12 "twist" NULL)
                                (consUU_c31
                                  (Word_c12 "alert" NULL)
                                  (consUU_c31
                                    (Word_c12 "choke" NULL)
                                    (consUU_c31
                                      (Word_c12 "split" NULL)
                                      (consUU_c31
                                        (Word_c12 "rhyme" NULL)
                                        (consUU_c31
                                          (Word_c12 "muddy" NULL)
                                          (consUU_c31
                                            (Word_c12 "plant" NULL) nilUU_c30))))))))))))))))))))
  in
  ln __v504953 ⇒
    let r_v504954 = (ln __v504955 ⇒ rand(0, 19)) NULL in
    (match r_v504954 with
     | Between_c4 n_v504956 __v504957 pf_v504958 ⇒
       match ((((get_atclo_i148) NULL) n_v504956) words_v504952) NULL with
       | SPairUUU_c39 w_v504959 __v504960 ⇒ ln __v504961 ⇒ w_v504959
       end
     end) NULL

val rand_wordclo_i149 = fn __v504962 ⇒ rand_word_i66(__v504962)

fun server_loop_i67(ans_v504963, repeat_v504964, c_v504965) =
  (let __v504966 = repeat_v504964 in
   if __v504966 then
     let repeat_v504967 = __v504966.-1 in
     fn c_v504968 ⇒
       ln __v504969 ⇒
         let __v504970 = (ln __v504971 ⇒ recv(c_v504968)) NULL in
         (match __v504970 with
          | (guess_v504972, c_v504973) ⇒
            let b_v504974 = eqw_i54(ans_v504963, guess_v504972) in
            ln __v504975 ⇒
              let c_v504976 =
                ((fn x_v504977 ⇒
                    ln __v504978 ⇒ send(c_v504973, x_v504977))
                   b_v504974)
                  NULL
              in
              let c_v504979 =
                ((fn x_v504980 ⇒ ln __v504981 ⇒ c_v504976) NULL) NULL
              in
              ((if b_v504974 then
                  ln c_v504982 __v504983 ⇒
                    let __v504984 = c_v504982 in NULL
                else
                  ln c_v504985 __v504986 ⇒
                    let c_v504987 =
                      ((fn x_v504988 ⇒
                          ln __v504989 ⇒ send(c_v504985, x_v504988))
                         wordle_diff_i53(ans_v504963, guess_v504972))
                        NULL
                    in
                    let c_v504990 =
                      ((fn x_v504991 ⇒ ln __v504992 ⇒ c_v504987) NULL)
                        NULL
                    in
                    (server_loop_i67(ans_v504963, repeat_v504967, c_v504990))
                      NULL)
                 c_v504979)
                NULL
          end) NULL
   else
     fn c_v504993 ⇒
       ln __v504994 ⇒
         let c_v504995 =
           ((fn x_v504996 ⇒ ln __v504997 ⇒ send(c_v504993, x_v504996))
              ans_v504963)
             NULL
         in
         let c_v504998 =
           ((fn x_v504999 ⇒ ln __v505000 ⇒ c_v504995) NULL) NULL
         in (ln __v505001 ⇒ let __v505002 = c_v504998 in NULL) NULL)
    c_v504965

val server_loopclo_i150 =
  fn ans_v505003 repeat_v505004 c_v505005 ⇒
    server_loop_i67(ans_v505003, repeat_v505004, c_v505005)

fun server_i68(c_v505006) =
  let repeat_v505007 = 6 in
  ln __v505008 ⇒
    let ans_v505009 = (rand_word_i66(NULL)) NULL in
    let c_v505010 = ((fn x_v505011 ⇒ ln __v505012 ⇒ c_v505006) NULL) NULL
    in
    let c_v505013 =
      ((fn x_v505014 ⇒ ln __v505015 ⇒ send(c_v505010, x_v505014))
         repeat_v505007)
        NULL
    in (server_loop_i67(ans_v505009, repeat_v505007, c_v505013)) NULL

val serverclo_i151 = fn c_v505016 ⇒ server_i68(c_v505016)

main =
  (ln __v505017 ⇒
     let c_v505018 =
       (ln __v505019 ⇒ fork c_v505020 in (server_i68(c_v505020)) NULL) NULL
     in
     let c0_v505021 =
       (ln __v505022 ⇒
          fork c0_v505023 in
            (ln __v505024 ⇒
               let __v505025 = (ln __v505026 ⇒ recv(c0_v505023)) NULL in
               (match __v505025 with
                | (c_v505027, c0_v505028) ⇒
                  ln __v505029 ⇒
                    let __v505030 = (player_i63(c_v505027)) NULL in
                    let c0_v505031 =
                      ((fn x_v505032 ⇒
                          ln __v505033 ⇒ send(c0_v505028, x_v505032))
                         NULL)
                        NULL
                    in
                    (ln __v505034 ⇒ let __v505035 = c0_v505031 in NULL)
                      NULL
                end) NULL)
              NULL)
         NULL
     in
     let c0_v505036 =
       ((ln x_v505037 __v505038 ⇒ send(c0_v505021, x_v505037)) c_v505018)
         NULL
     in
     let __v505039 = (ln __v505040 ⇒ recv(c0_v505036)) NULL in
     (match __v505039 with
      | (__v505041, c0_v505042) ⇒ ln __v505043 ⇒ close(c0_v505042)
      end) NULL)
    NULL

trans23 success--------------------------

fun andb_i2(b1_v506218, b2_v506219) = if b1_v506218 then
                                        b2_v506219
                                      else
                                        0

val andbclo_i98 =
  fn b1_v506220 b2_v506221 ⇒ andb_i2(b1_v506220, b2_v506221)

fun orb_i3(b1_v506222, b2_v506223) = if b1_v506222 then
                                       1
                                     else
                                       b2_v506223

val orbclo_i99 = fn b1_v506224 b2_v506225 ⇒ orb_i3(b1_v506224, b2_v506225)

fun notb_i4(b_v506226) = if b_v506226 then
                           0
                         else
                           1

val notbclo_i100 = fn b_v506227 ⇒ notb_i4(b_v506227)

fun compareb_i5(b1_v506228, b2_v506229) =
  if b1_v506228 then
    if b2_v506229 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v506229 then
      LT_c1
    else
      EQ_c3

val comparebclo_i101 =
  fn b1_v506230 b2_v506231 ⇒ compareb_i5(b1_v506230, b2_v506231)

fun lten_i6(x_v506232, y_v506233) =
  if x_v506232 then
    if y_v506233 then
      lten_i6(x_v506232.-1, y_v506233.-1)
    else
      0
  else
    1

val ltenclo_i102 = fn x_v506234 y_v506235 ⇒ lten_i6(x_v506234, y_v506235)

fun ltn_i7(x_v506236, y_v506237) = lten_i6(x_v506236.+1, y_v506237)

val ltnclo_i103 = fn x_v506238 y_v506239 ⇒ ltn_i7(x_v506238, y_v506239)

fun gten_i8(x_v506240, y_v506241) = lten_i6(y_v506241, x_v506240)

val gtenclo_i104 = fn x_v506242 y_v506243 ⇒ gten_i8(x_v506242, y_v506243)

fun gtn_i9(x_v506244, y_v506245) = ltn_i7(y_v506245, x_v506244)

val gtnclo_i105 = fn x_v506246 y_v506247 ⇒ gtn_i9(x_v506246, y_v506247)

fun eqn_i10(x_v506248, y_v506249) =
  if x_v506248 then
    if y_v506249 then
      eqn_i10(x_v506248.-1, y_v506249.-1)
    else
      0
  else
    if y_v506249 then
      0
    else
      1

val eqnclo_i106 = fn x_v506250 y_v506251 ⇒ eqn_i10(x_v506250, y_v506251)

fun comparen_i11(n1_v506252, n2_v506253) =
  if n1_v506252 then
    if n2_v506253 then
      comparen_i11(n1_v506252.-1, n2_v506253.-1)
    else
      GT_c2
  else
    if n2_v506253 then
      LT_c1
    else
      EQ_c3

val comparenclo_i107 =
  fn n1_v506254 n2_v506255 ⇒ comparen_i11(n1_v506254, n2_v506255)

fun pred_i12(x_v506256) = if x_v506256 then
                            x_v506256.-1
                          else
                            0

val predclo_i108 = fn x_v506257 ⇒ pred_i12(x_v506257)

fun addn_i13(x_v506258, y_v506259) =
  if x_v506258 then
    addn_i13(x_v506258.-1, y_v506259).+1
  else
    y_v506259

val addnclo_i109 = fn x_v506260 y_v506261 ⇒ addn_i13(x_v506260, y_v506261)

fun subn_i14(x_v506262, y_v506263) =
  if y_v506263 then
    subn_i14(pred_i12(x_v506262), y_v506263.-1)
  else
    x_v506262

val subnclo_i110 = fn x_v506264 y_v506265 ⇒ subn_i14(x_v506264, y_v506265)

fun muln_i15(x_v506266, y_v506267) =
  if x_v506266 then
    addn_i13(y_v506267, muln_i15(x_v506266.-1, y_v506267))
  else
    0

val mulnclo_i111 = fn x_v506268 y_v506269 ⇒ muln_i15(x_v506268, y_v506269)

fun divn_i16(x_v506270, y_v506271) =
  if ltn_i7(x_v506270, y_v506271) then
    0
  else
    divn_i16(subn_i14(x_v506270, y_v506271), y_v506271).+1

val divnclo_i112 = fn x_v506272 y_v506273 ⇒ divn_i16(x_v506272, y_v506273)

fun modn_i17(x_v506274, y_v506275) =
  subn_i14(x_v506274, muln_i15(divn_i16(x_v506274, y_v506275), y_v506275))

val modnclo_i113 = fn x_v506276 y_v506277 ⇒ modn_i17(x_v506276, y_v506277)

fun eqc_i18(c1_v506278, c2_v506279) =
  match c1_v506278 with
  | Char_c5 n1_v506280 ⇒
    match c2_v506279 with
    | Char_c5 n2_v506281 ⇒ eqn_i10(n1_v506280, n2_v506281)
    end
  end

val eqcclo_i114 =
  fn c1_v506282 c2_v506283 ⇒ eqc_i18(c1_v506282, c2_v506283)

fun comparec_i19(c1_v506284, c2_v506285) =
  match c1_v506284 with
  | Char_c5 n1_v506286 ⇒
    match c2_v506285 with
    | Char_c5 n2_v506287 ⇒ comparen_i11(n1_v506286, n2_v506287)
    end
  end

val comparecclo_i115 =
  fn c1_v506288 c2_v506289 ⇒ comparec_i19(c1_v506288, c2_v506289)

fun cats_i20(s1_v506290, s2_v506291) =
  match s1_v506290 with
  | EmptyString_c6  ⇒ s2_v506291
  | String_c7 c_v506292 s1_v506293 ⇒
    (String_c7 c_v506292 cats_i20(s1_v506293, s2_v506291))
  end

val catsclo_i116 =
  fn s1_v506294 s2_v506295 ⇒ cats_i20(s1_v506294, s2_v506295)

fun strlen_i21(s_v506296) =
  match s_v506296 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v506297 s_v506298 ⇒ strlen_i21(s_v506298).+1
  end

val strlenclo_i117 = fn s_v506299 ⇒ strlen_i21(s_v506299)

fun eqs_i22(s1_v506300, s2_v506301) =
  match s1_v506300 with
  | EmptyString_c6  ⇒
    match s2_v506301 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v506302 __v506303 ⇒ 0
    end
  | String_c7 c1_v506304 s1_v506305 ⇒
    match s2_v506301 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v506306 s2_v506307 ⇒
      andb_i2(eqc_i18(c1_v506304, c2_v506306),
              eqs_i22(s1_v506305, s2_v506307))
    end
  end

val eqsclo_i118 =
  fn s1_v506308 s2_v506309 ⇒ eqs_i22(s1_v506308, s2_v506309)

fun compares_i23(s1_v506310, s2_v506311) =
  match s1_v506310 with
  | EmptyString_c6  ⇒
    match s2_v506311 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v506312 __v506313 ⇒ LT_c1
    end
  | String_c7 c1_v506314 s1_v506315 ⇒
    match s2_v506311 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v506316 s2_v506317 ⇒
      match comparec_i19(c1_v506314, c2_v506316) with
      | EQ_c3  ⇒ compares_i23(s1_v506315, s2_v506317) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i119 =
  fn s1_v506318 s2_v506319 ⇒ compares_i23(s1_v506318, s2_v506319)

fun and_thenUUU_i79(A_v506320, B_v506321, opt_v506322, f_v506323) =
  match opt_v506322 with
  | NoneUU_c22  ⇒ NoneUU_c22
  | SomeUU_c23 x_v506324 ⇒ (f_v506323) x_v506324
  end

val and_thenUUUclo_i120 =
  fn A_v506325 B_v506326 opt_v506327 ⇒
    ln f_v506328 ⇒
      and_thenUUU_i79(A_v506325, B_v506326, opt_v506327, f_v506328)

fun and_thenUUL_i78(A_v506329, B_v506330, opt_v506331, f_v506332) =
  match opt_v506331 with
  | NoneUL_c20  ⇒ NoneUL_c20
  | SomeUL_c21 x_v506333 ⇒ (f_v506332) x_v506333
  end

val and_thenUULclo_i121 =
  fn A_v506334 B_v506335 opt_v506336 ⇒
    ln f_v506337 ⇒
      and_thenUUL_i78(A_v506334, B_v506335, opt_v506336, f_v506337)

fun and_thenULU_i77(A_v506338, B_v506339, opt_v506340, f_v506341) =
  match opt_v506340 with
  | NoneUU_c22  ⇒ NoneLU_c18
  | SomeUU_c23 x_v506342 ⇒ (f_v506341) x_v506342
  end

val and_thenULUclo_i122 =
  fn A_v506343 B_v506344 opt_v506345 ⇒
    ln f_v506346 ⇒
      and_thenULU_i77(A_v506343, B_v506344, opt_v506345, f_v506346)

fun and_thenULL_i76(A_v506347, B_v506348, opt_v506349, f_v506350) =
  match opt_v506349 with
  | NoneUL_c20  ⇒ NoneLL_c16
  | SomeUL_c21 x_v506351 ⇒ (f_v506350) x_v506351
  end

val and_thenULLclo_i123 =
  fn A_v506352 B_v506353 opt_v506354 ⇒
    ln f_v506355 ⇒
      and_thenULL_i76(A_v506352, B_v506353, opt_v506354, f_v506355)

fun and_thenLUL_i74(A_v506356, B_v506357, opt_v506358, f_v506359) =
  match opt_v506358 with
  | NoneLL_c16  ⇒ NoneUL_c20
  | SomeLL_c17 x_v506360 ⇒ (f_v506359) x_v506360
  end

val and_thenLULclo_i124 =
  fn A_v506361 B_v506362 opt_v506363 ⇒
    ln f_v506364 ⇒
      and_thenLUL_i74(A_v506361, B_v506362, opt_v506363, f_v506364)

fun and_thenLLL_i72(A_v506365, B_v506366, opt_v506367, f_v506368) =
  match opt_v506367 with
  | NoneLL_c16  ⇒ NoneLL_c16
  | SomeLL_c17 x_v506369 ⇒ (f_v506368) x_v506369
  end

val and_thenLLLclo_i125 =
  fn A_v506370 B_v506371 opt_v506372 ⇒
    ln f_v506373 ⇒
      and_thenLLL_i72(A_v506370, B_v506371, opt_v506372, f_v506373)

fun lenUU_i87(A_v506374, xs_v506375) =
  match xs_v506375 with
  | nilUU_c30  ⇒ (0, nilUU_c30)
  | consUU_c31 x_v506376 xs_v506377 ⇒
    match lenUU_i87(NULL, xs_v506377) with
    | (n_v506378, xs_v506379) ⇒
      (n_v506378.+1, (consUU_c31 x_v506376 xs_v506379))
    end
  end

val lenUUclo_i126 =
  fn A_v506380 xs_v506381 ⇒ lenUU_i87(A_v506380, xs_v506381)

fun lenUL_i86(A_v506382, xs_v506383) =
  match xs_v506383 with
  | nilUL_c28  ⇒ (0, nilUL_c28)
  | consUL_c29 x_v506384 xs_v506385 ⇒
    match lenUL_i86(NULL, xs_v506385) with
    | (n_v506386, xs_v506387) ⇒
      (n_v506386.+1, (consUL_c29 x_v506384 xs_v506387))
    end
  end

val lenULclo_i127 =
  fn A_v506388 xs_v506389 ⇒ lenUL_i86(A_v506388, xs_v506389)

fun lenLL_i84(A_v506390, xs_v506391) =
  match xs_v506391 with
  | nilLL_c24  ⇒ (0, nilLL_c24)
  | consLL_c25 x_v506392 xs_v506393 ⇒
    match lenLL_i84(NULL, xs_v506393) with
    | (n_v506394, xs_v506395) ⇒
      (n_v506394.+1, (consLL_c25 x_v506392 xs_v506395))
    end
  end

val lenLLclo_i128 =
  fn A_v506396 xs_v506397 ⇒ lenLL_i84(A_v506396, xs_v506397)

fun appendUU_i91(A_v506398, xs_v506399, ys_v506400) =
  match xs_v506399 with
  | nilUU_c30  ⇒ ys_v506400
  | consUU_c31 x_v506401 xs_v506402 ⇒
    (consUU_c31 x_v506401 appendUU_i91(NULL, xs_v506402, ys_v506400))
  end

val appendUUclo_i129 =
  fn A_v506403 xs_v506404 ⇒
    ln ys_v506405 ⇒ appendUU_i91(A_v506403, xs_v506404, ys_v506405)

fun appendUL_i90(A_v506406, xs_v506407, ys_v506408) =
  match xs_v506407 with
  | nilUL_c28  ⇒ ys_v506408
  | consUL_c29 x_v506409 xs_v506410 ⇒
    (consUL_c29 x_v506409 appendUL_i90(NULL, xs_v506410, ys_v506408))
  end

val appendULclo_i130 =
  fn A_v506411 xs_v506412 ⇒
    ln ys_v506413 ⇒ appendUL_i90(A_v506411, xs_v506412, ys_v506413)

fun appendLL_i88(A_v506414, xs_v506415, ys_v506416) =
  match xs_v506415 with
  | nilLL_c24  ⇒ ys_v506416
  | consLL_c25 x_v506417 xs_v506418 ⇒
    (consLL_c25 x_v506417 appendLL_i88(NULL, xs_v506418, ys_v506416))
  end

val appendLLclo_i131 =
  fn A_v506419 xs_v506420 ⇒
    ln ys_v506421 ⇒ appendLL_i88(A_v506419, xs_v506420, ys_v506421)

fun readline_i34(__v506422) =
  ln __v506423 ⇒
    let ch_v506424 = open stdin in
    let ch_v506425 = send(ch_v506424, 1) in
    let __v506426 = recv(ch_v506425) in
    match __v506426 with
    | (s_v506427, ch_v506428) ⇒
      let ch_v506429 = send(ch_v506428, 0) in s_v506427
    end

val readlineclo_i132 = fn __v506430 ⇒ readline_i34(__v506430)

fun print_i35(s_v506431) =
  ln __v506432 ⇒
    let ch_v506433 = open stdout in
    let ch_v506434 = send(ch_v506433, 1) in
    let ch_v506435 = send(ch_v506434, s_v506431) in
    let ch_v506436 = send(ch_v506435, 0) in NULL

val printclo_i133 = fn s_v506437 ⇒ print_i35(s_v506437)

fun prerr_i36(s_v506438) =
  ln __v506439 ⇒
    let ch_v506440 = open stderr in
    let ch_v506441 = send(ch_v506440, 1) in
    let ch_v506442 = send(ch_v506441, s_v506438) in
    let ch_v506443 = send(ch_v506442, 0) in NULL

val prerrclo_i134 = fn s_v506444 ⇒ prerr_i36(s_v506444)

val digits_i37 =
  (consUU_c31
    "0"
    (consUU_c31
      "1"
      (consUU_c31
        "2"
        (consUU_c31
          "3"
          (consUU_c31
            "4"
            (consUU_c31
              "5"
              (consUU_c31
                "6"
                (consUU_c31 "7" (consUU_c31 "8" (consUU_c31 "9" nilUU_c30))))))))))

fun get_at_i38(A_v506445, n_v506446, xs_v506447, a_v506448) =
  if n_v506446 then
    match xs_v506447 with
    | nilUU_c30  ⇒ a_v506448
    | consUU_c31 __v506449 xs_v506450 ⇒
      get_at_i38(NULL, n_v506446.-1, xs_v506450, a_v506448)
    end
  else
    match xs_v506447 with
    | nilUU_c30  ⇒ a_v506448 | consUU_c31 x_v506451 __v506452 ⇒ x_v506451
    end

val get_atclo_i135 =
  fn A_v506453 n_v506454 xs_v506455 a_v506456 ⇒
    get_at_i38(A_v506453, n_v506454, xs_v506455, a_v506456)

fun string_of_digit_i39(n_v506457) =
  get_at_i38(NULL, n_v506457, digits_i37, EmptyString_c6)

val string_of_digitclo_i136 = fn n_v506458 ⇒ string_of_digit_i39(n_v506458)

fun string_of_nat_i40(n_v506459) =
  let s_v506460 = string_of_digit_i39(modn_i17(n_v506459, 10)) in
  let n_v506461 = divn_i16(n_v506459, 10) in
  if ltn_i7(0, n_v506461) then
    cats_i20(string_of_nat_i40(n_v506461), s_v506460)
  else
    s_v506460

val string_of_natclo_i137 = fn n_v506462 ⇒ string_of_nat_i40(n_v506462)

fun digit_of_char_i41(c_v506463) =
  if eqc_i18(c_v506463, '0') then
    (SomeUL_c21 0)
  else
    if eqc_i18(c_v506463, '1') then
      (SomeUL_c21 1)
    else
      if eqc_i18(c_v506463, '2') then
        (SomeUL_c21 2)
      else
        if eqc_i18(c_v506463, '3') then
          (SomeUL_c21 3)
        else
          if eqc_i18(c_v506463, '4') then
            (SomeUL_c21 4)
          else
            if eqc_i18(c_v506463, '5') then
              (SomeUL_c21 5)
            else
              if eqc_i18(c_v506463, '6') then
                (SomeUL_c21 6)
              else
                if eqc_i18(c_v506463, '7') then
                  (SomeUL_c21 7)
                else
                  if eqc_i18(c_v506463, '8') then
                    (SomeUL_c21 8)
                  else
                    if eqc_i18(c_v506463, '9') then
                      (SomeUL_c21 9)
                    else
                      NoneUL_c20

val digit_of_charclo_i138 = fn c_v506464 ⇒ digit_of_char_i41(c_v506464)

fun nat_of_string_loop_i42(s_v506465, acc_v506466) =
  match s_v506465 with
  | EmptyString_c6  ⇒ (SomeUL_c21 acc_v506466)
  | String_c7 c_v506467 s_v506468 ⇒
    match digit_of_char_i41(c_v506467) with
    | NoneUL_c20  ⇒ NoneUL_c20
    | SomeUL_c21 n_v506469 ⇒
      nat_of_string_loop_i42(s_v506468,
                             addn_i13(muln_i15(acc_v506466, 10), n_v506469))
    end
  end

val nat_of_string_loopclo_i139 =
  fn s_v506470 acc_v506471 ⇒ nat_of_string_loop_i42(s_v506470, acc_v506471)

fun nat_of_string_i43(s_v506472) = nat_of_string_loop_i42(s_v506472, 0)

val nat_of_stringclo_i140 = fn s_v506473 ⇒ nat_of_string_i43(s_v506473)

fun contains_i50(c_v506474, s_v506475) =
  match s_v506475 with
  | EmptyString_c6  ⇒ 0
  | String_c7 c0_v506476 s_v506477 ⇒
    if eqc_i18(c_v506474, c0_v506476) then
      1
    else
      contains_i50(c_v506474, s_v506477)
  end

val containsclo_i141 =
  fn c_v506478 s_v506479 ⇒ contains_i50(c_v506478, s_v506479)

fun string_diff_i51(ans_v506480, s1_v506481, s2_v506482) =
  match s1_v506481 with
  | EmptyString_c6  ⇒ EmptyString_c6
  | String_c7 c1_v506483 s1_v506484 ⇒
    match s2_v506482 with
    | EmptyString_c6  ⇒ EmptyString_c6
    | String_c7 c2_v506485 s2_v506486 ⇒
      if eqc_i18(c1_v506483, c2_v506485) then
        cats_i20("Y", string_diff_i51(ans_v506480, s1_v506484, s2_v506486))
      else
        if contains_i50(c2_v506485, ans_v506480) then
          cats_i20("I", string_diff_i51(ans_v506480, s1_v506484, s2_v506486))
        else
          cats_i20("N", string_diff_i51(ans_v506480, s1_v506484, s2_v506486))
    end
  end

val string_diffclo_i142 =
  fn ans_v506487 s1_v506488 s2_v506489 ⇒
    string_diff_i51(ans_v506487, s1_v506488, s2_v506489)

fun wordle_diff_i53(ans_v506490, guess_v506491) =
  match ans_v506490 with
  | Word_c12 ans_v506492 pf1_v506493 ⇒
    match guess_v506491 with
    | Word_c12 guess_v506494 pf2_v506495 ⇒
      (Word_c12
        string_diff_i51(ans_v506492, ans_v506492, guess_v506494) NULL)
    end
  end

val wordle_diffclo_i143 =
  fn ans_v506496 guess_v506497 ⇒
    wordle_diff_i53(ans_v506496, guess_v506497)

fun eqw_i54(w1_v506498, w2_v506499) =
  match w1_v506498 with
  | Word_c12 s1_v506500 __v506501 ⇒
    match w2_v506499 with
    | Word_c12 s2_v506502 __v506503 ⇒ eqs_i22(s1_v506500, s2_v506502)
    end
  end

val eqwclo_i144 =
  fn w1_v506504 w2_v506505 ⇒ eqw_i54(w1_v506504, w2_v506505)

fun read_word_i61(__v506506) =
  ln __v506507 ⇒
    let s_v506508 = (readline_i34(NULL)) NULL in
    ((if eqn_i10(strlen_i21(s_v506508), 5) then
        fn e_v506509 ⇒ ln __v506510 ⇒ (Word_c12 s_v506508 NULL)
      else
        fn __v506511 ⇒
          ln __v506512 ⇒
            let __v506513 =
              (print_i35("please input a word with length of 5\n")) NULL
            in (read_word_i61(NULL)) NULL)
       NULL)
      NULL

val read_wordclo_i145 = fn __v506514 ⇒ read_word_i61(__v506514)

fun player_loop_i62(ans_v506515, repeat_v506516, c_v506517) =
  (if repeat_v506516 then
     fn c_v506518 ⇒
       ln __v506519 ⇒
         let guess_v506520 = (read_word_i61(NULL)) NULL in
         let c_v506521 = send(c_v506518, guess_v506520) in
         let __v506522 = recv(c_v506521) in
         match __v506522 with
         | (b_v506523, c_v506524) ⇒
           match (NULL, c_v506524) with
           | (pf_v506525, c_v506526) ⇒
             ((if b_v506523 then
                 ln c_v506527 __v506528 ⇒
                   let __v506529 = (print_i35("You Win!\n")) NULL in
                   close(c_v506527)
               else
                 ln c_v506530 __v506531 ⇒
                   let __v506532 = recv(c_v506530) in
                   match __v506532 with
                   | (diff_v506533, c_v506534) ⇒
                     match (NULL, c_v506534) with
                     | (pf_v506535, c_v506536) ⇒
                       match diff_v506533 with
                       | Word_c12 s_v506537 __v506538 ⇒
                         let __v506539 =
                           (print_i35(cats_i20(cats_i20(cats_i20(cats_i20(
                                                                 "Incorrect, hint: ",
                                                                 s_v506537),
                                                                 ". You have "),
                                                        string_of_nat_i40(
                                                        repeat_v506516.-1)),
                                               " more tries.\n")))
                             NULL
                         in
                         (player_loop_i62(NULL, repeat_v506516.-1, c_v506536))
                           NULL
                       end
                     end
                   end)
                c_v506526)
               NULL
           end
         end
   else
     fn c_v506540 ⇒
       ln __v506541 ⇒
         let __v506542 = recv(c_v506540) in
         match __v506542 with
         | (ans_v506543, c_v506544) ⇒
           match (NULL, c_v506544) with
           | (pf_v506545, c_v506546) ⇒
             match ans_v506543 with
             | Word_c12 s_v506547 __v506548 ⇒
               let __v506549 =
                 (print_i35(cats_i20(cats_i20("You Lose! The answer is ",
                                              s_v506547),
                                     ".\n")))
                   NULL
               in close(c_v506546)
             end
           end
         end)
    c_v506517

val player_loopclo_i146 =
  fn ans_v506550 repeat_v506551 c_v506552 ⇒
    player_loop_i62(ans_v506550, repeat_v506551, c_v506552)

fun player_i63(c_v506553) =
  ln __v506554 ⇒
    match (NULL, c_v506553) with
    | (ans_v506555, c_v506556) ⇒
      let __v506557 = recv(c_v506556) in
      match __v506557 with
      | (repeat_v506558, c_v506559) ⇒
        let __v506560 = (print_i35("Wordle Game\n")) NULL in
        let __v506561 =
          (print_i35("Please guess a word of length 5.\n")) NULL
        in
        let __v506562 =
          (print_i35(cats_i20(cats_i20("You have ",
                                       string_of_nat_i40(repeat_v506558)),
                              " tries.\n")))
            NULL
        in (player_loop_i62(NULL, repeat_v506558, c_v506559)) NULL
      end
    end

val playerclo_i147 = fn c_v506563 ⇒ player_i63(c_v506563)

fun get_at_i65(A_v506564, n_v506565, xs_v506566) =
  match xs_v506566 with
  | nilUU_c30  ⇒ fn e_v506567 ⇒ NULL
  | consUU_c31 x_v506568 xs_v506569 ⇒
    if n_v506565 then
      fn e_v506570 ⇒
        match ((((get_atclo_i148) NULL) n_v506565.-1) xs_v506569) NULL with
        | SPairUUU_c39 x0_v506571 pf_v506572 ⇒
          (SPairUUU_c39 x0_v506571 NULL)
        end
    else
      fn e_v506573 ⇒ (SPairUUU_c39 x_v506568 NULL)
  end

val get_atclo_i148 =
  fn A_v506574 n_v506575 xs_v506576 ⇒
    get_at_i65(A_v506574, n_v506575, xs_v506576)

fun rand_word_i66(__v506577) =
  ln __v506578 ⇒
    let r_v506579 = rand(0, 19) in
    match r_v506579 with
    | Between_c4 n_v506580 __v506581 pf_v506582 ⇒
      match ((((get_atclo_i148) NULL) n_v506580)
               (consUU_c31
                 (Word_c12 "route" NULL)
                 (consUU_c31
                   (Word_c12 "crash" NULL)
                   (consUU_c31
                     (Word_c12 "clown" NULL)
                     (consUU_c31
                       (Word_c12 "shaky" NULL)
                       (consUU_c31
                         (Word_c12 "vegan" NULL)
                         (consUU_c31
                           (Word_c12 "power" NULL)
                           (consUU_c31
                             (Word_c12 "trust" NULL)
                             (consUU_c31
                               (Word_c12 "enjoy" NULL)
                               (consUU_c31
                                 (Word_c12 "brain" NULL)
                                 (consUU_c31
                                   (Word_c12 "adopt" NULL)
                                   (consUU_c31
                                     (Word_c12 "tower" NULL)
                                     (consUU_c31
                                       (Word_c12 "shade" NULL)
                                       (consUU_c31
                                         (Word_c12 "delay" NULL)
                                         (consUU_c31
                                           (Word_c12 "twist" NULL)
                                           (consUU_c31
                                             (Word_c12 "alert" NULL)
                                             (consUU_c31
                                               (Word_c12 "choke" NULL)
                                               (consUU_c31
                                                 (Word_c12 "split" NULL)
                                                 (consUU_c31
                                                   (Word_c12 "rhyme" NULL)
                                                   (consUU_c31
                                                     (Word_c12 "muddy" NULL)
                                                     (consUU_c31
                                                       (Word_c12
                                                         "plant" NULL)
                                                       nilUU_c30)))))))))))))))))))))
              NULL with
      | SPairUUU_c39 w_v506583 __v506584 ⇒ w_v506583
      end
    end

val rand_wordclo_i149 = fn __v506585 ⇒ rand_word_i66(__v506585)

fun server_loop_i67(ans_v506586, repeat_v506587, c_v506588) =
  (if repeat_v506587 then
     fn c_v506589 ⇒
       ln __v506590 ⇒
         let __v506591 = recv(c_v506589) in
         match __v506591 with
         | (guess_v506592, c_v506593) ⇒
           let b_v506594 = eqw_i54(ans_v506586, guess_v506592) in
           let c_v506595 = send(c_v506593, b_v506594) in
           ((if b_v506594 then
               ln c_v506596 __v506597 ⇒ NULL
             else
               ln c_v506598 __v506599 ⇒
                 let c_v506600 =
                   let x_v506601 =
                     wordle_diff_i53(ans_v506586, guess_v506592)
                   in send(c_v506598, x_v506601)
                 in
                 (server_loop_i67(ans_v506586, repeat_v506587.-1, c_v506600))
                   NULL)
              c_v506595)
             NULL
         end
   else
     fn c_v506602 ⇒
       ln __v506603 ⇒ let c_v506604 = send(c_v506602, ans_v506586) in NULL)
    c_v506588

val server_loopclo_i150 =
  fn ans_v506605 repeat_v506606 c_v506607 ⇒
    server_loop_i67(ans_v506605, repeat_v506606, c_v506607)

fun server_i68(c_v506608) =
  ln __v506609 ⇒
    let ans_v506610 = (rand_word_i66(NULL)) NULL in
    let c_v506611 = send(c_v506608, 6) in
    (server_loop_i67(ans_v506610, 6, c_v506611)) NULL

val serverclo_i151 = fn c_v506612 ⇒ server_i68(c_v506612)

main =
  let c_v506613 = fork c_v506614 in (server_i68(c_v506614)) NULL in
  let c0_v506615 =
    fork c0_v506616 in
      let __v506617 = recv(c0_v506616) in
      match __v506617 with
      | (c_v506618, c0_v506619) ⇒
        let __v506620 = (player_i63(c_v506618)) NULL in
        let c0_v506621 = send(c0_v506619, NULL) in NULL
      end
  in
  let c0_v506622 = send(c0_v506615, c_v506613) in
  let __v506623 = recv(c0_v506622) in
  match __v506623 with
  | (__v506624, c0_v506625) ⇒ close(c0_v506625)
  end

trans3e success--------------------------

trans34 success--------------------------

