program split‹t› (zs : ((list‹_, t›)
(nat))) : (∃ (_ : ((list‹_, t›) (nat))) ⊗ ((list‹_, t›)
(nat))) = match zs as _ in _ with nil  ⇒ ⟨nil, nil⟩ | cons x
zs ⇒ match zs as _ in _ with nil  ⇒ ⟨((cons) (x)
(nil)), nil⟩ | cons y zs ⇒ let ⟨xs, ys⟩ = ((split)
(zs)) in ⟨((cons) (x) (xs)), ((cons) (y)
(ys))⟩

program merge‹t› (xs : ((list‹_, t›)
(nat))) : (∀ (_ : ((list‹_, t›) (nat))) ⊸ ((list‹_, t›)
(nat))) = (ln (ys : _) ⇒ match xs as _ in _ with nil  ⇒ ys | cons x
xs0 ⇒ match ys as _ in _ with nil  ⇒ ((cons) (x) (xs0)) | cons y
ys0 ⇒ match ((lten) (x) (y)) as _ in _ with true ⇒ ((cons) (x)
(((merge) (xs0) (((cons) (y) (ys0)))))) | false ⇒ ((cons) (y)
(((merge) (((cons) (x) (xs0))) (ys0)))))

program msort‹t› (zs : ((list‹_, t›) (nat))) : ((list‹_, t›)
(nat)) = match zs as _ in _ with nil  ⇒ nil | cons x
zs ⇒ match zs as _ in _ with nil  ⇒ ((cons) (x) (nil)) | cons y
zs ⇒ let ⟨xs, ys⟩ = ((split)
(((cons) (x) (((cons) (y) (zs)))))) in ((merge) (((msort) (xs)))
(((msort) (ys))))

logical cmsort_ch‹t› : L = ch‹!(_ : ((list‹_, t›)
(nat))) → end›

program cmsort_worker‹t› (n : nat) (zs : ((list‹_, t›)
(nat))) : (∀ (_ : cmsort_ch‹t›) ⊸ IO unit) = (ln (c : _) ⇒ match n as _ in _ with O ⇒ let c ⇐ (
(send c)
(((msort) (zs)))) in close c | S n ⇒ match zs as _ in _ with nil  ⇒ let c ⇐ (
(send c) (nil)) in close c | cons z0
zs0 ⇒ match zs0 as _ in _ with nil  ⇒ let c ⇐ ((send c)
(nil)) in close c | cons z1 zs1 ⇒ let ⟨xs0, ys0⟩ = ((split)
(((cons) (z0) (((cons) (z1) (zs1)))))) in let r1 ⇐ fork (r1 : cmsort_ch) in (
(cmsort_worker) (n) (xs0)
(r1)) in let r2 ⇐ fork (r2 : cmsort_ch) in ((cmsort_worker) (n) (ys0)
(r2)) in let ⟨xs1, r1⟩ ⇐ recv r1 in let ⟨ys1, r2⟩ ⇐ recv r2 in let zs = (
(merge) (xs1) (ys1)) in let c ⇐ ((send c)
(zs)) in let _ ⇐ close r1 in let _ ⇐ close r2 in close c)

program cmsort‹t› (zs0 : ((list‹_, t›) (nat))) : IO ((list‹_, t›)
(nat)) = let c ⇐ fork (c : cmsort_ch) in ((cmsort_worker) (O.+4) (zs0)
(c)) in let ⟨zs1, c⟩ ⇐ recv c in let _ ⇐ close c in return zs1

program mkList‹t› (n : nat) : ((list‹_, t›)
(nat)) = match n as _ in _ with O ⇒ nil | S n0 ⇒ ((cons) (n)
(((mkList) (n0))))

program free‹› {A : U} (ls : ((list‹_, L›)
(A))) : unit = match ls as _ in _ with nil  ⇒ () | cons _ ls ⇒ ((free)
(_)
(ls))

program main‹› : IO unit = let test = ((mkList‹L›)
(O.+400000)) in let sorted = ((msort) (test)) in let _ = ((free) (_)
(sorted)) in return ()

parsing success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v228 : bool) (b2_v229 : bool) ⇒
    match b1_v228 as __v230 in ??1 with
    | true ⇒ b2_v229 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v233 : bool) (b2_v234 : bool) ⇒
    match b1_v233 as __v235 in ??2 with
    | true ⇒ true | false ⇒ b2_v234
    end

program notb_i3 : bool → bool =
  fn (b_v237 : bool) ⇒
    match b_v237 as __v238 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v241 : nat) (y_v242 : nat) ⇒
    match x_v241 as __v243 in ??4 with
    | O ⇒ true
    | S x_v244 ⇒
      match y_v242 as __v245 in ??5 with
      | O ⇒ false | S y_v246 ⇒ (lten_i4 x_v244 y_v246)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v249 : nat) (y_v250 : nat) ⇒
    match x_v249 as __v251 in ??6 with
    | O ⇒
      match y_v250 as __v252 in ??8 with
      | O ⇒ true | S __v253 ⇒ false
      end
    | S x_v254 ⇒
      match y_v250 as __v255 in ??7 with
      | O ⇒ true | S y_v256 ⇒ (gten_i5 x_v254 y_v256)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v259 : nat) (y_v260 : nat) ⇒
    match x_v259 as __v261 in ??9 with
    | O ⇒
      match y_v260 as __v262 in ??11 with
      | O ⇒ false | S y_v263 ⇒ true
      end
    | S x_v264 ⇒
      match y_v260 as __v265 in ??10 with
      | O ⇒ false | S y_v266 ⇒ (ltn_i6 x_v264 y_v266)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v269 : nat) (y_v270 : nat) ⇒
    match x_v269 as __v271 in ??12 with
    | O ⇒ false
    | S x_v272 ⇒
      match y_v270 as __v273 in ??13 with
      | O ⇒ true | S y_v274 ⇒ (gtn_i7 x_v272 y_v274)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v277 : nat) (y_v278 : nat) ⇒
    match x_v277 as __v279 in ??14 with
    | O ⇒
      match y_v278 as __v280 in ??16 with
      | O ⇒ true | S __v281 ⇒ false
      end
    | S x_v282 ⇒
      match y_v278 as __v283 in ??15 with
      | O ⇒ false | S y_v284 ⇒ (eqn_i8 x_v282 y_v284)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v286 : nat) ⇒
    match x_v286 as __v287 in ??17 with
    | O ⇒ 0 | S x_v288 ⇒ x_v288
    end

program addn_i10 : nat → nat → nat =
  fn (x_v291 : nat) (y_v292 : nat) ⇒
    match x_v291 as __v293 in ??18 with
    | O ⇒ y_v292 | S x_v294 ⇒ (addn_i10 x_v294 y_v292).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v297 : nat) (y_v298 : nat) ⇒
    match y_v298 as __v299 in ??19 with
    | O ⇒ x_v297 | S y_v300 ⇒ (subn_i11 (pred_i9 x_v297) y_v300)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v303 : nat) (y_v304 : nat) ⇒
    match x_v303 as __v305 in ??20 with
    | O ⇒ 0 | S x_v306 ⇒ (addn_i10 y_v304 (muln_i12 x_v306 y_v304))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v309 : nat) (y_v310 : nat) ⇒
    match (ltn_i6 x_v309 y_v310) as __v311 in ??21 with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v309 y_v310) y_v310).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v314 : nat) (y_v315 : nat) ⇒
    (subn_i11 x_v314 (muln_i12 (divn_i13 x_v314 y_v315) y_v315))

inductive char_d1 : U =
| Char_c1 of (n_v316 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v317 : char_d1) (s_v318 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v321 : string_d2) (s2_v322 : string_d2) ⇒
    match s1_v321 as __v323 in ??22 with
    | EmptyString_c2  ⇒ s2_v322
    | String_c3 c_v324 s1_v325 ⇒
      (String_c3‹› c_v324 (cats_i15 s1_v325 s2_v322))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v327 : string_d2) ⇒
    match s_v327 as __v328 in ??23 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v329 s_v330 ⇒ (strlen_i16 s_v330).+1
    end

inductive list_d3 ‹s_s331, t_s332›
  (A_v333 : Type‹s_s331›) : Type‹t_s332›
=
| nil_c4 of
    ‹s_s334, t_s335› (A_v336 : Type‹s_s334›)
    : (list_d3‹s_s334, t_s335› A_v336)
| cons_c5 of
    ‹s_s337, t_s338› (A_v339 : Type‹s_s337›) (hd_v340 : A_v339)
    (tl_v341 : (list_d3‹s_s337, t_s338› A_v339))
    : (list_d3‹s_s337, t_s338› A_v339)

program len_i17 ‹s_s342, t_s343› :
  ∀ {A_v344 : Type‹s_s342›} →
    (list_d3‹??24, t_s343› A_v344) →
      nat ⊗ (list_d3‹??25, t_s343› A_v344)
=
  fn {A_v347 : Type‹s_s342›}
     (xs_v348 : (list_d3‹??24, t_s343› A_v347)) ⇒
    match xs_v348 as __v349 in ??26 with
    | nil_c4  ⇒ ⟨0, nil_c4‹??36, ??35›⟩
    | cons_c5 x_v350 xs_v351 ⇒
      match (len_i17‹??29, ??28› ??27 xs_v351) as __v352 in ??30 with
      | ⟨n_v353, xs_v354⟩ ⇒
        ⟨n_v353.+1, (cons_c5‹??33, ??32› x_v350 xs_v354)⟩
      end
    end

program append_i18 ‹s_s355, t_s356› :
  ∀ {A_v357 : Type‹s_s355›} →
    (list_d3‹??37, t_s356› A_v357) →
      (list_d3‹??38, t_s356› A_v357) ⊸ (list_d3‹??40, ??39› A_v357)
=
  fn {A_v360 : Type‹s_s355›}
     (xs_v361 : (list_d3‹??37, t_s356› A_v360)) ⇒
    ln (ys_v362 : ??41) ⇒
      match xs_v361 as __v363 in ??42 with
      | nil_c4  ⇒ ys_v362
      | cons_c5 x_v364 xs_v365 ⇒
        (cons_c5‹??48, ??47›
          x_v364 (append_i18‹??45, ??44› ??43 xs_v365 ys_v362))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v367 : unit) ⇒
    ⇑(b_v368 : bool) ⇒
      match b_v368 as __v369 in ??49 with
      | true ⇒ ⇓(__v370 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v372 : unit) ⇒
    ⇑(b_v373 : bool) ⇒
      match b_v373 as __v374 in ??50 with
      | true ⇒ ⇑(__v375 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v377 : unit) ⇒
    ⇑(b_v378 : bool) ⇒
      match b_v378 as __v379 in ??51 with
      | true ⇒ ⇑(__v380 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v382 : unit) ⇒
    let ch_v383 ⇐ open stdin in
    let ch_v384 ⇐ (send ch_v383 true) in
    let __v385 ⇐ recv ch_v384 in
    match __v385 as __v386 in ??52 with
    | ⟨s_v387, ch_v388⟩ ⇒
      let ch_v389 ⇐ (send ch_v388 false) in
      let __v390 ⇐ close ch_v389 in return s_v387
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v392 : string_d2) ⇒
    let ch_v393 ⇐ open stdout in
    let ch_v394 ⇐ (send ch_v393 true) in
    let ch_v395 ⇐ (send ch_v394 s_v392) in
    let ch_v396 ⇐ (send ch_v395 false) in close ch_v396

program prerr_i27 : string_d2 → IO unit =
  fn (s_v398 : string_d2) ⇒
    let ch_v399 ⇐ open stderr in
    let ch_v400 ⇐ (send ch_v399 true) in
    let ch_v401 ⇐ (send ch_v400 s_v398) in
    let ch_v402 ⇐ (send ch_v401 false) in close ch_v402

program split_i28 ‹t_s403› :
  (list_d3‹??53, t_s403› nat) →
    (list_d3‹??54, t_s403› nat) ⊗ (list_d3‹??55, t_s403› nat)
=
  fn (zs_v406 : (list_d3‹??53, t_s403› nat)) ⇒
    match zs_v406 as __v407 in ??56 with
    | nil_c4  ⇒ ⟨nil_c4‹??77, ??76›, nil_c4‹??80, ??79›⟩
    | cons_c5 x_v408 zs_v409 ⇒
      match zs_v409 as __v410 in ??57 with
      | nil_c4  ⇒
        ⟨(cons_c5‹??71, ??70› x_v408 nil_c4‹??68, ??67›), nil_c4‹??74,
        ??73›⟩
      | cons_c5 y_v411 zs_v412 ⇒
        let __v413 = (split_i28‹??58› zs_v412) in
        match __v413 as __v414 in ??65 with
        | ⟨xs_v415, ys_v416⟩ ⇒
          ⟨(cons_c5‹??61, ??60› x_v408 xs_v415), (cons_c5‹??64,
                                                       ??63›
                                                         y_v411 ys_v416)⟩
        end
      end
    end

program merge_i29 ‹t_s417› :
  (list_d3‹??81, t_s417› nat) →
    (list_d3‹??82, t_s417› nat) ⊸ (list_d3‹??83, t_s417› nat)
=
  fn (xs_v420 : (list_d3‹??81, t_s417› nat)) ⇒
    ln (ys_v421 : ??84) ⇒
      match xs_v420 as __v422 in ??85 with
      | nil_c4  ⇒ ys_v421
      | cons_c5 x_v423 xs0_v424 ⇒
        match ys_v421 as __v425 in ??86 with
        | nil_c4  ⇒ (cons_c5‹??104, ??103› x_v423 xs0_v424)
        | cons_c5 y_v426 ys0_v427 ⇒
          match (lten_i4 x_v423 y_v426) as __v428 in ??87 with
          | true ⇒
            (cons_c5‹??101, ??100›
              x_v423
              (merge_i29‹??98›
                xs0_v424 (cons_c5‹??97, ??96› y_v426 ys0_v427)))
          | false ⇒
            (cons_c5‹??94, ??93›
              y_v426
              (merge_i29‹??91›
                (cons_c5‹??90, ??89› x_v423 xs0_v424) ys0_v427))
          end
        end
      end

program msort_i30 ‹t_s429› :
  (list_d3‹??105, t_s429› nat) → (list_d3‹??106, t_s429› nat)
=
  fn (zs_v431 : (list_d3‹??105, t_s429› nat)) ⇒
    match zs_v431 as __v432 in ??107 with
    | nil_c4  ⇒ nil_c4‹??128, ??127›
    | cons_c5 x_v433 zs_v434 ⇒
      match zs_v434 as __v435 in ??108 with
      | nil_c4  ⇒
        (cons_c5‹??125, ??124› x_v433 nil_c4‹??122, ??121›)
      | cons_c5 y_v436 zs_v437 ⇒
        let __v438 =
          (split_i28‹??115›
            (cons_c5‹??114, ??113›
              x_v433 (cons_c5‹??111, ??110› y_v436 zs_v437)))
        in
        match __v438 as __v439 in ??119 with
        | ⟨xs_v440, ys_v441⟩ ⇒
          (merge_i29‹??118›
            (msort_i30‹??117› xs_v440) (msort_i30‹??116› ys_v441))
        end
      end
    end

logical cmsort_ch_i31 ‹t_s442› : L =
  ch⟨⇑(__v443 : (list_d3‹??129, t_s442› nat)) ⇒ end⟩

program cmsort_worker_i32 ‹t_s444› :
  nat →
    (list_d3‹??130, t_s444› nat) →
      cmsort_ch_i31‹t_s444› ⊸ IO unit
=
  fn (n_v448 : nat) (zs_v449 : (list_d3‹??130, t_s444› nat)) ⇒
    ln (c_v450 : ??131) ⇒
      match n_v448 as __v451 in ??132 with
      | O ⇒
        let c_v452 ⇐ (send c_v450 (msort_i30‹??156› zs_v449)) in
        close c_v452
      | S n_v453 ⇒
        match zs_v449 as __v454 in ??133 with
        | nil_c4  ⇒
          let c_v455 ⇐ (send c_v450 nil_c4‹??155, ??154›) in
          close c_v455
        | cons_c5 z0_v456 zs0_v457 ⇒
          match zs0_v457 as __v458 in ??134 with
          | nil_c4  ⇒
            let c_v459 ⇐ (send c_v450 nil_c4‹??152, ??151›) in
            close c_v459
          | cons_c5 z1_v460 zs1_v461 ⇒
            let __v462 =
              (split_i28‹??141›
                (cons_c5‹??140, ??139›
                  z0_v456 (cons_c5‹??137, ??136› z1_v460 zs1_v461)))
            in
            match __v462 as __v463 in ??149 with
            | ⟨xs0_v464, ys0_v465⟩ ⇒
              let r1_v466 ⇐
                fork (r1_v467 : cmsort_ch_i31‹??142›) in
                  (cmsort_worker_i32‹??143› n_v453 xs0_v464 r1_v467)
              in
              let r2_v468 ⇐
                fork (r2_v469 : cmsort_ch_i31‹??144›) in
                  (cmsort_worker_i32‹??145› n_v453 ys0_v465 r2_v469)
              in
              let __v470 ⇐ recv r1_v466 in
              match __v470 as __v471 in ??148 with
              | ⟨xs1_v472, r1_v473⟩ ⇒
                let __v474 ⇐ recv r2_v468 in
                match __v474 as __v475 in ??147 with
                | ⟨ys1_v476, r2_v477⟩ ⇒
                  let zs_v478 = (merge_i29‹??146› xs1_v472 ys1_v476) in
                  let c_v479 ⇐ (send c_v450 zs_v478) in
                  let __v480 ⇐ close r1_v473 in
                  let __v481 ⇐ close r2_v477 in close c_v479
                end
              end
            end
          end
        end
      end

program cmsort_i33 ‹t_s482› :
  (list_d3‹??157, t_s482› nat) → IO (list_d3‹??158, t_s482› nat)
=
  fn (zs0_v484 : (list_d3‹??157, t_s482› nat)) ⇒
    let c_v485 ⇐
      fork (c_v486 : cmsort_ch_i31‹??159›) in
        (cmsort_worker_i32‹??160› 4 zs0_v484 c_v486)
    in
    let __v487 ⇐ recv c_v485 in
    match __v487 as __v488 in ??161 with
    | ⟨zs1_v489, c_v490⟩ ⇒
      let __v491 ⇐ close c_v490 in return zs1_v489
    end

program mkList_i34 ‹t_s492› : nat → (list_d3‹??162, t_s492› nat) =
  fn (n_v494 : nat) ⇒
    match n_v494 as __v495 in ??163 with
    | O ⇒ nil_c4‹??170, ??169›
    | S n0_v496 ⇒
      (cons_c5‹??167, ??166› n_v494 (mkList_i34‹??164› n0_v496))
    end

program free_i35 :
  ∀ {A_v497 : U} → (list_d3‹??171, L› A_v497) → unit
=
  fn {A_v499 : U} (ls_v500 : (list_d3‹??171, L› A_v499)) ⇒
    match ls_v500 as __v501 in ??172 with
    | nil_c4  ⇒ () | cons_c5 __v502 ls_v503 ⇒ (free_i35 ??173 ls_v503)
    end

program main_i36 : IO unit =
  let test_v504 = (mkList_i34‹L› 400000) in
  let sorted_v505 = (msort_i30‹??174› test_v504) in
  let __v506 = (free_i35 ??175 sorted_v505) in return ()

trans01 success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v12955 : bool) (b2_v12956 : bool) ⇒
    match b1_v12955 as __v12957 in bool with
    | true ⇒ b2_v12956 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v12960 : bool) (b2_v12961 : bool) ⇒
    match b1_v12960 as __v12962 in bool with
    | true ⇒ true | false ⇒ b2_v12961
    end

program notb_i3 : bool → bool =
  fn (b_v12964 : bool) ⇒
    match b_v12964 as __v12965 in bool with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v12968 : nat) (y_v12969 : nat) ⇒
    match x_v12968 as __v12970 in bool with
    | O ⇒ true
    | S x_v12971 ⇒
      match y_v12969 as __v12972 in bool with
      | O ⇒ false | S y_v12973 ⇒ (lten_i4 x_v12971 y_v12973)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v12976 : nat) (y_v12977 : nat) ⇒
    match x_v12976 as __v12978 in bool with
    | O ⇒
      match y_v12977 as __v12979 in bool with
      | O ⇒ true | S __v12980 ⇒ false
      end
    | S x_v12981 ⇒
      match y_v12977 as __v12982 in bool with
      | O ⇒ true | S y_v12983 ⇒ (gten_i5 x_v12981 y_v12983)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v12986 : nat) (y_v12987 : nat) ⇒
    match x_v12986 as __v12988 in bool with
    | O ⇒
      match y_v12987 as __v12989 in bool with
      | O ⇒ false | S y_v12990 ⇒ true
      end
    | S x_v12991 ⇒
      match y_v12987 as __v12992 in bool with
      | O ⇒ false | S y_v12993 ⇒ (ltn_i6 x_v12991 y_v12993)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v12996 : nat) (y_v12997 : nat) ⇒
    match x_v12996 as __v12998 in bool with
    | O ⇒ false
    | S x_v12999 ⇒
      match y_v12997 as __v13000 in bool with
      | O ⇒ true | S y_v13001 ⇒ (gtn_i7 x_v12999 y_v13001)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v13004 : nat) (y_v13005 : nat) ⇒
    match x_v13004 as __v13006 in bool with
    | O ⇒
      match y_v13005 as __v13007 in bool with
      | O ⇒ true | S __v13008 ⇒ false
      end
    | S x_v13009 ⇒
      match y_v13005 as __v13010 in bool with
      | O ⇒ false | S y_v13011 ⇒ (eqn_i8 x_v13009 y_v13011)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v13013 : nat) ⇒
    match x_v13013 as __v13014 in nat with
    | O ⇒ 0 | S x_v13015 ⇒ x_v13015
    end

program addn_i10 : nat → nat → nat =
  fn (x_v13018 : nat) (y_v13019 : nat) ⇒
    match x_v13018 as __v13020 in nat with
    | O ⇒ y_v13019 | S x_v13021 ⇒ (addn_i10 x_v13021 y_v13019).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v13024 : nat) (y_v13025 : nat) ⇒
    match y_v13025 as __v13026 in nat with
    | O ⇒ x_v13024 | S y_v13027 ⇒ (subn_i11 (pred_i9 x_v13024) y_v13027)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v13030 : nat) (y_v13031 : nat) ⇒
    match x_v13030 as __v13032 in nat with
    | O ⇒ 0
    | S x_v13033 ⇒ (addn_i10 y_v13031 (muln_i12 x_v13033 y_v13031))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v13036 : nat) (y_v13037 : nat) ⇒
    match (ltn_i6 x_v13036 y_v13037) as __v13038 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i13 (subn_i11 x_v13036 y_v13037) y_v13037).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v13041 : nat) (y_v13042 : nat) ⇒
    (subn_i11 x_v13041 (muln_i12 (divn_i13 x_v13041 y_v13042) y_v13042))

inductive char_d1 : U =
| Char_c1 of (n_v13043 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v13044 : char_d1) (s_v13045 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v13048 : string_d2) (s2_v13049 : string_d2) ⇒
    match s1_v13048 as __v13050 in string_d2 with
    | EmptyString_c2  ⇒ s2_v13049
    | String_c3 c_v13051 s1_v13052 ⇒
      (String_c3‹› c_v13051 (cats_i15 s1_v13052 s2_v13049))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v13054 : string_d2) ⇒
    match s_v13054 as __v13055 in nat with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v13056 s_v13057 ⇒ (strlen_i16 s_v13057).+1
    end

inductive list_d3 ‹s_s13058, t_s13059›
  (A_v13060 : Type‹s_s13058›) : Type‹t_s13059›
=
| nil_c4 of
    ‹s_s13061, t_s13062› (A_v13063 : Type‹s_s13061›)
    : (list_d3‹s_s13061, t_s13062› A_v13063)
| cons_c5 of
    ‹s_s13064, t_s13065› (A_v13066 : Type‹s_s13064›)
    (hd_v13067 : A_v13066)
    (tl_v13068 : (list_d3‹s_s13064, t_s13065› A_v13066))
    : (list_d3‹s_s13064, t_s13065› A_v13066)

program len_i17 ‹s_s13069, t_s13070› :
  ∀ {A_v13071 : Type‹s_s13069›} →
    (list_d3‹s_s13069, t_s13070› A_v13071) →
      nat ⊗ (list_d3‹s_s13069, t_s13070› A_v13071)
=
  fn {A_v13074 : Type‹s_s13069›}
     (xs_v13075 : (list_d3‹s_s13069, t_s13070› A_v13074)) ⇒
    match xs_v13075 as __v13076 in
      nat ⊗ (list_d3‹s_s13069, t_s13070› A_v13074) with
    | nil_c4  ⇒ ⟨0, nil_c4‹s_s13069, t_s13070›⟩
    | cons_c5 x_v13078 xs_v13079 ⇒
      match (len_i17‹s_s13069, t_s13070› A_v13074 xs_v13079) as __v13080 in
        nat ⊗ (list_d3‹s_s13069, t_s13070› A_v13074) with
      | ⟨n_v13082, xs_v13083⟩ ⇒
        ⟨n_v13082.+1, (cons_c5‹s_s13069, t_s13070› x_v13078 xs_v13083)⟩
      end
    end

program append_i18 ‹s_s13084, t_s13085› :
  ∀ {A_v13086 : Type‹s_s13084›} →
    (list_d3‹s_s13084, t_s13085› A_v13086) →
      (list_d3‹s_s13084, t_s13085› A_v13086) ⊸
        (list_d3‹s_s13084, t_s13085› A_v13086)
=
  fn {A_v13089 : Type‹s_s13084›}
     (xs_v13090 : (list_d3‹s_s13084, t_s13085› A_v13089)) ⇒
    ln (ys_v13091 : (list_d3‹s_s13084, t_s13085› A_v13089)) ⇒
      match xs_v13090 as __v13092 in
        (list_d3‹s_s13084, t_s13085› A_v13089) with
      | nil_c4  ⇒ ys_v13091
      | cons_c5 x_v13093 xs_v13094 ⇒
        (cons_c5‹s_s13084, t_s13085›
          x_v13093
          (append_i18‹s_s13084, t_s13085› A_v13089 xs_v13094 ys_v13091))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v13096 : unit) ⇒
    ⇑(b_v13097 : bool) ⇒
      match b_v13097 as __v13098 in proto with
      | true ⇒ ⇓(__v13099 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v13101 : unit) ⇒
    ⇑(b_v13102 : bool) ⇒
      match b_v13102 as __v13103 in proto with
      | true ⇒ ⇑(__v13104 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v13106 : unit) ⇒
    ⇑(b_v13107 : bool) ⇒
      match b_v13107 as __v13108 in proto with
      | true ⇒ ⇑(__v13109 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v13111 : unit) ⇒
    let ch_v13112 ⇐ open stdin in
    let ch_v13113 ⇐ (send ch_v13112 true) in
    let __v13114 ⇐ recv ch_v13113 in
    match __v13114 as __v13115 in IO string_d2 with
    | ⟨s_v13116, ch_v13117⟩ ⇒
      let ch_v13118 ⇐ (send ch_v13117 false) in
      let __v13119 ⇐ close ch_v13118 in return s_v13116
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v13121 : string_d2) ⇒
    let ch_v13122 ⇐ open stdout in
    let ch_v13123 ⇐ (send ch_v13122 true) in
    let ch_v13124 ⇐ (send ch_v13123 s_v13121) in
    let ch_v13125 ⇐ (send ch_v13124 false) in close ch_v13125

program prerr_i27 : string_d2 → IO unit =
  fn (s_v13127 : string_d2) ⇒
    let ch_v13128 ⇐ open stderr in
    let ch_v13129 ⇐ (send ch_v13128 true) in
    let ch_v13130 ⇐ (send ch_v13129 s_v13127) in
    let ch_v13131 ⇐ (send ch_v13130 false) in close ch_v13131

program split_i28 ‹t_s13132› :
  (list_d3‹U, t_s13132› nat) →
    (list_d3‹U, t_s13132› nat) ⊗ (list_d3‹U, t_s13132› nat)
=
  fn (zs_v13135 : (list_d3‹U, t_s13132› nat)) ⇒
    match zs_v13135 as __v13136 in
      (list_d3‹U, t_s13132› nat) ⊗ (list_d3‹U, t_s13132› nat) with
    | nil_c4  ⇒ ⟨nil_c4‹U, t_s13132›, nil_c4‹U, t_s13132›⟩
    | cons_c5 x_v13138 zs_v13139 ⇒
      match zs_v13139 as __v13140 in
        (list_d3‹U, t_s13132› nat) ⊗ (list_d3‹U, t_s13132› nat) with
      | nil_c4  ⇒
        ⟨(cons_c5‹U, t_s13132› x_v13138 nil_c4‹U, t_s13132›), nil_c4‹U,
        t_s13132›⟩
      | cons_c5 y_v13142 zs_v13143 ⇒
        let __v13144 = (split_i28‹t_s13132› zs_v13143) in
        match __v13144 as __v13145 in
          (list_d3‹U, t_s13132› nat) ⊗ (list_d3‹U, t_s13132› nat) with
        | ⟨xs_v13147, ys_v13148⟩ ⇒
          ⟨(cons_c5‹U, t_s13132› x_v13138 xs_v13147), (cons_c5‹U,
                                                            t_s13132›
                                                              y_v13142
                                                              ys_v13148)⟩
        end
      end
    end

program merge_i29 ‹t_s13149› :
  (list_d3‹U, t_s13149› nat) →
    (list_d3‹U, t_s13149› nat) ⊸ (list_d3‹U, t_s13149› nat)
=
  fn (xs_v13152 : (list_d3‹U, t_s13149› nat)) ⇒
    ln (ys_v13153 : (list_d3‹U, t_s13149› nat)) ⇒
      match xs_v13152 as __v13154 in (list_d3‹U, t_s13149› nat) with
      | nil_c4  ⇒ ys_v13153
      | cons_c5 x_v13155 xs0_v13156 ⇒
        match ys_v13153 as __v13157 in (list_d3‹U, t_s13149› nat) with
        | nil_c4  ⇒ (cons_c5‹U, t_s13149› x_v13155 xs0_v13156)
        | cons_c5 y_v13158 ys0_v13159 ⇒
          match (lten_i4 x_v13155 y_v13158) as __v13160 in
            (list_d3‹U, t_s13149› nat) with
          | true ⇒
            (cons_c5‹U, t_s13149›
              x_v13155
              (merge_i29‹t_s13149›
                xs0_v13156 (cons_c5‹U, t_s13149› y_v13158 ys0_v13159)))
          | false ⇒
            (cons_c5‹U, t_s13149›
              y_v13158
              (merge_i29‹t_s13149›
                (cons_c5‹U, t_s13149› x_v13155 xs0_v13156) ys0_v13159))
          end
        end
      end

program msort_i30 ‹t_s13161› :
  (list_d3‹U, t_s13161› nat) → (list_d3‹U, t_s13161› nat)
=
  fn (zs_v13163 : (list_d3‹U, t_s13161› nat)) ⇒
    match zs_v13163 as __v13164 in (list_d3‹U, t_s13161› nat) with
    | nil_c4  ⇒ nil_c4‹U, t_s13161›
    | cons_c5 x_v13165 zs_v13166 ⇒
      match zs_v13166 as __v13167 in (list_d3‹U, t_s13161› nat) with
      | nil_c4  ⇒
        (cons_c5‹U, t_s13161› x_v13165 nil_c4‹U, t_s13161›)
      | cons_c5 y_v13168 zs_v13169 ⇒
        let __v13170 =
          (split_i28‹t_s13161›
            (cons_c5‹U, t_s13161›
              x_v13165 (cons_c5‹U, t_s13161› y_v13168 zs_v13169)))
        in
        match __v13170 as __v13171 in (list_d3‹U, t_s13161› nat) with
        | ⟨xs_v13172, ys_v13173⟩ ⇒
          (merge_i29‹t_s13161›
            (msort_i30‹t_s13161› xs_v13172)
            (msort_i30‹t_s13161› ys_v13173))
        end
      end
    end

logical cmsort_ch_i31 ‹t_s13174› : L =
  ch⟨⇑(__v13175 : (list_d3‹U, t_s13174› nat)) ⇒ end⟩

program cmsort_worker_i32 ‹t_s13176› :
  nat →
    (list_d3‹U, t_s13176› nat) →
      cmsort_ch_i31‹t_s13176› ⊸ IO unit
=
  fn (n_v13180 : nat) (zs_v13181 : (list_d3‹U, t_s13176› nat)) ⇒
    ln (c_v13182 : cmsort_ch_i31‹t_s13176›) ⇒
      match n_v13180 as __v13183 in IO unit with
      | O ⇒
        let c_v13184 ⇐ (send c_v13182 (msort_i30‹t_s13176› zs_v13181))
        in close c_v13184
      | S n_v13185 ⇒
        match zs_v13181 as __v13186 in IO unit with
        | nil_c4  ⇒
          let c_v13187 ⇐ (send c_v13182 nil_c4‹U, t_s13176›) in
          close c_v13187
        | cons_c5 z0_v13188 zs0_v13189 ⇒
          match zs0_v13189 as __v13190 in IO unit with
          | nil_c4  ⇒
            let c_v13191 ⇐ (send c_v13182 nil_c4‹U, t_s13176›) in
            close c_v13191
          | cons_c5 z1_v13192 zs1_v13193 ⇒
            let __v13194 =
              (split_i28‹t_s13176›
                (cons_c5‹U, t_s13176›
                  z0_v13188 (cons_c5‹U, t_s13176› z1_v13192 zs1_v13193)))
            in
            match __v13194 as __v13195 in IO unit with
            | ⟨xs0_v13196, ys0_v13197⟩ ⇒
              let r1_v13198 ⇐
                fork (r1_v13199 : cmsort_ch_i31‹t_s13176›) in
                  (cmsort_worker_i32‹t_s13176›
                    n_v13185 xs0_v13196 r1_v13199)
              in
              let r2_v13200 ⇐
                fork (r2_v13201 : cmsort_ch_i31‹t_s13176›) in
                  (cmsort_worker_i32‹t_s13176›
                    n_v13185 ys0_v13197 r2_v13201)
              in
              let __v13202 ⇐ recv r1_v13198 in
              match __v13202 as __v13203 in IO unit with
              | ⟨xs1_v13204, r1_v13205⟩ ⇒
                let __v13206 ⇐ recv r2_v13200 in
                match __v13206 as __v13207 in IO unit with
                | ⟨ys1_v13208, r2_v13209⟩ ⇒
                  let zs_v13210 =
                    (merge_i29‹t_s13176› xs1_v13204 ys1_v13208)
                  in
                  let c_v13211 ⇐ (send c_v13182 zs_v13210) in
                  let __v13212 ⇐ close r1_v13205 in
                  let __v13213 ⇐ close r2_v13209 in close c_v13211
                end
              end
            end
          end
        end
      end

program cmsort_i33 ‹t_s13214› :
  (list_d3‹U, t_s13214› nat) → IO (list_d3‹U, t_s13214› nat)
=
  fn (zs0_v13216 : (list_d3‹U, t_s13214› nat)) ⇒
    let c_v13217 ⇐
      fork (c_v13218 : cmsort_ch_i31‹t_s13214›) in
        (cmsort_worker_i32‹t_s13214› 4 zs0_v13216 c_v13218)
    in
    let __v13219 ⇐ recv c_v13217 in
    match __v13219 as __v13220 in IO (list_d3‹U, t_s13214› nat) with
    | ⟨zs1_v13221, c_v13222⟩ ⇒
      let __v13223 ⇐ close c_v13222 in return zs1_v13221
    end

program mkList_i34 ‹t_s13224› : nat → (list_d3‹U, t_s13224› nat) =
  fn (n_v13226 : nat) ⇒
    match n_v13226 as __v13227 in (list_d3‹U, t_s13224› nat) with
    | O ⇒ nil_c4‹U, t_s13224›
    | S n0_v13228 ⇒
      (cons_c5‹U, t_s13224›
        n_v13226 (mkList_i34‹t_s13224› n0_v13228))
    end

program free_i35 :
  ∀ {A_v13229 : U} → (list_d3‹U, L› A_v13229) → unit
=
  fn {A_v13231 : U} (ls_v13232 : (list_d3‹U, L› A_v13231)) ⇒
    match ls_v13232 as __v13233 in unit with
    | nil_c4  ⇒ ()
    | cons_c5 __v13234 ls_v13235 ⇒ (free_i35 A_v13231 ls_v13235)
    end

program main_i36 : IO unit =
  let test_v13236 = (mkList_i34‹L› 400000) in
  let sorted_v13237 = (msort_i30‹L› test_v13236) in
  let __v13238 = (free_i35 nat sorted_v13237) in return ()

trans1e success--------------------------

def andb_i1 =
  fn b1_v13708 b2_v13709 ⇒
    match b1_v13708 with
    | true ⇒ b2_v13709 | false ⇒ false
    end

def orb_i2 =
  fn b1_v13710 b2_v13711 ⇒
    match b1_v13710 with
    | true ⇒ true | false ⇒ b2_v13711
    end

def notb_i3 =
  fn b_v13712 ⇒ match b_v13712 with
                  | true ⇒ false | false ⇒ true
                  end

def lten_i4 =
  fn x_v13713 y_v13714 ⇒
    match x_v13713 with
    | O ⇒ true
    | S x_v13715 ⇒
      match y_v13714 with
      | O ⇒ false | S y_v13716 ⇒ ((lten_i4 x_v13715) y_v13716)
      end
    end

def gten_i5 =
  fn x_v13717 y_v13718 ⇒
    match x_v13717 with
    | O ⇒ match y_v13718 with
            | O ⇒ true | S __v13719 ⇒ false
            end
    | S x_v13720 ⇒
      match y_v13718 with
      | O ⇒ true | S y_v13721 ⇒ ((gten_i5 x_v13720) y_v13721)
      end
    end

def ltn_i6 =
  fn x_v13722 y_v13723 ⇒
    match x_v13722 with
    | O ⇒ match y_v13723 with
            | O ⇒ false | S y_v13724 ⇒ true
            end
    | S x_v13725 ⇒
      match y_v13723 with
      | O ⇒ false | S y_v13726 ⇒ ((ltn_i6 x_v13725) y_v13726)
      end
    end

def gtn_i7 =
  fn x_v13727 y_v13728 ⇒
    match x_v13727 with
    | O ⇒ false
    | S x_v13729 ⇒
      match y_v13728 with
      | O ⇒ true | S y_v13730 ⇒ ((gtn_i7 x_v13729) y_v13730)
      end
    end

def eqn_i8 =
  fn x_v13731 y_v13732 ⇒
    match x_v13731 with
    | O ⇒ match y_v13732 with
            | O ⇒ true | S __v13733 ⇒ false
            end
    | S x_v13734 ⇒
      match y_v13732 with
      | O ⇒ false | S y_v13735 ⇒ ((eqn_i8 x_v13734) y_v13735)
      end
    end

def pred_i9 =
  fn x_v13736 ⇒ match x_v13736 with
                  | O ⇒ 0 | S x_v13737 ⇒ x_v13737
                  end

def addn_i10 =
  fn x_v13738 y_v13739 ⇒
    match x_v13738 with
    | O ⇒ y_v13739 | S x_v13740 ⇒ ((addn_i10 x_v13740) y_v13739).+1
    end

def subn_i11 =
  fn x_v13741 y_v13742 ⇒
    match y_v13742 with
    | O ⇒ x_v13741
    | S y_v13743 ⇒ ((subn_i11 (pred_i9 x_v13741)) y_v13743)
    end

def muln_i12 =
  fn x_v13744 y_v13745 ⇒
    match x_v13744 with
    | O ⇒ 0
    | S x_v13746 ⇒ ((addn_i10 y_v13745) ((muln_i12 x_v13746) y_v13745))
    end

def divn_i13 =
  fn x_v13747 y_v13748 ⇒
    match ((ltn_i6 x_v13747) y_v13748) with
    | true ⇒ 0
    | false ⇒ ((divn_i13 ((subn_i11 x_v13747) y_v13748)) y_v13748).+1
    end

def modn_i14 =
  fn x_v13749 y_v13750 ⇒
    ((subn_i11 x_v13749)
      ((muln_i12 ((divn_i13 x_v13749) y_v13750)) y_v13750))

data char_d1 =
| Char_c1 of size(1)

data string_d2 =
| EmptyString_c2 of size(0) | String_c3 of size(2)

def cats_i15 =
  fn s1_v13751 s2_v13752 ⇒
    match s1_v13751 with
    | EmptyString_c2  ⇒ s2_v13752
    | String_c3 c_v13753 s1_v13754 ⇒
      (String_c3 c_v13753 ((cats_i15 s1_v13754) s2_v13752))
    end

def strlen_i16 =
  fn s_v13755 ⇒
    match s_v13755 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v13756 s_v13757 ⇒ (strlen_i16 s_v13757).+1
    end

data listUU_d7 =
| nilUU_c12 of size(0) | consUU_c13 of size(2)

data listUL_d6 =
| nilUL_c10 of size(0) | consUL_c11 of size(2)

data listLU_d5 =
| nilLU_c8 of size(0)

data listLL_d4 =
| nilLL_c6 of size(0) | consLL_c7 of size(2)

def lenUU_i40 =
  fn A_v13758 xs_v13759 ⇒
    match xs_v13759 with
    | nilUU_c12  ⇒ (0, nilUU_c12)
    | consUU_c13 x_v13760 xs_v13761 ⇒
      match ((lenUU_i40 NULL) xs_v13761) with
      | (n_v13762, xs_v13763) ⇒
        (n_v13762.+1, (consUU_c13 x_v13760 xs_v13763))
      end
    end

def lenUL_i39 =
  fn A_v13764 xs_v13765 ⇒
    match xs_v13765 with
    | nilUL_c10  ⇒ (0, nilUL_c10)
    | consUL_c11 x_v13766 xs_v13767 ⇒
      match ((lenUL_i39 NULL) xs_v13767) with
      | (n_v13768, xs_v13769) ⇒
        (n_v13768.+1, (consUL_c11 x_v13766 xs_v13769))
      end
    end

def lenLL_i37 =
  fn A_v13770 xs_v13771 ⇒
    match xs_v13771 with
    | nilLL_c6  ⇒ (0, nilLL_c6)
    | consLL_c7 x_v13772 xs_v13773 ⇒
      match ((lenLL_i37 NULL) xs_v13773) with
      | (n_v13774, xs_v13775) ⇒
        (n_v13774.+1, (consLL_c7 x_v13772 xs_v13775))
      end
    end

def appendUU_i44 =
  fn A_v13776 xs_v13777 ⇒
    ln ys_v13778 ⇒
      match xs_v13777 with
      | nilUU_c12  ⇒ ys_v13778
      | consUU_c13 x_v13779 xs_v13780 ⇒
        (consUU_c13 x_v13779 (((appendUU_i44 NULL) xs_v13780) ys_v13778))
      end

def appendUL_i43 =
  fn A_v13781 xs_v13782 ⇒
    ln ys_v13783 ⇒
      match xs_v13782 with
      | nilUL_c10  ⇒ ys_v13783
      | consUL_c11 x_v13784 xs_v13785 ⇒
        (consUL_c11 x_v13784 (((appendUL_i43 NULL) xs_v13785) ys_v13783))
      end

def appendLL_i41 =
  fn A_v13786 xs_v13787 ⇒
    ln ys_v13788 ⇒
      match xs_v13787 with
      | nilLL_c6  ⇒ ys_v13788
      | consLL_c7 x_v13789 xs_v13790 ⇒
        (consLL_c7 x_v13789 (((appendLL_i41 NULL) xs_v13790) ys_v13788))
      end

def readline_i25 =
  fn __v13791 ⇒
    let ch_v13792 ⇐ open stdin in
    let ch_v13793 ⇐ (send ch_v13792 true) in
    let __v13794 ⇐ recv ch_v13793 in
    match __v13794 with
    | (s_v13795, ch_v13796) ⇒
      let ch_v13797 ⇐ (send ch_v13796 false) in
      let __v13798 ⇐ close⇑ ch_v13797 in return s_v13795
    end

def print_i26 =
  fn s_v13799 ⇒
    let ch_v13800 ⇐ open stdout in
    let ch_v13801 ⇐ (send ch_v13800 true) in
    let ch_v13802 ⇐ (send ch_v13801 s_v13799) in
    let ch_v13803 ⇐ (send ch_v13802 false) in close⇑ ch_v13803

def prerr_i27 =
  fn s_v13804 ⇒
    let ch_v13805 ⇐ open stderr in
    let ch_v13806 ⇐ (send ch_v13805 true) in
    let ch_v13807 ⇐ (send ch_v13806 s_v13804) in
    let ch_v13808 ⇐ (send ch_v13807 false) in close⇑ ch_v13808

def splitU_i46 =
  fn zs_v13809 ⇒
    match zs_v13809 with
    | nilUU_c12  ⇒ (nilUU_c12, nilUU_c12)
    | consUU_c13 x_v13810 zs_v13811 ⇒
      match zs_v13811 with
      | nilUU_c12  ⇒ ((consUU_c13 x_v13810 nilUU_c12), nilUU_c12)
      | consUU_c13 y_v13812 zs_v13813 ⇒
        let __v13814 = (splitU_i46 zs_v13813) in
        match __v13814 with
        | (xs_v13815, ys_v13816) ⇒
          ((consUU_c13 x_v13810 xs_v13815), (consUU_c13 y_v13812 ys_v13816))
        end
      end
    end

def splitL_i45 =
  fn zs_v13817 ⇒
    match zs_v13817 with
    | nilUL_c10  ⇒ (nilUL_c10, nilUL_c10)
    | consUL_c11 x_v13818 zs_v13819 ⇒
      match zs_v13819 with
      | nilUL_c10  ⇒ ((consUL_c11 x_v13818 nilUL_c10), nilUL_c10)
      | consUL_c11 y_v13820 zs_v13821 ⇒
        let __v13822 = (splitL_i45 zs_v13821) in
        match __v13822 with
        | (xs_v13823, ys_v13824) ⇒
          ((consUL_c11 x_v13818 xs_v13823), (consUL_c11 y_v13820 ys_v13824))
        end
      end
    end

def mergeU_i48 =
  fn xs_v13825 ⇒
    ln ys_v13826 ⇒
      match xs_v13825 with
      | nilUU_c12  ⇒ ys_v13826
      | consUU_c13 x_v13827 xs0_v13828 ⇒
        match ys_v13826 with
        | nilUU_c12  ⇒ (consUU_c13 x_v13827 xs0_v13828)
        | consUU_c13 y_v13829 ys0_v13830 ⇒
          match ((lten_i4 x_v13827) y_v13829) with
          | true ⇒
            (consUU_c13
              x_v13827
              ((mergeU_i48 xs0_v13828) (consUU_c13 y_v13829 ys0_v13830)))
          | false ⇒
            (consUU_c13
              y_v13829
              ((mergeU_i48 (consUU_c13 x_v13827 xs0_v13828)) ys0_v13830))
          end
        end
      end

def mergeL_i47 =
  fn xs_v13831 ⇒
    ln ys_v13832 ⇒
      match xs_v13831 with
      | nilUL_c10  ⇒ ys_v13832
      | consUL_c11 x_v13833 xs0_v13834 ⇒
        match ys_v13832 with
        | nilUL_c10  ⇒ (consUL_c11 x_v13833 xs0_v13834)
        | consUL_c11 y_v13835 ys0_v13836 ⇒
          match ((lten_i4 x_v13833) y_v13835) with
          | true ⇒
            (consUL_c11
              x_v13833
              ((mergeL_i47 xs0_v13834) (consUL_c11 y_v13835 ys0_v13836)))
          | false ⇒
            (consUL_c11
              y_v13835
              ((mergeL_i47 (consUL_c11 x_v13833 xs0_v13834)) ys0_v13836))
          end
        end
      end

def msortU_i50 =
  fn zs_v13837 ⇒
    match zs_v13837 with
    | nilUU_c12  ⇒ nilUU_c12
    | consUU_c13 x_v13838 zs_v13839 ⇒
      match zs_v13839 with
      | nilUU_c12  ⇒ (consUU_c13 x_v13838 nilUU_c12)
      | consUU_c13 y_v13840 zs_v13841 ⇒
        let __v13842 =
          (splitU_i46 (consUU_c13 x_v13838 (consUU_c13 y_v13840 zs_v13841)))
        in
        match __v13842 with
        | (xs_v13843, ys_v13844) ⇒
          ((mergeU_i48 (msortU_i50 xs_v13843)) (msortU_i50 ys_v13844))
        end
      end
    end

def msortL_i49 =
  fn zs_v13845 ⇒
    match zs_v13845 with
    | nilUL_c10  ⇒ nilUL_c10
    | consUL_c11 x_v13846 zs_v13847 ⇒
      match zs_v13847 with
      | nilUL_c10  ⇒ (consUL_c11 x_v13846 nilUL_c10)
      | consUL_c11 y_v13848 zs_v13849 ⇒
        let __v13850 =
          (splitL_i45 (consUL_c11 x_v13846 (consUL_c11 y_v13848 zs_v13849)))
        in
        match __v13850 with
        | (xs_v13851, ys_v13852) ⇒
          ((mergeL_i47 (msortL_i49 xs_v13851)) (msortL_i49 ys_v13852))
        end
      end
    end

def cmsort_workerU_i54 =
  fn n_v13853 zs_v13854 ⇒
    ln c_v13855 ⇒
      match n_v13853 with
      | O ⇒
        let c_v13856 ⇐ (send c_v13855 (msortU_i50 zs_v13854)) in
        close⇑ c_v13856
      | S n_v13857 ⇒
        match zs_v13854 with
        | nilUU_c12  ⇒
          let c_v13858 ⇐ (send c_v13855 nilUU_c12) in close⇑ c_v13858
        | consUU_c13 z0_v13859 zs0_v13860 ⇒
          match zs0_v13860 with
          | nilUU_c12  ⇒
            let c_v13861 ⇐ (send c_v13855 nilUU_c12) in close⇑ c_v13861
          | consUU_c13 z1_v13862 zs1_v13863 ⇒
            let __v13864 =
              (splitU_i46
                (consUU_c13 z0_v13859 (consUU_c13 z1_v13862 zs1_v13863)))
            in
            match __v13864 with
            | (xs0_v13865, ys0_v13866) ⇒
              let r1_v13867 ⇐
                fork r1_v13868 in
                  (((cmsort_workerU_i54 n_v13857) xs0_v13865) r1_v13868)
              in
              let r2_v13869 ⇐
                fork r2_v13870 in
                  (((cmsort_workerU_i54 n_v13857) ys0_v13866) r2_v13870)
              in
              let __v13871 ⇐ recv r1_v13867 in
              match __v13871 with
              | (xs1_v13872, r1_v13873) ⇒
                let __v13874 ⇐ recv r2_v13869 in
                match __v13874 with
                | (ys1_v13875, r2_v13876) ⇒
                  let zs_v13877 = ((mergeU_i48 xs1_v13872) ys1_v13875) in
                  let c_v13878 ⇐ (send c_v13855 zs_v13877) in
                  let __v13879 ⇐ close⇓ r1_v13873 in
                  let __v13880 ⇐ close⇓ r2_v13876 in close⇑ c_v13878
                end
              end
            end
          end
        end
      end

def cmsort_workerL_i53 =
  fn n_v13881 zs_v13882 ⇒
    ln c_v13883 ⇒
      match n_v13881 with
      | O ⇒
        let c_v13884 ⇐ (send c_v13883 (msortL_i49 zs_v13882)) in
        close⇑ c_v13884
      | S n_v13885 ⇒
        match zs_v13882 with
        | nilUL_c10  ⇒
          let c_v13886 ⇐ (send c_v13883 nilUL_c10) in close⇑ c_v13886
        | consUL_c11 z0_v13887 zs0_v13888 ⇒
          match zs0_v13888 with
          | nilUL_c10  ⇒
            let c_v13889 ⇐ (send c_v13883 nilUL_c10) in close⇑ c_v13889
          | consUL_c11 z1_v13890 zs1_v13891 ⇒
            let __v13892 =
              (splitL_i45
                (consUL_c11 z0_v13887 (consUL_c11 z1_v13890 zs1_v13891)))
            in
            match __v13892 with
            | (xs0_v13893, ys0_v13894) ⇒
              let r1_v13895 ⇐
                fork r1_v13896 in
                  (((cmsort_workerL_i53 n_v13885) xs0_v13893) r1_v13896)
              in
              let r2_v13897 ⇐
                fork r2_v13898 in
                  (((cmsort_workerL_i53 n_v13885) ys0_v13894) r2_v13898)
              in
              let __v13899 ⇐ recv r1_v13895 in
              match __v13899 with
              | (xs1_v13900, r1_v13901) ⇒
                let __v13902 ⇐ recv r2_v13897 in
                match __v13902 with
                | (ys1_v13903, r2_v13904) ⇒
                  let zs_v13905 = ((mergeL_i47 xs1_v13900) ys1_v13903) in
                  let c_v13906 ⇐ (send c_v13883 zs_v13905) in
                  let __v13907 ⇐ close⇓ r1_v13901 in
                  let __v13908 ⇐ close⇓ r2_v13904 in close⇑ c_v13906
                end
              end
            end
          end
        end
      end

def cmsortU_i56 =
  fn zs0_v13909 ⇒
    let c_v13910 ⇐
      fork c_v13911 in (((cmsort_workerU_i54 4) zs0_v13909) c_v13911)
    in
    let __v13912 ⇐ recv c_v13910 in
    match __v13912 with
    | (zs1_v13913, c_v13914) ⇒
      let __v13915 ⇐ close⇓ c_v13914 in return zs1_v13913
    end

def cmsortL_i55 =
  fn zs0_v13916 ⇒
    let c_v13917 ⇐
      fork c_v13918 in (((cmsort_workerL_i53 4) zs0_v13916) c_v13918)
    in
    let __v13919 ⇐ recv c_v13917 in
    match __v13919 with
    | (zs1_v13920, c_v13921) ⇒
      let __v13922 ⇐ close⇓ c_v13921 in return zs1_v13920
    end

def mkListU_i58 =
  fn n_v13923 ⇒
    match n_v13923 with
    | O ⇒ nilUU_c12
    | S n0_v13924 ⇒ (consUU_c13 n_v13923 (mkListU_i58 n0_v13924))
    end

def mkListL_i57 =
  fn n_v13925 ⇒
    match n_v13925 with
    | O ⇒ nilUL_c10
    | S n0_v13926 ⇒ (consUL_c11 n_v13925 (mkListL_i57 n0_v13926))
    end

def free_i35 =
  fn A_v13927 ls_v13928 ⇒
    match ls_v13928 with
    | nilUL_c10  ⇒ ()
    | consUL_c11 __v13929 ls_v13930 ⇒ ((free_i35 NULL) ls_v13930)
    end

main =
  let test_v13931 = (mkListL_i57 400000) in
  let sorted_v13932 = (msortL_i49 test_v13931) in
  let __v13933 = ((free_i35 NULL) sorted_v13932) in return ()

trans12 success--------------------------

fun andb_i1(b1_v14270, b2_v14271) = if b1_v14270 then
                                      b2_v14271
                                    else
                                      0

val andbclo_i59 = fn b1_v14272 b2_v14273 ⇒ andb_i1(b1_v14272, b2_v14273)

fun orb_i2(b1_v14274, b2_v14275) = if b1_v14274 then
                                     1
                                   else
                                     b2_v14275

val orbclo_i60 = fn b1_v14276 b2_v14277 ⇒ orb_i2(b1_v14276, b2_v14277)

fun notb_i3(b_v14278) = if b_v14278 then
                          0
                        else
                          1

val notbclo_i61 = fn b_v14279 ⇒ notb_i3(b_v14279)

fun lten_i4(x_v14280, y_v14281) =
  let __v14282 = x_v14280 in
  if __v14282 then
    let x_v14283 = __v14282.-1 in
    let __v14284 = y_v14281 in
    if __v14284 then
      let y_v14285 = __v14284.-1 in lten_i4(x_v14283, y_v14285)
    else
      0
  else
    1

val ltenclo_i62 = fn x_v14286 y_v14287 ⇒ lten_i4(x_v14286, y_v14287)

fun gten_i5(x_v14288, y_v14289) =
  let __v14290 = x_v14288 in
  if __v14290 then
    let x_v14291 = __v14290.-1 in
    let __v14292 = y_v14289 in
    if __v14292 then
      let y_v14293 = __v14292.-1 in gten_i5(x_v14291, y_v14293)
    else
      1
  else
    let __v14294 = y_v14289 in
    if __v14294 then
      let __v14295 = __v14294.-1 in 0
    else
      1

val gtenclo_i63 = fn x_v14296 y_v14297 ⇒ gten_i5(x_v14296, y_v14297)

fun ltn_i6(x_v14298, y_v14299) =
  let __v14300 = x_v14298 in
  if __v14300 then
    let x_v14301 = __v14300.-1 in
    let __v14302 = y_v14299 in
    if __v14302 then
      let y_v14303 = __v14302.-1 in ltn_i6(x_v14301, y_v14303)
    else
      0
  else
    let __v14304 = y_v14299 in
    if __v14304 then
      let y_v14305 = __v14304.-1 in 1
    else
      0

val ltnclo_i64 = fn x_v14306 y_v14307 ⇒ ltn_i6(x_v14306, y_v14307)

fun gtn_i7(x_v14308, y_v14309) =
  let __v14310 = x_v14308 in
  if __v14310 then
    let x_v14311 = __v14310.-1 in
    let __v14312 = y_v14309 in
    if __v14312 then
      let y_v14313 = __v14312.-1 in gtn_i7(x_v14311, y_v14313)
    else
      1
  else
    0

val gtnclo_i65 = fn x_v14314 y_v14315 ⇒ gtn_i7(x_v14314, y_v14315)

fun eqn_i8(x_v14316, y_v14317) =
  let __v14318 = x_v14316 in
  if __v14318 then
    let x_v14319 = __v14318.-1 in
    let __v14320 = y_v14317 in
    if __v14320 then
      let y_v14321 = __v14320.-1 in eqn_i8(x_v14319, y_v14321)
    else
      0
  else
    let __v14322 = y_v14317 in
    if __v14322 then
      let __v14323 = __v14322.-1 in 0
    else
      1

val eqnclo_i66 = fn x_v14324 y_v14325 ⇒ eqn_i8(x_v14324, y_v14325)

fun pred_i9(x_v14326) =
  let __v14327 = x_v14326 in
  if __v14327 then
    let x_v14328 = __v14327.-1 in x_v14328
  else
    0

val predclo_i67 = fn x_v14329 ⇒ pred_i9(x_v14329)

fun addn_i10(x_v14330, y_v14331) =
  let __v14332 = x_v14330 in
  if __v14332 then
    let x_v14333 = __v14332.-1 in addn_i10(x_v14333, y_v14331).+1
  else
    y_v14331

val addnclo_i68 = fn x_v14334 y_v14335 ⇒ addn_i10(x_v14334, y_v14335)

fun subn_i11(x_v14336, y_v14337) =
  let __v14338 = y_v14337 in
  if __v14338 then
    let y_v14339 = __v14338.-1 in subn_i11(pred_i9(x_v14336), y_v14339)
  else
    x_v14336

val subnclo_i69 = fn x_v14340 y_v14341 ⇒ subn_i11(x_v14340, y_v14341)

fun muln_i12(x_v14342, y_v14343) =
  let __v14344 = x_v14342 in
  if __v14344 then
    let x_v14345 = __v14344.-1 in
    addn_i10(y_v14343, muln_i12(x_v14345, y_v14343))
  else
    0

val mulnclo_i70 = fn x_v14346 y_v14347 ⇒ muln_i12(x_v14346, y_v14347)

fun divn_i13(x_v14348, y_v14349) =
  if ltn_i6(x_v14348, y_v14349) then
    0
  else
    divn_i13(subn_i11(x_v14348, y_v14349), y_v14349).+1

val divnclo_i71 = fn x_v14350 y_v14351 ⇒ divn_i13(x_v14350, y_v14351)

fun modn_i14(x_v14352, y_v14353) =
  subn_i11(x_v14352, muln_i12(divn_i13(x_v14352, y_v14353), y_v14353))

val modnclo_i72 = fn x_v14354 y_v14355 ⇒ modn_i14(x_v14354, y_v14355)

fun cats_i15(s1_v14356, s2_v14357) =
  match s1_v14356 with
  | EmptyString_c2  ⇒ s2_v14357
  | String_c3 c_v14358 s1_v14359 ⇒
    (String_c3 c_v14358 cats_i15(s1_v14359, s2_v14357))
  end

val catsclo_i73 = fn s1_v14360 s2_v14361 ⇒ cats_i15(s1_v14360, s2_v14361)

fun strlen_i16(s_v14362) =
  match s_v14362 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v14363 s_v14364 ⇒ strlen_i16(s_v14364).+1
  end

val strlenclo_i74 = fn s_v14365 ⇒ strlen_i16(s_v14365)

fun lenUU_i40(A_v14366, xs_v14367) =
  match xs_v14367 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v14368 xs_v14369 ⇒
    match lenUU_i40(NULL, xs_v14369) with
    | (n_v14370, xs_v14371) ⇒
      (n_v14370.+1, (consUU_c13 x_v14368 xs_v14371))
    end
  end

val lenUUclo_i75 = fn A_v14372 xs_v14373 ⇒ lenUU_i40(A_v14372, xs_v14373)

fun lenUL_i39(A_v14374, xs_v14375) =
  match xs_v14375 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v14376 xs_v14377 ⇒
    match lenUL_i39(NULL, xs_v14377) with
    | (n_v14378, xs_v14379) ⇒
      (n_v14378.+1, (consUL_c11 x_v14376 xs_v14379))
    end
  end

val lenULclo_i76 = fn A_v14380 xs_v14381 ⇒ lenUL_i39(A_v14380, xs_v14381)

fun lenLL_i37(A_v14382, xs_v14383) =
  match xs_v14383 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v14384 xs_v14385 ⇒
    match lenLL_i37(NULL, xs_v14385) with
    | (n_v14386, xs_v14387) ⇒ (n_v14386.+1, (consLL_c7 x_v14384 xs_v14387))
    end
  end

val lenLLclo_i77 = fn A_v14388 xs_v14389 ⇒ lenLL_i37(A_v14388, xs_v14389)

fun appendUU_i44(A_v14390, xs_v14391, ys_v14392) =
  match xs_v14391 with
  | nilUU_c12  ⇒ ys_v14392
  | consUU_c13 x_v14393 xs_v14394 ⇒
    (consUU_c13 x_v14393 appendUU_i44(NULL, xs_v14394, ys_v14392))
  end

val appendUUclo_i78 =
  fn A_v14395 xs_v14396 ⇒
    ln ys_v14397 ⇒ appendUU_i44(A_v14395, xs_v14396, ys_v14397)

fun appendUL_i43(A_v14398, xs_v14399, ys_v14400) =
  match xs_v14399 with
  | nilUL_c10  ⇒ ys_v14400
  | consUL_c11 x_v14401 xs_v14402 ⇒
    (consUL_c11 x_v14401 appendUL_i43(NULL, xs_v14402, ys_v14400))
  end

val appendULclo_i79 =
  fn A_v14403 xs_v14404 ⇒
    ln ys_v14405 ⇒ appendUL_i43(A_v14403, xs_v14404, ys_v14405)

fun appendLL_i41(A_v14406, xs_v14407, ys_v14408) =
  match xs_v14407 with
  | nilLL_c6  ⇒ ys_v14408
  | consLL_c7 x_v14409 xs_v14410 ⇒
    (consLL_c7 x_v14409 appendLL_i41(NULL, xs_v14410, ys_v14408))
  end

val appendLLclo_i80 =
  fn A_v14411 xs_v14412 ⇒
    ln ys_v14413 ⇒ appendLL_i41(A_v14411, xs_v14412, ys_v14413)

fun readline_i25(__v14414) =
  ln __v14415 ⇒
    let ch_v14416 = (ln __v14417 ⇒ open stdin) NULL in
    let ch_v14418 =
      ((fn x_v14419 ⇒ ln __v14420 ⇒ send(ch_v14416, x_v14419)) 1) NULL
    in
    let __v14421 = (ln __v14422 ⇒ recv(ch_v14418)) NULL in
    (match __v14421 with
     | (s_v14423, ch_v14424) ⇒
       ln __v14425 ⇒
         let ch_v14426 =
           ((fn x_v14427 ⇒ ln __v14428 ⇒ send(ch_v14424, x_v14427)) 0)
             NULL
         in
         let __v14429 =
           (ln __v14430 ⇒ let __v14431 = ch_v14426 in NULL) NULL
         in (ln __v14432 ⇒ s_v14423) NULL
     end) NULL

val readlineclo_i81 = fn __v14433 ⇒ readline_i25(__v14433)

fun print_i26(s_v14434) =
  ln __v14435 ⇒
    let ch_v14436 = (ln __v14437 ⇒ open stdout) NULL in
    let ch_v14438 =
      ((fn x_v14439 ⇒ ln __v14440 ⇒ send(ch_v14436, x_v14439)) 1) NULL
    in
    let ch_v14441 =
      ((fn x_v14442 ⇒ ln __v14443 ⇒ send(ch_v14438, x_v14442)) s_v14434)
        NULL
    in
    let ch_v14444 =
      ((fn x_v14445 ⇒ ln __v14446 ⇒ send(ch_v14441, x_v14445)) 0) NULL
    in (ln __v14447 ⇒ let __v14448 = ch_v14444 in NULL) NULL

val printclo_i82 = fn s_v14449 ⇒ print_i26(s_v14449)

fun prerr_i27(s_v14450) =
  ln __v14451 ⇒
    let ch_v14452 = (ln __v14453 ⇒ open stderr) NULL in
    let ch_v14454 =
      ((fn x_v14455 ⇒ ln __v14456 ⇒ send(ch_v14452, x_v14455)) 1) NULL
    in
    let ch_v14457 =
      ((fn x_v14458 ⇒ ln __v14459 ⇒ send(ch_v14454, x_v14458)) s_v14450)
        NULL
    in
    let ch_v14460 =
      ((fn x_v14461 ⇒ ln __v14462 ⇒ send(ch_v14457, x_v14461)) 0) NULL
    in (ln __v14463 ⇒ let __v14464 = ch_v14460 in NULL) NULL

val prerrclo_i83 = fn s_v14465 ⇒ prerr_i27(s_v14465)

fun splitU_i46(zs_v14466) =
  match zs_v14466 with
  | nilUU_c12  ⇒ (nilUU_c12, nilUU_c12)
  | consUU_c13 x_v14467 zs_v14468 ⇒
    match zs_v14468 with
    | nilUU_c12  ⇒ ((consUU_c13 x_v14467 nilUU_c12), nilUU_c12)
    | consUU_c13 y_v14469 zs_v14470 ⇒
      let __v14471 = splitU_i46(zs_v14470) in
      match __v14471 with
      | (xs_v14472, ys_v14473) ⇒
        ((consUU_c13 x_v14467 xs_v14472), (consUU_c13 y_v14469 ys_v14473))
      end
    end
  end

val splitUclo_i84 = fn zs_v14474 ⇒ splitU_i46(zs_v14474)

fun splitL_i45(zs_v14475) =
  match zs_v14475 with
  | nilUL_c10  ⇒ (nilUL_c10, nilUL_c10)
  | consUL_c11 x_v14476 zs_v14477 ⇒
    match zs_v14477 with
    | nilUL_c10  ⇒ ((consUL_c11 x_v14476 nilUL_c10), nilUL_c10)
    | consUL_c11 y_v14478 zs_v14479 ⇒
      let __v14480 = splitL_i45(zs_v14479) in
      match __v14480 with
      | (xs_v14481, ys_v14482) ⇒
        ((consUL_c11 x_v14476 xs_v14481), (consUL_c11 y_v14478 ys_v14482))
      end
    end
  end

val splitLclo_i85 = fn zs_v14483 ⇒ splitL_i45(zs_v14483)

fun mergeU_i48(xs_v14484, ys_v14485) =
  match xs_v14484 with
  | nilUU_c12  ⇒ ys_v14485
  | consUU_c13 x_v14486 xs0_v14487 ⇒
    match ys_v14485 with
    | nilUU_c12  ⇒ (consUU_c13 x_v14486 xs0_v14487)
    | consUU_c13 y_v14488 ys0_v14489 ⇒
      if lten_i4(x_v14486, y_v14488) then
        (consUU_c13
          x_v14486 mergeU_i48(xs0_v14487, (consUU_c13 y_v14488 ys0_v14489)))
      else
        (consUU_c13
          y_v14488 mergeU_i48((consUU_c13 x_v14486 xs0_v14487), ys0_v14489))
    end
  end

val mergeUclo_i86 =
  fn xs_v14490 ⇒ ln ys_v14491 ⇒ mergeU_i48(xs_v14490, ys_v14491)

fun mergeL_i47(xs_v14492, ys_v14493) =
  match xs_v14492 with
  | nilUL_c10  ⇒ ys_v14493
  | consUL_c11 x_v14494 xs0_v14495 ⇒
    match ys_v14493 with
    | nilUL_c10  ⇒ (consUL_c11 x_v14494 xs0_v14495)
    | consUL_c11 y_v14496 ys0_v14497 ⇒
      if lten_i4(x_v14494, y_v14496) then
        (consUL_c11
          x_v14494 mergeL_i47(xs0_v14495, (consUL_c11 y_v14496 ys0_v14497)))
      else
        (consUL_c11
          y_v14496 mergeL_i47((consUL_c11 x_v14494 xs0_v14495), ys0_v14497))
    end
  end

val mergeLclo_i87 =
  fn xs_v14498 ⇒ ln ys_v14499 ⇒ mergeL_i47(xs_v14498, ys_v14499)

fun msortU_i50(zs_v14500) =
  match zs_v14500 with
  | nilUU_c12  ⇒ nilUU_c12
  | consUU_c13 x_v14501 zs_v14502 ⇒
    match zs_v14502 with
    | nilUU_c12  ⇒ (consUU_c13 x_v14501 nilUU_c12)
    | consUU_c13 y_v14503 zs_v14504 ⇒
      let __v14505 =
        splitU_i46((consUU_c13 x_v14501 (consUU_c13 y_v14503 zs_v14504)))
      in
      match __v14505 with
      | (xs_v14506, ys_v14507) ⇒
        mergeU_i48(msortU_i50(xs_v14506), msortU_i50(ys_v14507))
      end
    end
  end

val msortUclo_i88 = fn zs_v14508 ⇒ msortU_i50(zs_v14508)

fun msortL_i49(zs_v14509) =
  match zs_v14509 with
  | nilUL_c10  ⇒ nilUL_c10
  | consUL_c11 x_v14510 zs_v14511 ⇒
    match zs_v14511 with
    | nilUL_c10  ⇒ (consUL_c11 x_v14510 nilUL_c10)
    | consUL_c11 y_v14512 zs_v14513 ⇒
      let __v14514 =
        splitL_i45((consUL_c11 x_v14510 (consUL_c11 y_v14512 zs_v14513)))
      in
      match __v14514 with
      | (xs_v14515, ys_v14516) ⇒
        mergeL_i47(msortL_i49(xs_v14515), msortL_i49(ys_v14516))
      end
    end
  end

val msortLclo_i89 = fn zs_v14517 ⇒ msortL_i49(zs_v14517)

fun cmsort_workerU_i54(n_v14518, zs_v14519, c_v14520) =
  let __v14521 = n_v14518 in
  if __v14521 then
    let n_v14522 = __v14521.-1 in
    match zs_v14519 with
    | nilUU_c12  ⇒
      ln __v14523 ⇒
        let c_v14524 =
          ((fn x_v14525 ⇒ ln __v14526 ⇒ send(c_v14520, x_v14525))
             nilUU_c12)
            NULL
        in (ln __v14527 ⇒ let __v14528 = c_v14524 in NULL) NULL
    | consUU_c13 z0_v14529 zs0_v14530 ⇒
      match zs0_v14530 with
      | nilUU_c12  ⇒
        ln __v14531 ⇒
          let c_v14532 =
            ((fn x_v14533 ⇒ ln __v14534 ⇒ send(c_v14520, x_v14533))
               nilUU_c12)
              NULL
          in (ln __v14535 ⇒ let __v14536 = c_v14532 in NULL) NULL
      | consUU_c13 z1_v14537 zs1_v14538 ⇒
        let __v14539 =
          splitU_i46((consUU_c13 z0_v14529 (consUU_c13 z1_v14537 zs1_v14538)))
        in
        match __v14539 with
        | (xs0_v14540, ys0_v14541) ⇒
          ln __v14542 ⇒
            let r1_v14543 =
              (ln __v14544 ⇒
                 fork r1_v14545 in
                   (cmsort_workerU_i54(n_v14522, xs0_v14540, r1_v14545)) NULL)
                NULL
            in
            let r2_v14546 =
              (ln __v14547 ⇒
                 fork r2_v14548 in
                   (cmsort_workerU_i54(n_v14522, ys0_v14541, r2_v14548)) NULL)
                NULL
            in
            let __v14549 = (ln __v14550 ⇒ recv(r1_v14543)) NULL in
            (match __v14549 with
             | (xs1_v14551, r1_v14552) ⇒
               ln __v14553 ⇒
                 let __v14554 = (ln __v14555 ⇒ recv(r2_v14546)) NULL in
                 (match __v14554 with
                  | (ys1_v14556, r2_v14557) ⇒
                    let zs_v14558 = mergeU_i48(xs1_v14551, ys1_v14556) in
                    ln __v14559 ⇒
                      let c_v14560 =
                        ((fn x_v14561 ⇒
                            ln __v14562 ⇒ send(c_v14520, x_v14561))
                           zs_v14558)
                          NULL
                      in
                      let __v14563 = (ln __v14564 ⇒ close(r1_v14552)) NULL
                      in
                      let __v14565 = (ln __v14566 ⇒ close(r2_v14557)) NULL
                      in
                      (ln __v14567 ⇒ let __v14568 = c_v14560 in NULL) NULL
                  end) NULL
             end) NULL
        end
      end
    end
  else
    ln __v14569 ⇒
      let c_v14570 =
        ((fn x_v14571 ⇒ ln __v14572 ⇒ send(c_v14520, x_v14571))
           msortU_i50(zs_v14519))
          NULL
      in (ln __v14573 ⇒ let __v14574 = c_v14570 in NULL) NULL

val cmsort_workerUclo_i90 =
  fn n_v14575 zs_v14576 ⇒
    ln c_v14577 ⇒ cmsort_workerU_i54(n_v14575, zs_v14576, c_v14577)

fun cmsort_workerL_i53(n_v14578, zs_v14579, c_v14580) =
  let __v14581 = n_v14578 in
  if __v14581 then
    let n_v14582 = __v14581.-1 in
    match zs_v14579 with
    | nilUL_c10  ⇒
      ln __v14583 ⇒
        let c_v14584 =
          ((ln x_v14585 __v14586 ⇒ send(c_v14580, x_v14585)) nilUL_c10)
            NULL
        in (ln __v14587 ⇒ let __v14588 = c_v14584 in NULL) NULL
    | consUL_c11 z0_v14589 zs0_v14590 ⇒
      match zs0_v14590 with
      | nilUL_c10  ⇒
        ln __v14591 ⇒
          let c_v14592 =
            ((ln x_v14593 __v14594 ⇒ send(c_v14580, x_v14593)) nilUL_c10)
              NULL
          in (ln __v14595 ⇒ let __v14596 = c_v14592 in NULL) NULL
      | consUL_c11 z1_v14597 zs1_v14598 ⇒
        let __v14599 =
          splitL_i45((consUL_c11 z0_v14589 (consUL_c11 z1_v14597 zs1_v14598)))
        in
        match __v14599 with
        | (xs0_v14600, ys0_v14601) ⇒
          ln __v14602 ⇒
            let r1_v14603 =
              (ln __v14604 ⇒
                 fork r1_v14605 in
                   (cmsort_workerL_i53(n_v14582, xs0_v14600, r1_v14605)) NULL)
                NULL
            in
            let r2_v14606 =
              (ln __v14607 ⇒
                 fork r2_v14608 in
                   (cmsort_workerL_i53(n_v14582, ys0_v14601, r2_v14608)) NULL)
                NULL
            in
            let __v14609 = (ln __v14610 ⇒ recv(r1_v14603)) NULL in
            (match __v14609 with
             | (xs1_v14611, r1_v14612) ⇒
               ln __v14613 ⇒
                 let __v14614 = (ln __v14615 ⇒ recv(r2_v14606)) NULL in
                 (match __v14614 with
                  | (ys1_v14616, r2_v14617) ⇒
                    let zs_v14618 = mergeL_i47(xs1_v14611, ys1_v14616) in
                    ln __v14619 ⇒
                      let c_v14620 =
                        ((ln x_v14621 __v14622 ⇒ send(c_v14580, x_v14621))
                           zs_v14618)
                          NULL
                      in
                      let __v14623 = (ln __v14624 ⇒ close(r1_v14612)) NULL
                      in
                      let __v14625 = (ln __v14626 ⇒ close(r2_v14617)) NULL
                      in
                      (ln __v14627 ⇒ let __v14628 = c_v14620 in NULL) NULL
                  end) NULL
             end) NULL
        end
      end
    end
  else
    ln __v14629 ⇒
      let c_v14630 =
        ((ln x_v14631 __v14632 ⇒ send(c_v14580, x_v14631))
           msortL_i49(zs_v14579))
          NULL
      in (ln __v14633 ⇒ let __v14634 = c_v14630 in NULL) NULL

val cmsort_workerLclo_i91 =
  fn n_v14635 zs_v14636 ⇒
    ln c_v14637 ⇒ cmsort_workerL_i53(n_v14635, zs_v14636, c_v14637)

fun cmsortU_i56(zs0_v14638) =
  ln __v14639 ⇒
    let c_v14640 =
      (ln __v14641 ⇒
         fork c_v14642 in (cmsort_workerU_i54(4, zs0_v14638, c_v14642)) NULL)
        NULL
    in
    let __v14643 = (ln __v14644 ⇒ recv(c_v14640)) NULL in
    (match __v14643 with
     | (zs1_v14645, c_v14646) ⇒
       ln __v14647 ⇒
         let __v14648 = (ln __v14649 ⇒ close(c_v14646)) NULL in
         (ln __v14650 ⇒ zs1_v14645) NULL
     end) NULL

val cmsortUclo_i92 = fn zs0_v14651 ⇒ cmsortU_i56(zs0_v14651)

fun cmsortL_i55(zs0_v14652) =
  ln __v14653 ⇒
    let c_v14654 =
      (ln __v14655 ⇒
         fork c_v14656 in (cmsort_workerL_i53(4, zs0_v14652, c_v14656)) NULL)
        NULL
    in
    let __v14657 = (ln __v14658 ⇒ recv(c_v14654)) NULL in
    (match __v14657 with
     | (zs1_v14659, c_v14660) ⇒
       ln __v14661 ⇒
         let __v14662 = (ln __v14663 ⇒ close(c_v14660)) NULL in
         (ln __v14664 ⇒ zs1_v14659) NULL
     end) NULL

val cmsortLclo_i93 = fn zs0_v14665 ⇒ cmsortL_i55(zs0_v14665)

fun mkListU_i58(n_v14666) =
  let __v14667 = n_v14666 in
  if __v14667 then
    let n0_v14668 = __v14667.-1 in
    (consUU_c13 n_v14666 mkListU_i58(n0_v14668))
  else
    nilUU_c12

val mkListUclo_i94 = fn n_v14669 ⇒ mkListU_i58(n_v14669)

fun mkListL_i57(n_v14670) =
  let __v14671 = n_v14670 in
  if __v14671 then
    let n0_v14672 = __v14671.-1 in
    (consUL_c11 n_v14670 mkListL_i57(n0_v14672))
  else
    nilUL_c10

val mkListLclo_i95 = fn n_v14673 ⇒ mkListL_i57(n_v14673)

fun free_i35(A_v14674, ls_v14675) =
  match ls_v14675 with
  | nilUL_c10  ⇒ NULL
  | consUL_c11 __v14676 ls_v14677 ⇒ free_i35(NULL, ls_v14677)
  end

val freeclo_i96 = fn A_v14678 ls_v14679 ⇒ free_i35(A_v14678, ls_v14679)

main =
  (let test_v14680 = mkListL_i57(400000) in
   let sorted_v14681 = msortL_i49(test_v14680) in
   let __v14682 = free_i35(NULL, sorted_v14681) in ln __v14683 ⇒ NULL) 
  NULL

trans23 success--------------------------

fun andb_i1(b1_v15536, b2_v15537) = if b1_v15536 then
                                      b2_v15537
                                    else
                                      0

val andbclo_i59 = fn b1_v15538 b2_v15539 ⇒ andb_i1(b1_v15538, b2_v15539)

fun orb_i2(b1_v15540, b2_v15541) = if b1_v15540 then
                                     1
                                   else
                                     b2_v15541

val orbclo_i60 = fn b1_v15542 b2_v15543 ⇒ orb_i2(b1_v15542, b2_v15543)

fun notb_i3(b_v15544) = if b_v15544 then
                          0
                        else
                          1

val notbclo_i61 = fn b_v15545 ⇒ notb_i3(b_v15545)

fun lten_i4(x_v15546, y_v15547) =
  if x_v15546 then
    if y_v15547 then
      lten_i4(x_v15546.-1, y_v15547.-1)
    else
      0
  else
    1

val ltenclo_i62 = fn x_v15548 y_v15549 ⇒ lten_i4(x_v15548, y_v15549)

fun gten_i5(x_v15550, y_v15551) =
  if x_v15550 then
    if y_v15551 then
      gten_i5(x_v15550.-1, y_v15551.-1)
    else
      1
  else
    if y_v15551 then
      0
    else
      1

val gtenclo_i63 = fn x_v15552 y_v15553 ⇒ gten_i5(x_v15552, y_v15553)

fun ltn_i6(x_v15554, y_v15555) =
  if x_v15554 then
    if y_v15555 then
      ltn_i6(x_v15554.-1, y_v15555.-1)
    else
      0
  else
    if y_v15555 then
      1
    else
      0

val ltnclo_i64 = fn x_v15556 y_v15557 ⇒ ltn_i6(x_v15556, y_v15557)

fun gtn_i7(x_v15558, y_v15559) =
  if x_v15558 then
    if y_v15559 then
      gtn_i7(x_v15558.-1, y_v15559.-1)
    else
      1
  else
    0

val gtnclo_i65 = fn x_v15560 y_v15561 ⇒ gtn_i7(x_v15560, y_v15561)

fun eqn_i8(x_v15562, y_v15563) =
  if x_v15562 then
    if y_v15563 then
      eqn_i8(x_v15562.-1, y_v15563.-1)
    else
      0
  else
    if y_v15563 then
      0
    else
      1

val eqnclo_i66 = fn x_v15564 y_v15565 ⇒ eqn_i8(x_v15564, y_v15565)

fun pred_i9(x_v15566) = if x_v15566 then
                          x_v15566.-1
                        else
                          0

val predclo_i67 = fn x_v15567 ⇒ pred_i9(x_v15567)

fun addn_i10(x_v15568, y_v15569) =
  if x_v15568 then
    addn_i10(x_v15568.-1, y_v15569).+1
  else
    y_v15569

val addnclo_i68 = fn x_v15570 y_v15571 ⇒ addn_i10(x_v15570, y_v15571)

fun subn_i11(x_v15572, y_v15573) =
  if y_v15573 then
    subn_i11(pred_i9(x_v15572), y_v15573.-1)
  else
    x_v15572

val subnclo_i69 = fn x_v15574 y_v15575 ⇒ subn_i11(x_v15574, y_v15575)

fun muln_i12(x_v15576, y_v15577) =
  if x_v15576 then
    addn_i10(y_v15577, muln_i12(x_v15576.-1, y_v15577))
  else
    0

val mulnclo_i70 = fn x_v15578 y_v15579 ⇒ muln_i12(x_v15578, y_v15579)

fun divn_i13(x_v15580, y_v15581) =
  if ltn_i6(x_v15580, y_v15581) then
    0
  else
    divn_i13(subn_i11(x_v15580, y_v15581), y_v15581).+1

val divnclo_i71 = fn x_v15582 y_v15583 ⇒ divn_i13(x_v15582, y_v15583)

fun modn_i14(x_v15584, y_v15585) =
  subn_i11(x_v15584, muln_i12(divn_i13(x_v15584, y_v15585), y_v15585))

val modnclo_i72 = fn x_v15586 y_v15587 ⇒ modn_i14(x_v15586, y_v15587)

fun cats_i15(s1_v15588, s2_v15589) =
  match s1_v15588 with
  | EmptyString_c2  ⇒ s2_v15589
  | String_c3 c_v15590 s1_v15591 ⇒
    (String_c3 c_v15590 cats_i15(s1_v15591, s2_v15589))
  end

val catsclo_i73 = fn s1_v15592 s2_v15593 ⇒ cats_i15(s1_v15592, s2_v15593)

fun strlen_i16(s_v15594) =
  match s_v15594 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v15595 s_v15596 ⇒ strlen_i16(s_v15596).+1
  end

val strlenclo_i74 = fn s_v15597 ⇒ strlen_i16(s_v15597)

fun lenUU_i40(A_v15598, xs_v15599) =
  match xs_v15599 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v15600 xs_v15601 ⇒
    match lenUU_i40(NULL, xs_v15601) with
    | (n_v15602, xs_v15603) ⇒
      (n_v15602.+1, (consUU_c13 x_v15600 xs_v15603))
    end
  end

val lenUUclo_i75 = fn A_v15604 xs_v15605 ⇒ lenUU_i40(A_v15604, xs_v15605)

fun lenUL_i39(A_v15606, xs_v15607) =
  match xs_v15607 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v15608 xs_v15609 ⇒
    match lenUL_i39(NULL, xs_v15609) with
    | (n_v15610, xs_v15611) ⇒
      (n_v15610.+1, (consUL_c11 x_v15608 xs_v15611))
    end
  end

val lenULclo_i76 = fn A_v15612 xs_v15613 ⇒ lenUL_i39(A_v15612, xs_v15613)

fun lenLL_i37(A_v15614, xs_v15615) =
  match xs_v15615 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v15616 xs_v15617 ⇒
    match lenLL_i37(NULL, xs_v15617) with
    | (n_v15618, xs_v15619) ⇒ (n_v15618.+1, (consLL_c7 x_v15616 xs_v15619))
    end
  end

val lenLLclo_i77 = fn A_v15620 xs_v15621 ⇒ lenLL_i37(A_v15620, xs_v15621)

fun appendUU_i44(A_v15622, xs_v15623, ys_v15624) =
  match xs_v15623 with
  | nilUU_c12  ⇒ ys_v15624
  | consUU_c13 x_v15625 xs_v15626 ⇒
    (consUU_c13 x_v15625 appendUU_i44(NULL, xs_v15626, ys_v15624))
  end

val appendUUclo_i78 =
  fn A_v15627 xs_v15628 ⇒
    ln ys_v15629 ⇒ appendUU_i44(A_v15627, xs_v15628, ys_v15629)

fun appendUL_i43(A_v15630, xs_v15631, ys_v15632) =
  match xs_v15631 with
  | nilUL_c10  ⇒ ys_v15632
  | consUL_c11 x_v15633 xs_v15634 ⇒
    (consUL_c11 x_v15633 appendUL_i43(NULL, xs_v15634, ys_v15632))
  end

val appendULclo_i79 =
  fn A_v15635 xs_v15636 ⇒
    ln ys_v15637 ⇒ appendUL_i43(A_v15635, xs_v15636, ys_v15637)

fun appendLL_i41(A_v15638, xs_v15639, ys_v15640) =
  match xs_v15639 with
  | nilLL_c6  ⇒ ys_v15640
  | consLL_c7 x_v15641 xs_v15642 ⇒
    (consLL_c7 x_v15641 appendLL_i41(NULL, xs_v15642, ys_v15640))
  end

val appendLLclo_i80 =
  fn A_v15643 xs_v15644 ⇒
    ln ys_v15645 ⇒ appendLL_i41(A_v15643, xs_v15644, ys_v15645)

fun readline_i25(__v15646) =
  ln __v15647 ⇒
    let ch_v15648 = open stdin in
    let ch_v15649 = send(ch_v15648, 1) in
    let __v15650 = recv(ch_v15649) in
    match __v15650 with
    | (s_v15651, ch_v15652) ⇒
      let ch_v15653 = send(ch_v15652, 0) in s_v15651
    end

val readlineclo_i81 = fn __v15654 ⇒ readline_i25(__v15654)

fun print_i26(s_v15655) =
  ln __v15656 ⇒
    let ch_v15657 = open stdout in
    let ch_v15658 = send(ch_v15657, 1) in
    let ch_v15659 = send(ch_v15658, s_v15655) in
    let ch_v15660 = send(ch_v15659, 0) in NULL

val printclo_i82 = fn s_v15661 ⇒ print_i26(s_v15661)

fun prerr_i27(s_v15662) =
  ln __v15663 ⇒
    let ch_v15664 = open stderr in
    let ch_v15665 = send(ch_v15664, 1) in
    let ch_v15666 = send(ch_v15665, s_v15662) in
    let ch_v15667 = send(ch_v15666, 0) in NULL

val prerrclo_i83 = fn s_v15668 ⇒ prerr_i27(s_v15668)

fun splitU_i46(zs_v15669) =
  match zs_v15669 with
  | nilUU_c12  ⇒ (nilUU_c12, nilUU_c12)
  | consUU_c13 x_v15670 zs_v15671 ⇒
    match zs_v15671 with
    | nilUU_c12  ⇒ ((consUU_c13 x_v15670 nilUU_c12), nilUU_c12)
    | consUU_c13 y_v15672 zs_v15673 ⇒
      let __v15674 = splitU_i46(zs_v15673) in
      match __v15674 with
      | (xs_v15675, ys_v15676) ⇒
        ((consUU_c13 x_v15670 xs_v15675), (consUU_c13 y_v15672 ys_v15676))
      end
    end
  end

val splitUclo_i84 = fn zs_v15677 ⇒ splitU_i46(zs_v15677)

fun splitL_i45(zs_v15678) =
  match zs_v15678 with
  | nilUL_c10  ⇒ (nilUL_c10, nilUL_c10)
  | consUL_c11 x_v15679 zs_v15680 ⇒
    match zs_v15680 with
    | nilUL_c10  ⇒ ((consUL_c11 x_v15679 nilUL_c10), nilUL_c10)
    | consUL_c11 y_v15681 zs_v15682 ⇒
      let __v15683 = splitL_i45(zs_v15682) in
      match __v15683 with
      | (xs_v15684, ys_v15685) ⇒
        ((consUL_c11 x_v15679 xs_v15684), (consUL_c11 y_v15681 ys_v15685))
      end
    end
  end

val splitLclo_i85 = fn zs_v15686 ⇒ splitL_i45(zs_v15686)

fun mergeU_i48(xs_v15687, ys_v15688) =
  match xs_v15687 with
  | nilUU_c12  ⇒ ys_v15688
  | consUU_c13 x_v15689 xs0_v15690 ⇒
    match ys_v15688 with
    | nilUU_c12  ⇒ (consUU_c13 x_v15689 xs0_v15690)
    | consUU_c13 y_v15691 ys0_v15692 ⇒
      if lten_i4(x_v15689, y_v15691) then
        (consUU_c13
          x_v15689 mergeU_i48(xs0_v15690, (consUU_c13 y_v15691 ys0_v15692)))
      else
        (consUU_c13
          y_v15691 mergeU_i48((consUU_c13 x_v15689 xs0_v15690), ys0_v15692))
    end
  end

val mergeUclo_i86 =
  fn xs_v15693 ⇒ ln ys_v15694 ⇒ mergeU_i48(xs_v15693, ys_v15694)

fun mergeL_i47(xs_v15695, ys_v15696) =
  match xs_v15695 with
  | nilUL_c10  ⇒ ys_v15696
  | consUL_c11 x_v15697 xs0_v15698 ⇒
    match ys_v15696 with
    | nilUL_c10  ⇒ (consUL_c11 x_v15697 xs0_v15698)
    | consUL_c11 y_v15699 ys0_v15700 ⇒
      if lten_i4(x_v15697, y_v15699) then
        (consUL_c11
          x_v15697 mergeL_i47(xs0_v15698, (consUL_c11 y_v15699 ys0_v15700)))
      else
        (consUL_c11
          y_v15699 mergeL_i47((consUL_c11 x_v15697 xs0_v15698), ys0_v15700))
    end
  end

val mergeLclo_i87 =
  fn xs_v15701 ⇒ ln ys_v15702 ⇒ mergeL_i47(xs_v15701, ys_v15702)

fun msortU_i50(zs_v15703) =
  match zs_v15703 with
  | nilUU_c12  ⇒ nilUU_c12
  | consUU_c13 x_v15704 zs_v15705 ⇒
    match zs_v15705 with
    | nilUU_c12  ⇒ (consUU_c13 x_v15704 nilUU_c12)
    | consUU_c13 y_v15706 zs_v15707 ⇒
      let __v15708 =
        splitU_i46((consUU_c13 x_v15704 (consUU_c13 y_v15706 zs_v15707)))
      in
      match __v15708 with
      | (xs_v15709, ys_v15710) ⇒
        mergeU_i48(msortU_i50(xs_v15709), msortU_i50(ys_v15710))
      end
    end
  end

val msortUclo_i88 = fn zs_v15711 ⇒ msortU_i50(zs_v15711)

fun msortL_i49(zs_v15712) =
  match zs_v15712 with
  | nilUL_c10  ⇒ nilUL_c10
  | consUL_c11 x_v15713 zs_v15714 ⇒
    match zs_v15714 with
    | nilUL_c10  ⇒ (consUL_c11 x_v15713 nilUL_c10)
    | consUL_c11 y_v15715 zs_v15716 ⇒
      let __v15717 =
        splitL_i45((consUL_c11 x_v15713 (consUL_c11 y_v15715 zs_v15716)))
      in
      match __v15717 with
      | (xs_v15718, ys_v15719) ⇒
        mergeL_i47(msortL_i49(xs_v15718), msortL_i49(ys_v15719))
      end
    end
  end

val msortLclo_i89 = fn zs_v15720 ⇒ msortL_i49(zs_v15720)

fun cmsort_workerU_i54(n_v15721, zs_v15722, c_v15723) =
  if n_v15721 then
    match zs_v15722 with
    | nilUU_c12  ⇒
      ln __v15724 ⇒ let c_v15725 = send(c_v15723, nilUU_c12) in NULL
    | consUU_c13 z0_v15726 zs0_v15727 ⇒
      match zs0_v15727 with
      | nilUU_c12  ⇒
        ln __v15728 ⇒ let c_v15729 = send(c_v15723, nilUU_c12) in NULL
      | consUU_c13 z1_v15730 zs1_v15731 ⇒
        let __v15732 =
          splitU_i46((consUU_c13 z0_v15726 (consUU_c13 z1_v15730 zs1_v15731)))
        in
        match __v15732 with
        | (xs0_v15733, ys0_v15734) ⇒
          ln __v15735 ⇒
            let r1_v15736 =
              fork r1_v15737 in
                (cmsort_workerU_i54(n_v15721.-1, xs0_v15733, r1_v15737)) NULL
            in
            let r2_v15738 =
              fork r2_v15739 in
                (cmsort_workerU_i54(n_v15721.-1, ys0_v15734, r2_v15739)) NULL
            in
            let __v15740 = recv(r1_v15736) in
            match __v15740 with
            | (xs1_v15741, r1_v15742) ⇒
              let __v15743 = recv(r2_v15738) in
              match __v15743 with
              | (ys1_v15744, r2_v15745) ⇒
                let zs_v15746 = mergeU_i48(xs1_v15741, ys1_v15744) in
                let c_v15747 = send(c_v15723, zs_v15746) in
                let __v15748 = close(r1_v15742) in
                let __v15749 = close(r2_v15745) in NULL
              end
            end
        end
      end
    end
  else
    ln __v15750 ⇒
      let c_v15751 =
        ((fn x_v15752 ⇒ ln __v15753 ⇒ send(c_v15723, x_v15752))
           msortU_i50(zs_v15722))
          NULL
      in NULL

val cmsort_workerUclo_i90 =
  fn n_v15754 zs_v15755 ⇒
    ln c_v15756 ⇒ cmsort_workerU_i54(n_v15754, zs_v15755, c_v15756)

fun cmsort_workerL_i53(n_v15757, zs_v15758, c_v15759) =
  if n_v15757 then
    match zs_v15758 with
    | nilUL_c10  ⇒
      ln __v15760 ⇒ let c_v15761 = send(c_v15759, nilUL_c10) in NULL
    | consUL_c11 z0_v15762 zs0_v15763 ⇒
      match zs0_v15763 with
      | nilUL_c10  ⇒
        ln __v15764 ⇒ let c_v15765 = send(c_v15759, nilUL_c10) in NULL
      | consUL_c11 z1_v15766 zs1_v15767 ⇒
        let __v15768 =
          splitL_i45((consUL_c11 z0_v15762 (consUL_c11 z1_v15766 zs1_v15767)))
        in
        match __v15768 with
        | (xs0_v15769, ys0_v15770) ⇒
          ln __v15771 ⇒
            let r1_v15772 =
              fork r1_v15773 in
                (cmsort_workerL_i53(n_v15757.-1, xs0_v15769, r1_v15773)) NULL
            in
            let r2_v15774 =
              fork r2_v15775 in
                (cmsort_workerL_i53(n_v15757.-1, ys0_v15770, r2_v15775)) NULL
            in
            let __v15776 = recv(r1_v15772) in
            match __v15776 with
            | (xs1_v15777, r1_v15778) ⇒
              let __v15779 = recv(r2_v15774) in
              match __v15779 with
              | (ys1_v15780, r2_v15781) ⇒
                let zs_v15782 = mergeL_i47(xs1_v15777, ys1_v15780) in
                let c_v15783 = send(c_v15759, zs_v15782) in
                let __v15784 = close(r1_v15778) in
                let __v15785 = close(r2_v15781) in NULL
              end
            end
        end
      end
    end
  else
    ln __v15786 ⇒
      let c_v15787 =
        ((ln x_v15788 __v15789 ⇒ send(c_v15759, x_v15788))
           msortL_i49(zs_v15758))
          NULL
      in NULL

val cmsort_workerLclo_i91 =
  fn n_v15790 zs_v15791 ⇒
    ln c_v15792 ⇒ cmsort_workerL_i53(n_v15790, zs_v15791, c_v15792)

fun cmsortU_i56(zs0_v15793) =
  ln __v15794 ⇒
    let c_v15795 =
      fork c_v15796 in (cmsort_workerU_i54(4, zs0_v15793, c_v15796)) NULL
    in
    let __v15797 = recv(c_v15795) in
    match __v15797 with
    | (zs1_v15798, c_v15799) ⇒ let __v15800 = close(c_v15799) in zs1_v15798
    end

val cmsortUclo_i92 = fn zs0_v15801 ⇒ cmsortU_i56(zs0_v15801)

fun cmsortL_i55(zs0_v15802) =
  ln __v15803 ⇒
    let c_v15804 =
      fork c_v15805 in (cmsort_workerL_i53(4, zs0_v15802, c_v15805)) NULL
    in
    let __v15806 = recv(c_v15804) in
    match __v15806 with
    | (zs1_v15807, c_v15808) ⇒ let __v15809 = close(c_v15808) in zs1_v15807
    end

val cmsortLclo_i93 = fn zs0_v15810 ⇒ cmsortL_i55(zs0_v15810)

fun mkListU_i58(n_v15811) =
  if n_v15811 then
    (consUU_c13 n_v15811 mkListU_i58(n_v15811.-1))
  else
    nilUU_c12

val mkListUclo_i94 = fn n_v15812 ⇒ mkListU_i58(n_v15812)

fun mkListL_i57(n_v15813) =
  if n_v15813 then
    (consUL_c11 n_v15813 mkListL_i57(n_v15813.-1))
  else
    nilUL_c10

val mkListLclo_i95 = fn n_v15814 ⇒ mkListL_i57(n_v15814)

fun free_i35(A_v15815, ls_v15816) =
  match ls_v15816 with
  | nilUL_c10  ⇒ NULL
  | consUL_c11 __v15817 ls_v15818 ⇒ free_i35(NULL, ls_v15818)
  end

val freeclo_i96 = fn A_v15819 ls_v15820 ⇒ free_i35(A_v15819, ls_v15820)

main =
  let test_v15821 = mkListL_i57(400000) in
  let sorted_v15822 = msortL_i49(test_v15821) in
  let __v15823 = free_i35(NULL, sorted_v15822) in NULL

trans3e success--------------------------

trans34 success--------------------------

