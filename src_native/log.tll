program digits‹› : ((list‹_, U›) (_)) = ((cons)
(((String) (((Char) (O.+48))) (EmptyString)))
(((cons) (((String) (((Char) (O.+49))) (EmptyString)))
 (((cons) (((String) (((Char) (O.+50))) (EmptyString)))
  (((cons) (((String) (((Char) (O.+51))) (EmptyString)))
   (((cons) (((String) (((Char) (O.+52))) (EmptyString)))
    (((cons) (((String) (((Char) (O.+53))) (EmptyString)))
     (((cons) (((String) (((Char) (O.+54))) (EmptyString)))
      (((cons) (((String) (((Char) (O.+55))) (EmptyString)))
       (((cons) (((String) (((Char) (O.+56))) (EmptyString)))
        (((cons) (((String) (((Char) (O.+57))) (EmptyString))) (nil))))))))))))))))))))

program get_at‹› {A : U} (n : nat) (xs : ((list‹_, U›)
(A))) (a : A) : A = match n as _ in _ with O ⇒ match xs as _ in _ with nil  ⇒ a | cons x
_ ⇒ x | S n ⇒ match xs as _ in _ with nil  ⇒ a | cons _
xs ⇒ ((get_at) (_) (n) (xs)
(a))

program string_of_digit‹› (n : nat) : string = ((get_at) (_) (n) 
(digits)
(EmptyString))

program string_of_nat‹› (n : nat) : string = let s = ((string_of_digit)
(((modn) (n) (O.+10)))) in let n = ((divn) (n) (O.+10)) in match ((ltn)
(O.+0) (n)) as _ in _ with true ⇒ ((cats) (((string_of_nat) (n)))
(s)) | false ⇒ s

program pow‹› (n : nat) (m : nat) : nat = match m as _ in _ with O ⇒ O.+1 | S m ⇒ (
(muln) (n)
(((pow) (n) (m))))

logical DH‹› (p : nat) (g : nat) : proto = !{a : nat} → !(x : nat) → !{_ : x ≡ (
(modn) (((pow) (g) (a)))
(p))} → ?{b : nat} → ?(y : nat) → ?{_ : y ≡ ((modn) (((pow) (g) (b)))
(p))} → end

logical DH_ch‹› (p : nat) (g : nat) : L = ch‹((DH) (p)
(g))›

logical DH_hc‹› (p : nat) (g : nat) : L = hc‹((DH) (p)
(g))›

program alice‹› (a : nat) (p : nat) (g : nat) (ch : ((DH_ch) (p)
(g))) : IO unit = let ch ⇐ ((send ch) (a)) in let ch ⇐ ((send ch)
(((modn) (((pow) (g) (a))) (p)))) in let ch ⇐ ((send ch)
(refl)) in let ⟨{b}, ch⟩ ⇐ recv ch in let ⟨B, ch⟩ ⇐ recv ch in let ⟨{pf}, ch⟩ ⇐ recv ch in let s = (
(modn) (((pow) (B) (a))) (p)) in let _ ⇐ close ch in ((print)
(((cats) (((string_of_nat) (s)))
 (((String) (((Char) (O.+10))) (EmptyString))))))

program bob‹› (b : nat) (p : nat) (g : nat) (ch : ((DH_hc) (p)
(g))) : IO unit = let ⟨{a}, ch⟩ ⇐ recv ch in let ⟨A, ch⟩ ⇐ recv ch in let ⟨{pf}, ch⟩ ⇐ recv ch in let ch ⇐ (
(send ch) (b)) in let ch ⇐ ((send ch)
(((modn) (((pow) (g) (b))) (p)))) in let ch ⇐ ((send ch)
(refl)) in let s = ((modn) (((pow) (A) (b)))
(p)) in let _ ⇐ close ch in ((print)
(((cats) (((string_of_nat) (s)))
 (((String) (((Char) (O.+10))) (EmptyString))))))

program key_exchange‹› (_ : unit) : IO unit = let p = O.+23 in let g = O.+5 in let c ⇐ fork (c : (
(DH_ch) (p) (g))) in ((alice) (O.+4) (p) (g)
(c)) in let c0 ⇐ fork (c0 : ch‹?(_ : ((DH_hc) (p)
(g))) → end›) in let ⟨c, c0⟩ ⇐ recv c0 in let _ ⇐ close c0 in (
(bob) (O.+3) (p) (g) (c)) in let c0 ⇐ ((send c0)
(c)) in close c0

program main‹› : IO unit = ((key_exchange)
(()))

parsing success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v221 : bool) (b2_v222 : bool) ⇒
    match b1_v221 as __v223 in ??1 with
    | true ⇒ b2_v222 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v226 : bool) (b2_v227 : bool) ⇒
    match b1_v226 as __v228 in ??2 with
    | true ⇒ true | false ⇒ b2_v227
    end

program notb_i3 : bool → bool =
  fn (b_v230 : bool) ⇒
    match b_v230 as __v231 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v234 : nat) (y_v235 : nat) ⇒
    match x_v234 as __v236 in ??4 with
    | O ⇒ true
    | S x_v237 ⇒
      match y_v235 as __v238 in ??5 with
      | O ⇒ false | S y_v239 ⇒ (lten_i4 x_v237 y_v239)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v242 : nat) (y_v243 : nat) ⇒
    match x_v242 as __v244 in ??6 with
    | O ⇒
      match y_v243 as __v245 in ??8 with
      | O ⇒ true | S __v246 ⇒ false
      end
    | S x_v247 ⇒
      match y_v243 as __v248 in ??7 with
      | O ⇒ true | S y_v249 ⇒ (gten_i5 x_v247 y_v249)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v252 : nat) (y_v253 : nat) ⇒
    match x_v252 as __v254 in ??9 with
    | O ⇒
      match y_v253 as __v255 in ??11 with
      | O ⇒ false | S y_v256 ⇒ true
      end
    | S x_v257 ⇒
      match y_v253 as __v258 in ??10 with
      | O ⇒ false | S y_v259 ⇒ (ltn_i6 x_v257 y_v259)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v262 : nat) (y_v263 : nat) ⇒
    match x_v262 as __v264 in ??12 with
    | O ⇒ false
    | S x_v265 ⇒
      match y_v263 as __v266 in ??13 with
      | O ⇒ true | S y_v267 ⇒ (gtn_i7 x_v265 y_v267)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v270 : nat) (y_v271 : nat) ⇒
    match x_v270 as __v272 in ??14 with
    | O ⇒
      match y_v271 as __v273 in ??16 with
      | O ⇒ true | S __v274 ⇒ false
      end
    | S x_v275 ⇒
      match y_v271 as __v276 in ??15 with
      | O ⇒ false | S y_v277 ⇒ (eqn_i8 x_v275 y_v277)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v279 : nat) ⇒
    match x_v279 as __v280 in ??17 with
    | O ⇒ 0 | S x_v281 ⇒ x_v281
    end

program addn_i10 : nat → nat → nat =
  fn (x_v284 : nat) (y_v285 : nat) ⇒
    match x_v284 as __v286 in ??18 with
    | O ⇒ y_v285 | S x_v287 ⇒ (addn_i10 x_v287 y_v285).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v290 : nat) (y_v291 : nat) ⇒
    match y_v291 as __v292 in ??19 with
    | O ⇒ x_v290 | S y_v293 ⇒ (subn_i11 (pred_i9 x_v290) y_v293)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v296 : nat) (y_v297 : nat) ⇒
    match x_v296 as __v298 in ??20 with
    | O ⇒ 0 | S x_v299 ⇒ (addn_i10 y_v297 (muln_i12 x_v299 y_v297))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v302 : nat) (y_v303 : nat) ⇒
    match (ltn_i6 x_v302 y_v303) as __v304 in ??21 with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v302 y_v303) y_v303).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v307 : nat) (y_v308 : nat) ⇒
    (subn_i11 x_v307 (muln_i12 (divn_i13 x_v307 y_v308) y_v308))

inductive char_d1 : U =
| Char_c1 of (n_v309 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v310 : char_d1) (s_v311 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v314 : string_d2) (s2_v315 : string_d2) ⇒
    match s1_v314 as __v316 in ??22 with
    | EmptyString_c2  ⇒ s2_v315
    | String_c3 c_v317 s1_v318 ⇒
      (String_c3‹› c_v317 (cats_i15 s1_v318 s2_v315))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v320 : string_d2) ⇒
    match s_v320 as __v321 in ??23 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v322 s_v323 ⇒ (strlen_i16 s_v323).+1
    end

inductive list_d3 ‹s_s324, t_s325›
  (A_v326 : Type‹s_s324›) : Type‹t_s325›
=
| nil_c4 of
    ‹s_s327, t_s328› (A_v329 : Type‹s_s327›)
    : (list_d3‹s_s327, t_s328› A_v329)
| cons_c5 of
    ‹s_s330, t_s331› (A_v332 : Type‹s_s330›) (hd_v333 : A_v332)
    (tl_v334 : (list_d3‹s_s330, t_s331› A_v332))
    : (list_d3‹s_s330, t_s331› A_v332)

program len_i17 ‹s_s335, t_s336› :
  ∀ {A_v337 : Type‹s_s335›} →
    (list_d3‹??24, t_s336› A_v337) →
      nat ⊗ (list_d3‹??25, t_s336› A_v337)
=
  fn {A_v340 : Type‹s_s335›}
     (xs_v341 : (list_d3‹??24, t_s336› A_v340)) ⇒
    match xs_v341 as __v342 in ??26 with
    | nil_c4  ⇒ ⟨0, nil_c4‹??36, ??35›⟩
    | cons_c5 x_v343 xs_v344 ⇒
      match (len_i17‹??29, ??28› ??27 xs_v344) as __v345 in ??30 with
      | ⟨n_v346, xs_v347⟩ ⇒
        ⟨n_v346.+1, (cons_c5‹??33, ??32› x_v343 xs_v347)⟩
      end
    end

program append_i18 ‹s_s348, t_s349› :
  ∀ {A_v350 : Type‹s_s348›} →
    (list_d3‹??37, t_s349› A_v350) →
      (list_d3‹??38, t_s349› A_v350) ⊸ (list_d3‹??40, ??39› A_v350)
=
  fn {A_v353 : Type‹s_s348›}
     (xs_v354 : (list_d3‹??37, t_s349› A_v353)) ⇒
    ln (ys_v355 : ??41) ⇒
      match xs_v354 as __v356 in ??42 with
      | nil_c4  ⇒ ys_v355
      | cons_c5 x_v357 xs_v358 ⇒
        (cons_c5‹??48, ??47›
          x_v357 (append_i18‹??45, ??44› ??43 xs_v358 ys_v355))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v360 : unit) ⇒
    ⇑(b_v361 : bool) ⇒
      match b_v361 as __v362 in ??49 with
      | true ⇒ ⇓(__v363 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v365 : unit) ⇒
    ⇑(b_v366 : bool) ⇒
      match b_v366 as __v367 in ??50 with
      | true ⇒ ⇑(__v368 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v370 : unit) ⇒
    ⇑(b_v371 : bool) ⇒
      match b_v371 as __v372 in ??51 with
      | true ⇒ ⇑(__v373 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v375 : unit) ⇒
    let ch_v376 ⇐ open stdin in
    let ch_v377 ⇐ (send ch_v376 true) in
    let __v378 ⇐ recv ch_v377 in
    match __v378 as __v379 in ??52 with
    | ⟨s_v380, ch_v381⟩ ⇒
      let ch_v382 ⇐ (send ch_v381 false) in
      let __v383 ⇐ close ch_v382 in return s_v380
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v385 : string_d2) ⇒
    let ch_v386 ⇐ open stdout in
    let ch_v387 ⇐ (send ch_v386 true) in
    let ch_v388 ⇐ (send ch_v387 s_v385) in
    let ch_v389 ⇐ (send ch_v388 false) in close ch_v389

program prerr_i27 : string_d2 → IO unit =
  fn (s_v391 : string_d2) ⇒
    let ch_v392 ⇐ open stderr in
    let ch_v393 ⇐ (send ch_v392 true) in
    let ch_v394 ⇐ (send ch_v393 s_v391) in
    let ch_v395 ⇐ (send ch_v394 false) in close ch_v395

program digits_i28 : (list_d3‹??53, U› ??54) =
  (cons_c5‹??87, ??86›
    "0"
    (cons_c5‹??84, ??83›
      "1"
      (cons_c5‹??81, ??80›
        "2"
        (cons_c5‹??78, ??77›
          "3"
          (cons_c5‹??75, ??74›
            "4"
            (cons_c5‹??72, ??71›
              "5"
              (cons_c5‹??69, ??68›
                "6"
                (cons_c5‹??66, ??65›
                  "7"
                  (cons_c5‹??63, ??62›
                    "8" (cons_c5‹??60, ??59› "9" nil_c4‹??57, ??56›))))))))))

program get_at_i29 :
  ∀ {A_v396 : U} →
    nat → (list_d3‹??88, U› A_v396) → A_v396 → A_v396
=
  fn {A_v400 : U} (n_v401 : nat) (xs_v402 : (list_d3‹??88, U› A_v400))
     (a_v403 : A_v400) ⇒
    match n_v401 as __v404 in ??89 with
    | O ⇒
      match xs_v402 as __v405 in ??92 with
      | nil_c4  ⇒ a_v403 | cons_c5 x_v406 __v407 ⇒ x_v406
      end
    | S n_v408 ⇒
      match xs_v402 as __v409 in ??90 with
      | nil_c4  ⇒ a_v403
      | cons_c5 __v410 xs_v411 ⇒ (get_at_i29 ??91 n_v408 xs_v411 a_v403)
      end
    end

program string_of_digit_i30 : nat → string_d2 =
  fn (n_v413 : nat) ⇒
    (get_at_i29 ??93 n_v413 digits_i28 EmptyString_c2‹›)

program string_of_nat_i31 : nat → string_d2 =
  fn (n_v415 : nat) ⇒
    let s_v416 = (string_of_digit_i30 (modn_i14 n_v415 10)) in
    let n_v417 = (divn_i13 n_v415 10) in
    match (ltn_i6 0 n_v417) as __v418 in ??94 with
    | true ⇒ (cats_i15 (string_of_nat_i31 n_v417) s_v416)
    | false ⇒ s_v416
    end

program pow_i32 : nat → nat → nat =
  fn (n_v421 : nat) (m_v422 : nat) ⇒
    match m_v422 as __v423 in ??95 with
    | O ⇒ 1 | S m_v424 ⇒ (muln_i12 n_v421 (pow_i32 n_v421 m_v424))
    end

logical DH_i33 : nat → nat → proto =
  fn (p_v427 : nat) (g_v428 : nat) ⇒
    ⇑{a_v429 : nat} ⇒
      ⇑(x_v430 : nat) ⇒
        ⇑{__v431 :
          x_v430 ≡ (modn_i14 (pow_i32 g_v428 a_v429) p_v427)} ⇒
          ⇓{b_v432 : nat} ⇒
            ⇓(y_v433 : nat) ⇒
              ⇓{__v434 :
                y_v433 ≡ (modn_i14 (pow_i32 g_v428 b_v432) p_v427)} ⇒ end

logical DH_ch_i34 : nat → nat → L =
  fn (p_v437 : nat) (g_v438 : nat) ⇒ ch⟨(DH_i33 p_v437 g_v438)⟩

logical DH_hc_i35 : nat → nat → L =
  fn (p_v441 : nat) (g_v442 : nat) ⇒ hc⟨(DH_i33 p_v441 g_v442)⟩

program alice_i36 :
  nat →
    ∀ (p_v444 : nat) →
      ∀ (g_v445 : nat) → (DH_ch_i34 p_v444 g_v445) → IO unit
=
  fn (a_v447 : nat) (p_v448 : nat) (g_v449 : nat)
     (ch_v450 : (DH_ch_i34 p_v448 g_v449)) ⇒
    let ch_v451 ⇐ (send ch_v450 a_v447) in
    let ch_v452 ⇐ (send ch_v451 (modn_i14 (pow_i32 g_v449 a_v447) p_v448))
    in
    let ch_v453 ⇐ (send ch_v452 refl ??98) in
    let __v454 ⇐ recv ch_v453 in
    match __v454 as __v455 in ??101 with
    | ⟨{b_v456}, ch_v457⟩ ⇒
      let __v458 ⇐ recv ch_v457 in
      match __v458 as __v459 in ??100 with
      | ⟨B_v460, ch_v461⟩ ⇒
        let __v462 ⇐ recv ch_v461 in
        match __v462 as __v463 in ??99 with
        | ⟨{pf_v464}, ch_v465⟩ ⇒
          let s_v466 = (modn_i14 (pow_i32 B_v460 a_v447) p_v448) in
          let __v467 ⇐ close ch_v465 in
          (print_i26 (cats_i15 (string_of_nat_i31 s_v466) "\n"))
        end
      end
    end

program bob_i37 :
  nat →
    ∀ (p_v469 : nat) →
      ∀ (g_v470 : nat) → (DH_hc_i35 p_v469 g_v470) → IO unit
=
  fn (b_v472 : nat) (p_v473 : nat) (g_v474 : nat)
     (ch_v475 : (DH_hc_i35 p_v473 g_v474)) ⇒
    let __v476 ⇐ recv ch_v475 in
    match __v476 as __v477 in ??105 with
    | ⟨{a_v478}, ch_v479⟩ ⇒
      let __v480 ⇐ recv ch_v479 in
      match __v480 as __v481 in ??104 with
      | ⟨A_v482, ch_v483⟩ ⇒
        let __v484 ⇐ recv ch_v483 in
        match __v484 as __v485 in ??103 with
        | ⟨{pf_v486}, ch_v487⟩ ⇒
          let ch_v488 ⇐ (send ch_v487 b_v472) in
          let ch_v489 ⇐
            (send ch_v488 (modn_i14 (pow_i32 g_v474 b_v472) p_v473))
          in
          let ch_v490 ⇐ (send ch_v489 refl ??102) in
          let s_v491 = (modn_i14 (pow_i32 A_v482 b_v472) p_v473) in
          let __v492 ⇐ close ch_v490 in
          (print_i26 (cats_i15 (string_of_nat_i31 s_v491) "\n"))
        end
      end
    end

program key_exchange_i38 : unit → IO unit =
  fn (__v494 : unit) ⇒
    let p_v495 = 23 in
    let g_v496 = 5 in
    let c_v497 ⇐
      fork (c_v498 : (DH_ch_i34 p_v495 g_v496)) in
        (alice_i36 4 p_v495 g_v496 c_v498)
    in
    let c0_v499 ⇐
      fork (c0_v500 :
        ch⟨⇓(__v501 : (DH_hc_i35 p_v495 g_v496)) ⇒ end⟩)
      in
        let __v502 ⇐ recv c0_v500 in
        match __v502 as __v503 in ??106 with
        | ⟨c_v504, c0_v505⟩ ⇒
          let __v506 ⇐ close c0_v505 in (bob_i37 3 p_v495 g_v496 c_v504)
        end
    in let c0_v507 ⇐ (send c0_v499 c_v497) in close c0_v507

program main_i39 : IO unit = (key_exchange_i38 ())

trans01 success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v8290 : bool) (b2_v8291 : bool) ⇒
    match b1_v8290 as __v8292 in bool with
    | true ⇒ b2_v8291 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v8295 : bool) (b2_v8296 : bool) ⇒
    match b1_v8295 as __v8297 in bool with
    | true ⇒ true | false ⇒ b2_v8296
    end

program notb_i3 : bool → bool =
  fn (b_v8299 : bool) ⇒
    match b_v8299 as __v8300 in bool with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v8303 : nat) (y_v8304 : nat) ⇒
    match x_v8303 as __v8305 in bool with
    | O ⇒ true
    | S x_v8306 ⇒
      match y_v8304 as __v8307 in bool with
      | O ⇒ false | S y_v8308 ⇒ (lten_i4 x_v8306 y_v8308)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v8311 : nat) (y_v8312 : nat) ⇒
    match x_v8311 as __v8313 in bool with
    | O ⇒
      match y_v8312 as __v8314 in bool with
      | O ⇒ true | S __v8315 ⇒ false
      end
    | S x_v8316 ⇒
      match y_v8312 as __v8317 in bool with
      | O ⇒ true | S y_v8318 ⇒ (gten_i5 x_v8316 y_v8318)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v8321 : nat) (y_v8322 : nat) ⇒
    match x_v8321 as __v8323 in bool with
    | O ⇒
      match y_v8322 as __v8324 in bool with
      | O ⇒ false | S y_v8325 ⇒ true
      end
    | S x_v8326 ⇒
      match y_v8322 as __v8327 in bool with
      | O ⇒ false | S y_v8328 ⇒ (ltn_i6 x_v8326 y_v8328)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v8331 : nat) (y_v8332 : nat) ⇒
    match x_v8331 as __v8333 in bool with
    | O ⇒ false
    | S x_v8334 ⇒
      match y_v8332 as __v8335 in bool with
      | O ⇒ true | S y_v8336 ⇒ (gtn_i7 x_v8334 y_v8336)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v8339 : nat) (y_v8340 : nat) ⇒
    match x_v8339 as __v8341 in bool with
    | O ⇒
      match y_v8340 as __v8342 in bool with
      | O ⇒ true | S __v8343 ⇒ false
      end
    | S x_v8344 ⇒
      match y_v8340 as __v8345 in bool with
      | O ⇒ false | S y_v8346 ⇒ (eqn_i8 x_v8344 y_v8346)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v8348 : nat) ⇒
    match x_v8348 as __v8349 in nat with
    | O ⇒ 0 | S x_v8350 ⇒ x_v8350
    end

program addn_i10 : nat → nat → nat =
  fn (x_v8353 : nat) (y_v8354 : nat) ⇒
    match x_v8353 as __v8355 in nat with
    | O ⇒ y_v8354 | S x_v8356 ⇒ (addn_i10 x_v8356 y_v8354).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v8359 : nat) (y_v8360 : nat) ⇒
    match y_v8360 as __v8361 in nat with
    | O ⇒ x_v8359 | S y_v8362 ⇒ (subn_i11 (pred_i9 x_v8359) y_v8362)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v8365 : nat) (y_v8366 : nat) ⇒
    match x_v8365 as __v8367 in nat with
    | O ⇒ 0 | S x_v8368 ⇒ (addn_i10 y_v8366 (muln_i12 x_v8368 y_v8366))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v8371 : nat) (y_v8372 : nat) ⇒
    match (ltn_i6 x_v8371 y_v8372) as __v8373 in nat with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v8371 y_v8372) y_v8372).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v8376 : nat) (y_v8377 : nat) ⇒
    (subn_i11 x_v8376 (muln_i12 (divn_i13 x_v8376 y_v8377) y_v8377))

inductive char_d1 : U =
| Char_c1 of (n_v8378 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v8379 : char_d1) (s_v8380 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v8383 : string_d2) (s2_v8384 : string_d2) ⇒
    match s1_v8383 as __v8385 in string_d2 with
    | EmptyString_c2  ⇒ s2_v8384
    | String_c3 c_v8386 s1_v8387 ⇒
      (String_c3‹› c_v8386 (cats_i15 s1_v8387 s2_v8384))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v8389 : string_d2) ⇒
    match s_v8389 as __v8390 in nat with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v8391 s_v8392 ⇒ (strlen_i16 s_v8392).+1
    end

inductive list_d3 ‹s_s8393, t_s8394›
  (A_v8395 : Type‹s_s8393›) : Type‹t_s8394›
=
| nil_c4 of
    ‹s_s8396, t_s8397› (A_v8398 : Type‹s_s8396›)
    : (list_d3‹s_s8396, t_s8397› A_v8398)
| cons_c5 of
    ‹s_s8399, t_s8400› (A_v8401 : Type‹s_s8399›) (hd_v8402 : A_v8401)
    (tl_v8403 : (list_d3‹s_s8399, t_s8400› A_v8401))
    : (list_d3‹s_s8399, t_s8400› A_v8401)

program len_i17 ‹s_s8404, t_s8405› :
  ∀ {A_v8406 : Type‹s_s8404›} →
    (list_d3‹s_s8404, t_s8405› A_v8406) →
      nat ⊗ (list_d3‹s_s8404, t_s8405› A_v8406)
=
  fn {A_v8409 : Type‹s_s8404›}
     (xs_v8410 : (list_d3‹s_s8404, t_s8405› A_v8409)) ⇒
    match xs_v8410 as __v8411 in
      nat ⊗ (list_d3‹s_s8404, t_s8405› A_v8409) with
    | nil_c4  ⇒ ⟨0, nil_c4‹s_s8404, t_s8405›⟩
    | cons_c5 x_v8413 xs_v8414 ⇒
      match (len_i17‹s_s8404, t_s8405› A_v8409 xs_v8414) as __v8415 in
        nat ⊗ (list_d3‹s_s8404, t_s8405› A_v8409) with
      | ⟨n_v8417, xs_v8418⟩ ⇒
        ⟨n_v8417.+1, (cons_c5‹s_s8404, t_s8405› x_v8413 xs_v8418)⟩
      end
    end

program append_i18 ‹s_s8419, t_s8420› :
  ∀ {A_v8421 : Type‹s_s8419›} →
    (list_d3‹s_s8419, t_s8420› A_v8421) →
      (list_d3‹s_s8419, t_s8420› A_v8421) ⊸
        (list_d3‹s_s8419, t_s8420› A_v8421)
=
  fn {A_v8424 : Type‹s_s8419›}
     (xs_v8425 : (list_d3‹s_s8419, t_s8420› A_v8424)) ⇒
    ln (ys_v8426 : (list_d3‹s_s8419, t_s8420› A_v8424)) ⇒
      match xs_v8425 as __v8427 in
        (list_d3‹s_s8419, t_s8420› A_v8424) with
      | nil_c4  ⇒ ys_v8426
      | cons_c5 x_v8428 xs_v8429 ⇒
        (cons_c5‹s_s8419, t_s8420›
          x_v8428
          (append_i18‹s_s8419, t_s8420› A_v8424 xs_v8429 ys_v8426))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v8431 : unit) ⇒
    ⇑(b_v8432 : bool) ⇒
      match b_v8432 as __v8433 in proto with
      | true ⇒ ⇓(__v8434 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v8436 : unit) ⇒
    ⇑(b_v8437 : bool) ⇒
      match b_v8437 as __v8438 in proto with
      | true ⇒ ⇑(__v8439 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v8441 : unit) ⇒
    ⇑(b_v8442 : bool) ⇒
      match b_v8442 as __v8443 in proto with
      | true ⇒ ⇑(__v8444 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v8446 : unit) ⇒
    let ch_v8447 ⇐ open stdin in
    let ch_v8448 ⇐ (send ch_v8447 true) in
    let __v8449 ⇐ recv ch_v8448 in
    match __v8449 as __v8450 in IO string_d2 with
    | ⟨s_v8451, ch_v8452⟩ ⇒
      let ch_v8453 ⇐ (send ch_v8452 false) in
      let __v8454 ⇐ close ch_v8453 in return s_v8451
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v8456 : string_d2) ⇒
    let ch_v8457 ⇐ open stdout in
    let ch_v8458 ⇐ (send ch_v8457 true) in
    let ch_v8459 ⇐ (send ch_v8458 s_v8456) in
    let ch_v8460 ⇐ (send ch_v8459 false) in close ch_v8460

program prerr_i27 : string_d2 → IO unit =
  fn (s_v8462 : string_d2) ⇒
    let ch_v8463 ⇐ open stderr in
    let ch_v8464 ⇐ (send ch_v8463 true) in
    let ch_v8465 ⇐ (send ch_v8464 s_v8462) in
    let ch_v8466 ⇐ (send ch_v8465 false) in close ch_v8466

program digits_i28 : (list_d3‹U, U› string_d2) =
  (cons_c5‹U, U›
    "0"
    (cons_c5‹U, U›
      "1"
      (cons_c5‹U, U›
        "2"
        (cons_c5‹U, U›
          "3"
          (cons_c5‹U, U›
            "4"
            (cons_c5‹U, U›
              "5"
              (cons_c5‹U, U›
                "6"
                (cons_c5‹U, U›
                  "7"
                  (cons_c5‹U, U›
                    "8" (cons_c5‹U, U› "9" nil_c4‹U, U›))))))))))

program get_at_i29 :
  ∀ {A_v8467 : U} →
    nat → (list_d3‹U, U› A_v8467) → A_v8467 → A_v8467
=
  fn {A_v8471 : U} (n_v8472 : nat) (xs_v8473 : (list_d3‹U, U› A_v8471))
     (a_v8474 : A_v8471) ⇒
    match n_v8472 as __v8475 in A_v8471 with
    | O ⇒
      match xs_v8473 as __v8476 in A_v8471 with
      | nil_c4  ⇒ a_v8474 | cons_c5 x_v8477 __v8478 ⇒ x_v8477
      end
    | S n_v8479 ⇒
      match xs_v8473 as __v8480 in A_v8471 with
      | nil_c4  ⇒ a_v8474
      | cons_c5 __v8481 xs_v8482 ⇒
        (get_at_i29 A_v8471 n_v8479 xs_v8482 a_v8474)
      end
    end

program string_of_digit_i30 : nat → string_d2 =
  fn (n_v8484 : nat) ⇒
    (get_at_i29 string_d2 n_v8484 digits_i28 EmptyString_c2‹›)

program string_of_nat_i31 : nat → string_d2 =
  fn (n_v8486 : nat) ⇒
    let s_v8487 = (string_of_digit_i30 (modn_i14 n_v8486 10)) in
    let n_v8488 = (divn_i13 n_v8486 10) in
    match (ltn_i6 0 n_v8488) as __v8489 in string_d2 with
    | true ⇒ (cats_i15 (string_of_nat_i31 n_v8488) s_v8487)
    | false ⇒ s_v8487
    end

program pow_i32 : nat → nat → nat =
  fn (n_v8492 : nat) (m_v8493 : nat) ⇒
    match m_v8493 as __v8494 in nat with
    | O ⇒ 1 | S m_v8495 ⇒ (muln_i12 n_v8492 (pow_i32 n_v8492 m_v8495))
    end

logical DH_i33 : nat → nat → proto =
  fn (p_v8498 : nat) (g_v8499 : nat) ⇒
    ⇑{a_v8500 : nat} ⇒
      ⇑(x_v8501 : nat) ⇒
        ⇑{__v8502 :
          x_v8501 ≡ (modn_i14 (pow_i32 g_v8499 a_v8500) p_v8498)} ⇒
          ⇓{b_v8503 : nat} ⇒
            ⇓(y_v8504 : nat) ⇒
              ⇓{__v8505 :
                y_v8504 ≡ (modn_i14 (pow_i32 g_v8499 b_v8503) p_v8498)} ⇒
                end

logical DH_ch_i34 : nat → nat → L =
  fn (p_v8508 : nat) (g_v8509 : nat) ⇒ ch⟨(DH_i33 p_v8508 g_v8509)⟩

logical DH_hc_i35 : nat → nat → L =
  fn (p_v8512 : nat) (g_v8513 : nat) ⇒ hc⟨(DH_i33 p_v8512 g_v8513)⟩

program alice_i36 :
  nat →
    ∀ (p_v8515 : nat) →
      ∀ (g_v8516 : nat) → (DH_ch_i34 p_v8515 g_v8516) → IO unit
=
  fn (a_v8518 : nat) (p_v8519 : nat) (g_v8520 : nat)
     (ch_v8521 : (DH_ch_i34 p_v8519 g_v8520)) ⇒
    let ch_v8522 ⇐ (send ch_v8521 a_v8518) in
    let ch_v8523 ⇐
      (send ch_v8522 (modn_i14 (pow_i32 g_v8520 a_v8518) p_v8519))
    in
    let ch_v8524 ⇐
      (send ch_v8523 refl (modn_i14 (pow_i32 g_v8520 a_v8518) p_v8519))
    in
    let __v8525 ⇐ recv ch_v8524 in
    match __v8525 as __v8526 in IO unit with
    | ⟨{b_v8527}, ch_v8528⟩ ⇒
      let __v8529 ⇐ recv ch_v8528 in
      match __v8529 as __v8530 in IO unit with
      | ⟨B_v8531, ch_v8532⟩ ⇒
        let __v8533 ⇐ recv ch_v8532 in
        match __v8533 as __v8534 in IO unit with
        | ⟨{pf_v8535}, ch_v8536⟩ ⇒
          let s_v8537 = (modn_i14 (pow_i32 B_v8531 a_v8518) p_v8519) in
          let __v8538 ⇐ close ch_v8536 in
          (print_i26 (cats_i15 (string_of_nat_i31 s_v8537) "\n"))
        end
      end
    end

program bob_i37 :
  nat →
    ∀ (p_v8540 : nat) →
      ∀ (g_v8541 : nat) → (DH_hc_i35 p_v8540 g_v8541) → IO unit
=
  fn (b_v8543 : nat) (p_v8544 : nat) (g_v8545 : nat)
     (ch_v8546 : (DH_hc_i35 p_v8544 g_v8545)) ⇒
    let __v8547 ⇐ recv ch_v8546 in
    match __v8547 as __v8548 in IO unit with
    | ⟨{a_v8549}, ch_v8550⟩ ⇒
      let __v8551 ⇐ recv ch_v8550 in
      match __v8551 as __v8552 in IO unit with
      | ⟨A_v8553, ch_v8554⟩ ⇒
        let __v8555 ⇐ recv ch_v8554 in
        match __v8555 as __v8556 in IO unit with
        | ⟨{pf_v8557}, ch_v8558⟩ ⇒
          let ch_v8559 ⇐ (send ch_v8558 b_v8543) in
          let ch_v8560 ⇐
            (send ch_v8559 (modn_i14 (pow_i32 g_v8545 b_v8543) p_v8544))
          in
          let ch_v8561 ⇐
            (send ch_v8560 refl (modn_i14 (pow_i32 g_v8545 b_v8543) p_v8544))
          in
          let s_v8562 = (modn_i14 (pow_i32 A_v8553 b_v8543) p_v8544) in
          let __v8563 ⇐ close ch_v8561 in
          (print_i26 (cats_i15 (string_of_nat_i31 s_v8562) "\n"))
        end
      end
    end

program key_exchange_i38 : unit → IO unit =
  fn (__v8565 : unit) ⇒
    let p_v8566 = 23 in
    let g_v8567 = 5 in
    let c_v8568 ⇐
      fork (c_v8569 : (DH_ch_i34 p_v8566 g_v8567)) in
        (alice_i36 4 p_v8566 g_v8567 c_v8569)
    in
    let c0_v8570 ⇐
      fork (c0_v8571 :
        ch⟨⇓(__v8572 : (DH_hc_i35 p_v8566 g_v8567)) ⇒ end⟩)
      in
        let __v8573 ⇐ recv c0_v8571 in
        match __v8573 as __v8574 in IO unit with
        | ⟨c_v8575, c0_v8576⟩ ⇒
          let __v8577 ⇐ close c0_v8576 in
          (bob_i37 3 p_v8566 g_v8567 c_v8575)
        end
    in let c0_v8578 ⇐ (send c0_v8570 c_v8568) in close c0_v8578

program main_i39 : IO unit = (key_exchange_i38 ())

trans1e success--------------------------

def andb_i1 =
  fn b1_v9056 b2_v9057 ⇒
    match b1_v9056 with
    | true ⇒ b2_v9057 | false ⇒ false
    end

def orb_i2 =
  fn b1_v9058 b2_v9059 ⇒
    match b1_v9058 with
    | true ⇒ true | false ⇒ b2_v9059
    end

def notb_i3 =
  fn b_v9060 ⇒ match b_v9060 with
                 | true ⇒ false | false ⇒ true
                 end

def lten_i4 =
  fn x_v9061 y_v9062 ⇒
    match x_v9061 with
    | O ⇒ true
    | S x_v9063 ⇒
      match y_v9062 with
      | O ⇒ false | S y_v9064 ⇒ ((lten_i4 x_v9063) y_v9064)
      end
    end

def gten_i5 =
  fn x_v9065 y_v9066 ⇒
    match x_v9065 with
    | O ⇒ match y_v9066 with
            | O ⇒ true | S __v9067 ⇒ false
            end
    | S x_v9068 ⇒
      match y_v9066 with
      | O ⇒ true | S y_v9069 ⇒ ((gten_i5 x_v9068) y_v9069)
      end
    end

def ltn_i6 =
  fn x_v9070 y_v9071 ⇒
    match x_v9070 with
    | O ⇒ match y_v9071 with
            | O ⇒ false | S y_v9072 ⇒ true
            end
    | S x_v9073 ⇒
      match y_v9071 with
      | O ⇒ false | S y_v9074 ⇒ ((ltn_i6 x_v9073) y_v9074)
      end
    end

def gtn_i7 =
  fn x_v9075 y_v9076 ⇒
    match x_v9075 with
    | O ⇒ false
    | S x_v9077 ⇒
      match y_v9076 with
      | O ⇒ true | S y_v9078 ⇒ ((gtn_i7 x_v9077) y_v9078)
      end
    end

def eqn_i8 =
  fn x_v9079 y_v9080 ⇒
    match x_v9079 with
    | O ⇒ match y_v9080 with
            | O ⇒ true | S __v9081 ⇒ false
            end
    | S x_v9082 ⇒
      match y_v9080 with
      | O ⇒ false | S y_v9083 ⇒ ((eqn_i8 x_v9082) y_v9083)
      end
    end

def pred_i9 =
  fn x_v9084 ⇒ match x_v9084 with
                 | O ⇒ 0 | S x_v9085 ⇒ x_v9085
                 end

def addn_i10 =
  fn x_v9086 y_v9087 ⇒
    match x_v9086 with
    | O ⇒ y_v9087 | S x_v9088 ⇒ ((addn_i10 x_v9088) y_v9087).+1
    end

def subn_i11 =
  fn x_v9089 y_v9090 ⇒
    match y_v9090 with
    | O ⇒ x_v9089 | S y_v9091 ⇒ ((subn_i11 (pred_i9 x_v9089)) y_v9091)
    end

def muln_i12 =
  fn x_v9092 y_v9093 ⇒
    match x_v9092 with
    | O ⇒ 0
    | S x_v9094 ⇒ ((addn_i10 y_v9093) ((muln_i12 x_v9094) y_v9093))
    end

def divn_i13 =
  fn x_v9095 y_v9096 ⇒
    match ((ltn_i6 x_v9095) y_v9096) with
    | true ⇒ 0
    | false ⇒ ((divn_i13 ((subn_i11 x_v9095) y_v9096)) y_v9096).+1
    end

def modn_i14 =
  fn x_v9097 y_v9098 ⇒
    ((subn_i11 x_v9097) ((muln_i12 ((divn_i13 x_v9097) y_v9098)) y_v9098))

data char_d1 =
| Char_c1 of size(1)

data string_d2 =
| EmptyString_c2 of size(0) | String_c3 of size(2)

def cats_i15 =
  fn s1_v9099 s2_v9100 ⇒
    match s1_v9099 with
    | EmptyString_c2  ⇒ s2_v9100
    | String_c3 c_v9101 s1_v9102 ⇒
      (String_c3 c_v9101 ((cats_i15 s1_v9102) s2_v9100))
    end

def strlen_i16 =
  fn s_v9103 ⇒
    match s_v9103 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v9104 s_v9105 ⇒ (strlen_i16 s_v9105).+1
    end

data listUU_d7 =
| nilUU_c12 of size(0) | consUU_c13 of size(2)

data listUL_d6 =
| nilUL_c10 of size(0) | consUL_c11 of size(2)

data listLU_d5 =
| nilLU_c8 of size(0)

data listLL_d4 =
| nilLL_c6 of size(0) | consLL_c7 of size(2)

def lenUU_i43 =
  fn A_v9106 xs_v9107 ⇒
    match xs_v9107 with
    | nilUU_c12  ⇒ (0, nilUU_c12)
    | consUU_c13 x_v9108 xs_v9109 ⇒
      match ((lenUU_i43 NULL) xs_v9109) with
      | (n_v9110, xs_v9111) ⇒ (n_v9110.+1, (consUU_c13 x_v9108 xs_v9111))
      end
    end

def lenUL_i42 =
  fn A_v9112 xs_v9113 ⇒
    match xs_v9113 with
    | nilUL_c10  ⇒ (0, nilUL_c10)
    | consUL_c11 x_v9114 xs_v9115 ⇒
      match ((lenUL_i42 NULL) xs_v9115) with
      | (n_v9116, xs_v9117) ⇒ (n_v9116.+1, (consUL_c11 x_v9114 xs_v9117))
      end
    end

def lenLL_i40 =
  fn A_v9118 xs_v9119 ⇒
    match xs_v9119 with
    | nilLL_c6  ⇒ (0, nilLL_c6)
    | consLL_c7 x_v9120 xs_v9121 ⇒
      match ((lenLL_i40 NULL) xs_v9121) with
      | (n_v9122, xs_v9123) ⇒ (n_v9122.+1, (consLL_c7 x_v9120 xs_v9123))
      end
    end

def appendUU_i47 =
  fn A_v9124 xs_v9125 ⇒
    ln ys_v9126 ⇒
      match xs_v9125 with
      | nilUU_c12  ⇒ ys_v9126
      | consUU_c13 x_v9127 xs_v9128 ⇒
        (consUU_c13 x_v9127 (((appendUU_i47 NULL) xs_v9128) ys_v9126))
      end

def appendUL_i46 =
  fn A_v9129 xs_v9130 ⇒
    ln ys_v9131 ⇒
      match xs_v9130 with
      | nilUL_c10  ⇒ ys_v9131
      | consUL_c11 x_v9132 xs_v9133 ⇒
        (consUL_c11 x_v9132 (((appendUL_i46 NULL) xs_v9133) ys_v9131))
      end

def appendLL_i44 =
  fn A_v9134 xs_v9135 ⇒
    ln ys_v9136 ⇒
      match xs_v9135 with
      | nilLL_c6  ⇒ ys_v9136
      | consLL_c7 x_v9137 xs_v9138 ⇒
        (consLL_c7 x_v9137 (((appendLL_i44 NULL) xs_v9138) ys_v9136))
      end

def readline_i25 =
  fn __v9139 ⇒
    let ch_v9140 ⇐ open stdin in
    let ch_v9141 ⇐ (send ch_v9140 true) in
    let __v9142 ⇐ recv ch_v9141 in
    match __v9142 with
    | (s_v9143, ch_v9144) ⇒
      let ch_v9145 ⇐ (send ch_v9144 false) in
      let __v9146 ⇐ close⇑ ch_v9145 in return s_v9143
    end

def print_i26 =
  fn s_v9147 ⇒
    let ch_v9148 ⇐ open stdout in
    let ch_v9149 ⇐ (send ch_v9148 true) in
    let ch_v9150 ⇐ (send ch_v9149 s_v9147) in
    let ch_v9151 ⇐ (send ch_v9150 false) in close⇑ ch_v9151

def prerr_i27 =
  fn s_v9152 ⇒
    let ch_v9153 ⇐ open stderr in
    let ch_v9154 ⇐ (send ch_v9153 true) in
    let ch_v9155 ⇐ (send ch_v9154 s_v9152) in
    let ch_v9156 ⇐ (send ch_v9155 false) in close⇑ ch_v9156

def digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

def get_at_i29 =
  fn A_v9157 n_v9158 xs_v9159 a_v9160 ⇒
    match n_v9158 with
    | O ⇒
      match xs_v9159 with
      | nilUU_c12  ⇒ a_v9160 | consUU_c13 x_v9161 __v9162 ⇒ x_v9161
      end
    | S n_v9163 ⇒
      match xs_v9159 with
      | nilUU_c12  ⇒ a_v9160
      | consUU_c13 __v9164 xs_v9165 ⇒
        ((((get_at_i29 NULL) n_v9163) xs_v9165) a_v9160)
      end
    end

def string_of_digit_i30 =
  fn n_v9166 ⇒ ((((get_at_i29 NULL) n_v9166) digits_i28) EmptyString_c2)

def string_of_nat_i31 =
  fn n_v9167 ⇒
    let s_v9168 = (string_of_digit_i30 ((modn_i14 n_v9167) 10)) in
    let n_v9169 = ((divn_i13 n_v9167) 10) in
    match ((ltn_i6 0) n_v9169) with
    | true ⇒ ((cats_i15 (string_of_nat_i31 n_v9169)) s_v9168)
    | false ⇒ s_v9168
    end

def pow_i32 =
  fn n_v9170 m_v9171 ⇒
    match m_v9171 with
    | O ⇒ 1
    | S m_v9172 ⇒ ((muln_i12 n_v9170) ((pow_i32 n_v9170) m_v9172))
    end

def alice_i36 =
  fn a_v9173 p_v9174 g_v9175 ch_v9176 ⇒
    let ch_v9177 ⇐ ({send} ch_v9176 NULL) in
    let ch_v9178 ⇐
      (send ch_v9177 ((modn_i14 ((pow_i32 g_v9175) a_v9173)) p_v9174))
    in
    let ch_v9179 ⇐ ({send} ch_v9178 NULL) in
    let __v9180 ⇐ {recv} ch_v9179 in
    match __v9180 with
    | (b_v9181, ch_v9182) ⇒
      let __v9183 ⇐ recv ch_v9182 in
      match __v9183 with
      | (B_v9184, ch_v9185) ⇒
        let __v9186 ⇐ {recv} ch_v9185 in
        match __v9186 with
        | (pf_v9187, ch_v9188) ⇒
          let s_v9189 = ((modn_i14 ((pow_i32 B_v9184) a_v9173)) p_v9174) in
          let __v9190 ⇐ close⇑ ch_v9188 in
          (print_i26 ((cats_i15 (string_of_nat_i31 s_v9189)) "\n"))
        end
      end
    end

def bob_i37 =
  fn b_v9191 p_v9192 g_v9193 ch_v9194 ⇒
    let __v9195 ⇐ {recv} ch_v9194 in
    match __v9195 with
    | (a_v9196, ch_v9197) ⇒
      let __v9198 ⇐ recv ch_v9197 in
      match __v9198 with
      | (A_v9199, ch_v9200) ⇒
        let __v9201 ⇐ {recv} ch_v9200 in
        match __v9201 with
        | (pf_v9202, ch_v9203) ⇒
          let ch_v9204 ⇐ ({send} ch_v9203 NULL) in
          let ch_v9205 ⇐
            (send ch_v9204 ((modn_i14 ((pow_i32 g_v9193) b_v9191)) p_v9192))
          in
          let ch_v9206 ⇐ ({send} ch_v9205 NULL) in
          let s_v9207 = ((modn_i14 ((pow_i32 A_v9199) b_v9191)) p_v9192) in
          let __v9208 ⇐ close⇓ ch_v9206 in
          (print_i26 ((cats_i15 (string_of_nat_i31 s_v9207)) "\n"))
        end
      end
    end

def key_exchange_i38 =
  fn __v9209 ⇒
    let p_v9210 = 23 in
    let g_v9211 = 5 in
    let c_v9212 ⇐
      fork c_v9213 in ((((alice_i36 4) p_v9210) g_v9211) c_v9213)
    in
    let c0_v9214 ⇐
      fork c0_v9215 in
        let __v9216 ⇐ recv c0_v9215 in
        match __v9216 with
        | (c_v9217, c0_v9218) ⇒
          let __v9219 ⇐ close⇑ c0_v9218 in
          ((((bob_i37 3) p_v9210) g_v9211) c_v9217)
        end
    in let c0_v9220 ⇐ (send c0_v9214 c_v9212) in close⇓ c0_v9220

main = (key_exchange_i38 ())

trans12 success--------------------------

fun andb_i1(b1_v9472, b2_v9473) = if b1_v9472 then
                                    b2_v9473
                                  else
                                    0

val andbclo_i48 = fn b1_v9474 b2_v9475 ⇒ andb_i1(b1_v9474, b2_v9475)

fun orb_i2(b1_v9476, b2_v9477) = if b1_v9476 then
                                   1
                                 else
                                   b2_v9477

val orbclo_i49 = fn b1_v9478 b2_v9479 ⇒ orb_i2(b1_v9478, b2_v9479)

fun notb_i3(b_v9480) = if b_v9480 then
                         0
                       else
                         1

val notbclo_i50 = fn b_v9481 ⇒ notb_i3(b_v9481)

fun lten_i4(x_v9482, y_v9483) =
  let __v9484 = x_v9482 in
  if __v9484 then
    let x_v9485 = __v9484.-1 in
    let __v9486 = y_v9483 in
    if __v9486 then
      let y_v9487 = __v9486.-1 in lten_i4(x_v9485, y_v9487)
    else
      0
  else
    1

val ltenclo_i51 = fn x_v9488 y_v9489 ⇒ lten_i4(x_v9488, y_v9489)

fun gten_i5(x_v9490, y_v9491) =
  let __v9492 = x_v9490 in
  if __v9492 then
    let x_v9493 = __v9492.-1 in
    let __v9494 = y_v9491 in
    if __v9494 then
      let y_v9495 = __v9494.-1 in gten_i5(x_v9493, y_v9495)
    else
      1
  else
    let __v9496 = y_v9491 in
    if __v9496 then
      let __v9497 = __v9496.-1 in 0
    else
      1

val gtenclo_i52 = fn x_v9498 y_v9499 ⇒ gten_i5(x_v9498, y_v9499)

fun ltn_i6(x_v9500, y_v9501) =
  let __v9502 = x_v9500 in
  if __v9502 then
    let x_v9503 = __v9502.-1 in
    let __v9504 = y_v9501 in
    if __v9504 then
      let y_v9505 = __v9504.-1 in ltn_i6(x_v9503, y_v9505)
    else
      0
  else
    let __v9506 = y_v9501 in
    if __v9506 then
      let y_v9507 = __v9506.-1 in 1
    else
      0

val ltnclo_i53 = fn x_v9508 y_v9509 ⇒ ltn_i6(x_v9508, y_v9509)

fun gtn_i7(x_v9510, y_v9511) =
  let __v9512 = x_v9510 in
  if __v9512 then
    let x_v9513 = __v9512.-1 in
    let __v9514 = y_v9511 in
    if __v9514 then
      let y_v9515 = __v9514.-1 in gtn_i7(x_v9513, y_v9515)
    else
      1
  else
    0

val gtnclo_i54 = fn x_v9516 y_v9517 ⇒ gtn_i7(x_v9516, y_v9517)

fun eqn_i8(x_v9518, y_v9519) =
  let __v9520 = x_v9518 in
  if __v9520 then
    let x_v9521 = __v9520.-1 in
    let __v9522 = y_v9519 in
    if __v9522 then
      let y_v9523 = __v9522.-1 in eqn_i8(x_v9521, y_v9523)
    else
      0
  else
    let __v9524 = y_v9519 in
    if __v9524 then
      let __v9525 = __v9524.-1 in 0
    else
      1

val eqnclo_i55 = fn x_v9526 y_v9527 ⇒ eqn_i8(x_v9526, y_v9527)

fun pred_i9(x_v9528) =
  let __v9529 = x_v9528 in
  if __v9529 then
    let x_v9530 = __v9529.-1 in x_v9530
  else
    0

val predclo_i56 = fn x_v9531 ⇒ pred_i9(x_v9531)

fun addn_i10(x_v9532, y_v9533) =
  let __v9534 = x_v9532 in
  if __v9534 then
    let x_v9535 = __v9534.-1 in addn_i10(x_v9535, y_v9533).+1
  else
    y_v9533

val addnclo_i57 = fn x_v9536 y_v9537 ⇒ addn_i10(x_v9536, y_v9537)

fun subn_i11(x_v9538, y_v9539) =
  let __v9540 = y_v9539 in
  if __v9540 then
    let y_v9541 = __v9540.-1 in subn_i11(pred_i9(x_v9538), y_v9541)
  else
    x_v9538

val subnclo_i58 = fn x_v9542 y_v9543 ⇒ subn_i11(x_v9542, y_v9543)

fun muln_i12(x_v9544, y_v9545) =
  let __v9546 = x_v9544 in
  if __v9546 then
    let x_v9547 = __v9546.-1 in addn_i10(y_v9545, muln_i12(x_v9547, y_v9545))
  else
    0

val mulnclo_i59 = fn x_v9548 y_v9549 ⇒ muln_i12(x_v9548, y_v9549)

fun divn_i13(x_v9550, y_v9551) =
  if ltn_i6(x_v9550, y_v9551) then
    0
  else
    divn_i13(subn_i11(x_v9550, y_v9551), y_v9551).+1

val divnclo_i60 = fn x_v9552 y_v9553 ⇒ divn_i13(x_v9552, y_v9553)

fun modn_i14(x_v9554, y_v9555) =
  subn_i11(x_v9554, muln_i12(divn_i13(x_v9554, y_v9555), y_v9555))

val modnclo_i61 = fn x_v9556 y_v9557 ⇒ modn_i14(x_v9556, y_v9557)

fun cats_i15(s1_v9558, s2_v9559) =
  match s1_v9558 with
  | EmptyString_c2  ⇒ s2_v9559
  | String_c3 c_v9560 s1_v9561 ⇒
    (String_c3 c_v9560 cats_i15(s1_v9561, s2_v9559))
  end

val catsclo_i62 = fn s1_v9562 s2_v9563 ⇒ cats_i15(s1_v9562, s2_v9563)

fun strlen_i16(s_v9564) =
  match s_v9564 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v9565 s_v9566 ⇒ strlen_i16(s_v9566).+1
  end

val strlenclo_i63 = fn s_v9567 ⇒ strlen_i16(s_v9567)

fun lenUU_i43(A_v9568, xs_v9569) =
  match xs_v9569 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v9570 xs_v9571 ⇒
    match lenUU_i43(NULL, xs_v9571) with
    | (n_v9572, xs_v9573) ⇒ (n_v9572.+1, (consUU_c13 x_v9570 xs_v9573))
    end
  end

val lenUUclo_i64 = fn A_v9574 xs_v9575 ⇒ lenUU_i43(A_v9574, xs_v9575)

fun lenUL_i42(A_v9576, xs_v9577) =
  match xs_v9577 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v9578 xs_v9579 ⇒
    match lenUL_i42(NULL, xs_v9579) with
    | (n_v9580, xs_v9581) ⇒ (n_v9580.+1, (consUL_c11 x_v9578 xs_v9581))
    end
  end

val lenULclo_i65 = fn A_v9582 xs_v9583 ⇒ lenUL_i42(A_v9582, xs_v9583)

fun lenLL_i40(A_v9584, xs_v9585) =
  match xs_v9585 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v9586 xs_v9587 ⇒
    match lenLL_i40(NULL, xs_v9587) with
    | (n_v9588, xs_v9589) ⇒ (n_v9588.+1, (consLL_c7 x_v9586 xs_v9589))
    end
  end

val lenLLclo_i66 = fn A_v9590 xs_v9591 ⇒ lenLL_i40(A_v9590, xs_v9591)

fun appendUU_i47(A_v9592, xs_v9593, ys_v9594) =
  match xs_v9593 with
  | nilUU_c12  ⇒ ys_v9594
  | consUU_c13 x_v9595 xs_v9596 ⇒
    (consUU_c13 x_v9595 appendUU_i47(NULL, xs_v9596, ys_v9594))
  end

val appendUUclo_i67 =
  fn A_v9597 xs_v9598 ⇒
    ln ys_v9599 ⇒ appendUU_i47(A_v9597, xs_v9598, ys_v9599)

fun appendUL_i46(A_v9600, xs_v9601, ys_v9602) =
  match xs_v9601 with
  | nilUL_c10  ⇒ ys_v9602
  | consUL_c11 x_v9603 xs_v9604 ⇒
    (consUL_c11 x_v9603 appendUL_i46(NULL, xs_v9604, ys_v9602))
  end

val appendULclo_i68 =
  fn A_v9605 xs_v9606 ⇒
    ln ys_v9607 ⇒ appendUL_i46(A_v9605, xs_v9606, ys_v9607)

fun appendLL_i44(A_v9608, xs_v9609, ys_v9610) =
  match xs_v9609 with
  | nilLL_c6  ⇒ ys_v9610
  | consLL_c7 x_v9611 xs_v9612 ⇒
    (consLL_c7 x_v9611 appendLL_i44(NULL, xs_v9612, ys_v9610))
  end

val appendLLclo_i69 =
  fn A_v9613 xs_v9614 ⇒
    ln ys_v9615 ⇒ appendLL_i44(A_v9613, xs_v9614, ys_v9615)

fun readline_i25(__v9616) =
  ln __v9617 ⇒
    let ch_v9618 = (ln __v9619 ⇒ open stdin) NULL in
    let ch_v9620 =
      ((fn x_v9621 ⇒ ln __v9622 ⇒ send(ch_v9618, x_v9621)) 1) NULL
    in
    let __v9623 = (ln __v9624 ⇒ recv(ch_v9620)) NULL in
    (match __v9623 with
     | (s_v9625, ch_v9626) ⇒
       ln __v9627 ⇒
         let ch_v9628 =
           ((fn x_v9629 ⇒ ln __v9630 ⇒ send(ch_v9626, x_v9629)) 0) NULL
         in
         let __v9631 = (ln __v9632 ⇒ let __v9633 = ch_v9628 in NULL) NULL
         in (ln __v9634 ⇒ s_v9625) NULL
     end) NULL

val readlineclo_i70 = fn __v9635 ⇒ readline_i25(__v9635)

fun print_i26(s_v9636) =
  ln __v9637 ⇒
    let ch_v9638 = (ln __v9639 ⇒ open stdout) NULL in
    let ch_v9640 =
      ((fn x_v9641 ⇒ ln __v9642 ⇒ send(ch_v9638, x_v9641)) 1) NULL
    in
    let ch_v9643 =
      ((fn x_v9644 ⇒ ln __v9645 ⇒ send(ch_v9640, x_v9644)) s_v9636) NULL
    in
    let ch_v9646 =
      ((fn x_v9647 ⇒ ln __v9648 ⇒ send(ch_v9643, x_v9647)) 0) NULL
    in (ln __v9649 ⇒ let __v9650 = ch_v9646 in NULL) NULL

val printclo_i71 = fn s_v9651 ⇒ print_i26(s_v9651)

fun prerr_i27(s_v9652) =
  ln __v9653 ⇒
    let ch_v9654 = (ln __v9655 ⇒ open stderr) NULL in
    let ch_v9656 =
      ((fn x_v9657 ⇒ ln __v9658 ⇒ send(ch_v9654, x_v9657)) 1) NULL
    in
    let ch_v9659 =
      ((fn x_v9660 ⇒ ln __v9661 ⇒ send(ch_v9656, x_v9660)) s_v9652) NULL
    in
    let ch_v9662 =
      ((fn x_v9663 ⇒ ln __v9664 ⇒ send(ch_v9659, x_v9663)) 0) NULL
    in (ln __v9665 ⇒ let __v9666 = ch_v9662 in NULL) NULL

val prerrclo_i72 = fn s_v9667 ⇒ prerr_i27(s_v9667)

val digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i29(A_v9668, n_v9669, xs_v9670, a_v9671) =
  let __v9672 = n_v9669 in
  if __v9672 then
    let n_v9673 = __v9672.-1 in
    match xs_v9670 with
    | nilUU_c12  ⇒ a_v9671
    | consUU_c13 __v9674 xs_v9675 ⇒
      get_at_i29(NULL, n_v9673, xs_v9675, a_v9671)
    end
  else
    match xs_v9670 with
    | nilUU_c12  ⇒ a_v9671 | consUU_c13 x_v9676 __v9677 ⇒ x_v9676
    end

val get_atclo_i73 =
  fn A_v9678 n_v9679 xs_v9680 a_v9681 ⇒
    get_at_i29(A_v9678, n_v9679, xs_v9680, a_v9681)

fun string_of_digit_i30(n_v9682) =
  get_at_i29(NULL, n_v9682, digits_i28, EmptyString_c2)

val string_of_digitclo_i74 = fn n_v9683 ⇒ string_of_digit_i30(n_v9683)

fun string_of_nat_i31(n_v9684) =
  let s_v9685 = string_of_digit_i30(modn_i14(n_v9684, 10)) in
  let n_v9686 = divn_i13(n_v9684, 10) in
  if ltn_i6(0, n_v9686) then
    cats_i15(string_of_nat_i31(n_v9686), s_v9685)
  else
    s_v9685

val string_of_natclo_i75 = fn n_v9687 ⇒ string_of_nat_i31(n_v9687)

fun pow_i32(n_v9688, m_v9689) =
  let __v9690 = m_v9689 in
  if __v9690 then
    let m_v9691 = __v9690.-1 in muln_i12(n_v9688, pow_i32(n_v9688, m_v9691))
  else
    1

val powclo_i76 = fn n_v9692 m_v9693 ⇒ pow_i32(n_v9692, m_v9693)

fun alice_i36(a_v9694, p_v9695, g_v9696, ch_v9697) =
  ln __v9698 ⇒
    let ch_v9699 = ((fn x_v9700 ⇒ ln __v9701 ⇒ ch_v9697) NULL) NULL in
    let ch_v9702 =
      ((fn x_v9703 ⇒ ln __v9704 ⇒ send(ch_v9699, x_v9703))
         modn_i14(pow_i32(g_v9696, a_v9694), p_v9695))
        NULL
    in
    let ch_v9705 = ((fn x_v9706 ⇒ ln __v9707 ⇒ ch_v9702) NULL) NULL in
    let __v9708 = (ln __v9709 ⇒ (NULL, ch_v9705)) NULL in
    (match __v9708 with
     | (b_v9710, ch_v9711) ⇒
       ln __v9712 ⇒
         let __v9713 = (ln __v9714 ⇒ recv(ch_v9711)) NULL in
         (match __v9713 with
          | (B_v9715, ch_v9716) ⇒
            ln __v9717 ⇒
              let __v9718 = (ln __v9719 ⇒ (NULL, ch_v9716)) NULL in
              (match __v9718 with
               | (pf_v9720, ch_v9721) ⇒
                 let s_v9722 = modn_i14(pow_i32(B_v9715, a_v9694), p_v9695)
                 in
                 ln __v9723 ⇒
                   let __v9724 =
                     (ln __v9725 ⇒ let __v9726 = ch_v9721 in NULL) NULL
                   in
                   (print_i26(cats_i15(string_of_nat_i31(s_v9722), "\n")))
                     NULL
               end) NULL
          end) NULL
     end) NULL

val aliceclo_i77 =
  fn a_v9727 p_v9728 g_v9729 ch_v9730 ⇒
    alice_i36(a_v9727, p_v9728, g_v9729, ch_v9730)

fun bob_i37(b_v9731, p_v9732, g_v9733, ch_v9734) =
  ln __v9735 ⇒
    let __v9736 = (ln __v9737 ⇒ (NULL, ch_v9734)) NULL in
    (match __v9736 with
     | (a_v9738, ch_v9739) ⇒
       ln __v9740 ⇒
         let __v9741 = (ln __v9742 ⇒ recv(ch_v9739)) NULL in
         (match __v9741 with
          | (A_v9743, ch_v9744) ⇒
            ln __v9745 ⇒
              let __v9746 = (ln __v9747 ⇒ (NULL, ch_v9744)) NULL in
              (match __v9746 with
               | (pf_v9748, ch_v9749) ⇒
                 ln __v9750 ⇒
                   let ch_v9751 =
                     ((fn x_v9752 ⇒ ln __v9753 ⇒ ch_v9749) NULL) NULL
                   in
                   let ch_v9754 =
                     ((fn x_v9755 ⇒ ln __v9756 ⇒ send(ch_v9751, x_v9755))
                        modn_i14(pow_i32(g_v9733, b_v9731), p_v9732))
                       NULL
                   in
                   let ch_v9757 =
                     ((fn x_v9758 ⇒ ln __v9759 ⇒ ch_v9754) NULL) NULL
                   in
                   (let s_v9760 =
                      modn_i14(pow_i32(A_v9743, b_v9731), p_v9732)
                    in
                    ln __v9761 ⇒
                      let __v9762 = (ln __v9763 ⇒ close(ch_v9757)) NULL in
                      (print_i26(cats_i15(string_of_nat_i31(s_v9760), "\n")))
                        NULL)
                     NULL
               end) NULL
          end) NULL
     end) NULL

val bobclo_i78 =
  fn b_v9764 p_v9765 g_v9766 ch_v9767 ⇒
    bob_i37(b_v9764, p_v9765, g_v9766, ch_v9767)

fun key_exchange_i38(__v9768) =
  let p_v9769 = 23 in
  let g_v9770 = 5 in
  ln __v9771 ⇒
    let c_v9772 =
      (ln __v9773 ⇒
         fork c_v9774 in (alice_i36(4, p_v9769, g_v9770, c_v9774)) NULL)
        NULL
    in
    let c0_v9775 =
      (ln __v9776 ⇒
         fork c0_v9777 in
           (ln __v9778 ⇒
              let __v9779 = (ln __v9780 ⇒ recv(c0_v9777)) NULL in
              (match __v9779 with
               | (c_v9781, c0_v9782) ⇒
                 ln __v9783 ⇒
                   let __v9784 =
                     (ln __v9785 ⇒ let __v9786 = c0_v9782 in NULL) NULL
                   in (bob_i37(3, p_v9769, g_v9770, c_v9781)) NULL
               end) NULL)
             NULL)
        NULL
    in
    let c0_v9787 =
      ((ln x_v9788 __v9789 ⇒ send(c0_v9775, x_v9788)) c_v9772) NULL
    in (ln __v9790 ⇒ close(c0_v9787)) NULL

val key_exchangeclo_i79 = fn __v9791 ⇒ key_exchange_i38(__v9791)

main = (key_exchange_i38(NULL)) NULL

trans23 success--------------------------

fun andb_i1(b1_v10361, b2_v10362) = if b1_v10361 then
                                      b2_v10362
                                    else
                                      0

val andbclo_i48 = fn b1_v10363 b2_v10364 ⇒ andb_i1(b1_v10363, b2_v10364)

fun orb_i2(b1_v10365, b2_v10366) = if b1_v10365 then
                                     1
                                   else
                                     b2_v10366

val orbclo_i49 = fn b1_v10367 b2_v10368 ⇒ orb_i2(b1_v10367, b2_v10368)

fun notb_i3(b_v10369) = if b_v10369 then
                          0
                        else
                          1

val notbclo_i50 = fn b_v10370 ⇒ notb_i3(b_v10370)

fun lten_i4(x_v10371, y_v10372) =
  if x_v10371 then
    if y_v10372 then
      lten_i4(x_v10371.-1, y_v10372.-1)
    else
      0
  else
    1

val ltenclo_i51 = fn x_v10373 y_v10374 ⇒ lten_i4(x_v10373, y_v10374)

fun gten_i5(x_v10375, y_v10376) =
  if x_v10375 then
    if y_v10376 then
      gten_i5(x_v10375.-1, y_v10376.-1)
    else
      1
  else
    if y_v10376 then
      0
    else
      1

val gtenclo_i52 = fn x_v10377 y_v10378 ⇒ gten_i5(x_v10377, y_v10378)

fun ltn_i6(x_v10379, y_v10380) =
  if x_v10379 then
    if y_v10380 then
      ltn_i6(x_v10379.-1, y_v10380.-1)
    else
      0
  else
    if y_v10380 then
      1
    else
      0

val ltnclo_i53 = fn x_v10381 y_v10382 ⇒ ltn_i6(x_v10381, y_v10382)

fun gtn_i7(x_v10383, y_v10384) =
  if x_v10383 then
    if y_v10384 then
      gtn_i7(x_v10383.-1, y_v10384.-1)
    else
      1
  else
    0

val gtnclo_i54 = fn x_v10385 y_v10386 ⇒ gtn_i7(x_v10385, y_v10386)

fun eqn_i8(x_v10387, y_v10388) =
  if x_v10387 then
    if y_v10388 then
      eqn_i8(x_v10387.-1, y_v10388.-1)
    else
      0
  else
    if y_v10388 then
      0
    else
      1

val eqnclo_i55 = fn x_v10389 y_v10390 ⇒ eqn_i8(x_v10389, y_v10390)

fun pred_i9(x_v10391) = if x_v10391 then
                          x_v10391.-1
                        else
                          0

val predclo_i56 = fn x_v10392 ⇒ pred_i9(x_v10392)

fun addn_i10(x_v10393, y_v10394) =
  if x_v10393 then
    addn_i10(x_v10393.-1, y_v10394).+1
  else
    y_v10394

val addnclo_i57 = fn x_v10395 y_v10396 ⇒ addn_i10(x_v10395, y_v10396)

fun subn_i11(x_v10397, y_v10398) =
  if y_v10398 then
    subn_i11(pred_i9(x_v10397), y_v10398.-1)
  else
    x_v10397

val subnclo_i58 = fn x_v10399 y_v10400 ⇒ subn_i11(x_v10399, y_v10400)

fun muln_i12(x_v10401, y_v10402) =
  if x_v10401 then
    addn_i10(y_v10402, muln_i12(x_v10401.-1, y_v10402))
  else
    0

val mulnclo_i59 = fn x_v10403 y_v10404 ⇒ muln_i12(x_v10403, y_v10404)

fun divn_i13(x_v10405, y_v10406) =
  if ltn_i6(x_v10405, y_v10406) then
    0
  else
    divn_i13(subn_i11(x_v10405, y_v10406), y_v10406).+1

val divnclo_i60 = fn x_v10407 y_v10408 ⇒ divn_i13(x_v10407, y_v10408)

fun modn_i14(x_v10409, y_v10410) =
  subn_i11(x_v10409, muln_i12(divn_i13(x_v10409, y_v10410), y_v10410))

val modnclo_i61 = fn x_v10411 y_v10412 ⇒ modn_i14(x_v10411, y_v10412)

fun cats_i15(s1_v10413, s2_v10414) =
  match s1_v10413 with
  | EmptyString_c2  ⇒ s2_v10414
  | String_c3 c_v10415 s1_v10416 ⇒
    (String_c3 c_v10415 cats_i15(s1_v10416, s2_v10414))
  end

val catsclo_i62 = fn s1_v10417 s2_v10418 ⇒ cats_i15(s1_v10417, s2_v10418)

fun strlen_i16(s_v10419) =
  match s_v10419 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v10420 s_v10421 ⇒ strlen_i16(s_v10421).+1
  end

val strlenclo_i63 = fn s_v10422 ⇒ strlen_i16(s_v10422)

fun lenUU_i43(A_v10423, xs_v10424) =
  match xs_v10424 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v10425 xs_v10426 ⇒
    match lenUU_i43(NULL, xs_v10426) with
    | (n_v10427, xs_v10428) ⇒
      (n_v10427.+1, (consUU_c13 x_v10425 xs_v10428))
    end
  end

val lenUUclo_i64 = fn A_v10429 xs_v10430 ⇒ lenUU_i43(A_v10429, xs_v10430)

fun lenUL_i42(A_v10431, xs_v10432) =
  match xs_v10432 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v10433 xs_v10434 ⇒
    match lenUL_i42(NULL, xs_v10434) with
    | (n_v10435, xs_v10436) ⇒
      (n_v10435.+1, (consUL_c11 x_v10433 xs_v10436))
    end
  end

val lenULclo_i65 = fn A_v10437 xs_v10438 ⇒ lenUL_i42(A_v10437, xs_v10438)

fun lenLL_i40(A_v10439, xs_v10440) =
  match xs_v10440 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v10441 xs_v10442 ⇒
    match lenLL_i40(NULL, xs_v10442) with
    | (n_v10443, xs_v10444) ⇒ (n_v10443.+1, (consLL_c7 x_v10441 xs_v10444))
    end
  end

val lenLLclo_i66 = fn A_v10445 xs_v10446 ⇒ lenLL_i40(A_v10445, xs_v10446)

fun appendUU_i47(A_v10447, xs_v10448, ys_v10449) =
  match xs_v10448 with
  | nilUU_c12  ⇒ ys_v10449
  | consUU_c13 x_v10450 xs_v10451 ⇒
    (consUU_c13 x_v10450 appendUU_i47(NULL, xs_v10451, ys_v10449))
  end

val appendUUclo_i67 =
  fn A_v10452 xs_v10453 ⇒
    ln ys_v10454 ⇒ appendUU_i47(A_v10452, xs_v10453, ys_v10454)

fun appendUL_i46(A_v10455, xs_v10456, ys_v10457) =
  match xs_v10456 with
  | nilUL_c10  ⇒ ys_v10457
  | consUL_c11 x_v10458 xs_v10459 ⇒
    (consUL_c11 x_v10458 appendUL_i46(NULL, xs_v10459, ys_v10457))
  end

val appendULclo_i68 =
  fn A_v10460 xs_v10461 ⇒
    ln ys_v10462 ⇒ appendUL_i46(A_v10460, xs_v10461, ys_v10462)

fun appendLL_i44(A_v10463, xs_v10464, ys_v10465) =
  match xs_v10464 with
  | nilLL_c6  ⇒ ys_v10465
  | consLL_c7 x_v10466 xs_v10467 ⇒
    (consLL_c7 x_v10466 appendLL_i44(NULL, xs_v10467, ys_v10465))
  end

val appendLLclo_i69 =
  fn A_v10468 xs_v10469 ⇒
    ln ys_v10470 ⇒ appendLL_i44(A_v10468, xs_v10469, ys_v10470)

fun readline_i25(__v10471) =
  ln __v10472 ⇒
    let ch_v10473 = open stdin in
    let ch_v10474 = send(ch_v10473, 1) in
    let __v10475 = recv(ch_v10474) in
    match __v10475 with
    | (s_v10476, ch_v10477) ⇒
      let ch_v10478 = send(ch_v10477, 0) in s_v10476
    end

val readlineclo_i70 = fn __v10479 ⇒ readline_i25(__v10479)

fun print_i26(s_v10480) =
  ln __v10481 ⇒
    let ch_v10482 = open stdout in
    let ch_v10483 = send(ch_v10482, 1) in
    let ch_v10484 = send(ch_v10483, s_v10480) in
    let ch_v10485 = send(ch_v10484, 0) in NULL

val printclo_i71 = fn s_v10486 ⇒ print_i26(s_v10486)

fun prerr_i27(s_v10487) =
  ln __v10488 ⇒
    let ch_v10489 = open stderr in
    let ch_v10490 = send(ch_v10489, 1) in
    let ch_v10491 = send(ch_v10490, s_v10487) in
    let ch_v10492 = send(ch_v10491, 0) in NULL

val prerrclo_i72 = fn s_v10493 ⇒ prerr_i27(s_v10493)

val digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i29(A_v10494, n_v10495, xs_v10496, a_v10497) =
  if n_v10495 then
    match xs_v10496 with
    | nilUU_c12  ⇒ a_v10497
    | consUU_c13 __v10498 xs_v10499 ⇒
      get_at_i29(NULL, n_v10495.-1, xs_v10499, a_v10497)
    end
  else
    match xs_v10496 with
    | nilUU_c12  ⇒ a_v10497 | consUU_c13 x_v10500 __v10501 ⇒ x_v10500
    end

val get_atclo_i73 =
  fn A_v10502 n_v10503 xs_v10504 a_v10505 ⇒
    get_at_i29(A_v10502, n_v10503, xs_v10504, a_v10505)

fun string_of_digit_i30(n_v10506) =
  get_at_i29(NULL, n_v10506, digits_i28, EmptyString_c2)

val string_of_digitclo_i74 = fn n_v10507 ⇒ string_of_digit_i30(n_v10507)

fun string_of_nat_i31(n_v10508) =
  if ltn_i6(0, divn_i13(n_v10508, 10)) then
    cats_i15(string_of_nat_i31(divn_i13(n_v10508, 10)),
             string_of_digit_i30(modn_i14(n_v10508, 10)))
  else
    string_of_digit_i30(modn_i14(n_v10508, 10))

val string_of_natclo_i75 = fn n_v10509 ⇒ string_of_nat_i31(n_v10509)

fun pow_i32(n_v10510, m_v10511) =
  if m_v10511 then
    muln_i12(n_v10510, pow_i32(n_v10510, m_v10511.-1))
  else
    1

val powclo_i76 = fn n_v10512 m_v10513 ⇒ pow_i32(n_v10512, m_v10513)

fun alice_i36(a_v10514, p_v10515, g_v10516, ch_v10517) =
  ln __v10518 ⇒
    let ch_v10519 =
      send(ch_v10517, modn_i14(pow_i32(g_v10516, a_v10514), p_v10515))
    in
    match (NULL, ch_v10519) with
    | (b_v10520, ch_v10521) ⇒
      let __v10522 = recv(ch_v10521) in
      match __v10522 with
      | (B_v10523, ch_v10524) ⇒
        match (NULL, ch_v10524) with
        | (pf_v10525, ch_v10526) ⇒
          (print_i26(cats_i15(string_of_nat_i31(modn_i14(pow_i32(B_v10523,
                                                                 a_v10514),
                                                         p_v10515)),
                              "\n")))
            NULL
        end
      end
    end

val aliceclo_i77 =
  fn a_v10527 p_v10528 g_v10529 ch_v10530 ⇒
    alice_i36(a_v10527, p_v10528, g_v10529, ch_v10530)

fun bob_i37(b_v10531, p_v10532, g_v10533, ch_v10534) =
  ln __v10535 ⇒
    match (NULL, ch_v10534) with
    | (a_v10536, ch_v10537) ⇒
      let __v10538 = recv(ch_v10537) in
      match __v10538 with
      | (A_v10539, ch_v10540) ⇒
        match (NULL, ch_v10540) with
        | (pf_v10541, ch_v10542) ⇒
          let ch_v10543 =
            send(ch_v10542, modn_i14(pow_i32(g_v10533, b_v10531), p_v10532))
          in
          let __v10544 = close(ch_v10543) in
          (print_i26(cats_i15(string_of_nat_i31(modn_i14(pow_i32(A_v10539,
                                                                 b_v10531),
                                                         p_v10532)),
                              "\n")))
            NULL
        end
      end
    end

val bobclo_i78 =
  fn b_v10545 p_v10546 g_v10547 ch_v10548 ⇒
    bob_i37(b_v10545, p_v10546, g_v10547, ch_v10548)

fun key_exchange_i38(__v10549) =
  ln __v10550 ⇒
    let c_v10551 = fork c_v10552 in (alice_i36(4, 23, 5, c_v10552)) NULL in
    let c0_v10553 =
      fork c0_v10554 in
        let __v10555 = recv(c0_v10554) in
        match __v10555 with
        | (c_v10556, c0_v10557) ⇒ (bob_i37(3, 23, 5, c_v10556)) NULL
        end
    in let c0_v10558 = send(c0_v10553, c_v10551) in close(c0_v10558)

val key_exchangeclo_i79 = fn __v10559 ⇒ key_exchange_i38(__v10559)

main = (key_exchange_i38(NULL)) NULL

trans3e success--------------------------

trans34 success--------------------------

