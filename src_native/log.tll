logical thrm‹› (n : nat) : n ≡ ((addn) (n)
(O.+0)) = match n as n0 in n0 ≡ ((addn) (n0)
(O.+0)) with O ⇒ refl | S n1 ⇒ rew [x, _ ⇒ n1.+1 ≡ x] ((thrm)
(n1.+1)) in refl

logical ex‹› : O.+0.+1 ≡ ((pred)
(O.+2)) = refl

parsing success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v144 : bool) (b2_v145 : bool) ⇒
    match b1_v144 as __v146 in ??1 with
    | true ⇒ b2_v145 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v149 : bool) (b2_v150 : bool) ⇒
    match b1_v149 as __v151 in ??2 with
    | true ⇒ true | false ⇒ b2_v150
    end

program notb_i3 : bool → bool =
  fn (b_v153 : bool) ⇒
    match b_v153 as __v154 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v157 : nat) (y_v158 : nat) ⇒
    match x_v157 as __v159 in ??4 with
    | O ⇒ true
    | S x_v160 ⇒
      match y_v158 as __v161 in ??5 with
      | O ⇒ false | S y_v162 ⇒ (lten_i4 x_v160 y_v162)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v165 : nat) (y_v166 : nat) ⇒
    match x_v165 as __v167 in ??6 with
    | O ⇒
      match y_v166 as __v168 in ??8 with
      | O ⇒ true | S __v169 ⇒ false
      end
    | S x_v170 ⇒
      match y_v166 as __v171 in ??7 with
      | O ⇒ true | S y_v172 ⇒ (gten_i5 x_v170 y_v172)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v175 : nat) (y_v176 : nat) ⇒
    match x_v175 as __v177 in ??9 with
    | O ⇒
      match y_v176 as __v178 in ??11 with
      | O ⇒ false | S y_v179 ⇒ true
      end
    | S x_v180 ⇒
      match y_v176 as __v181 in ??10 with
      | O ⇒ false | S y_v182 ⇒ (ltn_i6 x_v180 y_v182)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v185 : nat) (y_v186 : nat) ⇒
    match x_v185 as __v187 in ??12 with
    | O ⇒ false
    | S x_v188 ⇒
      match y_v186 as __v189 in ??13 with
      | O ⇒ true | S y_v190 ⇒ (gtn_i7 x_v188 y_v190)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v193 : nat) (y_v194 : nat) ⇒
    match x_v193 as __v195 in ??14 with
    | O ⇒
      match y_v194 as __v196 in ??16 with
      | O ⇒ true | S __v197 ⇒ false
      end
    | S x_v198 ⇒
      match y_v194 as __v199 in ??15 with
      | O ⇒ false | S y_v200 ⇒ (eqn_i8 x_v198 y_v200)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v202 : nat) ⇒
    match x_v202 as __v203 in ??17 with
    | O ⇒ 0 | S x_v204 ⇒ x_v204
    end

program addn_i10 : nat → nat → nat =
  fn (x_v207 : nat) (y_v208 : nat) ⇒
    match x_v207 as __v209 in ??18 with
    | O ⇒ y_v208 | S x_v210 ⇒ (addn_i10 x_v210 y_v208).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v213 : nat) (y_v214 : nat) ⇒
    match y_v214 as __v215 in ??19 with
    | O ⇒ x_v213 | S y_v216 ⇒ (subn_i11 (pred_i9 x_v213) y_v216)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v219 : nat) (y_v220 : nat) ⇒
    match x_v219 as __v221 in ??20 with
    | O ⇒ 0 | S x_v222 ⇒ (addn_i10 y_v220 (muln_i12 x_v222 y_v220))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v225 : nat) (y_v226 : nat) ⇒
    match (ltn_i6 x_v225 y_v226) as __v227 in ??21 with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v225 y_v226) y_v226).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v230 : nat) (y_v231 : nat) ⇒
    (subn_i11 x_v230 (muln_i12 (divn_i13 x_v230 y_v231) y_v231))

inductive char_d1 : U =
| Char_c1 of (n_v232 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v233 : char_d1) (s_v234 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v237 : string_d2) (s2_v238 : string_d2) ⇒
    match s1_v237 as __v239 in ??22 with
    | EmptyString_c2  ⇒ s2_v238
    | String_c3 c_v240 s1_v241 ⇒
      (String_c3‹› c_v240 (cats_i15 s1_v241 s2_v238))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v243 : string_d2) ⇒
    match s_v243 as __v244 in ??23 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v245 s_v246 ⇒ (strlen_i16 s_v246).+1
    end

inductive list_d3 ‹s_s247, t_s248›
  (A_v249 : Type‹s_s247›) : Type‹t_s248›
=
| nil_c4 of
    ‹s_s250, t_s251› (A_v252 : Type‹s_s250›)
    : (list_d3‹s_s250, t_s251› A_v252)
| cons_c5 of
    ‹s_s253, t_s254› (A_v255 : Type‹s_s253›) (hd_v256 : A_v255)
    (tl_v257 : (list_d3‹s_s253, t_s254› A_v255))
    : (list_d3‹s_s253, t_s254› A_v255)

program len_i17 ‹s_s258, t_s259› :
  ∀ {A_v260 : Type‹s_s258›} →
    (list_d3‹??24, t_s259› A_v260) →
      nat ⊗ (list_d3‹??25, t_s259› A_v260)
=
  fn {A_v263 : Type‹s_s258›}
     (xs_v264 : (list_d3‹??24, t_s259› A_v263)) ⇒
    match xs_v264 as __v265 in ??26 with
    | nil_c4  ⇒ ⟨0, nil_c4‹??36, ??35›⟩
    | cons_c5 x_v266 xs_v267 ⇒
      match (len_i17‹??29, ??28› ??27 xs_v267) as __v268 in ??30 with
      | ⟨n_v269, xs_v270⟩ ⇒
        ⟨n_v269.+1, (cons_c5‹??33, ??32› x_v266 xs_v270)⟩
      end
    end

program append_i18 ‹s_s271, t_s272› :
  ∀ {A_v273 : Type‹s_s271›} →
    (list_d3‹??37, t_s272› A_v273) →
      (list_d3‹??38, t_s272› A_v273) ⊸ (list_d3‹??40, ??39› A_v273)
=
  fn {A_v276 : Type‹s_s271›}
     (xs_v277 : (list_d3‹??37, t_s272› A_v276)) ⇒
    ln (ys_v278 : ??41) ⇒
      match xs_v277 as __v279 in ??42 with
      | nil_c4  ⇒ ys_v278
      | cons_c5 x_v280 xs_v281 ⇒
        (cons_c5‹??48, ??47›
          x_v280 (append_i18‹??45, ??44› ??43 xs_v281 ys_v278))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v283 : unit) ⇒
    ⇑(b_v284 : bool) ⇒
      match b_v284 as __v285 in ??49 with
      | true ⇒ ⇓(__v286 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v288 : unit) ⇒
    ⇑(b_v289 : bool) ⇒
      match b_v289 as __v290 in ??50 with
      | true ⇒ ⇑(__v291 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v293 : unit) ⇒
    ⇑(b_v294 : bool) ⇒
      match b_v294 as __v295 in ??51 with
      | true ⇒ ⇑(__v296 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v298 : unit) ⇒
    let ch_v299 ⇐ open stdin in
    let ch_v300 ⇐ (send ch_v299 true) in
    let __v301 ⇐ recv ch_v300 in
    match __v301 as __v302 in ??52 with
    | ⟨s_v303, ch_v304⟩ ⇒
      let ch_v305 ⇐ (send ch_v304 false) in
      let __v306 ⇐ close ch_v305 in return s_v303
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v308 : string_d2) ⇒
    let ch_v309 ⇐ open stdout in
    let ch_v310 ⇐ (send ch_v309 true) in
    let ch_v311 ⇐ (send ch_v310 s_v308) in
    let ch_v312 ⇐ (send ch_v311 false) in close ch_v312

program prerr_i27 : string_d2 → IO unit =
  fn (s_v314 : string_d2) ⇒
    let ch_v315 ⇐ open stderr in
    let ch_v316 ⇐ (send ch_v315 true) in
    let ch_v317 ⇐ (send ch_v316 s_v314) in
    let ch_v318 ⇐ (send ch_v317 false) in close ch_v318

logical thrm_i28 : ∀ (n_v319 : nat) → n_v319 ≡ (addn_i10 n_v319 0) =
  fn (n_v320 : nat) ⇒
    match n_v320 as n0_v321 in n0_v321 ≡ (addn_i10 n0_v321 0) with
    | O ⇒ refl ??57
    | S n1_v322 ⇒
      rew [x_v323, __v324 ⇒ n1_v322.+1 ≡ x_v323] (thrm_i28 n1_v322.+1) in
      refl ??55
    end

logical ex_i29 : 1 ≡ (pred_i9 2) = refl ??59

trans01 success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v3337 : bool) (b2_v3338 : bool) ⇒
    match b1_v3337 as __v3339 in bool with
    | true ⇒ b2_v3338 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v3342 : bool) (b2_v3343 : bool) ⇒
    match b1_v3342 as __v3344 in bool with
    | true ⇒ true | false ⇒ b2_v3343
    end

program notb_i3 : bool → bool =
  fn (b_v3346 : bool) ⇒
    match b_v3346 as __v3347 in bool with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v3350 : nat) (y_v3351 : nat) ⇒
    match x_v3350 as __v3352 in bool with
    | O ⇒ true
    | S x_v3353 ⇒
      match y_v3351 as __v3354 in bool with
      | O ⇒ false | S y_v3355 ⇒ (lten_i4 x_v3353 y_v3355)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v3358 : nat) (y_v3359 : nat) ⇒
    match x_v3358 as __v3360 in bool with
    | O ⇒
      match y_v3359 as __v3361 in bool with
      | O ⇒ true | S __v3362 ⇒ false
      end
    | S x_v3363 ⇒
      match y_v3359 as __v3364 in bool with
      | O ⇒ true | S y_v3365 ⇒ (gten_i5 x_v3363 y_v3365)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v3368 : nat) (y_v3369 : nat) ⇒
    match x_v3368 as __v3370 in bool with
    | O ⇒
      match y_v3369 as __v3371 in bool with
      | O ⇒ false | S y_v3372 ⇒ true
      end
    | S x_v3373 ⇒
      match y_v3369 as __v3374 in bool with
      | O ⇒ false | S y_v3375 ⇒ (ltn_i6 x_v3373 y_v3375)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v3378 : nat) (y_v3379 : nat) ⇒
    match x_v3378 as __v3380 in bool with
    | O ⇒ false
    | S x_v3381 ⇒
      match y_v3379 as __v3382 in bool with
      | O ⇒ true | S y_v3383 ⇒ (gtn_i7 x_v3381 y_v3383)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v3386 : nat) (y_v3387 : nat) ⇒
    match x_v3386 as __v3388 in bool with
    | O ⇒
      match y_v3387 as __v3389 in bool with
      | O ⇒ true | S __v3390 ⇒ false
      end
    | S x_v3391 ⇒
      match y_v3387 as __v3392 in bool with
      | O ⇒ false | S y_v3393 ⇒ (eqn_i8 x_v3391 y_v3393)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v3395 : nat) ⇒
    match x_v3395 as __v3396 in nat with
    | O ⇒ 0 | S x_v3397 ⇒ x_v3397
    end

program addn_i10 : nat → nat → nat =
  fn (x_v3400 : nat) (y_v3401 : nat) ⇒
    match x_v3400 as __v3402 in nat with
    | O ⇒ y_v3401 | S x_v3403 ⇒ (addn_i10 x_v3403 y_v3401).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v3406 : nat) (y_v3407 : nat) ⇒
    match y_v3407 as __v3408 in nat with
    | O ⇒ x_v3406 | S y_v3409 ⇒ (subn_i11 (pred_i9 x_v3406) y_v3409)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v3412 : nat) (y_v3413 : nat) ⇒
    match x_v3412 as __v3414 in nat with
    | O ⇒ 0 | S x_v3415 ⇒ (addn_i10 y_v3413 (muln_i12 x_v3415 y_v3413))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v3418 : nat) (y_v3419 : nat) ⇒
    match (ltn_i6 x_v3418 y_v3419) as __v3420 in nat with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v3418 y_v3419) y_v3419).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v3423 : nat) (y_v3424 : nat) ⇒
    (subn_i11 x_v3423 (muln_i12 (divn_i13 x_v3423 y_v3424) y_v3424))

inductive char_d1 : U =
| Char_c1 of (n_v3425 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v3426 : char_d1) (s_v3427 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v3430 : string_d2) (s2_v3431 : string_d2) ⇒
    match s1_v3430 as __v3432 in string_d2 with
    | EmptyString_c2  ⇒ s2_v3431
    | String_c3 c_v3433 s1_v3434 ⇒
      (String_c3‹› c_v3433 (cats_i15 s1_v3434 s2_v3431))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v3436 : string_d2) ⇒
    match s_v3436 as __v3437 in nat with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v3438 s_v3439 ⇒ (strlen_i16 s_v3439).+1
    end

inductive list_d3 ‹s_s3440, t_s3441›
  (A_v3442 : Type‹s_s3440›) : Type‹t_s3441›
=
| nil_c4 of
    ‹s_s3443, t_s3444› (A_v3445 : Type‹s_s3443›)
    : (list_d3‹s_s3443, t_s3444› A_v3445)
| cons_c5 of
    ‹s_s3446, t_s3447› (A_v3448 : Type‹s_s3446›) (hd_v3449 : A_v3448)
    (tl_v3450 : (list_d3‹s_s3446, t_s3447› A_v3448))
    : (list_d3‹s_s3446, t_s3447› A_v3448)

program len_i17 ‹s_s3451, t_s3452› :
  ∀ {A_v3453 : Type‹s_s3451›} →
    (list_d3‹s_s3451, t_s3452› A_v3453) →
      nat ⊗ (list_d3‹s_s3451, t_s3452› A_v3453)
=
  fn {A_v3456 : Type‹s_s3451›}
     (xs_v3457 : (list_d3‹s_s3451, t_s3452› A_v3456)) ⇒
    match xs_v3457 as __v3458 in
      nat ⊗ (list_d3‹s_s3451, t_s3452› A_v3456) with
    | nil_c4  ⇒ ⟨0, nil_c4‹s_s3451, t_s3452›⟩
    | cons_c5 x_v3460 xs_v3461 ⇒
      match (len_i17‹s_s3451, t_s3452› A_v3456 xs_v3461) as __v3462 in
        nat ⊗ (list_d3‹s_s3451, t_s3452› A_v3456) with
      | ⟨n_v3464, xs_v3465⟩ ⇒
        ⟨n_v3464.+1, (cons_c5‹s_s3451, t_s3452› x_v3460 xs_v3465)⟩
      end
    end

program append_i18 ‹s_s3466, t_s3467› :
  ∀ {A_v3468 : Type‹s_s3466›} →
    (list_d3‹s_s3466, t_s3467› A_v3468) →
      (list_d3‹s_s3466, t_s3467› A_v3468) ⊸
        (list_d3‹s_s3466, t_s3467› A_v3468)
=
  fn {A_v3471 : Type‹s_s3466›}
     (xs_v3472 : (list_d3‹s_s3466, t_s3467› A_v3471)) ⇒
    ln (ys_v3473 : (list_d3‹s_s3466, t_s3467› A_v3471)) ⇒
      match xs_v3472 as __v3474 in
        (list_d3‹s_s3466, t_s3467› A_v3471) with
      | nil_c4  ⇒ ys_v3473
      | cons_c5 x_v3475 xs_v3476 ⇒
        (cons_c5‹s_s3466, t_s3467›
          x_v3475
          (append_i18‹s_s3466, t_s3467› A_v3471 xs_v3476 ys_v3473))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v3478 : unit) ⇒
    ⇑(b_v3479 : bool) ⇒
      match b_v3479 as __v3480 in proto with
      | true ⇒ ⇓(__v3481 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v3483 : unit) ⇒
    ⇑(b_v3484 : bool) ⇒
      match b_v3484 as __v3485 in proto with
      | true ⇒ ⇑(__v3486 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v3488 : unit) ⇒
    ⇑(b_v3489 : bool) ⇒
      match b_v3489 as __v3490 in proto with
      | true ⇒ ⇑(__v3491 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v3493 : unit) ⇒
    let ch_v3494 ⇐ open stdin in
    let ch_v3495 ⇐ (send ch_v3494 true) in
    let __v3496 ⇐ recv ch_v3495 in
    match __v3496 as __v3497 in IO string_d2 with
    | ⟨s_v3498, ch_v3499⟩ ⇒
      let ch_v3500 ⇐ (send ch_v3499 false) in
      let __v3501 ⇐ close ch_v3500 in return s_v3498
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v3503 : string_d2) ⇒
    let ch_v3504 ⇐ open stdout in
    let ch_v3505 ⇐ (send ch_v3504 true) in
    let ch_v3506 ⇐ (send ch_v3505 s_v3503) in
    let ch_v3507 ⇐ (send ch_v3506 false) in close ch_v3507

program prerr_i27 : string_d2 → IO unit =
  fn (s_v3509 : string_d2) ⇒
    let ch_v3510 ⇐ open stderr in
    let ch_v3511 ⇐ (send ch_v3510 true) in
    let ch_v3512 ⇐ (send ch_v3511 s_v3509) in
    let ch_v3513 ⇐ (send ch_v3512 false) in close ch_v3513

logical thrm_i28 : ∀ (n_v3514 : nat) → n_v3514 ≡ (addn_i10 n_v3514 0) =
  fn (n_v3515 : nat) ⇒
    match n_v3515 as n0_v3516 in n0_v3516 ≡ (addn_i10 n0_v3516 0) with
    | O ⇒ refl 0
    | S n1_v3517 ⇒
      rew [x_v3518, __v3519 ⇒ n1_v3517.+1 ≡ x_v3518]
        (thrm_i28 n1_v3517.+1) in
      refl n1_v3517.+1
    end

logical ex_i29 : 1 ≡ (pred_i9 2) = refl 1

trans1e success--------------------------

def andb_i1 =
  fn b1_v3772 b2_v3773 ⇒
    match b1_v3772 with
    | true ⇒ b2_v3773 | false ⇒ false
    end

def orb_i2 =
  fn b1_v3774 b2_v3775 ⇒
    match b1_v3774 with
    | true ⇒ true | false ⇒ b2_v3775
    end

def notb_i3 =
  fn b_v3776 ⇒ match b_v3776 with
                 | true ⇒ false | false ⇒ true
                 end

def lten_i4 =
  fn x_v3777 y_v3778 ⇒
    match x_v3777 with
    | O ⇒ true
    | S x_v3779 ⇒
      match y_v3778 with
      | O ⇒ false | S y_v3780 ⇒ ((lten_i4 x_v3779) y_v3780)
      end
    end

def gten_i5 =
  fn x_v3781 y_v3782 ⇒
    match x_v3781 with
    | O ⇒ match y_v3782 with
            | O ⇒ true | S __v3783 ⇒ false
            end
    | S x_v3784 ⇒
      match y_v3782 with
      | O ⇒ true | S y_v3785 ⇒ ((gten_i5 x_v3784) y_v3785)
      end
    end

def ltn_i6 =
  fn x_v3786 y_v3787 ⇒
    match x_v3786 with
    | O ⇒ match y_v3787 with
            | O ⇒ false | S y_v3788 ⇒ true
            end
    | S x_v3789 ⇒
      match y_v3787 with
      | O ⇒ false | S y_v3790 ⇒ ((ltn_i6 x_v3789) y_v3790)
      end
    end

def gtn_i7 =
  fn x_v3791 y_v3792 ⇒
    match x_v3791 with
    | O ⇒ false
    | S x_v3793 ⇒
      match y_v3792 with
      | O ⇒ true | S y_v3794 ⇒ ((gtn_i7 x_v3793) y_v3794)
      end
    end

def eqn_i8 =
  fn x_v3795 y_v3796 ⇒
    match x_v3795 with
    | O ⇒ match y_v3796 with
            | O ⇒ true | S __v3797 ⇒ false
            end
    | S x_v3798 ⇒
      match y_v3796 with
      | O ⇒ false | S y_v3799 ⇒ ((eqn_i8 x_v3798) y_v3799)
      end
    end

def pred_i9 =
  fn x_v3800 ⇒ match x_v3800 with
                 | O ⇒ 0 | S x_v3801 ⇒ x_v3801
                 end

def addn_i10 =
  fn x_v3802 y_v3803 ⇒
    match x_v3802 with
    | O ⇒ y_v3803 | S x_v3804 ⇒ ((addn_i10 x_v3804) y_v3803).+1
    end

def subn_i11 =
  fn x_v3805 y_v3806 ⇒
    match y_v3806 with
    | O ⇒ x_v3805 | S y_v3807 ⇒ ((subn_i11 (pred_i9 x_v3805)) y_v3807)
    end

def muln_i12 =
  fn x_v3808 y_v3809 ⇒
    match x_v3808 with
    | O ⇒ 0
    | S x_v3810 ⇒ ((addn_i10 y_v3809) ((muln_i12 x_v3810) y_v3809))
    end

def divn_i13 =
  fn x_v3811 y_v3812 ⇒
    match ((ltn_i6 x_v3811) y_v3812) with
    | true ⇒ 0
    | false ⇒ ((divn_i13 ((subn_i11 x_v3811) y_v3812)) y_v3812).+1
    end

def modn_i14 =
  fn x_v3813 y_v3814 ⇒
    ((subn_i11 x_v3813) ((muln_i12 ((divn_i13 x_v3813) y_v3814)) y_v3814))

data char_d1 =
| Char_c1 of size(1)

data string_d2 =
| EmptyString_c2 of size(0) | String_c3 of size(2)

def cats_i15 =
  fn s1_v3815 s2_v3816 ⇒
    match s1_v3815 with
    | EmptyString_c2  ⇒ s2_v3816
    | String_c3 c_v3817 s1_v3818 ⇒
      (String_c3 c_v3817 ((cats_i15 s1_v3818) s2_v3816))
    end

def strlen_i16 =
  fn s_v3819 ⇒
    match s_v3819 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v3820 s_v3821 ⇒ (strlen_i16 s_v3821).+1
    end

data listUU_d7 =
| nilUU_c12 of size(0) | consUU_c13 of size(2)

data listUL_d6 =
| nilUL_c10 of size(0) | consUL_c11 of size(2)

data listLU_d5 =
| nilLU_c8 of size(0)

data listLL_d4 =
| nilLL_c6 of size(0) | consLL_c7 of size(2)

def lenUU_i33 =
  fn A_v3822 xs_v3823 ⇒
    match xs_v3823 with
    | nilUU_c12  ⇒ (0, nilUU_c12)
    | consUU_c13 x_v3824 xs_v3825 ⇒
      match ((lenUU_i33 NULL) xs_v3825) with
      | (n_v3826, xs_v3827) ⇒ (n_v3826.+1, (consUU_c13 x_v3824 xs_v3827))
      end
    end

def lenUL_i32 =
  fn A_v3828 xs_v3829 ⇒
    match xs_v3829 with
    | nilUL_c10  ⇒ (0, nilUL_c10)
    | consUL_c11 x_v3830 xs_v3831 ⇒
      match ((lenUL_i32 NULL) xs_v3831) with
      | (n_v3832, xs_v3833) ⇒ (n_v3832.+1, (consUL_c11 x_v3830 xs_v3833))
      end
    end

def lenLL_i30 =
  fn A_v3834 xs_v3835 ⇒
    match xs_v3835 with
    | nilLL_c6  ⇒ (0, nilLL_c6)
    | consLL_c7 x_v3836 xs_v3837 ⇒
      match ((lenLL_i30 NULL) xs_v3837) with
      | (n_v3838, xs_v3839) ⇒ (n_v3838.+1, (consLL_c7 x_v3836 xs_v3839))
      end
    end

def appendUU_i37 =
  fn A_v3840 xs_v3841 ⇒
    ln ys_v3842 ⇒
      match xs_v3841 with
      | nilUU_c12  ⇒ ys_v3842
      | consUU_c13 x_v3843 xs_v3844 ⇒
        (consUU_c13 x_v3843 (((appendUU_i37 NULL) xs_v3844) ys_v3842))
      end

def appendUL_i36 =
  fn A_v3845 xs_v3846 ⇒
    ln ys_v3847 ⇒
      match xs_v3846 with
      | nilUL_c10  ⇒ ys_v3847
      | consUL_c11 x_v3848 xs_v3849 ⇒
        (consUL_c11 x_v3848 (((appendUL_i36 NULL) xs_v3849) ys_v3847))
      end

def appendLL_i34 =
  fn A_v3850 xs_v3851 ⇒
    ln ys_v3852 ⇒
      match xs_v3851 with
      | nilLL_c6  ⇒ ys_v3852
      | consLL_c7 x_v3853 xs_v3854 ⇒
        (consLL_c7 x_v3853 (((appendLL_i34 NULL) xs_v3854) ys_v3852))
      end

def readline_i25 =
  fn __v3855 ⇒
    let ch_v3856 ⇐ open stdin in
    let ch_v3857 ⇐ (send ch_v3856 true) in
    let __v3858 ⇐ recv ch_v3857 in
    match __v3858 with
    | (s_v3859, ch_v3860) ⇒
      let ch_v3861 ⇐ (send ch_v3860 false) in
      let __v3862 ⇐ close⇑ ch_v3861 in return s_v3859
    end

def print_i26 =
  fn s_v3863 ⇒
    let ch_v3864 ⇐ open stdout in
    let ch_v3865 ⇐ (send ch_v3864 true) in
    let ch_v3866 ⇐ (send ch_v3865 s_v3863) in
    let ch_v3867 ⇐ (send ch_v3866 false) in close⇑ ch_v3867

def prerr_i27 =
  fn s_v3868 ⇒
    let ch_v3869 ⇐ open stderr in
    let ch_v3870 ⇐ (send ch_v3869 true) in
    let ch_v3871 ⇐ (send ch_v3870 s_v3868) in
    let ch_v3872 ⇐ (send ch_v3871 false) in close⇑ ch_v3872

trans12 success--------------------------

fun andb_i1(b1_v4019, b2_v4020) = if b1_v4019 then
                                    b2_v4020
                                  else
                                    0

val andbclo_i38 = fn b1_v4021 b2_v4022 ⇒ andb_i1(b1_v4021, b2_v4022)

fun orb_i2(b1_v4023, b2_v4024) = if b1_v4023 then
                                   1
                                 else
                                   b2_v4024

val orbclo_i39 = fn b1_v4025 b2_v4026 ⇒ orb_i2(b1_v4025, b2_v4026)

fun notb_i3(b_v4027) = if b_v4027 then
                         0
                       else
                         1

val notbclo_i40 = fn b_v4028 ⇒ notb_i3(b_v4028)

fun lten_i4(x_v4029, y_v4030) =
  let __v4031 = x_v4029 in
  if __v4031 then
    let x_v4032 = __v4031.-1 in
    let __v4033 = y_v4030 in
    if __v4033 then
      let y_v4034 = __v4033.-1 in lten_i4(x_v4032, y_v4034)
    else
      0
  else
    1

val ltenclo_i41 = fn x_v4035 y_v4036 ⇒ lten_i4(x_v4035, y_v4036)

fun gten_i5(x_v4037, y_v4038) =
  let __v4039 = x_v4037 in
  if __v4039 then
    let x_v4040 = __v4039.-1 in
    let __v4041 = y_v4038 in
    if __v4041 then
      let y_v4042 = __v4041.-1 in gten_i5(x_v4040, y_v4042)
    else
      1
  else
    let __v4043 = y_v4038 in
    if __v4043 then
      let __v4044 = __v4043.-1 in 0
    else
      1

val gtenclo_i42 = fn x_v4045 y_v4046 ⇒ gten_i5(x_v4045, y_v4046)

fun ltn_i6(x_v4047, y_v4048) =
  let __v4049 = x_v4047 in
  if __v4049 then
    let x_v4050 = __v4049.-1 in
    let __v4051 = y_v4048 in
    if __v4051 then
      let y_v4052 = __v4051.-1 in ltn_i6(x_v4050, y_v4052)
    else
      0
  else
    let __v4053 = y_v4048 in
    if __v4053 then
      let y_v4054 = __v4053.-1 in 1
    else
      0

val ltnclo_i43 = fn x_v4055 y_v4056 ⇒ ltn_i6(x_v4055, y_v4056)

fun gtn_i7(x_v4057, y_v4058) =
  let __v4059 = x_v4057 in
  if __v4059 then
    let x_v4060 = __v4059.-1 in
    let __v4061 = y_v4058 in
    if __v4061 then
      let y_v4062 = __v4061.-1 in gtn_i7(x_v4060, y_v4062)
    else
      1
  else
    0

val gtnclo_i44 = fn x_v4063 y_v4064 ⇒ gtn_i7(x_v4063, y_v4064)

fun eqn_i8(x_v4065, y_v4066) =
  let __v4067 = x_v4065 in
  if __v4067 then
    let x_v4068 = __v4067.-1 in
    let __v4069 = y_v4066 in
    if __v4069 then
      let y_v4070 = __v4069.-1 in eqn_i8(x_v4068, y_v4070)
    else
      0
  else
    let __v4071 = y_v4066 in
    if __v4071 then
      let __v4072 = __v4071.-1 in 0
    else
      1

val eqnclo_i45 = fn x_v4073 y_v4074 ⇒ eqn_i8(x_v4073, y_v4074)

fun pred_i9(x_v4075) =
  let __v4076 = x_v4075 in
  if __v4076 then
    let x_v4077 = __v4076.-1 in x_v4077
  else
    0

val predclo_i46 = fn x_v4078 ⇒ pred_i9(x_v4078)

fun addn_i10(x_v4079, y_v4080) =
  let __v4081 = x_v4079 in
  if __v4081 then
    let x_v4082 = __v4081.-1 in addn_i10(x_v4082, y_v4080).+1
  else
    y_v4080

val addnclo_i47 = fn x_v4083 y_v4084 ⇒ addn_i10(x_v4083, y_v4084)

fun subn_i11(x_v4085, y_v4086) =
  let __v4087 = y_v4086 in
  if __v4087 then
    let y_v4088 = __v4087.-1 in subn_i11(pred_i9(x_v4085), y_v4088)
  else
    x_v4085

val subnclo_i48 = fn x_v4089 y_v4090 ⇒ subn_i11(x_v4089, y_v4090)

fun muln_i12(x_v4091, y_v4092) =
  let __v4093 = x_v4091 in
  if __v4093 then
    let x_v4094 = __v4093.-1 in addn_i10(y_v4092, muln_i12(x_v4094, y_v4092))
  else
    0

val mulnclo_i49 = fn x_v4095 y_v4096 ⇒ muln_i12(x_v4095, y_v4096)

fun divn_i13(x_v4097, y_v4098) =
  if ltn_i6(x_v4097, y_v4098) then
    0
  else
    divn_i13(subn_i11(x_v4097, y_v4098), y_v4098).+1

val divnclo_i50 = fn x_v4099 y_v4100 ⇒ divn_i13(x_v4099, y_v4100)

fun modn_i14(x_v4101, y_v4102) =
  subn_i11(x_v4101, muln_i12(divn_i13(x_v4101, y_v4102), y_v4102))

val modnclo_i51 = fn x_v4103 y_v4104 ⇒ modn_i14(x_v4103, y_v4104)

fun cats_i15(s1_v4105, s2_v4106) =
  match s1_v4105 with
  | EmptyString_c2  ⇒ s2_v4106
  | String_c3 c_v4107 s1_v4108 ⇒
    (String_c3 c_v4107 cats_i15(s1_v4108, s2_v4106))
  end

val catsclo_i52 = fn s1_v4109 s2_v4110 ⇒ cats_i15(s1_v4109, s2_v4110)

fun strlen_i16(s_v4111) =
  match s_v4111 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v4112 s_v4113 ⇒ strlen_i16(s_v4113).+1
  end

val strlenclo_i53 = fn s_v4114 ⇒ strlen_i16(s_v4114)

fun lenUU_i33(A_v4115, xs_v4116) =
  match xs_v4116 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v4117 xs_v4118 ⇒
    match lenUU_i33(NULL, xs_v4118) with
    | (n_v4119, xs_v4120) ⇒ (n_v4119.+1, (consUU_c13 x_v4117 xs_v4120))
    end
  end

val lenUUclo_i54 = fn A_v4121 xs_v4122 ⇒ lenUU_i33(A_v4121, xs_v4122)

fun lenUL_i32(A_v4123, xs_v4124) =
  match xs_v4124 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v4125 xs_v4126 ⇒
    match lenUL_i32(NULL, xs_v4126) with
    | (n_v4127, xs_v4128) ⇒ (n_v4127.+1, (consUL_c11 x_v4125 xs_v4128))
    end
  end

val lenULclo_i55 = fn A_v4129 xs_v4130 ⇒ lenUL_i32(A_v4129, xs_v4130)

fun lenLL_i30(A_v4131, xs_v4132) =
  match xs_v4132 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v4133 xs_v4134 ⇒
    match lenLL_i30(NULL, xs_v4134) with
    | (n_v4135, xs_v4136) ⇒ (n_v4135.+1, (consLL_c7 x_v4133 xs_v4136))
    end
  end

val lenLLclo_i56 = fn A_v4137 xs_v4138 ⇒ lenLL_i30(A_v4137, xs_v4138)

fun appendUU_i37(A_v4139, xs_v4140, ys_v4141) =
  match xs_v4140 with
  | nilUU_c12  ⇒ ys_v4141
  | consUU_c13 x_v4142 xs_v4143 ⇒
    (consUU_c13 x_v4142 appendUU_i37(NULL, xs_v4143, ys_v4141))
  end

val appendUUclo_i57 =
  fn A_v4144 xs_v4145 ⇒
    ln ys_v4146 ⇒ appendUU_i37(A_v4144, xs_v4145, ys_v4146)

fun appendUL_i36(A_v4147, xs_v4148, ys_v4149) =
  match xs_v4148 with
  | nilUL_c10  ⇒ ys_v4149
  | consUL_c11 x_v4150 xs_v4151 ⇒
    (consUL_c11 x_v4150 appendUL_i36(NULL, xs_v4151, ys_v4149))
  end

val appendULclo_i58 =
  fn A_v4152 xs_v4153 ⇒
    ln ys_v4154 ⇒ appendUL_i36(A_v4152, xs_v4153, ys_v4154)

fun appendLL_i34(A_v4155, xs_v4156, ys_v4157) =
  match xs_v4156 with
  | nilLL_c6  ⇒ ys_v4157
  | consLL_c7 x_v4158 xs_v4159 ⇒
    (consLL_c7 x_v4158 appendLL_i34(NULL, xs_v4159, ys_v4157))
  end

val appendLLclo_i59 =
  fn A_v4160 xs_v4161 ⇒
    ln ys_v4162 ⇒ appendLL_i34(A_v4160, xs_v4161, ys_v4162)

fun readline_i25(__v4163) =
  ln __v4164 ⇒
    let ch_v4165 = (ln __v4166 ⇒ open stdin) NULL in
    let ch_v4167 =
      ((fn x_v4168 ⇒ ln __v4169 ⇒ send(ch_v4165, x_v4168)) 1) NULL
    in
    let __v4170 = (ln __v4171 ⇒ recv(ch_v4167)) NULL in
    (match __v4170 with
     | (s_v4172, ch_v4173) ⇒
       ln __v4174 ⇒
         let ch_v4175 =
           ((fn x_v4176 ⇒ ln __v4177 ⇒ send(ch_v4173, x_v4176)) 0) NULL
         in
         let __v4178 = (ln __v4179 ⇒ let __v4180 = ch_v4175 in NULL) NULL
         in (ln __v4181 ⇒ s_v4172) NULL
     end) NULL

val readlineclo_i60 = fn __v4182 ⇒ readline_i25(__v4182)

fun print_i26(s_v4183) =
  ln __v4184 ⇒
    let ch_v4185 = (ln __v4186 ⇒ open stdout) NULL in
    let ch_v4187 =
      ((fn x_v4188 ⇒ ln __v4189 ⇒ send(ch_v4185, x_v4188)) 1) NULL
    in
    let ch_v4190 =
      ((fn x_v4191 ⇒ ln __v4192 ⇒ send(ch_v4187, x_v4191)) s_v4183) NULL
    in
    let ch_v4193 =
      ((fn x_v4194 ⇒ ln __v4195 ⇒ send(ch_v4190, x_v4194)) 0) NULL
    in (ln __v4196 ⇒ let __v4197 = ch_v4193 in NULL) NULL

val printclo_i61 = fn s_v4198 ⇒ print_i26(s_v4198)

fun prerr_i27(s_v4199) =
  ln __v4200 ⇒
    let ch_v4201 = (ln __v4202 ⇒ open stderr) NULL in
    let ch_v4203 =
      ((fn x_v4204 ⇒ ln __v4205 ⇒ send(ch_v4201, x_v4204)) 1) NULL
    in
    let ch_v4206 =
      ((fn x_v4207 ⇒ ln __v4208 ⇒ send(ch_v4203, x_v4207)) s_v4199) NULL
    in
    let ch_v4209 =
      ((fn x_v4210 ⇒ ln __v4211 ⇒ send(ch_v4206, x_v4210)) 0) NULL
    in (ln __v4212 ⇒ let __v4213 = ch_v4209 in NULL) NULL

val prerrclo_i62 = fn s_v4214 ⇒ prerr_i27(s_v4214)

trans23 success--------------------------

fun andb_i1(b1_v4434, b2_v4435) = if b1_v4434 then
                                    b2_v4435
                                  else
                                    0

val andbclo_i38 = fn b1_v4436 b2_v4437 ⇒ andb_i1(b1_v4436, b2_v4437)

fun orb_i2(b1_v4438, b2_v4439) = if b1_v4438 then
                                   1
                                 else
                                   b2_v4439

val orbclo_i39 = fn b1_v4440 b2_v4441 ⇒ orb_i2(b1_v4440, b2_v4441)

fun notb_i3(b_v4442) = if b_v4442 then
                         0
                       else
                         1

val notbclo_i40 = fn b_v4443 ⇒ notb_i3(b_v4443)

fun lten_i4(x_v4444, y_v4445) =
  if x_v4444 then
    if y_v4445 then
      lten_i4(x_v4444.-1, y_v4445.-1)
    else
      0
  else
    1

val ltenclo_i41 = fn x_v4446 y_v4447 ⇒ lten_i4(x_v4446, y_v4447)

fun gten_i5(x_v4448, y_v4449) =
  if x_v4448 then
    if y_v4449 then
      gten_i5(x_v4448.-1, y_v4449.-1)
    else
      1
  else
    if y_v4449 then
      0
    else
      1

val gtenclo_i42 = fn x_v4450 y_v4451 ⇒ gten_i5(x_v4450, y_v4451)

fun ltn_i6(x_v4452, y_v4453) =
  if x_v4452 then
    if y_v4453 then
      ltn_i6(x_v4452.-1, y_v4453.-1)
    else
      0
  else
    if y_v4453 then
      1
    else
      0

val ltnclo_i43 = fn x_v4454 y_v4455 ⇒ ltn_i6(x_v4454, y_v4455)

fun gtn_i7(x_v4456, y_v4457) =
  if x_v4456 then
    if y_v4457 then
      gtn_i7(x_v4456.-1, y_v4457.-1)
    else
      1
  else
    0

val gtnclo_i44 = fn x_v4458 y_v4459 ⇒ gtn_i7(x_v4458, y_v4459)

fun eqn_i8(x_v4460, y_v4461) =
  if x_v4460 then
    if y_v4461 then
      eqn_i8(x_v4460.-1, y_v4461.-1)
    else
      0
  else
    if y_v4461 then
      0
    else
      1

val eqnclo_i45 = fn x_v4462 y_v4463 ⇒ eqn_i8(x_v4462, y_v4463)

fun pred_i9(x_v4464) = if x_v4464 then
                         x_v4464.-1
                       else
                         0

val predclo_i46 = fn x_v4465 ⇒ pred_i9(x_v4465)

fun addn_i10(x_v4466, y_v4467) =
  if x_v4466 then
    addn_i10(x_v4466.-1, y_v4467).+1
  else
    y_v4467

val addnclo_i47 = fn x_v4468 y_v4469 ⇒ addn_i10(x_v4468, y_v4469)

fun subn_i11(x_v4470, y_v4471) =
  if y_v4471 then
    subn_i11(pred_i9(x_v4470), y_v4471.-1)
  else
    x_v4470

val subnclo_i48 = fn x_v4472 y_v4473 ⇒ subn_i11(x_v4472, y_v4473)

fun muln_i12(x_v4474, y_v4475) =
  if x_v4474 then
    addn_i10(y_v4475, muln_i12(x_v4474.-1, y_v4475))
  else
    0

val mulnclo_i49 = fn x_v4476 y_v4477 ⇒ muln_i12(x_v4476, y_v4477)

fun divn_i13(x_v4478, y_v4479) =
  if ltn_i6(x_v4478, y_v4479) then
    0
  else
    divn_i13(subn_i11(x_v4478, y_v4479), y_v4479).+1

val divnclo_i50 = fn x_v4480 y_v4481 ⇒ divn_i13(x_v4480, y_v4481)

fun modn_i14(x_v4482, y_v4483) =
  subn_i11(x_v4482, muln_i12(divn_i13(x_v4482, y_v4483), y_v4483))

val modnclo_i51 = fn x_v4484 y_v4485 ⇒ modn_i14(x_v4484, y_v4485)

fun cats_i15(s1_v4486, s2_v4487) =
  match s1_v4486 with
  | EmptyString_c2  ⇒ s2_v4487
  | String_c3 c_v4488 s1_v4489 ⇒
    (String_c3 c_v4488 cats_i15(s1_v4489, s2_v4487))
  end

val catsclo_i52 = fn s1_v4490 s2_v4491 ⇒ cats_i15(s1_v4490, s2_v4491)

fun strlen_i16(s_v4492) =
  match s_v4492 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v4493 s_v4494 ⇒ strlen_i16(s_v4494).+1
  end

val strlenclo_i53 = fn s_v4495 ⇒ strlen_i16(s_v4495)

fun lenUU_i33(A_v4496, xs_v4497) =
  match xs_v4497 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v4498 xs_v4499 ⇒
    match lenUU_i33(NULL, xs_v4499) with
    | (n_v4500, xs_v4501) ⇒ (n_v4500.+1, (consUU_c13 x_v4498 xs_v4501))
    end
  end

val lenUUclo_i54 = fn A_v4502 xs_v4503 ⇒ lenUU_i33(A_v4502, xs_v4503)

fun lenUL_i32(A_v4504, xs_v4505) =
  match xs_v4505 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v4506 xs_v4507 ⇒
    match lenUL_i32(NULL, xs_v4507) with
    | (n_v4508, xs_v4509) ⇒ (n_v4508.+1, (consUL_c11 x_v4506 xs_v4509))
    end
  end

val lenULclo_i55 = fn A_v4510 xs_v4511 ⇒ lenUL_i32(A_v4510, xs_v4511)

fun lenLL_i30(A_v4512, xs_v4513) =
  match xs_v4513 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v4514 xs_v4515 ⇒
    match lenLL_i30(NULL, xs_v4515) with
    | (n_v4516, xs_v4517) ⇒ (n_v4516.+1, (consLL_c7 x_v4514 xs_v4517))
    end
  end

val lenLLclo_i56 = fn A_v4518 xs_v4519 ⇒ lenLL_i30(A_v4518, xs_v4519)

fun appendUU_i37(A_v4520, xs_v4521, ys_v4522) =
  match xs_v4521 with
  | nilUU_c12  ⇒ ys_v4522
  | consUU_c13 x_v4523 xs_v4524 ⇒
    (consUU_c13 x_v4523 appendUU_i37(NULL, xs_v4524, ys_v4522))
  end

val appendUUclo_i57 =
  fn A_v4525 xs_v4526 ⇒
    ln ys_v4527 ⇒ appendUU_i37(A_v4525, xs_v4526, ys_v4527)

fun appendUL_i36(A_v4528, xs_v4529, ys_v4530) =
  match xs_v4529 with
  | nilUL_c10  ⇒ ys_v4530
  | consUL_c11 x_v4531 xs_v4532 ⇒
    (consUL_c11 x_v4531 appendUL_i36(NULL, xs_v4532, ys_v4530))
  end

val appendULclo_i58 =
  fn A_v4533 xs_v4534 ⇒
    ln ys_v4535 ⇒ appendUL_i36(A_v4533, xs_v4534, ys_v4535)

fun appendLL_i34(A_v4536, xs_v4537, ys_v4538) =
  match xs_v4537 with
  | nilLL_c6  ⇒ ys_v4538
  | consLL_c7 x_v4539 xs_v4540 ⇒
    (consLL_c7 x_v4539 appendLL_i34(NULL, xs_v4540, ys_v4538))
  end

val appendLLclo_i59 =
  fn A_v4541 xs_v4542 ⇒
    ln ys_v4543 ⇒ appendLL_i34(A_v4541, xs_v4542, ys_v4543)

fun readline_i25(__v4544) =
  ln __v4545 ⇒
    let ch_v4546 = open stdin in
    let ch_v4547 = send(ch_v4546, 1) in
    let __v4548 = recv(ch_v4547) in
    match __v4548 with
    | (s_v4549, ch_v4550) ⇒ let ch_v4551 = send(ch_v4550, 0) in s_v4549
    end

val readlineclo_i60 = fn __v4552 ⇒ readline_i25(__v4552)

fun print_i26(s_v4553) =
  ln __v4554 ⇒
    let ch_v4555 = open stdout in
    let ch_v4556 = send(ch_v4555, 1) in
    let ch_v4557 = send(ch_v4556, s_v4553) in
    let ch_v4558 = send(ch_v4557, 0) in NULL

val printclo_i61 = fn s_v4559 ⇒ print_i26(s_v4559)

fun prerr_i27(s_v4560) =
  ln __v4561 ⇒
    let ch_v4562 = open stderr in
    let ch_v4563 = send(ch_v4562, 1) in
    let ch_v4564 = send(ch_v4563, s_v4560) in
    let ch_v4565 = send(ch_v4564, 0) in NULL

val prerrclo_i62 = fn s_v4566 ⇒ prerr_i27(s_v4566)

trans3e success--------------------------

trans34 success--------------------------

