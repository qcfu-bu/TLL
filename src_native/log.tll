logical snd‹s,
r› {A : Type‹s›} {B : Type‹r›} (m : (∃ (_ : A) ⊗ B)) : B = let ⟨_, b⟩ = m in b

logical len_id‹s, t› {A : Type‹s›} (ls : ((list‹_, t›)
(A))) : ls ≡ ((snd) (_) (_)
(((len) (_) (ls)))) = match ls as ls0 in ls0 ≡ ((snd) (_) (_)
(((len) (_) (ls0)))) with nil  ⇒ refl | cons x
xs ⇒ ((match ((len) (_) (xs)) as p in (∀ (_ : ((len) (_)
         (xs)) ≡ p) → ((cons) (x) (xs)) ≡ ((snd) (_) (_)
         (let ⟨n, xs0⟩ = p in ⟨n.+1, ((cons) (x) (xs0))⟩))) with ⟨a, b⟩ ⇒ (fn (e0 : _) ⇒ rew [l, _ ⇒ (
         (cons) (x) (xs)) ≡ ((cons) (x) (l))] rew [p, _ ⇒ xs ≡ (
         (snd) (_) (_) (p))] e0 in ((len_id) (A) (xs)) in refl))
(refl))

parsing success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v167 : bool) (b2_v168 : bool) ⇒
    match b1_v167 as __v169 in ??1 with
    | true ⇒ b2_v168 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v172 : bool) (b2_v173 : bool) ⇒
    match b1_v172 as __v174 in ??2 with
    | true ⇒ true | false ⇒ b2_v173
    end

program notb_i3 : bool → bool =
  fn (b_v176 : bool) ⇒
    match b_v176 as __v177 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v180 : nat) (y_v181 : nat) ⇒
    match x_v180 as __v182 in ??4 with
    | O ⇒ true
    | S x_v183 ⇒
      match y_v181 as __v184 in ??5 with
      | O ⇒ false | S y_v185 ⇒ (lten_i4 x_v183 y_v185)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v188 : nat) (y_v189 : nat) ⇒
    match x_v188 as __v190 in ??6 with
    | O ⇒
      match y_v189 as __v191 in ??8 with
      | O ⇒ true | S __v192 ⇒ false
      end
    | S x_v193 ⇒
      match y_v189 as __v194 in ??7 with
      | O ⇒ true | S y_v195 ⇒ (gten_i5 x_v193 y_v195)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v198 : nat) (y_v199 : nat) ⇒
    match x_v198 as __v200 in ??9 with
    | O ⇒
      match y_v199 as __v201 in ??11 with
      | O ⇒ false | S y_v202 ⇒ true
      end
    | S x_v203 ⇒
      match y_v199 as __v204 in ??10 with
      | O ⇒ false | S y_v205 ⇒ (ltn_i6 x_v203 y_v205)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v208 : nat) (y_v209 : nat) ⇒
    match x_v208 as __v210 in ??12 with
    | O ⇒ false
    | S x_v211 ⇒
      match y_v209 as __v212 in ??13 with
      | O ⇒ true | S y_v213 ⇒ (gtn_i7 x_v211 y_v213)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v216 : nat) (y_v217 : nat) ⇒
    match x_v216 as __v218 in ??14 with
    | O ⇒
      match y_v217 as __v219 in ??16 with
      | O ⇒ true | S __v220 ⇒ false
      end
    | S x_v221 ⇒
      match y_v217 as __v222 in ??15 with
      | O ⇒ false | S y_v223 ⇒ (eqn_i8 x_v221 y_v223)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v225 : nat) ⇒
    match x_v225 as __v226 in ??17 with
    | O ⇒ 0 | S x_v227 ⇒ x_v227
    end

program addn_i10 : nat → nat → nat =
  fn (x_v230 : nat) (y_v231 : nat) ⇒
    match x_v230 as __v232 in ??18 with
    | O ⇒ y_v231 | S x_v233 ⇒ (addn_i10 x_v233 y_v231).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v236 : nat) (y_v237 : nat) ⇒
    match y_v237 as __v238 in ??19 with
    | O ⇒ x_v236 | S y_v239 ⇒ (subn_i11 (pred_i9 x_v236) y_v239)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v242 : nat) (y_v243 : nat) ⇒
    match x_v242 as __v244 in ??20 with
    | O ⇒ 0 | S x_v245 ⇒ (addn_i10 y_v243 (muln_i12 x_v245 y_v243))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v248 : nat) (y_v249 : nat) ⇒
    match (ltn_i6 x_v248 y_v249) as __v250 in ??21 with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v248 y_v249) y_v249).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v253 : nat) (y_v254 : nat) ⇒
    (subn_i11 x_v253 (muln_i12 (divn_i13 x_v253 y_v254) y_v254))

inductive char_d1 : U =
| Char_c1 of (n_v255 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v256 : char_d1) (s_v257 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v260 : string_d2) (s2_v261 : string_d2) ⇒
    match s1_v260 as __v262 in ??22 with
    | EmptyString_c2  ⇒ s2_v261
    | String_c3 c_v263 s1_v264 ⇒
      (String_c3‹› c_v263 (cats_i15 s1_v264 s2_v261))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v266 : string_d2) ⇒
    match s_v266 as __v267 in ??23 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v268 s_v269 ⇒ (strlen_i16 s_v269).+1
    end

inductive list_d3 ‹s_s270, t_s271›
  (A_v272 : Type‹s_s270›) : Type‹t_s271›
=
| nil_c4 of
    ‹s_s273, t_s274› (A_v275 : Type‹s_s273›)
    : (list_d3‹s_s273, t_s274› A_v275)
| cons_c5 of
    ‹s_s276, t_s277› (A_v278 : Type‹s_s276›) (hd_v279 : A_v278)
    (tl_v280 : (list_d3‹s_s276, t_s277› A_v278))
    : (list_d3‹s_s276, t_s277› A_v278)

program len_i17 ‹s_s281, t_s282› :
  ∀ {A_v283 : Type‹s_s281›} →
    (list_d3‹??24, t_s282› A_v283) →
      nat ⊗ (list_d3‹??25, t_s282› A_v283)
=
  fn {A_v286 : Type‹s_s281›}
     (xs_v287 : (list_d3‹??24, t_s282› A_v286)) ⇒
    match xs_v287 as __v288 in ??26 with
    | nil_c4  ⇒ ⟨0, nil_c4‹??36, ??35›⟩
    | cons_c5 x_v289 xs_v290 ⇒
      match (len_i17‹??29, ??28› ??27 xs_v290) as __v291 in ??30 with
      | ⟨n_v292, xs_v293⟩ ⇒
        ⟨n_v292.+1, (cons_c5‹??33, ??32› x_v289 xs_v293)⟩
      end
    end

program append_i18 ‹s_s294, t_s295› :
  ∀ {A_v296 : Type‹s_s294›} →
    (list_d3‹??37, t_s295› A_v296) →
      (list_d3‹??38, t_s295› A_v296) ⊸ (list_d3‹??40, ??39› A_v296)
=
  fn {A_v299 : Type‹s_s294›}
     (xs_v300 : (list_d3‹??37, t_s295› A_v299)) ⇒
    ln (ys_v301 : ??41) ⇒
      match xs_v300 as __v302 in ??42 with
      | nil_c4  ⇒ ys_v301
      | cons_c5 x_v303 xs_v304 ⇒
        (cons_c5‹??48, ??47›
          x_v303 (append_i18‹??45, ??44› ??43 xs_v304 ys_v301))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v306 : unit) ⇒
    ⇑(b_v307 : bool) ⇒
      match b_v307 as __v308 in ??49 with
      | true ⇒ ⇓(__v309 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v311 : unit) ⇒
    ⇑(b_v312 : bool) ⇒
      match b_v312 as __v313 in ??50 with
      | true ⇒ ⇑(__v314 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v316 : unit) ⇒
    ⇑(b_v317 : bool) ⇒
      match b_v317 as __v318 in ??51 with
      | true ⇒ ⇑(__v319 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v321 : unit) ⇒
    let ch_v322 ⇐ open stdin in
    let ch_v323 ⇐ (send ch_v322 true) in
    let __v324 ⇐ recv ch_v323 in
    match __v324 as __v325 in ??52 with
    | ⟨s_v326, ch_v327⟩ ⇒
      let ch_v328 ⇐ (send ch_v327 false) in
      let __v329 ⇐ close ch_v328 in return s_v326
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v331 : string_d2) ⇒
    let ch_v332 ⇐ open stdout in
    let ch_v333 ⇐ (send ch_v332 true) in
    let ch_v334 ⇐ (send ch_v333 s_v331) in
    let ch_v335 ⇐ (send ch_v334 false) in close ch_v335

program prerr_i27 : string_d2 → IO unit =
  fn (s_v337 : string_d2) ⇒
    let ch_v338 ⇐ open stderr in
    let ch_v339 ⇐ (send ch_v338 true) in
    let ch_v340 ⇐ (send ch_v339 s_v337) in
    let ch_v341 ⇐ (send ch_v340 false) in close ch_v341

logical snd_i28 ‹s_s342, r_s343› :
  ∀ {A_v344 : Type‹s_s342›} →
    ∀ {B_v345 : Type‹r_s343›} → A_v344 ⊗ B_v345 → B_v345
=
  fn {A_v348 : Type‹s_s342›} {B_v349 : Type‹r_s343›}
     (m_v350 : A_v348 ⊗ B_v349) ⇒
    let __v352 = m_v350 in
    match __v352 as __v353 in ??53 with
    | ⟨__v354, b_v355⟩ ⇒ b_v355
    end

logical len_id_i29 ‹s_s356, t_s357› :
  ∀ {A_v358 : Type‹s_s356›} →
    ∀ (ls_v359 : (list_d3‹??54, t_s357› A_v358)) →
      ls_v359 ≡
        (snd_i28‹??61, ??60›
          ??59 ??58 (len_i17‹??57, ??56› ??55 ls_v359))
=
  fn {A_v360 : Type‹s_s356›}
     (ls_v361 : (list_d3‹??54, t_s357› A_v360)) ⇒
    match ls_v361 as ls0_v362 in
      ls0_v362 ≡
        (snd_i28‹??69, ??68›
          ??67 ??66 (len_i17‹??65, ??64› ??63 ls0_v362)) with
    | nil_c4  ⇒ refl ??107
    | cons_c5 x_v363 xs_v364 ⇒
      (match (len_i17‹??73, ??72› ??71 xs_v364) as p_v365 in
         ∀ (__v366 : (len_i17‹??76, ??75› ??74 xs_v364) ≡ p_v365) →
           (cons_c5‹??80, ??79› x_v363 xs_v364) ≡
             (snd_i28‹??88, ??87›
               ??86 ??85
               let __v367 = p_v365 in
               match __v367 as __v368 in ??84 with
               | ⟨n_v369, xs0_v370⟩ ⇒
                 ⟨n_v369.+1, (cons_c5‹??83, ??82› x_v363 xs0_v370)⟩
               end) with
       | ⟨a_v371, b_v372⟩ ⇒
         fn (e0_v373 : ??90) ⇒
           rew [l_v374, __v375 ⇒
             (cons_c5‹??101, ??100› x_v363 xs_v364) ≡
               (cons_c5‹??104, ??103› x_v363 l_v374)]
             rew [p_v376, __v377 ⇒
               xs_v364 ≡ (snd_i28‹??96, ??95› ??94 ??93 p_v376)]
               e0_v373 in
             (len_id_i29‹??92, ??91› A_v360 xs_v364) in
           refl ??98
       end refl ??106)
    end

trans01 success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v24788 : bool) (b2_v24789 : bool) ⇒
    match b1_v24788 as __v24790 in bool with
    | true ⇒ b2_v24789 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v24793 : bool) (b2_v24794 : bool) ⇒
    match b1_v24793 as __v24795 in bool with
    | true ⇒ true | false ⇒ b2_v24794
    end

program notb_i3 : bool → bool =
  fn (b_v24797 : bool) ⇒
    match b_v24797 as __v24798 in bool with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v24801 : nat) (y_v24802 : nat) ⇒
    match x_v24801 as __v24803 in bool with
    | O ⇒ true
    | S x_v24804 ⇒
      match y_v24802 as __v24805 in bool with
      | O ⇒ false | S y_v24806 ⇒ (lten_i4 x_v24804 y_v24806)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v24809 : nat) (y_v24810 : nat) ⇒
    match x_v24809 as __v24811 in bool with
    | O ⇒
      match y_v24810 as __v24812 in bool with
      | O ⇒ true | S __v24813 ⇒ false
      end
    | S x_v24814 ⇒
      match y_v24810 as __v24815 in bool with
      | O ⇒ true | S y_v24816 ⇒ (gten_i5 x_v24814 y_v24816)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v24819 : nat) (y_v24820 : nat) ⇒
    match x_v24819 as __v24821 in bool with
    | O ⇒
      match y_v24820 as __v24822 in bool with
      | O ⇒ false | S y_v24823 ⇒ true
      end
    | S x_v24824 ⇒
      match y_v24820 as __v24825 in bool with
      | O ⇒ false | S y_v24826 ⇒ (ltn_i6 x_v24824 y_v24826)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v24829 : nat) (y_v24830 : nat) ⇒
    match x_v24829 as __v24831 in bool with
    | O ⇒ false
    | S x_v24832 ⇒
      match y_v24830 as __v24833 in bool with
      | O ⇒ true | S y_v24834 ⇒ (gtn_i7 x_v24832 y_v24834)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v24837 : nat) (y_v24838 : nat) ⇒
    match x_v24837 as __v24839 in bool with
    | O ⇒
      match y_v24838 as __v24840 in bool with
      | O ⇒ true | S __v24841 ⇒ false
      end
    | S x_v24842 ⇒
      match y_v24838 as __v24843 in bool with
      | O ⇒ false | S y_v24844 ⇒ (eqn_i8 x_v24842 y_v24844)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v24846 : nat) ⇒
    match x_v24846 as __v24847 in nat with
    | O ⇒ 0 | S x_v24848 ⇒ x_v24848
    end

program addn_i10 : nat → nat → nat =
  fn (x_v24851 : nat) (y_v24852 : nat) ⇒
    match x_v24851 as __v24853 in nat with
    | O ⇒ y_v24852 | S x_v24854 ⇒ (addn_i10 x_v24854 y_v24852).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v24857 : nat) (y_v24858 : nat) ⇒
    match y_v24858 as __v24859 in nat with
    | O ⇒ x_v24857 | S y_v24860 ⇒ (subn_i11 (pred_i9 x_v24857) y_v24860)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v24863 : nat) (y_v24864 : nat) ⇒
    match x_v24863 as __v24865 in nat with
    | O ⇒ 0
    | S x_v24866 ⇒ (addn_i10 y_v24864 (muln_i12 x_v24866 y_v24864))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v24869 : nat) (y_v24870 : nat) ⇒
    match (ltn_i6 x_v24869 y_v24870) as __v24871 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i13 (subn_i11 x_v24869 y_v24870) y_v24870).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v24874 : nat) (y_v24875 : nat) ⇒
    (subn_i11 x_v24874 (muln_i12 (divn_i13 x_v24874 y_v24875) y_v24875))

inductive char_d1 : U =
| Char_c1 of (n_v24876 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v24877 : char_d1) (s_v24878 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v24881 : string_d2) (s2_v24882 : string_d2) ⇒
    match s1_v24881 as __v24883 in string_d2 with
    | EmptyString_c2  ⇒ s2_v24882
    | String_c3 c_v24884 s1_v24885 ⇒
      (String_c3‹› c_v24884 (cats_i15 s1_v24885 s2_v24882))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v24887 : string_d2) ⇒
    match s_v24887 as __v24888 in nat with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v24889 s_v24890 ⇒ (strlen_i16 s_v24890).+1
    end

inductive list_d3 ‹s_s24891, t_s24892›
  (A_v24893 : Type‹s_s24891›) : Type‹t_s24892›
=
| nil_c4 of
    ‹s_s24894, t_s24895› (A_v24896 : Type‹s_s24894›)
    : (list_d3‹s_s24894, t_s24895› A_v24896)
| cons_c5 of
    ‹s_s24897, t_s24898› (A_v24899 : Type‹s_s24897›)
    (hd_v24900 : A_v24899)
    (tl_v24901 : (list_d3‹s_s24897, t_s24898› A_v24899))
    : (list_d3‹s_s24897, t_s24898› A_v24899)

program len_i17 ‹s_s24902, t_s24903› :
  ∀ {A_v24904 : Type‹s_s24902›} →
    (list_d3‹s_s24902, t_s24903› A_v24904) →
      nat ⊗ (list_d3‹s_s24902, t_s24903› A_v24904)
=
  fn {A_v24907 : Type‹s_s24902›}
     (xs_v24908 : (list_d3‹s_s24902, t_s24903› A_v24907)) ⇒
    match xs_v24908 as __v24909 in
      nat ⊗ (list_d3‹s_s24902, t_s24903› A_v24907) with
    | nil_c4  ⇒ ⟨0, nil_c4‹s_s24902, t_s24903›⟩
    | cons_c5 x_v24911 xs_v24912 ⇒
      match (len_i17‹s_s24902, t_s24903› A_v24907 xs_v24912) as __v24913 in
        nat ⊗ (list_d3‹s_s24902, t_s24903› A_v24907) with
      | ⟨n_v24915, xs_v24916⟩ ⇒
        ⟨n_v24915.+1, (cons_c5‹s_s24902, t_s24903› x_v24911 xs_v24916)⟩
      end
    end

program append_i18 ‹s_s24917, t_s24918› :
  ∀ {A_v24919 : Type‹s_s24917›} →
    (list_d3‹s_s24917, t_s24918› A_v24919) →
      (list_d3‹s_s24917, t_s24918› A_v24919) ⊸
        (list_d3‹s_s24917, t_s24918› A_v24919)
=
  fn {A_v24922 : Type‹s_s24917›}
     (xs_v24923 : (list_d3‹s_s24917, t_s24918› A_v24922)) ⇒
    ln (ys_v24924 : (list_d3‹s_s24917, t_s24918› A_v24922)) ⇒
      match xs_v24923 as __v24925 in
        (list_d3‹s_s24917, t_s24918› A_v24922) with
      | nil_c4  ⇒ ys_v24924
      | cons_c5 x_v24926 xs_v24927 ⇒
        (cons_c5‹s_s24917, t_s24918›
          x_v24926
          (append_i18‹s_s24917, t_s24918› A_v24922 xs_v24927 ys_v24924))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v24929 : unit) ⇒
    ⇑(b_v24930 : bool) ⇒
      match b_v24930 as __v24931 in proto with
      | true ⇒ ⇓(__v24932 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v24934 : unit) ⇒
    ⇑(b_v24935 : bool) ⇒
      match b_v24935 as __v24936 in proto with
      | true ⇒ ⇑(__v24937 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v24939 : unit) ⇒
    ⇑(b_v24940 : bool) ⇒
      match b_v24940 as __v24941 in proto with
      | true ⇒ ⇑(__v24942 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v24944 : unit) ⇒
    let ch_v24945 ⇐ open stdin in
    let ch_v24946 ⇐ (send ch_v24945 true) in
    let __v24947 ⇐ recv ch_v24946 in
    match __v24947 as __v24948 in IO string_d2 with
    | ⟨s_v24949, ch_v24950⟩ ⇒
      let ch_v24951 ⇐ (send ch_v24950 false) in
      let __v24952 ⇐ close ch_v24951 in return s_v24949
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v24954 : string_d2) ⇒
    let ch_v24955 ⇐ open stdout in
    let ch_v24956 ⇐ (send ch_v24955 true) in
    let ch_v24957 ⇐ (send ch_v24956 s_v24954) in
    let ch_v24958 ⇐ (send ch_v24957 false) in close ch_v24958

program prerr_i27 : string_d2 → IO unit =
  fn (s_v24960 : string_d2) ⇒
    let ch_v24961 ⇐ open stderr in
    let ch_v24962 ⇐ (send ch_v24961 true) in
    let ch_v24963 ⇐ (send ch_v24962 s_v24960) in
    let ch_v24964 ⇐ (send ch_v24963 false) in close ch_v24964

logical snd_i28 ‹s_s24965, r_s24966› :
  ∀ {A_v24967 : Type‹s_s24965›} →
    ∀ {B_v24968 : Type‹r_s24966›} →
      A_v24967 ⊗ B_v24968 → B_v24968
=
  fn {A_v24971 : Type‹s_s24965›} {B_v24972 : Type‹r_s24966›}
     (m_v24973 : A_v24971 ⊗ B_v24972) ⇒
    let __v24975 = m_v24973 in
    match __v24975 as __v24976 in B_v24972 with
    | ⟨__v24977, b_v24978⟩ ⇒ b_v24978
    end

logical len_id_i29 ‹s_s24979, t_s24980› :
  ∀ {A_v24981 : Type‹s_s24979›} →
    ∀ (ls_v24982 : (list_d3‹s_s24979, t_s24980› A_v24981)) →
      ls_v24982 ≡
        (snd_i28‹U, t_s24980›
          nat (list_d3‹s_s24979, t_s24980› A_v24981)
          (len_i17‹s_s24979, t_s24980› A_v24981 ls_v24982))
=
  fn {A_v24983 : Type‹s_s24979›}
     (ls_v24984 : (list_d3‹s_s24979, t_s24980› A_v24983)) ⇒
    match ls_v24984 as ls0_v24985 in
      ls0_v24985 ≡
        (snd_i28‹U, t_s24980›
          nat (list_d3‹s_s24979, t_s24980› A_v24983)
          (len_i17‹s_s24979, t_s24980› A_v24983 ls0_v24985)) with
    | nil_c4  ⇒ refl nil_c4‹s_s24979, t_s24980›
    | cons_c5 x_v24986 xs_v24987 ⇒
      (match (len_i17‹s_s24979, t_s24980› A_v24983 xs_v24987) as p_v24988 in
         (len_i17‹s_s24979, t_s24980› A_v24983 xs_v24987) ≡ p_v24988 →
           (cons_c5‹s_s24979, t_s24980› x_v24986 xs_v24987) ≡
             (snd_i28‹U, t_s24980›
               nat (list_d3‹s_s24979, t_s24980› A_v24983)
               let __v24990 = p_v24988 in
               match __v24990 as __v24991 in
                 nat ⊗ (list_d3‹s_s24979, t_s24980› A_v24983) with
               | ⟨n_v24993, xs0_v24994⟩ ⇒
                 ⟨n_v24993.+1, (cons_c5‹s_s24979, t_s24980›
                                   x_v24986 xs0_v24994)⟩
               end) with
       | ⟨a_v24995, b_v24996⟩ ⇒
         fn (e0_v24997 : (len_i17‹s_s24979, t_s24980› A_v24983 xs_v24987) ≡
                           (⟨a_v24995, b_v24996⟩
                             : nat ⊗
                                 (list_d3‹s_s24979, t_s24980› A_v24983))) ⇒
           rew [l_v24999, __v25000 ⇒
             (cons_c5‹s_s24979, t_s24980› x_v24986 xs_v24987) ≡
               (cons_c5‹s_s24979, t_s24980› x_v24986 l_v24999)]
             rew [p_v25001, __v25002 ⇒
               xs_v24987 ≡
                 (snd_i28‹U, t_s24980›
                   nat (list_d3‹s_s24979, t_s24980› A_v24983) p_v25001)]
               e0_v24997 in
             (len_id_i29‹s_s24979, t_s24980› A_v24983 xs_v24987) in
           refl (cons_c5‹s_s24979, t_s24980› x_v24986 xs_v24987)
       end refl (len_i17‹s_s24979, t_s24980› A_v24983 xs_v24987))
    end

trans1e success--------------------------

def andb_i1 =
  fn b1_v25464 b2_v25465 ⇒
    match b1_v25464 with
    | true ⇒ b2_v25465 | false ⇒ false
    end

def orb_i2 =
  fn b1_v25466 b2_v25467 ⇒
    match b1_v25466 with
    | true ⇒ true | false ⇒ b2_v25467
    end

def notb_i3 =
  fn b_v25468 ⇒ match b_v25468 with
                  | true ⇒ false | false ⇒ true
                  end

def lten_i4 =
  fn x_v25469 y_v25470 ⇒
    match x_v25469 with
    | O ⇒ true
    | S x_v25471 ⇒
      match y_v25470 with
      | O ⇒ false | S y_v25472 ⇒ ((lten_i4 x_v25471) y_v25472)
      end
    end

def gten_i5 =
  fn x_v25473 y_v25474 ⇒
    match x_v25473 with
    | O ⇒ match y_v25474 with
            | O ⇒ true | S __v25475 ⇒ false
            end
    | S x_v25476 ⇒
      match y_v25474 with
      | O ⇒ true | S y_v25477 ⇒ ((gten_i5 x_v25476) y_v25477)
      end
    end

def ltn_i6 =
  fn x_v25478 y_v25479 ⇒
    match x_v25478 with
    | O ⇒ match y_v25479 with
            | O ⇒ false | S y_v25480 ⇒ true
            end
    | S x_v25481 ⇒
      match y_v25479 with
      | O ⇒ false | S y_v25482 ⇒ ((ltn_i6 x_v25481) y_v25482)
      end
    end

def gtn_i7 =
  fn x_v25483 y_v25484 ⇒
    match x_v25483 with
    | O ⇒ false
    | S x_v25485 ⇒
      match y_v25484 with
      | O ⇒ true | S y_v25486 ⇒ ((gtn_i7 x_v25485) y_v25486)
      end
    end

def eqn_i8 =
  fn x_v25487 y_v25488 ⇒
    match x_v25487 with
    | O ⇒ match y_v25488 with
            | O ⇒ true | S __v25489 ⇒ false
            end
    | S x_v25490 ⇒
      match y_v25488 with
      | O ⇒ false | S y_v25491 ⇒ ((eqn_i8 x_v25490) y_v25491)
      end
    end

def pred_i9 =
  fn x_v25492 ⇒ match x_v25492 with
                  | O ⇒ 0 | S x_v25493 ⇒ x_v25493
                  end

def addn_i10 =
  fn x_v25494 y_v25495 ⇒
    match x_v25494 with
    | O ⇒ y_v25495 | S x_v25496 ⇒ ((addn_i10 x_v25496) y_v25495).+1
    end

def subn_i11 =
  fn x_v25497 y_v25498 ⇒
    match y_v25498 with
    | O ⇒ x_v25497
    | S y_v25499 ⇒ ((subn_i11 (pred_i9 x_v25497)) y_v25499)
    end

def muln_i12 =
  fn x_v25500 y_v25501 ⇒
    match x_v25500 with
    | O ⇒ 0
    | S x_v25502 ⇒ ((addn_i10 y_v25501) ((muln_i12 x_v25502) y_v25501))
    end

def divn_i13 =
  fn x_v25503 y_v25504 ⇒
    match ((ltn_i6 x_v25503) y_v25504) with
    | true ⇒ 0
    | false ⇒ ((divn_i13 ((subn_i11 x_v25503) y_v25504)) y_v25504).+1
    end

def modn_i14 =
  fn x_v25505 y_v25506 ⇒
    ((subn_i11 x_v25505)
      ((muln_i12 ((divn_i13 x_v25505) y_v25506)) y_v25506))

data char_d1 =
| Char_c1 of size(1)

data string_d2 =
| EmptyString_c2 of size(0) | String_c3 of size(2)

def cats_i15 =
  fn s1_v25507 s2_v25508 ⇒
    match s1_v25507 with
    | EmptyString_c2  ⇒ s2_v25508
    | String_c3 c_v25509 s1_v25510 ⇒
      (String_c3 c_v25509 ((cats_i15 s1_v25510) s2_v25508))
    end

def strlen_i16 =
  fn s_v25511 ⇒
    match s_v25511 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v25512 s_v25513 ⇒ (strlen_i16 s_v25513).+1
    end

data listUU_d7 =
| nilUU_c12 of size(0) | consUU_c13 of size(2)

data listUL_d6 =
| nilUL_c10 of size(0) | consUL_c11 of size(2)

data listLU_d5 =
| nilLU_c8 of size(0)

data listLL_d4 =
| nilLL_c6 of size(0) | consLL_c7 of size(2)

def lenUU_i33 =
  fn A_v25514 xs_v25515 ⇒
    match xs_v25515 with
    | nilUU_c12  ⇒ (0, nilUU_c12)
    | consUU_c13 x_v25516 xs_v25517 ⇒
      match ((lenUU_i33 NULL) xs_v25517) with
      | (n_v25518, xs_v25519) ⇒
        (n_v25518.+1, (consUU_c13 x_v25516 xs_v25519))
      end
    end

def lenUL_i32 =
  fn A_v25520 xs_v25521 ⇒
    match xs_v25521 with
    | nilUL_c10  ⇒ (0, nilUL_c10)
    | consUL_c11 x_v25522 xs_v25523 ⇒
      match ((lenUL_i32 NULL) xs_v25523) with
      | (n_v25524, xs_v25525) ⇒
        (n_v25524.+1, (consUL_c11 x_v25522 xs_v25525))
      end
    end

def lenLL_i30 =
  fn A_v25526 xs_v25527 ⇒
    match xs_v25527 with
    | nilLL_c6  ⇒ (0, nilLL_c6)
    | consLL_c7 x_v25528 xs_v25529 ⇒
      match ((lenLL_i30 NULL) xs_v25529) with
      | (n_v25530, xs_v25531) ⇒
        (n_v25530.+1, (consLL_c7 x_v25528 xs_v25531))
      end
    end

def appendUU_i37 =
  fn A_v25532 xs_v25533 ⇒
    ln ys_v25534 ⇒
      match xs_v25533 with
      | nilUU_c12  ⇒ ys_v25534
      | consUU_c13 x_v25535 xs_v25536 ⇒
        (consUU_c13 x_v25535 (((appendUU_i37 NULL) xs_v25536) ys_v25534))
      end

def appendUL_i36 =
  fn A_v25537 xs_v25538 ⇒
    ln ys_v25539 ⇒
      match xs_v25538 with
      | nilUL_c10  ⇒ ys_v25539
      | consUL_c11 x_v25540 xs_v25541 ⇒
        (consUL_c11 x_v25540 (((appendUL_i36 NULL) xs_v25541) ys_v25539))
      end

def appendLL_i34 =
  fn A_v25542 xs_v25543 ⇒
    ln ys_v25544 ⇒
      match xs_v25543 with
      | nilLL_c6  ⇒ ys_v25544
      | consLL_c7 x_v25545 xs_v25546 ⇒
        (consLL_c7 x_v25545 (((appendLL_i34 NULL) xs_v25546) ys_v25544))
      end

def readline_i25 =
  fn __v25547 ⇒
    let ch_v25548 ⇐ open stdin in
    let ch_v25549 ⇐ (send ch_v25548 true) in
    let __v25550 ⇐ recv ch_v25549 in
    match __v25550 with
    | (s_v25551, ch_v25552) ⇒
      let ch_v25553 ⇐ (send ch_v25552 false) in
      let __v25554 ⇐ close⇑ ch_v25553 in return s_v25551
    end

def print_i26 =
  fn s_v25555 ⇒
    let ch_v25556 ⇐ open stdout in
    let ch_v25557 ⇐ (send ch_v25556 true) in
    let ch_v25558 ⇐ (send ch_v25557 s_v25555) in
    let ch_v25559 ⇐ (send ch_v25558 false) in close⇑ ch_v25559

def prerr_i27 =
  fn s_v25560 ⇒
    let ch_v25561 ⇐ open stderr in
    let ch_v25562 ⇐ (send ch_v25561 true) in
    let ch_v25563 ⇐ (send ch_v25562 s_v25560) in
    let ch_v25564 ⇐ (send ch_v25563 false) in close⇑ ch_v25564

trans12 success--------------------------

fun andb_i1(b1_v25711, b2_v25712) = if b1_v25711 then
                                      b2_v25712
                                    else
                                      0

val andbclo_i46 = fn b1_v25713 b2_v25714 ⇒ andb_i1(b1_v25713, b2_v25714)

fun orb_i2(b1_v25715, b2_v25716) = if b1_v25715 then
                                     1
                                   else
                                     b2_v25716

val orbclo_i47 = fn b1_v25717 b2_v25718 ⇒ orb_i2(b1_v25717, b2_v25718)

fun notb_i3(b_v25719) = if b_v25719 then
                          0
                        else
                          1

val notbclo_i48 = fn b_v25720 ⇒ notb_i3(b_v25720)

fun lten_i4(x_v25721, y_v25722) =
  let __v25723 = x_v25721 in
  if __v25723 then
    let x_v25724 = __v25723.-1 in
    let __v25725 = y_v25722 in
    if __v25725 then
      let y_v25726 = __v25725.-1 in lten_i4(x_v25724, y_v25726)
    else
      0
  else
    1

val ltenclo_i49 = fn x_v25727 y_v25728 ⇒ lten_i4(x_v25727, y_v25728)

fun gten_i5(x_v25729, y_v25730) =
  let __v25731 = x_v25729 in
  if __v25731 then
    let x_v25732 = __v25731.-1 in
    let __v25733 = y_v25730 in
    if __v25733 then
      let y_v25734 = __v25733.-1 in gten_i5(x_v25732, y_v25734)
    else
      1
  else
    let __v25735 = y_v25730 in
    if __v25735 then
      let __v25736 = __v25735.-1 in 0
    else
      1

val gtenclo_i50 = fn x_v25737 y_v25738 ⇒ gten_i5(x_v25737, y_v25738)

fun ltn_i6(x_v25739, y_v25740) =
  let __v25741 = x_v25739 in
  if __v25741 then
    let x_v25742 = __v25741.-1 in
    let __v25743 = y_v25740 in
    if __v25743 then
      let y_v25744 = __v25743.-1 in ltn_i6(x_v25742, y_v25744)
    else
      0
  else
    let __v25745 = y_v25740 in
    if __v25745 then
      let y_v25746 = __v25745.-1 in 1
    else
      0

val ltnclo_i51 = fn x_v25747 y_v25748 ⇒ ltn_i6(x_v25747, y_v25748)

fun gtn_i7(x_v25749, y_v25750) =
  let __v25751 = x_v25749 in
  if __v25751 then
    let x_v25752 = __v25751.-1 in
    let __v25753 = y_v25750 in
    if __v25753 then
      let y_v25754 = __v25753.-1 in gtn_i7(x_v25752, y_v25754)
    else
      1
  else
    0

val gtnclo_i52 = fn x_v25755 y_v25756 ⇒ gtn_i7(x_v25755, y_v25756)

fun eqn_i8(x_v25757, y_v25758) =
  let __v25759 = x_v25757 in
  if __v25759 then
    let x_v25760 = __v25759.-1 in
    let __v25761 = y_v25758 in
    if __v25761 then
      let y_v25762 = __v25761.-1 in eqn_i8(x_v25760, y_v25762)
    else
      0
  else
    let __v25763 = y_v25758 in
    if __v25763 then
      let __v25764 = __v25763.-1 in 0
    else
      1

val eqnclo_i53 = fn x_v25765 y_v25766 ⇒ eqn_i8(x_v25765, y_v25766)

fun pred_i9(x_v25767) =
  let __v25768 = x_v25767 in
  if __v25768 then
    let x_v25769 = __v25768.-1 in x_v25769
  else
    0

val predclo_i54 = fn x_v25770 ⇒ pred_i9(x_v25770)

fun addn_i10(x_v25771, y_v25772) =
  let __v25773 = x_v25771 in
  if __v25773 then
    let x_v25774 = __v25773.-1 in addn_i10(x_v25774, y_v25772).+1
  else
    y_v25772

val addnclo_i55 = fn x_v25775 y_v25776 ⇒ addn_i10(x_v25775, y_v25776)

fun subn_i11(x_v25777, y_v25778) =
  let __v25779 = y_v25778 in
  if __v25779 then
    let y_v25780 = __v25779.-1 in subn_i11(pred_i9(x_v25777), y_v25780)
  else
    x_v25777

val subnclo_i56 = fn x_v25781 y_v25782 ⇒ subn_i11(x_v25781, y_v25782)

fun muln_i12(x_v25783, y_v25784) =
  let __v25785 = x_v25783 in
  if __v25785 then
    let x_v25786 = __v25785.-1 in
    addn_i10(y_v25784, muln_i12(x_v25786, y_v25784))
  else
    0

val mulnclo_i57 = fn x_v25787 y_v25788 ⇒ muln_i12(x_v25787, y_v25788)

fun divn_i13(x_v25789, y_v25790) =
  if ltn_i6(x_v25789, y_v25790) then
    0
  else
    divn_i13(subn_i11(x_v25789, y_v25790), y_v25790).+1

val divnclo_i58 = fn x_v25791 y_v25792 ⇒ divn_i13(x_v25791, y_v25792)

fun modn_i14(x_v25793, y_v25794) =
  subn_i11(x_v25793, muln_i12(divn_i13(x_v25793, y_v25794), y_v25794))

val modnclo_i59 = fn x_v25795 y_v25796 ⇒ modn_i14(x_v25795, y_v25796)

fun cats_i15(s1_v25797, s2_v25798) =
  match s1_v25797 with
  | EmptyString_c2  ⇒ s2_v25798
  | String_c3 c_v25799 s1_v25800 ⇒
    (String_c3 c_v25799 cats_i15(s1_v25800, s2_v25798))
  end

val catsclo_i60 = fn s1_v25801 s2_v25802 ⇒ cats_i15(s1_v25801, s2_v25802)

fun strlen_i16(s_v25803) =
  match s_v25803 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v25804 s_v25805 ⇒ strlen_i16(s_v25805).+1
  end

val strlenclo_i61 = fn s_v25806 ⇒ strlen_i16(s_v25806)

fun lenUU_i33(A_v25807, xs_v25808) =
  match xs_v25808 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v25809 xs_v25810 ⇒
    match lenUU_i33(NULL, xs_v25810) with
    | (n_v25811, xs_v25812) ⇒
      (n_v25811.+1, (consUU_c13 x_v25809 xs_v25812))
    end
  end

val lenUUclo_i62 = fn A_v25813 xs_v25814 ⇒ lenUU_i33(A_v25813, xs_v25814)

fun lenUL_i32(A_v25815, xs_v25816) =
  match xs_v25816 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v25817 xs_v25818 ⇒
    match lenUL_i32(NULL, xs_v25818) with
    | (n_v25819, xs_v25820) ⇒
      (n_v25819.+1, (consUL_c11 x_v25817 xs_v25820))
    end
  end

val lenULclo_i63 = fn A_v25821 xs_v25822 ⇒ lenUL_i32(A_v25821, xs_v25822)

fun lenLL_i30(A_v25823, xs_v25824) =
  match xs_v25824 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v25825 xs_v25826 ⇒
    match lenLL_i30(NULL, xs_v25826) with
    | (n_v25827, xs_v25828) ⇒ (n_v25827.+1, (consLL_c7 x_v25825 xs_v25828))
    end
  end

val lenLLclo_i64 = fn A_v25829 xs_v25830 ⇒ lenLL_i30(A_v25829, xs_v25830)

fun appendUU_i37(A_v25831, xs_v25832, ys_v25833) =
  match xs_v25832 with
  | nilUU_c12  ⇒ ys_v25833
  | consUU_c13 x_v25834 xs_v25835 ⇒
    (consUU_c13 x_v25834 appendUU_i37(NULL, xs_v25835, ys_v25833))
  end

val appendUUclo_i65 =
  fn A_v25836 xs_v25837 ⇒
    ln ys_v25838 ⇒ appendUU_i37(A_v25836, xs_v25837, ys_v25838)

fun appendUL_i36(A_v25839, xs_v25840, ys_v25841) =
  match xs_v25840 with
  | nilUL_c10  ⇒ ys_v25841
  | consUL_c11 x_v25842 xs_v25843 ⇒
    (consUL_c11 x_v25842 appendUL_i36(NULL, xs_v25843, ys_v25841))
  end

val appendULclo_i66 =
  fn A_v25844 xs_v25845 ⇒
    ln ys_v25846 ⇒ appendUL_i36(A_v25844, xs_v25845, ys_v25846)

fun appendLL_i34(A_v25847, xs_v25848, ys_v25849) =
  match xs_v25848 with
  | nilLL_c6  ⇒ ys_v25849
  | consLL_c7 x_v25850 xs_v25851 ⇒
    (consLL_c7 x_v25850 appendLL_i34(NULL, xs_v25851, ys_v25849))
  end

val appendLLclo_i67 =
  fn A_v25852 xs_v25853 ⇒
    ln ys_v25854 ⇒ appendLL_i34(A_v25852, xs_v25853, ys_v25854)

fun readline_i25(__v25855) =
  ln __v25856 ⇒
    let ch_v25857 = (ln __v25858 ⇒ open stdin) NULL in
    let ch_v25859 =
      ((fn x_v25860 ⇒ ln __v25861 ⇒ send(ch_v25857, x_v25860)) 1) NULL
    in
    let __v25862 = (ln __v25863 ⇒ recv(ch_v25859)) NULL in
    (match __v25862 with
     | (s_v25864, ch_v25865) ⇒
       ln __v25866 ⇒
         let ch_v25867 =
           ((fn x_v25868 ⇒ ln __v25869 ⇒ send(ch_v25865, x_v25868)) 0)
             NULL
         in
         let __v25870 =
           (ln __v25871 ⇒ let __v25872 = ch_v25867 in NULL) NULL
         in (ln __v25873 ⇒ s_v25864) NULL
     end) NULL

val readlineclo_i68 = fn __v25874 ⇒ readline_i25(__v25874)

fun print_i26(s_v25875) =
  ln __v25876 ⇒
    let ch_v25877 = (ln __v25878 ⇒ open stdout) NULL in
    let ch_v25879 =
      ((fn x_v25880 ⇒ ln __v25881 ⇒ send(ch_v25877, x_v25880)) 1) NULL
    in
    let ch_v25882 =
      ((fn x_v25883 ⇒ ln __v25884 ⇒ send(ch_v25879, x_v25883)) s_v25875)
        NULL
    in
    let ch_v25885 =
      ((fn x_v25886 ⇒ ln __v25887 ⇒ send(ch_v25882, x_v25886)) 0) NULL
    in (ln __v25888 ⇒ let __v25889 = ch_v25885 in NULL) NULL

val printclo_i69 = fn s_v25890 ⇒ print_i26(s_v25890)

fun prerr_i27(s_v25891) =
  ln __v25892 ⇒
    let ch_v25893 = (ln __v25894 ⇒ open stderr) NULL in
    let ch_v25895 =
      ((fn x_v25896 ⇒ ln __v25897 ⇒ send(ch_v25893, x_v25896)) 1) NULL
    in
    let ch_v25898 =
      ((fn x_v25899 ⇒ ln __v25900 ⇒ send(ch_v25895, x_v25899)) s_v25891)
        NULL
    in
    let ch_v25901 =
      ((fn x_v25902 ⇒ ln __v25903 ⇒ send(ch_v25898, x_v25902)) 0) NULL
    in (ln __v25904 ⇒ let __v25905 = ch_v25901 in NULL) NULL

val prerrclo_i70 = fn s_v25906 ⇒ prerr_i27(s_v25906)

trans23 success--------------------------

fun andb_i1(b1_v26126, b2_v26127) = if b1_v26126 then
                                      b2_v26127
                                    else
                                      0

val andbclo_i46 = fn b1_v26128 b2_v26129 ⇒ andb_i1(b1_v26128, b2_v26129)

fun orb_i2(b1_v26130, b2_v26131) = if b1_v26130 then
                                     1
                                   else
                                     b2_v26131

val orbclo_i47 = fn b1_v26132 b2_v26133 ⇒ orb_i2(b1_v26132, b2_v26133)

fun notb_i3(b_v26134) = if b_v26134 then
                          0
                        else
                          1

val notbclo_i48 = fn b_v26135 ⇒ notb_i3(b_v26135)

fun lten_i4(x_v26136, y_v26137) =
  if x_v26136 then
    if y_v26137 then
      lten_i4(x_v26136.-1, y_v26137.-1)
    else
      0
  else
    1

val ltenclo_i49 = fn x_v26138 y_v26139 ⇒ lten_i4(x_v26138, y_v26139)

fun gten_i5(x_v26140, y_v26141) =
  if x_v26140 then
    if y_v26141 then
      gten_i5(x_v26140.-1, y_v26141.-1)
    else
      1
  else
    if y_v26141 then
      0
    else
      1

val gtenclo_i50 = fn x_v26142 y_v26143 ⇒ gten_i5(x_v26142, y_v26143)

fun ltn_i6(x_v26144, y_v26145) =
  if x_v26144 then
    if y_v26145 then
      ltn_i6(x_v26144.-1, y_v26145.-1)
    else
      0
  else
    if y_v26145 then
      1
    else
      0

val ltnclo_i51 = fn x_v26146 y_v26147 ⇒ ltn_i6(x_v26146, y_v26147)

fun gtn_i7(x_v26148, y_v26149) =
  if x_v26148 then
    if y_v26149 then
      gtn_i7(x_v26148.-1, y_v26149.-1)
    else
      1
  else
    0

val gtnclo_i52 = fn x_v26150 y_v26151 ⇒ gtn_i7(x_v26150, y_v26151)

fun eqn_i8(x_v26152, y_v26153) =
  if x_v26152 then
    if y_v26153 then
      eqn_i8(x_v26152.-1, y_v26153.-1)
    else
      0
  else
    if y_v26153 then
      0
    else
      1

val eqnclo_i53 = fn x_v26154 y_v26155 ⇒ eqn_i8(x_v26154, y_v26155)

fun pred_i9(x_v26156) = if x_v26156 then
                          x_v26156.-1
                        else
                          0

val predclo_i54 = fn x_v26157 ⇒ pred_i9(x_v26157)

fun addn_i10(x_v26158, y_v26159) =
  if x_v26158 then
    addn_i10(x_v26158.-1, y_v26159).+1
  else
    y_v26159

val addnclo_i55 = fn x_v26160 y_v26161 ⇒ addn_i10(x_v26160, y_v26161)

fun subn_i11(x_v26162, y_v26163) =
  if y_v26163 then
    subn_i11(pred_i9(x_v26162), y_v26163.-1)
  else
    x_v26162

val subnclo_i56 = fn x_v26164 y_v26165 ⇒ subn_i11(x_v26164, y_v26165)

fun muln_i12(x_v26166, y_v26167) =
  if x_v26166 then
    addn_i10(y_v26167, muln_i12(x_v26166.-1, y_v26167))
  else
    0

val mulnclo_i57 = fn x_v26168 y_v26169 ⇒ muln_i12(x_v26168, y_v26169)

fun divn_i13(x_v26170, y_v26171) =
  if ltn_i6(x_v26170, y_v26171) then
    0
  else
    divn_i13(subn_i11(x_v26170, y_v26171), y_v26171).+1

val divnclo_i58 = fn x_v26172 y_v26173 ⇒ divn_i13(x_v26172, y_v26173)

fun modn_i14(x_v26174, y_v26175) =
  subn_i11(x_v26174, muln_i12(divn_i13(x_v26174, y_v26175), y_v26175))

val modnclo_i59 = fn x_v26176 y_v26177 ⇒ modn_i14(x_v26176, y_v26177)

fun cats_i15(s1_v26178, s2_v26179) =
  match s1_v26178 with
  | EmptyString_c2  ⇒ s2_v26179
  | String_c3 c_v26180 s1_v26181 ⇒
    (String_c3 c_v26180 cats_i15(s1_v26181, s2_v26179))
  end

val catsclo_i60 = fn s1_v26182 s2_v26183 ⇒ cats_i15(s1_v26182, s2_v26183)

fun strlen_i16(s_v26184) =
  match s_v26184 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v26185 s_v26186 ⇒ strlen_i16(s_v26186).+1
  end

val strlenclo_i61 = fn s_v26187 ⇒ strlen_i16(s_v26187)

fun lenUU_i33(A_v26188, xs_v26189) =
  match xs_v26189 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v26190 xs_v26191 ⇒
    match lenUU_i33(NULL, xs_v26191) with
    | (n_v26192, xs_v26193) ⇒
      (n_v26192.+1, (consUU_c13 x_v26190 xs_v26193))
    end
  end

val lenUUclo_i62 = fn A_v26194 xs_v26195 ⇒ lenUU_i33(A_v26194, xs_v26195)

fun lenUL_i32(A_v26196, xs_v26197) =
  match xs_v26197 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v26198 xs_v26199 ⇒
    match lenUL_i32(NULL, xs_v26199) with
    | (n_v26200, xs_v26201) ⇒
      (n_v26200.+1, (consUL_c11 x_v26198 xs_v26201))
    end
  end

val lenULclo_i63 = fn A_v26202 xs_v26203 ⇒ lenUL_i32(A_v26202, xs_v26203)

fun lenLL_i30(A_v26204, xs_v26205) =
  match xs_v26205 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v26206 xs_v26207 ⇒
    match lenLL_i30(NULL, xs_v26207) with
    | (n_v26208, xs_v26209) ⇒ (n_v26208.+1, (consLL_c7 x_v26206 xs_v26209))
    end
  end

val lenLLclo_i64 = fn A_v26210 xs_v26211 ⇒ lenLL_i30(A_v26210, xs_v26211)

fun appendUU_i37(A_v26212, xs_v26213, ys_v26214) =
  match xs_v26213 with
  | nilUU_c12  ⇒ ys_v26214
  | consUU_c13 x_v26215 xs_v26216 ⇒
    (consUU_c13 x_v26215 appendUU_i37(NULL, xs_v26216, ys_v26214))
  end

val appendUUclo_i65 =
  fn A_v26217 xs_v26218 ⇒
    ln ys_v26219 ⇒ appendUU_i37(A_v26217, xs_v26218, ys_v26219)

fun appendUL_i36(A_v26220, xs_v26221, ys_v26222) =
  match xs_v26221 with
  | nilUL_c10  ⇒ ys_v26222
  | consUL_c11 x_v26223 xs_v26224 ⇒
    (consUL_c11 x_v26223 appendUL_i36(NULL, xs_v26224, ys_v26222))
  end

val appendULclo_i66 =
  fn A_v26225 xs_v26226 ⇒
    ln ys_v26227 ⇒ appendUL_i36(A_v26225, xs_v26226, ys_v26227)

fun appendLL_i34(A_v26228, xs_v26229, ys_v26230) =
  match xs_v26229 with
  | nilLL_c6  ⇒ ys_v26230
  | consLL_c7 x_v26231 xs_v26232 ⇒
    (consLL_c7 x_v26231 appendLL_i34(NULL, xs_v26232, ys_v26230))
  end

val appendLLclo_i67 =
  fn A_v26233 xs_v26234 ⇒
    ln ys_v26235 ⇒ appendLL_i34(A_v26233, xs_v26234, ys_v26235)

fun readline_i25(__v26236) =
  ln __v26237 ⇒
    let ch_v26238 = open stdin in
    let ch_v26239 = send(ch_v26238, 1) in
    let __v26240 = recv(ch_v26239) in
    match __v26240 with
    | (s_v26241, ch_v26242) ⇒
      let ch_v26243 = send(ch_v26242, 0) in s_v26241
    end

val readlineclo_i68 = fn __v26244 ⇒ readline_i25(__v26244)

fun print_i26(s_v26245) =
  ln __v26246 ⇒
    let ch_v26247 = open stdout in
    let ch_v26248 = send(ch_v26247, 1) in
    let ch_v26249 = send(ch_v26248, s_v26245) in
    let ch_v26250 = send(ch_v26249, 0) in NULL

val printclo_i69 = fn s_v26251 ⇒ print_i26(s_v26251)

fun prerr_i27(s_v26252) =
  ln __v26253 ⇒
    let ch_v26254 = open stderr in
    let ch_v26255 = send(ch_v26254, 1) in
    let ch_v26256 = send(ch_v26255, s_v26252) in
    let ch_v26257 = send(ch_v26256, 0) in NULL

val prerrclo_i70 = fn s_v26258 ⇒ prerr_i27(s_v26258)

trans3e success--------------------------

trans34 success--------------------------

