program digits‹› : ((list‹_, U›) (_)) = ((cons)
(((String) (((Char) (O.+48))) (EmptyString)))
(((cons) (((String) (((Char) (O.+49))) (EmptyString)))
 (((cons) (((String) (((Char) (O.+50))) (EmptyString)))
  (((cons) (((String) (((Char) (O.+51))) (EmptyString)))
   (((cons) (((String) (((Char) (O.+52))) (EmptyString)))
    (((cons) (((String) (((Char) (O.+53))) (EmptyString)))
     (((cons) (((String) (((Char) (O.+54))) (EmptyString)))
      (((cons) (((String) (((Char) (O.+55))) (EmptyString)))
       (((cons) (((String) (((Char) (O.+56))) (EmptyString)))
        (((cons) (((String) (((Char) (O.+57))) (EmptyString))) (nil))))))))))))))))))))

program get_at‹› {A : U} (n : nat) (xs : ((list‹_, U›)
(A))) (a : A) : A = match n as _ in _ with O ⇒ match xs as _ in _ with nil  ⇒ a | cons x
_ ⇒ x | S n ⇒ match xs as _ in _ with nil  ⇒ a | cons _
xs ⇒ ((get_at) (_) (n) (xs)
(a))

program string_of_digit‹› (n : nat) : string = ((get_at) (_) (n) 
(digits)
(EmptyString))

program string_of_nat‹› (n : nat) : string = let s = ((string_of_digit)
(((modn) (n) (O.+10)))) in let n = ((divn) (n) (O.+10)) in match ((ltn)
(O.+0) (n)) as _ in _ with true ⇒ ((cats) (((string_of_nat) (n)))
(s)) | false ⇒ s

program gcd‹› (a : nat) (b : nat) : nat = match b as _ in _ with O ⇒ a | S _ ⇒ (
(gcd) (b)
(((modn) (a) (b))))

program lcm‹› (a : nat) (b : nat) : nat = ((divn) (((muln) (a) (b)))
(((gcd) (a) (b))))

program powm‹› (a : nat) (b : nat) (m : nat) : nat = match b as _ in _ with O ⇒ O.+1 | S b ⇒ (
(modn) (((muln) (a) (((powm) (a) (b) (m)))))
(m))

logical coprime‹› (a : nat) (b : nat) : U = ((gcd) (a)
(b)) ≡ O.+1

logical RSA‹› : proto = !{x : nat} → !{y : nat} → !(n : nat) → !{_ : n ≡ (
(muln) (x) (y))} → !{tot : nat} → !{_ : tot ≡ ((lcm)
(((subn) (x) (O.+1)))
(((subn) (y) (O.+1))))} → !(e : nat) → !{_ : ((coprime) (e)
(tot))} → !{_ : ((ltn) (O.+1) (e)) ≡ true} → !{_ : ((ltn) (e)
(tot)) ≡ true} → ?{P0 : nat} → ?(C : nat) → ?{_ : C ≡ ((powm) 
(P0) (e)
(n))} → end

logical RSA_ch‹› : L = ch‹RSA›

logical RSA_hc‹› : L = hc‹RSA›

program server‹› (ch : RSA_ch) : IO unit = let x = O.+61 in let y = O.+53 in let n = (
(muln) (x) (y)) in let tot = ((lcm) (((subn) (x) (O.+1)))
(((subn) (y) (O.+1)))) in let e = O.+17 in let d = O.+413 in let ch ⇐ (
(send ch) (x)) in let ch ⇐ ((send ch) (y)) in let ch ⇐ ((send ch)
(n)) in let ch ⇐ ((send ch) (refl)) in let ch ⇐ ((send ch)
(tot)) in let ch ⇐ ((send ch) (refl)) in let ch ⇐ ((send ch)
(e)) in let ch ⇐ ((send ch) (refl)) in let ch ⇐ ((send ch)
(refl)) in let ch ⇐ ((send ch)
(refl)) in let ⟨{P0}, ch⟩ ⇐ recv ch in let ⟨C, ch⟩ ⇐ recv ch in let ⟨{pf}, ch⟩ ⇐ recv ch in let P1 = (
(powm) (C) (d) (n)) in let _ ⇐ close ch in ((print)
(((cats) (((string_of_nat) (P1)))
 (((String) (((Char) (O.+10))) (EmptyString))))))

program client‹› (ch : RSA_hc) : IO unit = let P0 = O.+123 in let ⟨{x}, ch⟩ ⇐ recv ch in let ⟨{y}, ch⟩ ⇐ recv ch in let ⟨n, ch⟩ ⇐ recv ch in let ⟨{pf1}, ch⟩ ⇐ recv ch in let ⟨{tot}, ch⟩ ⇐ recv ch in let ⟨{pf2}, ch⟩ ⇐ recv ch in let ⟨e, ch⟩ ⇐ recv ch in let ⟨{pf3}, ch⟩ ⇐ recv ch in let ⟨{pf4}, ch⟩ ⇐ recv ch in let ⟨{pf5}, ch⟩ ⇐ recv ch in let ch ⇐ (
(send ch) (P0)) in let ch ⇐ ((send ch)
(((powm) (P0) (e) (n)))) in let ch ⇐ ((send ch)
(refl)) in close ch

program main‹› : IO unit = let c ⇐ fork (c : RSA_ch) in ((server)
(c)) in let c0 ⇐ fork (c0 : ch‹?(_ : RSA_hc) → end›) in let ⟨c, c0⟩ ⇐ recv c0 in let _ ⇐ close c0 in (
(client) (c)) in let c0 ⇐ ((send c0)
(c)) in let _ ⇐ close c0 in sleep O.+1

parsing success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v256 : bool) (b2_v257 : bool) ⇒
    match b1_v256 as __v258 in ??1 with
    | true ⇒ b2_v257 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v261 : bool) (b2_v262 : bool) ⇒
    match b1_v261 as __v263 in ??2 with
    | true ⇒ true | false ⇒ b2_v262
    end

program notb_i3 : bool → bool =
  fn (b_v265 : bool) ⇒
    match b_v265 as __v266 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v269 : nat) (y_v270 : nat) ⇒
    match x_v269 as __v271 in ??4 with
    | O ⇒ true
    | S x_v272 ⇒
      match y_v270 as __v273 in ??5 with
      | O ⇒ false | S y_v274 ⇒ (lten_i4 x_v272 y_v274)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v277 : nat) (y_v278 : nat) ⇒
    match x_v277 as __v279 in ??6 with
    | O ⇒
      match y_v278 as __v280 in ??8 with
      | O ⇒ true | S __v281 ⇒ false
      end
    | S x_v282 ⇒
      match y_v278 as __v283 in ??7 with
      | O ⇒ true | S y_v284 ⇒ (gten_i5 x_v282 y_v284)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v287 : nat) (y_v288 : nat) ⇒
    match x_v287 as __v289 in ??9 with
    | O ⇒
      match y_v288 as __v290 in ??11 with
      | O ⇒ false | S y_v291 ⇒ true
      end
    | S x_v292 ⇒
      match y_v288 as __v293 in ??10 with
      | O ⇒ false | S y_v294 ⇒ (ltn_i6 x_v292 y_v294)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v297 : nat) (y_v298 : nat) ⇒
    match x_v297 as __v299 in ??12 with
    | O ⇒ false
    | S x_v300 ⇒
      match y_v298 as __v301 in ??13 with
      | O ⇒ true | S y_v302 ⇒ (gtn_i7 x_v300 y_v302)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v305 : nat) (y_v306 : nat) ⇒
    match x_v305 as __v307 in ??14 with
    | O ⇒
      match y_v306 as __v308 in ??16 with
      | O ⇒ true | S __v309 ⇒ false
      end
    | S x_v310 ⇒
      match y_v306 as __v311 in ??15 with
      | O ⇒ false | S y_v312 ⇒ (eqn_i8 x_v310 y_v312)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v314 : nat) ⇒
    match x_v314 as __v315 in ??17 with
    | O ⇒ 0 | S x_v316 ⇒ x_v316
    end

program addn_i10 : nat → nat → nat =
  fn (x_v319 : nat) (y_v320 : nat) ⇒
    match x_v319 as __v321 in ??18 with
    | O ⇒ y_v320 | S x_v322 ⇒ (addn_i10 x_v322 y_v320).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v325 : nat) (y_v326 : nat) ⇒
    match y_v326 as __v327 in ??19 with
    | O ⇒ x_v325 | S y_v328 ⇒ (subn_i11 (pred_i9 x_v325) y_v328)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v331 : nat) (y_v332 : nat) ⇒
    match x_v331 as __v333 in ??20 with
    | O ⇒ 0 | S x_v334 ⇒ (addn_i10 y_v332 (muln_i12 x_v334 y_v332))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v337 : nat) (y_v338 : nat) ⇒
    match (ltn_i6 x_v337 y_v338) as __v339 in ??21 with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v337 y_v338) y_v338).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v342 : nat) (y_v343 : nat) ⇒
    (subn_i11 x_v342 (muln_i12 (divn_i13 x_v342 y_v343) y_v343))

inductive char_d1 : U =
| Char_c1 of (n_v344 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v345 : char_d1) (s_v346 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v349 : string_d2) (s2_v350 : string_d2) ⇒
    match s1_v349 as __v351 in ??22 with
    | EmptyString_c2  ⇒ s2_v350
    | String_c3 c_v352 s1_v353 ⇒
      (String_c3‹› c_v352 (cats_i15 s1_v353 s2_v350))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v355 : string_d2) ⇒
    match s_v355 as __v356 in ??23 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v357 s_v358 ⇒ (strlen_i16 s_v358).+1
    end

inductive list_d3 ‹s_s359, t_s360›
  (A_v361 : Type‹s_s359›) : Type‹t_s360›
=
| nil_c4 of
    ‹s_s362, t_s363› (A_v364 : Type‹s_s362›)
    : (list_d3‹s_s362, t_s363› A_v364)
| cons_c5 of
    ‹s_s365, t_s366› (A_v367 : Type‹s_s365›) (hd_v368 : A_v367)
    (tl_v369 : (list_d3‹s_s365, t_s366› A_v367))
    : (list_d3‹s_s365, t_s366› A_v367)

program len_i17 ‹s_s370, t_s371› :
  ∀ {A_v372 : Type‹s_s370›} →
    (list_d3‹??24, t_s371› A_v372) →
      nat ⊗ (list_d3‹??25, t_s371› A_v372)
=
  fn {A_v375 : Type‹s_s370›}
     (xs_v376 : (list_d3‹??24, t_s371› A_v375)) ⇒
    match xs_v376 as __v377 in ??26 with
    | nil_c4  ⇒ ⟨0, nil_c4‹??36, ??35›⟩
    | cons_c5 x_v378 xs_v379 ⇒
      match (len_i17‹??29, ??28› ??27 xs_v379) as __v380 in ??30 with
      | ⟨n_v381, xs_v382⟩ ⇒
        ⟨n_v381.+1, (cons_c5‹??33, ??32› x_v378 xs_v382)⟩
      end
    end

program append_i18 ‹s_s383, t_s384› :
  ∀ {A_v385 : Type‹s_s383›} →
    (list_d3‹??37, t_s384› A_v385) →
      (list_d3‹??38, t_s384› A_v385) ⊸ (list_d3‹??40, ??39› A_v385)
=
  fn {A_v388 : Type‹s_s383›}
     (xs_v389 : (list_d3‹??37, t_s384› A_v388)) ⇒
    ln (ys_v390 : ??41) ⇒
      match xs_v389 as __v391 in ??42 with
      | nil_c4  ⇒ ys_v390
      | cons_c5 x_v392 xs_v393 ⇒
        (cons_c5‹??48, ??47›
          x_v392 (append_i18‹??45, ??44› ??43 xs_v393 ys_v390))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v395 : unit) ⇒
    ⇑(b_v396 : bool) ⇒
      match b_v396 as __v397 in ??49 with
      | true ⇒ ⇓(__v398 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v400 : unit) ⇒
    ⇑(b_v401 : bool) ⇒
      match b_v401 as __v402 in ??50 with
      | true ⇒ ⇑(__v403 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v405 : unit) ⇒
    ⇑(b_v406 : bool) ⇒
      match b_v406 as __v407 in ??51 with
      | true ⇒ ⇑(__v408 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v410 : unit) ⇒
    let ch_v411 ⇐ open stdin in
    let ch_v412 ⇐ (send ch_v411 true) in
    let __v413 ⇐ recv ch_v412 in
    match __v413 as __v414 in ??52 with
    | ⟨s_v415, ch_v416⟩ ⇒
      let ch_v417 ⇐ (send ch_v416 false) in
      let __v418 ⇐ close ch_v417 in return s_v415
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v420 : string_d2) ⇒
    let ch_v421 ⇐ open stdout in
    let ch_v422 ⇐ (send ch_v421 true) in
    let ch_v423 ⇐ (send ch_v422 s_v420) in
    let ch_v424 ⇐ (send ch_v423 false) in close ch_v424

program prerr_i27 : string_d2 → IO unit =
  fn (s_v426 : string_d2) ⇒
    let ch_v427 ⇐ open stderr in
    let ch_v428 ⇐ (send ch_v427 true) in
    let ch_v429 ⇐ (send ch_v428 s_v426) in
    let ch_v430 ⇐ (send ch_v429 false) in close ch_v430

program digits_i28 : (list_d3‹??53, U› ??54) =
  (cons_c5‹??87, ??86›
    "0"
    (cons_c5‹??84, ??83›
      "1"
      (cons_c5‹??81, ??80›
        "2"
        (cons_c5‹??78, ??77›
          "3"
          (cons_c5‹??75, ??74›
            "4"
            (cons_c5‹??72, ??71›
              "5"
              (cons_c5‹??69, ??68›
                "6"
                (cons_c5‹??66, ??65›
                  "7"
                  (cons_c5‹??63, ??62›
                    "8" (cons_c5‹??60, ??59› "9" nil_c4‹??57, ??56›))))))))))

program get_at_i29 :
  ∀ {A_v431 : U} →
    nat → (list_d3‹??88, U› A_v431) → A_v431 → A_v431
=
  fn {A_v435 : U} (n_v436 : nat) (xs_v437 : (list_d3‹??88, U› A_v435))
     (a_v438 : A_v435) ⇒
    match n_v436 as __v439 in ??89 with
    | O ⇒
      match xs_v437 as __v440 in ??92 with
      | nil_c4  ⇒ a_v438 | cons_c5 x_v441 __v442 ⇒ x_v441
      end
    | S n_v443 ⇒
      match xs_v437 as __v444 in ??90 with
      | nil_c4  ⇒ a_v438
      | cons_c5 __v445 xs_v446 ⇒ (get_at_i29 ??91 n_v443 xs_v446 a_v438)
      end
    end

program string_of_digit_i30 : nat → string_d2 =
  fn (n_v448 : nat) ⇒
    (get_at_i29 ??93 n_v448 digits_i28 EmptyString_c2‹›)

program string_of_nat_i31 : nat → string_d2 =
  fn (n_v450 : nat) ⇒
    let s_v451 = (string_of_digit_i30 (modn_i14 n_v450 10)) in
    let n_v452 = (divn_i13 n_v450 10) in
    match (ltn_i6 0 n_v452) as __v453 in ??94 with
    | true ⇒ (cats_i15 (string_of_nat_i31 n_v452) s_v451)
    | false ⇒ s_v451
    end

program gcd_i32 : nat → nat → nat =
  fn (a_v456 : nat) (b_v457 : nat) ⇒
    match b_v457 as __v458 in ??95 with
    | O ⇒ a_v456 | S __v459 ⇒ (gcd_i32 b_v457 (modn_i14 a_v456 b_v457))
    end

program lcm_i33 : nat → nat → nat =
  fn (a_v462 : nat) (b_v463 : nat) ⇒
    (divn_i13 (muln_i12 a_v462 b_v463) (gcd_i32 a_v462 b_v463))

program powm_i34 : nat → nat → nat → nat =
  fn (a_v467 : nat) (b_v468 : nat) (m_v469 : nat) ⇒
    match b_v468 as __v470 in ??96 with
    | O ⇒ 1
    | S b_v471 ⇒
      (modn_i14 (muln_i12 a_v467 (powm_i34 a_v467 b_v471 m_v469)) m_v469)
    end

logical coprime_i35 : nat → nat → U =
  fn (a_v474 : nat) (b_v475 : nat) ⇒ (gcd_i32 a_v474 b_v475) ≡ 1

logical RSA_i36 : proto =
  ⇑{x_v476 : nat} ⇒
    ⇑{y_v477 : nat} ⇒
      ⇑(n_v478 : nat) ⇒
        ⇑{__v479 : n_v478 ≡ (muln_i12 x_v476 y_v477)} ⇒
          ⇑{tot_v480 : nat} ⇒
            ⇑{__v481 :
              tot_v480 ≡ (lcm_i33 (subn_i11 x_v476 1) (subn_i11 y_v477 1))} ⇒
              ⇑(e_v482 : nat) ⇒
                ⇑{__v483 : (coprime_i35 e_v482 tot_v480)} ⇒
                  ⇑{__v484 : (ltn_i6 1 e_v482) ≡ true} ⇒
                    ⇑{__v485 : (ltn_i6 e_v482 tot_v480) ≡ true} ⇒
                      ⇓{P0_v486 : nat} ⇒
                        ⇓(C_v487 : nat) ⇒
                          ⇓{__v488 :
                            C_v487 ≡ (powm_i34 P0_v486 e_v482 n_v478)} ⇒
                            end

logical RSA_ch_i37 : L = ch⟨RSA_i36⟩

logical RSA_hc_i38 : L = hc⟨RSA_i36⟩

program server_i39 : RSA_ch_i37 → IO unit =
  fn (ch_v490 : RSA_ch_i37) ⇒
    let x_v491 = 61 in
    let y_v492 = 53 in
    let n_v493 = (muln_i12 x_v491 y_v492) in
    let tot_v494 = (lcm_i33 (subn_i11 x_v491 1) (subn_i11 y_v492 1)) in
    let e_v495 = 17 in
    let d_v496 = 413 in
    let ch_v497 ⇐ (send ch_v490 x_v491) in
    let ch_v498 ⇐ (send ch_v497 y_v492) in
    let ch_v499 ⇐ (send ch_v498 n_v493) in
    let ch_v500 ⇐ (send ch_v499 refl ??103) in
    let ch_v501 ⇐ (send ch_v500 tot_v494) in
    let ch_v502 ⇐ (send ch_v501 refl ??104) in
    let ch_v503 ⇐ (send ch_v502 e_v495) in
    let ch_v504 ⇐ (send ch_v503 refl ??105) in
    let ch_v505 ⇐ (send ch_v504 refl ??106) in
    let ch_v506 ⇐ (send ch_v505 refl ??107) in
    let __v507 ⇐ recv ch_v506 in
    match __v507 as __v508 in ??110 with
    | ⟨{P0_v509}, ch_v510⟩ ⇒
      let __v511 ⇐ recv ch_v510 in
      match __v511 as __v512 in ??109 with
      | ⟨C_v513, ch_v514⟩ ⇒
        let __v515 ⇐ recv ch_v514 in
        match __v515 as __v516 in ??108 with
        | ⟨{pf_v517}, ch_v518⟩ ⇒
          let P1_v519 = (powm_i34 C_v513 d_v496 n_v493) in
          let __v520 ⇐ close ch_v518 in
          (print_i26 (cats_i15 (string_of_nat_i31 P1_v519) "\n"))
        end
      end
    end

program client_i40 : RSA_hc_i38 → IO unit =
  fn (ch_v522 : RSA_hc_i38) ⇒
    let P0_v523 = 123 in
    let __v524 ⇐ recv ch_v522 in
    match __v524 as __v525 in ??121 with
    | ⟨{x_v526}, ch_v527⟩ ⇒
      let __v528 ⇐ recv ch_v527 in
      match __v528 as __v529 in ??120 with
      | ⟨{y_v530}, ch_v531⟩ ⇒
        let __v532 ⇐ recv ch_v531 in
        match __v532 as __v533 in ??119 with
        | ⟨n_v534, ch_v535⟩ ⇒
          let __v536 ⇐ recv ch_v535 in
          match __v536 as __v537 in ??118 with
          | ⟨{pf1_v538}, ch_v539⟩ ⇒
            let __v540 ⇐ recv ch_v539 in
            match __v540 as __v541 in ??117 with
            | ⟨{tot_v542}, ch_v543⟩ ⇒
              let __v544 ⇐ recv ch_v543 in
              match __v544 as __v545 in ??116 with
              | ⟨{pf2_v546}, ch_v547⟩ ⇒
                let __v548 ⇐ recv ch_v547 in
                match __v548 as __v549 in ??115 with
                | ⟨e_v550, ch_v551⟩ ⇒
                  let __v552 ⇐ recv ch_v551 in
                  match __v552 as __v553 in ??114 with
                  | ⟨{pf3_v554}, ch_v555⟩ ⇒
                    let __v556 ⇐ recv ch_v555 in
                    match __v556 as __v557 in ??113 with
                    | ⟨{pf4_v558}, ch_v559⟩ ⇒
                      let __v560 ⇐ recv ch_v559 in
                      match __v560 as __v561 in ??112 with
                      | ⟨{pf5_v562}, ch_v563⟩ ⇒
                        let ch_v564 ⇐ (send ch_v563 P0_v523) in
                        let ch_v565 ⇐
                          (send ch_v564 (powm_i34 P0_v523 e_v550 n_v534))
                        in
                        let ch_v566 ⇐ (send ch_v565 refl ??111) in
                        close ch_v566
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program main_i41 : IO unit =
  let c_v567 ⇐ fork (c_v568 : RSA_ch_i37) in (server_i39 c_v568) in
  let c0_v569 ⇐
    fork (c0_v570 : ch⟨⇓(__v571 : RSA_hc_i38) ⇒ end⟩) in
      let __v572 ⇐ recv c0_v570 in
      match __v572 as __v573 in ??122 with
      | ⟨c_v574, c0_v575⟩ ⇒
        let __v576 ⇐ close c0_v575 in (client_i40 c_v574)
      end
  in
  let c0_v577 ⇐ (send c0_v569 c_v567) in
  let __v578 ⇐ close c0_v577 in sleep 1

trans01 success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v21706 : bool) (b2_v21707 : bool) ⇒
    match b1_v21706 as __v21708 in bool with
    | true ⇒ b2_v21707 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v21711 : bool) (b2_v21712 : bool) ⇒
    match b1_v21711 as __v21713 in bool with
    | true ⇒ true | false ⇒ b2_v21712
    end

program notb_i3 : bool → bool =
  fn (b_v21715 : bool) ⇒
    match b_v21715 as __v21716 in bool with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v21719 : nat) (y_v21720 : nat) ⇒
    match x_v21719 as __v21721 in bool with
    | O ⇒ true
    | S x_v21722 ⇒
      match y_v21720 as __v21723 in bool with
      | O ⇒ false | S y_v21724 ⇒ (lten_i4 x_v21722 y_v21724)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v21727 : nat) (y_v21728 : nat) ⇒
    match x_v21727 as __v21729 in bool with
    | O ⇒
      match y_v21728 as __v21730 in bool with
      | O ⇒ true | S __v21731 ⇒ false
      end
    | S x_v21732 ⇒
      match y_v21728 as __v21733 in bool with
      | O ⇒ true | S y_v21734 ⇒ (gten_i5 x_v21732 y_v21734)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v21737 : nat) (y_v21738 : nat) ⇒
    match x_v21737 as __v21739 in bool with
    | O ⇒
      match y_v21738 as __v21740 in bool with
      | O ⇒ false | S y_v21741 ⇒ true
      end
    | S x_v21742 ⇒
      match y_v21738 as __v21743 in bool with
      | O ⇒ false | S y_v21744 ⇒ (ltn_i6 x_v21742 y_v21744)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v21747 : nat) (y_v21748 : nat) ⇒
    match x_v21747 as __v21749 in bool with
    | O ⇒ false
    | S x_v21750 ⇒
      match y_v21748 as __v21751 in bool with
      | O ⇒ true | S y_v21752 ⇒ (gtn_i7 x_v21750 y_v21752)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v21755 : nat) (y_v21756 : nat) ⇒
    match x_v21755 as __v21757 in bool with
    | O ⇒
      match y_v21756 as __v21758 in bool with
      | O ⇒ true | S __v21759 ⇒ false
      end
    | S x_v21760 ⇒
      match y_v21756 as __v21761 in bool with
      | O ⇒ false | S y_v21762 ⇒ (eqn_i8 x_v21760 y_v21762)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v21764 : nat) ⇒
    match x_v21764 as __v21765 in nat with
    | O ⇒ 0 | S x_v21766 ⇒ x_v21766
    end

program addn_i10 : nat → nat → nat =
  fn (x_v21769 : nat) (y_v21770 : nat) ⇒
    match x_v21769 as __v21771 in nat with
    | O ⇒ y_v21770 | S x_v21772 ⇒ (addn_i10 x_v21772 y_v21770).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v21775 : nat) (y_v21776 : nat) ⇒
    match y_v21776 as __v21777 in nat with
    | O ⇒ x_v21775 | S y_v21778 ⇒ (subn_i11 (pred_i9 x_v21775) y_v21778)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v21781 : nat) (y_v21782 : nat) ⇒
    match x_v21781 as __v21783 in nat with
    | O ⇒ 0
    | S x_v21784 ⇒ (addn_i10 y_v21782 (muln_i12 x_v21784 y_v21782))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v21787 : nat) (y_v21788 : nat) ⇒
    match (ltn_i6 x_v21787 y_v21788) as __v21789 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i13 (subn_i11 x_v21787 y_v21788) y_v21788).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v21792 : nat) (y_v21793 : nat) ⇒
    (subn_i11 x_v21792 (muln_i12 (divn_i13 x_v21792 y_v21793) y_v21793))

inductive char_d1 : U =
| Char_c1 of (n_v21794 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v21795 : char_d1) (s_v21796 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v21799 : string_d2) (s2_v21800 : string_d2) ⇒
    match s1_v21799 as __v21801 in string_d2 with
    | EmptyString_c2  ⇒ s2_v21800
    | String_c3 c_v21802 s1_v21803 ⇒
      (String_c3‹› c_v21802 (cats_i15 s1_v21803 s2_v21800))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v21805 : string_d2) ⇒
    match s_v21805 as __v21806 in nat with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v21807 s_v21808 ⇒ (strlen_i16 s_v21808).+1
    end

inductive list_d3 ‹s_s21809, t_s21810›
  (A_v21811 : Type‹s_s21809›) : Type‹t_s21810›
=
| nil_c4 of
    ‹s_s21812, t_s21813› (A_v21814 : Type‹s_s21812›)
    : (list_d3‹s_s21812, t_s21813› A_v21814)
| cons_c5 of
    ‹s_s21815, t_s21816› (A_v21817 : Type‹s_s21815›)
    (hd_v21818 : A_v21817)
    (tl_v21819 : (list_d3‹s_s21815, t_s21816› A_v21817))
    : (list_d3‹s_s21815, t_s21816› A_v21817)

program len_i17 ‹s_s21820, t_s21821› :
  ∀ {A_v21822 : Type‹s_s21820›} →
    (list_d3‹s_s21820, t_s21821› A_v21822) →
      nat ⊗ (list_d3‹s_s21820, t_s21821› A_v21822)
=
  fn {A_v21825 : Type‹s_s21820›}
     (xs_v21826 : (list_d3‹s_s21820, t_s21821› A_v21825)) ⇒
    match xs_v21826 as __v21827 in
      nat ⊗ (list_d3‹s_s21820, t_s21821› A_v21825) with
    | nil_c4  ⇒ ⟨0, nil_c4‹s_s21820, t_s21821›⟩
    | cons_c5 x_v21829 xs_v21830 ⇒
      match (len_i17‹s_s21820, t_s21821› A_v21825 xs_v21830) as __v21831 in
        nat ⊗ (list_d3‹s_s21820, t_s21821› A_v21825) with
      | ⟨n_v21833, xs_v21834⟩ ⇒
        ⟨n_v21833.+1, (cons_c5‹s_s21820, t_s21821› x_v21829 xs_v21834)⟩
      end
    end

program append_i18 ‹s_s21835, t_s21836› :
  ∀ {A_v21837 : Type‹s_s21835›} →
    (list_d3‹s_s21835, t_s21836› A_v21837) →
      (list_d3‹s_s21835, t_s21836› A_v21837) ⊸
        (list_d3‹s_s21835, t_s21836› A_v21837)
=
  fn {A_v21840 : Type‹s_s21835›}
     (xs_v21841 : (list_d3‹s_s21835, t_s21836› A_v21840)) ⇒
    ln (ys_v21842 : (list_d3‹s_s21835, t_s21836› A_v21840)) ⇒
      match xs_v21841 as __v21843 in
        (list_d3‹s_s21835, t_s21836› A_v21840) with
      | nil_c4  ⇒ ys_v21842
      | cons_c5 x_v21844 xs_v21845 ⇒
        (cons_c5‹s_s21835, t_s21836›
          x_v21844
          (append_i18‹s_s21835, t_s21836› A_v21840 xs_v21845 ys_v21842))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v21847 : unit) ⇒
    ⇑(b_v21848 : bool) ⇒
      match b_v21848 as __v21849 in proto with
      | true ⇒ ⇓(__v21850 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v21852 : unit) ⇒
    ⇑(b_v21853 : bool) ⇒
      match b_v21853 as __v21854 in proto with
      | true ⇒ ⇑(__v21855 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v21857 : unit) ⇒
    ⇑(b_v21858 : bool) ⇒
      match b_v21858 as __v21859 in proto with
      | true ⇒ ⇑(__v21860 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v21862 : unit) ⇒
    let ch_v21863 ⇐ open stdin in
    let ch_v21864 ⇐ (send ch_v21863 true) in
    let __v21865 ⇐ recv ch_v21864 in
    match __v21865 as __v21866 in IO string_d2 with
    | ⟨s_v21867, ch_v21868⟩ ⇒
      let ch_v21869 ⇐ (send ch_v21868 false) in
      let __v21870 ⇐ close ch_v21869 in return s_v21867
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v21872 : string_d2) ⇒
    let ch_v21873 ⇐ open stdout in
    let ch_v21874 ⇐ (send ch_v21873 true) in
    let ch_v21875 ⇐ (send ch_v21874 s_v21872) in
    let ch_v21876 ⇐ (send ch_v21875 false) in close ch_v21876

program prerr_i27 : string_d2 → IO unit =
  fn (s_v21878 : string_d2) ⇒
    let ch_v21879 ⇐ open stderr in
    let ch_v21880 ⇐ (send ch_v21879 true) in
    let ch_v21881 ⇐ (send ch_v21880 s_v21878) in
    let ch_v21882 ⇐ (send ch_v21881 false) in close ch_v21882

program digits_i28 : (list_d3‹U, U› string_d2) =
  (cons_c5‹U, U›
    "0"
    (cons_c5‹U, U›
      "1"
      (cons_c5‹U, U›
        "2"
        (cons_c5‹U, U›
          "3"
          (cons_c5‹U, U›
            "4"
            (cons_c5‹U, U›
              "5"
              (cons_c5‹U, U›
                "6"
                (cons_c5‹U, U›
                  "7"
                  (cons_c5‹U, U›
                    "8" (cons_c5‹U, U› "9" nil_c4‹U, U›))))))))))

program get_at_i29 :
  ∀ {A_v21883 : U} →
    nat → (list_d3‹U, U› A_v21883) → A_v21883 → A_v21883
=
  fn {A_v21887 : U} (n_v21888 : nat)
     (xs_v21889 : (list_d3‹U, U› A_v21887)) (a_v21890 : A_v21887) ⇒
    match n_v21888 as __v21891 in A_v21887 with
    | O ⇒
      match xs_v21889 as __v21892 in A_v21887 with
      | nil_c4  ⇒ a_v21890 | cons_c5 x_v21893 __v21894 ⇒ x_v21893
      end
    | S n_v21895 ⇒
      match xs_v21889 as __v21896 in A_v21887 with
      | nil_c4  ⇒ a_v21890
      | cons_c5 __v21897 xs_v21898 ⇒
        (get_at_i29 A_v21887 n_v21895 xs_v21898 a_v21890)
      end
    end

program string_of_digit_i30 : nat → string_d2 =
  fn (n_v21900 : nat) ⇒
    (get_at_i29 string_d2 n_v21900 digits_i28 EmptyString_c2‹›)

program string_of_nat_i31 : nat → string_d2 =
  fn (n_v21902 : nat) ⇒
    let s_v21903 = (string_of_digit_i30 (modn_i14 n_v21902 10)) in
    let n_v21904 = (divn_i13 n_v21902 10) in
    match (ltn_i6 0 n_v21904) as __v21905 in string_d2 with
    | true ⇒ (cats_i15 (string_of_nat_i31 n_v21904) s_v21903)
    | false ⇒ s_v21903
    end

program gcd_i32 : nat → nat → nat =
  fn (a_v21908 : nat) (b_v21909 : nat) ⇒
    match b_v21909 as __v21910 in nat with
    | O ⇒ a_v21908
    | S __v21911 ⇒ (gcd_i32 b_v21909 (modn_i14 a_v21908 b_v21909))
    end

program lcm_i33 : nat → nat → nat =
  fn (a_v21914 : nat) (b_v21915 : nat) ⇒
    (divn_i13 (muln_i12 a_v21914 b_v21915) (gcd_i32 a_v21914 b_v21915))

program powm_i34 : nat → nat → nat → nat =
  fn (a_v21919 : nat) (b_v21920 : nat) (m_v21921 : nat) ⇒
    match b_v21920 as __v21922 in nat with
    | O ⇒ 1
    | S b_v21923 ⇒
      (modn_i14
        (muln_i12 a_v21919 (powm_i34 a_v21919 b_v21923 m_v21921)) m_v21921)
    end

logical coprime_i35 : nat → nat → U =
  fn (a_v21926 : nat) (b_v21927 : nat) ⇒ (gcd_i32 a_v21926 b_v21927) ≡ 1

logical RSA_i36 : proto =
  ⇑{x_v21928 : nat} ⇒
    ⇑{y_v21929 : nat} ⇒
      ⇑(n_v21930 : nat) ⇒
        ⇑{__v21931 : n_v21930 ≡ (muln_i12 x_v21928 y_v21929)} ⇒
          ⇑{tot_v21932 : nat} ⇒
            ⇑{__v21933 :
              tot_v21932 ≡
                (lcm_i33 (subn_i11 x_v21928 1) (subn_i11 y_v21929 1))} ⇒
              ⇑(e_v21934 : nat) ⇒
                ⇑{__v21935 : (coprime_i35 e_v21934 tot_v21932)} ⇒
                  ⇑{__v21936 : (ltn_i6 1 e_v21934) ≡ true} ⇒
                    ⇑{__v21937 : (ltn_i6 e_v21934 tot_v21932) ≡ true} ⇒
                      ⇓{P0_v21938 : nat} ⇒
                        ⇓(C_v21939 : nat) ⇒
                          ⇓{__v21940 :
                            C_v21939 ≡
                              (powm_i34 P0_v21938 e_v21934 n_v21930)} ⇒
                            end

logical RSA_ch_i37 : L = ch⟨RSA_i36⟩

logical RSA_hc_i38 : L = hc⟨RSA_i36⟩

program server_i39 : RSA_ch_i37 → IO unit =
  fn (ch_v21942 : RSA_ch_i37) ⇒
    let x_v21943 = 61 in
    let y_v21944 = 53 in
    let n_v21945 = (muln_i12 x_v21943 y_v21944) in
    let tot_v21946 = (lcm_i33 (subn_i11 x_v21943 1) (subn_i11 y_v21944 1)) in
    let e_v21947 = 17 in
    let d_v21948 = 413 in
    let ch_v21949 ⇐ (send ch_v21942 x_v21943) in
    let ch_v21950 ⇐ (send ch_v21949 y_v21944) in
    let ch_v21951 ⇐ (send ch_v21950 n_v21945) in
    let ch_v21952 ⇐ (send ch_v21951 refl (muln_i12 61 53)) in
    let ch_v21953 ⇐ (send ch_v21952 tot_v21946) in
    let ch_v21954 ⇐
      (send ch_v21953 refl (lcm_i33 (subn_i11 61 1) (subn_i11 53 1)))
    in
    let ch_v21955 ⇐ (send ch_v21954 e_v21947) in
    let ch_v21956 ⇐ (send ch_v21955 refl (gcd_i32 17 780)) in
    let ch_v21957 ⇐ (send ch_v21956 refl (ltn_i6 1 17)) in
    let ch_v21958 ⇐
      (send ch_v21957
        refl (ltn_i6 17 (lcm_i33 (subn_i11 61 1) (subn_i11 53 1))))
    in
    let __v21959 ⇐ recv ch_v21958 in
    match __v21959 as __v21960 in IO unit with
    | ⟨{P0_v21961}, ch_v21962⟩ ⇒
      let __v21963 ⇐ recv ch_v21962 in
      match __v21963 as __v21964 in IO unit with
      | ⟨C_v21965, ch_v21966⟩ ⇒
        let __v21967 ⇐ recv ch_v21966 in
        match __v21967 as __v21968 in IO unit with
        | ⟨{pf_v21969}, ch_v21970⟩ ⇒
          let P1_v21971 = (powm_i34 C_v21965 d_v21948 n_v21945) in
          let __v21972 ⇐ close ch_v21970 in
          (print_i26 (cats_i15 (string_of_nat_i31 P1_v21971) "\n"))
        end
      end
    end

program client_i40 : RSA_hc_i38 → IO unit =
  fn (ch_v21974 : RSA_hc_i38) ⇒
    let P0_v21975 = 123 in
    let __v21976 ⇐ recv ch_v21974 in
    match __v21976 as __v21977 in IO unit with
    | ⟨{x_v21978}, ch_v21979⟩ ⇒
      let __v21980 ⇐ recv ch_v21979 in
      match __v21980 as __v21981 in IO unit with
      | ⟨{y_v21982}, ch_v21983⟩ ⇒
        let __v21984 ⇐ recv ch_v21983 in
        match __v21984 as __v21985 in IO unit with
        | ⟨n_v21986, ch_v21987⟩ ⇒
          let __v21988 ⇐ recv ch_v21987 in
          match __v21988 as __v21989 in IO unit with
          | ⟨{pf1_v21990}, ch_v21991⟩ ⇒
            let __v21992 ⇐ recv ch_v21991 in
            match __v21992 as __v21993 in IO unit with
            | ⟨{tot_v21994}, ch_v21995⟩ ⇒
              let __v21996 ⇐ recv ch_v21995 in
              match __v21996 as __v21997 in IO unit with
              | ⟨{pf2_v21998}, ch_v21999⟩ ⇒
                let __v22000 ⇐ recv ch_v21999 in
                match __v22000 as __v22001 in IO unit with
                | ⟨e_v22002, ch_v22003⟩ ⇒
                  let __v22004 ⇐ recv ch_v22003 in
                  match __v22004 as __v22005 in IO unit with
                  | ⟨{pf3_v22006}, ch_v22007⟩ ⇒
                    let __v22008 ⇐ recv ch_v22007 in
                    match __v22008 as __v22009 in IO unit with
                    | ⟨{pf4_v22010}, ch_v22011⟩ ⇒
                      let __v22012 ⇐ recv ch_v22011 in
                      match __v22012 as __v22013 in IO unit with
                      | ⟨{pf5_v22014}, ch_v22015⟩ ⇒
                        let ch_v22016 ⇐ (send ch_v22015 P0_v21975) in
                        let ch_v22017 ⇐
                          (send ch_v22016
                            (powm_i34 P0_v21975 e_v22002 n_v21986))
                        in
                        let ch_v22018 ⇐
                          (send ch_v22017
                            refl (powm_i34 123 e_v22002 n_v21986))
                        in close ch_v22018
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program main_i41 : IO unit =
  let c_v22019 ⇐ fork (c_v22020 : RSA_ch_i37) in (server_i39 c_v22020) in
  let c0_v22021 ⇐
    fork (c0_v22022 : ch⟨⇓(__v22023 : RSA_hc_i38) ⇒ end⟩) in
      let __v22024 ⇐ recv c0_v22022 in
      match __v22024 as __v22025 in IO unit with
      | ⟨c_v22026, c0_v22027⟩ ⇒
        let __v22028 ⇐ close c0_v22027 in (client_i40 c_v22026)
      end
  in
  let c0_v22029 ⇐ (send c0_v22021 c_v22019) in
  let __v22030 ⇐ close c0_v22029 in sleep 1

trans1e success--------------------------

def andb_i1 =
  fn b1_v22920 b2_v22921 ⇒
    match b1_v22920 with
    | true ⇒ b2_v22921 | false ⇒ false
    end

def orb_i2 =
  fn b1_v22922 b2_v22923 ⇒
    match b1_v22922 with
    | true ⇒ true | false ⇒ b2_v22923
    end

def notb_i3 =
  fn b_v22924 ⇒ match b_v22924 with
                  | true ⇒ false | false ⇒ true
                  end

def lten_i4 =
  fn x_v22925 y_v22926 ⇒
    match x_v22925 with
    | O ⇒ true
    | S x_v22927 ⇒
      match y_v22926 with
      | O ⇒ false | S y_v22928 ⇒ ((lten_i4 x_v22927) y_v22928)
      end
    end

def gten_i5 =
  fn x_v22929 y_v22930 ⇒
    match x_v22929 with
    | O ⇒ match y_v22930 with
            | O ⇒ true | S __v22931 ⇒ false
            end
    | S x_v22932 ⇒
      match y_v22930 with
      | O ⇒ true | S y_v22933 ⇒ ((gten_i5 x_v22932) y_v22933)
      end
    end

def ltn_i6 =
  fn x_v22934 y_v22935 ⇒
    match x_v22934 with
    | O ⇒ match y_v22935 with
            | O ⇒ false | S y_v22936 ⇒ true
            end
    | S x_v22937 ⇒
      match y_v22935 with
      | O ⇒ false | S y_v22938 ⇒ ((ltn_i6 x_v22937) y_v22938)
      end
    end

def gtn_i7 =
  fn x_v22939 y_v22940 ⇒
    match x_v22939 with
    | O ⇒ false
    | S x_v22941 ⇒
      match y_v22940 with
      | O ⇒ true | S y_v22942 ⇒ ((gtn_i7 x_v22941) y_v22942)
      end
    end

def eqn_i8 =
  fn x_v22943 y_v22944 ⇒
    match x_v22943 with
    | O ⇒ match y_v22944 with
            | O ⇒ true | S __v22945 ⇒ false
            end
    | S x_v22946 ⇒
      match y_v22944 with
      | O ⇒ false | S y_v22947 ⇒ ((eqn_i8 x_v22946) y_v22947)
      end
    end

def pred_i9 =
  fn x_v22948 ⇒ match x_v22948 with
                  | O ⇒ 0 | S x_v22949 ⇒ x_v22949
                  end

def addn_i10 =
  fn x_v22950 y_v22951 ⇒
    match x_v22950 with
    | O ⇒ y_v22951 | S x_v22952 ⇒ ((addn_i10 x_v22952) y_v22951).+1
    end

def subn_i11 =
  fn x_v22953 y_v22954 ⇒
    match y_v22954 with
    | O ⇒ x_v22953
    | S y_v22955 ⇒ ((subn_i11 (pred_i9 x_v22953)) y_v22955)
    end

def muln_i12 =
  fn x_v22956 y_v22957 ⇒
    match x_v22956 with
    | O ⇒ 0
    | S x_v22958 ⇒ ((addn_i10 y_v22957) ((muln_i12 x_v22958) y_v22957))
    end

def divn_i13 =
  fn x_v22959 y_v22960 ⇒
    match ((ltn_i6 x_v22959) y_v22960) with
    | true ⇒ 0
    | false ⇒ ((divn_i13 ((subn_i11 x_v22959) y_v22960)) y_v22960).+1
    end

def modn_i14 =
  fn x_v22961 y_v22962 ⇒
    ((subn_i11 x_v22961)
      ((muln_i12 ((divn_i13 x_v22961) y_v22962)) y_v22962))

data char_d1 =
| Char_c1 of size(1)

data string_d2 =
| EmptyString_c2 of size(0) | String_c3 of size(2)

def cats_i15 =
  fn s1_v22963 s2_v22964 ⇒
    match s1_v22963 with
    | EmptyString_c2  ⇒ s2_v22964
    | String_c3 c_v22965 s1_v22966 ⇒
      (String_c3 c_v22965 ((cats_i15 s1_v22966) s2_v22964))
    end

def strlen_i16 =
  fn s_v22967 ⇒
    match s_v22967 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v22968 s_v22969 ⇒ (strlen_i16 s_v22969).+1
    end

data listUU_d7 =
| nilUU_c12 of size(0) | consUU_c13 of size(2)

data listUL_d6 =
| nilUL_c10 of size(0) | consUL_c11 of size(2)

data listLU_d5 =
| nilLU_c8 of size(0)

data listLL_d4 =
| nilLL_c6 of size(0) | consLL_c7 of size(2)

def lenUU_i45 =
  fn A_v22970 xs_v22971 ⇒
    match xs_v22971 with
    | nilUU_c12  ⇒ (0, nilUU_c12)
    | consUU_c13 x_v22972 xs_v22973 ⇒
      match ((lenUU_i45 NULL) xs_v22973) with
      | (n_v22974, xs_v22975) ⇒
        (n_v22974.+1, (consUU_c13 x_v22972 xs_v22975))
      end
    end

def lenUL_i44 =
  fn A_v22976 xs_v22977 ⇒
    match xs_v22977 with
    | nilUL_c10  ⇒ (0, nilUL_c10)
    | consUL_c11 x_v22978 xs_v22979 ⇒
      match ((lenUL_i44 NULL) xs_v22979) with
      | (n_v22980, xs_v22981) ⇒
        (n_v22980.+1, (consUL_c11 x_v22978 xs_v22981))
      end
    end

def lenLL_i42 =
  fn A_v22982 xs_v22983 ⇒
    match xs_v22983 with
    | nilLL_c6  ⇒ (0, nilLL_c6)
    | consLL_c7 x_v22984 xs_v22985 ⇒
      match ((lenLL_i42 NULL) xs_v22985) with
      | (n_v22986, xs_v22987) ⇒
        (n_v22986.+1, (consLL_c7 x_v22984 xs_v22987))
      end
    end

def appendUU_i49 =
  fn A_v22988 xs_v22989 ⇒
    ln ys_v22990 ⇒
      match xs_v22989 with
      | nilUU_c12  ⇒ ys_v22990
      | consUU_c13 x_v22991 xs_v22992 ⇒
        (consUU_c13 x_v22991 (((appendUU_i49 NULL) xs_v22992) ys_v22990))
      end

def appendUL_i48 =
  fn A_v22993 xs_v22994 ⇒
    ln ys_v22995 ⇒
      match xs_v22994 with
      | nilUL_c10  ⇒ ys_v22995
      | consUL_c11 x_v22996 xs_v22997 ⇒
        (consUL_c11 x_v22996 (((appendUL_i48 NULL) xs_v22997) ys_v22995))
      end

def appendLL_i46 =
  fn A_v22998 xs_v22999 ⇒
    ln ys_v23000 ⇒
      match xs_v22999 with
      | nilLL_c6  ⇒ ys_v23000
      | consLL_c7 x_v23001 xs_v23002 ⇒
        (consLL_c7 x_v23001 (((appendLL_i46 NULL) xs_v23002) ys_v23000))
      end

def readline_i25 =
  fn __v23003 ⇒
    let ch_v23004 ⇐ open stdin in
    let ch_v23005 ⇐ (send ch_v23004 true) in
    let __v23006 ⇐ recv ch_v23005 in
    match __v23006 with
    | (s_v23007, ch_v23008) ⇒
      let ch_v23009 ⇐ (send ch_v23008 false) in
      let __v23010 ⇐ close⇑ ch_v23009 in return s_v23007
    end

def print_i26 =
  fn s_v23011 ⇒
    let ch_v23012 ⇐ open stdout in
    let ch_v23013 ⇐ (send ch_v23012 true) in
    let ch_v23014 ⇐ (send ch_v23013 s_v23011) in
    let ch_v23015 ⇐ (send ch_v23014 false) in close⇑ ch_v23015

def prerr_i27 =
  fn s_v23016 ⇒
    let ch_v23017 ⇐ open stderr in
    let ch_v23018 ⇐ (send ch_v23017 true) in
    let ch_v23019 ⇐ (send ch_v23018 s_v23016) in
    let ch_v23020 ⇐ (send ch_v23019 false) in close⇑ ch_v23020

def digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

def get_at_i29 =
  fn A_v23021 n_v23022 xs_v23023 a_v23024 ⇒
    match n_v23022 with
    | O ⇒
      match xs_v23023 with
      | nilUU_c12  ⇒ a_v23024 | consUU_c13 x_v23025 __v23026 ⇒ x_v23025
      end
    | S n_v23027 ⇒
      match xs_v23023 with
      | nilUU_c12  ⇒ a_v23024
      | consUU_c13 __v23028 xs_v23029 ⇒
        ((((get_at_i29 NULL) n_v23027) xs_v23029) a_v23024)
      end
    end

def string_of_digit_i30 =
  fn n_v23030 ⇒ ((((get_at_i29 NULL) n_v23030) digits_i28) EmptyString_c2)

def string_of_nat_i31 =
  fn n_v23031 ⇒
    let s_v23032 = (string_of_digit_i30 ((modn_i14 n_v23031) 10)) in
    let n_v23033 = ((divn_i13 n_v23031) 10) in
    match ((ltn_i6 0) n_v23033) with
    | true ⇒ ((cats_i15 (string_of_nat_i31 n_v23033)) s_v23032)
    | false ⇒ s_v23032
    end

def gcd_i32 =
  fn a_v23034 b_v23035 ⇒
    match b_v23035 with
    | O ⇒ a_v23034
    | S __v23036 ⇒ ((gcd_i32 b_v23035) ((modn_i14 a_v23034) b_v23035))
    end

def lcm_i33 =
  fn a_v23037 b_v23038 ⇒
    ((divn_i13 ((muln_i12 a_v23037) b_v23038)) ((gcd_i32 a_v23037) b_v23038))

def powm_i34 =
  fn a_v23039 b_v23040 m_v23041 ⇒
    match b_v23040 with
    | O ⇒ 1
    | S b_v23042 ⇒
      ((modn_i14
         ((muln_i12 a_v23039) (((powm_i34 a_v23039) b_v23042) m_v23041)))
        m_v23041)
    end

def server_i39 =
  fn ch_v23043 ⇒
    let x_v23044 = 61 in
    let y_v23045 = 53 in
    let n_v23046 = ((muln_i12 x_v23044) y_v23045) in
    let tot_v23047 =
      ((lcm_i33 ((subn_i11 x_v23044) 1)) ((subn_i11 y_v23045) 1))
    in
    let e_v23048 = 17 in
    let d_v23049 = 413 in
    let ch_v23050 ⇐ ({send} ch_v23043 NULL) in
    let ch_v23051 ⇐ ({send} ch_v23050 NULL) in
    let ch_v23052 ⇐ (send ch_v23051 n_v23046) in
    let ch_v23053 ⇐ ({send} ch_v23052 NULL) in
    let ch_v23054 ⇐ ({send} ch_v23053 NULL) in
    let ch_v23055 ⇐ ({send} ch_v23054 NULL) in
    let ch_v23056 ⇐ (send ch_v23055 e_v23048) in
    let ch_v23057 ⇐ ({send} ch_v23056 NULL) in
    let ch_v23058 ⇐ ({send} ch_v23057 NULL) in
    let ch_v23059 ⇐ ({send} ch_v23058 NULL) in
    let __v23060 ⇐ {recv} ch_v23059 in
    match __v23060 with
    | (P0_v23061, ch_v23062) ⇒
      let __v23063 ⇐ recv ch_v23062 in
      match __v23063 with
      | (C_v23064, ch_v23065) ⇒
        let __v23066 ⇐ {recv} ch_v23065 in
        match __v23066 with
        | (pf_v23067, ch_v23068) ⇒
          let P1_v23069 = (((powm_i34 C_v23064) d_v23049) n_v23046) in
          let __v23070 ⇐ close⇑ ch_v23068 in
          (print_i26 ((cats_i15 (string_of_nat_i31 P1_v23069)) "\n"))
        end
      end
    end

def client_i40 =
  fn ch_v23071 ⇒
    let P0_v23072 = 123 in
    let __v23073 ⇐ {recv} ch_v23071 in
    match __v23073 with
    | (x_v23074, ch_v23075) ⇒
      let __v23076 ⇐ {recv} ch_v23075 in
      match __v23076 with
      | (y_v23077, ch_v23078) ⇒
        let __v23079 ⇐ recv ch_v23078 in
        match __v23079 with
        | (n_v23080, ch_v23081) ⇒
          let __v23082 ⇐ {recv} ch_v23081 in
          match __v23082 with
          | (pf1_v23083, ch_v23084) ⇒
            let __v23085 ⇐ {recv} ch_v23084 in
            match __v23085 with
            | (tot_v23086, ch_v23087) ⇒
              let __v23088 ⇐ {recv} ch_v23087 in
              match __v23088 with
              | (pf2_v23089, ch_v23090) ⇒
                let __v23091 ⇐ recv ch_v23090 in
                match __v23091 with
                | (e_v23092, ch_v23093) ⇒
                  let __v23094 ⇐ {recv} ch_v23093 in
                  match __v23094 with
                  | (pf3_v23095, ch_v23096) ⇒
                    let __v23097 ⇐ {recv} ch_v23096 in
                    match __v23097 with
                    | (pf4_v23098, ch_v23099) ⇒
                      let __v23100 ⇐ {recv} ch_v23099 in
                      match __v23100 with
                      | (pf5_v23101, ch_v23102) ⇒
                        let ch_v23103 ⇐ ({send} ch_v23102 NULL) in
                        let ch_v23104 ⇐
                          (send ch_v23103
                            (((powm_i34 P0_v23072) e_v23092) n_v23080))
                        in
                        let ch_v23105 ⇐ ({send} ch_v23104 NULL) in
                        close⇓ ch_v23105
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

main =
  let c_v23106 ⇐ fork c_v23107 in (server_i39 c_v23107) in
  let c0_v23108 ⇐
    fork c0_v23109 in
      let __v23110 ⇐ recv c0_v23109 in
      match __v23110 with
      | (c_v23111, c0_v23112) ⇒
        let __v23113 ⇐ close⇑ c0_v23112 in (client_i40 c_v23111)
      end
  in
  let c0_v23114 ⇐ (send c0_v23108 c_v23106) in
  let __v23115 ⇐ close⇓ c0_v23114 in sleep 1

trans12 success--------------------------

fun andb_i1(b1_v23427, b2_v23428) = if b1_v23427 then
                                      b2_v23428
                                    else
                                      0

val andbclo_i50 = fn b1_v23429 b2_v23430 ⇒ andb_i1(b1_v23429, b2_v23430)

fun orb_i2(b1_v23431, b2_v23432) = if b1_v23431 then
                                     1
                                   else
                                     b2_v23432

val orbclo_i51 = fn b1_v23433 b2_v23434 ⇒ orb_i2(b1_v23433, b2_v23434)

fun notb_i3(b_v23435) = if b_v23435 then
                          0
                        else
                          1

val notbclo_i52 = fn b_v23436 ⇒ notb_i3(b_v23436)

fun lten_i4(x_v23437, y_v23438) =
  let __v23439 = x_v23437 in
  if __v23439 then
    let x_v23440 = __v23439.-1 in
    let __v23441 = y_v23438 in
    if __v23441 then
      let y_v23442 = __v23441.-1 in lten_i4(x_v23440, y_v23442)
    else
      0
  else
    1

val ltenclo_i53 = fn x_v23443 y_v23444 ⇒ lten_i4(x_v23443, y_v23444)

fun gten_i5(x_v23445, y_v23446) =
  let __v23447 = x_v23445 in
  if __v23447 then
    let x_v23448 = __v23447.-1 in
    let __v23449 = y_v23446 in
    if __v23449 then
      let y_v23450 = __v23449.-1 in gten_i5(x_v23448, y_v23450)
    else
      1
  else
    let __v23451 = y_v23446 in
    if __v23451 then
      let __v23452 = __v23451.-1 in 0
    else
      1

val gtenclo_i54 = fn x_v23453 y_v23454 ⇒ gten_i5(x_v23453, y_v23454)

fun ltn_i6(x_v23455, y_v23456) =
  let __v23457 = x_v23455 in
  if __v23457 then
    let x_v23458 = __v23457.-1 in
    let __v23459 = y_v23456 in
    if __v23459 then
      let y_v23460 = __v23459.-1 in ltn_i6(x_v23458, y_v23460)
    else
      0
  else
    let __v23461 = y_v23456 in
    if __v23461 then
      let y_v23462 = __v23461.-1 in 1
    else
      0

val ltnclo_i55 = fn x_v23463 y_v23464 ⇒ ltn_i6(x_v23463, y_v23464)

fun gtn_i7(x_v23465, y_v23466) =
  let __v23467 = x_v23465 in
  if __v23467 then
    let x_v23468 = __v23467.-1 in
    let __v23469 = y_v23466 in
    if __v23469 then
      let y_v23470 = __v23469.-1 in gtn_i7(x_v23468, y_v23470)
    else
      1
  else
    0

val gtnclo_i56 = fn x_v23471 y_v23472 ⇒ gtn_i7(x_v23471, y_v23472)

fun eqn_i8(x_v23473, y_v23474) =
  let __v23475 = x_v23473 in
  if __v23475 then
    let x_v23476 = __v23475.-1 in
    let __v23477 = y_v23474 in
    if __v23477 then
      let y_v23478 = __v23477.-1 in eqn_i8(x_v23476, y_v23478)
    else
      0
  else
    let __v23479 = y_v23474 in
    if __v23479 then
      let __v23480 = __v23479.-1 in 0
    else
      1

val eqnclo_i57 = fn x_v23481 y_v23482 ⇒ eqn_i8(x_v23481, y_v23482)

fun pred_i9(x_v23483) =
  let __v23484 = x_v23483 in
  if __v23484 then
    let x_v23485 = __v23484.-1 in x_v23485
  else
    0

val predclo_i58 = fn x_v23486 ⇒ pred_i9(x_v23486)

fun addn_i10(x_v23487, y_v23488) =
  let __v23489 = x_v23487 in
  if __v23489 then
    let x_v23490 = __v23489.-1 in addn_i10(x_v23490, y_v23488).+1
  else
    y_v23488

val addnclo_i59 = fn x_v23491 y_v23492 ⇒ addn_i10(x_v23491, y_v23492)

fun subn_i11(x_v23493, y_v23494) =
  let __v23495 = y_v23494 in
  if __v23495 then
    let y_v23496 = __v23495.-1 in subn_i11(pred_i9(x_v23493), y_v23496)
  else
    x_v23493

val subnclo_i60 = fn x_v23497 y_v23498 ⇒ subn_i11(x_v23497, y_v23498)

fun muln_i12(x_v23499, y_v23500) =
  let __v23501 = x_v23499 in
  if __v23501 then
    let x_v23502 = __v23501.-1 in
    addn_i10(y_v23500, muln_i12(x_v23502, y_v23500))
  else
    0

val mulnclo_i61 = fn x_v23503 y_v23504 ⇒ muln_i12(x_v23503, y_v23504)

fun divn_i13(x_v23505, y_v23506) =
  if ltn_i6(x_v23505, y_v23506) then
    0
  else
    divn_i13(subn_i11(x_v23505, y_v23506), y_v23506).+1

val divnclo_i62 = fn x_v23507 y_v23508 ⇒ divn_i13(x_v23507, y_v23508)

fun modn_i14(x_v23509, y_v23510) =
  subn_i11(x_v23509, muln_i12(divn_i13(x_v23509, y_v23510), y_v23510))

val modnclo_i63 = fn x_v23511 y_v23512 ⇒ modn_i14(x_v23511, y_v23512)

fun cats_i15(s1_v23513, s2_v23514) =
  match s1_v23513 with
  | EmptyString_c2  ⇒ s2_v23514
  | String_c3 c_v23515 s1_v23516 ⇒
    (String_c3 c_v23515 cats_i15(s1_v23516, s2_v23514))
  end

val catsclo_i64 = fn s1_v23517 s2_v23518 ⇒ cats_i15(s1_v23517, s2_v23518)

fun strlen_i16(s_v23519) =
  match s_v23519 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v23520 s_v23521 ⇒ strlen_i16(s_v23521).+1
  end

val strlenclo_i65 = fn s_v23522 ⇒ strlen_i16(s_v23522)

fun lenUU_i45(A_v23523, xs_v23524) =
  match xs_v23524 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v23525 xs_v23526 ⇒
    match lenUU_i45(NULL, xs_v23526) with
    | (n_v23527, xs_v23528) ⇒
      (n_v23527.+1, (consUU_c13 x_v23525 xs_v23528))
    end
  end

val lenUUclo_i66 = fn A_v23529 xs_v23530 ⇒ lenUU_i45(A_v23529, xs_v23530)

fun lenUL_i44(A_v23531, xs_v23532) =
  match xs_v23532 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v23533 xs_v23534 ⇒
    match lenUL_i44(NULL, xs_v23534) with
    | (n_v23535, xs_v23536) ⇒
      (n_v23535.+1, (consUL_c11 x_v23533 xs_v23536))
    end
  end

val lenULclo_i67 = fn A_v23537 xs_v23538 ⇒ lenUL_i44(A_v23537, xs_v23538)

fun lenLL_i42(A_v23539, xs_v23540) =
  match xs_v23540 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v23541 xs_v23542 ⇒
    match lenLL_i42(NULL, xs_v23542) with
    | (n_v23543, xs_v23544) ⇒ (n_v23543.+1, (consLL_c7 x_v23541 xs_v23544))
    end
  end

val lenLLclo_i68 = fn A_v23545 xs_v23546 ⇒ lenLL_i42(A_v23545, xs_v23546)

fun appendUU_i49(A_v23547, xs_v23548, ys_v23549) =
  match xs_v23548 with
  | nilUU_c12  ⇒ ys_v23549
  | consUU_c13 x_v23550 xs_v23551 ⇒
    (consUU_c13 x_v23550 appendUU_i49(NULL, xs_v23551, ys_v23549))
  end

val appendUUclo_i69 =
  fn A_v23552 xs_v23553 ⇒
    ln ys_v23554 ⇒ appendUU_i49(A_v23552, xs_v23553, ys_v23554)

fun appendUL_i48(A_v23555, xs_v23556, ys_v23557) =
  match xs_v23556 with
  | nilUL_c10  ⇒ ys_v23557
  | consUL_c11 x_v23558 xs_v23559 ⇒
    (consUL_c11 x_v23558 appendUL_i48(NULL, xs_v23559, ys_v23557))
  end

val appendULclo_i70 =
  fn A_v23560 xs_v23561 ⇒
    ln ys_v23562 ⇒ appendUL_i48(A_v23560, xs_v23561, ys_v23562)

fun appendLL_i46(A_v23563, xs_v23564, ys_v23565) =
  match xs_v23564 with
  | nilLL_c6  ⇒ ys_v23565
  | consLL_c7 x_v23566 xs_v23567 ⇒
    (consLL_c7 x_v23566 appendLL_i46(NULL, xs_v23567, ys_v23565))
  end

val appendLLclo_i71 =
  fn A_v23568 xs_v23569 ⇒
    ln ys_v23570 ⇒ appendLL_i46(A_v23568, xs_v23569, ys_v23570)

fun readline_i25(__v23571) =
  ln __v23572 ⇒
    let ch_v23573 = (ln __v23574 ⇒ open stdin) NULL in
    let ch_v23575 =
      ((fn x_v23576 ⇒ ln __v23577 ⇒ send(ch_v23573, x_v23576)) 1) NULL
    in
    let __v23578 = (ln __v23579 ⇒ recv(ch_v23575)) NULL in
    (match __v23578 with
     | (s_v23580, ch_v23581) ⇒
       ln __v23582 ⇒
         let ch_v23583 =
           ((fn x_v23584 ⇒ ln __v23585 ⇒ send(ch_v23581, x_v23584)) 0)
             NULL
         in
         let __v23586 =
           (ln __v23587 ⇒ let __v23588 = ch_v23583 in NULL) NULL
         in (ln __v23589 ⇒ s_v23580) NULL
     end) NULL

val readlineclo_i72 = fn __v23590 ⇒ readline_i25(__v23590)

fun print_i26(s_v23591) =
  ln __v23592 ⇒
    let ch_v23593 = (ln __v23594 ⇒ open stdout) NULL in
    let ch_v23595 =
      ((fn x_v23596 ⇒ ln __v23597 ⇒ send(ch_v23593, x_v23596)) 1) NULL
    in
    let ch_v23598 =
      ((fn x_v23599 ⇒ ln __v23600 ⇒ send(ch_v23595, x_v23599)) s_v23591)
        NULL
    in
    let ch_v23601 =
      ((fn x_v23602 ⇒ ln __v23603 ⇒ send(ch_v23598, x_v23602)) 0) NULL
    in (ln __v23604 ⇒ let __v23605 = ch_v23601 in NULL) NULL

val printclo_i73 = fn s_v23606 ⇒ print_i26(s_v23606)

fun prerr_i27(s_v23607) =
  ln __v23608 ⇒
    let ch_v23609 = (ln __v23610 ⇒ open stderr) NULL in
    let ch_v23611 =
      ((fn x_v23612 ⇒ ln __v23613 ⇒ send(ch_v23609, x_v23612)) 1) NULL
    in
    let ch_v23614 =
      ((fn x_v23615 ⇒ ln __v23616 ⇒ send(ch_v23611, x_v23615)) s_v23607)
        NULL
    in
    let ch_v23617 =
      ((fn x_v23618 ⇒ ln __v23619 ⇒ send(ch_v23614, x_v23618)) 0) NULL
    in (ln __v23620 ⇒ let __v23621 = ch_v23617 in NULL) NULL

val prerrclo_i74 = fn s_v23622 ⇒ prerr_i27(s_v23622)

val digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i29(A_v23623, n_v23624, xs_v23625, a_v23626) =
  let __v23627 = n_v23624 in
  if __v23627 then
    let n_v23628 = __v23627.-1 in
    match xs_v23625 with
    | nilUU_c12  ⇒ a_v23626
    | consUU_c13 __v23629 xs_v23630 ⇒
      get_at_i29(NULL, n_v23628, xs_v23630, a_v23626)
    end
  else
    match xs_v23625 with
    | nilUU_c12  ⇒ a_v23626 | consUU_c13 x_v23631 __v23632 ⇒ x_v23631
    end

val get_atclo_i75 =
  fn A_v23633 n_v23634 xs_v23635 a_v23636 ⇒
    get_at_i29(A_v23633, n_v23634, xs_v23635, a_v23636)

fun string_of_digit_i30(n_v23637) =
  get_at_i29(NULL, n_v23637, digits_i28, EmptyString_c2)

val string_of_digitclo_i76 = fn n_v23638 ⇒ string_of_digit_i30(n_v23638)

fun string_of_nat_i31(n_v23639) =
  let s_v23640 = string_of_digit_i30(modn_i14(n_v23639, 10)) in
  let n_v23641 = divn_i13(n_v23639, 10) in
  if ltn_i6(0, n_v23641) then
    cats_i15(string_of_nat_i31(n_v23641), s_v23640)
  else
    s_v23640

val string_of_natclo_i77 = fn n_v23642 ⇒ string_of_nat_i31(n_v23642)

fun gcd_i32(a_v23643, b_v23644) =
  let __v23645 = b_v23644 in
  if __v23645 then
    let __v23646 = __v23645.-1 in
    gcd_i32(b_v23644, modn_i14(a_v23643, b_v23644))
  else
    a_v23643

val gcdclo_i78 = fn a_v23647 b_v23648 ⇒ gcd_i32(a_v23647, b_v23648)

fun lcm_i33(a_v23649, b_v23650) =
  divn_i13(muln_i12(a_v23649, b_v23650), gcd_i32(a_v23649, b_v23650))

val lcmclo_i79 = fn a_v23651 b_v23652 ⇒ lcm_i33(a_v23651, b_v23652)

fun powm_i34(a_v23653, b_v23654, m_v23655) =
  let __v23656 = b_v23654 in
  if __v23656 then
    let b_v23657 = __v23656.-1 in
    modn_i14(muln_i12(a_v23653, powm_i34(a_v23653, b_v23657, m_v23655)),
             m_v23655)
  else
    1

val powmclo_i80 =
  fn a_v23658 b_v23659 m_v23660 ⇒ powm_i34(a_v23658, b_v23659, m_v23660)

fun server_i39(ch_v23661) =
  let x_v23662 = 61 in
  let y_v23663 = 53 in
  let n_v23664 = muln_i12(x_v23662, y_v23663) in
  let tot_v23665 = lcm_i33(subn_i11(x_v23662, 1), subn_i11(y_v23663, 1)) in
  let e_v23666 = 17 in
  let d_v23667 = 413 in
  ln __v23668 ⇒
    let ch_v23669 = ((fn x_v23670 ⇒ ln __v23671 ⇒ ch_v23661) NULL) NULL
    in
    let ch_v23672 = ((fn x_v23673 ⇒ ln __v23674 ⇒ ch_v23669) NULL) NULL
    in
    let ch_v23675 =
      ((fn x_v23676 ⇒ ln __v23677 ⇒ send(ch_v23672, x_v23676)) n_v23664)
        NULL
    in
    let ch_v23678 = ((fn x_v23679 ⇒ ln __v23680 ⇒ ch_v23675) NULL) NULL
    in
    let ch_v23681 = ((fn x_v23682 ⇒ ln __v23683 ⇒ ch_v23678) NULL) NULL
    in
    let ch_v23684 = ((fn x_v23685 ⇒ ln __v23686 ⇒ ch_v23681) NULL) NULL
    in
    let ch_v23687 =
      ((fn x_v23688 ⇒ ln __v23689 ⇒ send(ch_v23684, x_v23688)) e_v23666)
        NULL
    in
    let ch_v23690 = ((fn x_v23691 ⇒ ln __v23692 ⇒ ch_v23687) NULL) NULL
    in
    let ch_v23693 = ((fn x_v23694 ⇒ ln __v23695 ⇒ ch_v23690) NULL) NULL
    in
    let ch_v23696 = ((fn x_v23697 ⇒ ln __v23698 ⇒ ch_v23693) NULL) NULL
    in
    let __v23699 = (ln __v23700 ⇒ (NULL, ch_v23696)) NULL in
    (match __v23699 with
     | (P0_v23701, ch_v23702) ⇒
       ln __v23703 ⇒
         let __v23704 = (ln __v23705 ⇒ recv(ch_v23702)) NULL in
         (match __v23704 with
          | (C_v23706, ch_v23707) ⇒
            ln __v23708 ⇒
              let __v23709 = (ln __v23710 ⇒ (NULL, ch_v23707)) NULL in
              (match __v23709 with
               | (pf_v23711, ch_v23712) ⇒
                 let P1_v23713 = powm_i34(C_v23706, d_v23667, n_v23664) in
                 ln __v23714 ⇒
                   let __v23715 =
                     (ln __v23716 ⇒ let __v23717 = ch_v23712 in NULL) NULL
                   in
                   (print_i26(cats_i15(string_of_nat_i31(P1_v23713), "\n")))
                     NULL
               end) NULL
          end) NULL
     end) NULL

val serverclo_i81 = fn ch_v23718 ⇒ server_i39(ch_v23718)

fun client_i40(ch_v23719) =
  let P0_v23720 = 123 in
  ln __v23721 ⇒
    let __v23722 = (ln __v23723 ⇒ (NULL, ch_v23719)) NULL in
    (match __v23722 with
     | (x_v23724, ch_v23725) ⇒
       ln __v23726 ⇒
         let __v23727 = (ln __v23728 ⇒ (NULL, ch_v23725)) NULL in
         (match __v23727 with
          | (y_v23729, ch_v23730) ⇒
            ln __v23731 ⇒
              let __v23732 = (ln __v23733 ⇒ recv(ch_v23730)) NULL in
              (match __v23732 with
               | (n_v23734, ch_v23735) ⇒
                 ln __v23736 ⇒
                   let __v23737 = (ln __v23738 ⇒ (NULL, ch_v23735)) NULL in
                   (match __v23737 with
                    | (pf1_v23739, ch_v23740) ⇒
                      ln __v23741 ⇒
                        let __v23742 =
                          (ln __v23743 ⇒ (NULL, ch_v23740)) NULL
                        in
                        (match __v23742 with
                         | (tot_v23744, ch_v23745) ⇒
                           ln __v23746 ⇒
                             let __v23747 =
                               (ln __v23748 ⇒ (NULL, ch_v23745)) NULL
                             in
                             (match __v23747 with
                              | (pf2_v23749, ch_v23750) ⇒
                                ln __v23751 ⇒
                                  let __v23752 =
                                    (ln __v23753 ⇒ recv(ch_v23750)) NULL
                                  in
                                  (match __v23752 with
                                   | (e_v23754, ch_v23755) ⇒
                                     ln __v23756 ⇒
                                       let __v23757 =
                                         (ln __v23758 ⇒ (NULL, ch_v23755))
                                           NULL
                                       in
                                       (match __v23757 with
                                        | (pf3_v23759, ch_v23760) ⇒
                                          ln __v23761 ⇒
                                            let __v23762 =
                                              (ln __v23763 ⇒
                                                 (NULL, ch_v23760))
                                                NULL
                                            in
                                            (match __v23762 with
                                             | (pf4_v23764, ch_v23765) ⇒
                                               ln __v23766 ⇒
                                                 let __v23767 =
                                                   (ln __v23768 ⇒
                                                      (NULL, ch_v23765))
                                                     NULL
                                                 in
                                                 (match __v23767 with
                                                  | (pf5_v23769, ch_v23770) ⇒
                                                    ln __v23771 ⇒
                                                      let ch_v23772 =
                                                        ((fn x_v23773 ⇒
                                                            ln __v23774 ⇒
                                                              ch_v23770)
                                                           NULL)
                                                          NULL
                                                      in
                                                      let ch_v23775 =
                                                        ((fn x_v23776 ⇒
                                                            ln __v23777 ⇒
                                                              send(ch_v23772, x_v23776))
                                                           powm_i34(P0_v23720,
                                                                    e_v23754,
                                                                    n_v23734))
                                                          NULL
                                                      in
                                                      let ch_v23778 =
                                                        ((fn x_v23779 ⇒
                                                            ln __v23780 ⇒
                                                              ch_v23775)
                                                           NULL)
                                                          NULL
                                                      in
                                                      (ln __v23781 ⇒
                                                         close(ch_v23778))
                                                        NULL
                                                  end) NULL
                                             end) NULL
                                        end) NULL
                                   end) NULL
                              end) NULL
                         end) NULL
                    end) NULL
               end) NULL
          end) NULL
     end) NULL

val clientclo_i82 = fn ch_v23782 ⇒ client_i40(ch_v23782)

main =
  (ln __v23783 ⇒
     let c_v23784 =
       (ln __v23785 ⇒ fork c_v23786 in (server_i39(c_v23786)) NULL) NULL
     in
     let c0_v23787 =
       (ln __v23788 ⇒
          fork c0_v23789 in
            (ln __v23790 ⇒
               let __v23791 = (ln __v23792 ⇒ recv(c0_v23789)) NULL in
               (match __v23791 with
                | (c_v23793, c0_v23794) ⇒
                  ln __v23795 ⇒
                    let __v23796 =
                      (ln __v23797 ⇒ let __v23798 = c0_v23794 in NULL) NULL
                    in (client_i40(c_v23793)) NULL
                end) NULL)
              NULL)
         NULL
     in
     let c0_v23799 =
       ((ln x_v23800 __v23801 ⇒ send(c0_v23787, x_v23800)) c_v23784) NULL
     in
     let __v23802 = (ln __v23803 ⇒ close(c0_v23799)) NULL in
     (ln __v23804 ⇒ sleep(1)) NULL)
    NULL

trans23 success--------------------------

fun andb_i1(b1_v25088, b2_v25089) = if b1_v25088 then
                                      b2_v25089
                                    else
                                      0

val andbclo_i50 = fn b1_v25090 b2_v25091 ⇒ andb_i1(b1_v25090, b2_v25091)

fun orb_i2(b1_v25092, b2_v25093) = if b1_v25092 then
                                     1
                                   else
                                     b2_v25093

val orbclo_i51 = fn b1_v25094 b2_v25095 ⇒ orb_i2(b1_v25094, b2_v25095)

fun notb_i3(b_v25096) = if b_v25096 then
                          0
                        else
                          1

val notbclo_i52 = fn b_v25097 ⇒ notb_i3(b_v25097)

fun lten_i4(x_v25098, y_v25099) =
  if x_v25098 then
    if y_v25099 then
      lten_i4(x_v25098.-1, y_v25099.-1)
    else
      0
  else
    1

val ltenclo_i53 = fn x_v25100 y_v25101 ⇒ lten_i4(x_v25100, y_v25101)

fun gten_i5(x_v25102, y_v25103) =
  if x_v25102 then
    if y_v25103 then
      gten_i5(x_v25102.-1, y_v25103.-1)
    else
      1
  else
    if y_v25103 then
      0
    else
      1

val gtenclo_i54 = fn x_v25104 y_v25105 ⇒ gten_i5(x_v25104, y_v25105)

fun ltn_i6(x_v25106, y_v25107) =
  if x_v25106 then
    if y_v25107 then
      ltn_i6(x_v25106.-1, y_v25107.-1)
    else
      0
  else
    if y_v25107 then
      1
    else
      0

val ltnclo_i55 = fn x_v25108 y_v25109 ⇒ ltn_i6(x_v25108, y_v25109)

fun gtn_i7(x_v25110, y_v25111) =
  if x_v25110 then
    if y_v25111 then
      gtn_i7(x_v25110.-1, y_v25111.-1)
    else
      1
  else
    0

val gtnclo_i56 = fn x_v25112 y_v25113 ⇒ gtn_i7(x_v25112, y_v25113)

fun eqn_i8(x_v25114, y_v25115) =
  if x_v25114 then
    if y_v25115 then
      eqn_i8(x_v25114.-1, y_v25115.-1)
    else
      0
  else
    if y_v25115 then
      0
    else
      1

val eqnclo_i57 = fn x_v25116 y_v25117 ⇒ eqn_i8(x_v25116, y_v25117)

fun pred_i9(x_v25118) = if x_v25118 then
                          x_v25118.-1
                        else
                          0

val predclo_i58 = fn x_v25119 ⇒ pred_i9(x_v25119)

fun addn_i10(x_v25120, y_v25121) =
  if x_v25120 then
    addn_i10(x_v25120.-1, y_v25121).+1
  else
    y_v25121

val addnclo_i59 = fn x_v25122 y_v25123 ⇒ addn_i10(x_v25122, y_v25123)

fun subn_i11(x_v25124, y_v25125) =
  if y_v25125 then
    subn_i11(pred_i9(x_v25124), y_v25125.-1)
  else
    x_v25124

val subnclo_i60 = fn x_v25126 y_v25127 ⇒ subn_i11(x_v25126, y_v25127)

fun muln_i12(x_v25128, y_v25129) =
  if x_v25128 then
    addn_i10(y_v25129, muln_i12(x_v25128.-1, y_v25129))
  else
    0

val mulnclo_i61 = fn x_v25130 y_v25131 ⇒ muln_i12(x_v25130, y_v25131)

fun divn_i13(x_v25132, y_v25133) =
  if ltn_i6(x_v25132, y_v25133) then
    0
  else
    divn_i13(subn_i11(x_v25132, y_v25133), y_v25133).+1

val divnclo_i62 = fn x_v25134 y_v25135 ⇒ divn_i13(x_v25134, y_v25135)

fun modn_i14(x_v25136, y_v25137) =
  subn_i11(x_v25136, muln_i12(divn_i13(x_v25136, y_v25137), y_v25137))

val modnclo_i63 = fn x_v25138 y_v25139 ⇒ modn_i14(x_v25138, y_v25139)

fun cats_i15(s1_v25140, s2_v25141) =
  match s1_v25140 with
  | EmptyString_c2  ⇒ s2_v25141
  | String_c3 c_v25142 s1_v25143 ⇒
    (String_c3 c_v25142 cats_i15(s1_v25143, s2_v25141))
  end

val catsclo_i64 = fn s1_v25144 s2_v25145 ⇒ cats_i15(s1_v25144, s2_v25145)

fun strlen_i16(s_v25146) =
  match s_v25146 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v25147 s_v25148 ⇒ strlen_i16(s_v25148).+1
  end

val strlenclo_i65 = fn s_v25149 ⇒ strlen_i16(s_v25149)

fun lenUU_i45(A_v25150, xs_v25151) =
  match xs_v25151 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v25152 xs_v25153 ⇒
    match lenUU_i45(NULL, xs_v25153) with
    | (n_v25154, xs_v25155) ⇒
      (n_v25154.+1, (consUU_c13 x_v25152 xs_v25155))
    end
  end

val lenUUclo_i66 = fn A_v25156 xs_v25157 ⇒ lenUU_i45(A_v25156, xs_v25157)

fun lenUL_i44(A_v25158, xs_v25159) =
  match xs_v25159 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v25160 xs_v25161 ⇒
    match lenUL_i44(NULL, xs_v25161) with
    | (n_v25162, xs_v25163) ⇒
      (n_v25162.+1, (consUL_c11 x_v25160 xs_v25163))
    end
  end

val lenULclo_i67 = fn A_v25164 xs_v25165 ⇒ lenUL_i44(A_v25164, xs_v25165)

fun lenLL_i42(A_v25166, xs_v25167) =
  match xs_v25167 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v25168 xs_v25169 ⇒
    match lenLL_i42(NULL, xs_v25169) with
    | (n_v25170, xs_v25171) ⇒ (n_v25170.+1, (consLL_c7 x_v25168 xs_v25171))
    end
  end

val lenLLclo_i68 = fn A_v25172 xs_v25173 ⇒ lenLL_i42(A_v25172, xs_v25173)

fun appendUU_i49(A_v25174, xs_v25175, ys_v25176) =
  match xs_v25175 with
  | nilUU_c12  ⇒ ys_v25176
  | consUU_c13 x_v25177 xs_v25178 ⇒
    (consUU_c13 x_v25177 appendUU_i49(NULL, xs_v25178, ys_v25176))
  end

val appendUUclo_i69 =
  fn A_v25179 xs_v25180 ⇒
    ln ys_v25181 ⇒ appendUU_i49(A_v25179, xs_v25180, ys_v25181)

fun appendUL_i48(A_v25182, xs_v25183, ys_v25184) =
  match xs_v25183 with
  | nilUL_c10  ⇒ ys_v25184
  | consUL_c11 x_v25185 xs_v25186 ⇒
    (consUL_c11 x_v25185 appendUL_i48(NULL, xs_v25186, ys_v25184))
  end

val appendULclo_i70 =
  fn A_v25187 xs_v25188 ⇒
    ln ys_v25189 ⇒ appendUL_i48(A_v25187, xs_v25188, ys_v25189)

fun appendLL_i46(A_v25190, xs_v25191, ys_v25192) =
  match xs_v25191 with
  | nilLL_c6  ⇒ ys_v25192
  | consLL_c7 x_v25193 xs_v25194 ⇒
    (consLL_c7 x_v25193 appendLL_i46(NULL, xs_v25194, ys_v25192))
  end

val appendLLclo_i71 =
  fn A_v25195 xs_v25196 ⇒
    ln ys_v25197 ⇒ appendLL_i46(A_v25195, xs_v25196, ys_v25197)

fun readline_i25(__v25198) =
  ln __v25199 ⇒
    let ch_v25200 = open stdin in
    let ch_v25201 = send(ch_v25200, 1) in
    let __v25202 = recv(ch_v25201) in
    match __v25202 with
    | (s_v25203, ch_v25204) ⇒
      let ch_v25205 = send(ch_v25204, 0) in s_v25203
    end

val readlineclo_i72 = fn __v25206 ⇒ readline_i25(__v25206)

fun print_i26(s_v25207) =
  ln __v25208 ⇒
    let ch_v25209 = open stdout in
    let ch_v25210 = send(ch_v25209, 1) in
    let ch_v25211 = send(ch_v25210, s_v25207) in
    let ch_v25212 = send(ch_v25211, 0) in NULL

val printclo_i73 = fn s_v25213 ⇒ print_i26(s_v25213)

fun prerr_i27(s_v25214) =
  ln __v25215 ⇒
    let ch_v25216 = open stderr in
    let ch_v25217 = send(ch_v25216, 1) in
    let ch_v25218 = send(ch_v25217, s_v25214) in
    let ch_v25219 = send(ch_v25218, 0) in NULL

val prerrclo_i74 = fn s_v25220 ⇒ prerr_i27(s_v25220)

val digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i29(A_v25221, n_v25222, xs_v25223, a_v25224) =
  if n_v25222 then
    match xs_v25223 with
    | nilUU_c12  ⇒ a_v25224
    | consUU_c13 __v25225 xs_v25226 ⇒
      get_at_i29(NULL, n_v25222.-1, xs_v25226, a_v25224)
    end
  else
    match xs_v25223 with
    | nilUU_c12  ⇒ a_v25224 | consUU_c13 x_v25227 __v25228 ⇒ x_v25227
    end

val get_atclo_i75 =
  fn A_v25229 n_v25230 xs_v25231 a_v25232 ⇒
    get_at_i29(A_v25229, n_v25230, xs_v25231, a_v25232)

fun string_of_digit_i30(n_v25233) =
  get_at_i29(NULL, n_v25233, digits_i28, EmptyString_c2)

val string_of_digitclo_i76 = fn n_v25234 ⇒ string_of_digit_i30(n_v25234)

fun string_of_nat_i31(n_v25235) =
  let s_v25236 = string_of_digit_i30(modn_i14(n_v25235, 10)) in
  let n_v25237 = divn_i13(n_v25235, 10) in
  if ltn_i6(0, n_v25237) then
    cats_i15(string_of_nat_i31(n_v25237), s_v25236)
  else
    s_v25236

val string_of_natclo_i77 = fn n_v25238 ⇒ string_of_nat_i31(n_v25238)

fun gcd_i32(a_v25239, b_v25240) =
  if b_v25240 then
    gcd_i32(b_v25240, modn_i14(a_v25239, b_v25240))
  else
    a_v25239

val gcdclo_i78 = fn a_v25241 b_v25242 ⇒ gcd_i32(a_v25241, b_v25242)

fun lcm_i33(a_v25243, b_v25244) =
  divn_i13(muln_i12(a_v25243, b_v25244), gcd_i32(a_v25243, b_v25244))

val lcmclo_i79 = fn a_v25245 b_v25246 ⇒ lcm_i33(a_v25245, b_v25246)

fun powm_i34(a_v25247, b_v25248, m_v25249) =
  if b_v25248 then
    modn_i14(muln_i12(a_v25247, powm_i34(a_v25247, b_v25248.-1, m_v25249)),
             m_v25249)
  else
    1

val powmclo_i80 =
  fn a_v25250 b_v25251 m_v25252 ⇒ powm_i34(a_v25250, b_v25251, m_v25252)

fun server_i39(ch_v25253) =
  let n_v25254 = muln_i12(61, 53) in
  let tot_v25255 = lcm_i33(subn_i11(61, 1), subn_i11(53, 1)) in
  ln __v25256 ⇒
    let ch_v25257 = send(ch_v25253, n_v25254) in
    let ch_v25258 = send(ch_v25257, 17) in
    match (NULL, ch_v25258) with
    | (P0_v25259, ch_v25260) ⇒
      let __v25261 = recv(ch_v25260) in
      match __v25261 with
      | (C_v25262, ch_v25263) ⇒
        match (NULL, ch_v25263) with
        | (pf_v25264, ch_v25265) ⇒
          let P1_v25266 = powm_i34(C_v25262, 413, n_v25254) in
          (print_i26(cats_i15(string_of_nat_i31(P1_v25266), "\n"))) NULL
        end
      end
    end

val serverclo_i81 = fn ch_v25267 ⇒ server_i39(ch_v25267)

fun client_i40(ch_v25268) =
  ln __v25269 ⇒
    match (NULL, ch_v25268) with
    | (x_v25270, ch_v25271) ⇒
      match (NULL, ch_v25271) with
      | (y_v25272, ch_v25273) ⇒
        let __v25274 = recv(ch_v25273) in
        match __v25274 with
        | (n_v25275, ch_v25276) ⇒
          match (NULL, ch_v25276) with
          | (pf1_v25277, ch_v25278) ⇒
            match (NULL, ch_v25278) with
            | (tot_v25279, ch_v25280) ⇒
              match (NULL, ch_v25280) with
              | (pf2_v25281, ch_v25282) ⇒
                let __v25283 = recv(ch_v25282) in
                match __v25283 with
                | (e_v25284, ch_v25285) ⇒
                  match (NULL, ch_v25285) with
                  | (pf3_v25286, ch_v25287) ⇒
                    match (NULL, ch_v25287) with
                    | (pf4_v25288, ch_v25289) ⇒
                      match (NULL, ch_v25289) with
                      | (pf5_v25290, ch_v25291) ⇒
                        let ch_v25292 =
                          let x_v25293 = powm_i34(123, e_v25284, n_v25275) in
                          send(ch_v25291, x_v25293)
                        in close(ch_v25292)
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

val clientclo_i82 = fn ch_v25294 ⇒ client_i40(ch_v25294)

main =
  let c_v25295 = fork c_v25296 in (server_i39(c_v25296)) NULL in
  let c0_v25297 =
    fork c0_v25298 in
      let __v25299 = recv(c0_v25298) in
      match __v25299 with
      | (c_v25300, c0_v25301) ⇒ (client_i40(c_v25300)) NULL
      end
  in
  let c0_v25302 = send(c0_v25297, c_v25295) in
  let __v25303 = close(c0_v25302) in sleep(1)

trans3e success--------------------------

trans34 success--------------------------

