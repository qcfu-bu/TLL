program split‹t› (zs : ((list‹_, t›)
(nat))) : (∃ (_ : ((list‹_, t›) (nat))) ⊗ ((list‹_, t›)
(nat))) = match zs as _ in _ with nil  ⇒ ⟨nil, nil⟩ | cons x
zs ⇒ match zs as _ in _ with nil  ⇒ ⟨((cons) (x)
(nil)), nil⟩ | cons y zs ⇒ let ⟨xs, ys⟩ = ((split)
(zs)) in ⟨((cons) (x) (xs)), ((cons) (y)
(ys))⟩

program merge‹t› (xs : ((list‹_, t›)
(nat))) : (∀ (_ : ((list‹_, t›) (nat))) ⊸ ((list‹_, t›)
(nat))) = (ln (ys : _) ⇒ match xs as _ in _ with nil  ⇒ ys | cons x
xs0 ⇒ match ys as _ in _ with nil  ⇒ ((cons) (x) (xs0)) | cons y
ys0 ⇒ match ((lten) (x) (y)) as _ in _ with true ⇒ ((cons) (x)
(((merge) (xs0) (((cons) (y) (ys0)))))) | false ⇒ ((cons) (y)
(((merge) (((cons) (x) (xs0))) (ys0)))))

program msort‹t› (zs : ((list‹_, t›) (nat))) : ((list‹_, t›)
(nat)) = match zs as _ in _ with nil  ⇒ nil | cons x
zs ⇒ match zs as _ in _ with nil  ⇒ ((cons) (x) (nil)) | cons y
zs ⇒ let ⟨xs, ys⟩ = ((split)
(((cons) (x) (((cons) (y) (zs)))))) in ((merge) (((msort) (xs)))
(((msort) (ys))))

inductive uniq‹t› (A : Type‹t›) (a : A) : Type‹t› = Uniq of ‹t› {A : Type‹t›} {a : A} (m : A) {pf : m ≡ a} → (
(uniq‹t›) (A)
(a))

logical cmsort_ch‹t› (xs : ((list‹_, t›)
(nat))) : L = ch‹!(_ : ((uniq) (_)
(((msort) (xs))))) → end›

program cmsort_worker‹t› (n : nat) (zs : ((list‹_, t›)
(nat))) : (∀ (_ : ((cmsort_ch‹t›)
(zs))) ⊸ IO unit‹s›) = (ln (c : _) ⇒ match n as _ in _ with O ⇒ let c ⇐ (
(send c)
(((Uniq) (((msort) (zs))) (refl)))) in close c | S n0 ⇒ ((match zs as _zs_ in (∀ (_ : (
                                                            (cmsort_ch)
                                                            (_zs_))) ⊸ IO unit‹s›) with nil  ⇒ (ln (c : _) ⇒ let c ⇐ (
                                                            (send c)
                                                            (((Uniq) 
                                                             (nil) (refl)))) in close c) | cons z0
                                                            zs0 ⇒ (ln (c : _) ⇒ (
                                                            (match zs0 as _zs0_ in (∀ (_ : (
                                                             (cmsort_ch)
                                                             (((cons) 
                                                              (z0) (_zs0_))))) ⊸ IO unit‹s›) with nil  ⇒ (ln (c : _) ⇒ let c ⇐ (
                                                             (send c)
                                                             (((Uniq)
                                                              (((cons) 
                                                               (z0) (nil)))
                                                              (refl)))) in close c) | cons z1
                                                             zs1 ⇒ (ln (c : _) ⇒ (
                                                             (match (
                                                              (split)
                                                              (((cons) 
                                                               (z0)
                                                               (((cons) 
                                                                (z1) 
                                                                (zs1)))))) as _p_ in (∀ {_ : _p_ ≡ (
                                                              (split)
                                                              (((cons) 
                                                               (z0)
                                                               (((cons) 
                                                                (z1) 
                                                                (zs1))))))} ⊸ IO unit‹s›) with ⟨xs0, ys0⟩ ⇒ (ln {e : _} ⇒ let r1 ⇐ fork (r1 : (
                                                              (cmsort_ch)
                                                              (xs0))) in (
                                                              (cmsort_worker)
                                                              (n0) (xs0)
                                                              (r1)) in let r2 ⇐ fork (r2 : (
                                                              (cmsort_ch)
                                                              (ys0))) in (
                                                              (cmsort_worker)
                                                              (n0) (ys0)
                                                              (r2)) in let ⟨msg1, r1⟩ ⇐ recv r1 in let ⟨msg2, r2⟩ ⇐ recv r2 in match msg1 as _ in _ with Uniq xs1
                                                              pf1 ⇒ match msg2 as _ in _ with Uniq xs2
                                                              pf2 ⇒ let zs = (
                                                              (merge) 
                                                              (xs1)
                                                              (xs2)) in let c ⇐ (
                                                              (send c)
                                                              (((Uniq) 
                                                               (zs)
                                                               (rew [p, _ ⇒ zs ≡ let ⟨xs, ys⟩ = p in (
                                                                (merge)
                                                                (((msort)
                                                                 (xs)))
                                                                (((msort)
                                                                 (ys))))] e in rew [l, _ ⇒ zs ≡ (
                                                                (merge) 
                                                                (l)
                                                                (((msort)
                                                                 (ys0))))] pf1 in rew [l, _ ⇒ zs ≡ (
                                                                (merge) 
                                                                (xs1)
                                                                (l))] pf2 in refl)))) in let _ ⇐ close r1 in let _ ⇐ close r2 in close c))
                                                             (refl))))
                                                            (c))))
(c)))

program cmsort‹t› (zs : ((list‹_, t›) (nat))) : IO ((uniq‹t›) 
(_) (((msort) (zs)))) = let c ⇐ fork (c : ((cmsort_ch)
(zs))) in ((cmsort_worker) (O.+4) (zs)
(c)) in let ⟨msg, c⟩ ⇐ recv c in let _ ⇐ close c in return msg

program mkList‹t› (n : nat) : ((list‹_, t›)
(nat)) = match n as _ in _ with O ⇒ nil | S n0 ⇒ ((cons) (n)
(((mkList) (n0))))

program free‹› {A : U} (ls : ((list‹_, L›)
(A))) : unit‹s› = match ls as _ in _ with nil  ⇒ () | cons _
ls ⇒ ((free) (_)
(ls))

program main‹› : IO unit‹s› = let test = ((mkList‹L›)
(O.+2000000)) in let msg ⇐ ((cmsort)
(test)) in match msg as _ in _ with Uniq sorted _ ⇒ let _ = ((free) 
(_)
(sorted)) in return ()

parsing success--------------------------

inductive order_d1 : U =
| LT_c1 of : order_d1 | GT_c2 of : order_d1 | EQ_c3 of : order_d1

program andb_i1 : bool → bool → bool =
  fn (b1_v366 : bool) (b2_v367 : bool) ⇒
    match b1_v366 as __v368 in ??1 with
    | true ⇒ b2_v367 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v371 : bool) (b2_v372 : bool) ⇒
    match b1_v371 as __v373 in ??2 with
    | true ⇒ true | false ⇒ b2_v372
    end

program notb_i3 : bool → bool =
  fn (b_v375 : bool) ⇒
    match b_v375 as __v376 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program compareb_i4 : bool → bool → order_d1 =
  fn (b1_v379 : bool) (b2_v380 : bool) ⇒
    match b1_v379 as __v381 in ??4 with
    | true ⇒
      match b2_v380 as __v382 in ??6 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v380 as __v383 in ??5 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i5 : nat → nat → bool =
  fn (x_v386 : nat) (y_v387 : nat) ⇒
    match x_v386 as __v388 in ??7 with
    | O ⇒ true
    | S x_v389 ⇒
      match y_v387 as __v390 in ??8 with
      | O ⇒ false | S y_v391 ⇒ (lten_i5 x_v389 y_v391)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v394 : nat) (y_v395 : nat) ⇒ (lten_i5 x_v394.+1 y_v395)

program gten_i7 : nat → nat → bool =
  fn (x_v398 : nat) (y_v399 : nat) ⇒ (lten_i5 y_v399 x_v398)

program gtn_i8 : nat → nat → bool =
  fn (x_v402 : nat) (y_v403 : nat) ⇒ (ltn_i6 y_v403 x_v402)

program eqn_i9 : nat → nat → bool =
  fn (x_v406 : nat) (y_v407 : nat) ⇒
    match x_v406 as __v408 in ??9 with
    | O ⇒
      match y_v407 as __v409 in ??11 with
      | O ⇒ true | S __v410 ⇒ false
      end
    | S x_v411 ⇒
      match y_v407 as __v412 in ??10 with
      | O ⇒ false | S y_v413 ⇒ (eqn_i9 x_v411 y_v413)
      end
    end

program comparen_i10 : nat → nat → order_d1 =
  fn (n1_v416 : nat) (n2_v417 : nat) ⇒
    match n1_v416 as __v418 in ??12 with
    | O ⇒
      match n2_v417 as __v419 in ??14 with
      | O ⇒ EQ_c3‹› | S __v420 ⇒ LT_c1‹›
      end
    | S n1_v421 ⇒
      match n2_v417 as __v422 in ??13 with
      | O ⇒ GT_c2‹› | S n2_v423 ⇒ (comparen_i10 n1_v421 n2_v423)
      end
    end

program pred_i11 : nat → nat =
  fn (x_v425 : nat) ⇒
    match x_v425 as __v426 in ??15 with
    | O ⇒ 0 | S x_v427 ⇒ x_v427
    end

program addn_i12 : nat → nat → nat =
  fn (x_v430 : nat) (y_v431 : nat) ⇒
    match x_v430 as __v432 in ??16 with
    | O ⇒ y_v431 | S x_v433 ⇒ (addn_i12 x_v433 y_v431).+1
    end

program subn_i13 : nat → nat → nat =
  fn (x_v436 : nat) (y_v437 : nat) ⇒
    match y_v437 as __v438 in ??17 with
    | O ⇒ x_v436 | S y_v439 ⇒ (subn_i13 (pred_i11 x_v436) y_v439)
    end

program muln_i14 : nat → nat → nat =
  fn (x_v442 : nat) (y_v443 : nat) ⇒
    match x_v442 as __v444 in ??18 with
    | O ⇒ 0 | S x_v445 ⇒ (addn_i12 y_v443 (muln_i14 x_v445 y_v443))
    end

program divn_i15 : nat → nat → nat =
  fn (x_v448 : nat) (y_v449 : nat) ⇒
    match (ltn_i6 x_v448 y_v449) as __v450 in ??19 with
    | true ⇒ 0 | false ⇒ (divn_i15 (subn_i13 x_v448 y_v449) y_v449).+1
    end

program modn_i16 : nat → nat → nat =
  fn (x_v453 : nat) (y_v454 : nat) ⇒
    (subn_i13 x_v453 (muln_i14 (divn_i15 x_v453 y_v454) y_v454))

inductive between_d2 (lower_v455 : nat) (upper_v456 : nat) : L =
| Between_c4 of
    (lower_v457 : nat) (upper_v458 : nat) (n_v459 : nat)
    {pf1_v460 : (lten_i5 lower_v457 n_v459) ≡ true}
    {pf2_v461 : (lten_i5 n_v459 upper_v458) ≡ true}
    : (between_d2 lower_v457 upper_v458)

inductive char_d3 : U =
| Char_c5 of (n_v462 : nat) : char_d3

program eqc_i17 : char_d3 → char_d3 → bool =
  fn (c1_v465 : char_d3) (c2_v466 : char_d3) ⇒
    match c1_v465 as __v467 in ??22 with
    | Char_c5 n1_v468 ⇒
      match c2_v466 as __v469 in ??23 with
      | Char_c5 n2_v470 ⇒ (eqn_i9 n1_v468 n2_v470)
      end
    end

program comparec_i18 : char_d3 → char_d3 → order_d1 =
  fn (c1_v473 : char_d3) (c2_v474 : char_d3) ⇒
    match c1_v473 as __v475 in ??24 with
    | Char_c5 n1_v476 ⇒
      match c2_v474 as __v477 in ??25 with
      | Char_c5 n2_v478 ⇒ (comparen_i10 n1_v476 n2_v478)
      end
    end

inductive string_d4 : U =
| EmptyString_c6 of : string_d4
| String_c7 of (c_v479 : char_d3) (s_v480 : string_d4) : string_d4

program cats_i19 : string_d4 → string_d4 → string_d4 =
  fn (s1_v483 : string_d4) (s2_v484 : string_d4) ⇒
    match s1_v483 as __v485 in ??26 with
    | EmptyString_c6  ⇒ s2_v484
    | String_c7 c_v486 s1_v487 ⇒
      (String_c7‹› c_v486 (cats_i19 s1_v487 s2_v484))
    end

program strlen_i20 : string_d4 → nat =
  fn (s_v489 : string_d4) ⇒
    match s_v489 as __v490 in ??27 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v491 s_v492 ⇒ (strlen_i20 s_v492).+1
    end

program eqs_i21 : string_d4 → string_d4 → bool =
  fn (s1_v495 : string_d4) (s2_v496 : string_d4) ⇒
    match s1_v495 as __v497 in ??28 with
    | EmptyString_c6  ⇒
      match s2_v496 as __v498 in ??30 with
      | EmptyString_c6  ⇒ true | String_c7 __v499 __v500 ⇒ false
      end
    | String_c7 c1_v501 s1_v502 ⇒
      match s2_v496 as __v503 in ??29 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v504 s2_v505 ⇒
        (andb_i1 (eqc_i17 c1_v501 c2_v504) (eqs_i21 s1_v502 s2_v505))
      end
    end

program compares_i22 : string_d4 → string_d4 → order_d1 =
  fn (s1_v508 : string_d4) (s2_v509 : string_d4) ⇒
    match s1_v508 as __v510 in ??31 with
    | EmptyString_c6  ⇒
      match s2_v509 as __v511 in ??34 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v512 __v513 ⇒ LT_c1‹›
      end
    | String_c7 c1_v514 s1_v515 ⇒
      match s2_v509 as __v516 in ??32 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v517 s2_v518 ⇒
        match (comparec_i18 c1_v514 c2_v517) as __v519 in ??33 with
        | EQ_c3  ⇒ (compares_i22 s1_v515 s2_v518) | LT_c1  ⇒ LT_c1‹›
        | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d5 ‹s_s520, t_s521›
  (A_v522 : Type‹s_s520›) : Type‹t_s521›
=
| None_c8 of
    ‹s_s523, t_s524› (A_v525 : Type‹s_s523›)
    : (option_d5‹s_s523, t_s524› A_v525)
| Some_c9 of
    ‹s_s526, t_s527› (A_v528 : Type‹s_s526›) (x_v529 : A_v528)
    : (option_d5‹s_s526, t_s527› A_v528)

program and_then_i23 ‹s_s530, r_s531, t_s532› :
  ∀ {A_v533 : Type‹s_s530›} →
    ∀ {B_v534 : Type‹r_s531›} →
      (option_d5‹??35, t_s532› A_v533) →
        A_v533 → (option_d5‹??36, t_s532› B_v534) ⊸
          (option_d5‹??37, t_s532› B_v534)
=
  fn {A_v538 : Type‹s_s530›} {B_v539 : Type‹r_s531›}
     (opt_v540 : (option_d5‹??35, t_s532› A_v538)) ⇒
    ln (f_v541 : ??38) ⇒
      match opt_v540 as __v542 in ??39 with
      | None_c8  ⇒ None_c8‹??42, ??41›
      | Some_c9 x_v543 ⇒ (f_v541 x_v543)
      end

inductive list_d6 ‹s_s544, t_s545›
  (A_v546 : Type‹s_s544›) : Type‹t_s545›
=
| nil_c10 of
    ‹s_s547, t_s548› (A_v549 : Type‹s_s547›)
    : (list_d6‹s_s547, t_s548› A_v549)
| cons_c11 of
    ‹s_s550, t_s551› (A_v552 : Type‹s_s550›) (hd_v553 : A_v552)
    (tl_v554 : (list_d6‹s_s550, t_s551› A_v552))
    : (list_d6‹s_s550, t_s551› A_v552)

logical llen_i24 ‹s_s555, t_s556› :
  ∀ (A_v557 : Type‹s_s555›) →
    (list_d6‹s_s555, t_s556› A_v557) → nat
=
  fn (A_v559 : Type‹s_s555›)
     (xs_v560 : (list_d6‹s_s555, t_s556› A_v559)) ⇒
    match xs_v560 as __v561 in ??43 with
    | nil_c10  ⇒ 0
    | cons_c11 x_v562 xs_v563 ⇒ (llen_i24‹??46, ??45› ??44 xs_v563).+1
    end

program len_i25 ‹s_s564, t_s565› :
  ∀ {A_v566 : Type‹s_s564›} →
    (list_d6‹??47, t_s565› A_v566) →
      nat ⊗ (list_d6‹??48, t_s565› A_v566)
=
  fn {A_v569 : Type‹s_s564›}
     (xs_v570 : (list_d6‹??47, t_s565› A_v569)) ⇒
    match xs_v570 as __v571 in ??49 with
    | nil_c10  ⇒ ⟨0, nil_c10‹??59, ??58›⟩
    | cons_c11 x_v572 xs_v573 ⇒
      match (len_i25‹??52, ??51› ??50 xs_v573) as __v574 in ??53 with
      | ⟨n_v575, xs_v576⟩ ⇒
        ⟨n_v575.+1, (cons_c11‹??56, ??55› x_v572 xs_v576)⟩
      end
    end

program append_i26 ‹s_s577, t_s578› :
  ∀ {A_v579 : Type‹s_s577›} →
    (list_d6‹??60, t_s578› A_v579) →
      (list_d6‹??61, t_s578› A_v579) ⊸ (list_d6‹??63, ??62› A_v579)
=
  fn {A_v582 : Type‹s_s577›}
     (xs_v583 : (list_d6‹??60, t_s578› A_v582)) ⇒
    ln (ys_v584 : ??64) ⇒
      match xs_v583 as __v585 in ??65 with
      | nil_c10  ⇒ ys_v584
      | cons_c11 x_v586 xs_v587 ⇒
        (cons_c11‹??71, ??70›
          x_v586 (append_i26‹??68, ??67› ??66 xs_v587 ys_v584))
      end

logical stdin_rec_i27 : unit‹U› → proto =
  fn (__v589 : unit‹U›) ⇒
    ⇑(b_v590 : bool) ⇒
      match b_v590 as __v591 in ??72 with
      | true ⇒ ⇓(__v592 : string_d4) ⇒ (stdin_rec_i27 ())
      | false ⇒ end
      end

logical stdout_rec_i28 : unit‹U› → proto =
  fn (__v594 : unit‹U›) ⇒
    ⇑(b_v595 : bool) ⇒
      match b_v595 as __v596 in ??73 with
      | true ⇒ ⇑(__v597 : string_d4) ⇒ (stdout_rec_i28 ())
      | false ⇒ end
      end

logical stderr_rec_i29 : unit‹U› → proto =
  fn (__v599 : unit‹U›) ⇒
    ⇑(b_v600 : bool) ⇒
      match b_v600 as __v601 in ??74 with
      | true ⇒ ⇑(__v602 : string_d4) ⇒ (stderr_rec_i29 ())
      | false ⇒ end
      end

logical stdin_t_i30 : proto = (stdin_rec_i27 ())

logical stdout_t_i31 : proto = (stdout_rec_i28 ())

logical stderr_t_i32 : proto = (stderr_rec_i29 ())

program readline_i33 : unit‹U› → IO string_d4 =
  fn (__v604 : unit‹U›) ⇒
    let ch_v605 ⇐ open stdin in
    let ch_v606 ⇐ (send ch_v605 true) in
    let __v607 ⇐ recv ch_v606 in
    match __v607 as __v608 in ??75 with
    | ⟨s_v609, ch_v610⟩ ⇒
      let ch_v611 ⇐ (send ch_v610 false) in
      let __v612 ⇐ close ch_v611 in return s_v609
    end

program print_i34 : string_d4 → IO unit‹U› =
  fn (s_v614 : string_d4) ⇒
    let ch_v615 ⇐ open stdout in
    let ch_v616 ⇐ (send ch_v615 true) in
    let ch_v617 ⇐ (send ch_v616 s_v614) in
    let ch_v618 ⇐ (send ch_v617 false) in close ch_v618

program prerr_i35 : string_d4 → IO unit‹U› =
  fn (s_v620 : string_d4) ⇒
    let ch_v621 ⇐ open stderr in
    let ch_v622 ⇐ (send ch_v621 true) in
    let ch_v623 ⇐ (send ch_v622 s_v620) in
    let ch_v624 ⇐ (send ch_v623 false) in close ch_v624

program digits_i36 : (list_d6‹??76, U› ??77) =
  (cons_c11‹??110, ??109›
    "0"
    (cons_c11‹??107, ??106›
      "1"
      (cons_c11‹??104, ??103›
        "2"
        (cons_c11‹??101, ??100›
          "3"
          (cons_c11‹??98, ??97›
            "4"
            (cons_c11‹??95, ??94›
              "5"
              (cons_c11‹??92, ??91›
                "6"
                (cons_c11‹??89, ??88›
                  "7"
                  (cons_c11‹??86, ??85›
                    "8"
                    (cons_c11‹??83, ??82› "9" nil_c10‹??80, ??79›))))))))))

program get_at_i37 :
  ∀ {A_v625 : U} →
    nat → (list_d6‹??111, U› A_v625) → A_v625 → A_v625
=
  fn {A_v629 : U} (n_v630 : nat) (xs_v631 : (list_d6‹??111, U› A_v629))
     (a_v632 : A_v629) ⇒
    match n_v630 as __v633 in ??112 with
    | O ⇒
      match xs_v631 as __v634 in ??115 with
      | nil_c10  ⇒ a_v632 | cons_c11 x_v635 __v636 ⇒ x_v635
      end
    | S n_v637 ⇒
      match xs_v631 as __v638 in ??113 with
      | nil_c10  ⇒ a_v632
      | cons_c11 __v639 xs_v640 ⇒ (get_at_i37 ??114 n_v637 xs_v640 a_v632)
      end
    end

program string_of_digit_i38 : nat → string_d4 =
  fn (n_v642 : nat) ⇒
    (get_at_i37 ??116 n_v642 digits_i36 EmptyString_c6‹›)

program string_of_nat_i39 : nat → string_d4 =
  fn (n_v644 : nat) ⇒
    let s_v645 = (string_of_digit_i38 (modn_i16 n_v644 10)) in
    let n_v646 = (divn_i15 n_v644 10) in
    match (ltn_i6 0 n_v646) as __v647 in ??117 with
    | true ⇒ (cats_i19 (string_of_nat_i39 n_v646) s_v645)
    | false ⇒ s_v645
    end

program digit_of_char_i40 : char_d3 → (option_d5‹??118, L› nat) =
  fn (c_v649 : char_d3) ⇒
    match (eqc_i17 c_v649 '0') as __v650 in ??119 with
    | true ⇒ (Some_c9‹??161, ??160› 0)
    | false ⇒
      match (eqc_i17 c_v649 '1') as __v651 in ??120 with
      | true ⇒ (Some_c9‹??158, ??157› 1)
      | false ⇒
        match (eqc_i17 c_v649 '2') as __v652 in ??121 with
        | true ⇒ (Some_c9‹??155, ??154› 2)
        | false ⇒
          match (eqc_i17 c_v649 '3') as __v653 in ??122 with
          | true ⇒ (Some_c9‹??152, ??151› 3)
          | false ⇒
            match (eqc_i17 c_v649 '4') as __v654 in ??123 with
            | true ⇒ (Some_c9‹??149, ??148› 4)
            | false ⇒
              match (eqc_i17 c_v649 '5') as __v655 in ??124 with
              | true ⇒ (Some_c9‹??146, ??145› 5)
              | false ⇒
                match (eqc_i17 c_v649 '6') as __v656 in ??125 with
                | true ⇒ (Some_c9‹??143, ??142› 6)
                | false ⇒
                  match (eqc_i17 c_v649 '7') as __v657 in ??126 with
                  | true ⇒ (Some_c9‹??140, ??139› 7)
                  | false ⇒
                    match (eqc_i17 c_v649 '8') as __v658 in ??127 with
                    | true ⇒ (Some_c9‹??137, ??136› 8)
                    | false ⇒
                      match (eqc_i17 c_v649 '9') as __v659 in ??128 with
                      | true ⇒ (Some_c9‹??134, ??133› 9)
                      | false ⇒ None_c8‹??131, ??130›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i41 :
  string_d4 → nat → (option_d5‹??162, L› nat)
=
  fn (s_v662 : string_d4) (acc_v663 : nat) ⇒
    match s_v662 as __v664 in ??163 with
    | EmptyString_c6  ⇒ (Some_c9‹??170, ??169› acc_v663)
    | String_c7 c_v665 s_v666 ⇒
      match (digit_of_char_i40 c_v665) as __v667 in ??164 with
      | None_c8  ⇒ None_c8‹??167, ??166›
      | Some_c9 n_v668 ⇒
        (nat_of_string_loop_i41
          s_v666 (addn_i12 (muln_i14 acc_v663 10) n_v668))
      end
    end

program nat_of_string_i42 : string_d4 → (option_d5‹??171, L› nat) =
  fn (s_v670 : string_d4) ⇒ (nat_of_string_loop_i41 s_v670 0)

program split_i43 ‹t_s671› :
  (list_d6‹??172, t_s671› nat) →
    (list_d6‹??173, t_s671› nat) ⊗ (list_d6‹??174, t_s671› nat)
=
  fn (zs_v674 : (list_d6‹??172, t_s671› nat)) ⇒
    match zs_v674 as __v675 in ??175 with
    | nil_c10  ⇒ ⟨nil_c10‹??196, ??195›, nil_c10‹??199, ??198›⟩
    | cons_c11 x_v676 zs_v677 ⇒
      match zs_v677 as __v678 in ??176 with
      | nil_c10  ⇒
        ⟨(cons_c11‹??190, ??189› x_v676 nil_c10‹??187, ??186›), nil_c10‹??193,
        ??192›⟩
      | cons_c11 y_v679 zs_v680 ⇒
        let __v681 = (split_i43‹??177› zs_v680) in
        match __v681 as __v682 in ??184 with
        | ⟨xs_v683, ys_v684⟩ ⇒
          ⟨(cons_c11‹??180, ??179› x_v676 xs_v683), (cons_c11‹??183,
                                                          ??182›
                                                            y_v679 ys_v684)⟩
        end
      end
    end

program merge_i44 ‹t_s685› :
  (list_d6‹??200, t_s685› nat) →
    (list_d6‹??201, t_s685› nat) ⊸ (list_d6‹??202, t_s685› nat)
=
  fn (xs_v688 : (list_d6‹??200, t_s685› nat)) ⇒
    ln (ys_v689 : ??203) ⇒
      match xs_v688 as __v690 in ??204 with
      | nil_c10  ⇒ ys_v689
      | cons_c11 x_v691 xs0_v692 ⇒
        match ys_v689 as __v693 in ??205 with
        | nil_c10  ⇒ (cons_c11‹??223, ??222› x_v691 xs0_v692)
        | cons_c11 y_v694 ys0_v695 ⇒
          match (lten_i5 x_v691 y_v694) as __v696 in ??206 with
          | true ⇒
            (cons_c11‹??220, ??219›
              x_v691
              (merge_i44‹??217›
                xs0_v692 (cons_c11‹??216, ??215› y_v694 ys0_v695)))
          | false ⇒
            (cons_c11‹??213, ??212›
              y_v694
              (merge_i44‹??210›
                (cons_c11‹??209, ??208› x_v691 xs0_v692) ys0_v695))
          end
        end
      end

program msort_i45 ‹t_s697› :
  (list_d6‹??224, t_s697› nat) → (list_d6‹??225, t_s697› nat)
=
  fn (zs_v699 : (list_d6‹??224, t_s697› nat)) ⇒
    match zs_v699 as __v700 in ??226 with
    | nil_c10  ⇒ nil_c10‹??247, ??246›
    | cons_c11 x_v701 zs_v702 ⇒
      match zs_v702 as __v703 in ??227 with
      | nil_c10  ⇒
        (cons_c11‹??244, ??243› x_v701 nil_c10‹??241, ??240›)
      | cons_c11 y_v704 zs_v705 ⇒
        let __v706 =
          (split_i43‹??234›
            (cons_c11‹??233, ??232›
              x_v701 (cons_c11‹??230, ??229› y_v704 zs_v705)))
        in
        match __v706 as __v707 in ??238 with
        | ⟨xs_v708, ys_v709⟩ ⇒
          (merge_i44‹??237›
            (msort_i45‹??236› xs_v708) (msort_i45‹??235› ys_v709))
        end
      end
    end

inductive uniq_d7 ‹t_s710›
  (A_v711 : Type‹t_s710›) (a_v712 : A_v711) : Type‹t_s710›
=
| Uniq_c12 of
    ‹t_s713› (A_v714 : Type‹t_s713›) (a_v715 : A_v714)
    (m_v716 : A_v714) {pf_v717 : m_v716 ≡ a_v715}
    : (uniq_d7‹t_s713› A_v714 a_v715)

logical cmsort_ch_i46 ‹t_s718› : (list_d6‹??249, t_s718› nat) → L =
  fn (xs_v720 : (list_d6‹??249, t_s718› nat)) ⇒
    ch⟨⇑(__v721 :
           (uniq_d7‹??252› ??251 (msort_i45‹??250› xs_v720))) ⇒ end⟩

program cmsort_worker_i47 ‹t_s722› :
  nat →
    ∀ (zs_v724 : (list_d6‹??253, t_s722› nat)) →
      (cmsort_ch_i46‹t_s722› zs_v724) ⊸ IO unit‹U›
=
  fn (n_v726 : nat) (zs_v727 : (list_d6‹??253, t_s722› nat)) ⇒
    ln (c_v728 : ??254) ⇒
      match n_v726 as __v729 in ??255 with
      | O ⇒
        let c_v730 ⇐
          (send c_v728
            (Uniq_c12‹??326› (msort_i45‹??323› zs_v727) refl ??322))
        in close c_v730
      | S n0_v731 ⇒
        (match zs_v727 as _zs__v732 in
           (cmsort_ch_i46‹??256› _zs__v732) ⊸ IO unit‹U› with
         | nil_c10  ⇒
           ln (c_v734 : ??314) ⇒
             let c_v735 ⇐
               (send c_v734
                 (Uniq_c12‹??321› nil_c10‹??318, ??317› refl ??315))
             in close c_v735
         | cons_c11 z0_v736 zs0_v737 ⇒
           ln (c_v738 : ??257) ⇒
             (match zs0_v737 as _zs0__v739 in
                (cmsort_ch_i46‹??261›
                  (cons_c11‹??260, ??259› z0_v736 _zs0__v739)) ⊸
                  IO unit‹U› with
              | nil_c10  ⇒
                ln (c_v741 : ??303) ⇒
                  let c_v742 ⇐
                    (send c_v741
                      (Uniq_c12‹??313›
                        (cons_c11‹??310, ??309›
                          z0_v736 nil_c10‹??307, ??306›)
                        refl ??304))
                  in close c_v742
              | cons_c11 z1_v743 zs1_v744 ⇒
                ln (c_v745 : ??262) ⇒
                  (match (split_i43‹??269›
                           (cons_c11‹??268, ??267›
                             z0_v736
                             (cons_c11‹??265, ??264› z1_v743 zs1_v744))) as _p__v746 in
                     {_p__v746 ≡
                        (split_i43‹??276›
                          (cons_c11‹??275, ??274›
                            z0_v736
                            (cons_c11‹??272, ??271› z1_v743 zs1_v744)))} ⊸
                       IO unit‹U› with
                   | ⟨xs0_v748, ys0_v749⟩ ⇒
                     ln {e_v750 : ??278} ⇒
                       let r1_v751 ⇐
                         fork (r1_v752 : (cmsort_ch_i46‹??279› xs0_v748))
                         in
                           (cmsort_worker_i47‹??280›
                             n0_v731 xs0_v748 r1_v752)
                       in
                       let r2_v753 ⇐
                         fork (r2_v754 : (cmsort_ch_i46‹??281› ys0_v749))
                         in
                           (cmsort_worker_i47‹??282›
                             n0_v731 ys0_v749 r2_v754)
                       in
                       let __v755 ⇐ recv r1_v751 in
                       match __v755 as __v756 in ??301 with
                       | ⟨msg1_v757, r1_v758⟩ ⇒
                         let __v759 ⇐ recv r2_v753 in
                         match __v759 as __v760 in ??300 with
                         | ⟨msg2_v761, r2_v762⟩ ⇒
                           match msg1_v757 as __v763 in ??283 with
                           | Uniq_c12 xs1_v764 pf1_v765 ⇒
                             match msg2_v761 as __v766 in ??284 with
                             | Uniq_c12 xs2_v767 pf2_v768 ⇒
                               let zs_v769 =
                                 (merge_i44‹??285› xs1_v764 xs2_v767)
                               in
                               let c_v770 ⇐
                                 (send c_v745
                                   (Uniq_c12‹??299›
                                     zs_v769
                                     rew [p_v771, __v772 ⇒
                                       zs_v769 ≡
                                         let __v773 = p_v771 in
                                         match __v773 as __v774 in ??295 with
                                         | ⟨xs_v775, ys_v776⟩ ⇒
                                           (merge_i44‹??294›
                                             (msort_i45‹??293› xs_v775)
                                             (msort_i45‹??292› ys_v776))
                                         end]
                                       e_v750 in
                                     rew [l_v777, __v778 ⇒
                                       zs_v769 ≡
                                         (merge_i44‹??290›
                                           l_v777
                                           (msort_i45‹??289› ys0_v749))]
                                       pf1_v765 in
                                     rew [l_v779, __v780 ⇒
                                       zs_v769 ≡
                                         (merge_i44‹??287›
                                           xs1_v764 l_v779)]
                                       pf2_v768 in
                                     refl ??286))
                               in
                               let __v781 ⇐ close r1_v758 in
                               let __v782 ⇐ close r2_v762 in close c_v770
                             end
                           end
                         end
                       end
                   end refl ??302)
              end c_v738)
         end c_v728)
      end

program cmsort_i48 ‹t_s783› :
  ∀ (zs_v784 : (list_d6‹??327, t_s783› nat)) →
    IO (uniq_d7‹t_s783› ??329 (msort_i45‹??328› zs_v784))
=
  fn (zs_v785 : (list_d6‹??327, t_s783› nat)) ⇒
    let c_v786 ⇐
      fork (c_v787 : (cmsort_ch_i46‹??330› zs_v785)) in
        (cmsort_worker_i47‹??331› 4 zs_v785 c_v787)
    in
    let __v788 ⇐ recv c_v786 in
    match __v788 as __v789 in ??332 with
    | ⟨msg_v790, c_v791⟩ ⇒
      let __v792 ⇐ close c_v791 in return msg_v790
    end

program mkList_i49 ‹t_s793› : nat → (list_d6‹??333, t_s793› nat) =
  fn (n_v795 : nat) ⇒
    match n_v795 as __v796 in ??334 with
    | O ⇒ nil_c10‹??341, ??340›
    | S n0_v797 ⇒
      (cons_c11‹??338, ??337› n_v795 (mkList_i49‹??335› n0_v797))
    end

program free_i50 :
  ∀ {A_v798 : U} → (list_d6‹??342, L› A_v798) → unit‹U›
=
  fn {A_v800 : U} (ls_v801 : (list_d6‹??342, L› A_v800)) ⇒
    match ls_v801 as __v802 in ??343 with
    | nil_c10  ⇒ () | cons_c11 __v803 ls_v804 ⇒ (free_i50 ??344 ls_v804)
    end

program main_i51 : IO unit‹U› =
  let test_v805 = (mkList_i49‹L› 2000000) in
  let msg_v806 ⇐ (cmsort_i48‹??345› test_v805) in
  match msg_v806 as __v807 in ??346 with
  | Uniq_c12 sorted_v808 __v809 ⇒
    let __v810 = (free_i50 ??347 sorted_v808) in return ()
  end

trans01 success--------------------------

inductive order_d1 : U =
| LT_c1 of : order_d1 | GT_c2 of : order_d1 | EQ_c3 of : order_d1

program andb_i1 : bool → bool → bool =
  fn (b1_v83589 : bool) (b2_v83590 : bool) ⇒
    match b1_v83589 as __v83591 in bool with
    | true ⇒ b2_v83590 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v83594 : bool) (b2_v83595 : bool) ⇒
    match b1_v83594 as __v83596 in bool with
    | true ⇒ true | false ⇒ b2_v83595
    end

program notb_i3 : bool → bool =
  fn (b_v83598 : bool) ⇒
    match b_v83598 as __v83599 in bool with
    | true ⇒ false | false ⇒ true
    end

program compareb_i4 : bool → bool → order_d1 =
  fn (b1_v83602 : bool) (b2_v83603 : bool) ⇒
    match b1_v83602 as __v83604 in order_d1 with
    | true ⇒
      match b2_v83603 as __v83605 in order_d1 with
      | true ⇒ EQ_c3‹› | false ⇒ GT_c2‹›
      end
    | false ⇒
      match b2_v83603 as __v83606 in order_d1 with
      | true ⇒ LT_c1‹› | false ⇒ EQ_c3‹›
      end
    end

program lten_i5 : nat → nat → bool =
  fn (x_v83609 : nat) (y_v83610 : nat) ⇒
    match x_v83609 as __v83611 in bool with
    | O ⇒ true
    | S x_v83612 ⇒
      match y_v83610 as __v83613 in bool with
      | O ⇒ false | S y_v83614 ⇒ (lten_i5 x_v83612 y_v83614)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v83617 : nat) (y_v83618 : nat) ⇒ (lten_i5 x_v83617.+1 y_v83618)

program gten_i7 : nat → nat → bool =
  fn (x_v83621 : nat) (y_v83622 : nat) ⇒ (lten_i5 y_v83622 x_v83621)

program gtn_i8 : nat → nat → bool =
  fn (x_v83625 : nat) (y_v83626 : nat) ⇒ (ltn_i6 y_v83626 x_v83625)

program eqn_i9 : nat → nat → bool =
  fn (x_v83629 : nat) (y_v83630 : nat) ⇒
    match x_v83629 as __v83631 in bool with
    | O ⇒
      match y_v83630 as __v83632 in bool with
      | O ⇒ true | S __v83633 ⇒ false
      end
    | S x_v83634 ⇒
      match y_v83630 as __v83635 in bool with
      | O ⇒ false | S y_v83636 ⇒ (eqn_i9 x_v83634 y_v83636)
      end
    end

program comparen_i10 : nat → nat → order_d1 =
  fn (n1_v83639 : nat) (n2_v83640 : nat) ⇒
    match n1_v83639 as __v83641 in order_d1 with
    | O ⇒
      match n2_v83640 as __v83642 in order_d1 with
      | O ⇒ EQ_c3‹› | S __v83643 ⇒ LT_c1‹›
      end
    | S n1_v83644 ⇒
      match n2_v83640 as __v83645 in order_d1 with
      | O ⇒ GT_c2‹›
      | S n2_v83646 ⇒ (comparen_i10 n1_v83644 n2_v83646)
      end
    end

program pred_i11 : nat → nat =
  fn (x_v83648 : nat) ⇒
    match x_v83648 as __v83649 in nat with
    | O ⇒ 0 | S x_v83650 ⇒ x_v83650
    end

program addn_i12 : nat → nat → nat =
  fn (x_v83653 : nat) (y_v83654 : nat) ⇒
    match x_v83653 as __v83655 in nat with
    | O ⇒ y_v83654 | S x_v83656 ⇒ (addn_i12 x_v83656 y_v83654).+1
    end

program subn_i13 : nat → nat → nat =
  fn (x_v83659 : nat) (y_v83660 : nat) ⇒
    match y_v83660 as __v83661 in nat with
    | O ⇒ x_v83659 | S y_v83662 ⇒ (subn_i13 (pred_i11 x_v83659) y_v83662)
    end

program muln_i14 : nat → nat → nat =
  fn (x_v83665 : nat) (y_v83666 : nat) ⇒
    match x_v83665 as __v83667 in nat with
    | O ⇒ 0
    | S x_v83668 ⇒ (addn_i12 y_v83666 (muln_i14 x_v83668 y_v83666))
    end

program divn_i15 : nat → nat → nat =
  fn (x_v83671 : nat) (y_v83672 : nat) ⇒
    match (ltn_i6 x_v83671 y_v83672) as __v83673 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i15 (subn_i13 x_v83671 y_v83672) y_v83672).+1
    end

program modn_i16 : nat → nat → nat =
  fn (x_v83676 : nat) (y_v83677 : nat) ⇒
    (subn_i13 x_v83676 (muln_i14 (divn_i15 x_v83676 y_v83677) y_v83677))

inductive between_d2 (lower_v83678 : nat) (upper_v83679 : nat) : L =
| Between_c4 of
    (lower_v83680 : nat) (upper_v83681 : nat) (n_v83682 : nat)
    {pf1_v83683 : (lten_i5 lower_v83680 n_v83682) ≡ true}
    {pf2_v83684 : (lten_i5 n_v83682 upper_v83681) ≡ true}
    : (between_d2 lower_v83680 upper_v83681)

inductive char_d3 : U =
| Char_c5 of (n_v83685 : nat) : char_d3

program eqc_i17 : char_d3 → char_d3 → bool =
  fn (c1_v83688 : char_d3) (c2_v83689 : char_d3) ⇒
    match c1_v83688 as __v83690 in bool with
    | Char_c5 n1_v83691 ⇒
      match c2_v83689 as __v83692 in bool with
      | Char_c5 n2_v83693 ⇒ (eqn_i9 n1_v83691 n2_v83693)
      end
    end

program comparec_i18 : char_d3 → char_d3 → order_d1 =
  fn (c1_v83696 : char_d3) (c2_v83697 : char_d3) ⇒
    match c1_v83696 as __v83698 in order_d1 with
    | Char_c5 n1_v83699 ⇒
      match c2_v83697 as __v83700 in order_d1 with
      | Char_c5 n2_v83701 ⇒ (comparen_i10 n1_v83699 n2_v83701)
      end
    end

inductive string_d4 : U =
| EmptyString_c6 of : string_d4
| String_c7 of (c_v83702 : char_d3) (s_v83703 : string_d4) : string_d4

program cats_i19 : string_d4 → string_d4 → string_d4 =
  fn (s1_v83706 : string_d4) (s2_v83707 : string_d4) ⇒
    match s1_v83706 as __v83708 in string_d4 with
    | EmptyString_c6  ⇒ s2_v83707
    | String_c7 c_v83709 s1_v83710 ⇒
      (String_c7‹› c_v83709 (cats_i19 s1_v83710 s2_v83707))
    end

program strlen_i20 : string_d4 → nat =
  fn (s_v83712 : string_d4) ⇒
    match s_v83712 as __v83713 in nat with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v83714 s_v83715 ⇒ (strlen_i20 s_v83715).+1
    end

program eqs_i21 : string_d4 → string_d4 → bool =
  fn (s1_v83718 : string_d4) (s2_v83719 : string_d4) ⇒
    match s1_v83718 as __v83720 in bool with
    | EmptyString_c6  ⇒
      match s2_v83719 as __v83721 in bool with
      | EmptyString_c6  ⇒ true | String_c7 __v83722 __v83723 ⇒ false
      end
    | String_c7 c1_v83724 s1_v83725 ⇒
      match s2_v83719 as __v83726 in bool with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v83727 s2_v83728 ⇒
        (andb_i1 (eqc_i17 c1_v83724 c2_v83727) (eqs_i21 s1_v83725 s2_v83728))
      end
    end

program compares_i22 : string_d4 → string_d4 → order_d1 =
  fn (s1_v83731 : string_d4) (s2_v83732 : string_d4) ⇒
    match s1_v83731 as __v83733 in order_d1 with
    | EmptyString_c6  ⇒
      match s2_v83732 as __v83734 in order_d1 with
      | EmptyString_c6  ⇒ EQ_c3‹›
      | String_c7 __v83735 __v83736 ⇒ LT_c1‹›
      end
    | String_c7 c1_v83737 s1_v83738 ⇒
      match s2_v83732 as __v83739 in order_d1 with
      | EmptyString_c6  ⇒ GT_c2‹›
      | String_c7 c2_v83740 s2_v83741 ⇒
        match (comparec_i18 c1_v83737 c2_v83740) as __v83742 in order_d1 with
        | EQ_c3  ⇒ (compares_i22 s1_v83738 s2_v83741)
        | LT_c1  ⇒ LT_c1‹› | GT_c2  ⇒ GT_c2‹›
        end
      end
    end

inductive option_d5 ‹s_s83743, t_s83744›
  (A_v83745 : Type‹s_s83743›) : Type‹t_s83744›
=
| None_c8 of
    ‹s_s83746, t_s83747› (A_v83748 : Type‹s_s83746›)
    : (option_d5‹s_s83746, t_s83747› A_v83748)
| Some_c9 of
    ‹s_s83749, t_s83750› (A_v83751 : Type‹s_s83749›)
    (x_v83752 : A_v83751) : (option_d5‹s_s83749, t_s83750› A_v83751)

program and_then_i23 ‹s_s83753, r_s83754, t_s83755› :
  ∀ {A_v83756 : Type‹s_s83753›} →
    ∀ {B_v83757 : Type‹r_s83754›} →
      (option_d5‹s_s83753, t_s83755› A_v83756) →
        A_v83756 → (option_d5‹r_s83754, t_s83755› B_v83757) ⊸
          (option_d5‹r_s83754, t_s83755› B_v83757)
=
  fn {A_v83761 : Type‹s_s83753›} {B_v83762 : Type‹r_s83754›}
     (opt_v83763 : (option_d5‹s_s83753, t_s83755› A_v83761)) ⇒
    ln (f_v83764 : A_v83761 → (option_d5‹r_s83754, t_s83755› B_v83762)) ⇒
      match opt_v83763 as __v83766 in
        (option_d5‹r_s83754, t_s83755› B_v83762) with
      | None_c8  ⇒ None_c8‹r_s83754, t_s83755›
      | Some_c9 x_v83767 ⇒ (f_v83764 x_v83767)
      end

inductive list_d6 ‹s_s83768, t_s83769›
  (A_v83770 : Type‹s_s83768›) : Type‹t_s83769›
=
| nil_c10 of
    ‹s_s83771, t_s83772› (A_v83773 : Type‹s_s83771›)
    : (list_d6‹s_s83771, t_s83772› A_v83773)
| cons_c11 of
    ‹s_s83774, t_s83775› (A_v83776 : Type‹s_s83774›)
    (hd_v83777 : A_v83776)
    (tl_v83778 : (list_d6‹s_s83774, t_s83775› A_v83776))
    : (list_d6‹s_s83774, t_s83775› A_v83776)

logical llen_i24 ‹s_s83779, t_s83780› :
  ∀ (A_v83781 : Type‹s_s83779›) →
    (list_d6‹s_s83779, t_s83780› A_v83781) → nat
=
  fn (A_v83783 : Type‹s_s83779›)
     (xs_v83784 : (list_d6‹s_s83779, t_s83780› A_v83783)) ⇒
    match xs_v83784 as __v83785 in nat with
    | nil_c10  ⇒ 0
    | cons_c11 x_v83786 xs_v83787 ⇒
      (llen_i24‹s_s83779, t_s83780› A_v83783 xs_v83787).+1
    end

program len_i25 ‹s_s83788, t_s83789› :
  ∀ {A_v83790 : Type‹s_s83788›} →
    (list_d6‹s_s83788, t_s83789› A_v83790) →
      nat ⊗ (list_d6‹s_s83788, t_s83789› A_v83790)
=
  fn {A_v83793 : Type‹s_s83788›}
     (xs_v83794 : (list_d6‹s_s83788, t_s83789› A_v83793)) ⇒
    match xs_v83794 as __v83795 in
      nat ⊗ (list_d6‹s_s83788, t_s83789› A_v83793) with
    | nil_c10  ⇒ ⟨0, nil_c10‹s_s83788, t_s83789›⟩
    | cons_c11 x_v83797 xs_v83798 ⇒
      match (len_i25‹s_s83788, t_s83789› A_v83793 xs_v83798) as __v83799 in
        nat ⊗ (list_d6‹s_s83788, t_s83789› A_v83793) with
      | ⟨n_v83801, xs_v83802⟩ ⇒
        ⟨n_v83801.+1, (cons_c11‹s_s83788, t_s83789› x_v83797 xs_v83802)⟩
      end
    end

program append_i26 ‹s_s83803, t_s83804› :
  ∀ {A_v83805 : Type‹s_s83803›} →
    (list_d6‹s_s83803, t_s83804› A_v83805) →
      (list_d6‹s_s83803, t_s83804› A_v83805) ⊸
        (list_d6‹s_s83803, t_s83804› A_v83805)
=
  fn {A_v83808 : Type‹s_s83803›}
     (xs_v83809 : (list_d6‹s_s83803, t_s83804› A_v83808)) ⇒
    ln (ys_v83810 : (list_d6‹s_s83803, t_s83804› A_v83808)) ⇒
      match xs_v83809 as __v83811 in
        (list_d6‹s_s83803, t_s83804› A_v83808) with
      | nil_c10  ⇒ ys_v83810
      | cons_c11 x_v83812 xs_v83813 ⇒
        (cons_c11‹s_s83803, t_s83804›
          x_v83812
          (append_i26‹s_s83803, t_s83804› A_v83808 xs_v83813 ys_v83810))
      end

logical stdin_rec_i27 : unit‹U› → proto =
  fn (__v83815 : unit‹U›) ⇒
    ⇑(b_v83816 : bool) ⇒
      match b_v83816 as __v83817 in proto with
      | true ⇒ ⇓(__v83818 : string_d4) ⇒ (stdin_rec_i27 ())
      | false ⇒ end
      end

logical stdout_rec_i28 : unit‹U› → proto =
  fn (__v83820 : unit‹U›) ⇒
    ⇑(b_v83821 : bool) ⇒
      match b_v83821 as __v83822 in proto with
      | true ⇒ ⇑(__v83823 : string_d4) ⇒ (stdout_rec_i28 ())
      | false ⇒ end
      end

logical stderr_rec_i29 : unit‹U› → proto =
  fn (__v83825 : unit‹U›) ⇒
    ⇑(b_v83826 : bool) ⇒
      match b_v83826 as __v83827 in proto with
      | true ⇒ ⇑(__v83828 : string_d4) ⇒ (stderr_rec_i29 ())
      | false ⇒ end
      end

logical stdin_t_i30 : proto = (stdin_rec_i27 ())

logical stdout_t_i31 : proto = (stdout_rec_i28 ())

logical stderr_t_i32 : proto = (stderr_rec_i29 ())

program readline_i33 : unit‹U› → IO string_d4 =
  fn (__v83830 : unit‹U›) ⇒
    let ch_v83831 ⇐ open stdin in
    let ch_v83832 ⇐ (send ch_v83831 true) in
    let __v83833 ⇐ recv ch_v83832 in
    match __v83833 as __v83834 in IO string_d4 with
    | ⟨s_v83835, ch_v83836⟩ ⇒
      let ch_v83837 ⇐ (send ch_v83836 false) in
      let __v83838 ⇐ close ch_v83837 in return s_v83835
    end

program print_i34 : string_d4 → IO unit‹U› =
  fn (s_v83840 : string_d4) ⇒
    let ch_v83841 ⇐ open stdout in
    let ch_v83842 ⇐ (send ch_v83841 true) in
    let ch_v83843 ⇐ (send ch_v83842 s_v83840) in
    let ch_v83844 ⇐ (send ch_v83843 false) in close ch_v83844

program prerr_i35 : string_d4 → IO unit‹U› =
  fn (s_v83846 : string_d4) ⇒
    let ch_v83847 ⇐ open stderr in
    let ch_v83848 ⇐ (send ch_v83847 true) in
    let ch_v83849 ⇐ (send ch_v83848 s_v83846) in
    let ch_v83850 ⇐ (send ch_v83849 false) in close ch_v83850

program digits_i36 : (list_d6‹U, U› string_d4) =
  (cons_c11‹U, U›
    "0"
    (cons_c11‹U, U›
      "1"
      (cons_c11‹U, U›
        "2"
        (cons_c11‹U, U›
          "3"
          (cons_c11‹U, U›
            "4"
            (cons_c11‹U, U›
              "5"
              (cons_c11‹U, U›
                "6"
                (cons_c11‹U, U›
                  "7"
                  (cons_c11‹U, U›
                    "8" (cons_c11‹U, U› "9" nil_c10‹U, U›))))))))))

program get_at_i37 :
  ∀ {A_v83851 : U} →
    nat → (list_d6‹U, U› A_v83851) → A_v83851 → A_v83851
=
  fn {A_v83855 : U} (n_v83856 : nat)
     (xs_v83857 : (list_d6‹U, U› A_v83855)) (a_v83858 : A_v83855) ⇒
    match n_v83856 as __v83859 in A_v83855 with
    | O ⇒
      match xs_v83857 as __v83860 in A_v83855 with
      | nil_c10  ⇒ a_v83858 | cons_c11 x_v83861 __v83862 ⇒ x_v83861
      end
    | S n_v83863 ⇒
      match xs_v83857 as __v83864 in A_v83855 with
      | nil_c10  ⇒ a_v83858
      | cons_c11 __v83865 xs_v83866 ⇒
        (get_at_i37 A_v83855 n_v83863 xs_v83866 a_v83858)
      end
    end

program string_of_digit_i38 : nat → string_d4 =
  fn (n_v83868 : nat) ⇒
    (get_at_i37 string_d4 n_v83868 digits_i36 EmptyString_c6‹›)

program string_of_nat_i39 : nat → string_d4 =
  fn (n_v83870 : nat) ⇒
    let s_v83871 = (string_of_digit_i38 (modn_i16 n_v83870 10)) in
    let n_v83872 = (divn_i15 n_v83870 10) in
    match (ltn_i6 0 n_v83872) as __v83873 in string_d4 with
    | true ⇒ (cats_i19 (string_of_nat_i39 n_v83872) s_v83871)
    | false ⇒ s_v83871
    end

program digit_of_char_i40 : char_d3 → (option_d5‹U, L› nat) =
  fn (c_v83875 : char_d3) ⇒
    match (eqc_i17 c_v83875 '0') as __v83876 in
      (option_d5‹U, L› nat) with
    | true ⇒ (Some_c9‹U, L› 0)
    | false ⇒
      match (eqc_i17 c_v83875 '1') as __v83877 in
        (option_d5‹U, L› nat) with
      | true ⇒ (Some_c9‹U, L› 1)
      | false ⇒
        match (eqc_i17 c_v83875 '2') as __v83878 in
          (option_d5‹U, L› nat) with
        | true ⇒ (Some_c9‹U, L› 2)
        | false ⇒
          match (eqc_i17 c_v83875 '3') as __v83879 in
            (option_d5‹U, L› nat) with
          | true ⇒ (Some_c9‹U, L› 3)
          | false ⇒
            match (eqc_i17 c_v83875 '4') as __v83880 in
              (option_d5‹U, L› nat) with
            | true ⇒ (Some_c9‹U, L› 4)
            | false ⇒
              match (eqc_i17 c_v83875 '5') as __v83881 in
                (option_d5‹U, L› nat) with
              | true ⇒ (Some_c9‹U, L› 5)
              | false ⇒
                match (eqc_i17 c_v83875 '6') as __v83882 in
                  (option_d5‹U, L› nat) with
                | true ⇒ (Some_c9‹U, L› 6)
                | false ⇒
                  match (eqc_i17 c_v83875 '7') as __v83883 in
                    (option_d5‹U, L› nat) with
                  | true ⇒ (Some_c9‹U, L› 7)
                  | false ⇒
                    match (eqc_i17 c_v83875 '8') as __v83884 in
                      (option_d5‹U, L› nat) with
                    | true ⇒ (Some_c9‹U, L› 8)
                    | false ⇒
                      match (eqc_i17 c_v83875 '9') as __v83885 in
                        (option_d5‹U, L› nat) with
                      | true ⇒ (Some_c9‹U, L› 9)
                      | false ⇒ None_c8‹U, L›
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program nat_of_string_loop_i41 :
  string_d4 → nat → (option_d5‹U, L› nat)
=
  fn (s_v83888 : string_d4) (acc_v83889 : nat) ⇒
    match s_v83888 as __v83890 in (option_d5‹U, L› nat) with
    | EmptyString_c6  ⇒ (Some_c9‹U, L› acc_v83889)
    | String_c7 c_v83891 s_v83892 ⇒
      match (digit_of_char_i40 c_v83891) as __v83893 in
        (option_d5‹U, L› nat) with
      | None_c8  ⇒ None_c8‹U, L›
      | Some_c9 n_v83894 ⇒
        (nat_of_string_loop_i41
          s_v83892 (addn_i12 (muln_i14 acc_v83889 10) n_v83894))
      end
    end

program nat_of_string_i42 : string_d4 → (option_d5‹U, L› nat) =
  fn (s_v83896 : string_d4) ⇒ (nat_of_string_loop_i41 s_v83896 0)

program split_i43 ‹t_s83897› :
  (list_d6‹U, t_s83897› nat) →
    (list_d6‹U, t_s83897› nat) ⊗ (list_d6‹U, t_s83897› nat)
=
  fn (zs_v83900 : (list_d6‹U, t_s83897› nat)) ⇒
    match zs_v83900 as __v83901 in
      (list_d6‹U, t_s83897› nat) ⊗ (list_d6‹U, t_s83897› nat) with
    | nil_c10  ⇒ ⟨nil_c10‹U, t_s83897›, nil_c10‹U, t_s83897›⟩
    | cons_c11 x_v83903 zs_v83904 ⇒
      match zs_v83904 as __v83905 in
        (list_d6‹U, t_s83897› nat) ⊗ (list_d6‹U, t_s83897› nat) with
      | nil_c10  ⇒
        ⟨(cons_c11‹U, t_s83897› x_v83903 nil_c10‹U, t_s83897›), nil_c10‹U,
        t_s83897›⟩
      | cons_c11 y_v83907 zs_v83908 ⇒
        let __v83909 = (split_i43‹t_s83897› zs_v83908) in
        match __v83909 as __v83910 in
          (list_d6‹U, t_s83897› nat) ⊗ (list_d6‹U, t_s83897› nat) with
        | ⟨xs_v83912, ys_v83913⟩ ⇒
          ⟨(cons_c11‹U, t_s83897› x_v83903 xs_v83912), (cons_c11‹U,
                                                             t_s83897›
                                                               y_v83907
                                                               ys_v83913)⟩
        end
      end
    end

program merge_i44 ‹t_s83914› :
  (list_d6‹U, t_s83914› nat) →
    (list_d6‹U, t_s83914› nat) ⊸ (list_d6‹U, t_s83914› nat)
=
  fn (xs_v83917 : (list_d6‹U, t_s83914› nat)) ⇒
    ln (ys_v83918 : (list_d6‹U, t_s83914› nat)) ⇒
      match xs_v83917 as __v83919 in (list_d6‹U, t_s83914› nat) with
      | nil_c10  ⇒ ys_v83918
      | cons_c11 x_v83920 xs0_v83921 ⇒
        match ys_v83918 as __v83922 in (list_d6‹U, t_s83914› nat) with
        | nil_c10  ⇒ (cons_c11‹U, t_s83914› x_v83920 xs0_v83921)
        | cons_c11 y_v83923 ys0_v83924 ⇒
          match (lten_i5 x_v83920 y_v83923) as __v83925 in
            (list_d6‹U, t_s83914› nat) with
          | true ⇒
            (cons_c11‹U, t_s83914›
              x_v83920
              (merge_i44‹t_s83914›
                xs0_v83921 (cons_c11‹U, t_s83914› y_v83923 ys0_v83924)))
          | false ⇒
            (cons_c11‹U, t_s83914›
              y_v83923
              (merge_i44‹t_s83914›
                (cons_c11‹U, t_s83914› x_v83920 xs0_v83921) ys0_v83924))
          end
        end
      end

program msort_i45 ‹t_s83926› :
  (list_d6‹U, t_s83926› nat) → (list_d6‹U, t_s83926› nat)
=
  fn (zs_v83928 : (list_d6‹U, t_s83926› nat)) ⇒
    match zs_v83928 as __v83929 in (list_d6‹U, t_s83926› nat) with
    | nil_c10  ⇒ nil_c10‹U, t_s83926›
    | cons_c11 x_v83930 zs_v83931 ⇒
      match zs_v83931 as __v83932 in (list_d6‹U, t_s83926› nat) with
      | nil_c10  ⇒
        (cons_c11‹U, t_s83926› x_v83930 nil_c10‹U, t_s83926›)
      | cons_c11 y_v83933 zs_v83934 ⇒
        let __v83935 =
          (split_i43‹t_s83926›
            (cons_c11‹U, t_s83926›
              x_v83930 (cons_c11‹U, t_s83926› y_v83933 zs_v83934)))
        in
        match __v83935 as __v83936 in (list_d6‹U, t_s83926› nat) with
        | ⟨xs_v83937, ys_v83938⟩ ⇒
          (merge_i44‹t_s83926›
            (msort_i45‹t_s83926› xs_v83937)
            (msort_i45‹t_s83926› ys_v83938))
        end
      end
    end

inductive uniq_d7 ‹t_s83939›
  (A_v83940 : Type‹t_s83939›) (a_v83941 : A_v83940) : Type‹t_s83939›
=
| Uniq_c12 of
    ‹t_s83942› (A_v83943 : Type‹t_s83942›) (a_v83944 : A_v83943)
    (m_v83945 : A_v83943) {pf_v83946 : m_v83945 ≡ a_v83944}
    : (uniq_d7‹t_s83942› A_v83943 a_v83944)

logical cmsort_ch_i46 ‹t_s83947› : (list_d6‹U, t_s83947› nat) → L =
  fn (xs_v83949 : (list_d6‹U, t_s83947› nat)) ⇒
    ch⟨⇑(__v83950 :
           (uniq_d7‹t_s83947›
             (list_d6‹U, t_s83947› nat)
             (msort_i45‹t_s83947› xs_v83949))) ⇒
           end⟩

program cmsort_worker_i47 ‹t_s83951› :
  nat →
    ∀ (zs_v83953 : (list_d6‹U, t_s83951› nat)) →
      (cmsort_ch_i46‹t_s83951› zs_v83953) ⊸ IO unit‹U›
=
  fn (n_v83955 : nat) (zs_v83956 : (list_d6‹U, t_s83951› nat)) ⇒
    ln (c_v83957 : (cmsort_ch_i46‹t_s83951› zs_v83956)) ⇒
      match n_v83955 as __v83958 in IO unit‹U› with
      | O ⇒
        let c_v83959 ⇐
          (send c_v83957
            (Uniq_c12‹t_s83951›
              (msort_i45‹t_s83951› zs_v83956)
              refl (msort_i45‹t_s83951› zs_v83956)))
        in close c_v83959
      | S n0_v83960 ⇒
        (match zs_v83956 as _zs__v83961 in
           (cmsort_ch_i46‹t_s83951› _zs__v83961) ⊸ IO unit‹U› with
         | nil_c10  ⇒
           ln (c_v83963 : (cmsort_ch_i46‹t_s83951›
                            nil_c10‹U, t_s83951›)) ⇒
             let c_v83964 ⇐
               (send c_v83963
                 (Uniq_c12‹t_s83951›
                   nil_c10‹U, t_s83951› refl nil_c10‹U, t_s83951›))
             in close c_v83964
         | cons_c11 z0_v83965 zs0_v83966 ⇒
           ln (c_v83967 : (cmsort_ch_i46‹t_s83951›
                            (cons_c11‹U, t_s83951› z0_v83965 zs0_v83966))) ⇒
             (match zs0_v83966 as _zs0__v83968 in
                (cmsort_ch_i46‹t_s83951›
                  (cons_c11‹U, t_s83951› z0_v83965 _zs0__v83968)) ⊸
                  IO unit‹U› with
              | nil_c10  ⇒
                ln (c_v83970 : (cmsort_ch_i46‹t_s83951›
                                 (cons_c11‹U, t_s83951›
                                   z0_v83965 nil_c10‹U, t_s83951›))) ⇒
                  let c_v83971 ⇐
                    (send c_v83970
                      (Uniq_c12‹t_s83951›
                        (cons_c11‹U, t_s83951›
                          z0_v83965 nil_c10‹U, t_s83951›)
                        refl (cons_c11‹U, t_s83951›
                               z0_v83965 nil_c10‹U, t_s83951›)))
                  in close c_v83971
              | cons_c11 z1_v83972 zs1_v83973 ⇒
                ln (c_v83974 : (cmsort_ch_i46‹t_s83951›
                                 (cons_c11‹U, t_s83951›
                                   z0_v83965
                                   (cons_c11‹U, t_s83951›
                                     z1_v83972 zs1_v83973)))) ⇒
                  (match (split_i43‹t_s83951›
                           (cons_c11‹U, t_s83951›
                             z0_v83965
                             (cons_c11‹U, t_s83951› z1_v83972 zs1_v83973))) as _p__v83975 in
                     {_p__v83975 ≡
                        (split_i43‹t_s83951›
                          (cons_c11‹U, t_s83951›
                            z0_v83965
                            (cons_c11‹U, t_s83951› z1_v83972 zs1_v83973)))} ⊸
                       IO unit‹U› with
                   | ⟨xs0_v83977, ys0_v83978⟩ ⇒
                     ln {e_v83979 : (⟨xs0_v83977, ys0_v83978⟩
                                      : (list_d6‹U, t_s83951› nat) ⊗
                                          (list_d6‹U, t_s83951› nat)) ≡
                                      (split_i43‹t_s83951›
                                        (cons_c11‹U, t_s83951›
                                          z0_v83965
                                          (cons_c11‹U, t_s83951›
                                            z1_v83972 zs1_v83973)))} ⇒
                       let r1_v83981 ⇐
                         fork (r1_v83982 :
                           (cmsort_ch_i46‹t_s83951› xs0_v83977))
                         in
                           (cmsort_worker_i47‹t_s83951›
                             n0_v83960 xs0_v83977 r1_v83982)
                       in
                       let r2_v83983 ⇐
                         fork (r2_v83984 :
                           (cmsort_ch_i46‹t_s83951› ys0_v83978))
                         in
                           (cmsort_worker_i47‹t_s83951›
                             n0_v83960 ys0_v83978 r2_v83984)
                       in
                       let __v83985 ⇐ recv r1_v83981 in
                       match __v83985 as __v83986 in IO unit‹U› with
                       | ⟨msg1_v83987, r1_v83988⟩ ⇒
                         let __v83989 ⇐ recv r2_v83983 in
                         match __v83989 as __v83990 in IO unit‹U› with
                         | ⟨msg2_v83991, r2_v83992⟩ ⇒
                           match msg1_v83987 as __v83993 in
                             IO unit‹U› with
                           | Uniq_c12 xs1_v83994 pf1_v83995 ⇒
                             match msg2_v83991 as __v83996 in
                               IO unit‹U› with
                             | Uniq_c12 xs2_v83997 pf2_v83998 ⇒
                               let zs_v83999 =
                                 (merge_i44‹t_s83951›
                                   xs1_v83994 xs2_v83997)
                               in
                               let c_v84000 ⇐
                                 (send c_v83974
                                   (Uniq_c12‹t_s83951›
                                     zs_v83999
                                     rew [p_v84001, __v84002 ⇒
                                       zs_v83999 ≡
                                         let __v84003 = p_v84001 in
                                         match __v84003 as __v84004 in
                                           (list_d6‹U, t_s83951› nat) with
                                         | ⟨xs_v84005, ys_v84006⟩ ⇒
                                           (merge_i44‹t_s83951›
                                             (msort_i45‹t_s83951›
                                               xs_v84005)
                                             (msort_i45‹t_s83951›
                                               ys_v84006))
                                         end]
                                       e_v83979 in
                                     rew [l_v84007, __v84008 ⇒
                                       zs_v83999 ≡
                                         (merge_i44‹t_s83951›
                                           l_v84007
                                           (msort_i45‹t_s83951›
                                             ys0_v83978))]
                                       pf1_v83995 in
                                     rew [l_v84009, __v84010 ⇒
                                       zs_v83999 ≡
                                         (merge_i44‹t_s83951›
                                           xs1_v83994 l_v84009)]
                                       pf2_v83998 in
                                     refl (merge_i44‹t_s83951›
                                            xs1_v83994 xs2_v83997)))
                               in
                               let __v84011 ⇐ close r1_v83988 in
                               let __v84012 ⇐ close r2_v83992 in
                               close c_v84000
                             end
                           end
                         end
                       end
                   end
                    refl (split_i43‹t_s83951›
                           (cons_c11‹U, t_s83951›
                             z0_v83965
                             (cons_c11‹U, t_s83951› z1_v83972 zs1_v83973))))
              end c_v83967)
         end c_v83957)
      end

program cmsort_i48 ‹t_s84013› :
  ∀ (zs_v84014 : (list_d6‹U, t_s84013› nat)) →
    IO (uniq_d7‹t_s84013›
         (list_d6‹U, t_s84013› nat) (msort_i45‹t_s84013› zs_v84014))
=
  fn (zs_v84015 : (list_d6‹U, t_s84013› nat)) ⇒
    let c_v84016 ⇐
      fork (c_v84017 : (cmsort_ch_i46‹t_s84013› zs_v84015)) in
        (cmsort_worker_i47‹t_s84013› 4 zs_v84015 c_v84017)
    in
    let __v84018 ⇐ recv c_v84016 in
    match __v84018 as __v84019 in
      IO (uniq_d7‹t_s84013›
           (list_d6‹U, t_s84013› nat) (msort_i45‹t_s84013› zs_v84015)) with
    | ⟨msg_v84020, c_v84021⟩ ⇒
      let __v84022 ⇐ close c_v84021 in return msg_v84020
    end

program mkList_i49 ‹t_s84023› : nat → (list_d6‹U, t_s84023› nat) =
  fn (n_v84025 : nat) ⇒
    match n_v84025 as __v84026 in (list_d6‹U, t_s84023› nat) with
    | O ⇒ nil_c10‹U, t_s84023›
    | S n0_v84027 ⇒
      (cons_c11‹U, t_s84023›
        n_v84025 (mkList_i49‹t_s84023› n0_v84027))
    end

program free_i50 :
  ∀ {A_v84028 : U} → (list_d6‹U, L› A_v84028) → unit‹U›
=
  fn {A_v84030 : U} (ls_v84031 : (list_d6‹U, L› A_v84030)) ⇒
    match ls_v84031 as __v84032 in unit‹U› with
    | nil_c10  ⇒ ()
    | cons_c11 __v84033 ls_v84034 ⇒ (free_i50 A_v84030 ls_v84034)
    end

program main_i51 : IO unit‹U› =
  let test_v84035 = (mkList_i49‹L› 2000000) in
  let msg_v84036 ⇐ (cmsort_i48‹L› test_v84035) in
  match msg_v84036 as __v84037 in IO unit‹U› with
  | Uniq_c12 sorted_v84038 __v84039 ⇒
    let __v84040 = (free_i50 nat sorted_v84038) in return ()
  end

trans1e success--------------------------

data order_d1 =
| LT_c1 of size(0) | GT_c2 of size(0) | EQ_c3 of size(0)

def andb_i1 =
  fn b1_v84848 b2_v84849 ⇒
    match b1_v84848 with
    | true ⇒ b2_v84849 | false ⇒ false
    end

def orb_i2 =
  fn b1_v84850 b2_v84851 ⇒
    match b1_v84850 with
    | true ⇒ true | false ⇒ b2_v84851
    end

def notb_i3 =
  fn b_v84852 ⇒ match b_v84852 with
                  | true ⇒ false | false ⇒ true
                  end

def compareb_i4 =
  fn b1_v84853 b2_v84854 ⇒
    match b1_v84853 with
    | true ⇒ match b2_v84854 with
               | true ⇒ EQ_c3 | false ⇒ GT_c2
               end
    | false ⇒ match b2_v84854 with
                | true ⇒ LT_c1 | false ⇒ EQ_c3
                end
    end

def lten_i5 =
  fn x_v84855 y_v84856 ⇒
    match x_v84855 with
    | O ⇒ true
    | S x_v84857 ⇒
      match y_v84856 with
      | O ⇒ false | S y_v84858 ⇒ ((lten_i5 x_v84857) y_v84858)
      end
    end

def ltn_i6 = fn x_v84859 y_v84860 ⇒ ((lten_i5 x_v84859.+1) y_v84860)

def gten_i7 = fn x_v84861 y_v84862 ⇒ ((lten_i5 y_v84862) x_v84861)

def gtn_i8 = fn x_v84863 y_v84864 ⇒ ((ltn_i6 y_v84864) x_v84863)

def eqn_i9 =
  fn x_v84865 y_v84866 ⇒
    match x_v84865 with
    | O ⇒ match y_v84866 with
            | O ⇒ true | S __v84867 ⇒ false
            end
    | S x_v84868 ⇒
      match y_v84866 with
      | O ⇒ false | S y_v84869 ⇒ ((eqn_i9 x_v84868) y_v84869)
      end
    end

def comparen_i10 =
  fn n1_v84870 n2_v84871 ⇒
    match n1_v84870 with
    | O ⇒ match n2_v84871 with
            | O ⇒ EQ_c3 | S __v84872 ⇒ LT_c1
            end
    | S n1_v84873 ⇒
      match n2_v84871 with
      | O ⇒ GT_c2 | S n2_v84874 ⇒ ((comparen_i10 n1_v84873) n2_v84874)
      end
    end

def pred_i11 =
  fn x_v84875 ⇒ match x_v84875 with
                  | O ⇒ 0 | S x_v84876 ⇒ x_v84876
                  end

def addn_i12 =
  fn x_v84877 y_v84878 ⇒
    match x_v84877 with
    | O ⇒ y_v84878 | S x_v84879 ⇒ ((addn_i12 x_v84879) y_v84878).+1
    end

def subn_i13 =
  fn x_v84880 y_v84881 ⇒
    match y_v84881 with
    | O ⇒ x_v84880
    | S y_v84882 ⇒ ((subn_i13 (pred_i11 x_v84880)) y_v84882)
    end

def muln_i14 =
  fn x_v84883 y_v84884 ⇒
    match x_v84883 with
    | O ⇒ 0
    | S x_v84885 ⇒ ((addn_i12 y_v84884) ((muln_i14 x_v84885) y_v84884))
    end

def divn_i15 =
  fn x_v84886 y_v84887 ⇒
    match ((ltn_i6 x_v84886) y_v84887) with
    | true ⇒ 0
    | false ⇒ ((divn_i15 ((subn_i13 x_v84886) y_v84887)) y_v84887).+1
    end

def modn_i16 =
  fn x_v84888 y_v84889 ⇒
    ((subn_i13 x_v84888)
      ((muln_i14 ((divn_i15 x_v84888) y_v84889)) y_v84889))

data between_d2 =
| Between_c4 of size(3)

data char_d3 =
| Char_c5 of size(1)

def eqc_i17 =
  fn c1_v84890 c2_v84891 ⇒
    match c1_v84890 with
    | Char_c5 n1_v84892 ⇒
      match c2_v84891 with
      | Char_c5 n2_v84893 ⇒ ((eqn_i9 n1_v84892) n2_v84893)
      end
    end

def comparec_i18 =
  fn c1_v84894 c2_v84895 ⇒
    match c1_v84894 with
    | Char_c5 n1_v84896 ⇒
      match c2_v84895 with
      | Char_c5 n2_v84897 ⇒ ((comparen_i10 n1_v84896) n2_v84897)
      end
    end

data string_d4 =
| EmptyString_c6 of size(0) | String_c7 of size(2)

def cats_i19 =
  fn s1_v84898 s2_v84899 ⇒
    match s1_v84898 with
    | EmptyString_c6  ⇒ s2_v84899
    | String_c7 c_v84900 s1_v84901 ⇒
      (String_c7 c_v84900 ((cats_i19 s1_v84901) s2_v84899))
    end

def strlen_i20 =
  fn s_v84902 ⇒
    match s_v84902 with
    | EmptyString_c6  ⇒ 0
    | String_c7 __v84903 s_v84904 ⇒ (strlen_i20 s_v84904).+1
    end

def eqs_i21 =
  fn s1_v84905 s2_v84906 ⇒
    match s1_v84905 with
    | EmptyString_c6  ⇒
      match s2_v84906 with
      | EmptyString_c6  ⇒ true | String_c7 __v84907 __v84908 ⇒ false
      end
    | String_c7 c1_v84909 s1_v84910 ⇒
      match s2_v84906 with
      | EmptyString_c6  ⇒ false
      | String_c7 c2_v84911 s2_v84912 ⇒
        ((andb_i1 ((eqc_i17 c1_v84909) c2_v84911))
          ((eqs_i21 s1_v84910) s2_v84912))
      end
    end

def compares_i22 =
  fn s1_v84913 s2_v84914 ⇒
    match s1_v84913 with
    | EmptyString_c6  ⇒
      match s2_v84914 with
      | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v84915 __v84916 ⇒ LT_c1
      end
    | String_c7 c1_v84917 s1_v84918 ⇒
      match s2_v84914 with
      | EmptyString_c6  ⇒ GT_c2
      | String_c7 c2_v84919 s2_v84920 ⇒
        match ((comparec_i18 c1_v84917) c2_v84919) with
        | EQ_c3  ⇒ ((compares_i22 s1_v84918) s2_v84920) | LT_c1  ⇒ LT_c1
        | GT_c2  ⇒ GT_c2
        end
      end
    end

data optionUU_d11 =
| NoneUU_c19 of size(0) | SomeUU_c20 of size(1)

data optionUL_d10 =
| NoneUL_c17 of size(0) | SomeUL_c18 of size(1)

data optionLU_d9 =
| NoneLU_c15 of size(0)

data optionLL_d8 =
| NoneLL_c13 of size(0) | SomeLL_c14 of size(1)

def and_thenUUU_i59 =
  fn A_v84921 B_v84922 opt_v84923 ⇒
    ln f_v84924 ⇒
      match opt_v84923 with
      | NoneUU_c19  ⇒ NoneUU_c19
      | SomeUU_c20 x_v84925 ⇒ (f_v84924 x_v84925)
      end

def and_thenUUL_i58 =
  fn A_v84926 B_v84927 opt_v84928 ⇒
    ln f_v84929 ⇒
      match opt_v84928 with
      | NoneUL_c17  ⇒ NoneUL_c17
      | SomeUL_c18 x_v84930 ⇒ (f_v84929 x_v84930)
      end

def and_thenULU_i57 =
  fn A_v84931 B_v84932 opt_v84933 ⇒
    ln f_v84934 ⇒
      match opt_v84933 with
      | NoneUU_c19  ⇒ NoneLU_c15
      | SomeUU_c20 x_v84935 ⇒ (f_v84934 x_v84935)
      end

def and_thenULL_i56 =
  fn A_v84936 B_v84937 opt_v84938 ⇒
    ln f_v84939 ⇒
      match opt_v84938 with
      | NoneUL_c17  ⇒ NoneLL_c13
      | SomeUL_c18 x_v84940 ⇒ (f_v84939 x_v84940)
      end

def and_thenLUL_i54 =
  fn A_v84941 B_v84942 opt_v84943 ⇒
    ln f_v84944 ⇒
      match opt_v84943 with
      | NoneLL_c13  ⇒ NoneUL_c17
      | SomeLL_c14 x_v84945 ⇒ (f_v84944 x_v84945)
      end

def and_thenLLL_i52 =
  fn A_v84946 B_v84947 opt_v84948 ⇒
    ln f_v84949 ⇒
      match opt_v84948 with
      | NoneLL_c13  ⇒ NoneLL_c13
      | SomeLL_c14 x_v84950 ⇒ (f_v84949 x_v84950)
      end

data listUU_d15 =
| nilUU_c27 of size(0) | consUU_c28 of size(2)

data listUL_d14 =
| nilUL_c25 of size(0) | consUL_c26 of size(2)

data listLU_d13 =
| nilLU_c23 of size(0)

data listLL_d12 =
| nilLL_c21 of size(0) | consLL_c22 of size(2)

def lenUU_i67 =
  fn A_v84951 xs_v84952 ⇒
    match xs_v84952 with
    | nilUU_c27  ⇒ (0, nilUU_c27)
    | consUU_c28 x_v84953 xs_v84954 ⇒
      match ((lenUU_i67 NULL) xs_v84954) with
      | (n_v84955, xs_v84956) ⇒
        (n_v84955.+1, (consUU_c28 x_v84953 xs_v84956))
      end
    end

def lenUL_i66 =
  fn A_v84957 xs_v84958 ⇒
    match xs_v84958 with
    | nilUL_c25  ⇒ (0, nilUL_c25)
    | consUL_c26 x_v84959 xs_v84960 ⇒
      match ((lenUL_i66 NULL) xs_v84960) with
      | (n_v84961, xs_v84962) ⇒
        (n_v84961.+1, (consUL_c26 x_v84959 xs_v84962))
      end
    end

def lenLL_i64 =
  fn A_v84963 xs_v84964 ⇒
    match xs_v84964 with
    | nilLL_c21  ⇒ (0, nilLL_c21)
    | consLL_c22 x_v84965 xs_v84966 ⇒
      match ((lenLL_i64 NULL) xs_v84966) with
      | (n_v84967, xs_v84968) ⇒
        (n_v84967.+1, (consLL_c22 x_v84965 xs_v84968))
      end
    end

def appendUU_i71 =
  fn A_v84969 xs_v84970 ⇒
    ln ys_v84971 ⇒
      match xs_v84970 with
      | nilUU_c27  ⇒ ys_v84971
      | consUU_c28 x_v84972 xs_v84973 ⇒
        (consUU_c28 x_v84972 (((appendUU_i71 NULL) xs_v84973) ys_v84971))
      end

def appendUL_i70 =
  fn A_v84974 xs_v84975 ⇒
    ln ys_v84976 ⇒
      match xs_v84975 with
      | nilUL_c25  ⇒ ys_v84976
      | consUL_c26 x_v84977 xs_v84978 ⇒
        (consUL_c26 x_v84977 (((appendUL_i70 NULL) xs_v84978) ys_v84976))
      end

def appendLL_i68 =
  fn A_v84979 xs_v84980 ⇒
    ln ys_v84981 ⇒
      match xs_v84980 with
      | nilLL_c21  ⇒ ys_v84981
      | consLL_c22 x_v84982 xs_v84983 ⇒
        (consLL_c22 x_v84982 (((appendLL_i68 NULL) xs_v84983) ys_v84981))
      end

def readline_i33 =
  fn __v84984 ⇒
    let ch_v84985 ⇐ open stdin in
    let ch_v84986 ⇐ (send ch_v84985 true) in
    let __v84987 ⇐ recv ch_v84986 in
    match __v84987 with
    | (s_v84988, ch_v84989) ⇒
      let ch_v84990 ⇐ (send ch_v84989 false) in
      let __v84991 ⇐ close⇑ ch_v84990 in return s_v84988
    end

def print_i34 =
  fn s_v84992 ⇒
    let ch_v84993 ⇐ open stdout in
    let ch_v84994 ⇐ (send ch_v84993 true) in
    let ch_v84995 ⇐ (send ch_v84994 s_v84992) in
    let ch_v84996 ⇐ (send ch_v84995 false) in close⇑ ch_v84996

def prerr_i35 =
  fn s_v84997 ⇒
    let ch_v84998 ⇐ open stderr in
    let ch_v84999 ⇐ (send ch_v84998 true) in
    let ch_v85000 ⇐ (send ch_v84999 s_v84997) in
    let ch_v85001 ⇐ (send ch_v85000 false) in close⇑ ch_v85001

def digits_i36 =
  (consUU_c28
    "0"
    (consUU_c28
      "1"
      (consUU_c28
        "2"
        (consUU_c28
          "3"
          (consUU_c28
            "4"
            (consUU_c28
              "5"
              (consUU_c28
                "6"
                (consUU_c28 "7" (consUU_c28 "8" (consUU_c28 "9" nilUU_c27))))))))))

def get_at_i37 =
  fn A_v85002 n_v85003 xs_v85004 a_v85005 ⇒
    match n_v85003 with
    | O ⇒
      match xs_v85004 with
      | nilUU_c27  ⇒ a_v85005 | consUU_c28 x_v85006 __v85007 ⇒ x_v85006
      end
    | S n_v85008 ⇒
      match xs_v85004 with
      | nilUU_c27  ⇒ a_v85005
      | consUU_c28 __v85009 xs_v85010 ⇒
        ((((get_at_i37 NULL) n_v85008) xs_v85010) a_v85005)
      end
    end

def string_of_digit_i38 =
  fn n_v85011 ⇒ ((((get_at_i37 NULL) n_v85011) digits_i36) EmptyString_c6)

def string_of_nat_i39 =
  fn n_v85012 ⇒
    let s_v85013 = (string_of_digit_i38 ((modn_i16 n_v85012) 10)) in
    let n_v85014 = ((divn_i15 n_v85012) 10) in
    match ((ltn_i6 0) n_v85014) with
    | true ⇒ ((cats_i19 (string_of_nat_i39 n_v85014)) s_v85013)
    | false ⇒ s_v85013
    end

def digit_of_char_i40 =
  fn c_v85015 ⇒
    match ((eqc_i17 c_v85015) '0') with
    | true ⇒ (SomeUL_c18 0)
    | false ⇒
      match ((eqc_i17 c_v85015) '1') with
      | true ⇒ (SomeUL_c18 1)
      | false ⇒
        match ((eqc_i17 c_v85015) '2') with
        | true ⇒ (SomeUL_c18 2)
        | false ⇒
          match ((eqc_i17 c_v85015) '3') with
          | true ⇒ (SomeUL_c18 3)
          | false ⇒
            match ((eqc_i17 c_v85015) '4') with
            | true ⇒ (SomeUL_c18 4)
            | false ⇒
              match ((eqc_i17 c_v85015) '5') with
              | true ⇒ (SomeUL_c18 5)
              | false ⇒
                match ((eqc_i17 c_v85015) '6') with
                | true ⇒ (SomeUL_c18 6)
                | false ⇒
                  match ((eqc_i17 c_v85015) '7') with
                  | true ⇒ (SomeUL_c18 7)
                  | false ⇒
                    match ((eqc_i17 c_v85015) '8') with
                    | true ⇒ (SomeUL_c18 8)
                    | false ⇒
                      match ((eqc_i17 c_v85015) '9') with
                      | true ⇒ (SomeUL_c18 9) | false ⇒ NoneUL_c17
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

def nat_of_string_loop_i41 =
  fn s_v85016 acc_v85017 ⇒
    match s_v85016 with
    | EmptyString_c6  ⇒ (SomeUL_c18 acc_v85017)
    | String_c7 c_v85018 s_v85019 ⇒
      match (digit_of_char_i40 c_v85018) with
      | NoneUL_c17  ⇒ NoneUL_c17
      | SomeUL_c18 n_v85020 ⇒
        ((nat_of_string_loop_i41 s_v85019)
          ((addn_i12 ((muln_i14 acc_v85017) 10)) n_v85020))
      end
    end

def nat_of_string_i42 = fn s_v85021 ⇒ ((nat_of_string_loop_i41 s_v85021) 0)

def splitU_i73 =
  fn zs_v85022 ⇒
    match zs_v85022 with
    | nilUU_c27  ⇒ (nilUU_c27, nilUU_c27)
    | consUU_c28 x_v85023 zs_v85024 ⇒
      match zs_v85024 with
      | nilUU_c27  ⇒ ((consUU_c28 x_v85023 nilUU_c27), nilUU_c27)
      | consUU_c28 y_v85025 zs_v85026 ⇒
        let __v85027 = (splitU_i73 zs_v85026) in
        match __v85027 with
        | (xs_v85028, ys_v85029) ⇒
          ((consUU_c28 x_v85023 xs_v85028), (consUU_c28 y_v85025 ys_v85029))
        end
      end
    end

def splitL_i72 =
  fn zs_v85030 ⇒
    match zs_v85030 with
    | nilUL_c25  ⇒ (nilUL_c25, nilUL_c25)
    | consUL_c26 x_v85031 zs_v85032 ⇒
      match zs_v85032 with
      | nilUL_c25  ⇒ ((consUL_c26 x_v85031 nilUL_c25), nilUL_c25)
      | consUL_c26 y_v85033 zs_v85034 ⇒
        let __v85035 = (splitL_i72 zs_v85034) in
        match __v85035 with
        | (xs_v85036, ys_v85037) ⇒
          ((consUL_c26 x_v85031 xs_v85036), (consUL_c26 y_v85033 ys_v85037))
        end
      end
    end

def mergeU_i75 =
  fn xs_v85038 ⇒
    ln ys_v85039 ⇒
      match xs_v85038 with
      | nilUU_c27  ⇒ ys_v85039
      | consUU_c28 x_v85040 xs0_v85041 ⇒
        match ys_v85039 with
        | nilUU_c27  ⇒ (consUU_c28 x_v85040 xs0_v85041)
        | consUU_c28 y_v85042 ys0_v85043 ⇒
          match ((lten_i5 x_v85040) y_v85042) with
          | true ⇒
            (consUU_c28
              x_v85040
              ((mergeU_i75 xs0_v85041) (consUU_c28 y_v85042 ys0_v85043)))
          | false ⇒
            (consUU_c28
              y_v85042
              ((mergeU_i75 (consUU_c28 x_v85040 xs0_v85041)) ys0_v85043))
          end
        end
      end

def mergeL_i74 =
  fn xs_v85044 ⇒
    ln ys_v85045 ⇒
      match xs_v85044 with
      | nilUL_c25  ⇒ ys_v85045
      | consUL_c26 x_v85046 xs0_v85047 ⇒
        match ys_v85045 with
        | nilUL_c25  ⇒ (consUL_c26 x_v85046 xs0_v85047)
        | consUL_c26 y_v85048 ys0_v85049 ⇒
          match ((lten_i5 x_v85046) y_v85048) with
          | true ⇒
            (consUL_c26
              x_v85046
              ((mergeL_i74 xs0_v85047) (consUL_c26 y_v85048 ys0_v85049)))
          | false ⇒
            (consUL_c26
              y_v85048
              ((mergeL_i74 (consUL_c26 x_v85046 xs0_v85047)) ys0_v85049))
          end
        end
      end

def msortU_i77 =
  fn zs_v85050 ⇒
    match zs_v85050 with
    | nilUU_c27  ⇒ nilUU_c27
    | consUU_c28 x_v85051 zs_v85052 ⇒
      match zs_v85052 with
      | nilUU_c27  ⇒ (consUU_c28 x_v85051 nilUU_c27)
      | consUU_c28 y_v85053 zs_v85054 ⇒
        let __v85055 =
          (splitU_i73 (consUU_c28 x_v85051 (consUU_c28 y_v85053 zs_v85054)))
        in
        match __v85055 with
        | (xs_v85056, ys_v85057) ⇒
          ((mergeU_i75 (msortU_i77 xs_v85056)) (msortU_i77 ys_v85057))
        end
      end
    end

def msortL_i76 =
  fn zs_v85058 ⇒
    match zs_v85058 with
    | nilUL_c25  ⇒ nilUL_c25
    | consUL_c26 x_v85059 zs_v85060 ⇒
      match zs_v85060 with
      | nilUL_c25  ⇒ (consUL_c26 x_v85059 nilUL_c25)
      | consUL_c26 y_v85061 zs_v85062 ⇒
        let __v85063 =
          (splitL_i72 (consUL_c26 x_v85059 (consUL_c26 y_v85061 zs_v85062)))
        in
        match __v85063 with
        | (xs_v85064, ys_v85065) ⇒
          ((mergeL_i74 (msortL_i76 xs_v85064)) (msortL_i76 ys_v85065))
        end
      end
    end

data uniqU_d17 =
| UniqU_c30 of size(2)

data uniqL_d16 =
| UniqL_c29 of size(2)

def cmsort_workerU_i81 =
  fn n_v85066 zs_v85067 ⇒
    ln c_v85068 ⇒
      match n_v85066 with
      | O ⇒
        let c_v85069 ⇐
          (send c_v85068 (UniqU_c30 (msortU_i77 zs_v85067) NULL))
        in close⇑ c_v85069
      | S n0_v85070 ⇒
        (match zs_v85067 with
         | nilUU_c27  ⇒
           ln c_v85071 ⇒
             let c_v85072 ⇐ (send c_v85071 (UniqU_c30 nilUU_c27 NULL)) in
             close⇑ c_v85072
         | consUU_c28 z0_v85073 zs0_v85074 ⇒
           ln c_v85075 ⇒
             (match zs0_v85074 with
              | nilUU_c27  ⇒
                ln c_v85076 ⇒
                  let c_v85077 ⇐
                    (send c_v85076
                      (UniqU_c30 (consUU_c28 z0_v85073 nilUU_c27) NULL))
                  in close⇑ c_v85077
              | consUU_c28 z1_v85078 zs1_v85079 ⇒
                ln c_v85080 ⇒
                  (match (splitU_i73
                           (consUU_c28
                             z0_v85073 (consUU_c28 z1_v85078 zs1_v85079))) with
                   | (xs0_v85081, ys0_v85082) ⇒
                     ln e_v85083 ⇒
                       let r1_v85084 ⇐
                         fork r1_v85085 in
                           (((cmsort_workerU_i81 n0_v85070) xs0_v85081)
                             r1_v85085)
                       in
                       let r2_v85086 ⇐
                         fork r2_v85087 in
                           (((cmsort_workerU_i81 n0_v85070) ys0_v85082)
                             r2_v85087)
                       in
                       let __v85088 ⇐ recv r1_v85084 in
                       match __v85088 with
                       | (msg1_v85089, r1_v85090) ⇒
                         let __v85091 ⇐ recv r2_v85086 in
                         match __v85091 with
                         | (msg2_v85092, r2_v85093) ⇒
                           match msg1_v85089 with
                           | UniqU_c30 xs1_v85094 pf1_v85095 ⇒
                             match msg2_v85092 with
                             | UniqU_c30 xs2_v85096 pf2_v85097 ⇒
                               let zs_v85098 =
                                 ((mergeU_i75 xs1_v85094) xs2_v85096)
                               in
                               let c_v85099 ⇐
                                 (send c_v85080 (UniqU_c30 zs_v85098 NULL))
                               in
                               let __v85100 ⇐ close⇓ r1_v85090 in
                               let __v85101 ⇐ close⇓ r2_v85093 in
                               close⇑ c_v85099
                             end
                           end
                         end
                       end
                   end NULL)
              end c_v85075)
         end c_v85068)
      end

def cmsort_workerL_i80 =
  fn n_v85102 zs_v85103 ⇒
    ln c_v85104 ⇒
      match n_v85102 with
      | O ⇒
        let c_v85105 ⇐
          (send c_v85104 (UniqL_c29 (msortL_i76 zs_v85103) NULL))
        in close⇑ c_v85105
      | S n0_v85106 ⇒
        (match zs_v85103 with
         | nilUL_c25  ⇒
           ln c_v85107 ⇒
             let c_v85108 ⇐ (send c_v85107 (UniqL_c29 nilUL_c25 NULL)) in
             close⇑ c_v85108
         | consUL_c26 z0_v85109 zs0_v85110 ⇒
           ln c_v85111 ⇒
             (match zs0_v85110 with
              | nilUL_c25  ⇒
                ln c_v85112 ⇒
                  let c_v85113 ⇐
                    (send c_v85112
                      (UniqL_c29 (consUL_c26 z0_v85109 nilUL_c25) NULL))
                  in close⇑ c_v85113
              | consUL_c26 z1_v85114 zs1_v85115 ⇒
                ln c_v85116 ⇒
                  (match (splitL_i72
                           (consUL_c26
                             z0_v85109 (consUL_c26 z1_v85114 zs1_v85115))) with
                   | (xs0_v85117, ys0_v85118) ⇒
                     ln e_v85119 ⇒
                       let r1_v85120 ⇐
                         fork r1_v85121 in
                           (((cmsort_workerL_i80 n0_v85106) xs0_v85117)
                             r1_v85121)
                       in
                       let r2_v85122 ⇐
                         fork r2_v85123 in
                           (((cmsort_workerL_i80 n0_v85106) ys0_v85118)
                             r2_v85123)
                       in
                       let __v85124 ⇐ recv r1_v85120 in
                       match __v85124 with
                       | (msg1_v85125, r1_v85126) ⇒
                         let __v85127 ⇐ recv r2_v85122 in
                         match __v85127 with
                         | (msg2_v85128, r2_v85129) ⇒
                           match msg1_v85125 with
                           | UniqL_c29 xs1_v85130 pf1_v85131 ⇒
                             match msg2_v85128 with
                             | UniqL_c29 xs2_v85132 pf2_v85133 ⇒
                               let zs_v85134 =
                                 ((mergeL_i74 xs1_v85130) xs2_v85132)
                               in
                               let c_v85135 ⇐
                                 (send c_v85116 (UniqL_c29 zs_v85134 NULL))
                               in
                               let __v85136 ⇐ close⇓ r1_v85126 in
                               let __v85137 ⇐ close⇓ r2_v85129 in
                               close⇑ c_v85135
                             end
                           end
                         end
                       end
                   end NULL)
              end c_v85111)
         end c_v85104)
      end

def cmsortU_i83 =
  fn zs_v85138 ⇒
    let c_v85139 ⇐
      fork c_v85140 in (((cmsort_workerU_i81 4) zs_v85138) c_v85140)
    in
    let __v85141 ⇐ recv c_v85139 in
    match __v85141 with
    | (msg_v85142, c_v85143) ⇒
      let __v85144 ⇐ close⇓ c_v85143 in return msg_v85142
    end

def cmsortL_i82 =
  fn zs_v85145 ⇒
    let c_v85146 ⇐
      fork c_v85147 in (((cmsort_workerL_i80 4) zs_v85145) c_v85147)
    in
    let __v85148 ⇐ recv c_v85146 in
    match __v85148 with
    | (msg_v85149, c_v85150) ⇒
      let __v85151 ⇐ close⇓ c_v85150 in return msg_v85149
    end

def mkListU_i85 =
  fn n_v85152 ⇒
    match n_v85152 with
    | O ⇒ nilUU_c27
    | S n0_v85153 ⇒ (consUU_c28 n_v85152 (mkListU_i85 n0_v85153))
    end

def mkListL_i84 =
  fn n_v85154 ⇒
    match n_v85154 with
    | O ⇒ nilUL_c25
    | S n0_v85155 ⇒ (consUL_c26 n_v85154 (mkListL_i84 n0_v85155))
    end

def free_i50 =
  fn A_v85156 ls_v85157 ⇒
    match ls_v85157 with
    | nilUL_c25  ⇒ ()
    | consUL_c26 __v85158 ls_v85159 ⇒ ((free_i50 NULL) ls_v85159)
    end

main =
  let test_v85160 = (mkListL_i84 2000000) in
  let msg_v85161 ⇐ (cmsortL_i82 test_v85160) in
  match msg_v85161 with
  | UniqL_c29 sorted_v85162 __v85163 ⇒
    let __v85164 = ((free_i50 NULL) sorted_v85162) in return ()
  end

trans12 success--------------------------

fun andb_i1(b1_v85589, b2_v85590) = if b1_v85589 then
                                      b2_v85590
                                    else
                                      0

val andbclo_i86 = fn b1_v85591 b2_v85592 ⇒ andb_i1(b1_v85591, b2_v85592)

fun orb_i2(b1_v85593, b2_v85594) = if b1_v85593 then
                                     1
                                   else
                                     b2_v85594

val orbclo_i87 = fn b1_v85595 b2_v85596 ⇒ orb_i2(b1_v85595, b2_v85596)

fun notb_i3(b_v85597) = if b_v85597 then
                          0
                        else
                          1

val notbclo_i88 = fn b_v85598 ⇒ notb_i3(b_v85598)

fun compareb_i4(b1_v85599, b2_v85600) =
  if b1_v85599 then
    if b2_v85600 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v85600 then
      LT_c1
    else
      EQ_c3

val comparebclo_i89 =
  fn b1_v85601 b2_v85602 ⇒ compareb_i4(b1_v85601, b2_v85602)

fun lten_i5(x_v85603, y_v85604) =
  let __v85605 = x_v85603 in
  if __v85605 then
    let x_v85606 = __v85605.-1 in
    let __v85607 = y_v85604 in
    if __v85607 then
      let y_v85608 = __v85607.-1 in lten_i5(x_v85606, y_v85608)
    else
      0
  else
    1

val ltenclo_i90 = fn x_v85609 y_v85610 ⇒ lten_i5(x_v85609, y_v85610)

fun ltn_i6(x_v85611, y_v85612) = lten_i5(x_v85611.+1, y_v85612)

val ltnclo_i91 = fn x_v85613 y_v85614 ⇒ ltn_i6(x_v85613, y_v85614)

fun gten_i7(x_v85615, y_v85616) = lten_i5(y_v85616, x_v85615)

val gtenclo_i92 = fn x_v85617 y_v85618 ⇒ gten_i7(x_v85617, y_v85618)

fun gtn_i8(x_v85619, y_v85620) = ltn_i6(y_v85620, x_v85619)

val gtnclo_i93 = fn x_v85621 y_v85622 ⇒ gtn_i8(x_v85621, y_v85622)

fun eqn_i9(x_v85623, y_v85624) =
  let __v85625 = x_v85623 in
  if __v85625 then
    let x_v85626 = __v85625.-1 in
    let __v85627 = y_v85624 in
    if __v85627 then
      let y_v85628 = __v85627.-1 in eqn_i9(x_v85626, y_v85628)
    else
      0
  else
    let __v85629 = y_v85624 in
    if __v85629 then
      let __v85630 = __v85629.-1 in 0
    else
      1

val eqnclo_i94 = fn x_v85631 y_v85632 ⇒ eqn_i9(x_v85631, y_v85632)

fun comparen_i10(n1_v85633, n2_v85634) =
  let __v85635 = n1_v85633 in
  if __v85635 then
    let n1_v85636 = __v85635.-1 in
    let __v85637 = n2_v85634 in
    if __v85637 then
      let n2_v85638 = __v85637.-1 in comparen_i10(n1_v85636, n2_v85638)
    else
      GT_c2
  else
    let __v85639 = n2_v85634 in
    if __v85639 then
      let __v85640 = __v85639.-1 in LT_c1
    else
      EQ_c3

val comparenclo_i95 =
  fn n1_v85641 n2_v85642 ⇒ comparen_i10(n1_v85641, n2_v85642)

fun pred_i11(x_v85643) =
  let __v85644 = x_v85643 in
  if __v85644 then
    let x_v85645 = __v85644.-1 in x_v85645
  else
    0

val predclo_i96 = fn x_v85646 ⇒ pred_i11(x_v85646)

fun addn_i12(x_v85647, y_v85648) =
  let __v85649 = x_v85647 in
  if __v85649 then
    let x_v85650 = __v85649.-1 in addn_i12(x_v85650, y_v85648).+1
  else
    y_v85648

val addnclo_i97 = fn x_v85651 y_v85652 ⇒ addn_i12(x_v85651, y_v85652)

fun subn_i13(x_v85653, y_v85654) =
  let __v85655 = y_v85654 in
  if __v85655 then
    let y_v85656 = __v85655.-1 in subn_i13(pred_i11(x_v85653), y_v85656)
  else
    x_v85653

val subnclo_i98 = fn x_v85657 y_v85658 ⇒ subn_i13(x_v85657, y_v85658)

fun muln_i14(x_v85659, y_v85660) =
  let __v85661 = x_v85659 in
  if __v85661 then
    let x_v85662 = __v85661.-1 in
    addn_i12(y_v85660, muln_i14(x_v85662, y_v85660))
  else
    0

val mulnclo_i99 = fn x_v85663 y_v85664 ⇒ muln_i14(x_v85663, y_v85664)

fun divn_i15(x_v85665, y_v85666) =
  if ltn_i6(x_v85665, y_v85666) then
    0
  else
    divn_i15(subn_i13(x_v85665, y_v85666), y_v85666).+1

val divnclo_i100 = fn x_v85667 y_v85668 ⇒ divn_i15(x_v85667, y_v85668)

fun modn_i16(x_v85669, y_v85670) =
  subn_i13(x_v85669, muln_i14(divn_i15(x_v85669, y_v85670), y_v85670))

val modnclo_i101 = fn x_v85671 y_v85672 ⇒ modn_i16(x_v85671, y_v85672)

fun eqc_i17(c1_v85673, c2_v85674) =
  match c1_v85673 with
  | Char_c5 n1_v85675 ⇒
    match c2_v85674 with
    | Char_c5 n2_v85676 ⇒ eqn_i9(n1_v85675, n2_v85676)
    end
  end

val eqcclo_i102 = fn c1_v85677 c2_v85678 ⇒ eqc_i17(c1_v85677, c2_v85678)

fun comparec_i18(c1_v85679, c2_v85680) =
  match c1_v85679 with
  | Char_c5 n1_v85681 ⇒
    match c2_v85680 with
    | Char_c5 n2_v85682 ⇒ comparen_i10(n1_v85681, n2_v85682)
    end
  end

val comparecclo_i103 =
  fn c1_v85683 c2_v85684 ⇒ comparec_i18(c1_v85683, c2_v85684)

fun cats_i19(s1_v85685, s2_v85686) =
  match s1_v85685 with
  | EmptyString_c6  ⇒ s2_v85686
  | String_c7 c_v85687 s1_v85688 ⇒
    (String_c7 c_v85687 cats_i19(s1_v85688, s2_v85686))
  end

val catsclo_i104 = fn s1_v85689 s2_v85690 ⇒ cats_i19(s1_v85689, s2_v85690)

fun strlen_i20(s_v85691) =
  match s_v85691 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v85692 s_v85693 ⇒ strlen_i20(s_v85693).+1
  end

val strlenclo_i105 = fn s_v85694 ⇒ strlen_i20(s_v85694)

fun eqs_i21(s1_v85695, s2_v85696) =
  match s1_v85695 with
  | EmptyString_c6  ⇒
    match s2_v85696 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v85697 __v85698 ⇒ 0
    end
  | String_c7 c1_v85699 s1_v85700 ⇒
    match s2_v85696 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v85701 s2_v85702 ⇒
      andb_i1(eqc_i17(c1_v85699, c2_v85701), eqs_i21(s1_v85700, s2_v85702))
    end
  end

val eqsclo_i106 = fn s1_v85703 s2_v85704 ⇒ eqs_i21(s1_v85703, s2_v85704)

fun compares_i22(s1_v85705, s2_v85706) =
  match s1_v85705 with
  | EmptyString_c6  ⇒
    match s2_v85706 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v85707 __v85708 ⇒ LT_c1
    end
  | String_c7 c1_v85709 s1_v85710 ⇒
    match s2_v85706 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v85711 s2_v85712 ⇒
      match comparec_i18(c1_v85709, c2_v85711) with
      | EQ_c3  ⇒ compares_i22(s1_v85710, s2_v85712) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i107 =
  fn s1_v85713 s2_v85714 ⇒ compares_i22(s1_v85713, s2_v85714)

fun and_thenUUU_i59(A_v85715, B_v85716, opt_v85717, f_v85718) =
  match opt_v85717 with
  | NoneUU_c19  ⇒ NoneUU_c19 | SomeUU_c20 x_v85719 ⇒ (f_v85718) x_v85719
  end

val and_thenUUUclo_i108 =
  fn A_v85720 B_v85721 opt_v85722 ⇒
    ln f_v85723 ⇒ and_thenUUU_i59(A_v85720, B_v85721, opt_v85722, f_v85723)

fun and_thenUUL_i58(A_v85724, B_v85725, opt_v85726, f_v85727) =
  match opt_v85726 with
  | NoneUL_c17  ⇒ NoneUL_c17 | SomeUL_c18 x_v85728 ⇒ (f_v85727) x_v85728
  end

val and_thenUULclo_i109 =
  fn A_v85729 B_v85730 opt_v85731 ⇒
    ln f_v85732 ⇒ and_thenUUL_i58(A_v85729, B_v85730, opt_v85731, f_v85732)

fun and_thenULU_i57(A_v85733, B_v85734, opt_v85735, f_v85736) =
  match opt_v85735 with
  | NoneUU_c19  ⇒ NoneLU_c15 | SomeUU_c20 x_v85737 ⇒ (f_v85736) x_v85737
  end

val and_thenULUclo_i110 =
  fn A_v85738 B_v85739 opt_v85740 ⇒
    ln f_v85741 ⇒ and_thenULU_i57(A_v85738, B_v85739, opt_v85740, f_v85741)

fun and_thenULL_i56(A_v85742, B_v85743, opt_v85744, f_v85745) =
  match opt_v85744 with
  | NoneUL_c17  ⇒ NoneLL_c13 | SomeUL_c18 x_v85746 ⇒ (f_v85745) x_v85746
  end

val and_thenULLclo_i111 =
  fn A_v85747 B_v85748 opt_v85749 ⇒
    ln f_v85750 ⇒ and_thenULL_i56(A_v85747, B_v85748, opt_v85749, f_v85750)

fun and_thenLUL_i54(A_v85751, B_v85752, opt_v85753, f_v85754) =
  match opt_v85753 with
  | NoneLL_c13  ⇒ NoneUL_c17 | SomeLL_c14 x_v85755 ⇒ (f_v85754) x_v85755
  end

val and_thenLULclo_i112 =
  fn A_v85756 B_v85757 opt_v85758 ⇒
    ln f_v85759 ⇒ and_thenLUL_i54(A_v85756, B_v85757, opt_v85758, f_v85759)

fun and_thenLLL_i52(A_v85760, B_v85761, opt_v85762, f_v85763) =
  match opt_v85762 with
  | NoneLL_c13  ⇒ NoneLL_c13 | SomeLL_c14 x_v85764 ⇒ (f_v85763) x_v85764
  end

val and_thenLLLclo_i113 =
  fn A_v85765 B_v85766 opt_v85767 ⇒
    ln f_v85768 ⇒ and_thenLLL_i52(A_v85765, B_v85766, opt_v85767, f_v85768)

fun lenUU_i67(A_v85769, xs_v85770) =
  match xs_v85770 with
  | nilUU_c27  ⇒ (0, nilUU_c27)
  | consUU_c28 x_v85771 xs_v85772 ⇒
    match lenUU_i67(NULL, xs_v85772) with
    | (n_v85773, xs_v85774) ⇒
      (n_v85773.+1, (consUU_c28 x_v85771 xs_v85774))
    end
  end

val lenUUclo_i114 = fn A_v85775 xs_v85776 ⇒ lenUU_i67(A_v85775, xs_v85776)

fun lenUL_i66(A_v85777, xs_v85778) =
  match xs_v85778 with
  | nilUL_c25  ⇒ (0, nilUL_c25)
  | consUL_c26 x_v85779 xs_v85780 ⇒
    match lenUL_i66(NULL, xs_v85780) with
    | (n_v85781, xs_v85782) ⇒
      (n_v85781.+1, (consUL_c26 x_v85779 xs_v85782))
    end
  end

val lenULclo_i115 = fn A_v85783 xs_v85784 ⇒ lenUL_i66(A_v85783, xs_v85784)

fun lenLL_i64(A_v85785, xs_v85786) =
  match xs_v85786 with
  | nilLL_c21  ⇒ (0, nilLL_c21)
  | consLL_c22 x_v85787 xs_v85788 ⇒
    match lenLL_i64(NULL, xs_v85788) with
    | (n_v85789, xs_v85790) ⇒
      (n_v85789.+1, (consLL_c22 x_v85787 xs_v85790))
    end
  end

val lenLLclo_i116 = fn A_v85791 xs_v85792 ⇒ lenLL_i64(A_v85791, xs_v85792)

fun appendUU_i71(A_v85793, xs_v85794, ys_v85795) =
  match xs_v85794 with
  | nilUU_c27  ⇒ ys_v85795
  | consUU_c28 x_v85796 xs_v85797 ⇒
    (consUU_c28 x_v85796 appendUU_i71(NULL, xs_v85797, ys_v85795))
  end

val appendUUclo_i117 =
  fn A_v85798 xs_v85799 ⇒
    ln ys_v85800 ⇒ appendUU_i71(A_v85798, xs_v85799, ys_v85800)

fun appendUL_i70(A_v85801, xs_v85802, ys_v85803) =
  match xs_v85802 with
  | nilUL_c25  ⇒ ys_v85803
  | consUL_c26 x_v85804 xs_v85805 ⇒
    (consUL_c26 x_v85804 appendUL_i70(NULL, xs_v85805, ys_v85803))
  end

val appendULclo_i118 =
  fn A_v85806 xs_v85807 ⇒
    ln ys_v85808 ⇒ appendUL_i70(A_v85806, xs_v85807, ys_v85808)

fun appendLL_i68(A_v85809, xs_v85810, ys_v85811) =
  match xs_v85810 with
  | nilLL_c21  ⇒ ys_v85811
  | consLL_c22 x_v85812 xs_v85813 ⇒
    (consLL_c22 x_v85812 appendLL_i68(NULL, xs_v85813, ys_v85811))
  end

val appendLLclo_i119 =
  fn A_v85814 xs_v85815 ⇒
    ln ys_v85816 ⇒ appendLL_i68(A_v85814, xs_v85815, ys_v85816)

fun readline_i33(__v85817) =
  ln __v85818 ⇒
    let ch_v85819 = (ln __v85820 ⇒ open stdin) NULL in
    let ch_v85821 =
      ((fn x_v85822 ⇒ ln __v85823 ⇒ send(ch_v85819, x_v85822)) 1) NULL
    in
    let __v85824 = (ln __v85825 ⇒ recv(ch_v85821)) NULL in
    (match __v85824 with
     | (s_v85826, ch_v85827) ⇒
       ln __v85828 ⇒
         let ch_v85829 =
           ((fn x_v85830 ⇒ ln __v85831 ⇒ send(ch_v85827, x_v85830)) 0)
             NULL
         in
         let __v85832 =
           (ln __v85833 ⇒ let __v85834 = ch_v85829 in NULL) NULL
         in (ln __v85835 ⇒ s_v85826) NULL
     end) NULL

val readlineclo_i120 = fn __v85836 ⇒ readline_i33(__v85836)

fun print_i34(s_v85837) =
  ln __v85838 ⇒
    let ch_v85839 = (ln __v85840 ⇒ open stdout) NULL in
    let ch_v85841 =
      ((fn x_v85842 ⇒ ln __v85843 ⇒ send(ch_v85839, x_v85842)) 1) NULL
    in
    let ch_v85844 =
      ((fn x_v85845 ⇒ ln __v85846 ⇒ send(ch_v85841, x_v85845)) s_v85837)
        NULL
    in
    let ch_v85847 =
      ((fn x_v85848 ⇒ ln __v85849 ⇒ send(ch_v85844, x_v85848)) 0) NULL
    in (ln __v85850 ⇒ let __v85851 = ch_v85847 in NULL) NULL

val printclo_i121 = fn s_v85852 ⇒ print_i34(s_v85852)

fun prerr_i35(s_v85853) =
  ln __v85854 ⇒
    let ch_v85855 = (ln __v85856 ⇒ open stderr) NULL in
    let ch_v85857 =
      ((fn x_v85858 ⇒ ln __v85859 ⇒ send(ch_v85855, x_v85858)) 1) NULL
    in
    let ch_v85860 =
      ((fn x_v85861 ⇒ ln __v85862 ⇒ send(ch_v85857, x_v85861)) s_v85853)
        NULL
    in
    let ch_v85863 =
      ((fn x_v85864 ⇒ ln __v85865 ⇒ send(ch_v85860, x_v85864)) 0) NULL
    in (ln __v85866 ⇒ let __v85867 = ch_v85863 in NULL) NULL

val prerrclo_i122 = fn s_v85868 ⇒ prerr_i35(s_v85868)

val digits_i36 =
  (consUU_c28
    "0"
    (consUU_c28
      "1"
      (consUU_c28
        "2"
        (consUU_c28
          "3"
          (consUU_c28
            "4"
            (consUU_c28
              "5"
              (consUU_c28
                "6"
                (consUU_c28 "7" (consUU_c28 "8" (consUU_c28 "9" nilUU_c27))))))))))

fun get_at_i37(A_v85869, n_v85870, xs_v85871, a_v85872) =
  let __v85873 = n_v85870 in
  if __v85873 then
    let n_v85874 = __v85873.-1 in
    match xs_v85871 with
    | nilUU_c27  ⇒ a_v85872
    | consUU_c28 __v85875 xs_v85876 ⇒
      get_at_i37(NULL, n_v85874, xs_v85876, a_v85872)
    end
  else
    match xs_v85871 with
    | nilUU_c27  ⇒ a_v85872 | consUU_c28 x_v85877 __v85878 ⇒ x_v85877
    end

val get_atclo_i123 =
  fn A_v85879 n_v85880 xs_v85881 a_v85882 ⇒
    get_at_i37(A_v85879, n_v85880, xs_v85881, a_v85882)

fun string_of_digit_i38(n_v85883) =
  get_at_i37(NULL, n_v85883, digits_i36, EmptyString_c6)

val string_of_digitclo_i124 = fn n_v85884 ⇒ string_of_digit_i38(n_v85884)

fun string_of_nat_i39(n_v85885) =
  let s_v85886 = string_of_digit_i38(modn_i16(n_v85885, 10)) in
  let n_v85887 = divn_i15(n_v85885, 10) in
  if ltn_i6(0, n_v85887) then
    cats_i19(string_of_nat_i39(n_v85887), s_v85886)
  else
    s_v85886

val string_of_natclo_i125 = fn n_v85888 ⇒ string_of_nat_i39(n_v85888)

fun digit_of_char_i40(c_v85889) =
  if eqc_i17(c_v85889, '0') then
    (SomeUL_c18 0)
  else
    if eqc_i17(c_v85889, '1') then
      (SomeUL_c18 1)
    else
      if eqc_i17(c_v85889, '2') then
        (SomeUL_c18 2)
      else
        if eqc_i17(c_v85889, '3') then
          (SomeUL_c18 3)
        else
          if eqc_i17(c_v85889, '4') then
            (SomeUL_c18 4)
          else
            if eqc_i17(c_v85889, '5') then
              (SomeUL_c18 5)
            else
              if eqc_i17(c_v85889, '6') then
                (SomeUL_c18 6)
              else
                if eqc_i17(c_v85889, '7') then
                  (SomeUL_c18 7)
                else
                  if eqc_i17(c_v85889, '8') then
                    (SomeUL_c18 8)
                  else
                    if eqc_i17(c_v85889, '9') then
                      (SomeUL_c18 9)
                    else
                      NoneUL_c17

val digit_of_charclo_i126 = fn c_v85890 ⇒ digit_of_char_i40(c_v85890)

fun nat_of_string_loop_i41(s_v85891, acc_v85892) =
  match s_v85891 with
  | EmptyString_c6  ⇒ (SomeUL_c18 acc_v85892)
  | String_c7 c_v85893 s_v85894 ⇒
    match digit_of_char_i40(c_v85893) with
    | NoneUL_c17  ⇒ NoneUL_c17
    | SomeUL_c18 n_v85895 ⇒
      nat_of_string_loop_i41(s_v85894,
                             addn_i12(muln_i14(acc_v85892, 10), n_v85895))
    end
  end

val nat_of_string_loopclo_i127 =
  fn s_v85896 acc_v85897 ⇒ nat_of_string_loop_i41(s_v85896, acc_v85897)

fun nat_of_string_i42(s_v85898) = nat_of_string_loop_i41(s_v85898, 0)

val nat_of_stringclo_i128 = fn s_v85899 ⇒ nat_of_string_i42(s_v85899)

fun splitU_i73(zs_v85900) =
  match zs_v85900 with
  | nilUU_c27  ⇒ (nilUU_c27, nilUU_c27)
  | consUU_c28 x_v85901 zs_v85902 ⇒
    match zs_v85902 with
    | nilUU_c27  ⇒ ((consUU_c28 x_v85901 nilUU_c27), nilUU_c27)
    | consUU_c28 y_v85903 zs_v85904 ⇒
      let __v85905 = splitU_i73(zs_v85904) in
      match __v85905 with
      | (xs_v85906, ys_v85907) ⇒
        ((consUU_c28 x_v85901 xs_v85906), (consUU_c28 y_v85903 ys_v85907))
      end
    end
  end

val splitUclo_i129 = fn zs_v85908 ⇒ splitU_i73(zs_v85908)

fun splitL_i72(zs_v85909) =
  match zs_v85909 with
  | nilUL_c25  ⇒ (nilUL_c25, nilUL_c25)
  | consUL_c26 x_v85910 zs_v85911 ⇒
    match zs_v85911 with
    | nilUL_c25  ⇒ ((consUL_c26 x_v85910 nilUL_c25), nilUL_c25)
    | consUL_c26 y_v85912 zs_v85913 ⇒
      let __v85914 = splitL_i72(zs_v85913) in
      match __v85914 with
      | (xs_v85915, ys_v85916) ⇒
        ((consUL_c26 x_v85910 xs_v85915), (consUL_c26 y_v85912 ys_v85916))
      end
    end
  end

val splitLclo_i130 = fn zs_v85917 ⇒ splitL_i72(zs_v85917)

fun mergeU_i75(xs_v85918, ys_v85919) =
  match xs_v85918 with
  | nilUU_c27  ⇒ ys_v85919
  | consUU_c28 x_v85920 xs0_v85921 ⇒
    match ys_v85919 with
    | nilUU_c27  ⇒ (consUU_c28 x_v85920 xs0_v85921)
    | consUU_c28 y_v85922 ys0_v85923 ⇒
      if lten_i5(x_v85920, y_v85922) then
        (consUU_c28
          x_v85920 mergeU_i75(xs0_v85921, (consUU_c28 y_v85922 ys0_v85923)))
      else
        (consUU_c28
          y_v85922 mergeU_i75((consUU_c28 x_v85920 xs0_v85921), ys0_v85923))
    end
  end

val mergeUclo_i131 =
  fn xs_v85924 ⇒ ln ys_v85925 ⇒ mergeU_i75(xs_v85924, ys_v85925)

fun mergeL_i74(xs_v85926, ys_v85927) =
  match xs_v85926 with
  | nilUL_c25  ⇒ ys_v85927
  | consUL_c26 x_v85928 xs0_v85929 ⇒
    match ys_v85927 with
    | nilUL_c25  ⇒ (consUL_c26 x_v85928 xs0_v85929)
    | consUL_c26 y_v85930 ys0_v85931 ⇒
      if lten_i5(x_v85928, y_v85930) then
        (consUL_c26
          x_v85928 mergeL_i74(xs0_v85929, (consUL_c26 y_v85930 ys0_v85931)))
      else
        (consUL_c26
          y_v85930 mergeL_i74((consUL_c26 x_v85928 xs0_v85929), ys0_v85931))
    end
  end

val mergeLclo_i132 =
  fn xs_v85932 ⇒ ln ys_v85933 ⇒ mergeL_i74(xs_v85932, ys_v85933)

fun msortU_i77(zs_v85934) =
  match zs_v85934 with
  | nilUU_c27  ⇒ nilUU_c27
  | consUU_c28 x_v85935 zs_v85936 ⇒
    match zs_v85936 with
    | nilUU_c27  ⇒ (consUU_c28 x_v85935 nilUU_c27)
    | consUU_c28 y_v85937 zs_v85938 ⇒
      let __v85939 =
        splitU_i73((consUU_c28 x_v85935 (consUU_c28 y_v85937 zs_v85938)))
      in
      match __v85939 with
      | (xs_v85940, ys_v85941) ⇒
        mergeU_i75(msortU_i77(xs_v85940), msortU_i77(ys_v85941))
      end
    end
  end

val msortUclo_i133 = fn zs_v85942 ⇒ msortU_i77(zs_v85942)

fun msortL_i76(zs_v85943) =
  match zs_v85943 with
  | nilUL_c25  ⇒ nilUL_c25
  | consUL_c26 x_v85944 zs_v85945 ⇒
    match zs_v85945 with
    | nilUL_c25  ⇒ (consUL_c26 x_v85944 nilUL_c25)
    | consUL_c26 y_v85946 zs_v85947 ⇒
      let __v85948 =
        splitL_i72((consUL_c26 x_v85944 (consUL_c26 y_v85946 zs_v85947)))
      in
      match __v85948 with
      | (xs_v85949, ys_v85950) ⇒
        mergeL_i74(msortL_i76(xs_v85949), msortL_i76(ys_v85950))
      end
    end
  end

val msortLclo_i134 = fn zs_v85951 ⇒ msortL_i76(zs_v85951)

fun cmsort_workerU_i81(n_v85952, zs_v85953, c_v85954) =
  let __v85955 = n_v85952 in
  if __v85955 then
    let n0_v85956 = __v85955.-1 in
    (match zs_v85953 with
     | nilUU_c27  ⇒
       ln c_v85957 __v85958 ⇒
         let c_v85959 =
           ((fn x_v85960 ⇒ ln __v85961 ⇒ send(c_v85957, x_v85960))
              (UniqU_c30 nilUU_c27 NULL))
             NULL
         in (ln __v85962 ⇒ let __v85963 = c_v85959 in NULL) NULL
     | consUU_c28 z0_v85964 zs0_v85965 ⇒
       ln c_v85966 ⇒
         (match zs0_v85965 with
          | nilUU_c27  ⇒
            ln c_v85967 __v85968 ⇒
              let c_v85969 =
                ((fn x_v85970 ⇒ ln __v85971 ⇒ send(c_v85967, x_v85970))
                   (UniqU_c30 (consUU_c28 z0_v85964 nilUU_c27) NULL))
                  NULL
              in (ln __v85972 ⇒ let __v85973 = c_v85969 in NULL) NULL
          | consUU_c28 z1_v85974 zs1_v85975 ⇒
            ln c_v85976 ⇒
              (match splitU_i73((consUU_c28
                                  z0_v85964 (consUU_c28 z1_v85974 zs1_v85975))) with
               | (xs0_v85977, ys0_v85978) ⇒
                 ln e_v85979 __v85980 ⇒
                   let r1_v85981 =
                     (ln __v85982 ⇒
                        fork r1_v85983 in
                          (cmsort_workerU_i81(n0_v85956, xs0_v85977,
                                              r1_v85983))
                            NULL)
                       NULL
                   in
                   let r2_v85984 =
                     (ln __v85985 ⇒
                        fork r2_v85986 in
                          (cmsort_workerU_i81(n0_v85956, ys0_v85978,
                                              r2_v85986))
                            NULL)
                       NULL
                   in
                   let __v85987 = (ln __v85988 ⇒ recv(r1_v85981)) NULL in
                   (match __v85987 with
                    | (msg1_v85989, r1_v85990) ⇒
                      ln __v85991 ⇒
                        let __v85992 = (ln __v85993 ⇒ recv(r2_v85984)) NULL
                        in
                        (match __v85992 with
                         | (msg2_v85994, r2_v85995) ⇒
                           match msg1_v85989 with
                           | UniqU_c30 xs1_v85996 pf1_v85997 ⇒
                             match msg2_v85994 with
                             | UniqU_c30 xs2_v85998 pf2_v85999 ⇒
                               let zs_v86000 =
                                 mergeU_i75(xs1_v85996, xs2_v85998)
                               in
                               ln __v86001 ⇒
                                 let c_v86002 =
                                   ((fn x_v86003 ⇒
                                       ln __v86004 ⇒
                                         send(c_v85976, x_v86003))
                                      (UniqU_c30 zs_v86000 NULL))
                                     NULL
                                 in
                                 let __v86005 =
                                   (ln __v86006 ⇒ close(r1_v85990)) NULL
                                 in
                                 let __v86007 =
                                   (ln __v86008 ⇒ close(r2_v85995)) NULL
                                 in
                                 (ln __v86009 ⇒
                                    let __v86010 = c_v86002 in NULL)
                                   NULL
                             end
                           end
                         end) NULL
                    end) NULL
               end) NULL
          end) c_v85966
     end) c_v85954
  else
    ln __v86011 ⇒
      let c_v86012 =
        ((fn x_v86013 ⇒ ln __v86014 ⇒ send(c_v85954, x_v86013))
           (UniqU_c30 msortU_i77(zs_v85953) NULL))
          NULL
      in (ln __v86015 ⇒ let __v86016 = c_v86012 in NULL) NULL

val cmsort_workerUclo_i135 =
  fn n_v86017 zs_v86018 ⇒
    ln c_v86019 ⇒ cmsort_workerU_i81(n_v86017, zs_v86018, c_v86019)

fun cmsort_workerL_i80(n_v86020, zs_v86021, c_v86022) =
  let __v86023 = n_v86020 in
  if __v86023 then
    let n0_v86024 = __v86023.-1 in
    (match zs_v86021 with
     | nilUL_c25  ⇒
       ln c_v86025 __v86026 ⇒
         let c_v86027 =
           ((ln x_v86028 __v86029 ⇒ send(c_v86025, x_v86028))
              (UniqL_c29 nilUL_c25 NULL))
             NULL
         in (ln __v86030 ⇒ let __v86031 = c_v86027 in NULL) NULL
     | consUL_c26 z0_v86032 zs0_v86033 ⇒
       ln c_v86034 ⇒
         (match zs0_v86033 with
          | nilUL_c25  ⇒
            ln c_v86035 __v86036 ⇒
              let c_v86037 =
                ((ln x_v86038 __v86039 ⇒ send(c_v86035, x_v86038))
                   (UniqL_c29 (consUL_c26 z0_v86032 nilUL_c25) NULL))
                  NULL
              in (ln __v86040 ⇒ let __v86041 = c_v86037 in NULL) NULL
          | consUL_c26 z1_v86042 zs1_v86043 ⇒
            ln c_v86044 ⇒
              (match splitL_i72((consUL_c26
                                  z0_v86032 (consUL_c26 z1_v86042 zs1_v86043))) with
               | (xs0_v86045, ys0_v86046) ⇒
                 ln e_v86047 __v86048 ⇒
                   let r1_v86049 =
                     (ln __v86050 ⇒
                        fork r1_v86051 in
                          (cmsort_workerL_i80(n0_v86024, xs0_v86045,
                                              r1_v86051))
                            NULL)
                       NULL
                   in
                   let r2_v86052 =
                     (ln __v86053 ⇒
                        fork r2_v86054 in
                          (cmsort_workerL_i80(n0_v86024, ys0_v86046,
                                              r2_v86054))
                            NULL)
                       NULL
                   in
                   let __v86055 = (ln __v86056 ⇒ recv(r1_v86049)) NULL in
                   (match __v86055 with
                    | (msg1_v86057, r1_v86058) ⇒
                      ln __v86059 ⇒
                        let __v86060 = (ln __v86061 ⇒ recv(r2_v86052)) NULL
                        in
                        (match __v86060 with
                         | (msg2_v86062, r2_v86063) ⇒
                           match msg1_v86057 with
                           | UniqL_c29 xs1_v86064 pf1_v86065 ⇒
                             match msg2_v86062 with
                             | UniqL_c29 xs2_v86066 pf2_v86067 ⇒
                               let zs_v86068 =
                                 mergeL_i74(xs1_v86064, xs2_v86066)
                               in
                               ln __v86069 ⇒
                                 let c_v86070 =
                                   ((ln x_v86071 __v86072 ⇒
                                       send(c_v86044, x_v86071))
                                      (UniqL_c29 zs_v86068 NULL))
                                     NULL
                                 in
                                 let __v86073 =
                                   (ln __v86074 ⇒ close(r1_v86058)) NULL
                                 in
                                 let __v86075 =
                                   (ln __v86076 ⇒ close(r2_v86063)) NULL
                                 in
                                 (ln __v86077 ⇒
                                    let __v86078 = c_v86070 in NULL)
                                   NULL
                             end
                           end
                         end) NULL
                    end) NULL
               end) NULL
          end) c_v86034
     end) c_v86022
  else
    ln __v86079 ⇒
      let c_v86080 =
        ((ln x_v86081 __v86082 ⇒ send(c_v86022, x_v86081))
           (UniqL_c29 msortL_i76(zs_v86021) NULL))
          NULL
      in (ln __v86083 ⇒ let __v86084 = c_v86080 in NULL) NULL

val cmsort_workerLclo_i136 =
  fn n_v86085 zs_v86086 ⇒
    ln c_v86087 ⇒ cmsort_workerL_i80(n_v86085, zs_v86086, c_v86087)

fun cmsortU_i83(zs_v86088) =
  ln __v86089 ⇒
    let c_v86090 =
      (ln __v86091 ⇒
         fork c_v86092 in (cmsort_workerU_i81(4, zs_v86088, c_v86092)) NULL)
        NULL
    in
    let __v86093 = (ln __v86094 ⇒ recv(c_v86090)) NULL in
    (match __v86093 with
     | (msg_v86095, c_v86096) ⇒
       ln __v86097 ⇒
         let __v86098 = (ln __v86099 ⇒ close(c_v86096)) NULL in
         (ln __v86100 ⇒ msg_v86095) NULL
     end) NULL

val cmsortUclo_i137 = fn zs_v86101 ⇒ cmsortU_i83(zs_v86101)

fun cmsortL_i82(zs_v86102) =
  ln __v86103 ⇒
    let c_v86104 =
      (ln __v86105 ⇒
         fork c_v86106 in (cmsort_workerL_i80(4, zs_v86102, c_v86106)) NULL)
        NULL
    in
    let __v86107 = (ln __v86108 ⇒ recv(c_v86104)) NULL in
    (match __v86107 with
     | (msg_v86109, c_v86110) ⇒
       ln __v86111 ⇒
         let __v86112 = (ln __v86113 ⇒ close(c_v86110)) NULL in
         (ln __v86114 ⇒ msg_v86109) NULL
     end) NULL

val cmsortLclo_i138 = fn zs_v86115 ⇒ cmsortL_i82(zs_v86115)

fun mkListU_i85(n_v86116) =
  let __v86117 = n_v86116 in
  if __v86117 then
    let n0_v86118 = __v86117.-1 in
    (consUU_c28 n_v86116 mkListU_i85(n0_v86118))
  else
    nilUU_c27

val mkListUclo_i139 = fn n_v86119 ⇒ mkListU_i85(n_v86119)

fun mkListL_i84(n_v86120) =
  let __v86121 = n_v86120 in
  if __v86121 then
    let n0_v86122 = __v86121.-1 in
    (consUL_c26 n_v86120 mkListL_i84(n0_v86122))
  else
    nilUL_c25

val mkListLclo_i140 = fn n_v86123 ⇒ mkListL_i84(n_v86123)

fun free_i50(A_v86124, ls_v86125) =
  match ls_v86125 with
  | nilUL_c25  ⇒ NULL
  | consUL_c26 __v86126 ls_v86127 ⇒ free_i50(NULL, ls_v86127)
  end

val freeclo_i141 = fn A_v86128 ls_v86129 ⇒ free_i50(A_v86128, ls_v86129)

main =
  (let test_v86130 = mkListL_i84(2000000) in
   ln __v86131 ⇒
     let msg_v86132 = (cmsortL_i82(test_v86130)) NULL in
     (match msg_v86132 with
      | UniqL_c29 sorted_v86133 __v86134 ⇒
        let __v86135 = free_i50(NULL, sorted_v86133) in ln __v86136 ⇒ NULL
      end) NULL)
    NULL

trans23 success--------------------------

fun andb_i1(b1_v88054, b2_v88055) = if b1_v88054 then
                                      b2_v88055
                                    else
                                      0

val andbclo_i86 = fn b1_v88056 b2_v88057 ⇒ andb_i1(b1_v88056, b2_v88057)

fun orb_i2(b1_v88058, b2_v88059) = if b1_v88058 then
                                     1
                                   else
                                     b2_v88059

val orbclo_i87 = fn b1_v88060 b2_v88061 ⇒ orb_i2(b1_v88060, b2_v88061)

fun notb_i3(b_v88062) = if b_v88062 then
                          0
                        else
                          1

val notbclo_i88 = fn b_v88063 ⇒ notb_i3(b_v88063)

fun compareb_i4(b1_v88064, b2_v88065) =
  if b1_v88064 then
    if b2_v88065 then
      EQ_c3
    else
      GT_c2
  else
    if b2_v88065 then
      LT_c1
    else
      EQ_c3

val comparebclo_i89 =
  fn b1_v88066 b2_v88067 ⇒ compareb_i4(b1_v88066, b2_v88067)

fun lten_i5(x_v88068, y_v88069) =
  if x_v88068 then
    if y_v88069 then
      lten_i5(x_v88068.-1, y_v88069.-1)
    else
      0
  else
    1

val ltenclo_i90 = fn x_v88070 y_v88071 ⇒ lten_i5(x_v88070, y_v88071)

fun ltn_i6(x_v88072, y_v88073) = lten_i5(x_v88072.+1, y_v88073)

val ltnclo_i91 = fn x_v88074 y_v88075 ⇒ ltn_i6(x_v88074, y_v88075)

fun gten_i7(x_v88076, y_v88077) = lten_i5(y_v88077, x_v88076)

val gtenclo_i92 = fn x_v88078 y_v88079 ⇒ gten_i7(x_v88078, y_v88079)

fun gtn_i8(x_v88080, y_v88081) = ltn_i6(y_v88081, x_v88080)

val gtnclo_i93 = fn x_v88082 y_v88083 ⇒ gtn_i8(x_v88082, y_v88083)

fun eqn_i9(x_v88084, y_v88085) =
  if x_v88084 then
    if y_v88085 then
      eqn_i9(x_v88084.-1, y_v88085.-1)
    else
      0
  else
    if y_v88085 then
      0
    else
      1

val eqnclo_i94 = fn x_v88086 y_v88087 ⇒ eqn_i9(x_v88086, y_v88087)

fun comparen_i10(n1_v88088, n2_v88089) =
  if n1_v88088 then
    if n2_v88089 then
      comparen_i10(n1_v88088.-1, n2_v88089.-1)
    else
      GT_c2
  else
    if n2_v88089 then
      LT_c1
    else
      EQ_c3

val comparenclo_i95 =
  fn n1_v88090 n2_v88091 ⇒ comparen_i10(n1_v88090, n2_v88091)

fun pred_i11(x_v88092) = if x_v88092 then
                           x_v88092.-1
                         else
                           0

val predclo_i96 = fn x_v88093 ⇒ pred_i11(x_v88093)

fun addn_i12(x_v88094, y_v88095) =
  if x_v88094 then
    addn_i12(x_v88094.-1, y_v88095).+1
  else
    y_v88095

val addnclo_i97 = fn x_v88096 y_v88097 ⇒ addn_i12(x_v88096, y_v88097)

fun subn_i13(x_v88098, y_v88099) =
  if y_v88099 then
    subn_i13(pred_i11(x_v88098), y_v88099.-1)
  else
    x_v88098

val subnclo_i98 = fn x_v88100 y_v88101 ⇒ subn_i13(x_v88100, y_v88101)

fun muln_i14(x_v88102, y_v88103) =
  if x_v88102 then
    addn_i12(y_v88103, muln_i14(x_v88102.-1, y_v88103))
  else
    0

val mulnclo_i99 = fn x_v88104 y_v88105 ⇒ muln_i14(x_v88104, y_v88105)

fun divn_i15(x_v88106, y_v88107) =
  if ltn_i6(x_v88106, y_v88107) then
    0
  else
    divn_i15(subn_i13(x_v88106, y_v88107), y_v88107).+1

val divnclo_i100 = fn x_v88108 y_v88109 ⇒ divn_i15(x_v88108, y_v88109)

fun modn_i16(x_v88110, y_v88111) =
  subn_i13(x_v88110, muln_i14(divn_i15(x_v88110, y_v88111), y_v88111))

val modnclo_i101 = fn x_v88112 y_v88113 ⇒ modn_i16(x_v88112, y_v88113)

fun eqc_i17(c1_v88114, c2_v88115) =
  match c1_v88114 with
  | Char_c5 n1_v88116 ⇒
    match c2_v88115 with
    | Char_c5 n2_v88117 ⇒ eqn_i9(n1_v88116, n2_v88117)
    end
  end

val eqcclo_i102 = fn c1_v88118 c2_v88119 ⇒ eqc_i17(c1_v88118, c2_v88119)

fun comparec_i18(c1_v88120, c2_v88121) =
  match c1_v88120 with
  | Char_c5 n1_v88122 ⇒
    match c2_v88121 with
    | Char_c5 n2_v88123 ⇒ comparen_i10(n1_v88122, n2_v88123)
    end
  end

val comparecclo_i103 =
  fn c1_v88124 c2_v88125 ⇒ comparec_i18(c1_v88124, c2_v88125)

fun cats_i19(s1_v88126, s2_v88127) =
  match s1_v88126 with
  | EmptyString_c6  ⇒ s2_v88127
  | String_c7 c_v88128 s1_v88129 ⇒
    (String_c7 c_v88128 cats_i19(s1_v88129, s2_v88127))
  end

val catsclo_i104 = fn s1_v88130 s2_v88131 ⇒ cats_i19(s1_v88130, s2_v88131)

fun strlen_i20(s_v88132) =
  match s_v88132 with
  | EmptyString_c6  ⇒ 0
  | String_c7 __v88133 s_v88134 ⇒ strlen_i20(s_v88134).+1
  end

val strlenclo_i105 = fn s_v88135 ⇒ strlen_i20(s_v88135)

fun eqs_i21(s1_v88136, s2_v88137) =
  match s1_v88136 with
  | EmptyString_c6  ⇒
    match s2_v88137 with
    | EmptyString_c6  ⇒ 1 | String_c7 __v88138 __v88139 ⇒ 0
    end
  | String_c7 c1_v88140 s1_v88141 ⇒
    match s2_v88137 with
    | EmptyString_c6  ⇒ 0
    | String_c7 c2_v88142 s2_v88143 ⇒
      andb_i1(eqc_i17(c1_v88140, c2_v88142), eqs_i21(s1_v88141, s2_v88143))
    end
  end

val eqsclo_i106 = fn s1_v88144 s2_v88145 ⇒ eqs_i21(s1_v88144, s2_v88145)

fun compares_i22(s1_v88146, s2_v88147) =
  match s1_v88146 with
  | EmptyString_c6  ⇒
    match s2_v88147 with
    | EmptyString_c6  ⇒ EQ_c3 | String_c7 __v88148 __v88149 ⇒ LT_c1
    end
  | String_c7 c1_v88150 s1_v88151 ⇒
    match s2_v88147 with
    | EmptyString_c6  ⇒ GT_c2
    | String_c7 c2_v88152 s2_v88153 ⇒
      match comparec_i18(c1_v88150, c2_v88152) with
      | EQ_c3  ⇒ compares_i22(s1_v88151, s2_v88153) | LT_c1  ⇒ LT_c1
      | GT_c2  ⇒ GT_c2
      end
    end
  end

val comparesclo_i107 =
  fn s1_v88154 s2_v88155 ⇒ compares_i22(s1_v88154, s2_v88155)

fun and_thenUUU_i59(A_v88156, B_v88157, opt_v88158, f_v88159) =
  match opt_v88158 with
  | NoneUU_c19  ⇒ NoneUU_c19 | SomeUU_c20 x_v88160 ⇒ (f_v88159) x_v88160
  end

val and_thenUUUclo_i108 =
  fn A_v88161 B_v88162 opt_v88163 ⇒
    ln f_v88164 ⇒ and_thenUUU_i59(A_v88161, B_v88162, opt_v88163, f_v88164)

fun and_thenUUL_i58(A_v88165, B_v88166, opt_v88167, f_v88168) =
  match opt_v88167 with
  | NoneUL_c17  ⇒ NoneUL_c17 | SomeUL_c18 x_v88169 ⇒ (f_v88168) x_v88169
  end

val and_thenUULclo_i109 =
  fn A_v88170 B_v88171 opt_v88172 ⇒
    ln f_v88173 ⇒ and_thenUUL_i58(A_v88170, B_v88171, opt_v88172, f_v88173)

fun and_thenULU_i57(A_v88174, B_v88175, opt_v88176, f_v88177) =
  match opt_v88176 with
  | NoneUU_c19  ⇒ NoneLU_c15 | SomeUU_c20 x_v88178 ⇒ (f_v88177) x_v88178
  end

val and_thenULUclo_i110 =
  fn A_v88179 B_v88180 opt_v88181 ⇒
    ln f_v88182 ⇒ and_thenULU_i57(A_v88179, B_v88180, opt_v88181, f_v88182)

fun and_thenULL_i56(A_v88183, B_v88184, opt_v88185, f_v88186) =
  match opt_v88185 with
  | NoneUL_c17  ⇒ NoneLL_c13 | SomeUL_c18 x_v88187 ⇒ (f_v88186) x_v88187
  end

val and_thenULLclo_i111 =
  fn A_v88188 B_v88189 opt_v88190 ⇒
    ln f_v88191 ⇒ and_thenULL_i56(A_v88188, B_v88189, opt_v88190, f_v88191)

fun and_thenLUL_i54(A_v88192, B_v88193, opt_v88194, f_v88195) =
  match opt_v88194 with
  | NoneLL_c13  ⇒ NoneUL_c17 | SomeLL_c14 x_v88196 ⇒ (f_v88195) x_v88196
  end

val and_thenLULclo_i112 =
  fn A_v88197 B_v88198 opt_v88199 ⇒
    ln f_v88200 ⇒ and_thenLUL_i54(A_v88197, B_v88198, opt_v88199, f_v88200)

fun and_thenLLL_i52(A_v88201, B_v88202, opt_v88203, f_v88204) =
  match opt_v88203 with
  | NoneLL_c13  ⇒ NoneLL_c13 | SomeLL_c14 x_v88205 ⇒ (f_v88204) x_v88205
  end

val and_thenLLLclo_i113 =
  fn A_v88206 B_v88207 opt_v88208 ⇒
    ln f_v88209 ⇒ and_thenLLL_i52(A_v88206, B_v88207, opt_v88208, f_v88209)

fun lenUU_i67(A_v88210, xs_v88211) =
  match xs_v88211 with
  | nilUU_c27  ⇒ (0, nilUU_c27)
  | consUU_c28 x_v88212 xs_v88213 ⇒
    match lenUU_i67(NULL, xs_v88213) with
    | (n_v88214, xs_v88215) ⇒
      (n_v88214.+1, (consUU_c28 x_v88212 xs_v88215))
    end
  end

val lenUUclo_i114 = fn A_v88216 xs_v88217 ⇒ lenUU_i67(A_v88216, xs_v88217)

fun lenUL_i66(A_v88218, xs_v88219) =
  match xs_v88219 with
  | nilUL_c25  ⇒ (0, nilUL_c25)
  | consUL_c26 x_v88220 xs_v88221 ⇒
    match lenUL_i66(NULL, xs_v88221) with
    | (n_v88222, xs_v88223) ⇒
      (n_v88222.+1, (consUL_c26 x_v88220 xs_v88223))
    end
  end

val lenULclo_i115 = fn A_v88224 xs_v88225 ⇒ lenUL_i66(A_v88224, xs_v88225)

fun lenLL_i64(A_v88226, xs_v88227) =
  match xs_v88227 with
  | nilLL_c21  ⇒ (0, nilLL_c21)
  | consLL_c22 x_v88228 xs_v88229 ⇒
    match lenLL_i64(NULL, xs_v88229) with
    | (n_v88230, xs_v88231) ⇒
      (n_v88230.+1, (consLL_c22 x_v88228 xs_v88231))
    end
  end

val lenLLclo_i116 = fn A_v88232 xs_v88233 ⇒ lenLL_i64(A_v88232, xs_v88233)

fun appendUU_i71(A_v88234, xs_v88235, ys_v88236) =
  match xs_v88235 with
  | nilUU_c27  ⇒ ys_v88236
  | consUU_c28 x_v88237 xs_v88238 ⇒
    (consUU_c28 x_v88237 appendUU_i71(NULL, xs_v88238, ys_v88236))
  end

val appendUUclo_i117 =
  fn A_v88239 xs_v88240 ⇒
    ln ys_v88241 ⇒ appendUU_i71(A_v88239, xs_v88240, ys_v88241)

fun appendUL_i70(A_v88242, xs_v88243, ys_v88244) =
  match xs_v88243 with
  | nilUL_c25  ⇒ ys_v88244
  | consUL_c26 x_v88245 xs_v88246 ⇒
    (consUL_c26 x_v88245 appendUL_i70(NULL, xs_v88246, ys_v88244))
  end

val appendULclo_i118 =
  fn A_v88247 xs_v88248 ⇒
    ln ys_v88249 ⇒ appendUL_i70(A_v88247, xs_v88248, ys_v88249)

fun appendLL_i68(A_v88250, xs_v88251, ys_v88252) =
  match xs_v88251 with
  | nilLL_c21  ⇒ ys_v88252
  | consLL_c22 x_v88253 xs_v88254 ⇒
    (consLL_c22 x_v88253 appendLL_i68(NULL, xs_v88254, ys_v88252))
  end

val appendLLclo_i119 =
  fn A_v88255 xs_v88256 ⇒
    ln ys_v88257 ⇒ appendLL_i68(A_v88255, xs_v88256, ys_v88257)

fun readline_i33(__v88258) =
  ln __v88259 ⇒
    let ch_v88260 = open stdin in
    let ch_v88261 = send(ch_v88260, 1) in
    let __v88262 = recv(ch_v88261) in
    match __v88262 with
    | (s_v88263, ch_v88264) ⇒
      let ch_v88265 = send(ch_v88264, 0) in s_v88263
    end

val readlineclo_i120 = fn __v88266 ⇒ readline_i33(__v88266)

fun print_i34(s_v88267) =
  ln __v88268 ⇒
    let ch_v88269 = open stdout in
    let ch_v88270 = send(ch_v88269, 1) in
    let ch_v88271 = send(ch_v88270, s_v88267) in
    let ch_v88272 = send(ch_v88271, 0) in NULL

val printclo_i121 = fn s_v88273 ⇒ print_i34(s_v88273)

fun prerr_i35(s_v88274) =
  ln __v88275 ⇒
    let ch_v88276 = open stderr in
    let ch_v88277 = send(ch_v88276, 1) in
    let ch_v88278 = send(ch_v88277, s_v88274) in
    let ch_v88279 = send(ch_v88278, 0) in NULL

val prerrclo_i122 = fn s_v88280 ⇒ prerr_i35(s_v88280)

val digits_i36 =
  (consUU_c28
    "0"
    (consUU_c28
      "1"
      (consUU_c28
        "2"
        (consUU_c28
          "3"
          (consUU_c28
            "4"
            (consUU_c28
              "5"
              (consUU_c28
                "6"
                (consUU_c28 "7" (consUU_c28 "8" (consUU_c28 "9" nilUU_c27))))))))))

fun get_at_i37(A_v88281, n_v88282, xs_v88283, a_v88284) =
  if n_v88282 then
    match xs_v88283 with
    | nilUU_c27  ⇒ a_v88284
    | consUU_c28 __v88285 xs_v88286 ⇒
      get_at_i37(NULL, n_v88282.-1, xs_v88286, a_v88284)
    end
  else
    match xs_v88283 with
    | nilUU_c27  ⇒ a_v88284 | consUU_c28 x_v88287 __v88288 ⇒ x_v88287
    end

val get_atclo_i123 =
  fn A_v88289 n_v88290 xs_v88291 a_v88292 ⇒
    get_at_i37(A_v88289, n_v88290, xs_v88291, a_v88292)

fun string_of_digit_i38(n_v88293) =
  get_at_i37(NULL, n_v88293, digits_i36, EmptyString_c6)

val string_of_digitclo_i124 = fn n_v88294 ⇒ string_of_digit_i38(n_v88294)

fun string_of_nat_i39(n_v88295) =
  let s_v88296 = string_of_digit_i38(modn_i16(n_v88295, 10)) in
  let n_v88297 = divn_i15(n_v88295, 10) in
  if ltn_i6(0, n_v88297) then
    cats_i19(string_of_nat_i39(n_v88297), s_v88296)
  else
    s_v88296

val string_of_natclo_i125 = fn n_v88298 ⇒ string_of_nat_i39(n_v88298)

fun digit_of_char_i40(c_v88299) =
  if eqc_i17(c_v88299, '0') then
    (SomeUL_c18 0)
  else
    if eqc_i17(c_v88299, '1') then
      (SomeUL_c18 1)
    else
      if eqc_i17(c_v88299, '2') then
        (SomeUL_c18 2)
      else
        if eqc_i17(c_v88299, '3') then
          (SomeUL_c18 3)
        else
          if eqc_i17(c_v88299, '4') then
            (SomeUL_c18 4)
          else
            if eqc_i17(c_v88299, '5') then
              (SomeUL_c18 5)
            else
              if eqc_i17(c_v88299, '6') then
                (SomeUL_c18 6)
              else
                if eqc_i17(c_v88299, '7') then
                  (SomeUL_c18 7)
                else
                  if eqc_i17(c_v88299, '8') then
                    (SomeUL_c18 8)
                  else
                    if eqc_i17(c_v88299, '9') then
                      (SomeUL_c18 9)
                    else
                      NoneUL_c17

val digit_of_charclo_i126 = fn c_v88300 ⇒ digit_of_char_i40(c_v88300)

fun nat_of_string_loop_i41(s_v88301, acc_v88302) =
  match s_v88301 with
  | EmptyString_c6  ⇒ (SomeUL_c18 acc_v88302)
  | String_c7 c_v88303 s_v88304 ⇒
    match digit_of_char_i40(c_v88303) with
    | NoneUL_c17  ⇒ NoneUL_c17
    | SomeUL_c18 n_v88305 ⇒
      nat_of_string_loop_i41(s_v88304,
                             addn_i12(muln_i14(acc_v88302, 10), n_v88305))
    end
  end

val nat_of_string_loopclo_i127 =
  fn s_v88306 acc_v88307 ⇒ nat_of_string_loop_i41(s_v88306, acc_v88307)

fun nat_of_string_i42(s_v88308) = nat_of_string_loop_i41(s_v88308, 0)

val nat_of_stringclo_i128 = fn s_v88309 ⇒ nat_of_string_i42(s_v88309)

fun splitU_i73(zs_v88310) =
  match zs_v88310 with
  | nilUU_c27  ⇒ (nilUU_c27, nilUU_c27)
  | consUU_c28 x_v88311 zs_v88312 ⇒
    match zs_v88312 with
    | nilUU_c27  ⇒ ((consUU_c28 x_v88311 nilUU_c27), nilUU_c27)
    | consUU_c28 y_v88313 zs_v88314 ⇒
      let __v88315 = splitU_i73(zs_v88314) in
      match __v88315 with
      | (xs_v88316, ys_v88317) ⇒
        ((consUU_c28 x_v88311 xs_v88316), (consUU_c28 y_v88313 ys_v88317))
      end
    end
  end

val splitUclo_i129 = fn zs_v88318 ⇒ splitU_i73(zs_v88318)

fun splitL_i72(zs_v88319) =
  match zs_v88319 with
  | nilUL_c25  ⇒ (nilUL_c25, nilUL_c25)
  | consUL_c26 x_v88320 zs_v88321 ⇒
    match zs_v88321 with
    | nilUL_c25  ⇒ ((consUL_c26 x_v88320 nilUL_c25), nilUL_c25)
    | consUL_c26 y_v88322 zs_v88323 ⇒
      let __v88324 = splitL_i72(zs_v88323) in
      match __v88324 with
      | (xs_v88325, ys_v88326) ⇒
        ((consUL_c26 x_v88320 xs_v88325), (consUL_c26 y_v88322 ys_v88326))
      end
    end
  end

val splitLclo_i130 = fn zs_v88327 ⇒ splitL_i72(zs_v88327)

fun mergeU_i75(xs_v88328, ys_v88329) =
  match xs_v88328 with
  | nilUU_c27  ⇒ ys_v88329
  | consUU_c28 x_v88330 xs0_v88331 ⇒
    match ys_v88329 with
    | nilUU_c27  ⇒ (consUU_c28 x_v88330 xs0_v88331)
    | consUU_c28 y_v88332 ys0_v88333 ⇒
      if lten_i5(x_v88330, y_v88332) then
        (consUU_c28
          x_v88330 mergeU_i75(xs0_v88331, (consUU_c28 y_v88332 ys0_v88333)))
      else
        (consUU_c28
          y_v88332 mergeU_i75((consUU_c28 x_v88330 xs0_v88331), ys0_v88333))
    end
  end

val mergeUclo_i131 =
  fn xs_v88334 ⇒ ln ys_v88335 ⇒ mergeU_i75(xs_v88334, ys_v88335)

fun mergeL_i74(xs_v88336, ys_v88337) =
  match xs_v88336 with
  | nilUL_c25  ⇒ ys_v88337
  | consUL_c26 x_v88338 xs0_v88339 ⇒
    match ys_v88337 with
    | nilUL_c25  ⇒ (consUL_c26 x_v88338 xs0_v88339)
    | consUL_c26 y_v88340 ys0_v88341 ⇒
      if lten_i5(x_v88338, y_v88340) then
        (consUL_c26
          x_v88338 mergeL_i74(xs0_v88339, (consUL_c26 y_v88340 ys0_v88341)))
      else
        (consUL_c26
          y_v88340 mergeL_i74((consUL_c26 x_v88338 xs0_v88339), ys0_v88341))
    end
  end

val mergeLclo_i132 =
  fn xs_v88342 ⇒ ln ys_v88343 ⇒ mergeL_i74(xs_v88342, ys_v88343)

fun msortU_i77(zs_v88344) =
  match zs_v88344 with
  | nilUU_c27  ⇒ nilUU_c27
  | consUU_c28 x_v88345 zs_v88346 ⇒
    match zs_v88346 with
    | nilUU_c27  ⇒ (consUU_c28 x_v88345 nilUU_c27)
    | consUU_c28 y_v88347 zs_v88348 ⇒
      let __v88349 =
        splitU_i73((consUU_c28 x_v88345 (consUU_c28 y_v88347 zs_v88348)))
      in
      match __v88349 with
      | (xs_v88350, ys_v88351) ⇒
        mergeU_i75(msortU_i77(xs_v88350), msortU_i77(ys_v88351))
      end
    end
  end

val msortUclo_i133 = fn zs_v88352 ⇒ msortU_i77(zs_v88352)

fun msortL_i76(zs_v88353) =
  match zs_v88353 with
  | nilUL_c25  ⇒ nilUL_c25
  | consUL_c26 x_v88354 zs_v88355 ⇒
    match zs_v88355 with
    | nilUL_c25  ⇒ (consUL_c26 x_v88354 nilUL_c25)
    | consUL_c26 y_v88356 zs_v88357 ⇒
      let __v88358 =
        splitL_i72((consUL_c26 x_v88354 (consUL_c26 y_v88356 zs_v88357)))
      in
      match __v88358 with
      | (xs_v88359, ys_v88360) ⇒
        mergeL_i74(msortL_i76(xs_v88359), msortL_i76(ys_v88360))
      end
    end
  end

val msortLclo_i134 = fn zs_v88361 ⇒ msortL_i76(zs_v88361)

fun cmsort_workerU_i81(n_v88362, zs_v88363, c_v88364) =
  if n_v88362 then
    match zs_v88363 with
    | nilUU_c27  ⇒
      ln __v88365 ⇒
        let c_v88366 = send(c_v88364, (UniqU_c30 nilUU_c27 NULL)) in NULL
    | consUU_c28 z0_v88367 zs0_v88368 ⇒
      match zs0_v88368 with
      | nilUU_c27  ⇒
        ln __v88369 ⇒
          let c_v88370 =
            send(c_v88364, (UniqU_c30 (consUU_c28 z0_v88367 nilUU_c27) NULL))
          in NULL
      | consUU_c28 z1_v88371 zs1_v88372 ⇒
        match splitU_i73((consUU_c28
                           z0_v88367 (consUU_c28 z1_v88371 zs1_v88372))) with
        | (xs0_v88373, ys0_v88374) ⇒
          ln __v88375 ⇒
            let r1_v88376 =
              fork r1_v88377 in
                (cmsort_workerU_i81(n_v88362.-1, xs0_v88373, r1_v88377)) NULL
            in
            let r2_v88378 =
              fork r2_v88379 in
                (cmsort_workerU_i81(n_v88362.-1, ys0_v88374, r2_v88379)) NULL
            in
            let __v88380 = recv(r1_v88376) in
            match __v88380 with
            | (msg1_v88381, r1_v88382) ⇒
              let __v88383 = recv(r2_v88378) in
              match __v88383 with
              | (msg2_v88384, r2_v88385) ⇒
                match msg1_v88381 with
                | UniqU_c30 xs1_v88386 pf1_v88387 ⇒
                  match msg2_v88384 with
                  | UniqU_c30 xs2_v88388 pf2_v88389 ⇒
                    let zs_v88390 = mergeU_i75(xs1_v88386, xs2_v88388) in
                    let c_v88391 = send(c_v88364, (UniqU_c30 zs_v88390 NULL))
                    in
                    let __v88392 = close(r1_v88382) in
                    let __v88393 = close(r2_v88385) in NULL
                  end
                end
              end
            end
        end
      end
    end
  else
    ln __v88394 ⇒
      let c_v88395 =
        let x_v88396 = (UniqU_c30 msortU_i77(zs_v88363) NULL) in
        send(c_v88364, x_v88396)
      in NULL

val cmsort_workerUclo_i135 =
  fn n_v88397 zs_v88398 ⇒
    ln c_v88399 ⇒ cmsort_workerU_i81(n_v88397, zs_v88398, c_v88399)

fun cmsort_workerL_i80(n_v88400, zs_v88401, c_v88402) =
  if n_v88400 then
    match zs_v88401 with
    | nilUL_c25  ⇒
      ln __v88403 ⇒
        let c_v88404 = send(c_v88402, (UniqL_c29 nilUL_c25 NULL)) in NULL
    | consUL_c26 z0_v88405 zs0_v88406 ⇒
      match zs0_v88406 with
      | nilUL_c25  ⇒
        ln __v88407 ⇒
          let c_v88408 =
            send(c_v88402, (UniqL_c29 (consUL_c26 z0_v88405 nilUL_c25) NULL))
          in NULL
      | consUL_c26 z1_v88409 zs1_v88410 ⇒
        match splitL_i72((consUL_c26
                           z0_v88405 (consUL_c26 z1_v88409 zs1_v88410))) with
        | (xs0_v88411, ys0_v88412) ⇒
          ln __v88413 ⇒
            let r1_v88414 =
              fork r1_v88415 in
                (cmsort_workerL_i80(n_v88400.-1, xs0_v88411, r1_v88415)) NULL
            in
            let r2_v88416 =
              fork r2_v88417 in
                (cmsort_workerL_i80(n_v88400.-1, ys0_v88412, r2_v88417)) NULL
            in
            let __v88418 = recv(r1_v88414) in
            match __v88418 with
            | (msg1_v88419, r1_v88420) ⇒
              let __v88421 = recv(r2_v88416) in
              match __v88421 with
              | (msg2_v88422, r2_v88423) ⇒
                match msg1_v88419 with
                | UniqL_c29 xs1_v88424 pf1_v88425 ⇒
                  match msg2_v88422 with
                  | UniqL_c29 xs2_v88426 pf2_v88427 ⇒
                    let zs_v88428 = mergeL_i74(xs1_v88424, xs2_v88426) in
                    let c_v88429 = send(c_v88402, (UniqL_c29 zs_v88428 NULL))
                    in
                    let __v88430 = close(r1_v88420) in
                    let __v88431 = close(r2_v88423) in NULL
                  end
                end
              end
            end
        end
      end
    end
  else
    ln __v88432 ⇒
      let c_v88433 =
        let x_v88434 = (UniqL_c29 msortL_i76(zs_v88401) NULL) in
        send(c_v88402, x_v88434)
      in NULL

val cmsort_workerLclo_i136 =
  fn n_v88435 zs_v88436 ⇒
    ln c_v88437 ⇒ cmsort_workerL_i80(n_v88435, zs_v88436, c_v88437)

fun cmsortU_i83(zs_v88438) =
  ln __v88439 ⇒
    let c_v88440 =
      fork c_v88441 in (cmsort_workerU_i81(4, zs_v88438, c_v88441)) NULL
    in
    let __v88442 = recv(c_v88440) in
    match __v88442 with
    | (msg_v88443, c_v88444) ⇒ let __v88445 = close(c_v88444) in msg_v88443
    end

val cmsortUclo_i137 = fn zs_v88446 ⇒ cmsortU_i83(zs_v88446)

fun cmsortL_i82(zs_v88447) =
  ln __v88448 ⇒
    let c_v88449 =
      fork c_v88450 in (cmsort_workerL_i80(4, zs_v88447, c_v88450)) NULL
    in
    let __v88451 = recv(c_v88449) in
    match __v88451 with
    | (msg_v88452, c_v88453) ⇒ let __v88454 = close(c_v88453) in msg_v88452
    end

val cmsortLclo_i138 = fn zs_v88455 ⇒ cmsortL_i82(zs_v88455)

fun mkListU_i85(n_v88456) =
  if n_v88456 then
    (consUU_c28 n_v88456 mkListU_i85(n_v88456.-1))
  else
    nilUU_c27

val mkListUclo_i139 = fn n_v88457 ⇒ mkListU_i85(n_v88457)

fun mkListL_i84(n_v88458) =
  if n_v88458 then
    (consUL_c26 n_v88458 mkListL_i84(n_v88458.-1))
  else
    nilUL_c25

val mkListLclo_i140 = fn n_v88459 ⇒ mkListL_i84(n_v88459)

fun free_i50(A_v88460, ls_v88461) =
  match ls_v88461 with
  | nilUL_c25  ⇒ NULL
  | consUL_c26 __v88462 ls_v88463 ⇒ free_i50(NULL, ls_v88463)
  end

val freeclo_i141 = fn A_v88464 ls_v88465 ⇒ free_i50(A_v88464, ls_v88465)

main =
  let test_v88466 = mkListL_i84(2000000) in
  let msg_v88467 = (cmsortL_i82(test_v88466)) NULL in
  match msg_v88467 with
  | UniqL_c29 sorted_v88468 __v88469 ⇒
    let __v88470 = free_i50(NULL, sorted_v88468) in NULL
  end

trans3e success--------------------------

trans34 success--------------------------

