inductive unit : U where
| tt : unit

inductive bool : U where
| true  : bool
| false : bool

inductive nat : U where
| zero : nat
| succ (pred : nat) : nat

inductive list (A : U) : U where
| nil : list A
| cons (hd : A) (tl : list A) : list A

#[logical]
inductive eq<s> ?(A : Type‹s›) (m : A) : A -> U where
| refl : eq m m

inductive exists<s,r,t> ?(A : Type‹s›) (B : A -> Type<r>) : Type<t> where
| ex (m : A) {pf : B m} : exists B

inductive sing<s> ?(A : Type<s>) : A -> Type<s> where
| just (m : A) : sing m

inductive prod<s,r,t> (A : Type<s>) (B : Type<r>) : Type<t> where
| pair (m : A) (n : B) : prod A B

def exists_sing<s,t> ?{A : Type<s>} ?{m : A} : exists<_,_,t> (fn (a : A) => eq a m) -> sing m
  | (ex x refl) => just x

def sing_exists<s,t> ?{A : Type<s>} ?{m : A} : sing m -> exists<_,_,t> (fn (a : A) => eq a m)
  | (just x) => ex x refl

#[logical]
def sing_exists_equiv1<s,t> {A : Type<s>} {m : A} :
  forall (x : sing m) -> eq (exists_sing (sing_exists<_,t> x)) x
  | (just x) => refl

#[logical]
def sing_exists_equiv2<s,t> {A : Type<s>} {m : A} :
  forall (x : exists<_,_,t> fn (a : A) => eq a m) -> eq (sing_exists (exists_sing x)) x
  | (ex x refl) => refl

def sing_double<s,t> {A : Type<s>} {m : A} : sing m -> sing m -o prod<_,_,t> A A
  | (just x) (just y) =>
    let {pf} : eq x y := refl in
    pair x y

/- axiom_K is admissible because pattern matching assumes
   that all variables introduced by the clauses are flexible.

   axiom_K cannot be proven with standard eliminators because
   eliminators introduce rigid variables which cannot be refined
   by unification. -/
#[logical]
def axiom_K ?{A : U} ?{m : A} : forall (x : eq m m) -> eq x refl
  | refl => refl

def pattern_expansion {A : U} : list A -o unit
  | nil => tt
  | (cons x nil) => tt
  | xs =>
    let {pf} : eq xs xs := refl in
    tt
