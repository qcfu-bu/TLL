-- ———————————————————————————————————————————————
--  unit
-- ———————————————————————————————————————————————
inductive unit : U = tt


-- ———————————————————————————————————————————————
-- boolean
-- ———————————————————————————————————————————————
inductive bool : U = true | false

program andb (b1 : bool) (b2 : bool) : bool =
  match b1 with
  | true  ⇒ b2
  | false ⇒ false
  end

program orb (b1 : bool) (b2 : bool) : bool =
  match b1 with
  | true  ⇒ true
  | false ⇒ b2
  end

program notb (b : bool) : bool =
  match b with
  | true ⇒ false
  | false ⇒ true
  end


-- ———————————————————————————————————————————————
-- natural numbers
-- ———————————————————————————————————————————————
inductive nat : U = O | S of (n : nat)

program addn (x : nat) (y : nat) : nat =
  match x with
  | O ⇒ y
  | S x ⇒ S (x + y)
  end

program muln (x : nat) (y : nat) : nat =
  match x with
  | O ⇒ y
  | S x ⇒ y + x * y
  end

program eqn (x : nat) (y : nat) : bool =
  match x with
  | O ⇒
    match y with
    | O ⇒ true
    | S _ ⇒ false
    end
  | S x ⇒
    match y with
    | O ⇒ false
    | S y ⇒ x == y
    end
  end

program lten (x : nat) (y : nat) : bool =
  match x with
  | O ⇒ true
  | S x ⇒
    match y with
    | O ⇒ false
    | S y ⇒ x <= y
    end
  end

program gten (x : nat) (y : nat) : bool =
  match x with
  | O ⇒
    match y with
    | O ⇒ true
    | S _ ⇒ false
    end
  | S x ⇒
    match y with
    | O ⇒ true
    | S y ⇒ x >= y
    end
  end

logical ltn (x : nat) (y : nat) : bool =
  match x with
  | O ⇒
    match y with
    | O ⇒ false
    | S y ⇒ true
    end
  | S x ⇒
    match y with
    | O ⇒ false
    | S y ⇒ x < y
    end
  end

logical gtn (x : nat) (y : nat) : bool =
  match x with
  | O ⇒ false
  | S x ⇒
    match y with
    | O ⇒ true
    | S y ⇒ x > y
    end
  end


-- ———————————————————————————————————————————————
-- ascii strings
-- ———————————————————————————————————————————————
inductive ascii : U =
| Ascii of (b0 b1 b2 b3 b4 b5 b6 b7 : bool) 

inductive string : U =
| EmptyString
| String of (c : ascii) (s : string)

program cats (s1 : string) (s2 : string) : string =
  match s1 with
  | EmptyString ⇒ s2
  | String c s1 ⇒ String c (cats s1 s2)
  end


-- ———————————————————————————————————————————————
-- lists (linear + none-linear)
-- ———————————————————————————————————————————————
inductive list (A : U) : U =
| nil
| cons of (hd : A) (tl : list A)

inductive llist (A : L) : L =
| lnil
| lcons of (hd : A) (tl : llist A)

program append {A : U} (xs ys : list A) : list A =
  match xs with
  | nil ⇒ ys
  | x :: xs ⇒ x :: append A xs ys
  end

program lappend {A : L} (xs ys : llist A) : llist A =
  match xs with
  | lnil ⇒ ys
  | x ;; xs ⇒ x ;; lappend A xs ys
  end


-- ———————————————————————————————————————————————
-- linear box
-- ———————————————————————————————————————————————
inductive box (A : U) : L =
| Box of (a : A)


-- ———————————————————————————————————————————————
-- standard IO channels
-- ———————————————————————————————————————————————
logical stdin_rec (_ : unit) : proto =
  ⇑(b : bool) →
   match b with
   | true ⇒ ⇓(string) → stdin_rec ()
   | false ⇒ •
   end

logical stdout_rec (_ : unit) : proto =
  ⇑(b : bool) →
   match b with
   | true ⇒ ⇑(string) → stdout_rec ()
   | false ⇒ •
   end

logical stderr_rec (_ : unit) : proto =
  ⇑(b : bool) →
   match b with
   | true ⇒ ⇑(string) → stderr_rec ()
   | false ⇒ •
   end

logical stdin_t  : proto = stdin_rec ()
logical stdout_t : proto = stdout_rec ()
logical stderr_t : proto = stderr_rec ()

program readline (_ : unit) : IO string =
  let ch ⇐ open stdin in
  let ch ⇐ send ch true in
  match recv ch with
  | ⟨s, ch⟩ ⇒
    let ch ⇐ send ch false in
    let _ ⇐ close ch in
    return s
  end

program print (s : string) : IO unit =
  let ch ⇐ open stdout in
  let ch ⇐ send ch true in
  let ch ⇐ send ch s in
  let ch ⇐ send ch false in
  close ch

program prerr (s : string) : IO unit =
  let ch ⇐ open stderr in
  let ch ⇐ send ch true in
  let ch ⇐ send ch s in
  let ch ⇐ send ch false in
  close ch