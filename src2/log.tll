parsing success--------------------------

inductive unit_d1 : U =
| tt_c1 of : unit_d1

inductive bool_d2 : U =
| true_c2 of : bool_d2 | false_c3 of : bool_d2

program andb_i1 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v211 : bool_d2) (b2_v212 : bool_d2) ⇒
    match b1_v211 as __v213 in ??1 with
    | true_c2  ⇒ b2_v212 | false_c3  ⇒ false_c3‹›
    end

program orb_i2 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v216 : bool_d2) (b2_v217 : bool_d2) ⇒
    match b1_v216 as __v218 in ??2 with
    | true_c2  ⇒ true_c2‹› | false_c3  ⇒ b2_v217
    end

program notb_i3 : bool_d2 → bool_d2 =
  fn (b_v220 : bool_d2) ⇒
    match b_v220 as __v221 in ??3 with
    | true_c2  ⇒ false_c3‹› | false_c3  ⇒ true_c2‹›
    end

inductive nat_d3 : U =
| O_c4 of : nat_d3 | S_c5 of (n_v222 : nat_d3) : nat_d3

program addn_i4 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v225 : nat_d3) (y_v226 : nat_d3) ⇒
    match x_v225 as __v227 in ??4 with
    | O_c4  ⇒ y_v226 | S_c5 x_v228 ⇒ (S_c5‹› (addn_i4 x_v228 y_v226))
    end

program muln_i5 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v231 : nat_d3) (y_v232 : nat_d3) ⇒
    match x_v231 as __v233 in ??5 with
    | O_c4  ⇒ y_v232
    | S_c5 x_v234 ⇒ (addn_i4 y_v232 (muln_i5 x_v234 y_v232))
    end

program eqn_i6 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v237 : nat_d3) (y_v238 : nat_d3) ⇒
    match x_v237 as __v239 in ??6 with
    | O_c4  ⇒
      match y_v238 as __v240 in ??8 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v241 ⇒ false_c3‹›
      end
    | S_c5 x_v242 ⇒
      match y_v238 as __v243 in ??7 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v244 ⇒ (eqn_i6 x_v242 y_v244)
      end
    end

program lten_i7 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v247 : nat_d3) (y_v248 : nat_d3) ⇒
    match x_v247 as __v249 in ??9 with
    | O_c4  ⇒ true_c2‹›
    | S_c5 x_v250 ⇒
      match y_v248 as __v251 in ??10 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v252 ⇒ (lten_i7 x_v250 y_v252)
      end
    end

program gten_i8 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v255 : nat_d3) (y_v256 : nat_d3) ⇒
    match x_v255 as __v257 in ??11 with
    | O_c4  ⇒
      match y_v256 as __v258 in ??13 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v259 ⇒ false_c3‹›
      end
    | S_c5 x_v260 ⇒
      match y_v256 as __v261 in ??12 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v262 ⇒ (gten_i8 x_v260 y_v262)
      end
    end

logical ltn_i9 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v265 : nat_d3) (y_v266 : nat_d3) ⇒
    match x_v265 as __v267 in ??14 with
    | O_c4  ⇒
      match y_v266 as __v268 in ??16 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v269 ⇒ true_c2‹›
      end
    | S_c5 x_v270 ⇒
      match y_v266 as __v271 in ??15 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v272 ⇒ (ltn_i9 x_v270 y_v272)
      end
    end

logical gtn_i10 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v275 : nat_d3) (y_v276 : nat_d3) ⇒
    match x_v275 as __v277 in ??17 with
    | O_c4  ⇒ false_c3‹›
    | S_c5 x_v278 ⇒
      match y_v276 as __v279 in ??18 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v280 ⇒ (gtn_i10 x_v278 y_v280)
      end
    end

inductive ascii_d4 : U =
| Ascii_c6 of
    (b0_v281 : bool_d2) (b1_v282 : bool_d2) (b2_v283 : bool_d2)
    (b3_v284 : bool_d2) (b4_v285 : bool_d2) (b5_v286 : bool_d2)
    (b6_v287 : bool_d2) (b7_v288 : bool_d2) : ascii_d4

inductive string_d5 : U =
| EmptyString_c7 of : string_d5
| String_c8 of (c_v289 : ascii_d4) (s_v290 : string_d5) : string_d5

program cats_i11 : string_d5 → string_d5 → string_d5 =
  fn (s1_v293 : string_d5) (s2_v294 : string_d5) ⇒
    match s1_v293 as __v295 in ??19 with
    | EmptyString_c7  ⇒ s2_v294
    | String_c8 c_v296 s1_v297 ⇒
      (String_c8‹› c_v296 (cats_i11 s1_v297 s2_v294))
    end

program strlen_i12 : string_d5 → nat_d3 =
  fn (s_v299 : string_d5) ⇒
    match s_v299 as __v300 in ??20 with
    | EmptyString_c7  ⇒ O_c4‹›
    | String_c8 __v301 s_v302 ⇒ (S_c5‹› (strlen_i12 s_v302))
    end

inductive list_d6 (A_v303 : U) : U =
| nil_c9 of (A_v304 : U) : (list_d6 A_v304)
| cons_c10 of
    (A_v305 : U) (hd_v306 : A_v305) (tl_v307 : (list_d6 A_v305))
    : (list_d6 A_v305)

inductive llist_d7 (A_v308 : L) : L =
| lnil_c11 of (A_v309 : L) : (llist_d7 A_v309)
| lcons_c12 of
    (A_v310 : L) (hd_v311 : A_v310) (tl_v312 : (llist_d7 A_v310))
    : (llist_d7 A_v310)

program len_i13 : ∀ {A_v313 : U} → (list_d6 A_v313) → nat_d3 =
  fn {A_v315 : U} (xs_v316 : (list_d6 A_v315)) ⇒
    match xs_v316 as __v317 in ??21 with
    | nil_c9  ⇒ O_c4‹›
    | cons_c10 __v318 xs_v319 ⇒ (S_c5‹› (len_i13 ??22 xs_v319))
    end

program llen_i14 :
  ∀ {A_v320 : L} → (llist_d7 A_v320) → nat_d3 ⊗ (llist_d7 A_v320)
=
  fn {A_v323 : L} (xs_v324 : (llist_d7 A_v323)) ⇒
    match xs_v324 as __v325 in ??23 with
    | lnil_c11  ⇒ ⟨O_c4‹›, lnil_c11‹›⟩
    | lcons_c12 x_v326 xs_v327 ⇒
      match (llen_i14 A_v323 xs_v327) as __v328 in ??24 with
      | ⟨n_v329, xs_v330⟩ ⇒
        ⟨(S_c5‹› n_v329), (lcons_c12‹› x_v326 xs_v330)⟩
      end
    end

program append_i15 :
  ∀ {A_v331 : U} →
    (list_d6 A_v331) → (list_d6 A_v331) → (list_d6 A_v331)
=
  fn {A_v334 : U} (xs_v335 : (list_d6 A_v334)) (ys_v336 : (list_d6 A_v334)) ⇒
    match xs_v335 as __v337 in ??27 with
    | nil_c9  ⇒ ys_v336
    | cons_c10 x_v338 xs_v339 ⇒
      (cons_c10‹› x_v338 (append_i15 ??28 xs_v339 ys_v336))
    end

program lappend_i16 :
  ∀ {A_v340 : L} →
    (llist_d7 A_v340) → (llist_d7 A_v340) ⊸ (llist_d7 A_v340)
=
  fn {A_v343 : L} (xs_v344 : (llist_d7 A_v343)) ⇒
    ln (ys_v345 : ??30) ⇒
      match xs_v344 as __v346 in ??31 with
      | lnil_c11  ⇒ ys_v345
      | lcons_c12 x_v347 xs_v348 ⇒
        (lcons_c12‹› x_v347 (lappend_i16 ??32 xs_v348 ys_v345))
      end

inductive box_d8 (A_v349 : U) : L =
| Box_c13 of (A_v350 : U) (a_v351 : A_v350) : (box_d8 A_v350)

program map_box_i17 :
  ∀ {A_v352 : U} →
    ∀ {B_v353 : U} →
      A_v352 → B_v353 → (box_d8 A_v352) → (box_d8 B_v353)
=
  fn {A_v357 : U} {B_v358 : U} (f_v359 : A_v357 → B_v358)
     (m_v360 : (box_d8 A_v357)) ⇒
    match m_v360 as __v362 in ??34 with
    | Box_c13 a_v363 ⇒ (Box_c13‹› (f_v359 a_v363))
    end

program unbox_i18 : ∀ {A_v364 : U} → (box_d8 A_v364) → A_v364 =
  fn {A_v366 : U} (m_v367 : (box_d8 A_v366)) ⇒
    match m_v367 as __v368 in ??36 with
    | Box_c13 a_v369 ⇒ a_v369
    end

logical stdin_rec_i19 : unit_d1 → proto =
  fn (__v371 : unit_d1) ⇒
    ⇑(b_v372 : bool_d2) ⇒
      match b_v372 as __v373 in ??37 with
      | true_c2  ⇒ ⇓(__v374 : string_d5) ⇒ (stdin_rec_i19 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdout_rec_i20 : unit_d1 → proto =
  fn (__v376 : unit_d1) ⇒
    ⇑(b_v377 : bool_d2) ⇒
      match b_v377 as __v378 in ??38 with
      | true_c2  ⇒ ⇑(__v379 : string_d5) ⇒ (stdout_rec_i20 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stderr_rec_i21 : unit_d1 → proto =
  fn (__v381 : unit_d1) ⇒
    ⇑(b_v382 : bool_d2) ⇒
      match b_v382 as __v383 in ??39 with
      | true_c2  ⇒ ⇑(__v384 : string_d5) ⇒ (stderr_rec_i21 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 tt_c1‹›)

logical stdout_t_i23 : proto = (stdout_rec_i20 tt_c1‹›)

logical stderr_t_i24 : proto = (stderr_rec_i21 tt_c1‹›)

program readline_i25 : unit_d1 → IO string_d5 =
  fn (__v386 : unit_d1) ⇒
    let ch_v387 ⇐ open stdin in
    let ch_v388 ⇐ (send ch_v387 true_c2‹›) in
    let __v389 ⇐ recv ch_v388 in
    match __v389 as __v390 in ??40 with
    | ⟨s_v391, ch_v392⟩ ⇒
      let ch_v393 ⇐ (send ch_v392 false_c3‹›) in
      let __v394 ⇐ close ch_v393 in return s_v391
    end

program print_i26 : string_d5 → IO unit_d1 =
  fn (s_v396 : string_d5) ⇒
    let ch_v397 ⇐ open stdout in
    let ch_v398 ⇐ (send ch_v397 true_c2‹›) in
    let ch_v399 ⇐ (send ch_v398 s_v396) in
    let ch_v400 ⇐ (send ch_v399 false_c3‹›) in close ch_v400

program prerr_i27 : string_d5 → IO unit_d1 =
  fn (s_v402 : string_d5) ⇒
    let ch_v403 ⇐ open stderr in
    let ch_v404 ⇐ (send ch_v403 true_c2‹›) in
    let ch_v405 ⇐ (send ch_v404 s_v402) in
    let ch_v406 ⇐ (send ch_v405 false_c3‹›) in close ch_v406

inductive Tuple_d9 ‹s_s407, r_s408, t_s409›
  (A_v410 : Type‹s_s407›) (B_v411 : Type‹r_s408›) : Type‹t_s409›
=
| Pair_c14 of
    ‹s_s412, r_s413, t_s414› (A_v415 : Type‹s_s412›)
    (B_v416 : Type‹r_s413›) (m_v417 : A_v415) (n_v418 : B_v416)
    : (Tuple_d9‹s_s412, r_s413, t_s414› A_v415 B_v416)

inductive Sigma_d10 ‹s_s419, r_s420, t_s421›
  (A_v422 : Type‹s_s419›) (B_v423 : A_v422 → Type‹r_s420›) : Type‹t_s421›
=
| DPair_c15 of
    ‹s_s425, r_s426, t_s427› (A_v428 : Type‹s_s425›)
    (B_v429 : A_v428 → Type‹r_s426›) (m_v431 : A_v428)
    (n_v432 : (B_v429 m_v431))
    : (Sigma_d10‹s_s425, r_s426, t_s427› A_v428 B_v429)

logical fst_i28 ‹s_s433, r_s434, t_s435› :
  ∀ {A_v436 : Type‹s_s433›} →
    ∀ {B_v437 : A_v436 → Type‹r_s434›} →
      (Sigma_d10‹??41, ??42, t_s435› A_v436 B_v437) → A_v436
=
  fn {A_v440 : Type‹s_s433›} {B_v441 : A_v440 → Type‹r_s434›}
     (m_v442 : (Sigma_d10‹??41, ??42, t_s435› A_v440 B_v441)) ⇒
    match m_v442 as __v444 in ??43 with
    | DPair_c15 m_v445 __v446 ⇒ m_v445
    end

program Fst_i29 ‹s_s447, r_s448, t_s449› :
  ∀ {A_v450 : Type‹s_s447›} →
    ∀ {B_v451 : A_v450 → Type‹r_s448›} →
      (Sigma_d10‹??44, ??45, t_s449› A_v450 B_v451) → A_v450
=
  fn {A_v454 : Type‹s_s447›} {B_v455 : A_v454 → Type‹r_s448›}
     (m_v456 : (Sigma_d10‹??44, ??45, t_s449› A_v454 B_v455)) ⇒
    match m_v456 as __v458 in ??46 with
    | DPair_c15 m_v459 __v460 ⇒ m_v459
    end

program Snd_i30 ‹s_s461, r_s462, t_s463› :
  ∀ {A_v464 : Type‹s_s461›} →
    ∀ {B_v465 : A_v464 → Type‹r_s462›} →
      ∀ (m_v467 : (Sigma_d10‹??47, ??48, t_s463› A_v464 B_v465)) →
        (B_v465 (fst_i28‹??53, ??52, ??51› ??50 ??49 m_v467))
=
  fn {A_v468 : Type‹s_s461›} {B_v469 : A_v468 → Type‹r_s462›}
     (m_v470 : (Sigma_d10‹??47, ??48, t_s463› A_v468 B_v469)) ⇒
    match m_v470 as x0_v472 in
      (B_v469 (fst_i28‹??58, ??57, ??56› ??55 ??54 x0_v472)) with
    | DPair_c15 __v473 n_v474 ⇒ n_v474
    end

trans01 success--------------------------

inductive unit_d1 : U =
| tt_c1 of : unit_d1

inductive bool_d2 : U =
| true_c2 of : bool_d2 | false_c3 of : bool_d2

program andb_i1 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v2201 : bool_d2) (b2_v2202 : bool_d2) ⇒
    match b1_v2201 as __v2203 in bool_d2 with
    | true_c2  ⇒ b2_v2202 | false_c3  ⇒ false_c3‹›
    end

program orb_i2 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v2206 : bool_d2) (b2_v2207 : bool_d2) ⇒
    match b1_v2206 as __v2208 in bool_d2 with
    | true_c2  ⇒ true_c2‹› | false_c3  ⇒ b2_v2207
    end

program notb_i3 : bool_d2 → bool_d2 =
  fn (b_v2210 : bool_d2) ⇒
    match b_v2210 as __v2211 in bool_d2 with
    | true_c2  ⇒ false_c3‹› | false_c3  ⇒ true_c2‹›
    end

inductive nat_d3 : U =
| O_c4 of : nat_d3 | S_c5 of (n_v2212 : nat_d3) : nat_d3

program addn_i4 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v2215 : nat_d3) (y_v2216 : nat_d3) ⇒
    match x_v2215 as __v2217 in nat_d3 with
    | O_c4  ⇒ y_v2216
    | S_c5 x_v2218 ⇒ (S_c5‹› (addn_i4 x_v2218 y_v2216))
    end

program muln_i5 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v2221 : nat_d3) (y_v2222 : nat_d3) ⇒
    match x_v2221 as __v2223 in nat_d3 with
    | O_c4  ⇒ y_v2222
    | S_c5 x_v2224 ⇒ (addn_i4 y_v2222 (muln_i5 x_v2224 y_v2222))
    end

program eqn_i6 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v2227 : nat_d3) (y_v2228 : nat_d3) ⇒
    match x_v2227 as __v2229 in bool_d2 with
    | O_c4  ⇒
      match y_v2228 as __v2230 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v2231 ⇒ false_c3‹›
      end
    | S_c5 x_v2232 ⇒
      match y_v2228 as __v2233 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v2234 ⇒ (eqn_i6 x_v2232 y_v2234)
      end
    end

program lten_i7 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v2237 : nat_d3) (y_v2238 : nat_d3) ⇒
    match x_v2237 as __v2239 in bool_d2 with
    | O_c4  ⇒ true_c2‹›
    | S_c5 x_v2240 ⇒
      match y_v2238 as __v2241 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v2242 ⇒ (lten_i7 x_v2240 y_v2242)
      end
    end

program gten_i8 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v2245 : nat_d3) (y_v2246 : nat_d3) ⇒
    match x_v2245 as __v2247 in bool_d2 with
    | O_c4  ⇒
      match y_v2246 as __v2248 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v2249 ⇒ false_c3‹›
      end
    | S_c5 x_v2250 ⇒
      match y_v2246 as __v2251 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v2252 ⇒ (gten_i8 x_v2250 y_v2252)
      end
    end

logical ltn_i9 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v2255 : nat_d3) (y_v2256 : nat_d3) ⇒
    match x_v2255 as __v2257 in bool_d2 with
    | O_c4  ⇒
      match y_v2256 as __v2258 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v2259 ⇒ true_c2‹›
      end
    | S_c5 x_v2260 ⇒
      match y_v2256 as __v2261 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v2262 ⇒ (ltn_i9 x_v2260 y_v2262)
      end
    end

logical gtn_i10 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v2265 : nat_d3) (y_v2266 : nat_d3) ⇒
    match x_v2265 as __v2267 in bool_d2 with
    | O_c4  ⇒ false_c3‹›
    | S_c5 x_v2268 ⇒
      match y_v2266 as __v2269 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v2270 ⇒ (gtn_i10 x_v2268 y_v2270)
      end
    end

inductive ascii_d4 : U =
| Ascii_c6 of
    (b0_v2271 : bool_d2) (b1_v2272 : bool_d2) (b2_v2273 : bool_d2)
    (b3_v2274 : bool_d2) (b4_v2275 : bool_d2) (b5_v2276 : bool_d2)
    (b6_v2277 : bool_d2) (b7_v2278 : bool_d2) : ascii_d4

inductive string_d5 : U =
| EmptyString_c7 of : string_d5
| String_c8 of (c_v2279 : ascii_d4) (s_v2280 : string_d5) : string_d5

program cats_i11 : string_d5 → string_d5 → string_d5 =
  fn (s1_v2283 : string_d5) (s2_v2284 : string_d5) ⇒
    match s1_v2283 as __v2285 in string_d5 with
    | EmptyString_c7  ⇒ s2_v2284
    | String_c8 c_v2286 s1_v2287 ⇒
      (String_c8‹› c_v2286 (cats_i11 s1_v2287 s2_v2284))
    end

program strlen_i12 : string_d5 → nat_d3 =
  fn (s_v2289 : string_d5) ⇒
    match s_v2289 as __v2290 in nat_d3 with
    | EmptyString_c7  ⇒ O_c4‹›
    | String_c8 __v2291 s_v2292 ⇒ (S_c5‹› (strlen_i12 s_v2292))
    end

inductive list_d6 (A_v2293 : U) : U =
| nil_c9 of (A_v2294 : U) : (list_d6 A_v2294)
| cons_c10 of
    (A_v2295 : U) (hd_v2296 : A_v2295) (tl_v2297 : (list_d6 A_v2295))
    : (list_d6 A_v2295)

inductive llist_d7 (A_v2298 : L) : L =
| lnil_c11 of (A_v2299 : L) : (llist_d7 A_v2299)
| lcons_c12 of
    (A_v2300 : L) (hd_v2301 : A_v2300) (tl_v2302 : (llist_d7 A_v2300))
    : (llist_d7 A_v2300)

program len_i13 : ∀ {A_v2303 : U} → (list_d6 A_v2303) → nat_d3 =
  fn {A_v2305 : U} (xs_v2306 : (list_d6 A_v2305)) ⇒
    match xs_v2306 as __v2307 in nat_d3 with
    | nil_c9  ⇒ O_c4‹›
    | cons_c10 __v2308 xs_v2309 ⇒ (S_c5‹› (len_i13 A_v2305 xs_v2309))
    end

program llen_i14 :
  ∀ {A_v2310 : L} → (llist_d7 A_v2310) → nat_d3 ⊗ (llist_d7 A_v2310)
=
  fn {A_v2313 : L} (xs_v2314 : (llist_d7 A_v2313)) ⇒
    match xs_v2314 as __v2315 in nat_d3 ⊗ (llist_d7 A_v2313) with
    | lnil_c11  ⇒ ⟨O_c4‹›, lnil_c11‹›⟩
    | lcons_c12 x_v2317 xs_v2318 ⇒
      match (llen_i14 A_v2313 xs_v2318) as __v2319 in
        nat_d3 ⊗ (llist_d7 A_v2313) with
      | ⟨n_v2321, xs_v2322⟩ ⇒
        ⟨(S_c5‹› n_v2321), (lcons_c12‹› x_v2317 xs_v2322)⟩
      end
    end

program append_i15 :
  ∀ {A_v2323 : U} →
    (list_d6 A_v2323) → (list_d6 A_v2323) → (list_d6 A_v2323)
=
  fn {A_v2326 : U} (xs_v2327 : (list_d6 A_v2326))
     (ys_v2328 : (list_d6 A_v2326)) ⇒
    match xs_v2327 as __v2329 in (list_d6 A_v2326) with
    | nil_c9  ⇒ ys_v2328
    | cons_c10 x_v2330 xs_v2331 ⇒
      (cons_c10‹› x_v2330 (append_i15 A_v2326 xs_v2331 ys_v2328))
    end

program lappend_i16 :
  ∀ {A_v2332 : L} →
    (llist_d7 A_v2332) → (llist_d7 A_v2332) ⊸ (llist_d7 A_v2332)
=
  fn {A_v2335 : L} (xs_v2336 : (llist_d7 A_v2335)) ⇒
    ln (ys_v2337 : (llist_d7 A_v2335)) ⇒
      match xs_v2336 as __v2338 in (llist_d7 A_v2335) with
      | lnil_c11  ⇒ ys_v2337
      | lcons_c12 x_v2339 xs_v2340 ⇒
        (lcons_c12‹› x_v2339 (lappend_i16 A_v2335 xs_v2340 ys_v2337))
      end

inductive box_d8 (A_v2341 : U) : L =
| Box_c13 of (A_v2342 : U) (a_v2343 : A_v2342) : (box_d8 A_v2342)

program map_box_i17 :
  ∀ {A_v2344 : U} →
    ∀ {B_v2345 : U} →
      A_v2344 → B_v2345 → (box_d8 A_v2344) → (box_d8 B_v2345)
=
  fn {A_v2349 : U} {B_v2350 : U} (f_v2351 : A_v2349 → B_v2350)
     (m_v2352 : (box_d8 A_v2349)) ⇒
    match m_v2352 as __v2354 in (box_d8 B_v2350) with
    | Box_c13 a_v2355 ⇒ (Box_c13‹› (f_v2351 a_v2355))
    end

program unbox_i18 : ∀ {A_v2356 : U} → (box_d8 A_v2356) → A_v2356 =
  fn {A_v2358 : U} (m_v2359 : (box_d8 A_v2358)) ⇒
    match m_v2359 as __v2360 in A_v2358 with
    | Box_c13 a_v2361 ⇒ a_v2361
    end

logical stdin_rec_i19 : unit_d1 → proto =
  fn (__v2363 : unit_d1) ⇒
    ⇑(b_v2364 : bool_d2) ⇒
      match b_v2364 as __v2365 in proto with
      | true_c2  ⇒ ⇓(__v2366 : string_d5) ⇒ (stdin_rec_i19 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdout_rec_i20 : unit_d1 → proto =
  fn (__v2368 : unit_d1) ⇒
    ⇑(b_v2369 : bool_d2) ⇒
      match b_v2369 as __v2370 in proto with
      | true_c2  ⇒
        ⇑(__v2371 : string_d5) ⇒ (stdout_rec_i20 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stderr_rec_i21 : unit_d1 → proto =
  fn (__v2373 : unit_d1) ⇒
    ⇑(b_v2374 : bool_d2) ⇒
      match b_v2374 as __v2375 in proto with
      | true_c2  ⇒
        ⇑(__v2376 : string_d5) ⇒ (stderr_rec_i21 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 tt_c1‹›)

logical stdout_t_i23 : proto = (stdout_rec_i20 tt_c1‹›)

logical stderr_t_i24 : proto = (stderr_rec_i21 tt_c1‹›)

program readline_i25 : unit_d1 → IO string_d5 =
  fn (__v2378 : unit_d1) ⇒
    let ch_v2379 ⇐ open stdin in
    let ch_v2380 ⇐ (send ch_v2379 true_c2‹›) in
    let __v2381 ⇐ recv ch_v2380 in
    match __v2381 as __v2382 in IO string_d5 with
    | ⟨s_v2383, ch_v2384⟩ ⇒
      let ch_v2385 ⇐ (send ch_v2384 false_c3‹›) in
      let __v2386 ⇐ close ch_v2385 in return s_v2383
    end

program print_i26 : string_d5 → IO unit_d1 =
  fn (s_v2388 : string_d5) ⇒
    let ch_v2389 ⇐ open stdout in
    let ch_v2390 ⇐ (send ch_v2389 true_c2‹›) in
    let ch_v2391 ⇐ (send ch_v2390 s_v2388) in
    let ch_v2392 ⇐ (send ch_v2391 false_c3‹›) in close ch_v2392

program prerr_i27 : string_d5 → IO unit_d1 =
  fn (s_v2394 : string_d5) ⇒
    let ch_v2395 ⇐ open stderr in
    let ch_v2396 ⇐ (send ch_v2395 true_c2‹›) in
    let ch_v2397 ⇐ (send ch_v2396 s_v2394) in
    let ch_v2398 ⇐ (send ch_v2397 false_c3‹›) in close ch_v2398

inductive Tuple_d9 ‹s_s2399, r_s2400, t_s2401›
  (A_v2402 : Type‹s_s2399›) (B_v2403 : Type‹r_s2400›) : Type‹t_s2401›
=
| Pair_c14 of
    ‹s_s2404, r_s2405, t_s2406› (A_v2407 : Type‹s_s2404›)
    (B_v2408 : Type‹r_s2405›) (m_v2409 : A_v2407) (n_v2410 : B_v2408)
    : (Tuple_d9‹s_s2404, r_s2405, t_s2406› A_v2407 B_v2408)

inductive Sigma_d10 ‹s_s2411, r_s2412, t_s2413›
  (A_v2414 : Type‹s_s2411›) (B_v2415 : A_v2414 → Type‹r_s2412›) : Type‹t_s2413›
=
| DPair_c15 of
    ‹s_s2417, r_s2418, t_s2419› (A_v2420 : Type‹s_s2417›)
    (B_v2421 : A_v2420 → Type‹r_s2418›) (m_v2423 : A_v2420)
    (n_v2424 : (B_v2421 m_v2423))
    : (Sigma_d10‹s_s2417, r_s2418, t_s2419› A_v2420 B_v2421)

logical fst_i28 ‹s_s2425, r_s2426, t_s2427› :
  ∀ {A_v2428 : Type‹s_s2425›} →
    ∀ {B_v2429 : A_v2428 → Type‹r_s2426›} →
      (Sigma_d10‹s_s2425, r_s2426, t_s2427› A_v2428 B_v2429) → A_v2428
=
  fn {A_v2432 : Type‹s_s2425›} {B_v2433 : A_v2432 → Type‹r_s2426›}
     (m_v2434 : (Sigma_d10‹s_s2425, r_s2426, t_s2427› A_v2432 B_v2433)) ⇒
    match m_v2434 as __v2436 in A_v2432 with
    | DPair_c15 m_v2437 __v2438 ⇒ m_v2437
    end

program Fst_i29 ‹s_s2439, r_s2440, t_s2441› :
  ∀ {A_v2442 : Type‹s_s2439›} →
    ∀ {B_v2443 : A_v2442 → Type‹r_s2440›} →
      (Sigma_d10‹s_s2439, r_s2440, t_s2441› A_v2442 B_v2443) → A_v2442
=
  fn {A_v2446 : Type‹s_s2439›} {B_v2447 : A_v2446 → Type‹r_s2440›}
     (m_v2448 : (Sigma_d10‹s_s2439, r_s2440, t_s2441› A_v2446 B_v2447)) ⇒
    match m_v2448 as __v2450 in A_v2446 with
    | DPair_c15 m_v2451 __v2452 ⇒ m_v2451
    end

program Snd_i30 ‹s_s2453, r_s2454, t_s2455› :
  ∀ {A_v2456 : Type‹s_s2453›} →
    ∀ {B_v2457 : A_v2456 → Type‹r_s2454›} →
      ∀ (m_v2459 :
        (Sigma_d10‹s_s2453, r_s2454, t_s2455› A_v2456 B_v2457)) →
        (B_v2457
          (fst_i28‹s_s2453, r_s2454, t_s2455› A_v2456 B_v2457 m_v2459))
=
  fn {A_v2460 : Type‹s_s2453›} {B_v2461 : A_v2460 → Type‹r_s2454›}
     (m_v2462 : (Sigma_d10‹s_s2453, r_s2454, t_s2455› A_v2460 B_v2461)) ⇒
    match m_v2462 as x0_v2464 in
      (B_v2461
        (fst_i28‹s_s2453, r_s2454, t_s2455› A_v2460 B_v2461 x0_v2464)) with
    | DPair_c15 __v2465 n_v2466 ⇒ n_v2466
    end

trans1e success--------------------------

data unit_d11 =
| tt_c16 of size(0)

data bool_d12 =
| true_c17 of size(0) | false_c18 of size(0)

def andb_i31 =
  fn b1_v3189 b2_v3190 ⇒
    match b1_v3189 with
    | true_c17  ⇒ b2_v3190 | false_c18  ⇒ false_c18
    end

def orb_i32 =
  fn b1_v3191 b2_v3192 ⇒
    match b1_v3191 with
    | true_c17  ⇒ true_c17 | false_c18  ⇒ b2_v3192
    end

def notb_i33 =
  fn b_v3193 ⇒
    match b_v3193 with
    | true_c17  ⇒ false_c18 | false_c18  ⇒ true_c17
    end

data nat_d13 =
| O_c19 of size(0) | S_c20 of size(1)

def addn_i34 =
  fn x_v3194 y_v3195 ⇒
    match x_v3194 with
    | O_c19  ⇒ y_v3195
    | S_c20 x_v3196 ⇒ (S_c20 ((addn_i34 x_v3196) y_v3195))
    end

def muln_i35 =
  fn x_v3197 y_v3198 ⇒
    match x_v3197 with
    | O_c19  ⇒ y_v3198
    | S_c20 x_v3199 ⇒ ((addn_i34 y_v3198) ((muln_i35 x_v3199) y_v3198))
    end

def eqn_i36 =
  fn x_v3200 y_v3201 ⇒
    match x_v3200 with
    | O_c19  ⇒
      match y_v3201 with
      | O_c19  ⇒ true_c17 | S_c20 __v3202 ⇒ false_c18
      end
    | S_c20 x_v3203 ⇒
      match y_v3201 with
      | O_c19  ⇒ false_c18 | S_c20 y_v3204 ⇒ ((eqn_i36 x_v3203) y_v3204)
      end
    end

def lten_i37 =
  fn x_v3205 y_v3206 ⇒
    match x_v3205 with
    | O_c19  ⇒ true_c17
    | S_c20 x_v3207 ⇒
      match y_v3206 with
      | O_c19  ⇒ false_c18 | S_c20 y_v3208 ⇒ ((lten_i37 x_v3207) y_v3208)
      end
    end

def gten_i38 =
  fn x_v3209 y_v3210 ⇒
    match x_v3209 with
    | O_c19  ⇒
      match y_v3210 with
      | O_c19  ⇒ true_c17 | S_c20 __v3211 ⇒ false_c18
      end
    | S_c20 x_v3212 ⇒
      match y_v3210 with
      | O_c19  ⇒ true_c17 | S_c20 y_v3213 ⇒ ((gten_i38 x_v3212) y_v3213)
      end
    end

data ascii_d14 =
| Ascii_c21 of size(8)

data string_d15 =
| EmptyString_c22 of size(0) | String_c23 of size(2)

def cats_i41 =
  fn s1_v3214 s2_v3215 ⇒
    match s1_v3214 with
    | EmptyString_c22  ⇒ s2_v3215
    | String_c23 c_v3216 s1_v3217 ⇒
      (String_c23 c_v3216 ((cats_i41 s1_v3217) s2_v3215))
    end

def strlen_i42 =
  fn s_v3218 ⇒
    match s_v3218 with
    | EmptyString_c22  ⇒ O_c19
    | String_c23 __v3219 s_v3220 ⇒ (S_c20 (strlen_i42 s_v3220))
    end

data list_d16 =
| nil_c24 of size(0) | cons_c25 of size(2)

data llist_d17 =
| lnil_c26 of size(0) | lcons_c27 of size(2)

def len_i43 =
  fn A_v3221 xs_v3222 ⇒
    match xs_v3222 with
    | nil_c24  ⇒ O_c19
    | cons_c25 __v3223 xs_v3224 ⇒ (S_c20 ((len_i43 NULL) xs_v3224))
    end

def llen_i44 =
  fn A_v3225 xs_v3226 ⇒
    match xs_v3226 with
    | lnil_c26  ⇒ (O_c19, lnil_c26)
    | lcons_c27 x_v3227 xs_v3228 ⇒
      match ((llen_i44 NULL) xs_v3228) with
      | (n_v3229, xs_v3230) ⇒
        ((S_c20 n_v3229), (lcons_c27 x_v3227 xs_v3230))
      end
    end

def append_i45 =
  fn A_v3231 xs_v3232 ys_v3233 ⇒
    match xs_v3232 with
    | nil_c24  ⇒ ys_v3233
    | cons_c25 x_v3234 xs_v3235 ⇒
      (cons_c25 x_v3234 (((append_i45 NULL) xs_v3235) ys_v3233))
    end

def lappend_i46 =
  fn A_v3236 xs_v3237 ys_v3238 ⇒
    match xs_v3237 with
    | lnil_c26  ⇒ ys_v3238
    | lcons_c27 x_v3239 xs_v3240 ⇒
      (lcons_c27 x_v3239 (((lappend_i46 NULL) xs_v3240) ys_v3238))
    end

data box_d18 =
| Box_c28 of size(1)

def map_box_i47 =
  fn A_v3241 B_v3242 f_v3243 m_v3244 ⇒
    match m_v3244 with
    | Box_c28 a_v3245 ⇒ (Box_c28 (f_v3243 a_v3245))
    end

def unbox_i48 =
  fn A_v3246 m_v3247 ⇒ match m_v3247 with
                         | Box_c28 a_v3248 ⇒ a_v3248
                         end

def readline_i55 =
  fn __v3249 ⇒
    let ch_v3250 ⇐ open stdin in
    let ch_v3251 ⇐ (send ch_v3250 true_c17) in
    let __v3252 ⇐ recv ch_v3251 in
    match __v3252 with
    | (s_v3253, ch_v3254) ⇒
      let ch_v3255 ⇐ (send ch_v3254 false_c18) in
      let __v3256 ⇐ close⇑ ch_v3255 in return s_v3253
    end

def print_i56 =
  fn s_v3257 ⇒
    let ch_v3258 ⇐ open stdout in
    let ch_v3259 ⇐ (send ch_v3258 true_c17) in
    let ch_v3260 ⇐ (send ch_v3259 s_v3257) in
    let ch_v3261 ⇐ (send ch_v3260 false_c18) in close⇑ ch_v3261

def prerr_i57 =
  fn s_v3262 ⇒
    let ch_v3263 ⇐ open stderr in
    let ch_v3264 ⇐ (send ch_v3263 true_c17) in
    let ch_v3265 ⇐ (send ch_v3264 s_v3262) in
    let ch_v3266 ⇐ (send ch_v3265 false_c18) in close⇑ ch_v3266

data TupleUUU_d26 =
| PairUUU_c36 of size(2)

data TupleUUL_d25 =
| PairUUL_c35 of size(2)

data TupleULL_d23 =
| PairULL_c33 of size(2)

data TupleLUL_d21 =
| PairLUL_c31 of size(2)

data TupleLLL_d19 =
| PairLLL_c29 of size(2)

data SigmaUUU_d34 =
| DPairUUU_c44 of size(2)

data SigmaUUL_d33 =
| DPairUUL_c43 of size(2)

data SigmaULL_d31 =
| DPairULL_c41 of size(2)

data SigmaLUL_d29 =
| DPairLUL_c39 of size(2)

data SigmaLLL_d27 =
| DPairLLL_c37 of size(2)

def FstUUU_i73 =
  fn A_v3267 B_v3268 m_v3269 ⇒
    match m_v3269 with
    | DPairUUU_c44 m_v3270 __v3271 ⇒ m_v3270
    end

def FstUUL_i72 =
  fn A_v3272 B_v3273 m_v3274 ⇒
    match m_v3274 with
    | DPairUUL_c43 m_v3275 __v3276 ⇒ m_v3275
    end

def FstLUL_i68 =
  fn A_v3277 B_v3278 m_v3279 ⇒
    match m_v3279 with
    | DPairLUL_c39 m_v3280 __v3281 ⇒ m_v3280
    end

def SndUUU_i81 =
  fn A_v3282 B_v3283 m_v3284 ⇒
    match m_v3284 with
    | DPairUUU_c44 __v3285 n_v3286 ⇒ n_v3286
    end

def SndUUL_i80 =
  fn A_v3287 B_v3288 m_v3289 ⇒
    match m_v3289 with
    | DPairUUL_c43 __v3290 n_v3291 ⇒ n_v3291
    end

def SndULL_i78 =
  fn A_v3292 B_v3293 m_v3294 ⇒
    match m_v3294 with
    | DPairULL_c41 __v3295 n_v3296 ⇒ n_v3296
    end

trans12 success--------------------------

[{ fname = "lambda_fun_v3603"; arg = (Some "A_v3593");
   body =
   [MakeClo {lhs = "lambda_lhs_v3602"; fname = "lambda_fun_v3601";
      env_size = 25; env_ext = [(Reg "A_v3593")]}
     ];
   return = (Reg "lambda_lhs_v3602") };
  { fname = "lambda_fun_v3592"; arg = (Some "A_v3582");
    body =
    [MakeClo {lhs = "lambda_lhs_v3591"; fname = "lambda_fun_v3590";
       env_size = 24; env_ext = [(Reg "A_v3582")]}
      ];
    return = (Reg "lambda_lhs_v3591") };
  { fname = "lambda_fun_v3581"; arg = (Some "A_v3571");
    body =
    [MakeClo {lhs = "lambda_lhs_v3580"; fname = "lambda_fun_v3579";
       env_size = 23; env_ext = [(Reg "A_v3571")]}
      ];
    return = (Reg "lambda_lhs_v3580") };
  { fname = "lambda_fun_v3570"; arg = (Some "A_v3560");
    body =
    [MakeClo {lhs = "lambda_lhs_v3569"; fname = "lambda_fun_v3568";
       env_size = 22; env_ext = [(Reg "A_v3560")]}
      ];
    return = (Reg "lambda_lhs_v3569") };
  { fname = "lambda_fun_v3559"; arg = (Some "A_v3549");
    body =
    [MakeClo {lhs = "lambda_lhs_v3558"; fname = "lambda_fun_v3557";
       env_size = 21; env_ext = [(Reg "A_v3549")]}
      ];
    return = (Reg "lambda_lhs_v3558") };
  { fname = "lambda_fun_v3548"; arg = (Some "A_v3538");
    body =
    [MakeClo {lhs = "lambda_lhs_v3547"; fname = "lambda_fun_v3546";
       env_size = 20; env_ext = [(Reg "A_v3538")]}
      ];
    return = (Reg "lambda_lhs_v3547") };
  { fname = "lambda_fun_v3537"; arg = (Some "s_v3522");
    body =
    [Open {lhs = "open_lhs_v3524"; obj = Stderr};
      CallClo {lhs = "ch_v3523"; fptr = (Reg "open_lhs_v3524"); aptr = NULL};
      Send {lhs = "send_lhs_v3526"; ch = (Reg "ch_v3523")};
      MakeStruct {lhs = "true_c17_v3527"; ctag = 17; size = 0; data = []};
      CallClo {lhs = "app_lhs_v3528"; fptr = (Reg "send_lhs_v3526");
        aptr = (Reg "true_c17_v3527")};
      (FreeClo (Reg "send_lhs_v3526"));
      CallClo {lhs = "ch_v3525"; fptr = (Reg "app_lhs_v3528"); aptr = NULL};
      Send {lhs = "send_lhs_v3530"; ch = (Reg "ch_v3525")};
      CallClo {lhs = "app_lhs_v3531"; fptr = (Reg "send_lhs_v3530");
        aptr = (Reg "s_v3522")};
      (FreeClo (Reg "send_lhs_v3530"));
      CallClo {lhs = "ch_v3529"; fptr = (Reg "app_lhs_v3531"); aptr = NULL};
      Send {lhs = "send_lhs_v3533"; ch = (Reg "ch_v3529")};
      MakeStruct {lhs = "false_c18_v3534"; ctag = 18; size = 0; data = []};
      CallClo {lhs = "app_lhs_v3535"; fptr = (Reg "send_lhs_v3533");
        aptr = (Reg "false_c18_v3534")};
      (FreeClo (Reg "send_lhs_v3533"));
      CallClo {lhs = "ch_v3532"; fptr = (Reg "app_lhs_v3535"); aptr = NULL};
      Close {lhs = "close_lhs_v3536"; ch = (Reg "ch_v3532")}];
    return = (Reg "close_lhs_v3536") };
  { fname = "lambda_fun_v3521"; arg = (Some "s_v3506");
    body =
    [Open {lhs = "open_lhs_v3508"; obj = Stdout};
      CallClo {lhs = "ch_v3507"; fptr = (Reg "open_lhs_v3508"); aptr = NULL};
      Send {lhs = "send_lhs_v3510"; ch = (Reg "ch_v3507")};
      MakeStruct {lhs = "true_c17_v3511"; ctag = 17; size = 0; data = []};
      CallClo {lhs = "app_lhs_v3512"; fptr = (Reg "send_lhs_v3510");
        aptr = (Reg "true_c17_v3511")};
      (FreeClo (Reg "send_lhs_v3510"));
      CallClo {lhs = "ch_v3509"; fptr = (Reg "app_lhs_v3512"); aptr = NULL};
      Send {lhs = "send_lhs_v3514"; ch = (Reg "ch_v3509")};
      CallClo {lhs = "app_lhs_v3515"; fptr = (Reg "send_lhs_v3514");
        aptr = (Reg "s_v3506")};
      (FreeClo (Reg "send_lhs_v3514"));
      CallClo {lhs = "ch_v3513"; fptr = (Reg "app_lhs_v3515"); aptr = NULL};
      Send {lhs = "send_lhs_v3517"; ch = (Reg "ch_v3513")};
      MakeStruct {lhs = "false_c18_v3518"; ctag = 18; size = 0; data = []};
      CallClo {lhs = "app_lhs_v3519"; fptr = (Reg "send_lhs_v3517");
        aptr = (Reg "false_c18_v3518")};
      (FreeClo (Reg "send_lhs_v3517"));
      CallClo {lhs = "ch_v3516"; fptr = (Reg "app_lhs_v3519"); aptr = NULL};
      Close {lhs = "close_lhs_v3520"; ch = (Reg "ch_v3516")}];
    return = (Reg "close_lhs_v3520") };
  { fname = "lambda_fun_v3505"; arg = (Some "__v3484");
    body =
    [Open {lhs = "open_lhs_v3486"; obj = Stdin};
      CallClo {lhs = "ch_v3485"; fptr = (Reg "open_lhs_v3486"); aptr = NULL};
      Send {lhs = "send_lhs_v3488"; ch = (Reg "ch_v3485")};
      MakeStruct {lhs = "true_c17_v3489"; ctag = 17; size = 0; data = []};
      CallClo {lhs = "app_lhs_v3490"; fptr = (Reg "send_lhs_v3488");
        aptr = (Reg "true_c17_v3489")};
      (FreeClo (Reg "send_lhs_v3488"));
      CallClo {lhs = "ch_v3487"; fptr = (Reg "app_lhs_v3490"); aptr = NULL};
      Recv {lhs = "recv_lhs_v3492"; ch = (Reg "ch_v3487")};
      CallClo {lhs = "__v3491"; fptr = (Reg "recv_lhs_v3492"); aptr = NULL};
      Switch {cond = (Reg "__v3491");
        case =
        [(0,
          [Mov {lhs = "s_v3494"; rhs = (Idx ((Reg "__v3491"), 0))};
            Mov {lhs = "ch_v3495"; rhs = (Idx ((Reg "__v3491"), 1))};
            (FreeStruct (Reg "__v3491"));
            Send {lhs = "send_lhs_v3497"; ch = (Reg "ch_v3495")};
            MakeStruct {lhs = "false_c18_v3498"; ctag = 18; size = 0;
              data = []};
            CallClo {lhs = "app_lhs_v3499"; fptr = (Reg "send_lhs_v3497");
              aptr = (Reg "false_c18_v3498")};
            (FreeClo (Reg "send_lhs_v3497"));
            CallClo {lhs = "ch_v3496"; fptr = (Reg "app_lhs_v3499");
              aptr = NULL};
            Close {lhs = "close_lhs_v3501"; ch = (Reg "ch_v3496")};
            CallClo {lhs = "__v3500"; fptr = (Reg "close_lhs_v3501");
              aptr = NULL};
            MakeClo {lhs = "return_lhs_v3504"; fname = "return_fun_v3502";
              env_size = 17;
              env_ext =
              [(Reg "__v3500"); (Reg "ch_v3496"); (Reg "__v3491");
                (Reg "ch_v3487"); (Reg "ch_v3485"); (Reg "__v3484");
                (Reg "s_v3494"); (Reg "ch_v3495")]};
            Mov {lhs = "match_ret_v3493"; rhs = (Reg "return_lhs_v3504")};
            Break])
          ]}
      ];
    return = (Reg "match_ret_v3493") };
  { fname = "lambda_fun_v3483"; arg = (Some "A_v3477");
    body =
    [MakeClo {lhs = "lambda_lhs_v3482"; fname = "lambda_fun_v3481";
       env_size = 16; env_ext = [(Reg "A_v3477")]}
      ];
    return = (Reg "lambda_lhs_v3482") };
  { fname = "lambda_fun_v3476"; arg = (Some "A_v3462");
    body =
    [MakeClo {lhs = "lambda_lhs_v3475"; fname = "lambda_fun_v3474";
       env_size = 15; env_ext = [(Reg "A_v3462")]}
      ];
    return = (Reg "lambda_lhs_v3475") };
  { fname = "lambda_fun_v3461"; arg = (Some "A_v3447");
    body =
    [MakeClo {lhs = "lambda_lhs_v3460"; fname = "lambda_fun_v3459";
       env_size = 14; env_ext = [(Reg "A_v3447")]}
      ];
    return = (Reg "lambda_lhs_v3460") };
  { fname = "lambda_fun_v3446"; arg = (Some "A_v3432");
    body =
    [MakeClo {lhs = "lambda_lhs_v3445"; fname = "lambda_fun_v3444";
       env_size = 13; env_ext = [(Reg "A_v3432")]}
      ];
    return = (Reg "lambda_lhs_v3445") };
  { fname = "lambda_fun_v3431"; arg = (Some "A_v3413");
    body =
    [MakeClo {lhs = "lambda_lhs_v3430"; fname = "lambda_fun_v3429";
       env_size = 12; env_ext = [(Reg "A_v3413")]}
      ];
    return = (Reg "lambda_lhs_v3430") };
  { fname = "lambda_fun_v3412"; arg = (Some "A_v3401");
    body =
    [MakeClo {lhs = "lambda_lhs_v3411"; fname = "lambda_fun_v3410";
       env_size = 11; env_ext = [(Reg "A_v3401")]}
      ];
    return = (Reg "lambda_lhs_v3411") };
  { fname = "lambda_fun_v3400"; arg = (Some "s_v3393");
    body =
    [Switch {cond = (Reg "s_v3393");
       case =
       [(22,
         [MakeStruct {lhs = "O_c19_v3395"; ctag = 19; size = 0; data = []};
           Mov {lhs = "match_ret_v3394"; rhs = (Reg "O_c19_v3395")}; Break]);
         (23,
          [Mov {lhs = "__v3396"; rhs = (Idx ((Reg "s_v3393"), 0))};
            Mov {lhs = "s_v3397"; rhs = (Idx ((Reg "s_v3393"), 1))};
            CallClo {lhs = "app_lhs_v3398"; fptr = (Env 0);
              aptr = (Reg "s_v3397")};
            MakeStruct {lhs = "S_c20_v3399"; ctag = 20; size = 1;
              data = [(Reg "app_lhs_v3398")]};
            Mov {lhs = "match_ret_v3394"; rhs = (Reg "S_c20_v3399")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3394") };
  { fname = "lambda_fun_v3392"; arg = (Some "s1_v3382");
    body =
    [MakeClo {lhs = "lambda_lhs_v3391"; fname = "lambda_fun_v3390";
       env_size = 9; env_ext = [(Reg "s1_v3382")]}
      ];
    return = (Reg "lambda_lhs_v3391") };
  { fname = "lambda_fun_v3381"; arg = (Some "x_v3366");
    body =
    [MakeClo {lhs = "lambda_lhs_v3380"; fname = "lambda_fun_v3379";
       env_size = 8; env_ext = [(Reg "x_v3366")]}
      ];
    return = (Reg "lambda_lhs_v3380") };
  { fname = "lambda_fun_v3365"; arg = (Some "x_v3353");
    body =
    [MakeClo {lhs = "lambda_lhs_v3364"; fname = "lambda_fun_v3363";
       env_size = 7; env_ext = [(Reg "x_v3353")]}
      ];
    return = (Reg "lambda_lhs_v3364") };
  { fname = "lambda_fun_v3352"; arg = (Some "x_v3337");
    body =
    [MakeClo {lhs = "lambda_lhs_v3351"; fname = "lambda_fun_v3350";
       env_size = 6; env_ext = [(Reg "x_v3337")]}
      ];
    return = (Reg "lambda_lhs_v3351") };
  { fname = "lambda_fun_v3336"; arg = (Some "x_v3326");
    body =
    [MakeClo {lhs = "lambda_lhs_v3335"; fname = "lambda_fun_v3334";
       env_size = 5; env_ext = [(Reg "x_v3326")]}
      ];
    return = (Reg "lambda_lhs_v3335") };
  { fname = "lambda_fun_v3325"; arg = (Some "x_v3316");
    body =
    [MakeClo {lhs = "lambda_lhs_v3324"; fname = "lambda_fun_v3323";
       env_size = 4; env_ext = [(Reg "x_v3316")]}
      ];
    return = (Reg "lambda_lhs_v3324") };
  { fname = "lambda_fun_v3315"; arg = (Some "b_v3311");
    body =
    [Switch {cond = (Reg "b_v3311");
       case =
       [(17,
         [MakeStruct {lhs = "false_c18_v3313"; ctag = 18; size = 0; data = []};
           Mov {lhs = "match_ret_v3312"; rhs = (Reg "false_c18_v3313")};
           Break]);
         (18,
          [MakeStruct {lhs = "true_c17_v3314"; ctag = 17; size = 0; data = []};
            Mov {lhs = "match_ret_v3312"; rhs = (Reg "true_c17_v3314")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v3312") };
  { fname = "lambda_fun_v3310"; arg = (Some "b1_v3304");
    body =
    [MakeClo {lhs = "lambda_lhs_v3309"; fname = "lambda_fun_v3308";
       env_size = 2; env_ext = [(Reg "b1_v3304")]}
      ];
    return = (Reg "lambda_lhs_v3309") };
  { fname = "lambda_fun_v3303"; arg = (Some "b1_v3297");
    body =
    [MakeClo {lhs = "lambda_lhs_v3302"; fname = "lambda_fun_v3301";
       env_size = 1; env_ext = [(Reg "b1_v3297")]}
      ];
    return = (Reg "lambda_lhs_v3302") };
  { fname = "lambda_fun_v3301"; arg = (Some "b2_v3298");
    body =
    [Switch {cond = (Env 1);
       case =
       [(17, [Mov {lhs = "match_ret_v3299"; rhs = (Reg "b2_v3298")}; Break]);
         (18,
          [MakeStruct {lhs = "false_c18_v3300"; ctag = 18; size = 0;
             data = []};
            Mov {lhs = "match_ret_v3299"; rhs = (Reg "false_c18_v3300")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v3299") };
  { fname = "lambda_fun_v3308"; arg = (Some "b2_v3305");
    body =
    [Switch {cond = (Env 1);
       case =
       [(17,
         [MakeStruct {lhs = "true_c17_v3307"; ctag = 17; size = 0; data = []};
           Mov {lhs = "match_ret_v3306"; rhs = (Reg "true_c17_v3307")}; Break
           ]);
         (18, [Mov {lhs = "match_ret_v3306"; rhs = (Reg "b2_v3305")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3306") };
  { fname = "lambda_fun_v3323"; arg = (Some "y_v3317");
    body =
    [Switch {cond = (Env 1);
       case =
       [(19, [Mov {lhs = "match_ret_v3318"; rhs = (Reg "y_v3317")}; Break]);
         (20,
          [Mov {lhs = "x_v3319"; rhs = (Idx ((Env 1), 0))};
            CallClo {lhs = "app_lhs_v3320"; fptr = (Env 2);
              aptr = (Reg "x_v3319")};
            CallClo {lhs = "app_lhs_v3321"; fptr = (Reg "app_lhs_v3320");
              aptr = (Reg "y_v3317")};
            MakeStruct {lhs = "S_c20_v3322"; ctag = 20; size = 1;
              data = [(Reg "app_lhs_v3321")]};
            Mov {lhs = "match_ret_v3318"; rhs = (Reg "S_c20_v3322")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3318") };
  { fname = "lambda_fun_v3334"; arg = (Some "y_v3327");
    body =
    [Switch {cond = (Env 1);
       case =
       [(19, [Mov {lhs = "match_ret_v3328"; rhs = (Reg "y_v3327")}; Break]);
         (20,
          [Mov {lhs = "x_v3329"; rhs = (Idx ((Env 1), 0))};
            CallClo {lhs = "app_lhs_v3330"; fptr = (Env 3);
              aptr = (Reg "y_v3327")};
            CallClo {lhs = "app_lhs_v3331"; fptr = (Env 2);
              aptr = (Reg "x_v3329")};
            CallClo {lhs = "app_lhs_v3332"; fptr = (Reg "app_lhs_v3331");
              aptr = (Reg "y_v3327")};
            CallClo {lhs = "app_lhs_v3333"; fptr = (Reg "app_lhs_v3330");
              aptr = (Reg "app_lhs_v3332")};
            Mov {lhs = "match_ret_v3328"; rhs = (Reg "app_lhs_v3333")}; Break
            ])
         ]}
      ];
    return = (Reg "match_ret_v3328") };
  { fname = "lambda_fun_v3350"; arg = (Some "y_v3338");
    body =
    [Switch {cond = (Env 1);
       case =
       [(19,
         [Switch {cond = (Reg "y_v3338");
            case =
            [(19,
              [MakeStruct {lhs = "true_c17_v3341"; ctag = 17; size = 0;
                 data = []};
                Mov {lhs = "match_ret_v3340"; rhs = (Reg "true_c17_v3341")};
                Break]);
              (20,
               [Mov {lhs = "__v3342"; rhs = (Idx ((Reg "y_v3338"), 0))};
                 MakeStruct {lhs = "false_c18_v3343"; ctag = 18; size = 0;
                   data = []};
                 Mov {lhs = "match_ret_v3340"; rhs = (Reg "false_c18_v3343")};
                 Break])
              ]};
           Mov {lhs = "match_ret_v3339"; rhs = (Reg "match_ret_v3340")};
           Break]);
         (20,
          [Mov {lhs = "x_v3344"; rhs = (Idx ((Env 1), 0))};
            Switch {cond = (Reg "y_v3338");
              case =
              [(19,
                [MakeStruct {lhs = "false_c18_v3346"; ctag = 18; size = 0;
                   data = []};
                  Mov {lhs = "match_ret_v3345"; rhs = (Reg "false_c18_v3346")};
                  Break]);
                (20,
                 [Mov {lhs = "y_v3347"; rhs = (Idx ((Reg "y_v3338"), 0))};
                   CallClo {lhs = "app_lhs_v3348"; fptr = (Env 2);
                     aptr = (Reg "x_v3344")};
                   CallClo {lhs = "app_lhs_v3349";
                     fptr = (Reg "app_lhs_v3348"); aptr = (Reg "y_v3347")};
                   Mov {lhs = "match_ret_v3345"; rhs = (Reg "app_lhs_v3349")};
                   Break])
                ]};
            Mov {lhs = "match_ret_v3339"; rhs = (Reg "match_ret_v3345")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v3339") };
  { fname = "lambda_fun_v3363"; arg = (Some "y_v3354");
    body =
    [Switch {cond = (Env 1);
       case =
       [(19,
         [MakeStruct {lhs = "true_c17_v3356"; ctag = 17; size = 0; data = []};
           Mov {lhs = "match_ret_v3355"; rhs = (Reg "true_c17_v3356")}; Break
           ]);
         (20,
          [Mov {lhs = "x_v3357"; rhs = (Idx ((Env 1), 0))};
            Switch {cond = (Reg "y_v3354");
              case =
              [(19,
                [MakeStruct {lhs = "false_c18_v3359"; ctag = 18; size = 0;
                   data = []};
                  Mov {lhs = "match_ret_v3358"; rhs = (Reg "false_c18_v3359")};
                  Break]);
                (20,
                 [Mov {lhs = "y_v3360"; rhs = (Idx ((Reg "y_v3354"), 0))};
                   CallClo {lhs = "app_lhs_v3361"; fptr = (Env 2);
                     aptr = (Reg "x_v3357")};
                   CallClo {lhs = "app_lhs_v3362";
                     fptr = (Reg "app_lhs_v3361"); aptr = (Reg "y_v3360")};
                   Mov {lhs = "match_ret_v3358"; rhs = (Reg "app_lhs_v3362")};
                   Break])
                ]};
            Mov {lhs = "match_ret_v3355"; rhs = (Reg "match_ret_v3358")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v3355") };
  { fname = "lambda_fun_v3379"; arg = (Some "y_v3367");
    body =
    [Switch {cond = (Env 1);
       case =
       [(19,
         [Switch {cond = (Reg "y_v3367");
            case =
            [(19,
              [MakeStruct {lhs = "true_c17_v3370"; ctag = 17; size = 0;
                 data = []};
                Mov {lhs = "match_ret_v3369"; rhs = (Reg "true_c17_v3370")};
                Break]);
              (20,
               [Mov {lhs = "__v3371"; rhs = (Idx ((Reg "y_v3367"), 0))};
                 MakeStruct {lhs = "false_c18_v3372"; ctag = 18; size = 0;
                   data = []};
                 Mov {lhs = "match_ret_v3369"; rhs = (Reg "false_c18_v3372")};
                 Break])
              ]};
           Mov {lhs = "match_ret_v3368"; rhs = (Reg "match_ret_v3369")};
           Break]);
         (20,
          [Mov {lhs = "x_v3373"; rhs = (Idx ((Env 1), 0))};
            Switch {cond = (Reg "y_v3367");
              case =
              [(19,
                [MakeStruct {lhs = "true_c17_v3375"; ctag = 17; size = 0;
                   data = []};
                  Mov {lhs = "match_ret_v3374"; rhs = (Reg "true_c17_v3375")};
                  Break]);
                (20,
                 [Mov {lhs = "y_v3376"; rhs = (Idx ((Reg "y_v3367"), 0))};
                   CallClo {lhs = "app_lhs_v3377"; fptr = (Env 2);
                     aptr = (Reg "x_v3373")};
                   CallClo {lhs = "app_lhs_v3378";
                     fptr = (Reg "app_lhs_v3377"); aptr = (Reg "y_v3376")};
                   Mov {lhs = "match_ret_v3374"; rhs = (Reg "app_lhs_v3378")};
                   Break])
                ]};
            Mov {lhs = "match_ret_v3368"; rhs = (Reg "match_ret_v3374")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v3368") };
  { fname = "lambda_fun_v3390"; arg = (Some "s2_v3383");
    body =
    [Switch {cond = (Env 1);
       case =
       [(22, [Mov {lhs = "match_ret_v3384"; rhs = (Reg "s2_v3383")}; Break]);
         (23,
          [Mov {lhs = "c_v3385"; rhs = (Idx ((Env 1), 0))};
            Mov {lhs = "s1_v3386"; rhs = (Idx ((Env 1), 1))};
            CallClo {lhs = "app_lhs_v3387"; fptr = (Env 2);
              aptr = (Reg "s1_v3386")};
            CallClo {lhs = "app_lhs_v3388"; fptr = (Reg "app_lhs_v3387");
              aptr = (Reg "s2_v3383")};
            MakeStruct {lhs = "String_c23_v3389"; ctag = 23; size = 2;
              data = [(Reg "c_v3385"); (Reg "app_lhs_v3388")]};
            Mov {lhs = "match_ret_v3384"; rhs = (Reg "String_c23_v3389")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v3384") };
  { fname = "lambda_fun_v3410"; arg = (Some "xs_v3402");
    body =
    [Switch {cond = (Reg "xs_v3402");
       case =
       [(24,
         [MakeStruct {lhs = "O_c19_v3404"; ctag = 19; size = 0; data = []};
           Mov {lhs = "match_ret_v3403"; rhs = (Reg "O_c19_v3404")}; Break]);
         (25,
          [Mov {lhs = "__v3405"; rhs = (Idx ((Reg "xs_v3402"), 0))};
            Mov {lhs = "xs_v3406"; rhs = (Idx ((Reg "xs_v3402"), 1))};
            CallClo {lhs = "app_lhs_v3407"; fptr = (Env 2); aptr = NULL};
            CallClo {lhs = "app_lhs_v3408"; fptr = (Reg "app_lhs_v3407");
              aptr = (Reg "xs_v3406")};
            MakeStruct {lhs = "S_c20_v3409"; ctag = 20; size = 1;
              data = [(Reg "app_lhs_v3408")]};
            Mov {lhs = "match_ret_v3403"; rhs = (Reg "S_c20_v3409")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3403") };
  { fname = "lambda_fun_v3429"; arg = (Some "xs_v3414");
    body =
    [Switch {cond = (Reg "xs_v3414");
       case =
       [(26,
         [(FreeStruct (Reg "xs_v3414"));
           MakeStruct {lhs = "O_c19_v3416"; ctag = 19; size = 0; data = []};
           MakeStruct {lhs = "lnil_c26_v3417"; ctag = 26; size = 0; data = []};
           MakeStruct {lhs = "pair_lhs_v3418"; ctag = 0; size = 2;
             data = [(Reg "O_c19_v3416"); (Reg "lnil_c26_v3417")]};
           Mov {lhs = "match_ret_v3415"; rhs = (Reg "pair_lhs_v3418")}; Break
           ]);
         (27,
          [Mov {lhs = "x_v3419"; rhs = (Idx ((Reg "xs_v3414"), 0))};
            Mov {lhs = "xs_v3420"; rhs = (Idx ((Reg "xs_v3414"), 1))};
            (FreeStruct (Reg "xs_v3414"));
            CallClo {lhs = "app_lhs_v3421"; fptr = (Env 2); aptr = NULL};
            CallClo {lhs = "app_lhs_v3422"; fptr = (Reg "app_lhs_v3421");
              aptr = (Reg "xs_v3420")};
            Switch {cond = (Reg "app_lhs_v3422");
              case =
              [(0,
                [Mov {lhs = "n_v3424"; rhs = (Idx ((Reg "app_lhs_v3422"), 0))};
                  Mov {lhs = "xs_v3425";
                    rhs = (Idx ((Reg "app_lhs_v3422"), 1))};
                  (FreeStruct (Reg "app_lhs_v3422"));
                  MakeStruct {lhs = "S_c20_v3426"; ctag = 20; size = 1;
                    data = [(Reg "n_v3424")]};
                  MakeStruct {lhs = "lcons_c27_v3427"; ctag = 27; size = 2;
                    data = [(Reg "x_v3419"); (Reg "xs_v3425")]};
                  MakeStruct {lhs = "pair_lhs_v3428"; ctag = 0; size = 2;
                    data = [(Reg "S_c20_v3426"); (Reg "lcons_c27_v3427")]};
                  Mov {lhs = "match_ret_v3423"; rhs = (Reg "pair_lhs_v3428")};
                  Break])
                ]};
            Mov {lhs = "match_ret_v3415"; rhs = (Reg "match_ret_v3423")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v3415") };
  { fname = "lambda_fun_v3442"; arg = (Some "ys_v3434");
    body =
    [Switch {cond = (Env 1);
       case =
       [(24, [Mov {lhs = "match_ret_v3435"; rhs = (Reg "ys_v3434")}; Break]);
         (25,
          [Mov {lhs = "x_v3436"; rhs = (Idx ((Env 1), 0))};
            Mov {lhs = "xs_v3437"; rhs = (Idx ((Env 1), 1))};
            CallClo {lhs = "app_lhs_v3438"; fptr = (Env 4); aptr = NULL};
            CallClo {lhs = "app_lhs_v3439"; fptr = (Reg "app_lhs_v3438");
              aptr = (Reg "xs_v3437")};
            CallClo {lhs = "app_lhs_v3440"; fptr = (Reg "app_lhs_v3439");
              aptr = (Reg "ys_v3434")};
            MakeStruct {lhs = "cons_c25_v3441"; ctag = 25; size = 2;
              data = [(Reg "x_v3436"); (Reg "app_lhs_v3440")]};
            Mov {lhs = "match_ret_v3435"; rhs = (Reg "cons_c25_v3441")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v3435") };
  { fname = "lambda_fun_v3444"; arg = (Some "xs_v3433");
    body =
    [MakeClo {lhs = "lambda_lhs_v3443"; fname = "lambda_fun_v3442";
       env_size = 15; env_ext = [(Reg "xs_v3433")]}
      ];
    return = (Reg "lambda_lhs_v3443") };
  { fname = "lambda_fun_v3457"; arg = (Some "ys_v3449");
    body =
    [Switch {cond = (Env 1);
       case =
       [(26,
         [(FreeStruct (Env 1));
           Mov {lhs = "match_ret_v3450"; rhs = (Reg "ys_v3449")}; Break]);
         (27,
          [Mov {lhs = "x_v3451"; rhs = (Idx ((Env 1), 0))};
            Mov {lhs = "xs_v3452"; rhs = (Idx ((Env 1), 1))};
            (FreeStruct (Env 1));
            CallClo {lhs = "app_lhs_v3453"; fptr = (Env 4); aptr = NULL};
            CallClo {lhs = "app_lhs_v3454"; fptr = (Reg "app_lhs_v3453");
              aptr = (Reg "xs_v3452")};
            CallClo {lhs = "app_lhs_v3455"; fptr = (Reg "app_lhs_v3454");
              aptr = (Reg "ys_v3449")};
            (FreeClo (Reg "app_lhs_v3454"));
            MakeStruct {lhs = "lcons_c27_v3456"; ctag = 27; size = 2;
              data = [(Reg "x_v3451"); (Reg "app_lhs_v3455")]};
            Mov {lhs = "match_ret_v3450"; rhs = (Reg "lcons_c27_v3456")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v3450") };
  { fname = "lambda_fun_v3459"; arg = (Some "xs_v3448");
    body =
    [MakeClo {lhs = "lambda_lhs_v3458"; fname = "lambda_fun_v3457";
       env_size = 16; env_ext = [(Reg "xs_v3448")]}
      ];
    return = (Reg "lambda_lhs_v3458") };
  { fname = "lambda_fun_v3470"; arg = (Some "m_v3465");
    body =
    [Switch {cond = (Reg "m_v3465");
       case =
       [(28,
         [Mov {lhs = "a_v3467"; rhs = (Idx ((Reg "m_v3465"), 0))};
           (FreeStruct (Reg "m_v3465"));
           CallClo {lhs = "app_lhs_v3468"; fptr = (Env 1);
             aptr = (Reg "a_v3467")};
           MakeStruct {lhs = "Box_c28_v3469"; ctag = 28; size = 1;
             data = [(Reg "app_lhs_v3468")]};
           Mov {lhs = "match_ret_v3466"; rhs = (Reg "Box_c28_v3469")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3466") };
  { fname = "lambda_fun_v3472"; arg = (Some "f_v3464");
    body =
    [MakeClo {lhs = "lambda_lhs_v3471"; fname = "lambda_fun_v3470";
       env_size = 19; env_ext = [(Reg "f_v3464")]}
      ];
    return = (Reg "lambda_lhs_v3471") };
  { fname = "lambda_fun_v3474"; arg = (Some "B_v3463");
    body =
    [MakeClo {lhs = "lambda_lhs_v3473"; fname = "lambda_fun_v3472";
       env_size = 17; env_ext = [(Reg "B_v3463")]}
      ];
    return = (Reg "lambda_lhs_v3473") };
  { fname = "lambda_fun_v3481"; arg = (Some "m_v3478");
    body =
    [Switch {cond = (Reg "m_v3478");
       case =
       [(28,
         [Mov {lhs = "a_v3480"; rhs = (Idx ((Reg "m_v3478"), 0))};
           (FreeStruct (Reg "m_v3478"));
           Mov {lhs = "match_ret_v3479"; rhs = (Reg "a_v3480")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3479") };
  { fname = "return_fun_v3502"; arg = (Some "__v3503"); body = [];
    return = (Env 7) };
  { fname = "lambda_fun_v3544"; arg = (Some "m_v3540");
    body =
    [Switch {cond = (Reg "m_v3540");
       case =
       [(44,
         [Mov {lhs = "m_v3542"; rhs = (Idx ((Reg "m_v3540"), 0))};
           Mov {lhs = "__v3543"; rhs = (Idx ((Reg "m_v3540"), 1))};
           Mov {lhs = "match_ret_v3541"; rhs = (Reg "m_v3542")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3541") };
  { fname = "lambda_fun_v3546"; arg = (Some "B_v3539");
    body =
    [MakeClo {lhs = "lambda_lhs_v3545"; fname = "lambda_fun_v3544";
       env_size = 22; env_ext = [(Reg "B_v3539")]}
      ];
    return = (Reg "lambda_lhs_v3545") };
  { fname = "lambda_fun_v3555"; arg = (Some "m_v3551");
    body =
    [Switch {cond = (Reg "m_v3551");
       case =
       [(43,
         [Mov {lhs = "m_v3553"; rhs = (Idx ((Reg "m_v3551"), 0))};
           Mov {lhs = "__v3554"; rhs = (Idx ((Reg "m_v3551"), 1))};
           (FreeStruct (Reg "m_v3551"));
           Mov {lhs = "match_ret_v3552"; rhs = (Reg "m_v3553")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3552") };
  { fname = "lambda_fun_v3557"; arg = (Some "B_v3550");
    body =
    [MakeClo {lhs = "lambda_lhs_v3556"; fname = "lambda_fun_v3555";
       env_size = 23; env_ext = [(Reg "B_v3550")]}
      ];
    return = (Reg "lambda_lhs_v3556") };
  { fname = "lambda_fun_v3566"; arg = (Some "m_v3562");
    body =
    [Switch {cond = (Reg "m_v3562");
       case =
       [(39,
         [Mov {lhs = "m_v3564"; rhs = (Idx ((Reg "m_v3562"), 0))};
           Mov {lhs = "__v3565"; rhs = (Idx ((Reg "m_v3562"), 1))};
           (FreeStruct (Reg "m_v3562"));
           Mov {lhs = "match_ret_v3563"; rhs = (Reg "m_v3564")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3563") };
  { fname = "lambda_fun_v3568"; arg = (Some "B_v3561");
    body =
    [MakeClo {lhs = "lambda_lhs_v3567"; fname = "lambda_fun_v3566";
       env_size = 24; env_ext = [(Reg "B_v3561")]}
      ];
    return = (Reg "lambda_lhs_v3567") };
  { fname = "lambda_fun_v3577"; arg = (Some "m_v3573");
    body =
    [Switch {cond = (Reg "m_v3573");
       case =
       [(44,
         [Mov {lhs = "__v3575"; rhs = (Idx ((Reg "m_v3573"), 0))};
           Mov {lhs = "n_v3576"; rhs = (Idx ((Reg "m_v3573"), 1))};
           Mov {lhs = "match_ret_v3574"; rhs = (Reg "n_v3576")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3574") };
  { fname = "lambda_fun_v3579"; arg = (Some "B_v3572");
    body =
    [MakeClo {lhs = "lambda_lhs_v3578"; fname = "lambda_fun_v3577";
       env_size = 25; env_ext = [(Reg "B_v3572")]}
      ];
    return = (Reg "lambda_lhs_v3578") };
  { fname = "lambda_fun_v3588"; arg = (Some "m_v3584");
    body =
    [Switch {cond = (Reg "m_v3584");
       case =
       [(43,
         [Mov {lhs = "__v3586"; rhs = (Idx ((Reg "m_v3584"), 0))};
           Mov {lhs = "n_v3587"; rhs = (Idx ((Reg "m_v3584"), 1))};
           (FreeStruct (Reg "m_v3584"));
           Mov {lhs = "match_ret_v3585"; rhs = (Reg "n_v3587")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3585") };
  { fname = "lambda_fun_v3590"; arg = (Some "B_v3583");
    body =
    [MakeClo {lhs = "lambda_lhs_v3589"; fname = "lambda_fun_v3588";
       env_size = 26; env_ext = [(Reg "B_v3583")]}
      ];
    return = (Reg "lambda_lhs_v3589") };
  { fname = "lambda_fun_v3599"; arg = (Some "m_v3595");
    body =
    [Switch {cond = (Reg "m_v3595");
       case =
       [(41,
         [Mov {lhs = "__v3597"; rhs = (Idx ((Reg "m_v3595"), 0))};
           Mov {lhs = "n_v3598"; rhs = (Idx ((Reg "m_v3595"), 1))};
           (FreeStruct (Reg "m_v3595"));
           Mov {lhs = "match_ret_v3596"; rhs = (Reg "n_v3598")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v3596") };
  { fname = "lambda_fun_v3601"; arg = (Some "B_v3594");
    body =
    [MakeClo {lhs = "lambda_lhs_v3600"; fname = "lambda_fun_v3599";
       env_size = 27; env_ext = [(Reg "B_v3594")]}
      ];
    return = (Reg "lambda_lhs_v3600") }
  ]

[MakeClo {lhs = "andb_i31"; fname = "lambda_fun_v3303"; env_size = 0;
   env_ext = []};
  MakeClo {lhs = "orb_i32"; fname = "lambda_fun_v3310"; env_size = 0;
    env_ext = [(Reg "andb_i31")]};
  MakeClo {lhs = "notb_i33"; fname = "lambda_fun_v3315"; env_size = 0;
    env_ext = [(Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "addn_i34"; fname = "lambda_fun_v3325"; env_size = 0;
    env_ext = [(Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "muln_i35"; fname = "lambda_fun_v3336"; env_size = 0;
    env_ext =
    [(Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "eqn_i36"; fname = "lambda_fun_v3352"; env_size = 0;
    env_ext =
    [(Reg "muln_i35"); (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32");
      (Reg "andb_i31")]};
  MakeClo {lhs = "lten_i37"; fname = "lambda_fun_v3365"; env_size = 0;
    env_ext =
    [(Reg "eqn_i36"); (Reg "muln_i35"); (Reg "addn_i34"); (Reg "notb_i33");
      (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "gten_i38"; fname = "lambda_fun_v3381"; env_size = 0;
    env_ext =
    [(Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35"); (Reg "addn_i34");
      (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "cats_i41"; fname = "lambda_fun_v3392"; env_size = 0;
    env_ext =
    [(Reg "gten_i38"); (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35");
      (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "strlen_i42"; fname = "lambda_fun_v3400"; env_size = 0;
    env_ext =
    [(Reg "cats_i41"); (Reg "gten_i38"); (Reg "lten_i37"); (Reg "eqn_i36");
      (Reg "muln_i35"); (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32");
      (Reg "andb_i31")]};
  MakeClo {lhs = "len_i43"; fname = "lambda_fun_v3412"; env_size = 0;
    env_ext =
    [(Reg "strlen_i42"); (Reg "cats_i41"); (Reg "gten_i38");
      (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35"); (Reg "addn_i34");
      (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "llen_i44"; fname = "lambda_fun_v3431"; env_size = 0;
    env_ext =
    [(Reg "len_i43"); (Reg "strlen_i42"); (Reg "cats_i41"); (Reg "gten_i38");
      (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35"); (Reg "addn_i34");
      (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "append_i45"; fname = "lambda_fun_v3446"; env_size = 0;
    env_ext =
    [(Reg "llen_i44"); (Reg "len_i43"); (Reg "strlen_i42"); (Reg "cats_i41");
      (Reg "gten_i38"); (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35");
      (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "lappend_i46"; fname = "lambda_fun_v3461"; env_size = 0;
    env_ext =
    [(Reg "append_i45"); (Reg "llen_i44"); (Reg "len_i43");
      (Reg "strlen_i42"); (Reg "cats_i41"); (Reg "gten_i38");
      (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35"); (Reg "addn_i34");
      (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "map_box_i47"; fname = "lambda_fun_v3476"; env_size = 0;
    env_ext =
    [(Reg "lappend_i46"); (Reg "append_i45"); (Reg "llen_i44");
      (Reg "len_i43"); (Reg "strlen_i42"); (Reg "cats_i41");
      (Reg "gten_i38"); (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35");
      (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "unbox_i48"; fname = "lambda_fun_v3483"; env_size = 0;
    env_ext =
    [(Reg "map_box_i47"); (Reg "lappend_i46"); (Reg "append_i45");
      (Reg "llen_i44"); (Reg "len_i43"); (Reg "strlen_i42");
      (Reg "cats_i41"); (Reg "gten_i38"); (Reg "lten_i37"); (Reg "eqn_i36");
      (Reg "muln_i35"); (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32");
      (Reg "andb_i31")]};
  MakeClo {lhs = "readline_i55"; fname = "lambda_fun_v3505"; env_size = 0;
    env_ext =
    [(Reg "unbox_i48"); (Reg "map_box_i47"); (Reg "lappend_i46");
      (Reg "append_i45"); (Reg "llen_i44"); (Reg "len_i43");
      (Reg "strlen_i42"); (Reg "cats_i41"); (Reg "gten_i38");
      (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35"); (Reg "addn_i34");
      (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "print_i56"; fname = "lambda_fun_v3521"; env_size = 0;
    env_ext =
    [(Reg "readline_i55"); (Reg "unbox_i48"); (Reg "map_box_i47");
      (Reg "lappend_i46"); (Reg "append_i45"); (Reg "llen_i44");
      (Reg "len_i43"); (Reg "strlen_i42"); (Reg "cats_i41");
      (Reg "gten_i38"); (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35");
      (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "prerr_i57"; fname = "lambda_fun_v3537"; env_size = 0;
    env_ext =
    [(Reg "print_i56"); (Reg "readline_i55"); (Reg "unbox_i48");
      (Reg "map_box_i47"); (Reg "lappend_i46"); (Reg "append_i45");
      (Reg "llen_i44"); (Reg "len_i43"); (Reg "strlen_i42");
      (Reg "cats_i41"); (Reg "gten_i38"); (Reg "lten_i37"); (Reg "eqn_i36");
      (Reg "muln_i35"); (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32");
      (Reg "andb_i31")]};
  MakeClo {lhs = "FstUUU_i73"; fname = "lambda_fun_v3548"; env_size = 0;
    env_ext =
    [(Reg "prerr_i57"); (Reg "print_i56"); (Reg "readline_i55");
      (Reg "unbox_i48"); (Reg "map_box_i47"); (Reg "lappend_i46");
      (Reg "append_i45"); (Reg "llen_i44"); (Reg "len_i43");
      (Reg "strlen_i42"); (Reg "cats_i41"); (Reg "gten_i38");
      (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35"); (Reg "addn_i34");
      (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "FstUUL_i72"; fname = "lambda_fun_v3559"; env_size = 0;
    env_ext =
    [(Reg "FstUUU_i73"); (Reg "prerr_i57"); (Reg "print_i56");
      (Reg "readline_i55"); (Reg "unbox_i48"); (Reg "map_box_i47");
      (Reg "lappend_i46"); (Reg "append_i45"); (Reg "llen_i44");
      (Reg "len_i43"); (Reg "strlen_i42"); (Reg "cats_i41");
      (Reg "gten_i38"); (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35");
      (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "FstLUL_i68"; fname = "lambda_fun_v3570"; env_size = 0;
    env_ext =
    [(Reg "FstUUL_i72"); (Reg "FstUUU_i73"); (Reg "prerr_i57");
      (Reg "print_i56"); (Reg "readline_i55"); (Reg "unbox_i48");
      (Reg "map_box_i47"); (Reg "lappend_i46"); (Reg "append_i45");
      (Reg "llen_i44"); (Reg "len_i43"); (Reg "strlen_i42");
      (Reg "cats_i41"); (Reg "gten_i38"); (Reg "lten_i37"); (Reg "eqn_i36");
      (Reg "muln_i35"); (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32");
      (Reg "andb_i31")]};
  MakeClo {lhs = "SndUUU_i81"; fname = "lambda_fun_v3581"; env_size = 0;
    env_ext =
    [(Reg "FstLUL_i68"); (Reg "FstUUL_i72"); (Reg "FstUUU_i73");
      (Reg "prerr_i57"); (Reg "print_i56"); (Reg "readline_i55");
      (Reg "unbox_i48"); (Reg "map_box_i47"); (Reg "lappend_i46");
      (Reg "append_i45"); (Reg "llen_i44"); (Reg "len_i43");
      (Reg "strlen_i42"); (Reg "cats_i41"); (Reg "gten_i38");
      (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35"); (Reg "addn_i34");
      (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "SndUUL_i80"; fname = "lambda_fun_v3592"; env_size = 0;
    env_ext =
    [(Reg "SndUUU_i81"); (Reg "FstLUL_i68"); (Reg "FstUUL_i72");
      (Reg "FstUUU_i73"); (Reg "prerr_i57"); (Reg "print_i56");
      (Reg "readline_i55"); (Reg "unbox_i48"); (Reg "map_box_i47");
      (Reg "lappend_i46"); (Reg "append_i45"); (Reg "llen_i44");
      (Reg "len_i43"); (Reg "strlen_i42"); (Reg "cats_i41");
      (Reg "gten_i38"); (Reg "lten_i37"); (Reg "eqn_i36"); (Reg "muln_i35");
      (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32"); (Reg "andb_i31")]};
  MakeClo {lhs = "SndULL_i78"; fname = "lambda_fun_v3603"; env_size = 0;
    env_ext =
    [(Reg "SndUUL_i80"); (Reg "SndUUU_i81"); (Reg "FstLUL_i68");
      (Reg "FstUUL_i72"); (Reg "FstUUU_i73"); (Reg "prerr_i57");
      (Reg "print_i56"); (Reg "readline_i55"); (Reg "unbox_i48");
      (Reg "map_box_i47"); (Reg "lappend_i46"); (Reg "append_i45");
      (Reg "llen_i44"); (Reg "len_i43"); (Reg "strlen_i42");
      (Reg "cats_i41"); (Reg "gten_i38"); (Reg "lten_i37"); (Reg "eqn_i36");
      (Reg "muln_i35"); (Reg "addn_i34"); (Reg "notb_i33"); (Reg "orb_i32");
      (Reg "andb_i31")]}
  ]

NULL

trans23 success--------------------------

