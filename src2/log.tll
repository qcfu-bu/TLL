parsing success--------------------------

inductive unit_d1 : U =
| tt_c1 of : unit_d1

inductive bool_d2 : U =
| true_c2 of : bool_d2 | false_c3 of : bool_d2

program andb_i1 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v156 : bool_d2) (b2_v157 : bool_d2) ⇒
    match b1_v156 as __v158 in ??1 with
    | true_c2  ⇒ b2_v157 | false_c3  ⇒ false_c3‹›
    end

program orb_i2 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v161 : bool_d2) (b2_v162 : bool_d2) ⇒
    match b1_v161 as __v163 in ??2 with
    | true_c2  ⇒ true_c2‹› | false_c3  ⇒ b2_v162
    end

program notb_i3 : bool_d2 → bool_d2 =
  fn (b_v165 : bool_d2) ⇒
    match b_v165 as __v166 in ??3 with
    | true_c2  ⇒ false_c3‹› | false_c3  ⇒ true_c2‹›
    end

inductive nat_d3 : U =
| O_c4 of : nat_d3 | S_c5 of (n_v167 : nat_d3) : nat_d3

program addn_i4 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v170 : nat_d3) (y_v171 : nat_d3) ⇒
    match x_v170 as __v172 in ??4 with
    | O_c4  ⇒ y_v171 | S_c5 x_v173 ⇒ (S_c5‹› (addn_i4 x_v173 y_v171))
    end

program muln_i5 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v176 : nat_d3) (y_v177 : nat_d3) ⇒
    match x_v176 as __v178 in ??5 with
    | O_c4  ⇒ y_v177
    | S_c5 x_v179 ⇒ (addn_i4 y_v177 (muln_i5 x_v179 y_v177))
    end

program eqn_i6 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v182 : nat_d3) (y_v183 : nat_d3) ⇒
    match x_v182 as __v184 in ??6 with
    | O_c4  ⇒
      match y_v183 as __v185 in ??8 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v186 ⇒ false_c3‹›
      end
    | S_c5 x_v187 ⇒
      match y_v183 as __v188 in ??7 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v189 ⇒ (eqn_i6 x_v187 y_v189)
      end
    end

program lten_i7 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v192 : nat_d3) (y_v193 : nat_d3) ⇒
    match x_v192 as __v194 in ??9 with
    | O_c4  ⇒ true_c2‹›
    | S_c5 x_v195 ⇒
      match y_v193 as __v196 in ??10 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v197 ⇒ (lten_i7 x_v195 y_v197)
      end
    end

program gten_i8 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v200 : nat_d3) (y_v201 : nat_d3) ⇒
    match x_v200 as __v202 in ??11 with
    | O_c4  ⇒
      match y_v201 as __v203 in ??13 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v204 ⇒ false_c3‹›
      end
    | S_c5 x_v205 ⇒
      match y_v201 as __v206 in ??12 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v207 ⇒ (gten_i8 x_v205 y_v207)
      end
    end

logical ltn_i9 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v210 : nat_d3) (y_v211 : nat_d3) ⇒
    match x_v210 as __v212 in ??14 with
    | O_c4  ⇒
      match y_v211 as __v213 in ??16 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v214 ⇒ true_c2‹›
      end
    | S_c5 x_v215 ⇒
      match y_v211 as __v216 in ??15 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v217 ⇒ (ltn_i9 x_v215 y_v217)
      end
    end

logical gtn_i10 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v220 : nat_d3) (y_v221 : nat_d3) ⇒
    match x_v220 as __v222 in ??17 with
    | O_c4  ⇒ false_c3‹›
    | S_c5 x_v223 ⇒
      match y_v221 as __v224 in ??18 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v225 ⇒ (gtn_i10 x_v223 y_v225)
      end
    end

inductive ascii_d4 : U =
| Ascii_c6 of
    (b0_v226 : bool_d2) (b1_v227 : bool_d2) (b2_v228 : bool_d2)
    (b3_v229 : bool_d2) (b4_v230 : bool_d2) (b5_v231 : bool_d2)
    (b6_v232 : bool_d2) (b7_v233 : bool_d2) : ascii_d4

inductive string_d5 : U =
| EmptyString_c7 of : string_d5
| String_c8 of (c_v234 : ascii_d4) (s_v235 : string_d5) : string_d5

program cats_i11 : string_d5 → string_d5 → string_d5 =
  fn (s1_v238 : string_d5) (s2_v239 : string_d5) ⇒
    match s1_v238 as __v240 in ??19 with
    | EmptyString_c7  ⇒ s2_v239
    | String_c8 c_v241 s1_v242 ⇒
      (String_c8‹› c_v241 (cats_i11 s1_v242 s2_v239))
    end

program strlen_i12 : string_d5 → nat_d3 =
  fn (s_v244 : string_d5) ⇒
    match s_v244 as __v245 in ??20 with
    | EmptyString_c7  ⇒ O_c4‹›
    | String_c8 __v246 s_v247 ⇒ (S_c5‹› (strlen_i12 s_v247))
    end

inductive list_d6 (A_v248 : U) : U =
| nil_c9 of (A_v249 : U) : (list_d6 A_v249)
| cons_c10 of
    (A_v250 : U) (hd_v251 : A_v250) (tl_v252 : (list_d6 A_v250))
    : (list_d6 A_v250)

inductive llist_d7 (A_v253 : L) : L =
| lnil_c11 of (A_v254 : L) : (llist_d7 A_v254)
| lcons_c12 of
    (A_v255 : L) (hd_v256 : A_v255) (tl_v257 : (llist_d7 A_v255))
    : (llist_d7 A_v255)

program len_i13 : ∀ {A_v258 : U} → (list_d6 A_v258) → nat_d3 =
  fn {A_v260 : U} (xs_v261 : (list_d6 A_v260)) ⇒
    match xs_v261 as __v262 in ??21 with
    | nil_c9  ⇒ O_c4‹›
    | cons_c10 __v263 xs_v264 ⇒ (S_c5‹› (len_i13 ??22 xs_v264))
    end

program llen_i14 :
  ∀ {A_v265 : L} → (llist_d7 A_v265) → nat_d3 ⊗ (llist_d7 A_v265)
=
  fn {A_v268 : L} (xs_v269 : (llist_d7 A_v268)) ⇒
    match xs_v269 as __v270 in ??23 with
    | lnil_c11  ⇒ ⟨O_c4‹›, lnil_c11‹›⟩
    | lcons_c12 x_v271 xs_v272 ⇒
      match (llen_i14 A_v268 xs_v272) as __v273 in ??24 with
      | ⟨n_v274, xs_v275⟩ ⇒
        ⟨(S_c5‹› n_v274), (lcons_c12‹› x_v271 xs_v275)⟩
      end
    end

program append_i15 :
  ∀ {A_v276 : U} →
    (list_d6 A_v276) → (list_d6 A_v276) → (list_d6 A_v276)
=
  fn {A_v279 : U} (xs_v280 : (list_d6 A_v279)) (ys_v281 : (list_d6 A_v279)) ⇒
    match xs_v280 as __v282 in ??27 with
    | nil_c9  ⇒ ys_v281
    | cons_c10 x_v283 xs_v284 ⇒
      (cons_c10‹› x_v283 (append_i15 ??28 xs_v284 ys_v281))
    end

program lappend_i16 :
  ∀ {A_v285 : L} →
    (llist_d7 A_v285) → (llist_d7 A_v285) ⊸ (llist_d7 A_v285)
=
  fn {A_v288 : L} (xs_v289 : (llist_d7 A_v288)) ⇒
    ln (ys_v290 : ??30) ⇒
      match xs_v289 as __v291 in ??31 with
      | lnil_c11  ⇒ ys_v290
      | lcons_c12 x_v292 xs_v293 ⇒
        (lcons_c12‹› x_v292 (lappend_i16 ??32 xs_v293 ys_v290))
      end

inductive box_d8 (A_v294 : U) : L =
| Box_c13 of (A_v295 : U) (a_v296 : A_v295) : (box_d8 A_v295)

program map_box_i17 :
  ∀ {A_v297 : U} →
    ∀ {B_v298 : U} →
      A_v297 → B_v298 → (box_d8 A_v297) → (box_d8 B_v298)
=
  fn {A_v302 : U} {B_v303 : U} (f_v304 : A_v302 → B_v303)
     (m_v305 : (box_d8 A_v302)) ⇒
    match m_v305 as __v307 in ??34 with
    | Box_c13 a_v308 ⇒ (Box_c13‹› (f_v304 a_v308))
    end

program unbox_i18 : ∀ {A_v309 : U} → (box_d8 A_v309) → A_v309 =
  fn {A_v311 : U} (m_v312 : (box_d8 A_v311)) ⇒
    match m_v312 as __v313 in ??36 with
    | Box_c13 a_v314 ⇒ a_v314
    end

logical stdin_rec_i19 : unit_d1 → proto =
  fn (__v316 : unit_d1) ⇒
    ⇑(b_v317 : bool_d2) ⇒
      match b_v317 as __v318 in ??37 with
      | true_c2  ⇒ ⇓(__v319 : string_d5) ⇒ (stdin_rec_i19 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdout_rec_i20 : unit_d1 → proto =
  fn (__v321 : unit_d1) ⇒
    ⇑(b_v322 : bool_d2) ⇒
      match b_v322 as __v323 in ??38 with
      | true_c2  ⇒ ⇑(__v324 : string_d5) ⇒ (stdout_rec_i20 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stderr_rec_i21 : unit_d1 → proto =
  fn (__v326 : unit_d1) ⇒
    ⇑(b_v327 : bool_d2) ⇒
      match b_v327 as __v328 in ??39 with
      | true_c2  ⇒ ⇑(__v329 : string_d5) ⇒ (stderr_rec_i21 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 tt_c1‹›)

logical stdout_t_i23 : proto = (stdout_rec_i20 tt_c1‹›)

logical stderr_t_i24 : proto = (stderr_rec_i21 tt_c1‹›)

program readline_i25 : unit_d1 → IO string_d5 =
  fn (__v331 : unit_d1) ⇒
    let ch_v332 ⇐ open stdin in
    let ch_v333 ⇐ (send ch_v332 true_c2‹›) in
    let __v334 ⇐ recv ch_v333 in
    match __v334 as __v335 in ??40 with
    | ⟨s_v336, ch_v337⟩ ⇒
      let ch_v338 ⇐ (send ch_v337 false_c3‹›) in
      let __v339 ⇐ close ch_v338 in return s_v336
    end

program print_i26 : string_d5 → IO unit_d1 =
  fn (s_v341 : string_d5) ⇒
    let ch_v342 ⇐ open stdout in
    let ch_v343 ⇐ (send ch_v342 true_c2‹›) in
    let ch_v344 ⇐ (send ch_v343 s_v341) in
    let ch_v345 ⇐ (send ch_v344 false_c3‹›) in close ch_v345

program prerr_i27 : string_d5 → IO unit_d1 =
  fn (s_v347 : string_d5) ⇒
    let ch_v348 ⇐ open stderr in
    let ch_v349 ⇐ (send ch_v348 true_c2‹›) in
    let ch_v350 ⇐ (send ch_v349 s_v347) in
    let ch_v351 ⇐ (send ch_v350 false_c3‹›) in close ch_v351

program main_i28 : IO unit_d1 =
  let x_v352 ⇐ return tt_c1‹› in return x_v352

trans01 success--------------------------

inductive unit_d1 : U =
| tt_c1 of : unit_d1

inductive bool_d2 : U =
| true_c2 of : bool_d2 | false_c3 of : bool_d2

program andb_i1 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v1461 : bool_d2) (b2_v1462 : bool_d2) ⇒
    match b1_v1461 as __v1463 in bool_d2 with
    | true_c2  ⇒ b2_v1462 | false_c3  ⇒ false_c3‹›
    end

program orb_i2 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v1466 : bool_d2) (b2_v1467 : bool_d2) ⇒
    match b1_v1466 as __v1468 in bool_d2 with
    | true_c2  ⇒ true_c2‹› | false_c3  ⇒ b2_v1467
    end

program notb_i3 : bool_d2 → bool_d2 =
  fn (b_v1470 : bool_d2) ⇒
    match b_v1470 as __v1471 in bool_d2 with
    | true_c2  ⇒ false_c3‹› | false_c3  ⇒ true_c2‹›
    end

inductive nat_d3 : U =
| O_c4 of : nat_d3 | S_c5 of (n_v1472 : nat_d3) : nat_d3

program addn_i4 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v1475 : nat_d3) (y_v1476 : nat_d3) ⇒
    match x_v1475 as __v1477 in nat_d3 with
    | O_c4  ⇒ y_v1476
    | S_c5 x_v1478 ⇒ (S_c5‹› (addn_i4 x_v1478 y_v1476))
    end

program muln_i5 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v1481 : nat_d3) (y_v1482 : nat_d3) ⇒
    match x_v1481 as __v1483 in nat_d3 with
    | O_c4  ⇒ y_v1482
    | S_c5 x_v1484 ⇒ (addn_i4 y_v1482 (muln_i5 x_v1484 y_v1482))
    end

program eqn_i6 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v1487 : nat_d3) (y_v1488 : nat_d3) ⇒
    match x_v1487 as __v1489 in bool_d2 with
    | O_c4  ⇒
      match y_v1488 as __v1490 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v1491 ⇒ false_c3‹›
      end
    | S_c5 x_v1492 ⇒
      match y_v1488 as __v1493 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v1494 ⇒ (eqn_i6 x_v1492 y_v1494)
      end
    end

program lten_i7 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v1497 : nat_d3) (y_v1498 : nat_d3) ⇒
    match x_v1497 as __v1499 in bool_d2 with
    | O_c4  ⇒ true_c2‹›
    | S_c5 x_v1500 ⇒
      match y_v1498 as __v1501 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v1502 ⇒ (lten_i7 x_v1500 y_v1502)
      end
    end

program gten_i8 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v1505 : nat_d3) (y_v1506 : nat_d3) ⇒
    match x_v1505 as __v1507 in bool_d2 with
    | O_c4  ⇒
      match y_v1506 as __v1508 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v1509 ⇒ false_c3‹›
      end
    | S_c5 x_v1510 ⇒
      match y_v1506 as __v1511 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v1512 ⇒ (gten_i8 x_v1510 y_v1512)
      end
    end

logical ltn_i9 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v1515 : nat_d3) (y_v1516 : nat_d3) ⇒
    match x_v1515 as __v1517 in bool_d2 with
    | O_c4  ⇒
      match y_v1516 as __v1518 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v1519 ⇒ true_c2‹›
      end
    | S_c5 x_v1520 ⇒
      match y_v1516 as __v1521 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v1522 ⇒ (ltn_i9 x_v1520 y_v1522)
      end
    end

logical gtn_i10 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v1525 : nat_d3) (y_v1526 : nat_d3) ⇒
    match x_v1525 as __v1527 in bool_d2 with
    | O_c4  ⇒ false_c3‹›
    | S_c5 x_v1528 ⇒
      match y_v1526 as __v1529 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v1530 ⇒ (gtn_i10 x_v1528 y_v1530)
      end
    end

inductive ascii_d4 : U =
| Ascii_c6 of
    (b0_v1531 : bool_d2) (b1_v1532 : bool_d2) (b2_v1533 : bool_d2)
    (b3_v1534 : bool_d2) (b4_v1535 : bool_d2) (b5_v1536 : bool_d2)
    (b6_v1537 : bool_d2) (b7_v1538 : bool_d2) : ascii_d4

inductive string_d5 : U =
| EmptyString_c7 of : string_d5
| String_c8 of (c_v1539 : ascii_d4) (s_v1540 : string_d5) : string_d5

program cats_i11 : string_d5 → string_d5 → string_d5 =
  fn (s1_v1543 : string_d5) (s2_v1544 : string_d5) ⇒
    match s1_v1543 as __v1545 in string_d5 with
    | EmptyString_c7  ⇒ s2_v1544
    | String_c8 c_v1546 s1_v1547 ⇒
      (String_c8‹› c_v1546 (cats_i11 s1_v1547 s2_v1544))
    end

program strlen_i12 : string_d5 → nat_d3 =
  fn (s_v1549 : string_d5) ⇒
    match s_v1549 as __v1550 in nat_d3 with
    | EmptyString_c7  ⇒ O_c4‹›
    | String_c8 __v1551 s_v1552 ⇒ (S_c5‹› (strlen_i12 s_v1552))
    end

inductive list_d6 (A_v1553 : U) : U =
| nil_c9 of (A_v1554 : U) : (list_d6 A_v1554)
| cons_c10 of
    (A_v1555 : U) (hd_v1556 : A_v1555) (tl_v1557 : (list_d6 A_v1555))
    : (list_d6 A_v1555)

inductive llist_d7 (A_v1558 : L) : L =
| lnil_c11 of (A_v1559 : L) : (llist_d7 A_v1559)
| lcons_c12 of
    (A_v1560 : L) (hd_v1561 : A_v1560) (tl_v1562 : (llist_d7 A_v1560))
    : (llist_d7 A_v1560)

program len_i13 : ∀ {A_v1563 : U} → (list_d6 A_v1563) → nat_d3 =
  fn {A_v1565 : U} (xs_v1566 : (list_d6 A_v1565)) ⇒
    match xs_v1566 as __v1567 in nat_d3 with
    | nil_c9  ⇒ O_c4‹›
    | cons_c10 __v1568 xs_v1569 ⇒ (S_c5‹› (len_i13 A_v1565 xs_v1569))
    end

program llen_i14 :
  ∀ {A_v1570 : L} → (llist_d7 A_v1570) → nat_d3 ⊗ (llist_d7 A_v1570)
=
  fn {A_v1573 : L} (xs_v1574 : (llist_d7 A_v1573)) ⇒
    match xs_v1574 as __v1575 in nat_d3 ⊗ (llist_d7 A_v1573) with
    | lnil_c11  ⇒ ⟨O_c4‹›, lnil_c11‹›⟩
    | lcons_c12 x_v1577 xs_v1578 ⇒
      match (llen_i14 A_v1573 xs_v1578) as __v1579 in
        nat_d3 ⊗ (llist_d7 A_v1573) with
      | ⟨n_v1581, xs_v1582⟩ ⇒
        ⟨(S_c5‹› n_v1581), (lcons_c12‹› x_v1577 xs_v1582)⟩
      end
    end

program append_i15 :
  ∀ {A_v1583 : U} →
    (list_d6 A_v1583) → (list_d6 A_v1583) → (list_d6 A_v1583)
=
  fn {A_v1586 : U} (xs_v1587 : (list_d6 A_v1586))
     (ys_v1588 : (list_d6 A_v1586)) ⇒
    match xs_v1587 as __v1589 in (list_d6 A_v1586) with
    | nil_c9  ⇒ ys_v1588
    | cons_c10 x_v1590 xs_v1591 ⇒
      (cons_c10‹› x_v1590 (append_i15 A_v1586 xs_v1591 ys_v1588))
    end

program lappend_i16 :
  ∀ {A_v1592 : L} →
    (llist_d7 A_v1592) → (llist_d7 A_v1592) ⊸ (llist_d7 A_v1592)
=
  fn {A_v1595 : L} (xs_v1596 : (llist_d7 A_v1595)) ⇒
    ln (ys_v1597 : (llist_d7 A_v1595)) ⇒
      match xs_v1596 as __v1598 in (llist_d7 A_v1595) with
      | lnil_c11  ⇒ ys_v1597
      | lcons_c12 x_v1599 xs_v1600 ⇒
        (lcons_c12‹› x_v1599 (lappend_i16 A_v1595 xs_v1600 ys_v1597))
      end

inductive box_d8 (A_v1601 : U) : L =
| Box_c13 of (A_v1602 : U) (a_v1603 : A_v1602) : (box_d8 A_v1602)

program map_box_i17 :
  ∀ {A_v1604 : U} →
    ∀ {B_v1605 : U} →
      A_v1604 → B_v1605 → (box_d8 A_v1604) → (box_d8 B_v1605)
=
  fn {A_v1609 : U} {B_v1610 : U} (f_v1611 : A_v1609 → B_v1610)
     (m_v1612 : (box_d8 A_v1609)) ⇒
    match m_v1612 as __v1614 in (box_d8 B_v1610) with
    | Box_c13 a_v1615 ⇒ (Box_c13‹› (f_v1611 a_v1615))
    end

program unbox_i18 : ∀ {A_v1616 : U} → (box_d8 A_v1616) → A_v1616 =
  fn {A_v1618 : U} (m_v1619 : (box_d8 A_v1618)) ⇒
    match m_v1619 as __v1620 in A_v1618 with
    | Box_c13 a_v1621 ⇒ a_v1621
    end

logical stdin_rec_i19 : unit_d1 → proto =
  fn (__v1623 : unit_d1) ⇒
    ⇑(b_v1624 : bool_d2) ⇒
      match b_v1624 as __v1625 in proto with
      | true_c2  ⇒ ⇓(__v1626 : string_d5) ⇒ (stdin_rec_i19 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdout_rec_i20 : unit_d1 → proto =
  fn (__v1628 : unit_d1) ⇒
    ⇑(b_v1629 : bool_d2) ⇒
      match b_v1629 as __v1630 in proto with
      | true_c2  ⇒
        ⇑(__v1631 : string_d5) ⇒ (stdout_rec_i20 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stderr_rec_i21 : unit_d1 → proto =
  fn (__v1633 : unit_d1) ⇒
    ⇑(b_v1634 : bool_d2) ⇒
      match b_v1634 as __v1635 in proto with
      | true_c2  ⇒
        ⇑(__v1636 : string_d5) ⇒ (stderr_rec_i21 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 tt_c1‹›)

logical stdout_t_i23 : proto = (stdout_rec_i20 tt_c1‹›)

logical stderr_t_i24 : proto = (stderr_rec_i21 tt_c1‹›)

program readline_i25 : unit_d1 → IO string_d5 =
  fn (__v1638 : unit_d1) ⇒
    let ch_v1639 ⇐ open stdin in
    let ch_v1640 ⇐ (send ch_v1639 true_c2‹›) in
    let __v1641 ⇐ recv ch_v1640 in
    match __v1641 as __v1642 in IO string_d5 with
    | ⟨s_v1643, ch_v1644⟩ ⇒
      let ch_v1645 ⇐ (send ch_v1644 false_c3‹›) in
      let __v1646 ⇐ close ch_v1645 in return s_v1643
    end

program print_i26 : string_d5 → IO unit_d1 =
  fn (s_v1648 : string_d5) ⇒
    let ch_v1649 ⇐ open stdout in
    let ch_v1650 ⇐ (send ch_v1649 true_c2‹›) in
    let ch_v1651 ⇐ (send ch_v1650 s_v1648) in
    let ch_v1652 ⇐ (send ch_v1651 false_c3‹›) in close ch_v1652

program prerr_i27 : string_d5 → IO unit_d1 =
  fn (s_v1654 : string_d5) ⇒
    let ch_v1655 ⇐ open stderr in
    let ch_v1656 ⇐ (send ch_v1655 true_c2‹›) in
    let ch_v1657 ⇐ (send ch_v1656 s_v1654) in
    let ch_v1658 ⇐ (send ch_v1657 false_c3‹›) in close ch_v1658

program main_i28 : IO unit_d1 =
  let x_v1659 ⇐ return tt_c1‹› in return x_v1659

trans1e success--------------------------

data unit_d9 =
| tt_c14 of size(0)

data bool_d10 =
| true_c15 of size(0) | false_c16 of size(0)

def andb_i29 =
  fn b1_v1854 b2_v1855 ⇒
    match b1_v1854 with
    | true_c15  ⇒ b2_v1855 | false_c16  ⇒ false_c16
    end

def orb_i30 =
  fn b1_v1856 b2_v1857 ⇒
    match b1_v1856 with
    | true_c15  ⇒ true_c15 | false_c16  ⇒ b2_v1857
    end

def notb_i31 =
  fn b_v1858 ⇒
    match b_v1858 with
    | true_c15  ⇒ false_c16 | false_c16  ⇒ true_c15
    end

data nat_d11 =
| O_c17 of size(0) | S_c18 of size(1)

def addn_i32 =
  fn x_v1859 y_v1860 ⇒
    match x_v1859 with
    | O_c17  ⇒ y_v1860
    | S_c18 x_v1861 ⇒ (S_c18 ((addn_i32 x_v1861) y_v1860))
    end

def muln_i33 =
  fn x_v1862 y_v1863 ⇒
    match x_v1862 with
    | O_c17  ⇒ y_v1863
    | S_c18 x_v1864 ⇒ ((addn_i32 y_v1863) ((muln_i33 x_v1864) y_v1863))
    end

def eqn_i34 =
  fn x_v1865 y_v1866 ⇒
    match x_v1865 with
    | O_c17  ⇒
      match y_v1866 with
      | O_c17  ⇒ true_c15 | S_c18 __v1867 ⇒ false_c16
      end
    | S_c18 x_v1868 ⇒
      match y_v1866 with
      | O_c17  ⇒ false_c16 | S_c18 y_v1869 ⇒ ((eqn_i34 x_v1868) y_v1869)
      end
    end

def lten_i35 =
  fn x_v1870 y_v1871 ⇒
    match x_v1870 with
    | O_c17  ⇒ true_c15
    | S_c18 x_v1872 ⇒
      match y_v1871 with
      | O_c17  ⇒ false_c16 | S_c18 y_v1873 ⇒ ((lten_i35 x_v1872) y_v1873)
      end
    end

def gten_i36 =
  fn x_v1874 y_v1875 ⇒
    match x_v1874 with
    | O_c17  ⇒
      match y_v1875 with
      | O_c17  ⇒ true_c15 | S_c18 __v1876 ⇒ false_c16
      end
    | S_c18 x_v1877 ⇒
      match y_v1875 with
      | O_c17  ⇒ true_c15 | S_c18 y_v1878 ⇒ ((gten_i36 x_v1877) y_v1878)
      end
    end

data ascii_d12 =
| Ascii_c19 of size(8)

data string_d13 =
| EmptyString_c20 of size(0) | String_c21 of size(2)

def cats_i39 =
  fn s1_v1879 s2_v1880 ⇒
    match s1_v1879 with
    | EmptyString_c20  ⇒ s2_v1880
    | String_c21 c_v1881 s1_v1882 ⇒
      (String_c21 c_v1881 ((cats_i39 s1_v1882) s2_v1880))
    end

def strlen_i40 =
  fn s_v1883 ⇒
    match s_v1883 with
    | EmptyString_c20  ⇒ O_c17
    | String_c21 __v1884 s_v1885 ⇒ (S_c18 (strlen_i40 s_v1885))
    end

data list_d14 =
| nil_c22 of size(0) | cons_c23 of size(2)

data llist_d15 =
| lnil_c24 of size(0) | lcons_c25 of size(2)

def len_i41 =
  fn A_v1886 xs_v1887 ⇒
    match xs_v1887 with
    | nil_c22  ⇒ O_c17
    | cons_c23 __v1888 xs_v1889 ⇒ (S_c18 ((len_i41 NULL) xs_v1889))
    end

def llen_i42 =
  fn A_v1890 xs_v1891 ⇒
    match xs_v1891 with
    | lnil_c24  ⇒ (O_c17, lnil_c24)
    | lcons_c25 x_v1892 xs_v1893 ⇒
      match ((llen_i42 NULL) xs_v1893) with
      | (n_v1894, xs_v1895) ⇒
        ((S_c18 n_v1894), (lcons_c25 x_v1892 xs_v1895))
      end
    end

def append_i43 =
  fn A_v1896 xs_v1897 ys_v1898 ⇒
    match xs_v1897 with
    | nil_c22  ⇒ ys_v1898
    | cons_c23 x_v1899 xs_v1900 ⇒
      (cons_c23 x_v1899 (((append_i43 NULL) xs_v1900) ys_v1898))
    end

def lappend_i44 =
  fn A_v1901 xs_v1902 ys_v1903 ⇒
    match xs_v1902 with
    | lnil_c24  ⇒ ys_v1903
    | lcons_c25 x_v1904 xs_v1905 ⇒
      (lcons_c25 x_v1904 (((lappend_i44 NULL) xs_v1905) ys_v1903))
    end

data box_d16 =
| Box_c26 of size(1)

def map_box_i45 =
  fn A_v1906 B_v1907 f_v1908 m_v1909 ⇒
    match m_v1909 with
    | Box_c26 a_v1910 ⇒ (Box_c26 (f_v1908 a_v1910))
    end

def unbox_i46 =
  fn A_v1911 m_v1912 ⇒ match m_v1912 with
                         | Box_c26 a_v1913 ⇒ a_v1913
                         end

def readline_i53 =
  fn __v1914 ⇒
    let ch_v1915 ⇐ open stdin in
    let ch_v1916 ⇐ (send ch_v1915 true_c15) in
    let __v1917 ⇐ recv ch_v1916 in
    match __v1917 with
    | (s_v1918, ch_v1919) ⇒
      let ch_v1920 ⇐ (send ch_v1919 false_c16) in
      let __v1921 ⇐ close⇑ ch_v1920 in return s_v1918
    end

def print_i54 =
  fn s_v1922 ⇒
    let ch_v1923 ⇐ open stdout in
    let ch_v1924 ⇐ (send ch_v1923 true_c15) in
    let ch_v1925 ⇐ (send ch_v1924 s_v1922) in
    let ch_v1926 ⇐ (send ch_v1925 false_c16) in close⇑ ch_v1926

def prerr_i55 =
  fn s_v1927 ⇒
    let ch_v1928 ⇐ open stderr in
    let ch_v1929 ⇐ (send ch_v1928 true_c15) in
    let ch_v1930 ⇐ (send ch_v1929 s_v1927) in
    let ch_v1931 ⇐ (send ch_v1930 false_c16) in close⇑ ch_v1931

main = let x_v1932 ⇐ return tt_c14 in return x_v1932

trans12 success--------------------------

[{ fname = "lambda_fun_v2173"; arg = (Some "s_v2158");
   body =
   [Open {lhs = "open_lhs_v2160"; obj = Stderr};
     CallClo {lhs = "ch_v2159"; fptr = (Reg "open_lhs_v2160"); aptr = NULL};
     (FreeClo (Reg "open_lhs_v2160"));
     Send {lhs = "send_lhs_v2162"; ch = (Reg "ch_v2159")};
     MakeStruct {lhs = "true_c15_v2163"; ctag = 15; size = 0; data = []};
     CallClo {lhs = "app_lhs_v2164"; fptr = (Reg "send_lhs_v2162");
       aptr = (Reg "true_c15_v2163")};
     (FreeClo (Reg "send_lhs_v2162"));
     CallClo {lhs = "ch_v2161"; fptr = (Reg "app_lhs_v2164"); aptr = NULL};
     (FreeClo (Reg "app_lhs_v2164"));
     Send {lhs = "send_lhs_v2166"; ch = (Reg "ch_v2161")};
     CallClo {lhs = "app_lhs_v2167"; fptr = (Reg "send_lhs_v2166");
       aptr = (Reg "s_v2158")};
     (FreeClo (Reg "send_lhs_v2166"));
     CallClo {lhs = "ch_v2165"; fptr = (Reg "app_lhs_v2167"); aptr = NULL};
     (FreeClo (Reg "app_lhs_v2167"));
     Send {lhs = "send_lhs_v2169"; ch = (Reg "ch_v2165")};
     MakeStruct {lhs = "false_c16_v2170"; ctag = 16; size = 0; data = []};
     CallClo {lhs = "app_lhs_v2171"; fptr = (Reg "send_lhs_v2169");
       aptr = (Reg "false_c16_v2170")};
     (FreeClo (Reg "send_lhs_v2169"));
     CallClo {lhs = "ch_v2168"; fptr = (Reg "app_lhs_v2171"); aptr = NULL};
     (FreeClo (Reg "app_lhs_v2171"));
     Close {lhs = "close_lhs_v2172"; ch = (Reg "ch_v2168")}];
   return = (Reg "close_lhs_v2172") };
  { fname = "lambda_fun_v2157"; arg = (Some "s_v2142");
    body =
    [Open {lhs = "open_lhs_v2144"; obj = Stdout};
      CallClo {lhs = "ch_v2143"; fptr = (Reg "open_lhs_v2144"); aptr = NULL};
      (FreeClo (Reg "open_lhs_v2144"));
      Send {lhs = "send_lhs_v2146"; ch = (Reg "ch_v2143")};
      MakeStruct {lhs = "true_c15_v2147"; ctag = 15; size = 0; data = []};
      CallClo {lhs = "app_lhs_v2148"; fptr = (Reg "send_lhs_v2146");
        aptr = (Reg "true_c15_v2147")};
      (FreeClo (Reg "send_lhs_v2146"));
      CallClo {lhs = "ch_v2145"; fptr = (Reg "app_lhs_v2148"); aptr = NULL};
      (FreeClo (Reg "app_lhs_v2148"));
      Send {lhs = "send_lhs_v2150"; ch = (Reg "ch_v2145")};
      CallClo {lhs = "app_lhs_v2151"; fptr = (Reg "send_lhs_v2150");
        aptr = (Reg "s_v2142")};
      (FreeClo (Reg "send_lhs_v2150"));
      CallClo {lhs = "ch_v2149"; fptr = (Reg "app_lhs_v2151"); aptr = NULL};
      (FreeClo (Reg "app_lhs_v2151"));
      Send {lhs = "send_lhs_v2153"; ch = (Reg "ch_v2149")};
      MakeStruct {lhs = "false_c16_v2154"; ctag = 16; size = 0; data = []};
      CallClo {lhs = "app_lhs_v2155"; fptr = (Reg "send_lhs_v2153");
        aptr = (Reg "false_c16_v2154")};
      (FreeClo (Reg "send_lhs_v2153"));
      CallClo {lhs = "ch_v2152"; fptr = (Reg "app_lhs_v2155"); aptr = NULL};
      (FreeClo (Reg "app_lhs_v2155"));
      Close {lhs = "close_lhs_v2156"; ch = (Reg "ch_v2152")}];
    return = (Reg "close_lhs_v2156") };
  { fname = "lambda_fun_v2141"; arg = (Some "__v2120");
    body =
    [Open {lhs = "open_lhs_v2122"; obj = Stdin};
      CallClo {lhs = "ch_v2121"; fptr = (Reg "open_lhs_v2122"); aptr = NULL};
      (FreeClo (Reg "open_lhs_v2122"));
      Send {lhs = "send_lhs_v2124"; ch = (Reg "ch_v2121")};
      MakeStruct {lhs = "true_c15_v2125"; ctag = 15; size = 0; data = []};
      CallClo {lhs = "app_lhs_v2126"; fptr = (Reg "send_lhs_v2124");
        aptr = (Reg "true_c15_v2125")};
      (FreeClo (Reg "send_lhs_v2124"));
      CallClo {lhs = "ch_v2123"; fptr = (Reg "app_lhs_v2126"); aptr = NULL};
      (FreeClo (Reg "app_lhs_v2126"));
      Recv {lhs = "recv_lhs_v2128"; ch = (Reg "ch_v2123")};
      CallClo {lhs = "__v2127"; fptr = (Reg "recv_lhs_v2128"); aptr = NULL};
      (FreeClo (Reg "recv_lhs_v2128"));
      Switch {cond = (Reg "__v2127");
        case =
        [(0,
          [Mov {lhs = "s_v2130"; rhs = (Idx ((Reg "__v2127"), 0))};
            Mov {lhs = "ch_v2131"; rhs = (Idx ((Reg "__v2127"), 1))};
            (FreeStruct (Reg "__v2127"));
            Send {lhs = "send_lhs_v2133"; ch = (Reg "ch_v2131")};
            MakeStruct {lhs = "false_c16_v2134"; ctag = 16; size = 0;
              data = []};
            CallClo {lhs = "app_lhs_v2135"; fptr = (Reg "send_lhs_v2133");
              aptr = (Reg "false_c16_v2134")};
            (FreeClo (Reg "send_lhs_v2133"));
            CallClo {lhs = "ch_v2132"; fptr = (Reg "app_lhs_v2135");
              aptr = NULL};
            (FreeClo (Reg "app_lhs_v2135"));
            Close {lhs = "close_lhs_v2137"; ch = (Reg "ch_v2132")};
            CallClo {lhs = "__v2136"; fptr = (Reg "close_lhs_v2137");
              aptr = NULL};
            (FreeClo (Reg "close_lhs_v2137"));
            MakeClo {lhs = "return_lhs_v2140"; fname = "return_fun_v2138";
              env_size = 17;
              env_ext =
              [(Reg "__v2136"); (Reg "ch_v2132"); (Reg "__v2127");
                (Reg "ch_v2123"); (Reg "ch_v2121"); (Reg "__v2120");
                (Reg "s_v2130"); (Reg "ch_v2131")]};
            Mov {lhs = "match_ret_v2129"; rhs = (Reg "return_lhs_v2140")};
            Break])
          ]}
      ];
    return = (Reg "match_ret_v2129") };
  { fname = "lambda_fun_v2119"; arg = (Some "A_v2113");
    body =
    [MakeClo {lhs = "lambda_lhs_v2118"; fname = "lambda_fun_v2117";
       env_size = 16; env_ext = [(Reg "A_v2113")]}
      ];
    return = (Reg "lambda_lhs_v2118") };
  { fname = "lambda_fun_v2112"; arg = (Some "A_v2098");
    body =
    [MakeClo {lhs = "lambda_lhs_v2111"; fname = "lambda_fun_v2110";
       env_size = 15; env_ext = [(Reg "A_v2098")]}
      ];
    return = (Reg "lambda_lhs_v2111") };
  { fname = "lambda_fun_v2097"; arg = (Some "A_v2083");
    body =
    [MakeClo {lhs = "lambda_lhs_v2096"; fname = "lambda_fun_v2095";
       env_size = 14; env_ext = [(Reg "A_v2083")]}
      ];
    return = (Reg "lambda_lhs_v2096") };
  { fname = "lambda_fun_v2082"; arg = (Some "A_v2068");
    body =
    [MakeClo {lhs = "lambda_lhs_v2081"; fname = "lambda_fun_v2080";
       env_size = 13; env_ext = [(Reg "A_v2068")]}
      ];
    return = (Reg "lambda_lhs_v2081") };
  { fname = "lambda_fun_v2067"; arg = (Some "A_v2049");
    body =
    [MakeClo {lhs = "lambda_lhs_v2066"; fname = "lambda_fun_v2065";
       env_size = 12; env_ext = [(Reg "A_v2049")]}
      ];
    return = (Reg "lambda_lhs_v2066") };
  { fname = "lambda_fun_v2048"; arg = (Some "A_v2037");
    body =
    [MakeClo {lhs = "lambda_lhs_v2047"; fname = "lambda_fun_v2046";
       env_size = 11; env_ext = [(Reg "A_v2037")]}
      ];
    return = (Reg "lambda_lhs_v2047") };
  { fname = "lambda_fun_v2036"; arg = (Some "s_v2029");
    body =
    [Switch {cond = (Reg "s_v2029");
       case =
       [(20,
         [MakeStruct {lhs = "O_c17_v2031"; ctag = 17; size = 0; data = []};
           Mov {lhs = "match_ret_v2030"; rhs = (Reg "O_c17_v2031")}; Break]);
         (21,
          [Mov {lhs = "__v2032"; rhs = (Idx ((Reg "s_v2029"), 0))};
            Mov {lhs = "s_v2033"; rhs = (Idx ((Reg "s_v2029"), 1))};
            CallClo {lhs = "app_lhs_v2034"; fptr = (Env 0);
              aptr = (Reg "s_v2033")};
            MakeStruct {lhs = "S_c18_v2035"; ctag = 18; size = 1;
              data = [(Reg "app_lhs_v2034")]};
            Mov {lhs = "match_ret_v2030"; rhs = (Reg "S_c18_v2035")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v2030") };
  { fname = "lambda_fun_v2028"; arg = (Some "s1_v2018");
    body =
    [MakeClo {lhs = "lambda_lhs_v2027"; fname = "lambda_fun_v2026";
       env_size = 9; env_ext = [(Reg "s1_v2018")]}
      ];
    return = (Reg "lambda_lhs_v2027") };
  { fname = "lambda_fun_v2017"; arg = (Some "x_v2002");
    body =
    [MakeClo {lhs = "lambda_lhs_v2016"; fname = "lambda_fun_v2015";
       env_size = 8; env_ext = [(Reg "x_v2002")]}
      ];
    return = (Reg "lambda_lhs_v2016") };
  { fname = "lambda_fun_v2001"; arg = (Some "x_v1989");
    body =
    [MakeClo {lhs = "lambda_lhs_v2000"; fname = "lambda_fun_v1999";
       env_size = 7; env_ext = [(Reg "x_v1989")]}
      ];
    return = (Reg "lambda_lhs_v2000") };
  { fname = "lambda_fun_v1988"; arg = (Some "x_v1973");
    body =
    [MakeClo {lhs = "lambda_lhs_v1987"; fname = "lambda_fun_v1986";
       env_size = 6; env_ext = [(Reg "x_v1973")]}
      ];
    return = (Reg "lambda_lhs_v1987") };
  { fname = "lambda_fun_v1972"; arg = (Some "x_v1962");
    body =
    [MakeClo {lhs = "lambda_lhs_v1971"; fname = "lambda_fun_v1970";
       env_size = 5; env_ext = [(Reg "x_v1962")]}
      ];
    return = (Reg "lambda_lhs_v1971") };
  { fname = "lambda_fun_v1961"; arg = (Some "x_v1952");
    body =
    [MakeClo {lhs = "lambda_lhs_v1960"; fname = "lambda_fun_v1959";
       env_size = 4; env_ext = [(Reg "x_v1952")]}
      ];
    return = (Reg "lambda_lhs_v1960") };
  { fname = "lambda_fun_v1951"; arg = (Some "b_v1947");
    body =
    [Switch {cond = (Reg "b_v1947");
       case =
       [(15,
         [MakeStruct {lhs = "false_c16_v1949"; ctag = 16; size = 0; data = []};
           Mov {lhs = "match_ret_v1948"; rhs = (Reg "false_c16_v1949")};
           Break]);
         (16,
          [MakeStruct {lhs = "true_c15_v1950"; ctag = 15; size = 0; data = []};
            Mov {lhs = "match_ret_v1948"; rhs = (Reg "true_c15_v1950")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v1948") };
  { fname = "lambda_fun_v1946"; arg = (Some "b1_v1940");
    body =
    [MakeClo {lhs = "lambda_lhs_v1945"; fname = "lambda_fun_v1944";
       env_size = 2; env_ext = [(Reg "b1_v1940")]}
      ];
    return = (Reg "lambda_lhs_v1945") };
  { fname = "lambda_fun_v1939"; arg = (Some "b1_v1933");
    body =
    [MakeClo {lhs = "lambda_lhs_v1938"; fname = "lambda_fun_v1937";
       env_size = 1; env_ext = [(Reg "b1_v1933")]}
      ];
    return = (Reg "lambda_lhs_v1938") };
  { fname = "lambda_fun_v1937"; arg = (Some "b2_v1934");
    body =
    [Switch {cond = (Env 1);
       case =
       [(15, [Mov {lhs = "match_ret_v1935"; rhs = (Reg "b2_v1934")}; Break]);
         (16,
          [MakeStruct {lhs = "false_c16_v1936"; ctag = 16; size = 0;
             data = []};
            Mov {lhs = "match_ret_v1935"; rhs = (Reg "false_c16_v1936")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v1935") };
  { fname = "lambda_fun_v1944"; arg = (Some "b2_v1941");
    body =
    [Switch {cond = (Env 1);
       case =
       [(15,
         [MakeStruct {lhs = "true_c15_v1943"; ctag = 15; size = 0; data = []};
           Mov {lhs = "match_ret_v1942"; rhs = (Reg "true_c15_v1943")}; Break
           ]);
         (16, [Mov {lhs = "match_ret_v1942"; rhs = (Reg "b2_v1941")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v1942") };
  { fname = "lambda_fun_v1959"; arg = (Some "y_v1953");
    body =
    [Switch {cond = (Env 1);
       case =
       [(17, [Mov {lhs = "match_ret_v1954"; rhs = (Reg "y_v1953")}; Break]);
         (18,
          [Mov {lhs = "x_v1955"; rhs = (Idx ((Env 1), 0))};
            CallClo {lhs = "app_lhs_v1956"; fptr = (Env 2);
              aptr = (Reg "x_v1955")};
            CallClo {lhs = "app_lhs_v1957"; fptr = (Reg "app_lhs_v1956");
              aptr = (Reg "y_v1953")};
            MakeStruct {lhs = "S_c18_v1958"; ctag = 18; size = 1;
              data = [(Reg "app_lhs_v1957")]};
            Mov {lhs = "match_ret_v1954"; rhs = (Reg "S_c18_v1958")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v1954") };
  { fname = "lambda_fun_v1970"; arg = (Some "y_v1963");
    body =
    [Switch {cond = (Env 1);
       case =
       [(17, [Mov {lhs = "match_ret_v1964"; rhs = (Reg "y_v1963")}; Break]);
         (18,
          [Mov {lhs = "x_v1965"; rhs = (Idx ((Env 1), 0))};
            CallClo {lhs = "app_lhs_v1966"; fptr = (Env 3);
              aptr = (Reg "y_v1963")};
            CallClo {lhs = "app_lhs_v1967"; fptr = (Env 2);
              aptr = (Reg "x_v1965")};
            CallClo {lhs = "app_lhs_v1968"; fptr = (Reg "app_lhs_v1967");
              aptr = (Reg "y_v1963")};
            CallClo {lhs = "app_lhs_v1969"; fptr = (Reg "app_lhs_v1966");
              aptr = (Reg "app_lhs_v1968")};
            Mov {lhs = "match_ret_v1964"; rhs = (Reg "app_lhs_v1969")}; Break
            ])
         ]}
      ];
    return = (Reg "match_ret_v1964") };
  { fname = "lambda_fun_v1986"; arg = (Some "y_v1974");
    body =
    [Switch {cond = (Env 1);
       case =
       [(17,
         [Switch {cond = (Reg "y_v1974");
            case =
            [(17,
              [MakeStruct {lhs = "true_c15_v1977"; ctag = 15; size = 0;
                 data = []};
                Mov {lhs = "match_ret_v1976"; rhs = (Reg "true_c15_v1977")};
                Break]);
              (18,
               [Mov {lhs = "__v1978"; rhs = (Idx ((Reg "y_v1974"), 0))};
                 MakeStruct {lhs = "false_c16_v1979"; ctag = 16; size = 0;
                   data = []};
                 Mov {lhs = "match_ret_v1976"; rhs = (Reg "false_c16_v1979")};
                 Break])
              ]};
           Mov {lhs = "match_ret_v1975"; rhs = (Reg "match_ret_v1976")};
           Break]);
         (18,
          [Mov {lhs = "x_v1980"; rhs = (Idx ((Env 1), 0))};
            Switch {cond = (Reg "y_v1974");
              case =
              [(17,
                [MakeStruct {lhs = "false_c16_v1982"; ctag = 16; size = 0;
                   data = []};
                  Mov {lhs = "match_ret_v1981"; rhs = (Reg "false_c16_v1982")};
                  Break]);
                (18,
                 [Mov {lhs = "y_v1983"; rhs = (Idx ((Reg "y_v1974"), 0))};
                   CallClo {lhs = "app_lhs_v1984"; fptr = (Env 2);
                     aptr = (Reg "x_v1980")};
                   CallClo {lhs = "app_lhs_v1985";
                     fptr = (Reg "app_lhs_v1984"); aptr = (Reg "y_v1983")};
                   Mov {lhs = "match_ret_v1981"; rhs = (Reg "app_lhs_v1985")};
                   Break])
                ]};
            Mov {lhs = "match_ret_v1975"; rhs = (Reg "match_ret_v1981")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v1975") };
  { fname = "lambda_fun_v1999"; arg = (Some "y_v1990");
    body =
    [Switch {cond = (Env 1);
       case =
       [(17,
         [MakeStruct {lhs = "true_c15_v1992"; ctag = 15; size = 0; data = []};
           Mov {lhs = "match_ret_v1991"; rhs = (Reg "true_c15_v1992")}; Break
           ]);
         (18,
          [Mov {lhs = "x_v1993"; rhs = (Idx ((Env 1), 0))};
            Switch {cond = (Reg "y_v1990");
              case =
              [(17,
                [MakeStruct {lhs = "false_c16_v1995"; ctag = 16; size = 0;
                   data = []};
                  Mov {lhs = "match_ret_v1994"; rhs = (Reg "false_c16_v1995")};
                  Break]);
                (18,
                 [Mov {lhs = "y_v1996"; rhs = (Idx ((Reg "y_v1990"), 0))};
                   CallClo {lhs = "app_lhs_v1997"; fptr = (Env 2);
                     aptr = (Reg "x_v1993")};
                   CallClo {lhs = "app_lhs_v1998";
                     fptr = (Reg "app_lhs_v1997"); aptr = (Reg "y_v1996")};
                   Mov {lhs = "match_ret_v1994"; rhs = (Reg "app_lhs_v1998")};
                   Break])
                ]};
            Mov {lhs = "match_ret_v1991"; rhs = (Reg "match_ret_v1994")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v1991") };
  { fname = "lambda_fun_v2015"; arg = (Some "y_v2003");
    body =
    [Switch {cond = (Env 1);
       case =
       [(17,
         [Switch {cond = (Reg "y_v2003");
            case =
            [(17,
              [MakeStruct {lhs = "true_c15_v2006"; ctag = 15; size = 0;
                 data = []};
                Mov {lhs = "match_ret_v2005"; rhs = (Reg "true_c15_v2006")};
                Break]);
              (18,
               [Mov {lhs = "__v2007"; rhs = (Idx ((Reg "y_v2003"), 0))};
                 MakeStruct {lhs = "false_c16_v2008"; ctag = 16; size = 0;
                   data = []};
                 Mov {lhs = "match_ret_v2005"; rhs = (Reg "false_c16_v2008")};
                 Break])
              ]};
           Mov {lhs = "match_ret_v2004"; rhs = (Reg "match_ret_v2005")};
           Break]);
         (18,
          [Mov {lhs = "x_v2009"; rhs = (Idx ((Env 1), 0))};
            Switch {cond = (Reg "y_v2003");
              case =
              [(17,
                [MakeStruct {lhs = "true_c15_v2011"; ctag = 15; size = 0;
                   data = []};
                  Mov {lhs = "match_ret_v2010"; rhs = (Reg "true_c15_v2011")};
                  Break]);
                (18,
                 [Mov {lhs = "y_v2012"; rhs = (Idx ((Reg "y_v2003"), 0))};
                   CallClo {lhs = "app_lhs_v2013"; fptr = (Env 2);
                     aptr = (Reg "x_v2009")};
                   CallClo {lhs = "app_lhs_v2014";
                     fptr = (Reg "app_lhs_v2013"); aptr = (Reg "y_v2012")};
                   Mov {lhs = "match_ret_v2010"; rhs = (Reg "app_lhs_v2014")};
                   Break])
                ]};
            Mov {lhs = "match_ret_v2004"; rhs = (Reg "match_ret_v2010")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v2004") };
  { fname = "lambda_fun_v2026"; arg = (Some "s2_v2019");
    body =
    [Switch {cond = (Env 1);
       case =
       [(20, [Mov {lhs = "match_ret_v2020"; rhs = (Reg "s2_v2019")}; Break]);
         (21,
          [Mov {lhs = "c_v2021"; rhs = (Idx ((Env 1), 0))};
            Mov {lhs = "s1_v2022"; rhs = (Idx ((Env 1), 1))};
            CallClo {lhs = "app_lhs_v2023"; fptr = (Env 2);
              aptr = (Reg "s1_v2022")};
            CallClo {lhs = "app_lhs_v2024"; fptr = (Reg "app_lhs_v2023");
              aptr = (Reg "s2_v2019")};
            MakeStruct {lhs = "String_c21_v2025"; ctag = 21; size = 2;
              data = [(Reg "c_v2021"); (Reg "app_lhs_v2024")]};
            Mov {lhs = "match_ret_v2020"; rhs = (Reg "String_c21_v2025")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v2020") };
  { fname = "lambda_fun_v2046"; arg = (Some "xs_v2038");
    body =
    [Switch {cond = (Reg "xs_v2038");
       case =
       [(22,
         [MakeStruct {lhs = "O_c17_v2040"; ctag = 17; size = 0; data = []};
           Mov {lhs = "match_ret_v2039"; rhs = (Reg "O_c17_v2040")}; Break]);
         (23,
          [Mov {lhs = "__v2041"; rhs = (Idx ((Reg "xs_v2038"), 0))};
            Mov {lhs = "xs_v2042"; rhs = (Idx ((Reg "xs_v2038"), 1))};
            CallClo {lhs = "app_lhs_v2043"; fptr = (Env 2); aptr = NULL};
            CallClo {lhs = "app_lhs_v2044"; fptr = (Reg "app_lhs_v2043");
              aptr = (Reg "xs_v2042")};
            MakeStruct {lhs = "S_c18_v2045"; ctag = 18; size = 1;
              data = [(Reg "app_lhs_v2044")]};
            Mov {lhs = "match_ret_v2039"; rhs = (Reg "S_c18_v2045")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v2039") };
  { fname = "lambda_fun_v2065"; arg = (Some "xs_v2050");
    body =
    [Switch {cond = (Reg "xs_v2050");
       case =
       [(24,
         [(FreeStruct (Reg "xs_v2050"));
           MakeStruct {lhs = "O_c17_v2052"; ctag = 17; size = 0; data = []};
           MakeStruct {lhs = "lnil_c24_v2053"; ctag = 24; size = 0; data = []};
           MakeStruct {lhs = "pair_lhs_v2054"; ctag = 0; size = 2;
             data = [(Reg "O_c17_v2052"); (Reg "lnil_c24_v2053")]};
           Mov {lhs = "match_ret_v2051"; rhs = (Reg "pair_lhs_v2054")}; Break
           ]);
         (25,
          [Mov {lhs = "x_v2055"; rhs = (Idx ((Reg "xs_v2050"), 0))};
            Mov {lhs = "xs_v2056"; rhs = (Idx ((Reg "xs_v2050"), 1))};
            (FreeStruct (Reg "xs_v2050"));
            CallClo {lhs = "app_lhs_v2057"; fptr = (Env 2); aptr = NULL};
            CallClo {lhs = "app_lhs_v2058"; fptr = (Reg "app_lhs_v2057");
              aptr = (Reg "xs_v2056")};
            Switch {cond = (Reg "app_lhs_v2058");
              case =
              [(0,
                [Mov {lhs = "n_v2060"; rhs = (Idx ((Reg "app_lhs_v2058"), 0))};
                  Mov {lhs = "xs_v2061";
                    rhs = (Idx ((Reg "app_lhs_v2058"), 1))};
                  (FreeStruct (Reg "app_lhs_v2058"));
                  MakeStruct {lhs = "S_c18_v2062"; ctag = 18; size = 1;
                    data = [(Reg "n_v2060")]};
                  MakeStruct {lhs = "lcons_c25_v2063"; ctag = 25; size = 2;
                    data = [(Reg "x_v2055"); (Reg "xs_v2061")]};
                  MakeStruct {lhs = "pair_lhs_v2064"; ctag = 0; size = 2;
                    data = [(Reg "S_c18_v2062"); (Reg "lcons_c25_v2063")]};
                  Mov {lhs = "match_ret_v2059"; rhs = (Reg "pair_lhs_v2064")};
                  Break])
                ]};
            Mov {lhs = "match_ret_v2051"; rhs = (Reg "match_ret_v2059")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v2051") };
  { fname = "lambda_fun_v2078"; arg = (Some "ys_v2070");
    body =
    [Switch {cond = (Env 1);
       case =
       [(22, [Mov {lhs = "match_ret_v2071"; rhs = (Reg "ys_v2070")}; Break]);
         (23,
          [Mov {lhs = "x_v2072"; rhs = (Idx ((Env 1), 0))};
            Mov {lhs = "xs_v2073"; rhs = (Idx ((Env 1), 1))};
            CallClo {lhs = "app_lhs_v2074"; fptr = (Env 4); aptr = NULL};
            CallClo {lhs = "app_lhs_v2075"; fptr = (Reg "app_lhs_v2074");
              aptr = (Reg "xs_v2073")};
            CallClo {lhs = "app_lhs_v2076"; fptr = (Reg "app_lhs_v2075");
              aptr = (Reg "ys_v2070")};
            MakeStruct {lhs = "cons_c23_v2077"; ctag = 23; size = 2;
              data = [(Reg "x_v2072"); (Reg "app_lhs_v2076")]};
            Mov {lhs = "match_ret_v2071"; rhs = (Reg "cons_c23_v2077")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v2071") };
  { fname = "lambda_fun_v2080"; arg = (Some "xs_v2069");
    body =
    [MakeClo {lhs = "lambda_lhs_v2079"; fname = "lambda_fun_v2078";
       env_size = 15; env_ext = [(Reg "xs_v2069")]}
      ];
    return = (Reg "lambda_lhs_v2079") };
  { fname = "lambda_fun_v2093"; arg = (Some "ys_v2085");
    body =
    [Switch {cond = (Env 1);
       case =
       [(24,
         [(FreeStruct (Env 1));
           Mov {lhs = "match_ret_v2086"; rhs = (Reg "ys_v2085")}; Break]);
         (25,
          [Mov {lhs = "x_v2087"; rhs = (Idx ((Env 1), 0))};
            Mov {lhs = "xs_v2088"; rhs = (Idx ((Env 1), 1))};
            (FreeStruct (Env 1));
            CallClo {lhs = "app_lhs_v2089"; fptr = (Env 4); aptr = NULL};
            CallClo {lhs = "app_lhs_v2090"; fptr = (Reg "app_lhs_v2089");
              aptr = (Reg "xs_v2088")};
            CallClo {lhs = "app_lhs_v2091"; fptr = (Reg "app_lhs_v2090");
              aptr = (Reg "ys_v2085")};
            (FreeClo (Reg "app_lhs_v2090"));
            MakeStruct {lhs = "lcons_c25_v2092"; ctag = 25; size = 2;
              data = [(Reg "x_v2087"); (Reg "app_lhs_v2091")]};
            Mov {lhs = "match_ret_v2086"; rhs = (Reg "lcons_c25_v2092")};
            Break])
         ]}
      ];
    return = (Reg "match_ret_v2086") };
  { fname = "lambda_fun_v2095"; arg = (Some "xs_v2084");
    body =
    [MakeClo {lhs = "lambda_lhs_v2094"; fname = "lambda_fun_v2093";
       env_size = 16; env_ext = [(Reg "xs_v2084")]}
      ];
    return = (Reg "lambda_lhs_v2094") };
  { fname = "lambda_fun_v2106"; arg = (Some "m_v2101");
    body =
    [Switch {cond = (Reg "m_v2101");
       case =
       [(26,
         [Mov {lhs = "a_v2103"; rhs = (Idx ((Reg "m_v2101"), 0))};
           (FreeStruct (Reg "m_v2101"));
           CallClo {lhs = "app_lhs_v2104"; fptr = (Env 1);
             aptr = (Reg "a_v2103")};
           MakeStruct {lhs = "Box_c26_v2105"; ctag = 26; size = 1;
             data = [(Reg "app_lhs_v2104")]};
           Mov {lhs = "match_ret_v2102"; rhs = (Reg "Box_c26_v2105")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v2102") };
  { fname = "lambda_fun_v2108"; arg = (Some "f_v2100");
    body =
    [MakeClo {lhs = "lambda_lhs_v2107"; fname = "lambda_fun_v2106";
       env_size = 19; env_ext = [(Reg "f_v2100")]}
      ];
    return = (Reg "lambda_lhs_v2107") };
  { fname = "lambda_fun_v2110"; arg = (Some "B_v2099");
    body =
    [MakeClo {lhs = "lambda_lhs_v2109"; fname = "lambda_fun_v2108";
       env_size = 17; env_ext = [(Reg "B_v2099")]}
      ];
    return = (Reg "lambda_lhs_v2109") };
  { fname = "lambda_fun_v2117"; arg = (Some "m_v2114");
    body =
    [Switch {cond = (Reg "m_v2114");
       case =
       [(26,
         [Mov {lhs = "a_v2116"; rhs = (Idx ((Reg "m_v2114"), 0))};
           (FreeStruct (Reg "m_v2114"));
           Mov {lhs = "match_ret_v2115"; rhs = (Reg "a_v2116")}; Break])
         ]}
      ];
    return = (Reg "match_ret_v2115") };
  { fname = "return_fun_v2138"; arg = (Some "__v2139"); body = [];
    return = (Env 7) };
  { fname = "return_fun_v2177"; arg = (Some "__v2178");
    body =
    [MakeStruct {lhs = "tt_c14_v2176"; ctag = 14; size = 0; data = []}];
    return = (Reg "tt_c14_v2176") };
  { fname = "return_fun_v2180"; arg = (Some "__v2181"); body = [];
    return = (Env 1) }
  ]

[MakeClo {lhs = "andb_i29"; fname = "lambda_fun_v1939"; env_size = 0;
   env_ext = []};
  MakeClo {lhs = "orb_i30"; fname = "lambda_fun_v1946"; env_size = 0;
    env_ext = [(Reg "andb_i29")]};
  MakeClo {lhs = "notb_i31"; fname = "lambda_fun_v1951"; env_size = 0;
    env_ext = [(Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "addn_i32"; fname = "lambda_fun_v1961"; env_size = 0;
    env_ext = [(Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "muln_i33"; fname = "lambda_fun_v1972"; env_size = 0;
    env_ext =
    [(Reg "addn_i32"); (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "eqn_i34"; fname = "lambda_fun_v1988"; env_size = 0;
    env_ext =
    [(Reg "muln_i33"); (Reg "addn_i32"); (Reg "notb_i31"); (Reg "orb_i30");
      (Reg "andb_i29")]};
  MakeClo {lhs = "lten_i35"; fname = "lambda_fun_v2001"; env_size = 0;
    env_ext =
    [(Reg "eqn_i34"); (Reg "muln_i33"); (Reg "addn_i32"); (Reg "notb_i31");
      (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "gten_i36"; fname = "lambda_fun_v2017"; env_size = 0;
    env_ext =
    [(Reg "lten_i35"); (Reg "eqn_i34"); (Reg "muln_i33"); (Reg "addn_i32");
      (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "cats_i39"; fname = "lambda_fun_v2028"; env_size = 0;
    env_ext =
    [(Reg "gten_i36"); (Reg "lten_i35"); (Reg "eqn_i34"); (Reg "muln_i33");
      (Reg "addn_i32"); (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "strlen_i40"; fname = "lambda_fun_v2036"; env_size = 0;
    env_ext =
    [(Reg "cats_i39"); (Reg "gten_i36"); (Reg "lten_i35"); (Reg "eqn_i34");
      (Reg "muln_i33"); (Reg "addn_i32"); (Reg "notb_i31"); (Reg "orb_i30");
      (Reg "andb_i29")]};
  MakeClo {lhs = "len_i41"; fname = "lambda_fun_v2048"; env_size = 0;
    env_ext =
    [(Reg "strlen_i40"); (Reg "cats_i39"); (Reg "gten_i36");
      (Reg "lten_i35"); (Reg "eqn_i34"); (Reg "muln_i33"); (Reg "addn_i32");
      (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "llen_i42"; fname = "lambda_fun_v2067"; env_size = 0;
    env_ext =
    [(Reg "len_i41"); (Reg "strlen_i40"); (Reg "cats_i39"); (Reg "gten_i36");
      (Reg "lten_i35"); (Reg "eqn_i34"); (Reg "muln_i33"); (Reg "addn_i32");
      (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "append_i43"; fname = "lambda_fun_v2082"; env_size = 0;
    env_ext =
    [(Reg "llen_i42"); (Reg "len_i41"); (Reg "strlen_i40"); (Reg "cats_i39");
      (Reg "gten_i36"); (Reg "lten_i35"); (Reg "eqn_i34"); (Reg "muln_i33");
      (Reg "addn_i32"); (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "lappend_i44"; fname = "lambda_fun_v2097"; env_size = 0;
    env_ext =
    [(Reg "append_i43"); (Reg "llen_i42"); (Reg "len_i41");
      (Reg "strlen_i40"); (Reg "cats_i39"); (Reg "gten_i36");
      (Reg "lten_i35"); (Reg "eqn_i34"); (Reg "muln_i33"); (Reg "addn_i32");
      (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "map_box_i45"; fname = "lambda_fun_v2112"; env_size = 0;
    env_ext =
    [(Reg "lappend_i44"); (Reg "append_i43"); (Reg "llen_i42");
      (Reg "len_i41"); (Reg "strlen_i40"); (Reg "cats_i39");
      (Reg "gten_i36"); (Reg "lten_i35"); (Reg "eqn_i34"); (Reg "muln_i33");
      (Reg "addn_i32"); (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "unbox_i46"; fname = "lambda_fun_v2119"; env_size = 0;
    env_ext =
    [(Reg "map_box_i45"); (Reg "lappend_i44"); (Reg "append_i43");
      (Reg "llen_i42"); (Reg "len_i41"); (Reg "strlen_i40");
      (Reg "cats_i39"); (Reg "gten_i36"); (Reg "lten_i35"); (Reg "eqn_i34");
      (Reg "muln_i33"); (Reg "addn_i32"); (Reg "notb_i31"); (Reg "orb_i30");
      (Reg "andb_i29")]};
  MakeClo {lhs = "readline_i53"; fname = "lambda_fun_v2141"; env_size = 0;
    env_ext =
    [(Reg "unbox_i46"); (Reg "map_box_i45"); (Reg "lappend_i44");
      (Reg "append_i43"); (Reg "llen_i42"); (Reg "len_i41");
      (Reg "strlen_i40"); (Reg "cats_i39"); (Reg "gten_i36");
      (Reg "lten_i35"); (Reg "eqn_i34"); (Reg "muln_i33"); (Reg "addn_i32");
      (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "print_i54"; fname = "lambda_fun_v2157"; env_size = 0;
    env_ext =
    [(Reg "readline_i53"); (Reg "unbox_i46"); (Reg "map_box_i45");
      (Reg "lappend_i44"); (Reg "append_i43"); (Reg "llen_i42");
      (Reg "len_i41"); (Reg "strlen_i40"); (Reg "cats_i39");
      (Reg "gten_i36"); (Reg "lten_i35"); (Reg "eqn_i34"); (Reg "muln_i33");
      (Reg "addn_i32"); (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  MakeClo {lhs = "prerr_i55"; fname = "lambda_fun_v2173"; env_size = 0;
    env_ext =
    [(Reg "print_i54"); (Reg "readline_i53"); (Reg "unbox_i46");
      (Reg "map_box_i45"); (Reg "lappend_i44"); (Reg "append_i43");
      (Reg "llen_i42"); (Reg "len_i41"); (Reg "strlen_i40");
      (Reg "cats_i39"); (Reg "gten_i36"); (Reg "lten_i35"); (Reg "eqn_i34");
      (Reg "muln_i33"); (Reg "addn_i32"); (Reg "notb_i31"); (Reg "orb_i30");
      (Reg "andb_i29")]};
  MakeClo {lhs = "return_lhs_v2179"; fname = "return_fun_v2177";
    env_size = 0;
    env_ext =
    [(Reg "prerr_i55"); (Reg "print_i54"); (Reg "readline_i53");
      (Reg "unbox_i46"); (Reg "map_box_i45"); (Reg "lappend_i44");
      (Reg "append_i43"); (Reg "llen_i42"); (Reg "len_i41");
      (Reg "strlen_i40"); (Reg "cats_i39"); (Reg "gten_i36");
      (Reg "lten_i35"); (Reg "eqn_i34"); (Reg "muln_i33"); (Reg "addn_i32");
      (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  CallClo {lhs = "x_v2175"; fptr = (Reg "return_lhs_v2179"); aptr = NULL};
  (FreeClo (Reg "return_lhs_v2179"));
  MakeClo {lhs = "return_lhs_v2182"; fname = "return_fun_v2180";
    env_size = 0;
    env_ext =
    [(Reg "x_v2175"); (Reg "prerr_i55"); (Reg "print_i54");
      (Reg "readline_i53"); (Reg "unbox_i46"); (Reg "map_box_i45");
      (Reg "lappend_i44"); (Reg "append_i43"); (Reg "llen_i42");
      (Reg "len_i41"); (Reg "strlen_i40"); (Reg "cats_i39");
      (Reg "gten_i36"); (Reg "lten_i35"); (Reg "eqn_i34"); (Reg "muln_i33");
      (Reg "addn_i32"); (Reg "notb_i31"); (Reg "orb_i30"); (Reg "andb_i29")]};
  CallClo {lhs = "__v2174"; fptr = (Reg "return_lhs_v2182"); aptr = NULL};
  (FreeClo (Reg "return_lhs_v2182"))]

NULL

trans23 success--------------------------

