parsing success--------------------------

inductive unit_d1 : U =
| tt_c1 of : unit_d1

inductive bool_d2 : U =
| true_c2 of : bool_d2 | false_c3 of : bool_d2

program andb_i1 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v147 : bool_d2) (b2_v148 : bool_d2) ⇒
    match b1_v147 as __v149 in ??1 with
    | true_c2  ⇒ b2_v148 | false_c3  ⇒ false_c3‹›
    end

program orb_i2 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v152 : bool_d2) (b2_v153 : bool_d2) ⇒
    match b1_v152 as __v154 in ??2 with
    | true_c2  ⇒ true_c2‹› | false_c3  ⇒ b2_v153
    end

program notb_i3 : bool_d2 → bool_d2 =
  fn (b_v156 : bool_d2) ⇒
    match b_v156 as __v157 in ??3 with
    | true_c2  ⇒ false_c3‹› | false_c3  ⇒ true_c2‹›
    end

inductive nat_d3 : U =
| O_c4 of : nat_d3 | S_c5 of (n_v158 : nat_d3) : nat_d3

program addn_i4 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v161 : nat_d3) (y_v162 : nat_d3) ⇒
    match x_v161 as __v163 in ??4 with
    | O_c4  ⇒ y_v162 | S_c5 x_v164 ⇒ (S_c5‹› (addn_i4 x_v164 y_v162))
    end

program muln_i5 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v167 : nat_d3) (y_v168 : nat_d3) ⇒
    match x_v167 as __v169 in ??5 with
    | O_c4  ⇒ y_v168
    | S_c5 x_v170 ⇒ (addn_i4 y_v168 (muln_i5 x_v170 y_v168))
    end

program eqn_i6 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v173 : nat_d3) (y_v174 : nat_d3) ⇒
    match x_v173 as __v175 in ??6 with
    | O_c4  ⇒
      match y_v174 as __v176 in ??8 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v177 ⇒ false_c3‹›
      end
    | S_c5 x_v178 ⇒
      match y_v174 as __v179 in ??7 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v180 ⇒ (eqn_i6 x_v178 y_v180)
      end
    end

program lten_i7 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v183 : nat_d3) (y_v184 : nat_d3) ⇒
    match x_v183 as __v185 in ??9 with
    | O_c4  ⇒ true_c2‹›
    | S_c5 x_v186 ⇒
      match y_v184 as __v187 in ??10 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v188 ⇒ (lten_i7 x_v186 y_v188)
      end
    end

program gten_i8 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v191 : nat_d3) (y_v192 : nat_d3) ⇒
    match x_v191 as __v193 in ??11 with
    | O_c4  ⇒
      match y_v192 as __v194 in ??13 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v195 ⇒ false_c3‹›
      end
    | S_c5 x_v196 ⇒
      match y_v192 as __v197 in ??12 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v198 ⇒ (gten_i8 x_v196 y_v198)
      end
    end

logical ltn_i9 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v201 : nat_d3) (y_v202 : nat_d3) ⇒
    match x_v201 as __v203 in ??14 with
    | O_c4  ⇒
      match y_v202 as __v204 in ??16 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v205 ⇒ true_c2‹›
      end
    | S_c5 x_v206 ⇒
      match y_v202 as __v207 in ??15 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v208 ⇒ (ltn_i9 x_v206 y_v208)
      end
    end

logical gtn_i10 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v211 : nat_d3) (y_v212 : nat_d3) ⇒
    match x_v211 as __v213 in ??17 with
    | O_c4  ⇒ false_c3‹›
    | S_c5 x_v214 ⇒
      match y_v212 as __v215 in ??18 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v216 ⇒ (gtn_i10 x_v214 y_v216)
      end
    end

inductive ascii_d4 : U =
| Ascii_c6 of
    (b0_v217 : bool_d2) (b1_v218 : bool_d2) (b2_v219 : bool_d2)
    (b3_v220 : bool_d2) (b4_v221 : bool_d2) (b5_v222 : bool_d2)
    (b6_v223 : bool_d2) (b7_v224 : bool_d2) : ascii_d4

inductive string_d5 : U =
| EmptyString_c7 of : string_d5
| String_c8 of (c_v225 : ascii_d4) (s_v226 : string_d5) : string_d5

program cats_i11 : string_d5 → string_d5 → string_d5 =
  fn (s1_v229 : string_d5) (s2_v230 : string_d5) ⇒
    match s1_v229 as __v231 in ??19 with
    | EmptyString_c7  ⇒ s2_v230
    | String_c8 c_v232 s1_v233 ⇒
      (String_c8‹› c_v232 (cats_i11 s1_v233 s2_v230))
    end

program strlen_i12 : string_d5 → nat_d3 =
  fn (s_v235 : string_d5) ⇒
    match s_v235 as __v236 in ??20 with
    | EmptyString_c7  ⇒ O_c4‹›
    | String_c8 __v237 s_v238 ⇒ (S_c5‹› (strlen_i12 s_v238))
    end

logical stdin_rec_i13 : unit_d1 → proto =
  fn (__v240 : unit_d1) ⇒
    ⇑(b_v241 : bool_d2) ⇒
      match b_v241 as __v242 in ??21 with
      | true_c2  ⇒ ⇓(__v243 : string_d5) ⇒ (stdin_rec_i13 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdout_rec_i14 : unit_d1 → proto =
  fn (__v245 : unit_d1) ⇒
    ⇑(b_v246 : bool_d2) ⇒
      match b_v246 as __v247 in ??22 with
      | true_c2  ⇒ ⇑(__v248 : string_d5) ⇒ (stdout_rec_i14 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stderr_rec_i15 : unit_d1 → proto =
  fn (__v250 : unit_d1) ⇒
    ⇑(b_v251 : bool_d2) ⇒
      match b_v251 as __v252 in ??23 with
      | true_c2  ⇒ ⇑(__v253 : string_d5) ⇒ (stderr_rec_i15 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdin_t_i16 : proto = (stdin_rec_i13 tt_c1‹›)

logical stdout_t_i17 : proto = (stdout_rec_i14 tt_c1‹›)

logical stderr_t_i18 : proto = (stderr_rec_i15 tt_c1‹›)

program readline_i19 : unit_d1 → IO string_d5 =
  fn (__v255 : unit_d1) ⇒
    let ch_v256 ⇐ open stdin in
    let ch_v257 ⇐ (send ch_v256 true_c2‹›) in
    let __v258 ⇐ recv ch_v257 in
    match __v258 as __v259 in ??24 with
    | ⟨s_v260, ch_v261⟩ ⇒
      let ch_v262 ⇐ (send ch_v261 false_c3‹›) in
      let __v263 ⇐ close ch_v262 in return s_v260
    end

program print_i20 : string_d5 → IO unit_d1 =
  fn (s_v265 : string_d5) ⇒
    let ch_v266 ⇐ open stdout in
    let ch_v267 ⇐ (send ch_v266 true_c2‹›) in
    let ch_v268 ⇐ (send ch_v267 s_v265) in
    let ch_v269 ⇐ (send ch_v268 false_c3‹›) in close ch_v269

program prerr_i21 : string_d5 → IO unit_d1 =
  fn (s_v271 : string_d5) ⇒
    let ch_v272 ⇐ open stderr in
    let ch_v273 ⇐ (send ch_v272 true_c2‹›) in
    let ch_v274 ⇐ (send ch_v273 s_v271) in
    let ch_v275 ⇐ (send ch_v274 false_c3‹›) in close ch_v275

inductive List_d6 ‹s_s276, t_s277›
  (A_v278 : Type‹s_s276›) : Type‹t_s277›
=
| Nil_c9 of
    ‹s_s279, t_s280› (A_v281 : Type‹s_s279›)
    : (List_d6‹s_s279, t_s280› A_v281)
| Cons_c10 of
    ‹s_s282, t_s283› (A_v284 : Type‹s_s282›) (hd_v285 : A_v284)
    (tl_v286 : (List_d6‹s_s282, t_s283› A_v284))
    : (List_d6‹s_s282, t_s283› A_v284)

logical len_i22 ‹s_s287, t_s288› :
  ∀ {A_v289 : Type‹s_s287›} →
    (List_d6‹s_s287, t_s288› A_v289) → nat_d3
=
  fn {A_v291 : Type‹s_s287›}
     (xs_v292 : (List_d6‹s_s287, t_s288› A_v291)) ⇒
    match xs_v292 as __v293 in ??25 with
    | Nil_c9  ⇒ O_c4‹›
    | Cons_c10 hd_v294 tl_v295 ⇒
      (addn_i4 1 (len_i22‹??28, ??27› ??26 tl_v295))
    end

program append_i23 ‹s_s296, t_s297› :
  ∀ {A_v298 : Type‹s_s296›} →
    (List_d6‹??29, t_s297› A_v298) →
      (List_d6‹??31, ??30› A_v298) ⊸ (List_d6‹??33, ??32› A_v298)
=
  fn {A_v301 : Type‹s_s296›}
     (xs_v302 : (List_d6‹??29, t_s297› A_v301)) ⇒
    ln (ys_v303 : ??34) ⇒
      match xs_v302 as __v304 in ??35 with
      | Nil_c9  ⇒ ys_v303
      | Cons_c10 x_v305 xs_v306 ⇒
        (Cons_c10‹??41, ??40›
          x_v305 (append_i23‹??38, ??37› ??36 xs_v306 ys_v303))
      end

logical append_len_i24 ‹s_s307, t_s308› :
  ∀ (A_v309 : Type‹s_s307›) →
    ∀ (xs_v310 : (List_d6‹??42, t_s308› A_v309)) →
      ∀ (ys_v311 : (List_d6‹??43, t_s308› A_v309)) →
        (len_i22‹??49, ??48›
          ??47 (append_i23‹??46, ??45› ??44 xs_v310 ys_v311)) ≡
          (addn_i4
            (len_i22‹??55, ??54› ??53 xs_v310)
            (len_i22‹??52, ??51› ??50 ys_v311))
=
  fn (A_v312 : Type‹s_s307›)
     (xs_v313 : (List_d6‹??42, t_s308› A_v312))
     (ys_v314 : (List_d6‹??43, t_s308› A_v312)) ⇒
    match xs_v313 as xs0_v315 in
      (len_i22‹??62, ??61›
        ??60 (append_i23‹??59, ??58› ??57 xs0_v315 ys_v314)) ≡
        (addn_i4
          (len_i22‹??68, ??67› ??66 xs0_v315)
          (len_i22‹??65, ??64› ??63 ys_v314)) with
    | Nil_c9  ⇒ refl ??81
    | Cons_c10 x_v316 xs0_v317 ⇒
      rew [n_v318, __v319 ⇒
        (S_c5‹›
          (len_i22‹??79, ??78›
            ??77 (append_i23‹??76, ??75› ??74 xs0_v317 ys_v314))) ≡
          (S_c5‹› n_v318)]
        (append_len_i24‹??72, ??71› ??70 xs0_v317 ys_v314) in
      refl ??73
    end

logical list_i25 ‹s_s320› : {Type‹s_s320›} → U =
  fn {A_v322 : Type‹s_s320›} ⇒ (List_d6‹??82, U› A_v322)

program ls0_i26 : (list_i25‹??84› ??83) =
  (Cons_c10‹??90, ??89› O_c4‹› Nil_c9‹??87, ??86›)

program ls1_i27 : (list_i25‹??92› ??91) =
  (Cons_c10‹??98, ??97› O_c4‹› Nil_c9‹??95, ??94›)

program ls2_i28 : ??99 = (append_i23‹??102, ??101› ??100 ls0_i26 ls1_i27)

program id_i29 ‹s_s323› :
  ∀ {A_v324 : Type‹s_s323›} → A_v324 → A_v324
= fn {A_v326 : Type‹s_s323›} (x_v327 : A_v326) ⇒ x_v327

program main_i30 : IO unit_d1 =
  let s_v328 ⇐ (readline_i19 tt_c1‹›) in
  (id_i29‹??106› ??105 (print_i20 (id_i29‹??104› ??103 s_v328)))

trans01 success--------------------------

inductive unit_d1 : U =
| tt_c1 of : unit_d1

inductive bool_d2 : U =
| true_c2 of : bool_d2 | false_c3 of : bool_d2

program andb_i1 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v1569 : bool_d2) (b2_v1570 : bool_d2) ⇒
    match b1_v1569 as __v1571 in bool_d2 with
    | true_c2  ⇒ b2_v1570 | false_c3  ⇒ false_c3‹›
    end

program orb_i2 : bool_d2 → bool_d2 → bool_d2 =
  fn (b1_v1574 : bool_d2) (b2_v1575 : bool_d2) ⇒
    match b1_v1574 as __v1576 in bool_d2 with
    | true_c2  ⇒ true_c2‹› | false_c3  ⇒ b2_v1575
    end

program notb_i3 : bool_d2 → bool_d2 =
  fn (b_v1578 : bool_d2) ⇒
    match b_v1578 as __v1579 in bool_d2 with
    | true_c2  ⇒ false_c3‹› | false_c3  ⇒ true_c2‹›
    end

inductive nat_d3 : U =
| O_c4 of : nat_d3 | S_c5 of (n_v1580 : nat_d3) : nat_d3

program addn_i4 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v1583 : nat_d3) (y_v1584 : nat_d3) ⇒
    match x_v1583 as __v1585 in nat_d3 with
    | O_c4  ⇒ y_v1584
    | S_c5 x_v1586 ⇒ (S_c5‹› (addn_i4 x_v1586 y_v1584))
    end

program muln_i5 : nat_d3 → nat_d3 → nat_d3 =
  fn (x_v1589 : nat_d3) (y_v1590 : nat_d3) ⇒
    match x_v1589 as __v1591 in nat_d3 with
    | O_c4  ⇒ y_v1590
    | S_c5 x_v1592 ⇒ (addn_i4 y_v1590 (muln_i5 x_v1592 y_v1590))
    end

program eqn_i6 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v1595 : nat_d3) (y_v1596 : nat_d3) ⇒
    match x_v1595 as __v1597 in bool_d2 with
    | O_c4  ⇒
      match y_v1596 as __v1598 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v1599 ⇒ false_c3‹›
      end
    | S_c5 x_v1600 ⇒
      match y_v1596 as __v1601 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v1602 ⇒ (eqn_i6 x_v1600 y_v1602)
      end
    end

program lten_i7 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v1605 : nat_d3) (y_v1606 : nat_d3) ⇒
    match x_v1605 as __v1607 in bool_d2 with
    | O_c4  ⇒ true_c2‹›
    | S_c5 x_v1608 ⇒
      match y_v1606 as __v1609 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v1610 ⇒ (lten_i7 x_v1608 y_v1610)
      end
    end

program gten_i8 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v1613 : nat_d3) (y_v1614 : nat_d3) ⇒
    match x_v1613 as __v1615 in bool_d2 with
    | O_c4  ⇒
      match y_v1614 as __v1616 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 __v1617 ⇒ false_c3‹›
      end
    | S_c5 x_v1618 ⇒
      match y_v1614 as __v1619 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v1620 ⇒ (gten_i8 x_v1618 y_v1620)
      end
    end

logical ltn_i9 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v1623 : nat_d3) (y_v1624 : nat_d3) ⇒
    match x_v1623 as __v1625 in bool_d2 with
    | O_c4  ⇒
      match y_v1624 as __v1626 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v1627 ⇒ true_c2‹›
      end
    | S_c5 x_v1628 ⇒
      match y_v1624 as __v1629 in bool_d2 with
      | O_c4  ⇒ false_c3‹› | S_c5 y_v1630 ⇒ (ltn_i9 x_v1628 y_v1630)
      end
    end

logical gtn_i10 : nat_d3 → nat_d3 → bool_d2 =
  fn (x_v1633 : nat_d3) (y_v1634 : nat_d3) ⇒
    match x_v1633 as __v1635 in bool_d2 with
    | O_c4  ⇒ false_c3‹›
    | S_c5 x_v1636 ⇒
      match y_v1634 as __v1637 in bool_d2 with
      | O_c4  ⇒ true_c2‹› | S_c5 y_v1638 ⇒ (gtn_i10 x_v1636 y_v1638)
      end
    end

inductive ascii_d4 : U =
| Ascii_c6 of
    (b0_v1639 : bool_d2) (b1_v1640 : bool_d2) (b2_v1641 : bool_d2)
    (b3_v1642 : bool_d2) (b4_v1643 : bool_d2) (b5_v1644 : bool_d2)
    (b6_v1645 : bool_d2) (b7_v1646 : bool_d2) : ascii_d4

inductive string_d5 : U =
| EmptyString_c7 of : string_d5
| String_c8 of (c_v1647 : ascii_d4) (s_v1648 : string_d5) : string_d5

program cats_i11 : string_d5 → string_d5 → string_d5 =
  fn (s1_v1651 : string_d5) (s2_v1652 : string_d5) ⇒
    match s1_v1651 as __v1653 in string_d5 with
    | EmptyString_c7  ⇒ s2_v1652
    | String_c8 c_v1654 s1_v1655 ⇒
      (String_c8‹› c_v1654 (cats_i11 s1_v1655 s2_v1652))
    end

program strlen_i12 : string_d5 → nat_d3 =
  fn (s_v1657 : string_d5) ⇒
    match s_v1657 as __v1658 in nat_d3 with
    | EmptyString_c7  ⇒ O_c4‹›
    | String_c8 __v1659 s_v1660 ⇒ (S_c5‹› (strlen_i12 s_v1660))
    end

logical stdin_rec_i13 : unit_d1 → proto =
  fn (__v1662 : unit_d1) ⇒
    ⇑(b_v1663 : bool_d2) ⇒
      match b_v1663 as __v1664 in proto with
      | true_c2  ⇒ ⇓(__v1665 : string_d5) ⇒ (stdin_rec_i13 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdout_rec_i14 : unit_d1 → proto =
  fn (__v1667 : unit_d1) ⇒
    ⇑(b_v1668 : bool_d2) ⇒
      match b_v1668 as __v1669 in proto with
      | true_c2  ⇒
        ⇑(__v1670 : string_d5) ⇒ (stdout_rec_i14 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stderr_rec_i15 : unit_d1 → proto =
  fn (__v1672 : unit_d1) ⇒
    ⇑(b_v1673 : bool_d2) ⇒
      match b_v1673 as __v1674 in proto with
      | true_c2  ⇒
        ⇑(__v1675 : string_d5) ⇒ (stderr_rec_i15 tt_c1‹›)
      | false_c3  ⇒ end
      end

logical stdin_t_i16 : proto = (stdin_rec_i13 tt_c1‹›)

logical stdout_t_i17 : proto = (stdout_rec_i14 tt_c1‹›)

logical stderr_t_i18 : proto = (stderr_rec_i15 tt_c1‹›)

program readline_i19 : unit_d1 → IO string_d5 =
  fn (__v1677 : unit_d1) ⇒
    let ch_v1678 ⇐ open stdin in
    let ch_v1679 ⇐ (send ch_v1678 true_c2‹›) in
    let __v1680 ⇐ recv ch_v1679 in
    match __v1680 as __v1681 in IO string_d5 with
    | ⟨s_v1682, ch_v1683⟩ ⇒
      let ch_v1684 ⇐ (send ch_v1683 false_c3‹›) in
      let __v1685 ⇐ close ch_v1684 in return s_v1682
    end

program print_i20 : string_d5 → IO unit_d1 =
  fn (s_v1687 : string_d5) ⇒
    let ch_v1688 ⇐ open stdout in
    let ch_v1689 ⇐ (send ch_v1688 true_c2‹›) in
    let ch_v1690 ⇐ (send ch_v1689 s_v1687) in
    let ch_v1691 ⇐ (send ch_v1690 false_c3‹›) in close ch_v1691

program prerr_i21 : string_d5 → IO unit_d1 =
  fn (s_v1693 : string_d5) ⇒
    let ch_v1694 ⇐ open stderr in
    let ch_v1695 ⇐ (send ch_v1694 true_c2‹›) in
    let ch_v1696 ⇐ (send ch_v1695 s_v1693) in
    let ch_v1697 ⇐ (send ch_v1696 false_c3‹›) in close ch_v1697

inductive List_d6 ‹s_s1698, t_s1699›
  (A_v1700 : Type‹s_s1698›) : Type‹t_s1699›
=
| Nil_c9 of
    ‹s_s1701, t_s1702› (A_v1703 : Type‹s_s1701›)
    : (List_d6‹s_s1701, t_s1702› A_v1703)
| Cons_c10 of
    ‹s_s1704, t_s1705› (A_v1706 : Type‹s_s1704›) (hd_v1707 : A_v1706)
    (tl_v1708 : (List_d6‹s_s1704, t_s1705› A_v1706))
    : (List_d6‹s_s1704, t_s1705› A_v1706)

logical len_i22 ‹s_s1709, t_s1710› :
  ∀ {A_v1711 : Type‹s_s1709›} →
    (List_d6‹s_s1709, t_s1710› A_v1711) → nat_d3
=
  fn {A_v1713 : Type‹s_s1709›}
     (xs_v1714 : (List_d6‹s_s1709, t_s1710› A_v1713)) ⇒
    match xs_v1714 as __v1715 in nat_d3 with
    | Nil_c9  ⇒ O_c4‹›
    | Cons_c10 hd_v1716 tl_v1717 ⇒
      (addn_i4 1 (len_i22‹s_s1709, t_s1710› A_v1713 tl_v1717))
    end

program append_i23 ‹s_s1718, t_s1719› :
  ∀ {A_v1720 : Type‹s_s1718›} →
    (List_d6‹s_s1718, t_s1719› A_v1720) →
      (List_d6‹s_s1718, t_s1719› A_v1720) ⊸
        (List_d6‹s_s1718, t_s1719› A_v1720)
=
  fn {A_v1723 : Type‹s_s1718›}
     (xs_v1724 : (List_d6‹s_s1718, t_s1719› A_v1723)) ⇒
    ln (ys_v1725 : (List_d6‹s_s1718, t_s1719› A_v1723)) ⇒
      match xs_v1724 as __v1726 in
        (List_d6‹s_s1718, t_s1719› A_v1723) with
      | Nil_c9  ⇒ ys_v1725
      | Cons_c10 x_v1727 xs_v1728 ⇒
        (Cons_c10‹s_s1718, t_s1719›
          x_v1727
          (append_i23‹s_s1718, t_s1719› A_v1723 xs_v1728 ys_v1725))
      end

logical append_len_i24 ‹s_s1729, t_s1730› :
  ∀ (A_v1731 : Type‹s_s1729›) →
    ∀ (xs_v1732 : (List_d6‹s_s1729, t_s1730› A_v1731)) →
      ∀ (ys_v1733 : (List_d6‹s_s1729, t_s1730› A_v1731)) →
        (len_i22‹s_s1729, t_s1730›
          A_v1731
          (append_i23‹s_s1729, t_s1730› A_v1731 xs_v1732 ys_v1733)) ≡
          (addn_i4
            (len_i22‹s_s1729, t_s1730› A_v1731 xs_v1732)
            (len_i22‹s_s1729, t_s1730› A_v1731 ys_v1733))
=
  fn (A_v1734 : Type‹s_s1729›)
     (xs_v1735 : (List_d6‹s_s1729, t_s1730› A_v1734))
     (ys_v1736 : (List_d6‹s_s1729, t_s1730› A_v1734)) ⇒
    match xs_v1735 as xs0_v1737 in
      (len_i22‹s_s1729, t_s1730›
        A_v1734 (append_i23‹s_s1729, t_s1730› A_v1734 xs0_v1737 ys_v1736)) ≡
        (addn_i4
          (len_i22‹s_s1729, t_s1730› A_v1734 xs0_v1737)
          (len_i22‹s_s1729, t_s1730› A_v1734 ys_v1736)) with
    | Nil_c9  ⇒
      refl (len_i22‹s_s1729, t_s1730›
             A_v1734
             (append_i23‹s_s1729, t_s1730›
               A_v1734 Nil_c9‹s_s1729, t_s1730› ys_v1736))
    | Cons_c10 x_v1738 xs0_v1739 ⇒
      rew [n_v1740, __v1741 ⇒
        (S_c5‹›
          (len_i22‹s_s1729, t_s1730›
            A_v1734
            (append_i23‹s_s1729, t_s1730› A_v1734 xs0_v1739 ys_v1736))) ≡
          (S_c5‹› n_v1740)]
        (append_len_i24‹s_s1729, t_s1730› A_v1734 xs0_v1739 ys_v1736) in
      refl (S_c5‹›
             (len_i22‹s_s1729, t_s1730›
               A_v1734
               (append_i23‹s_s1729, t_s1730› A_v1734 xs0_v1739 ys_v1736)))
    end

logical list_i25 ‹s_s1742› : {Type‹s_s1742›} → U =
  fn {A_v1744 : Type‹s_s1742›} ⇒ (List_d6‹s_s1742, U› A_v1744)

program ls0_i26 : (list_i25‹U› nat_d3) =
  (Cons_c10‹U, U› O_c4‹› Nil_c9‹U, U›)

program ls1_i27 : (list_i25‹U› nat_d3) =
  (Cons_c10‹U, U› O_c4‹› Nil_c9‹U, U›)

program ls2_i28 : (List_d6‹U, U› nat_d3) =
  (append_i23‹U, U› nat_d3 ls0_i26 ls1_i27)

program id_i29 ‹s_s1745› :
  ∀ {A_v1746 : Type‹s_s1745›} → A_v1746 → A_v1746
= fn {A_v1748 : Type‹s_s1745›} (x_v1749 : A_v1748) ⇒ x_v1749

program main_i30 : IO unit_d1 =
  let s_v1750 ⇐ (readline_i19 tt_c1‹›) in
  (id_i29‹L› IO unit_d1 (print_i20 (id_i29‹U› string_d5 s_v1750)))

trans1e success--------------------------

data unit_d7 =
| tt_c11 of size(0)

data bool_d8 =
| true_c12 of size(0) | false_c13 of size(0)

def andb_i31 =
  fn b1_v2003 b2_v2004 ⇒
    match b1_v2003 with
    | true_c12  ⇒ b2_v2004 | false_c13  ⇒ false_c13
    end

def orb_i32 =
  fn b1_v2005 b2_v2006 ⇒
    match b1_v2005 with
    | true_c12  ⇒ true_c12 | false_c13  ⇒ b2_v2006
    end

def notb_i33 =
  fn b_v2007 ⇒
    match b_v2007 with
    | true_c12  ⇒ false_c13 | false_c13  ⇒ true_c12
    end

data nat_d9 =
| O_c14 of size(0) | S_c15 of size(1)

def addn_i34 =
  fn x_v2008 y_v2009 ⇒
    match x_v2008 with
    | O_c14  ⇒ y_v2009
    | S_c15 x_v2010 ⇒ (S_c15 ((addn_i34 x_v2010) y_v2009))
    end

def muln_i35 =
  fn x_v2011 y_v2012 ⇒
    match x_v2011 with
    | O_c14  ⇒ y_v2012
    | S_c15 x_v2013 ⇒ ((addn_i34 y_v2012) ((muln_i35 x_v2013) y_v2012))
    end

def eqn_i36 =
  fn x_v2014 y_v2015 ⇒
    match x_v2014 with
    | O_c14  ⇒
      match y_v2015 with
      | O_c14  ⇒ true_c12 | S_c15 __v2016 ⇒ false_c13
      end
    | S_c15 x_v2017 ⇒
      match y_v2015 with
      | O_c14  ⇒ false_c13 | S_c15 y_v2018 ⇒ ((eqn_i36 x_v2017) y_v2018)
      end
    end

def lten_i37 =
  fn x_v2019 y_v2020 ⇒
    match x_v2019 with
    | O_c14  ⇒ true_c12
    | S_c15 x_v2021 ⇒
      match y_v2020 with
      | O_c14  ⇒ false_c13 | S_c15 y_v2022 ⇒ ((lten_i37 x_v2021) y_v2022)
      end
    end

def gten_i38 =
  fn x_v2023 y_v2024 ⇒
    match x_v2023 with
    | O_c14  ⇒
      match y_v2024 with
      | O_c14  ⇒ true_c12 | S_c15 __v2025 ⇒ false_c13
      end
    | S_c15 x_v2026 ⇒
      match y_v2024 with
      | O_c14  ⇒ true_c12 | S_c15 y_v2027 ⇒ ((gten_i38 x_v2026) y_v2027)
      end
    end

data ascii_d10 =
| Ascii_c16 of size(8)

data string_d11 =
| EmptyString_c17 of size(0) | String_c18 of size(2)

def cats_i41 =
  fn s1_v2028 s2_v2029 ⇒
    match s1_v2028 with
    | EmptyString_c17  ⇒ s2_v2029
    | String_c18 c_v2030 s1_v2031 ⇒
      (String_c18 c_v2030 ((cats_i41 s1_v2031) s2_v2029))
    end

def strlen_i42 =
  fn s_v2032 ⇒
    match s_v2032 with
    | EmptyString_c17  ⇒ O_c14
    | String_c18 __v2033 s_v2034 ⇒ (S_c15 (strlen_i42 s_v2034))
    end

def readline_i49 =
  fn __v2035 ⇒
    let ch_v2036 ⇐ open stdin in
    let ch_v2037 ⇐ (send ch_v2036 true_c12) in
    let __v2038 ⇐ recv ch_v2037 in
    match __v2038 with
    | (s_v2039, ch_v2040) ⇒
      let ch_v2041 ⇐ (send ch_v2040 false_c13) in
      let __v2042 ⇐ close⇑ ch_v2041 in return s_v2039
    end

def print_i50 =
  fn s_v2043 ⇒
    let ch_v2044 ⇐ open stdout in
    let ch_v2045 ⇐ (send ch_v2044 true_c12) in
    let ch_v2046 ⇐ (send ch_v2045 s_v2043) in
    let ch_v2047 ⇐ (send ch_v2046 false_c13) in close⇑ ch_v2047

def prerr_i51 =
  fn s_v2048 ⇒
    let ch_v2049 ⇐ open stderr in
    let ch_v2050 ⇐ (send ch_v2049 true_c12) in
    let ch_v2051 ⇐ (send ch_v2050 s_v2048) in
    let ch_v2052 ⇐ (send ch_v2051 false_c13) in close⇑ ch_v2052

data ListUU_d15 =
| NilUU_c25 of size(0) | ConsUU_c26 of size(2)

data ListUL_d14 =
| NilUL_c23 of size(0) | ConsUL_c24 of size(2)

data ListLU_d13 =
| NilLU_c21 of size(0)

data ListLL_d12 =
| NilLL_c19 of size(0) | ConsLL_c20 of size(2)

def appendUU_i59 =
  fn A_v2053 xs_v2054 ⇒
    ln ys_v2055 ⇒
      match xs_v2054 with
      | NilUU_c25  ⇒ ys_v2055
      | ConsUU_c26 x_v2056 xs_v2057 ⇒
        (ConsUU_c26 x_v2056 (((appendUU_i59 NULL) xs_v2057) ys_v2055))
      end

def appendUL_i58 =
  fn A_v2058 xs_v2059 ⇒
    ln ys_v2060 ⇒
      match xs_v2059 with
      | NilUL_c23  ⇒ ys_v2060
      | ConsUL_c24 x_v2061 xs_v2062 ⇒
        (ConsUL_c24 x_v2061 (((appendUL_i58 NULL) xs_v2062) ys_v2060))
      end

def appendLL_i56 =
  fn A_v2063 xs_v2064 ⇒
    ln ys_v2065 ⇒
      match xs_v2064 with
      | NilLL_c19  ⇒ ys_v2065
      | ConsLL_c20 x_v2066 xs_v2067 ⇒
        (ConsLL_c20 x_v2066 (((appendLL_i56 NULL) xs_v2067) ys_v2065))
      end

def ls0_i66 = (ConsUU_c26 O_c14 NilUU_c25)

def ls1_i67 = (ConsUU_c26 O_c14 NilUU_c25)

def ls2_i68 = (((appendUU_i59 NULL) ls0_i66) ls1_i67)

def idU_i70 = fn A_v2068 x_v2069 ⇒ x_v2069

def idL_i69 = fn A_v2070 x_v2071 ⇒ x_v2071

main =
  let s_v2072 ⇐ (readline_i49 tt_c11) in
  ((idL_i69 NULL) (print_i50 ((idU_i70 NULL) s_v2072)))

trans12 success--------------------------

fun andb_i31(b1_v2172, b2_v2173) =
  match b1_v2172 with
  | true_c12  ⇒ b2_v2173 | false_c13  ⇒ false_c13
  end

val andbclo_i71 = fn b1_v2174 b2_v2175 ⇒ andb_i31(b1_v2174, b2_v2175)

fun orb_i32(b1_v2176, b2_v2177) =
  match b1_v2176 with
  | true_c12  ⇒ true_c12 | false_c13  ⇒ b2_v2177
  end

val orbclo_i72 = fn b1_v2178 b2_v2179 ⇒ orb_i32(b1_v2178, b2_v2179)

fun notb_i33(b_v2180) =
  match b_v2180 with
  | true_c12  ⇒ false_c13 | false_c13  ⇒ true_c12
  end

val notbclo_i73 = fn b_v2181 ⇒ notb_i33(b_v2181)

fun addn_i34(x_v2182, y_v2183) =
  match x_v2182 with
  | O_c14  ⇒ y_v2183 | S_c15 x_v2184 ⇒ (S_c15 addn_i34(x_v2184, y_v2183))
  end

val addnclo_i74 = fn x_v2185 y_v2186 ⇒ addn_i34(x_v2185, y_v2186)

fun muln_i35(x_v2187, y_v2188) =
  match x_v2187 with
  | O_c14  ⇒ y_v2188
  | S_c15 x_v2189 ⇒ addn_i34(y_v2188, muln_i35(x_v2189, y_v2188))
  end

val mulnclo_i75 = fn x_v2190 y_v2191 ⇒ muln_i35(x_v2190, y_v2191)

fun eqn_i36(x_v2192, y_v2193) =
  match x_v2192 with
  | O_c14  ⇒
    match y_v2193 with
    | O_c14  ⇒ true_c12 | S_c15 __v2194 ⇒ false_c13
    end
  | S_c15 x_v2195 ⇒
    match y_v2193 with
    | O_c14  ⇒ false_c13 | S_c15 y_v2196 ⇒ eqn_i36(x_v2195, y_v2196)
    end
  end

val eqnclo_i76 = fn x_v2197 y_v2198 ⇒ eqn_i36(x_v2197, y_v2198)

fun lten_i37(x_v2199, y_v2200) =
  match x_v2199 with
  | O_c14  ⇒ true_c12
  | S_c15 x_v2201 ⇒
    match y_v2200 with
    | O_c14  ⇒ false_c13 | S_c15 y_v2202 ⇒ lten_i37(x_v2201, y_v2202)
    end
  end

val ltenclo_i77 = fn x_v2203 y_v2204 ⇒ lten_i37(x_v2203, y_v2204)

fun gten_i38(x_v2205, y_v2206) =
  match x_v2205 with
  | O_c14  ⇒
    match y_v2206 with
    | O_c14  ⇒ true_c12 | S_c15 __v2207 ⇒ false_c13
    end
  | S_c15 x_v2208 ⇒
    match y_v2206 with
    | O_c14  ⇒ true_c12 | S_c15 y_v2209 ⇒ gten_i38(x_v2208, y_v2209)
    end
  end

val gtenclo_i78 = fn x_v2210 y_v2211 ⇒ gten_i38(x_v2210, y_v2211)

fun cats_i41(s1_v2212, s2_v2213) =
  match s1_v2212 with
  | EmptyString_c17  ⇒ s2_v2213
  | String_c18 c_v2214 s1_v2215 ⇒
    (String_c18 c_v2214 cats_i41(s1_v2215, s2_v2213))
  end

val catsclo_i79 = fn s1_v2216 s2_v2217 ⇒ cats_i41(s1_v2216, s2_v2217)

fun strlen_i42(s_v2218) =
  match s_v2218 with
  | EmptyString_c17  ⇒ O_c14
  | String_c18 __v2219 s_v2220 ⇒ (S_c15 strlen_i42(s_v2220))
  end

val strlenclo_i80 = fn s_v2221 ⇒ strlen_i42(s_v2221)

fun readline_i49(__v2222) =
  ln __v2223 ⇒
    let ch_v2224 = (ln __v2225 ⇒ open stdin) NULL in
    let ch_v2226 =
      ((fn x_v2227 ⇒ ln __v2228 ⇒ send(ch_v2224, x_v2227)) true_c12) NULL
    in
    let __v2229 = (ln __v2230 ⇒ recv(ch_v2226)) NULL in
    (match __v2229 with
     | (s_v2231, ch_v2232) ⇒
       ln __v2233 ⇒
         let ch_v2234 =
           ((fn x_v2235 ⇒ ln __v2236 ⇒ send(ch_v2232, x_v2235)) false_c13)
             NULL
         in
         let __v2237 = (ln __v2238 ⇒ let __v2239 = ch_v2234 in tt_c11) NULL
         in (ln __v2240 ⇒ s_v2231) NULL
     end) NULL

val readlineclo_i81 = fn __v2241 ⇒ readline_i49(__v2241)

fun print_i50(s_v2242) =
  ln __v2243 ⇒
    let ch_v2244 = (ln __v2245 ⇒ open stdout) NULL in
    let ch_v2246 =
      ((fn x_v2247 ⇒ ln __v2248 ⇒ send(ch_v2244, x_v2247)) true_c12) NULL
    in
    let ch_v2249 =
      ((fn x_v2250 ⇒ ln __v2251 ⇒ send(ch_v2246, x_v2250)) s_v2242) NULL
    in
    let ch_v2252 =
      ((fn x_v2253 ⇒ ln __v2254 ⇒ send(ch_v2249, x_v2253)) false_c13)
        NULL
    in (ln __v2255 ⇒ let __v2256 = ch_v2252 in tt_c11) NULL

val printclo_i82 = fn s_v2257 ⇒ print_i50(s_v2257)

fun prerr_i51(s_v2258) =
  ln __v2259 ⇒
    let ch_v2260 = (ln __v2261 ⇒ open stderr) NULL in
    let ch_v2262 =
      ((fn x_v2263 ⇒ ln __v2264 ⇒ send(ch_v2260, x_v2263)) true_c12) NULL
    in
    let ch_v2265 =
      ((fn x_v2266 ⇒ ln __v2267 ⇒ send(ch_v2262, x_v2266)) s_v2258) NULL
    in
    let ch_v2268 =
      ((fn x_v2269 ⇒ ln __v2270 ⇒ send(ch_v2265, x_v2269)) false_c13)
        NULL
    in (ln __v2271 ⇒ let __v2272 = ch_v2268 in tt_c11) NULL

val prerrclo_i83 = fn s_v2273 ⇒ prerr_i51(s_v2273)

fun appendUU_i59(A_v2274, xs_v2275, ys_v2276) =
  match xs_v2275 with
  | NilUU_c25  ⇒ ys_v2276
  | ConsUU_c26 x_v2277 xs_v2278 ⇒
    (ConsUU_c26 x_v2277 appendUU_i59(NULL, xs_v2278, ys_v2276))
  end

val appendUUclo_i84 =
  fn A_v2279 xs_v2280 ⇒
    ln ys_v2281 ⇒ appendUU_i59(A_v2279, xs_v2280, ys_v2281)

fun appendUL_i58(A_v2282, xs_v2283, ys_v2284) =
  match xs_v2283 with
  | NilUL_c23  ⇒ ys_v2284
  | ConsUL_c24 x_v2285 xs_v2286 ⇒
    (ConsUL_c24 x_v2285 appendUL_i58(NULL, xs_v2286, ys_v2284))
  end

val appendULclo_i85 =
  fn A_v2287 xs_v2288 ⇒
    ln ys_v2289 ⇒ appendUL_i58(A_v2287, xs_v2288, ys_v2289)

fun appendLL_i56(A_v2290, xs_v2291, ys_v2292) =
  match xs_v2291 with
  | NilLL_c19  ⇒ ys_v2292
  | ConsLL_c20 x_v2293 xs_v2294 ⇒
    (ConsLL_c20 x_v2293 appendLL_i56(NULL, xs_v2294, ys_v2292))
  end

val appendLLclo_i86 =
  fn A_v2295 xs_v2296 ⇒
    ln ys_v2297 ⇒ appendLL_i56(A_v2295, xs_v2296, ys_v2297)

val ls0_i66 = (ConsUU_c26 O_c14 NilUU_c25)

val ls1_i67 = (ConsUU_c26 O_c14 NilUU_c25)

val ls2_i68 = appendUU_i59(NULL, ls0_i66, ls1_i67)

fun idU_i70(A_v2298, x_v2299) = x_v2299

val idUclo_i87 = fn A_v2300 x_v2301 ⇒ idU_i70(A_v2300, x_v2301)

fun idL_i69(A_v2302, x_v2303) = x_v2303

val idLclo_i88 = fn A_v2304 x_v2305 ⇒ idL_i69(A_v2304, x_v2305)

main =
  (ln __v2306 ⇒
     let s_v2307 = (readline_i49(tt_c11)) NULL in
     (idL_i69(NULL, print_i50(idU_i70(NULL, s_v2307)))) NULL)
    NULL

trans23 success--------------------------

fun andb_i31(b1_v2452, b2_v2453) =
  match b1_v2452 with
  | true_c12  ⇒ b2_v2453 | false_c13  ⇒ false_c13
  end

val andbclo_i71 = fn b1_v2454 b2_v2455 ⇒ andb_i31(b1_v2454, b2_v2455)

fun orb_i32(b1_v2456, b2_v2457) =
  match b1_v2456 with
  | true_c12  ⇒ true_c12 | false_c13  ⇒ b2_v2457
  end

val orbclo_i72 = fn b1_v2458 b2_v2459 ⇒ orb_i32(b1_v2458, b2_v2459)

fun notb_i33(b_v2460) =
  match b_v2460 with
  | true_c12  ⇒ false_c13 | false_c13  ⇒ true_c12
  end

val notbclo_i73 = fn b_v2461 ⇒ notb_i33(b_v2461)

fun addn_i34(x_v2462, y_v2463) =
  match x_v2462 with
  | O_c14  ⇒ y_v2463 | S_c15 x_v2464 ⇒ (S_c15 addn_i34(x_v2464, y_v2463))
  end

val addnclo_i74 = fn x_v2465 y_v2466 ⇒ addn_i34(x_v2465, y_v2466)

fun muln_i35(x_v2467, y_v2468) =
  match x_v2467 with
  | O_c14  ⇒ y_v2468
  | S_c15 x_v2469 ⇒ addn_i34(y_v2468, muln_i35(x_v2469, y_v2468))
  end

val mulnclo_i75 = fn x_v2470 y_v2471 ⇒ muln_i35(x_v2470, y_v2471)

fun eqn_i36(x_v2472, y_v2473) =
  match x_v2472 with
  | O_c14  ⇒
    match y_v2473 with
    | O_c14  ⇒ true_c12 | S_c15 __v2474 ⇒ false_c13
    end
  | S_c15 x_v2475 ⇒
    match y_v2473 with
    | O_c14  ⇒ false_c13 | S_c15 y_v2476 ⇒ eqn_i36(x_v2475, y_v2476)
    end
  end

val eqnclo_i76 = fn x_v2477 y_v2478 ⇒ eqn_i36(x_v2477, y_v2478)

fun lten_i37(x_v2479, y_v2480) =
  match x_v2479 with
  | O_c14  ⇒ true_c12
  | S_c15 x_v2481 ⇒
    match y_v2480 with
    | O_c14  ⇒ false_c13 | S_c15 y_v2482 ⇒ lten_i37(x_v2481, y_v2482)
    end
  end

val ltenclo_i77 = fn x_v2483 y_v2484 ⇒ lten_i37(x_v2483, y_v2484)

fun gten_i38(x_v2485, y_v2486) =
  match x_v2485 with
  | O_c14  ⇒
    match y_v2486 with
    | O_c14  ⇒ true_c12 | S_c15 __v2487 ⇒ false_c13
    end
  | S_c15 x_v2488 ⇒
    match y_v2486 with
    | O_c14  ⇒ true_c12 | S_c15 y_v2489 ⇒ gten_i38(x_v2488, y_v2489)
    end
  end

val gtenclo_i78 = fn x_v2490 y_v2491 ⇒ gten_i38(x_v2490, y_v2491)

fun cats_i41(s1_v2492, s2_v2493) =
  match s1_v2492 with
  | EmptyString_c17  ⇒ s2_v2493
  | String_c18 c_v2494 s1_v2495 ⇒
    (String_c18 c_v2494 cats_i41(s1_v2495, s2_v2493))
  end

val catsclo_i79 = fn s1_v2496 s2_v2497 ⇒ cats_i41(s1_v2496, s2_v2497)

fun strlen_i42(s_v2498) =
  match s_v2498 with
  | EmptyString_c17  ⇒ O_c14
  | String_c18 __v2499 s_v2500 ⇒ (S_c15 strlen_i42(s_v2500))
  end

val strlenclo_i80 = fn s_v2501 ⇒ strlen_i42(s_v2501)

fun readline_i49(__v2502) =
  ln __v2503 ⇒
    let ch_v2504 = open stdin in
    let ch_v2505 = send(ch_v2504, true_c12) in
    let __v2506 = recv(ch_v2505) in
    (match __v2506 with
     | (s_v2507, ch_v2508) ⇒
       ln __v2509 ⇒
         let ch_v2510 = send(ch_v2508, false_c13) in
         let __v2511 = let __v2512 = ch_v2510 in tt_c11 in s_v2507
     end) NULL

val readlineclo_i81 = fn __v2513 ⇒ readline_i49(__v2513)

fun print_i50(s_v2514) =
  ln __v2515 ⇒
    let ch_v2516 = open stdout in
    let ch_v2517 = send(ch_v2516, true_c12) in
    let ch_v2518 = send(ch_v2517, s_v2514) in
    let ch_v2519 = send(ch_v2518, false_c13) in
    let __v2520 = ch_v2519 in tt_c11

val printclo_i82 = fn s_v2521 ⇒ print_i50(s_v2521)

fun prerr_i51(s_v2522) =
  ln __v2523 ⇒
    let ch_v2524 = open stderr in
    let ch_v2525 = send(ch_v2524, true_c12) in
    let ch_v2526 = send(ch_v2525, s_v2522) in
    let ch_v2527 = send(ch_v2526, false_c13) in
    let __v2528 = ch_v2527 in tt_c11

val prerrclo_i83 = fn s_v2529 ⇒ prerr_i51(s_v2529)

fun appendUU_i59(A_v2530, xs_v2531, ys_v2532) =
  match xs_v2531 with
  | NilUU_c25  ⇒ ys_v2532
  | ConsUU_c26 x_v2533 xs_v2534 ⇒
    (ConsUU_c26 x_v2533 appendUU_i59(NULL, xs_v2534, ys_v2532))
  end

val appendUUclo_i84 =
  fn A_v2535 xs_v2536 ⇒
    ln ys_v2537 ⇒ appendUU_i59(A_v2535, xs_v2536, ys_v2537)

fun appendUL_i58(A_v2538, xs_v2539, ys_v2540) =
  match xs_v2539 with
  | NilUL_c23  ⇒ ys_v2540
  | ConsUL_c24 x_v2541 xs_v2542 ⇒
    (ConsUL_c24 x_v2541 appendUL_i58(NULL, xs_v2542, ys_v2540))
  end

val appendULclo_i85 =
  fn A_v2543 xs_v2544 ⇒
    ln ys_v2545 ⇒ appendUL_i58(A_v2543, xs_v2544, ys_v2545)

fun appendLL_i56(A_v2546, xs_v2547, ys_v2548) =
  match xs_v2547 with
  | NilLL_c19  ⇒ ys_v2548
  | ConsLL_c20 x_v2549 xs_v2550 ⇒
    (ConsLL_c20 x_v2549 appendLL_i56(NULL, xs_v2550, ys_v2548))
  end

val appendLLclo_i86 =
  fn A_v2551 xs_v2552 ⇒
    ln ys_v2553 ⇒ appendLL_i56(A_v2551, xs_v2552, ys_v2553)

val ls0_i66 = (ConsUU_c26 O_c14 NilUU_c25)

val ls1_i67 = (ConsUU_c26 O_c14 NilUU_c25)

val ls2_i68 = appendUU_i59(NULL, ls0_i66, ls1_i67)

fun idU_i70(A_v2554, x_v2555) = x_v2555

val idUclo_i87 = fn A_v2556 x_v2557 ⇒ idU_i70(A_v2556, x_v2557)

fun idL_i69(A_v2558, x_v2559) = x_v2559

val idLclo_i88 = fn A_v2560 x_v2561 ⇒ idL_i69(A_v2560, x_v2561)

main =
  let s_v2562 = (readline_i49(tt_c11)) NULL in
  (idL_i69(NULL, print_i50(idU_i70(NULL, s_v2562)))) NULL

trans3e success--------------------------

trans34 success--------------------------

